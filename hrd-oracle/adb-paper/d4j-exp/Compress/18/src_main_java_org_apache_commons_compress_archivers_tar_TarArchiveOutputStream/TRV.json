{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "public static final int LONGFILE_ERROR = 0;",
      "right" : "public static final int LONGFILE_ERROR = 0;",
      "info" : "FieldDeclaration[1694-1801]:FieldDeclaration[1694-1801]"
    }, {
      "left" : "public static final int LONGFILE_TRUNCATE = 1;",
      "right" : "public static final int LONGFILE_TRUNCATE = 1;",
      "info" : "FieldDeclaration[1807-1909]:FieldDeclaration[1807-1909]"
    }, {
      "left" : "public static final int LONGFILE_GNU = 2;",
      "right" : "public static final int LONGFILE_GNU = 2;",
      "info" : "FieldDeclaration[1915-2036]:FieldDeclaration[1915-2036]"
    }, {
      "left" : "public static final int LONGFILE_POSIX = 3;",
      "right" : "public static final int LONGFILE_POSIX = 3;",
      "info" : "FieldDeclaration[2042-2167]:FieldDeclaration[2042-2167]"
    }, {
      "left" : "public static final int BIGNUMBER_ERROR = 0;",
      "right" : "public static final int BIGNUMBER_ERROR = 0;",
      "info" : "FieldDeclaration[2173-2299]:FieldDeclaration[2173-2299]"
    }, {
      "left" : "public static final int BIGNUMBER_STAR = 1;",
      "right" : "public static final int BIGNUMBER_STAR = 1;",
      "info" : "FieldDeclaration[2305-2436]:FieldDeclaration[2305-2436]"
    }, {
      "left" : "public static final int BIGNUMBER_POSIX = 2;",
      "right" : "public static final int BIGNUMBER_POSIX = 2;",
      "info" : "FieldDeclaration[2442-2564]:FieldDeclaration[2442-2564]"
    }, {
      "left" : "private long      currSize;",
      "right" : "private long      currSize;",
      "info" : "FieldDeclaration[2570-2597]:FieldDeclaration[2570-2597]"
    }, {
      "left" : "private String    currName;",
      "right" : "private String    currName;",
      "info" : "FieldDeclaration[2602-2629]:FieldDeclaration[2602-2629]"
    }, {
      "left" : "private long      currBytes;",
      "right" : "private long      currBytes;",
      "info" : "FieldDeclaration[2634-2662]:FieldDeclaration[2634-2662]"
    }, {
      "left" : "private final byte[]    recordBuf;",
      "right" : "private final byte[]    recordBuf;",
      "info" : "FieldDeclaration[2667-2701]:FieldDeclaration[2667-2701]"
    }, {
      "left" : "private int       assemLen;",
      "right" : "private int       assemLen;",
      "info" : "FieldDeclaration[2706-2733]:FieldDeclaration[2706-2733]"
    }, {
      "left" : "private final byte[]    assemBuf;",
      "right" : "private final byte[]    assemBuf;",
      "info" : "FieldDeclaration[2738-2771]:FieldDeclaration[2738-2771]"
    }, {
      "left" : "protected final TarBuffer buffer;",
      "right" : "protected final TarBuffer buffer;",
      "info" : "FieldDeclaration[2776-2809]:FieldDeclaration[2776-2809]"
    }, {
      "left" : "private int       longFileMode = LONGFILE_ERROR;",
      "right" : "private int       longFileMode = LONGFILE_ERROR;",
      "info" : "FieldDeclaration[2814-2862]:FieldDeclaration[2814-2862]"
    }, {
      "left" : "private int       bigNumberMode = BIGNUMBER_ERROR;",
      "right" : "private int       bigNumberMode = BIGNUMBER_ERROR;",
      "info" : "FieldDeclaration[2867-2917]:FieldDeclaration[2867-2917]"
    }, {
      "left" : "private boolean closed = false;",
      "right" : "private boolean closed = false;",
      "info" : "FieldDeclaration[2923-2954]:FieldDeclaration[2923-2954]"
    }, {
      "left" : "private boolean haveUnclosedEntry = false;",
      "right" : "private boolean haveUnclosedEntry = false;",
      "info" : "FieldDeclaration[2960-3084]:FieldDeclaration[2960-3084]"
    }, {
      "left" : "private boolean finished = false;",
      "right" : "private boolean finished = false;",
      "info" : "FieldDeclaration[3090-3172]:FieldDeclaration[3090-3172]"
    }, {
      "left" : "private final OutputStream out;",
      "right" : "private final OutputStream out;",
      "info" : "FieldDeclaration[3178-3209]:FieldDeclaration[3178-3209]"
    }, {
      "left" : "private final ZipEncoding encoding;",
      "right" : "private final ZipEncoding encoding;",
      "info" : "FieldDeclaration[3215-3250]:FieldDeclaration[3215-3250]"
    }, {
      "left" : "private boolean addPaxHeadersForNonAsciiNames = false;",
      "right" : "private boolean addPaxHeadersForNonAsciiNames = false;",
      "info" : "FieldDeclaration[3256-3310]:FieldDeclaration[3256-3310]"
    }, {
      "left" : "private static final ZipEncoding ASCII =\n        ZipEncodingHelper.getZipEncoding(\"ASCII\");",
      "right" : "private static final ZipEncoding ASCII =\n        ZipEncodingHelper.getZipEncoding(\"ASCII\");",
      "info" : "FieldDeclaration[3315-3406]:FieldDeclaration[3315-3406]"
    }, {
      "left" : "public TarArchiveOutputStream(OutputStream os)",
      "right" : "public TarArchiveOutputStream(OutputStream os)",
      "info" : "MethodDeclaration[3412-3635]:MethodDeclaration[3412-3635]"
    }, {
      "left" : "public TarArchiveOutputStream(OutputStream os, String encoding)",
      "right" : "public TarArchiveOutputStream(OutputStream os, String encoding)",
      "info" : "MethodDeclaration[3641-3992]:MethodDeclaration[3641-3992]"
    }, {
      "left" : "public TarArchiveOutputStream(OutputStream os, int blockSize)",
      "right" : "public TarArchiveOutputStream(OutputStream os, int blockSize)",
      "info" : "MethodDeclaration[3998-4266]:MethodDeclaration[3998-4266]"
    }, {
      "left" : "public TarArchiveOutputStream(OutputStream os, int blockSize,\n                                  String encoding)",
      "right" : "public TarArchiveOutputStream(OutputStream os, int blockSize,\n                                  String encoding)",
      "info" : "MethodDeclaration[4272-4702]:MethodDeclaration[4272-4702]"
    }, {
      "left" : "public TarArchiveOutputStream(OutputStream os, int blockSize, int recordSize)",
      "right" : "public TarArchiveOutputStream(OutputStream os, int blockSize, int recordSize)",
      "info" : "MethodDeclaration[4708-5031]:MethodDeclaration[4708-5031]"
    }, {
      "left" : "public TarArchiveOutputStream(OutputStream os, int blockSize,\n                                  int recordSize, String encoding)",
      "right" : "public TarArchiveOutputStream(OutputStream os, int blockSize,\n                                  int recordSize, String encoding)",
      "info" : "MethodDeclaration[5037-5763]:MethodDeclaration[5037-5763]"
    }, {
      "left" : "public void setLongFileMode(int longFileMode)",
      "right" : "public void setLongFileMode(int longFileMode)",
      "info" : "MethodDeclaration[5769-6155]:MethodDeclaration[5769-6155]"
    }, {
      "left" : "public void setBigNumberMode(int bigNumberMode)",
      "right" : "public void setBigNumberMode(int bigNumberMode)",
      "info" : "MethodDeclaration[6161-6638]:MethodDeclaration[6161-6638]"
    }, {
      "left" : "public void setAddPaxHeadersForNonAsciiNames(boolean b)",
      "right" : "public void setAddPaxHeadersForNonAsciiNames(boolean b)",
      "info" : "MethodDeclaration[6644-6855]:MethodDeclaration[6644-6855]"
    }, {
      "left" : "public int getCount()",
      "right" : "public int getCount()",
      "info" : "MethodDeclaration[6861-6960]:MethodDeclaration[6861-6960]"
    }, {
      "left" : "public long getBytesWritten()",
      "right" : "public long getBytesWritten()",
      "info" : "MethodDeclaration[6966-7080]:MethodDeclaration[6966-7080]"
    }, {
      "left" : "public void finish() throws IOException",
      "right" : "public void finish() throws IOException",
      "info" : "MethodDeclaration[7086-7852]:MethodDeclaration[7086-7852]"
    }, {
      "left" : "public void close() throws IOException",
      "right" : "public void close() throws IOException",
      "info" : "MethodDeclaration[7858-8183]:MethodDeclaration[7858-8183]"
    }, {
      "left" : "public int getRecordSize()",
      "right" : "public int getRecordSize()",
      "info" : "MethodDeclaration[8189-8393]:MethodDeclaration[8189-8393]"
    }, {
      "left" : "public void putArchiveEntry(ArchiveEntry archiveEntry) throws IOException",
      "right" : "public void putArchiveEntry(ArchiveEntry archiveEntry) throws IOException",
      "info" : "MethodDeclaration[8399-11856]:MethodDeclaration[8399-11856]"
    }, {
      "left" : "public void closeArchiveEntry() throws IOException",
      "right" : "public void closeArchiveEntry() throws IOException",
      "info" : "MethodDeclaration[11862-13202]:MethodDeclaration[11862-13202]"
    }, {
      "left" : "public void write(byte[] wBuf, int wOffset, int numToWrite) throws IOException",
      "right" : "public void write(byte[] wBuf, int wOffset, int numToWrite) throws IOException",
      "info" : "MethodDeclaration[13208-16127]:MethodDeclaration[13208-16127]"
    }, {
      "left" : "private String stripTo7Bits(String name)",
      "right" : "private String stripTo7Bits(String name)",
      "info" : "MethodDeclaration[18034-18449]:MethodDeclaration[18138-18553]"
    }, {
      "left" : "private void writeEOFRecord() throws IOException",
      "right" : "private void writeEOFRecord() throws IOException",
      "info" : "MethodDeclaration[18455-18780]:MethodDeclaration[18559-18884]"
    }, {
      "left" : "public void flush() throws IOException",
      "right" : "public void flush() throws IOException",
      "info" : "MethodDeclaration[18786-18867]:MethodDeclaration[18890-18971]"
    }, {
      "left" : "public ArchiveEntry createArchiveEntry(File inputFile, String entryName)\n            throws IOException",
      "right" : "public ArchiveEntry createArchiveEntry(File inputFile, String entryName)\n            throws IOException",
      "info" : "MethodDeclaration[18873-19185]:MethodDeclaration[18977-19289]"
    }, {
      "left" : "private void addPaxHeadersForBigNumbers(Map<String, String> paxHeaders,\n                                            TarArchiveEntry entry)",
      "right" : "private void addPaxHeadersForBigNumbers(Map<String, String> paxHeaders,\n                                            TarArchiveEntry entry)",
      "info" : "MethodDeclaration[19191-20341]:MethodDeclaration[19295-20445]"
    }, {
      "left" : "private void addPaxHeaderForBigNumber(Map<String, String> paxHeaders,\n                                          String header, long value,\n                                          long maxValue)",
      "right" : "private void addPaxHeaderForBigNumber(Map<String, String> paxHeaders,\n                                          String header, long value,\n                                          long maxValue)",
      "info" : "MethodDeclaration[20347-20664]:MethodDeclaration[20451-20768]"
    }, {
      "left" : "private void failForBigNumbers(TarArchiveEntry entry)",
      "right" : "private void failForBigNumbers(TarArchiveEntry entry)",
      "info" : "MethodDeclaration[20670-21426]:MethodDeclaration[20774-21530]"
    }, {
      "left" : "private void failForBigNumber(String field, long value, long maxValue)",
      "right" : "private void failForBigNumber(String field, long value, long maxValue)",
      "info" : "MethodDeclaration[21432-21745]:MethodDeclaration[21536-21849]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3509-3515]:Modifier[3509-3515]"
    }, {
      "left" : "TarArchiveOutputStream",
      "right" : "TarArchiveOutputStream",
      "info" : "SimpleName[3516-3538]:SimpleName[3516-3538]"
    }, {
      "left" : "OutputStream os",
      "right" : "OutputStream os",
      "info" : "SingleVariableDeclaration[3539-3554]:SingleVariableDeclaration[3539-3554]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3556-3635]:Block[3556-3635]"
    }, {
      "left" : "this(os, TarBuffer.DEFAULT_BLKSIZE, TarBuffer.DEFAULT_RCDSIZE);",
      "right" : "this(os, TarBuffer.DEFAULT_BLKSIZE, TarBuffer.DEFAULT_RCDSIZE);",
      "info" : "ConstructorInvocation[3566-3629]:ConstructorInvocation[3566-3629]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3839-3845]:Modifier[3839-3845]"
    }, {
      "left" : "TarArchiveOutputStream",
      "right" : "TarArchiveOutputStream",
      "info" : "SimpleName[3846-3868]:SimpleName[3846-3868]"
    }, {
      "left" : "OutputStream os",
      "right" : "OutputStream os",
      "info" : "SingleVariableDeclaration[3869-3884]:SingleVariableDeclaration[3869-3884]"
    }, {
      "left" : "String encoding",
      "right" : "String encoding",
      "info" : "SingleVariableDeclaration[3886-3901]:SingleVariableDeclaration[3886-3901]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3903-3992]:Block[3903-3992]"
    }, {
      "left" : "this(os, TarBuffer.DEFAULT_BLKSIZE, TarBuffer.DEFAULT_RCDSIZE, encoding);",
      "right" : "this(os, TarBuffer.DEFAULT_BLKSIZE, TarBuffer.DEFAULT_RCDSIZE, encoding);",
      "info" : "ConstructorInvocation[3913-3986]:ConstructorInvocation[3913-3986]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4141-4147]:Modifier[4141-4147]"
    }, {
      "left" : "TarArchiveOutputStream",
      "right" : "TarArchiveOutputStream",
      "info" : "SimpleName[4148-4170]:SimpleName[4148-4170]"
    }, {
      "left" : "OutputStream os",
      "right" : "OutputStream os",
      "info" : "SingleVariableDeclaration[4171-4186]:SingleVariableDeclaration[4171-4186]"
    }, {
      "left" : "int blockSize",
      "right" : "int blockSize",
      "info" : "SingleVariableDeclaration[4188-4201]:SingleVariableDeclaration[4188-4201]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4203-4266]:Block[4203-4266]"
    }, {
      "left" : "this(os, blockSize, TarBuffer.DEFAULT_RCDSIZE);",
      "right" : "this(os, blockSize, TarBuffer.DEFAULT_RCDSIZE);",
      "info" : "ConstructorInvocation[4213-4260]:ConstructorInvocation[4213-4260]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4516-4522]:Modifier[4516-4522]"
    }, {
      "left" : "TarArchiveOutputStream",
      "right" : "TarArchiveOutputStream",
      "info" : "SimpleName[4523-4545]:SimpleName[4523-4545]"
    }, {
      "left" : "OutputStream os",
      "right" : "OutputStream os",
      "info" : "SingleVariableDeclaration[4546-4561]:SingleVariableDeclaration[4546-4561]"
    }, {
      "left" : "int blockSize",
      "right" : "int blockSize",
      "info" : "SingleVariableDeclaration[4563-4576]:SingleVariableDeclaration[4563-4576]"
    }, {
      "left" : "String encoding",
      "right" : "String encoding",
      "info" : "SingleVariableDeclaration[4612-4627]:SingleVariableDeclaration[4612-4627]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4629-4702]:Block[4629-4702]"
    }, {
      "left" : "this(os, blockSize, TarBuffer.DEFAULT_RCDSIZE, encoding);",
      "right" : "this(os, blockSize, TarBuffer.DEFAULT_RCDSIZE, encoding);",
      "info" : "ConstructorInvocation[4639-4696]:ConstructorInvocation[4639-4696]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4899-4905]:Modifier[4899-4905]"
    }, {
      "left" : "TarArchiveOutputStream",
      "right" : "TarArchiveOutputStream",
      "info" : "SimpleName[4906-4928]:SimpleName[4906-4928]"
    }, {
      "left" : "OutputStream os",
      "right" : "OutputStream os",
      "info" : "SingleVariableDeclaration[4929-4944]:SingleVariableDeclaration[4929-4944]"
    }, {
      "left" : "int blockSize",
      "right" : "int blockSize",
      "info" : "SingleVariableDeclaration[4946-4959]:SingleVariableDeclaration[4946-4959]"
    }, {
      "left" : "int recordSize",
      "right" : "int recordSize",
      "info" : "SingleVariableDeclaration[4961-4975]:SingleVariableDeclaration[4961-4975]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4977-5031]:Block[4977-5031]"
    }, {
      "left" : "this(os, blockSize, recordSize, null);",
      "right" : "this(os, blockSize, recordSize, null);",
      "info" : "ConstructorInvocation[4987-5025]:ConstructorInvocation[4987-5025]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5329-5335]:Modifier[5329-5335]"
    }, {
      "left" : "TarArchiveOutputStream",
      "right" : "TarArchiveOutputStream",
      "info" : "SimpleName[5336-5358]:SimpleName[5336-5358]"
    }, {
      "left" : "OutputStream os",
      "right" : "OutputStream os",
      "info" : "SingleVariableDeclaration[5359-5374]:SingleVariableDeclaration[5359-5374]"
    }, {
      "left" : "int blockSize",
      "right" : "int blockSize",
      "info" : "SingleVariableDeclaration[5376-5389]:SingleVariableDeclaration[5376-5389]"
    }, {
      "left" : "int recordSize",
      "right" : "int recordSize",
      "info" : "SingleVariableDeclaration[5425-5439]:SingleVariableDeclaration[5425-5439]"
    }, {
      "left" : "String encoding",
      "right" : "String encoding",
      "info" : "SingleVariableDeclaration[5441-5456]:SingleVariableDeclaration[5441-5456]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5458-5763]:Block[5458-5763]"
    }, {
      "left" : "out = new CountingOutputStream(os);",
      "right" : "out = new CountingOutputStream(os);",
      "info" : "ExpressionStatement[5468-5503]:ExpressionStatement[5468-5503]"
    }, {
      "left" : "this.encoding = ZipEncodingHelper.getZipEncoding(encoding);",
      "right" : "this.encoding = ZipEncodingHelper.getZipEncoding(encoding);",
      "info" : "ExpressionStatement[5512-5571]:ExpressionStatement[5512-5571]"
    }, {
      "left" : "this.buffer = new TarBuffer(out, blockSize, recordSize);",
      "right" : "this.buffer = new TarBuffer(out, blockSize, recordSize);",
      "info" : "ExpressionStatement[5581-5637]:ExpressionStatement[5581-5637]"
    }, {
      "left" : "this.assemLen = 0;",
      "right" : "this.assemLen = 0;",
      "info" : "ExpressionStatement[5646-5664]:ExpressionStatement[5646-5664]"
    }, {
      "left" : "this.assemBuf = new byte[recordSize];",
      "right" : "this.assemBuf = new byte[recordSize];",
      "info" : "ExpressionStatement[5673-5710]:ExpressionStatement[5673-5710]"
    }, {
      "left" : "this.recordBuf = new byte[recordSize];",
      "right" : "this.recordBuf = new byte[recordSize];",
      "info" : "ExpressionStatement[5719-5757]:ExpressionStatement[5719-5757]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6060-6066]:Modifier[6060-6066]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6067-6071]:PrimitiveType[6067-6071]"
    }, {
      "left" : "setLongFileMode",
      "right" : "setLongFileMode",
      "info" : "SimpleName[6072-6087]:SimpleName[6072-6087]"
    }, {
      "left" : "int longFileMode",
      "right" : "int longFileMode",
      "info" : "SingleVariableDeclaration[6088-6104]:SingleVariableDeclaration[6088-6104]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6106-6155]:Block[6106-6155]"
    }, {
      "left" : "this.longFileMode = longFileMode;",
      "right" : "this.longFileMode = longFileMode;",
      "info" : "ExpressionStatement[6116-6149]:ExpressionStatement[6116-6149]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6539-6545]:Modifier[6539-6545]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6546-6550]:PrimitiveType[6546-6550]"
    }, {
      "left" : "setBigNumberMode",
      "right" : "setBigNumberMode",
      "info" : "SimpleName[6551-6567]:SimpleName[6551-6567]"
    }, {
      "left" : "int bigNumberMode",
      "right" : "int bigNumberMode",
      "info" : "SingleVariableDeclaration[6568-6585]:SingleVariableDeclaration[6568-6585]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6587-6638]:Block[6587-6638]"
    }, {
      "left" : "this.bigNumberMode = bigNumberMode;",
      "right" : "this.bigNumberMode = bigNumberMode;",
      "info" : "ExpressionStatement[6597-6632]:ExpressionStatement[6597-6632]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6749-6755]:Modifier[6749-6755]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6756-6760]:PrimitiveType[6756-6760]"
    }, {
      "left" : "setAddPaxHeadersForNonAsciiNames",
      "right" : "setAddPaxHeadersForNonAsciiNames",
      "info" : "SimpleName[6761-6793]:SimpleName[6761-6793]"
    }, {
      "left" : "boolean b",
      "right" : "boolean b",
      "info" : "SingleVariableDeclaration[6794-6803]:SingleVariableDeclaration[6794-6803]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6805-6855]:Block[6805-6855]"
    }, {
      "left" : "addPaxHeadersForNonAsciiNames = b;",
      "right" : "addPaxHeadersForNonAsciiNames = b;",
      "info" : "ExpressionStatement[6815-6849]:ExpressionStatement[6815-6849]"
    }, {
      "left" : "@Deprecated",
      "right" : "@Deprecated",
      "info" : "MarkerAnnotation[6861-6872]:MarkerAnnotation[6861-6872]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[6877-6886]:MarkerAnnotation[6877-6886]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6891-6897]:Modifier[6891-6897]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[6898-6901]:PrimitiveType[6898-6901]"
    }, {
      "left" : "getCount",
      "right" : "getCount",
      "info" : "SimpleName[6902-6910]:SimpleName[6902-6910]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6913-6960]:Block[6913-6960]"
    }, {
      "left" : "return (int) getBytesWritten();",
      "right" : "return (int) getBytesWritten();",
      "info" : "ReturnStatement[6923-6954]:ReturnStatement[6923-6954]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[6966-6975]:MarkerAnnotation[6966-6975]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6980-6986]:Modifier[6980-6986]"
    }, {
      "left" : "long",
      "right" : "long",
      "info" : "PrimitiveType[6987-6991]:PrimitiveType[6987-6991]"
    }, {
      "left" : "getBytesWritten",
      "right" : "getBytesWritten",
      "info" : "SimpleName[6992-7007]:SimpleName[6992-7007]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7010-7080]:Block[7010-7080]"
    }, {
      "left" : "return ((CountingOutputStream) out).getBytesWritten();",
      "right" : "return ((CountingOutputStream) out).getBytesWritten();",
      "info" : "ReturnStatement[7020-7074]:ReturnStatement[7020-7074]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[7451-7460]:MarkerAnnotation[7451-7460]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7465-7471]:Modifier[7465-7471]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7472-7476]:PrimitiveType[7472-7476]"
    }, {
      "left" : "finish",
      "right" : "finish",
      "info" : "SimpleName[7477-7483]:SimpleName[7477-7483]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[7493-7504]:SimpleType[7493-7504]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7505-7852]:Block[7505-7852]"
    }, {
      "left" : "if (finished)",
      "right" : "if (finished)",
      "info" : "IfStatement[7515-7617]:IfStatement[7515-7617]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7529-7617]:Block[7529-7617]"
    }, {
      "left" : "throw new IOException(\"This archive has already been finished\");",
      "right" : "throw new IOException(\"This archive has already been finished\");",
      "info" : "ThrowStatement[7543-7607]:ThrowStatement[7543-7607]"
    }, {
      "left" : "if (haveUnclosedEntry)",
      "right" : "if (haveUnclosedEntry)",
      "info" : "IfStatement[7627-7740]:IfStatement[7627-7740]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7650-7740]:Block[7650-7740]"
    }, {
      "left" : "throw new IOException(\"This archives contains unclosed entries.\");",
      "right" : "throw new IOException(\"This archives contains unclosed entries.\");",
      "info" : "ThrowStatement[7664-7730]:ThrowStatement[7664-7730]"
    }, {
      "left" : "writeEOFRecord();",
      "right" : "writeEOFRecord();",
      "info" : "ExpressionStatement[7749-7766]:ExpressionStatement[7749-7766]"
    }, {
      "left" : "writeEOFRecord();",
      "right" : "writeEOFRecord();",
      "info" : "ExpressionStatement[7775-7792]:ExpressionStatement[7775-7792]"
    }, {
      "left" : "buffer.flushBlock();",
      "right" : "buffer.flushBlock();",
      "info" : "ExpressionStatement[7801-7821]:ExpressionStatement[7801-7821]"
    }, {
      "left" : "finished = true;",
      "right" : "finished = true;",
      "info" : "ExpressionStatement[7830-7846]:ExpressionStatement[7830-7846]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[7953-7962]:MarkerAnnotation[7953-7962]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7967-7973]:Modifier[7967-7973]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7974-7978]:PrimitiveType[7974-7978]"
    }, {
      "left" : "close",
      "right" : "close",
      "info" : "SimpleName[7979-7984]:SimpleName[7979-7984]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[7994-8005]:SimpleType[7994-8005]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8006-8183]:Block[8006-8183]"
    }, {
      "left" : "if(!finished)",
      "right" : "if(!finished)",
      "info" : "IfStatement[8016-8063]:IfStatement[8016-8063]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8030-8063]:Block[8030-8063]"
    }, {
      "left" : "finish();",
      "right" : "finish();",
      "info" : "ExpressionStatement[8044-8053]:ExpressionStatement[8044-8053]"
    }, {
      "left" : "if (!closed)",
      "right" : "if (!closed)",
      "info" : "IfStatement[8073-8177]:IfStatement[8073-8177]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8086-8177]:Block[8086-8177]"
    }, {
      "left" : "buffer.close();",
      "right" : "buffer.close();",
      "info" : "ExpressionStatement[8100-8115]:ExpressionStatement[8100-8115]"
    }, {
      "left" : "out.close();",
      "right" : "out.close();",
      "info" : "ExpressionStatement[8128-8140]:ExpressionStatement[8128-8140]"
    }, {
      "left" : "closed = true;",
      "right" : "closed = true;",
      "info" : "ExpressionStatement[8153-8167]:ExpressionStatement[8153-8167]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8320-8326]:Modifier[8320-8326]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[8327-8330]:PrimitiveType[8327-8330]"
    }, {
      "left" : "getRecordSize",
      "right" : "getRecordSize",
      "info" : "SimpleName[8331-8344]:SimpleName[8331-8344]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8347-8393]:Block[8347-8393]"
    }, {
      "left" : "return buffer.getRecordSize();",
      "right" : "return buffer.getRecordSize();",
      "info" : "ReturnStatement[8357-8387]:ReturnStatement[8357-8387]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[9059-9068]:MarkerAnnotation[9059-9068]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9073-9079]:Modifier[9073-9079]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[9080-9084]:PrimitiveType[9080-9084]"
    }, {
      "left" : "putArchiveEntry",
      "right" : "putArchiveEntry",
      "info" : "SimpleName[9085-9100]:SimpleName[9085-9100]"
    }, {
      "left" : "ArchiveEntry archiveEntry",
      "right" : "ArchiveEntry archiveEntry",
      "info" : "SingleVariableDeclaration[9101-9126]:SingleVariableDeclaration[9101-9126]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[9135-9146]:SimpleType[9135-9146]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9147-11856]:Block[9147-11856]"
    }, {
      "left" : "if(finished)",
      "right" : "if(finished)",
      "info" : "IfStatement[9157-9252]:IfStatement[9157-9252]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9170-9252]:Block[9170-9252]"
    }, {
      "left" : "throw new IOException(\"Stream has already been finished\");",
      "right" : "throw new IOException(\"Stream has already been finished\");",
      "info" : "ThrowStatement[9184-9242]:ThrowStatement[9184-9242]"
    }, {
      "left" : "TarArchiveEntry entry = (TarArchiveEntry) archiveEntry;",
      "right" : "TarArchiveEntry entry = (TarArchiveEntry) archiveEntry;",
      "info" : "VariableDeclarationStatement[9261-9316]:VariableDeclarationStatement[9261-9316]"
    }, {
      "left" : "Map<String, String> paxHeaders = new HashMap<String, String>();",
      "right" : "Map<String, String> paxHeaders = new HashMap<String, String>();",
      "info" : "VariableDeclarationStatement[9325-9388]:VariableDeclarationStatement[9325-9388]"
    }, {
      "left" : "final String entryName = entry.getName();",
      "right" : "final String entryName = entry.getName();",
      "info" : "VariableDeclarationStatement[9397-9438]:VariableDeclarationStatement[9397-9438]"
    }, {
      "left" : "final ByteBuffer encodedName = encoding.encode(entryName);",
      "right" : "final ByteBuffer encodedName = encoding.encode(entryName);",
      "info" : "VariableDeclarationStatement[9447-9505]:VariableDeclarationStatement[9447-9505]"
    }, {
      "left" : "final int nameLen = encodedName.limit() - encodedName.position();",
      "right" : "final int nameLen = encodedName.limit() - encodedName.position();",
      "info" : "VariableDeclarationStatement[9514-9579]:VariableDeclarationStatement[9514-9579]"
    }, {
      "left" : "boolean paxHeaderContainsPath = false;",
      "right" : "boolean paxHeaderContainsPath = false;",
      "info" : "VariableDeclarationStatement[9588-9626]:VariableDeclarationStatement[9588-9626]"
    }, {
      "left" : "if (nameLen >= TarConstants.NAMELEN)",
      "right" : "if (nameLen >= TarConstants.NAMELEN)",
      "info" : "IfStatement[9635-10766]:IfStatement[9635-10766]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9672-10766]:Block[9672-10766]"
    }, {
      "left" : "if (longFileMode == LONGFILE_POSIX)",
      "right" : "if (longFileMode == LONGFILE_POSIX)",
      "info" : "IfStatement[9687-10756]:IfStatement[9687-10756]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9723-9835]:Block[9723-9835]"
    }, {
      "left" : "paxHeaders.put(\"path\", entryName);",
      "right" : "paxHeaders.put(\"path\", entryName);",
      "info" : "ExpressionStatement[9741-9775]:ExpressionStatement[9741-9775]"
    }, {
      "left" : "paxHeaderContainsPath = true;",
      "right" : "paxHeaderContainsPath = true;",
      "info" : "ExpressionStatement[9792-9821]:ExpressionStatement[9792-9821]"
    }, {
      "left" : "if (longFileMode == LONGFILE_GNU)",
      "right" : "if (longFileMode == LONGFILE_GNU)",
      "info" : "IfStatement[9841-10756]:IfStatement[9841-10756]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9875-10481]:Block[9875-10481]"
    }, {
      "left" : "TarArchiveEntry longLinkEntry = new TarArchiveEntry(TarConstants.GNU_LONGLINK,\n                                                                    TarConstants.LF_GNUTYPE_LONGNAME);",
      "right" : "TarArchiveEntry longLinkEntry = new TarArchiveEntry(TarConstants.GNU_LONGLINK,\n                                                                    TarConstants.LF_GNUTYPE_LONGNAME);",
      "info" : "VariableDeclarationStatement[10010-10191]:VariableDeclarationStatement[10010-10191]"
    }, {
      "left" : "longLinkEntry.setSize(nameLen + 1);",
      "right" : "longLinkEntry.setSize(nameLen + 1);",
      "info" : "ExpressionStatement[10209-10244]:ExpressionStatement[10209-10244]"
    }, {
      "left" : "putArchiveEntry(longLinkEntry);",
      "right" : "putArchiveEntry(longLinkEntry);",
      "info" : "ExpressionStatement[10275-10306]:ExpressionStatement[10275-10306]"
    }, {
      "left" : "write(encodedName.array(), encodedName.arrayOffset(), nameLen);",
      "right" : "write(encodedName.array(), encodedName.arrayOffset(), nameLen);",
      "info" : "ExpressionStatement[10323-10386]:ExpressionStatement[10323-10386]"
    }, {
      "left" : "write(0);",
      "right" : "write(0);",
      "info" : "ExpressionStatement[10403-10412]:ExpressionStatement[10403-10412]"
    }, {
      "left" : "closeArchiveEntry();",
      "right" : "closeArchiveEntry();",
      "info" : "ExpressionStatement[10447-10467]:ExpressionStatement[10447-10467]"
    }, {
      "left" : "if (longFileMode != LONGFILE_TRUNCATE)",
      "right" : "if (longFileMode != LONGFILE_TRUNCATE)",
      "info" : "IfStatement[10487-10756]:IfStatement[10487-10756]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10526-10756]:Block[10526-10756]"
    }, {
      "left" : "throw new RuntimeException(\"file name '\" + entryName\n                                           + \"' is too long ( > \"\n                                           + TarConstants.NAMELEN + \" bytes)\");",
      "right" : "throw new RuntimeException(\"file name '\" + entryName\n                                           + \"' is too long ( > \"\n                                           + TarConstants.NAMELEN + \" bytes)\");",
      "info" : "ThrowStatement[10544-10742]:ThrowStatement[10544-10742]"
    }, {
      "left" : "if (bigNumberMode == BIGNUMBER_POSIX)",
      "right" : "if (bigNumberMode == BIGNUMBER_POSIX)",
      "info" : "IfStatement[10776-10976]:IfStatement[10776-10976]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10814-10884]:Block[10814-10884]"
    }, {
      "left" : "addPaxHeadersForBigNumbers(paxHeaders, entry);",
      "right" : "addPaxHeadersForBigNumbers(paxHeaders, entry);",
      "info" : "ExpressionStatement[10828-10874]:ExpressionStatement[10828-10874]"
    }, {
      "left" : "if (bigNumberMode != BIGNUMBER_STAR)",
      "right" : "if (bigNumberMode != BIGNUMBER_STAR)",
      "info" : "IfStatement[10890-10976]:IfStatement[10890-10976]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10927-10976]:Block[10927-10976]"
    }, {
      "left" : "failForBigNumbers(entry);",
      "right" : "failForBigNumbers(entry);",
      "info" : "ExpressionStatement[10941-10966]:ExpressionStatement[10941-10966]"
    }, {
      "left" : "if (addPaxHeadersForNonAsciiNames && !paxHeaderContainsPath\n            && !ASCII.canEncode(entryName))",
      "right" : "if (addPaxHeadersForNonAsciiNames && !paxHeaderContainsPath\n            && !ASCII.canEncode(entryName))",
      "info" : "IfStatement[10986-11148]:IfStatement[10986-11148]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11090-11148]:Block[11090-11148]"
    }, {
      "left" : "paxHeaders.put(\"path\", entryName);",
      "right" : "paxHeaders.put(\"path\", entryName);",
      "info" : "ExpressionStatement[11104-11138]:ExpressionStatement[11104-11138]"
    }, {
      "left" : "if (addPaxHeadersForNonAsciiNames\n            && (entry.isLink() || entry.isSymbolicLink())\n            && !ASCII.canEncode(entry.getLinkName()))",
      "right" : "if (addPaxHeadersForNonAsciiNames\n            && (entry.isLink() || entry.isSymbolicLink())\n            && !ASCII.canEncode(entry.getLinkName()))",
      "info" : "IfStatement[11158-11376]:IfStatement[11158-11376]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11304-11376]:Block[11304-11376]"
    }, {
      "left" : "paxHeaders.put(\"linkpath\", entry.getLinkName());",
      "right" : "paxHeaders.put(\"linkpath\", entry.getLinkName());",
      "info" : "ExpressionStatement[11318-11366]:ExpressionStatement[11318-11366]"
    }, {
      "left" : "if (paxHeaders.size() > 0)",
      "right" : "if (paxHeaders.size() > 0)",
      "info" : "IfStatement[11386-11476]:IfStatement[11386-11476]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11413-11476]:Block[11413-11476]"
    }, {
      "left" : "writePaxHeaders(entryName, paxHeaders);",
      "right" : "writePaxHeaders(entryName, paxHeaders);",
      "info" : "ExpressionStatement[11427-11466]:ExpressionStatement[11427-11466]"
    }, {
      "left" : "entry.writeEntryHeader(recordBuf, encoding,\n                               bigNumberMode == BIGNUMBER_STAR);",
      "right" : "entry.writeEntryHeader(recordBuf, encoding,\n                               bigNumberMode == BIGNUMBER_STAR);",
      "info" : "ExpressionStatement[11486-11594]:ExpressionStatement[11486-11594]"
    }, {
      "left" : "buffer.writeRecord(recordBuf);",
      "right" : "buffer.writeRecord(recordBuf);",
      "info" : "ExpressionStatement[11603-11633]:ExpressionStatement[11603-11633]"
    }, {
      "left" : "currBytes = 0;",
      "right" : "currBytes = 0;",
      "info" : "ExpressionStatement[11643-11657]:ExpressionStatement[11643-11657]"
    }, {
      "left" : "if (entry.isDirectory())",
      "right" : "if (entry.isDirectory())",
      "info" : "IfStatement[11667-11786]:IfStatement[11667-11786]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11692-11729]:Block[11692-11729]"
    }, {
      "left" : "currSize = 0;",
      "right" : "currSize = 0;",
      "info" : "ExpressionStatement[11706-11719]:ExpressionStatement[11706-11719]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11735-11786]:Block[11735-11786]"
    }, {
      "left" : "currSize = entry.getSize();",
      "right" : "currSize = entry.getSize();",
      "info" : "ExpressionStatement[11749-11776]:ExpressionStatement[11749-11776]"
    }, {
      "left" : "currName = entryName;",
      "right" : "currName = entryName;",
      "info" : "ExpressionStatement[11795-11816]:ExpressionStatement[11795-11816]"
    }, {
      "left" : "haveUnclosedEntry = true;",
      "right" : "haveUnclosedEntry = true;",
      "info" : "ExpressionStatement[11825-11850]:ExpressionStatement[11825-11850]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[12315-12324]:MarkerAnnotation[12315-12324]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12329-12335]:Modifier[12329-12335]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[12336-12340]:PrimitiveType[12336-12340]"
    }, {
      "left" : "closeArchiveEntry",
      "right" : "closeArchiveEntry",
      "info" : "SimpleName[12341-12358]:SimpleName[12341-12358]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[12368-12379]:SimpleType[12368-12379]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12380-13202]:Block[12380-13202]"
    }, {
      "left" : "if (finished)",
      "right" : "if (finished)",
      "info" : "IfStatement[12390-12486]:IfStatement[12390-12486]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12404-12486]:Block[12404-12486]"
    }, {
      "left" : "throw new IOException(\"Stream has already been finished\");",
      "right" : "throw new IOException(\"Stream has already been finished\");",
      "info" : "ThrowStatement[12418-12476]:ThrowStatement[12418-12476]"
    }, {
      "left" : "if (!haveUnclosedEntry)",
      "right" : "if (!haveUnclosedEntry)",
      "info" : "IfStatement[12495-12593]:IfStatement[12495-12593]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12518-12593]:Block[12518-12593]"
    }, {
      "left" : "throw new IOException(\"No current entry to close\");",
      "right" : "throw new IOException(\"No current entry to close\");",
      "info" : "ThrowStatement[12532-12583]:ThrowStatement[12532-12583]"
    }, {
      "left" : "if (assemLen > 0)",
      "right" : "if (assemLen > 0)",
      "info" : "IfStatement[12602-12846]:IfStatement[12602-12846]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12620-12846]:Block[12620-12846]"
    }, {
      "left" : "for (int i = assemLen; i < assemBuf.length; ++i)",
      "right" : "for (int i = assemLen; i < assemBuf.length; ++i)",
      "info" : "ForStatement[12634-12731]:ForStatement[12634-12731]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12683-12731]:Block[12683-12731]"
    }, {
      "left" : "assemBuf[i] = 0;",
      "right" : "assemBuf[i] = 0;",
      "info" : "ExpressionStatement[12701-12717]:ExpressionStatement[12701-12717]"
    }, {
      "left" : "buffer.writeRecord(assemBuf);",
      "right" : "buffer.writeRecord(assemBuf);",
      "info" : "ExpressionStatement[12745-12774]:ExpressionStatement[12745-12774]"
    }, {
      "left" : "currBytes += assemLen;",
      "right" : "currBytes += assemLen;",
      "info" : "ExpressionStatement[12788-12810]:ExpressionStatement[12788-12810]"
    }, {
      "left" : "assemLen = 0;",
      "right" : "assemLen = 0;",
      "info" : "ExpressionStatement[12823-12836]:ExpressionStatement[12823-12836]"
    }, {
      "left" : "if (currBytes < currSize)",
      "right" : "if (currBytes < currSize)",
      "info" : "IfStatement[12856-13161]:IfStatement[12856-13161]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12882-13161]:Block[12882-13161]"
    }, {
      "left" : "throw new IOException(\"entry '\" + currName + \"' closed at '\"\n                                  + currBytes\n                                  + \"' before the '\" + currSize\n                                  + \"' bytes specified in the header were written\");",
      "right" : "throw new IOException(\"entry '\" + currName + \"' closed at '\"\n                                  + currBytes\n                                  + \"' before the '\" + currSize\n                                  + \"' bytes specified in the header were written\");",
      "info" : "ThrowStatement[12896-13151]:ThrowStatement[12896-13151]"
    }, {
      "left" : "haveUnclosedEntry = false;",
      "right" : "haveUnclosedEntry = false;",
      "info" : "ExpressionStatement[13170-13196]:ExpressionStatement[13170-13196]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[13896-13905]:MarkerAnnotation[13896-13905]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[13910-13916]:Modifier[13910-13916]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[13917-13921]:PrimitiveType[13917-13921]"
    }, {
      "left" : "write",
      "right" : "write",
      "info" : "SimpleName[13922-13927]:SimpleName[13922-13927]"
    }, {
      "left" : "byte[] wBuf",
      "right" : "byte[] wBuf",
      "info" : "SingleVariableDeclaration[13928-13939]:SingleVariableDeclaration[13928-13939]"
    }, {
      "left" : "int wOffset",
      "right" : "int wOffset",
      "info" : "SingleVariableDeclaration[13941-13952]:SingleVariableDeclaration[13941-13952]"
    }, {
      "left" : "int numToWrite",
      "right" : "int numToWrite",
      "info" : "SingleVariableDeclaration[13954-13968]:SingleVariableDeclaration[13954-13968]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[13977-13988]:SimpleType[13977-13988]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13989-16127]:Block[13989-16127]"
    }, {
      "left" : "if ((currBytes + numToWrite) > currSize)",
      "right" : "if ((currBytes + numToWrite) > currSize)",
      "info" : "IfStatement[13999-14673]:IfStatement[13999-14673]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14040-14673]:Block[14040-14673]"
    }, {
      "left" : "throw new IOException(\"request to write '\" + numToWrite\n                                  + \"' bytes exceeds size in header of '\"\n                                  + currSize + \"' bytes for entry '\"\n                                  + currName + \"'\");",
      "right" : "throw new IOException(\"request to write '\" + numToWrite\n                                  + \"' bytes exceeds size in header of '\"\n                                  + currSize + \"' bytes for entry '\"\n                                  + currName + \"'\");",
      "info" : "ThrowStatement[14054-14305]:ThrowStatement[14054-14305]"
    }, {
      "left" : "if (assemLen > 0)",
      "right" : "if (assemLen > 0)",
      "info" : "IfStatement[14683-15500]:IfStatement[14683-15500]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14701-15500]:Block[14701-15500]"
    }, {
      "left" : "if ((assemLen + numToWrite) >= recordBuf.length)",
      "right" : "if ((assemLen + numToWrite) >= recordBuf.length)",
      "info" : "IfStatement[14715-15490]:IfStatement[14715-15490]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14764-15243]:Block[14764-15243]"
    }, {
      "left" : "int aLen = recordBuf.length - assemLen;",
      "right" : "int aLen = recordBuf.length - assemLen;",
      "info" : "VariableDeclarationStatement[14782-14821]:VariableDeclarationStatement[14782-14821]"
    }, {
      "left" : "System.arraycopy(assemBuf, 0, recordBuf, 0,\n                                 assemLen);",
      "right" : "System.arraycopy(assemBuf, 0, recordBuf, 0,\n                                 assemLen);",
      "info" : "ExpressionStatement[14839-14926]:ExpressionStatement[14839-14926]"
    }, {
      "left" : "System.arraycopy(wBuf, wOffset, recordBuf,\n                                 assemLen, aLen);",
      "right" : "System.arraycopy(wBuf, wOffset, recordBuf,\n                                 assemLen, aLen);",
      "info" : "ExpressionStatement[14943-15035]:ExpressionStatement[14943-15035]"
    }, {
      "left" : "buffer.writeRecord(recordBuf);",
      "right" : "buffer.writeRecord(recordBuf);",
      "info" : "ExpressionStatement[15052-15082]:ExpressionStatement[15052-15082]"
    }, {
      "left" : "currBytes += recordBuf.length;",
      "right" : "currBytes += recordBuf.length;",
      "info" : "ExpressionStatement[15100-15130]:ExpressionStatement[15100-15130]"
    }, {
      "left" : "wOffset += aLen;",
      "right" : "wOffset += aLen;",
      "info" : "ExpressionStatement[15147-15163]:ExpressionStatement[15147-15163]"
    }, {
      "left" : "numToWrite -= aLen;",
      "right" : "numToWrite -= aLen;",
      "info" : "ExpressionStatement[15180-15199]:ExpressionStatement[15180-15199]"
    }, {
      "left" : "assemLen = 0;",
      "right" : "assemLen = 0;",
      "info" : "ExpressionStatement[15216-15229]:ExpressionStatement[15216-15229]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15249-15490]:Block[15249-15490]"
    }, {
      "left" : "System.arraycopy(wBuf, wOffset, assemBuf, assemLen,\n                                 numToWrite);",
      "right" : "System.arraycopy(wBuf, wOffset, assemBuf, assemLen,\n                                 numToWrite);",
      "info" : "ExpressionStatement[15267-15364]:ExpressionStatement[15267-15364]"
    }, {
      "left" : "wOffset += numToWrite;",
      "right" : "wOffset += numToWrite;",
      "info" : "ExpressionStatement[15382-15404]:ExpressionStatement[15382-15404]"
    }, {
      "left" : "assemLen += numToWrite;",
      "right" : "assemLen += numToWrite;",
      "info" : "ExpressionStatement[15421-15444]:ExpressionStatement[15421-15444]"
    }, {
      "left" : "numToWrite = 0;",
      "right" : "numToWrite = 0;",
      "info" : "ExpressionStatement[15461-15476]:ExpressionStatement[15461-15476]"
    }, {
      "left" : "while (numToWrite > 0)",
      "right" : "while (numToWrite > 0)",
      "info" : "WhileStatement[15666-16121]:WhileStatement[15666-16121]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15689-16121]:Block[15689-16121]"
    }, {
      "left" : "if (numToWrite < recordBuf.length)",
      "right" : "if (numToWrite < recordBuf.length)",
      "info" : "IfStatement[15703-15932]:IfStatement[15703-15932]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15738-15932]:Block[15738-15932]"
    }, {
      "left" : "System.arraycopy(wBuf, wOffset, assemBuf, assemLen,\n                                 numToWrite);",
      "right" : "System.arraycopy(wBuf, wOffset, assemBuf, assemLen,\n                                 numToWrite);",
      "info" : "ExpressionStatement[15756-15853]:ExpressionStatement[15756-15853]"
    }, {
      "left" : "assemLen += numToWrite;",
      "right" : "assemLen += numToWrite;",
      "info" : "ExpressionStatement[15871-15894]:ExpressionStatement[15871-15894]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[15912-15918]:BreakStatement[15912-15918]"
    }, {
      "left" : "buffer.writeRecord(wBuf, wOffset);",
      "right" : "buffer.writeRecord(wBuf, wOffset);",
      "info" : "ExpressionStatement[15946-15980]:ExpressionStatement[15946-15980]"
    }, {
      "left" : "int num = recordBuf.length;",
      "right" : "int num = recordBuf.length;",
      "info" : "VariableDeclarationStatement[15994-16021]:VariableDeclarationStatement[15994-16021]"
    }, {
      "left" : "currBytes += num;",
      "right" : "currBytes += num;",
      "info" : "ExpressionStatement[16035-16052]:ExpressionStatement[16035-16052]"
    }, {
      "left" : "numToWrite -= num;",
      "right" : "numToWrite -= num;",
      "info" : "ExpressionStatement[16065-16083]:ExpressionStatement[16065-16083]"
    }, {
      "left" : "wOffset += num;",
      "right" : "wOffset += num;",
      "info" : "ExpressionStatement[16096-16111]:ExpressionStatement[16096-16111]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[18034-18041]:Modifier[18138-18145]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[18042-18048]:SimpleType[18146-18152]"
    }, {
      "left" : "stripTo7Bits",
      "right" : "stripTo7Bits",
      "info" : "SimpleName[18049-18061]:SimpleName[18153-18165]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[18062-18073]:SingleVariableDeclaration[18166-18177]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18075-18449]:Block[18179-18553]"
    }, {
      "left" : "final int length = name.length();",
      "right" : "final int length = name.length();",
      "info" : "VariableDeclarationStatement[18085-18118]:VariableDeclarationStatement[18189-18222]"
    }, {
      "left" : "StringBuffer result = new StringBuffer(length);",
      "right" : "StringBuffer result = new StringBuffer(length);",
      "info" : "VariableDeclarationStatement[18127-18174]:VariableDeclarationStatement[18231-18278]"
    }, {
      "left" : "for (int i = 0; i < length; i++)",
      "right" : "for (int i = 0; i < length; i++)",
      "info" : "ForStatement[18183-18409]:ForStatement[18287-18513]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18216-18409]:Block[18320-18513]"
    }, {
      "left" : "char stripped = (char) (name.charAt(i) & 0x7F);",
      "right" : "char stripped = (char) (name.charAt(i) & 0x7F);",
      "info" : "VariableDeclarationStatement[18230-18277]:VariableDeclarationStatement[18334-18381]"
    }, {
      "left" : "if (stripped != 0)",
      "right" : "if (stripped != 0)",
      "info" : "IfStatement[18290-18399]:IfStatement[18394-18503]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18309-18399]:Block[18413-18503]"
    }, {
      "left" : "result.append(stripped);",
      "right" : "result.append(stripped);",
      "info" : "ExpressionStatement[18361-18385]:ExpressionStatement[18465-18489]"
    }, {
      "left" : "return result.toString();",
      "right" : "return result.toString();",
      "info" : "ReturnStatement[18418-18443]:ReturnStatement[18522-18547]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[18591-18598]:Modifier[18695-18702]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[18599-18603]:PrimitiveType[18703-18707]"
    }, {
      "left" : "writeEOFRecord",
      "right" : "writeEOFRecord",
      "info" : "SimpleName[18604-18618]:SimpleName[18708-18722]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[18628-18639]:SimpleType[18732-18743]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18640-18780]:Block[18744-18884]"
    }, {
      "left" : "for (int i = 0; i < recordBuf.length; ++i)",
      "right" : "for (int i = 0; i < recordBuf.length; ++i)",
      "info" : "ForStatement[18650-18734]:ForStatement[18754-18838]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18693-18734]:Block[18797-18838]"
    }, {
      "left" : "recordBuf[i] = 0;",
      "right" : "recordBuf[i] = 0;",
      "info" : "ExpressionStatement[18707-18724]:ExpressionStatement[18811-18828]"
    }, {
      "left" : "buffer.writeRecord(recordBuf);",
      "right" : "buffer.writeRecord(recordBuf);",
      "info" : "ExpressionStatement[18744-18774]:ExpressionStatement[18848-18878]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[18786-18795]:MarkerAnnotation[18890-18899]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[18800-18806]:Modifier[18904-18910]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[18807-18811]:PrimitiveType[18911-18915]"
    }, {
      "left" : "flush",
      "right" : "flush",
      "info" : "SimpleName[18812-18817]:SimpleName[18916-18921]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[18827-18838]:SimpleType[18931-18942]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18839-18867]:Block[18943-18971]"
    }, {
      "left" : "out.flush();",
      "right" : "out.flush();",
      "info" : "ExpressionStatement[18849-18861]:ExpressionStatement[18953-18965]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[18898-18907]:MarkerAnnotation[19002-19011]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[18912-18918]:Modifier[19016-19022]"
    }, {
      "left" : "ArchiveEntry",
      "right" : "ArchiveEntry",
      "info" : "SimpleType[18919-18931]:SimpleType[19023-19035]"
    }, {
      "left" : "createArchiveEntry",
      "right" : "createArchiveEntry",
      "info" : "SimpleName[18932-18950]:SimpleName[19036-19054]"
    }, {
      "left" : "File inputFile",
      "right" : "File inputFile",
      "info" : "SingleVariableDeclaration[18951-18965]:SingleVariableDeclaration[19055-19069]"
    }, {
      "left" : "String entryName",
      "right" : "String entryName",
      "info" : "SingleVariableDeclaration[18967-18983]:SingleVariableDeclaration[19071-19087]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[19004-19015]:SimpleType[19108-19119]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19016-19185]:Block[19120-19289]"
    }, {
      "left" : "if(finished)",
      "right" : "if(finished)",
      "info" : "IfStatement[19026-19121]:IfStatement[19130-19225]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19039-19121]:Block[19143-19225]"
    }, {
      "left" : "throw new IOException(\"Stream has already been finished\");",
      "right" : "throw new IOException(\"Stream has already been finished\");",
      "info" : "ThrowStatement[19053-19111]:ThrowStatement[19157-19215]"
    }, {
      "left" : "return new TarArchiveEntry(inputFile, entryName);",
      "right" : "return new TarArchiveEntry(inputFile, entryName);",
      "info" : "ReturnStatement[19130-19179]:ReturnStatement[19234-19283]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[19191-19198]:Modifier[19295-19302]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[19199-19203]:PrimitiveType[19303-19307]"
    }, {
      "left" : "addPaxHeadersForBigNumbers",
      "right" : "addPaxHeadersForBigNumbers",
      "info" : "SimpleName[19204-19230]:SimpleName[19308-19334]"
    }, {
      "left" : "Map<String, String> paxHeaders",
      "right" : "Map<String, String> paxHeaders",
      "info" : "SingleVariableDeclaration[19231-19261]:SingleVariableDeclaration[19335-19365]"
    }, {
      "left" : "TarArchiveEntry entry",
      "right" : "TarArchiveEntry entry",
      "info" : "SingleVariableDeclaration[19307-19328]:SingleVariableDeclaration[19411-19432]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19330-20341]:Block[19434-20445]"
    }, {
      "left" : "addPaxHeaderForBigNumber(paxHeaders, \"size\", entry.getSize(),\n                                 TarConstants.MAXSIZE);",
      "right" : "addPaxHeaderForBigNumber(paxHeaders, \"size\", entry.getSize(),\n                                 TarConstants.MAXSIZE);",
      "info" : "ExpressionStatement[19340-19457]:ExpressionStatement[19444-19561]"
    }, {
      "left" : "addPaxHeaderForBigNumber(paxHeaders, \"gid\", entry.getGroupId(),\n                                 TarConstants.MAXID);",
      "right" : "addPaxHeaderForBigNumber(paxHeaders, \"gid\", entry.getGroupId(),\n                                 TarConstants.MAXID);",
      "info" : "ExpressionStatement[19466-19583]:ExpressionStatement[19570-19687]"
    }, {
      "left" : "addPaxHeaderForBigNumber(paxHeaders, \"mtime\",\n                                 entry.getModTime().getTime() / 1000,\n                                 TarConstants.MAXSIZE);",
      "right" : "addPaxHeaderForBigNumber(paxHeaders, \"mtime\",\n                                 entry.getModTime().getTime() / 1000,\n                                 TarConstants.MAXSIZE);",
      "info" : "ExpressionStatement[19592-19763]:ExpressionStatement[19696-19867]"
    }, {
      "left" : "addPaxHeaderForBigNumber(paxHeaders, \"uid\", entry.getUserId(),\n                                 TarConstants.MAXID);",
      "right" : "addPaxHeaderForBigNumber(paxHeaders, \"uid\", entry.getUserId(),\n                                 TarConstants.MAXID);",
      "info" : "ExpressionStatement[19772-19888]:ExpressionStatement[19876-19992]"
    }, {
      "left" : "addPaxHeaderForBigNumber(paxHeaders, \"SCHILY.devmajor\",\n                                 entry.getDevMajor(), TarConstants.MAXID);",
      "right" : "addPaxHeaderForBigNumber(paxHeaders, \"SCHILY.devmajor\",\n                                 entry.getDevMajor(), TarConstants.MAXID);",
      "info" : "ExpressionStatement[19947-20077]:ExpressionStatement[20051-20181]"
    }, {
      "left" : "addPaxHeaderForBigNumber(paxHeaders, \"SCHILY.devminor\",\n                                 entry.getDevMinor(), TarConstants.MAXID);",
      "right" : "addPaxHeaderForBigNumber(paxHeaders, \"SCHILY.devminor\",\n                                 entry.getDevMinor(), TarConstants.MAXID);",
      "info" : "ExpressionStatement[20086-20216]:ExpressionStatement[20190-20320]"
    }, {
      "left" : "failForBigNumber(\"mode\", entry.getMode(), TarConstants.MAXID);",
      "right" : "failForBigNumber(\"mode\", entry.getMode(), TarConstants.MAXID);",
      "info" : "ExpressionStatement[20273-20335]:ExpressionStatement[20377-20439]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[20347-20354]:Modifier[20451-20458]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[20355-20359]:PrimitiveType[20459-20463]"
    }, {
      "left" : "addPaxHeaderForBigNumber",
      "right" : "addPaxHeaderForBigNumber",
      "info" : "SimpleName[20360-20384]:SimpleName[20464-20488]"
    }, {
      "left" : "Map<String, String> paxHeaders",
      "right" : "Map<String, String> paxHeaders",
      "info" : "SingleVariableDeclaration[20385-20415]:SingleVariableDeclaration[20489-20519]"
    }, {
      "left" : "String header",
      "right" : "String header",
      "info" : "SingleVariableDeclaration[20459-20472]:SingleVariableDeclaration[20563-20576]"
    }, {
      "left" : "long value",
      "right" : "long value",
      "info" : "SingleVariableDeclaration[20474-20484]:SingleVariableDeclaration[20578-20588]"
    }, {
      "left" : "long maxValue",
      "right" : "long maxValue",
      "info" : "SingleVariableDeclaration[20528-20541]:SingleVariableDeclaration[20632-20645]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20543-20664]:Block[20647-20768]"
    }, {
      "left" : "if (value < 0 || value > maxValue)",
      "right" : "if (value < 0 || value > maxValue)",
      "info" : "IfStatement[20553-20658]:IfStatement[20657-20762]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20588-20658]:Block[20692-20762]"
    }, {
      "left" : "paxHeaders.put(header, String.valueOf(value));",
      "right" : "paxHeaders.put(header, String.valueOf(value));",
      "info" : "ExpressionStatement[20602-20648]:ExpressionStatement[20706-20752]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[20670-20677]:Modifier[20774-20781]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[20678-20682]:PrimitiveType[20782-20786]"
    }, {
      "left" : "failForBigNumbers",
      "right" : "failForBigNumbers",
      "info" : "SimpleName[20683-20700]:SimpleName[20787-20804]"
    }, {
      "left" : "TarArchiveEntry entry",
      "right" : "TarArchiveEntry entry",
      "info" : "SingleVariableDeclaration[20701-20722]:SingleVariableDeclaration[20805-20826]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20724-21426]:Block[20828-21530]"
    }, {
      "left" : "failForBigNumber(\"entry size\", entry.getSize(), TarConstants.MAXSIZE);",
      "right" : "failForBigNumber(\"entry size\", entry.getSize(), TarConstants.MAXSIZE);",
      "info" : "ExpressionStatement[20734-20804]:ExpressionStatement[20838-20908]"
    }, {
      "left" : "failForBigNumber(\"group id\", entry.getGroupId(), TarConstants.MAXID);",
      "right" : "failForBigNumber(\"group id\", entry.getGroupId(), TarConstants.MAXID);",
      "info" : "ExpressionStatement[20813-20882]:ExpressionStatement[20917-20986]"
    }, {
      "left" : "failForBigNumber(\"last modification time\",\n                         entry.getModTime().getTime() / 1000,\n                         TarConstants.MAXSIZE);",
      "right" : "failForBigNumber(\"last modification time\",\n                         entry.getModTime().getTime() / 1000,\n                         TarConstants.MAXSIZE);",
      "info" : "ExpressionStatement[20891-21043]:ExpressionStatement[20995-21147]"
    }, {
      "left" : "failForBigNumber(\"user id\", entry.getUserId(), TarConstants.MAXID);",
      "right" : "failForBigNumber(\"user id\", entry.getUserId(), TarConstants.MAXID);",
      "info" : "ExpressionStatement[21052-21119]:ExpressionStatement[21156-21223]"
    }, {
      "left" : "failForBigNumber(\"mode\", entry.getMode(), TarConstants.MAXID);",
      "right" : "failForBigNumber(\"mode\", entry.getMode(), TarConstants.MAXID);",
      "info" : "ExpressionStatement[21128-21190]:ExpressionStatement[21232-21294]"
    }, {
      "left" : "failForBigNumber(\"major device number\", entry.getDevMajor(),\n                         TarConstants.MAXID);",
      "right" : "failForBigNumber(\"major device number\", entry.getDevMajor(),\n                         TarConstants.MAXID);",
      "info" : "ExpressionStatement[21199-21305]:ExpressionStatement[21303-21409]"
    }, {
      "left" : "failForBigNumber(\"minor device number\", entry.getDevMinor(),\n                         TarConstants.MAXID);",
      "right" : "failForBigNumber(\"minor device number\", entry.getDevMinor(),\n                         TarConstants.MAXID);",
      "info" : "ExpressionStatement[21314-21420]:ExpressionStatement[21418-21524]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[21432-21439]:Modifier[21536-21543]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[21440-21444]:PrimitiveType[21544-21548]"
    }, {
      "left" : "failForBigNumber",
      "right" : "failForBigNumber",
      "info" : "SimpleName[21445-21461]:SimpleName[21549-21565]"
    }, {
      "left" : "String field",
      "right" : "String field",
      "info" : "SingleVariableDeclaration[21462-21474]:SingleVariableDeclaration[21566-21578]"
    }, {
      "left" : "long value",
      "right" : "long value",
      "info" : "SingleVariableDeclaration[21476-21486]:SingleVariableDeclaration[21580-21590]"
    }, {
      "left" : "long maxValue",
      "right" : "long maxValue",
      "info" : "SingleVariableDeclaration[21488-21501]:SingleVariableDeclaration[21592-21605]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21503-21745]:Block[21607-21849]"
    }, {
      "left" : "if (value < 0 || value > maxValue)",
      "right" : "if (value < 0 || value > maxValue)",
      "info" : "IfStatement[21513-21739]:IfStatement[21617-21843]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21548-21739]:Block[21652-21843]"
    }, {
      "left" : "throw new RuntimeException(field + \" '\" + value\n                                       + \"' is too big ( > \"\n                                       + maxValue + \" )\");",
      "right" : "throw new RuntimeException(field + \" '\" + value\n                                       + \"' is too big ( > \"\n                                       + maxValue + \" )\");",
      "info" : "ThrowStatement[21562-21729]:ThrowStatement[21666-21833]"
    } ]
  },
  "interFileMappings" : { }
}