{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "NumberUtils",
      "right" : "NumberUtils",
      "info" : "TypeDeclaration[950-47354]:TypeDeclaration[950-47689]"
    }, {
      "left" : "public static final Long LONG_ZERO = new Long(0L);",
      "right" : "public static final Long LONG_ZERO = new Long(0L);",
      "info" : "FieldDeclaration[1486-1580]:FieldDeclaration[1486-1580]"
    }, {
      "left" : "public static final Long LONG_ONE = new Long(1L);",
      "right" : "public static final Long LONG_ONE = new Long(1L);",
      "info" : "FieldDeclaration[1585-1677]:FieldDeclaration[1585-1677]"
    }, {
      "left" : "public static final Long LONG_MINUS_ONE = new Long(-1L);",
      "right" : "public static final Long LONG_MINUS_ONE = new Long(-1L);",
      "info" : "FieldDeclaration[1682-1787]:FieldDeclaration[1682-1787]"
    }, {
      "left" : "public static final Integer INTEGER_ZERO = new Integer(0);",
      "right" : "public static final Integer INTEGER_ZERO = new Integer(0);",
      "info" : "FieldDeclaration[1792-1897]:FieldDeclaration[1792-1897]"
    }, {
      "left" : "public static final Integer INTEGER_ONE = new Integer(1);",
      "right" : "public static final Integer INTEGER_ONE = new Integer(1);",
      "info" : "FieldDeclaration[1902-2005]:FieldDeclaration[1902-2005]"
    }, {
      "left" : "public static final Integer INTEGER_MINUS_ONE = new Integer(-1);",
      "right" : "public static final Integer INTEGER_MINUS_ONE = new Integer(-1);",
      "info" : "FieldDeclaration[2010-2126]:FieldDeclaration[2010-2126]"
    }, {
      "left" : "public static final Short SHORT_ZERO = new Short((short) 0);",
      "right" : "public static final Short SHORT_ZERO = new Short((short) 0);",
      "info" : "FieldDeclaration[2131-2236]:FieldDeclaration[2131-2236]"
    }, {
      "left" : "public static final Short SHORT_ONE = new Short((short) 1);",
      "right" : "public static final Short SHORT_ONE = new Short((short) 1);",
      "info" : "FieldDeclaration[2241-2344]:FieldDeclaration[2241-2344]"
    }, {
      "left" : "public static final Short SHORT_MINUS_ONE = new Short((short) -1);",
      "right" : "public static final Short SHORT_MINUS_ONE = new Short((short) -1);",
      "info" : "FieldDeclaration[2349-2465]:FieldDeclaration[2349-2465]"
    }, {
      "left" : "public static final Byte BYTE_ZERO = Byte.valueOf((byte) 0);",
      "right" : "public static final Byte BYTE_ZERO = Byte.valueOf((byte) 0);",
      "info" : "FieldDeclaration[2470-2574]:FieldDeclaration[2470-2574]"
    }, {
      "left" : "public static final Byte BYTE_ONE = Byte.valueOf((byte) 1);",
      "right" : "public static final Byte BYTE_ONE = Byte.valueOf((byte) 1);",
      "info" : "FieldDeclaration[2579-2681]:FieldDeclaration[2579-2681]"
    }, {
      "left" : "public static final Byte BYTE_MINUS_ONE = Byte.valueOf((byte) -1);",
      "right" : "public static final Byte BYTE_MINUS_ONE = Byte.valueOf((byte) -1);",
      "info" : "FieldDeclaration[2686-2801]:FieldDeclaration[2686-2801]"
    }, {
      "left" : "public static final Double DOUBLE_ZERO = new Double(0.0d);",
      "right" : "public static final Double DOUBLE_ZERO = new Double(0.0d);",
      "info" : "FieldDeclaration[2806-2910]:FieldDeclaration[2806-2910]"
    }, {
      "left" : "public static final Double DOUBLE_ONE = new Double(1.0d);",
      "right" : "public static final Double DOUBLE_ONE = new Double(1.0d);",
      "info" : "FieldDeclaration[2915-3017]:FieldDeclaration[2915-3017]"
    }, {
      "left" : "public static final Double DOUBLE_MINUS_ONE = new Double(-1.0d);",
      "right" : "public static final Double DOUBLE_MINUS_ONE = new Double(-1.0d);",
      "info" : "FieldDeclaration[3022-3137]:FieldDeclaration[3022-3137]"
    }, {
      "left" : "public static final Float FLOAT_ZERO = new Float(0.0f);",
      "right" : "public static final Float FLOAT_ZERO = new Float(0.0f);",
      "info" : "FieldDeclaration[3142-3242]:FieldDeclaration[3142-3242]"
    }, {
      "left" : "public static final Float FLOAT_ONE = new Float(1.0f);",
      "right" : "public static final Float FLOAT_ONE = new Float(1.0f);",
      "info" : "FieldDeclaration[3247-3345]:FieldDeclaration[3247-3345]"
    }, {
      "left" : "public static final Float FLOAT_MINUS_ONE = new Float(-1.0f);",
      "right" : "public static final Float FLOAT_MINUS_ONE = new Float(-1.0f);",
      "info" : "FieldDeclaration[3350-3461]:FieldDeclaration[3350-3461]"
    }, {
      "left" : "public NumberUtils()",
      "right" : "public NumberUtils()",
      "info" : "MethodDeclaration[3467-3826]:MethodDeclaration[3467-3826]"
    }, {
      "left" : "public static int toInt(String str)",
      "right" : "public static int toInt(String str)",
      "info" : "MethodDeclaration[3910-4538]:MethodDeclaration[3910-4538]"
    }, {
      "left" : "public static int toInt(String str, int defaultValue)",
      "right" : "public static int toInt(String str, int defaultValue)",
      "info" : "MethodDeclaration[4544-5413]:MethodDeclaration[4544-5413]"
    }, {
      "left" : "public static long toLong(String str)",
      "right" : "public static long toLong(String str)",
      "info" : "MethodDeclaration[5419-6055]:MethodDeclaration[5419-6055]"
    }, {
      "left" : "public static long toLong(String str, long defaultValue)",
      "right" : "public static long toLong(String str, long defaultValue)",
      "info" : "MethodDeclaration[6061-6942]:MethodDeclaration[6061-6942]"
    }, {
      "left" : "public static float toFloat(String str)",
      "right" : "public static float toFloat(String str)",
      "info" : "MethodDeclaration[6948-7645]:MethodDeclaration[6948-7645]"
    }, {
      "left" : "public static float toFloat(String str, float defaultValue)",
      "right" : "public static float toFloat(String str, float defaultValue)",
      "info" : "MethodDeclaration[7651-8593]:MethodDeclaration[7651-8593]"
    }, {
      "left" : "public static double toDouble(String str)",
      "right" : "public static double toDouble(String str)",
      "info" : "MethodDeclaration[8599-9304]:MethodDeclaration[8599-9304]"
    }, {
      "left" : "public static double toDouble(String str, double defaultValue)",
      "right" : "public static double toDouble(String str, double defaultValue)",
      "info" : "MethodDeclaration[9310-10257]:MethodDeclaration[9310-10257]"
    }, {
      "left" : "public static byte toByte(String str)",
      "right" : "public static byte toByte(String str)",
      "info" : "MethodDeclaration[10343-10967]:MethodDeclaration[10343-10967]"
    }, {
      "left" : "public static byte toByte(String str, byte defaultValue)",
      "right" : "public static byte toByte(String str, byte defaultValue)",
      "info" : "MethodDeclaration[10973-11829]:MethodDeclaration[10973-11829]"
    }, {
      "left" : "public static short toShort(String str)",
      "right" : "public static short toShort(String str)",
      "info" : "MethodDeclaration[11835-12468]:MethodDeclaration[11835-12468]"
    }, {
      "left" : "public static short toShort(String str, short defaultValue)",
      "right" : "public static short toShort(String str, short defaultValue)",
      "info" : "MethodDeclaration[12474-13341]:MethodDeclaration[12474-13341]"
    }, {
      "left" : "public static Number createNumber(String str) throws NumberFormatException",
      "right" : "public static Number createNumber(String str) throws NumberFormatException",
      "info" : "MethodDeclaration[14586-21607]:MethodDeclaration[14586-21626]"
    }, {
      "left" : "private static boolean isAllZeros(String str)",
      "right" : "private static boolean isAllZeros(String str)",
      "info" : "MethodDeclaration[21613-22175]:MethodDeclaration[21632-22194]"
    }, {
      "left" : "public static Float createFloat(String str)",
      "right" : "public static Float createFloat(String str)",
      "info" : "MethodDeclaration[22259-22762]:MethodDeclaration[22278-22781]"
    }, {
      "left" : "public static Double createDouble(String str)",
      "right" : "public static Double createDouble(String str)",
      "info" : "MethodDeclaration[22768-23276]:MethodDeclaration[22787-23295]"
    }, {
      "left" : "public static Integer createInteger(String str)",
      "right" : "public static Integer createInteger(String str)",
      "info" : "MethodDeclaration[23282-23904]:MethodDeclaration[23301-23923]"
    }, {
      "left" : "public static Long createLong(String str)",
      "right" : "public static Long createLong(String str)",
      "info" : "MethodDeclaration[23910-24408]:MethodDeclaration[23929-24427]"
    }, {
      "left" : "public static BigInteger createBigInteger(String str)",
      "right" : "public static BigInteger createBigInteger(String str)",
      "info" : "MethodDeclaration[24414-24938]:MethodDeclaration[24433-24957]"
    }, {
      "left" : "public static BigDecimal createBigDecimal(String str)",
      "right" : "public static BigDecimal createBigDecimal(String str)",
      "info" : "MethodDeclaration[24944-25678]:MethodDeclaration[24963-25697]"
    }, {
      "left" : "public static long min(long[] array)",
      "right" : "public static long min(long[] array)",
      "info" : "MethodDeclaration[25779-26646]:MethodDeclaration[25798-26665]"
    }, {
      "left" : "public static int min(int[] array)",
      "right" : "public static int min(int[] array)",
      "info" : "MethodDeclaration[26652-27516]:MethodDeclaration[26671-27535]"
    }, {
      "left" : "public static short min(short[] array)",
      "right" : "public static short min(short[] array)",
      "info" : "MethodDeclaration[27522-28392]:MethodDeclaration[27541-28411]"
    }, {
      "left" : "public static byte min(byte[] array)",
      "right" : "public static byte min(byte[] array)",
      "info" : "MethodDeclaration[28398-29265]:MethodDeclaration[28417-29284]"
    }, {
      "left" : "public static double min(double[] array)",
      "right" : "public static double min(double[] array)",
      "info" : "MethodDeclaration[29272-30348]:MethodDeclaration[29291-30367]"
    }, {
      "left" : "public static float min(float[] array)",
      "right" : "public static float min(float[] array)",
      "info" : "MethodDeclaration[30354-31424]:MethodDeclaration[30373-31443]"
    }, {
      "left" : "public static long max(long[] array)",
      "right" : "public static long max(long[] array)",
      "info" : "MethodDeclaration[31525-32384]:MethodDeclaration[31544-32403]"
    }, {
      "left" : "public static int max(int[] array)",
      "right" : "public static int max(int[] array)",
      "info" : "MethodDeclaration[32390-33254]:MethodDeclaration[32409-33273]"
    }, {
      "left" : "public static short max(short[] array)",
      "right" : "public static short max(short[] array)",
      "info" : "MethodDeclaration[33260-34130]:MethodDeclaration[33279-34149]"
    }, {
      "left" : "public static byte max(byte[] array)",
      "right" : "public static byte max(byte[] array)",
      "info" : "MethodDeclaration[34136-35003]:MethodDeclaration[34155-35022]"
    }, {
      "left" : "public static double max(double[] array)",
      "right" : "public static double max(double[] array)",
      "info" : "MethodDeclaration[35009-36084]:MethodDeclaration[35028-36103]"
    }, {
      "left" : "public static float max(float[] array)",
      "right" : "public static float max(float[] array)",
      "info" : "MethodDeclaration[36090-37152]:MethodDeclaration[36109-37171]"
    }, {
      "left" : "public static long min(long a, long b, long c)",
      "right" : "public static long min(long a, long b, long c)",
      "info" : "MethodDeclaration[37260-37640]:MethodDeclaration[37279-37659]"
    }, {
      "left" : "public static int min(int a, int b, int c)",
      "right" : "public static int min(int a, int b, int c)",
      "info" : "MethodDeclaration[37646-38021]:MethodDeclaration[37665-38040]"
    }, {
      "left" : "public static short min(short a, short b, short c)",
      "right" : "public static short min(short a, short b, short c)",
      "info" : "MethodDeclaration[38027-38412]:MethodDeclaration[38046-38431]"
    }, {
      "left" : "public static byte min(byte a, byte b, byte c)",
      "right" : "public static byte min(byte a, byte b, byte c)",
      "info" : "MethodDeclaration[38418-38798]:MethodDeclaration[38437-38817]"
    }, {
      "left" : "public static double min(double a, double b, double c)",
      "right" : "public static double min(double a, double b, double c)",
      "info" : "MethodDeclaration[38804-39346]:MethodDeclaration[38823-39365]"
    }, {
      "left" : "public static float min(float a, float b, float c)",
      "right" : "public static float min(float a, float b, float c)",
      "info" : "MethodDeclaration[39352-39885]:MethodDeclaration[39371-39904]"
    }, {
      "left" : "public static long max(long a, long b, long c)",
      "right" : "public static long max(long a, long b, long c)",
      "info" : "MethodDeclaration[39988-40367]:MethodDeclaration[40007-40386]"
    }, {
      "left" : "public static int max(int a, int b, int c)",
      "right" : "public static int max(int a, int b, int c)",
      "info" : "MethodDeclaration[40373-40747]:MethodDeclaration[40392-40766]"
    }, {
      "left" : "public static short max(short a, short b, short c)",
      "right" : "public static short max(short a, short b, short c)",
      "info" : "MethodDeclaration[40753-41137]:MethodDeclaration[40772-41156]"
    }, {
      "left" : "public static byte max(byte a, byte b, byte c)",
      "right" : "public static byte max(byte a, byte b, byte c)",
      "info" : "MethodDeclaration[41143-41522]:MethodDeclaration[41162-41541]"
    }, {
      "left" : "public static double max(double a, double b, double c)",
      "right" : "public static double max(double a, double b, double c)",
      "info" : "MethodDeclaration[41528-42068]:MethodDeclaration[41547-42087]"
    }, {
      "left" : "public static float max(float a, float b, float c)",
      "right" : "public static float max(float a, float b, float c)",
      "info" : "MethodDeclaration[42074-42606]:MethodDeclaration[42093-42625]"
    }, {
      "left" : "public static boolean isDigits(String str)",
      "right" : "public static boolean isDigits(String str)",
      "info" : "MethodDeclaration[42690-43325]:MethodDeclaration[42709-43344]"
    }, {
      "left" : "public static boolean isNumber(String str)",
      "right" : "public static boolean isNumber(String str)",
      "info" : "MethodDeclaration[43331-47347]:MethodDeclaration[43350-47682]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3781-3787]:Modifier[3781-3787]"
    }, {
      "left" : "NumberUtils",
      "right" : "NumberUtils",
      "info" : "SimpleName[3788-3799]:SimpleName[3788-3799]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3802-3826]:Block[3802-3826]"
    }, {
      "left" : "super();",
      "right" : "super();",
      "info" : "SuperConstructorInvocation[3812-3820]:SuperConstructorInvocation[3812-3820]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4465-4471]:Modifier[4465-4471]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[4472-4478]:Modifier[4472-4478]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[4479-4482]:PrimitiveType[4479-4482]"
    }, {
      "left" : "toInt",
      "right" : "toInt",
      "info" : "SimpleName[4483-4488]:SimpleName[4483-4488]"
    }, {
      "left" : "String str",
      "right" : "String str",
      "info" : "SingleVariableDeclaration[4489-4499]:SingleVariableDeclaration[4489-4499]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4501-4538]:Block[4501-4538]"
    }, {
      "left" : "return toInt(str, 0);",
      "right" : "return toInt(str, 0);",
      "info" : "ReturnStatement[4511-4532]:ReturnStatement[4511-4532]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5138-5144]:Modifier[5138-5144]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[5145-5151]:Modifier[5145-5151]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[5152-5155]:PrimitiveType[5152-5155]"
    }, {
      "left" : "toInt",
      "right" : "toInt",
      "info" : "SimpleName[5156-5161]:SimpleName[5156-5161]"
    }, {
      "left" : "String str",
      "right" : "String str",
      "info" : "SingleVariableDeclaration[5162-5172]:SingleVariableDeclaration[5162-5172]"
    }, {
      "left" : "int defaultValue",
      "right" : "int defaultValue",
      "info" : "SingleVariableDeclaration[5174-5190]:SingleVariableDeclaration[5174-5190]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5192-5413]:Block[5192-5413]"
    }, {
      "left" : "if(str == null)",
      "right" : "if(str == null)",
      "info" : "IfStatement[5202-5262]:IfStatement[5202-5262]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5218-5262]:Block[5218-5262]"
    }, {
      "left" : "return defaultValue;",
      "right" : "return defaultValue;",
      "info" : "ReturnStatement[5232-5252]:ReturnStatement[5232-5252]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[5271-5407]:TryStatement[5271-5407]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5275-5328]:Block[5275-5328]"
    }, {
      "left" : "return Integer.parseInt(str);",
      "right" : "return Integer.parseInt(str);",
      "info" : "ReturnStatement[5289-5318]:ReturnStatement[5289-5318]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5363-5407]:Block[5363-5407]"
    }, {
      "left" : "return defaultValue;",
      "right" : "return defaultValue;",
      "info" : "ReturnStatement[5377-5397]:ReturnStatement[5377-5397]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5978-5984]:Modifier[5978-5984]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[5985-5991]:Modifier[5985-5991]"
    }, {
      "left" : "long",
      "right" : "long",
      "info" : "PrimitiveType[5992-5996]:PrimitiveType[5992-5996]"
    }, {
      "left" : "toLong",
      "right" : "toLong",
      "info" : "SimpleName[5997-6003]:SimpleName[5997-6003]"
    }, {
      "left" : "String str",
      "right" : "String str",
      "info" : "SingleVariableDeclaration[6004-6014]:SingleVariableDeclaration[6004-6014]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6016-6055]:Block[6016-6055]"
    }, {
      "left" : "return toLong(str, 0L);",
      "right" : "return toLong(str, 0L);",
      "info" : "ReturnStatement[6026-6049]:ReturnStatement[6026-6049]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6665-6671]:Modifier[6665-6671]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[6672-6678]:Modifier[6672-6678]"
    }, {
      "left" : "long",
      "right" : "long",
      "info" : "PrimitiveType[6679-6683]:PrimitiveType[6679-6683]"
    }, {
      "left" : "toLong",
      "right" : "toLong",
      "info" : "SimpleName[6684-6690]:SimpleName[6684-6690]"
    }, {
      "left" : "String str",
      "right" : "String str",
      "info" : "SingleVariableDeclaration[6691-6701]:SingleVariableDeclaration[6691-6701]"
    }, {
      "left" : "long defaultValue",
      "right" : "long defaultValue",
      "info" : "SingleVariableDeclaration[6703-6720]:SingleVariableDeclaration[6703-6720]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6722-6942]:Block[6722-6942]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[6732-6793]:IfStatement[6732-6793]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6749-6793]:Block[6749-6793]"
    }, {
      "left" : "return defaultValue;",
      "right" : "return defaultValue;",
      "info" : "ReturnStatement[6763-6783]:ReturnStatement[6763-6783]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[6802-6936]:TryStatement[6802-6936]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6806-6857]:Block[6806-6857]"
    }, {
      "left" : "return Long.parseLong(str);",
      "right" : "return Long.parseLong(str);",
      "info" : "ReturnStatement[6820-6847]:ReturnStatement[6820-6847]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6892-6936]:Block[6892-6936]"
    }, {
      "left" : "return defaultValue;",
      "right" : "return defaultValue;",
      "info" : "ReturnStatement[6906-6926]:ReturnStatement[6906-6926]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7563-7569]:Modifier[7563-7569]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[7570-7576]:Modifier[7570-7576]"
    }, {
      "left" : "float",
      "right" : "float",
      "info" : "PrimitiveType[7577-7582]:PrimitiveType[7577-7582]"
    }, {
      "left" : "toFloat",
      "right" : "toFloat",
      "info" : "SimpleName[7583-7590]:SimpleName[7583-7590]"
    }, {
      "left" : "String str",
      "right" : "String str",
      "info" : "SingleVariableDeclaration[7591-7601]:SingleVariableDeclaration[7591-7601]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7603-7645]:Block[7603-7645]"
    }, {
      "left" : "return toFloat(str, 0.0f);",
      "right" : "return toFloat(str, 0.0f);",
      "info" : "ReturnStatement[7613-7639]:ReturnStatement[7613-7639]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8322-8328]:Modifier[8322-8328]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[8329-8335]:Modifier[8329-8335]"
    }, {
      "left" : "float",
      "right" : "float",
      "info" : "PrimitiveType[8336-8341]:PrimitiveType[8336-8341]"
    }, {
      "left" : "toFloat",
      "right" : "toFloat",
      "info" : "SimpleName[8342-8349]:SimpleName[8342-8349]"
    }, {
      "left" : "String str",
      "right" : "String str",
      "info" : "SingleVariableDeclaration[8350-8360]:SingleVariableDeclaration[8350-8360]"
    }, {
      "left" : "float defaultValue",
      "right" : "float defaultValue",
      "info" : "SingleVariableDeclaration[8362-8380]:SingleVariableDeclaration[8362-8380]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8382-8593]:Block[8382-8593]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[8390-8447]:IfStatement[8390-8447]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8407-8447]:Block[8407-8447]"
    }, {
      "left" : "return defaultValue;",
      "right" : "return defaultValue;",
      "info" : "ReturnStatement[8419-8439]:ReturnStatement[8419-8439]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[8459-8587]:TryStatement[8459-8587]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8463-8512]:Block[8463-8512]"
    }, {
      "left" : "return Float.parseFloat(str);",
      "right" : "return Float.parseFloat(str);",
      "info" : "ReturnStatement[8475-8504]:ReturnStatement[8475-8504]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8547-8587]:Block[8547-8587]"
    }, {
      "left" : "return defaultValue;",
      "right" : "return defaultValue;",
      "info" : "ReturnStatement[8559-8579]:ReturnStatement[8559-8579]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9219-9225]:Modifier[9219-9225]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[9226-9232]:Modifier[9226-9232]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[9233-9239]:PrimitiveType[9233-9239]"
    }, {
      "left" : "toDouble",
      "right" : "toDouble",
      "info" : "SimpleName[9240-9248]:SimpleName[9240-9248]"
    }, {
      "left" : "String str",
      "right" : "String str",
      "info" : "SingleVariableDeclaration[9249-9259]:SingleVariableDeclaration[9249-9259]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9261-9304]:Block[9261-9304]"
    }, {
      "left" : "return toDouble(str, 0.0d);",
      "right" : "return toDouble(str, 0.0d);",
      "info" : "ReturnStatement[9271-9298]:ReturnStatement[9271-9298]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9986-9992]:Modifier[9986-9992]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[9993-9999]:Modifier[9993-9999]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[10000-10006]:PrimitiveType[10000-10006]"
    }, {
      "left" : "toDouble",
      "right" : "toDouble",
      "info" : "SimpleName[10007-10015]:SimpleName[10007-10015]"
    }, {
      "left" : "String str",
      "right" : "String str",
      "info" : "SingleVariableDeclaration[10016-10026]:SingleVariableDeclaration[10016-10026]"
    }, {
      "left" : "double defaultValue",
      "right" : "double defaultValue",
      "info" : "SingleVariableDeclaration[10028-10047]:SingleVariableDeclaration[10028-10047]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10049-10257]:Block[10049-10257]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[10057-10114]:IfStatement[10057-10114]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10074-10114]:Block[10074-10114]"
    }, {
      "left" : "return defaultValue;",
      "right" : "return defaultValue;",
      "info" : "ReturnStatement[10086-10106]:ReturnStatement[10086-10106]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[10121-10251]:TryStatement[10121-10251]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10125-10176]:Block[10125-10176]"
    }, {
      "left" : "return Double.parseDouble(str);",
      "right" : "return Double.parseDouble(str);",
      "info" : "ReturnStatement[10137-10168]:ReturnStatement[10137-10168]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10211-10251]:Block[10211-10251]"
    }, {
      "left" : "return defaultValue;",
      "right" : "return defaultValue;",
      "info" : "ReturnStatement[10223-10243]:ReturnStatement[10223-10243]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10884-10890]:Modifier[10884-10890]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[10891-10897]:Modifier[10891-10897]"
    }, {
      "left" : "byte",
      "right" : "byte",
      "info" : "PrimitiveType[10898-10902]:PrimitiveType[10898-10902]"
    }, {
      "left" : "toByte",
      "right" : "toByte",
      "info" : "SimpleName[10903-10909]:SimpleName[10903-10909]"
    }, {
      "left" : "String str",
      "right" : "String str",
      "info" : "SingleVariableDeclaration[10910-10920]:SingleVariableDeclaration[10910-10920]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10922-10967]:Block[10922-10967]"
    }, {
      "left" : "return toByte(str, (byte) 0);",
      "right" : "return toByte(str, (byte) 0);",
      "info" : "ReturnStatement[10932-10961]:ReturnStatement[10932-10961]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11553-11559]:Modifier[11553-11559]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[11560-11566]:Modifier[11560-11566]"
    }, {
      "left" : "byte",
      "right" : "byte",
      "info" : "PrimitiveType[11567-11571]:PrimitiveType[11567-11571]"
    }, {
      "left" : "toByte",
      "right" : "toByte",
      "info" : "SimpleName[11572-11578]:SimpleName[11572-11578]"
    }, {
      "left" : "String str",
      "right" : "String str",
      "info" : "SingleVariableDeclaration[11579-11589]:SingleVariableDeclaration[11579-11589]"
    }, {
      "left" : "byte defaultValue",
      "right" : "byte defaultValue",
      "info" : "SingleVariableDeclaration[11591-11608]:SingleVariableDeclaration[11591-11608]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11610-11829]:Block[11610-11829]"
    }, {
      "left" : "if(str == null)",
      "right" : "if(str == null)",
      "info" : "IfStatement[11620-11680]:IfStatement[11620-11680]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11636-11680]:Block[11636-11680]"
    }, {
      "left" : "return defaultValue;",
      "right" : "return defaultValue;",
      "info" : "ReturnStatement[11650-11670]:ReturnStatement[11650-11670]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[11689-11823]:TryStatement[11689-11823]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11693-11744]:Block[11693-11744]"
    }, {
      "left" : "return Byte.parseByte(str);",
      "right" : "return Byte.parseByte(str);",
      "info" : "ReturnStatement[11707-11734]:ReturnStatement[11707-11734]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11779-11823]:Block[11779-11823]"
    }, {
      "left" : "return defaultValue;",
      "right" : "return defaultValue;",
      "info" : "ReturnStatement[11793-11813]:ReturnStatement[11793-11813]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12381-12387]:Modifier[12381-12387]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[12388-12394]:Modifier[12388-12394]"
    }, {
      "left" : "short",
      "right" : "short",
      "info" : "PrimitiveType[12395-12400]:PrimitiveType[12395-12400]"
    }, {
      "left" : "toShort",
      "right" : "toShort",
      "info" : "SimpleName[12401-12408]:SimpleName[12401-12408]"
    }, {
      "left" : "String str",
      "right" : "String str",
      "info" : "SingleVariableDeclaration[12409-12419]:SingleVariableDeclaration[12409-12419]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12421-12468]:Block[12421-12468]"
    }, {
      "left" : "return toShort(str, (short) 0);",
      "right" : "return toShort(str, (short) 0);",
      "info" : "ReturnStatement[12431-12462]:ReturnStatement[12431-12462]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[13060-13066]:Modifier[13060-13066]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[13067-13073]:Modifier[13067-13073]"
    }, {
      "left" : "short",
      "right" : "short",
      "info" : "PrimitiveType[13074-13079]:PrimitiveType[13074-13079]"
    }, {
      "left" : "toShort",
      "right" : "toShort",
      "info" : "SimpleName[13080-13087]:SimpleName[13080-13087]"
    }, {
      "left" : "String str",
      "right" : "String str",
      "info" : "SingleVariableDeclaration[13088-13098]:SingleVariableDeclaration[13088-13098]"
    }, {
      "left" : "short defaultValue",
      "right" : "short defaultValue",
      "info" : "SingleVariableDeclaration[13100-13118]:SingleVariableDeclaration[13100-13118]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13120-13341]:Block[13120-13341]"
    }, {
      "left" : "if(str == null)",
      "right" : "if(str == null)",
      "info" : "IfStatement[13130-13190]:IfStatement[13130-13190]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13146-13190]:Block[13146-13190]"
    }, {
      "left" : "return defaultValue;",
      "right" : "return defaultValue;",
      "info" : "ReturnStatement[13160-13180]:ReturnStatement[13160-13180]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[13199-13335]:TryStatement[13199-13335]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13203-13256]:Block[13203-13256]"
    }, {
      "left" : "return Short.parseShort(str);",
      "right" : "return Short.parseShort(str);",
      "info" : "ReturnStatement[13217-13246]:ReturnStatement[13217-13246]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13291-13335]:Block[13291-13335]"
    }, {
      "left" : "return defaultValue;",
      "right" : "return defaultValue;",
      "info" : "ReturnStatement[13305-13325]:ReturnStatement[13305-13325]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[15847-15853]:Modifier[15847-15853]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[15854-15860]:Modifier[15854-15860]"
    }, {
      "left" : "Number",
      "right" : "Number",
      "info" : "SimpleType[15861-15867]:SimpleType[15861-15867]"
    }, {
      "left" : "createNumber",
      "right" : "createNumber",
      "info" : "SimpleName[15868-15880]:SimpleName[15868-15880]"
    }, {
      "left" : "String str",
      "right" : "String str",
      "info" : "SingleVariableDeclaration[15881-15891]:SingleVariableDeclaration[15881-15891]"
    }, {
      "left" : "NumberFormatException",
      "right" : "NumberFormatException",
      "info" : "SimpleType[15900-15921]:SimpleType[15900-15921]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15922-21607]:Block[15922-21626]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[15932-15985]:IfStatement[15932-15985]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15949-15985]:Block[15949-15985]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[15963-15975]:ReturnStatement[15963-15975]"
    }, {
      "left" : "if (StringUtils.isBlank(str))",
      "right" : "if (StringUtils.isBlank(str))",
      "info" : "IfStatement[15994-16120]:IfStatement[15994-16120]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16024-16120]:Block[16024-16120]"
    }, {
      "left" : "throw new NumberFormatException(\"A blank string is not a valid number\");",
      "right" : "throw new NumberFormatException(\"A blank string is not a valid number\");",
      "info" : "ThrowStatement[16038-16110]:ThrowStatement[16038-16110]"
    }, {
      "left" : "if (str.startsWith(\"--\"))",
      "right" : "if (str.startsWith(\"--\"))",
      "info" : "IfStatement[16131-16440]:IfStatement[16131-16440]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16157-16440]:Block[16157-16440]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[16418-16430]:ReturnStatement[16418-16430]"
    }, {
      "left" : "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\"))",
      "right" : "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\"))",
      "info" : "IfStatement[16449-16550]:IfStatement[16449-16550]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16500-16550]:Block[16500-16550]"
    }, {
      "left" : "return createInteger(str);",
      "right" : "return createInteger(str);",
      "info" : "ReturnStatement[16514-16540]:ReturnStatement[16514-16540]"
    }, {
      "left" : "char lastChar = str.charAt(str.length() - 1);",
      "right" : "char lastChar = str.charAt(str.length() - 1);",
      "info" : "VariableDeclarationStatement[16562-16607]:VariableDeclarationStatement[16562-16607]"
    }, {
      "left" : "String mant;",
      "right" : "String mant;",
      "info" : "VariableDeclarationStatement[16616-16628]:VariableDeclarationStatement[16616-16628]"
    }, {
      "left" : "String dec;",
      "right" : "String dec;",
      "info" : "VariableDeclarationStatement[16637-16648]:VariableDeclarationStatement[16637-16648]"
    }, {
      "left" : "String exp;",
      "right" : "String exp;",
      "info" : "VariableDeclarationStatement[16657-16668]:VariableDeclarationStatement[16657-16668]"
    }, {
      "left" : "int decPos = str.indexOf('.');",
      "right" : "int decPos = str.indexOf('.');",
      "info" : "VariableDeclarationStatement[16677-16707]:VariableDeclarationStatement[16677-16707]"
    }, {
      "left" : "int expPos = str.indexOf('e') + str.indexOf('E') + 1;",
      "right" : "int expPos = str.indexOf('e') + str.indexOf('E') + 1;",
      "info" : "VariableDeclarationStatement[16716-16769]:VariableDeclarationStatement[16716-16769]"
    }, {
      "left" : "if (decPos > -1)",
      "right" : "if (decPos > -1)",
      "info" : "IfStatement[16779-17352]:IfStatement[16779-17352]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16796-17168]:Block[16796-17168]"
    }, {
      "left" : "if (expPos > -1)",
      "right" : "if (expPos > -1)",
      "info" : "IfStatement[16811-17113]:IfStatement[16811-17113]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16828-17043]:Block[16828-17043]"
    }, {
      "left" : "if (expPos < decPos)",
      "right" : "if (expPos < decPos)",
      "info" : "IfStatement[16846-16972]:IfStatement[16846-16972]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16867-16972]:Block[16867-16972]"
    }, {
      "left" : "throw new NumberFormatException(str + \" is not a valid number.\");",
      "right" : "throw new NumberFormatException(str + \" is not a valid number.\");",
      "info" : "ThrowStatement[16889-16954]:ThrowStatement[16889-16954]"
    }, {
      "left" : "dec = str.substring(decPos + 1, expPos);",
      "right" : "dec = str.substring(decPos + 1, expPos);",
      "info" : "ExpressionStatement[16989-17029]:ExpressionStatement[16989-17029]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17049-17113]:Block[17049-17113]"
    }, {
      "left" : "dec = str.substring(decPos + 1);",
      "right" : "dec = str.substring(decPos + 1);",
      "info" : "ExpressionStatement[17067-17099]:ExpressionStatement[17067-17099]"
    }, {
      "left" : "mant = str.substring(0, decPos);",
      "right" : "mant = str.substring(0, decPos);",
      "info" : "ExpressionStatement[17126-17158]:ExpressionStatement[17126-17158]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17174-17352]:Block[17174-17352]"
    }, {
      "left" : "if (expPos > -1)",
      "right" : "if (expPos > -1)",
      "info" : "IfStatement[17188-17318]:IfStatement[17188-17318]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17205-17269]:Block[17205-17269]"
    }, {
      "left" : "mant = str.substring(0, expPos);",
      "right" : "mant = str.substring(0, expPos);",
      "info" : "ExpressionStatement[17223-17255]:ExpressionStatement[17223-17255]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17275-17318]:Block[17275-17318]"
    }, {
      "left" : "mant = str;",
      "right" : "mant = str;",
      "info" : "ExpressionStatement[17293-17304]:ExpressionStatement[17293-17304]"
    }, {
      "left" : "dec = null;",
      "right" : "dec = null;",
      "info" : "ExpressionStatement[17331-17342]:ExpressionStatement[17331-17342]"
    }, {
      "left" : "if (!Character.isDigit(lastChar))",
      "right" : "if (!Character.isDigit(lastChar) && lastChar != '.')",
      "info" : "IfStatement[17361-21601]:IfStatement[17361-21620]"
    }, {
      "left" : "!Character.isDigit(lastChar)",
      "right" : "!Character.isDigit(lastChar)",
      "info" : "PrefixExpression[17365-17393]:PrefixExpression[17365-17393]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17395-19906]:Block[17414-19925]"
    }, {
      "left" : "if (expPos > -1 && expPos < str.length() - 1)",
      "right" : "if (expPos > -1 && expPos < str.length() - 1)",
      "info" : "IfStatement[17409-17586]:IfStatement[17428-17605]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17455-17537]:Block[17474-17556]"
    }, {
      "left" : "exp = str.substring(expPos + 1, str.length() - 1);",
      "right" : "exp = str.substring(expPos + 1, str.length() - 1);",
      "info" : "ExpressionStatement[17473-17523]:ExpressionStatement[17492-17542]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17543-17586]:Block[17562-17605]"
    }, {
      "left" : "exp = null;",
      "right" : "exp = null;",
      "info" : "ExpressionStatement[17561-17572]:ExpressionStatement[17580-17591]"
    }, {
      "left" : "String numeric = str.substring(0, str.length() - 1);",
      "right" : "String numeric = str.substring(0, str.length() - 1);",
      "info" : "VariableDeclarationStatement[17642-17694]:VariableDeclarationStatement[17661-17713]"
    }, {
      "left" : "boolean allZeros = isAllZeros(mant) && isAllZeros(exp);",
      "right" : "boolean allZeros = isAllZeros(mant) && isAllZeros(exp);",
      "info" : "VariableDeclarationStatement[17707-17762]:VariableDeclarationStatement[17726-17781]"
    }, {
      "left" : "switch (lastChar) {\n                case 'l' :\n                case 'L' :\n                    if (dec == null\n                        && exp == null\n                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {\n                        try {\n                            return createLong(numeric);\n                        } catch (NumberFormatException nfe) {\n                            //Too big for a long\n                        }\n                        return createBigInteger(numeric);\n\n                    }\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                case 'f' :\n                case 'F' :\n                    try {\n                        Float f = NumberUtils.createFloat(numeric);\n                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                            //If it's too big for a float or the float value = 0 and the string\n                            //has non-zeros in it, then float does not have the precision we want\n                            return f;\n                        }\n\n                    } catch (NumberFormatException nfe) {\n                        // ignore the bad number\n                    }\n                    //$FALL-THROUGH$\n                case 'd' :\n                case 'D' :\n                    try {\n                        Double d = NumberUtils.createDouble(numeric);\n                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\n                            return d;\n                        }\n                    } catch (NumberFormatException nfe) {\n                        // ignore the bad number\n                    }\n                    try {\n                        return createBigDecimal(numeric);\n                    } catch (NumberFormatException e) {\n                        // ignore the bad number\n                    }\n                    //$FALL-THROUGH$\n                default :\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n\n            }",
      "right" : "switch (lastChar) {\n                case 'l' :\n                case 'L' :\n                    if (dec == null\n                        && exp == null\n                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {\n                        try {\n                            return createLong(numeric);\n                        } catch (NumberFormatException nfe) {\n                            //Too big for a long\n                        }\n                        return createBigInteger(numeric);\n\n                    }\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                case 'f' :\n                case 'F' :\n                    try {\n                        Float f = NumberUtils.createFloat(numeric);\n                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                            //If it's too big for a float or the float value = 0 and the string\n                            //has non-zeros in it, then float does not have the precision we want\n                            return f;\n                        }\n\n                    } catch (NumberFormatException nfe) {\n                        // ignore the bad number\n                    }\n                    //$FALL-THROUGH$\n                case 'd' :\n                case 'D' :\n                    try {\n                        Double d = NumberUtils.createDouble(numeric);\n                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\n                            return d;\n                        }\n                    } catch (NumberFormatException nfe) {\n                        // ignore the bad number\n                    }\n                    try {\n                        return createBigDecimal(numeric);\n                    } catch (NumberFormatException e) {\n                        // ignore the bad number\n                    }\n                    //$FALL-THROUGH$\n                default :\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n\n            }",
      "info" : "SwitchStatement[17775-19896]:SwitchStatement[17794-19915]"
    }, {
      "left" : "case 'l' :",
      "right" : "case 'l' :",
      "info" : "SwitchCase[17811-17821]:SwitchCase[17830-17840]"
    }, {
      "left" : "case 'L' :",
      "right" : "case 'L' :",
      "info" : "SwitchCase[17838-17848]:SwitchCase[17857-17867]"
    }, {
      "left" : "if (dec == null\n                        && exp == null\n                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric)))",
      "right" : "if (dec == null\n                        && exp == null\n                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric)))",
      "info" : "IfStatement[17869-18339]:IfStatement[17888-18358]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18034-18339]:Block[18053-18358]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[18060-18258]:TryStatement[18079-18277]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18064-18147]:Block[18083-18166]"
    }, {
      "left" : "return createLong(numeric);",
      "right" : "return createLong(numeric);",
      "info" : "ReturnStatement[18094-18121]:ReturnStatement[18113-18140]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18182-18258]:Block[18201-18277]"
    }, {
      "left" : "return createBigInteger(numeric);",
      "right" : "return createBigInteger(numeric);",
      "info" : "ReturnStatement[18283-18316]:ReturnStatement[18302-18335]"
    }, {
      "left" : "throw new NumberFormatException(str + \" is not a valid number.\");",
      "right" : "throw new NumberFormatException(str + \" is not a valid number.\");",
      "info" : "ThrowStatement[18360-18425]:ThrowStatement[18379-18444]"
    }, {
      "left" : "case 'f' :",
      "right" : "case 'f' :",
      "info" : "SwitchCase[18442-18452]:SwitchCase[18461-18471]"
    }, {
      "left" : "case 'F' :",
      "right" : "case 'F' :",
      "info" : "SwitchCase[18469-18479]:SwitchCase[18488-18498]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[18500-19051]:TryStatement[18519-19070]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18504-18944]:Block[18523-18963]"
    }, {
      "left" : "Float f = NumberUtils.createFloat(numeric);",
      "right" : "Float f = NumberUtils.createFloat(numeric);",
      "info" : "VariableDeclarationStatement[18530-18573]:VariableDeclarationStatement[18549-18592]"
    }, {
      "left" : "if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros)))",
      "right" : "if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros)))",
      "info" : "IfStatement[18598-18921]:IfStatement[18617-18940]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18662-18921]:Block[18681-18940]"
    }, {
      "left" : "return f;",
      "right" : "return f;",
      "info" : "ReturnStatement[18886-18895]:ReturnStatement[18905-18914]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18979-19051]:Block[18998-19070]"
    }, {
      "left" : "case 'd' :",
      "right" : "case 'd' :",
      "info" : "SwitchCase[19105-19115]:SwitchCase[19124-19134]"
    }, {
      "left" : "case 'D' :",
      "right" : "case 'D' :",
      "info" : "SwitchCase[19132-19142]:SwitchCase[19151-19161]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[19163-19521]:TryStatement[19182-19540]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19167-19414]:Block[19186-19433]"
    }, {
      "left" : "Double d = NumberUtils.createDouble(numeric);",
      "right" : "Double d = NumberUtils.createDouble(numeric);",
      "info" : "VariableDeclarationStatement[19193-19238]:VariableDeclarationStatement[19212-19257]"
    }, {
      "left" : "if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros)))",
      "right" : "if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros)))",
      "info" : "IfStatement[19263-19392]:IfStatement[19282-19411]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19327-19392]:Block[19346-19411]"
    }, {
      "left" : "return d;",
      "right" : "return d;",
      "info" : "ReturnStatement[19357-19366]:ReturnStatement[19376-19385]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19449-19521]:Block[19468-19540]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[19542-19732]:TryStatement[19561-19751]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19546-19627]:Block[19565-19646]"
    }, {
      "left" : "return createBigDecimal(numeric);",
      "right" : "return createBigDecimal(numeric);",
      "info" : "ReturnStatement[19572-19605]:ReturnStatement[19591-19624]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19660-19732]:Block[19679-19751]"
    }, {
      "left" : "default :",
      "right" : "default :",
      "info" : "SwitchCase[19786-19795]:SwitchCase[19805-19814]"
    }, {
      "left" : "throw new NumberFormatException(str + \" is not a valid number.\");",
      "right" : "throw new NumberFormatException(str + \" is not a valid number.\");",
      "info" : "ThrowStatement[19816-19881]:ThrowStatement[19835-19900]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19912-21601]:Block[19931-21620]"
    }, {
      "left" : "if (expPos > -1 && expPos < str.length() - 1)",
      "right" : "if (expPos > -1 && expPos < str.length() - 1)",
      "info" : "IfStatement[20047-20220]:IfStatement[20066-20239]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20093-20171]:Block[20112-20190]"
    }, {
      "left" : "exp = str.substring(expPos + 1, str.length());",
      "right" : "exp = str.substring(expPos + 1, str.length());",
      "info" : "ExpressionStatement[20111-20157]:ExpressionStatement[20130-20176]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20177-20220]:Block[20196-20239]"
    }, {
      "left" : "exp = null;",
      "right" : "exp = null;",
      "info" : "ExpressionStatement[20195-20206]:ExpressionStatement[20214-20225]"
    }, {
      "left" : "if (dec == null && exp == null)",
      "right" : "if (dec == null && exp == null)",
      "info" : "IfStatement[20233-21591]:IfStatement[20252-21610]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20265-20741]:Block[20284-20760]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[20328-20497]:TryStatement[20347-20516]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20332-20398]:Block[20351-20417]"
    }, {
      "left" : "return createInteger(str);",
      "right" : "return createInteger(str);",
      "info" : "ReturnStatement[20354-20380]:ReturnStatement[20373-20399]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20433-20497]:Block[20452-20516]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[20514-20680]:TryStatement[20533-20699]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20518-20581]:Block[20537-20600]"
    }, {
      "left" : "return createLong(str);",
      "right" : "return createLong(str);",
      "info" : "ReturnStatement[20540-20563]:ReturnStatement[20559-20582]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20616-20680]:Block[20635-20699]"
    }, {
      "left" : "return createBigInteger(str);",
      "right" : "return createBigInteger(str);",
      "info" : "ReturnStatement[20697-20726]:ReturnStatement[20716-20745]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20747-21591]:Block[20766-21610]"
    }, {
      "left" : "boolean allZeros = isAllZeros(mant) && isAllZeros(exp);",
      "right" : "boolean allZeros = isAllZeros(mant) && isAllZeros(exp);",
      "info" : "VariableDeclarationStatement[20813-20868]:VariableDeclarationStatement[20832-20887]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[20885-21197]:TryStatement[20904-21216]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20889-21098]:Block[20908-21117]"
    }, {
      "left" : "Float f = createFloat(str);",
      "right" : "Float f = createFloat(str);",
      "info" : "VariableDeclarationStatement[20911-20938]:VariableDeclarationStatement[20930-20957]"
    }, {
      "left" : "if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros)))",
      "right" : "if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros)))",
      "info" : "IfStatement[20959-21080]:IfStatement[20978-21099]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21023-21080]:Block[21042-21099]"
    }, {
      "left" : "return f;",
      "right" : "return f;",
      "info" : "ReturnStatement[21049-21058]:ReturnStatement[21068-21077]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21133-21197]:Block[21152-21216]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[21214-21529]:TryStatement[21233-21548]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21218-21430]:Block[21237-21449]"
    }, {
      "left" : "Double d = createDouble(str);",
      "right" : "Double d = createDouble(str);",
      "info" : "VariableDeclarationStatement[21240-21269]:VariableDeclarationStatement[21259-21288]"
    }, {
      "left" : "if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros)))",
      "right" : "if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros)))",
      "info" : "IfStatement[21290-21412]:IfStatement[21309-21431]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21355-21412]:Block[21374-21431]"
    }, {
      "left" : "return d;",
      "right" : "return d;",
      "info" : "ReturnStatement[21381-21390]:ReturnStatement[21400-21409]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21465-21529]:Block[21484-21548]"
    }, {
      "left" : "return createBigDecimal(str);",
      "right" : "return createBigDecimal(str);",
      "info" : "ReturnStatement[21547-21576]:ReturnStatement[21566-21595]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[21879-21886]:Modifier[21898-21905]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[21887-21893]:Modifier[21906-21912]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[21894-21901]:PrimitiveType[21913-21920]"
    }, {
      "left" : "isAllZeros",
      "right" : "isAllZeros",
      "info" : "SimpleName[21902-21912]:SimpleName[21921-21931]"
    }, {
      "left" : "String str",
      "right" : "String str",
      "info" : "SingleVariableDeclaration[21913-21923]:SingleVariableDeclaration[21932-21942]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21925-22175]:Block[21944-22194]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[21935-21988]:IfStatement[21954-22007]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21952-21988]:Block[21971-22007]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[21966-21978]:ReturnStatement[21985-21997]"
    }, {
      "left" : "for (int i = str.length() - 1; i >= 0; i--)",
      "right" : "for (int i = str.length() - 1; i >= 0; i--)",
      "info" : "ForStatement[21997-22136]:ForStatement[22016-22155]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22041-22136]:Block[22060-22155]"
    }, {
      "left" : "if (str.charAt(i) != '0')",
      "right" : "if (str.charAt(i) != '0')",
      "info" : "IfStatement[22055-22126]:IfStatement[22074-22145]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22081-22126]:Block[22100-22145]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[22099-22112]:ReturnStatement[22118-22131]"
    }, {
      "left" : "return str.length() > 0;",
      "right" : "return str.length() > 0;",
      "info" : "ReturnStatement[22145-22169]:ReturnStatement[22164-22188]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[22614-22620]:Modifier[22633-22639]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[22621-22627]:Modifier[22640-22646]"
    }, {
      "left" : "Float",
      "right" : "Float",
      "info" : "SimpleType[22628-22633]:SimpleType[22647-22652]"
    }, {
      "left" : "createFloat",
      "right" : "createFloat",
      "info" : "SimpleName[22634-22645]:SimpleName[22653-22664]"
    }, {
      "left" : "String str",
      "right" : "String str",
      "info" : "SingleVariableDeclaration[22646-22656]:SingleVariableDeclaration[22665-22675]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22658-22762]:Block[22677-22781]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[22668-22721]:IfStatement[22687-22740]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22685-22721]:Block[22704-22740]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[22699-22711]:ReturnStatement[22718-22730]"
    }, {
      "left" : "return Float.valueOf(str);",
      "right" : "return Float.valueOf(str);",
      "info" : "ReturnStatement[22730-22756]:ReturnStatement[22749-22775]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[23125-23131]:Modifier[23144-23150]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[23132-23138]:Modifier[23151-23157]"
    }, {
      "left" : "Double",
      "right" : "Double",
      "info" : "SimpleType[23139-23145]:SimpleType[23158-23164]"
    }, {
      "left" : "createDouble",
      "right" : "createDouble",
      "info" : "SimpleName[23146-23158]:SimpleName[23165-23177]"
    }, {
      "left" : "String str",
      "right" : "String str",
      "info" : "SingleVariableDeclaration[23159-23169]:SingleVariableDeclaration[23178-23188]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23171-23276]:Block[23190-23295]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[23181-23234]:IfStatement[23200-23253]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23198-23234]:Block[23217-23253]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[23212-23224]:ReturnStatement[23231-23243]"
    }, {
      "left" : "return Double.valueOf(str);",
      "right" : "return Double.valueOf(str);",
      "info" : "ReturnStatement[23243-23270]:ReturnStatement[23262-23289]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[23682-23688]:Modifier[23701-23707]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[23689-23695]:Modifier[23708-23714]"
    }, {
      "left" : "Integer",
      "right" : "Integer",
      "info" : "SimpleType[23696-23703]:SimpleType[23715-23722]"
    }, {
      "left" : "createInteger",
      "right" : "createInteger",
      "info" : "SimpleName[23704-23717]:SimpleName[23723-23736]"
    }, {
      "left" : "String str",
      "right" : "String str",
      "info" : "SingleVariableDeclaration[23718-23728]:SingleVariableDeclaration[23737-23747]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23730-23904]:Block[23749-23923]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[23740-23793]:IfStatement[23759-23812]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23757-23793]:Block[23776-23812]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[23771-23783]:ReturnStatement[23790-23802]"
    }, {
      "left" : "return Integer.decode(str);",
      "right" : "return Integer.decode(str);",
      "info" : "ReturnStatement[23871-23898]:ReturnStatement[23890-23917]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[24263-24269]:Modifier[24282-24288]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[24270-24276]:Modifier[24289-24295]"
    }, {
      "left" : "Long",
      "right" : "Long",
      "info" : "SimpleType[24277-24281]:SimpleType[24296-24300]"
    }, {
      "left" : "createLong",
      "right" : "createLong",
      "info" : "SimpleName[24282-24292]:SimpleName[24301-24311]"
    }, {
      "left" : "String str",
      "right" : "String str",
      "info" : "SingleVariableDeclaration[24293-24303]:SingleVariableDeclaration[24312-24322]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24305-24408]:Block[24324-24427]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[24315-24368]:IfStatement[24334-24387]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24332-24368]:Block[24351-24387]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[24346-24358]:ReturnStatement[24365-24377]"
    }, {
      "left" : "return Long.valueOf(str);",
      "right" : "return Long.valueOf(str);",
      "info" : "ReturnStatement[24377-24402]:ReturnStatement[24396-24421]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[24779-24785]:Modifier[24798-24804]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[24786-24792]:Modifier[24805-24811]"
    }, {
      "left" : "BigInteger",
      "right" : "BigInteger",
      "info" : "SimpleType[24793-24803]:SimpleType[24812-24822]"
    }, {
      "left" : "createBigInteger",
      "right" : "createBigInteger",
      "info" : "SimpleName[24804-24820]:SimpleName[24823-24839]"
    }, {
      "left" : "String str",
      "right" : "String str",
      "info" : "SingleVariableDeclaration[24821-24831]:SingleVariableDeclaration[24840-24850]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24833-24938]:Block[24852-24957]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[24843-24896]:IfStatement[24862-24915]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24860-24896]:Block[24879-24915]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[24874-24886]:ReturnStatement[24893-24905]"
    }, {
      "left" : "return new BigInteger(str);",
      "right" : "return new BigInteger(str);",
      "info" : "ReturnStatement[24905-24932]:ReturnStatement[24924-24951]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[25309-25315]:Modifier[25328-25334]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[25316-25322]:Modifier[25335-25341]"
    }, {
      "left" : "BigDecimal",
      "right" : "BigDecimal",
      "info" : "SimpleType[25323-25333]:SimpleType[25342-25352]"
    }, {
      "left" : "createBigDecimal",
      "right" : "createBigDecimal",
      "info" : "SimpleName[25334-25350]:SimpleName[25353-25369]"
    }, {
      "left" : "String str",
      "right" : "String str",
      "info" : "SingleVariableDeclaration[25351-25361]:SingleVariableDeclaration[25370-25380]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25363-25678]:Block[25382-25697]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[25373-25426]:IfStatement[25392-25445]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25390-25426]:Block[25409-25445]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[25404-25416]:ReturnStatement[25423-25435]"
    }, {
      "left" : "if (StringUtils.isBlank(str))",
      "right" : "if (StringUtils.isBlank(str))",
      "info" : "IfStatement[25508-25634]:IfStatement[25527-25653]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25538-25634]:Block[25557-25653]"
    }, {
      "left" : "throw new NumberFormatException(\"A blank string is not a valid number\");",
      "right" : "throw new NumberFormatException(\"A blank string is not a valid number\");",
      "info" : "ThrowStatement[25552-25624]:ThrowStatement[25571-25643]"
    }, {
      "left" : "return new BigDecimal(str);",
      "right" : "return new BigDecimal(str);",
      "info" : "ReturnStatement[25645-25672]:ReturnStatement[25664-25691]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[26113-26119]:Modifier[26132-26138]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[26120-26126]:Modifier[26139-26145]"
    }, {
      "left" : "long",
      "right" : "long",
      "info" : "PrimitiveType[26127-26131]:PrimitiveType[26146-26150]"
    }, {
      "left" : "min",
      "right" : "min",
      "info" : "SimpleName[26132-26135]:SimpleName[26151-26154]"
    }, {
      "left" : "long[] array",
      "right" : "long[] array",
      "info" : "SingleVariableDeclaration[26136-26148]:SingleVariableDeclaration[26155-26167]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26150-26646]:Block[26169-26665]"
    }, {
      "left" : "if (array == null)",
      "right" : "if (array == null)",
      "info" : "IfStatement[26187-26409]:IfStatement[26206-26428]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26206-26295]:Block[26225-26314]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The Array must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The Array must not be null\");",
      "info" : "ThrowStatement[26220-26285]:ThrowStatement[26239-26304]"
    }, {
      "left" : "if (array.length == 0)",
      "right" : "if (array.length == 0)",
      "info" : "IfStatement[26301-26409]:IfStatement[26320-26428]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26324-26409]:Block[26343-26428]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Array cannot be empty.\");",
      "right" : "throw new IllegalArgumentException(\"Array cannot be empty.\");",
      "info" : "ThrowStatement[26338-26399]:ThrowStatement[26357-26418]"
    }, {
      "left" : "long min = array[0];",
      "right" : "long min = array[0];",
      "info" : "VariableDeclarationStatement[26456-26476]:VariableDeclarationStatement[26475-26495]"
    }, {
      "left" : "for (int i = 1; i < array.length; i++)",
      "right" : "for (int i = 1; i < array.length; i++)",
      "info" : "ForStatement[26485-26615]:ForStatement[26504-26634]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26524-26615]:Block[26543-26634]"
    }, {
      "left" : "if (array[i] < min)",
      "right" : "if (array[i] < min)",
      "info" : "IfStatement[26538-26605]:IfStatement[26557-26624]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26558-26605]:Block[26577-26624]"
    }, {
      "left" : "min = array[i];",
      "right" : "min = array[i];",
      "info" : "ExpressionStatement[26576-26591]:ExpressionStatement[26595-26610]"
    }, {
      "left" : "return min;",
      "right" : "return min;",
      "info" : "ReturnStatement[26629-26640]:ReturnStatement[26648-26659]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[26986-26992]:Modifier[27005-27011]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[26993-26999]:Modifier[27012-27018]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[27000-27003]:PrimitiveType[27019-27022]"
    }, {
      "left" : "min",
      "right" : "min",
      "info" : "SimpleName[27004-27007]:SimpleName[27023-27026]"
    }, {
      "left" : "int[] array",
      "right" : "int[] array",
      "info" : "SingleVariableDeclaration[27008-27019]:SingleVariableDeclaration[27027-27038]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27021-27516]:Block[27040-27535]"
    }, {
      "left" : "if (array == null)",
      "right" : "if (array == null)",
      "info" : "IfStatement[27058-27280]:IfStatement[27077-27299]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27077-27166]:Block[27096-27185]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The Array must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The Array must not be null\");",
      "info" : "ThrowStatement[27091-27156]:ThrowStatement[27110-27175]"
    }, {
      "left" : "if (array.length == 0)",
      "right" : "if (array.length == 0)",
      "info" : "IfStatement[27172-27280]:IfStatement[27191-27299]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27195-27280]:Block[27214-27299]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Array cannot be empty.\");",
      "right" : "throw new IllegalArgumentException(\"Array cannot be empty.\");",
      "info" : "ThrowStatement[27209-27270]:ThrowStatement[27228-27289]"
    }, {
      "left" : "int min = array[0];",
      "right" : "int min = array[0];",
      "info" : "VariableDeclarationStatement[27327-27346]:VariableDeclarationStatement[27346-27365]"
    }, {
      "left" : "for (int j = 1; j < array.length; j++)",
      "right" : "for (int j = 1; j < array.length; j++)",
      "info" : "ForStatement[27355-27485]:ForStatement[27374-27504]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27394-27485]:Block[27413-27504]"
    }, {
      "left" : "if (array[j] < min)",
      "right" : "if (array[j] < min)",
      "info" : "IfStatement[27408-27475]:IfStatement[27427-27494]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27428-27475]:Block[27447-27494]"
    }, {
      "left" : "min = array[j];",
      "right" : "min = array[j];",
      "info" : "ExpressionStatement[27446-27461]:ExpressionStatement[27465-27480]"
    }, {
      "left" : "return min;",
      "right" : "return min;",
      "info" : "ReturnStatement[27499-27510]:ReturnStatement[27518-27529]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[27856-27862]:Modifier[27875-27881]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[27863-27869]:Modifier[27882-27888]"
    }, {
      "left" : "short",
      "right" : "short",
      "info" : "PrimitiveType[27870-27875]:PrimitiveType[27889-27894]"
    }, {
      "left" : "min",
      "right" : "min",
      "info" : "SimpleName[27876-27879]:SimpleName[27895-27898]"
    }, {
      "left" : "short[] array",
      "right" : "short[] array",
      "info" : "SingleVariableDeclaration[27880-27893]:SingleVariableDeclaration[27899-27912]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27895-28392]:Block[27914-28411]"
    }, {
      "left" : "if (array == null)",
      "right" : "if (array == null)",
      "info" : "IfStatement[27932-28154]:IfStatement[27951-28173]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27951-28040]:Block[27970-28059]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The Array must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The Array must not be null\");",
      "info" : "ThrowStatement[27965-28030]:ThrowStatement[27984-28049]"
    }, {
      "left" : "if (array.length == 0)",
      "right" : "if (array.length == 0)",
      "info" : "IfStatement[28046-28154]:IfStatement[28065-28173]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28069-28154]:Block[28088-28173]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Array cannot be empty.\");",
      "right" : "throw new IllegalArgumentException(\"Array cannot be empty.\");",
      "info" : "ThrowStatement[28083-28144]:ThrowStatement[28102-28163]"
    }, {
      "left" : "short min = array[0];",
      "right" : "short min = array[0];",
      "info" : "VariableDeclarationStatement[28201-28222]:VariableDeclarationStatement[28220-28241]"
    }, {
      "left" : "for (int i = 1; i < array.length; i++)",
      "right" : "for (int i = 1; i < array.length; i++)",
      "info" : "ForStatement[28231-28361]:ForStatement[28250-28380]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28270-28361]:Block[28289-28380]"
    }, {
      "left" : "if (array[i] < min)",
      "right" : "if (array[i] < min)",
      "info" : "IfStatement[28284-28351]:IfStatement[28303-28370]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28304-28351]:Block[28323-28370]"
    }, {
      "left" : "min = array[i];",
      "right" : "min = array[i];",
      "info" : "ExpressionStatement[28322-28337]:ExpressionStatement[28341-28356]"
    }, {
      "left" : "return min;",
      "right" : "return min;",
      "info" : "ReturnStatement[28375-28386]:ReturnStatement[28394-28405]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[28732-28738]:Modifier[28751-28757]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[28739-28745]:Modifier[28758-28764]"
    }, {
      "left" : "byte",
      "right" : "byte",
      "info" : "PrimitiveType[28746-28750]:PrimitiveType[28765-28769]"
    }, {
      "left" : "min",
      "right" : "min",
      "info" : "SimpleName[28751-28754]:SimpleName[28770-28773]"
    }, {
      "left" : "byte[] array",
      "right" : "byte[] array",
      "info" : "SingleVariableDeclaration[28755-28767]:SingleVariableDeclaration[28774-28786]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28769-29265]:Block[28788-29284]"
    }, {
      "left" : "if (array == null)",
      "right" : "if (array == null)",
      "info" : "IfStatement[28806-29028]:IfStatement[28825-29047]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28825-28914]:Block[28844-28933]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The Array must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The Array must not be null\");",
      "info" : "ThrowStatement[28839-28904]:ThrowStatement[28858-28923]"
    }, {
      "left" : "if (array.length == 0)",
      "right" : "if (array.length == 0)",
      "info" : "IfStatement[28920-29028]:IfStatement[28939-29047]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28943-29028]:Block[28962-29047]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Array cannot be empty.\");",
      "right" : "throw new IllegalArgumentException(\"Array cannot be empty.\");",
      "info" : "ThrowStatement[28957-29018]:ThrowStatement[28976-29037]"
    }, {
      "left" : "byte min = array[0];",
      "right" : "byte min = array[0];",
      "info" : "VariableDeclarationStatement[29075-29095]:VariableDeclarationStatement[29094-29114]"
    }, {
      "left" : "for (int i = 1; i < array.length; i++)",
      "right" : "for (int i = 1; i < array.length; i++)",
      "info" : "ForStatement[29104-29234]:ForStatement[29123-29253]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29143-29234]:Block[29162-29253]"
    }, {
      "left" : "if (array[i] < min)",
      "right" : "if (array[i] < min)",
      "info" : "IfStatement[29157-29224]:IfStatement[29176-29243]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29177-29224]:Block[29196-29243]"
    }, {
      "left" : "min = array[i];",
      "right" : "min = array[i];",
      "info" : "ExpressionStatement[29195-29210]:ExpressionStatement[29214-29229]"
    }, {
      "left" : "return min;",
      "right" : "return min;",
      "info" : "ReturnStatement[29248-29259]:ReturnStatement[29267-29278]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[29718-29724]:Modifier[29737-29743]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[29725-29731]:Modifier[29744-29750]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[29732-29738]:PrimitiveType[29751-29757]"
    }, {
      "left" : "min",
      "right" : "min",
      "info" : "SimpleName[29739-29742]:SimpleName[29758-29761]"
    }, {
      "left" : "double[] array",
      "right" : "double[] array",
      "info" : "SingleVariableDeclaration[29743-29757]:SingleVariableDeclaration[29762-29776]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29759-30348]:Block[29778-30367]"
    }, {
      "left" : "if (array == null)",
      "right" : "if (array == null)",
      "info" : "IfStatement[29796-30018]:IfStatement[29815-30037]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29815-29904]:Block[29834-29923]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The Array must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The Array must not be null\");",
      "info" : "ThrowStatement[29829-29894]:ThrowStatement[29848-29913]"
    }, {
      "left" : "if (array.length == 0)",
      "right" : "if (array.length == 0)",
      "info" : "IfStatement[29910-30018]:IfStatement[29929-30037]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29933-30018]:Block[29952-30037]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Array cannot be empty.\");",
      "right" : "throw new IllegalArgumentException(\"Array cannot be empty.\");",
      "info" : "ThrowStatement[29947-30008]:ThrowStatement[29966-30027]"
    }, {
      "left" : "double min = array[0];",
      "right" : "double min = array[0];",
      "info" : "VariableDeclarationStatement[30065-30087]:VariableDeclarationStatement[30084-30106]"
    }, {
      "left" : "for (int i = 1; i < array.length; i++)",
      "right" : "for (int i = 1; i < array.length; i++)",
      "info" : "ForStatement[30096-30317]:ForStatement[30115-30336]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30135-30317]:Block[30154-30336]"
    }, {
      "left" : "if (Double.isNaN(array[i]))",
      "right" : "if (Double.isNaN(array[i]))",
      "info" : "IfStatement[30149-30227]:IfStatement[30168-30246]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30177-30227]:Block[30196-30246]"
    }, {
      "left" : "return Double.NaN;",
      "right" : "return Double.NaN;",
      "info" : "ReturnStatement[30195-30213]:ReturnStatement[30214-30232]"
    }, {
      "left" : "if (array[i] < min)",
      "right" : "if (array[i] < min)",
      "info" : "IfStatement[30240-30307]:IfStatement[30259-30326]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30260-30307]:Block[30279-30326]"
    }, {
      "left" : "min = array[i];",
      "right" : "min = array[i];",
      "info" : "ExpressionStatement[30278-30293]:ExpressionStatement[30297-30312]"
    }, {
      "left" : "return min;",
      "right" : "return min;",
      "info" : "ReturnStatement[30331-30342]:ReturnStatement[30350-30361]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[30799-30805]:Modifier[30818-30824]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[30806-30812]:Modifier[30825-30831]"
    }, {
      "left" : "float",
      "right" : "float",
      "info" : "PrimitiveType[30813-30818]:PrimitiveType[30832-30837]"
    }, {
      "left" : "min",
      "right" : "min",
      "info" : "SimpleName[30819-30822]:SimpleName[30838-30841]"
    }, {
      "left" : "float[] array",
      "right" : "float[] array",
      "info" : "SingleVariableDeclaration[30823-30836]:SingleVariableDeclaration[30842-30855]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30838-31424]:Block[30857-31443]"
    }, {
      "left" : "if (array == null)",
      "right" : "if (array == null)",
      "info" : "IfStatement[30875-31097]:IfStatement[30894-31116]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30894-30983]:Block[30913-31002]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The Array must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The Array must not be null\");",
      "info" : "ThrowStatement[30908-30973]:ThrowStatement[30927-30992]"
    }, {
      "left" : "if (array.length == 0)",
      "right" : "if (array.length == 0)",
      "info" : "IfStatement[30989-31097]:IfStatement[31008-31116]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31012-31097]:Block[31031-31116]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Array cannot be empty.\");",
      "right" : "throw new IllegalArgumentException(\"Array cannot be empty.\");",
      "info" : "ThrowStatement[31026-31087]:ThrowStatement[31045-31106]"
    }, {
      "left" : "float min = array[0];",
      "right" : "float min = array[0];",
      "info" : "VariableDeclarationStatement[31144-31165]:VariableDeclarationStatement[31163-31184]"
    }, {
      "left" : "for (int i = 1; i < array.length; i++)",
      "right" : "for (int i = 1; i < array.length; i++)",
      "info" : "ForStatement[31174-31393]:ForStatement[31193-31412]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31213-31393]:Block[31232-31412]"
    }, {
      "left" : "if (Float.isNaN(array[i]))",
      "right" : "if (Float.isNaN(array[i]))",
      "info" : "IfStatement[31227-31303]:IfStatement[31246-31322]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31254-31303]:Block[31273-31322]"
    }, {
      "left" : "return Float.NaN;",
      "right" : "return Float.NaN;",
      "info" : "ReturnStatement[31272-31289]:ReturnStatement[31291-31308]"
    }, {
      "left" : "if (array[i] < min)",
      "right" : "if (array[i] < min)",
      "info" : "IfStatement[31316-31383]:IfStatement[31335-31402]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31336-31383]:Block[31355-31402]"
    }, {
      "left" : "min = array[i];",
      "right" : "min = array[i];",
      "info" : "ExpressionStatement[31354-31369]:ExpressionStatement[31373-31388]"
    }, {
      "left" : "return min;",
      "right" : "return min;",
      "info" : "ReturnStatement[31407-31418]:ReturnStatement[31426-31437]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[31859-31865]:Modifier[31878-31884]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[31866-31872]:Modifier[31885-31891]"
    }, {
      "left" : "long",
      "right" : "long",
      "info" : "PrimitiveType[31873-31877]:PrimitiveType[31892-31896]"
    }, {
      "left" : "max",
      "right" : "max",
      "info" : "SimpleName[31878-31881]:SimpleName[31897-31900]"
    }, {
      "left" : "long[] array",
      "right" : "long[] array",
      "info" : "SingleVariableDeclaration[31882-31894]:SingleVariableDeclaration[31901-31913]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31896-32384]:Block[31915-32403]"
    }, {
      "left" : "if (array == null)",
      "right" : "if (array == null)",
      "info" : "IfStatement[31933-32155]:IfStatement[31952-32174]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31952-32041]:Block[31971-32060]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The Array must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The Array must not be null\");",
      "info" : "ThrowStatement[31966-32031]:ThrowStatement[31985-32050]"
    }, {
      "left" : "if (array.length == 0)",
      "right" : "if (array.length == 0)",
      "info" : "IfStatement[32047-32155]:IfStatement[32066-32174]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32070-32155]:Block[32089-32174]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Array cannot be empty.\");",
      "right" : "throw new IllegalArgumentException(\"Array cannot be empty.\");",
      "info" : "ThrowStatement[32084-32145]:ThrowStatement[32103-32164]"
    }, {
      "left" : "long max = array[0];",
      "right" : "long max = array[0];",
      "info" : "VariableDeclarationStatement[32198-32218]:VariableDeclarationStatement[32217-32237]"
    }, {
      "left" : "for (int j = 1; j < array.length; j++)",
      "right" : "for (int j = 1; j < array.length; j++)",
      "info" : "ForStatement[32227-32357]:ForStatement[32246-32376]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32266-32357]:Block[32285-32376]"
    }, {
      "left" : "if (array[j] > max)",
      "right" : "if (array[j] > max)",
      "info" : "IfStatement[32280-32347]:IfStatement[32299-32366]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32300-32347]:Block[32319-32366]"
    }, {
      "left" : "max = array[j];",
      "right" : "max = array[j];",
      "info" : "ExpressionStatement[32318-32333]:ExpressionStatement[32337-32352]"
    }, {
      "left" : "return max;",
      "right" : "return max;",
      "info" : "ReturnStatement[32367-32378]:ReturnStatement[32386-32397]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[32724-32730]:Modifier[32743-32749]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[32731-32737]:Modifier[32750-32756]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[32738-32741]:PrimitiveType[32757-32760]"
    }, {
      "left" : "max",
      "right" : "max",
      "info" : "SimpleName[32742-32745]:SimpleName[32761-32764]"
    }, {
      "left" : "int[] array",
      "right" : "int[] array",
      "info" : "SingleVariableDeclaration[32746-32757]:SingleVariableDeclaration[32765-32776]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32759-33254]:Block[32778-33273]"
    }, {
      "left" : "if (array == null)",
      "right" : "if (array == null)",
      "info" : "IfStatement[32796-33018]:IfStatement[32815-33037]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32815-32904]:Block[32834-32923]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The Array must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The Array must not be null\");",
      "info" : "ThrowStatement[32829-32894]:ThrowStatement[32848-32913]"
    }, {
      "left" : "if (array.length == 0)",
      "right" : "if (array.length == 0)",
      "info" : "IfStatement[32910-33018]:IfStatement[32929-33037]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32933-33018]:Block[32952-33037]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Array cannot be empty.\");",
      "right" : "throw new IllegalArgumentException(\"Array cannot be empty.\");",
      "info" : "ThrowStatement[32947-33008]:ThrowStatement[32966-33027]"
    }, {
      "left" : "int max = array[0];",
      "right" : "int max = array[0];",
      "info" : "VariableDeclarationStatement[33065-33084]:VariableDeclarationStatement[33084-33103]"
    }, {
      "left" : "for (int j = 1; j < array.length; j++)",
      "right" : "for (int j = 1; j < array.length; j++)",
      "info" : "ForStatement[33093-33223]:ForStatement[33112-33242]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33132-33223]:Block[33151-33242]"
    }, {
      "left" : "if (array[j] > max)",
      "right" : "if (array[j] > max)",
      "info" : "IfStatement[33146-33213]:IfStatement[33165-33232]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33166-33213]:Block[33185-33232]"
    }, {
      "left" : "max = array[j];",
      "right" : "max = array[j];",
      "info" : "ExpressionStatement[33184-33199]:ExpressionStatement[33203-33218]"
    }, {
      "left" : "return max;",
      "right" : "return max;",
      "info" : "ReturnStatement[33237-33248]:ReturnStatement[33256-33267]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[33594-33600]:Modifier[33613-33619]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[33601-33607]:Modifier[33620-33626]"
    }, {
      "left" : "short",
      "right" : "short",
      "info" : "PrimitiveType[33608-33613]:PrimitiveType[33627-33632]"
    }, {
      "left" : "max",
      "right" : "max",
      "info" : "SimpleName[33614-33617]:SimpleName[33633-33636]"
    }, {
      "left" : "short[] array",
      "right" : "short[] array",
      "info" : "SingleVariableDeclaration[33618-33631]:SingleVariableDeclaration[33637-33650]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33633-34130]:Block[33652-34149]"
    }, {
      "left" : "if (array == null)",
      "right" : "if (array == null)",
      "info" : "IfStatement[33670-33892]:IfStatement[33689-33911]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33689-33778]:Block[33708-33797]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The Array must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The Array must not be null\");",
      "info" : "ThrowStatement[33703-33768]:ThrowStatement[33722-33787]"
    }, {
      "left" : "if (array.length == 0)",
      "right" : "if (array.length == 0)",
      "info" : "IfStatement[33784-33892]:IfStatement[33803-33911]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33807-33892]:Block[33826-33911]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Array cannot be empty.\");",
      "right" : "throw new IllegalArgumentException(\"Array cannot be empty.\");",
      "info" : "ThrowStatement[33821-33882]:ThrowStatement[33840-33901]"
    }, {
      "left" : "short max = array[0];",
      "right" : "short max = array[0];",
      "info" : "VariableDeclarationStatement[33939-33960]:VariableDeclarationStatement[33958-33979]"
    }, {
      "left" : "for (int i = 1; i < array.length; i++)",
      "right" : "for (int i = 1; i < array.length; i++)",
      "info" : "ForStatement[33969-34099]:ForStatement[33988-34118]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34008-34099]:Block[34027-34118]"
    }, {
      "left" : "if (array[i] > max)",
      "right" : "if (array[i] > max)",
      "info" : "IfStatement[34022-34089]:IfStatement[34041-34108]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34042-34089]:Block[34061-34108]"
    }, {
      "left" : "max = array[i];",
      "right" : "max = array[i];",
      "info" : "ExpressionStatement[34060-34075]:ExpressionStatement[34079-34094]"
    }, {
      "left" : "return max;",
      "right" : "return max;",
      "info" : "ReturnStatement[34113-34124]:ReturnStatement[34132-34143]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[34470-34476]:Modifier[34489-34495]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[34477-34483]:Modifier[34496-34502]"
    }, {
      "left" : "byte",
      "right" : "byte",
      "info" : "PrimitiveType[34484-34488]:PrimitiveType[34503-34507]"
    }, {
      "left" : "max",
      "right" : "max",
      "info" : "SimpleName[34489-34492]:SimpleName[34508-34511]"
    }, {
      "left" : "byte[] array",
      "right" : "byte[] array",
      "info" : "SingleVariableDeclaration[34493-34505]:SingleVariableDeclaration[34512-34524]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34507-35003]:Block[34526-35022]"
    }, {
      "left" : "if (array == null)",
      "right" : "if (array == null)",
      "info" : "IfStatement[34544-34766]:IfStatement[34563-34785]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34563-34652]:Block[34582-34671]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The Array must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The Array must not be null\");",
      "info" : "ThrowStatement[34577-34642]:ThrowStatement[34596-34661]"
    }, {
      "left" : "if (array.length == 0)",
      "right" : "if (array.length == 0)",
      "info" : "IfStatement[34658-34766]:IfStatement[34677-34785]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34681-34766]:Block[34700-34785]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Array cannot be empty.\");",
      "right" : "throw new IllegalArgumentException(\"Array cannot be empty.\");",
      "info" : "ThrowStatement[34695-34756]:ThrowStatement[34714-34775]"
    }, {
      "left" : "byte max = array[0];",
      "right" : "byte max = array[0];",
      "info" : "VariableDeclarationStatement[34813-34833]:VariableDeclarationStatement[34832-34852]"
    }, {
      "left" : "for (int i = 1; i < array.length; i++)",
      "right" : "for (int i = 1; i < array.length; i++)",
      "info" : "ForStatement[34842-34972]:ForStatement[34861-34991]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34881-34972]:Block[34900-34991]"
    }, {
      "left" : "if (array[i] > max)",
      "right" : "if (array[i] > max)",
      "info" : "IfStatement[34895-34962]:IfStatement[34914-34981]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34915-34962]:Block[34934-34981]"
    }, {
      "left" : "max = array[i];",
      "right" : "max = array[i];",
      "info" : "ExpressionStatement[34933-34948]:ExpressionStatement[34952-34967]"
    }, {
      "left" : "return max;",
      "right" : "return max;",
      "info" : "ReturnStatement[34986-34997]:ReturnStatement[35005-35016]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[35455-35461]:Modifier[35474-35480]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[35462-35468]:Modifier[35481-35487]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[35469-35475]:PrimitiveType[35488-35494]"
    }, {
      "left" : "max",
      "right" : "max",
      "info" : "SimpleName[35476-35479]:SimpleName[35495-35498]"
    }, {
      "left" : "double[] array",
      "right" : "double[] array",
      "info" : "SingleVariableDeclaration[35480-35494]:SingleVariableDeclaration[35499-35513]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35496-36084]:Block[35515-36103]"
    }, {
      "left" : "if (array== null)",
      "right" : "if (array== null)",
      "info" : "IfStatement[35533-35754]:IfStatement[35552-35773]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35551-35640]:Block[35570-35659]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The Array must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The Array must not be null\");",
      "info" : "ThrowStatement[35565-35630]:ThrowStatement[35584-35649]"
    }, {
      "left" : "if (array.length == 0)",
      "right" : "if (array.length == 0)",
      "info" : "IfStatement[35646-35754]:IfStatement[35665-35773]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35669-35754]:Block[35688-35773]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Array cannot be empty.\");",
      "right" : "throw new IllegalArgumentException(\"Array cannot be empty.\");",
      "info" : "ThrowStatement[35683-35744]:ThrowStatement[35702-35763]"
    }, {
      "left" : "double max = array[0];",
      "right" : "double max = array[0];",
      "info" : "VariableDeclarationStatement[35801-35823]:VariableDeclarationStatement[35820-35842]"
    }, {
      "left" : "for (int j = 1; j < array.length; j++)",
      "right" : "for (int j = 1; j < array.length; j++)",
      "info" : "ForStatement[35832-36053]:ForStatement[35851-36072]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35871-36053]:Block[35890-36072]"
    }, {
      "left" : "if (Double.isNaN(array[j]))",
      "right" : "if (Double.isNaN(array[j]))",
      "info" : "IfStatement[35885-35963]:IfStatement[35904-35982]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35913-35963]:Block[35932-35982]"
    }, {
      "left" : "return Double.NaN;",
      "right" : "return Double.NaN;",
      "info" : "ReturnStatement[35931-35949]:ReturnStatement[35950-35968]"
    }, {
      "left" : "if (array[j] > max)",
      "right" : "if (array[j] > max)",
      "info" : "IfStatement[35976-36043]:IfStatement[35995-36062]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35996-36043]:Block[36015-36062]"
    }, {
      "left" : "max = array[j];",
      "right" : "max = array[j];",
      "info" : "ExpressionStatement[36014-36029]:ExpressionStatement[36033-36048]"
    }, {
      "left" : "return max;",
      "right" : "return max;",
      "info" : "ReturnStatement[36067-36078]:ReturnStatement[36086-36097]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[36535-36541]:Modifier[36554-36560]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[36542-36548]:Modifier[36561-36567]"
    }, {
      "left" : "float",
      "right" : "float",
      "info" : "PrimitiveType[36549-36554]:PrimitiveType[36568-36573]"
    }, {
      "left" : "max",
      "right" : "max",
      "info" : "SimpleName[36555-36558]:SimpleName[36574-36577]"
    }, {
      "left" : "float[] array",
      "right" : "float[] array",
      "info" : "SingleVariableDeclaration[36559-36572]:SingleVariableDeclaration[36578-36591]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36574-37152]:Block[36593-37171]"
    }, {
      "left" : "if (array == null)",
      "right" : "if (array == null)",
      "info" : "IfStatement[36611-36833]:IfStatement[36630-36852]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36630-36719]:Block[36649-36738]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The Array must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The Array must not be null\");",
      "info" : "ThrowStatement[36644-36709]:ThrowStatement[36663-36728]"
    }, {
      "left" : "if (array.length == 0)",
      "right" : "if (array.length == 0)",
      "info" : "IfStatement[36725-36833]:IfStatement[36744-36852]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36748-36833]:Block[36767-36852]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Array cannot be empty.\");",
      "right" : "throw new IllegalArgumentException(\"Array cannot be empty.\");",
      "info" : "ThrowStatement[36762-36823]:ThrowStatement[36781-36842]"
    }, {
      "left" : "float max = array[0];",
      "right" : "float max = array[0];",
      "info" : "VariableDeclarationStatement[36876-36897]:VariableDeclarationStatement[36895-36916]"
    }, {
      "left" : "for (int j = 1; j < array.length; j++)",
      "right" : "for (int j = 1; j < array.length; j++)",
      "info" : "ForStatement[36906-37125]:ForStatement[36925-37144]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36945-37125]:Block[36964-37144]"
    }, {
      "left" : "if (Float.isNaN(array[j]))",
      "right" : "if (Float.isNaN(array[j]))",
      "info" : "IfStatement[36959-37035]:IfStatement[36978-37054]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36986-37035]:Block[37005-37054]"
    }, {
      "left" : "return Float.NaN;",
      "right" : "return Float.NaN;",
      "info" : "ReturnStatement[37004-37021]:ReturnStatement[37023-37040]"
    }, {
      "left" : "if (array[j] > max)",
      "right" : "if (array[j] > max)",
      "info" : "IfStatement[37048-37115]:IfStatement[37067-37134]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37068-37115]:Block[37087-37134]"
    }, {
      "left" : "max = array[j];",
      "right" : "max = array[j];",
      "info" : "ExpressionStatement[37086-37101]:ExpressionStatement[37105-37120]"
    }, {
      "left" : "return max;",
      "right" : "return max;",
      "info" : "ReturnStatement[37135-37146]:ReturnStatement[37154-37165]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[37468-37474]:Modifier[37487-37493]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[37475-37481]:Modifier[37494-37500]"
    }, {
      "left" : "long",
      "right" : "long",
      "info" : "PrimitiveType[37482-37486]:PrimitiveType[37501-37505]"
    }, {
      "left" : "min",
      "right" : "min",
      "info" : "SimpleName[37487-37490]:SimpleName[37506-37509]"
    }, {
      "left" : "long a",
      "right" : "long a",
      "info" : "SingleVariableDeclaration[37491-37497]:SingleVariableDeclaration[37510-37516]"
    }, {
      "left" : "long b",
      "right" : "long b",
      "info" : "SingleVariableDeclaration[37499-37505]:SingleVariableDeclaration[37518-37524]"
    }, {
      "left" : "long c",
      "right" : "long c",
      "info" : "SingleVariableDeclaration[37507-37513]:SingleVariableDeclaration[37526-37532]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37515-37640]:Block[37534-37659]"
    }, {
      "left" : "if (b < a)",
      "right" : "if (b < a)",
      "info" : "IfStatement[37525-37566]:IfStatement[37544-37585]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37536-37566]:Block[37555-37585]"
    }, {
      "left" : "a = b;",
      "right" : "a = b;",
      "info" : "ExpressionStatement[37550-37556]:ExpressionStatement[37569-37575]"
    }, {
      "left" : "if (c < a)",
      "right" : "if (c < a)",
      "info" : "IfStatement[37575-37616]:IfStatement[37594-37635]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37586-37616]:Block[37605-37635]"
    }, {
      "left" : "a = c;",
      "right" : "a = c;",
      "info" : "ExpressionStatement[37600-37606]:ExpressionStatement[37619-37625]"
    }, {
      "left" : "return a;",
      "right" : "return a;",
      "info" : "ReturnStatement[37625-37634]:ReturnStatement[37644-37653]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[37853-37859]:Modifier[37872-37878]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[37860-37866]:Modifier[37879-37885]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[37867-37870]:PrimitiveType[37886-37889]"
    }, {
      "left" : "min",
      "right" : "min",
      "info" : "SimpleName[37871-37874]:SimpleName[37890-37893]"
    }, {
      "left" : "int a",
      "right" : "int a",
      "info" : "SingleVariableDeclaration[37875-37880]:SingleVariableDeclaration[37894-37899]"
    }, {
      "left" : "int b",
      "right" : "int b",
      "info" : "SingleVariableDeclaration[37882-37887]:SingleVariableDeclaration[37901-37906]"
    }, {
      "left" : "int c",
      "right" : "int c",
      "info" : "SingleVariableDeclaration[37889-37894]:SingleVariableDeclaration[37908-37913]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37896-38021]:Block[37915-38040]"
    }, {
      "left" : "if (b < a)",
      "right" : "if (b < a)",
      "info" : "IfStatement[37906-37947]:IfStatement[37925-37966]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37917-37947]:Block[37936-37966]"
    }, {
      "left" : "a = b;",
      "right" : "a = b;",
      "info" : "ExpressionStatement[37931-37937]:ExpressionStatement[37950-37956]"
    }, {
      "left" : "if (c < a)",
      "right" : "if (c < a)",
      "info" : "IfStatement[37956-37997]:IfStatement[37975-38016]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37967-37997]:Block[37986-38016]"
    }, {
      "left" : "a = c;",
      "right" : "a = c;",
      "info" : "ExpressionStatement[37981-37987]:ExpressionStatement[38000-38006]"
    }, {
      "left" : "return a;",
      "right" : "return a;",
      "info" : "ReturnStatement[38006-38015]:ReturnStatement[38025-38034]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[38236-38242]:Modifier[38255-38261]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[38243-38249]:Modifier[38262-38268]"
    }, {
      "left" : "short",
      "right" : "short",
      "info" : "PrimitiveType[38250-38255]:PrimitiveType[38269-38274]"
    }, {
      "left" : "min",
      "right" : "min",
      "info" : "SimpleName[38256-38259]:SimpleName[38275-38278]"
    }, {
      "left" : "short a",
      "right" : "short a",
      "info" : "SingleVariableDeclaration[38260-38267]:SingleVariableDeclaration[38279-38286]"
    }, {
      "left" : "short b",
      "right" : "short b",
      "info" : "SingleVariableDeclaration[38269-38276]:SingleVariableDeclaration[38288-38295]"
    }, {
      "left" : "short c",
      "right" : "short c",
      "info" : "SingleVariableDeclaration[38278-38285]:SingleVariableDeclaration[38297-38304]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38287-38412]:Block[38306-38431]"
    }, {
      "left" : "if (b < a)",
      "right" : "if (b < a)",
      "info" : "IfStatement[38297-38338]:IfStatement[38316-38357]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38308-38338]:Block[38327-38357]"
    }, {
      "left" : "a = b;",
      "right" : "a = b;",
      "info" : "ExpressionStatement[38322-38328]:ExpressionStatement[38341-38347]"
    }, {
      "left" : "if (c < a)",
      "right" : "if (c < a)",
      "info" : "IfStatement[38347-38388]:IfStatement[38366-38407]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38358-38388]:Block[38377-38407]"
    }, {
      "left" : "a = c;",
      "right" : "a = c;",
      "info" : "ExpressionStatement[38372-38378]:ExpressionStatement[38391-38397]"
    }, {
      "left" : "return a;",
      "right" : "return a;",
      "info" : "ReturnStatement[38397-38406]:ReturnStatement[38416-38425]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[38626-38632]:Modifier[38645-38651]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[38633-38639]:Modifier[38652-38658]"
    }, {
      "left" : "byte",
      "right" : "byte",
      "info" : "PrimitiveType[38640-38644]:PrimitiveType[38659-38663]"
    }, {
      "left" : "min",
      "right" : "min",
      "info" : "SimpleName[38645-38648]:SimpleName[38664-38667]"
    }, {
      "left" : "byte a",
      "right" : "byte a",
      "info" : "SingleVariableDeclaration[38649-38655]:SingleVariableDeclaration[38668-38674]"
    }, {
      "left" : "byte b",
      "right" : "byte b",
      "info" : "SingleVariableDeclaration[38657-38663]:SingleVariableDeclaration[38676-38682]"
    }, {
      "left" : "byte c",
      "right" : "byte c",
      "info" : "SingleVariableDeclaration[38665-38671]:SingleVariableDeclaration[38684-38690]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38673-38798]:Block[38692-38817]"
    }, {
      "left" : "if (b < a)",
      "right" : "if (b < a)",
      "info" : "IfStatement[38683-38724]:IfStatement[38702-38743]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38694-38724]:Block[38713-38743]"
    }, {
      "left" : "a = b;",
      "right" : "a = b;",
      "info" : "ExpressionStatement[38708-38714]:ExpressionStatement[38727-38733]"
    }, {
      "left" : "if (c < a)",
      "right" : "if (c < a)",
      "info" : "IfStatement[38733-38774]:IfStatement[38752-38793]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38744-38774]:Block[38763-38793]"
    }, {
      "left" : "a = c;",
      "right" : "a = c;",
      "info" : "ExpressionStatement[38758-38764]:ExpressionStatement[38777-38783]"
    }, {
      "left" : "return a;",
      "right" : "return a;",
      "info" : "ReturnStatement[38783-38792]:ReturnStatement[38802-38811]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[39240-39246]:Modifier[39259-39265]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[39247-39253]:Modifier[39266-39272]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[39254-39260]:PrimitiveType[39273-39279]"
    }, {
      "left" : "min",
      "right" : "min",
      "info" : "SimpleName[39261-39264]:SimpleName[39280-39283]"
    }, {
      "left" : "double a",
      "right" : "double a",
      "info" : "SingleVariableDeclaration[39265-39273]:SingleVariableDeclaration[39284-39292]"
    }, {
      "left" : "double b",
      "right" : "double b",
      "info" : "SingleVariableDeclaration[39275-39283]:SingleVariableDeclaration[39294-39302]"
    }, {
      "left" : "double c",
      "right" : "double c",
      "info" : "SingleVariableDeclaration[39285-39293]:SingleVariableDeclaration[39304-39312]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39295-39346]:Block[39314-39365]"
    }, {
      "left" : "return Math.min(Math.min(a, b), c);",
      "right" : "return Math.min(Math.min(a, b), c);",
      "info" : "ReturnStatement[39305-39340]:ReturnStatement[39324-39359]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[39783-39789]:Modifier[39802-39808]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[39790-39796]:Modifier[39809-39815]"
    }, {
      "left" : "float",
      "right" : "float",
      "info" : "PrimitiveType[39797-39802]:PrimitiveType[39816-39821]"
    }, {
      "left" : "min",
      "right" : "min",
      "info" : "SimpleName[39803-39806]:SimpleName[39822-39825]"
    }, {
      "left" : "float a",
      "right" : "float a",
      "info" : "SingleVariableDeclaration[39807-39814]:SingleVariableDeclaration[39826-39833]"
    }, {
      "left" : "float b",
      "right" : "float b",
      "info" : "SingleVariableDeclaration[39816-39823]:SingleVariableDeclaration[39835-39842]"
    }, {
      "left" : "float c",
      "right" : "float c",
      "info" : "SingleVariableDeclaration[39825-39832]:SingleVariableDeclaration[39844-39851]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39834-39885]:Block[39853-39904]"
    }, {
      "left" : "return Math.min(Math.min(a, b), c);",
      "right" : "return Math.min(Math.min(a, b), c);",
      "info" : "ReturnStatement[39844-39879]:ReturnStatement[39863-39898]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[40195-40201]:Modifier[40214-40220]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[40202-40208]:Modifier[40221-40227]"
    }, {
      "left" : "long",
      "right" : "long",
      "info" : "PrimitiveType[40209-40213]:PrimitiveType[40228-40232]"
    }, {
      "left" : "max",
      "right" : "max",
      "info" : "SimpleName[40214-40217]:SimpleName[40233-40236]"
    }, {
      "left" : "long a",
      "right" : "long a",
      "info" : "SingleVariableDeclaration[40218-40224]:SingleVariableDeclaration[40237-40243]"
    }, {
      "left" : "long b",
      "right" : "long b",
      "info" : "SingleVariableDeclaration[40226-40232]:SingleVariableDeclaration[40245-40251]"
    }, {
      "left" : "long c",
      "right" : "long c",
      "info" : "SingleVariableDeclaration[40234-40240]:SingleVariableDeclaration[40253-40259]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40242-40367]:Block[40261-40386]"
    }, {
      "left" : "if (b > a)",
      "right" : "if (b > a)",
      "info" : "IfStatement[40252-40293]:IfStatement[40271-40312]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40263-40293]:Block[40282-40312]"
    }, {
      "left" : "a = b;",
      "right" : "a = b;",
      "info" : "ExpressionStatement[40277-40283]:ExpressionStatement[40296-40302]"
    }, {
      "left" : "if (c > a)",
      "right" : "if (c > a)",
      "info" : "IfStatement[40302-40343]:IfStatement[40321-40362]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40313-40343]:Block[40332-40362]"
    }, {
      "left" : "a = c;",
      "right" : "a = c;",
      "info" : "ExpressionStatement[40327-40333]:ExpressionStatement[40346-40352]"
    }, {
      "left" : "return a;",
      "right" : "return a;",
      "info" : "ReturnStatement[40352-40361]:ReturnStatement[40371-40380]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[40579-40585]:Modifier[40598-40604]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[40586-40592]:Modifier[40605-40611]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[40593-40596]:PrimitiveType[40612-40615]"
    }, {
      "left" : "max",
      "right" : "max",
      "info" : "SimpleName[40597-40600]:SimpleName[40616-40619]"
    }, {
      "left" : "int a",
      "right" : "int a",
      "info" : "SingleVariableDeclaration[40601-40606]:SingleVariableDeclaration[40620-40625]"
    }, {
      "left" : "int b",
      "right" : "int b",
      "info" : "SingleVariableDeclaration[40608-40613]:SingleVariableDeclaration[40627-40632]"
    }, {
      "left" : "int c",
      "right" : "int c",
      "info" : "SingleVariableDeclaration[40615-40620]:SingleVariableDeclaration[40634-40639]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40622-40747]:Block[40641-40766]"
    }, {
      "left" : "if (b > a)",
      "right" : "if (b > a)",
      "info" : "IfStatement[40632-40673]:IfStatement[40651-40692]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40643-40673]:Block[40662-40692]"
    }, {
      "left" : "a = b;",
      "right" : "a = b;",
      "info" : "ExpressionStatement[40657-40663]:ExpressionStatement[40676-40682]"
    }, {
      "left" : "if (c > a)",
      "right" : "if (c > a)",
      "info" : "IfStatement[40682-40723]:IfStatement[40701-40742]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40693-40723]:Block[40712-40742]"
    }, {
      "left" : "a = c;",
      "right" : "a = c;",
      "info" : "ExpressionStatement[40707-40713]:ExpressionStatement[40726-40732]"
    }, {
      "left" : "return a;",
      "right" : "return a;",
      "info" : "ReturnStatement[40732-40741]:ReturnStatement[40751-40760]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[40961-40967]:Modifier[40980-40986]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[40968-40974]:Modifier[40987-40993]"
    }, {
      "left" : "short",
      "right" : "short",
      "info" : "PrimitiveType[40975-40980]:PrimitiveType[40994-40999]"
    }, {
      "left" : "max",
      "right" : "max",
      "info" : "SimpleName[40981-40984]:SimpleName[41000-41003]"
    }, {
      "left" : "short a",
      "right" : "short a",
      "info" : "SingleVariableDeclaration[40985-40992]:SingleVariableDeclaration[41004-41011]"
    }, {
      "left" : "short b",
      "right" : "short b",
      "info" : "SingleVariableDeclaration[40994-41001]:SingleVariableDeclaration[41013-41020]"
    }, {
      "left" : "short c",
      "right" : "short c",
      "info" : "SingleVariableDeclaration[41003-41010]:SingleVariableDeclaration[41022-41029]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41012-41137]:Block[41031-41156]"
    }, {
      "left" : "if (b > a)",
      "right" : "if (b > a)",
      "info" : "IfStatement[41022-41063]:IfStatement[41041-41082]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41033-41063]:Block[41052-41082]"
    }, {
      "left" : "a = b;",
      "right" : "a = b;",
      "info" : "ExpressionStatement[41047-41053]:ExpressionStatement[41066-41072]"
    }, {
      "left" : "if (c > a)",
      "right" : "if (c > a)",
      "info" : "IfStatement[41072-41113]:IfStatement[41091-41132]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41083-41113]:Block[41102-41132]"
    }, {
      "left" : "a = c;",
      "right" : "a = c;",
      "info" : "ExpressionStatement[41097-41103]:ExpressionStatement[41116-41122]"
    }, {
      "left" : "return a;",
      "right" : "return a;",
      "info" : "ReturnStatement[41122-41131]:ReturnStatement[41141-41150]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[41350-41356]:Modifier[41369-41375]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[41357-41363]:Modifier[41376-41382]"
    }, {
      "left" : "byte",
      "right" : "byte",
      "info" : "PrimitiveType[41364-41368]:PrimitiveType[41383-41387]"
    }, {
      "left" : "max",
      "right" : "max",
      "info" : "SimpleName[41369-41372]:SimpleName[41388-41391]"
    }, {
      "left" : "byte a",
      "right" : "byte a",
      "info" : "SingleVariableDeclaration[41373-41379]:SingleVariableDeclaration[41392-41398]"
    }, {
      "left" : "byte b",
      "right" : "byte b",
      "info" : "SingleVariableDeclaration[41381-41387]:SingleVariableDeclaration[41400-41406]"
    }, {
      "left" : "byte c",
      "right" : "byte c",
      "info" : "SingleVariableDeclaration[41389-41395]:SingleVariableDeclaration[41408-41414]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41397-41522]:Block[41416-41541]"
    }, {
      "left" : "if (b > a)",
      "right" : "if (b > a)",
      "info" : "IfStatement[41407-41448]:IfStatement[41426-41467]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41418-41448]:Block[41437-41467]"
    }, {
      "left" : "a = b;",
      "right" : "a = b;",
      "info" : "ExpressionStatement[41432-41438]:ExpressionStatement[41451-41457]"
    }, {
      "left" : "if (c > a)",
      "right" : "if (c > a)",
      "info" : "IfStatement[41457-41498]:IfStatement[41476-41517]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41468-41498]:Block[41487-41517]"
    }, {
      "left" : "a = c;",
      "right" : "a = c;",
      "info" : "ExpressionStatement[41482-41488]:ExpressionStatement[41501-41507]"
    }, {
      "left" : "return a;",
      "right" : "return a;",
      "info" : "ReturnStatement[41507-41516]:ReturnStatement[41526-41535]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[41962-41968]:Modifier[41981-41987]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[41969-41975]:Modifier[41988-41994]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[41976-41982]:PrimitiveType[41995-42001]"
    }, {
      "left" : "max",
      "right" : "max",
      "info" : "SimpleName[41983-41986]:SimpleName[42002-42005]"
    }, {
      "left" : "double a",
      "right" : "double a",
      "info" : "SingleVariableDeclaration[41987-41995]:SingleVariableDeclaration[42006-42014]"
    }, {
      "left" : "double b",
      "right" : "double b",
      "info" : "SingleVariableDeclaration[41997-42005]:SingleVariableDeclaration[42016-42024]"
    }, {
      "left" : "double c",
      "right" : "double c",
      "info" : "SingleVariableDeclaration[42007-42015]:SingleVariableDeclaration[42026-42034]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42017-42068]:Block[42036-42087]"
    }, {
      "left" : "return Math.max(Math.max(a, b), c);",
      "right" : "return Math.max(Math.max(a, b), c);",
      "info" : "ReturnStatement[42027-42062]:ReturnStatement[42046-42081]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[42504-42510]:Modifier[42523-42529]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[42511-42517]:Modifier[42530-42536]"
    }, {
      "left" : "float",
      "right" : "float",
      "info" : "PrimitiveType[42518-42523]:PrimitiveType[42537-42542]"
    }, {
      "left" : "max",
      "right" : "max",
      "info" : "SimpleName[42524-42527]:SimpleName[42543-42546]"
    }, {
      "left" : "float a",
      "right" : "float a",
      "info" : "SingleVariableDeclaration[42528-42535]:SingleVariableDeclaration[42547-42554]"
    }, {
      "left" : "float b",
      "right" : "float b",
      "info" : "SingleVariableDeclaration[42537-42544]:SingleVariableDeclaration[42556-42563]"
    }, {
      "left" : "float c",
      "right" : "float c",
      "info" : "SingleVariableDeclaration[42546-42553]:SingleVariableDeclaration[42565-42572]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42555-42606]:Block[42574-42625]"
    }, {
      "left" : "return Math.max(Math.max(a, b), c);",
      "right" : "return Math.max(Math.max(a, b), c);",
      "info" : "ReturnStatement[42565-42600]:ReturnStatement[42584-42619]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[43022-43028]:Modifier[43041-43047]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[43029-43035]:Modifier[43048-43054]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[43036-43043]:PrimitiveType[43055-43062]"
    }, {
      "left" : "isDigits",
      "right" : "isDigits",
      "info" : "SimpleName[43044-43052]:SimpleName[43063-43071]"
    }, {
      "left" : "String str",
      "right" : "String str",
      "info" : "SingleVariableDeclaration[43053-43063]:SingleVariableDeclaration[43072-43082]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43065-43325]:Block[43084-43344]"
    }, {
      "left" : "if (StringUtils.isEmpty(str))",
      "right" : "if (StringUtils.isEmpty(str))",
      "info" : "IfStatement[43075-43142]:IfStatement[43094-43161]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43105-43142]:Block[43124-43161]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[43119-43132]:ReturnStatement[43138-43151]"
    }, {
      "left" : "for (int i = 0; i < str.length(); i++)",
      "right" : "for (int i = 0; i < str.length(); i++)",
      "info" : "ForStatement[43151-43298]:ForStatement[43170-43317]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43190-43298]:Block[43209-43317]"
    }, {
      "left" : "if (!Character.isDigit(str.charAt(i)))",
      "right" : "if (!Character.isDigit(str.charAt(i)))",
      "info" : "IfStatement[43204-43288]:IfStatement[43223-43307]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43243-43288]:Block[43262-43307]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[43261-43274]:ReturnStatement[43280-43293]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[43307-43319]:ReturnStatement[43326-43338]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[43827-43833]:Modifier[43846-43852]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[43834-43840]:Modifier[43853-43859]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[43841-43848]:PrimitiveType[43860-43867]"
    }, {
      "left" : "isNumber",
      "right" : "isNumber",
      "info" : "SimpleName[43849-43857]:SimpleName[43868-43876]"
    }, {
      "left" : "String str",
      "right" : "String str",
      "info" : "SingleVariableDeclaration[43858-43868]:SingleVariableDeclaration[43877-43887]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43870-47347]:Block[43889-47682]"
    }, {
      "left" : "if (StringUtils.isEmpty(str))",
      "right" : "if (StringUtils.isEmpty(str))",
      "info" : "IfStatement[43880-43947]:IfStatement[43899-43966]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43910-43947]:Block[43929-43966]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[43924-43937]:ReturnStatement[43943-43956]"
    }, {
      "left" : "char[] chars = str.toCharArray();",
      "right" : "char[] chars = str.toCharArray();",
      "info" : "VariableDeclarationStatement[43956-43989]:VariableDeclarationStatement[43975-44008]"
    }, {
      "left" : "int sz = chars.length;",
      "right" : "int sz = chars.length;",
      "info" : "VariableDeclarationStatement[43998-44020]:VariableDeclarationStatement[44017-44039]"
    }, {
      "left" : "boolean hasExp = false;",
      "right" : "boolean hasExp = false;",
      "info" : "VariableDeclarationStatement[44029-44052]:VariableDeclarationStatement[44048-44071]"
    }, {
      "left" : "boolean hasDecPoint = false;",
      "right" : "boolean hasDecPoint = false;",
      "info" : "VariableDeclarationStatement[44061-44089]:VariableDeclarationStatement[44080-44108]"
    }, {
      "left" : "boolean allowSigns = false;",
      "right" : "boolean allowSigns = false;",
      "info" : "VariableDeclarationStatement[44098-44125]:VariableDeclarationStatement[44117-44144]"
    }, {
      "left" : "boolean foundDigit = false;",
      "right" : "boolean foundDigit = false;",
      "info" : "VariableDeclarationStatement[44134-44161]:VariableDeclarationStatement[44153-44180]"
    }, {
      "left" : "int start = (chars[0] == '-') ? 1 : 0;",
      "right" : "int start = (chars[0] == '-') ? 1 : 0;",
      "info" : "VariableDeclarationStatement[44218-44256]:VariableDeclarationStatement[44237-44275]"
    }, {
      "left" : "if (sz > start + 1)",
      "right" : "if (sz > start + 1)",
      "info" : "IfStatement[44265-44910]:IfStatement[44284-44929]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44285-44910]:Block[44304-44929]"
    }, {
      "left" : "if (chars[start] == '0' && chars[start + 1] == 'x')",
      "right" : "if (chars[start] == '0' && chars[start + 1] == 'x')",
      "info" : "IfStatement[44299-44900]:IfStatement[44318-44919]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44351-44900]:Block[44370-44919]"
    }, {
      "left" : "int i = start + 2;",
      "right" : "int i = start + 2;",
      "info" : "VariableDeclarationStatement[44369-44387]:VariableDeclarationStatement[44388-44406]"
    }, {
      "left" : "if (i == sz)",
      "right" : "if (i == sz)",
      "info" : "IfStatement[44404-44485]:IfStatement[44423-44504]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44417-44485]:Block[44436-44504]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[44439-44452]:ReturnStatement[44458-44471]"
    }, {
      "left" : "for (; i < chars.length; i++)",
      "right" : "for (; i < chars.length; i++)",
      "info" : "ForStatement[44562-44857]:ForStatement[44581-44876]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44592-44857]:Block[44611-44876]"
    }, {
      "left" : "if ((chars[i] < '0' || chars[i] > '9')\n                        && (chars[i] < 'a' || chars[i] > 'f')\n                        && (chars[i] < 'A' || chars[i] > 'F'))",
      "right" : "if ((chars[i] < '0' || chars[i] > '9')\n                        && (chars[i] < 'a' || chars[i] > 'f')\n                        && (chars[i] < 'A' || chars[i] > 'F'))",
      "info" : "IfStatement[44614-44839]:IfStatement[44633-44858]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44778-44839]:Block[44797-44858]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[44804-44817]:ReturnStatement[44823-44836]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[44874-44886]:ReturnStatement[44893-44905]"
    }, {
      "left" : "sz--;",
      "right" : "sz--;",
      "info" : "ExpressionStatement[44919-44924]:ExpressionStatement[44938-44943]"
    }, {
      "left" : "int i = start;",
      "right" : "int i = start;",
      "info" : "VariableDeclarationStatement[45030-45044]:VariableDeclarationStatement[45049-45063]"
    }, {
      "left" : "while (i < sz || (i < sz + 1 && allowSigns && !foundDigit))",
      "right" : "while (i < sz || (i < sz + 1 && allowSigns && !foundDigit))",
      "info" : "WhileStatement[45202-46350]:WhileStatement[45221-46369]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45262-46350]:Block[45281-46369]"
    }, {
      "left" : "if (chars[i] >= '0' && chars[i] <= '9')",
      "right" : "if (chars[i] >= '0' && chars[i] <= '9')",
      "info" : "IfStatement[45276-46323]:IfStatement[45295-46342]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45316-45403]:Block[45335-45422]"
    }, {
      "left" : "foundDigit = true;",
      "right" : "foundDigit = true;",
      "info" : "ExpressionStatement[45334-45352]:ExpressionStatement[45353-45371]"
    }, {
      "left" : "allowSigns = false;",
      "right" : "allowSigns = false;",
      "info" : "ExpressionStatement[45369-45388]:ExpressionStatement[45388-45407]"
    }, {
      "left" : "if (chars[i] == '.')",
      "right" : "if (chars[i] == '.')",
      "info" : "IfStatement[45409-46323]:IfStatement[45428-46342]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45430-45642]:Block[45449-45661]"
    }, {
      "left" : "if (hasDecPoint || hasExp)",
      "right" : "if (hasDecPoint || hasExp)",
      "info" : "IfStatement[45448-45592]:IfStatement[45467-45611]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45475-45592]:Block[45494-45611]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[45561-45574]:ReturnStatement[45580-45593]"
    }, {
      "left" : "hasDecPoint = true;",
      "right" : "hasDecPoint = true;",
      "info" : "ExpressionStatement[45609-45628]:ExpressionStatement[45628-45647]"
    }, {
      "left" : "if (chars[i] == 'e' || chars[i] == 'E')",
      "right" : "if (chars[i] == 'e' || chars[i] == 'E')",
      "info" : "IfStatement[45648-46323]:IfStatement[45667-46342]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45688-46021]:Block[45707-46040]"
    }, {
      "left" : "if (hasExp)",
      "right" : "if (hasExp)",
      "info" : "IfStatement[45758-45854]:IfStatement[45777-45873]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45770-45854]:Block[45789-45873]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[45823-45836]:ReturnStatement[45842-45855]"
    }, {
      "left" : "if (!foundDigit)",
      "right" : "if (!foundDigit)",
      "info" : "IfStatement[45871-45941]:IfStatement[45890-45960]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45888-45941]:Block[45907-45960]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[45910-45923]:ReturnStatement[45929-45942]"
    }, {
      "left" : "hasExp = true;",
      "right" : "hasExp = true;",
      "info" : "ExpressionStatement[45958-45972]:ExpressionStatement[45977-45991]"
    }, {
      "left" : "allowSigns = true;",
      "right" : "allowSigns = true;",
      "info" : "ExpressionStatement[45989-46007]:ExpressionStatement[46008-46026]"
    }, {
      "left" : "if (chars[i] == '+' || chars[i] == '-')",
      "right" : "if (chars[i] == '+' || chars[i] == '-')",
      "info" : "IfStatement[46027-46323]:IfStatement[46046-46342]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46067-46272]:Block[46086-46291]"
    }, {
      "left" : "if (!allowSigns)",
      "right" : "if (!allowSigns)",
      "info" : "IfStatement[46085-46155]:IfStatement[46104-46174]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46102-46155]:Block[46121-46174]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[46124-46137]:ReturnStatement[46143-46156]"
    }, {
      "left" : "allowSigns = false;",
      "right" : "allowSigns = false;",
      "info" : "ExpressionStatement[46172-46191]:ExpressionStatement[46191-46210]"
    }, {
      "left" : "foundDigit = false;",
      "right" : "foundDigit = false;",
      "info" : "ExpressionStatement[46208-46227]:ExpressionStatement[46227-46246]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46278-46323]:Block[46297-46342]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[46296-46309]:ReturnStatement[46315-46328]"
    }, {
      "left" : "i++;",
      "right" : "i++;",
      "info" : "ExpressionStatement[46336-46340]:ExpressionStatement[46355-46359]"
    }, {
      "left" : "if (i < chars.length)",
      "right" : "if (i < chars.length)",
      "info" : "IfStatement[46359-47162]:IfStatement[46378-47497]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46381-47162]:Block[46400-47497]"
    }, {
      "left" : "if (chars[i] >= '0' && chars[i] <= '9')",
      "right" : "if (chars[i] >= '0' && chars[i] <= '9')",
      "info" : "IfStatement[46395-46520]:IfStatement[46414-46539]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46435-46520]:Block[46454-46539]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[46494-46506]:ReturnStatement[46513-46525]"
    }, {
      "left" : "if (chars[i] == 'e' || chars[i] == 'E')",
      "right" : "if (chars[i] == 'e' || chars[i] == 'E')",
      "info" : "IfStatement[46533-46670]:IfStatement[46552-46689]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46573-46670]:Block[46592-46689]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[46643-46656]:ReturnStatement[46662-46675]"
    }, {
      "left" : "if (!allowSigns\n                && (chars[i] == 'd'\n                    || chars[i] == 'D'\n                    || chars[i] == 'f'\n                    || chars[i] == 'F'))",
      "right" : "if (!allowSigns\n                && (chars[i] == 'd'\n                    || chars[i] == 'D'\n                    || chars[i] == 'f'\n                    || chars[i] == 'F'))",
      "info" : "IfStatement[46683-46904]:IfStatement[47018-47239]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46854-46904]:Block[47189-47239]"
    }, {
      "left" : "return foundDigit;",
      "right" : "return foundDigit;",
      "info" : "ReturnStatement[46872-46890]:ReturnStatement[47207-47225]"
    }, {
      "left" : "if (chars[i] == 'l'\n                || chars[i] == 'L')",
      "right" : "if (chars[i] == 'l'\n                || chars[i] == 'L')",
      "info" : "IfStatement[46917-47085]:IfStatement[47252-47420]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46973-47085]:Block[47308-47420]"
    }, {
      "left" : "return foundDigit && !hasExp;",
      "right" : "return foundDigit && !hasExp;",
      "info" : "ReturnStatement[47042-47071]:ReturnStatement[47377-47406]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[47139-47152]:ReturnStatement[47474-47487]"
    }, {
      "left" : "return !allowSigns && foundDigit;",
      "right" : "return !allowSigns && foundDigit;",
      "info" : "ReturnStatement[47308-47341]:ReturnStatement[47643-47676]"
    } ]
  },
  "interFileMappings" : { }
}