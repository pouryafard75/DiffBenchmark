{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "MathUtils",
      "right" : "MathUtils",
      "info" : "TypeDeclaration[898-37122]:TypeDeclaration[898-37132]"
    }, {
      "left" : "public static final double EPSILON = 0x1.0p-53;",
      "right" : "public static final double EPSILON = 0x1.0p-53;",
      "info" : "FieldDeclaration[1040-1176]:FieldDeclaration[1040-1176]"
    }, {
      "left" : "public static final double SAFE_MIN = 0x1.0p-1022;",
      "right" : "public static final double SAFE_MIN = 0x1.0p-1022;",
      "info" : "FieldDeclaration[1182-1412]:FieldDeclaration[1182-1412]"
    }, {
      "left" : "private static final byte  NB = (byte)-1;",
      "right" : "private static final byte  NB = (byte)-1;",
      "info" : "FieldDeclaration[1418-1491]:FieldDeclaration[1418-1491]"
    }, {
      "left" : "private static final short NS = (short)-1;",
      "right" : "private static final short NS = (short)-1;",
      "info" : "FieldDeclaration[1497-1572]:FieldDeclaration[1497-1572]"
    }, {
      "left" : "private static final byte  PB = (byte)1;",
      "right" : "private static final byte  PB = (byte)1;",
      "info" : "FieldDeclaration[1578-1649]:FieldDeclaration[1578-1649]"
    }, {
      "left" : "private static final short PS = (short)1;",
      "right" : "private static final short PS = (short)1;",
      "info" : "FieldDeclaration[1655-1728]:FieldDeclaration[1655-1728]"
    }, {
      "left" : "private static final byte  ZB = (byte)0;",
      "right" : "private static final byte  ZB = (byte)0;",
      "info" : "FieldDeclaration[1734-1805]:FieldDeclaration[1734-1805]"
    }, {
      "left" : "private static final short ZS = (short)0;",
      "right" : "private static final short ZS = (short)0;",
      "info" : "FieldDeclaration[1811-1884]:FieldDeclaration[1811-1884]"
    }, {
      "left" : "private static final double TWO_PI = 2 * Math.PI;",
      "right" : "private static final double TWO_PI = 2 * Math.PI;",
      "info" : "FieldDeclaration[1890-1958]:FieldDeclaration[1890-1958]"
    }, {
      "left" : "private MathUtils()",
      "right" : "private MathUtils()",
      "info" : "MethodDeclaration[1964-2051]:MethodDeclaration[1964-2051]"
    }, {
      "left" : "public static int addAndCheck(int x, int y)",
      "right" : "public static int addAndCheck(int x, int y)",
      "info" : "MethodDeclaration[2057-2578]:MethodDeclaration[2057-2578]"
    }, {
      "left" : "public static long addAndCheck(long a, long b)",
      "right" : "public static long addAndCheck(long a, long b)",
      "info" : "MethodDeclaration[2584-2974]:MethodDeclaration[2584-2974]"
    }, {
      "left" : "private static long addAndCheck(long a, long b, String msg)",
      "right" : "private static long addAndCheck(long a, long b, String msg)",
      "info" : "MethodDeclaration[2984-4390]:MethodDeclaration[2984-4390]"
    }, {
      "left" : "public static long binomialCoefficient(final int n, final int k)",
      "right" : "public static long binomialCoefficient(final int n, final int k)",
      "info" : "MethodDeclaration[4400-6306]:MethodDeclaration[4400-6306]"
    }, {
      "left" : "public static double binomialCoefficientDouble(final int n, final int k)",
      "right" : "public static double binomialCoefficientDouble(final int n, final int k)",
      "info" : "MethodDeclaration[6312-7464]:MethodDeclaration[6312-7464]"
    }, {
      "left" : "public static double binomialCoefficientLog(final int n, final int k)",
      "right" : "public static double binomialCoefficientLog(final int n, final int k)",
      "info" : "MethodDeclaration[7474-9004]:MethodDeclaration[7474-9004]"
    }, {
      "left" : "public static double cosh(double x)",
      "right" : "public static double cosh(double x)",
      "info" : "MethodDeclaration[9014-9355]:MethodDeclaration[9014-9355]"
    }, {
      "left" : "public static boolean equals(double x, double y)",
      "right" : "public static boolean equals(double x, double y)",
      "info" : "MethodDeclaration[9365-9718]:MethodDeclaration[9365-9718]"
    }, {
      "left" : "public static boolean equals(double[] x, double[] y)",
      "right" : "public static boolean equals(double[] x, double[] y)",
      "info" : "MethodDeclaration[9724-10456]:MethodDeclaration[9724-10456]"
    }, {
      "left" : "public static long factorial(final int n)",
      "right" : "public static long factorial(final int n)",
      "info" : "MethodDeclaration[10462-11661]:MethodDeclaration[10462-11661]"
    }, {
      "left" : "public static double factorialDouble(final int n)",
      "right" : "public static double factorialDouble(final int n)",
      "info" : "MethodDeclaration[11667-12697]:MethodDeclaration[11667-12697]"
    }, {
      "left" : "public static double factorialLog(final int n)",
      "right" : "public static double factorialLog(final int n)",
      "info" : "MethodDeclaration[12703-13381]:MethodDeclaration[12703-13381]"
    }, {
      "left" : "public static int gcd(int u, int v)",
      "right" : "public static int gcd(int u, int v)",
      "info" : "MethodDeclaration[13387-15635]:MethodDeclaration[13387-15645]"
    }, {
      "left" : "public static int hash(double value)",
      "right" : "public static int hash(double value)",
      "info" : "MethodDeclaration[15641-15899]:MethodDeclaration[15651-15909]"
    }, {
      "left" : "public static int hash(double[] value)",
      "right" : "public static int hash(double[] value)",
      "info" : "MethodDeclaration[15905-16191]:MethodDeclaration[15915-16201]"
    }, {
      "left" : "public static byte indicator(final byte x)",
      "right" : "public static byte indicator(final byte x)",
      "info" : "MethodDeclaration[16197-16509]:MethodDeclaration[16207-16519]"
    }, {
      "left" : "public static double indicator(final double x)",
      "right" : "public static double indicator(final double x)",
      "info" : "MethodDeclaration[16515-16968]:MethodDeclaration[16525-16978]"
    }, {
      "left" : "public static float indicator(final float x)",
      "right" : "public static float indicator(final float x)",
      "info" : "MethodDeclaration[16974-17411]:MethodDeclaration[16984-17421]"
    }, {
      "left" : "public static int indicator(final int x)",
      "right" : "public static int indicator(final int x)",
      "info" : "MethodDeclaration[17417-17686]:MethodDeclaration[17427-17696]"
    }, {
      "left" : "public static long indicator(final long x)",
      "right" : "public static long indicator(final long x)",
      "info" : "MethodDeclaration[17692-17970]:MethodDeclaration[17702-17980]"
    }, {
      "left" : "public static short indicator(final short x)",
      "right" : "public static short indicator(final short x)",
      "info" : "MethodDeclaration[17976-18296]:MethodDeclaration[17986-18306]"
    }, {
      "left" : "public static int lcm(int a, int b)",
      "right" : "public static int lcm(int a, int b)",
      "info" : "MethodDeclaration[18302-18731]:MethodDeclaration[18312-18741]"
    }, {
      "left" : "public static double log(double base, double x)",
      "right" : "public static double log(double base, double x)",
      "info" : "MethodDeclaration[18737-19577]:MethodDeclaration[18747-19587]"
    }, {
      "left" : "public static int mulAndCheck(int x, int y)",
      "right" : "public static int mulAndCheck(int x, int y)",
      "info" : "MethodDeclaration[19583-20115]:MethodDeclaration[19593-20125]"
    }, {
      "left" : "public static long mulAndCheck(long a, long b)",
      "right" : "public static long mulAndCheck(long a, long b)",
      "info" : "MethodDeclaration[20121-21934]:MethodDeclaration[20131-21944]"
    }, {
      "left" : "public static double nextAfter(double d, double direction)",
      "right" : "public static double nextAfter(double d, double direction)",
      "info" : "MethodDeclaration[21940-24325]:MethodDeclaration[21950-24335]"
    }, {
      "left" : "public static double scalb(final double d, final int scaleFactor)",
      "right" : "public static double scalb(final double d, final int scaleFactor)",
      "info" : "MethodDeclaration[24331-25259]:MethodDeclaration[24341-25269]"
    }, {
      "left" : "public static double normalizeAngle(double a, double center)",
      "right" : "public static double normalizeAngle(double a, double center)",
      "info" : "MethodDeclaration[25265-26441]:MethodDeclaration[25275-26451]"
    }, {
      "left" : "public static double round(double x, int scale)",
      "right" : "public static double round(double x, int scale)",
      "info" : "MethodDeclaration[26447-26899]:MethodDeclaration[26457-26909]"
    }, {
      "left" : "public static double round(double x, int scale, int roundingMethod)",
      "right" : "public static double round(double x, int scale, int roundingMethod)",
      "info" : "MethodDeclaration[26905-27824]:MethodDeclaration[26915-27834]"
    }, {
      "left" : "public static float round(float x, int scale)",
      "right" : "public static float round(float x, int scale)",
      "info" : "MethodDeclaration[27830-28281]:MethodDeclaration[27840-28291]"
    }, {
      "left" : "public static float round(float x, int scale, int roundingMethod)",
      "right" : "public static float round(float x, int scale, int roundingMethod)",
      "info" : "MethodDeclaration[28287-29002]:MethodDeclaration[28297-29012]"
    }, {
      "left" : "private static double roundUnscaled(double unscaled, double sign,\n        int roundingMethod)",
      "right" : "private static double roundUnscaled(double unscaled, double sign,\n        int roundingMethod)",
      "info" : "MethodDeclaration[29008-32265]:MethodDeclaration[29018-32275]"
    }, {
      "left" : "public static byte sign(final byte x)",
      "right" : "public static byte sign(final byte x)",
      "info" : "MethodDeclaration[32271-32757]:MethodDeclaration[32281-32767]"
    }, {
      "left" : "public static double sign(final double x)",
      "right" : "public static double sign(final double x)",
      "info" : "MethodDeclaration[32763-33476]:MethodDeclaration[32773-33486]"
    }, {
      "left" : "public static float sign(final float x)",
      "right" : "public static float sign(final float x)",
      "info" : "MethodDeclaration[33482-34098]:MethodDeclaration[33492-34108]"
    }, {
      "left" : "public static int sign(final int x)",
      "right" : "public static int sign(final int x)",
      "info" : "MethodDeclaration[34104-34535]:MethodDeclaration[34114-34545]"
    }, {
      "left" : "public static long sign(final long x)",
      "right" : "public static long sign(final long x)",
      "info" : "MethodDeclaration[34541-34986]:MethodDeclaration[34551-34996]"
    }, {
      "left" : "public static short sign(final short x)",
      "right" : "public static short sign(final short x)",
      "info" : "MethodDeclaration[34992-35504]:MethodDeclaration[35002-35514]"
    }, {
      "left" : "public static double sinh(double x)",
      "right" : "public static double sinh(double x)",
      "info" : "MethodDeclaration[35510-35843]:MethodDeclaration[35520-35853]"
    }, {
      "left" : "public static int subAndCheck(int x, int y)",
      "right" : "public static int subAndCheck(int x, int y)",
      "info" : "MethodDeclaration[35849-36394]:MethodDeclaration[35859-36404]"
    }, {
      "left" : "public static long subAndCheck(long a, long b)",
      "right" : "public static long subAndCheck(long a, long b)",
      "info" : "MethodDeclaration[36400-37119]:MethodDeclaration[36410-37129]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2027-2051]:Block[2027-2051]"
    }, {
      "left" : "super();",
      "right" : "super();",
      "info" : "SuperConstructorInvocation[2037-2045]:SuperConstructorInvocation[2037-2045]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2380-2578]:Block[2380-2578]"
    }, {
      "left" : "long s = (long)x + (long)y;",
      "right" : "long s = (long)x + (long)y;",
      "info" : "VariableDeclarationStatement[2390-2417]:VariableDeclarationStatement[2390-2417]"
    }, {
      "left" : "if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE)",
      "right" : "if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE)",
      "info" : "IfStatement[2426-2549]:IfStatement[2426-2549]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2478-2549]:Block[2478-2549]"
    }, {
      "left" : "throw new ArithmeticException(\"overflow: add\");",
      "right" : "throw new ArithmeticException(\"overflow: add\");",
      "info" : "ThrowStatement[2492-2539]:ThrowStatement[2492-2539]"
    }, {
      "left" : "return (int)s;",
      "right" : "return (int)s;",
      "info" : "ReturnStatement[2558-2572]:ReturnStatement[2558-2572]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2916-2974]:Block[2916-2974]"
    }, {
      "left" : "return addAndCheck(a, b, \"overflow: add\");",
      "right" : "return addAndCheck(a, b, \"overflow: add\");",
      "info" : "ReturnStatement[2926-2968]:ReturnStatement[2926-2968]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3392-4390]:Block[3392-4390]"
    }, {
      "left" : "long ret;",
      "right" : "long ret;",
      "info" : "VariableDeclarationStatement[3402-3411]:VariableDeclarationStatement[3402-3411]"
    }, {
      "left" : "if (a > b)",
      "right" : "if (a > b)",
      "info" : "IfStatement[3420-4364]:IfStatement[3420-4364]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3431-3536]:Block[3431-3536]"
    }, {
      "left" : "ret = addAndCheck(b, a, msg);",
      "right" : "ret = addAndCheck(b, a, msg);",
      "info" : "ExpressionStatement[3497-3526]:ExpressionStatement[3497-3526]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3542-4364]:Block[3542-4364]"
    }, {
      "left" : "if (a < 0)",
      "right" : "if (a < 0)",
      "info" : "IfStatement[3598-4354]:IfStatement[3598-4354]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3609-4040]:Block[3609-4040]"
    }, {
      "left" : "if (b < 0)",
      "right" : "if (b < 0)",
      "info" : "IfStatement[3627-4026]:IfStatement[3627-4026]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3638-3907]:Block[3638-3907]"
    }, {
      "left" : "if (Long.MIN_VALUE - b <= a)",
      "right" : "if (Long.MIN_VALUE - b <= a)",
      "info" : "IfStatement[3711-3889]:IfStatement[3711-3889]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3740-3800]:Block[3740-3800]"
    }, {
      "left" : "ret = a + b;",
      "right" : "ret = a + b;",
      "info" : "ExpressionStatement[3766-3778]:ExpressionStatement[3766-3778]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3806-3889]:Block[3806-3889]"
    }, {
      "left" : "throw new ArithmeticException(msg);",
      "right" : "throw new ArithmeticException(msg);",
      "info" : "ThrowStatement[3832-3867]:ThrowStatement[3832-3867]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3913-4026]:Block[3913-4026]"
    }, {
      "left" : "ret = a + b;",
      "right" : "ret = a + b;",
      "info" : "ExpressionStatement[3996-4008]:ExpressionStatement[3996-4008]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4046-4354]:Block[4046-4354]"
    }, {
      "left" : "if (a <= Long.MAX_VALUE - b)",
      "right" : "if (a <= Long.MAX_VALUE - b)",
      "info" : "IfStatement[4178-4340]:IfStatement[4178-4340]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4207-4259]:Block[4207-4259]"
    }, {
      "left" : "ret = a + b;",
      "right" : "ret = a + b;",
      "info" : "ExpressionStatement[4229-4241]:ExpressionStatement[4229-4241]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4265-4340]:Block[4265-4340]"
    }, {
      "left" : "throw new ArithmeticException(msg);",
      "right" : "throw new ArithmeticException(msg);",
      "info" : "ThrowStatement[4287-4322]:ThrowStatement[4287-4322]"
    }, {
      "left" : "return ret;",
      "right" : "return ret;",
      "info" : "ReturnStatement[4373-4384]:ReturnStatement[4373-4384]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5613-6306]:Block[5613-6306]"
    }, {
      "left" : "if (n < k)",
      "right" : "if (n < k)",
      "info" : "IfStatement[5623-5761]:IfStatement[5623-5761]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5634-5761]:Block[5634-5761]"
    }, {
      "left" : "throw new IllegalArgumentException(\n                \"must have n >= k for binomial coefficient (n,k)\");",
      "right" : "throw new IllegalArgumentException(\n                \"must have n >= k for binomial coefficient (n,k)\");",
      "info" : "ThrowStatement[5648-5751]:ThrowStatement[5648-5751]"
    }, {
      "left" : "if (n < 0)",
      "right" : "if (n < 0)",
      "info" : "IfStatement[5770-5908]:IfStatement[5770-5908]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5781-5908]:Block[5781-5908]"
    }, {
      "left" : "throw new IllegalArgumentException(\n                \"must have n >= 0 for binomial coefficient (n,k)\");",
      "right" : "throw new IllegalArgumentException(\n                \"must have n >= 0 for binomial coefficient (n,k)\");",
      "info" : "ThrowStatement[5795-5898]:ThrowStatement[5795-5898]"
    }, {
      "left" : "if ((n == k) || (k == 0))",
      "right" : "if ((n == k) || (k == 0))",
      "info" : "IfStatement[5917-5976]:IfStatement[5917-5976]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5943-5976]:Block[5943-5976]"
    }, {
      "left" : "return 1;",
      "right" : "return 1;",
      "info" : "ReturnStatement[5957-5966]:ReturnStatement[5957-5966]"
    }, {
      "left" : "if ((k == 1) || (k == n - 1))",
      "right" : "if ((k == 1) || (k == n - 1))",
      "info" : "IfStatement[5985-6048]:IfStatement[5985-6048]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6015-6048]:Block[6015-6048]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[6029-6038]:ReturnStatement[6029-6038]"
    }, {
      "left" : "long result = Math.round(binomialCoefficientDouble(n, k));",
      "right" : "long result = Math.round(binomialCoefficientDouble(n, k));",
      "info" : "VariableDeclarationStatement[6058-6116]:VariableDeclarationStatement[6058-6116]"
    }, {
      "left" : "if (result == Long.MAX_VALUE)",
      "right" : "if (result == Long.MAX_VALUE)",
      "info" : "IfStatement[6125-6277]:IfStatement[6125-6277]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6155-6277]:Block[6155-6277]"
    }, {
      "left" : "throw new ArithmeticException(\n                \"result too large to represent in a long integer\");",
      "right" : "throw new ArithmeticException(\n                \"result too large to represent in a long integer\");",
      "info" : "ThrowStatement[6169-6267]:ThrowStatement[6169-6267]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[6286-6300]:ReturnStatement[6286-6300]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7384-7464]:Block[7384-7464]"
    }, {
      "left" : "return Math.floor(Math.exp(binomialCoefficientLog(n, k)) + 0.5);",
      "right" : "return Math.floor(Math.exp(binomialCoefficientLog(n, k)) + 0.5);",
      "info" : "ReturnStatement[7394-7458]:ReturnStatement[7394-7458]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8255-9004]:Block[8255-9004]"
    }, {
      "left" : "if (n < k)",
      "right" : "if (n < k)",
      "info" : "IfStatement[8265-8403]:IfStatement[8265-8403]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8276-8403]:Block[8276-8403]"
    }, {
      "left" : "throw new IllegalArgumentException(\n                \"must have n >= k for binomial coefficient (n,k)\");",
      "right" : "throw new IllegalArgumentException(\n                \"must have n >= k for binomial coefficient (n,k)\");",
      "info" : "ThrowStatement[8290-8393]:ThrowStatement[8290-8393]"
    }, {
      "left" : "if (n < 0)",
      "right" : "if (n < 0)",
      "info" : "IfStatement[8412-8550]:IfStatement[8412-8550]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8423-8550]:Block[8423-8550]"
    }, {
      "left" : "throw new IllegalArgumentException(\n                \"must have n >= 0 for binomial coefficient (n,k)\");",
      "right" : "throw new IllegalArgumentException(\n                \"must have n >= 0 for binomial coefficient (n,k)\");",
      "info" : "ThrowStatement[8437-8540]:ThrowStatement[8437-8540]"
    }, {
      "left" : "if ((n == k) || (k == 0))",
      "right" : "if ((n == k) || (k == 0))",
      "info" : "IfStatement[8559-8618]:IfStatement[8559-8618]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8585-8618]:Block[8585-8618]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[8599-8608]:ReturnStatement[8599-8608]"
    }, {
      "left" : "if ((k == 1) || (k == n - 1))",
      "right" : "if ((k == 1) || (k == n - 1))",
      "info" : "IfStatement[8627-8708]:IfStatement[8627-8708]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8657-8708]:Block[8657-8708]"
    }, {
      "left" : "return Math.log((double)n);",
      "right" : "return Math.log((double)n);",
      "info" : "ReturnStatement[8671-8698]:ReturnStatement[8671-8698]"
    }, {
      "left" : "double logSum = 0;",
      "right" : "double logSum = 0;",
      "info" : "VariableDeclarationStatement[8717-8735]:VariableDeclarationStatement[8717-8735]"
    }, {
      "left" : "for (int i = k + 1; i <= n; i++)",
      "right" : "for (int i = k + 1; i <= n; i++)",
      "info" : "ForStatement[8762-8849]:ForStatement[8762-8849]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8795-8849]:Block[8795-8849]"
    }, {
      "left" : "logSum += Math.log((double)i);",
      "right" : "logSum += Math.log((double)i);",
      "info" : "ExpressionStatement[8809-8839]:ExpressionStatement[8809-8839]"
    }, {
      "left" : "for (int i = 2; i <= n - k; i++)",
      "right" : "for (int i = 2; i <= n - k; i++)",
      "info" : "ForStatement[8887-8974]:ForStatement[8887-8974]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8920-8974]:Block[8920-8974]"
    }, {
      "left" : "logSum -= Math.log((double)i);",
      "right" : "logSum -= Math.log((double)i);",
      "info" : "ExpressionStatement[8934-8964]:ExpressionStatement[8934-8964]"
    }, {
      "left" : "return logSum;",
      "right" : "return logSum;",
      "info" : "ReturnStatement[8984-8998]:ReturnStatement[8984-8998]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9297-9355]:Block[9297-9355]"
    }, {
      "left" : "return (Math.exp(x) + Math.exp(-x)) / 2.0;",
      "right" : "return (Math.exp(x) + Math.exp(-x)) / 2.0;",
      "info" : "ReturnStatement[9307-9349]:ReturnStatement[9307-9349]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9646-9718]:Block[9646-9718]"
    }, {
      "left" : "return ((Double.isNaN(x) && Double.isNaN(y)) || x == y);",
      "right" : "return ((Double.isNaN(x) && Double.isNaN(y)) || x == y);",
      "info" : "ReturnStatement[9656-9712]:ReturnStatement[9656-9712]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10117-10456]:Block[10117-10456]"
    }, {
      "left" : "if ((x == null) || (y == null))",
      "right" : "if ((x == null) || (y == null))",
      "info" : "IfStatement[10127-10219]:IfStatement[10127-10219]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10159-10219]:Block[10159-10219]"
    }, {
      "left" : "return !((x == null) ^ (y == null));",
      "right" : "return !((x == null) ^ (y == null));",
      "info" : "ReturnStatement[10173-10209]:ReturnStatement[10173-10209]"
    }, {
      "left" : "if (x.length != y.length)",
      "right" : "if (x.length != y.length)",
      "info" : "IfStatement[10228-10291]:IfStatement[10228-10291]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10254-10291]:Block[10254-10291]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[10268-10281]:ReturnStatement[10268-10281]"
    }, {
      "left" : "for (int i = 0; i < x.length; ++i)",
      "right" : "for (int i = 0; i < x.length; ++i)",
      "info" : "ForStatement[10300-10429]:ForStatement[10300-10429]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10335-10429]:Block[10335-10429]"
    }, {
      "left" : "if (!equals(x[i], y[i]))",
      "right" : "if (!equals(x[i], y[i]))",
      "info" : "IfStatement[10349-10419]:IfStatement[10349-10419]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10374-10419]:Block[10374-10419]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[10392-10405]:ReturnStatement[10392-10405]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[10438-10450]:ReturnStatement[10438-10450]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11416-11661]:Block[11416-11661]"
    }, {
      "left" : "long result = Math.round(factorialDouble(n));",
      "right" : "long result = Math.round(factorialDouble(n));",
      "info" : "VariableDeclarationStatement[11426-11471]:VariableDeclarationStatement[11426-11471]"
    }, {
      "left" : "if (result == Long.MAX_VALUE)",
      "right" : "if (result == Long.MAX_VALUE)",
      "info" : "IfStatement[11480-11632]:IfStatement[11480-11632]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11510-11632]:Block[11510-11632]"
    }, {
      "left" : "throw new ArithmeticException(\n                \"result too large to represent in a long integer\");",
      "right" : "throw new ArithmeticException(\n                \"result too large to represent in a long integer\");",
      "info" : "ThrowStatement[11524-11622]:ThrowStatement[11524-11622]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[11641-11655]:ReturnStatement[11641-11655]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12524-12697]:Block[12524-12697]"
    }, {
      "left" : "if (n < 0)",
      "right" : "if (n < 0)",
      "info" : "IfStatement[12534-12631]:IfStatement[12534-12631]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12545-12631]:Block[12545-12631]"
    }, {
      "left" : "throw new IllegalArgumentException(\"must have n >= 0 for n!\");",
      "right" : "throw new IllegalArgumentException(\"must have n >= 0 for n!\");",
      "info" : "ThrowStatement[12559-12621]:ThrowStatement[12559-12621]"
    }, {
      "left" : "return Math.floor(Math.exp(factorialLog(n)) + 0.5);",
      "right" : "return Math.floor(Math.exp(factorialLog(n)) + 0.5);",
      "info" : "ReturnStatement[12640-12691]:ReturnStatement[12640-12691]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13127-13381]:Block[13127-13381]"
    }, {
      "left" : "if (n < 0)",
      "right" : "if (n < 0)",
      "info" : "IfStatement[13137-13233]:IfStatement[13137-13233]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13148-13233]:Block[13148-13233]"
    }, {
      "left" : "throw new IllegalArgumentException(\"must have n > 0 for n!\");",
      "right" : "throw new IllegalArgumentException(\"must have n > 0 for n!\");",
      "info" : "ThrowStatement[13162-13223]:ThrowStatement[13162-13223]"
    }, {
      "left" : "double logSum = 0;",
      "right" : "double logSum = 0;",
      "info" : "VariableDeclarationStatement[13242-13260]:VariableDeclarationStatement[13242-13260]"
    }, {
      "left" : "for (int i = 2; i <= n; i++)",
      "right" : "for (int i = 2; i <= n; i++)",
      "info" : "ForStatement[13269-13352]:ForStatement[13269-13352]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13298-13352]:Block[13298-13352]"
    }, {
      "left" : "logSum += Math.log((double)i);",
      "right" : "logSum += Math.log((double)i);",
      "info" : "ExpressionStatement[13312-13342]:ExpressionStatement[13312-13342]"
    }, {
      "left" : "return logSum;",
      "right" : "return logSum;",
      "info" : "ReturnStatement[13361-13375]:ReturnStatement[13361-13375]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13859-15635]:Block[13859-15645]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13885-13944]:Block[13895-13954]"
    }, {
      "left" : "return (Math.abs(u) + Math.abs(v));",
      "right" : "return (Math.abs(u) + Math.abs(v));",
      "info" : "ReturnStatement[13899-13934]:ReturnStatement[13909-13944]"
    }, {
      "left" : "if (u > 0)",
      "right" : "if (u > 0)",
      "info" : "IfStatement[14221-14263]:IfStatement[14231-14273]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14232-14263]:Block[14242-14273]"
    }, {
      "left" : "u = -u;",
      "right" : "u = -u;",
      "info" : "ExpressionStatement[14246-14253]:ExpressionStatement[14256-14263]"
    }, {
      "left" : "if (v > 0)",
      "right" : "if (v > 0)",
      "info" : "IfStatement[14291-14333]:IfStatement[14301-14343]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14302-14333]:Block[14312-14343]"
    }, {
      "left" : "v = -v;",
      "right" : "v = -v;",
      "info" : "ExpressionStatement[14316-14323]:ExpressionStatement[14326-14333]"
    }, {
      "left" : "int k = 0;",
      "right" : "int k = 0;",
      "info" : "VariableDeclarationStatement[14394-14404]:VariableDeclarationStatement[14404-14414]"
    }, {
      "left" : "while ((u & 1) == 0 && (v & 1) == 0 && k < 31)",
      "right" : "while ((u & 1) == 0 && (v & 1) == 0 && k < 31)",
      "info" : "WhileStatement[14413-14643]:WhileStatement[14423-14653]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14460-14643]:Block[14470-14653]"
    }, {
      "left" : "u /= 2;",
      "right" : "u /= 2;",
      "info" : "ExpressionStatement[14571-14578]:ExpressionStatement[14581-14588]"
    }, {
      "left" : "v /= 2;",
      "right" : "v /= 2;",
      "info" : "ExpressionStatement[14591-14598]:ExpressionStatement[14601-14608]"
    }, {
      "left" : "k++;",
      "right" : "k++;",
      "info" : "ExpressionStatement[14611-14615]:ExpressionStatement[14621-14625]"
    }, {
      "left" : "if (k == 31)",
      "right" : "if (k == 31)",
      "info" : "IfStatement[14652-14744]:IfStatement[14662-14754]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14665-14744]:Block[14675-14754]"
    }, {
      "left" : "throw new ArithmeticException(\"overflow: gcd is 2^31\");",
      "right" : "throw new ArithmeticException(\"overflow: gcd is 2^31\");",
      "info" : "ThrowStatement[14679-14734]:ThrowStatement[14689-14744]"
    }, {
      "left" : "int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;",
      "right" : "int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;",
      "info" : "VariableDeclarationStatement[14849-14895]:VariableDeclarationStatement[14859-14905]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[15026-15583]:DoStatement[15036-15593]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15029-15567]:Block[15039-15577]"
    }, {
      "left" : "while ((t & 1) == 0)",
      "right" : "while ((t & 1) == 0)",
      "info" : "WhileStatement[15124-15222]:WhileStatement[15134-15232]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15145-15222]:Block[15155-15232]"
    }, {
      "left" : "t /= 2;",
      "right" : "t /= 2;",
      "info" : "ExpressionStatement[15184-15191]:ExpressionStatement[15194-15201]"
    }, {
      "left" : "if (t > 0)",
      "right" : "if (t > 0)",
      "info" : "IfStatement[15270-15364]:IfStatement[15280-15374]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15281-15320]:Block[15291-15330]"
    }, {
      "left" : "u = -t;",
      "right" : "u = -t;",
      "info" : "ExpressionStatement[15299-15306]:ExpressionStatement[15309-15316]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15326-15364]:Block[15336-15374]"
    }, {
      "left" : "v = t;",
      "right" : "v = t;",
      "info" : "ExpressionStatement[15344-15350]:ExpressionStatement[15354-15360]"
    }, {
      "left" : "t = (v - u) / 2;",
      "right" : "t = (v - u) / 2;",
      "info" : "ExpressionStatement[15441-15457]:ExpressionStatement[15451-15467]"
    }, {
      "left" : "return -u * (1 << k);",
      "right" : "return -u * (1 << k);",
      "info" : "ReturnStatement[15592-15613]:ReturnStatement[15602-15623]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15847-15899]:Block[15857-15909]"
    }, {
      "left" : "return new Double(value).hashCode();",
      "right" : "return new Double(value).hashCode();",
      "info" : "ReturnStatement[15857-15893]:ReturnStatement[15867-15903]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16145-16191]:Block[16155-16201]"
    }, {
      "left" : "return Arrays.hashCode(value);",
      "right" : "return Arrays.hashCode(value);",
      "info" : "ReturnStatement[16155-16185]:ReturnStatement[16165-16195]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16466-16509]:Block[16476-16519]"
    }, {
      "left" : "return (x >= ZB) ? PB : NB;",
      "right" : "return (x >= ZB) ? PB : NB;",
      "info" : "ReturnStatement[16476-16503]:ReturnStatement[16486-16513]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16849-16968]:Block[16859-16978]"
    }, {
      "left" : "if (Double.isNaN(x))",
      "right" : "if (Double.isNaN(x))",
      "info" : "IfStatement[16859-16922]:IfStatement[16869-16932]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16880-16922]:Block[16890-16932]"
    }, {
      "left" : "return Double.NaN;",
      "right" : "return Double.NaN;",
      "info" : "ReturnStatement[16894-16912]:ReturnStatement[16904-16922]"
    }, {
      "left" : "return (x >= 0.0) ? 1.0 : -1.0;",
      "right" : "return (x >= 0.0) ? 1.0 : -1.0;",
      "info" : "ReturnStatement[16931-16962]:ReturnStatement[16941-16972]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17291-17411]:Block[17301-17421]"
    }, {
      "left" : "if (Float.isNaN(x))",
      "right" : "if (Float.isNaN(x))",
      "info" : "IfStatement[17301-17362]:IfStatement[17311-17372]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17321-17362]:Block[17331-17372]"
    }, {
      "left" : "return Float.NaN;",
      "right" : "return Float.NaN;",
      "info" : "ReturnStatement[17335-17352]:ReturnStatement[17345-17362]"
    }, {
      "left" : "return (x >= 0.0F) ? 1.0F : -1.0F;",
      "right" : "return (x >= 0.0F) ? 1.0F : -1.0F;",
      "info" : "ReturnStatement[17371-17405]:ReturnStatement[17381-17415]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17645-17686]:Block[17655-17696]"
    }, {
      "left" : "return (x >= 0) ? 1 : -1;",
      "right" : "return (x >= 0) ? 1 : -1;",
      "info" : "ReturnStatement[17655-17680]:ReturnStatement[17665-17690]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17926-17970]:Block[17936-17980]"
    }, {
      "left" : "return (x >= 0L) ? 1L : -1L;",
      "right" : "return (x >= 0L) ? 1L : -1L;",
      "info" : "ReturnStatement[17936-17964]:ReturnStatement[17946-17974]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18253-18296]:Block[18263-18306]"
    }, {
      "left" : "return (x >= ZS) ? PS : NS;",
      "right" : "return (x >= ZS) ? PS : NS;",
      "info" : "ReturnStatement[18263-18290]:ReturnStatement[18273-18300]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18668-18731]:Block[18678-18741]"
    }, {
      "left" : "return Math.abs(mulAndCheck(a / gcd(a, b), b));",
      "right" : "return Math.abs(mulAndCheck(a / gcd(a, b), b));",
      "info" : "ReturnStatement[18678-18725]:ReturnStatement[18688-18735]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19527-19577]:Block[19537-19587]"
    }, {
      "left" : "return Math.log(x)/Math.log(base);",
      "right" : "return Math.log(x)/Math.log(base);",
      "info" : "ReturnStatement[19537-19571]:ReturnStatement[19547-19581]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19913-20115]:Block[19923-20125]"
    }, {
      "left" : "long m = ((long)x) * ((long)y);",
      "right" : "long m = ((long)x) * ((long)y);",
      "info" : "VariableDeclarationStatement[19923-19954]:VariableDeclarationStatement[19933-19964]"
    }, {
      "left" : "if (m < Integer.MIN_VALUE || m > Integer.MAX_VALUE)",
      "right" : "if (m < Integer.MIN_VALUE || m > Integer.MAX_VALUE)",
      "info" : "IfStatement[19963-20086]:IfStatement[19973-20096]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20015-20086]:Block[20025-20096]"
    }, {
      "left" : "throw new ArithmeticException(\"overflow: mul\");",
      "right" : "throw new ArithmeticException(\"overflow: mul\");",
      "info" : "ThrowStatement[20029-20076]:ThrowStatement[20039-20086]"
    }, {
      "left" : "return (int)m;",
      "right" : "return (int)m;",
      "info" : "ReturnStatement[20095-20109]:ReturnStatement[20105-20119]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20469-21934]:Block[20479-21944]"
    }, {
      "left" : "long ret;",
      "right" : "long ret;",
      "info" : "VariableDeclarationStatement[20479-20488]:VariableDeclarationStatement[20489-20498]"
    }, {
      "left" : "String msg = \"overflow: multiply\";",
      "right" : "String msg = \"overflow: multiply\";",
      "info" : "VariableDeclarationStatement[20497-20531]:VariableDeclarationStatement[20507-20541]"
    }, {
      "left" : "if (a > b)",
      "right" : "if (a > b)",
      "info" : "IfStatement[20540-21908]:IfStatement[20550-21918]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20551-20651]:Block[20561-20661]"
    }, {
      "left" : "ret = mulAndCheck(b, a);",
      "right" : "ret = mulAndCheck(b, a);",
      "info" : "ExpressionStatement[20617-20641]:ExpressionStatement[20627-20651]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20657-21908]:Block[20667-21918]"
    }, {
      "left" : "if (a < 0)",
      "right" : "if (a < 0)",
      "info" : "IfStatement[20671-21898]:IfStatement[20681-21908]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20682-21452]:Block[20692-21462]"
    }, {
      "left" : "if (b < 0)",
      "right" : "if (b < 0)",
      "info" : "IfStatement[20700-21438]:IfStatement[20710-21448]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20711-21008]:Block[20721-21018]"
    }, {
      "left" : "if (a >= Long.MAX_VALUE / b)",
      "right" : "if (a >= Long.MAX_VALUE / b)",
      "info" : "IfStatement[20812-20990]:IfStatement[20822-21000]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20841-20901]:Block[20851-20911]"
    }, {
      "left" : "ret = a * b;",
      "right" : "ret = a * b;",
      "info" : "ExpressionStatement[20867-20879]:ExpressionStatement[20877-20889]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20907-20990]:Block[20917-21000]"
    }, {
      "left" : "throw new ArithmeticException(msg);",
      "right" : "throw new ArithmeticException(msg);",
      "info" : "ThrowStatement[20933-20968]:ThrowStatement[20943-20978]"
    }, {
      "left" : "if (b > 0)",
      "right" : "if (b > 0)",
      "info" : "IfStatement[21014-21438]:IfStatement[21024-21448]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21025-21347]:Block[21035-21357]"
    }, {
      "left" : "if (Long.MIN_VALUE / b <= a)",
      "right" : "if (Long.MIN_VALUE / b <= a)",
      "info" : "IfStatement[21126-21329]:IfStatement[21136-21339]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21155-21215]:Block[21165-21225]"
    }, {
      "left" : "ret = a * b;",
      "right" : "ret = a * b;",
      "info" : "ExpressionStatement[21181-21193]:ExpressionStatement[21191-21203]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21221-21329]:Block[21231-21339]"
    }, {
      "left" : "throw new ArithmeticException(msg);",
      "right" : "throw new ArithmeticException(msg);",
      "info" : "ThrowStatement[21247-21282]:ThrowStatement[21257-21292]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21353-21438]:Block[21363-21448]"
    }, {
      "left" : "ret = 0;",
      "right" : "ret = 0;",
      "info" : "ExpressionStatement[21412-21420]:ExpressionStatement[21422-21430]"
    }, {
      "left" : "if (a > 0)",
      "right" : "if (a > 0)",
      "info" : "IfStatement[21458-21898]:IfStatement[21468-21908]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21469-21819]:Block[21479-21829]"
    }, {
      "left" : "if (a <= Long.MAX_VALUE / b)",
      "right" : "if (a <= Long.MAX_VALUE / b)",
      "info" : "IfStatement[21643-21805]:IfStatement[21653-21815]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21672-21724]:Block[21682-21734]"
    }, {
      "left" : "ret = a * b;",
      "right" : "ret = a * b;",
      "info" : "ExpressionStatement[21694-21706]:ExpressionStatement[21704-21716]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21730-21805]:Block[21740-21815]"
    }, {
      "left" : "throw new ArithmeticException(msg);",
      "right" : "throw new ArithmeticException(msg);",
      "info" : "ThrowStatement[21752-21787]:ThrowStatement[21762-21797]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21825-21898]:Block[21835-21908]"
    }, {
      "left" : "ret = 0;",
      "right" : "ret = 0;",
      "info" : "ExpressionStatement[21876-21884]:ExpressionStatement[21886-21894]"
    }, {
      "left" : "return ret;",
      "right" : "return ret;",
      "info" : "ReturnStatement[21917-21928]:ReturnStatement[21927-21938]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22752-24325]:Block[22762-24335]"
    }, {
      "left" : "if (Double.isNaN(d) || Double.isInfinite(d))",
      "right" : "if (Double.isNaN(d) || Double.isInfinite(d))",
      "info" : "IfStatement[22815-23005]:IfStatement[22825-23015]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22860-22897]:Block[22870-22907]"
    }, {
      "left" : "return d;",
      "right" : "return d;",
      "info" : "ReturnStatement[22878-22887]:ReturnStatement[22888-22897]"
    }, {
      "left" : "if (d == 0)",
      "right" : "if (d == 0)",
      "info" : "IfStatement[22903-23005]:IfStatement[22913-23015]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22915-23005]:Block[22925-23015]"
    }, {
      "left" : "return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;",
      "right" : "return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;",
      "info" : "ReturnStatement[22933-22995]:ReturnStatement[22943-23005]"
    }, {
      "left" : "long bits     = Double.doubleToLongBits(d);",
      "right" : "long bits     = Double.doubleToLongBits(d);",
      "info" : "VariableDeclarationStatement[23174-23217]:VariableDeclarationStatement[23184-23227]"
    }, {
      "left" : "long sign     = bits & 0x8000000000000000L;",
      "right" : "long sign     = bits & 0x8000000000000000L;",
      "info" : "VariableDeclarationStatement[23226-23269]:VariableDeclarationStatement[23236-23279]"
    }, {
      "left" : "long exponent = bits & 0x7ff0000000000000L;",
      "right" : "long exponent = bits & 0x7ff0000000000000L;",
      "info" : "VariableDeclarationStatement[23278-23321]:VariableDeclarationStatement[23288-23331]"
    }, {
      "left" : "long mantissa = bits & 0x000fffffffffffffL;",
      "right" : "long mantissa = bits & 0x000fffffffffffffL;",
      "info" : "VariableDeclarationStatement[23330-23373]:VariableDeclarationStatement[23340-23383]"
    }, {
      "left" : "if (d * (direction - d) >= 0)",
      "right" : "if (d * (direction - d) >= 0)",
      "info" : "IfStatement[23383-24318]:IfStatement[23393-24328]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23413-23840]:Block[23423-23850]"
    }, {
      "left" : "if (mantissa == 0x000fffffffffffffL)",
      "right" : "if (mantissa == 0x000fffffffffffffL)",
      "info" : "IfStatement[23482-23830]:IfStatement[23492-23840]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23519-23675]:Block[23529-23685]"
    }, {
      "left" : "return Double.longBitsToDouble(sign |\n                                        (exponent + 0x0010000000000000L));",
      "right" : "return Double.longBitsToDouble(sign |\n                                        (exponent + 0x0010000000000000L));",
      "info" : "ReturnStatement[23545-23657]:ReturnStatement[23555-23667]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23681-23830]:Block[23691-23840]"
    }, {
      "left" : "return Double.longBitsToDouble(sign |\n                                        exponent | (mantissa + 1));",
      "right" : "return Double.longBitsToDouble(sign |\n                                        exponent | (mantissa + 1));",
      "info" : "ReturnStatement[23707-23812]:ReturnStatement[23717-23822]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23846-24318]:Block[23856-24328]"
    }, {
      "left" : "if (mantissa == 0L)",
      "right" : "if (mantissa == 0L)",
      "info" : "IfStatement[23915-24308]:IfStatement[23925-24318]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23935-24153]:Block[23945-24163]"
    }, {
      "left" : "return Double.longBitsToDouble(sign |\n                                        (exponent - 0x0010000000000000L) |\n                                        0x000fffffffffffffL);",
      "right" : "return Double.longBitsToDouble(sign |\n                                        (exponent - 0x0010000000000000L) |\n                                        0x000fffffffffffffL);",
      "info" : "ReturnStatement[23961-24135]:ReturnStatement[23971-24145]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24159-24308]:Block[24169-24318]"
    }, {
      "left" : "return Double.longBitsToDouble(sign |\n                                        exponent | (mantissa - 1));",
      "right" : "return Double.longBitsToDouble(sign |\n                                        exponent | (mantissa - 1));",
      "info" : "ReturnStatement[24185-24290]:ReturnStatement[24195-24300]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24719-25259]:Block[24729-25269]"
    }, {
      "left" : "if ((d == 0) || Double.isNaN(d) || Double.isInfinite(d))",
      "right" : "if ((d == 0) || Double.isNaN(d) || Double.isInfinite(d))",
      "info" : "IfStatement[24782-24872]:IfStatement[24792-24882]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24839-24872]:Block[24849-24882]"
    }, {
      "left" : "return d;",
      "right" : "return d;",
      "info" : "ReturnStatement[24853-24862]:ReturnStatement[24863-24872]"
    }, {
      "left" : "final long bits     = Double.doubleToLongBits(d);",
      "right" : "final long bits     = Double.doubleToLongBits(d);",
      "info" : "VariableDeclarationStatement[24928-24977]:VariableDeclarationStatement[24938-24987]"
    }, {
      "left" : "final long exponent = bits & 0x7ff0000000000000L;",
      "right" : "final long exponent = bits & 0x7ff0000000000000L;",
      "info" : "VariableDeclarationStatement[24986-25035]:VariableDeclarationStatement[24996-25045]"
    }, {
      "left" : "final long rest     = bits & 0x800fffffffffffffL;",
      "right" : "final long rest     = bits & 0x800fffffffffffffL;",
      "info" : "VariableDeclarationStatement[25044-25093]:VariableDeclarationStatement[25054-25103]"
    }, {
      "left" : "final long newBits = rest | (exponent + (((long) scaleFactor) << 52));",
      "right" : "final long newBits = rest | (exponent + (((long) scaleFactor) << 52));",
      "info" : "VariableDeclarationStatement[25133-25203]:VariableDeclarationStatement[25143-25213]"
    }, {
      "left" : "return Double.longBitsToDouble(newBits);",
      "right" : "return Double.longBitsToDouble(newBits);",
      "info" : "ReturnStatement[25212-25252]:ReturnStatement[25222-25262]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26359-26441]:Block[26369-26451]"
    }, {
      "left" : "return a - TWO_PI * Math.floor((a + Math.PI - center) / TWO_PI);",
      "right" : "return a - TWO_PI * Math.floor((a + Math.PI - center) / TWO_PI);",
      "info" : "ReturnStatement[26370-26434]:ReturnStatement[26380-26444]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26834-26899]:Block[26844-26909]"
    }, {
      "left" : "return round(x, scale, BigDecimal.ROUND_HALF_UP);",
      "right" : "return round(x, scale, BigDecimal.ROUND_HALF_UP);",
      "info" : "ReturnStatement[26844-26893]:ReturnStatement[26854-26903]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27439-27824]:Block[27449-27834]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[27449-27818]:TryStatement[27459-27828]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27453-27627]:Block[27463-27637]"
    }, {
      "left" : "return (new BigDecimal\n                   (Double.toString(x))\n                   .setScale(scale, roundingMethod))\n                   .doubleValue();",
      "right" : "return (new BigDecimal\n                   (Double.toString(x))\n                   .setScale(scale, roundingMethod))\n                   .doubleValue();",
      "info" : "ReturnStatement[27467-27617]:ReturnStatement[27477-27627]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27661-27818]:Block[27671-27828]"
    }, {
      "left" : "if (Double.isInfinite(x))",
      "right" : "if (Double.isInfinite(x))",
      "info" : "IfStatement[27675-27808]:IfStatement[27685-27818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27701-27752]:Block[27711-27762]"
    }, {
      "left" : "return x;",
      "right" : "return x;",
      "info" : "ReturnStatement[27719-27728]:ReturnStatement[27729-27738]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27758-27808]:Block[27768-27818]"
    }, {
      "left" : "return Double.NaN;",
      "right" : "return Double.NaN;",
      "info" : "ReturnStatement[27776-27794]:ReturnStatement[27786-27804]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28216-28281]:Block[28226-28291]"
    }, {
      "left" : "return round(x, scale, BigDecimal.ROUND_HALF_UP);",
      "right" : "return round(x, scale, BigDecimal.ROUND_HALF_UP);",
      "info" : "ReturnStatement[28226-28275]:ReturnStatement[28236-28285]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28819-29002]:Block[28829-29012]"
    }, {
      "left" : "float sign = indicator(x);",
      "right" : "float sign = indicator(x);",
      "info" : "VariableDeclarationStatement[28829-28855]:VariableDeclarationStatement[28839-28865]"
    }, {
      "left" : "float factor = (float)Math.pow(10.0f, scale) * sign;",
      "right" : "float factor = (float)Math.pow(10.0f, scale) * sign;",
      "info" : "VariableDeclarationStatement[28864-28916]:VariableDeclarationStatement[28874-28926]"
    }, {
      "left" : "return (float)roundUnscaled(x * factor, sign, roundingMethod) / factor;",
      "right" : "return (float)roundUnscaled(x * factor, sign, roundingMethod) / factor;",
      "info" : "ReturnStatement[28925-28996]:ReturnStatement[28935-29006]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29568-32265]:Block[29578-32275]"
    }, {
      "left" : "switch (roundingMethod) {\n        case BigDecimal.ROUND_CEILING :\n            if (sign == -1) {\n                unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));\n            } else {\n                unscaled = Math.ceil(nextAfter(unscaled, Double.POSITIVE_INFINITY));\n            }\n            break;\n        case BigDecimal.ROUND_DOWN :\n            unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));\n            break;\n        case BigDecimal.ROUND_FLOOR :\n            if (sign == -1) {\n                unscaled = Math.ceil(nextAfter(unscaled, Double.POSITIVE_INFINITY));\n            } else {\n                unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));\n            }\n            break;\n        case BigDecimal.ROUND_HALF_DOWN : {\n            unscaled = nextAfter(unscaled, Double.NEGATIVE_INFINITY);\n            double fraction = unscaled - Math.floor(unscaled);\n            if (fraction > 0.5) {\n                unscaled = Math.ceil(unscaled);\n            } else {\n                unscaled = Math.floor(unscaled);\n            }\n            break;\n        }\n        case BigDecimal.ROUND_HALF_EVEN : {\n            double fraction = unscaled - Math.floor(unscaled);\n            if (fraction > 0.5) {\n                unscaled = Math.ceil(unscaled);\n            } else if (fraction < 0.5) {\n                unscaled = Math.floor(unscaled);\n            } else {\n                // The following equality test is intentional and needed for rounding purposes\n                if (Math.floor(unscaled) / 2.0 == Math.floor(Math\n                    .floor(unscaled) / 2.0)) { // even\n                    unscaled = Math.floor(unscaled);\n                } else { // odd\n                    unscaled = Math.ceil(unscaled);\n                }\n            }\n            break;\n        }\n        case BigDecimal.ROUND_HALF_UP : {\n            unscaled = nextAfter(unscaled, Double.POSITIVE_INFINITY);\n            double fraction = unscaled - Math.floor(unscaled);\n            if (fraction >= 0.5) {\n                unscaled = Math.ceil(unscaled);\n            } else {\n                unscaled = Math.floor(unscaled);\n            }\n            break;\n        }\n        case BigDecimal.ROUND_UNNECESSARY :\n            if (unscaled != Math.floor(unscaled)) {\n                throw new ArithmeticException(\"Inexact result from rounding\");\n            }\n            break;\n        case BigDecimal.ROUND_UP :\n            unscaled = Math.ceil(nextAfter(unscaled,  Double.POSITIVE_INFINITY));\n            break;\n        default :\n            throw new IllegalArgumentException(\"Invalid rounding method.\");\n        }",
      "right" : "switch (roundingMethod) {\n        case BigDecimal.ROUND_CEILING :\n            if (sign == -1) {\n                unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));\n            } else {\n                unscaled = Math.ceil(nextAfter(unscaled, Double.POSITIVE_INFINITY));\n            }\n            break;\n        case BigDecimal.ROUND_DOWN :\n            unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));\n            break;\n        case BigDecimal.ROUND_FLOOR :\n            if (sign == -1) {\n                unscaled = Math.ceil(nextAfter(unscaled, Double.POSITIVE_INFINITY));\n            } else {\n                unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));\n            }\n            break;\n        case BigDecimal.ROUND_HALF_DOWN : {\n            unscaled = nextAfter(unscaled, Double.NEGATIVE_INFINITY);\n            double fraction = unscaled - Math.floor(unscaled);\n            if (fraction > 0.5) {\n                unscaled = Math.ceil(unscaled);\n            } else {\n                unscaled = Math.floor(unscaled);\n            }\n            break;\n        }\n        case BigDecimal.ROUND_HALF_EVEN : {\n            double fraction = unscaled - Math.floor(unscaled);\n            if (fraction > 0.5) {\n                unscaled = Math.ceil(unscaled);\n            } else if (fraction < 0.5) {\n                unscaled = Math.floor(unscaled);\n            } else {\n                // The following equality test is intentional and needed for rounding purposes\n                if (Math.floor(unscaled) / 2.0 == Math.floor(Math\n                    .floor(unscaled) / 2.0)) { // even\n                    unscaled = Math.floor(unscaled);\n                } else { // odd\n                    unscaled = Math.ceil(unscaled);\n                }\n            }\n            break;\n        }\n        case BigDecimal.ROUND_HALF_UP : {\n            unscaled = nextAfter(unscaled, Double.POSITIVE_INFINITY);\n            double fraction = unscaled - Math.floor(unscaled);\n            if (fraction >= 0.5) {\n                unscaled = Math.ceil(unscaled);\n            } else {\n                unscaled = Math.floor(unscaled);\n            }\n            break;\n        }\n        case BigDecimal.ROUND_UNNECESSARY :\n            if (unscaled != Math.floor(unscaled)) {\n                throw new ArithmeticException(\"Inexact result from rounding\");\n            }\n            break;\n        case BigDecimal.ROUND_UP :\n            unscaled = Math.ceil(nextAfter(unscaled,  Double.POSITIVE_INFINITY));\n            break;\n        default :\n            throw new IllegalArgumentException(\"Invalid rounding method.\");\n        }",
      "info" : "SwitchStatement[29578-32234]:SwitchStatement[29588-32244]"
    }, {
      "left" : "case BigDecimal.ROUND_CEILING :",
      "right" : "case BigDecimal.ROUND_CEILING :",
      "info" : "SwitchCase[29612-29643]:SwitchCase[29622-29653]"
    }, {
      "left" : "if (sign == -1)",
      "right" : "if (sign == -1)",
      "info" : "IfStatement[29656-29879]:IfStatement[29666-29889]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29672-29773]:Block[29682-29783]"
    }, {
      "left" : "unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));",
      "right" : "unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));",
      "info" : "ExpressionStatement[29690-29759]:ExpressionStatement[29700-29769]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29779-29879]:Block[29789-29889]"
    }, {
      "left" : "unscaled = Math.ceil(nextAfter(unscaled, Double.POSITIVE_INFINITY));",
      "right" : "unscaled = Math.ceil(nextAfter(unscaled, Double.POSITIVE_INFINITY));",
      "info" : "ExpressionStatement[29797-29865]:ExpressionStatement[29807-29875]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[29892-29898]:BreakStatement[29902-29908]"
    }, {
      "left" : "case BigDecimal.ROUND_DOWN :",
      "right" : "case BigDecimal.ROUND_DOWN :",
      "info" : "SwitchCase[29907-29935]:SwitchCase[29917-29945]"
    }, {
      "left" : "unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));",
      "right" : "unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));",
      "info" : "ExpressionStatement[29948-30017]:ExpressionStatement[29958-30027]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[30030-30036]:BreakStatement[30040-30046]"
    }, {
      "left" : "case BigDecimal.ROUND_FLOOR :",
      "right" : "case BigDecimal.ROUND_FLOOR :",
      "info" : "SwitchCase[30045-30074]:SwitchCase[30055-30084]"
    }, {
      "left" : "if (sign == -1)",
      "right" : "if (sign == -1)",
      "info" : "IfStatement[30087-30310]:IfStatement[30097-30320]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30103-30203]:Block[30113-30213]"
    }, {
      "left" : "unscaled = Math.ceil(nextAfter(unscaled, Double.POSITIVE_INFINITY));",
      "right" : "unscaled = Math.ceil(nextAfter(unscaled, Double.POSITIVE_INFINITY));",
      "info" : "ExpressionStatement[30121-30189]:ExpressionStatement[30131-30199]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30209-30310]:Block[30219-30320]"
    }, {
      "left" : "unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));",
      "right" : "unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));",
      "info" : "ExpressionStatement[30227-30296]:ExpressionStatement[30237-30306]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[30323-30329]:BreakStatement[30333-30339]"
    }, {
      "left" : "case BigDecimal.ROUND_HALF_DOWN :",
      "right" : "case BigDecimal.ROUND_HALF_DOWN :",
      "info" : "SwitchCase[30338-30371]:SwitchCase[30348-30381]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30372-30701]:Block[30382-30711]"
    }, {
      "left" : "unscaled = nextAfter(unscaled, Double.NEGATIVE_INFINITY);",
      "right" : "unscaled = nextAfter(unscaled, Double.NEGATIVE_INFINITY);",
      "info" : "ExpressionStatement[30386-30443]:ExpressionStatement[30396-30453]"
    }, {
      "left" : "double fraction = unscaled - Math.floor(unscaled);",
      "right" : "double fraction = unscaled - Math.floor(unscaled);",
      "info" : "VariableDeclarationStatement[30456-30506]:VariableDeclarationStatement[30466-30516]"
    }, {
      "left" : "if (fraction > 0.5)",
      "right" : "if (fraction > 0.5)",
      "info" : "IfStatement[30519-30672]:IfStatement[30529-30682]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30539-30602]:Block[30549-30612]"
    }, {
      "left" : "unscaled = Math.ceil(unscaled);",
      "right" : "unscaled = Math.ceil(unscaled);",
      "info" : "ExpressionStatement[30557-30588]:ExpressionStatement[30567-30598]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30608-30672]:Block[30618-30682]"
    }, {
      "left" : "unscaled = Math.floor(unscaled);",
      "right" : "unscaled = Math.floor(unscaled);",
      "info" : "ExpressionStatement[30626-30658]:ExpressionStatement[30636-30668]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[30685-30691]:BreakStatement[30695-30701]"
    }, {
      "left" : "case BigDecimal.ROUND_HALF_EVEN :",
      "right" : "case BigDecimal.ROUND_HALF_EVEN :",
      "info" : "SwitchCase[30710-30743]:SwitchCase[30720-30753]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30744-31415]:Block[30754-31425]"
    }, {
      "left" : "double fraction = unscaled - Math.floor(unscaled);",
      "right" : "double fraction = unscaled - Math.floor(unscaled);",
      "info" : "VariableDeclarationStatement[30758-30808]:VariableDeclarationStatement[30768-30818]"
    }, {
      "left" : "if (fraction > 0.5)",
      "right" : "if (fraction > 0.5)",
      "info" : "IfStatement[30821-31386]:IfStatement[30831-31396]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30841-30904]:Block[30851-30914]"
    }, {
      "left" : "unscaled = Math.ceil(unscaled);",
      "right" : "unscaled = Math.ceil(unscaled);",
      "info" : "ExpressionStatement[30859-30890]:ExpressionStatement[30869-30900]"
    }, {
      "left" : "if (fraction < 0.5)",
      "right" : "if (fraction < 0.5)",
      "info" : "IfStatement[30910-31386]:IfStatement[30920-31396]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30930-30994]:Block[30940-31004]"
    }, {
      "left" : "unscaled = Math.floor(unscaled);",
      "right" : "unscaled = Math.floor(unscaled);",
      "info" : "ExpressionStatement[30948-30980]:ExpressionStatement[30958-30990]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31000-31386]:Block[31010-31396]"
    }, {
      "left" : "if (Math.floor(unscaled) / 2.0 == Math.floor(Math\n                    .floor(unscaled) / 2.0))",
      "right" : "if (Math.floor(unscaled) / 2.0 == Math.floor(Math\n                    .floor(unscaled) / 2.0))",
      "info" : "IfStatement[31113-31372]:IfStatement[31123-31382]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31208-31288]:Block[31218-31298]"
    }, {
      "left" : "unscaled = Math.floor(unscaled);",
      "right" : "unscaled = Math.floor(unscaled);",
      "info" : "ExpressionStatement[31238-31270]:ExpressionStatement[31248-31280]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31294-31372]:Block[31304-31382]"
    }, {
      "left" : "unscaled = Math.ceil(unscaled);",
      "right" : "unscaled = Math.ceil(unscaled);",
      "info" : "ExpressionStatement[31323-31354]:ExpressionStatement[31333-31364]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[31399-31405]:BreakStatement[31409-31415]"
    }, {
      "left" : "case BigDecimal.ROUND_HALF_UP :",
      "right" : "case BigDecimal.ROUND_HALF_UP :",
      "info" : "SwitchCase[31424-31455]:SwitchCase[31434-31465]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31456-31786]:Block[31466-31796]"
    }, {
      "left" : "unscaled = nextAfter(unscaled, Double.POSITIVE_INFINITY);",
      "right" : "unscaled = nextAfter(unscaled, Double.POSITIVE_INFINITY);",
      "info" : "ExpressionStatement[31470-31527]:ExpressionStatement[31480-31537]"
    }, {
      "left" : "double fraction = unscaled - Math.floor(unscaled);",
      "right" : "double fraction = unscaled - Math.floor(unscaled);",
      "info" : "VariableDeclarationStatement[31540-31590]:VariableDeclarationStatement[31550-31600]"
    }, {
      "left" : "if (fraction >= 0.5)",
      "right" : "if (fraction >= 0.5)",
      "info" : "IfStatement[31603-31757]:IfStatement[31613-31767]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31624-31687]:Block[31634-31697]"
    }, {
      "left" : "unscaled = Math.ceil(unscaled);",
      "right" : "unscaled = Math.ceil(unscaled);",
      "info" : "ExpressionStatement[31642-31673]:ExpressionStatement[31652-31683]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31693-31757]:Block[31703-31767]"
    }, {
      "left" : "unscaled = Math.floor(unscaled);",
      "right" : "unscaled = Math.floor(unscaled);",
      "info" : "ExpressionStatement[31711-31743]:ExpressionStatement[31721-31753]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[31770-31776]:BreakStatement[31780-31786]"
    }, {
      "left" : "case BigDecimal.ROUND_UNNECESSARY :",
      "right" : "case BigDecimal.ROUND_UNNECESSARY :",
      "info" : "SwitchCase[31795-31830]:SwitchCase[31805-31840]"
    }, {
      "left" : "if (unscaled != Math.floor(unscaled))",
      "right" : "if (unscaled != Math.floor(unscaled))",
      "info" : "IfStatement[31843-31975]:IfStatement[31853-31985]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31881-31975]:Block[31891-31985]"
    }, {
      "left" : "throw new ArithmeticException(\"Inexact result from rounding\");",
      "right" : "throw new ArithmeticException(\"Inexact result from rounding\");",
      "info" : "ThrowStatement[31899-31961]:ThrowStatement[31909-31971]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[31988-31994]:BreakStatement[31998-32004]"
    }, {
      "left" : "case BigDecimal.ROUND_UP :",
      "right" : "case BigDecimal.ROUND_UP :",
      "info" : "SwitchCase[32003-32029]:SwitchCase[32013-32039]"
    }, {
      "left" : "unscaled = Math.ceil(nextAfter(unscaled,  Double.POSITIVE_INFINITY));",
      "right" : "unscaled = Math.ceil(nextAfter(unscaled,  Double.POSITIVE_INFINITY));",
      "info" : "ExpressionStatement[32042-32111]:ExpressionStatement[32052-32121]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[32124-32130]:BreakStatement[32134-32140]"
    }, {
      "left" : "default :",
      "right" : "default :",
      "info" : "SwitchCase[32139-32148]:SwitchCase[32149-32158]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Invalid rounding method.\");",
      "right" : "throw new IllegalArgumentException(\"Invalid rounding method.\");",
      "info" : "ThrowStatement[32161-32224]:ThrowStatement[32171-32234]"
    }, {
      "left" : "return unscaled;",
      "right" : "return unscaled;",
      "info" : "ReturnStatement[32243-32259]:ReturnStatement[32253-32269]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32698-32757]:Block[32708-32767]"
    }, {
      "left" : "return (x == ZB) ? ZB : (x > ZB) ? PB : NB;",
      "right" : "return (x == ZB) ? ZB : (x > ZB) ? PB : NB;",
      "info" : "ReturnStatement[32708-32751]:ReturnStatement[32718-32761]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33339-33476]:Block[33349-33486]"
    }, {
      "left" : "if (Double.isNaN(x))",
      "right" : "if (Double.isNaN(x))",
      "info" : "IfStatement[33349-33412]:IfStatement[33359-33422]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33370-33412]:Block[33380-33422]"
    }, {
      "left" : "return Double.NaN;",
      "right" : "return Double.NaN;",
      "info" : "ReturnStatement[33384-33402]:ReturnStatement[33394-33412]"
    }, {
      "left" : "return (x == 0.0) ? 0.0 : (x > 0.0) ? 1.0 : -1.0;",
      "right" : "return (x == 0.0) ? 0.0 : (x > 0.0) ? 1.0 : -1.0;",
      "info" : "ReturnStatement[33421-33470]:ReturnStatement[33431-33480]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33958-34098]:Block[33968-34108]"
    }, {
      "left" : "if (Float.isNaN(x))",
      "right" : "if (Float.isNaN(x))",
      "info" : "IfStatement[33968-34029]:IfStatement[33978-34039]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33988-34029]:Block[33998-34039]"
    }, {
      "left" : "return Float.NaN;",
      "right" : "return Float.NaN;",
      "info" : "ReturnStatement[34002-34019]:ReturnStatement[34012-34029]"
    }, {
      "left" : "return (x == 0.0F) ? 0.0F : (x > 0.0F) ? 1.0F : -1.0F;",
      "right" : "return (x == 0.0F) ? 0.0F : (x > 0.0F) ? 1.0F : -1.0F;",
      "info" : "ReturnStatement[34038-34092]:ReturnStatement[34048-34102]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34480-34535]:Block[34490-34545]"
    }, {
      "left" : "return (x == 0) ? 0 : (x > 0) ? 1 : -1;",
      "right" : "return (x == 0) ? 0 : (x > 0) ? 1 : -1;",
      "info" : "ReturnStatement[34490-34529]:ReturnStatement[34500-34539]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34926-34986]:Block[34936-34996]"
    }, {
      "left" : "return (x == 0L) ? 0L : (x > 0L) ? 1L : -1L;",
      "right" : "return (x == 0L) ? 0L : (x > 0L) ? 1L : -1L;",
      "info" : "ReturnStatement[34936-34980]:ReturnStatement[34946-34990]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35445-35504]:Block[35455-35514]"
    }, {
      "left" : "return (x == ZS) ? ZS : (x > ZS) ? PS : NS;",
      "right" : "return (x == ZS) ? ZS : (x > ZS) ? PS : NS;",
      "info" : "ReturnStatement[35455-35498]:ReturnStatement[35465-35508]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35785-35843]:Block[35795-35853]"
    }, {
      "left" : "return (Math.exp(x) - Math.exp(-x)) / 2.0;",
      "right" : "return (Math.exp(x) - Math.exp(-x)) / 2.0;",
      "info" : "ReturnStatement[35795-35837]:ReturnStatement[35805-35847]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36191-36394]:Block[36201-36404]"
    }, {
      "left" : "long s = (long)x - (long)y;",
      "right" : "long s = (long)x - (long)y;",
      "info" : "VariableDeclarationStatement[36201-36228]:VariableDeclarationStatement[36211-36238]"
    }, {
      "left" : "if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE)",
      "right" : "if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE)",
      "info" : "IfStatement[36237-36365]:IfStatement[36247-36375]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36289-36365]:Block[36299-36375]"
    }, {
      "left" : "throw new ArithmeticException(\"overflow: subtract\");",
      "right" : "throw new ArithmeticException(\"overflow: subtract\");",
      "info" : "ThrowStatement[36303-36355]:ThrowStatement[36313-36365]"
    }, {
      "left" : "return (int)s;",
      "right" : "return (int)s;",
      "info" : "ReturnStatement[36374-36388]:ReturnStatement[36384-36398]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36749-37119]:Block[36759-37129]"
    }, {
      "left" : "long ret;",
      "right" : "long ret;",
      "info" : "VariableDeclarationStatement[36759-36768]:VariableDeclarationStatement[36769-36778]"
    }, {
      "left" : "String msg = \"overflow: subtract\";",
      "right" : "String msg = \"overflow: subtract\";",
      "info" : "VariableDeclarationStatement[36777-36811]:VariableDeclarationStatement[36787-36821]"
    }, {
      "left" : "if (b == Long.MIN_VALUE)",
      "right" : "if (b == Long.MIN_VALUE)",
      "info" : "IfStatement[36820-37093]:IfStatement[36830-37103]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36845-36997]:Block[36855-37007]"
    }, {
      "left" : "if (a < 0)",
      "right" : "if (a < 0)",
      "info" : "IfStatement[36859-36987]:IfStatement[36869-36997]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36870-36914]:Block[36880-36924]"
    }, {
      "left" : "ret = a - b;",
      "right" : "ret = a - b;",
      "info" : "ExpressionStatement[36888-36900]:ExpressionStatement[36898-36910]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36920-36987]:Block[36930-36997]"
    }, {
      "left" : "throw new ArithmeticException(msg);",
      "right" : "throw new ArithmeticException(msg);",
      "info" : "ThrowStatement[36938-36973]:ThrowStatement[36948-36983]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37003-37093]:Block[37013-37103]"
    }, {
      "left" : "ret = addAndCheck(a, -b, msg);",
      "right" : "ret = addAndCheck(a, -b, msg);",
      "info" : "ExpressionStatement[37053-37083]:ExpressionStatement[37063-37093]"
    }, {
      "left" : "return ret;",
      "right" : "return ret;",
      "info" : "ReturnStatement[37102-37113]:ReturnStatement[37112-37123]"
    } ]
  },
  "interFileMappings" : { }
}