{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "TypeAdapters",
      "right" : "TypeAdapters",
      "info" : "TypeDeclaration[1741-27520]:TypeDeclaration[1741-28071]"
    }, {
      "left" : "private TypeAdapters()",
      "right" : "private TypeAdapters()",
      "info" : "MethodDeclaration[1819-1894]:MethodDeclaration[1819-1894]"
    }, {
      "left" : "@SuppressWarnings(\"rawtypes\")\n  public static final TypeAdapter<Class> CLASS = new TypeAdapter<Class>() {\n    @Override\n    public void write(JsonWriter out, Class value) throws IOException {\n      if (value == null) {\n        out.nullValue();\n      } else {\n        throw new UnsupportedOperationException(\"Attempted to serialize java.lang.Class: \"\n            + value.getName() + \". Forgot to register a type adapter?\");\n      }\n    }\n    @Override\n    public Class read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      } else {\n        throw new UnsupportedOperationException(\n            \"Attempted to deserialize a java.lang.Class. Forgot to register a type adapter?\");\n      }\n    }\n  };",
      "right" : "@SuppressWarnings(\"rawtypes\")\n  public static final TypeAdapter<Class> CLASS = new TypeAdapter<Class>() {\n    @Override\n    public void write(JsonWriter out, Class value) throws IOException {\n      if (value == null) {\n        out.nullValue();\n      } else {\n        throw new UnsupportedOperationException(\"Attempted to serialize java.lang.Class: \"\n            + value.getName() + \". Forgot to register a type adapter?\");\n      }\n    }\n    @Override\n    public Class read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      } else {\n        throw new UnsupportedOperationException(\n            \"Attempted to deserialize a java.lang.Class. Forgot to register a type adapter?\");\n      }\n    }\n  };",
      "info" : "FieldDeclaration[1898-2669]:FieldDeclaration[1898-2669]"
    }, {
      "left" : "public void write(JsonWriter out, Class value) throws IOException",
      "right" : "public void write(JsonWriter out, Class value) throws IOException",
      "info" : "MethodDeclaration[2008-2334]:MethodDeclaration[2008-2334]"
    }, {
      "left" : "public Class read(JsonReader in) throws IOException",
      "right" : "public Class read(JsonReader in) throws IOException",
      "info" : "MethodDeclaration[2339-2664]:MethodDeclaration[2339-2664]"
    }, {
      "left" : "public static final TypeAdapterFactory CLASS_FACTORY = newFactory(Class.class, CLASS);",
      "right" : "public static final TypeAdapterFactory CLASS_FACTORY = newFactory(Class.class, CLASS);",
      "info" : "FieldDeclaration[2672-2758]:FieldDeclaration[2672-2758]"
    }, {
      "left" : "public static final TypeAdapter<BitSet> BIT_SET = new TypeAdapter<BitSet>() {\n    public BitSet read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n\n      BitSet bitset = new BitSet();\n      in.beginArray();\n      int i = 0;\n      JsonToken tokenType = in.peek();\n      while (tokenType != JsonToken.END_ARRAY) {\n        boolean set;\n        switch (tokenType) {\n        case NUMBER:\n          set = in.nextInt() != 0;\n          break;\n        case BOOLEAN:\n          set = in.nextBoolean();\n          break;\n        case STRING:\n          String stringValue = in.nextString();\n          try {\n            set = Integer.parseInt(stringValue) != 0;\n          } catch (NumberFormatException e) {\n            throw new JsonSyntaxException(\n                \"Error: Expecting: bitset number value (1, 0), Found: \" + stringValue);\n          }\n          break;\n        default:\n          throw new JsonSyntaxException(\"Invalid bitset value type: \" + tokenType);\n        }\n        if (set) {\n          bitset.set(i);\n        }\n        ++i;\n        tokenType = in.peek();\n      }\n      in.endArray();\n      return bitset;\n    }\n\n    public void write(JsonWriter out, BitSet src) throws IOException {\n      if (src == null) {\n        out.nullValue();\n        return;\n      }\n\n      out.beginArray();\n      for (int i = 0; i < src.length(); i++) {\n        int value = (src.get(i)) ? 1 : 0;\n        out.value(value);\n      }\n      out.endArray();\n    }\n  };",
      "right" : "public static final TypeAdapter<BitSet> BIT_SET = new TypeAdapter<BitSet>() {\n    public BitSet read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n\n      BitSet bitset = new BitSet();\n      in.beginArray();\n      int i = 0;\n      JsonToken tokenType = in.peek();\n      while (tokenType != JsonToken.END_ARRAY) {\n        boolean set;\n        switch (tokenType) {\n        case NUMBER:\n          set = in.nextInt() != 0;\n          break;\n        case BOOLEAN:\n          set = in.nextBoolean();\n          break;\n        case STRING:\n          String stringValue = in.nextString();\n          try {\n            set = Integer.parseInt(stringValue) != 0;\n          } catch (NumberFormatException e) {\n            throw new JsonSyntaxException(\n                \"Error: Expecting: bitset number value (1, 0), Found: \" + stringValue);\n          }\n          break;\n        default:\n          throw new JsonSyntaxException(\"Invalid bitset value type: \" + tokenType);\n        }\n        if (set) {\n          bitset.set(i);\n        }\n        ++i;\n        tokenType = in.peek();\n      }\n      in.endArray();\n      return bitset;\n    }\n\n    public void write(JsonWriter out, BitSet src) throws IOException {\n      if (src == null) {\n        out.nullValue();\n        return;\n      }\n\n      out.beginArray();\n      for (int i = 0; i < src.length(); i++) {\n        int value = (src.get(i)) ? 1 : 0;\n        out.value(value);\n      }\n      out.endArray();\n    }\n  };",
      "info" : "FieldDeclaration[2762-4289]:FieldDeclaration[2762-4289]"
    }, {
      "left" : "public BitSet read(JsonReader in) throws IOException",
      "right" : "public BitSet read(JsonReader in) throws IOException",
      "info" : "MethodDeclaration[2844-3962]:MethodDeclaration[2844-3962]"
    }, {
      "left" : "public void write(JsonWriter out, BitSet src) throws IOException",
      "right" : "public void write(JsonWriter out, BitSet src) throws IOException",
      "info" : "MethodDeclaration[3968-4284]:MethodDeclaration[3968-4284]"
    }, {
      "left" : "public static final TypeAdapterFactory BIT_SET_FACTORY = newFactory(BitSet.class, BIT_SET);",
      "right" : "public static final TypeAdapterFactory BIT_SET_FACTORY = newFactory(BitSet.class, BIT_SET);",
      "info" : "FieldDeclaration[4293-4384]:FieldDeclaration[4293-4384]"
    }, {
      "left" : "public static final TypeAdapter<Boolean> BOOLEAN = new TypeAdapter<Boolean>() {\n    @Override\n    public Boolean read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      } else if (in.peek() == JsonToken.STRING) {\n        // support strings for compatibility with GSON 1.7\n        return Boolean.parseBoolean(in.nextString());\n      }\n      return in.nextBoolean();\n    }\n    @Override\n    public void write(JsonWriter out, Boolean value) throws IOException {\n      if (value == null) {\n        out.nullValue();\n        return;\n      }\n      out.value(value);\n    }\n  };",
      "right" : "public static final TypeAdapter<Boolean> BOOLEAN = new TypeAdapter<Boolean>() {\n    @Override\n    public Boolean read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      } else if (in.peek() == JsonToken.STRING) {\n        // support strings for compatibility with GSON 1.7\n        return Boolean.parseBoolean(in.nextString());\n      }\n      return in.nextBoolean();\n    }\n    @Override\n    public void write(JsonWriter out, Boolean value) throws IOException {\n      if (value == null) {\n        out.nullValue();\n        return;\n      }\n      out.value(value);\n    }\n  };",
      "info" : "FieldDeclaration[4388-5033]:FieldDeclaration[4388-5033]"
    }, {
      "left" : "public Boolean read(JsonReader in) throws IOException",
      "right" : "public Boolean read(JsonReader in) throws IOException",
      "info" : "MethodDeclaration[4472-4834]:MethodDeclaration[4472-4834]"
    }, {
      "left" : "public void write(JsonWriter out, Boolean value) throws IOException",
      "right" : "public void write(JsonWriter out, Boolean value) throws IOException",
      "info" : "MethodDeclaration[4839-5028]:MethodDeclaration[4839-5028]"
    }, {
      "left" : "public static final TypeAdapter<Boolean> BOOLEAN_AS_STRING = new TypeAdapter<Boolean>() {\n    @Override public Boolean read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      return Boolean.valueOf(in.nextString());\n    }\n\n    @Override public void write(JsonWriter out, Boolean value) throws IOException {\n      out.value(value == null ? \"null\" : value.toString());\n    }\n  };",
      "right" : "public static final TypeAdapter<Boolean> BOOLEAN_AS_STRING = new TypeAdapter<Boolean>() {\n    @Override public Boolean read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      return Boolean.valueOf(in.nextString());\n    }\n\n    @Override public void write(JsonWriter out, Boolean value) throws IOException {\n      out.value(value == null ? \"null\" : value.toString());\n    }\n  };",
      "info" : "FieldDeclaration[5037-5614]:FieldDeclaration[5037-5614]"
    }, {
      "left" : "public Boolean read(JsonReader in) throws IOException",
      "right" : "public Boolean read(JsonReader in) throws IOException",
      "info" : "MethodDeclaration[5247-5458]:MethodDeclaration[5247-5458]"
    }, {
      "left" : "public void write(JsonWriter out, Boolean value) throws IOException",
      "right" : "public void write(JsonWriter out, Boolean value) throws IOException",
      "info" : "MethodDeclaration[5464-5609]:MethodDeclaration[5464-5609]"
    }, {
      "left" : "public static final TypeAdapterFactory BOOLEAN_FACTORY\n      = newFactory(boolean.class, Boolean.class, BOOLEAN);",
      "right" : "public static final TypeAdapterFactory BOOLEAN_FACTORY\n      = newFactory(boolean.class, Boolean.class, BOOLEAN);",
      "info" : "FieldDeclaration[5618-5731]:FieldDeclaration[5618-5731]"
    }, {
      "left" : "public static final TypeAdapter<Number> BYTE = new TypeAdapter<Number>() {\n    @Override\n    public Number read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      try {\n        int intValue = in.nextInt();\n        return (byte) intValue;\n      } catch (NumberFormatException e) {\n        throw new JsonSyntaxException(e);\n      }\n    }\n    @Override\n    public void write(JsonWriter out, Number value) throws IOException {\n      out.value(value);\n    }\n  };",
      "right" : "public static final TypeAdapter<Number> BYTE = new TypeAdapter<Number>() {\n    @Override\n    public Number read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      try {\n        int intValue = in.nextInt();\n        return (byte) intValue;\n      } catch (NumberFormatException e) {\n        throw new JsonSyntaxException(e);\n      }\n    }\n    @Override\n    public void write(JsonWriter out, Number value) throws IOException {\n      out.value(value);\n    }\n  };",
      "info" : "FieldDeclaration[5735-6276]:FieldDeclaration[5735-6276]"
    }, {
      "left" : "public Number read(JsonReader in) throws IOException",
      "right" : "public Number read(JsonReader in) throws IOException",
      "info" : "MethodDeclaration[5814-6154]:MethodDeclaration[5814-6154]"
    }, {
      "left" : "public void write(JsonWriter out, Number value) throws IOException",
      "right" : "public void write(JsonWriter out, Number value) throws IOException",
      "info" : "MethodDeclaration[6159-6271]:MethodDeclaration[6159-6271]"
    }, {
      "left" : "public static final TypeAdapterFactory BYTE_FACTORY\n      = newFactory(byte.class, Byte.class, BYTE);",
      "right" : "public static final TypeAdapterFactory BYTE_FACTORY\n      = newFactory(byte.class, Byte.class, BYTE);",
      "info" : "FieldDeclaration[6280-6381]:FieldDeclaration[6280-6381]"
    }, {
      "left" : "public static final TypeAdapter<Number> SHORT = new TypeAdapter<Number>() {\n    @Override\n    public Number read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      try {\n        return (short) in.nextInt();\n      } catch (NumberFormatException e) {\n        throw new JsonSyntaxException(e);\n      }\n    }\n    @Override\n    public void write(JsonWriter out, Number value) throws IOException {\n      out.value(value);\n    }\n  };",
      "right" : "public static final TypeAdapter<Number> SHORT = new TypeAdapter<Number>() {\n    @Override\n    public Number read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      try {\n        return (short) in.nextInt();\n      } catch (NumberFormatException e) {\n        throw new JsonSyntaxException(e);\n      }\n    }\n    @Override\n    public void write(JsonWriter out, Number value) throws IOException {\n      out.value(value);\n    }\n  };",
      "info" : "FieldDeclaration[6385-6895]:FieldDeclaration[6385-6895]"
    }, {
      "left" : "public Number read(JsonReader in) throws IOException",
      "right" : "public Number read(JsonReader in) throws IOException",
      "info" : "MethodDeclaration[6465-6773]:MethodDeclaration[6465-6773]"
    }, {
      "left" : "public void write(JsonWriter out, Number value) throws IOException",
      "right" : "public void write(JsonWriter out, Number value) throws IOException",
      "info" : "MethodDeclaration[6778-6890]:MethodDeclaration[6778-6890]"
    }, {
      "left" : "public static final TypeAdapterFactory SHORT_FACTORY\n      = newFactory(short.class, Short.class, SHORT);",
      "right" : "public static final TypeAdapterFactory SHORT_FACTORY\n      = newFactory(short.class, Short.class, SHORT);",
      "info" : "FieldDeclaration[6899-7004]:FieldDeclaration[6899-7004]"
    }, {
      "left" : "public static final TypeAdapter<Number> INTEGER = new TypeAdapter<Number>() {\n    @Override\n    public Number read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      try {\n        return in.nextInt();\n      } catch (NumberFormatException e) {\n        throw new JsonSyntaxException(e);\n      }\n    }\n    @Override\n    public void write(JsonWriter out, Number value) throws IOException {\n      out.value(value);\n    }\n  };",
      "right" : "public static final TypeAdapter<Number> INTEGER = new TypeAdapter<Number>() {\n    @Override\n    public Number read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      try {\n        return in.nextInt();\n      } catch (NumberFormatException e) {\n        throw new JsonSyntaxException(e);\n      }\n    }\n    @Override\n    public void write(JsonWriter out, Number value) throws IOException {\n      out.value(value);\n    }\n  };",
      "info" : "FieldDeclaration[7008-7512]:FieldDeclaration[7008-7512]"
    }, {
      "left" : "public Number read(JsonReader in) throws IOException",
      "right" : "public Number read(JsonReader in) throws IOException",
      "info" : "MethodDeclaration[7090-7390]:MethodDeclaration[7090-7390]"
    }, {
      "left" : "public void write(JsonWriter out, Number value) throws IOException",
      "right" : "public void write(JsonWriter out, Number value) throws IOException",
      "info" : "MethodDeclaration[7395-7507]:MethodDeclaration[7395-7507]"
    }, {
      "left" : "public static final TypeAdapterFactory INTEGER_FACTORY\n      = newFactory(int.class, Integer.class, INTEGER);",
      "right" : "public static final TypeAdapterFactory INTEGER_FACTORY\n      = newFactory(int.class, Integer.class, INTEGER);",
      "info" : "FieldDeclaration[7516-7625]:FieldDeclaration[7516-7625]"
    }, {
      "left" : "public static final TypeAdapter<Number> LONG = new TypeAdapter<Number>() {\n    @Override\n    public Number read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      try {\n        return in.nextLong();\n      } catch (NumberFormatException e) {\n        throw new JsonSyntaxException(e);\n      }\n    }\n    @Override\n    public void write(JsonWriter out, Number value) throws IOException {\n      out.value(value);\n    }\n  };",
      "right" : "public static final TypeAdapter<Number> LONG = new TypeAdapter<Number>() {\n    @Override\n    public Number read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      try {\n        return in.nextLong();\n      } catch (NumberFormatException e) {\n        throw new JsonSyntaxException(e);\n      }\n    }\n    @Override\n    public void write(JsonWriter out, Number value) throws IOException {\n      out.value(value);\n    }\n  };",
      "info" : "FieldDeclaration[7629-8131]:FieldDeclaration[7629-8131]"
    }, {
      "left" : "public Number read(JsonReader in) throws IOException",
      "right" : "public Number read(JsonReader in) throws IOException",
      "info" : "MethodDeclaration[7708-8009]:MethodDeclaration[7708-8009]"
    }, {
      "left" : "public void write(JsonWriter out, Number value) throws IOException",
      "right" : "public void write(JsonWriter out, Number value) throws IOException",
      "info" : "MethodDeclaration[8014-8126]:MethodDeclaration[8014-8126]"
    }, {
      "left" : "public static final TypeAdapter<Number> FLOAT = new TypeAdapter<Number>() {\n    @Override\n    public Number read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      return (float) in.nextDouble();\n    }\n    @Override\n    public void write(JsonWriter out, Number value) throws IOException {\n      out.value(value);\n    }\n  };",
      "right" : "public static final TypeAdapter<Number> FLOAT = new TypeAdapter<Number>() {\n    @Override\n    public Number read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      return (float) in.nextDouble();\n    }\n    @Override\n    public void write(JsonWriter out, Number value) throws IOException {\n      out.value(value);\n    }\n  };",
      "info" : "FieldDeclaration[8135-8542]:FieldDeclaration[8135-8542]"
    }, {
      "left" : "public Number read(JsonReader in) throws IOException",
      "right" : "public Number read(JsonReader in) throws IOException",
      "info" : "MethodDeclaration[8215-8420]:MethodDeclaration[8215-8420]"
    }, {
      "left" : "public void write(JsonWriter out, Number value) throws IOException",
      "right" : "public void write(JsonWriter out, Number value) throws IOException",
      "info" : "MethodDeclaration[8425-8537]:MethodDeclaration[8425-8537]"
    }, {
      "left" : "public static final TypeAdapter<Number> DOUBLE = new TypeAdapter<Number>() {\n    @Override\n    public Number read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      return in.nextDouble();\n    }\n    @Override\n    public void write(JsonWriter out, Number value) throws IOException {\n      out.value(value);\n    }\n  };",
      "right" : "public static final TypeAdapter<Number> DOUBLE = new TypeAdapter<Number>() {\n    @Override\n    public Number read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      return in.nextDouble();\n    }\n    @Override\n    public void write(JsonWriter out, Number value) throws IOException {\n      out.value(value);\n    }\n  };",
      "info" : "FieldDeclaration[8546-8946]:FieldDeclaration[8546-8946]"
    }, {
      "left" : "public Number read(JsonReader in) throws IOException",
      "right" : "public Number read(JsonReader in) throws IOException",
      "info" : "MethodDeclaration[8627-8824]:MethodDeclaration[8627-8824]"
    }, {
      "left" : "public void write(JsonWriter out, Number value) throws IOException",
      "right" : "public void write(JsonWriter out, Number value) throws IOException",
      "info" : "MethodDeclaration[8829-8941]:MethodDeclaration[8829-8941]"
    }, {
      "left" : "public static final TypeAdapter<Number> NUMBER = new TypeAdapter<Number>() {\n    @Override\n    public Number read(JsonReader in) throws IOException {\n      JsonToken jsonToken = in.peek();\n      switch (jsonToken) {\n      case NULL:\n        in.nextNull();\n        return null;\n      case NUMBER:\n        return new LazilyParsedNumber(in.nextString());\n      default:\n        throw new JsonSyntaxException(\"Expecting number, got: \" + jsonToken);\n      }\n    }\n    @Override\n    public void write(JsonWriter out, Number value) throws IOException {\n      out.value(value);\n    }\n  };",
      "right" : "public static final TypeAdapter<Number> NUMBER = new TypeAdapter<Number>() {\n    @Override\n    public Number read(JsonReader in) throws IOException {\n      JsonToken jsonToken = in.peek();\n      switch (jsonToken) {\n      case NULL:\n        in.nextNull();\n        return null;\n      case NUMBER:\n        return new LazilyParsedNumber(in.nextString());\n      default:\n        throw new JsonSyntaxException(\"Expecting number, got: \" + jsonToken);\n      }\n    }\n    @Override\n    public void write(JsonWriter out, Number value) throws IOException {\n      out.value(value);\n    }\n  };",
      "info" : "FieldDeclaration[8950-9530]:FieldDeclaration[8950-9530]"
    }, {
      "left" : "public Number read(JsonReader in) throws IOException",
      "right" : "public Number read(JsonReader in) throws IOException",
      "info" : "MethodDeclaration[9031-9408]:MethodDeclaration[9031-9408]"
    }, {
      "left" : "public void write(JsonWriter out, Number value) throws IOException",
      "right" : "public void write(JsonWriter out, Number value) throws IOException",
      "info" : "MethodDeclaration[9413-9525]:MethodDeclaration[9413-9525]"
    }, {
      "left" : "public static final TypeAdapterFactory NUMBER_FACTORY = newFactory(Number.class, NUMBER);",
      "right" : "public static final TypeAdapterFactory NUMBER_FACTORY = newFactory(Number.class, NUMBER);",
      "info" : "FieldDeclaration[9534-9623]:FieldDeclaration[9534-9623]"
    }, {
      "left" : "public static final TypeAdapter<Character> CHARACTER = new TypeAdapter<Character>() {\n    @Override\n    public Character read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      String str = in.nextString();\n      if (str.length() != 1) {\n        throw new JsonSyntaxException(\"Expecting character, got: \" + str);\n      }\n      return str.charAt(0);\n    }\n    @Override\n    public void write(JsonWriter out, Character value) throws IOException {\n      out.value(value == null ? null : String.valueOf(value));\n    }\n  };",
      "right" : "public static final TypeAdapter<Character> CHARACTER = new TypeAdapter<Character>() {\n    @Override\n    public Character read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      String str = in.nextString();\n      if (str.length() != 1) {\n        throw new JsonSyntaxException(\"Expecting character, got: \" + str);\n      }\n      return str.charAt(0);\n    }\n    @Override\n    public void write(JsonWriter out, Character value) throws IOException {\n      out.value(value == null ? null : String.valueOf(value));\n    }\n  };",
      "info" : "FieldDeclaration[9627-10229]:FieldDeclaration[9627-10229]"
    }, {
      "left" : "public Character read(JsonReader in) throws IOException",
      "right" : "public Character read(JsonReader in) throws IOException",
      "info" : "MethodDeclaration[9717-10065]:MethodDeclaration[9717-10065]"
    }, {
      "left" : "public void write(JsonWriter out, Character value) throws IOException",
      "right" : "public void write(JsonWriter out, Character value) throws IOException",
      "info" : "MethodDeclaration[10070-10224]:MethodDeclaration[10070-10224]"
    }, {
      "left" : "public static final TypeAdapterFactory CHARACTER_FACTORY\n      = newFactory(char.class, Character.class, CHARACTER);",
      "right" : "public static final TypeAdapterFactory CHARACTER_FACTORY\n      = newFactory(char.class, Character.class, CHARACTER);",
      "info" : "FieldDeclaration[10233-10349]:FieldDeclaration[10233-10349]"
    }, {
      "left" : "public static final TypeAdapter<String> STRING = new TypeAdapter<String>() {\n    @Override\n    public String read(JsonReader in) throws IOException {\n      JsonToken peek = in.peek();\n      if (peek == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      \n      if (peek == JsonToken.BOOLEAN) {\n        return Boolean.toString(in.nextBoolean());\n      }\n      return in.nextString();\n    }\n    @Override\n    public void write(JsonWriter out, String value) throws IOException {\n      out.value(value);\n    }\n  };",
      "right" : "public static final TypeAdapter<String> STRING = new TypeAdapter<String>() {\n    @Override\n    public String read(JsonReader in) throws IOException {\n      JsonToken peek = in.peek();\n      if (peek == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      \n      if (peek == JsonToken.BOOLEAN) {\n        return Boolean.toString(in.nextBoolean());\n      }\n      return in.nextString();\n    }\n    @Override\n    public void write(JsonWriter out, String value) throws IOException {\n      out.value(value);\n    }\n  };",
      "info" : "FieldDeclaration[10353-10947]:FieldDeclaration[10353-10947]"
    }, {
      "left" : "public String read(JsonReader in) throws IOException",
      "right" : "public String read(JsonReader in) throws IOException",
      "info" : "MethodDeclaration[10434-10825]:MethodDeclaration[10434-10825]"
    }, {
      "left" : "public void write(JsonWriter out, String value) throws IOException",
      "right" : "public void write(JsonWriter out, String value) throws IOException",
      "info" : "MethodDeclaration[10830-10942]:MethodDeclaration[10830-10942]"
    }, {
      "left" : "public static final TypeAdapter<BigDecimal> BIG_DECIMAL = new TypeAdapter<BigDecimal>() {\n    @Override public BigDecimal read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      try {\n        return new BigDecimal(in.nextString());\n      } catch (NumberFormatException e) {\n        throw new JsonSyntaxException(e);\n      }\n    }\n\n    @Override public void write(JsonWriter out, BigDecimal value) throws IOException {\n      out.value(value);\n    }\n  };",
      "right" : "public static final TypeAdapter<BigDecimal> BIG_DECIMAL = new TypeAdapter<BigDecimal>() {\n    @Override public BigDecimal read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      try {\n        return new BigDecimal(in.nextString());\n      } catch (NumberFormatException e) {\n        throw new JsonSyntaxException(e);\n      }\n    }\n\n    @Override public void write(JsonWriter out, BigDecimal value) throws IOException {\n      out.value(value);\n    }\n  };",
      "info" : "FieldDeclaration[10953-11489]:FieldDeclaration[10953-11489]"
    }, {
      "left" : "public BigDecimal read(JsonReader in) throws IOException",
      "right" : "public BigDecimal read(JsonReader in) throws IOException",
      "info" : "MethodDeclaration[11047-11366]:MethodDeclaration[11047-11366]"
    }, {
      "left" : "public void write(JsonWriter out, BigDecimal value) throws IOException",
      "right" : "public void write(JsonWriter out, BigDecimal value) throws IOException",
      "info" : "MethodDeclaration[11372-11484]:MethodDeclaration[11372-11484]"
    }, {
      "left" : "public static final TypeAdapter<BigInteger> BIG_INTEGER = new TypeAdapter<BigInteger>() {\n    @Override public BigInteger read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      try {\n        return new BigInteger(in.nextString());\n      } catch (NumberFormatException e) {\n        throw new JsonSyntaxException(e);\n      }\n    }\n\n    @Override public void write(JsonWriter out, BigInteger value) throws IOException {\n      out.value(value);\n    }\n  };",
      "right" : "public static final TypeAdapter<BigInteger> BIG_INTEGER = new TypeAdapter<BigInteger>() {\n    @Override public BigInteger read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      try {\n        return new BigInteger(in.nextString());\n      } catch (NumberFormatException e) {\n        throw new JsonSyntaxException(e);\n      }\n    }\n\n    @Override public void write(JsonWriter out, BigInteger value) throws IOException {\n      out.value(value);\n    }\n  };",
      "info" : "FieldDeclaration[11495-12031]:FieldDeclaration[11495-12031]"
    }, {
      "left" : "public BigInteger read(JsonReader in) throws IOException",
      "right" : "public BigInteger read(JsonReader in) throws IOException",
      "info" : "MethodDeclaration[11589-11908]:MethodDeclaration[11589-11908]"
    }, {
      "left" : "public void write(JsonWriter out, BigInteger value) throws IOException",
      "right" : "public void write(JsonWriter out, BigInteger value) throws IOException",
      "info" : "MethodDeclaration[11914-12026]:MethodDeclaration[11914-12026]"
    }, {
      "left" : "public static final TypeAdapterFactory STRING_FACTORY = newFactory(String.class, STRING);",
      "right" : "public static final TypeAdapterFactory STRING_FACTORY = newFactory(String.class, STRING);",
      "info" : "FieldDeclaration[12035-12124]:FieldDeclaration[12035-12124]"
    }, {
      "left" : "public static final TypeAdapter<StringBuilder> STRING_BUILDER = new TypeAdapter<StringBuilder>() {\n    @Override\n    public StringBuilder read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      return new StringBuilder(in.nextString());\n    }\n    @Override\n    public void write(JsonWriter out, StringBuilder value) throws IOException {\n      out.value(value == null ? null : value.toString());\n    }\n  };",
      "right" : "public static final TypeAdapter<StringBuilder> STRING_BUILDER = new TypeAdapter<StringBuilder>() {\n    @Override\n    public StringBuilder read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      return new StringBuilder(in.nextString());\n    }\n    @Override\n    public void write(JsonWriter out, StringBuilder value) throws IOException {\n      out.value(value == null ? null : value.toString());\n    }\n  };",
      "info" : "FieldDeclaration[12128-12617]:FieldDeclaration[12128-12617]"
    }, {
      "left" : "public StringBuilder read(JsonReader in) throws IOException",
      "right" : "public StringBuilder read(JsonReader in) throws IOException",
      "info" : "MethodDeclaration[12231-12454]:MethodDeclaration[12231-12454]"
    }, {
      "left" : "public void write(JsonWriter out, StringBuilder value) throws IOException",
      "right" : "public void write(JsonWriter out, StringBuilder value) throws IOException",
      "info" : "MethodDeclaration[12459-12612]:MethodDeclaration[12459-12612]"
    }, {
      "left" : "public static final TypeAdapterFactory STRING_BUILDER_FACTORY =\n    newFactory(StringBuilder.class, STRING_BUILDER);",
      "right" : "public static final TypeAdapterFactory STRING_BUILDER_FACTORY =\n    newFactory(StringBuilder.class, STRING_BUILDER);",
      "info" : "FieldDeclaration[12621-12737]:FieldDeclaration[12621-12737]"
    }, {
      "left" : "public static final TypeAdapter<StringBuffer> STRING_BUFFER = new TypeAdapter<StringBuffer>() {\n    @Override\n    public StringBuffer read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      return new StringBuffer(in.nextString());\n    }\n    @Override\n    public void write(JsonWriter out, StringBuffer value) throws IOException {\n      out.value(value == null ? null : value.toString());\n    }\n  };",
      "right" : "public static final TypeAdapter<StringBuffer> STRING_BUFFER = new TypeAdapter<StringBuffer>() {\n    @Override\n    public StringBuffer read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      return new StringBuffer(in.nextString());\n    }\n    @Override\n    public void write(JsonWriter out, StringBuffer value) throws IOException {\n      out.value(value == null ? null : value.toString());\n    }\n  };",
      "info" : "FieldDeclaration[12741-13224]:FieldDeclaration[12741-13224]"
    }, {
      "left" : "public StringBuffer read(JsonReader in) throws IOException",
      "right" : "public StringBuffer read(JsonReader in) throws IOException",
      "info" : "MethodDeclaration[12841-13062]:MethodDeclaration[12841-13062]"
    }, {
      "left" : "public void write(JsonWriter out, StringBuffer value) throws IOException",
      "right" : "public void write(JsonWriter out, StringBuffer value) throws IOException",
      "info" : "MethodDeclaration[13067-13219]:MethodDeclaration[13067-13219]"
    }, {
      "left" : "public static final TypeAdapterFactory STRING_BUFFER_FACTORY =\n    newFactory(StringBuffer.class, STRING_BUFFER);",
      "right" : "public static final TypeAdapterFactory STRING_BUFFER_FACTORY =\n    newFactory(StringBuffer.class, STRING_BUFFER);",
      "info" : "FieldDeclaration[13228-13341]:FieldDeclaration[13228-13341]"
    }, {
      "left" : "public static final TypeAdapter<URL> URL = new TypeAdapter<URL>() {\n    @Override\n    public URL read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      String nextString = in.nextString();\n      return \"null\".equals(nextString) ? null : new URL(nextString);\n    }\n    @Override\n    public void write(JsonWriter out, URL value) throws IOException {\n      out.value(value == null ? null : value.toExternalForm());\n    }\n  };",
      "right" : "public static final TypeAdapter<URL> URL = new TypeAdapter<URL>() {\n    @Override\n    public URL read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      String nextString = in.nextString();\n      return \"null\".equals(nextString) ? null : new URL(nextString);\n    }\n    @Override\n    public void write(JsonWriter out, URL value) throws IOException {\n      out.value(value == null ? null : value.toExternalForm());\n    }\n  };",
      "info" : "FieldDeclaration[13345-13852]:FieldDeclaration[13345-13852]"
    }, {
      "left" : "public URL read(JsonReader in) throws IOException",
      "right" : "public URL read(JsonReader in) throws IOException",
      "info" : "MethodDeclaration[13417-13693]:MethodDeclaration[13417-13693]"
    }, {
      "left" : "public void write(JsonWriter out, URL value) throws IOException",
      "right" : "public void write(JsonWriter out, URL value) throws IOException",
      "info" : "MethodDeclaration[13698-13847]:MethodDeclaration[13698-13847]"
    }, {
      "left" : "public static final TypeAdapterFactory URL_FACTORY = newFactory(URL.class, URL);",
      "right" : "public static final TypeAdapterFactory URL_FACTORY = newFactory(URL.class, URL);",
      "info" : "FieldDeclaration[13856-13936]:FieldDeclaration[13856-13936]"
    }, {
      "left" : "public static final TypeAdapter<URI> URI = new TypeAdapter<URI>() {\n    @Override\n    public URI read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      try {\n        String nextString = in.nextString();\n        return \"null\".equals(nextString) ? null : new URI(nextString);\n      } catch (URISyntaxException e) {\n        throw new JsonIOException(e);\n      }\n    }\n    @Override\n    public void write(JsonWriter out, URI value) throws IOException {\n      out.value(value == null ? null : value.toASCIIString());\n    }\n  };",
      "right" : "public static final TypeAdapter<URI> URI = new TypeAdapter<URI>() {\n    @Override\n    public URI read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      try {\n        String nextString = in.nextString();\n        return \"null\".equals(nextString) ? null : new URI(nextString);\n      } catch (URISyntaxException e) {\n        throw new JsonIOException(e);\n      }\n    }\n    @Override\n    public void write(JsonWriter out, URI value) throws IOException {\n      out.value(value == null ? null : value.toASCIIString());\n    }\n  };",
      "info" : "FieldDeclaration[13940-14547]:FieldDeclaration[13940-14547]"
    }, {
      "left" : "public URI read(JsonReader in) throws IOException",
      "right" : "public URI read(JsonReader in) throws IOException",
      "info" : "MethodDeclaration[14012-14389]:MethodDeclaration[14012-14389]"
    }, {
      "left" : "public void write(JsonWriter out, URI value) throws IOException",
      "right" : "public void write(JsonWriter out, URI value) throws IOException",
      "info" : "MethodDeclaration[14394-14542]:MethodDeclaration[14394-14542]"
    }, {
      "left" : "public static final TypeAdapterFactory URI_FACTORY = newFactory(URI.class, URI);",
      "right" : "public static final TypeAdapterFactory URI_FACTORY = newFactory(URI.class, URI);",
      "info" : "FieldDeclaration[14551-14631]:FieldDeclaration[14551-14631]"
    }, {
      "left" : "public static final TypeAdapter<InetAddress> INET_ADDRESS = new TypeAdapter<InetAddress>() {\n    @Override\n    public InetAddress read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      // regrettably, this should have included both the host name and the host address\n      return InetAddress.getByName(in.nextString());\n    }\n    @Override\n    public void write(JsonWriter out, InetAddress value) throws IOException {\n      out.value(value == null ? null : value.getHostAddress());\n    }\n  };",
      "right" : "public static final TypeAdapter<InetAddress> INET_ADDRESS = new TypeAdapter<InetAddress>() {\n    @Override\n    public InetAddress read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      // regrettably, this should have included both the host name and the host address\n      return InetAddress.getByName(in.nextString());\n    }\n    @Override\n    public void write(JsonWriter out, InetAddress value) throws IOException {\n      out.value(value == null ? null : value.getHostAddress());\n    }\n  };",
      "info" : "FieldDeclaration[14635-15212]:FieldDeclaration[14635-15212]"
    }, {
      "left" : "public InetAddress read(JsonReader in) throws IOException",
      "right" : "public InetAddress read(JsonReader in) throws IOException",
      "info" : "MethodDeclaration[14732-15045]:MethodDeclaration[14732-15045]"
    }, {
      "left" : "public void write(JsonWriter out, InetAddress value) throws IOException",
      "right" : "public void write(JsonWriter out, InetAddress value) throws IOException",
      "info" : "MethodDeclaration[15050-15207]:MethodDeclaration[15050-15207]"
    }, {
      "left" : "public static final TypeAdapterFactory INET_ADDRESS_FACTORY =\n    newTypeHierarchyFactory(InetAddress.class, INET_ADDRESS);",
      "right" : "public static final TypeAdapterFactory INET_ADDRESS_FACTORY =\n    newTypeHierarchyFactory(InetAddress.class, INET_ADDRESS);",
      "info" : "FieldDeclaration[15216-15339]:FieldDeclaration[15216-15339]"
    }, {
      "left" : "public static final TypeAdapter<UUID> UUID = new TypeAdapter<UUID>() {\n    @Override\n    public UUID read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      return java.util.UUID.fromString(in.nextString());\n    }\n    @Override\n    public void write(JsonWriter out, UUID value) throws IOException {\n      out.value(value == null ? null : value.toString());\n    }\n  };",
      "right" : "public static final TypeAdapter<UUID> UUID = new TypeAdapter<UUID>() {\n    @Override\n    public UUID read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      return java.util.UUID.fromString(in.nextString());\n    }\n    @Override\n    public void write(JsonWriter out, UUID value) throws IOException {\n      out.value(value == null ? null : value.toString());\n    }\n  };",
      "info" : "FieldDeclaration[15343-15794]:FieldDeclaration[15343-15794]"
    }, {
      "left" : "public UUID read(JsonReader in) throws IOException",
      "right" : "public UUID read(JsonReader in) throws IOException",
      "info" : "MethodDeclaration[15418-15640]:MethodDeclaration[15418-15640]"
    }, {
      "left" : "public void write(JsonWriter out, UUID value) throws IOException",
      "right" : "public void write(JsonWriter out, UUID value) throws IOException",
      "info" : "MethodDeclaration[15645-15789]:MethodDeclaration[15645-15789]"
    }, {
      "left" : "public static final TypeAdapterFactory UUID_FACTORY = newFactory(UUID.class, UUID);",
      "right" : "public static final TypeAdapterFactory UUID_FACTORY = newFactory(UUID.class, UUID);",
      "info" : "FieldDeclaration[15798-15881]:FieldDeclaration[15798-15881]"
    }, {
      "left" : "public static final TypeAdapterFactory TIMESTAMP_FACTORY = new TypeAdapterFactory() {\n    @SuppressWarnings(\"unchecked\") // we use a runtime check to make sure the 'T's equal\n    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {\n      if (typeToken.getRawType() != Timestamp.class) {\n        return null;\n      }\n\n      final TypeAdapter<Date> dateTypeAdapter = gson.getAdapter(Date.class);\n      return (TypeAdapter<T>) new TypeAdapter<Timestamp>() {\n        @Override public Timestamp read(JsonReader in) throws IOException {\n          Date date = dateTypeAdapter.read(in);\n          return date != null ? new Timestamp(date.getTime()) : null;\n        }\n\n        @Override public void write(JsonWriter out, Timestamp value) throws IOException {\n          dateTypeAdapter.write(out, value);\n        }\n      };\n    }\n  };",
      "right" : "public static final TypeAdapterFactory TIMESTAMP_FACTORY = new TypeAdapterFactory() {\n    @SuppressWarnings(\"unchecked\") // we use a runtime check to make sure the 'T's equal\n    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {\n      if (typeToken.getRawType() != Timestamp.class) {\n        return null;\n      }\n\n      final TypeAdapter<Date> dateTypeAdapter = gson.getAdapter(Date.class);\n      return (TypeAdapter<T>) new TypeAdapter<Timestamp>() {\n        @Override public Timestamp read(JsonReader in) throws IOException {\n          Date date = dateTypeAdapter.read(in);\n          return date != null ? new Timestamp(date.getTime()) : null;\n        }\n\n        @Override public void write(JsonWriter out, Timestamp value) throws IOException {\n          dateTypeAdapter.write(out, value);\n        }\n      };\n    }\n  };",
      "info" : "FieldDeclaration[15885-16726]:FieldDeclaration[15885-16726]"
    }, {
      "left" : "// we use a runtime check to make sure the 'T's equal\n    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken)",
      "right" : "// we use a runtime check to make sure the 'T's equal\n    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken)",
      "info" : "MethodDeclaration[15975-16721]:MethodDeclaration[15975-16721]"
    }, {
      "left" : "public Timestamp read(JsonReader in) throws IOException",
      "right" : "public Timestamp read(JsonReader in) throws IOException",
      "info" : "MethodDeclaration[16365-16560]:MethodDeclaration[16365-16560]"
    }, {
      "left" : "public void write(JsonWriter out, Timestamp value) throws IOException",
      "right" : "public void write(JsonWriter out, Timestamp value) throws IOException",
      "info" : "MethodDeclaration[16570-16706]:MethodDeclaration[16570-16706]"
    }, {
      "left" : "public static final TypeAdapter<Calendar> CALENDAR = new TypeAdapter<Calendar>() {\n    private static final String YEAR = \"year\";\n    private static final String MONTH = \"month\";\n    private static final String DAY_OF_MONTH = \"dayOfMonth\";\n    private static final String HOUR_OF_DAY = \"hourOfDay\";\n    private static final String MINUTE = \"minute\";\n    private static final String SECOND = \"second\";\n\n    @Override\n    public Calendar read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return  null;\n      }\n      in.beginObject();\n      int year = 0;\n      int month = 0;\n      int dayOfMonth = 0;\n      int hourOfDay = 0;\n      int minute = 0;\n      int second = 0;\n      while (in.peek() != JsonToken.END_OBJECT) {\n        String name = in.nextName();\n        int value = in.nextInt();\n        if (YEAR.equals(name)) {\n          year = value;\n        } else if (MONTH.equals(name)) {\n          month = value;\n        } else if (DAY_OF_MONTH.equals(name)) {\n          dayOfMonth = value;\n        } else if (HOUR_OF_DAY.equals(name)) {\n          hourOfDay = value;\n        } else if (MINUTE.equals(name)) {\n          minute = value;\n        } else if (SECOND.equals(name)) {\n          second = value;\n        }\n      }\n      in.endObject();\n      return new GregorianCalendar(year, month, dayOfMonth, hourOfDay, minute, second);\n    }\n\n    @Override\n    public void write(JsonWriter out, Calendar value) throws IOException {\n      if (value == null) {\n        out.nullValue();\n        return;\n      }\n      out.beginObject();\n      out.name(YEAR);\n      out.value(value.get(Calendar.YEAR));\n      out.name(MONTH);\n      out.value(value.get(Calendar.MONTH));\n      out.name(DAY_OF_MONTH);\n      out.value(value.get(Calendar.DAY_OF_MONTH));\n      out.name(HOUR_OF_DAY);\n      out.value(value.get(Calendar.HOUR_OF_DAY));\n      out.name(MINUTE);\n      out.value(value.get(Calendar.MINUTE));\n      out.name(SECOND);\n      out.value(value.get(Calendar.SECOND));\n      out.endObject();\n    }\n  };",
      "right" : "public static final TypeAdapter<Calendar> CALENDAR = new TypeAdapter<Calendar>() {\n    private static final String YEAR = \"year\";\n    private static final String MONTH = \"month\";\n    private static final String DAY_OF_MONTH = \"dayOfMonth\";\n    private static final String HOUR_OF_DAY = \"hourOfDay\";\n    private static final String MINUTE = \"minute\";\n    private static final String SECOND = \"second\";\n\n    @Override\n    public Calendar read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return  null;\n      }\n      in.beginObject();\n      int year = 0;\n      int month = 0;\n      int dayOfMonth = 0;\n      int hourOfDay = 0;\n      int minute = 0;\n      int second = 0;\n      while (in.peek() != JsonToken.END_OBJECT) {\n        String name = in.nextName();\n        int value = in.nextInt();\n        if (YEAR.equals(name)) {\n          year = value;\n        } else if (MONTH.equals(name)) {\n          month = value;\n        } else if (DAY_OF_MONTH.equals(name)) {\n          dayOfMonth = value;\n        } else if (HOUR_OF_DAY.equals(name)) {\n          hourOfDay = value;\n        } else if (MINUTE.equals(name)) {\n          minute = value;\n        } else if (SECOND.equals(name)) {\n          second = value;\n        }\n      }\n      in.endObject();\n      return new GregorianCalendar(year, month, dayOfMonth, hourOfDay, minute, second);\n    }\n\n    @Override\n    public void write(JsonWriter out, Calendar value) throws IOException {\n      if (value == null) {\n        out.nullValue();\n        return;\n      }\n      out.beginObject();\n      out.name(YEAR);\n      out.value(value.get(Calendar.YEAR));\n      out.name(MONTH);\n      out.value(value.get(Calendar.MONTH));\n      out.name(DAY_OF_MONTH);\n      out.value(value.get(Calendar.DAY_OF_MONTH));\n      out.name(HOUR_OF_DAY);\n      out.value(value.get(Calendar.HOUR_OF_DAY));\n      out.name(MINUTE);\n      out.value(value.get(Calendar.MINUTE));\n      out.name(SECOND);\n      out.value(value.get(Calendar.SECOND));\n      out.endObject();\n    }\n  };",
      "info" : "FieldDeclaration[16730-18783]:FieldDeclaration[16730-18783]"
    }, {
      "left" : "private static final String YEAR = \"year\";",
      "right" : "private static final String YEAR = \"year\";",
      "info" : "FieldDeclaration[16817-16859]:FieldDeclaration[16817-16859]"
    }, {
      "left" : "private static final String MONTH = \"month\";",
      "right" : "private static final String MONTH = \"month\";",
      "info" : "FieldDeclaration[16864-16908]:FieldDeclaration[16864-16908]"
    }, {
      "left" : "private static final String DAY_OF_MONTH = \"dayOfMonth\";",
      "right" : "private static final String DAY_OF_MONTH = \"dayOfMonth\";",
      "info" : "FieldDeclaration[16913-16969]:FieldDeclaration[16913-16969]"
    }, {
      "left" : "private static final String HOUR_OF_DAY = \"hourOfDay\";",
      "right" : "private static final String HOUR_OF_DAY = \"hourOfDay\";",
      "info" : "FieldDeclaration[16974-17028]:FieldDeclaration[16974-17028]"
    }, {
      "left" : "private static final String MINUTE = \"minute\";",
      "right" : "private static final String MINUTE = \"minute\";",
      "info" : "FieldDeclaration[17033-17079]:FieldDeclaration[17033-17079]"
    }, {
      "left" : "private static final String SECOND = \"second\";",
      "right" : "private static final String SECOND = \"second\";",
      "info" : "FieldDeclaration[17084-17130]:FieldDeclaration[17084-17130]"
    }, {
      "left" : "public Calendar read(JsonReader in) throws IOException",
      "right" : "public Calendar read(JsonReader in) throws IOException",
      "info" : "MethodDeclaration[17136-18128]:MethodDeclaration[17136-18128]"
    }, {
      "left" : "public void write(JsonWriter out, Calendar value) throws IOException",
      "right" : "public void write(JsonWriter out, Calendar value) throws IOException",
      "info" : "MethodDeclaration[18134-18778]:MethodDeclaration[18134-18778]"
    }, {
      "left" : "public static final TypeAdapterFactory CALENDAR_FACTORY =\n    newFactoryForMultipleTypes(Calendar.class, GregorianCalendar.class, CALENDAR);",
      "right" : "public static final TypeAdapterFactory CALENDAR_FACTORY =\n    newFactoryForMultipleTypes(Calendar.class, GregorianCalendar.class, CALENDAR);",
      "info" : "FieldDeclaration[18787-18927]:FieldDeclaration[18787-18927]"
    }, {
      "left" : "public static final TypeAdapter<Locale> LOCALE = new TypeAdapter<Locale>() {\n    @Override\n    public Locale read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      String locale = in.nextString();\n      StringTokenizer tokenizer = new StringTokenizer(locale, \"_\");\n      String language = null;\n      String country = null;\n      String variant = null;\n      if (tokenizer.hasMoreElements()) {\n        language = tokenizer.nextToken();\n      }\n      if (tokenizer.hasMoreElements()) {\n        country = tokenizer.nextToken();\n      }\n      if (tokenizer.hasMoreElements()) {\n        variant = tokenizer.nextToken();\n      }\n      if (country == null && variant == null) {\n        return new Locale(language);\n      } else if (variant == null) {\n        return new Locale(language, country);\n      } else {\n        return new Locale(language, country, variant);\n      }\n    }\n    @Override\n    public void write(JsonWriter out, Locale value) throws IOException {\n      out.value(value == null ? null : value.toString());\n    }\n  };",
      "right" : "public static final TypeAdapter<Locale> LOCALE = new TypeAdapter<Locale>() {\n    @Override\n    public Locale read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      String locale = in.nextString();\n      StringTokenizer tokenizer = new StringTokenizer(locale, \"_\");\n      String language = null;\n      String country = null;\n      String variant = null;\n      if (tokenizer.hasMoreElements()) {\n        language = tokenizer.nextToken();\n      }\n      if (tokenizer.hasMoreElements()) {\n        country = tokenizer.nextToken();\n      }\n      if (tokenizer.hasMoreElements()) {\n        variant = tokenizer.nextToken();\n      }\n      if (country == null && variant == null) {\n        return new Locale(language);\n      } else if (variant == null) {\n        return new Locale(language, country);\n      } else {\n        return new Locale(language, country, variant);\n      }\n    }\n    @Override\n    public void write(JsonWriter out, Locale value) throws IOException {\n      out.value(value == null ? null : value.toString());\n    }\n  };",
      "info" : "FieldDeclaration[18931-20046]:FieldDeclaration[18931-20046]"
    }, {
      "left" : "public Locale read(JsonReader in) throws IOException",
      "right" : "public Locale read(JsonReader in) throws IOException",
      "info" : "MethodDeclaration[19012-19890]:MethodDeclaration[19012-19890]"
    }, {
      "left" : "public void write(JsonWriter out, Locale value) throws IOException",
      "right" : "public void write(JsonWriter out, Locale value) throws IOException",
      "info" : "MethodDeclaration[19895-20041]:MethodDeclaration[19895-20041]"
    }, {
      "left" : "public static final TypeAdapterFactory LOCALE_FACTORY = newFactory(Locale.class, LOCALE);",
      "right" : "public static final TypeAdapterFactory LOCALE_FACTORY = newFactory(Locale.class, LOCALE);",
      "info" : "FieldDeclaration[20050-20139]:FieldDeclaration[20050-20139]"
    }, {
      "left" : "public static final TypeAdapter<JsonElement> JSON_ELEMENT = new TypeAdapter<JsonElement>() {\n    @Override public JsonElement read(JsonReader in) throws IOException {\n      switch (in.peek()) {\n      case STRING:\n        return new JsonPrimitive(in.nextString());\n      case NUMBER:\n        String number = in.nextString();\n        return new JsonPrimitive(new LazilyParsedNumber(number));\n      case BOOLEAN:\n        return new JsonPrimitive(in.nextBoolean());\n      case NULL:\n        in.nextNull();\n        return JsonNull.INSTANCE;\n      case BEGIN_ARRAY:\n        JsonArray array = new JsonArray();\n        in.beginArray();\n        while (in.hasNext()) {\n          array.add(read(in));\n        }\n        in.endArray();\n        return array;\n      case BEGIN_OBJECT:\n        JsonObject object = new JsonObject();\n        in.beginObject();\n        while (in.hasNext()) {\n          object.add(in.nextName(), read(in));\n        }\n        in.endObject();\n        return object;\n      case END_DOCUMENT:\n      case NAME:\n      case END_OBJECT:\n      case END_ARRAY:\n      default:\n        throw new IllegalArgumentException();\n      }\n    }\n\n    @Override public void write(JsonWriter out, JsonElement value) throws IOException {\n      if (value == null || value.isJsonNull()) {\n        out.nullValue();\n      } else if (value.isJsonPrimitive()) {\n        JsonPrimitive primitive = value.getAsJsonPrimitive();\n        if (primitive.isNumber()) {\n          out.value(primitive.getAsNumber());\n        } else if (primitive.isBoolean()) {\n          out.value(primitive.getAsBoolean());\n        } else {\n          out.value(primitive.getAsString());\n        }\n\n      } else if (value.isJsonArray()) {\n        out.beginArray();\n        for (JsonElement e : value.getAsJsonArray()) {\n          write(out, e);\n        }\n        out.endArray();\n\n      } else if (value.isJsonObject()) {\n        out.beginObject();\n        for (Map.Entry<String, JsonElement> e : value.getAsJsonObject().entrySet()) {\n          out.name(e.getKey());\n          write(out, e.getValue());\n        }\n        out.endObject();\n\n      } else {\n        throw new IllegalArgumentException(\"Couldn't write \" + value.getClass());\n      }\n    }\n  };",
      "right" : "public static final TypeAdapter<JsonElement> JSON_ELEMENT = new TypeAdapter<JsonElement>() {\n    @Override public JsonElement read(JsonReader in) throws IOException {\n      switch (in.peek()) {\n      case STRING:\n        return new JsonPrimitive(in.nextString());\n      case NUMBER:\n        String number = in.nextString();\n        return new JsonPrimitive(new LazilyParsedNumber(number));\n      case BOOLEAN:\n        return new JsonPrimitive(in.nextBoolean());\n      case NULL:\n        in.nextNull();\n        return JsonNull.INSTANCE;\n      case BEGIN_ARRAY:\n        JsonArray array = new JsonArray();\n        in.beginArray();\n        while (in.hasNext()) {\n          array.add(read(in));\n        }\n        in.endArray();\n        return array;\n      case BEGIN_OBJECT:\n        JsonObject object = new JsonObject();\n        in.beginObject();\n        while (in.hasNext()) {\n          object.add(in.nextName(), read(in));\n        }\n        in.endObject();\n        return object;\n      case END_DOCUMENT:\n      case NAME:\n      case END_OBJECT:\n      case END_ARRAY:\n      default:\n        throw new IllegalArgumentException();\n      }\n    }\n\n    @Override public void write(JsonWriter out, JsonElement value) throws IOException {\n      if (value == null || value.isJsonNull()) {\n        out.nullValue();\n      } else if (value.isJsonPrimitive()) {\n        JsonPrimitive primitive = value.getAsJsonPrimitive();\n        if (primitive.isNumber()) {\n          out.value(primitive.getAsNumber());\n        } else if (primitive.isBoolean()) {\n          out.value(primitive.getAsBoolean());\n        } else {\n          out.value(primitive.getAsString());\n        }\n\n      } else if (value.isJsonArray()) {\n        out.beginArray();\n        for (JsonElement e : value.getAsJsonArray()) {\n          write(out, e);\n        }\n        out.endArray();\n\n      } else if (value.isJsonObject()) {\n        out.beginObject();\n        for (Map.Entry<String, JsonElement> e : value.getAsJsonObject().entrySet()) {\n          out.name(e.getKey());\n          write(out, e.getValue());\n        }\n        out.endObject();\n\n      } else {\n        throw new IllegalArgumentException(\"Couldn't write \" + value.getClass());\n      }\n    }\n  };",
      "info" : "FieldDeclaration[20143-22352]:FieldDeclaration[20143-22352]"
    }, {
      "left" : "public JsonElement read(JsonReader in) throws IOException",
      "right" : "public JsonElement read(JsonReader in) throws IOException",
      "info" : "MethodDeclaration[20240-21281]:MethodDeclaration[20240-21281]"
    }, {
      "left" : "public void write(JsonWriter out, JsonElement value) throws IOException",
      "right" : "public void write(JsonWriter out, JsonElement value) throws IOException",
      "info" : "MethodDeclaration[21287-22347]:MethodDeclaration[21287-22347]"
    }, {
      "left" : "public static final TypeAdapterFactory JSON_ELEMENT_FACTORY\n      = newTypeHierarchyFactory(JsonElement.class, JSON_ELEMENT);",
      "right" : "public static final TypeAdapterFactory JSON_ELEMENT_FACTORY\n      = newTypeHierarchyFactory(JsonElement.class, JSON_ELEMENT);",
      "info" : "FieldDeclaration[22356-22481]:FieldDeclaration[22356-22481]"
    }, {
      "left" : "EnumTypeAdapter",
      "right" : "EnumTypeAdapter",
      "info" : "TypeDeclaration[22485-23741]:TypeDeclaration[22485-23741]"
    }, {
      "left" : "private final Map<String, T> nameToConstant = new HashMap<String, T>();",
      "right" : "private final Map<String, T> nameToConstant = new HashMap<String, T>();",
      "info" : "FieldDeclaration[22576-22647]:FieldDeclaration[22576-22647]"
    }, {
      "left" : "private final Map<T, String> constantToName = new HashMap<T, String>();",
      "right" : "private final Map<T, String> constantToName = new HashMap<T, String>();",
      "info" : "FieldDeclaration[22652-22723]:FieldDeclaration[22652-22723]"
    }, {
      "left" : "public EnumTypeAdapter(Class<T> classOfT)",
      "right" : "public EnumTypeAdapter(Class<T> classOfT)",
      "info" : "MethodDeclaration[22729-23392]:MethodDeclaration[22729-23392]"
    }, {
      "left" : "public T read(JsonReader in) throws IOException",
      "right" : "public T read(JsonReader in) throws IOException",
      "info" : "MethodDeclaration[23397-23595]:MethodDeclaration[23397-23595]"
    }, {
      "left" : "public void write(JsonWriter out, T value) throws IOException",
      "right" : "public void write(JsonWriter out, T value) throws IOException",
      "info" : "MethodDeclaration[23601-23737]:MethodDeclaration[23601-23737]"
    }, {
      "left" : "public static final TypeAdapterFactory ENUM_FACTORY = new TypeAdapterFactory() {\n    @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {\n      Class<? super T> rawType = typeToken.getRawType();\n      if (!Enum.class.isAssignableFrom(rawType) || rawType == Enum.class) {\n        return null;\n      }\n      if (!rawType.isEnum()) {\n        rawType = rawType.getSuperclass(); // handle anonymous subclasses\n      }\n      return (TypeAdapter<T>) new EnumTypeAdapter(rawType);\n    }\n  };",
      "right" : "public static final TypeAdapterFactory ENUM_FACTORY = new TypeAdapterFactory() {\n    @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {\n      Class<? super T> rawType = typeToken.getRawType();\n      if (!Enum.class.isAssignableFrom(rawType) || rawType == Enum.class) {\n        return null;\n      }\n      if (!rawType.isEnum()) {\n        rawType = rawType.getSuperclass(); // handle anonymous subclasses\n      }\n      return (TypeAdapter<T>) new EnumTypeAdapter(rawType);\n    }\n  };",
      "info" : "FieldDeclaration[23745-24294]:FieldDeclaration[23745-24294]"
    }, {
      "left" : "public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken)",
      "right" : "public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken)",
      "info" : "MethodDeclaration[23830-24289]:MethodDeclaration[23830-24289]"
    }, {
      "left" : "public static <TT> TypeAdapterFactory newFactory(\n      final TypeToken<TT> type, final TypeAdapter<TT> typeAdapter)",
      "right" : "public static <TT> TypeAdapterFactory newFactory(\n      final TypeToken<TT> type, final TypeAdapter<TT> typeAdapter)",
      "info" : "MethodDeclaration[24298-24717]:MethodDeclaration[24298-24717]"
    }, {
      "left" : "// we use a runtime check to make sure the 'T's equal\n      public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken)",
      "right" : "// we use a runtime check to make sure the 'T's equal\n      public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken)",
      "info" : "MethodDeclaration[24461-24706]:MethodDeclaration[24461-24706]"
    }, {
      "left" : "public static <TT> TypeAdapterFactory newFactory(\n      final Class<TT> type, final TypeAdapter<TT> typeAdapter)",
      "right" : "public static <TT> TypeAdapterFactory newFactory(\n      final Class<TT> type, final TypeAdapter<TT> typeAdapter)",
      "info" : "MethodDeclaration[24721-25278]:MethodDeclaration[24721-25278]"
    }, {
      "left" : "// we use a runtime check to make sure the 'T's equal\n      public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken)",
      "right" : "// we use a runtime check to make sure the 'T's equal\n      public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken)",
      "info" : "MethodDeclaration[24880-25133]:MethodDeclaration[24880-25133]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[25140-25267]:MethodDeclaration[25140-25267]"
    }, {
      "left" : "public static <TT> TypeAdapterFactory newFactory(\n      final Class<TT> unboxed, final Class<TT> boxed, final TypeAdapter<? super TT> typeAdapter)",
      "right" : "public static <TT> TypeAdapterFactory newFactory(\n      final Class<TT> unboxed, final Class<TT> boxed, final TypeAdapter<? super TT> typeAdapter)",
      "info" : "MethodDeclaration[25282-25981]:MethodDeclaration[25282-25981]"
    }, {
      "left" : "// we use a runtime check to make sure the 'T's equal\n      public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken)",
      "right" : "// we use a runtime check to make sure the 'T's equal\n      public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken)",
      "info" : "MethodDeclaration[25475-25797]:MethodDeclaration[25475-25797]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[25804-25970]:MethodDeclaration[25804-25970]"
    }, {
      "left" : "public static <TT> TypeAdapterFactory newFactoryForMultipleTypes(final Class<TT> base,\n      final Class<? extends TT> sub, final TypeAdapter<? super TT> typeAdapter)",
      "right" : "public static <TT> TypeAdapterFactory newFactoryForMultipleTypes(final Class<TT> base,\n      final Class<? extends TT> sub, final TypeAdapter<? super TT> typeAdapter)",
      "info" : "MethodDeclaration[25985-26694]:MethodDeclaration[25985-26694]"
    }, {
      "left" : "// we use a runtime check to make sure the 'T's equal\n      public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken)",
      "right" : "// we use a runtime check to make sure the 'T's equal\n      public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken)",
      "info" : "MethodDeclaration[26198-26515]:MethodDeclaration[26198-26515]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[26522-26683]:MethodDeclaration[26522-26683]"
    }, {
      "left" : "public static <T1> TypeAdapterFactory newTypeHierarchyFactory(\n      final Class<T1> clazz, final TypeAdapter<T1> typeAdapter)",
      "right" : "public static <T1> TypeAdapterFactory newTypeHierarchyFactory(\n      final Class<T1> clazz, final TypeAdapter<T1> typeAdapter)",
      "info" : "MethodDeclaration[26698-27518]:MethodDeclaration[26698-28069]"
    }, {
      "left" : "public <T2> TypeAdapter<T2> create(Gson gson, TypeToken<T2> typeToken)",
      "right" : "public <T2> TypeAdapter<T2> create(Gson gson, TypeToken<T2> typeToken)",
      "info" : "MethodDeclaration[27040-27363]:MethodDeclaration[27040-27914]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[27370-27507]:MethodDeclaration[27921-28058]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1783-1789]:Modifier[1783-1789]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[1790-1795]:Modifier[1790-1795]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[1796-1801]:TYPE_DECLARATION_KIND[1796-1801]"
    }, {
      "left" : "TypeAdapters",
      "right" : "TypeAdapters",
      "info" : "SimpleName[1802-1814]:SimpleName[1802-1814]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[1819-1826]:Modifier[1819-1826]"
    }, {
      "left" : "TypeAdapters",
      "right" : "TypeAdapters",
      "info" : "SimpleName[1827-1839]:SimpleName[1827-1839]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1842-1894]:Block[1842-1894]"
    }, {
      "left" : "throw new UnsupportedOperationException();",
      "right" : "throw new UnsupportedOperationException();",
      "info" : "ThrowStatement[1848-1890]:ThrowStatement[1848-1890]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[2008-2017]:MarkerAnnotation[2008-2017]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2022-2028]:Modifier[2022-2028]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[2029-2033]:PrimitiveType[2029-2033]"
    }, {
      "left" : "write",
      "right" : "write",
      "info" : "SimpleName[2034-2039]:SimpleName[2034-2039]"
    }, {
      "left" : "JsonWriter out",
      "right" : "JsonWriter out",
      "info" : "SingleVariableDeclaration[2040-2054]:SingleVariableDeclaration[2040-2054]"
    }, {
      "left" : "Class value",
      "right" : "Class value",
      "info" : "SingleVariableDeclaration[2056-2067]:SingleVariableDeclaration[2056-2067]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[2076-2087]:SimpleType[2076-2087]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2088-2334]:Block[2088-2334]"
    }, {
      "left" : "if (value == null)",
      "right" : "if (value == null)",
      "info" : "IfStatement[2096-2328]:IfStatement[2096-2328]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2115-2149]:Block[2115-2149]"
    }, {
      "left" : "out.nullValue();",
      "right" : "out.nullValue();",
      "info" : "ExpressionStatement[2125-2141]:ExpressionStatement[2125-2141]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2155-2328]:Block[2155-2328]"
    }, {
      "left" : "throw new UnsupportedOperationException(\"Attempted to serialize java.lang.Class: \"\n            + value.getName() + \". Forgot to register a type adapter?\");",
      "right" : "throw new UnsupportedOperationException(\"Attempted to serialize java.lang.Class: \"\n            + value.getName() + \". Forgot to register a type adapter?\");",
      "info" : "ThrowStatement[2165-2320]:ThrowStatement[2165-2320]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[2339-2348]:MarkerAnnotation[2339-2348]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2353-2359]:Modifier[2353-2359]"
    }, {
      "left" : "Class",
      "right" : "Class",
      "info" : "SimpleType[2360-2365]:SimpleType[2360-2365]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[2366-2370]:SimpleName[2366-2370]"
    }, {
      "left" : "JsonReader in",
      "right" : "JsonReader in",
      "info" : "SingleVariableDeclaration[2371-2384]:SingleVariableDeclaration[2371-2384]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[2393-2404]:SimpleType[2393-2404]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2405-2664]:Block[2405-2664]"
    }, {
      "left" : "if (in.peek() == JsonToken.NULL)",
      "right" : "if (in.peek() == JsonToken.NULL)",
      "info" : "IfStatement[2413-2658]:IfStatement[2413-2658]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2446-2499]:Block[2446-2499]"
    }, {
      "left" : "in.nextNull();",
      "right" : "in.nextNull();",
      "info" : "ExpressionStatement[2456-2470]:ExpressionStatement[2456-2470]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[2479-2491]:ReturnStatement[2479-2491]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2505-2658]:Block[2505-2658]"
    }, {
      "left" : "throw new UnsupportedOperationException(\n            \"Attempted to deserialize a java.lang.Class. Forgot to register a type adapter?\");",
      "right" : "throw new UnsupportedOperationException(\n            \"Attempted to deserialize a java.lang.Class. Forgot to register a type adapter?\");",
      "info" : "ThrowStatement[2515-2650]:ThrowStatement[2515-2650]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2844-2850]:Modifier[2844-2850]"
    }, {
      "left" : "BitSet",
      "right" : "BitSet",
      "info" : "SimpleType[2851-2857]:SimpleType[2851-2857]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[2858-2862]:SimpleName[2858-2862]"
    }, {
      "left" : "JsonReader in",
      "right" : "JsonReader in",
      "info" : "SingleVariableDeclaration[2863-2876]:SingleVariableDeclaration[2863-2876]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[2885-2896]:SimpleType[2885-2896]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2897-3962]:Block[2897-3962]"
    }, {
      "left" : "if (in.peek() == JsonToken.NULL)",
      "right" : "if (in.peek() == JsonToken.NULL)",
      "info" : "IfStatement[2905-2991]:IfStatement[2905-2991]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2938-2991]:Block[2938-2991]"
    }, {
      "left" : "in.nextNull();",
      "right" : "in.nextNull();",
      "info" : "ExpressionStatement[2948-2962]:ExpressionStatement[2948-2962]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[2971-2983]:ReturnStatement[2971-2983]"
    }, {
      "left" : "BitSet bitset = new BitSet();",
      "right" : "BitSet bitset = new BitSet();",
      "info" : "VariableDeclarationStatement[2999-3028]:VariableDeclarationStatement[2999-3028]"
    }, {
      "left" : "in.beginArray();",
      "right" : "in.beginArray();",
      "info" : "ExpressionStatement[3035-3051]:ExpressionStatement[3035-3051]"
    }, {
      "left" : "int i = 0;",
      "right" : "int i = 0;",
      "info" : "VariableDeclarationStatement[3058-3068]:VariableDeclarationStatement[3058-3068]"
    }, {
      "left" : "JsonToken tokenType = in.peek();",
      "right" : "JsonToken tokenType = in.peek();",
      "info" : "VariableDeclarationStatement[3075-3107]:VariableDeclarationStatement[3075-3107]"
    }, {
      "left" : "while (tokenType != JsonToken.END_ARRAY)",
      "right" : "while (tokenType != JsonToken.END_ARRAY)",
      "info" : "WhileStatement[3114-3914]:WhileStatement[3114-3914]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3155-3914]:Block[3155-3914]"
    }, {
      "left" : "boolean set;",
      "right" : "boolean set;",
      "info" : "VariableDeclarationStatement[3165-3177]:VariableDeclarationStatement[3165-3177]"
    }, {
      "left" : "switch (tokenType) {\n        case NUMBER:\n          set = in.nextInt() != 0;\n          break;\n        case BOOLEAN:\n          set = in.nextBoolean();\n          break;\n        case STRING:\n          String stringValue = in.nextString();\n          try {\n            set = Integer.parseInt(stringValue) != 0;\n          } catch (NumberFormatException e) {\n            throw new JsonSyntaxException(\n                \"Error: Expecting: bitset number value (1, 0), Found: \" + stringValue);\n          }\n          break;\n        default:\n          throw new JsonSyntaxException(\"Invalid bitset value type: \" + tokenType);\n        }",
      "right" : "switch (tokenType) {\n        case NUMBER:\n          set = in.nextInt() != 0;\n          break;\n        case BOOLEAN:\n          set = in.nextBoolean();\n          break;\n        case STRING:\n          String stringValue = in.nextString();\n          try {\n            set = Integer.parseInt(stringValue) != 0;\n          } catch (NumberFormatException e) {\n            throw new JsonSyntaxException(\n                \"Error: Expecting: bitset number value (1, 0), Found: \" + stringValue);\n          }\n          break;\n        default:\n          throw new JsonSyntaxException(\"Invalid bitset value type: \" + tokenType);\n        }",
      "info" : "SwitchStatement[3186-3808]:SwitchStatement[3186-3808]"
    }, {
      "left" : "case NUMBER:",
      "right" : "case NUMBER:",
      "info" : "SwitchCase[3215-3227]:SwitchCase[3215-3227]"
    }, {
      "left" : "set = in.nextInt() != 0;",
      "right" : "set = in.nextInt() != 0;",
      "info" : "ExpressionStatement[3238-3262]:ExpressionStatement[3238-3262]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[3273-3279]:BreakStatement[3273-3279]"
    }, {
      "left" : "case BOOLEAN:",
      "right" : "case BOOLEAN:",
      "info" : "SwitchCase[3288-3301]:SwitchCase[3288-3301]"
    }, {
      "left" : "set = in.nextBoolean();",
      "right" : "set = in.nextBoolean();",
      "info" : "ExpressionStatement[3312-3335]:ExpressionStatement[3312-3335]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[3346-3352]:BreakStatement[3346-3352]"
    }, {
      "left" : "case STRING:",
      "right" : "case STRING:",
      "info" : "SwitchCase[3361-3373]:SwitchCase[3361-3373]"
    }, {
      "left" : "String stringValue = in.nextString();",
      "right" : "String stringValue = in.nextString();",
      "info" : "VariableDeclarationStatement[3384-3421]:VariableDeclarationStatement[3384-3421]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[3432-3680]:TryStatement[3432-3680]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3436-3503]:Block[3436-3503]"
    }, {
      "left" : "set = Integer.parseInt(stringValue) != 0;",
      "right" : "set = Integer.parseInt(stringValue) != 0;",
      "info" : "ExpressionStatement[3450-3491]:ExpressionStatement[3450-3491]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3536-3680]:Block[3536-3680]"
    }, {
      "left" : "throw new JsonSyntaxException(\n                \"Error: Expecting: bitset number value (1, 0), Found: \" + stringValue);",
      "right" : "throw new JsonSyntaxException(\n                \"Error: Expecting: bitset number value (1, 0), Found: \" + stringValue);",
      "info" : "ThrowStatement[3550-3668]:ThrowStatement[3550-3668]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[3691-3697]:BreakStatement[3691-3697]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[3706-3714]:SwitchCase[3706-3714]"
    }, {
      "left" : "throw new JsonSyntaxException(\"Invalid bitset value type: \" + tokenType);",
      "right" : "throw new JsonSyntaxException(\"Invalid bitset value type: \" + tokenType);",
      "info" : "ThrowStatement[3725-3798]:ThrowStatement[3725-3798]"
    }, {
      "left" : "if (set)",
      "right" : "if (set)",
      "info" : "IfStatement[3817-3862]:IfStatement[3817-3862]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3826-3862]:Block[3826-3862]"
    }, {
      "left" : "bitset.set(i);",
      "right" : "bitset.set(i);",
      "info" : "ExpressionStatement[3838-3852]:ExpressionStatement[3838-3852]"
    }, {
      "left" : "++i;",
      "right" : "++i;",
      "info" : "ExpressionStatement[3871-3875]:ExpressionStatement[3871-3875]"
    }, {
      "left" : "tokenType = in.peek();",
      "right" : "tokenType = in.peek();",
      "info" : "ExpressionStatement[3884-3906]:ExpressionStatement[3884-3906]"
    }, {
      "left" : "in.endArray();",
      "right" : "in.endArray();",
      "info" : "ExpressionStatement[3921-3935]:ExpressionStatement[3921-3935]"
    }, {
      "left" : "return bitset;",
      "right" : "return bitset;",
      "info" : "ReturnStatement[3942-3956]:ReturnStatement[3942-3956]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3968-3974]:Modifier[3968-3974]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[3975-3979]:PrimitiveType[3975-3979]"
    }, {
      "left" : "write",
      "right" : "write",
      "info" : "SimpleName[3980-3985]:SimpleName[3980-3985]"
    }, {
      "left" : "JsonWriter out",
      "right" : "JsonWriter out",
      "info" : "SingleVariableDeclaration[3986-4000]:SingleVariableDeclaration[3986-4000]"
    }, {
      "left" : "BitSet src",
      "right" : "BitSet src",
      "info" : "SingleVariableDeclaration[4002-4012]:SingleVariableDeclaration[4002-4012]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[4021-4032]:SimpleType[4021-4032]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4033-4284]:Block[4033-4284]"
    }, {
      "left" : "if (src == null)",
      "right" : "if (src == null)",
      "info" : "IfStatement[4041-4108]:IfStatement[4041-4108]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4058-4108]:Block[4058-4108]"
    }, {
      "left" : "out.nullValue();",
      "right" : "out.nullValue();",
      "info" : "ExpressionStatement[4068-4084]:ExpressionStatement[4068-4084]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[4093-4100]:ReturnStatement[4093-4100]"
    }, {
      "left" : "out.beginArray();",
      "right" : "out.beginArray();",
      "info" : "ExpressionStatement[4116-4133]:ExpressionStatement[4116-4133]"
    }, {
      "left" : "for (int i = 0; i < src.length(); i++)",
      "right" : "for (int i = 0; i < src.length(); i++)",
      "info" : "ForStatement[4140-4256]:ForStatement[4140-4256]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4179-4256]:Block[4179-4256]"
    }, {
      "left" : "int value = (src.get(i)) ? 1 : 0;",
      "right" : "int value = (src.get(i)) ? 1 : 0;",
      "info" : "VariableDeclarationStatement[4189-4222]:VariableDeclarationStatement[4189-4222]"
    }, {
      "left" : "out.value(value);",
      "right" : "out.value(value);",
      "info" : "ExpressionStatement[4231-4248]:ExpressionStatement[4231-4248]"
    }, {
      "left" : "out.endArray();",
      "right" : "out.endArray();",
      "info" : "ExpressionStatement[4263-4278]:ExpressionStatement[4263-4278]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[4472-4481]:MarkerAnnotation[4472-4481]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4486-4492]:Modifier[4486-4492]"
    }, {
      "left" : "Boolean",
      "right" : "Boolean",
      "info" : "SimpleType[4493-4500]:SimpleType[4493-4500]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[4501-4505]:SimpleName[4501-4505]"
    }, {
      "left" : "JsonReader in",
      "right" : "JsonReader in",
      "info" : "SingleVariableDeclaration[4506-4519]:SingleVariableDeclaration[4506-4519]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[4528-4539]:SimpleType[4528-4539]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4540-4834]:Block[4540-4834]"
    }, {
      "left" : "if (in.peek() == JsonToken.NULL)",
      "right" : "if (in.peek() == JsonToken.NULL)",
      "info" : "IfStatement[4548-4797]:IfStatement[4548-4797]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4581-4634]:Block[4581-4634]"
    }, {
      "left" : "in.nextNull();",
      "right" : "in.nextNull();",
      "info" : "ExpressionStatement[4591-4605]:ExpressionStatement[4591-4605]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[4614-4626]:ReturnStatement[4614-4626]"
    }, {
      "left" : "if (in.peek() == JsonToken.STRING)",
      "right" : "if (in.peek() == JsonToken.STRING)",
      "info" : "IfStatement[4640-4797]:IfStatement[4640-4797]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4675-4797]:Block[4675-4797]"
    }, {
      "left" : "return Boolean.parseBoolean(in.nextString());",
      "right" : "return Boolean.parseBoolean(in.nextString());",
      "info" : "ReturnStatement[4744-4789]:ReturnStatement[4744-4789]"
    }, {
      "left" : "return in.nextBoolean();",
      "right" : "return in.nextBoolean();",
      "info" : "ReturnStatement[4804-4828]:ReturnStatement[4804-4828]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[4839-4848]:MarkerAnnotation[4839-4848]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4853-4859]:Modifier[4853-4859]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[4860-4864]:PrimitiveType[4860-4864]"
    }, {
      "left" : "write",
      "right" : "write",
      "info" : "SimpleName[4865-4870]:SimpleName[4865-4870]"
    }, {
      "left" : "JsonWriter out",
      "right" : "JsonWriter out",
      "info" : "SingleVariableDeclaration[4871-4885]:SingleVariableDeclaration[4871-4885]"
    }, {
      "left" : "Boolean value",
      "right" : "Boolean value",
      "info" : "SingleVariableDeclaration[4887-4900]:SingleVariableDeclaration[4887-4900]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[4909-4920]:SimpleType[4909-4920]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4921-5028]:Block[4921-5028]"
    }, {
      "left" : "if (value == null)",
      "right" : "if (value == null)",
      "info" : "IfStatement[4929-4998]:IfStatement[4929-4998]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4948-4998]:Block[4948-4998]"
    }, {
      "left" : "out.nullValue();",
      "right" : "out.nullValue();",
      "info" : "ExpressionStatement[4958-4974]:ExpressionStatement[4958-4974]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[4983-4990]:ReturnStatement[4983-4990]"
    }, {
      "left" : "out.value(value);",
      "right" : "out.value(value);",
      "info" : "ExpressionStatement[5005-5022]:ExpressionStatement[5005-5022]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[5247-5256]:MarkerAnnotation[5247-5256]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5257-5263]:Modifier[5257-5263]"
    }, {
      "left" : "Boolean",
      "right" : "Boolean",
      "info" : "SimpleType[5264-5271]:SimpleType[5264-5271]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[5272-5276]:SimpleName[5272-5276]"
    }, {
      "left" : "JsonReader in",
      "right" : "JsonReader in",
      "info" : "SingleVariableDeclaration[5277-5290]:SingleVariableDeclaration[5277-5290]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[5299-5310]:SimpleType[5299-5310]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5311-5458]:Block[5311-5458]"
    }, {
      "left" : "if (in.peek() == JsonToken.NULL)",
      "right" : "if (in.peek() == JsonToken.NULL)",
      "info" : "IfStatement[5319-5405]:IfStatement[5319-5405]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5352-5405]:Block[5352-5405]"
    }, {
      "left" : "in.nextNull();",
      "right" : "in.nextNull();",
      "info" : "ExpressionStatement[5362-5376]:ExpressionStatement[5362-5376]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[5385-5397]:ReturnStatement[5385-5397]"
    }, {
      "left" : "return Boolean.valueOf(in.nextString());",
      "right" : "return Boolean.valueOf(in.nextString());",
      "info" : "ReturnStatement[5412-5452]:ReturnStatement[5412-5452]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[5464-5473]:MarkerAnnotation[5464-5473]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5474-5480]:Modifier[5474-5480]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[5481-5485]:PrimitiveType[5481-5485]"
    }, {
      "left" : "write",
      "right" : "write",
      "info" : "SimpleName[5486-5491]:SimpleName[5486-5491]"
    }, {
      "left" : "JsonWriter out",
      "right" : "JsonWriter out",
      "info" : "SingleVariableDeclaration[5492-5506]:SingleVariableDeclaration[5492-5506]"
    }, {
      "left" : "Boolean value",
      "right" : "Boolean value",
      "info" : "SingleVariableDeclaration[5508-5521]:SingleVariableDeclaration[5508-5521]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[5530-5541]:SimpleType[5530-5541]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5542-5609]:Block[5542-5609]"
    }, {
      "left" : "out.value(value == null ? \"null\" : value.toString());",
      "right" : "out.value(value == null ? \"null\" : value.toString());",
      "info" : "ExpressionStatement[5550-5603]:ExpressionStatement[5550-5603]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[5814-5823]:MarkerAnnotation[5814-5823]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5828-5834]:Modifier[5828-5834]"
    }, {
      "left" : "Number",
      "right" : "Number",
      "info" : "SimpleType[5835-5841]:SimpleType[5835-5841]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[5842-5846]:SimpleName[5842-5846]"
    }, {
      "left" : "JsonReader in",
      "right" : "JsonReader in",
      "info" : "SingleVariableDeclaration[5847-5860]:SingleVariableDeclaration[5847-5860]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[5869-5880]:SimpleType[5869-5880]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5881-6154]:Block[5881-6154]"
    }, {
      "left" : "if (in.peek() == JsonToken.NULL)",
      "right" : "if (in.peek() == JsonToken.NULL)",
      "info" : "IfStatement[5889-5975]:IfStatement[5889-5975]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5922-5975]:Block[5922-5975]"
    }, {
      "left" : "in.nextNull();",
      "right" : "in.nextNull();",
      "info" : "ExpressionStatement[5932-5946]:ExpressionStatement[5932-5946]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[5955-5967]:ReturnStatement[5955-5967]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[5982-6148]:TryStatement[5982-6148]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5986-6064]:Block[5986-6064]"
    }, {
      "left" : "int intValue = in.nextInt();",
      "right" : "int intValue = in.nextInt();",
      "info" : "VariableDeclarationStatement[5996-6024]:VariableDeclarationStatement[5996-6024]"
    }, {
      "left" : "return (byte) intValue;",
      "right" : "return (byte) intValue;",
      "info" : "ReturnStatement[6033-6056]:ReturnStatement[6033-6056]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6097-6148]:Block[6097-6148]"
    }, {
      "left" : "throw new JsonSyntaxException(e);",
      "right" : "throw new JsonSyntaxException(e);",
      "info" : "ThrowStatement[6107-6140]:ThrowStatement[6107-6140]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[6159-6168]:MarkerAnnotation[6159-6168]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6173-6179]:Modifier[6173-6179]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6180-6184]:PrimitiveType[6180-6184]"
    }, {
      "left" : "write",
      "right" : "write",
      "info" : "SimpleName[6185-6190]:SimpleName[6185-6190]"
    }, {
      "left" : "JsonWriter out",
      "right" : "JsonWriter out",
      "info" : "SingleVariableDeclaration[6191-6205]:SingleVariableDeclaration[6191-6205]"
    }, {
      "left" : "Number value",
      "right" : "Number value",
      "info" : "SingleVariableDeclaration[6207-6219]:SingleVariableDeclaration[6207-6219]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[6228-6239]:SimpleType[6228-6239]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6240-6271]:Block[6240-6271]"
    }, {
      "left" : "out.value(value);",
      "right" : "out.value(value);",
      "info" : "ExpressionStatement[6248-6265]:ExpressionStatement[6248-6265]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[6465-6474]:MarkerAnnotation[6465-6474]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6479-6485]:Modifier[6479-6485]"
    }, {
      "left" : "Number",
      "right" : "Number",
      "info" : "SimpleType[6486-6492]:SimpleType[6486-6492]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[6493-6497]:SimpleName[6493-6497]"
    }, {
      "left" : "JsonReader in",
      "right" : "JsonReader in",
      "info" : "SingleVariableDeclaration[6498-6511]:SingleVariableDeclaration[6498-6511]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[6520-6531]:SimpleType[6520-6531]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6532-6773]:Block[6532-6773]"
    }, {
      "left" : "if (in.peek() == JsonToken.NULL)",
      "right" : "if (in.peek() == JsonToken.NULL)",
      "info" : "IfStatement[6540-6626]:IfStatement[6540-6626]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6573-6626]:Block[6573-6626]"
    }, {
      "left" : "in.nextNull();",
      "right" : "in.nextNull();",
      "info" : "ExpressionStatement[6583-6597]:ExpressionStatement[6583-6597]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[6606-6618]:ReturnStatement[6606-6618]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[6633-6767]:TryStatement[6633-6767]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6637-6683]:Block[6637-6683]"
    }, {
      "left" : "return (short) in.nextInt();",
      "right" : "return (short) in.nextInt();",
      "info" : "ReturnStatement[6647-6675]:ReturnStatement[6647-6675]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6716-6767]:Block[6716-6767]"
    }, {
      "left" : "throw new JsonSyntaxException(e);",
      "right" : "throw new JsonSyntaxException(e);",
      "info" : "ThrowStatement[6726-6759]:ThrowStatement[6726-6759]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[6778-6787]:MarkerAnnotation[6778-6787]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6792-6798]:Modifier[6792-6798]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6799-6803]:PrimitiveType[6799-6803]"
    }, {
      "left" : "write",
      "right" : "write",
      "info" : "SimpleName[6804-6809]:SimpleName[6804-6809]"
    }, {
      "left" : "JsonWriter out",
      "right" : "JsonWriter out",
      "info" : "SingleVariableDeclaration[6810-6824]:SingleVariableDeclaration[6810-6824]"
    }, {
      "left" : "Number value",
      "right" : "Number value",
      "info" : "SingleVariableDeclaration[6826-6838]:SingleVariableDeclaration[6826-6838]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[6847-6858]:SimpleType[6847-6858]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6859-6890]:Block[6859-6890]"
    }, {
      "left" : "out.value(value);",
      "right" : "out.value(value);",
      "info" : "ExpressionStatement[6867-6884]:ExpressionStatement[6867-6884]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[7090-7099]:MarkerAnnotation[7090-7099]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7104-7110]:Modifier[7104-7110]"
    }, {
      "left" : "Number",
      "right" : "Number",
      "info" : "SimpleType[7111-7117]:SimpleType[7111-7117]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[7118-7122]:SimpleName[7118-7122]"
    }, {
      "left" : "JsonReader in",
      "right" : "JsonReader in",
      "info" : "SingleVariableDeclaration[7123-7136]:SingleVariableDeclaration[7123-7136]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[7145-7156]:SimpleType[7145-7156]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7157-7390]:Block[7157-7390]"
    }, {
      "left" : "if (in.peek() == JsonToken.NULL)",
      "right" : "if (in.peek() == JsonToken.NULL)",
      "info" : "IfStatement[7165-7251]:IfStatement[7165-7251]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7198-7251]:Block[7198-7251]"
    }, {
      "left" : "in.nextNull();",
      "right" : "in.nextNull();",
      "info" : "ExpressionStatement[7208-7222]:ExpressionStatement[7208-7222]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[7231-7243]:ReturnStatement[7231-7243]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[7258-7384]:TryStatement[7258-7384]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7262-7300]:Block[7262-7300]"
    }, {
      "left" : "return in.nextInt();",
      "right" : "return in.nextInt();",
      "info" : "ReturnStatement[7272-7292]:ReturnStatement[7272-7292]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7333-7384]:Block[7333-7384]"
    }, {
      "left" : "throw new JsonSyntaxException(e);",
      "right" : "throw new JsonSyntaxException(e);",
      "info" : "ThrowStatement[7343-7376]:ThrowStatement[7343-7376]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[7395-7404]:MarkerAnnotation[7395-7404]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7409-7415]:Modifier[7409-7415]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7416-7420]:PrimitiveType[7416-7420]"
    }, {
      "left" : "write",
      "right" : "write",
      "info" : "SimpleName[7421-7426]:SimpleName[7421-7426]"
    }, {
      "left" : "JsonWriter out",
      "right" : "JsonWriter out",
      "info" : "SingleVariableDeclaration[7427-7441]:SingleVariableDeclaration[7427-7441]"
    }, {
      "left" : "Number value",
      "right" : "Number value",
      "info" : "SingleVariableDeclaration[7443-7455]:SingleVariableDeclaration[7443-7455]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[7464-7475]:SimpleType[7464-7475]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7476-7507]:Block[7476-7507]"
    }, {
      "left" : "out.value(value);",
      "right" : "out.value(value);",
      "info" : "ExpressionStatement[7484-7501]:ExpressionStatement[7484-7501]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[7708-7717]:MarkerAnnotation[7708-7717]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7722-7728]:Modifier[7722-7728]"
    }, {
      "left" : "Number",
      "right" : "Number",
      "info" : "SimpleType[7729-7735]:SimpleType[7729-7735]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[7736-7740]:SimpleName[7736-7740]"
    }, {
      "left" : "JsonReader in",
      "right" : "JsonReader in",
      "info" : "SingleVariableDeclaration[7741-7754]:SingleVariableDeclaration[7741-7754]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[7763-7774]:SimpleType[7763-7774]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7775-8009]:Block[7775-8009]"
    }, {
      "left" : "if (in.peek() == JsonToken.NULL)",
      "right" : "if (in.peek() == JsonToken.NULL)",
      "info" : "IfStatement[7783-7869]:IfStatement[7783-7869]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7816-7869]:Block[7816-7869]"
    }, {
      "left" : "in.nextNull();",
      "right" : "in.nextNull();",
      "info" : "ExpressionStatement[7826-7840]:ExpressionStatement[7826-7840]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[7849-7861]:ReturnStatement[7849-7861]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[7876-8003]:TryStatement[7876-8003]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7880-7919]:Block[7880-7919]"
    }, {
      "left" : "return in.nextLong();",
      "right" : "return in.nextLong();",
      "info" : "ReturnStatement[7890-7911]:ReturnStatement[7890-7911]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7952-8003]:Block[7952-8003]"
    }, {
      "left" : "throw new JsonSyntaxException(e);",
      "right" : "throw new JsonSyntaxException(e);",
      "info" : "ThrowStatement[7962-7995]:ThrowStatement[7962-7995]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[8014-8023]:MarkerAnnotation[8014-8023]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8028-8034]:Modifier[8028-8034]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[8035-8039]:PrimitiveType[8035-8039]"
    }, {
      "left" : "write",
      "right" : "write",
      "info" : "SimpleName[8040-8045]:SimpleName[8040-8045]"
    }, {
      "left" : "JsonWriter out",
      "right" : "JsonWriter out",
      "info" : "SingleVariableDeclaration[8046-8060]:SingleVariableDeclaration[8046-8060]"
    }, {
      "left" : "Number value",
      "right" : "Number value",
      "info" : "SingleVariableDeclaration[8062-8074]:SingleVariableDeclaration[8062-8074]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[8083-8094]:SimpleType[8083-8094]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8095-8126]:Block[8095-8126]"
    }, {
      "left" : "out.value(value);",
      "right" : "out.value(value);",
      "info" : "ExpressionStatement[8103-8120]:ExpressionStatement[8103-8120]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[8215-8224]:MarkerAnnotation[8215-8224]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8229-8235]:Modifier[8229-8235]"
    }, {
      "left" : "Number",
      "right" : "Number",
      "info" : "SimpleType[8236-8242]:SimpleType[8236-8242]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[8243-8247]:SimpleName[8243-8247]"
    }, {
      "left" : "JsonReader in",
      "right" : "JsonReader in",
      "info" : "SingleVariableDeclaration[8248-8261]:SingleVariableDeclaration[8248-8261]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[8270-8281]:SimpleType[8270-8281]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8282-8420]:Block[8282-8420]"
    }, {
      "left" : "if (in.peek() == JsonToken.NULL)",
      "right" : "if (in.peek() == JsonToken.NULL)",
      "info" : "IfStatement[8290-8376]:IfStatement[8290-8376]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8323-8376]:Block[8323-8376]"
    }, {
      "left" : "in.nextNull();",
      "right" : "in.nextNull();",
      "info" : "ExpressionStatement[8333-8347]:ExpressionStatement[8333-8347]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[8356-8368]:ReturnStatement[8356-8368]"
    }, {
      "left" : "return (float) in.nextDouble();",
      "right" : "return (float) in.nextDouble();",
      "info" : "ReturnStatement[8383-8414]:ReturnStatement[8383-8414]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[8425-8434]:MarkerAnnotation[8425-8434]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8439-8445]:Modifier[8439-8445]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[8446-8450]:PrimitiveType[8446-8450]"
    }, {
      "left" : "write",
      "right" : "write",
      "info" : "SimpleName[8451-8456]:SimpleName[8451-8456]"
    }, {
      "left" : "JsonWriter out",
      "right" : "JsonWriter out",
      "info" : "SingleVariableDeclaration[8457-8471]:SingleVariableDeclaration[8457-8471]"
    }, {
      "left" : "Number value",
      "right" : "Number value",
      "info" : "SingleVariableDeclaration[8473-8485]:SingleVariableDeclaration[8473-8485]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[8494-8505]:SimpleType[8494-8505]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8506-8537]:Block[8506-8537]"
    }, {
      "left" : "out.value(value);",
      "right" : "out.value(value);",
      "info" : "ExpressionStatement[8514-8531]:ExpressionStatement[8514-8531]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[8627-8636]:MarkerAnnotation[8627-8636]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8641-8647]:Modifier[8641-8647]"
    }, {
      "left" : "Number",
      "right" : "Number",
      "info" : "SimpleType[8648-8654]:SimpleType[8648-8654]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[8655-8659]:SimpleName[8655-8659]"
    }, {
      "left" : "JsonReader in",
      "right" : "JsonReader in",
      "info" : "SingleVariableDeclaration[8660-8673]:SingleVariableDeclaration[8660-8673]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[8682-8693]:SimpleType[8682-8693]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8694-8824]:Block[8694-8824]"
    }, {
      "left" : "if (in.peek() == JsonToken.NULL)",
      "right" : "if (in.peek() == JsonToken.NULL)",
      "info" : "IfStatement[8702-8788]:IfStatement[8702-8788]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8735-8788]:Block[8735-8788]"
    }, {
      "left" : "in.nextNull();",
      "right" : "in.nextNull();",
      "info" : "ExpressionStatement[8745-8759]:ExpressionStatement[8745-8759]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[8768-8780]:ReturnStatement[8768-8780]"
    }, {
      "left" : "return in.nextDouble();",
      "right" : "return in.nextDouble();",
      "info" : "ReturnStatement[8795-8818]:ReturnStatement[8795-8818]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[8829-8838]:MarkerAnnotation[8829-8838]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8843-8849]:Modifier[8843-8849]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[8850-8854]:PrimitiveType[8850-8854]"
    }, {
      "left" : "write",
      "right" : "write",
      "info" : "SimpleName[8855-8860]:SimpleName[8855-8860]"
    }, {
      "left" : "JsonWriter out",
      "right" : "JsonWriter out",
      "info" : "SingleVariableDeclaration[8861-8875]:SingleVariableDeclaration[8861-8875]"
    }, {
      "left" : "Number value",
      "right" : "Number value",
      "info" : "SingleVariableDeclaration[8877-8889]:SingleVariableDeclaration[8877-8889]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[8898-8909]:SimpleType[8898-8909]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8910-8941]:Block[8910-8941]"
    }, {
      "left" : "out.value(value);",
      "right" : "out.value(value);",
      "info" : "ExpressionStatement[8918-8935]:ExpressionStatement[8918-8935]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[9031-9040]:MarkerAnnotation[9031-9040]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9045-9051]:Modifier[9045-9051]"
    }, {
      "left" : "Number",
      "right" : "Number",
      "info" : "SimpleType[9052-9058]:SimpleType[9052-9058]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[9059-9063]:SimpleName[9059-9063]"
    }, {
      "left" : "JsonReader in",
      "right" : "JsonReader in",
      "info" : "SingleVariableDeclaration[9064-9077]:SingleVariableDeclaration[9064-9077]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[9086-9097]:SimpleType[9086-9097]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9098-9408]:Block[9098-9408]"
    }, {
      "left" : "JsonToken jsonToken = in.peek();",
      "right" : "JsonToken jsonToken = in.peek();",
      "info" : "VariableDeclarationStatement[9106-9138]:VariableDeclarationStatement[9106-9138]"
    }, {
      "left" : "switch (jsonToken) {\n      case NULL:\n        in.nextNull();\n        return null;\n      case NUMBER:\n        return new LazilyParsedNumber(in.nextString());\n      default:\n        throw new JsonSyntaxException(\"Expecting number, got: \" + jsonToken);\n      }",
      "right" : "switch (jsonToken) {\n      case NULL:\n        in.nextNull();\n        return null;\n      case NUMBER:\n        return new LazilyParsedNumber(in.nextString());\n      default:\n        throw new JsonSyntaxException(\"Expecting number, got: \" + jsonToken);\n      }",
      "info" : "SwitchStatement[9145-9402]:SwitchStatement[9145-9402]"
    }, {
      "left" : "case NULL:",
      "right" : "case NULL:",
      "info" : "SwitchCase[9172-9182]:SwitchCase[9172-9182]"
    }, {
      "left" : "in.nextNull();",
      "right" : "in.nextNull();",
      "info" : "ExpressionStatement[9191-9205]:ExpressionStatement[9191-9205]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[9214-9226]:ReturnStatement[9214-9226]"
    }, {
      "left" : "case NUMBER:",
      "right" : "case NUMBER:",
      "info" : "SwitchCase[9233-9245]:SwitchCase[9233-9245]"
    }, {
      "left" : "return new LazilyParsedNumber(in.nextString());",
      "right" : "return new LazilyParsedNumber(in.nextString());",
      "info" : "ReturnStatement[9254-9301]:ReturnStatement[9254-9301]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[9308-9316]:SwitchCase[9308-9316]"
    }, {
      "left" : "throw new JsonSyntaxException(\"Expecting number, got: \" + jsonToken);",
      "right" : "throw new JsonSyntaxException(\"Expecting number, got: \" + jsonToken);",
      "info" : "ThrowStatement[9325-9394]:ThrowStatement[9325-9394]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[9413-9422]:MarkerAnnotation[9413-9422]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9427-9433]:Modifier[9427-9433]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[9434-9438]:PrimitiveType[9434-9438]"
    }, {
      "left" : "write",
      "right" : "write",
      "info" : "SimpleName[9439-9444]:SimpleName[9439-9444]"
    }, {
      "left" : "JsonWriter out",
      "right" : "JsonWriter out",
      "info" : "SingleVariableDeclaration[9445-9459]:SingleVariableDeclaration[9445-9459]"
    }, {
      "left" : "Number value",
      "right" : "Number value",
      "info" : "SingleVariableDeclaration[9461-9473]:SingleVariableDeclaration[9461-9473]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[9482-9493]:SimpleType[9482-9493]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9494-9525]:Block[9494-9525]"
    }, {
      "left" : "out.value(value);",
      "right" : "out.value(value);",
      "info" : "ExpressionStatement[9502-9519]:ExpressionStatement[9502-9519]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[9717-9726]:MarkerAnnotation[9717-9726]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9731-9737]:Modifier[9731-9737]"
    }, {
      "left" : "Character",
      "right" : "Character",
      "info" : "SimpleType[9738-9747]:SimpleType[9738-9747]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[9748-9752]:SimpleName[9748-9752]"
    }, {
      "left" : "JsonReader in",
      "right" : "JsonReader in",
      "info" : "SingleVariableDeclaration[9753-9766]:SingleVariableDeclaration[9753-9766]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[9775-9786]:SimpleType[9775-9786]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9787-10065]:Block[9787-10065]"
    }, {
      "left" : "if (in.peek() == JsonToken.NULL)",
      "right" : "if (in.peek() == JsonToken.NULL)",
      "info" : "IfStatement[9795-9881]:IfStatement[9795-9881]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9828-9881]:Block[9828-9881]"
    }, {
      "left" : "in.nextNull();",
      "right" : "in.nextNull();",
      "info" : "ExpressionStatement[9838-9852]:ExpressionStatement[9838-9852]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[9861-9873]:ReturnStatement[9861-9873]"
    }, {
      "left" : "String str = in.nextString();",
      "right" : "String str = in.nextString();",
      "info" : "VariableDeclarationStatement[9888-9917]:VariableDeclarationStatement[9888-9917]"
    }, {
      "left" : "if (str.length() != 1)",
      "right" : "if (str.length() != 1)",
      "info" : "IfStatement[9924-10031]:IfStatement[9924-10031]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9947-10031]:Block[9947-10031]"
    }, {
      "left" : "throw new JsonSyntaxException(\"Expecting character, got: \" + str);",
      "right" : "throw new JsonSyntaxException(\"Expecting character, got: \" + str);",
      "info" : "ThrowStatement[9957-10023]:ThrowStatement[9957-10023]"
    }, {
      "left" : "return str.charAt(0);",
      "right" : "return str.charAt(0);",
      "info" : "ReturnStatement[10038-10059]:ReturnStatement[10038-10059]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[10070-10079]:MarkerAnnotation[10070-10079]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10084-10090]:Modifier[10084-10090]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[10091-10095]:PrimitiveType[10091-10095]"
    }, {
      "left" : "write",
      "right" : "write",
      "info" : "SimpleName[10096-10101]:SimpleName[10096-10101]"
    }, {
      "left" : "JsonWriter out",
      "right" : "JsonWriter out",
      "info" : "SingleVariableDeclaration[10102-10116]:SingleVariableDeclaration[10102-10116]"
    }, {
      "left" : "Character value",
      "right" : "Character value",
      "info" : "SingleVariableDeclaration[10118-10133]:SingleVariableDeclaration[10118-10133]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[10142-10153]:SimpleType[10142-10153]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10154-10224]:Block[10154-10224]"
    }, {
      "left" : "out.value(value == null ? null : String.valueOf(value));",
      "right" : "out.value(value == null ? null : String.valueOf(value));",
      "info" : "ExpressionStatement[10162-10218]:ExpressionStatement[10162-10218]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[10434-10443]:MarkerAnnotation[10434-10443]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10448-10454]:Modifier[10448-10454]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[10455-10461]:SimpleType[10455-10461]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[10462-10466]:SimpleName[10462-10466]"
    }, {
      "left" : "JsonReader in",
      "right" : "JsonReader in",
      "info" : "SingleVariableDeclaration[10467-10480]:SingleVariableDeclaration[10467-10480]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[10489-10500]:SimpleType[10489-10500]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10501-10825]:Block[10501-10825]"
    }, {
      "left" : "JsonToken peek = in.peek();",
      "right" : "JsonToken peek = in.peek();",
      "info" : "VariableDeclarationStatement[10509-10536]:VariableDeclarationStatement[10509-10536]"
    }, {
      "left" : "if (peek == JsonToken.NULL)",
      "right" : "if (peek == JsonToken.NULL)",
      "info" : "IfStatement[10543-10624]:IfStatement[10543-10624]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10571-10624]:Block[10571-10624]"
    }, {
      "left" : "in.nextNull();",
      "right" : "in.nextNull();",
      "info" : "ExpressionStatement[10581-10595]:ExpressionStatement[10581-10595]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[10604-10616]:ReturnStatement[10604-10616]"
    }, {
      "left" : "if (peek == JsonToken.BOOLEAN)",
      "right" : "if (peek == JsonToken.BOOLEAN)",
      "info" : "IfStatement[10698-10789]:IfStatement[10698-10789]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10729-10789]:Block[10729-10789]"
    }, {
      "left" : "return Boolean.toString(in.nextBoolean());",
      "right" : "return Boolean.toString(in.nextBoolean());",
      "info" : "ReturnStatement[10739-10781]:ReturnStatement[10739-10781]"
    }, {
      "left" : "return in.nextString();",
      "right" : "return in.nextString();",
      "info" : "ReturnStatement[10796-10819]:ReturnStatement[10796-10819]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[10830-10839]:MarkerAnnotation[10830-10839]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10844-10850]:Modifier[10844-10850]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[10851-10855]:PrimitiveType[10851-10855]"
    }, {
      "left" : "write",
      "right" : "write",
      "info" : "SimpleName[10856-10861]:SimpleName[10856-10861]"
    }, {
      "left" : "JsonWriter out",
      "right" : "JsonWriter out",
      "info" : "SingleVariableDeclaration[10862-10876]:SingleVariableDeclaration[10862-10876]"
    }, {
      "left" : "String value",
      "right" : "String value",
      "info" : "SingleVariableDeclaration[10878-10890]:SingleVariableDeclaration[10878-10890]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[10899-10910]:SimpleType[10899-10910]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10911-10942]:Block[10911-10942]"
    }, {
      "left" : "out.value(value);",
      "right" : "out.value(value);",
      "info" : "ExpressionStatement[10919-10936]:ExpressionStatement[10919-10936]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[11047-11056]:MarkerAnnotation[11047-11056]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11057-11063]:Modifier[11057-11063]"
    }, {
      "left" : "BigDecimal",
      "right" : "BigDecimal",
      "info" : "SimpleType[11064-11074]:SimpleType[11064-11074]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[11075-11079]:SimpleName[11075-11079]"
    }, {
      "left" : "JsonReader in",
      "right" : "JsonReader in",
      "info" : "SingleVariableDeclaration[11080-11093]:SingleVariableDeclaration[11080-11093]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[11102-11113]:SimpleType[11102-11113]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11114-11366]:Block[11114-11366]"
    }, {
      "left" : "if (in.peek() == JsonToken.NULL)",
      "right" : "if (in.peek() == JsonToken.NULL)",
      "info" : "IfStatement[11122-11208]:IfStatement[11122-11208]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11155-11208]:Block[11155-11208]"
    }, {
      "left" : "in.nextNull();",
      "right" : "in.nextNull();",
      "info" : "ExpressionStatement[11165-11179]:ExpressionStatement[11165-11179]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[11188-11200]:ReturnStatement[11188-11200]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[11215-11360]:TryStatement[11215-11360]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11219-11276]:Block[11219-11276]"
    }, {
      "left" : "return new BigDecimal(in.nextString());",
      "right" : "return new BigDecimal(in.nextString());",
      "info" : "ReturnStatement[11229-11268]:ReturnStatement[11229-11268]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11309-11360]:Block[11309-11360]"
    }, {
      "left" : "throw new JsonSyntaxException(e);",
      "right" : "throw new JsonSyntaxException(e);",
      "info" : "ThrowStatement[11319-11352]:ThrowStatement[11319-11352]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[11372-11381]:MarkerAnnotation[11372-11381]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11382-11388]:Modifier[11382-11388]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[11389-11393]:PrimitiveType[11389-11393]"
    }, {
      "left" : "write",
      "right" : "write",
      "info" : "SimpleName[11394-11399]:SimpleName[11394-11399]"
    }, {
      "left" : "JsonWriter out",
      "right" : "JsonWriter out",
      "info" : "SingleVariableDeclaration[11400-11414]:SingleVariableDeclaration[11400-11414]"
    }, {
      "left" : "BigDecimal value",
      "right" : "BigDecimal value",
      "info" : "SingleVariableDeclaration[11416-11432]:SingleVariableDeclaration[11416-11432]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[11441-11452]:SimpleType[11441-11452]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11453-11484]:Block[11453-11484]"
    }, {
      "left" : "out.value(value);",
      "right" : "out.value(value);",
      "info" : "ExpressionStatement[11461-11478]:ExpressionStatement[11461-11478]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[11589-11598]:MarkerAnnotation[11589-11598]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11599-11605]:Modifier[11599-11605]"
    }, {
      "left" : "BigInteger",
      "right" : "BigInteger",
      "info" : "SimpleType[11606-11616]:SimpleType[11606-11616]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[11617-11621]:SimpleName[11617-11621]"
    }, {
      "left" : "JsonReader in",
      "right" : "JsonReader in",
      "info" : "SingleVariableDeclaration[11622-11635]:SingleVariableDeclaration[11622-11635]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[11644-11655]:SimpleType[11644-11655]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11656-11908]:Block[11656-11908]"
    }, {
      "left" : "if (in.peek() == JsonToken.NULL)",
      "right" : "if (in.peek() == JsonToken.NULL)",
      "info" : "IfStatement[11664-11750]:IfStatement[11664-11750]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11697-11750]:Block[11697-11750]"
    }, {
      "left" : "in.nextNull();",
      "right" : "in.nextNull();",
      "info" : "ExpressionStatement[11707-11721]:ExpressionStatement[11707-11721]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[11730-11742]:ReturnStatement[11730-11742]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[11757-11902]:TryStatement[11757-11902]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11761-11818]:Block[11761-11818]"
    }, {
      "left" : "return new BigInteger(in.nextString());",
      "right" : "return new BigInteger(in.nextString());",
      "info" : "ReturnStatement[11771-11810]:ReturnStatement[11771-11810]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11851-11902]:Block[11851-11902]"
    }, {
      "left" : "throw new JsonSyntaxException(e);",
      "right" : "throw new JsonSyntaxException(e);",
      "info" : "ThrowStatement[11861-11894]:ThrowStatement[11861-11894]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[11914-11923]:MarkerAnnotation[11914-11923]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11924-11930]:Modifier[11924-11930]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[11931-11935]:PrimitiveType[11931-11935]"
    }, {
      "left" : "write",
      "right" : "write",
      "info" : "SimpleName[11936-11941]:SimpleName[11936-11941]"
    }, {
      "left" : "JsonWriter out",
      "right" : "JsonWriter out",
      "info" : "SingleVariableDeclaration[11942-11956]:SingleVariableDeclaration[11942-11956]"
    }, {
      "left" : "BigInteger value",
      "right" : "BigInteger value",
      "info" : "SingleVariableDeclaration[11958-11974]:SingleVariableDeclaration[11958-11974]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[11983-11994]:SimpleType[11983-11994]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11995-12026]:Block[11995-12026]"
    }, {
      "left" : "out.value(value);",
      "right" : "out.value(value);",
      "info" : "ExpressionStatement[12003-12020]:ExpressionStatement[12003-12020]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[12231-12240]:MarkerAnnotation[12231-12240]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12245-12251]:Modifier[12245-12251]"
    }, {
      "left" : "StringBuilder",
      "right" : "StringBuilder",
      "info" : "SimpleType[12252-12265]:SimpleType[12252-12265]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[12266-12270]:SimpleName[12266-12270]"
    }, {
      "left" : "JsonReader in",
      "right" : "JsonReader in",
      "info" : "SingleVariableDeclaration[12271-12284]:SingleVariableDeclaration[12271-12284]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[12293-12304]:SimpleType[12293-12304]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12305-12454]:Block[12305-12454]"
    }, {
      "left" : "if (in.peek() == JsonToken.NULL)",
      "right" : "if (in.peek() == JsonToken.NULL)",
      "info" : "IfStatement[12313-12399]:IfStatement[12313-12399]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12346-12399]:Block[12346-12399]"
    }, {
      "left" : "in.nextNull();",
      "right" : "in.nextNull();",
      "info" : "ExpressionStatement[12356-12370]:ExpressionStatement[12356-12370]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[12379-12391]:ReturnStatement[12379-12391]"
    }, {
      "left" : "return new StringBuilder(in.nextString());",
      "right" : "return new StringBuilder(in.nextString());",
      "info" : "ReturnStatement[12406-12448]:ReturnStatement[12406-12448]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[12459-12468]:MarkerAnnotation[12459-12468]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12473-12479]:Modifier[12473-12479]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[12480-12484]:PrimitiveType[12480-12484]"
    }, {
      "left" : "write",
      "right" : "write",
      "info" : "SimpleName[12485-12490]:SimpleName[12485-12490]"
    }, {
      "left" : "JsonWriter out",
      "right" : "JsonWriter out",
      "info" : "SingleVariableDeclaration[12491-12505]:SingleVariableDeclaration[12491-12505]"
    }, {
      "left" : "StringBuilder value",
      "right" : "StringBuilder value",
      "info" : "SingleVariableDeclaration[12507-12526]:SingleVariableDeclaration[12507-12526]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[12535-12546]:SimpleType[12535-12546]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12547-12612]:Block[12547-12612]"
    }, {
      "left" : "out.value(value == null ? null : value.toString());",
      "right" : "out.value(value == null ? null : value.toString());",
      "info" : "ExpressionStatement[12555-12606]:ExpressionStatement[12555-12606]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[12841-12850]:MarkerAnnotation[12841-12850]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12855-12861]:Modifier[12855-12861]"
    }, {
      "left" : "StringBuffer",
      "right" : "StringBuffer",
      "info" : "SimpleType[12862-12874]:SimpleType[12862-12874]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[12875-12879]:SimpleName[12875-12879]"
    }, {
      "left" : "JsonReader in",
      "right" : "JsonReader in",
      "info" : "SingleVariableDeclaration[12880-12893]:SingleVariableDeclaration[12880-12893]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[12902-12913]:SimpleType[12902-12913]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12914-13062]:Block[12914-13062]"
    }, {
      "left" : "if (in.peek() == JsonToken.NULL)",
      "right" : "if (in.peek() == JsonToken.NULL)",
      "info" : "IfStatement[12922-13008]:IfStatement[12922-13008]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12955-13008]:Block[12955-13008]"
    }, {
      "left" : "in.nextNull();",
      "right" : "in.nextNull();",
      "info" : "ExpressionStatement[12965-12979]:ExpressionStatement[12965-12979]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[12988-13000]:ReturnStatement[12988-13000]"
    }, {
      "left" : "return new StringBuffer(in.nextString());",
      "right" : "return new StringBuffer(in.nextString());",
      "info" : "ReturnStatement[13015-13056]:ReturnStatement[13015-13056]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[13067-13076]:MarkerAnnotation[13067-13076]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[13081-13087]:Modifier[13081-13087]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[13088-13092]:PrimitiveType[13088-13092]"
    }, {
      "left" : "write",
      "right" : "write",
      "info" : "SimpleName[13093-13098]:SimpleName[13093-13098]"
    }, {
      "left" : "JsonWriter out",
      "right" : "JsonWriter out",
      "info" : "SingleVariableDeclaration[13099-13113]:SingleVariableDeclaration[13099-13113]"
    }, {
      "left" : "StringBuffer value",
      "right" : "StringBuffer value",
      "info" : "SingleVariableDeclaration[13115-13133]:SingleVariableDeclaration[13115-13133]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[13142-13153]:SimpleType[13142-13153]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13154-13219]:Block[13154-13219]"
    }, {
      "left" : "out.value(value == null ? null : value.toString());",
      "right" : "out.value(value == null ? null : value.toString());",
      "info" : "ExpressionStatement[13162-13213]:ExpressionStatement[13162-13213]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[13417-13426]:MarkerAnnotation[13417-13426]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[13431-13437]:Modifier[13431-13437]"
    }, {
      "left" : "URL",
      "right" : "URL",
      "info" : "SimpleType[13438-13441]:SimpleType[13438-13441]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[13442-13446]:SimpleName[13442-13446]"
    }, {
      "left" : "JsonReader in",
      "right" : "JsonReader in",
      "info" : "SingleVariableDeclaration[13447-13460]:SingleVariableDeclaration[13447-13460]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[13469-13480]:SimpleType[13469-13480]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13481-13693]:Block[13481-13693]"
    }, {
      "left" : "if (in.peek() == JsonToken.NULL)",
      "right" : "if (in.peek() == JsonToken.NULL)",
      "info" : "IfStatement[13489-13575]:IfStatement[13489-13575]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13522-13575]:Block[13522-13575]"
    }, {
      "left" : "in.nextNull();",
      "right" : "in.nextNull();",
      "info" : "ExpressionStatement[13532-13546]:ExpressionStatement[13532-13546]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[13555-13567]:ReturnStatement[13555-13567]"
    }, {
      "left" : "String nextString = in.nextString();",
      "right" : "String nextString = in.nextString();",
      "info" : "VariableDeclarationStatement[13582-13618]:VariableDeclarationStatement[13582-13618]"
    }, {
      "left" : "return \"null\".equals(nextString) ? null : new URL(nextString);",
      "right" : "return \"null\".equals(nextString) ? null : new URL(nextString);",
      "info" : "ReturnStatement[13625-13687]:ReturnStatement[13625-13687]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[13698-13707]:MarkerAnnotation[13698-13707]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[13712-13718]:Modifier[13712-13718]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[13719-13723]:PrimitiveType[13719-13723]"
    }, {
      "left" : "write",
      "right" : "write",
      "info" : "SimpleName[13724-13729]:SimpleName[13724-13729]"
    }, {
      "left" : "JsonWriter out",
      "right" : "JsonWriter out",
      "info" : "SingleVariableDeclaration[13730-13744]:SingleVariableDeclaration[13730-13744]"
    }, {
      "left" : "URL value",
      "right" : "URL value",
      "info" : "SingleVariableDeclaration[13746-13755]:SingleVariableDeclaration[13746-13755]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[13764-13775]:SimpleType[13764-13775]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13776-13847]:Block[13776-13847]"
    }, {
      "left" : "out.value(value == null ? null : value.toExternalForm());",
      "right" : "out.value(value == null ? null : value.toExternalForm());",
      "info" : "ExpressionStatement[13784-13841]:ExpressionStatement[13784-13841]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[14012-14021]:MarkerAnnotation[14012-14021]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[14026-14032]:Modifier[14026-14032]"
    }, {
      "left" : "URI",
      "right" : "URI",
      "info" : "SimpleType[14033-14036]:SimpleType[14033-14036]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[14037-14041]:SimpleName[14037-14041]"
    }, {
      "left" : "JsonReader in",
      "right" : "JsonReader in",
      "info" : "SingleVariableDeclaration[14042-14055]:SingleVariableDeclaration[14042-14055]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[14064-14075]:SimpleType[14064-14075]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14076-14389]:Block[14076-14389]"
    }, {
      "left" : "if (in.peek() == JsonToken.NULL)",
      "right" : "if (in.peek() == JsonToken.NULL)",
      "info" : "IfStatement[14084-14170]:IfStatement[14084-14170]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14117-14170]:Block[14117-14170]"
    }, {
      "left" : "in.nextNull();",
      "right" : "in.nextNull();",
      "info" : "ExpressionStatement[14127-14141]:ExpressionStatement[14127-14141]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[14150-14162]:ReturnStatement[14150-14162]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[14177-14383]:TryStatement[14177-14383]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14181-14306]:Block[14181-14306]"
    }, {
      "left" : "String nextString = in.nextString();",
      "right" : "String nextString = in.nextString();",
      "info" : "VariableDeclarationStatement[14191-14227]:VariableDeclarationStatement[14191-14227]"
    }, {
      "left" : "return \"null\".equals(nextString) ? null : new URI(nextString);",
      "right" : "return \"null\".equals(nextString) ? null : new URI(nextString);",
      "info" : "ReturnStatement[14236-14298]:ReturnStatement[14236-14298]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14336-14383]:Block[14336-14383]"
    }, {
      "left" : "throw new JsonIOException(e);",
      "right" : "throw new JsonIOException(e);",
      "info" : "ThrowStatement[14346-14375]:ThrowStatement[14346-14375]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[14394-14403]:MarkerAnnotation[14394-14403]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[14408-14414]:Modifier[14408-14414]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[14415-14419]:PrimitiveType[14415-14419]"
    }, {
      "left" : "write",
      "right" : "write",
      "info" : "SimpleName[14420-14425]:SimpleName[14420-14425]"
    }, {
      "left" : "JsonWriter out",
      "right" : "JsonWriter out",
      "info" : "SingleVariableDeclaration[14426-14440]:SingleVariableDeclaration[14426-14440]"
    }, {
      "left" : "URI value",
      "right" : "URI value",
      "info" : "SingleVariableDeclaration[14442-14451]:SingleVariableDeclaration[14442-14451]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[14460-14471]:SimpleType[14460-14471]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14472-14542]:Block[14472-14542]"
    }, {
      "left" : "out.value(value == null ? null : value.toASCIIString());",
      "right" : "out.value(value == null ? null : value.toASCIIString());",
      "info" : "ExpressionStatement[14480-14536]:ExpressionStatement[14480-14536]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[14732-14741]:MarkerAnnotation[14732-14741]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[14746-14752]:Modifier[14746-14752]"
    }, {
      "left" : "InetAddress",
      "right" : "InetAddress",
      "info" : "SimpleType[14753-14764]:SimpleType[14753-14764]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[14765-14769]:SimpleName[14765-14769]"
    }, {
      "left" : "JsonReader in",
      "right" : "JsonReader in",
      "info" : "SingleVariableDeclaration[14770-14783]:SingleVariableDeclaration[14770-14783]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[14792-14803]:SimpleType[14792-14803]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14804-15045]:Block[14804-15045]"
    }, {
      "left" : "if (in.peek() == JsonToken.NULL)",
      "right" : "if (in.peek() == JsonToken.NULL)",
      "info" : "IfStatement[14812-14898]:IfStatement[14812-14898]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14845-14898]:Block[14845-14898]"
    }, {
      "left" : "in.nextNull();",
      "right" : "in.nextNull();",
      "info" : "ExpressionStatement[14855-14869]:ExpressionStatement[14855-14869]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[14878-14890]:ReturnStatement[14878-14890]"
    }, {
      "left" : "return InetAddress.getByName(in.nextString());",
      "right" : "return InetAddress.getByName(in.nextString());",
      "info" : "ReturnStatement[14993-15039]:ReturnStatement[14993-15039]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[15050-15059]:MarkerAnnotation[15050-15059]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[15064-15070]:Modifier[15064-15070]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[15071-15075]:PrimitiveType[15071-15075]"
    }, {
      "left" : "write",
      "right" : "write",
      "info" : "SimpleName[15076-15081]:SimpleName[15076-15081]"
    }, {
      "left" : "JsonWriter out",
      "right" : "JsonWriter out",
      "info" : "SingleVariableDeclaration[15082-15096]:SingleVariableDeclaration[15082-15096]"
    }, {
      "left" : "InetAddress value",
      "right" : "InetAddress value",
      "info" : "SingleVariableDeclaration[15098-15115]:SingleVariableDeclaration[15098-15115]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[15124-15135]:SimpleType[15124-15135]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15136-15207]:Block[15136-15207]"
    }, {
      "left" : "out.value(value == null ? null : value.getHostAddress());",
      "right" : "out.value(value == null ? null : value.getHostAddress());",
      "info" : "ExpressionStatement[15144-15201]:ExpressionStatement[15144-15201]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[15418-15427]:MarkerAnnotation[15418-15427]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[15432-15438]:Modifier[15432-15438]"
    }, {
      "left" : "UUID",
      "right" : "UUID",
      "info" : "SimpleType[15439-15443]:SimpleType[15439-15443]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[15444-15448]:SimpleName[15444-15448]"
    }, {
      "left" : "JsonReader in",
      "right" : "JsonReader in",
      "info" : "SingleVariableDeclaration[15449-15462]:SingleVariableDeclaration[15449-15462]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[15471-15482]:SimpleType[15471-15482]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15483-15640]:Block[15483-15640]"
    }, {
      "left" : "if (in.peek() == JsonToken.NULL)",
      "right" : "if (in.peek() == JsonToken.NULL)",
      "info" : "IfStatement[15491-15577]:IfStatement[15491-15577]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15524-15577]:Block[15524-15577]"
    }, {
      "left" : "in.nextNull();",
      "right" : "in.nextNull();",
      "info" : "ExpressionStatement[15534-15548]:ExpressionStatement[15534-15548]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[15557-15569]:ReturnStatement[15557-15569]"
    }, {
      "left" : "return java.util.UUID.fromString(in.nextString());",
      "right" : "return java.util.UUID.fromString(in.nextString());",
      "info" : "ReturnStatement[15584-15634]:ReturnStatement[15584-15634]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[15645-15654]:MarkerAnnotation[15645-15654]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[15659-15665]:Modifier[15659-15665]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[15666-15670]:PrimitiveType[15666-15670]"
    }, {
      "left" : "write",
      "right" : "write",
      "info" : "SimpleName[15671-15676]:SimpleName[15671-15676]"
    }, {
      "left" : "JsonWriter out",
      "right" : "JsonWriter out",
      "info" : "SingleVariableDeclaration[15677-15691]:SingleVariableDeclaration[15677-15691]"
    }, {
      "left" : "UUID value",
      "right" : "UUID value",
      "info" : "SingleVariableDeclaration[15693-15703]:SingleVariableDeclaration[15693-15703]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[15712-15723]:SimpleType[15712-15723]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15724-15789]:Block[15724-15789]"
    }, {
      "left" : "out.value(value == null ? null : value.toString());",
      "right" : "out.value(value == null ? null : value.toString());",
      "info" : "ExpressionStatement[15732-15783]:ExpressionStatement[15732-15783]"
    }, {
      "left" : "@SuppressWarnings(\"unchecked\")",
      "right" : "@SuppressWarnings(\"unchecked\")",
      "info" : "SingleMemberAnnotation[15975-16005]:SingleMemberAnnotation[15975-16005]"
    }, {
      "left" : "// we use a runtime check to make sure the 'T's equal",
      "right" : "// we use a runtime check to make sure the 'T's equal",
      "info" : "LineComment[16006-16059]:LineComment[16006-16059]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[16064-16070]:Modifier[16064-16070]"
    }, {
      "left" : "T",
      "right" : "T",
      "info" : "TypeParameter[16072-16073]:TypeParameter[16072-16073]"
    }, {
      "left" : "TypeAdapter<T>",
      "right" : "TypeAdapter<T>",
      "info" : "ParameterizedType[16075-16089]:ParameterizedType[16075-16089]"
    }, {
      "left" : "create",
      "right" : "create",
      "info" : "SimpleName[16090-16096]:SimpleName[16090-16096]"
    }, {
      "left" : "Gson gson",
      "right" : "Gson gson",
      "info" : "SingleVariableDeclaration[16097-16106]:SingleVariableDeclaration[16097-16106]"
    }, {
      "left" : "TypeToken<T> typeToken",
      "right" : "TypeToken<T> typeToken",
      "info" : "SingleVariableDeclaration[16108-16130]:SingleVariableDeclaration[16108-16130]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16132-16721]:Block[16132-16721]"
    }, {
      "left" : "if (typeToken.getRawType() != Timestamp.class)",
      "right" : "if (typeToken.getRawType() != Timestamp.class)",
      "info" : "IfStatement[16140-16217]:IfStatement[16140-16217]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16187-16217]:Block[16187-16217]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[16197-16209]:ReturnStatement[16197-16209]"
    }, {
      "left" : "final TypeAdapter<Date> dateTypeAdapter = gson.getAdapter(Date.class);",
      "right" : "final TypeAdapter<Date> dateTypeAdapter = gson.getAdapter(Date.class);",
      "info" : "VariableDeclarationStatement[16225-16295]:VariableDeclarationStatement[16225-16295]"
    }, {
      "left" : "return (TypeAdapter<T>) new TypeAdapter<Timestamp>() {\n        @Override public Timestamp read(JsonReader in) throws IOException {\n          Date date = dateTypeAdapter.read(in);\n          return date != null ? new Timestamp(date.getTime()) : null;\n        }\n\n        @Override public void write(JsonWriter out, Timestamp value) throws IOException {\n          dateTypeAdapter.write(out, value);\n        }\n      };",
      "right" : "return (TypeAdapter<T>) new TypeAdapter<Timestamp>() {\n        @Override public Timestamp read(JsonReader in) throws IOException {\n          Date date = dateTypeAdapter.read(in);\n          return date != null ? new Timestamp(date.getTime()) : null;\n        }\n\n        @Override public void write(JsonWriter out, Timestamp value) throws IOException {\n          dateTypeAdapter.write(out, value);\n        }\n      };",
      "info" : "ReturnStatement[16302-16715]:ReturnStatement[16302-16715]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[16365-16374]:MarkerAnnotation[16365-16374]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[16375-16381]:Modifier[16375-16381]"
    }, {
      "left" : "Timestamp",
      "right" : "Timestamp",
      "info" : "SimpleType[16382-16391]:SimpleType[16382-16391]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[16392-16396]:SimpleName[16392-16396]"
    }, {
      "left" : "JsonReader in",
      "right" : "JsonReader in",
      "info" : "SingleVariableDeclaration[16397-16410]:SingleVariableDeclaration[16397-16410]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[16419-16430]:SimpleType[16419-16430]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16431-16560]:Block[16431-16560]"
    }, {
      "left" : "Date date = dateTypeAdapter.read(in);",
      "right" : "Date date = dateTypeAdapter.read(in);",
      "info" : "VariableDeclarationStatement[16443-16480]:VariableDeclarationStatement[16443-16480]"
    }, {
      "left" : "return date != null ? new Timestamp(date.getTime()) : null;",
      "right" : "return date != null ? new Timestamp(date.getTime()) : null;",
      "info" : "ReturnStatement[16491-16550]:ReturnStatement[16491-16550]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[16570-16579]:MarkerAnnotation[16570-16579]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[16580-16586]:Modifier[16580-16586]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[16587-16591]:PrimitiveType[16587-16591]"
    }, {
      "left" : "write",
      "right" : "write",
      "info" : "SimpleName[16592-16597]:SimpleName[16592-16597]"
    }, {
      "left" : "JsonWriter out",
      "right" : "JsonWriter out",
      "info" : "SingleVariableDeclaration[16598-16612]:SingleVariableDeclaration[16598-16612]"
    }, {
      "left" : "Timestamp value",
      "right" : "Timestamp value",
      "info" : "SingleVariableDeclaration[16614-16629]:SingleVariableDeclaration[16614-16629]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[16638-16649]:SimpleType[16638-16649]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16650-16706]:Block[16650-16706]"
    }, {
      "left" : "dateTypeAdapter.write(out, value);",
      "right" : "dateTypeAdapter.write(out, value);",
      "info" : "ExpressionStatement[16662-16696]:ExpressionStatement[16662-16696]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[17136-17145]:MarkerAnnotation[17136-17145]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[17150-17156]:Modifier[17150-17156]"
    }, {
      "left" : "Calendar",
      "right" : "Calendar",
      "info" : "SimpleType[17157-17165]:SimpleType[17157-17165]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[17166-17170]:SimpleName[17166-17170]"
    }, {
      "left" : "JsonReader in",
      "right" : "JsonReader in",
      "info" : "SingleVariableDeclaration[17171-17184]:SingleVariableDeclaration[17171-17184]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[17193-17204]:SimpleType[17193-17204]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17205-18128]:Block[17205-18128]"
    }, {
      "left" : "if (in.peek() == JsonToken.NULL)",
      "right" : "if (in.peek() == JsonToken.NULL)",
      "info" : "IfStatement[17213-17300]:IfStatement[17213-17300]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17246-17300]:Block[17246-17300]"
    }, {
      "left" : "in.nextNull();",
      "right" : "in.nextNull();",
      "info" : "ExpressionStatement[17256-17270]:ExpressionStatement[17256-17270]"
    }, {
      "left" : "return  null;",
      "right" : "return  null;",
      "info" : "ReturnStatement[17279-17292]:ReturnStatement[17279-17292]"
    }, {
      "left" : "in.beginObject();",
      "right" : "in.beginObject();",
      "info" : "ExpressionStatement[17307-17324]:ExpressionStatement[17307-17324]"
    }, {
      "left" : "int year = 0;",
      "right" : "int year = 0;",
      "info" : "VariableDeclarationStatement[17331-17344]:VariableDeclarationStatement[17331-17344]"
    }, {
      "left" : "int month = 0;",
      "right" : "int month = 0;",
      "info" : "VariableDeclarationStatement[17351-17365]:VariableDeclarationStatement[17351-17365]"
    }, {
      "left" : "int dayOfMonth = 0;",
      "right" : "int dayOfMonth = 0;",
      "info" : "VariableDeclarationStatement[17372-17391]:VariableDeclarationStatement[17372-17391]"
    }, {
      "left" : "int hourOfDay = 0;",
      "right" : "int hourOfDay = 0;",
      "info" : "VariableDeclarationStatement[17398-17416]:VariableDeclarationStatement[17398-17416]"
    }, {
      "left" : "int minute = 0;",
      "right" : "int minute = 0;",
      "info" : "VariableDeclarationStatement[17423-17438]:VariableDeclarationStatement[17423-17438]"
    }, {
      "left" : "int second = 0;",
      "right" : "int second = 0;",
      "info" : "VariableDeclarationStatement[17445-17460]:VariableDeclarationStatement[17445-17460]"
    }, {
      "left" : "while (in.peek() != JsonToken.END_OBJECT)",
      "right" : "while (in.peek() != JsonToken.END_OBJECT)",
      "info" : "WhileStatement[17467-18012]:WhileStatement[17467-18012]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17509-18012]:Block[17509-18012]"
    }, {
      "left" : "String name = in.nextName();",
      "right" : "String name = in.nextName();",
      "info" : "VariableDeclarationStatement[17519-17547]:VariableDeclarationStatement[17519-17547]"
    }, {
      "left" : "int value = in.nextInt();",
      "right" : "int value = in.nextInt();",
      "info" : "VariableDeclarationStatement[17556-17581]:VariableDeclarationStatement[17556-17581]"
    }, {
      "left" : "if (YEAR.equals(name))",
      "right" : "if (YEAR.equals(name))",
      "info" : "IfStatement[17590-18004]:IfStatement[17590-18004]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17613-17648]:Block[17613-17648]"
    }, {
      "left" : "year = value;",
      "right" : "year = value;",
      "info" : "ExpressionStatement[17625-17638]:ExpressionStatement[17625-17638]"
    }, {
      "left" : "if (MONTH.equals(name))",
      "right" : "if (MONTH.equals(name))",
      "info" : "IfStatement[17654-18004]:IfStatement[17654-18004]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17678-17714]:Block[17678-17714]"
    }, {
      "left" : "month = value;",
      "right" : "month = value;",
      "info" : "ExpressionStatement[17690-17704]:ExpressionStatement[17690-17704]"
    }, {
      "left" : "if (DAY_OF_MONTH.equals(name))",
      "right" : "if (DAY_OF_MONTH.equals(name))",
      "info" : "IfStatement[17720-18004]:IfStatement[17720-18004]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17751-17792]:Block[17751-17792]"
    }, {
      "left" : "dayOfMonth = value;",
      "right" : "dayOfMonth = value;",
      "info" : "ExpressionStatement[17763-17782]:ExpressionStatement[17763-17782]"
    }, {
      "left" : "if (HOUR_OF_DAY.equals(name))",
      "right" : "if (HOUR_OF_DAY.equals(name))",
      "info" : "IfStatement[17798-18004]:IfStatement[17798-18004]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17828-17868]:Block[17828-17868]"
    }, {
      "left" : "hourOfDay = value;",
      "right" : "hourOfDay = value;",
      "info" : "ExpressionStatement[17840-17858]:ExpressionStatement[17840-17858]"
    }, {
      "left" : "if (MINUTE.equals(name))",
      "right" : "if (MINUTE.equals(name))",
      "info" : "IfStatement[17874-18004]:IfStatement[17874-18004]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17899-17936]:Block[17899-17936]"
    }, {
      "left" : "minute = value;",
      "right" : "minute = value;",
      "info" : "ExpressionStatement[17911-17926]:ExpressionStatement[17911-17926]"
    }, {
      "left" : "if (SECOND.equals(name))",
      "right" : "if (SECOND.equals(name))",
      "info" : "IfStatement[17942-18004]:IfStatement[17942-18004]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17967-18004]:Block[17967-18004]"
    }, {
      "left" : "second = value;",
      "right" : "second = value;",
      "info" : "ExpressionStatement[17979-17994]:ExpressionStatement[17979-17994]"
    }, {
      "left" : "in.endObject();",
      "right" : "in.endObject();",
      "info" : "ExpressionStatement[18019-18034]:ExpressionStatement[18019-18034]"
    }, {
      "left" : "return new GregorianCalendar(year, month, dayOfMonth, hourOfDay, minute, second);",
      "right" : "return new GregorianCalendar(year, month, dayOfMonth, hourOfDay, minute, second);",
      "info" : "ReturnStatement[18041-18122]:ReturnStatement[18041-18122]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[18134-18143]:MarkerAnnotation[18134-18143]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[18148-18154]:Modifier[18148-18154]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[18155-18159]:PrimitiveType[18155-18159]"
    }, {
      "left" : "write",
      "right" : "write",
      "info" : "SimpleName[18160-18165]:SimpleName[18160-18165]"
    }, {
      "left" : "JsonWriter out",
      "right" : "JsonWriter out",
      "info" : "SingleVariableDeclaration[18166-18180]:SingleVariableDeclaration[18166-18180]"
    }, {
      "left" : "Calendar value",
      "right" : "Calendar value",
      "info" : "SingleVariableDeclaration[18182-18196]:SingleVariableDeclaration[18182-18196]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[18205-18216]:SimpleType[18205-18216]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18217-18778]:Block[18217-18778]"
    }, {
      "left" : "if (value == null)",
      "right" : "if (value == null)",
      "info" : "IfStatement[18225-18294]:IfStatement[18225-18294]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18244-18294]:Block[18244-18294]"
    }, {
      "left" : "out.nullValue();",
      "right" : "out.nullValue();",
      "info" : "ExpressionStatement[18254-18270]:ExpressionStatement[18254-18270]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[18279-18286]:ReturnStatement[18279-18286]"
    }, {
      "left" : "out.beginObject();",
      "right" : "out.beginObject();",
      "info" : "ExpressionStatement[18301-18319]:ExpressionStatement[18301-18319]"
    }, {
      "left" : "out.name(YEAR);",
      "right" : "out.name(YEAR);",
      "info" : "ExpressionStatement[18326-18341]:ExpressionStatement[18326-18341]"
    }, {
      "left" : "out.value(value.get(Calendar.YEAR));",
      "right" : "out.value(value.get(Calendar.YEAR));",
      "info" : "ExpressionStatement[18348-18384]:ExpressionStatement[18348-18384]"
    }, {
      "left" : "out.name(MONTH);",
      "right" : "out.name(MONTH);",
      "info" : "ExpressionStatement[18391-18407]:ExpressionStatement[18391-18407]"
    }, {
      "left" : "out.value(value.get(Calendar.MONTH));",
      "right" : "out.value(value.get(Calendar.MONTH));",
      "info" : "ExpressionStatement[18414-18451]:ExpressionStatement[18414-18451]"
    }, {
      "left" : "out.name(DAY_OF_MONTH);",
      "right" : "out.name(DAY_OF_MONTH);",
      "info" : "ExpressionStatement[18458-18481]:ExpressionStatement[18458-18481]"
    }, {
      "left" : "out.value(value.get(Calendar.DAY_OF_MONTH));",
      "right" : "out.value(value.get(Calendar.DAY_OF_MONTH));",
      "info" : "ExpressionStatement[18488-18532]:ExpressionStatement[18488-18532]"
    }, {
      "left" : "out.name(HOUR_OF_DAY);",
      "right" : "out.name(HOUR_OF_DAY);",
      "info" : "ExpressionStatement[18539-18561]:ExpressionStatement[18539-18561]"
    }, {
      "left" : "out.value(value.get(Calendar.HOUR_OF_DAY));",
      "right" : "out.value(value.get(Calendar.HOUR_OF_DAY));",
      "info" : "ExpressionStatement[18568-18611]:ExpressionStatement[18568-18611]"
    }, {
      "left" : "out.name(MINUTE);",
      "right" : "out.name(MINUTE);",
      "info" : "ExpressionStatement[18618-18635]:ExpressionStatement[18618-18635]"
    }, {
      "left" : "out.value(value.get(Calendar.MINUTE));",
      "right" : "out.value(value.get(Calendar.MINUTE));",
      "info" : "ExpressionStatement[18642-18680]:ExpressionStatement[18642-18680]"
    }, {
      "left" : "out.name(SECOND);",
      "right" : "out.name(SECOND);",
      "info" : "ExpressionStatement[18687-18704]:ExpressionStatement[18687-18704]"
    }, {
      "left" : "out.value(value.get(Calendar.SECOND));",
      "right" : "out.value(value.get(Calendar.SECOND));",
      "info" : "ExpressionStatement[18711-18749]:ExpressionStatement[18711-18749]"
    }, {
      "left" : "out.endObject();",
      "right" : "out.endObject();",
      "info" : "ExpressionStatement[18756-18772]:ExpressionStatement[18756-18772]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[19012-19021]:MarkerAnnotation[19012-19021]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[19026-19032]:Modifier[19026-19032]"
    }, {
      "left" : "Locale",
      "right" : "Locale",
      "info" : "SimpleType[19033-19039]:SimpleType[19033-19039]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[19040-19044]:SimpleName[19040-19044]"
    }, {
      "left" : "JsonReader in",
      "right" : "JsonReader in",
      "info" : "SingleVariableDeclaration[19045-19058]:SingleVariableDeclaration[19045-19058]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[19067-19078]:SimpleType[19067-19078]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19079-19890]:Block[19079-19890]"
    }, {
      "left" : "if (in.peek() == JsonToken.NULL)",
      "right" : "if (in.peek() == JsonToken.NULL)",
      "info" : "IfStatement[19087-19173]:IfStatement[19087-19173]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19120-19173]:Block[19120-19173]"
    }, {
      "left" : "in.nextNull();",
      "right" : "in.nextNull();",
      "info" : "ExpressionStatement[19130-19144]:ExpressionStatement[19130-19144]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[19153-19165]:ReturnStatement[19153-19165]"
    }, {
      "left" : "String locale = in.nextString();",
      "right" : "String locale = in.nextString();",
      "info" : "VariableDeclarationStatement[19180-19212]:VariableDeclarationStatement[19180-19212]"
    }, {
      "left" : "StringTokenizer tokenizer = new StringTokenizer(locale, \"_\");",
      "right" : "StringTokenizer tokenizer = new StringTokenizer(locale, \"_\");",
      "info" : "VariableDeclarationStatement[19219-19280]:VariableDeclarationStatement[19219-19280]"
    }, {
      "left" : "String language = null;",
      "right" : "String language = null;",
      "info" : "VariableDeclarationStatement[19287-19310]:VariableDeclarationStatement[19287-19310]"
    }, {
      "left" : "String country = null;",
      "right" : "String country = null;",
      "info" : "VariableDeclarationStatement[19317-19339]:VariableDeclarationStatement[19317-19339]"
    }, {
      "left" : "String variant = null;",
      "right" : "String variant = null;",
      "info" : "VariableDeclarationStatement[19346-19368]:VariableDeclarationStatement[19346-19368]"
    }, {
      "left" : "if (tokenizer.hasMoreElements())",
      "right" : "if (tokenizer.hasMoreElements())",
      "info" : "IfStatement[19375-19459]:IfStatement[19375-19459]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19408-19459]:Block[19408-19459]"
    }, {
      "left" : "language = tokenizer.nextToken();",
      "right" : "language = tokenizer.nextToken();",
      "info" : "ExpressionStatement[19418-19451]:ExpressionStatement[19418-19451]"
    }, {
      "left" : "if (tokenizer.hasMoreElements())",
      "right" : "if (tokenizer.hasMoreElements())",
      "info" : "IfStatement[19466-19549]:IfStatement[19466-19549]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19499-19549]:Block[19499-19549]"
    }, {
      "left" : "country = tokenizer.nextToken();",
      "right" : "country = tokenizer.nextToken();",
      "info" : "ExpressionStatement[19509-19541]:ExpressionStatement[19509-19541]"
    }, {
      "left" : "if (tokenizer.hasMoreElements())",
      "right" : "if (tokenizer.hasMoreElements())",
      "info" : "IfStatement[19556-19639]:IfStatement[19556-19639]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19589-19639]:Block[19589-19639]"
    }, {
      "left" : "variant = tokenizer.nextToken();",
      "right" : "variant = tokenizer.nextToken();",
      "info" : "ExpressionStatement[19599-19631]:ExpressionStatement[19599-19631]"
    }, {
      "left" : "if (country == null && variant == null)",
      "right" : "if (country == null && variant == null)",
      "info" : "IfStatement[19646-19884]:IfStatement[19646-19884]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19686-19732]:Block[19686-19732]"
    }, {
      "left" : "return new Locale(language);",
      "right" : "return new Locale(language);",
      "info" : "ReturnStatement[19696-19724]:ReturnStatement[19696-19724]"
    }, {
      "left" : "if (variant == null)",
      "right" : "if (variant == null)",
      "info" : "IfStatement[19738-19884]:IfStatement[19738-19884]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19759-19814]:Block[19759-19814]"
    }, {
      "left" : "return new Locale(language, country);",
      "right" : "return new Locale(language, country);",
      "info" : "ReturnStatement[19769-19806]:ReturnStatement[19769-19806]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19820-19884]:Block[19820-19884]"
    }, {
      "left" : "return new Locale(language, country, variant);",
      "right" : "return new Locale(language, country, variant);",
      "info" : "ReturnStatement[19830-19876]:ReturnStatement[19830-19876]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[19895-19904]:MarkerAnnotation[19895-19904]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[19909-19915]:Modifier[19909-19915]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[19916-19920]:PrimitiveType[19916-19920]"
    }, {
      "left" : "write",
      "right" : "write",
      "info" : "SimpleName[19921-19926]:SimpleName[19921-19926]"
    }, {
      "left" : "JsonWriter out",
      "right" : "JsonWriter out",
      "info" : "SingleVariableDeclaration[19927-19941]:SingleVariableDeclaration[19927-19941]"
    }, {
      "left" : "Locale value",
      "right" : "Locale value",
      "info" : "SingleVariableDeclaration[19943-19955]:SingleVariableDeclaration[19943-19955]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[19964-19975]:SimpleType[19964-19975]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19976-20041]:Block[19976-20041]"
    }, {
      "left" : "out.value(value == null ? null : value.toString());",
      "right" : "out.value(value == null ? null : value.toString());",
      "info" : "ExpressionStatement[19984-20035]:ExpressionStatement[19984-20035]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[20240-20249]:MarkerAnnotation[20240-20249]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[20250-20256]:Modifier[20250-20256]"
    }, {
      "left" : "JsonElement",
      "right" : "JsonElement",
      "info" : "SimpleType[20257-20268]:SimpleType[20257-20268]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[20269-20273]:SimpleName[20269-20273]"
    }, {
      "left" : "JsonReader in",
      "right" : "JsonReader in",
      "info" : "SingleVariableDeclaration[20274-20287]:SingleVariableDeclaration[20274-20287]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[20296-20307]:SimpleType[20296-20307]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20308-21281]:Block[20308-21281]"
    }, {
      "left" : "switch (in.peek()) {\n      case STRING:\n        return new JsonPrimitive(in.nextString());\n      case NUMBER:\n        String number = in.nextString();\n        return new JsonPrimitive(new LazilyParsedNumber(number));\n      case BOOLEAN:\n        return new JsonPrimitive(in.nextBoolean());\n      case NULL:\n        in.nextNull();\n        return JsonNull.INSTANCE;\n      case BEGIN_ARRAY:\n        JsonArray array = new JsonArray();\n        in.beginArray();\n        while (in.hasNext()) {\n          array.add(read(in));\n        }\n        in.endArray();\n        return array;\n      case BEGIN_OBJECT:\n        JsonObject object = new JsonObject();\n        in.beginObject();\n        while (in.hasNext()) {\n          object.add(in.nextName(), read(in));\n        }\n        in.endObject();\n        return object;\n      case END_DOCUMENT:\n      case NAME:\n      case END_OBJECT:\n      case END_ARRAY:\n      default:\n        throw new IllegalArgumentException();\n      }",
      "right" : "switch (in.peek()) {\n      case STRING:\n        return new JsonPrimitive(in.nextString());\n      case NUMBER:\n        String number = in.nextString();\n        return new JsonPrimitive(new LazilyParsedNumber(number));\n      case BOOLEAN:\n        return new JsonPrimitive(in.nextBoolean());\n      case NULL:\n        in.nextNull();\n        return JsonNull.INSTANCE;\n      case BEGIN_ARRAY:\n        JsonArray array = new JsonArray();\n        in.beginArray();\n        while (in.hasNext()) {\n          array.add(read(in));\n        }\n        in.endArray();\n        return array;\n      case BEGIN_OBJECT:\n        JsonObject object = new JsonObject();\n        in.beginObject();\n        while (in.hasNext()) {\n          object.add(in.nextName(), read(in));\n        }\n        in.endObject();\n        return object;\n      case END_DOCUMENT:\n      case NAME:\n      case END_OBJECT:\n      case END_ARRAY:\n      default:\n        throw new IllegalArgumentException();\n      }",
      "info" : "SwitchStatement[20316-21275]:SwitchStatement[20316-21275]"
    }, {
      "left" : "case STRING:",
      "right" : "case STRING:",
      "info" : "SwitchCase[20343-20355]:SwitchCase[20343-20355]"
    }, {
      "left" : "return new JsonPrimitive(in.nextString());",
      "right" : "return new JsonPrimitive(in.nextString());",
      "info" : "ReturnStatement[20364-20406]:ReturnStatement[20364-20406]"
    }, {
      "left" : "case NUMBER:",
      "right" : "case NUMBER:",
      "info" : "SwitchCase[20413-20425]:SwitchCase[20413-20425]"
    }, {
      "left" : "String number = in.nextString();",
      "right" : "String number = in.nextString();",
      "info" : "VariableDeclarationStatement[20434-20466]:VariableDeclarationStatement[20434-20466]"
    }, {
      "left" : "return new JsonPrimitive(new LazilyParsedNumber(number));",
      "right" : "return new JsonPrimitive(new LazilyParsedNumber(number));",
      "info" : "ReturnStatement[20475-20532]:ReturnStatement[20475-20532]"
    }, {
      "left" : "case BOOLEAN:",
      "right" : "case BOOLEAN:",
      "info" : "SwitchCase[20539-20552]:SwitchCase[20539-20552]"
    }, {
      "left" : "return new JsonPrimitive(in.nextBoolean());",
      "right" : "return new JsonPrimitive(in.nextBoolean());",
      "info" : "ReturnStatement[20561-20604]:ReturnStatement[20561-20604]"
    }, {
      "left" : "case NULL:",
      "right" : "case NULL:",
      "info" : "SwitchCase[20611-20621]:SwitchCase[20611-20621]"
    }, {
      "left" : "in.nextNull();",
      "right" : "in.nextNull();",
      "info" : "ExpressionStatement[20630-20644]:ExpressionStatement[20630-20644]"
    }, {
      "left" : "return JsonNull.INSTANCE;",
      "right" : "return JsonNull.INSTANCE;",
      "info" : "ReturnStatement[20653-20678]:ReturnStatement[20653-20678]"
    }, {
      "left" : "case BEGIN_ARRAY:",
      "right" : "case BEGIN_ARRAY:",
      "info" : "SwitchCase[20685-20702]:SwitchCase[20685-20702]"
    }, {
      "left" : "JsonArray array = new JsonArray();",
      "right" : "JsonArray array = new JsonArray();",
      "info" : "VariableDeclarationStatement[20711-20745]:VariableDeclarationStatement[20711-20745]"
    }, {
      "left" : "in.beginArray();",
      "right" : "in.beginArray();",
      "info" : "ExpressionStatement[20754-20770]:ExpressionStatement[20754-20770]"
    }, {
      "left" : "while (in.hasNext())",
      "right" : "while (in.hasNext())",
      "info" : "WhileStatement[20779-20842]:WhileStatement[20779-20842]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20800-20842]:Block[20800-20842]"
    }, {
      "left" : "array.add(read(in));",
      "right" : "array.add(read(in));",
      "info" : "ExpressionStatement[20812-20832]:ExpressionStatement[20812-20832]"
    }, {
      "left" : "in.endArray();",
      "right" : "in.endArray();",
      "info" : "ExpressionStatement[20851-20865]:ExpressionStatement[20851-20865]"
    }, {
      "left" : "return array;",
      "right" : "return array;",
      "info" : "ReturnStatement[20874-20887]:ReturnStatement[20874-20887]"
    }, {
      "left" : "case BEGIN_OBJECT:",
      "right" : "case BEGIN_OBJECT:",
      "info" : "SwitchCase[20894-20912]:SwitchCase[20894-20912]"
    }, {
      "left" : "JsonObject object = new JsonObject();",
      "right" : "JsonObject object = new JsonObject();",
      "info" : "VariableDeclarationStatement[20921-20958]:VariableDeclarationStatement[20921-20958]"
    }, {
      "left" : "in.beginObject();",
      "right" : "in.beginObject();",
      "info" : "ExpressionStatement[20967-20984]:ExpressionStatement[20967-20984]"
    }, {
      "left" : "while (in.hasNext())",
      "right" : "while (in.hasNext())",
      "info" : "WhileStatement[20993-21072]:WhileStatement[20993-21072]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21014-21072]:Block[21014-21072]"
    }, {
      "left" : "object.add(in.nextName(), read(in));",
      "right" : "object.add(in.nextName(), read(in));",
      "info" : "ExpressionStatement[21026-21062]:ExpressionStatement[21026-21062]"
    }, {
      "left" : "in.endObject();",
      "right" : "in.endObject();",
      "info" : "ExpressionStatement[21081-21096]:ExpressionStatement[21081-21096]"
    }, {
      "left" : "return object;",
      "right" : "return object;",
      "info" : "ReturnStatement[21105-21119]:ReturnStatement[21105-21119]"
    }, {
      "left" : "case END_DOCUMENT:",
      "right" : "case END_DOCUMENT:",
      "info" : "SwitchCase[21126-21144]:SwitchCase[21126-21144]"
    }, {
      "left" : "case NAME:",
      "right" : "case NAME:",
      "info" : "SwitchCase[21151-21161]:SwitchCase[21151-21161]"
    }, {
      "left" : "case END_OBJECT:",
      "right" : "case END_OBJECT:",
      "info" : "SwitchCase[21168-21184]:SwitchCase[21168-21184]"
    }, {
      "left" : "case END_ARRAY:",
      "right" : "case END_ARRAY:",
      "info" : "SwitchCase[21191-21206]:SwitchCase[21191-21206]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[21213-21221]:SwitchCase[21213-21221]"
    }, {
      "left" : "throw new IllegalArgumentException();",
      "right" : "throw new IllegalArgumentException();",
      "info" : "ThrowStatement[21230-21267]:ThrowStatement[21230-21267]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[21287-21296]:MarkerAnnotation[21287-21296]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[21297-21303]:Modifier[21297-21303]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[21304-21308]:PrimitiveType[21304-21308]"
    }, {
      "left" : "write",
      "right" : "write",
      "info" : "SimpleName[21309-21314]:SimpleName[21309-21314]"
    }, {
      "left" : "JsonWriter out",
      "right" : "JsonWriter out",
      "info" : "SingleVariableDeclaration[21315-21329]:SingleVariableDeclaration[21315-21329]"
    }, {
      "left" : "JsonElement value",
      "right" : "JsonElement value",
      "info" : "SingleVariableDeclaration[21331-21348]:SingleVariableDeclaration[21331-21348]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[21357-21368]:SimpleType[21357-21368]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21369-22347]:Block[21369-22347]"
    }, {
      "left" : "if (value == null || value.isJsonNull())",
      "right" : "if (value == null || value.isJsonNull())",
      "info" : "IfStatement[21377-22341]:IfStatement[21377-22341]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21418-21452]:Block[21418-21452]"
    }, {
      "left" : "out.nullValue();",
      "right" : "out.nullValue();",
      "info" : "ExpressionStatement[21428-21444]:ExpressionStatement[21428-21444]"
    }, {
      "left" : "if (value.isJsonPrimitive())",
      "right" : "if (value.isJsonPrimitive())",
      "info" : "IfStatement[21458-22341]:IfStatement[21458-22341]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21487-21805]:Block[21487-21805]"
    }, {
      "left" : "JsonPrimitive primitive = value.getAsJsonPrimitive();",
      "right" : "JsonPrimitive primitive = value.getAsJsonPrimitive();",
      "info" : "VariableDeclarationStatement[21497-21550]:VariableDeclarationStatement[21497-21550]"
    }, {
      "left" : "if (primitive.isNumber())",
      "right" : "if (primitive.isNumber())",
      "info" : "IfStatement[21559-21796]:IfStatement[21559-21796]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21585-21642]:Block[21585-21642]"
    }, {
      "left" : "out.value(primitive.getAsNumber());",
      "right" : "out.value(primitive.getAsNumber());",
      "info" : "ExpressionStatement[21597-21632]:ExpressionStatement[21597-21632]"
    }, {
      "left" : "if (primitive.isBoolean())",
      "right" : "if (primitive.isBoolean())",
      "info" : "IfStatement[21648-21796]:IfStatement[21648-21796]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21675-21733]:Block[21675-21733]"
    }, {
      "left" : "out.value(primitive.getAsBoolean());",
      "right" : "out.value(primitive.getAsBoolean());",
      "info" : "ExpressionStatement[21687-21723]:ExpressionStatement[21687-21723]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21739-21796]:Block[21739-21796]"
    }, {
      "left" : "out.value(primitive.getAsString());",
      "right" : "out.value(primitive.getAsString());",
      "info" : "ExpressionStatement[21751-21786]:ExpressionStatement[21751-21786]"
    }, {
      "left" : "if (value.isJsonArray())",
      "right" : "if (value.isJsonArray())",
      "info" : "IfStatement[21811-22341]:IfStatement[21811-22341]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21836-21986]:Block[21836-21986]"
    }, {
      "left" : "out.beginArray();",
      "right" : "out.beginArray();",
      "info" : "ExpressionStatement[21846-21863]:ExpressionStatement[21846-21863]"
    }, {
      "left" : "for (JsonElement e : value.getAsJsonArray())",
      "right" : "for (JsonElement e : value.getAsJsonArray())",
      "info" : "EnhancedForStatement[21872-21953]:EnhancedForStatement[21872-21953]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21917-21953]:Block[21917-21953]"
    }, {
      "left" : "write(out, e);",
      "right" : "write(out, e);",
      "info" : "ExpressionStatement[21929-21943]:ExpressionStatement[21929-21943]"
    }, {
      "left" : "out.endArray();",
      "right" : "out.endArray();",
      "info" : "ExpressionStatement[21962-21977]:ExpressionStatement[21962-21977]"
    }, {
      "left" : "if (value.isJsonObject())",
      "right" : "if (value.isJsonObject())",
      "info" : "IfStatement[21992-22341]:IfStatement[21992-22341]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22018-22244]:Block[22018-22244]"
    }, {
      "left" : "out.beginObject();",
      "right" : "out.beginObject();",
      "info" : "ExpressionStatement[22028-22046]:ExpressionStatement[22028-22046]"
    }, {
      "left" : "for (Map.Entry<String, JsonElement> e : value.getAsJsonObject().entrySet())",
      "right" : "for (Map.Entry<String, JsonElement> e : value.getAsJsonObject().entrySet())",
      "info" : "EnhancedForStatement[22055-22210]:EnhancedForStatement[22055-22210]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22131-22210]:Block[22131-22210]"
    }, {
      "left" : "out.name(e.getKey());",
      "right" : "out.name(e.getKey());",
      "info" : "ExpressionStatement[22143-22164]:ExpressionStatement[22143-22164]"
    }, {
      "left" : "write(out, e.getValue());",
      "right" : "write(out, e.getValue());",
      "info" : "ExpressionStatement[22175-22200]:ExpressionStatement[22175-22200]"
    }, {
      "left" : "out.endObject();",
      "right" : "out.endObject();",
      "info" : "ExpressionStatement[22219-22235]:ExpressionStatement[22219-22235]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22250-22341]:Block[22250-22341]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Couldn't write \" + value.getClass());",
      "right" : "throw new IllegalArgumentException(\"Couldn't write \" + value.getClass());",
      "info" : "ThrowStatement[22260-22333]:ThrowStatement[22260-22333]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[22485-22492]:Modifier[22485-22492]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[22493-22499]:Modifier[22493-22499]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[22500-22505]:Modifier[22500-22505]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[22506-22511]:TYPE_DECLARATION_KIND[22506-22511]"
    }, {
      "left" : "EnumTypeAdapter",
      "right" : "EnumTypeAdapter",
      "info" : "SimpleName[22512-22527]:SimpleName[22512-22527]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[22729-22735]:Modifier[22729-22735]"
    }, {
      "left" : "EnumTypeAdapter",
      "right" : "EnumTypeAdapter",
      "info" : "SimpleName[22736-22751]:SimpleName[22736-22751]"
    }, {
      "left" : "Class<T> classOfT",
      "right" : "Class<T> classOfT",
      "info" : "SingleVariableDeclaration[22752-22769]:SingleVariableDeclaration[22752-22769]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22771-23392]:Block[22771-23392]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[22779-23386]:TryStatement[22779-23386]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22783-23309]:Block[22783-23309]"
    }, {
      "left" : "for (T constant : classOfT.getEnumConstants())",
      "right" : "for (T constant : classOfT.getEnumConstants())",
      "info" : "EnhancedForStatement[22793-23301]:EnhancedForStatement[22793-23301]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22840-23301]:Block[22840-23301]"
    }, {
      "left" : "String name = constant.name();",
      "right" : "String name = constant.name();",
      "info" : "VariableDeclarationStatement[22852-22882]:VariableDeclarationStatement[22852-22882]"
    }, {
      "left" : "SerializedName annotation = classOfT.getField(name).getAnnotation(SerializedName.class);",
      "right" : "SerializedName annotation = classOfT.getField(name).getAnnotation(SerializedName.class);",
      "info" : "VariableDeclarationStatement[22893-22981]:VariableDeclarationStatement[22893-22981]"
    }, {
      "left" : "if (annotation != null)",
      "right" : "if (annotation != null)",
      "info" : "IfStatement[22992-23199]:IfStatement[22992-23199]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23016-23199]:Block[23016-23199]"
    }, {
      "left" : "name = annotation.value();",
      "right" : "name = annotation.value();",
      "info" : "ExpressionStatement[23030-23056]:ExpressionStatement[23030-23056]"
    }, {
      "left" : "for (String alternate : annotation.alternate())",
      "right" : "for (String alternate : annotation.alternate())",
      "info" : "EnhancedForStatement[23069-23187]:EnhancedForStatement[23069-23187]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23117-23187]:Block[23117-23187]"
    }, {
      "left" : "nameToConstant.put(alternate, constant);",
      "right" : "nameToConstant.put(alternate, constant);",
      "info" : "ExpressionStatement[23133-23173]:ExpressionStatement[23133-23173]"
    }, {
      "left" : "nameToConstant.put(name, constant);",
      "right" : "nameToConstant.put(name, constant);",
      "info" : "ExpressionStatement[23210-23245]:ExpressionStatement[23210-23245]"
    }, {
      "left" : "constantToName.put(constant, name);",
      "right" : "constantToName.put(constant, name);",
      "info" : "ExpressionStatement[23256-23291]:ExpressionStatement[23256-23291]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23341-23386]:Block[23341-23386]"
    }, {
      "left" : "throw new AssertionError();",
      "right" : "throw new AssertionError();",
      "info" : "ThrowStatement[23351-23378]:ThrowStatement[23351-23378]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[23397-23403]:Modifier[23397-23403]"
    }, {
      "left" : "T",
      "right" : "T",
      "info" : "SimpleType[23404-23405]:SimpleType[23404-23405]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[23406-23410]:SimpleName[23406-23410]"
    }, {
      "left" : "JsonReader in",
      "right" : "JsonReader in",
      "info" : "SingleVariableDeclaration[23411-23424]:SingleVariableDeclaration[23411-23424]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[23433-23444]:SimpleType[23433-23444]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23445-23595]:Block[23445-23595]"
    }, {
      "left" : "if (in.peek() == JsonToken.NULL)",
      "right" : "if (in.peek() == JsonToken.NULL)",
      "info" : "IfStatement[23453-23539]:IfStatement[23453-23539]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23486-23539]:Block[23486-23539]"
    }, {
      "left" : "in.nextNull();",
      "right" : "in.nextNull();",
      "info" : "ExpressionStatement[23496-23510]:ExpressionStatement[23496-23510]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[23519-23531]:ReturnStatement[23519-23531]"
    }, {
      "left" : "return nameToConstant.get(in.nextString());",
      "right" : "return nameToConstant.get(in.nextString());",
      "info" : "ReturnStatement[23546-23589]:ReturnStatement[23546-23589]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[23601-23607]:Modifier[23601-23607]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[23608-23612]:PrimitiveType[23608-23612]"
    }, {
      "left" : "write",
      "right" : "write",
      "info" : "SimpleName[23613-23618]:SimpleName[23613-23618]"
    }, {
      "left" : "JsonWriter out",
      "right" : "JsonWriter out",
      "info" : "SingleVariableDeclaration[23619-23633]:SingleVariableDeclaration[23619-23633]"
    }, {
      "left" : "T value",
      "right" : "T value",
      "info" : "SingleVariableDeclaration[23635-23642]:SingleVariableDeclaration[23635-23642]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[23651-23662]:SimpleType[23651-23662]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23663-23737]:Block[23663-23737]"
    }, {
      "left" : "out.value(value == null ? null : constantToName.get(value));",
      "right" : "out.value(value == null ? null : constantToName.get(value));",
      "info" : "ExpressionStatement[23671-23731]:ExpressionStatement[23671-23731]"
    }, {
      "left" : "@SuppressWarnings({\"rawtypes\", \"unchecked\"})",
      "right" : "@SuppressWarnings({\"rawtypes\", \"unchecked\"})",
      "info" : "SingleMemberAnnotation[23830-23874]:SingleMemberAnnotation[23830-23874]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[23879-23885]:Modifier[23879-23885]"
    }, {
      "left" : "T",
      "right" : "T",
      "info" : "TypeParameter[23887-23888]:TypeParameter[23887-23888]"
    }, {
      "left" : "TypeAdapter<T>",
      "right" : "TypeAdapter<T>",
      "info" : "ParameterizedType[23890-23904]:ParameterizedType[23890-23904]"
    }, {
      "left" : "create",
      "right" : "create",
      "info" : "SimpleName[23905-23911]:SimpleName[23905-23911]"
    }, {
      "left" : "Gson gson",
      "right" : "Gson gson",
      "info" : "SingleVariableDeclaration[23912-23921]:SingleVariableDeclaration[23912-23921]"
    }, {
      "left" : "TypeToken<T> typeToken",
      "right" : "TypeToken<T> typeToken",
      "info" : "SingleVariableDeclaration[23923-23945]:SingleVariableDeclaration[23923-23945]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23947-24289]:Block[23947-24289]"
    }, {
      "left" : "Class<? super T> rawType = typeToken.getRawType();",
      "right" : "Class<? super T> rawType = typeToken.getRawType();",
      "info" : "VariableDeclarationStatement[23955-24005]:VariableDeclarationStatement[23955-24005]"
    }, {
      "left" : "if (!Enum.class.isAssignableFrom(rawType) || rawType == Enum.class)",
      "right" : "if (!Enum.class.isAssignableFrom(rawType) || rawType == Enum.class)",
      "info" : "IfStatement[24012-24110]:IfStatement[24012-24110]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24080-24110]:Block[24080-24110]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[24090-24102]:ReturnStatement[24090-24102]"
    }, {
      "left" : "if (!rawType.isEnum())",
      "right" : "if (!rawType.isEnum())",
      "info" : "IfStatement[24117-24223]:IfStatement[24117-24223]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24140-24223]:Block[24140-24223]"
    }, {
      "left" : "rawType = rawType.getSuperclass();",
      "right" : "rawType = rawType.getSuperclass();",
      "info" : "ExpressionStatement[24150-24184]:ExpressionStatement[24150-24184]"
    }, {
      "left" : "return (TypeAdapter<T>) new EnumTypeAdapter(rawType);",
      "right" : "return (TypeAdapter<T>) new EnumTypeAdapter(rawType);",
      "info" : "ReturnStatement[24230-24283]:ReturnStatement[24230-24283]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[24298-24304]:Modifier[24298-24304]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[24305-24311]:Modifier[24305-24311]"
    }, {
      "left" : "TT",
      "right" : "TT",
      "info" : "TypeParameter[24313-24315]:TypeParameter[24313-24315]"
    }, {
      "left" : "TypeAdapterFactory",
      "right" : "TypeAdapterFactory",
      "info" : "SimpleType[24317-24335]:SimpleType[24317-24335]"
    }, {
      "left" : "newFactory",
      "right" : "newFactory",
      "info" : "SimpleName[24336-24346]:SimpleName[24336-24346]"
    }, {
      "left" : "final TypeToken<TT> type",
      "right" : "final TypeToken<TT> type",
      "info" : "SingleVariableDeclaration[24354-24378]:SingleVariableDeclaration[24354-24378]"
    }, {
      "left" : "final TypeAdapter<TT> typeAdapter",
      "right" : "final TypeAdapter<TT> typeAdapter",
      "info" : "SingleVariableDeclaration[24380-24413]:SingleVariableDeclaration[24380-24413]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24415-24717]:Block[24415-24717]"
    }, {
      "left" : "return new TypeAdapterFactory() {\n      @SuppressWarnings(\"unchecked\") // we use a runtime check to make sure the 'T's equal\n      public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {\n        return typeToken.equals(type) ? (TypeAdapter<T>) typeAdapter : null;\n      }\n    };",
      "right" : "return new TypeAdapterFactory() {\n      @SuppressWarnings(\"unchecked\") // we use a runtime check to make sure the 'T's equal\n      public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {\n        return typeToken.equals(type) ? (TypeAdapter<T>) typeAdapter : null;\n      }\n    };",
      "info" : "ReturnStatement[24421-24713]:ReturnStatement[24421-24713]"
    }, {
      "left" : "@SuppressWarnings(\"unchecked\")",
      "right" : "@SuppressWarnings(\"unchecked\")",
      "info" : "SingleMemberAnnotation[24461-24491]:SingleMemberAnnotation[24461-24491]"
    }, {
      "left" : "// we use a runtime check to make sure the 'T's equal",
      "right" : "// we use a runtime check to make sure the 'T's equal",
      "info" : "LineComment[24492-24545]:LineComment[24492-24545]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[24552-24558]:Modifier[24552-24558]"
    }, {
      "left" : "T",
      "right" : "T",
      "info" : "TypeParameter[24560-24561]:TypeParameter[24560-24561]"
    }, {
      "left" : "TypeAdapter<T>",
      "right" : "TypeAdapter<T>",
      "info" : "ParameterizedType[24563-24577]:ParameterizedType[24563-24577]"
    }, {
      "left" : "create",
      "right" : "create",
      "info" : "SimpleName[24578-24584]:SimpleName[24578-24584]"
    }, {
      "left" : "Gson gson",
      "right" : "Gson gson",
      "info" : "SingleVariableDeclaration[24585-24594]:SingleVariableDeclaration[24585-24594]"
    }, {
      "left" : "TypeToken<T> typeToken",
      "right" : "TypeToken<T> typeToken",
      "info" : "SingleVariableDeclaration[24596-24618]:SingleVariableDeclaration[24596-24618]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24620-24706]:Block[24620-24706]"
    }, {
      "left" : "return typeToken.equals(type) ? (TypeAdapter<T>) typeAdapter : null;",
      "right" : "return typeToken.equals(type) ? (TypeAdapter<T>) typeAdapter : null;",
      "info" : "ReturnStatement[24630-24698]:ReturnStatement[24630-24698]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[24721-24727]:Modifier[24721-24727]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[24728-24734]:Modifier[24728-24734]"
    }, {
      "left" : "TT",
      "right" : "TT",
      "info" : "TypeParameter[24736-24738]:TypeParameter[24736-24738]"
    }, {
      "left" : "TypeAdapterFactory",
      "right" : "TypeAdapterFactory",
      "info" : "SimpleType[24740-24758]:SimpleType[24740-24758]"
    }, {
      "left" : "newFactory",
      "right" : "newFactory",
      "info" : "SimpleName[24759-24769]:SimpleName[24759-24769]"
    }, {
      "left" : "final Class<TT> type",
      "right" : "final Class<TT> type",
      "info" : "SingleVariableDeclaration[24777-24797]:SingleVariableDeclaration[24777-24797]"
    }, {
      "left" : "final TypeAdapter<TT> typeAdapter",
      "right" : "final TypeAdapter<TT> typeAdapter",
      "info" : "SingleVariableDeclaration[24799-24832]:SingleVariableDeclaration[24799-24832]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24834-25278]:Block[24834-25278]"
    }, {
      "left" : "return new TypeAdapterFactory() {\n      @SuppressWarnings(\"unchecked\") // we use a runtime check to make sure the 'T's equal\n      public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {\n        return typeToken.getRawType() == type ? (TypeAdapter<T>) typeAdapter : null;\n      }\n      @Override public String toString() {\n        return \"Factory[type=\" + type.getName() + \",adapter=\" + typeAdapter + \"]\";\n      }\n    };",
      "right" : "return new TypeAdapterFactory() {\n      @SuppressWarnings(\"unchecked\") // we use a runtime check to make sure the 'T's equal\n      public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {\n        return typeToken.getRawType() == type ? (TypeAdapter<T>) typeAdapter : null;\n      }\n      @Override public String toString() {\n        return \"Factory[type=\" + type.getName() + \",adapter=\" + typeAdapter + \"]\";\n      }\n    };",
      "info" : "ReturnStatement[24840-25274]:ReturnStatement[24840-25274]"
    }, {
      "left" : "@SuppressWarnings(\"unchecked\")",
      "right" : "@SuppressWarnings(\"unchecked\")",
      "info" : "SingleMemberAnnotation[24880-24910]:SingleMemberAnnotation[24880-24910]"
    }, {
      "left" : "// we use a runtime check to make sure the 'T's equal",
      "right" : "// we use a runtime check to make sure the 'T's equal",
      "info" : "LineComment[24911-24964]:LineComment[24911-24964]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[24971-24977]:Modifier[24971-24977]"
    }, {
      "left" : "T",
      "right" : "T",
      "info" : "TypeParameter[24979-24980]:TypeParameter[24979-24980]"
    }, {
      "left" : "TypeAdapter<T>",
      "right" : "TypeAdapter<T>",
      "info" : "ParameterizedType[24982-24996]:ParameterizedType[24982-24996]"
    }, {
      "left" : "create",
      "right" : "create",
      "info" : "SimpleName[24997-25003]:SimpleName[24997-25003]"
    }, {
      "left" : "Gson gson",
      "right" : "Gson gson",
      "info" : "SingleVariableDeclaration[25004-25013]:SingleVariableDeclaration[25004-25013]"
    }, {
      "left" : "TypeToken<T> typeToken",
      "right" : "TypeToken<T> typeToken",
      "info" : "SingleVariableDeclaration[25015-25037]:SingleVariableDeclaration[25015-25037]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25039-25133]:Block[25039-25133]"
    }, {
      "left" : "return typeToken.getRawType() == type ? (TypeAdapter<T>) typeAdapter : null;",
      "right" : "return typeToken.getRawType() == type ? (TypeAdapter<T>) typeAdapter : null;",
      "info" : "ReturnStatement[25049-25125]:ReturnStatement[25049-25125]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[25140-25149]:MarkerAnnotation[25140-25149]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[25150-25156]:Modifier[25150-25156]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[25157-25163]:SimpleType[25157-25163]"
    }, {
      "left" : "toString",
      "right" : "toString",
      "info" : "SimpleName[25164-25172]:SimpleName[25164-25172]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25175-25267]:Block[25175-25267]"
    }, {
      "left" : "return \"Factory[type=\" + type.getName() + \",adapter=\" + typeAdapter + \"]\";",
      "right" : "return \"Factory[type=\" + type.getName() + \",adapter=\" + typeAdapter + \"]\";",
      "info" : "ReturnStatement[25185-25259]:ReturnStatement[25185-25259]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[25282-25288]:Modifier[25282-25288]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[25289-25295]:Modifier[25289-25295]"
    }, {
      "left" : "TT",
      "right" : "TT",
      "info" : "TypeParameter[25297-25299]:TypeParameter[25297-25299]"
    }, {
      "left" : "TypeAdapterFactory",
      "right" : "TypeAdapterFactory",
      "info" : "SimpleType[25301-25319]:SimpleType[25301-25319]"
    }, {
      "left" : "newFactory",
      "right" : "newFactory",
      "info" : "SimpleName[25320-25330]:SimpleName[25320-25330]"
    }, {
      "left" : "final Class<TT> unboxed",
      "right" : "final Class<TT> unboxed",
      "info" : "SingleVariableDeclaration[25338-25361]:SingleVariableDeclaration[25338-25361]"
    }, {
      "left" : "final Class<TT> boxed",
      "right" : "final Class<TT> boxed",
      "info" : "SingleVariableDeclaration[25363-25384]:SingleVariableDeclaration[25363-25384]"
    }, {
      "left" : "final TypeAdapter<? super TT> typeAdapter",
      "right" : "final TypeAdapter<? super TT> typeAdapter",
      "info" : "SingleVariableDeclaration[25386-25427]:SingleVariableDeclaration[25386-25427]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25429-25981]:Block[25429-25981]"
    }, {
      "left" : "return new TypeAdapterFactory() {\n      @SuppressWarnings(\"unchecked\") // we use a runtime check to make sure the 'T's equal\n      public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {\n        Class<? super T> rawType = typeToken.getRawType();\n        return (rawType == unboxed || rawType == boxed) ? (TypeAdapter<T>) typeAdapter : null;\n      }\n      @Override public String toString() {\n        return \"Factory[type=\" + boxed.getName()\n            + \"+\" + unboxed.getName() + \",adapter=\" + typeAdapter + \"]\";\n      }\n    };",
      "right" : "return new TypeAdapterFactory() {\n      @SuppressWarnings(\"unchecked\") // we use a runtime check to make sure the 'T's equal\n      public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {\n        Class<? super T> rawType = typeToken.getRawType();\n        return (rawType == unboxed || rawType == boxed) ? (TypeAdapter<T>) typeAdapter : null;\n      }\n      @Override public String toString() {\n        return \"Factory[type=\" + boxed.getName()\n            + \"+\" + unboxed.getName() + \",adapter=\" + typeAdapter + \"]\";\n      }\n    };",
      "info" : "ReturnStatement[25435-25977]:ReturnStatement[25435-25977]"
    }, {
      "left" : "@SuppressWarnings(\"unchecked\")",
      "right" : "@SuppressWarnings(\"unchecked\")",
      "info" : "SingleMemberAnnotation[25475-25505]:SingleMemberAnnotation[25475-25505]"
    }, {
      "left" : "// we use a runtime check to make sure the 'T's equal",
      "right" : "// we use a runtime check to make sure the 'T's equal",
      "info" : "LineComment[25506-25559]:LineComment[25506-25559]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[25566-25572]:Modifier[25566-25572]"
    }, {
      "left" : "T",
      "right" : "T",
      "info" : "TypeParameter[25574-25575]:TypeParameter[25574-25575]"
    }, {
      "left" : "TypeAdapter<T>",
      "right" : "TypeAdapter<T>",
      "info" : "ParameterizedType[25577-25591]:ParameterizedType[25577-25591]"
    }, {
      "left" : "create",
      "right" : "create",
      "info" : "SimpleName[25592-25598]:SimpleName[25592-25598]"
    }, {
      "left" : "Gson gson",
      "right" : "Gson gson",
      "info" : "SingleVariableDeclaration[25599-25608]:SingleVariableDeclaration[25599-25608]"
    }, {
      "left" : "TypeToken<T> typeToken",
      "right" : "TypeToken<T> typeToken",
      "info" : "SingleVariableDeclaration[25610-25632]:SingleVariableDeclaration[25610-25632]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25634-25797]:Block[25634-25797]"
    }, {
      "left" : "Class<? super T> rawType = typeToken.getRawType();",
      "right" : "Class<? super T> rawType = typeToken.getRawType();",
      "info" : "VariableDeclarationStatement[25644-25694]:VariableDeclarationStatement[25644-25694]"
    }, {
      "left" : "return (rawType == unboxed || rawType == boxed) ? (TypeAdapter<T>) typeAdapter : null;",
      "right" : "return (rawType == unboxed || rawType == boxed) ? (TypeAdapter<T>) typeAdapter : null;",
      "info" : "ReturnStatement[25703-25789]:ReturnStatement[25703-25789]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[25804-25813]:MarkerAnnotation[25804-25813]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[25814-25820]:Modifier[25814-25820]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[25821-25827]:SimpleType[25821-25827]"
    }, {
      "left" : "toString",
      "right" : "toString",
      "info" : "SimpleName[25828-25836]:SimpleName[25828-25836]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25839-25970]:Block[25839-25970]"
    }, {
      "left" : "return \"Factory[type=\" + boxed.getName()\n            + \"+\" + unboxed.getName() + \",adapter=\" + typeAdapter + \"]\";",
      "right" : "return \"Factory[type=\" + boxed.getName()\n            + \"+\" + unboxed.getName() + \",adapter=\" + typeAdapter + \"]\";",
      "info" : "ReturnStatement[25849-25962]:ReturnStatement[25849-25962]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[25985-25991]:Modifier[25985-25991]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[25992-25998]:Modifier[25992-25998]"
    }, {
      "left" : "TT",
      "right" : "TT",
      "info" : "TypeParameter[26000-26002]:TypeParameter[26000-26002]"
    }, {
      "left" : "TypeAdapterFactory",
      "right" : "TypeAdapterFactory",
      "info" : "SimpleType[26004-26022]:SimpleType[26004-26022]"
    }, {
      "left" : "newFactoryForMultipleTypes",
      "right" : "newFactoryForMultipleTypes",
      "info" : "SimpleName[26023-26049]:SimpleName[26023-26049]"
    }, {
      "left" : "final Class<TT> base",
      "right" : "final Class<TT> base",
      "info" : "SingleVariableDeclaration[26050-26070]:SingleVariableDeclaration[26050-26070]"
    }, {
      "left" : "final Class<? extends TT> sub",
      "right" : "final Class<? extends TT> sub",
      "info" : "SingleVariableDeclaration[26078-26107]:SingleVariableDeclaration[26078-26107]"
    }, {
      "left" : "final TypeAdapter<? super TT> typeAdapter",
      "right" : "final TypeAdapter<? super TT> typeAdapter",
      "info" : "SingleVariableDeclaration[26109-26150]:SingleVariableDeclaration[26109-26150]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26152-26694]:Block[26152-26694]"
    }, {
      "left" : "return new TypeAdapterFactory() {\n      @SuppressWarnings(\"unchecked\") // we use a runtime check to make sure the 'T's equal\n      public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {\n        Class<? super T> rawType = typeToken.getRawType();\n        return (rawType == base || rawType == sub) ? (TypeAdapter<T>) typeAdapter : null;\n      }\n      @Override public String toString() {\n        return \"Factory[type=\" + base.getName()\n            + \"+\" + sub.getName() + \",adapter=\" + typeAdapter + \"]\";\n      }\n    };",
      "right" : "return new TypeAdapterFactory() {\n      @SuppressWarnings(\"unchecked\") // we use a runtime check to make sure the 'T's equal\n      public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {\n        Class<? super T> rawType = typeToken.getRawType();\n        return (rawType == base || rawType == sub) ? (TypeAdapter<T>) typeAdapter : null;\n      }\n      @Override public String toString() {\n        return \"Factory[type=\" + base.getName()\n            + \"+\" + sub.getName() + \",adapter=\" + typeAdapter + \"]\";\n      }\n    };",
      "info" : "ReturnStatement[26158-26690]:ReturnStatement[26158-26690]"
    }, {
      "left" : "@SuppressWarnings(\"unchecked\")",
      "right" : "@SuppressWarnings(\"unchecked\")",
      "info" : "SingleMemberAnnotation[26198-26228]:SingleMemberAnnotation[26198-26228]"
    }, {
      "left" : "// we use a runtime check to make sure the 'T's equal",
      "right" : "// we use a runtime check to make sure the 'T's equal",
      "info" : "LineComment[26229-26282]:LineComment[26229-26282]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[26289-26295]:Modifier[26289-26295]"
    }, {
      "left" : "T",
      "right" : "T",
      "info" : "TypeParameter[26297-26298]:TypeParameter[26297-26298]"
    }, {
      "left" : "TypeAdapter<T>",
      "right" : "TypeAdapter<T>",
      "info" : "ParameterizedType[26300-26314]:ParameterizedType[26300-26314]"
    }, {
      "left" : "create",
      "right" : "create",
      "info" : "SimpleName[26315-26321]:SimpleName[26315-26321]"
    }, {
      "left" : "Gson gson",
      "right" : "Gson gson",
      "info" : "SingleVariableDeclaration[26322-26331]:SingleVariableDeclaration[26322-26331]"
    }, {
      "left" : "TypeToken<T> typeToken",
      "right" : "TypeToken<T> typeToken",
      "info" : "SingleVariableDeclaration[26333-26355]:SingleVariableDeclaration[26333-26355]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26357-26515]:Block[26357-26515]"
    }, {
      "left" : "Class<? super T> rawType = typeToken.getRawType();",
      "right" : "Class<? super T> rawType = typeToken.getRawType();",
      "info" : "VariableDeclarationStatement[26367-26417]:VariableDeclarationStatement[26367-26417]"
    }, {
      "left" : "return (rawType == base || rawType == sub) ? (TypeAdapter<T>) typeAdapter : null;",
      "right" : "return (rawType == base || rawType == sub) ? (TypeAdapter<T>) typeAdapter : null;",
      "info" : "ReturnStatement[26426-26507]:ReturnStatement[26426-26507]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[26522-26531]:MarkerAnnotation[26522-26531]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[26532-26538]:Modifier[26532-26538]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[26539-26545]:SimpleType[26539-26545]"
    }, {
      "left" : "toString",
      "right" : "toString",
      "info" : "SimpleName[26546-26554]:SimpleName[26546-26554]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26557-26683]:Block[26557-26683]"
    }, {
      "left" : "return \"Factory[type=\" + base.getName()\n            + \"+\" + sub.getName() + \",adapter=\" + typeAdapter + \"]\";",
      "right" : "return \"Factory[type=\" + base.getName()\n            + \"+\" + sub.getName() + \",adapter=\" + typeAdapter + \"]\";",
      "info" : "ReturnStatement[26567-26675]:ReturnStatement[26567-26675]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[26867-26873]:Modifier[26867-26873]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[26874-26880]:Modifier[26874-26880]"
    }, {
      "left" : "T1",
      "right" : "T1",
      "info" : "TypeParameter[26882-26884]:TypeParameter[26882-26884]"
    }, {
      "left" : "TypeAdapterFactory",
      "right" : "TypeAdapterFactory",
      "info" : "SimpleType[26886-26904]:SimpleType[26886-26904]"
    }, {
      "left" : "newTypeHierarchyFactory",
      "right" : "newTypeHierarchyFactory",
      "info" : "SimpleName[26905-26928]:SimpleName[26905-26928]"
    }, {
      "left" : "final Class<T1> clazz",
      "right" : "final Class<T1> clazz",
      "info" : "SingleVariableDeclaration[26936-26957]:SingleVariableDeclaration[26936-26957]"
    }, {
      "left" : "final TypeAdapter<T1> typeAdapter",
      "right" : "final TypeAdapter<T1> typeAdapter",
      "info" : "SingleVariableDeclaration[26959-26992]:SingleVariableDeclaration[26959-26992]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26994-27518]:Block[26994-28069]"
    }, {
      "left" : "return new TypeAdapterFactory() {\n      @SuppressWarnings(\"unchecked\")\n      public <T2> TypeAdapter<T2> create(Gson gson, TypeToken<T2> typeToken) {\n        final Class<? super T2> requestedType = typeToken.getRawType();\n        if (!clazz.isAssignableFrom(requestedType)) {\n          return null;\n        }\n        return (TypeAdapter<T2>) typeAdapter;\n\n      }\n      @Override public String toString() {\n        return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\n      }\n    };",
      "right" : "return new TypeAdapterFactory() {\n      @SuppressWarnings(\"unchecked\")\n      public <T2> TypeAdapter<T2> create(Gson gson, TypeToken<T2> typeToken) {\n        final Class<? super T2> requestedType = typeToken.getRawType();\n        if (!clazz.isAssignableFrom(requestedType)) {\n          return null;\n        }\n        return (TypeAdapter<T2>) new TypeAdapter<T1>() {\n          @Override public void write(JsonWriter out, T1 value) throws IOException {\n            typeAdapter.write(out, value);\n          }\n\n          @Override public T1 read(JsonReader in) throws IOException {\n            T1 result = typeAdapter.read(in);\n            if (result != null && !requestedType.isInstance(result)) {\n              throw new JsonSyntaxException(\"Expected a \" + requestedType.getName()\n                  + \" but was \" + result.getClass().getName());\n            }\n            return result;\n          }\n        };\n      }\n      @Override public String toString() {\n        return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\n      }\n    };",
      "info" : "ReturnStatement[27000-27514]:ReturnStatement[27000-28065]"
    }, {
      "left" : "@SuppressWarnings(\"unchecked\")",
      "right" : "@SuppressWarnings(\"unchecked\")",
      "info" : "SingleMemberAnnotation[27040-27070]:SingleMemberAnnotation[27040-27070]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[27077-27083]:Modifier[27077-27083]"
    }, {
      "left" : "T2",
      "right" : "T2",
      "info" : "TypeParameter[27085-27087]:TypeParameter[27085-27087]"
    }, {
      "left" : "TypeAdapter<T2>",
      "right" : "TypeAdapter<T2>",
      "info" : "ParameterizedType[27089-27104]:ParameterizedType[27089-27104]"
    }, {
      "left" : "create",
      "right" : "create",
      "info" : "SimpleName[27105-27111]:SimpleName[27105-27111]"
    }, {
      "left" : "Gson gson",
      "right" : "Gson gson",
      "info" : "SingleVariableDeclaration[27112-27121]:SingleVariableDeclaration[27112-27121]"
    }, {
      "left" : "TypeToken<T2> typeToken",
      "right" : "TypeToken<T2> typeToken",
      "info" : "SingleVariableDeclaration[27123-27146]:SingleVariableDeclaration[27123-27146]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27148-27363]:Block[27148-27914]"
    }, {
      "left" : "final Class<? super T2> requestedType = typeToken.getRawType();",
      "right" : "final Class<? super T2> requestedType = typeToken.getRawType();",
      "info" : "VariableDeclarationStatement[27158-27221]:VariableDeclarationStatement[27158-27221]"
    }, {
      "left" : "if (!clazz.isAssignableFrom(requestedType))",
      "right" : "if (!clazz.isAssignableFrom(requestedType))",
      "info" : "IfStatement[27230-27308]:IfStatement[27230-27308]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27274-27308]:Block[27274-27308]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[27286-27298]:ReturnStatement[27286-27298]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[27370-27379]:MarkerAnnotation[27921-27930]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[27380-27386]:Modifier[27931-27937]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[27387-27393]:SimpleType[27938-27944]"
    }, {
      "left" : "toString",
      "right" : "toString",
      "info" : "SimpleName[27394-27402]:SimpleName[27945-27953]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27405-27507]:Block[27956-28058]"
    }, {
      "left" : "return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";",
      "right" : "return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";",
      "info" : "ReturnStatement[27415-27499]:ReturnStatement[27966-28050]"
    } ]
  },
  "interFileMappings" : { }
}