{
  "matchedElements" : [
 {
    "left" : "class : FastDatePrinter",
    "right" : "class : FastDatePrinter",
    "info" : "TypeDeclaration[1354-38454]:TypeDeclaration[1354-38440]"
  }, {
    "left" : "serialVersionUID",
    "right" : "serialVersionUID",
    "info" : "FieldDeclaration[3460-3607]:FieldDeclaration[3460-3607]"
  }, {
    "left" : "FULL",
    "right" : "FULL",
    "info" : "FieldDeclaration[3613-3725]:FieldDeclaration[3613-3725]"
  }, {
    "left" : "LONG",
    "right" : "LONG",
    "info" : "FieldDeclaration[3730-3842]:FieldDeclaration[3730-3842]"
  }, {
    "left" : "MEDIUM",
    "right" : "MEDIUM",
    "info" : "FieldDeclaration[3847-3965]:FieldDeclaration[3847-3965]"
  }, {
    "left" : "SHORT",
    "right" : "SHORT",
    "info" : "FieldDeclaration[3970-4085]:FieldDeclaration[3970-4085]"
  }, {
    "left" : "mPattern",
    "right" : "mPattern",
    "info" : "FieldDeclaration[4091-4157]:FieldDeclaration[4091-4157]"
  }, {
    "left" : "mTimeZone",
    "right" : "mTimeZone",
    "info" : "FieldDeclaration[4162-4233]:FieldDeclaration[4162-4233]"
  }, {
    "left" : "mLocale",
    "right" : "mLocale",
    "info" : "FieldDeclaration[4238-4302]:FieldDeclaration[4238-4302]"
  }, {
    "left" : "mRules",
    "right" : "mRules",
    "info" : "FieldDeclaration[4307-4380]:FieldDeclaration[4307-4380]"
  }, {
    "left" : "mMaxLengthEstimate",
    "right" : "mMaxLengthEstimate",
    "info" : "FieldDeclaration[4385-4479]:FieldDeclaration[4385-4479]"
  }, {
    "left" : "protected FastDatePrinter(pattern , timeZone , locale )",
    "right" : "protected FastDatePrinter(pattern , timeZone , locale )",
    "info" : "MethodDeclaration[4582-5086]:MethodDeclaration[4582-5086]"
  }, {
    "left" : "private init() : void",
    "right" : "private init() : void",
    "info" : "MethodDeclaration[5092-5462]:MethodDeclaration[5092-5462]"
  }, {
    "left" : "protected parsePattern() : ",
    "right" : "protected parsePattern() : ",
    "info" : "MethodDeclaration[5571-10752]:MethodDeclaration[5571-10752]"
  }, {
    "left" : "protected parseToken(pattern , indexRef ) : ",
    "right" : "protected parseToken(pattern , indexRef ) : ",
    "info" : "MethodDeclaration[10758-12473]:MethodDeclaration[10758-12473]"
  }, {
    "left" : "protected selectNumberRule(field int, padding int) : ",
    "right" : "protected selectNumberRule(field int, padding int) : ",
    "info" : "MethodDeclaration[12479-13026]:MethodDeclaration[12479-13026]"
  }, {
    "left" : "public format(obj , toAppendTo , pos ...) : ",
    "right" : "public format(obj , toAppendTo , pos ...) : ",
    "info" : "MethodDeclaration[13132-13986]:MethodDeclaration[13132-13986]"
  }, {
    "left" : "public format(millis long...) : ",
    "right" : "public format(millis long...) : ",
    "info" : "MethodDeclaration[14088-14184]:MethodDeclaration[14088-14184]"
  }, {
    "left" : "public format(date ) : ",
    "right" : "public format(date ) : ",
    "info" : "MethodDeclaration[14296-14549]:MethodDeclaration[14296-14549]"
  }, {
    "left" : "public format(calendar ) : ",
    "right" : "public format(calendar ) : ",
    "info" : "MethodDeclaration[14665-14808]:MethodDeclaration[14665-14808]"
  }, {
    "left" : "public format(millis long, buf ) : ",
    "right" : "public format(millis long, buf ) : ",
    "info" : "MethodDeclaration[14934-15059]:MethodDeclaration[14934-15059]"
  }, {
    "left" : "public format(date , buf ) : ",
    "right" : "public format(date , buf ) : ",
    "info" : "MethodDeclaration[15195-15428]:MethodDeclaration[15195-15428]"
  }, {
    "left" : "public format(calendar , buf ) : ",
    "right" : "public format(calendar , buf ) : ",
    "info" : "MethodDeclaration[15568-15695]:MethodDeclaration[15568-15695]"
  }, {
    "left" : "protected applyRules(calendar , buf ) : ",
    "right" : "protected applyRules(calendar , buf ) : ",
    "info" : "MethodDeclaration[15701-16138]:MethodDeclaration[15701-16138]"
  }, {
    "left" : "public getPattern() : ",
    "right" : "public getPattern() : ",
    "info" : "MethodDeclaration[16335-16408]:MethodDeclaration[16335-16408]"
  }, {
    "left" : "public getTimeZone() : ",
    "right" : "public getTimeZone() : ",
    "info" : "MethodDeclaration[16511-16588]:MethodDeclaration[16511-16588]"
  }, {
    "left" : "public getLocale() : ",
    "right" : "public getLocale() : ",
    "info" : "MethodDeclaration[16689-16760]:MethodDeclaration[16689-16760]"
  }, {
    "left" : "public getMaxLengthEstimate() : int",
    "right" : "public getMaxLengthEstimate() : int",
    "info" : "MethodDeclaration[16766-17123]:MethodDeclaration[16766-17123]"
  }, {
    "left" : "public equals(obj ) : boolean",
    "right" : "public equals(obj ) : boolean",
    "info" : "MethodDeclaration[17221-17718]:MethodDeclaration[17221-17718]"
  }, {
    "left" : "public hashCode() : int",
    "right" : "public hashCode() : int",
    "info" : "MethodDeclaration[17724-17988]:MethodDeclaration[17724-17988]"
  }, {
    "left" : "public toString() : ",
    "right" : "public toString() : ",
    "info" : "MethodDeclaration[17994-18256]:MethodDeclaration[17994-18256]"
  }, {
    "left" : "private readObject(in ) : void",
    "right" : "private readObject(in ) : void",
    "info" : "MethodDeclaration[18359-18837]:MethodDeclaration[18359-18837]"
  }, {
    "left" : "interface : Rule",
    "right" : "interface : Rule",
    "info" : "TypeDeclaration[18934-19486]:TypeDeclaration[18934-19486]"
  }, {
    "left" : "public estimateLength() : int",
    "right" : "public estimateLength() : int",
    "info" : "MethodDeclaration[19026-19177]:MethodDeclaration[19026-19177]"
  }, {
    "left" : "public appendTo(buffer , calendar ) : void",
    "right" : "public appendTo(buffer , calendar ) : void",
    "info" : "MethodDeclaration[19187-19480]:MethodDeclaration[19187-19480]"
  }, {
    "left" : "interface : NumberRule",
    "right" : "interface : NumberRule",
    "info" : "TypeDeclaration[19492-19884]:TypeDeclaration[19492-19884]"
  }, {
    "left" : "public appendTo(buffer , value int) : void",
    "right" : "public appendTo(buffer , value int) : void",
    "info" : "MethodDeclaration[19611-19878]:MethodDeclaration[19611-19878]"
  }, {
    "left" : "class : CharacterLiteral",
    "right" : "class : CharacterLiteral",
    "info" : "TypeDeclaration[19890-20653]:TypeDeclaration[19890-20653]"
  }, {
    "left" : "mValue",
    "right" : "mValue",
    "info" : "FieldDeclaration[20035-20061]:FieldDeclaration[20035-20061]"
  }, {
    "left" : "package CharacterLiteral(value char)",
    "right" : "package CharacterLiteral(value char)",
    "info" : "MethodDeclaration[20071-20325]:MethodDeclaration[20071-20325]"
  }, {
    "left" : "public estimateLength() : int",
    "right" : "public estimateLength() : int",
    "info" : "MethodDeclaration[20335-20463]:MethodDeclaration[20335-20463]"
  }, {
    "left" : "public appendTo(buffer , calendar ) : void",
    "right" : "public appendTo(buffer , calendar ) : void",
    "info" : "MethodDeclaration[20473-20647]:MethodDeclaration[20473-20647]"
  }, {
    "left" : "class : StringLiteral",
    "right" : "class : StringLiteral",
    "info" : "TypeDeclaration[20659-21418]:TypeDeclaration[20659-21418]"
  }, {
    "left" : "mValue",
    "right" : "mValue",
    "info" : "FieldDeclaration[20791-20819]:FieldDeclaration[20791-20819]"
  }, {
    "left" : "package StringLiteral(value )",
    "right" : "package StringLiteral(value )",
    "info" : "MethodDeclaration[20829-21076]:MethodDeclaration[20829-21076]"
  }, {
    "left" : "public estimateLength() : int",
    "right" : "public estimateLength() : int",
    "info" : "MethodDeclaration[21086-21228]:MethodDeclaration[21086-21228]"
  }, {
    "left" : "public appendTo(buffer , calendar ) : void",
    "right" : "public appendTo(buffer , calendar ) : void",
    "info" : "MethodDeclaration[21238-21412]:MethodDeclaration[21238-21412]"
  }, {
    "left" : "class : TextField",
    "right" : "class : TextField",
    "info" : "TypeDeclaration[21424-22527]:TypeDeclaration[21424-22527]"
  }, {
    "left" : "mField",
    "right" : "mField",
    "info" : "FieldDeclaration[21557-21582]:FieldDeclaration[21557-21582]"
  }, {
    "left" : "mValues",
    "right" : "mValues",
    "info" : "FieldDeclaration[21591-21622]:FieldDeclaration[21591-21622]"
  }, {
    "left" : "package TextField(field int, values ...)",
    "right" : "package TextField(field int, values ...)",
    "info" : "MethodDeclaration[21632-21953]:MethodDeclaration[21632-21953]"
  }, {
    "left" : "public estimateLength() : int",
    "right" : "public estimateLength() : int",
    "info" : "MethodDeclaration[21963-22314]:MethodDeclaration[21963-22314]"
  }, {
    "left" : "public appendTo(buffer , calendar ) : void",
    "right" : "public appendTo(buffer , calendar ) : void",
    "info" : "MethodDeclaration[22324-22521]:MethodDeclaration[22324-22521]"
  }, {
    "left" : "class : UnpaddedNumberField",
    "right" : "class : UnpaddedNumberField",
    "info" : "TypeDeclaration[22533-23759]:TypeDeclaration[22533-23759]"
  }, {
    "left" : "mField",
    "right" : "mField",
    "info" : "FieldDeclaration[22678-22703]:FieldDeclaration[22678-22703]"
  }, {
    "left" : "package UnpaddedNumberField(field int)",
    "right" : "package UnpaddedNumberField(field int)",
    "info" : "MethodDeclaration[22713-22942]:MethodDeclaration[22713-22942]"
  }, {
    "left" : "public estimateLength() : int",
    "right" : "public estimateLength() : int",
    "info" : "MethodDeclaration[22952-23080]:MethodDeclaration[22952-23080]"
  }, {
    "left" : "public appendTo(buffer , calendar ) : void",
    "right" : "public appendTo(buffer , calendar ) : void",
    "info" : "MethodDeclaration[23090-23281]:MethodDeclaration[23090-23281]"
  }, {
    "left" : "public appendTo(buffer , value int) : void",
    "right" : "public appendTo(buffer , value int) : void",
    "info" : "MethodDeclaration[23291-23753]:MethodDeclaration[23291-23753]"
  }, {
    "left" : "class : UnpaddedMonthField",
    "right" : "class : UnpaddedMonthField",
    "info" : "TypeDeclaration[23765-24874]:TypeDeclaration[23765-24874]"
  }, {
    "left" : "INSTANCE",
    "right" : "INSTANCE",
    "info" : "FieldDeclaration[23908-23976]:FieldDeclaration[23908-23976]"
  }, {
    "left" : "package UnpaddedMonthField()",
    "right" : "package UnpaddedMonthField()",
    "info" : "MethodDeclaration[23986-24139]:MethodDeclaration[23986-24139]"
  }, {
    "left" : "public estimateLength() : int",
    "right" : "public estimateLength() : int",
    "info" : "MethodDeclaration[24149-24277]:MethodDeclaration[24149-24277]"
  }, {
    "left" : "public appendTo(buffer , calendar ) : void",
    "right" : "public appendTo(buffer , calendar ) : void",
    "info" : "MethodDeclaration[24287-24490]:MethodDeclaration[24287-24490]"
  }, {
    "left" : "public appendTo(buffer , value int) : void",
    "right" : "public appendTo(buffer , value int) : void",
    "info" : "MethodDeclaration[24500-24868]:MethodDeclaration[24500-24868]"
  }, {
    "left" : "class : PaddedNumberField",
    "right" : "class : PaddedNumberField",
    "info" : "TypeDeclaration[24880-26792]:TypeDeclaration[24880-26792]"
  }, {
    "left" : "mField",
    "right" : "mField",
    "info" : "FieldDeclaration[25020-25045]:FieldDeclaration[25020-25045]"
  }, {
    "left" : "mSize",
    "right" : "mSize",
    "info" : "FieldDeclaration[25054-25078]:FieldDeclaration[25054-25078]"
  }, {
    "left" : "package PaddedNumberField(field int, size int)",
    "right" : "package PaddedNumberField(field int, size int)",
    "info" : "MethodDeclaration[25088-25543]:MethodDeclaration[25088-25543]"
  }, {
    "left" : "public estimateLength() : int",
    "right" : "public estimateLength() : int",
    "info" : "MethodDeclaration[25553-25681]:MethodDeclaration[25553-25681]"
  }, {
    "left" : "public appendTo(buffer , calendar ) : void",
    "right" : "public appendTo(buffer , calendar ) : void",
    "info" : "MethodDeclaration[25691-25882]:MethodDeclaration[25691-25882]"
  }, {
    "left" : "public appendTo(buffer , value int) : void",
    "right" : "public appendTo(buffer , value int) : void",
    "info" : "MethodDeclaration[25892-26786]:MethodDeclaration[25892-26786]"
  }, {
    "left" : "class : TwoDigitNumberField",
    "right" : "class : TwoDigitNumberField",
    "info" : "TypeDeclaration[26798-27936]:TypeDeclaration[26798-27936]"
  }, {
    "left" : "mField",
    "right" : "mField",
    "info" : "FieldDeclaration[26943-26968]:FieldDeclaration[26943-26968]"
  }, {
    "left" : "package TwoDigitNumberField(field int)",
    "right" : "package TwoDigitNumberField(field int)",
    "info" : "MethodDeclaration[26978-27208]:MethodDeclaration[26978-27208]"
  }, {
    "left" : "public estimateLength() : int",
    "right" : "public estimateLength() : int",
    "info" : "MethodDeclaration[27218-27346]:MethodDeclaration[27218-27346]"
  }, {
    "left" : "public appendTo(buffer , calendar ) : void",
    "right" : "public appendTo(buffer , calendar ) : void",
    "info" : "MethodDeclaration[27356-27547]:MethodDeclaration[27356-27547]"
  }, {
    "left" : "public appendTo(buffer , value int) : void",
    "right" : "public appendTo(buffer , value int) : void",
    "info" : "MethodDeclaration[27557-27930]:MethodDeclaration[27557-27930]"
  }, {
    "left" : "class : TwoDigitYearField",
    "right" : "class : TwoDigitYearField",
    "info" : "TypeDeclaration[27942-28910]:TypeDeclaration[27942-28910]"
  }, {
    "left" : "INSTANCE",
    "right" : "INSTANCE",
    "info" : "FieldDeclaration[28083-28149]:FieldDeclaration[28083-28149]"
  }, {
    "left" : "package TwoDigitYearField()",
    "right" : "package TwoDigitYearField()",
    "info" : "MethodDeclaration[28159-28299]:MethodDeclaration[28159-28299]"
  }, {
    "left" : "public estimateLength() : int",
    "right" : "public estimateLength() : int",
    "info" : "MethodDeclaration[28309-28437]:MethodDeclaration[28309-28437]"
  }, {
    "left" : "public appendTo(buffer , calendar ) : void",
    "right" : "public appendTo(buffer , calendar ) : void",
    "info" : "MethodDeclaration[28447-28651]:MethodDeclaration[28447-28651]"
  }, {
    "left" : "public appendTo(buffer , value int) : void",
    "right" : "public appendTo(buffer , value int) : void",
    "info" : "MethodDeclaration[28661-28904]:MethodDeclaration[28661-28904]"
  }, {
    "left" : "class : TwoDigitMonthField",
    "right" : "class : TwoDigitMonthField",
    "info" : "TypeDeclaration[28916-29889]:TypeDeclaration[28916-29889]"
  }, {
    "left" : "INSTANCE",
    "right" : "INSTANCE",
    "info" : "FieldDeclaration[29059-29127]:FieldDeclaration[29059-29127]"
  }, {
    "left" : "package TwoDigitMonthField()",
    "right" : "package TwoDigitMonthField()",
    "info" : "MethodDeclaration[29137-29279]:MethodDeclaration[29137-29279]"
  }, {
    "left" : "public estimateLength() : int",
    "right" : "public estimateLength() : int",
    "info" : "MethodDeclaration[29289-29417]:MethodDeclaration[29289-29417]"
  }, {
    "left" : "public appendTo(buffer , calendar ) : void",
    "right" : "public appendTo(buffer , calendar ) : void",
    "info" : "MethodDeclaration[29427-29630]:MethodDeclaration[29427-29630]"
  }, {
    "left" : "public appendTo(buffer , value int) : void",
    "right" : "public appendTo(buffer , value int) : void",
    "info" : "MethodDeclaration[29640-29883]:MethodDeclaration[29640-29883]"
  }, {
    "left" : "class : TwelveHourField",
    "right" : "class : TwelveHourField",
    "info" : "TypeDeclaration[29895-31035]:TypeDeclaration[29895-31035]"
  }, {
    "left" : "mRule",
    "right" : "mRule",
    "info" : "FieldDeclaration[30039-30070]:FieldDeclaration[30039-30070]"
  }, {
    "left" : "package TwelveHourField(rule )",
    "right" : "package TwelveHourField(rule )",
    "info" : "MethodDeclaration[30080-30328]:MethodDeclaration[30080-30328]"
  }, {
    "left" : "public estimateLength() : int",
    "right" : "public estimateLength() : int",
    "info" : "MethodDeclaration[30338-30487]:MethodDeclaration[30338-30487]"
  }, {
    "left" : "public appendTo(buffer , calendar ) : void",
    "right" : "public appendTo(buffer , calendar ) : void",
    "info" : "MethodDeclaration[30497-30845]:MethodDeclaration[30497-30845]"
  }, {
    "left" : "public appendTo(buffer , value int) : void",
    "right" : "public appendTo(buffer , value int) : void",
    "info" : "MethodDeclaration[30855-31029]:MethodDeclaration[30855-31029]"
  }, {
    "left" : "class : TwentyFourHourField",
    "right" : "class : TwentyFourHourField",
    "info" : "TypeDeclaration[31041-32207]:TypeDeclaration[31041-32207]"
  }, {
    "left" : "mRule",
    "right" : "mRule",
    "info" : "FieldDeclaration[31194-31225]:FieldDeclaration[31194-31225]"
  }, {
    "left" : "package TwentyFourHourField(rule )",
    "right" : "package TwentyFourHourField(rule )",
    "info" : "MethodDeclaration[31235-31491]:MethodDeclaration[31235-31491]"
  }, {
    "left" : "public estimateLength() : int",
    "right" : "public estimateLength() : int",
    "info" : "MethodDeclaration[31501-31650]:MethodDeclaration[31501-31650]"
  }, {
    "left" : "public appendTo(buffer , calendar ) : void",
    "right" : "public appendTo(buffer , calendar ) : void",
    "info" : "MethodDeclaration[31660-32017]:MethodDeclaration[31660-32017]"
  }, {
    "left" : "public appendTo(buffer , value int) : void",
    "right" : "public appendTo(buffer , value int) : void",
    "info" : "MethodDeclaration[32027-32201]:MethodDeclaration[32027-32201]"
  }, {
    "left" : "cTimeZoneDisplayCache",
    "right" : "cTimeZoneDisplayCache",
    "info" : "FieldDeclaration[32292-32434]:FieldDeclaration[32292-32434]"
  }, {
    "left" : "package getTimeZoneDisplay(tz , daylight boolean, style int, locale ) : ",
    "right" : "package getTimeZoneDisplay(tz , daylight boolean, style int, locale ) : ",
    "info" : "MethodDeclaration[32439-33377]:MethodDeclaration[32439-33377]"
  }, {
    "left" : "class : TimeZoneNameRule",
    "right" : "class : TimeZoneNameRule",
    "info" : "TypeDeclaration[33383-35087]:TypeDeclaration[33383-35073]"
  }, {
    "left" : "mLocale",
    "right" : "mLocale",
    "info" : "FieldDeclaration[33517-33546]:FieldDeclaration[33517-33546]"
  }, {
    "left" : "mStyle",
    "right" : "mStyle",
    "info" : "FieldDeclaration[33555-33580]:FieldDeclaration[33555-33580]"
  }, {
    "left" : "mStandard",
    "right" : "mStandard",
    "info" : "FieldDeclaration[33626-33657]:FieldDeclaration[33589-33620]"
  }, {
    "left" : "mDaylight",
    "right" : "mDaylight",
    "info" : "FieldDeclaration[33666-33697]:FieldDeclaration[33629-33660]"
  }, {
    "left" : "package TimeZoneNameRule(timeZone , locale , style int)",
    "right" : "package TimeZoneNameRule(timeZone , locale , style int)",
    "info" : "MethodDeclaration[33707-34270]:MethodDeclaration[33670-34204]"
  }, {
    "left" : "public estimateLength() : int",
    "right" : "public estimateLength() : int",
    "info" : "MethodDeclaration[34280-34632]:MethodDeclaration[34214-34566]"
  }, {
    "left" : "public appendTo(buffer , calendar ) : void",
    "right" : "public appendTo(buffer , calendar ) : void",
    "info" : "MethodDeclaration[34642-35081]:MethodDeclaration[34576-35067]"
  }, {
    "left" : "class : TimeZoneNumberRule",
    "right" : "class : TimeZoneNumberRule",
    "info" : "TypeDeclaration[35093-36743]:TypeDeclaration[35079-36729]"
  }, {
    "left" : "INSTANCE_COLON",
    "right" : "INSTANCE_COLON",
    "info" : "FieldDeclaration[35279-35357]:FieldDeclaration[35265-35343]"
  }, {
    "left" : "INSTANCE_NO_COLON",
    "right" : "INSTANCE_NO_COLON",
    "info" : "FieldDeclaration[35366-35448]:FieldDeclaration[35352-35434]"
  }, {
    "left" : "mColon",
    "right" : "mColon",
    "info" : "FieldDeclaration[35458-35479]:FieldDeclaration[35444-35465]"
  }, {
    "left" : "package TimeZoneNumberRule(colon boolean)",
    "right" : "package TimeZoneNumberRule(colon boolean)",
    "info" : "MethodDeclaration[35489-35774]:MethodDeclaration[35475-35760]"
  }, {
    "left" : "public estimateLength() : int",
    "right" : "public estimateLength() : int",
    "info" : "MethodDeclaration[35784-35912]:MethodDeclaration[35770-35898]"
  }, {
    "left" : "public appendTo(buffer , calendar ) : void",
    "right" : "public appendTo(buffer , calendar ) : void",
    "info" : "MethodDeclaration[35922-36737]:MethodDeclaration[35908-36723]"
  }, {
    "left" : "class : TimeZoneDisplayKey",
    "right" : "class : TimeZoneDisplayKey",
    "info" : "TypeDeclaration[36827-38452]:TypeDeclaration[36813-38438]"
  }, {
    "left" : "mTimeZone",
    "right" : "mTimeZone",
    "info" : "FieldDeclaration[36968-37001]:FieldDeclaration[36954-36987]"
  }, {
    "left" : "mStyle",
    "right" : "mStyle",
    "info" : "FieldDeclaration[37010-37035]:FieldDeclaration[36996-37021]"
  }, {
    "left" : "mLocale",
    "right" : "mLocale",
    "info" : "FieldDeclaration[37044-37073]:FieldDeclaration[37030-37059]"
  }, {
    "left" : "package TimeZoneDisplayKey(timeZone , daylight boolean, style int, locale )",
    "right" : "package TimeZoneDisplayKey(timeZone , daylight boolean, style int, locale )",
    "info" : "MethodDeclaration[37083-37718]:MethodDeclaration[37069-37704]"
  }, {
    "left" : "public hashCode() : int",
    "right" : "public hashCode() : int",
    "info" : "MethodDeclaration[37728-37912]:MethodDeclaration[37714-37898]"
  }, {
    "left" : "public equals(obj ) : boolean",
    "right" : "public equals(obj ) : boolean",
    "info" : "MethodDeclaration[37922-38446]:MethodDeclaration[37908-38432]"
  } ],
  "mappings" : [
 {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[2790-2796]:Modifier[2790-2796]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[2797-2802]:TYPE_DECLARATION_KIND[2797-2802]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[4902-4911]:Modifier[4902-4911]"
  }, {
    "left" : "FastDatePrinter",
    "right" : "FastDatePrinter",
    "info" : "SimpleName[4912-4927]:SimpleName[4912-4927]"
  }, {
    "left" : "String pattern",
    "right" : "String pattern",
    "info" : "SingleVariableDeclaration[4928-4942]:SingleVariableDeclaration[4928-4942]"
  }, {
    "left" : "TimeZone timeZone",
    "right" : "TimeZone timeZone",
    "info" : "SingleVariableDeclaration[4944-4961]:SingleVariableDeclaration[4944-4961]"
  }, {
    "left" : "Locale locale",
    "right" : "Locale locale",
    "info" : "SingleVariableDeclaration[4963-4976]:SingleVariableDeclaration[4963-4976]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4978-5086]:Block[4978-5086]"
  }, {
    "left" : "mPattern = pattern;",
    "right" : "mPattern = pattern;",
    "info" : "ExpressionStatement[4988-5007]:ExpressionStatement[4988-5007]"
  }, {
    "left" : "mTimeZone = timeZone;",
    "right" : "mTimeZone = timeZone;",
    "info" : "ExpressionStatement[5016-5037]:ExpressionStatement[5016-5037]"
  }, {
    "left" : "mLocale = locale;",
    "right" : "mLocale = locale;",
    "info" : "ExpressionStatement[5046-5063]:ExpressionStatement[5046-5063]"
  }, {
    "left" : "init();",
    "right" : "init();",
    "info" : "ExpressionStatement[5073-5080]:ExpressionStatement[5073-5080]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[5162-5169]:Modifier[5162-5169]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[5170-5174]:PrimitiveType[5170-5174]"
  }, {
    "left" : "init",
    "right" : "init",
    "info" : "SimpleName[5175-5179]:SimpleName[5175-5179]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5182-5462]:Block[5182-5462]"
  }, {
    "left" : "List<Rule> rulesList = parsePattern();",
    "right" : "List<Rule> rulesList = parsePattern();",
    "info" : "VariableDeclarationStatement[5192-5230]:VariableDeclarationStatement[5192-5230]"
  }, {
    "left" : "mRules = rulesList.toArray(new Rule[rulesList.size()]);",
    "right" : "mRules = rulesList.toArray(new Rule[rulesList.size()]);",
    "info" : "ExpressionStatement[5239-5294]:ExpressionStatement[5239-5294]"
  }, {
    "left" : "int len = 0;",
    "right" : "int len = 0;",
    "info" : "VariableDeclarationStatement[5304-5316]:VariableDeclarationStatement[5304-5316]"
  }, {
    "left" : "for (int i=mRules.length; --i >= 0)",
    "right" : "for (int i=mRules.length; --i >= 0)",
    "info" : "ForStatement[5325-5421]:ForStatement[5325-5421]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5363-5421]:Block[5363-5421]"
  }, {
    "left" : "len += mRules[i].estimateLength();",
    "right" : "len += mRules[i].estimateLength();",
    "info" : "ExpressionStatement[5377-5411]:ExpressionStatement[5377-5411]"
  }, {
    "left" : "mMaxLengthEstimate = len;",
    "right" : "mMaxLengthEstimate = len;",
    "info" : "ExpressionStatement[5431-5456]:ExpressionStatement[5431-5456]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[5757-5766]:Modifier[5757-5766]"
  }, {
    "left" : "List<Rule>",
    "right" : "List<Rule>",
    "info" : "ParameterizedType[5767-5777]:ParameterizedType[5767-5777]"
  }, {
    "left" : "parsePattern",
    "right" : "parsePattern",
    "info" : "SimpleName[5778-5790]:SimpleName[5778-5790]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5793-10752]:Block[5793-10752]"
  }, {
    "left" : "DateFormatSymbols symbols = new DateFormatSymbols(mLocale);",
    "right" : "DateFormatSymbols symbols = new DateFormatSymbols(mLocale);",
    "info" : "VariableDeclarationStatement[5803-5862]:VariableDeclarationStatement[5803-5862]"
  }, {
    "left" : "List<Rule> rules = new ArrayList<Rule>();",
    "right" : "List<Rule> rules = new ArrayList<Rule>();",
    "info" : "VariableDeclarationStatement[5871-5912]:VariableDeclarationStatement[5871-5912]"
  }, {
    "left" : "String[] ERAs = symbols.getEras();",
    "right" : "String[] ERAs = symbols.getEras();",
    "info" : "VariableDeclarationStatement[5922-5956]:VariableDeclarationStatement[5922-5956]"
  }, {
    "left" : "String[] months = symbols.getMonths();",
    "right" : "String[] months = symbols.getMonths();",
    "info" : "VariableDeclarationStatement[5965-6003]:VariableDeclarationStatement[5965-6003]"
  }, {
    "left" : "String[] shortMonths = symbols.getShortMonths();",
    "right" : "String[] shortMonths = symbols.getShortMonths();",
    "info" : "VariableDeclarationStatement[6012-6060]:VariableDeclarationStatement[6012-6060]"
  }, {
    "left" : "String[] weekdays = symbols.getWeekdays();",
    "right" : "String[] weekdays = symbols.getWeekdays();",
    "info" : "VariableDeclarationStatement[6069-6111]:VariableDeclarationStatement[6069-6111]"
  }, {
    "left" : "String[] shortWeekdays = symbols.getShortWeekdays();",
    "right" : "String[] shortWeekdays = symbols.getShortWeekdays();",
    "info" : "VariableDeclarationStatement[6120-6172]:VariableDeclarationStatement[6120-6172]"
  }, {
    "left" : "String[] AmPmStrings = symbols.getAmPmStrings();",
    "right" : "String[] AmPmStrings = symbols.getAmPmStrings();",
    "info" : "VariableDeclarationStatement[6181-6229]:VariableDeclarationStatement[6181-6229]"
  }, {
    "left" : "int length = mPattern.length();",
    "right" : "int length = mPattern.length();",
    "info" : "VariableDeclarationStatement[6239-6270]:VariableDeclarationStatement[6239-6270]"
  }, {
    "left" : "int[] indexRef = new int[1];",
    "right" : "int[] indexRef = new int[1];",
    "info" : "VariableDeclarationStatement[6279-6307]:VariableDeclarationStatement[6279-6307]"
  }, {
    "left" : "for (int i = 0; i < length; i++)",
    "right" : "for (int i = 0; i < length; i++)",
    "info" : "ForStatement[6317-10723]:ForStatement[6317-10723]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6350-10723]:Block[6350-10723]"
  }, {
    "left" : "indexRef[0] = i;",
    "right" : "indexRef[0] = i;",
    "info" : "ExpressionStatement[6364-6380]:ExpressionStatement[6364-6380]"
  }, {
    "left" : "String token = parseToken(mPattern, indexRef);",
    "right" : "String token = parseToken(mPattern, indexRef);",
    "info" : "VariableDeclarationStatement[6393-6439]:VariableDeclarationStatement[6393-6439]"
  }, {
    "left" : "i = indexRef[0];",
    "right" : "i = indexRef[0];",
    "info" : "ExpressionStatement[6452-6468]:ExpressionStatement[6452-6468]"
  }, {
    "left" : "int tokenLen = token.length();",
    "right" : "int tokenLen = token.length();",
    "info" : "VariableDeclarationStatement[6482-6512]:VariableDeclarationStatement[6482-6512]"
  }, {
    "left" : "if (tokenLen == 0)",
    "right" : "if (tokenLen == 0)",
    "info" : "IfStatement[6525-6582]:IfStatement[6525-6582]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6544-6582]:Block[6544-6582]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[6562-6568]:BreakStatement[6562-6568]"
  }, {
    "left" : "Rule rule;",
    "right" : "Rule rule;",
    "info" : "VariableDeclarationStatement[6596-6606]:VariableDeclarationStatement[6596-6606]"
  }, {
    "left" : "char c = token.charAt(0);",
    "right" : "char c = token.charAt(0);",
    "info" : "VariableDeclarationStatement[6619-6644]:VariableDeclarationStatement[6619-6644]"
  }, {
    "left" : "switch (c) {\n            case 'G': // era designator (text)\n                rule = new TextField(Calendar.ERA, ERAs);\n                break;\n            case 'y': // year (number)\n                if (tokenLen == 2) {\n                    rule = TwoDigitYearField.INSTANCE;\n                } else {\n                    rule = selectNumberRule(Calendar.YEAR, tokenLen < 4 ? 4 : tokenLen);\n                }\n                break;\n            case 'M': // month in year (text and number)\n                if (tokenLen >= 4) {\n                    rule = new TextField(Calendar.MONTH, months);\n                } else if (tokenLen == 3) {\n                    rule = new TextField(Calendar.MONTH, shortMonths);\n                } else if (tokenLen == 2) {\n                    rule = TwoDigitMonthField.INSTANCE;\n                } else {\n                    rule = UnpaddedMonthField.INSTANCE;\n                }\n                break;\n            case 'd': // day in month (number)\n                rule = selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                break;\n            case 'h': // hour in am/pm (number, 1..12)\n                rule = new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                break;\n            case 'H': // hour in day (number, 0..23)\n                rule = selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                break;\n            case 'm': // minute in hour (number)\n                rule = selectNumberRule(Calendar.MINUTE, tokenLen);\n                break;\n            case 's': // second in minute (number)\n                rule = selectNumberRule(Calendar.SECOND, tokenLen);\n                break;\n            case 'S': // millisecond (number)\n                rule = selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                break;\n            case 'E': // day in week (text)\n                rule = new TextField(Calendar.DAY_OF_WEEK, tokenLen < 4 ? shortWeekdays : weekdays);\n                break;\n            case 'D': // day in year (number)\n                rule = selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                break;\n            case 'F': // day of week in month (number)\n                rule = selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                break;\n            case 'w': // week in year (number)\n                rule = selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                break;\n            case 'W': // week in month (number)\n                rule = selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                break;\n            case 'a': // am/pm marker (text)\n                rule = new TextField(Calendar.AM_PM, AmPmStrings);\n                break;\n            case 'k': // hour in day (1..24)\n                rule = new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                break;\n            case 'K': // hour in am/pm (0..11)\n                rule = selectNumberRule(Calendar.HOUR, tokenLen);\n                break;\n            case 'z': // time zone (text)\n                if (tokenLen >= 4) {\n                    rule = new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.LONG);\n                } else {\n                    rule = new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.SHORT);\n                }\n                break;\n            case 'Z': // time zone (value)\n                if (tokenLen == 1) {\n                    rule = TimeZoneNumberRule.INSTANCE_NO_COLON;\n                } else {\n                    rule = TimeZoneNumberRule.INSTANCE_COLON;\n                }\n                break;\n            case '\\'': // literal text\n                String sub = token.substring(1);\n                if (sub.length() == 1) {\n                    rule = new CharacterLiteral(sub.charAt(0));\n                } else {\n                    rule = new StringLiteral(sub);\n                }\n                break;\n            default:\n                throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n            }",
    "right" : "switch (c) {\n            case 'G': // era designator (text)\n                rule = new TextField(Calendar.ERA, ERAs);\n                break;\n            case 'y': // year (number)\n                if (tokenLen == 2) {\n                    rule = TwoDigitYearField.INSTANCE;\n                } else {\n                    rule = selectNumberRule(Calendar.YEAR, tokenLen < 4 ? 4 : tokenLen);\n                }\n                break;\n            case 'M': // month in year (text and number)\n                if (tokenLen >= 4) {\n                    rule = new TextField(Calendar.MONTH, months);\n                } else if (tokenLen == 3) {\n                    rule = new TextField(Calendar.MONTH, shortMonths);\n                } else if (tokenLen == 2) {\n                    rule = TwoDigitMonthField.INSTANCE;\n                } else {\n                    rule = UnpaddedMonthField.INSTANCE;\n                }\n                break;\n            case 'd': // day in month (number)\n                rule = selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                break;\n            case 'h': // hour in am/pm (number, 1..12)\n                rule = new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                break;\n            case 'H': // hour in day (number, 0..23)\n                rule = selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                break;\n            case 'm': // minute in hour (number)\n                rule = selectNumberRule(Calendar.MINUTE, tokenLen);\n                break;\n            case 's': // second in minute (number)\n                rule = selectNumberRule(Calendar.SECOND, tokenLen);\n                break;\n            case 'S': // millisecond (number)\n                rule = selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                break;\n            case 'E': // day in week (text)\n                rule = new TextField(Calendar.DAY_OF_WEEK, tokenLen < 4 ? shortWeekdays : weekdays);\n                break;\n            case 'D': // day in year (number)\n                rule = selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                break;\n            case 'F': // day of week in month (number)\n                rule = selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                break;\n            case 'w': // week in year (number)\n                rule = selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                break;\n            case 'W': // week in month (number)\n                rule = selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                break;\n            case 'a': // am/pm marker (text)\n                rule = new TextField(Calendar.AM_PM, AmPmStrings);\n                break;\n            case 'k': // hour in day (1..24)\n                rule = new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                break;\n            case 'K': // hour in am/pm (0..11)\n                rule = selectNumberRule(Calendar.HOUR, tokenLen);\n                break;\n            case 'z': // time zone (text)\n                if (tokenLen >= 4) {\n                    rule = new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.LONG);\n                } else {\n                    rule = new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.SHORT);\n                }\n                break;\n            case 'Z': // time zone (value)\n                if (tokenLen == 1) {\n                    rule = TimeZoneNumberRule.INSTANCE_NO_COLON;\n                } else {\n                    rule = TimeZoneNumberRule.INSTANCE_COLON;\n                }\n                break;\n            case '\\'': // literal text\n                String sub = token.substring(1);\n                if (sub.length() == 1) {\n                    rule = new CharacterLiteral(sub.charAt(0));\n                } else {\n                    rule = new StringLiteral(sub);\n                }\n                break;\n            default:\n                throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n            }",
    "info" : "SwitchStatement[6658-10683]:SwitchStatement[6658-10683]"
  }, {
    "left" : "case 'G':",
    "right" : "case 'G':",
    "info" : "SwitchCase[6683-6692]:SwitchCase[6683-6692]"
  }, {
    "left" : "rule = new TextField(Calendar.ERA, ERAs);",
    "right" : "rule = new TextField(Calendar.ERA, ERAs);",
    "info" : "ExpressionStatement[6734-6775]:ExpressionStatement[6734-6775]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[6792-6798]:BreakStatement[6792-6798]"
  }, {
    "left" : "case 'y':",
    "right" : "case 'y':",
    "info" : "SwitchCase[6811-6820]:SwitchCase[6811-6820]"
  }, {
    "left" : "if (tokenLen == 2)",
    "right" : "if (tokenLen == 2)",
    "info" : "IfStatement[6854-7061]:IfStatement[6854-7061]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6873-6947]:Block[6873-6947]"
  }, {
    "left" : "rule = TwoDigitYearField.INSTANCE;",
    "right" : "rule = TwoDigitYearField.INSTANCE;",
    "info" : "ExpressionStatement[6895-6929]:ExpressionStatement[6895-6929]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6953-7061]:Block[6953-7061]"
  }, {
    "left" : "rule = selectNumberRule(Calendar.YEAR, tokenLen < 4 ? 4 : tokenLen);",
    "right" : "rule = selectNumberRule(Calendar.YEAR, tokenLen < 4 ? 4 : tokenLen);",
    "info" : "ExpressionStatement[6975-7043]:ExpressionStatement[6975-7043]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[7078-7084]:BreakStatement[7078-7084]"
  }, {
    "left" : "case 'M':",
    "right" : "case 'M':",
    "info" : "SwitchCase[7097-7106]:SwitchCase[7097-7106]"
  }, {
    "left" : "if (tokenLen >= 4)",
    "right" : "if (tokenLen >= 4)",
    "info" : "IfStatement[7158-7558]:IfStatement[7158-7558]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7177-7262]:Block[7177-7262]"
  }, {
    "left" : "rule = new TextField(Calendar.MONTH, months);",
    "right" : "rule = new TextField(Calendar.MONTH, months);",
    "info" : "ExpressionStatement[7199-7244]:ExpressionStatement[7199-7244]"
  }, {
    "left" : "if (tokenLen == 3)",
    "right" : "if (tokenLen == 3)",
    "info" : "IfStatement[7268-7558]:IfStatement[7268-7558]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7287-7377]:Block[7287-7377]"
  }, {
    "left" : "rule = new TextField(Calendar.MONTH, shortMonths);",
    "right" : "rule = new TextField(Calendar.MONTH, shortMonths);",
    "info" : "ExpressionStatement[7309-7359]:ExpressionStatement[7309-7359]"
  }, {
    "left" : "if (tokenLen == 2)",
    "right" : "if (tokenLen == 2)",
    "info" : "IfStatement[7383-7558]:IfStatement[7383-7558]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7402-7477]:Block[7402-7477]"
  }, {
    "left" : "rule = TwoDigitMonthField.INSTANCE;",
    "right" : "rule = TwoDigitMonthField.INSTANCE;",
    "info" : "ExpressionStatement[7424-7459]:ExpressionStatement[7424-7459]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7483-7558]:Block[7483-7558]"
  }, {
    "left" : "rule = UnpaddedMonthField.INSTANCE;",
    "right" : "rule = UnpaddedMonthField.INSTANCE;",
    "info" : "ExpressionStatement[7505-7540]:ExpressionStatement[7505-7540]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[7575-7581]:BreakStatement[7575-7581]"
  }, {
    "left" : "case 'd':",
    "right" : "case 'd':",
    "info" : "SwitchCase[7594-7603]:SwitchCase[7594-7603]"
  }, {
    "left" : "rule = selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);",
    "right" : "rule = selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);",
    "info" : "ExpressionStatement[7645-7702]:ExpressionStatement[7645-7702]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[7719-7725]:BreakStatement[7719-7725]"
  }, {
    "left" : "case 'h':",
    "right" : "case 'h':",
    "info" : "SwitchCase[7738-7747]:SwitchCase[7738-7747]"
  }, {
    "left" : "rule = new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));",
    "right" : "rule = new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));",
    "info" : "ExpressionStatement[7797-7867]:ExpressionStatement[7797-7867]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[7884-7890]:BreakStatement[7884-7890]"
  }, {
    "left" : "case 'H':",
    "right" : "case 'H':",
    "info" : "SwitchCase[7903-7912]:SwitchCase[7903-7912]"
  }, {
    "left" : "rule = selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);",
    "right" : "rule = selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);",
    "info" : "ExpressionStatement[7960-8016]:ExpressionStatement[7960-8016]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[8033-8039]:BreakStatement[8033-8039]"
  }, {
    "left" : "case 'm':",
    "right" : "case 'm':",
    "info" : "SwitchCase[8052-8061]:SwitchCase[8052-8061]"
  }, {
    "left" : "rule = selectNumberRule(Calendar.MINUTE, tokenLen);",
    "right" : "rule = selectNumberRule(Calendar.MINUTE, tokenLen);",
    "info" : "ExpressionStatement[8105-8156]:ExpressionStatement[8105-8156]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[8173-8179]:BreakStatement[8173-8179]"
  }, {
    "left" : "case 's':",
    "right" : "case 's':",
    "info" : "SwitchCase[8192-8201]:SwitchCase[8192-8201]"
  }, {
    "left" : "rule = selectNumberRule(Calendar.SECOND, tokenLen);",
    "right" : "rule = selectNumberRule(Calendar.SECOND, tokenLen);",
    "info" : "ExpressionStatement[8247-8298]:ExpressionStatement[8247-8298]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[8315-8321]:BreakStatement[8315-8321]"
  }, {
    "left" : "case 'S':",
    "right" : "case 'S':",
    "info" : "SwitchCase[8334-8343]:SwitchCase[8334-8343]"
  }, {
    "left" : "rule = selectNumberRule(Calendar.MILLISECOND, tokenLen);",
    "right" : "rule = selectNumberRule(Calendar.MILLISECOND, tokenLen);",
    "info" : "ExpressionStatement[8384-8440]:ExpressionStatement[8384-8440]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[8457-8463]:BreakStatement[8457-8463]"
  }, {
    "left" : "case 'E':",
    "right" : "case 'E':",
    "info" : "SwitchCase[8476-8485]:SwitchCase[8476-8485]"
  }, {
    "left" : "rule = new TextField(Calendar.DAY_OF_WEEK, tokenLen < 4 ? shortWeekdays : weekdays);",
    "right" : "rule = new TextField(Calendar.DAY_OF_WEEK, tokenLen < 4 ? shortWeekdays : weekdays);",
    "info" : "ExpressionStatement[8524-8608]:ExpressionStatement[8524-8608]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[8625-8631]:BreakStatement[8625-8631]"
  }, {
    "left" : "case 'D':",
    "right" : "case 'D':",
    "info" : "SwitchCase[8644-8653]:SwitchCase[8644-8653]"
  }, {
    "left" : "rule = selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);",
    "right" : "rule = selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);",
    "info" : "ExpressionStatement[8694-8750]:ExpressionStatement[8694-8750]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[8767-8773]:BreakStatement[8767-8773]"
  }, {
    "left" : "case 'F':",
    "right" : "case 'F':",
    "info" : "SwitchCase[8786-8795]:SwitchCase[8786-8795]"
  }, {
    "left" : "rule = selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);",
    "right" : "rule = selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);",
    "info" : "ExpressionStatement[8845-8910]:ExpressionStatement[8845-8910]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[8927-8933]:BreakStatement[8927-8933]"
  }, {
    "left" : "case 'w':",
    "right" : "case 'w':",
    "info" : "SwitchCase[8946-8955]:SwitchCase[8946-8955]"
  }, {
    "left" : "rule = selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);",
    "right" : "rule = selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);",
    "info" : "ExpressionStatement[8997-9054]:ExpressionStatement[8997-9054]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[9071-9077]:BreakStatement[9071-9077]"
  }, {
    "left" : "case 'W':",
    "right" : "case 'W':",
    "info" : "SwitchCase[9090-9099]:SwitchCase[9090-9099]"
  }, {
    "left" : "rule = selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);",
    "right" : "rule = selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);",
    "info" : "ExpressionStatement[9142-9200]:ExpressionStatement[9142-9200]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[9217-9223]:BreakStatement[9217-9223]"
  }, {
    "left" : "case 'a':",
    "right" : "case 'a':",
    "info" : "SwitchCase[9236-9245]:SwitchCase[9236-9245]"
  }, {
    "left" : "rule = new TextField(Calendar.AM_PM, AmPmStrings);",
    "right" : "rule = new TextField(Calendar.AM_PM, AmPmStrings);",
    "info" : "ExpressionStatement[9285-9335]:ExpressionStatement[9285-9335]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[9352-9358]:BreakStatement[9352-9358]"
  }, {
    "left" : "case 'k':",
    "right" : "case 'k':",
    "info" : "SwitchCase[9371-9380]:SwitchCase[9371-9380]"
  }, {
    "left" : "rule = new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));",
    "right" : "rule = new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));",
    "info" : "ExpressionStatement[9420-9501]:ExpressionStatement[9420-9501]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[9518-9524]:BreakStatement[9518-9524]"
  }, {
    "left" : "case 'K':",
    "right" : "case 'K':",
    "info" : "SwitchCase[9537-9546]:SwitchCase[9537-9546]"
  }, {
    "left" : "rule = selectNumberRule(Calendar.HOUR, tokenLen);",
    "right" : "rule = selectNumberRule(Calendar.HOUR, tokenLen);",
    "info" : "ExpressionStatement[9588-9637]:ExpressionStatement[9588-9637]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[9654-9660]:BreakStatement[9654-9660]"
  }, {
    "left" : "case 'z':",
    "right" : "case 'z':",
    "info" : "SwitchCase[9673-9682]:SwitchCase[9673-9682]"
  }, {
    "left" : "if (tokenLen >= 4)",
    "right" : "if (tokenLen >= 4)",
    "info" : "IfStatement[9719-9951]:IfStatement[9719-9951]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9738-9841]:Block[9738-9841]"
  }, {
    "left" : "rule = new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.LONG);",
    "right" : "rule = new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.LONG);",
    "info" : "ExpressionStatement[9760-9823]:ExpressionStatement[9760-9823]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9847-9951]:Block[9847-9951]"
  }, {
    "left" : "rule = new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.SHORT);",
    "right" : "rule = new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.SHORT);",
    "info" : "ExpressionStatement[9869-9933]:ExpressionStatement[9869-9933]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[9968-9974]:BreakStatement[9968-9974]"
  }, {
    "left" : "case 'Z':",
    "right" : "case 'Z':",
    "info" : "SwitchCase[9987-9996]:SwitchCase[9987-9996]"
  }, {
    "left" : "if (tokenLen == 1)",
    "right" : "if (tokenLen == 1)",
    "info" : "IfStatement[10034-10224]:IfStatement[10034-10224]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10053-10137]:Block[10053-10137]"
  }, {
    "left" : "rule = TimeZoneNumberRule.INSTANCE_NO_COLON;",
    "right" : "rule = TimeZoneNumberRule.INSTANCE_NO_COLON;",
    "info" : "ExpressionStatement[10075-10119]:ExpressionStatement[10075-10119]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10143-10224]:Block[10143-10224]"
  }, {
    "left" : "rule = TimeZoneNumberRule.INSTANCE_COLON;",
    "right" : "rule = TimeZoneNumberRule.INSTANCE_COLON;",
    "info" : "ExpressionStatement[10165-10206]:ExpressionStatement[10165-10206]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[10241-10247]:BreakStatement[10241-10247]"
  }, {
    "left" : "case '\\'':",
    "right" : "case '\\'':",
    "info" : "SwitchCase[10260-10270]:SwitchCase[10260-10270]"
  }, {
    "left" : "String sub = token.substring(1);",
    "right" : "String sub = token.substring(1);",
    "info" : "VariableDeclarationStatement[10303-10335]:VariableDeclarationStatement[10303-10335]"
  }, {
    "left" : "if (sub.length() == 1)",
    "right" : "if (sub.length() == 1)",
    "info" : "IfStatement[10352-10534]:IfStatement[10352-10534]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10375-10458]:Block[10375-10458]"
  }, {
    "left" : "rule = new CharacterLiteral(sub.charAt(0));",
    "right" : "rule = new CharacterLiteral(sub.charAt(0));",
    "info" : "ExpressionStatement[10397-10440]:ExpressionStatement[10397-10440]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10464-10534]:Block[10464-10534]"
  }, {
    "left" : "rule = new StringLiteral(sub);",
    "right" : "rule = new StringLiteral(sub);",
    "info" : "ExpressionStatement[10486-10516]:ExpressionStatement[10486-10516]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[10551-10557]:BreakStatement[10551-10557]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[10570-10578]:SwitchCase[10570-10578]"
  }, {
    "left" : "throw new IllegalArgumentException(\"Illegal pattern component: \" + token);",
    "right" : "throw new IllegalArgumentException(\"Illegal pattern component: \" + token);",
    "info" : "ThrowStatement[10595-10669]:ThrowStatement[10595-10669]"
  }, {
    "left" : "rules.add(rule);",
    "right" : "rules.add(rule);",
    "info" : "ExpressionStatement[10697-10713]:ExpressionStatement[10697-10713]"
  }, {
    "left" : "return rules;",
    "right" : "return rules;",
    "info" : "ReturnStatement[10733-10746]:ReturnStatement[10733-10746]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[10931-10940]:Modifier[10931-10940]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[10941-10947]:SimpleType[10941-10947]"
  }, {
    "left" : "parseToken",
    "right" : "parseToken",
    "info" : "SimpleName[10948-10958]:SimpleName[10948-10958]"
  }, {
    "left" : "String pattern",
    "right" : "String pattern",
    "info" : "SingleVariableDeclaration[10959-10973]:SingleVariableDeclaration[10959-10973]"
  }, {
    "left" : "int[] indexRef",
    "right" : "int[] indexRef",
    "info" : "SingleVariableDeclaration[10975-10989]:SingleVariableDeclaration[10975-10989]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10991-12473]:Block[10991-12473]"
  }, {
    "left" : "StringBuilder buf = new StringBuilder();",
    "right" : "StringBuilder buf = new StringBuilder();",
    "info" : "VariableDeclarationStatement[11001-11041]:VariableDeclarationStatement[11001-11041]"
  }, {
    "left" : "int i = indexRef[0];",
    "right" : "int i = indexRef[0];",
    "info" : "VariableDeclarationStatement[11051-11071]:VariableDeclarationStatement[11051-11071]"
  }, {
    "left" : "int length = pattern.length();",
    "right" : "int length = pattern.length();",
    "info" : "VariableDeclarationStatement[11080-11110]:VariableDeclarationStatement[11080-11110]"
  }, {
    "left" : "char c = pattern.charAt(i);",
    "right" : "char c = pattern.charAt(i);",
    "info" : "VariableDeclarationStatement[11120-11147]:VariableDeclarationStatement[11120-11147]"
  }, {
    "left" : "if (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z')",
    "right" : "if (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z')",
    "info" : "IfStatement[11156-12410]:IfStatement[11156-12410]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11206-11606]:Block[11206-11606]"
  }, {
    "left" : "buf.append(c);",
    "right" : "buf.append(c);",
    "info" : "ExpressionStatement[11316-11330]:ExpressionStatement[11316-11330]"
  }, {
    "left" : "while (i + 1 < length)",
    "right" : "while (i + 1 < length)",
    "info" : "WhileStatement[11344-11596]:WhileStatement[11344-11596]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11367-11596]:Block[11367-11596]"
  }, {
    "left" : "char peek = pattern.charAt(i + 1);",
    "right" : "char peek = pattern.charAt(i + 1);",
    "info" : "VariableDeclarationStatement[11385-11419]:VariableDeclarationStatement[11385-11419]"
  }, {
    "left" : "if (peek == c)",
    "right" : "if (peek == c)",
    "info" : "IfStatement[11436-11582]:IfStatement[11436-11582]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11451-11530]:Block[11451-11530]"
  }, {
    "left" : "buf.append(c);",
    "right" : "buf.append(c);",
    "info" : "ExpressionStatement[11473-11487]:ExpressionStatement[11473-11487]"
  }, {
    "left" : "i++;",
    "right" : "i++;",
    "info" : "ExpressionStatement[11508-11512]:ExpressionStatement[11508-11512]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11536-11582]:Block[11536-11582]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[11558-11564]:BreakStatement[11558-11564]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11612-12410]:Block[11612-12410]"
  }, {
    "left" : "buf.append('\\'');",
    "right" : "buf.append('\\'');",
    "info" : "ExpressionStatement[11675-11692]:ExpressionStatement[11675-11692]"
  }, {
    "left" : "boolean inLiteral = false;",
    "right" : "boolean inLiteral = false;",
    "info" : "VariableDeclarationStatement[11706-11732]:VariableDeclarationStatement[11706-11732]"
  }, {
    "left" : "for (; i < length; i++)",
    "right" : "for (; i < length; i++)",
    "info" : "ForStatement[11746-12400]:ForStatement[11746-12400]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11770-12400]:Block[11770-12400]"
  }, {
    "left" : "c = pattern.charAt(i);",
    "right" : "c = pattern.charAt(i);",
    "info" : "ExpressionStatement[11788-11810]:ExpressionStatement[11788-11810]"
  }, {
    "left" : "if (c == '\\'')",
    "right" : "if (c == '\\'')",
    "info" : "IfStatement[11828-12386]:IfStatement[11828-12386]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11843-12158]:Block[11843-12158]"
  }, {
    "left" : "if (i + 1 < length && pattern.charAt(i + 1) == '\\'')",
    "right" : "if (i + 1 < length && pattern.charAt(i + 1) == '\\'')",
    "info" : "IfStatement[11865-12140]:IfStatement[11865-12140]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11918-12063]:Block[11918-12063]"
  }, {
    "left" : "i++;",
    "right" : "i++;",
    "info" : "ExpressionStatement[11998-12002]:ExpressionStatement[11998-12002]"
  }, {
    "left" : "buf.append(c);",
    "right" : "buf.append(c);",
    "info" : "ExpressionStatement[12027-12041]:ExpressionStatement[12027-12041]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12069-12140]:Block[12069-12140]"
  }, {
    "left" : "inLiteral = !inLiteral;",
    "right" : "inLiteral = !inLiteral;",
    "info" : "ExpressionStatement[12095-12118]:ExpressionStatement[12095-12118]"
  }, {
    "left" : "if (!inLiteral &&\n                         (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z'))",
    "right" : "if (!inLiteral &&\n                         (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z'))",
    "info" : "IfStatement[12164-12386]:IfStatement[12164-12386]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12255-12326]:Block[12255-12326]"
  }, {
    "left" : "i--;",
    "right" : "i--;",
    "info" : "ExpressionStatement[12277-12281]:ExpressionStatement[12277-12281]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[12302-12308]:BreakStatement[12302-12308]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12332-12386]:Block[12332-12386]"
  }, {
    "left" : "buf.append(c);",
    "right" : "buf.append(c);",
    "info" : "ExpressionStatement[12354-12368]:ExpressionStatement[12354-12368]"
  }, {
    "left" : "indexRef[0] = i;",
    "right" : "indexRef[0] = i;",
    "info" : "ExpressionStatement[12420-12436]:ExpressionStatement[12420-12436]"
  }, {
    "left" : "return buf.toString();",
    "right" : "return buf.toString();",
    "info" : "ReturnStatement[12445-12467]:ReturnStatement[12445-12467]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[12711-12720]:Modifier[12711-12720]"
  }, {
    "left" : "NumberRule",
    "right" : "NumberRule",
    "info" : "SimpleType[12721-12731]:SimpleType[12721-12731]"
  }, {
    "left" : "selectNumberRule",
    "right" : "selectNumberRule",
    "info" : "SimpleName[12732-12748]:SimpleName[12732-12748]"
  }, {
    "left" : "int field",
    "right" : "int field",
    "info" : "SingleVariableDeclaration[12749-12758]:SingleVariableDeclaration[12749-12758]"
  }, {
    "left" : "int padding",
    "right" : "int padding",
    "info" : "SingleVariableDeclaration[12760-12771]:SingleVariableDeclaration[12760-12771]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12773-13026]:Block[12773-13026]"
  }, {
    "left" : "switch (padding) {\n        case 1:\n            return new UnpaddedNumberField(field);\n        case 2:\n            return new TwoDigitNumberField(field);\n        default:\n            return new PaddedNumberField(field, padding);\n        }",
    "right" : "switch (padding) {\n        case 1:\n            return new UnpaddedNumberField(field);\n        case 2:\n            return new TwoDigitNumberField(field);\n        default:\n            return new PaddedNumberField(field, padding);\n        }",
    "info" : "SwitchStatement[12783-13020]:SwitchStatement[12783-13020]"
  }, {
    "left" : "case 1:",
    "right" : "case 1:",
    "info" : "SwitchCase[12810-12817]:SwitchCase[12810-12817]"
  }, {
    "left" : "return new UnpaddedNumberField(field);",
    "right" : "return new UnpaddedNumberField(field);",
    "info" : "ReturnStatement[12830-12868]:ReturnStatement[12830-12868]"
  }, {
    "left" : "case 2:",
    "right" : "case 2:",
    "info" : "SwitchCase[12877-12884]:SwitchCase[12877-12884]"
  }, {
    "left" : "return new TwoDigitNumberField(field);",
    "right" : "return new TwoDigitNumberField(field);",
    "info" : "ReturnStatement[12897-12935]:ReturnStatement[12897-12935]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[12944-12952]:SwitchCase[12944-12952]"
  }, {
    "left" : "return new PaddedNumberField(field, padding);",
    "right" : "return new PaddedNumberField(field, padding);",
    "info" : "ReturnStatement[12965-13010]:ReturnStatement[12965-13010]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[13424-13433]:MarkerAnnotation[13424-13433]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[13438-13444]:Modifier[13438-13444]"
  }, {
    "left" : "StringBuffer",
    "right" : "StringBuffer",
    "info" : "SimpleType[13445-13457]:SimpleType[13445-13457]"
  }, {
    "left" : "format",
    "right" : "format",
    "info" : "SimpleName[13458-13464]:SimpleName[13458-13464]"
  }, {
    "left" : "Object obj",
    "right" : "Object obj",
    "info" : "SingleVariableDeclaration[13465-13475]:SingleVariableDeclaration[13465-13475]"
  }, {
    "left" : "StringBuffer toAppendTo",
    "right" : "StringBuffer toAppendTo",
    "info" : "SingleVariableDeclaration[13477-13500]:SingleVariableDeclaration[13477-13500]"
  }, {
    "left" : "FieldPosition pos",
    "right" : "FieldPosition pos",
    "info" : "SingleVariableDeclaration[13502-13519]:SingleVariableDeclaration[13502-13519]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13521-13986]:Block[13521-13986]"
  }, {
    "left" : "if (obj instanceof Date)",
    "right" : "if (obj instanceof Date)",
    "info" : "IfStatement[13531-13980]:IfStatement[13531-13980]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13556-13618]:Block[13556-13618]"
  }, {
    "left" : "return format((Date) obj, toAppendTo);",
    "right" : "return format((Date) obj, toAppendTo);",
    "info" : "ReturnStatement[13570-13608]:ReturnStatement[13570-13608]"
  }, {
    "left" : "if (obj instanceof Calendar)",
    "right" : "if (obj instanceof Calendar)",
    "info" : "IfStatement[13624-13980]:IfStatement[13624-13980]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13653-13719]:Block[13653-13719]"
  }, {
    "left" : "return format((Calendar) obj, toAppendTo);",
    "right" : "return format((Calendar) obj, toAppendTo);",
    "info" : "ReturnStatement[13667-13709]:ReturnStatement[13667-13709]"
  }, {
    "left" : "if (obj instanceof Long)",
    "right" : "if (obj instanceof Long)",
    "info" : "IfStatement[13725-13980]:IfStatement[13725-13980]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13750-13826]:Block[13750-13826]"
  }, {
    "left" : "return format(((Long) obj).longValue(), toAppendTo);",
    "right" : "return format(((Long) obj).longValue(), toAppendTo);",
    "info" : "ReturnStatement[13764-13816]:ReturnStatement[13764-13816]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13832-13980]:Block[13832-13980]"
  }, {
    "left" : "throw new IllegalArgumentException(\"Unknown class: \" +\n                (obj == null ? \"<null>\" : obj.getClass().getName()));",
    "right" : "throw new IllegalArgumentException(\"Unknown class: \" +\n                (obj == null ? \"<null>\" : obj.getClass().getName()));",
    "info" : "ThrowStatement[13846-13970]:ThrowStatement[13846-13970]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[14088-14097]:MarkerAnnotation[14088-14097]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[14102-14108]:Modifier[14102-14108]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[14109-14115]:SimpleType[14109-14115]"
  }, {
    "left" : "format",
    "right" : "format",
    "info" : "SimpleName[14116-14122]:SimpleName[14116-14122]"
  }, {
    "left" : "long millis",
    "right" : "long millis",
    "info" : "SingleVariableDeclaration[14123-14134]:SingleVariableDeclaration[14123-14134]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14136-14184]:Block[14136-14184]"
  }, {
    "left" : "return format(new Date(millis));",
    "right" : "return format(new Date(millis));",
    "info" : "ReturnStatement[14146-14178]:ReturnStatement[14146-14178]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[14296-14305]:MarkerAnnotation[14296-14305]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[14310-14316]:Modifier[14310-14316]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[14317-14323]:SimpleType[14317-14323]"
  }, {
    "left" : "format",
    "right" : "format",
    "info" : "SimpleName[14324-14330]:SimpleName[14324-14330]"
  }, {
    "left" : "Date date",
    "right" : "Date date",
    "info" : "SingleVariableDeclaration[14331-14340]:SingleVariableDeclaration[14331-14340]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14342-14549]:Block[14342-14549]"
  }, {
    "left" : "Calendar c = new GregorianCalendar(mTimeZone, mLocale);",
    "right" : "Calendar c = new GregorianCalendar(mTimeZone, mLocale);",
    "info" : "VariableDeclarationStatement[14352-14407]:VariableDeclarationStatement[14352-14407]"
  }, {
    "left" : "c.setTime(date);",
    "right" : "c.setTime(date);",
    "info" : "ExpressionStatement[14448-14464]:ExpressionStatement[14448-14464]"
  }, {
    "left" : "return applyRules(c, new StringBuffer(mMaxLengthEstimate)).toString();",
    "right" : "return applyRules(c, new StringBuffer(mMaxLengthEstimate)).toString();",
    "info" : "ReturnStatement[14473-14543]:ReturnStatement[14473-14543]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[14665-14674]:MarkerAnnotation[14665-14674]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[14679-14685]:Modifier[14679-14685]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[14686-14692]:SimpleType[14686-14692]"
  }, {
    "left" : "format",
    "right" : "format",
    "info" : "SimpleName[14693-14699]:SimpleName[14693-14699]"
  }, {
    "left" : "Calendar calendar",
    "right" : "Calendar calendar",
    "info" : "SingleVariableDeclaration[14700-14717]:SingleVariableDeclaration[14700-14717]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14719-14808]:Block[14719-14808]"
  }, {
    "left" : "return format(calendar, new StringBuffer(mMaxLengthEstimate)).toString();",
    "right" : "return format(calendar, new StringBuffer(mMaxLengthEstimate)).toString();",
    "info" : "ReturnStatement[14729-14802]:ReturnStatement[14729-14802]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[14934-14943]:MarkerAnnotation[14934-14943]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[14948-14954]:Modifier[14948-14954]"
  }, {
    "left" : "StringBuffer",
    "right" : "StringBuffer",
    "info" : "SimpleType[14955-14967]:SimpleType[14955-14967]"
  }, {
    "left" : "format",
    "right" : "format",
    "info" : "SimpleName[14968-14974]:SimpleName[14968-14974]"
  }, {
    "left" : "long millis",
    "right" : "long millis",
    "info" : "SingleVariableDeclaration[14975-14986]:SingleVariableDeclaration[14975-14986]"
  }, {
    "left" : "StringBuffer buf",
    "right" : "StringBuffer buf",
    "info" : "SingleVariableDeclaration[14988-15004]:SingleVariableDeclaration[14988-15004]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15006-15059]:Block[15006-15059]"
  }, {
    "left" : "return format(new Date(millis), buf);",
    "right" : "return format(new Date(millis), buf);",
    "info" : "ReturnStatement[15016-15053]:ReturnStatement[15016-15053]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[15195-15204]:MarkerAnnotation[15195-15204]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[15209-15215]:Modifier[15209-15215]"
  }, {
    "left" : "StringBuffer",
    "right" : "StringBuffer",
    "info" : "SimpleType[15216-15228]:SimpleType[15216-15228]"
  }, {
    "left" : "format",
    "right" : "format",
    "info" : "SimpleName[15229-15235]:SimpleName[15229-15235]"
  }, {
    "left" : "Date date",
    "right" : "Date date",
    "info" : "SingleVariableDeclaration[15236-15245]:SingleVariableDeclaration[15236-15245]"
  }, {
    "left" : "StringBuffer buf",
    "right" : "StringBuffer buf",
    "info" : "SingleVariableDeclaration[15247-15263]:SingleVariableDeclaration[15247-15263]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15265-15428]:Block[15265-15428]"
  }, {
    "left" : "Calendar c = new GregorianCalendar(mTimeZone, mLocale);",
    "right" : "Calendar c = new GregorianCalendar(mTimeZone, mLocale);",
    "info" : "VariableDeclarationStatement[15275-15330]:VariableDeclarationStatement[15275-15330]"
  }, {
    "left" : "c.setTime(date);",
    "right" : "c.setTime(date);",
    "info" : "ExpressionStatement[15371-15387]:ExpressionStatement[15371-15387]"
  }, {
    "left" : "return applyRules(c, buf);",
    "right" : "return applyRules(c, buf);",
    "info" : "ReturnStatement[15396-15422]:ReturnStatement[15396-15422]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[15568-15577]:MarkerAnnotation[15568-15577]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[15582-15588]:Modifier[15582-15588]"
  }, {
    "left" : "StringBuffer",
    "right" : "StringBuffer",
    "info" : "SimpleType[15589-15601]:SimpleType[15589-15601]"
  }, {
    "left" : "format",
    "right" : "format",
    "info" : "SimpleName[15602-15608]:SimpleName[15602-15608]"
  }, {
    "left" : "Calendar calendar",
    "right" : "Calendar calendar",
    "info" : "SingleVariableDeclaration[15609-15626]:SingleVariableDeclaration[15609-15626]"
  }, {
    "left" : "StringBuffer buf",
    "right" : "StringBuffer buf",
    "info" : "SingleVariableDeclaration[15628-15644]:SingleVariableDeclaration[15628-15644]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15646-15695]:Block[15646-15695]"
  }, {
    "left" : "return applyRules(calendar, buf);",
    "right" : "return applyRules(calendar, buf);",
    "info" : "ReturnStatement[15656-15689]:ReturnStatement[15656-15689]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[15953-15962]:Modifier[15953-15962]"
  }, {
    "left" : "StringBuffer",
    "right" : "StringBuffer",
    "info" : "SimpleType[15963-15975]:SimpleType[15963-15975]"
  }, {
    "left" : "applyRules",
    "right" : "applyRules",
    "info" : "SimpleName[15976-15986]:SimpleName[15976-15986]"
  }, {
    "left" : "Calendar calendar",
    "right" : "Calendar calendar",
    "info" : "SingleVariableDeclaration[15987-16004]:SingleVariableDeclaration[15987-16004]"
  }, {
    "left" : "StringBuffer buf",
    "right" : "StringBuffer buf",
    "info" : "SingleVariableDeclaration[16006-16022]:SingleVariableDeclaration[16006-16022]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16024-16138]:Block[16024-16138]"
  }, {
    "left" : "for (Rule rule : mRules)",
    "right" : "for (Rule rule : mRules)",
    "info" : "EnhancedForStatement[16034-16112]:EnhancedForStatement[16034-16112]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16059-16112]:Block[16059-16112]"
  }, {
    "left" : "rule.appendTo(buf, calendar);",
    "right" : "rule.appendTo(buf, calendar);",
    "info" : "ExpressionStatement[16073-16102]:ExpressionStatement[16073-16102]"
  }, {
    "left" : "return buf;",
    "right" : "return buf;",
    "info" : "ReturnStatement[16121-16132]:ReturnStatement[16121-16132]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[16335-16344]:MarkerAnnotation[16335-16344]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[16349-16355]:Modifier[16349-16355]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[16356-16362]:SimpleType[16356-16362]"
  }, {
    "left" : "getPattern",
    "right" : "getPattern",
    "info" : "SimpleName[16363-16373]:SimpleName[16363-16373]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16376-16408]:Block[16376-16408]"
  }, {
    "left" : "return mPattern;",
    "right" : "return mPattern;",
    "info" : "ReturnStatement[16386-16402]:ReturnStatement[16386-16402]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[16511-16520]:MarkerAnnotation[16511-16520]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[16525-16531]:Modifier[16525-16531]"
  }, {
    "left" : "TimeZone",
    "right" : "TimeZone",
    "info" : "SimpleType[16532-16540]:SimpleType[16532-16540]"
  }, {
    "left" : "getTimeZone",
    "right" : "getTimeZone",
    "info" : "SimpleName[16541-16552]:SimpleName[16541-16552]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16555-16588]:Block[16555-16588]"
  }, {
    "left" : "return mTimeZone;",
    "right" : "return mTimeZone;",
    "info" : "ReturnStatement[16565-16582]:ReturnStatement[16565-16582]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[16689-16698]:MarkerAnnotation[16689-16698]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[16703-16709]:Modifier[16703-16709]"
  }, {
    "left" : "Locale",
    "right" : "Locale",
    "info" : "SimpleType[16710-16716]:SimpleType[16710-16716]"
  }, {
    "left" : "getLocale",
    "right" : "getLocale",
    "info" : "SimpleName[16717-16726]:SimpleName[16717-16726]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16729-16760]:Block[16729-16760]"
  }, {
    "left" : "return mLocale;",
    "right" : "return mLocale;",
    "info" : "ReturnStatement[16739-16754]:ReturnStatement[16739-16754]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[17047-17053]:Modifier[17047-17053]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[17054-17057]:PrimitiveType[17054-17057]"
  }, {
    "left" : "getMaxLengthEstimate",
    "right" : "getMaxLengthEstimate",
    "info" : "SimpleName[17058-17078]:SimpleName[17058-17078]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17081-17123]:Block[17081-17123]"
  }, {
    "left" : "return mMaxLengthEstimate;",
    "right" : "return mMaxLengthEstimate;",
    "info" : "ReturnStatement[17091-17117]:ReturnStatement[17091-17117]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[17374-17383]:MarkerAnnotation[17374-17383]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[17388-17394]:Modifier[17388-17394]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[17395-17402]:PrimitiveType[17395-17402]"
  }, {
    "left" : "equals",
    "right" : "equals",
    "info" : "SimpleName[17403-17409]:SimpleName[17403-17409]"
  }, {
    "left" : "Object obj",
    "right" : "Object obj",
    "info" : "SingleVariableDeclaration[17410-17420]:SingleVariableDeclaration[17410-17420]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17422-17718]:Block[17422-17718]"
  }, {
    "left" : "if (obj instanceof FastDatePrinter == false)",
    "right" : "if (obj instanceof FastDatePrinter == false)",
    "info" : "IfStatement[17432-17514]:IfStatement[17432-17514]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17477-17514]:Block[17477-17514]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[17491-17504]:ReturnStatement[17491-17504]"
  }, {
    "left" : "FastDatePrinter other = (FastDatePrinter) obj;",
    "right" : "FastDatePrinter other = (FastDatePrinter) obj;",
    "info" : "VariableDeclarationStatement[17523-17569]:VariableDeclarationStatement[17523-17569]"
  }, {
    "left" : "return mPattern.equals(other.mPattern)\n            && mTimeZone.equals(other.mTimeZone) \n            && mLocale.equals(other.mLocale);",
    "right" : "return mPattern.equals(other.mPattern)\n            && mTimeZone.equals(other.mTimeZone) \n            && mLocale.equals(other.mLocale);",
    "info" : "ReturnStatement[17578-17712]:ReturnStatement[17578-17712]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[17853-17862]:MarkerAnnotation[17853-17862]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[17867-17873]:Modifier[17867-17873]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[17874-17877]:PrimitiveType[17874-17877]"
  }, {
    "left" : "hashCode",
    "right" : "hashCode",
    "info" : "SimpleName[17878-17886]:SimpleName[17878-17886]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17889-17988]:Block[17889-17988]"
  }, {
    "left" : "return mPattern.hashCode() + 13 * (mTimeZone.hashCode() + 13 * mLocale.hashCode());",
    "right" : "return mPattern.hashCode() + 13 * (mTimeZone.hashCode() + 13 * mLocale.hashCode());",
    "info" : "ReturnStatement[17899-17982]:ReturnStatement[17899-17982]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[18116-18125]:MarkerAnnotation[18116-18125]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[18130-18136]:Modifier[18130-18136]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[18137-18143]:SimpleType[18137-18143]"
  }, {
    "left" : "toString",
    "right" : "toString",
    "info" : "SimpleName[18144-18152]:SimpleName[18144-18152]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18155-18256]:Block[18155-18256]"
  }, {
    "left" : "return \"FastDatePrinter[\" + mPattern + \",\" + mLocale + \",\" + mTimeZone.getID() + \"]\";",
    "right" : "return \"FastDatePrinter[\" + mPattern + \",\" + mLocale + \",\" + mTimeZone.getID() + \"]\";",
    "info" : "ReturnStatement[18165-18250]:ReturnStatement[18165-18250]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[18693-18700]:Modifier[18693-18700]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[18701-18705]:PrimitiveType[18701-18705]"
  }, {
    "left" : "readObject",
    "right" : "readObject",
    "info" : "SimpleName[18706-18716]:SimpleName[18706-18716]"
  }, {
    "left" : "ObjectInputStream in",
    "right" : "ObjectInputStream in",
    "info" : "SingleVariableDeclaration[18717-18737]:SingleVariableDeclaration[18717-18737]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[18746-18757]:SimpleType[18746-18757]"
  }, {
    "left" : "ClassNotFoundException",
    "right" : "ClassNotFoundException",
    "info" : "SimpleType[18759-18781]:SimpleType[18759-18781]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18782-18837]:Block[18782-18837]"
  }, {
    "left" : "in.defaultReadObject();",
    "right" : "in.defaultReadObject();",
    "info" : "ExpressionStatement[18792-18815]:ExpressionStatement[18792-18815]"
  }, {
    "left" : "init();",
    "right" : "init();",
    "info" : "ExpressionStatement[18824-18831]:ExpressionStatement[18824-18831]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[18993-19000]:Modifier[18993-19000]"
  }, {
    "left" : "interface",
    "right" : "interface",
    "info" : "TYPE_DECLARATION_KIND[19001-19010]:TYPE_DECLARATION_KIND[19001-19010]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[19156-19159]:PrimitiveType[19156-19159]"
  }, {
    "left" : "estimateLength",
    "right" : "estimateLength",
    "info" : "SimpleName[19160-19174]:SimpleName[19160-19174]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[19426-19430]:PrimitiveType[19426-19430]"
  }, {
    "left" : "appendTo",
    "right" : "appendTo",
    "info" : "SimpleName[19431-19439]:SimpleName[19431-19439]"
  }, {
    "left" : "StringBuffer buffer",
    "right" : "StringBuffer buffer",
    "info" : "SingleVariableDeclaration[19440-19459]:SingleVariableDeclaration[19440-19459]"
  }, {
    "left" : "Calendar calendar",
    "right" : "Calendar calendar",
    "info" : "SingleVariableDeclaration[19461-19478]:SingleVariableDeclaration[19461-19478]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[19559-19566]:Modifier[19559-19566]"
  }, {
    "left" : "interface",
    "right" : "interface",
    "info" : "TYPE_DECLARATION_KIND[19567-19576]:TYPE_DECLARATION_KIND[19567-19576]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[19832-19836]:PrimitiveType[19832-19836]"
  }, {
    "left" : "appendTo",
    "right" : "appendTo",
    "info" : "SimpleName[19837-19845]:SimpleName[19837-19845]"
  }, {
    "left" : "StringBuffer buffer",
    "right" : "StringBuffer buffer",
    "info" : "SingleVariableDeclaration[19846-19865]:SingleVariableDeclaration[19846-19865]"
  }, {
    "left" : "int value",
    "right" : "int value",
    "info" : "SingleVariableDeclaration[19867-19876]:SingleVariableDeclaration[19867-19876]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[19971-19978]:Modifier[19971-19978]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[19979-19985]:Modifier[19979-19985]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[19986-19991]:TYPE_DECLARATION_KIND[19986-19991]"
  }, {
    "left" : "CharacterLiteral",
    "right" : "CharacterLiteral",
    "info" : "SimpleName[20257-20273]:SimpleName[20257-20273]"
  }, {
    "left" : "char value",
    "right" : "char value",
    "info" : "SingleVariableDeclaration[20274-20284]:SingleVariableDeclaration[20274-20284]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20286-20325]:Block[20286-20325]"
  }, {
    "left" : "mValue = value;",
    "right" : "mValue = value;",
    "info" : "ExpressionStatement[20300-20315]:ExpressionStatement[20300-20315]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[20384-20393]:MarkerAnnotation[20384-20393]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[20402-20408]:Modifier[20402-20408]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[20409-20412]:PrimitiveType[20409-20412]"
  }, {
    "left" : "estimateLength",
    "right" : "estimateLength",
    "info" : "SimpleName[20413-20427]:SimpleName[20413-20427]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20430-20463]:Block[20430-20463]"
  }, {
    "left" : "return 1;",
    "right" : "return 1;",
    "info" : "ReturnStatement[20444-20453]:ReturnStatement[20444-20453]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[20522-20531]:MarkerAnnotation[20522-20531]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[20540-20546]:Modifier[20540-20546]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[20547-20551]:PrimitiveType[20547-20551]"
  }, {
    "left" : "appendTo",
    "right" : "appendTo",
    "info" : "SimpleName[20552-20560]:SimpleName[20552-20560]"
  }, {
    "left" : "StringBuffer buffer",
    "right" : "StringBuffer buffer",
    "info" : "SingleVariableDeclaration[20561-20580]:SingleVariableDeclaration[20561-20580]"
  }, {
    "left" : "Calendar calendar",
    "right" : "Calendar calendar",
    "info" : "SingleVariableDeclaration[20582-20599]:SingleVariableDeclaration[20582-20599]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20601-20647]:Block[20601-20647]"
  }, {
    "left" : "buffer.append(mValue);",
    "right" : "buffer.append(mValue);",
    "info" : "ExpressionStatement[20615-20637]:ExpressionStatement[20615-20637]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[20730-20737]:Modifier[20730-20737]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[20738-20744]:Modifier[20738-20744]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[20745-20750]:TYPE_DECLARATION_KIND[20745-20750]"
  }, {
    "left" : "StringLiteral",
    "right" : "StringLiteral",
    "info" : "SimpleName[21009-21022]:SimpleName[21009-21022]"
  }, {
    "left" : "String value",
    "right" : "String value",
    "info" : "SingleVariableDeclaration[21023-21035]:SingleVariableDeclaration[21023-21035]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21037-21076]:Block[21037-21076]"
  }, {
    "left" : "mValue = value;",
    "right" : "mValue = value;",
    "info" : "ExpressionStatement[21051-21066]:ExpressionStatement[21051-21066]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[21135-21144]:MarkerAnnotation[21135-21144]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[21153-21159]:Modifier[21153-21159]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[21160-21163]:PrimitiveType[21160-21163]"
  }, {
    "left" : "estimateLength",
    "right" : "estimateLength",
    "info" : "SimpleName[21164-21178]:SimpleName[21164-21178]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21181-21228]:Block[21181-21228]"
  }, {
    "left" : "return mValue.length();",
    "right" : "return mValue.length();",
    "info" : "ReturnStatement[21195-21218]:ReturnStatement[21195-21218]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[21287-21296]:MarkerAnnotation[21287-21296]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[21305-21311]:Modifier[21305-21311]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[21312-21316]:PrimitiveType[21312-21316]"
  }, {
    "left" : "appendTo",
    "right" : "appendTo",
    "info" : "SimpleName[21317-21325]:SimpleName[21317-21325]"
  }, {
    "left" : "StringBuffer buffer",
    "right" : "StringBuffer buffer",
    "info" : "SingleVariableDeclaration[21326-21345]:SingleVariableDeclaration[21326-21345]"
  }, {
    "left" : "Calendar calendar",
    "right" : "Calendar calendar",
    "info" : "SingleVariableDeclaration[21347-21364]:SingleVariableDeclaration[21347-21364]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21366-21412]:Block[21366-21412]"
  }, {
    "left" : "buffer.append(mValue);",
    "right" : "buffer.append(mValue);",
    "info" : "ExpressionStatement[21380-21402]:ExpressionStatement[21380-21402]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[21500-21507]:Modifier[21500-21507]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[21508-21514]:Modifier[21508-21514]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[21515-21520]:TYPE_DECLARATION_KIND[21515-21520]"
  }, {
    "left" : "TextField",
    "right" : "TextField",
    "info" : "SimpleName[21846-21855]:SimpleName[21846-21855]"
  }, {
    "left" : "int field",
    "right" : "int field",
    "info" : "SingleVariableDeclaration[21856-21865]:SingleVariableDeclaration[21856-21865]"
  }, {
    "left" : "String[] values",
    "right" : "String[] values",
    "info" : "SingleVariableDeclaration[21867-21882]:SingleVariableDeclaration[21867-21882]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21884-21953]:Block[21884-21953]"
  }, {
    "left" : "mField = field;",
    "right" : "mField = field;",
    "info" : "ExpressionStatement[21898-21913]:ExpressionStatement[21898-21913]"
  }, {
    "left" : "mValues = values;",
    "right" : "mValues = values;",
    "info" : "ExpressionStatement[21926-21943]:ExpressionStatement[21926-21943]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[22012-22021]:MarkerAnnotation[22012-22021]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[22030-22036]:Modifier[22030-22036]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[22037-22040]:PrimitiveType[22037-22040]"
  }, {
    "left" : "estimateLength",
    "right" : "estimateLength",
    "info" : "SimpleName[22041-22055]:SimpleName[22041-22055]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22058-22314]:Block[22058-22314]"
  }, {
    "left" : "int max = 0;",
    "right" : "int max = 0;",
    "info" : "VariableDeclarationStatement[22072-22084]:VariableDeclarationStatement[22072-22084]"
  }, {
    "left" : "for (int i=mValues.length; --i >= 0)",
    "right" : "for (int i=mValues.length; --i >= 0)",
    "info" : "ForStatement[22097-22280]:ForStatement[22097-22280]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22136-22280]:Block[22136-22280]"
  }, {
    "left" : "int len = mValues[i].length();",
    "right" : "int len = mValues[i].length();",
    "info" : "VariableDeclarationStatement[22154-22184]:VariableDeclarationStatement[22154-22184]"
  }, {
    "left" : "if (len > max)",
    "right" : "if (len > max)",
    "info" : "IfStatement[22201-22266]:IfStatement[22201-22266]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22216-22266]:Block[22216-22266]"
  }, {
    "left" : "max = len;",
    "right" : "max = len;",
    "info" : "ExpressionStatement[22238-22248]:ExpressionStatement[22238-22248]"
  }, {
    "left" : "return max;",
    "right" : "return max;",
    "info" : "ReturnStatement[22293-22304]:ReturnStatement[22293-22304]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[22373-22382]:MarkerAnnotation[22373-22382]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[22391-22397]:Modifier[22391-22397]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[22398-22402]:PrimitiveType[22398-22402]"
  }, {
    "left" : "appendTo",
    "right" : "appendTo",
    "info" : "SimpleName[22403-22411]:SimpleName[22403-22411]"
  }, {
    "left" : "StringBuffer buffer",
    "right" : "StringBuffer buffer",
    "info" : "SingleVariableDeclaration[22412-22431]:SingleVariableDeclaration[22412-22431]"
  }, {
    "left" : "Calendar calendar",
    "right" : "Calendar calendar",
    "info" : "SingleVariableDeclaration[22433-22450]:SingleVariableDeclaration[22433-22450]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22452-22521]:Block[22452-22521]"
  }, {
    "left" : "buffer.append(mValues[calendar.get(mField)]);",
    "right" : "buffer.append(mValues[calendar.get(mField)]);",
    "info" : "ExpressionStatement[22466-22511]:ExpressionStatement[22466-22511]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[22605-22612]:Modifier[22605-22612]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[22613-22619]:Modifier[22613-22619]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[22620-22625]:TYPE_DECLARATION_KIND[22620-22625]"
  }, {
    "left" : "UnpaddedNumberField",
    "right" : "UnpaddedNumberField",
    "info" : "SimpleName[22872-22891]:SimpleName[22872-22891]"
  }, {
    "left" : "int field",
    "right" : "int field",
    "info" : "SingleVariableDeclaration[22892-22901]:SingleVariableDeclaration[22892-22901]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22903-22942]:Block[22903-22942]"
  }, {
    "left" : "mField = field;",
    "right" : "mField = field;",
    "info" : "ExpressionStatement[22917-22932]:ExpressionStatement[22917-22932]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[23001-23010]:MarkerAnnotation[23001-23010]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[23019-23025]:Modifier[23019-23025]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[23026-23029]:PrimitiveType[23026-23029]"
  }, {
    "left" : "estimateLength",
    "right" : "estimateLength",
    "info" : "SimpleName[23030-23044]:SimpleName[23030-23044]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23047-23080]:Block[23047-23080]"
  }, {
    "left" : "return 4;",
    "right" : "return 4;",
    "info" : "ReturnStatement[23061-23070]:ReturnStatement[23061-23070]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[23139-23148]:MarkerAnnotation[23139-23148]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[23157-23163]:Modifier[23157-23163]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[23164-23168]:PrimitiveType[23164-23168]"
  }, {
    "left" : "appendTo",
    "right" : "appendTo",
    "info" : "SimpleName[23169-23177]:SimpleName[23169-23177]"
  }, {
    "left" : "StringBuffer buffer",
    "right" : "StringBuffer buffer",
    "info" : "SingleVariableDeclaration[23178-23197]:SingleVariableDeclaration[23178-23197]"
  }, {
    "left" : "Calendar calendar",
    "right" : "Calendar calendar",
    "info" : "SingleVariableDeclaration[23199-23216]:SingleVariableDeclaration[23199-23216]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23218-23281]:Block[23218-23281]"
  }, {
    "left" : "appendTo(buffer, calendar.get(mField));",
    "right" : "appendTo(buffer, calendar.get(mField));",
    "info" : "ExpressionStatement[23232-23271]:ExpressionStatement[23232-23271]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[23340-23349]:MarkerAnnotation[23340-23349]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[23358-23364]:Modifier[23358-23364]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[23365-23370]:Modifier[23365-23370]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[23371-23375]:PrimitiveType[23371-23375]"
  }, {
    "left" : "appendTo",
    "right" : "appendTo",
    "info" : "SimpleName[23376-23384]:SimpleName[23376-23384]"
  }, {
    "left" : "StringBuffer buffer",
    "right" : "StringBuffer buffer",
    "info" : "SingleVariableDeclaration[23385-23404]:SingleVariableDeclaration[23385-23404]"
  }, {
    "left" : "int value",
    "right" : "int value",
    "info" : "SingleVariableDeclaration[23406-23415]:SingleVariableDeclaration[23406-23415]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23417-23753]:Block[23417-23753]"
  }, {
    "left" : "if (value < 10)",
    "right" : "if (value < 10)",
    "info" : "IfStatement[23431-23743]:IfStatement[23431-23743]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23447-23514]:Block[23447-23514]"
  }, {
    "left" : "buffer.append((char)(value + '0'));",
    "right" : "buffer.append((char)(value + '0'));",
    "info" : "ExpressionStatement[23465-23500]:ExpressionStatement[23465-23500]"
  }, {
    "left" : "if (value < 100)",
    "right" : "if (value < 100)",
    "info" : "IfStatement[23520-23743]:IfStatement[23520-23743]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23537-23666]:Block[23537-23666]"
  }, {
    "left" : "buffer.append((char)(value / 10 + '0'));",
    "right" : "buffer.append((char)(value / 10 + '0'));",
    "info" : "ExpressionStatement[23555-23595]:ExpressionStatement[23555-23595]"
  }, {
    "left" : "buffer.append((char)(value % 10 + '0'));",
    "right" : "buffer.append((char)(value % 10 + '0'));",
    "info" : "ExpressionStatement[23612-23652]:ExpressionStatement[23612-23652]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23672-23743]:Block[23672-23743]"
  }, {
    "left" : "buffer.append(Integer.toString(value));",
    "right" : "buffer.append(Integer.toString(value));",
    "info" : "ExpressionStatement[23690-23729]:ExpressionStatement[23690-23729]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[23836-23843]:Modifier[23836-23843]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[23844-23850]:Modifier[23844-23850]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[23851-23856]:TYPE_DECLARATION_KIND[23851-23856]"
  }, {
    "left" : "UnpaddedMonthField",
    "right" : "UnpaddedMonthField",
    "info" : "SimpleName[24086-24104]:SimpleName[24086-24104]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24107-24139]:Block[24107-24139]"
  }, {
    "left" : "super();",
    "right" : "super();",
    "info" : "SuperConstructorInvocation[24121-24129]:SuperConstructorInvocation[24121-24129]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[24198-24207]:MarkerAnnotation[24198-24207]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[24216-24222]:Modifier[24216-24222]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[24223-24226]:PrimitiveType[24223-24226]"
  }, {
    "left" : "estimateLength",
    "right" : "estimateLength",
    "info" : "SimpleName[24227-24241]:SimpleName[24227-24241]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24244-24277]:Block[24244-24277]"
  }, {
    "left" : "return 2;",
    "right" : "return 2;",
    "info" : "ReturnStatement[24258-24267]:ReturnStatement[24258-24267]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[24336-24345]:MarkerAnnotation[24336-24345]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[24354-24360]:Modifier[24354-24360]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[24361-24365]:PrimitiveType[24361-24365]"
  }, {
    "left" : "appendTo",
    "right" : "appendTo",
    "info" : "SimpleName[24366-24374]:SimpleName[24366-24374]"
  }, {
    "left" : "StringBuffer buffer",
    "right" : "StringBuffer buffer",
    "info" : "SingleVariableDeclaration[24375-24394]:SingleVariableDeclaration[24375-24394]"
  }, {
    "left" : "Calendar calendar",
    "right" : "Calendar calendar",
    "info" : "SingleVariableDeclaration[24396-24413]:SingleVariableDeclaration[24396-24413]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24415-24490]:Block[24415-24490]"
  }, {
    "left" : "appendTo(buffer, calendar.get(Calendar.MONTH) + 1);",
    "right" : "appendTo(buffer, calendar.get(Calendar.MONTH) + 1);",
    "info" : "ExpressionStatement[24429-24480]:ExpressionStatement[24429-24480]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[24549-24558]:MarkerAnnotation[24549-24558]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[24567-24573]:Modifier[24567-24573]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[24574-24579]:Modifier[24574-24579]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[24580-24584]:PrimitiveType[24580-24584]"
  }, {
    "left" : "appendTo",
    "right" : "appendTo",
    "info" : "SimpleName[24585-24593]:SimpleName[24585-24593]"
  }, {
    "left" : "StringBuffer buffer",
    "right" : "StringBuffer buffer",
    "info" : "SingleVariableDeclaration[24594-24613]:SingleVariableDeclaration[24594-24613]"
  }, {
    "left" : "int value",
    "right" : "int value",
    "info" : "SingleVariableDeclaration[24615-24624]:SingleVariableDeclaration[24615-24624]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24626-24868]:Block[24626-24868]"
  }, {
    "left" : "if (value < 10)",
    "right" : "if (value < 10)",
    "info" : "IfStatement[24640-24858]:IfStatement[24640-24858]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24656-24723]:Block[24656-24723]"
  }, {
    "left" : "buffer.append((char)(value + '0'));",
    "right" : "buffer.append((char)(value + '0'));",
    "info" : "ExpressionStatement[24674-24709]:ExpressionStatement[24674-24709]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24729-24858]:Block[24729-24858]"
  }, {
    "left" : "buffer.append((char)(value / 10 + '0'));",
    "right" : "buffer.append((char)(value / 10 + '0'));",
    "info" : "ExpressionStatement[24747-24787]:ExpressionStatement[24747-24787]"
  }, {
    "left" : "buffer.append((char)(value % 10 + '0'));",
    "right" : "buffer.append((char)(value % 10 + '0'));",
    "info" : "ExpressionStatement[24804-24844]:ExpressionStatement[24804-24844]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[24949-24956]:Modifier[24949-24956]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[24957-24963]:Modifier[24957-24963]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[24964-24969]:TYPE_DECLARATION_KIND[24964-24969]"
  }, {
    "left" : "PaddedNumberField",
    "right" : "PaddedNumberField",
    "info" : "SimpleName[25269-25286]:SimpleName[25269-25286]"
  }, {
    "left" : "int field",
    "right" : "int field",
    "info" : "SingleVariableDeclaration[25287-25296]:SingleVariableDeclaration[25287-25296]"
  }, {
    "left" : "int size",
    "right" : "int size",
    "info" : "SingleVariableDeclaration[25298-25306]:SingleVariableDeclaration[25298-25306]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25308-25543]:Block[25308-25543]"
  }, {
    "left" : "if (size < 3)",
    "right" : "if (size < 3)",
    "info" : "IfStatement[25322-25479]:IfStatement[25322-25479]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25336-25479]:Block[25336-25479]"
  }, {
    "left" : "throw new IllegalArgumentException();",
    "right" : "throw new IllegalArgumentException();",
    "info" : "ThrowStatement[25428-25465]:ThrowStatement[25428-25465]"
  }, {
    "left" : "mField = field;",
    "right" : "mField = field;",
    "info" : "ExpressionStatement[25492-25507]:ExpressionStatement[25492-25507]"
  }, {
    "left" : "mSize = size;",
    "right" : "mSize = size;",
    "info" : "ExpressionStatement[25520-25533]:ExpressionStatement[25520-25533]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[25602-25611]:MarkerAnnotation[25602-25611]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[25620-25626]:Modifier[25620-25626]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[25627-25630]:PrimitiveType[25627-25630]"
  }, {
    "left" : "estimateLength",
    "right" : "estimateLength",
    "info" : "SimpleName[25631-25645]:SimpleName[25631-25645]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25648-25681]:Block[25648-25681]"
  }, {
    "left" : "return 4;",
    "right" : "return 4;",
    "info" : "ReturnStatement[25662-25671]:ReturnStatement[25662-25671]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[25740-25749]:MarkerAnnotation[25740-25749]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[25758-25764]:Modifier[25758-25764]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[25765-25769]:PrimitiveType[25765-25769]"
  }, {
    "left" : "appendTo",
    "right" : "appendTo",
    "info" : "SimpleName[25770-25778]:SimpleName[25770-25778]"
  }, {
    "left" : "StringBuffer buffer",
    "right" : "StringBuffer buffer",
    "info" : "SingleVariableDeclaration[25779-25798]:SingleVariableDeclaration[25779-25798]"
  }, {
    "left" : "Calendar calendar",
    "right" : "Calendar calendar",
    "info" : "SingleVariableDeclaration[25800-25817]:SingleVariableDeclaration[25800-25817]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25819-25882]:Block[25819-25882]"
  }, {
    "left" : "appendTo(buffer, calendar.get(mField));",
    "right" : "appendTo(buffer, calendar.get(mField));",
    "info" : "ExpressionStatement[25833-25872]:ExpressionStatement[25833-25872]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[25941-25950]:MarkerAnnotation[25941-25950]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[25959-25965]:Modifier[25959-25965]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[25966-25971]:Modifier[25966-25971]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[25972-25976]:PrimitiveType[25972-25976]"
  }, {
    "left" : "appendTo",
    "right" : "appendTo",
    "info" : "SimpleName[25977-25985]:SimpleName[25977-25985]"
  }, {
    "left" : "StringBuffer buffer",
    "right" : "StringBuffer buffer",
    "info" : "SingleVariableDeclaration[25986-26005]:SingleVariableDeclaration[25986-26005]"
  }, {
    "left" : "int value",
    "right" : "int value",
    "info" : "SingleVariableDeclaration[26007-26016]:SingleVariableDeclaration[26007-26016]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26018-26786]:Block[26018-26786]"
  }, {
    "left" : "if (value < 100)",
    "right" : "if (value < 100)",
    "info" : "IfStatement[26032-26776]:IfStatement[26032-26776]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26049-26286]:Block[26049-26286]"
  }, {
    "left" : "for (int i = mSize; --i >= 2)",
    "right" : "for (int i = mSize; --i >= 2)",
    "info" : "ForStatement[26067-26158]:ForStatement[26067-26158]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26099-26158]:Block[26099-26158]"
  }, {
    "left" : "buffer.append('0');",
    "right" : "buffer.append('0');",
    "info" : "ExpressionStatement[26121-26140]:ExpressionStatement[26121-26140]"
  }, {
    "left" : "buffer.append((char)(value / 10 + '0'));",
    "right" : "buffer.append((char)(value / 10 + '0'));",
    "info" : "ExpressionStatement[26175-26215]:ExpressionStatement[26175-26215]"
  }, {
    "left" : "buffer.append((char)(value % 10 + '0'));",
    "right" : "buffer.append((char)(value % 10 + '0'));",
    "info" : "ExpressionStatement[26232-26272]:ExpressionStatement[26232-26272]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26292-26776]:Block[26292-26776]"
  }, {
    "left" : "int digits;",
    "right" : "int digits;",
    "info" : "VariableDeclarationStatement[26310-26321]:VariableDeclarationStatement[26310-26321]"
  }, {
    "left" : "if (value < 1000)",
    "right" : "if (value < 1000)",
    "info" : "IfStatement[26338-26593]:IfStatement[26338-26593]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26356-26407]:Block[26356-26407]"
  }, {
    "left" : "digits = 3;",
    "right" : "digits = 3;",
    "info" : "ExpressionStatement[26378-26389]:ExpressionStatement[26378-26389]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26413-26593]:Block[26413-26593]"
  }, {
    "left" : "Validate.isTrue(value > -1, \"Negative values should not be possible\", value);",
    "right" : "Validate.isTrue(value > -1, \"Negative values should not be possible\", value);",
    "info" : "ExpressionStatement[26435-26512]:ExpressionStatement[26435-26512]"
  }, {
    "left" : "digits = Integer.toString(value).length();",
    "right" : "digits = Integer.toString(value).length();",
    "info" : "ExpressionStatement[26533-26575]:ExpressionStatement[26533-26575]"
  }, {
    "left" : "for (int i = mSize; --i >= digits)",
    "right" : "for (int i = mSize; --i >= digits)",
    "info" : "ForStatement[26610-26706]:ForStatement[26610-26706]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26647-26706]:Block[26647-26706]"
  }, {
    "left" : "buffer.append('0');",
    "right" : "buffer.append('0');",
    "info" : "ExpressionStatement[26669-26688]:ExpressionStatement[26669-26688]"
  }, {
    "left" : "buffer.append(Integer.toString(value));",
    "right" : "buffer.append(Integer.toString(value));",
    "info" : "ExpressionStatement[26723-26762]:ExpressionStatement[26723-26762]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[26870-26877]:Modifier[26870-26877]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[26878-26884]:Modifier[26878-26884]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[26885-26890]:TYPE_DECLARATION_KIND[26885-26890]"
  }, {
    "left" : "TwoDigitNumberField",
    "right" : "TwoDigitNumberField",
    "info" : "SimpleName[27138-27157]:SimpleName[27138-27157]"
  }, {
    "left" : "int field",
    "right" : "int field",
    "info" : "SingleVariableDeclaration[27158-27167]:SingleVariableDeclaration[27158-27167]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27169-27208]:Block[27169-27208]"
  }, {
    "left" : "mField = field;",
    "right" : "mField = field;",
    "info" : "ExpressionStatement[27183-27198]:ExpressionStatement[27183-27198]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[27267-27276]:MarkerAnnotation[27267-27276]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[27285-27291]:Modifier[27285-27291]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[27292-27295]:PrimitiveType[27292-27295]"
  }, {
    "left" : "estimateLength",
    "right" : "estimateLength",
    "info" : "SimpleName[27296-27310]:SimpleName[27296-27310]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27313-27346]:Block[27313-27346]"
  }, {
    "left" : "return 2;",
    "right" : "return 2;",
    "info" : "ReturnStatement[27327-27336]:ReturnStatement[27327-27336]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[27405-27414]:MarkerAnnotation[27405-27414]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[27423-27429]:Modifier[27423-27429]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[27430-27434]:PrimitiveType[27430-27434]"
  }, {
    "left" : "appendTo",
    "right" : "appendTo",
    "info" : "SimpleName[27435-27443]:SimpleName[27435-27443]"
  }, {
    "left" : "StringBuffer buffer",
    "right" : "StringBuffer buffer",
    "info" : "SingleVariableDeclaration[27444-27463]:SingleVariableDeclaration[27444-27463]"
  }, {
    "left" : "Calendar calendar",
    "right" : "Calendar calendar",
    "info" : "SingleVariableDeclaration[27465-27482]:SingleVariableDeclaration[27465-27482]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27484-27547]:Block[27484-27547]"
  }, {
    "left" : "appendTo(buffer, calendar.get(mField));",
    "right" : "appendTo(buffer, calendar.get(mField));",
    "info" : "ExpressionStatement[27498-27537]:ExpressionStatement[27498-27537]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[27606-27615]:MarkerAnnotation[27606-27615]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[27624-27630]:Modifier[27624-27630]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[27631-27636]:Modifier[27631-27636]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[27637-27641]:PrimitiveType[27637-27641]"
  }, {
    "left" : "appendTo",
    "right" : "appendTo",
    "info" : "SimpleName[27642-27650]:SimpleName[27642-27650]"
  }, {
    "left" : "StringBuffer buffer",
    "right" : "StringBuffer buffer",
    "info" : "SingleVariableDeclaration[27651-27670]:SingleVariableDeclaration[27651-27670]"
  }, {
    "left" : "int value",
    "right" : "int value",
    "info" : "SingleVariableDeclaration[27672-27681]:SingleVariableDeclaration[27672-27681]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27683-27930]:Block[27683-27930]"
  }, {
    "left" : "if (value < 100)",
    "right" : "if (value < 100)",
    "info" : "IfStatement[27697-27920]:IfStatement[27697-27920]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27714-27843]:Block[27714-27843]"
  }, {
    "left" : "buffer.append((char)(value / 10 + '0'));",
    "right" : "buffer.append((char)(value / 10 + '0'));",
    "info" : "ExpressionStatement[27732-27772]:ExpressionStatement[27732-27772]"
  }, {
    "left" : "buffer.append((char)(value % 10 + '0'));",
    "right" : "buffer.append((char)(value % 10 + '0'));",
    "info" : "ExpressionStatement[27789-27829]:ExpressionStatement[27789-27829]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27849-27920]:Block[27849-27920]"
  }, {
    "left" : "buffer.append(Integer.toString(value));",
    "right" : "buffer.append(Integer.toString(value));",
    "info" : "ExpressionStatement[27867-27906]:ExpressionStatement[27867-27906]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[28012-28019]:Modifier[28012-28019]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[28020-28026]:Modifier[28020-28026]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[28027-28032]:TYPE_DECLARATION_KIND[28027-28032]"
  }, {
    "left" : "TwoDigitYearField",
    "right" : "TwoDigitYearField",
    "info" : "SimpleName[28247-28264]:SimpleName[28247-28264]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28267-28299]:Block[28267-28299]"
  }, {
    "left" : "super();",
    "right" : "super();",
    "info" : "SuperConstructorInvocation[28281-28289]:SuperConstructorInvocation[28281-28289]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[28358-28367]:MarkerAnnotation[28358-28367]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[28376-28382]:Modifier[28376-28382]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[28383-28386]:PrimitiveType[28383-28386]"
  }, {
    "left" : "estimateLength",
    "right" : "estimateLength",
    "info" : "SimpleName[28387-28401]:SimpleName[28387-28401]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28404-28437]:Block[28404-28437]"
  }, {
    "left" : "return 2;",
    "right" : "return 2;",
    "info" : "ReturnStatement[28418-28427]:ReturnStatement[28418-28427]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[28496-28505]:MarkerAnnotation[28496-28505]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[28514-28520]:Modifier[28514-28520]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[28521-28525]:PrimitiveType[28521-28525]"
  }, {
    "left" : "appendTo",
    "right" : "appendTo",
    "info" : "SimpleName[28526-28534]:SimpleName[28526-28534]"
  }, {
    "left" : "StringBuffer buffer",
    "right" : "StringBuffer buffer",
    "info" : "SingleVariableDeclaration[28535-28554]:SingleVariableDeclaration[28535-28554]"
  }, {
    "left" : "Calendar calendar",
    "right" : "Calendar calendar",
    "info" : "SingleVariableDeclaration[28556-28573]:SingleVariableDeclaration[28556-28573]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28575-28651]:Block[28575-28651]"
  }, {
    "left" : "appendTo(buffer, calendar.get(Calendar.YEAR) % 100);",
    "right" : "appendTo(buffer, calendar.get(Calendar.YEAR) % 100);",
    "info" : "ExpressionStatement[28589-28641]:ExpressionStatement[28589-28641]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[28710-28719]:MarkerAnnotation[28710-28719]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[28728-28734]:Modifier[28728-28734]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[28735-28740]:Modifier[28735-28740]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[28741-28745]:PrimitiveType[28741-28745]"
  }, {
    "left" : "appendTo",
    "right" : "appendTo",
    "info" : "SimpleName[28746-28754]:SimpleName[28746-28754]"
  }, {
    "left" : "StringBuffer buffer",
    "right" : "StringBuffer buffer",
    "info" : "SingleVariableDeclaration[28755-28774]:SingleVariableDeclaration[28755-28774]"
  }, {
    "left" : "int value",
    "right" : "int value",
    "info" : "SingleVariableDeclaration[28776-28785]:SingleVariableDeclaration[28776-28785]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28787-28904]:Block[28787-28904]"
  }, {
    "left" : "buffer.append((char)(value / 10 + '0'));",
    "right" : "buffer.append((char)(value / 10 + '0'));",
    "info" : "ExpressionStatement[28801-28841]:ExpressionStatement[28801-28841]"
  }, {
    "left" : "buffer.append((char)(value % 10 + '0'));",
    "right" : "buffer.append((char)(value % 10 + '0'));",
    "info" : "ExpressionStatement[28854-28894]:ExpressionStatement[28854-28894]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[28987-28994]:Modifier[28987-28994]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[28995-29001]:Modifier[28995-29001]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[29002-29007]:TYPE_DECLARATION_KIND[29002-29007]"
  }, {
    "left" : "TwoDigitMonthField",
    "right" : "TwoDigitMonthField",
    "info" : "SimpleName[29226-29244]:SimpleName[29226-29244]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29247-29279]:Block[29247-29279]"
  }, {
    "left" : "super();",
    "right" : "super();",
    "info" : "SuperConstructorInvocation[29261-29269]:SuperConstructorInvocation[29261-29269]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[29338-29347]:MarkerAnnotation[29338-29347]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[29356-29362]:Modifier[29356-29362]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[29363-29366]:PrimitiveType[29363-29366]"
  }, {
    "left" : "estimateLength",
    "right" : "estimateLength",
    "info" : "SimpleName[29367-29381]:SimpleName[29367-29381]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29384-29417]:Block[29384-29417]"
  }, {
    "left" : "return 2;",
    "right" : "return 2;",
    "info" : "ReturnStatement[29398-29407]:ReturnStatement[29398-29407]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[29476-29485]:MarkerAnnotation[29476-29485]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[29494-29500]:Modifier[29494-29500]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[29501-29505]:PrimitiveType[29501-29505]"
  }, {
    "left" : "appendTo",
    "right" : "appendTo",
    "info" : "SimpleName[29506-29514]:SimpleName[29506-29514]"
  }, {
    "left" : "StringBuffer buffer",
    "right" : "StringBuffer buffer",
    "info" : "SingleVariableDeclaration[29515-29534]:SingleVariableDeclaration[29515-29534]"
  }, {
    "left" : "Calendar calendar",
    "right" : "Calendar calendar",
    "info" : "SingleVariableDeclaration[29536-29553]:SingleVariableDeclaration[29536-29553]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29555-29630]:Block[29555-29630]"
  }, {
    "left" : "appendTo(buffer, calendar.get(Calendar.MONTH) + 1);",
    "right" : "appendTo(buffer, calendar.get(Calendar.MONTH) + 1);",
    "info" : "ExpressionStatement[29569-29620]:ExpressionStatement[29569-29620]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[29689-29698]:MarkerAnnotation[29689-29698]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[29707-29713]:Modifier[29707-29713]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[29714-29719]:Modifier[29714-29719]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[29720-29724]:PrimitiveType[29720-29724]"
  }, {
    "left" : "appendTo",
    "right" : "appendTo",
    "info" : "SimpleName[29725-29733]:SimpleName[29725-29733]"
  }, {
    "left" : "StringBuffer buffer",
    "right" : "StringBuffer buffer",
    "info" : "SingleVariableDeclaration[29734-29753]:SingleVariableDeclaration[29734-29753]"
  }, {
    "left" : "int value",
    "right" : "int value",
    "info" : "SingleVariableDeclaration[29755-29764]:SingleVariableDeclaration[29755-29764]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29766-29883]:Block[29766-29883]"
  }, {
    "left" : "buffer.append((char)(value / 10 + '0'));",
    "right" : "buffer.append((char)(value / 10 + '0'));",
    "info" : "ExpressionStatement[29780-29820]:ExpressionStatement[29780-29820]"
  }, {
    "left" : "buffer.append((char)(value % 10 + '0'));",
    "right" : "buffer.append((char)(value % 10 + '0'));",
    "info" : "ExpressionStatement[29833-29873]:ExpressionStatement[29833-29873]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[29970-29977]:Modifier[29970-29977]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[29978-29984]:Modifier[29978-29984]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[29985-29990]:TYPE_DECLARATION_KIND[29985-29990]"
  }, {
    "left" : "TwelveHourField",
    "right" : "TwelveHourField",
    "info" : "SimpleName[30258-30273]:SimpleName[30258-30273]"
  }, {
    "left" : "NumberRule rule",
    "right" : "NumberRule rule",
    "info" : "SingleVariableDeclaration[30274-30289]:SingleVariableDeclaration[30274-30289]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30291-30328]:Block[30291-30328]"
  }, {
    "left" : "mRule = rule;",
    "right" : "mRule = rule;",
    "info" : "ExpressionStatement[30305-30318]:ExpressionStatement[30305-30318]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[30387-30396]:MarkerAnnotation[30387-30396]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[30405-30411]:Modifier[30405-30411]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[30412-30415]:PrimitiveType[30412-30415]"
  }, {
    "left" : "estimateLength",
    "right" : "estimateLength",
    "info" : "SimpleName[30416-30430]:SimpleName[30416-30430]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30433-30487]:Block[30433-30487]"
  }, {
    "left" : "return mRule.estimateLength();",
    "right" : "return mRule.estimateLength();",
    "info" : "ReturnStatement[30447-30477]:ReturnStatement[30447-30477]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[30546-30555]:MarkerAnnotation[30546-30555]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[30564-30570]:Modifier[30564-30570]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[30571-30575]:PrimitiveType[30571-30575]"
  }, {
    "left" : "appendTo",
    "right" : "appendTo",
    "info" : "SimpleName[30576-30584]:SimpleName[30576-30584]"
  }, {
    "left" : "StringBuffer buffer",
    "right" : "StringBuffer buffer",
    "info" : "SingleVariableDeclaration[30585-30604]:SingleVariableDeclaration[30585-30604]"
  }, {
    "left" : "Calendar calendar",
    "right" : "Calendar calendar",
    "info" : "SingleVariableDeclaration[30606-30623]:SingleVariableDeclaration[30606-30623]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30625-30845]:Block[30625-30845]"
  }, {
    "left" : "int value = calendar.get(Calendar.HOUR);",
    "right" : "int value = calendar.get(Calendar.HOUR);",
    "info" : "VariableDeclarationStatement[30639-30679]:VariableDeclarationStatement[30639-30679]"
  }, {
    "left" : "if (value == 0)",
    "right" : "if (value == 0)",
    "info" : "IfStatement[30692-30792]:IfStatement[30692-30792]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30708-30792]:Block[30708-30792]"
  }, {
    "left" : "value = calendar.getLeastMaximum(Calendar.HOUR) + 1;",
    "right" : "value = calendar.getLeastMaximum(Calendar.HOUR) + 1;",
    "info" : "ExpressionStatement[30726-30778]:ExpressionStatement[30726-30778]"
  }, {
    "left" : "mRule.appendTo(buffer, value);",
    "right" : "mRule.appendTo(buffer, value);",
    "info" : "ExpressionStatement[30805-30835]:ExpressionStatement[30805-30835]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[30904-30913]:MarkerAnnotation[30904-30913]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[30922-30928]:Modifier[30922-30928]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[30929-30933]:PrimitiveType[30929-30933]"
  }, {
    "left" : "appendTo",
    "right" : "appendTo",
    "info" : "SimpleName[30934-30942]:SimpleName[30934-30942]"
  }, {
    "left" : "StringBuffer buffer",
    "right" : "StringBuffer buffer",
    "info" : "SingleVariableDeclaration[30943-30962]:SingleVariableDeclaration[30943-30962]"
  }, {
    "left" : "int value",
    "right" : "int value",
    "info" : "SingleVariableDeclaration[30964-30973]:SingleVariableDeclaration[30964-30973]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30975-31029]:Block[30975-31029]"
  }, {
    "left" : "mRule.appendTo(buffer, value);",
    "right" : "mRule.appendTo(buffer, value);",
    "info" : "ExpressionStatement[30989-31019]:ExpressionStatement[30989-31019]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[31121-31128]:Modifier[31121-31128]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[31129-31135]:Modifier[31129-31135]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[31136-31141]:TYPE_DECLARATION_KIND[31136-31141]"
  }, {
    "left" : "TwentyFourHourField",
    "right" : "TwentyFourHourField",
    "info" : "SimpleName[31417-31436]:SimpleName[31417-31436]"
  }, {
    "left" : "NumberRule rule",
    "right" : "NumberRule rule",
    "info" : "SingleVariableDeclaration[31437-31452]:SingleVariableDeclaration[31437-31452]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31454-31491]:Block[31454-31491]"
  }, {
    "left" : "mRule = rule;",
    "right" : "mRule = rule;",
    "info" : "ExpressionStatement[31468-31481]:ExpressionStatement[31468-31481]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[31550-31559]:MarkerAnnotation[31550-31559]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[31568-31574]:Modifier[31568-31574]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[31575-31578]:PrimitiveType[31575-31578]"
  }, {
    "left" : "estimateLength",
    "right" : "estimateLength",
    "info" : "SimpleName[31579-31593]:SimpleName[31579-31593]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31596-31650]:Block[31596-31650]"
  }, {
    "left" : "return mRule.estimateLength();",
    "right" : "return mRule.estimateLength();",
    "info" : "ReturnStatement[31610-31640]:ReturnStatement[31610-31640]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[31709-31718]:MarkerAnnotation[31709-31718]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[31727-31733]:Modifier[31727-31733]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[31734-31738]:PrimitiveType[31734-31738]"
  }, {
    "left" : "appendTo",
    "right" : "appendTo",
    "info" : "SimpleName[31739-31747]:SimpleName[31739-31747]"
  }, {
    "left" : "StringBuffer buffer",
    "right" : "StringBuffer buffer",
    "info" : "SingleVariableDeclaration[31748-31767]:SingleVariableDeclaration[31748-31767]"
  }, {
    "left" : "Calendar calendar",
    "right" : "Calendar calendar",
    "info" : "SingleVariableDeclaration[31769-31786]:SingleVariableDeclaration[31769-31786]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31788-32017]:Block[31788-32017]"
  }, {
    "left" : "int value = calendar.get(Calendar.HOUR_OF_DAY);",
    "right" : "int value = calendar.get(Calendar.HOUR_OF_DAY);",
    "info" : "VariableDeclarationStatement[31802-31849]:VariableDeclarationStatement[31802-31849]"
  }, {
    "left" : "if (value == 0)",
    "right" : "if (value == 0)",
    "info" : "IfStatement[31862-31964]:IfStatement[31862-31964]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31878-31964]:Block[31878-31964]"
  }, {
    "left" : "value = calendar.getMaximum(Calendar.HOUR_OF_DAY) + 1;",
    "right" : "value = calendar.getMaximum(Calendar.HOUR_OF_DAY) + 1;",
    "info" : "ExpressionStatement[31896-31950]:ExpressionStatement[31896-31950]"
  }, {
    "left" : "mRule.appendTo(buffer, value);",
    "right" : "mRule.appendTo(buffer, value);",
    "info" : "ExpressionStatement[31977-32007]:ExpressionStatement[31977-32007]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[32076-32085]:MarkerAnnotation[32076-32085]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[32094-32100]:Modifier[32094-32100]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[32101-32105]:PrimitiveType[32101-32105]"
  }, {
    "left" : "appendTo",
    "right" : "appendTo",
    "info" : "SimpleName[32106-32114]:SimpleName[32106-32114]"
  }, {
    "left" : "StringBuffer buffer",
    "right" : "StringBuffer buffer",
    "info" : "SingleVariableDeclaration[32115-32134]:SingleVariableDeclaration[32115-32134]"
  }, {
    "left" : "int value",
    "right" : "int value",
    "info" : "SingleVariableDeclaration[32136-32145]:SingleVariableDeclaration[32136-32145]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32147-32201]:Block[32147-32201]"
  }, {
    "left" : "mRule.appendTo(buffer, value);",
    "right" : "mRule.appendTo(buffer, value);",
    "info" : "ExpressionStatement[32161-32191]:ExpressionStatement[32161-32191]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[32800-32806]:Modifier[32800-32806]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[32807-32813]:SimpleType[32807-32813]"
  }, {
    "left" : "getTimeZoneDisplay",
    "right" : "getTimeZoneDisplay",
    "info" : "SimpleName[32814-32832]:SimpleName[32814-32832]"
  }, {
    "left" : "TimeZone tz",
    "right" : "TimeZone tz",
    "info" : "SingleVariableDeclaration[32833-32844]:SingleVariableDeclaration[32833-32844]"
  }, {
    "left" : "boolean daylight",
    "right" : "boolean daylight",
    "info" : "SingleVariableDeclaration[32846-32862]:SingleVariableDeclaration[32846-32862]"
  }, {
    "left" : "int style",
    "right" : "int style",
    "info" : "SingleVariableDeclaration[32864-32873]:SingleVariableDeclaration[32864-32873]"
  }, {
    "left" : "Locale locale",
    "right" : "Locale locale",
    "info" : "SingleVariableDeclaration[32875-32888]:SingleVariableDeclaration[32875-32888]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32890-33377]:Block[32890-33377]"
  }, {
    "left" : "TimeZoneDisplayKey key = new TimeZoneDisplayKey(tz, daylight, style, locale);",
    "right" : "TimeZoneDisplayKey key = new TimeZoneDisplayKey(tz, daylight, style, locale);",
    "info" : "VariableDeclarationStatement[32900-32977]:VariableDeclarationStatement[32900-32977]"
  }, {
    "left" : "String value = cTimeZoneDisplayCache.get(key);",
    "right" : "String value = cTimeZoneDisplayCache.get(key);",
    "info" : "VariableDeclarationStatement[32986-33032]:VariableDeclarationStatement[32986-33032]"
  }, {
    "left" : "if (value == null)",
    "right" : "if (value == null)",
    "info" : "IfStatement[33041-33349]:IfStatement[33041-33349]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33060-33349]:Block[33060-33349]"
  }, {
    "left" : "value = tz.getDisplayName(daylight, style, locale);",
    "right" : "value = tz.getDisplayName(daylight, style, locale);",
    "info" : "ExpressionStatement[33137-33188]:ExpressionStatement[33137-33188]"
  }, {
    "left" : "String prior = cTimeZoneDisplayCache.putIfAbsent(key, value);",
    "right" : "String prior = cTimeZoneDisplayCache.putIfAbsent(key, value);",
    "info" : "VariableDeclarationStatement[33201-33262]:VariableDeclarationStatement[33201-33262]"
  }, {
    "left" : "if (prior != null)",
    "right" : "if (prior != null)",
    "info" : "IfStatement[33275-33339]:IfStatement[33275-33339]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33294-33339]:Block[33294-33339]"
  }, {
    "left" : "value= prior;",
    "right" : "value= prior;",
    "info" : "ExpressionStatement[33312-33325]:ExpressionStatement[33312-33325]"
  }, {
    "left" : "return value;",
    "right" : "return value;",
    "info" : "ReturnStatement[33358-33371]:ReturnStatement[33358-33371]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[33453-33460]:Modifier[33453-33460]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[33461-33467]:Modifier[33461-33467]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[33468-33473]:TYPE_DECLARATION_KIND[33468-33473]"
  }, {
    "left" : "TimeZone",
    "right" : "TimeZone",
    "info" : "SimpleType[33603-33611]:SimpleType[34718-34726]"
  }, {
    "left" : "zone",
    "right" : "zone = calendar.getTimeZone()",
    "info" : "VariableDeclarationFragment[33612-33616]:VariableDeclarationFragment[34727-34756]"
  }, {
    "left" : "TimeZoneNameRule",
    "right" : "TimeZoneNameRule",
    "info" : "SimpleName[33946-33962]:SimpleName[33909-33925]"
  }, {
    "left" : "TimeZone timeZone",
    "right" : "TimeZone timeZone",
    "info" : "SingleVariableDeclaration[33963-33980]:SingleVariableDeclaration[33926-33943]"
  }, {
    "left" : "Locale locale",
    "right" : "Locale locale",
    "info" : "SingleVariableDeclaration[33982-33995]:SingleVariableDeclaration[33945-33958]"
  }, {
    "left" : "int style",
    "right" : "int style",
    "info" : "SingleVariableDeclaration[33997-34006]:SingleVariableDeclaration[33960-33969]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34008-34270]:Block[33971-34204]"
  }, {
    "left" : "mLocale = locale;",
    "right" : "mLocale = locale;",
    "info" : "ExpressionStatement[34022-34039]:ExpressionStatement[33985-34002]"
  }, {
    "left" : "mStyle = style;",
    "right" : "mStyle = style;",
    "info" : "ExpressionStatement[34052-34067]:ExpressionStatement[34015-34030]"
  }, {
    "left" : "mStandard = getTimeZoneDisplay(timeZone, false, style, locale);",
    "right" : "mStandard = getTimeZoneDisplay(timeZone, false, style, locale);",
    "info" : "ExpressionStatement[34122-34185]:ExpressionStatement[34056-34119]"
  }, {
    "left" : "mDaylight = getTimeZoneDisplay(timeZone, true, style, locale);",
    "right" : "mDaylight = getTimeZoneDisplay(timeZone, true, style, locale);",
    "info" : "ExpressionStatement[34198-34260]:ExpressionStatement[34132-34194]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[34329-34338]:MarkerAnnotation[34263-34272]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[34347-34353]:Modifier[34281-34287]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[34354-34357]:PrimitiveType[34288-34291]"
  }, {
    "left" : "estimateLength",
    "right" : "estimateLength",
    "info" : "SimpleName[34358-34372]:SimpleName[34292-34306]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34375-34632]:Block[34309-34566]"
  }, {
    "left" : "return Math.max(mStandard.length(), mDaylight.length());",
    "right" : "return Math.max(mStandard.length(), mDaylight.length());",
    "info" : "ReturnStatement[34566-34622]:ReturnStatement[34500-34556]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[34691-34700]:MarkerAnnotation[34625-34634]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[34709-34715]:Modifier[34643-34649]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[34716-34720]:PrimitiveType[34650-34654]"
  }, {
    "left" : "appendTo",
    "right" : "appendTo",
    "info" : "SimpleName[34721-34729]:SimpleName[34655-34663]"
  }, {
    "left" : "StringBuffer buffer",
    "right" : "StringBuffer buffer",
    "info" : "SingleVariableDeclaration[34730-34749]:SingleVariableDeclaration[34664-34683]"
  }, {
    "left" : "Calendar calendar",
    "right" : "Calendar calendar",
    "info" : "SingleVariableDeclaration[34751-34768]:SingleVariableDeclaration[34685-34702]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34770-35081]:Block[34704-35067]"
  }, {
    "left" : "if (zone.useDaylightTime()\n                    && calendar.get(Calendar.DST_OFFSET) != 0)",
    "right" : "if (zone.useDaylightTime()\n                    && calendar.get(Calendar.DST_OFFSET) != 0)",
    "info" : "IfStatement[34784-35071]:IfStatement[34770-35057]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34874-34969]:Block[34860-34955]"
  }, {
    "left" : "buffer.append(getTimeZoneDisplay(zone, true, mStyle, mLocale));",
    "right" : "buffer.append(getTimeZoneDisplay(zone, true, mStyle, mLocale));",
    "info" : "ExpressionStatement[34892-34955]:ExpressionStatement[34878-34941]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34975-35071]:Block[34961-35057]"
  }, {
    "left" : "buffer.append(getTimeZoneDisplay(zone, false, mStyle, mLocale));",
    "right" : "buffer.append(getTimeZoneDisplay(zone, false, mStyle, mLocale));",
    "info" : "ExpressionStatement[34993-35057]:ExpressionStatement[34979-35043]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[35213-35220]:Modifier[35199-35206]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[35221-35227]:Modifier[35207-35213]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[35228-35233]:TYPE_DECLARATION_KIND[35214-35219]"
  }, {
    "left" : "TimeZoneNumberRule",
    "right" : "TimeZoneNumberRule",
    "info" : "SimpleName[35701-35719]:SimpleName[35687-35705]"
  }, {
    "left" : "boolean colon",
    "right" : "boolean colon",
    "info" : "SingleVariableDeclaration[35720-35733]:SingleVariableDeclaration[35706-35719]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35735-35774]:Block[35721-35760]"
  }, {
    "left" : "mColon = colon;",
    "right" : "mColon = colon;",
    "info" : "ExpressionStatement[35749-35764]:ExpressionStatement[35735-35750]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[35833-35842]:MarkerAnnotation[35819-35828]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[35851-35857]:Modifier[35837-35843]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[35858-35861]:PrimitiveType[35844-35847]"
  }, {
    "left" : "estimateLength",
    "right" : "estimateLength",
    "info" : "SimpleName[35862-35876]:SimpleName[35848-35862]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35879-35912]:Block[35865-35898]"
  }, {
    "left" : "return 5;",
    "right" : "return 5;",
    "info" : "ReturnStatement[35893-35902]:ReturnStatement[35879-35888]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[35971-35980]:MarkerAnnotation[35957-35966]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[35989-35995]:Modifier[35975-35981]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[35996-36000]:PrimitiveType[35982-35986]"
  }, {
    "left" : "appendTo",
    "right" : "appendTo",
    "info" : "SimpleName[36001-36009]:SimpleName[35987-35995]"
  }, {
    "left" : "StringBuffer buffer",
    "right" : "StringBuffer buffer",
    "info" : "SingleVariableDeclaration[36010-36029]:SingleVariableDeclaration[35996-36015]"
  }, {
    "left" : "Calendar calendar",
    "right" : "Calendar calendar",
    "info" : "SingleVariableDeclaration[36031-36048]:SingleVariableDeclaration[36017-36034]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36050-36737]:Block[36036-36723]"
  }, {
    "left" : "int offset = calendar.get(Calendar.ZONE_OFFSET) + calendar.get(Calendar.DST_OFFSET);",
    "right" : "int offset = calendar.get(Calendar.ZONE_OFFSET) + calendar.get(Calendar.DST_OFFSET);",
    "info" : "VariableDeclarationStatement[36064-36148]:VariableDeclarationStatement[36050-36134]"
  }, {
    "left" : "if (offset < 0)",
    "right" : "if (offset < 0)",
    "info" : "IfStatement[36162-36320]:IfStatement[36148-36306]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36178-36263]:Block[36164-36249]"
  }, {
    "left" : "buffer.append('-');",
    "right" : "buffer.append('-');",
    "info" : "ExpressionStatement[36196-36215]:ExpressionStatement[36182-36201]"
  }, {
    "left" : "offset = -offset;",
    "right" : "offset = -offset;",
    "info" : "ExpressionStatement[36232-36249]:ExpressionStatement[36218-36235]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36269-36320]:Block[36255-36306]"
  }, {
    "left" : "buffer.append('+');",
    "right" : "buffer.append('+');",
    "info" : "ExpressionStatement[36287-36306]:ExpressionStatement[36273-36292]"
  }, {
    "left" : "int hours = offset / (60 * 60 * 1000);",
    "right" : "int hours = offset / (60 * 60 * 1000);",
    "info" : "VariableDeclarationStatement[36334-36372]:VariableDeclarationStatement[36320-36358]"
  }, {
    "left" : "buffer.append((char)(hours / 10 + '0'));",
    "right" : "buffer.append((char)(hours / 10 + '0'));",
    "info" : "ExpressionStatement[36385-36425]:ExpressionStatement[36371-36411]"
  }, {
    "left" : "buffer.append((char)(hours % 10 + '0'));",
    "right" : "buffer.append((char)(hours % 10 + '0'));",
    "info" : "ExpressionStatement[36438-36478]:ExpressionStatement[36424-36464]"
  }, {
    "left" : "if (mColon)",
    "right" : "if (mColon)",
    "info" : "IfStatement[36492-36555]:IfStatement[36478-36541]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36504-36555]:Block[36490-36541]"
  }, {
    "left" : "buffer.append(':');",
    "right" : "buffer.append(':');",
    "info" : "ExpressionStatement[36522-36541]:ExpressionStatement[36508-36527]"
  }, {
    "left" : "int minutes = offset / (60 * 1000) - 60 * hours;",
    "right" : "int minutes = offset / (60 * 1000) - 60 * hours;",
    "info" : "VariableDeclarationStatement[36569-36617]:VariableDeclarationStatement[36555-36603]"
  }, {
    "left" : "buffer.append((char)(minutes / 10 + '0'));",
    "right" : "buffer.append((char)(minutes / 10 + '0'));",
    "info" : "ExpressionStatement[36630-36672]:ExpressionStatement[36616-36658]"
  }, {
    "left" : "buffer.append((char)(minutes % 10 + '0'));",
    "right" : "buffer.append((char)(minutes % 10 + '0'));",
    "info" : "ExpressionStatement[36685-36727]:ExpressionStatement[36671-36713]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[36918-36925]:Modifier[36904-36911]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[36926-36932]:Modifier[36912-36918]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[36933-36938]:TYPE_DECLARATION_KIND[36919-36924]"
  }, {
    "left" : "TimeZoneDisplayKey",
    "right" : "TimeZoneDisplayKey",
    "info" : "SimpleName[37427-37445]:SimpleName[37413-37431]"
  }, {
    "left" : "TimeZone timeZone",
    "right" : "TimeZone timeZone",
    "info" : "SingleVariableDeclaration[37446-37463]:SingleVariableDeclaration[37432-37449]"
  }, {
    "left" : "boolean daylight",
    "right" : "boolean daylight",
    "info" : "SingleVariableDeclaration[37492-37508]:SingleVariableDeclaration[37478-37494]"
  }, {
    "left" : "int style",
    "right" : "int style",
    "info" : "SingleVariableDeclaration[37510-37519]:SingleVariableDeclaration[37496-37505]"
  }, {
    "left" : "Locale locale",
    "right" : "Locale locale",
    "info" : "SingleVariableDeclaration[37521-37534]:SingleVariableDeclaration[37507-37520]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37536-37718]:Block[37522-37704]"
  }, {
    "left" : "mTimeZone = timeZone;",
    "right" : "mTimeZone = timeZone;",
    "info" : "ExpressionStatement[37550-37571]:ExpressionStatement[37536-37557]"
  }, {
    "left" : "if (daylight)",
    "right" : "if (daylight)",
    "info" : "IfStatement[37584-37650]:IfStatement[37570-37636]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37598-37650]:Block[37584-37636]"
  }, {
    "left" : "style |= 0x80000000;",
    "right" : "style |= 0x80000000;",
    "info" : "ExpressionStatement[37616-37636]:ExpressionStatement[37602-37622]"
  }, {
    "left" : "mStyle = style;",
    "right" : "mStyle = style;",
    "info" : "ExpressionStatement[37663-37678]:ExpressionStatement[37649-37664]"
  }, {
    "left" : "mLocale = locale;",
    "right" : "mLocale = locale;",
    "info" : "ExpressionStatement[37691-37708]:ExpressionStatement[37677-37694]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[37777-37786]:MarkerAnnotation[37763-37772]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[37795-37801]:Modifier[37781-37787]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[37802-37805]:PrimitiveType[37788-37791]"
  }, {
    "left" : "hashCode",
    "right" : "hashCode",
    "info" : "SimpleName[37806-37814]:SimpleName[37792-37800]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37817-37912]:Block[37803-37898]"
  }, {
    "left" : "return (mStyle * 31 + mLocale.hashCode() ) * 31 + mTimeZone.hashCode();",
    "right" : "return (mStyle * 31 + mLocale.hashCode() ) * 31 + mTimeZone.hashCode();",
    "info" : "ReturnStatement[37831-37902]:ReturnStatement[37817-37888]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[37971-37980]:MarkerAnnotation[37957-37966]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[37989-37995]:Modifier[37975-37981]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[37996-38003]:PrimitiveType[37982-37989]"
  }, {
    "left" : "equals",
    "right" : "equals",
    "info" : "SimpleName[38004-38010]:SimpleName[37990-37996]"
  }, {
    "left" : "Object obj",
    "right" : "Object obj",
    "info" : "SingleVariableDeclaration[38011-38021]:SingleVariableDeclaration[37997-38007]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38023-38446]:Block[38009-38432]"
  }, {
    "left" : "if (this == obj)",
    "right" : "if (this == obj)",
    "info" : "IfStatement[38037-38098]:IfStatement[38023-38084]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38054-38098]:Block[38040-38084]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[38072-38084]:ReturnStatement[38058-38070]"
  }, {
    "left" : "if (obj instanceof TimeZoneDisplayKey)",
    "right" : "if (obj instanceof TimeZoneDisplayKey)",
    "info" : "IfStatement[38111-38410]:IfStatement[38097-38396]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38150-38410]:Block[38136-38396]"
  }, {
    "left" : "TimeZoneDisplayKey other = (TimeZoneDisplayKey)obj;",
    "right" : "TimeZoneDisplayKey other = (TimeZoneDisplayKey)obj;",
    "info" : "VariableDeclarationStatement[38168-38219]:VariableDeclarationStatement[38154-38205]"
  }, {
    "left" : "return\n                    mTimeZone.equals(other.mTimeZone) &&\n                    mStyle == other.mStyle &&\n                    mLocale.equals(other.mLocale);",
    "right" : "return\n                    mTimeZone.equals(other.mTimeZone) &&\n                    mStyle == other.mStyle &&\n                    mLocale.equals(other.mLocale);",
    "info" : "ReturnStatement[38236-38396]:ReturnStatement[38222-38382]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[38423-38436]:ReturnStatement[38409-38422]"
  } ]
}