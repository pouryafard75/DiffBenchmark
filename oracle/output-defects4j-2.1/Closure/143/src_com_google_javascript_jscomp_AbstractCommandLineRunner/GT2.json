{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "AbstractCommandLineRunner",
      "right" : "AbstractCommandLineRunner",
      "info" : "TypeDeclaration[1356-39105]:TypeDeclaration[1356-39214]"
    }, {
      "left" : "private final CommandLineConfig config;",
      "right" : "private final CommandLineConfig config;",
      "info" : "FieldDeclaration[2502-2541]:FieldDeclaration[2502-2541]"
    }, {
      "left" : "private PrintStream out;",
      "right" : "private PrintStream out;",
      "info" : "FieldDeclaration[2545-2569]:FieldDeclaration[2545-2569]"
    }, {
      "left" : "private final PrintStream err;",
      "right" : "private final PrintStream err;",
      "info" : "FieldDeclaration[2572-2602]:FieldDeclaration[2572-2602]"
    }, {
      "left" : "private A compiler;",
      "right" : "private A compiler;",
      "info" : "FieldDeclaration[2605-2624]:FieldDeclaration[2605-2624]"
    }, {
      "left" : "private static Charset inputCharset;",
      "right" : "private static Charset inputCharset;",
      "info" : "FieldDeclaration[2628-2664]:FieldDeclaration[2628-2664]"
    }, {
      "left" : "private static final int NUM_RUNS_TO_DETERMINE_OPTIMAL_ORDER = 100;",
      "right" : "private static final int NUM_RUNS_TO_DETERMINE_OPTIMAL_ORDER = 100;",
      "info" : "FieldDeclaration[2721-2788]:FieldDeclaration[2721-2788]"
    }, {
      "left" : "private final RunTimeStats runTimeStats = new RunTimeStats();",
      "right" : "private final RunTimeStats runTimeStats = new RunTimeStats();",
      "info" : "FieldDeclaration[2792-2853]:FieldDeclaration[2792-2853]"
    }, {
      "left" : "AbstractCommandLineRunner()",
      "right" : "AbstractCommandLineRunner()",
      "info" : "MethodDeclaration[2857-2924]:MethodDeclaration[2857-2924]"
    }, {
      "left" : "AbstractCommandLineRunner(PrintStream out, PrintStream err)",
      "right" : "AbstractCommandLineRunner(PrintStream out, PrintStream err)",
      "info" : "MethodDeclaration[2928-3076]:MethodDeclaration[2928-3076]"
    }, {
      "left" : "protected CommandLineConfig getCommandLineConfig()",
      "right" : "protected CommandLineConfig getCommandLineConfig()",
      "info" : "MethodDeclaration[3080-3232]:MethodDeclaration[3080-3232]"
    }, {
      "left" : "protected abstract A createCompiler();",
      "right" : "protected abstract A createCompiler();",
      "info" : "MethodDeclaration[3236-3371]:MethodDeclaration[3236-3371]"
    }, {
      "left" : "protected abstract B createOptions();",
      "right" : "protected abstract B createOptions();",
      "info" : "MethodDeclaration[3375-3634]:MethodDeclaration[3375-3634]"
    }, {
      "left" : "protected DiagnosticGroups getDiagnosticGroups()",
      "right" : "protected DiagnosticGroups getDiagnosticGroups()",
      "info" : "MethodDeclaration[3638-3727]:MethodDeclaration[3638-3727]"
    }, {
      "left" : "protected void initOptionsFromFlags(CompilerOptions options)",
      "right" : "protected void initOptionsFromFlags(CompilerOptions options)",
      "info" : "MethodDeclaration[3731-4202]:MethodDeclaration[3731-4202]"
    }, {
      "left" : "final protected A getCompiler()",
      "right" : "final protected A getCompiler()",
      "info" : "MethodDeclaration[4206-4264]:MethodDeclaration[4206-4264]"
    }, {
      "left" : "final protected void setRunOptions(B options)\n      throws IOException, FlagUsageException",
      "right" : "final protected void setRunOptions(B options)\n      throws IOException, FlagUsageException",
      "info" : "MethodDeclaration[4268-5074]:MethodDeclaration[4268-5074]"
    }, {
      "left" : "final public void run()",
      "right" : "final public void run()",
      "info" : "MethodDeclaration[5078-5875]:MethodDeclaration[5078-5875]"
    }, {
      "left" : "protected PrintStream getErrorPrintStream()",
      "right" : "protected PrintStream getErrorPrintStream()",
      "info" : "MethodDeclaration[5879-6057]:MethodDeclaration[5879-6057]"
    }, {
      "left" : "FlagUsageException",
      "right" : "FlagUsageException",
      "info" : "TypeDeclaration[6061-6332]:TypeDeclaration[6061-6332]"
    }, {
      "left" : "private static final long serialVersionUID = 1L;",
      "right" : "private static final long serialVersionUID = 1L;",
      "info" : "FieldDeclaration[6210-6258]:FieldDeclaration[6210-6258]"
    }, {
      "left" : "FlagUsageException(String message)",
      "right" : "FlagUsageException(String message)",
      "info" : "MethodDeclaration[6264-6328]:MethodDeclaration[6264-6328]"
    }, {
      "left" : "private static List<JSSourceFile> createInputs(List<String> files,\n      boolean allowStdIn) throws FlagUsageException, IOException",
      "right" : "private static List<JSSourceFile> createInputs(List<String> files,\n      boolean allowStdIn) throws FlagUsageException, IOException",
      "info" : "MethodDeclaration[6336-7384]:MethodDeclaration[6336-7384]"
    }, {
      "left" : "private static List<JSSourceFile> createSourceInputs(List<String> files)\n      throws FlagUsageException, IOException",
      "right" : "private static List<JSSourceFile> createSourceInputs(List<String> files)\n      throws FlagUsageException, IOException",
      "info" : "MethodDeclaration[7388-7824]:MethodDeclaration[7388-7824]"
    }, {
      "left" : "private static List<JSSourceFile> createExternInputs(List<String> files)\n      throws FlagUsageException, IOException",
      "right" : "private static List<JSSourceFile> createExternInputs(List<String> files)\n      throws FlagUsageException, IOException",
      "info" : "MethodDeclaration[7828-8290]:MethodDeclaration[7828-8290]"
    }, {
      "left" : "static JSModule[] createJsModules(List<String> specs, List<String> jsFiles)\n      throws FlagUsageException, IOException",
      "right" : "static JSModule[] createJsModules(List<String> specs, List<String> jsFiles)\n      throws FlagUsageException, IOException",
      "info" : "MethodDeclaration[8294-11565]:MethodDeclaration[8294-11565]"
    }, {
      "left" : "static Map<String, String> parseModuleWrappers(List<String> specs,\n      JSModule[] modules) throws FlagUsageException",
      "right" : "static Map<String, String> parseModuleWrappers(List<String> specs,\n      JSModule[] modules) throws FlagUsageException",
      "info" : "MethodDeclaration[11569-13082]:MethodDeclaration[11569-13082]"
    }, {
      "left" : "static void writeOutput(PrintStream out, Compiler compiler, String code,\n      String wrapper, String codePlaceholder)",
      "right" : "static void writeOutput(PrintStream out, Compiler compiler, String code,\n      String wrapper, String codePlaceholder)",
      "info" : "MethodDeclaration[13086-14171]:MethodDeclaration[13086-14171]"
    }, {
      "left" : "private static void maybeCreateDirsForPath(String pathPrefix)",
      "right" : "private static void maybeCreateDirsForPath(String pathPrefix)",
      "info" : "MethodDeclaration[14175-14682]:MethodDeclaration[14175-14682]"
    }, {
      "left" : "protected int doRun() throws FlagUsageException, IOException",
      "right" : "protected int doRun() throws FlagUsageException, IOException",
      "info" : "MethodDeclaration[14686-16279]:MethodDeclaration[14686-16279]"
    }, {
      "left" : "int processResults(Result result, JSModule[] modules, B options)\n       throws FlagUsageException, IOException",
      "right" : "int processResults(Result result, JSModule[] modules, B options)\n       throws FlagUsageException, IOException",
      "info" : "MethodDeclaration[16283-19614]:MethodDeclaration[16283-19614]"
    }, {
      "left" : "private Charset getInputCharset() throws FlagUsageException",
      "right" : "private Charset getInputCharset() throws FlagUsageException",
      "info" : "MethodDeclaration[19618-20189]:MethodDeclaration[19618-20189]"
    }, {
      "left" : "protected List<JSSourceFile> createExterns() throws FlagUsageException,\n      IOException",
      "right" : "protected List<JSSourceFile> createExterns() throws FlagUsageException,\n      IOException",
      "info" : "MethodDeclaration[20193-20335]:MethodDeclaration[20193-20335]"
    }, {
      "left" : "private boolean shouldGenerateMapPerModule(B options)",
      "right" : "private boolean shouldGenerateMapPerModule(B options)",
      "info" : "MethodDeclaration[20339-20731]:MethodDeclaration[20339-20731]"
    }, {
      "left" : "private PrintStream openExternExportsStream(B options,\n      String path) throws IOException",
      "right" : "private PrintStream openExternExportsStream(B options,\n      String path) throws IOException",
      "info" : "MethodDeclaration[20735-21442]:MethodDeclaration[20735-21442]"
    }, {
      "left" : "private PrintStream openSourceMapStream(B options, String path)\n      throws IOException",
      "right" : "private PrintStream openSourceMapStream(B options, String path)\n      throws IOException",
      "info" : "MethodDeclaration[21446-22422]:MethodDeclaration[21446-22422]"
    }, {
      "left" : "private void outputSourceMap(B options, String path)\n      throws IOException",
      "right" : "private void outputSourceMap(B options, String path)\n      throws IOException",
      "info" : "MethodDeclaration[22426-23008]:MethodDeclaration[22426-23008]"
    }, {
      "left" : "private String getMapPath(String outputFile)",
      "right" : "private String getMapPath(String outputFile)",
      "info" : "MethodDeclaration[23012-24016]:MethodDeclaration[23012-24016]"
    }, {
      "left" : "private void outputNameMaps(B options) throws FlagUsageException,\n      IOException",
      "right" : "private void outputNameMaps(B options) throws FlagUsageException,\n      IOException",
      "info" : "MethodDeclaration[24020-26197]:MethodDeclaration[24020-26197]"
    }, {
      "left" : "static void createDefineReplacements(List<String> definitions,\n      CompilerOptions options)",
      "right" : "static void createDefineReplacements(List<String> definitions,\n      CompilerOptions options)",
      "info" : "MethodDeclaration[26201-28242]:MethodDeclaration[26201-28351]"
    }, {
      "left" : "RunTimeStats",
      "right" : "RunTimeStats",
      "info" : "TypeDeclaration[28246-29399]:TypeDeclaration[28355-29508]"
    }, {
      "left" : "private long bestRunTime = Long.MAX_VALUE;",
      "right" : "private long bestRunTime = Long.MAX_VALUE;",
      "info" : "FieldDeclaration[28279-28321]:FieldDeclaration[28388-28430]"
    }, {
      "left" : "private long worstRunTime = Long.MIN_VALUE;",
      "right" : "private long worstRunTime = Long.MIN_VALUE;",
      "info" : "FieldDeclaration[28326-28369]:FieldDeclaration[28435-28478]"
    }, {
      "left" : "private long lastStartTime = 0;",
      "right" : "private long lastStartTime = 0;",
      "info" : "FieldDeclaration[28374-28405]:FieldDeclaration[28483-28514]"
    }, {
      "left" : "private List<List<String>> loopedPassesInBestRun = null;",
      "right" : "private List<List<String>> loopedPassesInBestRun = null;",
      "info" : "FieldDeclaration[28410-28466]:FieldDeclaration[28519-28575]"
    }, {
      "left" : "private void recordStartRun()",
      "right" : "private void recordStartRun()",
      "info" : "MethodDeclaration[28472-28647]:MethodDeclaration[28581-28756]"
    }, {
      "left" : "private void recordEndRun()",
      "right" : "private void recordEndRun()",
      "info" : "MethodDeclaration[28653-29017]:MethodDeclaration[28762-29126]"
    }, {
      "left" : "private void outputBestPhaseOrdering()",
      "right" : "private void outputBestPhaseOrdering()",
      "info" : "MethodDeclaration[29023-29395]:MethodDeclaration[29132-29504]"
    }, {
      "left" : "CommandLineConfig",
      "right" : "CommandLineConfig",
      "info" : "TypeDeclaration[29403-39103]:TypeDeclaration[29512-39212]"
    }, {
      "left" : "private boolean printTree = false;",
      "right" : "private boolean printTree = false;",
      "info" : "FieldDeclaration[29723-29757]:FieldDeclaration[29832-29866]"
    }, {
      "left" : "CommandLineConfig setPrintTree(boolean printTree)",
      "right" : "CommandLineConfig setPrintTree(boolean printTree)",
      "info" : "MethodDeclaration[29763-29920]:MethodDeclaration[29872-30029]"
    }, {
      "left" : "private boolean computePhaseOrdering = false;",
      "right" : "private boolean computePhaseOrdering = false;",
      "info" : "FieldDeclaration[29926-29971]:FieldDeclaration[30035-30080]"
    }, {
      "left" : "CommandLineConfig setComputePhaseOrdering(boolean computePhaseOrdering)",
      "right" : "CommandLineConfig setComputePhaseOrdering(boolean computePhaseOrdering)",
      "info" : "MethodDeclaration[29977-30248]:MethodDeclaration[30086-30357]"
    }, {
      "left" : "private boolean printAst = false;",
      "right" : "private boolean printAst = false;",
      "info" : "FieldDeclaration[30254-30287]:FieldDeclaration[30363-30396]"
    }, {
      "left" : "CommandLineConfig setPrintAst(boolean printAst)",
      "right" : "CommandLineConfig setPrintAst(boolean printAst)",
      "info" : "MethodDeclaration[30293-30502]:MethodDeclaration[30402-30611]"
    }, {
      "left" : "private boolean printPassGraph = false;",
      "right" : "private boolean printPassGraph = false;",
      "info" : "FieldDeclaration[30508-30547]:FieldDeclaration[30617-30656]"
    }, {
      "left" : "CommandLineConfig setPrintPassGraph(boolean printPassGraph)",
      "right" : "CommandLineConfig setPrintPassGraph(boolean printPassGraph)",
      "info" : "MethodDeclaration[30553-30762]:MethodDeclaration[30662-30871]"
    }, {
      "left" : "private CompilerOptions.DevMode jscompDevMode = CompilerOptions.DevMode.OFF;",
      "right" : "private CompilerOptions.DevMode jscompDevMode = CompilerOptions.DevMode.OFF;",
      "info" : "FieldDeclaration[30768-30844]:FieldDeclaration[30877-30953]"
    }, {
      "left" : "CommandLineConfig setJscompDevMode(CompilerOptions.DevMode jscompDevMode)",
      "right" : "CommandLineConfig setJscompDevMode(CompilerOptions.DevMode jscompDevMode)",
      "info" : "MethodDeclaration[30850-31032]:MethodDeclaration[30959-31141]"
    }, {
      "left" : "private String loggingLevel = Level.WARNING.getName();",
      "right" : "private String loggingLevel = Level.WARNING.getName();",
      "info" : "FieldDeclaration[31038-31092]:FieldDeclaration[31147-31201]"
    }, {
      "left" : "CommandLineConfig setLoggingLevel(String loggingLevel)",
      "right" : "CommandLineConfig setLoggingLevel(String loggingLevel)",
      "info" : "MethodDeclaration[31098-31417]:MethodDeclaration[31207-31526]"
    }, {
      "left" : "private final List<String> externs = Lists.newArrayList();",
      "right" : "private final List<String> externs = Lists.newArrayList();",
      "info" : "FieldDeclaration[31423-31481]:FieldDeclaration[31532-31590]"
    }, {
      "left" : "CommandLineConfig setExterns(List<String> externs)",
      "right" : "CommandLineConfig setExterns(List<String> externs)",
      "info" : "MethodDeclaration[31487-31717]:MethodDeclaration[31596-31826]"
    }, {
      "left" : "private final List<String> js = Lists.newArrayList();",
      "right" : "private final List<String> js = Lists.newArrayList();",
      "info" : "FieldDeclaration[31723-31776]:FieldDeclaration[31832-31885]"
    }, {
      "left" : "CommandLineConfig setJs(List<String> js)",
      "right" : "CommandLineConfig setJs(List<String> js)",
      "info" : "MethodDeclaration[31782-31972]:MethodDeclaration[31891-32081]"
    }, {
      "left" : "private String jsOutputFile = \"\";",
      "right" : "private String jsOutputFile = \"\";",
      "info" : "FieldDeclaration[31978-32011]:FieldDeclaration[32087-32120]"
    }, {
      "left" : "CommandLineConfig setJsOutputFile(String jsOutputFile)",
      "right" : "CommandLineConfig setJsOutputFile(String jsOutputFile)",
      "info" : "MethodDeclaration[32017-32232]:MethodDeclaration[32126-32341]"
    }, {
      "left" : "private final List<String> module = Lists.newArrayList();",
      "right" : "private final List<String> module = Lists.newArrayList();",
      "info" : "FieldDeclaration[32238-32295]:FieldDeclaration[32347-32404]"
    }, {
      "left" : "CommandLineConfig setModule(List<String> module)",
      "right" : "CommandLineConfig setModule(List<String> module)",
      "info" : "MethodDeclaration[32301-32851]:MethodDeclaration[32410-32960]"
    }, {
      "left" : "private String variableMapInputFile = \"\";",
      "right" : "private String variableMapInputFile = \"\";",
      "info" : "FieldDeclaration[32857-32898]:FieldDeclaration[32966-33007]"
    }, {
      "left" : "CommandLineConfig setVariableMapInputFile(String variableMapInputFile)",
      "right" : "CommandLineConfig setVariableMapInputFile(String variableMapInputFile)",
      "info" : "MethodDeclaration[32904-33190]:MethodDeclaration[33013-33299]"
    }, {
      "left" : "private String propertyMapInputFile = \"\";",
      "right" : "private String propertyMapInputFile = \"\";",
      "info" : "FieldDeclaration[33196-33237]:FieldDeclaration[33305-33346]"
    }, {
      "left" : "CommandLineConfig setPropertyMapInputFile(String propertyMapInputFile)",
      "right" : "CommandLineConfig setPropertyMapInputFile(String propertyMapInputFile)",
      "info" : "MethodDeclaration[33243-33529]:MethodDeclaration[33352-33638]"
    }, {
      "left" : "private String variableMapOutputFile = \"\";",
      "right" : "private String variableMapOutputFile = \"\";",
      "info" : "FieldDeclaration[33535-33577]:FieldDeclaration[33644-33686]"
    }, {
      "left" : "CommandLineConfig setVariableMapOutputFile(String variableMapOutputFile)",
      "right" : "CommandLineConfig setVariableMapOutputFile(String variableMapOutputFile)",
      "info" : "MethodDeclaration[33583-33858]:MethodDeclaration[33692-33967]"
    }, {
      "left" : "private boolean createNameMapFiles = false;",
      "right" : "private boolean createNameMapFiles = false;",
      "info" : "FieldDeclaration[33864-33907]:FieldDeclaration[33973-34016]"
    }, {
      "left" : "CommandLineConfig setCreateNameMapFiles(boolean createNameMapFiles)",
      "right" : "CommandLineConfig setCreateNameMapFiles(boolean createNameMapFiles)",
      "info" : "MethodDeclaration[33913-34364]:MethodDeclaration[34022-34473]"
    }, {
      "left" : "private String propertyMapOutputFile = \"\";",
      "right" : "private String propertyMapOutputFile = \"\";",
      "info" : "FieldDeclaration[34370-34412]:FieldDeclaration[34479-34521]"
    }, {
      "left" : "CommandLineConfig setPropertyMapOutputFile(String propertyMapOutputFile)",
      "right" : "CommandLineConfig setPropertyMapOutputFile(String propertyMapOutputFile)",
      "info" : "MethodDeclaration[34418-34693]:MethodDeclaration[34527-34802]"
    }, {
      "left" : "private CodingConvention codingConvention = new DefaultCodingConvention();",
      "right" : "private CodingConvention codingConvention = new DefaultCodingConvention();",
      "info" : "FieldDeclaration[34699-34773]:FieldDeclaration[34808-34882]"
    }, {
      "left" : "CommandLineConfig setCodingConvention(CodingConvention codingConvention)",
      "right" : "CommandLineConfig setCodingConvention(CodingConvention codingConvention)",
      "info" : "MethodDeclaration[34779-34988]:MethodDeclaration[34888-35097]"
    }, {
      "left" : "private int summaryDetailLevel = 1;",
      "right" : "private int summaryDetailLevel = 1;",
      "info" : "FieldDeclaration[34994-35029]:FieldDeclaration[35103-35138]"
    }, {
      "left" : "CommandLineConfig setSummaryDetailLevel(int summaryDetailLevel)",
      "right" : "CommandLineConfig setSummaryDetailLevel(int summaryDetailLevel)",
      "info" : "MethodDeclaration[35035-35478]:MethodDeclaration[35144-35587]"
    }, {
      "left" : "private String outputWrapper = \"\";",
      "right" : "private String outputWrapper = \"\";",
      "info" : "FieldDeclaration[35484-35518]:FieldDeclaration[35593-35627]"
    }, {
      "left" : "CommandLineConfig setOutputWrapper(String outputWrapper)",
      "right" : "CommandLineConfig setOutputWrapper(String outputWrapper)",
      "info" : "MethodDeclaration[35524-35795]:MethodDeclaration[35633-35904]"
    }, {
      "left" : "private String outputWrapperMarker = \"\";",
      "right" : "private String outputWrapperMarker = \"\";",
      "info" : "FieldDeclaration[35801-35841]:FieldDeclaration[35910-35950]"
    }, {
      "left" : "CommandLineConfig setOutputWrapperMarker(String outputWrapperMarker)",
      "right" : "CommandLineConfig setOutputWrapperMarker(String outputWrapperMarker)",
      "info" : "MethodDeclaration[35847-36092]:MethodDeclaration[35956-36201]"
    }, {
      "left" : "private final List<String> moduleWrapper = Lists.newArrayList();",
      "right" : "private final List<String> moduleWrapper = Lists.newArrayList();",
      "info" : "FieldDeclaration[36098-36162]:FieldDeclaration[36207-36271]"
    }, {
      "left" : "CommandLineConfig setModuleWrapper(List<String> moduleWrapper)",
      "right" : "CommandLineConfig setModuleWrapper(List<String> moduleWrapper)",
      "info" : "MethodDeclaration[36168-36593]:MethodDeclaration[36277-36702]"
    }, {
      "left" : "private String moduleOutputPathPrefix = \"\";",
      "right" : "private String moduleOutputPathPrefix = \"\";",
      "info" : "FieldDeclaration[36599-36642]:FieldDeclaration[36708-36751]"
    }, {
      "left" : "CommandLineConfig setModuleOutputPathPrefix(String moduleOutputPathPrefix)",
      "right" : "CommandLineConfig setModuleOutputPathPrefix(String moduleOutputPathPrefix)",
      "info" : "MethodDeclaration[36648-36998]:MethodDeclaration[36757-37107]"
    }, {
      "left" : "private String createSourceMap = \"\";",
      "right" : "private String createSourceMap = \"\";",
      "info" : "FieldDeclaration[37004-37040]:FieldDeclaration[37113-37149]"
    }, {
      "left" : "CommandLineConfig setCreateSourceMap(String createSourceMap)",
      "right" : "CommandLineConfig setCreateSourceMap(String createSourceMap)",
      "info" : "MethodDeclaration[37046-37473]:MethodDeclaration[37155-37582]"
    }, {
      "left" : "private final List<String> jscompError = Lists.newArrayList();",
      "right" : "private final List<String> jscompError = Lists.newArrayList();",
      "info" : "FieldDeclaration[37479-37541]:FieldDeclaration[37588-37650]"
    }, {
      "left" : "CommandLineConfig setJscompError(List<String> jscompError)",
      "right" : "CommandLineConfig setJscompError(List<String> jscompError)",
      "info" : "MethodDeclaration[37547-37774]:MethodDeclaration[37656-37883]"
    }, {
      "left" : "private final List<String> jscompWarning = Lists.newArrayList();",
      "right" : "private final List<String> jscompWarning = Lists.newArrayList();",
      "info" : "FieldDeclaration[37780-37844]:FieldDeclaration[37889-37953]"
    }, {
      "left" : "CommandLineConfig setJscompWarning(List<String> jscompWarning)",
      "right" : "CommandLineConfig setJscompWarning(List<String> jscompWarning)",
      "info" : "MethodDeclaration[37850-38095]:MethodDeclaration[37959-38204]"
    }, {
      "left" : "private final List<String> jscompOff = Lists.newArrayList();",
      "right" : "private final List<String> jscompOff = Lists.newArrayList();",
      "info" : "FieldDeclaration[38101-38161]:FieldDeclaration[38210-38270]"
    }, {
      "left" : "CommandLineConfig setJscompOff(List<String> jscompOff)",
      "right" : "CommandLineConfig setJscompOff(List<String> jscompOff)",
      "info" : "MethodDeclaration[38167-38379]:MethodDeclaration[38276-38488]"
    }, {
      "left" : "private final List<String> define = Lists.newArrayList();",
      "right" : "private final List<String> define = Lists.newArrayList();",
      "info" : "FieldDeclaration[38385-38442]:FieldDeclaration[38494-38551]"
    }, {
      "left" : "CommandLineConfig setDefine(List<String> define)",
      "right" : "CommandLineConfig setDefine(List<String> define)",
      "info" : "MethodDeclaration[38448-38906]:MethodDeclaration[38557-39015]"
    }, {
      "left" : "private String charset = \"\";",
      "right" : "private String charset = \"\";",
      "info" : "FieldDeclaration[38912-38940]:FieldDeclaration[39021-39049]"
    }, {
      "left" : "CommandLineConfig setCharset(String charset)",
      "right" : "CommandLineConfig setCharset(String charset)",
      "info" : "MethodDeclaration[38946-39099]:MethodDeclaration[39055-39208]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2885-2924]:Block[2885-2924]"
    }, {
      "left" : "this(System.out, System.err);",
      "right" : "this(System.out, System.err);",
      "info" : "ConstructorInvocation[2891-2920]:ConstructorInvocation[2891-2920]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2988-3076]:Block[2988-3076]"
    }, {
      "left" : "this.config = new CommandLineConfig();",
      "right" : "this.config = new CommandLineConfig();",
      "info" : "ExpressionStatement[2994-3032]:ExpressionStatement[2994-3032]"
    }, {
      "left" : "this.out = out;",
      "right" : "this.out = out;",
      "info" : "ExpressionStatement[3037-3052]:ExpressionStatement[3037-3052]"
    }, {
      "left" : "this.err = err;",
      "right" : "this.err = err;",
      "info" : "ExpressionStatement[3057-3072]:ExpressionStatement[3057-3072]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3208-3232]:Block[3208-3232]"
    }, {
      "left" : "return config;",
      "right" : "return config;",
      "info" : "ReturnStatement[3214-3228]:ReturnStatement[3214-3228]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3687-3727]:Block[3687-3727]"
    }, {
      "left" : "return new DiagnosticGroups();",
      "right" : "return new DiagnosticGroups();",
      "info" : "ReturnStatement[3693-3723]:ReturnStatement[3693-3723]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3792-4202]:Block[3792-4202]"
    }, {
      "left" : "DiagnosticGroups diagnosticGroups = getDiagnosticGroups();",
      "right" : "DiagnosticGroups diagnosticGroups = getDiagnosticGroups();",
      "info" : "VariableDeclarationStatement[3799-3857]:VariableDeclarationStatement[3799-3857]"
    }, {
      "left" : "diagnosticGroups.setWarningLevels(\n        options, config.jscompError, CheckLevel.ERROR);",
      "right" : "diagnosticGroups.setWarningLevels(\n        options, config.jscompError, CheckLevel.ERROR);",
      "info" : "ExpressionStatement[3863-3953]:ExpressionStatement[3863-3953]"
    }, {
      "left" : "diagnosticGroups.setWarningLevels(\n        options, config.jscompWarning, CheckLevel.WARNING);",
      "right" : "diagnosticGroups.setWarningLevels(\n        options, config.jscompWarning, CheckLevel.WARNING);",
      "info" : "ExpressionStatement[3958-4052]:ExpressionStatement[3958-4052]"
    }, {
      "left" : "diagnosticGroups.setWarningLevels(\n        options, config.jscompOff, CheckLevel.OFF);",
      "right" : "diagnosticGroups.setWarningLevels(\n        options, config.jscompOff, CheckLevel.OFF);",
      "info" : "ExpressionStatement[4057-4143]:ExpressionStatement[4057-4143]"
    }, {
      "left" : "createDefineReplacements(config.define, options);",
      "right" : "createDefineReplacements(config.define, options);",
      "info" : "ExpressionStatement[4149-4198]:ExpressionStatement[4149-4198]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4238-4264]:Block[4238-4264]"
    }, {
      "left" : "return compiler;",
      "right" : "return compiler;",
      "info" : "ReturnStatement[4244-4260]:ReturnStatement[4244-4260]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4359-5074]:Block[4359-5074]"
    }, {
      "left" : "if (config.jsOutputFile.length() > 0)",
      "right" : "if (config.jsOutputFile.length() > 0)",
      "info" : "IfStatement[4365-4460]:IfStatement[4365-4460]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4403-4460]:Block[4403-4460]"
    }, {
      "left" : "options.jsOutputFile = config.jsOutputFile;",
      "right" : "options.jsOutputFile = config.jsOutputFile;",
      "info" : "ExpressionStatement[4411-4454]:ExpressionStatement[4411-4454]"
    }, {
      "left" : "if (config.createSourceMap.length() > 0)",
      "right" : "if (config.createSourceMap.length() > 0)",
      "info" : "IfStatement[4466-4574]:IfStatement[4466-4574]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4507-4574]:Block[4507-4574]"
    }, {
      "left" : "options.sourceMapOutputPath = config.createSourceMap;",
      "right" : "options.sourceMapOutputPath = config.createSourceMap;",
      "info" : "ExpressionStatement[4515-4568]:ExpressionStatement[4515-4568]"
    }, {
      "left" : "if (!config.variableMapInputFile.equals(\"\"))",
      "right" : "if (!config.variableMapInputFile.equals(\"\"))",
      "info" : "IfStatement[4580-4742]:IfStatement[4580-4742]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4625-4742]:Block[4625-4742]"
    }, {
      "left" : "options.inputVariableMapSerialized =\n          VariableMap.load(config.variableMapInputFile).toBytes();",
      "right" : "options.inputVariableMapSerialized =\n          VariableMap.load(config.variableMapInputFile).toBytes();",
      "info" : "ExpressionStatement[4633-4736]:ExpressionStatement[4633-4736]"
    }, {
      "left" : "if (!config.propertyMapInputFile.equals(\"\"))",
      "right" : "if (!config.propertyMapInputFile.equals(\"\"))",
      "info" : "IfStatement[4748-4910]:IfStatement[4748-4910]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4793-4910]:Block[4793-4910]"
    }, {
      "left" : "options.inputPropertyMapSerialized =\n          VariableMap.load(config.propertyMapInputFile).toBytes();",
      "right" : "options.inputPropertyMapSerialized =\n          VariableMap.load(config.propertyMapInputFile).toBytes();",
      "info" : "ExpressionStatement[4801-4904]:ExpressionStatement[4801-4904]"
    }, {
      "left" : "options.setCodingConvention(config.codingConvention);",
      "right" : "options.setCodingConvention(config.codingConvention);",
      "info" : "ExpressionStatement[4916-4969]:ExpressionStatement[4916-4969]"
    }, {
      "left" : "options.setSummaryDetailLevel(config.summaryDetailLevel);",
      "right" : "options.setSummaryDetailLevel(config.summaryDetailLevel);",
      "info" : "ExpressionStatement[4974-5031]:ExpressionStatement[4974-5031]"
    }, {
      "left" : "inputCharset = getInputCharset();",
      "right" : "inputCharset = getInputCharset();",
      "info" : "ExpressionStatement[5037-5070]:ExpressionStatement[5037-5070]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5204-5875]:Block[5204-5875]"
    }, {
      "left" : "int result = 0;",
      "right" : "int result = 0;",
      "info" : "VariableDeclarationStatement[5210-5225]:VariableDeclarationStatement[5210-5225]"
    }, {
      "left" : "int runs = 1;",
      "right" : "int runs = 1;",
      "info" : "VariableDeclarationStatement[5230-5243]:VariableDeclarationStatement[5230-5243]"
    }, {
      "left" : "if (config.computePhaseOrdering)",
      "right" : "if (config.computePhaseOrdering)",
      "info" : "IfStatement[5248-5377]:IfStatement[5248-5377]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5281-5377]:Block[5281-5377]"
    }, {
      "left" : "runs = NUM_RUNS_TO_DETERMINE_OPTIMAL_ORDER;",
      "right" : "runs = NUM_RUNS_TO_DETERMINE_OPTIMAL_ORDER;",
      "info" : "ExpressionStatement[5289-5332]:ExpressionStatement[5289-5332]"
    }, {
      "left" : "PhaseOptimizer.randomizeLoops();",
      "right" : "PhaseOptimizer.randomizeLoops();",
      "info" : "ExpressionStatement[5339-5371]:ExpressionStatement[5339-5371]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[5382-5755]:TryStatement[5382-5755]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5386-5557]:Block[5386-5557]"
    }, {
      "left" : "for (int i = 0; i < runs && result == 0; i++)",
      "right" : "for (int i = 0; i < runs && result == 0; i++)",
      "info" : "ForStatement[5394-5551]:ForStatement[5394-5551]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5440-5551]:Block[5440-5551]"
    }, {
      "left" : "runTimeStats.recordStartRun();",
      "right" : "runTimeStats.recordStartRun();",
      "info" : "ExpressionStatement[5450-5480]:ExpressionStatement[5450-5480]"
    }, {
      "left" : "result = doRun();",
      "right" : "result = doRun();",
      "info" : "ExpressionStatement[5489-5506]:ExpressionStatement[5489-5506]"
    }, {
      "left" : "runTimeStats.recordEndRun();",
      "right" : "runTimeStats.recordEndRun();",
      "info" : "ExpressionStatement[5515-5543]:ExpressionStatement[5515-5543]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5613-5681]:Block[5613-5681]"
    }, {
      "left" : "System.err.println(e.getMessage());",
      "right" : "System.err.println(e.getMessage());",
      "info" : "ExpressionStatement[5621-5656]:ExpressionStatement[5621-5656]"
    }, {
      "left" : "result = -1;",
      "right" : "result = -1;",
      "info" : "ExpressionStatement[5663-5675]:ExpressionStatement[5663-5675]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5702-5755]:Block[5702-5755]"
    }, {
      "left" : "t.printStackTrace();",
      "right" : "t.printStackTrace();",
      "info" : "ExpressionStatement[5710-5730]:ExpressionStatement[5710-5730]"
    }, {
      "left" : "result = -2;",
      "right" : "result = -2;",
      "info" : "ExpressionStatement[5737-5749]:ExpressionStatement[5737-5749]"
    }, {
      "left" : "if (config.computePhaseOrdering)",
      "right" : "if (config.computePhaseOrdering)",
      "info" : "IfStatement[5760-5846]:IfStatement[5760-5846]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5793-5846]:Block[5793-5846]"
    }, {
      "left" : "runTimeStats.outputBestPhaseOrdering();",
      "right" : "runTimeStats.outputBestPhaseOrdering();",
      "info" : "ExpressionStatement[5801-5840]:ExpressionStatement[5801-5840]"
    }, {
      "left" : "System.exit(result);",
      "right" : "System.exit(result);",
      "info" : "ExpressionStatement[5851-5871]:ExpressionStatement[5851-5871]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6036-6057]:Block[6036-6057]"
    }, {
      "left" : "return err;",
      "right" : "return err;",
      "info" : "ReturnStatement[6042-6053]:ReturnStatement[6042-6053]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6299-6328]:Block[6299-6328]"
    }, {
      "left" : "super(message);",
      "right" : "super(message);",
      "info" : "SuperConstructorInvocation[6307-6322]:SuperConstructorInvocation[6307-6322]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6741-7384]:Block[6741-7384]"
    }, {
      "left" : "List<JSSourceFile> inputs = new ArrayList<JSSourceFile>(files.size());",
      "right" : "List<JSSourceFile> inputs = new ArrayList<JSSourceFile>(files.size());",
      "info" : "VariableDeclarationStatement[6747-6817]:VariableDeclarationStatement[6747-6817]"
    }, {
      "left" : "boolean usingStdin = false;",
      "right" : "boolean usingStdin = false;",
      "info" : "VariableDeclarationStatement[6822-6849]:VariableDeclarationStatement[6822-6849]"
    }, {
      "left" : "for (String filename : files)",
      "right" : "for (String filename : files)",
      "info" : "EnhancedForStatement[6854-7361]:EnhancedForStatement[6854-7361]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6884-7361]:Block[6884-7361]"
    }, {
      "left" : "if (!\"-\".equals(filename))",
      "right" : "if (!\"-\".equals(filename))",
      "info" : "IfStatement[6892-7355]:IfStatement[6892-7355]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6919-7035]:Block[6919-7035]"
    }, {
      "left" : "JSSourceFile newFile = JSSourceFile.fromFile(filename, inputCharset);",
      "right" : "JSSourceFile newFile = JSSourceFile.fromFile(filename, inputCharset);",
      "info" : "VariableDeclarationStatement[6929-6998]:VariableDeclarationStatement[6929-6998]"
    }, {
      "left" : "inputs.add(newFile);",
      "right" : "inputs.add(newFile);",
      "info" : "ExpressionStatement[7007-7027]:ExpressionStatement[7007-7027]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7041-7355]:Block[7041-7355]"
    }, {
      "left" : "if (!allowStdIn)",
      "right" : "if (!allowStdIn)",
      "info" : "IfStatement[7051-7143]:IfStatement[7051-7143]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7068-7143]:Block[7068-7143]"
    }, {
      "left" : "throw new FlagUsageException(\"Can't specify stdin.\");",
      "right" : "throw new FlagUsageException(\"Can't specify stdin.\");",
      "info" : "ThrowStatement[7080-7133]:ThrowStatement[7080-7133]"
    }, {
      "left" : "if (usingStdin)",
      "right" : "if (usingStdin)",
      "info" : "IfStatement[7152-7249]:IfStatement[7152-7249]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7168-7249]:Block[7168-7249]"
    }, {
      "left" : "throw new FlagUsageException(\"Can't specify stdin twice.\");",
      "right" : "throw new FlagUsageException(\"Can't specify stdin twice.\");",
      "info" : "ThrowStatement[7180-7239]:ThrowStatement[7180-7239]"
    }, {
      "left" : "inputs.add(JSSourceFile.fromInputStream(\"stdin\", System.in));",
      "right" : "inputs.add(JSSourceFile.fromInputStream(\"stdin\", System.in));",
      "info" : "ExpressionStatement[7259-7320]:ExpressionStatement[7259-7320]"
    }, {
      "left" : "usingStdin = true;",
      "right" : "usingStdin = true;",
      "info" : "ExpressionStatement[7329-7347]:ExpressionStatement[7329-7347]"
    }, {
      "left" : "return inputs;",
      "right" : "return inputs;",
      "info" : "ReturnStatement[7366-7380]:ReturnStatement[7366-7380]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7575-7824]:Block[7575-7824]"
    }, {
      "left" : "if (files.isEmpty())",
      "right" : "if (files.isEmpty())",
      "info" : "IfStatement[7581-7655]:IfStatement[7581-7655]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7602-7655]:Block[7602-7655]"
    }, {
      "left" : "files = Collections.singletonList(\"-\");",
      "right" : "files = Collections.singletonList(\"-\");",
      "info" : "ExpressionStatement[7610-7649]:ExpressionStatement[7610-7649]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[7660-7820]:TryStatement[7660-7820]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7664-7711]:Block[7664-7711]"
    }, {
      "left" : "return createInputs(files, true);",
      "right" : "return createInputs(files, true);",
      "info" : "ReturnStatement[7672-7705]:ReturnStatement[7672-7705]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7741-7820]:Block[7741-7820]"
    }, {
      "left" : "throw new FlagUsageException(\"Bad --js flag. \" + e.getMessage());",
      "right" : "throw new FlagUsageException(\"Bad --js flag. \" + e.getMessage());",
      "info" : "ThrowStatement[7749-7814]:ThrowStatement[7749-7814]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8010-8290]:Block[8010-8290]"
    }, {
      "left" : "if (files.isEmpty())",
      "right" : "if (files.isEmpty())",
      "info" : "IfStatement[8016-8115]:IfStatement[8016-8115]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8037-8115]:Block[8037-8115]"
    }, {
      "left" : "return ImmutableList.of(JSSourceFile.fromCode(\"/dev/null\", \"\"));",
      "right" : "return ImmutableList.of(JSSourceFile.fromCode(\"/dev/null\", \"\"));",
      "info" : "ReturnStatement[8045-8109]:ReturnStatement[8045-8109]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[8120-8286]:TryStatement[8120-8286]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8124-8172]:Block[8124-8172]"
    }, {
      "left" : "return createInputs(files, false);",
      "right" : "return createInputs(files, false);",
      "info" : "ReturnStatement[8132-8166]:ReturnStatement[8132-8166]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8202-8286]:Block[8202-8286]"
    }, {
      "left" : "throw new FlagUsageException(\"Bad --externs flag. \" + e.getMessage());",
      "right" : "throw new FlagUsageException(\"Bad --externs flag. \" + e.getMessage());",
      "info" : "ThrowStatement[8210-8280]:ThrowStatement[8210-8280]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8802-11565]:Block[8802-11565]"
    }, {
      "left" : "Preconditions.checkState(specs != null);",
      "right" : "Preconditions.checkState(specs != null);",
      "info" : "ExpressionStatement[8808-8848]:ExpressionStatement[8808-8848]"
    }, {
      "left" : "Preconditions.checkState(!specs.isEmpty());",
      "right" : "Preconditions.checkState(!specs.isEmpty());",
      "info" : "ExpressionStatement[8853-8896]:ExpressionStatement[8853-8896]"
    }, {
      "left" : "Preconditions.checkState(jsFiles != null);",
      "right" : "Preconditions.checkState(jsFiles != null);",
      "info" : "ExpressionStatement[8901-8943]:ExpressionStatement[8901-8943]"
    }, {
      "left" : "final int totalNumJsFiles = jsFiles.size();",
      "right" : "final int totalNumJsFiles = jsFiles.size();",
      "info" : "VariableDeclarationStatement[8949-8992]:VariableDeclarationStatement[8949-8992]"
    }, {
      "left" : "int nextJsFileIndex = 0;",
      "right" : "int nextJsFileIndex = 0;",
      "info" : "VariableDeclarationStatement[8997-9021]:VariableDeclarationStatement[8997-9021]"
    }, {
      "left" : "Map<String, JSModule> modulesByName = Maps.newLinkedHashMap();",
      "right" : "Map<String, JSModule> modulesByName = Maps.newLinkedHashMap();",
      "info" : "VariableDeclarationStatement[9027-9089]:VariableDeclarationStatement[9027-9089]"
    }, {
      "left" : "for (String spec : specs)",
      "right" : "for (String spec : specs)",
      "info" : "EnhancedForStatement[9094-11289]:EnhancedForStatement[9094-11289]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9120-11289]:Block[9120-11289]"
    }, {
      "left" : "String[] parts = spec.split(\":\");",
      "right" : "String[] parts = spec.split(\":\");",
      "info" : "VariableDeclarationStatement[9190-9223]:VariableDeclarationStatement[9190-9223]"
    }, {
      "left" : "if (parts.length < 2 || parts.length > 4)",
      "right" : "if (parts.length < 2 || parts.length > 4)",
      "info" : "IfStatement[9230-9398]:IfStatement[9230-9398]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9272-9398]:Block[9272-9398]"
    }, {
      "left" : "throw new FlagUsageException(\"Expected 2-4 colon-delimited parts in \"\n            + \"module spec: \" + spec);",
      "right" : "throw new FlagUsageException(\"Expected 2-4 colon-delimited parts in \"\n            + \"module spec: \" + spec);",
      "info" : "ThrowStatement[9282-9390]:ThrowStatement[9282-9390]"
    }, {
      "left" : "String name = parts[0];",
      "right" : "String name = parts[0];",
      "info" : "VariableDeclarationStatement[9434-9457]:VariableDeclarationStatement[9434-9457]"
    }, {
      "left" : "if (!TokenStream.isJSIdentifier(name))",
      "right" : "if (!TokenStream.isJSIdentifier(name))",
      "info" : "IfStatement[9464-9589]:IfStatement[9464-9589]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9503-9589]:Block[9503-9589]"
    }, {
      "left" : "throw new FlagUsageException(\"Invalid module name: '\" + name + \"'\");",
      "right" : "throw new FlagUsageException(\"Invalid module name: '\" + name + \"'\");",
      "info" : "ThrowStatement[9513-9581]:ThrowStatement[9513-9581]"
    }, {
      "left" : "if (modulesByName.containsKey(name))",
      "right" : "if (modulesByName.containsKey(name))",
      "info" : "IfStatement[9596-9714]:IfStatement[9596-9714]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9633-9714]:Block[9633-9714]"
    }, {
      "left" : "throw new FlagUsageException(\"Duplicate module name: \" + name);",
      "right" : "throw new FlagUsageException(\"Duplicate module name: \" + name);",
      "info" : "ThrowStatement[9643-9706]:ThrowStatement[9643-9706]"
    }, {
      "left" : "JSModule module = new JSModule(name);",
      "right" : "JSModule module = new JSModule(name);",
      "info" : "VariableDeclarationStatement[9721-9758]:VariableDeclarationStatement[9721-9758]"
    }, {
      "left" : "int numJsFiles = -1;",
      "right" : "int numJsFiles = -1;",
      "info" : "VariableDeclarationStatement[9796-9816]:VariableDeclarationStatement[9796-9816]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[9823-9958]:TryStatement[9823-9958]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9827-9885]:Block[9827-9885]"
    }, {
      "left" : "numJsFiles = Integer.parseInt(parts[1]);",
      "right" : "numJsFiles = Integer.parseInt(parts[1]);",
      "info" : "ExpressionStatement[9837-9877]:ExpressionStatement[9837-9877]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9924-9958]:Block[9924-9958]"
    }, {
      "left" : "numJsFiles = -1;",
      "right" : "numJsFiles = -1;",
      "info" : "ExpressionStatement[9934-9950]:ExpressionStatement[9934-9950]"
    }, {
      "left" : "if (numJsFiles < 0)",
      "right" : "if (numJsFiles < 0)",
      "info" : "IfStatement[10012-10155]:IfStatement[10012-10155]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10032-10155]:Block[10032-10155]"
    }, {
      "left" : "throw new FlagUsageException(\"Invalid js file count '\" + parts[1]\n            + \"' for module: \" + name);",
      "right" : "throw new FlagUsageException(\"Invalid js file count '\" + parts[1]\n            + \"' for module: \" + name);",
      "info" : "ThrowStatement[10042-10147]:ThrowStatement[10042-10147]"
    }, {
      "left" : "if (nextJsFileIndex + numJsFiles > totalNumJsFiles)",
      "right" : "if (nextJsFileIndex + numJsFiles > totalNumJsFiles)",
      "info" : "IfStatement[10162-10408]:IfStatement[10162-10408]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10214-10408]:Block[10214-10408]"
    }, {
      "left" : "throw new FlagUsageException(\"Not enough js files specified. Expected \"\n            + (nextJsFileIndex + numJsFiles - totalNumJsFiles)\n            + \" more in module:\" + name);",
      "right" : "throw new FlagUsageException(\"Not enough js files specified. Expected \"\n            + (nextJsFileIndex + numJsFiles - totalNumJsFiles)\n            + \" more in module:\" + name);",
      "info" : "ThrowStatement[10224-10400]:ThrowStatement[10224-10400]"
    }, {
      "left" : "List<String> moduleJsFiles =\n          jsFiles.subList(nextJsFileIndex, nextJsFileIndex + numJsFiles);",
      "right" : "List<String> moduleJsFiles =\n          jsFiles.subList(nextJsFileIndex, nextJsFileIndex + numJsFiles);",
      "info" : "VariableDeclarationStatement[10415-10517]:VariableDeclarationStatement[10415-10517]"
    }, {
      "left" : "for (JSSourceFile input : createInputs(moduleJsFiles, false))",
      "right" : "for (JSSourceFile input : createInputs(moduleJsFiles, false))",
      "info" : "EnhancedForStatement[10524-10622]:EnhancedForStatement[10524-10622]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10586-10622]:Block[10586-10622]"
    }, {
      "left" : "module.add(input);",
      "right" : "module.add(input);",
      "info" : "ExpressionStatement[10596-10614]:ExpressionStatement[10596-10614]"
    }, {
      "left" : "nextJsFileIndex += numJsFiles;",
      "right" : "nextJsFileIndex += numJsFiles;",
      "info" : "ExpressionStatement[10629-10659]:ExpressionStatement[10629-10659]"
    }, {
      "left" : "if (parts.length > 2)",
      "right" : "if (parts.length > 2)",
      "info" : "IfStatement[10667-11243]:IfStatement[10667-11243]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10689-11243]:Block[10689-11243]"
    }, {
      "left" : "String depList = parts[2];",
      "right" : "String depList = parts[2];",
      "info" : "VariableDeclarationStatement[10737-10763]:VariableDeclarationStatement[10737-10763]"
    }, {
      "left" : "if (depList.length() > 0)",
      "right" : "if (depList.length() > 0)",
      "info" : "IfStatement[10772-11235]:IfStatement[10772-11235]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10798-11235]:Block[10798-11235]"
    }, {
      "left" : "String[] deps = depList.split(\",\");",
      "right" : "String[] deps = depList.split(\",\");",
      "info" : "VariableDeclarationStatement[10810-10845]:VariableDeclarationStatement[10810-10845]"
    }, {
      "left" : "for (String dep : deps)",
      "right" : "for (String dep : deps)",
      "info" : "EnhancedForStatement[10856-11225]:EnhancedForStatement[10856-11225]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10880-11225]:Block[10880-11225]"
    }, {
      "left" : "JSModule other = modulesByName.get(dep);",
      "right" : "JSModule other = modulesByName.get(dep);",
      "info" : "VariableDeclarationStatement[10894-10934]:VariableDeclarationStatement[10894-10934]"
    }, {
      "left" : "if (other == null)",
      "right" : "if (other == null)",
      "info" : "IfStatement[10947-11172]:IfStatement[10947-11172]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10966-11172]:Block[10966-11172]"
    }, {
      "left" : "throw new FlagUsageException(\"Module '\" + name\n                  + \"' depends on unknown module '\" + dep\n                  + \"'. Be sure to list modules in dependency order.\");",
      "right" : "throw new FlagUsageException(\"Module '\" + name\n                  + \"' depends on unknown module '\" + dep\n                  + \"'. Be sure to list modules in dependency order.\");",
      "info" : "ThrowStatement[10982-11158]:ThrowStatement[10982-11158]"
    }, {
      "left" : "module.addDependency(other);",
      "right" : "module.addDependency(other);",
      "info" : "ExpressionStatement[11185-11213]:ExpressionStatement[11185-11213]"
    }, {
      "left" : "modulesByName.put(name, module);",
      "right" : "modulesByName.put(name, module);",
      "info" : "ExpressionStatement[11251-11283]:ExpressionStatement[11251-11283]"
    }, {
      "left" : "if (nextJsFileIndex < totalNumJsFiles)",
      "right" : "if (nextJsFileIndex < totalNumJsFiles)",
      "info" : "IfStatement[11295-11481]:IfStatement[11295-11481]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11334-11481]:Block[11334-11481]"
    }, {
      "left" : "throw new FlagUsageException(\"Too many js files specified. Expected \"\n          + nextJsFileIndex + \" but found \" + totalNumJsFiles);",
      "right" : "throw new FlagUsageException(\"Too many js files specified. Expected \"\n          + nextJsFileIndex + \" but found \" + totalNumJsFiles);",
      "info" : "ThrowStatement[11342-11475]:ThrowStatement[11342-11475]"
    }, {
      "left" : "return modulesByName.values().toArray(new JSModule[modulesByName.size()]);",
      "right" : "return modulesByName.values().toArray(new JSModule[modulesByName.size()]);",
      "info" : "ReturnStatement[11487-11561]:ReturnStatement[11487-11561]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12097-13082]:Block[12097-13082]"
    }, {
      "left" : "Preconditions.checkState(specs != null);",
      "right" : "Preconditions.checkState(specs != null);",
      "info" : "ExpressionStatement[12103-12143]:ExpressionStatement[12103-12143]"
    }, {
      "left" : "Map<String, String> wrappers =\n        Maps.newHashMapWithExpectedSize(modules.length);",
      "right" : "Map<String, String> wrappers =\n        Maps.newHashMapWithExpectedSize(modules.length);",
      "info" : "VariableDeclarationStatement[12149-12236]:VariableDeclarationStatement[12149-12236]"
    }, {
      "left" : "for (JSModule m : modules)",
      "right" : "for (JSModule m : modules)",
      "info" : "EnhancedForStatement[12288-12359]:EnhancedForStatement[12288-12359]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12315-12359]:Block[12315-12359]"
    }, {
      "left" : "wrappers.put(m.getName(), \"\");",
      "right" : "wrappers.put(m.getName(), \"\");",
      "info" : "ExpressionStatement[12323-12353]:ExpressionStatement[12323-12353]"
    }, {
      "left" : "for (String spec : specs)",
      "right" : "for (String spec : specs)",
      "info" : "EnhancedForStatement[12365-13057]:EnhancedForStatement[12365-13057]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12391-13057]:Block[12391-13057]"
    }, {
      "left" : "int pos = spec.indexOf(':');",
      "right" : "int pos = spec.indexOf(':');",
      "info" : "VariableDeclarationStatement[12439-12467]:VariableDeclarationStatement[12439-12467]"
    }, {
      "left" : "if (pos == -1)",
      "right" : "if (pos == -1)",
      "info" : "IfStatement[12474-12621]:IfStatement[12474-12621]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12489-12621]:Block[12489-12621]"
    }, {
      "left" : "throw new FlagUsageException(\"Expected module wrapper to have \"\n            + \"<name>:<wrapper> format: \" + spec);",
      "right" : "throw new FlagUsageException(\"Expected module wrapper to have \"\n            + \"<name>:<wrapper> format: \" + spec);",
      "info" : "ThrowStatement[12499-12613]:ThrowStatement[12499-12613]"
    }, {
      "left" : "String name = spec.substring(0, pos);",
      "right" : "String name = spec.substring(0, pos);",
      "info" : "VariableDeclarationStatement[12657-12694]:VariableDeclarationStatement[12657-12694]"
    }, {
      "left" : "if (!wrappers.containsKey(name))",
      "right" : "if (!wrappers.containsKey(name))",
      "info" : "IfStatement[12701-12815]:IfStatement[12701-12815]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12734-12815]:Block[12734-12815]"
    }, {
      "left" : "throw new FlagUsageException(\"Unknown module: '\" + name + \"'\");",
      "right" : "throw new FlagUsageException(\"Unknown module: '\" + name + \"'\");",
      "info" : "ThrowStatement[12744-12807]:ThrowStatement[12744-12807]"
    }, {
      "left" : "String wrapper = spec.substring(pos + 1);",
      "right" : "String wrapper = spec.substring(pos + 1);",
      "info" : "VariableDeclarationStatement[12822-12863]:VariableDeclarationStatement[12822-12863]"
    }, {
      "left" : "if (!wrapper.contains(\"%s\"))",
      "right" : "if (!wrapper.contains(\"%s\"))",
      "info" : "IfStatement[12870-13016]:IfStatement[12870-13016]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12899-13016]:Block[12899-13016]"
    }, {
      "left" : "throw new FlagUsageException(\"No %s placeholder in module wrapper: '\"\n            + wrapper + \"'\");",
      "right" : "throw new FlagUsageException(\"No %s placeholder in module wrapper: '\"\n            + wrapper + \"'\");",
      "info" : "ThrowStatement[12909-13008]:ThrowStatement[12909-13008]"
    }, {
      "left" : "wrappers.put(name, wrapper);",
      "right" : "wrappers.put(name, wrapper);",
      "info" : "ExpressionStatement[13023-13051]:ExpressionStatement[13023-13051]"
    }, {
      "left" : "return wrappers;",
      "right" : "return wrappers;",
      "info" : "ReturnStatement[13062-13078]:ReturnStatement[13062-13078]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13370-14171]:Block[13370-14171]"
    }, {
      "left" : "int pos = wrapper.indexOf(codePlaceholder);",
      "right" : "int pos = wrapper.indexOf(codePlaceholder);",
      "info" : "VariableDeclarationStatement[13376-13419]:VariableDeclarationStatement[13376-13419]"
    }, {
      "left" : "if (pos != -1)",
      "right" : "if (pos != -1)",
      "info" : "IfStatement[13424-14167]:IfStatement[13424-14167]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13439-14129]:Block[13439-14129]"
    }, {
      "left" : "String prefix = \"\";",
      "right" : "String prefix = \"\";",
      "info" : "VariableDeclarationStatement[13447-13466]:VariableDeclarationStatement[13447-13466]"
    }, {
      "left" : "if (pos > 0)",
      "right" : "if (pos > 0)",
      "info" : "IfStatement[13474-13567]:IfStatement[13474-13567]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13487-13567]:Block[13487-13567]"
    }, {
      "left" : "prefix = wrapper.substring(0, pos);",
      "right" : "prefix = wrapper.substring(0, pos);",
      "info" : "ExpressionStatement[13497-13532]:ExpressionStatement[13497-13532]"
    }, {
      "left" : "out.print(prefix);",
      "right" : "out.print(prefix);",
      "info" : "ExpressionStatement[13541-13559]:ExpressionStatement[13541-13559]"
    }, {
      "left" : "out.print(code);",
      "right" : "out.print(code);",
      "info" : "ExpressionStatement[13575-13591]:ExpressionStatement[13575-13591]"
    }, {
      "left" : "int suffixStart = pos + codePlaceholder.length();",
      "right" : "int suffixStart = pos + codePlaceholder.length();",
      "info" : "VariableDeclarationStatement[13599-13648]:VariableDeclarationStatement[13599-13648]"
    }, {
      "left" : "if (suffixStart == wrapper.length())",
      "right" : "if (suffixStart == wrapper.length())",
      "info" : "IfStatement[13655-13890]:IfStatement[13655-13890]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13692-13822]:Block[13692-13822]"
    }, {
      "left" : "out.println();",
      "right" : "out.println();",
      "info" : "ExpressionStatement[13800-13814]:ExpressionStatement[13800-13814]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13828-13890]:Block[13828-13890]"
    }, {
      "left" : "out.println(wrapper.substring(suffixStart));",
      "right" : "out.println(wrapper.substring(suffixStart));",
      "info" : "ExpressionStatement[13838-13882]:ExpressionStatement[13838-13882]"
    }, {
      "left" : "if (compiler != null && compiler.getSourceMap() != null)",
      "right" : "if (compiler != null && compiler.getSourceMap() != null)",
      "info" : "IfStatement[13998-14122]:IfStatement[13998-14122]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14055-14122]:Block[14055-14122]"
    }, {
      "left" : "compiler.getSourceMap().setWrapperPrefix(prefix);",
      "right" : "compiler.getSourceMap().setWrapperPrefix(prefix);",
      "info" : "ExpressionStatement[14065-14114]:ExpressionStatement[14065-14114]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14135-14167]:Block[14135-14167]"
    }, {
      "left" : "out.println(code);",
      "right" : "out.println(code);",
      "info" : "ExpressionStatement[14143-14161]:ExpressionStatement[14143-14161]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14345-14682]:Block[14345-14682]"
    }, {
      "left" : "if (pathPrefix.length() > 0)",
      "right" : "if (pathPrefix.length() > 0)",
      "info" : "IfStatement[14351-14678]:IfStatement[14351-14678]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14380-14678]:Block[14380-14678]"
    }, {
      "left" : "String dirName =\n          pathPrefix.charAt(pathPrefix.length() - 1) == File.separatorChar\n              ? pathPrefix.substring(0, pathPrefix.length() - 1) : new File(\n                  pathPrefix).getParent();",
      "right" : "String dirName =\n          pathPrefix.charAt(pathPrefix.length() - 1) == File.separatorChar\n              ? pathPrefix.substring(0, pathPrefix.length() - 1) : new File(\n                  pathPrefix).getParent();",
      "info" : "VariableDeclarationStatement[14388-14599]:VariableDeclarationStatement[14388-14599]"
    }, {
      "left" : "if (dirName != null)",
      "right" : "if (dirName != null)",
      "info" : "IfStatement[14606-14672]:IfStatement[14606-14672]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14627-14672]:Block[14627-14672]"
    }, {
      "left" : "new File(dirName).mkdirs();",
      "right" : "new File(dirName).mkdirs();",
      "info" : "ExpressionStatement[14637-14664]:ExpressionStatement[14637-14664]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14854-16279]:Block[14854-16279]"
    }, {
      "left" : "Compiler.setLoggingLevel(Level.parse(config.loggingLevel));",
      "right" : "Compiler.setLoggingLevel(Level.parse(config.loggingLevel));",
      "info" : "ExpressionStatement[14860-14919]:ExpressionStatement[14860-14919]"
    }, {
      "left" : "List<JSSourceFile> externsList = createExterns();",
      "right" : "List<JSSourceFile> externsList = createExterns();",
      "info" : "VariableDeclarationStatement[14925-14974]:VariableDeclarationStatement[14925-14974]"
    }, {
      "left" : "JSSourceFile[] externs = new JSSourceFile[externsList.size()];",
      "right" : "JSSourceFile[] externs = new JSSourceFile[externsList.size()];",
      "info" : "VariableDeclarationStatement[14979-15041]:VariableDeclarationStatement[14979-15041]"
    }, {
      "left" : "externsList.toArray(externs);",
      "right" : "externsList.toArray(externs);",
      "info" : "ExpressionStatement[15046-15075]:ExpressionStatement[15046-15075]"
    }, {
      "left" : "compiler = createCompiler();",
      "right" : "compiler = createCompiler();",
      "info" : "ExpressionStatement[15081-15109]:ExpressionStatement[15081-15109]"
    }, {
      "left" : "B options = createOptions();",
      "right" : "B options = createOptions();",
      "info" : "VariableDeclarationStatement[15114-15142]:VariableDeclarationStatement[15114-15142]"
    }, {
      "left" : "JSModule[] modules = null;",
      "right" : "JSModule[] modules = null;",
      "info" : "VariableDeclarationStatement[15148-15174]:VariableDeclarationStatement[15148-15174]"
    }, {
      "left" : "Result result;",
      "right" : "Result result;",
      "info" : "VariableDeclarationStatement[15179-15193]:VariableDeclarationStatement[15179-15193]"
    }, {
      "left" : "setRunOptions(options);",
      "right" : "setRunOptions(options);",
      "info" : "ExpressionStatement[15199-15222]:ExpressionStatement[15199-15222]"
    }, {
      "left" : "if (inputCharset == Charsets.UTF_8)",
      "right" : "if (inputCharset == Charsets.UTF_8)",
      "info" : "IfStatement[15473-15622]:IfStatement[15473-15622]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15509-15565]:Block[15509-15565]"
    }, {
      "left" : "options.outputCharset = Charsets.US_ASCII;",
      "right" : "options.outputCharset = Charsets.US_ASCII;",
      "info" : "ExpressionStatement[15517-15559]:ExpressionStatement[15517-15559]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15571-15622]:Block[15571-15622]"
    }, {
      "left" : "options.outputCharset = inputCharset;",
      "right" : "options.outputCharset = inputCharset;",
      "info" : "ExpressionStatement[15579-15616]:ExpressionStatement[15579-15616]"
    }, {
      "left" : "if (!options.jsOutputFile.isEmpty())",
      "right" : "if (!options.jsOutputFile.isEmpty())",
      "info" : "IfStatement[15628-15744]:IfStatement[15628-15744]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15665-15744]:Block[15665-15744]"
    }, {
      "left" : "out = new PrintStream(options.jsOutputFile, inputCharset.name());",
      "right" : "out = new PrintStream(options.jsOutputFile, inputCharset.name());",
      "info" : "ExpressionStatement[15673-15738]:ExpressionStatement[15673-15738]"
    }, {
      "left" : "List<String> jsFiles = config.js;",
      "right" : "List<String> jsFiles = config.js;",
      "info" : "VariableDeclarationStatement[15750-15783]:VariableDeclarationStatement[15750-15783]"
    }, {
      "left" : "List<String> moduleSpecs = config.module;",
      "right" : "List<String> moduleSpecs = config.module;",
      "info" : "VariableDeclarationStatement[15788-15829]:VariableDeclarationStatement[15788-15829]"
    }, {
      "left" : "if (!moduleSpecs.isEmpty())",
      "right" : "if (!moduleSpecs.isEmpty())",
      "info" : "IfStatement[15834-16221]:IfStatement[15834-16221]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15862-15984]:Block[15862-15984]"
    }, {
      "left" : "modules = createJsModules(moduleSpecs, jsFiles);",
      "right" : "modules = createJsModules(moduleSpecs, jsFiles);",
      "info" : "ExpressionStatement[15870-15918]:ExpressionStatement[15870-15918]"
    }, {
      "left" : "result = compiler.compile(externs, modules, options);",
      "right" : "result = compiler.compile(externs, modules, options);",
      "info" : "ExpressionStatement[15925-15978]:ExpressionStatement[15925-15978]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15990-16221]:Block[15990-16221]"
    }, {
      "left" : "List<JSSourceFile> inputList = createSourceInputs(jsFiles);",
      "right" : "List<JSSourceFile> inputList = createSourceInputs(jsFiles);",
      "info" : "VariableDeclarationStatement[15998-16057]:VariableDeclarationStatement[15998-16057]"
    }, {
      "left" : "JSSourceFile[] inputs = new JSSourceFile[inputList.size()];",
      "right" : "JSSourceFile[] inputs = new JSSourceFile[inputList.size()];",
      "info" : "VariableDeclarationStatement[16064-16123]:VariableDeclarationStatement[16064-16123]"
    }, {
      "left" : "inputList.toArray(inputs);",
      "right" : "inputList.toArray(inputs);",
      "info" : "ExpressionStatement[16130-16156]:ExpressionStatement[16130-16156]"
    }, {
      "left" : "result = compiler.compile(externs, inputs, options);",
      "right" : "result = compiler.compile(externs, inputs, options);",
      "info" : "ExpressionStatement[16163-16215]:ExpressionStatement[16163-16215]"
    }, {
      "left" : "return processResults(result, modules, options);",
      "right" : "return processResults(result, modules, options);",
      "info" : "ReturnStatement[16227-16275]:ReturnStatement[16227-16275]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16480-19614]:Block[16480-19614]"
    }, {
      "left" : "if (config.computePhaseOrdering)",
      "right" : "if (config.computePhaseOrdering)",
      "info" : "IfStatement[16486-16542]:IfStatement[16486-16542]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16519-16542]:Block[16519-16542]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[16527-16536]:ReturnStatement[16527-16536]"
    }, {
      "left" : "if (config.printPassGraph)",
      "right" : "if (config.printPassGraph)",
      "info" : "IfStatement[16548-16785]:IfStatement[16548-16785]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16575-16785]:Block[16575-16785]"
    }, {
      "left" : "if (compiler.getRoot() == null)",
      "right" : "if (compiler.getRoot() == null)",
      "info" : "IfStatement[16583-16779]:IfStatement[16583-16779]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16615-16642]:Block[16615-16642]"
    }, {
      "left" : "return 1;",
      "right" : "return 1;",
      "info" : "ReturnStatement[16625-16634]:ReturnStatement[16625-16634]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16648-16779]:Block[16648-16779]"
    }, {
      "left" : "out.append(DotFormatter.toDot(compiler.getPassConfig().getPassGraph()));",
      "right" : "out.append(DotFormatter.toDot(compiler.getPassConfig().getPassGraph()));",
      "info" : "ExpressionStatement[16658-16730]:ExpressionStatement[16658-16730]"
    }, {
      "left" : "out.println();",
      "right" : "out.println();",
      "info" : "ExpressionStatement[16739-16753]:ExpressionStatement[16739-16753]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[16762-16771]:ReturnStatement[16762-16771]"
    }, {
      "left" : "if (config.printAst)",
      "right" : "if (config.printAst)",
      "info" : "IfStatement[16791-17063]:IfStatement[16791-17063]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16812-17063]:Block[16812-17063]"
    }, {
      "left" : "if (compiler.getRoot() == null)",
      "right" : "if (compiler.getRoot() == null)",
      "info" : "IfStatement[16820-17057]:IfStatement[16820-17057]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16852-16879]:Block[16852-16879]"
    }, {
      "left" : "return 1;",
      "right" : "return 1;",
      "info" : "ReturnStatement[16862-16871]:ReturnStatement[16862-16871]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16885-17057]:Block[16885-17057]"
    }, {
      "left" : "ControlFlowGraph<Node> cfg = compiler.computeCFG();",
      "right" : "ControlFlowGraph<Node> cfg = compiler.computeCFG();",
      "info" : "VariableDeclarationStatement[16895-16946]:VariableDeclarationStatement[16895-16946]"
    }, {
      "left" : "DotFormatter.appendDot(compiler.getRoot(), cfg, out);",
      "right" : "DotFormatter.appendDot(compiler.getRoot(), cfg, out);",
      "info" : "ExpressionStatement[16955-17008]:ExpressionStatement[16955-17008]"
    }, {
      "left" : "out.println();",
      "right" : "out.println();",
      "info" : "ExpressionStatement[17017-17031]:ExpressionStatement[17017-17031]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[17040-17049]:ReturnStatement[17040-17049]"
    }, {
      "left" : "if (config.printTree)",
      "right" : "if (config.printTree)",
      "info" : "IfStatement[17069-17341]:IfStatement[17069-17341]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17091-17341]:Block[17091-17341]"
    }, {
      "left" : "if (compiler.getRoot() == null)",
      "right" : "if (compiler.getRoot() == null)",
      "info" : "IfStatement[17099-17335]:IfStatement[17099-17335]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17131-17227]:Block[17131-17227]"
    }, {
      "left" : "out.println(\"Code contains errors; no tree was generated.\");",
      "right" : "out.println(\"Code contains errors; no tree was generated.\");",
      "info" : "ExpressionStatement[17141-17201]:ExpressionStatement[17141-17201]"
    }, {
      "left" : "return 1;",
      "right" : "return 1;",
      "info" : "ReturnStatement[17210-17219]:ReturnStatement[17210-17219]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17233-17335]:Block[17233-17335]"
    }, {
      "left" : "compiler.getRoot().appendStringTree(out);",
      "right" : "compiler.getRoot().appendStringTree(out);",
      "info" : "ExpressionStatement[17243-17284]:ExpressionStatement[17243-17284]"
    }, {
      "left" : "out.println(\"\");",
      "right" : "out.println(\"\");",
      "info" : "ExpressionStatement[17293-17309]:ExpressionStatement[17293-17309]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[17318-17327]:ReturnStatement[17318-17327]"
    }, {
      "left" : "if (result.success)",
      "right" : "if (result.success)",
      "info" : "IfStatement[17347-19504]:IfStatement[17347-19504]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17367-19504]:Block[17367-19504]"
    }, {
      "left" : "if (modules == null)",
      "right" : "if (modules == null)",
      "info" : "IfStatement[17375-19141]:IfStatement[17375-19141]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17396-17628]:Block[17396-17628]"
    }, {
      "left" : "writeOutput(out, compiler, compiler.toSource(), config.outputWrapper,\n            config.outputWrapperMarker);",
      "right" : "writeOutput(out, compiler, compiler.toSource(), config.outputWrapper,\n            config.outputWrapperMarker);",
      "info" : "ExpressionStatement[17406-17516]:ExpressionStatement[17406-17516]"
    }, {
      "left" : "outputSourceMap(options, options.jsOutputFile);",
      "right" : "outputSourceMap(options, options.jsOutputFile);",
      "info" : "ExpressionStatement[17573-17620]:ExpressionStatement[17573-17620]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17634-19141]:Block[17634-19141]"
    }, {
      "left" : "String moduleFilePrefix = config.moduleOutputPathPrefix;",
      "right" : "String moduleFilePrefix = config.moduleOutputPathPrefix;",
      "info" : "VariableDeclarationStatement[17644-17700]:VariableDeclarationStatement[17644-17700]"
    }, {
      "left" : "maybeCreateDirsForPath(moduleFilePrefix);",
      "right" : "maybeCreateDirsForPath(moduleFilePrefix);",
      "info" : "ExpressionStatement[17709-17750]:ExpressionStatement[17709-17750]"
    }, {
      "left" : "Map<String, String> moduleWrappers =\n            parseModuleWrappers(config.moduleWrapper, modules);",
      "right" : "Map<String, String> moduleWrappers =\n            parseModuleWrappers(config.moduleWrapper, modules);",
      "info" : "VariableDeclarationStatement[17759-17859]:VariableDeclarationStatement[17759-17859]"
    }, {
      "left" : "PrintStream mapOut = null;",
      "right" : "PrintStream mapOut = null;",
      "info" : "VariableDeclarationStatement[18030-18056]:VariableDeclarationStatement[18030-18056]"
    }, {
      "left" : "if (!shouldGenerateMapPerModule(options))",
      "right" : "if (!shouldGenerateMapPerModule(options))",
      "info" : "IfStatement[18066-18186]:IfStatement[18066-18186]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18108-18186]:Block[18108-18186]"
    }, {
      "left" : "mapOut = openSourceMapStream(options, moduleFilePrefix);",
      "right" : "mapOut = openSourceMapStream(options, moduleFilePrefix);",
      "info" : "ExpressionStatement[18120-18176]:ExpressionStatement[18120-18176]"
    }, {
      "left" : "for (JSModule m : modules)",
      "right" : "for (JSModule m : modules)",
      "info" : "EnhancedForStatement[18196-19066]:EnhancedForStatement[18196-19066]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18223-19066]:Block[18223-19066]"
    }, {
      "left" : "if (shouldGenerateMapPerModule(options))",
      "right" : "if (shouldGenerateMapPerModule(options))",
      "info" : "IfStatement[18235-18397]:IfStatement[18235-18397]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18276-18397]:Block[18276-18397]"
    }, {
      "left" : "mapOut = openSourceMapStream(\n                options, moduleFilePrefix + m.getName() + \".js\");",
      "right" : "mapOut = openSourceMapStream(\n                options, moduleFilePrefix + m.getName() + \".js\");",
      "info" : "ExpressionStatement[18290-18385]:ExpressionStatement[18290-18385]"
    }, {
      "left" : "PrintStream ps =\n              new PrintStream(new FileOutputStream(moduleFilePrefix\n                  + m.getName() + \".js\"));",
      "right" : "PrintStream ps =\n              new PrintStream(new FileOutputStream(moduleFilePrefix\n                  + m.getName() + \".js\"));",
      "info" : "VariableDeclarationStatement[18409-18536]:VariableDeclarationStatement[18409-18536]"
    }, {
      "left" : "if (options.sourceMapOutputPath != null)",
      "right" : "if (options.sourceMapOutputPath != null)",
      "info" : "IfStatement[18548-18647]:IfStatement[18548-18647]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18589-18647]:Block[18589-18647]"
    }, {
      "left" : "compiler.getSourceMap().reset();",
      "right" : "compiler.getSourceMap().reset();",
      "info" : "ExpressionStatement[18603-18635]:ExpressionStatement[18603-18635]"
    }, {
      "left" : "writeOutput(ps, compiler, compiler.toSource(m), moduleWrappers.get(\n              m.getName()), \"%s\");",
      "right" : "writeOutput(ps, compiler, compiler.toSource(m), moduleWrappers.get(\n              m.getName()), \"%s\");",
      "info" : "ExpressionStatement[18659-18761]:ExpressionStatement[18659-18761]"
    }, {
      "left" : "if (options.sourceMapOutputPath != null)",
      "right" : "if (options.sourceMapOutputPath != null)",
      "info" : "IfStatement[18773-18894]:IfStatement[18773-18894]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18814-18894]:Block[18814-18894]"
    }, {
      "left" : "compiler.getSourceMap().appendTo(mapOut, m.getName());",
      "right" : "compiler.getSourceMap().appendTo(mapOut, m.getName());",
      "info" : "ExpressionStatement[18828-18882]:ExpressionStatement[18828-18882]"
    }, {
      "left" : "ps.close();",
      "right" : "ps.close();",
      "info" : "ExpressionStatement[18906-18917]:ExpressionStatement[18906-18917]"
    }, {
      "left" : "if (shouldGenerateMapPerModule(options) && mapOut != null)",
      "right" : "if (shouldGenerateMapPerModule(options) && mapOut != null)",
      "info" : "IfStatement[18929-19056]:IfStatement[18929-19056]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18988-19056]:Block[18988-19056]"
    }, {
      "left" : "mapOut.close();",
      "right" : "mapOut.close();",
      "info" : "ExpressionStatement[19002-19017]:ExpressionStatement[19002-19017]"
    }, {
      "left" : "mapOut = null;",
      "right" : "mapOut = null;",
      "info" : "ExpressionStatement[19030-19044]:ExpressionStatement[19030-19044]"
    }, {
      "left" : "if (mapOut != null)",
      "right" : "if (mapOut != null)",
      "info" : "IfStatement[19076-19133]:IfStatement[19076-19133]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19096-19133]:Block[19096-19133]"
    }, {
      "left" : "mapOut.close();",
      "right" : "mapOut.close();",
      "info" : "ExpressionStatement[19108-19123]:ExpressionStatement[19108-19123]"
    }, {
      "left" : "if (options.externExportsPath != null)",
      "right" : "if (options.externExportsPath != null)",
      "info" : "IfStatement[19190-19400]:IfStatement[19190-19400]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19229-19400]:Block[19229-19400]"
    }, {
      "left" : "PrintStream eeOut =\n            openExternExportsStream(options, options.jsOutputFile);",
      "right" : "PrintStream eeOut =\n            openExternExportsStream(options, options.jsOutputFile);",
      "info" : "VariableDeclarationStatement[19239-19326]:VariableDeclarationStatement[19239-19326]"
    }, {
      "left" : "eeOut.append(result.externExport);",
      "right" : "eeOut.append(result.externExport);",
      "info" : "ExpressionStatement[19335-19369]:ExpressionStatement[19335-19369]"
    }, {
      "left" : "eeOut.close();",
      "right" : "eeOut.close();",
      "info" : "ExpressionStatement[19378-19392]:ExpressionStatement[19378-19392]"
    }, {
      "left" : "outputNameMaps(options);",
      "right" : "outputNameMaps(options);",
      "info" : "ExpressionStatement[19474-19498]:ExpressionStatement[19474-19498]"
    }, {
      "left" : "return Math.min(result.errors.length, 0x7f);",
      "right" : "return Math.min(result.errors.length, 0x7f);",
      "info" : "ReturnStatement[19566-19610]:ReturnStatement[19566-19610]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19910-20189]:Block[19910-20189]"
    }, {
      "left" : "if (!config.charset.isEmpty())",
      "right" : "if (!config.charset.isEmpty())",
      "info" : "IfStatement[19916-20158]:IfStatement[19916-20158]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19947-20158]:Block[19947-20158]"
    }, {
      "left" : "if (!Charset.isSupported(config.charset))",
      "right" : "if (!Charset.isSupported(config.charset))",
      "info" : "IfStatement[19955-20106]:IfStatement[19955-20106]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19997-20106]:Block[19997-20106]"
    }, {
      "left" : "throw new FlagUsageException(config.charset +\n            \" is not a valid charset name.\");",
      "right" : "throw new FlagUsageException(config.charset +\n            \" is not a valid charset name.\");",
      "info" : "ThrowStatement[20007-20098]:ThrowStatement[20007-20098]"
    }, {
      "left" : "return Charset.forName(config.charset);",
      "right" : "return Charset.forName(config.charset);",
      "info" : "ReturnStatement[20113-20152]:ReturnStatement[20113-20152]"
    }, {
      "left" : "return Charsets.UTF_8;",
      "right" : "return Charsets.UTF_8;",
      "info" : "ReturnStatement[20163-20185]:ReturnStatement[20163-20185]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20283-20335]:Block[20283-20335]"
    }, {
      "left" : "return createExternInputs(config.externs);",
      "right" : "return createExternInputs(config.externs);",
      "info" : "ReturnStatement[20289-20331]:ReturnStatement[20289-20331]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20617-20731]:Block[20617-20731]"
    }, {
      "left" : "return options.sourceMapOutputPath != null\n        && options.sourceMapOutputPath.contains(\"%outname%\");",
      "right" : "return options.sourceMapOutputPath != null\n        && options.sourceMapOutputPath.contains(\"%outname%\");",
      "info" : "ReturnStatement[20623-20727]:ReturnStatement[20623-20727]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21100-21442]:Block[21100-21442]"
    }, {
      "left" : "if (options.externExportsPath == null)",
      "right" : "if (options.externExportsPath == null)",
      "info" : "IfStatement[21106-21171]:IfStatement[21106-21171]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21145-21171]:Block[21145-21171]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[21153-21165]:ReturnStatement[21153-21165]"
    }, {
      "left" : "String exPath = options.externExportsPath;",
      "right" : "String exPath = options.externExportsPath;",
      "info" : "VariableDeclarationStatement[21177-21219]:VariableDeclarationStatement[21177-21219]"
    }, {
      "left" : "if (!exPath.contains(File.separator))",
      "right" : "if (!exPath.contains(File.separator))",
      "info" : "IfStatement[21225-21379]:IfStatement[21225-21379]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21263-21379]:Block[21263-21379]"
    }, {
      "left" : "File outputFile = new File(path);",
      "right" : "File outputFile = new File(path);",
      "info" : "VariableDeclarationStatement[21271-21304]:VariableDeclarationStatement[21271-21304]"
    }, {
      "left" : "exPath = outputFile.getParent() + File.separatorChar + exPath;",
      "right" : "exPath = outputFile.getParent() + File.separatorChar + exPath;",
      "info" : "ExpressionStatement[21311-21373]:ExpressionStatement[21311-21373]"
    }, {
      "left" : "return new PrintStream(new FileOutputStream(exPath));",
      "right" : "return new PrintStream(new FileOutputStream(exPath));",
      "info" : "ReturnStatement[21385-21438]:ReturnStatement[21385-21438]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21899-22422]:Block[21899-22422]"
    }, {
      "left" : "if (options.sourceMapOutputPath == null)",
      "right" : "if (options.sourceMapOutputPath == null)",
      "info" : "IfStatement[21905-21972]:IfStatement[21905-21972]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21946-21972]:Block[21946-21972]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[21954-21966]:ReturnStatement[21954-21966]"
    }, {
      "left" : "String sourceMapPath = options.sourceMapOutputPath;",
      "right" : "String sourceMapPath = options.sourceMapOutputPath;",
      "info" : "VariableDeclarationStatement[21978-22029]:VariableDeclarationStatement[21978-22029]"
    }, {
      "left" : "sourceMapPath = sourceMapPath.replace(\"%outname%\", path);",
      "right" : "sourceMapPath = sourceMapPath.replace(\"%outname%\", path);",
      "info" : "ExpressionStatement[22034-22091]:ExpressionStatement[22034-22091]"
    }, {
      "left" : "String mapPath = null;",
      "right" : "String mapPath = null;",
      "info" : "VariableDeclarationStatement[22097-22119]:VariableDeclarationStatement[22097-22119]"
    }, {
      "left" : "if (sourceMapPath.contains(\"/\") || sourceMapPath.contains(\"\\\\\"))",
      "right" : "if (sourceMapPath.contains(\"/\") || sourceMapPath.contains(\"\\\\\"))",
      "info" : "IfStatement[22125-22358]:IfStatement[22125-22358]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22190-22228]:Block[22190-22228]"
    }, {
      "left" : "mapPath = sourceMapPath;",
      "right" : "mapPath = sourceMapPath;",
      "info" : "ExpressionStatement[22198-22222]:ExpressionStatement[22198-22222]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22234-22358]:Block[22234-22358]"
    }, {
      "left" : "File outputFile = new File(path);",
      "right" : "File outputFile = new File(path);",
      "info" : "VariableDeclarationStatement[22242-22275]:VariableDeclarationStatement[22242-22275]"
    }, {
      "left" : "mapPath = outputFile.getParent() + File.separatorChar + sourceMapPath;",
      "right" : "mapPath = outputFile.getParent() + File.separatorChar + sourceMapPath;",
      "info" : "ExpressionStatement[22282-22352]:ExpressionStatement[22282-22352]"
    }, {
      "left" : "return new PrintStream(new FileOutputStream(mapPath));",
      "right" : "return new PrintStream(new FileOutputStream(mapPath));",
      "info" : "ReturnStatement[22364-22418]:ReturnStatement[22364-22418]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22757-23008]:Block[22757-23008]"
    }, {
      "left" : "if (options.sourceMapOutputPath == null)",
      "right" : "if (options.sourceMapOutputPath == null)",
      "info" : "IfStatement[22763-22825]:IfStatement[22763-22825]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22804-22825]:Block[22804-22825]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[22812-22819]:ReturnStatement[22812-22819]"
    }, {
      "left" : "File outputFile = new File(path);",
      "right" : "File outputFile = new File(path);",
      "info" : "VariableDeclarationStatement[22831-22864]:VariableDeclarationStatement[22831-22864]"
    }, {
      "left" : "PrintStream out = openSourceMapStream(options, path);",
      "right" : "PrintStream out = openSourceMapStream(options, path);",
      "info" : "VariableDeclarationStatement[22869-22922]:VariableDeclarationStatement[22869-22922]"
    }, {
      "left" : "compiler.getSourceMap().appendTo(out, outputFile.getName());",
      "right" : "compiler.getSourceMap().appendTo(out, outputFile.getName());",
      "info" : "ExpressionStatement[22927-22987]:ExpressionStatement[22927-22987]"
    }, {
      "left" : "out.close();",
      "right" : "out.close();",
      "info" : "ExpressionStatement[22992-23004]:ExpressionStatement[22992-23004]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23256-24016]:Block[23256-24016]"
    }, {
      "left" : "String basePath = \"\";",
      "right" : "String basePath = \"\";",
      "info" : "VariableDeclarationStatement[23262-23283]:VariableDeclarationStatement[23262-23283]"
    }, {
      "left" : "if (outputFile.equals(\"\"))",
      "right" : "if (outputFile.equals(\"\"))",
      "info" : "IfStatement[23289-23990]:IfStatement[23289-23990]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23316-23588]:Block[23316-23588]"
    }, {
      "left" : "if (!config.moduleOutputPathPrefix.equals(\"\"))",
      "right" : "if (!config.moduleOutputPathPrefix.equals(\"\"))",
      "info" : "IfStatement[23428-23582]:IfStatement[23428-23582]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23475-23534]:Block[23475-23534]"
    }, {
      "left" : "basePath = config.moduleOutputPathPrefix;",
      "right" : "basePath = config.moduleOutputPathPrefix;",
      "info" : "ExpressionStatement[23485-23526]:ExpressionStatement[23485-23526]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23540-23582]:Block[23540-23582]"
    }, {
      "left" : "basePath = \"jscompiler\";",
      "right" : "basePath = \"jscompiler\";",
      "info" : "ExpressionStatement[23550-23574]:ExpressionStatement[23550-23574]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23594-23990]:Block[23594-23990]"
    }, {
      "left" : "File file = new File(outputFile);",
      "right" : "File file = new File(outputFile);",
      "info" : "VariableDeclarationStatement[23644-23677]:VariableDeclarationStatement[23644-23677]"
    }, {
      "left" : "String outputFileName = file.getName();",
      "right" : "String outputFileName = file.getName();",
      "info" : "VariableDeclarationStatement[23685-23724]:VariableDeclarationStatement[23685-23724]"
    }, {
      "left" : "if (outputFileName.endsWith(\".js\"))",
      "right" : "if (outputFileName.endsWith(\".js\"))",
      "info" : "IfStatement[23770-23910]:IfStatement[23770-23910]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23806-23910]:Block[23806-23910]"
    }, {
      "left" : "outputFileName =\n            outputFileName.substring(0, outputFileName.length() - 3);",
      "right" : "outputFileName =\n            outputFileName.substring(0, outputFileName.length() - 3);",
      "info" : "ExpressionStatement[23816-23902]:ExpressionStatement[23816-23902]"
    }, {
      "left" : "basePath = file.getParent() + File.separatorChar + outputFileName;",
      "right" : "basePath = file.getParent() + File.separatorChar + outputFileName;",
      "info" : "ExpressionStatement[23918-23984]:ExpressionStatement[23918-23984]"
    }, {
      "left" : "return basePath;",
      "right" : "return basePath;",
      "info" : "ReturnStatement[23996-24012]:ReturnStatement[23996-24012]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24226-26197]:Block[24226-26197]"
    }, {
      "left" : "String propertyMapOutputPath = null;",
      "right" : "String propertyMapOutputPath = null;",
      "info" : "VariableDeclarationStatement[24233-24269]:VariableDeclarationStatement[24233-24269]"
    }, {
      "left" : "String variableMapOutputPath = null;",
      "right" : "String variableMapOutputPath = null;",
      "info" : "VariableDeclarationStatement[24274-24310]:VariableDeclarationStatement[24274-24310]"
    }, {
      "left" : "String functionInformationMapOutputPath = null;",
      "right" : "String functionInformationMapOutputPath = null;",
      "info" : "VariableDeclarationStatement[24315-24362]:VariableDeclarationStatement[24315-24362]"
    }, {
      "left" : "if (config.createNameMapFiles)",
      "right" : "if (config.createNameMapFiles)",
      "info" : "IfStatement[24413-24701]:IfStatement[24413-24701]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24444-24701]:Block[24444-24701]"
    }, {
      "left" : "String basePath = getMapPath(options.jsOutputFile);",
      "right" : "String basePath = getMapPath(options.jsOutputFile);",
      "info" : "VariableDeclarationStatement[24452-24503]:VariableDeclarationStatement[24452-24503]"
    }, {
      "left" : "propertyMapOutputPath = basePath + \"_props_map.out\";",
      "right" : "propertyMapOutputPath = basePath + \"_props_map.out\";",
      "info" : "ExpressionStatement[24511-24563]:ExpressionStatement[24511-24563]"
    }, {
      "left" : "variableMapOutputPath = basePath + \"_vars_map.out\";",
      "right" : "variableMapOutputPath = basePath + \"_vars_map.out\";",
      "info" : "ExpressionStatement[24570-24621]:ExpressionStatement[24570-24621]"
    }, {
      "left" : "functionInformationMapOutputPath = basePath + \"_functions_map.out\";",
      "right" : "functionInformationMapOutputPath = basePath + \"_functions_map.out\";",
      "info" : "ExpressionStatement[24628-24695]:ExpressionStatement[24628-24695]"
    }, {
      "left" : "if (!config.variableMapOutputFile.equals(\"\"))",
      "right" : "if (!config.variableMapOutputFile.equals(\"\"))",
      "info" : "IfStatement[24742-25062]:IfStatement[24742-25062]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24788-25062]:Block[24788-25062]"
    }, {
      "left" : "if (variableMapOutputPath != null)",
      "right" : "if (variableMapOutputPath != null)",
      "info" : "IfStatement[24796-24995]:IfStatement[24796-24995]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24831-24995]:Block[24831-24995]"
    }, {
      "left" : "throw new FlagUsageException(\"The flags variable_map_output_file and \"\n            + \"create_name_map_files cannot both be used simultaniously.\");",
      "right" : "throw new FlagUsageException(\"The flags variable_map_output_file and \"\n            + \"create_name_map_files cannot both be used simultaniously.\");",
      "info" : "ThrowStatement[24841-24987]:ThrowStatement[24841-24987]"
    }, {
      "left" : "variableMapOutputPath = config.variableMapOutputFile;",
      "right" : "variableMapOutputPath = config.variableMapOutputFile;",
      "info" : "ExpressionStatement[25003-25056]:ExpressionStatement[25003-25056]"
    }, {
      "left" : "if (!config.propertyMapOutputFile.equals(\"\"))",
      "right" : "if (!config.propertyMapOutputFile.equals(\"\"))",
      "info" : "IfStatement[25068-25388]:IfStatement[25068-25388]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25114-25388]:Block[25114-25388]"
    }, {
      "left" : "if (propertyMapOutputPath != null)",
      "right" : "if (propertyMapOutputPath != null)",
      "info" : "IfStatement[25122-25321]:IfStatement[25122-25321]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25157-25321]:Block[25157-25321]"
    }, {
      "left" : "throw new FlagUsageException(\"The flags property_map_output_file and \"\n            + \"create_name_map_files cannot both be used simultaniously.\");",
      "right" : "throw new FlagUsageException(\"The flags property_map_output_file and \"\n            + \"create_name_map_files cannot both be used simultaniously.\");",
      "info" : "ThrowStatement[25167-25313]:ThrowStatement[25167-25313]"
    }, {
      "left" : "propertyMapOutputPath = config.propertyMapOutputFile;",
      "right" : "propertyMapOutputPath = config.propertyMapOutputFile;",
      "info" : "ExpressionStatement[25329-25382]:ExpressionStatement[25329-25382]"
    }, {
      "left" : "if (variableMapOutputPath != null)",
      "right" : "if (variableMapOutputPath != null)",
      "info" : "IfStatement[25418-25578]:IfStatement[25418-25578]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25453-25578]:Block[25453-25578]"
    }, {
      "left" : "if (compiler.getVariableMap() != null)",
      "right" : "if (compiler.getVariableMap() != null)",
      "info" : "IfStatement[25461-25572]:IfStatement[25461-25572]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25500-25572]:Block[25500-25572]"
    }, {
      "left" : "compiler.getVariableMap().save(variableMapOutputPath);",
      "right" : "compiler.getVariableMap().save(variableMapOutputPath);",
      "info" : "ExpressionStatement[25510-25564]:ExpressionStatement[25510-25564]"
    }, {
      "left" : "if (propertyMapOutputPath != null)",
      "right" : "if (propertyMapOutputPath != null)",
      "info" : "IfStatement[25584-25744]:IfStatement[25584-25744]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25619-25744]:Block[25619-25744]"
    }, {
      "left" : "if (compiler.getPropertyMap() != null)",
      "right" : "if (compiler.getPropertyMap() != null)",
      "info" : "IfStatement[25627-25738]:IfStatement[25627-25738]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25666-25738]:Block[25666-25738]"
    }, {
      "left" : "compiler.getPropertyMap().save(propertyMapOutputPath);",
      "right" : "compiler.getPropertyMap().save(propertyMapOutputPath);",
      "info" : "ExpressionStatement[25676-25730]:ExpressionStatement[25676-25730]"
    }, {
      "left" : "if (functionInformationMapOutputPath != null)",
      "right" : "if (functionInformationMapOutputPath != null)",
      "info" : "IfStatement[25750-26193]:IfStatement[25750-26193]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25796-26193]:Block[25796-26193]"
    }, {
      "left" : "if (compiler.getFunctionalInformationMap() != null)",
      "right" : "if (compiler.getFunctionalInformationMap() != null)",
      "info" : "IfStatement[25804-26187]:IfStatement[25804-26187]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25856-26187]:Block[25856-26187]"
    }, {
      "left" : "FileOutputStream file =\n            new FileOutputStream(functionInformationMapOutputPath);",
      "right" : "FileOutputStream file =\n            new FileOutputStream(functionInformationMapOutputPath);",
      "info" : "VariableDeclarationStatement[25866-25957]:VariableDeclarationStatement[25866-25957]"
    }, {
      "left" : "CodedOutputStream outputStream = CodedOutputStream.newInstance(file);",
      "right" : "CodedOutputStream outputStream = CodedOutputStream.newInstance(file);",
      "info" : "VariableDeclarationStatement[25966-26035]:VariableDeclarationStatement[25966-26035]"
    }, {
      "left" : "compiler.getFunctionalInformationMap().writeTo(outputStream);",
      "right" : "compiler.getFunctionalInformationMap().writeTo(outputStream);",
      "info" : "ExpressionStatement[26044-26105]:ExpressionStatement[26044-26105]"
    }, {
      "left" : "outputStream.flush();",
      "right" : "outputStream.flush();",
      "info" : "ExpressionStatement[26114-26135]:ExpressionStatement[26114-26135]"
    }, {
      "left" : "file.flush();",
      "right" : "file.flush();",
      "info" : "ExpressionStatement[26144-26157]:ExpressionStatement[26144-26157]"
    }, {
      "left" : "file.close();",
      "right" : "file.close();",
      "info" : "ExpressionStatement[26166-26179]:ExpressionStatement[26166-26179]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26628-28242]:Block[26628-28351]"
    }, {
      "left" : "for (String override : definitions)",
      "right" : "for (String override : definitions)",
      "info" : "EnhancedForStatement[26663-28238]:EnhancedForStatement[26663-28347]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26699-28238]:Block[26699-28347]"
    }, {
      "left" : "String[] assignment = override.split(\"=\", 2);",
      "right" : "String[] assignment = override.split(\"=\", 2);",
      "info" : "VariableDeclarationStatement[26707-26752]:VariableDeclarationStatement[26707-26752]"
    }, {
      "left" : "String defName = assignment[0];",
      "right" : "String defName = assignment[0];",
      "info" : "VariableDeclarationStatement[26759-26790]:VariableDeclarationStatement[26759-26790]"
    }, {
      "left" : "if (defName.length() > 0)",
      "right" : "if (defName.length() > 0)",
      "info" : "IfStatement[26798-28141]:IfStatement[26798-28250]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26824-28141]:Block[26824-28250]"
    }, {
      "left" : "if (assignment.length == 1)",
      "right" : "if (assignment.length == 1)",
      "info" : "IfStatement[26834-28133]:IfStatement[26834-28242]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26862-26953]:Block[26862-26953]"
    }, {
      "left" : "options.setDefineToBooleanLiteral(defName, true);",
      "right" : "options.setDefineToBooleanLiteral(defName, true);",
      "info" : "ExpressionStatement[26874-26923]:ExpressionStatement[26874-26923]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[26934-26943]:ContinueStatement[26934-26943]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26959-28133]:Block[26959-28242]"
    }, {
      "left" : "String defValue = assignment[1];",
      "right" : "String defValue = assignment[1];",
      "info" : "VariableDeclarationStatement[26971-27003]:VariableDeclarationStatement[26971-27003]"
    }, {
      "left" : "if (defValue.equals(\"true\"))",
      "right" : "if (defValue.equals(\"true\"))",
      "info" : "IfStatement[27015-28123]:IfStatement[27015-28232]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27044-27141]:Block[27044-27141]"
    }, {
      "left" : "options.setDefineToBooleanLiteral(defName, true);",
      "right" : "options.setDefineToBooleanLiteral(defName, true);",
      "info" : "ExpressionStatement[27058-27107]:ExpressionStatement[27058-27107]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[27120-27129]:ContinueStatement[27120-27129]"
    }, {
      "left" : "if (defValue.equals(\"false\"))",
      "right" : "if (defValue.equals(\"false\"))",
      "info" : "IfStatement[27147-28123]:IfStatement[27147-28232]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27177-27275]:Block[27177-27275]"
    }, {
      "left" : "options.setDefineToBooleanLiteral(defName, false);",
      "right" : "options.setDefineToBooleanLiteral(defName, false);",
      "info" : "ExpressionStatement[27191-27241]:ExpressionStatement[27191-27241]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[27254-27263]:ContinueStatement[27254-27263]"
    }, {
      "left" : "if (defValue.length() > 1\n              && ((defValue.charAt(0) == '\\'' &&\n                  defValue.charAt(defValue.length() - 1) == '\\'')\n            ))",
      "right" : "if (defValue.length() > 1\n              && ((defValue.charAt(0) == '\\'' &&\n                  defValue.charAt(defValue.length() - 1) == '\\'')\n                  || (defValue.charAt(0) == '\\\"' &&\n                      defValue.charAt(defValue.length() - 1) == '\\\"')))",
      "info" : "IfStatement[27281-28123]:IfStatement[27281-28232]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27437-27837]:Block[27546-27946]"
    }, {
      "left" : "String maybeStringVal =\n                defValue.substring(1, defValue.length() - 1);",
      "right" : "String maybeStringVal =\n                defValue.substring(1, defValue.length() - 1);",
      "info" : "VariableDeclarationStatement[27561-27646]:VariableDeclarationStatement[27670-27755]"
    }, {
      "left" : "if (maybeStringVal.indexOf(defValue.charAt(0)) == -1)",
      "right" : "if (maybeStringVal.indexOf(defValue.charAt(0)) == -1)",
      "info" : "IfStatement[27659-27825]:IfStatement[27768-27934]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27713-27825]:Block[27822-27934]"
    }, {
      "left" : "options.setDefineToStringLiteral(defName, maybeStringVal);",
      "right" : "options.setDefineToStringLiteral(defName, maybeStringVal);",
      "info" : "ExpressionStatement[27729-27787]:ExpressionStatement[27838-27896]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[27802-27811]:ContinueStatement[27911-27920]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27843-28123]:Block[27952-28232]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[27857-28111]:TryStatement[27966-28220]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27861-28005]:Block[27970-28114]"
    }, {
      "left" : "options.setDefineToDoubleLiteral(defName,\n                  Double.parseDouble(defValue));",
      "right" : "options.setDefineToDoubleLiteral(defName,\n                  Double.parseDouble(defValue));",
      "info" : "ExpressionStatement[27877-27967]:ExpressionStatement[27986-28076]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[27982-27991]:ContinueStatement[28091-28100]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28038-28111]:Block[28147-28220]"
    }, {
      "left" : "throw new RuntimeException(\n          \"--define flag syntax invalid: \" + override);",
      "right" : "throw new RuntimeException(\n          \"--define flag syntax invalid: \" + override);",
      "info" : "ThrowStatement[28149-28232]:ThrowStatement[28258-28341]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28552-28647]:Block[28661-28756]"
    }, {
      "left" : "lastStartTime = System.currentTimeMillis();",
      "right" : "lastStartTime = System.currentTimeMillis();",
      "info" : "ExpressionStatement[28560-28603]:ExpressionStatement[28669-28712]"
    }, {
      "left" : "PhaseOptimizer.clearLoopsRun();",
      "right" : "PhaseOptimizer.clearLoopsRun();",
      "info" : "ExpressionStatement[28610-28641]:ExpressionStatement[28719-28750]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28729-29017]:Block[28838-29126]"
    }, {
      "left" : "long endTime = System.currentTimeMillis();",
      "right" : "long endTime = System.currentTimeMillis();",
      "info" : "VariableDeclarationStatement[28737-28779]:VariableDeclarationStatement[28846-28888]"
    }, {
      "left" : "long length = endTime - lastStartTime;",
      "right" : "long length = endTime - lastStartTime;",
      "info" : "VariableDeclarationStatement[28786-28824]:VariableDeclarationStatement[28895-28933]"
    }, {
      "left" : "worstRunTime = Math.max(length, worstRunTime);",
      "right" : "worstRunTime = Math.max(length, worstRunTime);",
      "info" : "ExpressionStatement[28831-28877]:ExpressionStatement[28940-28986]"
    }, {
      "left" : "if (length < bestRunTime)",
      "right" : "if (length < bestRunTime)",
      "info" : "IfStatement[28884-29011]:IfStatement[28993-29120]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28910-29011]:Block[29019-29120]"
    }, {
      "left" : "loopedPassesInBestRun = PhaseOptimizer.getLoopsRun();",
      "right" : "loopedPassesInBestRun = PhaseOptimizer.getLoopsRun();",
      "info" : "ExpressionStatement[28920-28973]:ExpressionStatement[29029-29082]"
    }, {
      "left" : "bestRunTime = length;",
      "right" : "bestRunTime = length;",
      "info" : "ExpressionStatement[28982-29003]:ExpressionStatement[29091-29112]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29122-29395]:Block[29231-29504]"
    }, {
      "left" : "out.println(\"Best time: \" + bestRunTime);",
      "right" : "out.println(\"Best time: \" + bestRunTime);",
      "info" : "ExpressionStatement[29130-29171]:ExpressionStatement[29239-29280]"
    }, {
      "left" : "out.println(\"Worst time: \" + worstRunTime);",
      "right" : "out.println(\"Worst time: \" + worstRunTime);",
      "info" : "ExpressionStatement[29178-29221]:ExpressionStatement[29287-29330]"
    }, {
      "left" : "int i = 1;",
      "right" : "int i = 1;",
      "info" : "VariableDeclarationStatement[29229-29239]:VariableDeclarationStatement[29338-29348]"
    }, {
      "left" : "for (List<String> loop : loopedPassesInBestRun)",
      "right" : "for (List<String> loop : loopedPassesInBestRun)",
      "info" : "EnhancedForStatement[29246-29389]:EnhancedForStatement[29355-29498]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29294-29389]:Block[29403-29498]"
    }, {
      "left" : "out.println(\"\\nLoop \" + i + \":\\n\" + Joiner.on(\"\\n\").join(loop));",
      "right" : "out.println(\"\\nLoop \" + i + \":\\n\" + Joiner.on(\"\\n\").join(loop));",
      "info" : "ExpressionStatement[29304-29368]:ExpressionStatement[29413-29477]"
    }, {
      "left" : "i++;",
      "right" : "i++;",
      "info" : "ExpressionStatement[29377-29381]:ExpressionStatement[29486-29490]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29860-29920]:Block[29969-30029]"
    }, {
      "left" : "this.printTree = printTree;",
      "right" : "this.printTree = printTree;",
      "info" : "ExpressionStatement[29868-29895]:ExpressionStatement[29977-30004]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[29902-29914]:ReturnStatement[30011-30023]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30166-30248]:Block[30275-30357]"
    }, {
      "left" : "this.computePhaseOrdering = computePhaseOrdering;",
      "right" : "this.computePhaseOrdering = computePhaseOrdering;",
      "info" : "ExpressionStatement[30174-30223]:ExpressionStatement[30283-30332]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[30230-30242]:ReturnStatement[30339-30351]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30444-30502]:Block[30553-30611]"
    }, {
      "left" : "this.printAst = printAst;",
      "right" : "this.printAst = printAst;",
      "info" : "ExpressionStatement[30452-30477]:ExpressionStatement[30561-30586]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[30484-30496]:ReturnStatement[30593-30605]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30692-30762]:Block[30801-30871]"
    }, {
      "left" : "this.printPassGraph = printPassGraph;",
      "right" : "this.printPassGraph = printPassGraph;",
      "info" : "ExpressionStatement[30700-30737]:ExpressionStatement[30809-30846]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[30744-30756]:ReturnStatement[30853-30865]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30964-31032]:Block[31073-31141]"
    }, {
      "left" : "this.jscompDevMode = jscompDevMode;",
      "right" : "this.jscompDevMode = jscompDevMode;",
      "info" : "ExpressionStatement[30972-31007]:ExpressionStatement[31081-31116]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[31014-31026]:ReturnStatement[31123-31135]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31351-31417]:Block[31460-31526]"
    }, {
      "left" : "this.loggingLevel = loggingLevel;",
      "right" : "this.loggingLevel = loggingLevel;",
      "info" : "ExpressionStatement[31359-31392]:ExpressionStatement[31468-31501]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[31399-31411]:ReturnStatement[31508-31520]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31627-31717]:Block[31736-31826]"
    }, {
      "left" : "this.externs.clear();",
      "right" : "this.externs.clear();",
      "info" : "ExpressionStatement[31635-31656]:ExpressionStatement[31744-31765]"
    }, {
      "left" : "this.externs.addAll(externs);",
      "right" : "this.externs.addAll(externs);",
      "info" : "ExpressionStatement[31663-31692]:ExpressionStatement[31772-31801]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[31699-31711]:ReturnStatement[31808-31820]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31897-31972]:Block[32006-32081]"
    }, {
      "left" : "this.js.clear();",
      "right" : "this.js.clear();",
      "info" : "ExpressionStatement[31905-31921]:ExpressionStatement[32014-32030]"
    }, {
      "left" : "this.js.addAll(js);",
      "right" : "this.js.addAll(js);",
      "info" : "ExpressionStatement[31928-31947]:ExpressionStatement[32037-32056]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[31954-31966]:ReturnStatement[32063-32075]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32166-32232]:Block[32275-32341]"
    }, {
      "left" : "this.jsOutputFile = jsOutputFile;",
      "right" : "this.jsOutputFile = jsOutputFile;",
      "info" : "ExpressionStatement[32174-32207]:ExpressionStatement[32283-32316]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[32214-32226]:ReturnStatement[32323-32335]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32764-32851]:Block[32873-32960]"
    }, {
      "left" : "this.module.clear();",
      "right" : "this.module.clear();",
      "info" : "ExpressionStatement[32772-32792]:ExpressionStatement[32881-32901]"
    }, {
      "left" : "this.module.addAll(module);",
      "right" : "this.module.addAll(module);",
      "info" : "ExpressionStatement[32799-32826]:ExpressionStatement[32908-32935]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[32833-32845]:ReturnStatement[32942-32954]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33108-33190]:Block[33217-33299]"
    }, {
      "left" : "this.variableMapInputFile = variableMapInputFile;",
      "right" : "this.variableMapInputFile = variableMapInputFile;",
      "info" : "ExpressionStatement[33116-33165]:ExpressionStatement[33225-33274]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[33172-33184]:ReturnStatement[33281-33293]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33447-33529]:Block[33556-33638]"
    }, {
      "left" : "this.propertyMapInputFile = propertyMapInputFile;",
      "right" : "this.propertyMapInputFile = propertyMapInputFile;",
      "info" : "ExpressionStatement[33455-33504]:ExpressionStatement[33564-33613]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[33511-33523]:ReturnStatement[33620-33632]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33774-33858]:Block[33883-33967]"
    }, {
      "left" : "this.variableMapOutputFile = variableMapOutputFile;",
      "right" : "this.variableMapOutputFile = variableMapOutputFile;",
      "info" : "ExpressionStatement[33782-33833]:ExpressionStatement[33891-33942]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[33840-33852]:ReturnStatement[33949-33961]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34286-34364]:Block[34395-34473]"
    }, {
      "left" : "this.createNameMapFiles = createNameMapFiles;",
      "right" : "this.createNameMapFiles = createNameMapFiles;",
      "info" : "ExpressionStatement[34294-34339]:ExpressionStatement[34403-34448]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[34346-34358]:ReturnStatement[34455-34467]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34609-34693]:Block[34718-34802]"
    }, {
      "left" : "this.propertyMapOutputFile = propertyMapOutputFile;",
      "right" : "this.propertyMapOutputFile = propertyMapOutputFile;",
      "info" : "ExpressionStatement[34617-34668]:ExpressionStatement[34726-34777]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[34675-34687]:ReturnStatement[34784-34796]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34914-34988]:Block[35023-35097]"
    }, {
      "left" : "this.codingConvention = codingConvention;",
      "right" : "this.codingConvention = codingConvention;",
      "info" : "ExpressionStatement[34922-34963]:ExpressionStatement[35031-35072]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[34970-34982]:ReturnStatement[35079-35091]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35400-35478]:Block[35509-35587]"
    }, {
      "left" : "this.summaryDetailLevel = summaryDetailLevel;",
      "right" : "this.summaryDetailLevel = summaryDetailLevel;",
      "info" : "ExpressionStatement[35408-35453]:ExpressionStatement[35517-35562]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[35460-35472]:ReturnStatement[35569-35581]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35727-35795]:Block[35836-35904]"
    }, {
      "left" : "this.outputWrapper = outputWrapper;",
      "right" : "this.outputWrapper = outputWrapper;",
      "info" : "ExpressionStatement[35735-35770]:ExpressionStatement[35844-35879]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[35777-35789]:ReturnStatement[35886-35898]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36012-36092]:Block[36121-36201]"
    }, {
      "left" : "this.outputWrapperMarker = outputWrapperMarker;",
      "right" : "this.outputWrapperMarker = outputWrapperMarker;",
      "info" : "ExpressionStatement[36020-36067]:ExpressionStatement[36129-36176]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[36074-36086]:ReturnStatement[36183-36195]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36485-36593]:Block[36594-36702]"
    }, {
      "left" : "this.moduleWrapper.clear();",
      "right" : "this.moduleWrapper.clear();",
      "info" : "ExpressionStatement[36493-36520]:ExpressionStatement[36602-36629]"
    }, {
      "left" : "this.moduleWrapper.addAll(moduleWrapper);",
      "right" : "this.moduleWrapper.addAll(moduleWrapper);",
      "info" : "ExpressionStatement[36527-36568]:ExpressionStatement[36636-36677]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[36575-36587]:ReturnStatement[36684-36696]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36912-36998]:Block[37021-37107]"
    }, {
      "left" : "this.moduleOutputPathPrefix = moduleOutputPathPrefix;",
      "right" : "this.moduleOutputPathPrefix = moduleOutputPathPrefix;",
      "info" : "ExpressionStatement[36920-36973]:ExpressionStatement[37029-37082]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[36980-36992]:ReturnStatement[37089-37101]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37401-37473]:Block[37510-37582]"
    }, {
      "left" : "this.createSourceMap = createSourceMap;",
      "right" : "this.createSourceMap = createSourceMap;",
      "info" : "ExpressionStatement[37409-37448]:ExpressionStatement[37518-37557]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[37455-37467]:ReturnStatement[37564-37576]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37672-37774]:Block[37781-37883]"
    }, {
      "left" : "this.jscompError.clear();",
      "right" : "this.jscompError.clear();",
      "info" : "ExpressionStatement[37680-37705]:ExpressionStatement[37789-37814]"
    }, {
      "left" : "this.jscompError.addAll(jscompError);",
      "right" : "this.jscompError.addAll(jscompError);",
      "info" : "ExpressionStatement[37712-37749]:ExpressionStatement[37821-37858]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[37756-37768]:ReturnStatement[37865-37877]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37987-38095]:Block[38096-38204]"
    }, {
      "left" : "this.jscompWarning.clear();",
      "right" : "this.jscompWarning.clear();",
      "info" : "ExpressionStatement[37995-38022]:ExpressionStatement[38104-38131]"
    }, {
      "left" : "this.jscompWarning.addAll(jscompWarning);",
      "right" : "this.jscompWarning.addAll(jscompWarning);",
      "info" : "ExpressionStatement[38029-38070]:ExpressionStatement[38138-38179]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[38077-38089]:ReturnStatement[38186-38198]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38283-38379]:Block[38392-38488]"
    }, {
      "left" : "this.jscompOff.clear();",
      "right" : "this.jscompOff.clear();",
      "info" : "ExpressionStatement[38291-38314]:ExpressionStatement[38400-38423]"
    }, {
      "left" : "this.jscompOff.addAll(jscompOff);",
      "right" : "this.jscompOff.addAll(jscompOff);",
      "info" : "ExpressionStatement[38321-38354]:ExpressionStatement[38430-38463]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[38361-38373]:ReturnStatement[38470-38482]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38819-38906]:Block[38928-39015]"
    }, {
      "left" : "this.define.clear();",
      "right" : "this.define.clear();",
      "info" : "ExpressionStatement[38827-38847]:ExpressionStatement[38936-38956]"
    }, {
      "left" : "this.define.addAll(define);",
      "right" : "this.define.addAll(define);",
      "info" : "ExpressionStatement[38854-38881]:ExpressionStatement[38963-38990]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[38888-38900]:ReturnStatement[38997-39009]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39043-39099]:Block[39152-39208]"
    }, {
      "left" : "this.charset = charset;",
      "right" : "this.charset = charset;",
      "info" : "ExpressionStatement[39051-39074]:ExpressionStatement[39160-39183]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[39081-39093]:ReturnStatement[39190-39202]"
    } ]
  },
  "interFileMappings" : { }
}