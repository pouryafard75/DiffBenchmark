{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "PersistComponentsStepTest",
      "right" : "PersistComponentsStepTest",
      "info" : "TypeDeclaration[1957-35367]:TypeDeclaration[2134-37006]"
    }, {
      "left" : "private static final SimpleDateFormat DATE_FORMAT = new SimpleDateFormat(\"yyyy-MM-dd\");",
      "right" : "private static final SimpleDateFormat DATE_FORMAT = new SimpleDateFormat(\"yyyy-MM-dd\");",
      "info" : "FieldDeclaration[2047-2134]:FieldDeclaration[2224-2311]"
    }, {
      "left" : "private static final String PROJECT_KEY = \"PROJECT_KEY\";",
      "right" : "private static final String PROJECT_KEY = \"PROJECT_KEY\";",
      "info" : "FieldDeclaration[2138-2194]:FieldDeclaration[2315-2371]"
    }, {
      "left" : "@ClassRule\n  public static DbTester dbTester = new DbTester();",
      "right" : "@ClassRule\n  public static DbTester dbTester = new DbTester();",
      "info" : "FieldDeclaration[2198-2260]:FieldDeclaration[2375-2437]"
    }, {
      "left" : "@Rule\n  public TreeRootHolderRule treeRootHolder = new TreeRootHolderRule();",
      "right" : "@Rule\n  public TreeRootHolderRule treeRootHolder = new TreeRootHolderRule();",
      "info" : "FieldDeclaration[2264-2340]:FieldDeclaration[2441-2517]"
    }, {
      "left" : "@Rule\n  public BatchReportReaderRule reportReader = new BatchReportReaderRule();",
      "right" : "@Rule\n  public BatchReportReaderRule reportReader = new BatchReportReaderRule();",
      "info" : "FieldDeclaration[2344-2424]:FieldDeclaration[2521-2601]"
    }, {
      "left" : "DbIdsRepository dbIdsRepository;",
      "right" : "DbIdsRepository dbIdsRepository;",
      "info" : "FieldDeclaration[2428-2460]:FieldDeclaration[2605-2637]"
    }, {
      "left" : "DbSession session;",
      "right" : "DbSession session;",
      "info" : "FieldDeclaration[2464-2482]:FieldDeclaration[2683-2701]"
    }, {
      "left" : "DbClient dbClient;",
      "right" : "DbClient dbClient;",
      "info" : "FieldDeclaration[2486-2504]:FieldDeclaration[2705-2723]"
    }, {
      "left" : "long now;",
      "right" : "Date now;",
      "info" : "FieldDeclaration[2508-2517]:FieldDeclaration[2727-2736]"
    }, {
      "left" : "PersistComponentsStep sut;",
      "right" : "PersistComponentsStep sut;",
      "info" : "FieldDeclaration[2521-2547]:FieldDeclaration[2740-2766]"
    }, {
      "left" : "public void setup() throws Exception",
      "right" : "public void setup() throws Exception",
      "info" : "MethodDeclaration[2551-2992]:MethodDeclaration[2770-3261]"
    }, {
      "left" : "protected ComputationStep step()",
      "right" : "protected ComputationStep step()",
      "info" : "MethodDeclaration[2996-3062]:MethodDeclaration[3265-3331]"
    }, {
      "left" : "public void tearDown()",
      "right" : "public void tearDown()",
      "info" : "MethodDeclaration[3066-3124]:MethodDeclaration[3335-3393]"
    }, {
      "left" : "public void persist_components() throws Exception",
      "right" : "public void persist_components() throws Exception",
      "info" : "MethodDeclaration[3128-8411]:MethodDeclaration[3397-8932]"
    }, {
      "left" : "public void persist_file_directly_attached_on_root_directory() throws Exception",
      "right" : "public void persist_file_directly_attached_on_root_directory() throws Exception",
      "info" : "MethodDeclaration[8415-9971]:MethodDeclaration[8936-10492]"
    }, {
      "left" : "public void persist_unit_test() throws Exception",
      "right" : "public void persist_unit_test() throws Exception",
      "info" : "MethodDeclaration[9975-11515]:MethodDeclaration[10496-12036]"
    }, {
      "left" : "public void persist_only_new_components() throws Exception",
      "right" : "public void persist_only_new_components() throws Exception",
      "info" : "MethodDeclaration[11519-15097]:MethodDeclaration[12040-15618]"
    }, {
      "left" : "public void compute_parent_project_id() throws Exception",
      "right" : "public void compute_parent_project_id() throws Exception",
      "info" : "MethodDeclaration[15101-18076]:MethodDeclaration[15622-18597]"
    }, {
      "left" : "public void persist_multi_modules() throws Exception",
      "right" : "public void persist_multi_modules() throws Exception",
      "info" : "MethodDeclaration[18080-20993]:MethodDeclaration[18601-21514]"
    }, {
      "left" : "public void nothing_to_persist() throws Exception",
      "right" : "public void nothing_to_persist() throws Exception",
      "info" : "MethodDeclaration[20997-26290]:MethodDeclaration[21518-26811]"
    }, {
      "left" : "public void update_module_name() throws Exception",
      "right" : "public void update_module_name() throws Exception",
      "info" : "MethodDeclaration[26294-27795]:MethodDeclaration[26815-28316]"
    }, {
      "left" : "public void update_module_description() throws Exception",
      "right" : "public void update_module_description() throws Exception",
      "info" : "MethodDeclaration[27799-29409]:MethodDeclaration[28320-29930]"
    }, {
      "left" : "public void update_module_path() throws Exception",
      "right" : "public void update_module_path() throws Exception",
      "info" : "MethodDeclaration[29413-30716]:MethodDeclaration[29934-31237]"
    }, {
      "left" : "public void update_module_uuid_when_moving_a_module() throws Exception",
      "right" : "public void update_module_uuid_when_moving_a_module() throws Exception",
      "info" : "MethodDeclaration[30720-35364]:MethodDeclaration[31241-35885]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2598-2992]:Block[2817-3261]"
    }, {
      "left" : "dbTester.truncateTables();",
      "right" : "dbTester.truncateTables();",
      "info" : "ExpressionStatement[2604-2630]:ExpressionStatement[2823-2849]"
    }, {
      "left" : "session = dbTester.myBatis().openSession(false);",
      "right" : "session = dbTester.myBatis().openSession(false);",
      "info" : "ExpressionStatement[2635-2683]:ExpressionStatement[2854-2902]"
    }, {
      "left" : "dbClient = new DbClient(dbTester.database(), dbTester.myBatis(), new ComponentDao(), new SnapshotDao());",
      "right" : "dbClient = new DbClient(dbTester.database(), dbTester.myBatis(), new ComponentDao(), new SnapshotDao());",
      "info" : "ExpressionStatement[2688-2792]:ExpressionStatement[2907-3011]"
    }, {
      "left" : "dbIdsRepository = new DbIdsRepository();",
      "right" : "dbIdsRepository = new DbIdsRepository();",
      "info" : "ExpressionStatement[2798-2838]:ExpressionStatement[3017-3057]"
    }, {
      "left" : "now = DATE_FORMAT.parse(\"2015-06-02\").getTime();",
      "right" : "now = DATE_FORMAT.parse(\"2015-06-02\");",
      "info" : "ExpressionStatement[2844-2892]:ExpressionStatement[3063-3101]"
    }, {
      "left" : "sut = new PersistComponentsStep( dbClient, treeRootHolder, reportReader, dbIdsRepository);",
      "right" : "sut = new PersistComponentsStep( dbClient, treeRootHolder, reportReader, dbIdsRepository, system2);",
      "info" : "ExpressionStatement[2898-2988]:ExpressionStatement[3158-3257]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3041-3062]:Block[3310-3331]"
    }, {
      "left" : "return sut;",
      "right" : "return sut;",
      "info" : "ReturnStatement[3047-3058]:ReturnStatement[3316-3327]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3098-3124]:Block[3367-3393]"
    }, {
      "left" : "session.close();",
      "right" : "session.close();",
      "info" : "ExpressionStatement[3104-3120]:ExpressionStatement[3373-3389]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3186-8411]:Block[3455-8932]"
    }, {
      "left" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(1)\n      .setType(Constants.ComponentType.PROJECT)\n      .setKey(PROJECT_KEY)\n      .setName(\"Project\")\n      .setDescription(\"Project description\")\n      .addChildRef(2)\n      .build());",
      "right" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(1)\n      .setType(Constants.ComponentType.PROJECT)\n      .setKey(PROJECT_KEY)\n      .setName(\"Project\")\n      .setDescription(\"Project description\")\n      .addChildRef(2)\n      .build());",
      "info" : "ExpressionStatement[3192-3454]:ExpressionStatement[3461-3723]"
    }, {
      "left" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(2)\n      .setType(Constants.ComponentType.MODULE)\n      .setKey(\"MODULE_KEY\")\n      .setPath(\"module\")\n      .setName(\"Module\")\n      .setDescription(\"Module description\")\n      .addChildRef(3)\n      .build());",
      "right" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(2)\n      .setType(Constants.ComponentType.MODULE)\n      .setKey(\"MODULE_KEY\")\n      .setPath(\"module\")\n      .setName(\"Module\")\n      .setDescription(\"Module description\")\n      .addChildRef(3)\n      .build());",
      "info" : "ExpressionStatement[3459-3744]:ExpressionStatement[3728-4013]"
    }, {
      "left" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(3)\n      .setType(Constants.ComponentType.DIRECTORY)\n      .setPath(\"src/main/java/dir\")\n      .addChildRef(4)\n      .build());",
      "right" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(3)\n      .setType(Constants.ComponentType.DIRECTORY)\n      .setPath(\"src/main/java/dir\")\n      .addChildRef(4)\n      .build());",
      "info" : "ExpressionStatement[3749-3951]:ExpressionStatement[4018-4220]"
    }, {
      "left" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(4)\n      .setType(Constants.ComponentType.FILE)\n      .setPath(\"src/main/java/dir/Foo.java\")\n      .setLanguage(\"java\")\n      .build());",
      "right" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(4)\n      .setType(Constants.ComponentType.FILE)\n      .setPath(\"src/main/java/dir/Foo.java\")\n      .setLanguage(\"java\")\n      .build());",
      "info" : "ExpressionStatement[3956-4167]:ExpressionStatement[4225-4436]"
    }, {
      "left" : "Component file = DumbComponent.builder(Component.Type.FILE, 4).setUuid(\"DEFG\").setKey(\"MODULE_KEY:src/main/java/dir/Foo.java\").build();",
      "right" : "Component file = DumbComponent.builder(Component.Type.FILE, 4).setUuid(\"DEFG\").setKey(\"MODULE_KEY:src/main/java/dir/Foo.java\").build();",
      "info" : "VariableDeclarationStatement[4173-4308]:VariableDeclarationStatement[4442-4577]"
    }, {
      "left" : "Component directory = DumbComponent.builder(Component.Type.DIRECTORY, 3).setUuid(\"CDEF\").setKey(\"MODULE_KEY:src/main/java/dir\").addChildren(file).build();",
      "right" : "Component directory = DumbComponent.builder(Component.Type.DIRECTORY, 3).setUuid(\"CDEF\").setKey(\"MODULE_KEY:src/main/java/dir\").addChildren(file).build();",
      "info" : "VariableDeclarationStatement[4313-4467]:VariableDeclarationStatement[4582-4736]"
    }, {
      "left" : "Component module = DumbComponent.builder(Component.Type.MODULE, 2).setUuid(\"BCDE\").setKey(\"MODULE_KEY\").addChildren(directory).build();",
      "right" : "Component module = DumbComponent.builder(Component.Type.MODULE, 2).setUuid(\"BCDE\").setKey(\"MODULE_KEY\").addChildren(directory).build();",
      "info" : "VariableDeclarationStatement[4472-4607]:VariableDeclarationStatement[4741-4876]"
    }, {
      "left" : "Component project = DumbComponent.builder(Component.Type.PROJECT, 1).setUuid(\"ABCD\").setKey(PROJECT_KEY).addChildren(module).build();",
      "right" : "Component project = DumbComponent.builder(Component.Type.PROJECT, 1).setUuid(\"ABCD\").setKey(PROJECT_KEY).addChildren(module).build();",
      "info" : "VariableDeclarationStatement[4612-4745]:VariableDeclarationStatement[4881-5014]"
    }, {
      "left" : "treeRootHolder.setRoot(project);",
      "right" : "treeRootHolder.setRoot(project);",
      "info" : "ExpressionStatement[4750-4782]:ExpressionStatement[5019-5051]"
    }, {
      "left" : "sut.execute();",
      "right" : "sut.execute();",
      "info" : "ExpressionStatement[4788-4802]:ExpressionStatement[5057-5071]"
    }, {
      "left" : "assertThat(dbTester.countRowsOfTable(\"projects\")).isEqualTo(4);",
      "right" : "assertThat(dbTester.countRowsOfTable(\"projects\")).isEqualTo(4);",
      "info" : "ExpressionStatement[4808-4871]:ExpressionStatement[5099-5162]"
    }, {
      "left" : "ComponentDto projectDto = dbClient.componentDao().selectNullableByKey(session, PROJECT_KEY);",
      "right" : "ComponentDto projectDto = dbClient.componentDao().selectNullableByKey(session, PROJECT_KEY);",
      "info" : "VariableDeclarationStatement[4877-4969]:VariableDeclarationStatement[5168-5260]"
    }, {
      "left" : "assertThat(projectDto).isNotNull();",
      "right" : "assertThat(projectDto).isNotNull();",
      "info" : "ExpressionStatement[4974-5009]:ExpressionStatement[5265-5300]"
    }, {
      "left" : "assertThat(projectDto.name()).isEqualTo(\"Project\");",
      "right" : "assertThat(projectDto.name()).isEqualTo(\"Project\");",
      "info" : "ExpressionStatement[5014-5065]:ExpressionStatement[5305-5356]"
    }, {
      "left" : "assertThat(projectDto.description()).isEqualTo(\"Project description\");",
      "right" : "assertThat(projectDto.description()).isEqualTo(\"Project description\");",
      "info" : "ExpressionStatement[5070-5140]:ExpressionStatement[5361-5431]"
    }, {
      "left" : "assertThat(projectDto.path()).isNull();",
      "right" : "assertThat(projectDto.path()).isNull();",
      "info" : "ExpressionStatement[5145-5184]:ExpressionStatement[5436-5475]"
    }, {
      "left" : "assertThat(projectDto.uuid()).isEqualTo(\"ABCD\");",
      "right" : "assertThat(projectDto.uuid()).isEqualTo(\"ABCD\");",
      "info" : "ExpressionStatement[5189-5237]:ExpressionStatement[5480-5528]"
    }, {
      "left" : "assertThat(projectDto.moduleUuid()).isNull();",
      "right" : "assertThat(projectDto.moduleUuid()).isNull();",
      "info" : "ExpressionStatement[5242-5287]:ExpressionStatement[5533-5578]"
    }, {
      "left" : "assertThat(projectDto.moduleUuidPath()).isEqualTo(\".\" + projectDto.uuid() + \".\");",
      "right" : "assertThat(projectDto.moduleUuidPath()).isEqualTo(\".\" + projectDto.uuid() + \".\");",
      "info" : "ExpressionStatement[5292-5373]:ExpressionStatement[5583-5664]"
    }, {
      "left" : "assertThat(projectDto.projectUuid()).isEqualTo(projectDto.uuid());",
      "right" : "assertThat(projectDto.projectUuid()).isEqualTo(projectDto.uuid());",
      "info" : "ExpressionStatement[5378-5444]:ExpressionStatement[5669-5735]"
    }, {
      "left" : "assertThat(projectDto.qualifier()).isEqualTo(\"TRK\");",
      "right" : "assertThat(projectDto.qualifier()).isEqualTo(\"TRK\");",
      "info" : "ExpressionStatement[5449-5501]:ExpressionStatement[5740-5792]"
    }, {
      "left" : "assertThat(projectDto.scope()).isEqualTo(\"PRJ\");",
      "right" : "assertThat(projectDto.scope()).isEqualTo(\"PRJ\");",
      "info" : "ExpressionStatement[5506-5554]:ExpressionStatement[5797-5845]"
    }, {
      "left" : "assertThat(projectDto.parentProjectId()).isNull();",
      "right" : "assertThat(projectDto.parentProjectId()).isNull();",
      "info" : "ExpressionStatement[5559-5609]:ExpressionStatement[5850-5900]"
    }, {
      "left" : "ComponentDto moduleDto = dbClient.componentDao().selectNullableByKey(session, \"MODULE_KEY\");",
      "right" : "ComponentDto moduleDto = dbClient.componentDao().selectNullableByKey(session, \"MODULE_KEY\");",
      "info" : "VariableDeclarationStatement[5615-5707]:VariableDeclarationStatement[5964-6056]"
    }, {
      "left" : "assertThat(moduleDto).isNotNull();",
      "right" : "assertThat(moduleDto).isNotNull();",
      "info" : "ExpressionStatement[5712-5746]:ExpressionStatement[6061-6095]"
    }, {
      "left" : "assertThat(moduleDto.name()).isEqualTo(\"Module\");",
      "right" : "assertThat(moduleDto.name()).isEqualTo(\"Module\");",
      "info" : "ExpressionStatement[5751-5800]:ExpressionStatement[6100-6149]"
    }, {
      "left" : "assertThat(moduleDto.description()).isEqualTo(\"Module description\");",
      "right" : "assertThat(moduleDto.description()).isEqualTo(\"Module description\");",
      "info" : "ExpressionStatement[5805-5873]:ExpressionStatement[6154-6222]"
    }, {
      "left" : "assertThat(moduleDto.path()).isEqualTo(\"module\");",
      "right" : "assertThat(moduleDto.path()).isEqualTo(\"module\");",
      "info" : "ExpressionStatement[5878-5927]:ExpressionStatement[6227-6276]"
    }, {
      "left" : "assertThat(moduleDto.uuid()).isEqualTo(\"BCDE\");",
      "right" : "assertThat(moduleDto.uuid()).isEqualTo(\"BCDE\");",
      "info" : "ExpressionStatement[5932-5979]:ExpressionStatement[6281-6328]"
    }, {
      "left" : "assertThat(moduleDto.moduleUuid()).isEqualTo(projectDto.uuid());",
      "right" : "assertThat(moduleDto.moduleUuid()).isEqualTo(projectDto.uuid());",
      "info" : "ExpressionStatement[5984-6048]:ExpressionStatement[6333-6397]"
    }, {
      "left" : "assertThat(moduleDto.moduleUuidPath()).isEqualTo(projectDto.moduleUuidPath() + moduleDto.uuid() + \".\");",
      "right" : "assertThat(moduleDto.moduleUuidPath()).isEqualTo(projectDto.moduleUuidPath() + moduleDto.uuid() + \".\");",
      "info" : "ExpressionStatement[6053-6156]:ExpressionStatement[6402-6505]"
    }, {
      "left" : "assertThat(moduleDto.projectUuid()).isEqualTo(projectDto.uuid());",
      "right" : "assertThat(moduleDto.projectUuid()).isEqualTo(projectDto.uuid());",
      "info" : "ExpressionStatement[6161-6226]:ExpressionStatement[6510-6575]"
    }, {
      "left" : "assertThat(moduleDto.qualifier()).isEqualTo(\"BRC\");",
      "right" : "assertThat(moduleDto.qualifier()).isEqualTo(\"BRC\");",
      "info" : "ExpressionStatement[6231-6282]:ExpressionStatement[6580-6631]"
    }, {
      "left" : "assertThat(moduleDto.scope()).isEqualTo(\"PRJ\");",
      "right" : "assertThat(moduleDto.scope()).isEqualTo(\"PRJ\");",
      "info" : "ExpressionStatement[6287-6334]:ExpressionStatement[6636-6683]"
    }, {
      "left" : "assertThat(moduleDto.parentProjectId()).isEqualTo(projectDto.getId());",
      "right" : "assertThat(moduleDto.parentProjectId()).isEqualTo(projectDto.getId());",
      "info" : "ExpressionStatement[6339-6409]:ExpressionStatement[6688-6758]"
    }, {
      "left" : "ComponentDto directoryDto = dbClient.componentDao().selectNullableByKey(session, \"MODULE_KEY:src/main/java/dir\");",
      "right" : "ComponentDto directoryDto = dbClient.componentDao().selectNullableByKey(session, \"MODULE_KEY:src/main/java/dir\");",
      "info" : "VariableDeclarationStatement[6415-6528]:VariableDeclarationStatement[6821-6934]"
    }, {
      "left" : "assertThat(directoryDto).isNotNull();",
      "right" : "assertThat(directoryDto).isNotNull();",
      "info" : "ExpressionStatement[6533-6570]:ExpressionStatement[6939-6976]"
    }, {
      "left" : "assertThat(directoryDto.name()).isEqualTo(\"src/main/java/dir\");",
      "right" : "assertThat(directoryDto.name()).isEqualTo(\"src/main/java/dir\");",
      "info" : "ExpressionStatement[6575-6638]:ExpressionStatement[6981-7044]"
    }, {
      "left" : "assertThat(directoryDto.description()).isNull();",
      "right" : "assertThat(directoryDto.description()).isNull();",
      "info" : "ExpressionStatement[6643-6691]:ExpressionStatement[7049-7097]"
    }, {
      "left" : "assertThat(directoryDto.path()).isEqualTo(\"src/main/java/dir\");",
      "right" : "assertThat(directoryDto.path()).isEqualTo(\"src/main/java/dir\");",
      "info" : "ExpressionStatement[6696-6759]:ExpressionStatement[7102-7165]"
    }, {
      "left" : "assertThat(directoryDto.uuid()).isEqualTo(\"CDEF\");",
      "right" : "assertThat(directoryDto.uuid()).isEqualTo(\"CDEF\");",
      "info" : "ExpressionStatement[6764-6814]:ExpressionStatement[7170-7220]"
    }, {
      "left" : "assertThat(directoryDto.moduleUuid()).isEqualTo(moduleDto.uuid());",
      "right" : "assertThat(directoryDto.moduleUuid()).isEqualTo(moduleDto.uuid());",
      "info" : "ExpressionStatement[6819-6885]:ExpressionStatement[7225-7291]"
    }, {
      "left" : "assertThat(directoryDto.moduleUuidPath()).isEqualTo(moduleDto.moduleUuidPath());",
      "right" : "assertThat(directoryDto.moduleUuidPath()).isEqualTo(moduleDto.moduleUuidPath());",
      "info" : "ExpressionStatement[6890-6970]:ExpressionStatement[7296-7376]"
    }, {
      "left" : "assertThat(directoryDto.projectUuid()).isEqualTo(projectDto.uuid());",
      "right" : "assertThat(directoryDto.projectUuid()).isEqualTo(projectDto.uuid());",
      "info" : "ExpressionStatement[6975-7043]:ExpressionStatement[7381-7449]"
    }, {
      "left" : "assertThat(directoryDto.qualifier()).isEqualTo(\"DIR\");",
      "right" : "assertThat(directoryDto.qualifier()).isEqualTo(\"DIR\");",
      "info" : "ExpressionStatement[7048-7102]:ExpressionStatement[7454-7508]"
    }, {
      "left" : "assertThat(directoryDto.scope()).isEqualTo(\"DIR\");",
      "right" : "assertThat(directoryDto.scope()).isEqualTo(\"DIR\");",
      "info" : "ExpressionStatement[7107-7157]:ExpressionStatement[7513-7563]"
    }, {
      "left" : "assertThat(directoryDto.parentProjectId()).isEqualTo(moduleDto.getId());",
      "right" : "assertThat(directoryDto.parentProjectId()).isEqualTo(moduleDto.getId());",
      "info" : "ExpressionStatement[7162-7234]:ExpressionStatement[7568-7640]"
    }, {
      "left" : "ComponentDto fileDto = dbClient.componentDao().selectNullableByKey(session, \"MODULE_KEY:src/main/java/dir/Foo.java\");",
      "right" : "ComponentDto fileDto = dbClient.componentDao().selectNullableByKey(session, \"MODULE_KEY:src/main/java/dir/Foo.java\");",
      "info" : "VariableDeclarationStatement[7240-7357]:VariableDeclarationStatement[7706-7823]"
    }, {
      "left" : "assertThat(fileDto).isNotNull();",
      "right" : "assertThat(fileDto).isNotNull();",
      "info" : "ExpressionStatement[7362-7394]:ExpressionStatement[7828-7860]"
    }, {
      "left" : "assertThat(fileDto.name()).isEqualTo(\"Foo.java\");",
      "right" : "assertThat(fileDto.name()).isEqualTo(\"Foo.java\");",
      "info" : "ExpressionStatement[7399-7448]:ExpressionStatement[7865-7914]"
    }, {
      "left" : "assertThat(fileDto.description()).isNull();",
      "right" : "assertThat(fileDto.description()).isNull();",
      "info" : "ExpressionStatement[7453-7496]:ExpressionStatement[7919-7962]"
    }, {
      "left" : "assertThat(fileDto.path()).isEqualTo(\"src/main/java/dir/Foo.java\");",
      "right" : "assertThat(fileDto.path()).isEqualTo(\"src/main/java/dir/Foo.java\");",
      "info" : "ExpressionStatement[7501-7568]:ExpressionStatement[7967-8034]"
    }, {
      "left" : "assertThat(fileDto.language()).isEqualTo(\"java\");",
      "right" : "assertThat(fileDto.language()).isEqualTo(\"java\");",
      "info" : "ExpressionStatement[7573-7622]:ExpressionStatement[8039-8088]"
    }, {
      "left" : "assertThat(fileDto.uuid()).isEqualTo(\"DEFG\");",
      "right" : "assertThat(fileDto.uuid()).isEqualTo(\"DEFG\");",
      "info" : "ExpressionStatement[7627-7672]:ExpressionStatement[8093-8138]"
    }, {
      "left" : "assertThat(fileDto.moduleUuid()).isEqualTo(moduleDto.uuid());",
      "right" : "assertThat(fileDto.moduleUuid()).isEqualTo(moduleDto.uuid());",
      "info" : "ExpressionStatement[7677-7738]:ExpressionStatement[8143-8204]"
    }, {
      "left" : "assertThat(fileDto.moduleUuidPath()).isEqualTo(moduleDto.moduleUuidPath());",
      "right" : "assertThat(fileDto.moduleUuidPath()).isEqualTo(moduleDto.moduleUuidPath());",
      "info" : "ExpressionStatement[7743-7818]:ExpressionStatement[8209-8284]"
    }, {
      "left" : "assertThat(fileDto.projectUuid()).isEqualTo(projectDto.uuid());",
      "right" : "assertThat(fileDto.projectUuid()).isEqualTo(projectDto.uuid());",
      "info" : "ExpressionStatement[7823-7886]:ExpressionStatement[8289-8352]"
    }, {
      "left" : "assertThat(fileDto.qualifier()).isEqualTo(\"FIL\");",
      "right" : "assertThat(fileDto.qualifier()).isEqualTo(\"FIL\");",
      "info" : "ExpressionStatement[7891-7940]:ExpressionStatement[8357-8406]"
    }, {
      "left" : "assertThat(fileDto.scope()).isEqualTo(\"FIL\");",
      "right" : "assertThat(fileDto.scope()).isEqualTo(\"FIL\");",
      "info" : "ExpressionStatement[7945-7990]:ExpressionStatement[8411-8456]"
    }, {
      "left" : "assertThat(fileDto.parentProjectId()).isEqualTo(moduleDto.getId());",
      "right" : "assertThat(fileDto.parentProjectId()).isEqualTo(moduleDto.getId());",
      "info" : "ExpressionStatement[7995-8062]:ExpressionStatement[8461-8528]"
    }, {
      "left" : "assertThat(dbIdsRepository.getComponentId(project)).isEqualTo(projectDto.getId());",
      "right" : "assertThat(dbIdsRepository.getComponentId(project)).isEqualTo(projectDto.getId());",
      "info" : "ExpressionStatement[8068-8150]:ExpressionStatement[8589-8671]"
    }, {
      "left" : "assertThat(dbIdsRepository.getComponentId(module)).isEqualTo(moduleDto.getId());",
      "right" : "assertThat(dbIdsRepository.getComponentId(module)).isEqualTo(moduleDto.getId());",
      "info" : "ExpressionStatement[8155-8235]:ExpressionStatement[8676-8756]"
    }, {
      "left" : "assertThat(dbIdsRepository.getComponentId(directory)).isEqualTo(directoryDto.getId());",
      "right" : "assertThat(dbIdsRepository.getComponentId(directory)).isEqualTo(directoryDto.getId());",
      "info" : "ExpressionStatement[8240-8326]:ExpressionStatement[8761-8847]"
    }, {
      "left" : "assertThat(dbIdsRepository.getComponentId(file)).isEqualTo(fileDto.getId());",
      "right" : "assertThat(dbIdsRepository.getComponentId(file)).isEqualTo(fileDto.getId());",
      "info" : "ExpressionStatement[8331-8407]:ExpressionStatement[8852-8928]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8503-9971]:Block[9024-10492]"
    }, {
      "left" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(1)\n      .setType(Constants.ComponentType.PROJECT)\n      .setKey(PROJECT_KEY)\n      .setName(\"Project\")\n      .addChildRef(2)\n      .build());",
      "right" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(1)\n      .setType(Constants.ComponentType.PROJECT)\n      .setKey(PROJECT_KEY)\n      .setName(\"Project\")\n      .addChildRef(2)\n      .build());",
      "info" : "ExpressionStatement[8509-8726]:ExpressionStatement[9030-9247]"
    }, {
      "left" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(2)\n      .setType(Constants.ComponentType.DIRECTORY)\n      .setPath(\"/\")\n      .addChildRef(3)\n      .build());",
      "right" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(2)\n      .setType(Constants.ComponentType.DIRECTORY)\n      .setPath(\"/\")\n      .addChildRef(3)\n      .build());",
      "info" : "ExpressionStatement[8731-8917]:ExpressionStatement[9252-9438]"
    }, {
      "left" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(3)\n      .setType(Constants.ComponentType.FILE)\n      .setPath(\"pom.xml\")\n      .build());",
      "right" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(3)\n      .setType(Constants.ComponentType.FILE)\n      .setPath(\"pom.xml\")\n      .build());",
      "info" : "ExpressionStatement[8922-9087]:ExpressionStatement[9443-9608]"
    }, {
      "left" : "treeRootHolder.setRoot(DumbComponent.builder(Component.Type.PROJECT, 1).setUuid(\"ABCD\").setKey(PROJECT_KEY).addChildren(\n      DumbComponent.builder(Component.Type.DIRECTORY, 2).setUuid(\"CDEF\").setKey(PROJECT_KEY + \":/\").addChildren(\n        DumbComponent.builder(Component.Type.FILE, 3).setUuid(\"DEFG\").setKey(PROJECT_KEY + \":pom.xml\").build()\n        ).build()\n      ).build());",
      "right" : "treeRootHolder.setRoot(DumbComponent.builder(Component.Type.PROJECT, 1).setUuid(\"ABCD\").setKey(PROJECT_KEY).addChildren(\n      DumbComponent.builder(Component.Type.DIRECTORY, 2).setUuid(\"CDEF\").setKey(PROJECT_KEY + \":/\").addChildren(\n        DumbComponent.builder(Component.Type.FILE, 3).setUuid(\"DEFG\").setKey(PROJECT_KEY + \":pom.xml\").build()\n        ).build()\n      ).build());",
      "info" : "ExpressionStatement[9093-9473]:ExpressionStatement[9614-9994]"
    }, {
      "left" : "sut.execute();",
      "right" : "sut.execute();",
      "info" : "ExpressionStatement[9479-9493]:ExpressionStatement[10000-10014]"
    }, {
      "left" : "ComponentDto directory = dbClient.componentDao().selectNullableByKey(session, \"PROJECT_KEY:/\");",
      "right" : "ComponentDto directory = dbClient.componentDao().selectNullableByKey(session, \"PROJECT_KEY:/\");",
      "info" : "VariableDeclarationStatement[9499-9594]:VariableDeclarationStatement[10020-10115]"
    }, {
      "left" : "assertThat(directory).isNotNull();",
      "right" : "assertThat(directory).isNotNull();",
      "info" : "ExpressionStatement[9599-9633]:ExpressionStatement[10120-10154]"
    }, {
      "left" : "assertThat(directory.name()).isEqualTo(\"/\");",
      "right" : "assertThat(directory.name()).isEqualTo(\"/\");",
      "info" : "ExpressionStatement[9638-9682]:ExpressionStatement[10159-10203]"
    }, {
      "left" : "assertThat(directory.path()).isEqualTo(\"/\");",
      "right" : "assertThat(directory.path()).isEqualTo(\"/\");",
      "info" : "ExpressionStatement[9687-9731]:ExpressionStatement[10208-10252]"
    }, {
      "left" : "ComponentDto file = dbClient.componentDao().selectNullableByKey(session, \"PROJECT_KEY:pom.xml\");",
      "right" : "ComponentDto file = dbClient.componentDao().selectNullableByKey(session, \"PROJECT_KEY:pom.xml\");",
      "info" : "VariableDeclarationStatement[9737-9833]:VariableDeclarationStatement[10258-10354]"
    }, {
      "left" : "assertThat(file).isNotNull();",
      "right" : "assertThat(file).isNotNull();",
      "info" : "ExpressionStatement[9838-9867]:ExpressionStatement[10359-10388]"
    }, {
      "left" : "assertThat(file.name()).isEqualTo(\"pom.xml\");",
      "right" : "assertThat(file.name()).isEqualTo(\"pom.xml\");",
      "info" : "ExpressionStatement[9872-9917]:ExpressionStatement[10393-10438]"
    }, {
      "left" : "assertThat(file.path()).isEqualTo(\"pom.xml\");",
      "right" : "assertThat(file.path()).isEqualTo(\"pom.xml\");",
      "info" : "ExpressionStatement[9922-9967]:ExpressionStatement[10443-10488]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10032-11515]:Block[10553-12036]"
    }, {
      "left" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(1)\n      .setType(Constants.ComponentType.PROJECT)\n      .setKey(PROJECT_KEY)\n      .setName(\"Project\")\n      .addChildRef(2)\n      .build());",
      "right" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(1)\n      .setType(Constants.ComponentType.PROJECT)\n      .setKey(PROJECT_KEY)\n      .setName(\"Project\")\n      .addChildRef(2)\n      .build());",
      "info" : "ExpressionStatement[10038-10255]:ExpressionStatement[10559-10776]"
    }, {
      "left" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(2)\n      .setType(Constants.ComponentType.DIRECTORY)\n      .setPath(\"src/test/java/dir\")\n      .addChildRef(3)\n      .build());",
      "right" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(2)\n      .setType(Constants.ComponentType.DIRECTORY)\n      .setPath(\"src/test/java/dir\")\n      .addChildRef(3)\n      .build());",
      "info" : "ExpressionStatement[10260-10462]:ExpressionStatement[10781-10983]"
    }, {
      "left" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(3)\n      .setType(Constants.ComponentType.FILE)\n      .setPath(\"src/test/java/dir/FooTest.java\")\n      .setIsTest(true)\n      .build());",
      "right" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(3)\n      .setType(Constants.ComponentType.FILE)\n      .setPath(\"src/test/java/dir/FooTest.java\")\n      .setIsTest(true)\n      .build());",
      "info" : "ExpressionStatement[10467-10678]:ExpressionStatement[10988-11199]"
    }, {
      "left" : "treeRootHolder.setRoot(DumbComponent.builder(Component.Type.PROJECT, 1).setUuid(\"ABCD\").setKey(PROJECT_KEY).addChildren(\n      DumbComponent.builder(Component.Type.DIRECTORY, 2).setUuid(\"CDEF\").setKey(PROJECT_KEY + \":src/test/java/dir\").addChildren(\n        DumbComponent.builder(Component.Type.FILE, 3).setUuid(\"DEFG\").setKey(PROJECT_KEY + \":src/test/java/dir/FooTest.java\").build())\n        .build())\n      .build());",
      "right" : "treeRootHolder.setRoot(DumbComponent.builder(Component.Type.PROJECT, 1).setUuid(\"ABCD\").setKey(PROJECT_KEY).addChildren(\n      DumbComponent.builder(Component.Type.DIRECTORY, 2).setUuid(\"CDEF\").setKey(PROJECT_KEY + \":src/test/java/dir\").addChildren(\n        DumbComponent.builder(Component.Type.FILE, 3).setUuid(\"DEFG\").setKey(PROJECT_KEY + \":src/test/java/dir/FooTest.java\").build())\n        .build())\n      .build());",
      "info" : "ExpressionStatement[10684-11103]:ExpressionStatement[11205-11624]"
    }, {
      "left" : "sut.execute();",
      "right" : "sut.execute();",
      "info" : "ExpressionStatement[11109-11123]:ExpressionStatement[11630-11644]"
    }, {
      "left" : "ComponentDto file = dbClient.componentDao().selectNullableByKey(session, PROJECT_KEY + \":src/test/java/dir/FooTest.java\");",
      "right" : "ComponentDto file = dbClient.componentDao().selectNullableByKey(session, PROJECT_KEY + \":src/test/java/dir/FooTest.java\");",
      "info" : "VariableDeclarationStatement[11129-11251]:VariableDeclarationStatement[11650-11772]"
    }, {
      "left" : "assertThat(file).isNotNull();",
      "right" : "assertThat(file).isNotNull();",
      "info" : "ExpressionStatement[11256-11285]:ExpressionStatement[11777-11806]"
    }, {
      "left" : "assertThat(file.name()).isEqualTo(\"FooTest.java\");",
      "right" : "assertThat(file.name()).isEqualTo(\"FooTest.java\");",
      "info" : "ExpressionStatement[11290-11340]:ExpressionStatement[11811-11861]"
    }, {
      "left" : "assertThat(file.path()).isEqualTo(\"src/test/java/dir/FooTest.java\");",
      "right" : "assertThat(file.path()).isEqualTo(\"src/test/java/dir/FooTest.java\");",
      "info" : "ExpressionStatement[11345-11413]:ExpressionStatement[11866-11934]"
    }, {
      "left" : "assertThat(file.qualifier()).isEqualTo(\"UTS\");",
      "right" : "assertThat(file.qualifier()).isEqualTo(\"UTS\");",
      "info" : "ExpressionStatement[11418-11464]:ExpressionStatement[11939-11985]"
    }, {
      "left" : "assertThat(file.scope()).isEqualTo(\"FIL\");",
      "right" : "assertThat(file.scope()).isEqualTo(\"FIL\");",
      "info" : "ExpressionStatement[11469-11511]:ExpressionStatement[11990-12032]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11586-15097]:Block[12107-15618]"
    }, {
      "left" : "ComponentDto project = ComponentTesting.newProjectDto(\"ABCD\").setKey(PROJECT_KEY).setName(\"Project\");",
      "right" : "ComponentDto project = ComponentTesting.newProjectDto(\"ABCD\").setKey(PROJECT_KEY).setName(\"Project\");",
      "info" : "VariableDeclarationStatement[11633-11734]:VariableDeclarationStatement[12154-12255]"
    }, {
      "left" : "dbClient.componentDao().insert(session, project);",
      "right" : "dbClient.componentDao().insert(session, project);",
      "info" : "ExpressionStatement[11739-11788]:ExpressionStatement[12260-12309]"
    }, {
      "left" : "ComponentDto module = ComponentTesting.newModuleDto(\"BCDE\", project).setKey(\"MODULE_KEY\").setName(\"Module\");",
      "right" : "ComponentDto module = ComponentTesting.newModuleDto(\"BCDE\", project).setKey(\"MODULE_KEY\").setName(\"Module\");",
      "info" : "VariableDeclarationStatement[11793-11901]:VariableDeclarationStatement[12314-12422]"
    }, {
      "left" : "dbClient.componentDao().insert(session, module);",
      "right" : "dbClient.componentDao().insert(session, module);",
      "info" : "ExpressionStatement[11906-11954]:ExpressionStatement[12427-12475]"
    }, {
      "left" : "session.commit();",
      "right" : "session.commit();",
      "info" : "ExpressionStatement[11959-11976]:ExpressionStatement[12480-12497]"
    }, {
      "left" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(1)\n      .setType(Constants.ComponentType.PROJECT)\n      .setKey(PROJECT_KEY)\n      .setName(\"Project\")\n      .addChildRef(2)\n      .build());",
      "right" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(1)\n      .setType(Constants.ComponentType.PROJECT)\n      .setKey(PROJECT_KEY)\n      .setName(\"Project\")\n      .addChildRef(2)\n      .build());",
      "info" : "ExpressionStatement[11982-12199]:ExpressionStatement[12503-12720]"
    }, {
      "left" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(2)\n      .setType(Constants.ComponentType.MODULE)\n      .setKey(\"MODULE_KEY\")\n      .setName(\"Module\")\n      .addChildRef(3)\n      .build());",
      "right" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(2)\n      .setType(Constants.ComponentType.MODULE)\n      .setKey(\"MODULE_KEY\")\n      .setName(\"Module\")\n      .addChildRef(3)\n      .build());",
      "info" : "ExpressionStatement[12204-12420]:ExpressionStatement[12725-12941]"
    }, {
      "left" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(3)\n      .setType(Constants.ComponentType.DIRECTORY)\n      .setPath(\"src/main/java/dir\")\n      .addChildRef(4)\n      .build());",
      "right" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(3)\n      .setType(Constants.ComponentType.DIRECTORY)\n      .setPath(\"src/main/java/dir\")\n      .addChildRef(4)\n      .build());",
      "info" : "ExpressionStatement[12425-12627]:ExpressionStatement[12946-13148]"
    }, {
      "left" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(4)\n      .setType(Constants.ComponentType.FILE)\n      .setPath(\"src/main/java/dir/Foo.java\")\n      .build());",
      "right" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(4)\n      .setType(Constants.ComponentType.FILE)\n      .setPath(\"src/main/java/dir/Foo.java\")\n      .build());",
      "info" : "ExpressionStatement[12632-12816]:ExpressionStatement[13153-13337]"
    }, {
      "left" : "treeRootHolder.setRoot(DumbComponent.builder(Component.Type.PROJECT, 1).setUuid(\"ABCD\").setKey(PROJECT_KEY).addChildren(\n      DumbComponent.builder(Component.Type.MODULE, 2).setUuid(\"BCDE\").setKey(\"MODULE_KEY\").addChildren(\n        DumbComponent.builder(Component.Type.DIRECTORY, 3).setUuid(\"CDEF\").setKey(\"MODULE_KEY:src/main/java/dir\").addChildren(\n          DumbComponent.builder(Component.Type.FILE, 4).setUuid(\"DEFG\").setKey(\"MODULE_KEY:src/main/java/dir/Foo.java\").build())\n          .build())\n        .build())\n      .build());",
      "right" : "treeRootHolder.setRoot(DumbComponent.builder(Component.Type.PROJECT, 1).setUuid(\"ABCD\").setKey(PROJECT_KEY).addChildren(\n      DumbComponent.builder(Component.Type.MODULE, 2).setUuid(\"BCDE\").setKey(\"MODULE_KEY\").addChildren(\n        DumbComponent.builder(Component.Type.DIRECTORY, 3).setUuid(\"CDEF\").setKey(\"MODULE_KEY:src/main/java/dir\").addChildren(\n          DumbComponent.builder(Component.Type.FILE, 4).setUuid(\"DEFG\").setKey(\"MODULE_KEY:src/main/java/dir/Foo.java\").build())\n          .build())\n        .build())\n      .build());",
      "info" : "ExpressionStatement[12822-13357]:ExpressionStatement[13343-13878]"
    }, {
      "left" : "sut.execute();",
      "right" : "sut.execute();",
      "info" : "ExpressionStatement[13363-13377]:ExpressionStatement[13884-13898]"
    }, {
      "left" : "assertThat(dbTester.countRowsOfTable(\"projects\")).isEqualTo(4);",
      "right" : "assertThat(dbTester.countRowsOfTable(\"projects\")).isEqualTo(4);",
      "info" : "ExpressionStatement[13383-13446]:ExpressionStatement[13904-13967]"
    }, {
      "left" : "ComponentDto projectReloaded = dbClient.componentDao().selectNullableByKey(session, PROJECT_KEY);",
      "right" : "ComponentDto projectReloaded = dbClient.componentDao().selectNullableByKey(session, PROJECT_KEY);",
      "info" : "VariableDeclarationStatement[13452-13549]:VariableDeclarationStatement[13973-14070]"
    }, {
      "left" : "assertThat(projectReloaded.getId()).isEqualTo(project.getId());",
      "right" : "assertThat(projectReloaded.getId()).isEqualTo(project.getId());",
      "info" : "ExpressionStatement[13554-13617]:ExpressionStatement[14075-14138]"
    }, {
      "left" : "assertThat(projectReloaded.uuid()).isEqualTo(project.uuid());",
      "right" : "assertThat(projectReloaded.uuid()).isEqualTo(project.uuid());",
      "info" : "ExpressionStatement[13622-13683]:ExpressionStatement[14143-14204]"
    }, {
      "left" : "ComponentDto moduleReloaded = dbClient.componentDao().selectNullableByKey(session, \"MODULE_KEY\");",
      "right" : "ComponentDto moduleReloaded = dbClient.componentDao().selectNullableByKey(session, \"MODULE_KEY\");",
      "info" : "VariableDeclarationStatement[13689-13786]:VariableDeclarationStatement[14210-14307]"
    }, {
      "left" : "assertThat(moduleReloaded.getId()).isEqualTo(module.getId());",
      "right" : "assertThat(moduleReloaded.getId()).isEqualTo(module.getId());",
      "info" : "ExpressionStatement[13791-13852]:ExpressionStatement[14312-14373]"
    }, {
      "left" : "assertThat(moduleReloaded.uuid()).isEqualTo(module.uuid());",
      "right" : "assertThat(moduleReloaded.uuid()).isEqualTo(module.uuid());",
      "info" : "ExpressionStatement[13857-13916]:ExpressionStatement[14378-14437]"
    }, {
      "left" : "assertThat(moduleReloaded.moduleUuid()).isEqualTo(module.moduleUuid());",
      "right" : "assertThat(moduleReloaded.moduleUuid()).isEqualTo(module.moduleUuid());",
      "info" : "ExpressionStatement[13921-13992]:ExpressionStatement[14442-14513]"
    }, {
      "left" : "assertThat(moduleReloaded.moduleUuidPath()).isEqualTo(module.moduleUuidPath());",
      "right" : "assertThat(moduleReloaded.moduleUuidPath()).isEqualTo(module.moduleUuidPath());",
      "info" : "ExpressionStatement[13997-14076]:ExpressionStatement[14518-14597]"
    }, {
      "left" : "assertThat(moduleReloaded.projectUuid()).isEqualTo(module.projectUuid());",
      "right" : "assertThat(moduleReloaded.projectUuid()).isEqualTo(module.projectUuid());",
      "info" : "ExpressionStatement[14081-14154]:ExpressionStatement[14602-14675]"
    }, {
      "left" : "assertThat(moduleReloaded.parentProjectId()).isEqualTo(module.parentProjectId());",
      "right" : "assertThat(moduleReloaded.parentProjectId()).isEqualTo(module.parentProjectId());",
      "info" : "ExpressionStatement[14159-14240]:ExpressionStatement[14680-14761]"
    }, {
      "left" : "ComponentDto directory = dbClient.componentDao().selectNullableByKey(session, \"MODULE_KEY:src/main/java/dir\");",
      "right" : "ComponentDto directory = dbClient.componentDao().selectNullableByKey(session, \"MODULE_KEY:src/main/java/dir\");",
      "info" : "VariableDeclarationStatement[14246-14356]:VariableDeclarationStatement[14767-14877]"
    }, {
      "left" : "assertThat(directory).isNotNull();",
      "right" : "assertThat(directory).isNotNull();",
      "info" : "ExpressionStatement[14361-14395]:ExpressionStatement[14882-14916]"
    }, {
      "left" : "assertThat(directory.moduleUuid()).isEqualTo(module.uuid());",
      "right" : "assertThat(directory.moduleUuid()).isEqualTo(module.uuid());",
      "info" : "ExpressionStatement[14400-14460]:ExpressionStatement[14921-14981]"
    }, {
      "left" : "assertThat(directory.moduleUuidPath()).isEqualTo(module.moduleUuidPath());",
      "right" : "assertThat(directory.moduleUuidPath()).isEqualTo(module.moduleUuidPath());",
      "info" : "ExpressionStatement[14465-14539]:ExpressionStatement[14986-15060]"
    }, {
      "left" : "assertThat(directory.projectUuid()).isEqualTo(project.uuid());",
      "right" : "assertThat(directory.projectUuid()).isEqualTo(project.uuid());",
      "info" : "ExpressionStatement[14544-14606]:ExpressionStatement[15065-15127]"
    }, {
      "left" : "assertThat(directory.parentProjectId()).isEqualTo(module.getId());",
      "right" : "assertThat(directory.parentProjectId()).isEqualTo(module.getId());",
      "info" : "ExpressionStatement[14611-14677]:ExpressionStatement[15132-15198]"
    }, {
      "left" : "ComponentDto file = dbClient.componentDao().selectNullableByKey(session, \"MODULE_KEY:src/main/java/dir/Foo.java\");",
      "right" : "ComponentDto file = dbClient.componentDao().selectNullableByKey(session, \"MODULE_KEY:src/main/java/dir/Foo.java\");",
      "info" : "VariableDeclarationStatement[14683-14797]:VariableDeclarationStatement[15204-15318]"
    }, {
      "left" : "assertThat(file).isNotNull();",
      "right" : "assertThat(file).isNotNull();",
      "info" : "ExpressionStatement[14802-14831]:ExpressionStatement[15323-15352]"
    }, {
      "left" : "assertThat(file.moduleUuid()).isEqualTo(module.uuid());",
      "right" : "assertThat(file.moduleUuid()).isEqualTo(module.uuid());",
      "info" : "ExpressionStatement[14836-14891]:ExpressionStatement[15357-15412]"
    }, {
      "left" : "assertThat(file.moduleUuidPath()).isEqualTo(module.moduleUuidPath());",
      "right" : "assertThat(file.moduleUuidPath()).isEqualTo(module.moduleUuidPath());",
      "info" : "ExpressionStatement[14896-14965]:ExpressionStatement[15417-15486]"
    }, {
      "left" : "assertThat(file.projectUuid()).isEqualTo(project.uuid());",
      "right" : "assertThat(file.projectUuid()).isEqualTo(project.uuid());",
      "info" : "ExpressionStatement[14970-15027]:ExpressionStatement[15491-15548]"
    }, {
      "left" : "assertThat(file.parentProjectId()).isEqualTo(module.getId());",
      "right" : "assertThat(file.parentProjectId()).isEqualTo(module.getId());",
      "info" : "ExpressionStatement[15032-15093]:ExpressionStatement[15553-15614]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15166-18076]:Block[15687-18597]"
    }, {
      "left" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(1)\n      .setType(Constants.ComponentType.PROJECT)\n      .setKey(PROJECT_KEY)\n      .setName(\"Project\")\n      .addChildRef(2)\n      .build());",
      "right" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(1)\n      .setType(Constants.ComponentType.PROJECT)\n      .setKey(PROJECT_KEY)\n      .setName(\"Project\")\n      .addChildRef(2)\n      .build());",
      "info" : "ExpressionStatement[15172-15389]:ExpressionStatement[15693-15910]"
    }, {
      "left" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(2)\n      .setType(Constants.ComponentType.MODULE)\n      .setKey(\"MODULE_KEY\")\n      .setName(\"Module\")\n      .addChildRef(3)\n      .build());",
      "right" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(2)\n      .setType(Constants.ComponentType.MODULE)\n      .setKey(\"MODULE_KEY\")\n      .setName(\"Module\")\n      .addChildRef(3)\n      .build());",
      "info" : "ExpressionStatement[15394-15610]:ExpressionStatement[15915-16131]"
    }, {
      "left" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(3)\n      .setType(Constants.ComponentType.MODULE)\n      .setKey(\"SUB_MODULE_1_KEY\")\n      .setName(\"Sub Module 1\")\n      .addChildRef(4)\n      .build());",
      "right" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(3)\n      .setType(Constants.ComponentType.MODULE)\n      .setKey(\"SUB_MODULE_1_KEY\")\n      .setName(\"Sub Module 1\")\n      .addChildRef(4)\n      .build());",
      "info" : "ExpressionStatement[15615-15843]:ExpressionStatement[16136-16364]"
    }, {
      "left" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(4)\n      .setType(Constants.ComponentType.MODULE)\n      .setKey(\"SUB_MODULE_2_KEY\")\n      .setName(\"Sub Module 2\")\n      .addChildRef(5)\n      .build());",
      "right" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(4)\n      .setType(Constants.ComponentType.MODULE)\n      .setKey(\"SUB_MODULE_2_KEY\")\n      .setName(\"Sub Module 2\")\n      .addChildRef(5)\n      .build());",
      "info" : "ExpressionStatement[15848-16076]:ExpressionStatement[16369-16597]"
    }, {
      "left" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(5)\n      .setType(Constants.ComponentType.DIRECTORY)\n      .setPath(\"src/main/java/dir\")\n      .build());",
      "right" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(5)\n      .setType(Constants.ComponentType.DIRECTORY)\n      .setPath(\"src/main/java/dir\")\n      .build());",
      "info" : "ExpressionStatement[16081-16261]:ExpressionStatement[16602-16782]"
    }, {
      "left" : "treeRootHolder.setRoot(DumbComponent.builder(Component.Type.PROJECT, 1).setUuid(\"ABCD\").setKey(PROJECT_KEY).addChildren(\n      DumbComponent.builder(Component.Type.MODULE, 2).setUuid(\"BCDE\").setKey(\"MODULE_KEY\").addChildren(\n        DumbComponent.builder(Component.Type.MODULE, 3).setUuid(\"CDEF\").setKey(\"SUB_MODULE_1_KEY\").addChildren(\n          DumbComponent.builder(Component.Type.MODULE, 4).setUuid(\"DEFG\").setKey(\"SUB_MODULE_2_KEY\").addChildren(\n            DumbComponent.builder(Component.Type.DIRECTORY, 5).setUuid(\"EFGH\").setKey(\"SUB_MODULE_2_KEY:src/main/java/dir\").build())\n            .build())\n          .build())\n        .build())\n      .build());",
      "right" : "treeRootHolder.setRoot(DumbComponent.builder(Component.Type.PROJECT, 1).setUuid(\"ABCD\").setKey(PROJECT_KEY).addChildren(\n      DumbComponent.builder(Component.Type.MODULE, 2).setUuid(\"BCDE\").setKey(\"MODULE_KEY\").addChildren(\n        DumbComponent.builder(Component.Type.MODULE, 3).setUuid(\"CDEF\").setKey(\"SUB_MODULE_1_KEY\").addChildren(\n          DumbComponent.builder(Component.Type.MODULE, 4).setUuid(\"DEFG\").setKey(\"SUB_MODULE_2_KEY\").addChildren(\n            DumbComponent.builder(Component.Type.DIRECTORY, 5).setUuid(\"EFGH\").setKey(\"SUB_MODULE_2_KEY:src/main/java/dir\").build())\n            .build())\n          .build())\n        .build())\n      .build());",
      "info" : "ExpressionStatement[16267-16927]:ExpressionStatement[16788-17448]"
    }, {
      "left" : "sut.execute();",
      "right" : "sut.execute();",
      "info" : "ExpressionStatement[16933-16947]:ExpressionStatement[17454-17468]"
    }, {
      "left" : "assertThat(dbTester.countRowsOfTable(\"projects\")).isEqualTo(5);",
      "right" : "assertThat(dbTester.countRowsOfTable(\"projects\")).isEqualTo(5);",
      "info" : "ExpressionStatement[16953-17016]:ExpressionStatement[17474-17537]"
    }, {
      "left" : "ComponentDto project = dbClient.componentDao().selectNullableByKey(session, PROJECT_KEY);",
      "right" : "ComponentDto project = dbClient.componentDao().selectNullableByKey(session, PROJECT_KEY);",
      "info" : "VariableDeclarationStatement[17022-17111]:VariableDeclarationStatement[17543-17632]"
    }, {
      "left" : "assertThat(project).isNotNull();",
      "right" : "assertThat(project).isNotNull();",
      "info" : "ExpressionStatement[17116-17148]:ExpressionStatement[17637-17669]"
    }, {
      "left" : "assertThat(project.parentProjectId()).isNull();",
      "right" : "assertThat(project.parentProjectId()).isNull();",
      "info" : "ExpressionStatement[17153-17200]:ExpressionStatement[17674-17721]"
    }, {
      "left" : "ComponentDto module = dbClient.componentDao().selectNullableByKey(session, \"MODULE_KEY\");",
      "right" : "ComponentDto module = dbClient.componentDao().selectNullableByKey(session, \"MODULE_KEY\");",
      "info" : "VariableDeclarationStatement[17206-17295]:VariableDeclarationStatement[17727-17816]"
    }, {
      "left" : "assertThat(module).isNotNull();",
      "right" : "assertThat(module).isNotNull();",
      "info" : "ExpressionStatement[17300-17331]:ExpressionStatement[17821-17852]"
    }, {
      "left" : "assertThat(module.parentProjectId()).isEqualTo(project.getId());",
      "right" : "assertThat(module.parentProjectId()).isEqualTo(project.getId());",
      "info" : "ExpressionStatement[17336-17400]:ExpressionStatement[17857-17921]"
    }, {
      "left" : "ComponentDto subModule1 = dbClient.componentDao().selectNullableByKey(session, \"SUB_MODULE_1_KEY\");",
      "right" : "ComponentDto subModule1 = dbClient.componentDao().selectNullableByKey(session, \"SUB_MODULE_1_KEY\");",
      "info" : "VariableDeclarationStatement[17406-17505]:VariableDeclarationStatement[17927-18026]"
    }, {
      "left" : "assertThat(subModule1).isNotNull();",
      "right" : "assertThat(subModule1).isNotNull();",
      "info" : "ExpressionStatement[17510-17545]:ExpressionStatement[18031-18066]"
    }, {
      "left" : "assertThat(subModule1.parentProjectId()).isEqualTo(project.getId());",
      "right" : "assertThat(subModule1.parentProjectId()).isEqualTo(project.getId());",
      "info" : "ExpressionStatement[17550-17618]:ExpressionStatement[18071-18139]"
    }, {
      "left" : "ComponentDto subModule2 = dbClient.componentDao().selectNullableByKey(session, \"SUB_MODULE_2_KEY\");",
      "right" : "ComponentDto subModule2 = dbClient.componentDao().selectNullableByKey(session, \"SUB_MODULE_2_KEY\");",
      "info" : "VariableDeclarationStatement[17624-17723]:VariableDeclarationStatement[18145-18244]"
    }, {
      "left" : "assertThat(subModule2).isNotNull();",
      "right" : "assertThat(subModule2).isNotNull();",
      "info" : "ExpressionStatement[17728-17763]:ExpressionStatement[18249-18284]"
    }, {
      "left" : "assertThat(subModule2.parentProjectId()).isEqualTo(project.getId());",
      "right" : "assertThat(subModule2.parentProjectId()).isEqualTo(project.getId());",
      "info" : "ExpressionStatement[17768-17836]:ExpressionStatement[18289-18357]"
    }, {
      "left" : "ComponentDto directory = dbClient.componentDao().selectNullableByKey(session, \"SUB_MODULE_2_KEY:src/main/java/dir\");",
      "right" : "ComponentDto directory = dbClient.componentDao().selectNullableByKey(session, \"SUB_MODULE_2_KEY:src/main/java/dir\");",
      "info" : "VariableDeclarationStatement[17842-17958]:VariableDeclarationStatement[18363-18479]"
    }, {
      "left" : "assertThat(directory).isNotNull();",
      "right" : "assertThat(directory).isNotNull();",
      "info" : "ExpressionStatement[17963-17997]:ExpressionStatement[18484-18518]"
    }, {
      "left" : "assertThat(directory.parentProjectId()).isEqualTo(subModule2.getId());",
      "right" : "assertThat(directory.parentProjectId()).isEqualTo(subModule2.getId());",
      "info" : "ExpressionStatement[18002-18072]:ExpressionStatement[18523-18593]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18141-20993]:Block[18662-21514]"
    }, {
      "left" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(1)\n      .setType(Constants.ComponentType.PROJECT)\n      .setKey(PROJECT_KEY)\n      .setName(\"Project\")\n      .addChildRef(2)\n      .addChildRef(4)\n      .build());",
      "right" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(1)\n      .setType(Constants.ComponentType.PROJECT)\n      .setKey(PROJECT_KEY)\n      .setName(\"Project\")\n      .addChildRef(2)\n      .addChildRef(4)\n      .build());",
      "info" : "ExpressionStatement[18147-18386]:ExpressionStatement[18668-18907]"
    }, {
      "left" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(2)\n      .setType(Constants.ComponentType.MODULE)\n      .setKey(\"MODULE_A\")\n      .setName(\"Module A\")\n      .addChildRef(3)\n      .build());",
      "right" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(2)\n      .setType(Constants.ComponentType.MODULE)\n      .setKey(\"MODULE_A\")\n      .setName(\"Module A\")\n      .addChildRef(3)\n      .build());",
      "info" : "ExpressionStatement[18391-18607]:ExpressionStatement[18912-19128]"
    }, {
      "left" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(3)\n      .setType(Constants.ComponentType.MODULE)\n      .setKey(\"SUB_MODULE_A\")\n      .setName(\"Sub Module A\")\n      .build());",
      "right" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(3)\n      .setType(Constants.ComponentType.MODULE)\n      .setKey(\"SUB_MODULE_A\")\n      .setName(\"Sub Module A\")\n      .build());",
      "info" : "ExpressionStatement[18612-18814]:ExpressionStatement[19133-19335]"
    }, {
      "left" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(4)\n      .setType(Constants.ComponentType.MODULE)\n      .setKey(\"MODULE_B\")\n      .setName(\"Module B\")\n      .build());",
      "right" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(4)\n      .setType(Constants.ComponentType.MODULE)\n      .setKey(\"MODULE_B\")\n      .setName(\"Module B\")\n      .build());",
      "info" : "ExpressionStatement[18819-19013]:ExpressionStatement[19340-19534]"
    }, {
      "left" : "treeRootHolder.setRoot(DumbComponent.builder(Component.Type.PROJECT, 1).setUuid(\"ABCD\").setKey(PROJECT_KEY).addChildren(\n      DumbComponent.builder(Component.Type.MODULE, 2).setUuid(\"BCDE\").setKey(\"MODULE_A\").addChildren(\n        DumbComponent.builder(Component.Type.MODULE, 3).setUuid(\"DEFG\").setKey(\"SUB_MODULE_A\").build()).build(),\n      DumbComponent.builder(Component.Type.MODULE, 4).setUuid(\"CDEF\").setKey(\"MODULE_B\").build())\n      .build());",
      "right" : "treeRootHolder.setRoot(DumbComponent.builder(Component.Type.PROJECT, 1).setUuid(\"ABCD\").setKey(PROJECT_KEY).addChildren(\n      DumbComponent.builder(Component.Type.MODULE, 2).setUuid(\"BCDE\").setKey(\"MODULE_A\").addChildren(\n        DumbComponent.builder(Component.Type.MODULE, 3).setUuid(\"DEFG\").setKey(\"SUB_MODULE_A\").build()).build(),\n      DumbComponent.builder(Component.Type.MODULE, 4).setUuid(\"CDEF\").setKey(\"MODULE_B\").build())\n      .build());",
      "info" : "ExpressionStatement[19019-19469]:ExpressionStatement[19540-19990]"
    }, {
      "left" : "sut.execute();",
      "right" : "sut.execute();",
      "info" : "ExpressionStatement[19475-19489]:ExpressionStatement[19996-20010]"
    }, {
      "left" : "assertThat(dbTester.countRowsOfTable(\"projects\")).isEqualTo(4);",
      "right" : "assertThat(dbTester.countRowsOfTable(\"projects\")).isEqualTo(4);",
      "info" : "ExpressionStatement[19495-19558]:ExpressionStatement[20016-20079]"
    }, {
      "left" : "ComponentDto project = dbClient.componentDao().selectNullableByKey(session, PROJECT_KEY);",
      "right" : "ComponentDto project = dbClient.componentDao().selectNullableByKey(session, PROJECT_KEY);",
      "info" : "VariableDeclarationStatement[19564-19653]:VariableDeclarationStatement[20085-20174]"
    }, {
      "left" : "assertThat(project).isNotNull();",
      "right" : "assertThat(project).isNotNull();",
      "info" : "ExpressionStatement[19658-19690]:ExpressionStatement[20179-20211]"
    }, {
      "left" : "assertThat(project.moduleUuid()).isNull();",
      "right" : "assertThat(project.moduleUuid()).isNull();",
      "info" : "ExpressionStatement[19695-19737]:ExpressionStatement[20216-20258]"
    }, {
      "left" : "assertThat(project.moduleUuidPath()).isEqualTo(\".\" + project.uuid() + \".\");",
      "right" : "assertThat(project.moduleUuidPath()).isEqualTo(\".\" + project.uuid() + \".\");",
      "info" : "ExpressionStatement[19742-19817]:ExpressionStatement[20263-20338]"
    }, {
      "left" : "assertThat(project.parentProjectId()).isNull();",
      "right" : "assertThat(project.parentProjectId()).isNull();",
      "info" : "ExpressionStatement[19822-19869]:ExpressionStatement[20343-20390]"
    }, {
      "left" : "ComponentDto moduleA = dbClient.componentDao().selectNullableByKey(session, \"MODULE_A\");",
      "right" : "ComponentDto moduleA = dbClient.componentDao().selectNullableByKey(session, \"MODULE_A\");",
      "info" : "VariableDeclarationStatement[19875-19963]:VariableDeclarationStatement[20396-20484]"
    }, {
      "left" : "assertThat(moduleA).isNotNull();",
      "right" : "assertThat(moduleA).isNotNull();",
      "info" : "ExpressionStatement[19968-20000]:ExpressionStatement[20489-20521]"
    }, {
      "left" : "assertThat(moduleA.moduleUuid()).isEqualTo(project.uuid());",
      "right" : "assertThat(moduleA.moduleUuid()).isEqualTo(project.uuid());",
      "info" : "ExpressionStatement[20005-20064]:ExpressionStatement[20526-20585]"
    }, {
      "left" : "assertThat(moduleA.moduleUuidPath()).isEqualTo(project.moduleUuidPath() + moduleA.uuid() + \".\");",
      "right" : "assertThat(moduleA.moduleUuidPath()).isEqualTo(project.moduleUuidPath() + moduleA.uuid() + \".\");",
      "info" : "ExpressionStatement[20069-20165]:ExpressionStatement[20590-20686]"
    }, {
      "left" : "assertThat(moduleA.parentProjectId()).isEqualTo(project.getId());",
      "right" : "assertThat(moduleA.parentProjectId()).isEqualTo(project.getId());",
      "info" : "ExpressionStatement[20170-20235]:ExpressionStatement[20691-20756]"
    }, {
      "left" : "ComponentDto subModuleA = dbClient.componentDao().selectNullableByKey(session, \"SUB_MODULE_A\");",
      "right" : "ComponentDto subModuleA = dbClient.componentDao().selectNullableByKey(session, \"SUB_MODULE_A\");",
      "info" : "VariableDeclarationStatement[20241-20336]:VariableDeclarationStatement[20762-20857]"
    }, {
      "left" : "assertThat(subModuleA).isNotNull();",
      "right" : "assertThat(subModuleA).isNotNull();",
      "info" : "ExpressionStatement[20341-20376]:ExpressionStatement[20862-20897]"
    }, {
      "left" : "assertThat(subModuleA.moduleUuid()).isEqualTo(moduleA.uuid());",
      "right" : "assertThat(subModuleA.moduleUuid()).isEqualTo(moduleA.uuid());",
      "info" : "ExpressionStatement[20381-20443]:ExpressionStatement[20902-20964]"
    }, {
      "left" : "assertThat(subModuleA.moduleUuidPath()).isEqualTo(moduleA.moduleUuidPath() + subModuleA.uuid() + \".\");",
      "right" : "assertThat(subModuleA.moduleUuidPath()).isEqualTo(moduleA.moduleUuidPath() + subModuleA.uuid() + \".\");",
      "info" : "ExpressionStatement[20448-20550]:ExpressionStatement[20969-21071]"
    }, {
      "left" : "assertThat(subModuleA.parentProjectId()).isEqualTo(project.getId());",
      "right" : "assertThat(subModuleA.parentProjectId()).isEqualTo(project.getId());",
      "info" : "ExpressionStatement[20555-20623]:ExpressionStatement[21076-21144]"
    }, {
      "left" : "ComponentDto moduleB = dbClient.componentDao().selectNullableByKey(session, \"MODULE_B\");",
      "right" : "ComponentDto moduleB = dbClient.componentDao().selectNullableByKey(session, \"MODULE_B\");",
      "info" : "VariableDeclarationStatement[20629-20717]:VariableDeclarationStatement[21150-21238]"
    }, {
      "left" : "assertThat(moduleB).isNotNull();",
      "right" : "assertThat(moduleB).isNotNull();",
      "info" : "ExpressionStatement[20722-20754]:ExpressionStatement[21243-21275]"
    }, {
      "left" : "assertThat(moduleB.moduleUuid()).isEqualTo(project.uuid());",
      "right" : "assertThat(moduleB.moduleUuid()).isEqualTo(project.uuid());",
      "info" : "ExpressionStatement[20759-20818]:ExpressionStatement[21280-21339]"
    }, {
      "left" : "assertThat(moduleB.moduleUuidPath()).isEqualTo(project.moduleUuidPath() + moduleB.uuid() + \".\");",
      "right" : "assertThat(moduleB.moduleUuidPath()).isEqualTo(project.moduleUuidPath() + moduleB.uuid() + \".\");",
      "info" : "ExpressionStatement[20823-20919]:ExpressionStatement[21344-21440]"
    }, {
      "left" : "assertThat(moduleB.parentProjectId()).isEqualTo(project.getId());",
      "right" : "assertThat(moduleB.parentProjectId()).isEqualTo(project.getId());",
      "info" : "ExpressionStatement[20924-20989]:ExpressionStatement[21445-21510]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21055-26290]:Block[21576-26811]"
    }, {
      "left" : "ComponentDto project = ComponentTesting.newProjectDto(\"ABCD\").setKey(PROJECT_KEY).setName(\"Project\");",
      "right" : "ComponentDto project = ComponentTesting.newProjectDto(\"ABCD\").setKey(PROJECT_KEY).setName(\"Project\");",
      "info" : "VariableDeclarationStatement[21061-21162]:VariableDeclarationStatement[21582-21683]"
    }, {
      "left" : "dbClient.componentDao().insert(session, project);",
      "right" : "dbClient.componentDao().insert(session, project);",
      "info" : "ExpressionStatement[21167-21216]:ExpressionStatement[21688-21737]"
    }, {
      "left" : "ComponentDto module = ComponentTesting.newModuleDto(\"BCDE\", project).setKey(\"MODULE_KEY\").setName(\"Module\");",
      "right" : "ComponentDto module = ComponentTesting.newModuleDto(\"BCDE\", project).setKey(\"MODULE_KEY\").setName(\"Module\");",
      "info" : "VariableDeclarationStatement[21221-21329]:VariableDeclarationStatement[21742-21850]"
    }, {
      "left" : "dbClient.componentDao().insert(session, module);",
      "right" : "dbClient.componentDao().insert(session, module);",
      "info" : "ExpressionStatement[21334-21382]:ExpressionStatement[21855-21903]"
    }, {
      "left" : "ComponentDto directory = ComponentTesting.newDirectory(module, \"src/main/java/dir\").setUuid(\"CDEF\").setKey(\"MODULE_KEY:src/main/java/dir\");",
      "right" : "ComponentDto directory = ComponentTesting.newDirectory(module, \"src/main/java/dir\").setUuid(\"CDEF\").setKey(\"MODULE_KEY:src/main/java/dir\");",
      "info" : "VariableDeclarationStatement[21387-21526]:VariableDeclarationStatement[21908-22047]"
    }, {
      "left" : "ComponentDto file = ComponentTesting.newFileDto(module, \"DEFG\").setPath(\"src/main/java/dir/Foo.java\").setName(\"Foo.java\").setKey(\"MODULE_KEY:src/main/java/dir/Foo.java\");",
      "right" : "ComponentDto file = ComponentTesting.newFileDto(module, \"DEFG\").setPath(\"src/main/java/dir/Foo.java\").setName(\"Foo.java\").setKey(\"MODULE_KEY:src/main/java/dir/Foo.java\");",
      "info" : "VariableDeclarationStatement[21531-21701]:VariableDeclarationStatement[22052-22222]"
    }, {
      "left" : "dbClient.componentDao().insert(session, directory, file);",
      "right" : "dbClient.componentDao().insert(session, directory, file);",
      "info" : "ExpressionStatement[21706-21763]:ExpressionStatement[22227-22284]"
    }, {
      "left" : "session.commit();",
      "right" : "session.commit();",
      "info" : "ExpressionStatement[21768-21785]:ExpressionStatement[22289-22306]"
    }, {
      "left" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(1)\n      .setType(Constants.ComponentType.PROJECT)\n      .setKey(PROJECT_KEY)\n      .setName(\"Project\")\n      .addChildRef(2)\n      .build());",
      "right" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(1)\n      .setType(Constants.ComponentType.PROJECT)\n      .setKey(PROJECT_KEY)\n      .setName(\"Project\")\n      .addChildRef(2)\n      .build());",
      "info" : "ExpressionStatement[21791-22008]:ExpressionStatement[22312-22529]"
    }, {
      "left" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(2)\n      .setType(Constants.ComponentType.MODULE)\n      .setKey(\"MODULE_KEY\")\n      .setName(\"Module\")\n      .addChildRef(3)\n      .build());",
      "right" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(2)\n      .setType(Constants.ComponentType.MODULE)\n      .setKey(\"MODULE_KEY\")\n      .setName(\"Module\")\n      .addChildRef(3)\n      .build());",
      "info" : "ExpressionStatement[22013-22229]:ExpressionStatement[22534-22750]"
    }, {
      "left" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(3)\n      .setType(Constants.ComponentType.DIRECTORY)\n      .setPath(\"src/main/java/dir\")\n      .addChildRef(4)\n      .build());",
      "right" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(3)\n      .setType(Constants.ComponentType.DIRECTORY)\n      .setPath(\"src/main/java/dir\")\n      .addChildRef(4)\n      .build());",
      "info" : "ExpressionStatement[22234-22436]:ExpressionStatement[22755-22957]"
    }, {
      "left" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(4)\n      .setType(Constants.ComponentType.FILE)\n      .setPath(\"src/main/java/dir/Foo.java\")\n      .build());",
      "right" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(4)\n      .setType(Constants.ComponentType.FILE)\n      .setPath(\"src/main/java/dir/Foo.java\")\n      .build());",
      "info" : "ExpressionStatement[22441-22625]:ExpressionStatement[22962-23146]"
    }, {
      "left" : "treeRootHolder.setRoot(DumbComponent.builder(Component.Type.PROJECT, 1).setUuid(\"ABCD\").setKey(PROJECT_KEY).addChildren(\n      DumbComponent.builder(Component.Type.MODULE, 2).setUuid(\"BCDE\").setKey(\"MODULE_KEY\").addChildren(\n        DumbComponent.builder(Component.Type.DIRECTORY, 3).setUuid(\"CDEF\").setKey(\"MODULE_KEY:src/main/java/dir\").addChildren(\n          DumbComponent.builder(Component.Type.FILE, 4).setUuid(\"DEFG\").setKey(\"MODULE_KEY:src/main/java/dir/Foo.java\").build())\n          .build())\n        .build())\n      .build());",
      "right" : "treeRootHolder.setRoot(DumbComponent.builder(Component.Type.PROJECT, 1).setUuid(\"ABCD\").setKey(PROJECT_KEY).addChildren(\n      DumbComponent.builder(Component.Type.MODULE, 2).setUuid(\"BCDE\").setKey(\"MODULE_KEY\").addChildren(\n        DumbComponent.builder(Component.Type.DIRECTORY, 3).setUuid(\"CDEF\").setKey(\"MODULE_KEY:src/main/java/dir\").addChildren(\n          DumbComponent.builder(Component.Type.FILE, 4).setUuid(\"DEFG\").setKey(\"MODULE_KEY:src/main/java/dir/Foo.java\").build())\n          .build())\n        .build())\n      .build());",
      "info" : "ExpressionStatement[22631-23166]:ExpressionStatement[23152-23687]"
    }, {
      "left" : "sut.execute();",
      "right" : "sut.execute();",
      "info" : "ExpressionStatement[23172-23186]:ExpressionStatement[23693-23707]"
    }, {
      "left" : "assertThat(dbTester.countRowsOfTable(\"projects\")).isEqualTo(4);",
      "right" : "assertThat(dbTester.countRowsOfTable(\"projects\")).isEqualTo(4);",
      "info" : "ExpressionStatement[23192-23255]:ExpressionStatement[23713-23776]"
    }, {
      "left" : "assertThat(dbClient.componentDao().selectNullableByKey(session, PROJECT_KEY).getId()).isEqualTo(project.getId());",
      "right" : "assertThat(dbClient.componentDao().selectNullableByKey(session, PROJECT_KEY).getId()).isEqualTo(project.getId());",
      "info" : "ExpressionStatement[23260-23373]:ExpressionStatement[23781-23894]"
    }, {
      "left" : "assertThat(dbClient.componentDao().selectNullableByKey(session, \"MODULE_KEY\").getId()).isEqualTo(module.getId());",
      "right" : "assertThat(dbClient.componentDao().selectNullableByKey(session, \"MODULE_KEY\").getId()).isEqualTo(module.getId());",
      "info" : "ExpressionStatement[23378-23491]:ExpressionStatement[23899-24012]"
    }, {
      "left" : "assertThat(dbClient.componentDao().selectNullableByKey(session, \"MODULE_KEY:src/main/java/dir\").getId()).isEqualTo(directory.getId());",
      "right" : "assertThat(dbClient.componentDao().selectNullableByKey(session, \"MODULE_KEY:src/main/java/dir\").getId()).isEqualTo(directory.getId());",
      "info" : "ExpressionStatement[23496-23630]:ExpressionStatement[24017-24151]"
    }, {
      "left" : "assertThat(dbClient.componentDao().selectNullableByKey(session, \"MODULE_KEY:src/main/java/dir/Foo.java\").getId()).isEqualTo(file.getId());",
      "right" : "assertThat(dbClient.componentDao().selectNullableByKey(session, \"MODULE_KEY:src/main/java/dir/Foo.java\").getId()).isEqualTo(file.getId());",
      "info" : "ExpressionStatement[23635-23773]:ExpressionStatement[24156-24294]"
    }, {
      "left" : "ComponentDto projectReloaded = dbClient.componentDao().selectNullableByKey(session, PROJECT_KEY);",
      "right" : "ComponentDto projectReloaded = dbClient.componentDao().selectNullableByKey(session, PROJECT_KEY);",
      "info" : "VariableDeclarationStatement[23779-23876]:VariableDeclarationStatement[24300-24397]"
    }, {
      "left" : "assertThat(projectReloaded.getId()).isEqualTo(project.getId());",
      "right" : "assertThat(projectReloaded.getId()).isEqualTo(project.getId());",
      "info" : "ExpressionStatement[23881-23944]:ExpressionStatement[24402-24465]"
    }, {
      "left" : "assertThat(projectReloaded.uuid()).isEqualTo(project.uuid());",
      "right" : "assertThat(projectReloaded.uuid()).isEqualTo(project.uuid());",
      "info" : "ExpressionStatement[23949-24010]:ExpressionStatement[24470-24531]"
    }, {
      "left" : "assertThat(projectReloaded.moduleUuid()).isEqualTo(project.moduleUuid());",
      "right" : "assertThat(projectReloaded.moduleUuid()).isEqualTo(project.moduleUuid());",
      "info" : "ExpressionStatement[24015-24088]:ExpressionStatement[24536-24609]"
    }, {
      "left" : "assertThat(projectReloaded.moduleUuidPath()).isEqualTo(project.moduleUuidPath());",
      "right" : "assertThat(projectReloaded.moduleUuidPath()).isEqualTo(project.moduleUuidPath());",
      "info" : "ExpressionStatement[24093-24174]:ExpressionStatement[24614-24695]"
    }, {
      "left" : "assertThat(projectReloaded.projectUuid()).isEqualTo(project.projectUuid());",
      "right" : "assertThat(projectReloaded.projectUuid()).isEqualTo(project.projectUuid());",
      "info" : "ExpressionStatement[24179-24254]:ExpressionStatement[24700-24775]"
    }, {
      "left" : "assertThat(projectReloaded.parentProjectId()).isEqualTo(project.parentProjectId());",
      "right" : "assertThat(projectReloaded.parentProjectId()).isEqualTo(project.parentProjectId());",
      "info" : "ExpressionStatement[24259-24342]:ExpressionStatement[24780-24863]"
    }, {
      "left" : "ComponentDto moduleReloaded = dbClient.componentDao().selectNullableByKey(session, \"MODULE_KEY\");",
      "right" : "ComponentDto moduleReloaded = dbClient.componentDao().selectNullableByKey(session, \"MODULE_KEY\");",
      "info" : "VariableDeclarationStatement[24348-24445]:VariableDeclarationStatement[24869-24966]"
    }, {
      "left" : "assertThat(moduleReloaded.getId()).isEqualTo(module.getId());",
      "right" : "assertThat(moduleReloaded.getId()).isEqualTo(module.getId());",
      "info" : "ExpressionStatement[24450-24511]:ExpressionStatement[24971-25032]"
    }, {
      "left" : "assertThat(moduleReloaded.uuid()).isEqualTo(module.uuid());",
      "right" : "assertThat(moduleReloaded.uuid()).isEqualTo(module.uuid());",
      "info" : "ExpressionStatement[24516-24575]:ExpressionStatement[25037-25096]"
    }, {
      "left" : "assertThat(moduleReloaded.moduleUuid()).isEqualTo(module.moduleUuid());",
      "right" : "assertThat(moduleReloaded.moduleUuid()).isEqualTo(module.moduleUuid());",
      "info" : "ExpressionStatement[24580-24651]:ExpressionStatement[25101-25172]"
    }, {
      "left" : "assertThat(moduleReloaded.moduleUuidPath()).isEqualTo(module.moduleUuidPath());",
      "right" : "assertThat(moduleReloaded.moduleUuidPath()).isEqualTo(module.moduleUuidPath());",
      "info" : "ExpressionStatement[24656-24735]:ExpressionStatement[25177-25256]"
    }, {
      "left" : "assertThat(moduleReloaded.projectUuid()).isEqualTo(module.projectUuid());",
      "right" : "assertThat(moduleReloaded.projectUuid()).isEqualTo(module.projectUuid());",
      "info" : "ExpressionStatement[24740-24813]:ExpressionStatement[25261-25334]"
    }, {
      "left" : "assertThat(moduleReloaded.parentProjectId()).isEqualTo(module.parentProjectId());",
      "right" : "assertThat(moduleReloaded.parentProjectId()).isEqualTo(module.parentProjectId());",
      "info" : "ExpressionStatement[24818-24899]:ExpressionStatement[25339-25420]"
    }, {
      "left" : "ComponentDto directoryReloaded = dbClient.componentDao().selectNullableByKey(session, \"MODULE_KEY:src/main/java/dir\");",
      "right" : "ComponentDto directoryReloaded = dbClient.componentDao().selectNullableByKey(session, \"MODULE_KEY:src/main/java/dir\");",
      "info" : "VariableDeclarationStatement[24905-25023]:VariableDeclarationStatement[25426-25544]"
    }, {
      "left" : "assertThat(directoryReloaded).isNotNull();",
      "right" : "assertThat(directoryReloaded).isNotNull();",
      "info" : "ExpressionStatement[25028-25070]:ExpressionStatement[25549-25591]"
    }, {
      "left" : "assertThat(directoryReloaded.uuid()).isEqualTo(directory.uuid());",
      "right" : "assertThat(directoryReloaded.uuid()).isEqualTo(directory.uuid());",
      "info" : "ExpressionStatement[25075-25140]:ExpressionStatement[25596-25661]"
    }, {
      "left" : "assertThat(directoryReloaded.moduleUuid()).isEqualTo(directory.moduleUuid());",
      "right" : "assertThat(directoryReloaded.moduleUuid()).isEqualTo(directory.moduleUuid());",
      "info" : "ExpressionStatement[25145-25222]:ExpressionStatement[25666-25743]"
    }, {
      "left" : "assertThat(directoryReloaded.moduleUuidPath()).isEqualTo(directory.moduleUuidPath());",
      "right" : "assertThat(directoryReloaded.moduleUuidPath()).isEqualTo(directory.moduleUuidPath());",
      "info" : "ExpressionStatement[25227-25312]:ExpressionStatement[25748-25833]"
    }, {
      "left" : "assertThat(directoryReloaded.projectUuid()).isEqualTo(directory.projectUuid());",
      "right" : "assertThat(directoryReloaded.projectUuid()).isEqualTo(directory.projectUuid());",
      "info" : "ExpressionStatement[25317-25396]:ExpressionStatement[25838-25917]"
    }, {
      "left" : "assertThat(directoryReloaded.parentProjectId()).isEqualTo(directory.parentProjectId());",
      "right" : "assertThat(directoryReloaded.parentProjectId()).isEqualTo(directory.parentProjectId());",
      "info" : "ExpressionStatement[25401-25488]:ExpressionStatement[25922-26009]"
    }, {
      "left" : "assertThat(directoryReloaded.name()).isEqualTo(directory.name());",
      "right" : "assertThat(directoryReloaded.name()).isEqualTo(directory.name());",
      "info" : "ExpressionStatement[25493-25558]:ExpressionStatement[26014-26079]"
    }, {
      "left" : "assertThat(directoryReloaded.path()).isEqualTo(directory.path());",
      "right" : "assertThat(directoryReloaded.path()).isEqualTo(directory.path());",
      "info" : "ExpressionStatement[25563-25628]:ExpressionStatement[26084-26149]"
    }, {
      "left" : "ComponentDto fileReloaded = dbClient.componentDao().selectNullableByKey(session, \"MODULE_KEY:src/main/java/dir/Foo.java\");",
      "right" : "ComponentDto fileReloaded = dbClient.componentDao().selectNullableByKey(session, \"MODULE_KEY:src/main/java/dir/Foo.java\");",
      "info" : "VariableDeclarationStatement[25634-25756]:VariableDeclarationStatement[26155-26277]"
    }, {
      "left" : "assertThat(fileReloaded).isNotNull();",
      "right" : "assertThat(fileReloaded).isNotNull();",
      "info" : "ExpressionStatement[25761-25798]:ExpressionStatement[26282-26319]"
    }, {
      "left" : "assertThat(fileReloaded.uuid()).isEqualTo(file.uuid());",
      "right" : "assertThat(fileReloaded.uuid()).isEqualTo(file.uuid());",
      "info" : "ExpressionStatement[25803-25858]:ExpressionStatement[26324-26379]"
    }, {
      "left" : "assertThat(fileReloaded.moduleUuid()).isEqualTo(file.moduleUuid());",
      "right" : "assertThat(fileReloaded.moduleUuid()).isEqualTo(file.moduleUuid());",
      "info" : "ExpressionStatement[25863-25930]:ExpressionStatement[26384-26451]"
    }, {
      "left" : "assertThat(fileReloaded.moduleUuidPath()).isEqualTo(file.moduleUuidPath());",
      "right" : "assertThat(fileReloaded.moduleUuidPath()).isEqualTo(file.moduleUuidPath());",
      "info" : "ExpressionStatement[25935-26010]:ExpressionStatement[26456-26531]"
    }, {
      "left" : "assertThat(fileReloaded.projectUuid()).isEqualTo(file.projectUuid());",
      "right" : "assertThat(fileReloaded.projectUuid()).isEqualTo(file.projectUuid());",
      "info" : "ExpressionStatement[26015-26084]:ExpressionStatement[26536-26605]"
    }, {
      "left" : "assertThat(fileReloaded.parentProjectId()).isEqualTo(file.parentProjectId());",
      "right" : "assertThat(fileReloaded.parentProjectId()).isEqualTo(file.parentProjectId());",
      "info" : "ExpressionStatement[26089-26166]:ExpressionStatement[26610-26687]"
    }, {
      "left" : "assertThat(fileReloaded.name()).isEqualTo(file.name());",
      "right" : "assertThat(fileReloaded.name()).isEqualTo(file.name());",
      "info" : "ExpressionStatement[26171-26226]:ExpressionStatement[26692-26747]"
    }, {
      "left" : "assertThat(fileReloaded.path()).isEqualTo(file.path());",
      "right" : "assertThat(fileReloaded.path()).isEqualTo(file.path());",
      "info" : "ExpressionStatement[26231-26286]:ExpressionStatement[26752-26807]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26352-27795]:Block[26873-28316]"
    }, {
      "left" : "ComponentDto project = ComponentTesting.newProjectDto(\"ABCD\").setKey(PROJECT_KEY).setName(\"Project\");",
      "right" : "ComponentDto project = ComponentTesting.newProjectDto(\"ABCD\").setKey(PROJECT_KEY).setName(\"Project\");",
      "info" : "VariableDeclarationStatement[26358-26459]:VariableDeclarationStatement[26879-26980]"
    }, {
      "left" : "dbClient.componentDao().insert(session, project);",
      "right" : "dbClient.componentDao().insert(session, project);",
      "info" : "ExpressionStatement[26464-26513]:ExpressionStatement[26985-27034]"
    }, {
      "left" : "ComponentDto module = ComponentTesting.newModuleDto(\"BCDE\", project).setKey(\"MODULE_KEY\").setName(\"Module\").setPath(\"path\");",
      "right" : "ComponentDto module = ComponentTesting.newModuleDto(\"BCDE\", project).setKey(\"MODULE_KEY\").setName(\"Module\").setPath(\"path\");",
      "info" : "VariableDeclarationStatement[26518-26642]:VariableDeclarationStatement[27039-27163]"
    }, {
      "left" : "dbClient.componentDao().insert(session, module);",
      "right" : "dbClient.componentDao().insert(session, module);",
      "info" : "ExpressionStatement[26647-26695]:ExpressionStatement[27168-27216]"
    }, {
      "left" : "session.commit();",
      "right" : "session.commit();",
      "info" : "ExpressionStatement[26700-26717]:ExpressionStatement[27221-27238]"
    }, {
      "left" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(1)\n      .setType(Constants.ComponentType.PROJECT)\n      .setKey(PROJECT_KEY)\n      .setName(\"New project name\")\n      .addChildRef(2)\n      .build());",
      "right" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(1)\n      .setType(Constants.ComponentType.PROJECT)\n      .setKey(PROJECT_KEY)\n      .setName(\"New project name\")\n      .addChildRef(2)\n      .build());",
      "info" : "ExpressionStatement[26723-26949]:ExpressionStatement[27244-27470]"
    }, {
      "left" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(2)\n      .setType(Constants.ComponentType.MODULE)\n      .setKey(\"MODULE_KEY\")\n      .setName(\"New module name\")\n      .setPath(\"New path\")\n      .build());",
      "right" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(2)\n      .setType(Constants.ComponentType.MODULE)\n      .setKey(\"MODULE_KEY\")\n      .setName(\"New module name\")\n      .setPath(\"New path\")\n      .build());",
      "info" : "ExpressionStatement[26954-27184]:ExpressionStatement[27475-27705]"
    }, {
      "left" : "treeRootHolder.setRoot(DumbComponent.builder(Component.Type.PROJECT, 1).setUuid(\"ABCD\").setKey(PROJECT_KEY).addChildren(\n      DumbComponent.builder(Component.Type.MODULE, 2).setUuid(\"BCDE\").setKey(\"MODULE_KEY\").build())\n      .build());",
      "right" : "treeRootHolder.setRoot(DumbComponent.builder(Component.Type.PROJECT, 1).setUuid(\"ABCD\").setKey(PROJECT_KEY).addChildren(\n      DumbComponent.builder(Component.Type.MODULE, 2).setUuid(\"BCDE\").setKey(\"MODULE_KEY\").build())\n      .build());",
      "info" : "ExpressionStatement[27190-27427]:ExpressionStatement[27711-27948]"
    }, {
      "left" : "sut.execute();",
      "right" : "sut.execute();",
      "info" : "ExpressionStatement[27433-27447]:ExpressionStatement[27954-27968]"
    }, {
      "left" : "ComponentDto projectReloaded = dbClient.componentDao().selectNullableByKey(session, PROJECT_KEY);",
      "right" : "ComponentDto projectReloaded = dbClient.componentDao().selectNullableByKey(session, PROJECT_KEY);",
      "info" : "VariableDeclarationStatement[27453-27550]:VariableDeclarationStatement[27974-28071]"
    }, {
      "left" : "assertThat(projectReloaded.name()).isEqualTo(\"New project name\");",
      "right" : "assertThat(projectReloaded.name()).isEqualTo(\"New project name\");",
      "info" : "ExpressionStatement[27555-27620]:ExpressionStatement[28076-28141]"
    }, {
      "left" : "ComponentDto moduleReloaded = dbClient.componentDao().selectNullableByKey(session, \"MODULE_KEY\");",
      "right" : "ComponentDto moduleReloaded = dbClient.componentDao().selectNullableByKey(session, \"MODULE_KEY\");",
      "info" : "VariableDeclarationStatement[27626-27723]:VariableDeclarationStatement[28147-28244]"
    }, {
      "left" : "assertThat(moduleReloaded.name()).isEqualTo(\"New module name\");",
      "right" : "assertThat(moduleReloaded.name()).isEqualTo(\"New module name\");",
      "info" : "ExpressionStatement[27728-27791]:ExpressionStatement[28249-28312]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27864-29409]:Block[28385-29930]"
    }, {
      "left" : "ComponentDto project = ComponentTesting.newProjectDto(\"ABCD\").setKey(PROJECT_KEY).setName(\"Project\").setDescription(\"Project description\");",
      "right" : "ComponentDto project = ComponentTesting.newProjectDto(\"ABCD\").setKey(PROJECT_KEY).setName(\"Project\").setDescription(\"Project description\");",
      "info" : "VariableDeclarationStatement[27870-28009]:VariableDeclarationStatement[28391-28530]"
    }, {
      "left" : "dbClient.componentDao().insert(session, project);",
      "right" : "dbClient.componentDao().insert(session, project);",
      "info" : "ExpressionStatement[28014-28063]:ExpressionStatement[28535-28584]"
    }, {
      "left" : "ComponentDto module = ComponentTesting.newModuleDto(\"BCDE\", project).setKey(\"MODULE_KEY\").setName(\"Module\");",
      "right" : "ComponentDto module = ComponentTesting.newModuleDto(\"BCDE\", project).setKey(\"MODULE_KEY\").setName(\"Module\");",
      "info" : "VariableDeclarationStatement[28068-28176]:VariableDeclarationStatement[28589-28697]"
    }, {
      "left" : "dbClient.componentDao().insert(session, module);",
      "right" : "dbClient.componentDao().insert(session, module);",
      "info" : "ExpressionStatement[28181-28229]:ExpressionStatement[28702-28750]"
    }, {
      "left" : "session.commit();",
      "right" : "session.commit();",
      "info" : "ExpressionStatement[28234-28251]:ExpressionStatement[28755-28772]"
    }, {
      "left" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(1)\n      .setType(Constants.ComponentType.PROJECT)\n      .setKey(PROJECT_KEY)\n      .setName(\"Project\")\n      .setDescription(\"New project description\")\n      .addChildRef(2)\n      .build());",
      "right" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(1)\n      .setType(Constants.ComponentType.PROJECT)\n      .setKey(PROJECT_KEY)\n      .setName(\"Project\")\n      .setDescription(\"New project description\")\n      .addChildRef(2)\n      .build());",
      "info" : "ExpressionStatement[28257-28523]:ExpressionStatement[28778-29044]"
    }, {
      "left" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(2)\n      .setType(Constants.ComponentType.MODULE)\n      .setKey(\"MODULE_KEY\")\n      .setName(\"Module\")\n      .setDescription(\"New module description\")\n      .build());",
      "right" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(2)\n      .setType(Constants.ComponentType.MODULE)\n      .setKey(\"MODULE_KEY\")\n      .setName(\"Module\")\n      .setDescription(\"New module description\")\n      .build());",
      "info" : "ExpressionStatement[28528-28770]:ExpressionStatement[29049-29291]"
    }, {
      "left" : "treeRootHolder.setRoot(DumbComponent.builder(Component.Type.PROJECT, 1).setUuid(\"ABCD\").setKey(PROJECT_KEY).addChildren(\n      DumbComponent.builder(Component.Type.MODULE, 2).setUuid(\"BCDE\").setKey(\"MODULE_KEY\").build())\n      .build());",
      "right" : "treeRootHolder.setRoot(DumbComponent.builder(Component.Type.PROJECT, 1).setUuid(\"ABCD\").setKey(PROJECT_KEY).addChildren(\n      DumbComponent.builder(Component.Type.MODULE, 2).setUuid(\"BCDE\").setKey(\"MODULE_KEY\").build())\n      .build());",
      "info" : "ExpressionStatement[28776-29013]:ExpressionStatement[29297-29534]"
    }, {
      "left" : "sut.execute();",
      "right" : "sut.execute();",
      "info" : "ExpressionStatement[29019-29033]:ExpressionStatement[29540-29554]"
    }, {
      "left" : "ComponentDto projectReloaded = dbClient.componentDao().selectNullableByKey(session, PROJECT_KEY);",
      "right" : "ComponentDto projectReloaded = dbClient.componentDao().selectNullableByKey(session, PROJECT_KEY);",
      "info" : "VariableDeclarationStatement[29039-29136]:VariableDeclarationStatement[29560-29657]"
    }, {
      "left" : "assertThat(projectReloaded.description()).isEqualTo(\"New project description\");",
      "right" : "assertThat(projectReloaded.description()).isEqualTo(\"New project description\");",
      "info" : "ExpressionStatement[29141-29220]:ExpressionStatement[29662-29741]"
    }, {
      "left" : "ComponentDto moduleReloaded = dbClient.componentDao().selectNullableByKey(session, \"MODULE_KEY\");",
      "right" : "ComponentDto moduleReloaded = dbClient.componentDao().selectNullableByKey(session, \"MODULE_KEY\");",
      "info" : "VariableDeclarationStatement[29226-29323]:VariableDeclarationStatement[29747-29844]"
    }, {
      "left" : "assertThat(moduleReloaded.description()).isEqualTo(\"New module description\");",
      "right" : "assertThat(moduleReloaded.description()).isEqualTo(\"New module description\");",
      "info" : "ExpressionStatement[29328-29405]:ExpressionStatement[29849-29926]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29471-30716]:Block[29992-31237]"
    }, {
      "left" : "ComponentDto project = ComponentTesting.newProjectDto(\"ABCD\").setKey(PROJECT_KEY).setName(\"Project\");",
      "right" : "ComponentDto project = ComponentTesting.newProjectDto(\"ABCD\").setKey(PROJECT_KEY).setName(\"Project\");",
      "info" : "VariableDeclarationStatement[29477-29578]:VariableDeclarationStatement[29998-30099]"
    }, {
      "left" : "dbClient.componentDao().insert(session, project);",
      "right" : "dbClient.componentDao().insert(session, project);",
      "info" : "ExpressionStatement[29583-29632]:ExpressionStatement[30104-30153]"
    }, {
      "left" : "ComponentDto module = ComponentTesting.newModuleDto(\"BCDE\", project).setKey(\"MODULE_KEY\").setName(\"Module\").setPath(\"path\");",
      "right" : "ComponentDto module = ComponentTesting.newModuleDto(\"BCDE\", project).setKey(\"MODULE_KEY\").setName(\"Module\").setPath(\"path\");",
      "info" : "VariableDeclarationStatement[29637-29761]:VariableDeclarationStatement[30158-30282]"
    }, {
      "left" : "dbClient.componentDao().insert(session, module);",
      "right" : "dbClient.componentDao().insert(session, module);",
      "info" : "ExpressionStatement[29766-29814]:ExpressionStatement[30287-30335]"
    }, {
      "left" : "session.commit();",
      "right" : "session.commit();",
      "info" : "ExpressionStatement[29819-29836]:ExpressionStatement[30340-30357]"
    }, {
      "left" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(1)\n      .setType(Constants.ComponentType.PROJECT)\n      .setKey(PROJECT_KEY)\n      .setName(\"Project\")\n      .addChildRef(2)\n      .build());",
      "right" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(1)\n      .setType(Constants.ComponentType.PROJECT)\n      .setKey(PROJECT_KEY)\n      .setName(\"Project\")\n      .addChildRef(2)\n      .build());",
      "info" : "ExpressionStatement[29842-30059]:ExpressionStatement[30363-30580]"
    }, {
      "left" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(2)\n      .setType(Constants.ComponentType.MODULE)\n      .setKey(\"MODULE_KEY\")\n      .setName(\"Module\")\n      .setPath(\"New path\")\n      .build());",
      "right" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(2)\n      .setType(Constants.ComponentType.MODULE)\n      .setKey(\"MODULE_KEY\")\n      .setName(\"Module\")\n      .setPath(\"New path\")\n      .build());",
      "info" : "ExpressionStatement[30064-30285]:ExpressionStatement[30585-30806]"
    }, {
      "left" : "treeRootHolder.setRoot(DumbComponent.builder(Component.Type.PROJECT, 1).setUuid(\"ABCD\").setKey(PROJECT_KEY).addChildren(\n      DumbComponent.builder(Component.Type.MODULE, 2).setUuid(\"BCDE\").setKey(\"MODULE_KEY\").build())\n      .build());",
      "right" : "treeRootHolder.setRoot(DumbComponent.builder(Component.Type.PROJECT, 1).setUuid(\"ABCD\").setKey(PROJECT_KEY).addChildren(\n      DumbComponent.builder(Component.Type.MODULE, 2).setUuid(\"BCDE\").setKey(\"MODULE_KEY\").build())\n      .build());",
      "info" : "ExpressionStatement[30291-30528]:ExpressionStatement[30812-31049]"
    }, {
      "left" : "sut.execute();",
      "right" : "sut.execute();",
      "info" : "ExpressionStatement[30534-30548]:ExpressionStatement[31055-31069]"
    }, {
      "left" : "ComponentDto moduleReloaded = dbClient.componentDao().selectNullableByKey(session, \"MODULE_KEY\");",
      "right" : "ComponentDto moduleReloaded = dbClient.componentDao().selectNullableByKey(session, \"MODULE_KEY\");",
      "info" : "VariableDeclarationStatement[30554-30651]:VariableDeclarationStatement[31075-31172]"
    }, {
      "left" : "assertThat(moduleReloaded.path()).isEqualTo(\"New path\");",
      "right" : "assertThat(moduleReloaded.path()).isEqualTo(\"New path\");",
      "info" : "ExpressionStatement[30656-30712]:ExpressionStatement[31177-31233]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30799-35364]:Block[31320-35885]"
    }, {
      "left" : "ComponentDto project = ComponentTesting.newProjectDto(\"ABCD\").setKey(PROJECT_KEY).setName(\"Project\");",
      "right" : "ComponentDto project = ComponentTesting.newProjectDto(\"ABCD\").setKey(PROJECT_KEY).setName(\"Project\");",
      "info" : "VariableDeclarationStatement[30805-30906]:VariableDeclarationStatement[31326-31427]"
    }, {
      "left" : "dbClient.componentDao().insert(session, project);",
      "right" : "dbClient.componentDao().insert(session, project);",
      "info" : "ExpressionStatement[30911-30960]:ExpressionStatement[31432-31481]"
    }, {
      "left" : "ComponentDto moduleA = ComponentTesting.newModuleDto(\"EDCB\", project).setKey(\"MODULE_A\").setName(\"Module A\");",
      "right" : "ComponentDto moduleA = ComponentTesting.newModuleDto(\"EDCB\", project).setKey(\"MODULE_A\").setName(\"Module A\");",
      "info" : "VariableDeclarationStatement[30965-31074]:VariableDeclarationStatement[31486-31595]"
    }, {
      "left" : "ComponentDto moduleB = ComponentTesting.newModuleDto(\"BCDE\", project).setKey(\"MODULE_B\").setName(\"Module B\");",
      "right" : "ComponentDto moduleB = ComponentTesting.newModuleDto(\"BCDE\", project).setKey(\"MODULE_B\").setName(\"Module B\");",
      "info" : "VariableDeclarationStatement[31079-31188]:VariableDeclarationStatement[31600-31709]"
    }, {
      "left" : "dbClient.componentDao().insert(session, moduleA, moduleB);",
      "right" : "dbClient.componentDao().insert(session, moduleA, moduleB);",
      "info" : "ExpressionStatement[31193-31251]:ExpressionStatement[31714-31772]"
    }, {
      "left" : "ComponentDto directory = ComponentTesting.newDirectory(moduleB, \"src/main/java/dir\").setUuid(\"CDEF\").setKey(\"MODULE_B:src/main/java/dir\");",
      "right" : "ComponentDto directory = ComponentTesting.newDirectory(moduleB, \"src/main/java/dir\").setUuid(\"CDEF\").setKey(\"MODULE_B:src/main/java/dir\");",
      "info" : "VariableDeclarationStatement[31256-31394]:VariableDeclarationStatement[31777-31915]"
    }, {
      "left" : "ComponentDto file = ComponentTesting.newFileDto(moduleB, \"DEFG\").setPath(\"src/main/java/dir/Foo.java\").setName(\"Foo.java\").setKey(\"MODULE_B:src/main/java/dir/Foo.java\");",
      "right" : "ComponentDto file = ComponentTesting.newFileDto(moduleB, \"DEFG\").setPath(\"src/main/java/dir/Foo.java\").setName(\"Foo.java\").setKey(\"MODULE_B:src/main/java/dir/Foo.java\");",
      "info" : "VariableDeclarationStatement[31399-31568]:VariableDeclarationStatement[31920-32089]"
    }, {
      "left" : "dbClient.componentDao().insert(session, directory, file);",
      "right" : "dbClient.componentDao().insert(session, directory, file);",
      "info" : "ExpressionStatement[31573-31630]:ExpressionStatement[32094-32151]"
    }, {
      "left" : "session.commit();",
      "right" : "session.commit();",
      "info" : "ExpressionStatement[31635-31652]:ExpressionStatement[32156-32173]"
    }, {
      "left" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(1)\n      .setType(Constants.ComponentType.PROJECT)\n      .setKey(PROJECT_KEY)\n      .setName(\"Project\")\n      .addChildRef(2)\n      .build());",
      "right" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(1)\n      .setType(Constants.ComponentType.PROJECT)\n      .setKey(PROJECT_KEY)\n      .setName(\"Project\")\n      .addChildRef(2)\n      .build());",
      "info" : "ExpressionStatement[31658-31875]:ExpressionStatement[32179-32396]"
    }, {
      "left" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(2)\n      .setType(Constants.ComponentType.MODULE)\n      .setKey(\"MODULE_A\")\n      .setName(\"Module A\")\n      .addChildRef(3)\n      .build());",
      "right" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(2)\n      .setType(Constants.ComponentType.MODULE)\n      .setKey(\"MODULE_A\")\n      .setName(\"Module A\")\n      .addChildRef(3)\n      .build());",
      "info" : "ExpressionStatement[31880-32096]:ExpressionStatement[32401-32617]"
    }, {
      "left" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(3)\n      .setType(Constants.ComponentType.MODULE)\n      .setKey(\"MODULE_B\")\n      .setName(\"Module B\")\n      .addChildRef(4)\n      .build());",
      "right" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(3)\n      .setType(Constants.ComponentType.MODULE)\n      .setKey(\"MODULE_B\")\n      .setName(\"Module B\")\n      .addChildRef(4)\n      .build());",
      "info" : "ExpressionStatement[32149-32365]:ExpressionStatement[32670-32886]"
    }, {
      "left" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(4)\n      .setType(Constants.ComponentType.DIRECTORY)\n      .setPath(\"src/main/java/dir\")\n      .addChildRef(5)\n      .build());",
      "right" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(4)\n      .setType(Constants.ComponentType.DIRECTORY)\n      .setPath(\"src/main/java/dir\")\n      .addChildRef(5)\n      .build());",
      "info" : "ExpressionStatement[32370-32572]:ExpressionStatement[32891-33093]"
    }, {
      "left" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(5)\n      .setType(Constants.ComponentType.FILE)\n      .setPath(\"src/main/java/dir/Foo.java\")\n      .build());",
      "right" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(5)\n      .setType(Constants.ComponentType.FILE)\n      .setPath(\"src/main/java/dir/Foo.java\")\n      .build());",
      "info" : "ExpressionStatement[32577-32761]:ExpressionStatement[33098-33282]"
    }, {
      "left" : "treeRootHolder.setRoot(DumbComponent.builder(Component.Type.PROJECT, 1).setUuid(\"ABCD\").setKey(PROJECT_KEY).addChildren(\n      DumbComponent.builder(Component.Type.MODULE, 2).setUuid(\"EDCB\").setKey(\"MODULE_A\").addChildren(\n        DumbComponent.builder(Component.Type.MODULE, 3).setUuid(\"BCDE\").setKey(\"MODULE_B\").addChildren(\n          DumbComponent.builder(Component.Type.DIRECTORY, 4).setUuid(\"CDEF\").setKey(\"MODULE_B:src/main/java/dir\").addChildren(\n            DumbComponent.builder(Component.Type.FILE, 5).setUuid(\"DEFG\").setKey(\"MODULE_B:src/main/java/dir/Foo.java\").build())\n            .build())\n          .build())\n        .build())\n      .build());",
      "right" : "treeRootHolder.setRoot(DumbComponent.builder(Component.Type.PROJECT, 1).setUuid(\"ABCD\").setKey(PROJECT_KEY).addChildren(\n      DumbComponent.builder(Component.Type.MODULE, 2).setUuid(\"EDCB\").setKey(\"MODULE_A\").addChildren(\n        DumbComponent.builder(Component.Type.MODULE, 3).setUuid(\"BCDE\").setKey(\"MODULE_B\").addChildren(\n          DumbComponent.builder(Component.Type.DIRECTORY, 4).setUuid(\"CDEF\").setKey(\"MODULE_B:src/main/java/dir\").addChildren(\n            DumbComponent.builder(Component.Type.FILE, 5).setUuid(\"DEFG\").setKey(\"MODULE_B:src/main/java/dir/Foo.java\").build())\n            .build())\n          .build())\n        .build())\n      .build());",
      "info" : "ExpressionStatement[32767-33426]:ExpressionStatement[33288-33947]"
    }, {
      "left" : "sut.execute();",
      "right" : "sut.execute();",
      "info" : "ExpressionStatement[33432-33446]:ExpressionStatement[33953-33967]"
    }, {
      "left" : "assertThat(dbTester.countRowsOfTable(\"projects\")).isEqualTo(5);",
      "right" : "assertThat(dbTester.countRowsOfTable(\"projects\")).isEqualTo(5);",
      "info" : "ExpressionStatement[33452-33515]:ExpressionStatement[33973-34036]"
    }, {
      "left" : "ComponentDto moduleAreloaded = dbClient.componentDao().selectNullableByKey(session, \"MODULE_A\");",
      "right" : "ComponentDto moduleAreloaded = dbClient.componentDao().selectNullableByKey(session, \"MODULE_A\");",
      "info" : "VariableDeclarationStatement[33521-33617]:VariableDeclarationStatement[34042-34138]"
    }, {
      "left" : "assertThat(moduleAreloaded).isNotNull();",
      "right" : "assertThat(moduleAreloaded).isNotNull();",
      "info" : "ExpressionStatement[33622-33662]:ExpressionStatement[34143-34183]"
    }, {
      "left" : "ComponentDto moduleBReloaded = dbClient.componentDao().selectNullableByKey(session, \"MODULE_B\");",
      "right" : "ComponentDto moduleBReloaded = dbClient.componentDao().selectNullableByKey(session, \"MODULE_B\");",
      "info" : "VariableDeclarationStatement[33668-33764]:VariableDeclarationStatement[34189-34285]"
    }, {
      "left" : "assertThat(moduleBReloaded).isNotNull();",
      "right" : "assertThat(moduleBReloaded).isNotNull();",
      "info" : "ExpressionStatement[33769-33809]:ExpressionStatement[34290-34330]"
    }, {
      "left" : "assertThat(moduleBReloaded.uuid()).isEqualTo(moduleB.uuid());",
      "right" : "assertThat(moduleBReloaded.uuid()).isEqualTo(moduleB.uuid());",
      "info" : "ExpressionStatement[33814-33875]:ExpressionStatement[34335-34396]"
    }, {
      "left" : "assertThat(moduleBReloaded.moduleUuid()).isEqualTo(moduleAreloaded.uuid());",
      "right" : "assertThat(moduleBReloaded.moduleUuid()).isEqualTo(moduleAreloaded.uuid());",
      "info" : "ExpressionStatement[33880-33955]:ExpressionStatement[34401-34476]"
    }, {
      "left" : "assertThat(moduleBReloaded.moduleUuidPath()).isEqualTo(moduleAreloaded.moduleUuidPath() + moduleBReloaded.uuid() + \".\");",
      "right" : "assertThat(moduleBReloaded.moduleUuidPath()).isEqualTo(moduleAreloaded.moduleUuidPath() + moduleBReloaded.uuid() + \".\");",
      "info" : "ExpressionStatement[33960-34080]:ExpressionStatement[34481-34601]"
    }, {
      "left" : "assertThat(moduleBReloaded.projectUuid()).isEqualTo(project.uuid());",
      "right" : "assertThat(moduleBReloaded.projectUuid()).isEqualTo(project.uuid());",
      "info" : "ExpressionStatement[34085-34153]:ExpressionStatement[34606-34674]"
    }, {
      "left" : "assertThat(moduleBReloaded.parentProjectId()).isEqualTo(project.getId());",
      "right" : "assertThat(moduleBReloaded.parentProjectId()).isEqualTo(project.getId());",
      "info" : "ExpressionStatement[34158-34231]:ExpressionStatement[34679-34752]"
    }, {
      "left" : "ComponentDto directoryReloaded = dbClient.componentDao().selectNullableByKey(session, \"MODULE_B:src/main/java/dir\");",
      "right" : "ComponentDto directoryReloaded = dbClient.componentDao().selectNullableByKey(session, \"MODULE_B:src/main/java/dir\");",
      "info" : "VariableDeclarationStatement[34237-34353]:VariableDeclarationStatement[34758-34874]"
    }, {
      "left" : "assertThat(directoryReloaded).isNotNull();",
      "right" : "assertThat(directoryReloaded).isNotNull();",
      "info" : "ExpressionStatement[34358-34400]:ExpressionStatement[34879-34921]"
    }, {
      "left" : "assertThat(directoryReloaded.uuid()).isEqualTo(directory.uuid());",
      "right" : "assertThat(directoryReloaded.uuid()).isEqualTo(directory.uuid());",
      "info" : "ExpressionStatement[34405-34470]:ExpressionStatement[34926-34991]"
    }, {
      "left" : "assertThat(directoryReloaded.moduleUuid()).isEqualTo(moduleBReloaded.uuid());",
      "right" : "assertThat(directoryReloaded.moduleUuid()).isEqualTo(moduleBReloaded.uuid());",
      "info" : "ExpressionStatement[34475-34552]:ExpressionStatement[34996-35073]"
    }, {
      "left" : "assertThat(directoryReloaded.moduleUuidPath()).isEqualTo(moduleBReloaded.moduleUuidPath());",
      "right" : "assertThat(directoryReloaded.moduleUuidPath()).isEqualTo(moduleBReloaded.moduleUuidPath());",
      "info" : "ExpressionStatement[34557-34648]:ExpressionStatement[35078-35169]"
    }, {
      "left" : "assertThat(directoryReloaded.projectUuid()).isEqualTo(project.uuid());",
      "right" : "assertThat(directoryReloaded.projectUuid()).isEqualTo(project.uuid());",
      "info" : "ExpressionStatement[34653-34723]:ExpressionStatement[35174-35244]"
    }, {
      "left" : "assertThat(directoryReloaded.parentProjectId()).isEqualTo(moduleBReloaded.getId());",
      "right" : "assertThat(directoryReloaded.parentProjectId()).isEqualTo(moduleBReloaded.getId());",
      "info" : "ExpressionStatement[34728-34811]:ExpressionStatement[35249-35332]"
    }, {
      "left" : "ComponentDto fileReloaded = dbClient.componentDao().selectNullableByKey(session, \"MODULE_B:src/main/java/dir/Foo.java\");",
      "right" : "ComponentDto fileReloaded = dbClient.componentDao().selectNullableByKey(session, \"MODULE_B:src/main/java/dir/Foo.java\");",
      "info" : "VariableDeclarationStatement[34817-34937]:VariableDeclarationStatement[35338-35458]"
    }, {
      "left" : "assertThat(fileReloaded).isNotNull();",
      "right" : "assertThat(fileReloaded).isNotNull();",
      "info" : "ExpressionStatement[34942-34979]:ExpressionStatement[35463-35500]"
    }, {
      "left" : "assertThat(fileReloaded.uuid()).isEqualTo(file.uuid());",
      "right" : "assertThat(fileReloaded.uuid()).isEqualTo(file.uuid());",
      "info" : "ExpressionStatement[34984-35039]:ExpressionStatement[35505-35560]"
    }, {
      "left" : "assertThat(fileReloaded.moduleUuid()).isEqualTo(moduleBReloaded.uuid());",
      "right" : "assertThat(fileReloaded.moduleUuid()).isEqualTo(moduleBReloaded.uuid());",
      "info" : "ExpressionStatement[35044-35116]:ExpressionStatement[35565-35637]"
    }, {
      "left" : "assertThat(fileReloaded.moduleUuidPath()).isEqualTo(moduleBReloaded.moduleUuidPath());",
      "right" : "assertThat(fileReloaded.moduleUuidPath()).isEqualTo(moduleBReloaded.moduleUuidPath());",
      "info" : "ExpressionStatement[35121-35207]:ExpressionStatement[35642-35728]"
    }, {
      "left" : "assertThat(fileReloaded.projectUuid()).isEqualTo(project.uuid());",
      "right" : "assertThat(fileReloaded.projectUuid()).isEqualTo(project.uuid());",
      "info" : "ExpressionStatement[35212-35277]:ExpressionStatement[35733-35798]"
    }, {
      "left" : "assertThat(fileReloaded.parentProjectId()).isEqualTo(moduleBReloaded.getId());",
      "right" : "assertThat(fileReloaded.parentProjectId()).isEqualTo(moduleBReloaded.getId());",
      "info" : "ExpressionStatement[35282-35360]:ExpressionStatement[35803-35881]"
    } ]
  },
  "interFileMappings" : { }
}