{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "DateUtils",
      "right" : "DateUtils",
      "info" : "TypeDeclaration[1090-39412]:TypeDeclaration[1090-39404]"
    }, {
      "left" : "public static final TimeZone UTC_TIME_ZONE = TimeZone.getTimeZone(\"GMT\");",
      "right" : "public static final TimeZone UTC_TIME_ZONE = TimeZone.getTimeZone(\"GMT\");",
      "info" : "FieldDeclaration[1504-1647]:FieldDeclaration[1504-1647]"
    }, {
      "left" : "public static final long MILLIS_PER_SECOND = 1000;",
      "right" : "public static final long MILLIS_PER_SECOND = 1000;",
      "info" : "FieldDeclaration[1652-1788]:FieldDeclaration[1652-1788]"
    }, {
      "left" : "public static final long MILLIS_PER_MINUTE = 60 * MILLIS_PER_SECOND;",
      "right" : "public static final long MILLIS_PER_MINUTE = 60 * MILLIS_PER_SECOND;",
      "info" : "FieldDeclaration[1793-1947]:FieldDeclaration[1793-1947]"
    }, {
      "left" : "public static final long MILLIS_PER_HOUR = 60 * MILLIS_PER_MINUTE;",
      "right" : "public static final long MILLIS_PER_HOUR = 60 * MILLIS_PER_MINUTE;",
      "info" : "FieldDeclaration[1952-2102]:FieldDeclaration[1952-2102]"
    }, {
      "left" : "public static final long MILLIS_PER_DAY = 24 * MILLIS_PER_HOUR;",
      "right" : "public static final long MILLIS_PER_DAY = 24 * MILLIS_PER_HOUR;",
      "info" : "FieldDeclaration[2107-2253]:FieldDeclaration[2107-2253]"
    }, {
      "left" : "public final static int SEMI_MONTH = 1001;",
      "right" : "public final static int SEMI_MONTH = 1001;",
      "info" : "FieldDeclaration[2259-2430]:FieldDeclaration[2259-2430]"
    }, {
      "left" : "private static final int[][] fields = {\n            {Calendar.MILLISECOND},\n            {Calendar.SECOND},\n            {Calendar.MINUTE},\n            {Calendar.HOUR_OF_DAY, Calendar.HOUR},\n            {Calendar.DATE, Calendar.DAY_OF_MONTH, Calendar.AM_PM \n                \n            },\n            {Calendar.MONTH, DateUtils.SEMI_MONTH},\n            {Calendar.YEAR},\n            {Calendar.ERA}};",
      "right" : "private static final int[][] fields = {\n            {Calendar.MILLISECOND},\n            {Calendar.SECOND},\n            {Calendar.MINUTE},\n            {Calendar.HOUR_OF_DAY, Calendar.HOUR},\n            {Calendar.DATE, Calendar.DAY_OF_MONTH, Calendar.AM_PM \n                \n            },\n            {Calendar.MONTH, DateUtils.SEMI_MONTH},\n            {Calendar.YEAR},\n            {Calendar.ERA}};",
      "info" : "FieldDeclaration[2436-2912]:FieldDeclaration[2436-2912]"
    }, {
      "left" : "public final static int RANGE_WEEK_SUNDAY = 1;",
      "right" : "public final static int RANGE_WEEK_SUNDAY = 1;",
      "info" : "FieldDeclaration[2918-3021]:FieldDeclaration[2918-3021]"
    }, {
      "left" : "public final static int RANGE_WEEK_MONDAY = 2;",
      "right" : "public final static int RANGE_WEEK_MONDAY = 2;",
      "info" : "FieldDeclaration[3027-3130]:FieldDeclaration[3027-3130]"
    }, {
      "left" : "public final static int RANGE_WEEK_RELATIVE = 3;",
      "right" : "public final static int RANGE_WEEK_RELATIVE = 3;",
      "info" : "FieldDeclaration[3136-3250]:FieldDeclaration[3136-3250]"
    }, {
      "left" : "public final static int RANGE_WEEK_CENTER = 4;",
      "right" : "public final static int RANGE_WEEK_CENTER = 4;",
      "info" : "FieldDeclaration[3256-3372]:FieldDeclaration[3256-3372]"
    }, {
      "left" : "public final static int RANGE_MONTH_SUNDAY = 5;",
      "right" : "public final static int RANGE_MONTH_SUNDAY = 5;",
      "info" : "FieldDeclaration[3378-3492]:FieldDeclaration[3378-3492]"
    }, {
      "left" : "public final static int RANGE_MONTH_MONDAY = 6;",
      "right" : "public final static int RANGE_MONTH_MONDAY = 6;",
      "info" : "FieldDeclaration[3498-3612]:FieldDeclaration[3498-3612]"
    }, {
      "left" : "public DateUtils()",
      "right" : "public DateUtils()",
      "info" : "MethodDeclaration[3618-3978]:MethodDeclaration[3618-3978]"
    }, {
      "left" : "public static boolean isSameDay(Date date1, Date date2)",
      "right" : "public static boolean isSameDay(Date date1, Date date2)",
      "info" : "MethodDeclaration[4062-4969]:MethodDeclaration[4062-4969]"
    }, {
      "left" : "public static boolean isSameDay(Calendar cal1, Calendar cal2)",
      "right" : "public static boolean isSameDay(Calendar cal1, Calendar cal2)",
      "info" : "MethodDeclaration[4975-5929]:MethodDeclaration[4975-5929]"
    }, {
      "left" : "public static boolean isSameInstant(Date date1, Date date2)",
      "right" : "public static boolean isSameInstant(Date date1, Date date2)",
      "info" : "MethodDeclaration[6013-6733]:MethodDeclaration[6013-6733]"
    }, {
      "left" : "public static boolean isSameInstant(Calendar cal1, Calendar cal2)",
      "right" : "public static boolean isSameInstant(Calendar cal1, Calendar cal2)",
      "info" : "MethodDeclaration[6739-7491]:MethodDeclaration[6739-7491]"
    }, {
      "left" : "public static boolean isSameLocalTime(Calendar cal1, Calendar cal2)",
      "right" : "public static boolean isSameLocalTime(Calendar cal1, Calendar cal2)",
      "info" : "MethodDeclaration[7575-8901]:MethodDeclaration[7575-8901]"
    }, {
      "left" : "public static Date parseDate(String str, String[] parsePatterns) throws ParseException",
      "right" : "public static Date parseDate(String str, String[] parsePatterns) throws ParseException",
      "info" : "MethodDeclaration[8985-10494]:MethodDeclaration[8985-10494]"
    }, {
      "left" : "public static Date addYears(Date date, int amount)",
      "right" : "public static Date addYears(Date date, int amount)",
      "info" : "MethodDeclaration[10578-11031]:MethodDeclaration[10578-11031]"
    }, {
      "left" : "public static Date addMonths(Date date, int amount)",
      "right" : "public static Date addMonths(Date date, int amount)",
      "info" : "MethodDeclaration[11115-11571]:MethodDeclaration[11115-11571]"
    }, {
      "left" : "public static Date addWeeks(Date date, int amount)",
      "right" : "public static Date addWeeks(Date date, int amount)",
      "info" : "MethodDeclaration[11655-12116]:MethodDeclaration[11655-12116]"
    }, {
      "left" : "public static Date addDays(Date date, int amount)",
      "right" : "public static Date addDays(Date date, int amount)",
      "info" : "MethodDeclaration[12200-12659]:MethodDeclaration[12200-12659]"
    }, {
      "left" : "public static Date addHours(Date date, int amount)",
      "right" : "public static Date addHours(Date date, int amount)",
      "info" : "MethodDeclaration[12743-13203]:MethodDeclaration[12743-13203]"
    }, {
      "left" : "public static Date addMinutes(Date date, int amount)",
      "right" : "public static Date addMinutes(Date date, int amount)",
      "info" : "MethodDeclaration[13287-13746]:MethodDeclaration[13287-13746]"
    }, {
      "left" : "public static Date addSeconds(Date date, int amount)",
      "right" : "public static Date addSeconds(Date date, int amount)",
      "info" : "MethodDeclaration[13830-14289]:MethodDeclaration[13830-14289]"
    }, {
      "left" : "public static Date addMilliseconds(Date date, int amount)",
      "right" : "public static Date addMilliseconds(Date date, int amount)",
      "info" : "MethodDeclaration[14373-14847]:MethodDeclaration[14373-14847]"
    }, {
      "left" : "public static Date add(Date date, int calendarField, int amount)",
      "right" : "public static Date add(Date date, int calendarField, int amount)",
      "info" : "MethodDeclaration[14931-15640]:MethodDeclaration[14931-15640]"
    }, {
      "left" : "public static Date round(Date date, int field)",
      "right" : "public static Date round(Date date, int field)",
      "info" : "MethodDeclaration[15724-17329]:MethodDeclaration[15724-17329]"
    }, {
      "left" : "public static Calendar round(Calendar date, int field)",
      "right" : "public static Calendar round(Calendar date, int field)",
      "info" : "MethodDeclaration[17335-18941]:MethodDeclaration[17335-18941]"
    }, {
      "left" : "public static Date round(Object date, int field)",
      "right" : "public static Date round(Object date, int field)",
      "info" : "MethodDeclaration[18947-20835]:MethodDeclaration[18947-20835]"
    }, {
      "left" : "public static Date truncate(Date date, int field)",
      "right" : "public static Date truncate(Date date, int field)",
      "info" : "MethodDeclaration[20919-21912]:MethodDeclaration[20919-21912]"
    }, {
      "left" : "public static Calendar truncate(Calendar date, int field)",
      "right" : "public static Calendar truncate(Calendar date, int field)",
      "info" : "MethodDeclaration[21918-22918]:MethodDeclaration[21918-22918]"
    }, {
      "left" : "public static Date truncate(Object date, int field)",
      "right" : "public static Date truncate(Object date, int field)",
      "info" : "MethodDeclaration[22924-24250]:MethodDeclaration[22924-24250]"
    }, {
      "left" : "private static void modify(Calendar val, int field, boolean round)",
      "right" : "private static void modify(Calendar val, int field, boolean round)",
      "info" : "MethodDeclaration[24334-29808]:MethodDeclaration[24334-29800]"
    }, {
      "left" : "public static Iterator iterator(Date focus, int rangeStyle)",
      "right" : "public static Iterator iterator(Date focus, int rangeStyle)",
      "info" : "MethodDeclaration[29892-31408]:MethodDeclaration[29884-31400]"
    }, {
      "left" : "public static Iterator iterator(Calendar focus, int rangeStyle)",
      "right" : "public static Iterator iterator(Calendar focus, int rangeStyle)",
      "info" : "MethodDeclaration[31414-35440]:MethodDeclaration[31406-35432]"
    }, {
      "left" : "public static Iterator iterator(Object focus, int rangeStyle)",
      "right" : "public static Iterator iterator(Object focus, int rangeStyle)",
      "info" : "MethodDeclaration[35446-36869]:MethodDeclaration[35438-36861]"
    }, {
      "left" : "DateIterator",
      "right" : "DateIterator",
      "info" : "TypeDeclaration[36875-38388]:TypeDeclaration[36867-38380]"
    }, {
      "left" : "private final Calendar endFinal;",
      "right" : "private final Calendar endFinal;",
      "info" : "FieldDeclaration[36976-37008]:FieldDeclaration[36968-37000]"
    }, {
      "left" : "private final Calendar spot;",
      "right" : "private final Calendar spot;",
      "info" : "FieldDeclaration[37017-37045]:FieldDeclaration[37009-37037]"
    }, {
      "left" : "DateIterator(Calendar startFinal, Calendar endFinal)",
      "right" : "DateIterator(Calendar startFinal, Calendar endFinal)",
      "info" : "MethodDeclaration[37063-37473]:MethodDeclaration[37055-37465]"
    }, {
      "left" : "public boolean hasNext()",
      "right" : "public boolean hasNext()",
      "info" : "MethodDeclaration[37483-37737]:MethodDeclaration[37475-37729]"
    }, {
      "left" : "public Object next()",
      "right" : "public Object next()",
      "info" : "MethodDeclaration[37747-38100]:MethodDeclaration[37739-38092]"
    }, {
      "left" : "public void remove()",
      "right" : "public void remove()",
      "info" : "MethodDeclaration[38110-38382]:MethodDeclaration[38102-38374]"
    }, {
      "left" : "public static final int MILLIS_IN_SECOND = 1000;",
      "right" : "public static final int MILLIS_IN_SECOND = 1000;",
      "info" : "FieldDeclaration[38543-38751]:FieldDeclaration[38535-38743]"
    }, {
      "left" : "public static final int MILLIS_IN_MINUTE = 60 * 1000;",
      "right" : "public static final int MILLIS_IN_MINUTE = 60 * 1000;",
      "info" : "FieldDeclaration[38756-38969]:FieldDeclaration[38748-38961]"
    }, {
      "left" : "public static final int MILLIS_IN_HOUR = 60 * 60 * 1000;",
      "right" : "public static final int MILLIS_IN_HOUR = 60 * 60 * 1000;",
      "info" : "FieldDeclaration[38974-39186]:FieldDeclaration[38966-39178]"
    }, {
      "left" : "public static final int MILLIS_IN_DAY = 24 * 60 * 60 * 1000;",
      "right" : "public static final int MILLIS_IN_DAY = 24 * 60 * 60 * 1000;",
      "info" : "FieldDeclaration[39191-39405]:FieldDeclaration[39183-39397]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3954-3978]:Block[3954-3978]"
    }, {
      "left" : "super();",
      "right" : "super();",
      "info" : "SuperConstructorInvocation[3964-3972]:SuperConstructorInvocation[3964-3972]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4637-4969]:Block[4637-4969]"
    }, {
      "left" : "if (date1 == null || date2 == null)",
      "right" : "if (date1 == null || date2 == null)",
      "info" : "IfStatement[4647-4771]:IfStatement[4647-4771]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4683-4771]:Block[4683-4771]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "info" : "ThrowStatement[4697-4761]:ThrowStatement[4697-4761]"
    }, {
      "left" : "Calendar cal1 = Calendar.getInstance();",
      "right" : "Calendar cal1 = Calendar.getInstance();",
      "info" : "VariableDeclarationStatement[4780-4819]:VariableDeclarationStatement[4780-4819]"
    }, {
      "left" : "cal1.setTime(date1);",
      "right" : "cal1.setTime(date1);",
      "info" : "ExpressionStatement[4828-4848]:ExpressionStatement[4828-4848]"
    }, {
      "left" : "Calendar cal2 = Calendar.getInstance();",
      "right" : "Calendar cal2 = Calendar.getInstance();",
      "info" : "VariableDeclarationStatement[4857-4896]:VariableDeclarationStatement[4857-4896]"
    }, {
      "left" : "cal2.setTime(date2);",
      "right" : "cal2.setTime(date2);",
      "info" : "ExpressionStatement[4905-4925]:ExpressionStatement[4905-4925]"
    }, {
      "left" : "return isSameDay(cal1, cal2);",
      "right" : "return isSameDay(cal1, cal2);",
      "info" : "ReturnStatement[4934-4963]:ReturnStatement[4934-4963]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5570-5929]:Block[5570-5929]"
    }, {
      "left" : "if (cal1 == null || cal2 == null)",
      "right" : "if (cal1 == null || cal2 == null)",
      "info" : "IfStatement[5580-5702]:IfStatement[5580-5702]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5614-5702]:Block[5614-5702]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "info" : "ThrowStatement[5628-5692]:ThrowStatement[5628-5692]"
    }, {
      "left" : "return (cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) &&\n                cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) &&\n                cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR));",
      "right" : "return (cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) &&\n                cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) &&\n                cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR));",
      "info" : "ReturnStatement[5711-5923]:ReturnStatement[5711-5923]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6542-6733]:Block[6542-6733]"
    }, {
      "left" : "if (date1 == null || date2 == null)",
      "right" : "if (date1 == null || date2 == null)",
      "info" : "IfStatement[6552-6676]:IfStatement[6552-6676]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6588-6676]:Block[6588-6676]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "info" : "ThrowStatement[6602-6666]:ThrowStatement[6602-6666]"
    }, {
      "left" : "return date1.getTime() == date2.getTime();",
      "right" : "return date1.getTime() == date2.getTime();",
      "info" : "ReturnStatement[6685-6727]:ReturnStatement[6685-6727]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7284-7491]:Block[7284-7491]"
    }, {
      "left" : "if (cal1 == null || cal2 == null)",
      "right" : "if (cal1 == null || cal2 == null)",
      "info" : "IfStatement[7294-7416]:IfStatement[7294-7416]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7328-7416]:Block[7328-7416]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "info" : "ThrowStatement[7342-7406]:ThrowStatement[7342-7406]"
    }, {
      "left" : "return cal1.getTime().getTime() == cal2.getTime().getTime();",
      "right" : "return cal1.getTime().getTime() == cal2.getTime().getTime();",
      "info" : "ReturnStatement[7425-7485]:ReturnStatement[7425-7485]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8186-8901]:Block[8186-8901]"
    }, {
      "left" : "if (cal1 == null || cal2 == null)",
      "right" : "if (cal1 == null || cal2 == null)",
      "info" : "IfStatement[8196-8318]:IfStatement[8196-8318]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8230-8318]:Block[8230-8318]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "info" : "ThrowStatement[8244-8308]:ThrowStatement[8244-8308]"
    }, {
      "left" : "return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) &&\n                cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) &&\n                cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) &&\n                cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) &&\n                cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) &&\n                cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) &&\n                cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) &&\n                cal1.getClass() == cal2.getClass());",
      "right" : "return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) &&\n                cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) &&\n                cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) &&\n                cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) &&\n                cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) &&\n                cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) &&\n                cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) &&\n                cal1.getClass() == cal2.getClass());",
      "info" : "ReturnStatement[8327-8895]:ReturnStatement[8327-8895]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9732-10494]:Block[9732-10494]"
    }, {
      "left" : "if (str == null || parsePatterns == null)",
      "right" : "if (str == null || parsePatterns == null)",
      "info" : "IfStatement[9742-9881]:IfStatement[9742-9881]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9784-9881]:Block[9784-9881]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Date and Patterns must not be null\");",
      "right" : "throw new IllegalArgumentException(\"Date and Patterns must not be null\");",
      "info" : "ThrowStatement[9798-9871]:ThrowStatement[9798-9871]"
    }, {
      "left" : "SimpleDateFormat parser = null;",
      "right" : "SimpleDateFormat parser = null;",
      "info" : "VariableDeclarationStatement[9899-9930]:VariableDeclarationStatement[9899-9930]"
    }, {
      "left" : "ParsePosition pos = new ParsePosition(0);",
      "right" : "ParsePosition pos = new ParsePosition(0);",
      "info" : "VariableDeclarationStatement[9939-9980]:VariableDeclarationStatement[9939-9980]"
    }, {
      "left" : "for (int i = 0; i < parsePatterns.length; i++)",
      "right" : "for (int i = 0; i < parsePatterns.length; i++)",
      "info" : "ForStatement[9989-10414]:ForStatement[9989-10414]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10036-10414]:Block[10036-10414]"
    }, {
      "left" : "if (i == 0)",
      "right" : "if (i == 0)",
      "info" : "IfStatement[10050-10218]:IfStatement[10050-10218]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10062-10142]:Block[10062-10142]"
    }, {
      "left" : "parser = new SimpleDateFormat(parsePatterns[0]);",
      "right" : "parser = new SimpleDateFormat(parsePatterns[0]);",
      "info" : "ExpressionStatement[10080-10128]:ExpressionStatement[10080-10128]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10148-10218]:Block[10148-10218]"
    }, {
      "left" : "parser.applyPattern(parsePatterns[i]);",
      "right" : "parser.applyPattern(parsePatterns[i]);",
      "info" : "ExpressionStatement[10166-10204]:ExpressionStatement[10166-10204]"
    }, {
      "left" : "pos.setIndex(0);",
      "right" : "pos.setIndex(0);",
      "info" : "ExpressionStatement[10231-10247]:ExpressionStatement[10231-10247]"
    }, {
      "left" : "Date date = parser.parse(str, pos);",
      "right" : "Date date = parser.parse(str, pos);",
      "info" : "VariableDeclarationStatement[10260-10295]:VariableDeclarationStatement[10260-10295]"
    }, {
      "left" : "if (date != null && pos.getIndex() == str.length())",
      "right" : "if (date != null && pos.getIndex() == str.length())",
      "info" : "IfStatement[10308-10404]:IfStatement[10308-10404]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10360-10404]:Block[10360-10404]"
    }, {
      "left" : "return date;",
      "right" : "return date;",
      "info" : "ReturnStatement[10378-10390]:ReturnStatement[10378-10390]"
    }, {
      "left" : "throw new ParseException(\"Unable to parse the date: \" + str, -1);",
      "right" : "throw new ParseException(\"Unable to parse the date: \" + str, -1);",
      "info" : "ThrowStatement[10423-10488]:ThrowStatement[10423-10488]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10975-11031]:Block[10975-11031]"
    }, {
      "left" : "return add(date, Calendar.YEAR, amount);",
      "right" : "return add(date, Calendar.YEAR, amount);",
      "info" : "ReturnStatement[10985-11025]:ReturnStatement[10985-11025]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11514-11571]:Block[11514-11571]"
    }, {
      "left" : "return add(date, Calendar.MONTH, amount);",
      "right" : "return add(date, Calendar.MONTH, amount);",
      "info" : "ReturnStatement[11524-11565]:ReturnStatement[11524-11565]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12052-12116]:Block[12052-12116]"
    }, {
      "left" : "return add(date, Calendar.WEEK_OF_YEAR, amount);",
      "right" : "return add(date, Calendar.WEEK_OF_YEAR, amount);",
      "info" : "ReturnStatement[12062-12110]:ReturnStatement[12062-12110]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12595-12659]:Block[12595-12659]"
    }, {
      "left" : "return add(date, Calendar.DAY_OF_MONTH, amount);",
      "right" : "return add(date, Calendar.DAY_OF_MONTH, amount);",
      "info" : "ReturnStatement[12605-12653]:ReturnStatement[12605-12653]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13140-13203]:Block[13140-13203]"
    }, {
      "left" : "return add(date, Calendar.HOUR_OF_DAY, amount);",
      "right" : "return add(date, Calendar.HOUR_OF_DAY, amount);",
      "info" : "ReturnStatement[13150-13197]:ReturnStatement[13150-13197]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13688-13746]:Block[13688-13746]"
    }, {
      "left" : "return add(date, Calendar.MINUTE, amount);",
      "right" : "return add(date, Calendar.MINUTE, amount);",
      "info" : "ReturnStatement[13698-13740]:ReturnStatement[13698-13740]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14231-14289]:Block[14231-14289]"
    }, {
      "left" : "return add(date, Calendar.SECOND, amount);",
      "right" : "return add(date, Calendar.SECOND, amount);",
      "info" : "ReturnStatement[14241-14283]:ReturnStatement[14241-14283]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14784-14847]:Block[14784-14847]"
    }, {
      "left" : "return add(date, Calendar.MILLISECOND, amount);",
      "right" : "return add(date, Calendar.MILLISECOND, amount);",
      "info" : "ReturnStatement[14794-14841]:ReturnStatement[14794-14841]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15382-15640]:Block[15382-15640]"
    }, {
      "left" : "if (date == null)",
      "right" : "if (date == null)",
      "info" : "IfStatement[15392-15498]:IfStatement[15392-15498]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15410-15498]:Block[15410-15498]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "info" : "ThrowStatement[15424-15488]:ThrowStatement[15424-15488]"
    }, {
      "left" : "Calendar c = Calendar.getInstance();",
      "right" : "Calendar c = Calendar.getInstance();",
      "info" : "VariableDeclarationStatement[15507-15543]:VariableDeclarationStatement[15507-15543]"
    }, {
      "left" : "c.setTime(date);",
      "right" : "c.setTime(date);",
      "info" : "ExpressionStatement[15552-15568]:ExpressionStatement[15552-15568]"
    }, {
      "left" : "c.add(calendarField, amount);",
      "right" : "c.add(calendarField, amount);",
      "info" : "ExpressionStatement[15577-15606]:ExpressionStatement[15577-15606]"
    }, {
      "left" : "return c.getTime();",
      "right" : "return c.getTime();",
      "info" : "ReturnStatement[15615-15634]:ReturnStatement[15615-15634]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17065-17329]:Block[17065-17329]"
    }, {
      "left" : "if (date == null)",
      "right" : "if (date == null)",
      "info" : "IfStatement[17075-17181]:IfStatement[17075-17181]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17093-17181]:Block[17093-17181]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "info" : "ThrowStatement[17107-17171]:ThrowStatement[17107-17171]"
    }, {
      "left" : "Calendar gval = Calendar.getInstance();",
      "right" : "Calendar gval = Calendar.getInstance();",
      "info" : "VariableDeclarationStatement[17190-17229]:VariableDeclarationStatement[17190-17229]"
    }, {
      "left" : "gval.setTime(date);",
      "right" : "gval.setTime(date);",
      "info" : "ExpressionStatement[17238-17257]:ExpressionStatement[17238-17257]"
    }, {
      "left" : "modify(gval, field, true);",
      "right" : "modify(gval, field, true);",
      "info" : "ExpressionStatement[17266-17292]:ExpressionStatement[17266-17292]"
    }, {
      "left" : "return gval.getTime();",
      "right" : "return gval.getTime();",
      "info" : "ReturnStatement[17301-17323]:ReturnStatement[17301-17323]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18705-18941]:Block[18705-18941]"
    }, {
      "left" : "if (date == null)",
      "right" : "if (date == null)",
      "info" : "IfStatement[18715-18821]:IfStatement[18715-18821]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18733-18821]:Block[18733-18821]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "info" : "ThrowStatement[18747-18811]:ThrowStatement[18747-18811]"
    }, {
      "left" : "Calendar rounded = (Calendar) date.clone();",
      "right" : "Calendar rounded = (Calendar) date.clone();",
      "info" : "VariableDeclarationStatement[18830-18873]:VariableDeclarationStatement[18830-18873]"
    }, {
      "left" : "modify(rounded, field, true);",
      "right" : "modify(rounded, field, true);",
      "info" : "ExpressionStatement[18882-18911]:ExpressionStatement[18882-18911]"
    }, {
      "left" : "return rounded;",
      "right" : "return rounded;",
      "info" : "ReturnStatement[18920-18935]:ReturnStatement[18920-18935]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20428-20835]:Block[20428-20835]"
    }, {
      "left" : "if (date == null)",
      "right" : "if (date == null)",
      "info" : "IfStatement[20438-20544]:IfStatement[20438-20544]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20456-20544]:Block[20456-20544]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "info" : "ThrowStatement[20470-20534]:ThrowStatement[20470-20534]"
    }, {
      "left" : "if (date instanceof Date)",
      "right" : "if (date instanceof Date)",
      "info" : "IfStatement[20553-20829]:IfStatement[20553-20829]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20579-20636]:Block[20579-20636]"
    }, {
      "left" : "return round((Date) date, field);",
      "right" : "return round((Date) date, field);",
      "info" : "ReturnStatement[20593-20626]:ReturnStatement[20593-20626]"
    }, {
      "left" : "if (date instanceof Calendar)",
      "right" : "if (date instanceof Calendar)",
      "info" : "IfStatement[20642-20829]:IfStatement[20642-20829]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20672-20743]:Block[20672-20743]"
    }, {
      "left" : "return round((Calendar) date, field).getTime();",
      "right" : "return round((Calendar) date, field).getTime();",
      "info" : "ReturnStatement[20686-20733]:ReturnStatement[20686-20733]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20749-20829]:Block[20749-20829]"
    }, {
      "left" : "throw new ClassCastException(\"Could not round \" + date);",
      "right" : "throw new ClassCastException(\"Could not round \" + date);",
      "info" : "ThrowStatement[20763-20819]:ThrowStatement[20763-20819]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21647-21912]:Block[21647-21912]"
    }, {
      "left" : "if (date == null)",
      "right" : "if (date == null)",
      "info" : "IfStatement[21657-21763]:IfStatement[21657-21763]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21675-21763]:Block[21675-21763]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "info" : "ThrowStatement[21689-21753]:ThrowStatement[21689-21753]"
    }, {
      "left" : "Calendar gval = Calendar.getInstance();",
      "right" : "Calendar gval = Calendar.getInstance();",
      "info" : "VariableDeclarationStatement[21772-21811]:VariableDeclarationStatement[21772-21811]"
    }, {
      "left" : "gval.setTime(date);",
      "right" : "gval.setTime(date);",
      "info" : "ExpressionStatement[21820-21839]:ExpressionStatement[21820-21839]"
    }, {
      "left" : "modify(gval, field, false);",
      "right" : "modify(gval, field, false);",
      "info" : "ExpressionStatement[21848-21875]:ExpressionStatement[21848-21875]"
    }, {
      "left" : "return gval.getTime();",
      "right" : "return gval.getTime();",
      "info" : "ReturnStatement[21884-21906]:ReturnStatement[21884-21906]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22675-22918]:Block[22675-22918]"
    }, {
      "left" : "if (date == null)",
      "right" : "if (date == null)",
      "info" : "IfStatement[22685-22791]:IfStatement[22685-22791]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22703-22791]:Block[22703-22791]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "info" : "ThrowStatement[22717-22781]:ThrowStatement[22717-22781]"
    }, {
      "left" : "Calendar truncated = (Calendar) date.clone();",
      "right" : "Calendar truncated = (Calendar) date.clone();",
      "info" : "VariableDeclarationStatement[22800-22845]:VariableDeclarationStatement[22800-22845]"
    }, {
      "left" : "modify(truncated, field, false);",
      "right" : "modify(truncated, field, false);",
      "info" : "ExpressionStatement[22854-22886]:ExpressionStatement[22854-22886]"
    }, {
      "left" : "return truncated;",
      "right" : "return truncated;",
      "info" : "ReturnStatement[22895-22912]:ReturnStatement[22895-22912]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23834-24250]:Block[23834-24250]"
    }, {
      "left" : "if (date == null)",
      "right" : "if (date == null)",
      "info" : "IfStatement[23844-23950]:IfStatement[23844-23950]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23862-23950]:Block[23862-23950]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "info" : "ThrowStatement[23876-23940]:ThrowStatement[23876-23940]"
    }, {
      "left" : "if (date instanceof Date)",
      "right" : "if (date instanceof Date)",
      "info" : "IfStatement[23959-24244]:IfStatement[23959-24244]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23985-24045]:Block[23985-24045]"
    }, {
      "left" : "return truncate((Date) date, field);",
      "right" : "return truncate((Date) date, field);",
      "info" : "ReturnStatement[23999-24035]:ReturnStatement[23999-24035]"
    }, {
      "left" : "if (date instanceof Calendar)",
      "right" : "if (date instanceof Calendar)",
      "info" : "IfStatement[24051-24244]:IfStatement[24051-24244]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24081-24155]:Block[24081-24155]"
    }, {
      "left" : "return truncate((Calendar) date, field).getTime();",
      "right" : "return truncate((Calendar) date, field).getTime();",
      "info" : "ReturnStatement[24095-24145]:ReturnStatement[24095-24145]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24161-24244]:Block[24161-24244]"
    }, {
      "left" : "throw new ClassCastException(\"Could not truncate \" + date);",
      "right" : "throw new ClassCastException(\"Could not truncate \" + date);",
      "info" : "ThrowStatement[24175-24234]:ThrowStatement[24175-24234]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24661-29808]:Block[24661-29800]"
    }, {
      "left" : "if (val.get(Calendar.YEAR) > 280000000)",
      "right" : "if (val.get(Calendar.YEAR) > 280000000)",
      "info" : "IfStatement[24671-24819]:IfStatement[24671-24819]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24711-24819]:Block[24711-24819]"
    }, {
      "left" : "throw new ArithmeticException(\"Calendar value too large for accurate calculations\");",
      "right" : "throw new ArithmeticException(\"Calendar value too large for accurate calculations\");",
      "info" : "ThrowStatement[24725-24809]:ThrowStatement[24725-24809]"
    }, {
      "left" : "if (field == Calendar.MILLISECOND)",
      "right" : "if (field == Calendar.MILLISECOND)",
      "info" : "IfStatement[24837-24903]:IfStatement[24837-24903]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24872-24903]:Block[24872-24903]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[24886-24893]:ReturnStatement[24886-24893]"
    }, {
      "left" : "Date date = val.getTime();",
      "right" : "Date date = val.getTime();",
      "info" : "VariableDeclarationStatement[25186-25212]:VariableDeclarationStatement[25186-25212]"
    }, {
      "left" : "long time = date.getTime();",
      "right" : "long time = date.getTime();",
      "info" : "VariableDeclarationStatement[25221-25248]:VariableDeclarationStatement[25221-25248]"
    }, {
      "left" : "boolean done = false;",
      "right" : "boolean done = false;",
      "info" : "VariableDeclarationStatement[25257-25278]:VariableDeclarationStatement[25257-25278]"
    }, {
      "left" : "int millisecs = val.get(Calendar.MILLISECOND);",
      "right" : "int millisecs = val.get(Calendar.MILLISECOND);",
      "info" : "VariableDeclarationStatement[25321-25367]:VariableDeclarationStatement[25321-25367]"
    }, {
      "left" : "time = time - millisecs;",
      "right" : "time = time - millisecs;",
      "info" : "ExpressionStatement[25421-25445]:ExpressionStatement[25421-25445]"
    }, {
      "left" : "if (field == Calendar.SECOND)",
      "right" : "if (field == Calendar.SECOND)",
      "info" : "IfStatement[25454-25524]:IfStatement[25464-25530]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25484-25524]:Block[25494-25530]"
    }, {
      "left" : "done = true;",
      "right" : "done = true;",
      "info" : "ExpressionStatement[25498-25510]:ExpressionStatement[25508-25520]"
    }, {
      "left" : "int seconds = val.get(Calendar.SECOND);",
      "right" : "int seconds = val.get(Calendar.SECOND);",
      "info" : "VariableDeclarationStatement[25572-25611]:VariableDeclarationStatement[25568-25607]"
    }, {
      "left" : "time = time - (seconds * 1000L);",
      "right" : "time = time - (seconds * 1000L);",
      "info" : "ExpressionStatement[25673-25705]:ExpressionStatement[25669-25701]"
    }, {
      "left" : "if (field == Calendar.MINUTE)",
      "right" : "if (field == Calendar.MINUTE)",
      "info" : "IfStatement[25714-25784]:IfStatement[25720-25786]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25744-25784]:Block[25750-25786]"
    }, {
      "left" : "done = true;",
      "right" : "done = true;",
      "info" : "ExpressionStatement[25758-25770]:ExpressionStatement[25764-25776]"
    }, {
      "left" : "int minutes = val.get(Calendar.MINUTE);",
      "right" : "int minutes = val.get(Calendar.MINUTE);",
      "info" : "VariableDeclarationStatement[25832-25871]:VariableDeclarationStatement[25824-25863]"
    }, {
      "left" : "if (!done && (!round || minutes < 30))",
      "right" : "if (!done && (!round || minutes < 30))",
      "info" : "IfStatement[25880-25976]:IfStatement[25872-25968]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25919-25976]:Block[25911-25968]"
    }, {
      "left" : "time = time - (minutes * 60000L);",
      "right" : "time = time - (minutes * 60000L);",
      "info" : "ExpressionStatement[25933-25966]:ExpressionStatement[25925-25958]"
    }, {
      "left" : "if (date.getTime() != time)",
      "right" : "if (date.getTime() != time)",
      "info" : "IfStatement[26008-26110]:IfStatement[26000-26102]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26036-26110]:Block[26028-26102]"
    }, {
      "left" : "date.setTime(time);",
      "right" : "date.setTime(time);",
      "info" : "ExpressionStatement[26050-26069]:ExpressionStatement[26042-26061]"
    }, {
      "left" : "val.setTime(date);",
      "right" : "val.setTime(date);",
      "info" : "ExpressionStatement[26082-26100]:ExpressionStatement[26074-26092]"
    }, {
      "left" : "boolean roundUp = false;",
      "right" : "boolean roundUp = false;",
      "info" : "VariableDeclarationStatement[26210-26234]:VariableDeclarationStatement[26202-26226]"
    }, {
      "left" : "for (int i = 0; i < fields.length; i++)",
      "right" : "for (int i = 0; i < fields.length; i++)",
      "info" : "ForStatement[26243-29713]:ForStatement[26235-29705]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26283-29713]:Block[26275-29705]"
    }, {
      "left" : "for (int j = 0; j < fields[i].length; j++)",
      "right" : "for (int j = 0; j < fields[i].length; j++)",
      "info" : "ForStatement[26297-27419]:ForStatement[26289-27411]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26340-27419]:Block[26332-27411]"
    }, {
      "left" : "if (fields[i][j] == field)",
      "right" : "if (fields[i][j] == field)",
      "info" : "IfStatement[26358-27405]:IfStatement[26350-27397]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26385-27405]:Block[26377-27397]"
    }, {
      "left" : "if (round && roundUp)",
      "right" : "if (round && roundUp)",
      "info" : "IfStatement[26466-27359]:IfStatement[26458-27351]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26488-27359]:Block[26480-27351]"
    }, {
      "left" : "if (field == DateUtils.SEMI_MONTH)",
      "right" : "if (field == DateUtils.SEMI_MONTH)",
      "info" : "IfStatement[26514-27337]:IfStatement[26506-27329]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26549-27111]:Block[26541-27103]"
    }, {
      "left" : "if (val.get(Calendar.DATE) == 1)",
      "right" : "if (val.get(Calendar.DATE) == 1)",
      "info" : "IfStatement[26803-27085]:IfStatement[26795-27077]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26836-26927]:Block[26828-26919]"
    }, {
      "left" : "val.add(Calendar.DATE, 15);",
      "right" : "val.add(Calendar.DATE, 15);",
      "info" : "ExpressionStatement[26870-26897]:ExpressionStatement[26862-26889]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26933-27085]:Block[26925-27077]"
    }, {
      "left" : "val.add(Calendar.DATE, -15);",
      "right" : "val.add(Calendar.DATE, -15);",
      "info" : "ExpressionStatement[26967-26995]:ExpressionStatement[26959-26987]"
    }, {
      "left" : "val.add(Calendar.MONTH, 1);",
      "right" : "val.add(Calendar.MONTH, 1);",
      "info" : "ExpressionStatement[27028-27055]:ExpressionStatement[27020-27047]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27117-27337]:Block[27109-27329]"
    }, {
      "left" : "val.add(fields[i][0], 1);",
      "right" : "val.add(fields[i][0], 1);",
      "info" : "ExpressionStatement[27286-27311]:ExpressionStatement[27278-27303]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[27380-27387]:ReturnStatement[27372-27379]"
    }, {
      "left" : "int offset = 0;",
      "right" : "int offset = 0;",
      "info" : "VariableDeclarationStatement[27497-27512]:VariableDeclarationStatement[27489-27504]"
    }, {
      "left" : "boolean offsetSet = false;",
      "right" : "boolean offsetSet = false;",
      "info" : "VariableDeclarationStatement[27525-27551]:VariableDeclarationStatement[27517-27543]"
    }, {
      "left" : "switch (field) {\n                case DateUtils.SEMI_MONTH:\n                    if (fields[i][0] == Calendar.DATE) {\n                        //If we're going to drop the DATE field's value,\n                        //  we want to do this our own way.\n                        //We need to subtrace 1 since the date has a minimum of 1\n                        offset = val.get(Calendar.DATE) - 1;\n                        //If we're above 15 days adjustment, that means we're in the\n                        //  bottom half of the month and should stay accordingly.\n                        if (offset >= 15) {\n                            offset -= 15;\n                        }\n                        //Record whether we're in the top or bottom half of that range\n                        roundUp = offset > 7;\n                        offsetSet = true;\n                    }\n                    break;\n                case Calendar.AM_PM:\n                    if (fields[i][0] == Calendar.HOUR_OF_DAY) {\n                        //If we're going to drop the HOUR field's value,\n                        //  we want to do this our own way.\n                        offset = val.get(Calendar.HOUR_OF_DAY);\n                        if (offset >= 12) {\n                            offset -= 12;\n                        }\n                        roundUp = offset > 6;\n                        offsetSet = true;\n                    }\n                    break;\n            }",
      "right" : "switch (field) {\n                case DateUtils.SEMI_MONTH:\n                    if (fields[i][0] == Calendar.DATE) {\n                        //If we're going to drop the DATE field's value,\n                        //  we want to do this our own way.\n                        //We need to subtrace 1 since the date has a minimum of 1\n                        offset = val.get(Calendar.DATE) - 1;\n                        //If we're above 15 days adjustment, that means we're in the\n                        //  bottom half of the month and should stay accordingly.\n                        if (offset >= 15) {\n                            offset -= 15;\n                        }\n                        //Record whether we're in the top or bottom half of that range\n                        roundUp = offset > 7;\n                        offsetSet = true;\n                    }\n                    break;\n                case Calendar.AM_PM:\n                    if (fields[i][0] == Calendar.HOUR_OF_DAY) {\n                        //If we're going to drop the HOUR field's value,\n                        //  we want to do this our own way.\n                        offset = val.get(Calendar.HOUR_OF_DAY);\n                        if (offset >= 12) {\n                            offset -= 12;\n                        }\n                        roundUp = offset > 6;\n                        offsetSet = true;\n                    }\n                    break;\n            }",
      "info" : "SwitchStatement[27650-29106]:SwitchStatement[27642-29098]"
    }, {
      "left" : "case DateUtils.SEMI_MONTH:",
      "right" : "case DateUtils.SEMI_MONTH:",
      "info" : "SwitchCase[27683-27709]:SwitchCase[27675-27701]"
    }, {
      "left" : "if (fields[i][0] == Calendar.DATE)",
      "right" : "if (fields[i][0] == Calendar.DATE)",
      "info" : "IfStatement[27730-28518]:IfStatement[27722-28510]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27765-28518]:Block[27757-28510]"
    }, {
      "left" : "offset = val.get(Calendar.DATE) - 1;",
      "right" : "offset = val.get(Calendar.DATE) - 1;",
      "info" : "ExpressionStatement[28006-28042]:ExpressionStatement[27998-28034]"
    }, {
      "left" : "if (offset >= 15)",
      "right" : "if (offset >= 15)",
      "info" : "IfStatement[28234-28321]:IfStatement[28226-28313]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28252-28321]:Block[28244-28313]"
    }, {
      "left" : "offset -= 15;",
      "right" : "offset -= 15;",
      "info" : "ExpressionStatement[28282-28295]:ExpressionStatement[28274-28287]"
    }, {
      "left" : "roundUp = offset > 7;",
      "right" : "roundUp = offset > 7;",
      "info" : "ExpressionStatement[28433-28454]:ExpressionStatement[28425-28446]"
    }, {
      "left" : "offsetSet = true;",
      "right" : "offsetSet = true;",
      "info" : "ExpressionStatement[28479-28496]:ExpressionStatement[28471-28488]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[28539-28545]:BreakStatement[28531-28537]"
    }, {
      "left" : "case Calendar.AM_PM:",
      "right" : "case Calendar.AM_PM:",
      "info" : "SwitchCase[28562-28582]:SwitchCase[28554-28574]"
    }, {
      "left" : "if (fields[i][0] == Calendar.HOUR_OF_DAY)",
      "right" : "if (fields[i][0] == Calendar.HOUR_OF_DAY)",
      "info" : "IfStatement[28603-29065]:IfStatement[28595-29057]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28645-29065]:Block[28637-29057]"
    }, {
      "left" : "offset = val.get(Calendar.HOUR_OF_DAY);",
      "right" : "offset = val.get(Calendar.HOUR_OF_DAY);",
      "info" : "ExpressionStatement[28804-28843]:ExpressionStatement[28796-28835]"
    }, {
      "left" : "if (offset >= 12)",
      "right" : "if (offset >= 12)",
      "info" : "IfStatement[28868-28955]:IfStatement[28860-28947]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28886-28955]:Block[28878-28947]"
    }, {
      "left" : "offset -= 12;",
      "right" : "offset -= 12;",
      "info" : "ExpressionStatement[28916-28929]:ExpressionStatement[28908-28921]"
    }, {
      "left" : "roundUp = offset > 6;",
      "right" : "roundUp = offset > 6;",
      "info" : "ExpressionStatement[28980-29001]:ExpressionStatement[28972-28993]"
    }, {
      "left" : "offsetSet = true;",
      "right" : "offsetSet = true;",
      "info" : "ExpressionStatement[29026-29043]:ExpressionStatement[29018-29035]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[29086-29092]:BreakStatement[29078-29084]"
    }, {
      "left" : "if (!offsetSet)",
      "right" : "if (!offsetSet)",
      "info" : "IfStatement[29119-29544]:IfStatement[29111-29536]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29135-29544]:Block[29127-29536]"
    }, {
      "left" : "int min = val.getActualMinimum(fields[i][0]);",
      "right" : "int min = val.getActualMinimum(fields[i][0]);",
      "info" : "VariableDeclarationStatement[29153-29198]:VariableDeclarationStatement[29145-29190]"
    }, {
      "left" : "int max = val.getActualMaximum(fields[i][0]);",
      "right" : "int max = val.getActualMaximum(fields[i][0]);",
      "info" : "VariableDeclarationStatement[29215-29260]:VariableDeclarationStatement[29207-29252]"
    }, {
      "left" : "offset = val.get(fields[i][0]) - min;",
      "right" : "offset = val.get(fields[i][0]) - min;",
      "info" : "ExpressionStatement[29347-29384]:ExpressionStatement[29339-29376]"
    }, {
      "left" : "roundUp = offset > ((max - min) / 2);",
      "right" : "roundUp = offset > ((max - min) / 2);",
      "info" : "ExpressionStatement[29493-29530]:ExpressionStatement[29485-29522]"
    }, {
      "left" : "if (offset != 0)",
      "right" : "if (offset != 0)",
      "info" : "IfStatement[29600-29703]:IfStatement[29592-29695]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29617-29703]:Block[29609-29695]"
    }, {
      "left" : "val.set(fields[i][0], val.get(fields[i][0]) - offset);",
      "right" : "val.set(fields[i][0], val.get(fields[i][0]) - offset);",
      "info" : "ExpressionStatement[29635-29689]:ExpressionStatement[29627-29681]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");",
      "right" : "throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");",
      "info" : "ThrowStatement[29722-29801]:ThrowStatement[29714-29793]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31165-31408]:Block[31157-31400]"
    }, {
      "left" : "if (focus == null)",
      "right" : "if (focus == null)",
      "info" : "IfStatement[31175-31282]:IfStatement[31167-31274]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31194-31282]:Block[31186-31274]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "info" : "ThrowStatement[31208-31272]:ThrowStatement[31200-31264]"
    }, {
      "left" : "Calendar gval = Calendar.getInstance();",
      "right" : "Calendar gval = Calendar.getInstance();",
      "info" : "VariableDeclarationStatement[31291-31330]:VariableDeclarationStatement[31283-31322]"
    }, {
      "left" : "gval.setTime(focus);",
      "right" : "gval.setTime(focus);",
      "info" : "ExpressionStatement[31339-31359]:ExpressionStatement[31331-31351]"
    }, {
      "left" : "return iterator(gval, rangeStyle);",
      "right" : "return iterator(gval, rangeStyle);",
      "info" : "ReturnStatement[31368-31402]:ReturnStatement[31360-31394]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32640-35440]:Block[32632-35432]"
    }, {
      "left" : "if (focus == null)",
      "right" : "if (focus == null)",
      "info" : "IfStatement[32650-32757]:IfStatement[32642-32749]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32669-32757]:Block[32661-32749]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "info" : "ThrowStatement[32683-32747]:ThrowStatement[32675-32739]"
    }, {
      "left" : "Calendar start = null;",
      "right" : "Calendar start = null;",
      "info" : "VariableDeclarationStatement[32766-32788]:VariableDeclarationStatement[32758-32780]"
    }, {
      "left" : "Calendar end = null;",
      "right" : "Calendar end = null;",
      "info" : "VariableDeclarationStatement[32797-32817]:VariableDeclarationStatement[32789-32809]"
    }, {
      "left" : "int startCutoff = Calendar.SUNDAY;",
      "right" : "int startCutoff = Calendar.SUNDAY;",
      "info" : "VariableDeclarationStatement[32826-32860]:VariableDeclarationStatement[32818-32852]"
    }, {
      "left" : "int endCutoff = Calendar.SATURDAY;",
      "right" : "int endCutoff = Calendar.SATURDAY;",
      "info" : "VariableDeclarationStatement[32869-32903]:VariableDeclarationStatement[32861-32895]"
    }, {
      "left" : "switch (rangeStyle) {\n            case RANGE_MONTH_SUNDAY:\n            case RANGE_MONTH_MONDAY:\n                //Set start to the first of the month\n                start = truncate(focus, Calendar.MONTH);\n                //Set end to the last of the month\n                end = (Calendar) start.clone();\n                end.add(Calendar.MONTH, 1);\n                end.add(Calendar.DATE, -1);\n                //Loop start back to the previous sunday or monday\n                if (rangeStyle == RANGE_MONTH_MONDAY) {\n                    startCutoff = Calendar.MONDAY;\n                    endCutoff = Calendar.SUNDAY;\n                }\n                break;\n            case RANGE_WEEK_SUNDAY:\n            case RANGE_WEEK_MONDAY:\n            case RANGE_WEEK_RELATIVE:\n            case RANGE_WEEK_CENTER:\n                //Set start and end to the current date\n                start = truncate(focus, Calendar.DATE);\n                end = truncate(focus, Calendar.DATE);\n                switch (rangeStyle) {\n                    case RANGE_WEEK_SUNDAY:\n                        //already set by default\n                        break;\n                    case RANGE_WEEK_MONDAY:\n                        startCutoff = Calendar.MONDAY;\n                        endCutoff = Calendar.SUNDAY;\n                        break;\n                    case RANGE_WEEK_RELATIVE:\n                        startCutoff = focus.get(Calendar.DAY_OF_WEEK);\n                        endCutoff = startCutoff - 1;\n                        break;\n                    case RANGE_WEEK_CENTER:\n                        startCutoff = focus.get(Calendar.DAY_OF_WEEK) - 3;\n                        endCutoff = focus.get(Calendar.DAY_OF_WEEK) + 3;\n                        break;\n                }\n                break;\n            default:\n                throw new IllegalArgumentException(\"The range style \" + rangeStyle + \" is not valid.\");\n        }",
      "right" : "switch (rangeStyle) {\n            case RANGE_MONTH_SUNDAY:\n            case RANGE_MONTH_MONDAY:\n                //Set start to the first of the month\n                start = truncate(focus, Calendar.MONTH);\n                //Set end to the last of the month\n                end = (Calendar) start.clone();\n                end.add(Calendar.MONTH, 1);\n                end.add(Calendar.DATE, -1);\n                //Loop start back to the previous sunday or monday\n                if (rangeStyle == RANGE_MONTH_MONDAY) {\n                    startCutoff = Calendar.MONDAY;\n                    endCutoff = Calendar.SUNDAY;\n                }\n                break;\n            case RANGE_WEEK_SUNDAY:\n            case RANGE_WEEK_MONDAY:\n            case RANGE_WEEK_RELATIVE:\n            case RANGE_WEEK_CENTER:\n                //Set start and end to the current date\n                start = truncate(focus, Calendar.DATE);\n                end = truncate(focus, Calendar.DATE);\n                switch (rangeStyle) {\n                    case RANGE_WEEK_SUNDAY:\n                        //already set by default\n                        break;\n                    case RANGE_WEEK_MONDAY:\n                        startCutoff = Calendar.MONDAY;\n                        endCutoff = Calendar.SUNDAY;\n                        break;\n                    case RANGE_WEEK_RELATIVE:\n                        startCutoff = focus.get(Calendar.DAY_OF_WEEK);\n                        endCutoff = startCutoff - 1;\n                        break;\n                    case RANGE_WEEK_CENTER:\n                        startCutoff = focus.get(Calendar.DAY_OF_WEEK) - 3;\n                        endCutoff = focus.get(Calendar.DAY_OF_WEEK) + 3;\n                        break;\n                }\n                break;\n            default:\n                throw new IllegalArgumentException(\"The range style \" + rangeStyle + \" is not valid.\");\n        }",
      "info" : "SwitchStatement[32912-34826]:SwitchStatement[32904-34818]"
    }, {
      "left" : "case RANGE_MONTH_SUNDAY:",
      "right" : "case RANGE_MONTH_SUNDAY:",
      "info" : "SwitchCase[32946-32970]:SwitchCase[32938-32962]"
    }, {
      "left" : "case RANGE_MONTH_MONDAY:",
      "right" : "case RANGE_MONTH_MONDAY:",
      "info" : "SwitchCase[32983-33007]:SwitchCase[32975-32999]"
    }, {
      "left" : "start = truncate(focus, Calendar.MONTH);",
      "right" : "start = truncate(focus, Calendar.MONTH);",
      "info" : "ExpressionStatement[33078-33118]:ExpressionStatement[33070-33110]"
    }, {
      "left" : "end = (Calendar) start.clone();",
      "right" : "end = (Calendar) start.clone();",
      "info" : "ExpressionStatement[33186-33217]:ExpressionStatement[33178-33209]"
    }, {
      "left" : "end.add(Calendar.MONTH, 1);",
      "right" : "end.add(Calendar.MONTH, 1);",
      "info" : "ExpressionStatement[33234-33261]:ExpressionStatement[33226-33253]"
    }, {
      "left" : "end.add(Calendar.DATE, -1);",
      "right" : "end.add(Calendar.DATE, -1);",
      "info" : "ExpressionStatement[33278-33305]:ExpressionStatement[33270-33297]"
    }, {
      "left" : "if (rangeStyle == RANGE_MONTH_MONDAY)",
      "right" : "if (rangeStyle == RANGE_MONTH_MONDAY)",
      "info" : "IfStatement[33389-33546]:IfStatement[33381-33538]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33427-33546]:Block[33419-33538]"
    }, {
      "left" : "startCutoff = Calendar.MONDAY;",
      "right" : "startCutoff = Calendar.MONDAY;",
      "info" : "ExpressionStatement[33449-33479]:ExpressionStatement[33441-33471]"
    }, {
      "left" : "endCutoff = Calendar.SUNDAY;",
      "right" : "endCutoff = Calendar.SUNDAY;",
      "info" : "ExpressionStatement[33500-33528]:ExpressionStatement[33492-33520]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[33563-33569]:BreakStatement[33555-33561]"
    }, {
      "left" : "case RANGE_WEEK_SUNDAY:",
      "right" : "case RANGE_WEEK_SUNDAY:",
      "info" : "SwitchCase[33582-33605]:SwitchCase[33574-33597]"
    }, {
      "left" : "case RANGE_WEEK_MONDAY:",
      "right" : "case RANGE_WEEK_MONDAY:",
      "info" : "SwitchCase[33618-33641]:SwitchCase[33610-33633]"
    }, {
      "left" : "case RANGE_WEEK_RELATIVE:",
      "right" : "case RANGE_WEEK_RELATIVE:",
      "info" : "SwitchCase[33654-33679]:SwitchCase[33646-33671]"
    }, {
      "left" : "case RANGE_WEEK_CENTER:",
      "right" : "case RANGE_WEEK_CENTER:",
      "info" : "SwitchCase[33692-33715]:SwitchCase[33684-33707]"
    }, {
      "left" : "start = truncate(focus, Calendar.DATE);",
      "right" : "start = truncate(focus, Calendar.DATE);",
      "info" : "ExpressionStatement[33788-33827]:ExpressionStatement[33780-33819]"
    }, {
      "left" : "end = truncate(focus, Calendar.DATE);",
      "right" : "end = truncate(focus, Calendar.DATE);",
      "info" : "ExpressionStatement[33844-33881]:ExpressionStatement[33836-33873]"
    }, {
      "left" : "switch (rangeStyle) {\n                    case RANGE_WEEK_SUNDAY:\n                        //already set by default\n                        break;\n                    case RANGE_WEEK_MONDAY:\n                        startCutoff = Calendar.MONDAY;\n                        endCutoff = Calendar.SUNDAY;\n                        break;\n                    case RANGE_WEEK_RELATIVE:\n                        startCutoff = focus.get(Calendar.DAY_OF_WEEK);\n                        endCutoff = startCutoff - 1;\n                        break;\n                    case RANGE_WEEK_CENTER:\n                        startCutoff = focus.get(Calendar.DAY_OF_WEEK) - 3;\n                        endCutoff = focus.get(Calendar.DAY_OF_WEEK) + 3;\n                        break;\n                }",
      "right" : "switch (rangeStyle) {\n                    case RANGE_WEEK_SUNDAY:\n                        //already set by default\n                        break;\n                    case RANGE_WEEK_MONDAY:\n                        startCutoff = Calendar.MONDAY;\n                        endCutoff = Calendar.SUNDAY;\n                        break;\n                    case RANGE_WEEK_RELATIVE:\n                        startCutoff = focus.get(Calendar.DAY_OF_WEEK);\n                        endCutoff = startCutoff - 1;\n                        break;\n                    case RANGE_WEEK_CENTER:\n                        startCutoff = focus.get(Calendar.DAY_OF_WEEK) - 3;\n                        endCutoff = focus.get(Calendar.DAY_OF_WEEK) + 3;\n                        break;\n                }",
      "info" : "SwitchStatement[33898-34668]:SwitchStatement[33890-34660]"
    }, {
      "left" : "case RANGE_WEEK_SUNDAY:",
      "right" : "case RANGE_WEEK_SUNDAY:",
      "info" : "SwitchCase[33940-33963]:SwitchCase[33932-33955]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[34037-34043]:BreakStatement[34029-34035]"
    }, {
      "left" : "case RANGE_WEEK_MONDAY:",
      "right" : "case RANGE_WEEK_MONDAY:",
      "info" : "SwitchCase[34064-34087]:SwitchCase[34056-34079]"
    }, {
      "left" : "startCutoff = Calendar.MONDAY;",
      "right" : "startCutoff = Calendar.MONDAY;",
      "info" : "ExpressionStatement[34112-34142]:ExpressionStatement[34104-34134]"
    }, {
      "left" : "endCutoff = Calendar.SUNDAY;",
      "right" : "endCutoff = Calendar.SUNDAY;",
      "info" : "ExpressionStatement[34167-34195]:ExpressionStatement[34159-34187]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[34220-34226]:BreakStatement[34212-34218]"
    }, {
      "left" : "case RANGE_WEEK_RELATIVE:",
      "right" : "case RANGE_WEEK_RELATIVE:",
      "info" : "SwitchCase[34247-34272]:SwitchCase[34239-34264]"
    }, {
      "left" : "startCutoff = focus.get(Calendar.DAY_OF_WEEK);",
      "right" : "startCutoff = focus.get(Calendar.DAY_OF_WEEK);",
      "info" : "ExpressionStatement[34297-34343]:ExpressionStatement[34289-34335]"
    }, {
      "left" : "endCutoff = startCutoff - 1;",
      "right" : "endCutoff = startCutoff - 1;",
      "info" : "ExpressionStatement[34368-34396]:ExpressionStatement[34360-34388]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[34421-34427]:BreakStatement[34413-34419]"
    }, {
      "left" : "case RANGE_WEEK_CENTER:",
      "right" : "case RANGE_WEEK_CENTER:",
      "info" : "SwitchCase[34448-34471]:SwitchCase[34440-34463]"
    }, {
      "left" : "startCutoff = focus.get(Calendar.DAY_OF_WEEK) - 3;",
      "right" : "startCutoff = focus.get(Calendar.DAY_OF_WEEK) - 3;",
      "info" : "ExpressionStatement[34496-34546]:ExpressionStatement[34488-34538]"
    }, {
      "left" : "endCutoff = focus.get(Calendar.DAY_OF_WEEK) + 3;",
      "right" : "endCutoff = focus.get(Calendar.DAY_OF_WEEK) + 3;",
      "info" : "ExpressionStatement[34571-34619]:ExpressionStatement[34563-34611]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[34644-34650]:BreakStatement[34636-34642]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[34685-34691]:BreakStatement[34677-34683]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[34704-34712]:SwitchCase[34696-34704]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The range style \" + rangeStyle + \" is not valid.\");",
      "right" : "throw new IllegalArgumentException(\"The range style \" + rangeStyle + \" is not valid.\");",
      "info" : "ThrowStatement[34729-34816]:ThrowStatement[34721-34808]"
    }, {
      "left" : "if (startCutoff < Calendar.SUNDAY)",
      "right" : "if (startCutoff < Calendar.SUNDAY)",
      "info" : "IfStatement[34835-34911]:IfStatement[34827-34903]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34870-34911]:Block[34862-34903]"
    }, {
      "left" : "startCutoff += 7;",
      "right" : "startCutoff += 7;",
      "info" : "ExpressionStatement[34884-34901]:ExpressionStatement[34876-34893]"
    }, {
      "left" : "if (startCutoff > Calendar.SATURDAY)",
      "right" : "if (startCutoff > Calendar.SATURDAY)",
      "info" : "IfStatement[34920-34998]:IfStatement[34912-34990]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34957-34998]:Block[34949-34990]"
    }, {
      "left" : "startCutoff -= 7;",
      "right" : "startCutoff -= 7;",
      "info" : "ExpressionStatement[34971-34988]:ExpressionStatement[34963-34980]"
    }, {
      "left" : "if (endCutoff < Calendar.SUNDAY)",
      "right" : "if (endCutoff < Calendar.SUNDAY)",
      "info" : "IfStatement[35007-35079]:IfStatement[34999-35071]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35040-35079]:Block[35032-35071]"
    }, {
      "left" : "endCutoff += 7;",
      "right" : "endCutoff += 7;",
      "info" : "ExpressionStatement[35054-35069]:ExpressionStatement[35046-35061]"
    }, {
      "left" : "if (endCutoff > Calendar.SATURDAY)",
      "right" : "if (endCutoff > Calendar.SATURDAY)",
      "info" : "IfStatement[35088-35162]:IfStatement[35080-35154]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35123-35162]:Block[35115-35154]"
    }, {
      "left" : "endCutoff -= 7;",
      "right" : "endCutoff -= 7;",
      "info" : "ExpressionStatement[35137-35152]:ExpressionStatement[35129-35144]"
    }, {
      "left" : "while (start.get(Calendar.DAY_OF_WEEK) != startCutoff)",
      "right" : "while (start.get(Calendar.DAY_OF_WEEK) != startCutoff)",
      "info" : "WhileStatement[35171-35279]:WhileStatement[35163-35271]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35226-35279]:Block[35218-35271]"
    }, {
      "left" : "start.add(Calendar.DATE, -1);",
      "right" : "start.add(Calendar.DATE, -1);",
      "info" : "ExpressionStatement[35240-35269]:ExpressionStatement[35232-35261]"
    }, {
      "left" : "while (end.get(Calendar.DAY_OF_WEEK) != endCutoff)",
      "right" : "while (end.get(Calendar.DAY_OF_WEEK) != endCutoff)",
      "info" : "WhileStatement[35288-35389]:WhileStatement[35280-35381]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35339-35389]:Block[35331-35381]"
    }, {
      "left" : "end.add(Calendar.DATE, 1);",
      "right" : "end.add(Calendar.DATE, 1);",
      "info" : "ExpressionStatement[35353-35379]:ExpressionStatement[35345-35371]"
    }, {
      "left" : "return new DateIterator(start, end);",
      "right" : "return new DateIterator(start, end);",
      "info" : "ReturnStatement[35398-35434]:ReturnStatement[35390-35426]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36439-36869]:Block[36431-36861]"
    }, {
      "left" : "if (focus == null)",
      "right" : "if (focus == null)",
      "info" : "IfStatement[36449-36556]:IfStatement[36441-36548]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36468-36556]:Block[36460-36548]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "info" : "ThrowStatement[36482-36546]:ThrowStatement[36474-36538]"
    }, {
      "left" : "if (focus instanceof Date)",
      "right" : "if (focus instanceof Date)",
      "info" : "IfStatement[36565-36863]:IfStatement[36557-36855]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36592-36658]:Block[36584-36650]"
    }, {
      "left" : "return iterator((Date) focus, rangeStyle);",
      "right" : "return iterator((Date) focus, rangeStyle);",
      "info" : "ReturnStatement[36606-36648]:ReturnStatement[36598-36640]"
    }, {
      "left" : "if (focus instanceof Calendar)",
      "right" : "if (focus instanceof Calendar)",
      "info" : "IfStatement[36664-36863]:IfStatement[36656-36855]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36695-36765]:Block[36687-36757]"
    }, {
      "left" : "return iterator((Calendar) focus, rangeStyle);",
      "right" : "return iterator((Calendar) focus, rangeStyle);",
      "info" : "ReturnStatement[36709-36755]:ReturnStatement[36701-36747]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36771-36863]:Block[36763-36855]"
    }, {
      "left" : "throw new ClassCastException(\"Could not iterate based on \" + focus);",
      "right" : "throw new ClassCastException(\"Could not iterate based on \" + focus);",
      "info" : "ThrowStatement[36785-36853]:ThrowStatement[36777-36845]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37331-37473]:Block[37323-37465]"
    }, {
      "left" : "super();",
      "right" : "super();",
      "info" : "SuperConstructorInvocation[37345-37353]:SuperConstructorInvocation[37337-37345]"
    }, {
      "left" : "this.endFinal = endFinal;",
      "right" : "this.endFinal = endFinal;",
      "info" : "ExpressionStatement[37366-37391]:ExpressionStatement[37358-37383]"
    }, {
      "left" : "spot = startFinal;",
      "right" : "spot = startFinal;",
      "info" : "ExpressionStatement[37404-37422]:ExpressionStatement[37396-37414]"
    }, {
      "left" : "spot.add(Calendar.DATE, -1);",
      "right" : "spot.add(Calendar.DATE, -1);",
      "info" : "ExpressionStatement[37435-37463]:ExpressionStatement[37427-37455]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37684-37737]:Block[37676-37729]"
    }, {
      "left" : "return spot.before(endFinal);",
      "right" : "return spot.before(endFinal);",
      "info" : "ReturnStatement[37698-37727]:ReturnStatement[37690-37719]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37909-38100]:Block[37901-38092]"
    }, {
      "left" : "if (spot.equals(endFinal))",
      "right" : "if (spot.equals(endFinal))",
      "info" : "IfStatement[37923-38017]:IfStatement[37915-38009]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37950-38017]:Block[37942-38009]"
    }, {
      "left" : "throw new NoSuchElementException();",
      "right" : "throw new NoSuchElementException();",
      "info" : "ThrowStatement[37968-38003]:ThrowStatement[37960-37995]"
    }, {
      "left" : "spot.add(Calendar.DATE, 1);",
      "right" : "spot.add(Calendar.DATE, 1);",
      "info" : "ExpressionStatement[38030-38057]:ExpressionStatement[38022-38049]"
    }, {
      "left" : "return spot.clone();",
      "right" : "return spot.clone();",
      "info" : "ReturnStatement[38070-38090]:ReturnStatement[38062-38082]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38316-38382]:Block[38308-38374]"
    }, {
      "left" : "throw new UnsupportedOperationException();",
      "right" : "throw new UnsupportedOperationException();",
      "info" : "ThrowStatement[38330-38372]:ThrowStatement[38322-38364]"
    } ]
  },
  "interFileMappings" : { }
}