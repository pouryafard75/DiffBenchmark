{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "public static final String MIN_SDK_VERSION = \"1.12\";",
      "right" : "public static final String MIN_SDK_VERSION = \"1.12\";",
      "info" : "FieldDeclaration[3015-3067]:FieldDeclaration[3015-3067]"
    }, {
      "left" : "private static final long CHECK_CANCELLED_PERIOD = 100;",
      "right" : "private static final long CHECK_CANCELLED_PERIOD = 100;",
      "info" : "FieldDeclaration[3071-3126]:FieldDeclaration[3071-3126]"
    }, {
      "left" : "private static final long SEND_REQUEST_TIMEOUT = TimeUnit.SECONDS.toMillis(1);",
      "right" : "private static final long SEND_REQUEST_TIMEOUT = TimeUnit.SECONDS.toMillis(1);",
      "info" : "FieldDeclaration[3129-3207]:FieldDeclaration[3129-3207]"
    }, {
      "left" : "private static final long EDIT_FORMAT_TIMEOUT = TimeUnit.SECONDS.toMillis(3);",
      "right" : "private static final long EDIT_FORMAT_TIMEOUT = TimeUnit.SECONDS.toMillis(3);",
      "info" : "FieldDeclaration[3210-3287]:FieldDeclaration[3210-3287]"
    }, {
      "left" : "private static final long EDIT_SORT_MEMBERS_TIMEOUT = TimeUnit.SECONDS.toMillis(3);",
      "right" : "private static final long EDIT_SORT_MEMBERS_TIMEOUT = TimeUnit.SECONDS.toMillis(3);",
      "info" : "FieldDeclaration[3290-3373]:FieldDeclaration[3290-3373]"
    }, {
      "left" : "private static final long GET_ERRORS_TIMEOUT = TimeUnit.SECONDS.toMillis(5);",
      "right" : "private static final long GET_ERRORS_TIMEOUT = TimeUnit.SECONDS.toMillis(5);",
      "info" : "FieldDeclaration[3376-3452]:FieldDeclaration[3376-3452]"
    }, {
      "left" : "private static final long GET_ERRORS_LONGER_TIMEOUT = TimeUnit.SECONDS.toMillis(60);",
      "right" : "private static final long GET_ERRORS_LONGER_TIMEOUT = TimeUnit.SECONDS.toMillis(60);",
      "info" : "FieldDeclaration[3455-3539]:FieldDeclaration[3455-3539]"
    }, {
      "left" : "private static final long GET_FIXES_TIMEOUT = TimeUnit.SECONDS.toMillis(10);",
      "right" : "private static final long GET_FIXES_TIMEOUT = TimeUnit.SECONDS.toMillis(10);",
      "info" : "FieldDeclaration[3542-3618]:FieldDeclaration[3542-3618]"
    }, {
      "left" : "private static final long GET_SUGGESTIONS_TIMEOUT = TimeUnit.SECONDS.toMillis(1);",
      "right" : "private static final long GET_SUGGESTIONS_TIMEOUT = TimeUnit.SECONDS.toMillis(1);",
      "info" : "FieldDeclaration[3621-3702]:FieldDeclaration[3621-3702]"
    }, {
      "left" : "private static final long GET_LIBRARY_DEPENDENCIES_TIMEOUT = TimeUnit.MINUTES.toMillis(5);",
      "right" : "private static final long GET_LIBRARY_DEPENDENCIES_TIMEOUT = TimeUnit.MINUTES.toMillis(5);",
      "info" : "FieldDeclaration[3705-3795]:FieldDeclaration[3705-3795]"
    }, {
      "left" : "private static final long FIND_ELEMENT_REFERENCES_TIMEOUT = TimeUnit.SECONDS.toMillis(1);",
      "right" : "private static final long FIND_ELEMENT_REFERENCES_TIMEOUT = TimeUnit.SECONDS.toMillis(1);",
      "info" : "FieldDeclaration[3798-3887]:FieldDeclaration[3798-3887]"
    }, {
      "left" : "private static final List<String> SERVER_SUBSCRIPTIONS = Collections.singletonList(ServerService.STATUS);",
      "right" : "private static final List<String> SERVER_SUBSCRIPTIONS = Collections.singletonList(ServerService.STATUS);",
      "info" : "FieldDeclaration[3890-3995]:FieldDeclaration[3890-3995]"
    }, {
      "left" : "private static final Logger LOG = Logger.getInstance(\"#com.jetbrains.lang.dart.analyzer.DartAnalysisServerService\");",
      "right" : "private static final Logger LOG = Logger.getInstance(\"#com.jetbrains.lang.dart.analyzer.DartAnalysisServerService\");",
      "info" : "FieldDeclaration[3998-4114]:FieldDeclaration[3998-4114]"
    }, {
      "left" : "private final Object myLock = new Object();",
      "right" : "private final Object myLock = new Object();",
      "info" : "FieldDeclaration[4118-4161]:FieldDeclaration[4118-4161]"
    }, {
      "left" : "@Nullable private AnalysisServer myServer;",
      "right" : "@Nullable private AnalysisServer myServer;",
      "info" : "FieldDeclaration[4246-4288]:FieldDeclaration[4246-4288]"
    }, {
      "left" : "@Nullable private StdioServerSocket myServerSocket;",
      "right" : "@Nullable private StdioServerSocket myServerSocket;",
      "info" : "FieldDeclaration[4291-4342]:FieldDeclaration[4291-4342]"
    }, {
      "left" : "@NotNull private String myServerVersion = \"\";",
      "right" : "@NotNull private String myServerVersion = \"\";",
      "info" : "FieldDeclaration[4346-4391]:FieldDeclaration[4346-4391]"
    }, {
      "left" : "@NotNull private String mySdkVersion = \"\";",
      "right" : "@NotNull private String mySdkVersion = \"\";",
      "info" : "FieldDeclaration[4394-4436]:FieldDeclaration[4394-4436]"
    }, {
      "left" : "@Nullable private String mySdkHome = null;",
      "right" : "@Nullable private String mySdkHome = null;",
      "info" : "FieldDeclaration[4439-4481]:FieldDeclaration[4439-4481]"
    }, {
      "left" : "private final DartServerRootsHandler myRootsHandler = new DartServerRootsHandler();",
      "right" : "private final DartServerRootsHandler myRootsHandler = new DartServerRootsHandler();",
      "info" : "FieldDeclaration[4484-4567]:FieldDeclaration[4484-4567]"
    }, {
      "left" : "private final Map<String, Long> myFilePathWithOverlaidContentToTimestamp = new THashMap<String, Long>();",
      "right" : "private final Map<String, Long> myFilePathWithOverlaidContentToTimestamp = new THashMap<String, Long>();",
      "info" : "FieldDeclaration[4570-4674]:FieldDeclaration[4570-4674]"
    }, {
      "left" : "private final List<String> myVisibleFiles = new ArrayList<String>();",
      "right" : "private final List<String> myVisibleFiles = new ArrayList<String>();",
      "info" : "FieldDeclaration[4677-4745]:FieldDeclaration[4677-4745]"
    }, {
      "left" : "private final Set<String> myFilePathsWithUnsentChanges = Sets.newConcurrentHashSet();",
      "right" : "private final Set<String> myFilePathsWithUnsentChanges = Sets.newConcurrentHashSet();",
      "info" : "FieldDeclaration[4748-4833]:FieldDeclaration[4748-4833]"
    }, {
      "left" : "@NotNull private final Queue<CompletionInfo> myCompletionInfos = new LinkedList<CompletionInfo>();",
      "right" : "@NotNull private final Queue<CompletionInfo> myCompletionInfos = new LinkedList<CompletionInfo>();",
      "info" : "FieldDeclaration[4837-4935]:FieldDeclaration[4837-4935]"
    }, {
      "left" : "@NotNull private final Queue<SearchResultsSet> mySearchResultSets = new LinkedList<SearchResultsSet>();",
      "right" : "@NotNull private final Queue<SearchResultsSet> mySearchResultSets = new LinkedList<SearchResultsSet>();",
      "info" : "FieldDeclaration[4938-5041]:FieldDeclaration[4938-5041]"
    }, {
      "left" : "@NotNull private final Map<String, List<PluginHighlightRegion>> myHighlightData = Maps.newHashMap();",
      "right" : "@NotNull private final Map<String, List<PluginHighlightRegion>> myHighlightData = Maps.newHashMap();",
      "info" : "FieldDeclaration[5044-5144]:FieldDeclaration[5044-5144]"
    }, {
      "left" : "@NotNull private final Map<String, List<PluginNavigationRegion>> myNavigationData = Maps.newHashMap();",
      "right" : "@NotNull private final Map<String, List<PluginNavigationRegion>> myNavigationData = Maps.newHashMap();",
      "info" : "FieldDeclaration[5147-5249]:FieldDeclaration[5147-5249]"
    }, {
      "left" : "@NotNull final AtomicBoolean myServerBusy = new AtomicBoolean(false);",
      "right" : "@NotNull final AtomicBoolean myServerBusy = new AtomicBoolean(false);",
      "info" : "FieldDeclaration[5253-5322]:FieldDeclaration[5253-5322]"
    }, {
      "left" : "@NotNull final Alarm myShowServerProgressAlarm = new Alarm();",
      "right" : "@NotNull final Alarm myShowServerProgressAlarm = new Alarm();",
      "info" : "FieldDeclaration[5325-5386]:FieldDeclaration[5325-5386]"
    }, {
      "left" : "private final AnalysisServerListener myAnalysisServerListener = new AnalysisServerListenerAdapter() {\n\n    @Override\n    public void computedErrors(@NotNull final String file, @NotNull final List<AnalysisError> errors) {\n      updateProblemsView(DartProblemsViewImpl.createGroupName(file), errors);\n    }\n\n    @Override\n    public void computedHighlights(String file, List<HighlightRegion> regions) {\n      if (DartResolver.isServerDrivenResolution()) {\n        file = FileUtil.toSystemIndependentName(file);\n        // Ignore notifications for files that has been changed, but server does not know about them yet.\n        if (myFilePathsWithUnsentChanges.contains(file)) {\n          return;\n        }\n        // Convert HighlightRegion(s) into PluginHighlightRegion(s).\n        List<PluginHighlightRegion> pluginRegions = Lists.newArrayList();\n        for (HighlightRegion region : regions) {\n          pluginRegions.add(new PluginHighlightRegion(region));\n        }\n        // Put PluginHighlightRegion(s).\n        synchronized (myHighlightData) {\n          myHighlightData.put(file, pluginRegions);\n        }\n        // Force (re)highlighting.\n        forceFileAnnotation(file);\n      }\n    }\n\n    @Override\n    public void computedNavigation(String file, List<NavigationRegion> regions) {\n      if (DartResolver.isServerDrivenResolution()) {\n        file = FileUtil.toSystemIndependentName(file);\n        // Ignore notifications for files that has been changed, but server does not know about them yet.\n        if (myFilePathsWithUnsentChanges.contains(file)) {\n          return;\n        }\n        // Convert NavigationRegion(s) into PluginNavigationRegion(s).\n        List<PluginNavigationRegion> pluginRegions = new ArrayList<PluginNavigationRegion>(regions.size());\n        for (NavigationRegion region : regions) {\n          pluginRegions.add(new PluginNavigationRegion(region));\n        }\n        // Put PluginNavigationRegion(s).\n        synchronized (myNavigationData) {\n          myNavigationData.put(file, pluginRegions);\n        }\n        // Force (re)highlighting.\n        forceFileAnnotation(file);\n      }\n    }\n\n    @Override\n    public void flushedResults(List<String> files) {\n      for (String file : files) {\n        updateProblemsView(DartProblemsViewImpl.createGroupName(file), AnalysisError.EMPTY_LIST);\n      }\n    }\n\n    @Override\n    public void computedCompletion(@NotNull final String completionId,\n                                   final int replacementOffset,\n                                   final int replacementLength,\n                                   @NotNull final List<CompletionSuggestion> completions,\n                                   final boolean isLast) {\n      synchronized (myCompletionInfos) {\n        myCompletionInfos.add(new CompletionInfo(completionId, replacementOffset, replacementLength, completions, isLast));\n        myCompletionInfos.notifyAll();\n      }\n    }\n\n    @Override\n    public void computedSearchResults(String searchId, List<SearchResult> results, boolean last) {\n      synchronized (mySearchResultSets) {\n        mySearchResultSets.add(new SearchResultsSet(searchId, results, last));\n        mySearchResultSets.notifyAll();\n      }\n    }\n\n    @Override\n    public void serverConnected(@Nullable String version) {\n      myServerVersion = version != null ? version : \"\";\n    }\n\n    @Override\n    public void serverError(boolean isFatal, @Nullable String message, @Nullable String stackTrace) {\n      if (message == null) message = \"<no error message>\";\n      if (stackTrace == null) stackTrace = \"<no stack trace>\";\n      LOG.error(\"Dart analysis server, SDK version \" + mySdkVersion +\n                \", server version \" + myServerVersion +\n                \", \" + (isFatal ? \"FATAL \" : \"\") + \"error: \" + message + \"\\n\" + stackTrace);\n\n      if (isFatal) {\n        onServerStopped();\n      }\n    }\n\n    @Override\n    public void serverStatus(@Nullable final AnalysisStatus analysisStatus, @Nullable final PubStatus pubStatus) {\n      if (analysisStatus != null && analysisStatus.isAnalyzing() || pubStatus != null && pubStatus.isListingPackageDirs()) {\n        if (myServerBusy.compareAndSet(false, true)) {\n          for (final Project project : myRootsHandler.getTrackedProjects()) {\n            final Runnable delayedRunnable = new Runnable() {\n              public void run() {\n                if (project.isDisposed() || !myServerBusy.get()) return;\n\n                final Task.Backgroundable task =\n                  new Task.Backgroundable(project, DartBundle.message(\"dart.analysis.progress.title\"), false) {\n                    @Override\n                    public void run(@NotNull ProgressIndicator indicator) {\n                      if (myServerBusy.get()) {\n                        try {\n                          synchronized (myServerBusy) {\n                            //noinspection WaitNotInLoop\n                            myServerBusy.wait();\n                          }\n                        }\n                        catch (InterruptedException e) {}\n                      }\n                    }\n                  };\n\n                ProgressManager.getInstance().run(task);\n              }\n            };\n\n            // 50ms delay to minimize blinking in case of consequent start-stop-start-stop-... events that happen with pubStatus events\n            // 300ms delay to avoid showing progress for very fast analysis start-stop cycle that happens with analysisStatus events\n            final int delay = pubStatus != null && pubStatus.isListingPackageDirs() ? 50 : 300;\n            myShowServerProgressAlarm.addRequest(delayedRunnable, delay, ModalityState.any());\n          }\n        }\n      }\n      else {\n        stopShowingServerProgress();\n      }\n    }\n  };",
      "right" : "private final AnalysisServerListener myAnalysisServerListener = new AnalysisServerListenerAdapter() {\n\n    @Override\n    public void computedErrors(@NotNull final String file, @NotNull final List<AnalysisError> errors) {\n      updateProblemsView(DartProblemsViewImpl.createGroupName(file), errors);\n    }\n\n    @Override\n    public void computedHighlights(String file, List<HighlightRegion> regions) {\n      if (DartResolver.isServerDrivenResolution()) {\n        file = FileUtil.toSystemIndependentName(file);\n        // Ignore notifications for files that has been changed, but server does not know about them yet.\n        if (myFilePathsWithUnsentChanges.contains(file)) {\n          return;\n        }\n        // Convert HighlightRegion(s) into PluginHighlightRegion(s).\n        List<PluginHighlightRegion> pluginRegions = Lists.newArrayList();\n        for (HighlightRegion region : regions) {\n          pluginRegions.add(new PluginHighlightRegion(region));\n        }\n        // Put PluginHighlightRegion(s).\n        synchronized (myHighlightData) {\n          myHighlightData.put(file, pluginRegions);\n        }\n        // Force (re)highlighting.\n        forceFileAnnotation(file);\n      }\n    }\n\n    @Override\n    public void computedNavigation(String file, List<NavigationRegion> regions) {\n      if (DartResolver.isServerDrivenResolution()) {\n        file = FileUtil.toSystemIndependentName(file);\n        // Ignore notifications for files that has been changed, but server does not know about them yet.\n        if (myFilePathsWithUnsentChanges.contains(file)) {\n          return;\n        }\n        // Convert NavigationRegion(s) into PluginNavigationRegion(s).\n        List<PluginNavigationRegion> pluginRegions = new ArrayList<PluginNavigationRegion>(regions.size());\n        for (NavigationRegion region : regions) {\n          pluginRegions.add(new PluginNavigationRegion(region));\n        }\n        // Put PluginNavigationRegion(s).\n        synchronized (myNavigationData) {\n          myNavigationData.put(file, pluginRegions);\n        }\n        // Force (re)highlighting.\n        forceFileAnnotation(file);\n      }\n    }\n\n    @Override\n    public void flushedResults(List<String> files) {\n      for (String file : files) {\n        updateProblemsView(DartProblemsViewImpl.createGroupName(file), AnalysisError.EMPTY_LIST);\n      }\n    }\n\n    @Override\n    public void computedCompletion(@NotNull final String completionId,\n                                   final int replacementOffset,\n                                   final int replacementLength,\n                                   @NotNull final List<CompletionSuggestion> completions,\n                                   final boolean isLast) {\n      synchronized (myCompletionInfos) {\n        myCompletionInfos.add(new CompletionInfo(completionId, replacementOffset, replacementLength, completions, isLast));\n        myCompletionInfos.notifyAll();\n      }\n    }\n\n    @Override\n    public void computedSearchResults(String searchId, List<SearchResult> results, boolean last) {\n      synchronized (mySearchResultSets) {\n        mySearchResultSets.add(new SearchResultsSet(searchId, results, last));\n        mySearchResultSets.notifyAll();\n      }\n    }\n\n    @Override\n    public void serverConnected(@Nullable String version) {\n      myServerVersion = version != null ? version : \"\";\n    }\n\n    @Override\n    public void serverError(boolean isFatal, @Nullable String message, @Nullable String stackTrace) {\n      if (message == null) message = \"<no error message>\";\n      if (stackTrace == null) stackTrace = \"<no stack trace>\";\n      LOG.error(\"Dart analysis server, SDK version \" + mySdkVersion +\n                \", server version \" + myServerVersion +\n                \", \" + (isFatal ? \"FATAL \" : \"\") + \"error: \" + message + \"\\n\" + stackTrace);\n\n      if (isFatal) {\n        onServerStopped();\n      }\n    }\n\n    @Override\n    public void serverStatus(@Nullable final AnalysisStatus analysisStatus, @Nullable final PubStatus pubStatus) {\n      if (analysisStatus != null && analysisStatus.isAnalyzing() || pubStatus != null && pubStatus.isListingPackageDirs()) {\n        if (myServerBusy.compareAndSet(false, true)) {\n          for (final Project project : myRootsHandler.getTrackedProjects()) {\n            final Runnable delayedRunnable = new Runnable() {\n              public void run() {\n                if (project.isDisposed() || !myServerBusy.get()) return;\n\n                final Task.Backgroundable task =\n                  new Task.Backgroundable(project, DartBundle.message(\"dart.analysis.progress.title\"), false) {\n                    @Override\n                    public void run(@NotNull ProgressIndicator indicator) {\n                      if (myServerBusy.get()) {\n                        try {\n                          synchronized (myServerBusy) {\n                            //noinspection WaitNotInLoop\n                            myServerBusy.wait();\n                          }\n                        }\n                        catch (InterruptedException e) {}\n                      }\n                    }\n                  };\n\n                ProgressManager.getInstance().run(task);\n              }\n            };\n\n            // 50ms delay to minimize blinking in case of consequent start-stop-start-stop-... events that happen with pubStatus events\n            // 300ms delay to avoid showing progress for very fast analysis start-stop cycle that happens with analysisStatus events\n            final int delay = pubStatus != null && pubStatus.isListingPackageDirs() ? 50 : 300;\n            myShowServerProgressAlarm.addRequest(delayedRunnable, delay, ModalityState.any());\n          }\n        }\n      }\n      else {\n        stopShowingServerProgress();\n      }\n    }\n  };",
      "info" : "FieldDeclaration[5390-11166]:FieldDeclaration[5390-11166]"
    }, {
      "left" : "public void computedErrors(@NotNull final String file, @NotNull final List<AnalysisError> errors)",
      "right" : "public void computedErrors(@NotNull final String file, @NotNull final List<AnalysisError> errors)",
      "info" : "MethodDeclaration[5497-5694]:MethodDeclaration[5497-5694]"
    }, {
      "left" : "public void computedHighlights(String file, List<HighlightRegion> regions)",
      "right" : "public void computedHighlights(String file, List<HighlightRegion> regions)",
      "info" : "MethodDeclaration[5700-6585]:MethodDeclaration[5700-6585]"
    }, {
      "left" : "public void computedNavigation(String file, List<NavigationRegion> regions)",
      "right" : "public void computedNavigation(String file, List<NavigationRegion> regions)",
      "info" : "MethodDeclaration[6591-7518]:MethodDeclaration[6591-7518]"
    }, {
      "left" : "public void flushedResults(List<String> files)",
      "right" : "public void flushedResults(List<String> files)",
      "info" : "MethodDeclaration[7524-7732]:MethodDeclaration[7524-7732]"
    }, {
      "left" : "public void computedCompletion(@NotNull final String completionId,\n                                   final int replacementOffset,\n                                   final int replacementLength,\n                                   @NotNull final List<CompletionSuggestion> completions,\n                                   final boolean isLast)",
      "right" : "public void computedCompletion(@NotNull final String completionId,\n                                   final int replacementOffset,\n                                   final int replacementLength,\n                                   @NotNull final List<CompletionSuggestion> completions,\n                                   final boolean isLast)",
      "info" : "MethodDeclaration[7738-8313]:MethodDeclaration[7738-8313]"
    }, {
      "left" : "public void computedSearchResults(String searchId, List<SearchResult> results, boolean last)",
      "right" : "public void computedSearchResults(String searchId, List<SearchResult> results, boolean last)",
      "info" : "MethodDeclaration[8319-8602]:MethodDeclaration[8319-8602]"
    }, {
      "left" : "public void serverConnected(@Nullable String version)",
      "right" : "public void serverConnected(@Nullable String version)",
      "info" : "MethodDeclaration[8608-8739]:MethodDeclaration[8608-8739]"
    }, {
      "left" : "public void serverError(boolean isFatal, @Nullable String message, @Nullable String stackTrace)",
      "right" : "public void serverError(boolean isFatal, @Nullable String message, @Nullable String stackTrace)",
      "info" : "MethodDeclaration[8745-9260]:MethodDeclaration[8745-9260]"
    }, {
      "left" : "public void serverStatus(@Nullable final AnalysisStatus analysisStatus, @Nullable final PubStatus pubStatus)",
      "right" : "public void serverStatus(@Nullable final AnalysisStatus analysisStatus, @Nullable final PubStatus pubStatus)",
      "info" : "MethodDeclaration[9266-11161]:MethodDeclaration[9266-11161]"
    }, {
      "left" : "public void run()",
      "right" : "public void run()",
      "info" : "MethodDeclaration[9725-10591]:MethodDeclaration[9725-10591]"
    }, {
      "left" : "public void run(@NotNull ProgressIndicator indicator)",
      "right" : "public void run(@NotNull ProgressIndicator indicator)",
      "info" : "MethodDeclaration[10000-10496]:MethodDeclaration[10000-10496]"
    }, {
      "left" : "public static boolean isDartSdkVersionSufficient(@NotNull final DartSdk sdk)",
      "right" : "public static boolean isDartSdkVersionSufficient(@NotNull final DartSdk sdk)",
      "info" : "MethodDeclaration[11170-11337]:MethodDeclaration[11170-11337]"
    }, {
      "left" : "private void forceFileAnnotation(String file)",
      "right" : "private void forceFileAnnotation(String file)",
      "info" : "MethodDeclaration[11341-11758]:MethodDeclaration[11341-11758]"
    }, {
      "left" : "public void addCompletions(@NotNull final String completionId, @NotNull final Consumer<CompletionSuggestion> consumer)",
      "right" : "public void addCompletions(@NotNull final String completionId, @NotNull final Consumer<CompletionSuggestion> consumer)",
      "info" : "MethodDeclaration[11762-12556]:MethodDeclaration[11762-12556]"
    }, {
      "left" : "FormatResult",
      "right" : "FormatResult",
      "info" : "TypeDeclaration[12560-13136]:TypeDeclaration[12560-13136]"
    }, {
      "left" : "@Nullable private final List<SourceEdit> myEdits;",
      "right" : "@Nullable private final List<SourceEdit> myEdits;",
      "info" : "FieldDeclaration[12599-12648]:FieldDeclaration[12599-12648]"
    }, {
      "left" : "private final int myOffset;",
      "right" : "private final int myOffset;",
      "info" : "FieldDeclaration[12653-12680]:FieldDeclaration[12653-12680]"
    }, {
      "left" : "private final int myLength;",
      "right" : "private final int myLength;",
      "info" : "FieldDeclaration[12685-12712]:FieldDeclaration[12685-12712]"
    }, {
      "left" : "public FormatResult(@Nullable final List<SourceEdit> edits, final int selectionOffset, final int selectionLength)",
      "right" : "public FormatResult(@Nullable final List<SourceEdit> edits, final int selectionOffset, final int selectionLength)",
      "info" : "MethodDeclaration[12718-12930]:MethodDeclaration[12718-12930]"
    }, {
      "left" : "public int getLength()",
      "right" : "public int getLength()",
      "info" : "MethodDeclaration[12936-12989]:MethodDeclaration[12936-12989]"
    }, {
      "left" : "public int getOffset()",
      "right" : "public int getOffset()",
      "info" : "MethodDeclaration[12995-13048]:MethodDeclaration[12995-13048]"
    }, {
      "left" : "public List<SourceEdit> getEdits()",
      "right" : "public List<SourceEdit> getEdits()",
      "info" : "MethodDeclaration[13054-13132]:MethodDeclaration[13054-13132]"
    }, {
      "left" : "LibraryDependenciesResult",
      "right" : "LibraryDependenciesResult",
      "info" : "TypeDeclaration[13140-13755]:TypeDeclaration[13140-13755]"
    }, {
      "left" : "@Nullable final String[] libraries;",
      "right" : "@Nullable final String[] libraries;",
      "info" : "FieldDeclaration[13192-13227]:FieldDeclaration[13192-13227]"
    }, {
      "left" : "@Nullable final Map<String, Map<String, List<String>>> packageMap;",
      "right" : "@Nullable final Map<String, Map<String, List<String>>> packageMap;",
      "info" : "FieldDeclaration[13233-13299]:FieldDeclaration[13233-13299]"
    }, {
      "left" : "public LibraryDependenciesResult(@Nullable final String[] libraries,\n                                     @Nullable final Map<String, Map<String, List<String>>> packageMap)",
      "right" : "public LibraryDependenciesResult(@Nullable final String[] libraries,\n                                     @Nullable final Map<String, Map<String, List<String>>> packageMap)",
      "info" : "MethodDeclaration[13305-13555]:MethodDeclaration[13305-13555]"
    }, {
      "left" : "public String[] getLibraries()",
      "right" : "public String[] getLibraries()",
      "info" : "MethodDeclaration[13561-13637]:MethodDeclaration[13561-13637]"
    }, {
      "left" : "public Map<String, Map<String, List<String>>> getPackageMap()",
      "right" : "public Map<String, Map<String, List<String>>> getPackageMap()",
      "info" : "MethodDeclaration[13643-13751]:MethodDeclaration[13643-13751]"
    }, {
      "left" : "public DartAnalysisServerService()",
      "right" : "public DartAnalysisServerService()",
      "info" : "MethodDeclaration[13759-15799]:MethodDeclaration[13759-15799]"
    }, {
      "left" : "public void dispose()",
      "right" : "public void dispose()",
      "info" : "MethodDeclaration[13880-13933]:MethodDeclaration[13880-13933]"
    }, {
      "left" : "public void logError(String message)",
      "right" : "public void logError(String message)",
      "info" : "MethodDeclaration[14027-14117]:MethodDeclaration[14027-14117]"
    }, {
      "left" : "public void logError(String message, Throwable exception)",
      "right" : "public void logError(String message, Throwable exception)",
      "info" : "MethodDeclaration[14125-14247]:MethodDeclaration[14125-14247]"
    }, {
      "left" : "public void logInformation(String message)",
      "right" : "public void logInformation(String message)",
      "info" : "MethodDeclaration[14255-14351]:MethodDeclaration[14255-14351]"
    }, {
      "left" : "public void logInformation(String message, Throwable exception)",
      "right" : "public void logInformation(String message, Throwable exception)",
      "info" : "MethodDeclaration[14359-14487]:MethodDeclaration[14359-14487]"
    }, {
      "left" : "public void fileOpened(@NotNull final FileEditorManager source, @NotNull final VirtualFile file)",
      "right" : "public void fileOpened(@NotNull final FileEditorManager source, @NotNull final VirtualFile file)",
      "info" : "MethodDeclaration[14668-15087]:MethodDeclaration[14668-15087]"
    }, {
      "left" : "public void selectionChanged(@NotNull FileEditorManagerEvent event)",
      "right" : "public void selectionChanged(@NotNull FileEditorManagerEvent event)",
      "info" : "MethodDeclaration[15097-15334]:MethodDeclaration[15097-15334]"
    }, {
      "left" : "public void fileClosed(@NotNull final FileEditorManager source, @NotNull final VirtualFile file)",
      "right" : "public void fileClosed(@NotNull final FileEditorManager source, @NotNull final VirtualFile file)",
      "info" : "MethodDeclaration[15344-15556]:MethodDeclaration[15344-15556]"
    }, {
      "left" : "public void beforeDocumentChange(DocumentEvent e)",
      "right" : "public void beforeDocumentChange(DocumentEvent e)",
      "info" : "MethodDeclaration[15672-15787]:MethodDeclaration[15672-15787]"
    }, {
      "left" : "public static DartAnalysisServerService getInstance()",
      "right" : "public static DartAnalysisServerService getInstance()",
      "info" : "MethodDeclaration[15803-15944]:MethodDeclaration[15803-15944]"
    }, {
      "left" : "public List<PluginHighlightRegion> getHighlight(@NotNull final VirtualFile file)",
      "right" : "public List<PluginHighlightRegion> getHighlight(@NotNull final VirtualFile file)",
      "info" : "MethodDeclaration[15948-16379]:MethodDeclaration[15948-16379]"
    }, {
      "left" : "public List<PluginNavigationRegion> getNavigation(@NotNull final VirtualFile file)",
      "right" : "public List<PluginNavigationRegion> getNavigation(@NotNull final VirtualFile file)",
      "info" : "MethodDeclaration[16383-16821]:MethodDeclaration[16383-16821]"
    }, {
      "left" : "void updateVisibleFiles()",
      "right" : "void updateVisibleFiles()",
      "info" : "MethodDeclaration[16825-17539]:MethodDeclaration[16825-17539]"
    }, {
      "left" : "private static boolean isDartOrHtmlFile(@Nullable final VirtualFile file)",
      "right" : "private static boolean isDartOrHtmlFile(@Nullable final VirtualFile file)",
      "info" : "MethodDeclaration[17543-17752]:MethodDeclaration[17543-17752]"
    }, {
      "left" : "public void updateFilesContent()",
      "right" : "public void updateFilesContent()",
      "info" : "MethodDeclaration[17756-20499]:MethodDeclaration[17756-20499]"
    }, {
      "left" : "public void onResponse()",
      "right" : "public void onResponse()",
      "info" : "MethodDeclaration[19875-19983]:MethodDeclaration[19875-19983]"
    }, {
      "left" : "public void run()",
      "right" : "public void run()",
      "info" : "MethodDeclaration[20123-20242]:MethodDeclaration[20123-20242]"
    }, {
      "left" : "public boolean updateRoots(@NotNull final List<String> includedRoots,\n                             @NotNull final List<String> excludedRoots,\n                             @Nullable final Map<String, String> packageRoots)",
      "right" : "public boolean updateRoots(@NotNull final List<String> includedRoots,\n                             @NotNull final List<String> excludedRoots,\n                             @Nullable final Map<String, String> packageRoots)",
      "info" : "MethodDeclaration[20503-21608]:MethodDeclaration[20503-21608]"
    }, {
      "left" : "public void run()",
      "right" : "public void run()",
      "info" : "MethodDeclaration[21327-21462]:MethodDeclaration[21327-21462]"
    }, {
      "left" : "private void updateProblemsView(@NotNull final String filePath, @NotNull final List<AnalysisError> errors)",
      "right" : "private void updateProblemsView(@NotNull final String filePath, @NotNull final List<AnalysisError> errors)",
      "info" : "MethodDeclaration[21612-22401]:MethodDeclaration[21612-22401]"
    }, {
      "left" : "public void run()",
      "right" : "public void run()",
      "info" : "MethodDeclaration[21798-22389]:MethodDeclaration[21798-22389]"
    }, {
      "left" : "public void computedErrors(final AnalysisError[] errors)",
      "right" : "public void computedErrors(final AnalysisError[] errors)",
      "info" : "MethodDeclaration[22977-23991]:MethodDeclaration[22977-23991]"
    }, {
      "left" : "public void run()",
      "right" : "public void run()",
      "info" : "MethodDeclaration[23453-23947]:MethodDeclaration[23453-23947]"
    }, {
      "left" : "public LibraryDependenciesResult analysis_getLibraryDependencies()",
      "right" : "public LibraryDependenciesResult analysis_getLibraryDependencies()",
      "info" : "MethodDeclaration[25025-26693]:MethodDeclaration[25246-26914]"
    }, {
      "left" : "public void computedDependencies(@Nullable final String[] libraries,\n                                           @Nullable final Map<String, Map<String, List<String>>> packageMap)",
      "right" : "public void computedDependencies(@Nullable final String[] libraries,\n                                           @Nullable final Map<String, Map<String, List<String>>> packageMap)",
      "info" : "MethodDeclaration[25520-25841]:MethodDeclaration[25741-26062]"
    }, {
      "left" : "public void onError(final RequestError error)",
      "right" : "public void onError(final RequestError error)",
      "info" : "MethodDeclaration[25853-26032]:MethodDeclaration[26074-26253]"
    }, {
      "left" : "public void run()",
      "right" : "public void run()",
      "info" : "MethodDeclaration[26172-26285]:MethodDeclaration[26393-26506]"
    }, {
      "left" : "public List<AnalysisErrorFixes> edit_getFixes(@NotNull final String _filePath, final int offset)",
      "right" : "public List<AnalysisErrorFixes> edit_getFixes(@NotNull final String _filePath, final int offset)",
      "info" : "MethodDeclaration[26697-28200]:MethodDeclaration[26918-28421]"
    }, {
      "left" : "public void computedFixes(final List<AnalysisErrorFixes> fixes)",
      "right" : "public void computedFixes(final List<AnalysisErrorFixes> fixes)",
      "info" : "MethodDeclaration[27186-27337]:MethodDeclaration[27407-27558]"
    }, {
      "left" : "public void onError(final RequestError error)",
      "right" : "public void onError(final RequestError error)",
      "info" : "MethodDeclaration[27347-27504]:MethodDeclaration[27568-27725]"
    }, {
      "left" : "public void run()",
      "right" : "public void run()",
      "info" : "MethodDeclaration[27636-27743]:MethodDeclaration[27857-27964]"
    }, {
      "left" : "public void search_findElementReferences(@NotNull final String filePath,\n                                           final int offset,\n                                           @NotNull final Processor<SearchResult> processor)",
      "right" : "public void search_findElementReferences(@NotNull final String filePath,\n                                           final int offset,\n                                           @NotNull final Processor<SearchResult> processor)",
      "info" : "MethodDeclaration[28204-30608]:MethodDeclaration[28425-30829]"
    }, {
      "left" : "public void run()",
      "right" : "public void run()",
      "info" : "MethodDeclaration[28779-29269]:MethodDeclaration[29000-29490]"
    }, {
      "left" : "public void computedElementReferences(String searchId, Element element)",
      "right" : "public void computedElementReferences(String searchId, Element element)",
      "info" : "MethodDeclaration[28937-29117]:MethodDeclaration[29158-29338]"
    }, {
      "left" : "public void onError(RequestError requestError)",
      "right" : "public void onError(RequestError requestError)",
      "info" : "MethodDeclaration[29131-29245]:MethodDeclaration[29352-29466]"
    }, {
      "left" : "public String completion_getSuggestions(@NotNull final String filePath, final int offset)",
      "right" : "public String completion_getSuggestions(@NotNull final String filePath, final int offset)",
      "info" : "MethodDeclaration[30612-32126]:MethodDeclaration[30833-32347]"
    }, {
      "left" : "public void computedCompletionId(@NotNull final String completionId)",
      "right" : "public void computedCompletionId(@NotNull final String completionId)",
      "info" : "MethodDeclaration[30999-31162]:MethodDeclaration[31220-31383]"
    }, {
      "left" : "public void onError(@NotNull final RequestError error)",
      "right" : "public void onError(@NotNull final RequestError error)",
      "info" : "MethodDeclaration[31172-31388]:MethodDeclaration[31393-31609]"
    }, {
      "left" : "public void run()",
      "right" : "public void run()",
      "info" : "MethodDeclaration[31520-31639]:MethodDeclaration[31741-31860]"
    }, {
      "left" : "public void computedFormat(final List<SourceEdit> edits, final int selectionOffset, final int selectionLength)",
      "right" : "public void computedFormat(final List<SourceEdit> edits, final int selectionOffset, final int selectionLength)",
      "info" : "MethodDeclaration[32665-32915]:MethodDeclaration[32886-33136]"
    }, {
      "left" : "public void computedEdit(final SourceFileEdit edit)",
      "right" : "public void computedEdit(final SourceFileEdit edit)",
      "info" : "MethodDeclaration[34303-34441]:MethodDeclaration[34724-34862]"
    }, {
      "left" : "public boolean analysis_reanalyze(@Nullable final List<String> roots)",
      "right" : "public boolean analysis_reanalyze(@Nullable final List<String> roots)",
      "info" : "MethodDeclaration[35304-35976]:MethodDeclaration[36020-36692]"
    }, {
      "left" : "public void run()",
      "right" : "public void run()",
      "info" : "MethodDeclaration[35713-35804]:MethodDeclaration[36429-36520]"
    }, {
      "left" : "private boolean analysis_setPriorityFiles()",
      "right" : "private boolean analysis_setPriorityFiles()",
      "info" : "MethodDeclaration[35980-36675]:MethodDeclaration[36696-37391]"
    }, {
      "left" : "public void run()",
      "right" : "public void run()",
      "info" : "MethodDeclaration[36360-36467]:MethodDeclaration[37076-37183]"
    }, {
      "left" : "private boolean analysis_setSubscriptions()",
      "right" : "private boolean analysis_setSubscriptions()",
      "info" : "MethodDeclaration[36679-37563]:MethodDeclaration[37395-38279]"
    }, {
      "left" : "public void run()",
      "right" : "public void run()",
      "info" : "MethodDeclaration[37273-37379]:MethodDeclaration[37989-38095]"
    }, {
      "left" : "private void startServer(@NotNull final DartSdk sdk)",
      "right" : "private void startServer(@NotNull final DartSdk sdk)",
      "info" : "MethodDeclaration[37567-40171]:MethodDeclaration[38283-40887]"
    }, {
      "left" : "public void println(String str)",
      "right" : "public void println(String str)",
      "info" : "MethodDeclaration[38307-38423]:MethodDeclaration[39023-39139]"
    }, {
      "left" : "public void run()",
      "right" : "public void run()",
      "info" : "MethodDeclaration[39596-39755]:MethodDeclaration[40312-40471]"
    }, {
      "left" : "public boolean serverReadyForRequest(@NotNull final Project project, @NotNull final DartSdk sdk)",
      "right" : "public boolean serverReadyForRequest(@NotNull final Project project, @NotNull final DartSdk sdk)",
      "info" : "MethodDeclaration[40175-40701]:MethodDeclaration[40891-41417]"
    }, {
      "left" : "private void stopServer()",
      "right" : "private void stopServer()",
      "info" : "MethodDeclaration[40705-41335]:MethodDeclaration[41421-42051]"
    }, {
      "left" : "public void run()",
      "right" : "public void run()",
      "info" : "MethodDeclaration[41030-41119]:MethodDeclaration[41746-41835]"
    }, {
      "left" : "private void onServerStopped()",
      "right" : "private void onServerStopped()",
      "info" : "MethodDeclaration[41339-41989]:MethodDeclaration[42055-42705]"
    }, {
      "left" : "public void run()",
      "right" : "public void run()",
      "info" : "MethodDeclaration[41678-41938]:MethodDeclaration[42394-42654]"
    }, {
      "left" : "private void stopShowingServerProgress()",
      "right" : "private void stopShowingServerProgress()",
      "info" : "MethodDeclaration[41993-42191]:MethodDeclaration[42709-42907]"
    }, {
      "left" : "private static boolean runInPooledThreadAndWait(@NotNull final Runnable runnable,\n                                                  @NotNull final String runnableInfo,\n                                                  final long timeout)",
      "right" : "private static boolean runInPooledThreadAndWait(@NotNull final Runnable runnable,\n                                                  @NotNull final String runnableInfo,\n                                                  final long timeout)",
      "info" : "MethodDeclaration[43067-44091]:MethodDeclaration[43757-44781]"
    }, {
      "left" : "public void run()",
      "right" : "public void run()",
      "info" : "MethodDeclaration[43541-43737]:MethodDeclaration[44231-44427]"
    }, {
      "left" : "private void updateInformationFromServer(DocumentEvent e)",
      "right" : "private void updateInformationFromServer(DocumentEvent e)",
      "info" : "MethodDeclaration[44095-45242]:MethodDeclaration[44785-45932]"
    }, {
      "left" : "CompletionInfo",
      "right" : "CompletionInfo",
      "info" : "TypeDeclaration[45246-46004]:TypeDeclaration[45936-46694]"
    }, {
      "left" : "@NotNull final String myCompletionId;",
      "right" : "@NotNull final String myCompletionId;",
      "info" : "FieldDeclaration[45288-45325]:FieldDeclaration[45978-46015]"
    }, {
      "left" : "final int myReplacementOffset;",
      "right" : "final int myReplacementOffset;",
      "info" : "FieldDeclaration[45330-45360]:FieldDeclaration[46020-46050]"
    }, {
      "left" : "final int myReplacementLength;",
      "right" : "final int myReplacementLength;",
      "info" : "FieldDeclaration[45365-45395]:FieldDeclaration[46055-46085]"
    }, {
      "left" : "@NotNull final List<CompletionSuggestion> myCompletions;",
      "right" : "@NotNull final List<CompletionSuggestion> myCompletions;",
      "info" : "FieldDeclaration[45400-45456]:FieldDeclaration[46090-46146]"
    }, {
      "left" : "final boolean isLast;",
      "right" : "final boolean isLast;",
      "info" : "FieldDeclaration[45461-45482]:FieldDeclaration[46151-46172]"
    }, {
      "left" : "public CompletionInfo(@NotNull final String completionId,\n                          final int replacementOffset,\n                          final int replacementLength,\n                          @NotNull final List<CompletionSuggestion> completions,\n                          boolean isLast)",
      "right" : "public CompletionInfo(@NotNull final String completionId,\n                          final int replacementOffset,\n                          final int replacementLength,\n                          @NotNull final List<CompletionSuggestion> completions,\n                          boolean isLast)",
      "info" : "MethodDeclaration[45488-46000]:MethodDeclaration[46178-46690]"
    }, {
      "left" : "PluginHighlightRegion",
      "right" : "PluginHighlightRegion",
      "info" : "TypeDeclaration[46008-46560]:TypeDeclaration[46698-47250]"
    }, {
      "left" : "public static final List<PluginHighlightRegion> EMPTY_LIST = Lists.newArrayList();",
      "right" : "public static final List<PluginHighlightRegion> EMPTY_LIST = Lists.newArrayList();",
      "info" : "FieldDeclaration[46056-46138]:FieldDeclaration[46746-46828]"
    }, {
      "left" : "private int offset;",
      "right" : "private int offset;",
      "info" : "FieldDeclaration[46144-46163]:FieldDeclaration[46834-46853]"
    }, {
      "left" : "private int length;",
      "right" : "private int length;",
      "info" : "FieldDeclaration[46168-46187]:FieldDeclaration[46858-46877]"
    }, {
      "left" : "private final String type;",
      "right" : "private final String type;",
      "info" : "FieldDeclaration[46192-46218]:FieldDeclaration[46882-46908]"
    }, {
      "left" : "private PluginHighlightRegion(HighlightRegion region)",
      "right" : "private PluginHighlightRegion(HighlightRegion region)",
      "info" : "MethodDeclaration[46224-46386]:MethodDeclaration[46914-47076]"
    }, {
      "left" : "public int getOffset()",
      "right" : "public int getOffset()",
      "info" : "MethodDeclaration[46392-46443]:MethodDeclaration[47082-47133]"
    }, {
      "left" : "public int getLength()",
      "right" : "public int getLength()",
      "info" : "MethodDeclaration[46449-46500]:MethodDeclaration[47139-47190]"
    }, {
      "left" : "public String getType()",
      "right" : "public String getType()",
      "info" : "MethodDeclaration[46506-46556]:MethodDeclaration[47196-47246]"
    }, {
      "left" : "PluginNavigationRegion",
      "right" : "PluginNavigationRegion",
      "info" : "TypeDeclaration[46565-47297]:TypeDeclaration[47255-47987]"
    }, {
      "left" : "public static final List<PluginNavigationRegion> EMPTY_LIST = Lists.newArrayList();",
      "right" : "public static final List<PluginNavigationRegion> EMPTY_LIST = Lists.newArrayList();",
      "info" : "FieldDeclaration[46614-46697]:FieldDeclaration[47304-47387]"
    }, {
      "left" : "private int offset;",
      "right" : "private int offset;",
      "info" : "FieldDeclaration[46703-46722]:FieldDeclaration[47393-47412]"
    }, {
      "left" : "private int length;",
      "right" : "private int length;",
      "info" : "FieldDeclaration[46727-46746]:FieldDeclaration[47417-47436]"
    }, {
      "left" : "private final List<PluginNavigationTarget> targets = Lists.newArrayList();",
      "right" : "private final List<PluginNavigationTarget> targets = Lists.newArrayList();",
      "info" : "FieldDeclaration[46751-46825]:FieldDeclaration[47441-47515]"
    }, {
      "left" : "private PluginNavigationRegion(NavigationRegion region)",
      "right" : "private PluginNavigationRegion(NavigationRegion region)",
      "info" : "MethodDeclaration[46831-47095]:MethodDeclaration[47521-47785]"
    }, {
      "left" : "public int getOffset()",
      "right" : "public int getOffset()",
      "info" : "MethodDeclaration[47101-47152]:MethodDeclaration[47791-47842]"
    }, {
      "left" : "public int getLength()",
      "right" : "public int getLength()",
      "info" : "MethodDeclaration[47158-47209]:MethodDeclaration[47848-47899]"
    }, {
      "left" : "public List<PluginNavigationTarget> getTargets()",
      "right" : "public List<PluginNavigationTarget> getTargets()",
      "info" : "MethodDeclaration[47215-47293]:MethodDeclaration[47905-47983]"
    }, {
      "left" : "PluginNavigationTarget",
      "right" : "PluginNavigationTarget",
      "info" : "TypeDeclaration[47301-47686]:TypeDeclaration[47991-48376]"
    }, {
      "left" : "private final String file;",
      "right" : "private final String file;",
      "info" : "FieldDeclaration[47350-47376]:FieldDeclaration[48040-48066]"
    }, {
      "left" : "private int offset;",
      "right" : "private int offset;",
      "info" : "FieldDeclaration[47381-47400]:FieldDeclaration[48071-48090]"
    }, {
      "left" : "private PluginNavigationTarget(NavigationTarget target)",
      "right" : "private PluginNavigationTarget(NavigationTarget target)",
      "info" : "MethodDeclaration[47406-47569]:MethodDeclaration[48096-48259]"
    }, {
      "left" : "public String getFile()",
      "right" : "public String getFile()",
      "info" : "MethodDeclaration[47575-47625]:MethodDeclaration[48265-48315]"
    }, {
      "left" : "public int getOffset()",
      "right" : "public int getOffset()",
      "info" : "MethodDeclaration[47631-47682]:MethodDeclaration[48321-48372]"
    }, {
      "left" : "SearchResultsSet",
      "right" : "SearchResultsSet",
      "info" : "TypeDeclaration[47690-48073]:TypeDeclaration[48380-48763]"
    }, {
      "left" : "@NotNull final String id;",
      "right" : "@NotNull final String id;",
      "info" : "FieldDeclaration[47783-47808]:FieldDeclaration[48473-48498]"
    }, {
      "left" : "@NotNull final List<SearchResult> results;",
      "right" : "@NotNull final List<SearchResult> results;",
      "info" : "FieldDeclaration[47813-47855]:FieldDeclaration[48503-48545]"
    }, {
      "left" : "final boolean isLast;",
      "right" : "final boolean isLast;",
      "info" : "FieldDeclaration[47860-47881]:FieldDeclaration[48550-48571]"
    }, {
      "left" : "public SearchResultsSet(@NotNull String id, @NotNull List<SearchResult> results, boolean isLast)",
      "right" : "public SearchResultsSet(@NotNull String id, @NotNull List<SearchResult> results, boolean isLast)",
      "info" : "MethodDeclaration[47887-48069]:MethodDeclaration[48577-48759]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5609-5694]:Block[5609-5694]"
    }, {
      "left" : "updateProblemsView(DartProblemsViewImpl.createGroupName(file), errors);",
      "right" : "updateProblemsView(DartProblemsViewImpl.createGroupName(file), errors);",
      "info" : "ExpressionStatement[5617-5688]:ExpressionStatement[5617-5688]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5789-6585]:Block[5789-6585]"
    }, {
      "left" : "if (DartResolver.isServerDrivenResolution())",
      "right" : "if (DartResolver.isServerDrivenResolution())",
      "info" : "IfStatement[5797-6579]:IfStatement[5797-6579]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5842-6579]:Block[5842-6579]"
    }, {
      "left" : "file = FileUtil.toSystemIndependentName(file);",
      "right" : "file = FileUtil.toSystemIndependentName(file);",
      "info" : "ExpressionStatement[5852-5898]:ExpressionStatement[5852-5898]"
    }, {
      "left" : "if (myFilePathsWithUnsentChanges.contains(file))",
      "right" : "if (myFilePathsWithUnsentChanges.contains(file))",
      "info" : "IfStatement[6013-6091]:IfStatement[6013-6091]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6062-6091]:Block[6062-6091]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[6074-6081]:ReturnStatement[6074-6081]"
    }, {
      "left" : "List<PluginHighlightRegion> pluginRegions = Lists.newArrayList();",
      "right" : "List<PluginHighlightRegion> pluginRegions = Lists.newArrayList();",
      "info" : "VariableDeclarationStatement[6169-6234]:VariableDeclarationStatement[6169-6234]"
    }, {
      "left" : "for (HighlightRegion region : regions)",
      "right" : "for (HighlightRegion region : regions)",
      "info" : "EnhancedForStatement[6243-6357]:EnhancedForStatement[6243-6357]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6282-6357]:Block[6282-6357]"
    }, {
      "left" : "pluginRegions.add(new PluginHighlightRegion(region));",
      "right" : "pluginRegions.add(new PluginHighlightRegion(region));",
      "info" : "ExpressionStatement[6294-6347]:ExpressionStatement[6294-6347]"
    }, {
      "left" : "synchronized (myHighlightData) {\n          myHighlightData.put(file, pluginRegions);\n        }",
      "right" : "synchronized (myHighlightData) {\n          myHighlightData.put(file, pluginRegions);\n        }",
      "info" : "SynchronizedStatement[6407-6501]:SynchronizedStatement[6407-6501]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6438-6501]:Block[6438-6501]"
    }, {
      "left" : "myHighlightData.put(file, pluginRegions);",
      "right" : "myHighlightData.put(file, pluginRegions);",
      "info" : "ExpressionStatement[6450-6491]:ExpressionStatement[6450-6491]"
    }, {
      "left" : "forceFileAnnotation(file);",
      "right" : "forceFileAnnotation(file);",
      "info" : "ExpressionStatement[6545-6571]:ExpressionStatement[6545-6571]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6681-7518]:Block[6681-7518]"
    }, {
      "left" : "if (DartResolver.isServerDrivenResolution())",
      "right" : "if (DartResolver.isServerDrivenResolution())",
      "info" : "IfStatement[6689-7512]:IfStatement[6689-7512]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6734-7512]:Block[6734-7512]"
    }, {
      "left" : "file = FileUtil.toSystemIndependentName(file);",
      "right" : "file = FileUtil.toSystemIndependentName(file);",
      "info" : "ExpressionStatement[6744-6790]:ExpressionStatement[6744-6790]"
    }, {
      "left" : "if (myFilePathsWithUnsentChanges.contains(file))",
      "right" : "if (myFilePathsWithUnsentChanges.contains(file))",
      "info" : "IfStatement[6905-6983]:IfStatement[6905-6983]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6954-6983]:Block[6954-6983]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[6966-6973]:ReturnStatement[6966-6973]"
    }, {
      "left" : "List<PluginNavigationRegion> pluginRegions = new ArrayList<PluginNavigationRegion>(regions.size());",
      "right" : "List<PluginNavigationRegion> pluginRegions = new ArrayList<PluginNavigationRegion>(regions.size());",
      "info" : "VariableDeclarationStatement[7063-7162]:VariableDeclarationStatement[7063-7162]"
    }, {
      "left" : "for (NavigationRegion region : regions)",
      "right" : "for (NavigationRegion region : regions)",
      "info" : "EnhancedForStatement[7171-7287]:EnhancedForStatement[7171-7287]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7211-7287]:Block[7211-7287]"
    }, {
      "left" : "pluginRegions.add(new PluginNavigationRegion(region));",
      "right" : "pluginRegions.add(new PluginNavigationRegion(region));",
      "info" : "ExpressionStatement[7223-7277]:ExpressionStatement[7223-7277]"
    }, {
      "left" : "synchronized (myNavigationData) {\n          myNavigationData.put(file, pluginRegions);\n        }",
      "right" : "synchronized (myNavigationData) {\n          myNavigationData.put(file, pluginRegions);\n        }",
      "info" : "SynchronizedStatement[7338-7434]:SynchronizedStatement[7338-7434]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7370-7434]:Block[7370-7434]"
    }, {
      "left" : "myNavigationData.put(file, pluginRegions);",
      "right" : "myNavigationData.put(file, pluginRegions);",
      "info" : "ExpressionStatement[7382-7424]:ExpressionStatement[7382-7424]"
    }, {
      "left" : "forceFileAnnotation(file);",
      "right" : "forceFileAnnotation(file);",
      "info" : "ExpressionStatement[7478-7504]:ExpressionStatement[7478-7504]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7585-7732]:Block[7585-7732]"
    }, {
      "left" : "for (String file : files)",
      "right" : "for (String file : files)",
      "info" : "EnhancedForStatement[7593-7726]:EnhancedForStatement[7593-7726]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7619-7726]:Block[7619-7726]"
    }, {
      "left" : "updateProblemsView(DartProblemsViewImpl.createGroupName(file), AnalysisError.EMPTY_LIST);",
      "right" : "updateProblemsView(DartProblemsViewImpl.createGroupName(file), AnalysisError.EMPTY_LIST);",
      "info" : "ExpressionStatement[7629-7718]:ExpressionStatement[7629-7718]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8094-8313]:Block[8094-8313]"
    }, {
      "left" : "synchronized (myCompletionInfos) {\n        myCompletionInfos.add(new CompletionInfo(completionId, replacementOffset, replacementLength, completions, isLast));\n        myCompletionInfos.notifyAll();\n      }",
      "right" : "synchronized (myCompletionInfos) {\n        myCompletionInfos.add(new CompletionInfo(completionId, replacementOffset, replacementLength, completions, isLast));\n        myCompletionInfos.notifyAll();\n      }",
      "info" : "SynchronizedStatement[8102-8307]:SynchronizedStatement[8102-8307]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8135-8307]:Block[8135-8307]"
    }, {
      "left" : "myCompletionInfos.add(new CompletionInfo(completionId, replacementOffset, replacementLength, completions, isLast));",
      "right" : "myCompletionInfos.add(new CompletionInfo(completionId, replacementOffset, replacementLength, completions, isLast));",
      "info" : "ExpressionStatement[8145-8260]:ExpressionStatement[8145-8260]"
    }, {
      "left" : "myCompletionInfos.notifyAll();",
      "right" : "myCompletionInfos.notifyAll();",
      "info" : "ExpressionStatement[8269-8299]:ExpressionStatement[8269-8299]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8426-8602]:Block[8426-8602]"
    }, {
      "left" : "synchronized (mySearchResultSets) {\n        mySearchResultSets.add(new SearchResultsSet(searchId, results, last));\n        mySearchResultSets.notifyAll();\n      }",
      "right" : "synchronized (mySearchResultSets) {\n        mySearchResultSets.add(new SearchResultsSet(searchId, results, last));\n        mySearchResultSets.notifyAll();\n      }",
      "info" : "SynchronizedStatement[8434-8596]:SynchronizedStatement[8434-8596]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8468-8596]:Block[8468-8596]"
    }, {
      "left" : "mySearchResultSets.add(new SearchResultsSet(searchId, results, last));",
      "right" : "mySearchResultSets.add(new SearchResultsSet(searchId, results, last));",
      "info" : "ExpressionStatement[8478-8548]:ExpressionStatement[8478-8548]"
    }, {
      "left" : "mySearchResultSets.notifyAll();",
      "right" : "mySearchResultSets.notifyAll();",
      "info" : "ExpressionStatement[8557-8588]:ExpressionStatement[8557-8588]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8676-8739]:Block[8676-8739]"
    }, {
      "left" : "myServerVersion = version != null ? version : \"\";",
      "right" : "myServerVersion = version != null ? version : \"\";",
      "info" : "ExpressionStatement[8684-8733]:ExpressionStatement[8684-8733]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8855-9260]:Block[8855-9260]"
    }, {
      "left" : "if (message == null)",
      "right" : "if (message == null)",
      "info" : "IfStatement[8863-8915]:IfStatement[8863-8915]"
    }, {
      "left" : "message = \"<no error message>\";",
      "right" : "message = \"<no error message>\";",
      "info" : "ExpressionStatement[8884-8915]:ExpressionStatement[8884-8915]"
    }, {
      "left" : "if (stackTrace == null)",
      "right" : "if (stackTrace == null)",
      "info" : "IfStatement[8922-8978]:IfStatement[8922-8978]"
    }, {
      "left" : "stackTrace = \"<no stack trace>\";",
      "right" : "stackTrace = \"<no stack trace>\";",
      "info" : "ExpressionStatement[8946-8978]:ExpressionStatement[8946-8978]"
    }, {
      "left" : "LOG.error(\"Dart analysis server, SDK version \" + mySdkVersion +\n                \", server version \" + myServerVersion +\n                \", \" + (isFatal ? \"FATAL \" : \"\") + \"error: \" + message + \"\\n\" + stackTrace);",
      "right" : "LOG.error(\"Dart analysis server, SDK version \" + mySdkVersion +\n                \", server version \" + myServerVersion +\n                \", \" + (isFatal ? \"FATAL \" : \"\") + \"error: \" + message + \"\\n\" + stackTrace);",
      "info" : "ExpressionStatement[8985-9197]:ExpressionStatement[8985-9197]"
    }, {
      "left" : "if (isFatal)",
      "right" : "if (isFatal)",
      "info" : "IfStatement[9205-9254]:IfStatement[9205-9254]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9218-9254]:Block[9218-9254]"
    }, {
      "left" : "onServerStopped();",
      "right" : "onServerStopped();",
      "info" : "ExpressionStatement[9228-9246]:ExpressionStatement[9228-9246]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9389-11161]:Block[9389-11161]"
    }, {
      "left" : "if (analysisStatus != null && analysisStatus.isAnalyzing() || pubStatus != null && pubStatus.isListingPackageDirs())",
      "right" : "if (analysisStatus != null && analysisStatus.isAnalyzing() || pubStatus != null && pubStatus.isListingPackageDirs())",
      "info" : "IfStatement[9397-11155]:IfStatement[9397-11155]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9514-11097]:Block[9514-11097]"
    }, {
      "left" : "if (myServerBusy.compareAndSet(false, true))",
      "right" : "if (myServerBusy.compareAndSet(false, true))",
      "info" : "IfStatement[9524-11089]:IfStatement[9524-11089]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9569-11089]:Block[9569-11089]"
    }, {
      "left" : "for (final Project project : myRootsHandler.getTrackedProjects())",
      "right" : "for (final Project project : myRootsHandler.getTrackedProjects())",
      "info" : "EnhancedForStatement[9581-11079]:EnhancedForStatement[9581-11079]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9647-11079]:Block[9647-11079]"
    }, {
      "left" : "final Runnable delayedRunnable = new Runnable() {\n              public void run() {\n                if (project.isDisposed() || !myServerBusy.get()) return;\n\n                final Task.Backgroundable task =\n                  new Task.Backgroundable(project, DartBundle.message(\"dart.analysis.progress.title\"), false) {\n                    @Override\n                    public void run(@NotNull ProgressIndicator indicator) {\n                      if (myServerBusy.get()) {\n                        try {\n                          synchronized (myServerBusy) {\n                            //noinspection WaitNotInLoop\n                            myServerBusy.wait();\n                          }\n                        }\n                        catch (InterruptedException e) {/* unlucky */}\n                      }\n                    }\n                  };\n\n                ProgressManager.getInstance().run(task);\n              }\n            };",
      "right" : "final Runnable delayedRunnable = new Runnable() {\n              public void run() {\n                if (project.isDisposed() || !myServerBusy.get()) return;\n\n                final Task.Backgroundable task =\n                  new Task.Backgroundable(project, DartBundle.message(\"dart.analysis.progress.title\"), false) {\n                    @Override\n                    public void run(@NotNull ProgressIndicator indicator) {\n                      if (myServerBusy.get()) {\n                        try {\n                          synchronized (myServerBusy) {\n                            //noinspection WaitNotInLoop\n                            myServerBusy.wait();\n                          }\n                        }\n                        catch (InterruptedException e) {/* unlucky */}\n                      }\n                    }\n                  };\n\n                ProgressManager.getInstance().run(task);\n              }\n            };",
      "info" : "VariableDeclarationStatement[9661-10606]:VariableDeclarationStatement[9661-10606]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9743-10591]:Block[9743-10591]"
    }, {
      "left" : "if (project.isDisposed() || !myServerBusy.get())",
      "right" : "if (project.isDisposed() || !myServerBusy.get())",
      "info" : "IfStatement[9761-9817]:IfStatement[9761-9817]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[9810-9817]:ReturnStatement[9810-9817]"
    }, {
      "left" : "final Task.Backgroundable task =\n                  new Task.Backgroundable(project, DartBundle.message(\"dart.analysis.progress.title\"), false) {\n                    @Override\n                    public void run(@NotNull ProgressIndicator indicator) {\n                      if (myServerBusy.get()) {\n                        try {\n                          synchronized (myServerBusy) {\n                            //noinspection WaitNotInLoop\n                            myServerBusy.wait();\n                          }\n                        }\n                        catch (InterruptedException e) {/* unlucky */}\n                      }\n                    }\n                  };",
      "right" : "final Task.Backgroundable task =\n                  new Task.Backgroundable(project, DartBundle.message(\"dart.analysis.progress.title\"), false) {\n                    @Override\n                    public void run(@NotNull ProgressIndicator indicator) {\n                      if (myServerBusy.get()) {\n                        try {\n                          synchronized (myServerBusy) {\n                            //noinspection WaitNotInLoop\n                            myServerBusy.wait();\n                          }\n                        }\n                        catch (InterruptedException e) {/* unlucky */}\n                      }\n                    }\n                  };",
      "info" : "VariableDeclarationStatement[9835-10517]:VariableDeclarationStatement[9835-10517]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10084-10496]:Block[10084-10496]"
    }, {
      "left" : "if (myServerBusy.get())",
      "right" : "if (myServerBusy.get())",
      "info" : "IfStatement[10108-10474]:IfStatement[10108-10474]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10132-10474]:Block[10132-10474]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[10158-10450]:TryStatement[10158-10450]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10162-10379]:Block[10162-10379]"
    }, {
      "left" : "synchronized (myServerBusy) {\n                            //noinspection WaitNotInLoop\n                            myServerBusy.wait();\n                          }",
      "right" : "synchronized (myServerBusy) {\n                            //noinspection WaitNotInLoop\n                            myServerBusy.wait();\n                          }",
      "info" : "SynchronizedStatement[10190-10353]:SynchronizedStatement[10190-10353]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10218-10353]:Block[10218-10353]"
    }, {
      "left" : "myServerBusy.wait();",
      "right" : "myServerBusy.wait();",
      "info" : "ExpressionStatement[10305-10325]:ExpressionStatement[10305-10325]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10435-10450]:Block[10435-10450]"
    }, {
      "left" : "ProgressManager.getInstance().run(task);",
      "right" : "ProgressManager.getInstance().run(task);",
      "info" : "ExpressionStatement[10535-10575]:ExpressionStatement[10535-10575]"
    }, {
      "left" : "final int delay = pubStatus != null && pubStatus.isListingPackageDirs() ? 50 : 300;",
      "right" : "final int delay = pubStatus != null && pubStatus.isListingPackageDirs() ? 50 : 300;",
      "info" : "VariableDeclarationStatement[10889-10972]:VariableDeclarationStatement[10889-10972]"
    }, {
      "left" : "myShowServerProgressAlarm.addRequest(delayedRunnable, delay, ModalityState.any());",
      "right" : "myShowServerProgressAlarm.addRequest(delayedRunnable, delay, ModalityState.any());",
      "info" : "ExpressionStatement[10985-11067]:ExpressionStatement[10985-11067]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11109-11155]:Block[11109-11155]"
    }, {
      "left" : "stopShowingServerProgress();",
      "right" : "stopShowingServerProgress();",
      "info" : "ExpressionStatement[11119-11147]:ExpressionStatement[11119-11147]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11247-11337]:Block[11247-11337]"
    }, {
      "left" : "return StringUtil.compareVersionNumbers(sdk.getVersion(), MIN_SDK_VERSION) >= 0;",
      "right" : "return StringUtil.compareVersionNumbers(sdk.getVersion(), MIN_SDK_VERSION) >= 0;",
      "info" : "ReturnStatement[11253-11333]:ReturnStatement[11253-11333]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11387-11758]:Block[11387-11758]"
    }, {
      "left" : "final VirtualFile virtualFile = LocalFileSystem.getInstance().findFileByPath(file);",
      "right" : "final VirtualFile virtualFile = LocalFileSystem.getInstance().findFileByPath(file);",
      "info" : "VariableDeclarationStatement[11393-11476]:VariableDeclarationStatement[11393-11476]"
    }, {
      "left" : "if (virtualFile != null)",
      "right" : "if (virtualFile != null)",
      "info" : "IfStatement[11481-11754]:IfStatement[11481-11754]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11506-11754]:Block[11506-11754]"
    }, {
      "left" : "Set<Project> projects = myRootsHandler.getTrackedProjects();",
      "right" : "Set<Project> projects = myRootsHandler.getTrackedProjects();",
      "info" : "VariableDeclarationStatement[11514-11574]:VariableDeclarationStatement[11514-11574]"
    }, {
      "left" : "for (final Project project : projects)",
      "right" : "for (final Project project : projects)",
      "info" : "EnhancedForStatement[11581-11748]:EnhancedForStatement[11581-11748]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11620-11748]:Block[11620-11748]"
    }, {
      "left" : "ResolveCache.getInstance(project).clearCache(true);",
      "right" : "ResolveCache.getInstance(project).clearCache(true);",
      "info" : "ExpressionStatement[11630-11681]:ExpressionStatement[11630-11681]"
    }, {
      "left" : "DaemonCodeAnalyzer.getInstance(project).restart();",
      "right" : "DaemonCodeAnalyzer.getInstance(project).restart();",
      "info" : "ExpressionStatement[11690-11740]:ExpressionStatement[11690-11740]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11881-12556]:Block[11881-12556]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[11887-12552]:WhileStatement[11887-12552]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11900-12552]:Block[11900-12552]"
    }, {
      "left" : "ProgressManager.checkCanceled();",
      "right" : "ProgressManager.checkCanceled();",
      "info" : "ExpressionStatement[11908-11940]:ExpressionStatement[11908-11940]"
    }, {
      "left" : "synchronized (myCompletionInfos) {\n        CompletionInfo completionInfo;\n        while ((completionInfo = myCompletionInfos.poll()) != null) {\n          if (!completionInfo.myCompletionId.equals(completionId)) continue;\n          if (!completionInfo.isLast) continue;\n\n          for (final CompletionSuggestion completion : completionInfo.myCompletions) {\n            consumer.consume(completion);\n          }\n          return;\n        }\n\n        try {\n          myCompletionInfos.wait(CHECK_CANCELLED_PERIOD);\n        }\n        catch (InterruptedException e) {\n          return;\n        }\n      }",
      "right" : "synchronized (myCompletionInfos) {\n        CompletionInfo completionInfo;\n        while ((completionInfo = myCompletionInfos.poll()) != null) {\n          if (!completionInfo.myCompletionId.equals(completionId)) continue;\n          if (!completionInfo.isLast) continue;\n\n          for (final CompletionSuggestion completion : completionInfo.myCompletions) {\n            consumer.consume(completion);\n          }\n          return;\n        }\n\n        try {\n          myCompletionInfos.wait(CHECK_CANCELLED_PERIOD);\n        }\n        catch (InterruptedException e) {\n          return;\n        }\n      }",
      "info" : "SynchronizedStatement[11948-12546]:SynchronizedStatement[11948-12546]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11981-12546]:Block[11981-12546]"
    }, {
      "left" : "CompletionInfo completionInfo;",
      "right" : "CompletionInfo completionInfo;",
      "info" : "VariableDeclarationStatement[11991-12021]:VariableDeclarationStatement[11991-12021]"
    }, {
      "left" : "while ((completionInfo = myCompletionInfos.poll()) != null)",
      "right" : "while ((completionInfo = myCompletionInfos.poll()) != null)",
      "info" : "WhileStatement[12030-12386]:WhileStatement[12030-12386]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12090-12386]:Block[12090-12386]"
    }, {
      "left" : "if (!completionInfo.myCompletionId.equals(completionId))",
      "right" : "if (!completionInfo.myCompletionId.equals(completionId))",
      "info" : "IfStatement[12102-12168]:IfStatement[12102-12168]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[12159-12168]:ContinueStatement[12159-12168]"
    }, {
      "left" : "if (!completionInfo.isLast)",
      "right" : "if (!completionInfo.isLast)",
      "info" : "IfStatement[12179-12216]:IfStatement[12179-12216]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[12207-12216]:ContinueStatement[12207-12216]"
    }, {
      "left" : "for (final CompletionSuggestion completion : completionInfo.myCompletions)",
      "right" : "for (final CompletionSuggestion completion : completionInfo.myCompletions)",
      "info" : "EnhancedForStatement[12228-12358]:EnhancedForStatement[12228-12358]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12303-12358]:Block[12303-12358]"
    }, {
      "left" : "consumer.consume(completion);",
      "right" : "consumer.consume(completion);",
      "info" : "ExpressionStatement[12317-12346]:ExpressionStatement[12317-12346]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[12369-12376]:ReturnStatement[12369-12376]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[12396-12538]:TryStatement[12396-12538]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12400-12469]:Block[12400-12469]"
    }, {
      "left" : "myCompletionInfos.wait(CHECK_CANCELLED_PERIOD);",
      "right" : "myCompletionInfos.wait(CHECK_CANCELLED_PERIOD);",
      "info" : "ExpressionStatement[12412-12459]:ExpressionStatement[12412-12459]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12509-12538]:Block[12509-12538]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[12521-12528]:ReturnStatement[12521-12528]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12832-12930]:Block[12832-12930]"
    }, {
      "left" : "myEdits = edits;",
      "right" : "myEdits = edits;",
      "info" : "ExpressionStatement[12840-12856]:ExpressionStatement[12840-12856]"
    }, {
      "left" : "myOffset = selectionOffset;",
      "right" : "myOffset = selectionOffset;",
      "info" : "ExpressionStatement[12863-12890]:ExpressionStatement[12863-12890]"
    }, {
      "left" : "myLength = selectionLength;",
      "right" : "myLength = selectionLength;",
      "info" : "ExpressionStatement[12897-12924]:ExpressionStatement[12897-12924]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12959-12989]:Block[12959-12989]"
    }, {
      "left" : "return myLength;",
      "right" : "return myLength;",
      "info" : "ReturnStatement[12967-12983]:ReturnStatement[12967-12983]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13018-13048]:Block[13018-13048]"
    }, {
      "left" : "return myOffset;",
      "right" : "return myOffset;",
      "info" : "ReturnStatement[13026-13042]:ReturnStatement[13026-13042]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13103-13132]:Block[13103-13132]"
    }, {
      "left" : "return myEdits;",
      "right" : "return myEdits;",
      "info" : "ReturnStatement[13111-13126]:ReturnStatement[13111-13126]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13478-13555]:Block[13478-13555]"
    }, {
      "left" : "this.libraries = libraries;",
      "right" : "this.libraries = libraries;",
      "info" : "ExpressionStatement[13486-13513]:ExpressionStatement[13486-13513]"
    }, {
      "left" : "this.packageMap = packageMap;",
      "right" : "this.packageMap = packageMap;",
      "info" : "ExpressionStatement[13520-13549]:ExpressionStatement[13520-13549]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13606-13637]:Block[13606-13637]"
    }, {
      "left" : "return libraries;",
      "right" : "return libraries;",
      "info" : "ReturnStatement[13614-13631]:ReturnStatement[13614-13631]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13719-13751]:Block[13719-13751]"
    }, {
      "left" : "return packageMap;",
      "right" : "return packageMap;",
      "info" : "ReturnStatement[13727-13745]:ReturnStatement[13727-13745]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13794-15799]:Block[13794-15799]"
    }, {
      "left" : "Disposer.register(ApplicationManager.getApplication(), new Disposable() {\n      public void dispose() {\n        stopServer();\n      }\n    });",
      "right" : "Disposer.register(ApplicationManager.getApplication(), new Disposable() {\n      public void dispose() {\n        stopServer();\n      }\n    });",
      "info" : "ExpressionStatement[13800-13941]:ExpressionStatement[13800-13941]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13902-13933]:Block[13902-13933]"
    }, {
      "left" : "stopServer();",
      "right" : "stopServer();",
      "info" : "ExpressionStatement[13912-13925]:ExpressionStatement[13912-13925]"
    }, {
      "left" : "Logging.setLogger(new com.google.dart.server.utilities.logging.Logger() {\n      @Override\n      public void logError(String message) {\n        LOG.error(message);\n      }\n\n      @Override\n      public void logError(String message, Throwable exception) {\n        LOG.error(message, exception);\n      }\n\n      @Override\n      public void logInformation(String message) {\n        LOG.debug(message);\n      }\n\n      @Override\n      public void logInformation(String message, Throwable exception) {\n        LOG.debug(message, exception);\n      }\n    });",
      "right" : "Logging.setLogger(new com.google.dart.server.utilities.logging.Logger() {\n      @Override\n      public void logError(String message) {\n        LOG.error(message);\n      }\n\n      @Override\n      public void logError(String message, Throwable exception) {\n        LOG.error(message, exception);\n      }\n\n      @Override\n      public void logInformation(String message) {\n        LOG.debug(message);\n      }\n\n      @Override\n      public void logInformation(String message, Throwable exception) {\n        LOG.debug(message, exception);\n      }\n    });",
      "info" : "ExpressionStatement[13947-14495]:ExpressionStatement[13947-14495]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14080-14117]:Block[14080-14117]"
    }, {
      "left" : "LOG.error(message);",
      "right" : "LOG.error(message);",
      "info" : "ExpressionStatement[14090-14109]:ExpressionStatement[14090-14109]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14199-14247]:Block[14199-14247]"
    }, {
      "left" : "LOG.error(message, exception);",
      "right" : "LOG.error(message, exception);",
      "info" : "ExpressionStatement[14209-14239]:ExpressionStatement[14209-14239]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14314-14351]:Block[14314-14351]"
    }, {
      "left" : "LOG.debug(message);",
      "right" : "LOG.debug(message);",
      "info" : "ExpressionStatement[14324-14343]:ExpressionStatement[14324-14343]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14439-14487]:Block[14439-14487]"
    }, {
      "left" : "LOG.debug(message, exception);",
      "right" : "LOG.debug(message, exception);",
      "info" : "ExpressionStatement[14449-14479]:ExpressionStatement[14449-14479]"
    }, {
      "left" : "ApplicationManager.getApplication().getMessageBus().connect()\n      .subscribe(FileEditorManagerListener.FILE_EDITOR_MANAGER, new FileEditorManagerAdapter() {\n        @Override\n        public void fileOpened(@NotNull final FileEditorManager source, @NotNull final VirtualFile file) {\n          if (PubspecYamlUtil.PUBSPEC_YAML.equals(file.getName()) || file.getFileType() == DartFileType.INSTANCE) {\n            DartSdkUpdateChecker.mayBeCheckForSdkUpdate(source.getProject());\n          }\n\n          if (isDartOrHtmlFile(file)) {\n            updateVisibleFiles();\n          }\n        }\n\n        @Override\n        public void selectionChanged(@NotNull FileEditorManagerEvent event) {\n          if (isDartOrHtmlFile(event.getOldFile()) || isDartOrHtmlFile(event.getNewFile())) {\n            updateVisibleFiles();\n          }\n        }\n\n        @Override\n        public void fileClosed(@NotNull final FileEditorManager source, @NotNull final VirtualFile file) {\n          if (isDartOrHtmlFile(file)) {\n            updateVisibleFiles();\n          }\n        }\n      });",
      "right" : "ApplicationManager.getApplication().getMessageBus().connect()\n      .subscribe(FileEditorManagerListener.FILE_EDITOR_MANAGER, new FileEditorManagerAdapter() {\n        @Override\n        public void fileOpened(@NotNull final FileEditorManager source, @NotNull final VirtualFile file) {\n          if (PubspecYamlUtil.PUBSPEC_YAML.equals(file.getName()) || file.getFileType() == DartFileType.INSTANCE) {\n            DartSdkUpdateChecker.mayBeCheckForSdkUpdate(source.getProject());\n          }\n\n          if (isDartOrHtmlFile(file)) {\n            updateVisibleFiles();\n          }\n        }\n\n        @Override\n        public void selectionChanged(@NotNull FileEditorManagerEvent event) {\n          if (isDartOrHtmlFile(event.getOldFile()) || isDartOrHtmlFile(event.getNewFile())) {\n            updateVisibleFiles();\n          }\n        }\n\n        @Override\n        public void fileClosed(@NotNull final FileEditorManager source, @NotNull final VirtualFile file) {\n          if (isDartOrHtmlFile(file)) {\n            updateVisibleFiles();\n          }\n        }\n      });",
      "info" : "ExpressionStatement[14501-15566]:ExpressionStatement[14501-15566]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14783-15087]:Block[14783-15087]"
    }, {
      "left" : "if (PubspecYamlUtil.PUBSPEC_YAML.equals(file.getName()) || file.getFileType() == DartFileType.INSTANCE)",
      "right" : "if (PubspecYamlUtil.PUBSPEC_YAML.equals(file.getName()) || file.getFileType() == DartFileType.INSTANCE)",
      "info" : "IfStatement[14795-14990]:IfStatement[14795-14990]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14899-14990]:Block[14899-14990]"
    }, {
      "left" : "DartSdkUpdateChecker.mayBeCheckForSdkUpdate(source.getProject());",
      "right" : "DartSdkUpdateChecker.mayBeCheckForSdkUpdate(source.getProject());",
      "info" : "ExpressionStatement[14913-14978]:ExpressionStatement[14913-14978]"
    }, {
      "left" : "if (isDartOrHtmlFile(file))",
      "right" : "if (isDartOrHtmlFile(file))",
      "info" : "IfStatement[15002-15077]:IfStatement[15002-15077]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15030-15077]:Block[15030-15077]"
    }, {
      "left" : "updateVisibleFiles();",
      "right" : "updateVisibleFiles();",
      "info" : "ExpressionStatement[15044-15065]:ExpressionStatement[15044-15065]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15183-15334]:Block[15183-15334]"
    }, {
      "left" : "if (isDartOrHtmlFile(event.getOldFile()) || isDartOrHtmlFile(event.getNewFile()))",
      "right" : "if (isDartOrHtmlFile(event.getOldFile()) || isDartOrHtmlFile(event.getNewFile()))",
      "info" : "IfStatement[15195-15324]:IfStatement[15195-15324]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15277-15324]:Block[15277-15324]"
    }, {
      "left" : "updateVisibleFiles();",
      "right" : "updateVisibleFiles();",
      "info" : "ExpressionStatement[15291-15312]:ExpressionStatement[15291-15312]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15459-15556]:Block[15459-15556]"
    }, {
      "left" : "if (isDartOrHtmlFile(file))",
      "right" : "if (isDartOrHtmlFile(file))",
      "info" : "IfStatement[15471-15546]:IfStatement[15471-15546]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15499-15546]:Block[15499-15546]"
    }, {
      "left" : "updateVisibleFiles();",
      "right" : "updateVisibleFiles();",
      "info" : "ExpressionStatement[15513-15534]:ExpressionStatement[15513-15534]"
    }, {
      "left" : "EditorFactory.getInstance().getEventMulticaster().addDocumentListener(new DocumentAdapter() {\n      @Override\n      public void beforeDocumentChange(DocumentEvent e) {\n        updateInformationFromServer(e);\n      }\n    });",
      "right" : "EditorFactory.getInstance().getEventMulticaster().addDocumentListener(new DocumentAdapter() {\n      @Override\n      public void beforeDocumentChange(DocumentEvent e) {\n        updateInformationFromServer(e);\n      }\n    });",
      "info" : "ExpressionStatement[15572-15795]:ExpressionStatement[15572-15795]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15738-15787]:Block[15738-15787]"
    }, {
      "left" : "updateInformationFromServer(e);",
      "right" : "updateInformationFromServer(e);",
      "info" : "ExpressionStatement[15748-15779]:ExpressionStatement[15748-15779]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15868-15944]:Block[15868-15944]"
    }, {
      "left" : "return ServiceManager.getService(DartAnalysisServerService.class);",
      "right" : "return ServiceManager.getService(DartAnalysisServerService.class);",
      "info" : "ReturnStatement[15874-15940]:ReturnStatement[15874-15940]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16142-16379]:Block[16142-16379]"
    }, {
      "left" : "synchronized (myHighlightData) {\n      List<PluginHighlightRegion> regions = myHighlightData.get(file.getPath());\n      if (regions == null) {\n        return PluginHighlightRegion.EMPTY_LIST;\n      }\n      return regions;\n    }",
      "right" : "synchronized (myHighlightData) {\n      List<PluginHighlightRegion> regions = myHighlightData.get(file.getPath());\n      if (regions == null) {\n        return PluginHighlightRegion.EMPTY_LIST;\n      }\n      return regions;\n    }",
      "info" : "SynchronizedStatement[16148-16375]:SynchronizedStatement[16148-16375]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16179-16375]:Block[16179-16375]"
    }, {
      "left" : "List<PluginHighlightRegion> regions = myHighlightData.get(file.getPath());",
      "right" : "List<PluginHighlightRegion> regions = myHighlightData.get(file.getPath());",
      "info" : "VariableDeclarationStatement[16187-16261]:VariableDeclarationStatement[16187-16261]"
    }, {
      "left" : "if (regions == null)",
      "right" : "if (regions == null)",
      "info" : "IfStatement[16268-16347]:IfStatement[16268-16347]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16289-16347]:Block[16289-16347]"
    }, {
      "left" : "return PluginHighlightRegion.EMPTY_LIST;",
      "right" : "return PluginHighlightRegion.EMPTY_LIST;",
      "info" : "ReturnStatement[16299-16339]:ReturnStatement[16299-16339]"
    }, {
      "left" : "return regions;",
      "right" : "return regions;",
      "info" : "ReturnStatement[16354-16369]:ReturnStatement[16354-16369]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16580-16821]:Block[16580-16821]"
    }, {
      "left" : "synchronized (myNavigationData) {\n      List<PluginNavigationRegion> regions = myNavigationData.get(file.getPath());\n      if (regions == null) {\n        return PluginNavigationRegion.EMPTY_LIST;\n      }\n      return regions;\n    }",
      "right" : "synchronized (myNavigationData) {\n      List<PluginNavigationRegion> regions = myNavigationData.get(file.getPath());\n      if (regions == null) {\n        return PluginNavigationRegion.EMPTY_LIST;\n      }\n      return regions;\n    }",
      "info" : "SynchronizedStatement[16586-16817]:SynchronizedStatement[16586-16817]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16618-16817]:Block[16618-16817]"
    }, {
      "left" : "List<PluginNavigationRegion> regions = myNavigationData.get(file.getPath());",
      "right" : "List<PluginNavigationRegion> regions = myNavigationData.get(file.getPath());",
      "info" : "VariableDeclarationStatement[16626-16702]:VariableDeclarationStatement[16626-16702]"
    }, {
      "left" : "if (regions == null)",
      "right" : "if (regions == null)",
      "info" : "IfStatement[16709-16789]:IfStatement[16709-16789]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16730-16789]:Block[16730-16789]"
    }, {
      "left" : "return PluginNavigationRegion.EMPTY_LIST;",
      "right" : "return PluginNavigationRegion.EMPTY_LIST;",
      "info" : "ReturnStatement[16740-16781]:ReturnStatement[16740-16781]"
    }, {
      "left" : "return regions;",
      "right" : "return regions;",
      "info" : "ReturnStatement[16796-16811]:ReturnStatement[16796-16811]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16851-17539]:Block[16851-17539]"
    }, {
      "left" : "synchronized (myLock) {\n      final List<String> newVisibleFiles = new ArrayList<String>();\n\n      for (Project project : myRootsHandler.getTrackedProjects()) {\n        for (VirtualFile file : FileEditorManager.getInstance(project).getSelectedFiles()) {\n          if (file.isInLocalFileSystem() && isDartOrHtmlFile(file)) {\n            newVisibleFiles.add(FileUtil.toSystemDependentName(file.getPath()));\n          }\n        }\n      }\n\n      if (!Comparing.haveEqualElements(myVisibleFiles, newVisibleFiles)) {\n        myVisibleFiles.clear();\n        myVisibleFiles.addAll(newVisibleFiles);\n        analysis_setPriorityFiles();\n        analysis_setSubscriptions();\n      }\n    }",
      "right" : "synchronized (myLock) {\n      final List<String> newVisibleFiles = new ArrayList<String>();\n\n      for (Project project : myRootsHandler.getTrackedProjects()) {\n        for (VirtualFile file : FileEditorManager.getInstance(project).getSelectedFiles()) {\n          if (file.isInLocalFileSystem() && isDartOrHtmlFile(file)) {\n            newVisibleFiles.add(FileUtil.toSystemDependentName(file.getPath()));\n          }\n        }\n      }\n\n      if (!Comparing.haveEqualElements(myVisibleFiles, newVisibleFiles)) {\n        myVisibleFiles.clear();\n        myVisibleFiles.addAll(newVisibleFiles);\n        analysis_setPriorityFiles();\n        analysis_setSubscriptions();\n      }\n    }",
      "info" : "SynchronizedStatement[16857-17535]:SynchronizedStatement[16857-17535]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16879-17535]:Block[16879-17535]"
    }, {
      "left" : "final List<String> newVisibleFiles = new ArrayList<String>();",
      "right" : "final List<String> newVisibleFiles = new ArrayList<String>();",
      "info" : "VariableDeclarationStatement[16887-16948]:VariableDeclarationStatement[16887-16948]"
    }, {
      "left" : "for (Project project : myRootsHandler.getTrackedProjects())",
      "right" : "for (Project project : myRootsHandler.getTrackedProjects())",
      "info" : "EnhancedForStatement[16956-17291]:EnhancedForStatement[16956-17291]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17016-17291]:Block[17016-17291]"
    }, {
      "left" : "for (VirtualFile file : FileEditorManager.getInstance(project).getSelectedFiles())",
      "right" : "for (VirtualFile file : FileEditorManager.getInstance(project).getSelectedFiles())",
      "info" : "EnhancedForStatement[17026-17283]:EnhancedForStatement[17026-17283]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17109-17283]:Block[17109-17283]"
    }, {
      "left" : "if (file.isInLocalFileSystem() && isDartOrHtmlFile(file))",
      "right" : "if (file.isInLocalFileSystem() && isDartOrHtmlFile(file))",
      "info" : "IfStatement[17121-17273]:IfStatement[17121-17273]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17179-17273]:Block[17179-17273]"
    }, {
      "left" : "newVisibleFiles.add(FileUtil.toSystemDependentName(file.getPath()));",
      "right" : "newVisibleFiles.add(FileUtil.toSystemDependentName(file.getPath()));",
      "info" : "ExpressionStatement[17193-17261]:ExpressionStatement[17193-17261]"
    }, {
      "left" : "if (!Comparing.haveEqualElements(myVisibleFiles, newVisibleFiles))",
      "right" : "if (!Comparing.haveEqualElements(myVisibleFiles, newVisibleFiles))",
      "info" : "IfStatement[17299-17529]:IfStatement[17299-17529]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17366-17529]:Block[17366-17529]"
    }, {
      "left" : "myVisibleFiles.clear();",
      "right" : "myVisibleFiles.clear();",
      "info" : "ExpressionStatement[17376-17399]:ExpressionStatement[17376-17399]"
    }, {
      "left" : "myVisibleFiles.addAll(newVisibleFiles);",
      "right" : "myVisibleFiles.addAll(newVisibleFiles);",
      "info" : "ExpressionStatement[17408-17447]:ExpressionStatement[17408-17447]"
    }, {
      "left" : "analysis_setPriorityFiles();",
      "right" : "analysis_setPriorityFiles();",
      "info" : "ExpressionStatement[17456-17484]:ExpressionStatement[17456-17484]"
    }, {
      "left" : "analysis_setSubscriptions();",
      "right" : "analysis_setSubscriptions();",
      "info" : "ExpressionStatement[17493-17521]:ExpressionStatement[17493-17521]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17644-17752]:Block[17644-17752]"
    }, {
      "left" : "return file != null && (file.getFileType() == DartFileType.INSTANCE || HtmlUtil.isHtmlFile(file));",
      "right" : "return file != null && (file.getFileType() == DartFileType.INSTANCE || HtmlUtil.isHtmlFile(file));",
      "info" : "ReturnStatement[17650-17748]:ReturnStatement[17650-17748]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17789-20499]:Block[17789-20499]"
    }, {
      "left" : "final Set<String> oldTrackedFiles = new THashSet<String>(myFilePathWithOverlaidContentToTimestamp.keySet());",
      "right" : "final Set<String> oldTrackedFiles = new THashSet<String>(myFilePathWithOverlaidContentToTimestamp.keySet());",
      "info" : "VariableDeclarationStatement[17915-18023]:VariableDeclarationStatement[17915-18023]"
    }, {
      "left" : "final Map<String, Object> filesToUpdate = new THashMap<String, Object>();",
      "right" : "final Map<String, Object> filesToUpdate = new THashMap<String, Object>();",
      "info" : "VariableDeclarationStatement[18028-18101]:VariableDeclarationStatement[18028-18101]"
    }, {
      "left" : "synchronized (myLock) {\n      if (myServer == null) return;\n\n      final FileDocumentManager fileDocumentManager = FileDocumentManager.getInstance();\n      for (Document document : fileDocumentManager.getUnsavedDocuments()) {\n        final VirtualFile file = fileDocumentManager.getFile(document);\n        if (isDartOrHtmlFile(file)) {\n          oldTrackedFiles.remove(file.getPath());\n\n          final Long oldTimestamp = myFilePathWithOverlaidContentToTimestamp.get(file.getPath());\n          if (oldTimestamp == null || document.getModificationStamp() != oldTimestamp) {\n            filesToUpdate.put(FileUtil.toSystemDependentName(file.getPath()), new AddContentOverlay(document.getText()));\n            myFilePathWithOverlaidContentToTimestamp.put(file.getPath(), document.getModificationStamp());\n          }\n        }\n      }\n\n      // oldTrackedFiles at this point contains only those files that are not in FileDocumentManager.getUnsavedDocuments() any more\n      for (String oldPath : oldTrackedFiles) {\n        final Long removed = myFilePathWithOverlaidContentToTimestamp.remove(oldPath);\n        LOG.assertTrue(removed != null, oldPath);\n        filesToUpdate.put(FileUtil.toSystemDependentName(oldPath), new RemoveContentOverlay());\n      }\n\n      if (LOG.isDebugEnabled()) {\n        if (!filesToUpdate.isEmpty()) {\n          LOG.debug(\"Sending overlaid content of the following files:\\n\" + StringUtil.join(filesToUpdate.keySet(), \",\\n\"));\n        }\n\n        if (!oldTrackedFiles.isEmpty()) {\n          LOG.debug(\"Removing overlaid content of the following files:\\n\" + StringUtil.join(oldTrackedFiles, \",\\n\"));\n        }\n      }\n\n      if (!filesToUpdate.isEmpty()) {\n        final UpdateContentConsumer consumer = new UpdateContentConsumer() {\n          @Override\n          public void onResponse() {\n            myFilePathsWithUnsentChanges.clear();\n          }\n        };\n\n        final AnalysisServer server = myServer;\n        final boolean ok = runInPooledThreadAndWait(new Runnable() {\n          @Override\n          public void run() {\n            server.analysis_updateContent(filesToUpdate, consumer);\n          }\n        }, \"analysis_updateContent(\" + StringUtil.join(filesToUpdate.keySet(), \", \") + \")\", SEND_REQUEST_TIMEOUT);\n\n        if (!ok) {\n          stopServer();\n          //noinspection UnnecessaryReturnStatement\n          return;\n        }\n      }\n    }",
      "right" : "synchronized (myLock) {\n      if (myServer == null) return;\n\n      final FileDocumentManager fileDocumentManager = FileDocumentManager.getInstance();\n      for (Document document : fileDocumentManager.getUnsavedDocuments()) {\n        final VirtualFile file = fileDocumentManager.getFile(document);\n        if (isDartOrHtmlFile(file)) {\n          oldTrackedFiles.remove(file.getPath());\n\n          final Long oldTimestamp = myFilePathWithOverlaidContentToTimestamp.get(file.getPath());\n          if (oldTimestamp == null || document.getModificationStamp() != oldTimestamp) {\n            filesToUpdate.put(FileUtil.toSystemDependentName(file.getPath()), new AddContentOverlay(document.getText()));\n            myFilePathWithOverlaidContentToTimestamp.put(file.getPath(), document.getModificationStamp());\n          }\n        }\n      }\n\n      // oldTrackedFiles at this point contains only those files that are not in FileDocumentManager.getUnsavedDocuments() any more\n      for (String oldPath : oldTrackedFiles) {\n        final Long removed = myFilePathWithOverlaidContentToTimestamp.remove(oldPath);\n        LOG.assertTrue(removed != null, oldPath);\n        filesToUpdate.put(FileUtil.toSystemDependentName(oldPath), new RemoveContentOverlay());\n      }\n\n      if (LOG.isDebugEnabled()) {\n        if (!filesToUpdate.isEmpty()) {\n          LOG.debug(\"Sending overlaid content of the following files:\\n\" + StringUtil.join(filesToUpdate.keySet(), \",\\n\"));\n        }\n\n        if (!oldTrackedFiles.isEmpty()) {\n          LOG.debug(\"Removing overlaid content of the following files:\\n\" + StringUtil.join(oldTrackedFiles, \",\\n\"));\n        }\n      }\n\n      if (!filesToUpdate.isEmpty()) {\n        final UpdateContentConsumer consumer = new UpdateContentConsumer() {\n          @Override\n          public void onResponse() {\n            myFilePathsWithUnsentChanges.clear();\n          }\n        };\n\n        final AnalysisServer server = myServer;\n        final boolean ok = runInPooledThreadAndWait(new Runnable() {\n          @Override\n          public void run() {\n            server.analysis_updateContent(filesToUpdate, consumer);\n          }\n        }, \"analysis_updateContent(\" + StringUtil.join(filesToUpdate.keySet(), \", \") + \")\", SEND_REQUEST_TIMEOUT);\n\n        if (!ok) {\n          stopServer();\n          //noinspection UnnecessaryReturnStatement\n          return;\n        }\n      }\n    }",
      "info" : "SynchronizedStatement[18107-20495]:SynchronizedStatement[18107-20495]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18129-20495]:Block[18129-20495]"
    }, {
      "left" : "if (myServer == null)",
      "right" : "if (myServer == null)",
      "info" : "IfStatement[18137-18166]:IfStatement[18137-18166]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[18159-18166]:ReturnStatement[18159-18166]"
    }, {
      "left" : "final FileDocumentManager fileDocumentManager = FileDocumentManager.getInstance();",
      "right" : "final FileDocumentManager fileDocumentManager = FileDocumentManager.getInstance();",
      "info" : "VariableDeclarationStatement[18174-18256]:VariableDeclarationStatement[18174-18256]"
    }, {
      "left" : "for (Document document : fileDocumentManager.getUnsavedDocuments())",
      "right" : "for (Document document : fileDocumentManager.getUnsavedDocuments())",
      "info" : "EnhancedForStatement[18263-18939]:EnhancedForStatement[18263-18939]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18331-18939]:Block[18331-18939]"
    }, {
      "left" : "final VirtualFile file = fileDocumentManager.getFile(document);",
      "right" : "final VirtualFile file = fileDocumentManager.getFile(document);",
      "info" : "VariableDeclarationStatement[18341-18404]:VariableDeclarationStatement[18341-18404]"
    }, {
      "left" : "if (isDartOrHtmlFile(file))",
      "right" : "if (isDartOrHtmlFile(file))",
      "info" : "IfStatement[18413-18931]:IfStatement[18413-18931]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18441-18931]:Block[18441-18931]"
    }, {
      "left" : "oldTrackedFiles.remove(file.getPath());",
      "right" : "oldTrackedFiles.remove(file.getPath());",
      "info" : "ExpressionStatement[18453-18492]:ExpressionStatement[18453-18492]"
    }, {
      "left" : "final Long oldTimestamp = myFilePathWithOverlaidContentToTimestamp.get(file.getPath());",
      "right" : "final Long oldTimestamp = myFilePathWithOverlaidContentToTimestamp.get(file.getPath());",
      "info" : "VariableDeclarationStatement[18504-18591]:VariableDeclarationStatement[18504-18591]"
    }, {
      "left" : "if (oldTimestamp == null || document.getModificationStamp() != oldTimestamp)",
      "right" : "if (oldTimestamp == null || document.getModificationStamp() != oldTimestamp)",
      "info" : "IfStatement[18602-18921]:IfStatement[18602-18921]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18679-18921]:Block[18679-18921]"
    }, {
      "left" : "filesToUpdate.put(FileUtil.toSystemDependentName(file.getPath()), new AddContentOverlay(document.getText()));",
      "right" : "filesToUpdate.put(FileUtil.toSystemDependentName(file.getPath()), new AddContentOverlay(document.getText()));",
      "info" : "ExpressionStatement[18693-18802]:ExpressionStatement[18693-18802]"
    }, {
      "left" : "myFilePathWithOverlaidContentToTimestamp.put(file.getPath(), document.getModificationStamp());",
      "right" : "myFilePathWithOverlaidContentToTimestamp.put(file.getPath(), document.getModificationStamp());",
      "info" : "ExpressionStatement[18815-18909]:ExpressionStatement[18815-18909]"
    }, {
      "left" : "for (String oldPath : oldTrackedFiles)",
      "right" : "for (String oldPath : oldTrackedFiles)",
      "info" : "EnhancedForStatement[19079-19360]:EnhancedForStatement[19079-19360]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19118-19360]:Block[19118-19360]"
    }, {
      "left" : "final Long removed = myFilePathWithOverlaidContentToTimestamp.remove(oldPath);",
      "right" : "final Long removed = myFilePathWithOverlaidContentToTimestamp.remove(oldPath);",
      "info" : "VariableDeclarationStatement[19128-19206]:VariableDeclarationStatement[19128-19206]"
    }, {
      "left" : "LOG.assertTrue(removed != null, oldPath);",
      "right" : "LOG.assertTrue(removed != null, oldPath);",
      "info" : "ExpressionStatement[19215-19256]:ExpressionStatement[19215-19256]"
    }, {
      "left" : "filesToUpdate.put(FileUtil.toSystemDependentName(oldPath), new RemoveContentOverlay());",
      "right" : "filesToUpdate.put(FileUtil.toSystemDependentName(oldPath), new RemoveContentOverlay());",
      "info" : "ExpressionStatement[19265-19352]:ExpressionStatement[19265-19352]"
    }, {
      "left" : "if (LOG.isDebugEnabled())",
      "right" : "if (LOG.isDebugEnabled())",
      "info" : "IfStatement[19368-19748]:IfStatement[19368-19748]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19394-19748]:Block[19394-19748]"
    }, {
      "left" : "if (!filesToUpdate.isEmpty())",
      "right" : "if (!filesToUpdate.isEmpty())",
      "info" : "IfStatement[19404-19569]:IfStatement[19404-19569]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19434-19569]:Block[19434-19569]"
    }, {
      "left" : "LOG.debug(\"Sending overlaid content of the following files:\\n\" + StringUtil.join(filesToUpdate.keySet(), \",\\n\"));",
      "right" : "LOG.debug(\"Sending overlaid content of the following files:\\n\" + StringUtil.join(filesToUpdate.keySet(), \",\\n\"));",
      "info" : "ExpressionStatement[19446-19559]:ExpressionStatement[19446-19559]"
    }, {
      "left" : "if (!oldTrackedFiles.isEmpty())",
      "right" : "if (!oldTrackedFiles.isEmpty())",
      "info" : "IfStatement[19579-19740]:IfStatement[19579-19740]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19611-19740]:Block[19611-19740]"
    }, {
      "left" : "LOG.debug(\"Removing overlaid content of the following files:\\n\" + StringUtil.join(oldTrackedFiles, \",\\n\"));",
      "right" : "LOG.debug(\"Removing overlaid content of the following files:\\n\" + StringUtil.join(oldTrackedFiles, \",\\n\"));",
      "info" : "ExpressionStatement[19623-19730]:ExpressionStatement[19623-19730]"
    }, {
      "left" : "if (!filesToUpdate.isEmpty())",
      "right" : "if (!filesToUpdate.isEmpty())",
      "info" : "IfStatement[19756-20489]:IfStatement[19756-20489]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19786-20489]:Block[19786-20489]"
    }, {
      "left" : "final UpdateContentConsumer consumer = new UpdateContentConsumer() {\n          @Override\n          public void onResponse() {\n            myFilePathsWithUnsentChanges.clear();\n          }\n        };",
      "right" : "final UpdateContentConsumer consumer = new UpdateContentConsumer() {\n          @Override\n          public void onResponse() {\n            myFilePathsWithUnsentChanges.clear();\n          }\n        };",
      "info" : "VariableDeclarationStatement[19796-19994]:VariableDeclarationStatement[19796-19994]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19920-19983]:Block[19920-19983]"
    }, {
      "left" : "myFilePathsWithUnsentChanges.clear();",
      "right" : "myFilePathsWithUnsentChanges.clear();",
      "info" : "ExpressionStatement[19934-19971]:ExpressionStatement[19934-19971]"
    }, {
      "left" : "final AnalysisServer server = myServer;",
      "right" : "final AnalysisServer server = myServer;",
      "info" : "VariableDeclarationStatement[20004-20043]:VariableDeclarationStatement[20004-20043]"
    }, {
      "left" : "final boolean ok = runInPooledThreadAndWait(new Runnable() {\n          @Override\n          public void run() {\n            server.analysis_updateContent(filesToUpdate, consumer);\n          }\n        }, \"analysis_updateContent(\" + StringUtil.join(filesToUpdate.keySet(), \", \") + \")\", SEND_REQUEST_TIMEOUT);",
      "right" : "final boolean ok = runInPooledThreadAndWait(new Runnable() {\n          @Override\n          public void run() {\n            server.analysis_updateContent(filesToUpdate, consumer);\n          }\n        }, \"analysis_updateContent(\" + StringUtil.join(filesToUpdate.keySet(), \", \") + \")\", SEND_REQUEST_TIMEOUT);",
      "info" : "VariableDeclarationStatement[20052-20357]:VariableDeclarationStatement[20052-20357]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20161-20242]:Block[20161-20242]"
    }, {
      "left" : "server.analysis_updateContent(filesToUpdate, consumer);",
      "right" : "server.analysis_updateContent(filesToUpdate, consumer);",
      "info" : "ExpressionStatement[20175-20230]:ExpressionStatement[20175-20230]"
    }, {
      "left" : "if (!ok)",
      "right" : "if (!ok)",
      "info" : "IfStatement[20367-20481]:IfStatement[20367-20481]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20376-20481]:Block[20376-20481]"
    }, {
      "left" : "stopServer();",
      "right" : "stopServer();",
      "info" : "ExpressionStatement[20388-20401]:ExpressionStatement[20388-20401]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[20464-20471]:ReturnStatement[20464-20471]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20724-21608]:Block[20724-21608]"
    }, {
      "left" : "synchronized (myLock) {\n      if (myServer == null) return false;\n\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"analysis_setAnalysisRoots, included:\\n\" + StringUtil.join(includedRoots, \",\\n\") +\n                  \"\\nexcluded:\\n\" + StringUtil.join(excludedRoots, \",\\n\"));\n      }\n\n      final AnalysisServer server = myServer;\n      final String runnableInfo = \"analysis_setAnalysisRoots(\" + StringUtil.join(includedRoots, \", \") + \"; \" +\n                                  StringUtil.join(excludedRoots, \", \") + \")\";\n      final boolean ok = runInPooledThreadAndWait(new Runnable() {\n        @Override\n        public void run() {\n          server.analysis_setAnalysisRoots(includedRoots, excludedRoots, packageRoots);\n        }\n      }, runnableInfo, SEND_REQUEST_TIMEOUT);\n\n      if (!ok) {\n        stopServer();\n        return false;\n      }\n\n      return true;\n    }",
      "right" : "synchronized (myLock) {\n      if (myServer == null) return false;\n\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"analysis_setAnalysisRoots, included:\\n\" + StringUtil.join(includedRoots, \",\\n\") +\n                  \"\\nexcluded:\\n\" + StringUtil.join(excludedRoots, \",\\n\"));\n      }\n\n      final AnalysisServer server = myServer;\n      final String runnableInfo = \"analysis_setAnalysisRoots(\" + StringUtil.join(includedRoots, \", \") + \"; \" +\n                                  StringUtil.join(excludedRoots, \", \") + \")\";\n      final boolean ok = runInPooledThreadAndWait(new Runnable() {\n        @Override\n        public void run() {\n          server.analysis_setAnalysisRoots(includedRoots, excludedRoots, packageRoots);\n        }\n      }, runnableInfo, SEND_REQUEST_TIMEOUT);\n\n      if (!ok) {\n        stopServer();\n        return false;\n      }\n\n      return true;\n    }",
      "info" : "SynchronizedStatement[20730-21604]:SynchronizedStatement[20730-21604]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20752-21604]:Block[20752-21604]"
    }, {
      "left" : "if (myServer == null)",
      "right" : "if (myServer == null)",
      "info" : "IfStatement[20760-20795]:IfStatement[20760-20795]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[20782-20795]:ReturnStatement[20782-20795]"
    }, {
      "left" : "if (LOG.isDebugEnabled())",
      "right" : "if (LOG.isDebugEnabled())",
      "info" : "IfStatement[20803-21015]:IfStatement[20803-21015]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20829-21015]:Block[20829-21015]"
    }, {
      "left" : "LOG.debug(\"analysis_setAnalysisRoots, included:\\n\" + StringUtil.join(includedRoots, \",\\n\") +\n                  \"\\nexcluded:\\n\" + StringUtil.join(excludedRoots, \",\\n\"));",
      "right" : "LOG.debug(\"analysis_setAnalysisRoots, included:\\n\" + StringUtil.join(includedRoots, \",\\n\") +\n                  \"\\nexcluded:\\n\" + StringUtil.join(excludedRoots, \",\\n\"));",
      "info" : "ExpressionStatement[20839-21007]:ExpressionStatement[20839-21007]"
    }, {
      "left" : "final AnalysisServer server = myServer;",
      "right" : "final AnalysisServer server = myServer;",
      "info" : "VariableDeclarationStatement[21023-21062]:VariableDeclarationStatement[21023-21062]"
    }, {
      "left" : "final String runnableInfo = \"analysis_setAnalysisRoots(\" + StringUtil.join(includedRoots, \", \") + \"; \" +\n                                  StringUtil.join(excludedRoots, \", \") + \")\";",
      "right" : "final String runnableInfo = \"analysis_setAnalysisRoots(\" + StringUtil.join(includedRoots, \", \") + \"; \" +\n                                  StringUtil.join(excludedRoots, \", \") + \")\";",
      "info" : "VariableDeclarationStatement[21069-21251]:VariableDeclarationStatement[21069-21251]"
    }, {
      "left" : "final boolean ok = runInPooledThreadAndWait(new Runnable() {\n        @Override\n        public void run() {\n          server.analysis_setAnalysisRoots(includedRoots, excludedRoots, packageRoots);\n        }\n      }, runnableInfo, SEND_REQUEST_TIMEOUT);",
      "right" : "final boolean ok = runInPooledThreadAndWait(new Runnable() {\n        @Override\n        public void run() {\n          server.analysis_setAnalysisRoots(includedRoots, excludedRoots, packageRoots);\n        }\n      }, runnableInfo, SEND_REQUEST_TIMEOUT);",
      "info" : "VariableDeclarationStatement[21258-21508]:VariableDeclarationStatement[21258-21508]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21363-21462]:Block[21363-21462]"
    }, {
      "left" : "server.analysis_setAnalysisRoots(includedRoots, excludedRoots, packageRoots);",
      "right" : "server.analysis_setAnalysisRoots(includedRoots, excludedRoots, packageRoots);",
      "info" : "ExpressionStatement[21375-21452]:ExpressionStatement[21375-21452]"
    }, {
      "left" : "if (!ok)",
      "right" : "if (!ok)",
      "info" : "IfStatement[21516-21578]:IfStatement[21516-21578]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21525-21578]:Block[21525-21578]"
    }, {
      "left" : "stopServer();",
      "right" : "stopServer();",
      "info" : "ExpressionStatement[21535-21548]:ExpressionStatement[21535-21548]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[21557-21570]:ReturnStatement[21557-21570]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[21586-21598]:ReturnStatement[21586-21598]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21719-22401]:Block[21719-22401]"
    }, {
      "left" : "ApplicationManager.getApplication().runReadAction(new Runnable() {\n      @Override\n      public void run() {\n        final VirtualFile vFile = LocalFileSystem.getInstance().findFileByPath(filePath);\n\n        for (final Project project : myRootsHandler.getTrackedProjects()) {\n          if (project.isDisposed()) continue;\n\n          if (vFile != null && ProjectRootManager.getInstance(project).getFileIndex().isInContent(vFile)) {\n            DartProblemsViewImpl.getInstance(project).updateErrorsForFile(vFile, errors);\n          }\n          else {\n            DartProblemsViewImpl.getInstance(project).removeErrorsForFile(filePath);\n          }\n        }\n      }\n    });",
      "right" : "ApplicationManager.getApplication().runReadAction(new Runnable() {\n      @Override\n      public void run() {\n        final VirtualFile vFile = LocalFileSystem.getInstance().findFileByPath(filePath);\n\n        for (final Project project : myRootsHandler.getTrackedProjects()) {\n          if (project.isDisposed()) continue;\n\n          if (vFile != null && ProjectRootManager.getInstance(project).getFileIndex().isInContent(vFile)) {\n            DartProblemsViewImpl.getInstance(project).updateErrorsForFile(vFile, errors);\n          }\n          else {\n            DartProblemsViewImpl.getInstance(project).removeErrorsForFile(filePath);\n          }\n        }\n      }\n    });",
      "info" : "ExpressionStatement[21725-22397]:ExpressionStatement[21725-22397]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21832-22389]:Block[21832-22389]"
    }, {
      "left" : "final VirtualFile vFile = LocalFileSystem.getInstance().findFileByPath(filePath);",
      "right" : "final VirtualFile vFile = LocalFileSystem.getInstance().findFileByPath(filePath);",
      "info" : "VariableDeclarationStatement[21842-21923]:VariableDeclarationStatement[21842-21923]"
    }, {
      "left" : "for (final Project project : myRootsHandler.getTrackedProjects())",
      "right" : "for (final Project project : myRootsHandler.getTrackedProjects())",
      "info" : "EnhancedForStatement[21933-22381]:EnhancedForStatement[21933-22381]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21999-22381]:Block[21999-22381]"
    }, {
      "left" : "if (project.isDisposed())",
      "right" : "if (project.isDisposed())",
      "info" : "IfStatement[22011-22046]:IfStatement[22011-22046]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[22037-22046]:ContinueStatement[22037-22046]"
    }, {
      "left" : "if (vFile != null && ProjectRootManager.getInstance(project).getFileIndex().isInContent(vFile))",
      "right" : "if (vFile != null && ProjectRootManager.getInstance(project).getFileIndex().isInContent(vFile))",
      "info" : "IfStatement[22058-22371]:IfStatement[22058-22371]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22154-22257]:Block[22154-22257]"
    }, {
      "left" : "DartProblemsViewImpl.getInstance(project).updateErrorsForFile(vFile, errors);",
      "right" : "DartProblemsViewImpl.getInstance(project).updateErrorsForFile(vFile, errors);",
      "info" : "ExpressionStatement[22168-22245]:ExpressionStatement[22168-22245]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22273-22371]:Block[22273-22371]"
    }, {
      "left" : "DartProblemsViewImpl.getInstance(project).removeErrorsForFile(filePath);",
      "right" : "DartProblemsViewImpl.getInstance(project).removeErrorsForFile(filePath);",
      "info" : "ExpressionStatement[22287-22359]:ExpressionStatement[22287-22359]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23054-23991]:Block[23054-23991]"
    }, {
      "left" : "if (semaphore.tryUp())",
      "right" : "if (semaphore.tryUp())",
      "info" : "IfStatement[23068-23979]:IfStatement[23068-23979]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23091-23143]:Block[23091-23143]"
    }, {
      "left" : "resultRef.set(errors);",
      "right" : "resultRef.set(errors);",
      "info" : "ExpressionStatement[23107-23129]:ExpressionStatement[23107-23129]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23161-23979]:Block[23161-23979]"
    }, {
      "left" : "LOG.info(\"analysis_getErrors() took too long for file \" + filePath + \", restarting daemon\");",
      "right" : "LOG.info(\"analysis_getErrors() took too long for file \" + filePath + \", restarting daemon\");",
      "info" : "ExpressionStatement[23262-23354]:ExpressionStatement[23262-23354]"
    }, {
      "left" : "ApplicationManager.getApplication().runReadAction(new Runnable() {\n                @Override\n                public void run() {\n                  final VirtualFile vFile =\n                    info.myProject.isDisposed() ? null : LocalFileSystem.getInstance().findFileByPath(info.myFilePath);\n                  final PsiFile psiFile = vFile == null ? null : PsiManager.getInstance(info.myProject).findFile(vFile);\n                  if (psiFile != null) {\n                    DaemonCodeAnalyzer.getInstance(info.myProject).restart(psiFile);\n                  }\n                }\n              });",
      "right" : "ApplicationManager.getApplication().runReadAction(new Runnable() {\n                @Override\n                public void run() {\n                  final VirtualFile vFile =\n                    info.myProject.isDisposed() ? null : LocalFileSystem.getInstance().findFileByPath(info.myFilePath);\n                  final PsiFile psiFile = vFile == null ? null : PsiManager.getInstance(info.myProject).findFile(vFile);\n                  if (psiFile != null) {\n                    DaemonCodeAnalyzer.getInstance(info.myProject).restart(psiFile);\n                  }\n                }\n              });",
      "info" : "ExpressionStatement[23370-23965]:ExpressionStatement[23370-23965]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23497-23947]:Block[23497-23947]"
    }, {
      "left" : "final VirtualFile vFile =\n                    info.myProject.isDisposed() ? null : LocalFileSystem.getInstance().findFileByPath(info.myFilePath);",
      "right" : "final VirtualFile vFile =\n                    info.myProject.isDisposed() ? null : LocalFileSystem.getInstance().findFileByPath(info.myFilePath);",
      "info" : "VariableDeclarationStatement[23517-23662]:VariableDeclarationStatement[23517-23662]"
    }, {
      "left" : "final PsiFile psiFile = vFile == null ? null : PsiManager.getInstance(info.myProject).findFile(vFile);",
      "right" : "final PsiFile psiFile = vFile == null ? null : PsiManager.getInstance(info.myProject).findFile(vFile);",
      "info" : "VariableDeclarationStatement[23681-23783]:VariableDeclarationStatement[23681-23783]"
    }, {
      "left" : "if (psiFile != null)",
      "right" : "if (psiFile != null)",
      "info" : "IfStatement[23802-23929]:IfStatement[23802-23929]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23823-23929]:Block[23823-23929]"
    }, {
      "left" : "DaemonCodeAnalyzer.getInstance(info.myProject).restart(psiFile);",
      "right" : "DaemonCodeAnalyzer.getInstance(info.myProject).restart(psiFile);",
      "info" : "ExpressionStatement[23845-23909]:ExpressionStatement[23845-23909]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25104-26693]:Block[25325-26914]"
    }, {
      "left" : "final Ref<LibraryDependenciesResult> resultRef = new Ref<LibraryDependenciesResult>();",
      "right" : "final Ref<LibraryDependenciesResult> resultRef = new Ref<LibraryDependenciesResult>();",
      "info" : "VariableDeclarationStatement[25110-25196]:VariableDeclarationStatement[25331-25417]"
    }, {
      "left" : "final Semaphore semaphore = new Semaphore();",
      "right" : "final Semaphore semaphore = new Semaphore();",
      "info" : "VariableDeclarationStatement[25201-25245]:VariableDeclarationStatement[25422-25466]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[25251-26660]:TryStatement[25472-26881]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25255-26507]:Block[25476-26728]"
    }, {
      "left" : "synchronized (myLock) {\n        if (myServer == null) return null;\n\n        semaphore.down();\n\n        LOG.debug(\"analysis_getLibraryDependencies()\");\n\n        final GetLibraryDependenciesConsumer consumer = new GetLibraryDependenciesConsumer() {\n          @Override\n          public void computedDependencies(@Nullable final String[] libraries,\n                                           @Nullable final Map<String, Map<String, List<String>>> packageMap) {\n            resultRef.set(new LibraryDependenciesResult(libraries, packageMap));\n            semaphore.up();\n          }\n\n          @Override\n          public void onError(final RequestError error) {\n            logError(\"analysis_getLibraryDependencies()\", null, error);\n            semaphore.up();\n          }\n        };\n\n        final AnalysisServer server = myServer;\n        final boolean ok = runInPooledThreadAndWait(new Runnable() {\n          @Override\n          public void run() {\n            server.analysis_getLibraryDependencies(consumer);\n          }\n        }, \"analysis_getLibraryDependencies()\", SEND_REQUEST_TIMEOUT);\n\n        if (!ok) {\n          stopServer();\n          return null;\n        }\n      }",
      "right" : "synchronized (myLock) {\n        if (myServer == null) return null;\n\n        semaphore.down();\n\n        LOG.debug(\"analysis_getLibraryDependencies()\");\n\n        final GetLibraryDependenciesConsumer consumer = new GetLibraryDependenciesConsumer() {\n          @Override\n          public void computedDependencies(@Nullable final String[] libraries,\n                                           @Nullable final Map<String, Map<String, List<String>>> packageMap) {\n            resultRef.set(new LibraryDependenciesResult(libraries, packageMap));\n            semaphore.up();\n          }\n\n          @Override\n          public void onError(final RequestError error) {\n            logError(\"analysis_getLibraryDependencies()\", null, error);\n            semaphore.up();\n          }\n        };\n\n        final AnalysisServer server = myServer;\n        final boolean ok = runInPooledThreadAndWait(new Runnable() {\n          @Override\n          public void run() {\n            server.analysis_getLibraryDependencies(consumer);\n          }\n        }, \"analysis_getLibraryDependencies()\", SEND_REQUEST_TIMEOUT);\n\n        if (!ok) {\n          stopServer();\n          return null;\n        }\n      }",
      "info" : "SynchronizedStatement[25263-26441]:SynchronizedStatement[25484-26662]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25285-26441]:Block[25506-26662]"
    }, {
      "left" : "if (myServer == null)",
      "right" : "if (myServer == null)",
      "info" : "IfStatement[25295-25329]:IfStatement[25516-25550]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[25317-25329]:ReturnStatement[25538-25550]"
    }, {
      "left" : "semaphore.down();",
      "right" : "semaphore.down();",
      "info" : "ExpressionStatement[25339-25356]:ExpressionStatement[25560-25577]"
    }, {
      "left" : "LOG.debug(\"analysis_getLibraryDependencies()\");",
      "right" : "LOG.debug(\"analysis_getLibraryDependencies()\");",
      "info" : "ExpressionStatement[25366-25413]:ExpressionStatement[25587-25634]"
    }, {
      "left" : "final GetLibraryDependenciesConsumer consumer = new GetLibraryDependenciesConsumer() {\n          @Override\n          public void computedDependencies(@Nullable final String[] libraries,\n                                           @Nullable final Map<String, Map<String, List<String>>> packageMap) {\n            resultRef.set(new LibraryDependenciesResult(libraries, packageMap));\n            semaphore.up();\n          }\n\n          @Override\n          public void onError(final RequestError error) {\n            logError(\"analysis_getLibraryDependencies()\", null, error);\n            semaphore.up();\n          }\n        };",
      "right" : "final GetLibraryDependenciesConsumer consumer = new GetLibraryDependenciesConsumer() {\n          @Override\n          public void computedDependencies(@Nullable final String[] libraries,\n                                           @Nullable final Map<String, Map<String, List<String>>> packageMap) {\n            resultRef.set(new LibraryDependenciesResult(libraries, packageMap));\n            semaphore.up();\n          }\n\n          @Override\n          public void onError(final RequestError error) {\n            logError(\"analysis_getLibraryDependencies()\", null, error);\n            semaphore.up();\n          }\n        };",
      "info" : "VariableDeclarationStatement[25423-26043]:VariableDeclarationStatement[25644-26264]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25719-25841]:Block[25940-26062]"
    }, {
      "left" : "resultRef.set(new LibraryDependenciesResult(libraries, packageMap));",
      "right" : "resultRef.set(new LibraryDependenciesResult(libraries, packageMap));",
      "info" : "ExpressionStatement[25733-25801]:ExpressionStatement[25954-26022]"
    }, {
      "left" : "semaphore.up();",
      "right" : "semaphore.up();",
      "info" : "ExpressionStatement[25814-25829]:ExpressionStatement[26035-26050]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25919-26032]:Block[26140-26253]"
    }, {
      "left" : "logError(\"analysis_getLibraryDependencies()\", null, error);",
      "right" : "logError(\"analysis_getLibraryDependencies()\", null, error);",
      "info" : "ExpressionStatement[25933-25992]:ExpressionStatement[26154-26213]"
    }, {
      "left" : "semaphore.up();",
      "right" : "semaphore.up();",
      "info" : "ExpressionStatement[26005-26020]:ExpressionStatement[26226-26241]"
    }, {
      "left" : "final AnalysisServer server = myServer;",
      "right" : "final AnalysisServer server = myServer;",
      "info" : "VariableDeclarationStatement[26053-26092]:VariableDeclarationStatement[26274-26313]"
    }, {
      "left" : "final boolean ok = runInPooledThreadAndWait(new Runnable() {\n          @Override\n          public void run() {\n            server.analysis_getLibraryDependencies(consumer);\n          }\n        }, \"analysis_getLibraryDependencies()\", SEND_REQUEST_TIMEOUT);",
      "right" : "final boolean ok = runInPooledThreadAndWait(new Runnable() {\n          @Override\n          public void run() {\n            server.analysis_getLibraryDependencies(consumer);\n          }\n        }, \"analysis_getLibraryDependencies()\", SEND_REQUEST_TIMEOUT);",
      "info" : "VariableDeclarationStatement[26101-26356]:VariableDeclarationStatement[26322-26577]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26210-26285]:Block[26431-26506]"
    }, {
      "left" : "server.analysis_getLibraryDependencies(consumer);",
      "right" : "server.analysis_getLibraryDependencies(consumer);",
      "info" : "ExpressionStatement[26224-26273]:ExpressionStatement[26445-26494]"
    }, {
      "left" : "if (!ok)",
      "right" : "if (!ok)",
      "info" : "IfStatement[26366-26433]:IfStatement[26587-26654]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26375-26433]:Block[26596-26654]"
    }, {
      "left" : "stopServer();",
      "right" : "stopServer();",
      "info" : "ExpressionStatement[26387-26400]:ExpressionStatement[26608-26621]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[26411-26423]:ReturnStatement[26632-26644]"
    }, {
      "left" : "semaphore.waitFor(GET_LIBRARY_DEPENDENCIES_TIMEOUT);",
      "right" : "semaphore.waitFor(GET_LIBRARY_DEPENDENCIES_TIMEOUT);",
      "info" : "ExpressionStatement[26449-26501]:ExpressionStatement[26670-26722]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26520-26660]:Block[26741-26881]"
    }, {
      "left" : "semaphore.up();",
      "right" : "semaphore.up();",
      "info" : "ExpressionStatement[26528-26543]:ExpressionStatement[26749-26764]"
    }, {
      "left" : "return resultRef.get();",
      "right" : "return resultRef.get();",
      "info" : "ReturnStatement[26666-26689]:ReturnStatement[26887-26910]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26806-28200]:Block[27027-28421]"
    }, {
      "left" : "final Ref<List<AnalysisErrorFixes>> resultRef = new Ref<List<AnalysisErrorFixes>>();",
      "right" : "final Ref<List<AnalysisErrorFixes>> resultRef = new Ref<List<AnalysisErrorFixes>>();",
      "info" : "VariableDeclarationStatement[26812-26896]:VariableDeclarationStatement[27033-27117]"
    }, {
      "left" : "final Semaphore semaphore = new Semaphore();",
      "right" : "final Semaphore semaphore = new Semaphore();",
      "info" : "VariableDeclarationStatement[26901-26945]:VariableDeclarationStatement[27122-27166]"
    }, {
      "left" : "final String filePath = FileUtil.toSystemDependentName(_filePath);",
      "right" : "final String filePath = FileUtil.toSystemDependentName(_filePath);",
      "info" : "VariableDeclarationStatement[26950-27016]:VariableDeclarationStatement[27171-27237]"
    }, {
      "left" : "synchronized (myLock) {\n      if (myServer == null) return null;\n\n      semaphore.down();\n\n      final GetFixesConsumer consumer = new GetFixesConsumer() {\n        @Override\n        public void computedFixes(final List<AnalysisErrorFixes> fixes) {\n          resultRef.set(fixes);\n          semaphore.up();\n        }\n\n        @Override\n        public void onError(final RequestError error) {\n          logError(\"edit_getFixes()\", filePath, error);\n          semaphore.up();\n        }\n      };\n\n      final AnalysisServer server = myServer;\n      final boolean ok = runInPooledThreadAndWait(new Runnable() {\n        @Override\n        public void run() {\n          server.edit_getFixes(filePath, offset, consumer);\n        }\n      }, \"edit_getFixes(\" + filePath + \", \" + offset + \")\", SEND_REQUEST_TIMEOUT);\n\n      if (!ok) {\n        stopServer();\n        return null;\n      }\n    }",
      "right" : "synchronized (myLock) {\n      if (myServer == null) return null;\n\n      semaphore.down();\n\n      final GetFixesConsumer consumer = new GetFixesConsumer() {\n        @Override\n        public void computedFixes(final List<AnalysisErrorFixes> fixes) {\n          resultRef.set(fixes);\n          semaphore.up();\n        }\n\n        @Override\n        public void onError(final RequestError error) {\n          logError(\"edit_getFixes()\", filePath, error);\n          semaphore.up();\n        }\n      };\n\n      final AnalysisServer server = myServer;\n      final boolean ok = runInPooledThreadAndWait(new Runnable() {\n        @Override\n        public void run() {\n          server.edit_getFixes(filePath, offset, consumer);\n        }\n      }, \"edit_getFixes(\" + filePath + \", \" + offset + \")\", SEND_REQUEST_TIMEOUT);\n\n      if (!ok) {\n        stopServer();\n        return null;\n      }\n    }",
      "info" : "SynchronizedStatement[27022-27901]:SynchronizedStatement[27243-28122]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27044-27901]:Block[27265-28122]"
    }, {
      "left" : "if (myServer == null)",
      "right" : "if (myServer == null)",
      "info" : "IfStatement[27052-27086]:IfStatement[27273-27307]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[27074-27086]:ReturnStatement[27295-27307]"
    }, {
      "left" : "semaphore.down();",
      "right" : "semaphore.down();",
      "info" : "ExpressionStatement[27094-27111]:ExpressionStatement[27315-27332]"
    }, {
      "left" : "final GetFixesConsumer consumer = new GetFixesConsumer() {\n        @Override\n        public void computedFixes(final List<AnalysisErrorFixes> fixes) {\n          resultRef.set(fixes);\n          semaphore.up();\n        }\n\n        @Override\n        public void onError(final RequestError error) {\n          logError(\"edit_getFixes()\", filePath, error);\n          semaphore.up();\n        }\n      };",
      "right" : "final GetFixesConsumer consumer = new GetFixesConsumer() {\n        @Override\n        public void computedFixes(final List<AnalysisErrorFixes> fixes) {\n          resultRef.set(fixes);\n          semaphore.up();\n        }\n\n        @Override\n        public void onError(final RequestError error) {\n          logError(\"edit_getFixes()\", filePath, error);\n          semaphore.up();\n        }\n      };",
      "info" : "VariableDeclarationStatement[27119-27513]:VariableDeclarationStatement[27340-27734]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27268-27337]:Block[27489-27558]"
    }, {
      "left" : "resultRef.set(fixes);",
      "right" : "resultRef.set(fixes);",
      "info" : "ExpressionStatement[27280-27301]:ExpressionStatement[27501-27522]"
    }, {
      "left" : "semaphore.up();",
      "right" : "semaphore.up();",
      "info" : "ExpressionStatement[27312-27327]:ExpressionStatement[27533-27548]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27411-27504]:Block[27632-27725]"
    }, {
      "left" : "logError(\"edit_getFixes()\", filePath, error);",
      "right" : "logError(\"edit_getFixes()\", filePath, error);",
      "info" : "ExpressionStatement[27423-27468]:ExpressionStatement[27644-27689]"
    }, {
      "left" : "semaphore.up();",
      "right" : "semaphore.up();",
      "info" : "ExpressionStatement[27479-27494]:ExpressionStatement[27700-27715]"
    }, {
      "left" : "final AnalysisServer server = myServer;",
      "right" : "final AnalysisServer server = myServer;",
      "info" : "VariableDeclarationStatement[27521-27560]:VariableDeclarationStatement[27742-27781]"
    }, {
      "left" : "final boolean ok = runInPooledThreadAndWait(new Runnable() {\n        @Override\n        public void run() {\n          server.edit_getFixes(filePath, offset, consumer);\n        }\n      }, \"edit_getFixes(\" + filePath + \", \" + offset + \")\", SEND_REQUEST_TIMEOUT);",
      "right" : "final boolean ok = runInPooledThreadAndWait(new Runnable() {\n        @Override\n        public void run() {\n          server.edit_getFixes(filePath, offset, consumer);\n        }\n      }, \"edit_getFixes(\" + filePath + \", \" + offset + \")\", SEND_REQUEST_TIMEOUT);",
      "info" : "VariableDeclarationStatement[27567-27826]:VariableDeclarationStatement[27788-28047]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27672-27743]:Block[27893-27964]"
    }, {
      "left" : "server.edit_getFixes(filePath, offset, consumer);",
      "right" : "server.edit_getFixes(filePath, offset, consumer);",
      "info" : "ExpressionStatement[27684-27733]:ExpressionStatement[27905-27954]"
    }, {
      "left" : "if (!ok)",
      "right" : "if (!ok)",
      "info" : "IfStatement[27834-27895]:IfStatement[28055-28116]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27843-27895]:Block[28064-28116]"
    }, {
      "left" : "stopServer();",
      "right" : "stopServer();",
      "info" : "ExpressionStatement[27853-27866]:ExpressionStatement[28074-28087]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[27875-27887]:ReturnStatement[28096-28108]"
    }, {
      "left" : "final long t0 = System.currentTimeMillis();",
      "right" : "final long t0 = System.currentTimeMillis();",
      "info" : "VariableDeclarationStatement[27907-27950]:VariableDeclarationStatement[28128-28171]"
    }, {
      "left" : "semaphore.waitFor(GET_FIXES_TIMEOUT);",
      "right" : "semaphore.waitFor(GET_FIXES_TIMEOUT);",
      "info" : "ExpressionStatement[27955-27992]:ExpressionStatement[28176-28213]"
    }, {
      "left" : "if (semaphore.tryUp())",
      "right" : "if (semaphore.tryUp())",
      "info" : "IfStatement[27998-28167]:IfStatement[28219-28388]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28021-28167]:Block[28242-28388]"
    }, {
      "left" : "LOG.info(\"edit_getFixes() took too long for file \" + filePath + \": \" + (System.currentTimeMillis() - t0) + \"ms\");",
      "right" : "LOG.info(\"edit_getFixes() took too long for file \" + filePath + \": \" + (System.currentTimeMillis() - t0) + \"ms\");",
      "info" : "ExpressionStatement[28029-28142]:ExpressionStatement[28250-28363]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[28149-28161]:ReturnStatement[28370-28382]"
    }, {
      "left" : "return resultRef.get();",
      "right" : "return resultRef.get();",
      "info" : "ReturnStatement[28173-28196]:ReturnStatement[28394-28417]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28431-30608]:Block[28652-30829]"
    }, {
      "left" : "final String searchId;",
      "right" : "final String searchId;",
      "info" : "VariableDeclarationStatement[28437-28459]:VariableDeclarationStatement[28658-28680]"
    }, {
      "left" : "synchronized (myLock) {\n      if (myServer == null) return;\n      final AnalysisServer server = myServer;\n\n      final Ref<String> searchIdRef = new Ref<String>();\n      final Semaphore semaphore = new Semaphore();\n\n      semaphore.down();\n      final boolean ok = runInPooledThreadAndWait(new Runnable() {\n        @Override\n        public void run() {\n          server.search_findElementReferences(filePath, offset, true, new FindElementReferencesConsumer() {\n            @Override\n            public void computedElementReferences(String searchId, Element element) {\n              searchIdRef.set(searchId);\n              semaphore.up();\n            }\n\n            @Override\n            public void onError(RequestError requestError) {\n              semaphore.up();\n            }\n          });\n        }\n      }, \"search_findElementReferences(\" + filePath + \", \" + offset + \")\", SEND_REQUEST_TIMEOUT);\n\n      if (!ok) {\n        stopServer();\n        return;\n      }\n\n      final long t0 = System.currentTimeMillis();\n      semaphore.waitFor(FIND_ELEMENT_REFERENCES_TIMEOUT);\n\n      if (semaphore.tryUp()) {\n        LOG.info(\"search_findElementReferences() took too long for file \" +\n                 filePath +\n                 \"@\" +\n                 offset +\n                 \": \" +\n                 (System.currentTimeMillis() - t0) +\n                 \"ms\");\n        return;\n      }\n\n      searchId = searchIdRef.get();\n      if (searchId == null) {\n        return;\n      }\n    }",
      "right" : "synchronized (myLock) {\n      if (myServer == null) return;\n      final AnalysisServer server = myServer;\n\n      final Ref<String> searchIdRef = new Ref<String>();\n      final Semaphore semaphore = new Semaphore();\n\n      semaphore.down();\n      final boolean ok = runInPooledThreadAndWait(new Runnable() {\n        @Override\n        public void run() {\n          server.search_findElementReferences(filePath, offset, true, new FindElementReferencesConsumer() {\n            @Override\n            public void computedElementReferences(String searchId, Element element) {\n              searchIdRef.set(searchId);\n              semaphore.up();\n            }\n\n            @Override\n            public void onError(RequestError requestError) {\n              semaphore.up();\n            }\n          });\n        }\n      }, \"search_findElementReferences(\" + filePath + \", \" + offset + \")\", SEND_REQUEST_TIMEOUT);\n\n      if (!ok) {\n        stopServer();\n        return;\n      }\n\n      final long t0 = System.currentTimeMillis();\n      semaphore.waitFor(FIND_ELEMENT_REFERENCES_TIMEOUT);\n\n      if (semaphore.tryUp()) {\n        LOG.info(\"search_findElementReferences() took too long for file \" +\n                 filePath +\n                 \"@\" +\n                 offset +\n                 \": \" +\n                 (System.currentTimeMillis() - t0) +\n                 \"ms\");\n        return;\n      }\n\n      searchId = searchIdRef.get();\n      if (searchId == null) {\n        return;\n      }\n    }",
      "info" : "SynchronizedStatement[28464-29947]:SynchronizedStatement[28685-30168]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28486-29947]:Block[28707-30168]"
    }, {
      "left" : "if (myServer == null)",
      "right" : "if (myServer == null)",
      "info" : "IfStatement[28494-28523]:IfStatement[28715-28744]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[28516-28523]:ReturnStatement[28737-28744]"
    }, {
      "left" : "final AnalysisServer server = myServer;",
      "right" : "final AnalysisServer server = myServer;",
      "info" : "VariableDeclarationStatement[28530-28569]:VariableDeclarationStatement[28751-28790]"
    }, {
      "left" : "final Ref<String> searchIdRef = new Ref<String>();",
      "right" : "final Ref<String> searchIdRef = new Ref<String>();",
      "info" : "VariableDeclarationStatement[28577-28627]:VariableDeclarationStatement[28798-28848]"
    }, {
      "left" : "final Semaphore semaphore = new Semaphore();",
      "right" : "final Semaphore semaphore = new Semaphore();",
      "info" : "VariableDeclarationStatement[28634-28678]:VariableDeclarationStatement[28855-28899]"
    }, {
      "left" : "semaphore.down();",
      "right" : "semaphore.down();",
      "info" : "ExpressionStatement[28686-28703]:ExpressionStatement[28907-28924]"
    }, {
      "left" : "final boolean ok = runInPooledThreadAndWait(new Runnable() {\n        @Override\n        public void run() {\n          server.search_findElementReferences(filePath, offset, true, new FindElementReferencesConsumer() {\n            @Override\n            public void computedElementReferences(String searchId, Element element) {\n              searchIdRef.set(searchId);\n              semaphore.up();\n            }\n\n            @Override\n            public void onError(RequestError requestError) {\n              semaphore.up();\n            }\n          });\n        }\n      }, \"search_findElementReferences(\" + filePath + \", \" + offset + \")\", SEND_REQUEST_TIMEOUT);",
      "right" : "final boolean ok = runInPooledThreadAndWait(new Runnable() {\n        @Override\n        public void run() {\n          server.search_findElementReferences(filePath, offset, true, new FindElementReferencesConsumer() {\n            @Override\n            public void computedElementReferences(String searchId, Element element) {\n              searchIdRef.set(searchId);\n              semaphore.up();\n            }\n\n            @Override\n            public void onError(RequestError requestError) {\n              semaphore.up();\n            }\n          });\n        }\n      }, \"search_findElementReferences(\" + filePath + \", \" + offset + \")\", SEND_REQUEST_TIMEOUT);",
      "info" : "VariableDeclarationStatement[28710-29367]:VariableDeclarationStatement[28931-29588]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28815-29269]:Block[29036-29490]"
    }, {
      "left" : "server.search_findElementReferences(filePath, offset, true, new FindElementReferencesConsumer() {\n            @Override\n            public void computedElementReferences(String searchId, Element element) {\n              searchIdRef.set(searchId);\n              semaphore.up();\n            }\n\n            @Override\n            public void onError(RequestError requestError) {\n              semaphore.up();\n            }\n          });",
      "right" : "server.search_findElementReferences(filePath, offset, true, new FindElementReferencesConsumer() {\n            @Override\n            public void computedElementReferences(String searchId, Element element) {\n              searchIdRef.set(searchId);\n              semaphore.up();\n            }\n\n            @Override\n            public void onError(RequestError requestError) {\n              semaphore.up();\n            }\n          });",
      "info" : "ExpressionStatement[28827-29259]:ExpressionStatement[29048-29480]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29031-29117]:Block[29252-29338]"
    }, {
      "left" : "searchIdRef.set(searchId);",
      "right" : "searchIdRef.set(searchId);",
      "info" : "ExpressionStatement[29047-29073]:ExpressionStatement[29268-29294]"
    }, {
      "left" : "semaphore.up();",
      "right" : "semaphore.up();",
      "info" : "ExpressionStatement[29088-29103]:ExpressionStatement[29309-29324]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29200-29245]:Block[29421-29466]"
    }, {
      "left" : "semaphore.up();",
      "right" : "semaphore.up();",
      "info" : "ExpressionStatement[29216-29231]:ExpressionStatement[29437-29452]"
    }, {
      "left" : "if (!ok)",
      "right" : "if (!ok)",
      "info" : "IfStatement[29375-29431]:IfStatement[29596-29652]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29384-29431]:Block[29605-29652]"
    }, {
      "left" : "stopServer();",
      "right" : "stopServer();",
      "info" : "ExpressionStatement[29394-29407]:ExpressionStatement[29615-29628]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[29416-29423]:ReturnStatement[29637-29644]"
    }, {
      "left" : "final long t0 = System.currentTimeMillis();",
      "right" : "final long t0 = System.currentTimeMillis();",
      "info" : "VariableDeclarationStatement[29439-29482]:VariableDeclarationStatement[29660-29703]"
    }, {
      "left" : "semaphore.waitFor(FIND_ELEMENT_REFERENCES_TIMEOUT);",
      "right" : "semaphore.waitFor(FIND_ELEMENT_REFERENCES_TIMEOUT);",
      "info" : "ExpressionStatement[29489-29540]:ExpressionStatement[29710-29761]"
    }, {
      "left" : "if (semaphore.tryUp())",
      "right" : "if (semaphore.tryUp())",
      "info" : "IfStatement[29548-29850]:IfStatement[29769-30071]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29571-29850]:Block[29792-30071]"
    }, {
      "left" : "LOG.info(\"search_findElementReferences() took too long for file \" +\n                 filePath +\n                 \"@\" +\n                 offset +\n                 \": \" +\n                 (System.currentTimeMillis() - t0) +\n                 \"ms\");",
      "right" : "LOG.info(\"search_findElementReferences() took too long for file \" +\n                 filePath +\n                 \"@\" +\n                 offset +\n                 \": \" +\n                 (System.currentTimeMillis() - t0) +\n                 \"ms\");",
      "info" : "ExpressionStatement[29581-29826]:ExpressionStatement[29802-30047]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[29835-29842]:ReturnStatement[30056-30063]"
    }, {
      "left" : "searchId = searchIdRef.get();",
      "right" : "searchId = searchIdRef.get();",
      "info" : "ExpressionStatement[29858-29887]:ExpressionStatement[30079-30108]"
    }, {
      "left" : "if (searchId == null)",
      "right" : "if (searchId == null)",
      "info" : "IfStatement[29894-29941]:IfStatement[30115-30162]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29916-29941]:Block[30137-30162]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[29926-29933]:ReturnStatement[30147-30154]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[29953-30604]:WhileStatement[30174-30825]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29966-30604]:Block[30187-30825]"
    }, {
      "left" : "ProgressManager.checkCanceled();",
      "right" : "ProgressManager.checkCanceled();",
      "info" : "ExpressionStatement[29974-30006]:ExpressionStatement[30195-30227]"
    }, {
      "left" : "synchronized (mySearchResultSets) {\n        SearchResultsSet resultSet;\n        // process already received results\n        while ((resultSet = mySearchResultSets.poll()) != null) {\n          if (!resultSet.id.equals(searchId)) continue;\n          for (final SearchResult searchResult : resultSet.results) {\n            processor.process(searchResult);\n          }\n          if (resultSet.isLast) return;\n        }\n        // wait for more results\n        try {\n          mySearchResultSets.wait();\n        }\n        catch (InterruptedException e) {\n          return;\n        }\n      }",
      "right" : "synchronized (mySearchResultSets) {\n        SearchResultsSet resultSet;\n        // process already received results\n        while ((resultSet = mySearchResultSets.poll()) != null) {\n          if (!resultSet.id.equals(searchId)) continue;\n          for (final SearchResult searchResult : resultSet.results) {\n            processor.process(searchResult);\n          }\n          if (resultSet.isLast) return;\n        }\n        // wait for more results\n        try {\n          mySearchResultSets.wait();\n        }\n        catch (InterruptedException e) {\n          return;\n        }\n      }",
      "info" : "SynchronizedStatement[30013-30598]:SynchronizedStatement[30234-30819]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30047-30598]:Block[30268-30819]"
    }, {
      "left" : "SearchResultsSet resultSet;",
      "right" : "SearchResultsSet resultSet;",
      "info" : "VariableDeclarationStatement[30057-30084]:VariableDeclarationStatement[30278-30305]"
    }, {
      "left" : "while ((resultSet = mySearchResultSets.poll()) != null)",
      "right" : "while ((resultSet = mySearchResultSets.poll()) != null)",
      "info" : "WhileStatement[30137-30427]:WhileStatement[30358-30648]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30193-30427]:Block[30414-30648]"
    }, {
      "left" : "if (!resultSet.id.equals(searchId))",
      "right" : "if (!resultSet.id.equals(searchId))",
      "info" : "IfStatement[30205-30250]:IfStatement[30426-30471]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[30241-30250]:ContinueStatement[30462-30471]"
    }, {
      "left" : "for (final SearchResult searchResult : resultSet.results)",
      "right" : "for (final SearchResult searchResult : resultSet.results)",
      "info" : "EnhancedForStatement[30261-30377]:EnhancedForStatement[30482-30598]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30319-30377]:Block[30540-30598]"
    }, {
      "left" : "processor.process(searchResult);",
      "right" : "processor.process(searchResult);",
      "info" : "ExpressionStatement[30333-30365]:ExpressionStatement[30554-30586]"
    }, {
      "left" : "if (resultSet.isLast)",
      "right" : "if (resultSet.isLast)",
      "info" : "IfStatement[30388-30417]:IfStatement[30609-30638]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[30410-30417]:ReturnStatement[30631-30638]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[30469-30590]:TryStatement[30690-30811]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30473-30521]:Block[30694-30742]"
    }, {
      "left" : "mySearchResultSets.wait();",
      "right" : "mySearchResultSets.wait();",
      "info" : "ExpressionStatement[30485-30511]:ExpressionStatement[30706-30732]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30561-30590]:Block[30782-30811]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[30573-30580]:ReturnStatement[30794-30801]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30714-32126]:Block[30935-32347]"
    }, {
      "left" : "final Ref<String> resultRef = new Ref<String>();",
      "right" : "final Ref<String> resultRef = new Ref<String>();",
      "info" : "VariableDeclarationStatement[30720-30768]:VariableDeclarationStatement[30941-30989]"
    }, {
      "left" : "final Semaphore semaphore = new Semaphore();",
      "right" : "final Semaphore semaphore = new Semaphore();",
      "info" : "VariableDeclarationStatement[30773-30817]:VariableDeclarationStatement[30994-31038]"
    }, {
      "left" : "synchronized (myLock) {\n      if (myServer == null) return null;\n\n      semaphore.down();\n\n      final GetSuggestionsConsumer consumer = new GetSuggestionsConsumer() {\n        @Override\n        public void computedCompletionId(@NotNull final String completionId) {\n          resultRef.set(completionId);\n          semaphore.up();\n        }\n\n        @Override\n        public void onError(@NotNull final RequestError error) {\n          // Not a problem. Happens if a file is outside of the project, or server is just not ready yet.\n          semaphore.up();\n        }\n      };\n\n      final AnalysisServer server = myServer;\n      final boolean ok = runInPooledThreadAndWait(new Runnable() {\n        @Override\n        public void run() {\n          server.completion_getSuggestions(filePath, offset, consumer);\n        }\n      }, \"completion_getSuggestions(\" + filePath + \", \" + offset + \")\", SEND_REQUEST_TIMEOUT);\n\n      if (!ok) {\n        stopServer();\n        return null;\n      }\n    }",
      "right" : "synchronized (myLock) {\n      if (myServer == null) return null;\n\n      semaphore.down();\n\n      final GetSuggestionsConsumer consumer = new GetSuggestionsConsumer() {\n        @Override\n        public void computedCompletionId(@NotNull final String completionId) {\n          resultRef.set(completionId);\n          semaphore.up();\n        }\n\n        @Override\n        public void onError(@NotNull final RequestError error) {\n          // Not a problem. Happens if a file is outside of the project, or server is just not ready yet.\n          semaphore.up();\n        }\n      };\n\n      final AnalysisServer server = myServer;\n      final boolean ok = runInPooledThreadAndWait(new Runnable() {\n        @Override\n        public void run() {\n          server.completion_getSuggestions(filePath, offset, consumer);\n        }\n      }, \"completion_getSuggestions(\" + filePath + \", \" + offset + \")\", SEND_REQUEST_TIMEOUT);\n\n      if (!ok) {\n        stopServer();\n        return null;\n      }\n    }",
      "info" : "SynchronizedStatement[30823-31809]:SynchronizedStatement[31044-32030]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30845-31809]:Block[31066-32030]"
    }, {
      "left" : "if (myServer == null)",
      "right" : "if (myServer == null)",
      "info" : "IfStatement[30853-30887]:IfStatement[31074-31108]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[30875-30887]:ReturnStatement[31096-31108]"
    }, {
      "left" : "semaphore.down();",
      "right" : "semaphore.down();",
      "info" : "ExpressionStatement[30895-30912]:ExpressionStatement[31116-31133]"
    }, {
      "left" : "final GetSuggestionsConsumer consumer = new GetSuggestionsConsumer() {\n        @Override\n        public void computedCompletionId(@NotNull final String completionId) {\n          resultRef.set(completionId);\n          semaphore.up();\n        }\n\n        @Override\n        public void onError(@NotNull final RequestError error) {\n          // Not a problem. Happens if a file is outside of the project, or server is just not ready yet.\n          semaphore.up();\n        }\n      };",
      "right" : "final GetSuggestionsConsumer consumer = new GetSuggestionsConsumer() {\n        @Override\n        public void computedCompletionId(@NotNull final String completionId) {\n          resultRef.set(completionId);\n          semaphore.up();\n        }\n\n        @Override\n        public void onError(@NotNull final RequestError error) {\n          // Not a problem. Happens if a file is outside of the project, or server is just not ready yet.\n          semaphore.up();\n        }\n      };",
      "info" : "VariableDeclarationStatement[30920-31397]:VariableDeclarationStatement[31141-31618]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31086-31162]:Block[31307-31383]"
    }, {
      "left" : "resultRef.set(completionId);",
      "right" : "resultRef.set(completionId);",
      "info" : "ExpressionStatement[31098-31126]:ExpressionStatement[31319-31347]"
    }, {
      "left" : "semaphore.up();",
      "right" : "semaphore.up();",
      "info" : "ExpressionStatement[31137-31152]:ExpressionStatement[31358-31373]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31245-31388]:Block[31466-31609]"
    }, {
      "left" : "semaphore.up();",
      "right" : "semaphore.up();",
      "info" : "ExpressionStatement[31363-31378]:ExpressionStatement[31584-31599]"
    }, {
      "left" : "final AnalysisServer server = myServer;",
      "right" : "final AnalysisServer server = myServer;",
      "info" : "VariableDeclarationStatement[31405-31444]:VariableDeclarationStatement[31626-31665]"
    }, {
      "left" : "final boolean ok = runInPooledThreadAndWait(new Runnable() {\n        @Override\n        public void run() {\n          server.completion_getSuggestions(filePath, offset, consumer);\n        }\n      }, \"completion_getSuggestions(\" + filePath + \", \" + offset + \")\", SEND_REQUEST_TIMEOUT);",
      "right" : "final boolean ok = runInPooledThreadAndWait(new Runnable() {\n        @Override\n        public void run() {\n          server.completion_getSuggestions(filePath, offset, consumer);\n        }\n      }, \"completion_getSuggestions(\" + filePath + \", \" + offset + \")\", SEND_REQUEST_TIMEOUT);",
      "info" : "VariableDeclarationStatement[31451-31734]:VariableDeclarationStatement[31672-31955]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31556-31639]:Block[31777-31860]"
    }, {
      "left" : "server.completion_getSuggestions(filePath, offset, consumer);",
      "right" : "server.completion_getSuggestions(filePath, offset, consumer);",
      "info" : "ExpressionStatement[31568-31629]:ExpressionStatement[31789-31850]"
    }, {
      "left" : "if (!ok)",
      "right" : "if (!ok)",
      "info" : "IfStatement[31742-31803]:IfStatement[31963-32024]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31751-31803]:Block[31972-32024]"
    }, {
      "left" : "stopServer();",
      "right" : "stopServer();",
      "info" : "ExpressionStatement[31761-31774]:ExpressionStatement[31982-31995]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[31783-31795]:ReturnStatement[32004-32016]"
    }, {
      "left" : "final long t0 = System.currentTimeMillis();",
      "right" : "final long t0 = System.currentTimeMillis();",
      "info" : "VariableDeclarationStatement[31815-31858]:VariableDeclarationStatement[32036-32079]"
    }, {
      "left" : "semaphore.waitFor(GET_SUGGESTIONS_TIMEOUT);",
      "right" : "semaphore.waitFor(GET_SUGGESTIONS_TIMEOUT);",
      "info" : "ExpressionStatement[31863-31906]:ExpressionStatement[32084-32127]"
    }, {
      "left" : "if (semaphore.tryUp())",
      "right" : "if (semaphore.tryUp())",
      "info" : "IfStatement[31912-32093]:IfStatement[32133-32314]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31935-32093]:Block[32156-32314]"
    }, {
      "left" : "LOG.info(\"completion_getSuggestions() took too long for file \" + filePath + \": \" + (System.currentTimeMillis() - t0) + \"ms\");",
      "right" : "LOG.info(\"completion_getSuggestions() took too long for file \" + filePath + \": \" + (System.currentTimeMillis() - t0) + \"ms\");",
      "info" : "ExpressionStatement[31943-32068]:ExpressionStatement[32164-32289]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[32075-32087]:ReturnStatement[32296-32308]"
    }, {
      "left" : "return resultRef.get();",
      "right" : "return resultRef.get();",
      "info" : "ReturnStatement[32099-32122]:ReturnStatement[32320-32343]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32794-32915]:Block[33015-33136]"
    }, {
      "left" : "resultRef.set(new FormatResult(edits, selectionOffset, selectionLength));",
      "right" : "resultRef.set(new FormatResult(edits, selectionOffset, selectionLength));",
      "info" : "ExpressionStatement[32806-32879]:ExpressionStatement[33027-33100]"
    }, {
      "left" : "semaphore.up();",
      "right" : "semaphore.up();",
      "info" : "ExpressionStatement[32890-32905]:ExpressionStatement[33111-33126]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34373-34441]:Block[34794-34862]"
    }, {
      "left" : "resultRef.set(edit);",
      "right" : "resultRef.set(edit);",
      "info" : "ExpressionStatement[34385-34405]:ExpressionStatement[34806-34826]"
    }, {
      "left" : "semaphore.up();",
      "right" : "semaphore.up();",
      "info" : "ExpressionStatement[34416-34431]:ExpressionStatement[34837-34852]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35374-35976]:Block[36090-36692]"
    }, {
      "left" : "synchronized (myLock) {\n      if (myServer == null) return false;\n\n      String rootsStr = roots != null ? StringUtil.join(roots, \",\\n\") : \"all roots\";\n      LOG.debug(\"analysis_reanalyze, roots: \" + rootsStr);\n\n      final AnalysisServer server = myServer;\n      final boolean ok = runInPooledThreadAndWait(new Runnable() {\n        @Override\n        public void run() {\n          server.analysis_reanalyze(roots);\n        }\n      }, \"analysis_reanalyze(\" + rootsStr + \")\", SEND_REQUEST_TIMEOUT);\n\n      if (!ok) {\n        stopServer();\n        return false;\n      }\n\n      return true;\n    }",
      "right" : "synchronized (myLock) {\n      if (myServer == null) return false;\n\n      String rootsStr = roots != null ? StringUtil.join(roots, \",\\n\") : \"all roots\";\n      LOG.debug(\"analysis_reanalyze, roots: \" + rootsStr);\n\n      final AnalysisServer server = myServer;\n      final boolean ok = runInPooledThreadAndWait(new Runnable() {\n        @Override\n        public void run() {\n          server.analysis_reanalyze(roots);\n        }\n      }, \"analysis_reanalyze(\" + rootsStr + \")\", SEND_REQUEST_TIMEOUT);\n\n      if (!ok) {\n        stopServer();\n        return false;\n      }\n\n      return true;\n    }",
      "info" : "SynchronizedStatement[35380-35972]:SynchronizedStatement[36096-36688]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35402-35972]:Block[36118-36688]"
    }, {
      "left" : "if (myServer == null)",
      "right" : "if (myServer == null)",
      "info" : "IfStatement[35410-35445]:IfStatement[36126-36161]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[35432-35445]:ReturnStatement[36148-36161]"
    }, {
      "left" : "String rootsStr = roots != null ? StringUtil.join(roots, \",\\n\") : \"all roots\";",
      "right" : "String rootsStr = roots != null ? StringUtil.join(roots, \",\\n\") : \"all roots\";",
      "info" : "VariableDeclarationStatement[35453-35531]:VariableDeclarationStatement[36169-36247]"
    }, {
      "left" : "LOG.debug(\"analysis_reanalyze, roots: \" + rootsStr);",
      "right" : "LOG.debug(\"analysis_reanalyze, roots: \" + rootsStr);",
      "info" : "ExpressionStatement[35538-35590]:ExpressionStatement[36254-36306]"
    }, {
      "left" : "final AnalysisServer server = myServer;",
      "right" : "final AnalysisServer server = myServer;",
      "info" : "VariableDeclarationStatement[35598-35637]:VariableDeclarationStatement[36314-36353]"
    }, {
      "left" : "final boolean ok = runInPooledThreadAndWait(new Runnable() {\n        @Override\n        public void run() {\n          server.analysis_reanalyze(roots);\n        }\n      }, \"analysis_reanalyze(\" + rootsStr + \")\", SEND_REQUEST_TIMEOUT);",
      "right" : "final boolean ok = runInPooledThreadAndWait(new Runnable() {\n        @Override\n        public void run() {\n          server.analysis_reanalyze(roots);\n        }\n      }, \"analysis_reanalyze(\" + rootsStr + \")\", SEND_REQUEST_TIMEOUT);",
      "info" : "VariableDeclarationStatement[35644-35876]:VariableDeclarationStatement[36360-36592]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35749-35804]:Block[36465-36520]"
    }, {
      "left" : "server.analysis_reanalyze(roots);",
      "right" : "server.analysis_reanalyze(roots);",
      "info" : "ExpressionStatement[35761-35794]:ExpressionStatement[36477-36510]"
    }, {
      "left" : "if (!ok)",
      "right" : "if (!ok)",
      "info" : "IfStatement[35884-35946]:IfStatement[36600-36662]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35893-35946]:Block[36609-36662]"
    }, {
      "left" : "stopServer();",
      "right" : "stopServer();",
      "info" : "ExpressionStatement[35903-35916]:ExpressionStatement[36619-36632]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[35925-35938]:ReturnStatement[36641-36654]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[35954-35966]:ReturnStatement[36670-36682]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36024-36675]:Block[36740-37391]"
    }, {
      "left" : "synchronized (myLock) {\n      if (myServer == null) return false;\n\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"analysis_setPriorityFiles, files:\\n\" + StringUtil.join(myVisibleFiles, \",\\n\"));\n      }\n\n      final AnalysisServer server = myServer;\n      final boolean ok = runInPooledThreadAndWait(new Runnable() {\n        @Override\n        public void run() {\n          server.analysis_setPriorityFiles(myVisibleFiles);\n        }\n      }, \"analysis_setPriorityFiles(\" + StringUtil.join(myVisibleFiles, \", \") + \")\", SEND_REQUEST_TIMEOUT);\n\n      if (!ok) {\n        stopServer();\n        return false;\n      }\n\n      return true;\n    }",
      "right" : "synchronized (myLock) {\n      if (myServer == null) return false;\n\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"analysis_setPriorityFiles, files:\\n\" + StringUtil.join(myVisibleFiles, \",\\n\"));\n      }\n\n      final AnalysisServer server = myServer;\n      final boolean ok = runInPooledThreadAndWait(new Runnable() {\n        @Override\n        public void run() {\n          server.analysis_setPriorityFiles(myVisibleFiles);\n        }\n      }, \"analysis_setPriorityFiles(\" + StringUtil.join(myVisibleFiles, \", \") + \")\", SEND_REQUEST_TIMEOUT);\n\n      if (!ok) {\n        stopServer();\n        return false;\n      }\n\n      return true;\n    }",
      "info" : "SynchronizedStatement[36030-36671]:SynchronizedStatement[36746-37387]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36052-36671]:Block[36768-37387]"
    }, {
      "left" : "if (myServer == null)",
      "right" : "if (myServer == null)",
      "info" : "IfStatement[36060-36095]:IfStatement[36776-36811]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[36082-36095]:ReturnStatement[36798-36811]"
    }, {
      "left" : "if (LOG.isDebugEnabled())",
      "right" : "if (LOG.isDebugEnabled())",
      "info" : "IfStatement[36103-36237]:IfStatement[36819-36953]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36129-36237]:Block[36845-36953]"
    }, {
      "left" : "LOG.debug(\"analysis_setPriorityFiles, files:\\n\" + StringUtil.join(myVisibleFiles, \",\\n\"));",
      "right" : "LOG.debug(\"analysis_setPriorityFiles, files:\\n\" + StringUtil.join(myVisibleFiles, \",\\n\"));",
      "info" : "ExpressionStatement[36139-36229]:ExpressionStatement[36855-36945]"
    }, {
      "left" : "final AnalysisServer server = myServer;",
      "right" : "final AnalysisServer server = myServer;",
      "info" : "VariableDeclarationStatement[36245-36284]:VariableDeclarationStatement[36961-37000]"
    }, {
      "left" : "final boolean ok = runInPooledThreadAndWait(new Runnable() {\n        @Override\n        public void run() {\n          server.analysis_setPriorityFiles(myVisibleFiles);\n        }\n      }, \"analysis_setPriorityFiles(\" + StringUtil.join(myVisibleFiles, \", \") + \")\", SEND_REQUEST_TIMEOUT);",
      "right" : "final boolean ok = runInPooledThreadAndWait(new Runnable() {\n        @Override\n        public void run() {\n          server.analysis_setPriorityFiles(myVisibleFiles);\n        }\n      }, \"analysis_setPriorityFiles(\" + StringUtil.join(myVisibleFiles, \", \") + \")\", SEND_REQUEST_TIMEOUT);",
      "info" : "VariableDeclarationStatement[36291-36575]:VariableDeclarationStatement[37007-37291]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36396-36467]:Block[37112-37183]"
    }, {
      "left" : "server.analysis_setPriorityFiles(myVisibleFiles);",
      "right" : "server.analysis_setPriorityFiles(myVisibleFiles);",
      "info" : "ExpressionStatement[36408-36457]:ExpressionStatement[37124-37173]"
    }, {
      "left" : "if (!ok)",
      "right" : "if (!ok)",
      "info" : "IfStatement[36583-36645]:IfStatement[37299-37361]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36592-36645]:Block[37308-37361]"
    }, {
      "left" : "stopServer();",
      "right" : "stopServer();",
      "info" : "ExpressionStatement[36602-36615]:ExpressionStatement[37318-37331]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[36624-36637]:ReturnStatement[37340-37353]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[36653-36665]:ReturnStatement[37369-37381]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36723-37563]:Block[37439-38279]"
    }, {
      "left" : "synchronized (myLock) {\n      if (myServer == null) return false;\n\n      final Map<String, List<String>> subscriptions = new THashMap<String, List<String>>();\n      subscriptions.put(AnalysisService.NAVIGATION, myVisibleFiles);\n      subscriptions.put(AnalysisService.HIGHLIGHTS, myVisibleFiles);\n\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"analysis_setSubscriptions, subscriptions:\\n\" + subscriptions);\n      }\n\n      final AnalysisServer server = myServer;\n      final boolean ok = runInPooledThreadAndWait(new Runnable() {\n        @Override\n        public void run() {\n          server.analysis_setSubscriptions(subscriptions);\n        }\n      }, \"analysis_setSubscriptions(\" + subscriptions + \")\", SEND_REQUEST_TIMEOUT);\n\n      if (!ok) {\n        stopServer();\n        return false;\n      }\n\n      return true;\n    }",
      "right" : "synchronized (myLock) {\n      if (myServer == null) return false;\n\n      final Map<String, List<String>> subscriptions = new THashMap<String, List<String>>();\n      subscriptions.put(AnalysisService.NAVIGATION, myVisibleFiles);\n      subscriptions.put(AnalysisService.HIGHLIGHTS, myVisibleFiles);\n\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"analysis_setSubscriptions, subscriptions:\\n\" + subscriptions);\n      }\n\n      final AnalysisServer server = myServer;\n      final boolean ok = runInPooledThreadAndWait(new Runnable() {\n        @Override\n        public void run() {\n          server.analysis_setSubscriptions(subscriptions);\n        }\n      }, \"analysis_setSubscriptions(\" + subscriptions + \")\", SEND_REQUEST_TIMEOUT);\n\n      if (!ok) {\n        stopServer();\n        return false;\n      }\n\n      return true;\n    }",
      "info" : "SynchronizedStatement[36729-37559]:SynchronizedStatement[37445-38275]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36751-37559]:Block[37467-38275]"
    }, {
      "left" : "if (myServer == null)",
      "right" : "if (myServer == null)",
      "info" : "IfStatement[36759-36794]:IfStatement[37475-37510]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[36781-36794]:ReturnStatement[37497-37510]"
    }, {
      "left" : "final Map<String, List<String>> subscriptions = new THashMap<String, List<String>>();",
      "right" : "final Map<String, List<String>> subscriptions = new THashMap<String, List<String>>();",
      "info" : "VariableDeclarationStatement[36802-36887]:VariableDeclarationStatement[37518-37603]"
    }, {
      "left" : "subscriptions.put(AnalysisService.NAVIGATION, myVisibleFiles);",
      "right" : "subscriptions.put(AnalysisService.NAVIGATION, myVisibleFiles);",
      "info" : "ExpressionStatement[36894-36956]:ExpressionStatement[37610-37672]"
    }, {
      "left" : "subscriptions.put(AnalysisService.HIGHLIGHTS, myVisibleFiles);",
      "right" : "subscriptions.put(AnalysisService.HIGHLIGHTS, myVisibleFiles);",
      "info" : "ExpressionStatement[36963-37025]:ExpressionStatement[37679-37741]"
    }, {
      "left" : "if (LOG.isDebugEnabled())",
      "right" : "if (LOG.isDebugEnabled())",
      "info" : "IfStatement[37033-37150]:IfStatement[37749-37866]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37059-37150]:Block[37775-37866]"
    }, {
      "left" : "LOG.debug(\"analysis_setSubscriptions, subscriptions:\\n\" + subscriptions);",
      "right" : "LOG.debug(\"analysis_setSubscriptions, subscriptions:\\n\" + subscriptions);",
      "info" : "ExpressionStatement[37069-37142]:ExpressionStatement[37785-37858]"
    }, {
      "left" : "final AnalysisServer server = myServer;",
      "right" : "final AnalysisServer server = myServer;",
      "info" : "VariableDeclarationStatement[37158-37197]:VariableDeclarationStatement[37874-37913]"
    }, {
      "left" : "final boolean ok = runInPooledThreadAndWait(new Runnable() {\n        @Override\n        public void run() {\n          server.analysis_setSubscriptions(subscriptions);\n        }\n      }, \"analysis_setSubscriptions(\" + subscriptions + \")\", SEND_REQUEST_TIMEOUT);",
      "right" : "final boolean ok = runInPooledThreadAndWait(new Runnable() {\n        @Override\n        public void run() {\n          server.analysis_setSubscriptions(subscriptions);\n        }\n      }, \"analysis_setSubscriptions(\" + subscriptions + \")\", SEND_REQUEST_TIMEOUT);",
      "info" : "VariableDeclarationStatement[37204-37463]:VariableDeclarationStatement[37920-38179]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37309-37379]:Block[38025-38095]"
    }, {
      "left" : "server.analysis_setSubscriptions(subscriptions);",
      "right" : "server.analysis_setSubscriptions(subscriptions);",
      "info" : "ExpressionStatement[37321-37369]:ExpressionStatement[38037-38085]"
    }, {
      "left" : "if (!ok)",
      "right" : "if (!ok)",
      "info" : "IfStatement[37471-37533]:IfStatement[38187-38249]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37480-37533]:Block[38196-38249]"
    }, {
      "left" : "stopServer();",
      "right" : "stopServer();",
      "info" : "ExpressionStatement[37490-37503]:ExpressionStatement[38206-38219]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[37512-37525]:ReturnStatement[38228-38241]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[37541-37553]:ReturnStatement[38257-38269]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37620-40171]:Block[38336-40887]"
    }, {
      "left" : "synchronized (myLock) {\n      mySdkHome = sdk.getHomePath();\n\n      final String testSdkHome = System.getProperty(\"dart.sdk\");\n      if (ApplicationManager.getApplication().isUnitTestMode() && testSdkHome == null) return;\n\n      final String runtimePath =\n        FileUtil.toSystemDependentName((ApplicationManager.getApplication().isUnitTestMode() ? testSdkHome : mySdkHome) + \"/bin/dart\");\n      final String analysisServerPath = FileUtil.toSystemDependentName(\n        (ApplicationManager.getApplication().isUnitTestMode() ? testSdkHome : mySdkHome) + \"/bin/snapshots/analysis_server.dart.snapshot\");\n\n      final DebugPrintStream debugStream = new DebugPrintStream() {\n        @Override\n        public void println(String str) {\n          //System.out.println(\"debugStream: \" + str);\n        }\n      };\n\n      final int port = NetUtils.tryToFindAvailableSocketPort(10000);\n\n      String argsRaw;\n      try {\n        argsRaw = Registry.stringValue(\"dart.server.additional.arguments\");\n      }\n      catch (MissingResourceException e) {\n        argsRaw = \"\";\n      }\n      argsRaw += \" --useAnalysisHighlight2\";\n\n      myServerSocket =\n        new StdioServerSocket(runtimePath, analysisServerPath, null, debugStream, ArrayUtil.toStringArray(StringUtil.split(argsRaw, \" \")),\n                              false, false, port, false, FileReadMode.NORMALIZE_EOL_ALWAYS);\n      myServerSocket.setClientId(ApplicationNamesInfo.getInstance().getFullProductName().replace(' ', '_'));\n      myServerSocket.setClientVersion(ApplicationInfo.getInstance().getApiVersion());\n      myServer = new RemoteAnalysisServerImpl(myServerSocket);\n\n      try {\n        myServer.start();\n        myServer.server_setSubscriptions(SERVER_SUBSCRIPTIONS);\n        myServer.addAnalysisServerListener(myAnalysisServerListener);\n        mySdkVersion = sdk.getVersion();\n\n        final AnalysisServer server = myServer;\n        final boolean ok = runInPooledThreadAndWait(new Runnable() {\n          @Override\n          public void run() {\n            server.analysis_updateOptions(new AnalysisOptions(true, true, true, true, false, true, false));\n          }\n        }, \"analysis_updateOptions(true, true, true, true, false, true, false)\", SEND_REQUEST_TIMEOUT);\n\n        if (!ok) {\n          stopServer();\n          return;\n        }\n\n        LOG.info(\"Server started, see status at http://localhost:\" + port + \"/status\");\n      }\n      catch (Exception e) {\n        LOG.warn(\"Failed to start Dart analysis server, port=\" + port, e);\n        stopServer();\n      }\n    }",
      "right" : "synchronized (myLock) {\n      mySdkHome = sdk.getHomePath();\n\n      final String testSdkHome = System.getProperty(\"dart.sdk\");\n      if (ApplicationManager.getApplication().isUnitTestMode() && testSdkHome == null) return;\n\n      final String runtimePath =\n        FileUtil.toSystemDependentName((ApplicationManager.getApplication().isUnitTestMode() ? testSdkHome : mySdkHome) + \"/bin/dart\");\n      final String analysisServerPath = FileUtil.toSystemDependentName(\n        (ApplicationManager.getApplication().isUnitTestMode() ? testSdkHome : mySdkHome) + \"/bin/snapshots/analysis_server.dart.snapshot\");\n\n      final DebugPrintStream debugStream = new DebugPrintStream() {\n        @Override\n        public void println(String str) {\n          //System.out.println(\"debugStream: \" + str);\n        }\n      };\n\n      final int port = NetUtils.tryToFindAvailableSocketPort(10000);\n\n      String argsRaw;\n      try {\n        argsRaw = Registry.stringValue(\"dart.server.additional.arguments\");\n      }\n      catch (MissingResourceException e) {\n        argsRaw = \"\";\n      }\n      argsRaw += \" --useAnalysisHighlight2\";\n\n      myServerSocket =\n        new StdioServerSocket(runtimePath, analysisServerPath, null, debugStream, ArrayUtil.toStringArray(StringUtil.split(argsRaw, \" \")),\n                              false, false, port, false, FileReadMode.NORMALIZE_EOL_ALWAYS);\n      myServerSocket.setClientId(ApplicationNamesInfo.getInstance().getFullProductName().replace(' ', '_'));\n      myServerSocket.setClientVersion(ApplicationInfo.getInstance().getApiVersion());\n      myServer = new RemoteAnalysisServerImpl(myServerSocket);\n\n      try {\n        myServer.start();\n        myServer.server_setSubscriptions(SERVER_SUBSCRIPTIONS);\n        myServer.addAnalysisServerListener(myAnalysisServerListener);\n        mySdkVersion = sdk.getVersion();\n\n        final AnalysisServer server = myServer;\n        final boolean ok = runInPooledThreadAndWait(new Runnable() {\n          @Override\n          public void run() {\n            server.analysis_updateOptions(new AnalysisOptions(true, true, true, true, false, true, false));\n          }\n        }, \"analysis_updateOptions(true, true, true, true, false, true, false)\", SEND_REQUEST_TIMEOUT);\n\n        if (!ok) {\n          stopServer();\n          return;\n        }\n\n        LOG.info(\"Server started, see status at http://localhost:\" + port + \"/status\");\n      }\n      catch (Exception e) {\n        LOG.warn(\"Failed to start Dart analysis server, port=\" + port, e);\n        stopServer();\n      }\n    }",
      "info" : "SynchronizedStatement[37626-40167]:SynchronizedStatement[38342-40883]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37648-40167]:Block[38364-40883]"
    }, {
      "left" : "mySdkHome = sdk.getHomePath();",
      "right" : "mySdkHome = sdk.getHomePath();",
      "info" : "ExpressionStatement[37656-37686]:ExpressionStatement[38372-38402]"
    }, {
      "left" : "final String testSdkHome = System.getProperty(\"dart.sdk\");",
      "right" : "final String testSdkHome = System.getProperty(\"dart.sdk\");",
      "info" : "VariableDeclarationStatement[37694-37752]:VariableDeclarationStatement[38410-38468]"
    }, {
      "left" : "if (ApplicationManager.getApplication().isUnitTestMode() && testSdkHome == null)",
      "right" : "if (ApplicationManager.getApplication().isUnitTestMode() && testSdkHome == null)",
      "info" : "IfStatement[37759-37847]:IfStatement[38475-38563]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[37840-37847]:ReturnStatement[38556-38563]"
    }, {
      "left" : "final String runtimePath =\n        FileUtil.toSystemDependentName((ApplicationManager.getApplication().isUnitTestMode() ? testSdkHome : mySdkHome) + \"/bin/dart\");",
      "right" : "final String runtimePath =\n        FileUtil.toSystemDependentName((ApplicationManager.getApplication().isUnitTestMode() ? testSdkHome : mySdkHome) + \"/bin/dart\");",
      "info" : "VariableDeclarationStatement[37855-38017]:VariableDeclarationStatement[38571-38733]"
    }, {
      "left" : "final String analysisServerPath = FileUtil.toSystemDependentName(\n        (ApplicationManager.getApplication().isUnitTestMode() ? testSdkHome : mySdkHome) + \"/bin/snapshots/analysis_server.dart.snapshot\");",
      "right" : "final String analysisServerPath = FileUtil.toSystemDependentName(\n        (ApplicationManager.getApplication().isUnitTestMode() ? testSdkHome : mySdkHome) + \"/bin/snapshots/analysis_server.dart.snapshot\");",
      "info" : "VariableDeclarationStatement[38024-38229]:VariableDeclarationStatement[38740-38945]"
    }, {
      "left" : "final DebugPrintStream debugStream = new DebugPrintStream() {\n        @Override\n        public void println(String str) {\n          //System.out.println(\"debugStream: \" + str);\n        }\n      };",
      "right" : "final DebugPrintStream debugStream = new DebugPrintStream() {\n        @Override\n        public void println(String str) {\n          //System.out.println(\"debugStream: \" + str);\n        }\n      };",
      "info" : "VariableDeclarationStatement[38237-38432]:VariableDeclarationStatement[38953-39148]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38357-38423]:Block[39073-39139]"
    }, {
      "left" : "final int port = NetUtils.tryToFindAvailableSocketPort(10000);",
      "right" : "final int port = NetUtils.tryToFindAvailableSocketPort(10000);",
      "info" : "VariableDeclarationStatement[38440-38502]:VariableDeclarationStatement[39156-39218]"
    }, {
      "left" : "String argsRaw;",
      "right" : "String argsRaw;",
      "info" : "VariableDeclarationStatement[38510-38525]:VariableDeclarationStatement[39226-39241]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[38532-38694]:TryStatement[39248-39410]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38536-38621]:Block[39252-39337]"
    }, {
      "left" : "argsRaw = Registry.stringValue(\"dart.server.additional.arguments\");",
      "right" : "argsRaw = Registry.stringValue(\"dart.server.additional.arguments\");",
      "info" : "ExpressionStatement[38546-38613]:ExpressionStatement[39262-39329]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38663-38694]:Block[39379-39410]"
    }, {
      "left" : "argsRaw = \"\";",
      "right" : "argsRaw = \"\";",
      "info" : "ExpressionStatement[38673-38686]:ExpressionStatement[39389-39402]"
    }, {
      "left" : "argsRaw += \" --useAnalysisHighlight2\";",
      "right" : "argsRaw += \" --useAnalysisHighlight2\";",
      "info" : "ExpressionStatement[38701-38739]:ExpressionStatement[39417-39455]"
    }, {
      "left" : "myServerSocket =\n        new StdioServerSocket(runtimePath, analysisServerPath, null, debugStream, ArrayUtil.toStringArray(StringUtil.split(argsRaw, \" \")),\n                              false, false, port, false, FileReadMode.NORMALIZE_EOL_ALWAYS);",
      "right" : "myServerSocket =\n        new StdioServerSocket(runtimePath, analysisServerPath, null, debugStream, ArrayUtil.toStringArray(StringUtil.split(argsRaw, \" \")),\n                              false, false, port, false, FileReadMode.NORMALIZE_EOL_ALWAYS);",
      "info" : "ExpressionStatement[38747-38995]:ExpressionStatement[39463-39711]"
    }, {
      "left" : "myServerSocket.setClientId(ApplicationNamesInfo.getInstance().getFullProductName().replace(' ', '_'));",
      "right" : "myServerSocket.setClientId(ApplicationNamesInfo.getInstance().getFullProductName().replace(' ', '_'));",
      "info" : "ExpressionStatement[39002-39104]:ExpressionStatement[39718-39820]"
    }, {
      "left" : "myServerSocket.setClientVersion(ApplicationInfo.getInstance().getApiVersion());",
      "right" : "myServerSocket.setClientVersion(ApplicationInfo.getInstance().getApiVersion());",
      "info" : "ExpressionStatement[39111-39190]:ExpressionStatement[39827-39906]"
    }, {
      "left" : "myServer = new RemoteAnalysisServerImpl(myServerSocket);",
      "right" : "myServer = new RemoteAnalysisServerImpl(myServerSocket);",
      "info" : "ExpressionStatement[39197-39253]:ExpressionStatement[39913-39969]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[39261-40161]:TryStatement[39977-40877]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39265-40028]:Block[39981-40744]"
    }, {
      "left" : "myServer.start();",
      "right" : "myServer.start();",
      "info" : "ExpressionStatement[39275-39292]:ExpressionStatement[39991-40008]"
    }, {
      "left" : "myServer.server_setSubscriptions(SERVER_SUBSCRIPTIONS);",
      "right" : "myServer.server_setSubscriptions(SERVER_SUBSCRIPTIONS);",
      "info" : "ExpressionStatement[39301-39356]:ExpressionStatement[40017-40072]"
    }, {
      "left" : "myServer.addAnalysisServerListener(myAnalysisServerListener);",
      "right" : "myServer.addAnalysisServerListener(myAnalysisServerListener);",
      "info" : "ExpressionStatement[39365-39426]:ExpressionStatement[40081-40142]"
    }, {
      "left" : "mySdkVersion = sdk.getVersion();",
      "right" : "mySdkVersion = sdk.getVersion();",
      "info" : "ExpressionStatement[39435-39467]:ExpressionStatement[40151-40183]"
    }, {
      "left" : "final AnalysisServer server = myServer;",
      "right" : "final AnalysisServer server = myServer;",
      "info" : "VariableDeclarationStatement[39477-39516]:VariableDeclarationStatement[40193-40232]"
    }, {
      "left" : "final boolean ok = runInPooledThreadAndWait(new Runnable() {\n          @Override\n          public void run() {\n            server.analysis_updateOptions(new AnalysisOptions(true, true, true, true, false, true, false));\n          }\n        }, \"analysis_updateOptions(true, true, true, true, false, true, false)\", SEND_REQUEST_TIMEOUT);",
      "right" : "final boolean ok = runInPooledThreadAndWait(new Runnable() {\n          @Override\n          public void run() {\n            server.analysis_updateOptions(new AnalysisOptions(true, true, true, true, false, true, false));\n          }\n        }, \"analysis_updateOptions(true, true, true, true, false, true, false)\", SEND_REQUEST_TIMEOUT);",
      "info" : "VariableDeclarationStatement[39525-39859]:VariableDeclarationStatement[40241-40575]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39634-39755]:Block[40350-40471]"
    }, {
      "left" : "server.analysis_updateOptions(new AnalysisOptions(true, true, true, true, false, true, false));",
      "right" : "server.analysis_updateOptions(new AnalysisOptions(true, true, true, true, false, true, false));",
      "info" : "ExpressionStatement[39648-39743]:ExpressionStatement[40364-40459]"
    }, {
      "left" : "if (!ok)",
      "right" : "if (!ok)",
      "info" : "IfStatement[39869-39931]:IfStatement[40585-40647]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39878-39931]:Block[40594-40647]"
    }, {
      "left" : "stopServer();",
      "right" : "stopServer();",
      "info" : "ExpressionStatement[39890-39903]:ExpressionStatement[40606-40619]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[39914-39921]:ReturnStatement[40630-40637]"
    }, {
      "left" : "LOG.info(\"Server started, see status at http://localhost:\" + port + \"/status\");",
      "right" : "LOG.info(\"Server started, see status at http://localhost:\" + port + \"/status\");",
      "info" : "ExpressionStatement[39941-40020]:ExpressionStatement[40657-40736]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40055-40161]:Block[40771-40877]"
    }, {
      "left" : "LOG.warn(\"Failed to start Dart analysis server, port=\" + port, e);",
      "right" : "LOG.warn(\"Failed to start Dart analysis server, port=\" + port, e);",
      "info" : "ExpressionStatement[40065-40131]:ExpressionStatement[40781-40847]"
    }, {
      "left" : "stopServer();",
      "right" : "stopServer();",
      "info" : "ExpressionStatement[40140-40153]:ExpressionStatement[40856-40869]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40272-40701]:Block[40988-41417]"
    }, {
      "left" : "synchronized (myLock) {\n      if (myServer == null || !sdk.getHomePath().equals(mySdkHome) || !sdk.getVersion().equals(mySdkVersion) || !myServer.isSocketOpen()) {\n        stopServer();\n\n        if (isDartSdkVersionSufficient(sdk)) {\n          startServer(sdk);\n        }\n      }\n\n      if (myServer != null) {\n        myRootsHandler.ensureProjectServed(project);\n        return true;\n      }\n\n      return false;\n    }",
      "right" : "synchronized (myLock) {\n      if (myServer == null || !sdk.getHomePath().equals(mySdkHome) || !sdk.getVersion().equals(mySdkVersion) || !myServer.isSocketOpen()) {\n        stopServer();\n\n        if (isDartSdkVersionSufficient(sdk)) {\n          startServer(sdk);\n        }\n      }\n\n      if (myServer != null) {\n        myRootsHandler.ensureProjectServed(project);\n        return true;\n      }\n\n      return false;\n    }",
      "info" : "SynchronizedStatement[40278-40697]:SynchronizedStatement[40994-41413]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40300-40697]:Block[41016-41413]"
    }, {
      "left" : "if (myServer == null || !sdk.getHomePath().equals(mySdkHome) || !sdk.getVersion().equals(mySdkVersion) || !myServer.isSocketOpen())",
      "right" : "if (myServer == null || !sdk.getHomePath().equals(mySdkHome) || !sdk.getVersion().equals(mySdkVersion) || !myServer.isSocketOpen())",
      "info" : "IfStatement[40308-40557]:IfStatement[41024-41273]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40440-40557]:Block[41156-41273]"
    }, {
      "left" : "stopServer();",
      "right" : "stopServer();",
      "info" : "ExpressionStatement[40450-40463]:ExpressionStatement[41166-41179]"
    }, {
      "left" : "if (isDartSdkVersionSufficient(sdk))",
      "right" : "if (isDartSdkVersionSufficient(sdk))",
      "info" : "IfStatement[40473-40549]:IfStatement[41189-41265]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40510-40549]:Block[41226-41265]"
    }, {
      "left" : "startServer(sdk);",
      "right" : "startServer(sdk);",
      "info" : "ExpressionStatement[40522-40539]:ExpressionStatement[41238-41255]"
    }, {
      "left" : "if (myServer != null)",
      "right" : "if (myServer != null)",
      "info" : "IfStatement[40565-40670]:IfStatement[41281-41386]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40587-40670]:Block[41303-41386]"
    }, {
      "left" : "myRootsHandler.ensureProjectServed(project);",
      "right" : "myRootsHandler.ensureProjectServed(project);",
      "info" : "ExpressionStatement[40597-40641]:ExpressionStatement[41313-41357]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[40650-40662]:ReturnStatement[41366-41378]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[40678-40691]:ReturnStatement[41394-41407]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40731-41335]:Block[41447-42051]"
    }, {
      "left" : "synchronized (myLock) {\n      if (myServer != null) {\n        LOG.debug(\"stopping server\");\n        myServer.removeAnalysisServerListener(myAnalysisServerListener);\n\n        final AnalysisServer server = myServer;\n        final boolean ok = runInPooledThreadAndWait(new Runnable() {\n          @Override\n          public void run() {\n            server.server_shutdown();\n          }\n        }, \"server_shutdown()\", SEND_REQUEST_TIMEOUT);\n\n        if (!ok) {\n          if (myServerSocket != null) {\n            myServerSocket.stop();\n          }\n        }\n      }\n\n      onServerStopped();\n    }",
      "right" : "synchronized (myLock) {\n      if (myServer != null) {\n        LOG.debug(\"stopping server\");\n        myServer.removeAnalysisServerListener(myAnalysisServerListener);\n\n        final AnalysisServer server = myServer;\n        final boolean ok = runInPooledThreadAndWait(new Runnable() {\n          @Override\n          public void run() {\n            server.server_shutdown();\n          }\n        }, \"server_shutdown()\", SEND_REQUEST_TIMEOUT);\n\n        if (!ok) {\n          if (myServerSocket != null) {\n            myServerSocket.stop();\n          }\n        }\n      }\n\n      onServerStopped();\n    }",
      "info" : "SynchronizedStatement[40737-41331]:SynchronizedStatement[41453-42047]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40759-41331]:Block[41475-42047]"
    }, {
      "left" : "if (myServer != null)",
      "right" : "if (myServer != null)",
      "info" : "IfStatement[40767-41299]:IfStatement[41483-42015]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40789-41299]:Block[41505-42015]"
    }, {
      "left" : "LOG.debug(\"stopping server\");",
      "right" : "LOG.debug(\"stopping server\");",
      "info" : "ExpressionStatement[40799-40828]:ExpressionStatement[41515-41544]"
    }, {
      "left" : "myServer.removeAnalysisServerListener(myAnalysisServerListener);",
      "right" : "myServer.removeAnalysisServerListener(myAnalysisServerListener);",
      "info" : "ExpressionStatement[40837-40901]:ExpressionStatement[41553-41617]"
    }, {
      "left" : "final AnalysisServer server = myServer;",
      "right" : "final AnalysisServer server = myServer;",
      "info" : "VariableDeclarationStatement[40911-40950]:VariableDeclarationStatement[41627-41666]"
    }, {
      "left" : "final boolean ok = runInPooledThreadAndWait(new Runnable() {\n          @Override\n          public void run() {\n            server.server_shutdown();\n          }\n        }, \"server_shutdown()\", SEND_REQUEST_TIMEOUT);",
      "right" : "final boolean ok = runInPooledThreadAndWait(new Runnable() {\n          @Override\n          public void run() {\n            server.server_shutdown();\n          }\n        }, \"server_shutdown()\", SEND_REQUEST_TIMEOUT);",
      "info" : "VariableDeclarationStatement[40959-41174]:VariableDeclarationStatement[41675-41890]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41068-41119]:Block[41784-41835]"
    }, {
      "left" : "server.server_shutdown();",
      "right" : "server.server_shutdown();",
      "info" : "ExpressionStatement[41082-41107]:ExpressionStatement[41798-41823]"
    }, {
      "left" : "if (!ok)",
      "right" : "if (!ok)",
      "info" : "IfStatement[41184-41291]:IfStatement[41900-42007]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41193-41291]:Block[41909-42007]"
    }, {
      "left" : "if (myServerSocket != null)",
      "right" : "if (myServerSocket != null)",
      "info" : "IfStatement[41205-41281]:IfStatement[41921-41997]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41233-41281]:Block[41949-41997]"
    }, {
      "left" : "myServerSocket.stop();",
      "right" : "myServerSocket.stop();",
      "info" : "ExpressionStatement[41247-41269]:ExpressionStatement[41963-41985]"
    }, {
      "left" : "onServerStopped();",
      "right" : "onServerStopped();",
      "info" : "ExpressionStatement[41307-41325]:ExpressionStatement[42023-42041]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41370-41989]:Block[42086-42705]"
    }, {
      "left" : "stopShowingServerProgress();",
      "right" : "stopShowingServerProgress();",
      "info" : "ExpressionStatement[41376-41404]:ExpressionStatement[42092-42120]"
    }, {
      "left" : "synchronized (myLock) {\n      myServerSocket = null;\n      myServer = null;\n      mySdkHome = null;\n      myFilePathWithOverlaidContentToTimestamp.clear();\n      myVisibleFiles.clear();\n\n      ApplicationManager.getApplication().runReadAction(new Runnable() {\n        @Override\n        public void run() {\n          for (final Project project : myRootsHandler.getTrackedProjects()) {\n            if (!project.isDisposed()) {\n              DartProblemsViewImpl.getInstance(project).clearAll();\n            }\n          }\n        }\n      });\n\n      myRootsHandler.reset();\n    }",
      "right" : "synchronized (myLock) {\n      myServerSocket = null;\n      myServer = null;\n      mySdkHome = null;\n      myFilePathWithOverlaidContentToTimestamp.clear();\n      myVisibleFiles.clear();\n\n      ApplicationManager.getApplication().runReadAction(new Runnable() {\n        @Override\n        public void run() {\n          for (final Project project : myRootsHandler.getTrackedProjects()) {\n            if (!project.isDisposed()) {\n              DartProblemsViewImpl.getInstance(project).clearAll();\n            }\n          }\n        }\n      });\n\n      myRootsHandler.reset();\n    }",
      "info" : "SynchronizedStatement[41410-41985]:SynchronizedStatement[42126-42701]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41432-41985]:Block[42148-42701]"
    }, {
      "left" : "myServerSocket = null;",
      "right" : "myServerSocket = null;",
      "info" : "ExpressionStatement[41440-41462]:ExpressionStatement[42156-42178]"
    }, {
      "left" : "myServer = null;",
      "right" : "myServer = null;",
      "info" : "ExpressionStatement[41469-41485]:ExpressionStatement[42185-42201]"
    }, {
      "left" : "mySdkHome = null;",
      "right" : "mySdkHome = null;",
      "info" : "ExpressionStatement[41492-41509]:ExpressionStatement[42208-42225]"
    }, {
      "left" : "myFilePathWithOverlaidContentToTimestamp.clear();",
      "right" : "myFilePathWithOverlaidContentToTimestamp.clear();",
      "info" : "ExpressionStatement[41516-41565]:ExpressionStatement[42232-42281]"
    }, {
      "left" : "myVisibleFiles.clear();",
      "right" : "myVisibleFiles.clear();",
      "info" : "ExpressionStatement[41572-41595]:ExpressionStatement[42288-42311]"
    }, {
      "left" : "ApplicationManager.getApplication().runReadAction(new Runnable() {\n        @Override\n        public void run() {\n          for (final Project project : myRootsHandler.getTrackedProjects()) {\n            if (!project.isDisposed()) {\n              DartProblemsViewImpl.getInstance(project).clearAll();\n            }\n          }\n        }\n      });",
      "right" : "ApplicationManager.getApplication().runReadAction(new Runnable() {\n        @Override\n        public void run() {\n          for (final Project project : myRootsHandler.getTrackedProjects()) {\n            if (!project.isDisposed()) {\n              DartProblemsViewImpl.getInstance(project).clearAll();\n            }\n          }\n        }\n      });",
      "info" : "ExpressionStatement[41603-41948]:ExpressionStatement[42319-42664]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41714-41938]:Block[42430-42654]"
    }, {
      "left" : "for (final Project project : myRootsHandler.getTrackedProjects())",
      "right" : "for (final Project project : myRootsHandler.getTrackedProjects())",
      "info" : "EnhancedForStatement[41726-41928]:EnhancedForStatement[42442-42644]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41792-41928]:Block[42508-42644]"
    }, {
      "left" : "if (!project.isDisposed())",
      "right" : "if (!project.isDisposed())",
      "info" : "IfStatement[41806-41916]:IfStatement[42522-42632]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41833-41916]:Block[42549-42632]"
    }, {
      "left" : "DartProblemsViewImpl.getInstance(project).clearAll();",
      "right" : "DartProblemsViewImpl.getInstance(project).clearAll();",
      "info" : "ExpressionStatement[41849-41902]:ExpressionStatement[42565-42618]"
    }, {
      "left" : "myRootsHandler.reset();",
      "right" : "myRootsHandler.reset();",
      "info" : "ExpressionStatement[41956-41979]:ExpressionStatement[42672-42695]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42034-42191]:Block[42750-42907]"
    }, {
      "left" : "myShowServerProgressAlarm.cancelAllRequests();",
      "right" : "myShowServerProgressAlarm.cancelAllRequests();",
      "info" : "ExpressionStatement[42040-42086]:ExpressionStatement[42756-42802]"
    }, {
      "left" : "myServerBusy.set(false);",
      "right" : "myServerBusy.set(false);",
      "info" : "ExpressionStatement[42091-42115]:ExpressionStatement[42807-42831]"
    }, {
      "left" : "synchronized (myServerBusy) {\n      myServerBusy.notifyAll();\n    }",
      "right" : "synchronized (myServerBusy) {\n      myServerBusy.notifyAll();\n    }",
      "info" : "SynchronizedStatement[42120-42187]:SynchronizedStatement[42836-42903]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42148-42187]:Block[42864-42903]"
    }, {
      "left" : "myServerBusy.notifyAll();",
      "right" : "myServerBusy.notifyAll();",
      "info" : "ExpressionStatement[42156-42181]:ExpressionStatement[42872-42897]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43305-44091]:Block[43995-44781]"
    }, {
      "left" : "final Ref<RuntimeException> exceptionRef = new Ref<RuntimeException>();",
      "right" : "final Ref<RuntimeException> exceptionRef = new Ref<RuntimeException>();",
      "info" : "VariableDeclarationStatement[43311-43382]:VariableDeclarationStatement[44001-44072]"
    }, {
      "left" : "final Semaphore semaphore = new Semaphore();",
      "right" : "final Semaphore semaphore = new Semaphore();",
      "info" : "VariableDeclarationStatement[43388-43432]:VariableDeclarationStatement[44078-44122]"
    }, {
      "left" : "semaphore.down();",
      "right" : "semaphore.down();",
      "info" : "ExpressionStatement[43437-43454]:ExpressionStatement[44127-44144]"
    }, {
      "left" : "ApplicationManager.getApplication().executeOnPooledThread(new Runnable() {\n      @Override\n      public void run() {\n        try {\n          runnable.run();\n        }\n        catch (RuntimeException e) {\n          exceptionRef.set(e);\n        }\n\n        semaphore.up();\n      }\n    });",
      "right" : "ApplicationManager.getApplication().executeOnPooledThread(new Runnable() {\n      @Override\n      public void run() {\n        try {\n          runnable.run();\n        }\n        catch (RuntimeException e) {\n          exceptionRef.set(e);\n        }\n\n        semaphore.up();\n      }\n    });",
      "info" : "ExpressionStatement[43460-43745]:ExpressionStatement[44150-44435]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43575-43737]:Block[44265-44427]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[43585-43704]:TryStatement[44275-44394]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43589-43626]:Block[44279-44316]"
    }, {
      "left" : "runnable.run();",
      "right" : "runnable.run();",
      "info" : "ExpressionStatement[43601-43616]:ExpressionStatement[44291-44306]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43662-43704]:Block[44352-44394]"
    }, {
      "left" : "exceptionRef.set(e);",
      "right" : "exceptionRef.set(e);",
      "info" : "ExpressionStatement[43674-43694]:ExpressionStatement[44364-44384]"
    }, {
      "left" : "semaphore.up();",
      "right" : "semaphore.up();",
      "info" : "ExpressionStatement[43714-43729]:ExpressionStatement[44404-44419]"
    }, {
      "left" : "semaphore.waitFor(timeout);",
      "right" : "semaphore.waitFor(timeout);",
      "info" : "ExpressionStatement[43751-43778]:ExpressionStatement[44441-44468]"
    }, {
      "left" : "if (!exceptionRef.isNull())",
      "right" : "if (!exceptionRef.isNull())",
      "info" : "IfStatement[43784-43890]:IfStatement[44474-44580]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43812-43890]:Block[44502-44580]"
    }, {
      "left" : "LOG.error(runnableInfo, exceptionRef.get());",
      "right" : "LOG.error(runnableInfo, exceptionRef.get());",
      "info" : "ExpressionStatement[43820-43864]:ExpressionStatement[44510-44554]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[43871-43884]:ReturnStatement[44561-44574]"
    }, {
      "left" : "if (semaphore.tryUp())",
      "right" : "if (semaphore.tryUp())",
      "info" : "IfStatement[43896-44069]:IfStatement[44586-44759]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43919-44069]:Block[44609-44759]"
    }, {
      "left" : "LOG.error(\"Operation didn't finish in \" + timeout + \" ms: \" + runnableInfo);",
      "right" : "LOG.error(\"Operation didn't finish in \" + timeout + \" ms: \" + runnableInfo);",
      "info" : "ExpressionStatement[43967-44043]:ExpressionStatement[44657-44733]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[44050-44063]:ReturnStatement[44740-44753]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[44075-44087]:ReturnStatement[44765-44777]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44153-45242]:Block[44843-45932]"
    }, {
      "left" : "final Document document = e.getDocument();",
      "right" : "final Document document = e.getDocument();",
      "info" : "VariableDeclarationStatement[44159-44201]:VariableDeclarationStatement[44849-44891]"
    }, {
      "left" : "final VirtualFile file = FileDocumentManager.getInstance().getFile(document);",
      "right" : "final VirtualFile file = FileDocumentManager.getInstance().getFile(document);",
      "info" : "VariableDeclarationStatement[44206-44283]:VariableDeclarationStatement[44896-44973]"
    }, {
      "left" : "if (!isDartOrHtmlFile(file))",
      "right" : "if (!isDartOrHtmlFile(file))",
      "info" : "IfStatement[44288-44324]:IfStatement[44978-45014]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[44317-44324]:ReturnStatement[45007-45014]"
    }, {
      "left" : "final String filePath = file.getPath();",
      "right" : "final String filePath = file.getPath();",
      "info" : "VariableDeclarationStatement[44330-44369]:VariableDeclarationStatement[45020-45059]"
    }, {
      "left" : "synchronized (myNavigationData) {\n      myFilePathsWithUnsentChanges.add(filePath);\n      final List<PluginNavigationRegion> regions = myNavigationData.get(filePath);\n      if (regions != null) {\n        final int eventOffset = e.getOffset();\n        final int deltaLength = e.getNewLength() - e.getOldLength();\n        for (PluginNavigationRegion region : regions) {\n          if (region.offset <= eventOffset && eventOffset <= region.offset + region.length) {\n            region.length += deltaLength;\n          }\n          else if (region.offset >= eventOffset) {\n            region.offset += deltaLength;\n          }\n          for (PluginNavigationTarget target : region.getTargets()) {\n            if (target.file.equals(filePath) && target.offset >= eventOffset) {\n              target.offset += deltaLength;\n            }\n          }\n        }\n      }\n    }",
      "right" : "synchronized (myNavigationData) {\n      myFilePathsWithUnsentChanges.add(filePath);\n      final List<PluginNavigationRegion> regions = myNavigationData.get(filePath);\n      if (regions != null) {\n        final int eventOffset = e.getOffset();\n        final int deltaLength = e.getNewLength() - e.getOldLength();\n        for (PluginNavigationRegion region : regions) {\n          if (region.offset <= eventOffset && eventOffset <= region.offset + region.length) {\n            region.length += deltaLength;\n          }\n          else if (region.offset >= eventOffset) {\n            region.offset += deltaLength;\n          }\n          for (PluginNavigationTarget target : region.getTargets()) {\n            if (target.file.equals(filePath) && target.offset >= eventOffset) {\n              target.offset += deltaLength;\n            }\n          }\n        }\n      }\n    }",
      "info" : "SynchronizedStatement[44374-45238]:SynchronizedStatement[45064-45928]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44406-45238]:Block[45096-45928]"
    }, {
      "left" : "myFilePathsWithUnsentChanges.add(filePath);",
      "right" : "myFilePathsWithUnsentChanges.add(filePath);",
      "info" : "ExpressionStatement[44414-44457]:ExpressionStatement[45104-45147]"
    }, {
      "left" : "final List<PluginNavigationRegion> regions = myNavigationData.get(filePath);",
      "right" : "final List<PluginNavigationRegion> regions = myNavigationData.get(filePath);",
      "info" : "VariableDeclarationStatement[44464-44540]:VariableDeclarationStatement[45154-45230]"
    }, {
      "left" : "if (regions != null)",
      "right" : "if (regions != null)",
      "info" : "IfStatement[44547-45232]:IfStatement[45237-45922]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44568-45232]:Block[45258-45922]"
    }, {
      "left" : "final int eventOffset = e.getOffset();",
      "right" : "final int eventOffset = e.getOffset();",
      "info" : "VariableDeclarationStatement[44578-44616]:VariableDeclarationStatement[45268-45306]"
    }, {
      "left" : "final int deltaLength = e.getNewLength() - e.getOldLength();",
      "right" : "final int deltaLength = e.getNewLength() - e.getOldLength();",
      "info" : "VariableDeclarationStatement[44625-44685]:VariableDeclarationStatement[45315-45375]"
    }, {
      "left" : "for (PluginNavigationRegion region : regions)",
      "right" : "for (PluginNavigationRegion region : regions)",
      "info" : "EnhancedForStatement[44694-45224]:EnhancedForStatement[45384-45914]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44740-45224]:Block[45430-45914]"
    }, {
      "left" : "if (region.offset <= eventOffset && eventOffset <= region.offset + region.length)",
      "right" : "if (region.offset <= eventOffset && eventOffset <= region.offset + region.length)",
      "info" : "IfStatement[44752-44994]:IfStatement[45442-45684]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44834-44889]:Block[45524-45579]"
    }, {
      "left" : "region.length += deltaLength;",
      "right" : "region.length += deltaLength;",
      "info" : "ExpressionStatement[44848-44877]:ExpressionStatement[45538-45567]"
    }, {
      "left" : "if (region.offset >= eventOffset)",
      "right" : "if (region.offset >= eventOffset)",
      "info" : "IfStatement[44905-44994]:IfStatement[45595-45684]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44939-44994]:Block[45629-45684]"
    }, {
      "left" : "region.offset += deltaLength;",
      "right" : "region.offset += deltaLength;",
      "info" : "ExpressionStatement[44953-44982]:ExpressionStatement[45643-45672]"
    }, {
      "left" : "for (PluginNavigationTarget target : region.getTargets())",
      "right" : "for (PluginNavigationTarget target : region.getTargets())",
      "info" : "EnhancedForStatement[45005-45214]:EnhancedForStatement[45695-45904]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45063-45214]:Block[45753-45904]"
    }, {
      "left" : "if (target.file.equals(filePath) && target.offset >= eventOffset)",
      "right" : "if (target.file.equals(filePath) && target.offset >= eventOffset)",
      "info" : "IfStatement[45077-45202]:IfStatement[45767-45892]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45143-45202]:Block[45833-45892]"
    }, {
      "left" : "target.offset += deltaLength;",
      "right" : "target.offset += deltaLength;",
      "info" : "ExpressionStatement[45159-45188]:ExpressionStatement[45849-45878]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45779-46000]:Block[46469-46690]"
    }, {
      "left" : "this.myCompletionId = completionId;",
      "right" : "this.myCompletionId = completionId;",
      "info" : "ExpressionStatement[45787-45822]:ExpressionStatement[46477-46512]"
    }, {
      "left" : "this.myReplacementOffset = replacementOffset;",
      "right" : "this.myReplacementOffset = replacementOffset;",
      "info" : "ExpressionStatement[45829-45874]:ExpressionStatement[46519-46564]"
    }, {
      "left" : "this.myReplacementLength = replacementLength;",
      "right" : "this.myReplacementLength = replacementLength;",
      "info" : "ExpressionStatement[45881-45926]:ExpressionStatement[46571-46616]"
    }, {
      "left" : "this.myCompletions = completions;",
      "right" : "this.myCompletions = completions;",
      "info" : "ExpressionStatement[45933-45966]:ExpressionStatement[46623-46656]"
    }, {
      "left" : "this.isLast = isLast;",
      "right" : "this.isLast = isLast;",
      "info" : "ExpressionStatement[45973-45994]:ExpressionStatement[46663-46684]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46278-46386]:Block[46968-47076]"
    }, {
      "left" : "offset = region.getOffset();",
      "right" : "offset = region.getOffset();",
      "info" : "ExpressionStatement[46286-46314]:ExpressionStatement[46976-47004]"
    }, {
      "left" : "length = region.getLength();",
      "right" : "length = region.getLength();",
      "info" : "ExpressionStatement[46321-46349]:ExpressionStatement[47011-47039]"
    }, {
      "left" : "type = region.getType();",
      "right" : "type = region.getType();",
      "info" : "ExpressionStatement[46356-46380]:ExpressionStatement[47046-47070]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46415-46443]:Block[47105-47133]"
    }, {
      "left" : "return offset;",
      "right" : "return offset;",
      "info" : "ReturnStatement[46423-46437]:ReturnStatement[47113-47127]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46472-46500]:Block[47162-47190]"
    }, {
      "left" : "return length;",
      "right" : "return length;",
      "info" : "ReturnStatement[46480-46494]:ReturnStatement[47170-47184]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46530-46556]:Block[47220-47246]"
    }, {
      "left" : "return type;",
      "right" : "return type;",
      "info" : "ReturnStatement[46538-46550]:ReturnStatement[47228-47240]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46887-47095]:Block[47577-47785]"
    }, {
      "left" : "offset = region.getOffset();",
      "right" : "offset = region.getOffset();",
      "info" : "ExpressionStatement[46895-46923]:ExpressionStatement[47585-47613]"
    }, {
      "left" : "length = region.getLength();",
      "right" : "length = region.getLength();",
      "info" : "ExpressionStatement[46930-46958]:ExpressionStatement[47620-47648]"
    }, {
      "left" : "for (NavigationTarget target : region.getTargetObjects())",
      "right" : "for (NavigationTarget target : region.getTargetObjects())",
      "info" : "EnhancedForStatement[46965-47089]:EnhancedForStatement[47655-47779]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47023-47089]:Block[47713-47779]"
    }, {
      "left" : "targets.add(new PluginNavigationTarget(target));",
      "right" : "targets.add(new PluginNavigationTarget(target));",
      "info" : "ExpressionStatement[47033-47081]:ExpressionStatement[47723-47771]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47124-47152]:Block[47814-47842]"
    }, {
      "left" : "return offset;",
      "right" : "return offset;",
      "info" : "ReturnStatement[47132-47146]:ReturnStatement[47822-47836]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47181-47209]:Block[47871-47899]"
    }, {
      "left" : "return length;",
      "right" : "return length;",
      "info" : "ReturnStatement[47189-47203]:ReturnStatement[47879-47893]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47264-47293]:Block[47954-47983]"
    }, {
      "left" : "return targets;",
      "right" : "return targets;",
      "info" : "ReturnStatement[47272-47287]:ReturnStatement[47962-47977]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47462-47569]:Block[48152-48259]"
    }, {
      "left" : "file = FileUtil.toSystemIndependentName(target.getFile());",
      "right" : "file = FileUtil.toSystemIndependentName(target.getFile());",
      "info" : "ExpressionStatement[47470-47528]:ExpressionStatement[48160-48218]"
    }, {
      "left" : "offset = target.getOffset();",
      "right" : "offset = target.getOffset();",
      "info" : "ExpressionStatement[47535-47563]:ExpressionStatement[48225-48253]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47599-47625]:Block[48289-48315]"
    }, {
      "left" : "return file;",
      "right" : "return file;",
      "info" : "ReturnStatement[47607-47619]:ReturnStatement[48297-48309]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47654-47682]:Block[48344-48372]"
    }, {
      "left" : "return offset;",
      "right" : "return offset;",
      "info" : "ReturnStatement[47662-47676]:ReturnStatement[48352-48366]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47984-48069]:Block[48674-48759]"
    }, {
      "left" : "this.id = id;",
      "right" : "this.id = id;",
      "info" : "ExpressionStatement[47992-48005]:ExpressionStatement[48682-48695]"
    }, {
      "left" : "this.results = results;",
      "right" : "this.results = results;",
      "info" : "ExpressionStatement[48012-48035]:ExpressionStatement[48702-48725]"
    }, {
      "left" : "this.isLast = isLast;",
      "right" : "this.isLast = isLast;",
      "info" : "ExpressionStatement[48042-48063]:ExpressionStatement[48732-48753]"
    } ]
  },
  "interFileMappings" : { }
}