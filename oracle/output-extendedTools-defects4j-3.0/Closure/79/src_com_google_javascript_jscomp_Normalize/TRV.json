{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "private final AbstractCompiler compiler;",
      "right" : "private final AbstractCompiler compiler;",
      "info" : "FieldDeclaration[2436-2476]:FieldDeclaration[2436-2476]"
    }, {
      "left" : "private final boolean assertOnChange;",
      "right" : "private final boolean assertOnChange;",
      "info" : "FieldDeclaration[2479-2516]:FieldDeclaration[2479-2516]"
    }, {
      "left" : "private static final boolean CONVERT_WHILE_TO_FOR = true;",
      "right" : "private static final boolean CONVERT_WHILE_TO_FOR = true;",
      "info" : "FieldDeclaration[2519-2576]:FieldDeclaration[2519-2576]"
    }, {
      "left" : "static final boolean MAKE_LOCAL_NAMES_UNIQUE = true;",
      "right" : "static final boolean MAKE_LOCAL_NAMES_UNIQUE = true;",
      "info" : "FieldDeclaration[2579-2631]:FieldDeclaration[2579-2631]"
    }, {
      "left" : "public static final DiagnosticType CATCH_BLOCK_VAR_ERROR =\n    DiagnosticType.error(\n        \"JSC_CATCH_BLOCK_VAR_ERROR\",\n        \"The use of scope variable {0} is not allowed within a catch block \" +\n        \"with a catch exception of the same name.\");",
      "right" : "public static final DiagnosticType CATCH_BLOCK_VAR_ERROR =\n    DiagnosticType.error(\n        \"JSC_CATCH_BLOCK_VAR_ERROR\",\n        \"The use of scope variable {0} is not allowed within a catch block \" +\n        \"with a catch exception of the same name.\");",
      "info" : "FieldDeclaration[2635-2888]:FieldDeclaration[2635-2888]"
    }, {
      "left" : "Normalize(AbstractCompiler compiler, boolean assertOnChange)",
      "right" : "Normalize(AbstractCompiler compiler, boolean assertOnChange)",
      "info" : "MethodDeclaration[2893-3126]:MethodDeclaration[2893-3126]"
    }, {
      "left" : "static Node parseAndNormalizeSyntheticCode(\n      AbstractCompiler compiler, String code, String prefix)",
      "right" : "static Node parseAndNormalizeSyntheticCode(\n      AbstractCompiler compiler, String code, String prefix)",
      "info" : "MethodDeclaration[3130-3608]:MethodDeclaration[3130-3608]"
    }, {
      "left" : "static Node parseAndNormalizeTestCode(\n      AbstractCompiler compiler, String code, String prefix)",
      "right" : "static Node parseAndNormalizeTestCode(\n      AbstractCompiler compiler, String code, String prefix)",
      "info" : "MethodDeclaration[3612-3968]:MethodDeclaration[3612-3968]"
    }, {
      "left" : "private void reportCodeChange(String changeDescription)",
      "right" : "private void reportCodeChange(String changeDescription)",
      "info" : "MethodDeclaration[3972-4205]:MethodDeclaration[3972-4205]"
    }, {
      "left" : "PropagateConstantAnnotationsOverVars",
      "right" : "PropagateConstantAnnotationsOverVars",
      "info" : "TypeDeclaration[5733-7487]:TypeDeclaration[5747-7501]"
    }, {
      "left" : "private final AbstractCompiler compiler;",
      "right" : "private final AbstractCompiler compiler;",
      "info" : "FieldDeclaration[5927-5967]:FieldDeclaration[5941-5981]"
    }, {
      "left" : "private final boolean assertOnChange;",
      "right" : "private final boolean assertOnChange;",
      "info" : "FieldDeclaration[5972-6009]:FieldDeclaration[5986-6023]"
    }, {
      "left" : "PropagateConstantAnnotationsOverVars(\n        AbstractCompiler compiler, boolean forbidChanges)",
      "right" : "PropagateConstantAnnotationsOverVars(\n        AbstractCompiler compiler, boolean forbidChanges)",
      "info" : "MethodDeclaration[6015-6193]:MethodDeclaration[6029-6207]"
    }, {
      "left" : "public void process(Node externs, Node root)",
      "right" : "public void process(Node externs, Node root)",
      "info" : "MethodDeclaration[6199-6335]:MethodDeclaration[6213-6349]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[6341-7483]:MethodDeclaration[6355-7497]"
    }, {
      "left" : "VerifyConstants",
      "right" : "VerifyConstants",
      "info" : "TypeDeclaration[7491-10025]:TypeDeclaration[7505-10039]"
    }, {
      "left" : "final private AbstractCompiler compiler;",
      "right" : "final private AbstractCompiler compiler;",
      "info" : "FieldDeclaration[7680-7720]:FieldDeclaration[7694-7734]"
    }, {
      "left" : "final private boolean checkUserDeclarations;",
      "right" : "final private boolean checkUserDeclarations;",
      "info" : "FieldDeclaration[7725-7769]:FieldDeclaration[7739-7783]"
    }, {
      "left" : "VerifyConstants(AbstractCompiler compiler, boolean checkUserDeclarations)",
      "right" : "VerifyConstants(AbstractCompiler compiler, boolean checkUserDeclarations)",
      "info" : "MethodDeclaration[7775-7946]:MethodDeclaration[7789-7960]"
    }, {
      "left" : "public void process(Node externs, Node root)",
      "right" : "public void process(Node externs, Node root)",
      "info" : "MethodDeclaration[7952-8278]:MethodDeclaration[7966-8292]"
    }, {
      "left" : "private Map<String, Boolean> constantMap = Maps.newHashMap();",
      "right" : "private Map<String, Boolean> constantMap = Maps.newHashMap();",
      "info" : "FieldDeclaration[8284-8345]:FieldDeclaration[8298-8359]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[8351-10021]:MethodDeclaration[8365-10035]"
    }, {
      "left" : "NormalizeStatements",
      "right" : "NormalizeStatements",
      "info" : "TypeDeclaration[10029-21679]:TypeDeclaration[10043-21693]"
    }, {
      "left" : "private final AbstractCompiler compiler;",
      "right" : "private final AbstractCompiler compiler;",
      "info" : "FieldDeclaration[10492-10532]:FieldDeclaration[10506-10546]"
    }, {
      "left" : "private final boolean assertOnChange;",
      "right" : "private final boolean assertOnChange;",
      "info" : "FieldDeclaration[10537-10574]:FieldDeclaration[10551-10588]"
    }, {
      "left" : "NormalizeStatements(AbstractCompiler compiler, boolean assertOnChange)",
      "right" : "NormalizeStatements(AbstractCompiler compiler, boolean assertOnChange)",
      "info" : "MethodDeclaration[10580-10734]:MethodDeclaration[10594-10748]"
    }, {
      "left" : "private void reportCodeChange(String changeDescription)",
      "right" : "private void reportCodeChange(String changeDescription)",
      "info" : "MethodDeclaration[10740-10985]:MethodDeclaration[10754-10999]"
    }, {
      "left" : "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent)",
      "right" : "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[10991-11147]:MethodDeclaration[11005-11161]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[11153-12014]:MethodDeclaration[11167-12028]"
    }, {
      "left" : "private void annotateConstantsByConvention(Node n, Node parent)",
      "right" : "private void annotateConstantsByConvention(Node n, Node parent)",
      "info" : "MethodDeclaration[12020-13331]:MethodDeclaration[12034-13345]"
    }, {
      "left" : "private void normalizeFunctionDeclaration(Node n)",
      "right" : "private void normalizeFunctionDeclaration(Node n)",
      "info" : "MethodDeclaration[13337-13854]:MethodDeclaration[13351-13868]"
    }, {
      "left" : "private void rewriteFunctionDeclaration(Node n)",
      "right" : "private void rewriteFunctionDeclaration(Node n)",
      "info" : "MethodDeclaration[13860-14735]:MethodDeclaration[13874-14749]"
    }, {
      "left" : "private void doStatementNormalizations(\n        NodeTraversal t, Node n, Node parent)",
      "right" : "private void doStatementNormalizations(\n        NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[14741-15554]:MethodDeclaration[14755-15568]"
    }, {
      "left" : "private void normalizeLabels(Node n)",
      "right" : "private void normalizeLabels(Node n)",
      "info" : "MethodDeclaration[15653-16478]:MethodDeclaration[15667-16492]"
    }, {
      "left" : "private void extractForInitializer(\n        Node n, Node before, Node beforeParent)",
      "right" : "private void extractForInitializer(\n        Node n, Node before, Node beforeParent)",
      "info" : "MethodDeclaration[16484-18816]:MethodDeclaration[16498-18830]"
    }, {
      "left" : "private void splitVarDeclarations(Node n)",
      "right" : "private void splitVarDeclarations(Node n)",
      "info" : "MethodDeclaration[18822-19690]:MethodDeclaration[18836-19704]"
    }, {
      "left" : "private void moveNamedFunctions(Node functionBody)",
      "right" : "private void moveNamedFunctions(Node functionBody)",
      "info" : "MethodDeclaration[19696-21231]:MethodDeclaration[19710-21245]"
    }, {
      "left" : "private Node addToFront(Node parent, Node newChild, Node after)",
      "right" : "private Node addToFront(Node parent, Node newChild, Node after)",
      "info" : "MethodDeclaration[21237-21675]:MethodDeclaration[21251-21689]"
    }, {
      "left" : "private void removeDuplicateDeclarations(Node externs, Node root)",
      "right" : "private void removeDuplicateDeclarations(Node externs, Node root)",
      "info" : "MethodDeclaration[21683-22082]:MethodDeclaration[21697-22096]"
    }, {
      "left" : "DuplicateDeclarationHandler",
      "right" : "DuplicateDeclarationHandler",
      "info" : "TypeDeclaration[22086-27089]:TypeDeclaration[22100-27103]"
    }, {
      "left" : "private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();",
      "right" : "private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();",
      "info" : "FieldDeclaration[22262-22325]:FieldDeclaration[22276-22339]"
    }, {
      "left" : "public void onRedeclaration(\n        Scope s, String name, Node n, CompilerInput input)",
      "right" : "public void onRedeclaration(\n        Scope s, String name, Node n, CompilerInput input)",
      "info" : "MethodDeclaration[22331-24771]:MethodDeclaration[22345-24785]"
    }, {
      "left" : "private void replaceVarWithAssignment(Node n, Node parent, Node gramps)",
      "right" : "private void replaceVarWithAssignment(Node n, Node parent, Node gramps)",
      "info" : "MethodDeclaration[24777-27085]:MethodDeclaration[24791-27099]"
    }, {
      "left" : "ScopeTicklingCallback",
      "right" : "ScopeTicklingCallback",
      "info" : "TypeDeclaration[27093-27758]:TypeDeclaration[27107-27772]"
    }, {
      "left" : "public void enterScope(NodeTraversal t)",
      "right" : "public void enterScope(NodeTraversal t)",
      "info" : "MethodDeclaration[27252-27422]:MethodDeclaration[27266-27436]"
    }, {
      "left" : "public void exitScope(NodeTraversal t)",
      "right" : "public void exitScope(NodeTraversal t)",
      "info" : "MethodDeclaration[27428-27512]:MethodDeclaration[27442-27526]"
    }, {
      "left" : "public boolean shouldTraverse(\n        NodeTraversal nodeTraversal, Node n, Node parent)",
      "right" : "public boolean shouldTraverse(\n        NodeTraversal nodeTraversal, Node n, Node parent)",
      "info" : "MethodDeclaration[27518-27647]:MethodDeclaration[27532-27661]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[27653-27754]:MethodDeclaration[27667-27768]"
    } ],
    "mappings" : [
 {
      "left" : "Normalize",
      "right" : "Normalize",
      "info" : "SimpleName[2893-2902]:SimpleName[2893-2902]"
    }, {
      "left" : "AbstractCompiler compiler",
      "right" : "AbstractCompiler compiler",
      "info" : "SingleVariableDeclaration[2903-2928]:SingleVariableDeclaration[2903-2928]"
    }, {
      "left" : "boolean assertOnChange",
      "right" : "boolean assertOnChange",
      "info" : "SingleVariableDeclaration[2930-2952]:SingleVariableDeclaration[2930-2952]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2954-3126]:Block[2954-3126]"
    }, {
      "left" : "this.compiler = compiler;",
      "right" : "this.compiler = compiler;",
      "info" : "ExpressionStatement[2960-2985]:ExpressionStatement[2960-2985]"
    }, {
      "left" : "this.assertOnChange = assertOnChange;",
      "right" : "this.assertOnChange = assertOnChange;",
      "info" : "ExpressionStatement[2990-3027]:ExpressionStatement[2990-3027]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[3130-3136]:Modifier[3130-3136]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[3137-3141]:SimpleType[3137-3141]"
    }, {
      "left" : "parseAndNormalizeSyntheticCode",
      "right" : "parseAndNormalizeSyntheticCode",
      "info" : "SimpleName[3142-3172]:SimpleName[3142-3172]"
    }, {
      "left" : "AbstractCompiler compiler",
      "right" : "AbstractCompiler compiler",
      "info" : "SingleVariableDeclaration[3180-3205]:SingleVariableDeclaration[3180-3205]"
    }, {
      "left" : "String code",
      "right" : "String code",
      "info" : "SingleVariableDeclaration[3207-3218]:SingleVariableDeclaration[3207-3218]"
    }, {
      "left" : "String prefix",
      "right" : "String prefix",
      "info" : "SingleVariableDeclaration[3220-3233]:SingleVariableDeclaration[3220-3233]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3235-3608]:Block[3235-3608]"
    }, {
      "left" : "Node js = compiler.parseSyntheticCode(code);",
      "right" : "Node js = compiler.parseSyntheticCode(code);",
      "info" : "VariableDeclarationStatement[3241-3285]:VariableDeclarationStatement[3241-3285]"
    }, {
      "left" : "NodeTraversal.traverse(compiler, js,\n        new Normalize.NormalizeStatements(compiler, false));",
      "right" : "NodeTraversal.traverse(compiler, js,\n        new Normalize.NormalizeStatements(compiler, false));",
      "info" : "ExpressionStatement[3290-3387]:ExpressionStatement[3290-3387]"
    }, {
      "left" : "NodeTraversal.traverse(\n        compiler, js,\n        new MakeDeclaredNamesUnique(\n            new BoilerplateRenamer(\n                compiler.getUniqueNameIdSupplier(),\n                prefix)));",
      "right" : "NodeTraversal.traverse(\n        compiler, js,\n        new MakeDeclaredNamesUnique(\n            new BoilerplateRenamer(\n                compiler.getUniqueNameIdSupplier(),\n                prefix)));",
      "info" : "ExpressionStatement[3392-3589]:ExpressionStatement[3392-3589]"
    }, {
      "left" : "return js;",
      "right" : "return js;",
      "info" : "ReturnStatement[3594-3604]:ReturnStatement[3594-3604]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[3612-3618]:Modifier[3612-3618]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[3619-3623]:SimpleType[3619-3623]"
    }, {
      "left" : "parseAndNormalizeTestCode",
      "right" : "parseAndNormalizeTestCode",
      "info" : "SimpleName[3624-3649]:SimpleName[3624-3649]"
    }, {
      "left" : "AbstractCompiler compiler",
      "right" : "AbstractCompiler compiler",
      "info" : "SingleVariableDeclaration[3657-3682]:SingleVariableDeclaration[3657-3682]"
    }, {
      "left" : "String code",
      "right" : "String code",
      "info" : "SingleVariableDeclaration[3684-3695]:SingleVariableDeclaration[3684-3695]"
    }, {
      "left" : "String prefix",
      "right" : "String prefix",
      "info" : "SingleVariableDeclaration[3697-3710]:SingleVariableDeclaration[3697-3710]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3712-3968]:Block[3712-3968]"
    }, {
      "left" : "Node js = compiler.parseTestCode(code);",
      "right" : "Node js = compiler.parseTestCode(code);",
      "info" : "VariableDeclarationStatement[3718-3757]:VariableDeclarationStatement[3718-3757]"
    }, {
      "left" : "NodeTraversal.traverse(compiler, js,\n        new Normalize.NormalizeStatements(compiler, false));",
      "right" : "NodeTraversal.traverse(compiler, js,\n        new Normalize.NormalizeStatements(compiler, false));",
      "info" : "ExpressionStatement[3762-3859]:ExpressionStatement[3762-3859]"
    }, {
      "left" : "NodeTraversal.traverse(\n        compiler, js,\n        new MakeDeclaredNamesUnique());",
      "right" : "NodeTraversal.traverse(\n        compiler, js,\n        new MakeDeclaredNamesUnique());",
      "info" : "ExpressionStatement[3864-3949]:ExpressionStatement[3864-3949]"
    }, {
      "left" : "return js;",
      "right" : "return js;",
      "info" : "ReturnStatement[3954-3964]:ReturnStatement[3954-3964]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[3972-3979]:Modifier[3972-3979]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[3980-3984]:PrimitiveType[3980-3984]"
    }, {
      "left" : "reportCodeChange",
      "right" : "reportCodeChange",
      "info" : "SimpleName[3985-4001]:SimpleName[3985-4001]"
    }, {
      "left" : "String changeDescription",
      "right" : "String changeDescription",
      "info" : "SingleVariableDeclaration[4002-4026]:SingleVariableDeclaration[4002-4026]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4028-4205]:Block[4028-4205]"
    }, {
      "left" : "if (assertOnChange)",
      "right" : "if (assertOnChange)",
      "info" : "IfStatement[4034-4168]:IfStatement[4034-4168]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4054-4168]:Block[4054-4168]"
    }, {
      "left" : "throw new IllegalStateException(\n          \"Normalize constraints violated:\\n\" + changeDescription);",
      "right" : "throw new IllegalStateException(\n          \"Normalize constraints violated:\\n\" + changeDescription);",
      "info" : "ThrowStatement[4062-4162]:ThrowStatement[4062-4162]"
    }, {
      "left" : "compiler.reportCodeChange();",
      "right" : "compiler.reportCodeChange();",
      "info" : "ExpressionStatement[4173-4201]:ExpressionStatement[4173-4201]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[5801-5807]:Modifier[5815-5821]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[5808-5813]:TYPE_DECLARATION_KIND[5822-5827]"
    }, {
      "left" : "PropagateConstantAnnotationsOverVars",
      "right" : "PropagateConstantAnnotationsOverVars",
      "info" : "SimpleName[5814-5850]:SimpleName[5828-5864]"
    }, {
      "left" : "AbstractPostOrderCallback",
      "right" : "AbstractPostOrderCallback",
      "info" : "SimpleType[5865-5890]:SimpleType[5879-5904]"
    }, {
      "left" : "CompilerPass",
      "right" : "CompilerPass",
      "info" : "SimpleType[5908-5920]:SimpleType[5922-5934]"
    }, {
      "left" : "PropagateConstantAnnotationsOverVars",
      "right" : "PropagateConstantAnnotationsOverVars",
      "info" : "SimpleName[6015-6051]:SimpleName[6029-6065]"
    }, {
      "left" : "AbstractCompiler compiler",
      "right" : "AbstractCompiler compiler",
      "info" : "SingleVariableDeclaration[6061-6086]:SingleVariableDeclaration[6075-6100]"
    }, {
      "left" : "boolean forbidChanges",
      "right" : "boolean forbidChanges",
      "info" : "SingleVariableDeclaration[6088-6109]:SingleVariableDeclaration[6102-6123]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6111-6193]:Block[6125-6207]"
    }, {
      "left" : "this.compiler = compiler;",
      "right" : "this.compiler = compiler;",
      "info" : "ExpressionStatement[6119-6144]:ExpressionStatement[6133-6158]"
    }, {
      "left" : "this.assertOnChange = forbidChanges;",
      "right" : "this.assertOnChange = forbidChanges;",
      "info" : "ExpressionStatement[6151-6187]:ExpressionStatement[6165-6201]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[6199-6208]:MarkerAnnotation[6213-6222]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6213-6219]:Modifier[6227-6233]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6220-6224]:PrimitiveType[6234-6238]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[6225-6232]:SimpleName[6239-6246]"
    }, {
      "left" : "Node externs",
      "right" : "Node externs",
      "info" : "SingleVariableDeclaration[6233-6245]:SingleVariableDeclaration[6247-6259]"
    }, {
      "left" : "Node root",
      "right" : "Node root",
      "info" : "SingleVariableDeclaration[6247-6256]:SingleVariableDeclaration[6261-6270]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6258-6335]:Block[6272-6349]"
    }, {
      "left" : "new NodeTraversal(compiler, this).traverseRoots(externs, root);",
      "right" : "new NodeTraversal(compiler, this).traverseRoots(externs, root);",
      "info" : "ExpressionStatement[6266-6329]:ExpressionStatement[6280-6343]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[6341-6350]:MarkerAnnotation[6355-6364]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6355-6361]:Modifier[6369-6375]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6362-6366]:PrimitiveType[6376-6380]"
    }, {
      "left" : "visit",
      "right" : "visit",
      "info" : "SimpleName[6367-6372]:SimpleName[6381-6386]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[6373-6388]:SingleVariableDeclaration[6387-6402]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[6390-6396]:SingleVariableDeclaration[6404-6410]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[6398-6409]:SingleVariableDeclaration[6412-6423]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6411-7483]:Block[6425-7497]"
    }, {
      "left" : "if (n.getType() == Token.NAME)",
      "right" : "if (n.getType() == Token.NAME)",
      "info" : "IfStatement[6486-7477]:IfStatement[6500-7491]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6517-7477]:Block[6531-7491]"
    }, {
      "left" : "if (n.getString().isEmpty())",
      "right" : "if (n.getString().isEmpty())",
      "info" : "IfStatement[6527-6585]:IfStatement[6541-6599]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6556-6585]:Block[6570-6599]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[6568-6575]:ReturnStatement[6582-6589]"
    }, {
      "left" : "JSDocInfo info = null;",
      "right" : "JSDocInfo info = null;",
      "info" : "VariableDeclarationStatement[6595-6617]:VariableDeclarationStatement[6609-6631]"
    }, {
      "left" : "Var var = t.getScope().getVar(n.getString());",
      "right" : "Var var = t.getScope().getVar(n.getString());",
      "info" : "VariableDeclarationStatement[6682-6727]:VariableDeclarationStatement[6696-6741]"
    }, {
      "left" : "if (var != null)",
      "right" : "if (var != null)",
      "info" : "IfStatement[6736-6801]:IfStatement[6750-6815]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6753-6801]:Block[6767-6815]"
    }, {
      "left" : "info = var.getJSDocInfo();",
      "right" : "info = var.getJSDocInfo();",
      "info" : "ExpressionStatement[6765-6791]:ExpressionStatement[6779-6805]"
    }, {
      "left" : "boolean shouldBeConstant =\n            (info != null && info.isConstant()) ||\n            NodeUtil.isConstantByConvention(\n                compiler.getCodingConvention(), n, parent);",
      "right" : "boolean shouldBeConstant =\n            (info != null && info.isConstant()) ||\n            NodeUtil.isConstantByConvention(\n                compiler.getCodingConvention(), n, parent);",
      "info" : "VariableDeclarationStatement[6811-6993]:VariableDeclarationStatement[6825-7007]"
    }, {
      "left" : "boolean isMarkedConstant = n.getBooleanProp(Node.IS_CONSTANT_NAME);",
      "right" : "boolean isMarkedConstant = n.getBooleanProp(Node.IS_CONSTANT_NAME);",
      "info" : "VariableDeclarationStatement[7002-7069]:VariableDeclarationStatement[7016-7083]"
    }, {
      "left" : "if (shouldBeConstant && !isMarkedConstant)",
      "right" : "if (shouldBeConstant && !isMarkedConstant)",
      "info" : "IfStatement[7078-7469]:IfStatement[7092-7483]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7121-7469]:Block[7135-7483]"
    }, {
      "left" : "if (assertOnChange)",
      "right" : "if (assertOnChange)",
      "info" : "IfStatement[7133-7402]:IfStatement[7147-7416]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7153-7402]:Block[7167-7416]"
    }, {
      "left" : "String name = n.getString();",
      "right" : "String name = n.getString();",
      "info" : "VariableDeclarationStatement[7167-7195]:VariableDeclarationStatement[7181-7209]"
    }, {
      "left" : "throw new IllegalStateException(\n                \"Unexpected const change.\\n\" +\n                \"  name: \"+ name + \"\\n\" +\n                \"  parent:\" + n.getParent().toStringTree());",
      "right" : "throw new IllegalStateException(\n                \"Unexpected const change.\\n\" +\n                \"  name: \"+ name + \"\\n\" +\n                \"  parent:\" + n.getParent().toStringTree());",
      "info" : "ThrowStatement[7208-7390]:ThrowStatement[7222-7404]"
    }, {
      "left" : "n.putBooleanProp(Node.IS_CONSTANT_NAME, true);",
      "right" : "n.putBooleanProp(Node.IS_CONSTANT_NAME, true);",
      "info" : "ExpressionStatement[7413-7459]:ExpressionStatement[7427-7473]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[7580-7586]:Modifier[7594-7600]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[7587-7592]:TYPE_DECLARATION_KIND[7601-7606]"
    }, {
      "left" : "VerifyConstants",
      "right" : "VerifyConstants",
      "info" : "SimpleName[7593-7608]:SimpleName[7607-7622]"
    }, {
      "left" : "AbstractPostOrderCallback",
      "right" : "AbstractPostOrderCallback",
      "info" : "SimpleType[7617-7642]:SimpleType[7631-7656]"
    }, {
      "left" : "CompilerPass",
      "right" : "CompilerPass",
      "info" : "SimpleType[7660-7672]:SimpleType[7674-7686]"
    }, {
      "left" : "VerifyConstants",
      "right" : "VerifyConstants",
      "info" : "SimpleName[7775-7790]:SimpleName[7789-7804]"
    }, {
      "left" : "AbstractCompiler compiler",
      "right" : "AbstractCompiler compiler",
      "info" : "SingleVariableDeclaration[7791-7816]:SingleVariableDeclaration[7805-7830]"
    }, {
      "left" : "boolean checkUserDeclarations",
      "right" : "boolean checkUserDeclarations",
      "info" : "SingleVariableDeclaration[7818-7847]:SingleVariableDeclaration[7832-7861]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7849-7946]:Block[7863-7960]"
    }, {
      "left" : "this.compiler = compiler;",
      "right" : "this.compiler = compiler;",
      "info" : "ExpressionStatement[7857-7882]:ExpressionStatement[7871-7896]"
    }, {
      "left" : "this.checkUserDeclarations = checkUserDeclarations;",
      "right" : "this.checkUserDeclarations = checkUserDeclarations;",
      "info" : "ExpressionStatement[7889-7940]:ExpressionStatement[7903-7954]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[7952-7961]:MarkerAnnotation[7966-7975]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7966-7972]:Modifier[7980-7986]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7973-7977]:PrimitiveType[7987-7991]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[7978-7985]:SimpleName[7992-7999]"
    }, {
      "left" : "Node externs",
      "right" : "Node externs",
      "info" : "SingleVariableDeclaration[7986-7998]:SingleVariableDeclaration[8000-8012]"
    }, {
      "left" : "Node root",
      "right" : "Node root",
      "info" : "SingleVariableDeclaration[8000-8009]:SingleVariableDeclaration[8014-8023]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8011-8278]:Block[8025-8292]"
    }, {
      "left" : "Node externsAndJs = root.getParent();",
      "right" : "Node externsAndJs = root.getParent();",
      "info" : "VariableDeclarationStatement[8019-8056]:VariableDeclarationStatement[8033-8070]"
    }, {
      "left" : "Preconditions.checkState(externsAndJs != null);",
      "right" : "Preconditions.checkState(externsAndJs != null);",
      "info" : "ExpressionStatement[8063-8110]:ExpressionStatement[8077-8124]"
    }, {
      "left" : "Preconditions.checkState(externsAndJs.hasChild(externs));",
      "right" : "Preconditions.checkState(externsAndJs.hasChild(externs));",
      "info" : "ExpressionStatement[8117-8174]:ExpressionStatement[8131-8188]"
    }, {
      "left" : "NodeTraversal.traverseRoots(\n          compiler, Lists.newArrayList(externs, root), this);",
      "right" : "NodeTraversal.traverseRoots(\n          compiler, Lists.newArrayList(externs, root), this);",
      "info" : "ExpressionStatement[8182-8272]:ExpressionStatement[8196-8286]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[8351-8360]:MarkerAnnotation[8365-8374]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8365-8371]:Modifier[8379-8385]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[8372-8376]:PrimitiveType[8386-8390]"
    }, {
      "left" : "visit",
      "right" : "visit",
      "info" : "SimpleName[8377-8382]:SimpleName[8391-8396]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[8383-8398]:SingleVariableDeclaration[8397-8412]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[8400-8406]:SingleVariableDeclaration[8414-8420]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[8408-8419]:SingleVariableDeclaration[8422-8433]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8421-10021]:Block[8435-10035]"
    }, {
      "left" : "if (n.getType() == Token.NAME)",
      "right" : "if (n.getType() == Token.NAME)",
      "info" : "IfStatement[8429-10015]:IfStatement[8443-10029]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8460-10015]:Block[8474-10029]"
    }, {
      "left" : "String name = n.getString();",
      "right" : "String name = n.getString();",
      "info" : "VariableDeclarationStatement[8470-8498]:VariableDeclarationStatement[8484-8512]"
    }, {
      "left" : "if (n.getString().isEmpty())",
      "right" : "if (n.getString().isEmpty())",
      "info" : "IfStatement[8507-8565]:IfStatement[8521-8579]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8536-8565]:Block[8550-8579]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[8548-8555]:ReturnStatement[8562-8569]"
    }, {
      "left" : "boolean isConst = n.getBooleanProp(Node.IS_CONSTANT_NAME);",
      "right" : "boolean isConst = n.getBooleanProp(Node.IS_CONSTANT_NAME);",
      "info" : "VariableDeclarationStatement[8575-8633]:VariableDeclarationStatement[8589-8647]"
    }, {
      "left" : "if (checkUserDeclarations)",
      "right" : "if (checkUserDeclarations)",
      "info" : "IfStatement[8642-9691]:IfStatement[8656-9705]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8669-9691]:Block[8683-9705]"
    }, {
      "left" : "boolean expectedConst = false;",
      "right" : "boolean expectedConst = false;",
      "info" : "VariableDeclarationStatement[8681-8711]:VariableDeclarationStatement[8695-8725]"
    }, {
      "left" : "CodingConvention convention = compiler.getCodingConvention();",
      "right" : "CodingConvention convention = compiler.getCodingConvention();",
      "info" : "VariableDeclarationStatement[8722-8783]:VariableDeclarationStatement[8736-8797]"
    }, {
      "left" : "if (NodeUtil.isConstantName(n)\n              || NodeUtil.isConstantByConvention(convention, n, parent))",
      "right" : "if (NodeUtil.isConstantName(n)\n              || NodeUtil.isConstantByConvention(convention, n, parent))",
      "info" : "IfStatement[8794-9341]:IfStatement[8808-9355]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8898-8945]:Block[8912-8959]"
    }, {
      "left" : "expectedConst = true;",
      "right" : "expectedConst = true;",
      "info" : "ExpressionStatement[8912-8933]:ExpressionStatement[8926-8947]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8951-9341]:Block[8965-9355]"
    }, {
      "left" : "expectedConst = false;",
      "right" : "expectedConst = false;",
      "info" : "ExpressionStatement[8965-8987]:ExpressionStatement[8979-9001]"
    }, {
      "left" : "JSDocInfo info = null;",
      "right" : "JSDocInfo info = null;",
      "info" : "VariableDeclarationStatement[9001-9023]:VariableDeclarationStatement[9015-9037]"
    }, {
      "left" : "Var var = t.getScope().getVar(n.getString());",
      "right" : "Var var = t.getScope().getVar(n.getString());",
      "info" : "VariableDeclarationStatement[9036-9081]:VariableDeclarationStatement[9050-9095]"
    }, {
      "left" : "if (var != null)",
      "right" : "if (var != null)",
      "info" : "IfStatement[9094-9167]:IfStatement[9108-9181]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9111-9167]:Block[9125-9181]"
    }, {
      "left" : "info = var.getJSDocInfo();",
      "right" : "info = var.getJSDocInfo();",
      "info" : "ExpressionStatement[9127-9153]:ExpressionStatement[9141-9167]"
    }, {
      "left" : "if (info != null && info.isConstant())",
      "right" : "if (info != null && info.isConstant())",
      "info" : "IfStatement[9181-9329]:IfStatement[9195-9343]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9220-9271]:Block[9234-9285]"
    }, {
      "left" : "expectedConst = true;",
      "right" : "expectedConst = true;",
      "info" : "ExpressionStatement[9236-9257]:ExpressionStatement[9250-9271]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9277-9329]:Block[9291-9343]"
    }, {
      "left" : "expectedConst = false;",
      "right" : "expectedConst = false;",
      "info" : "ExpressionStatement[9293-9315]:ExpressionStatement[9307-9329]"
    }, {
      "left" : "if (expectedConst)",
      "right" : "if (expectedConst)",
      "info" : "IfStatement[9353-9681]:IfStatement[9367-9695]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9372-9520]:Block[9386-9534]"
    }, {
      "left" : "Preconditions.checkState(expectedConst == isConst,\n                \"The name \" + name + \" is not annotated as constant.\");",
      "right" : "Preconditions.checkState(expectedConst == isConst,\n                \"The name \" + name + \" is not annotated as constant.\");",
      "info" : "ExpressionStatement[9386-9508]:ExpressionStatement[9400-9522]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9526-9681]:Block[9540-9695]"
    }, {
      "left" : "Preconditions.checkState(expectedConst == isConst,\n                \"The name \" + name + \" should not be annotated as constant.\");",
      "right" : "Preconditions.checkState(expectedConst == isConst,\n                \"The name \" + name + \" should not be annotated as constant.\");",
      "info" : "ExpressionStatement[9540-9669]:ExpressionStatement[9554-9683]"
    }, {
      "left" : "Boolean value = constantMap.get(name);",
      "right" : "Boolean value = constantMap.get(name);",
      "info" : "VariableDeclarationStatement[9701-9739]:VariableDeclarationStatement[9715-9753]"
    }, {
      "left" : "if (value == null)",
      "right" : "if (value == null)",
      "info" : "IfStatement[9748-10007]:IfStatement[9762-10021]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9767-9820]:Block[9781-9834]"
    }, {
      "left" : "constantMap.put(name, isConst);",
      "right" : "constantMap.put(name, isConst);",
      "info" : "ExpressionStatement[9779-9810]:ExpressionStatement[9793-9824]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9826-10007]:Block[9840-10021]"
    }, {
      "left" : "Preconditions.checkState(value.booleanValue() == isConst,\n              \"The name \" + name + \" is not consistently annotated as \" +\n              \"constant.\");",
      "right" : "Preconditions.checkState(value.booleanValue() == isConst,\n              \"The name \" + name + \" is not consistently annotated as \" +\n              \"constant.\");",
      "info" : "ExpressionStatement[9838-9997]:ExpressionStatement[9852-10011]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[10433-10439]:Modifier[10447-10453]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[10440-10445]:TYPE_DECLARATION_KIND[10454-10459]"
    }, {
      "left" : "NormalizeStatements",
      "right" : "NormalizeStatements",
      "info" : "SimpleName[10446-10465]:SimpleName[10460-10479]"
    }, {
      "left" : "Callback",
      "right" : "Callback",
      "info" : "SimpleType[10477-10485]:SimpleType[10491-10499]"
    }, {
      "left" : "NormalizeStatements",
      "right" : "NormalizeStatements",
      "info" : "SimpleName[10580-10599]:SimpleName[10594-10613]"
    }, {
      "left" : "AbstractCompiler compiler",
      "right" : "AbstractCompiler compiler",
      "info" : "SingleVariableDeclaration[10600-10625]:SingleVariableDeclaration[10614-10639]"
    }, {
      "left" : "boolean assertOnChange",
      "right" : "boolean assertOnChange",
      "info" : "SingleVariableDeclaration[10627-10649]:SingleVariableDeclaration[10641-10663]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10651-10734]:Block[10665-10748]"
    }, {
      "left" : "this.compiler = compiler;",
      "right" : "this.compiler = compiler;",
      "info" : "ExpressionStatement[10659-10684]:ExpressionStatement[10673-10698]"
    }, {
      "left" : "this.assertOnChange = assertOnChange;",
      "right" : "this.assertOnChange = assertOnChange;",
      "info" : "ExpressionStatement[10691-10728]:ExpressionStatement[10705-10742]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[10740-10747]:Modifier[10754-10761]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[10748-10752]:PrimitiveType[10762-10766]"
    }, {
      "left" : "reportCodeChange",
      "right" : "reportCodeChange",
      "info" : "SimpleName[10753-10769]:SimpleName[10767-10783]"
    }, {
      "left" : "String changeDescription",
      "right" : "String changeDescription",
      "info" : "SingleVariableDeclaration[10770-10794]:SingleVariableDeclaration[10784-10808]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10796-10985]:Block[10810-10999]"
    }, {
      "left" : "if (assertOnChange)",
      "right" : "if (assertOnChange)",
      "info" : "IfStatement[10804-10944]:IfStatement[10818-10958]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10824-10944]:Block[10838-10958]"
    }, {
      "left" : "throw new IllegalStateException(\n            \"Normalize constraints violated:\\n\" + changeDescription);",
      "right" : "throw new IllegalStateException(\n            \"Normalize constraints violated:\\n\" + changeDescription);",
      "info" : "ThrowStatement[10834-10936]:ThrowStatement[10848-10950]"
    }, {
      "left" : "compiler.reportCodeChange();",
      "right" : "compiler.reportCodeChange();",
      "info" : "ExpressionStatement[10951-10979]:ExpressionStatement[10965-10993]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[10991-11000]:MarkerAnnotation[11005-11014]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11005-11011]:Modifier[11019-11025]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[11012-11019]:PrimitiveType[11026-11033]"
    }, {
      "left" : "shouldTraverse",
      "right" : "shouldTraverse",
      "info" : "SimpleName[11020-11034]:SimpleName[11034-11048]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[11035-11050]:SingleVariableDeclaration[11049-11064]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[11052-11058]:SingleVariableDeclaration[11066-11072]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[11060-11071]:SingleVariableDeclaration[11074-11085]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11073-11147]:Block[11087-11161]"
    }, {
      "left" : "doStatementNormalizations(t, n, parent);",
      "right" : "doStatementNormalizations(t, n, parent);",
      "info" : "ExpressionStatement[11081-11121]:ExpressionStatement[11095-11135]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[11129-11141]:ReturnStatement[11143-11155]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[11153-11162]:MarkerAnnotation[11167-11176]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11167-11173]:Modifier[11181-11187]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[11174-11178]:PrimitiveType[11188-11192]"
    }, {
      "left" : "visit",
      "right" : "visit",
      "info" : "SimpleName[11179-11184]:SimpleName[11193-11198]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[11185-11200]:SingleVariableDeclaration[11199-11214]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[11202-11208]:SingleVariableDeclaration[11216-11222]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[11210-11221]:SingleVariableDeclaration[11224-11235]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11223-12014]:Block[11237-12028]"
    }, {
      "left" : "switch (n.getType()) {\n        case Token.WHILE:\n          if (CONVERT_WHILE_TO_FOR) {\n            Node expr = n.getFirstChild();\n            n.setType(Token.FOR);\n            Node empty = new Node(Token.EMPTY);\n            empty.copyInformationFrom(n);\n            n.addChildBefore(empty, expr);\n            n.addChildAfter(empty.cloneNode(), expr);\n            reportCodeChange(\"WHILE node\");\n          }\n          break;\n\n        case Token.FUNCTION:\n          normalizeFunctionDeclaration(n);\n          break;\n\n        case Token.NAME:\n        case Token.STRING:\n        case Token.GET:\n        case Token.SET:\n          if (!compiler.getLifeCycleStage().isNormalizedObfuscated()) {\n            annotateConstantsByConvention(n, parent);\n          }\n          break;\n      }",
      "right" : "switch (n.getType()) {\n        case Token.WHILE:\n          if (CONVERT_WHILE_TO_FOR) {\n            Node expr = n.getFirstChild();\n            n.setType(Token.FOR);\n            Node empty = new Node(Token.EMPTY);\n            empty.copyInformationFrom(n);\n            n.addChildBefore(empty, expr);\n            n.addChildAfter(empty.cloneNode(), expr);\n            reportCodeChange(\"WHILE node\");\n          }\n          break;\n\n        case Token.FUNCTION:\n          normalizeFunctionDeclaration(n);\n          break;\n\n        case Token.NAME:\n        case Token.STRING:\n        case Token.GET:\n        case Token.SET:\n          if (!compiler.getLifeCycleStage().isNormalizedObfuscated()) {\n            annotateConstantsByConvention(n, parent);\n          }\n          break;\n      }",
      "info" : "SwitchStatement[11231-12008]:SwitchStatement[11245-12022]"
    }, {
      "left" : "case Token.WHILE:",
      "right" : "case Token.WHILE:",
      "info" : "SwitchCase[11262-11279]:SwitchCase[11276-11293]"
    }, {
      "left" : "if (CONVERT_WHILE_TO_FOR)",
      "right" : "if (CONVERT_WHILE_TO_FOR)",
      "info" : "IfStatement[11290-11637]:IfStatement[11304-11651]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11316-11637]:Block[11330-11651]"
    }, {
      "left" : "Node expr = n.getFirstChild();",
      "right" : "Node expr = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[11330-11360]:VariableDeclarationStatement[11344-11374]"
    }, {
      "left" : "n.setType(Token.FOR);",
      "right" : "n.setType(Token.FOR);",
      "info" : "ExpressionStatement[11373-11394]:ExpressionStatement[11387-11408]"
    }, {
      "left" : "Node empty = new Node(Token.EMPTY);",
      "right" : "Node empty = new Node(Token.EMPTY);",
      "info" : "VariableDeclarationStatement[11407-11442]:VariableDeclarationStatement[11421-11456]"
    }, {
      "left" : "empty.copyInformationFrom(n);",
      "right" : "empty.copyInformationFrom(n);",
      "info" : "ExpressionStatement[11455-11484]:ExpressionStatement[11469-11498]"
    }, {
      "left" : "n.addChildBefore(empty, expr);",
      "right" : "n.addChildBefore(empty, expr);",
      "info" : "ExpressionStatement[11497-11527]:ExpressionStatement[11511-11541]"
    }, {
      "left" : "n.addChildAfter(empty.cloneNode(), expr);",
      "right" : "n.addChildAfter(empty.cloneNode(), expr);",
      "info" : "ExpressionStatement[11540-11581]:ExpressionStatement[11554-11595]"
    }, {
      "left" : "reportCodeChange(\"WHILE node\");",
      "right" : "reportCodeChange(\"WHILE node\");",
      "info" : "ExpressionStatement[11594-11625]:ExpressionStatement[11608-11639]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[11648-11654]:BreakStatement[11662-11668]"
    }, {
      "left" : "case Token.FUNCTION:",
      "right" : "case Token.FUNCTION:",
      "info" : "SwitchCase[11664-11684]:SwitchCase[11678-11698]"
    }, {
      "left" : "normalizeFunctionDeclaration(n);",
      "right" : "normalizeFunctionDeclaration(n);",
      "info" : "ExpressionStatement[11695-11727]:ExpressionStatement[11709-11741]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[11738-11744]:BreakStatement[11752-11758]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[11754-11770]:SwitchCase[11768-11784]"
    }, {
      "left" : "case Token.STRING:",
      "right" : "case Token.STRING:",
      "info" : "SwitchCase[11779-11797]:SwitchCase[11793-11811]"
    }, {
      "left" : "case Token.GET:",
      "right" : "case Token.GET:",
      "info" : "SwitchCase[11806-11821]:SwitchCase[11820-11835]"
    }, {
      "left" : "case Token.SET:",
      "right" : "case Token.SET:",
      "info" : "SwitchCase[11830-11845]:SwitchCase[11844-11859]"
    }, {
      "left" : "if (!compiler.getLifeCycleStage().isNormalizedObfuscated())",
      "right" : "if (!compiler.getLifeCycleStage().isNormalizedObfuscated())",
      "info" : "IfStatement[11856-11983]:IfStatement[11870-11997]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11916-11983]:Block[11930-11997]"
    }, {
      "left" : "annotateConstantsByConvention(n, parent);",
      "right" : "annotateConstantsByConvention(n, parent);",
      "info" : "ExpressionStatement[11930-11971]:ExpressionStatement[11944-11985]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[11994-12000]:BreakStatement[12008-12014]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[12103-12110]:Modifier[12117-12124]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[12111-12115]:PrimitiveType[12125-12129]"
    }, {
      "left" : "annotateConstantsByConvention",
      "right" : "annotateConstantsByConvention",
      "info" : "SimpleName[12116-12145]:SimpleName[12130-12159]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[12146-12152]:SingleVariableDeclaration[12160-12166]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[12154-12165]:SingleVariableDeclaration[12168-12179]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12167-13331]:Block[12181-13345]"
    }, {
      "left" : "Preconditions.checkState(\n          n.getType() == Token.NAME\n          || n.getType() == Token.STRING\n          || n.getType() == Token.GET\n          || n.getType() == Token.SET);",
      "right" : "Preconditions.checkState(\n          n.getType() == Token.NAME\n          || n.getType() == Token.STRING\n          || n.getType() == Token.GET\n          || n.getType() == Token.SET);",
      "info" : "ExpressionStatement[12175-12355]:ExpressionStatement[12189-12369]"
    }, {
      "left" : "boolean isObjLitKey = NodeUtil.isObjectLitKey(n, parent);",
      "right" : "boolean isObjLitKey = NodeUtil.isObjectLitKey(n, parent);",
      "info" : "VariableDeclarationStatement[12514-12571]:VariableDeclarationStatement[12528-12585]"
    }, {
      "left" : "boolean isProperty = isObjLitKey ||\n          (parent.getType() == Token.GETPROP &&\n           parent.getLastChild() == n);",
      "right" : "boolean isProperty = isObjLitKey ||\n          (parent.getType() == Token.GETPROP &&\n           parent.getLastChild() == n);",
      "info" : "VariableDeclarationStatement[12578-12701]:VariableDeclarationStatement[12592-12715]"
    }, {
      "left" : "if (n.getType() == Token.NAME || isProperty)",
      "right" : "if (n.getType() == Token.NAME || isProperty)",
      "info" : "IfStatement[12708-13325]:IfStatement[12722-13339]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12753-13325]:Block[12767-13339]"
    }, {
      "left" : "boolean isMarkedConstant = n.getBooleanProp(Node.IS_CONSTANT_NAME);",
      "right" : "boolean isMarkedConstant = n.getBooleanProp(Node.IS_CONSTANT_NAME);",
      "info" : "VariableDeclarationStatement[12763-12830]:VariableDeclarationStatement[12777-12844]"
    }, {
      "left" : "if (!isMarkedConstant &&\n            NodeUtil.isConstantByConvention(\n                compiler.getCodingConvention(), n, parent))",
      "right" : "if (!isMarkedConstant &&\n            NodeUtil.isConstantByConvention(\n                compiler.getCodingConvention(), n, parent))",
      "info" : "IfStatement[12839-13317]:IfStatement[12853-13331]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12969-13317]:Block[12983-13331]"
    }, {
      "left" : "if (assertOnChange)",
      "right" : "if (assertOnChange)",
      "info" : "IfStatement[12981-13250]:IfStatement[12995-13264]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13001-13250]:Block[13015-13264]"
    }, {
      "left" : "String name = n.getString();",
      "right" : "String name = n.getString();",
      "info" : "VariableDeclarationStatement[13015-13043]:VariableDeclarationStatement[13029-13057]"
    }, {
      "left" : "throw new IllegalStateException(\n                \"Unexpected const change.\\n\" +\n                \"  name: \"+ name + \"\\n\" +\n                \"  parent:\" + n.getParent().toStringTree());",
      "right" : "throw new IllegalStateException(\n                \"Unexpected const change.\\n\" +\n                \"  name: \"+ name + \"\\n\" +\n                \"  parent:\" + n.getParent().toStringTree());",
      "info" : "ThrowStatement[13056-13238]:ThrowStatement[13070-13252]"
    }, {
      "left" : "n.putBooleanProp(Node.IS_CONSTANT_NAME, true);",
      "right" : "n.putBooleanProp(Node.IS_CONSTANT_NAME, true);",
      "info" : "ExpressionStatement[13261-13307]:ExpressionStatement[13275-13321]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[13585-13592]:Modifier[13599-13606]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[13593-13597]:PrimitiveType[13607-13611]"
    }, {
      "left" : "normalizeFunctionDeclaration",
      "right" : "normalizeFunctionDeclaration",
      "info" : "SimpleName[13598-13626]:SimpleName[13612-13640]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[13627-13633]:SingleVariableDeclaration[13641-13647]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13635-13854]:Block[13649-13868]"
    }, {
      "left" : "Preconditions.checkState(n.getType() == Token.FUNCTION);",
      "right" : "Preconditions.checkState(n.getType() == Token.FUNCTION);",
      "info" : "ExpressionStatement[13643-13699]:ExpressionStatement[13657-13713]"
    }, {
      "left" : "if (!NodeUtil.isFunctionExpression(n)\n          && !NodeUtil.isHoistedFunctionDeclaration(n))",
      "right" : "if (!NodeUtil.isFunctionExpression(n)\n          && !NodeUtil.isHoistedFunctionDeclaration(n))",
      "info" : "IfStatement[13706-13848]:IfStatement[13720-13862]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13800-13848]:Block[13814-13862]"
    }, {
      "left" : "rewriteFunctionDeclaration(n);",
      "right" : "rewriteFunctionDeclaration(n);",
      "info" : "ExpressionStatement[13810-13840]:ExpressionStatement[13824-13854]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[14183-14190]:Modifier[14197-14204]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[14191-14195]:PrimitiveType[14205-14209]"
    }, {
      "left" : "rewriteFunctionDeclaration",
      "right" : "rewriteFunctionDeclaration",
      "info" : "SimpleName[14196-14222]:SimpleName[14210-14236]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[14223-14229]:SingleVariableDeclaration[14237-14243]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14231-14735]:Block[14245-14749]"
    }, {
      "left" : "Node oldNameNode = n.getFirstChild();",
      "right" : "Node oldNameNode = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[14281-14318]:VariableDeclarationStatement[14295-14332]"
    }, {
      "left" : "Node fnNameNode = oldNameNode.cloneNode();",
      "right" : "Node fnNameNode = oldNameNode.cloneNode();",
      "info" : "VariableDeclarationStatement[14325-14367]:VariableDeclarationStatement[14339-14381]"
    }, {
      "left" : "Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());",
      "right" : "Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());",
      "info" : "VariableDeclarationStatement[14374-14447]:VariableDeclarationStatement[14388-14461]"
    }, {
      "left" : "var.copyInformationFrom(n);",
      "right" : "var.copyInformationFrom(n);",
      "info" : "ExpressionStatement[14454-14481]:ExpressionStatement[14468-14495]"
    }, {
      "left" : "oldNameNode.setString(\"\");",
      "right" : "oldNameNode.setString(\"\");",
      "info" : "ExpressionStatement[14519-14545]:ExpressionStatement[14533-14559]"
    }, {
      "left" : "Node parent = n.getParent();",
      "right" : "Node parent = n.getParent();",
      "info" : "VariableDeclarationStatement[14580-14608]:VariableDeclarationStatement[14594-14622]"
    }, {
      "left" : "parent.replaceChild(n, var);",
      "right" : "parent.replaceChild(n, var);",
      "info" : "ExpressionStatement[14615-14643]:ExpressionStatement[14629-14657]"
    }, {
      "left" : "fnNameNode.addChildToFront(n);",
      "right" : "fnNameNode.addChildToFront(n);",
      "info" : "ExpressionStatement[14650-14680]:ExpressionStatement[14664-14694]"
    }, {
      "left" : "reportCodeChange(\"Function declaration\");",
      "right" : "reportCodeChange(\"Function declaration\");",
      "info" : "ExpressionStatement[14688-14729]:ExpressionStatement[14702-14743]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[14822-14829]:Modifier[14836-14843]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[14830-14834]:PrimitiveType[14844-14848]"
    }, {
      "left" : "doStatementNormalizations",
      "right" : "doStatementNormalizations",
      "info" : "SimpleName[14835-14860]:SimpleName[14849-14874]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[14870-14885]:SingleVariableDeclaration[14884-14899]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[14887-14893]:SingleVariableDeclaration[14901-14907]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[14895-14906]:SingleVariableDeclaration[14909-14920]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14908-15554]:Block[14922-15568]"
    }, {
      "left" : "if (n.getType() == Token.LABEL)",
      "right" : "if (n.getType() == Token.LABEL)",
      "info" : "IfStatement[14916-14985]:IfStatement[14930-14999]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14948-14985]:Block[14962-14999]"
    }, {
      "left" : "normalizeLabels(n);",
      "right" : "normalizeLabels(n);",
      "info" : "ExpressionStatement[14958-14977]:ExpressionStatement[14972-14991]"
    }, {
      "left" : "if (NodeUtil.isStatementBlock(n) || n.getType() == Token.LABEL)",
      "right" : "if (NodeUtil.isStatementBlock(n) || n.getType() == Token.LABEL)",
      "info" : "IfStatement[15135-15254]:IfStatement[15149-15268]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15199-15254]:Block[15213-15268]"
    }, {
      "left" : "extractForInitializer(n, null, null);",
      "right" : "extractForInitializer(n, null, null);",
      "info" : "ExpressionStatement[15209-15246]:ExpressionStatement[15223-15260]"
    }, {
      "left" : "if (NodeUtil.isStatementBlock(n))",
      "right" : "if (NodeUtil.isStatementBlock(n))",
      "info" : "IfStatement[15374-15450]:IfStatement[15388-15464]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15408-15450]:Block[15422-15464]"
    }, {
      "left" : "splitVarDeclarations(n);",
      "right" : "splitVarDeclarations(n);",
      "info" : "ExpressionStatement[15418-15442]:ExpressionStatement[15432-15456]"
    }, {
      "left" : "if (n.getType() == Token.FUNCTION)",
      "right" : "if (n.getType() == Token.FUNCTION)",
      "info" : "IfStatement[15458-15548]:IfStatement[15472-15562]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15493-15548]:Block[15507-15562]"
    }, {
      "left" : "moveNamedFunctions(n.getLastChild());",
      "right" : "moveNamedFunctions(n.getLastChild());",
      "info" : "ExpressionStatement[15503-15540]:ExpressionStatement[15517-15554]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[15898-15905]:Modifier[15912-15919]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[15906-15910]:PrimitiveType[15920-15924]"
    }, {
      "left" : "normalizeLabels",
      "right" : "normalizeLabels",
      "info" : "SimpleName[15911-15926]:SimpleName[15925-15940]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[15927-15933]:SingleVariableDeclaration[15941-15947]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15935-16478]:Block[15949-16492]"
    }, {
      "left" : "Preconditions.checkArgument(n.getType() == Token.LABEL);",
      "right" : "Preconditions.checkArgument(n.getType() == Token.LABEL);",
      "info" : "ExpressionStatement[15943-15999]:ExpressionStatement[15957-16013]"
    }, {
      "left" : "Node last = n.getLastChild();",
      "right" : "Node last = n.getLastChild();",
      "info" : "VariableDeclarationStatement[16007-16036]:VariableDeclarationStatement[16021-16050]"
    }, {
      "left" : "switch (last.getType()) {\n        case Token.LABEL:\n        case Token.BLOCK:\n        case Token.FOR:\n        case Token.WHILE:\n        case Token.DO:\n          return;\n        default:\n          Node block = new Node(Token.BLOCK);\n          block.copyInformationFrom(last);\n          n.replaceChild(last, block);\n          block.addChildToFront(last);\n          reportCodeChange(\"LABEL normalization\");\n          return;\n      }",
      "right" : "switch (last.getType()) {\n        case Token.LABEL:\n        case Token.BLOCK:\n        case Token.FOR:\n        case Token.WHILE:\n        case Token.DO:\n          return;\n        default:\n          Node block = new Node(Token.BLOCK);\n          block.copyInformationFrom(last);\n          n.replaceChild(last, block);\n          block.addChildToFront(last);\n          reportCodeChange(\"LABEL normalization\");\n          return;\n      }",
      "info" : "SwitchStatement[16043-16472]:SwitchStatement[16057-16486]"
    }, {
      "left" : "case Token.LABEL:",
      "right" : "case Token.LABEL:",
      "info" : "SwitchCase[16077-16094]:SwitchCase[16091-16108]"
    }, {
      "left" : "case Token.BLOCK:",
      "right" : "case Token.BLOCK:",
      "info" : "SwitchCase[16103-16120]:SwitchCase[16117-16134]"
    }, {
      "left" : "case Token.FOR:",
      "right" : "case Token.FOR:",
      "info" : "SwitchCase[16129-16144]:SwitchCase[16143-16158]"
    }, {
      "left" : "case Token.WHILE:",
      "right" : "case Token.WHILE:",
      "info" : "SwitchCase[16153-16170]:SwitchCase[16167-16184]"
    }, {
      "left" : "case Token.DO:",
      "right" : "case Token.DO:",
      "info" : "SwitchCase[16179-16193]:SwitchCase[16193-16207]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[16204-16211]:ReturnStatement[16218-16225]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[16220-16228]:SwitchCase[16234-16242]"
    }, {
      "left" : "Node block = new Node(Token.BLOCK);",
      "right" : "Node block = new Node(Token.BLOCK);",
      "info" : "VariableDeclarationStatement[16239-16274]:VariableDeclarationStatement[16253-16288]"
    }, {
      "left" : "block.copyInformationFrom(last);",
      "right" : "block.copyInformationFrom(last);",
      "info" : "ExpressionStatement[16285-16317]:ExpressionStatement[16299-16331]"
    }, {
      "left" : "n.replaceChild(last, block);",
      "right" : "n.replaceChild(last, block);",
      "info" : "ExpressionStatement[16328-16356]:ExpressionStatement[16342-16370]"
    }, {
      "left" : "block.addChildToFront(last);",
      "right" : "block.addChildToFront(last);",
      "info" : "ExpressionStatement[16367-16395]:ExpressionStatement[16381-16409]"
    }, {
      "left" : "reportCodeChange(\"LABEL normalization\");",
      "right" : "reportCodeChange(\"LABEL normalization\");",
      "info" : "ExpressionStatement[16406-16446]:ExpressionStatement[16420-16460]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[16457-16464]:ReturnStatement[16471-16478]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[16963-16970]:Modifier[16977-16984]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[16971-16975]:PrimitiveType[16985-16989]"
    }, {
      "left" : "extractForInitializer",
      "right" : "extractForInitializer",
      "info" : "SimpleName[16976-16997]:SimpleName[16990-17011]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[17007-17013]:SingleVariableDeclaration[17021-17027]"
    }, {
      "left" : "Node before",
      "right" : "Node before",
      "info" : "SingleVariableDeclaration[17015-17026]:SingleVariableDeclaration[17029-17040]"
    }, {
      "left" : "Node beforeParent",
      "right" : "Node beforeParent",
      "info" : "SingleVariableDeclaration[17028-17045]:SingleVariableDeclaration[17042-17059]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17047-18816]:Block[17061-18830]"
    }, {
      "left" : "for (Node next, c = n.getFirstChild(); c != null; c = next)",
      "right" : "for (Node next, c = n.getFirstChild(); c != null; c = next)",
      "info" : "ForStatement[17056-18810]:ForStatement[17070-18824]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17116-18810]:Block[17130-18824]"
    }, {
      "left" : "next = c.getNext();",
      "right" : "next = c.getNext();",
      "info" : "ExpressionStatement[17126-17145]:ExpressionStatement[17140-17159]"
    }, {
      "left" : "Node insertBefore = (before == null) ? c : before;",
      "right" : "Node insertBefore = (before == null) ? c : before;",
      "info" : "VariableDeclarationStatement[17154-17204]:VariableDeclarationStatement[17168-17218]"
    }, {
      "left" : "Node insertBeforeParent = (before == null) ? n : beforeParent;",
      "right" : "Node insertBeforeParent = (before == null) ? n : beforeParent;",
      "info" : "VariableDeclarationStatement[17213-17275]:VariableDeclarationStatement[17227-17289]"
    }, {
      "left" : "switch (c.getType()) {\n          case Token.LABEL:\n            extractForInitializer(c, insertBefore, insertBeforeParent);\n            break;\n          case Token.FOR:\n            if (NodeUtil.isForIn(c)) {\n              Node first = c.getFirstChild();\n              if (first.getType() == Token.VAR) {\n                // Transform:\n                //    for (var a in b) {}\n                // to:\n                //    var a; for (a in b) {};\n                Node newStatement = first.cloneTree();\n                Node name = first.removeFirstChild();\n                first.getParent().replaceChild(first, name);\n                insertBeforeParent.addChildBefore(newStatement, insertBefore);\n                reportCodeChange(\"FOR-IN var declaration\");\n              }\n            } else if (c.getFirstChild().getType() != Token.EMPTY) {\n              Node init = c.getFirstChild();\n              Node empty = new Node(Token.EMPTY);\n              empty.copyInformationFrom(c);\n              c.replaceChild(init, empty);\n\n              Node newStatement;\n              // Only VAR statements, and expressions are allowed,\n              // but are handled differently.\n              if (init.getType() == Token.VAR) {\n                newStatement = init;\n              } else {\n                newStatement = NodeUtil.newExpr(init);\n              }\n\n              insertBeforeParent.addChildBefore(newStatement, insertBefore);\n              reportCodeChange(\"FOR initializer\");\n            }\n            break;\n        }",
      "right" : "switch (c.getType()) {\n          case Token.LABEL:\n            extractForInitializer(c, insertBefore, insertBeforeParent);\n            break;\n          case Token.FOR:\n            if (NodeUtil.isForIn(c)) {\n              Node first = c.getFirstChild();\n              if (first.getType() == Token.VAR) {\n                // Transform:\n                //    for (var a in b) {}\n                // to:\n                //    var a; for (a in b) {};\n                Node newStatement = first.cloneTree();\n                Node name = first.removeFirstChild();\n                first.getParent().replaceChild(first, name);\n                insertBeforeParent.addChildBefore(newStatement, insertBefore);\n                reportCodeChange(\"FOR-IN var declaration\");\n              }\n            } else if (c.getFirstChild().getType() != Token.EMPTY) {\n              Node init = c.getFirstChild();\n              Node empty = new Node(Token.EMPTY);\n              empty.copyInformationFrom(c);\n              c.replaceChild(init, empty);\n\n              Node newStatement;\n              // Only VAR statements, and expressions are allowed,\n              // but are handled differently.\n              if (init.getType() == Token.VAR) {\n                newStatement = init;\n              } else {\n                newStatement = NodeUtil.newExpr(init);\n              }\n\n              insertBeforeParent.addChildBefore(newStatement, insertBefore);\n              reportCodeChange(\"FOR initializer\");\n            }\n            break;\n        }",
      "info" : "SwitchStatement[17284-18802]:SwitchStatement[17298-18816]"
    }, {
      "left" : "case Token.LABEL:",
      "right" : "case Token.LABEL:",
      "info" : "SwitchCase[17317-17334]:SwitchCase[17331-17348]"
    }, {
      "left" : "extractForInitializer(c, insertBefore, insertBeforeParent);",
      "right" : "extractForInitializer(c, insertBefore, insertBeforeParent);",
      "info" : "ExpressionStatement[17347-17406]:ExpressionStatement[17361-17420]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[17419-17425]:BreakStatement[17433-17439]"
    }, {
      "left" : "case Token.FOR:",
      "right" : "case Token.FOR:",
      "info" : "SwitchCase[17436-17451]:SwitchCase[17450-17465]"
    }, {
      "left" : "if (NodeUtil.isForIn(c))",
      "right" : "if (NodeUtil.isForIn(c))",
      "info" : "IfStatement[17464-18773]:IfStatement[17478-18787]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17489-18066]:Block[17503-18080]"
    }, {
      "left" : "Node first = c.getFirstChild();",
      "right" : "Node first = c.getFirstChild();",
      "info" : "VariableDeclarationStatement[17505-17536]:VariableDeclarationStatement[17519-17550]"
    }, {
      "left" : "if (first.getType() == Token.VAR)",
      "right" : "if (first.getType() == Token.VAR)",
      "info" : "IfStatement[17551-18052]:IfStatement[17565-18066]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17585-18052]:Block[17599-18066]"
    }, {
      "left" : "Node newStatement = first.cloneTree();",
      "right" : "Node newStatement = first.cloneTree();",
      "info" : "VariableDeclarationStatement[17744-17782]:VariableDeclarationStatement[17758-17796]"
    }, {
      "left" : "Node name = first.removeFirstChild();",
      "right" : "Node name = first.removeFirstChild();",
      "info" : "VariableDeclarationStatement[17799-17836]:VariableDeclarationStatement[17813-17850]"
    }, {
      "left" : "first.getParent().replaceChild(first, name);",
      "right" : "first.getParent().replaceChild(first, name);",
      "info" : "ExpressionStatement[17853-17897]:ExpressionStatement[17867-17911]"
    }, {
      "left" : "insertBeforeParent.addChildBefore(newStatement, insertBefore);",
      "right" : "insertBeforeParent.addChildBefore(newStatement, insertBefore);",
      "info" : "ExpressionStatement[17914-17976]:ExpressionStatement[17928-17990]"
    }, {
      "left" : "reportCodeChange(\"FOR-IN var declaration\");",
      "right" : "reportCodeChange(\"FOR-IN var declaration\");",
      "info" : "ExpressionStatement[17993-18036]:ExpressionStatement[18007-18050]"
    }, {
      "left" : "if (c.getFirstChild().getType() != Token.EMPTY)",
      "right" : "if (c.getFirstChild().getType() != Token.EMPTY)",
      "info" : "IfStatement[18072-18773]:IfStatement[18086-18787]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18120-18773]:Block[18134-18787]"
    }, {
      "left" : "Node init = c.getFirstChild();",
      "right" : "Node init = c.getFirstChild();",
      "info" : "VariableDeclarationStatement[18136-18166]:VariableDeclarationStatement[18150-18180]"
    }, {
      "left" : "Node empty = new Node(Token.EMPTY);",
      "right" : "Node empty = new Node(Token.EMPTY);",
      "info" : "VariableDeclarationStatement[18181-18216]:VariableDeclarationStatement[18195-18230]"
    }, {
      "left" : "empty.copyInformationFrom(c);",
      "right" : "empty.copyInformationFrom(c);",
      "info" : "ExpressionStatement[18231-18260]:ExpressionStatement[18245-18274]"
    }, {
      "left" : "c.replaceChild(init, empty);",
      "right" : "c.replaceChild(init, empty);",
      "info" : "ExpressionStatement[18275-18303]:ExpressionStatement[18289-18317]"
    }, {
      "left" : "Node newStatement;",
      "right" : "Node newStatement;",
      "info" : "VariableDeclarationStatement[18319-18337]:VariableDeclarationStatement[18333-18351]"
    }, {
      "left" : "if (init.getType() == Token.VAR)",
      "right" : "if (init.getType() == Token.VAR)",
      "info" : "IfStatement[18465-18630]:IfStatement[18479-18644]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18498-18552]:Block[18512-18566]"
    }, {
      "left" : "newStatement = init;",
      "right" : "newStatement = init;",
      "info" : "ExpressionStatement[18516-18536]:ExpressionStatement[18530-18550]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18558-18630]:Block[18572-18644]"
    }, {
      "left" : "newStatement = NodeUtil.newExpr(init);",
      "right" : "newStatement = NodeUtil.newExpr(init);",
      "info" : "ExpressionStatement[18576-18614]:ExpressionStatement[18590-18628]"
    }, {
      "left" : "insertBeforeParent.addChildBefore(newStatement, insertBefore);",
      "right" : "insertBeforeParent.addChildBefore(newStatement, insertBefore);",
      "info" : "ExpressionStatement[18646-18708]:ExpressionStatement[18660-18722]"
    }, {
      "left" : "reportCodeChange(\"FOR initializer\");",
      "right" : "reportCodeChange(\"FOR initializer\");",
      "info" : "ExpressionStatement[18723-18759]:ExpressionStatement[18737-18773]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[18786-18792]:BreakStatement[18800-18806]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[19011-19018]:Modifier[19025-19032]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[19019-19023]:PrimitiveType[19033-19037]"
    }, {
      "left" : "splitVarDeclarations",
      "right" : "splitVarDeclarations",
      "info" : "SimpleName[19024-19044]:SimpleName[19038-19058]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[19045-19051]:SingleVariableDeclaration[19059-19065]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19053-19690]:Block[19067-19704]"
    }, {
      "left" : "for (Node next, c = n.getFirstChild(); c != null; c = next)",
      "right" : "for (Node next, c = n.getFirstChild(); c != null; c = next)",
      "info" : "ForStatement[19061-19684]:ForStatement[19075-19698]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19121-19684]:Block[19135-19698]"
    }, {
      "left" : "next = c.getNext();",
      "right" : "next = c.getNext();",
      "info" : "ExpressionStatement[19131-19150]:ExpressionStatement[19145-19164]"
    }, {
      "left" : "if (c.getType() == Token.VAR)",
      "right" : "if (c.getType() == Token.VAR)",
      "info" : "IfStatement[19159-19676]:IfStatement[19173-19690]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19189-19676]:Block[19203-19690]"
    }, {
      "left" : "if (assertOnChange && !c.hasChildren())",
      "right" : "if (assertOnChange && !c.hasChildren())",
      "info" : "IfStatement[19201-19318]:IfStatement[19215-19332]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19241-19318]:Block[19255-19332]"
    }, {
      "left" : "throw new IllegalStateException(\"Empty VAR node.\");",
      "right" : "throw new IllegalStateException(\"Empty VAR node.\");",
      "info" : "ThrowStatement[19255-19306]:ThrowStatement[19269-19320]"
    }, {
      "left" : "while (c.getFirstChild() != c.getLastChild())",
      "right" : "while (c.getFirstChild() != c.getLastChild())",
      "info" : "WhileStatement[19330-19666]:WhileStatement[19344-19680]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19376-19666]:Block[19390-19680]"
    }, {
      "left" : "Node name = c.getFirstChild();",
      "right" : "Node name = c.getFirstChild();",
      "info" : "VariableDeclarationStatement[19390-19420]:VariableDeclarationStatement[19404-19434]"
    }, {
      "left" : "c.removeChild(name);",
      "right" : "c.removeChild(name);",
      "info" : "ExpressionStatement[19433-19453]:ExpressionStatement[19447-19467]"
    }, {
      "left" : "Node newVar = new Node(\n                Token.VAR, name, n.getLineno(), n.getCharno());",
      "right" : "Node newVar = new Node(\n                Token.VAR, name, n.getLineno(), n.getCharno());",
      "info" : "VariableDeclarationStatement[19466-19553]:VariableDeclarationStatement[19480-19567]"
    }, {
      "left" : "n.addChildBefore(newVar, c);",
      "right" : "n.addChildBefore(newVar, c);",
      "info" : "ExpressionStatement[19566-19594]:ExpressionStatement[19580-19608]"
    }, {
      "left" : "reportCodeChange(\"VAR with multiple children\");",
      "right" : "reportCodeChange(\"VAR with multiple children\");",
      "info" : "ExpressionStatement[19607-19654]:ExpressionStatement[19621-19668]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[19865-19872]:Modifier[19879-19886]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[19873-19877]:PrimitiveType[19887-19891]"
    }, {
      "left" : "moveNamedFunctions",
      "right" : "moveNamedFunctions",
      "info" : "SimpleName[19878-19896]:SimpleName[19892-19910]"
    }, {
      "left" : "Node functionBody",
      "right" : "Node functionBody",
      "info" : "SingleVariableDeclaration[19897-19914]:SingleVariableDeclaration[19911-19928]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19916-21231]:Block[19930-21245]"
    }, {
      "left" : "Preconditions.checkState(\n          functionBody.getParent().getType() == Token.FUNCTION);",
      "right" : "Preconditions.checkState(\n          functionBody.getParent().getType() == Token.FUNCTION);",
      "info" : "ExpressionStatement[19924-20014]:ExpressionStatement[19938-20028]"
    }, {
      "left" : "Node previous = null;",
      "right" : "Node previous = null;",
      "info" : "VariableDeclarationStatement[20021-20042]:VariableDeclarationStatement[20035-20056]"
    }, {
      "left" : "Node current = functionBody.getFirstChild();",
      "right" : "Node current = functionBody.getFirstChild();",
      "info" : "VariableDeclarationStatement[20049-20093]:VariableDeclarationStatement[20063-20107]"
    }, {
      "left" : "while (current != null && NodeUtil.isFunctionDeclaration(current))",
      "right" : "while (current != null && NodeUtil.isFunctionDeclaration(current))",
      "info" : "WhileStatement[20216-20357]:WhileStatement[20230-20371]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20283-20357]:Block[20297-20371]"
    }, {
      "left" : "previous = current;",
      "right" : "previous = current;",
      "info" : "ExpressionStatement[20293-20312]:ExpressionStatement[20307-20326]"
    }, {
      "left" : "current = current.getNext();",
      "right" : "current = current.getNext();",
      "info" : "ExpressionStatement[20321-20349]:ExpressionStatement[20335-20363]"
    }, {
      "left" : "Node insertAfter = previous;",
      "right" : "Node insertAfter = previous;",
      "info" : "VariableDeclarationStatement[20421-20449]:VariableDeclarationStatement[20435-20463]"
    }, {
      "left" : "while (current != null)",
      "right" : "while (current != null)",
      "info" : "WhileStatement[20456-21225]:WhileStatement[20470-21239]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20480-21225]:Block[20494-21239]"
    }, {
      "left" : "Node next = current.getNext();",
      "right" : "Node next = current.getNext();",
      "info" : "VariableDeclarationStatement[20559-20589]:VariableDeclarationStatement[20573-20603]"
    }, {
      "left" : "if (NodeUtil.isFunctionDeclaration(current))",
      "right" : "if (NodeUtil.isFunctionDeclaration(current))",
      "info" : "IfStatement[20598-21193]:IfStatement[20612-21207]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20643-21069]:Block[20657-21083]"
    }, {
      "left" : "Preconditions.checkNotNull(previous);",
      "right" : "Preconditions.checkNotNull(previous);",
      "info" : "ExpressionStatement[20706-20743]:ExpressionStatement[20720-20757]"
    }, {
      "left" : "functionBody.removeChildAfter(previous);",
      "right" : "functionBody.removeChildAfter(previous);",
      "info" : "ExpressionStatement[20754-20794]:ExpressionStatement[20768-20808]"
    }, {
      "left" : "insertAfter = addToFront(functionBody, current, insertAfter);",
      "right" : "insertAfter = addToFront(functionBody, current, insertAfter);",
      "info" : "ExpressionStatement[20918-20979]:ExpressionStatement[20932-20993]"
    }, {
      "left" : "reportCodeChange(\"Move function declaration not at top of function\");",
      "right" : "reportCodeChange(\"Move function declaration not at top of function\");",
      "info" : "ExpressionStatement[20990-21059]:ExpressionStatement[21004-21073]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21075-21193]:Block[21089-21207]"
    }, {
      "left" : "previous = current;",
      "right" : "previous = current;",
      "info" : "ExpressionStatement[21164-21183]:ExpressionStatement[21178-21197]"
    }, {
      "left" : "current = next;",
      "right" : "current = next;",
      "info" : "ExpressionStatement[21202-21217]:ExpressionStatement[21216-21231]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[21442-21449]:Modifier[21456-21463]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[21450-21454]:SimpleType[21464-21468]"
    }, {
      "left" : "addToFront",
      "right" : "addToFront",
      "info" : "SimpleName[21455-21465]:SimpleName[21469-21479]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[21466-21477]:SingleVariableDeclaration[21480-21491]"
    }, {
      "left" : "Node newChild",
      "right" : "Node newChild",
      "info" : "SingleVariableDeclaration[21479-21492]:SingleVariableDeclaration[21493-21506]"
    }, {
      "left" : "Node after",
      "right" : "Node after",
      "info" : "SingleVariableDeclaration[21494-21504]:SingleVariableDeclaration[21508-21518]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21506-21675]:Block[21520-21689]"
    }, {
      "left" : "if (after == null)",
      "right" : "if (after == null)",
      "info" : "IfStatement[21514-21646]:IfStatement[21528-21660]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21533-21584]:Block[21547-21598]"
    }, {
      "left" : "parent.addChildToFront(newChild);",
      "right" : "parent.addChildToFront(newChild);",
      "info" : "ExpressionStatement[21543-21576]:ExpressionStatement[21557-21590]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21590-21646]:Block[21604-21660]"
    }, {
      "left" : "parent.addChildAfter(newChild, after);",
      "right" : "parent.addChildAfter(newChild, after);",
      "info" : "ExpressionStatement[21600-21638]:ExpressionStatement[21614-21652]"
    }, {
      "left" : "return newChild;",
      "right" : "return newChild;",
      "info" : "ReturnStatement[21653-21669]:ReturnStatement[21667-21683]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[21735-21742]:Modifier[21749-21756]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[21743-21747]:PrimitiveType[21757-21761]"
    }, {
      "left" : "removeDuplicateDeclarations",
      "right" : "removeDuplicateDeclarations",
      "info" : "SimpleName[21748-21775]:SimpleName[21762-21789]"
    }, {
      "left" : "Node externs",
      "right" : "Node externs",
      "info" : "SingleVariableDeclaration[21776-21788]:SingleVariableDeclaration[21790-21802]"
    }, {
      "left" : "Node root",
      "right" : "Node root",
      "info" : "SingleVariableDeclaration[21790-21799]:SingleVariableDeclaration[21804-21813]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21801-22082]:Block[21815-22096]"
    }, {
      "left" : "Callback tickler = new ScopeTicklingCallback();",
      "right" : "Callback tickler = new ScopeTicklingCallback();",
      "info" : "VariableDeclarationStatement[21807-21854]:VariableDeclarationStatement[21821-21868]"
    }, {
      "left" : "ScopeCreator scopeCreator =  new SyntacticScopeCreator(\n        compiler, new DuplicateDeclarationHandler());",
      "right" : "ScopeCreator scopeCreator =  new SyntacticScopeCreator(\n        compiler, new DuplicateDeclarationHandler());",
      "info" : "VariableDeclarationStatement[21859-21968]:VariableDeclarationStatement[21873-21982]"
    }, {
      "left" : "NodeTraversal t = new NodeTraversal(compiler, tickler, scopeCreator);",
      "right" : "NodeTraversal t = new NodeTraversal(compiler, tickler, scopeCreator);",
      "info" : "VariableDeclarationStatement[21973-22042]:VariableDeclarationStatement[21987-22056]"
    }, {
      "left" : "t.traverseRoots(externs, root);",
      "right" : "t.traverseRoots(externs, root);",
      "info" : "ExpressionStatement[22047-22078]:ExpressionStatement[22061-22092]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[22147-22154]:Modifier[22161-22168]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[22155-22160]:Modifier[22169-22174]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[22161-22166]:TYPE_DECLARATION_KIND[22175-22180]"
    }, {
      "left" : "DuplicateDeclarationHandler",
      "right" : "DuplicateDeclarationHandler",
      "info" : "SimpleName[22167-22194]:SimpleName[22181-22208]"
    }, {
      "left" : "SyntacticScopeCreator.RedeclarationHandler",
      "right" : "SyntacticScopeCreator.RedeclarationHandler",
      "info" : "SimpleType[22212-22254]:SimpleType[22226-22268]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[22441-22450]:MarkerAnnotation[22455-22464]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[22455-22461]:Modifier[22469-22475]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[22462-22466]:PrimitiveType[22476-22480]"
    }, {
      "left" : "onRedeclaration",
      "right" : "onRedeclaration",
      "info" : "SimpleName[22467-22482]:SimpleName[22481-22496]"
    }, {
      "left" : "Scope s",
      "right" : "Scope s",
      "info" : "SingleVariableDeclaration[22492-22499]:SingleVariableDeclaration[22506-22513]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[22501-22512]:SingleVariableDeclaration[22515-22526]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[22514-22520]:SingleVariableDeclaration[22528-22534]"
    }, {
      "left" : "CompilerInput input",
      "right" : "CompilerInput input",
      "info" : "SingleVariableDeclaration[22522-22541]:SingleVariableDeclaration[22536-22555]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22543-24771]:Block[22557-24785]"
    }, {
      "left" : "Preconditions.checkState(n.getType() == Token.NAME);",
      "right" : "Preconditions.checkState(n.getType() == Token.NAME);",
      "info" : "ExpressionStatement[22551-22603]:ExpressionStatement[22565-22617]"
    }, {
      "left" : "Node parent = n.getParent();",
      "right" : "Node parent = n.getParent();",
      "info" : "VariableDeclarationStatement[22610-22638]:VariableDeclarationStatement[22624-22652]"
    }, {
      "left" : "Var v = s.getVar(name);",
      "right" : "Var v = s.getVar(name);",
      "info" : "VariableDeclarationStatement[22645-22668]:VariableDeclarationStatement[22659-22682]"
    }, {
      "left" : "if (v != null && s.isGlobal())",
      "right" : "if (v != null && s.isGlobal())",
      "info" : "IfStatement[22676-23103]:IfStatement[22690-23117]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22707-23103]:Block[22721-23117]"
    }, {
      "left" : "if (v.isExtern() && !input.isExtern())",
      "right" : "if (v.isExtern() && !input.isExtern())",
      "info" : "IfStatement[22963-23095]:IfStatement[22977-23109]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23002-23095]:Block[23016-23109]"
    }, {
      "left" : "if (hasOkDuplicateDeclaration.add(v))",
      "right" : "if (hasOkDuplicateDeclaration.add(v))",
      "info" : "IfStatement[23014-23085]:IfStatement[23028-23099]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23052-23085]:Block[23066-23099]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[23066-23073]:ReturnStatement[23080-23087]"
    }, {
      "left" : "if (v != null && v.getParentNode().getType() == Token.CATCH)",
      "right" : "if (v != null && v.getParentNode().getType() == Token.CATCH)",
      "info" : "IfStatement[23160-24765]:IfStatement[23174-24779]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23221-24262]:Block[23235-24276]"
    }, {
      "left" : "name = MakeDeclaredNamesUnique.ContextualRenameInverter.getOrginalName(\n            name);",
      "right" : "name = MakeDeclaredNamesUnique.ContextualRenameInverter.getOrginalName(\n            name);",
      "info" : "ExpressionStatement[24030-24120]:ExpressionStatement[24044-24134]"
    }, {
      "left" : "compiler.report(\n            JSError.make(\n                input.getName(), n,\n                CATCH_BLOCK_VAR_ERROR, name));",
      "right" : "compiler.report(\n            JSError.make(\n                input.getName(), n,\n                CATCH_BLOCK_VAR_ERROR, name));",
      "info" : "ExpressionStatement[24129-24254]:ExpressionStatement[24143-24268]"
    }, {
      "left" : "if (v != null && parent.getType() == Token.FUNCTION)",
      "right" : "if (v != null && parent.getType() == Token.FUNCTION)",
      "info" : "IfStatement[24268-24765]:IfStatement[24282-24779]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24321-24593]:Block[24335-24607]"
    }, {
      "left" : "if (v.getParentNode().getType() == Token.VAR)",
      "right" : "if (v.getParentNode().getType() == Token.VAR)",
      "info" : "IfStatement[24331-24585]:IfStatement[24345-24599]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24377-24585]:Block[24391-24599]"
    }, {
      "left" : "s.undeclare(v);",
      "right" : "s.undeclare(v);",
      "info" : "ExpressionStatement[24389-24404]:ExpressionStatement[24403-24418]"
    }, {
      "left" : "s.declare(name, n, n.getJSType(), v.input);",
      "right" : "s.declare(name, n, n.getJSType(), v.input);",
      "info" : "ExpressionStatement[24415-24458]:ExpressionStatement[24429-24472]"
    }, {
      "left" : "replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),\n              v.getParentNode().getParent());",
      "right" : "replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),\n              v.getParentNode().getParent());",
      "info" : "ExpressionStatement[24469-24575]:ExpressionStatement[24483-24589]"
    }, {
      "left" : "if (parent.getType() == Token.VAR)",
      "right" : "if (parent.getType() == Token.VAR)",
      "info" : "IfStatement[24599-24765]:IfStatement[24613-24779]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24634-24765]:Block[24648-24779]"
    }, {
      "left" : "Preconditions.checkState(parent.hasOneChild());",
      "right" : "Preconditions.checkState(parent.hasOneChild());",
      "info" : "ExpressionStatement[24644-24691]:ExpressionStatement[24658-24705]"
    }, {
      "left" : "replaceVarWithAssignment(n, parent, parent.getParent());",
      "right" : "replaceVarWithAssignment(n, parent, parent.getParent());",
      "info" : "ExpressionStatement[24701-24757]:ExpressionStatement[24715-24771]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[25738-25745]:Modifier[25752-25759]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[25746-25750]:PrimitiveType[25760-25764]"
    }, {
      "left" : "replaceVarWithAssignment",
      "right" : "replaceVarWithAssignment",
      "info" : "SimpleName[25751-25775]:SimpleName[25765-25789]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[25776-25782]:SingleVariableDeclaration[25790-25796]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[25784-25795]:SingleVariableDeclaration[25798-25809]"
    }, {
      "left" : "Node gramps",
      "right" : "Node gramps",
      "info" : "SingleVariableDeclaration[25797-25808]:SingleVariableDeclaration[25811-25822]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25810-27085]:Block[25824-27099]"
    }, {
      "left" : "if (n.hasChildren())",
      "right" : "if (n.hasChildren())",
      "info" : "IfStatement[25818-27026]:IfStatement[25832-27040]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25839-26247]:Block[25853-26261]"
    }, {
      "left" : "parent.removeChild(n);",
      "right" : "parent.removeChild(n);",
      "info" : "ExpressionStatement[25913-25935]:ExpressionStatement[25927-25949]"
    }, {
      "left" : "Node value = n.getFirstChild();",
      "right" : "Node value = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[26000-26031]:VariableDeclarationStatement[26014-26045]"
    }, {
      "left" : "n.removeChild(value);",
      "right" : "n.removeChild(value);",
      "info" : "ExpressionStatement[26040-26061]:ExpressionStatement[26054-26075]"
    }, {
      "left" : "Node replacement = new Node(Token.ASSIGN, n, value);",
      "right" : "Node replacement = new Node(Token.ASSIGN, n, value);",
      "info" : "VariableDeclarationStatement[26070-26122]:VariableDeclarationStatement[26084-26136]"
    }, {
      "left" : "replacement.copyInformationFrom(parent);",
      "right" : "replacement.copyInformationFrom(parent);",
      "info" : "ExpressionStatement[26131-26171]:ExpressionStatement[26145-26185]"
    }, {
      "left" : "gramps.replaceChild(parent, NodeUtil.newExpr(replacement));",
      "right" : "gramps.replaceChild(parent, NodeUtil.newExpr(replacement));",
      "info" : "ExpressionStatement[26180-26239]:ExpressionStatement[26194-26253]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26253-27026]:Block[26267-27040]"
    }, {
      "left" : "if (NodeUtil.isStatementBlock(gramps))",
      "right" : "if (NodeUtil.isStatementBlock(gramps))",
      "info" : "IfStatement[26310-27018]:IfStatement[26324-27032]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26349-26398]:Block[26363-26412]"
    }, {
      "left" : "gramps.removeChild(parent);",
      "right" : "gramps.removeChild(parent);",
      "info" : "ExpressionStatement[26361-26388]:ExpressionStatement[26375-26402]"
    }, {
      "left" : "if (gramps.getType() == Token.FOR)",
      "right" : "if (gramps.getType() == Token.FOR)",
      "info" : "IfStatement[26404-27018]:IfStatement[26418-27032]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26439-26729]:Block[26453-26743]"
    }, {
      "left" : "parent.removeChild(n);",
      "right" : "parent.removeChild(n);",
      "info" : "ExpressionStatement[26655-26677]:ExpressionStatement[26669-26691]"
    }, {
      "left" : "gramps.replaceChild(parent, n);",
      "right" : "gramps.replaceChild(parent, n);",
      "info" : "ExpressionStatement[26688-26719]:ExpressionStatement[26702-26733]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26735-27018]:Block[26749-27032]"
    }, {
      "left" : "Preconditions.checkState(gramps.getType() == Token.LABEL);",
      "right" : "Preconditions.checkState(gramps.getType() == Token.LABEL);",
      "info" : "ExpressionStatement[26747-26805]:ExpressionStatement[26761-26819]"
    }, {
      "left" : "throw new IllegalStateException(\"Unexpected LABEL\");",
      "right" : "throw new IllegalStateException(\"Unexpected LABEL\");",
      "info" : "ThrowStatement[26956-27008]:ThrowStatement[26970-27022]"
    }, {
      "left" : "reportCodeChange(\"Duplicate VAR declaration\");",
      "right" : "reportCodeChange(\"Duplicate VAR declaration\");",
      "info" : "ExpressionStatement[27033-27079]:ExpressionStatement[27047-27093]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[27158-27165]:Modifier[27172-27179]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[27166-27171]:Modifier[27180-27185]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[27172-27177]:TYPE_DECLARATION_KIND[27186-27191]"
    }, {
      "left" : "ScopeTicklingCallback",
      "right" : "ScopeTicklingCallback",
      "info" : "SimpleName[27178-27199]:SimpleName[27192-27213]"
    }, {
      "left" : "NodeTraversal.ScopedCallback",
      "right" : "NodeTraversal.ScopedCallback",
      "info" : "SimpleType[27217-27245]:SimpleType[27231-27259]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[27252-27261]:MarkerAnnotation[27266-27275]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[27266-27272]:Modifier[27280-27286]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[27273-27277]:PrimitiveType[27287-27291]"
    }, {
      "left" : "enterScope",
      "right" : "enterScope",
      "info" : "SimpleName[27278-27288]:SimpleName[27292-27302]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[27289-27304]:SingleVariableDeclaration[27303-27318]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27306-27422]:Block[27320-27436]"
    }, {
      "left" : "t.getScope();",
      "right" : "t.getScope();",
      "info" : "ExpressionStatement[27403-27416]:ExpressionStatement[27417-27430]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[27428-27437]:MarkerAnnotation[27442-27451]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[27442-27448]:Modifier[27456-27462]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[27449-27453]:PrimitiveType[27463-27467]"
    }, {
      "left" : "exitScope",
      "right" : "exitScope",
      "info" : "SimpleName[27454-27463]:SimpleName[27468-27477]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[27464-27479]:SingleVariableDeclaration[27478-27493]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27481-27512]:Block[27495-27526]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[27518-27527]:MarkerAnnotation[27532-27541]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[27532-27538]:Modifier[27546-27552]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[27539-27546]:PrimitiveType[27553-27560]"
    }, {
      "left" : "shouldTraverse",
      "right" : "shouldTraverse",
      "info" : "SimpleName[27547-27561]:SimpleName[27561-27575]"
    }, {
      "left" : "NodeTraversal nodeTraversal",
      "right" : "NodeTraversal nodeTraversal",
      "info" : "SingleVariableDeclaration[27571-27598]:SingleVariableDeclaration[27585-27612]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[27600-27606]:SingleVariableDeclaration[27614-27620]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[27608-27619]:SingleVariableDeclaration[27622-27633]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27621-27647]:Block[27635-27661]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[27629-27641]:ReturnStatement[27643-27655]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[27653-27662]:MarkerAnnotation[27667-27676]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[27667-27673]:Modifier[27681-27687]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[27674-27678]:PrimitiveType[27688-27692]"
    }, {
      "left" : "visit",
      "right" : "visit",
      "info" : "SimpleName[27679-27684]:SimpleName[27693-27698]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[27685-27700]:SingleVariableDeclaration[27699-27714]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[27702-27708]:SingleVariableDeclaration[27716-27722]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[27710-27721]:SingleVariableDeclaration[27724-27735]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27723-27754]:Block[27737-27768]"
    } ]
  },
  "interFileMappings" : { }
}