{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "private ShapeUtilities()",
      "right" : "private ShapeUtilities()",
      "info" : "MethodDeclaration[3143-3222]:MethodDeclaration[3143-3222]"
    }, {
      "left" : "public static Shape clone(Shape shape)",
      "right" : "public static Shape clone(Shape shape)",
      "info" : "MethodDeclaration[3228-4163]:MethodDeclaration[3228-4163]"
    }, {
      "left" : "public static boolean equal(Shape s1, Shape s2)",
      "right" : "public static boolean equal(Shape s1, Shape s2)",
      "info" : "MethodDeclaration[4169-5506]:MethodDeclaration[4169-5506]"
    }, {
      "left" : "public static boolean equal(Line2D l1, Line2D l2)",
      "right" : "public static boolean equal(Line2D l1, Line2D l2)",
      "info" : "MethodDeclaration[5512-6178]:MethodDeclaration[5512-6178]"
    }, {
      "left" : "public static boolean equal(Ellipse2D e1, Ellipse2D e2)",
      "right" : "public static boolean equal(Ellipse2D e1, Ellipse2D e2)",
      "info" : "MethodDeclaration[6184-6789]:MethodDeclaration[6184-6789]"
    }, {
      "left" : "public static boolean equal(Arc2D a1, Arc2D a2)",
      "right" : "public static boolean equal(Arc2D a1, Arc2D a2)",
      "info" : "MethodDeclaration[6795-7652]:MethodDeclaration[6795-7652]"
    }, {
      "left" : "public static boolean equal(Polygon p1, Polygon p2)",
      "right" : "public static boolean equal(Polygon p1, Polygon p2)",
      "info" : "MethodDeclaration[7658-8416]:MethodDeclaration[7658-8416]"
    }, {
      "left" : "public static Shape createTranslatedShape(Shape shape,\n                                              double transX,\n                                              double transY)",
      "right" : "public static Shape createTranslatedShape(Shape shape,\n                                              double transX,\n                                              double transY)",
      "info" : "MethodDeclaration[9810-10568]:MethodDeclaration[9810-10568]"
    }, {
      "left" : "public static Shape createTranslatedShape(Shape shape,\n                                              RectangleAnchor anchor,\n                                              double locationX,\n                                              double locationY)",
      "right" : "public static Shape createTranslatedShape(Shape shape,\n                                              RectangleAnchor anchor,\n                                              double locationX,\n                                              double locationY)",
      "info" : "MethodDeclaration[10574-11902]:MethodDeclaration[10574-11902]"
    }, {
      "left" : "public static Shape rotateShape(Shape base, double angle,\n                                    float x, float y)",
      "right" : "public static Shape rotateShape(Shape base, double angle,\n                                    float x, float y)",
      "info" : "MethodDeclaration[11908-12679]:MethodDeclaration[11908-12679]"
    }, {
      "left" : "public static void drawRotatedShape(Graphics2D g2, Shape shape,\n                                        double angle, float x, float y)",
      "right" : "public static void drawRotatedShape(Graphics2D g2, Shape shape,\n                                        double angle, float x, float y)",
      "info" : "MethodDeclaration[12685-13447]:MethodDeclaration[12685-13447]"
    }, {
      "left" : "private static final float SQRT2 = (float) Math.pow(2.0, 0.5);",
      "right" : "private static final float SQRT2 = (float) Math.pow(2.0, 0.5);",
      "info" : "FieldDeclaration[13453-13561]:FieldDeclaration[13453-13561]"
    }, {
      "left" : "public static Shape createDiagonalCross(float l, float t)",
      "right" : "public static Shape createDiagonalCross(float l, float t)",
      "info" : "MethodDeclaration[13567-14320]:MethodDeclaration[13567-14320]"
    }, {
      "left" : "public static Shape createRegularCross(float l, float t)",
      "right" : "public static Shape createRegularCross(float l, float t)",
      "info" : "MethodDeclaration[14326-14972]:MethodDeclaration[14326-14972]"
    }, {
      "left" : "public static Shape createDiamond(float s)",
      "right" : "public static Shape createDiamond(float s)",
      "info" : "MethodDeclaration[14978-15399]:MethodDeclaration[14978-15399]"
    }, {
      "left" : "public static Shape createUpTriangle(float s)",
      "right" : "public static Shape createUpTriangle(float s)",
      "info" : "MethodDeclaration[15405-15818]:MethodDeclaration[15405-15818]"
    }, {
      "left" : "public static Shape createDownTriangle(float s)",
      "right" : "public static Shape createDownTriangle(float s)",
      "info" : "MethodDeclaration[15824-16242]:MethodDeclaration[15824-16242]"
    }, {
      "left" : "public static Shape createLineRegion(Line2D line, float width)",
      "right" : "public static Shape createLineRegion(Line2D line, float width)",
      "info" : "MethodDeclaration[16248-17677]:MethodDeclaration[16248-17677]"
    }, {
      "left" : "public static Point2D getPointInRectangle(double x, double y,\n                                              Rectangle2D area)",
      "right" : "public static Point2D getPointInRectangle(double x, double y,\n                                              Rectangle2D area)",
      "info" : "MethodDeclaration[17683-18434]:MethodDeclaration[17683-18434]"
    }, {
      "left" : "public static boolean contains(Rectangle2D rect1, Rectangle2D rect2)",
      "right" : "public static boolean contains(Rectangle2D rect1, Rectangle2D rect2)",
      "info" : "MethodDeclaration[18440-19155]:MethodDeclaration[18440-19155]"
    }, {
      "left" : "public static boolean intersects(Rectangle2D rect1, Rectangle2D rect2)",
      "right" : "public static boolean intersects(Rectangle2D rect1, Rectangle2D rect2)",
      "info" : "MethodDeclaration[19162-19848]:MethodDeclaration[19162-19848]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3215-3222]:Block[3215-3222]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3891-4163]:Block[3891-4163]"
    }, {
      "left" : "if (shape instanceof Cloneable)",
      "right" : "if (shape instanceof Cloneable)",
      "info" : "IfStatement[3901-4105]:IfStatement[3901-4105]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3933-4105]:Block[3933-4105]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[3947-4095]:TryStatement[3947-4095]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3951-4027]:Block[3951-4027]"
    }, {
      "left" : "return (Shape) ObjectUtilities.clone(shape);",
      "right" : "return (Shape) ObjectUtilities.clone(shape);",
      "info" : "ReturnStatement[3969-4013]:ReturnStatement[3969-4013]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4080-4095]:Block[4080-4095]"
    }, {
      "left" : "Shape result = null;",
      "right" : "Shape result = null;",
      "info" : "VariableDeclarationStatement[4114-4134]:VariableDeclarationStatement[4114-4134]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[4143-4157]:ReturnStatement[4143-4157]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4715-5506]:Block[4715-5506]"
    }, {
      "left" : "if (s1 instanceof Line2D && s2 instanceof Line2D)",
      "right" : "if (s1 instanceof Line2D && s2 instanceof Line2D)",
      "info" : "IfStatement[4725-5500]:IfStatement[4725-5500]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4775-4838]:Block[4775-4838]"
    }, {
      "left" : "return equal((Line2D) s1, (Line2D) s2);",
      "right" : "return equal((Line2D) s1, (Line2D) s2);",
      "info" : "ReturnStatement[4789-4828]:ReturnStatement[4789-4828]"
    }, {
      "left" : "if (s1 instanceof Ellipse2D && s2 instanceof Ellipse2D)",
      "right" : "if (s1 instanceof Ellipse2D && s2 instanceof Ellipse2D)",
      "info" : "IfStatement[4852-5500]:IfStatement[4852-5500]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4908-4977]:Block[4908-4977]"
    }, {
      "left" : "return equal((Ellipse2D) s1, (Ellipse2D) s2);",
      "right" : "return equal((Ellipse2D) s1, (Ellipse2D) s2);",
      "info" : "ReturnStatement[4922-4967]:ReturnStatement[4922-4967]"
    }, {
      "left" : "if (s1 instanceof Arc2D && s2 instanceof Arc2D)",
      "right" : "if (s1 instanceof Arc2D && s2 instanceof Arc2D)",
      "info" : "IfStatement[4991-5500]:IfStatement[4991-5500]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5039-5100]:Block[5039-5100]"
    }, {
      "left" : "return equal((Arc2D) s1, (Arc2D) s2);",
      "right" : "return equal((Arc2D) s1, (Arc2D) s2);",
      "info" : "ReturnStatement[5053-5090]:ReturnStatement[5053-5090]"
    }, {
      "left" : "if (s1 instanceof Polygon && s2 instanceof Polygon)",
      "right" : "if (s1 instanceof Polygon && s2 instanceof Polygon)",
      "info" : "IfStatement[5114-5500]:IfStatement[5114-5500]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5166-5231]:Block[5166-5231]"
    }, {
      "left" : "return equal((Polygon) s1, (Polygon) s2);",
      "right" : "return equal((Polygon) s1, (Polygon) s2);",
      "info" : "ReturnStatement[5180-5221]:ReturnStatement[5180-5221]"
    }, {
      "left" : "if (s1 instanceof GeneralPath && s2 instanceof GeneralPath)",
      "right" : "if (s1 instanceof GeneralPath && s2 instanceof GeneralPath)",
      "info" : "IfStatement[5245-5500]:IfStatement[5245-5500]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5305-5378]:Block[5305-5378]"
    }, {
      "left" : "return equal((GeneralPath) s1, (GeneralPath) s2);",
      "right" : "return equal((GeneralPath) s1, (GeneralPath) s2);",
      "info" : "ReturnStatement[5319-5368]:ReturnStatement[5319-5368]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5392-5500]:Block[5392-5500]"
    }, {
      "left" : "return ObjectUtilities.equal(s1, s2);",
      "right" : "return ObjectUtilities.equal(s1, s2);",
      "info" : "ReturnStatement[5453-5490]:ReturnStatement[5453-5490]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5855-6178]:Block[5855-6178]"
    }, {
      "left" : "if (l1 == null)",
      "right" : "if (l1 == null)",
      "info" : "IfStatement[5865-5925]:IfStatement[5865-5925]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5881-5925]:Block[5881-5925]"
    }, {
      "left" : "return (l2 == null);",
      "right" : "return (l2 == null);",
      "info" : "ReturnStatement[5895-5915]:ReturnStatement[5895-5915]"
    }, {
      "left" : "if (l2 == null)",
      "right" : "if (l2 == null)",
      "info" : "IfStatement[5934-5987]:IfStatement[5934-5987]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5950-5987]:Block[5950-5987]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[5964-5977]:ReturnStatement[5964-5977]"
    }, {
      "left" : "if (!l1.getP1().equals(l2.getP1()))",
      "right" : "if (!l1.getP1().equals(l2.getP1()))",
      "info" : "IfStatement[5996-6069]:IfStatement[5996-6069]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6032-6069]:Block[6032-6069]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[6046-6059]:ReturnStatement[6046-6059]"
    }, {
      "left" : "if (!l1.getP2().equals(l2.getP2()))",
      "right" : "if (!l1.getP2().equals(l2.getP2()))",
      "info" : "IfStatement[6078-6151]:IfStatement[6078-6151]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6114-6151]:Block[6114-6151]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[6128-6141]:ReturnStatement[6128-6141]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[6160-6172]:ReturnStatement[6160-6172]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6542-6789]:Block[6542-6789]"
    }, {
      "left" : "if (e1 == null)",
      "right" : "if (e1 == null)",
      "info" : "IfStatement[6552-6612]:IfStatement[6552-6612]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6568-6612]:Block[6568-6612]"
    }, {
      "left" : "return (e2 == null);",
      "right" : "return (e2 == null);",
      "info" : "ReturnStatement[6582-6602]:ReturnStatement[6582-6602]"
    }, {
      "left" : "if (e2 == null)",
      "right" : "if (e2 == null)",
      "info" : "IfStatement[6621-6674]:IfStatement[6621-6674]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6637-6674]:Block[6637-6674]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[6651-6664]:ReturnStatement[6651-6664]"
    }, {
      "left" : "if (!e1.getFrame().equals(e2.getFrame()))",
      "right" : "if (!e1.getFrame().equals(e2.getFrame()))",
      "info" : "IfStatement[6683-6762]:IfStatement[6683-6762]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6725-6762]:Block[6725-6762]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[6739-6752]:ReturnStatement[6739-6752]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[6771-6783]:ReturnStatement[6771-6783]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7133-7652]:Block[7133-7652]"
    }, {
      "left" : "if (a1 == null)",
      "right" : "if (a1 == null)",
      "info" : "IfStatement[7143-7203]:IfStatement[7143-7203]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7159-7203]:Block[7159-7203]"
    }, {
      "left" : "return (a2 == null);",
      "right" : "return (a2 == null);",
      "info" : "ReturnStatement[7173-7193]:ReturnStatement[7173-7193]"
    }, {
      "left" : "if (a2 == null)",
      "right" : "if (a2 == null)",
      "info" : "IfStatement[7212-7265]:IfStatement[7212-7265]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7228-7265]:Block[7228-7265]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[7242-7255]:ReturnStatement[7242-7255]"
    }, {
      "left" : "if (!a1.getFrame().equals(a2.getFrame()))",
      "right" : "if (!a1.getFrame().equals(a2.getFrame()))",
      "info" : "IfStatement[7274-7353]:IfStatement[7274-7353]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7316-7353]:Block[7316-7353]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[7330-7343]:ReturnStatement[7330-7343]"
    }, {
      "left" : "if (a1.getAngleStart() != a2.getAngleStart())",
      "right" : "if (a1.getAngleStart() != a2.getAngleStart())",
      "info" : "IfStatement[7362-7445]:IfStatement[7362-7445]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7408-7445]:Block[7408-7445]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[7422-7435]:ReturnStatement[7422-7435]"
    }, {
      "left" : "if (a1.getAngleExtent() != a2.getAngleExtent())",
      "right" : "if (a1.getAngleExtent() != a2.getAngleExtent())",
      "info" : "IfStatement[7454-7539]:IfStatement[7454-7539]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7502-7539]:Block[7502-7539]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[7516-7529]:ReturnStatement[7516-7529]"
    }, {
      "left" : "if (a1.getArcType() != a2.getArcType())",
      "right" : "if (a1.getArcType() != a2.getArcType())",
      "info" : "IfStatement[7548-7625]:IfStatement[7548-7625]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7588-7625]:Block[7588-7625]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[7602-7615]:ReturnStatement[7602-7615]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[7634-7646]:ReturnStatement[7634-7646]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8001-8416]:Block[8001-8416]"
    }, {
      "left" : "if (p1 == null)",
      "right" : "if (p1 == null)",
      "info" : "IfStatement[8011-8071]:IfStatement[8011-8071]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8027-8071]:Block[8027-8071]"
    }, {
      "left" : "return (p2 == null);",
      "right" : "return (p2 == null);",
      "info" : "ReturnStatement[8041-8061]:ReturnStatement[8041-8061]"
    }, {
      "left" : "if (p2 == null)",
      "right" : "if (p2 == null)",
      "info" : "IfStatement[8080-8133]:IfStatement[8080-8133]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8096-8133]:Block[8096-8133]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[8110-8123]:ReturnStatement[8110-8123]"
    }, {
      "left" : "if (p1.npoints != p2.npoints)",
      "right" : "if (p1.npoints != p2.npoints)",
      "info" : "IfStatement[8142-8209]:IfStatement[8142-8209]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8172-8209]:Block[8172-8209]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[8186-8199]:ReturnStatement[8186-8199]"
    }, {
      "left" : "if (!Arrays.equals(p1.xpoints, p2.xpoints))",
      "right" : "if (!Arrays.equals(p1.xpoints, p2.xpoints))",
      "info" : "IfStatement[8218-8299]:IfStatement[8218-8299]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8262-8299]:Block[8262-8299]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[8276-8289]:ReturnStatement[8276-8289]"
    }, {
      "left" : "if (!Arrays.equals(p1.ypoints, p2.ypoints))",
      "right" : "if (!Arrays.equals(p1.ypoints, p2.ypoints))",
      "info" : "IfStatement[8308-8389]:IfStatement[8308-8389]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8352-8389]:Block[8352-8389]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[8366-8379]:ReturnStatement[8366-8379]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[8398-8410]:ReturnStatement[8398-8410]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10285-10568]:Block[10285-10568]"
    }, {
      "left" : "if (shape == null)",
      "right" : "if (shape == null)",
      "info" : "IfStatement[10295-10399]:IfStatement[10295-10399]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10314-10399]:Block[10314-10399]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Null 'shape' argument.\");",
      "right" : "throw new IllegalArgumentException(\"Null 'shape' argument.\");",
      "info" : "ThrowStatement[10328-10389]:ThrowStatement[10328-10389]"
    }, {
      "left" : "AffineTransform transform = AffineTransform.getTranslateInstance(\n                transX, transY);",
      "right" : "AffineTransform transform = AffineTransform.getTranslateInstance(\n                transX, transY);",
      "info" : "VariableDeclarationStatement[10408-10506]:VariableDeclarationStatement[10408-10506]"
    }, {
      "left" : "return transform.createTransformedShape(shape);",
      "right" : "return transform.createTransformedShape(shape);",
      "info" : "ReturnStatement[10515-10562]:ReturnStatement[10515-10562]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11352-11902]:Block[11352-11902]"
    }, {
      "left" : "if (shape == null)",
      "right" : "if (shape == null)",
      "info" : "IfStatement[11362-11466]:IfStatement[11362-11466]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11381-11466]:Block[11381-11466]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Null 'shape' argument.\");",
      "right" : "throw new IllegalArgumentException(\"Null 'shape' argument.\");",
      "info" : "ThrowStatement[11395-11456]:ThrowStatement[11395-11456]"
    }, {
      "left" : "if (anchor == null)",
      "right" : "if (anchor == null)",
      "info" : "IfStatement[11475-11581]:IfStatement[11475-11581]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11495-11581]:Block[11495-11581]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Null 'anchor' argument.\");",
      "right" : "throw new IllegalArgumentException(\"Null 'anchor' argument.\");",
      "info" : "ThrowStatement[11509-11571]:ThrowStatement[11509-11571]"
    }, {
      "left" : "Point2D anchorPoint = RectangleAnchor.coordinates(shape.getBounds2D(),\n                anchor);",
      "right" : "Point2D anchorPoint = RectangleAnchor.coordinates(shape.getBounds2D(),\n                anchor);",
      "info" : "VariableDeclarationStatement[11590-11685]:VariableDeclarationStatement[11590-11685]"
    }, {
      "left" : "AffineTransform transform = AffineTransform.getTranslateInstance(\n                locationX - anchorPoint.getX(), locationY - anchorPoint.getY());",
      "right" : "AffineTransform transform = AffineTransform.getTranslateInstance(\n                locationX - anchorPoint.getX(), locationY - anchorPoint.getY());",
      "info" : "VariableDeclarationStatement[11694-11840]:VariableDeclarationStatement[11694-11840]"
    }, {
      "left" : "return transform.createTransformedShape(shape);",
      "right" : "return transform.createTransformedShape(shape);",
      "info" : "ReturnStatement[11849-11896]:ReturnStatement[11849-11896]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12445-12679]:Block[12445-12679]"
    }, {
      "left" : "if (base == null)",
      "right" : "if (base == null)",
      "info" : "IfStatement[12455-12509]:IfStatement[12455-12509]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12473-12509]:Block[12473-12509]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[12487-12499]:ReturnStatement[12487-12499]"
    }, {
      "left" : "AffineTransform rotate = AffineTransform.getRotateInstance(angle, x, y);",
      "right" : "AffineTransform rotate = AffineTransform.getRotateInstance(angle, x, y);",
      "info" : "VariableDeclarationStatement[12518-12590]:VariableDeclarationStatement[12518-12590]"
    }, {
      "left" : "Shape result = rotate.createTransformedShape(base);",
      "right" : "Shape result = rotate.createTransformedShape(base);",
      "info" : "VariableDeclarationStatement[12599-12650]:VariableDeclarationStatement[12599-12650]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[12659-12673]:ReturnStatement[12659-12673]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13220-13447]:Block[13220-13447]"
    }, {
      "left" : "AffineTransform saved = g2.getTransform();",
      "right" : "AffineTransform saved = g2.getTransform();",
      "info" : "VariableDeclarationStatement[13231-13273]:VariableDeclarationStatement[13231-13273]"
    }, {
      "left" : "AffineTransform rotate = AffineTransform.getRotateInstance(angle, x, y);",
      "right" : "AffineTransform rotate = AffineTransform.getRotateInstance(angle, x, y);",
      "info" : "VariableDeclarationStatement[13282-13354]:VariableDeclarationStatement[13282-13354]"
    }, {
      "left" : "g2.transform(rotate);",
      "right" : "g2.transform(rotate);",
      "info" : "ExpressionStatement[13363-13384]:ExpressionStatement[13363-13384]"
    }, {
      "left" : "g2.draw(shape);",
      "right" : "g2.draw(shape);",
      "info" : "ExpressionStatement[13393-13408]:ExpressionStatement[13393-13408]"
    }, {
      "left" : "g2.setTransform(saved);",
      "right" : "g2.setTransform(saved);",
      "info" : "ExpressionStatement[13417-13440]:ExpressionStatement[13417-13440]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13808-14320]:Block[13808-14320]"
    }, {
      "left" : "GeneralPath p0 = new GeneralPath();",
      "right" : "GeneralPath p0 = new GeneralPath();",
      "info" : "VariableDeclarationStatement[13818-13853]:VariableDeclarationStatement[13818-13853]"
    }, {
      "left" : "p0.moveTo(-l - t, -l + t);",
      "right" : "p0.moveTo(-l - t, -l + t);",
      "info" : "ExpressionStatement[13862-13888]:ExpressionStatement[13862-13888]"
    }, {
      "left" : "p0.lineTo(-l + t, -l - t);",
      "right" : "p0.lineTo(-l + t, -l - t);",
      "info" : "ExpressionStatement[13897-13923]:ExpressionStatement[13897-13923]"
    }, {
      "left" : "p0.lineTo(0.0f, -t * SQRT2);",
      "right" : "p0.lineTo(0.0f, -t * SQRT2);",
      "info" : "ExpressionStatement[13932-13960]:ExpressionStatement[13932-13960]"
    }, {
      "left" : "p0.lineTo(l - t, -l - t);",
      "right" : "p0.lineTo(l - t, -l - t);",
      "info" : "ExpressionStatement[13969-13994]:ExpressionStatement[13969-13994]"
    }, {
      "left" : "p0.lineTo(l + t, -l + t);",
      "right" : "p0.lineTo(l + t, -l + t);",
      "info" : "ExpressionStatement[14003-14028]:ExpressionStatement[14003-14028]"
    }, {
      "left" : "p0.lineTo(t * SQRT2, 0.0f);",
      "right" : "p0.lineTo(t * SQRT2, 0.0f);",
      "info" : "ExpressionStatement[14037-14064]:ExpressionStatement[14037-14064]"
    }, {
      "left" : "p0.lineTo(l + t, l - t);",
      "right" : "p0.lineTo(l + t, l - t);",
      "info" : "ExpressionStatement[14073-14097]:ExpressionStatement[14073-14097]"
    }, {
      "left" : "p0.lineTo(l - t, l + t);",
      "right" : "p0.lineTo(l - t, l + t);",
      "info" : "ExpressionStatement[14106-14130]:ExpressionStatement[14106-14130]"
    }, {
      "left" : "p0.lineTo(0.0f, t * SQRT2);",
      "right" : "p0.lineTo(0.0f, t * SQRT2);",
      "info" : "ExpressionStatement[14139-14166]:ExpressionStatement[14139-14166]"
    }, {
      "left" : "p0.lineTo(-l + t, l + t);",
      "right" : "p0.lineTo(-l + t, l + t);",
      "info" : "ExpressionStatement[14175-14200]:ExpressionStatement[14175-14200]"
    }, {
      "left" : "p0.lineTo(-l - t, l - t);",
      "right" : "p0.lineTo(-l - t, l - t);",
      "info" : "ExpressionStatement[14209-14234]:ExpressionStatement[14209-14234]"
    }, {
      "left" : "p0.lineTo(-t * SQRT2, 0.0f);",
      "right" : "p0.lineTo(-t * SQRT2, 0.0f);",
      "info" : "ExpressionStatement[14243-14271]:ExpressionStatement[14243-14271]"
    }, {
      "left" : "p0.closePath();",
      "right" : "p0.closePath();",
      "info" : "ExpressionStatement[14280-14295]:ExpressionStatement[14280-14295]"
    }, {
      "left" : "return p0;",
      "right" : "return p0;",
      "info" : "ReturnStatement[14304-14314]:ReturnStatement[14304-14314]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14566-14972]:Block[14566-14972]"
    }, {
      "left" : "GeneralPath p0 = new GeneralPath();",
      "right" : "GeneralPath p0 = new GeneralPath();",
      "info" : "VariableDeclarationStatement[14576-14611]:VariableDeclarationStatement[14576-14611]"
    }, {
      "left" : "p0.moveTo(-l, t);",
      "right" : "p0.moveTo(-l, t);",
      "info" : "ExpressionStatement[14620-14637]:ExpressionStatement[14620-14637]"
    }, {
      "left" : "p0.lineTo(-t, t);",
      "right" : "p0.lineTo(-t, t);",
      "info" : "ExpressionStatement[14646-14663]:ExpressionStatement[14646-14663]"
    }, {
      "left" : "p0.lineTo(-t, l);",
      "right" : "p0.lineTo(-t, l);",
      "info" : "ExpressionStatement[14672-14689]:ExpressionStatement[14672-14689]"
    }, {
      "left" : "p0.lineTo(t, l);",
      "right" : "p0.lineTo(t, l);",
      "info" : "ExpressionStatement[14698-14714]:ExpressionStatement[14698-14714]"
    }, {
      "left" : "p0.lineTo(t, t);",
      "right" : "p0.lineTo(t, t);",
      "info" : "ExpressionStatement[14723-14739]:ExpressionStatement[14723-14739]"
    }, {
      "left" : "p0.lineTo(l, t);",
      "right" : "p0.lineTo(l, t);",
      "info" : "ExpressionStatement[14748-14764]:ExpressionStatement[14748-14764]"
    }, {
      "left" : "p0.lineTo(l, -t);",
      "right" : "p0.lineTo(l, -t);",
      "info" : "ExpressionStatement[14773-14790]:ExpressionStatement[14773-14790]"
    }, {
      "left" : "p0.lineTo(t, -t);",
      "right" : "p0.lineTo(t, -t);",
      "info" : "ExpressionStatement[14799-14816]:ExpressionStatement[14799-14816]"
    }, {
      "left" : "p0.lineTo(t, -l);",
      "right" : "p0.lineTo(t, -l);",
      "info" : "ExpressionStatement[14825-14842]:ExpressionStatement[14825-14842]"
    }, {
      "left" : "p0.lineTo(-t, -l);",
      "right" : "p0.lineTo(-t, -l);",
      "info" : "ExpressionStatement[14851-14869]:ExpressionStatement[14851-14869]"
    }, {
      "left" : "p0.lineTo(-t, -t);",
      "right" : "p0.lineTo(-t, -t);",
      "info" : "ExpressionStatement[14878-14896]:ExpressionStatement[14878-14896]"
    }, {
      "left" : "p0.lineTo(-l, -t);",
      "right" : "p0.lineTo(-l, -t);",
      "info" : "ExpressionStatement[14905-14923]:ExpressionStatement[14905-14923]"
    }, {
      "left" : "p0.closePath();",
      "right" : "p0.closePath();",
      "info" : "ExpressionStatement[14932-14947]:ExpressionStatement[14932-14947]"
    }, {
      "left" : "return p0;",
      "right" : "return p0;",
      "info" : "ReturnStatement[14956-14966]:ReturnStatement[14956-14966]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15191-15399]:Block[15191-15399]"
    }, {
      "left" : "GeneralPath p0 = new GeneralPath();",
      "right" : "GeneralPath p0 = new GeneralPath();",
      "info" : "VariableDeclarationStatement[15201-15236]:VariableDeclarationStatement[15201-15236]"
    }, {
      "left" : "p0.moveTo(0.0f, -s);",
      "right" : "p0.moveTo(0.0f, -s);",
      "info" : "ExpressionStatement[15245-15265]:ExpressionStatement[15245-15265]"
    }, {
      "left" : "p0.lineTo(s, 0.0f);",
      "right" : "p0.lineTo(s, 0.0f);",
      "info" : "ExpressionStatement[15274-15293]:ExpressionStatement[15274-15293]"
    }, {
      "left" : "p0.lineTo(0.0f, s);",
      "right" : "p0.lineTo(0.0f, s);",
      "info" : "ExpressionStatement[15302-15321]:ExpressionStatement[15302-15321]"
    }, {
      "left" : "p0.lineTo(-s, 0.0f);",
      "right" : "p0.lineTo(-s, 0.0f);",
      "info" : "ExpressionStatement[15330-15350]:ExpressionStatement[15330-15350]"
    }, {
      "left" : "p0.closePath();",
      "right" : "p0.closePath();",
      "info" : "ExpressionStatement[15359-15374]:ExpressionStatement[15359-15374]"
    }, {
      "left" : "return p0;",
      "right" : "return p0;",
      "info" : "ReturnStatement[15383-15393]:ReturnStatement[15383-15393]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15644-15818]:Block[15644-15818]"
    }, {
      "left" : "GeneralPath p0 = new GeneralPath();",
      "right" : "GeneralPath p0 = new GeneralPath();",
      "info" : "VariableDeclarationStatement[15654-15689]:VariableDeclarationStatement[15654-15689]"
    }, {
      "left" : "p0.moveTo(0.0f, -s);",
      "right" : "p0.moveTo(0.0f, -s);",
      "info" : "ExpressionStatement[15698-15718]:ExpressionStatement[15698-15718]"
    }, {
      "left" : "p0.lineTo(s, s);",
      "right" : "p0.lineTo(s, s);",
      "info" : "ExpressionStatement[15727-15743]:ExpressionStatement[15727-15743]"
    }, {
      "left" : "p0.lineTo(-s, s);",
      "right" : "p0.lineTo(-s, s);",
      "info" : "ExpressionStatement[15752-15769]:ExpressionStatement[15752-15769]"
    }, {
      "left" : "p0.closePath();",
      "right" : "p0.closePath();",
      "info" : "ExpressionStatement[15778-15793]:ExpressionStatement[15778-15793]"
    }, {
      "left" : "return p0;",
      "right" : "return p0;",
      "info" : "ReturnStatement[15802-15812]:ReturnStatement[15802-15812]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16067-16242]:Block[16067-16242]"
    }, {
      "left" : "GeneralPath p0 = new GeneralPath();",
      "right" : "GeneralPath p0 = new GeneralPath();",
      "info" : "VariableDeclarationStatement[16077-16112]:VariableDeclarationStatement[16077-16112]"
    }, {
      "left" : "p0.moveTo(0.0f, s);",
      "right" : "p0.moveTo(0.0f, s);",
      "info" : "ExpressionStatement[16121-16140]:ExpressionStatement[16121-16140]"
    }, {
      "left" : "p0.lineTo(s, -s);",
      "right" : "p0.lineTo(s, -s);",
      "info" : "ExpressionStatement[16149-16166]:ExpressionStatement[16149-16166]"
    }, {
      "left" : "p0.lineTo(-s, -s);",
      "right" : "p0.lineTo(-s, -s);",
      "info" : "ExpressionStatement[16175-16193]:ExpressionStatement[16175-16193]"
    }, {
      "left" : "p0.closePath();",
      "right" : "p0.closePath();",
      "info" : "ExpressionStatement[16202-16217]:ExpressionStatement[16202-16217]"
    }, {
      "left" : "return p0;",
      "right" : "return p0;",
      "info" : "ReturnStatement[16226-16236]:ReturnStatement[16226-16236]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16708-17677]:Block[16708-17677]"
    }, {
      "left" : "GeneralPath result = new GeneralPath();",
      "right" : "GeneralPath result = new GeneralPath();",
      "info" : "VariableDeclarationStatement[16718-16757]:VariableDeclarationStatement[16718-16757]"
    }, {
      "left" : "float x1 = (float) line.getX1();",
      "right" : "float x1 = (float) line.getX1();",
      "info" : "VariableDeclarationStatement[16766-16798]:VariableDeclarationStatement[16766-16798]"
    }, {
      "left" : "float x2 = (float) line.getX2();",
      "right" : "float x2 = (float) line.getX2();",
      "info" : "VariableDeclarationStatement[16807-16839]:VariableDeclarationStatement[16807-16839]"
    }, {
      "left" : "float y1 = (float) line.getY1();",
      "right" : "float y1 = (float) line.getY1();",
      "info" : "VariableDeclarationStatement[16848-16880]:VariableDeclarationStatement[16848-16880]"
    }, {
      "left" : "float y2 = (float) line.getY2();",
      "right" : "float y2 = (float) line.getY2();",
      "info" : "VariableDeclarationStatement[16889-16921]:VariableDeclarationStatement[16889-16921]"
    }, {
      "left" : "if ((x2 - x1) != 0.0)",
      "right" : "if ((x2 - x1) != 0.0)",
      "info" : "IfStatement[16930-17648]:IfStatement[16930-17648]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16952-17348]:Block[16952-17348]"
    }, {
      "left" : "double theta = Math.atan((y2 - y1) / (x2 - x1));",
      "right" : "double theta = Math.atan((y2 - y1) / (x2 - x1));",
      "info" : "VariableDeclarationStatement[16966-17014]:VariableDeclarationStatement[16966-17014]"
    }, {
      "left" : "float dx = (float) Math.sin(theta) * width;",
      "right" : "float dx = (float) Math.sin(theta) * width;",
      "info" : "VariableDeclarationStatement[17027-17070]:VariableDeclarationStatement[17027-17070]"
    }, {
      "left" : "float dy = (float) Math.cos(theta) * width;",
      "right" : "float dy = (float) Math.cos(theta) * width;",
      "info" : "VariableDeclarationStatement[17083-17126]:VariableDeclarationStatement[17083-17126]"
    }, {
      "left" : "result.moveTo(x1 - dx, y1 + dy);",
      "right" : "result.moveTo(x1 - dx, y1 + dy);",
      "info" : "ExpressionStatement[17139-17171]:ExpressionStatement[17139-17171]"
    }, {
      "left" : "result.lineTo(x1 + dx, y1 - dy);",
      "right" : "result.lineTo(x1 + dx, y1 - dy);",
      "info" : "ExpressionStatement[17184-17216]:ExpressionStatement[17184-17216]"
    }, {
      "left" : "result.lineTo(x2 + dx, y2 - dy);",
      "right" : "result.lineTo(x2 + dx, y2 - dy);",
      "info" : "ExpressionStatement[17229-17261]:ExpressionStatement[17229-17261]"
    }, {
      "left" : "result.lineTo(x2 - dx, y2 + dy);",
      "right" : "result.lineTo(x2 - dx, y2 + dy);",
      "info" : "ExpressionStatement[17274-17306]:ExpressionStatement[17274-17306]"
    }, {
      "left" : "result.closePath();",
      "right" : "result.closePath();",
      "info" : "ExpressionStatement[17319-17338]:ExpressionStatement[17319-17338]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17362-17648]:Block[17362-17648]"
    }, {
      "left" : "result.moveTo(x1 - width / 2.0f, y1);",
      "right" : "result.moveTo(x1 - width / 2.0f, y1);",
      "info" : "ExpressionStatement[17419-17456]:ExpressionStatement[17419-17456]"
    }, {
      "left" : "result.lineTo(x1 + width / 2.0f, y1);",
      "right" : "result.lineTo(x1 + width / 2.0f, y1);",
      "info" : "ExpressionStatement[17469-17506]:ExpressionStatement[17469-17506]"
    }, {
      "left" : "result.lineTo(x2 + width / 2.0f, y2);",
      "right" : "result.lineTo(x2 + width / 2.0f, y2);",
      "info" : "ExpressionStatement[17519-17556]:ExpressionStatement[17519-17556]"
    }, {
      "left" : "result.lineTo(x2 - width / 2.0f, y2);",
      "right" : "result.lineTo(x2 - width / 2.0f, y2);",
      "info" : "ExpressionStatement[17569-17606]:ExpressionStatement[17569-17606]"
    }, {
      "left" : "result.closePath();",
      "right" : "result.closePath();",
      "info" : "ExpressionStatement[17619-17638]:ExpressionStatement[17619-17638]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[17657-17671]:ReturnStatement[17657-17671]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18250-18434]:Block[18250-18434]"
    }, {
      "left" : "x = Math.max(area.getMinX(), Math.min(x, area.getMaxX()));",
      "right" : "x = Math.max(area.getMinX(), Math.min(x, area.getMaxX()));",
      "info" : "ExpressionStatement[18261-18319]:ExpressionStatement[18261-18319]"
    }, {
      "left" : "y = Math.max(area.getMinY(), Math.min(y, area.getMaxY()));",
      "right" : "y = Math.max(area.getMinY(), Math.min(y, area.getMaxY()));",
      "info" : "ExpressionStatement[18328-18386]:ExpressionStatement[18328-18386]"
    }, {
      "left" : "return new Point2D.Double(x, y);",
      "right" : "return new Point2D.Double(x, y);",
      "info" : "ReturnStatement[18395-18427]:ReturnStatement[18395-18427]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18782-19155]:Block[18782-19155]"
    }, {
      "left" : "double x0 = rect1.getX();",
      "right" : "double x0 = rect1.getX();",
      "info" : "VariableDeclarationStatement[18793-18818]:VariableDeclarationStatement[18793-18818]"
    }, {
      "left" : "double y0 = rect1.getY();",
      "right" : "double y0 = rect1.getY();",
      "info" : "VariableDeclarationStatement[18827-18852]:VariableDeclarationStatement[18827-18852]"
    }, {
      "left" : "double x = rect2.getX();",
      "right" : "double x = rect2.getX();",
      "info" : "VariableDeclarationStatement[18861-18885]:VariableDeclarationStatement[18861-18885]"
    }, {
      "left" : "double y = rect2.getY();",
      "right" : "double y = rect2.getY();",
      "info" : "VariableDeclarationStatement[18894-18918]:VariableDeclarationStatement[18894-18918]"
    }, {
      "left" : "double w = rect2.getWidth();",
      "right" : "double w = rect2.getWidth();",
      "info" : "VariableDeclarationStatement[18927-18955]:VariableDeclarationStatement[18927-18955]"
    }, {
      "left" : "double h = rect2.getHeight();",
      "right" : "double h = rect2.getHeight();",
      "info" : "VariableDeclarationStatement[18964-18993]:VariableDeclarationStatement[18964-18993]"
    }, {
      "left" : "return ((x >= x0) && (y >= y0)\n                && ((x + w) <= (x0 + rect1.getWidth()))\n                && ((y + h) <= (y0 + rect1.getHeight())));",
      "right" : "return ((x >= x0) && (y >= y0)\n                && ((x + w) <= (x0 + rect1.getWidth()))\n                && ((y + h) <= (y0 + rect1.getHeight())));",
      "info" : "ReturnStatement[19003-19148]:ReturnStatement[19003-19148]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19506-19848]:Block[19506-19848]"
    }, {
      "left" : "double x0 = rect1.getX();",
      "right" : "double x0 = rect1.getX();",
      "info" : "VariableDeclarationStatement[19515-19540]:VariableDeclarationStatement[19515-19540]"
    }, {
      "left" : "double y0 = rect1.getY();",
      "right" : "double y0 = rect1.getY();",
      "info" : "VariableDeclarationStatement[19547-19572]:VariableDeclarationStatement[19547-19572]"
    }, {
      "left" : "double x = rect2.getX();",
      "right" : "double x = rect2.getX();",
      "info" : "VariableDeclarationStatement[19580-19604]:VariableDeclarationStatement[19580-19604]"
    }, {
      "left" : "double width = rect2.getWidth();",
      "right" : "double width = rect2.getWidth();",
      "info" : "VariableDeclarationStatement[19611-19643]:VariableDeclarationStatement[19611-19643]"
    }, {
      "left" : "double y = rect2.getY();",
      "right" : "double y = rect2.getY();",
      "info" : "VariableDeclarationStatement[19650-19674]:VariableDeclarationStatement[19650-19674]"
    }, {
      "left" : "double height = rect2.getHeight();",
      "right" : "double height = rect2.getHeight();",
      "info" : "VariableDeclarationStatement[19681-19715]:VariableDeclarationStatement[19681-19715]"
    }, {
      "left" : "return (x + width >= x0 && y + height >= y0 && x <= x0 + rect1.getWidth()\n              && y <= y0 + rect1.getHeight());",
      "right" : "return (x + width >= x0 && y + height >= y0 && x <= x0 + rect1.getWidth()\n              && y <= y0 + rect1.getHeight());",
      "info" : "ReturnStatement[19722-19842]:ReturnStatement[19722-19842]"
    } ]
  },
  "interFileMappings" : { }
}