{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "NumericEntityUnescaper",
      "right" : "NumericEntityUnescaper",
      "info" : "TypeDeclaration[907-2295]:TypeDeclaration[907-2503]"
    }, {
      "left" : "public int translate(CharSequence input, int index, Writer out) throws IOException",
      "right" : "public int translate(CharSequence input, int index, Writer out) throws IOException",
      "info" : "MethodDeclaration[1134-2293]:MethodDeclaration[1134-2501]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1060-1066]:Modifier[1060-1066]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[1067-1072]:TYPE_DECLARATION_KIND[1067-1072]"
    }, {
      "left" : "NumericEntityUnescaper",
      "right" : "NumericEntityUnescaper",
      "info" : "SimpleName[1073-1095]:SimpleName[1073-1095]"
    }, {
      "left" : "CharSequenceTranslator",
      "right" : "CharSequenceTranslator",
      "info" : "SimpleType[1104-1126]:SimpleType[1104-1126]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1185-1191]:Modifier[1185-1191]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[1192-1195]:PrimitiveType[1192-1195]"
    }, {
      "left" : "translate",
      "right" : "translate",
      "info" : "SimpleName[1196-1205]:SimpleName[1196-1205]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1268-2293]:Block[1268-2501]"
    }, {
      "left" : "if(input.charAt(index) == '&' && input.charAt(index + 1) == '#')",
      "right" : "if(input.charAt(index) == '&' && input.charAt(index + 1) == '#')",
      "info" : "IfStatement[1330-2269]:IfStatement[1330-2477]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1395-2269]:Block[1395-2477]"
    }, {
      "left" : "int start = index + 2;",
      "right" : "int start = index + 2;",
      "info" : "VariableDeclarationStatement[1409-1431]:VariableDeclarationStatement[1409-1431]"
    }, {
      "left" : "boolean isHex = false;",
      "right" : "boolean isHex = false;",
      "info" : "VariableDeclarationStatement[1444-1466]:VariableDeclarationStatement[1444-1466]"
    }, {
      "left" : "char firstChar = input.charAt(start);",
      "right" : "char firstChar = input.charAt(start);",
      "info" : "VariableDeclarationStatement[1480-1517]:VariableDeclarationStatement[1480-1517]"
    }, {
      "left" : "if(firstChar == 'x' || firstChar == 'X')",
      "right" : "if(firstChar == 'x' || firstChar == 'X')",
      "info" : "IfStatement[1530-1641]:IfStatement[1530-1641]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1571-1641]:Block[1571-1641]"
    }, {
      "left" : "start++;",
      "right" : "start++;",
      "info" : "ExpressionStatement[1589-1597]:ExpressionStatement[1589-1597]"
    }, {
      "left" : "isHex = true;",
      "right" : "isHex = true;",
      "info" : "ExpressionStatement[1614-1627]:ExpressionStatement[1614-1627]"
    }, {
      "left" : "int end = start;",
      "right" : "int end = start;",
      "info" : "VariableDeclarationStatement[1655-1671]:VariableDeclarationStatement[1655-1671]"
    }, {
      "left" : "while(input.charAt(end) != ';')",
      "right" : "while(input.charAt(end) != ';')",
      "info" : "WhileStatement[1684-1754]:WhileStatement[1684-1754]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1716-1754]:Block[1716-1754]"
    }, {
      "left" : "end++;",
      "right" : "end++;",
      "info" : "ExpressionStatement[1734-1740]:ExpressionStatement[1734-1740]"
    }, {
      "left" : "int entityValue;",
      "right" : "int entityValue;",
      "info" : "VariableDeclarationStatement[1768-1784]:VariableDeclarationStatement[1768-1784]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[1797-2158]:TryStatement[1797-2158]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1801-2083]:Block[1801-2083]"
    }, {
      "left" : "if(isHex)",
      "right" : "if(isHex)",
      "info" : "IfStatement[1819-2069]:IfStatement[1819-2069]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1829-1946]:Block[1829-1946]"
    }, {
      "left" : "entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);",
      "right" : "entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);",
      "info" : "ExpressionStatement[1851-1928]:ExpressionStatement[1851-1928]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1952-2069]:Block[1952-2069]"
    }, {
      "left" : "entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);",
      "right" : "entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);",
      "info" : "ExpressionStatement[1974-2051]:ExpressionStatement[1974-2051]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2117-2158]:Block[2117-2158]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[2135-2144]:ReturnStatement[2135-2144]"
    }, {
      "left" : "out.write(entityValue);",
      "right" : "out.write(entityValue);",
      "info" : "ExpressionStatement[2176-2199]:ExpressionStatement[2370-2393]"
    }, {
      "left" : "return 2 + (end - start) + (isHex ? 1 : 0) + 1;",
      "right" : "return 2 + (end - start) + (isHex ? 1 : 0) + 1;",
      "info" : "ReturnStatement[2212-2259]:ReturnStatement[2420-2467]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[2278-2287]:ReturnStatement[2486-2495]"
    } ]
  },
  "interFileMappings" : { }
}