{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "OpenMapRealVector",
      "right" : "OpenMapRealVector",
      "info" : "TypeDeclaration[1250-25806]:TypeDeclaration[1250-26218]"
    }, {
      "left" : "public static final double DEFAULT_ZERO_TOLERANCE = 1.0e-12;",
      "right" : "public static final double DEFAULT_ZERO_TOLERANCE = 1.0e-12;",
      "info" : "FieldDeclaration[1492-1617]:FieldDeclaration[1492-1617]"
    }, {
      "left" : "private static final long serialVersionUID = 8772222695580707260L;",
      "right" : "private static final long serialVersionUID = 8772222695580707260L;",
      "info" : "FieldDeclaration[1622-1732]:FieldDeclaration[1622-1732]"
    }, {
      "left" : "private final OpenIntToDoubleHashMap entries;",
      "right" : "private final OpenIntToDoubleHashMap entries;",
      "info" : "FieldDeclaration[1737-1816]:FieldDeclaration[1737-1816]"
    }, {
      "left" : "private final int virtualSize;",
      "right" : "private final int virtualSize;",
      "info" : "FieldDeclaration[1821-1887]:FieldDeclaration[1821-1887]"
    }, {
      "left" : "private final double epsilon;",
      "right" : "private final double epsilon;",
      "info" : "FieldDeclaration[1892-1978]:FieldDeclaration[1892-1978]"
    }, {
      "left" : "public OpenMapRealVector()",
      "right" : "public OpenMapRealVector()",
      "info" : "MethodDeclaration[1984-2464]:MethodDeclaration[1984-2464]"
    }, {
      "left" : "public OpenMapRealVector(int dimension)",
      "right" : "public OpenMapRealVector(int dimension)",
      "info" : "MethodDeclaration[2470-2670]:MethodDeclaration[2470-2670]"
    }, {
      "left" : "public OpenMapRealVector(int dimension, double epsilon)",
      "right" : "public OpenMapRealVector(int dimension, double epsilon)",
      "info" : "MethodDeclaration[2676-3055]:MethodDeclaration[2676-3055]"
    }, {
      "left" : "protected OpenMapRealVector(OpenMapRealVector v, int resize)",
      "right" : "protected OpenMapRealVector(OpenMapRealVector v, int resize)",
      "info" : "MethodDeclaration[3061-3408]:MethodDeclaration[3061-3408]"
    }, {
      "left" : "public OpenMapRealVector(int dimension, int expectedSize)",
      "right" : "public OpenMapRealVector(int dimension, int expectedSize)",
      "info" : "MethodDeclaration[3414-3750]:MethodDeclaration[3414-3750]"
    }, {
      "left" : "public OpenMapRealVector(int dimension, int expectedSize, double epsilon)",
      "right" : "public OpenMapRealVector(int dimension, int expectedSize, double epsilon)",
      "info" : "MethodDeclaration[3756-4277]:MethodDeclaration[3756-4277]"
    }, {
      "left" : "public OpenMapRealVector(double[] values)",
      "right" : "public OpenMapRealVector(double[] values)",
      "info" : "MethodDeclaration[4283-4526]:MethodDeclaration[4283-4526]"
    }, {
      "left" : "public OpenMapRealVector(double[] values, double epsilon)",
      "right" : "public OpenMapRealVector(double[] values, double epsilon)",
      "info" : "MethodDeclaration[4532-5167]:MethodDeclaration[4532-5167]"
    }, {
      "left" : "public OpenMapRealVector(Double[] values)",
      "right" : "public OpenMapRealVector(Double[] values)",
      "info" : "MethodDeclaration[5173-5419]:MethodDeclaration[5173-5419]"
    }, {
      "left" : "public OpenMapRealVector(Double[] values, double epsilon)",
      "right" : "public OpenMapRealVector(Double[] values, double epsilon)",
      "info" : "MethodDeclaration[5425-6047]:MethodDeclaration[5425-6047]"
    }, {
      "left" : "public OpenMapRealVector(OpenMapRealVector v)",
      "right" : "public OpenMapRealVector(OpenMapRealVector v)",
      "info" : "MethodDeclaration[6053-6324]:MethodDeclaration[6053-6324]"
    }, {
      "left" : "public OpenMapRealVector(RealVector v)",
      "right" : "public OpenMapRealVector(RealVector v)",
      "info" : "MethodDeclaration[6330-6809]:MethodDeclaration[6330-6809]"
    }, {
      "left" : "private OpenIntToDoubleHashMap getEntries()",
      "right" : "private OpenIntToDoubleHashMap getEntries()",
      "info" : "MethodDeclaration[6815-6999]:MethodDeclaration[6815-6999]"
    }, {
      "left" : "protected boolean isDefaultValue(double value)",
      "right" : "protected boolean isDefaultValue(double value)",
      "info" : "MethodDeclaration[7005-7339]:MethodDeclaration[7005-7339]"
    }, {
      "left" : "public RealVector add(RealVector v)",
      "right" : "public RealVector add(RealVector v)",
      "info" : "MethodDeclaration[7345-7629]:MethodDeclaration[7345-7629]"
    }, {
      "left" : "public OpenMapRealVector add(OpenMapRealVector v)",
      "right" : "public OpenMapRealVector add(OpenMapRealVector v)",
      "info" : "MethodDeclaration[7635-8704]:MethodDeclaration[7635-8704]"
    }, {
      "left" : "public OpenMapRealVector append(OpenMapRealVector v)",
      "right" : "public OpenMapRealVector append(OpenMapRealVector v)",
      "info" : "MethodDeclaration[8710-9213]:MethodDeclaration[8710-9213]"
    }, {
      "left" : "public OpenMapRealVector append(RealVector v)",
      "right" : "public OpenMapRealVector append(RealVector v)",
      "info" : "MethodDeclaration[9219-9680]:MethodDeclaration[9219-9680]"
    }, {
      "left" : "public OpenMapRealVector append(double d)",
      "right" : "public OpenMapRealVector append(double d)",
      "info" : "MethodDeclaration[9686-9896]:MethodDeclaration[9686-9896]"
    }, {
      "left" : "public OpenMapRealVector copy()",
      "right" : "public OpenMapRealVector copy()",
      "info" : "MethodDeclaration[9902-10054]:MethodDeclaration[9902-10054]"
    }, {
      "left" : "public double dotProduct(OpenMapRealVector v)",
      "right" : "public double dotProduct(OpenMapRealVector v)",
      "info" : "MethodDeclaration[10060-10942]:MethodDeclaration[10060-10942]"
    }, {
      "left" : "public double dotProduct(RealVector v)",
      "right" : "public double dotProduct(RealVector v)",
      "info" : "MethodDeclaration[10948-11198]:MethodDeclaration[10948-11198]"
    }, {
      "left" : "public OpenMapRealVector ebeDivide(RealVector v)",
      "right" : "public OpenMapRealVector ebeDivide(RealVector v)",
      "info" : "MethodDeclaration[11204-11833]:MethodDeclaration[11204-11790]"
    }, {
      "left" : "public OpenMapRealVector ebeMultiply(RealVector v)",
      "right" : "public OpenMapRealVector ebeMultiply(RealVector v)",
      "info" : "MethodDeclaration[11839-12578]:MethodDeclaration[11796-12990]"
    }, {
      "left" : "public OpenMapRealVector getSubVector(int index, int n)",
      "right" : "public OpenMapRealVector getSubVector(int index, int n)",
      "info" : "MethodDeclaration[12584-13254]:MethodDeclaration[12996-13666]"
    }, {
      "left" : "public int getDimension()",
      "right" : "public int getDimension()",
      "info" : "MethodDeclaration[13260-13360]:MethodDeclaration[13672-13772]"
    }, {
      "left" : "public double getDistance(OpenMapRealVector v)",
      "right" : "public double getDistance(OpenMapRealVector v)",
      "info" : "MethodDeclaration[13366-14327]:MethodDeclaration[13778-14739]"
    }, {
      "left" : "public double getDistance(RealVector v)",
      "right" : "public double getDistance(RealVector v)",
      "info" : "MethodDeclaration[14333-14637]:MethodDeclaration[14745-15049]"
    }, {
      "left" : "public double getEntry(int index)",
      "right" : "public double getEntry(int index)",
      "info" : "MethodDeclaration[14643-14785]:MethodDeclaration[15055-15197]"
    }, {
      "left" : "public double getL1Distance(OpenMapRealVector v)",
      "right" : "public double getL1Distance(OpenMapRealVector v)",
      "info" : "MethodDeclaration[14791-15748]:MethodDeclaration[15203-16160]"
    }, {
      "left" : "public double getL1Distance(RealVector v)",
      "right" : "public double getL1Distance(RealVector v)",
      "info" : "MethodDeclaration[15754-16064]:MethodDeclaration[16166-16476]"
    }, {
      "left" : "private double getLInfDistance(OpenMapRealVector v)",
      "right" : "private double getLInfDistance(OpenMapRealVector v)",
      "info" : "MethodDeclaration[16070-16902]:MethodDeclaration[16482-17314]"
    }, {
      "left" : "public double getLInfDistance(RealVector v)",
      "right" : "public double getLInfDistance(RealVector v)",
      "info" : "MethodDeclaration[16908-17224]:MethodDeclaration[17320-17636]"
    }, {
      "left" : "public boolean isInfinite()",
      "right" : "public boolean isInfinite()",
      "info" : "MethodDeclaration[17230-17714]:MethodDeclaration[17642-18126]"
    }, {
      "left" : "public boolean isNaN()",
      "right" : "public boolean isNaN()",
      "info" : "MethodDeclaration[17720-18015]:MethodDeclaration[18132-18427]"
    }, {
      "left" : "public OpenMapRealVector mapAdd(double d)",
      "right" : "public OpenMapRealVector mapAdd(double d)",
      "info" : "MethodDeclaration[18021-18148]:MethodDeclaration[18433-18560]"
    }, {
      "left" : "public OpenMapRealVector mapAddToSelf(double d)",
      "right" : "public OpenMapRealVector mapAddToSelf(double d)",
      "info" : "MethodDeclaration[18154-18369]:MethodDeclaration[18566-18781]"
    }, {
      "left" : "public RealVector projection(RealVector v)",
      "right" : "public RealVector projection(RealVector v)",
      "info" : "MethodDeclaration[18375-18576]:MethodDeclaration[18787-18988]"
    }, {
      "left" : "public void setEntry(int index, double value)",
      "right" : "public void setEntry(int index, double value)",
      "info" : "MethodDeclaration[18582-18872]:MethodDeclaration[18994-19284]"
    }, {
      "left" : "public void setSubVector(int index, RealVector v)",
      "right" : "public void setSubVector(int index, RealVector v)",
      "info" : "MethodDeclaration[18878-19162]:MethodDeclaration[19290-19574]"
    }, {
      "left" : "public void set(double value)",
      "right" : "public void set(double value)",
      "info" : "MethodDeclaration[19168-19334]:MethodDeclaration[19580-19746]"
    }, {
      "left" : "public OpenMapRealVector subtract(OpenMapRealVector v)",
      "right" : "public OpenMapRealVector subtract(OpenMapRealVector v)",
      "info" : "MethodDeclaration[19340-20174]:MethodDeclaration[19752-20586]"
    }, {
      "left" : "public RealVector subtract(RealVector v)",
      "right" : "public RealVector subtract(RealVector v)",
      "info" : "MethodDeclaration[20180-20479]:MethodDeclaration[20592-20891]"
    }, {
      "left" : "public OpenMapRealVector unitVector()",
      "right" : "public OpenMapRealVector unitVector()",
      "info" : "MethodDeclaration[20485-20652]:MethodDeclaration[20897-21064]"
    }, {
      "left" : "public void unitize()",
      "right" : "public void unitize()",
      "info" : "MethodDeclaration[20658-21053]:MethodDeclaration[21070-21465]"
    }, {
      "left" : "public double[] toArray()",
      "right" : "public double[] toArray()",
      "info" : "MethodDeclaration[21059-21358]:MethodDeclaration[21471-21770]"
    }, {
      "left" : "public int hashCode()",
      "right" : "public int hashCode()",
      "info" : "MethodDeclaration[21364-22133]:MethodDeclaration[21776-22545]"
    }, {
      "left" : "public boolean equals(Object obj)",
      "right" : "public boolean equals(Object obj)",
      "info" : "MethodDeclaration[22139-23478]:MethodDeclaration[22551-23890]"
    }, {
      "left" : "public double getSparsity()",
      "right" : "public double getSparsity()",
      "info" : "MethodDeclaration[23484-23696]:MethodDeclaration[23896-24108]"
    }, {
      "left" : "public java.util.Iterator<Entry> sparseIterator()",
      "right" : "public java.util.Iterator<Entry> sparseIterator()",
      "info" : "MethodDeclaration[23702-23842]:MethodDeclaration[24114-24254]"
    }, {
      "left" : "OpenMapEntry",
      "right" : "OpenMapEntry",
      "info" : "TypeDeclaration[23848-24843]:TypeDeclaration[24260-25255]"
    }, {
      "left" : "private final Iterator iter;",
      "right" : "private final Iterator iter;",
      "info" : "FieldDeclaration[24124-24199]:FieldDeclaration[24536-24611]"
    }, {
      "left" : "protected OpenMapEntry(Iterator iter)",
      "right" : "protected OpenMapEntry(Iterator iter)",
      "info" : "MethodDeclaration[24209-24442]:MethodDeclaration[24621-24854]"
    }, {
      "left" : "public double getValue()",
      "right" : "public double getValue()",
      "info" : "MethodDeclaration[24452-24568]:MethodDeclaration[24864-24980]"
    }, {
      "left" : "public void setValue(double value)",
      "right" : "public void setValue(double value)",
      "info" : "MethodDeclaration[24578-24715]:MethodDeclaration[24990-25127]"
    }, {
      "left" : "public int getIndex()",
      "right" : "public int getIndex()",
      "info" : "MethodDeclaration[24725-24836]:MethodDeclaration[25137-25248]"
    }, {
      "left" : "OpenMapSparseIterator",
      "right" : "OpenMapSparseIterator",
      "info" : "TypeDeclaration[24849-25804]:TypeDeclaration[25261-26216]"
    }, {
      "left" : "private final Iterator iter;",
      "right" : "private final Iterator iter;",
      "info" : "FieldDeclaration[25115-25179]:FieldDeclaration[25527-25591]"
    }, {
      "left" : "private final Entry current;",
      "right" : "private final Entry current;",
      "info" : "FieldDeclaration[25188-25246]:FieldDeclaration[25600-25658]"
    }, {
      "left" : "protected OpenMapSparseIterator()",
      "right" : "protected OpenMapSparseIterator()",
      "info" : "MethodDeclaration[25256-25421]:MethodDeclaration[25668-25833]"
    }, {
      "left" : "public boolean hasNext()",
      "right" : "public boolean hasNext()",
      "info" : "MethodDeclaration[25431-25531]:MethodDeclaration[25843-25943]"
    }, {
      "left" : "public Entry next()",
      "right" : "public Entry next()",
      "info" : "MethodDeclaration[25541-25657]:MethodDeclaration[25953-26069]"
    }, {
      "left" : "public void remove()",
      "right" : "public void remove()",
      "info" : "MethodDeclaration[25667-25798]:MethodDeclaration[26079-26210]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2416-2464]:Block[2416-2464]"
    }, {
      "left" : "this(0, DEFAULT_ZERO_TOLERANCE);",
      "right" : "this(0, DEFAULT_ZERO_TOLERANCE);",
      "info" : "ConstructorInvocation[2426-2458]:ConstructorInvocation[2426-2458]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2614-2670]:Block[2614-2670]"
    }, {
      "left" : "this(dimension, DEFAULT_ZERO_TOLERANCE);",
      "right" : "this(dimension, DEFAULT_ZERO_TOLERANCE);",
      "info" : "ConstructorInvocation[2624-2664]:ConstructorInvocation[2624-2664]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2932-3055]:Block[2932-3055]"
    }, {
      "left" : "virtualSize = dimension;",
      "right" : "virtualSize = dimension;",
      "info" : "ExpressionStatement[2942-2966]:ExpressionStatement[2942-2966]"
    }, {
      "left" : "entries = new OpenIntToDoubleHashMap(0.0);",
      "right" : "entries = new OpenIntToDoubleHashMap(0.0);",
      "info" : "ExpressionStatement[2975-3017]:ExpressionStatement[2975-3017]"
    }, {
      "left" : "this.epsilon = epsilon;",
      "right" : "this.epsilon = epsilon;",
      "info" : "ExpressionStatement[3026-3049]:ExpressionStatement[3026-3049]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3266-3408]:Block[3266-3408]"
    }, {
      "left" : "virtualSize = v.getDimension() + resize;",
      "right" : "virtualSize = v.getDimension() + resize;",
      "info" : "ExpressionStatement[3276-3316]:ExpressionStatement[3276-3316]"
    }, {
      "left" : "entries = new OpenIntToDoubleHashMap(v.entries);",
      "right" : "entries = new OpenIntToDoubleHashMap(v.entries);",
      "info" : "ExpressionStatement[3325-3373]:ExpressionStatement[3325-3373]"
    }, {
      "left" : "epsilon = v.epsilon;",
      "right" : "epsilon = v.epsilon;",
      "info" : "ExpressionStatement[3382-3402]:ExpressionStatement[3382-3402]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3680-3750]:Block[3680-3750]"
    }, {
      "left" : "this(dimension, expectedSize, DEFAULT_ZERO_TOLERANCE);",
      "right" : "this(dimension, expectedSize, DEFAULT_ZERO_TOLERANCE);",
      "info" : "ConstructorInvocation[3690-3744]:ConstructorInvocation[3690-3744]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4140-4277]:Block[4140-4277]"
    }, {
      "left" : "virtualSize = dimension;",
      "right" : "virtualSize = dimension;",
      "info" : "ExpressionStatement[4150-4174]:ExpressionStatement[4150-4174]"
    }, {
      "left" : "entries = new OpenIntToDoubleHashMap(expectedSize, 0.0);",
      "right" : "entries = new OpenIntToDoubleHashMap(expectedSize, 0.0);",
      "info" : "ExpressionStatement[4183-4239]:ExpressionStatement[4183-4239]"
    }, {
      "left" : "this.epsilon = epsilon;",
      "right" : "this.epsilon = epsilon;",
      "info" : "ExpressionStatement[4248-4271]:ExpressionStatement[4248-4271]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4473-4526]:Block[4473-4526]"
    }, {
      "left" : "this(values, DEFAULT_ZERO_TOLERANCE);",
      "right" : "this(values, DEFAULT_ZERO_TOLERANCE);",
      "info" : "ConstructorInvocation[4483-4520]:ConstructorInvocation[4483-4520]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4837-5167]:Block[4837-5167]"
    }, {
      "left" : "virtualSize = values.length;",
      "right" : "virtualSize = values.length;",
      "info" : "ExpressionStatement[4847-4875]:ExpressionStatement[4847-4875]"
    }, {
      "left" : "entries = new OpenIntToDoubleHashMap(0.0);",
      "right" : "entries = new OpenIntToDoubleHashMap(0.0);",
      "info" : "ExpressionStatement[4884-4926]:ExpressionStatement[4884-4926]"
    }, {
      "left" : "this.epsilon = epsilon;",
      "right" : "this.epsilon = epsilon;",
      "info" : "ExpressionStatement[4935-4958]:ExpressionStatement[4935-4958]"
    }, {
      "left" : "for (int key = 0; key < values.length; key++)",
      "right" : "for (int key = 0; key < values.length; key++)",
      "info" : "ForStatement[4967-5161]:ForStatement[4967-5161]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5013-5161]:Block[5013-5161]"
    }, {
      "left" : "double value = values[key];",
      "right" : "double value = values[key];",
      "info" : "VariableDeclarationStatement[5027-5054]:VariableDeclarationStatement[5027-5054]"
    }, {
      "left" : "if (!isDefaultValue(value))",
      "right" : "if (!isDefaultValue(value))",
      "info" : "IfStatement[5067-5151]:IfStatement[5067-5151]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5095-5151]:Block[5095-5151]"
    }, {
      "left" : "entries.put(key, value);",
      "right" : "entries.put(key, value);",
      "info" : "ExpressionStatement[5113-5137]:ExpressionStatement[5113-5137]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5366-5419]:Block[5366-5419]"
    }, {
      "left" : "this(values, DEFAULT_ZERO_TOLERANCE);",
      "right" : "this(values, DEFAULT_ZERO_TOLERANCE);",
      "info" : "ConstructorInvocation[5376-5413]:ConstructorInvocation[5376-5413]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5703-6047]:Block[5703-6047]"
    }, {
      "left" : "virtualSize = values.length;",
      "right" : "virtualSize = values.length;",
      "info" : "ExpressionStatement[5713-5741]:ExpressionStatement[5713-5741]"
    }, {
      "left" : "entries = new OpenIntToDoubleHashMap(0.0);",
      "right" : "entries = new OpenIntToDoubleHashMap(0.0);",
      "info" : "ExpressionStatement[5750-5792]:ExpressionStatement[5750-5792]"
    }, {
      "left" : "this.epsilon = epsilon;",
      "right" : "this.epsilon = epsilon;",
      "info" : "ExpressionStatement[5801-5824]:ExpressionStatement[5801-5824]"
    }, {
      "left" : "for (int key = 0; key < values.length; key++)",
      "right" : "for (int key = 0; key < values.length; key++)",
      "info" : "ForStatement[5833-6041]:ForStatement[5833-6041]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5879-6041]:Block[5879-6041]"
    }, {
      "left" : "double value = values[key].doubleValue();",
      "right" : "double value = values[key].doubleValue();",
      "info" : "VariableDeclarationStatement[5893-5934]:VariableDeclarationStatement[5893-5934]"
    }, {
      "left" : "if (!isDefaultValue(value))",
      "right" : "if (!isDefaultValue(value))",
      "info" : "IfStatement[5947-6031]:IfStatement[5947-6031]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5975-6031]:Block[5975-6031]"
    }, {
      "left" : "entries.put(key, value);",
      "right" : "entries.put(key, value);",
      "info" : "ExpressionStatement[5993-6017]:ExpressionStatement[5993-6017]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6186-6324]:Block[6186-6324]"
    }, {
      "left" : "virtualSize = v.getDimension();",
      "right" : "virtualSize = v.getDimension();",
      "info" : "ExpressionStatement[6196-6227]:ExpressionStatement[6196-6227]"
    }, {
      "left" : "entries = new OpenIntToDoubleHashMap(v.getEntries());",
      "right" : "entries = new OpenIntToDoubleHashMap(v.getEntries());",
      "info" : "ExpressionStatement[6236-6289]:ExpressionStatement[6236-6289]"
    }, {
      "left" : "epsilon = v.epsilon;",
      "right" : "epsilon = v.epsilon;",
      "info" : "ExpressionStatement[6298-6318]:ExpressionStatement[6298-6318]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6464-6809]:Block[6464-6809]"
    }, {
      "left" : "virtualSize = v.getDimension();",
      "right" : "virtualSize = v.getDimension();",
      "info" : "ExpressionStatement[6474-6505]:ExpressionStatement[6474-6505]"
    }, {
      "left" : "entries = new OpenIntToDoubleHashMap(0.0);",
      "right" : "entries = new OpenIntToDoubleHashMap(0.0);",
      "info" : "ExpressionStatement[6514-6556]:ExpressionStatement[6514-6556]"
    }, {
      "left" : "epsilon = DEFAULT_ZERO_TOLERANCE;",
      "right" : "epsilon = DEFAULT_ZERO_TOLERANCE;",
      "info" : "ExpressionStatement[6565-6598]:ExpressionStatement[6565-6598]"
    }, {
      "left" : "for (int key = 0; key < virtualSize; key++)",
      "right" : "for (int key = 0; key < virtualSize; key++)",
      "info" : "ForStatement[6607-6803]:ForStatement[6607-6803]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6651-6803]:Block[6651-6803]"
    }, {
      "left" : "double value = v.getEntry(key);",
      "right" : "double value = v.getEntry(key);",
      "info" : "VariableDeclarationStatement[6665-6696]:VariableDeclarationStatement[6665-6696]"
    }, {
      "left" : "if (!isDefaultValue(value))",
      "right" : "if (!isDefaultValue(value))",
      "info" : "IfStatement[6709-6793]:IfStatement[6709-6793]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6737-6793]:Block[6737-6793]"
    }, {
      "left" : "entries.put(key, value);",
      "right" : "entries.put(key, value);",
      "info" : "ExpressionStatement[6755-6779]:ExpressionStatement[6755-6779]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6968-6999]:Block[6968-6999]"
    }, {
      "left" : "return entries;",
      "right" : "return entries;",
      "info" : "ReturnStatement[6978-6993]:ReturnStatement[6978-6993]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7286-7339]:Block[7286-7339]"
    }, {
      "left" : "return FastMath.abs(value) < epsilon;",
      "right" : "return FastMath.abs(value) < epsilon;",
      "info" : "ReturnStatement[7296-7333]:ReturnStatement[7296-7333]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7420-7629]:Block[7420-7629]"
    }, {
      "left" : "checkVectorDimensions(v.getDimension());",
      "right" : "checkVectorDimensions(v.getDimension());",
      "info" : "ExpressionStatement[7430-7470]:ExpressionStatement[7430-7470]"
    }, {
      "left" : "if (v instanceof OpenMapRealVector)",
      "right" : "if (v instanceof OpenMapRealVector)",
      "info" : "IfStatement[7479-7623]:IfStatement[7479-7623]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7515-7573]:Block[7515-7573]"
    }, {
      "left" : "return add((OpenMapRealVector) v);",
      "right" : "return add((OpenMapRealVector) v);",
      "info" : "ReturnStatement[7529-7563]:ReturnStatement[7529-7563]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7579-7623]:Block[7579-7623]"
    }, {
      "left" : "return super.add(v);",
      "right" : "return super.add(v);",
      "info" : "ReturnStatement[7593-7613]:ReturnStatement[7593-7613]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8032-8704]:Block[8032-8704]"
    }, {
      "left" : "checkVectorDimensions(v.getDimension());",
      "right" : "checkVectorDimensions(v.getDimension());",
      "info" : "ExpressionStatement[8042-8082]:ExpressionStatement[8042-8082]"
    }, {
      "left" : "boolean copyThis = entries.size() > v.entries.size();",
      "right" : "boolean copyThis = entries.size() > v.entries.size();",
      "info" : "VariableDeclarationStatement[8091-8144]:VariableDeclarationStatement[8091-8144]"
    }, {
      "left" : "OpenMapRealVector res = copyThis ? this.copy() : v.copy();",
      "right" : "OpenMapRealVector res = copyThis ? this.copy() : v.copy();",
      "info" : "VariableDeclarationStatement[8153-8211]:VariableDeclarationStatement[8153-8211]"
    }, {
      "left" : "Iterator iter = copyThis ? v.entries.iterator() : entries.iterator();",
      "right" : "Iterator iter = copyThis ? v.entries.iterator() : entries.iterator();",
      "info" : "VariableDeclarationStatement[8220-8289]:VariableDeclarationStatement[8220-8289]"
    }, {
      "left" : "OpenIntToDoubleHashMap randomAccess = copyThis ? entries : v.entries;",
      "right" : "OpenIntToDoubleHashMap randomAccess = copyThis ? entries : v.entries;",
      "info" : "VariableDeclarationStatement[8298-8367]:VariableDeclarationStatement[8298-8367]"
    }, {
      "left" : "while (iter.hasNext())",
      "right" : "while (iter.hasNext())",
      "info" : "WhileStatement[8376-8678]:WhileStatement[8376-8678]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8399-8678]:Block[8399-8678]"
    }, {
      "left" : "iter.advance();",
      "right" : "iter.advance();",
      "info" : "ExpressionStatement[8413-8428]:ExpressionStatement[8413-8428]"
    }, {
      "left" : "int key = iter.key();",
      "right" : "int key = iter.key();",
      "info" : "VariableDeclarationStatement[8441-8462]:VariableDeclarationStatement[8441-8462]"
    }, {
      "left" : "if (randomAccess.containsKey(key))",
      "right" : "if (randomAccess.containsKey(key))",
      "info" : "IfStatement[8475-8668]:IfStatement[8475-8668]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8510-8598]:Block[8510-8598]"
    }, {
      "left" : "res.setEntry(key, randomAccess.get(key) + iter.value());",
      "right" : "res.setEntry(key, randomAccess.get(key) + iter.value());",
      "info" : "ExpressionStatement[8528-8584]:ExpressionStatement[8528-8584]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8604-8668]:Block[8604-8668]"
    }, {
      "left" : "res.setEntry(key, iter.value());",
      "right" : "res.setEntry(key, iter.value());",
      "info" : "ExpressionStatement[8622-8654]:ExpressionStatement[8622-8654]"
    }, {
      "left" : "return res;",
      "right" : "return res;",
      "info" : "ReturnStatement[8687-8698]:ReturnStatement[8687-8698]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8924-9213]:Block[8924-9213]"
    }, {
      "left" : "OpenMapRealVector res = new OpenMapRealVector(this, v.getDimension());",
      "right" : "OpenMapRealVector res = new OpenMapRealVector(this, v.getDimension());",
      "info" : "VariableDeclarationStatement[8934-9004]:VariableDeclarationStatement[8934-9004]"
    }, {
      "left" : "Iterator iter = v.entries.iterator();",
      "right" : "Iterator iter = v.entries.iterator();",
      "info" : "VariableDeclarationStatement[9013-9050]:VariableDeclarationStatement[9013-9050]"
    }, {
      "left" : "while (iter.hasNext())",
      "right" : "while (iter.hasNext())",
      "info" : "WhileStatement[9059-9187]:WhileStatement[9059-9187]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9082-9187]:Block[9082-9187]"
    }, {
      "left" : "iter.advance();",
      "right" : "iter.advance();",
      "info" : "ExpressionStatement[9096-9111]:ExpressionStatement[9096-9111]"
    }, {
      "left" : "res.setEntry(iter.key() + virtualSize, iter.value());",
      "right" : "res.setEntry(iter.key() + virtualSize, iter.value());",
      "info" : "ExpressionStatement[9124-9177]:ExpressionStatement[9124-9177]"
    }, {
      "left" : "return res;",
      "right" : "return res;",
      "info" : "ReturnStatement[9196-9207]:ReturnStatement[9196-9207]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9304-9680]:Block[9304-9680]"
    }, {
      "left" : "if (v instanceof OpenMapRealVector)",
      "right" : "if (v instanceof OpenMapRealVector)",
      "info" : "IfStatement[9314-9674]:IfStatement[9314-9674]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9350-9411]:Block[9350-9411]"
    }, {
      "left" : "return append((OpenMapRealVector) v);",
      "right" : "return append((OpenMapRealVector) v);",
      "info" : "ReturnStatement[9364-9401]:ReturnStatement[9364-9401]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9417-9674]:Block[9417-9674]"
    }, {
      "left" : "final OpenMapRealVector res = new OpenMapRealVector(this, v.getDimension());",
      "right" : "final OpenMapRealVector res = new OpenMapRealVector(this, v.getDimension());",
      "info" : "VariableDeclarationStatement[9431-9507]:VariableDeclarationStatement[9431-9507]"
    }, {
      "left" : "for (int i = 0; i < v.getDimension(); i++)",
      "right" : "for (int i = 0; i < v.getDimension(); i++)",
      "info" : "ForStatement[9520-9640]:ForStatement[9520-9640]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9563-9640]:Block[9563-9640]"
    }, {
      "left" : "res.setEntry(i + virtualSize, v.getEntry(i));",
      "right" : "res.setEntry(i + virtualSize, v.getEntry(i));",
      "info" : "ExpressionStatement[9581-9626]:ExpressionStatement[9581-9626]"
    }, {
      "left" : "return res;",
      "right" : "return res;",
      "info" : "ReturnStatement[9653-9664]:ReturnStatement[9653-9664]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9767-9896]:Block[9767-9896]"
    }, {
      "left" : "OpenMapRealVector res = new OpenMapRealVector(this, 1);",
      "right" : "OpenMapRealVector res = new OpenMapRealVector(this, 1);",
      "info" : "VariableDeclarationStatement[9777-9832]:VariableDeclarationStatement[9777-9832]"
    }, {
      "left" : "res.setEntry(virtualSize, d);",
      "right" : "res.setEntry(virtualSize, d);",
      "info" : "ExpressionStatement[9841-9870]:ExpressionStatement[9841-9870]"
    }, {
      "left" : "return res;",
      "right" : "return res;",
      "info" : "ReturnStatement[9879-9890]:ReturnStatement[9879-9890]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10003-10054]:Block[10003-10054]"
    }, {
      "left" : "return new OpenMapRealVector(this);",
      "right" : "return new OpenMapRealVector(this);",
      "info" : "ReturnStatement[10013-10048]:ReturnStatement[10013-10048]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10490-10942]:Block[10490-10942]"
    }, {
      "left" : "checkVectorDimensions(v.getDimension());",
      "right" : "checkVectorDimensions(v.getDimension());",
      "info" : "ExpressionStatement[10500-10540]:ExpressionStatement[10500-10540]"
    }, {
      "left" : "boolean thisIsSmaller  = entries.size() < v.entries.size();",
      "right" : "boolean thisIsSmaller  = entries.size() < v.entries.size();",
      "info" : "VariableDeclarationStatement[10549-10608]:VariableDeclarationStatement[10549-10608]"
    }, {
      "left" : "Iterator iter = thisIsSmaller  ? entries.iterator() : v.entries.iterator();",
      "right" : "Iterator iter = thisIsSmaller  ? entries.iterator() : v.entries.iterator();",
      "info" : "VariableDeclarationStatement[10617-10692]:VariableDeclarationStatement[10617-10692]"
    }, {
      "left" : "OpenIntToDoubleHashMap larger = thisIsSmaller  ? v.entries : entries;",
      "right" : "OpenIntToDoubleHashMap larger = thisIsSmaller  ? v.entries : entries;",
      "info" : "VariableDeclarationStatement[10701-10770]:VariableDeclarationStatement[10701-10770]"
    }, {
      "left" : "double d = 0;",
      "right" : "double d = 0;",
      "info" : "VariableDeclarationStatement[10779-10792]:VariableDeclarationStatement[10779-10792]"
    }, {
      "left" : "while(iter.hasNext())",
      "right" : "while(iter.hasNext())",
      "info" : "WhileStatement[10801-10918]:WhileStatement[10801-10918]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10823-10918]:Block[10823-10918]"
    }, {
      "left" : "iter.advance();",
      "right" : "iter.advance();",
      "info" : "ExpressionStatement[10837-10852]:ExpressionStatement[10837-10852]"
    }, {
      "left" : "d += iter.value() * larger.get(iter.key());",
      "right" : "d += iter.value() * larger.get(iter.key());",
      "info" : "ExpressionStatement[10865-10908]:ExpressionStatement[10865-10908]"
    }, {
      "left" : "return d;",
      "right" : "return d;",
      "info" : "ReturnStatement[10927-10936]:ReturnStatement[10927-10936]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11026-11198]:Block[11026-11198]"
    }, {
      "left" : "if(v instanceof OpenMapRealVector)",
      "right" : "if(v instanceof OpenMapRealVector)",
      "info" : "IfStatement[11036-11192]:IfStatement[11036-11192]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11071-11135]:Block[11071-11135]"
    }, {
      "left" : "return dotProduct((OpenMapRealVector)v);",
      "right" : "return dotProduct((OpenMapRealVector)v);",
      "info" : "ReturnStatement[11085-11125]:ReturnStatement[11085-11125]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11141-11192]:Block[11141-11192]"
    }, {
      "left" : "return super.dotProduct(v);",
      "right" : "return super.dotProduct(v);",
      "info" : "ReturnStatement[11155-11182]:ReturnStatement[11155-11182]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11292-11833]:Block[11292-11790]"
    }, {
      "left" : "checkVectorDimensions(v.getDimension());",
      "right" : "checkVectorDimensions(v.getDimension());",
      "info" : "ExpressionStatement[11302-11342]:ExpressionStatement[11302-11342]"
    }, {
      "left" : "OpenMapRealVector res = new OpenMapRealVector(this);",
      "right" : "OpenMapRealVector res = new OpenMapRealVector(this);",
      "info" : "VariableDeclarationStatement[11351-11403]:VariableDeclarationStatement[11351-11403]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11691-11807]:Block[11690-11764]"
    }, {
      "left" : "res.setEntry(iter.key(), iter.value() / v.getEntry(iter.key()));",
      "right" : "res.setEntry(i, this.getEntry(i) / v.getEntry(i));",
      "info" : "ExpressionStatement[11733-11797]:ExpressionStatement[11704-11754]"
    }, {
      "left" : "return res;",
      "right" : "return res;",
      "info" : "ReturnStatement[11816-11827]:ReturnStatement[11773-11784]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11929-12578]:Block[11886-12990]"
    }, {
      "left" : "checkVectorDimensions(v.getDimension());",
      "right" : "checkVectorDimensions(v.getDimension());",
      "info" : "ExpressionStatement[11939-11979]:ExpressionStatement[11896-11936]"
    }, {
      "left" : "OpenMapRealVector res = new OpenMapRealVector(this);",
      "right" : "OpenMapRealVector res = new OpenMapRealVector(this);",
      "info" : "VariableDeclarationStatement[11988-12040]:VariableDeclarationStatement[11945-11997]"
    }, {
      "left" : "Iterator iter = entries.iterator();",
      "right" : "Iterator iter = entries.iterator();",
      "info" : "VariableDeclarationStatement[12049-12084]:VariableDeclarationStatement[12006-12041]"
    }, {
      "left" : "while (iter.hasNext())",
      "right" : "while (iter.hasNext())",
      "info" : "WhileStatement[12093-12232]:WhileStatement[12050-12189]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12116-12232]:Block[12073-12189]"
    }, {
      "left" : "iter.advance();",
      "right" : "iter.advance();",
      "info" : "ExpressionStatement[12130-12145]:ExpressionStatement[12087-12102]"
    }, {
      "left" : "res.setEntry(iter.key(), iter.value() * v.getEntry(iter.key()));",
      "right" : "res.setEntry(iter.key(), iter.value() * v.getEntry(iter.key()));",
      "info" : "ExpressionStatement[12158-12222]:ExpressionStatement[12115-12179]"
    }, {
      "left" : "return res;",
      "right" : "return res;",
      "info" : "ReturnStatement[12561-12572]:ReturnStatement[12973-12984]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12679-13254]:Block[13091-13666]"
    }, {
      "left" : "checkIndex(index);",
      "right" : "checkIndex(index);",
      "info" : "ExpressionStatement[12689-12707]:ExpressionStatement[13101-13119]"
    }, {
      "left" : "if (n < 0)",
      "right" : "if (n < 0)",
      "info" : "IfStatement[12716-12841]:IfStatement[13128-13253]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12727-12841]:Block[13139-13253]"
    }, {
      "left" : "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_ELEMENTS_SHOULD_BE_POSITIVE, n);",
      "right" : "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_ELEMENTS_SHOULD_BE_POSITIVE, n);",
      "info" : "ThrowStatement[12741-12831]:ThrowStatement[13153-13243]"
    }, {
      "left" : "checkIndex(index + n - 1);",
      "right" : "checkIndex(index + n - 1);",
      "info" : "ExpressionStatement[12850-12876]:ExpressionStatement[13262-13288]"
    }, {
      "left" : "OpenMapRealVector res = new OpenMapRealVector(n);",
      "right" : "OpenMapRealVector res = new OpenMapRealVector(n);",
      "info" : "VariableDeclarationStatement[12885-12934]:VariableDeclarationStatement[13297-13346]"
    }, {
      "left" : "int end = index + n;",
      "right" : "int end = index + n;",
      "info" : "VariableDeclarationStatement[12943-12963]:VariableDeclarationStatement[13355-13375]"
    }, {
      "left" : "Iterator iter = entries.iterator();",
      "right" : "Iterator iter = entries.iterator();",
      "info" : "VariableDeclarationStatement[12972-13007]:VariableDeclarationStatement[13384-13419]"
    }, {
      "left" : "while (iter.hasNext())",
      "right" : "while (iter.hasNext())",
      "info" : "WhileStatement[13016-13228]:WhileStatement[13428-13640]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13039-13228]:Block[13451-13640]"
    }, {
      "left" : "iter.advance();",
      "right" : "iter.advance();",
      "info" : "ExpressionStatement[13053-13068]:ExpressionStatement[13465-13480]"
    }, {
      "left" : "int key = iter.key();",
      "right" : "int key = iter.key();",
      "info" : "VariableDeclarationStatement[13081-13102]:VariableDeclarationStatement[13493-13514]"
    }, {
      "left" : "if (key >= index && key < end)",
      "right" : "if (key >= index && key < end)",
      "info" : "IfStatement[13115-13218]:IfStatement[13527-13630]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13146-13218]:Block[13558-13630]"
    }, {
      "left" : "res.setEntry(key - index, iter.value());",
      "right" : "res.setEntry(key - index, iter.value());",
      "info" : "ExpressionStatement[13164-13204]:ExpressionStatement[13576-13616]"
    }, {
      "left" : "return res;",
      "right" : "return res;",
      "info" : "ReturnStatement[13237-13248]:ReturnStatement[13649-13660]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13325-13360]:Block[13737-13772]"
    }, {
      "left" : "return virtualSize;",
      "right" : "return virtualSize;",
      "info" : "ReturnStatement[13335-13354]:ReturnStatement[13747-13766]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13705-14327]:Block[14117-14739]"
    }, {
      "left" : "Iterator iter = entries.iterator();",
      "right" : "Iterator iter = entries.iterator();",
      "info" : "VariableDeclarationStatement[13715-13750]:VariableDeclarationStatement[14127-14162]"
    }, {
      "left" : "double res = 0;",
      "right" : "double res = 0;",
      "info" : "VariableDeclarationStatement[13759-13774]:VariableDeclarationStatement[14171-14186]"
    }, {
      "left" : "while (iter.hasNext())",
      "right" : "while (iter.hasNext())",
      "info" : "WhileStatement[13783-13991]:WhileStatement[14195-14403]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13806-13991]:Block[14218-14403]"
    }, {
      "left" : "iter.advance();",
      "right" : "iter.advance();",
      "info" : "ExpressionStatement[13820-13835]:ExpressionStatement[14232-14247]"
    }, {
      "left" : "int key = iter.key();",
      "right" : "int key = iter.key();",
      "info" : "VariableDeclarationStatement[13848-13869]:VariableDeclarationStatement[14260-14281]"
    }, {
      "left" : "double delta;",
      "right" : "double delta;",
      "info" : "VariableDeclarationStatement[13882-13895]:VariableDeclarationStatement[14294-14307]"
    }, {
      "left" : "delta = iter.value() - v.getEntry(key);",
      "right" : "delta = iter.value() - v.getEntry(key);",
      "info" : "ExpressionStatement[13908-13947]:ExpressionStatement[14320-14359]"
    }, {
      "left" : "res += delta * delta;",
      "right" : "res += delta * delta;",
      "info" : "ExpressionStatement[13960-13981]:ExpressionStatement[14372-14393]"
    }, {
      "left" : "iter = v.getEntries().iterator();",
      "right" : "iter = v.getEntries().iterator();",
      "info" : "ExpressionStatement[14000-14033]:ExpressionStatement[14412-14445]"
    }, {
      "left" : "while (iter.hasNext())",
      "right" : "while (iter.hasNext())",
      "info" : "WhileStatement[14042-14286]:WhileStatement[14454-14698]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14065-14286]:Block[14477-14698]"
    }, {
      "left" : "iter.advance();",
      "right" : "iter.advance();",
      "info" : "ExpressionStatement[14079-14094]:ExpressionStatement[14491-14506]"
    }, {
      "left" : "int key = iter.key();",
      "right" : "int key = iter.key();",
      "info" : "VariableDeclarationStatement[14107-14128]:VariableDeclarationStatement[14519-14540]"
    }, {
      "left" : "if (!entries.containsKey(key))",
      "right" : "if (!entries.containsKey(key))",
      "info" : "IfStatement[14141-14276]:IfStatement[14553-14688]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14172-14276]:Block[14584-14688]"
    }, {
      "left" : "final double value = iter.value();",
      "right" : "final double value = iter.value();",
      "info" : "VariableDeclarationStatement[14190-14224]:VariableDeclarationStatement[14602-14636]"
    }, {
      "left" : "res += value * value;",
      "right" : "res += value * value;",
      "info" : "ExpressionStatement[14241-14262]:ExpressionStatement[14653-14674]"
    }, {
      "left" : "return FastMath.sqrt(res);",
      "right" : "return FastMath.sqrt(res);",
      "info" : "ReturnStatement[14295-14321]:ReturnStatement[14707-14733]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14412-14637]:Block[14824-15049]"
    }, {
      "left" : "checkVectorDimensions(v.getDimension());",
      "right" : "checkVectorDimensions(v.getDimension());",
      "info" : "ExpressionStatement[14422-14462]:ExpressionStatement[14834-14874]"
    }, {
      "left" : "if (v instanceof OpenMapRealVector)",
      "right" : "if (v instanceof OpenMapRealVector)",
      "info" : "IfStatement[14471-14631]:IfStatement[14883-15043]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14507-14573]:Block[14919-14985]"
    }, {
      "left" : "return getDistance((OpenMapRealVector) v);",
      "right" : "return getDistance((OpenMapRealVector) v);",
      "info" : "ReturnStatement[14521-14563]:ReturnStatement[14933-14975]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14579-14631]:Block[14991-15043]"
    }, {
      "left" : "return super.getDistance(v);",
      "right" : "return super.getDistance(v);",
      "info" : "ReturnStatement[14593-14621]:ReturnStatement[15005-15033]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14716-14785]:Block[15128-15197]"
    }, {
      "left" : "checkIndex(index);",
      "right" : "checkIndex(index);",
      "info" : "ExpressionStatement[14726-14744]:ExpressionStatement[15138-15156]"
    }, {
      "left" : "return entries.get(index);",
      "right" : "return entries.get(index);",
      "info" : "ReturnStatement[14753-14779]:ReturnStatement[15165-15191]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15166-15748]:Block[15578-16160]"
    }, {
      "left" : "double max = 0;",
      "right" : "double max = 0;",
      "info" : "VariableDeclarationStatement[15176-15191]:VariableDeclarationStatement[15588-15603]"
    }, {
      "left" : "Iterator iter = entries.iterator();",
      "right" : "Iterator iter = entries.iterator();",
      "info" : "VariableDeclarationStatement[15200-15235]:VariableDeclarationStatement[15612-15647]"
    }, {
      "left" : "while (iter.hasNext())",
      "right" : "while (iter.hasNext())",
      "info" : "WhileStatement[15244-15412]:WhileStatement[15656-15824]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15267-15412]:Block[15679-15824]"
    }, {
      "left" : "iter.advance();",
      "right" : "iter.advance();",
      "info" : "ExpressionStatement[15281-15296]:ExpressionStatement[15693-15708]"
    }, {
      "left" : "double delta = FastMath.abs(iter.value() - v.getEntry(iter.key()));",
      "right" : "double delta = FastMath.abs(iter.value() - v.getEntry(iter.key()));",
      "info" : "VariableDeclarationStatement[15309-15376]:VariableDeclarationStatement[15721-15788]"
    }, {
      "left" : "max += delta;",
      "right" : "max += delta;",
      "info" : "ExpressionStatement[15389-15402]:ExpressionStatement[15801-15814]"
    }, {
      "left" : "iter = v.getEntries().iterator();",
      "right" : "iter = v.getEntries().iterator();",
      "info" : "ExpressionStatement[15421-15454]:ExpressionStatement[15833-15866]"
    }, {
      "left" : "while (iter.hasNext())",
      "right" : "while (iter.hasNext())",
      "info" : "WhileStatement[15463-15722]:WhileStatement[15875-16134]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15486-15722]:Block[15898-16134]"
    }, {
      "left" : "iter.advance();",
      "right" : "iter.advance();",
      "info" : "ExpressionStatement[15500-15515]:ExpressionStatement[15912-15927]"
    }, {
      "left" : "int key = iter.key();",
      "right" : "int key = iter.key();",
      "info" : "VariableDeclarationStatement[15528-15549]:VariableDeclarationStatement[15940-15961]"
    }, {
      "left" : "if (!entries.containsKey(key))",
      "right" : "if (!entries.containsKey(key))",
      "info" : "IfStatement[15562-15712]:IfStatement[15974-16124]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15593-15712]:Block[16005-16124]"
    }, {
      "left" : "double delta = FastMath.abs(iter.value());",
      "right" : "double delta = FastMath.abs(iter.value());",
      "info" : "VariableDeclarationStatement[15611-15653]:VariableDeclarationStatement[16023-16065]"
    }, {
      "left" : "max +=  FastMath.abs(delta);",
      "right" : "max +=  FastMath.abs(delta);",
      "info" : "ExpressionStatement[15670-15698]:ExpressionStatement[16082-16110]"
    }, {
      "left" : "return max;",
      "right" : "return max;",
      "info" : "ReturnStatement[15731-15742]:ReturnStatement[16143-16154]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15835-16064]:Block[16247-16476]"
    }, {
      "left" : "checkVectorDimensions(v.getDimension());",
      "right" : "checkVectorDimensions(v.getDimension());",
      "info" : "ExpressionStatement[15845-15885]:ExpressionStatement[16257-16297]"
    }, {
      "left" : "if (v instanceof OpenMapRealVector)",
      "right" : "if (v instanceof OpenMapRealVector)",
      "info" : "IfStatement[15894-16058]:IfStatement[16306-16470]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15930-15998]:Block[16342-16410]"
    }, {
      "left" : "return getL1Distance((OpenMapRealVector) v);",
      "right" : "return getL1Distance((OpenMapRealVector) v);",
      "info" : "ReturnStatement[15944-15988]:ReturnStatement[16356-16400]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16004-16058]:Block[16416-16470]"
    }, {
      "left" : "return super.getL1Distance(v);",
      "right" : "return super.getL1Distance(v);",
      "info" : "ReturnStatement[16018-16048]:ReturnStatement[16430-16460]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16276-16902]:Block[16688-17314]"
    }, {
      "left" : "double max = 0;",
      "right" : "double max = 0;",
      "info" : "VariableDeclarationStatement[16286-16301]:VariableDeclarationStatement[16698-16713]"
    }, {
      "left" : "Iterator iter = entries.iterator();",
      "right" : "Iterator iter = entries.iterator();",
      "info" : "VariableDeclarationStatement[16310-16345]:VariableDeclarationStatement[16722-16757]"
    }, {
      "left" : "while (iter.hasNext())",
      "right" : "while (iter.hasNext())",
      "info" : "WhileStatement[16354-16570]:WhileStatement[16766-16982]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16377-16570]:Block[16789-16982]"
    }, {
      "left" : "iter.advance();",
      "right" : "iter.advance();",
      "info" : "ExpressionStatement[16391-16406]:ExpressionStatement[16803-16818]"
    }, {
      "left" : "double delta = FastMath.abs(iter.value() - v.getEntry(iter.key()));",
      "right" : "double delta = FastMath.abs(iter.value() - v.getEntry(iter.key()));",
      "info" : "VariableDeclarationStatement[16419-16486]:VariableDeclarationStatement[16831-16898]"
    }, {
      "left" : "if (delta > max)",
      "right" : "if (delta > max)",
      "info" : "IfStatement[16499-16560]:IfStatement[16911-16972]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16516-16560]:Block[16928-16972]"
    }, {
      "left" : "max = delta;",
      "right" : "max = delta;",
      "info" : "ExpressionStatement[16534-16546]:ExpressionStatement[16946-16958]"
    }, {
      "left" : "iter = v.getEntries().iterator();",
      "right" : "iter = v.getEntries().iterator();",
      "info" : "ExpressionStatement[16579-16612]:ExpressionStatement[16991-17024]"
    }, {
      "left" : "while (iter.hasNext())",
      "right" : "while (iter.hasNext())",
      "info" : "WhileStatement[16621-16876]:WhileStatement[17033-17288]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16644-16876]:Block[17056-17288]"
    }, {
      "left" : "iter.advance();",
      "right" : "iter.advance();",
      "info" : "ExpressionStatement[16658-16673]:ExpressionStatement[17070-17085]"
    }, {
      "left" : "int key = iter.key();",
      "right" : "int key = iter.key();",
      "info" : "VariableDeclarationStatement[16686-16707]:VariableDeclarationStatement[17098-17119]"
    }, {
      "left" : "if (!entries.containsKey(key))",
      "right" : "if (!entries.containsKey(key))",
      "info" : "IfStatement[16720-16866]:IfStatement[17132-17278]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16751-16866]:Block[17163-17278]"
    }, {
      "left" : "if (iter.value() > max)",
      "right" : "if (iter.value() > max)",
      "info" : "IfStatement[16769-16852]:IfStatement[17181-17264]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16793-16852]:Block[17205-17264]"
    }, {
      "left" : "max = iter.value();",
      "right" : "max = iter.value();",
      "info" : "ExpressionStatement[16815-16834]:ExpressionStatement[17227-17246]"
    }, {
      "left" : "return max;",
      "right" : "return max;",
      "info" : "ReturnStatement[16885-16896]:ReturnStatement[17297-17308]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16991-17224]:Block[17403-17636]"
    }, {
      "left" : "checkVectorDimensions(v.getDimension());",
      "right" : "checkVectorDimensions(v.getDimension());",
      "info" : "ExpressionStatement[17001-17041]:ExpressionStatement[17413-17453]"
    }, {
      "left" : "if (v instanceof OpenMapRealVector)",
      "right" : "if (v instanceof OpenMapRealVector)",
      "info" : "IfStatement[17050-17218]:IfStatement[17462-17630]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17086-17156]:Block[17498-17568]"
    }, {
      "left" : "return getLInfDistance((OpenMapRealVector) v);",
      "right" : "return getLInfDistance((OpenMapRealVector) v);",
      "info" : "ReturnStatement[17100-17146]:ReturnStatement[17512-17558]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17162-17218]:Block[17574-17630]"
    }, {
      "left" : "return super.getLInfDistance(v);",
      "right" : "return super.getLInfDistance(v);",
      "info" : "ReturnStatement[17176-17208]:ReturnStatement[17588-17620]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17297-17714]:Block[17709-18126]"
    }, {
      "left" : "boolean infiniteFound = false;",
      "right" : "boolean infiniteFound = false;",
      "info" : "VariableDeclarationStatement[17307-17337]:VariableDeclarationStatement[17719-17749]"
    }, {
      "left" : "Iterator iter = entries.iterator();",
      "right" : "Iterator iter = entries.iterator();",
      "info" : "VariableDeclarationStatement[17346-17381]:VariableDeclarationStatement[17758-17793]"
    }, {
      "left" : "while (iter.hasNext())",
      "right" : "while (iter.hasNext())",
      "info" : "WhileStatement[17390-17678]:WhileStatement[17802-18090]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17413-17678]:Block[17825-18090]"
    }, {
      "left" : "iter.advance();",
      "right" : "iter.advance();",
      "info" : "ExpressionStatement[17427-17442]:ExpressionStatement[17839-17854]"
    }, {
      "left" : "final double value = iter.value();",
      "right" : "final double value = iter.value();",
      "info" : "VariableDeclarationStatement[17455-17489]:VariableDeclarationStatement[17867-17901]"
    }, {
      "left" : "if (Double.isNaN(value))",
      "right" : "if (Double.isNaN(value))",
      "info" : "IfStatement[17502-17572]:IfStatement[17914-17984]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17527-17572]:Block[17939-17984]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[17545-17558]:ReturnStatement[17957-17970]"
    }, {
      "left" : "if (Double.isInfinite(value))",
      "right" : "if (Double.isInfinite(value))",
      "info" : "IfStatement[17585-17668]:IfStatement[17997-18080]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17615-17668]:Block[18027-18080]"
    }, {
      "left" : "infiniteFound = true;",
      "right" : "infiniteFound = true;",
      "info" : "ExpressionStatement[17633-17654]:ExpressionStatement[18045-18066]"
    }, {
      "left" : "return infiniteFound;",
      "right" : "return infiniteFound;",
      "info" : "ReturnStatement[17687-17708]:ReturnStatement[18099-18120]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17782-18015]:Block[18194-18427]"
    }, {
      "left" : "Iterator iter = entries.iterator();",
      "right" : "Iterator iter = entries.iterator();",
      "info" : "VariableDeclarationStatement[17792-17827]:VariableDeclarationStatement[18204-18239]"
    }, {
      "left" : "while (iter.hasNext())",
      "right" : "while (iter.hasNext())",
      "info" : "WhileStatement[17836-17987]:WhileStatement[18248-18399]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17859-17987]:Block[18271-18399]"
    }, {
      "left" : "iter.advance();",
      "right" : "iter.advance();",
      "info" : "ExpressionStatement[17873-17888]:ExpressionStatement[18285-18300]"
    }, {
      "left" : "if (Double.isNaN(iter.value()))",
      "right" : "if (Double.isNaN(iter.value()))",
      "info" : "IfStatement[17901-17977]:IfStatement[18313-18389]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17933-17977]:Block[18345-18389]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[17951-17963]:ReturnStatement[18363-18375]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[17996-18009]:ReturnStatement[18408-18421]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18102-18148]:Block[18514-18560]"
    }, {
      "left" : "return copy().mapAddToSelf(d);",
      "right" : "return copy().mapAddToSelf(d);",
      "info" : "ReturnStatement[18112-18142]:ReturnStatement[18524-18554]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18241-18369]:Block[18653-18781]"
    }, {
      "left" : "for (int i = 0; i < virtualSize; i++)",
      "right" : "for (int i = 0; i < virtualSize; i++)",
      "info" : "ForStatement[18251-18342]:ForStatement[18663-18754]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18289-18342]:Block[18701-18754]"
    }, {
      "left" : "setEntry(i, getEntry(i) + d);",
      "right" : "setEntry(i, getEntry(i) + d);",
      "info" : "ExpressionStatement[18303-18332]:ExpressionStatement[18715-18744]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[18351-18363]:ReturnStatement[18763-18775]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18457-18576]:Block[18869-18988]"
    }, {
      "left" : "checkVectorDimensions(v.getDimension());",
      "right" : "checkVectorDimensions(v.getDimension());",
      "info" : "ExpressionStatement[18467-18507]:ExpressionStatement[18879-18919]"
    }, {
      "left" : "return v.mapMultiply(dotProduct(v) / v.dotProduct(v));",
      "right" : "return v.mapMultiply(dotProduct(v) / v.dotProduct(v));",
      "info" : "ReturnStatement[18516-18570]:ReturnStatement[18928-18982]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18667-18872]:Block[19079-19284]"
    }, {
      "left" : "checkIndex(index);",
      "right" : "checkIndex(index);",
      "info" : "ExpressionStatement[18677-18695]:ExpressionStatement[19089-19107]"
    }, {
      "left" : "if (!isDefaultValue(value))",
      "right" : "if (!isDefaultValue(value))",
      "info" : "IfStatement[18704-18866]:IfStatement[19116-19278]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18732-18782]:Block[19144-19194]"
    }, {
      "left" : "entries.put(index, value);",
      "right" : "entries.put(index, value);",
      "info" : "ExpressionStatement[18746-18772]:ExpressionStatement[19158-19184]"
    }, {
      "left" : "if (entries.containsKey(index))",
      "right" : "if (entries.containsKey(index))",
      "info" : "IfStatement[18788-18866]:IfStatement[19200-19278]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18820-18866]:Block[19232-19278]"
    }, {
      "left" : "entries.remove(index);",
      "right" : "entries.remove(index);",
      "info" : "ExpressionStatement[18834-18856]:ExpressionStatement[19246-19268]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18967-19162]:Block[19379-19574]"
    }, {
      "left" : "checkIndex(index);",
      "right" : "checkIndex(index);",
      "info" : "ExpressionStatement[18977-18995]:ExpressionStatement[19389-19407]"
    }, {
      "left" : "checkIndex(index + v.getDimension() - 1);",
      "right" : "checkIndex(index + v.getDimension() - 1);",
      "info" : "ExpressionStatement[19004-19045]:ExpressionStatement[19416-19457]"
    }, {
      "left" : "for (int i = 0; i < v.getDimension(); i++)",
      "right" : "for (int i = 0; i < v.getDimension(); i++)",
      "info" : "ForStatement[19054-19156]:ForStatement[19466-19568]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19097-19156]:Block[19509-19568]"
    }, {
      "left" : "setEntry(i + index, v.getEntry(i));",
      "right" : "setEntry(i + index, v.getEntry(i));",
      "info" : "ExpressionStatement[19111-19146]:ExpressionStatement[19523-19558]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19237-19334]:Block[19649-19746]"
    }, {
      "left" : "for (int i = 0; i < virtualSize; i++)",
      "right" : "for (int i = 0; i < virtualSize; i++)",
      "info" : "ForStatement[19247-19328]:ForStatement[19659-19740]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19285-19328]:Block[19697-19740]"
    }, {
      "left" : "setEntry(i, value);",
      "right" : "setEntry(i, value);",
      "info" : "ExpressionStatement[19299-19318]:ExpressionStatement[19711-19730]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19705-20174]:Block[20117-20586]"
    }, {
      "left" : "checkVectorDimensions(v.getDimension());",
      "right" : "checkVectorDimensions(v.getDimension());",
      "info" : "ExpressionStatement[19715-19755]:ExpressionStatement[20127-20167]"
    }, {
      "left" : "OpenMapRealVector res = copy();",
      "right" : "OpenMapRealVector res = copy();",
      "info" : "VariableDeclarationStatement[19764-19795]:VariableDeclarationStatement[20176-20207]"
    }, {
      "left" : "Iterator iter = v.getEntries().iterator();",
      "right" : "Iterator iter = v.getEntries().iterator();",
      "info" : "VariableDeclarationStatement[19804-19846]:VariableDeclarationStatement[20216-20258]"
    }, {
      "left" : "while (iter.hasNext())",
      "right" : "while (iter.hasNext())",
      "info" : "WhileStatement[19855-20148]:WhileStatement[20267-20560]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19878-20148]:Block[20290-20560]"
    }, {
      "left" : "iter.advance();",
      "right" : "iter.advance();",
      "info" : "ExpressionStatement[19892-19907]:ExpressionStatement[20304-20319]"
    }, {
      "left" : "int key = iter.key();",
      "right" : "int key = iter.key();",
      "info" : "VariableDeclarationStatement[19920-19941]:VariableDeclarationStatement[20332-20353]"
    }, {
      "left" : "if (entries.containsKey(key))",
      "right" : "if (entries.containsKey(key))",
      "info" : "IfStatement[19954-20138]:IfStatement[20366-20550]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19984-20067]:Block[20396-20479]"
    }, {
      "left" : "res.setEntry(key, entries.get(key) - iter.value());",
      "right" : "res.setEntry(key, entries.get(key) - iter.value());",
      "info" : "ExpressionStatement[20002-20053]:ExpressionStatement[20414-20465]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20073-20138]:Block[20485-20550]"
    }, {
      "left" : "res.setEntry(key, -iter.value());",
      "right" : "res.setEntry(key, -iter.value());",
      "info" : "ExpressionStatement[20091-20124]:ExpressionStatement[20503-20536]"
    }, {
      "left" : "return res;",
      "right" : "return res;",
      "info" : "ReturnStatement[20157-20168]:ReturnStatement[20569-20580]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20260-20479]:Block[20672-20891]"
    }, {
      "left" : "checkVectorDimensions(v.getDimension());",
      "right" : "checkVectorDimensions(v.getDimension());",
      "info" : "ExpressionStatement[20270-20310]:ExpressionStatement[20682-20722]"
    }, {
      "left" : "if (v instanceof OpenMapRealVector)",
      "right" : "if (v instanceof OpenMapRealVector)",
      "info" : "IfStatement[20319-20473]:IfStatement[20731-20885]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20355-20418]:Block[20767-20830]"
    }, {
      "left" : "return subtract((OpenMapRealVector) v);",
      "right" : "return subtract((OpenMapRealVector) v);",
      "info" : "ReturnStatement[20369-20408]:ReturnStatement[20781-20820]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20424-20473]:Block[20836-20885]"
    }, {
      "left" : "return super.subtract(v);",
      "right" : "return super.subtract(v);",
      "info" : "ReturnStatement[20438-20463]:ReturnStatement[20850-20875]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20562-20652]:Block[20974-21064]"
    }, {
      "left" : "OpenMapRealVector res = copy();",
      "right" : "OpenMapRealVector res = copy();",
      "info" : "VariableDeclarationStatement[20572-20603]:VariableDeclarationStatement[20984-21015]"
    }, {
      "left" : "res.unitize();",
      "right" : "res.unitize();",
      "info" : "ExpressionStatement[20612-20626]:ExpressionStatement[21024-21038]"
    }, {
      "left" : "return res;",
      "right" : "return res;",
      "info" : "ReturnStatement[20635-20646]:ReturnStatement[21047-21058]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20719-21053]:Block[21131-21465]"
    }, {
      "left" : "double norm = getNorm();",
      "right" : "double norm = getNorm();",
      "info" : "VariableDeclarationStatement[20729-20753]:VariableDeclarationStatement[21141-21165]"
    }, {
      "left" : "if (isDefaultValue(norm))",
      "right" : "if (isDefaultValue(norm))",
      "info" : "IfStatement[20762-20874]:IfStatement[21174-21286]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20788-20874]:Block[21200-21286]"
    }, {
      "left" : "throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);",
      "right" : "throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);",
      "info" : "ThrowStatement[20802-20864]:ThrowStatement[21214-21276]"
    }, {
      "left" : "Iterator iter = entries.iterator();",
      "right" : "Iterator iter = entries.iterator();",
      "info" : "VariableDeclarationStatement[20883-20918]:VariableDeclarationStatement[21295-21330]"
    }, {
      "left" : "while (iter.hasNext())",
      "right" : "while (iter.hasNext())",
      "info" : "WhileStatement[20927-21047]:WhileStatement[21339-21459]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20950-21047]:Block[21362-21459]"
    }, {
      "left" : "iter.advance();",
      "right" : "iter.advance();",
      "info" : "ExpressionStatement[20964-20979]:ExpressionStatement[21376-21391]"
    }, {
      "left" : "entries.put(iter.key(), iter.value() / norm);",
      "right" : "entries.put(iter.key(), iter.value() / norm);",
      "info" : "ExpressionStatement[20992-21037]:ExpressionStatement[21404-21449]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21124-21358]:Block[21536-21770]"
    }, {
      "left" : "double[] res = new double[virtualSize];",
      "right" : "double[] res = new double[virtualSize];",
      "info" : "VariableDeclarationStatement[21134-21173]:VariableDeclarationStatement[21546-21585]"
    }, {
      "left" : "Iterator iter = entries.iterator();",
      "right" : "Iterator iter = entries.iterator();",
      "info" : "VariableDeclarationStatement[21182-21217]:VariableDeclarationStatement[21594-21629]"
    }, {
      "left" : "while (iter.hasNext())",
      "right" : "while (iter.hasNext())",
      "info" : "WhileStatement[21226-21332]:WhileStatement[21638-21744]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21249-21332]:Block[21661-21744]"
    }, {
      "left" : "iter.advance();",
      "right" : "iter.advance();",
      "info" : "ExpressionStatement[21263-21278]:ExpressionStatement[21675-21690]"
    }, {
      "left" : "res[iter.key()] = iter.value();",
      "right" : "res[iter.key()] = iter.value();",
      "info" : "ExpressionStatement[21291-21322]:ExpressionStatement[21703-21734]"
    }, {
      "left" : "return res;",
      "right" : "return res;",
      "info" : "ReturnStatement[21341-21352]:ReturnStatement[21753-21764]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21631-22133]:Block[22043-22545]"
    }, {
      "left" : "final int prime = 31;",
      "right" : "final int prime = 31;",
      "info" : "VariableDeclarationStatement[21641-21662]:VariableDeclarationStatement[22053-22074]"
    }, {
      "left" : "int result = 1;",
      "right" : "int result = 1;",
      "info" : "VariableDeclarationStatement[21671-21686]:VariableDeclarationStatement[22083-22098]"
    }, {
      "left" : "long temp;",
      "right" : "long temp;",
      "info" : "VariableDeclarationStatement[21695-21705]:VariableDeclarationStatement[22107-22117]"
    }, {
      "left" : "temp = Double.doubleToLongBits(epsilon);",
      "right" : "temp = Double.doubleToLongBits(epsilon);",
      "info" : "ExpressionStatement[21714-21754]:ExpressionStatement[22126-22166]"
    }, {
      "left" : "result = prime * result + (int) (temp ^ (temp >>> 32));",
      "right" : "result = prime * result + (int) (temp ^ (temp >>> 32));",
      "info" : "ExpressionStatement[21763-21818]:ExpressionStatement[22175-22230]"
    }, {
      "left" : "result = prime * result + virtualSize;",
      "right" : "result = prime * result + virtualSize;",
      "info" : "ExpressionStatement[21827-21865]:ExpressionStatement[22239-22277]"
    }, {
      "left" : "Iterator iter = entries.iterator();",
      "right" : "Iterator iter = entries.iterator();",
      "info" : "VariableDeclarationStatement[21874-21909]:VariableDeclarationStatement[22286-22321]"
    }, {
      "left" : "while (iter.hasNext())",
      "right" : "while (iter.hasNext())",
      "info" : "WhileStatement[21918-22104]:WhileStatement[22330-22516]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21941-22104]:Block[22353-22516]"
    }, {
      "left" : "iter.advance();",
      "right" : "iter.advance();",
      "info" : "ExpressionStatement[21955-21970]:ExpressionStatement[22367-22382]"
    }, {
      "left" : "temp = Double.doubleToLongBits(iter.value());",
      "right" : "temp = Double.doubleToLongBits(iter.value());",
      "info" : "ExpressionStatement[21983-22028]:ExpressionStatement[22395-22440]"
    }, {
      "left" : "result = prime * result + (int) (temp ^ (temp >>32));",
      "right" : "result = prime * result + (int) (temp ^ (temp >>32));",
      "info" : "ExpressionStatement[22041-22094]:ExpressionStatement[22453-22506]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[22113-22127]:ReturnStatement[22525-22539]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22418-23478]:Block[22830-23890]"
    }, {
      "left" : "if (this == obj)",
      "right" : "if (this == obj)",
      "info" : "IfStatement[22428-22481]:IfStatement[22840-22893]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22445-22481]:Block[22857-22893]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[22459-22471]:ReturnStatement[22871-22883]"
    }, {
      "left" : "if (!(obj instanceof OpenMapRealVector))",
      "right" : "if (!(obj instanceof OpenMapRealVector))",
      "info" : "IfStatement[22490-22568]:IfStatement[22902-22980]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22531-22568]:Block[22943-22980]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[22545-22558]:ReturnStatement[22957-22970]"
    }, {
      "left" : "OpenMapRealVector other = (OpenMapRealVector) obj;",
      "right" : "OpenMapRealVector other = (OpenMapRealVector) obj;",
      "info" : "VariableDeclarationStatement[22577-22627]:VariableDeclarationStatement[22989-23039]"
    }, {
      "left" : "if (virtualSize != other.virtualSize)",
      "right" : "if (virtualSize != other.virtualSize)",
      "info" : "IfStatement[22636-22711]:IfStatement[23048-23123]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22674-22711]:Block[23086-23123]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[22688-22701]:ReturnStatement[23100-23113]"
    }, {
      "left" : "if (Double.doubleToLongBits(epsilon) !=\n            Double.doubleToLongBits(other.epsilon))",
      "right" : "if (Double.doubleToLongBits(epsilon) !=\n            Double.doubleToLongBits(other.epsilon))",
      "info" : "IfStatement[22720-22849]:IfStatement[23132-23261]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22812-22849]:Block[23224-23261]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[22826-22839]:ReturnStatement[23238-23251]"
    }, {
      "left" : "Iterator iter = entries.iterator();",
      "right" : "Iterator iter = entries.iterator();",
      "info" : "VariableDeclarationStatement[22858-22893]:VariableDeclarationStatement[23270-23305]"
    }, {
      "left" : "while (iter.hasNext())",
      "right" : "while (iter.hasNext())",
      "info" : "WhileStatement[22902-23152]:WhileStatement[23314-23564]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22925-23152]:Block[23337-23564]"
    }, {
      "left" : "iter.advance();",
      "right" : "iter.advance();",
      "info" : "ExpressionStatement[22939-22954]:ExpressionStatement[23351-23366]"
    }, {
      "left" : "double test = other.getEntry(iter.key());",
      "right" : "double test = other.getEntry(iter.key());",
      "info" : "VariableDeclarationStatement[22967-23008]:VariableDeclarationStatement[23379-23420]"
    }, {
      "left" : "if (Double.doubleToLongBits(test) != Double.doubleToLongBits(iter.value()))",
      "right" : "if (Double.doubleToLongBits(test) != Double.doubleToLongBits(iter.value()))",
      "info" : "IfStatement[23021-23142]:IfStatement[23433-23554]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23097-23142]:Block[23509-23554]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[23115-23128]:ReturnStatement[23527-23540]"
    }, {
      "left" : "iter = other.getEntries().iterator();",
      "right" : "iter = other.getEntries().iterator();",
      "info" : "ExpressionStatement[23161-23198]:ExpressionStatement[23573-23610]"
    }, {
      "left" : "while (iter.hasNext())",
      "right" : "while (iter.hasNext())",
      "info" : "WhileStatement[23207-23451]:WhileStatement[23619-23863]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23230-23451]:Block[23642-23863]"
    }, {
      "left" : "iter.advance();",
      "right" : "iter.advance();",
      "info" : "ExpressionStatement[23244-23259]:ExpressionStatement[23656-23671]"
    }, {
      "left" : "double test = iter.value();",
      "right" : "double test = iter.value();",
      "info" : "VariableDeclarationStatement[23272-23299]:VariableDeclarationStatement[23684-23711]"
    }, {
      "left" : "if (Double.doubleToLongBits(test) != Double.doubleToLongBits(getEntry(iter.key())))",
      "right" : "if (Double.doubleToLongBits(test) != Double.doubleToLongBits(getEntry(iter.key())))",
      "info" : "IfStatement[23312-23441]:IfStatement[23724-23853]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23396-23441]:Block[23808-23853]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[23414-23427]:ReturnStatement[23826-23839]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[23460-23472]:ReturnStatement[23872-23884]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23627-23696]:Block[24039-24108]"
    }, {
      "left" : "return (double)entries.size()/(double)getDimension();",
      "right" : "return (double)entries.size()/(double)getDimension();",
      "info" : "ReturnStatement[23637-23690]:ReturnStatement[24049-24102]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23791-23842]:Block[24203-24254]"
    }, {
      "left" : "return new OpenMapSparseIterator();",
      "right" : "return new OpenMapSparseIterator();",
      "info" : "ReturnStatement[23801-23836]:ReturnStatement[24213-24248]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24401-24442]:Block[24813-24854]"
    }, {
      "left" : "this.iter = iter;",
      "right" : "this.iter = iter;",
      "info" : "ExpressionStatement[24415-24432]:ExpressionStatement[24827-24844]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24524-24568]:Block[24936-24980]"
    }, {
      "left" : "return iter.value();",
      "right" : "return iter.value();",
      "info" : "ReturnStatement[24538-24558]:ReturnStatement[24950-24970]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24660-24715]:Block[25072-25127]"
    }, {
      "left" : "entries.put(iter.key(), value);",
      "right" : "entries.put(iter.key(), value);",
      "info" : "ExpressionStatement[24674-24705]:ExpressionStatement[25086-25117]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24794-24836]:Block[25206-25248]"
    }, {
      "left" : "return iter.key();",
      "right" : "return iter.key();",
      "info" : "ReturnStatement[24808-24826]:ReturnStatement[25220-25238]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25325-25421]:Block[25737-25833]"
    }, {
      "left" : "iter = entries.iterator();",
      "right" : "iter = entries.iterator();",
      "info" : "ExpressionStatement[25339-25365]:ExpressionStatement[25751-25777]"
    }, {
      "left" : "current = new OpenMapEntry(iter);",
      "right" : "current = new OpenMapEntry(iter);",
      "info" : "ExpressionStatement[25378-25411]:ExpressionStatement[25790-25823]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25485-25531]:Block[25897-25943]"
    }, {
      "left" : "return iter.hasNext();",
      "right" : "return iter.hasNext();",
      "info" : "ReturnStatement[25499-25521]:ReturnStatement[25911-25933]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25590-25657]:Block[26002-26069]"
    }, {
      "left" : "iter.advance();",
      "right" : "iter.advance();",
      "info" : "ExpressionStatement[25604-25619]:ExpressionStatement[26016-26031]"
    }, {
      "left" : "return current;",
      "right" : "return current;",
      "info" : "ReturnStatement[25632-25647]:ReturnStatement[26044-26059]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25717-25798]:Block[26129-26210]"
    }, {
      "left" : "throw new UnsupportedOperationException(\"Not supported\");",
      "right" : "throw new UnsupportedOperationException(\"Not supported\");",
      "info" : "ThrowStatement[25731-25788]:ThrowStatement[26143-26200]"
    } ]
  },
  "interFileMappings" : { }
}