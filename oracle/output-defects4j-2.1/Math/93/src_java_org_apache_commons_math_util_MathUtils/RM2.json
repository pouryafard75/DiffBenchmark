{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "MathUtils",
      "right" : "MathUtils",
      "info" : "TypeDeclaration[898-37485]:TypeDeclaration[898-37659]"
    }, {
      "left" : "public static final double EPSILON = 0x1.0p-53;",
      "right" : "public static final double EPSILON = 0x1.0p-53;",
      "info" : "FieldDeclaration[1040-1176]:FieldDeclaration[1040-1176]"
    }, {
      "left" : "public static final double SAFE_MIN = 0x1.0p-1022;",
      "right" : "public static final double SAFE_MIN = 0x1.0p-1022;",
      "info" : "FieldDeclaration[1182-1412]:FieldDeclaration[1182-1412]"
    }, {
      "left" : "private static final byte  NB = (byte)-1;",
      "right" : "private static final byte  NB = (byte)-1;",
      "info" : "FieldDeclaration[1418-1491]:FieldDeclaration[1418-1491]"
    }, {
      "left" : "private static final short NS = (short)-1;",
      "right" : "private static final short NS = (short)-1;",
      "info" : "FieldDeclaration[1497-1572]:FieldDeclaration[1497-1572]"
    }, {
      "left" : "private static final byte  PB = (byte)1;",
      "right" : "private static final byte  PB = (byte)1;",
      "info" : "FieldDeclaration[1578-1649]:FieldDeclaration[1578-1649]"
    }, {
      "left" : "private static final short PS = (short)1;",
      "right" : "private static final short PS = (short)1;",
      "info" : "FieldDeclaration[1655-1728]:FieldDeclaration[1655-1728]"
    }, {
      "left" : "private static final byte  ZB = (byte)0;",
      "right" : "private static final byte  ZB = (byte)0;",
      "info" : "FieldDeclaration[1734-1805]:FieldDeclaration[1734-1805]"
    }, {
      "left" : "private static final short ZS = (short)0;",
      "right" : "private static final short ZS = (short)0;",
      "info" : "FieldDeclaration[1811-1884]:FieldDeclaration[1811-1884]"
    }, {
      "left" : "private static final double TWO_PI = 2 * Math.PI;",
      "right" : "private static final double TWO_PI = 2 * Math.PI;",
      "info" : "FieldDeclaration[1890-1958]:FieldDeclaration[1890-1958]"
    }, {
      "left" : "private MathUtils()",
      "right" : "private MathUtils()",
      "info" : "MethodDeclaration[1964-2051]:MethodDeclaration[1964-2051]"
    }, {
      "left" : "public static int addAndCheck(int x, int y)",
      "right" : "public static int addAndCheck(int x, int y)",
      "info" : "MethodDeclaration[2057-2578]:MethodDeclaration[2057-2578]"
    }, {
      "left" : "public static long addAndCheck(long a, long b)",
      "right" : "public static long addAndCheck(long a, long b)",
      "info" : "MethodDeclaration[2584-2974]:MethodDeclaration[2584-2974]"
    }, {
      "left" : "private static long addAndCheck(long a, long b, String msg)",
      "right" : "private static long addAndCheck(long a, long b, String msg)",
      "info" : "MethodDeclaration[2984-4390]:MethodDeclaration[2984-4390]"
    }, {
      "left" : "public static long binomialCoefficient(final int n, final int k)",
      "right" : "public static long binomialCoefficient(final int n, final int k)",
      "info" : "MethodDeclaration[4400-6293]:MethodDeclaration[4400-6293]"
    }, {
      "left" : "public static double binomialCoefficientDouble(final int n, final int k)",
      "right" : "public static double binomialCoefficientDouble(final int n, final int k)",
      "info" : "MethodDeclaration[6299-7451]:MethodDeclaration[6299-7451]"
    }, {
      "left" : "public static double binomialCoefficientLog(final int n, final int k)",
      "right" : "public static double binomialCoefficientLog(final int n, final int k)",
      "info" : "MethodDeclaration[7461-8991]:MethodDeclaration[7461-8991]"
    }, {
      "left" : "public static double cosh(double x)",
      "right" : "public static double cosh(double x)",
      "info" : "MethodDeclaration[9001-9342]:MethodDeclaration[9001-9342]"
    }, {
      "left" : "public static boolean equals(double x, double y)",
      "right" : "public static boolean equals(double x, double y)",
      "info" : "MethodDeclaration[9352-9705]:MethodDeclaration[9352-9705]"
    }, {
      "left" : "public static boolean equals(double[] x, double[] y)",
      "right" : "public static boolean equals(double[] x, double[] y)",
      "info" : "MethodDeclaration[9711-10443]:MethodDeclaration[9711-10443]"
    }, {
      "left" : "private static final long[] factorials = new long[] \n       {1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880, 3628800, 39916800,\n        479001600, 6227020800l, 87178291200l, 1307674368000l, 20922789888000l,\n        355687428096000l, 6402373705728000l, 121645100408832000l,\n        2432902008176640000l};",
      "right" : "private static final long[] factorials = new long[] \n       {1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880, 3628800, 39916800,\n        479001600, 6227020800l, 87178291200l, 1307674368000l, 20922789888000l,\n        355687428096000l, 6402373705728000l, 121645100408832000l,\n        2432902008176640000l};",
      "info" : "FieldDeclaration[10453-10800]:FieldDeclaration[10453-10800]"
    }, {
      "left" : "public static long factorial(final int n)",
      "right" : "public static long factorial(final int n)",
      "info" : "MethodDeclaration[10806-12014]:MethodDeclaration[10806-12048]"
    }, {
      "left" : "public static double factorialDouble(final int n)",
      "right" : "public static double factorialDouble(final int n)",
      "info" : "MethodDeclaration[12020-13050]:MethodDeclaration[12054-13149]"
    }, {
      "left" : "public static double factorialLog(final int n)",
      "right" : "public static double factorialLog(final int n)",
      "info" : "MethodDeclaration[13056-13734]:MethodDeclaration[13155-13908]"
    }, {
      "left" : "public static int gcd(int u, int v)",
      "right" : "public static int gcd(int u, int v)",
      "info" : "MethodDeclaration[13740-15998]:MethodDeclaration[13914-16172]"
    }, {
      "left" : "public static int hash(double value)",
      "right" : "public static int hash(double value)",
      "info" : "MethodDeclaration[16004-16262]:MethodDeclaration[16178-16436]"
    }, {
      "left" : "public static int hash(double[] value)",
      "right" : "public static int hash(double[] value)",
      "info" : "MethodDeclaration[16268-16554]:MethodDeclaration[16442-16728]"
    }, {
      "left" : "public static byte indicator(final byte x)",
      "right" : "public static byte indicator(final byte x)",
      "info" : "MethodDeclaration[16560-16872]:MethodDeclaration[16734-17046]"
    }, {
      "left" : "public static double indicator(final double x)",
      "right" : "public static double indicator(final double x)",
      "info" : "MethodDeclaration[16878-17331]:MethodDeclaration[17052-17505]"
    }, {
      "left" : "public static float indicator(final float x)",
      "right" : "public static float indicator(final float x)",
      "info" : "MethodDeclaration[17337-17774]:MethodDeclaration[17511-17948]"
    }, {
      "left" : "public static int indicator(final int x)",
      "right" : "public static int indicator(final int x)",
      "info" : "MethodDeclaration[17780-18049]:MethodDeclaration[17954-18223]"
    }, {
      "left" : "public static long indicator(final long x)",
      "right" : "public static long indicator(final long x)",
      "info" : "MethodDeclaration[18055-18333]:MethodDeclaration[18229-18507]"
    }, {
      "left" : "public static short indicator(final short x)",
      "right" : "public static short indicator(final short x)",
      "info" : "MethodDeclaration[18339-18659]:MethodDeclaration[18513-18833]"
    }, {
      "left" : "public static int lcm(int a, int b)",
      "right" : "public static int lcm(int a, int b)",
      "info" : "MethodDeclaration[18665-19094]:MethodDeclaration[18839-19268]"
    }, {
      "left" : "public static double log(double base, double x)",
      "right" : "public static double log(double base, double x)",
      "info" : "MethodDeclaration[19100-19940]:MethodDeclaration[19274-20114]"
    }, {
      "left" : "public static int mulAndCheck(int x, int y)",
      "right" : "public static int mulAndCheck(int x, int y)",
      "info" : "MethodDeclaration[19946-20478]:MethodDeclaration[20120-20652]"
    }, {
      "left" : "public static long mulAndCheck(long a, long b)",
      "right" : "public static long mulAndCheck(long a, long b)",
      "info" : "MethodDeclaration[20484-22297]:MethodDeclaration[20658-22471]"
    }, {
      "left" : "public static double nextAfter(double d, double direction)",
      "right" : "public static double nextAfter(double d, double direction)",
      "info" : "MethodDeclaration[22303-24688]:MethodDeclaration[22477-24862]"
    }, {
      "left" : "public static double scalb(final double d, final int scaleFactor)",
      "right" : "public static double scalb(final double d, final int scaleFactor)",
      "info" : "MethodDeclaration[24694-25622]:MethodDeclaration[24868-25796]"
    }, {
      "left" : "public static double normalizeAngle(double a, double center)",
      "right" : "public static double normalizeAngle(double a, double center)",
      "info" : "MethodDeclaration[25628-26804]:MethodDeclaration[25802-26978]"
    }, {
      "left" : "public static double round(double x, int scale)",
      "right" : "public static double round(double x, int scale)",
      "info" : "MethodDeclaration[26810-27262]:MethodDeclaration[26984-27436]"
    }, {
      "left" : "public static double round(double x, int scale, int roundingMethod)",
      "right" : "public static double round(double x, int scale, int roundingMethod)",
      "info" : "MethodDeclaration[27268-28187]:MethodDeclaration[27442-28361]"
    }, {
      "left" : "public static float round(float x, int scale)",
      "right" : "public static float round(float x, int scale)",
      "info" : "MethodDeclaration[28193-28644]:MethodDeclaration[28367-28818]"
    }, {
      "left" : "public static float round(float x, int scale, int roundingMethod)",
      "right" : "public static float round(float x, int scale, int roundingMethod)",
      "info" : "MethodDeclaration[28650-29365]:MethodDeclaration[28824-29539]"
    }, {
      "left" : "private static double roundUnscaled(double unscaled, double sign,\n        int roundingMethod)",
      "right" : "private static double roundUnscaled(double unscaled, double sign,\n        int roundingMethod)",
      "info" : "MethodDeclaration[29371-32628]:MethodDeclaration[29545-32802]"
    }, {
      "left" : "public static byte sign(final byte x)",
      "right" : "public static byte sign(final byte x)",
      "info" : "MethodDeclaration[32634-33120]:MethodDeclaration[32808-33294]"
    }, {
      "left" : "public static double sign(final double x)",
      "right" : "public static double sign(final double x)",
      "info" : "MethodDeclaration[33126-33839]:MethodDeclaration[33300-34013]"
    }, {
      "left" : "public static float sign(final float x)",
      "right" : "public static float sign(final float x)",
      "info" : "MethodDeclaration[33845-34461]:MethodDeclaration[34019-34635]"
    }, {
      "left" : "public static int sign(final int x)",
      "right" : "public static int sign(final int x)",
      "info" : "MethodDeclaration[34467-34898]:MethodDeclaration[34641-35072]"
    }, {
      "left" : "public static long sign(final long x)",
      "right" : "public static long sign(final long x)",
      "info" : "MethodDeclaration[34904-35349]:MethodDeclaration[35078-35523]"
    }, {
      "left" : "public static short sign(final short x)",
      "right" : "public static short sign(final short x)",
      "info" : "MethodDeclaration[35355-35867]:MethodDeclaration[35529-36041]"
    }, {
      "left" : "public static double sinh(double x)",
      "right" : "public static double sinh(double x)",
      "info" : "MethodDeclaration[35873-36206]:MethodDeclaration[36047-36380]"
    }, {
      "left" : "public static int subAndCheck(int x, int y)",
      "right" : "public static int subAndCheck(int x, int y)",
      "info" : "MethodDeclaration[36212-36757]:MethodDeclaration[36386-36931]"
    }, {
      "left" : "public static long subAndCheck(long a, long b)",
      "right" : "public static long subAndCheck(long a, long b)",
      "info" : "MethodDeclaration[36763-37482]:MethodDeclaration[36937-37656]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2027-2051]:Block[2027-2051]"
    }, {
      "left" : "super();",
      "right" : "super();",
      "info" : "SuperConstructorInvocation[2037-2045]:SuperConstructorInvocation[2037-2045]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2380-2578]:Block[2380-2578]"
    }, {
      "left" : "long s = (long)x + (long)y;",
      "right" : "long s = (long)x + (long)y;",
      "info" : "VariableDeclarationStatement[2390-2417]:VariableDeclarationStatement[2390-2417]"
    }, {
      "left" : "if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE)",
      "right" : "if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE)",
      "info" : "IfStatement[2426-2549]:IfStatement[2426-2549]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2478-2549]:Block[2478-2549]"
    }, {
      "left" : "throw new ArithmeticException(\"overflow: add\");",
      "right" : "throw new ArithmeticException(\"overflow: add\");",
      "info" : "ThrowStatement[2492-2539]:ThrowStatement[2492-2539]"
    }, {
      "left" : "return (int)s;",
      "right" : "return (int)s;",
      "info" : "ReturnStatement[2558-2572]:ReturnStatement[2558-2572]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2916-2974]:Block[2916-2974]"
    }, {
      "left" : "return addAndCheck(a, b, \"overflow: add\");",
      "right" : "return addAndCheck(a, b, \"overflow: add\");",
      "info" : "ReturnStatement[2926-2968]:ReturnStatement[2926-2968]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3392-4390]:Block[3392-4390]"
    }, {
      "left" : "long ret;",
      "right" : "long ret;",
      "info" : "VariableDeclarationStatement[3402-3411]:VariableDeclarationStatement[3402-3411]"
    }, {
      "left" : "if (a > b)",
      "right" : "if (a > b)",
      "info" : "IfStatement[3420-4364]:IfStatement[3420-4364]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3431-3536]:Block[3431-3536]"
    }, {
      "left" : "ret = addAndCheck(b, a, msg);",
      "right" : "ret = addAndCheck(b, a, msg);",
      "info" : "ExpressionStatement[3497-3526]:ExpressionStatement[3497-3526]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3542-4364]:Block[3542-4364]"
    }, {
      "left" : "if (a < 0)",
      "right" : "if (a < 0)",
      "info" : "IfStatement[3598-4354]:IfStatement[3598-4354]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3609-4040]:Block[3609-4040]"
    }, {
      "left" : "if (b < 0)",
      "right" : "if (b < 0)",
      "info" : "IfStatement[3627-4026]:IfStatement[3627-4026]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3638-3907]:Block[3638-3907]"
    }, {
      "left" : "if (Long.MIN_VALUE - b <= a)",
      "right" : "if (Long.MIN_VALUE - b <= a)",
      "info" : "IfStatement[3711-3889]:IfStatement[3711-3889]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3740-3800]:Block[3740-3800]"
    }, {
      "left" : "ret = a + b;",
      "right" : "ret = a + b;",
      "info" : "ExpressionStatement[3766-3778]:ExpressionStatement[3766-3778]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3806-3889]:Block[3806-3889]"
    }, {
      "left" : "throw new ArithmeticException(msg);",
      "right" : "throw new ArithmeticException(msg);",
      "info" : "ThrowStatement[3832-3867]:ThrowStatement[3832-3867]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3913-4026]:Block[3913-4026]"
    }, {
      "left" : "ret = a + b;",
      "right" : "ret = a + b;",
      "info" : "ExpressionStatement[3996-4008]:ExpressionStatement[3996-4008]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4046-4354]:Block[4046-4354]"
    }, {
      "left" : "if (a <= Long.MAX_VALUE - b)",
      "right" : "if (a <= Long.MAX_VALUE - b)",
      "info" : "IfStatement[4178-4340]:IfStatement[4178-4340]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4207-4259]:Block[4207-4259]"
    }, {
      "left" : "ret = a + b;",
      "right" : "ret = a + b;",
      "info" : "ExpressionStatement[4229-4241]:ExpressionStatement[4229-4241]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4265-4340]:Block[4265-4340]"
    }, {
      "left" : "throw new ArithmeticException(msg);",
      "right" : "throw new ArithmeticException(msg);",
      "info" : "ThrowStatement[4287-4322]:ThrowStatement[4287-4322]"
    }, {
      "left" : "return ret;",
      "right" : "return ret;",
      "info" : "ReturnStatement[4373-4384]:ReturnStatement[4373-4384]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5600-6293]:Block[5600-6293]"
    }, {
      "left" : "if (n < k)",
      "right" : "if (n < k)",
      "info" : "IfStatement[5610-5748]:IfStatement[5610-5748]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5621-5748]:Block[5621-5748]"
    }, {
      "left" : "throw new IllegalArgumentException(\n                \"must have n >= k for binomial coefficient (n,k)\");",
      "right" : "throw new IllegalArgumentException(\n                \"must have n >= k for binomial coefficient (n,k)\");",
      "info" : "ThrowStatement[5635-5738]:ThrowStatement[5635-5738]"
    }, {
      "left" : "if (n < 0)",
      "right" : "if (n < 0)",
      "info" : "IfStatement[5757-5895]:IfStatement[5757-5895]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5768-5895]:Block[5768-5895]"
    }, {
      "left" : "throw new IllegalArgumentException(\n                \"must have n >= 0 for binomial coefficient (n,k)\");",
      "right" : "throw new IllegalArgumentException(\n                \"must have n >= 0 for binomial coefficient (n,k)\");",
      "info" : "ThrowStatement[5782-5885]:ThrowStatement[5782-5885]"
    }, {
      "left" : "if ((n == k) || (k == 0))",
      "right" : "if ((n == k) || (k == 0))",
      "info" : "IfStatement[5904-5963]:IfStatement[5904-5963]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5930-5963]:Block[5930-5963]"
    }, {
      "left" : "return 1;",
      "right" : "return 1;",
      "info" : "ReturnStatement[5944-5953]:ReturnStatement[5944-5953]"
    }, {
      "left" : "if ((k == 1) || (k == n - 1))",
      "right" : "if ((k == 1) || (k == n - 1))",
      "info" : "IfStatement[5972-6035]:IfStatement[5972-6035]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6002-6035]:Block[6002-6035]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[6016-6025]:ReturnStatement[6016-6025]"
    }, {
      "left" : "long result = Math.round(binomialCoefficientDouble(n, k));",
      "right" : "long result = Math.round(binomialCoefficientDouble(n, k));",
      "info" : "VariableDeclarationStatement[6045-6103]:VariableDeclarationStatement[6045-6103]"
    }, {
      "left" : "if (result == Long.MAX_VALUE)",
      "right" : "if (result == Long.MAX_VALUE)",
      "info" : "IfStatement[6112-6264]:IfStatement[6112-6264]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6142-6264]:Block[6142-6264]"
    }, {
      "left" : "throw new ArithmeticException(\n                \"result too large to represent in a long integer\");",
      "right" : "throw new ArithmeticException(\n                \"result too large to represent in a long integer\");",
      "info" : "ThrowStatement[6156-6254]:ThrowStatement[6156-6254]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[6273-6287]:ReturnStatement[6273-6287]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7371-7451]:Block[7371-7451]"
    }, {
      "left" : "return Math.floor(Math.exp(binomialCoefficientLog(n, k)) + 0.5);",
      "right" : "return Math.floor(Math.exp(binomialCoefficientLog(n, k)) + 0.5);",
      "info" : "ReturnStatement[7381-7445]:ReturnStatement[7381-7445]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8242-8991]:Block[8242-8991]"
    }, {
      "left" : "if (n < k)",
      "right" : "if (n < k)",
      "info" : "IfStatement[8252-8390]:IfStatement[8252-8390]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8263-8390]:Block[8263-8390]"
    }, {
      "left" : "throw new IllegalArgumentException(\n                \"must have n >= k for binomial coefficient (n,k)\");",
      "right" : "throw new IllegalArgumentException(\n                \"must have n >= k for binomial coefficient (n,k)\");",
      "info" : "ThrowStatement[8277-8380]:ThrowStatement[8277-8380]"
    }, {
      "left" : "if (n < 0)",
      "right" : "if (n < 0)",
      "info" : "IfStatement[8399-8537]:IfStatement[8399-8537]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8410-8537]:Block[8410-8537]"
    }, {
      "left" : "throw new IllegalArgumentException(\n                \"must have n >= 0 for binomial coefficient (n,k)\");",
      "right" : "throw new IllegalArgumentException(\n                \"must have n >= 0 for binomial coefficient (n,k)\");",
      "info" : "ThrowStatement[8424-8527]:ThrowStatement[8424-8527]"
    }, {
      "left" : "if ((n == k) || (k == 0))",
      "right" : "if ((n == k) || (k == 0))",
      "info" : "IfStatement[8546-8605]:IfStatement[8546-8605]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8572-8605]:Block[8572-8605]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[8586-8595]:ReturnStatement[8586-8595]"
    }, {
      "left" : "if ((k == 1) || (k == n - 1))",
      "right" : "if ((k == 1) || (k == n - 1))",
      "info" : "IfStatement[8614-8695]:IfStatement[8614-8695]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8644-8695]:Block[8644-8695]"
    }, {
      "left" : "return Math.log((double)n);",
      "right" : "return Math.log((double)n);",
      "info" : "ReturnStatement[8658-8685]:ReturnStatement[8658-8685]"
    }, {
      "left" : "double logSum = 0;",
      "right" : "double logSum = 0;",
      "info" : "VariableDeclarationStatement[8704-8722]:VariableDeclarationStatement[8704-8722]"
    }, {
      "left" : "for (int i = k + 1; i <= n; i++)",
      "right" : "for (int i = k + 1; i <= n; i++)",
      "info" : "ForStatement[8749-8836]:ForStatement[8749-8836]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8782-8836]:Block[8782-8836]"
    }, {
      "left" : "logSum += Math.log((double)i);",
      "right" : "logSum += Math.log((double)i);",
      "info" : "ExpressionStatement[8796-8826]:ExpressionStatement[8796-8826]"
    }, {
      "left" : "for (int i = 2; i <= n - k; i++)",
      "right" : "for (int i = 2; i <= n - k; i++)",
      "info" : "ForStatement[8874-8961]:ForStatement[8874-8961]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8907-8961]:Block[8907-8961]"
    }, {
      "left" : "logSum -= Math.log((double)i);",
      "right" : "logSum -= Math.log((double)i);",
      "info" : "ExpressionStatement[8921-8951]:ExpressionStatement[8921-8951]"
    }, {
      "left" : "return logSum;",
      "right" : "return logSum;",
      "info" : "ReturnStatement[8971-8985]:ReturnStatement[8971-8985]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9284-9342]:Block[9284-9342]"
    }, {
      "left" : "return (Math.exp(x) + Math.exp(-x)) / 2.0;",
      "right" : "return (Math.exp(x) + Math.exp(-x)) / 2.0;",
      "info" : "ReturnStatement[9294-9336]:ReturnStatement[9294-9336]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9633-9705]:Block[9633-9705]"
    }, {
      "left" : "return ((Double.isNaN(x) && Double.isNaN(y)) || x == y);",
      "right" : "return ((Double.isNaN(x) && Double.isNaN(y)) || x == y);",
      "info" : "ReturnStatement[9643-9699]:ReturnStatement[9643-9699]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10104-10443]:Block[10104-10443]"
    }, {
      "left" : "if ((x == null) || (y == null))",
      "right" : "if ((x == null) || (y == null))",
      "info" : "IfStatement[10114-10206]:IfStatement[10114-10206]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10146-10206]:Block[10146-10206]"
    }, {
      "left" : "return !((x == null) ^ (y == null));",
      "right" : "return !((x == null) ^ (y == null));",
      "info" : "ReturnStatement[10160-10196]:ReturnStatement[10160-10196]"
    }, {
      "left" : "if (x.length != y.length)",
      "right" : "if (x.length != y.length)",
      "info" : "IfStatement[10215-10278]:IfStatement[10215-10278]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10241-10278]:Block[10241-10278]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[10255-10268]:ReturnStatement[10255-10268]"
    }, {
      "left" : "for (int i = 0; i < x.length; ++i)",
      "right" : "for (int i = 0; i < x.length; ++i)",
      "info" : "ForStatement[10287-10416]:ForStatement[10287-10416]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10322-10416]:Block[10322-10416]"
    }, {
      "left" : "if (!equals(x[i], y[i]))",
      "right" : "if (!equals(x[i], y[i]))",
      "info" : "IfStatement[10336-10406]:IfStatement[10336-10406]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10361-10406]:Block[10361-10406]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[10379-10392]:ReturnStatement[10379-10392]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[10425-10437]:ReturnStatement[10425-10437]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11760-12014]:Block[11760-12048]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11854-11978]:Block[11888-12012]"
    }, {
      "left" : "throw new ArithmeticException(\n                    \"factorial value is too large to fit in a long\");",
      "right" : "throw new ArithmeticException(\n                    \"factorial value is too large to fit in a long\");",
      "info" : "ThrowStatement[11868-11968]:ThrowStatement[11902-12002]"
    }, {
      "left" : "return factorials[n];",
      "right" : "return factorials[n];",
      "info" : "ReturnStatement[11987-12008]:ReturnStatement[12021-12042]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12877-13050]:Block[12911-13149]"
    }, {
      "left" : "if (n < 0)",
      "right" : "if (n < 0)",
      "info" : "IfStatement[12887-12984]:IfStatement[12921-13018]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12898-12984]:Block[12932-13018]"
    }, {
      "left" : "throw new IllegalArgumentException(\"must have n >= 0 for n!\");",
      "right" : "throw new IllegalArgumentException(\"must have n >= 0 for n!\");",
      "info" : "ThrowStatement[12912-12974]:ThrowStatement[12946-13008]"
    }, {
      "left" : "return Math.floor(Math.exp(factorialLog(n)) + 0.5);",
      "right" : "return Math.floor(Math.exp(factorialLog(n)) + 0.5);",
      "info" : "ReturnStatement[12993-13044]:ReturnStatement[13092-13143]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13480-13734]:Block[13579-13908]"
    }, {
      "left" : "if (n < 0)",
      "right" : "if (n < 0)",
      "info" : "IfStatement[13490-13586]:IfStatement[13589-13685]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13501-13586]:Block[13600-13685]"
    }, {
      "left" : "throw new IllegalArgumentException(\"must have n > 0 for n!\");",
      "right" : "throw new IllegalArgumentException(\"must have n > 0 for n!\");",
      "info" : "ThrowStatement[13515-13576]:ThrowStatement[13614-13675]"
    }, {
      "left" : "double logSum = 0;",
      "right" : "double logSum = 0;",
      "info" : "VariableDeclarationStatement[13595-13613]:VariableDeclarationStatement[13769-13787]"
    }, {
      "left" : "for (int i = 2; i <= n; i++)",
      "right" : "for (int i = 2; i <= n; i++)",
      "info" : "ForStatement[13622-13705]:ForStatement[13796-13879]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13651-13705]:Block[13825-13879]"
    }, {
      "left" : "logSum += Math.log((double)i);",
      "right" : "logSum += Math.log((double)i);",
      "info" : "ExpressionStatement[13665-13695]:ExpressionStatement[13839-13869]"
    }, {
      "left" : "return logSum;",
      "right" : "return logSum;",
      "info" : "ReturnStatement[13714-13728]:ReturnStatement[13888-13902]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14212-15998]:Block[14386-16172]"
    }, {
      "left" : "if ((u == 0) || (v == 0))",
      "right" : "if ((u == 0) || (v == 0))",
      "info" : "IfStatement[14222-14307]:IfStatement[14396-14481]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14248-14307]:Block[14422-14481]"
    }, {
      "left" : "return (Math.abs(u) + Math.abs(v));",
      "right" : "return (Math.abs(u) + Math.abs(v));",
      "info" : "ReturnStatement[14262-14297]:ReturnStatement[14436-14471]"
    }, {
      "left" : "if (u > 0)",
      "right" : "if (u > 0)",
      "info" : "IfStatement[14584-14626]:IfStatement[14758-14800]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14595-14626]:Block[14769-14800]"
    }, {
      "left" : "u = -u;",
      "right" : "u = -u;",
      "info" : "ExpressionStatement[14609-14616]:ExpressionStatement[14783-14790]"
    }, {
      "left" : "if (v > 0)",
      "right" : "if (v > 0)",
      "info" : "IfStatement[14654-14696]:IfStatement[14828-14870]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14665-14696]:Block[14839-14870]"
    }, {
      "left" : "v = -v;",
      "right" : "v = -v;",
      "info" : "ExpressionStatement[14679-14686]:ExpressionStatement[14853-14860]"
    }, {
      "left" : "int k = 0;",
      "right" : "int k = 0;",
      "info" : "VariableDeclarationStatement[14757-14767]:VariableDeclarationStatement[14931-14941]"
    }, {
      "left" : "while ((u & 1) == 0 && (v & 1) == 0 && k < 31)",
      "right" : "while ((u & 1) == 0 && (v & 1) == 0 && k < 31)",
      "info" : "WhileStatement[14776-15006]:WhileStatement[14950-15180]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14823-15006]:Block[14997-15180]"
    }, {
      "left" : "u /= 2;",
      "right" : "u /= 2;",
      "info" : "ExpressionStatement[14934-14941]:ExpressionStatement[15108-15115]"
    }, {
      "left" : "v /= 2;",
      "right" : "v /= 2;",
      "info" : "ExpressionStatement[14954-14961]:ExpressionStatement[15128-15135]"
    }, {
      "left" : "k++;",
      "right" : "k++;",
      "info" : "ExpressionStatement[14974-14978]:ExpressionStatement[15148-15152]"
    }, {
      "left" : "if (k == 31)",
      "right" : "if (k == 31)",
      "info" : "IfStatement[15015-15107]:IfStatement[15189-15281]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15028-15107]:Block[15202-15281]"
    }, {
      "left" : "throw new ArithmeticException(\"overflow: gcd is 2^31\");",
      "right" : "throw new ArithmeticException(\"overflow: gcd is 2^31\");",
      "info" : "ThrowStatement[15042-15097]:ThrowStatement[15216-15271]"
    }, {
      "left" : "int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;",
      "right" : "int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;",
      "info" : "VariableDeclarationStatement[15212-15258]:VariableDeclarationStatement[15386-15432]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[15389-15946]:DoStatement[15563-16120]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15392-15930]:Block[15566-16104]"
    }, {
      "left" : "while ((t & 1) == 0)",
      "right" : "while ((t & 1) == 0)",
      "info" : "WhileStatement[15487-15585]:WhileStatement[15661-15759]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15508-15585]:Block[15682-15759]"
    }, {
      "left" : "t /= 2;",
      "right" : "t /= 2;",
      "info" : "ExpressionStatement[15547-15554]:ExpressionStatement[15721-15728]"
    }, {
      "left" : "if (t > 0)",
      "right" : "if (t > 0)",
      "info" : "IfStatement[15633-15727]:IfStatement[15807-15901]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15644-15683]:Block[15818-15857]"
    }, {
      "left" : "u = -t;",
      "right" : "u = -t;",
      "info" : "ExpressionStatement[15662-15669]:ExpressionStatement[15836-15843]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15689-15727]:Block[15863-15901]"
    }, {
      "left" : "v = t;",
      "right" : "v = t;",
      "info" : "ExpressionStatement[15707-15713]:ExpressionStatement[15881-15887]"
    }, {
      "left" : "t = (v - u) / 2;",
      "right" : "t = (v - u) / 2;",
      "info" : "ExpressionStatement[15804-15820]:ExpressionStatement[15978-15994]"
    }, {
      "left" : "return -u * (1 << k);",
      "right" : "return -u * (1 << k);",
      "info" : "ReturnStatement[15955-15976]:ReturnStatement[16129-16150]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16210-16262]:Block[16384-16436]"
    }, {
      "left" : "return new Double(value).hashCode();",
      "right" : "return new Double(value).hashCode();",
      "info" : "ReturnStatement[16220-16256]:ReturnStatement[16394-16430]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16508-16554]:Block[16682-16728]"
    }, {
      "left" : "return Arrays.hashCode(value);",
      "right" : "return Arrays.hashCode(value);",
      "info" : "ReturnStatement[16518-16548]:ReturnStatement[16692-16722]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16829-16872]:Block[17003-17046]"
    }, {
      "left" : "return (x >= ZB) ? PB : NB;",
      "right" : "return (x >= ZB) ? PB : NB;",
      "info" : "ReturnStatement[16839-16866]:ReturnStatement[17013-17040]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17212-17331]:Block[17386-17505]"
    }, {
      "left" : "if (Double.isNaN(x))",
      "right" : "if (Double.isNaN(x))",
      "info" : "IfStatement[17222-17285]:IfStatement[17396-17459]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17243-17285]:Block[17417-17459]"
    }, {
      "left" : "return Double.NaN;",
      "right" : "return Double.NaN;",
      "info" : "ReturnStatement[17257-17275]:ReturnStatement[17431-17449]"
    }, {
      "left" : "return (x >= 0.0) ? 1.0 : -1.0;",
      "right" : "return (x >= 0.0) ? 1.0 : -1.0;",
      "info" : "ReturnStatement[17294-17325]:ReturnStatement[17468-17499]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17654-17774]:Block[17828-17948]"
    }, {
      "left" : "if (Float.isNaN(x))",
      "right" : "if (Float.isNaN(x))",
      "info" : "IfStatement[17664-17725]:IfStatement[17838-17899]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17684-17725]:Block[17858-17899]"
    }, {
      "left" : "return Float.NaN;",
      "right" : "return Float.NaN;",
      "info" : "ReturnStatement[17698-17715]:ReturnStatement[17872-17889]"
    }, {
      "left" : "return (x >= 0.0F) ? 1.0F : -1.0F;",
      "right" : "return (x >= 0.0F) ? 1.0F : -1.0F;",
      "info" : "ReturnStatement[17734-17768]:ReturnStatement[17908-17942]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18008-18049]:Block[18182-18223]"
    }, {
      "left" : "return (x >= 0) ? 1 : -1;",
      "right" : "return (x >= 0) ? 1 : -1;",
      "info" : "ReturnStatement[18018-18043]:ReturnStatement[18192-18217]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18289-18333]:Block[18463-18507]"
    }, {
      "left" : "return (x >= 0L) ? 1L : -1L;",
      "right" : "return (x >= 0L) ? 1L : -1L;",
      "info" : "ReturnStatement[18299-18327]:ReturnStatement[18473-18501]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18616-18659]:Block[18790-18833]"
    }, {
      "left" : "return (x >= ZS) ? PS : NS;",
      "right" : "return (x >= ZS) ? PS : NS;",
      "info" : "ReturnStatement[18626-18653]:ReturnStatement[18800-18827]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19031-19094]:Block[19205-19268]"
    }, {
      "left" : "return Math.abs(mulAndCheck(a / gcd(a, b), b));",
      "right" : "return Math.abs(mulAndCheck(a / gcd(a, b), b));",
      "info" : "ReturnStatement[19041-19088]:ReturnStatement[19215-19262]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19890-19940]:Block[20064-20114]"
    }, {
      "left" : "return Math.log(x)/Math.log(base);",
      "right" : "return Math.log(x)/Math.log(base);",
      "info" : "ReturnStatement[19900-19934]:ReturnStatement[20074-20108]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20276-20478]:Block[20450-20652]"
    }, {
      "left" : "long m = ((long)x) * ((long)y);",
      "right" : "long m = ((long)x) * ((long)y);",
      "info" : "VariableDeclarationStatement[20286-20317]:VariableDeclarationStatement[20460-20491]"
    }, {
      "left" : "if (m < Integer.MIN_VALUE || m > Integer.MAX_VALUE)",
      "right" : "if (m < Integer.MIN_VALUE || m > Integer.MAX_VALUE)",
      "info" : "IfStatement[20326-20449]:IfStatement[20500-20623]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20378-20449]:Block[20552-20623]"
    }, {
      "left" : "throw new ArithmeticException(\"overflow: mul\");",
      "right" : "throw new ArithmeticException(\"overflow: mul\");",
      "info" : "ThrowStatement[20392-20439]:ThrowStatement[20566-20613]"
    }, {
      "left" : "return (int)m;",
      "right" : "return (int)m;",
      "info" : "ReturnStatement[20458-20472]:ReturnStatement[20632-20646]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20832-22297]:Block[21006-22471]"
    }, {
      "left" : "long ret;",
      "right" : "long ret;",
      "info" : "VariableDeclarationStatement[20842-20851]:VariableDeclarationStatement[21016-21025]"
    }, {
      "left" : "String msg = \"overflow: multiply\";",
      "right" : "String msg = \"overflow: multiply\";",
      "info" : "VariableDeclarationStatement[20860-20894]:VariableDeclarationStatement[21034-21068]"
    }, {
      "left" : "if (a > b)",
      "right" : "if (a > b)",
      "info" : "IfStatement[20903-22271]:IfStatement[21077-22445]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20914-21014]:Block[21088-21188]"
    }, {
      "left" : "ret = mulAndCheck(b, a);",
      "right" : "ret = mulAndCheck(b, a);",
      "info" : "ExpressionStatement[20980-21004]:ExpressionStatement[21154-21178]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21020-22271]:Block[21194-22445]"
    }, {
      "left" : "if (a < 0)",
      "right" : "if (a < 0)",
      "info" : "IfStatement[21034-22261]:IfStatement[21208-22435]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21045-21815]:Block[21219-21989]"
    }, {
      "left" : "if (b < 0)",
      "right" : "if (b < 0)",
      "info" : "IfStatement[21063-21801]:IfStatement[21237-21975]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21074-21371]:Block[21248-21545]"
    }, {
      "left" : "if (a >= Long.MAX_VALUE / b)",
      "right" : "if (a >= Long.MAX_VALUE / b)",
      "info" : "IfStatement[21175-21353]:IfStatement[21349-21527]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21204-21264]:Block[21378-21438]"
    }, {
      "left" : "ret = a * b;",
      "right" : "ret = a * b;",
      "info" : "ExpressionStatement[21230-21242]:ExpressionStatement[21404-21416]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21270-21353]:Block[21444-21527]"
    }, {
      "left" : "throw new ArithmeticException(msg);",
      "right" : "throw new ArithmeticException(msg);",
      "info" : "ThrowStatement[21296-21331]:ThrowStatement[21470-21505]"
    }, {
      "left" : "if (b > 0)",
      "right" : "if (b > 0)",
      "info" : "IfStatement[21377-21801]:IfStatement[21551-21975]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21388-21710]:Block[21562-21884]"
    }, {
      "left" : "if (Long.MIN_VALUE / b <= a)",
      "right" : "if (Long.MIN_VALUE / b <= a)",
      "info" : "IfStatement[21489-21692]:IfStatement[21663-21866]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21518-21578]:Block[21692-21752]"
    }, {
      "left" : "ret = a * b;",
      "right" : "ret = a * b;",
      "info" : "ExpressionStatement[21544-21556]:ExpressionStatement[21718-21730]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21584-21692]:Block[21758-21866]"
    }, {
      "left" : "throw new ArithmeticException(msg);",
      "right" : "throw new ArithmeticException(msg);",
      "info" : "ThrowStatement[21610-21645]:ThrowStatement[21784-21819]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21716-21801]:Block[21890-21975]"
    }, {
      "left" : "ret = 0;",
      "right" : "ret = 0;",
      "info" : "ExpressionStatement[21775-21783]:ExpressionStatement[21949-21957]"
    }, {
      "left" : "if (a > 0)",
      "right" : "if (a > 0)",
      "info" : "IfStatement[21821-22261]:IfStatement[21995-22435]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21832-22182]:Block[22006-22356]"
    }, {
      "left" : "if (a <= Long.MAX_VALUE / b)",
      "right" : "if (a <= Long.MAX_VALUE / b)",
      "info" : "IfStatement[22006-22168]:IfStatement[22180-22342]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22035-22087]:Block[22209-22261]"
    }, {
      "left" : "ret = a * b;",
      "right" : "ret = a * b;",
      "info" : "ExpressionStatement[22057-22069]:ExpressionStatement[22231-22243]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22093-22168]:Block[22267-22342]"
    }, {
      "left" : "throw new ArithmeticException(msg);",
      "right" : "throw new ArithmeticException(msg);",
      "info" : "ThrowStatement[22115-22150]:ThrowStatement[22289-22324]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22188-22261]:Block[22362-22435]"
    }, {
      "left" : "ret = 0;",
      "right" : "ret = 0;",
      "info" : "ExpressionStatement[22239-22247]:ExpressionStatement[22413-22421]"
    }, {
      "left" : "return ret;",
      "right" : "return ret;",
      "info" : "ReturnStatement[22280-22291]:ReturnStatement[22454-22465]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23115-24688]:Block[23289-24862]"
    }, {
      "left" : "if (Double.isNaN(d) || Double.isInfinite(d))",
      "right" : "if (Double.isNaN(d) || Double.isInfinite(d))",
      "info" : "IfStatement[23178-23368]:IfStatement[23352-23542]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23223-23260]:Block[23397-23434]"
    }, {
      "left" : "return d;",
      "right" : "return d;",
      "info" : "ReturnStatement[23241-23250]:ReturnStatement[23415-23424]"
    }, {
      "left" : "if (d == 0)",
      "right" : "if (d == 0)",
      "info" : "IfStatement[23266-23368]:IfStatement[23440-23542]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23278-23368]:Block[23452-23542]"
    }, {
      "left" : "return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;",
      "right" : "return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;",
      "info" : "ReturnStatement[23296-23358]:ReturnStatement[23470-23532]"
    }, {
      "left" : "long bits     = Double.doubleToLongBits(d);",
      "right" : "long bits     = Double.doubleToLongBits(d);",
      "info" : "VariableDeclarationStatement[23537-23580]:VariableDeclarationStatement[23711-23754]"
    }, {
      "left" : "long sign     = bits & 0x8000000000000000L;",
      "right" : "long sign     = bits & 0x8000000000000000L;",
      "info" : "VariableDeclarationStatement[23589-23632]:VariableDeclarationStatement[23763-23806]"
    }, {
      "left" : "long exponent = bits & 0x7ff0000000000000L;",
      "right" : "long exponent = bits & 0x7ff0000000000000L;",
      "info" : "VariableDeclarationStatement[23641-23684]:VariableDeclarationStatement[23815-23858]"
    }, {
      "left" : "long mantissa = bits & 0x000fffffffffffffL;",
      "right" : "long mantissa = bits & 0x000fffffffffffffL;",
      "info" : "VariableDeclarationStatement[23693-23736]:VariableDeclarationStatement[23867-23910]"
    }, {
      "left" : "if (d * (direction - d) >= 0)",
      "right" : "if (d * (direction - d) >= 0)",
      "info" : "IfStatement[23746-24681]:IfStatement[23920-24855]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23776-24203]:Block[23950-24377]"
    }, {
      "left" : "if (mantissa == 0x000fffffffffffffL)",
      "right" : "if (mantissa == 0x000fffffffffffffL)",
      "info" : "IfStatement[23845-24193]:IfStatement[24019-24367]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23882-24038]:Block[24056-24212]"
    }, {
      "left" : "return Double.longBitsToDouble(sign |\n                                        (exponent + 0x0010000000000000L));",
      "right" : "return Double.longBitsToDouble(sign |\n                                        (exponent + 0x0010000000000000L));",
      "info" : "ReturnStatement[23908-24020]:ReturnStatement[24082-24194]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24044-24193]:Block[24218-24367]"
    }, {
      "left" : "return Double.longBitsToDouble(sign |\n                                        exponent | (mantissa + 1));",
      "right" : "return Double.longBitsToDouble(sign |\n                                        exponent | (mantissa + 1));",
      "info" : "ReturnStatement[24070-24175]:ReturnStatement[24244-24349]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24209-24681]:Block[24383-24855]"
    }, {
      "left" : "if (mantissa == 0L)",
      "right" : "if (mantissa == 0L)",
      "info" : "IfStatement[24278-24671]:IfStatement[24452-24845]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24298-24516]:Block[24472-24690]"
    }, {
      "left" : "return Double.longBitsToDouble(sign |\n                                        (exponent - 0x0010000000000000L) |\n                                        0x000fffffffffffffL);",
      "right" : "return Double.longBitsToDouble(sign |\n                                        (exponent - 0x0010000000000000L) |\n                                        0x000fffffffffffffL);",
      "info" : "ReturnStatement[24324-24498]:ReturnStatement[24498-24672]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24522-24671]:Block[24696-24845]"
    }, {
      "left" : "return Double.longBitsToDouble(sign |\n                                        exponent | (mantissa - 1));",
      "right" : "return Double.longBitsToDouble(sign |\n                                        exponent | (mantissa - 1));",
      "info" : "ReturnStatement[24548-24653]:ReturnStatement[24722-24827]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25082-25622]:Block[25256-25796]"
    }, {
      "left" : "if ((d == 0) || Double.isNaN(d) || Double.isInfinite(d))",
      "right" : "if ((d == 0) || Double.isNaN(d) || Double.isInfinite(d))",
      "info" : "IfStatement[25145-25235]:IfStatement[25319-25409]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25202-25235]:Block[25376-25409]"
    }, {
      "left" : "return d;",
      "right" : "return d;",
      "info" : "ReturnStatement[25216-25225]:ReturnStatement[25390-25399]"
    }, {
      "left" : "final long bits     = Double.doubleToLongBits(d);",
      "right" : "final long bits     = Double.doubleToLongBits(d);",
      "info" : "VariableDeclarationStatement[25291-25340]:VariableDeclarationStatement[25465-25514]"
    }, {
      "left" : "final long exponent = bits & 0x7ff0000000000000L;",
      "right" : "final long exponent = bits & 0x7ff0000000000000L;",
      "info" : "VariableDeclarationStatement[25349-25398]:VariableDeclarationStatement[25523-25572]"
    }, {
      "left" : "final long rest     = bits & 0x800fffffffffffffL;",
      "right" : "final long rest     = bits & 0x800fffffffffffffL;",
      "info" : "VariableDeclarationStatement[25407-25456]:VariableDeclarationStatement[25581-25630]"
    }, {
      "left" : "final long newBits = rest | (exponent + (((long) scaleFactor) << 52));",
      "right" : "final long newBits = rest | (exponent + (((long) scaleFactor) << 52));",
      "info" : "VariableDeclarationStatement[25496-25566]:VariableDeclarationStatement[25670-25740]"
    }, {
      "left" : "return Double.longBitsToDouble(newBits);",
      "right" : "return Double.longBitsToDouble(newBits);",
      "info" : "ReturnStatement[25575-25615]:ReturnStatement[25749-25789]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26722-26804]:Block[26896-26978]"
    }, {
      "left" : "return a - TWO_PI * Math.floor((a + Math.PI - center) / TWO_PI);",
      "right" : "return a - TWO_PI * Math.floor((a + Math.PI - center) / TWO_PI);",
      "info" : "ReturnStatement[26733-26797]:ReturnStatement[26907-26971]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27197-27262]:Block[27371-27436]"
    }, {
      "left" : "return round(x, scale, BigDecimal.ROUND_HALF_UP);",
      "right" : "return round(x, scale, BigDecimal.ROUND_HALF_UP);",
      "info" : "ReturnStatement[27207-27256]:ReturnStatement[27381-27430]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27802-28187]:Block[27976-28361]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[27812-28181]:TryStatement[27986-28355]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27816-27990]:Block[27990-28164]"
    }, {
      "left" : "return (new BigDecimal\n                   (Double.toString(x))\n                   .setScale(scale, roundingMethod))\n                   .doubleValue();",
      "right" : "return (new BigDecimal\n                   (Double.toString(x))\n                   .setScale(scale, roundingMethod))\n                   .doubleValue();",
      "info" : "ReturnStatement[27830-27980]:ReturnStatement[28004-28154]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28024-28181]:Block[28198-28355]"
    }, {
      "left" : "if (Double.isInfinite(x))",
      "right" : "if (Double.isInfinite(x))",
      "info" : "IfStatement[28038-28171]:IfStatement[28212-28345]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28064-28115]:Block[28238-28289]"
    }, {
      "left" : "return x;",
      "right" : "return x;",
      "info" : "ReturnStatement[28082-28091]:ReturnStatement[28256-28265]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28121-28171]:Block[28295-28345]"
    }, {
      "left" : "return Double.NaN;",
      "right" : "return Double.NaN;",
      "info" : "ReturnStatement[28139-28157]:ReturnStatement[28313-28331]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28579-28644]:Block[28753-28818]"
    }, {
      "left" : "return round(x, scale, BigDecimal.ROUND_HALF_UP);",
      "right" : "return round(x, scale, BigDecimal.ROUND_HALF_UP);",
      "info" : "ReturnStatement[28589-28638]:ReturnStatement[28763-28812]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29182-29365]:Block[29356-29539]"
    }, {
      "left" : "float sign = indicator(x);",
      "right" : "float sign = indicator(x);",
      "info" : "VariableDeclarationStatement[29192-29218]:VariableDeclarationStatement[29366-29392]"
    }, {
      "left" : "float factor = (float)Math.pow(10.0f, scale) * sign;",
      "right" : "float factor = (float)Math.pow(10.0f, scale) * sign;",
      "info" : "VariableDeclarationStatement[29227-29279]:VariableDeclarationStatement[29401-29453]"
    }, {
      "left" : "return (float)roundUnscaled(x * factor, sign, roundingMethod) / factor;",
      "right" : "return (float)roundUnscaled(x * factor, sign, roundingMethod) / factor;",
      "info" : "ReturnStatement[29288-29359]:ReturnStatement[29462-29533]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29931-32628]:Block[30105-32802]"
    }, {
      "left" : "switch (roundingMethod) {\n        case BigDecimal.ROUND_CEILING :\n            if (sign == -1) {\n                unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));\n            } else {\n                unscaled = Math.ceil(nextAfter(unscaled, Double.POSITIVE_INFINITY));\n            }\n            break;\n        case BigDecimal.ROUND_DOWN :\n            unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));\n            break;\n        case BigDecimal.ROUND_FLOOR :\n            if (sign == -1) {\n                unscaled = Math.ceil(nextAfter(unscaled, Double.POSITIVE_INFINITY));\n            } else {\n                unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));\n            }\n            break;\n        case BigDecimal.ROUND_HALF_DOWN : {\n            unscaled = nextAfter(unscaled, Double.NEGATIVE_INFINITY);\n            double fraction = unscaled - Math.floor(unscaled);\n            if (fraction > 0.5) {\n                unscaled = Math.ceil(unscaled);\n            } else {\n                unscaled = Math.floor(unscaled);\n            }\n            break;\n        }\n        case BigDecimal.ROUND_HALF_EVEN : {\n            double fraction = unscaled - Math.floor(unscaled);\n            if (fraction > 0.5) {\n                unscaled = Math.ceil(unscaled);\n            } else if (fraction < 0.5) {\n                unscaled = Math.floor(unscaled);\n            } else {\n                // The following equality test is intentional and needed for rounding purposes\n                if (Math.floor(unscaled) / 2.0 == Math.floor(Math\n                    .floor(unscaled) / 2.0)) { // even\n                    unscaled = Math.floor(unscaled);\n                } else { // odd\n                    unscaled = Math.ceil(unscaled);\n                }\n            }\n            break;\n        }\n        case BigDecimal.ROUND_HALF_UP : {\n            unscaled = nextAfter(unscaled, Double.POSITIVE_INFINITY);\n            double fraction = unscaled - Math.floor(unscaled);\n            if (fraction >= 0.5) {\n                unscaled = Math.ceil(unscaled);\n            } else {\n                unscaled = Math.floor(unscaled);\n            }\n            break;\n        }\n        case BigDecimal.ROUND_UNNECESSARY :\n            if (unscaled != Math.floor(unscaled)) {\n                throw new ArithmeticException(\"Inexact result from rounding\");\n            }\n            break;\n        case BigDecimal.ROUND_UP :\n            unscaled = Math.ceil(nextAfter(unscaled,  Double.POSITIVE_INFINITY));\n            break;\n        default :\n            throw new IllegalArgumentException(\"Invalid rounding method.\");\n        }",
      "right" : "switch (roundingMethod) {\n        case BigDecimal.ROUND_CEILING :\n            if (sign == -1) {\n                unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));\n            } else {\n                unscaled = Math.ceil(nextAfter(unscaled, Double.POSITIVE_INFINITY));\n            }\n            break;\n        case BigDecimal.ROUND_DOWN :\n            unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));\n            break;\n        case BigDecimal.ROUND_FLOOR :\n            if (sign == -1) {\n                unscaled = Math.ceil(nextAfter(unscaled, Double.POSITIVE_INFINITY));\n            } else {\n                unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));\n            }\n            break;\n        case BigDecimal.ROUND_HALF_DOWN : {\n            unscaled = nextAfter(unscaled, Double.NEGATIVE_INFINITY);\n            double fraction = unscaled - Math.floor(unscaled);\n            if (fraction > 0.5) {\n                unscaled = Math.ceil(unscaled);\n            } else {\n                unscaled = Math.floor(unscaled);\n            }\n            break;\n        }\n        case BigDecimal.ROUND_HALF_EVEN : {\n            double fraction = unscaled - Math.floor(unscaled);\n            if (fraction > 0.5) {\n                unscaled = Math.ceil(unscaled);\n            } else if (fraction < 0.5) {\n                unscaled = Math.floor(unscaled);\n            } else {\n                // The following equality test is intentional and needed for rounding purposes\n                if (Math.floor(unscaled) / 2.0 == Math.floor(Math\n                    .floor(unscaled) / 2.0)) { // even\n                    unscaled = Math.floor(unscaled);\n                } else { // odd\n                    unscaled = Math.ceil(unscaled);\n                }\n            }\n            break;\n        }\n        case BigDecimal.ROUND_HALF_UP : {\n            unscaled = nextAfter(unscaled, Double.POSITIVE_INFINITY);\n            double fraction = unscaled - Math.floor(unscaled);\n            if (fraction >= 0.5) {\n                unscaled = Math.ceil(unscaled);\n            } else {\n                unscaled = Math.floor(unscaled);\n            }\n            break;\n        }\n        case BigDecimal.ROUND_UNNECESSARY :\n            if (unscaled != Math.floor(unscaled)) {\n                throw new ArithmeticException(\"Inexact result from rounding\");\n            }\n            break;\n        case BigDecimal.ROUND_UP :\n            unscaled = Math.ceil(nextAfter(unscaled,  Double.POSITIVE_INFINITY));\n            break;\n        default :\n            throw new IllegalArgumentException(\"Invalid rounding method.\");\n        }",
      "info" : "SwitchStatement[29941-32597]:SwitchStatement[30115-32771]"
    }, {
      "left" : "case BigDecimal.ROUND_CEILING :",
      "right" : "case BigDecimal.ROUND_CEILING :",
      "info" : "SwitchCase[29975-30006]:SwitchCase[30149-30180]"
    }, {
      "left" : "if (sign == -1)",
      "right" : "if (sign == -1)",
      "info" : "IfStatement[30019-30242]:IfStatement[30193-30416]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30035-30136]:Block[30209-30310]"
    }, {
      "left" : "unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));",
      "right" : "unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));",
      "info" : "ExpressionStatement[30053-30122]:ExpressionStatement[30227-30296]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30142-30242]:Block[30316-30416]"
    }, {
      "left" : "unscaled = Math.ceil(nextAfter(unscaled, Double.POSITIVE_INFINITY));",
      "right" : "unscaled = Math.ceil(nextAfter(unscaled, Double.POSITIVE_INFINITY));",
      "info" : "ExpressionStatement[30160-30228]:ExpressionStatement[30334-30402]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[30255-30261]:BreakStatement[30429-30435]"
    }, {
      "left" : "case BigDecimal.ROUND_DOWN :",
      "right" : "case BigDecimal.ROUND_DOWN :",
      "info" : "SwitchCase[30270-30298]:SwitchCase[30444-30472]"
    }, {
      "left" : "unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));",
      "right" : "unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));",
      "info" : "ExpressionStatement[30311-30380]:ExpressionStatement[30485-30554]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[30393-30399]:BreakStatement[30567-30573]"
    }, {
      "left" : "case BigDecimal.ROUND_FLOOR :",
      "right" : "case BigDecimal.ROUND_FLOOR :",
      "info" : "SwitchCase[30408-30437]:SwitchCase[30582-30611]"
    }, {
      "left" : "if (sign == -1)",
      "right" : "if (sign == -1)",
      "info" : "IfStatement[30450-30673]:IfStatement[30624-30847]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30466-30566]:Block[30640-30740]"
    }, {
      "left" : "unscaled = Math.ceil(nextAfter(unscaled, Double.POSITIVE_INFINITY));",
      "right" : "unscaled = Math.ceil(nextAfter(unscaled, Double.POSITIVE_INFINITY));",
      "info" : "ExpressionStatement[30484-30552]:ExpressionStatement[30658-30726]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30572-30673]:Block[30746-30847]"
    }, {
      "left" : "unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));",
      "right" : "unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));",
      "info" : "ExpressionStatement[30590-30659]:ExpressionStatement[30764-30833]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[30686-30692]:BreakStatement[30860-30866]"
    }, {
      "left" : "case BigDecimal.ROUND_HALF_DOWN :",
      "right" : "case BigDecimal.ROUND_HALF_DOWN :",
      "info" : "SwitchCase[30701-30734]:SwitchCase[30875-30908]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30735-31064]:Block[30909-31238]"
    }, {
      "left" : "unscaled = nextAfter(unscaled, Double.NEGATIVE_INFINITY);",
      "right" : "unscaled = nextAfter(unscaled, Double.NEGATIVE_INFINITY);",
      "info" : "ExpressionStatement[30749-30806]:ExpressionStatement[30923-30980]"
    }, {
      "left" : "double fraction = unscaled - Math.floor(unscaled);",
      "right" : "double fraction = unscaled - Math.floor(unscaled);",
      "info" : "VariableDeclarationStatement[30819-30869]:VariableDeclarationStatement[30993-31043]"
    }, {
      "left" : "if (fraction > 0.5)",
      "right" : "if (fraction > 0.5)",
      "info" : "IfStatement[30882-31035]:IfStatement[31056-31209]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30902-30965]:Block[31076-31139]"
    }, {
      "left" : "unscaled = Math.ceil(unscaled);",
      "right" : "unscaled = Math.ceil(unscaled);",
      "info" : "ExpressionStatement[30920-30951]:ExpressionStatement[31094-31125]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30971-31035]:Block[31145-31209]"
    }, {
      "left" : "unscaled = Math.floor(unscaled);",
      "right" : "unscaled = Math.floor(unscaled);",
      "info" : "ExpressionStatement[30989-31021]:ExpressionStatement[31163-31195]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[31048-31054]:BreakStatement[31222-31228]"
    }, {
      "left" : "case BigDecimal.ROUND_HALF_EVEN :",
      "right" : "case BigDecimal.ROUND_HALF_EVEN :",
      "info" : "SwitchCase[31073-31106]:SwitchCase[31247-31280]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31107-31778]:Block[31281-31952]"
    }, {
      "left" : "double fraction = unscaled - Math.floor(unscaled);",
      "right" : "double fraction = unscaled - Math.floor(unscaled);",
      "info" : "VariableDeclarationStatement[31121-31171]:VariableDeclarationStatement[31295-31345]"
    }, {
      "left" : "if (fraction > 0.5)",
      "right" : "if (fraction > 0.5)",
      "info" : "IfStatement[31184-31749]:IfStatement[31358-31923]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31204-31267]:Block[31378-31441]"
    }, {
      "left" : "unscaled = Math.ceil(unscaled);",
      "right" : "unscaled = Math.ceil(unscaled);",
      "info" : "ExpressionStatement[31222-31253]:ExpressionStatement[31396-31427]"
    }, {
      "left" : "if (fraction < 0.5)",
      "right" : "if (fraction < 0.5)",
      "info" : "IfStatement[31273-31749]:IfStatement[31447-31923]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31293-31357]:Block[31467-31531]"
    }, {
      "left" : "unscaled = Math.floor(unscaled);",
      "right" : "unscaled = Math.floor(unscaled);",
      "info" : "ExpressionStatement[31311-31343]:ExpressionStatement[31485-31517]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31363-31749]:Block[31537-31923]"
    }, {
      "left" : "if (Math.floor(unscaled) / 2.0 == Math.floor(Math\n                    .floor(unscaled) / 2.0))",
      "right" : "if (Math.floor(unscaled) / 2.0 == Math.floor(Math\n                    .floor(unscaled) / 2.0))",
      "info" : "IfStatement[31476-31735]:IfStatement[31650-31909]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31571-31651]:Block[31745-31825]"
    }, {
      "left" : "unscaled = Math.floor(unscaled);",
      "right" : "unscaled = Math.floor(unscaled);",
      "info" : "ExpressionStatement[31601-31633]:ExpressionStatement[31775-31807]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31657-31735]:Block[31831-31909]"
    }, {
      "left" : "unscaled = Math.ceil(unscaled);",
      "right" : "unscaled = Math.ceil(unscaled);",
      "info" : "ExpressionStatement[31686-31717]:ExpressionStatement[31860-31891]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[31762-31768]:BreakStatement[31936-31942]"
    }, {
      "left" : "case BigDecimal.ROUND_HALF_UP :",
      "right" : "case BigDecimal.ROUND_HALF_UP :",
      "info" : "SwitchCase[31787-31818]:SwitchCase[31961-31992]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31819-32149]:Block[31993-32323]"
    }, {
      "left" : "unscaled = nextAfter(unscaled, Double.POSITIVE_INFINITY);",
      "right" : "unscaled = nextAfter(unscaled, Double.POSITIVE_INFINITY);",
      "info" : "ExpressionStatement[31833-31890]:ExpressionStatement[32007-32064]"
    }, {
      "left" : "double fraction = unscaled - Math.floor(unscaled);",
      "right" : "double fraction = unscaled - Math.floor(unscaled);",
      "info" : "VariableDeclarationStatement[31903-31953]:VariableDeclarationStatement[32077-32127]"
    }, {
      "left" : "if (fraction >= 0.5)",
      "right" : "if (fraction >= 0.5)",
      "info" : "IfStatement[31966-32120]:IfStatement[32140-32294]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31987-32050]:Block[32161-32224]"
    }, {
      "left" : "unscaled = Math.ceil(unscaled);",
      "right" : "unscaled = Math.ceil(unscaled);",
      "info" : "ExpressionStatement[32005-32036]:ExpressionStatement[32179-32210]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32056-32120]:Block[32230-32294]"
    }, {
      "left" : "unscaled = Math.floor(unscaled);",
      "right" : "unscaled = Math.floor(unscaled);",
      "info" : "ExpressionStatement[32074-32106]:ExpressionStatement[32248-32280]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[32133-32139]:BreakStatement[32307-32313]"
    }, {
      "left" : "case BigDecimal.ROUND_UNNECESSARY :",
      "right" : "case BigDecimal.ROUND_UNNECESSARY :",
      "info" : "SwitchCase[32158-32193]:SwitchCase[32332-32367]"
    }, {
      "left" : "if (unscaled != Math.floor(unscaled))",
      "right" : "if (unscaled != Math.floor(unscaled))",
      "info" : "IfStatement[32206-32338]:IfStatement[32380-32512]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32244-32338]:Block[32418-32512]"
    }, {
      "left" : "throw new ArithmeticException(\"Inexact result from rounding\");",
      "right" : "throw new ArithmeticException(\"Inexact result from rounding\");",
      "info" : "ThrowStatement[32262-32324]:ThrowStatement[32436-32498]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[32351-32357]:BreakStatement[32525-32531]"
    }, {
      "left" : "case BigDecimal.ROUND_UP :",
      "right" : "case BigDecimal.ROUND_UP :",
      "info" : "SwitchCase[32366-32392]:SwitchCase[32540-32566]"
    }, {
      "left" : "unscaled = Math.ceil(nextAfter(unscaled,  Double.POSITIVE_INFINITY));",
      "right" : "unscaled = Math.ceil(nextAfter(unscaled,  Double.POSITIVE_INFINITY));",
      "info" : "ExpressionStatement[32405-32474]:ExpressionStatement[32579-32648]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[32487-32493]:BreakStatement[32661-32667]"
    }, {
      "left" : "default :",
      "right" : "default :",
      "info" : "SwitchCase[32502-32511]:SwitchCase[32676-32685]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Invalid rounding method.\");",
      "right" : "throw new IllegalArgumentException(\"Invalid rounding method.\");",
      "info" : "ThrowStatement[32524-32587]:ThrowStatement[32698-32761]"
    }, {
      "left" : "return unscaled;",
      "right" : "return unscaled;",
      "info" : "ReturnStatement[32606-32622]:ReturnStatement[32780-32796]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33061-33120]:Block[33235-33294]"
    }, {
      "left" : "return (x == ZB) ? ZB : (x > ZB) ? PB : NB;",
      "right" : "return (x == ZB) ? ZB : (x > ZB) ? PB : NB;",
      "info" : "ReturnStatement[33071-33114]:ReturnStatement[33245-33288]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33702-33839]:Block[33876-34013]"
    }, {
      "left" : "if (Double.isNaN(x))",
      "right" : "if (Double.isNaN(x))",
      "info" : "IfStatement[33712-33775]:IfStatement[33886-33949]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33733-33775]:Block[33907-33949]"
    }, {
      "left" : "return Double.NaN;",
      "right" : "return Double.NaN;",
      "info" : "ReturnStatement[33747-33765]:ReturnStatement[33921-33939]"
    }, {
      "left" : "return (x == 0.0) ? 0.0 : (x > 0.0) ? 1.0 : -1.0;",
      "right" : "return (x == 0.0) ? 0.0 : (x > 0.0) ? 1.0 : -1.0;",
      "info" : "ReturnStatement[33784-33833]:ReturnStatement[33958-34007]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34321-34461]:Block[34495-34635]"
    }, {
      "left" : "if (Float.isNaN(x))",
      "right" : "if (Float.isNaN(x))",
      "info" : "IfStatement[34331-34392]:IfStatement[34505-34566]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34351-34392]:Block[34525-34566]"
    }, {
      "left" : "return Float.NaN;",
      "right" : "return Float.NaN;",
      "info" : "ReturnStatement[34365-34382]:ReturnStatement[34539-34556]"
    }, {
      "left" : "return (x == 0.0F) ? 0.0F : (x > 0.0F) ? 1.0F : -1.0F;",
      "right" : "return (x == 0.0F) ? 0.0F : (x > 0.0F) ? 1.0F : -1.0F;",
      "info" : "ReturnStatement[34401-34455]:ReturnStatement[34575-34629]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34843-34898]:Block[35017-35072]"
    }, {
      "left" : "return (x == 0) ? 0 : (x > 0) ? 1 : -1;",
      "right" : "return (x == 0) ? 0 : (x > 0) ? 1 : -1;",
      "info" : "ReturnStatement[34853-34892]:ReturnStatement[35027-35066]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35289-35349]:Block[35463-35523]"
    }, {
      "left" : "return (x == 0L) ? 0L : (x > 0L) ? 1L : -1L;",
      "right" : "return (x == 0L) ? 0L : (x > 0L) ? 1L : -1L;",
      "info" : "ReturnStatement[35299-35343]:ReturnStatement[35473-35517]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35808-35867]:Block[35982-36041]"
    }, {
      "left" : "return (x == ZS) ? ZS : (x > ZS) ? PS : NS;",
      "right" : "return (x == ZS) ? ZS : (x > ZS) ? PS : NS;",
      "info" : "ReturnStatement[35818-35861]:ReturnStatement[35992-36035]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36148-36206]:Block[36322-36380]"
    }, {
      "left" : "return (Math.exp(x) - Math.exp(-x)) / 2.0;",
      "right" : "return (Math.exp(x) - Math.exp(-x)) / 2.0;",
      "info" : "ReturnStatement[36158-36200]:ReturnStatement[36332-36374]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36554-36757]:Block[36728-36931]"
    }, {
      "left" : "long s = (long)x - (long)y;",
      "right" : "long s = (long)x - (long)y;",
      "info" : "VariableDeclarationStatement[36564-36591]:VariableDeclarationStatement[36738-36765]"
    }, {
      "left" : "if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE)",
      "right" : "if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE)",
      "info" : "IfStatement[36600-36728]:IfStatement[36774-36902]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36652-36728]:Block[36826-36902]"
    }, {
      "left" : "throw new ArithmeticException(\"overflow: subtract\");",
      "right" : "throw new ArithmeticException(\"overflow: subtract\");",
      "info" : "ThrowStatement[36666-36718]:ThrowStatement[36840-36892]"
    }, {
      "left" : "return (int)s;",
      "right" : "return (int)s;",
      "info" : "ReturnStatement[36737-36751]:ReturnStatement[36911-36925]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37112-37482]:Block[37286-37656]"
    }, {
      "left" : "long ret;",
      "right" : "long ret;",
      "info" : "VariableDeclarationStatement[37122-37131]:VariableDeclarationStatement[37296-37305]"
    }, {
      "left" : "String msg = \"overflow: subtract\";",
      "right" : "String msg = \"overflow: subtract\";",
      "info" : "VariableDeclarationStatement[37140-37174]:VariableDeclarationStatement[37314-37348]"
    }, {
      "left" : "if (b == Long.MIN_VALUE)",
      "right" : "if (b == Long.MIN_VALUE)",
      "info" : "IfStatement[37183-37456]:IfStatement[37357-37630]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37208-37360]:Block[37382-37534]"
    }, {
      "left" : "if (a < 0)",
      "right" : "if (a < 0)",
      "info" : "IfStatement[37222-37350]:IfStatement[37396-37524]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37233-37277]:Block[37407-37451]"
    }, {
      "left" : "ret = a - b;",
      "right" : "ret = a - b;",
      "info" : "ExpressionStatement[37251-37263]:ExpressionStatement[37425-37437]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37283-37350]:Block[37457-37524]"
    }, {
      "left" : "throw new ArithmeticException(msg);",
      "right" : "throw new ArithmeticException(msg);",
      "info" : "ThrowStatement[37301-37336]:ThrowStatement[37475-37510]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37366-37456]:Block[37540-37630]"
    }, {
      "left" : "ret = addAndCheck(a, -b, msg);",
      "right" : "ret = addAndCheck(a, -b, msg);",
      "info" : "ExpressionStatement[37416-37446]:ExpressionStatement[37590-37620]"
    }, {
      "left" : "return ret;",
      "right" : "return ret;",
      "info" : "ReturnStatement[37465-37476]:ReturnStatement[37639-37650]"
    } ]
  },
  "interFileMappings" : { }
}