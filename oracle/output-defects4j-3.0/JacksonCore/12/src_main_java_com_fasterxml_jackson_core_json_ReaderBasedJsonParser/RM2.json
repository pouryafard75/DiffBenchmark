{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "ReaderBasedJsonParser",
      "right" : "ReaderBasedJsonParser",
      "info" : "TypeDeclaration[409-94014]:TypeDeclaration[409-94348]"
    }, {
      "left" : "protected final static int[] _icLatin1 = CharTypes.getInputCodeLatin1();",
      "right" : "protected final static int[] _icLatin1 = CharTypes.getInputCodeLatin1();",
      "info" : "FieldDeclaration[801-873]:FieldDeclaration[801-873]"
    }, {
      "left" : "protected Reader _reader;",
      "right" : "protected Reader _reader;",
      "info" : "FieldDeclaration[1050-1256]:FieldDeclaration[1050-1256]"
    }, {
      "left" : "protected char[] _inputBuffer;",
      "right" : "protected char[] _inputBuffer;",
      "info" : "FieldDeclaration[1262-1416]:FieldDeclaration[1262-1416]"
    }, {
      "left" : "protected boolean _bufferRecyclable;",
      "right" : "protected boolean _bufferRecyclable;",
      "info" : "FieldDeclaration[1422-1708]:FieldDeclaration[1422-1708]"
    }, {
      "left" : "protected ObjectCodec _objectCodec;",
      "right" : "protected ObjectCodec _objectCodec;",
      "info" : "FieldDeclaration[1879-1914]:FieldDeclaration[1879-1914]"
    }, {
      "left" : "final protected CharsToNameCanonicalizer _symbols;",
      "right" : "final protected CharsToNameCanonicalizer _symbols;",
      "info" : "FieldDeclaration[1920-1970]:FieldDeclaration[1920-1970]"
    }, {
      "left" : "final protected int _hashSeed;",
      "right" : "final protected int _hashSeed;",
      "info" : "FieldDeclaration[1976-2006]:FieldDeclaration[1976-2006]"
    }, {
      "left" : "protected boolean _tokenIncomplete = false;",
      "right" : "protected boolean _tokenIncomplete = false;",
      "info" : "FieldDeclaration[2177-2413]:FieldDeclaration[2177-2413]"
    }, {
      "left" : "protected long _nameInputTotal;",
      "right" : "protected long _nameInputTotal;",
      "info" : "FieldDeclaration[2419-2484]:FieldDeclaration[2419-2484]"
    }, {
      "left" : "protected int _nameInputRow;",
      "right" : "protected int _nameInputRow;",
      "info" : "FieldDeclaration[2491-2553]:FieldDeclaration[2491-2553]"
    }, {
      "left" : "protected int _nameInputCol;",
      "right" : "protected int _nameInputCol;",
      "info" : "FieldDeclaration[2559-2621]:FieldDeclaration[2559-2621]"
    }, {
      "left" : "public ReaderBasedJsonParser(IOContext ctxt, int features, Reader r,\n            ObjectCodec codec, CharsToNameCanonicalizer st,\n            char[] inputBuffer, int start, int end,\n            boolean bufferRecyclable)",
      "right" : "public ReaderBasedJsonParser(IOContext ctxt, int features, Reader r,\n            ObjectCodec codec, CharsToNameCanonicalizer st,\n            char[] inputBuffer, int start, int end,\n            boolean bufferRecyclable)",
      "info" : "MethodDeclaration[2789-3480]:MethodDeclaration[2789-3480]"
    }, {
      "left" : "public ReaderBasedJsonParser(IOContext ctxt, int features, Reader r,\n        ObjectCodec codec, CharsToNameCanonicalizer st)",
      "right" : "public ReaderBasedJsonParser(IOContext ctxt, int features, Reader r,\n        ObjectCodec codec, CharsToNameCanonicalizer st)",
      "info" : "MethodDeclaration[3486-4039]:MethodDeclaration[3486-4039]"
    }, {
      "left" : "public ObjectCodec getCodec()",
      "right" : "public ObjectCodec getCodec()",
      "info" : "MethodDeclaration[4224-4288]:MethodDeclaration[4224-4288]"
    }, {
      "left" : "public void setCodec(ObjectCodec c)",
      "right" : "public void setCodec(ObjectCodec c)",
      "info" : "MethodDeclaration[4293-4360]:MethodDeclaration[4293-4360]"
    }, {
      "left" : "public int releaseBuffered(Writer w) throws IOException",
      "right" : "public int releaseBuffered(Writer w) throws IOException",
      "info" : "MethodDeclaration[4366-4666]:MethodDeclaration[4366-4666]"
    }, {
      "left" : "public Object getInputSource()",
      "right" : "public Object getInputSource()",
      "info" : "MethodDeclaration[4672-4732]:MethodDeclaration[4672-4732]"
    }, {
      "left" : "protected boolean loadMore() throws IOException",
      "right" : "protected boolean loadMore() throws IOException",
      "info" : "MethodDeclaration[4738-5425]:MethodDeclaration[4738-5425]"
    }, {
      "left" : "protected char getNextChar(String eofMsg) throws IOException",
      "right" : "protected char getNextChar(String eofMsg) throws IOException",
      "info" : "MethodDeclaration[5431-5649]:MethodDeclaration[5431-5649]"
    }, {
      "left" : "protected void _closeInput() throws IOException",
      "right" : "protected void _closeInput() throws IOException",
      "info" : "MethodDeclaration[5655-6316]:MethodDeclaration[5655-6316]"
    }, {
      "left" : "protected void _releaseBuffers() throws IOException",
      "right" : "protected void _releaseBuffers() throws IOException",
      "info" : "MethodDeclaration[6322-7021]:MethodDeclaration[6322-7021]"
    }, {
      "left" : "public final String getText() throws IOException",
      "right" : "public final String getText() throws IOException",
      "info" : "MethodDeclaration[7202-7861]:MethodDeclaration[7202-7861]"
    }, {
      "left" : "public final String getValueAsString() throws IOException",
      "right" : "public final String getValueAsString() throws IOException",
      "info" : "MethodDeclaration[7953-8450]:MethodDeclaration[7953-8450]"
    }, {
      "left" : "public final String getValueAsString(String defValue) throws IOException",
      "right" : "public final String getValueAsString(String defValue) throws IOException",
      "info" : "MethodDeclaration[8474-8986]:MethodDeclaration[8474-8986]"
    }, {
      "left" : "protected final String _getText2(JsonToken t)",
      "right" : "protected final String _getText2(JsonToken t)",
      "info" : "MethodDeclaration[8992-9434]:MethodDeclaration[8992-9434]"
    }, {
      "left" : "public final char[] getTextCharacters() throws IOException",
      "right" : "public final char[] getTextCharacters() throws IOException",
      "info" : "MethodDeclaration[9440-10734]:MethodDeclaration[9440-10734]"
    }, {
      "left" : "public final int getTextLength() throws IOException",
      "right" : "public final int getTextLength() throws IOException",
      "info" : "MethodDeclaration[10740-11486]:MethodDeclaration[10740-11486]"
    }, {
      "left" : "public final int getTextOffset() throws IOException",
      "right" : "public final int getTextOffset() throws IOException",
      "info" : "MethodDeclaration[11492-12183]:MethodDeclaration[11492-12183]"
    }, {
      "left" : "public byte[] getBinaryValue(Base64Variant b64variant) throws IOException",
      "right" : "public byte[] getBinaryValue(Base64Variant b64variant) throws IOException",
      "info" : "MethodDeclaration[12189-13521]:MethodDeclaration[12189-13521]"
    }, {
      "left" : "public int readBinaryValue(Base64Variant b64variant, OutputStream out) throws IOException",
      "right" : "public int readBinaryValue(Base64Variant b64variant, OutputStream out) throws IOException",
      "info" : "MethodDeclaration[13527-14161]:MethodDeclaration[13527-14161]"
    }, {
      "left" : "protected int _readBinary(Base64Variant b64variant, OutputStream out, byte[] buffer) throws IOException",
      "right" : "protected int _readBinary(Base64Variant b64variant, OutputStream out, byte[] buffer) throws IOException",
      "info" : "MethodDeclaration[14167-19303]:MethodDeclaration[14167-19303]"
    }, {
      "left" : "public final JsonToken nextToken() throws IOException",
      "right" : "public final JsonToken nextToken() throws IOException",
      "info" : "MethodDeclaration[19482-23843]:MethodDeclaration[19482-23878]"
    }, {
      "left" : "private final JsonToken _nextAfterName()",
      "right" : "private final JsonToken _nextAfterName()",
      "info" : "MethodDeclaration[23849-24516]:MethodDeclaration[23884-24551]"
    }, {
      "left" : "public boolean nextFieldName(SerializableString sstr) throws IOException",
      "right" : "public boolean nextFieldName(SerializableString sstr) throws IOException",
      "info" : "MethodDeclaration[24734-27349]:MethodDeclaration[24769-27419]"
    }, {
      "left" : "public String nextFieldName() throws IOException",
      "right" : "public String nextFieldName() throws IOException",
      "info" : "MethodDeclaration[27355-30106]:MethodDeclaration[27425-30238]"
    }, {
      "left" : "private final void _isNextTokenNameYes(int i) throws IOException",
      "right" : "private final void _isNextTokenNameYes(int i) throws IOException",
      "info" : "MethodDeclaration[30112-31293]:MethodDeclaration[30244-31452]"
    }, {
      "left" : "protected boolean _isNextTokenNameMaybe(int i, String nameToMatch) throws IOException",
      "right" : "protected boolean _isNextTokenNameMaybe(int i, String nameToMatch) throws IOException",
      "info" : "MethodDeclaration[31299-32820]:MethodDeclaration[31458-33006]"
    }, {
      "left" : "private final JsonToken _nextTokenNotInObject(int i) throws IOException",
      "right" : "private final JsonToken _nextTokenNotInObject(int i) throws IOException",
      "info" : "MethodDeclaration[32826-34344]:MethodDeclaration[33012-34530]"
    }, {
      "left" : "public final String nextTextValue() throws IOException",
      "right" : "public final String nextTextValue() throws IOException",
      "info" : "MethodDeclaration[34404-35447]:MethodDeclaration[34590-35633]"
    }, {
      "left" : "public final int nextIntValue(int defaultValue) throws IOException",
      "right" : "public final int nextIntValue(int defaultValue) throws IOException",
      "info" : "MethodDeclaration[35503-36389]:MethodDeclaration[35689-36575]"
    }, {
      "left" : "public final long nextLongValue(long defaultValue) throws IOException",
      "right" : "public final long nextLongValue(long defaultValue) throws IOException",
      "info" : "MethodDeclaration[36445-37375]:MethodDeclaration[36631-37561]"
    }, {
      "left" : "public final Boolean nextBooleanValue() throws IOException",
      "right" : "public final Boolean nextBooleanValue() throws IOException",
      "info" : "MethodDeclaration[37435-38522]:MethodDeclaration[37621-38708]"
    }, {
      "left" : "protected final JsonToken _parsePosNumber(int ch) throws IOException",
      "right" : "protected final JsonToken _parsePosNumber(int ch) throws IOException",
      "info" : "MethodDeclaration[38712-41466]:MethodDeclaration[38898-41652]"
    }, {
      "left" : "private final JsonToken _parseFloat(int ch, int startPtr, int ptr, boolean neg, int intLen)\n        throws IOException",
      "right" : "private final JsonToken _parseFloat(int ch, int startPtr, int ptr, boolean neg, int intLen)\n        throws IOException",
      "info" : "MethodDeclaration[41472-43854]:MethodDeclaration[41658-44040]"
    }, {
      "left" : "protected final JsonToken _parseNegNumber() throws IOException",
      "right" : "protected final JsonToken _parseNegNumber() throws IOException",
      "info" : "MethodDeclaration[43860-45371]:MethodDeclaration[44046-45557]"
    }, {
      "left" : "private final JsonToken _parseNumber2(boolean neg, int startPtr) throws IOException",
      "right" : "private final JsonToken _parseNumber2(boolean neg, int startPtr) throws IOException",
      "info" : "MethodDeclaration[45377-50028]:MethodDeclaration[45563-50214]"
    }, {
      "left" : "private final char _verifyNoLeadingZeroes() throws IOException",
      "right" : "private final char _verifyNoLeadingZeroes() throws IOException",
      "info" : "MethodDeclaration[50034-50600]:MethodDeclaration[50220-50786]"
    }, {
      "left" : "private char _verifyNLZ2() throws IOException",
      "right" : "private char _verifyNLZ2() throws IOException",
      "info" : "MethodDeclaration[50606-51636]:MethodDeclaration[50792-51822]"
    }, {
      "left" : "protected JsonToken _handleInvalidNumberStart(int ch, boolean negative) throws IOException",
      "right" : "protected JsonToken _handleInvalidNumberStart(int ch, boolean negative) throws IOException",
      "info" : "MethodDeclaration[51642-53122]:MethodDeclaration[51828-53308]"
    }, {
      "left" : "private final void _verifyRootSpace(int ch) throws IOException",
      "right" : "private final void _verifyRootSpace(int ch) throws IOException",
      "info" : "MethodDeclaration[53128-53825]:MethodDeclaration[53314-54011]"
    }, {
      "left" : "protected final String _parseName() throws IOException",
      "right" : "protected final String _parseName() throws IOException",
      "info" : "MethodDeclaration[54018-54955]:MethodDeclaration[54204-55141]"
    }, {
      "left" : "private String _parseName2(int startPtr, int hash, int endChar) throws IOException",
      "right" : "private String _parseName2(int startPtr, int hash, int endChar) throws IOException",
      "info" : "MethodDeclaration[54961-56976]:MethodDeclaration[55147-57162]"
    }, {
      "left" : "protected String _handleOddName(int i) throws IOException",
      "right" : "protected String _handleOddName(int i) throws IOException",
      "info" : "MethodDeclaration[56982-59330]:MethodDeclaration[57168-59516]"
    }, {
      "left" : "protected String _parseAposName() throws IOException",
      "right" : "protected String _parseAposName() throws IOException",
      "info" : "MethodDeclaration[59336-60319]:MethodDeclaration[59522-60505]"
    }, {
      "left" : "protected JsonToken _handleOddValue(int i) throws IOException",
      "right" : "protected JsonToken _handleOddValue(int i) throws IOException",
      "info" : "MethodDeclaration[60325-62527]:MethodDeclaration[60511-62713]"
    }, {
      "left" : "protected JsonToken _handleApos() throws IOException",
      "right" : "protected JsonToken _handleApos() throws IOException",
      "info" : "MethodDeclaration[62533-63996]:MethodDeclaration[62719-64182]"
    }, {
      "left" : "private String _handleOddName2(int startPtr, int hash, int[] codes) throws IOException",
      "right" : "private String _handleOddName2(int startPtr, int hash, int[] codes) throws IOException",
      "info" : "MethodDeclaration[64002-65487]:MethodDeclaration[64188-65673]"
    }, {
      "left" : "protected final void _finishString() throws IOException",
      "right" : "protected final void _finishString() throws IOException",
      "info" : "MethodDeclaration[65493-66682]:MethodDeclaration[65679-66868]"
    }, {
      "left" : "protected void _finishString2() throws IOException",
      "right" : "protected void _finishString2() throws IOException",
      "info" : "MethodDeclaration[66688-68148]:MethodDeclaration[66874-68334]"
    }, {
      "left" : "protected final void _skipString() throws IOException",
      "right" : "protected final void _skipString() throws IOException",
      "info" : "MethodDeclaration[68154-69802]:MethodDeclaration[68340-69988]"
    }, {
      "left" : "protected final void _skipCR() throws IOException",
      "right" : "protected final void _skipCR() throws IOException",
      "info" : "MethodDeclaration[69991-70386]:MethodDeclaration[70177-70572]"
    }, {
      "left" : "private final int _skipColon() throws IOException",
      "right" : "private final int _skipColon() throws IOException",
      "info" : "MethodDeclaration[70392-72199]:MethodDeclaration[70578-72385]"
    }, {
      "left" : "private final int _skipColon2(boolean gotColon) throws IOException",
      "right" : "private final int _skipColon2(boolean gotColon) throws IOException",
      "info" : "MethodDeclaration[72205-73546]:MethodDeclaration[72391-73732]"
    }, {
      "left" : "private final int _skipColonFast(int ptr) throws IOException",
      "right" : "private final int _skipColonFast(int ptr) throws IOException",
      "info" : "MethodDeclaration[73627-75240]:MethodDeclaration[73813-75426]"
    }, {
      "left" : "private final int _skipComma(int i) throws IOException",
      "right" : "private final int _skipComma(int i) throws IOException",
      "info" : "MethodDeclaration[75298-76227]:MethodDeclaration[75484-76413]"
    }, {
      "left" : "private final int _skipAfterComma2() throws IOException",
      "right" : "private final int _skipAfterComma2() throws IOException",
      "info" : "MethodDeclaration[76233-77232]:MethodDeclaration[76419-77418]"
    }, {
      "left" : "private final int _skipWSOrEnd() throws IOException",
      "right" : "private final int _skipWSOrEnd() throws IOException",
      "info" : "MethodDeclaration[77238-78838]:MethodDeclaration[77424-79024]"
    }, {
      "left" : "private int _skipWSOrEnd2() throws IOException",
      "right" : "private int _skipWSOrEnd2() throws IOException",
      "info" : "MethodDeclaration[78844-79862]:MethodDeclaration[79030-80048]"
    }, {
      "left" : "private void _skipComment() throws IOException",
      "right" : "private void _skipComment() throws IOException",
      "info" : "MethodDeclaration[79868-80574]:MethodDeclaration[80054-80760]"
    }, {
      "left" : "private void _skipCComment() throws IOException",
      "right" : "private void _skipCComment() throws IOException",
      "info" : "MethodDeclaration[80580-81633]:MethodDeclaration[80766-81819]"
    }, {
      "left" : "private boolean _skipYAMLComment() throws IOException",
      "right" : "private boolean _skipYAMLComment() throws IOException",
      "info" : "MethodDeclaration[81639-81837]:MethodDeclaration[81825-82023]"
    }, {
      "left" : "private void _skipLine() throws IOException",
      "right" : "private void _skipLine() throws IOException",
      "info" : "MethodDeclaration[81843-82463]:MethodDeclaration[82029-82649]"
    }, {
      "left" : "protected char _decodeEscaped() throws IOException",
      "right" : "protected char _decodeEscaped() throws IOException",
      "info" : "MethodDeclaration[82469-83935]:MethodDeclaration[82655-84121]"
    }, {
      "left" : "private final void _matchTrue() throws IOException",
      "right" : "private final void _matchTrue() throws IOException",
      "info" : "MethodDeclaration[83941-84482]:MethodDeclaration[84127-84668]"
    }, {
      "left" : "private final void _matchFalse() throws IOException",
      "right" : "private final void _matchFalse() throws IOException",
      "info" : "MethodDeclaration[84488-85050]:MethodDeclaration[84674-85236]"
    }, {
      "left" : "private final void _matchNull() throws IOException",
      "right" : "private final void _matchNull() throws IOException",
      "info" : "MethodDeclaration[85056-85597]:MethodDeclaration[85242-85783]"
    }, {
      "left" : "protected final void _matchToken(String matchStr, int i) throws IOException",
      "right" : "protected final void _matchToken(String matchStr, int i) throws IOException",
      "info" : "MethodDeclaration[85603-86725]:MethodDeclaration[85789-86911]"
    }, {
      "left" : "protected byte[] _decodeBase64(Base64Variant b64variant) throws IOException",
      "right" : "protected byte[] _decodeBase64(Base64Variant b64variant) throws IOException",
      "info" : "MethodDeclaration[86896-91630]:MethodDeclaration[87082-91816]"
    }, {
      "left" : "public JsonLocation getTokenLocation()",
      "right" : "public JsonLocation getTokenLocation()",
      "info" : "MethodDeclaration[91843-92123]:MethodDeclaration[92029-92457]"
    }, {
      "left" : "public JsonLocation getCurrentLocation()",
      "right" : "public JsonLocation getCurrentLocation()",
      "info" : "MethodDeclaration[92129-92412]:MethodDeclaration[92463-92746]"
    }, {
      "left" : "private final void _updateLocation()",
      "right" : "private final void _updateLocation()",
      "info" : "MethodDeclaration[92440-92653]:MethodDeclaration[92774-92987]"
    }, {
      "left" : "private final void _updateNameLocation()",
      "right" : "private final void _updateNameLocation()",
      "info" : "MethodDeclaration[92677-92891]:MethodDeclaration[93011-93225]"
    }, {
      "left" : "protected void _reportInvalidToken(String matchedPart) throws IOException",
      "right" : "protected void _reportInvalidToken(String matchedPart) throws IOException",
      "info" : "MethodDeclaration[93064-93221]:MethodDeclaration[93398-93555]"
    }, {
      "left" : "protected void _reportInvalidToken(String matchedPart, String msg) throws IOException",
      "right" : "protected void _reportInvalidToken(String matchedPart, String msg) throws IOException",
      "info" : "MethodDeclaration[93227-94012]:MethodDeclaration[93561-94346]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[574-580]:Modifier[574-580]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[581-586]:TYPE_DECLARATION_KIND[581-586]"
    }, {
      "left" : "ReaderBasedJsonParser",
      "right" : "ReaderBasedJsonParser",
      "info" : "SimpleName[587-608]:SimpleName[587-608]"
    }, {
      "left" : "ParserBase",
      "right" : "ParserBase",
      "info" : "SimpleType[646-656]:SimpleType[646-656]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2976-2982]:Modifier[2976-2982]"
    }, {
      "left" : "ReaderBasedJsonParser",
      "right" : "ReaderBasedJsonParser",
      "info" : "SimpleName[2983-3004]:SimpleName[2983-3004]"
    }, {
      "left" : "IOContext ctxt",
      "right" : "IOContext ctxt",
      "info" : "SingleVariableDeclaration[3005-3019]:SingleVariableDeclaration[3005-3019]"
    }, {
      "left" : "int features",
      "right" : "int features",
      "info" : "SingleVariableDeclaration[3021-3033]:SingleVariableDeclaration[3021-3033]"
    }, {
      "left" : "Reader r",
      "right" : "Reader r",
      "info" : "SingleVariableDeclaration[3035-3043]:SingleVariableDeclaration[3035-3043]"
    }, {
      "left" : "ObjectCodec codec",
      "right" : "ObjectCodec codec",
      "info" : "SingleVariableDeclaration[3057-3074]:SingleVariableDeclaration[3057-3074]"
    }, {
      "left" : "CharsToNameCanonicalizer st",
      "right" : "CharsToNameCanonicalizer st",
      "info" : "SingleVariableDeclaration[3076-3103]:SingleVariableDeclaration[3076-3103]"
    }, {
      "left" : "char[] inputBuffer",
      "right" : "char[] inputBuffer",
      "info" : "SingleVariableDeclaration[3117-3135]:SingleVariableDeclaration[3117-3135]"
    }, {
      "left" : "int start",
      "right" : "int start",
      "info" : "SingleVariableDeclaration[3137-3146]:SingleVariableDeclaration[3137-3146]"
    }, {
      "left" : "int end",
      "right" : "int end",
      "info" : "SingleVariableDeclaration[3148-3155]:SingleVariableDeclaration[3148-3155]"
    }, {
      "left" : "boolean bufferRecyclable",
      "right" : "boolean bufferRecyclable",
      "info" : "SingleVariableDeclaration[3169-3193]:SingleVariableDeclaration[3169-3193]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3199-3480]:Block[3199-3480]"
    }, {
      "left" : "super(ctxt, features);",
      "right" : "super(ctxt, features);",
      "info" : "SuperConstructorInvocation[3209-3231]:SuperConstructorInvocation[3209-3231]"
    }, {
      "left" : "_reader = r;",
      "right" : "_reader = r;",
      "info" : "ExpressionStatement[3240-3252]:ExpressionStatement[3240-3252]"
    }, {
      "left" : "_inputBuffer = inputBuffer;",
      "right" : "_inputBuffer = inputBuffer;",
      "info" : "ExpressionStatement[3261-3288]:ExpressionStatement[3261-3288]"
    }, {
      "left" : "_inputPtr = start;",
      "right" : "_inputPtr = start;",
      "info" : "ExpressionStatement[3297-3315]:ExpressionStatement[3297-3315]"
    }, {
      "left" : "_inputEnd = end;",
      "right" : "_inputEnd = end;",
      "info" : "ExpressionStatement[3324-3340]:ExpressionStatement[3324-3340]"
    }, {
      "left" : "_objectCodec = codec;",
      "right" : "_objectCodec = codec;",
      "info" : "ExpressionStatement[3349-3370]:ExpressionStatement[3349-3370]"
    }, {
      "left" : "_symbols = st;",
      "right" : "_symbols = st;",
      "info" : "ExpressionStatement[3379-3393]:ExpressionStatement[3379-3393]"
    }, {
      "left" : "_hashSeed = st.hashSeed();",
      "right" : "_hashSeed = st.hashSeed();",
      "info" : "ExpressionStatement[3402-3428]:ExpressionStatement[3402-3428]"
    }, {
      "left" : "_bufferRecyclable = bufferRecyclable;",
      "right" : "_bufferRecyclable = bufferRecyclable;",
      "info" : "ExpressionStatement[3437-3474]:ExpressionStatement[3437-3474]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3635-3641]:Modifier[3635-3641]"
    }, {
      "left" : "ReaderBasedJsonParser",
      "right" : "ReaderBasedJsonParser",
      "info" : "SimpleName[3642-3663]:SimpleName[3642-3663]"
    }, {
      "left" : "IOContext ctxt",
      "right" : "IOContext ctxt",
      "info" : "SingleVariableDeclaration[3664-3678]:SingleVariableDeclaration[3664-3678]"
    }, {
      "left" : "int features",
      "right" : "int features",
      "info" : "SingleVariableDeclaration[3680-3692]:SingleVariableDeclaration[3680-3692]"
    }, {
      "left" : "Reader r",
      "right" : "Reader r",
      "info" : "SingleVariableDeclaration[3694-3702]:SingleVariableDeclaration[3694-3702]"
    }, {
      "left" : "ObjectCodec codec",
      "right" : "ObjectCodec codec",
      "info" : "SingleVariableDeclaration[3712-3729]:SingleVariableDeclaration[3712-3729]"
    }, {
      "left" : "CharsToNameCanonicalizer st",
      "right" : "CharsToNameCanonicalizer st",
      "info" : "SingleVariableDeclaration[3731-3758]:SingleVariableDeclaration[3731-3758]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3764-4039]:Block[3764-4039]"
    }, {
      "left" : "super(ctxt, features);",
      "right" : "super(ctxt, features);",
      "info" : "SuperConstructorInvocation[3774-3796]:SuperConstructorInvocation[3774-3796]"
    }, {
      "left" : "_reader = r;",
      "right" : "_reader = r;",
      "info" : "ExpressionStatement[3805-3817]:ExpressionStatement[3805-3817]"
    }, {
      "left" : "_inputBuffer = ctxt.allocTokenBuffer();",
      "right" : "_inputBuffer = ctxt.allocTokenBuffer();",
      "info" : "ExpressionStatement[3826-3865]:ExpressionStatement[3826-3865]"
    }, {
      "left" : "_inputPtr = 0;",
      "right" : "_inputPtr = 0;",
      "info" : "ExpressionStatement[3874-3888]:ExpressionStatement[3874-3888]"
    }, {
      "left" : "_inputEnd = 0;",
      "right" : "_inputEnd = 0;",
      "info" : "ExpressionStatement[3897-3911]:ExpressionStatement[3897-3911]"
    }, {
      "left" : "_objectCodec = codec;",
      "right" : "_objectCodec = codec;",
      "info" : "ExpressionStatement[3920-3941]:ExpressionStatement[3920-3941]"
    }, {
      "left" : "_symbols = st;",
      "right" : "_symbols = st;",
      "info" : "ExpressionStatement[3950-3964]:ExpressionStatement[3950-3964]"
    }, {
      "left" : "_hashSeed = st.hashSeed();",
      "right" : "_hashSeed = st.hashSeed();",
      "info" : "ExpressionStatement[3973-3999]:ExpressionStatement[3973-3999]"
    }, {
      "left" : "_bufferRecyclable = true;",
      "right" : "_bufferRecyclable = true;",
      "info" : "ExpressionStatement[4008-4033]:ExpressionStatement[4008-4033]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[4224-4233]:MarkerAnnotation[4224-4233]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4234-4240]:Modifier[4234-4240]"
    }, {
      "left" : "ObjectCodec",
      "right" : "ObjectCodec",
      "info" : "SimpleType[4241-4252]:SimpleType[4241-4252]"
    }, {
      "left" : "getCodec",
      "right" : "getCodec",
      "info" : "SimpleName[4253-4261]:SimpleName[4253-4261]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4264-4288]:Block[4264-4288]"
    }, {
      "left" : "return _objectCodec;",
      "right" : "return _objectCodec;",
      "info" : "ReturnStatement[4266-4286]:ReturnStatement[4266-4286]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[4293-4302]:MarkerAnnotation[4293-4302]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4303-4309]:Modifier[4303-4309]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[4310-4314]:PrimitiveType[4310-4314]"
    }, {
      "left" : "setCodec",
      "right" : "setCodec",
      "info" : "SimpleName[4315-4323]:SimpleName[4315-4323]"
    }, {
      "left" : "ObjectCodec c",
      "right" : "ObjectCodec c",
      "info" : "SingleVariableDeclaration[4324-4337]:SingleVariableDeclaration[4324-4337]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4339-4360]:Block[4339-4360]"
    }, {
      "left" : "_objectCodec = c;",
      "right" : "_objectCodec = c;",
      "info" : "ExpressionStatement[4341-4358]:ExpressionStatement[4341-4358]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[4366-4375]:MarkerAnnotation[4366-4375]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4380-4386]:Modifier[4380-4386]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[4387-4390]:PrimitiveType[4387-4390]"
    }, {
      "left" : "releaseBuffered",
      "right" : "releaseBuffered",
      "info" : "SimpleName[4391-4406]:SimpleName[4391-4406]"
    }, {
      "left" : "Writer w",
      "right" : "Writer w",
      "info" : "SingleVariableDeclaration[4407-4415]:SingleVariableDeclaration[4407-4415]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[4424-4435]:SimpleType[4424-4435]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4436-4666]:Block[4436-4666]"
    }, {
      "left" : "int count = _inputEnd - _inputPtr;",
      "right" : "int count = _inputEnd - _inputPtr;",
      "info" : "VariableDeclarationStatement[4446-4480]:VariableDeclarationStatement[4446-4480]"
    }, {
      "left" : "if (count < 1)",
      "right" : "if (count < 1)",
      "info" : "IfStatement[4489-4517]:IfStatement[4489-4517]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4504-4517]:Block[4504-4517]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[4506-4515]:ReturnStatement[4506-4515]"
    }, {
      "left" : "int origPtr = _inputPtr;",
      "right" : "int origPtr = _inputPtr;",
      "info" : "VariableDeclarationStatement[4567-4591]:VariableDeclarationStatement[4567-4591]"
    }, {
      "left" : "w.write(_inputBuffer, origPtr, count);",
      "right" : "w.write(_inputBuffer, origPtr, count);",
      "info" : "ExpressionStatement[4600-4638]:ExpressionStatement[4600-4638]"
    }, {
      "left" : "return count;",
      "right" : "return count;",
      "info" : "ReturnStatement[4647-4660]:ReturnStatement[4647-4660]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[4672-4681]:MarkerAnnotation[4672-4681]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4682-4688]:Modifier[4682-4688]"
    }, {
      "left" : "Object",
      "right" : "Object",
      "info" : "SimpleType[4689-4695]:SimpleType[4689-4695]"
    }, {
      "left" : "getInputSource",
      "right" : "getInputSource",
      "info" : "SimpleName[4696-4710]:SimpleName[4696-4710]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4713-4732]:Block[4713-4732]"
    }, {
      "left" : "return _reader;",
      "right" : "return _reader;",
      "info" : "ReturnStatement[4715-4730]:ReturnStatement[4715-4730]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[4738-4747]:MarkerAnnotation[4738-4747]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[4752-4761]:Modifier[4752-4761]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[4762-4769]:PrimitiveType[4762-4769]"
    }, {
      "left" : "loadMore",
      "right" : "loadMore",
      "info" : "SimpleName[4770-4778]:SimpleName[4770-4778]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[4788-4799]:SimpleType[4788-4799]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4804-5425]:Block[4804-5425]"
    }, {
      "left" : "_currInputProcessed += _inputEnd;",
      "right" : "_currInputProcessed += _inputEnd;",
      "info" : "ExpressionStatement[4814-4847]:ExpressionStatement[4814-4847]"
    }, {
      "left" : "_currInputRowStart -= _inputEnd;",
      "right" : "_currInputRowStart -= _inputEnd;",
      "info" : "ExpressionStatement[4856-4888]:ExpressionStatement[4856-4888]"
    }, {
      "left" : "if (_reader != null)",
      "right" : "if (_reader != null)",
      "info" : "IfStatement[4898-5397]:IfStatement[4898-5397]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4919-5397]:Block[4919-5397]"
    }, {
      "left" : "int count = _reader.read(_inputBuffer, 0, _inputBuffer.length);",
      "right" : "int count = _reader.read(_inputBuffer, 0, _inputBuffer.length);",
      "info" : "VariableDeclarationStatement[4933-4996]:VariableDeclarationStatement[4933-4996]"
    }, {
      "left" : "if (count > 0)",
      "right" : "if (count > 0)",
      "info" : "IfStatement[5009-5134]:IfStatement[5009-5134]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5024-5134]:Block[5024-5134]"
    }, {
      "left" : "_inputPtr = 0;",
      "right" : "_inputPtr = 0;",
      "info" : "ExpressionStatement[5042-5056]:ExpressionStatement[5042-5056]"
    }, {
      "left" : "_inputEnd = count;",
      "right" : "_inputEnd = count;",
      "info" : "ExpressionStatement[5073-5091]:ExpressionStatement[5073-5091]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[5108-5120]:ReturnStatement[5108-5120]"
    }, {
      "left" : "_closeInput();",
      "right" : "_closeInput();",
      "info" : "ExpressionStatement[5175-5189]:ExpressionStatement[5175-5189]"
    }, {
      "left" : "if (count == 0)",
      "right" : "if (count == 0)",
      "info" : "IfStatement[5254-5387]:IfStatement[5254-5387]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5270-5387]:Block[5270-5387]"
    }, {
      "left" : "throw new IOException(\"Reader returned 0 characters when trying to read \"+_inputEnd);",
      "right" : "throw new IOException(\"Reader returned 0 characters when trying to read \"+_inputEnd);",
      "info" : "ThrowStatement[5288-5373]:ThrowStatement[5288-5373]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[5406-5419]:ReturnStatement[5406-5419]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[5431-5440]:Modifier[5431-5440]"
    }, {
      "left" : "char",
      "right" : "char",
      "info" : "PrimitiveType[5441-5445]:PrimitiveType[5441-5445]"
    }, {
      "left" : "getNextChar",
      "right" : "getNextChar",
      "info" : "SimpleName[5446-5457]:SimpleName[5446-5457]"
    }, {
      "left" : "String eofMsg",
      "right" : "String eofMsg",
      "info" : "SingleVariableDeclaration[5458-5471]:SingleVariableDeclaration[5458-5471]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[5480-5491]:SimpleType[5480-5491]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5492-5649]:Block[5492-5649]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[5502-5601]:IfStatement[5502-5601]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5530-5601]:Block[5530-5601]"
    }, {
      "left" : "if (!loadMore())",
      "right" : "if (!loadMore())",
      "info" : "IfStatement[5544-5591]:IfStatement[5544-5591]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5561-5591]:Block[5561-5591]"
    }, {
      "left" : "_reportInvalidEOF(eofMsg);",
      "right" : "_reportInvalidEOF(eofMsg);",
      "info" : "ExpressionStatement[5563-5589]:ExpressionStatement[5563-5589]"
    }, {
      "left" : "return _inputBuffer[_inputPtr++];",
      "right" : "return _inputBuffer[_inputPtr++];",
      "info" : "ReturnStatement[5610-5643]:ReturnStatement[5610-5643]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[5655-5664]:MarkerAnnotation[5655-5664]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[5669-5678]:Modifier[5669-5678]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[5679-5683]:PrimitiveType[5679-5683]"
    }, {
      "left" : "_closeInput",
      "right" : "_closeInput",
      "info" : "SimpleName[5684-5695]:SimpleName[5684-5695]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[5705-5716]:SimpleType[5705-5716]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5717-6316]:Block[5717-6316]"
    }, {
      "left" : "if (_reader != null)",
      "right" : "if (_reader != null)",
      "info" : "IfStatement[6113-6310]:IfStatement[6113-6310]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6134-6310]:Block[6134-6310]"
    }, {
      "left" : "if (_ioContext.isResourceManaged() || isEnabled(Feature.AUTO_CLOSE_SOURCE))",
      "right" : "if (_ioContext.isResourceManaged() || isEnabled(Feature.AUTO_CLOSE_SOURCE))",
      "info" : "IfStatement[6148-6272]:IfStatement[6148-6272]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6224-6272]:Block[6224-6272]"
    }, {
      "left" : "_reader.close();",
      "right" : "_reader.close();",
      "info" : "ExpressionStatement[6242-6258]:ExpressionStatement[6242-6258]"
    }, {
      "left" : "_reader = null;",
      "right" : "_reader = null;",
      "info" : "ExpressionStatement[6285-6300]:ExpressionStatement[6285-6300]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[6574-6583]:MarkerAnnotation[6574-6583]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[6588-6597]:Modifier[6588-6597]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6598-6602]:PrimitiveType[6598-6602]"
    }, {
      "left" : "_releaseBuffers",
      "right" : "_releaseBuffers",
      "info" : "SimpleName[6603-6618]:SimpleName[6603-6618]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[6628-6639]:SimpleType[6628-6639]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6640-7021]:Block[6640-7021]"
    }, {
      "left" : "super._releaseBuffers();",
      "right" : "super._releaseBuffers();",
      "info" : "ExpressionStatement[6650-6674]:ExpressionStatement[6650-6674]"
    }, {
      "left" : "_symbols.release();",
      "right" : "_symbols.release();",
      "info" : "ExpressionStatement[6720-6739]:ExpressionStatement[6720-6739]"
    }, {
      "left" : "if (_bufferRecyclable)",
      "right" : "if (_bufferRecyclable)",
      "info" : "IfStatement[6808-7015]:IfStatement[6808-7015]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6831-7015]:Block[6831-7015]"
    }, {
      "left" : "char[] buf = _inputBuffer;",
      "right" : "char[] buf = _inputBuffer;",
      "info" : "VariableDeclarationStatement[6845-6871]:VariableDeclarationStatement[6845-6871]"
    }, {
      "left" : "if (buf != null)",
      "right" : "if (buf != null)",
      "info" : "IfStatement[6884-7005]:IfStatement[6884-7005]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6901-7005]:Block[6901-7005]"
    }, {
      "left" : "_inputBuffer = null;",
      "right" : "_inputBuffer = null;",
      "info" : "ExpressionStatement[6919-6939]:ExpressionStatement[6919-6939]"
    }, {
      "left" : "_ioContext.releaseTokenBuffer(buf);",
      "right" : "_ioContext.releaseTokenBuffer(buf);",
      "info" : "ExpressionStatement[6956-6991]:ExpressionStatement[6956-6991]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[7461-7470]:MarkerAnnotation[7461-7470]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7475-7481]:Modifier[7475-7481]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[7482-7487]:Modifier[7482-7487]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[7488-7494]:SimpleType[7488-7494]"
    }, {
      "left" : "getText",
      "right" : "getText",
      "info" : "SimpleName[7495-7502]:SimpleName[7495-7502]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[7512-7523]:SimpleType[7512-7523]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7528-7861]:Block[7528-7861]"
    }, {
      "left" : "JsonToken t = _currToken;",
      "right" : "JsonToken t = _currToken;",
      "info" : "VariableDeclarationStatement[7538-7563]:VariableDeclarationStatement[7538-7563]"
    }, {
      "left" : "if (t == JsonToken.VALUE_STRING)",
      "right" : "if (t == JsonToken.VALUE_STRING)",
      "info" : "IfStatement[7572-7826]:IfStatement[7572-7826]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7605-7826]:Block[7605-7826]"
    }, {
      "left" : "if (_tokenIncomplete)",
      "right" : "if (_tokenIncomplete)",
      "info" : "IfStatement[7619-7765]:IfStatement[7619-7765]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7641-7765]:Block[7641-7765]"
    }, {
      "left" : "_tokenIncomplete = false;",
      "right" : "_tokenIncomplete = false;",
      "info" : "ExpressionStatement[7659-7684]:ExpressionStatement[7659-7684]"
    }, {
      "left" : "_finishString();",
      "right" : "_finishString();",
      "info" : "ExpressionStatement[7701-7717]:ExpressionStatement[7701-7717]"
    }, {
      "left" : "return _textBuffer.contentsAsString();",
      "right" : "return _textBuffer.contentsAsString();",
      "info" : "ReturnStatement[7778-7816]:ReturnStatement[7778-7816]"
    }, {
      "left" : "return _getText2(t);",
      "right" : "return _getText2(t);",
      "info" : "ReturnStatement[7835-7855]:ReturnStatement[7835-7855]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[7953-7962]:MarkerAnnotation[7953-7962]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7967-7973]:Modifier[7967-7973]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[7974-7979]:Modifier[7974-7979]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[7980-7986]:SimpleType[7980-7986]"
    }, {
      "left" : "getValueAsString",
      "right" : "getValueAsString",
      "info" : "SimpleName[7987-8003]:SimpleName[7987-8003]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[8013-8024]:SimpleType[8013-8024]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8029-8450]:Block[8029-8450]"
    }, {
      "left" : "if (_currToken == JsonToken.VALUE_STRING)",
      "right" : "if (_currToken == JsonToken.VALUE_STRING)",
      "info" : "IfStatement[8039-8302]:IfStatement[8039-8302]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8081-8302]:Block[8081-8302]"
    }, {
      "left" : "if (_tokenIncomplete)",
      "right" : "if (_tokenIncomplete)",
      "info" : "IfStatement[8095-8241]:IfStatement[8095-8241]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8117-8241]:Block[8117-8241]"
    }, {
      "left" : "_tokenIncomplete = false;",
      "right" : "_tokenIncomplete = false;",
      "info" : "ExpressionStatement[8135-8160]:ExpressionStatement[8135-8160]"
    }, {
      "left" : "_finishString();",
      "right" : "_finishString();",
      "info" : "ExpressionStatement[8177-8193]:ExpressionStatement[8177-8193]"
    }, {
      "left" : "return _textBuffer.contentsAsString();",
      "right" : "return _textBuffer.contentsAsString();",
      "info" : "ReturnStatement[8254-8292]:ReturnStatement[8254-8292]"
    }, {
      "left" : "if (_currToken == JsonToken.FIELD_NAME)",
      "right" : "if (_currToken == JsonToken.FIELD_NAME)",
      "info" : "IfStatement[8311-8399]:IfStatement[8311-8399]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8351-8399]:Block[8351-8399]"
    }, {
      "left" : "return getCurrentName();",
      "right" : "return getCurrentName();",
      "info" : "ReturnStatement[8365-8389]:ReturnStatement[8365-8389]"
    }, {
      "left" : "return super.getValueAsString(null);",
      "right" : "return super.getValueAsString(null);",
      "info" : "ReturnStatement[8408-8444]:ReturnStatement[8408-8444]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[8474-8483]:MarkerAnnotation[8474-8483]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8488-8494]:Modifier[8488-8494]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[8495-8500]:Modifier[8495-8500]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[8501-8507]:SimpleType[8501-8507]"
    }, {
      "left" : "getValueAsString",
      "right" : "getValueAsString",
      "info" : "SimpleName[8508-8524]:SimpleName[8508-8524]"
    }, {
      "left" : "String defValue",
      "right" : "String defValue",
      "info" : "SingleVariableDeclaration[8525-8540]:SingleVariableDeclaration[8525-8540]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[8549-8560]:SimpleType[8549-8560]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8561-8986]:Block[8561-8986]"
    }, {
      "left" : "if (_currToken == JsonToken.VALUE_STRING)",
      "right" : "if (_currToken == JsonToken.VALUE_STRING)",
      "info" : "IfStatement[8571-8834]:IfStatement[8571-8834]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8613-8834]:Block[8613-8834]"
    }, {
      "left" : "if (_tokenIncomplete)",
      "right" : "if (_tokenIncomplete)",
      "info" : "IfStatement[8627-8773]:IfStatement[8627-8773]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8649-8773]:Block[8649-8773]"
    }, {
      "left" : "_tokenIncomplete = false;",
      "right" : "_tokenIncomplete = false;",
      "info" : "ExpressionStatement[8667-8692]:ExpressionStatement[8667-8692]"
    }, {
      "left" : "_finishString();",
      "right" : "_finishString();",
      "info" : "ExpressionStatement[8709-8725]:ExpressionStatement[8709-8725]"
    }, {
      "left" : "return _textBuffer.contentsAsString();",
      "right" : "return _textBuffer.contentsAsString();",
      "info" : "ReturnStatement[8786-8824]:ReturnStatement[8786-8824]"
    }, {
      "left" : "if (_currToken == JsonToken.FIELD_NAME)",
      "right" : "if (_currToken == JsonToken.FIELD_NAME)",
      "info" : "IfStatement[8843-8931]:IfStatement[8843-8931]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8883-8931]:Block[8883-8931]"
    }, {
      "left" : "return getCurrentName();",
      "right" : "return getCurrentName();",
      "info" : "ReturnStatement[8897-8921]:ReturnStatement[8897-8921]"
    }, {
      "left" : "return super.getValueAsString(defValue);",
      "right" : "return super.getValueAsString(defValue);",
      "info" : "ReturnStatement[8940-8980]:ReturnStatement[8940-8980]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[8992-9001]:Modifier[8992-9001]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[9002-9007]:Modifier[9002-9007]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[9008-9014]:SimpleType[9008-9014]"
    }, {
      "left" : "_getText2",
      "right" : "_getText2",
      "info" : "SimpleName[9015-9024]:SimpleName[9015-9024]"
    }, {
      "left" : "JsonToken t",
      "right" : "JsonToken t",
      "info" : "SingleVariableDeclaration[9025-9036]:SingleVariableDeclaration[9025-9036]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9038-9434]:Block[9038-9434]"
    }, {
      "left" : "if (t == null)",
      "right" : "if (t == null)",
      "info" : "IfStatement[9048-9099]:IfStatement[9048-9099]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9063-9099]:Block[9063-9099]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[9077-9089]:ReturnStatement[9077-9089]"
    }, {
      "left" : "switch (t.id()) {\n        case ID_FIELD_NAME:\n            return _parsingContext.getCurrentName();\n\n        case ID_STRING:\n            // fall through\n        case ID_NUMBER_INT:\n        case ID_NUMBER_FLOAT:\n            return _textBuffer.contentsAsString();\n        default:\n            return t.asString();\n        }",
      "right" : "switch (t.id()) {\n        case ID_FIELD_NAME:\n            return _parsingContext.getCurrentName();\n\n        case ID_STRING:\n            // fall through\n        case ID_NUMBER_INT:\n        case ID_NUMBER_FLOAT:\n            return _textBuffer.contentsAsString();\n        default:\n            return t.asString();\n        }",
      "info" : "SwitchStatement[9108-9428]:SwitchStatement[9108-9428]"
    }, {
      "left" : "case ID_FIELD_NAME:",
      "right" : "case ID_FIELD_NAME:",
      "info" : "SwitchCase[9134-9153]:SwitchCase[9134-9153]"
    }, {
      "left" : "return _parsingContext.getCurrentName();",
      "right" : "return _parsingContext.getCurrentName();",
      "info" : "ReturnStatement[9166-9206]:ReturnStatement[9166-9206]"
    }, {
      "left" : "case ID_STRING:",
      "right" : "case ID_STRING:",
      "info" : "SwitchCase[9216-9231]:SwitchCase[9216-9231]"
    }, {
      "left" : "case ID_NUMBER_INT:",
      "right" : "case ID_NUMBER_INT:",
      "info" : "SwitchCase[9268-9287]:SwitchCase[9268-9287]"
    }, {
      "left" : "case ID_NUMBER_FLOAT:",
      "right" : "case ID_NUMBER_FLOAT:",
      "info" : "SwitchCase[9296-9317]:SwitchCase[9296-9317]"
    }, {
      "left" : "return _textBuffer.contentsAsString();",
      "right" : "return _textBuffer.contentsAsString();",
      "info" : "ReturnStatement[9330-9368]:ReturnStatement[9330-9368]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[9377-9385]:SwitchCase[9377-9385]"
    }, {
      "left" : "return t.asString();",
      "right" : "return t.asString();",
      "info" : "ReturnStatement[9398-9418]:ReturnStatement[9398-9418]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[9440-9449]:MarkerAnnotation[9440-9449]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9454-9460]:Modifier[9454-9460]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[9461-9466]:Modifier[9461-9466]"
    }, {
      "left" : "char[]",
      "right" : "char[]",
      "info" : "ArrayType[9467-9473]:ArrayType[9467-9473]"
    }, {
      "left" : "getTextCharacters",
      "right" : "getTextCharacters",
      "info" : "SimpleName[9474-9491]:SimpleName[9474-9491]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[9501-9512]:SimpleType[9501-9512]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9517-10734]:Block[9517-10734]"
    }, {
      "left" : "if (_currToken != null)",
      "right" : "if (_currToken != null)",
      "info" : "IfStatement[9527-10707]:IfStatement[9527-10707]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9551-10707]:Block[9551-10707]"
    }, {
      "left" : "switch (_currToken.id()) {\n            case ID_FIELD_NAME:\n                if (!_nameCopied) {\n                    String name = _parsingContext.getCurrentName();\n                    int nameLen = name.length();\n                    if (_nameCopyBuffer == null) {\n                        _nameCopyBuffer = _ioContext.allocNameCopyBuffer(nameLen);\n                    } else if (_nameCopyBuffer.length < nameLen) {\n                        _nameCopyBuffer = new char[nameLen];\n                    }\n                    name.getChars(0, nameLen, _nameCopyBuffer, 0);\n                    _nameCopied = true;\n                }\n                return _nameCopyBuffer;\n            case ID_STRING:\n                if (_tokenIncomplete) {\n                    _tokenIncomplete = false;\n                    _finishString(); // only strings can be incomplete\n                }\n                // fall through\n            case ID_NUMBER_INT:\n            case ID_NUMBER_FLOAT:\n                return _textBuffer.getTextBuffer();\n            default:\n                return _currToken.asCharArray();\n            }",
      "right" : "switch (_currToken.id()) {\n            case ID_FIELD_NAME:\n                if (!_nameCopied) {\n                    String name = _parsingContext.getCurrentName();\n                    int nameLen = name.length();\n                    if (_nameCopyBuffer == null) {\n                        _nameCopyBuffer = _ioContext.allocNameCopyBuffer(nameLen);\n                    } else if (_nameCopyBuffer.length < nameLen) {\n                        _nameCopyBuffer = new char[nameLen];\n                    }\n                    name.getChars(0, nameLen, _nameCopyBuffer, 0);\n                    _nameCopied = true;\n                }\n                return _nameCopyBuffer;\n            case ID_STRING:\n                if (_tokenIncomplete) {\n                    _tokenIncomplete = false;\n                    _finishString(); // only strings can be incomplete\n                }\n                // fall through\n            case ID_NUMBER_INT:\n            case ID_NUMBER_FLOAT:\n                return _textBuffer.getTextBuffer();\n            default:\n                return _currToken.asCharArray();\n            }",
      "info" : "SwitchStatement[9600-10697]:SwitchStatement[9600-10697]"
    }, {
      "left" : "case ID_FIELD_NAME:",
      "right" : "case ID_FIELD_NAME:",
      "info" : "SwitchCase[9639-9658]:SwitchCase[9639-9658]"
    }, {
      "left" : "if (!_nameCopied)",
      "right" : "if (!_nameCopied)",
      "info" : "IfStatement[9675-10220]:IfStatement[9675-10220]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9693-10220]:Block[9693-10220]"
    }, {
      "left" : "String name = _parsingContext.getCurrentName();",
      "right" : "String name = _parsingContext.getCurrentName();",
      "info" : "VariableDeclarationStatement[9715-9762]:VariableDeclarationStatement[9715-9762]"
    }, {
      "left" : "int nameLen = name.length();",
      "right" : "int nameLen = name.length();",
      "info" : "VariableDeclarationStatement[9783-9811]:VariableDeclarationStatement[9783-9811]"
    }, {
      "left" : "if (_nameCopyBuffer == null)",
      "right" : "if (_nameCopyBuffer == null)",
      "info" : "IfStatement[9832-10095]:IfStatement[9832-10095]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9861-9967]:Block[9861-9967]"
    }, {
      "left" : "_nameCopyBuffer = _ioContext.allocNameCopyBuffer(nameLen);",
      "right" : "_nameCopyBuffer = _ioContext.allocNameCopyBuffer(nameLen);",
      "info" : "ExpressionStatement[9887-9945]:ExpressionStatement[9887-9945]"
    }, {
      "left" : "if (_nameCopyBuffer.length < nameLen)",
      "right" : "if (_nameCopyBuffer.length < nameLen)",
      "info" : "IfStatement[9973-10095]:IfStatement[9973-10095]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10011-10095]:Block[10011-10095]"
    }, {
      "left" : "_nameCopyBuffer = new char[nameLen];",
      "right" : "_nameCopyBuffer = new char[nameLen];",
      "info" : "ExpressionStatement[10037-10073]:ExpressionStatement[10037-10073]"
    }, {
      "left" : "name.getChars(0, nameLen, _nameCopyBuffer, 0);",
      "right" : "name.getChars(0, nameLen, _nameCopyBuffer, 0);",
      "info" : "ExpressionStatement[10116-10162]:ExpressionStatement[10116-10162]"
    }, {
      "left" : "_nameCopied = true;",
      "right" : "_nameCopied = true;",
      "info" : "ExpressionStatement[10183-10202]:ExpressionStatement[10183-10202]"
    }, {
      "left" : "return _nameCopyBuffer;",
      "right" : "return _nameCopyBuffer;",
      "info" : "ReturnStatement[10237-10260]:ReturnStatement[10237-10260]"
    }, {
      "left" : "case ID_STRING:",
      "right" : "case ID_STRING:",
      "info" : "SwitchCase[10273-10288]:SwitchCase[10273-10288]"
    }, {
      "left" : "if (_tokenIncomplete)",
      "right" : "if (_tokenIncomplete)",
      "info" : "IfStatement[10305-10463]:IfStatement[10305-10463]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10327-10463]:Block[10327-10463]"
    }, {
      "left" : "_tokenIncomplete = false;",
      "right" : "_tokenIncomplete = false;",
      "info" : "ExpressionStatement[10349-10374]:ExpressionStatement[10349-10374]"
    }, {
      "left" : "_finishString();",
      "right" : "_finishString();",
      "info" : "ExpressionStatement[10395-10411]:ExpressionStatement[10395-10411]"
    }, {
      "left" : "case ID_NUMBER_INT:",
      "right" : "case ID_NUMBER_INT:",
      "info" : "SwitchCase[10508-10527]:SwitchCase[10508-10527]"
    }, {
      "left" : "case ID_NUMBER_FLOAT:",
      "right" : "case ID_NUMBER_FLOAT:",
      "info" : "SwitchCase[10540-10561]:SwitchCase[10540-10561]"
    }, {
      "left" : "return _textBuffer.getTextBuffer();",
      "right" : "return _textBuffer.getTextBuffer();",
      "info" : "ReturnStatement[10578-10613]:ReturnStatement[10578-10613]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[10626-10634]:SwitchCase[10626-10634]"
    }, {
      "left" : "return _currToken.asCharArray();",
      "right" : "return _currToken.asCharArray();",
      "info" : "ReturnStatement[10651-10683]:ReturnStatement[10651-10683]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[10716-10728]:ReturnStatement[10716-10728]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[10740-10749]:MarkerAnnotation[10740-10749]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10754-10760]:Modifier[10754-10760]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[10761-10766]:Modifier[10761-10766]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[10767-10770]:PrimitiveType[10767-10770]"
    }, {
      "left" : "getTextLength",
      "right" : "getTextLength",
      "info" : "SimpleName[10771-10784]:SimpleName[10771-10784]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[10794-10805]:SimpleType[10794-10805]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10810-11486]:Block[10810-11486]"
    }, {
      "left" : "if (_currToken != null)",
      "right" : "if (_currToken != null)",
      "info" : "IfStatement[10820-11462]:IfStatement[10820-11462]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10844-11462]:Block[10844-11462]"
    }, {
      "left" : "switch (_currToken.id()) {\n            case ID_FIELD_NAME:\n                return _parsingContext.getCurrentName().length();\n            case ID_STRING:\n                if (_tokenIncomplete) {\n                    _tokenIncomplete = false;\n                    _finishString(); // only strings can be incomplete\n                }\n                // fall through\n            case ID_NUMBER_INT:\n            case ID_NUMBER_FLOAT:\n                return _textBuffer.size();\n            default:\n                return _currToken.asCharArray().length;\n            }",
      "right" : "switch (_currToken.id()) {\n            case ID_FIELD_NAME:\n                return _parsingContext.getCurrentName().length();\n            case ID_STRING:\n                if (_tokenIncomplete) {\n                    _tokenIncomplete = false;\n                    _finishString(); // only strings can be incomplete\n                }\n                // fall through\n            case ID_NUMBER_INT:\n            case ID_NUMBER_FLOAT:\n                return _textBuffer.size();\n            default:\n                return _currToken.asCharArray().length;\n            }",
      "info" : "SwitchStatement[10893-11452]:SwitchStatement[10893-11452]"
    }, {
      "left" : "case ID_FIELD_NAME:",
      "right" : "case ID_FIELD_NAME:",
      "info" : "SwitchCase[10932-10951]:SwitchCase[10932-10951]"
    }, {
      "left" : "return _parsingContext.getCurrentName().length();",
      "right" : "return _parsingContext.getCurrentName().length();",
      "info" : "ReturnStatement[10968-11017]:ReturnStatement[10968-11017]"
    }, {
      "left" : "case ID_STRING:",
      "right" : "case ID_STRING:",
      "info" : "SwitchCase[11030-11045]:SwitchCase[11030-11045]"
    }, {
      "left" : "if (_tokenIncomplete)",
      "right" : "if (_tokenIncomplete)",
      "info" : "IfStatement[11062-11220]:IfStatement[11062-11220]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11084-11220]:Block[11084-11220]"
    }, {
      "left" : "_tokenIncomplete = false;",
      "right" : "_tokenIncomplete = false;",
      "info" : "ExpressionStatement[11106-11131]:ExpressionStatement[11106-11131]"
    }, {
      "left" : "_finishString();",
      "right" : "_finishString();",
      "info" : "ExpressionStatement[11152-11168]:ExpressionStatement[11152-11168]"
    }, {
      "left" : "case ID_NUMBER_INT:",
      "right" : "case ID_NUMBER_INT:",
      "info" : "SwitchCase[11265-11284]:SwitchCase[11265-11284]"
    }, {
      "left" : "case ID_NUMBER_FLOAT:",
      "right" : "case ID_NUMBER_FLOAT:",
      "info" : "SwitchCase[11297-11318]:SwitchCase[11297-11318]"
    }, {
      "left" : "return _textBuffer.size();",
      "right" : "return _textBuffer.size();",
      "info" : "ReturnStatement[11335-11361]:ReturnStatement[11335-11361]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[11374-11382]:SwitchCase[11374-11382]"
    }, {
      "left" : "return _currToken.asCharArray().length;",
      "right" : "return _currToken.asCharArray().length;",
      "info" : "ReturnStatement[11399-11438]:ReturnStatement[11399-11438]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[11471-11480]:ReturnStatement[11471-11480]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[11492-11501]:MarkerAnnotation[11492-11501]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11506-11512]:Modifier[11506-11512]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[11513-11518]:Modifier[11513-11518]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[11519-11522]:PrimitiveType[11519-11522]"
    }, {
      "left" : "getTextOffset",
      "right" : "getTextOffset",
      "info" : "SimpleName[11523-11536]:SimpleName[11523-11536]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[11546-11557]:SimpleType[11546-11557]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11562-12183]:Block[11562-12183]"
    }, {
      "left" : "if (_currToken != null)",
      "right" : "if (_currToken != null)",
      "info" : "IfStatement[11639-12159]:IfStatement[11639-12159]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11663-12159]:Block[11663-12159]"
    }, {
      "left" : "switch (_currToken.id()) {\n            case ID_FIELD_NAME:\n                return 0;\n            case ID_STRING:\n                if (_tokenIncomplete) {\n                    _tokenIncomplete = false;\n                    _finishString(); // only strings can be incomplete\n                }\n                // fall through\n            case ID_NUMBER_INT:\n            case ID_NUMBER_FLOAT:\n                return _textBuffer.getTextOffset();\n            default:\n            }",
      "right" : "switch (_currToken.id()) {\n            case ID_FIELD_NAME:\n                return 0;\n            case ID_STRING:\n                if (_tokenIncomplete) {\n                    _tokenIncomplete = false;\n                    _finishString(); // only strings can be incomplete\n                }\n                // fall through\n            case ID_NUMBER_INT:\n            case ID_NUMBER_FLOAT:\n                return _textBuffer.getTextOffset();\n            default:\n            }",
      "info" : "SwitchStatement[11677-12149]:SwitchStatement[11677-12149]"
    }, {
      "left" : "case ID_FIELD_NAME:",
      "right" : "case ID_FIELD_NAME:",
      "info" : "SwitchCase[11716-11735]:SwitchCase[11716-11735]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[11752-11761]:ReturnStatement[11752-11761]"
    }, {
      "left" : "case ID_STRING:",
      "right" : "case ID_STRING:",
      "info" : "SwitchCase[11774-11789]:SwitchCase[11774-11789]"
    }, {
      "left" : "if (_tokenIncomplete)",
      "right" : "if (_tokenIncomplete)",
      "info" : "IfStatement[11806-11964]:IfStatement[11806-11964]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11828-11964]:Block[11828-11964]"
    }, {
      "left" : "_tokenIncomplete = false;",
      "right" : "_tokenIncomplete = false;",
      "info" : "ExpressionStatement[11850-11875]:ExpressionStatement[11850-11875]"
    }, {
      "left" : "_finishString();",
      "right" : "_finishString();",
      "info" : "ExpressionStatement[11896-11912]:ExpressionStatement[11896-11912]"
    }, {
      "left" : "case ID_NUMBER_INT:",
      "right" : "case ID_NUMBER_INT:",
      "info" : "SwitchCase[12009-12028]:SwitchCase[12009-12028]"
    }, {
      "left" : "case ID_NUMBER_FLOAT:",
      "right" : "case ID_NUMBER_FLOAT:",
      "info" : "SwitchCase[12041-12062]:SwitchCase[12041-12062]"
    }, {
      "left" : "return _textBuffer.getTextOffset();",
      "right" : "return _textBuffer.getTextOffset();",
      "info" : "ReturnStatement[12079-12114]:ReturnStatement[12079-12114]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[12127-12135]:SwitchCase[12127-12135]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[12168-12177]:ReturnStatement[12168-12177]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[12189-12198]:MarkerAnnotation[12189-12198]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12203-12209]:Modifier[12203-12209]"
    }, {
      "left" : "byte[]",
      "right" : "byte[]",
      "info" : "ArrayType[12210-12216]:ArrayType[12210-12216]"
    }, {
      "left" : "getBinaryValue",
      "right" : "getBinaryValue",
      "info" : "SimpleName[12217-12231]:SimpleName[12217-12231]"
    }, {
      "left" : "Base64Variant b64variant",
      "right" : "Base64Variant b64variant",
      "info" : "SingleVariableDeclaration[12232-12256]:SingleVariableDeclaration[12232-12256]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[12265-12276]:SimpleType[12265-12276]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12281-13521]:Block[12281-13521]"
    }, {
      "left" : "if (_currToken != JsonToken.VALUE_STRING &&\n                (_currToken != JsonToken.VALUE_EMBEDDED_OBJECT || _binaryValue == null))",
      "right" : "if (_currToken != JsonToken.VALUE_STRING &&\n                (_currToken != JsonToken.VALUE_EMBEDDED_OBJECT || _binaryValue == null))",
      "info" : "IfStatement[12291-12563]:IfStatement[12291-12563]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12424-12563]:Block[12424-12563]"
    }, {
      "left" : "_reportError(\"Current token (\"+_currToken+\") not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary\");",
      "right" : "_reportError(\"Current token (\"+_currToken+\") not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary\");",
      "info" : "ExpressionStatement[12438-12553]:ExpressionStatement[12438-12553]"
    }, {
      "left" : "if (_tokenIncomplete)",
      "right" : "if (_tokenIncomplete)",
      "info" : "IfStatement[12678-13486]:IfStatement[12678-13486]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12700-13147]:Block[12700-13147]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[12714-12962]:TryStatement[12714-12962]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12718-12791]:Block[12718-12791]"
    }, {
      "left" : "_binaryValue = _decodeBase64(b64variant);",
      "right" : "_binaryValue = _decodeBase64(b64variant);",
      "info" : "ExpressionStatement[12736-12777]:ExpressionStatement[12736-12777]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12829-12962]:Block[12829-12962]"
    }, {
      "left" : "throw _constructError(\"Failed to decode VALUE_STRING as base64 (\"+b64variant+\"): \"+iae.getMessage());",
      "right" : "throw _constructError(\"Failed to decode VALUE_STRING as base64 (\"+b64variant+\"): \"+iae.getMessage());",
      "info" : "ThrowStatement[12847-12948]:ThrowStatement[12847-12948]"
    }, {
      "left" : "_tokenIncomplete = false;",
      "right" : "_tokenIncomplete = false;",
      "info" : "ExpressionStatement[13112-13137]:ExpressionStatement[13112-13137]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13153-13486]:Block[13153-13486]"
    }, {
      "left" : "if (_binaryValue == null)",
      "right" : "if (_binaryValue == null)",
      "info" : "IfStatement[13205-13476]:IfStatement[13205-13476]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13231-13476]:Block[13231-13476]"
    }, {
      "left" : "@SuppressWarnings(\"resource\")\n                ByteArrayBuilder builder = _getByteArrayBuilder();",
      "right" : "@SuppressWarnings(\"resource\")\n                ByteArrayBuilder builder = _getByteArrayBuilder();",
      "info" : "VariableDeclarationStatement[13249-13345]:VariableDeclarationStatement[13249-13345]"
    }, {
      "left" : "_decodeBase64(getText(), builder, b64variant);",
      "right" : "_decodeBase64(getText(), builder, b64variant);",
      "info" : "ExpressionStatement[13362-13408]:ExpressionStatement[13362-13408]"
    }, {
      "left" : "_binaryValue = builder.toByteArray();",
      "right" : "_binaryValue = builder.toByteArray();",
      "info" : "ExpressionStatement[13425-13462]:ExpressionStatement[13425-13462]"
    }, {
      "left" : "return _binaryValue;",
      "right" : "return _binaryValue;",
      "info" : "ReturnStatement[13495-13515]:ReturnStatement[13495-13515]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[13527-13536]:MarkerAnnotation[13527-13536]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[13541-13547]:Modifier[13541-13547]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[13548-13551]:PrimitiveType[13548-13551]"
    }, {
      "left" : "readBinaryValue",
      "right" : "readBinaryValue",
      "info" : "SimpleName[13552-13567]:SimpleName[13552-13567]"
    }, {
      "left" : "Base64Variant b64variant",
      "right" : "Base64Variant b64variant",
      "info" : "SingleVariableDeclaration[13568-13592]:SingleVariableDeclaration[13568-13592]"
    }, {
      "left" : "OutputStream out",
      "right" : "OutputStream out",
      "info" : "SingleVariableDeclaration[13594-13610]:SingleVariableDeclaration[13594-13610]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[13619-13630]:SimpleType[13619-13630]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13635-14161]:Block[13635-14161]"
    }, {
      "left" : "if (!_tokenIncomplete || _currToken != JsonToken.VALUE_STRING)",
      "right" : "if (!_tokenIncomplete || _currToken != JsonToken.VALUE_STRING)",
      "info" : "IfStatement[13721-13901]:IfStatement[13721-13901]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13784-13901]:Block[13784-13901]"
    }, {
      "left" : "byte[] b = getBinaryValue(b64variant);",
      "right" : "byte[] b = getBinaryValue(b64variant);",
      "info" : "VariableDeclarationStatement[13798-13836]:VariableDeclarationStatement[13798-13836]"
    }, {
      "left" : "out.write(b);",
      "right" : "out.write(b);",
      "info" : "ExpressionStatement[13849-13862]:ExpressionStatement[13849-13862]"
    }, {
      "left" : "return b.length;",
      "right" : "return b.length;",
      "info" : "ReturnStatement[13875-13891]:ReturnStatement[13875-13891]"
    }, {
      "left" : "byte[] buf = _ioContext.allocBase64Buffer();",
      "right" : "byte[] buf = _ioContext.allocBase64Buffer();",
      "info" : "VariableDeclarationStatement[13964-14008]:VariableDeclarationStatement[13964-14008]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[14017-14155]:TryStatement[14017-14155]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14021-14086]:Block[14021-14086]"
    }, {
      "left" : "return _readBinary(b64variant, out, buf);",
      "right" : "return _readBinary(b64variant, out, buf);",
      "info" : "ReturnStatement[14035-14076]:ReturnStatement[14035-14076]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14095-14155]:Block[14095-14155]"
    }, {
      "left" : "_ioContext.releaseBase64Buffer(buf);",
      "right" : "_ioContext.releaseBase64Buffer(buf);",
      "info" : "ExpressionStatement[14109-14145]:ExpressionStatement[14109-14145]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[14167-14176]:Modifier[14167-14176]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[14177-14180]:PrimitiveType[14177-14180]"
    }, {
      "left" : "_readBinary",
      "right" : "_readBinary",
      "info" : "SimpleName[14181-14192]:SimpleName[14181-14192]"
    }, {
      "left" : "Base64Variant b64variant",
      "right" : "Base64Variant b64variant",
      "info" : "SingleVariableDeclaration[14193-14217]:SingleVariableDeclaration[14193-14217]"
    }, {
      "left" : "OutputStream out",
      "right" : "OutputStream out",
      "info" : "SingleVariableDeclaration[14219-14235]:SingleVariableDeclaration[14219-14235]"
    }, {
      "left" : "byte[] buffer",
      "right" : "byte[] buffer",
      "info" : "SingleVariableDeclaration[14237-14250]:SingleVariableDeclaration[14237-14250]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[14259-14270]:SimpleType[14259-14270]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14275-19303]:Block[14275-19303]"
    }, {
      "left" : "int outputPtr = 0;",
      "right" : "int outputPtr = 0;",
      "info" : "VariableDeclarationStatement[14285-14303]:VariableDeclarationStatement[14285-14303]"
    }, {
      "left" : "final int outputEnd = buffer.length - 3;",
      "right" : "final int outputEnd = buffer.length - 3;",
      "info" : "VariableDeclarationStatement[14312-14352]:VariableDeclarationStatement[14312-14352]"
    }, {
      "left" : "int outputCount = 0;",
      "right" : "int outputCount = 0;",
      "info" : "VariableDeclarationStatement[14361-14381]:VariableDeclarationStatement[14361-14381]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[14391-19113]:WhileStatement[14391-19113]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14404-19113]:Block[14404-19113]"
    }, {
      "left" : "char ch;",
      "right" : "char ch;",
      "info" : "VariableDeclarationStatement[14481-14489]:VariableDeclarationStatement[14481-14489]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[14502-14699]:DoStatement[14502-14699]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14505-14674]:Block[14505-14674]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[14523-14612]:IfStatement[14523-14612]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14551-14612]:Block[14551-14612]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[14573-14594]:ExpressionStatement[14573-14594]"
    }, {
      "left" : "ch = _inputBuffer[_inputPtr++];",
      "right" : "ch = _inputBuffer[_inputPtr++];",
      "info" : "ExpressionStatement[14629-14660]:ExpressionStatement[14629-14660]"
    }, {
      "left" : "int bits = b64variant.decodeBase64Char(ch);",
      "right" : "int bits = b64variant.decodeBase64Char(ch);",
      "info" : "VariableDeclarationStatement[14712-14755]:VariableDeclarationStatement[14712-14755]"
    }, {
      "left" : "if (bits < 0)",
      "right" : "if (bits < 0)",
      "info" : "IfStatement[14768-15078]:IfStatement[14768-15078]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14782-15078]:Block[14782-15078]"
    }, {
      "left" : "if (ch == '\"')",
      "right" : "if (ch == '\"')",
      "info" : "IfStatement[14837-14898]:IfStatement[14837-14898]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14852-14898]:Block[14852-14898]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[14874-14880]:BreakStatement[14874-14880]"
    }, {
      "left" : "bits = _decodeBase64Escape(b64variant, ch, 0);",
      "right" : "bits = _decodeBase64Escape(b64variant, ch, 0);",
      "info" : "ExpressionStatement[14915-14961]:ExpressionStatement[14915-14961]"
    }, {
      "left" : "if (bits < 0)",
      "right" : "if (bits < 0)",
      "info" : "IfStatement[14978-15064]:IfStatement[14978-15064]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14992-15064]:Block[14992-15064]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[15037-15046]:ContinueStatement[15037-15046]"
    }, {
      "left" : "if (outputPtr > outputEnd)",
      "right" : "if (outputPtr > outputEnd)",
      "info" : "IfStatement[15134-15298]:IfStatement[15134-15298]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15161-15298]:Block[15161-15298]"
    }, {
      "left" : "outputCount += outputPtr;",
      "right" : "outputCount += outputPtr;",
      "info" : "ExpressionStatement[15179-15204]:ExpressionStatement[15179-15204]"
    }, {
      "left" : "out.write(buffer, 0, outputPtr);",
      "right" : "out.write(buffer, 0, outputPtr);",
      "info" : "ExpressionStatement[15221-15253]:ExpressionStatement[15221-15253]"
    }, {
      "left" : "outputPtr = 0;",
      "right" : "outputPtr = 0;",
      "info" : "ExpressionStatement[15270-15284]:ExpressionStatement[15270-15284]"
    }, {
      "left" : "int decodedData = bits;",
      "right" : "int decodedData = bits;",
      "info" : "VariableDeclarationStatement[15312-15335]:VariableDeclarationStatement[15312-15335]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[15420-15501]:IfStatement[15420-15501]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15448-15501]:Block[15448-15501]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[15466-15487]:ExpressionStatement[15466-15487]"
    }, {
      "left" : "ch = _inputBuffer[_inputPtr++];",
      "right" : "ch = _inputBuffer[_inputPtr++];",
      "info" : "ExpressionStatement[15514-15545]:ExpressionStatement[15514-15545]"
    }, {
      "left" : "bits = b64variant.decodeBase64Char(ch);",
      "right" : "bits = b64variant.decodeBase64Char(ch);",
      "info" : "ExpressionStatement[15558-15597]:ExpressionStatement[15558-15597]"
    }, {
      "left" : "if (bits < 0)",
      "right" : "if (bits < 0)",
      "info" : "IfStatement[15610-15702]:IfStatement[15610-15702]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15624-15702]:Block[15624-15702]"
    }, {
      "left" : "bits = _decodeBase64Escape(b64variant, ch, 1);",
      "right" : "bits = _decodeBase64Escape(b64variant, ch, 1);",
      "info" : "ExpressionStatement[15642-15688]:ExpressionStatement[15642-15688]"
    }, {
      "left" : "decodedData = (decodedData << 6) | bits;",
      "right" : "decodedData = (decodedData << 6) | bits;",
      "info" : "ExpressionStatement[15715-15755]:ExpressionStatement[15715-15755]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[15830-15911]:IfStatement[15830-15911]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15858-15911]:Block[15858-15911]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[15876-15897]:ExpressionStatement[15876-15897]"
    }, {
      "left" : "ch = _inputBuffer[_inputPtr++];",
      "right" : "ch = _inputBuffer[_inputPtr++];",
      "info" : "ExpressionStatement[15924-15955]:ExpressionStatement[15924-15955]"
    }, {
      "left" : "bits = b64variant.decodeBase64Char(ch);",
      "right" : "bits = b64variant.decodeBase64Char(ch);",
      "info" : "ExpressionStatement[15968-16007]:ExpressionStatement[15968-16007]"
    }, {
      "left" : "if (bits < 0)",
      "right" : "if (bits < 0)",
      "info" : "IfStatement[16078-17280]:IfStatement[16078-17280]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16092-17280]:Block[16092-17280]"
    }, {
      "left" : "if (bits != Base64Variant.BASE64_VALUE_PADDING)",
      "right" : "if (bits != Base64Variant.BASE64_VALUE_PADDING)",
      "info" : "IfStatement[16110-16555]:IfStatement[16110-16555]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16158-16555]:Block[16158-16555]"
    }, {
      "left" : "if (ch == '\"' && !b64variant.usesPadding())",
      "right" : "if (ch == '\"' && !b64variant.usesPadding())",
      "info" : "IfStatement[16263-16470]:IfStatement[16263-16470]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16307-16470]:Block[16307-16470]"
    }, {
      "left" : "decodedData >>= 4;",
      "right" : "decodedData >>= 4;",
      "info" : "ExpressionStatement[16333-16351]:ExpressionStatement[16333-16351]"
    }, {
      "left" : "buffer[outputPtr++] = (byte) decodedData;",
      "right" : "buffer[outputPtr++] = (byte) decodedData;",
      "info" : "ExpressionStatement[16376-16417]:ExpressionStatement[16376-16417]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[16442-16448]:BreakStatement[16442-16448]"
    }, {
      "left" : "bits = _decodeBase64Escape(b64variant, ch, 2);",
      "right" : "bits = _decodeBase64Escape(b64variant, ch, 2);",
      "info" : "ExpressionStatement[16491-16537]:ExpressionStatement[16491-16537]"
    }, {
      "left" : "if (bits == Base64Variant.BASE64_VALUE_PADDING)",
      "right" : "if (bits == Base64Variant.BASE64_VALUE_PADDING)",
      "info" : "IfStatement[16572-17266]:IfStatement[16572-17266]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16620-17266]:Block[16620-17266]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[16686-16783]:IfStatement[16686-16783]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16714-16783]:Block[16714-16783]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[16740-16761]:ExpressionStatement[16740-16761]"
    }, {
      "left" : "ch = _inputBuffer[_inputPtr++];",
      "right" : "ch = _inputBuffer[_inputPtr++];",
      "info" : "ExpressionStatement[16804-16835]:ExpressionStatement[16804-16835]"
    }, {
      "left" : "if (!b64variant.usesPaddingChar(ch))",
      "right" : "if (!b64variant.usesPaddingChar(ch))",
      "info" : "IfStatement[16856-17054]:IfStatement[16856-17054]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16893-17054]:Block[16893-17054]"
    }, {
      "left" : "throw reportInvalidBase64Char(b64variant, ch, 3, \"expected padding character '\"+b64variant.getPaddingChar()+\"'\");",
      "right" : "throw reportInvalidBase64Char(b64variant, ch, 3, \"expected padding character '\"+b64variant.getPaddingChar()+\"'\");",
      "info" : "ThrowStatement[16919-17032]:ThrowStatement[16919-17032]"
    }, {
      "left" : "decodedData >>= 4;",
      "right" : "decodedData >>= 4;",
      "info" : "ExpressionStatement[17138-17156]:ExpressionStatement[17138-17156]"
    }, {
      "left" : "buffer[outputPtr++] = (byte) decodedData;",
      "right" : "buffer[outputPtr++] = (byte) decodedData;",
      "info" : "ExpressionStatement[17177-17218]:ExpressionStatement[17177-17218]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[17239-17248]:ContinueStatement[17239-17248]"
    }, {
      "left" : "decodedData = (decodedData << 6) | bits;",
      "right" : "decodedData = (decodedData << 6) | bits;",
      "info" : "ExpressionStatement[17327-17367]:ExpressionStatement[17327-17367]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[17451-17532]:IfStatement[17451-17532]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17479-17532]:Block[17479-17532]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[17497-17518]:ExpressionStatement[17497-17518]"
    }, {
      "left" : "ch = _inputBuffer[_inputPtr++];",
      "right" : "ch = _inputBuffer[_inputPtr++];",
      "info" : "ExpressionStatement[17545-17576]:ExpressionStatement[17545-17576]"
    }, {
      "left" : "bits = b64variant.decodeBase64Char(ch);",
      "right" : "bits = b64variant.decodeBase64Char(ch);",
      "info" : "ExpressionStatement[17589-17628]:ExpressionStatement[17589-17628]"
    }, {
      "left" : "if (bits < 0)",
      "right" : "if (bits < 0)",
      "info" : "IfStatement[17641-18819]:IfStatement[17641-18819]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17655-18819]:Block[17655-18819]"
    }, {
      "left" : "if (bits != Base64Variant.BASE64_VALUE_PADDING)",
      "right" : "if (bits != Base64Variant.BASE64_VALUE_PADDING)",
      "info" : "IfStatement[17673-18191]:IfStatement[17673-18191]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17721-18191]:Block[17721-18191]"
    }, {
      "left" : "if (ch == '\"' && !b64variant.usesPadding())",
      "right" : "if (ch == '\"' && !b64variant.usesPadding())",
      "info" : "IfStatement[17826-18106]:IfStatement[17826-18106]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17870-18106]:Block[17870-18106]"
    }, {
      "left" : "decodedData >>= 2;",
      "right" : "decodedData >>= 2;",
      "info" : "ExpressionStatement[17896-17914]:ExpressionStatement[17896-17914]"
    }, {
      "left" : "buffer[outputPtr++] = (byte) (decodedData >> 8);",
      "right" : "buffer[outputPtr++] = (byte) (decodedData >> 8);",
      "info" : "ExpressionStatement[17939-17987]:ExpressionStatement[17939-17987]"
    }, {
      "left" : "buffer[outputPtr++] = (byte) decodedData;",
      "right" : "buffer[outputPtr++] = (byte) decodedData;",
      "info" : "ExpressionStatement[18012-18053]:ExpressionStatement[18012-18053]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[18078-18084]:BreakStatement[18078-18084]"
    }, {
      "left" : "bits = _decodeBase64Escape(b64variant, ch, 3);",
      "right" : "bits = _decodeBase64Escape(b64variant, ch, 3);",
      "info" : "ExpressionStatement[18127-18173]:ExpressionStatement[18127-18173]"
    }, {
      "left" : "if (bits == Base64Variant.BASE64_VALUE_PADDING)",
      "right" : "if (bits == Base64Variant.BASE64_VALUE_PADDING)",
      "info" : "IfStatement[18208-18805]:IfStatement[18208-18805]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18256-18805]:Block[18256-18805]"
    }, {
      "left" : "decodedData >>= 2;",
      "right" : "decodedData >>= 2;",
      "info" : "ExpressionStatement[18608-18626]:ExpressionStatement[18608-18626]"
    }, {
      "left" : "buffer[outputPtr++] = (byte) (decodedData >> 8);",
      "right" : "buffer[outputPtr++] = (byte) (decodedData >> 8);",
      "info" : "ExpressionStatement[18647-18695]:ExpressionStatement[18647-18695]"
    }, {
      "left" : "buffer[outputPtr++] = (byte) decodedData;",
      "right" : "buffer[outputPtr++] = (byte) decodedData;",
      "info" : "ExpressionStatement[18716-18757]:ExpressionStatement[18716-18757]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[18778-18787]:ContinueStatement[18778-18787]"
    }, {
      "left" : "decodedData = (decodedData << 6) | bits;",
      "right" : "decodedData = (decodedData << 6) | bits;",
      "info" : "ExpressionStatement[18886-18926]:ExpressionStatement[18886-18926]"
    }, {
      "left" : "buffer[outputPtr++] = (byte) (decodedData >> 16);",
      "right" : "buffer[outputPtr++] = (byte) (decodedData >> 16);",
      "info" : "ExpressionStatement[18939-18988]:ExpressionStatement[18939-18988]"
    }, {
      "left" : "buffer[outputPtr++] = (byte) (decodedData >> 8);",
      "right" : "buffer[outputPtr++] = (byte) (decodedData >> 8);",
      "info" : "ExpressionStatement[19001-19049]:ExpressionStatement[19001-19049]"
    }, {
      "left" : "buffer[outputPtr++] = (byte) decodedData;",
      "right" : "buffer[outputPtr++] = (byte) decodedData;",
      "info" : "ExpressionStatement[19062-19103]:ExpressionStatement[19062-19103]"
    }, {
      "left" : "_tokenIncomplete = false;",
      "right" : "_tokenIncomplete = false;",
      "info" : "ExpressionStatement[19122-19147]:ExpressionStatement[19122-19147]"
    }, {
      "left" : "if (outputPtr > 0)",
      "right" : "if (outputPtr > 0)",
      "info" : "IfStatement[19156-19269]:IfStatement[19156-19269]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19175-19269]:Block[19175-19269]"
    }, {
      "left" : "outputCount += outputPtr;",
      "right" : "outputCount += outputPtr;",
      "info" : "ExpressionStatement[19189-19214]:ExpressionStatement[19189-19214]"
    }, {
      "left" : "out.write(buffer, 0, outputPtr);",
      "right" : "out.write(buffer, 0, outputPtr);",
      "info" : "ExpressionStatement[19227-19259]:ExpressionStatement[19227-19259]"
    }, {
      "left" : "return outputCount;",
      "right" : "return outputCount;",
      "info" : "ReturnStatement[19278-19297]:ReturnStatement[19278-19297]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[19611-19617]:Modifier[19611-19617]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[19618-19623]:Modifier[19618-19623]"
    }, {
      "left" : "nextToken",
      "right" : "nextToken",
      "info" : "SimpleName[19634-19643]:SimpleName[19634-19643]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19669-23843]:Block[19669-23878]"
    }, {
      "left" : "if (_currToken == JsonToken.FIELD_NAME)",
      "right" : "if (_currToken == JsonToken.FIELD_NAME)",
      "info" : "IfStatement[19892-19980]:IfStatement[19892-19980]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19932-19980]:Block[19932-19980]"
    }, {
      "left" : "return _nextAfterName();",
      "right" : "return _nextAfterName();",
      "info" : "ReturnStatement[19946-19970]:ReturnStatement[19946-19970]"
    }, {
      "left" : "_numTypesValid = NR_UNKNOWN;",
      "right" : "_numTypesValid = NR_UNKNOWN;",
      "info" : "ExpressionStatement[20129-20157]:ExpressionStatement[20129-20157]"
    }, {
      "left" : "if (_tokenIncomplete)",
      "right" : "if (_tokenIncomplete)",
      "info" : "IfStatement[20166-20257]:IfStatement[20166-20257]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20188-20257]:Block[20188-20257]"
    }, {
      "left" : "_skipString();",
      "right" : "_skipString();",
      "info" : "ExpressionStatement[20202-20216]:ExpressionStatement[20202-20216]"
    }, {
      "left" : "int i = _skipWSOrEnd();",
      "right" : "int i = _skipWSOrEnd();",
      "info" : "VariableDeclarationStatement[20266-20289]:VariableDeclarationStatement[20266-20289]"
    }, {
      "left" : "if (i < 0)",
      "right" : "if (i < 0)",
      "info" : "IfStatement[20298-20562]:IfStatement[20298-20562]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20309-20562]:Block[20309-20562]"
    }, {
      "left" : "close();",
      "right" : "close();",
      "info" : "ExpressionStatement[20504-20512]:ExpressionStatement[20504-20512]"
    }, {
      "left" : "return (_currToken = null);",
      "right" : "return (_currToken = null);",
      "info" : "ReturnStatement[20525-20552]:ReturnStatement[20525-20552]"
    }, {
      "left" : "_binaryValue = null;",
      "right" : "_binaryValue = null;",
      "info" : "ExpressionStatement[20613-20633]:ExpressionStatement[20613-20633]"
    }, {
      "left" : "if (i == INT_RBRACKET)",
      "right" : "if (i == INT_RBRACKET)",
      "info" : "IfStatement[20669-20960]:IfStatement[20669-20960]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20692-20960]:Block[20692-20960]"
    }, {
      "left" : "_updateLocation();",
      "right" : "_updateLocation();",
      "info" : "ExpressionStatement[20706-20724]:ExpressionStatement[20706-20724]"
    }, {
      "left" : "if (!_parsingContext.inArray())",
      "right" : "if (!_parsingContext.inArray())",
      "info" : "IfStatement[20737-20836]:IfStatement[20737-20836]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20769-20836]:Block[20769-20836]"
    }, {
      "left" : "_reportMismatchedEndMarker(i, '}');",
      "right" : "_reportMismatchedEndMarker(i, '}');",
      "info" : "ExpressionStatement[20787-20822]:ExpressionStatement[20787-20822]"
    }, {
      "left" : "_parsingContext = _parsingContext.getParent();",
      "right" : "_parsingContext = _parsingContext.getParent();",
      "info" : "ExpressionStatement[20849-20895]:ExpressionStatement[20849-20895]"
    }, {
      "left" : "return (_currToken = JsonToken.END_ARRAY);",
      "right" : "return (_currToken = JsonToken.END_ARRAY);",
      "info" : "ReturnStatement[20908-20950]:ReturnStatement[20908-20950]"
    }, {
      "left" : "if (i == INT_RCURLY)",
      "right" : "if (i == INT_RCURLY)",
      "info" : "IfStatement[20969-21260]:IfStatement[20969-21260]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20990-21260]:Block[20990-21260]"
    }, {
      "left" : "_updateLocation();",
      "right" : "_updateLocation();",
      "info" : "ExpressionStatement[21004-21022]:ExpressionStatement[21004-21022]"
    }, {
      "left" : "if (!_parsingContext.inObject())",
      "right" : "if (!_parsingContext.inObject())",
      "info" : "IfStatement[21035-21135]:IfStatement[21035-21135]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21068-21135]:Block[21068-21135]"
    }, {
      "left" : "_reportMismatchedEndMarker(i, ']');",
      "right" : "_reportMismatchedEndMarker(i, ']');",
      "info" : "ExpressionStatement[21086-21121]:ExpressionStatement[21086-21121]"
    }, {
      "left" : "_parsingContext = _parsingContext.getParent();",
      "right" : "_parsingContext = _parsingContext.getParent();",
      "info" : "ExpressionStatement[21148-21194]:ExpressionStatement[21148-21194]"
    }, {
      "left" : "return (_currToken = JsonToken.END_OBJECT);",
      "right" : "return (_currToken = JsonToken.END_OBJECT);",
      "info" : "ReturnStatement[21207-21250]:ReturnStatement[21207-21250]"
    }, {
      "left" : "if (_parsingContext.expectComma())",
      "right" : "if (_parsingContext.expectComma())",
      "info" : "IfStatement[21314-21391]:IfStatement[21314-21391]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21349-21391]:Block[21349-21391]"
    }, {
      "left" : "i = _skipComma(i);",
      "right" : "i = _skipComma(i);",
      "info" : "ExpressionStatement[21363-21381]:ExpressionStatement[21363-21381]"
    }, {
      "left" : "_updateLocation();",
      "right" : "_updateLocation();",
      "info" : "ExpressionStatement[21400-21418]:ExpressionStatement[21933-21951]"
    }, {
      "left" : "boolean inObject = _parsingContext.inObject();",
      "right" : "boolean inObject = _parsingContext.inObject();",
      "info" : "VariableDeclarationStatement[21589-21635]:VariableDeclarationStatement[21562-21608]"
    }, {
      "left" : "if (inObject)",
      "right" : "if (inObject)",
      "info" : "IfStatement[21644-21916]:IfStatement[21617-21924]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21658-21916]:Block[21631-21924]"
    }, {
      "left" : "String name = (i == INT_QUOTE) ? _parseName() : _handleOddName(i);",
      "right" : "String name = (i == INT_QUOTE) ? _parseName() : _handleOddName(i);",
      "info" : "VariableDeclarationStatement[21713-21779]:VariableDeclarationStatement[21721-21787]"
    }, {
      "left" : "_parsingContext.setCurrentName(name);",
      "right" : "_parsingContext.setCurrentName(name);",
      "info" : "ExpressionStatement[21792-21829]:ExpressionStatement[21800-21837]"
    }, {
      "left" : "_currToken = JsonToken.FIELD_NAME;",
      "right" : "_currToken = JsonToken.FIELD_NAME;",
      "info" : "ExpressionStatement[21842-21876]:ExpressionStatement[21850-21884]"
    }, {
      "left" : "i = _skipColon();",
      "right" : "i = _skipColon();",
      "info" : "ExpressionStatement[21889-21906]:ExpressionStatement[21897-21914]"
    }, {
      "left" : "JsonToken t;",
      "right" : "JsonToken t;",
      "info" : "VariableDeclarationStatement[21978-21990]:VariableDeclarationStatement[22013-22025]"
    }, {
      "left" : "switch (i) {\n        case '\"':\n            _tokenIncomplete = true;\n            t = JsonToken.VALUE_STRING;\n            break;\n        case '[':\n            if (!inObject) {\n                _parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);\n            }\n            t = JsonToken.START_ARRAY;\n            break;\n        case '{':\n            if (!inObject) {\n                _parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);\n            }\n            t = JsonToken.START_OBJECT;\n            break;\n        case ']':\n        case '}':\n            // Error: neither is valid at this point; valid closers have\n            // been handled earlier\n            _reportUnexpectedChar(i, \"expected a value\");\n        case 't':\n            _matchTrue();\n            t = JsonToken.VALUE_TRUE;\n            break;\n        case 'f':\n            _matchFalse();\n            t = JsonToken.VALUE_FALSE;\n            break;\n        case 'n':\n            _matchNull();\n            t = JsonToken.VALUE_NULL;\n            break;\n\n        case '-':\n            /* Should we have separate handling for plus? Although\n             * it is not allowed per se, it may be erroneously used,\n             * and could be indicate by a more specific error message.\n             */\n            t = _parseNegNumber();\n            break;\n        case '0':\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n            t = _parsePosNumber(i);\n            break;\n        default:\n            t = _handleOddValue(i);\n            break;\n        }",
      "right" : "switch (i) {\n        case '\"':\n            _tokenIncomplete = true;\n            t = JsonToken.VALUE_STRING;\n            break;\n        case '[':\n            if (!inObject) {\n                _parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);\n            }\n            t = JsonToken.START_ARRAY;\n            break;\n        case '{':\n            if (!inObject) {\n                _parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);\n            }\n            t = JsonToken.START_OBJECT;\n            break;\n        case ']':\n        case '}':\n            // Error: neither is valid at this point; valid closers have\n            // been handled earlier\n            _reportUnexpectedChar(i, \"expected a value\");\n        case 't':\n            _matchTrue();\n            t = JsonToken.VALUE_TRUE;\n            break;\n        case 'f':\n            _matchFalse();\n            t = JsonToken.VALUE_FALSE;\n            break;\n        case 'n':\n            _matchNull();\n            t = JsonToken.VALUE_NULL;\n            break;\n\n        case '-':\n            /* Should we have separate handling for plus? Although\n             * it is not allowed per se, it may be erroneously used,\n             * and could be indicate by a more specific error message.\n             */\n            t = _parseNegNumber();\n            break;\n        case '0':\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n            t = _parsePosNumber(i);\n            break;\n        default:\n            t = _handleOddValue(i);\n            break;\n        }",
      "info" : "SwitchStatement[22000-23701]:SwitchStatement[22035-23736]"
    }, {
      "left" : "case '\"':",
      "right" : "case '\"':",
      "info" : "SwitchCase[22021-22030]:SwitchCase[22056-22065]"
    }, {
      "left" : "_tokenIncomplete = true;",
      "right" : "_tokenIncomplete = true;",
      "info" : "ExpressionStatement[22043-22067]:ExpressionStatement[22078-22102]"
    }, {
      "left" : "t = JsonToken.VALUE_STRING;",
      "right" : "t = JsonToken.VALUE_STRING;",
      "info" : "ExpressionStatement[22080-22107]:ExpressionStatement[22115-22142]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[22120-22126]:BreakStatement[22155-22161]"
    }, {
      "left" : "case '[':",
      "right" : "case '[':",
      "info" : "SwitchCase[22135-22144]:SwitchCase[22170-22179]"
    }, {
      "left" : "if (!inObject)",
      "right" : "if (!inObject)",
      "info" : "IfStatement[22157-22294]:IfStatement[22192-22329]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22172-22294]:Block[22207-22329]"
    }, {
      "left" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
      "right" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
      "info" : "ExpressionStatement[22190-22280]:ExpressionStatement[22225-22315]"
    }, {
      "left" : "t = JsonToken.START_ARRAY;",
      "right" : "t = JsonToken.START_ARRAY;",
      "info" : "ExpressionStatement[22307-22333]:ExpressionStatement[22342-22368]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[22346-22352]:BreakStatement[22381-22387]"
    }, {
      "left" : "case '{':",
      "right" : "case '{':",
      "info" : "SwitchCase[22361-22370]:SwitchCase[22396-22405]"
    }, {
      "left" : "if (!inObject)",
      "right" : "if (!inObject)",
      "info" : "IfStatement[22383-22521]:IfStatement[22418-22556]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22398-22521]:Block[22433-22556]"
    }, {
      "left" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
      "right" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
      "info" : "ExpressionStatement[22416-22507]:ExpressionStatement[22451-22542]"
    }, {
      "left" : "t = JsonToken.START_OBJECT;",
      "right" : "t = JsonToken.START_OBJECT;",
      "info" : "ExpressionStatement[22534-22561]:ExpressionStatement[22569-22596]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[22574-22580]:BreakStatement[22609-22615]"
    }, {
      "left" : "case ']':",
      "right" : "case ']':",
      "info" : "SwitchCase[22589-22598]:SwitchCase[22624-22633]"
    }, {
      "left" : "case '}':",
      "right" : "case '}':",
      "info" : "SwitchCase[22607-22616]:SwitchCase[22642-22651]"
    }, {
      "left" : "_reportUnexpectedChar(i, \"expected a value\");",
      "right" : "_reportUnexpectedChar(i, \"expected a value\");",
      "info" : "ExpressionStatement[22738-22783]:ExpressionStatement[22773-22818]"
    }, {
      "left" : "case 't':",
      "right" : "case 't':",
      "info" : "SwitchCase[22792-22801]:SwitchCase[22827-22836]"
    }, {
      "left" : "_matchTrue();",
      "right" : "_matchTrue();",
      "info" : "ExpressionStatement[22814-22827]:ExpressionStatement[22849-22862]"
    }, {
      "left" : "t = JsonToken.VALUE_TRUE;",
      "right" : "t = JsonToken.VALUE_TRUE;",
      "info" : "ExpressionStatement[22840-22865]:ExpressionStatement[22875-22900]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[22878-22884]:BreakStatement[22913-22919]"
    }, {
      "left" : "case 'f':",
      "right" : "case 'f':",
      "info" : "SwitchCase[22893-22902]:SwitchCase[22928-22937]"
    }, {
      "left" : "_matchFalse();",
      "right" : "_matchFalse();",
      "info" : "ExpressionStatement[22915-22929]:ExpressionStatement[22950-22964]"
    }, {
      "left" : "t = JsonToken.VALUE_FALSE;",
      "right" : "t = JsonToken.VALUE_FALSE;",
      "info" : "ExpressionStatement[22942-22968]:ExpressionStatement[22977-23003]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[22981-22987]:BreakStatement[23016-23022]"
    }, {
      "left" : "case 'n':",
      "right" : "case 'n':",
      "info" : "SwitchCase[22996-23005]:SwitchCase[23031-23040]"
    }, {
      "left" : "_matchNull();",
      "right" : "_matchNull();",
      "info" : "ExpressionStatement[23018-23031]:ExpressionStatement[23053-23066]"
    }, {
      "left" : "t = JsonToken.VALUE_NULL;",
      "right" : "t = JsonToken.VALUE_NULL;",
      "info" : "ExpressionStatement[23044-23069]:ExpressionStatement[23079-23104]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[23082-23088]:BreakStatement[23117-23123]"
    }, {
      "left" : "case '-':",
      "right" : "case '-':",
      "info" : "SwitchCase[23098-23107]:SwitchCase[23133-23142]"
    }, {
      "left" : "t = _parseNegNumber();",
      "right" : "t = _parseNegNumber();",
      "info" : "ExpressionStatement[23343-23365]:ExpressionStatement[23378-23400]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[23378-23384]:BreakStatement[23413-23419]"
    }, {
      "left" : "case '0':",
      "right" : "case '0':",
      "info" : "SwitchCase[23393-23402]:SwitchCase[23428-23437]"
    }, {
      "left" : "case '1':",
      "right" : "case '1':",
      "info" : "SwitchCase[23411-23420]:SwitchCase[23446-23455]"
    }, {
      "left" : "case '2':",
      "right" : "case '2':",
      "info" : "SwitchCase[23429-23438]:SwitchCase[23464-23473]"
    }, {
      "left" : "case '3':",
      "right" : "case '3':",
      "info" : "SwitchCase[23447-23456]:SwitchCase[23482-23491]"
    }, {
      "left" : "case '4':",
      "right" : "case '4':",
      "info" : "SwitchCase[23465-23474]:SwitchCase[23500-23509]"
    }, {
      "left" : "case '5':",
      "right" : "case '5':",
      "info" : "SwitchCase[23483-23492]:SwitchCase[23518-23527]"
    }, {
      "left" : "case '6':",
      "right" : "case '6':",
      "info" : "SwitchCase[23501-23510]:SwitchCase[23536-23545]"
    }, {
      "left" : "case '7':",
      "right" : "case '7':",
      "info" : "SwitchCase[23519-23528]:SwitchCase[23554-23563]"
    }, {
      "left" : "case '8':",
      "right" : "case '8':",
      "info" : "SwitchCase[23537-23546]:SwitchCase[23572-23581]"
    }, {
      "left" : "case '9':",
      "right" : "case '9':",
      "info" : "SwitchCase[23555-23564]:SwitchCase[23590-23599]"
    }, {
      "left" : "t = _parsePosNumber(i);",
      "right" : "t = _parsePosNumber(i);",
      "info" : "ExpressionStatement[23577-23600]:ExpressionStatement[23612-23635]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[23613-23619]:BreakStatement[23648-23654]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[23628-23636]:SwitchCase[23663-23671]"
    }, {
      "left" : "t = _handleOddValue(i);",
      "right" : "t = _handleOddValue(i);",
      "info" : "ExpressionStatement[23649-23672]:ExpressionStatement[23684-23707]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[23685-23691]:BreakStatement[23720-23726]"
    }, {
      "left" : "if (inObject)",
      "right" : "if (inObject)",
      "info" : "IfStatement[23711-23795]:IfStatement[23746-23830]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23725-23795]:Block[23760-23830]"
    }, {
      "left" : "_nextToken = t;",
      "right" : "_nextToken = t;",
      "info" : "ExpressionStatement[23739-23754]:ExpressionStatement[23774-23789]"
    }, {
      "left" : "return _currToken;",
      "right" : "return _currToken;",
      "info" : "ReturnStatement[23767-23785]:ReturnStatement[23802-23820]"
    }, {
      "left" : "_currToken = t;",
      "right" : "_currToken = t;",
      "info" : "ExpressionStatement[23804-23819]:ExpressionStatement[23839-23854]"
    }, {
      "left" : "return t;",
      "right" : "return t;",
      "info" : "ReturnStatement[23828-23837]:ReturnStatement[23863-23872]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[23849-23856]:Modifier[23884-23891]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[23857-23862]:Modifier[23892-23897]"
    }, {
      "left" : "JsonToken",
      "right" : "JsonToken",
      "info" : "SimpleType[23863-23872]:SimpleType[23898-23907]"
    }, {
      "left" : "_nextAfterName",
      "right" : "_nextAfterName",
      "info" : "SimpleName[23873-23887]:SimpleName[23908-23922]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23894-24516]:Block[23929-24551]"
    }, {
      "left" : "_nameCopied = false;",
      "right" : "_nameCopied = false;",
      "info" : "ExpressionStatement[23904-23924]:ExpressionStatement[23939-23959]"
    }, {
      "left" : "JsonToken t = _nextToken;",
      "right" : "JsonToken t = _nextToken;",
      "info" : "VariableDeclarationStatement[23972-23997]:VariableDeclarationStatement[24007-24032]"
    }, {
      "left" : "_nextToken = null;",
      "right" : "_nextToken = null;",
      "info" : "ExpressionStatement[24006-24024]:ExpressionStatement[24041-24059]"
    }, {
      "left" : "if (t == JsonToken.START_ARRAY)",
      "right" : "if (t == JsonToken.START_ARRAY)",
      "info" : "IfStatement[24177-24477]:IfStatement[24212-24512]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24209-24323]:Block[24244-24358]"
    }, {
      "left" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
      "right" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
      "info" : "ExpressionStatement[24223-24313]:ExpressionStatement[24258-24348]"
    }, {
      "left" : "if (t == JsonToken.START_OBJECT)",
      "right" : "if (t == JsonToken.START_OBJECT)",
      "info" : "IfStatement[24329-24477]:IfStatement[24364-24512]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24362-24477]:Block[24397-24512]"
    }, {
      "left" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
      "right" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
      "info" : "ExpressionStatement[24376-24467]:ExpressionStatement[24411-24502]"
    }, {
      "left" : "return (_currToken = t);",
      "right" : "return (_currToken = t);",
      "info" : "ReturnStatement[24486-24510]:ReturnStatement[24521-24545]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[24748-24754]:Modifier[24783-24789]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[24755-24762]:PrimitiveType[24790-24797]"
    }, {
      "left" : "nextFieldName",
      "right" : "nextFieldName",
      "info" : "SimpleName[24763-24776]:SimpleName[24798-24811]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24825-27349]:Block[24860-27419]"
    }, {
      "left" : "_numTypesValid = NR_UNKNOWN;",
      "right" : "_numTypesValid = NR_UNKNOWN;",
      "info" : "ExpressionStatement[24905-24933]:ExpressionStatement[24940-24968]"
    }, {
      "left" : "if (_currToken == JsonToken.FIELD_NAME)",
      "right" : "if (_currToken == JsonToken.FIELD_NAME)",
      "info" : "IfStatement[24942-25049]:IfStatement[24977-25084]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24982-25049]:Block[25017-25084]"
    }, {
      "left" : "_nextAfterName();",
      "right" : "_nextAfterName();",
      "info" : "ExpressionStatement[24996-25013]:ExpressionStatement[25031-25048]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[25026-25039]:ReturnStatement[25061-25074]"
    }, {
      "left" : "if (_tokenIncomplete)",
      "right" : "if (_tokenIncomplete)",
      "info" : "IfStatement[25058-25118]:IfStatement[25093-25153]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25080-25118]:Block[25115-25153]"
    }, {
      "left" : "_skipString();",
      "right" : "_skipString();",
      "info" : "ExpressionStatement[25094-25108]:ExpressionStatement[25129-25143]"
    }, {
      "left" : "int i = _skipWSOrEnd();",
      "right" : "int i = _skipWSOrEnd();",
      "info" : "VariableDeclarationStatement[25127-25150]:VariableDeclarationStatement[25162-25185]"
    }, {
      "left" : "if (i < 0)",
      "right" : "if (i < 0)",
      "info" : "IfStatement[25159-25259]:IfStatement[25194-25294]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25170-25259]:Block[25205-25294]"
    }, {
      "left" : "close();",
      "right" : "close();",
      "info" : "ExpressionStatement[25184-25192]:ExpressionStatement[25219-25227]"
    }, {
      "left" : "_currToken = null;",
      "right" : "_currToken = null;",
      "info" : "ExpressionStatement[25205-25223]:ExpressionStatement[25240-25258]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[25236-25249]:ReturnStatement[25271-25284]"
    }, {
      "left" : "_binaryValue = null;",
      "right" : "_binaryValue = null;",
      "info" : "ExpressionStatement[25268-25288]:ExpressionStatement[25303-25323]"
    }, {
      "left" : "if (i == INT_RBRACKET)",
      "right" : "if (i == INT_RBRACKET)",
      "info" : "IfStatement[25298-25606]:IfStatement[25333-25641]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25321-25606]:Block[25356-25641]"
    }, {
      "left" : "_updateLocation();",
      "right" : "_updateLocation();",
      "info" : "ExpressionStatement[25335-25353]:ExpressionStatement[25370-25388]"
    }, {
      "left" : "if (!_parsingContext.inArray())",
      "right" : "if (!_parsingContext.inArray())",
      "info" : "IfStatement[25366-25465]:IfStatement[25401-25500]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25398-25465]:Block[25433-25500]"
    }, {
      "left" : "_reportMismatchedEndMarker(i, '}');",
      "right" : "_reportMismatchedEndMarker(i, '}');",
      "info" : "ExpressionStatement[25416-25451]:ExpressionStatement[25451-25486]"
    }, {
      "left" : "_parsingContext = _parsingContext.getParent();",
      "right" : "_parsingContext = _parsingContext.getParent();",
      "info" : "ExpressionStatement[25478-25524]:ExpressionStatement[25513-25559]"
    }, {
      "left" : "_currToken = JsonToken.END_ARRAY;",
      "right" : "_currToken = JsonToken.END_ARRAY;",
      "info" : "ExpressionStatement[25537-25570]:ExpressionStatement[25572-25605]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[25583-25596]:ReturnStatement[25618-25631]"
    }, {
      "left" : "if (i == INT_RCURLY)",
      "right" : "if (i == INT_RCURLY)",
      "info" : "IfStatement[25615-25923]:IfStatement[25650-25958]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25636-25923]:Block[25671-25958]"
    }, {
      "left" : "_updateLocation();",
      "right" : "_updateLocation();",
      "info" : "ExpressionStatement[25650-25668]:ExpressionStatement[25685-25703]"
    }, {
      "left" : "if (!_parsingContext.inObject())",
      "right" : "if (!_parsingContext.inObject())",
      "info" : "IfStatement[25681-25781]:IfStatement[25716-25816]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25714-25781]:Block[25749-25816]"
    }, {
      "left" : "_reportMismatchedEndMarker(i, ']');",
      "right" : "_reportMismatchedEndMarker(i, ']');",
      "info" : "ExpressionStatement[25732-25767]:ExpressionStatement[25767-25802]"
    }, {
      "left" : "_parsingContext = _parsingContext.getParent();",
      "right" : "_parsingContext = _parsingContext.getParent();",
      "info" : "ExpressionStatement[25794-25840]:ExpressionStatement[25829-25875]"
    }, {
      "left" : "_currToken = JsonToken.END_OBJECT;",
      "right" : "_currToken = JsonToken.END_OBJECT;",
      "info" : "ExpressionStatement[25853-25887]:ExpressionStatement[25888-25922]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[25900-25913]:ReturnStatement[25935-25948]"
    }, {
      "left" : "if (_parsingContext.expectComma())",
      "right" : "if (_parsingContext.expectComma())",
      "info" : "IfStatement[25932-26009]:IfStatement[25967-26044]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25967-26009]:Block[26002-26044]"
    }, {
      "left" : "i = _skipComma(i);",
      "right" : "i = _skipComma(i);",
      "info" : "ExpressionStatement[25981-25999]:ExpressionStatement[26016-26034]"
    }, {
      "left" : "_updateLocation();",
      "right" : "_updateLocation();",
      "info" : "ExpressionStatement[26018-26036]:ExpressionStatement[26101-26119]"
    }, {
      "left" : "if (!_parsingContext.inObject())",
      "right" : "if (!_parsingContext.inObject())",
      "info" : "IfStatement[26046-26154]:IfStatement[26054-26193]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26079-26154]:Block[26087-26193]"
    }, {
      "left" : "_nextTokenNotInObject(i);",
      "right" : "_nextTokenNotInObject(i);",
      "info" : "ExpressionStatement[26093-26118]:ExpressionStatement[26132-26157]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[26131-26144]:ReturnStatement[26170-26183]"
    }, {
      "left" : "if (i == INT_QUOTE)",
      "right" : "if (i == INT_QUOTE)",
      "info" : "IfStatement[26164-27285]:IfStatement[26234-27355]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26184-27285]:Block[26254-27355]"
    }, {
      "left" : "char[] nameChars = sstr.asQuotedChars();",
      "right" : "char[] nameChars = sstr.asQuotedChars();",
      "info" : "VariableDeclarationStatement[26263-26303]:VariableDeclarationStatement[26333-26373]"
    }, {
      "left" : "final int len = nameChars.length;",
      "right" : "final int len = nameChars.length;",
      "info" : "VariableDeclarationStatement[26316-26349]:VariableDeclarationStatement[26386-26419]"
    }, {
      "left" : "if ((_inputPtr + len + 4) < _inputEnd)",
      "right" : "if ((_inputPtr + len + 4) < _inputEnd)",
      "info" : "IfStatement[26446-27275]:IfStatement[26516-27345]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26485-27275]:Block[26555-27345]"
    }, {
      "left" : "final int end = _inputPtr+len;",
      "right" : "final int end = _inputPtr+len;",
      "info" : "VariableDeclarationStatement[26562-26592]:VariableDeclarationStatement[26632-26662]"
    }, {
      "left" : "if (_inputBuffer[end] == '\"')",
      "right" : "if (_inputBuffer[end] == '\"')",
      "info" : "IfStatement[26609-27261]:IfStatement[26679-27331]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26639-27261]:Block[26709-27331]"
    }, {
      "left" : "int offset = 0;",
      "right" : "int offset = 0;",
      "info" : "VariableDeclarationStatement[26661-26676]:VariableDeclarationStatement[26731-26746]"
    }, {
      "left" : "int ptr = _inputPtr;",
      "right" : "int ptr = _inputPtr;",
      "info" : "VariableDeclarationStatement[26697-26717]:VariableDeclarationStatement[26767-26787]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[26738-27243]:WhileStatement[26808-27313]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26751-27243]:Block[26821-27313]"
    }, {
      "left" : "if (ptr == end)",
      "right" : "if (ptr == end)",
      "info" : "IfStatement[26777-27025]:IfStatement[26847-27095]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26793-27025]:Block[26863-27095]"
    }, {
      "left" : "_parsingContext.setCurrentName(sstr.getValue());",
      "right" : "_parsingContext.setCurrentName(sstr.getValue());",
      "info" : "ExpressionStatement[26838-26886]:ExpressionStatement[26908-26956]"
    }, {
      "left" : "_isNextTokenNameYes(_skipColonFast(ptr+1));",
      "right" : "_isNextTokenNameYes(_skipColonFast(ptr+1));",
      "info" : "ExpressionStatement[26915-26958]:ExpressionStatement[26985-27028]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[26987-26999]:ReturnStatement[27057-27069]"
    }, {
      "left" : "if (nameChars[offset] != _inputBuffer[ptr])",
      "right" : "if (nameChars[offset] != _inputBuffer[ptr])",
      "info" : "IfStatement[27050-27156]:IfStatement[27120-27226]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27094-27156]:Block[27164-27226]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[27124-27130]:BreakStatement[27194-27200]"
    }, {
      "left" : "++offset;",
      "right" : "++offset;",
      "info" : "ExpressionStatement[27181-27190]:ExpressionStatement[27251-27260]"
    }, {
      "left" : "++ptr;",
      "right" : "++ptr;",
      "info" : "ExpressionStatement[27215-27221]:ExpressionStatement[27285-27291]"
    }, {
      "left" : "return _isNextTokenNameMaybe(i, sstr.getValue());",
      "right" : "return _isNextTokenNameMaybe(i, sstr.getValue());",
      "info" : "ReturnStatement[27294-27343]:ReturnStatement[27364-27413]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[27369-27375]:Modifier[27439-27445]"
    }, {
      "left" : "nextFieldName",
      "right" : "nextFieldName",
      "info" : "SimpleName[27383-27396]:SimpleName[27453-27466]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27422-30106]:Block[27492-30238]"
    }, {
      "left" : "_numTypesValid = NR_UNKNOWN;",
      "right" : "_numTypesValid = NR_UNKNOWN;",
      "info" : "ExpressionStatement[27519-27547]:ExpressionStatement[27589-27617]"
    }, {
      "left" : "if (_currToken == JsonToken.FIELD_NAME)",
      "right" : "if (_currToken == JsonToken.FIELD_NAME)",
      "info" : "IfStatement[27556-27662]:IfStatement[27626-27732]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27596-27662]:Block[27666-27732]"
    }, {
      "left" : "_nextAfterName();",
      "right" : "_nextAfterName();",
      "info" : "ExpressionStatement[27610-27627]:ExpressionStatement[27680-27697]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[27640-27652]:ReturnStatement[27710-27722]"
    }, {
      "left" : "if (_tokenIncomplete)",
      "right" : "if (_tokenIncomplete)",
      "info" : "IfStatement[27671-27731]:IfStatement[27741-27801]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27693-27731]:Block[27763-27801]"
    }, {
      "left" : "_skipString();",
      "right" : "_skipString();",
      "info" : "ExpressionStatement[27707-27721]:ExpressionStatement[27777-27791]"
    }, {
      "left" : "int i = _skipWSOrEnd();",
      "right" : "int i = _skipWSOrEnd();",
      "info" : "VariableDeclarationStatement[27740-27763]:VariableDeclarationStatement[27810-27833]"
    }, {
      "left" : "if (i < 0)",
      "right" : "if (i < 0)",
      "info" : "IfStatement[27772-27871]:IfStatement[27842-27941]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27783-27871]:Block[27853-27941]"
    }, {
      "left" : "close();",
      "right" : "close();",
      "info" : "ExpressionStatement[27797-27805]:ExpressionStatement[27867-27875]"
    }, {
      "left" : "_currToken = null;",
      "right" : "_currToken = null;",
      "info" : "ExpressionStatement[27818-27836]:ExpressionStatement[27888-27906]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[27849-27861]:ReturnStatement[27919-27931]"
    }, {
      "left" : "_binaryValue = null;",
      "right" : "_binaryValue = null;",
      "info" : "ExpressionStatement[27880-27900]:ExpressionStatement[27950-27970]"
    }, {
      "left" : "if (i == INT_RBRACKET)",
      "right" : "if (i == INT_RBRACKET)",
      "info" : "IfStatement[27909-28216]:IfStatement[27979-28286]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27932-28216]:Block[28002-28286]"
    }, {
      "left" : "_updateLocation();",
      "right" : "_updateLocation();",
      "info" : "ExpressionStatement[27946-27964]:ExpressionStatement[28016-28034]"
    }, {
      "left" : "if (!_parsingContext.inArray())",
      "right" : "if (!_parsingContext.inArray())",
      "info" : "IfStatement[27977-28076]:IfStatement[28047-28146]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28009-28076]:Block[28079-28146]"
    }, {
      "left" : "_reportMismatchedEndMarker(i, '}');",
      "right" : "_reportMismatchedEndMarker(i, '}');",
      "info" : "ExpressionStatement[28027-28062]:ExpressionStatement[28097-28132]"
    }, {
      "left" : "_parsingContext = _parsingContext.getParent();",
      "right" : "_parsingContext = _parsingContext.getParent();",
      "info" : "ExpressionStatement[28089-28135]:ExpressionStatement[28159-28205]"
    }, {
      "left" : "_currToken = JsonToken.END_ARRAY;",
      "right" : "_currToken = JsonToken.END_ARRAY;",
      "info" : "ExpressionStatement[28148-28181]:ExpressionStatement[28218-28251]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[28194-28206]:ReturnStatement[28264-28276]"
    }, {
      "left" : "if (i == INT_RCURLY)",
      "right" : "if (i == INT_RCURLY)",
      "info" : "IfStatement[28225-28532]:IfStatement[28295-28602]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28246-28532]:Block[28316-28602]"
    }, {
      "left" : "_updateLocation();",
      "right" : "_updateLocation();",
      "info" : "ExpressionStatement[28260-28278]:ExpressionStatement[28330-28348]"
    }, {
      "left" : "if (!_parsingContext.inObject())",
      "right" : "if (!_parsingContext.inObject())",
      "info" : "IfStatement[28291-28391]:IfStatement[28361-28461]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28324-28391]:Block[28394-28461]"
    }, {
      "left" : "_reportMismatchedEndMarker(i, ']');",
      "right" : "_reportMismatchedEndMarker(i, ']');",
      "info" : "ExpressionStatement[28342-28377]:ExpressionStatement[28412-28447]"
    }, {
      "left" : "_parsingContext = _parsingContext.getParent();",
      "right" : "_parsingContext = _parsingContext.getParent();",
      "info" : "ExpressionStatement[28404-28450]:ExpressionStatement[28474-28520]"
    }, {
      "left" : "_currToken = JsonToken.END_OBJECT;",
      "right" : "_currToken = JsonToken.END_OBJECT;",
      "info" : "ExpressionStatement[28463-28497]:ExpressionStatement[28533-28567]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[28510-28522]:ReturnStatement[28580-28592]"
    }, {
      "left" : "if (_parsingContext.expectComma())",
      "right" : "if (_parsingContext.expectComma())",
      "info" : "IfStatement[28541-28618]:IfStatement[28611-28688]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28576-28618]:Block[28646-28688]"
    }, {
      "left" : "i = _skipComma(i);",
      "right" : "i = _skipComma(i);",
      "info" : "ExpressionStatement[28590-28608]:ExpressionStatement[28660-28678]"
    }, {
      "left" : "_updateLocation();",
      "right" : "_updateLocation();",
      "info" : "ExpressionStatement[28627-28645]:ExpressionStatement[29067-29085]"
    }, {
      "left" : "if (!_parsingContext.inObject())",
      "right" : "if (!_parsingContext.inObject())",
      "info" : "IfStatement[28654-28761]:IfStatement[28697-28835]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28687-28761]:Block[28730-28835]"
    }, {
      "left" : "_nextTokenNotInObject(i);",
      "right" : "_nextTokenNotInObject(i);",
      "info" : "ExpressionStatement[28701-28726]:ExpressionStatement[28775-28800]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[28739-28751]:ReturnStatement[28813-28825]"
    }, {
      "left" : "String name = (i == INT_QUOTE) ? _parseName() : _handleOddName(i);",
      "right" : "String name = (i == INT_QUOTE) ? _parseName() : _handleOddName(i);",
      "info" : "VariableDeclarationStatement[28771-28837]:VariableDeclarationStatement[28876-28942]"
    }, {
      "left" : "_parsingContext.setCurrentName(name);",
      "right" : "_parsingContext.setCurrentName(name);",
      "info" : "ExpressionStatement[28846-28883]:ExpressionStatement[28951-28988]"
    }, {
      "left" : "_currToken = JsonToken.FIELD_NAME;",
      "right" : "_currToken = JsonToken.FIELD_NAME;",
      "info" : "ExpressionStatement[28892-28926]:ExpressionStatement[28997-29031]"
    }, {
      "left" : "i = _skipColon();",
      "right" : "i = _skipColon();",
      "info" : "ExpressionStatement[28935-28952]:ExpressionStatement[29040-29057]"
    }, {
      "left" : "if (i == INT_QUOTE)",
      "right" : "if (i == INT_QUOTE)",
      "info" : "IfStatement[28962-29104]:IfStatement[29094-29236]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28982-29104]:Block[29114-29236]"
    }, {
      "left" : "_tokenIncomplete = true;",
      "right" : "_tokenIncomplete = true;",
      "info" : "ExpressionStatement[28996-29020]:ExpressionStatement[29128-29152]"
    }, {
      "left" : "_nextToken = JsonToken.VALUE_STRING;",
      "right" : "_nextToken = JsonToken.VALUE_STRING;",
      "info" : "ExpressionStatement[29033-29069]:ExpressionStatement[29165-29201]"
    }, {
      "left" : "return name;",
      "right" : "return name;",
      "info" : "ReturnStatement[29082-29094]:ReturnStatement[29214-29226]"
    }, {
      "left" : "JsonToken t;",
      "right" : "JsonToken t;",
      "info" : "VariableDeclarationStatement[29174-29186]:VariableDeclarationStatement[29306-29318]"
    }, {
      "left" : "switch (i) {\n        case '-':\n            t = _parseNegNumber();\n            break;\n        case '0':\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n            t = _parsePosNumber(i);\n            break;\n        case 'f':\n            _matchFalse();\n            t = JsonToken.VALUE_FALSE;\n            break;\n        case 'n':\n            _matchNull();\n            t = JsonToken.VALUE_NULL;\n            break;\n        case 't':\n            _matchTrue();\n            t = JsonToken.VALUE_TRUE;\n            break;\n        case '[':\n            t = JsonToken.START_ARRAY;\n            break;\n        case '{':\n            t = JsonToken.START_OBJECT;\n            break;\n        default:\n            t = _handleOddValue(i);\n            break;\n        }",
      "right" : "switch (i) {\n        case '-':\n            t = _parseNegNumber();\n            break;\n        case '0':\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n            t = _parsePosNumber(i);\n            break;\n        case 'f':\n            _matchFalse();\n            t = JsonToken.VALUE_FALSE;\n            break;\n        case 'n':\n            _matchNull();\n            t = JsonToken.VALUE_NULL;\n            break;\n        case 't':\n            _matchTrue();\n            t = JsonToken.VALUE_TRUE;\n            break;\n        case '[':\n            t = JsonToken.START_ARRAY;\n            break;\n        case '{':\n            t = JsonToken.START_OBJECT;\n            break;\n        default:\n            t = _handleOddValue(i);\n            break;\n        }",
      "info" : "SwitchStatement[29196-30055]:SwitchStatement[29328-30187]"
    }, {
      "left" : "case '-':",
      "right" : "case '-':",
      "info" : "SwitchCase[29217-29226]:SwitchCase[29349-29358]"
    }, {
      "left" : "t = _parseNegNumber();",
      "right" : "t = _parseNegNumber();",
      "info" : "ExpressionStatement[29239-29261]:ExpressionStatement[29371-29393]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[29274-29280]:BreakStatement[29406-29412]"
    }, {
      "left" : "case '0':",
      "right" : "case '0':",
      "info" : "SwitchCase[29289-29298]:SwitchCase[29421-29430]"
    }, {
      "left" : "case '1':",
      "right" : "case '1':",
      "info" : "SwitchCase[29307-29316]:SwitchCase[29439-29448]"
    }, {
      "left" : "case '2':",
      "right" : "case '2':",
      "info" : "SwitchCase[29325-29334]:SwitchCase[29457-29466]"
    }, {
      "left" : "case '3':",
      "right" : "case '3':",
      "info" : "SwitchCase[29343-29352]:SwitchCase[29475-29484]"
    }, {
      "left" : "case '4':",
      "right" : "case '4':",
      "info" : "SwitchCase[29361-29370]:SwitchCase[29493-29502]"
    }, {
      "left" : "case '5':",
      "right" : "case '5':",
      "info" : "SwitchCase[29379-29388]:SwitchCase[29511-29520]"
    }, {
      "left" : "case '6':",
      "right" : "case '6':",
      "info" : "SwitchCase[29397-29406]:SwitchCase[29529-29538]"
    }, {
      "left" : "case '7':",
      "right" : "case '7':",
      "info" : "SwitchCase[29415-29424]:SwitchCase[29547-29556]"
    }, {
      "left" : "case '8':",
      "right" : "case '8':",
      "info" : "SwitchCase[29433-29442]:SwitchCase[29565-29574]"
    }, {
      "left" : "case '9':",
      "right" : "case '9':",
      "info" : "SwitchCase[29451-29460]:SwitchCase[29583-29592]"
    }, {
      "left" : "t = _parsePosNumber(i);",
      "right" : "t = _parsePosNumber(i);",
      "info" : "ExpressionStatement[29473-29496]:ExpressionStatement[29605-29628]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[29509-29515]:BreakStatement[29641-29647]"
    }, {
      "left" : "case 'f':",
      "right" : "case 'f':",
      "info" : "SwitchCase[29524-29533]:SwitchCase[29656-29665]"
    }, {
      "left" : "_matchFalse();",
      "right" : "_matchFalse();",
      "info" : "ExpressionStatement[29546-29560]:ExpressionStatement[29678-29692]"
    }, {
      "left" : "t = JsonToken.VALUE_FALSE;",
      "right" : "t = JsonToken.VALUE_FALSE;",
      "info" : "ExpressionStatement[29573-29599]:ExpressionStatement[29705-29731]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[29612-29618]:BreakStatement[29744-29750]"
    }, {
      "left" : "case 'n':",
      "right" : "case 'n':",
      "info" : "SwitchCase[29627-29636]:SwitchCase[29759-29768]"
    }, {
      "left" : "_matchNull();",
      "right" : "_matchNull();",
      "info" : "ExpressionStatement[29649-29662]:ExpressionStatement[29781-29794]"
    }, {
      "left" : "t = JsonToken.VALUE_NULL;",
      "right" : "t = JsonToken.VALUE_NULL;",
      "info" : "ExpressionStatement[29675-29700]:ExpressionStatement[29807-29832]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[29713-29719]:BreakStatement[29845-29851]"
    }, {
      "left" : "case 't':",
      "right" : "case 't':",
      "info" : "SwitchCase[29728-29737]:SwitchCase[29860-29869]"
    }, {
      "left" : "_matchTrue();",
      "right" : "_matchTrue();",
      "info" : "ExpressionStatement[29750-29763]:ExpressionStatement[29882-29895]"
    }, {
      "left" : "t = JsonToken.VALUE_TRUE;",
      "right" : "t = JsonToken.VALUE_TRUE;",
      "info" : "ExpressionStatement[29776-29801]:ExpressionStatement[29908-29933]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[29814-29820]:BreakStatement[29946-29952]"
    }, {
      "left" : "case '[':",
      "right" : "case '[':",
      "info" : "SwitchCase[29829-29838]:SwitchCase[29961-29970]"
    }, {
      "left" : "t = JsonToken.START_ARRAY;",
      "right" : "t = JsonToken.START_ARRAY;",
      "info" : "ExpressionStatement[29851-29877]:ExpressionStatement[29983-30009]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[29890-29896]:BreakStatement[30022-30028]"
    }, {
      "left" : "case '{':",
      "right" : "case '{':",
      "info" : "SwitchCase[29905-29914]:SwitchCase[30037-30046]"
    }, {
      "left" : "t = JsonToken.START_OBJECT;",
      "right" : "t = JsonToken.START_OBJECT;",
      "info" : "ExpressionStatement[29927-29954]:ExpressionStatement[30059-30086]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[29967-29973]:BreakStatement[30099-30105]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[29982-29990]:SwitchCase[30114-30122]"
    }, {
      "left" : "t = _handleOddValue(i);",
      "right" : "t = _handleOddValue(i);",
      "info" : "ExpressionStatement[30003-30026]:ExpressionStatement[30135-30158]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[30039-30045]:BreakStatement[30171-30177]"
    }, {
      "left" : "_nextToken = t;",
      "right" : "_nextToken = t;",
      "info" : "ExpressionStatement[30064-30079]:ExpressionStatement[30196-30211]"
    }, {
      "left" : "return name;",
      "right" : "return name;",
      "info" : "ReturnStatement[30088-30100]:ReturnStatement[30220-30232]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[30112-30119]:Modifier[30244-30251]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[30120-30125]:Modifier[30252-30257]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[30126-30130]:PrimitiveType[30258-30262]"
    }, {
      "left" : "_isNextTokenNameYes",
      "right" : "_isNextTokenNameYes",
      "info" : "SimpleName[30131-30150]:SimpleName[30263-30282]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30181-31293]:Block[30313-31452]"
    }, {
      "left" : "_currToken = JsonToken.FIELD_NAME;",
      "right" : "_currToken = JsonToken.FIELD_NAME;",
      "info" : "ExpressionStatement[30191-30225]:ExpressionStatement[30323-30357]"
    }, {
      "left" : "switch (i) {\n        case '\"':\n            _tokenIncomplete = true;\n            _nextToken = JsonToken.VALUE_STRING;\n            return;\n        case '[':\n            _nextToken = JsonToken.START_ARRAY;\n            return;\n        case '{':\n            _nextToken = JsonToken.START_OBJECT;\n            return;\n        case 't':\n            _matchToken(\"true\", 1);\n            _nextToken = JsonToken.VALUE_TRUE;\n            return;\n        case 'f':\n            _matchToken(\"false\", 1);\n            _nextToken = JsonToken.VALUE_FALSE;\n            return;\n        case 'n':\n            _matchToken(\"null\", 1);\n            _nextToken = JsonToken.VALUE_NULL;\n            return;\n        case '-':\n            _nextToken = _parseNegNumber();\n            return;\n        case '0':\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n            _nextToken = _parsePosNumber(i);\n            return;\n        }",
      "right" : "switch (i) {\n        case '\"':\n            _tokenIncomplete = true;\n            _nextToken = JsonToken.VALUE_STRING;\n            return;\n        case '[':\n            _nextToken = JsonToken.START_ARRAY;\n            return;\n        case '{':\n            _nextToken = JsonToken.START_OBJECT;\n            return;\n        case 't':\n            _matchToken(\"true\", 1);\n            _nextToken = JsonToken.VALUE_TRUE;\n            return;\n        case 'f':\n            _matchToken(\"false\", 1);\n            _nextToken = JsonToken.VALUE_FALSE;\n            return;\n        case 'n':\n            _matchToken(\"null\", 1);\n            _nextToken = JsonToken.VALUE_NULL;\n            return;\n        case '-':\n            _nextToken = _parseNegNumber();\n            return;\n        case '0':\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n            _nextToken = _parsePosNumber(i);\n            return;\n        }",
      "info" : "SwitchStatement[30235-31246]:SwitchStatement[30394-31405]"
    }, {
      "left" : "case '\"':",
      "right" : "case '\"':",
      "info" : "SwitchCase[30256-30265]:SwitchCase[30415-30424]"
    }, {
      "left" : "_tokenIncomplete = true;",
      "right" : "_tokenIncomplete = true;",
      "info" : "ExpressionStatement[30278-30302]:ExpressionStatement[30437-30461]"
    }, {
      "left" : "_nextToken = JsonToken.VALUE_STRING;",
      "right" : "_nextToken = JsonToken.VALUE_STRING;",
      "info" : "ExpressionStatement[30315-30351]:ExpressionStatement[30474-30510]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[30364-30371]:ReturnStatement[30523-30530]"
    }, {
      "left" : "case '[':",
      "right" : "case '[':",
      "info" : "SwitchCase[30380-30389]:SwitchCase[30539-30548]"
    }, {
      "left" : "_nextToken = JsonToken.START_ARRAY;",
      "right" : "_nextToken = JsonToken.START_ARRAY;",
      "info" : "ExpressionStatement[30402-30437]:ExpressionStatement[30561-30596]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[30450-30457]:ReturnStatement[30609-30616]"
    }, {
      "left" : "case '{':",
      "right" : "case '{':",
      "info" : "SwitchCase[30466-30475]:SwitchCase[30625-30634]"
    }, {
      "left" : "_nextToken = JsonToken.START_OBJECT;",
      "right" : "_nextToken = JsonToken.START_OBJECT;",
      "info" : "ExpressionStatement[30488-30524]:ExpressionStatement[30647-30683]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[30537-30544]:ReturnStatement[30696-30703]"
    }, {
      "left" : "case 't':",
      "right" : "case 't':",
      "info" : "SwitchCase[30553-30562]:SwitchCase[30712-30721]"
    }, {
      "left" : "_matchToken(\"true\", 1);",
      "right" : "_matchToken(\"true\", 1);",
      "info" : "ExpressionStatement[30575-30598]:ExpressionStatement[30734-30757]"
    }, {
      "left" : "_nextToken = JsonToken.VALUE_TRUE;",
      "right" : "_nextToken = JsonToken.VALUE_TRUE;",
      "info" : "ExpressionStatement[30611-30645]:ExpressionStatement[30770-30804]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[30658-30665]:ReturnStatement[30817-30824]"
    }, {
      "left" : "case 'f':",
      "right" : "case 'f':",
      "info" : "SwitchCase[30674-30683]:SwitchCase[30833-30842]"
    }, {
      "left" : "_matchToken(\"false\", 1);",
      "right" : "_matchToken(\"false\", 1);",
      "info" : "ExpressionStatement[30696-30720]:ExpressionStatement[30855-30879]"
    }, {
      "left" : "_nextToken = JsonToken.VALUE_FALSE;",
      "right" : "_nextToken = JsonToken.VALUE_FALSE;",
      "info" : "ExpressionStatement[30733-30768]:ExpressionStatement[30892-30927]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[30781-30788]:ReturnStatement[30940-30947]"
    }, {
      "left" : "case 'n':",
      "right" : "case 'n':",
      "info" : "SwitchCase[30797-30806]:SwitchCase[30956-30965]"
    }, {
      "left" : "_matchToken(\"null\", 1);",
      "right" : "_matchToken(\"null\", 1);",
      "info" : "ExpressionStatement[30819-30842]:ExpressionStatement[30978-31001]"
    }, {
      "left" : "_nextToken = JsonToken.VALUE_NULL;",
      "right" : "_nextToken = JsonToken.VALUE_NULL;",
      "info" : "ExpressionStatement[30855-30889]:ExpressionStatement[31014-31048]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[30902-30909]:ReturnStatement[31061-31068]"
    }, {
      "left" : "case '-':",
      "right" : "case '-':",
      "info" : "SwitchCase[30918-30927]:SwitchCase[31077-31086]"
    }, {
      "left" : "_nextToken = _parseNegNumber();",
      "right" : "_nextToken = _parseNegNumber();",
      "info" : "ExpressionStatement[30940-30971]:ExpressionStatement[31099-31130]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[30984-30991]:ReturnStatement[31143-31150]"
    }, {
      "left" : "case '0':",
      "right" : "case '0':",
      "info" : "SwitchCase[31000-31009]:SwitchCase[31159-31168]"
    }, {
      "left" : "case '1':",
      "right" : "case '1':",
      "info" : "SwitchCase[31018-31027]:SwitchCase[31177-31186]"
    }, {
      "left" : "case '2':",
      "right" : "case '2':",
      "info" : "SwitchCase[31036-31045]:SwitchCase[31195-31204]"
    }, {
      "left" : "case '3':",
      "right" : "case '3':",
      "info" : "SwitchCase[31054-31063]:SwitchCase[31213-31222]"
    }, {
      "left" : "case '4':",
      "right" : "case '4':",
      "info" : "SwitchCase[31072-31081]:SwitchCase[31231-31240]"
    }, {
      "left" : "case '5':",
      "right" : "case '5':",
      "info" : "SwitchCase[31090-31099]:SwitchCase[31249-31258]"
    }, {
      "left" : "case '6':",
      "right" : "case '6':",
      "info" : "SwitchCase[31108-31117]:SwitchCase[31267-31276]"
    }, {
      "left" : "case '7':",
      "right" : "case '7':",
      "info" : "SwitchCase[31126-31135]:SwitchCase[31285-31294]"
    }, {
      "left" : "case '8':",
      "right" : "case '8':",
      "info" : "SwitchCase[31144-31153]:SwitchCase[31303-31312]"
    }, {
      "left" : "case '9':",
      "right" : "case '9':",
      "info" : "SwitchCase[31162-31171]:SwitchCase[31321-31330]"
    }, {
      "left" : "_nextToken = _parsePosNumber(i);",
      "right" : "_nextToken = _parsePosNumber(i);",
      "info" : "ExpressionStatement[31184-31216]:ExpressionStatement[31343-31375]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[31229-31236]:ReturnStatement[31388-31395]"
    }, {
      "left" : "_nextToken = _handleOddValue(i);",
      "right" : "_nextToken = _handleOddValue(i);",
      "info" : "ExpressionStatement[31255-31287]:ExpressionStatement[31414-31446]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[31299-31308]:Modifier[31458-31467]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[31309-31316]:PrimitiveType[31468-31475]"
    }, {
      "left" : "_isNextTokenNameMaybe",
      "right" : "_isNextTokenNameMaybe",
      "info" : "SimpleName[31317-31338]:SimpleName[31476-31497]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31389-32820]:Block[31548-33006]"
    }, {
      "left" : "String name = (i == INT_QUOTE) ? _parseName() : _handleOddName(i);",
      "right" : "String name = (i == INT_QUOTE) ? _parseName() : _handleOddName(i);",
      "info" : "VariableDeclarationStatement[31457-31523]:VariableDeclarationStatement[31616-31682]"
    }, {
      "left" : "_parsingContext.setCurrentName(name);",
      "right" : "_parsingContext.setCurrentName(name);",
      "info" : "ExpressionStatement[31532-31569]:ExpressionStatement[31691-31728]"
    }, {
      "left" : "_currToken = JsonToken.FIELD_NAME;",
      "right" : "_currToken = JsonToken.FIELD_NAME;",
      "info" : "ExpressionStatement[31578-31612]:ExpressionStatement[31737-31771]"
    }, {
      "left" : "i = _skipColon();",
      "right" : "i = _skipColon();",
      "info" : "ExpressionStatement[31621-31638]:ExpressionStatement[31780-31797]"
    }, {
      "left" : "if (i == INT_QUOTE)",
      "right" : "if (i == INT_QUOTE)",
      "info" : "IfStatement[31647-31809]:IfStatement[31833-31995]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31667-31809]:Block[31853-31995]"
    }, {
      "left" : "_tokenIncomplete = true;",
      "right" : "_tokenIncomplete = true;",
      "info" : "ExpressionStatement[31681-31705]:ExpressionStatement[31867-31891]"
    }, {
      "left" : "_nextToken = JsonToken.VALUE_STRING;",
      "right" : "_nextToken = JsonToken.VALUE_STRING;",
      "info" : "ExpressionStatement[31718-31754]:ExpressionStatement[31904-31940]"
    }, {
      "left" : "return nameToMatch.equals(name);",
      "right" : "return nameToMatch.equals(name);",
      "info" : "ReturnStatement[31767-31799]:ReturnStatement[31953-31985]"
    }, {
      "left" : "JsonToken t;",
      "right" : "JsonToken t;",
      "info" : "VariableDeclarationStatement[31869-31881]:VariableDeclarationStatement[32055-32067]"
    }, {
      "left" : "switch (i) {\n        case '-':\n            t = _parseNegNumber();\n            break;\n        case '0':\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n            t = _parsePosNumber(i);\n            break;\n        case 'f':\n            _matchFalse();\n            t = JsonToken.VALUE_FALSE;\n            break;\n        case 'n':\n            _matchNull();\n            t = JsonToken.VALUE_NULL;\n            break;\n        case 't':\n            _matchTrue();\n            t = JsonToken.VALUE_TRUE;\n            break;\n        case '[':\n            t = JsonToken.START_ARRAY;\n            break;\n        case '{':\n            t = JsonToken.START_OBJECT;\n            break;\n        default:\n            t = _handleOddValue(i);\n            break;\n        }",
      "right" : "switch (i) {\n        case '-':\n            t = _parseNegNumber();\n            break;\n        case '0':\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n            t = _parsePosNumber(i);\n            break;\n        case 'f':\n            _matchFalse();\n            t = JsonToken.VALUE_FALSE;\n            break;\n        case 'n':\n            _matchNull();\n            t = JsonToken.VALUE_NULL;\n            break;\n        case 't':\n            _matchTrue();\n            t = JsonToken.VALUE_TRUE;\n            break;\n        case '[':\n            t = JsonToken.START_ARRAY;\n            break;\n        case '{':\n            t = JsonToken.START_OBJECT;\n            break;\n        default:\n            t = _handleOddValue(i);\n            break;\n        }",
      "info" : "SwitchStatement[31890-32749]:SwitchStatement[32076-32935]"
    }, {
      "left" : "case '-':",
      "right" : "case '-':",
      "info" : "SwitchCase[31911-31920]:SwitchCase[32097-32106]"
    }, {
      "left" : "t = _parseNegNumber();",
      "right" : "t = _parseNegNumber();",
      "info" : "ExpressionStatement[31933-31955]:ExpressionStatement[32119-32141]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[31968-31974]:BreakStatement[32154-32160]"
    }, {
      "left" : "case '0':",
      "right" : "case '0':",
      "info" : "SwitchCase[31983-31992]:SwitchCase[32169-32178]"
    }, {
      "left" : "case '1':",
      "right" : "case '1':",
      "info" : "SwitchCase[32001-32010]:SwitchCase[32187-32196]"
    }, {
      "left" : "case '2':",
      "right" : "case '2':",
      "info" : "SwitchCase[32019-32028]:SwitchCase[32205-32214]"
    }, {
      "left" : "case '3':",
      "right" : "case '3':",
      "info" : "SwitchCase[32037-32046]:SwitchCase[32223-32232]"
    }, {
      "left" : "case '4':",
      "right" : "case '4':",
      "info" : "SwitchCase[32055-32064]:SwitchCase[32241-32250]"
    }, {
      "left" : "case '5':",
      "right" : "case '5':",
      "info" : "SwitchCase[32073-32082]:SwitchCase[32259-32268]"
    }, {
      "left" : "case '6':",
      "right" : "case '6':",
      "info" : "SwitchCase[32091-32100]:SwitchCase[32277-32286]"
    }, {
      "left" : "case '7':",
      "right" : "case '7':",
      "info" : "SwitchCase[32109-32118]:SwitchCase[32295-32304]"
    }, {
      "left" : "case '8':",
      "right" : "case '8':",
      "info" : "SwitchCase[32127-32136]:SwitchCase[32313-32322]"
    }, {
      "left" : "case '9':",
      "right" : "case '9':",
      "info" : "SwitchCase[32145-32154]:SwitchCase[32331-32340]"
    }, {
      "left" : "t = _parsePosNumber(i);",
      "right" : "t = _parsePosNumber(i);",
      "info" : "ExpressionStatement[32167-32190]:ExpressionStatement[32353-32376]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[32203-32209]:BreakStatement[32389-32395]"
    }, {
      "left" : "case 'f':",
      "right" : "case 'f':",
      "info" : "SwitchCase[32218-32227]:SwitchCase[32404-32413]"
    }, {
      "left" : "_matchFalse();",
      "right" : "_matchFalse();",
      "info" : "ExpressionStatement[32240-32254]:ExpressionStatement[32426-32440]"
    }, {
      "left" : "t = JsonToken.VALUE_FALSE;",
      "right" : "t = JsonToken.VALUE_FALSE;",
      "info" : "ExpressionStatement[32267-32293]:ExpressionStatement[32453-32479]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[32306-32312]:BreakStatement[32492-32498]"
    }, {
      "left" : "case 'n':",
      "right" : "case 'n':",
      "info" : "SwitchCase[32321-32330]:SwitchCase[32507-32516]"
    }, {
      "left" : "_matchNull();",
      "right" : "_matchNull();",
      "info" : "ExpressionStatement[32343-32356]:ExpressionStatement[32529-32542]"
    }, {
      "left" : "t = JsonToken.VALUE_NULL;",
      "right" : "t = JsonToken.VALUE_NULL;",
      "info" : "ExpressionStatement[32369-32394]:ExpressionStatement[32555-32580]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[32407-32413]:BreakStatement[32593-32599]"
    }, {
      "left" : "case 't':",
      "right" : "case 't':",
      "info" : "SwitchCase[32422-32431]:SwitchCase[32608-32617]"
    }, {
      "left" : "_matchTrue();",
      "right" : "_matchTrue();",
      "info" : "ExpressionStatement[32444-32457]:ExpressionStatement[32630-32643]"
    }, {
      "left" : "t = JsonToken.VALUE_TRUE;",
      "right" : "t = JsonToken.VALUE_TRUE;",
      "info" : "ExpressionStatement[32470-32495]:ExpressionStatement[32656-32681]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[32508-32514]:BreakStatement[32694-32700]"
    }, {
      "left" : "case '[':",
      "right" : "case '[':",
      "info" : "SwitchCase[32523-32532]:SwitchCase[32709-32718]"
    }, {
      "left" : "t = JsonToken.START_ARRAY;",
      "right" : "t = JsonToken.START_ARRAY;",
      "info" : "ExpressionStatement[32545-32571]:ExpressionStatement[32731-32757]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[32584-32590]:BreakStatement[32770-32776]"
    }, {
      "left" : "case '{':",
      "right" : "case '{':",
      "info" : "SwitchCase[32599-32608]:SwitchCase[32785-32794]"
    }, {
      "left" : "t = JsonToken.START_OBJECT;",
      "right" : "t = JsonToken.START_OBJECT;",
      "info" : "ExpressionStatement[32621-32648]:ExpressionStatement[32807-32834]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[32661-32667]:BreakStatement[32847-32853]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[32676-32684]:SwitchCase[32862-32870]"
    }, {
      "left" : "t = _handleOddValue(i);",
      "right" : "t = _handleOddValue(i);",
      "info" : "ExpressionStatement[32697-32720]:ExpressionStatement[32883-32906]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[32733-32739]:BreakStatement[32919-32925]"
    }, {
      "left" : "_nextToken = t;",
      "right" : "_nextToken = t;",
      "info" : "ExpressionStatement[32758-32773]:ExpressionStatement[32944-32959]"
    }, {
      "left" : "return nameToMatch.equals(name);",
      "right" : "return nameToMatch.equals(name);",
      "info" : "ReturnStatement[32782-32814]:ReturnStatement[32968-33000]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[32826-32833]:Modifier[33012-33019]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[32834-32839]:Modifier[33020-33025]"
    }, {
      "left" : "JsonToken",
      "right" : "JsonToken",
      "info" : "SimpleType[32840-32849]:SimpleType[33026-33035]"
    }, {
      "left" : "_nextTokenNotInObject",
      "right" : "_nextTokenNotInObject",
      "info" : "SimpleName[32850-32871]:SimpleName[33036-33057]"
    }, {
      "left" : "int i",
      "right" : "int i",
      "info" : "SingleVariableDeclaration[32872-32877]:SingleVariableDeclaration[33058-33063]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[32886-32897]:SimpleType[33072-33083]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32902-34344]:Block[33088-34530]"
    }, {
      "left" : "if (i == INT_QUOTE)",
      "right" : "if (i == INT_QUOTE)",
      "info" : "IfStatement[32912-33038]:IfStatement[33098-33224]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32932-33038]:Block[33118-33224]"
    }, {
      "left" : "_tokenIncomplete = true;",
      "right" : "_tokenIncomplete = true;",
      "info" : "ExpressionStatement[32946-32970]:ExpressionStatement[33132-33156]"
    }, {
      "left" : "return (_currToken = JsonToken.VALUE_STRING);",
      "right" : "return (_currToken = JsonToken.VALUE_STRING);",
      "info" : "ReturnStatement[32983-33028]:ReturnStatement[33169-33214]"
    }, {
      "left" : "switch (i) {\n        case '[':\n            _parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);\n            return (_currToken = JsonToken.START_ARRAY);\n        case '{':\n            _parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);\n            return (_currToken = JsonToken.START_OBJECT);\n        case 't':\n            _matchToken(\"true\", 1);\n            return (_currToken = JsonToken.VALUE_TRUE);\n        case 'f':\n            _matchToken(\"false\", 1);\n            return (_currToken = JsonToken.VALUE_FALSE);\n        case 'n':\n            _matchToken(\"null\", 1);\n            return (_currToken = JsonToken.VALUE_NULL);\n        case '-':\n            return (_currToken = _parseNegNumber());\n            /* Should we have separate handling for plus? Although\n             * it is not allowed per se, it may be erroneously used,\n             * and could be indicated by a more specific error message.\n             */\n        case '0':\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n            return (_currToken = _parsePosNumber(i));\n        }",
      "right" : "switch (i) {\n        case '[':\n            _parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);\n            return (_currToken = JsonToken.START_ARRAY);\n        case '{':\n            _parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);\n            return (_currToken = JsonToken.START_OBJECT);\n        case 't':\n            _matchToken(\"true\", 1);\n            return (_currToken = JsonToken.VALUE_TRUE);\n        case 'f':\n            _matchToken(\"false\", 1);\n            return (_currToken = JsonToken.VALUE_FALSE);\n        case 'n':\n            _matchToken(\"null\", 1);\n            return (_currToken = JsonToken.VALUE_NULL);\n        case '-':\n            return (_currToken = _parseNegNumber());\n            /* Should we have separate handling for plus? Although\n             * it is not allowed per se, it may be erroneously used,\n             * and could be indicated by a more specific error message.\n             */\n        case '0':\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n            return (_currToken = _parsePosNumber(i));\n        }",
      "info" : "SwitchStatement[33047-34288]:SwitchStatement[33233-34474]"
    }, {
      "left" : "case '[':",
      "right" : "case '[':",
      "info" : "SwitchCase[33068-33077]:SwitchCase[33254-33263]"
    }, {
      "left" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
      "right" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
      "info" : "ExpressionStatement[33090-33180]:ExpressionStatement[33276-33366]"
    }, {
      "left" : "return (_currToken = JsonToken.START_ARRAY);",
      "right" : "return (_currToken = JsonToken.START_ARRAY);",
      "info" : "ReturnStatement[33193-33237]:ReturnStatement[33379-33423]"
    }, {
      "left" : "case '{':",
      "right" : "case '{':",
      "info" : "SwitchCase[33246-33255]:SwitchCase[33432-33441]"
    }, {
      "left" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
      "right" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
      "info" : "ExpressionStatement[33268-33359]:ExpressionStatement[33454-33545]"
    }, {
      "left" : "return (_currToken = JsonToken.START_OBJECT);",
      "right" : "return (_currToken = JsonToken.START_OBJECT);",
      "info" : "ReturnStatement[33372-33417]:ReturnStatement[33558-33603]"
    }, {
      "left" : "case 't':",
      "right" : "case 't':",
      "info" : "SwitchCase[33426-33435]:SwitchCase[33612-33621]"
    }, {
      "left" : "_matchToken(\"true\", 1);",
      "right" : "_matchToken(\"true\", 1);",
      "info" : "ExpressionStatement[33448-33471]:ExpressionStatement[33634-33657]"
    }, {
      "left" : "return (_currToken = JsonToken.VALUE_TRUE);",
      "right" : "return (_currToken = JsonToken.VALUE_TRUE);",
      "info" : "ReturnStatement[33484-33527]:ReturnStatement[33670-33713]"
    }, {
      "left" : "case 'f':",
      "right" : "case 'f':",
      "info" : "SwitchCase[33536-33545]:SwitchCase[33722-33731]"
    }, {
      "left" : "_matchToken(\"false\", 1);",
      "right" : "_matchToken(\"false\", 1);",
      "info" : "ExpressionStatement[33558-33582]:ExpressionStatement[33744-33768]"
    }, {
      "left" : "return (_currToken = JsonToken.VALUE_FALSE);",
      "right" : "return (_currToken = JsonToken.VALUE_FALSE);",
      "info" : "ReturnStatement[33595-33639]:ReturnStatement[33781-33825]"
    }, {
      "left" : "case 'n':",
      "right" : "case 'n':",
      "info" : "SwitchCase[33648-33657]:SwitchCase[33834-33843]"
    }, {
      "left" : "_matchToken(\"null\", 1);",
      "right" : "_matchToken(\"null\", 1);",
      "info" : "ExpressionStatement[33670-33693]:ExpressionStatement[33856-33879]"
    }, {
      "left" : "return (_currToken = JsonToken.VALUE_NULL);",
      "right" : "return (_currToken = JsonToken.VALUE_NULL);",
      "info" : "ReturnStatement[33706-33749]:ReturnStatement[33892-33935]"
    }, {
      "left" : "case '-':",
      "right" : "case '-':",
      "info" : "SwitchCase[33758-33767]:SwitchCase[33944-33953]"
    }, {
      "left" : "return (_currToken = _parseNegNumber());",
      "right" : "return (_currToken = _parseNegNumber());",
      "info" : "ReturnStatement[33780-33820]:ReturnStatement[33966-34006]"
    }, {
      "left" : "case '0':",
      "right" : "case '0':",
      "info" : "SwitchCase[34053-34062]:SwitchCase[34239-34248]"
    }, {
      "left" : "case '1':",
      "right" : "case '1':",
      "info" : "SwitchCase[34071-34080]:SwitchCase[34257-34266]"
    }, {
      "left" : "case '2':",
      "right" : "case '2':",
      "info" : "SwitchCase[34089-34098]:SwitchCase[34275-34284]"
    }, {
      "left" : "case '3':",
      "right" : "case '3':",
      "info" : "SwitchCase[34107-34116]:SwitchCase[34293-34302]"
    }, {
      "left" : "case '4':",
      "right" : "case '4':",
      "info" : "SwitchCase[34125-34134]:SwitchCase[34311-34320]"
    }, {
      "left" : "case '5':",
      "right" : "case '5':",
      "info" : "SwitchCase[34143-34152]:SwitchCase[34329-34338]"
    }, {
      "left" : "case '6':",
      "right" : "case '6':",
      "info" : "SwitchCase[34161-34170]:SwitchCase[34347-34356]"
    }, {
      "left" : "case '7':",
      "right" : "case '7':",
      "info" : "SwitchCase[34179-34188]:SwitchCase[34365-34374]"
    }, {
      "left" : "case '8':",
      "right" : "case '8':",
      "info" : "SwitchCase[34197-34206]:SwitchCase[34383-34392]"
    }, {
      "left" : "case '9':",
      "right" : "case '9':",
      "info" : "SwitchCase[34215-34224]:SwitchCase[34401-34410]"
    }, {
      "left" : "return (_currToken = _parsePosNumber(i));",
      "right" : "return (_currToken = _parsePosNumber(i));",
      "info" : "ReturnStatement[34237-34278]:ReturnStatement[34423-34464]"
    }, {
      "left" : "return (_currToken = _handleOddValue(i));",
      "right" : "return (_currToken = _handleOddValue(i));",
      "info" : "ReturnStatement[34297-34338]:ReturnStatement[34483-34524]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[34404-34413]:MarkerAnnotation[34590-34599]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[34418-34424]:Modifier[34604-34610]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[34425-34430]:Modifier[34611-34616]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[34431-34437]:SimpleType[34617-34623]"
    }, {
      "left" : "nextTextValue",
      "right" : "nextTextValue",
      "info" : "SimpleName[34438-34451]:SimpleName[34624-34637]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[34461-34472]:SimpleType[34647-34658]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34477-35447]:Block[34663-35633]"
    }, {
      "left" : "if (_currToken == JsonToken.FIELD_NAME)",
      "right" : "if (_currToken == JsonToken.FIELD_NAME)",
      "info" : "IfStatement[34487-35318]:IfStatement[34673-35504]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34527-35318]:Block[34713-35504]"
    }, {
      "left" : "_nameCopied = false;",
      "right" : "_nameCopied = false;",
      "info" : "ExpressionStatement[34580-34600]:ExpressionStatement[34766-34786]"
    }, {
      "left" : "JsonToken t = _nextToken;",
      "right" : "JsonToken t = _nextToken;",
      "info" : "VariableDeclarationStatement[34613-34638]:VariableDeclarationStatement[34799-34824]"
    }, {
      "left" : "_nextToken = null;",
      "right" : "_nextToken = null;",
      "info" : "ExpressionStatement[34651-34669]:ExpressionStatement[34837-34855]"
    }, {
      "left" : "_currToken = t;",
      "right" : "_currToken = t;",
      "info" : "ExpressionStatement[34682-34697]:ExpressionStatement[34868-34883]"
    }, {
      "left" : "if (t == JsonToken.VALUE_STRING)",
      "right" : "if (t == JsonToken.VALUE_STRING)",
      "info" : "IfStatement[34710-34954]:IfStatement[34896-35140]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34743-34954]:Block[34929-35140]"
    }, {
      "left" : "if (_tokenIncomplete)",
      "right" : "if (_tokenIncomplete)",
      "info" : "IfStatement[34761-34885]:IfStatement[34947-35071]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34783-34885]:Block[34969-35071]"
    }, {
      "left" : "_tokenIncomplete = false;",
      "right" : "_tokenIncomplete = false;",
      "info" : "ExpressionStatement[34805-34830]:ExpressionStatement[34991-35016]"
    }, {
      "left" : "_finishString();",
      "right" : "_finishString();",
      "info" : "ExpressionStatement[34851-34867]:ExpressionStatement[35037-35053]"
    }, {
      "left" : "return _textBuffer.contentsAsString();",
      "right" : "return _textBuffer.contentsAsString();",
      "info" : "ReturnStatement[34902-34940]:ReturnStatement[35088-35126]"
    }, {
      "left" : "if (t == JsonToken.START_ARRAY)",
      "right" : "if (t == JsonToken.START_ARRAY)",
      "info" : "IfStatement[34967-35283]:IfStatement[35153-35469]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34999-35121]:Block[35185-35307]"
    }, {
      "left" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
      "right" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
      "info" : "ExpressionStatement[35017-35107]:ExpressionStatement[35203-35293]"
    }, {
      "left" : "if (t == JsonToken.START_OBJECT)",
      "right" : "if (t == JsonToken.START_OBJECT)",
      "info" : "IfStatement[35127-35283]:IfStatement[35313-35469]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35160-35283]:Block[35346-35469]"
    }, {
      "left" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
      "right" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
      "info" : "ExpressionStatement[35178-35269]:ExpressionStatement[35364-35455]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[35296-35308]:ReturnStatement[35482-35494]"
    }, {
      "left" : "return (nextToken() == JsonToken.VALUE_STRING) ? getText() : null;",
      "right" : "return (nextToken() == JsonToken.VALUE_STRING) ? getText() : null;",
      "info" : "ReturnStatement[35375-35441]:ReturnStatement[35561-35627]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[35503-35512]:MarkerAnnotation[35689-35698]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[35517-35523]:Modifier[35703-35709]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[35524-35529]:Modifier[35710-35715]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[35530-35533]:PrimitiveType[35716-35719]"
    }, {
      "left" : "nextIntValue",
      "right" : "nextIntValue",
      "info" : "SimpleName[35534-35546]:SimpleName[35720-35732]"
    }, {
      "left" : "int defaultValue",
      "right" : "int defaultValue",
      "info" : "SingleVariableDeclaration[35547-35563]:SingleVariableDeclaration[35733-35749]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[35572-35583]:SimpleType[35758-35769]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35588-36389]:Block[35774-36575]"
    }, {
      "left" : "if (_currToken == JsonToken.FIELD_NAME)",
      "right" : "if (_currToken == JsonToken.FIELD_NAME)",
      "info" : "IfStatement[35598-36244]:IfStatement[35784-36430]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35638-36244]:Block[35824-36430]"
    }, {
      "left" : "_nameCopied = false;",
      "right" : "_nameCopied = false;",
      "info" : "ExpressionStatement[35652-35672]:ExpressionStatement[35838-35858]"
    }, {
      "left" : "JsonToken t = _nextToken;",
      "right" : "JsonToken t = _nextToken;",
      "info" : "VariableDeclarationStatement[35685-35710]:VariableDeclarationStatement[35871-35896]"
    }, {
      "left" : "_nextToken = null;",
      "right" : "_nextToken = null;",
      "info" : "ExpressionStatement[35723-35741]:ExpressionStatement[35909-35927]"
    }, {
      "left" : "_currToken = t;",
      "right" : "_currToken = t;",
      "info" : "ExpressionStatement[35754-35769]:ExpressionStatement[35940-35955]"
    }, {
      "left" : "if (t == JsonToken.VALUE_NUMBER_INT)",
      "right" : "if (t == JsonToken.VALUE_NUMBER_INT)",
      "info" : "IfStatement[35782-35872]:IfStatement[35968-36058]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35819-35872]:Block[36005-36058]"
    }, {
      "left" : "return getIntValue();",
      "right" : "return getIntValue();",
      "info" : "ReturnStatement[35837-35858]:ReturnStatement[36023-36044]"
    }, {
      "left" : "if (t == JsonToken.START_ARRAY)",
      "right" : "if (t == JsonToken.START_ARRAY)",
      "info" : "IfStatement[35885-36201]:IfStatement[36071-36387]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35917-36039]:Block[36103-36225]"
    }, {
      "left" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
      "right" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
      "info" : "ExpressionStatement[35935-36025]:ExpressionStatement[36121-36211]"
    }, {
      "left" : "if (t == JsonToken.START_OBJECT)",
      "right" : "if (t == JsonToken.START_OBJECT)",
      "info" : "IfStatement[36045-36201]:IfStatement[36231-36387]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36078-36201]:Block[36264-36387]"
    }, {
      "left" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
      "right" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
      "info" : "ExpressionStatement[36096-36187]:ExpressionStatement[36282-36373]"
    }, {
      "left" : "return defaultValue;",
      "right" : "return defaultValue;",
      "info" : "ReturnStatement[36214-36234]:ReturnStatement[36400-36420]"
    }, {
      "left" : "return (nextToken() == JsonToken.VALUE_NUMBER_INT) ? getIntValue() : defaultValue;",
      "right" : "return (nextToken() == JsonToken.VALUE_NUMBER_INT) ? getIntValue() : defaultValue;",
      "info" : "ReturnStatement[36301-36383]:ReturnStatement[36487-36569]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[36445-36454]:MarkerAnnotation[36631-36640]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[36459-36465]:Modifier[36645-36651]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[36466-36471]:Modifier[36652-36657]"
    }, {
      "left" : "long",
      "right" : "long",
      "info" : "PrimitiveType[36472-36476]:PrimitiveType[36658-36662]"
    }, {
      "left" : "nextLongValue",
      "right" : "nextLongValue",
      "info" : "SimpleName[36477-36490]:SimpleName[36663-36676]"
    }, {
      "left" : "long defaultValue",
      "right" : "long defaultValue",
      "info" : "SingleVariableDeclaration[36491-36508]:SingleVariableDeclaration[36677-36694]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[36517-36528]:SimpleType[36703-36714]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36533-37375]:Block[36719-37561]"
    }, {
      "left" : "if (_currToken == JsonToken.FIELD_NAME)",
      "right" : "if (_currToken == JsonToken.FIELD_NAME)",
      "info" : "IfStatement[36543-37229]:IfStatement[36729-37415]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36583-37229]:Block[36769-37415]"
    }, {
      "left" : "_nameCopied = false;",
      "right" : "_nameCopied = false;",
      "info" : "ExpressionStatement[36636-36656]:ExpressionStatement[36822-36842]"
    }, {
      "left" : "JsonToken t = _nextToken;",
      "right" : "JsonToken t = _nextToken;",
      "info" : "VariableDeclarationStatement[36669-36694]:VariableDeclarationStatement[36855-36880]"
    }, {
      "left" : "_nextToken = null;",
      "right" : "_nextToken = null;",
      "info" : "ExpressionStatement[36707-36725]:ExpressionStatement[36893-36911]"
    }, {
      "left" : "_currToken = t;",
      "right" : "_currToken = t;",
      "info" : "ExpressionStatement[36738-36753]:ExpressionStatement[36924-36939]"
    }, {
      "left" : "if (t == JsonToken.VALUE_NUMBER_INT)",
      "right" : "if (t == JsonToken.VALUE_NUMBER_INT)",
      "info" : "IfStatement[36766-36857]:IfStatement[36952-37043]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36803-36857]:Block[36989-37043]"
    }, {
      "left" : "return getLongValue();",
      "right" : "return getLongValue();",
      "info" : "ReturnStatement[36821-36843]:ReturnStatement[37007-37029]"
    }, {
      "left" : "if (t == JsonToken.START_ARRAY)",
      "right" : "if (t == JsonToken.START_ARRAY)",
      "info" : "IfStatement[36870-37186]:IfStatement[37056-37372]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36902-37024]:Block[37088-37210]"
    }, {
      "left" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
      "right" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
      "info" : "ExpressionStatement[36920-37010]:ExpressionStatement[37106-37196]"
    }, {
      "left" : "if (t == JsonToken.START_OBJECT)",
      "right" : "if (t == JsonToken.START_OBJECT)",
      "info" : "IfStatement[37030-37186]:IfStatement[37216-37372]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37063-37186]:Block[37249-37372]"
    }, {
      "left" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
      "right" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
      "info" : "ExpressionStatement[37081-37172]:ExpressionStatement[37267-37358]"
    }, {
      "left" : "return defaultValue;",
      "right" : "return defaultValue;",
      "info" : "ReturnStatement[37199-37219]:ReturnStatement[37385-37405]"
    }, {
      "left" : "return (nextToken() == JsonToken.VALUE_NUMBER_INT) ? getLongValue() : defaultValue;",
      "right" : "return (nextToken() == JsonToken.VALUE_NUMBER_INT) ? getLongValue() : defaultValue;",
      "info" : "ReturnStatement[37286-37369]:ReturnStatement[37472-37555]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[37435-37444]:MarkerAnnotation[37621-37630]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[37449-37455]:Modifier[37635-37641]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[37456-37461]:Modifier[37642-37647]"
    }, {
      "left" : "Boolean",
      "right" : "Boolean",
      "info" : "SimpleType[37462-37469]:SimpleType[37648-37655]"
    }, {
      "left" : "nextBooleanValue",
      "right" : "nextBooleanValue",
      "info" : "SimpleName[37470-37486]:SimpleName[37656-37672]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[37496-37507]:SimpleType[37682-37693]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37512-38522]:Block[37698-38708]"
    }, {
      "left" : "if (_currToken == JsonToken.FIELD_NAME)",
      "right" : "if (_currToken == JsonToken.FIELD_NAME)",
      "info" : "IfStatement[37522-38290]:IfStatement[37708-38476]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37562-38290]:Block[37748-38476]"
    }, {
      "left" : "_nameCopied = false;",
      "right" : "_nameCopied = false;",
      "info" : "ExpressionStatement[37615-37635]:ExpressionStatement[37801-37821]"
    }, {
      "left" : "JsonToken t = _nextToken;",
      "right" : "JsonToken t = _nextToken;",
      "info" : "VariableDeclarationStatement[37648-37673]:VariableDeclarationStatement[37834-37859]"
    }, {
      "left" : "_nextToken = null;",
      "right" : "_nextToken = null;",
      "info" : "ExpressionStatement[37686-37704]:ExpressionStatement[37872-37890]"
    }, {
      "left" : "_currToken = t;",
      "right" : "_currToken = t;",
      "info" : "ExpressionStatement[37717-37732]:ExpressionStatement[37903-37918]"
    }, {
      "left" : "if (t == JsonToken.VALUE_TRUE)",
      "right" : "if (t == JsonToken.VALUE_TRUE)",
      "info" : "IfStatement[37745-37828]:IfStatement[37931-38014]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37776-37828]:Block[37962-38014]"
    }, {
      "left" : "return Boolean.TRUE;",
      "right" : "return Boolean.TRUE;",
      "info" : "ReturnStatement[37794-37814]:ReturnStatement[37980-38000]"
    }, {
      "left" : "if (t == JsonToken.VALUE_FALSE)",
      "right" : "if (t == JsonToken.VALUE_FALSE)",
      "info" : "IfStatement[37841-37926]:IfStatement[38027-38112]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37873-37926]:Block[38059-38112]"
    }, {
      "left" : "return Boolean.FALSE;",
      "right" : "return Boolean.FALSE;",
      "info" : "ReturnStatement[37891-37912]:ReturnStatement[38077-38098]"
    }, {
      "left" : "if (t == JsonToken.START_ARRAY)",
      "right" : "if (t == JsonToken.START_ARRAY)",
      "info" : "IfStatement[37939-38255]:IfStatement[38125-38441]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37971-38093]:Block[38157-38279]"
    }, {
      "left" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
      "right" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
      "info" : "ExpressionStatement[37989-38079]:ExpressionStatement[38175-38265]"
    }, {
      "left" : "if (t == JsonToken.START_OBJECT)",
      "right" : "if (t == JsonToken.START_OBJECT)",
      "info" : "IfStatement[38099-38255]:IfStatement[38285-38441]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38132-38255]:Block[38318-38441]"
    }, {
      "left" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
      "right" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
      "info" : "ExpressionStatement[38150-38241]:ExpressionStatement[38336-38427]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[38268-38280]:ReturnStatement[38454-38466]"
    }, {
      "left" : "JsonToken t = nextToken();",
      "right" : "JsonToken t = nextToken();",
      "info" : "VariableDeclarationStatement[38299-38325]:VariableDeclarationStatement[38485-38511]"
    }, {
      "left" : "if (t != null)",
      "right" : "if (t != null)",
      "info" : "IfStatement[38334-38495]:IfStatement[38520-38681]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38349-38495]:Block[38535-38681]"
    }, {
      "left" : "int id = t.id();",
      "right" : "int id = t.id();",
      "info" : "VariableDeclarationStatement[38363-38379]:VariableDeclarationStatement[38549-38565]"
    }, {
      "left" : "if (id == ID_TRUE)",
      "right" : "if (id == ID_TRUE)",
      "info" : "IfStatement[38392-38431]:IfStatement[38578-38617]"
    }, {
      "left" : "return Boolean.TRUE;",
      "right" : "return Boolean.TRUE;",
      "info" : "ReturnStatement[38411-38431]:ReturnStatement[38597-38617]"
    }, {
      "left" : "if (id == ID_FALSE)",
      "right" : "if (id == ID_FALSE)",
      "info" : "IfStatement[38444-38485]:IfStatement[38630-38671]"
    }, {
      "left" : "return Boolean.FALSE;",
      "right" : "return Boolean.FALSE;",
      "info" : "ReturnStatement[38464-38485]:ReturnStatement[38650-38671]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[38504-38516]:ReturnStatement[38690-38702]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[39491-39500]:Modifier[39677-39686]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[39501-39506]:Modifier[39687-39692]"
    }, {
      "left" : "JsonToken",
      "right" : "JsonToken",
      "info" : "SimpleType[39507-39516]:SimpleType[39693-39702]"
    }, {
      "left" : "_parsePosNumber",
      "right" : "_parsePosNumber",
      "info" : "SimpleName[39517-39532]:SimpleName[39703-39718]"
    }, {
      "left" : "int ch",
      "right" : "int ch",
      "info" : "SingleVariableDeclaration[39533-39539]:SingleVariableDeclaration[39719-39725]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[39548-39559]:SimpleType[39734-39745]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39564-41466]:Block[39750-41652]"
    }, {
      "left" : "int ptr = _inputPtr;",
      "right" : "int ptr = _inputPtr;",
      "info" : "VariableDeclarationStatement[39847-39867]:VariableDeclarationStatement[40033-40053]"
    }, {
      "left" : "int startPtr = ptr-1;",
      "right" : "int startPtr = ptr-1;",
      "info" : "VariableDeclarationStatement[39876-39897]:VariableDeclarationStatement[40062-40083]"
    }, {
      "left" : "final int inputLen = _inputEnd;",
      "right" : "final int inputLen = _inputEnd;",
      "info" : "VariableDeclarationStatement[39939-39970]:VariableDeclarationStatement[40125-40156]"
    }, {
      "left" : "if (ch == INT_0)",
      "right" : "if (ch == INT_0)",
      "info" : "IfStatement[40027-40106]:IfStatement[40213-40292]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40044-40106]:Block[40230-40292]"
    }, {
      "left" : "return _parseNumber2(false, startPtr);",
      "right" : "return _parseNumber2(false, startPtr);",
      "info" : "ReturnStatement[40058-40096]:ReturnStatement[40244-40282]"
    }, {
      "left" : "int intLen = 1;",
      "right" : "int intLen = 1;",
      "info" : "VariableDeclarationStatement[40404-40419]:VariableDeclarationStatement[40590-40605]"
    }, {
      "left" : "int_loop:\n        while (true) {\n            if (ptr >= inputLen) {\n                _inputPtr = startPtr;\n                return _parseNumber2(false, startPtr);\n            }\n            ch = (int) _inputBuffer[ptr++];\n            if (ch < INT_0 || ch > INT_9) {\n                break int_loop;\n            }\n            ++intLen;\n        }",
      "right" : "int_loop:\n        while (true) {\n            if (ptr >= inputLen) {\n                _inputPtr = startPtr;\n                return _parseNumber2(false, startPtr);\n            }\n            ch = (int) _inputBuffer[ptr++];\n            if (ch < INT_0 || ch > INT_9) {\n                break int_loop;\n            }\n            ++intLen;\n        }",
      "info" : "LabeledStatement[40504-40844]:LabeledStatement[40690-41030]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[40522-40844]:WhileStatement[40708-41030]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40535-40844]:Block[40721-41030]"
    }, {
      "left" : "if (ptr >= inputLen)",
      "right" : "if (ptr >= inputLen)",
      "info" : "IfStatement[40549-40678]:IfStatement[40735-40864]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40570-40678]:Block[40756-40864]"
    }, {
      "left" : "_inputPtr = startPtr;",
      "right" : "_inputPtr = startPtr;",
      "info" : "ExpressionStatement[40588-40609]:ExpressionStatement[40774-40795]"
    }, {
      "left" : "return _parseNumber2(false, startPtr);",
      "right" : "return _parseNumber2(false, startPtr);",
      "info" : "ReturnStatement[40626-40664]:ReturnStatement[40812-40850]"
    }, {
      "left" : "ch = (int) _inputBuffer[ptr++];",
      "right" : "ch = (int) _inputBuffer[ptr++];",
      "info" : "ExpressionStatement[40691-40722]:ExpressionStatement[40877-40908]"
    }, {
      "left" : "if (ch < INT_0 || ch > INT_9)",
      "right" : "if (ch < INT_0 || ch > INT_9)",
      "info" : "IfStatement[40735-40812]:IfStatement[40921-40998]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40765-40812]:Block[40951-40998]"
    }, {
      "left" : "break int_loop;",
      "right" : "break int_loop;",
      "info" : "BreakStatement[40783-40798]:BreakStatement[40969-40984]"
    }, {
      "left" : "++intLen;",
      "right" : "++intLen;",
      "info" : "ExpressionStatement[40825-40834]:ExpressionStatement[41011-41020]"
    }, {
      "left" : "if (ch == INT_PERIOD || ch == INT_e || ch == INT_E)",
      "right" : "if (ch == INT_PERIOD || ch == INT_e || ch == INT_E)",
      "info" : "IfStatement[40853-41011]:IfStatement[41039-41197]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40905-41011]:Block[41091-41197]"
    }, {
      "left" : "_inputPtr = ptr;",
      "right" : "_inputPtr = ptr;",
      "info" : "ExpressionStatement[40919-40935]:ExpressionStatement[41105-41121]"
    }, {
      "left" : "return _parseFloat(ch, startPtr, ptr, false, intLen);",
      "right" : "return _parseFloat(ch, startPtr, ptr, false, intLen);",
      "info" : "ReturnStatement[40948-41001]:ReturnStatement[41134-41187]"
    }, {
      "left" : "--ptr;",
      "right" : "--ptr;",
      "info" : "ExpressionStatement[41088-41094]:ExpressionStatement[41274-41280]"
    }, {
      "left" : "_inputPtr = ptr;",
      "right" : "_inputPtr = ptr;",
      "info" : "ExpressionStatement[41144-41160]:ExpressionStatement[41330-41346]"
    }, {
      "left" : "if (_parsingContext.inRoot())",
      "right" : "if (_parsingContext.inRoot())",
      "info" : "IfStatement[41247-41322]:IfStatement[41433-41508]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41277-41322]:Block[41463-41508]"
    }, {
      "left" : "_verifyRootSpace(ch);",
      "right" : "_verifyRootSpace(ch);",
      "info" : "ExpressionStatement[41291-41312]:ExpressionStatement[41477-41498]"
    }, {
      "left" : "int len = ptr-startPtr;",
      "right" : "int len = ptr-startPtr;",
      "info" : "VariableDeclarationStatement[41331-41354]:VariableDeclarationStatement[41517-41540]"
    }, {
      "left" : "_textBuffer.resetWithShared(_inputBuffer, startPtr, len);",
      "right" : "_textBuffer.resetWithShared(_inputBuffer, startPtr, len);",
      "info" : "ExpressionStatement[41363-41420]:ExpressionStatement[41549-41606]"
    }, {
      "left" : "return resetInt(false, intLen);",
      "right" : "return resetInt(false, intLen);",
      "info" : "ReturnStatement[41429-41460]:ReturnStatement[41615-41646]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[41472-41479]:Modifier[41658-41665]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[41480-41485]:Modifier[41666-41671]"
    }, {
      "left" : "JsonToken",
      "right" : "JsonToken",
      "info" : "SimpleType[41486-41495]:SimpleType[41672-41681]"
    }, {
      "left" : "_parseFloat",
      "right" : "_parseFloat",
      "info" : "SimpleName[41496-41507]:SimpleName[41682-41693]"
    }, {
      "left" : "int ch",
      "right" : "int ch",
      "info" : "SingleVariableDeclaration[41508-41514]:SingleVariableDeclaration[41694-41700]"
    }, {
      "left" : "int startPtr",
      "right" : "int startPtr",
      "info" : "SingleVariableDeclaration[41516-41528]:SingleVariableDeclaration[41702-41714]"
    }, {
      "left" : "int ptr",
      "right" : "int ptr",
      "info" : "SingleVariableDeclaration[41530-41537]:SingleVariableDeclaration[41716-41723]"
    }, {
      "left" : "boolean neg",
      "right" : "boolean neg",
      "info" : "SingleVariableDeclaration[41539-41550]:SingleVariableDeclaration[41725-41736]"
    }, {
      "left" : "int intLen",
      "right" : "int intLen",
      "info" : "SingleVariableDeclaration[41552-41562]:SingleVariableDeclaration[41738-41748]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[41579-41590]:SimpleType[41765-41776]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41595-43854]:Block[41781-44040]"
    }, {
      "left" : "final int inputLen = _inputEnd;",
      "right" : "final int inputLen = _inputEnd;",
      "info" : "VariableDeclarationStatement[41605-41636]:VariableDeclarationStatement[41791-41822]"
    }, {
      "left" : "int fractLen = 0;",
      "right" : "int fractLen = 0;",
      "info" : "VariableDeclarationStatement[41645-41662]:VariableDeclarationStatement[41831-41848]"
    }, {
      "left" : "if (ch == '.')",
      "right" : "if (ch == '.')",
      "info" : "IfStatement[41718-42321]:IfStatement[41904-42507]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41733-42321]:Block[41919-42507]"
    }, {
      "left" : "fract_loop:\n            while (true) {\n                if (ptr >= inputLen) {\n                    return _parseNumber2(neg, startPtr);\n                }\n                ch = (int) _inputBuffer[ptr++];\n                if (ch < INT_0 || ch > INT_9) {\n                    break fract_loop;\n                }\n                ++fractLen;\n            }",
      "right" : "fract_loop:\n            while (true) {\n                if (ptr >= inputLen) {\n                    return _parseNumber2(neg, startPtr);\n                }\n                ch = (int) _inputBuffer[ptr++];\n                if (ch < INT_0 || ch > INT_9) {\n                    break fract_loop;\n                }\n                ++fractLen;\n            }",
      "info" : "LabeledStatement[41764-42110]:LabeledStatement[41950-42296]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[41788-42110]:WhileStatement[41974-42296]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41801-42110]:Block[41987-42296]"
    }, {
      "left" : "if (ptr >= inputLen)",
      "right" : "if (ptr >= inputLen)",
      "info" : "IfStatement[41819-41916]:IfStatement[42005-42102]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41840-41916]:Block[42026-42102]"
    }, {
      "left" : "return _parseNumber2(neg, startPtr);",
      "right" : "return _parseNumber2(neg, startPtr);",
      "info" : "ReturnStatement[41862-41898]:ReturnStatement[42048-42084]"
    }, {
      "left" : "ch = (int) _inputBuffer[ptr++];",
      "right" : "ch = (int) _inputBuffer[ptr++];",
      "info" : "ExpressionStatement[41933-41964]:ExpressionStatement[42119-42150]"
    }, {
      "left" : "if (ch < INT_0 || ch > INT_9)",
      "right" : "if (ch < INT_0 || ch > INT_9)",
      "info" : "IfStatement[41981-42068]:IfStatement[42167-42254]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42011-42068]:Block[42197-42254]"
    }, {
      "left" : "break fract_loop;",
      "right" : "break fract_loop;",
      "info" : "BreakStatement[42033-42050]:BreakStatement[42219-42236]"
    }, {
      "left" : "++fractLen;",
      "right" : "++fractLen;",
      "info" : "ExpressionStatement[42085-42096]:ExpressionStatement[42271-42282]"
    }, {
      "left" : "if (fractLen == 0)",
      "right" : "if (fractLen == 0)",
      "info" : "IfStatement[42188-42311]:IfStatement[42374-42497]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42207-42311]:Block[42393-42497]"
    }, {
      "left" : "reportUnexpectedNumberChar(ch, \"Decimal point not followed by a digit\");",
      "right" : "reportUnexpectedNumberChar(ch, \"Decimal point not followed by a digit\");",
      "info" : "ExpressionStatement[42225-42297]:ExpressionStatement[42411-42483]"
    }, {
      "left" : "int expLen = 0;",
      "right" : "int expLen = 0;",
      "info" : "VariableDeclarationStatement[42330-42345]:VariableDeclarationStatement[42516-42531]"
    }, {
      "left" : "if (ch == 'e' || ch == 'E')",
      "right" : "if (ch == 'e' || ch == 'E')",
      "info" : "IfStatement[42354-43416]:IfStatement[42540-43602]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42382-43416]:Block[42568-43602]"
    }, {
      "left" : "if (ptr >= inputLen)",
      "right" : "if (ptr >= inputLen)",
      "info" : "IfStatement[42415-42542]:IfStatement[42601-42728]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42436-42542]:Block[42622-42728]"
    }, {
      "left" : "_inputPtr = startPtr;",
      "right" : "_inputPtr = startPtr;",
      "info" : "ExpressionStatement[42454-42475]:ExpressionStatement[42640-42661]"
    }, {
      "left" : "return _parseNumber2(neg, startPtr);",
      "right" : "return _parseNumber2(neg, startPtr);",
      "info" : "ReturnStatement[42492-42528]:ReturnStatement[42678-42714]"
    }, {
      "left" : "ch = (int) _inputBuffer[ptr++];",
      "right" : "ch = (int) _inputBuffer[ptr++];",
      "info" : "ExpressionStatement[42586-42617]:ExpressionStatement[42772-42803]"
    }, {
      "left" : "if (ch == INT_MINUS || ch == INT_PLUS)",
      "right" : "if (ch == INT_MINUS || ch == INT_PLUS)",
      "info" : "IfStatement[42630-42909]:IfStatement[42816-43095]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42669-42909]:Block[42855-43095]"
    }, {
      "left" : "if (ptr >= inputLen)",
      "right" : "if (ptr >= inputLen)",
      "info" : "IfStatement[42708-42847]:IfStatement[42894-43033]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42729-42847]:Block[42915-43033]"
    }, {
      "left" : "_inputPtr = startPtr;",
      "right" : "_inputPtr = startPtr;",
      "info" : "ExpressionStatement[42751-42772]:ExpressionStatement[42937-42958]"
    }, {
      "left" : "return _parseNumber2(neg, startPtr);",
      "right" : "return _parseNumber2(neg, startPtr);",
      "info" : "ReturnStatement[42793-42829]:ReturnStatement[42979-43015]"
    }, {
      "left" : "ch = (int) _inputBuffer[ptr++];",
      "right" : "ch = (int) _inputBuffer[ptr++];",
      "info" : "ExpressionStatement[42864-42895]:ExpressionStatement[43050-43081]"
    }, {
      "left" : "while (ch <= INT_9 && ch >= INT_0)",
      "right" : "while (ch <= INT_9 && ch >= INT_0)",
      "info" : "WhileStatement[42922-43202]:WhileStatement[43108-43388]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42957-43202]:Block[43143-43388]"
    }, {
      "left" : "++expLen;",
      "right" : "++expLen;",
      "info" : "ExpressionStatement[42975-42984]:ExpressionStatement[43161-43170]"
    }, {
      "left" : "if (ptr >= inputLen)",
      "right" : "if (ptr >= inputLen)",
      "info" : "IfStatement[43001-43140]:IfStatement[43187-43326]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43022-43140]:Block[43208-43326]"
    }, {
      "left" : "_inputPtr = startPtr;",
      "right" : "_inputPtr = startPtr;",
      "info" : "ExpressionStatement[43044-43065]:ExpressionStatement[43230-43251]"
    }, {
      "left" : "return _parseNumber2(neg, startPtr);",
      "right" : "return _parseNumber2(neg, startPtr);",
      "info" : "ReturnStatement[43086-43122]:ReturnStatement[43272-43308]"
    }, {
      "left" : "ch = (int) _inputBuffer[ptr++];",
      "right" : "ch = (int) _inputBuffer[ptr++];",
      "info" : "ExpressionStatement[43157-43188]:ExpressionStatement[43343-43374]"
    }, {
      "left" : "if (expLen == 0)",
      "right" : "if (expLen == 0)",
      "info" : "IfStatement[43280-43406]:IfStatement[43466-43592]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43297-43406]:Block[43483-43592]"
    }, {
      "left" : "reportUnexpectedNumberChar(ch, \"Exponent indicator not followed by a digit\");",
      "right" : "reportUnexpectedNumberChar(ch, \"Exponent indicator not followed by a digit\");",
      "info" : "ExpressionStatement[43315-43392]:ExpressionStatement[43501-43578]"
    }, {
      "left" : "--ptr;",
      "right" : "--ptr;",
      "info" : "ExpressionStatement[43425-43431]:ExpressionStatement[43611-43617]"
    }, {
      "left" : "_inputPtr = ptr;",
      "right" : "_inputPtr = ptr;",
      "info" : "ExpressionStatement[43481-43497]:ExpressionStatement[43667-43683]"
    }, {
      "left" : "if (_parsingContext.inRoot())",
      "right" : "if (_parsingContext.inRoot())",
      "info" : "IfStatement[43584-43659]:IfStatement[43770-43845]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43614-43659]:Block[43800-43845]"
    }, {
      "left" : "_verifyRootSpace(ch);",
      "right" : "_verifyRootSpace(ch);",
      "info" : "ExpressionStatement[43628-43649]:ExpressionStatement[43814-43835]"
    }, {
      "left" : "int len = ptr-startPtr;",
      "right" : "int len = ptr-startPtr;",
      "info" : "VariableDeclarationStatement[43668-43691]:VariableDeclarationStatement[43854-43877]"
    }, {
      "left" : "_textBuffer.resetWithShared(_inputBuffer, startPtr, len);",
      "right" : "_textBuffer.resetWithShared(_inputBuffer, startPtr, len);",
      "info" : "ExpressionStatement[43700-43757]:ExpressionStatement[43886-43943]"
    }, {
      "left" : "return resetFloat(neg, intLen, fractLen, expLen);",
      "right" : "return resetFloat(neg, intLen, fractLen, expLen);",
      "info" : "ReturnStatement[43799-43848]:ReturnStatement[43985-44034]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[43860-43869]:Modifier[44046-44055]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[43870-43875]:Modifier[44056-44061]"
    }, {
      "left" : "JsonToken",
      "right" : "JsonToken",
      "info" : "SimpleType[43876-43885]:SimpleType[44062-44071]"
    }, {
      "left" : "_parseNegNumber",
      "right" : "_parseNegNumber",
      "info" : "SimpleName[43886-43901]:SimpleName[44072-44087]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[43911-43922]:SimpleType[44097-44108]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43927-45371]:Block[44113-45557]"
    }, {
      "left" : "int ptr = _inputPtr;",
      "right" : "int ptr = _inputPtr;",
      "info" : "VariableDeclarationStatement[43937-43957]:VariableDeclarationStatement[44123-44143]"
    }, {
      "left" : "int startPtr = ptr-1;",
      "right" : "int startPtr = ptr-1;",
      "info" : "VariableDeclarationStatement[43966-43987]:VariableDeclarationStatement[44152-44173]"
    }, {
      "left" : "final int inputLen = _inputEnd;",
      "right" : "final int inputLen = _inputEnd;",
      "info" : "VariableDeclarationStatement[44034-44065]:VariableDeclarationStatement[44220-44251]"
    }, {
      "left" : "if (ptr >= inputLen)",
      "right" : "if (ptr >= inputLen)",
      "info" : "IfStatement[44075-44157]:IfStatement[44261-44343]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44096-44157]:Block[44282-44343]"
    }, {
      "left" : "return _parseNumber2(true, startPtr);",
      "right" : "return _parseNumber2(true, startPtr);",
      "info" : "ReturnStatement[44110-44147]:ReturnStatement[44296-44333]"
    }, {
      "left" : "int ch = _inputBuffer[ptr++];",
      "right" : "int ch = _inputBuffer[ptr++];",
      "info" : "VariableDeclarationStatement[44166-44195]:VariableDeclarationStatement[44352-44381]"
    }, {
      "left" : "if (ch > INT_9 || ch < INT_0)",
      "right" : "if (ch > INT_9 || ch < INT_0)",
      "info" : "IfStatement[44267-44393]:IfStatement[44453-44579]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44297-44393]:Block[44483-44579]"
    }, {
      "left" : "_inputPtr = ptr;",
      "right" : "_inputPtr = ptr;",
      "info" : "ExpressionStatement[44311-44327]:ExpressionStatement[44497-44513]"
    }, {
      "left" : "return _handleInvalidNumberStart(ch, true);",
      "right" : "return _handleInvalidNumberStart(ch, true);",
      "info" : "ReturnStatement[44340-44383]:ReturnStatement[44526-44569]"
    }, {
      "left" : "if (ch == INT_0)",
      "right" : "if (ch == INT_0)",
      "info" : "IfStatement[44449-44527]:IfStatement[44635-44713]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44466-44527]:Block[44652-44713]"
    }, {
      "left" : "return _parseNumber2(true, startPtr);",
      "right" : "return _parseNumber2(true, startPtr);",
      "info" : "ReturnStatement[44480-44517]:ReturnStatement[44666-44703]"
    }, {
      "left" : "int intLen = 1;",
      "right" : "int intLen = 1;",
      "info" : "VariableDeclarationStatement[44536-44551]:VariableDeclarationStatement[44722-44737]"
    }, {
      "left" : "int_loop:\n        while (true) {\n            if (ptr >= inputLen) {\n                return _parseNumber2(true, startPtr);\n            }\n            ch = (int) _inputBuffer[ptr++];\n            if (ch < INT_0 || ch > INT_9) {\n                break int_loop;\n            }\n            ++intLen;\n        }",
      "right" : "int_loop:\n        while (true) {\n            if (ptr >= inputLen) {\n                return _parseNumber2(true, startPtr);\n            }\n            ch = (int) _inputBuffer[ptr++];\n            if (ch < INT_0 || ch > INT_9) {\n                break int_loop;\n            }\n            ++intLen;\n        }",
      "info" : "LabeledStatement[44636-44937]:LabeledStatement[44822-45123]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[44654-44937]:WhileStatement[44840-45123]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44667-44937]:Block[44853-45123]"
    }, {
      "left" : "if (ptr >= inputLen)",
      "right" : "if (ptr >= inputLen)",
      "info" : "IfStatement[44681-44771]:IfStatement[44867-44957]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44702-44771]:Block[44888-44957]"
    }, {
      "left" : "return _parseNumber2(true, startPtr);",
      "right" : "return _parseNumber2(true, startPtr);",
      "info" : "ReturnStatement[44720-44757]:ReturnStatement[44906-44943]"
    }, {
      "left" : "ch = (int) _inputBuffer[ptr++];",
      "right" : "ch = (int) _inputBuffer[ptr++];",
      "info" : "ExpressionStatement[44784-44815]:ExpressionStatement[44970-45001]"
    }, {
      "left" : "if (ch < INT_0 || ch > INT_9)",
      "right" : "if (ch < INT_0 || ch > INT_9)",
      "info" : "IfStatement[44828-44905]:IfStatement[45014-45091]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44858-44905]:Block[45044-45091]"
    }, {
      "left" : "break int_loop;",
      "right" : "break int_loop;",
      "info" : "BreakStatement[44876-44891]:BreakStatement[45062-45077]"
    }, {
      "left" : "++intLen;",
      "right" : "++intLen;",
      "info" : "ExpressionStatement[44918-44927]:ExpressionStatement[45104-45113]"
    }, {
      "left" : "if (ch == INT_PERIOD || ch == INT_e || ch == INT_E)",
      "right" : "if (ch == INT_PERIOD || ch == INT_e || ch == INT_E)",
      "info" : "IfStatement[44947-45104]:IfStatement[45133-45290]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44999-45104]:Block[45185-45290]"
    }, {
      "left" : "_inputPtr = ptr;",
      "right" : "_inputPtr = ptr;",
      "info" : "ExpressionStatement[45013-45029]:ExpressionStatement[45199-45215]"
    }, {
      "left" : "return _parseFloat(ch, startPtr, ptr, true, intLen);",
      "right" : "return _parseFloat(ch, startPtr, ptr, true, intLen);",
      "info" : "ReturnStatement[45042-45094]:ReturnStatement[45228-45280]"
    }, {
      "left" : "--ptr;",
      "right" : "--ptr;",
      "info" : "ExpressionStatement[45113-45119]:ExpressionStatement[45299-45305]"
    }, {
      "left" : "_inputPtr = ptr;",
      "right" : "_inputPtr = ptr;",
      "info" : "ExpressionStatement[45128-45144]:ExpressionStatement[45314-45330]"
    }, {
      "left" : "if (_parsingContext.inRoot())",
      "right" : "if (_parsingContext.inRoot())",
      "info" : "IfStatement[45153-45228]:IfStatement[45339-45414]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45183-45228]:Block[45369-45414]"
    }, {
      "left" : "_verifyRootSpace(ch);",
      "right" : "_verifyRootSpace(ch);",
      "info" : "ExpressionStatement[45197-45218]:ExpressionStatement[45383-45404]"
    }, {
      "left" : "int len = ptr-startPtr;",
      "right" : "int len = ptr-startPtr;",
      "info" : "VariableDeclarationStatement[45237-45260]:VariableDeclarationStatement[45423-45446]"
    }, {
      "left" : "_textBuffer.resetWithShared(_inputBuffer, startPtr, len);",
      "right" : "_textBuffer.resetWithShared(_inputBuffer, startPtr, len);",
      "info" : "ExpressionStatement[45269-45326]:ExpressionStatement[45455-45512]"
    }, {
      "left" : "return resetInt(true, intLen);",
      "right" : "return resetInt(true, intLen);",
      "info" : "ReturnStatement[45335-45365]:ReturnStatement[45521-45551]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[45704-45711]:Modifier[45890-45897]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[45712-45717]:Modifier[45898-45903]"
    }, {
      "left" : "JsonToken",
      "right" : "JsonToken",
      "info" : "SimpleType[45718-45727]:SimpleType[45904-45913]"
    }, {
      "left" : "_parseNumber2",
      "right" : "_parseNumber2",
      "info" : "SimpleName[45728-45741]:SimpleName[45914-45927]"
    }, {
      "left" : "boolean neg",
      "right" : "boolean neg",
      "info" : "SingleVariableDeclaration[45742-45753]:SingleVariableDeclaration[45928-45939]"
    }, {
      "left" : "int startPtr",
      "right" : "int startPtr",
      "info" : "SingleVariableDeclaration[45755-45767]:SingleVariableDeclaration[45941-45953]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[45776-45787]:SimpleType[45962-45973]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45792-50028]:Block[45978-50214]"
    }, {
      "left" : "_inputPtr = neg ? (startPtr+1) : startPtr;",
      "right" : "_inputPtr = neg ? (startPtr+1) : startPtr;",
      "info" : "ExpressionStatement[45802-45844]:ExpressionStatement[45988-46030]"
    }, {
      "left" : "char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();",
      "right" : "char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();",
      "info" : "VariableDeclarationStatement[45853-45909]:VariableDeclarationStatement[46039-46095]"
    }, {
      "left" : "int outPtr = 0;",
      "right" : "int outPtr = 0;",
      "info" : "VariableDeclarationStatement[45918-45933]:VariableDeclarationStatement[46104-46119]"
    }, {
      "left" : "if (neg)",
      "right" : "if (neg)",
      "info" : "IfStatement[45976-46032]:IfStatement[46162-46218]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45985-46032]:Block[46171-46218]"
    }, {
      "left" : "outBuf[outPtr++] = '-';",
      "right" : "outBuf[outPtr++] = '-';",
      "info" : "ExpressionStatement[45999-46022]:ExpressionStatement[46185-46208]"
    }, {
      "left" : "int intLen = 0;",
      "right" : "int intLen = 0;",
      "info" : "VariableDeclarationStatement[46104-46119]:VariableDeclarationStatement[46290-46305]"
    }, {
      "left" : "char c = (_inputPtr < _inputEnd) ? _inputBuffer[_inputPtr++] : getNextChar(\"No digit following minus sign\");",
      "right" : "char c = (_inputPtr < _inputEnd) ? _inputBuffer[_inputPtr++] : getNextChar(\"No digit following minus sign\");",
      "info" : "VariableDeclarationStatement[46128-46236]:VariableDeclarationStatement[46314-46422]"
    }, {
      "left" : "if (c == '0')",
      "right" : "if (c == '0')",
      "info" : "IfStatement[46245-46312]:IfStatement[46431-46498]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46259-46312]:Block[46445-46498]"
    }, {
      "left" : "c = _verifyNoLeadingZeroes();",
      "right" : "c = _verifyNoLeadingZeroes();",
      "info" : "ExpressionStatement[46273-46302]:ExpressionStatement[46459-46488]"
    }, {
      "left" : "boolean eof = false;",
      "right" : "boolean eof = false;",
      "info" : "VariableDeclarationStatement[46321-46341]:VariableDeclarationStatement[46507-46527]"
    }, {
      "left" : "int_loop:\n        while (c >= '0' && c <= '9') {\n            ++intLen;\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = c;\n            if (_inputPtr >= _inputEnd && !loadMore()) {\n                // EOF is legal for main level int values\n                c = CHAR_NULL;\n                eof = true;\n                break int_loop;\n            }\n            c = _inputBuffer[_inputPtr++];\n        }",
      "right" : "int_loop:\n        while (c >= '0' && c <= '9') {\n            ++intLen;\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = c;\n            if (_inputPtr >= _inputEnd && !loadMore()) {\n                // EOF is legal for main level int values\n                c = CHAR_NULL;\n                eof = true;\n                break int_loop;\n            }\n            c = _inputBuffer[_inputPtr++];\n        }",
      "info" : "LabeledStatement[46401-46924]:LabeledStatement[46587-47110]"
    }, {
      "left" : "while (c >= '0' && c <= '9')",
      "right" : "while (c >= '0' && c <= '9')",
      "info" : "WhileStatement[46419-46924]:WhileStatement[46605-47110]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46448-46924]:Block[46634-47110]"
    }, {
      "left" : "++intLen;",
      "right" : "++intLen;",
      "info" : "ExpressionStatement[46462-46471]:ExpressionStatement[46648-46657]"
    }, {
      "left" : "if (outPtr >= outBuf.length)",
      "right" : "if (outPtr >= outBuf.length)",
      "info" : "IfStatement[46484-46617]:IfStatement[46670-46803]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46513-46617]:Block[46699-46803]"
    }, {
      "left" : "outBuf = _textBuffer.finishCurrentSegment();",
      "right" : "outBuf = _textBuffer.finishCurrentSegment();",
      "info" : "ExpressionStatement[46531-46575]:ExpressionStatement[46717-46761]"
    }, {
      "left" : "outPtr = 0;",
      "right" : "outPtr = 0;",
      "info" : "ExpressionStatement[46592-46603]:ExpressionStatement[46778-46789]"
    }, {
      "left" : "outBuf[outPtr++] = c;",
      "right" : "outBuf[outPtr++] = c;",
      "info" : "ExpressionStatement[46630-46651]:ExpressionStatement[46816-46837]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd && !loadMore())",
      "right" : "if (_inputPtr >= _inputEnd && !loadMore())",
      "info" : "IfStatement[46664-46871]:IfStatement[46850-47057]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46707-46871]:Block[46893-47057]"
    }, {
      "left" : "c = CHAR_NULL;",
      "right" : "c = CHAR_NULL;",
      "info" : "ExpressionStatement[46783-46797]:ExpressionStatement[46969-46983]"
    }, {
      "left" : "eof = true;",
      "right" : "eof = true;",
      "info" : "ExpressionStatement[46814-46825]:ExpressionStatement[47000-47011]"
    }, {
      "left" : "break int_loop;",
      "right" : "break int_loop;",
      "info" : "BreakStatement[46842-46857]:BreakStatement[47028-47043]"
    }, {
      "left" : "c = _inputBuffer[_inputPtr++];",
      "right" : "c = _inputBuffer[_inputPtr++];",
      "info" : "ExpressionStatement[46884-46914]:ExpressionStatement[47070-47100]"
    }, {
      "left" : "if (intLen == 0)",
      "right" : "if (intLen == 0)",
      "info" : "IfStatement[46979-47061]:IfStatement[47165-47247]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46996-47061]:Block[47182-47247]"
    }, {
      "left" : "return _handleInvalidNumberStart(c, neg);",
      "right" : "return _handleInvalidNumberStart(c, neg);",
      "info" : "ReturnStatement[47010-47051]:ReturnStatement[47196-47237]"
    }, {
      "left" : "int fractLen = 0;",
      "right" : "int fractLen = 0;",
      "info" : "VariableDeclarationStatement[47071-47088]:VariableDeclarationStatement[47257-47274]"
    }, {
      "left" : "if (c == '.')",
      "right" : "if (c == '.')",
      "info" : "IfStatement[47143-48011]:IfStatement[47329-48197]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47157-48011]:Block[47343-48197]"
    }, {
      "left" : "outBuf[outPtr++] = c;",
      "right" : "outBuf[outPtr++] = c;",
      "info" : "ExpressionStatement[47188-47209]:ExpressionStatement[47374-47395]"
    }, {
      "left" : "fract_loop:\n            while (true) {\n                if (_inputPtr >= _inputEnd && !loadMore()) {\n                    eof = true;\n                    break fract_loop;\n                }\n                c = _inputBuffer[_inputPtr++];\n                if (c < INT_0 || c > INT_9) {\n                    break fract_loop;\n                }\n                ++fractLen;\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                outBuf[outPtr++] = c;\n            }",
      "right" : "fract_loop:\n            while (true) {\n                if (_inputPtr >= _inputEnd && !loadMore()) {\n                    eof = true;\n                    break fract_loop;\n                }\n                c = _inputBuffer[_inputPtr++];\n                if (c < INT_0 || c > INT_9) {\n                    break fract_loop;\n                }\n                ++fractLen;\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                outBuf[outPtr++] = c;\n            }",
      "info" : "LabeledStatement[47223-47801]:LabeledStatement[47409-47987]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[47247-47801]:WhileStatement[47433-47987]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47260-47801]:Block[47446-47987]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd && !loadMore())",
      "right" : "if (_inputPtr >= _inputEnd && !loadMore())",
      "info" : "IfStatement[47278-47410]:IfStatement[47464-47596]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47321-47410]:Block[47507-47596]"
    }, {
      "left" : "eof = true;",
      "right" : "eof = true;",
      "info" : "ExpressionStatement[47343-47354]:ExpressionStatement[47529-47540]"
    }, {
      "left" : "break fract_loop;",
      "right" : "break fract_loop;",
      "info" : "BreakStatement[47375-47392]:BreakStatement[47561-47578]"
    }, {
      "left" : "c = _inputBuffer[_inputPtr++];",
      "right" : "c = _inputBuffer[_inputPtr++];",
      "info" : "ExpressionStatement[47427-47457]:ExpressionStatement[47613-47643]"
    }, {
      "left" : "if (c < INT_0 || c > INT_9)",
      "right" : "if (c < INT_0 || c > INT_9)",
      "info" : "IfStatement[47474-47559]:IfStatement[47660-47745]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47502-47559]:Block[47688-47745]"
    }, {
      "left" : "break fract_loop;",
      "right" : "break fract_loop;",
      "info" : "BreakStatement[47524-47541]:BreakStatement[47710-47727]"
    }, {
      "left" : "++fractLen;",
      "right" : "++fractLen;",
      "info" : "ExpressionStatement[47576-47587]:ExpressionStatement[47762-47773]"
    }, {
      "left" : "if (outPtr >= outBuf.length)",
      "right" : "if (outPtr >= outBuf.length)",
      "info" : "IfStatement[47604-47749]:IfStatement[47790-47935]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47633-47749]:Block[47819-47935]"
    }, {
      "left" : "outBuf = _textBuffer.finishCurrentSegment();",
      "right" : "outBuf = _textBuffer.finishCurrentSegment();",
      "info" : "ExpressionStatement[47655-47699]:ExpressionStatement[47841-47885]"
    }, {
      "left" : "outPtr = 0;",
      "right" : "outPtr = 0;",
      "info" : "ExpressionStatement[47720-47731]:ExpressionStatement[47906-47917]"
    }, {
      "left" : "outBuf[outPtr++] = c;",
      "right" : "outBuf[outPtr++] = c;",
      "info" : "ExpressionStatement[47766-47787]:ExpressionStatement[47952-47973]"
    }, {
      "left" : "if (fractLen == 0)",
      "right" : "if (fractLen == 0)",
      "info" : "IfStatement[47879-48001]:IfStatement[48065-48187]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47898-48001]:Block[48084-48187]"
    }, {
      "left" : "reportUnexpectedNumberChar(c, \"Decimal point not followed by a digit\");",
      "right" : "reportUnexpectedNumberChar(c, \"Decimal point not followed by a digit\");",
      "info" : "ExpressionStatement[47916-47987]:ExpressionStatement[48102-48173]"
    }, {
      "left" : "int expLen = 0;",
      "right" : "int expLen = 0;",
      "info" : "VariableDeclarationStatement[48021-48036]:VariableDeclarationStatement[48207-48222]"
    }, {
      "left" : "if (c == 'e' || c == 'E')",
      "right" : "if (c == 'e' || c == 'E')",
      "info" : "IfStatement[48045-49663]:IfStatement[48231-49849]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48071-49663]:Block[48257-49849]"
    }, {
      "left" : "if (outPtr >= outBuf.length)",
      "right" : "if (outPtr >= outBuf.length)",
      "info" : "IfStatement[48098-48231]:IfStatement[48284-48417]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48127-48231]:Block[48313-48417]"
    }, {
      "left" : "outBuf = _textBuffer.finishCurrentSegment();",
      "right" : "outBuf = _textBuffer.finishCurrentSegment();",
      "info" : "ExpressionStatement[48145-48189]:ExpressionStatement[48331-48375]"
    }, {
      "left" : "outPtr = 0;",
      "right" : "outPtr = 0;",
      "info" : "ExpressionStatement[48206-48217]:ExpressionStatement[48392-48403]"
    }, {
      "left" : "outBuf[outPtr++] = c;",
      "right" : "outBuf[outPtr++] = c;",
      "info" : "ExpressionStatement[48244-48265]:ExpressionStatement[48430-48451]"
    }, {
      "left" : "c = (_inputPtr < _inputEnd) ? _inputBuffer[_inputPtr++]\n                : getNextChar(\"expected a digit for number exponent\");",
      "right" : "c = (_inputPtr < _inputEnd) ? _inputBuffer[_inputPtr++]\n                : getNextChar(\"expected a digit for number exponent\");",
      "info" : "ExpressionStatement[48345-48471]:ExpressionStatement[48531-48657]"
    }, {
      "left" : "if (c == '-' || c == '+')",
      "right" : "if (c == '-' || c == '+')",
      "info" : "IfStatement[48515-48946]:IfStatement[48701-49132]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48541-48946]:Block[48727-49132]"
    }, {
      "left" : "if (outPtr >= outBuf.length)",
      "right" : "if (outPtr >= outBuf.length)",
      "info" : "IfStatement[48559-48704]:IfStatement[48745-48890]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48588-48704]:Block[48774-48890]"
    }, {
      "left" : "outBuf = _textBuffer.finishCurrentSegment();",
      "right" : "outBuf = _textBuffer.finishCurrentSegment();",
      "info" : "ExpressionStatement[48610-48654]:ExpressionStatement[48796-48840]"
    }, {
      "left" : "outPtr = 0;",
      "right" : "outPtr = 0;",
      "info" : "ExpressionStatement[48675-48686]:ExpressionStatement[48861-48872]"
    }, {
      "left" : "outBuf[outPtr++] = c;",
      "right" : "outBuf[outPtr++] = c;",
      "info" : "ExpressionStatement[48721-48742]:ExpressionStatement[48907-48928]"
    }, {
      "left" : "c = (_inputPtr < _inputEnd) ? _inputBuffer[_inputPtr++]\n                    : getNextChar(\"expected a digit for number exponent\");",
      "right" : "c = (_inputPtr < _inputEnd) ? _inputBuffer[_inputPtr++]\n                    : getNextChar(\"expected a digit for number exponent\");",
      "info" : "ExpressionStatement[48802-48932]:ExpressionStatement[48988-49118]"
    }, {
      "left" : "exp_loop:\n            while (c <= INT_9 && c >= INT_0) {\n                ++expLen;\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                outBuf[outPtr++] = c;\n                if (_inputPtr >= _inputEnd && !loadMore()) {\n                    eof = true;\n                    break exp_loop;\n                }\n                c = _inputBuffer[_inputPtr++];\n            }",
      "right" : "exp_loop:\n            while (c <= INT_9 && c >= INT_0) {\n                ++expLen;\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                outBuf[outPtr++] = c;\n                if (_inputPtr >= _inputEnd && !loadMore()) {\n                    eof = true;\n                    break exp_loop;\n                }\n                c = _inputBuffer[_inputPtr++];\n            }",
      "info" : "LabeledStatement[48960-49450]:LabeledStatement[49146-49636]"
    }, {
      "left" : "while (c <= INT_9 && c >= INT_0)",
      "right" : "while (c <= INT_9 && c >= INT_0)",
      "info" : "WhileStatement[48982-49450]:WhileStatement[49168-49636]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49015-49450]:Block[49201-49636]"
    }, {
      "left" : "++expLen;",
      "right" : "++expLen;",
      "info" : "ExpressionStatement[49033-49042]:ExpressionStatement[49219-49228]"
    }, {
      "left" : "if (outPtr >= outBuf.length)",
      "right" : "if (outPtr >= outBuf.length)",
      "info" : "IfStatement[49059-49204]:IfStatement[49245-49390]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49088-49204]:Block[49274-49390]"
    }, {
      "left" : "outBuf = _textBuffer.finishCurrentSegment();",
      "right" : "outBuf = _textBuffer.finishCurrentSegment();",
      "info" : "ExpressionStatement[49110-49154]:ExpressionStatement[49296-49340]"
    }, {
      "left" : "outPtr = 0;",
      "right" : "outPtr = 0;",
      "info" : "ExpressionStatement[49175-49186]:ExpressionStatement[49361-49372]"
    }, {
      "left" : "outBuf[outPtr++] = c;",
      "right" : "outBuf[outPtr++] = c;",
      "info" : "ExpressionStatement[49221-49242]:ExpressionStatement[49407-49428]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd && !loadMore())",
      "right" : "if (_inputPtr >= _inputEnd && !loadMore())",
      "info" : "IfStatement[49259-49389]:IfStatement[49445-49575]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49302-49389]:Block[49488-49575]"
    }, {
      "left" : "eof = true;",
      "right" : "eof = true;",
      "info" : "ExpressionStatement[49324-49335]:ExpressionStatement[49510-49521]"
    }, {
      "left" : "break exp_loop;",
      "right" : "break exp_loop;",
      "info" : "BreakStatement[49356-49371]:BreakStatement[49542-49557]"
    }, {
      "left" : "c = _inputBuffer[_inputPtr++];",
      "right" : "c = _inputBuffer[_inputPtr++];",
      "info" : "ExpressionStatement[49406-49436]:ExpressionStatement[49592-49622]"
    }, {
      "left" : "if (expLen == 0)",
      "right" : "if (expLen == 0)",
      "info" : "IfStatement[49528-49653]:IfStatement[49714-49839]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49545-49653]:Block[49731-49839]"
    }, {
      "left" : "reportUnexpectedNumberChar(c, \"Exponent indicator not followed by a digit\");",
      "right" : "reportUnexpectedNumberChar(c, \"Exponent indicator not followed by a digit\");",
      "info" : "ExpressionStatement[49563-49639]:ExpressionStatement[49749-49825]"
    }, {
      "left" : "if (!eof)",
      "right" : "if (!eof)",
      "info" : "IfStatement[49749-49890]:IfStatement[49935-50076]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49759-49890]:Block[49945-50076]"
    }, {
      "left" : "--_inputPtr;",
      "right" : "--_inputPtr;",
      "info" : "ExpressionStatement[49773-49785]:ExpressionStatement[49959-49971]"
    }, {
      "left" : "if (_parsingContext.inRoot())",
      "right" : "if (_parsingContext.inRoot())",
      "info" : "IfStatement[49798-49880]:IfStatement[49984-50066]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49828-49880]:Block[50014-50066]"
    }, {
      "left" : "_verifyRootSpace(c);",
      "right" : "_verifyRootSpace(c);",
      "info" : "ExpressionStatement[49846-49866]:ExpressionStatement[50032-50052]"
    }, {
      "left" : "_textBuffer.setCurrentLength(outPtr);",
      "right" : "_textBuffer.setCurrentLength(outPtr);",
      "info" : "ExpressionStatement[49899-49936]:ExpressionStatement[50085-50122]"
    }, {
      "left" : "return reset(neg, intLen, fractLen, expLen);",
      "right" : "return reset(neg, intLen, fractLen, expLen);",
      "info" : "ReturnStatement[49978-50022]:ReturnStatement[50164-50208]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[50155-50162]:Modifier[50341-50348]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[50163-50168]:Modifier[50349-50354]"
    }, {
      "left" : "char",
      "right" : "char",
      "info" : "PrimitiveType[50169-50173]:PrimitiveType[50355-50359]"
    }, {
      "left" : "_verifyNoLeadingZeroes",
      "right" : "_verifyNoLeadingZeroes",
      "info" : "SimpleName[50174-50196]:SimpleName[50360-50382]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[50206-50217]:SimpleType[50392-50403]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50222-50600]:Block[50408-50786]"
    }, {
      "left" : "if (_inputPtr < _inputEnd)",
      "right" : "if (_inputPtr < _inputEnd)",
      "info" : "IfStatement[50260-50520]:IfStatement[50446-50706]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50287-50520]:Block[50473-50706]"
    }, {
      "left" : "char ch = _inputBuffer[_inputPtr];",
      "right" : "char ch = _inputBuffer[_inputPtr];",
      "info" : "VariableDeclarationStatement[50301-50335]:VariableDeclarationStatement[50487-50521]"
    }, {
      "left" : "if (ch < '0' || ch > '9')",
      "right" : "if (ch < '0' || ch > '9')",
      "info" : "IfStatement[50441-50510]:IfStatement[50627-50696]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50467-50510]:Block[50653-50696]"
    }, {
      "left" : "return '0';",
      "right" : "return '0';",
      "info" : "ReturnStatement[50485-50496]:ReturnStatement[50671-50682]"
    }, {
      "left" : "return _verifyNLZ2();",
      "right" : "return _verifyNLZ2();",
      "info" : "ReturnStatement[50573-50594]:ReturnStatement[50759-50780]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[50606-50613]:Modifier[50792-50799]"
    }, {
      "left" : "char",
      "right" : "char",
      "info" : "PrimitiveType[50614-50618]:PrimitiveType[50800-50804]"
    }, {
      "left" : "_verifyNLZ2",
      "right" : "_verifyNLZ2",
      "info" : "SimpleName[50619-50630]:SimpleName[50805-50816]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[50640-50651]:SimpleType[50826-50837]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50656-51636]:Block[50842-51822]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd && !loadMore())",
      "right" : "if (_inputPtr >= _inputEnd && !loadMore())",
      "info" : "IfStatement[50666-50744]:IfStatement[50852-50930]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50709-50744]:Block[50895-50930]"
    }, {
      "left" : "return '0';",
      "right" : "return '0';",
      "info" : "ReturnStatement[50723-50734]:ReturnStatement[50909-50920]"
    }, {
      "left" : "char ch = _inputBuffer[_inputPtr];",
      "right" : "char ch = _inputBuffer[_inputPtr];",
      "info" : "VariableDeclarationStatement[50753-50787]:VariableDeclarationStatement[50939-50973]"
    }, {
      "left" : "if (ch < '0' || ch > '9')",
      "right" : "if (ch < '0' || ch > '9')",
      "info" : "IfStatement[50796-50857]:IfStatement[50982-51043]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50822-50857]:Block[51008-51043]"
    }, {
      "left" : "return '0';",
      "right" : "return '0';",
      "info" : "ReturnStatement[50836-50847]:ReturnStatement[51022-51033]"
    }, {
      "left" : "if (!isEnabled(Feature.ALLOW_NUMERIC_LEADING_ZEROS))",
      "right" : "if (!isEnabled(Feature.ALLOW_NUMERIC_LEADING_ZEROS))",
      "info" : "IfStatement[50866-50993]:IfStatement[51052-51179]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50919-50993]:Block[51105-51179]"
    }, {
      "left" : "reportInvalidNumber(\"Leading zeroes not allowed\");",
      "right" : "reportInvalidNumber(\"Leading zeroes not allowed\");",
      "info" : "ExpressionStatement[50933-50983]:ExpressionStatement[51119-51169]"
    }, {
      "left" : "++_inputPtr;",
      "right" : "++_inputPtr;",
      "info" : "ExpressionStatement[51112-51124]:ExpressionStatement[51298-51310]"
    }, {
      "left" : "if (ch == INT_0)",
      "right" : "if (ch == INT_0)",
      "info" : "IfStatement[51163-51611]:IfStatement[51349-51797]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51180-51611]:Block[51366-51797]"
    }, {
      "left" : "while (_inputPtr < _inputEnd || loadMore())",
      "right" : "while (_inputPtr < _inputEnd || loadMore())",
      "info" : "WhileStatement[51194-51601]:WhileStatement[51380-51787]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51238-51601]:Block[51424-51787]"
    }, {
      "left" : "ch = _inputBuffer[_inputPtr];",
      "right" : "ch = _inputBuffer[_inputPtr];",
      "info" : "ExpressionStatement[51256-51285]:ExpressionStatement[51442-51471]"
    }, {
      "left" : "if (ch < '0' || ch > '9')",
      "right" : "if (ch < '0' || ch > '9')",
      "info" : "IfStatement[51302-51422]:IfStatement[51488-51608]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51328-51422]:Block[51514-51608]"
    }, {
      "left" : "return '0';",
      "right" : "return '0';",
      "info" : "ReturnStatement[51393-51404]:ReturnStatement[51579-51590]"
    }, {
      "left" : "++_inputPtr;",
      "right" : "++_inputPtr;",
      "info" : "ExpressionStatement[51439-51451]:ExpressionStatement[51625-51637]"
    }, {
      "left" : "if (ch != '0')",
      "right" : "if (ch != '0')",
      "info" : "IfStatement[51490-51587]:IfStatement[51676-51773]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51505-51587]:Block[51691-51773]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[51563-51569]:BreakStatement[51749-51755]"
    }, {
      "left" : "return ch;",
      "right" : "return ch;",
      "info" : "ReturnStatement[51620-51630]:ReturnStatement[51806-51816]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[51762-51771]:Modifier[51948-51957]"
    }, {
      "left" : "JsonToken",
      "right" : "JsonToken",
      "info" : "SimpleType[51772-51781]:SimpleType[51958-51967]"
    }, {
      "left" : "_handleInvalidNumberStart",
      "right" : "_handleInvalidNumberStart",
      "info" : "SimpleName[51782-51807]:SimpleName[51968-51993]"
    }, {
      "left" : "int ch",
      "right" : "int ch",
      "info" : "SingleVariableDeclaration[51808-51814]:SingleVariableDeclaration[51994-52000]"
    }, {
      "left" : "boolean negative",
      "right" : "boolean negative",
      "info" : "SingleVariableDeclaration[51816-51832]:SingleVariableDeclaration[52002-52018]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[51841-51852]:SimpleType[52027-52038]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51857-53122]:Block[52043-53308]"
    }, {
      "left" : "if (ch == 'I')",
      "right" : "if (ch == 'I')",
      "info" : "IfStatement[51867-52985]:IfStatement[52053-53171]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51882-52985]:Block[52068-53171]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[51896-52004]:IfStatement[52082-52190]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51924-52004]:Block[52110-52190]"
    }, {
      "left" : "if (!loadMore())",
      "right" : "if (!loadMore())",
      "info" : "IfStatement[51942-51990]:IfStatement[52128-52176]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51959-51990]:Block[52145-52176]"
    }, {
      "left" : "_reportInvalidEOFInValue();",
      "right" : "_reportInvalidEOFInValue();",
      "info" : "ExpressionStatement[51961-51988]:ExpressionStatement[52147-52174]"
    }, {
      "left" : "ch = _inputBuffer[_inputPtr++];",
      "right" : "ch = _inputBuffer[_inputPtr++];",
      "info" : "ExpressionStatement[52017-52048]:ExpressionStatement[52203-52234]"
    }, {
      "left" : "if (ch == 'N')",
      "right" : "if (ch == 'N')",
      "info" : "IfStatement[52061-52975]:IfStatement[52247-53161]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52076-52510]:Block[52262-52696]"
    }, {
      "left" : "String match = negative ? \"-INF\" :\"+INF\";",
      "right" : "String match = negative ? \"-INF\" :\"+INF\";",
      "info" : "VariableDeclarationStatement[52094-52135]:VariableDeclarationStatement[52280-52321]"
    }, {
      "left" : "_matchToken(match, 3);",
      "right" : "_matchToken(match, 3);",
      "info" : "ExpressionStatement[52152-52174]:ExpressionStatement[52338-52360]"
    }, {
      "left" : "if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS))",
      "right" : "if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS))",
      "info" : "IfStatement[52191-52370]:IfStatement[52377-52556]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52241-52370]:Block[52427-52556]"
    }, {
      "left" : "return resetAsNaN(match, negative ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY);",
      "right" : "return resetAsNaN(match, negative ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY);",
      "info" : "ReturnStatement[52263-52352]:ReturnStatement[52449-52538]"
    }, {
      "left" : "_reportError(\"Non-standard token '\"+match+\"': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");",
      "right" : "_reportError(\"Non-standard token '\"+match+\"': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");",
      "info" : "ExpressionStatement[52387-52496]:ExpressionStatement[52573-52682]"
    }, {
      "left" : "if (ch == 'n')",
      "right" : "if (ch == 'n')",
      "info" : "IfStatement[52516-52975]:IfStatement[52702-53161]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52531-52975]:Block[52717-53161]"
    }, {
      "left" : "String match = negative ? \"-Infinity\" :\"+Infinity\";",
      "right" : "String match = negative ? \"-Infinity\" :\"+Infinity\";",
      "info" : "VariableDeclarationStatement[52549-52600]:VariableDeclarationStatement[52735-52786]"
    }, {
      "left" : "_matchToken(match, 3);",
      "right" : "_matchToken(match, 3);",
      "info" : "ExpressionStatement[52617-52639]:ExpressionStatement[52803-52825]"
    }, {
      "left" : "if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS))",
      "right" : "if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS))",
      "info" : "IfStatement[52656-52835]:IfStatement[52842-53021]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52706-52835]:Block[52892-53021]"
    }, {
      "left" : "return resetAsNaN(match, negative ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY);",
      "right" : "return resetAsNaN(match, negative ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY);",
      "info" : "ReturnStatement[52728-52817]:ReturnStatement[52914-53003]"
    }, {
      "left" : "_reportError(\"Non-standard token '\"+match+\"': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");",
      "right" : "_reportError(\"Non-standard token '\"+match+\"': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");",
      "info" : "ExpressionStatement[52852-52961]:ExpressionStatement[53038-53147]"
    }, {
      "left" : "reportUnexpectedNumberChar(ch, \"expected digit (0-9) to follow minus sign, for valid numeric value\");",
      "right" : "reportUnexpectedNumberChar(ch, \"expected digit (0-9) to follow minus sign, for valid numeric value\");",
      "info" : "ExpressionStatement[52994-53095]:ExpressionStatement[53180-53281]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[53104-53116]:ReturnStatement[53290-53302]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[53373-53380]:Modifier[53559-53566]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[53381-53386]:Modifier[53567-53572]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[53387-53391]:PrimitiveType[53573-53577]"
    }, {
      "left" : "_verifyRootSpace",
      "right" : "_verifyRootSpace",
      "info" : "SimpleName[53392-53408]:SimpleName[53578-53594]"
    }, {
      "left" : "int ch",
      "right" : "int ch",
      "info" : "SingleVariableDeclaration[53409-53415]:SingleVariableDeclaration[53595-53601]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[53424-53435]:SimpleType[53610-53621]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53440-53825]:Block[53626-54011]"
    }, {
      "left" : "++_inputPtr;",
      "right" : "++_inputPtr;",
      "info" : "ExpressionStatement[53510-53522]:ExpressionStatement[53696-53708]"
    }, {
      "left" : "switch (ch) {\n        case ' ':\n        case '\\t':\n            return;\n        case '\\r':\n            _skipCR();\n            return;\n        case '\\n':\n            ++_currInputRow;\n            _currInputRowStart = _inputPtr;\n            return;\n        }",
      "right" : "switch (ch) {\n        case ' ':\n        case '\\t':\n            return;\n        case '\\r':\n            _skipCR();\n            return;\n        case '\\n':\n            ++_currInputRow;\n            _currInputRowStart = _inputPtr;\n            return;\n        }",
      "info" : "SwitchStatement[53531-53785]:SwitchStatement[53717-53971]"
    }, {
      "left" : "case ' ':",
      "right" : "case ' ':",
      "info" : "SwitchCase[53553-53562]:SwitchCase[53739-53748]"
    }, {
      "left" : "case '\\t':",
      "right" : "case '\\t':",
      "info" : "SwitchCase[53571-53581]:SwitchCase[53757-53767]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[53594-53601]:ReturnStatement[53780-53787]"
    }, {
      "left" : "case '\\r':",
      "right" : "case '\\r':",
      "info" : "SwitchCase[53610-53620]:SwitchCase[53796-53806]"
    }, {
      "left" : "_skipCR();",
      "right" : "_skipCR();",
      "info" : "ExpressionStatement[53633-53643]:ExpressionStatement[53819-53829]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[53656-53663]:ReturnStatement[53842-53849]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[53672-53682]:SwitchCase[53858-53868]"
    }, {
      "left" : "++_currInputRow;",
      "right" : "++_currInputRow;",
      "info" : "ExpressionStatement[53695-53711]:ExpressionStatement[53881-53897]"
    }, {
      "left" : "_currInputRowStart = _inputPtr;",
      "right" : "_currInputRowStart = _inputPtr;",
      "info" : "ExpressionStatement[53724-53755]:ExpressionStatement[53910-53941]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[53768-53775]:ReturnStatement[53954-53961]"
    }, {
      "left" : "_reportMissingRootWS(ch);",
      "right" : "_reportMissingRootWS(ch);",
      "info" : "ExpressionStatement[53794-53819]:ExpressionStatement[53980-54005]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[54018-54027]:Modifier[54204-54213]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[54028-54033]:Modifier[54214-54219]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[54034-54040]:SimpleType[54220-54226]"
    }, {
      "left" : "_parseName",
      "right" : "_parseName",
      "info" : "SimpleName[54041-54051]:SimpleName[54227-54237]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[54061-54072]:SimpleType[54247-54258]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54077-54955]:Block[54263-55141]"
    }, {
      "left" : "int ptr = _inputPtr;",
      "right" : "int ptr = _inputPtr;",
      "info" : "VariableDeclarationStatement[54245-54265]:VariableDeclarationStatement[54431-54451]"
    }, {
      "left" : "int hash = _hashSeed;",
      "right" : "int hash = _hashSeed;",
      "info" : "VariableDeclarationStatement[54274-54295]:VariableDeclarationStatement[54460-54481]"
    }, {
      "left" : "final int[] codes = _icLatin1;",
      "right" : "final int[] codes = _icLatin1;",
      "info" : "VariableDeclarationStatement[54304-54334]:VariableDeclarationStatement[54490-54520]"
    }, {
      "left" : "while (ptr < _inputEnd)",
      "right" : "while (ptr < _inputEnd)",
      "info" : "WhileStatement[54344-54841]:WhileStatement[54530-55027]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54368-54841]:Block[54554-55027]"
    }, {
      "left" : "int ch = _inputBuffer[ptr];",
      "right" : "int ch = _inputBuffer[ptr];",
      "info" : "VariableDeclarationStatement[54382-54409]:VariableDeclarationStatement[54568-54595]"
    }, {
      "left" : "if (ch < codes.length && codes[ch] != 0)",
      "right" : "if (ch < codes.length && codes[ch] != 0)",
      "info" : "IfStatement[54422-54743]:IfStatement[54608-54929]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54463-54743]:Block[54649-54929]"
    }, {
      "left" : "if (ch == '\"')",
      "right" : "if (ch == '\"')",
      "info" : "IfStatement[54481-54706]:IfStatement[54667-54892]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54496-54706]:Block[54682-54892]"
    }, {
      "left" : "int start = _inputPtr;",
      "right" : "int start = _inputPtr;",
      "info" : "VariableDeclarationStatement[54518-54540]:VariableDeclarationStatement[54704-54726]"
    }, {
      "left" : "_inputPtr = ptr+1;",
      "right" : "_inputPtr = ptr+1;",
      "info" : "ExpressionStatement[54561-54579]:ExpressionStatement[54747-54765]"
    }, {
      "left" : "return _symbols.findSymbol(_inputBuffer, start, ptr - start, hash);",
      "right" : "return _symbols.findSymbol(_inputBuffer, start, ptr - start, hash);",
      "info" : "ReturnStatement[54621-54688]:ReturnStatement[54807-54874]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[54723-54729]:BreakStatement[54909-54915]"
    }, {
      "left" : "hash = (hash * CharsToNameCanonicalizer.HASH_MULT) + ch;",
      "right" : "hash = (hash * CharsToNameCanonicalizer.HASH_MULT) + ch;",
      "info" : "ExpressionStatement[54756-54812]:ExpressionStatement[54942-54998]"
    }, {
      "left" : "++ptr;",
      "right" : "++ptr;",
      "info" : "ExpressionStatement[54825-54831]:ExpressionStatement[55011-55017]"
    }, {
      "left" : "int start = _inputPtr;",
      "right" : "int start = _inputPtr;",
      "info" : "VariableDeclarationStatement[54850-54872]:VariableDeclarationStatement[55036-55058]"
    }, {
      "left" : "_inputPtr = ptr;",
      "right" : "_inputPtr = ptr;",
      "info" : "ExpressionStatement[54881-54897]:ExpressionStatement[55067-55083]"
    }, {
      "left" : "return _parseName2(start, hash, INT_QUOTE);",
      "right" : "return _parseName2(start, hash, INT_QUOTE);",
      "info" : "ReturnStatement[54906-54949]:ReturnStatement[55092-55135]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[54961-54968]:Modifier[55147-55154]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[54969-54975]:SimpleType[55155-55161]"
    }, {
      "left" : "_parseName2",
      "right" : "_parseName2",
      "info" : "SimpleName[54976-54987]:SimpleName[55162-55173]"
    }, {
      "left" : "int startPtr",
      "right" : "int startPtr",
      "info" : "SingleVariableDeclaration[54988-55000]:SingleVariableDeclaration[55174-55186]"
    }, {
      "left" : "int hash",
      "right" : "int hash",
      "info" : "SingleVariableDeclaration[55002-55010]:SingleVariableDeclaration[55188-55196]"
    }, {
      "left" : "int endChar",
      "right" : "int endChar",
      "info" : "SingleVariableDeclaration[55012-55023]:SingleVariableDeclaration[55198-55209]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[55032-55043]:SimpleType[55218-55229]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55048-56976]:Block[55234-57162]"
    }, {
      "left" : "_textBuffer.resetWithShared(_inputBuffer, startPtr, (_inputPtr - startPtr));",
      "right" : "_textBuffer.resetWithShared(_inputBuffer, startPtr, (_inputPtr - startPtr));",
      "info" : "ExpressionStatement[55058-55134]:ExpressionStatement[55244-55320]"
    }, {
      "left" : "char[] outBuf = _textBuffer.getCurrentSegment();",
      "right" : "char[] outBuf = _textBuffer.getCurrentSegment();",
      "info" : "VariableDeclarationStatement[55289-55337]:VariableDeclarationStatement[55475-55523]"
    }, {
      "left" : "int outPtr = _textBuffer.getCurrentSegmentSize();",
      "right" : "int outPtr = _textBuffer.getCurrentSegmentSize();",
      "info" : "VariableDeclarationStatement[55346-55395]:VariableDeclarationStatement[55532-55581]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[55405-56678]:WhileStatement[55591-56864]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55418-56678]:Block[55604-56864]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[55432-55626]:IfStatement[55618-55812]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55460-55626]:Block[55646-55812]"
    }, {
      "left" : "if (!loadMore())",
      "right" : "if (!loadMore())",
      "info" : "IfStatement[55478-55612]:IfStatement[55664-55798]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55495-55612]:Block[55681-55798]"
    }, {
      "left" : "_reportInvalidEOF(\": was expecting closing '\"+((char) endChar)+\"' for name\");",
      "right" : "_reportInvalidEOF(\": was expecting closing '\"+((char) endChar)+\"' for name\");",
      "info" : "ExpressionStatement[55517-55594]:ExpressionStatement[55703-55780]"
    }, {
      "left" : "char c = _inputBuffer[_inputPtr++];",
      "right" : "char c = _inputBuffer[_inputPtr++];",
      "info" : "VariableDeclarationStatement[55639-55674]:VariableDeclarationStatement[55825-55860]"
    }, {
      "left" : "int i = (int) c;",
      "right" : "int i = (int) c;",
      "info" : "VariableDeclarationStatement[55687-55703]:VariableDeclarationStatement[55873-55889]"
    }, {
      "left" : "if (i <= INT_BACKSLASH)",
      "right" : "if (i <= INT_BACKSLASH)",
      "info" : "IfStatement[55716-56343]:IfStatement[55902-56529]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55740-56343]:Block[55926-56529]"
    }, {
      "left" : "if (i == INT_BACKSLASH)",
      "right" : "if (i == INT_BACKSLASH)",
      "info" : "IfStatement[55758-56329]:IfStatement[55944-56515]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55782-56074]:Block[55968-56260]"
    }, {
      "left" : "c = _decodeEscaped();",
      "right" : "c = _decodeEscaped();",
      "info" : "ExpressionStatement[56035-56056]:ExpressionStatement[56221-56242]"
    }, {
      "left" : "if (i <= endChar)",
      "right" : "if (i <= endChar)",
      "info" : "IfStatement[56080-56329]:IfStatement[56266-56515]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56098-56329]:Block[56284-56515]"
    }, {
      "left" : "if (i == endChar)",
      "right" : "if (i == endChar)",
      "info" : "IfStatement[56120-56192]:IfStatement[56306-56378]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56138-56192]:Block[56324-56378]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[56164-56170]:BreakStatement[56350-56356]"
    }, {
      "left" : "if (i < INT_SPACE)",
      "right" : "if (i < INT_SPACE)",
      "info" : "IfStatement[56213-56311]:IfStatement[56399-56497]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56232-56311]:Block[56418-56497]"
    }, {
      "left" : "_throwUnquotedSpace(i, \"name\");",
      "right" : "_throwUnquotedSpace(i, \"name\");",
      "info" : "ExpressionStatement[56258-56289]:ExpressionStatement[56444-56475]"
    }, {
      "left" : "hash = (hash * CharsToNameCanonicalizer.HASH_MULT) + c;",
      "right" : "hash = (hash * CharsToNameCanonicalizer.HASH_MULT) + c;",
      "info" : "ExpressionStatement[56356-56411]:ExpressionStatement[56542-56597]"
    }, {
      "left" : "outBuf[outPtr++] = c;",
      "right" : "outBuf[outPtr++] = c;",
      "info" : "ExpressionStatement[56469-56490]:ExpressionStatement[56655-56676]"
    }, {
      "left" : "if (outPtr >= outBuf.length)",
      "right" : "if (outPtr >= outBuf.length)",
      "info" : "IfStatement[56535-56668]:IfStatement[56721-56854]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56564-56668]:Block[56750-56854]"
    }, {
      "left" : "outBuf = _textBuffer.finishCurrentSegment();",
      "right" : "outBuf = _textBuffer.finishCurrentSegment();",
      "info" : "ExpressionStatement[56582-56626]:ExpressionStatement[56768-56812]"
    }, {
      "left" : "outPtr = 0;",
      "right" : "outPtr = 0;",
      "info" : "ExpressionStatement[56643-56654]:ExpressionStatement[56829-56840]"
    }, {
      "left" : "_textBuffer.setCurrentLength(outPtr);",
      "right" : "_textBuffer.setCurrentLength(outPtr);",
      "info" : "ExpressionStatement[56687-56724]:ExpressionStatement[56873-56910]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56733-56970]:Block[56919-57156]"
    }, {
      "left" : "TextBuffer tb = _textBuffer;",
      "right" : "TextBuffer tb = _textBuffer;",
      "info" : "VariableDeclarationStatement[56747-56775]:VariableDeclarationStatement[56933-56961]"
    }, {
      "left" : "char[] buf = tb.getTextBuffer();",
      "right" : "char[] buf = tb.getTextBuffer();",
      "info" : "VariableDeclarationStatement[56788-56820]:VariableDeclarationStatement[56974-57006]"
    }, {
      "left" : "int start = tb.getTextOffset();",
      "right" : "int start = tb.getTextOffset();",
      "info" : "VariableDeclarationStatement[56833-56864]:VariableDeclarationStatement[57019-57050]"
    }, {
      "left" : "int len = tb.size();",
      "right" : "int len = tb.size();",
      "info" : "VariableDeclarationStatement[56877-56897]:VariableDeclarationStatement[57063-57083]"
    }, {
      "left" : "return _symbols.findSymbol(buf, start, len, hash);",
      "right" : "return _symbols.findSymbol(buf, start, len, hash);",
      "info" : "ReturnStatement[56910-56960]:ReturnStatement[57096-57146]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[57232-57241]:Modifier[57418-57427]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[57242-57248]:SimpleType[57428-57434]"
    }, {
      "left" : "_handleOddName",
      "right" : "_handleOddName",
      "info" : "SimpleName[57249-57263]:SimpleName[57435-57449]"
    }, {
      "left" : "int i",
      "right" : "int i",
      "info" : "SingleVariableDeclaration[57264-57269]:SingleVariableDeclaration[57450-57455]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[57278-57289]:SimpleType[57464-57475]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57294-59330]:Block[57480-59516]"
    }, {
      "left" : "if (i == '\\'' && isEnabled(Feature.ALLOW_SINGLE_QUOTES))",
      "right" : "if (i == '\\'' && isEnabled(Feature.ALLOW_SINGLE_QUOTES))",
      "info" : "IfStatement[57350-57455]:IfStatement[57536-57641]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57407-57455]:Block[57593-57641]"
    }, {
      "left" : "return _parseAposName();",
      "right" : "return _parseAposName();",
      "info" : "ReturnStatement[57421-57445]:ReturnStatement[57607-57631]"
    }, {
      "left" : "if (!isEnabled(Feature.ALLOW_UNQUOTED_FIELD_NAMES))",
      "right" : "if (!isEnabled(Feature.ALLOW_UNQUOTED_FIELD_NAMES))",
      "info" : "IfStatement[57530-57681]:IfStatement[57716-57867]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57582-57681]:Block[57768-57867]"
    }, {
      "left" : "_reportUnexpectedChar(i, \"was expecting double-quote to start field name\");",
      "right" : "_reportUnexpectedChar(i, \"was expecting double-quote to start field name\");",
      "info" : "ExpressionStatement[57596-57671]:ExpressionStatement[57782-57857]"
    }, {
      "left" : "final int[] codes = CharTypes.getInputCodeLatin1JsNames();",
      "right" : "final int[] codes = CharTypes.getInputCodeLatin1JsNames();",
      "info" : "VariableDeclarationStatement[57690-57748]:VariableDeclarationStatement[57876-57934]"
    }, {
      "left" : "final int maxCode = codes.length;",
      "right" : "final int maxCode = codes.length;",
      "info" : "VariableDeclarationStatement[57757-57790]:VariableDeclarationStatement[57943-57976]"
    }, {
      "left" : "boolean firstOk;",
      "right" : "boolean firstOk;",
      "info" : "VariableDeclarationStatement[57873-57889]:VariableDeclarationStatement[58059-58075]"
    }, {
      "left" : "if (i < maxCode)",
      "right" : "if (i < maxCode)",
      "info" : "IfStatement[57899-58088]:IfStatement[58085-58274]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57916-58007]:Block[58102-58193]"
    }, {
      "left" : "firstOk = (codes[i] == 0);",
      "right" : "firstOk = (codes[i] == 0);",
      "info" : "ExpressionStatement[57971-57997]:ExpressionStatement[58157-58183]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58013-58088]:Block[58199-58274]"
    }, {
      "left" : "firstOk = Character.isJavaIdentifierPart((char) i);",
      "right" : "firstOk = Character.isJavaIdentifierPart((char) i);",
      "info" : "ExpressionStatement[58027-58078]:ExpressionStatement[58213-58264]"
    }, {
      "left" : "if (!firstOk)",
      "right" : "if (!firstOk)",
      "info" : "IfStatement[58097-58274]:IfStatement[58283-58460]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58111-58274]:Block[58297-58460]"
    }, {
      "left" : "_reportUnexpectedChar(i, \"was expecting either valid name character (for unquoted name) or double-quote (for quoted) to start field name\");",
      "right" : "_reportUnexpectedChar(i, \"was expecting either valid name character (for unquoted name) or double-quote (for quoted) to start field name\");",
      "info" : "ExpressionStatement[58125-58264]:ExpressionStatement[58311-58450]"
    }, {
      "left" : "int ptr = _inputPtr;",
      "right" : "int ptr = _inputPtr;",
      "info" : "VariableDeclarationStatement[58283-58303]:VariableDeclarationStatement[58469-58489]"
    }, {
      "left" : "int hash = _hashSeed;",
      "right" : "int hash = _hashSeed;",
      "info" : "VariableDeclarationStatement[58312-58333]:VariableDeclarationStatement[58498-58519]"
    }, {
      "left" : "final int inputLen = _inputEnd;",
      "right" : "final int inputLen = _inputEnd;",
      "info" : "VariableDeclarationStatement[58342-58373]:VariableDeclarationStatement[58528-58559]"
    }, {
      "left" : "if (ptr < inputLen)",
      "right" : "if (ptr < inputLen)",
      "info" : "IfStatement[58383-59214]:IfStatement[58569-59400]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58403-59214]:Block[58589-59400]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[58417-59204]:DoStatement[58603-59390]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58420-59180]:Block[58606-59366]"
    }, {
      "left" : "int ch = _inputBuffer[ptr];",
      "right" : "int ch = _inputBuffer[ptr];",
      "info" : "VariableDeclarationStatement[58438-58465]:VariableDeclarationStatement[58624-58651]"
    }, {
      "left" : "if (ch < maxCode)",
      "right" : "if (ch < maxCode)",
      "info" : "IfStatement[58482-59070]:IfStatement[58668-59256]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58500-58796]:Block[58686-58982]"
    }, {
      "left" : "if (codes[ch] != 0)",
      "right" : "if (codes[ch] != 0)",
      "info" : "IfStatement[58522-58778]:IfStatement[58708-58964]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58542-58778]:Block[58728-58964]"
    }, {
      "left" : "int start = _inputPtr-1;",
      "right" : "int start = _inputPtr-1;",
      "info" : "VariableDeclarationStatement[58568-58592]:VariableDeclarationStatement[58754-58778]"
    }, {
      "left" : "_inputPtr = ptr;",
      "right" : "_inputPtr = ptr;",
      "info" : "ExpressionStatement[58648-58664]:ExpressionStatement[58834-58850]"
    }, {
      "left" : "return _symbols.findSymbol(_inputBuffer, start, ptr - start, hash);",
      "right" : "return _symbols.findSymbol(_inputBuffer, start, ptr - start, hash);",
      "info" : "ReturnStatement[58689-58756]:ReturnStatement[58875-58942]"
    }, {
      "left" : "if (!Character.isJavaIdentifierPart((char) ch))",
      "right" : "if (!Character.isJavaIdentifierPart((char) ch))",
      "info" : "IfStatement[58802-59070]:IfStatement[58988-59256]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58850-59070]:Block[59036-59256]"
    }, {
      "left" : "int start = _inputPtr-1;",
      "right" : "int start = _inputPtr-1;",
      "info" : "VariableDeclarationStatement[58872-58896]:VariableDeclarationStatement[59058-59082]"
    }, {
      "left" : "_inputPtr = ptr;",
      "right" : "_inputPtr = ptr;",
      "info" : "ExpressionStatement[58948-58964]:ExpressionStatement[59134-59150]"
    }, {
      "left" : "return _symbols.findSymbol(_inputBuffer, start, ptr - start, hash);",
      "right" : "return _symbols.findSymbol(_inputBuffer, start, ptr - start, hash);",
      "info" : "ReturnStatement[58985-59052]:ReturnStatement[59171-59238]"
    }, {
      "left" : "hash = (hash * CharsToNameCanonicalizer.HASH_MULT) + ch;",
      "right" : "hash = (hash * CharsToNameCanonicalizer.HASH_MULT) + ch;",
      "info" : "ExpressionStatement[59087-59143]:ExpressionStatement[59273-59329]"
    }, {
      "left" : "++ptr;",
      "right" : "++ptr;",
      "info" : "ExpressionStatement[59160-59166]:ExpressionStatement[59346-59352]"
    }, {
      "left" : "int start = _inputPtr-1;",
      "right" : "int start = _inputPtr-1;",
      "info" : "VariableDeclarationStatement[59223-59247]:VariableDeclarationStatement[59409-59433]"
    }, {
      "left" : "_inputPtr = ptr;",
      "right" : "_inputPtr = ptr;",
      "info" : "ExpressionStatement[59256-59272]:ExpressionStatement[59442-59458]"
    }, {
      "left" : "return _handleOddName2(start, hash, codes);",
      "right" : "return _handleOddName2(start, hash, codes);",
      "info" : "ReturnStatement[59281-59324]:ReturnStatement[59467-59510]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[59336-59345]:Modifier[59522-59531]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[59346-59352]:SimpleType[59532-59538]"
    }, {
      "left" : "_parseAposName",
      "right" : "_parseAposName",
      "info" : "SimpleName[59353-59367]:SimpleName[59539-59553]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[59377-59388]:SimpleType[59563-59574]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59393-60319]:Block[59579-60505]"
    }, {
      "left" : "int ptr = _inputPtr;",
      "right" : "int ptr = _inputPtr;",
      "info" : "VariableDeclarationStatement[59450-59470]:VariableDeclarationStatement[59636-59656]"
    }, {
      "left" : "int hash = _hashSeed;",
      "right" : "int hash = _hashSeed;",
      "info" : "VariableDeclarationStatement[59479-59500]:VariableDeclarationStatement[59665-59686]"
    }, {
      "left" : "final int inputLen = _inputEnd;",
      "right" : "final int inputLen = _inputEnd;",
      "info" : "VariableDeclarationStatement[59509-59540]:VariableDeclarationStatement[59695-59726]"
    }, {
      "left" : "if (ptr < inputLen)",
      "right" : "if (ptr < inputLen)",
      "info" : "IfStatement[59550-60208]:IfStatement[59736-60394]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59570-60208]:Block[59756-60394]"
    }, {
      "left" : "final int[] codes = _icLatin1;",
      "right" : "final int[] codes = _icLatin1;",
      "info" : "VariableDeclarationStatement[59584-59614]:VariableDeclarationStatement[59770-59800]"
    }, {
      "left" : "final int maxCode = codes.length;",
      "right" : "final int maxCode = codes.length;",
      "info" : "VariableDeclarationStatement[59627-59660]:VariableDeclarationStatement[59813-59846]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[59674-60198]:DoStatement[59860-60384]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59677-60174]:Block[59863-60360]"
    }, {
      "left" : "int ch = _inputBuffer[ptr];",
      "right" : "int ch = _inputBuffer[ptr];",
      "info" : "VariableDeclarationStatement[59695-59722]:VariableDeclarationStatement[59881-59908]"
    }, {
      "left" : "if (ch == '\\'')",
      "right" : "if (ch == '\\'')",
      "info" : "IfStatement[59739-59965]:IfStatement[59925-60151]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59755-59965]:Block[59941-60151]"
    }, {
      "left" : "int start = _inputPtr;",
      "right" : "int start = _inputPtr;",
      "info" : "VariableDeclarationStatement[59777-59799]:VariableDeclarationStatement[59963-59985]"
    }, {
      "left" : "_inputPtr = ptr+1;",
      "right" : "_inputPtr = ptr+1;",
      "info" : "ExpressionStatement[59820-59838]:ExpressionStatement[60006-60024]"
    }, {
      "left" : "return _symbols.findSymbol(_inputBuffer, start, ptr - start, hash);",
      "right" : "return _symbols.findSymbol(_inputBuffer, start, ptr - start, hash);",
      "info" : "ReturnStatement[59880-59947]:ReturnStatement[60066-60133]"
    }, {
      "left" : "if (ch < maxCode && codes[ch] != 0)",
      "right" : "if (ch < maxCode && codes[ch] != 0)",
      "info" : "IfStatement[59982-60064]:IfStatement[60168-60250]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60018-60064]:Block[60204-60250]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[60040-60046]:BreakStatement[60226-60232]"
    }, {
      "left" : "hash = (hash * CharsToNameCanonicalizer.HASH_MULT) + ch;",
      "right" : "hash = (hash * CharsToNameCanonicalizer.HASH_MULT) + ch;",
      "info" : "ExpressionStatement[60081-60137]:ExpressionStatement[60267-60323]"
    }, {
      "left" : "++ptr;",
      "right" : "++ptr;",
      "info" : "ExpressionStatement[60154-60160]:ExpressionStatement[60340-60346]"
    }, {
      "left" : "int start = _inputPtr;",
      "right" : "int start = _inputPtr;",
      "info" : "VariableDeclarationStatement[60218-60240]:VariableDeclarationStatement[60404-60426]"
    }, {
      "left" : "_inputPtr = ptr;",
      "right" : "_inputPtr = ptr;",
      "info" : "ExpressionStatement[60249-60265]:ExpressionStatement[60435-60451]"
    }, {
      "left" : "return _parseName2(start, hash, '\\'');",
      "right" : "return _parseName2(start, hash, '\\'');",
      "info" : "ReturnStatement[60275-60313]:ReturnStatement[60461-60499]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[60480-60489]:Modifier[60666-60675]"
    }, {
      "left" : "JsonToken",
      "right" : "JsonToken",
      "info" : "SimpleType[60490-60499]:SimpleType[60676-60685]"
    }, {
      "left" : "_handleOddValue",
      "right" : "_handleOddValue",
      "info" : "SimpleName[60500-60515]:SimpleName[60686-60701]"
    }, {
      "left" : "int i",
      "right" : "int i",
      "info" : "SingleVariableDeclaration[60516-60521]:SingleVariableDeclaration[60702-60707]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[60530-60541]:SimpleType[60716-60727]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60546-62527]:Block[60732-62713]"
    }, {
      "left" : "switch (i) {\n        case '\\'':\n            /* [JACKSON-173]: allow single quotes. Unlike with regular\n             * Strings, we'll eagerly parse contents; this so that there's\n             * no need to store information on quote char used.\n             *\n             * Also, no separation to fast/slow parsing; we'll just do\n             * one regular (~= slowish) parsing, to keep code simple\n             */\n            if (isEnabled(Feature.ALLOW_SINGLE_QUOTES)) {\n                return _handleApos();\n            }\n            break;\n        case 'N':\n            _matchToken(\"NaN\", 1);\n            if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS)) {\n                return resetAsNaN(\"NaN\", Double.NaN);\n            }\n            _reportError(\"Non-standard token 'NaN': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");\n            break;\n        case 'I':\n            _matchToken(\"Infinity\", 1);\n            if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS)) {\n                return resetAsNaN(\"Infinity\", Double.POSITIVE_INFINITY);\n            }\n            _reportError(\"Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");\n            break;\n        case '+': // note: '-' is taken as number\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOFInValue();\n                }\n            }\n            return _handleInvalidNumberStart(_inputBuffer[_inputPtr++], false);\n        }",
      "right" : "switch (i) {\n        case '\\'':\n            /* [JACKSON-173]: allow single quotes. Unlike with regular\n             * Strings, we'll eagerly parse contents; this so that there's\n             * no need to store information on quote char used.\n             *\n             * Also, no separation to fast/slow parsing; we'll just do\n             * one regular (~= slowish) parsing, to keep code simple\n             */\n            if (isEnabled(Feature.ALLOW_SINGLE_QUOTES)) {\n                return _handleApos();\n            }\n            break;\n        case 'N':\n            _matchToken(\"NaN\", 1);\n            if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS)) {\n                return resetAsNaN(\"NaN\", Double.NaN);\n            }\n            _reportError(\"Non-standard token 'NaN': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");\n            break;\n        case 'I':\n            _matchToken(\"Infinity\", 1);\n            if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS)) {\n                return resetAsNaN(\"Infinity\", Double.POSITIVE_INFINITY);\n            }\n            _reportError(\"Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");\n            break;\n        case '+': // note: '-' is taken as number\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOFInValue();\n                }\n            }\n            return _handleInvalidNumberStart(_inputBuffer[_inputPtr++], false);\n        }",
      "info" : "SwitchStatement[60633-62140]:SwitchStatement[60819-62326]"
    }, {
      "left" : "case '\\'':",
      "right" : "case '\\'':",
      "info" : "SwitchCase[60654-60664]:SwitchCase[60840-60850]"
    }, {
      "left" : "if (isEnabled(Feature.ALLOW_SINGLE_QUOTES))",
      "right" : "if (isEnabled(Feature.ALLOW_SINGLE_QUOTES))",
      "info" : "IfStatement[61058-61155]:IfStatement[61244-61341]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61102-61155]:Block[61288-61341]"
    }, {
      "left" : "return _handleApos();",
      "right" : "return _handleApos();",
      "info" : "ReturnStatement[61120-61141]:ReturnStatement[61306-61327]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[61168-61174]:BreakStatement[61354-61360]"
    }, {
      "left" : "case 'N':",
      "right" : "case 'N':",
      "info" : "SwitchCase[61183-61192]:SwitchCase[61369-61378]"
    }, {
      "left" : "_matchToken(\"NaN\", 1);",
      "right" : "_matchToken(\"NaN\", 1);",
      "info" : "ExpressionStatement[61205-61227]:ExpressionStatement[61391-61413]"
    }, {
      "left" : "if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS))",
      "right" : "if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS))",
      "info" : "IfStatement[61240-61359]:IfStatement[61426-61545]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61290-61359]:Block[61476-61545]"
    }, {
      "left" : "return resetAsNaN(\"NaN\", Double.NaN);",
      "right" : "return resetAsNaN(\"NaN\", Double.NaN);",
      "info" : "ReturnStatement[61308-61345]:ReturnStatement[61494-61531]"
    }, {
      "left" : "_reportError(\"Non-standard token 'NaN': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");",
      "right" : "_reportError(\"Non-standard token 'NaN': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");",
      "info" : "ExpressionStatement[61372-61475]:ExpressionStatement[61558-61661]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[61488-61494]:BreakStatement[61674-61680]"
    }, {
      "left" : "case 'I':",
      "right" : "case 'I':",
      "info" : "SwitchCase[61503-61512]:SwitchCase[61689-61698]"
    }, {
      "left" : "_matchToken(\"Infinity\", 1);",
      "right" : "_matchToken(\"Infinity\", 1);",
      "info" : "ExpressionStatement[61525-61552]:ExpressionStatement[61711-61738]"
    }, {
      "left" : "if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS))",
      "right" : "if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS))",
      "info" : "IfStatement[61565-61703]:IfStatement[61751-61889]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61615-61703]:Block[61801-61889]"
    }, {
      "left" : "return resetAsNaN(\"Infinity\", Double.POSITIVE_INFINITY);",
      "right" : "return resetAsNaN(\"Infinity\", Double.POSITIVE_INFINITY);",
      "info" : "ReturnStatement[61633-61689]:ReturnStatement[61819-61875]"
    }, {
      "left" : "_reportError(\"Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");",
      "right" : "_reportError(\"Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");",
      "info" : "ExpressionStatement[61716-61824]:ExpressionStatement[61902-62010]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[61837-61843]:BreakStatement[62023-62029]"
    }, {
      "left" : "case '+':",
      "right" : "case '+':",
      "info" : "SwitchCase[61852-61861]:SwitchCase[62038-62047]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[61906-62050]:IfStatement[62092-62236]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61934-62050]:Block[62120-62236]"
    }, {
      "left" : "if (!loadMore())",
      "right" : "if (!loadMore())",
      "info" : "IfStatement[61952-62036]:IfStatement[62138-62222]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61969-62036]:Block[62155-62222]"
    }, {
      "left" : "_reportInvalidEOFInValue();",
      "right" : "_reportInvalidEOFInValue();",
      "info" : "ExpressionStatement[61991-62018]:ExpressionStatement[62177-62204]"
    }, {
      "left" : "return _handleInvalidNumberStart(_inputBuffer[_inputPtr++], false);",
      "right" : "return _handleInvalidNumberStart(_inputBuffer[_inputPtr++], false);",
      "info" : "ReturnStatement[62063-62130]:ReturnStatement[62249-62316]"
    }, {
      "left" : "if (Character.isJavaIdentifierStart(i))",
      "right" : "if (Character.isJavaIdentifierStart(i))",
      "info" : "IfStatement[62203-62333]:IfStatement[62389-62519]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62243-62333]:Block[62429-62519]"
    }, {
      "left" : "_reportInvalidToken(\"\"+((char) i), \"('true', 'false' or 'null')\");",
      "right" : "_reportInvalidToken(\"\"+((char) i), \"('true', 'false' or 'null')\");",
      "info" : "ExpressionStatement[62257-62323]:ExpressionStatement[62443-62509]"
    }, {
      "left" : "_reportUnexpectedChar(i, \"expected a valid value (number, String, array, object, 'true', 'false' or 'null')\");",
      "right" : "_reportUnexpectedChar(i, \"expected a valid value (number, String, array, object, 'true', 'false' or 'null')\");",
      "info" : "ExpressionStatement[62390-62500]:ExpressionStatement[62576-62686]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[62509-62521]:ReturnStatement[62695-62707]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[62533-62542]:Modifier[62719-62728]"
    }, {
      "left" : "JsonToken",
      "right" : "JsonToken",
      "info" : "SimpleType[62543-62552]:SimpleType[62729-62738]"
    }, {
      "left" : "_handleApos",
      "right" : "_handleApos",
      "info" : "SimpleName[62553-62564]:SimpleName[62739-62750]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[62574-62585]:SimpleType[62760-62771]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62590-63996]:Block[62776-64182]"
    }, {
      "left" : "char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();",
      "right" : "char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();",
      "info" : "VariableDeclarationStatement[62600-62656]:VariableDeclarationStatement[62786-62842]"
    }, {
      "left" : "int outPtr = _textBuffer.getCurrentSegmentSize();",
      "right" : "int outPtr = _textBuffer.getCurrentSegmentSize();",
      "info" : "VariableDeclarationStatement[62665-62714]:VariableDeclarationStatement[62851-62900]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[62724-63905]:WhileStatement[62910-64091]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62737-63905]:Block[62923-64091]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[62751-62938]:IfStatement[62937-63124]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62779-62938]:Block[62965-63124]"
    }, {
      "left" : "if (!loadMore())",
      "right" : "if (!loadMore())",
      "info" : "IfStatement[62797-62924]:IfStatement[62983-63110]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62814-62924]:Block[63000-63110]"
    }, {
      "left" : "_reportInvalidEOF(\": was expecting closing quote for a string value\");",
      "right" : "_reportInvalidEOF(\": was expecting closing quote for a string value\");",
      "info" : "ExpressionStatement[62836-62906]:ExpressionStatement[63022-63092]"
    }, {
      "left" : "char c = _inputBuffer[_inputPtr++];",
      "right" : "char c = _inputBuffer[_inputPtr++];",
      "info" : "VariableDeclarationStatement[62951-62986]:VariableDeclarationStatement[63137-63172]"
    }, {
      "left" : "int i = (int) c;",
      "right" : "int i = (int) c;",
      "info" : "VariableDeclarationStatement[62999-63015]:VariableDeclarationStatement[63185-63201]"
    }, {
      "left" : "if (i <= '\\\\')",
      "right" : "if (i <= '\\\\')",
      "info" : "IfStatement[63028-63639]:IfStatement[63214-63825]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63043-63639]:Block[63229-63825]"
    }, {
      "left" : "if (i == '\\\\')",
      "right" : "if (i == '\\\\')",
      "info" : "IfStatement[63061-63625]:IfStatement[63247-63811]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63076-63368]:Block[63262-63554]"
    }, {
      "left" : "c = _decodeEscaped();",
      "right" : "c = _decodeEscaped();",
      "info" : "ExpressionStatement[63329-63350]:ExpressionStatement[63515-63536]"
    }, {
      "left" : "if (i <= '\\'')",
      "right" : "if (i <= '\\'')",
      "info" : "IfStatement[63374-63625]:IfStatement[63560-63811]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63389-63625]:Block[63575-63811]"
    }, {
      "left" : "if (i == '\\'')",
      "right" : "if (i == '\\'')",
      "info" : "IfStatement[63411-63480]:IfStatement[63597-63666]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63426-63480]:Block[63612-63666]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[63452-63458]:BreakStatement[63638-63644]"
    }, {
      "left" : "if (i < INT_SPACE)",
      "right" : "if (i < INT_SPACE)",
      "info" : "IfStatement[63501-63607]:IfStatement[63687-63793]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63520-63607]:Block[63706-63793]"
    }, {
      "left" : "_throwUnquotedSpace(i, \"string value\");",
      "right" : "_throwUnquotedSpace(i, \"string value\");",
      "info" : "ExpressionStatement[63546-63585]:ExpressionStatement[63732-63771]"
    }, {
      "left" : "if (outPtr >= outBuf.length)",
      "right" : "if (outPtr >= outBuf.length)",
      "info" : "IfStatement[63683-63816]:IfStatement[63869-64002]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63712-63816]:Block[63898-64002]"
    }, {
      "left" : "outBuf = _textBuffer.finishCurrentSegment();",
      "right" : "outBuf = _textBuffer.finishCurrentSegment();",
      "info" : "ExpressionStatement[63730-63774]:ExpressionStatement[63916-63960]"
    }, {
      "left" : "outPtr = 0;",
      "right" : "outPtr = 0;",
      "info" : "ExpressionStatement[63791-63802]:ExpressionStatement[63977-63988]"
    }, {
      "left" : "outBuf[outPtr++] = c;",
      "right" : "outBuf[outPtr++] = c;",
      "info" : "ExpressionStatement[63874-63895]:ExpressionStatement[64060-64081]"
    }, {
      "left" : "_textBuffer.setCurrentLength(outPtr);",
      "right" : "_textBuffer.setCurrentLength(outPtr);",
      "info" : "ExpressionStatement[63914-63951]:ExpressionStatement[64100-64137]"
    }, {
      "left" : "return JsonToken.VALUE_STRING;",
      "right" : "return JsonToken.VALUE_STRING;",
      "info" : "ReturnStatement[63960-63990]:ReturnStatement[64146-64176]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[64002-64009]:Modifier[64188-64195]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[64010-64016]:SimpleType[64196-64202]"
    }, {
      "left" : "_handleOddName2",
      "right" : "_handleOddName2",
      "info" : "SimpleName[64017-64032]:SimpleName[64203-64218]"
    }, {
      "left" : "int startPtr",
      "right" : "int startPtr",
      "info" : "SingleVariableDeclaration[64033-64045]:SingleVariableDeclaration[64219-64231]"
    }, {
      "left" : "int hash",
      "right" : "int hash",
      "info" : "SingleVariableDeclaration[64047-64055]:SingleVariableDeclaration[64233-64241]"
    }, {
      "left" : "int[] codes",
      "right" : "int[] codes",
      "info" : "SingleVariableDeclaration[64057-64068]:SingleVariableDeclaration[64243-64254]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[64077-64088]:SimpleType[64263-64274]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64093-65487]:Block[64279-65673]"
    }, {
      "left" : "_textBuffer.resetWithShared(_inputBuffer, startPtr, (_inputPtr - startPtr));",
      "right" : "_textBuffer.resetWithShared(_inputBuffer, startPtr, (_inputPtr - startPtr));",
      "info" : "ExpressionStatement[64103-64179]:ExpressionStatement[64289-64365]"
    }, {
      "left" : "char[] outBuf = _textBuffer.getCurrentSegment();",
      "right" : "char[] outBuf = _textBuffer.getCurrentSegment();",
      "info" : "VariableDeclarationStatement[64188-64236]:VariableDeclarationStatement[64374-64422]"
    }, {
      "left" : "int outPtr = _textBuffer.getCurrentSegmentSize();",
      "right" : "int outPtr = _textBuffer.getCurrentSegmentSize();",
      "info" : "VariableDeclarationStatement[64245-64294]:VariableDeclarationStatement[64431-64480]"
    }, {
      "left" : "final int maxCode = codes.length;",
      "right" : "final int maxCode = codes.length;",
      "info" : "VariableDeclarationStatement[64303-64336]:VariableDeclarationStatement[64489-64522]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[64346-65188]:WhileStatement[64532-65374]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64359-65188]:Block[64545-65374]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[64373-64541]:IfStatement[64559-64727]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64401-64541]:Block[64587-64727]"
    }, {
      "left" : "if (!loadMore())",
      "right" : "if (!loadMore())",
      "info" : "IfStatement[64419-64527]:IfStatement[64605-64713]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64436-64527]:Block[64622-64713]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[64503-64509]:BreakStatement[64689-64695]"
    }, {
      "left" : "char c = _inputBuffer[_inputPtr];",
      "right" : "char c = _inputBuffer[_inputPtr];",
      "info" : "VariableDeclarationStatement[64554-64587]:VariableDeclarationStatement[64740-64773]"
    }, {
      "left" : "int i = (int) c;",
      "right" : "int i = (int) c;",
      "info" : "VariableDeclarationStatement[64600-64616]:VariableDeclarationStatement[64786-64802]"
    }, {
      "left" : "if (i <= maxCode)",
      "right" : "if (i <= maxCode)",
      "info" : "IfStatement[64629-64828]:IfStatement[64815-65014]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64647-64744]:Block[64833-64930]"
    }, {
      "left" : "if (codes[i] != 0)",
      "right" : "if (codes[i] != 0)",
      "info" : "IfStatement[64665-64730]:IfStatement[64851-64916]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64684-64730]:Block[64870-64916]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[64706-64712]:BreakStatement[64892-64898]"
    }, {
      "left" : "if (!Character.isJavaIdentifierPart(c))",
      "right" : "if (!Character.isJavaIdentifierPart(c))",
      "info" : "IfStatement[64750-64828]:IfStatement[64936-65014]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64790-64828]:Block[64976-65014]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[64808-64814]:BreakStatement[64994-65000]"
    }, {
      "left" : "++_inputPtr;",
      "right" : "++_inputPtr;",
      "info" : "ExpressionStatement[64841-64853]:ExpressionStatement[65027-65039]"
    }, {
      "left" : "hash = (hash * CharsToNameCanonicalizer.HASH_MULT) + i;",
      "right" : "hash = (hash * CharsToNameCanonicalizer.HASH_MULT) + i;",
      "info" : "ExpressionStatement[64866-64921]:ExpressionStatement[65052-65107]"
    }, {
      "left" : "outBuf[outPtr++] = c;",
      "right" : "outBuf[outPtr++] = c;",
      "info" : "ExpressionStatement[64979-65000]:ExpressionStatement[65165-65186]"
    }, {
      "left" : "if (outPtr >= outBuf.length)",
      "right" : "if (outPtr >= outBuf.length)",
      "info" : "IfStatement[65045-65178]:IfStatement[65231-65364]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65074-65178]:Block[65260-65364]"
    }, {
      "left" : "outBuf = _textBuffer.finishCurrentSegment();",
      "right" : "outBuf = _textBuffer.finishCurrentSegment();",
      "info" : "ExpressionStatement[65092-65136]:ExpressionStatement[65278-65322]"
    }, {
      "left" : "outPtr = 0;",
      "right" : "outPtr = 0;",
      "info" : "ExpressionStatement[65153-65164]:ExpressionStatement[65339-65350]"
    }, {
      "left" : "_textBuffer.setCurrentLength(outPtr);",
      "right" : "_textBuffer.setCurrentLength(outPtr);",
      "info" : "ExpressionStatement[65197-65234]:ExpressionStatement[65383-65420]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65243-65481]:Block[65429-65667]"
    }, {
      "left" : "TextBuffer tb = _textBuffer;",
      "right" : "TextBuffer tb = _textBuffer;",
      "info" : "VariableDeclarationStatement[65257-65285]:VariableDeclarationStatement[65443-65471]"
    }, {
      "left" : "char[] buf = tb.getTextBuffer();",
      "right" : "char[] buf = tb.getTextBuffer();",
      "info" : "VariableDeclarationStatement[65298-65330]:VariableDeclarationStatement[65484-65516]"
    }, {
      "left" : "int start = tb.getTextOffset();",
      "right" : "int start = tb.getTextOffset();",
      "info" : "VariableDeclarationStatement[65343-65374]:VariableDeclarationStatement[65529-65560]"
    }, {
      "left" : "int len = tb.size();",
      "right" : "int len = tb.size();",
      "info" : "VariableDeclarationStatement[65387-65407]:VariableDeclarationStatement[65573-65593]"
    }, {
      "left" : "return _symbols.findSymbol(buf, start, len, hash);",
      "right" : "return _symbols.findSymbol(buf, start, len, hash);",
      "info" : "ReturnStatement[65421-65471]:ReturnStatement[65607-65657]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[65493-65502]:MarkerAnnotation[65679-65688]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[65507-65516]:Modifier[65693-65702]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[65517-65522]:Modifier[65703-65708]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[65523-65527]:PrimitiveType[65709-65713]"
    }, {
      "left" : "_finishString",
      "right" : "_finishString",
      "info" : "SimpleName[65528-65541]:SimpleName[65714-65727]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[65551-65562]:SimpleType[65737-65748]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65567-66682]:Block[65753-66868]"
    }, {
      "left" : "int ptr = _inputPtr;",
      "right" : "int ptr = _inputPtr;",
      "info" : "VariableDeclarationStatement[65764-65784]:VariableDeclarationStatement[65950-65970]"
    }, {
      "left" : "final int inputLen = _inputEnd;",
      "right" : "final int inputLen = _inputEnd;",
      "info" : "VariableDeclarationStatement[65793-65824]:VariableDeclarationStatement[65979-66010]"
    }, {
      "left" : "if (ptr < inputLen)",
      "right" : "if (ptr < inputLen)",
      "info" : "IfStatement[65834-66451]:IfStatement[66020-66637]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65854-66451]:Block[66040-66637]"
    }, {
      "left" : "final int[] codes = _icLatin1;",
      "right" : "final int[] codes = _icLatin1;",
      "info" : "VariableDeclarationStatement[65868-65898]:VariableDeclarationStatement[66054-66084]"
    }, {
      "left" : "final int maxCode = codes.length;",
      "right" : "final int maxCode = codes.length;",
      "info" : "VariableDeclarationStatement[65911-65944]:VariableDeclarationStatement[66097-66130]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[65958-66441]:DoStatement[66144-66627]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65961-66417]:Block[66147-66603]"
    }, {
      "left" : "int ch = _inputBuffer[ptr];",
      "right" : "int ch = _inputBuffer[ptr];",
      "info" : "VariableDeclarationStatement[65979-66006]:VariableDeclarationStatement[66165-66192]"
    }, {
      "left" : "if (ch < maxCode && codes[ch] != 0)",
      "right" : "if (ch < maxCode && codes[ch] != 0)",
      "info" : "IfStatement[66023-66380]:IfStatement[66209-66566]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66059-66380]:Block[66245-66566]"
    }, {
      "left" : "if (ch == '\"')",
      "right" : "if (ch == '\"')",
      "info" : "IfStatement[66081-66335]:IfStatement[66267-66521]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66096-66335]:Block[66282-66521]"
    }, {
      "left" : "_textBuffer.resetWithShared(_inputBuffer, _inputPtr, (ptr-_inputPtr));",
      "right" : "_textBuffer.resetWithShared(_inputBuffer, _inputPtr, (ptr-_inputPtr));",
      "info" : "ExpressionStatement[66122-66192]:ExpressionStatement[66308-66378]"
    }, {
      "left" : "_inputPtr = ptr+1;",
      "right" : "_inputPtr = ptr+1;",
      "info" : "ExpressionStatement[66217-66235]:ExpressionStatement[66403-66421]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[66306-66313]:ReturnStatement[66492-66499]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[66356-66362]:BreakStatement[66542-66548]"
    }, {
      "left" : "++ptr;",
      "right" : "++ptr;",
      "info" : "ExpressionStatement[66397-66403]:ExpressionStatement[66583-66589]"
    }, {
      "left" : "_textBuffer.resetWithCopy(_inputBuffer, _inputPtr, (ptr-_inputPtr));",
      "right" : "_textBuffer.resetWithCopy(_inputBuffer, _inputPtr, (ptr-_inputPtr));",
      "info" : "ExpressionStatement[66557-66625]:ExpressionStatement[66743-66811]"
    }, {
      "left" : "_inputPtr = ptr;",
      "right" : "_inputPtr = ptr;",
      "info" : "ExpressionStatement[66634-66650]:ExpressionStatement[66820-66836]"
    }, {
      "left" : "_finishString2();",
      "right" : "_finishString2();",
      "info" : "ExpressionStatement[66659-66676]:ExpressionStatement[66845-66862]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[66688-66697]:Modifier[66874-66883]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[66698-66702]:PrimitiveType[66884-66888]"
    }, {
      "left" : "_finishString2",
      "right" : "_finishString2",
      "info" : "SimpleName[66703-66717]:SimpleName[66889-66903]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[66727-66738]:SimpleType[66913-66924]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66743-68148]:Block[66929-68334]"
    }, {
      "left" : "char[] outBuf = _textBuffer.getCurrentSegment();",
      "right" : "char[] outBuf = _textBuffer.getCurrentSegment();",
      "info" : "VariableDeclarationStatement[66753-66801]:VariableDeclarationStatement[66939-66987]"
    }, {
      "left" : "int outPtr = _textBuffer.getCurrentSegmentSize();",
      "right" : "int outPtr = _textBuffer.getCurrentSegmentSize();",
      "info" : "VariableDeclarationStatement[66810-66859]:VariableDeclarationStatement[66996-67045]"
    }, {
      "left" : "final int[] codes = _icLatin1;",
      "right" : "final int[] codes = _icLatin1;",
      "info" : "VariableDeclarationStatement[66868-66898]:VariableDeclarationStatement[67054-67084]"
    }, {
      "left" : "final int maxCode = codes.length;",
      "right" : "final int maxCode = codes.length;",
      "info" : "VariableDeclarationStatement[66907-66940]:VariableDeclarationStatement[67093-67126]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[66950-68096]:WhileStatement[67136-68282]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66963-68096]:Block[67149-68282]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[66977-67164]:IfStatement[67163-67350]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67005-67164]:Block[67191-67350]"
    }, {
      "left" : "if (!loadMore())",
      "right" : "if (!loadMore())",
      "info" : "IfStatement[67023-67150]:IfStatement[67209-67336]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67040-67150]:Block[67226-67336]"
    }, {
      "left" : "_reportInvalidEOF(\": was expecting closing quote for a string value\");",
      "right" : "_reportInvalidEOF(\": was expecting closing quote for a string value\");",
      "info" : "ExpressionStatement[67062-67132]:ExpressionStatement[67248-67318]"
    }, {
      "left" : "char c = _inputBuffer[_inputPtr++];",
      "right" : "char c = _inputBuffer[_inputPtr++];",
      "info" : "VariableDeclarationStatement[67177-67212]:VariableDeclarationStatement[67363-67398]"
    }, {
      "left" : "int i = (int) c;",
      "right" : "int i = (int) c;",
      "info" : "VariableDeclarationStatement[67225-67241]:VariableDeclarationStatement[67411-67427]"
    }, {
      "left" : "if (i < maxCode && codes[i] != 0)",
      "right" : "if (i < maxCode && codes[i] != 0)",
      "info" : "IfStatement[67254-67830]:IfStatement[67440-68016]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67288-67830]:Block[67474-68016]"
    }, {
      "left" : "if (i == INT_QUOTE)",
      "right" : "if (i == INT_QUOTE)",
      "info" : "IfStatement[67306-67798]:IfStatement[67492-67984]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67326-67372]:Block[67512-67558]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[67348-67354]:BreakStatement[67534-67540]"
    }, {
      "left" : "if (i == INT_BACKSLASH)",
      "right" : "if (i == INT_BACKSLASH)",
      "info" : "IfStatement[67378-67798]:IfStatement[67564-67984]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67402-67694]:Block[67588-67880]"
    }, {
      "left" : "c = _decodeEscaped();",
      "right" : "c = _decodeEscaped();",
      "info" : "ExpressionStatement[67655-67676]:ExpressionStatement[67841-67862]"
    }, {
      "left" : "if (i < INT_SPACE)",
      "right" : "if (i < INT_SPACE)",
      "info" : "IfStatement[67700-67798]:IfStatement[67886-67984]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67719-67798]:Block[67905-67984]"
    }, {
      "left" : "_throwUnquotedSpace(i, \"string value\");",
      "right" : "_throwUnquotedSpace(i, \"string value\");",
      "info" : "ExpressionStatement[67741-67780]:ExpressionStatement[67927-67966]"
    }, {
      "left" : "if (outPtr >= outBuf.length)",
      "right" : "if (outPtr >= outBuf.length)",
      "info" : "IfStatement[67874-68007]:IfStatement[68060-68193]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67903-68007]:Block[68089-68193]"
    }, {
      "left" : "outBuf = _textBuffer.finishCurrentSegment();",
      "right" : "outBuf = _textBuffer.finishCurrentSegment();",
      "info" : "ExpressionStatement[67921-67965]:ExpressionStatement[68107-68151]"
    }, {
      "left" : "outPtr = 0;",
      "right" : "outPtr = 0;",
      "info" : "ExpressionStatement[67982-67993]:ExpressionStatement[68168-68179]"
    }, {
      "left" : "outBuf[outPtr++] = c;",
      "right" : "outBuf[outPtr++] = c;",
      "info" : "ExpressionStatement[68065-68086]:ExpressionStatement[68251-68272]"
    }, {
      "left" : "_textBuffer.setCurrentLength(outPtr);",
      "right" : "_textBuffer.setCurrentLength(outPtr);",
      "info" : "ExpressionStatement[68105-68142]:ExpressionStatement[68291-68328]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[68351-68360]:Modifier[68537-68546]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[68361-68366]:Modifier[68547-68552]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[68367-68371]:PrimitiveType[68553-68557]"
    }, {
      "left" : "_skipString",
      "right" : "_skipString",
      "info" : "SimpleName[68372-68383]:SimpleName[68558-68569]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[68393-68404]:SimpleType[68579-68590]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68409-69802]:Block[68595-69988]"
    }, {
      "left" : "_tokenIncomplete = false;",
      "right" : "_tokenIncomplete = false;",
      "info" : "ExpressionStatement[68419-68444]:ExpressionStatement[68605-68630]"
    }, {
      "left" : "int inPtr = _inputPtr;",
      "right" : "int inPtr = _inputPtr;",
      "info" : "VariableDeclarationStatement[68454-68476]:VariableDeclarationStatement[68640-68662]"
    }, {
      "left" : "int inLen = _inputEnd;",
      "right" : "int inLen = _inputEnd;",
      "info" : "VariableDeclarationStatement[68485-68507]:VariableDeclarationStatement[68671-68693]"
    }, {
      "left" : "char[] inBuf = _inputBuffer;",
      "right" : "char[] inBuf = _inputBuffer;",
      "info" : "VariableDeclarationStatement[68516-68544]:VariableDeclarationStatement[68702-68730]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[68554-69796]:WhileStatement[68740-69982]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68567-69796]:Block[68753-69982]"
    }, {
      "left" : "if (inPtr >= inLen)",
      "right" : "if (inPtr >= inLen)",
      "info" : "IfStatement[68581-68865]:IfStatement[68767-69051]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68601-68865]:Block[68787-69051]"
    }, {
      "left" : "_inputPtr = inPtr;",
      "right" : "_inputPtr = inPtr;",
      "info" : "ExpressionStatement[68619-68637]:ExpressionStatement[68805-68823]"
    }, {
      "left" : "if (!loadMore())",
      "right" : "if (!loadMore())",
      "info" : "IfStatement[68654-68781]:IfStatement[68840-68967]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68671-68781]:Block[68857-68967]"
    }, {
      "left" : "_reportInvalidEOF(\": was expecting closing quote for a string value\");",
      "right" : "_reportInvalidEOF(\": was expecting closing quote for a string value\");",
      "info" : "ExpressionStatement[68693-68763]:ExpressionStatement[68879-68949]"
    }, {
      "left" : "inPtr = _inputPtr;",
      "right" : "inPtr = _inputPtr;",
      "info" : "ExpressionStatement[68798-68816]:ExpressionStatement[68984-69002]"
    }, {
      "left" : "inLen = _inputEnd;",
      "right" : "inLen = _inputEnd;",
      "info" : "ExpressionStatement[68833-68851]:ExpressionStatement[69019-69037]"
    }, {
      "left" : "char c = inBuf[inPtr++];",
      "right" : "char c = inBuf[inPtr++];",
      "info" : "VariableDeclarationStatement[68878-68902]:VariableDeclarationStatement[69064-69088]"
    }, {
      "left" : "int i = (int) c;",
      "right" : "int i = (int) c;",
      "info" : "VariableDeclarationStatement[68915-68931]:VariableDeclarationStatement[69101-69117]"
    }, {
      "left" : "if (i <= INT_BACKSLASH)",
      "right" : "if (i <= INT_BACKSLASH)",
      "info" : "IfStatement[68944-69786]:IfStatement[69130-69972]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68968-69786]:Block[69154-69972]"
    }, {
      "left" : "if (i == INT_BACKSLASH)",
      "right" : "if (i == INT_BACKSLASH)",
      "info" : "IfStatement[68986-69772]:IfStatement[69172-69958]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69010-69419]:Block[69196-69605]"
    }, {
      "left" : "_inputPtr = inPtr;",
      "right" : "_inputPtr = inPtr;",
      "info" : "ExpressionStatement[69263-69281]:ExpressionStatement[69449-69467]"
    }, {
      "left" : "c = _decodeEscaped();",
      "right" : "c = _decodeEscaped();",
      "info" : "ExpressionStatement[69302-69323]:ExpressionStatement[69488-69509]"
    }, {
      "left" : "inPtr = _inputPtr;",
      "right" : "inPtr = _inputPtr;",
      "info" : "ExpressionStatement[69344-69362]:ExpressionStatement[69530-69548]"
    }, {
      "left" : "inLen = _inputEnd;",
      "right" : "inLen = _inputEnd;",
      "info" : "ExpressionStatement[69383-69401]:ExpressionStatement[69569-69587]"
    }, {
      "left" : "if (i <= INT_QUOTE)",
      "right" : "if (i <= INT_QUOTE)",
      "info" : "IfStatement[69425-69772]:IfStatement[69611-69958]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69445-69772]:Block[69631-69958]"
    }, {
      "left" : "if (i == INT_QUOTE)",
      "right" : "if (i == INT_QUOTE)",
      "info" : "IfStatement[69467-69584]:IfStatement[69653-69770]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69487-69584]:Block[69673-69770]"
    }, {
      "left" : "_inputPtr = inPtr;",
      "right" : "_inputPtr = inPtr;",
      "info" : "ExpressionStatement[69513-69531]:ExpressionStatement[69699-69717]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[69556-69562]:BreakStatement[69742-69748]"
    }, {
      "left" : "if (i < INT_SPACE)",
      "right" : "if (i < INT_SPACE)",
      "info" : "IfStatement[69605-69754]:IfStatement[69791-69940]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69624-69754]:Block[69810-69940]"
    }, {
      "left" : "_inputPtr = inPtr;",
      "right" : "_inputPtr = inPtr;",
      "info" : "ExpressionStatement[69650-69668]:ExpressionStatement[69836-69854]"
    }, {
      "left" : "_throwUnquotedSpace(i, \"string value\");",
      "right" : "_throwUnquotedSpace(i, \"string value\");",
      "info" : "ExpressionStatement[69693-69732]:ExpressionStatement[69879-69918]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[70109-70118]:Modifier[70295-70304]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[70119-70124]:Modifier[70305-70310]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[70125-70129]:PrimitiveType[70311-70315]"
    }, {
      "left" : "_skipCR",
      "right" : "_skipCR",
      "info" : "SimpleName[70130-70137]:SimpleName[70316-70323]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[70147-70158]:SimpleType[70333-70344]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70159-70386]:Block[70345-70572]"
    }, {
      "left" : "if (_inputPtr < _inputEnd || loadMore())",
      "right" : "if (_inputPtr < _inputEnd || loadMore())",
      "info" : "IfStatement[70169-70315]:IfStatement[70355-70501]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70210-70315]:Block[70396-70501]"
    }, {
      "left" : "if (_inputBuffer[_inputPtr] == '\\n')",
      "right" : "if (_inputBuffer[_inputPtr] == '\\n')",
      "info" : "IfStatement[70224-70305]:IfStatement[70410-70491]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70261-70305]:Block[70447-70491]"
    }, {
      "left" : "++_inputPtr;",
      "right" : "++_inputPtr;",
      "info" : "ExpressionStatement[70279-70291]:ExpressionStatement[70465-70477]"
    }, {
      "left" : "++_currInputRow;",
      "right" : "++_currInputRow;",
      "info" : "ExpressionStatement[70324-70340]:ExpressionStatement[70510-70526]"
    }, {
      "left" : "_currInputRowStart = _inputPtr;",
      "right" : "_currInputRowStart = _inputPtr;",
      "info" : "ExpressionStatement[70349-70380]:ExpressionStatement[70535-70566]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[70392-70399]:Modifier[70578-70585]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[70400-70405]:Modifier[70586-70591]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[70406-70409]:PrimitiveType[70592-70595]"
    }, {
      "left" : "_skipColon",
      "right" : "_skipColon",
      "info" : "SimpleName[70410-70420]:SimpleName[70596-70606]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[70430-70441]:SimpleType[70616-70627]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70446-72199]:Block[70632-72385]"
    }, {
      "left" : "if ((_inputPtr + 4) >= _inputEnd)",
      "right" : "if ((_inputPtr + 4) >= _inputEnd)",
      "info" : "IfStatement[70456-70540]:IfStatement[70642-70726]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70490-70540]:Block[70676-70726]"
    }, {
      "left" : "return _skipColon2(false);",
      "right" : "return _skipColon2(false);",
      "info" : "ReturnStatement[70504-70530]:ReturnStatement[70690-70716]"
    }, {
      "left" : "char c = _inputBuffer[_inputPtr];",
      "right" : "char c = _inputBuffer[_inputPtr];",
      "info" : "VariableDeclarationStatement[70549-70582]:VariableDeclarationStatement[70735-70768]"
    }, {
      "left" : "if (c == ':')",
      "right" : "if (c == ':')",
      "info" : "IfStatement[70591-71362]:IfStatement[70777-71548]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70605-71362]:Block[70791-71548]"
    }, {
      "left" : "int i = _inputBuffer[++_inputPtr];",
      "right" : "int i = _inputBuffer[++_inputPtr];",
      "info" : "VariableDeclarationStatement[70652-70686]:VariableDeclarationStatement[70838-70872]"
    }, {
      "left" : "if (i > INT_SPACE)",
      "right" : "if (i > INT_SPACE)",
      "info" : "IfStatement[70699-70923]:IfStatement[70885-71109]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70718-70923]:Block[70904-71109]"
    }, {
      "left" : "if (i == INT_SLASH || i == INT_HASH)",
      "right" : "if (i == INT_SLASH || i == INT_HASH)",
      "info" : "IfStatement[70752-70854]:IfStatement[70938-71040]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70789-70854]:Block[70975-71040]"
    }, {
      "left" : "return _skipColon2(true);",
      "right" : "return _skipColon2(true);",
      "info" : "ReturnStatement[70811-70836]:ReturnStatement[70997-71022]"
    }, {
      "left" : "++_inputPtr;",
      "right" : "++_inputPtr;",
      "info" : "ExpressionStatement[70871-70883]:ExpressionStatement[71057-71069]"
    }, {
      "left" : "return i;",
      "right" : "return i;",
      "info" : "ReturnStatement[70900-70909]:ReturnStatement[71086-71095]"
    }, {
      "left" : "if (i == INT_SPACE || i == INT_TAB)",
      "right" : "if (i == INT_SPACE || i == INT_TAB)",
      "info" : "IfStatement[70936-71289]:IfStatement[71122-71475]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70972-71289]:Block[71158-71475]"
    }, {
      "left" : "i = (int) _inputBuffer[++_inputPtr];",
      "right" : "i = (int) _inputBuffer[++_inputPtr];",
      "info" : "ExpressionStatement[70990-71026]:ExpressionStatement[71176-71212]"
    }, {
      "left" : "if (i > INT_SPACE)",
      "right" : "if (i > INT_SPACE)",
      "info" : "IfStatement[71043-71275]:IfStatement[71229-71461]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71062-71275]:Block[71248-71461]"
    }, {
      "left" : "if (i == INT_SLASH || i == INT_HASH)",
      "right" : "if (i == INT_SLASH || i == INT_HASH)",
      "info" : "IfStatement[71084-71194]:IfStatement[71270-71380]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71121-71194]:Block[71307-71380]"
    }, {
      "left" : "return _skipColon2(true);",
      "right" : "return _skipColon2(true);",
      "info" : "ReturnStatement[71147-71172]:ReturnStatement[71333-71358]"
    }, {
      "left" : "++_inputPtr;",
      "right" : "++_inputPtr;",
      "info" : "ExpressionStatement[71215-71227]:ExpressionStatement[71401-71413]"
    }, {
      "left" : "return i;",
      "right" : "return i;",
      "info" : "ReturnStatement[71248-71257]:ReturnStatement[71434-71443]"
    }, {
      "left" : "return _skipColon2(true);",
      "right" : "return _skipColon2(true);",
      "info" : "ReturnStatement[71302-71327]:ReturnStatement[71488-71513]"
    }, {
      "left" : "if (c == ' ' || c == '\\t')",
      "right" : "if (c == ' ' || c == '\\t')",
      "info" : "IfStatement[71371-71452]:IfStatement[71557-71638]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71398-71452]:Block[71584-71638]"
    }, {
      "left" : "c = _inputBuffer[++_inputPtr];",
      "right" : "c = _inputBuffer[++_inputPtr];",
      "info" : "ExpressionStatement[71412-71442]:ExpressionStatement[71598-71628]"
    }, {
      "left" : "if (c == ':')",
      "right" : "if (c == ':')",
      "info" : "IfStatement[71461-72158]:IfStatement[71647-72344]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71475-72158]:Block[71661-72344]"
    }, {
      "left" : "int i = _inputBuffer[++_inputPtr];",
      "right" : "int i = _inputBuffer[++_inputPtr];",
      "info" : "VariableDeclarationStatement[71489-71523]:VariableDeclarationStatement[71675-71709]"
    }, {
      "left" : "if (i > INT_SPACE)",
      "right" : "if (i > INT_SPACE)",
      "info" : "IfStatement[71536-71744]:IfStatement[71722-71930]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71555-71744]:Block[71741-71930]"
    }, {
      "left" : "if (i == INT_SLASH || i == INT_HASH)",
      "right" : "if (i == INT_SLASH || i == INT_HASH)",
      "info" : "IfStatement[71573-71675]:IfStatement[71759-71861]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71610-71675]:Block[71796-71861]"
    }, {
      "left" : "return _skipColon2(true);",
      "right" : "return _skipColon2(true);",
      "info" : "ReturnStatement[71632-71657]:ReturnStatement[71818-71843]"
    }, {
      "left" : "++_inputPtr;",
      "right" : "++_inputPtr;",
      "info" : "ExpressionStatement[71692-71704]:ExpressionStatement[71878-71890]"
    }, {
      "left" : "return i;",
      "right" : "return i;",
      "info" : "ReturnStatement[71721-71730]:ReturnStatement[71907-71916]"
    }, {
      "left" : "if (i == INT_SPACE || i == INT_TAB)",
      "right" : "if (i == INT_SPACE || i == INT_TAB)",
      "info" : "IfStatement[71757-72110]:IfStatement[71943-72296]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71793-72110]:Block[71979-72296]"
    }, {
      "left" : "i = (int) _inputBuffer[++_inputPtr];",
      "right" : "i = (int) _inputBuffer[++_inputPtr];",
      "info" : "ExpressionStatement[71811-71847]:ExpressionStatement[71997-72033]"
    }, {
      "left" : "if (i > INT_SPACE)",
      "right" : "if (i > INT_SPACE)",
      "info" : "IfStatement[71864-72096]:IfStatement[72050-72282]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71883-72096]:Block[72069-72282]"
    }, {
      "left" : "if (i == INT_SLASH || i == INT_HASH)",
      "right" : "if (i == INT_SLASH || i == INT_HASH)",
      "info" : "IfStatement[71905-72015]:IfStatement[72091-72201]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71942-72015]:Block[72128-72201]"
    }, {
      "left" : "return _skipColon2(true);",
      "right" : "return _skipColon2(true);",
      "info" : "ReturnStatement[71968-71993]:ReturnStatement[72154-72179]"
    }, {
      "left" : "++_inputPtr;",
      "right" : "++_inputPtr;",
      "info" : "ExpressionStatement[72036-72048]:ExpressionStatement[72222-72234]"
    }, {
      "left" : "return i;",
      "right" : "return i;",
      "info" : "ReturnStatement[72069-72078]:ReturnStatement[72255-72264]"
    }, {
      "left" : "return _skipColon2(true);",
      "right" : "return _skipColon2(true);",
      "info" : "ReturnStatement[72123-72148]:ReturnStatement[72309-72334]"
    }, {
      "left" : "return _skipColon2(false);",
      "right" : "return _skipColon2(false);",
      "info" : "ReturnStatement[72167-72193]:ReturnStatement[72353-72379]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[72205-72212]:Modifier[72391-72398]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[72213-72218]:Modifier[72399-72404]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[72219-72222]:PrimitiveType[72405-72408]"
    }, {
      "left" : "_skipColon2",
      "right" : "_skipColon2",
      "info" : "SimpleName[72223-72234]:SimpleName[72409-72420]"
    }, {
      "left" : "boolean gotColon",
      "right" : "boolean gotColon",
      "info" : "SingleVariableDeclaration[72235-72251]:SingleVariableDeclaration[72421-72437]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[72260-72271]:SimpleType[72446-72457]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72276-73546]:Block[72462-73732]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[72286-73540]:WhileStatement[72472-73726]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72299-73540]:Block[72485-73726]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[72313-72394]:IfStatement[72499-72580]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72341-72394]:Block[72527-72580]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[72359-72380]:ExpressionStatement[72545-72566]"
    }, {
      "left" : "int i = (int) _inputBuffer[_inputPtr++];",
      "right" : "int i = (int) _inputBuffer[_inputPtr++];",
      "info" : "VariableDeclarationStatement[72407-72447]:VariableDeclarationStatement[72593-72633]"
    }, {
      "left" : "if (i > INT_SPACE)",
      "right" : "if (i > INT_SPACE)",
      "info" : "IfStatement[72460-73182]:IfStatement[72646-73368]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72479-73182]:Block[72665-73368]"
    }, {
      "left" : "if (i == INT_SLASH)",
      "right" : "if (i == INT_SLASH)",
      "info" : "IfStatement[72497-72602]:IfStatement[72683-72788]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72517-72602]:Block[72703-72788]"
    }, {
      "left" : "_skipComment();",
      "right" : "_skipComment();",
      "info" : "ExpressionStatement[72539-72554]:ExpressionStatement[72725-72740]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[72575-72584]:ContinueStatement[72761-72770]"
    }, {
      "left" : "if (i == INT_HASH)",
      "right" : "if (i == INT_HASH)",
      "info" : "IfStatement[72619-72759]:IfStatement[72805-72945]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72638-72759]:Block[72824-72945]"
    }, {
      "left" : "if (_skipYAMLComment())",
      "right" : "if (_skipYAMLComment())",
      "info" : "IfStatement[72660-72741]:IfStatement[72846-72927]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72684-72741]:Block[72870-72927]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[72710-72719]:ContinueStatement[72896-72905]"
    }, {
      "left" : "if (gotColon)",
      "right" : "if (gotColon)",
      "info" : "IfStatement[72776-72839]:IfStatement[72962-73025]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72790-72839]:Block[72976-73025]"
    }, {
      "left" : "return i;",
      "right" : "return i;",
      "info" : "ReturnStatement[72812-72821]:ReturnStatement[72998-73007]"
    }, {
      "left" : "if (i != INT_COLON)",
      "right" : "if (i != INT_COLON)",
      "info" : "IfStatement[72856-73109]:IfStatement[73042-73295]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72876-73109]:Block[73062-73295]"
    }, {
      "left" : "if (i < INT_SPACE)",
      "right" : "if (i < INT_SPACE)",
      "info" : "IfStatement[72898-72987]:IfStatement[73084-73173]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72917-72987]:Block[73103-73173]"
    }, {
      "left" : "_throwInvalidSpace(i);",
      "right" : "_throwInvalidSpace(i);",
      "info" : "ExpressionStatement[72943-72965]:ExpressionStatement[73129-73151]"
    }, {
      "left" : "_reportUnexpectedChar(i, \"was expecting a colon to separate field name and value\");",
      "right" : "_reportUnexpectedChar(i, \"was expecting a colon to separate field name and value\");",
      "info" : "ExpressionStatement[73008-73091]:ExpressionStatement[73194-73277]"
    }, {
      "left" : "gotColon = true;",
      "right" : "gotColon = true;",
      "info" : "ExpressionStatement[73126-73142]:ExpressionStatement[73312-73328]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[73159-73168]:ContinueStatement[73345-73354]"
    }, {
      "left" : "if (i < INT_SPACE)",
      "right" : "if (i < INT_SPACE)",
      "info" : "IfStatement[73195-73530]:IfStatement[73381-73716]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73214-73530]:Block[73400-73716]"
    }, {
      "left" : "if (i == INT_LF)",
      "right" : "if (i == INT_LF)",
      "info" : "IfStatement[73232-73516]:IfStatement[73418-73702]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73249-73357]:Block[73435-73543]"
    }, {
      "left" : "++_currInputRow;",
      "right" : "++_currInputRow;",
      "info" : "ExpressionStatement[73271-73287]:ExpressionStatement[73457-73473]"
    }, {
      "left" : "_currInputRowStart = _inputPtr;",
      "right" : "_currInputRowStart = _inputPtr;",
      "info" : "ExpressionStatement[73308-73339]:ExpressionStatement[73494-73525]"
    }, {
      "left" : "if (i == INT_CR)",
      "right" : "if (i == INT_CR)",
      "info" : "IfStatement[73363-73516]:IfStatement[73549-73702]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73380-73430]:Block[73566-73616]"
    }, {
      "left" : "_skipCR();",
      "right" : "_skipCR();",
      "info" : "ExpressionStatement[73402-73412]:ExpressionStatement[73588-73598]"
    }, {
      "left" : "if (i != INT_TAB)",
      "right" : "if (i != INT_TAB)",
      "info" : "IfStatement[73436-73516]:IfStatement[73622-73702]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73454-73516]:Block[73640-73702]"
    }, {
      "left" : "_throwInvalidSpace(i);",
      "right" : "_throwInvalidSpace(i);",
      "info" : "ExpressionStatement[73476-73498]:ExpressionStatement[73662-73684]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[73627-73634]:Modifier[73813-73820]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[73635-73640]:Modifier[73821-73826]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[73641-73644]:PrimitiveType[73827-73830]"
    }, {
      "left" : "_skipColonFast",
      "right" : "_skipColonFast",
      "info" : "SimpleName[73645-73659]:SimpleName[73831-73845]"
    }, {
      "left" : "int ptr",
      "right" : "int ptr",
      "info" : "SingleVariableDeclaration[73660-73667]:SingleVariableDeclaration[73846-73853]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[73676-73687]:SimpleType[73862-73873]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73692-75240]:Block[73878-75426]"
    }, {
      "left" : "int i = (int) _inputBuffer[ptr++];",
      "right" : "int i = (int) _inputBuffer[ptr++];",
      "info" : "VariableDeclarationStatement[73702-73736]:VariableDeclarationStatement[73888-73922]"
    }, {
      "left" : "if (i == INT_COLON)",
      "right" : "if (i == INT_COLON)",
      "info" : "IfStatement[73745-74458]:IfStatement[73931-74644]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73765-74458]:Block[73951-74644]"
    }, {
      "left" : "i = _inputBuffer[ptr++];",
      "right" : "i = _inputBuffer[ptr++];",
      "info" : "ExpressionStatement[73812-73836]:ExpressionStatement[73998-74022]"
    }, {
      "left" : "if (i > INT_SPACE)",
      "right" : "if (i > INT_SPACE)",
      "info" : "IfStatement[73849-74354]:IfStatement[74035-74540]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73868-74039]:Block[74054-74225]"
    }, {
      "left" : "if (i != INT_SLASH && i != INT_HASH)",
      "right" : "if (i != INT_SLASH && i != INT_HASH)",
      "info" : "IfStatement[73902-74025]:IfStatement[74088-74211]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73939-74025]:Block[74125-74211]"
    }, {
      "left" : "_inputPtr = ptr;",
      "right" : "_inputPtr = ptr;",
      "info" : "ExpressionStatement[73961-73977]:ExpressionStatement[74147-74163]"
    }, {
      "left" : "return i;",
      "right" : "return i;",
      "info" : "ReturnStatement[73998-74007]:ReturnStatement[74184-74193]"
    }, {
      "left" : "if (i == INT_SPACE || i == INT_TAB)",
      "right" : "if (i == INT_SPACE || i == INT_TAB)",
      "info" : "IfStatement[74045-74354]:IfStatement[74231-74540]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74081-74354]:Block[74267-74540]"
    }, {
      "left" : "i = (int) _inputBuffer[ptr++];",
      "right" : "i = (int) _inputBuffer[ptr++];",
      "info" : "ExpressionStatement[74099-74129]:ExpressionStatement[74285-74315]"
    }, {
      "left" : "if (i > INT_SPACE)",
      "right" : "if (i > INT_SPACE)",
      "info" : "IfStatement[74146-74340]:IfStatement[74332-74526]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74165-74340]:Block[74351-74526]"
    }, {
      "left" : "if (i != INT_SLASH && i != INT_HASH)",
      "right" : "if (i != INT_SLASH && i != INT_HASH)",
      "info" : "IfStatement[74187-74322]:IfStatement[74373-74508]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74224-74322]:Block[74410-74508]"
    }, {
      "left" : "_inputPtr = ptr;",
      "right" : "_inputPtr = ptr;",
      "info" : "ExpressionStatement[74250-74266]:ExpressionStatement[74436-74452]"
    }, {
      "left" : "return i;",
      "right" : "return i;",
      "info" : "ReturnStatement[74291-74300]:ReturnStatement[74477-74486]"
    }, {
      "left" : "_inputPtr = ptr-1;",
      "right" : "_inputPtr = ptr-1;",
      "info" : "ExpressionStatement[74367-74385]:ExpressionStatement[74553-74571]"
    }, {
      "left" : "return _skipColon2(true);",
      "right" : "return _skipColon2(true);",
      "info" : "ReturnStatement[74398-74423]:ReturnStatement[74584-74609]"
    }, {
      "left" : "if (i == INT_SPACE || i == INT_TAB)",
      "right" : "if (i == INT_SPACE || i == INT_TAB)",
      "info" : "IfStatement[74467-74551]:IfStatement[74653-74737]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74503-74551]:Block[74689-74737]"
    }, {
      "left" : "i = _inputBuffer[ptr++];",
      "right" : "i = _inputBuffer[ptr++];",
      "info" : "ExpressionStatement[74517-74541]:ExpressionStatement[74703-74727]"
    }, {
      "left" : "boolean gotColon = (i == INT_COLON);",
      "right" : "boolean gotColon = (i == INT_COLON);",
      "info" : "VariableDeclarationStatement[74560-74596]:VariableDeclarationStatement[74746-74782]"
    }, {
      "left" : "if (gotColon)",
      "right" : "if (gotColon)",
      "info" : "IfStatement[74605-75169]:IfStatement[74791-75355]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74619-75169]:Block[74805-75355]"
    }, {
      "left" : "i = _inputBuffer[ptr++];",
      "right" : "i = _inputBuffer[ptr++];",
      "info" : "ExpressionStatement[74633-74657]:ExpressionStatement[74819-74843]"
    }, {
      "left" : "if (i > INT_SPACE)",
      "right" : "if (i > INT_SPACE)",
      "info" : "IfStatement[74670-75159]:IfStatement[74856-75345]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74689-74844]:Block[74875-75030]"
    }, {
      "left" : "if (i != INT_SLASH && i != INT_HASH)",
      "right" : "if (i != INT_SLASH && i != INT_HASH)",
      "info" : "IfStatement[74707-74830]:IfStatement[74893-75016]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74744-74830]:Block[74930-75016]"
    }, {
      "left" : "_inputPtr = ptr;",
      "right" : "_inputPtr = ptr;",
      "info" : "ExpressionStatement[74766-74782]:ExpressionStatement[74952-74968]"
    }, {
      "left" : "return i;",
      "right" : "return i;",
      "info" : "ReturnStatement[74803-74812]:ReturnStatement[74989-74998]"
    }, {
      "left" : "if (i == INT_SPACE || i == INT_TAB)",
      "right" : "if (i == INT_SPACE || i == INT_TAB)",
      "info" : "IfStatement[74850-75159]:IfStatement[75036-75345]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74886-75159]:Block[75072-75345]"
    }, {
      "left" : "i = (int) _inputBuffer[ptr++];",
      "right" : "i = (int) _inputBuffer[ptr++];",
      "info" : "ExpressionStatement[74904-74934]:ExpressionStatement[75090-75120]"
    }, {
      "left" : "if (i > INT_SPACE)",
      "right" : "if (i > INT_SPACE)",
      "info" : "IfStatement[74951-75145]:IfStatement[75137-75331]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74970-75145]:Block[75156-75331]"
    }, {
      "left" : "if (i != INT_SLASH && i != INT_HASH)",
      "right" : "if (i != INT_SLASH && i != INT_HASH)",
      "info" : "IfStatement[74992-75127]:IfStatement[75178-75313]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75029-75127]:Block[75215-75313]"
    }, {
      "left" : "_inputPtr = ptr;",
      "right" : "_inputPtr = ptr;",
      "info" : "ExpressionStatement[75055-75071]:ExpressionStatement[75241-75257]"
    }, {
      "left" : "return i;",
      "right" : "return i;",
      "info" : "ReturnStatement[75096-75105]:ReturnStatement[75282-75291]"
    }, {
      "left" : "_inputPtr = ptr-1;",
      "right" : "_inputPtr = ptr-1;",
      "info" : "ExpressionStatement[75178-75196]:ExpressionStatement[75364-75382]"
    }, {
      "left" : "return _skipColon2(gotColon);",
      "right" : "return _skipColon2(gotColon);",
      "info" : "ReturnStatement[75205-75234]:ReturnStatement[75391-75420]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[75298-75305]:Modifier[75484-75491]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[75306-75311]:Modifier[75492-75497]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[75312-75315]:PrimitiveType[75498-75501]"
    }, {
      "left" : "_skipComma",
      "right" : "_skipComma",
      "info" : "SimpleName[75316-75326]:SimpleName[75502-75512]"
    }, {
      "left" : "int i",
      "right" : "int i",
      "info" : "SingleVariableDeclaration[75327-75332]:SingleVariableDeclaration[75513-75518]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[75341-75352]:SimpleType[75527-75538]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75357-76227]:Block[75543-76413]"
    }, {
      "left" : "if (i != INT_COMMA)",
      "right" : "if (i != INT_COMMA)",
      "info" : "IfStatement[75367-75513]:IfStatement[75553-75699]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75387-75513]:Block[75573-75699]"
    }, {
      "left" : "_reportUnexpectedChar(i, \"was expecting comma to separate \"+_parsingContext.getTypeDesc()+\" entries\");",
      "right" : "_reportUnexpectedChar(i, \"was expecting comma to separate \"+_parsingContext.getTypeDesc()+\" entries\");",
      "info" : "ExpressionStatement[75401-75503]:ExpressionStatement[75587-75689]"
    }, {
      "left" : "while (_inputPtr < _inputEnd)",
      "right" : "while (_inputPtr < _inputEnd)",
      "info" : "WhileStatement[75522-76186]:WhileStatement[75708-76372]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75552-76186]:Block[75738-76372]"
    }, {
      "left" : "i = (int) _inputBuffer[_inputPtr++];",
      "right" : "i = (int) _inputBuffer[_inputPtr++];",
      "info" : "ExpressionStatement[75566-75602]:ExpressionStatement[75752-75788]"
    }, {
      "left" : "if (i > INT_SPACE)",
      "right" : "if (i > INT_SPACE)",
      "info" : "IfStatement[75615-75828]:IfStatement[75801-76014]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75634-75828]:Block[75820-76014]"
    }, {
      "left" : "if (i == INT_SLASH || i == INT_HASH)",
      "right" : "if (i == INT_SLASH || i == INT_HASH)",
      "info" : "IfStatement[75652-75788]:IfStatement[75838-75974]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75689-75788]:Block[75875-75974]"
    }, {
      "left" : "--_inputPtr;",
      "right" : "--_inputPtr;",
      "info" : "ExpressionStatement[75711-75723]:ExpressionStatement[75897-75909]"
    }, {
      "left" : "return _skipAfterComma2();",
      "right" : "return _skipAfterComma2();",
      "info" : "ReturnStatement[75744-75770]:ReturnStatement[75930-75956]"
    }, {
      "left" : "return i;",
      "right" : "return i;",
      "info" : "ReturnStatement[75805-75814]:ReturnStatement[75991-76000]"
    }, {
      "left" : "if (i < INT_SPACE)",
      "right" : "if (i < INT_SPACE)",
      "info" : "IfStatement[75841-76176]:IfStatement[76027-76362]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75860-76176]:Block[76046-76362]"
    }, {
      "left" : "if (i == INT_LF)",
      "right" : "if (i == INT_LF)",
      "info" : "IfStatement[75878-76162]:IfStatement[76064-76348]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75895-76003]:Block[76081-76189]"
    }, {
      "left" : "++_currInputRow;",
      "right" : "++_currInputRow;",
      "info" : "ExpressionStatement[75917-75933]:ExpressionStatement[76103-76119]"
    }, {
      "left" : "_currInputRowStart = _inputPtr;",
      "right" : "_currInputRowStart = _inputPtr;",
      "info" : "ExpressionStatement[75954-75985]:ExpressionStatement[76140-76171]"
    }, {
      "left" : "if (i == INT_CR)",
      "right" : "if (i == INT_CR)",
      "info" : "IfStatement[76009-76162]:IfStatement[76195-76348]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76026-76076]:Block[76212-76262]"
    }, {
      "left" : "_skipCR();",
      "right" : "_skipCR();",
      "info" : "ExpressionStatement[76048-76058]:ExpressionStatement[76234-76244]"
    }, {
      "left" : "if (i != INT_TAB)",
      "right" : "if (i != INT_TAB)",
      "info" : "IfStatement[76082-76162]:IfStatement[76268-76348]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76100-76162]:Block[76286-76348]"
    }, {
      "left" : "_throwInvalidSpace(i);",
      "right" : "_throwInvalidSpace(i);",
      "info" : "ExpressionStatement[76122-76144]:ExpressionStatement[76308-76330]"
    }, {
      "left" : "return _skipAfterComma2();",
      "right" : "return _skipAfterComma2();",
      "info" : "ReturnStatement[76195-76221]:ReturnStatement[76381-76407]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[76233-76240]:Modifier[76419-76426]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[76241-76246]:Modifier[76427-76432]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[76247-76250]:PrimitiveType[76433-76436]"
    }, {
      "left" : "_skipAfterComma2",
      "right" : "_skipAfterComma2",
      "info" : "SimpleName[76251-76267]:SimpleName[76437-76453]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[76277-76288]:SimpleType[76463-76474]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76293-77232]:Block[76479-77418]"
    }, {
      "left" : "while (_inputPtr < _inputEnd || loadMore())",
      "right" : "while (_inputPtr < _inputEnd || loadMore())",
      "info" : "WhileStatement[76303-77111]:WhileStatement[76489-77297]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76347-77111]:Block[76533-77297]"
    }, {
      "left" : "int i = (int) _inputBuffer[_inputPtr++];",
      "right" : "int i = (int) _inputBuffer[_inputPtr++];",
      "info" : "VariableDeclarationStatement[76361-76401]:VariableDeclarationStatement[76547-76587]"
    }, {
      "left" : "if (i > INT_SPACE)",
      "right" : "if (i > INT_SPACE)",
      "info" : "IfStatement[76414-76753]:IfStatement[76600-76939]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76433-76753]:Block[76619-76939]"
    }, {
      "left" : "if (i == INT_SLASH)",
      "right" : "if (i == INT_SLASH)",
      "info" : "IfStatement[76451-76556]:IfStatement[76637-76742]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76471-76556]:Block[76657-76742]"
    }, {
      "left" : "_skipComment();",
      "right" : "_skipComment();",
      "info" : "ExpressionStatement[76493-76508]:ExpressionStatement[76679-76694]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[76529-76538]:ContinueStatement[76715-76724]"
    }, {
      "left" : "if (i == INT_HASH)",
      "right" : "if (i == INT_HASH)",
      "info" : "IfStatement[76573-76713]:IfStatement[76759-76899]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76592-76713]:Block[76778-76899]"
    }, {
      "left" : "if (_skipYAMLComment())",
      "right" : "if (_skipYAMLComment())",
      "info" : "IfStatement[76614-76695]:IfStatement[76800-76881]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76638-76695]:Block[76824-76881]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[76664-76673]:ContinueStatement[76850-76859]"
    }, {
      "left" : "return i;",
      "right" : "return i;",
      "info" : "ReturnStatement[76730-76739]:ReturnStatement[76916-76925]"
    }, {
      "left" : "if (i < INT_SPACE)",
      "right" : "if (i < INT_SPACE)",
      "info" : "IfStatement[76766-77101]:IfStatement[76952-77287]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76785-77101]:Block[76971-77287]"
    }, {
      "left" : "if (i == INT_LF)",
      "right" : "if (i == INT_LF)",
      "info" : "IfStatement[76803-77087]:IfStatement[76989-77273]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76820-76928]:Block[77006-77114]"
    }, {
      "left" : "++_currInputRow;",
      "right" : "++_currInputRow;",
      "info" : "ExpressionStatement[76842-76858]:ExpressionStatement[77028-77044]"
    }, {
      "left" : "_currInputRowStart = _inputPtr;",
      "right" : "_currInputRowStart = _inputPtr;",
      "info" : "ExpressionStatement[76879-76910]:ExpressionStatement[77065-77096]"
    }, {
      "left" : "if (i == INT_CR)",
      "right" : "if (i == INT_CR)",
      "info" : "IfStatement[76934-77087]:IfStatement[77120-77273]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76951-77001]:Block[77137-77187]"
    }, {
      "left" : "_skipCR();",
      "right" : "_skipCR();",
      "info" : "ExpressionStatement[76973-76983]:ExpressionStatement[77159-77169]"
    }, {
      "left" : "if (i != INT_TAB)",
      "right" : "if (i != INT_TAB)",
      "info" : "IfStatement[77007-77087]:IfStatement[77193-77273]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77025-77087]:Block[77211-77273]"
    }, {
      "left" : "_throwInvalidSpace(i);",
      "right" : "_throwInvalidSpace(i);",
      "info" : "ExpressionStatement[77047-77069]:ExpressionStatement[77233-77255]"
    }, {
      "left" : "throw _constructError(\"Unexpected end-of-input within/between \"+_parsingContext.getTypeDesc()+\" entries\");",
      "right" : "throw _constructError(\"Unexpected end-of-input within/between \"+_parsingContext.getTypeDesc()+\" entries\");",
      "info" : "ThrowStatement[77120-77226]:ThrowStatement[77306-77412]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[77238-77245]:Modifier[77424-77431]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[77246-77251]:Modifier[77432-77437]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[77252-77255]:PrimitiveType[77438-77441]"
    }, {
      "left" : "_skipWSOrEnd",
      "right" : "_skipWSOrEnd",
      "info" : "SimpleName[77256-77268]:SimpleName[77442-77454]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[77278-77289]:SimpleType[77464-77475]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77294-78838]:Block[77480-79024]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[77456-77581]:IfStatement[77642-77767]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77484-77581]:Block[77670-77767]"
    }, {
      "left" : "if (!loadMore())",
      "right" : "if (!loadMore())",
      "info" : "IfStatement[77498-77571]:IfStatement[77684-77757]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77515-77571]:Block[77701-77757]"
    }, {
      "left" : "return _eofAsNextChar();",
      "right" : "return _eofAsNextChar();",
      "info" : "ReturnStatement[77533-77557]:ReturnStatement[77719-77743]"
    }, {
      "left" : "int i = _inputBuffer[_inputPtr++];",
      "right" : "int i = _inputBuffer[_inputPtr++];",
      "info" : "VariableDeclarationStatement[77590-77624]:VariableDeclarationStatement[77776-77810]"
    }, {
      "left" : "if (i > INT_SPACE)",
      "right" : "if (i > INT_SPACE)",
      "info" : "IfStatement[77633-77819]:IfStatement[77819-78005]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77652-77819]:Block[77838-78005]"
    }, {
      "left" : "if (i == INT_SLASH || i == INT_HASH)",
      "right" : "if (i == INT_SLASH || i == INT_HASH)",
      "info" : "IfStatement[77666-77787]:IfStatement[77852-77973]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77703-77787]:Block[77889-77973]"
    }, {
      "left" : "--_inputPtr;",
      "right" : "--_inputPtr;",
      "info" : "ExpressionStatement[77721-77733]:ExpressionStatement[77907-77919]"
    }, {
      "left" : "return _skipWSOrEnd2();",
      "right" : "return _skipWSOrEnd2();",
      "info" : "ReturnStatement[77750-77773]:ReturnStatement[77936-77959]"
    }, {
      "left" : "return i;",
      "right" : "return i;",
      "info" : "ReturnStatement[77800-77809]:ReturnStatement[77986-77995]"
    }, {
      "left" : "if (i != INT_SPACE)",
      "right" : "if (i != INT_SPACE)",
      "info" : "IfStatement[77828-78128]:IfStatement[78014-78314]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77848-78128]:Block[78034-78314]"
    }, {
      "left" : "if (i == INT_LF)",
      "right" : "if (i == INT_LF)",
      "info" : "IfStatement[77862-78118]:IfStatement[78048-78304]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77879-77975]:Block[78065-78161]"
    }, {
      "left" : "++_currInputRow;",
      "right" : "++_currInputRow;",
      "info" : "ExpressionStatement[77897-77913]:ExpressionStatement[78083-78099]"
    }, {
      "left" : "_currInputRowStart = _inputPtr;",
      "right" : "_currInputRowStart = _inputPtr;",
      "info" : "ExpressionStatement[77930-77961]:ExpressionStatement[78116-78147]"
    }, {
      "left" : "if (i == INT_CR)",
      "right" : "if (i == INT_CR)",
      "info" : "IfStatement[77981-78118]:IfStatement[78167-78304]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77998-78040]:Block[78184-78226]"
    }, {
      "left" : "_skipCR();",
      "right" : "_skipCR();",
      "info" : "ExpressionStatement[78016-78026]:ExpressionStatement[78202-78212]"
    }, {
      "left" : "if (i != INT_TAB)",
      "right" : "if (i != INT_TAB)",
      "info" : "IfStatement[78046-78118]:IfStatement[78232-78304]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78064-78118]:Block[78250-78304]"
    }, {
      "left" : "_throwInvalidSpace(i);",
      "right" : "_throwInvalidSpace(i);",
      "info" : "ExpressionStatement[78082-78104]:ExpressionStatement[78268-78290]"
    }, {
      "left" : "while (_inputPtr < _inputEnd)",
      "right" : "while (_inputPtr < _inputEnd)",
      "info" : "WhileStatement[78138-78800]:WhileStatement[78324-78986]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78168-78800]:Block[78354-78986]"
    }, {
      "left" : "i = (int) _inputBuffer[_inputPtr++];",
      "right" : "i = (int) _inputBuffer[_inputPtr++];",
      "info" : "ExpressionStatement[78182-78218]:ExpressionStatement[78368-78404]"
    }, {
      "left" : "if (i > INT_SPACE)",
      "right" : "if (i > INT_SPACE)",
      "info" : "IfStatement[78231-78441]:IfStatement[78417-78627]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78250-78441]:Block[78436-78627]"
    }, {
      "left" : "if (i == INT_SLASH || i == INT_HASH)",
      "right" : "if (i == INT_SLASH || i == INT_HASH)",
      "info" : "IfStatement[78268-78401]:IfStatement[78454-78587]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78305-78401]:Block[78491-78587]"
    }, {
      "left" : "--_inputPtr;",
      "right" : "--_inputPtr;",
      "info" : "ExpressionStatement[78327-78339]:ExpressionStatement[78513-78525]"
    }, {
      "left" : "return _skipWSOrEnd2();",
      "right" : "return _skipWSOrEnd2();",
      "info" : "ReturnStatement[78360-78383]:ReturnStatement[78546-78569]"
    }, {
      "left" : "return i;",
      "right" : "return i;",
      "info" : "ReturnStatement[78418-78427]:ReturnStatement[78604-78613]"
    }, {
      "left" : "if (i != INT_SPACE)",
      "right" : "if (i != INT_SPACE)",
      "info" : "IfStatement[78454-78790]:IfStatement[78640-78976]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78474-78790]:Block[78660-78976]"
    }, {
      "left" : "if (i == INT_LF)",
      "right" : "if (i == INT_LF)",
      "info" : "IfStatement[78492-78776]:IfStatement[78678-78962]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78509-78617]:Block[78695-78803]"
    }, {
      "left" : "++_currInputRow;",
      "right" : "++_currInputRow;",
      "info" : "ExpressionStatement[78531-78547]:ExpressionStatement[78717-78733]"
    }, {
      "left" : "_currInputRowStart = _inputPtr;",
      "right" : "_currInputRowStart = _inputPtr;",
      "info" : "ExpressionStatement[78568-78599]:ExpressionStatement[78754-78785]"
    }, {
      "left" : "if (i == INT_CR)",
      "right" : "if (i == INT_CR)",
      "info" : "IfStatement[78623-78776]:IfStatement[78809-78962]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78640-78690]:Block[78826-78876]"
    }, {
      "left" : "_skipCR();",
      "right" : "_skipCR();",
      "info" : "ExpressionStatement[78662-78672]:ExpressionStatement[78848-78858]"
    }, {
      "left" : "if (i != INT_TAB)",
      "right" : "if (i != INT_TAB)",
      "info" : "IfStatement[78696-78776]:IfStatement[78882-78962]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78714-78776]:Block[78900-78962]"
    }, {
      "left" : "_throwInvalidSpace(i);",
      "right" : "_throwInvalidSpace(i);",
      "info" : "ExpressionStatement[78736-78758]:ExpressionStatement[78922-78944]"
    }, {
      "left" : "return _skipWSOrEnd2();",
      "right" : "return _skipWSOrEnd2();",
      "info" : "ReturnStatement[78809-78832]:ReturnStatement[78995-79018]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[78844-78851]:Modifier[79030-79037]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[78852-78855]:PrimitiveType[79038-79041]"
    }, {
      "left" : "_skipWSOrEnd2",
      "right" : "_skipWSOrEnd2",
      "info" : "SimpleName[78856-78869]:SimpleName[79042-79055]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[78879-78890]:SimpleType[79065-79076]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78895-79862]:Block[79081-80048]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[78905-79856]:WhileStatement[79091-80042]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78918-79856]:Block[79104-80042]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[78932-79099]:IfStatement[79118-79285]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78960-79099]:Block[79146-79285]"
    }, {
      "left" : "if (!loadMore())",
      "right" : "if (!loadMore())",
      "info" : "IfStatement[78978-79085]:IfStatement[79164-79271]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78995-79085]:Block[79181-79271]"
    }, {
      "left" : "return _eofAsNextChar();",
      "right" : "return _eofAsNextChar();",
      "info" : "ReturnStatement[79043-79067]:ReturnStatement[79229-79253]"
    }, {
      "left" : "int i = (int) _inputBuffer[_inputPtr++];",
      "right" : "int i = (int) _inputBuffer[_inputPtr++];",
      "info" : "VariableDeclarationStatement[79112-79152]:VariableDeclarationStatement[79298-79338]"
    }, {
      "left" : "if (i > INT_SPACE)",
      "right" : "if (i > INT_SPACE)",
      "info" : "IfStatement[79165-79846]:IfStatement[79351-80032]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79184-79504]:Block[79370-79690]"
    }, {
      "left" : "if (i == INT_SLASH)",
      "right" : "if (i == INT_SLASH)",
      "info" : "IfStatement[79202-79307]:IfStatement[79388-79493]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79222-79307]:Block[79408-79493]"
    }, {
      "left" : "_skipComment();",
      "right" : "_skipComment();",
      "info" : "ExpressionStatement[79244-79259]:ExpressionStatement[79430-79445]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[79280-79289]:ContinueStatement[79466-79475]"
    }, {
      "left" : "if (i == INT_HASH)",
      "right" : "if (i == INT_HASH)",
      "info" : "IfStatement[79324-79464]:IfStatement[79510-79650]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79343-79464]:Block[79529-79650]"
    }, {
      "left" : "if (_skipYAMLComment())",
      "right" : "if (_skipYAMLComment())",
      "info" : "IfStatement[79365-79446]:IfStatement[79551-79632]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79389-79446]:Block[79575-79632]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[79415-79424]:ContinueStatement[79601-79610]"
    }, {
      "left" : "return i;",
      "right" : "return i;",
      "info" : "ReturnStatement[79481-79490]:ReturnStatement[79667-79676]"
    }, {
      "left" : "if (i != INT_SPACE)",
      "right" : "if (i != INT_SPACE)",
      "info" : "IfStatement[79510-79846]:IfStatement[79696-80032]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79530-79846]:Block[79716-80032]"
    }, {
      "left" : "if (i == INT_LF)",
      "right" : "if (i == INT_LF)",
      "info" : "IfStatement[79548-79832]:IfStatement[79734-80018]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79565-79673]:Block[79751-79859]"
    }, {
      "left" : "++_currInputRow;",
      "right" : "++_currInputRow;",
      "info" : "ExpressionStatement[79587-79603]:ExpressionStatement[79773-79789]"
    }, {
      "left" : "_currInputRowStart = _inputPtr;",
      "right" : "_currInputRowStart = _inputPtr;",
      "info" : "ExpressionStatement[79624-79655]:ExpressionStatement[79810-79841]"
    }, {
      "left" : "if (i == INT_CR)",
      "right" : "if (i == INT_CR)",
      "info" : "IfStatement[79679-79832]:IfStatement[79865-80018]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79696-79746]:Block[79882-79932]"
    }, {
      "left" : "_skipCR();",
      "right" : "_skipCR();",
      "info" : "ExpressionStatement[79718-79728]:ExpressionStatement[79904-79914]"
    }, {
      "left" : "if (i != INT_TAB)",
      "right" : "if (i != INT_TAB)",
      "info" : "IfStatement[79752-79832]:IfStatement[79938-80018]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79770-79832]:Block[79956-80018]"
    }, {
      "left" : "_throwInvalidSpace(i);",
      "right" : "_throwInvalidSpace(i);",
      "info" : "ExpressionStatement[79792-79814]:ExpressionStatement[79978-80000]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[79868-79875]:Modifier[80054-80061]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[79876-79880]:PrimitiveType[80062-80066]"
    }, {
      "left" : "_skipComment",
      "right" : "_skipComment",
      "info" : "SimpleName[79881-79893]:SimpleName[80067-80079]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[79903-79914]:SimpleType[80089-80100]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79919-80574]:Block[80105-80760]"
    }, {
      "left" : "if (!isEnabled(Feature.ALLOW_COMMENTS))",
      "right" : "if (!isEnabled(Feature.ALLOW_COMMENTS))",
      "info" : "IfStatement[79929-80133]:IfStatement[80115-80319]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79969-80133]:Block[80155-80319]"
    }, {
      "left" : "_reportUnexpectedChar('/', \"maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)\");",
      "right" : "_reportUnexpectedChar('/', \"maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)\");",
      "info" : "ExpressionStatement[79983-80123]:ExpressionStatement[80169-80309]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd && !loadMore())",
      "right" : "if (_inputPtr >= _inputEnd && !loadMore())",
      "info" : "IfStatement[80199-80301]:IfStatement[80385-80487]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80242-80301]:Block[80428-80487]"
    }, {
      "left" : "_reportInvalidEOF(\" in a comment\");",
      "right" : "_reportInvalidEOF(\" in a comment\");",
      "info" : "ExpressionStatement[80256-80291]:ExpressionStatement[80442-80477]"
    }, {
      "left" : "char c = _inputBuffer[_inputPtr++];",
      "right" : "char c = _inputBuffer[_inputPtr++];",
      "info" : "VariableDeclarationStatement[80310-80345]:VariableDeclarationStatement[80496-80531]"
    }, {
      "left" : "if (c == '/')",
      "right" : "if (c == '/')",
      "info" : "IfStatement[80354-80568]:IfStatement[80540-80754]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80368-80404]:Block[80554-80590]"
    }, {
      "left" : "_skipLine();",
      "right" : "_skipLine();",
      "info" : "ExpressionStatement[80382-80394]:ExpressionStatement[80568-80580]"
    }, {
      "left" : "if (c == '*')",
      "right" : "if (c == '*')",
      "info" : "IfStatement[80410-80568]:IfStatement[80596-80754]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80424-80464]:Block[80610-80650]"
    }, {
      "left" : "_skipCComment();",
      "right" : "_skipCComment();",
      "info" : "ExpressionStatement[80438-80454]:ExpressionStatement[80624-80640]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80470-80568]:Block[80656-80754]"
    }, {
      "left" : "_reportUnexpectedChar(c, \"was expecting either '*' or '/' for a comment\");",
      "right" : "_reportUnexpectedChar(c, \"was expecting either '*' or '/' for a comment\");",
      "info" : "ExpressionStatement[80484-80558]:ExpressionStatement[80670-80744]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[80580-80587]:Modifier[80766-80773]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[80588-80592]:PrimitiveType[80774-80778]"
    }, {
      "left" : "_skipCComment",
      "right" : "_skipCComment",
      "info" : "SimpleName[80593-80606]:SimpleName[80779-80792]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[80616-80627]:SimpleType[80802-80813]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80632-81633]:Block[80818-81819]"
    }, {
      "left" : "while ((_inputPtr < _inputEnd) || loadMore())",
      "right" : "while ((_inputPtr < _inputEnd) || loadMore())",
      "info" : "WhileStatement[80680-81583]:WhileStatement[80866-81769]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80726-81583]:Block[80912-81769]"
    }, {
      "left" : "int i = (int) _inputBuffer[_inputPtr++];",
      "right" : "int i = (int) _inputBuffer[_inputPtr++];",
      "info" : "VariableDeclarationStatement[80740-80780]:VariableDeclarationStatement[80926-80966]"
    }, {
      "left" : "if (i <= '*')",
      "right" : "if (i <= '*')",
      "info" : "IfStatement[80793-81573]:IfStatement[80979-81759]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80807-81573]:Block[80993-81759]"
    }, {
      "left" : "if (i == '*')",
      "right" : "if (i == '*')",
      "info" : "IfStatement[80825-81171]:IfStatement[81011-81357]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80839-81171]:Block[81025-81357]"
    }, {
      "left" : "if ((_inputPtr >= _inputEnd) && !loadMore())",
      "right" : "if ((_inputPtr >= _inputEnd) && !loadMore())",
      "info" : "IfStatement[80869-80968]:IfStatement[81055-81154]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80914-80968]:Block[81100-81154]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[80940-80946]:BreakStatement[81126-81132]"
    }, {
      "left" : "if (_inputBuffer[_inputPtr] == INT_SLASH)",
      "right" : "if (_inputBuffer[_inputPtr] == INT_SLASH)",
      "info" : "IfStatement[80989-81123]:IfStatement[81175-81309]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81031-81123]:Block[81217-81309]"
    }, {
      "left" : "++_inputPtr;",
      "right" : "++_inputPtr;",
      "info" : "ExpressionStatement[81057-81069]:ExpressionStatement[81243-81255]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[81094-81101]:ReturnStatement[81280-81287]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[81144-81153]:ContinueStatement[81330-81339]"
    }, {
      "left" : "if (i < INT_SPACE)",
      "right" : "if (i < INT_SPACE)",
      "info" : "IfStatement[81188-81559]:IfStatement[81374-81745]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81207-81559]:Block[81393-81745]"
    }, {
      "left" : "if (i == INT_LF)",
      "right" : "if (i == INT_LF)",
      "info" : "IfStatement[81229-81541]:IfStatement[81415-81727]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81246-81366]:Block[81432-81552]"
    }, {
      "left" : "++_currInputRow;",
      "right" : "++_currInputRow;",
      "info" : "ExpressionStatement[81272-81288]:ExpressionStatement[81458-81474]"
    }, {
      "left" : "_currInputRowStart = _inputPtr;",
      "right" : "_currInputRowStart = _inputPtr;",
      "info" : "ExpressionStatement[81313-81344]:ExpressionStatement[81499-81530]"
    }, {
      "left" : "if (i == INT_CR)",
      "right" : "if (i == INT_CR)",
      "info" : "IfStatement[81372-81541]:IfStatement[81558-81727]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81389-81447]:Block[81575-81633]"
    }, {
      "left" : "_skipCR();",
      "right" : "_skipCR();",
      "info" : "ExpressionStatement[81415-81425]:ExpressionStatement[81601-81611]"
    }, {
      "left" : "if (i != INT_TAB)",
      "right" : "if (i != INT_TAB)",
      "info" : "IfStatement[81453-81541]:IfStatement[81639-81727]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81471-81541]:Block[81657-81727]"
    }, {
      "left" : "_throwInvalidSpace(i);",
      "right" : "_throwInvalidSpace(i);",
      "info" : "ExpressionStatement[81497-81519]:ExpressionStatement[81683-81705]"
    }, {
      "left" : "_reportInvalidEOF(\" in a comment\");",
      "right" : "_reportInvalidEOF(\" in a comment\");",
      "info" : "ExpressionStatement[81592-81627]:ExpressionStatement[81778-81813]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[81639-81646]:Modifier[81825-81832]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[81647-81654]:PrimitiveType[81833-81840]"
    }, {
      "left" : "_skipYAMLComment",
      "right" : "_skipYAMLComment",
      "info" : "SimpleName[81655-81671]:SimpleName[81841-81857]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[81681-81692]:SimpleType[81867-81878]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81697-81837]:Block[81883-82023]"
    }, {
      "left" : "if (!isEnabled(Feature.ALLOW_YAML_COMMENTS))",
      "right" : "if (!isEnabled(Feature.ALLOW_YAML_COMMENTS))",
      "info" : "IfStatement[81707-81789]:IfStatement[81893-81975]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81752-81789]:Block[81938-81975]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[81766-81779]:ReturnStatement[81952-81965]"
    }, {
      "left" : "_skipLine();",
      "right" : "_skipLine();",
      "info" : "ExpressionStatement[81798-81810]:ExpressionStatement[81984-81996]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[81819-81831]:ReturnStatement[82005-82017]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[81843-81850]:Modifier[82029-82036]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[81851-81855]:PrimitiveType[82037-82041]"
    }, {
      "left" : "_skipLine",
      "right" : "_skipLine",
      "info" : "SimpleName[81856-81865]:SimpleName[82042-82051]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[81875-81886]:SimpleType[82061-82072]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81891-82463]:Block[82077-82649]"
    }, {
      "left" : "while ((_inputPtr < _inputEnd) || loadMore())",
      "right" : "while ((_inputPtr < _inputEnd) || loadMore())",
      "info" : "WhileStatement[81945-82457]:WhileStatement[82131-82643]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81991-82457]:Block[82177-82643]"
    }, {
      "left" : "int i = (int) _inputBuffer[_inputPtr++];",
      "right" : "int i = (int) _inputBuffer[_inputPtr++];",
      "info" : "VariableDeclarationStatement[82005-82045]:VariableDeclarationStatement[82191-82231]"
    }, {
      "left" : "if (i < INT_SPACE)",
      "right" : "if (i < INT_SPACE)",
      "info" : "IfStatement[82058-82447]:IfStatement[82244-82633]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82077-82447]:Block[82263-82633]"
    }, {
      "left" : "if (i == INT_LF)",
      "right" : "if (i == INT_LF)",
      "info" : "IfStatement[82095-82433]:IfStatement[82281-82619]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82112-82247]:Block[82298-82433]"
    }, {
      "left" : "++_currInputRow;",
      "right" : "++_currInputRow;",
      "info" : "ExpressionStatement[82134-82150]:ExpressionStatement[82320-82336]"
    }, {
      "left" : "_currInputRowStart = _inputPtr;",
      "right" : "_currInputRowStart = _inputPtr;",
      "info" : "ExpressionStatement[82171-82202]:ExpressionStatement[82357-82388]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[82223-82229]:BreakStatement[82409-82415]"
    }, {
      "left" : "if (i == INT_CR)",
      "right" : "if (i == INT_CR)",
      "info" : "IfStatement[82253-82433]:IfStatement[82439-82619]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82270-82347]:Block[82456-82533]"
    }, {
      "left" : "_skipCR();",
      "right" : "_skipCR();",
      "info" : "ExpressionStatement[82292-82302]:ExpressionStatement[82478-82488]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[82323-82329]:BreakStatement[82509-82515]"
    }, {
      "left" : "if (i != INT_TAB)",
      "right" : "if (i != INT_TAB)",
      "info" : "IfStatement[82353-82433]:IfStatement[82539-82619]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82371-82433]:Block[82557-82619]"
    }, {
      "left" : "_throwInvalidSpace(i);",
      "right" : "_throwInvalidSpace(i);",
      "info" : "ExpressionStatement[82393-82415]:ExpressionStatement[82579-82601]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[82469-82478]:MarkerAnnotation[82655-82664]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[82483-82492]:Modifier[82669-82678]"
    }, {
      "left" : "char",
      "right" : "char",
      "info" : "PrimitiveType[82493-82497]:PrimitiveType[82679-82683]"
    }, {
      "left" : "_decodeEscaped",
      "right" : "_decodeEscaped",
      "info" : "SimpleName[82498-82512]:SimpleName[82684-82698]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[82522-82533]:SimpleType[82708-82719]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82538-83935]:Block[82724-84121]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[82548-82700]:IfStatement[82734-82886]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82576-82700]:Block[82762-82886]"
    }, {
      "left" : "if (!loadMore())",
      "right" : "if (!loadMore())",
      "info" : "IfStatement[82590-82690]:IfStatement[82776-82876]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82607-82690]:Block[82793-82876]"
    }, {
      "left" : "_reportInvalidEOF(\" in character escape sequence\");",
      "right" : "_reportInvalidEOF(\" in character escape sequence\");",
      "info" : "ExpressionStatement[82625-82676]:ExpressionStatement[82811-82862]"
    }, {
      "left" : "char c = _inputBuffer[_inputPtr++];",
      "right" : "char c = _inputBuffer[_inputPtr++];",
      "info" : "VariableDeclarationStatement[82709-82744]:VariableDeclarationStatement[82895-82930]"
    }, {
      "left" : "switch ((int) c) {\n            // First, ones that are mapped\n        case 'b':\n            return '\\b';\n        case 't':\n            return '\\t';\n        case 'n':\n            return '\\n';\n        case 'f':\n            return '\\f';\n        case 'r':\n            return '\\r';\n\n            // And these are to be returned as they are\n        case '\"':\n        case '/':\n        case '\\\\':\n            return c;\n\n        case 'u': // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape(c);\n        }",
      "right" : "switch ((int) c) {\n            // First, ones that are mapped\n        case 'b':\n            return '\\b';\n        case 't':\n            return '\\t';\n        case 'n':\n            return '\\n';\n        case 'f':\n            return '\\f';\n        case 'r':\n            return '\\r';\n\n            // And these are to be returned as they are\n        case '\"':\n        case '/':\n        case '\\\\':\n            return c;\n\n        case 'u': // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape(c);\n        }",
      "info" : "SwitchStatement[82754-83315]:SwitchStatement[82940-83501]"
    }, {
      "left" : "case 'b':",
      "right" : "case 'b':",
      "info" : "SwitchCase[82824-82833]:SwitchCase[83010-83019]"
    }, {
      "left" : "return '\\b';",
      "right" : "return '\\b';",
      "info" : "ReturnStatement[82846-82858]:ReturnStatement[83032-83044]"
    }, {
      "left" : "case 't':",
      "right" : "case 't':",
      "info" : "SwitchCase[82867-82876]:SwitchCase[83053-83062]"
    }, {
      "left" : "return '\\t';",
      "right" : "return '\\t';",
      "info" : "ReturnStatement[82889-82901]:ReturnStatement[83075-83087]"
    }, {
      "left" : "case 'n':",
      "right" : "case 'n':",
      "info" : "SwitchCase[82910-82919]:SwitchCase[83096-83105]"
    }, {
      "left" : "return '\\n';",
      "right" : "return '\\n';",
      "info" : "ReturnStatement[82932-82944]:ReturnStatement[83118-83130]"
    }, {
      "left" : "case 'f':",
      "right" : "case 'f':",
      "info" : "SwitchCase[82953-82962]:SwitchCase[83139-83148]"
    }, {
      "left" : "return '\\f';",
      "right" : "return '\\f';",
      "info" : "ReturnStatement[82975-82987]:ReturnStatement[83161-83173]"
    }, {
      "left" : "case 'r':",
      "right" : "case 'r':",
      "info" : "SwitchCase[82996-83005]:SwitchCase[83182-83191]"
    }, {
      "left" : "return '\\r';",
      "right" : "return '\\r';",
      "info" : "ReturnStatement[83018-83030]:ReturnStatement[83204-83216]"
    }, {
      "left" : "case '\"':",
      "right" : "case '\"':",
      "info" : "SwitchCase[83096-83105]:SwitchCase[83282-83291]"
    }, {
      "left" : "case '/':",
      "right" : "case '/':",
      "info" : "SwitchCase[83114-83123]:SwitchCase[83300-83309]"
    }, {
      "left" : "case '\\\\':",
      "right" : "case '\\\\':",
      "info" : "SwitchCase[83132-83142]:SwitchCase[83318-83328]"
    }, {
      "left" : "return c;",
      "right" : "return c;",
      "info" : "ReturnStatement[83155-83164]:ReturnStatement[83341-83350]"
    }, {
      "left" : "case 'u':",
      "right" : "case 'u':",
      "info" : "SwitchCase[83174-83183]:SwitchCase[83360-83369]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[83223-83229]:BreakStatement[83409-83415]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[83239-83247]:SwitchCase[83425-83433]"
    }, {
      "left" : "return _handleUnrecognizedCharacterEscape(c);",
      "right" : "return _handleUnrecognizedCharacterEscape(c);",
      "info" : "ReturnStatement[83260-83305]:ReturnStatement[83446-83491]"
    }, {
      "left" : "int value = 0;",
      "right" : "int value = 0;",
      "info" : "VariableDeclarationStatement[83372-83386]:VariableDeclarationStatement[83558-83572]"
    }, {
      "left" : "for (int i = 0; i < 4; ++i)",
      "right" : "for (int i = 0; i < 4; ++i)",
      "info" : "ForStatement[83395-83900]:ForStatement[83581-84086]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[83423-83900]:Block[83609-84086]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[83437-83605]:IfStatement[83623-83791]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[83465-83605]:Block[83651-83791]"
    }, {
      "left" : "if (!loadMore())",
      "right" : "if (!loadMore())",
      "info" : "IfStatement[83483-83591]:IfStatement[83669-83777]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[83500-83591]:Block[83686-83777]"
    }, {
      "left" : "_reportInvalidEOF(\" in character escape sequence\");",
      "right" : "_reportInvalidEOF(\" in character escape sequence\");",
      "info" : "ExpressionStatement[83522-83573]:ExpressionStatement[83708-83759]"
    }, {
      "left" : "int ch = (int) _inputBuffer[_inputPtr++];",
      "right" : "int ch = (int) _inputBuffer[_inputPtr++];",
      "info" : "VariableDeclarationStatement[83618-83659]:VariableDeclarationStatement[83804-83845]"
    }, {
      "left" : "int digit = CharTypes.charToHex(ch);",
      "right" : "int digit = CharTypes.charToHex(ch);",
      "info" : "VariableDeclarationStatement[83672-83708]:VariableDeclarationStatement[83858-83894]"
    }, {
      "left" : "if (digit < 0)",
      "right" : "if (digit < 0)",
      "info" : "IfStatement[83721-83848]:IfStatement[83907-84034]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[83736-83848]:Block[83922-84034]"
    }, {
      "left" : "_reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");",
      "right" : "_reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");",
      "info" : "ExpressionStatement[83754-83834]:ExpressionStatement[83940-84020]"
    }, {
      "left" : "value = (value << 4) | digit;",
      "right" : "value = (value << 4) | digit;",
      "info" : "ExpressionStatement[83861-83890]:ExpressionStatement[84047-84076]"
    }, {
      "left" : "return (char) value;",
      "right" : "return (char) value;",
      "info" : "ReturnStatement[83909-83929]:ReturnStatement[84095-84115]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[83941-83948]:Modifier[84127-84134]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[83949-83954]:Modifier[84135-84140]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[83955-83959]:PrimitiveType[84141-84145]"
    }, {
      "left" : "_matchTrue",
      "right" : "_matchTrue",
      "info" : "SimpleName[83960-83970]:SimpleName[84146-84156]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[83980-83991]:SimpleType[84166-84177]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[83992-84482]:Block[84178-84668]"
    }, {
      "left" : "int ptr = _inputPtr;",
      "right" : "int ptr = _inputPtr;",
      "info" : "VariableDeclarationStatement[84002-84022]:VariableDeclarationStatement[84188-84208]"
    }, {
      "left" : "if ((ptr + 3) < _inputEnd)",
      "right" : "if ((ptr + 3) < _inputEnd)",
      "info" : "IfStatement[84031-84396]:IfStatement[84217-84582]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[84058-84396]:Block[84244-84582]"
    }, {
      "left" : "final char[] b = _inputBuffer;",
      "right" : "final char[] b = _inputBuffer;",
      "info" : "VariableDeclarationStatement[84072-84102]:VariableDeclarationStatement[84258-84288]"
    }, {
      "left" : "if (b[ptr] == 'r' && b[++ptr] == 'u' && b[++ptr] == 'e')",
      "right" : "if (b[ptr] == 'r' && b[++ptr] == 'u' && b[++ptr] == 'e')",
      "info" : "IfStatement[84115-84386]:IfStatement[84301-84572]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[84172-84386]:Block[84358-84572]"
    }, {
      "left" : "char c = b[++ptr];",
      "right" : "char c = b[++ptr];",
      "info" : "VariableDeclarationStatement[84190-84208]:VariableDeclarationStatement[84376-84394]"
    }, {
      "left" : "if (c < '0' || c == ']' || c == '}')",
      "right" : "if (c < '0' || c == ']' || c == '}')",
      "info" : "IfStatement[84225-84372]:IfStatement[84411-84558]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[84262-84372]:Block[84448-84558]"
    }, {
      "left" : "_inputPtr = ptr;",
      "right" : "_inputPtr = ptr;",
      "info" : "ExpressionStatement[84310-84326]:ExpressionStatement[84496-84512]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[84347-84354]:ReturnStatement[84533-84540]"
    }, {
      "left" : "_matchToken(\"true\", 1);",
      "right" : "_matchToken(\"true\", 1);",
      "info" : "ExpressionStatement[84453-84476]:ExpressionStatement[84639-84662]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[84488-84495]:Modifier[84674-84681]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[84496-84501]:Modifier[84682-84687]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[84502-84506]:PrimitiveType[84688-84692]"
    }, {
      "left" : "_matchFalse",
      "right" : "_matchFalse",
      "info" : "SimpleName[84507-84518]:SimpleName[84693-84704]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[84528-84539]:SimpleType[84714-84725]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[84540-85050]:Block[84726-85236]"
    }, {
      "left" : "int ptr = _inputPtr;",
      "right" : "int ptr = _inputPtr;",
      "info" : "VariableDeclarationStatement[84550-84570]:VariableDeclarationStatement[84736-84756]"
    }, {
      "left" : "if ((ptr + 4) < _inputEnd)",
      "right" : "if ((ptr + 4) < _inputEnd)",
      "info" : "IfStatement[84579-84963]:IfStatement[84765-85149]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[84606-84963]:Block[84792-85149]"
    }, {
      "left" : "final char[] b = _inputBuffer;",
      "right" : "final char[] b = _inputBuffer;",
      "info" : "VariableDeclarationStatement[84620-84650]:VariableDeclarationStatement[84806-84836]"
    }, {
      "left" : "if (b[ptr] == 'a' && b[++ptr] == 'l' && b[++ptr] == 's' && b[++ptr] == 'e')",
      "right" : "if (b[ptr] == 'a' && b[++ptr] == 'l' && b[++ptr] == 's' && b[++ptr] == 'e')",
      "info" : "IfStatement[84663-84953]:IfStatement[84849-85139]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[84739-84953]:Block[84925-85139]"
    }, {
      "left" : "char c = b[++ptr];",
      "right" : "char c = b[++ptr];",
      "info" : "VariableDeclarationStatement[84757-84775]:VariableDeclarationStatement[84943-84961]"
    }, {
      "left" : "if (c < '0' || c == ']' || c == '}')",
      "right" : "if (c < '0' || c == ']' || c == '}')",
      "info" : "IfStatement[84792-84939]:IfStatement[84978-85125]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[84829-84939]:Block[85015-85125]"
    }, {
      "left" : "_inputPtr = ptr;",
      "right" : "_inputPtr = ptr;",
      "info" : "ExpressionStatement[84877-84893]:ExpressionStatement[85063-85079]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[84914-84921]:ReturnStatement[85100-85107]"
    }, {
      "left" : "_matchToken(\"false\", 1);",
      "right" : "_matchToken(\"false\", 1);",
      "info" : "ExpressionStatement[85020-85044]:ExpressionStatement[85206-85230]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[85056-85063]:Modifier[85242-85249]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[85064-85069]:Modifier[85250-85255]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[85070-85074]:PrimitiveType[85256-85260]"
    }, {
      "left" : "_matchNull",
      "right" : "_matchNull",
      "info" : "SimpleName[85075-85085]:SimpleName[85261-85271]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[85095-85106]:SimpleType[85281-85292]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[85107-85597]:Block[85293-85783]"
    }, {
      "left" : "int ptr = _inputPtr;",
      "right" : "int ptr = _inputPtr;",
      "info" : "VariableDeclarationStatement[85117-85137]:VariableDeclarationStatement[85303-85323]"
    }, {
      "left" : "if ((ptr + 3) < _inputEnd)",
      "right" : "if ((ptr + 3) < _inputEnd)",
      "info" : "IfStatement[85146-85511]:IfStatement[85332-85697]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[85173-85511]:Block[85359-85697]"
    }, {
      "left" : "final char[] b = _inputBuffer;",
      "right" : "final char[] b = _inputBuffer;",
      "info" : "VariableDeclarationStatement[85187-85217]:VariableDeclarationStatement[85373-85403]"
    }, {
      "left" : "if (b[ptr] == 'u' && b[++ptr] == 'l' && b[++ptr] == 'l')",
      "right" : "if (b[ptr] == 'u' && b[++ptr] == 'l' && b[++ptr] == 'l')",
      "info" : "IfStatement[85230-85501]:IfStatement[85416-85687]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[85287-85501]:Block[85473-85687]"
    }, {
      "left" : "char c = b[++ptr];",
      "right" : "char c = b[++ptr];",
      "info" : "VariableDeclarationStatement[85305-85323]:VariableDeclarationStatement[85491-85509]"
    }, {
      "left" : "if (c < '0' || c == ']' || c == '}')",
      "right" : "if (c < '0' || c == ']' || c == '}')",
      "info" : "IfStatement[85340-85487]:IfStatement[85526-85673]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[85377-85487]:Block[85563-85673]"
    }, {
      "left" : "_inputPtr = ptr;",
      "right" : "_inputPtr = ptr;",
      "info" : "ExpressionStatement[85425-85441]:ExpressionStatement[85611-85627]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[85462-85469]:ReturnStatement[85648-85655]"
    }, {
      "left" : "_matchToken(\"null\", 1);",
      "right" : "_matchToken(\"null\", 1);",
      "info" : "ExpressionStatement[85568-85591]:ExpressionStatement[85754-85777]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[85690-85699]:Modifier[85876-85885]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[85700-85705]:Modifier[85886-85891]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[85706-85710]:PrimitiveType[85892-85896]"
    }, {
      "left" : "_matchToken",
      "right" : "_matchToken",
      "info" : "SimpleName[85711-85722]:SimpleName[85897-85908]"
    }, {
      "left" : "String matchStr",
      "right" : "String matchStr",
      "info" : "SingleVariableDeclaration[85723-85738]:SingleVariableDeclaration[85909-85924]"
    }, {
      "left" : "int i",
      "right" : "int i",
      "info" : "SingleVariableDeclaration[85740-85745]:SingleVariableDeclaration[85926-85931]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[85754-85765]:SimpleType[85940-85951]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[85770-86725]:Block[85956-86911]"
    }, {
      "left" : "final int len = matchStr.length();",
      "right" : "final int len = matchStr.length();",
      "info" : "VariableDeclarationStatement[85780-85814]:VariableDeclarationStatement[85966-86000]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[85824-86200]:DoStatement[86010-86386]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[85827-86181]:Block[86013-86367]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[85841-86004]:IfStatement[86027-86190]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[85869-86004]:Block[86055-86190]"
    }, {
      "left" : "if (!loadMore())",
      "right" : "if (!loadMore())",
      "info" : "IfStatement[85887-85990]:IfStatement[86073-86176]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[85904-85990]:Block[86090-86176]"
    }, {
      "left" : "_reportInvalidToken(matchStr.substring(0, i));",
      "right" : "_reportInvalidToken(matchStr.substring(0, i));",
      "info" : "ExpressionStatement[85926-85972]:ExpressionStatement[86112-86158]"
    }, {
      "left" : "if (_inputBuffer[_inputPtr] != matchStr.charAt(i))",
      "right" : "if (_inputBuffer[_inputPtr] != matchStr.charAt(i))",
      "info" : "IfStatement[86017-86146]:IfStatement[86203-86332]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[86068-86146]:Block[86254-86332]"
    }, {
      "left" : "_reportInvalidToken(matchStr.substring(0, i));",
      "right" : "_reportInvalidToken(matchStr.substring(0, i));",
      "info" : "ExpressionStatement[86086-86132]:ExpressionStatement[86272-86318]"
    }, {
      "left" : "++_inputPtr;",
      "right" : "++_inputPtr;",
      "info" : "ExpressionStatement[86159-86171]:ExpressionStatement[86345-86357]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[86286-86394]:IfStatement[86472-86580]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[86314-86394]:Block[86500-86580]"
    }, {
      "left" : "if (!loadMore())",
      "right" : "if (!loadMore())",
      "info" : "IfStatement[86328-86384]:IfStatement[86514-86570]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[86345-86384]:Block[86531-86570]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[86363-86370]:ReturnStatement[86549-86556]"
    }, {
      "left" : "char c = _inputBuffer[_inputPtr];",
      "right" : "char c = _inputBuffer[_inputPtr];",
      "info" : "VariableDeclarationStatement[86403-86436]:VariableDeclarationStatement[86589-86622]"
    }, {
      "left" : "if (c < '0' || c == ']' || c == '}')",
      "right" : "if (c < '0' || c == ']' || c == '}')",
      "info" : "IfStatement[86445-86539]:IfStatement[86631-86725]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[86482-86539]:Block[86668-86725]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[86522-86529]:ReturnStatement[86708-86715]"
    }, {
      "left" : "if (Character.isJavaIdentifierPart(c))",
      "right" : "if (Character.isJavaIdentifierPart(c))",
      "info" : "IfStatement[86594-86703]:IfStatement[86780-86889]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[86633-86703]:Block[86819-86889]"
    }, {
      "left" : "_reportInvalidToken(matchStr.substring(0, i));",
      "right" : "_reportInvalidToken(matchStr.substring(0, i));",
      "info" : "ExpressionStatement[86647-86693]:ExpressionStatement[86833-86879]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[86712-86719]:ReturnStatement[86898-86905]"
    }, {
      "left" : "@SuppressWarnings(\"resource\")",
      "right" : "@SuppressWarnings(\"resource\")",
      "info" : "SingleMemberAnnotation[87004-87033]:SingleMemberAnnotation[87190-87219]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[87038-87047]:Modifier[87224-87233]"
    }, {
      "left" : "byte[]",
      "right" : "byte[]",
      "info" : "ArrayType[87048-87054]:ArrayType[87234-87240]"
    }, {
      "left" : "_decodeBase64",
      "right" : "_decodeBase64",
      "info" : "SimpleName[87055-87068]:SimpleName[87241-87254]"
    }, {
      "left" : "Base64Variant b64variant",
      "right" : "Base64Variant b64variant",
      "info" : "SingleVariableDeclaration[87069-87093]:SingleVariableDeclaration[87255-87279]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[87102-87113]:SimpleType[87288-87299]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[87118-91630]:Block[87304-91816]"
    }, {
      "left" : "ByteArrayBuilder builder = _getByteArrayBuilder();",
      "right" : "ByteArrayBuilder builder = _getByteArrayBuilder();",
      "info" : "VariableDeclarationStatement[87128-87178]:VariableDeclarationStatement[87314-87364]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[87209-91624]:WhileStatement[87395-91810]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[87222-91624]:Block[87408-91810]"
    }, {
      "left" : "char ch;",
      "right" : "char ch;",
      "info" : "VariableDeclarationStatement[87299-87307]:VariableDeclarationStatement[87485-87493]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[87320-87517]:DoStatement[87506-87703]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[87323-87492]:Block[87509-87678]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[87341-87430]:IfStatement[87527-87616]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[87369-87430]:Block[87555-87616]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[87391-87412]:ExpressionStatement[87577-87598]"
    }, {
      "left" : "ch = _inputBuffer[_inputPtr++];",
      "right" : "ch = _inputBuffer[_inputPtr++];",
      "info" : "ExpressionStatement[87447-87478]:ExpressionStatement[87633-87664]"
    }, {
      "left" : "int bits = b64variant.decodeBase64Char(ch);",
      "right" : "int bits = b64variant.decodeBase64Char(ch);",
      "info" : "VariableDeclarationStatement[87530-87573]:VariableDeclarationStatement[87716-87759]"
    }, {
      "left" : "if (bits < 0)",
      "right" : "if (bits < 0)",
      "info" : "IfStatement[87586-87919]:IfStatement[87772-88105]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[87600-87919]:Block[87786-88105]"
    }, {
      "left" : "if (ch == '\"')",
      "right" : "if (ch == '\"')",
      "info" : "IfStatement[87618-87739]:IfStatement[87804-87925]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[87633-87739]:Block[87819-87925]"
    }, {
      "left" : "return builder.toByteArray();",
      "right" : "return builder.toByteArray();",
      "info" : "ReturnStatement[87692-87721]:ReturnStatement[87878-87907]"
    }, {
      "left" : "bits = _decodeBase64Escape(b64variant, ch, 0);",
      "right" : "bits = _decodeBase64Escape(b64variant, ch, 0);",
      "info" : "ExpressionStatement[87756-87802]:ExpressionStatement[87942-87988]"
    }, {
      "left" : "if (bits < 0)",
      "right" : "if (bits < 0)",
      "info" : "IfStatement[87819-87905]:IfStatement[88005-88091]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[87833-87905]:Block[88019-88091]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[87878-87887]:ContinueStatement[88064-88073]"
    }, {
      "left" : "int decodedData = bits;",
      "right" : "int decodedData = bits;",
      "info" : "VariableDeclarationStatement[87932-87955]:VariableDeclarationStatement[88118-88141]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[88040-88121]:IfStatement[88226-88307]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[88068-88121]:Block[88254-88307]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[88086-88107]:ExpressionStatement[88272-88293]"
    }, {
      "left" : "ch = _inputBuffer[_inputPtr++];",
      "right" : "ch = _inputBuffer[_inputPtr++];",
      "info" : "ExpressionStatement[88134-88165]:ExpressionStatement[88320-88351]"
    }, {
      "left" : "bits = b64variant.decodeBase64Char(ch);",
      "right" : "bits = b64variant.decodeBase64Char(ch);",
      "info" : "ExpressionStatement[88178-88217]:ExpressionStatement[88364-88403]"
    }, {
      "left" : "if (bits < 0)",
      "right" : "if (bits < 0)",
      "info" : "IfStatement[88230-88322]:IfStatement[88416-88508]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[88244-88322]:Block[88430-88508]"
    }, {
      "left" : "bits = _decodeBase64Escape(b64variant, ch, 1);",
      "right" : "bits = _decodeBase64Escape(b64variant, ch, 1);",
      "info" : "ExpressionStatement[88262-88308]:ExpressionStatement[88448-88494]"
    }, {
      "left" : "decodedData = (decodedData << 6) | bits;",
      "right" : "decodedData = (decodedData << 6) | bits;",
      "info" : "ExpressionStatement[88335-88375]:ExpressionStatement[88521-88561]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[88450-88531]:IfStatement[88636-88717]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[88478-88531]:Block[88664-88717]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[88496-88517]:ExpressionStatement[88682-88703]"
    }, {
      "left" : "ch = _inputBuffer[_inputPtr++];",
      "right" : "ch = _inputBuffer[_inputPtr++];",
      "info" : "ExpressionStatement[88544-88575]:ExpressionStatement[88730-88761]"
    }, {
      "left" : "bits = b64variant.decodeBase64Char(ch);",
      "right" : "bits = b64variant.decodeBase64Char(ch);",
      "info" : "ExpressionStatement[88588-88627]:ExpressionStatement[88774-88813]"
    }, {
      "left" : "if (bits < 0)",
      "right" : "if (bits < 0)",
      "info" : "IfStatement[88698-89992]:IfStatement[88884-90178]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[88712-89992]:Block[88898-90178]"
    }, {
      "left" : "if (bits != Base64Variant.BASE64_VALUE_PADDING)",
      "right" : "if (bits != Base64Variant.BASE64_VALUE_PADDING)",
      "info" : "IfStatement[88730-89185]:IfStatement[88916-89371]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[88778-89185]:Block[88964-89371]"
    }, {
      "left" : "if (ch == '\"' && !b64variant.usesPadding())",
      "right" : "if (ch == '\"' && !b64variant.usesPadding())",
      "info" : "IfStatement[88883-89100]:IfStatement[89069-89286]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[88927-89100]:Block[89113-89286]"
    }, {
      "left" : "decodedData >>= 4;",
      "right" : "decodedData >>= 4;",
      "info" : "ExpressionStatement[88953-88971]:ExpressionStatement[89139-89157]"
    }, {
      "left" : "builder.append(decodedData);",
      "right" : "builder.append(decodedData);",
      "info" : "ExpressionStatement[88996-89024]:ExpressionStatement[89182-89210]"
    }, {
      "left" : "return builder.toByteArray();",
      "right" : "return builder.toByteArray();",
      "info" : "ReturnStatement[89049-89078]:ReturnStatement[89235-89264]"
    }, {
      "left" : "bits = _decodeBase64Escape(b64variant, ch, 2);",
      "right" : "bits = _decodeBase64Escape(b64variant, ch, 2);",
      "info" : "ExpressionStatement[89121-89167]:ExpressionStatement[89307-89353]"
    }, {
      "left" : "if (bits == Base64Variant.BASE64_VALUE_PADDING)",
      "right" : "if (bits == Base64Variant.BASE64_VALUE_PADDING)",
      "info" : "IfStatement[89202-89900]:IfStatement[89388-90086]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[89250-89900]:Block[89436-90086]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[89333-89430]:IfStatement[89519-89616]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[89361-89430]:Block[89547-89616]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[89387-89408]:ExpressionStatement[89573-89594]"
    }, {
      "left" : "ch = _inputBuffer[_inputPtr++];",
      "right" : "ch = _inputBuffer[_inputPtr++];",
      "info" : "ExpressionStatement[89451-89482]:ExpressionStatement[89637-89668]"
    }, {
      "left" : "if (!b64variant.usesPaddingChar(ch))",
      "right" : "if (!b64variant.usesPaddingChar(ch))",
      "info" : "IfStatement[89503-89701]:IfStatement[89689-89887]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[89540-89701]:Block[89726-89887]"
    }, {
      "left" : "throw reportInvalidBase64Char(b64variant, ch, 3, \"expected padding character '\"+b64variant.getPaddingChar()+\"'\");",
      "right" : "throw reportInvalidBase64Char(b64variant, ch, 3, \"expected padding character '\"+b64variant.getPaddingChar()+\"'\");",
      "info" : "ThrowStatement[89566-89679]:ThrowStatement[89752-89865]"
    }, {
      "left" : "decodedData >>= 4;",
      "right" : "decodedData >>= 4;",
      "info" : "ExpressionStatement[89785-89803]:ExpressionStatement[89971-89989]"
    }, {
      "left" : "builder.append(decodedData);",
      "right" : "builder.append(decodedData);",
      "info" : "ExpressionStatement[89824-89852]:ExpressionStatement[90010-90038]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[89873-89882]:ContinueStatement[90059-90068]"
    }, {
      "left" : "decodedData = (decodedData << 6) | bits;",
      "right" : "decodedData = (decodedData << 6) | bits;",
      "info" : "ExpressionStatement[90039-90079]:ExpressionStatement[90225-90265]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[90163-90244]:IfStatement[90349-90430]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[90191-90244]:Block[90377-90430]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[90209-90230]:ExpressionStatement[90395-90416]"
    }, {
      "left" : "ch = _inputBuffer[_inputPtr++];",
      "right" : "ch = _inputBuffer[_inputPtr++];",
      "info" : "ExpressionStatement[90257-90288]:ExpressionStatement[90443-90474]"
    }, {
      "left" : "bits = b64variant.decodeBase64Char(ch);",
      "right" : "bits = b64variant.decodeBase64Char(ch);",
      "info" : "ExpressionStatement[90301-90340]:ExpressionStatement[90487-90526]"
    }, {
      "left" : "if (bits < 0)",
      "right" : "if (bits < 0)",
      "info" : "IfStatement[90353-91456]:IfStatement[90539-91642]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[90367-91456]:Block[90553-91642]"
    }, {
      "left" : "if (bits != Base64Variant.BASE64_VALUE_PADDING)",
      "right" : "if (bits != Base64Variant.BASE64_VALUE_PADDING)",
      "info" : "IfStatement[90385-90848]:IfStatement[90571-91034]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[90433-90848]:Block[90619-91034]"
    }, {
      "left" : "if (ch == '\"' && !b64variant.usesPadding())",
      "right" : "if (ch == '\"' && !b64variant.usesPadding())",
      "info" : "IfStatement[90538-90763]:IfStatement[90724-90949]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[90582-90763]:Block[90768-90949]"
    }, {
      "left" : "decodedData >>= 2;",
      "right" : "decodedData >>= 2;",
      "info" : "ExpressionStatement[90608-90626]:ExpressionStatement[90794-90812]"
    }, {
      "left" : "builder.appendTwoBytes(decodedData);",
      "right" : "builder.appendTwoBytes(decodedData);",
      "info" : "ExpressionStatement[90651-90687]:ExpressionStatement[90837-90873]"
    }, {
      "left" : "return builder.toByteArray();",
      "right" : "return builder.toByteArray();",
      "info" : "ReturnStatement[90712-90741]:ReturnStatement[90898-90927]"
    }, {
      "left" : "bits = _decodeBase64Escape(b64variant, ch, 3);",
      "right" : "bits = _decodeBase64Escape(b64variant, ch, 3);",
      "info" : "ExpressionStatement[90784-90830]:ExpressionStatement[90970-91016]"
    }, {
      "left" : "if (bits == Base64Variant.BASE64_VALUE_PADDING)",
      "right" : "if (bits == Base64Variant.BASE64_VALUE_PADDING)",
      "info" : "IfStatement[90865-91364]:IfStatement[91051-91550]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[90913-91364]:Block[91099-91550]"
    }, {
      "left" : "decodedData >>= 2;",
      "right" : "decodedData >>= 2;",
      "info" : "ExpressionStatement[91241-91259]:ExpressionStatement[91427-91445]"
    }, {
      "left" : "builder.appendTwoBytes(decodedData);",
      "right" : "builder.appendTwoBytes(decodedData);",
      "info" : "ExpressionStatement[91280-91316]:ExpressionStatement[91466-91502]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[91337-91346]:ContinueStatement[91523-91532]"
    }, {
      "left" : "decodedData = (decodedData << 6) | bits;",
      "right" : "decodedData = (decodedData << 6) | bits;",
      "info" : "ExpressionStatement[91523-91563]:ExpressionStatement[91709-91749]"
    }, {
      "left" : "builder.appendThreeBytes(decodedData);",
      "right" : "builder.appendThreeBytes(decodedData);",
      "info" : "ExpressionStatement[91576-91614]:ExpressionStatement[91762-91800]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[91857-91863]:Modifier[92043-92049]"
    }, {
      "left" : "getTokenLocation",
      "right" : "getTokenLocation",
      "info" : "SimpleName[91877-91893]:SimpleName[92063-92079]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[91900-92123]:Block[92086-92457]"
    }, {
      "left" : "final Object src = _ioContext.getSourceReference();",
      "right" : "final Object src = _ioContext.getSourceReference();",
      "info" : "VariableDeclarationStatement[91910-91961]:VariableDeclarationStatement[92096-92147]"
    }, {
      "left" : "return new JsonLocation(src,\n                -1L, getTokenCharacterOffset(),\n                getTokenLineNr(),\n                getTokenColumnNr());",
      "right" : "return new JsonLocation(src,\n                -1L, _tokenInputTotal, _tokenInputRow,\n                getTokenColumnNr());",
      "info" : "ReturnStatement[91970-92117]:ReturnStatement[92331-92451]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[92129-92138]:MarkerAnnotation[92463-92472]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[92143-92149]:Modifier[92477-92483]"
    }, {
      "left" : "JsonLocation",
      "right" : "JsonLocation",
      "info" : "SimpleType[92150-92162]:SimpleType[92484-92496]"
    }, {
      "left" : "getCurrentLocation",
      "right" : "getCurrentLocation",
      "info" : "SimpleName[92163-92181]:SimpleName[92497-92515]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[92184-92412]:Block[92518-92746]"
    }, {
      "left" : "int col = _inputPtr - _currInputRowStart + 1;",
      "right" : "int col = _inputPtr - _currInputRowStart + 1;",
      "info" : "VariableDeclarationStatement[92194-92239]:VariableDeclarationStatement[92528-92573]"
    }, {
      "left" : "return new JsonLocation(_ioContext.getSourceReference(),\n                -1L, _currInputProcessed + _inputPtr,\n                _currInputRow, col);",
      "right" : "return new JsonLocation(_ioContext.getSourceReference(),\n                -1L, _currInputProcessed + _inputPtr,\n                _currInputRow, col);",
      "info" : "ReturnStatement[92259-92406]:ReturnStatement[92593-92740]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[92440-92447]:Modifier[92774-92781]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[92448-92453]:Modifier[92782-92787]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[92454-92458]:PrimitiveType[92788-92792]"
    }, {
      "left" : "_updateLocation",
      "right" : "_updateLocation",
      "info" : "SimpleName[92459-92474]:SimpleName[92793-92808]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[92481-92653]:Block[92815-92987]"
    }, {
      "left" : "_tokenInputTotal = _currInputProcessed + _inputPtr - 1;",
      "right" : "_tokenInputTotal = _currInputProcessed + _inputPtr - 1;",
      "info" : "ExpressionStatement[92491-92546]:ExpressionStatement[92825-92880]"
    }, {
      "left" : "_tokenInputRow = _currInputRow;",
      "right" : "_tokenInputRow = _currInputRow;",
      "info" : "ExpressionStatement[92555-92586]:ExpressionStatement[92889-92920]"
    }, {
      "left" : "_tokenInputCol = _inputPtr - _currInputRowStart - 1;",
      "right" : "_tokenInputCol = _inputPtr - _currInputRowStart - 1;",
      "info" : "ExpressionStatement[92595-92647]:ExpressionStatement[92929-92981]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[92677-92684]:Modifier[93011-93018]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[92685-92690]:Modifier[93019-93024]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[92691-92695]:PrimitiveType[93025-93029]"
    }, {
      "left" : "_updateNameLocation",
      "right" : "_updateNameLocation",
      "info" : "SimpleName[92696-92715]:SimpleName[93030-93049]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[92722-92891]:Block[93056-93225]"
    }, {
      "left" : "_nameInputTotal = _currInputProcessed + _inputPtr - 1;",
      "right" : "_nameInputTotal = _currInputProcessed + _inputPtr - 1;",
      "info" : "ExpressionStatement[92732-92786]:ExpressionStatement[93066-93120]"
    }, {
      "left" : "_nameInputRow = _currInputRow;",
      "right" : "_nameInputRow = _currInputRow;",
      "info" : "ExpressionStatement[92795-92825]:ExpressionStatement[93129-93159]"
    }, {
      "left" : "_nameInputCol = _inputPtr - _currInputRowStart - 1;",
      "right" : "_nameInputCol = _inputPtr - _currInputRowStart - 1;",
      "info" : "ExpressionStatement[92834-92885]:ExpressionStatement[93168-93219]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[93064-93073]:Modifier[93398-93407]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[93074-93078]:PrimitiveType[93408-93412]"
    }, {
      "left" : "_reportInvalidToken",
      "right" : "_reportInvalidToken",
      "info" : "SimpleName[93079-93098]:SimpleName[93413-93432]"
    }, {
      "left" : "String matchedPart",
      "right" : "String matchedPart",
      "info" : "SingleVariableDeclaration[93099-93117]:SingleVariableDeclaration[93433-93451]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[93126-93137]:SimpleType[93460-93471]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[93138-93221]:Block[93472-93555]"
    }, {
      "left" : "_reportInvalidToken(matchedPart, \"'null', 'true', 'false' or NaN\");",
      "right" : "_reportInvalidToken(matchedPart, \"'null', 'true', 'false' or NaN\");",
      "info" : "ExpressionStatement[93148-93215]:ExpressionStatement[93482-93549]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[93227-93236]:Modifier[93561-93570]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[93237-93241]:PrimitiveType[93571-93575]"
    }, {
      "left" : "_reportInvalidToken",
      "right" : "_reportInvalidToken",
      "info" : "SimpleName[93242-93261]:SimpleName[93576-93595]"
    }, {
      "left" : "String matchedPart",
      "right" : "String matchedPart",
      "info" : "SingleVariableDeclaration[93262-93280]:SingleVariableDeclaration[93596-93614]"
    }, {
      "left" : "String msg",
      "right" : "String msg",
      "info" : "SingleVariableDeclaration[93282-93292]:SingleVariableDeclaration[93616-93626]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[93301-93312]:SimpleType[93635-93646]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[93317-94012]:Block[93651-94346]"
    }, {
      "left" : "StringBuilder sb = new StringBuilder(matchedPart);",
      "right" : "StringBuilder sb = new StringBuilder(matchedPart);",
      "info" : "VariableDeclarationStatement[93327-93377]:VariableDeclarationStatement[93661-93711]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[93574-93922]:WhileStatement[93908-94256]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[93587-93922]:Block[93921-94256]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[93601-93724]:IfStatement[93935-94058]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[93629-93724]:Block[93963-94058]"
    }, {
      "left" : "if (!loadMore())",
      "right" : "if (!loadMore())",
      "info" : "IfStatement[93647-93710]:IfStatement[93981-94044]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[93664-93710]:Block[93998-94044]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[93686-93692]:BreakStatement[94020-94026]"
    }, {
      "left" : "char c = _inputBuffer[_inputPtr];",
      "right" : "char c = _inputBuffer[_inputPtr];",
      "info" : "VariableDeclarationStatement[93737-93770]:VariableDeclarationStatement[94071-94104]"
    }, {
      "left" : "if (!Character.isJavaIdentifierPart(c))",
      "right" : "if (!Character.isJavaIdentifierPart(c))",
      "info" : "IfStatement[93783-93861]:IfStatement[94117-94195]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[93823-93861]:Block[94157-94195]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[93841-93847]:BreakStatement[94175-94181]"
    }, {
      "left" : "++_inputPtr;",
      "right" : "++_inputPtr;",
      "info" : "ExpressionStatement[93874-93886]:ExpressionStatement[94208-94220]"
    }, {
      "left" : "sb.append(c);",
      "right" : "sb.append(c);",
      "info" : "ExpressionStatement[93899-93912]:ExpressionStatement[94233-94246]"
    }, {
      "left" : "_reportError(\"Unrecognized token '\"+sb.toString()+\"': was expecting \"+msg);",
      "right" : "_reportError(\"Unrecognized token '\"+sb.toString()+\"': was expecting \"+msg);",
      "info" : "ExpressionStatement[93931-94006]:ExpressionStatement[94265-94340]"
    } ]
  },
  "interFileMappings" : { }
}