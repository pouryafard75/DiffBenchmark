{
  "matchedElements" : [
 {
    "left" : "class : FunctionType",
    "right" : "class : FunctionType",
    "info" : "TypeDeclaration[2214-41367]:TypeDeclaration[2214-41404]"
  }, {
    "left" : "serialVersionUID",
    "right" : "serialVersionUID",
    "info" : "FieldDeclaration[2611-2659]:FieldDeclaration[2611-2659]"
  }, {
    "left" : "call",
    "right" : "call",
    "info" : "FieldDeclaration[2820-2887]:FieldDeclaration[2820-2887]"
  }, {
    "left" : "prototypeSlot",
    "right" : "prototypeSlot",
    "info" : "FieldDeclaration[2891-3318]:FieldDeclaration[2891-3318]"
  }, {
    "left" : "kind",
    "right" : "kind",
    "info" : "FieldDeclaration[3322-3449]:FieldDeclaration[3322-3449]"
  }, {
    "left" : "propAccess",
    "right" : "propAccess",
    "info" : "FieldDeclaration[3453-3559]:FieldDeclaration[3453-3559]"
  }, {
    "left" : "typeOfThis",
    "right" : "typeOfThis",
    "info" : "FieldDeclaration[3563-3666]:FieldDeclaration[3563-3666]"
  }, {
    "left" : "source",
    "right" : "source",
    "info" : "FieldDeclaration[3670-3777]:FieldDeclaration[3670-3777]"
  }, {
    "left" : "implementedInterfaces",
    "right" : "implementedInterfaces",
    "info" : "FieldDeclaration[3781-4006]:FieldDeclaration[3781-4006]"
  }, {
    "left" : "extendedInterfaces",
    "right" : "extendedInterfaces",
    "info" : "FieldDeclaration[4010-4227]:FieldDeclaration[4010-4227]"
  }, {
    "left" : "subTypes",
    "right" : "subTypes",
    "info" : "FieldDeclaration[4231-4398]:FieldDeclaration[4231-4398]"
  }, {
    "left" : "templateTypeNames",
    "right" : "templateTypeNames",
    "info" : "FieldDeclaration[4402-4518]:FieldDeclaration[4402-4518]"
  }, {
    "left" : "package FunctionType(registry , name , source , arrowType , typeOfThis , templateTypeNames , isConstructor boolean, nativeType boolean)",
    "right" : "package FunctionType(registry , name , source , arrowType , typeOfThis , templateTypeNames , isConstructor boolean, nativeType boolean)",
    "info" : "MethodDeclaration[4522-5698]:MethodDeclaration[4522-5698]"
  }, {
    "left" : "private FunctionType(registry , name , source )",
    "right" : "private FunctionType(registry , name , source )",
    "info" : "MethodDeclaration[5702-6360]:MethodDeclaration[5702-6360]"
  }, {
    "left" : "package forInterface(registry , name , source ) : ",
    "right" : "package forInterface(registry , name , source ) : ",
    "info" : "MethodDeclaration[6364-6579]:MethodDeclaration[6364-6579]"
  }, {
    "left" : "public isInstanceType() : boolean",
    "right" : "public isInstanceType() : boolean",
    "info" : "MethodDeclaration[6583-6770]:MethodDeclaration[6583-6770]"
  }, {
    "left" : "public isConstructor() : boolean",
    "right" : "public isConstructor() : boolean",
    "info" : "MethodDeclaration[6774-6859]:MethodDeclaration[6774-6859]"
  }, {
    "left" : "public isInterface() : boolean",
    "right" : "public isInterface() : boolean",
    "info" : "MethodDeclaration[6863-6944]:MethodDeclaration[6863-6944]"
  }, {
    "left" : "public isOrdinaryFunction() : boolean",
    "right" : "public isOrdinaryFunction() : boolean",
    "info" : "MethodDeclaration[6948-7035]:MethodDeclaration[6948-7035]"
  }, {
    "left" : "public makesStructs() : boolean",
    "right" : "public makesStructs() : boolean",
    "info" : "MethodDeclaration[7039-7548]:MethodDeclaration[7039-7548]"
  }, {
    "left" : "public makesDicts() : boolean",
    "right" : "public makesDicts() : boolean",
    "info" : "MethodDeclaration[7552-8051]:MethodDeclaration[7552-8051]"
  }, {
    "left" : "public setStruct() : void",
    "right" : "public setStruct() : void",
    "info" : "MethodDeclaration[8055-8120]:MethodDeclaration[8055-8120]"
  }, {
    "left" : "public setDict() : void",
    "right" : "public setDict() : void",
    "info" : "MethodDeclaration[8124-8185]:MethodDeclaration[8124-8185]"
  }, {
    "left" : "public toMaybeFunctionType() : ",
    "right" : "public toMaybeFunctionType() : ",
    "info" : "MethodDeclaration[8189-8265]:MethodDeclaration[8189-8265]"
  }, {
    "left" : "public canBeCalled() : boolean",
    "right" : "public canBeCalled() : boolean",
    "info" : "MethodDeclaration[8269-8332]:MethodDeclaration[8269-8332]"
  }, {
    "left" : "public hasImplementedInterfaces() : boolean",
    "right" : "public hasImplementedInterfaces() : boolean",
    "info" : "MethodDeclaration[8336-8645]:MethodDeclaration[8336-8645]"
  }, {
    "left" : "public getParameters() : ",
    "right" : "public getParameters() : ",
    "info" : "MethodDeclaration[8649-8830]:MethodDeclaration[8649-8830]"
  }, {
    "left" : "public getParametersNode() : ",
    "right" : "public getParametersNode() : ",
    "info" : "MethodDeclaration[8834-8963]:MethodDeclaration[8834-8963]"
  }, {
    "left" : "public getMinArguments() : int",
    "right" : "public getMinArguments() : int",
    "info" : "MethodDeclaration[8967-9448]:MethodDeclaration[8967-9448]"
  }, {
    "left" : "public getMaxArguments() : int",
    "right" : "public getMaxArguments() : int",
    "info" : "MethodDeclaration[9452-9888]:MethodDeclaration[9452-9888]"
  }, {
    "left" : "public getReturnType() : ",
    "right" : "public getReturnType() : ",
    "info" : "MethodDeclaration[9892-9955]:MethodDeclaration[9892-9955]"
  }, {
    "left" : "public isReturnTypeInferred() : boolean",
    "right" : "public isReturnTypeInferred() : boolean",
    "info" : "MethodDeclaration[9959-10038]:MethodDeclaration[9959-10038]"
  }, {
    "left" : "package getInternalArrowType() : ",
    "right" : "package getInternalArrowType() : ",
    "info" : "MethodDeclaration[10042-10164]:MethodDeclaration[10042-10164]"
  }, {
    "left" : "public getSlot(name ) : ",
    "right" : "public getSlot(name ) : ",
    "info" : "MethodDeclaration[10168-10414]:MethodDeclaration[10168-10414]"
  }, {
    "left" : "public getOwnPropertyNames() : ",
    "right" : "public getOwnPropertyNames() : ",
    "info" : "MethodDeclaration[10418-10831]:MethodDeclaration[10418-10831]"
  }, {
    "left" : "public getPrototype() : ",
    "right" : "public getPrototype() : ",
    "info" : "MethodDeclaration[10835-11852]:MethodDeclaration[10835-11852]"
  }, {
    "left" : "public setPrototypeBasedOn(baseType ) : void",
    "right" : "public setPrototypeBasedOn(baseType ) : void",
    "info" : "MethodDeclaration[11856-12089]:MethodDeclaration[11856-12089]"
  }, {
    "left" : "package setPrototypeBasedOn(baseType , propertyNode ) : void",
    "right" : "package setPrototypeBasedOn(baseType , propertyNode ) : void",
    "info" : "MethodDeclaration[12093-13218]:MethodDeclaration[12093-13218]"
  }, {
    "left" : "package setPrototype(prototype , propertyNode ) : boolean",
    "right" : "package setPrototype(prototype , propertyNode ) : boolean",
    "info" : "MethodDeclaration[13222-13701]:MethodDeclaration[13222-13701]"
  }, {
    "left" : "private setPrototypeNoCheck(prototype , propertyNode ) : boolean",
    "right" : "private setPrototypeNoCheck(prototype , propertyNode ) : boolean",
    "info" : "MethodDeclaration[13705-14903]:MethodDeclaration[13705-14903]"
  }, {
    "left" : "public getAllImplementedInterfaces() : ",
    "right" : "public getAllImplementedInterfaces() : ",
    "info" : "MethodDeclaration[14907-15473]:MethodDeclaration[14907-15473]"
  }, {
    "left" : "private addRelatedInterfaces(instance , set ) : void",
    "right" : "private addRelatedInterfaces(instance , set ) : void",
    "info" : "MethodDeclaration[15477-15880]:MethodDeclaration[15477-15880]"
  }, {
    "left" : "public getImplementedInterfaces() : ",
    "right" : "public getImplementedInterfaces() : ",
    "info" : "MethodDeclaration[15884-16300]:MethodDeclaration[15884-16300]"
  }, {
    "left" : "public getOwnImplementedInterfaces() : ",
    "right" : "public getOwnImplementedInterfaces() : ",
    "info" : "MethodDeclaration[16304-16464]:MethodDeclaration[16304-16464]"
  }, {
    "left" : "public setImplementedInterfaces(implementedInterfaces ...) : void",
    "right" : "public setImplementedInterfaces(implementedInterfaces ...) : void",
    "info" : "MethodDeclaration[16468-16910]:MethodDeclaration[16468-16910]"
  }, {
    "left" : "public getAllExtendedInterfaces() : ",
    "right" : "public getAllExtendedInterfaces() : ",
    "info" : "MethodDeclaration[16914-17494]:MethodDeclaration[16914-17494]"
  }, {
    "left" : "private addRelatedExtendedInterfaces(instance , set ) : void",
    "right" : "private addRelatedExtendedInterfaces(instance , set ) : void",
    "info" : "MethodDeclaration[17498-17857]:MethodDeclaration[17498-17857]"
  }, {
    "left" : "public getExtendedInterfaces() : ",
    "right" : "public getExtendedInterfaces() : ",
    "info" : "MethodDeclaration[17861-18011]:MethodDeclaration[17861-18011]"
  }, {
    "left" : "public getExtendedInterfacesCount() : int",
    "right" : "public getExtendedInterfacesCount() : int",
    "info" : "MethodDeclaration[18015-18174]:MethodDeclaration[18015-18174]"
  }, {
    "left" : "public setExtendedInterfaces(extendedInterfaces ) : void",
    "right" : "public setExtendedInterfaces(extendedInterfaces ) : void",
    "info" : "MethodDeclaration[18178-18462]:MethodDeclaration[18178-18462]"
  }, {
    "left" : "public getPropertyType(name ) : ",
    "right" : "public getPropertyType(name ) : ",
    "info" : "MethodDeclaration[18466-19690]:MethodDeclaration[18466-19690]"
  }, {
    "left" : "public getBindReturnType(argsToBind int) : ",
    "right" : "public getBindReturnType(argsToBind int) : ",
    "info" : "MethodDeclaration[19694-20506]:MethodDeclaration[19694-20506]"
  }, {
    "left" : "private getCallOrBindSignature(isCall boolean) : ",
    "right" : "private getCallOrBindSignature(isCall boolean) : ",
    "info" : "MethodDeclaration[20510-21645]:MethodDeclaration[20510-21645]"
  }, {
    "left" : "package defineProperty(name , type , inferred boolean, propertyNode ) : boolean",
    "right" : "package defineProperty(name , type , inferred boolean, propertyNode ) : boolean",
    "info" : "MethodDeclaration[21649-22202]:MethodDeclaration[21649-22202]"
  }, {
    "left" : "package supAndInfHelper(that , leastSuper boolean) : ",
    "right" : "package supAndInfHelper(that , leastSuper boolean) : ",
    "info" : "MethodDeclaration[22206-25633]:MethodDeclaration[22206-25633]"
  }, {
    "left" : "private tryMergeFunctionPiecewise(other , leastSuper boolean) : ",
    "right" : "private tryMergeFunctionPiecewise(other , leastSuper boolean) : ",
    "info" : "MethodDeclaration[25637-27233]:MethodDeclaration[25637-27254]"
  }, {
    "left" : "public getSuperClassConstructor() : ",
    "right" : "public getSuperClassConstructor() : ",
    "info" : "MethodDeclaration[27237-27681]:MethodDeclaration[27258-27702]"
  }, {
    "left" : "public getTopDefiningInterface(type , propertyName ) : ",
    "right" : "public getTopDefiningInterface(type , propertyName ) : ",
    "info" : "MethodDeclaration[27685-28273]:MethodDeclaration[27706-28294]"
  }, {
    "left" : "public getTopMostDefiningType(propertyName ) : ",
    "right" : "public getTopMostDefiningType(propertyName ) : ",
    "info" : "MethodDeclaration[28277-29055]:MethodDeclaration[28298-29076]"
  }, {
    "left" : "package checkFunctionEquivalenceHelper(that , tolerateUnknowns boolean) : boolean",
    "right" : "package checkFunctionEquivalenceHelper(that , eqMethod ) : boolean",
    "info" : "MethodDeclaration[29059-29816]:MethodDeclaration[29080-29823]"
  }, {
    "left" : "public hashCode() : int",
    "right" : "public hashCode() : int",
    "info" : "MethodDeclaration[29820-29935]:MethodDeclaration[29827-29942]"
  }, {
    "left" : "public hasEqualCallType(otherType ) : boolean",
    "right" : "public hasEqualCallType(otherType ) : boolean",
    "info" : "MethodDeclaration[29939-30073]:MethodDeclaration[29946-30110]"
  }, {
    "left" : "package toStringHelper(forAnnotations boolean) : ",
    "right" : "package toStringHelper(forAnnotations boolean) : ",
    "info" : "MethodDeclaration[30077-31451]:MethodDeclaration[30114-31488]"
  }, {
    "left" : "private appendArgString(b , p , forAnnotations boolean) : void",
    "right" : "private appendArgString(b , p , forAnnotations boolean) : void",
    "info" : "MethodDeclaration[31455-31813]:MethodDeclaration[31492-31850]"
  }, {
    "left" : "private appendVarArgsString(builder , paramType , forAnnotations boolean) : void",
    "right" : "private appendVarArgsString(builder , paramType , forAnnotations boolean) : void",
    "info" : "MethodDeclaration[31817-32302]:MethodDeclaration[31854-32339]"
  }, {
    "left" : "private appendOptionalArgString(builder , paramType , forAnnotations boolean) : void",
    "right" : "private appendOptionalArgString(builder , paramType , forAnnotations boolean) : void",
    "info" : "MethodDeclaration[32306-32773]:MethodDeclaration[32343-32810]"
  }, {
    "left" : "public isSubtype(that ) : boolean",
    "right" : "public isSubtype(that ) : boolean",
    "info" : "MethodDeclaration[32777-34817]:MethodDeclaration[32814-34854]"
  }, {
    "left" : "public visit(visitor ) : ",
    "right" : "public visit(visitor ) : ",
    "info" : "MethodDeclaration[34821-34920]:MethodDeclaration[34858-34957]"
  }, {
    "left" : "public getInstanceType() : ",
    "right" : "public getInstanceType() : ",
    "info" : "MethodDeclaration[34924-35216]:MethodDeclaration[34961-35253]"
  }, {
    "left" : "package setInstanceType(instanceType ) : void",
    "right" : "package setInstanceType(instanceType ) : void",
    "info" : "MethodDeclaration[35220-35399]:MethodDeclaration[35257-35436]"
  }, {
    "left" : "public hasInstanceType() : boolean",
    "right" : "public hasInstanceType() : boolean",
    "info" : "MethodDeclaration[35403-35560]:MethodDeclaration[35440-35597]"
  }, {
    "left" : "public getTypeOfThis() : ",
    "right" : "public getTypeOfThis() : ",
    "info" : "MethodDeclaration[35564-35799]:MethodDeclaration[35601-35836]"
  }, {
    "left" : "public getSource() : ",
    "right" : "public getSource() : ",
    "info" : "MethodDeclaration[35803-35929]:MethodDeclaration[35840-35966]"
  }, {
    "left" : "public setSource(source ) : void",
    "right" : "public setSource(source ) : void",
    "info" : "MethodDeclaration[35933-36641]:MethodDeclaration[35970-36678]"
  }, {
    "left" : "private addSubType(subType ) : void",
    "right" : "private addSubType(subType ) : void",
    "info" : "MethodDeclaration[36645-36856]:MethodDeclaration[36682-36893]"
  }, {
    "left" : "public clearCachedValues() : void",
    "right" : "public clearCachedValues() : void",
    "info" : "MethodDeclaration[36860-37304]:MethodDeclaration[36897-37341]"
  }, {
    "left" : "public getSubTypes() : ",
    "right" : "public getSubTypes() : ",
    "info" : "MethodDeclaration[37308-37575]:MethodDeclaration[37345-37612]"
  }, {
    "left" : "public hasCachedValues() : boolean",
    "right" : "public hasCachedValues() : boolean",
    "info" : "MethodDeclaration[37579-37690]:MethodDeclaration[37616-37727]"
  }, {
    "left" : "public getTemplateTypeNames() : ",
    "right" : "public getTemplateTypeNames() : ",
    "info" : "MethodDeclaration[37694-37827]:MethodDeclaration[37731-37864]"
  }, {
    "left" : "package resolveInternal(t , scope ) : ",
    "right" : "package resolveInternal(t , scope ) : ",
    "info" : "MethodDeclaration[37831-39657]:MethodDeclaration[37868-39694]"
  }, {
    "left" : "public toDebugHashCodeString() : ",
    "right" : "public toDebugHashCodeString() : ",
    "info" : "MethodDeclaration[39661-40633]:MethodDeclaration[39698-40670]"
  }, {
    "left" : "private getDebugHashCodeStringOf(type ) : ",
    "right" : "private getDebugHashCodeStringOf(type ) : ",
    "info" : "MethodDeclaration[40637-40800]:MethodDeclaration[40674-40837]"
  }, {
    "left" : "public cloneWithoutArrowType() : ",
    "right" : "public cloneWithoutArrowType() : ",
    "info" : "MethodDeclaration[40804-41186]:MethodDeclaration[40841-41223]"
  }, {
    "left" : "public hasAnyTemplateInternal() : boolean",
    "right" : "public hasAnyTemplateInternal() : boolean",
    "info" : "MethodDeclaration[41190-41365]:MethodDeclaration[41227-41402]"
  } ],
  "mappings" : [
 {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[2553-2559]:Modifier[2553-2559]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[2560-2565]:TYPE_DECLARATION_KIND[2560-2565]"
  }, {
    "left" : "FunctionType",
    "right" : "FunctionType",
    "info" : "SimpleName[4595-4607]:SimpleName[4595-4607]"
  }, {
    "left" : "JSTypeRegistry registry",
    "right" : "JSTypeRegistry registry",
    "info" : "SingleVariableDeclaration[4608-4631]:SingleVariableDeclaration[4608-4631]"
  }, {
    "left" : "String name",
    "right" : "String name",
    "info" : "SingleVariableDeclaration[4633-4644]:SingleVariableDeclaration[4633-4644]"
  }, {
    "left" : "Node source",
    "right" : "Node source",
    "info" : "SingleVariableDeclaration[4646-4657]:SingleVariableDeclaration[4646-4657]"
  }, {
    "left" : "ArrowType arrowType",
    "right" : "ArrowType arrowType",
    "info" : "SingleVariableDeclaration[4674-4693]:SingleVariableDeclaration[4674-4693]"
  }, {
    "left" : "ObjectType typeOfThis",
    "right" : "ObjectType typeOfThis",
    "info" : "SingleVariableDeclaration[4695-4716]:SingleVariableDeclaration[4695-4716]"
  }, {
    "left" : "ImmutableList<String> templateTypeNames",
    "right" : "ImmutableList<String> templateTypeNames",
    "info" : "SingleVariableDeclaration[4733-4772]:SingleVariableDeclaration[4733-4772]"
  }, {
    "left" : "boolean isConstructor",
    "right" : "boolean isConstructor",
    "info" : "SingleVariableDeclaration[4789-4810]:SingleVariableDeclaration[4789-4810]"
  }, {
    "left" : "boolean nativeType",
    "right" : "boolean nativeType",
    "info" : "SingleVariableDeclaration[4812-4830]:SingleVariableDeclaration[4812-4830]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4832-5698]:Block[4832-5698]"
  }, {
    "left" : "super(registry, name,\n        registry.getNativeObjectType(JSTypeNative.FUNCTION_INSTANCE_TYPE),\n        nativeType);",
    "right" : "super(registry, name,\n        registry.getNativeObjectType(JSTypeNative.FUNCTION_INSTANCE_TYPE),\n        nativeType);",
    "info" : "SuperConstructorInvocation[4838-4955]:SuperConstructorInvocation[4838-4955]"
  }, {
    "left" : "setPrettyPrint(true);",
    "right" : "setPrettyPrint(true);",
    "info" : "ExpressionStatement[4960-4981]:ExpressionStatement[4960-4981]"
  }, {
    "left" : "Preconditions.checkArgument(source == null ||\n        Token.FUNCTION == source.getType());",
    "right" : "Preconditions.checkArgument(source == null ||\n        Token.FUNCTION == source.getType());",
    "info" : "ExpressionStatement[4987-5077]:ExpressionStatement[4987-5077]"
  }, {
    "left" : "Preconditions.checkNotNull(arrowType);",
    "right" : "Preconditions.checkNotNull(arrowType);",
    "info" : "ExpressionStatement[5082-5120]:ExpressionStatement[5082-5120]"
  }, {
    "left" : "this.source = source;",
    "right" : "this.source = source;",
    "info" : "ExpressionStatement[5125-5146]:ExpressionStatement[5125-5146]"
  }, {
    "left" : "if (isConstructor)",
    "right" : "if (isConstructor)",
    "info" : "IfStatement[5151-5554]:IfStatement[5151-5554]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5170-5373]:Block[5170-5373]"
  }, {
    "left" : "this.kind = Kind.CONSTRUCTOR;",
    "right" : "this.kind = Kind.CONSTRUCTOR;",
    "info" : "ExpressionStatement[5178-5207]:ExpressionStatement[5178-5207]"
  }, {
    "left" : "this.propAccess = PropAccess.ANY;",
    "right" : "this.propAccess = PropAccess.ANY;",
    "info" : "ExpressionStatement[5214-5247]:ExpressionStatement[5214-5247]"
  }, {
    "left" : "this.typeOfThis = typeOfThis != null ?\n          typeOfThis : new InstanceObjectType(registry, this, nativeType);",
    "right" : "this.typeOfThis = typeOfThis != null ?\n          typeOfThis : new InstanceObjectType(registry, this, nativeType);",
    "info" : "ExpressionStatement[5254-5367]:ExpressionStatement[5254-5367]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5379-5554]:Block[5379-5554]"
  }, {
    "left" : "this.kind = Kind.ORDINARY;",
    "right" : "this.kind = Kind.ORDINARY;",
    "info" : "ExpressionStatement[5387-5413]:ExpressionStatement[5387-5413]"
  }, {
    "left" : "this.typeOfThis = typeOfThis != null ?\n          typeOfThis :\n          registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);",
    "right" : "this.typeOfThis = typeOfThis != null ?\n          typeOfThis :\n          registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);",
    "info" : "ExpressionStatement[5420-5548]:ExpressionStatement[5420-5548]"
  }, {
    "left" : "this.call = arrowType;",
    "right" : "this.call = arrowType;",
    "info" : "ExpressionStatement[5559-5581]:ExpressionStatement[5559-5581]"
  }, {
    "left" : "this.templateTypeNames = templateTypeNames != null\n        ? templateTypeNames : ImmutableList.<String>of();",
    "right" : "this.templateTypeNames = templateTypeNames != null\n        ? templateTypeNames : ImmutableList.<String>of();",
    "info" : "ExpressionStatement[5586-5694]:ExpressionStatement[5586-5694]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[5768-5775]:Modifier[5768-5775]"
  }, {
    "left" : "FunctionType",
    "right" : "FunctionType",
    "info" : "SimpleName[5776-5788]:SimpleName[5776-5788]"
  }, {
    "left" : "JSTypeRegistry registry",
    "right" : "JSTypeRegistry registry",
    "info" : "SingleVariableDeclaration[5789-5812]:SingleVariableDeclaration[5789-5812]"
  }, {
    "left" : "String name",
    "right" : "String name",
    "info" : "SingleVariableDeclaration[5814-5825]:SingleVariableDeclaration[5814-5825]"
  }, {
    "left" : "Node source",
    "right" : "Node source",
    "info" : "SingleVariableDeclaration[5827-5838]:SingleVariableDeclaration[5827-5838]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5840-6360]:Block[5840-6360]"
  }, {
    "left" : "super(registry, name,\n        registry.getNativeObjectType(JSTypeNative.FUNCTION_INSTANCE_TYPE));",
    "right" : "super(registry, name,\n        registry.getNativeObjectType(JSTypeNative.FUNCTION_INSTANCE_TYPE));",
    "info" : "SuperConstructorInvocation[5846-5943]:SuperConstructorInvocation[5846-5943]"
  }, {
    "left" : "setPrettyPrint(true);",
    "right" : "setPrettyPrint(true);",
    "info" : "ExpressionStatement[5948-5969]:ExpressionStatement[5948-5969]"
  }, {
    "left" : "Preconditions.checkArgument(source == null ||\n        Token.FUNCTION == source.getType());",
    "right" : "Preconditions.checkArgument(source == null ||\n        Token.FUNCTION == source.getType());",
    "info" : "ExpressionStatement[5975-6065]:ExpressionStatement[5975-6065]"
  }, {
    "left" : "Preconditions.checkArgument(name != null);",
    "right" : "Preconditions.checkArgument(name != null);",
    "info" : "ExpressionStatement[6070-6112]:ExpressionStatement[6070-6112]"
  }, {
    "left" : "this.source = source;",
    "right" : "this.source = source;",
    "info" : "ExpressionStatement[6117-6138]:ExpressionStatement[6117-6138]"
  }, {
    "left" : "this.call = new ArrowType(registry, new Node(Token.PARAM_LIST), null);",
    "right" : "this.call = new ArrowType(registry, new Node(Token.PARAM_LIST), null);",
    "info" : "ExpressionStatement[6143-6213]:ExpressionStatement[6143-6213]"
  }, {
    "left" : "this.kind = Kind.INTERFACE;",
    "right" : "this.kind = Kind.INTERFACE;",
    "info" : "ExpressionStatement[6218-6245]:ExpressionStatement[6218-6245]"
  }, {
    "left" : "this.typeOfThis = new InstanceObjectType(registry, this);",
    "right" : "this.typeOfThis = new InstanceObjectType(registry, this);",
    "info" : "ExpressionStatement[6250-6307]:ExpressionStatement[6250-6307]"
  }, {
    "left" : "this.templateTypeNames = ImmutableList.of();",
    "right" : "this.templateTypeNames = ImmutableList.of();",
    "info" : "ExpressionStatement[6312-6356]:ExpressionStatement[6312-6356]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[6430-6436]:Modifier[6430-6436]"
  }, {
    "left" : "FunctionType",
    "right" : "FunctionType",
    "info" : "SimpleType[6437-6449]:SimpleType[6437-6449]"
  }, {
    "left" : "forInterface",
    "right" : "forInterface",
    "info" : "SimpleName[6450-6462]:SimpleName[6450-6462]"
  }, {
    "left" : "JSTypeRegistry registry",
    "right" : "JSTypeRegistry registry",
    "info" : "SingleVariableDeclaration[6470-6493]:SingleVariableDeclaration[6470-6493]"
  }, {
    "left" : "String name",
    "right" : "String name",
    "info" : "SingleVariableDeclaration[6495-6506]:SingleVariableDeclaration[6495-6506]"
  }, {
    "left" : "Node source",
    "right" : "Node source",
    "info" : "SingleVariableDeclaration[6508-6519]:SingleVariableDeclaration[6508-6519]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6521-6579]:Block[6521-6579]"
  }, {
    "left" : "return new FunctionType(registry, name, source);",
    "right" : "return new FunctionType(registry, name, source);",
    "info" : "ReturnStatement[6527-6575]:ReturnStatement[6527-6575]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[6583-6592]:MarkerAnnotation[6583-6592]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[6595-6601]:Modifier[6595-6601]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[6602-6609]:PrimitiveType[6602-6609]"
  }, {
    "left" : "isInstanceType",
    "right" : "isInstanceType",
    "info" : "SimpleName[6610-6624]:SimpleName[6610-6624]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6627-6770]:Block[6627-6770]"
  }, {
    "left" : "return isEquivalentTo(registry.getNativeType(U2U_CONSTRUCTOR_TYPE));",
    "right" : "return isEquivalentTo(registry.getNativeType(U2U_CONSTRUCTOR_TYPE));",
    "info" : "ReturnStatement[6698-6766]:ReturnStatement[6698-6766]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[6774-6783]:MarkerAnnotation[6774-6783]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[6786-6792]:Modifier[6786-6792]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[6793-6800]:PrimitiveType[6793-6800]"
  }, {
    "left" : "isConstructor",
    "right" : "isConstructor",
    "info" : "SimpleName[6801-6814]:SimpleName[6801-6814]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6817-6859]:Block[6817-6859]"
  }, {
    "left" : "return kind == Kind.CONSTRUCTOR;",
    "right" : "return kind == Kind.CONSTRUCTOR;",
    "info" : "ReturnStatement[6823-6855]:ReturnStatement[6823-6855]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[6863-6872]:MarkerAnnotation[6863-6872]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[6875-6881]:Modifier[6875-6881]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[6882-6889]:PrimitiveType[6882-6889]"
  }, {
    "left" : "isInterface",
    "right" : "isInterface",
    "info" : "SimpleName[6890-6901]:SimpleName[6890-6901]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6904-6944]:Block[6904-6944]"
  }, {
    "left" : "return kind == Kind.INTERFACE;",
    "right" : "return kind == Kind.INTERFACE;",
    "info" : "ReturnStatement[6910-6940]:ReturnStatement[6910-6940]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[6948-6957]:MarkerAnnotation[6948-6957]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[6960-6966]:Modifier[6960-6966]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[6967-6974]:PrimitiveType[6967-6974]"
  }, {
    "left" : "isOrdinaryFunction",
    "right" : "isOrdinaryFunction",
    "info" : "SimpleName[6975-6993]:SimpleName[6975-6993]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6996-7035]:Block[6996-7035]"
  }, {
    "left" : "return kind == Kind.ORDINARY;",
    "right" : "return kind == Kind.ORDINARY;",
    "info" : "ReturnStatement[7002-7031]:ReturnStatement[7002-7031]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[7224-7230]:Modifier[7224-7230]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[7231-7238]:PrimitiveType[7231-7238]"
  }, {
    "left" : "makesStructs",
    "right" : "makesStructs",
    "info" : "SimpleName[7239-7251]:SimpleName[7239-7251]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7254-7548]:Block[7254-7548]"
  }, {
    "left" : "if (!isConstructor())",
    "right" : "if (!isConstructor())",
    "info" : "IfStatement[7260-7309]:IfStatement[7260-7309]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7282-7309]:Block[7282-7309]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[7290-7303]:ReturnStatement[7290-7303]"
  }, {
    "left" : "if (propAccess == PropAccess.STRUCT)",
    "right" : "if (propAccess == PropAccess.STRUCT)",
    "info" : "IfStatement[7314-7377]:IfStatement[7314-7377]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7351-7377]:Block[7351-7377]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[7359-7371]:ReturnStatement[7359-7371]"
  }, {
    "left" : "FunctionType superc = getSuperClassConstructor();",
    "right" : "FunctionType superc = getSuperClassConstructor();",
    "info" : "VariableDeclarationStatement[7382-7431]:VariableDeclarationStatement[7382-7431]"
  }, {
    "left" : "if (superc != null && superc.makesStructs())",
    "right" : "if (superc != null && superc.makesStructs())",
    "info" : "IfStatement[7436-7526]:IfStatement[7436-7526]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7481-7526]:Block[7481-7526]"
  }, {
    "left" : "setStruct();",
    "right" : "setStruct();",
    "info" : "ExpressionStatement[7489-7501]:ExpressionStatement[7489-7501]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[7508-7520]:ReturnStatement[7508-7520]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[7531-7544]:ReturnStatement[7531-7544]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[7735-7741]:Modifier[7735-7741]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[7742-7749]:PrimitiveType[7742-7749]"
  }, {
    "left" : "makesDicts",
    "right" : "makesDicts",
    "info" : "SimpleName[7750-7760]:SimpleName[7750-7760]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7763-8051]:Block[7763-8051]"
  }, {
    "left" : "if (!isConstructor())",
    "right" : "if (!isConstructor())",
    "info" : "IfStatement[7769-7818]:IfStatement[7769-7818]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7791-7818]:Block[7791-7818]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[7799-7812]:ReturnStatement[7799-7812]"
  }, {
    "left" : "if (propAccess == PropAccess.DICT)",
    "right" : "if (propAccess == PropAccess.DICT)",
    "info" : "IfStatement[7823-7884]:IfStatement[7823-7884]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7858-7884]:Block[7858-7884]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[7866-7878]:ReturnStatement[7866-7878]"
  }, {
    "left" : "FunctionType superc = getSuperClassConstructor();",
    "right" : "FunctionType superc = getSuperClassConstructor();",
    "info" : "VariableDeclarationStatement[7889-7938]:VariableDeclarationStatement[7889-7938]"
  }, {
    "left" : "if (superc != null && superc.makesDicts())",
    "right" : "if (superc != null && superc.makesDicts())",
    "info" : "IfStatement[7943-8029]:IfStatement[7943-8029]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7986-8029]:Block[7986-8029]"
  }, {
    "left" : "setDict();",
    "right" : "setDict();",
    "info" : "ExpressionStatement[7994-8004]:ExpressionStatement[7994-8004]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[8011-8023]:ReturnStatement[8011-8023]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[8034-8047]:ReturnStatement[8034-8047]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[8055-8061]:Modifier[8055-8061]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[8062-8066]:PrimitiveType[8062-8066]"
  }, {
    "left" : "setStruct",
    "right" : "setStruct",
    "info" : "SimpleName[8067-8076]:SimpleName[8067-8076]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8079-8120]:Block[8079-8120]"
  }, {
    "left" : "propAccess = PropAccess.STRUCT;",
    "right" : "propAccess = PropAccess.STRUCT;",
    "info" : "ExpressionStatement[8085-8116]:ExpressionStatement[8085-8116]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[8124-8130]:Modifier[8124-8130]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[8131-8135]:PrimitiveType[8131-8135]"
  }, {
    "left" : "setDict",
    "right" : "setDict",
    "info" : "SimpleName[8136-8143]:SimpleName[8136-8143]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8146-8185]:Block[8146-8185]"
  }, {
    "left" : "propAccess = PropAccess.DICT;",
    "right" : "propAccess = PropAccess.DICT;",
    "info" : "ExpressionStatement[8152-8181]:ExpressionStatement[8152-8181]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[8189-8198]:MarkerAnnotation[8189-8198]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[8201-8207]:Modifier[8201-8207]"
  }, {
    "left" : "FunctionType",
    "right" : "FunctionType",
    "info" : "SimpleType[8208-8220]:SimpleType[8208-8220]"
  }, {
    "left" : "toMaybeFunctionType",
    "right" : "toMaybeFunctionType",
    "info" : "SimpleName[8221-8240]:SimpleName[8221-8240]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8243-8265]:Block[8243-8265]"
  }, {
    "left" : "return this;",
    "right" : "return this;",
    "info" : "ReturnStatement[8249-8261]:ReturnStatement[8249-8261]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[8269-8278]:MarkerAnnotation[8269-8278]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[8281-8287]:Modifier[8281-8287]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[8288-8295]:PrimitiveType[8288-8295]"
  }, {
    "left" : "canBeCalled",
    "right" : "canBeCalled",
    "info" : "SimpleName[8296-8307]:SimpleName[8296-8307]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8310-8332]:Block[8310-8332]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[8316-8328]:ReturnStatement[8316-8328]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[8336-8342]:Modifier[8336-8342]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[8343-8350]:PrimitiveType[8343-8350]"
  }, {
    "left" : "hasImplementedInterfaces",
    "right" : "hasImplementedInterfaces",
    "info" : "SimpleName[8351-8375]:SimpleName[8351-8375]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8378-8645]:Block[8378-8645]"
  }, {
    "left" : "if (!implementedInterfaces.isEmpty())",
    "right" : "if (!implementedInterfaces.isEmpty())",
    "info" : "IfStatement[8384-8447]:IfStatement[8384-8447]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8421-8447]:Block[8421-8447]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[8429-8441]:ReturnStatement[8429-8441]"
  }, {
    "left" : "FunctionType superCtor = isConstructor() ?\n        getSuperClassConstructor() : null;",
    "right" : "FunctionType superCtor = isConstructor() ?\n        getSuperClassConstructor() : null;",
    "info" : "VariableDeclarationStatement[8452-8537]:VariableDeclarationStatement[8452-8537]"
  }, {
    "left" : "if (superCtor != null)",
    "right" : "if (superCtor != null)",
    "info" : "IfStatement[8542-8623]:IfStatement[8542-8623]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8565-8623]:Block[8565-8623]"
  }, {
    "left" : "return superCtor.hasImplementedInterfaces();",
    "right" : "return superCtor.hasImplementedInterfaces();",
    "info" : "ReturnStatement[8573-8617]:ReturnStatement[8573-8617]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[8628-8641]:ReturnStatement[8628-8641]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[8649-8655]:Modifier[8649-8655]"
  }, {
    "left" : "Iterable<Node>",
    "right" : "Iterable<Node>",
    "info" : "ParameterizedType[8656-8670]:ParameterizedType[8656-8670]"
  }, {
    "left" : "getParameters",
    "right" : "getParameters",
    "info" : "SimpleName[8671-8684]:SimpleName[8671-8684]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8687-8830]:Block[8687-8830]"
  }, {
    "left" : "Node n = getParametersNode();",
    "right" : "Node n = getParametersNode();",
    "info" : "VariableDeclarationStatement[8693-8722]:VariableDeclarationStatement[8693-8722]"
  }, {
    "left" : "if (n != null)",
    "right" : "if (n != null)",
    "info" : "IfStatement[8727-8826]:IfStatement[8727-8826]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8742-8776]:Block[8742-8776]"
  }, {
    "left" : "return n.children();",
    "right" : "return n.children();",
    "info" : "ReturnStatement[8750-8770]:ReturnStatement[8750-8770]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8782-8826]:Block[8782-8826]"
  }, {
    "left" : "return Collections.emptySet();",
    "right" : "return Collections.emptySet();",
    "info" : "ReturnStatement[8790-8820]:ReturnStatement[8790-8820]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[8898-8904]:Modifier[8898-8904]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[8905-8909]:SimpleType[8905-8909]"
  }, {
    "left" : "getParametersNode",
    "right" : "getParametersNode",
    "info" : "SimpleName[8910-8927]:SimpleName[8910-8927]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8930-8963]:Block[8930-8963]"
  }, {
    "left" : "return call.parameters;",
    "right" : "return call.parameters;",
    "info" : "ReturnStatement[8936-8959]:ReturnStatement[8936-8959]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[9042-9048]:Modifier[9042-9048]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[9049-9052]:PrimitiveType[9049-9052]"
  }, {
    "left" : "getMinArguments",
    "right" : "getMinArguments",
    "info" : "SimpleName[9053-9068]:SimpleName[9053-9068]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9071-9448]:Block[9071-9448]"
  }, {
    "left" : "int i = 0;",
    "right" : "int i = 0;",
    "info" : "VariableDeclarationStatement[9272-9282]:VariableDeclarationStatement[9272-9282]"
  }, {
    "left" : "int min = 0;",
    "right" : "int min = 0;",
    "info" : "VariableDeclarationStatement[9287-9299]:VariableDeclarationStatement[9287-9299]"
  }, {
    "left" : "for (Node n : getParameters())",
    "right" : "for (Node n : getParameters())",
    "info" : "EnhancedForStatement[9304-9428]:EnhancedForStatement[9304-9428]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9335-9428]:Block[9335-9428]"
  }, {
    "left" : "i++;",
    "right" : "i++;",
    "info" : "ExpressionStatement[9343-9347]:ExpressionStatement[9343-9347]"
  }, {
    "left" : "if (!n.isOptionalArg() && !n.isVarArgs())",
    "right" : "if (!n.isOptionalArg() && !n.isVarArgs())",
    "info" : "IfStatement[9354-9422]:IfStatement[9354-9422]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9396-9422]:Block[9396-9422]"
  }, {
    "left" : "min = i;",
    "right" : "min = i;",
    "info" : "ExpressionStatement[9406-9414]:ExpressionStatement[9406-9414]"
  }, {
    "left" : "return min;",
    "right" : "return min;",
    "info" : "ReturnStatement[9433-9444]:ReturnStatement[9433-9444]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[9602-9608]:Modifier[9602-9608]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[9609-9612]:PrimitiveType[9609-9612]"
  }, {
    "left" : "getMaxArguments",
    "right" : "getMaxArguments",
    "info" : "SimpleName[9613-9628]:SimpleName[9613-9628]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9631-9888]:Block[9631-9888]"
  }, {
    "left" : "Node params = getParametersNode();",
    "right" : "Node params = getParametersNode();",
    "info" : "VariableDeclarationStatement[9637-9671]:VariableDeclarationStatement[9637-9671]"
  }, {
    "left" : "if (params != null)",
    "right" : "if (params != null)",
    "info" : "IfStatement[9676-9853]:IfStatement[9676-9853]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9696-9853]:Block[9696-9853]"
  }, {
    "left" : "Node lastParam = params.getLastChild();",
    "right" : "Node lastParam = params.getLastChild();",
    "info" : "VariableDeclarationStatement[9704-9743]:VariableDeclarationStatement[9704-9743]"
  }, {
    "left" : "if (lastParam == null || !lastParam.isVarArgs())",
    "right" : "if (lastParam == null || !lastParam.isVarArgs())",
    "info" : "IfStatement[9750-9847]:IfStatement[9750-9847]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9799-9847]:Block[9799-9847]"
  }, {
    "left" : "return params.getChildCount();",
    "right" : "return params.getChildCount();",
    "info" : "ReturnStatement[9809-9839]:ReturnStatement[9809-9839]"
  }, {
    "left" : "return Integer.MAX_VALUE;",
    "right" : "return Integer.MAX_VALUE;",
    "info" : "ReturnStatement[9859-9884]:ReturnStatement[9859-9884]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[9892-9898]:Modifier[9892-9898]"
  }, {
    "left" : "JSType",
    "right" : "JSType",
    "info" : "SimpleType[9899-9905]:SimpleType[9899-9905]"
  }, {
    "left" : "getReturnType",
    "right" : "getReturnType",
    "info" : "SimpleName[9906-9919]:SimpleName[9906-9919]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9922-9955]:Block[9922-9955]"
  }, {
    "left" : "return call.returnType;",
    "right" : "return call.returnType;",
    "info" : "ReturnStatement[9928-9951]:ReturnStatement[9928-9951]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[9959-9965]:Modifier[9959-9965]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[9966-9973]:PrimitiveType[9966-9973]"
  }, {
    "left" : "isReturnTypeInferred",
    "right" : "isReturnTypeInferred",
    "info" : "SimpleName[9974-9994]:SimpleName[9974-9994]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9997-10038]:Block[9997-10038]"
  }, {
    "left" : "return call.returnTypeInferred;",
    "right" : "return call.returnTypeInferred;",
    "info" : "ReturnStatement[10003-10034]:ReturnStatement[10003-10034]"
  }, {
    "left" : "ArrowType",
    "right" : "ArrowType",
    "info" : "SimpleType[10109-10118]:SimpleType[10109-10118]"
  }, {
    "left" : "getInternalArrowType",
    "right" : "getInternalArrowType",
    "info" : "SimpleName[10119-10139]:SimpleName[10119-10139]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10142-10164]:Block[10142-10164]"
  }, {
    "left" : "return call;",
    "right" : "return call;",
    "info" : "ReturnStatement[10148-10160]:ReturnStatement[10148-10160]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[10168-10177]:MarkerAnnotation[10168-10177]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[10180-10186]:Modifier[10180-10186]"
  }, {
    "left" : "Property",
    "right" : "Property",
    "info" : "SimpleType[10187-10195]:SimpleType[10187-10195]"
  }, {
    "left" : "getSlot",
    "right" : "getSlot",
    "info" : "SimpleName[10196-10203]:SimpleName[10196-10203]"
  }, {
    "left" : "String name",
    "right" : "String name",
    "info" : "SingleVariableDeclaration[10204-10215]:SingleVariableDeclaration[10204-10215]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10217-10414]:Block[10217-10414]"
  }, {
    "left" : "if (\"prototype\".equals(name))",
    "right" : "if (\"prototype\".equals(name))",
    "info" : "IfStatement[10223-10410]:IfStatement[10223-10410]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10253-10363]:Block[10253-10363]"
  }, {
    "left" : "getPrototype();",
    "right" : "getPrototype();",
    "info" : "ExpressionStatement[10314-10329]:ExpressionStatement[10314-10329]"
  }, {
    "left" : "return prototypeSlot;",
    "right" : "return prototypeSlot;",
    "info" : "ReturnStatement[10336-10357]:ReturnStatement[10336-10357]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10369-10410]:Block[10369-10410]"
  }, {
    "left" : "return super.getSlot(name);",
    "right" : "return super.getSlot(name);",
    "info" : "ReturnStatement[10377-10404]:ReturnStatement[10377-10404]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[10554-10563]:MarkerAnnotation[10554-10563]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[10566-10572]:Modifier[10566-10572]"
  }, {
    "left" : "Set<String>",
    "right" : "Set<String>",
    "info" : "ParameterizedType[10573-10584]:ParameterizedType[10573-10584]"
  }, {
    "left" : "getOwnPropertyNames",
    "right" : "getOwnPropertyNames",
    "info" : "SimpleName[10585-10604]:SimpleName[10585-10604]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10607-10831]:Block[10607-10831]"
  }, {
    "left" : "if (prototypeSlot == null)",
    "right" : "if (prototypeSlot == null)",
    "info" : "IfStatement[10613-10827]:IfStatement[10613-10827]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10640-10689]:Block[10640-10689]"
  }, {
    "left" : "return super.getOwnPropertyNames();",
    "right" : "return super.getOwnPropertyNames();",
    "info" : "ReturnStatement[10648-10683]:ReturnStatement[10648-10683]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10695-10827]:Block[10695-10827]"
  }, {
    "left" : "Set<String> names = Sets.newHashSet(\"prototype\");",
    "right" : "Set<String> names = Sets.newHashSet(\"prototype\");",
    "info" : "VariableDeclarationStatement[10703-10752]:VariableDeclarationStatement[10703-10752]"
  }, {
    "left" : "names.addAll(super.getOwnPropertyNames());",
    "right" : "names.addAll(super.getOwnPropertyNames());",
    "info" : "ExpressionStatement[10759-10801]:ExpressionStatement[10759-10801]"
  }, {
    "left" : "return names;",
    "right" : "return names;",
    "info" : "ReturnStatement[10808-10821]:ReturnStatement[10808-10821]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[10989-10995]:Modifier[10989-10995]"
  }, {
    "left" : "ObjectType",
    "right" : "ObjectType",
    "info" : "SimpleType[10996-11006]:SimpleType[10996-11006]"
  }, {
    "left" : "getPrototype",
    "right" : "getPrototype",
    "info" : "SimpleName[11007-11019]:SimpleName[11007-11019]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11022-11852]:Block[11022-11852]"
  }, {
    "left" : "if (prototypeSlot == null)",
    "right" : "if (prototypeSlot == null)",
    "info" : "IfStatement[11078-11799]:IfStatement[11078-11799]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11105-11799]:Block[11105-11799]"
  }, {
    "left" : "String refName = getReferenceName();",
    "right" : "String refName = getReferenceName();",
    "info" : "VariableDeclarationStatement[11113-11149]:VariableDeclarationStatement[11113-11149]"
  }, {
    "left" : "if (refName == null)",
    "right" : "if (refName == null)",
    "info" : "IfStatement[11156-11793]:IfStatement[11156-11793]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11177-11520]:Block[11177-11520]"
  }, {
    "left" : "setPrototypeNoCheck(\n           registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE),\n           null);",
    "right" : "setPrototypeNoCheck(\n           registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE),\n           null);",
    "info" : "ExpressionStatement[11406-11512]:ExpressionStatement[11406-11512]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11526-11793]:Block[11526-11793]"
  }, {
    "left" : "setPrototype(\n            new PrototypeObjectType(\n                registry,\n                this.getReferenceName() + \".prototype\",\n                registry.getNativeObjectType(OBJECT_TYPE),\n                isNativeObjectType()),\n            null);",
    "right" : "setPrototype(\n            new PrototypeObjectType(\n                registry,\n                this.getReferenceName() + \".prototype\",\n                registry.getNativeObjectType(OBJECT_TYPE),\n                isNativeObjectType()),\n            null);",
    "info" : "ExpressionStatement[11536-11785]:ExpressionStatement[11536-11785]"
  }, {
    "left" : "return (ObjectType) prototypeSlot.getType();",
    "right" : "return (ObjectType) prototypeSlot.getType();",
    "info" : "ReturnStatement[11804-11848]:ReturnStatement[11804-11848]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[11990-11996]:Modifier[11990-11996]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[11997-12001]:PrimitiveType[11997-12001]"
  }, {
    "left" : "setPrototypeBasedOn",
    "right" : "setPrototypeBasedOn",
    "info" : "SimpleName[12002-12021]:SimpleName[12002-12021]"
  }, {
    "left" : "ObjectType baseType",
    "right" : "ObjectType baseType",
    "info" : "SingleVariableDeclaration[12022-12041]:SingleVariableDeclaration[12022-12041]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12043-12089]:Block[12043-12089]"
  }, {
    "left" : "setPrototypeBasedOn(baseType, null);",
    "right" : "setPrototypeBasedOn(baseType, null);",
    "info" : "ExpressionStatement[12049-12085]:ExpressionStatement[12049-12085]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[12093-12097]:PrimitiveType[12093-12097]"
  }, {
    "left" : "setPrototypeBasedOn",
    "right" : "setPrototypeBasedOn",
    "info" : "SimpleName[12098-12117]:SimpleName[12098-12117]"
  }, {
    "left" : "ObjectType baseType",
    "right" : "ObjectType baseType",
    "info" : "SingleVariableDeclaration[12118-12137]:SingleVariableDeclaration[12118-12137]"
  }, {
    "left" : "Node propertyNode",
    "right" : "Node propertyNode",
    "info" : "SingleVariableDeclaration[12139-12156]:SingleVariableDeclaration[12139-12156]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12158-13218]:Block[12158-13218]"
  }, {
    "left" : "if (baseType.hasReferenceName() ||\n        isNativeObjectType() ||\n        baseType.isFunctionPrototypeType())",
    "right" : "if (baseType.hasReferenceName() ||\n        isNativeObjectType() ||\n        baseType.isFunctionPrototypeType())",
    "info" : "IfStatement[12940-13172]:IfStatement[12940-13172]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13051-13172]:Block[13051-13172]"
  }, {
    "left" : "baseType = new PrototypeObjectType(\n          registry, this.getReferenceName() + \".prototype\", baseType);",
    "right" : "baseType = new PrototypeObjectType(\n          registry, this.getReferenceName() + \".prototype\", baseType);",
    "info" : "ExpressionStatement[13060-13166]:ExpressionStatement[13060-13166]"
  }, {
    "left" : "setPrototype(baseType, propertyNode);",
    "right" : "setPrototype(baseType, propertyNode);",
    "info" : "ExpressionStatement[13177-13214]:ExpressionStatement[13177-13214]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[13369-13376]:PrimitiveType[13369-13376]"
  }, {
    "left" : "setPrototype",
    "right" : "setPrototype",
    "info" : "SimpleName[13377-13389]:SimpleName[13377-13389]"
  }, {
    "left" : "ObjectType prototype",
    "right" : "ObjectType prototype",
    "info" : "SingleVariableDeclaration[13390-13410]:SingleVariableDeclaration[13390-13410]"
  }, {
    "left" : "Node propertyNode",
    "right" : "Node propertyNode",
    "info" : "SingleVariableDeclaration[13412-13429]:SingleVariableDeclaration[13412-13429]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13431-13701]:Block[13431-13701]"
  }, {
    "left" : "if (prototype == null)",
    "right" : "if (prototype == null)",
    "info" : "IfStatement[13437-13487]:IfStatement[13437-13487]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13460-13487]:Block[13460-13487]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[13468-13481]:ReturnStatement[13468-13481]"
  }, {
    "left" : "if (isConstructor() && prototype == getInstanceType())",
    "right" : "if (isConstructor() && prototype == getInstanceType())",
    "info" : "IfStatement[13558-13640]:IfStatement[13558-13640]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13613-13640]:Block[13613-13640]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[13621-13634]:ReturnStatement[13621-13634]"
  }, {
    "left" : "return setPrototypeNoCheck(prototype, propertyNode);",
    "right" : "return setPrototypeNoCheck(prototype, propertyNode);",
    "info" : "ReturnStatement[13645-13697]:ReturnStatement[13645-13697]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[13765-13772]:Modifier[13765-13772]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[13773-13780]:PrimitiveType[13773-13780]"
  }, {
    "left" : "setPrototypeNoCheck",
    "right" : "setPrototypeNoCheck",
    "info" : "SimpleName[13781-13800]:SimpleName[13781-13800]"
  }, {
    "left" : "ObjectType prototype",
    "right" : "ObjectType prototype",
    "info" : "SingleVariableDeclaration[13801-13821]:SingleVariableDeclaration[13801-13821]"
  }, {
    "left" : "Node propertyNode",
    "right" : "Node propertyNode",
    "info" : "SingleVariableDeclaration[13823-13840]:SingleVariableDeclaration[13823-13840]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13842-14903]:Block[13842-14903]"
  }, {
    "left" : "ObjectType oldPrototype = prototypeSlot == null\n        ? null : (ObjectType) prototypeSlot.getType();",
    "right" : "ObjectType oldPrototype = prototypeSlot == null\n        ? null : (ObjectType) prototypeSlot.getType();",
    "info" : "VariableDeclarationStatement[13848-13950]:VariableDeclarationStatement[13848-13950]"
  }, {
    "left" : "boolean replacedPrototype = oldPrototype != null;",
    "right" : "boolean replacedPrototype = oldPrototype != null;",
    "info" : "VariableDeclarationStatement[13955-14004]:VariableDeclarationStatement[13955-14004]"
  }, {
    "left" : "this.prototypeSlot = new Property(\"prototype\", prototype, true,\n        propertyNode == null ? source : propertyNode);",
    "right" : "this.prototypeSlot = new Property(\"prototype\", prototype, true,\n        propertyNode == null ? source : propertyNode);",
    "info" : "ExpressionStatement[14010-14128]:ExpressionStatement[14010-14128]"
  }, {
    "left" : "prototype.setOwnerFunction(this);",
    "right" : "prototype.setOwnerFunction(this);",
    "info" : "ExpressionStatement[14133-14166]:ExpressionStatement[14133-14166]"
  }, {
    "left" : "if (oldPrototype != null)",
    "right" : "if (oldPrototype != null)",
    "info" : "IfStatement[14172-14388]:IfStatement[14172-14388]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14198-14388]:Block[14198-14388]"
  }, {
    "left" : "oldPrototype.setOwnerFunction(null);",
    "right" : "oldPrototype.setOwnerFunction(null);",
    "info" : "ExpressionStatement[14346-14382]:ExpressionStatement[14346-14382]"
  }, {
    "left" : "if (isConstructor() || isInterface())",
    "right" : "if (isConstructor() || isInterface())",
    "info" : "IfStatement[14394-14818]:IfStatement[14394-14818]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14432-14818]:Block[14432-14818]"
  }, {
    "left" : "FunctionType superClass = getSuperClassConstructor();",
    "right" : "FunctionType superClass = getSuperClassConstructor();",
    "info" : "VariableDeclarationStatement[14440-14493]:VariableDeclarationStatement[14440-14493]"
  }, {
    "left" : "if (superClass != null)",
    "right" : "if (superClass != null)",
    "info" : "IfStatement[14500-14570]:IfStatement[14500-14570]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14524-14570]:Block[14524-14570]"
  }, {
    "left" : "superClass.addSubType(this);",
    "right" : "superClass.addSubType(this);",
    "info" : "ExpressionStatement[14534-14562]:ExpressionStatement[14534-14562]"
  }, {
    "left" : "if (isInterface())",
    "right" : "if (isInterface())",
    "info" : "IfStatement[14578-14812]:IfStatement[14578-14812]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14597-14812]:Block[14597-14812]"
  }, {
    "left" : "for (ObjectType interfaceType : getExtendedInterfaces())",
    "right" : "for (ObjectType interfaceType : getExtendedInterfaces())",
    "info" : "EnhancedForStatement[14607-14804]:EnhancedForStatement[14607-14804]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14664-14804]:Block[14664-14804]"
  }, {
    "left" : "if (interfaceType.getConstructor() != null)",
    "right" : "if (interfaceType.getConstructor() != null)",
    "info" : "IfStatement[14676-14794]:IfStatement[14676-14794]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14720-14794]:Block[14720-14794]"
  }, {
    "left" : "interfaceType.getConstructor().addSubType(this);",
    "right" : "interfaceType.getConstructor().addSubType(this);",
    "info" : "ExpressionStatement[14734-14782]:ExpressionStatement[14734-14782]"
  }, {
    "left" : "if (replacedPrototype)",
    "right" : "if (replacedPrototype)",
    "info" : "IfStatement[14824-14881]:IfStatement[14824-14881]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14847-14881]:Block[14847-14881]"
  }, {
    "left" : "clearCachedValues();",
    "right" : "clearCachedValues();",
    "info" : "ExpressionStatement[14855-14875]:ExpressionStatement[14855-14875]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[14887-14899]:ReturnStatement[14887-14899]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[15130-15136]:Modifier[15130-15136]"
  }, {
    "left" : "Iterable<ObjectType>",
    "right" : "Iterable<ObjectType>",
    "info" : "ParameterizedType[15137-15157]:ParameterizedType[15137-15157]"
  }, {
    "left" : "getAllImplementedInterfaces",
    "right" : "getAllImplementedInterfaces",
    "info" : "SimpleName[15158-15185]:SimpleName[15158-15185]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15188-15473]:Block[15188-15473]"
  }, {
    "left" : "Set<ObjectType> interfaces = Sets.newLinkedHashSet();",
    "right" : "Set<ObjectType> interfaces = Sets.newLinkedHashSet();",
    "info" : "VariableDeclarationStatement[15283-15336]:VariableDeclarationStatement[15283-15336]"
  }, {
    "left" : "for (ObjectType type : getImplementedInterfaces())",
    "right" : "for (ObjectType type : getImplementedInterfaces())",
    "info" : "EnhancedForStatement[15342-15446]:EnhancedForStatement[15342-15446]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15393-15446]:Block[15393-15446]"
  }, {
    "left" : "addRelatedInterfaces(type, interfaces);",
    "right" : "addRelatedInterfaces(type, interfaces);",
    "info" : "ExpressionStatement[15401-15440]:ExpressionStatement[15401-15440]"
  }, {
    "left" : "return interfaces;",
    "right" : "return interfaces;",
    "info" : "ReturnStatement[15451-15469]:ReturnStatement[15451-15469]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[15477-15484]:Modifier[15477-15484]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[15485-15489]:PrimitiveType[15485-15489]"
  }, {
    "left" : "addRelatedInterfaces",
    "right" : "addRelatedInterfaces",
    "info" : "SimpleName[15490-15510]:SimpleName[15490-15510]"
  }, {
    "left" : "ObjectType instance",
    "right" : "ObjectType instance",
    "info" : "SingleVariableDeclaration[15511-15530]:SingleVariableDeclaration[15511-15530]"
  }, {
    "left" : "Set<ObjectType> set",
    "right" : "Set<ObjectType> set",
    "info" : "SingleVariableDeclaration[15532-15551]:SingleVariableDeclaration[15532-15551]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15553-15880]:Block[15553-15880]"
  }, {
    "left" : "FunctionType constructor = instance.getConstructor();",
    "right" : "FunctionType constructor = instance.getConstructor();",
    "info" : "VariableDeclarationStatement[15559-15612]:VariableDeclarationStatement[15559-15612]"
  }, {
    "left" : "if (constructor != null)",
    "right" : "if (constructor != null)",
    "info" : "IfStatement[15617-15876]:IfStatement[15617-15876]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15642-15876]:Block[15642-15876]"
  }, {
    "left" : "if (!constructor.isInterface())",
    "right" : "if (!constructor.isInterface())",
    "info" : "IfStatement[15650-15707]:IfStatement[15650-15707]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15682-15707]:Block[15682-15707]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[15692-15699]:ReturnStatement[15692-15699]"
  }, {
    "left" : "set.add(instance);",
    "right" : "set.add(instance);",
    "info" : "ExpressionStatement[15715-15733]:ExpressionStatement[15715-15733]"
  }, {
    "left" : "for (ObjectType interfaceType : instance.getCtorExtendedInterfaces())",
    "right" : "for (ObjectType interfaceType : instance.getCtorExtendedInterfaces())",
    "info" : "EnhancedForStatement[15741-15870]:EnhancedForStatement[15741-15870]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15811-15870]:Block[15811-15870]"
  }, {
    "left" : "addRelatedInterfaces(interfaceType, set);",
    "right" : "addRelatedInterfaces(interfaceType, set);",
    "info" : "ExpressionStatement[15821-15862]:ExpressionStatement[15821-15862]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[15963-15969]:Modifier[15963-15969]"
  }, {
    "left" : "Iterable<ObjectType>",
    "right" : "Iterable<ObjectType>",
    "info" : "ParameterizedType[15970-15990]:ParameterizedType[15970-15990]"
  }, {
    "left" : "getImplementedInterfaces",
    "right" : "getImplementedInterfaces",
    "info" : "SimpleName[15991-16015]:SimpleName[15991-16015]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16018-16300]:Block[16018-16300]"
  }, {
    "left" : "FunctionType superCtor = isConstructor() ?\n        getSuperClassConstructor() : null;",
    "right" : "FunctionType superCtor = isConstructor() ?\n        getSuperClassConstructor() : null;",
    "info" : "VariableDeclarationStatement[16024-16109]:VariableDeclarationStatement[16024-16109]"
  }, {
    "left" : "if (superCtor == null)",
    "right" : "if (superCtor == null)",
    "info" : "IfStatement[16114-16296]:IfStatement[16114-16296]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16137-16180]:Block[16137-16180]"
  }, {
    "left" : "return implementedInterfaces;",
    "right" : "return implementedInterfaces;",
    "info" : "ReturnStatement[16145-16174]:ReturnStatement[16145-16174]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16186-16296]:Block[16186-16296]"
  }, {
    "left" : "return Iterables.concat(\n          implementedInterfaces, superCtor.getImplementedInterfaces());",
    "right" : "return Iterables.concat(\n          implementedInterfaces, superCtor.getImplementedInterfaces());",
    "info" : "ReturnStatement[16194-16290]:ReturnStatement[16194-16290]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[16367-16373]:Modifier[16367-16373]"
  }, {
    "left" : "Iterable<ObjectType>",
    "right" : "Iterable<ObjectType>",
    "info" : "ParameterizedType[16374-16394]:ParameterizedType[16374-16394]"
  }, {
    "left" : "getOwnImplementedInterfaces",
    "right" : "getOwnImplementedInterfaces",
    "info" : "SimpleName[16395-16422]:SimpleName[16395-16422]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16425-16464]:Block[16425-16464]"
  }, {
    "left" : "return implementedInterfaces;",
    "right" : "return implementedInterfaces;",
    "info" : "ReturnStatement[16431-16460]:ReturnStatement[16431-16460]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[16468-16474]:Modifier[16468-16474]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[16475-16479]:PrimitiveType[16475-16479]"
  }, {
    "left" : "setImplementedInterfaces",
    "right" : "setImplementedInterfaces",
    "info" : "SimpleName[16480-16504]:SimpleName[16480-16504]"
  }, {
    "left" : "List<ObjectType> implementedInterfaces",
    "right" : "List<ObjectType> implementedInterfaces",
    "info" : "SingleVariableDeclaration[16505-16543]:SingleVariableDeclaration[16505-16543]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16545-16910]:Block[16545-16910]"
  }, {
    "left" : "if (isConstructor())",
    "right" : "if (isConstructor())",
    "info" : "IfStatement[16551-16906]:IfStatement[16551-16906]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16572-16844]:Block[16572-16844]"
  }, {
    "left" : "for (ObjectType type : implementedInterfaces)",
    "right" : "for (ObjectType type : implementedInterfaces)",
    "info" : "EnhancedForStatement[16639-16758]:EnhancedForStatement[16639-16758]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16685-16758]:Block[16685-16758]"
  }, {
    "left" : "registry.registerTypeImplementingInterface(this, type);",
    "right" : "registry.registerTypeImplementingInterface(this, type);",
    "info" : "ExpressionStatement[16695-16750]:ExpressionStatement[16695-16750]"
  }, {
    "left" : "this.implementedInterfaces = ImmutableList.copyOf(implementedInterfaces);",
    "right" : "this.implementedInterfaces = ImmutableList.copyOf(implementedInterfaces);",
    "info" : "ExpressionStatement[16765-16838]:ExpressionStatement[16765-16838]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16850-16906]:Block[16850-16906]"
  }, {
    "left" : "throw new UnsupportedOperationException();",
    "right" : "throw new UnsupportedOperationException();",
    "info" : "ThrowStatement[16858-16900]:ThrowStatement[16858-16900]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[17107-17113]:Modifier[17107-17113]"
  }, {
    "left" : "Iterable<ObjectType>",
    "right" : "Iterable<ObjectType>",
    "info" : "ParameterizedType[17114-17134]:ParameterizedType[17114-17134]"
  }, {
    "left" : "getAllExtendedInterfaces",
    "right" : "getAllExtendedInterfaces",
    "info" : "SimpleName[17135-17159]:SimpleName[17135-17159]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17162-17494]:Block[17162-17494]"
  }, {
    "left" : "Set<ObjectType> extendedInterfaces = Sets.newLinkedHashSet();",
    "right" : "Set<ObjectType> extendedInterfaces = Sets.newLinkedHashSet();",
    "info" : "VariableDeclarationStatement[17257-17318]:VariableDeclarationStatement[17257-17318]"
  }, {
    "left" : "for (ObjectType interfaceType : getExtendedInterfaces())",
    "right" : "for (ObjectType interfaceType : getExtendedInterfaces())",
    "info" : "EnhancedForStatement[17324-17459]:EnhancedForStatement[17324-17459]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17381-17459]:Block[17381-17459]"
  }, {
    "left" : "addRelatedExtendedInterfaces(interfaceType, extendedInterfaces);",
    "right" : "addRelatedExtendedInterfaces(interfaceType, extendedInterfaces);",
    "info" : "ExpressionStatement[17389-17453]:ExpressionStatement[17389-17453]"
  }, {
    "left" : "return extendedInterfaces;",
    "right" : "return extendedInterfaces;",
    "info" : "ReturnStatement[17464-17490]:ReturnStatement[17464-17490]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[17498-17505]:Modifier[17498-17505]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[17506-17510]:PrimitiveType[17506-17510]"
  }, {
    "left" : "addRelatedExtendedInterfaces",
    "right" : "addRelatedExtendedInterfaces",
    "info" : "SimpleName[17511-17539]:SimpleName[17511-17539]"
  }, {
    "left" : "ObjectType instance",
    "right" : "ObjectType instance",
    "info" : "SingleVariableDeclaration[17540-17559]:SingleVariableDeclaration[17540-17559]"
  }, {
    "left" : "Set<ObjectType> set",
    "right" : "Set<ObjectType> set",
    "info" : "SingleVariableDeclaration[17567-17586]:SingleVariableDeclaration[17567-17586]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17588-17857]:Block[17588-17857]"
  }, {
    "left" : "FunctionType constructor = instance.getConstructor();",
    "right" : "FunctionType constructor = instance.getConstructor();",
    "info" : "VariableDeclarationStatement[17594-17647]:VariableDeclarationStatement[17594-17647]"
  }, {
    "left" : "if (constructor != null)",
    "right" : "if (constructor != null)",
    "info" : "IfStatement[17652-17853]:IfStatement[17652-17853]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17677-17853]:Block[17677-17853]"
  }, {
    "left" : "set.add(instance);",
    "right" : "set.add(instance);",
    "info" : "ExpressionStatement[17685-17703]:ExpressionStatement[17685-17703]"
  }, {
    "left" : "for (ObjectType interfaceType : constructor.getExtendedInterfaces())",
    "right" : "for (ObjectType interfaceType : constructor.getExtendedInterfaces())",
    "info" : "EnhancedForStatement[17711-17847]:EnhancedForStatement[17711-17847]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17780-17847]:Block[17780-17847]"
  }, {
    "left" : "addRelatedExtendedInterfaces(interfaceType, set);",
    "right" : "addRelatedExtendedInterfaces(interfaceType, set);",
    "info" : "ExpressionStatement[17790-17839]:ExpressionStatement[17790-17839]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[17923-17929]:Modifier[17923-17929]"
  }, {
    "left" : "Iterable<ObjectType>",
    "right" : "Iterable<ObjectType>",
    "info" : "ParameterizedType[17930-17950]:ParameterizedType[17930-17950]"
  }, {
    "left" : "getExtendedInterfaces",
    "right" : "getExtendedInterfaces",
    "info" : "SimpleName[17951-17972]:SimpleName[17951-17972]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17975-18011]:Block[17975-18011]"
  }, {
    "left" : "return extendedInterfaces;",
    "right" : "return extendedInterfaces;",
    "info" : "ReturnStatement[17981-18007]:ReturnStatement[17981-18007]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[18091-18097]:Modifier[18091-18097]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[18098-18101]:PrimitiveType[18098-18101]"
  }, {
    "left" : "getExtendedInterfacesCount",
    "right" : "getExtendedInterfacesCount",
    "info" : "SimpleName[18102-18128]:SimpleName[18102-18128]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18131-18174]:Block[18131-18174]"
  }, {
    "left" : "return extendedInterfaces.size();",
    "right" : "return extendedInterfaces.size();",
    "info" : "ReturnStatement[18137-18170]:ReturnStatement[18137-18170]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[18178-18184]:Modifier[18178-18184]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[18185-18189]:PrimitiveType[18185-18189]"
  }, {
    "left" : "setExtendedInterfaces",
    "right" : "setExtendedInterfaces",
    "info" : "SimpleName[18190-18211]:SimpleName[18190-18211]"
  }, {
    "left" : "List<ObjectType> extendedInterfaces",
    "right" : "List<ObjectType> extendedInterfaces",
    "info" : "SingleVariableDeclaration[18212-18247]:SingleVariableDeclaration[18212-18247]"
  }, {
    "left" : "UnsupportedOperationException",
    "right" : "UnsupportedOperationException",
    "info" : "SimpleType[18260-18289]:SimpleType[18260-18289]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18290-18462]:Block[18290-18462]"
  }, {
    "left" : "if (isInterface())",
    "right" : "if (isInterface())",
    "info" : "IfStatement[18296-18458]:IfStatement[18296-18458]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18315-18396]:Block[18315-18396]"
  }, {
    "left" : "this.extendedInterfaces = ImmutableList.copyOf(extendedInterfaces);",
    "right" : "this.extendedInterfaces = ImmutableList.copyOf(extendedInterfaces);",
    "info" : "ExpressionStatement[18323-18390]:ExpressionStatement[18323-18390]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18402-18458]:Block[18402-18458]"
  }, {
    "left" : "throw new UnsupportedOperationException();",
    "right" : "throw new UnsupportedOperationException();",
    "info" : "ThrowStatement[18410-18452]:ThrowStatement[18410-18452]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[18466-18475]:MarkerAnnotation[18466-18475]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[18478-18484]:Modifier[18478-18484]"
  }, {
    "left" : "JSType",
    "right" : "JSType",
    "info" : "SimpleType[18485-18491]:SimpleType[18485-18491]"
  }, {
    "left" : "getPropertyType",
    "right" : "getPropertyType",
    "info" : "SimpleName[18492-18507]:SimpleName[18492-18507]"
  }, {
    "left" : "String name",
    "right" : "String name",
    "info" : "SingleVariableDeclaration[18508-18519]:SingleVariableDeclaration[18508-18519]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18521-19690]:Block[18521-19690]"
  }, {
    "left" : "if (!hasOwnProperty(name))",
    "right" : "if (!hasOwnProperty(name))",
    "info" : "IfStatement[18527-19645]:IfStatement[18527-19645]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18554-19645]:Block[18554-19645]"
  }, {
    "left" : "boolean isCall = \"call\".equals(name);",
    "right" : "boolean isCall = \"call\".equals(name);",
    "info" : "VariableDeclarationStatement[18628-18665]:VariableDeclarationStatement[18628-18665]"
  }, {
    "left" : "boolean isBind = \"bind\".equals(name);",
    "right" : "boolean isBind = \"bind\".equals(name);",
    "info" : "VariableDeclarationStatement[18672-18709]:VariableDeclarationStatement[18672-18709]"
  }, {
    "left" : "if (isCall || isBind)",
    "right" : "if (isCall || isBind)",
    "info" : "IfStatement[18716-19639]:IfStatement[18716-19639]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18738-18825]:Block[18738-18825]"
  }, {
    "left" : "defineDeclaredProperty(name, getCallOrBindSignature(isCall), source);",
    "right" : "defineDeclaredProperty(name, getCallOrBindSignature(isCall), source);",
    "info" : "ExpressionStatement[18748-18817]:ExpressionStatement[18748-18817]"
  }, {
    "left" : "if (\"apply\".equals(name))",
    "right" : "if (\"apply\".equals(name))",
    "info" : "IfStatement[18831-19639]:IfStatement[18831-19639]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18857-19639]:Block[18857-19639]"
  }, {
    "left" : "FunctionParamBuilder builder = new FunctionParamBuilder(registry);",
    "right" : "FunctionParamBuilder builder = new FunctionParamBuilder(registry);",
    "info" : "VariableDeclarationStatement[18914-18980]:VariableDeclarationStatement[18914-18980]"
  }, {
    "left" : "builder.addOptionalParams(\n            registry.createNullableType(getTypeOfThis()),\n            registry.createNullableType(\n                registry.getNativeType(JSTypeNative.OBJECT_TYPE)));",
    "right" : "builder.addOptionalParams(\n            registry.createNullableType(getTypeOfThis()),\n            registry.createNullableType(\n                registry.getNativeType(JSTypeNative.OBJECT_TYPE)));",
    "info" : "ExpressionStatement[19237-19430]:ExpressionStatement[19237-19430]"
  }, {
    "left" : "defineDeclaredProperty(name,\n            new FunctionBuilder(registry)\n            .withParams(builder)\n            .withReturnType(getReturnType())\n            .build(),\n            source);",
    "right" : "defineDeclaredProperty(name,\n            new FunctionBuilder(registry)\n            .withParams(builder)\n            .withReturnType(getReturnType())\n            .build(),\n            source);",
    "info" : "ExpressionStatement[19440-19631]:ExpressionStatement[19440-19631]"
  }, {
    "left" : "return super.getPropertyType(name);",
    "right" : "return super.getPropertyType(name);",
    "info" : "ReturnStatement[19651-19686]:ReturnStatement[19651-19686]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[19902-19908]:Modifier[19902-19908]"
  }, {
    "left" : "FunctionType",
    "right" : "FunctionType",
    "info" : "SimpleType[19909-19921]:SimpleType[19909-19921]"
  }, {
    "left" : "getBindReturnType",
    "right" : "getBindReturnType",
    "info" : "SimpleName[19922-19939]:SimpleName[19922-19939]"
  }, {
    "left" : "int argsToBind",
    "right" : "int argsToBind",
    "info" : "SingleVariableDeclaration[19940-19954]:SingleVariableDeclaration[19940-19954]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19956-20506]:Block[19956-20506]"
  }, {
    "left" : "FunctionBuilder builder = new FunctionBuilder(registry)\n        .withReturnType(getReturnType());",
    "right" : "FunctionBuilder builder = new FunctionBuilder(registry)\n        .withReturnType(getReturnType());",
    "info" : "VariableDeclarationStatement[19962-20059]:VariableDeclarationStatement[19962-20059]"
  }, {
    "left" : "if (argsToBind >= 0)",
    "right" : "if (argsToBind >= 0)",
    "info" : "IfStatement[20064-20474]:IfStatement[20064-20474]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20085-20474]:Block[20085-20474]"
  }, {
    "left" : "Node origParams = getParametersNode();",
    "right" : "Node origParams = getParametersNode();",
    "info" : "VariableDeclarationStatement[20093-20131]:VariableDeclarationStatement[20093-20131]"
  }, {
    "left" : "if (origParams != null)",
    "right" : "if (origParams != null)",
    "info" : "IfStatement[20138-20468]:IfStatement[20138-20468]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20162-20468]:Block[20162-20468]"
  }, {
    "left" : "Node params = origParams.cloneTree();",
    "right" : "Node params = origParams.cloneTree();",
    "info" : "VariableDeclarationStatement[20172-20209]:VariableDeclarationStatement[20172-20209]"
  }, {
    "left" : "for (int i = 1; i < argsToBind && params.getFirstChild() != null; i++)",
    "right" : "for (int i = 1; i < argsToBind && params.getFirstChild() != null; i++)",
    "info" : "ForStatement[20218-20420]:ForStatement[20218-20420]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20289-20420]:Block[20289-20420]"
  }, {
    "left" : "if (params.getFirstChild().isVarArgs())",
    "right" : "if (params.getFirstChild().isVarArgs())",
    "info" : "IfStatement[20301-20373]:IfStatement[20301-20373]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20341-20373]:Block[20341-20373]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[20355-20361]:BreakStatement[20355-20361]"
  }, {
    "left" : "params.removeFirstChild();",
    "right" : "params.removeFirstChild();",
    "info" : "ExpressionStatement[20384-20410]:ExpressionStatement[20384-20410]"
  }, {
    "left" : "builder.withParamsNode(params);",
    "right" : "builder.withParamsNode(params);",
    "info" : "ExpressionStatement[20429-20460]:ExpressionStatement[20429-20460]"
  }, {
    "left" : "return builder.build();",
    "right" : "return builder.build();",
    "info" : "ReturnStatement[20479-20502]:ReturnStatement[20479-20502]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[20674-20681]:Modifier[20674-20681]"
  }, {
    "left" : "FunctionType",
    "right" : "FunctionType",
    "info" : "SimpleType[20682-20694]:SimpleType[20682-20694]"
  }, {
    "left" : "getCallOrBindSignature",
    "right" : "getCallOrBindSignature",
    "info" : "SimpleName[20695-20717]:SimpleName[20695-20717]"
  }, {
    "left" : "boolean isCall",
    "right" : "boolean isCall",
    "info" : "SingleVariableDeclaration[20718-20732]:SingleVariableDeclaration[20718-20732]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20734-21645]:Block[20734-21645]"
  }, {
    "left" : "boolean isBind = !isCall;",
    "right" : "boolean isBind = !isCall;",
    "info" : "VariableDeclarationStatement[20740-20765]:VariableDeclarationStatement[20740-20765]"
  }, {
    "left" : "FunctionBuilder builder = new FunctionBuilder(registry)\n        .withReturnType(isCall ? getReturnType() : getBindReturnType(-1));",
    "right" : "FunctionBuilder builder = new FunctionBuilder(registry)\n        .withReturnType(isCall ? getReturnType() : getBindReturnType(-1));",
    "info" : "VariableDeclarationStatement[20770-20900]:VariableDeclarationStatement[20770-20900]"
  }, {
    "left" : "Node origParams = getParametersNode();",
    "right" : "Node origParams = getParametersNode();",
    "info" : "VariableDeclarationStatement[20906-20944]:VariableDeclarationStatement[20906-20944]"
  }, {
    "left" : "if (origParams != null)",
    "right" : "if (origParams != null)",
    "info" : "IfStatement[20949-21612]:IfStatement[20949-21612]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20973-21612]:Block[20973-21612]"
  }, {
    "left" : "Node params = origParams.cloneTree();",
    "right" : "Node params = origParams.cloneTree();",
    "info" : "VariableDeclarationStatement[20981-21018]:VariableDeclarationStatement[20981-21018]"
  }, {
    "left" : "Node thisTypeNode = Node.newString(Token.NAME, \"thisType\");",
    "right" : "Node thisTypeNode = Node.newString(Token.NAME, \"thisType\");",
    "info" : "VariableDeclarationStatement[21026-21085]:VariableDeclarationStatement[21026-21085]"
  }, {
    "left" : "thisTypeNode.setJSType(\n          registry.createOptionalNullableType(getTypeOfThis()));",
    "right" : "thisTypeNode.setJSType(\n          registry.createOptionalNullableType(getTypeOfThis()));",
    "info" : "ExpressionStatement[21092-21180]:ExpressionStatement[21092-21180]"
  }, {
    "left" : "params.addChildToFront(thisTypeNode);",
    "right" : "params.addChildToFront(thisTypeNode);",
    "info" : "ExpressionStatement[21187-21224]:ExpressionStatement[21187-21224]"
  }, {
    "left" : "thisTypeNode.setOptionalArg(isCall);",
    "right" : "thisTypeNode.setOptionalArg(isCall);",
    "info" : "ExpressionStatement[21231-21267]:ExpressionStatement[21231-21267]"
  }, {
    "left" : "if (isBind)",
    "right" : "if (isBind)",
    "info" : "IfStatement[21275-21567]:IfStatement[21275-21567]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21287-21567]:Block[21287-21567]"
  }, {
    "left" : "for (Node current = thisTypeNode.getNext();\n             current != null; current = current.getNext())",
    "right" : "for (Node current = thisTypeNode.getNext();\n             current != null; current = current.getNext())",
    "info" : "ForStatement[21405-21559]:ForStatement[21405-21559]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21508-21559]:Block[21508-21559]"
  }, {
    "left" : "current.setOptionalArg(true);",
    "right" : "current.setOptionalArg(true);",
    "info" : "ExpressionStatement[21520-21549]:ExpressionStatement[21520-21549]"
  }, {
    "left" : "builder.withParamsNode(params);",
    "right" : "builder.withParamsNode(params);",
    "info" : "ExpressionStatement[21575-21606]:ExpressionStatement[21575-21606]"
  }, {
    "left" : "return builder.build();",
    "right" : "return builder.build();",
    "info" : "ReturnStatement[21618-21641]:ReturnStatement[21618-21641]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[21649-21658]:MarkerAnnotation[21649-21658]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[21661-21668]:PrimitiveType[21661-21668]"
  }, {
    "left" : "defineProperty",
    "right" : "defineProperty",
    "info" : "SimpleName[21669-21683]:SimpleName[21669-21683]"
  }, {
    "left" : "String name",
    "right" : "String name",
    "info" : "SingleVariableDeclaration[21684-21695]:SingleVariableDeclaration[21684-21695]"
  }, {
    "left" : "JSType type",
    "right" : "JSType type",
    "info" : "SingleVariableDeclaration[21697-21708]:SingleVariableDeclaration[21697-21708]"
  }, {
    "left" : "boolean inferred",
    "right" : "boolean inferred",
    "info" : "SingleVariableDeclaration[21716-21732]:SingleVariableDeclaration[21716-21732]"
  }, {
    "left" : "Node propertyNode",
    "right" : "Node propertyNode",
    "info" : "SingleVariableDeclaration[21734-21751]:SingleVariableDeclaration[21734-21751]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21753-22202]:Block[21753-22202]"
  }, {
    "left" : "if (\"prototype\".equals(name))",
    "right" : "if (\"prototype\".equals(name))",
    "info" : "IfStatement[21759-22129]:IfStatement[21759-22129]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21789-22129]:Block[21789-22129]"
  }, {
    "left" : "ObjectType objType = type.toObjectType();",
    "right" : "ObjectType objType = type.toObjectType();",
    "info" : "VariableDeclarationStatement[21797-21838]:VariableDeclarationStatement[21797-21838]"
  }, {
    "left" : "if (objType != null)",
    "right" : "if (objType != null)",
    "info" : "IfStatement[21845-22123]:IfStatement[21845-22123]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21866-22086]:Block[21866-22086]"
  }, {
    "left" : "if (prototypeSlot != null &&\n            objType.isEquivalentTo(prototypeSlot.getType()))",
    "right" : "if (prototypeSlot != null &&\n            objType.isEquivalentTo(prototypeSlot.getType()))",
    "info" : "IfStatement[21876-22000]:IfStatement[21876-22000]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21966-22000]:Block[21966-22000]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[21978-21990]:ReturnStatement[21978-21990]"
  }, {
    "left" : "this.setPrototypeBasedOn(objType, propertyNode);",
    "right" : "this.setPrototypeBasedOn(objType, propertyNode);",
    "info" : "ExpressionStatement[22009-22057]:ExpressionStatement[22009-22057]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[22066-22078]:ReturnStatement[22066-22078]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22092-22123]:Block[22092-22123]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[22102-22115]:ReturnStatement[22102-22115]"
  }, {
    "left" : "return super.defineProperty(name, type, inferred, propertyNode);",
    "right" : "return super.defineProperty(name, type, inferred, propertyNode);",
    "info" : "ReturnStatement[22134-22198]:ReturnStatement[22134-22198]"
  }, {
    "left" : "FunctionType",
    "right" : "FunctionType",
    "info" : "SimpleType[22551-22563]:SimpleType[22551-22563]"
  }, {
    "left" : "supAndInfHelper",
    "right" : "supAndInfHelper",
    "info" : "SimpleName[22564-22579]:SimpleName[22564-22579]"
  }, {
    "left" : "FunctionType that",
    "right" : "FunctionType that",
    "info" : "SingleVariableDeclaration[22580-22597]:SingleVariableDeclaration[22580-22597]"
  }, {
    "left" : "boolean leastSuper",
    "right" : "boolean leastSuper",
    "info" : "SingleVariableDeclaration[22599-22617]:SingleVariableDeclaration[22599-22617]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22619-25633]:Block[22619-25633]"
  }, {
    "left" : "Preconditions.checkNotNull(that);",
    "right" : "Preconditions.checkNotNull(that);",
    "info" : "ExpressionStatement[23568-23601]:ExpressionStatement[23568-23601]"
  }, {
    "left" : "if (isEquivalentTo(that))",
    "right" : "if (isEquivalentTo(that))",
    "info" : "IfStatement[23607-23659]:IfStatement[23607-23659]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23633-23659]:Block[23633-23659]"
  }, {
    "left" : "return this;",
    "right" : "return this;",
    "info" : "ReturnStatement[23641-23653]:ReturnStatement[23641-23653]"
  }, {
    "left" : "if (isOrdinaryFunction() && that.isOrdinaryFunction() &&\n        !this.call.hasUnknownParamsOrReturn() &&\n        !that.call.hasUnknownParamsOrReturn())",
    "right" : "if (isOrdinaryFunction() && that.isOrdinaryFunction() &&\n        !this.call.hasUnknownParamsOrReturn() &&\n        !that.call.hasUnknownParamsOrReturn())",
    "info" : "IfStatement[23897-24635]:IfStatement[23897-24635]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24050-24635]:Block[24050-24635]"
  }, {
    "left" : "boolean isSubtypeOfThat = this.isSubtype(that);",
    "right" : "boolean isSubtypeOfThat = this.isSubtype(that);",
    "info" : "VariableDeclarationStatement[24151-24198]:VariableDeclarationStatement[24151-24198]"
  }, {
    "left" : "boolean isSubtypeOfThis = that.isSubtype(this);",
    "right" : "boolean isSubtypeOfThis = that.isSubtype(this);",
    "info" : "VariableDeclarationStatement[24205-24252]:VariableDeclarationStatement[24205-24252]"
  }, {
    "left" : "if (isSubtypeOfThat && !isSubtypeOfThis)",
    "right" : "if (isSubtypeOfThat && !isSubtypeOfThis)",
    "info" : "IfStatement[24259-24447]:IfStatement[24259-24447]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24300-24350]:Block[24300-24350]"
  }, {
    "left" : "return leastSuper ? that : this;",
    "right" : "return leastSuper ? that : this;",
    "info" : "ReturnStatement[24310-24342]:ReturnStatement[24310-24342]"
  }, {
    "left" : "if (isSubtypeOfThis && !isSubtypeOfThat)",
    "right" : "if (isSubtypeOfThis && !isSubtypeOfThat)",
    "info" : "IfStatement[24356-24447]:IfStatement[24356-24447]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24397-24447]:Block[24397-24447]"
  }, {
    "left" : "return leastSuper ? this : that;",
    "right" : "return leastSuper ? this : that;",
    "info" : "ReturnStatement[24407-24439]:ReturnStatement[24407-24439]"
  }, {
    "left" : "FunctionType merged = tryMergeFunctionPiecewise(that, leastSuper);",
    "right" : "FunctionType merged = tryMergeFunctionPiecewise(that, leastSuper);",
    "info" : "VariableDeclarationStatement[24504-24570]:VariableDeclarationStatement[24504-24570]"
  }, {
    "left" : "if (merged != null)",
    "right" : "if (merged != null)",
    "info" : "IfStatement[24577-24629]:IfStatement[24577-24629]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24597-24629]:Block[24597-24629]"
  }, {
    "left" : "return merged;",
    "right" : "return merged;",
    "info" : "ReturnStatement[24607-24621]:ReturnStatement[24607-24621]"
  }, {
    "left" : "JSType functionInstance = registry.getNativeType(\n        JSTypeNative.FUNCTION_INSTANCE_TYPE);",
    "right" : "JSType functionInstance = registry.getNativeType(\n        JSTypeNative.FUNCTION_INSTANCE_TYPE);",
    "info" : "VariableDeclarationStatement[24742-24837]:VariableDeclarationStatement[24742-24837]"
  }, {
    "left" : "if (functionInstance.isEquivalentTo(that))",
    "right" : "if (functionInstance.isEquivalentTo(that))",
    "info" : "IfStatement[24842-25026]:IfStatement[24842-25026]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24885-24931]:Block[24885-24931]"
  }, {
    "left" : "return leastSuper ? that : this;",
    "right" : "return leastSuper ? that : this;",
    "info" : "ReturnStatement[24893-24925]:ReturnStatement[24893-24925]"
  }, {
    "left" : "if (functionInstance.isEquivalentTo(this))",
    "right" : "if (functionInstance.isEquivalentTo(this))",
    "info" : "IfStatement[24937-25026]:IfStatement[24937-25026]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24980-25026]:Block[24980-25026]"
  }, {
    "left" : "return leastSuper ? this : that;",
    "right" : "return leastSuper ? this : that;",
    "info" : "ReturnStatement[24988-25020]:ReturnStatement[24988-25020]"
  }, {
    "left" : "FunctionType greatestFn =\n        registry.getNativeFunctionType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);",
    "right" : "FunctionType greatestFn =\n        registry.getNativeFunctionType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);",
    "info" : "VariableDeclarationStatement[25382-25482]:VariableDeclarationStatement[25382-25482]"
  }, {
    "left" : "FunctionType leastFn =\n        registry.getNativeFunctionType(JSTypeNative.LEAST_FUNCTION_TYPE);",
    "right" : "FunctionType leastFn =\n        registry.getNativeFunctionType(JSTypeNative.LEAST_FUNCTION_TYPE);",
    "info" : "VariableDeclarationStatement[25487-25583]:VariableDeclarationStatement[25487-25583]"
  }, {
    "left" : "return leastSuper ? greatestFn : leastFn;",
    "right" : "return leastSuper ? greatestFn : leastFn;",
    "info" : "ReturnStatement[25588-25629]:ReturnStatement[25588-25629]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[25739-25746]:Modifier[25739-25746]"
  }, {
    "left" : "FunctionType",
    "right" : "FunctionType",
    "info" : "SimpleType[25747-25759]:SimpleType[25747-25759]"
  }, {
    "left" : "tryMergeFunctionPiecewise",
    "right" : "tryMergeFunctionPiecewise",
    "info" : "SimpleName[25760-25785]:SimpleName[25760-25785]"
  }, {
    "left" : "FunctionType other",
    "right" : "FunctionType other",
    "info" : "SingleVariableDeclaration[25793-25811]:SingleVariableDeclaration[25793-25811]"
  }, {
    "left" : "boolean leastSuper",
    "right" : "boolean leastSuper",
    "info" : "SingleVariableDeclaration[25813-25831]:SingleVariableDeclaration[25813-25831]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25833-27233]:Block[25833-27254]"
  }, {
    "left" : "Node newParamsNode = null;",
    "right" : "Node newParamsNode = null;",
    "info" : "VariableDeclarationStatement[25839-25865]:VariableDeclarationStatement[25839-25865]"
  }, {
    "left" : "if (call.hasEqualParameters(other.call, false))",
    "right" : "if (call.hasEqualParameters(other.call, EquivalenceMethod.IDENTITY))",
    "info" : "IfStatement[25870-26127]:IfStatement[25870-26148]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25918-25964]:Block[25939-25985]"
  }, {
    "left" : "newParamsNode = call.parameters;",
    "right" : "newParamsNode = call.parameters;",
    "info" : "ExpressionStatement[25926-25958]:ExpressionStatement[25947-25979]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25970-26127]:Block[25991-26148]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[26109-26121]:ReturnStatement[26130-26142]"
  }, {
    "left" : "JSType newReturnType = leastSuper ?\n        call.returnType.getLeastSupertype(other.call.returnType) :\n        call.returnType.getGreatestSubtype(other.call.returnType);",
    "right" : "JSType newReturnType = leastSuper ?\n        call.returnType.getLeastSupertype(other.call.returnType) :\n        call.returnType.getGreatestSubtype(other.call.returnType);",
    "info" : "VariableDeclarationStatement[26133-26302]:VariableDeclarationStatement[26154-26323]"
  }, {
    "left" : "ObjectType newTypeOfThis = null;",
    "right" : "ObjectType newTypeOfThis = null;",
    "info" : "VariableDeclarationStatement[26308-26340]:VariableDeclarationStatement[26329-26361]"
  }, {
    "left" : "if (isEquivalent(typeOfThis, other.typeOfThis))",
    "right" : "if (isEquivalent(typeOfThis, other.typeOfThis))",
    "info" : "IfStatement[26345-26923]:IfStatement[26366-26944]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26393-26434]:Block[26414-26455]"
  }, {
    "left" : "newTypeOfThis = typeOfThis;",
    "right" : "newTypeOfThis = typeOfThis;",
    "info" : "ExpressionStatement[26401-26428]:ExpressionStatement[26422-26449]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26440-26923]:Block[26461-26944]"
  }, {
    "left" : "JSType maybeNewTypeOfThis = leastSuper ?\n          typeOfThis.getLeastSupertype(other.typeOfThis) :\n          typeOfThis.getGreatestSubtype(other.typeOfThis);",
    "right" : "JSType maybeNewTypeOfThis = leastSuper ?\n          typeOfThis.getLeastSupertype(other.typeOfThis) :\n          typeOfThis.getGreatestSubtype(other.typeOfThis);",
    "info" : "VariableDeclarationStatement[26448-26606]:VariableDeclarationStatement[26469-26627]"
  }, {
    "left" : "if (maybeNewTypeOfThis instanceof ObjectType)",
    "right" : "if (maybeNewTypeOfThis instanceof ObjectType)",
    "info" : "IfStatement[26613-26917]:IfStatement[26634-26938]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26659-26725]:Block[26680-26746]"
  }, {
    "left" : "newTypeOfThis = (ObjectType) maybeNewTypeOfThis;",
    "right" : "newTypeOfThis = (ObjectType) maybeNewTypeOfThis;",
    "info" : "ExpressionStatement[26669-26717]:ExpressionStatement[26690-26738]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26731-26917]:Block[26752-26938]"
  }, {
    "left" : "newTypeOfThis = leastSuper ?\n            registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE) :\n            registry.getNativeObjectType(JSTypeNative.NO_OBJECT_TYPE);",
    "right" : "newTypeOfThis = leastSuper ?\n            registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE) :\n            registry.getNativeObjectType(JSTypeNative.NO_OBJECT_TYPE);",
    "info" : "ExpressionStatement[26741-26909]:ExpressionStatement[26762-26930]"
  }, {
    "left" : "boolean newReturnTypeInferred =\n        call.returnTypeInferred || other.call.returnTypeInferred;",
    "right" : "boolean newReturnTypeInferred =\n        call.returnTypeInferred || other.call.returnTypeInferred;",
    "info" : "VariableDeclarationStatement[26929-27026]:VariableDeclarationStatement[26950-27047]"
  }, {
    "left" : "return new FunctionType(\n        registry, null, null,\n        new ArrowType(\n            registry, newParamsNode, newReturnType, newReturnTypeInferred),\n        newTypeOfThis, null, false, false);",
    "right" : "return new FunctionType(\n        registry, null, null,\n        new ArrowType(\n            registry, newParamsNode, newReturnType, newReturnTypeInferred),\n        newTypeOfThis, null, false, false);",
    "info" : "ReturnStatement[27032-27229]:ReturnStatement[27053-27250]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[27364-27370]:Modifier[27385-27391]"
  }, {
    "left" : "FunctionType",
    "right" : "FunctionType",
    "info" : "SimpleType[27371-27383]:SimpleType[27392-27404]"
  }, {
    "left" : "getSuperClassConstructor",
    "right" : "getSuperClassConstructor",
    "info" : "SimpleName[27384-27408]:SimpleName[27405-27429]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27411-27681]:Block[27432-27702]"
  }, {
    "left" : "Preconditions.checkArgument(isConstructor() || isInterface());",
    "right" : "Preconditions.checkArgument(isConstructor() || isInterface());",
    "info" : "ExpressionStatement[27417-27479]:ExpressionStatement[27438-27500]"
  }, {
    "left" : "ObjectType maybeSuperInstanceType = getPrototype().getImplicitPrototype();",
    "right" : "ObjectType maybeSuperInstanceType = getPrototype().getImplicitPrototype();",
    "info" : "VariableDeclarationStatement[27484-27558]:VariableDeclarationStatement[27505-27579]"
  }, {
    "left" : "if (maybeSuperInstanceType == null)",
    "right" : "if (maybeSuperInstanceType == null)",
    "info" : "IfStatement[27563-27625]:IfStatement[27584-27646]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27599-27625]:Block[27620-27646]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[27607-27619]:ReturnStatement[27628-27640]"
  }, {
    "left" : "return maybeSuperInstanceType.getConstructor();",
    "right" : "return maybeSuperInstanceType.getConstructor();",
    "info" : "ReturnStatement[27630-27677]:ReturnStatement[27651-27698]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[27835-27841]:Modifier[27856-27862]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[27842-27848]:Modifier[27863-27869]"
  }, {
    "left" : "ObjectType",
    "right" : "ObjectType",
    "info" : "SimpleType[27849-27859]:SimpleType[27870-27880]"
  }, {
    "left" : "getTopDefiningInterface",
    "right" : "getTopDefiningInterface",
    "info" : "SimpleName[27860-27883]:SimpleName[27881-27904]"
  }, {
    "left" : "ObjectType type",
    "right" : "ObjectType type",
    "info" : "SingleVariableDeclaration[27884-27899]:SingleVariableDeclaration[27905-27920]"
  }, {
    "left" : "String propertyName",
    "right" : "String propertyName",
    "info" : "SingleVariableDeclaration[27907-27926]:SingleVariableDeclaration[27928-27947]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27928-28273]:Block[27949-28294]"
  }, {
    "left" : "ObjectType foundType = null;",
    "right" : "ObjectType foundType = null;",
    "info" : "VariableDeclarationStatement[27934-27962]:VariableDeclarationStatement[27955-27983]"
  }, {
    "left" : "if (type.hasProperty(propertyName))",
    "right" : "if (type.hasProperty(propertyName))",
    "info" : "IfStatement[27967-28034]:IfStatement[27988-28055]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28003-28034]:Block[28024-28055]"
  }, {
    "left" : "foundType = type;",
    "right" : "foundType = type;",
    "info" : "ExpressionStatement[28011-28028]:ExpressionStatement[28032-28049]"
  }, {
    "left" : "for (ObjectType interfaceType : type.getCtorExtendedInterfaces())",
    "right" : "for (ObjectType interfaceType : type.getCtorExtendedInterfaces())",
    "info" : "EnhancedForStatement[28039-28247]:EnhancedForStatement[28060-28268]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28105-28247]:Block[28126-28268]"
  }, {
    "left" : "if (interfaceType.hasProperty(propertyName))",
    "right" : "if (interfaceType.hasProperty(propertyName))",
    "info" : "IfStatement[28113-28241]:IfStatement[28134-28262]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28158-28241]:Block[28179-28262]"
  }, {
    "left" : "foundType = getTopDefiningInterface(interfaceType, propertyName);",
    "right" : "foundType = getTopDefiningInterface(interfaceType, propertyName);",
    "info" : "ExpressionStatement[28168-28233]:ExpressionStatement[28189-28254]"
  }, {
    "left" : "return foundType;",
    "right" : "return foundType;",
    "info" : "ReturnStatement[28252-28269]:ReturnStatement[28273-28290]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[28451-28457]:Modifier[28472-28478]"
  }, {
    "left" : "ObjectType",
    "right" : "ObjectType",
    "info" : "SimpleType[28458-28468]:SimpleType[28479-28489]"
  }, {
    "left" : "getTopMostDefiningType",
    "right" : "getTopMostDefiningType",
    "info" : "SimpleName[28469-28491]:SimpleName[28490-28512]"
  }, {
    "left" : "String propertyName",
    "right" : "String propertyName",
    "info" : "SingleVariableDeclaration[28492-28511]:SingleVariableDeclaration[28513-28532]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28513-29055]:Block[28534-29076]"
  }, {
    "left" : "Preconditions.checkState(isConstructor() || isInterface());",
    "right" : "Preconditions.checkState(isConstructor() || isInterface());",
    "info" : "ExpressionStatement[28519-28578]:ExpressionStatement[28540-28599]"
  }, {
    "left" : "Preconditions.checkArgument(getInstanceType().hasProperty(propertyName));",
    "right" : "Preconditions.checkArgument(getInstanceType().hasProperty(propertyName));",
    "info" : "ExpressionStatement[28583-28656]:ExpressionStatement[28604-28677]"
  }, {
    "left" : "FunctionType ctor = this;",
    "right" : "FunctionType ctor = this;",
    "info" : "VariableDeclarationStatement[28661-28686]:VariableDeclarationStatement[28682-28707]"
  }, {
    "left" : "if (isInterface())",
    "right" : "if (isInterface())",
    "info" : "IfStatement[28692-28794]:IfStatement[28713-28815]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28711-28794]:Block[28732-28815]"
  }, {
    "left" : "return getTopDefiningInterface(this.getInstanceType(), propertyName);",
    "right" : "return getTopDefiningInterface(this.getInstanceType(), propertyName);",
    "info" : "ReturnStatement[28719-28788]:ReturnStatement[28740-28809]"
  }, {
    "left" : "ObjectType topInstanceType = null;",
    "right" : "ObjectType topInstanceType = null;",
    "info" : "VariableDeclarationStatement[28800-28834]:VariableDeclarationStatement[28821-28855]"
  }, {
    "left" : "do{...}",
    "right" : "do{...}",
    "info" : "DoStatement[28839-29022]:DoStatement[28860-29043]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28842-28943]:Block[28863-28964]"
  }, {
    "left" : "topInstanceType = ctor.getInstanceType();",
    "right" : "topInstanceType = ctor.getInstanceType();",
    "info" : "ExpressionStatement[28850-28891]:ExpressionStatement[28871-28912]"
  }, {
    "left" : "ctor = ctor.getSuperClassConstructor();",
    "right" : "ctor = ctor.getSuperClassConstructor();",
    "info" : "ExpressionStatement[28898-28937]:ExpressionStatement[28919-28958]"
  }, {
    "left" : "return topInstanceType;",
    "right" : "return topInstanceType;",
    "info" : "ReturnStatement[29028-29051]:ReturnStatement[29049-29072]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[29218-29225]:PrimitiveType[29239-29246]"
  }, {
    "left" : "checkFunctionEquivalenceHelper",
    "right" : "checkFunctionEquivalenceHelper",
    "info" : "SimpleName[29226-29256]:SimpleName[29247-29277]"
  }, {
    "left" : "FunctionType that",
    "right" : "FunctionType that",
    "info" : "SingleVariableDeclaration[29264-29281]:SingleVariableDeclaration[29285-29302]"
  }, {
    "left" : "boolean tolerateUnknowns",
    "right" : "EquivalenceMethod eqMethod",
    "info" : "SingleVariableDeclaration[29283-29307]:SingleVariableDeclaration[29304-29330]"
  }, {
    "left" : "tolerateUnknowns",
    "right" : "eqMethod",
    "info" : "SimpleName[29291-29307]:SimpleName[29322-29330]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29309-29816]:Block[29332-29823]"
  }, {
    "left" : "if (isConstructor())",
    "right" : "if (isConstructor())",
    "info" : "IfStatement[29315-29434]:IfStatement[29338-29457]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29336-29434]:Block[29359-29457]"
  }, {
    "left" : "if (that.isConstructor())",
    "right" : "if (that.isConstructor())",
    "info" : "IfStatement[29344-29408]:IfStatement[29367-29431]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29370-29408]:Block[29393-29431]"
  }, {
    "left" : "return this == that;",
    "right" : "return this == that;",
    "info" : "ReturnStatement[29380-29400]:ReturnStatement[29403-29423]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[29415-29428]:ReturnStatement[29438-29451]"
  }, {
    "left" : "if (isInterface())",
    "right" : "if (isInterface())",
    "info" : "IfStatement[29439-29592]:IfStatement[29462-29615]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29458-29592]:Block[29481-29615]"
  }, {
    "left" : "if (that.isInterface())",
    "right" : "if (that.isInterface())",
    "info" : "IfStatement[29466-29566]:IfStatement[29489-29589]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29490-29566]:Block[29513-29589]"
  }, {
    "left" : "return getReferenceName().equals(that.getReferenceName());",
    "right" : "return getReferenceName().equals(that.getReferenceName());",
    "info" : "ReturnStatement[29500-29558]:ReturnStatement[29523-29581]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[29573-29586]:ReturnStatement[29596-29609]"
  }, {
    "left" : "if (that.isInterface())",
    "right" : "if (that.isInterface())",
    "info" : "IfStatement[29597-29648]:IfStatement[29620-29671]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29621-29648]:Block[29644-29671]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[29629-29642]:ReturnStatement[29652-29665]"
  }, {
    "left" : "return typeOfThis.checkEquivalenceHelper(\n        that.typeOfThis, tolerateUnknowns) &&\n        call.checkArrowEquivalenceHelper(that.call, tolerateUnknowns);",
    "right" : "return typeOfThis.checkEquivalenceHelper(\n        that.typeOfThis, eqMethod) &&\n        call.checkArrowEquivalenceHelper(that.call, eqMethod);",
    "info" : "ReturnStatement[29654-29812]:ReturnStatement[29677-29819]"
  }, {
    "left" : "tolerateUnknowns",
    "right" : "eqMethod",
    "info" : "SimpleName[29721-29737]:SimpleName[29744-29752]"
  }, {
    "left" : "tolerateUnknowns",
    "right" : "eqMethod",
    "info" : "SimpleName[29794-29810]:SimpleName[29809-29817]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[29820-29829]:MarkerAnnotation[29827-29836]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[29832-29838]:Modifier[29839-29845]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[29839-29842]:PrimitiveType[29846-29849]"
  }, {
    "left" : "hashCode",
    "right" : "hashCode",
    "info" : "SimpleName[29843-29851]:SimpleName[29850-29858]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29854-29935]:Block[29861-29942]"
  }, {
    "left" : "return isInterface() ? getReferenceName().hashCode() : call.hashCode();",
    "right" : "return isInterface() ? getReferenceName().hashCode() : call.hashCode();",
    "info" : "ReturnStatement[29860-29931]:ReturnStatement[29867-29938]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[29939-29945]:Modifier[29946-29952]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[29946-29953]:PrimitiveType[29953-29960]"
  }, {
    "left" : "hasEqualCallType",
    "right" : "hasEqualCallType",
    "info" : "SimpleName[29954-29970]:SimpleName[29961-29977]"
  }, {
    "left" : "FunctionType otherType",
    "right" : "FunctionType otherType",
    "info" : "SingleVariableDeclaration[29971-29993]:SingleVariableDeclaration[29978-30000]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29995-30073]:Block[30002-30110]"
  }, {
    "left" : "return this.call.checkArrowEquivalenceHelper(otherType.call, false);",
    "right" : "return this.call.checkArrowEquivalenceHelper(\n        otherType.call, EquivalenceMethod.IDENTITY);",
    "info" : "ReturnStatement[30001-30069]:ReturnStatement[30008-30106]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[30349-30358]:MarkerAnnotation[30386-30395]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[30361-30367]:SimpleType[30398-30404]"
  }, {
    "left" : "toStringHelper",
    "right" : "toStringHelper",
    "info" : "SimpleName[30368-30382]:SimpleName[30405-30419]"
  }, {
    "left" : "boolean forAnnotations",
    "right" : "boolean forAnnotations",
    "info" : "SingleVariableDeclaration[30383-30405]:SingleVariableDeclaration[30420-30442]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30407-31451]:Block[30444-31488]"
  }, {
    "left" : "if (!isPrettyPrint() ||\n        this == registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE))",
    "right" : "if (!isPrettyPrint() ||\n        this == registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE))",
    "info" : "IfStatement[30413-30546]:IfStatement[30450-30583]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30514-30546]:Block[30551-30583]"
  }, {
    "left" : "return \"Function\";",
    "right" : "return \"Function\";",
    "info" : "ReturnStatement[30522-30540]:ReturnStatement[30559-30577]"
  }, {
    "left" : "setPrettyPrint(false);",
    "right" : "setPrettyPrint(false);",
    "info" : "ExpressionStatement[30552-30574]:ExpressionStatement[30589-30611]"
  }, {
    "left" : "StringBuilder b = new StringBuilder(32);",
    "right" : "StringBuilder b = new StringBuilder(32);",
    "info" : "VariableDeclarationStatement[30580-30620]:VariableDeclarationStatement[30617-30657]"
  }, {
    "left" : "b.append(\"function (\");",
    "right" : "b.append(\"function (\");",
    "info" : "ExpressionStatement[30625-30648]:ExpressionStatement[30662-30685]"
  }, {
    "left" : "int paramNum = call.parameters.getChildCount();",
    "right" : "int paramNum = call.parameters.getChildCount();",
    "info" : "VariableDeclarationStatement[30653-30700]:VariableDeclarationStatement[30690-30737]"
  }, {
    "left" : "boolean hasKnownTypeOfThis = !(typeOfThis instanceof UnknownType);",
    "right" : "boolean hasKnownTypeOfThis = !(typeOfThis instanceof UnknownType);",
    "info" : "VariableDeclarationStatement[30705-30771]:VariableDeclarationStatement[30742-30808]"
  }, {
    "left" : "if (hasKnownTypeOfThis)",
    "right" : "if (hasKnownTypeOfThis)",
    "info" : "IfStatement[30776-30971]:IfStatement[30813-31008]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30800-30971]:Block[30837-31008]"
  }, {
    "left" : "if (isConstructor())",
    "right" : "if (isConstructor())",
    "info" : "IfStatement[30808-30906]:IfStatement[30845-30943]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30829-30864]:Block[30866-30901]"
  }, {
    "left" : "b.append(\"new:\");",
    "right" : "b.append(\"new:\");",
    "info" : "ExpressionStatement[30839-30856]:ExpressionStatement[30876-30893]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30870-30906]:Block[30907-30943]"
  }, {
    "left" : "b.append(\"this:\");",
    "right" : "b.append(\"this:\");",
    "info" : "ExpressionStatement[30880-30898]:ExpressionStatement[30917-30935]"
  }, {
    "left" : "b.append(typeOfThis.toStringHelper(forAnnotations));",
    "right" : "b.append(typeOfThis.toStringHelper(forAnnotations));",
    "info" : "ExpressionStatement[30913-30965]:ExpressionStatement[30950-31002]"
  }, {
    "left" : "if (paramNum > 0)",
    "right" : "if (paramNum > 0)",
    "info" : "IfStatement[30976-31312]:IfStatement[31013-31349]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30994-31312]:Block[31031-31349]"
  }, {
    "left" : "if (hasKnownTypeOfThis)",
    "right" : "if (hasKnownTypeOfThis)",
    "info" : "IfStatement[31002-31059]:IfStatement[31039-31096]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31026-31059]:Block[31063-31096]"
  }, {
    "left" : "b.append(\", \");",
    "right" : "b.append(\", \");",
    "info" : "ExpressionStatement[31036-31051]:ExpressionStatement[31073-31088]"
  }, {
    "left" : "Node p = call.parameters.getFirstChild();",
    "right" : "Node p = call.parameters.getFirstChild();",
    "info" : "VariableDeclarationStatement[31066-31107]:VariableDeclarationStatement[31103-31144]"
  }, {
    "left" : "appendArgString(b, p, forAnnotations);",
    "right" : "appendArgString(b, p, forAnnotations);",
    "info" : "ExpressionStatement[31114-31152]:ExpressionStatement[31151-31189]"
  }, {
    "left" : "p = p.getNext();",
    "right" : "p = p.getNext();",
    "info" : "ExpressionStatement[31160-31176]:ExpressionStatement[31197-31213]"
  }, {
    "left" : "while (p != null)",
    "right" : "while (p != null)",
    "info" : "WhileStatement[31183-31306]:WhileStatement[31220-31343]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31201-31306]:Block[31238-31343]"
  }, {
    "left" : "b.append(\", \");",
    "right" : "b.append(\", \");",
    "info" : "ExpressionStatement[31211-31226]:ExpressionStatement[31248-31263]"
  }, {
    "left" : "appendArgString(b, p, forAnnotations);",
    "right" : "appendArgString(b, p, forAnnotations);",
    "info" : "ExpressionStatement[31235-31273]:ExpressionStatement[31272-31310]"
  }, {
    "left" : "p = p.getNext();",
    "right" : "p = p.getNext();",
    "info" : "ExpressionStatement[31282-31298]:ExpressionStatement[31319-31335]"
  }, {
    "left" : "b.append(\"): \");",
    "right" : "b.append(\"): \");",
    "info" : "ExpressionStatement[31317-31333]:ExpressionStatement[31354-31370]"
  }, {
    "left" : "b.append(call.returnType.toStringHelper(forAnnotations));",
    "right" : "b.append(call.returnType.toStringHelper(forAnnotations));",
    "info" : "ExpressionStatement[31338-31395]:ExpressionStatement[31375-31432]"
  }, {
    "left" : "setPrettyPrint(true);",
    "right" : "setPrettyPrint(true);",
    "info" : "ExpressionStatement[31401-31422]:ExpressionStatement[31438-31459]"
  }, {
    "left" : "return b.toString();",
    "right" : "return b.toString();",
    "info" : "ReturnStatement[31427-31447]:ReturnStatement[31464-31484]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[31455-31462]:Modifier[31492-31499]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[31463-31467]:PrimitiveType[31500-31504]"
  }, {
    "left" : "appendArgString",
    "right" : "appendArgString",
    "info" : "SimpleName[31468-31483]:SimpleName[31505-31520]"
  }, {
    "left" : "StringBuilder b",
    "right" : "StringBuilder b",
    "info" : "SingleVariableDeclaration[31491-31506]:SingleVariableDeclaration[31528-31543]"
  }, {
    "left" : "Node p",
    "right" : "Node p",
    "info" : "SingleVariableDeclaration[31508-31514]:SingleVariableDeclaration[31545-31551]"
  }, {
    "left" : "boolean forAnnotations",
    "right" : "boolean forAnnotations",
    "info" : "SingleVariableDeclaration[31516-31538]:SingleVariableDeclaration[31553-31575]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31540-31813]:Block[31577-31850]"
  }, {
    "left" : "if (p.isVarArgs())",
    "right" : "if (p.isVarArgs())",
    "info" : "IfStatement[31546-31809]:IfStatement[31583-31846]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31565-31633]:Block[31602-31670]"
  }, {
    "left" : "appendVarArgsString(b, p.getJSType(), forAnnotations);",
    "right" : "appendVarArgsString(b, p.getJSType(), forAnnotations);",
    "info" : "ExpressionStatement[31573-31627]:ExpressionStatement[31610-31664]"
  }, {
    "left" : "if (p.isOptionalArg())",
    "right" : "if (p.isOptionalArg())",
    "info" : "IfStatement[31639-31809]:IfStatement[31676-31846]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31662-31734]:Block[31699-31771]"
  }, {
    "left" : "appendOptionalArgString(b, p.getJSType(), forAnnotations);",
    "right" : "appendOptionalArgString(b, p.getJSType(), forAnnotations);",
    "info" : "ExpressionStatement[31670-31728]:ExpressionStatement[31707-31765]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31740-31809]:Block[31777-31846]"
  }, {
    "left" : "b.append(p.getJSType().toStringHelper(forAnnotations));",
    "right" : "b.append(p.getJSType().toStringHelper(forAnnotations));",
    "info" : "ExpressionStatement[31748-31803]:ExpressionStatement[31785-31840]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[31878-31885]:Modifier[31915-31922]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[31886-31890]:PrimitiveType[31923-31927]"
  }, {
    "left" : "appendVarArgsString",
    "right" : "appendVarArgsString",
    "info" : "SimpleName[31891-31910]:SimpleName[31928-31947]"
  }, {
    "left" : "StringBuilder builder",
    "right" : "StringBuilder builder",
    "info" : "SingleVariableDeclaration[31911-31932]:SingleVariableDeclaration[31948-31969]"
  }, {
    "left" : "JSType paramType",
    "right" : "JSType paramType",
    "info" : "SingleVariableDeclaration[31934-31950]:SingleVariableDeclaration[31971-31987]"
  }, {
    "left" : "boolean forAnnotations",
    "right" : "boolean forAnnotations",
    "info" : "SingleVariableDeclaration[31958-31980]:SingleVariableDeclaration[31995-32017]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31982-32302]:Block[32019-32339]"
  }, {
    "left" : "if (paramType.isUnionType())",
    "right" : "if (paramType.isUnionType())",
    "info" : "IfStatement[31988-32200]:IfStatement[32025-32237]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32017-32200]:Block[32054-32237]"
  }, {
    "left" : "paramType = paramType.toMaybeUnionType().getRestrictedUnion(\n          registry.getNativeType(JSTypeNative.VOID_TYPE));",
    "right" : "paramType = paramType.toMaybeUnionType().getRestrictedUnion(\n          registry.getNativeType(JSTypeNative.VOID_TYPE));",
    "info" : "ExpressionStatement[32075-32194]:ExpressionStatement[32112-32231]"
  }, {
    "left" : "builder.append(\"...[\").append(\n        paramType.toStringHelper(forAnnotations)).append(\"]\");",
    "right" : "builder.append(\"...[\").append(\n        paramType.toStringHelper(forAnnotations)).append(\"]\");",
    "info" : "ExpressionStatement[32205-32298]:ExpressionStatement[32242-32335]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[32368-32375]:Modifier[32405-32412]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[32376-32380]:PrimitiveType[32413-32417]"
  }, {
    "left" : "appendOptionalArgString",
    "right" : "appendOptionalArgString",
    "info" : "SimpleName[32381-32404]:SimpleName[32418-32441]"
  }, {
    "left" : "StringBuilder builder",
    "right" : "StringBuilder builder",
    "info" : "SingleVariableDeclaration[32412-32433]:SingleVariableDeclaration[32449-32470]"
  }, {
    "left" : "JSType paramType",
    "right" : "JSType paramType",
    "info" : "SingleVariableDeclaration[32435-32451]:SingleVariableDeclaration[32472-32488]"
  }, {
    "left" : "boolean forAnnotations",
    "right" : "boolean forAnnotations",
    "info" : "SingleVariableDeclaration[32453-32475]:SingleVariableDeclaration[32490-32512]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32477-32773]:Block[32514-32810]"
  }, {
    "left" : "if (paramType.isUnionType())",
    "right" : "if (paramType.isUnionType())",
    "info" : "IfStatement[32483-32695]:IfStatement[32520-32732]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32512-32695]:Block[32549-32732]"
  }, {
    "left" : "paramType = paramType.toMaybeUnionType().getRestrictedUnion(\n          registry.getNativeType(JSTypeNative.VOID_TYPE));",
    "right" : "paramType = paramType.toMaybeUnionType().getRestrictedUnion(\n          registry.getNativeType(JSTypeNative.VOID_TYPE));",
    "info" : "ExpressionStatement[32570-32689]:ExpressionStatement[32607-32726]"
  }, {
    "left" : "builder.append(paramType.toStringHelper(forAnnotations)).append(\"=\");",
    "right" : "builder.append(paramType.toStringHelper(forAnnotations)).append(\"=\");",
    "info" : "ExpressionStatement[32700-32769]:ExpressionStatement[32737-32806]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[32969-32978]:MarkerAnnotation[33006-33015]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[32981-32987]:Modifier[33018-33024]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[32988-32995]:PrimitiveType[33025-33032]"
  }, {
    "left" : "isSubtype",
    "right" : "isSubtype",
    "info" : "SimpleName[32996-33005]:SimpleName[33033-33042]"
  }, {
    "left" : "JSType that",
    "right" : "JSType that",
    "info" : "SingleVariableDeclaration[33006-33017]:SingleVariableDeclaration[33043-33054]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33019-34817]:Block[33056-34854]"
  }, {
    "left" : "if (JSType.isSubtypeHelper(this, that))",
    "right" : "if (JSType.isSubtypeHelper(this, that))",
    "info" : "IfStatement[33025-33091]:IfStatement[33062-33128]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33065-33091]:Block[33102-33128]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[33073-33085]:ReturnStatement[33110-33122]"
  }, {
    "left" : "if (that.isFunctionType())",
    "right" : "if (that.isFunctionType())",
    "info" : "IfStatement[33097-34737]:IfStatement[33134-34774]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33124-34737]:Block[33161-34774]"
  }, {
    "left" : "FunctionType other = that.toMaybeFunctionType();",
    "right" : "FunctionType other = that.toMaybeFunctionType();",
    "info" : "VariableDeclarationStatement[33132-33180]:VariableDeclarationStatement[33169-33217]"
  }, {
    "left" : "if (other.isInterface())",
    "right" : "if (other.isInterface())",
    "info" : "IfStatement[33187-33308]:IfStatement[33224-33345]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33212-33308]:Block[33249-33345]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[33288-33300]:ReturnStatement[33325-33337]"
  }, {
    "left" : "if (this.isInterface())",
    "right" : "if (this.isInterface())",
    "info" : "IfStatement[33315-33435]:IfStatement[33352-33472]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33339-33435]:Block[33376-33472]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[33414-33427]:ReturnStatement[33451-33464]"
  }, {
    "left" : "boolean treatThisTypesAsCovariant =\n        // If either one of these is a ctor, skip 'this' checking.\n        this.isConstructor() || other.isConstructor() ||\n\n        // An interface 'this'-type is non-restrictive.\n        // In practical terms, if C implements I, and I has a method m,\n        // then any m doesn't necessarily have to C#m's 'this'\n        // type doesn't need to match I.\n        (other.typeOfThis.getConstructor() != null &&\n             other.typeOfThis.getConstructor().isInterface()) ||\n\n        // If one of the 'this' types is covariant of the other,\n        // then we'll treat them as covariant (see comment above).\n        other.typeOfThis.isSubtype(this.typeOfThis) ||\n        this.typeOfThis.isSubtype(other.typeOfThis);",
    "right" : "boolean treatThisTypesAsCovariant =\n        // If either one of these is a ctor, skip 'this' checking.\n        this.isConstructor() || other.isConstructor() ||\n\n        // An interface 'this'-type is non-restrictive.\n        // In practical terms, if C implements I, and I has a method m,\n        // then any m doesn't necessarily have to C#m's 'this'\n        // type doesn't need to match I.\n        (other.typeOfThis.getConstructor() != null &&\n             other.typeOfThis.getConstructor().isInterface()) ||\n\n        // If one of the 'this' types is covariant of the other,\n        // then we'll treat them as covariant (see comment above).\n        other.typeOfThis.isSubtype(this.typeOfThis) ||\n        this.typeOfThis.isSubtype(other.typeOfThis);",
    "info" : "VariableDeclarationStatement[33904-34656]:VariableDeclarationStatement[33941-34693]"
  }, {
    "left" : "return treatThisTypesAsCovariant && this.call.isSubtype(other.call);",
    "right" : "return treatThisTypesAsCovariant && this.call.isSubtype(other.call);",
    "info" : "ReturnStatement[34663-34731]:ReturnStatement[34700-34768]"
  }, {
    "left" : "return getNativeType(JSTypeNative.FUNCTION_PROTOTYPE).isSubtype(that);",
    "right" : "return getNativeType(JSTypeNative.FUNCTION_PROTOTYPE).isSubtype(that);",
    "info" : "ReturnStatement[34743-34813]:ReturnStatement[34780-34850]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[34821-34830]:MarkerAnnotation[34858-34867]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[34833-34839]:Modifier[34870-34876]"
  }, {
    "left" : "T",
    "right" : "T",
    "info" : "TypeParameter[34841-34842]:TypeParameter[34878-34879]"
  }, {
    "left" : "T",
    "right" : "T",
    "info" : "SimpleType[34844-34845]:SimpleType[34881-34882]"
  }, {
    "left" : "visit",
    "right" : "visit",
    "info" : "SimpleName[34846-34851]:SimpleName[34883-34888]"
  }, {
    "left" : "Visitor<T> visitor",
    "right" : "Visitor<T> visitor",
    "info" : "SingleVariableDeclaration[34852-34870]:SingleVariableDeclaration[34889-34907]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34872-34920]:Block[34909-34957]"
  }, {
    "left" : "return visitor.caseFunctionType(this);",
    "right" : "return visitor.caseFunctionType(this);",
    "info" : "ReturnStatement[34878-34916]:ReturnStatement[34915-34953]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[35103-35109]:Modifier[35140-35146]"
  }, {
    "left" : "ObjectType",
    "right" : "ObjectType",
    "info" : "SimpleType[35110-35120]:SimpleType[35147-35157]"
  }, {
    "left" : "getInstanceType",
    "right" : "getInstanceType",
    "info" : "SimpleName[35121-35136]:SimpleName[35158-35173]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35139-35216]:Block[35176-35253]"
  }, {
    "left" : "Preconditions.checkState(hasInstanceType());",
    "right" : "Preconditions.checkState(hasInstanceType());",
    "info" : "ExpressionStatement[35145-35189]:ExpressionStatement[35182-35226]"
  }, {
    "left" : "return typeOfThis;",
    "right" : "return typeOfThis;",
    "info" : "ReturnStatement[35194-35212]:ReturnStatement[35231-35249]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[35317-35321]:PrimitiveType[35354-35358]"
  }, {
    "left" : "setInstanceType",
    "right" : "setInstanceType",
    "info" : "SimpleName[35322-35337]:SimpleName[35359-35374]"
  }, {
    "left" : "ObjectType instanceType",
    "right" : "ObjectType instanceType",
    "info" : "SingleVariableDeclaration[35338-35361]:SingleVariableDeclaration[35375-35398]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35363-35399]:Block[35400-35436]"
  }, {
    "left" : "typeOfThis = instanceType;",
    "right" : "typeOfThis = instanceType;",
    "info" : "ExpressionStatement[35369-35395]:ExpressionStatement[35406-35432]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[35477-35483]:Modifier[35514-35520]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[35484-35491]:PrimitiveType[35521-35528]"
  }, {
    "left" : "hasInstanceType",
    "right" : "hasInstanceType",
    "info" : "SimpleName[35492-35507]:SimpleName[35529-35544]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35510-35560]:Block[35547-35597]"
  }, {
    "left" : "return isConstructor() || isInterface();",
    "right" : "return isConstructor() || isInterface();",
    "info" : "ReturnStatement[35516-35556]:ReturnStatement[35553-35593]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[35629-35638]:MarkerAnnotation[35666-35675]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[35641-35647]:Modifier[35678-35684]"
  }, {
    "left" : "ObjectType",
    "right" : "ObjectType",
    "info" : "SimpleType[35648-35658]:SimpleType[35685-35695]"
  }, {
    "left" : "getTypeOfThis",
    "right" : "getTypeOfThis",
    "info" : "SimpleName[35659-35672]:SimpleName[35696-35709]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35675-35799]:Block[35712-35836]"
  }, {
    "left" : "return typeOfThis.isNoObjectType() ?\n        registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE) : typeOfThis;",
    "right" : "return typeOfThis.isNoObjectType() ?\n        registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE) : typeOfThis;",
    "info" : "ReturnStatement[35681-35795]:ReturnStatement[35718-35832]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[35881-35887]:Modifier[35918-35924]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[35888-35892]:SimpleType[35925-35929]"
  }, {
    "left" : "getSource",
    "right" : "getSource",
    "info" : "SimpleName[35893-35902]:SimpleName[35930-35939]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35905-35929]:Block[35942-35966]"
  }, {
    "left" : "return source;",
    "right" : "return source;",
    "info" : "ReturnStatement[35911-35925]:ReturnStatement[35948-35962]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[35972-35978]:Modifier[36009-36015]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[35979-35983]:PrimitiveType[36016-36020]"
  }, {
    "left" : "setSource",
    "right" : "setSource",
    "info" : "SimpleName[35984-35993]:SimpleName[36021-36030]"
  }, {
    "left" : "Node source",
    "right" : "Node source",
    "info" : "SingleVariableDeclaration[35994-36005]:SingleVariableDeclaration[36031-36042]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36007-36641]:Block[36044-36678]"
  }, {
    "left" : "if (prototypeSlot != null)",
    "right" : "if (prototypeSlot != null)",
    "info" : "IfStatement[36013-36611]:IfStatement[36050-36648]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36040-36611]:Block[36077-36648]"
  }, {
    "left" : "if (source == null || prototypeSlot.getNode() == null)",
    "right" : "if (source == null || prototypeSlot.getNode() == null)",
    "info" : "IfStatement[36401-36605]:IfStatement[36438-36642]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36456-36605]:Block[36493-36642]"
  }, {
    "left" : "prototypeSlot = new Property(prototypeSlot.getName(),\n            prototypeSlot.getType(), prototypeSlot.isTypeInferred(), source);",
    "right" : "prototypeSlot = new Property(prototypeSlot.getName(),\n            prototypeSlot.getType(), prototypeSlot.isTypeInferred(), source);",
    "info" : "ExpressionStatement[36466-36597]:ExpressionStatement[36503-36634]"
  }, {
    "left" : "this.source = source;",
    "right" : "this.source = source;",
    "info" : "ExpressionStatement[36616-36637]:ExpressionStatement[36653-36674]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[36705-36712]:Modifier[36742-36749]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[36713-36717]:PrimitiveType[36750-36754]"
  }, {
    "left" : "addSubType",
    "right" : "addSubType",
    "info" : "SimpleName[36718-36728]:SimpleName[36755-36765]"
  }, {
    "left" : "FunctionType subType",
    "right" : "FunctionType subType",
    "info" : "SingleVariableDeclaration[36729-36749]:SingleVariableDeclaration[36766-36786]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36751-36856]:Block[36788-36893]"
  }, {
    "left" : "if (subTypes == null)",
    "right" : "if (subTypes == null)",
    "info" : "IfStatement[36757-36825]:IfStatement[36794-36862]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36779-36825]:Block[36816-36862]"
  }, {
    "left" : "subTypes = Lists.newArrayList();",
    "right" : "subTypes = Lists.newArrayList();",
    "info" : "ExpressionStatement[36787-36819]:ExpressionStatement[36824-36856]"
  }, {
    "left" : "subTypes.add(subType);",
    "right" : "subTypes.add(subType);",
    "info" : "ExpressionStatement[36830-36852]:ExpressionStatement[36867-36889]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[36860-36869]:MarkerAnnotation[36897-36906]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[36872-36878]:Modifier[36909-36915]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[36879-36883]:PrimitiveType[36916-36920]"
  }, {
    "left" : "clearCachedValues",
    "right" : "clearCachedValues",
    "info" : "SimpleName[36884-36901]:SimpleName[36921-36938]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36904-37304]:Block[36941-37341]"
  }, {
    "left" : "super.clearCachedValues();",
    "right" : "super.clearCachedValues();",
    "info" : "ExpressionStatement[36910-36936]:ExpressionStatement[36947-36973]"
  }, {
    "left" : "if (subTypes != null)",
    "right" : "if (subTypes != null)",
    "info" : "IfStatement[36942-37062]:IfStatement[36979-37099]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36964-37062]:Block[37001-37099]"
  }, {
    "left" : "for (FunctionType subType : subTypes)",
    "right" : "for (FunctionType subType : subTypes)",
    "info" : "EnhancedForStatement[36972-37056]:EnhancedForStatement[37009-37093]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37010-37056]:Block[37047-37093]"
  }, {
    "left" : "subType.clearCachedValues();",
    "right" : "subType.clearCachedValues();",
    "info" : "ExpressionStatement[37020-37048]:ExpressionStatement[37057-37085]"
  }, {
    "left" : "if (!isNativeObjectType())",
    "right" : "if (!isNativeObjectType())",
    "info" : "IfStatement[37068-37300]:IfStatement[37105-37337]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37095-37300]:Block[37132-37337]"
  }, {
    "left" : "if (hasInstanceType())",
    "right" : "if (hasInstanceType())",
    "info" : "IfStatement[37103-37182]:IfStatement[37140-37219]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37126-37182]:Block[37163-37219]"
  }, {
    "left" : "getInstanceType().clearCachedValues();",
    "right" : "getInstanceType().clearCachedValues();",
    "info" : "ExpressionStatement[37136-37174]:ExpressionStatement[37173-37211]"
  }, {
    "left" : "if (prototypeSlot != null)",
    "right" : "if (prototypeSlot != null)",
    "info" : "IfStatement[37190-37294]:IfStatement[37227-37331]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37217-37294]:Block[37254-37331]"
  }, {
    "left" : "((ObjectType) prototypeSlot.getType()).clearCachedValues();",
    "right" : "((ObjectType) prototypeSlot.getType()).clearCachedValues();",
    "info" : "ExpressionStatement[37227-37286]:ExpressionStatement[37264-37323]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[37509-37515]:Modifier[37546-37552]"
  }, {
    "left" : "List<FunctionType>",
    "right" : "List<FunctionType>",
    "info" : "ParameterizedType[37516-37534]:ParameterizedType[37553-37571]"
  }, {
    "left" : "getSubTypes",
    "right" : "getSubTypes",
    "info" : "SimpleName[37535-37546]:SimpleName[37572-37583]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37549-37575]:Block[37586-37612]"
  }, {
    "left" : "return subTypes;",
    "right" : "return subTypes;",
    "info" : "ReturnStatement[37555-37571]:ReturnStatement[37592-37608]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[37579-37588]:MarkerAnnotation[37616-37625]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[37591-37597]:Modifier[37628-37634]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[37598-37605]:PrimitiveType[37635-37642]"
  }, {
    "left" : "hasCachedValues",
    "right" : "hasCachedValues",
    "info" : "SimpleName[37606-37621]:SimpleName[37643-37658]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37624-37690]:Block[37661-37727]"
  }, {
    "left" : "return prototypeSlot != null || super.hasCachedValues();",
    "right" : "return prototypeSlot != null || super.hasCachedValues();",
    "info" : "ReturnStatement[37630-37686]:ReturnStatement[37667-37723]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[37740-37746]:Modifier[37777-37783]"
  }, {
    "left" : "ImmutableList<String>",
    "right" : "ImmutableList<String>",
    "info" : "ParameterizedType[37747-37768]:ParameterizedType[37784-37805]"
  }, {
    "left" : "getTemplateTypeNames",
    "right" : "getTemplateTypeNames",
    "info" : "SimpleName[37769-37789]:SimpleName[37806-37826]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37792-37827]:Block[37829-37864]"
  }, {
    "left" : "return templateTypeNames;",
    "right" : "return templateTypeNames;",
    "info" : "ReturnStatement[37798-37823]:ReturnStatement[37835-37860]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[37831-37840]:MarkerAnnotation[37868-37877]"
  }, {
    "left" : "JSType",
    "right" : "JSType",
    "info" : "SimpleType[37843-37849]:SimpleType[37880-37886]"
  }, {
    "left" : "resolveInternal",
    "right" : "resolveInternal",
    "info" : "SimpleName[37850-37865]:SimpleName[37887-37902]"
  }, {
    "left" : "ErrorReporter t",
    "right" : "ErrorReporter t",
    "info" : "SingleVariableDeclaration[37866-37881]:SingleVariableDeclaration[37903-37918]"
  }, {
    "left" : "StaticScope<JSType> scope",
    "right" : "StaticScope<JSType> scope",
    "info" : "SingleVariableDeclaration[37883-37908]:SingleVariableDeclaration[37920-37945]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37910-39657]:Block[37947-39694]"
  }, {
    "left" : "setResolvedTypeInternal(this);",
    "right" : "setResolvedTypeInternal(this);",
    "info" : "ExpressionStatement[37916-37946]:ExpressionStatement[37953-37983]"
  }, {
    "left" : "call = (ArrowType) safeResolve(call, t, scope);",
    "right" : "call = (ArrowType) safeResolve(call, t, scope);",
    "info" : "ExpressionStatement[37952-37999]:ExpressionStatement[37989-38036]"
  }, {
    "left" : "if (prototypeSlot != null)",
    "right" : "if (prototypeSlot != null)",
    "info" : "IfStatement[38004-38126]:IfStatement[38041-38163]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38031-38126]:Block[38068-38163]"
  }, {
    "left" : "prototypeSlot.setType(\n          safeResolve(prototypeSlot.getType(), t, scope));",
    "right" : "prototypeSlot.setType(\n          safeResolve(prototypeSlot.getType(), t, scope));",
    "info" : "ExpressionStatement[38039-38120]:ExpressionStatement[38076-38157]"
  }, {
    "left" : "JSType maybeTypeOfThis = safeResolve(typeOfThis, t, scope);",
    "right" : "JSType maybeTypeOfThis = safeResolve(typeOfThis, t, scope);",
    "info" : "VariableDeclarationStatement[38715-38774]:VariableDeclarationStatement[38752-38811]"
  }, {
    "left" : "if (maybeTypeOfThis != null)",
    "right" : "if (maybeTypeOfThis != null)",
    "info" : "IfStatement[38779-38887]:IfStatement[38816-38924]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38808-38887]:Block[38845-38924]"
  }, {
    "left" : "maybeTypeOfThis = maybeTypeOfThis.restrictByNotNullOrUndefined();",
    "right" : "maybeTypeOfThis = maybeTypeOfThis.restrictByNotNullOrUndefined();",
    "info" : "ExpressionStatement[38816-38881]:ExpressionStatement[38853-38918]"
  }, {
    "left" : "if (maybeTypeOfThis instanceof ObjectType)",
    "right" : "if (maybeTypeOfThis instanceof ObjectType)",
    "info" : "IfStatement[38892-38991]:IfStatement[38929-39028]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38935-38991]:Block[38972-39028]"
  }, {
    "left" : "typeOfThis = (ObjectType) maybeTypeOfThis;",
    "right" : "typeOfThis = (ObjectType) maybeTypeOfThis;",
    "info" : "ExpressionStatement[38943-38985]:ExpressionStatement[38980-39022]"
  }, {
    "left" : "boolean changed = false;",
    "right" : "boolean changed = false;",
    "info" : "VariableDeclarationStatement[38997-39021]:VariableDeclarationStatement[39034-39058]"
  }, {
    "left" : "ImmutableList.Builder<ObjectType> resolvedInterfaces =\n        ImmutableList.builder();",
    "right" : "ImmutableList.Builder<ObjectType> resolvedInterfaces =\n        ImmutableList.builder();",
    "info" : "VariableDeclarationStatement[39026-39113]:VariableDeclarationStatement[39063-39150]"
  }, {
    "left" : "for (ObjectType iface : implementedInterfaces)",
    "right" : "for (ObjectType iface : implementedInterfaces)",
    "info" : "EnhancedForStatement[39118-39331]:EnhancedForStatement[39155-39368]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39165-39331]:Block[39202-39368]"
  }, {
    "left" : "ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);",
    "right" : "ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);",
    "info" : "VariableDeclarationStatement[39173-39237]:VariableDeclarationStatement[39210-39274]"
  }, {
    "left" : "resolvedInterfaces.add(resolvedIface);",
    "right" : "resolvedInterfaces.add(resolvedIface);",
    "info" : "ExpressionStatement[39244-39282]:ExpressionStatement[39281-39319]"
  }, {
    "left" : "changed |= (resolvedIface != iface);",
    "right" : "changed |= (resolvedIface != iface);",
    "info" : "ExpressionStatement[39289-39325]:ExpressionStatement[39326-39362]"
  }, {
    "left" : "if (changed)",
    "right" : "if (changed)",
    "info" : "IfStatement[39336-39414]:IfStatement[39373-39451]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39349-39414]:Block[39386-39451]"
  }, {
    "left" : "implementedInterfaces = resolvedInterfaces.build();",
    "right" : "implementedInterfaces = resolvedInterfaces.build();",
    "info" : "ExpressionStatement[39357-39408]:ExpressionStatement[39394-39445]"
  }, {
    "left" : "if (subTypes != null)",
    "right" : "if (subTypes != null)",
    "info" : "IfStatement[39420-39608]:IfStatement[39457-39645]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39442-39608]:Block[39479-39645]"
  }, {
    "left" : "for (int i = 0; i < subTypes.size(); i++)",
    "right" : "for (int i = 0; i < subTypes.size(); i++)",
    "info" : "ForStatement[39450-39602]:ForStatement[39487-39639]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39492-39602]:Block[39529-39639]"
  }, {
    "left" : "subTypes.set(\n            i, JSType.toMaybeFunctionType(subTypes.get(i).resolve(t, scope)));",
    "right" : "subTypes.set(\n            i, JSType.toMaybeFunctionType(subTypes.get(i).resolve(t, scope)));",
    "info" : "ExpressionStatement[39502-39594]:ExpressionStatement[39539-39631]"
  }, {
    "left" : "return super.resolveInternal(t, scope);",
    "right" : "return super.resolveInternal(t, scope);",
    "info" : "ReturnStatement[39614-39653]:ReturnStatement[39651-39690]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[39661-39670]:MarkerAnnotation[39698-39707]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[39673-39679]:Modifier[39710-39716]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[39680-39686]:SimpleType[39717-39723]"
  }, {
    "left" : "toDebugHashCodeString",
    "right" : "toDebugHashCodeString",
    "info" : "SimpleName[39687-39708]:SimpleName[39724-39745]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39711-40633]:Block[39748-40670]"
  }, {
    "left" : "if (this == registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE))",
    "right" : "if (this == registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE))",
    "info" : "IfStatement[39717-39841]:IfStatement[39754-39878]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39790-39841]:Block[39827-39878]"
  }, {
    "left" : "return super.toDebugHashCodeString();",
    "right" : "return super.toDebugHashCodeString();",
    "info" : "ReturnStatement[39798-39835]:ReturnStatement[39835-39872]"
  }, {
    "left" : "StringBuilder b = new StringBuilder(32);",
    "right" : "StringBuilder b = new StringBuilder(32);",
    "info" : "VariableDeclarationStatement[39847-39887]:VariableDeclarationStatement[39884-39924]"
  }, {
    "left" : "b.append(\"function (\");",
    "right" : "b.append(\"function (\");",
    "info" : "ExpressionStatement[39892-39915]:ExpressionStatement[39929-39952]"
  }, {
    "left" : "int paramNum = call.parameters.getChildCount();",
    "right" : "int paramNum = call.parameters.getChildCount();",
    "info" : "VariableDeclarationStatement[39920-39967]:VariableDeclarationStatement[39957-40004]"
  }, {
    "left" : "boolean hasKnownTypeOfThis = !typeOfThis.isUnknownType();",
    "right" : "boolean hasKnownTypeOfThis = !typeOfThis.isUnknownType();",
    "info" : "VariableDeclarationStatement[39972-40029]:VariableDeclarationStatement[40009-40066]"
  }, {
    "left" : "if (hasKnownTypeOfThis)",
    "right" : "if (hasKnownTypeOfThis)",
    "info" : "IfStatement[40034-40144]:IfStatement[40071-40181]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40058-40144]:Block[40095-40181]"
  }, {
    "left" : "b.append(\"this:\");",
    "right" : "b.append(\"this:\");",
    "info" : "ExpressionStatement[40066-40084]:ExpressionStatement[40103-40121]"
  }, {
    "left" : "b.append(getDebugHashCodeStringOf(typeOfThis));",
    "right" : "b.append(getDebugHashCodeStringOf(typeOfThis));",
    "info" : "ExpressionStatement[40091-40138]:ExpressionStatement[40128-40175]"
  }, {
    "left" : "if (paramNum > 0)",
    "right" : "if (paramNum > 0)",
    "info" : "IfStatement[40149-40508]:IfStatement[40186-40545]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40167-40508]:Block[40204-40545]"
  }, {
    "left" : "if (hasKnownTypeOfThis)",
    "right" : "if (hasKnownTypeOfThis)",
    "info" : "IfStatement[40175-40232]:IfStatement[40212-40269]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40199-40232]:Block[40236-40269]"
  }, {
    "left" : "b.append(\", \");",
    "right" : "b.append(\", \");",
    "info" : "ExpressionStatement[40209-40224]:ExpressionStatement[40246-40261]"
  }, {
    "left" : "Node p = call.parameters.getFirstChild();",
    "right" : "Node p = call.parameters.getFirstChild();",
    "info" : "VariableDeclarationStatement[40239-40280]:VariableDeclarationStatement[40276-40317]"
  }, {
    "left" : "b.append(getDebugHashCodeStringOf(p.getJSType()));",
    "right" : "b.append(getDebugHashCodeStringOf(p.getJSType()));",
    "info" : "ExpressionStatement[40287-40337]:ExpressionStatement[40324-40374]"
  }, {
    "left" : "p = p.getNext();",
    "right" : "p = p.getNext();",
    "info" : "ExpressionStatement[40344-40360]:ExpressionStatement[40381-40397]"
  }, {
    "left" : "while (p != null)",
    "right" : "while (p != null)",
    "info" : "WhileStatement[40367-40502]:WhileStatement[40404-40539]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40385-40502]:Block[40422-40539]"
  }, {
    "left" : "b.append(\", \");",
    "right" : "b.append(\", \");",
    "info" : "ExpressionStatement[40395-40410]:ExpressionStatement[40432-40447]"
  }, {
    "left" : "b.append(getDebugHashCodeStringOf(p.getJSType()));",
    "right" : "b.append(getDebugHashCodeStringOf(p.getJSType()));",
    "info" : "ExpressionStatement[40419-40469]:ExpressionStatement[40456-40506]"
  }, {
    "left" : "p = p.getNext();",
    "right" : "p = p.getNext();",
    "info" : "ExpressionStatement[40478-40494]:ExpressionStatement[40515-40531]"
  }, {
    "left" : "b.append(\")\");",
    "right" : "b.append(\")\");",
    "info" : "ExpressionStatement[40513-40527]:ExpressionStatement[40550-40564]"
  }, {
    "left" : "b.append(\": \");",
    "right" : "b.append(\": \");",
    "info" : "ExpressionStatement[40532-40547]:ExpressionStatement[40569-40584]"
  }, {
    "left" : "b.append(getDebugHashCodeStringOf(call.returnType));",
    "right" : "b.append(getDebugHashCodeStringOf(call.returnType));",
    "info" : "ExpressionStatement[40552-40604]:ExpressionStatement[40589-40641]"
  }, {
    "left" : "return b.toString();",
    "right" : "return b.toString();",
    "info" : "ReturnStatement[40609-40629]:ReturnStatement[40646-40666]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[40637-40644]:Modifier[40674-40681]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[40645-40651]:SimpleType[40682-40688]"
  }, {
    "left" : "getDebugHashCodeStringOf",
    "right" : "getDebugHashCodeStringOf",
    "info" : "SimpleName[40652-40676]:SimpleName[40689-40713]"
  }, {
    "left" : "JSType type",
    "right" : "JSType type",
    "info" : "SingleVariableDeclaration[40677-40688]:SingleVariableDeclaration[40714-40725]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40690-40800]:Block[40727-40837]"
  }, {
    "left" : "if (type == this)",
    "right" : "if (type == this)",
    "info" : "IfStatement[40696-40796]:IfStatement[40733-40833]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40714-40740]:Block[40751-40777]"
  }, {
    "left" : "return \"me\";",
    "right" : "return \"me\";",
    "info" : "ReturnStatement[40722-40734]:ReturnStatement[40759-40771]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40746-40796]:Block[40783-40833]"
  }, {
    "left" : "return type.toDebugHashCodeString();",
    "right" : "return type.toDebugHashCodeString();",
    "info" : "ReturnStatement[40754-40790]:ReturnStatement[40791-40827]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[40884-40890]:Modifier[40921-40927]"
  }, {
    "left" : "FunctionType",
    "right" : "FunctionType",
    "info" : "SimpleType[40891-40903]:SimpleType[40928-40940]"
  }, {
    "left" : "cloneWithoutArrowType",
    "right" : "cloneWithoutArrowType",
    "info" : "SimpleName[40904-40925]:SimpleName[40941-40962]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40928-41186]:Block[40965-41223]"
  }, {
    "left" : "FunctionType result = new FunctionType(\n        registry, getReferenceName(), source,\n        registry.createArrowType(null, null), getInstanceType(),\n        null, true, false);",
    "right" : "FunctionType result = new FunctionType(\n        registry, getReferenceName(), source,\n        registry.createArrowType(null, null), getInstanceType(),\n        null, true, false);",
    "info" : "VariableDeclarationStatement[40934-41112]:VariableDeclarationStatement[40971-41149]"
  }, {
    "left" : "result.setPrototypeBasedOn(getInstanceType());",
    "right" : "result.setPrototypeBasedOn(getInstanceType());",
    "info" : "ExpressionStatement[41117-41163]:ExpressionStatement[41154-41200]"
  }, {
    "left" : "return result;",
    "right" : "return result;",
    "info" : "ReturnStatement[41168-41182]:ReturnStatement[41205-41219]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[41190-41199]:MarkerAnnotation[41227-41236]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[41202-41208]:Modifier[41239-41245]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[41209-41216]:PrimitiveType[41246-41253]"
  }, {
    "left" : "hasAnyTemplateInternal",
    "right" : "hasAnyTemplateInternal",
    "info" : "SimpleName[41217-41239]:SimpleName[41254-41276]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41242-41365]:Block[41279-41402]"
  }, {
    "left" : "return !getTemplateTypeNames().isEmpty()\n        || typeOfThis.hasAnyTemplate()\n        || call.hasAnyTemplate();",
    "right" : "return !getTemplateTypeNames().isEmpty()\n        || typeOfThis.hasAnyTemplate()\n        || call.hasAnyTemplate();",
    "info" : "ReturnStatement[41248-41361]:ReturnStatement[41285-41398]"
  } ]
}