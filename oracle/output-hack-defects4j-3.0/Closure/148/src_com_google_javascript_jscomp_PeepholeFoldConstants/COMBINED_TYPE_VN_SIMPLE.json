{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "PeepholeFoldConstants",
      "right" : "PeepholeFoldConstants",
      "info" : "TypeDeclaration[884-34194]:TypeDeclaration[884-34270]"
    }, {
      "left" : "static final DiagnosticType DIVIDE_BY_0_ERROR = DiagnosticType.error(\n      \"JSC_DIVIDE_BY_0_ERROR\",\n      \"Divide by 0\");",
      "right" : "static final DiagnosticType DIVIDE_BY_0_ERROR = DiagnosticType.error(\n      \"JSC_DIVIDE_BY_0_ERROR\",\n      \"Divide by 0\");",
      "info" : "FieldDeclaration[1047-1169]:FieldDeclaration[1047-1169]"
    }, {
      "left" : "static final DiagnosticType INVALID_GETELEM_INDEX_ERROR =\n      DiagnosticType.error(\n          \"JSC_INVALID_GETELEM_INDEX_ERROR\",\n          \"Array index not integer: {0}\");",
      "right" : "static final DiagnosticType INVALID_GETELEM_INDEX_ERROR =\n      DiagnosticType.error(\n          \"JSC_INVALID_GETELEM_INDEX_ERROR\",\n          \"Array index not integer: {0}\");",
      "info" : "FieldDeclaration[1173-1346]:FieldDeclaration[1173-1346]"
    }, {
      "left" : "static final DiagnosticType INDEX_OUT_OF_BOUNDS_ERROR =\n      DiagnosticType.error(\n          \"JSC_INDEX_OUT_OF_BOUNDS_ERROR\",\n          \"Array index out of bounds: {0}\");",
      "right" : "static final DiagnosticType INDEX_OUT_OF_BOUNDS_ERROR =\n      DiagnosticType.error(\n          \"JSC_INDEX_OUT_OF_BOUNDS_ERROR\",\n          \"Array index out of bounds: {0}\");",
      "info" : "FieldDeclaration[1350-1521]:FieldDeclaration[1350-1521]"
    }, {
      "left" : "static final DiagnosticType NEGATING_A_NON_NUMBER_ERROR =\n      DiagnosticType.error(\n          \"JSC_NEGATING_A_NON_NUMBER_ERROR\",\n          \"Can't negate non-numeric value: {0}\");",
      "right" : "static final DiagnosticType NEGATING_A_NON_NUMBER_ERROR =\n      DiagnosticType.error(\n          \"JSC_NEGATING_A_NON_NUMBER_ERROR\",\n          \"Can't negate non-numeric value: {0}\");",
      "info" : "FieldDeclaration[1525-1705]:FieldDeclaration[1525-1705]"
    }, {
      "left" : "static final DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE =\n      DiagnosticType.error(\n          \"JSC_BITWISE_OPERAND_OUT_OF_RANGE\",\n          \"Operand out of range, bitwise operation will lose information: {0}\");",
      "right" : "static final DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE =\n      DiagnosticType.error(\n          \"JSC_BITWISE_OPERAND_OUT_OF_RANGE\",\n          \"Operand out of range, bitwise operation will lose information: {0}\");",
      "info" : "FieldDeclaration[1709-1922]:FieldDeclaration[1709-1922]"
    }, {
      "left" : "static final DiagnosticType SHIFT_AMOUNT_OUT_OF_BOUNDS = DiagnosticType.error(\n      \"JSC_SHIFT_AMOUNT_OUT_OF_BOUNDS\",\n      \"Shift amount out of bounds: {0}\");",
      "right" : "static final DiagnosticType SHIFT_AMOUNT_OUT_OF_BOUNDS = DiagnosticType.error(\n      \"JSC_SHIFT_AMOUNT_OUT_OF_BOUNDS\",\n      \"Shift amount out of bounds: {0}\");",
      "info" : "FieldDeclaration[1926-2086]:FieldDeclaration[1926-2086]"
    }, {
      "left" : "static final DiagnosticType FRACTIONAL_BITWISE_OPERAND = DiagnosticType.error(\n      \"JSC_FRACTIONAL_BITWISE_OPERAND\",\n      \"Fractional bitwise operand: {0}\");",
      "right" : "static final DiagnosticType FRACTIONAL_BITWISE_OPERAND = DiagnosticType.error(\n      \"JSC_FRACTIONAL_BITWISE_OPERAND\",\n      \"Fractional bitwise operand: {0}\");",
      "info" : "FieldDeclaration[2090-2250]:FieldDeclaration[2090-2250]"
    }, {
      "left" : "private static final double MAX_FOLD_NUMBER = Math.pow(2, 53);",
      "right" : "private static final double MAX_FOLD_NUMBER = Math.pow(2, 53);",
      "info" : "FieldDeclaration[2254-2316]:FieldDeclaration[2254-2316]"
    }, {
      "left" : "Node optimizeSubtree(Node subtree)",
      "right" : "Node optimizeSubtree(Node subtree)",
      "info" : "MethodDeclaration[2320-2722]:MethodDeclaration[2320-2722]"
    }, {
      "left" : "private Node tryFoldBinaryOperator(Node subtree)",
      "right" : "private Node tryFoldBinaryOperator(Node subtree)",
      "info" : "MethodDeclaration[2726-4169]:MethodDeclaration[2726-4169]"
    }, {
      "left" : "private Node tryFoldTypeof(Node originalTypeofNode)",
      "right" : "private Node tryFoldTypeof(Node originalTypeofNode)",
      "info" : "MethodDeclaration[4173-5609]:MethodDeclaration[4173-5685]"
    }, {
      "left" : "private Node tryFoldUnaryOperator(Node n)",
      "right" : "private Node tryFoldUnaryOperator(Node n)",
      "info" : "MethodDeclaration[5613-8602]:MethodDeclaration[5689-8678]"
    }, {
      "left" : "private Node tryFoldInstanceof(Node n, Node left, Node right)",
      "right" : "private Node tryFoldInstanceof(Node n, Node left, Node right)",
      "info" : "MethodDeclaration[8606-9528]:MethodDeclaration[8682-9604]"
    }, {
      "left" : "private Node tryFoldAssign(Node n, Node left, Node right)",
      "right" : "private Node tryFoldAssign(Node n, Node left, Node right)",
      "info" : "MethodDeclaration[9532-11167]:MethodDeclaration[9608-11243]"
    }, {
      "left" : "private Node tryFoldAndOr(Node n, Node left, Node right)",
      "right" : "private Node tryFoldAndOr(Node n, Node left, Node right)",
      "info" : "MethodDeclaration[11171-13503]:MethodDeclaration[11247-13579]"
    }, {
      "left" : "private Node tryFoldLeftChildAdd(Node n, Node left, Node right)",
      "right" : "private Node tryFoldLeftChildAdd(Node n, Node left, Node right)",
      "info" : "MethodDeclaration[13507-14989]:MethodDeclaration[13583-15065]"
    }, {
      "left" : "private Node tryFoldAddConstant(Node n, Node left, Node right)",
      "right" : "private Node tryFoldAddConstant(Node n, Node left, Node right)",
      "info" : "MethodDeclaration[14993-15705]:MethodDeclaration[15069-15781]"
    }, {
      "left" : "private Node tryFoldArithmetic(Node n, Node left, Node right)",
      "right" : "private Node tryFoldArithmetic(Node n, Node left, Node right)",
      "info" : "MethodDeclaration[15709-17111]:MethodDeclaration[15785-17187]"
    }, {
      "left" : "private Node tryFoldAdd(Node node, Node left, Node right)",
      "right" : "private Node tryFoldAdd(Node node, Node left, Node right)",
      "info" : "MethodDeclaration[17115-17479]:MethodDeclaration[17191-17555]"
    }, {
      "left" : "private Node tryFoldBitAndOr(Node n, Node left, Node right)",
      "right" : "private Node tryFoldBitAndOr(Node n, Node left, Node right)",
      "info" : "MethodDeclaration[17483-18891]:MethodDeclaration[17559-18967]"
    }, {
      "left" : "private Node tryFoldShift(Node n, Node left, Node right)",
      "right" : "private Node tryFoldShift(Node n, Node left, Node right)",
      "info" : "MethodDeclaration[18895-20607]:MethodDeclaration[18971-20683]"
    }, {
      "left" : "private Node tryFoldComparison(Node n, Node left, Node right)",
      "right" : "private Node tryFoldComparison(Node n, Node left, Node right)",
      "info" : "MethodDeclaration[20611-26545]:MethodDeclaration[20687-26621]"
    }, {
      "left" : "private Node tryFoldKnownMethods(Node subtree)",
      "right" : "private Node tryFoldKnownMethods(Node subtree)",
      "info" : "MethodDeclaration[26549-26816]:MethodDeclaration[26625-26892]"
    }, {
      "left" : "private Node tryFoldStringIndexOf(Node n)",
      "right" : "private Node tryFoldStringIndexOf(Node n)",
      "info" : "MethodDeclaration[26820-28593]:MethodDeclaration[26896-28669]"
    }, {
      "left" : "private Node tryFoldStringJoin(Node n)",
      "right" : "private Node tryFoldStringJoin(Node n)",
      "info" : "MethodDeclaration[28597-31997]:MethodDeclaration[28673-32073]"
    }, {
      "left" : "private Node tryFoldGetElem(Node n, Node left, Node right)",
      "right" : "private Node tryFoldGetElem(Node n, Node left, Node right)",
      "info" : "MethodDeclaration[32001-33157]:MethodDeclaration[32077-33233]"
    }, {
      "left" : "private Node tryFoldGetProp(Node n, Node left, Node right)",
      "right" : "private Node tryFoldGetProp(Node n, Node left, Node right)",
      "info" : "MethodDeclaration[33161-34191]:MethodDeclaration[33237-34267]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[970-976]:Modifier[970-976]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[977-982]:TYPE_DECLARATION_KIND[977-982]"
    }, {
      "left" : "PeepholeFoldConstants",
      "right" : "PeepholeFoldConstants",
      "info" : "SimpleName[983-1004]:SimpleName[983-1004]"
    }, {
      "left" : "AbstractPeepholeOptimization",
      "right" : "AbstractPeepholeOptimization",
      "info" : "SimpleType[1013-1041]:SimpleType[1013-1041]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[2320-2329]:MarkerAnnotation[2320-2329]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[2332-2336]:SimpleType[2332-2336]"
    }, {
      "left" : "optimizeSubtree",
      "right" : "optimizeSubtree",
      "info" : "SimpleName[2337-2352]:SimpleName[2337-2352]"
    }, {
      "left" : "Node subtree",
      "right" : "Node subtree",
      "info" : "SingleVariableDeclaration[2353-2365]:SingleVariableDeclaration[2353-2365]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2367-2722]:Block[2367-2722]"
    }, {
      "left" : "switch(subtree.getType()) {\n      case Token.CALL:\n        return tryFoldKnownMethods(subtree);\n\n      case Token.TYPEOF:\n        return tryFoldTypeof(subtree);\n\n      case Token.NOT:\n      case Token.NEG:\n      case Token.BITNOT:\n        return tryFoldUnaryOperator(subtree);\n\n      default:\n        return tryFoldBinaryOperator(subtree);\n    }",
      "right" : "switch(subtree.getType()) {\n      case Token.CALL:\n        return tryFoldKnownMethods(subtree);\n\n      case Token.TYPEOF:\n        return tryFoldTypeof(subtree);\n\n      case Token.NOT:\n      case Token.NEG:\n      case Token.BITNOT:\n        return tryFoldUnaryOperator(subtree);\n\n      default:\n        return tryFoldBinaryOperator(subtree);\n    }",
      "info" : "SwitchStatement[2373-2718]:SwitchStatement[2373-2718]"
    }, {
      "left" : "case Token.CALL:",
      "right" : "case Token.CALL:",
      "info" : "SwitchCase[2407-2423]:SwitchCase[2407-2423]"
    }, {
      "left" : "return tryFoldKnownMethods(subtree);",
      "right" : "return tryFoldKnownMethods(subtree);",
      "info" : "ReturnStatement[2432-2468]:ReturnStatement[2432-2468]"
    }, {
      "left" : "case Token.TYPEOF:",
      "right" : "case Token.TYPEOF:",
      "info" : "SwitchCase[2476-2494]:SwitchCase[2476-2494]"
    }, {
      "left" : "return tryFoldTypeof(subtree);",
      "right" : "return tryFoldTypeof(subtree);",
      "info" : "ReturnStatement[2503-2533]:ReturnStatement[2503-2533]"
    }, {
      "left" : "case Token.NOT:",
      "right" : "case Token.NOT:",
      "info" : "SwitchCase[2541-2556]:SwitchCase[2541-2556]"
    }, {
      "left" : "case Token.NEG:",
      "right" : "case Token.NEG:",
      "info" : "SwitchCase[2563-2578]:SwitchCase[2563-2578]"
    }, {
      "left" : "case Token.BITNOT:",
      "right" : "case Token.BITNOT:",
      "info" : "SwitchCase[2585-2603]:SwitchCase[2585-2603]"
    }, {
      "left" : "return tryFoldUnaryOperator(subtree);",
      "right" : "return tryFoldUnaryOperator(subtree);",
      "info" : "ReturnStatement[2612-2649]:ReturnStatement[2612-2649]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[2657-2665]:SwitchCase[2657-2665]"
    }, {
      "left" : "return tryFoldBinaryOperator(subtree);",
      "right" : "return tryFoldBinaryOperator(subtree);",
      "info" : "ReturnStatement[2674-2712]:ReturnStatement[2674-2712]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[2726-2733]:Modifier[2726-2733]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[2734-2738]:SimpleType[2734-2738]"
    }, {
      "left" : "tryFoldBinaryOperator",
      "right" : "tryFoldBinaryOperator",
      "info" : "SimpleName[2739-2760]:SimpleName[2739-2760]"
    }, {
      "left" : "Node subtree",
      "right" : "Node subtree",
      "info" : "SingleVariableDeclaration[2761-2773]:SingleVariableDeclaration[2761-2773]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2775-4169]:Block[2775-4169]"
    }, {
      "left" : "Node left = subtree.getFirstChild();",
      "right" : "Node left = subtree.getFirstChild();",
      "info" : "VariableDeclarationStatement[2781-2817]:VariableDeclarationStatement[2781-2817]"
    }, {
      "left" : "if (left == null)",
      "right" : "if (left == null)",
      "info" : "IfStatement[2823-2870]:IfStatement[2823-2870]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2841-2870]:Block[2841-2870]"
    }, {
      "left" : "return subtree;",
      "right" : "return subtree;",
      "info" : "ReturnStatement[2849-2864]:ReturnStatement[2849-2864]"
    }, {
      "left" : "Node right = left.getNext();",
      "right" : "Node right = left.getNext();",
      "info" : "VariableDeclarationStatement[2876-2904]:VariableDeclarationStatement[2876-2904]"
    }, {
      "left" : "if (right == null)",
      "right" : "if (right == null)",
      "info" : "IfStatement[2910-2958]:IfStatement[2910-2958]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2929-2958]:Block[2929-2958]"
    }, {
      "left" : "return subtree;",
      "right" : "return subtree;",
      "info" : "ReturnStatement[2937-2952]:ReturnStatement[2937-2952]"
    }, {
      "left" : "switch(subtree.getType()) {\n      case Token.GETPROP:\n        return tryFoldGetProp(subtree, left, right);\n\n      case Token.GETELEM:\n        return tryFoldGetElem(subtree, left, right);\n\n      case Token.INSTANCEOF:\n        return tryFoldInstanceof(subtree, left, right);\n\n      case Token.AND:\n      case Token.OR:\n        return tryFoldAndOr(subtree, left, right);\n\n      case Token.BITAND:\n      case Token.BITOR:\n        return tryFoldBitAndOr(subtree, left, right);\n\n      case Token.LSH:\n      case Token.RSH:\n      case Token.URSH:\n        return tryFoldShift(subtree, left, right);\n\n      case Token.ASSIGN:\n        return tryFoldAssign(subtree, left, right);\n\n      case Token.ADD:\n        return tryFoldAdd(subtree, left, right);\n\n      case Token.SUB:\n      case Token.MUL:\n      case Token.DIV:\n        return tryFoldArithmetic(subtree, left, right);\n\n      case Token.LT:\n      case Token.GT:\n      case Token.LE:\n      case Token.GE:\n      case Token.EQ:\n      case Token.NE:\n      case Token.SHEQ:\n      case Token.SHNE:\n        return tryFoldComparison(subtree, left, right);\n\n      default:\n        return subtree;\n    }",
      "right" : "switch(subtree.getType()) {\n      case Token.GETPROP:\n        return tryFoldGetProp(subtree, left, right);\n\n      case Token.GETELEM:\n        return tryFoldGetElem(subtree, left, right);\n\n      case Token.INSTANCEOF:\n        return tryFoldInstanceof(subtree, left, right);\n\n      case Token.AND:\n      case Token.OR:\n        return tryFoldAndOr(subtree, left, right);\n\n      case Token.BITAND:\n      case Token.BITOR:\n        return tryFoldBitAndOr(subtree, left, right);\n\n      case Token.LSH:\n      case Token.RSH:\n      case Token.URSH:\n        return tryFoldShift(subtree, left, right);\n\n      case Token.ASSIGN:\n        return tryFoldAssign(subtree, left, right);\n\n      case Token.ADD:\n        return tryFoldAdd(subtree, left, right);\n\n      case Token.SUB:\n      case Token.MUL:\n      case Token.DIV:\n        return tryFoldArithmetic(subtree, left, right);\n\n      case Token.LT:\n      case Token.GT:\n      case Token.LE:\n      case Token.GE:\n      case Token.EQ:\n      case Token.NE:\n      case Token.SHEQ:\n      case Token.SHNE:\n        return tryFoldComparison(subtree, left, right);\n\n      default:\n        return subtree;\n    }",
      "info" : "SwitchStatement[3027-4165]:SwitchStatement[3027-4165]"
    }, {
      "left" : "case Token.GETPROP:",
      "right" : "case Token.GETPROP:",
      "info" : "SwitchCase[3061-3080]:SwitchCase[3061-3080]"
    }, {
      "left" : "return tryFoldGetProp(subtree, left, right);",
      "right" : "return tryFoldGetProp(subtree, left, right);",
      "info" : "ReturnStatement[3089-3133]:ReturnStatement[3089-3133]"
    }, {
      "left" : "case Token.GETELEM:",
      "right" : "case Token.GETELEM:",
      "info" : "SwitchCase[3141-3160]:SwitchCase[3141-3160]"
    }, {
      "left" : "return tryFoldGetElem(subtree, left, right);",
      "right" : "return tryFoldGetElem(subtree, left, right);",
      "info" : "ReturnStatement[3169-3213]:ReturnStatement[3169-3213]"
    }, {
      "left" : "case Token.INSTANCEOF:",
      "right" : "case Token.INSTANCEOF:",
      "info" : "SwitchCase[3221-3243]:SwitchCase[3221-3243]"
    }, {
      "left" : "return tryFoldInstanceof(subtree, left, right);",
      "right" : "return tryFoldInstanceof(subtree, left, right);",
      "info" : "ReturnStatement[3252-3299]:ReturnStatement[3252-3299]"
    }, {
      "left" : "case Token.AND:",
      "right" : "case Token.AND:",
      "info" : "SwitchCase[3307-3322]:SwitchCase[3307-3322]"
    }, {
      "left" : "case Token.OR:",
      "right" : "case Token.OR:",
      "info" : "SwitchCase[3329-3343]:SwitchCase[3329-3343]"
    }, {
      "left" : "return tryFoldAndOr(subtree, left, right);",
      "right" : "return tryFoldAndOr(subtree, left, right);",
      "info" : "ReturnStatement[3352-3394]:ReturnStatement[3352-3394]"
    }, {
      "left" : "case Token.BITAND:",
      "right" : "case Token.BITAND:",
      "info" : "SwitchCase[3402-3420]:SwitchCase[3402-3420]"
    }, {
      "left" : "case Token.BITOR:",
      "right" : "case Token.BITOR:",
      "info" : "SwitchCase[3427-3444]:SwitchCase[3427-3444]"
    }, {
      "left" : "return tryFoldBitAndOr(subtree, left, right);",
      "right" : "return tryFoldBitAndOr(subtree, left, right);",
      "info" : "ReturnStatement[3453-3498]:ReturnStatement[3453-3498]"
    }, {
      "left" : "case Token.LSH:",
      "right" : "case Token.LSH:",
      "info" : "SwitchCase[3506-3521]:SwitchCase[3506-3521]"
    }, {
      "left" : "case Token.RSH:",
      "right" : "case Token.RSH:",
      "info" : "SwitchCase[3528-3543]:SwitchCase[3528-3543]"
    }, {
      "left" : "case Token.URSH:",
      "right" : "case Token.URSH:",
      "info" : "SwitchCase[3550-3566]:SwitchCase[3550-3566]"
    }, {
      "left" : "return tryFoldShift(subtree, left, right);",
      "right" : "return tryFoldShift(subtree, left, right);",
      "info" : "ReturnStatement[3575-3617]:ReturnStatement[3575-3617]"
    }, {
      "left" : "case Token.ASSIGN:",
      "right" : "case Token.ASSIGN:",
      "info" : "SwitchCase[3625-3643]:SwitchCase[3625-3643]"
    }, {
      "left" : "return tryFoldAssign(subtree, left, right);",
      "right" : "return tryFoldAssign(subtree, left, right);",
      "info" : "ReturnStatement[3652-3695]:ReturnStatement[3652-3695]"
    }, {
      "left" : "case Token.ADD:",
      "right" : "case Token.ADD:",
      "info" : "SwitchCase[3703-3718]:SwitchCase[3703-3718]"
    }, {
      "left" : "return tryFoldAdd(subtree, left, right);",
      "right" : "return tryFoldAdd(subtree, left, right);",
      "info" : "ReturnStatement[3727-3767]:ReturnStatement[3727-3767]"
    }, {
      "left" : "case Token.SUB:",
      "right" : "case Token.SUB:",
      "info" : "SwitchCase[3775-3790]:SwitchCase[3775-3790]"
    }, {
      "left" : "case Token.MUL:",
      "right" : "case Token.MUL:",
      "info" : "SwitchCase[3797-3812]:SwitchCase[3797-3812]"
    }, {
      "left" : "case Token.DIV:",
      "right" : "case Token.DIV:",
      "info" : "SwitchCase[3819-3834]:SwitchCase[3819-3834]"
    }, {
      "left" : "return tryFoldArithmetic(subtree, left, right);",
      "right" : "return tryFoldArithmetic(subtree, left, right);",
      "info" : "ReturnStatement[3843-3890]:ReturnStatement[3843-3890]"
    }, {
      "left" : "case Token.LT:",
      "right" : "case Token.LT:",
      "info" : "SwitchCase[3898-3912]:SwitchCase[3898-3912]"
    }, {
      "left" : "case Token.GT:",
      "right" : "case Token.GT:",
      "info" : "SwitchCase[3919-3933]:SwitchCase[3919-3933]"
    }, {
      "left" : "case Token.LE:",
      "right" : "case Token.LE:",
      "info" : "SwitchCase[3940-3954]:SwitchCase[3940-3954]"
    }, {
      "left" : "case Token.GE:",
      "right" : "case Token.GE:",
      "info" : "SwitchCase[3961-3975]:SwitchCase[3961-3975]"
    }, {
      "left" : "case Token.EQ:",
      "right" : "case Token.EQ:",
      "info" : "SwitchCase[3982-3996]:SwitchCase[3982-3996]"
    }, {
      "left" : "case Token.NE:",
      "right" : "case Token.NE:",
      "info" : "SwitchCase[4003-4017]:SwitchCase[4003-4017]"
    }, {
      "left" : "case Token.SHEQ:",
      "right" : "case Token.SHEQ:",
      "info" : "SwitchCase[4024-4040]:SwitchCase[4024-4040]"
    }, {
      "left" : "case Token.SHNE:",
      "right" : "case Token.SHNE:",
      "info" : "SwitchCase[4047-4063]:SwitchCase[4047-4063]"
    }, {
      "left" : "return tryFoldComparison(subtree, left, right);",
      "right" : "return tryFoldComparison(subtree, left, right);",
      "info" : "ReturnStatement[4072-4119]:ReturnStatement[4072-4119]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[4127-4135]:SwitchCase[4127-4135]"
    }, {
      "left" : "return subtree;",
      "right" : "return subtree;",
      "info" : "ReturnStatement[4144-4159]:ReturnStatement[4144-4159]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[4296-4303]:Modifier[4296-4303]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[4304-4308]:SimpleType[4304-4308]"
    }, {
      "left" : "tryFoldTypeof",
      "right" : "tryFoldTypeof",
      "info" : "SimpleName[4309-4322]:SimpleName[4309-4322]"
    }, {
      "left" : "Node originalTypeofNode",
      "right" : "Node originalTypeofNode",
      "info" : "SingleVariableDeclaration[4323-4346]:SingleVariableDeclaration[4323-4346]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4348-5609]:Block[4348-5685]"
    }, {
      "left" : "Preconditions.checkArgument(originalTypeofNode.getType() == Token.TYPEOF);",
      "right" : "Preconditions.checkArgument(originalTypeofNode.getType() == Token.TYPEOF);",
      "info" : "ExpressionStatement[4354-4428]:ExpressionStatement[4354-4428]"
    }, {
      "left" : "Node argumentNode = originalTypeofNode.getFirstChild();",
      "right" : "Node argumentNode = originalTypeofNode.getFirstChild();",
      "info" : "VariableDeclarationStatement[4434-4489]:VariableDeclarationStatement[4434-4489]"
    }, {
      "left" : "if (argumentNode == null || !NodeUtil.isLiteralValue(argumentNode))",
      "right" : "if (argumentNode == null || !NodeUtil.isLiteralValue(argumentNode))",
      "info" : "IfStatement[4494-4602]:IfStatement[4494-4602]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4562-4602]:Block[4562-4602]"
    }, {
      "left" : "return originalTypeofNode;",
      "right" : "return originalTypeofNode;",
      "info" : "ReturnStatement[4570-4596]:ReturnStatement[4570-4596]"
    }, {
      "left" : "String typeNameString = null;",
      "right" : "String typeNameString = null;",
      "info" : "VariableDeclarationStatement[4608-4637]:VariableDeclarationStatement[4608-4637]"
    }, {
      "left" : "switch (argumentNode.getType()) {\n      case Token.STRING:\n        typeNameString = \"string\";\n        break;\n      case Token.NUMBER:\n        typeNameString = \"number\";\n        break;\n      case Token.TRUE:\n      case Token.FALSE:\n        typeNameString = \"boolean\";\n        break;\n      case Token.NULL:\n      case Token.OBJECTLIT:\n      case Token.ARRAYLIT:\n        typeNameString = \"object\";\n        break;\n      case Token.NAME:\n        // We assume here that programs don't change the value of the\n        // keyword undefined to something other than the value undefined.\n        if (\"undefined\".equals(argumentNode.getString())) {\n          typeNameString = \"undefined\";\n        }\n        break;\n    }",
      "right" : "switch (argumentNode.getType()) {\n      case Token.STRING:\n        typeNameString = \"string\";\n        break;\n      case Token.NUMBER:\n        typeNameString = \"number\";\n        break;\n      case Token.TRUE:\n      case Token.FALSE:\n        typeNameString = \"boolean\";\n        break;\n      case Token.NULL:\n      case Token.OBJECTLIT:\n      case Token.ARRAYLIT:\n        typeNameString = \"object\";\n        break;\n      case Token.VOID:\n        typeNameString = \"undefined\";\n        break;\n      case Token.NAME:\n        // We assume here that programs don't change the value of the\n        // keyword undefined to something other than the value undefined.\n        if (\"undefined\".equals(argumentNode.getString())) {\n          typeNameString = \"undefined\";\n        }\n        break;\n    }",
      "info" : "SwitchStatement[4643-5350]:SwitchStatement[4643-5426]"
    }, {
      "left" : "case Token.STRING:",
      "right" : "case Token.STRING:",
      "info" : "SwitchCase[4683-4701]:SwitchCase[4683-4701]"
    }, {
      "left" : "typeNameString = \"string\";",
      "right" : "typeNameString = \"string\";",
      "info" : "ExpressionStatement[4710-4736]:ExpressionStatement[4710-4736]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[4745-4751]:BreakStatement[4745-4751]"
    }, {
      "left" : "case Token.NUMBER:",
      "right" : "case Token.NUMBER:",
      "info" : "SwitchCase[4758-4776]:SwitchCase[4758-4776]"
    }, {
      "left" : "typeNameString = \"number\";",
      "right" : "typeNameString = \"number\";",
      "info" : "ExpressionStatement[4785-4811]:ExpressionStatement[4785-4811]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[4820-4826]:BreakStatement[4820-4826]"
    }, {
      "left" : "case Token.TRUE:",
      "right" : "case Token.TRUE:",
      "info" : "SwitchCase[4833-4849]:SwitchCase[4833-4849]"
    }, {
      "left" : "case Token.FALSE:",
      "right" : "case Token.FALSE:",
      "info" : "SwitchCase[4856-4873]:SwitchCase[4856-4873]"
    }, {
      "left" : "typeNameString = \"boolean\";",
      "right" : "typeNameString = \"boolean\";",
      "info" : "ExpressionStatement[4882-4909]:ExpressionStatement[4882-4909]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[4918-4924]:BreakStatement[4918-4924]"
    }, {
      "left" : "case Token.NULL:",
      "right" : "case Token.NULL:",
      "info" : "SwitchCase[4931-4947]:SwitchCase[4931-4947]"
    }, {
      "left" : "case Token.OBJECTLIT:",
      "right" : "case Token.OBJECTLIT:",
      "info" : "SwitchCase[4954-4975]:SwitchCase[4954-4975]"
    }, {
      "left" : "case Token.ARRAYLIT:",
      "right" : "case Token.ARRAYLIT:",
      "info" : "SwitchCase[4982-5002]:SwitchCase[4982-5002]"
    }, {
      "left" : "typeNameString = \"object\";",
      "right" : "typeNameString = \"object\";",
      "info" : "ExpressionStatement[5011-5037]:ExpressionStatement[5011-5037]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[5046-5052]:BreakStatement[5046-5052]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[5059-5075]:SwitchCase[5135-5151]"
    }, {
      "left" : "if (\"undefined\".equals(argumentNode.getString()))",
      "right" : "if (\"undefined\".equals(argumentNode.getString()))",
      "info" : "IfStatement[5228-5329]:IfStatement[5304-5405]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5278-5329]:Block[5354-5405]"
    }, {
      "left" : "typeNameString = \"undefined\";",
      "right" : "typeNameString = \"undefined\";",
      "info" : "ExpressionStatement[5290-5319]:ExpressionStatement[5366-5395]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[5338-5344]:BreakStatement[5414-5420]"
    }, {
      "left" : "if (typeNameString != null)",
      "right" : "if (typeNameString != null)",
      "info" : "IfStatement[5356-5573]:IfStatement[5432-5649]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5384-5573]:Block[5460-5649]"
    }, {
      "left" : "Node newNode = Node.newString(typeNameString);",
      "right" : "Node newNode = Node.newString(typeNameString);",
      "info" : "VariableDeclarationStatement[5392-5438]:VariableDeclarationStatement[5468-5514]"
    }, {
      "left" : "originalTypeofNode.getParent().replaceChild(originalTypeofNode, newNode);",
      "right" : "originalTypeofNode.getParent().replaceChild(originalTypeofNode, newNode);",
      "info" : "ExpressionStatement[5445-5518]:ExpressionStatement[5521-5594]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[5525-5544]:ExpressionStatement[5601-5620]"
    }, {
      "left" : "return newNode;",
      "right" : "return newNode;",
      "info" : "ReturnStatement[5552-5567]:ReturnStatement[5628-5643]"
    }, {
      "left" : "return originalTypeofNode;",
      "right" : "return originalTypeofNode;",
      "info" : "ReturnStatement[5579-5605]:ReturnStatement[5655-5681]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[5613-5620]:Modifier[5689-5696]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[5621-5625]:SimpleType[5697-5701]"
    }, {
      "left" : "tryFoldUnaryOperator",
      "right" : "tryFoldUnaryOperator",
      "info" : "SimpleName[5626-5646]:SimpleName[5702-5722]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[5647-5653]:SingleVariableDeclaration[5723-5729]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5655-8602]:Block[5731-8678]"
    }, {
      "left" : "Preconditions.checkState(n.hasOneChild());",
      "right" : "Preconditions.checkState(n.hasOneChild());",
      "info" : "ExpressionStatement[5661-5703]:ExpressionStatement[5737-5779]"
    }, {
      "left" : "Node left = n.getFirstChild();",
      "right" : "Node left = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[5709-5739]:VariableDeclarationStatement[5785-5815]"
    }, {
      "left" : "Node parent = n.getParent();",
      "right" : "Node parent = n.getParent();",
      "info" : "VariableDeclarationStatement[5744-5772]:VariableDeclarationStatement[5820-5848]"
    }, {
      "left" : "if (left == null)",
      "right" : "if (left == null)",
      "info" : "IfStatement[5778-5819]:IfStatement[5854-5895]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5796-5819]:Block[5872-5895]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[5804-5813]:ReturnStatement[5880-5889]"
    }, {
      "left" : "if (NodeUtil.isExpressionNode(parent))",
      "right" : "if (NodeUtil.isExpressionNode(parent))",
      "info" : "IfStatement[6079-6299]:IfStatement[6155-6375]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6118-6299]:Block[6194-6375]"
    }, {
      "left" : "parent.replaceChild(n, n.removeFirstChild());",
      "right" : "parent.replaceChild(n, n.removeFirstChild());",
      "info" : "ExpressionStatement[6203-6248]:ExpressionStatement[6279-6324]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[6255-6274]:ExpressionStatement[6331-6350]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[6281-6293]:ReturnStatement[6357-6369]"
    }, {
      "left" : "TernaryValue leftVal = NodeUtil.getBooleanValue(left);",
      "right" : "TernaryValue leftVal = NodeUtil.getBooleanValue(left);",
      "info" : "VariableDeclarationStatement[6305-6359]:VariableDeclarationStatement[6381-6435]"
    }, {
      "left" : "if (leftVal == TernaryValue.UNKNOWN)",
      "right" : "if (leftVal == TernaryValue.UNKNOWN)",
      "info" : "IfStatement[6364-6424]:IfStatement[6440-6500]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6401-6424]:Block[6477-6500]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[6409-6418]:ReturnStatement[6485-6494]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.NOT:\n        int result = leftVal.toBoolean(true) ? Token.FALSE : Token.TRUE;\n        Node replacementNode = new Node(result);\n        parent.replaceChild(n, replacementNode);\n        reportCodeChange();\n        return replacementNode;\n      case Token.NEG:\n        try {\n          if (left.getType() == Token.NAME) {\n            if (left.getString().equals(\"Infinity\")) {\n              // \"-Infinity\" is valid and a literal, don't modify it.\n              return n;\n            } else if (left.getString().equals(\"NaN\")) {\n              // \"-NaN\" is \"NaN\".\n              n.removeChild(left);\n              parent.replaceChild(n, left);\n              reportCodeChange();\n              return left;\n            }\n          }\n\n          double negNum = -left.getDouble();\n\n          Node negNumNode = Node.newNumber(negNum);\n          parent.replaceChild(n, negNumNode);\n          reportCodeChange();\n          return negNumNode;\n        } catch (UnsupportedOperationException ex) {\n          // left is not a number node, so do not replace, but warn the\n          // user because they can't be doing anything good\n          error(NEGATING_A_NON_NUMBER_ERROR, left);\n          return n;\n        }\n      case Token.BITNOT:\n        try {\n          double val = left.getDouble();\n          if (val >= Integer.MIN_VALUE && val <= Integer.MAX_VALUE) {\n            int intVal = (int) val;\n            if (intVal == val) {\n              Node notIntValNode = Node.newNumber(~intVal);\n              parent.replaceChild(n, notIntValNode);\n              reportCodeChange();\n              return notIntValNode;\n            } else {\n              error(FRACTIONAL_BITWISE_OPERAND, left);\n              return n;\n            }\n          } else {\n            error(BITWISE_OPERAND_OUT_OF_RANGE, left);\n            return n;\n          }\n        } catch (UnsupportedOperationException ex) {\n          // left is not a number node, so do not replace, but warn the\n          // user because they can't be doing anything good\n          error(NEGATING_A_NON_NUMBER_ERROR, left);\n          return n;\n        }\n        default:\n          return n;\n    }",
      "right" : "switch (n.getType()) {\n      case Token.NOT:\n        int result = leftVal.toBoolean(true) ? Token.FALSE : Token.TRUE;\n        Node replacementNode = new Node(result);\n        parent.replaceChild(n, replacementNode);\n        reportCodeChange();\n        return replacementNode;\n      case Token.NEG:\n        try {\n          if (left.getType() == Token.NAME) {\n            if (left.getString().equals(\"Infinity\")) {\n              // \"-Infinity\" is valid and a literal, don't modify it.\n              return n;\n            } else if (left.getString().equals(\"NaN\")) {\n              // \"-NaN\" is \"NaN\".\n              n.removeChild(left);\n              parent.replaceChild(n, left);\n              reportCodeChange();\n              return left;\n            }\n          }\n\n          double negNum = -left.getDouble();\n\n          Node negNumNode = Node.newNumber(negNum);\n          parent.replaceChild(n, negNumNode);\n          reportCodeChange();\n          return negNumNode;\n        } catch (UnsupportedOperationException ex) {\n          // left is not a number node, so do not replace, but warn the\n          // user because they can't be doing anything good\n          error(NEGATING_A_NON_NUMBER_ERROR, left);\n          return n;\n        }\n      case Token.BITNOT:\n        try {\n          double val = left.getDouble();\n          if (val >= Integer.MIN_VALUE && val <= Integer.MAX_VALUE) {\n            int intVal = (int) val;\n            if (intVal == val) {\n              Node notIntValNode = Node.newNumber(~intVal);\n              parent.replaceChild(n, notIntValNode);\n              reportCodeChange();\n              return notIntValNode;\n            } else {\n              error(FRACTIONAL_BITWISE_OPERAND, left);\n              return n;\n            }\n          } else {\n            error(BITWISE_OPERAND_OUT_OF_RANGE, left);\n            return n;\n          }\n        } catch (UnsupportedOperationException ex) {\n          // left is not a number node, so do not replace, but warn the\n          // user because they can't be doing anything good\n          error(NEGATING_A_NON_NUMBER_ERROR, left);\n          return n;\n        }\n        default:\n          return n;\n    }",
      "info" : "SwitchStatement[6430-8598]:SwitchStatement[6506-8674]"
    }, {
      "left" : "case Token.NOT:",
      "right" : "case Token.NOT:",
      "info" : "SwitchCase[6459-6474]:SwitchCase[6535-6550]"
    }, {
      "left" : "int result = leftVal.toBoolean(true) ? Token.FALSE : Token.TRUE;",
      "right" : "int result = leftVal.toBoolean(true) ? Token.FALSE : Token.TRUE;",
      "info" : "VariableDeclarationStatement[6483-6547]:VariableDeclarationStatement[6559-6623]"
    }, {
      "left" : "Node replacementNode = new Node(result);",
      "right" : "Node replacementNode = new Node(result);",
      "info" : "VariableDeclarationStatement[6556-6596]:VariableDeclarationStatement[6632-6672]"
    }, {
      "left" : "parent.replaceChild(n, replacementNode);",
      "right" : "parent.replaceChild(n, replacementNode);",
      "info" : "ExpressionStatement[6605-6645]:ExpressionStatement[6681-6721]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[6654-6673]:ExpressionStatement[6730-6749]"
    }, {
      "left" : "return replacementNode;",
      "right" : "return replacementNode;",
      "info" : "ReturnStatement[6682-6705]:ReturnStatement[6758-6781]"
    }, {
      "left" : "case Token.NEG:",
      "right" : "case Token.NEG:",
      "info" : "SwitchCase[6712-6727]:SwitchCase[6788-6803]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[6736-7664]:TryStatement[6812-7740]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6740-7407]:Block[6816-7483]"
    }, {
      "left" : "if (left.getType() == Token.NAME)",
      "right" : "if (left.getType() == Token.NAME)",
      "info" : "IfStatement[6752-7193]:IfStatement[6828-7269]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6786-7193]:Block[6862-7269]"
    }, {
      "left" : "if (left.getString().equals(\"Infinity\"))",
      "right" : "if (left.getString().equals(\"Infinity\"))",
      "info" : "IfStatement[6800-7181]:IfStatement[6876-7257]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6841-6950]:Block[6917-7026]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[6927-6936]:ReturnStatement[7003-7012]"
    }, {
      "left" : "if (left.getString().equals(\"NaN\"))",
      "right" : "if (left.getString().equals(\"NaN\"))",
      "info" : "IfStatement[6956-7181]:IfStatement[7032-7257]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6992-7181]:Block[7068-7257]"
    }, {
      "left" : "n.removeChild(left);",
      "right" : "n.removeChild(left);",
      "info" : "ExpressionStatement[7042-7062]:ExpressionStatement[7118-7138]"
    }, {
      "left" : "parent.replaceChild(n, left);",
      "right" : "parent.replaceChild(n, left);",
      "info" : "ExpressionStatement[7077-7106]:ExpressionStatement[7153-7182]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[7121-7140]:ExpressionStatement[7197-7216]"
    }, {
      "left" : "return left;",
      "right" : "return left;",
      "info" : "ReturnStatement[7155-7167]:ReturnStatement[7231-7243]"
    }, {
      "left" : "double negNum = -left.getDouble();",
      "right" : "double negNum = -left.getDouble();",
      "info" : "VariableDeclarationStatement[7205-7239]:VariableDeclarationStatement[7281-7315]"
    }, {
      "left" : "Node negNumNode = Node.newNumber(negNum);",
      "right" : "Node negNumNode = Node.newNumber(negNum);",
      "info" : "VariableDeclarationStatement[7251-7292]:VariableDeclarationStatement[7327-7368]"
    }, {
      "left" : "parent.replaceChild(n, negNumNode);",
      "right" : "parent.replaceChild(n, negNumNode);",
      "info" : "ExpressionStatement[7303-7338]:ExpressionStatement[7379-7414]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[7349-7368]:ExpressionStatement[7425-7444]"
    }, {
      "left" : "return negNumNode;",
      "right" : "return negNumNode;",
      "info" : "ReturnStatement[7379-7397]:ReturnStatement[7455-7473]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7449-7664]:Block[7525-7740]"
    }, {
      "left" : "error(NEGATING_A_NON_NUMBER_ERROR, left);",
      "right" : "error(NEGATING_A_NON_NUMBER_ERROR, left);",
      "info" : "ExpressionStatement[7593-7634]:ExpressionStatement[7669-7710]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[7645-7654]:ReturnStatement[7721-7730]"
    }, {
      "left" : "case Token.BITNOT:",
      "right" : "case Token.BITNOT:",
      "info" : "SwitchCase[7671-7689]:SwitchCase[7747-7765]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[7698-8555]:TryStatement[7774-8631]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7702-8298]:Block[7778-8374]"
    }, {
      "left" : "double val = left.getDouble();",
      "right" : "double val = left.getDouble();",
      "info" : "VariableDeclarationStatement[7714-7744]:VariableDeclarationStatement[7790-7820]"
    }, {
      "left" : "if (val >= Integer.MIN_VALUE && val <= Integer.MAX_VALUE)",
      "right" : "if (val >= Integer.MIN_VALUE && val <= Integer.MAX_VALUE)",
      "info" : "IfStatement[7755-8288]:IfStatement[7831-8364]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7813-8192]:Block[7889-8268]"
    }, {
      "left" : "int intVal = (int) val;",
      "right" : "int intVal = (int) val;",
      "info" : "VariableDeclarationStatement[7827-7850]:VariableDeclarationStatement[7903-7926]"
    }, {
      "left" : "if (intVal == val)",
      "right" : "if (intVal == val)",
      "info" : "IfStatement[7863-8180]:IfStatement[7939-8256]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7882-8080]:Block[7958-8156]"
    }, {
      "left" : "Node notIntValNode = Node.newNumber(~intVal);",
      "right" : "Node notIntValNode = Node.newNumber(~intVal);",
      "info" : "VariableDeclarationStatement[7898-7943]:VariableDeclarationStatement[7974-8019]"
    }, {
      "left" : "parent.replaceChild(n, notIntValNode);",
      "right" : "parent.replaceChild(n, notIntValNode);",
      "info" : "ExpressionStatement[7958-7996]:ExpressionStatement[8034-8072]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[8011-8030]:ExpressionStatement[8087-8106]"
    }, {
      "left" : "return notIntValNode;",
      "right" : "return notIntValNode;",
      "info" : "ReturnStatement[8045-8066]:ReturnStatement[8121-8142]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8086-8180]:Block[8162-8256]"
    }, {
      "left" : "error(FRACTIONAL_BITWISE_OPERAND, left);",
      "right" : "error(FRACTIONAL_BITWISE_OPERAND, left);",
      "info" : "ExpressionStatement[8102-8142]:ExpressionStatement[8178-8218]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[8157-8166]:ReturnStatement[8233-8242]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8198-8288]:Block[8274-8364]"
    }, {
      "left" : "error(BITWISE_OPERAND_OUT_OF_RANGE, left);",
      "right" : "error(BITWISE_OPERAND_OUT_OF_RANGE, left);",
      "info" : "ExpressionStatement[8212-8254]:ExpressionStatement[8288-8330]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[8267-8276]:ReturnStatement[8343-8352]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8340-8555]:Block[8416-8631]"
    }, {
      "left" : "error(NEGATING_A_NON_NUMBER_ERROR, left);",
      "right" : "error(NEGATING_A_NON_NUMBER_ERROR, left);",
      "info" : "ExpressionStatement[8484-8525]:ExpressionStatement[8560-8601]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[8536-8545]:ReturnStatement[8612-8621]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[8564-8572]:SwitchCase[8640-8648]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[8583-8592]:ReturnStatement[8659-8668]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[8706-8713]:Modifier[8782-8789]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[8714-8718]:SimpleType[8790-8794]"
    }, {
      "left" : "tryFoldInstanceof",
      "right" : "tryFoldInstanceof",
      "info" : "SimpleName[8719-8736]:SimpleName[8795-8812]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[8737-8743]:SingleVariableDeclaration[8813-8819]"
    }, {
      "left" : "Node left",
      "right" : "Node left",
      "info" : "SingleVariableDeclaration[8745-8754]:SingleVariableDeclaration[8821-8830]"
    }, {
      "left" : "Node right",
      "right" : "Node right",
      "info" : "SingleVariableDeclaration[8756-8766]:SingleVariableDeclaration[8832-8842]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8768-9528]:Block[8844-9604]"
    }, {
      "left" : "Preconditions.checkArgument(n.getType() == Token.INSTANCEOF);",
      "right" : "Preconditions.checkArgument(n.getType() == Token.INSTANCEOF);",
      "info" : "ExpressionStatement[8774-8835]:ExpressionStatement[8850-8911]"
    }, {
      "left" : "if (NodeUtil.isLiteralValue(left)\n        && !NodeUtil.mayHaveSideEffects(right))",
      "right" : "if (NodeUtil.isLiteralValue(left)\n        && !NodeUtil.mayHaveSideEffects(right))",
      "info" : "IfStatement[8924-9509]:IfStatement[9000-9585]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9006-9509]:Block[9082-9585]"
    }, {
      "left" : "Node replacementNode = null;",
      "right" : "Node replacementNode = null;",
      "info" : "VariableDeclarationStatement[9015-9043]:VariableDeclarationStatement[9091-9119]"
    }, {
      "left" : "if (NodeUtil.isImmutableValue(left))",
      "right" : "if (NodeUtil.isImmutableValue(left))",
      "info" : "IfStatement[9051-9341]:IfStatement[9127-9417]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9088-9195]:Block[9164-9271]"
    }, {
      "left" : "replacementNode = new Node(Token.FALSE);",
      "right" : "replacementNode = new Node(Token.FALSE);",
      "info" : "ExpressionStatement[9147-9187]:ExpressionStatement[9223-9263]"
    }, {
      "left" : "if (right.getType() == Token.NAME\n          && \"Object\".equals(right.getString()))",
      "right" : "if (right.getType() == Token.NAME\n          && \"Object\".equals(right.getString()))",
      "info" : "IfStatement[9201-9341]:IfStatement[9277-9417]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9284-9341]:Block[9360-9417]"
    }, {
      "left" : "replacementNode = new Node(Token.TRUE);",
      "right" : "replacementNode = new Node(Token.TRUE);",
      "info" : "ExpressionStatement[9294-9333]:ExpressionStatement[9370-9409]"
    }, {
      "left" : "if (replacementNode != null)",
      "right" : "if (replacementNode != null)",
      "info" : "IfStatement[9349-9503]:IfStatement[9425-9579]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9378-9503]:Block[9454-9579]"
    }, {
      "left" : "n.getParent().replaceChild(n, replacementNode);",
      "right" : "n.getParent().replaceChild(n, replacementNode);",
      "info" : "ExpressionStatement[9388-9435]:ExpressionStatement[9464-9511]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[9444-9463]:ExpressionStatement[9520-9539]"
    }, {
      "left" : "return replacementNode;",
      "right" : "return replacementNode;",
      "info" : "ReturnStatement[9472-9495]:ReturnStatement[9548-9571]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[9515-9524]:ReturnStatement[9591-9600]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[9532-9539]:Modifier[9608-9615]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[9540-9544]:SimpleType[9616-9620]"
    }, {
      "left" : "tryFoldAssign",
      "right" : "tryFoldAssign",
      "info" : "SimpleName[9545-9558]:SimpleName[9621-9634]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[9559-9565]:SingleVariableDeclaration[9635-9641]"
    }, {
      "left" : "Node left",
      "right" : "Node left",
      "info" : "SingleVariableDeclaration[9567-9576]:SingleVariableDeclaration[9643-9652]"
    }, {
      "left" : "Node right",
      "right" : "Node right",
      "info" : "SingleVariableDeclaration[9578-9588]:SingleVariableDeclaration[9654-9664]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9590-11167]:Block[9666-11243]"
    }, {
      "left" : "Preconditions.checkArgument(n.getType() == Token.ASSIGN);",
      "right" : "Preconditions.checkArgument(n.getType() == Token.ASSIGN);",
      "info" : "ExpressionStatement[9596-9653]:ExpressionStatement[9672-9729]"
    }, {
      "left" : "if (!right.hasChildren() ||\n        right.getFirstChild().getNext() != right.getLastChild())",
      "right" : "if (!right.hasChildren() ||\n        right.getFirstChild().getNext() != right.getLastChild())",
      "info" : "IfStatement[9704-9857]:IfStatement[9780-9933]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9797-9857]:Block[9873-9933]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[9842-9851]:ReturnStatement[9918-9927]"
    }, {
      "left" : "if (NodeUtil.mayHaveSideEffects(left))",
      "right" : "if (NodeUtil.mayHaveSideEffects(left))",
      "info" : "IfStatement[9863-9925]:IfStatement[9939-10001]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9902-9925]:Block[9978-10001]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[9910-9919]:ReturnStatement[9986-9995]"
    }, {
      "left" : "Node leftChild = right.getFirstChild();",
      "right" : "Node leftChild = right.getFirstChild();",
      "info" : "VariableDeclarationStatement[9931-9970]:VariableDeclarationStatement[10007-10046]"
    }, {
      "left" : "if (!areNodesEqualForInlining(left, leftChild))",
      "right" : "if (!areNodesEqualForInlining(left, leftChild))",
      "info" : "IfStatement[9975-10046]:IfStatement[10051-10122]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10023-10046]:Block[10099-10122]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[10031-10040]:ReturnStatement[10107-10116]"
    }, {
      "left" : "int newType = -1;",
      "right" : "int newType = -1;",
      "info" : "VariableDeclarationStatement[10052-10069]:VariableDeclarationStatement[10128-10145]"
    }, {
      "left" : "switch (right.getType()) {\n      case Token.ADD:\n        newType = Token.ASSIGN_ADD;\n        break;\n      case Token.BITAND:\n        newType = Token.ASSIGN_BITAND;\n        break;\n      case Token.BITOR:\n        newType = Token.ASSIGN_BITOR;\n        break;\n      case Token.BITXOR:\n        newType = Token.ASSIGN_BITXOR;\n        break;\n      case Token.DIV:\n        newType = Token.ASSIGN_DIV;\n        break;\n      case Token.LSH:\n        newType = Token.ASSIGN_LSH;\n        break;\n      case Token.MOD:\n        newType = Token.ASSIGN_MOD;\n        break;\n      case Token.MUL:\n        newType = Token.ASSIGN_MUL;\n        break;\n      case Token.RSH:\n        newType = Token.ASSIGN_RSH;\n        break;\n      case Token.SUB:\n        newType = Token.ASSIGN_SUB;\n        break;\n      case Token.URSH:\n        newType = Token.ASSIGN_URSH;\n        break;\n      default:\n        return n;\n    }",
      "right" : "switch (right.getType()) {\n      case Token.ADD:\n        newType = Token.ASSIGN_ADD;\n        break;\n      case Token.BITAND:\n        newType = Token.ASSIGN_BITAND;\n        break;\n      case Token.BITOR:\n        newType = Token.ASSIGN_BITOR;\n        break;\n      case Token.BITXOR:\n        newType = Token.ASSIGN_BITXOR;\n        break;\n      case Token.DIV:\n        newType = Token.ASSIGN_DIV;\n        break;\n      case Token.LSH:\n        newType = Token.ASSIGN_LSH;\n        break;\n      case Token.MOD:\n        newType = Token.ASSIGN_MOD;\n        break;\n      case Token.MUL:\n        newType = Token.ASSIGN_MUL;\n        break;\n      case Token.RSH:\n        newType = Token.ASSIGN_RSH;\n        break;\n      case Token.SUB:\n        newType = Token.ASSIGN_SUB;\n        break;\n      case Token.URSH:\n        newType = Token.ASSIGN_URSH;\n        break;\n      default:\n        return n;\n    }",
      "info" : "SwitchStatement[10074-10960]:SwitchStatement[10150-11036]"
    }, {
      "left" : "case Token.ADD:",
      "right" : "case Token.ADD:",
      "info" : "SwitchCase[10107-10122]:SwitchCase[10183-10198]"
    }, {
      "left" : "newType = Token.ASSIGN_ADD;",
      "right" : "newType = Token.ASSIGN_ADD;",
      "info" : "ExpressionStatement[10131-10158]:ExpressionStatement[10207-10234]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[10167-10173]:BreakStatement[10243-10249]"
    }, {
      "left" : "case Token.BITAND:",
      "right" : "case Token.BITAND:",
      "info" : "SwitchCase[10180-10198]:SwitchCase[10256-10274]"
    }, {
      "left" : "newType = Token.ASSIGN_BITAND;",
      "right" : "newType = Token.ASSIGN_BITAND;",
      "info" : "ExpressionStatement[10207-10237]:ExpressionStatement[10283-10313]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[10246-10252]:BreakStatement[10322-10328]"
    }, {
      "left" : "case Token.BITOR:",
      "right" : "case Token.BITOR:",
      "info" : "SwitchCase[10259-10276]:SwitchCase[10335-10352]"
    }, {
      "left" : "newType = Token.ASSIGN_BITOR;",
      "right" : "newType = Token.ASSIGN_BITOR;",
      "info" : "ExpressionStatement[10285-10314]:ExpressionStatement[10361-10390]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[10323-10329]:BreakStatement[10399-10405]"
    }, {
      "left" : "case Token.BITXOR:",
      "right" : "case Token.BITXOR:",
      "info" : "SwitchCase[10336-10354]:SwitchCase[10412-10430]"
    }, {
      "left" : "newType = Token.ASSIGN_BITXOR;",
      "right" : "newType = Token.ASSIGN_BITXOR;",
      "info" : "ExpressionStatement[10363-10393]:ExpressionStatement[10439-10469]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[10402-10408]:BreakStatement[10478-10484]"
    }, {
      "left" : "case Token.DIV:",
      "right" : "case Token.DIV:",
      "info" : "SwitchCase[10415-10430]:SwitchCase[10491-10506]"
    }, {
      "left" : "newType = Token.ASSIGN_DIV;",
      "right" : "newType = Token.ASSIGN_DIV;",
      "info" : "ExpressionStatement[10439-10466]:ExpressionStatement[10515-10542]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[10475-10481]:BreakStatement[10551-10557]"
    }, {
      "left" : "case Token.LSH:",
      "right" : "case Token.LSH:",
      "info" : "SwitchCase[10488-10503]:SwitchCase[10564-10579]"
    }, {
      "left" : "newType = Token.ASSIGN_LSH;",
      "right" : "newType = Token.ASSIGN_LSH;",
      "info" : "ExpressionStatement[10512-10539]:ExpressionStatement[10588-10615]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[10548-10554]:BreakStatement[10624-10630]"
    }, {
      "left" : "case Token.MOD:",
      "right" : "case Token.MOD:",
      "info" : "SwitchCase[10561-10576]:SwitchCase[10637-10652]"
    }, {
      "left" : "newType = Token.ASSIGN_MOD;",
      "right" : "newType = Token.ASSIGN_MOD;",
      "info" : "ExpressionStatement[10585-10612]:ExpressionStatement[10661-10688]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[10621-10627]:BreakStatement[10697-10703]"
    }, {
      "left" : "case Token.MUL:",
      "right" : "case Token.MUL:",
      "info" : "SwitchCase[10634-10649]:SwitchCase[10710-10725]"
    }, {
      "left" : "newType = Token.ASSIGN_MUL;",
      "right" : "newType = Token.ASSIGN_MUL;",
      "info" : "ExpressionStatement[10658-10685]:ExpressionStatement[10734-10761]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[10694-10700]:BreakStatement[10770-10776]"
    }, {
      "left" : "case Token.RSH:",
      "right" : "case Token.RSH:",
      "info" : "SwitchCase[10707-10722]:SwitchCase[10783-10798]"
    }, {
      "left" : "newType = Token.ASSIGN_RSH;",
      "right" : "newType = Token.ASSIGN_RSH;",
      "info" : "ExpressionStatement[10731-10758]:ExpressionStatement[10807-10834]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[10767-10773]:BreakStatement[10843-10849]"
    }, {
      "left" : "case Token.SUB:",
      "right" : "case Token.SUB:",
      "info" : "SwitchCase[10780-10795]:SwitchCase[10856-10871]"
    }, {
      "left" : "newType = Token.ASSIGN_SUB;",
      "right" : "newType = Token.ASSIGN_SUB;",
      "info" : "ExpressionStatement[10804-10831]:ExpressionStatement[10880-10907]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[10840-10846]:BreakStatement[10916-10922]"
    }, {
      "left" : "case Token.URSH:",
      "right" : "case Token.URSH:",
      "info" : "SwitchCase[10853-10869]:SwitchCase[10929-10945]"
    }, {
      "left" : "newType = Token.ASSIGN_URSH;",
      "right" : "newType = Token.ASSIGN_URSH;",
      "info" : "ExpressionStatement[10878-10906]:ExpressionStatement[10954-10982]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[10915-10921]:BreakStatement[10991-10997]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[10928-10936]:SwitchCase[11004-11012]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[10945-10954]:ReturnStatement[11021-11030]"
    }, {
      "left" : "Node newNode = new Node(newType,\n        left.detachFromParent(), right.getLastChild().detachFromParent());",
      "right" : "Node newNode = new Node(newType,\n        left.detachFromParent(), right.getLastChild().detachFromParent());",
      "info" : "VariableDeclarationStatement[10966-11073]:VariableDeclarationStatement[11042-11149]"
    }, {
      "left" : "n.getParent().replaceChild(n, newNode);",
      "right" : "n.getParent().replaceChild(n, newNode);",
      "info" : "ExpressionStatement[11078-11117]:ExpressionStatement[11154-11193]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[11123-11142]:ExpressionStatement[11199-11218]"
    }, {
      "left" : "return newNode;",
      "right" : "return newNode;",
      "info" : "ReturnStatement[11148-11163]:ReturnStatement[11224-11239]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[11215-11222]:Modifier[11291-11298]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[11223-11227]:SimpleType[11299-11303]"
    }, {
      "left" : "tryFoldAndOr",
      "right" : "tryFoldAndOr",
      "info" : "SimpleName[11228-11240]:SimpleName[11304-11316]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[11241-11247]:SingleVariableDeclaration[11317-11323]"
    }, {
      "left" : "Node left",
      "right" : "Node left",
      "info" : "SingleVariableDeclaration[11249-11258]:SingleVariableDeclaration[11325-11334]"
    }, {
      "left" : "Node right",
      "right" : "Node right",
      "info" : "SingleVariableDeclaration[11260-11270]:SingleVariableDeclaration[11336-11346]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11272-13503]:Block[11348-13579]"
    }, {
      "left" : "Node parent = n.getParent();",
      "right" : "Node parent = n.getParent();",
      "info" : "VariableDeclarationStatement[11278-11306]:VariableDeclarationStatement[11354-11382]"
    }, {
      "left" : "Node result = null;",
      "right" : "Node result = null;",
      "info" : "VariableDeclarationStatement[11312-11331]:VariableDeclarationStatement[11388-11407]"
    }, {
      "left" : "int type = n.getType();",
      "right" : "int type = n.getType();",
      "info" : "VariableDeclarationStatement[11337-11360]:VariableDeclarationStatement[11413-11436]"
    }, {
      "left" : "TernaryValue leftVal = NodeUtil.getBooleanValue(left);",
      "right" : "TernaryValue leftVal = NodeUtil.getBooleanValue(left);",
      "info" : "VariableDeclarationStatement[11366-11420]:VariableDeclarationStatement[11442-11496]"
    }, {
      "left" : "if (leftVal != TernaryValue.UNKNOWN)",
      "right" : "if (leftVal != TernaryValue.UNKNOWN)",
      "info" : "IfStatement[11426-13139]:IfStatement[11502-13215]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11463-11805]:Block[11539-11881]"
    }, {
      "left" : "boolean lval = leftVal.toBoolean(true);",
      "right" : "boolean lval = leftVal.toBoolean(true);",
      "info" : "VariableDeclarationStatement[11471-11510]:VariableDeclarationStatement[11547-11586]"
    }, {
      "left" : "if (lval && type == Token.OR ||\n          !lval && type == Token.AND)",
      "right" : "if (lval && type == Token.OR ||\n          !lval && type == Token.AND)",
      "info" : "IfStatement[11600-11799]:IfStatement[11676-11875]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11670-11703]:Block[11746-11779]"
    }, {
      "left" : "result = left;",
      "right" : "result = left;",
      "info" : "ExpressionStatement[11680-11694]:ExpressionStatement[11756-11770]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11709-11799]:Block[11785-11875]"
    }, {
      "left" : "result = right;",
      "right" : "result = right;",
      "info" : "ExpressionStatement[11776-11791]:ExpressionStatement[11852-11867]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11811-13139]:Block[11887-13215]"
    }, {
      "left" : "TernaryValue rightVal = NodeUtil.getBooleanValue(right);",
      "right" : "TernaryValue rightVal = NodeUtil.getBooleanValue(right);",
      "info" : "VariableDeclarationStatement[11819-11875]:VariableDeclarationStatement[11895-11951]"
    }, {
      "left" : "if (rightVal != TernaryValue.UNKNOWN)",
      "right" : "if (rightVal != TernaryValue.UNKNOWN)",
      "info" : "IfStatement[11882-13133]:IfStatement[11958-13209]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11920-13133]:Block[11996-13209]"
    }, {
      "left" : "int pt = parent.getType();",
      "right" : "int pt = parent.getType();",
      "info" : "VariableDeclarationStatement[12436-12462]:VariableDeclarationStatement[12512-12538]"
    }, {
      "left" : "if (pt == Token.IF || pt == Token.WHILE || pt == Token.DO ||\n          (pt == Token.FOR && NodeUtil.getConditionExpression(parent) == n) ||\n          (pt == Token.HOOK && parent.getFirstChild() == n))",
      "right" : "if (pt == Token.IF || pt == Token.WHILE || pt == Token.DO ||\n          (pt == Token.FOR && NodeUtil.getConditionExpression(parent) == n) ||\n          (pt == Token.HOOK && parent.getFirstChild() == n))",
      "info" : "IfStatement[12469-13125]:IfStatement[12545-13201]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12670-13125]:Block[12746-13201]"
    }, {
      "left" : "boolean rval = rightVal.toBoolean(true);",
      "right" : "boolean rval = rightVal.toBoolean(true);",
      "info" : "VariableDeclarationStatement[12680-12720]:VariableDeclarationStatement[12756-12796]"
    }, {
      "left" : "if (type == Token.OR && !rval ||\n            type == Token.AND && rval)",
      "right" : "if (type == Token.OR && !rval ||\n            type == Token.AND && rval)",
      "info" : "IfStatement[12787-13115]:IfStatement[12863-13191]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12859-12895]:Block[12935-12971]"
    }, {
      "left" : "result = left;",
      "right" : "result = left;",
      "info" : "ExpressionStatement[12871-12885]:ExpressionStatement[12947-12961]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12901-13115]:Block[12977-13191]"
    }, {
      "left" : "if (!NodeUtil.mayHaveSideEffects(left))",
      "right" : "if (!NodeUtil.mayHaveSideEffects(left))",
      "info" : "IfStatement[13024-13105]:IfStatement[13100-13181]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13064-13105]:Block[13140-13181]"
    }, {
      "left" : "result = right;",
      "right" : "result = right;",
      "info" : "ExpressionStatement[13078-13093]:ExpressionStatement[13154-13169]"
    }, {
      "left" : "if (result != null)",
      "right" : "if (result != null)",
      "info" : "IfStatement[13310-13499]:IfStatement[13386-13575]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13330-13470]:Block[13406-13546]"
    }, {
      "left" : "n.removeChild(result);",
      "right" : "n.removeChild(result);",
      "info" : "ExpressionStatement[13356-13378]:ExpressionStatement[13432-13454]"
    }, {
      "left" : "parent.replaceChild(n, result);",
      "right" : "parent.replaceChild(n, result);",
      "info" : "ExpressionStatement[13385-13416]:ExpressionStatement[13461-13492]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[13423-13442]:ExpressionStatement[13499-13518]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[13450-13464]:ReturnStatement[13526-13540]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13476-13499]:Block[13552-13575]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[13484-13493]:ReturnStatement[13560-13569]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[14041-14048]:Modifier[14117-14124]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[14049-14053]:SimpleType[14125-14129]"
    }, {
      "left" : "tryFoldLeftChildAdd",
      "right" : "tryFoldLeftChildAdd",
      "info" : "SimpleName[14054-14073]:SimpleName[14130-14149]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[14074-14080]:SingleVariableDeclaration[14150-14156]"
    }, {
      "left" : "Node left",
      "right" : "Node left",
      "info" : "SingleVariableDeclaration[14082-14091]:SingleVariableDeclaration[14158-14167]"
    }, {
      "left" : "Node right",
      "right" : "Node right",
      "info" : "SingleVariableDeclaration[14093-14103]:SingleVariableDeclaration[14169-14179]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14105-14989]:Block[14181-15065]"
    }, {
      "left" : "if (NodeUtil.isLiteralValue(right) &&\n        left.getType() == Token.ADD &&\n        left.getChildCount() == 2)",
      "right" : "if (NodeUtil.isLiteralValue(right) &&\n        left.getType() == Token.ADD &&\n        left.getChildCount() == 2)",
      "info" : "IfStatement[14112-14970]:IfStatement[14188-15046]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14224-14970]:Block[14300-15046]"
    }, {
      "left" : "Node ll = left.getFirstChild();",
      "right" : "Node ll = left.getFirstChild();",
      "info" : "VariableDeclarationStatement[14233-14264]:VariableDeclarationStatement[14309-14340]"
    }, {
      "left" : "Node lr = ll.getNext();",
      "right" : "Node lr = ll.getNext();",
      "info" : "VariableDeclarationStatement[14271-14294]:VariableDeclarationStatement[14347-14370]"
    }, {
      "left" : "if (lr.getType() != Token.STRING)",
      "right" : "if (lr.getType() != Token.STRING)",
      "info" : "IfStatement[14528-14589]:IfStatement[14604-14665]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14562-14589]:Block[14638-14665]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[14572-14581]:ReturnStatement[14648-14657]"
    }, {
      "left" : "String leftString = NodeUtil.getStringValue(lr);",
      "right" : "String leftString = NodeUtil.getStringValue(lr);",
      "info" : "VariableDeclarationStatement[14597-14645]:VariableDeclarationStatement[14673-14721]"
    }, {
      "left" : "String rightString = NodeUtil.getStringValue(right);",
      "right" : "String rightString = NodeUtil.getStringValue(right);",
      "info" : "VariableDeclarationStatement[14652-14704]:VariableDeclarationStatement[14728-14780]"
    }, {
      "left" : "if (leftString != null && rightString != null)",
      "right" : "if (leftString != null && rightString != null)",
      "info" : "IfStatement[14711-14964]:IfStatement[14787-15040]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14758-14964]:Block[14834-15040]"
    }, {
      "left" : "left.removeChild(ll);",
      "right" : "left.removeChild(ll);",
      "info" : "ExpressionStatement[14768-14789]:ExpressionStatement[14844-14865]"
    }, {
      "left" : "String result = leftString + rightString;",
      "right" : "String result = leftString + rightString;",
      "info" : "VariableDeclarationStatement[14798-14839]:VariableDeclarationStatement[14874-14915]"
    }, {
      "left" : "n.replaceChild(left, ll);",
      "right" : "n.replaceChild(left, ll);",
      "info" : "ExpressionStatement[14848-14873]:ExpressionStatement[14924-14949]"
    }, {
      "left" : "n.replaceChild(right, Node.newString(result));",
      "right" : "n.replaceChild(right, Node.newString(result));",
      "info" : "ExpressionStatement[14882-14928]:ExpressionStatement[14958-15004]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[14937-14956]:ExpressionStatement[15013-15032]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[14976-14985]:ReturnStatement[15052-15061]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[15057-15064]:Modifier[15133-15140]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[15065-15069]:SimpleType[15141-15145]"
    }, {
      "left" : "tryFoldAddConstant",
      "right" : "tryFoldAddConstant",
      "info" : "SimpleName[15070-15088]:SimpleName[15146-15164]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[15089-15095]:SingleVariableDeclaration[15165-15171]"
    }, {
      "left" : "Node left",
      "right" : "Node left",
      "info" : "SingleVariableDeclaration[15097-15106]:SingleVariableDeclaration[15173-15182]"
    }, {
      "left" : "Node right",
      "right" : "Node right",
      "info" : "SingleVariableDeclaration[15108-15118]:SingleVariableDeclaration[15184-15194]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15120-15705]:Block[15196-15781]"
    }, {
      "left" : "if (left.getType() == Token.STRING ||\n        right.getType() == Token.STRING)",
      "right" : "if (left.getType() == Token.STRING ||\n        right.getType() == Token.STRING)",
      "info" : "IfStatement[15126-15686]:IfStatement[15202-15762]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15205-15597]:Block[15281-15673]"
    }, {
      "left" : "String leftString = NodeUtil.getStringValue(left);",
      "right" : "String leftString = NodeUtil.getStringValue(left);",
      "info" : "VariableDeclarationStatement[15236-15286]:VariableDeclarationStatement[15312-15362]"
    }, {
      "left" : "String rightString = NodeUtil.getStringValue(right);",
      "right" : "String rightString = NodeUtil.getStringValue(right);",
      "info" : "VariableDeclarationStatement[15293-15345]:VariableDeclarationStatement[15369-15421]"
    }, {
      "left" : "if (leftString != null && rightString != null)",
      "right" : "if (leftString != null && rightString != null)",
      "info" : "IfStatement[15352-15591]:IfStatement[15428-15667]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15399-15591]:Block[15475-15667]"
    }, {
      "left" : "Node newStringNode = Node.newString(leftString + rightString);",
      "right" : "Node newStringNode = Node.newString(leftString + rightString);",
      "info" : "VariableDeclarationStatement[15409-15471]:VariableDeclarationStatement[15485-15547]"
    }, {
      "left" : "n.getParent().replaceChild(n, newStringNode);",
      "right" : "n.getParent().replaceChild(n, newStringNode);",
      "info" : "ExpressionStatement[15480-15525]:ExpressionStatement[15556-15601]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[15534-15553]:ExpressionStatement[15610-15629]"
    }, {
      "left" : "return newStringNode;",
      "right" : "return newStringNode;",
      "info" : "ReturnStatement[15562-15583]:ReturnStatement[15638-15659]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15603-15686]:Block[15679-15762]"
    }, {
      "left" : "return tryFoldArithmetic(n, left, right);",
      "right" : "return tryFoldArithmetic(n, left, right);",
      "info" : "ReturnStatement[15639-15680]:ReturnStatement[15715-15756]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[15692-15701]:ReturnStatement[15768-15777]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[15766-15773]:Modifier[15842-15849]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[15774-15778]:SimpleType[15850-15854]"
    }, {
      "left" : "tryFoldArithmetic",
      "right" : "tryFoldArithmetic",
      "info" : "SimpleName[15779-15796]:SimpleName[15855-15872]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[15797-15803]:SingleVariableDeclaration[15873-15879]"
    }, {
      "left" : "Node left",
      "right" : "Node left",
      "info" : "SingleVariableDeclaration[15805-15814]:SingleVariableDeclaration[15881-15890]"
    }, {
      "left" : "Node right",
      "right" : "Node right",
      "info" : "SingleVariableDeclaration[15816-15826]:SingleVariableDeclaration[15892-15902]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15828-17111]:Block[15904-17187]"
    }, {
      "left" : "if (left.getType() == Token.NUMBER &&\n        right.getType() == Token.NUMBER)",
      "right" : "if (left.getType() == Token.NUMBER &&\n        right.getType() == Token.NUMBER)",
      "info" : "IfStatement[15834-17093]:IfStatement[15910-17169]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15913-17093]:Block[15989-17169]"
    }, {
      "left" : "double result;",
      "right" : "double result;",
      "info" : "VariableDeclarationStatement[15921-15935]:VariableDeclarationStatement[15997-16011]"
    }, {
      "left" : "double lval = left.getDouble();",
      "right" : "double lval = left.getDouble();",
      "info" : "VariableDeclarationStatement[15942-15973]:VariableDeclarationStatement[16018-16049]"
    }, {
      "left" : "double rval = right.getDouble();",
      "right" : "double rval = right.getDouble();",
      "info" : "VariableDeclarationStatement[15980-16012]:VariableDeclarationStatement[16056-16088]"
    }, {
      "left" : "switch (n.getType()) {\n        case Token.ADD:\n          result = lval + rval;\n          break;\n        case Token.SUB:\n          result = lval - rval;\n          break;\n        case Token.MUL:\n          result = lval * rval;\n          break;\n        case Token.DIV:\n          if (rval == 0) {\n            error(DIVIDE_BY_0_ERROR, right);\n            return n;\n          }\n          result = lval / rval;\n          break;\n        default:\n          throw new Error(\"Unknown arithmetic operator\");\n      }",
      "right" : "switch (n.getType()) {\n        case Token.ADD:\n          result = lval + rval;\n          break;\n        case Token.SUB:\n          result = lval - rval;\n          break;\n        case Token.MUL:\n          result = lval * rval;\n          break;\n        case Token.DIV:\n          if (rval == 0) {\n            error(DIVIDE_BY_0_ERROR, right);\n            return n;\n          }\n          result = lval / rval;\n          break;\n        default:\n          throw new Error(\"Unknown arithmetic operator\");\n      }",
      "info" : "SwitchStatement[16020-16523]:SwitchStatement[16096-16599]"
    }, {
      "left" : "case Token.ADD:",
      "right" : "case Token.ADD:",
      "info" : "SwitchCase[16051-16066]:SwitchCase[16127-16142]"
    }, {
      "left" : "result = lval + rval;",
      "right" : "result = lval + rval;",
      "info" : "ExpressionStatement[16077-16098]:ExpressionStatement[16153-16174]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[16109-16115]:BreakStatement[16185-16191]"
    }, {
      "left" : "case Token.SUB:",
      "right" : "case Token.SUB:",
      "info" : "SwitchCase[16124-16139]:SwitchCase[16200-16215]"
    }, {
      "left" : "result = lval - rval;",
      "right" : "result = lval - rval;",
      "info" : "ExpressionStatement[16150-16171]:ExpressionStatement[16226-16247]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[16182-16188]:BreakStatement[16258-16264]"
    }, {
      "left" : "case Token.MUL:",
      "right" : "case Token.MUL:",
      "info" : "SwitchCase[16197-16212]:SwitchCase[16273-16288]"
    }, {
      "left" : "result = lval * rval;",
      "right" : "result = lval * rval;",
      "info" : "ExpressionStatement[16223-16244]:ExpressionStatement[16299-16320]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[16255-16261]:BreakStatement[16331-16337]"
    }, {
      "left" : "case Token.DIV:",
      "right" : "case Token.DIV:",
      "info" : "SwitchCase[16270-16285]:SwitchCase[16346-16361]"
    }, {
      "left" : "if (rval == 0)",
      "right" : "if (rval == 0)",
      "info" : "IfStatement[16296-16391]:IfStatement[16372-16467]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16311-16391]:Block[16387-16467]"
    }, {
      "left" : "error(DIVIDE_BY_0_ERROR, right);",
      "right" : "error(DIVIDE_BY_0_ERROR, right);",
      "info" : "ExpressionStatement[16325-16357]:ExpressionStatement[16401-16433]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[16370-16379]:ReturnStatement[16446-16455]"
    }, {
      "left" : "result = lval / rval;",
      "right" : "result = lval / rval;",
      "info" : "ExpressionStatement[16402-16423]:ExpressionStatement[16478-16499]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[16434-16440]:BreakStatement[16510-16516]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[16449-16457]:SwitchCase[16525-16533]"
    }, {
      "left" : "throw new Error(\"Unknown arithmetic operator\");",
      "right" : "throw new Error(\"Unknown arithmetic operator\");",
      "info" : "ThrowStatement[16468-16515]:ThrowStatement[16544-16591]"
    }, {
      "left" : "if (String.valueOf(result).length() <=\n          String.valueOf(lval).length() + String.valueOf(rval).length() + 1 &&\n\n          // Do not try to fold arithmetic for numbers > 2^53. After that\n          // point, fixed-point math starts to break down and become inaccurate.\n          Math.abs(result) <= MAX_FOLD_NUMBER)",
      "right" : "if (String.valueOf(result).length() <=\n          String.valueOf(lval).length() + String.valueOf(rval).length() + 1 &&\n\n          // Do not try to fold arithmetic for numbers > 2^53. After that\n          // point, fixed-point math starts to break down and become inaccurate.\n          Math.abs(result) <= MAX_FOLD_NUMBER)",
      "info" : "IfStatement[16605-17088]:IfStatement[16681-17164]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16926-17088]:Block[17002-17164]"
    }, {
      "left" : "Node newNumber = Node.newNumber(result);",
      "right" : "Node newNumber = Node.newNumber(result);",
      "info" : "VariableDeclarationStatement[16936-16976]:VariableDeclarationStatement[17012-17052]"
    }, {
      "left" : "n.getParent().replaceChild(n, newNumber);",
      "right" : "n.getParent().replaceChild(n, newNumber);",
      "info" : "ExpressionStatement[16985-17026]:ExpressionStatement[17061-17102]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[17035-17054]:ExpressionStatement[17111-17130]"
    }, {
      "left" : "return newNumber;",
      "right" : "return newNumber;",
      "info" : "ReturnStatement[17063-17080]:ReturnStatement[17139-17156]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[17098-17107]:ReturnStatement[17174-17183]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[17115-17122]:Modifier[17191-17198]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[17123-17127]:SimpleType[17199-17203]"
    }, {
      "left" : "tryFoldAdd",
      "right" : "tryFoldAdd",
      "info" : "SimpleName[17128-17138]:SimpleName[17204-17214]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[17139-17148]:SingleVariableDeclaration[17215-17224]"
    }, {
      "left" : "Node left",
      "right" : "Node left",
      "info" : "SingleVariableDeclaration[17150-17159]:SingleVariableDeclaration[17226-17235]"
    }, {
      "left" : "Node right",
      "right" : "Node right",
      "info" : "SingleVariableDeclaration[17161-17171]:SingleVariableDeclaration[17237-17247]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17173-17479]:Block[17249-17555]"
    }, {
      "left" : "Preconditions.checkArgument(node.getType() == Token.ADD);",
      "right" : "Preconditions.checkArgument(node.getType() == Token.ADD);",
      "info" : "ExpressionStatement[17179-17236]:ExpressionStatement[17255-17312]"
    }, {
      "left" : "if (NodeUtil.isLiteralValue(left) && NodeUtil.isLiteralValue(right))",
      "right" : "if (NodeUtil.isLiteralValue(left) && NodeUtil.isLiteralValue(right))",
      "info" : "IfStatement[17242-17475]:IfStatement[17318-17551]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17311-17385]:Block[17387-17461]"
    }, {
      "left" : "return tryFoldAddConstant(node, left, right);",
      "right" : "return tryFoldAddConstant(node, left, right);",
      "info" : "ReturnStatement[17334-17379]:ReturnStatement[17410-17455]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17391-17475]:Block[17467-17551]"
    }, {
      "left" : "return tryFoldLeftChildAdd(node, left, right);",
      "right" : "return tryFoldLeftChildAdd(node, left, right);",
      "info" : "ReturnStatement[17423-17469]:ReturnStatement[17499-17545]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[17540-17547]:Modifier[17616-17623]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[17548-17552]:SimpleType[17624-17628]"
    }, {
      "left" : "tryFoldBitAndOr",
      "right" : "tryFoldBitAndOr",
      "info" : "SimpleName[17553-17568]:SimpleName[17629-17644]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[17569-17575]:SingleVariableDeclaration[17645-17651]"
    }, {
      "left" : "Node left",
      "right" : "Node left",
      "info" : "SingleVariableDeclaration[17577-17586]:SingleVariableDeclaration[17653-17662]"
    }, {
      "left" : "Node right",
      "right" : "Node right",
      "info" : "SingleVariableDeclaration[17588-17598]:SingleVariableDeclaration[17664-17674]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17600-18891]:Block[17676-18967]"
    }, {
      "left" : "Preconditions.checkArgument(n.getType() == Token.BITAND\n        || n.getType() == Token.BITOR);",
      "right" : "Preconditions.checkArgument(n.getType() == Token.BITAND\n        || n.getType() == Token.BITOR);",
      "info" : "ExpressionStatement[17606-17701]:ExpressionStatement[17682-17777]"
    }, {
      "left" : "if (left.getType() == Token.NUMBER &&\n        right.getType() == Token.NUMBER)",
      "right" : "if (left.getType() == Token.NUMBER &&\n        right.getType() == Token.NUMBER)",
      "info" : "IfStatement[17707-18872]:IfStatement[17783-18948]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17786-18872]:Block[17862-18948]"
    }, {
      "left" : "double resultDouble;",
      "right" : "double resultDouble;",
      "info" : "VariableDeclarationStatement[17794-17814]:VariableDeclarationStatement[17870-17890]"
    }, {
      "left" : "double lval = left.getDouble();",
      "right" : "double lval = left.getDouble();",
      "info" : "VariableDeclarationStatement[17821-17852]:VariableDeclarationStatement[17897-17928]"
    }, {
      "left" : "double rval = right.getDouble();",
      "right" : "double rval = right.getDouble();",
      "info" : "VariableDeclarationStatement[17859-17891]:VariableDeclarationStatement[17935-17967]"
    }, {
      "left" : "if (lval < Integer.MIN_VALUE || lval > Integer.MAX_VALUE ||\n          rval < Integer.MIN_VALUE || rval > Integer.MAX_VALUE)",
      "right" : "if (lval < Integer.MIN_VALUE || lval > Integer.MAX_VALUE ||\n          rval < Integer.MIN_VALUE || rval > Integer.MAX_VALUE)",
      "info" : "IfStatement[18014-18240]:IfStatement[18090-18316]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18138-18240]:Block[18214-18316]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[18223-18232]:ReturnStatement[18299-18308]"
    }, {
      "left" : "int lvalInt = (int) lval;",
      "right" : "int lvalInt = (int) lval;",
      "info" : "VariableDeclarationStatement[18285-18310]:VariableDeclarationStatement[18361-18386]"
    }, {
      "left" : "if (lvalInt != lval)",
      "right" : "if (lvalInt != lval)",
      "info" : "IfStatement[18317-18365]:IfStatement[18393-18441]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18338-18365]:Block[18414-18441]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[18348-18357]:ReturnStatement[18424-18433]"
    }, {
      "left" : "int rvalInt = (int) rval;",
      "right" : "int rvalInt = (int) rval;",
      "info" : "VariableDeclarationStatement[18373-18398]:VariableDeclarationStatement[18449-18474]"
    }, {
      "left" : "if (rvalInt != rval)",
      "right" : "if (rvalInt != rval)",
      "info" : "IfStatement[18405-18453]:IfStatement[18481-18529]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18426-18453]:Block[18502-18529]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[18436-18445]:ReturnStatement[18512-18521]"
    }, {
      "left" : "switch (n.getType()) {\n        case Token.BITAND:\n          resultDouble = lvalInt & rvalInt;\n          break;\n        case Token.BITOR:\n          resultDouble = lvalInt | rvalInt;\n          break;\n        default:\n          throw new Error(\"Unknown bitwise operator\");\n      }",
      "right" : "switch (n.getType()) {\n        case Token.BITAND:\n          resultDouble = lvalInt & rvalInt;\n          break;\n        case Token.BITOR:\n          resultDouble = lvalInt | rvalInt;\n          break;\n        default:\n          throw new Error(\"Unknown bitwise operator\");\n      }",
      "info" : "SwitchStatement[18461-18738]:SwitchStatement[18537-18814]"
    }, {
      "left" : "case Token.BITAND:",
      "right" : "case Token.BITAND:",
      "info" : "SwitchCase[18492-18510]:SwitchCase[18568-18586]"
    }, {
      "left" : "resultDouble = lvalInt & rvalInt;",
      "right" : "resultDouble = lvalInt & rvalInt;",
      "info" : "ExpressionStatement[18521-18554]:ExpressionStatement[18597-18630]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[18565-18571]:BreakStatement[18641-18647]"
    }, {
      "left" : "case Token.BITOR:",
      "right" : "case Token.BITOR:",
      "info" : "SwitchCase[18580-18597]:SwitchCase[18656-18673]"
    }, {
      "left" : "resultDouble = lvalInt | rvalInt;",
      "right" : "resultDouble = lvalInt | rvalInt;",
      "info" : "ExpressionStatement[18608-18641]:ExpressionStatement[18684-18717]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[18652-18658]:BreakStatement[18728-18734]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[18667-18675]:SwitchCase[18743-18751]"
    }, {
      "left" : "throw new Error(\"Unknown bitwise operator\");",
      "right" : "throw new Error(\"Unknown bitwise operator\");",
      "info" : "ThrowStatement[18686-18730]:ThrowStatement[18762-18806]"
    }, {
      "left" : "Node newNumber = Node.newNumber(resultDouble);",
      "right" : "Node newNumber = Node.newNumber(resultDouble);",
      "info" : "VariableDeclarationStatement[18746-18792]:VariableDeclarationStatement[18822-18868]"
    }, {
      "left" : "n.getParent().replaceChild(n, newNumber);",
      "right" : "n.getParent().replaceChild(n, newNumber);",
      "info" : "ExpressionStatement[18799-18840]:ExpressionStatement[18875-18916]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[18847-18866]:ExpressionStatement[18923-18942]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[18878-18887]:ReturnStatement[18954-18963]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[18941-18948]:Modifier[19017-19024]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[18949-18953]:SimpleType[19025-19029]"
    }, {
      "left" : "tryFoldShift",
      "right" : "tryFoldShift",
      "info" : "SimpleName[18954-18966]:SimpleName[19030-19042]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[18967-18973]:SingleVariableDeclaration[19043-19049]"
    }, {
      "left" : "Node left",
      "right" : "Node left",
      "info" : "SingleVariableDeclaration[18975-18984]:SingleVariableDeclaration[19051-19060]"
    }, {
      "left" : "Node right",
      "right" : "Node right",
      "info" : "SingleVariableDeclaration[18986-18996]:SingleVariableDeclaration[19062-19072]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18998-20607]:Block[19074-20683]"
    }, {
      "left" : "if (left.getType() == Token.NUMBER &&\n        right.getType() == Token.NUMBER)",
      "right" : "if (left.getType() == Token.NUMBER &&\n        right.getType() == Token.NUMBER)",
      "info" : "IfStatement[19004-20588]:IfStatement[19080-20664]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19083-20588]:Block[19159-20664]"
    }, {
      "left" : "double result;",
      "right" : "double result;",
      "info" : "VariableDeclarationStatement[19092-19106]:VariableDeclarationStatement[19168-19182]"
    }, {
      "left" : "double lval = left.getDouble();",
      "right" : "double lval = left.getDouble();",
      "info" : "VariableDeclarationStatement[19113-19144]:VariableDeclarationStatement[19189-19220]"
    }, {
      "left" : "double rval = right.getDouble();",
      "right" : "double rval = right.getDouble();",
      "info" : "VariableDeclarationStatement[19151-19183]:VariableDeclarationStatement[19227-19259]"
    }, {
      "left" : "if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE))",
      "right" : "if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE))",
      "info" : "IfStatement[19336-19477]:IfStatement[19412-19553]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19399-19477]:Block[19475-19553]"
    }, {
      "left" : "error(BITWISE_OPERAND_OUT_OF_RANGE, left);",
      "right" : "error(BITWISE_OPERAND_OUT_OF_RANGE, left);",
      "info" : "ExpressionStatement[19409-19451]:ExpressionStatement[19485-19527]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[19460-19469]:ReturnStatement[19536-19545]"
    }, {
      "left" : "if (!(rval >= 0 && rval < 32))",
      "right" : "if (!(rval >= 0 && rval < 32))",
      "info" : "IfStatement[19608-19716]:IfStatement[19684-19792]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19639-19716]:Block[19715-19792]"
    }, {
      "left" : "error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);",
      "right" : "error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);",
      "info" : "ExpressionStatement[19649-19690]:ExpressionStatement[19725-19766]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[19699-19708]:ReturnStatement[19775-19784]"
    }, {
      "left" : "int lvalInt = (int) lval;",
      "right" : "int lvalInt = (int) lval;",
      "info" : "VariableDeclarationStatement[19761-19786]:VariableDeclarationStatement[19837-19862]"
    }, {
      "left" : "if (lvalInt != lval)",
      "right" : "if (lvalInt != lval)",
      "info" : "IfStatement[19793-19890]:IfStatement[19869-19966]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19814-19890]:Block[19890-19966]"
    }, {
      "left" : "error(FRACTIONAL_BITWISE_OPERAND, left);",
      "right" : "error(FRACTIONAL_BITWISE_OPERAND, left);",
      "info" : "ExpressionStatement[19824-19864]:ExpressionStatement[19900-19940]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[19873-19882]:ReturnStatement[19949-19958]"
    }, {
      "left" : "int rvalInt = (int) rval;",
      "right" : "int rvalInt = (int) rval;",
      "info" : "VariableDeclarationStatement[19898-19923]:VariableDeclarationStatement[19974-19999]"
    }, {
      "left" : "if (rvalInt != rval)",
      "right" : "if (rvalInt != rval)",
      "info" : "IfStatement[19930-20028]:IfStatement[20006-20104]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19951-20028]:Block[20027-20104]"
    }, {
      "left" : "error(FRACTIONAL_BITWISE_OPERAND, right);",
      "right" : "error(FRACTIONAL_BITWISE_OPERAND, right);",
      "info" : "ExpressionStatement[19961-20002]:ExpressionStatement[20037-20078]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[20011-20020]:ReturnStatement[20087-20096]"
    }, {
      "left" : "switch (n.getType()) {\n        case Token.LSH:\n          result = lvalInt << rvalInt;\n          break;\n        case Token.RSH:\n          result = lvalInt >> rvalInt;\n          break;\n        case Token.URSH:\n          result = lvalInt >>> rvalInt;\n          break;\n        default:\n          throw new AssertionError(\"Unknown shift operator: \" +\n              Node.tokenToName(n.getType()));\n      }",
      "right" : "switch (n.getType()) {\n        case Token.LSH:\n          result = lvalInt << rvalInt;\n          break;\n        case Token.RSH:\n          result = lvalInt >> rvalInt;\n          break;\n        case Token.URSH:\n          result = lvalInt >>> rvalInt;\n          break;\n        default:\n          throw new AssertionError(\"Unknown shift operator: \" +\n              Node.tokenToName(n.getType()));\n      }",
      "info" : "SwitchStatement[20036-20435]:SwitchStatement[20112-20511]"
    }, {
      "left" : "case Token.LSH:",
      "right" : "case Token.LSH:",
      "info" : "SwitchCase[20067-20082]:SwitchCase[20143-20158]"
    }, {
      "left" : "result = lvalInt << rvalInt;",
      "right" : "result = lvalInt << rvalInt;",
      "info" : "ExpressionStatement[20093-20121]:ExpressionStatement[20169-20197]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[20132-20138]:BreakStatement[20208-20214]"
    }, {
      "left" : "case Token.RSH:",
      "right" : "case Token.RSH:",
      "info" : "SwitchCase[20147-20162]:SwitchCase[20223-20238]"
    }, {
      "left" : "result = lvalInt >> rvalInt;",
      "right" : "result = lvalInt >> rvalInt;",
      "info" : "ExpressionStatement[20173-20201]:ExpressionStatement[20249-20277]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[20212-20218]:BreakStatement[20288-20294]"
    }, {
      "left" : "case Token.URSH:",
      "right" : "case Token.URSH:",
      "info" : "SwitchCase[20227-20243]:SwitchCase[20303-20319]"
    }, {
      "left" : "result = lvalInt >>> rvalInt;",
      "right" : "result = lvalInt >>> rvalInt;",
      "info" : "ExpressionStatement[20254-20283]:ExpressionStatement[20330-20359]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[20294-20300]:BreakStatement[20370-20376]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[20309-20317]:SwitchCase[20385-20393]"
    }, {
      "left" : "throw new AssertionError(\"Unknown shift operator: \" +\n              Node.tokenToName(n.getType()));",
      "right" : "throw new AssertionError(\"Unknown shift operator: \" +\n              Node.tokenToName(n.getType()));",
      "info" : "ThrowStatement[20328-20427]:ThrowStatement[20404-20503]"
    }, {
      "left" : "Node newNumber = Node.newNumber(result);",
      "right" : "Node newNumber = Node.newNumber(result);",
      "info" : "VariableDeclarationStatement[20443-20483]:VariableDeclarationStatement[20519-20559]"
    }, {
      "left" : "n.getParent().replaceChild(n, newNumber);",
      "right" : "n.getParent().replaceChild(n, newNumber);",
      "info" : "ExpressionStatement[20490-20531]:ExpressionStatement[20566-20607]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[20538-20557]:ExpressionStatement[20614-20633]"
    }, {
      "left" : "return newNumber;",
      "right" : "return newNumber;",
      "info" : "ReturnStatement[20565-20582]:ReturnStatement[20641-20658]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[20594-20603]:ReturnStatement[20670-20679]"
    }, {
      "left" : "@SuppressWarnings(\"fallthrough\")",
      "right" : "@SuppressWarnings(\"fallthrough\")",
      "info" : "SingleMemberAnnotation[20665-20697]:SingleMemberAnnotation[20741-20773]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[20700-20707]:Modifier[20776-20783]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[20708-20712]:SimpleType[20784-20788]"
    }, {
      "left" : "tryFoldComparison",
      "right" : "tryFoldComparison",
      "info" : "SimpleName[20713-20730]:SimpleName[20789-20806]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[20731-20737]:SingleVariableDeclaration[20807-20813]"
    }, {
      "left" : "Node left",
      "right" : "Node left",
      "info" : "SingleVariableDeclaration[20739-20748]:SingleVariableDeclaration[20815-20824]"
    }, {
      "left" : "Node right",
      "right" : "Node right",
      "info" : "SingleVariableDeclaration[20750-20760]:SingleVariableDeclaration[20826-20836]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20762-26545]:Block[20838-26621]"
    }, {
      "left" : "if (!NodeUtil.isLiteralValue(left) || !NodeUtil.isLiteralValue(right))",
      "right" : "if (!NodeUtil.isLiteralValue(left) || !NodeUtil.isLiteralValue(right))",
      "info" : "IfStatement[20768-20996]:IfStatement[20844-21072]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20839-20996]:Block[20915-21072]"
    }, {
      "left" : "if (n.getType() != Token.GT && n.getType() != Token.LT)",
      "right" : "if (n.getType() != Token.GT && n.getType() != Token.LT)",
      "info" : "IfStatement[20907-20990]:IfStatement[20983-21066]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20963-20990]:Block[21039-21066]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[20973-20982]:ReturnStatement[21049-21058]"
    }, {
      "left" : "int op = n.getType();",
      "right" : "int op = n.getType();",
      "info" : "VariableDeclarationStatement[21002-21023]:VariableDeclarationStatement[21078-21099]"
    }, {
      "left" : "boolean result;",
      "right" : "boolean result;",
      "info" : "VariableDeclarationStatement[21028-21043]:VariableDeclarationStatement[21104-21119]"
    }, {
      "left" : "boolean rightLiteral = NodeUtil.isLiteralValue(right);",
      "right" : "boolean rightLiteral = NodeUtil.isLiteralValue(right);",
      "info" : "VariableDeclarationStatement[21125-21179]:VariableDeclarationStatement[21201-21255]"
    }, {
      "left" : "boolean undefinedRight = ((Token.NAME == right.getType()\n          && right.getString().equals(\"undefined\"))\n          || (Token.VOID == right.getType()\n              && NodeUtil.isLiteralValue(right.getFirstChild())));",
      "right" : "boolean undefinedRight = ((Token.NAME == right.getType()\n          && right.getString().equals(\"undefined\"))\n          || (Token.VOID == right.getType()\n              && NodeUtil.isLiteralValue(right.getFirstChild())));",
      "info" : "VariableDeclarationStatement[21184-21403]:VariableDeclarationStatement[21260-21479]"
    }, {
      "left" : "switch (left.getType()) {\n      case Token.VOID:\n        if (!NodeUtil.isLiteralValue(left.getFirstChild())) {\n          return n;\n        } else if (!rightLiteral) {\n          return n;\n        } else {\n          boolean nullRight = (Token.NULL == right.getType());\n          boolean equivalent = undefinedRight || nullRight;\n          switch (op) {\n            case Token.EQ:\n              // undefined is only equal to\n              result = equivalent;\n              break;\n            case Token.NE:\n              result = !equivalent;\n              break;\n            case Token.SHEQ:\n              result = undefinedRight;\n              break;\n            case Token.SHNE:\n              result = !undefinedRight;\n              break;\n            case Token.LT:\n            case Token.GT:\n            case Token.LE:\n            case Token.GE:\n              result = false;\n              break;\n            default:\n              return n;\n          }\n        }\n        break;\n\n      case Token.NULL:\n        if (undefinedRight) {\n          result = (op == Token.EQ);\n          break;\n        }\n        // fall through\n      case Token.TRUE:\n      case Token.FALSE:\n        if (undefinedRight) {\n          result = false;\n          break;\n        }\n        // fall through\n      case Token.THIS:\n        int tt = right.getType();\n        if (tt != Token.THIS &&\n            tt != Token.TRUE &&\n            tt != Token.FALSE &&\n            tt != Token.NULL) {\n          return n;\n        }\n        switch (op) {\n          case Token.SHEQ:\n          case Token.EQ:\n            result = left.getType() == right.getType();\n            break;\n\n          case Token.SHNE:\n          case Token.NE:\n            result = left.getType() != right.getType();\n            break;\n\n          default:\n            return n;  // we only handle == and != here\n        }\n        break;\n\n      case Token.STRING:\n        if (undefinedRight) {\n          result = false;\n          break;\n        }\n        if (Token.STRING != right.getType()) {\n          return n;  // Only eval if they are the same type\n        }\n        switch (op) {\n          case Token.SHEQ:\n          case Token.EQ:\n            result = left.getString().equals(right.getString());\n            break;\n\n          case Token.SHNE:\n          case Token.NE:\n            result = !left.getString().equals(right.getString());\n            break;\n\n          default:\n            return n;  // we only handle == and != here\n        }\n        break;\n\n      case Token.NUMBER:\n        if (undefinedRight) {\n          result = false;\n          break;\n        }\n        if (Token.NUMBER != right.getType()) {\n          return n;  // Only eval if they are the same type\n        }\n        double lv = left.getDouble();\n        double rv = right.getDouble();\n\n        switch (op) {\n          case Token.SHEQ:\n          case Token.EQ: result = lv == rv; break;\n          case Token.SHNE:\n          case Token.NE: result = lv != rv; break;\n          case Token.LE: result = lv <= rv; break;\n          case Token.LT: result = lv <  rv; break;\n          case Token.GE: result = lv >= rv; break;\n          case Token.GT: result = lv >  rv; break;\n          default:\n            return n;  // don't handle that op\n        }\n        break;\n\n      case Token.NAME:\n        if (rightLiteral) {\n          boolean undefinedLeft = (left.getString().equals(\"undefined\"));\n          if (undefinedLeft) {\n            boolean nullRight = (Token.NULL == right.getType());\n            boolean equivalent = undefinedRight || nullRight;\n            switch (op) {\n              case Token.EQ:\n                // undefined is only equal to\n                result = equivalent;\n                break;\n              case Token.NE:\n                result = !equivalent;\n                break;\n              case Token.SHEQ:\n                result = undefinedRight;\n                break;\n              case Token.SHNE:\n                result = !undefinedRight;\n                break;\n              case Token.LT:\n              case Token.GT:\n              case Token.LE:\n              case Token.GE:\n                result = false;\n                break;\n              default:\n                return n;\n            }\n            break;\n          }\n        }\n\n        if (Token.NAME != right.getType()) {\n          return n;  // Only eval if they are the same type\n        }\n        String ln = left.getString();\n        String rn = right.getString();\n        if (!ln.equals(rn)) {\n          return n;  // Not the same value name.\n        }\n\n        switch (op) {\n          // If we knew the named value wouldn't be NaN, it would be nice\n          // to handle EQ,NE,LE,GE,SHEQ, and SHNE.\n          case Token.LT:\n          case Token.GT:\n            result = false;\n            break;\n          default:\n            return n;  // don't handle that op\n        }\n        break;\n\n      default:\n        // assert, this should cover all consts\n        return n;\n    }",
      "right" : "switch (left.getType()) {\n      case Token.VOID:\n        if (!NodeUtil.isLiteralValue(left.getFirstChild())) {\n          return n;\n        } else if (!rightLiteral) {\n          return n;\n        } else {\n          boolean nullRight = (Token.NULL == right.getType());\n          boolean equivalent = undefinedRight || nullRight;\n          switch (op) {\n            case Token.EQ:\n              // undefined is only equal to\n              result = equivalent;\n              break;\n            case Token.NE:\n              result = !equivalent;\n              break;\n            case Token.SHEQ:\n              result = undefinedRight;\n              break;\n            case Token.SHNE:\n              result = !undefinedRight;\n              break;\n            case Token.LT:\n            case Token.GT:\n            case Token.LE:\n            case Token.GE:\n              result = false;\n              break;\n            default:\n              return n;\n          }\n        }\n        break;\n\n      case Token.NULL:\n        if (undefinedRight) {\n          result = (op == Token.EQ);\n          break;\n        }\n        // fall through\n      case Token.TRUE:\n      case Token.FALSE:\n        if (undefinedRight) {\n          result = false;\n          break;\n        }\n        // fall through\n      case Token.THIS:\n        int tt = right.getType();\n        if (tt != Token.THIS &&\n            tt != Token.TRUE &&\n            tt != Token.FALSE &&\n            tt != Token.NULL) {\n          return n;\n        }\n        switch (op) {\n          case Token.SHEQ:\n          case Token.EQ:\n            result = left.getType() == right.getType();\n            break;\n\n          case Token.SHNE:\n          case Token.NE:\n            result = left.getType() != right.getType();\n            break;\n\n          default:\n            return n;  // we only handle == and != here\n        }\n        break;\n\n      case Token.STRING:\n        if (undefinedRight) {\n          result = false;\n          break;\n        }\n        if (Token.STRING != right.getType()) {\n          return n;  // Only eval if they are the same type\n        }\n        switch (op) {\n          case Token.SHEQ:\n          case Token.EQ:\n            result = left.getString().equals(right.getString());\n            break;\n\n          case Token.SHNE:\n          case Token.NE:\n            result = !left.getString().equals(right.getString());\n            break;\n\n          default:\n            return n;  // we only handle == and != here\n        }\n        break;\n\n      case Token.NUMBER:\n        if (undefinedRight) {\n          result = false;\n          break;\n        }\n        if (Token.NUMBER != right.getType()) {\n          return n;  // Only eval if they are the same type\n        }\n        double lv = left.getDouble();\n        double rv = right.getDouble();\n\n        switch (op) {\n          case Token.SHEQ:\n          case Token.EQ: result = lv == rv; break;\n          case Token.SHNE:\n          case Token.NE: result = lv != rv; break;\n          case Token.LE: result = lv <= rv; break;\n          case Token.LT: result = lv <  rv; break;\n          case Token.GE: result = lv >= rv; break;\n          case Token.GT: result = lv >  rv; break;\n          default:\n            return n;  // don't handle that op\n        }\n        break;\n\n      case Token.NAME:\n        if (rightLiteral) {\n          boolean undefinedLeft = (left.getString().equals(\"undefined\"));\n          if (undefinedLeft) {\n            boolean nullRight = (Token.NULL == right.getType());\n            boolean equivalent = undefinedRight || nullRight;\n            switch (op) {\n              case Token.EQ:\n                // undefined is only equal to\n                result = equivalent;\n                break;\n              case Token.NE:\n                result = !equivalent;\n                break;\n              case Token.SHEQ:\n                result = undefinedRight;\n                break;\n              case Token.SHNE:\n                result = !undefinedRight;\n                break;\n              case Token.LT:\n              case Token.GT:\n              case Token.LE:\n              case Token.GE:\n                result = false;\n                break;\n              default:\n                return n;\n            }\n            break;\n          }\n        }\n\n        if (Token.NAME != right.getType()) {\n          return n;  // Only eval if they are the same type\n        }\n        String ln = left.getString();\n        String rn = right.getString();\n        if (!ln.equals(rn)) {\n          return n;  // Not the same value name.\n        }\n\n        switch (op) {\n          // If we knew the named value wouldn't be NaN, it would be nice\n          // to handle EQ,NE,LE,GE,SHEQ, and SHNE.\n          case Token.LT:\n          case Token.GT:\n            result = false;\n            break;\n          default:\n            return n;  // don't handle that op\n        }\n        break;\n\n      default:\n        // assert, this should cover all consts\n        return n;\n    }",
      "info" : "SwitchStatement[21409-26387]:SwitchStatement[21485-26463]"
    }, {
      "left" : "case Token.VOID:",
      "right" : "case Token.VOID:",
      "info" : "SwitchCase[21441-21457]:SwitchCase[21517-21533]"
    }, {
      "left" : "if (!NodeUtil.isLiteralValue(left.getFirstChild()))",
      "right" : "if (!NodeUtil.isLiteralValue(left.getFirstChild()))",
      "info" : "IfStatement[21466-22375]:IfStatement[21542-22451]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21518-21549]:Block[21594-21625]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[21530-21539]:ReturnStatement[21606-21615]"
    }, {
      "left" : "if (!rightLiteral)",
      "right" : "if (!rightLiteral)",
      "info" : "IfStatement[21555-22375]:IfStatement[21631-22451]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21574-21605]:Block[21650-21681]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[21586-21595]:ReturnStatement[21662-21671]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21611-22375]:Block[21687-22451]"
    }, {
      "left" : "boolean nullRight = (Token.NULL == right.getType());",
      "right" : "boolean nullRight = (Token.NULL == right.getType());",
      "info" : "VariableDeclarationStatement[21623-21675]:VariableDeclarationStatement[21699-21751]"
    }, {
      "left" : "boolean equivalent = undefinedRight || nullRight;",
      "right" : "boolean equivalent = undefinedRight || nullRight;",
      "info" : "VariableDeclarationStatement[21686-21735]:VariableDeclarationStatement[21762-21811]"
    }, {
      "left" : "switch (op) {\n            case Token.EQ:\n              // undefined is only equal to\n              result = equivalent;\n              break;\n            case Token.NE:\n              result = !equivalent;\n              break;\n            case Token.SHEQ:\n              result = undefinedRight;\n              break;\n            case Token.SHNE:\n              result = !undefinedRight;\n              break;\n            case Token.LT:\n            case Token.GT:\n            case Token.LE:\n            case Token.GE:\n              result = false;\n              break;\n            default:\n              return n;\n          }",
      "right" : "switch (op) {\n            case Token.EQ:\n              // undefined is only equal to\n              result = equivalent;\n              break;\n            case Token.NE:\n              result = !equivalent;\n              break;\n            case Token.SHEQ:\n              result = undefinedRight;\n              break;\n            case Token.SHNE:\n              result = !undefinedRight;\n              break;\n            case Token.LT:\n            case Token.GT:\n            case Token.LE:\n            case Token.GE:\n              result = false;\n              break;\n            default:\n              return n;\n          }",
      "info" : "SwitchStatement[21746-22365]:SwitchStatement[21822-22441]"
    }, {
      "left" : "case Token.EQ:",
      "right" : "case Token.EQ:",
      "info" : "SwitchCase[21772-21786]:SwitchCase[21848-21862]"
    }, {
      "left" : "result = equivalent;",
      "right" : "result = equivalent;",
      "info" : "ExpressionStatement[21845-21865]:ExpressionStatement[21921-21941]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[21880-21886]:BreakStatement[21956-21962]"
    }, {
      "left" : "case Token.NE:",
      "right" : "case Token.NE:",
      "info" : "SwitchCase[21899-21913]:SwitchCase[21975-21989]"
    }, {
      "left" : "result = !equivalent;",
      "right" : "result = !equivalent;",
      "info" : "ExpressionStatement[21928-21949]:ExpressionStatement[22004-22025]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[21964-21970]:BreakStatement[22040-22046]"
    }, {
      "left" : "case Token.SHEQ:",
      "right" : "case Token.SHEQ:",
      "info" : "SwitchCase[21983-21999]:SwitchCase[22059-22075]"
    }, {
      "left" : "result = undefinedRight;",
      "right" : "result = undefinedRight;",
      "info" : "ExpressionStatement[22014-22038]:ExpressionStatement[22090-22114]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[22053-22059]:BreakStatement[22129-22135]"
    }, {
      "left" : "case Token.SHNE:",
      "right" : "case Token.SHNE:",
      "info" : "SwitchCase[22072-22088]:SwitchCase[22148-22164]"
    }, {
      "left" : "result = !undefinedRight;",
      "right" : "result = !undefinedRight;",
      "info" : "ExpressionStatement[22103-22128]:ExpressionStatement[22179-22204]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[22143-22149]:BreakStatement[22219-22225]"
    }, {
      "left" : "case Token.LT:",
      "right" : "case Token.LT:",
      "info" : "SwitchCase[22162-22176]:SwitchCase[22238-22252]"
    }, {
      "left" : "case Token.GT:",
      "right" : "case Token.GT:",
      "info" : "SwitchCase[22189-22203]:SwitchCase[22265-22279]"
    }, {
      "left" : "case Token.LE:",
      "right" : "case Token.LE:",
      "info" : "SwitchCase[22216-22230]:SwitchCase[22292-22306]"
    }, {
      "left" : "case Token.GE:",
      "right" : "case Token.GE:",
      "info" : "SwitchCase[22243-22257]:SwitchCase[22319-22333]"
    }, {
      "left" : "result = false;",
      "right" : "result = false;",
      "info" : "ExpressionStatement[22272-22287]:ExpressionStatement[22348-22363]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[22302-22308]:BreakStatement[22378-22384]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[22321-22329]:SwitchCase[22397-22405]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[22344-22353]:ReturnStatement[22420-22429]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[22384-22390]:BreakStatement[22460-22466]"
    }, {
      "left" : "case Token.NULL:",
      "right" : "case Token.NULL:",
      "info" : "SwitchCase[22398-22414]:SwitchCase[22474-22490]"
    }, {
      "left" : "if (undefinedRight)",
      "right" : "if (undefinedRight)",
      "info" : "IfStatement[22423-22508]:IfStatement[22499-22584]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22443-22508]:Block[22519-22584]"
    }, {
      "left" : "result = (op == Token.EQ);",
      "right" : "result = (op == Token.EQ);",
      "info" : "ExpressionStatement[22455-22481]:ExpressionStatement[22531-22557]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[22492-22498]:BreakStatement[22568-22574]"
    }, {
      "left" : "case Token.TRUE:",
      "right" : "case Token.TRUE:",
      "info" : "SwitchCase[22539-22555]:SwitchCase[22615-22631]"
    }, {
      "left" : "case Token.FALSE:",
      "right" : "case Token.FALSE:",
      "info" : "SwitchCase[22562-22579]:SwitchCase[22638-22655]"
    }, {
      "left" : "if (undefinedRight)",
      "right" : "if (undefinedRight)",
      "info" : "IfStatement[22588-22662]:IfStatement[22664-22738]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22608-22662]:Block[22684-22738]"
    }, {
      "left" : "result = false;",
      "right" : "result = false;",
      "info" : "ExpressionStatement[22620-22635]:ExpressionStatement[22696-22711]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[22646-22652]:BreakStatement[22722-22728]"
    }, {
      "left" : "case Token.THIS:",
      "right" : "case Token.THIS:",
      "info" : "SwitchCase[22693-22709]:SwitchCase[22769-22785]"
    }, {
      "left" : "int tt = right.getType();",
      "right" : "int tt = right.getType();",
      "info" : "VariableDeclarationStatement[22718-22743]:VariableDeclarationStatement[22794-22819]"
    }, {
      "left" : "if (tt != Token.THIS &&\n            tt != Token.TRUE &&\n            tt != Token.FALSE &&\n            tt != Token.NULL)",
      "right" : "if (tt != Token.THIS &&\n            tt != Token.TRUE &&\n            tt != Token.FALSE &&\n            tt != Token.NULL)",
      "info" : "IfStatement[22752-22902]:IfStatement[22828-22978]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22871-22902]:Block[22947-22978]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[22883-22892]:ReturnStatement[22959-22968]"
    }, {
      "left" : "switch (op) {\n          case Token.SHEQ:\n          case Token.EQ:\n            result = left.getType() == right.getType();\n            break;\n\n          case Token.SHNE:\n          case Token.NE:\n            result = left.getType() != right.getType();\n            break;\n\n          default:\n            return n;  // we only handle == and != here\n        }",
      "right" : "switch (op) {\n          case Token.SHEQ:\n          case Token.EQ:\n            result = left.getType() == right.getType();\n            break;\n\n          case Token.SHNE:\n          case Token.NE:\n            result = left.getType() != right.getType();\n            break;\n\n          default:\n            return n;  // we only handle == and != here\n        }",
      "info" : "SwitchStatement[22911-23265]:SwitchStatement[22987-23341]"
    }, {
      "left" : "case Token.SHEQ:",
      "right" : "case Token.SHEQ:",
      "info" : "SwitchCase[22935-22951]:SwitchCase[23011-23027]"
    }, {
      "left" : "case Token.EQ:",
      "right" : "case Token.EQ:",
      "info" : "SwitchCase[22962-22976]:SwitchCase[23038-23052]"
    }, {
      "left" : "result = left.getType() == right.getType();",
      "right" : "result = left.getType() == right.getType();",
      "info" : "ExpressionStatement[22989-23032]:ExpressionStatement[23065-23108]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[23045-23051]:BreakStatement[23121-23127]"
    }, {
      "left" : "case Token.SHNE:",
      "right" : "case Token.SHNE:",
      "info" : "SwitchCase[23063-23079]:SwitchCase[23139-23155]"
    }, {
      "left" : "case Token.NE:",
      "right" : "case Token.NE:",
      "info" : "SwitchCase[23090-23104]:SwitchCase[23166-23180]"
    }, {
      "left" : "result = left.getType() != right.getType();",
      "right" : "result = left.getType() != right.getType();",
      "info" : "ExpressionStatement[23117-23160]:ExpressionStatement[23193-23236]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[23173-23179]:BreakStatement[23249-23255]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[23191-23199]:SwitchCase[23267-23275]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[23212-23221]:ReturnStatement[23288-23297]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[23274-23280]:BreakStatement[23350-23356]"
    }, {
      "left" : "case Token.STRING:",
      "right" : "case Token.STRING:",
      "info" : "SwitchCase[23288-23306]:SwitchCase[23364-23382]"
    }, {
      "left" : "if (undefinedRight)",
      "right" : "if (undefinedRight)",
      "info" : "IfStatement[23315-23389]:IfStatement[23391-23465]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23335-23389]:Block[23411-23465]"
    }, {
      "left" : "result = false;",
      "right" : "result = false;",
      "info" : "ExpressionStatement[23347-23362]:ExpressionStatement[23423-23438]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[23373-23379]:BreakStatement[23449-23455]"
    }, {
      "left" : "if (Token.STRING != right.getType())",
      "right" : "if (Token.STRING != right.getType())",
      "info" : "IfStatement[23398-23506]:IfStatement[23474-23582]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23435-23506]:Block[23511-23582]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[23447-23456]:ReturnStatement[23523-23532]"
    }, {
      "left" : "switch (op) {\n          case Token.SHEQ:\n          case Token.EQ:\n            result = left.getString().equals(right.getString());\n            break;\n\n          case Token.SHNE:\n          case Token.NE:\n            result = !left.getString().equals(right.getString());\n            break;\n\n          default:\n            return n;  // we only handle == and != here\n        }",
      "right" : "switch (op) {\n          case Token.SHEQ:\n          case Token.EQ:\n            result = left.getString().equals(right.getString());\n            break;\n\n          case Token.SHNE:\n          case Token.NE:\n            result = !left.getString().equals(right.getString());\n            break;\n\n          default:\n            return n;  // we only handle == and != here\n        }",
      "info" : "SwitchStatement[23515-23888]:SwitchStatement[23591-23964]"
    }, {
      "left" : "case Token.SHEQ:",
      "right" : "case Token.SHEQ:",
      "info" : "SwitchCase[23539-23555]:SwitchCase[23615-23631]"
    }, {
      "left" : "case Token.EQ:",
      "right" : "case Token.EQ:",
      "info" : "SwitchCase[23566-23580]:SwitchCase[23642-23656]"
    }, {
      "left" : "result = left.getString().equals(right.getString());",
      "right" : "result = left.getString().equals(right.getString());",
      "info" : "ExpressionStatement[23593-23645]:ExpressionStatement[23669-23721]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[23658-23664]:BreakStatement[23734-23740]"
    }, {
      "left" : "case Token.SHNE:",
      "right" : "case Token.SHNE:",
      "info" : "SwitchCase[23676-23692]:SwitchCase[23752-23768]"
    }, {
      "left" : "case Token.NE:",
      "right" : "case Token.NE:",
      "info" : "SwitchCase[23703-23717]:SwitchCase[23779-23793]"
    }, {
      "left" : "result = !left.getString().equals(right.getString());",
      "right" : "result = !left.getString().equals(right.getString());",
      "info" : "ExpressionStatement[23730-23783]:ExpressionStatement[23806-23859]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[23796-23802]:BreakStatement[23872-23878]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[23814-23822]:SwitchCase[23890-23898]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[23835-23844]:ReturnStatement[23911-23920]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[23897-23903]:BreakStatement[23973-23979]"
    }, {
      "left" : "case Token.NUMBER:",
      "right" : "case Token.NUMBER:",
      "info" : "SwitchCase[23911-23929]:SwitchCase[23987-24005]"
    }, {
      "left" : "if (undefinedRight)",
      "right" : "if (undefinedRight)",
      "info" : "IfStatement[23938-24012]:IfStatement[24014-24088]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23958-24012]:Block[24034-24088]"
    }, {
      "left" : "result = false;",
      "right" : "result = false;",
      "info" : "ExpressionStatement[23970-23985]:ExpressionStatement[24046-24061]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[23996-24002]:BreakStatement[24072-24078]"
    }, {
      "left" : "if (Token.NUMBER != right.getType())",
      "right" : "if (Token.NUMBER != right.getType())",
      "info" : "IfStatement[24021-24129]:IfStatement[24097-24205]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24058-24129]:Block[24134-24205]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[24070-24079]:ReturnStatement[24146-24155]"
    }, {
      "left" : "double lv = left.getDouble();",
      "right" : "double lv = left.getDouble();",
      "info" : "VariableDeclarationStatement[24138-24167]:VariableDeclarationStatement[24214-24243]"
    }, {
      "left" : "double rv = right.getDouble();",
      "right" : "double rv = right.getDouble();",
      "info" : "VariableDeclarationStatement[24176-24206]:VariableDeclarationStatement[24252-24282]"
    }, {
      "left" : "switch (op) {\n          case Token.SHEQ:\n          case Token.EQ: result = lv == rv; break;\n          case Token.SHNE:\n          case Token.NE: result = lv != rv; break;\n          case Token.LE: result = lv <= rv; break;\n          case Token.LT: result = lv <  rv; break;\n          case Token.GE: result = lv >= rv; break;\n          case Token.GT: result = lv >  rv; break;\n          default:\n            return n;  // don't handle that op\n        }",
      "right" : "switch (op) {\n          case Token.SHEQ:\n          case Token.EQ: result = lv == rv; break;\n          case Token.SHNE:\n          case Token.NE: result = lv != rv; break;\n          case Token.LE: result = lv <= rv; break;\n          case Token.LT: result = lv <  rv; break;\n          case Token.GE: result = lv >= rv; break;\n          case Token.GT: result = lv >  rv; break;\n          default:\n            return n;  // don't handle that op\n        }",
      "info" : "SwitchStatement[24216-24665]:SwitchStatement[24292-24741]"
    }, {
      "left" : "case Token.SHEQ:",
      "right" : "case Token.SHEQ:",
      "info" : "SwitchCase[24240-24256]:SwitchCase[24316-24332]"
    }, {
      "left" : "case Token.EQ:",
      "right" : "case Token.EQ:",
      "info" : "SwitchCase[24267-24281]:SwitchCase[24343-24357]"
    }, {
      "left" : "result = lv == rv;",
      "right" : "result = lv == rv;",
      "info" : "ExpressionStatement[24282-24300]:ExpressionStatement[24358-24376]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[24301-24307]:BreakStatement[24377-24383]"
    }, {
      "left" : "case Token.SHNE:",
      "right" : "case Token.SHNE:",
      "info" : "SwitchCase[24318-24334]:SwitchCase[24394-24410]"
    }, {
      "left" : "case Token.NE:",
      "right" : "case Token.NE:",
      "info" : "SwitchCase[24345-24359]:SwitchCase[24421-24435]"
    }, {
      "left" : "result = lv != rv;",
      "right" : "result = lv != rv;",
      "info" : "ExpressionStatement[24360-24378]:ExpressionStatement[24436-24454]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[24379-24385]:BreakStatement[24455-24461]"
    }, {
      "left" : "case Token.LE:",
      "right" : "case Token.LE:",
      "info" : "SwitchCase[24396-24410]:SwitchCase[24472-24486]"
    }, {
      "left" : "result = lv <= rv;",
      "right" : "result = lv <= rv;",
      "info" : "ExpressionStatement[24411-24429]:ExpressionStatement[24487-24505]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[24430-24436]:BreakStatement[24506-24512]"
    }, {
      "left" : "case Token.LT:",
      "right" : "case Token.LT:",
      "info" : "SwitchCase[24447-24461]:SwitchCase[24523-24537]"
    }, {
      "left" : "result = lv <  rv;",
      "right" : "result = lv <  rv;",
      "info" : "ExpressionStatement[24462-24480]:ExpressionStatement[24538-24556]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[24481-24487]:BreakStatement[24557-24563]"
    }, {
      "left" : "case Token.GE:",
      "right" : "case Token.GE:",
      "info" : "SwitchCase[24498-24512]:SwitchCase[24574-24588]"
    }, {
      "left" : "result = lv >= rv;",
      "right" : "result = lv >= rv;",
      "info" : "ExpressionStatement[24513-24531]:ExpressionStatement[24589-24607]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[24532-24538]:BreakStatement[24608-24614]"
    }, {
      "left" : "case Token.GT:",
      "right" : "case Token.GT:",
      "info" : "SwitchCase[24549-24563]:SwitchCase[24625-24639]"
    }, {
      "left" : "result = lv >  rv;",
      "right" : "result = lv >  rv;",
      "info" : "ExpressionStatement[24564-24582]:ExpressionStatement[24640-24658]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[24583-24589]:BreakStatement[24659-24665]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[24600-24608]:SwitchCase[24676-24684]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[24621-24630]:ReturnStatement[24697-24706]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[24674-24680]:BreakStatement[24750-24756]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[24688-24704]:SwitchCase[24764-24780]"
    }, {
      "left" : "if (rightLiteral)",
      "right" : "if (rightLiteral)",
      "info" : "IfStatement[24713-25681]:IfStatement[24789-25757]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24731-25681]:Block[24807-25757]"
    }, {
      "left" : "boolean undefinedLeft = (left.getString().equals(\"undefined\"));",
      "right" : "boolean undefinedLeft = (left.getString().equals(\"undefined\"));",
      "info" : "VariableDeclarationStatement[24743-24806]:VariableDeclarationStatement[24819-24882]"
    }, {
      "left" : "if (undefinedLeft)",
      "right" : "if (undefinedLeft)",
      "info" : "IfStatement[24817-25671]:IfStatement[24893-25747]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24836-25671]:Block[24912-25747]"
    }, {
      "left" : "boolean nullRight = (Token.NULL == right.getType());",
      "right" : "boolean nullRight = (Token.NULL == right.getType());",
      "info" : "VariableDeclarationStatement[24850-24902]:VariableDeclarationStatement[24926-24978]"
    }, {
      "left" : "boolean equivalent = undefinedRight || nullRight;",
      "right" : "boolean equivalent = undefinedRight || nullRight;",
      "info" : "VariableDeclarationStatement[24915-24964]:VariableDeclarationStatement[24991-25040]"
    }, {
      "left" : "switch (op) {\n              case Token.EQ:\n                // undefined is only equal to\n                result = equivalent;\n                break;\n              case Token.NE:\n                result = !equivalent;\n                break;\n              case Token.SHEQ:\n                result = undefinedRight;\n                break;\n              case Token.SHNE:\n                result = !undefinedRight;\n                break;\n              case Token.LT:\n              case Token.GT:\n              case Token.LE:\n              case Token.GE:\n                result = false;\n                break;\n              default:\n                return n;\n            }",
      "right" : "switch (op) {\n              case Token.EQ:\n                // undefined is only equal to\n                result = equivalent;\n                break;\n              case Token.NE:\n                result = !equivalent;\n                break;\n              case Token.SHEQ:\n                result = undefinedRight;\n                break;\n              case Token.SHNE:\n                result = !undefinedRight;\n                break;\n              case Token.LT:\n              case Token.GT:\n              case Token.LE:\n              case Token.GE:\n                result = false;\n                break;\n              default:\n                return n;\n            }",
      "info" : "SwitchStatement[24977-25640]:SwitchStatement[25053-25716]"
    }, {
      "left" : "case Token.EQ:",
      "right" : "case Token.EQ:",
      "info" : "SwitchCase[25005-25019]:SwitchCase[25081-25095]"
    }, {
      "left" : "result = equivalent;",
      "right" : "result = equivalent;",
      "info" : "ExpressionStatement[25082-25102]:ExpressionStatement[25158-25178]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[25119-25125]:BreakStatement[25195-25201]"
    }, {
      "left" : "case Token.NE:",
      "right" : "case Token.NE:",
      "info" : "SwitchCase[25140-25154]:SwitchCase[25216-25230]"
    }, {
      "left" : "result = !equivalent;",
      "right" : "result = !equivalent;",
      "info" : "ExpressionStatement[25171-25192]:ExpressionStatement[25247-25268]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[25209-25215]:BreakStatement[25285-25291]"
    }, {
      "left" : "case Token.SHEQ:",
      "right" : "case Token.SHEQ:",
      "info" : "SwitchCase[25230-25246]:SwitchCase[25306-25322]"
    }, {
      "left" : "result = undefinedRight;",
      "right" : "result = undefinedRight;",
      "info" : "ExpressionStatement[25263-25287]:ExpressionStatement[25339-25363]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[25304-25310]:BreakStatement[25380-25386]"
    }, {
      "left" : "case Token.SHNE:",
      "right" : "case Token.SHNE:",
      "info" : "SwitchCase[25325-25341]:SwitchCase[25401-25417]"
    }, {
      "left" : "result = !undefinedRight;",
      "right" : "result = !undefinedRight;",
      "info" : "ExpressionStatement[25358-25383]:ExpressionStatement[25434-25459]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[25400-25406]:BreakStatement[25476-25482]"
    }, {
      "left" : "case Token.LT:",
      "right" : "case Token.LT:",
      "info" : "SwitchCase[25421-25435]:SwitchCase[25497-25511]"
    }, {
      "left" : "case Token.GT:",
      "right" : "case Token.GT:",
      "info" : "SwitchCase[25450-25464]:SwitchCase[25526-25540]"
    }, {
      "left" : "case Token.LE:",
      "right" : "case Token.LE:",
      "info" : "SwitchCase[25479-25493]:SwitchCase[25555-25569]"
    }, {
      "left" : "case Token.GE:",
      "right" : "case Token.GE:",
      "info" : "SwitchCase[25508-25522]:SwitchCase[25584-25598]"
    }, {
      "left" : "result = false;",
      "right" : "result = false;",
      "info" : "ExpressionStatement[25539-25554]:ExpressionStatement[25615-25630]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[25571-25577]:BreakStatement[25647-25653]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[25592-25600]:SwitchCase[25668-25676]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[25617-25626]:ReturnStatement[25693-25702]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[25653-25659]:BreakStatement[25729-25735]"
    }, {
      "left" : "if (Token.NAME != right.getType())",
      "right" : "if (Token.NAME != right.getType())",
      "info" : "IfStatement[25691-25797]:IfStatement[25767-25873]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25726-25797]:Block[25802-25873]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[25738-25747]:ReturnStatement[25814-25823]"
    }, {
      "left" : "String ln = left.getString();",
      "right" : "String ln = left.getString();",
      "info" : "VariableDeclarationStatement[25806-25835]:VariableDeclarationStatement[25882-25911]"
    }, {
      "left" : "String rn = right.getString();",
      "right" : "String rn = right.getString();",
      "info" : "VariableDeclarationStatement[25844-25874]:VariableDeclarationStatement[25920-25950]"
    }, {
      "left" : "if (!ln.equals(rn))",
      "right" : "if (!ln.equals(rn))",
      "info" : "IfStatement[25883-25963]:IfStatement[25959-26039]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25903-25963]:Block[25979-26039]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[25915-25924]:ReturnStatement[25991-26000]"
    }, {
      "left" : "switch (op) {\n          // If we knew the named value wouldn't be NaN, it would be nice\n          // to handle EQ,NE,LE,GE,SHEQ, and SHNE.\n          case Token.LT:\n          case Token.GT:\n            result = false;\n            break;\n          default:\n            return n;  // don't handle that op\n        }",
      "right" : "switch (op) {\n          // If we knew the named value wouldn't be NaN, it would be nice\n          // to handle EQ,NE,LE,GE,SHEQ, and SHNE.\n          case Token.LT:\n          case Token.GT:\n            result = false;\n            break;\n          default:\n            return n;  // don't handle that op\n        }",
      "info" : "SwitchStatement[25973-26284]:SwitchStatement[26049-26360]"
    }, {
      "left" : "case Token.LT:",
      "right" : "case Token.LT:",
      "info" : "SwitchCase[26122-26136]:SwitchCase[26198-26212]"
    }, {
      "left" : "case Token.GT:",
      "right" : "case Token.GT:",
      "info" : "SwitchCase[26147-26161]:SwitchCase[26223-26237]"
    }, {
      "left" : "result = false;",
      "right" : "result = false;",
      "info" : "ExpressionStatement[26174-26189]:ExpressionStatement[26250-26265]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[26202-26208]:BreakStatement[26278-26284]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[26219-26227]:SwitchCase[26295-26303]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[26240-26249]:ReturnStatement[26316-26325]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[26293-26299]:BreakStatement[26369-26375]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[26307-26315]:SwitchCase[26383-26391]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[26372-26381]:ReturnStatement[26448-26457]"
    }, {
      "left" : "Node newNode = new Node(result ? Token.TRUE : Token.FALSE);",
      "right" : "Node newNode = new Node(result ? Token.TRUE : Token.FALSE);",
      "info" : "VariableDeclarationStatement[26393-26452]:VariableDeclarationStatement[26469-26528]"
    }, {
      "left" : "n.getParent().replaceChild(n, newNode);",
      "right" : "n.getParent().replaceChild(n, newNode);",
      "info" : "ExpressionStatement[26457-26496]:ExpressionStatement[26533-26572]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[26501-26520]:ExpressionStatement[26577-26596]"
    }, {
      "left" : "return newNode;",
      "right" : "return newNode;",
      "info" : "ReturnStatement[26526-26541]:ReturnStatement[26602-26617]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[26549-26556]:Modifier[26625-26632]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[26557-26561]:SimpleType[26633-26637]"
    }, {
      "left" : "tryFoldKnownMethods",
      "right" : "tryFoldKnownMethods",
      "info" : "SimpleName[26562-26581]:SimpleName[26638-26657]"
    }, {
      "left" : "Node subtree",
      "right" : "Node subtree",
      "info" : "SingleVariableDeclaration[26582-26594]:SingleVariableDeclaration[26658-26670]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26596-26816]:Block[26672-26892]"
    }, {
      "left" : "subtree = tryFoldStringJoin(subtree);",
      "right" : "subtree = tryFoldStringJoin(subtree);",
      "info" : "ExpressionStatement[26657-26694]:ExpressionStatement[26733-26770]"
    }, {
      "left" : "if (subtree.getType() == Token.CALL)",
      "right" : "if (subtree.getType() == Token.CALL)",
      "info" : "IfStatement[26700-26791]:IfStatement[26776-26867]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26737-26791]:Block[26813-26867]"
    }, {
      "left" : "subtree = tryFoldStringIndexOf(subtree);",
      "right" : "subtree = tryFoldStringIndexOf(subtree);",
      "info" : "ExpressionStatement[26745-26785]:ExpressionStatement[26821-26861]"
    }, {
      "left" : "return subtree;",
      "right" : "return subtree;",
      "info" : "ReturnStatement[26797-26812]:ReturnStatement[26873-26888]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[26960-26967]:Modifier[27036-27043]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[26968-26972]:SimpleType[27044-27048]"
    }, {
      "left" : "tryFoldStringIndexOf",
      "right" : "tryFoldStringIndexOf",
      "info" : "SimpleName[26973-26993]:SimpleName[27049-27069]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[26994-27000]:SingleVariableDeclaration[27070-27076]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27002-28593]:Block[27078-28669]"
    }, {
      "left" : "Preconditions.checkArgument(n.getType() == Token.CALL);",
      "right" : "Preconditions.checkArgument(n.getType() == Token.CALL);",
      "info" : "ExpressionStatement[27008-27063]:ExpressionStatement[27084-27139]"
    }, {
      "left" : "Node left = n.getFirstChild();",
      "right" : "Node left = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[27069-27099]:VariableDeclarationStatement[27145-27175]"
    }, {
      "left" : "if (left == null)",
      "right" : "if (left == null)",
      "info" : "IfStatement[27105-27146]:IfStatement[27181-27222]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27123-27146]:Block[27199-27222]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[27131-27140]:ReturnStatement[27207-27216]"
    }, {
      "left" : "Node right = left.getNext();",
      "right" : "Node right = left.getNext();",
      "info" : "VariableDeclarationStatement[27152-27180]:VariableDeclarationStatement[27228-27256]"
    }, {
      "left" : "if (right == null)",
      "right" : "if (right == null)",
      "info" : "IfStatement[27186-27228]:IfStatement[27262-27304]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27205-27228]:Block[27281-27304]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[27213-27222]:ReturnStatement[27289-27298]"
    }, {
      "left" : "if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right))",
      "right" : "if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right))",
      "info" : "IfStatement[27234-27325]:IfStatement[27310-27401]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27302-27325]:Block[27378-27401]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[27310-27319]:ReturnStatement[27386-27395]"
    }, {
      "left" : "Node lstringNode = left.getFirstChild();",
      "right" : "Node lstringNode = left.getFirstChild();",
      "info" : "VariableDeclarationStatement[27331-27371]:VariableDeclarationStatement[27407-27447]"
    }, {
      "left" : "Node functionName = lstringNode.getNext();",
      "right" : "Node functionName = lstringNode.getNext();",
      "info" : "VariableDeclarationStatement[27376-27418]:VariableDeclarationStatement[27452-27494]"
    }, {
      "left" : "if ((lstringNode.getType() != Token.STRING) ||\n        (!functionName.getString().equals(\"indexOf\") &&\n        !functionName.getString().equals(\"lastIndexOf\")))",
      "right" : "if ((lstringNode.getType() != Token.STRING) ||\n        (!functionName.getString().equals(\"indexOf\") &&\n        !functionName.getString().equals(\"lastIndexOf\")))",
      "info" : "IfStatement[27424-27608]:IfStatement[27500-27684]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27585-27608]:Block[27661-27684]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[27593-27602]:ReturnStatement[27669-27678]"
    }, {
      "left" : "String lstring = NodeUtil.getStringValue(lstringNode);",
      "right" : "String lstring = NodeUtil.getStringValue(lstringNode);",
      "info" : "VariableDeclarationStatement[27614-27668]:VariableDeclarationStatement[27690-27744]"
    }, {
      "left" : "boolean isIndexOf = functionName.getString().equals(\"indexOf\");",
      "right" : "boolean isIndexOf = functionName.getString().equals(\"indexOf\");",
      "info" : "VariableDeclarationStatement[27673-27736]:VariableDeclarationStatement[27749-27812]"
    }, {
      "left" : "Node firstArg = right;",
      "right" : "Node firstArg = right;",
      "info" : "VariableDeclarationStatement[27741-27763]:VariableDeclarationStatement[27817-27839]"
    }, {
      "left" : "Node secondArg = right.getNext();",
      "right" : "Node secondArg = right.getNext();",
      "info" : "VariableDeclarationStatement[27768-27801]:VariableDeclarationStatement[27844-27877]"
    }, {
      "left" : "String searchValue = NodeUtil.getStringValue(firstArg);",
      "right" : "String searchValue = NodeUtil.getStringValue(firstArg);",
      "info" : "VariableDeclarationStatement[27806-27861]:VariableDeclarationStatement[27882-27937]"
    }, {
      "left" : "if (searchValue == null)",
      "right" : "if (searchValue == null)",
      "info" : "IfStatement[27909-27957]:IfStatement[27985-28033]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27934-27957]:Block[28010-28033]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[27942-27951]:ReturnStatement[28018-28027]"
    }, {
      "left" : "int fromIndex = isIndexOf ? 0 : lstring.length();",
      "right" : "int fromIndex = isIndexOf ? 0 : lstring.length();",
      "info" : "VariableDeclarationStatement[27962-28011]:VariableDeclarationStatement[28038-28087]"
    }, {
      "left" : "if (secondArg != null)",
      "right" : "if (secondArg != null)",
      "info" : "IfStatement[28016-28307]:IfStatement[28092-28383]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28039-28307]:Block[28115-28383]"
    }, {
      "left" : "if ((secondArg.getNext() != null) ||\n          (secondArg.getType() != Token.NUMBER))",
      "right" : "if ((secondArg.getNext() != null) ||\n          (secondArg.getType() != Token.NUMBER))",
      "info" : "IfStatement[28124-28301]:IfStatement[28200-28377]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28210-28237]:Block[28286-28313]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[28220-28229]:ReturnStatement[28296-28305]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28243-28301]:Block[28319-28377]"
    }, {
      "left" : "fromIndex = (int) secondArg.getDouble();",
      "right" : "fromIndex = (int) secondArg.getDouble();",
      "info" : "ExpressionStatement[28253-28293]:ExpressionStatement[28329-28369]"
    }, {
      "left" : "int indexVal = isIndexOf ? lstring.indexOf(searchValue, fromIndex)\n                             : lstring.lastIndexOf(searchValue, fromIndex);",
      "right" : "int indexVal = isIndexOf ? lstring.indexOf(searchValue, fromIndex)\n                             : lstring.lastIndexOf(searchValue, fromIndex);",
      "info" : "VariableDeclarationStatement[28312-28454]:VariableDeclarationStatement[28388-28530]"
    }, {
      "left" : "Node newNode = Node.newNumber(indexVal);",
      "right" : "Node newNode = Node.newNumber(indexVal);",
      "info" : "VariableDeclarationStatement[28459-28499]:VariableDeclarationStatement[28535-28575]"
    }, {
      "left" : "n.getParent().replaceChild(n, newNode);",
      "right" : "n.getParent().replaceChild(n, newNode);",
      "info" : "ExpressionStatement[28504-28543]:ExpressionStatement[28580-28619]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[28549-28568]:ExpressionStatement[28625-28644]"
    }, {
      "left" : "return newNode;",
      "right" : "return newNode;",
      "info" : "ReturnStatement[28574-28589]:ReturnStatement[28650-28665]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[28676-28683]:Modifier[28752-28759]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[28684-28688]:SimpleType[28760-28764]"
    }, {
      "left" : "tryFoldStringJoin",
      "right" : "tryFoldStringJoin",
      "info" : "SimpleName[28689-28706]:SimpleName[28765-28782]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[28707-28713]:SingleVariableDeclaration[28783-28789]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28715-31997]:Block[28791-32073]"
    }, {
      "left" : "Node left = n.getFirstChild();",
      "right" : "Node left = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[28721-28751]:VariableDeclarationStatement[28797-28827]"
    }, {
      "left" : "if (left == null)",
      "right" : "if (left == null)",
      "info" : "IfStatement[28757-28798]:IfStatement[28833-28874]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28775-28798]:Block[28851-28874]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[28783-28792]:ReturnStatement[28859-28868]"
    }, {
      "left" : "Node right = left.getNext();",
      "right" : "Node right = left.getNext();",
      "info" : "VariableDeclarationStatement[28804-28832]:VariableDeclarationStatement[28880-28908]"
    }, {
      "left" : "if (right == null)",
      "right" : "if (right == null)",
      "info" : "IfStatement[28838-28880]:IfStatement[28914-28956]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28857-28880]:Block[28933-28956]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[28865-28874]:ReturnStatement[28941-28950]"
    }, {
      "left" : "if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right))",
      "right" : "if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right))",
      "info" : "IfStatement[28886-28977]:IfStatement[28962-29053]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28954-28977]:Block[29030-29053]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[28962-28971]:ReturnStatement[29038-29047]"
    }, {
      "left" : "Node arrayNode = left.getFirstChild();",
      "right" : "Node arrayNode = left.getFirstChild();",
      "info" : "VariableDeclarationStatement[28983-29021]:VariableDeclarationStatement[29059-29097]"
    }, {
      "left" : "Node functionName = arrayNode.getNext();",
      "right" : "Node functionName = arrayNode.getNext();",
      "info" : "VariableDeclarationStatement[29026-29066]:VariableDeclarationStatement[29102-29142]"
    }, {
      "left" : "if ((arrayNode.getType() != Token.ARRAYLIT) ||\n        !functionName.getString().equals(\"join\"))",
      "right" : "if ((arrayNode.getType() != Token.ARRAYLIT) ||\n        !functionName.getString().equals(\"join\"))",
      "info" : "IfStatement[29072-29192]:IfStatement[29148-29268]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29169-29192]:Block[29245-29268]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[29177-29186]:ReturnStatement[29253-29262]"
    }, {
      "left" : "String joinString = NodeUtil.getStringValue(right);",
      "right" : "String joinString = NodeUtil.getStringValue(right);",
      "info" : "VariableDeclarationStatement[29198-29249]:VariableDeclarationStatement[29274-29325]"
    }, {
      "left" : "List<Node> arrayFoldedChildren = Lists.newLinkedList();",
      "right" : "List<Node> arrayFoldedChildren = Lists.newLinkedList();",
      "info" : "VariableDeclarationStatement[29254-29309]:VariableDeclarationStatement[29330-29385]"
    }, {
      "left" : "StringBuilder sb = null;",
      "right" : "StringBuilder sb = null;",
      "info" : "VariableDeclarationStatement[29314-29338]:VariableDeclarationStatement[29390-29414]"
    }, {
      "left" : "int foldedSize = 0;",
      "right" : "int foldedSize = 0;",
      "info" : "VariableDeclarationStatement[29343-29362]:VariableDeclarationStatement[29419-29438]"
    }, {
      "left" : "Node prev = null;",
      "right" : "Node prev = null;",
      "info" : "VariableDeclarationStatement[29367-29384]:VariableDeclarationStatement[29443-29460]"
    }, {
      "left" : "Node elem = arrayNode.getFirstChild();",
      "right" : "Node elem = arrayNode.getFirstChild();",
      "info" : "VariableDeclarationStatement[29389-29427]:VariableDeclarationStatement[29465-29503]"
    }, {
      "left" : "while (elem != null)",
      "right" : "while (elem != null)",
      "info" : "WhileStatement[29469-30163]:WhileStatement[29545-30239]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29490-30163]:Block[29566-30239]"
    }, {
      "left" : "if (NodeUtil.isImmutableValue(elem))",
      "right" : "if (NodeUtil.isImmutableValue(elem))",
      "info" : "IfStatement[29498-30109]:IfStatement[29574-30185]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29535-29716]:Block[29611-29792]"
    }, {
      "left" : "if (sb == null)",
      "right" : "if (sb == null)",
      "info" : "IfStatement[29545-29658]:IfStatement[29621-29734]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29561-29608]:Block[29637-29684]"
    }, {
      "left" : "sb = new StringBuilder();",
      "right" : "sb = new StringBuilder();",
      "info" : "ExpressionStatement[29573-29598]:ExpressionStatement[29649-29674]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29614-29658]:Block[29690-29734]"
    }, {
      "left" : "sb.append(joinString);",
      "right" : "sb.append(joinString);",
      "info" : "ExpressionStatement[29626-29648]:ExpressionStatement[29702-29724]"
    }, {
      "left" : "sb.append(NodeUtil.getStringValue(elem));",
      "right" : "sb.append(NodeUtil.getStringValue(elem));",
      "info" : "ExpressionStatement[29667-29708]:ExpressionStatement[29743-29784]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29722-30109]:Block[29798-30185]"
    }, {
      "left" : "if (sb != null)",
      "right" : "if (sb != null)",
      "info" : "IfStatement[29732-30005]:IfStatement[29808-30081]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29748-30005]:Block[29824-30081]"
    }, {
      "left" : "Preconditions.checkNotNull(prev);",
      "right" : "Preconditions.checkNotNull(prev);",
      "info" : "ExpressionStatement[29760-29793]:ExpressionStatement[29836-29869]"
    }, {
      "left" : "foldedSize += sb.length() + 2;",
      "right" : "foldedSize += sb.length() + 2;",
      "info" : "ExpressionStatement[29837-29867]:ExpressionStatement[29913-29943]"
    }, {
      "left" : "arrayFoldedChildren.add(\n              Node.newString(sb.toString()).copyInformationFrom(prev));",
      "right" : "arrayFoldedChildren.add(\n              Node.newString(sb.toString()).copyInformationFrom(prev));",
      "info" : "ExpressionStatement[29878-29974]:ExpressionStatement[29954-30050]"
    }, {
      "left" : "sb = null;",
      "right" : "sb = null;",
      "info" : "ExpressionStatement[29985-29995]:ExpressionStatement[30061-30071]"
    }, {
      "left" : "foldedSize += InlineCostEstimator.getCost(elem);",
      "right" : "foldedSize += InlineCostEstimator.getCost(elem);",
      "info" : "ExpressionStatement[30014-30062]:ExpressionStatement[30090-30138]"
    }, {
      "left" : "arrayFoldedChildren.add(elem);",
      "right" : "arrayFoldedChildren.add(elem);",
      "info" : "ExpressionStatement[30071-30101]:ExpressionStatement[30147-30177]"
    }, {
      "left" : "prev = elem;",
      "right" : "prev = elem;",
      "info" : "ExpressionStatement[30116-30128]:ExpressionStatement[30192-30204]"
    }, {
      "left" : "elem = elem.getNext();",
      "right" : "elem = elem.getNext();",
      "info" : "ExpressionStatement[30135-30157]:ExpressionStatement[30211-30233]"
    }, {
      "left" : "if (sb != null)",
      "right" : "if (sb != null)",
      "info" : "IfStatement[30169-30397]:IfStatement[30245-30473]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30185-30397]:Block[30261-30473]"
    }, {
      "left" : "Preconditions.checkNotNull(prev);",
      "right" : "Preconditions.checkNotNull(prev);",
      "info" : "ExpressionStatement[30193-30226]:ExpressionStatement[30269-30302]"
    }, {
      "left" : "foldedSize += sb.length() + 2;",
      "right" : "foldedSize += sb.length() + 2;",
      "info" : "ExpressionStatement[30262-30292]:ExpressionStatement[30338-30368]"
    }, {
      "left" : "arrayFoldedChildren.add(\n          Node.newString(sb.toString()).copyInformationFrom(prev));",
      "right" : "arrayFoldedChildren.add(\n          Node.newString(sb.toString()).copyInformationFrom(prev));",
      "info" : "ExpressionStatement[30299-30391]:ExpressionStatement[30375-30467]"
    }, {
      "left" : "foldedSize += arrayFoldedChildren.size() - 1;",
      "right" : "foldedSize += arrayFoldedChildren.size() - 1;",
      "info" : "ExpressionStatement[30429-30474]:ExpressionStatement[30505-30550]"
    }, {
      "left" : "int originalSize = InlineCostEstimator.getCost(n);",
      "right" : "int originalSize = InlineCostEstimator.getCost(n);",
      "info" : "VariableDeclarationStatement[30480-30530]:VariableDeclarationStatement[30556-30606]"
    }, {
      "left" : "switch (arrayFoldedChildren.size()) {\n      case 0:\n        Node emptyStringNode = Node.newString(\"\");\n        n.getParent().replaceChild(n, emptyStringNode);\n        reportCodeChange();\n        return emptyStringNode;\n      case 1:\n        Node foldedStringNode = arrayFoldedChildren.remove(0);\n        if (foldedSize > originalSize) {\n          return n;\n        }\n        arrayNode.detachChildren();\n        if (foldedStringNode.getType() != Token.STRING) {\n          // If the Node is not a string literal, ensure that\n          // it is coerced to a string.\n          Node replacement = new Node(Token.ADD,\n              Node.newString(\"\").copyInformationFrom(right),\n              foldedStringNode);\n          foldedStringNode = replacement;\n        }\n        n.getParent().replaceChild(n, foldedStringNode);\n        reportCodeChange();\n        return foldedStringNode;\n      default:\n        // No folding could actually be performed.\n        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n          return n;\n        }\n        int kJoinOverhead = \"[].join()\".length();\n        foldedSize += kJoinOverhead;\n        foldedSize += InlineCostEstimator.getCost(right);\n        if (foldedSize > originalSize) {\n          return n;\n        }\n        arrayNode.detachChildren();\n        for (Node node : arrayFoldedChildren) {\n          arrayNode.addChildToBack(node);\n        }\n        reportCodeChange();\n        break;\n    }",
      "right" : "switch (arrayFoldedChildren.size()) {\n      case 0:\n        Node emptyStringNode = Node.newString(\"\");\n        n.getParent().replaceChild(n, emptyStringNode);\n        reportCodeChange();\n        return emptyStringNode;\n      case 1:\n        Node foldedStringNode = arrayFoldedChildren.remove(0);\n        if (foldedSize > originalSize) {\n          return n;\n        }\n        arrayNode.detachChildren();\n        if (foldedStringNode.getType() != Token.STRING) {\n          // If the Node is not a string literal, ensure that\n          // it is coerced to a string.\n          Node replacement = new Node(Token.ADD,\n              Node.newString(\"\").copyInformationFrom(right),\n              foldedStringNode);\n          foldedStringNode = replacement;\n        }\n        n.getParent().replaceChild(n, foldedStringNode);\n        reportCodeChange();\n        return foldedStringNode;\n      default:\n        // No folding could actually be performed.\n        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n          return n;\n        }\n        int kJoinOverhead = \"[].join()\".length();\n        foldedSize += kJoinOverhead;\n        foldedSize += InlineCostEstimator.getCost(right);\n        if (foldedSize > originalSize) {\n          return n;\n        }\n        arrayNode.detachChildren();\n        for (Node node : arrayFoldedChildren) {\n          arrayNode.addChildToBack(node);\n        }\n        reportCodeChange();\n        break;\n    }",
      "info" : "SwitchStatement[30535-31978]:SwitchStatement[30611-32054]"
    }, {
      "left" : "case 0:",
      "right" : "case 0:",
      "info" : "SwitchCase[30579-30586]:SwitchCase[30655-30662]"
    }, {
      "left" : "Node emptyStringNode = Node.newString(\"\");",
      "right" : "Node emptyStringNode = Node.newString(\"\");",
      "info" : "VariableDeclarationStatement[30595-30637]:VariableDeclarationStatement[30671-30713]"
    }, {
      "left" : "n.getParent().replaceChild(n, emptyStringNode);",
      "right" : "n.getParent().replaceChild(n, emptyStringNode);",
      "info" : "ExpressionStatement[30646-30693]:ExpressionStatement[30722-30769]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[30702-30721]:ExpressionStatement[30778-30797]"
    }, {
      "left" : "return emptyStringNode;",
      "right" : "return emptyStringNode;",
      "info" : "ReturnStatement[30730-30753]:ReturnStatement[30806-30829]"
    }, {
      "left" : "case 1:",
      "right" : "case 1:",
      "info" : "SwitchCase[30760-30767]:SwitchCase[30836-30843]"
    }, {
      "left" : "Node foldedStringNode = arrayFoldedChildren.remove(0);",
      "right" : "Node foldedStringNode = arrayFoldedChildren.remove(0);",
      "info" : "VariableDeclarationStatement[30776-30830]:VariableDeclarationStatement[30852-30906]"
    }, {
      "left" : "if (foldedSize > originalSize)",
      "right" : "if (foldedSize > originalSize)",
      "info" : "IfStatement[30839-30901]:IfStatement[30915-30977]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30870-30901]:Block[30946-30977]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[30882-30891]:ReturnStatement[30958-30967]"
    }, {
      "left" : "arrayNode.detachChildren();",
      "right" : "arrayNode.detachChildren();",
      "info" : "ExpressionStatement[30910-30937]:ExpressionStatement[30986-31013]"
    }, {
      "left" : "if (foldedStringNode.getType() != Token.STRING)",
      "right" : "if (foldedStringNode.getType() != Token.STRING)",
      "info" : "IfStatement[30946-31292]:IfStatement[31022-31368]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30994-31292]:Block[31070-31368]"
    }, {
      "left" : "Node replacement = new Node(Token.ADD,\n              Node.newString(\"\").copyInformationFrom(right),\n              foldedStringNode);",
      "right" : "Node replacement = new Node(Token.ADD,\n              Node.newString(\"\").copyInformationFrom(right),\n              foldedStringNode);",
      "info" : "VariableDeclarationStatement[31108-31240]:VariableDeclarationStatement[31184-31316]"
    }, {
      "left" : "foldedStringNode = replacement;",
      "right" : "foldedStringNode = replacement;",
      "info" : "ExpressionStatement[31251-31282]:ExpressionStatement[31327-31358]"
    }, {
      "left" : "n.getParent().replaceChild(n, foldedStringNode);",
      "right" : "n.getParent().replaceChild(n, foldedStringNode);",
      "info" : "ExpressionStatement[31301-31349]:ExpressionStatement[31377-31425]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[31358-31377]:ExpressionStatement[31434-31453]"
    }, {
      "left" : "return foldedStringNode;",
      "right" : "return foldedStringNode;",
      "info" : "ReturnStatement[31386-31410]:ReturnStatement[31462-31486]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[31417-31425]:SwitchCase[31493-31501]"
    }, {
      "left" : "if (arrayFoldedChildren.size() == arrayNode.getChildCount())",
      "right" : "if (arrayFoldedChildren.size() == arrayNode.getChildCount())",
      "info" : "IfStatement[31485-31577]:IfStatement[31561-31653]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31546-31577]:Block[31622-31653]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[31558-31567]:ReturnStatement[31634-31643]"
    }, {
      "left" : "int kJoinOverhead = \"[].join()\".length();",
      "right" : "int kJoinOverhead = \"[].join()\".length();",
      "info" : "VariableDeclarationStatement[31586-31627]:VariableDeclarationStatement[31662-31703]"
    }, {
      "left" : "foldedSize += kJoinOverhead;",
      "right" : "foldedSize += kJoinOverhead;",
      "info" : "ExpressionStatement[31636-31664]:ExpressionStatement[31712-31740]"
    }, {
      "left" : "foldedSize += InlineCostEstimator.getCost(right);",
      "right" : "foldedSize += InlineCostEstimator.getCost(right);",
      "info" : "ExpressionStatement[31673-31722]:ExpressionStatement[31749-31798]"
    }, {
      "left" : "if (foldedSize > originalSize)",
      "right" : "if (foldedSize > originalSize)",
      "info" : "IfStatement[31731-31793]:IfStatement[31807-31869]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31762-31793]:Block[31838-31869]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[31774-31783]:ReturnStatement[31850-31859]"
    }, {
      "left" : "arrayNode.detachChildren();",
      "right" : "arrayNode.detachChildren();",
      "info" : "ExpressionStatement[31802-31829]:ExpressionStatement[31878-31905]"
    }, {
      "left" : "for (Node node : arrayFoldedChildren)",
      "right" : "for (Node node : arrayFoldedChildren)",
      "info" : "EnhancedForStatement[31838-31929]:EnhancedForStatement[31914-32005]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31876-31929]:Block[31952-32005]"
    }, {
      "left" : "arrayNode.addChildToBack(node);",
      "right" : "arrayNode.addChildToBack(node);",
      "info" : "ExpressionStatement[31888-31919]:ExpressionStatement[31964-31995]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[31938-31957]:ExpressionStatement[32014-32033]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[31966-31972]:BreakStatement[32042-32048]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[31984-31993]:ReturnStatement[32060-32069]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[32064-32071]:Modifier[32140-32147]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[32072-32076]:SimpleType[32148-32152]"
    }, {
      "left" : "tryFoldGetElem",
      "right" : "tryFoldGetElem",
      "info" : "SimpleName[32077-32091]:SimpleName[32153-32167]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[32092-32098]:SingleVariableDeclaration[32168-32174]"
    }, {
      "left" : "Node left",
      "right" : "Node left",
      "info" : "SingleVariableDeclaration[32100-32109]:SingleVariableDeclaration[32176-32185]"
    }, {
      "left" : "Node right",
      "right" : "Node right",
      "info" : "SingleVariableDeclaration[32111-32121]:SingleVariableDeclaration[32187-32197]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32123-33157]:Block[32199-33233]"
    }, {
      "left" : "Preconditions.checkArgument(n.getType() == Token.GETELEM);",
      "right" : "Preconditions.checkArgument(n.getType() == Token.GETELEM);",
      "info" : "ExpressionStatement[32129-32187]:ExpressionStatement[32205-32263]"
    }, {
      "left" : "if (left.getType() == Token.ARRAYLIT)",
      "right" : "if (left.getType() == Token.ARRAYLIT)",
      "info" : "IfStatement[32193-33139]:IfStatement[32269-33215]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32231-33139]:Block[32307-33215]"
    }, {
      "left" : "if (right.getType() != Token.NUMBER)",
      "right" : "if (right.getType() != Token.NUMBER)",
      "info" : "IfStatement[32240-32437]:IfStatement[32316-32513]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32277-32437]:Block[32353-32513]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[32420-32429]:ReturnStatement[32496-32505]"
    }, {
      "left" : "double index = right.getDouble();",
      "right" : "double index = right.getDouble();",
      "info" : "VariableDeclarationStatement[32445-32478]:VariableDeclarationStatement[32521-32554]"
    }, {
      "left" : "int intIndex = (int) index;",
      "right" : "int intIndex = (int) index;",
      "info" : "VariableDeclarationStatement[32485-32512]:VariableDeclarationStatement[32561-32588]"
    }, {
      "left" : "if (intIndex != index)",
      "right" : "if (intIndex != index)",
      "info" : "IfStatement[32519-32620]:IfStatement[32595-32696]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32542-32620]:Block[32618-32696]"
    }, {
      "left" : "error(INVALID_GETELEM_INDEX_ERROR, right);",
      "right" : "error(INVALID_GETELEM_INDEX_ERROR, right);",
      "info" : "ExpressionStatement[32552-32594]:ExpressionStatement[32628-32670]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[32603-32612]:ReturnStatement[32679-32688]"
    }, {
      "left" : "if (intIndex < 0)",
      "right" : "if (intIndex < 0)",
      "info" : "IfStatement[32628-32722]:IfStatement[32704-32798]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32646-32722]:Block[32722-32798]"
    }, {
      "left" : "error(INDEX_OUT_OF_BOUNDS_ERROR, right);",
      "right" : "error(INDEX_OUT_OF_BOUNDS_ERROR, right);",
      "info" : "ExpressionStatement[32656-32696]:ExpressionStatement[32732-32772]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[32705-32714]:ReturnStatement[32781-32790]"
    }, {
      "left" : "Node elem = left.getFirstChild();",
      "right" : "Node elem = left.getFirstChild();",
      "info" : "VariableDeclarationStatement[32730-32763]:VariableDeclarationStatement[32806-32839]"
    }, {
      "left" : "for (int i = 0; elem != null && i < intIndex; i++)",
      "right" : "for (int i = 0; elem != null && i < intIndex; i++)",
      "info" : "ForStatement[32770-32861]:ForStatement[32846-32937]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32821-32861]:Block[32897-32937]"
    }, {
      "left" : "elem = elem.getNext();",
      "right" : "elem = elem.getNext();",
      "info" : "ExpressionStatement[32831-32853]:ExpressionStatement[32907-32929]"
    }, {
      "left" : "if (elem == null)",
      "right" : "if (elem == null)",
      "info" : "IfStatement[32869-32963]:IfStatement[32945-33039]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32887-32963]:Block[32963-33039]"
    }, {
      "left" : "error(INDEX_OUT_OF_BOUNDS_ERROR, right);",
      "right" : "error(INDEX_OUT_OF_BOUNDS_ERROR, right);",
      "info" : "ExpressionStatement[32897-32937]:ExpressionStatement[32973-33013]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[32946-32955]:ReturnStatement[33022-33031]"
    }, {
      "left" : "left.removeChild(elem);",
      "right" : "left.removeChild(elem);",
      "info" : "ExpressionStatement[33022-33045]:ExpressionStatement[33098-33121]"
    }, {
      "left" : "n.getParent().replaceChild(n, elem);",
      "right" : "n.getParent().replaceChild(n, elem);",
      "info" : "ExpressionStatement[33052-33088]:ExpressionStatement[33128-33164]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[33095-33114]:ExpressionStatement[33171-33190]"
    }, {
      "left" : "return elem;",
      "right" : "return elem;",
      "info" : "ReturnStatement[33121-33133]:ReturnStatement[33197-33209]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[33144-33153]:ReturnStatement[33220-33229]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[33252-33259]:Modifier[33328-33335]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[33260-33264]:SimpleType[33336-33340]"
    }, {
      "left" : "tryFoldGetProp",
      "right" : "tryFoldGetProp",
      "info" : "SimpleName[33265-33279]:SimpleName[33341-33355]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[33280-33286]:SingleVariableDeclaration[33356-33362]"
    }, {
      "left" : "Node left",
      "right" : "Node left",
      "info" : "SingleVariableDeclaration[33288-33297]:SingleVariableDeclaration[33364-33373]"
    }, {
      "left" : "Node right",
      "right" : "Node right",
      "info" : "SingleVariableDeclaration[33299-33309]:SingleVariableDeclaration[33375-33385]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33311-34191]:Block[33387-34267]"
    }, {
      "left" : "Preconditions.checkArgument(n.getType() == Token.GETPROP);",
      "right" : "Preconditions.checkArgument(n.getType() == Token.GETPROP);",
      "info" : "ExpressionStatement[33317-33375]:ExpressionStatement[33393-33451]"
    }, {
      "left" : "if (right.getType() == Token.STRING &&\n        right.getString().equals(\"length\"))",
      "right" : "if (right.getType() == Token.STRING &&\n        right.getString().equals(\"length\"))",
      "info" : "IfStatement[33381-34172]:IfStatement[33457-34248]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33464-34172]:Block[33540-34248]"
    }, {
      "left" : "int knownLength = -1;",
      "right" : "int knownLength = -1;",
      "info" : "VariableDeclarationStatement[33472-33493]:VariableDeclarationStatement[33548-33569]"
    }, {
      "left" : "switch (left.getType()) {\n        case Token.ARRAYLIT:\n          if (NodeUtil.mayHaveSideEffects(left)) {\n            // Nope, can't fold this, without handling the side-effects.\n            return n;\n          }\n          knownLength = left.getChildCount();\n          break;\n        case Token.STRING:\n          knownLength = left.getString().length();\n          break;\n        default:\n          // Not a foldable case, forget it.\n          return n;\n      }",
      "right" : "switch (left.getType()) {\n        case Token.ARRAYLIT:\n          if (NodeUtil.mayHaveSideEffects(left)) {\n            // Nope, can't fold this, without handling the side-effects.\n            return n;\n          }\n          knownLength = left.getChildCount();\n          break;\n        case Token.STRING:\n          knownLength = left.getString().length();\n          break;\n        default:\n          // Not a foldable case, forget it.\n          return n;\n      }",
      "info" : "SwitchStatement[33500-33960]:SwitchStatement[33576-34036]"
    }, {
      "left" : "case Token.ARRAYLIT:",
      "right" : "case Token.ARRAYLIT:",
      "info" : "SwitchCase[33534-33554]:SwitchCase[33610-33630]"
    }, {
      "left" : "if (NodeUtil.mayHaveSideEffects(left))",
      "right" : "if (NodeUtil.mayHaveSideEffects(left))",
      "info" : "IfStatement[33565-33712]:IfStatement[33641-33788]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33604-33712]:Block[33680-33788]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[33691-33700]:ReturnStatement[33767-33776]"
    }, {
      "left" : "knownLength = left.getChildCount();",
      "right" : "knownLength = left.getChildCount();",
      "info" : "ExpressionStatement[33723-33758]:ExpressionStatement[33799-33834]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[33769-33775]:BreakStatement[33845-33851]"
    }, {
      "left" : "case Token.STRING:",
      "right" : "case Token.STRING:",
      "info" : "SwitchCase[33784-33802]:SwitchCase[33860-33878]"
    }, {
      "left" : "knownLength = left.getString().length();",
      "right" : "knownLength = left.getString().length();",
      "info" : "ExpressionStatement[33813-33853]:ExpressionStatement[33889-33929]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[33864-33870]:BreakStatement[33940-33946]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[33879-33887]:SwitchCase[33955-33963]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[33943-33952]:ReturnStatement[34019-34028]"
    }, {
      "left" : "Preconditions.checkState(knownLength != -1);",
      "right" : "Preconditions.checkState(knownLength != -1);",
      "info" : "ExpressionStatement[33968-34012]:ExpressionStatement[34044-34088]"
    }, {
      "left" : "Node lengthNode = Node.newNumber(knownLength);",
      "right" : "Node lengthNode = Node.newNumber(knownLength);",
      "info" : "VariableDeclarationStatement[34019-34065]:VariableDeclarationStatement[34095-34141]"
    }, {
      "left" : "n.getParent().replaceChild(n, lengthNode);",
      "right" : "n.getParent().replaceChild(n, lengthNode);",
      "info" : "ExpressionStatement[34072-34114]:ExpressionStatement[34148-34190]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[34121-34140]:ExpressionStatement[34197-34216]"
    }, {
      "left" : "return lengthNode;",
      "right" : "return lengthNode;",
      "info" : "ReturnStatement[34148-34166]:ReturnStatement[34224-34242]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[34178-34187]:ReturnStatement[34254-34263]"
    } ]
  },
  "interFileMappings" : { }
}