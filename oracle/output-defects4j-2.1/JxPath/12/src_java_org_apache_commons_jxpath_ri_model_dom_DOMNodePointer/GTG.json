{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "DOMNodePointer",
      "right" : "DOMNodePointer",
      "info" : "TypeDeclaration[1975-24475]:TypeDeclaration[1975-24562]"
    }, {
      "left" : "private static final long serialVersionUID = -8751046933894857319L;",
      "right" : "private static final long serialVersionUID = -8751046933894857319L;",
      "info" : "FieldDeclaration[2139-2206]:FieldDeclaration[2139-2206]"
    }, {
      "left" : "private Node node;",
      "right" : "private Node node;",
      "info" : "FieldDeclaration[2216-2234]:FieldDeclaration[2216-2234]"
    }, {
      "left" : "private Map namespaces;",
      "right" : "private Map namespaces;",
      "info" : "FieldDeclaration[2239-2262]:FieldDeclaration[2239-2262]"
    }, {
      "left" : "private String defaultNamespace;",
      "right" : "private String defaultNamespace;",
      "info" : "FieldDeclaration[2267-2299]:FieldDeclaration[2267-2299]"
    }, {
      "left" : "private String id;",
      "right" : "private String id;",
      "info" : "FieldDeclaration[2304-2322]:FieldDeclaration[2304-2322]"
    }, {
      "left" : "public static final String XML_NAMESPACE_URI = \n            \"http://www.w3.org/XML/1998/namespace\";",
      "right" : "public static final String XML_NAMESPACE_URI = \n            \"http://www.w3.org/XML/1998/namespace\";",
      "info" : "FieldDeclaration[2328-2427]:FieldDeclaration[2328-2427]"
    }, {
      "left" : "public static final String XMLNS_NAMESPACE_URI = \n            \"http://www.w3.org/2000/xmlns/\";",
      "right" : "public static final String XMLNS_NAMESPACE_URI = \n            \"http://www.w3.org/2000/xmlns/\";",
      "info" : "FieldDeclaration[2432-2526]:FieldDeclaration[2432-2526]"
    }, {
      "left" : "public DOMNodePointer(Node node, Locale locale)",
      "right" : "public DOMNodePointer(Node node, Locale locale)",
      "info" : "MethodDeclaration[2532-2642]:MethodDeclaration[2532-2642]"
    }, {
      "left" : "public DOMNodePointer(Node node, Locale locale, String id)",
      "right" : "public DOMNodePointer(Node node, Locale locale, String id)",
      "info" : "MethodDeclaration[2648-2791]:MethodDeclaration[2648-2791]"
    }, {
      "left" : "public DOMNodePointer(NodePointer parent, Node node)",
      "right" : "public DOMNodePointer(NodePointer parent, Node node)",
      "info" : "MethodDeclaration[2797-2906]:MethodDeclaration[2797-2906]"
    }, {
      "left" : "public boolean testNode(NodeTest test)",
      "right" : "public boolean testNode(NodeTest test)",
      "info" : "MethodDeclaration[2916-2999]:MethodDeclaration[2916-2999]"
    }, {
      "left" : "public static boolean testNode(Node node, NodeTest test)",
      "right" : "public static boolean testNode(Node node, NodeTest test)",
      "info" : "MethodDeclaration[3005-5118]:MethodDeclaration[3005-5205]"
    }, {
      "left" : "private static boolean equalStrings(String s1, String s2)",
      "right" : "private static boolean equalStrings(String s1, String s2)",
      "info" : "MethodDeclaration[5124-5362]:MethodDeclaration[5211-5449]"
    }, {
      "left" : "public QName getName()",
      "right" : "public QName getName()",
      "info" : "MethodDeclaration[5368-5807]:MethodDeclaration[5455-5894]"
    }, {
      "left" : "public String getNamespaceURI()",
      "right" : "public String getNamespaceURI()",
      "info" : "MethodDeclaration[5813-5890]:MethodDeclaration[5900-5977]"
    }, {
      "left" : "public NodeIterator childIterator(\n        NodeTest test,\n        boolean reverse,\n        NodePointer startWith)",
      "right" : "public NodeIterator childIterator(\n        NodeTest test,\n        boolean reverse,\n        NodePointer startWith)",
      "info" : "MethodDeclaration[5896-6090]:MethodDeclaration[5983-6177]"
    }, {
      "left" : "public NodeIterator attributeIterator(QName name)",
      "right" : "public NodeIterator attributeIterator(QName name)",
      "info" : "MethodDeclaration[6096-6206]:MethodDeclaration[6183-6293]"
    }, {
      "left" : "public NodePointer namespacePointer(String prefix)",
      "right" : "public NodePointer namespacePointer(String prefix)",
      "info" : "MethodDeclaration[6212-6321]:MethodDeclaration[6299-6408]"
    }, {
      "left" : "public NodeIterator namespaceIterator()",
      "right" : "public NodeIterator namespaceIterator()",
      "info" : "MethodDeclaration[6327-6421]:MethodDeclaration[6414-6508]"
    }, {
      "left" : "public String getNamespaceURI(String prefix)",
      "right" : "public String getNamespaceURI(String prefix)",
      "info" : "MethodDeclaration[6427-7972]:MethodDeclaration[6514-8059]"
    }, {
      "left" : "public String getDefaultNamespaceURI()",
      "right" : "public String getDefaultNamespaceURI()",
      "info" : "MethodDeclaration[7978-8868]:MethodDeclaration[8065-8955]"
    }, {
      "left" : "public Object getBaseValue()",
      "right" : "public Object getBaseValue()",
      "info" : "MethodDeclaration[8874-8931]:MethodDeclaration[8961-9018]"
    }, {
      "left" : "public Object getImmediateNode()",
      "right" : "public Object getImmediateNode()",
      "info" : "MethodDeclaration[8937-8998]:MethodDeclaration[9024-9085]"
    }, {
      "left" : "public boolean isActual()",
      "right" : "public boolean isActual()",
      "info" : "MethodDeclaration[9004-9058]:MethodDeclaration[9091-9145]"
    }, {
      "left" : "public boolean isCollection()",
      "right" : "public boolean isCollection()",
      "info" : "MethodDeclaration[9064-9123]:MethodDeclaration[9151-9210]"
    }, {
      "left" : "public int getLength()",
      "right" : "public int getLength()",
      "info" : "MethodDeclaration[9129-9177]:MethodDeclaration[9216-9264]"
    }, {
      "left" : "public boolean isLeaf()",
      "right" : "public boolean isLeaf()",
      "info" : "MethodDeclaration[9183-9252]:MethodDeclaration[9270-9339]"
    }, {
      "left" : "public boolean isLanguage(String lang)",
      "right" : "public boolean isLanguage(String lang)",
      "info" : "MethodDeclaration[9258-9692]:MethodDeclaration[9345-9779]"
    }, {
      "left" : "protected static String findEnclosingAttribute(Node n, String attrName)",
      "right" : "protected static String findEnclosingAttribute(Node n, String attrName)",
      "info" : "MethodDeclaration[9698-10145]:MethodDeclaration[9785-10232]"
    }, {
      "left" : "protected String getLanguage()",
      "right" : "protected String getLanguage()",
      "info" : "MethodDeclaration[10151-10246]:MethodDeclaration[10238-10333]"
    }, {
      "left" : "public void setValue(Object value)",
      "right" : "public void setValue(Object value)",
      "info" : "MethodDeclaration[10252-12207]:MethodDeclaration[10339-12294]"
    }, {
      "left" : "public NodePointer createChild(\n        JXPathContext context,\n        QName name,\n        int index)",
      "right" : "public NodePointer createChild(\n        JXPathContext context,\n        QName name,\n        int index)",
      "info" : "MethodDeclaration[12217-13269]:MethodDeclaration[12304-13356]"
    }, {
      "left" : "public NodePointer createChild(JXPathContext context, \n                QName name, int index, Object value)",
      "right" : "public NodePointer createChild(JXPathContext context, \n                QName name, int index, Object value)",
      "info" : "MethodDeclaration[13275-13504]:MethodDeclaration[13362-13591]"
    }, {
      "left" : "public NodePointer createAttribute(JXPathContext context, QName name)",
      "right" : "public NodePointer createAttribute(JXPathContext context, QName name)",
      "info" : "MethodDeclaration[13510-14345]:MethodDeclaration[13597-14432]"
    }, {
      "left" : "public void remove()",
      "right" : "public void remove()",
      "info" : "MethodDeclaration[14351-14567]:MethodDeclaration[14438-14654]"
    }, {
      "left" : "public String asPath()",
      "right" : "public String asPath()",
      "info" : "MethodDeclaration[14573-17252]:MethodDeclaration[14660-17339]"
    }, {
      "left" : "private String escape(String string)",
      "right" : "private String escape(String string)",
      "info" : "MethodDeclaration[17258-17861]:MethodDeclaration[17345-17948]"
    }, {
      "left" : "private int getRelativePositionByName()",
      "right" : "private int getRelativePositionByName()",
      "info" : "MethodDeclaration[17867-18296]:MethodDeclaration[17954-18383]"
    }, {
      "left" : "private int getRelativePositionOfElement()",
      "right" : "private int getRelativePositionOfElement()",
      "info" : "MethodDeclaration[18306-18618]:MethodDeclaration[18393-18705]"
    }, {
      "left" : "private int getRelativePositionOfTextNode()",
      "right" : "private int getRelativePositionOfTextNode()",
      "info" : "MethodDeclaration[18624-18996]:MethodDeclaration[18711-19083]"
    }, {
      "left" : "private int getRelativePositionOfPI(String target)",
      "right" : "private int getRelativePositionOfPI(String target)",
      "info" : "MethodDeclaration[19002-19411]:MethodDeclaration[19089-19498]"
    }, {
      "left" : "public int hashCode()",
      "right" : "public int hashCode()",
      "info" : "MethodDeclaration[19417-19492]:MethodDeclaration[19504-19579]"
    }, {
      "left" : "public boolean equals(Object object)",
      "right" : "public boolean equals(Object object)",
      "info" : "MethodDeclaration[19498-19651]:MethodDeclaration[19585-19738]"
    }, {
      "left" : "public static String getPrefix(Node node)",
      "right" : "public static String getPrefix(Node node)",
      "info" : "MethodDeclaration[19657-19961]:MethodDeclaration[19744-20048]"
    }, {
      "left" : "public static String getLocalName(Node node)",
      "right" : "public static String getLocalName(Node node)",
      "info" : "MethodDeclaration[19967-20287]:MethodDeclaration[20054-20374]"
    }, {
      "left" : "public static String getNamespaceURI(Node node)",
      "right" : "public static String getNamespaceURI(Node node)",
      "info" : "MethodDeclaration[20297-21102]:MethodDeclaration[20384-21189]"
    }, {
      "left" : "public Object getValue()",
      "right" : "public Object getValue()",
      "info" : "MethodDeclaration[21108-21345]:MethodDeclaration[21195-21432]"
    }, {
      "left" : "private String stringValue(Node node)",
      "right" : "private String stringValue(Node node)",
      "info" : "MethodDeclaration[21351-22283]:MethodDeclaration[21438-22370]"
    }, {
      "left" : "public Pointer getPointerByID(JXPathContext context, String id)",
      "right" : "public Pointer getPointerByID(JXPathContext context, String id)",
      "info" : "MethodDeclaration[22289-22730]:MethodDeclaration[22376-22817]"
    }, {
      "left" : "private AbstractFactory getAbstractFactory(JXPathContext context)",
      "right" : "private AbstractFactory getAbstractFactory(JXPathContext context)",
      "info" : "MethodDeclaration[22736-23108]:MethodDeclaration[22823-23195]"
    }, {
      "left" : "public int compareChildNodePointers(\n            NodePointer pointer1, NodePointer pointer2)",
      "right" : "public int compareChildNodePointers(\n            NodePointer pointer1, NodePointer pointer2)",
      "info" : "MethodDeclaration[23114-24473]:MethodDeclaration[23201-24560]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2580-2642]:Block[2580-2642]"
    }, {
      "left" : "super(null, locale);",
      "right" : "super(null, locale);",
      "info" : "SuperConstructorInvocation[2590-2610]:SuperConstructorInvocation[2590-2610]"
    }, {
      "left" : "this.node = node;",
      "right" : "this.node = node;",
      "info" : "ExpressionStatement[2619-2636]:ExpressionStatement[2619-2636]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2707-2791]:Block[2707-2791]"
    }, {
      "left" : "super(null, locale);",
      "right" : "super(null, locale);",
      "info" : "SuperConstructorInvocation[2717-2737]:SuperConstructorInvocation[2717-2737]"
    }, {
      "left" : "this.node = node;",
      "right" : "this.node = node;",
      "info" : "ExpressionStatement[2746-2763]:ExpressionStatement[2746-2763]"
    }, {
      "left" : "this.id = id;",
      "right" : "this.id = id;",
      "info" : "ExpressionStatement[2772-2785]:ExpressionStatement[2772-2785]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2850-2906]:Block[2850-2906]"
    }, {
      "left" : "super(parent);",
      "right" : "super(parent);",
      "info" : "SuperConstructorInvocation[2860-2874]:SuperConstructorInvocation[2860-2874]"
    }, {
      "left" : "this.node = node;",
      "right" : "this.node = node;",
      "info" : "ExpressionStatement[2883-2900]:ExpressionStatement[2883-2900]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2955-2999]:Block[2955-2999]"
    }, {
      "left" : "return testNode(node, test);",
      "right" : "return testNode(node, test);",
      "info" : "ReturnStatement[2965-2993]:ReturnStatement[2965-2993]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3062-5118]:Block[3062-5205]"
    }, {
      "left" : "if (test == null)",
      "right" : "if (test == null)",
      "info" : "IfStatement[3072-3126]:IfStatement[3072-3126]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3090-3126]:Block[3090-3126]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[3104-3116]:ReturnStatement[3104-3116]"
    }, {
      "left" : "if (test instanceof NodeNameTest)",
      "right" : "if (test instanceof NodeNameTest)",
      "info" : "IfStatement[3135-3975]:IfStatement[3135-4062]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3169-3975]:Block[3169-4062]"
    }, {
      "left" : "if (node.getNodeType() != Node.ELEMENT_NODE)",
      "right" : "if (node.getNodeType() != Node.ELEMENT_NODE)",
      "info" : "IfStatement[3183-3273]:IfStatement[3183-3273]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3228-3273]:Block[3228-3273]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[3246-3259]:ReturnStatement[3246-3259]"
    }, {
      "left" : "NodeNameTest nodeNameTest = (NodeNameTest) test;",
      "right" : "NodeNameTest nodeNameTest = (NodeNameTest) test;",
      "info" : "VariableDeclarationStatement[3287-3335]:VariableDeclarationStatement[3287-3335]"
    }, {
      "left" : "QName testName = nodeNameTest.getNodeName();",
      "right" : "QName testName = nodeNameTest.getNodeName();",
      "info" : "VariableDeclarationStatement[3348-3392]:VariableDeclarationStatement[3348-3392]"
    }, {
      "left" : "String namespaceURI = nodeNameTest.getNamespaceURI();",
      "right" : "String namespaceURI = nodeNameTest.getNamespaceURI();",
      "info" : "VariableDeclarationStatement[3405-3458]:VariableDeclarationStatement[3405-3458]"
    }, {
      "left" : "boolean wildcard = nodeNameTest.isWildcard();",
      "right" : "boolean wildcard = nodeNameTest.isWildcard();",
      "info" : "VariableDeclarationStatement[3471-3516]:VariableDeclarationStatement[3471-3516]"
    }, {
      "left" : "String testPrefix = testName.getPrefix();",
      "right" : "String testPrefix = testName.getPrefix();",
      "info" : "VariableDeclarationStatement[3529-3570]:VariableDeclarationStatement[3529-3570]"
    }, {
      "left" : "if (wildcard && testPrefix == null)",
      "right" : "if (wildcard && testPrefix == null)",
      "info" : "IfStatement[3583-3663]:IfStatement[3583-3663]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3619-3663]:Block[3619-3663]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[3637-3649]:ReturnStatement[3637-3649]"
    }, {
      "left" : "if (wildcard\n                || testName.getName()\n                        .equals(DOMNodePointer.getLocalName(node)))",
      "right" : "if (wildcard\n                || testName.getName()\n                        .equals(DOMNodePointer.getLocalName(node)))",
      "info" : "IfStatement[3676-3939]:IfStatement[3676-4026]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3795-3939]:Block[3795-4026]"
    }, {
      "left" : "String nodeNS = DOMNodePointer.getNamespaceURI(node);",
      "right" : "String nodeNS = DOMNodePointer.getNamespaceURI(node);",
      "info" : "VariableDeclarationStatement[3813-3866]:VariableDeclarationStatement[3813-3866]"
    }, {
      "left" : "return equalStrings(namespaceURI, nodeNS);",
      "right" : "return equalStrings(namespaceURI, nodeNS) || nodeNS == null\n                        && equalStrings(testPrefix, getPrefix(node));",
      "info" : "ReturnStatement[3883-3925]:ReturnStatement[3883-4012]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[3952-3965]:ReturnStatement[4039-4052]"
    }, {
      "left" : "if (test instanceof NodeTypeTest)",
      "right" : "if (test instanceof NodeTypeTest)",
      "info" : "IfStatement[3984-4733]:IfStatement[4071-4820]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4018-4733]:Block[4105-4820]"
    }, {
      "left" : "int nodeType = node.getNodeType();",
      "right" : "int nodeType = node.getNodeType();",
      "info" : "VariableDeclarationStatement[4032-4066]:VariableDeclarationStatement[4119-4153]"
    }, {
      "left" : "switch (((NodeTypeTest) test).getNodeType()) {\n                case Compiler.NODE_TYPE_NODE :\n                    return nodeType == Node.ELEMENT_NODE\n                            || nodeType == Node.DOCUMENT_NODE;\n                case Compiler.NODE_TYPE_TEXT :\n                    return nodeType == Node.CDATA_SECTION_NODE\n                        || nodeType == Node.TEXT_NODE;\n                case Compiler.NODE_TYPE_COMMENT :\n                    return nodeType == Node.COMMENT_NODE;\n                case Compiler.NODE_TYPE_PI :\n                    return nodeType == Node.PROCESSING_INSTRUCTION_NODE;\n            }",
      "right" : "switch (((NodeTypeTest) test).getNodeType()) {\n                case Compiler.NODE_TYPE_NODE :\n                    return nodeType == Node.ELEMENT_NODE\n                            || nodeType == Node.DOCUMENT_NODE;\n                case Compiler.NODE_TYPE_TEXT :\n                    return nodeType == Node.CDATA_SECTION_NODE\n                        || nodeType == Node.TEXT_NODE;\n                case Compiler.NODE_TYPE_COMMENT :\n                    return nodeType == Node.COMMENT_NODE;\n                case Compiler.NODE_TYPE_PI :\n                    return nodeType == Node.PROCESSING_INSTRUCTION_NODE;\n            }",
      "info" : "SwitchStatement[4079-4697]:SwitchStatement[4166-4784]"
    }, {
      "left" : "case Compiler.NODE_TYPE_NODE :",
      "right" : "case Compiler.NODE_TYPE_NODE :",
      "info" : "SwitchCase[4142-4172]:SwitchCase[4229-4259]"
    }, {
      "left" : "return nodeType == Node.ELEMENT_NODE\n                            || nodeType == Node.DOCUMENT_NODE;",
      "right" : "return nodeType == Node.ELEMENT_NODE\n                            || nodeType == Node.DOCUMENT_NODE;",
      "info" : "ReturnStatement[4193-4292]:ReturnStatement[4280-4379]"
    }, {
      "left" : "case Compiler.NODE_TYPE_TEXT :",
      "right" : "case Compiler.NODE_TYPE_TEXT :",
      "info" : "SwitchCase[4309-4339]:SwitchCase[4396-4426]"
    }, {
      "left" : "return nodeType == Node.CDATA_SECTION_NODE\n                        || nodeType == Node.TEXT_NODE;",
      "right" : "return nodeType == Node.CDATA_SECTION_NODE\n                        || nodeType == Node.TEXT_NODE;",
      "info" : "ReturnStatement[4360-4457]:ReturnStatement[4447-4544]"
    }, {
      "left" : "case Compiler.NODE_TYPE_COMMENT :",
      "right" : "case Compiler.NODE_TYPE_COMMENT :",
      "info" : "SwitchCase[4474-4507]:SwitchCase[4561-4594]"
    }, {
      "left" : "return nodeType == Node.COMMENT_NODE;",
      "right" : "return nodeType == Node.COMMENT_NODE;",
      "info" : "ReturnStatement[4528-4565]:ReturnStatement[4615-4652]"
    }, {
      "left" : "case Compiler.NODE_TYPE_PI :",
      "right" : "case Compiler.NODE_TYPE_PI :",
      "info" : "SwitchCase[4582-4610]:SwitchCase[4669-4697]"
    }, {
      "left" : "return nodeType == Node.PROCESSING_INSTRUCTION_NODE;",
      "right" : "return nodeType == Node.PROCESSING_INSTRUCTION_NODE;",
      "info" : "ReturnStatement[4631-4683]:ReturnStatement[4718-4770]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[4710-4723]:ReturnStatement[4797-4810]"
    }, {
      "left" : "if (test instanceof ProcessingInstructionTest)",
      "right" : "if (test instanceof ProcessingInstructionTest)",
      "info" : "IfStatement[4742-5090]:IfStatement[4829-5177]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4789-5090]:Block[4876-5177]"
    }, {
      "left" : "if (node.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE)",
      "right" : "if (node.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE)",
      "info" : "IfStatement[4803-5080]:IfStatement[4890-5167]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4863-5080]:Block[4950-5167]"
    }, {
      "left" : "String testPI = ((ProcessingInstructionTest) test).getTarget();",
      "right" : "String testPI = ((ProcessingInstructionTest) test).getTarget();",
      "info" : "VariableDeclarationStatement[4881-4944]:VariableDeclarationStatement[4968-5031]"
    }, {
      "left" : "String nodePI = ((ProcessingInstruction) node).getTarget();",
      "right" : "String nodePI = ((ProcessingInstruction) node).getTarget();",
      "info" : "VariableDeclarationStatement[4961-5020]:VariableDeclarationStatement[5048-5107]"
    }, {
      "left" : "return testPI.equals(nodePI);",
      "right" : "return testPI.equals(nodePI);",
      "info" : "ReturnStatement[5037-5066]:ReturnStatement[5124-5153]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[5099-5112]:ReturnStatement[5186-5199]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5182-5362]:Block[5269-5449]"
    }, {
      "left" : "if (s1 == s2)",
      "right" : "if (s1 == s2)",
      "info" : "IfStatement[5192-5242]:IfStatement[5279-5329]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5206-5242]:Block[5293-5329]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[5220-5232]:ReturnStatement[5307-5319]"
    }, {
      "left" : "s1 = s1 == null ? \"\" : s1.trim();",
      "right" : "s1 = s1 == null ? \"\" : s1.trim();",
      "info" : "ExpressionStatement[5251-5284]:ExpressionStatement[5338-5371]"
    }, {
      "left" : "s2 = s2 == null ? \"\" : s2.trim();",
      "right" : "s2 = s2 == null ? \"\" : s2.trim();",
      "info" : "ExpressionStatement[5293-5326]:ExpressionStatement[5380-5413]"
    }, {
      "left" : "return s1.equals(s2);",
      "right" : "return s1.equals(s2);",
      "info" : "ReturnStatement[5335-5356]:ReturnStatement[5422-5443]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5391-5807]:Block[5478-5894]"
    }, {
      "left" : "String ln = null;",
      "right" : "String ln = null;",
      "info" : "VariableDeclarationStatement[5401-5418]:VariableDeclarationStatement[5488-5505]"
    }, {
      "left" : "String ns = null;",
      "right" : "String ns = null;",
      "info" : "VariableDeclarationStatement[5427-5444]:VariableDeclarationStatement[5514-5531]"
    }, {
      "left" : "int type = node.getNodeType();",
      "right" : "int type = node.getNodeType();",
      "info" : "VariableDeclarationStatement[5453-5483]:VariableDeclarationStatement[5540-5570]"
    }, {
      "left" : "if (type == Node.ELEMENT_NODE)",
      "right" : "if (type == Node.ELEMENT_NODE)",
      "info" : "IfStatement[5492-5767]:IfStatement[5579-5854]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5523-5635]:Block[5610-5722]"
    }, {
      "left" : "ns = DOMNodePointer.getPrefix(node);",
      "right" : "ns = DOMNodePointer.getPrefix(node);",
      "info" : "ExpressionStatement[5537-5573]:ExpressionStatement[5624-5660]"
    }, {
      "left" : "ln = DOMNodePointer.getLocalName(node);",
      "right" : "ln = DOMNodePointer.getLocalName(node);",
      "info" : "ExpressionStatement[5586-5625]:ExpressionStatement[5673-5712]"
    }, {
      "left" : "if (type == Node.PROCESSING_INSTRUCTION_NODE)",
      "right" : "if (type == Node.PROCESSING_INSTRUCTION_NODE)",
      "info" : "IfStatement[5649-5767]:IfStatement[5736-5854]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5695-5767]:Block[5782-5854]"
    }, {
      "left" : "ln = ((ProcessingInstruction) node).getTarget();",
      "right" : "ln = ((ProcessingInstruction) node).getTarget();",
      "info" : "ExpressionStatement[5709-5757]:ExpressionStatement[5796-5844]"
    }, {
      "left" : "return new QName(ns, ln);",
      "right" : "return new QName(ns, ln);",
      "info" : "ReturnStatement[5776-5801]:ReturnStatement[5863-5888]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5845-5890]:Block[5932-5977]"
    }, {
      "left" : "return getNamespaceURI(node);",
      "right" : "return getNamespaceURI(node);",
      "info" : "ReturnStatement[5855-5884]:ReturnStatement[5942-5971]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6015-6090]:Block[6102-6177]"
    }, {
      "left" : "return new DOMNodeIterator(this, test, reverse, startWith);",
      "right" : "return new DOMNodeIterator(this, test, reverse, startWith);",
      "info" : "ReturnStatement[6025-6084]:ReturnStatement[6112-6171]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6146-6206]:Block[6233-6293]"
    }, {
      "left" : "return new DOMAttributeIterator(this, name);",
      "right" : "return new DOMAttributeIterator(this, name);",
      "info" : "ReturnStatement[6156-6200]:ReturnStatement[6243-6287]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6263-6321]:Block[6350-6408]"
    }, {
      "left" : "return new NamespacePointer(this, prefix);",
      "right" : "return new NamespacePointer(this, prefix);",
      "info" : "ReturnStatement[6273-6315]:ReturnStatement[6360-6402]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6367-6421]:Block[6454-6508]"
    }, {
      "left" : "return new DOMNamespaceIterator(this);",
      "right" : "return new DOMNamespaceIterator(this);",
      "info" : "ReturnStatement[6377-6415]:ReturnStatement[6464-6502]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6472-7972]:Block[6559-8059]"
    }, {
      "left" : "if (prefix == null || prefix.equals(\"\"))",
      "right" : "if (prefix == null || prefix.equals(\"\"))",
      "info" : "IfStatement[6482-6579]:IfStatement[6569-6666]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6523-6579]:Block[6610-6666]"
    }, {
      "left" : "return getDefaultNamespaceURI();",
      "right" : "return getDefaultNamespaceURI();",
      "info" : "ReturnStatement[6537-6569]:ReturnStatement[6624-6656]"
    }, {
      "left" : "if (prefix.equals(\"xml\"))",
      "right" : "if (prefix.equals(\"xml\"))",
      "info" : "IfStatement[6589-6664]:IfStatement[6676-6751]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6615-6664]:Block[6702-6751]"
    }, {
      "left" : "return XML_NAMESPACE_URI;",
      "right" : "return XML_NAMESPACE_URI;",
      "info" : "ReturnStatement[6629-6654]:ReturnStatement[6716-6741]"
    }, {
      "left" : "if (prefix.equals(\"xmlns\"))",
      "right" : "if (prefix.equals(\"xmlns\"))",
      "info" : "IfStatement[6674-6753]:IfStatement[6761-6840]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6702-6753]:Block[6789-6840]"
    }, {
      "left" : "return XMLNS_NAMESPACE_URI;",
      "right" : "return XMLNS_NAMESPACE_URI;",
      "info" : "ReturnStatement[6716-6743]:ReturnStatement[6803-6830]"
    }, {
      "left" : "String namespace = null;",
      "right" : "String namespace = null;",
      "info" : "VariableDeclarationStatement[6763-6787]:VariableDeclarationStatement[6850-6874]"
    }, {
      "left" : "if (namespaces == null)",
      "right" : "if (namespaces == null)",
      "info" : "IfStatement[6796-6953]:IfStatement[6883-7040]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6820-6871]:Block[6907-6958]"
    }, {
      "left" : "namespaces = new HashMap();",
      "right" : "namespaces = new HashMap();",
      "info" : "ExpressionStatement[6834-6861]:ExpressionStatement[6921-6948]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6885-6953]:Block[6972-7040]"
    }, {
      "left" : "namespace = (String) namespaces.get(prefix);",
      "right" : "namespace = (String) namespaces.get(prefix);",
      "info" : "ExpressionStatement[6899-6943]:ExpressionStatement[6986-7030]"
    }, {
      "left" : "if (namespace == null)",
      "right" : "if (namespace == null)",
      "info" : "IfStatement[6963-7731]:IfStatement[7050-7818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6986-7731]:Block[7073-7818]"
    }, {
      "left" : "String qname = \"xmlns:\" + prefix;",
      "right" : "String qname = \"xmlns:\" + prefix;",
      "info" : "VariableDeclarationStatement[7000-7033]:VariableDeclarationStatement[7087-7120]"
    }, {
      "left" : "Node aNode = node;",
      "right" : "Node aNode = node;",
      "info" : "VariableDeclarationStatement[7046-7064]:VariableDeclarationStatement[7133-7151]"
    }, {
      "left" : "if (aNode instanceof Document)",
      "right" : "if (aNode instanceof Document)",
      "info" : "IfStatement[7077-7187]:IfStatement[7164-7274]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7108-7187]:Block[7195-7274]"
    }, {
      "left" : "aNode = ((Document)aNode).getDocumentElement();",
      "right" : "aNode = ((Document)aNode).getDocumentElement();",
      "info" : "ExpressionStatement[7126-7173]:ExpressionStatement[7213-7260]"
    }, {
      "left" : "while (aNode != null)",
      "right" : "while (aNode != null)",
      "info" : "WhileStatement[7200-7587]:WhileStatement[7287-7674]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7222-7587]:Block[7309-7674]"
    }, {
      "left" : "if (aNode.getNodeType() == Node.ELEMENT_NODE)",
      "right" : "if (aNode.getNodeType() == Node.ELEMENT_NODE)",
      "info" : "IfStatement[7240-7526]:IfStatement[7327-7613]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7286-7526]:Block[7373-7613]"
    }, {
      "left" : "Attr attr = ((Element) aNode).getAttributeNode(qname);",
      "right" : "Attr attr = ((Element) aNode).getAttributeNode(qname);",
      "info" : "VariableDeclarationStatement[7308-7362]:VariableDeclarationStatement[7395-7449]"
    }, {
      "left" : "if (attr != null)",
      "right" : "if (attr != null)",
      "info" : "IfStatement[7383-7508]:IfStatement[7470-7595]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7401-7508]:Block[7488-7595]"
    }, {
      "left" : "namespace = attr.getValue();",
      "right" : "namespace = attr.getValue();",
      "info" : "ExpressionStatement[7427-7455]:ExpressionStatement[7514-7542]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[7480-7486]:BreakStatement[7567-7573]"
    }, {
      "left" : "aNode = aNode.getParentNode();",
      "right" : "aNode = aNode.getParentNode();",
      "info" : "ExpressionStatement[7543-7573]:ExpressionStatement[7630-7660]"
    }, {
      "left" : "if (namespace == null || namespace.equals(\"\"))",
      "right" : "if (namespace == null || namespace.equals(\"\"))",
      "info" : "IfStatement[7600-7721]:IfStatement[7687-7808]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7647-7721]:Block[7734-7808]"
    }, {
      "left" : "namespace = NodePointer.UNKNOWN_NAMESPACE;",
      "right" : "namespace = NodePointer.UNKNOWN_NAMESPACE;",
      "info" : "ExpressionStatement[7665-7707]:ExpressionStatement[7752-7794]"
    }, {
      "left" : "namespaces.put(prefix, namespace);",
      "right" : "namespaces.put(prefix, namespace);",
      "info" : "ExpressionStatement[7741-7775]:ExpressionStatement[7828-7862]"
    }, {
      "left" : "if (namespace == UNKNOWN_NAMESPACE)",
      "right" : "if (namespace == UNKNOWN_NAMESPACE)",
      "info" : "IfStatement[7784-7856]:IfStatement[7871-7943]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7820-7856]:Block[7907-7943]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[7834-7846]:ReturnStatement[7921-7933]"
    }, {
      "left" : "return namespace;",
      "right" : "return namespace;",
      "info" : "ReturnStatement[7949-7966]:ReturnStatement[8036-8053]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8017-8868]:Block[8104-8955]"
    }, {
      "left" : "if (defaultNamespace == null)",
      "right" : "if (defaultNamespace == null)",
      "info" : "IfStatement[8027-8632]:IfStatement[8114-8719]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8057-8632]:Block[8144-8719]"
    }, {
      "left" : "Node aNode = node;",
      "right" : "Node aNode = node;",
      "info" : "VariableDeclarationStatement[8071-8089]:VariableDeclarationStatement[8158-8176]"
    }, {
      "left" : "if (aNode instanceof Document)",
      "right" : "if (aNode instanceof Document)",
      "info" : "IfStatement[8102-8213]:IfStatement[8189-8300]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8133-8213]:Block[8220-8300]"
    }, {
      "left" : "aNode = ((Document) aNode).getDocumentElement();",
      "right" : "aNode = ((Document) aNode).getDocumentElement();",
      "info" : "ExpressionStatement[8151-8199]:ExpressionStatement[8238-8286]"
    }, {
      "left" : "while (aNode != null)",
      "right" : "while (aNode != null)",
      "info" : "WhileStatement[8226-8622]:WhileStatement[8313-8709]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8248-8622]:Block[8335-8709]"
    }, {
      "left" : "if (aNode.getNodeType() == Node.ELEMENT_NODE)",
      "right" : "if (aNode.getNodeType() == Node.ELEMENT_NODE)",
      "info" : "IfStatement[8266-8561]:IfStatement[8353-8648]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8312-8561]:Block[8399-8648]"
    }, {
      "left" : "Attr attr = ((Element) aNode).getAttributeNode(\"xmlns\");",
      "right" : "Attr attr = ((Element) aNode).getAttributeNode(\"xmlns\");",
      "info" : "VariableDeclarationStatement[8334-8390]:VariableDeclarationStatement[8421-8477]"
    }, {
      "left" : "if (attr != null)",
      "right" : "if (attr != null)",
      "info" : "IfStatement[8411-8543]:IfStatement[8498-8630]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8429-8543]:Block[8516-8630]"
    }, {
      "left" : "defaultNamespace = attr.getValue();",
      "right" : "defaultNamespace = attr.getValue();",
      "info" : "ExpressionStatement[8455-8490]:ExpressionStatement[8542-8577]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[8515-8521]:BreakStatement[8602-8608]"
    }, {
      "left" : "aNode = aNode.getParentNode();",
      "right" : "aNode = aNode.getParentNode();",
      "info" : "ExpressionStatement[8578-8608]:ExpressionStatement[8665-8695]"
    }, {
      "left" : "if (defaultNamespace == null)",
      "right" : "if (defaultNamespace == null)",
      "info" : "IfStatement[8641-8717]:IfStatement[8728-8804]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8671-8717]:Block[8758-8804]"
    }, {
      "left" : "defaultNamespace = \"\";",
      "right" : "defaultNamespace = \"\";",
      "info" : "ExpressionStatement[8685-8707]:ExpressionStatement[8772-8794]"
    }, {
      "left" : "return defaultNamespace.equals(\"\") ? null : defaultNamespace;",
      "right" : "return defaultNamespace.equals(\"\") ? null : defaultNamespace;",
      "info" : "ReturnStatement[8801-8862]:ReturnStatement[8888-8949]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8903-8931]:Block[8990-9018]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[8913-8925]:ReturnStatement[9000-9012]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8970-8998]:Block[9057-9085]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[8980-8992]:ReturnStatement[9067-9079]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9030-9058]:Block[9117-9145]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[9040-9052]:ReturnStatement[9127-9139]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9094-9123]:Block[9181-9210]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[9104-9117]:ReturnStatement[9191-9204]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9152-9177]:Block[9239-9264]"
    }, {
      "left" : "return 1;",
      "right" : "return 1;",
      "info" : "ReturnStatement[9162-9171]:ReturnStatement[9249-9258]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9207-9252]:Block[9294-9339]"
    }, {
      "left" : "return !node.hasChildNodes();",
      "right" : "return !node.hasChildNodes();",
      "info" : "ReturnStatement[9217-9246]:ReturnStatement[9304-9333]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9517-9692]:Block[9604-9779]"
    }, {
      "left" : "String current = getLanguage();",
      "right" : "String current = getLanguage();",
      "info" : "VariableDeclarationStatement[9527-9558]:VariableDeclarationStatement[9614-9645]"
    }, {
      "left" : "return current == null ? super.isLanguage(lang)\n                : current.toUpperCase().startsWith(lang.toUpperCase());",
      "right" : "return current == null ? super.isLanguage(lang)\n                : current.toUpperCase().startsWith(lang.toUpperCase());",
      "info" : "ReturnStatement[9567-9686]:ReturnStatement[9654-9773]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9770-10145]:Block[9857-10232]"
    }, {
      "left" : "while (n != null)",
      "right" : "while (n != null)",
      "info" : "WhileStatement[9780-10118]:WhileStatement[9867-10205]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9798-10118]:Block[9885-10205]"
    }, {
      "left" : "if (n.getNodeType() == Node.ELEMENT_NODE)",
      "right" : "if (n.getNodeType() == Node.ELEMENT_NODE)",
      "info" : "IfStatement[9812-10073]:IfStatement[9899-10160]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9854-10073]:Block[9941-10160]"
    }, {
      "left" : "Element e = (Element) n;",
      "right" : "Element e = (Element) n;",
      "info" : "VariableDeclarationStatement[9872-9896]:VariableDeclarationStatement[9959-9983]"
    }, {
      "left" : "String attr = e.getAttribute(attrName);",
      "right" : "String attr = e.getAttribute(attrName);",
      "info" : "VariableDeclarationStatement[9913-9952]:VariableDeclarationStatement[10000-10039]"
    }, {
      "left" : "if (attr != null && !attr.equals(\"\"))",
      "right" : "if (attr != null && !attr.equals(\"\"))",
      "info" : "IfStatement[9969-10059]:IfStatement[10056-10146]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10007-10059]:Block[10094-10146]"
    }, {
      "left" : "return attr;",
      "right" : "return attr;",
      "info" : "ReturnStatement[10029-10041]:ReturnStatement[10116-10128]"
    }, {
      "left" : "n = n.getParentNode();",
      "right" : "n = n.getParentNode();",
      "info" : "ExpressionStatement[10086-10108]:ExpressionStatement[10173-10195]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[10127-10139]:ReturnStatement[10214-10226]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10182-10246]:Block[10269-10333]"
    }, {
      "left" : "return findEnclosingAttribute(node, \"xml:lang\");",
      "right" : "return findEnclosingAttribute(node, \"xml:lang\");",
      "info" : "ReturnStatement[10192-10240]:ReturnStatement[10279-10327]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10577-12207]:Block[10664-12294]"
    }, {
      "left" : "if (node.getNodeType() == Node.TEXT_NODE\n            || node.getNodeType() == Node.CDATA_SECTION_NODE)",
      "right" : "if (node.getNodeType() == Node.TEXT_NODE\n            || node.getNodeType() == Node.CDATA_SECTION_NODE)",
      "info" : "IfStatement[10587-12201]:IfStatement[10674-12288]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10690-10980]:Block[10777-11067]"
    }, {
      "left" : "String string = (String) TypeUtils.convert(value, String.class);",
      "right" : "String string = (String) TypeUtils.convert(value, String.class);",
      "info" : "VariableDeclarationStatement[10704-10768]:VariableDeclarationStatement[10791-10855]"
    }, {
      "left" : "if (string != null && !string.equals(\"\"))",
      "right" : "if (string != null && !string.equals(\"\"))",
      "info" : "IfStatement[10781-10970]:IfStatement[10868-11057]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10823-10881]:Block[10910-10968]"
    }, {
      "left" : "node.setNodeValue(string);",
      "right" : "node.setNodeValue(string);",
      "info" : "ExpressionStatement[10841-10867]:ExpressionStatement[10928-10954]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10899-10970]:Block[10986-11057]"
    }, {
      "left" : "node.getParentNode().removeChild(node);",
      "right" : "node.getParentNode().removeChild(node);",
      "info" : "ExpressionStatement[10917-10956]:ExpressionStatement[11004-11043]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10994-12201]:Block[11081-12288]"
    }, {
      "left" : "NodeList children = node.getChildNodes();",
      "right" : "NodeList children = node.getChildNodes();",
      "info" : "VariableDeclarationStatement[11008-11049]:VariableDeclarationStatement[11095-11136]"
    }, {
      "left" : "int count = children.getLength();",
      "right" : "int count = children.getLength();",
      "info" : "VariableDeclarationStatement[11062-11095]:VariableDeclarationStatement[11149-11182]"
    }, {
      "left" : "for (int i = count; --i >= 0)",
      "right" : "for (int i = count; --i >= 0)",
      "info" : "ForStatement[11108-11242]:ForStatement[11195-11329]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11139-11242]:Block[11226-11329]"
    }, {
      "left" : "Node child = children.item(i);",
      "right" : "Node child = children.item(i);",
      "info" : "VariableDeclarationStatement[11157-11187]:VariableDeclarationStatement[11244-11274]"
    }, {
      "left" : "node.removeChild(child);",
      "right" : "node.removeChild(child);",
      "info" : "ExpressionStatement[11204-11228]:ExpressionStatement[11291-11315]"
    }, {
      "left" : "if (value instanceof Node)",
      "right" : "if (value instanceof Node)",
      "info" : "IfStatement[11256-12191]:IfStatement[11343-12278]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11283-11843]:Block[11370-11930]"
    }, {
      "left" : "Node valueNode = (Node) value;",
      "right" : "Node valueNode = (Node) value;",
      "info" : "VariableDeclarationStatement[11301-11331]:VariableDeclarationStatement[11388-11418]"
    }, {
      "left" : "if (valueNode instanceof Element\n                    || valueNode instanceof Document)",
      "right" : "if (valueNode instanceof Element\n                    || valueNode instanceof Document)",
      "info" : "IfStatement[11348-11829]:IfStatement[11435-11916]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11435-11723]:Block[11522-11810]"
    }, {
      "left" : "children = valueNode.getChildNodes();",
      "right" : "children = valueNode.getChildNodes();",
      "info" : "ExpressionStatement[11457-11494]:ExpressionStatement[11544-11581]"
    }, {
      "left" : "for (int i = 0; i < children.getLength(); i++)",
      "right" : "for (int i = 0; i < children.getLength(); i++)",
      "info" : "ForStatement[11515-11705]:ForStatement[11602-11792]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11562-11705]:Block[11649-11792]"
    }, {
      "left" : "Node child = children.item(i);",
      "right" : "Node child = children.item(i);",
      "info" : "VariableDeclarationStatement[11588-11618]:VariableDeclarationStatement[11675-11705]"
    }, {
      "left" : "node.appendChild(child.cloneNode(true));",
      "right" : "node.appendChild(child.cloneNode(true));",
      "info" : "ExpressionStatement[11643-11683]:ExpressionStatement[11730-11770]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11745-11829]:Block[11832-11916]"
    }, {
      "left" : "node.appendChild(valueNode.cloneNode(true));",
      "right" : "node.appendChild(valueNode.cloneNode(true));",
      "info" : "ExpressionStatement[11767-11811]:ExpressionStatement[11854-11898]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11861-12191]:Block[11948-12278]"
    }, {
      "left" : "String string = (String) TypeUtils.convert(value, String.class);",
      "right" : "String string = (String) TypeUtils.convert(value, String.class);",
      "info" : "VariableDeclarationStatement[11879-11943]:VariableDeclarationStatement[11966-12030]"
    }, {
      "left" : "if (string != null && !string.equals(\"\"))",
      "right" : "if (string != null && !string.equals(\"\"))",
      "info" : "IfStatement[11960-12177]:IfStatement[12047-12264]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12002-12177]:Block[12089-12264]"
    }, {
      "left" : "Node textNode =\n                        node.getOwnerDocument().createTextNode(string);",
      "right" : "Node textNode =\n                        node.getOwnerDocument().createTextNode(string);",
      "info" : "VariableDeclarationStatement[12024-12111]:VariableDeclarationStatement[12111-12198]"
    }, {
      "left" : "node.appendChild(textNode);",
      "right" : "node.appendChild(textNode);",
      "info" : "ExpressionStatement[12132-12159]:ExpressionStatement[12219-12246]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12324-13269]:Block[12411-13356]"
    }, {
      "left" : "if (index == WHOLE_COLLECTION)",
      "right" : "if (index == WHOLE_COLLECTION)",
      "info" : "IfStatement[12334-12399]:IfStatement[12421-12486]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12365-12399]:Block[12452-12486]"
    }, {
      "left" : "index = 0;",
      "right" : "index = 0;",
      "info" : "ExpressionStatement[12379-12389]:ExpressionStatement[12466-12476]"
    }, {
      "left" : "boolean success =\n            getAbstractFactory(context).createObject(\n                context,\n                this,\n                node,\n                name.toString(),\n                index);",
      "right" : "boolean success =\n            getAbstractFactory(context).createObject(\n                context,\n                this,\n                node,\n                name.toString(),\n                index);",
      "info" : "VariableDeclarationStatement[12408-12605]:VariableDeclarationStatement[12495-12692]"
    }, {
      "left" : "if (success)",
      "right" : "if (success)",
      "info" : "IfStatement[12614-13070]:IfStatement[12701-13157]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12627-13070]:Block[12714-13157]"
    }, {
      "left" : "NodeTest nodeTest;",
      "right" : "NodeTest nodeTest;",
      "info" : "VariableDeclarationStatement[12641-12659]:VariableDeclarationStatement[12728-12746]"
    }, {
      "left" : "String prefix = name.getPrefix();",
      "right" : "String prefix = name.getPrefix();",
      "info" : "VariableDeclarationStatement[12672-12705]:VariableDeclarationStatement[12759-12792]"
    }, {
      "left" : "String namespaceURI = prefix == null ? null : \n                context.getNamespaceURI(prefix);",
      "right" : "String namespaceURI = prefix == null ? null : \n                context.getNamespaceURI(prefix);",
      "info" : "VariableDeclarationStatement[12718-12813]:VariableDeclarationStatement[12805-12900]"
    }, {
      "left" : "nodeTest = new NodeNameTest(name, namespaceURI);",
      "right" : "nodeTest = new NodeNameTest(name, namespaceURI);",
      "info" : "ExpressionStatement[12826-12874]:ExpressionStatement[12913-12961]"
    }, {
      "left" : "NodeIterator it = childIterator(nodeTest, false, null);",
      "right" : "NodeIterator it = childIterator(nodeTest, false, null);",
      "info" : "VariableDeclarationStatement[12888-12943]:VariableDeclarationStatement[12975-13030]"
    }, {
      "left" : "if (it != null && it.setPosition(index + 1))",
      "right" : "if (it != null && it.setPosition(index + 1))",
      "info" : "IfStatement[12956-13060]:IfStatement[13043-13147]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13001-13060]:Block[13088-13147]"
    }, {
      "left" : "return it.getNodePointer();",
      "right" : "return it.getNodePointer();",
      "info" : "ReturnStatement[13019-13046]:ReturnStatement[13106-13133]"
    }, {
      "left" : "throw new JXPathAbstractFactoryException(\n                \"Factory could not create a child node for path: \" + asPath()\n                        + \"/\" + name + \"[\" + (index + 1) + \"]\");",
      "right" : "throw new JXPathAbstractFactoryException(\n                \"Factory could not create a child node for path: \" + asPath()\n                        + \"/\" + name + \"[\" + (index + 1) + \"]\");",
      "info" : "ThrowStatement[13079-13263]:ThrowStatement[13166-13350]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13387-13504]:Block[13474-13591]"
    }, {
      "left" : "NodePointer ptr = createChild(context, name, index);",
      "right" : "NodePointer ptr = createChild(context, name, index);",
      "info" : "VariableDeclarationStatement[13397-13449]:VariableDeclarationStatement[13484-13536]"
    }, {
      "left" : "ptr.setValue(value);",
      "right" : "ptr.setValue(value);",
      "info" : "ExpressionStatement[13458-13478]:ExpressionStatement[13545-13565]"
    }, {
      "left" : "return ptr;",
      "right" : "return ptr;",
      "info" : "ReturnStatement[13487-13498]:ReturnStatement[13574-13585]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13580-14345]:Block[13667-14432]"
    }, {
      "left" : "if (!(node instanceof Element))",
      "right" : "if (!(node instanceof Element))",
      "info" : "IfStatement[13590-13690]:IfStatement[13677-13777]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13622-13690]:Block[13709-13777]"
    }, {
      "left" : "return super.createAttribute(context, name);",
      "right" : "return super.createAttribute(context, name);",
      "info" : "ReturnStatement[13636-13680]:ReturnStatement[13723-13767]"
    }, {
      "left" : "Element element = (Element) node;",
      "right" : "Element element = (Element) node;",
      "info" : "VariableDeclarationStatement[13699-13732]:VariableDeclarationStatement[13786-13819]"
    }, {
      "left" : "String prefix = name.getPrefix();",
      "right" : "String prefix = name.getPrefix();",
      "info" : "VariableDeclarationStatement[13741-13774]:VariableDeclarationStatement[13828-13861]"
    }, {
      "left" : "if (prefix != null)",
      "right" : "if (prefix != null)",
      "info" : "IfStatement[13783-14225]:IfStatement[13870-14312]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13803-14071]:Block[13890-14158]"
    }, {
      "left" : "String ns = getNamespaceURI(prefix);",
      "right" : "String ns = getNamespaceURI(prefix);",
      "info" : "VariableDeclarationStatement[13817-13853]:VariableDeclarationStatement[13904-13940]"
    }, {
      "left" : "if (ns == null)",
      "right" : "if (ns == null)",
      "info" : "IfStatement[13866-14000]:IfStatement[13953-14087]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13882-14000]:Block[13969-14087]"
    }, {
      "left" : "throw new JXPathException(\n                    \"Unknown namespace prefix: \" + prefix);",
      "right" : "throw new JXPathException(\n                    \"Unknown namespace prefix: \" + prefix);",
      "info" : "ThrowStatement[13900-13986]:ThrowStatement[13987-14073]"
    }, {
      "left" : "element.setAttributeNS(ns, name.toString(), \"\");",
      "right" : "element.setAttributeNS(ns, name.toString(), \"\");",
      "info" : "ExpressionStatement[14013-14061]:ExpressionStatement[14100-14148]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14085-14225]:Block[14172-14312]"
    }, {
      "left" : "if (!element.hasAttribute(name.getName()))",
      "right" : "if (!element.hasAttribute(name.getName()))",
      "info" : "IfStatement[14099-14215]:IfStatement[14186-14302]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14142-14215]:Block[14229-14302]"
    }, {
      "left" : "element.setAttribute(name.getName(), \"\");",
      "right" : "element.setAttribute(name.getName(), \"\");",
      "info" : "ExpressionStatement[14160-14201]:ExpressionStatement[14247-14288]"
    }, {
      "left" : "NodeIterator it = attributeIterator(name);",
      "right" : "NodeIterator it = attributeIterator(name);",
      "info" : "VariableDeclarationStatement[14234-14276]:VariableDeclarationStatement[14321-14363]"
    }, {
      "left" : "it.setPosition(1);",
      "right" : "it.setPosition(1);",
      "info" : "ExpressionStatement[14285-14303]:ExpressionStatement[14372-14390]"
    }, {
      "left" : "return it.getNodePointer();",
      "right" : "return it.getNodePointer();",
      "info" : "ReturnStatement[14312-14339]:ReturnStatement[14399-14426]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14372-14567]:Block[14459-14654]"
    }, {
      "left" : "Node parent = node.getParentNode();",
      "right" : "Node parent = node.getParentNode();",
      "info" : "VariableDeclarationStatement[14382-14417]:VariableDeclarationStatement[14469-14504]"
    }, {
      "left" : "if (parent == null)",
      "right" : "if (parent == null)",
      "info" : "IfStatement[14426-14527]:IfStatement[14513-14614]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14446-14527]:Block[14533-14614]"
    }, {
      "left" : "throw new JXPathException(\"Cannot remove root DOM node\");",
      "right" : "throw new JXPathException(\"Cannot remove root DOM node\");",
      "info" : "ThrowStatement[14460-14517]:ThrowStatement[14547-14604]"
    }, {
      "left" : "parent.removeChild(node);",
      "right" : "parent.removeChild(node);",
      "info" : "ExpressionStatement[14536-14561]:ExpressionStatement[14623-14648]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14596-17252]:Block[14683-17339]"
    }, {
      "left" : "if (id != null)",
      "right" : "if (id != null)",
      "info" : "IfStatement[14606-14680]:IfStatement[14693-14767]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14622-14680]:Block[14709-14767]"
    }, {
      "left" : "return \"id('\" + escape(id) + \"')\";",
      "right" : "return \"id('\" + escape(id) + \"')\";",
      "info" : "ReturnStatement[14636-14670]:ReturnStatement[14723-14757]"
    }, {
      "left" : "StringBuffer buffer = new StringBuffer();",
      "right" : "StringBuffer buffer = new StringBuffer();",
      "info" : "VariableDeclarationStatement[14690-14731]:VariableDeclarationStatement[14777-14818]"
    }, {
      "left" : "if (parent != null)",
      "right" : "if (parent != null)",
      "info" : "IfStatement[14740-14815]:IfStatement[14827-14902]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14760-14815]:Block[14847-14902]"
    }, {
      "left" : "buffer.append(parent.asPath());",
      "right" : "buffer.append(parent.asPath());",
      "info" : "ExpressionStatement[14774-14805]:ExpressionStatement[14861-14892]"
    }, {
      "left" : "switch (node.getNodeType()) {\n            case Node.ELEMENT_NODE :\n                // If the parent pointer is not a DOMNodePointer, it is\n                // the parent's responsibility to produce the node test part\n                // of the path\n                if (parent instanceof DOMNodePointer) {\n                    if (buffer.length() == 0\n                            || buffer.charAt(buffer.length() - 1) != '/') {\n                        buffer.append('/');\n                    }\n                    String ln = DOMNodePointer.getLocalName(node);\n                    String nsURI = getNamespaceURI();\n                    if (nsURI == null) {\n                        buffer.append(ln);\n                        buffer.append('[');\n                        buffer.append(getRelativePositionByName()).append(']');\n                    }\n                    else {\n                        String prefix = getNamespaceResolver().getPrefix(nsURI);\n                        if (prefix != null) {\n                            buffer.append(prefix);\n                            buffer.append(':');\n                            buffer.append(ln);\n                            buffer.append('[');\n                            buffer.append(getRelativePositionByName());\n                            buffer.append(']');\n                        }\n                        else {\n                            buffer.append(\"node()\");\n                            buffer.append('[');\n                            buffer.append(getRelativePositionOfElement());\n                            buffer.append(']');\n                        }\n                    }\n                }\n            break;\n            case Node.TEXT_NODE :\n            case Node.CDATA_SECTION_NODE :\n                buffer.append(\"/text()\");\n                buffer.append('[');\n                buffer.append(getRelativePositionOfTextNode()).append(']');\n                break;\n            case Node.PROCESSING_INSTRUCTION_NODE :\n                String target = ((ProcessingInstruction) node).getTarget();\n                buffer.append(\"/processing-instruction(\\'\");\n                buffer.append(target).append(\"')\");\n                buffer.append('[');\n                buffer.append(getRelativePositionOfPI(target)).append(']');\n                break;\n            case Node.DOCUMENT_NODE :\n                // That'll be empty\n        }",
      "right" : "switch (node.getNodeType()) {\n            case Node.ELEMENT_NODE :\n                // If the parent pointer is not a DOMNodePointer, it is\n                // the parent's responsibility to produce the node test part\n                // of the path\n                if (parent instanceof DOMNodePointer) {\n                    if (buffer.length() == 0\n                            || buffer.charAt(buffer.length() - 1) != '/') {\n                        buffer.append('/');\n                    }\n                    String ln = DOMNodePointer.getLocalName(node);\n                    String nsURI = getNamespaceURI();\n                    if (nsURI == null) {\n                        buffer.append(ln);\n                        buffer.append('[');\n                        buffer.append(getRelativePositionByName()).append(']');\n                    }\n                    else {\n                        String prefix = getNamespaceResolver().getPrefix(nsURI);\n                        if (prefix != null) {\n                            buffer.append(prefix);\n                            buffer.append(':');\n                            buffer.append(ln);\n                            buffer.append('[');\n                            buffer.append(getRelativePositionByName());\n                            buffer.append(']');\n                        }\n                        else {\n                            buffer.append(\"node()\");\n                            buffer.append('[');\n                            buffer.append(getRelativePositionOfElement());\n                            buffer.append(']');\n                        }\n                    }\n                }\n            break;\n            case Node.TEXT_NODE :\n            case Node.CDATA_SECTION_NODE :\n                buffer.append(\"/text()\");\n                buffer.append('[');\n                buffer.append(getRelativePositionOfTextNode()).append(']');\n                break;\n            case Node.PROCESSING_INSTRUCTION_NODE :\n                String target = ((ProcessingInstruction) node).getTarget();\n                buffer.append(\"/processing-instruction(\\'\");\n                buffer.append(target).append(\"')\");\n                buffer.append('[');\n                buffer.append(getRelativePositionOfPI(target)).append(']');\n                break;\n            case Node.DOCUMENT_NODE :\n                // That'll be empty\n        }",
      "info" : "SwitchStatement[14824-17212]:SwitchStatement[14911-17299]"
    }, {
      "left" : "case Node.ELEMENT_NODE :",
      "right" : "case Node.ELEMENT_NODE :",
      "info" : "SwitchCase[14866-14890]:SwitchCase[14953-14977]"
    }, {
      "left" : "if (parent instanceof DOMNodePointer)",
      "right" : "if (parent instanceof DOMNodePointer)",
      "info" : "IfStatement[15087-16479]:IfStatement[15174-16566]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15125-16479]:Block[15212-16566]"
    }, {
      "left" : "if (buffer.length() == 0\n                            || buffer.charAt(buffer.length() - 1) != '/')",
      "right" : "if (buffer.length() == 0\n                            || buffer.charAt(buffer.length() - 1) != '/')",
      "info" : "IfStatement[15147-15313]:IfStatement[15234-15400]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15246-15313]:Block[15333-15400]"
    }, {
      "left" : "buffer.append('/');",
      "right" : "buffer.append('/');",
      "info" : "ExpressionStatement[15272-15291]:ExpressionStatement[15359-15378]"
    }, {
      "left" : "String ln = DOMNodePointer.getLocalName(node);",
      "right" : "String ln = DOMNodePointer.getLocalName(node);",
      "info" : "VariableDeclarationStatement[15334-15380]:VariableDeclarationStatement[15421-15467]"
    }, {
      "left" : "String nsURI = getNamespaceURI();",
      "right" : "String nsURI = getNamespaceURI();",
      "info" : "VariableDeclarationStatement[15401-15434]:VariableDeclarationStatement[15488-15521]"
    }, {
      "left" : "if (nsURI == null)",
      "right" : "if (nsURI == null)",
      "info" : "IfStatement[15455-16461]:IfStatement[15542-16548]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15474-15664]:Block[15561-15751]"
    }, {
      "left" : "buffer.append(ln);",
      "right" : "buffer.append(ln);",
      "info" : "ExpressionStatement[15500-15518]:ExpressionStatement[15587-15605]"
    }, {
      "left" : "buffer.append('[');",
      "right" : "buffer.append('[');",
      "info" : "ExpressionStatement[15543-15562]:ExpressionStatement[15630-15649]"
    }, {
      "left" : "buffer.append(getRelativePositionByName()).append(']');",
      "right" : "buffer.append(getRelativePositionByName()).append(']');",
      "info" : "ExpressionStatement[15587-15642]:ExpressionStatement[15674-15729]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15690-16461]:Block[15777-16548]"
    }, {
      "left" : "String prefix = getNamespaceResolver().getPrefix(nsURI);",
      "right" : "String prefix = getNamespaceResolver().getPrefix(nsURI);",
      "info" : "VariableDeclarationStatement[15716-15772]:VariableDeclarationStatement[15803-15859]"
    }, {
      "left" : "if (prefix != null)",
      "right" : "if (prefix != null)",
      "info" : "IfStatement[15797-16439]:IfStatement[15884-16526]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15817-16158]:Block[15904-16245]"
    }, {
      "left" : "buffer.append(prefix);",
      "right" : "buffer.append(prefix);",
      "info" : "ExpressionStatement[15847-15869]:ExpressionStatement[15934-15956]"
    }, {
      "left" : "buffer.append(':');",
      "right" : "buffer.append(':');",
      "info" : "ExpressionStatement[15898-15917]:ExpressionStatement[15985-16004]"
    }, {
      "left" : "buffer.append(ln);",
      "right" : "buffer.append(ln);",
      "info" : "ExpressionStatement[15946-15964]:ExpressionStatement[16033-16051]"
    }, {
      "left" : "buffer.append('[');",
      "right" : "buffer.append('[');",
      "info" : "ExpressionStatement[15993-16012]:ExpressionStatement[16080-16099]"
    }, {
      "left" : "buffer.append(getRelativePositionByName());",
      "right" : "buffer.append(getRelativePositionByName());",
      "info" : "ExpressionStatement[16041-16084]:ExpressionStatement[16128-16171]"
    }, {
      "left" : "buffer.append(']');",
      "right" : "buffer.append(']');",
      "info" : "ExpressionStatement[16113-16132]:ExpressionStatement[16200-16219]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16188-16439]:Block[16275-16526]"
    }, {
      "left" : "buffer.append(\"node()\");",
      "right" : "buffer.append(\"node()\");",
      "info" : "ExpressionStatement[16218-16242]:ExpressionStatement[16305-16329]"
    }, {
      "left" : "buffer.append('[');",
      "right" : "buffer.append('[');",
      "info" : "ExpressionStatement[16271-16290]:ExpressionStatement[16358-16377]"
    }, {
      "left" : "buffer.append(getRelativePositionOfElement());",
      "right" : "buffer.append(getRelativePositionOfElement());",
      "info" : "ExpressionStatement[16319-16365]:ExpressionStatement[16406-16452]"
    }, {
      "left" : "buffer.append(']');",
      "right" : "buffer.append(']');",
      "info" : "ExpressionStatement[16394-16413]:ExpressionStatement[16481-16500]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[16492-16498]:BreakStatement[16579-16585]"
    }, {
      "left" : "case Node.TEXT_NODE :",
      "right" : "case Node.TEXT_NODE :",
      "info" : "SwitchCase[16511-16532]:SwitchCase[16598-16619]"
    }, {
      "left" : "case Node.CDATA_SECTION_NODE :",
      "right" : "case Node.CDATA_SECTION_NODE :",
      "info" : "SwitchCase[16545-16575]:SwitchCase[16632-16662]"
    }, {
      "left" : "buffer.append(\"/text()\");",
      "right" : "buffer.append(\"/text()\");",
      "info" : "ExpressionStatement[16592-16617]:ExpressionStatement[16679-16704]"
    }, {
      "left" : "buffer.append('[');",
      "right" : "buffer.append('[');",
      "info" : "ExpressionStatement[16634-16653]:ExpressionStatement[16721-16740]"
    }, {
      "left" : "buffer.append(getRelativePositionOfTextNode()).append(']');",
      "right" : "buffer.append(getRelativePositionOfTextNode()).append(']');",
      "info" : "ExpressionStatement[16670-16729]:ExpressionStatement[16757-16816]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[16746-16752]:BreakStatement[16833-16839]"
    }, {
      "left" : "case Node.PROCESSING_INSTRUCTION_NODE :",
      "right" : "case Node.PROCESSING_INSTRUCTION_NODE :",
      "info" : "SwitchCase[16765-16804]:SwitchCase[16852-16891]"
    }, {
      "left" : "String target = ((ProcessingInstruction) node).getTarget();",
      "right" : "String target = ((ProcessingInstruction) node).getTarget();",
      "info" : "VariableDeclarationStatement[16821-16880]:VariableDeclarationStatement[16908-16967]"
    }, {
      "left" : "buffer.append(\"/processing-instruction(\\'\");",
      "right" : "buffer.append(\"/processing-instruction(\\'\");",
      "info" : "ExpressionStatement[16897-16941]:ExpressionStatement[16984-17028]"
    }, {
      "left" : "buffer.append(target).append(\"')\");",
      "right" : "buffer.append(target).append(\"')\");",
      "info" : "ExpressionStatement[16958-16993]:ExpressionStatement[17045-17080]"
    }, {
      "left" : "buffer.append('[');",
      "right" : "buffer.append('[');",
      "info" : "ExpressionStatement[17010-17029]:ExpressionStatement[17097-17116]"
    }, {
      "left" : "buffer.append(getRelativePositionOfPI(target)).append(']');",
      "right" : "buffer.append(getRelativePositionOfPI(target)).append(']');",
      "info" : "ExpressionStatement[17046-17105]:ExpressionStatement[17133-17192]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[17122-17128]:BreakStatement[17209-17215]"
    }, {
      "left" : "case Node.DOCUMENT_NODE :",
      "right" : "case Node.DOCUMENT_NODE :",
      "info" : "SwitchCase[17141-17166]:SwitchCase[17228-17253]"
    }, {
      "left" : "return buffer.toString();",
      "right" : "return buffer.toString();",
      "info" : "ReturnStatement[17221-17246]:ReturnStatement[17308-17333]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17295-17861]:Block[17382-17948]"
    }, {
      "left" : "int index = string.indexOf('\\'');",
      "right" : "int index = string.indexOf('\\'');",
      "info" : "VariableDeclarationStatement[17305-17338]:VariableDeclarationStatement[17392-17425]"
    }, {
      "left" : "while (index != -1)",
      "right" : "while (index != -1)",
      "info" : "WhileStatement[17347-17566]:WhileStatement[17434-17653]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17367-17566]:Block[17454-17653]"
    }, {
      "left" : "string =\n                string.substring(0, index)\n                    + \"&apos;\"\n                    + string.substring(index + 1);",
      "right" : "string =\n                string.substring(0, index)\n                    + \"&apos;\"\n                    + string.substring(index + 1);",
      "info" : "ExpressionStatement[17381-17514]:ExpressionStatement[17468-17601]"
    }, {
      "left" : "index = string.indexOf('\\'');",
      "right" : "index = string.indexOf('\\'');",
      "info" : "ExpressionStatement[17527-17556]:ExpressionStatement[17614-17643]"
    }, {
      "left" : "index = string.indexOf('\\\"');",
      "right" : "index = string.indexOf('\\\"');",
      "info" : "ExpressionStatement[17575-17604]:ExpressionStatement[17662-17691]"
    }, {
      "left" : "while (index != -1)",
      "right" : "while (index != -1)",
      "info" : "WhileStatement[17613-17832]:WhileStatement[17700-17919]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17633-17832]:Block[17720-17919]"
    }, {
      "left" : "string =\n                string.substring(0, index)\n                    + \"&quot;\"\n                    + string.substring(index + 1);",
      "right" : "string =\n                string.substring(0, index)\n                    + \"&quot;\"\n                    + string.substring(index + 1);",
      "info" : "ExpressionStatement[17647-17780]:ExpressionStatement[17734-17867]"
    }, {
      "left" : "index = string.indexOf('\\\"');",
      "right" : "index = string.indexOf('\\\"');",
      "info" : "ExpressionStatement[17793-17822]:ExpressionStatement[17880-17909]"
    }, {
      "left" : "return string;",
      "right" : "return string;",
      "info" : "ReturnStatement[17841-17855]:ReturnStatement[17928-17942]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17907-18296]:Block[17994-18383]"
    }, {
      "left" : "int count = 1;",
      "right" : "int count = 1;",
      "info" : "VariableDeclarationStatement[17917-17931]:VariableDeclarationStatement[18004-18018]"
    }, {
      "left" : "Node n = node.getPreviousSibling();",
      "right" : "Node n = node.getPreviousSibling();",
      "info" : "VariableDeclarationStatement[17940-17975]:VariableDeclarationStatement[18027-18062]"
    }, {
      "left" : "while (n != null)",
      "right" : "while (n != null)",
      "info" : "WhileStatement[17984-18268]:WhileStatement[18071-18355]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18002-18268]:Block[18089-18355]"
    }, {
      "left" : "if (n.getNodeType() == Node.ELEMENT_NODE)",
      "right" : "if (n.getNodeType() == Node.ELEMENT_NODE)",
      "info" : "IfStatement[18016-18218]:IfStatement[18103-18305]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18058-18218]:Block[18145-18305]"
    }, {
      "left" : "String nm = n.getNodeName();",
      "right" : "String nm = n.getNodeName();",
      "info" : "VariableDeclarationStatement[18076-18104]:VariableDeclarationStatement[18163-18191]"
    }, {
      "left" : "if (nm.equals(node.getNodeName()))",
      "right" : "if (nm.equals(node.getNodeName()))",
      "info" : "IfStatement[18121-18204]:IfStatement[18208-18291]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18156-18204]:Block[18243-18291]"
    }, {
      "left" : "count++;",
      "right" : "count++;",
      "info" : "ExpressionStatement[18178-18186]:ExpressionStatement[18265-18273]"
    }, {
      "left" : "n = n.getPreviousSibling();",
      "right" : "n = n.getPreviousSibling();",
      "info" : "ExpressionStatement[18231-18258]:ExpressionStatement[18318-18345]"
    }, {
      "left" : "return count;",
      "right" : "return count;",
      "info" : "ReturnStatement[18277-18290]:ReturnStatement[18364-18377]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18349-18618]:Block[18436-18705]"
    }, {
      "left" : "int count = 1;",
      "right" : "int count = 1;",
      "info" : "VariableDeclarationStatement[18359-18373]:VariableDeclarationStatement[18446-18460]"
    }, {
      "left" : "Node n = node.getPreviousSibling();",
      "right" : "Node n = node.getPreviousSibling();",
      "info" : "VariableDeclarationStatement[18382-18417]:VariableDeclarationStatement[18469-18504]"
    }, {
      "left" : "while (n != null)",
      "right" : "while (n != null)",
      "info" : "WhileStatement[18426-18590]:WhileStatement[18513-18677]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18444-18590]:Block[18531-18677]"
    }, {
      "left" : "if (n.getNodeType() == Node.ELEMENT_NODE)",
      "right" : "if (n.getNodeType() == Node.ELEMENT_NODE)",
      "info" : "IfStatement[18458-18540]:IfStatement[18545-18627]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18500-18540]:Block[18587-18627]"
    }, {
      "left" : "count++;",
      "right" : "count++;",
      "info" : "ExpressionStatement[18518-18526]:ExpressionStatement[18605-18613]"
    }, {
      "left" : "n = n.getPreviousSibling();",
      "right" : "n = n.getPreviousSibling();",
      "info" : "ExpressionStatement[18553-18580]:ExpressionStatement[18640-18667]"
    }, {
      "left" : "return count;",
      "right" : "return count;",
      "info" : "ReturnStatement[18599-18612]:ReturnStatement[18686-18699]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18668-18996]:Block[18755-19083]"
    }, {
      "left" : "int count = 1;",
      "right" : "int count = 1;",
      "info" : "VariableDeclarationStatement[18678-18692]:VariableDeclarationStatement[18765-18779]"
    }, {
      "left" : "Node n = node.getPreviousSibling();",
      "right" : "Node n = node.getPreviousSibling();",
      "info" : "VariableDeclarationStatement[18701-18736]:VariableDeclarationStatement[18788-18823]"
    }, {
      "left" : "while (n != null)",
      "right" : "while (n != null)",
      "info" : "WhileStatement[18745-18968]:WhileStatement[18832-19055]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18763-18968]:Block[18850-19055]"
    }, {
      "left" : "if (n.getNodeType() == Node.TEXT_NODE\n                || n.getNodeType() == Node.CDATA_SECTION_NODE)",
      "right" : "if (n.getNodeType() == Node.TEXT_NODE\n                || n.getNodeType() == Node.CDATA_SECTION_NODE)",
      "info" : "IfStatement[18777-18918]:IfStatement[18864-19005]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18878-18918]:Block[18965-19005]"
    }, {
      "left" : "count++;",
      "right" : "count++;",
      "info" : "ExpressionStatement[18896-18904]:ExpressionStatement[18983-18991]"
    }, {
      "left" : "n = n.getPreviousSibling();",
      "right" : "n = n.getPreviousSibling();",
      "info" : "ExpressionStatement[18931-18958]:ExpressionStatement[19018-19045]"
    }, {
      "left" : "return count;",
      "right" : "return count;",
      "info" : "ReturnStatement[18977-18990]:ReturnStatement[19064-19077]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19053-19411]:Block[19140-19498]"
    }, {
      "left" : "int count = 1;",
      "right" : "int count = 1;",
      "info" : "VariableDeclarationStatement[19063-19077]:VariableDeclarationStatement[19150-19164]"
    }, {
      "left" : "Node n = node.getPreviousSibling();",
      "right" : "Node n = node.getPreviousSibling();",
      "info" : "VariableDeclarationStatement[19086-19121]:VariableDeclarationStatement[19173-19208]"
    }, {
      "left" : "while (n != null)",
      "right" : "while (n != null)",
      "info" : "WhileStatement[19130-19383]:WhileStatement[19217-19470]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19148-19383]:Block[19235-19470]"
    }, {
      "left" : "if (n.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE\n                && ((ProcessingInstruction) n).getTarget().equals(target))",
      "right" : "if (n.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE\n                && ((ProcessingInstruction) n).getTarget().equals(target))",
      "info" : "IfStatement[19162-19333]:IfStatement[19249-19420]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19293-19333]:Block[19380-19420]"
    }, {
      "left" : "count++;",
      "right" : "count++;",
      "info" : "ExpressionStatement[19311-19319]:ExpressionStatement[19398-19406]"
    }, {
      "left" : "n = n.getPreviousSibling();",
      "right" : "n = n.getPreviousSibling();",
      "info" : "ExpressionStatement[19346-19373]:ExpressionStatement[19433-19460]"
    }, {
      "left" : "return count;",
      "right" : "return count;",
      "info" : "ReturnStatement[19392-19405]:ReturnStatement[19479-19492]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19439-19492]:Block[19526-19579]"
    }, {
      "left" : "return System.identityHashCode(node);",
      "right" : "return System.identityHashCode(node);",
      "info" : "ReturnStatement[19449-19486]:ReturnStatement[19536-19573]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19535-19651]:Block[19622-19738]"
    }, {
      "left" : "return object == this || object instanceof DOMNodePointer && node == ((DOMNodePointer) object).node;",
      "right" : "return object == this || object instanceof DOMNodePointer && node == ((DOMNodePointer) object).node;",
      "info" : "ReturnStatement[19545-19645]:ReturnStatement[19632-19732]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19699-19961]:Block[19786-20048]"
    }, {
      "left" : "String prefix = node.getPrefix();",
      "right" : "String prefix = node.getPrefix();",
      "info" : "VariableDeclarationStatement[19709-19742]:VariableDeclarationStatement[19796-19829]"
    }, {
      "left" : "if (prefix != null)",
      "right" : "if (prefix != null)",
      "info" : "IfStatement[19751-19809]:IfStatement[19838-19896]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19771-19809]:Block[19858-19896]"
    }, {
      "left" : "return prefix;",
      "right" : "return prefix;",
      "info" : "ReturnStatement[19785-19799]:ReturnStatement[19872-19886]"
    }, {
      "left" : "String name = node.getNodeName();",
      "right" : "String name = node.getNodeName();",
      "info" : "VariableDeclarationStatement[19819-19852]:VariableDeclarationStatement[19906-19939]"
    }, {
      "left" : "int index = name.lastIndexOf(':');",
      "right" : "int index = name.lastIndexOf(':');",
      "info" : "VariableDeclarationStatement[19861-19895]:VariableDeclarationStatement[19948-19982]"
    }, {
      "left" : "return index < 0 ? null : name.substring(0, index);",
      "right" : "return index < 0 ? null : name.substring(0, index);",
      "info" : "ReturnStatement[19904-19955]:ReturnStatement[19991-20042]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20012-20287]:Block[20099-20374]"
    }, {
      "left" : "String localName = node.getLocalName();",
      "right" : "String localName = node.getLocalName();",
      "info" : "VariableDeclarationStatement[20022-20061]:VariableDeclarationStatement[20109-20148]"
    }, {
      "left" : "if (localName != null)",
      "right" : "if (localName != null)",
      "info" : "IfStatement[20070-20134]:IfStatement[20157-20221]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20093-20134]:Block[20180-20221]"
    }, {
      "left" : "return localName;",
      "right" : "return localName;",
      "info" : "ReturnStatement[20107-20124]:ReturnStatement[20194-20211]"
    }, {
      "left" : "String name = node.getNodeName();",
      "right" : "String name = node.getNodeName();",
      "info" : "VariableDeclarationStatement[20144-20177]:VariableDeclarationStatement[20231-20264]"
    }, {
      "left" : "int index = name.lastIndexOf(':');",
      "right" : "int index = name.lastIndexOf(':');",
      "info" : "VariableDeclarationStatement[20186-20220]:VariableDeclarationStatement[20273-20307]"
    }, {
      "left" : "return index < 0 ? name : name.substring(index + 1);",
      "right" : "return index < 0 ? name : name.substring(index + 1);",
      "info" : "ReturnStatement[20229-20281]:ReturnStatement[20316-20368]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20345-21102]:Block[20432-21189]"
    }, {
      "left" : "if (node instanceof Document)",
      "right" : "if (node instanceof Document)",
      "info" : "IfStatement[20355-20455]:IfStatement[20442-20542]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20385-20455]:Block[20472-20542]"
    }, {
      "left" : "node = ((Document) node).getDocumentElement();",
      "right" : "node = ((Document) node).getDocumentElement();",
      "info" : "ExpressionStatement[20399-20445]:ExpressionStatement[20486-20532]"
    }, {
      "left" : "Element element = (Element) node;",
      "right" : "Element element = (Element) node;",
      "info" : "VariableDeclarationStatement[20465-20498]:VariableDeclarationStatement[20552-20585]"
    }, {
      "left" : "String uri = element.getNamespaceURI();",
      "right" : "String uri = element.getNamespaceURI();",
      "info" : "VariableDeclarationStatement[20508-20547]:VariableDeclarationStatement[20595-20634]"
    }, {
      "left" : "if (uri != null)",
      "right" : "if (uri != null)",
      "info" : "IfStatement[20556-20608]:IfStatement[20643-20695]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20573-20608]:Block[20660-20695]"
    }, {
      "left" : "return uri;",
      "right" : "return uri;",
      "info" : "ReturnStatement[20587-20598]:ReturnStatement[20674-20685]"
    }, {
      "left" : "String prefix = getPrefix(node);",
      "right" : "String prefix = getPrefix(node);",
      "info" : "VariableDeclarationStatement[20618-20650]:VariableDeclarationStatement[20705-20737]"
    }, {
      "left" : "String qname = prefix == null ? \"xmlns\" : \"xmlns:\" + prefix;",
      "right" : "String qname = prefix == null ? \"xmlns\" : \"xmlns:\" + prefix;",
      "info" : "VariableDeclarationStatement[20659-20719]:VariableDeclarationStatement[20746-20806]"
    }, {
      "left" : "Node aNode = node;",
      "right" : "Node aNode = node;",
      "info" : "VariableDeclarationStatement[20729-20747]:VariableDeclarationStatement[20816-20834]"
    }, {
      "left" : "while (aNode != null)",
      "right" : "while (aNode != null)",
      "info" : "WhileStatement[20756-21075]:WhileStatement[20843-21162]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20778-21075]:Block[20865-21162]"
    }, {
      "left" : "if (aNode.getNodeType() == Node.ELEMENT_NODE)",
      "right" : "if (aNode.getNodeType() == Node.ELEMENT_NODE)",
      "info" : "IfStatement[20792-21022]:IfStatement[20879-21109]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20838-21022]:Block[20925-21109]"
    }, {
      "left" : "Attr attr = ((Element) aNode).getAttributeNode(qname);",
      "right" : "Attr attr = ((Element) aNode).getAttributeNode(qname);",
      "info" : "VariableDeclarationStatement[20856-20910]:VariableDeclarationStatement[20943-20997]"
    }, {
      "left" : "if (attr != null)",
      "right" : "if (attr != null)",
      "info" : "IfStatement[20927-21008]:IfStatement[21014-21095]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20945-21008]:Block[21032-21095]"
    }, {
      "left" : "return attr.getValue();",
      "right" : "return attr.getValue();",
      "info" : "ReturnStatement[20967-20990]:ReturnStatement[21054-21077]"
    }, {
      "left" : "aNode = aNode.getParentNode();",
      "right" : "aNode = aNode.getParentNode();",
      "info" : "ExpressionStatement[21035-21065]:ExpressionStatement[21122-21152]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[21084-21096]:ReturnStatement[21171-21183]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21133-21345]:Block[21220-21432]"
    }, {
      "left" : "if (node.getNodeType() == Node.COMMENT_NODE)",
      "right" : "if (node.getNodeType() == Node.COMMENT_NODE)",
      "info" : "IfStatement[21143-21305]:IfStatement[21230-21392]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21188-21305]:Block[21275-21392]"
    }, {
      "left" : "String text = ((Comment) node).getData();",
      "right" : "String text = ((Comment) node).getData();",
      "info" : "VariableDeclarationStatement[21202-21243]:VariableDeclarationStatement[21289-21330]"
    }, {
      "left" : "return text == null ? \"\" : text.trim();",
      "right" : "return text == null ? \"\" : text.trim();",
      "info" : "ReturnStatement[21256-21295]:ReturnStatement[21343-21382]"
    }, {
      "left" : "return stringValue(node);",
      "right" : "return stringValue(node);",
      "info" : "ReturnStatement[21314-21339]:ReturnStatement[21401-21426]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21389-22283]:Block[21476-22370]"
    }, {
      "left" : "int nodeType = node.getNodeType();",
      "right" : "int nodeType = node.getNodeType();",
      "info" : "VariableDeclarationStatement[21399-21433]:VariableDeclarationStatement[21486-21520]"
    }, {
      "left" : "if (nodeType == Node.COMMENT_NODE)",
      "right" : "if (nodeType == Node.COMMENT_NODE)",
      "info" : "IfStatement[21442-21511]:IfStatement[21529-21598]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21477-21511]:Block[21564-21598]"
    }, {
      "left" : "return \"\";",
      "right" : "return \"\";",
      "info" : "ReturnStatement[21491-21501]:ReturnStatement[21578-21588]"
    }, {
      "left" : "boolean trim = !\"preserve\".equals(findEnclosingAttribute(node, \"xml:space\"));",
      "right" : "boolean trim = !\"preserve\".equals(findEnclosingAttribute(node, \"xml:space\"));",
      "info" : "VariableDeclarationStatement[21520-21597]:VariableDeclarationStatement[21607-21684]"
    }, {
      "left" : "if (nodeType == Node.TEXT_NODE || nodeType == Node.CDATA_SECTION_NODE)",
      "right" : "if (nodeType == Node.TEXT_NODE || nodeType == Node.CDATA_SECTION_NODE)",
      "info" : "IfStatement[21606-21801]:IfStatement[21693-21888]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21677-21801]:Block[21764-21888]"
    }, {
      "left" : "String text = node.getNodeValue();",
      "right" : "String text = node.getNodeValue();",
      "info" : "VariableDeclarationStatement[21691-21725]:VariableDeclarationStatement[21778-21812]"
    }, {
      "left" : "return text == null ? \"\" : trim ? text.trim() : text;",
      "right" : "return text == null ? \"\" : trim ? text.trim() : text;",
      "info" : "ReturnStatement[21738-21791]:ReturnStatement[21825-21878]"
    }, {
      "left" : "if (nodeType == Node.PROCESSING_INSTRUCTION_NODE)",
      "right" : "if (nodeType == Node.PROCESSING_INSTRUCTION_NODE)",
      "info" : "IfStatement[21810-22005]:IfStatement[21897-22092]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21860-22005]:Block[21947-22092]"
    }, {
      "left" : "String text = ((ProcessingInstruction) node).getData();",
      "right" : "String text = ((ProcessingInstruction) node).getData();",
      "info" : "VariableDeclarationStatement[21874-21929]:VariableDeclarationStatement[21961-22016]"
    }, {
      "left" : "return text == null ? \"\" : trim ? text.trim() : text;",
      "right" : "return text == null ? \"\" : trim ? text.trim() : text;",
      "info" : "ReturnStatement[21942-21995]:ReturnStatement[22029-22082]"
    }, {
      "left" : "NodeList list = node.getChildNodes();",
      "right" : "NodeList list = node.getChildNodes();",
      "info" : "VariableDeclarationStatement[22014-22051]:VariableDeclarationStatement[22101-22138]"
    }, {
      "left" : "StringBuffer buf = new StringBuffer(16);",
      "right" : "StringBuffer buf = new StringBuffer(16);",
      "info" : "VariableDeclarationStatement[22060-22100]:VariableDeclarationStatement[22147-22187]"
    }, {
      "left" : "for (int i = 0; i < list.getLength(); i++)",
      "right" : "for (int i = 0; i < list.getLength(); i++)",
      "info" : "ForStatement[22109-22246]:ForStatement[22196-22333]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22152-22246]:Block[22239-22333]"
    }, {
      "left" : "Node child = list.item(i);",
      "right" : "Node child = list.item(i);",
      "info" : "VariableDeclarationStatement[22166-22192]:VariableDeclarationStatement[22253-22279]"
    }, {
      "left" : "buf.append(stringValue(child));",
      "right" : "buf.append(stringValue(child));",
      "info" : "ExpressionStatement[22205-22236]:ExpressionStatement[22292-22323]"
    }, {
      "left" : "return buf.toString();",
      "right" : "return buf.toString();",
      "info" : "ReturnStatement[22255-22277]:ReturnStatement[22342-22364]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22398-22730]:Block[22485-22817]"
    }, {
      "left" : "Document document = node.getNodeType() == Node.DOCUMENT_NODE ? (Document) node\n                : node.getOwnerDocument();",
      "right" : "Document document = node.getNodeType() == Node.DOCUMENT_NODE ? (Document) node\n                : node.getOwnerDocument();",
      "info" : "VariableDeclarationStatement[22408-22529]:VariableDeclarationStatement[22495-22616]"
    }, {
      "left" : "Element element = document.getElementById(id);",
      "right" : "Element element = document.getElementById(id);",
      "info" : "VariableDeclarationStatement[22538-22584]:VariableDeclarationStatement[22625-22671]"
    }, {
      "left" : "return element == null ? (Pointer) new NullPointer(getLocale(), id)\n                : new DOMNodePointer(element, getLocale(), id);",
      "right" : "return element == null ? (Pointer) new NullPointer(getLocale(), id)\n                : new DOMNodePointer(element, getLocale(), id);",
      "info" : "ReturnStatement[22593-22724]:ReturnStatement[22680-22811]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22802-23108]:Block[22889-23195]"
    }, {
      "left" : "AbstractFactory factory = context.getFactory();",
      "right" : "AbstractFactory factory = context.getFactory();",
      "info" : "VariableDeclarationStatement[22812-22859]:VariableDeclarationStatement[22899-22946]"
    }, {
      "left" : "if (factory == null)",
      "right" : "if (factory == null)",
      "info" : "IfStatement[22868-23078]:IfStatement[22955-23165]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22889-23078]:Block[22976-23165]"
    }, {
      "left" : "throw new JXPathException(\n                \"Factory is not set on the JXPathContext - \"\n                    + \"cannot create path: \"\n                    + asPath());",
      "right" : "throw new JXPathException(\n                \"Factory is not set on the JXPathContext - \"\n                    + \"cannot create path: \"\n                    + asPath());",
      "info" : "ThrowStatement[22903-23068]:ThrowStatement[22990-23155]"
    }, {
      "left" : "return factory;",
      "right" : "return factory;",
      "info" : "ReturnStatement[23087-23102]:ReturnStatement[23174-23189]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23211-24473]:Block[23298-24560]"
    }, {
      "left" : "Node node1 = (Node) pointer1.getBaseValue();",
      "right" : "Node node1 = (Node) pointer1.getBaseValue();",
      "info" : "VariableDeclarationStatement[23221-23265]:VariableDeclarationStatement[23308-23352]"
    }, {
      "left" : "Node node2 = (Node) pointer2.getBaseValue();",
      "right" : "Node node2 = (Node) pointer2.getBaseValue();",
      "info" : "VariableDeclarationStatement[23274-23318]:VariableDeclarationStatement[23361-23405]"
    }, {
      "left" : "if (node1 == node2)",
      "right" : "if (node1 == node2)",
      "info" : "IfStatement[23327-23380]:IfStatement[23414-23467]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23347-23380]:Block[23434-23467]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[23361-23370]:ReturnStatement[23448-23457]"
    }, {
      "left" : "int t1 = node1.getNodeType();",
      "right" : "int t1 = node1.getNodeType();",
      "info" : "VariableDeclarationStatement[23390-23419]:VariableDeclarationStatement[23477-23506]"
    }, {
      "left" : "int t2 = node2.getNodeType();",
      "right" : "int t2 = node2.getNodeType();",
      "info" : "VariableDeclarationStatement[23428-23457]:VariableDeclarationStatement[23515-23544]"
    }, {
      "left" : "if (t1 == Node.ATTRIBUTE_NODE && t2 != Node.ATTRIBUTE_NODE)",
      "right" : "if (t1 == Node.ATTRIBUTE_NODE && t2 != Node.ATTRIBUTE_NODE)",
      "info" : "IfStatement[23466-23560]:IfStatement[23553-23647]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23526-23560]:Block[23613-23647]"
    }, {
      "left" : "return -1;",
      "right" : "return -1;",
      "info" : "ReturnStatement[23540-23550]:ReturnStatement[23627-23637]"
    }, {
      "left" : "if (t1 != Node.ATTRIBUTE_NODE && t2 == Node.ATTRIBUTE_NODE)",
      "right" : "if (t1 != Node.ATTRIBUTE_NODE && t2 == Node.ATTRIBUTE_NODE)",
      "info" : "IfStatement[23569-23662]:IfStatement[23656-23749]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23629-23662]:Block[23716-23749]"
    }, {
      "left" : "return 1;",
      "right" : "return 1;",
      "info" : "ReturnStatement[23643-23652]:ReturnStatement[23730-23739]"
    }, {
      "left" : "if (t1 == Node.ATTRIBUTE_NODE && t2 == Node.ATTRIBUTE_NODE)",
      "right" : "if (t1 == Node.ATTRIBUTE_NODE && t2 == Node.ATTRIBUTE_NODE)",
      "info" : "IfStatement[23671-24158]:IfStatement[23758-24245]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23731-24158]:Block[23818-24245]"
    }, {
      "left" : "NamedNodeMap map = ((Node) getNode()).getAttributes();",
      "right" : "NamedNodeMap map = ((Node) getNode()).getAttributes();",
      "info" : "VariableDeclarationStatement[23745-23799]:VariableDeclarationStatement[23832-23886]"
    }, {
      "left" : "int length = map.getLength();",
      "right" : "int length = map.getLength();",
      "info" : "VariableDeclarationStatement[23812-23841]:VariableDeclarationStatement[23899-23928]"
    }, {
      "left" : "for (int i = 0; i < length; i++)",
      "right" : "for (int i = 0; i < length; i++)",
      "info" : "ForStatement[23854-24105]:ForStatement[23941-24192]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23887-24105]:Block[23974-24192]"
    }, {
      "left" : "Node n = map.item(i);",
      "right" : "Node n = map.item(i);",
      "info" : "VariableDeclarationStatement[23905-23926]:VariableDeclarationStatement[23992-24013]"
    }, {
      "left" : "if (n == node1)",
      "right" : "if (n == node1)",
      "info" : "IfStatement[23943-24009]:IfStatement[24030-24096]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23959-24009]:Block[24046-24096]"
    }, {
      "left" : "return -1;",
      "right" : "return -1;",
      "info" : "ReturnStatement[23981-23991]:ReturnStatement[24068-24078]"
    }, {
      "left" : "if (n == node2)",
      "right" : "if (n == node2)",
      "info" : "IfStatement[24026-24091]:IfStatement[24113-24178]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24042-24091]:Block[24129-24178]"
    }, {
      "left" : "return 1;",
      "right" : "return 1;",
      "info" : "ReturnStatement[24064-24073]:ReturnStatement[24151-24160]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[24118-24127]:ReturnStatement[24205-24214]"
    }, {
      "left" : "Node current = node.getFirstChild();",
      "right" : "Node current = node.getFirstChild();",
      "info" : "VariableDeclarationStatement[24168-24204]:VariableDeclarationStatement[24255-24291]"
    }, {
      "left" : "while (current != null)",
      "right" : "while (current != null)",
      "info" : "WhileStatement[24213-24449]:WhileStatement[24300-24536]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24237-24449]:Block[24324-24536]"
    }, {
      "left" : "if (current == node1)",
      "right" : "if (current == node1)",
      "info" : "IfStatement[24251-24315]:IfStatement[24338-24402]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24273-24315]:Block[24360-24402]"
    }, {
      "left" : "return -1;",
      "right" : "return -1;",
      "info" : "ReturnStatement[24291-24301]:ReturnStatement[24378-24388]"
    }, {
      "left" : "if (current == node2)",
      "right" : "if (current == node2)",
      "info" : "IfStatement[24328-24391]:IfStatement[24415-24478]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24350-24391]:Block[24437-24478]"
    }, {
      "left" : "return 1;",
      "right" : "return 1;",
      "info" : "ReturnStatement[24368-24377]:ReturnStatement[24455-24464]"
    }, {
      "left" : "current = current.getNextSibling();",
      "right" : "current = current.getNextSibling();",
      "info" : "ExpressionStatement[24404-24439]:ExpressionStatement[24491-24526]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[24458-24467]:ReturnStatement[24545-24554]"
    } ]
  },
  "interFileMappings" : { }
}