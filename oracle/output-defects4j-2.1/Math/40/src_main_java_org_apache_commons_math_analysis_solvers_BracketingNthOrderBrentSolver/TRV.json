{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "private static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;",
      "right" : "private static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;",
      "info" : "FieldDeclaration[1913-2012]:FieldDeclaration[1913-2012]"
    }, {
      "left" : "private static final int DEFAULT_MAXIMAL_ORDER = 5;",
      "right" : "private static final int DEFAULT_MAXIMAL_ORDER = 5;",
      "info" : "FieldDeclaration[2018-2103]:FieldDeclaration[2018-2103]"
    }, {
      "left" : "private static final int MAXIMAL_AGING = 2;",
      "right" : "private static final int MAXIMAL_AGING = 2;",
      "info" : "FieldDeclaration[2109-2235]:FieldDeclaration[2109-2235]"
    }, {
      "left" : "private static final double REDUCTION_FACTOR = 1.0 / 16.0;",
      "right" : "private static final double REDUCTION_FACTOR = 1.0 / 16.0;",
      "info" : "FieldDeclaration[2241-2376]:FieldDeclaration[2241-2376]"
    }, {
      "left" : "private final int maximalOrder;",
      "right" : "private final int maximalOrder;",
      "info" : "FieldDeclaration[2382-2439]:FieldDeclaration[2382-2439]"
    }, {
      "left" : "private AllowedSolution allowed;",
      "right" : "private AllowedSolution allowed;",
      "info" : "FieldDeclaration[2445-2542]:FieldDeclaration[2445-2542]"
    }, {
      "left" : "public BracketingNthOrderBrentSolver()",
      "right" : "public BracketingNthOrderBrentSolver()",
      "info" : "MethodDeclaration[2548-2766]:MethodDeclaration[2548-2766]"
    }, {
      "left" : "public BracketingNthOrderBrentSolver(final double absoluteAccuracy,\n                                         final int maximalOrder)\n        throws NumberIsTooSmallException",
      "right" : "public BracketingNthOrderBrentSolver(final double absoluteAccuracy,\n                                         final int maximalOrder)\n        throws NumberIsTooSmallException",
      "info" : "MethodDeclaration[2772-3410]:MethodDeclaration[2772-3410]"
    }, {
      "left" : "public BracketingNthOrderBrentSolver(final double relativeAccuracy,\n                                         final double absoluteAccuracy,\n                                         final int maximalOrder)\n        throws NumberIsTooSmallException",
      "right" : "public BracketingNthOrderBrentSolver(final double relativeAccuracy,\n                                         final double absoluteAccuracy,\n                                         final int maximalOrder)\n        throws NumberIsTooSmallException",
      "info" : "MethodDeclaration[3416-4194]:MethodDeclaration[3416-4194]"
    }, {
      "left" : "public BracketingNthOrderBrentSolver(final double relativeAccuracy,\n                                         final double absoluteAccuracy,\n                                         final double functionValueAccuracy,\n                                         final int maximalOrder)\n        throws NumberIsTooSmallException",
      "right" : "public BracketingNthOrderBrentSolver(final double relativeAccuracy,\n                                         final double absoluteAccuracy,\n                                         final double functionValueAccuracy,\n                                         final int maximalOrder)\n        throws NumberIsTooSmallException",
      "info" : "MethodDeclaration[4200-5139]:MethodDeclaration[4200-5139]"
    }, {
      "left" : "public int getMaximalOrder()",
      "right" : "public int getMaximalOrder()",
      "info" : "MethodDeclaration[5145-5278]:MethodDeclaration[5145-5278]"
    }, {
      "left" : "private double guessX(final double targetY, final double[] x, final double[] y,\n                          final int start, final int end)",
      "right" : "private double guessX(final double targetY, final double[] x, final double[] y,\n                          final int start, final int end)",
      "info" : "MethodDeclaration[12938-14325]:MethodDeclaration[13340-14727]"
    }, {
      "left" : "public double solve(int maxEval, UnivariateFunction f, double min,\n                        double max, AllowedSolution allowedSolution)",
      "right" : "public double solve(int maxEval, UnivariateFunction f, double min,\n                        double max, AllowedSolution allowedSolution)",
      "info" : "MethodDeclaration[14331-14589]:MethodDeclaration[14733-14991]"
    }, {
      "left" : "public double solve(int maxEval, UnivariateFunction f, double min,\n                        double max, double startValue,\n                        AllowedSolution allowedSolution)",
      "right" : "public double solve(int maxEval, UnivariateFunction f, double min,\n                        double max, double startValue,\n                        AllowedSolution allowedSolution)",
      "info" : "MethodDeclaration[14595-14908]:MethodDeclaration[14997-15310]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2695-2766]:Block[2695-2766]"
    }, {
      "left" : "this(DEFAULT_ABSOLUTE_ACCURACY, DEFAULT_MAXIMAL_ORDER);",
      "right" : "this(DEFAULT_ABSOLUTE_ACCURACY, DEFAULT_MAXIMAL_ORDER);",
      "info" : "ConstructorInvocation[2705-2760]:ConstructorInvocation[2705-2760]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3165-3410]:Block[3165-3410]"
    }, {
      "left" : "super(absoluteAccuracy);",
      "right" : "super(absoluteAccuracy);",
      "info" : "SuperConstructorInvocation[3175-3199]:SuperConstructorInvocation[3175-3199]"
    }, {
      "left" : "if (maximalOrder < 2)",
      "right" : "if (maximalOrder < 2)",
      "info" : "IfStatement[3208-3313]:IfStatement[3208-3313]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3230-3313]:Block[3230-3313]"
    }, {
      "left" : "throw new NumberIsTooSmallException(maximalOrder, 2, true);",
      "right" : "throw new NumberIsTooSmallException(maximalOrder, 2, true);",
      "info" : "ThrowStatement[3244-3303]:ThrowStatement[3244-3303]"
    }, {
      "left" : "this.maximalOrder = maximalOrder;",
      "right" : "this.maximalOrder = maximalOrder;",
      "info" : "ExpressionStatement[3322-3355]:ExpressionStatement[3322-3355]"
    }, {
      "left" : "this.allowed = AllowedSolution.ANY_SIDE;",
      "right" : "this.allowed = AllowedSolution.ANY_SIDE;",
      "info" : "ExpressionStatement[3364-3404]:ExpressionStatement[3364-3404]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3931-4194]:Block[3931-4194]"
    }, {
      "left" : "super(relativeAccuracy, absoluteAccuracy);",
      "right" : "super(relativeAccuracy, absoluteAccuracy);",
      "info" : "SuperConstructorInvocation[3941-3983]:SuperConstructorInvocation[3941-3983]"
    }, {
      "left" : "if (maximalOrder < 2)",
      "right" : "if (maximalOrder < 2)",
      "info" : "IfStatement[3992-4097]:IfStatement[3992-4097]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4014-4097]:Block[4014-4097]"
    }, {
      "left" : "throw new NumberIsTooSmallException(maximalOrder, 2, true);",
      "right" : "throw new NumberIsTooSmallException(maximalOrder, 2, true);",
      "info" : "ThrowStatement[4028-4087]:ThrowStatement[4028-4087]"
    }, {
      "left" : "this.maximalOrder = maximalOrder;",
      "right" : "this.maximalOrder = maximalOrder;",
      "info" : "ExpressionStatement[4106-4139]:ExpressionStatement[4106-4139]"
    }, {
      "left" : "this.allowed = AllowedSolution.ANY_SIDE;",
      "right" : "this.allowed = AllowedSolution.ANY_SIDE;",
      "info" : "ExpressionStatement[4148-4188]:ExpressionStatement[4148-4188]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4853-5139]:Block[4853-5139]"
    }, {
      "left" : "super(relativeAccuracy, absoluteAccuracy, functionValueAccuracy);",
      "right" : "super(relativeAccuracy, absoluteAccuracy, functionValueAccuracy);",
      "info" : "SuperConstructorInvocation[4863-4928]:SuperConstructorInvocation[4863-4928]"
    }, {
      "left" : "if (maximalOrder < 2)",
      "right" : "if (maximalOrder < 2)",
      "info" : "IfStatement[4937-5042]:IfStatement[4937-5042]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4959-5042]:Block[4959-5042]"
    }, {
      "left" : "throw new NumberIsTooSmallException(maximalOrder, 2, true);",
      "right" : "throw new NumberIsTooSmallException(maximalOrder, 2, true);",
      "info" : "ThrowStatement[4973-5032]:ThrowStatement[4973-5032]"
    }, {
      "left" : "this.maximalOrder = maximalOrder;",
      "right" : "this.maximalOrder = maximalOrder;",
      "info" : "ExpressionStatement[5051-5084]:ExpressionStatement[5051-5084]"
    }, {
      "left" : "this.allowed = AllowedSolution.ANY_SIDE;",
      "right" : "this.allowed = AllowedSolution.ANY_SIDE;",
      "info" : "ExpressionStatement[5093-5133]:ExpressionStatement[5093-5133]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5242-5278]:Block[5242-5278]"
    }, {
      "left" : "return maximalOrder;",
      "right" : "return maximalOrder;",
      "info" : "ReturnStatement[5252-5272]:ReturnStatement[5252-5272]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13842-14325]:Block[14244-14727]"
    }, {
      "left" : "for (int i = start; i < end - 1; ++i)",
      "right" : "for (int i = start; i < end - 1; ++i)",
      "info" : "ForStatement[13917-14137]:ForStatement[14319-14539]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13955-14137]:Block[14357-14539]"
    }, {
      "left" : "final int delta = i + 1 - start;",
      "right" : "final int delta = i + 1 - start;",
      "info" : "VariableDeclarationStatement[13969-14001]:VariableDeclarationStatement[14371-14403]"
    }, {
      "left" : "for (int j = end - 1; j > i; --j)",
      "right" : "for (int j = end - 1; j > i; --j)",
      "info" : "ForStatement[14014-14127]:ForStatement[14416-14529]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14048-14127]:Block[14450-14529]"
    }, {
      "left" : "x[j] = (x[j] - x[j-1]) / (y[j] - y[j - delta]);",
      "right" : "x[j] = (x[j] - x[j-1]) / (y[j] - y[j - delta]);",
      "info" : "ExpressionStatement[14066-14113]:ExpressionStatement[14468-14515]"
    }, {
      "left" : "double x0 = 0;",
      "right" : "double x0 = 0;",
      "info" : "VariableDeclarationStatement[14178-14192]:VariableDeclarationStatement[14580-14594]"
    }, {
      "left" : "for (int j = end - 1; j >= start; --j)",
      "right" : "for (int j = end - 1; j >= start; --j)",
      "info" : "ForStatement[14201-14298]:ForStatement[14603-14700]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14240-14298]:Block[14642-14700]"
    }, {
      "left" : "x0 = x[j] + x0 * (targetY - y[j]);",
      "right" : "x0 = x[j] + x0 * (targetY - y[j]);",
      "info" : "ExpressionStatement[14254-14288]:ExpressionStatement[14656-14690]"
    }, {
      "left" : "return x0;",
      "right" : "return x0;",
      "info" : "ReturnStatement[14308-14318]:ReturnStatement[14710-14720]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14492-14589]:Block[14894-14991]"
    }, {
      "left" : "this.allowed = allowedSolution;",
      "right" : "this.allowed = allowedSolution;",
      "info" : "ExpressionStatement[14502-14533]:ExpressionStatement[14904-14935]"
    }, {
      "left" : "return super.solve(maxEval, f, min, max);",
      "right" : "return super.solve(maxEval, f, min, max);",
      "info" : "ReturnStatement[14542-14583]:ReturnStatement[14944-14985]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14799-14908]:Block[15201-15310]"
    }, {
      "left" : "this.allowed = allowedSolution;",
      "right" : "this.allowed = allowedSolution;",
      "info" : "ExpressionStatement[14809-14840]:ExpressionStatement[15211-15242]"
    }, {
      "left" : "return super.solve(maxEval, f, min, max, startValue);",
      "right" : "return super.solve(maxEval, f, min, max, startValue);",
      "info" : "ReturnStatement[14849-14902]:ReturnStatement[15251-15304]"
    } ]
  },
  "interFileMappings" : { }
}