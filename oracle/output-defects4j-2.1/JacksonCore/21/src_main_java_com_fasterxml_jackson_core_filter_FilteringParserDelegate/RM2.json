{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "FilteringParserDelegate",
      "right" : "FilteringParserDelegate",
      "info" : "TypeDeclaration[314-34713]:TypeDeclaration[314-34764]"
    }, {
      "left" : "protected TokenFilter rootFilter;",
      "right" : "protected TokenFilter rootFilter;",
      "info" : "FieldDeclaration[727-890]:FieldDeclaration[727-890]"
    }, {
      "left" : "protected boolean _allowMultipleMatches;",
      "right" : "protected boolean _allowMultipleMatches;",
      "info" : "FieldDeclaration[896-1289]:FieldDeclaration[896-1289]"
    }, {
      "left" : "protected boolean _includePath;",
      "right" : "protected boolean _includePath;",
      "info" : "FieldDeclaration[1295-1649]:FieldDeclaration[1295-1649]"
    }, {
      "left" : "@Deprecated\n    protected boolean _includeImmediateParent;",
      "right" : "@Deprecated\n    protected boolean _includeImmediateParent;",
      "info" : "FieldDeclaration[2053-2111]:FieldDeclaration[2053-2111]"
    }, {
      "left" : "protected JsonToken _currToken;",
      "right" : "protected JsonToken _currToken;",
      "info" : "FieldDeclaration[2278-2503]:FieldDeclaration[2278-2503]"
    }, {
      "left" : "protected JsonToken _lastClearedToken;",
      "right" : "protected JsonToken _lastClearedToken;",
      "info" : "FieldDeclaration[2509-2683]:FieldDeclaration[2509-2683]"
    }, {
      "left" : "protected TokenFilterContext _headContext;",
      "right" : "protected TokenFilterContext _headContext;",
      "info" : "FieldDeclaration[2693-2957]:FieldDeclaration[2693-2957]"
    }, {
      "left" : "protected TokenFilterContext _exposedContext;",
      "right" : "protected TokenFilterContext _exposedContext;",
      "info" : "FieldDeclaration[2963-3259]:FieldDeclaration[2963-3259]"
    }, {
      "left" : "protected TokenFilter _itemFilter;",
      "right" : "protected TokenFilter _itemFilter;",
      "info" : "FieldDeclaration[3265-3520]:FieldDeclaration[3265-3520]"
    }, {
      "left" : "protected int _matchCount;",
      "right" : "protected int _matchCount;",
      "info" : "FieldDeclaration[3530-3664]:FieldDeclaration[3530-3664]"
    }, {
      "left" : "public FilteringParserDelegate(JsonParser p, TokenFilter f,\n            boolean includePath, boolean allowMultipleMatches)",
      "right" : "public FilteringParserDelegate(JsonParser p, TokenFilter f,\n            boolean includePath, boolean allowMultipleMatches)",
      "info" : "MethodDeclaration[3850-4272]:MethodDeclaration[3850-4272]"
    }, {
      "left" : "public TokenFilter getFilter()",
      "right" : "public TokenFilter getFilter()",
      "info" : "MethodDeclaration[4442-4495]:MethodDeclaration[4442-4495]"
    }, {
      "left" : "public int getMatchCount()",
      "right" : "public int getMatchCount()",
      "info" : "MethodDeclaration[4501-4709]:MethodDeclaration[4501-4709]"
    }, {
      "left" : "public JsonToken getCurrentToken()",
      "right" : "public JsonToken getCurrentToken()",
      "info" : "MethodDeclaration[4894-4961]:MethodDeclaration[4894-4961]"
    }, {
      "left" : "public JsonToken currentToken()",
      "right" : "public JsonToken currentToken()",
      "info" : "MethodDeclaration[4966-5030]:MethodDeclaration[4966-5030]"
    }, {
      "left" : "public final int getCurrentTokenId()",
      "right" : "public final int getCurrentTokenId()",
      "info" : "MethodDeclaration[5036-5193]:MethodDeclaration[5036-5193]"
    }, {
      "left" : "public final int currentTokenId()",
      "right" : "public final int currentTokenId()",
      "info" : "MethodDeclaration[5198-5352]:MethodDeclaration[5198-5352]"
    }, {
      "left" : "public boolean hasCurrentToken()",
      "right" : "public boolean hasCurrentToken()",
      "info" : "MethodDeclaration[5358-5431]:MethodDeclaration[5358-5431]"
    }, {
      "left" : "public boolean hasTokenId(int id)",
      "right" : "public boolean hasTokenId(int id)",
      "info" : "MethodDeclaration[5436-5643]:MethodDeclaration[5436-5643]"
    }, {
      "left" : "public final boolean hasToken(JsonToken t)",
      "right" : "public final boolean hasToken(JsonToken t)",
      "info" : "MethodDeclaration[5649-5743]:MethodDeclaration[5649-5743]"
    }, {
      "left" : "public boolean isExpectedStartArrayToken()",
      "right" : "public boolean isExpectedStartArrayToken()",
      "info" : "MethodDeclaration[5753-5853]:MethodDeclaration[5753-5853]"
    }, {
      "left" : "public boolean isExpectedStartObjectToken()",
      "right" : "public boolean isExpectedStartObjectToken()",
      "info" : "MethodDeclaration[5858-5960]:MethodDeclaration[5858-5960]"
    }, {
      "left" : "public JsonLocation getCurrentLocation()",
      "right" : "public JsonLocation getCurrentLocation()",
      "info" : "MethodDeclaration[5966-6058]:MethodDeclaration[5966-6058]"
    }, {
      "left" : "public JsonStreamContext getParsingContext()",
      "right" : "public JsonStreamContext getParsingContext()",
      "info" : "MethodDeclaration[6064-6163]:MethodDeclaration[6064-6163]"
    }, {
      "left" : "public String getCurrentName() throws IOException",
      "right" : "public String getCurrentName() throws IOException",
      "info" : "MethodDeclaration[6257-6645]:MethodDeclaration[6257-6645]"
    }, {
      "left" : "public void clearCurrentToken()",
      "right" : "public void clearCurrentToken()",
      "info" : "MethodDeclaration[6836-7008]:MethodDeclaration[6836-7008]"
    }, {
      "left" : "public JsonToken getLastClearedToken()",
      "right" : "public JsonToken getLastClearedToken()",
      "info" : "MethodDeclaration[7014-7096]:MethodDeclaration[7014-7096]"
    }, {
      "left" : "public void overrideCurrentName(String name)",
      "right" : "public void overrideCurrentName(String name)",
      "info" : "MethodDeclaration[7102-7485]:MethodDeclaration[7102-7485]"
    }, {
      "left" : "public JsonToken nextToken() throws IOException",
      "right" : "public JsonToken nextToken() throws IOException",
      "info" : "MethodDeclaration[7664-16535]:MethodDeclaration[7664-16586]"
    }, {
      "left" : "protected final JsonToken _nextToken2() throws IOException",
      "right" : "protected final JsonToken _nextToken2() throws IOException",
      "info" : "MethodDeclaration[16541-22721]:MethodDeclaration[16592-22772]"
    }, {
      "left" : "protected final JsonToken _nextTokenWithBuffering(final TokenFilterContext buffRoot)\n        throws IOException",
      "right" : "protected final JsonToken _nextTokenWithBuffering(final TokenFilterContext buffRoot)\n        throws IOException",
      "info" : "MethodDeclaration[22727-27944]:MethodDeclaration[22778-27995]"
    }, {
      "left" : "private JsonToken _nextBuffered(TokenFilterContext buffRoot) throws IOException",
      "right" : "private JsonToken _nextBuffered(TokenFilterContext buffRoot) throws IOException",
      "info" : "MethodDeclaration[27950-28985]:MethodDeclaration[28001-29036]"
    }, {
      "left" : "public JsonToken nextValue() throws IOException",
      "right" : "public JsonToken nextValue() throws IOException",
      "info" : "MethodDeclaration[28995-29250]:MethodDeclaration[29046-29301]"
    }, {
      "left" : "public JsonParser skipChildren() throws IOException",
      "right" : "public JsonParser skipChildren() throws IOException",
      "info" : "MethodDeclaration[29256-30200]:MethodDeclaration[29307-30251]"
    }, {
      "left" : "public String getText() throws IOException",
      "right" : "public String getText() throws IOException",
      "info" : "MethodDeclaration[30407-30491]:MethodDeclaration[30458-30542]"
    }, {
      "left" : "public boolean hasTextCharacters()",
      "right" : "public boolean hasTextCharacters()",
      "info" : "MethodDeclaration[30496-30581]:MethodDeclaration[30547-30632]"
    }, {
      "left" : "public char[] getTextCharacters() throws IOException",
      "right" : "public char[] getTextCharacters() throws IOException",
      "info" : "MethodDeclaration[30586-30689]:MethodDeclaration[30637-30740]"
    }, {
      "left" : "public int getTextLength() throws IOException",
      "right" : "public int getTextLength() throws IOException",
      "info" : "MethodDeclaration[30694-30786]:MethodDeclaration[30745-30837]"
    }, {
      "left" : "public int getTextOffset() throws IOException",
      "right" : "public int getTextOffset() throws IOException",
      "info" : "MethodDeclaration[30791-30883]:MethodDeclaration[30842-30934]"
    }, {
      "left" : "public BigInteger getBigIntegerValue() throws IOException",
      "right" : "public BigInteger getBigIntegerValue() throws IOException",
      "info" : "MethodDeclaration[31093-31206]:MethodDeclaration[31144-31257]"
    }, {
      "left" : "public boolean getBooleanValue() throws IOException",
      "right" : "public boolean getBooleanValue() throws IOException",
      "info" : "MethodDeclaration[31212-31316]:MethodDeclaration[31263-31367]"
    }, {
      "left" : "public byte getByteValue() throws IOException",
      "right" : "public byte getByteValue() throws IOException",
      "info" : "MethodDeclaration[31326-31421]:MethodDeclaration[31377-31472]"
    }, {
      "left" : "public short getShortValue() throws IOException",
      "right" : "public short getShortValue() throws IOException",
      "info" : "MethodDeclaration[31427-31525]:MethodDeclaration[31478-31576]"
    }, {
      "left" : "public BigDecimal getDecimalValue() throws IOException",
      "right" : "public BigDecimal getDecimalValue() throws IOException",
      "info" : "MethodDeclaration[31531-31638]:MethodDeclaration[31582-31689]"
    }, {
      "left" : "public double getDoubleValue() throws IOException",
      "right" : "public double getDoubleValue() throws IOException",
      "info" : "MethodDeclaration[31644-31745]:MethodDeclaration[31695-31796]"
    }, {
      "left" : "public float getFloatValue() throws IOException",
      "right" : "public float getFloatValue() throws IOException",
      "info" : "MethodDeclaration[31751-31849]:MethodDeclaration[31802-31900]"
    }, {
      "left" : "public int getIntValue() throws IOException",
      "right" : "public int getIntValue() throws IOException",
      "info" : "MethodDeclaration[31855-31947]:MethodDeclaration[31906-31998]"
    }, {
      "left" : "public long getLongValue() throws IOException",
      "right" : "public long getLongValue() throws IOException",
      "info" : "MethodDeclaration[31953-32048]:MethodDeclaration[32004-32099]"
    }, {
      "left" : "public NumberType getNumberType() throws IOException",
      "right" : "public NumberType getNumberType() throws IOException",
      "info" : "MethodDeclaration[32054-32157]:MethodDeclaration[32105-32208]"
    }, {
      "left" : "public Number getNumberValue() throws IOException",
      "right" : "public Number getNumberValue() throws IOException",
      "info" : "MethodDeclaration[32163-32264]:MethodDeclaration[32214-32315]"
    }, {
      "left" : "public int getValueAsInt() throws IOException",
      "right" : "public int getValueAsInt() throws IOException",
      "info" : "MethodDeclaration[32486-32578]:MethodDeclaration[32537-32629]"
    }, {
      "left" : "public int getValueAsInt(int defaultValue) throws IOException",
      "right" : "public int getValueAsInt(int defaultValue) throws IOException",
      "info" : "MethodDeclaration[32583-32703]:MethodDeclaration[32634-32754]"
    }, {
      "left" : "public long getValueAsLong() throws IOException",
      "right" : "public long getValueAsLong() throws IOException",
      "info" : "MethodDeclaration[32708-32803]:MethodDeclaration[32759-32854]"
    }, {
      "left" : "public long getValueAsLong(long defaultValue) throws IOException",
      "right" : "public long getValueAsLong(long defaultValue) throws IOException",
      "info" : "MethodDeclaration[32808-32932]:MethodDeclaration[32859-32983]"
    }, {
      "left" : "public double getValueAsDouble() throws IOException",
      "right" : "public double getValueAsDouble() throws IOException",
      "info" : "MethodDeclaration[32937-33038]:MethodDeclaration[32988-33089]"
    }, {
      "left" : "public double getValueAsDouble(double defaultValue) throws IOException",
      "right" : "public double getValueAsDouble(double defaultValue) throws IOException",
      "info" : "MethodDeclaration[33043-33175]:MethodDeclaration[33094-33226]"
    }, {
      "left" : "public boolean getValueAsBoolean() throws IOException",
      "right" : "public boolean getValueAsBoolean() throws IOException",
      "info" : "MethodDeclaration[33180-33284]:MethodDeclaration[33231-33335]"
    }, {
      "left" : "public boolean getValueAsBoolean(boolean defaultValue) throws IOException",
      "right" : "public boolean getValueAsBoolean(boolean defaultValue) throws IOException",
      "info" : "MethodDeclaration[33289-33425]:MethodDeclaration[33340-33476]"
    }, {
      "left" : "public String getValueAsString() throws IOException",
      "right" : "public String getValueAsString() throws IOException",
      "info" : "MethodDeclaration[33430-33531]:MethodDeclaration[33481-33582]"
    }, {
      "left" : "public String getValueAsString(String defaultValue) throws IOException",
      "right" : "public String getValueAsString(String defaultValue) throws IOException",
      "info" : "MethodDeclaration[33536-33668]:MethodDeclaration[33587-33719]"
    }, {
      "left" : "public Object getEmbeddedObject() throws IOException",
      "right" : "public Object getEmbeddedObject() throws IOException",
      "info" : "MethodDeclaration[33871-33974]:MethodDeclaration[33922-34025]"
    }, {
      "left" : "public byte[] getBinaryValue(Base64Variant b64variant) throws IOException",
      "right" : "public byte[] getBinaryValue(Base64Variant b64variant) throws IOException",
      "info" : "MethodDeclaration[33979-34110]:MethodDeclaration[34030-34161]"
    }, {
      "left" : "public int readBinaryValue(Base64Variant b64variant, OutputStream out) throws IOException",
      "right" : "public int readBinaryValue(Base64Variant b64variant, OutputStream out) throws IOException",
      "info" : "MethodDeclaration[34115-34268]:MethodDeclaration[34166-34319]"
    }, {
      "left" : "public JsonLocation getTokenLocation()",
      "right" : "public JsonLocation getTokenLocation()",
      "info" : "MethodDeclaration[34273-34361]:MethodDeclaration[34324-34412]"
    }, {
      "left" : "protected JsonStreamContext _filterContext()",
      "right" : "protected JsonStreamContext _filterContext()",
      "info" : "MethodDeclaration[34542-34708]:MethodDeclaration[34593-34759]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3977-4272]:Block[3977-4272]"
    }, {
      "left" : "super(p);",
      "right" : "super(p);",
      "info" : "SuperConstructorInvocation[3987-3996]:SuperConstructorInvocation[3987-3996]"
    }, {
      "left" : "rootFilter = f;",
      "right" : "rootFilter = f;",
      "info" : "ExpressionStatement[4005-4020]:ExpressionStatement[4005-4020]"
    }, {
      "left" : "_itemFilter = f;",
      "right" : "_itemFilter = f;",
      "info" : "ExpressionStatement[4096-4112]:ExpressionStatement[4096-4112]"
    }, {
      "left" : "_headContext = TokenFilterContext.createRootContext(f);",
      "right" : "_headContext = TokenFilterContext.createRootContext(f);",
      "info" : "ExpressionStatement[4121-4176]:ExpressionStatement[4121-4176]"
    }, {
      "left" : "_includePath = includePath;",
      "right" : "_includePath = includePath;",
      "info" : "ExpressionStatement[4185-4212]:ExpressionStatement[4185-4212]"
    }, {
      "left" : "_allowMultipleMatches = allowMultipleMatches;",
      "right" : "_allowMultipleMatches = allowMultipleMatches;",
      "info" : "ExpressionStatement[4221-4266]:ExpressionStatement[4221-4266]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4473-4495]:Block[4473-4495]"
    }, {
      "left" : "return rootFilter;",
      "right" : "return rootFilter;",
      "info" : "ReturnStatement[4475-4493]:ReturnStatement[4475-4493]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4674-4709]:Block[4674-4709]"
    }, {
      "left" : "return _matchCount;",
      "right" : "return _matchCount;",
      "info" : "ReturnStatement[4684-4703]:ReturnStatement[4684-4703]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4939-4961]:Block[4939-4961]"
    }, {
      "left" : "return _currToken;",
      "right" : "return _currToken;",
      "info" : "ReturnStatement[4941-4959]:ReturnStatement[4941-4959]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5008-5030]:Block[5008-5030]"
    }, {
      "left" : "return _currToken;",
      "right" : "return _currToken;",
      "info" : "ReturnStatement[5010-5028]:ReturnStatement[5010-5028]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5083-5193]:Block[5083-5193]"
    }, {
      "left" : "final JsonToken t = _currToken;",
      "right" : "final JsonToken t = _currToken;",
      "info" : "VariableDeclarationStatement[5093-5124]:VariableDeclarationStatement[5093-5124]"
    }, {
      "left" : "return (t == null) ? JsonTokenId.ID_NO_TOKEN : t.id();",
      "right" : "return (t == null) ? JsonTokenId.ID_NO_TOKEN : t.id();",
      "info" : "ReturnStatement[5133-5187]:ReturnStatement[5133-5187]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5242-5352]:Block[5242-5352]"
    }, {
      "left" : "final JsonToken t = _currToken;",
      "right" : "final JsonToken t = _currToken;",
      "info" : "VariableDeclarationStatement[5252-5283]:VariableDeclarationStatement[5252-5283]"
    }, {
      "left" : "return (t == null) ? JsonTokenId.ID_NO_TOKEN : t.id();",
      "right" : "return (t == null) ? JsonTokenId.ID_NO_TOKEN : t.id();",
      "info" : "ReturnStatement[5292-5346]:ReturnStatement[5292-5346]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5401-5431]:Block[5401-5431]"
    }, {
      "left" : "return _currToken != null;",
      "right" : "return _currToken != null;",
      "info" : "ReturnStatement[5403-5429]:ReturnStatement[5403-5429]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5480-5643]:Block[5480-5643]"
    }, {
      "left" : "final JsonToken t = _currToken;",
      "right" : "final JsonToken t = _currToken;",
      "info" : "VariableDeclarationStatement[5490-5521]:VariableDeclarationStatement[5490-5521]"
    }, {
      "left" : "if (t == null)",
      "right" : "if (t == null)",
      "info" : "IfStatement[5530-5608]:IfStatement[5530-5608]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5545-5608]:Block[5545-5608]"
    }, {
      "left" : "return (JsonTokenId.ID_NO_TOKEN == id);",
      "right" : "return (JsonTokenId.ID_NO_TOKEN == id);",
      "info" : "ReturnStatement[5559-5598]:ReturnStatement[5559-5598]"
    }, {
      "left" : "return t.id() == id;",
      "right" : "return t.id() == id;",
      "info" : "ReturnStatement[5617-5637]:ReturnStatement[5617-5637]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5702-5743]:Block[5702-5743]"
    }, {
      "left" : "return (_currToken == t);",
      "right" : "return (_currToken == t);",
      "info" : "ReturnStatement[5712-5737]:ReturnStatement[5712-5737]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5806-5853]:Block[5806-5853]"
    }, {
      "left" : "return _currToken == JsonToken.START_ARRAY;",
      "right" : "return _currToken == JsonToken.START_ARRAY;",
      "info" : "ReturnStatement[5808-5851]:ReturnStatement[5808-5851]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5912-5960]:Block[5912-5960]"
    }, {
      "left" : "return _currToken == JsonToken.START_OBJECT;",
      "right" : "return _currToken == JsonToken.START_OBJECT;",
      "info" : "ReturnStatement[5914-5958]:ReturnStatement[5914-5958]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6017-6058]:Block[6017-6058]"
    }, {
      "left" : "return delegate.getCurrentLocation();",
      "right" : "return delegate.getCurrentLocation();",
      "info" : "ReturnStatement[6019-6056]:ReturnStatement[6019-6056]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6123-6163]:Block[6123-6163]"
    }, {
      "left" : "return _filterContext();",
      "right" : "return _filterContext();",
      "info" : "ReturnStatement[6133-6157]:ReturnStatement[6133-6157]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6321-6645]:Block[6321-6645]"
    }, {
      "left" : "JsonStreamContext ctxt = _filterContext();",
      "right" : "JsonStreamContext ctxt = _filterContext();",
      "info" : "VariableDeclarationStatement[6331-6373]:VariableDeclarationStatement[6331-6373]"
    }, {
      "left" : "if (_currToken == JsonToken.START_OBJECT || _currToken == JsonToken.START_ARRAY)",
      "right" : "if (_currToken == JsonToken.START_OBJECT || _currToken == JsonToken.START_ARRAY)",
      "info" : "IfStatement[6382-6601]:IfStatement[6382-6601]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6463-6601]:Block[6463-6601]"
    }, {
      "left" : "JsonStreamContext parent = ctxt.getParent();",
      "right" : "JsonStreamContext parent = ctxt.getParent();",
      "info" : "VariableDeclarationStatement[6477-6521]:VariableDeclarationStatement[6477-6521]"
    }, {
      "left" : "return (parent == null) ? null : parent.getCurrentName();",
      "right" : "return (parent == null) ? null : parent.getCurrentName();",
      "info" : "ReturnStatement[6534-6591]:ReturnStatement[6534-6591]"
    }, {
      "left" : "return ctxt.getCurrentName();",
      "right" : "return ctxt.getCurrentName();",
      "info" : "ReturnStatement[6610-6639]:ReturnStatement[6610-6639]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6882-7008]:Block[6882-7008]"
    }, {
      "left" : "if (_currToken != null)",
      "right" : "if (_currToken != null)",
      "info" : "IfStatement[6892-7002]:IfStatement[6892-7002]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6916-7002]:Block[6916-7002]"
    }, {
      "left" : "_lastClearedToken = _currToken;",
      "right" : "_lastClearedToken = _currToken;",
      "info" : "ExpressionStatement[6930-6961]:ExpressionStatement[6930-6961]"
    }, {
      "left" : "_currToken = null;",
      "right" : "_currToken = null;",
      "info" : "ExpressionStatement[6974-6992]:ExpressionStatement[6974-6992]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7067-7096]:Block[7067-7096]"
    }, {
      "left" : "return _lastClearedToken;",
      "right" : "return _lastClearedToken;",
      "info" : "ReturnStatement[7069-7094]:ReturnStatement[7069-7094]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7161-7485]:Block[7161-7485]"
    }, {
      "left" : "throw new UnsupportedOperationException(\"Can not currently override name during filtering read\");",
      "right" : "throw new UnsupportedOperationException(\"Can not currently override name during filtering read\");",
      "info" : "ThrowStatement[7382-7479]:ThrowStatement[7382-7479]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7730-16535]:Block[7730-16586]"
    }, {
      "left" : "if (!_allowMultipleMatches && (_currToken != null) && (_exposedContext == null))",
      "right" : "if (!_allowMultipleMatches && (_currToken != null) && (_exposedContext == null))",
      "info" : "IfStatement[8263-9029]:IfStatement[8263-9080]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8344-9029]:Block[8344-9080]"
    }, {
      "left" : "if (_currToken.isStructEnd())",
      "right" : "if (_currToken.isStructEnd())",
      "info" : "IfStatement[8449-9019]:IfStatement[8482-9056]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8479-8629]:Block[8464-9070]"
    }, {
      "left" : "if (_headContext.isStartHandled())",
      "right" : "if (_headContext.isStartHandled())",
      "info" : "IfStatement[8501-8611]:IfStatement[8534-8644]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8536-8611]:Block[8512-8662]"
    }, {
      "left" : "return (_currToken = null);",
      "right" : "return (_currToken = null);",
      "info" : "ReturnStatement[8562-8589]:ReturnStatement[8595-8622]"
    }, {
      "left" : "if (_currToken.isScalarValue())",
      "right" : "if (_currToken.isScalarValue())",
      "info" : "IfStatement[8635-9019]:IfStatement[8668-9056]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8667-9019]:Block[8963-9038]"
    }, {
      "left" : "if (!_headContext.isStartHandled() && (_itemFilter == TokenFilter.INCLUDE_ALL))",
      "right" : "if (!_headContext.isStartHandled() && (_itemFilter == TokenFilter.INCLUDE_ALL))",
      "info" : "IfStatement[8850-9005]:IfStatement[8883-9038]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8930-9005]:Block[8700-9056]"
    }, {
      "left" : "return (_currToken = null);",
      "right" : "return (_currToken = null);",
      "info" : "ReturnStatement[8956-8983]:ReturnStatement[8989-9016]"
    }, {
      "left" : "TokenFilterContext ctxt = _exposedContext;",
      "right" : "TokenFilterContext ctxt = _exposedContext;",
      "info" : "VariableDeclarationStatement[9068-9110]:VariableDeclarationStatement[9119-9161]"
    }, {
      "left" : "if (ctxt != null)",
      "right" : "if (ctxt != null)",
      "info" : "IfStatement[9120-10552]:IfStatement[9171-10603]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9138-10552]:Block[9189-10603]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[9152-10542]:WhileStatement[9203-10593]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9165-10542]:Block[9216-10593]"
    }, {
      "left" : "JsonToken t = ctxt.nextTokenToRead();",
      "right" : "JsonToken t = ctxt.nextTokenToRead();",
      "info" : "VariableDeclarationStatement[9183-9220]:VariableDeclarationStatement[9234-9271]"
    }, {
      "left" : "if (t != null)",
      "right" : "if (t != null)",
      "info" : "IfStatement[9237-9337]:IfStatement[9288-9388]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9252-9337]:Block[9303-9388]"
    }, {
      "left" : "_currToken = t;",
      "right" : "_currToken = t;",
      "info" : "ExpressionStatement[9274-9289]:ExpressionStatement[9325-9340]"
    }, {
      "left" : "return t;",
      "right" : "return t;",
      "info" : "ReturnStatement[9310-9319]:ReturnStatement[9361-9370]"
    }, {
      "left" : "if (ctxt == _headContext)",
      "right" : "if (ctxt == _headContext)",
      "info" : "IfStatement[9403-10199]:IfStatement[9454-10250]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9429-10199]:Block[9480-10250]"
    }, {
      "left" : "_exposedContext = null;",
      "right" : "_exposedContext = null;",
      "info" : "ExpressionStatement[9451-9474]:ExpressionStatement[9502-9525]"
    }, {
      "left" : "if (ctxt.inArray())",
      "right" : "if (ctxt.inArray())",
      "info" : "IfStatement[9495-9782]:IfStatement[9546-9833]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9515-9782]:Block[9566-9833]"
    }, {
      "left" : "t = delegate.getCurrentToken();",
      "right" : "t = delegate.getCurrentToken();",
      "info" : "ExpressionStatement[9541-9572]:ExpressionStatement[9592-9623]"
    }, {
      "left" : "_currToken = t;",
      "right" : "_currToken = t;",
      "info" : "ExpressionStatement[9711-9726]:ExpressionStatement[9762-9777]"
    }, {
      "left" : "return t;",
      "right" : "return t;",
      "info" : "ReturnStatement[9751-9760]:ReturnStatement[9802-9811]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[10175-10181]:BreakStatement[10226-10232]"
    }, {
      "left" : "ctxt = _headContext.findChildOf(ctxt);",
      "right" : "ctxt = _headContext.findChildOf(ctxt);",
      "info" : "ExpressionStatement[10275-10313]:ExpressionStatement[10326-10364]"
    }, {
      "left" : "_exposedContext = ctxt;",
      "right" : "_exposedContext = ctxt;",
      "info" : "ExpressionStatement[10330-10353]:ExpressionStatement[10381-10404]"
    }, {
      "left" : "if (ctxt == null)",
      "right" : "if (ctxt == null)",
      "info" : "IfStatement[10370-10528]:IfStatement[10421-10579]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10388-10528]:Block[10439-10579]"
    }, {
      "left" : "throw _constructError(\"Unexpected problem: chain of filtered context broken\");",
      "right" : "throw _constructError(\"Unexpected problem: chain of filtered context broken\");",
      "info" : "ThrowStatement[10432-10510]:ThrowStatement[10483-10561]"
    }, {
      "left" : "JsonToken t = delegate.nextToken();",
      "right" : "JsonToken t = delegate.nextToken();",
      "info" : "VariableDeclarationStatement[10615-10650]:VariableDeclarationStatement[10666-10701]"
    }, {
      "left" : "if (t == null)",
      "right" : "if (t == null)",
      "info" : "IfStatement[10659-10803]:IfStatement[10710-10854]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10674-10803]:Block[10725-10854]"
    }, {
      "left" : "_currToken = t;",
      "right" : "_currToken = t;",
      "info" : "ExpressionStatement[10756-10771]:ExpressionStatement[10807-10822]"
    }, {
      "left" : "return t;",
      "right" : "return t;",
      "info" : "ReturnStatement[10784-10793]:ReturnStatement[10835-10844]"
    }, {
      "left" : "TokenFilter f;",
      "right" : "TokenFilter f;",
      "info" : "VariableDeclarationStatement[10856-10870]:VariableDeclarationStatement[10907-10921]"
    }, {
      "left" : "switch (t.id()) {\n        case ID_START_ARRAY:\n            f = _itemFilter;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                _headContext = _headContext.createChildArrayContext(f, true);\n                return (_currToken = t);\n            }\n            if (f == null) { // does this occur?\n                delegate.skipChildren();\n                break;\n            }\n            // Otherwise still iffy, need to check\n            f = _headContext.checkValue(f);\n            if (f == null) {\n                delegate.skipChildren();\n                break;\n            }\n            if (f != TokenFilter.INCLUDE_ALL) {\n                f = f.filterStartArray();\n            }\n            _itemFilter = f;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                _headContext = _headContext.createChildArrayContext(f, true);\n                return (_currToken = t);\n            }\n            _headContext = _headContext.createChildArrayContext(f, false);\n            \n            // Also: only need buffering if parent path to be included\n            if (_includePath) {\n                t = _nextTokenWithBuffering(_headContext);\n                if (t != null) {\n                    _currToken = t;\n                    return t;\n                }\n            }\n            break;\n\n        case ID_START_OBJECT:\n            f = _itemFilter;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                _headContext = _headContext.createChildObjectContext(f, true);\n                return (_currToken = t);\n            }\n            if (f == null) { // does this occur?\n                delegate.skipChildren();\n                break;\n            }\n            // Otherwise still iffy, need to check\n            f = _headContext.checkValue(f);\n            if (f == null) {\n                delegate.skipChildren();\n                break;\n            }\n            if (f != TokenFilter.INCLUDE_ALL) {\n                f = f.filterStartObject();\n            }\n            _itemFilter = f;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                _headContext = _headContext.createChildObjectContext(f, true);\n                return (_currToken = t);\n            }\n            _headContext = _headContext.createChildObjectContext(f, false);\n            // Also: only need buffering if parent path to be included\n            if (_includePath) {\n                t = _nextTokenWithBuffering(_headContext);\n                if (t != null) {\n                    _currToken = t;\n                    return t;\n                }\n            }\n            // note: inclusion of surrounding Object handled separately via\n            // FIELD_NAME\n            break;\n\n        case ID_END_ARRAY:\n        case ID_END_OBJECT:\n            {\n                boolean returnEnd = _headContext.isStartHandled();\n                f = _headContext.getFilter();\n                if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {\n                    f.filterFinishArray();\n                }\n                _headContext = _headContext.getParent();\n                _itemFilter = _headContext.getFilter();\n                if (returnEnd) {\n                    return (_currToken = t);\n                }\n            }\n            break;\n\n        case ID_FIELD_NAME:\n            {\n                final String name = delegate.getCurrentName();\n                // note: this will also set 'needToHandleName'\n                f = _headContext.setFieldName(name);\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _itemFilter = f;\n                    if (!_includePath) {\n                        // Minor twist here: if parent NOT included, may need to induce output of\n                        // surrounding START_OBJECT/END_OBJECT\n                        if (_includeImmediateParent && !_headContext.isStartHandled()) {\n                            t = _headContext.nextTokenToRead(); // returns START_OBJECT but also marks it handled\n                            _exposedContext = _headContext;\n                        }\n                    }\n                    return (_currToken = t);\n                }\n                if (f == null) {\n                    delegate.nextToken();\n                    delegate.skipChildren();\n                    break;\n                }\n                f = f.includeProperty(name);\n                if (f == null) {\n                    delegate.nextToken();\n                    delegate.skipChildren();\n                    break;\n                }\n                _itemFilter = f;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    if (_includePath) {\n                        return (_currToken = t);\n                    }\n                }\n                if (_includePath) {\n                    t = _nextTokenWithBuffering(_headContext);\n                    if (t != null) {\n                        _currToken = t;\n                        return t;\n                    }\n                }\n                break;\n            }\n\n        default: // scalar value\n            f = _itemFilter;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                return (_currToken = t);\n            }\n            if (f != null) {\n                f = _headContext.checkValue(f);\n                if ((f == TokenFilter.INCLUDE_ALL)\n                        || ((f != null) && f.includeValue(delegate))) {\n                    return (_currToken = t);\n                }\n            }\n            // Otherwise not included (leaves must be explicitly included)\n            break;\n        }",
      "right" : "switch (t.id()) {\n        case ID_START_ARRAY:\n            f = _itemFilter;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                _headContext = _headContext.createChildArrayContext(f, true);\n                return (_currToken = t);\n            }\n            if (f == null) { // does this occur?\n                delegate.skipChildren();\n                break;\n            }\n            // Otherwise still iffy, need to check\n            f = _headContext.checkValue(f);\n            if (f == null) {\n                delegate.skipChildren();\n                break;\n            }\n            if (f != TokenFilter.INCLUDE_ALL) {\n                f = f.filterStartArray();\n            }\n            _itemFilter = f;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                _headContext = _headContext.createChildArrayContext(f, true);\n                return (_currToken = t);\n            }\n            _headContext = _headContext.createChildArrayContext(f, false);\n            \n            // Also: only need buffering if parent path to be included\n            if (_includePath) {\n                t = _nextTokenWithBuffering(_headContext);\n                if (t != null) {\n                    _currToken = t;\n                    return t;\n                }\n            }\n            break;\n\n        case ID_START_OBJECT:\n            f = _itemFilter;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                _headContext = _headContext.createChildObjectContext(f, true);\n                return (_currToken = t);\n            }\n            if (f == null) { // does this occur?\n                delegate.skipChildren();\n                break;\n            }\n            // Otherwise still iffy, need to check\n            f = _headContext.checkValue(f);\n            if (f == null) {\n                delegate.skipChildren();\n                break;\n            }\n            if (f != TokenFilter.INCLUDE_ALL) {\n                f = f.filterStartObject();\n            }\n            _itemFilter = f;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                _headContext = _headContext.createChildObjectContext(f, true);\n                return (_currToken = t);\n            }\n            _headContext = _headContext.createChildObjectContext(f, false);\n            // Also: only need buffering if parent path to be included\n            if (_includePath) {\n                t = _nextTokenWithBuffering(_headContext);\n                if (t != null) {\n                    _currToken = t;\n                    return t;\n                }\n            }\n            // note: inclusion of surrounding Object handled separately via\n            // FIELD_NAME\n            break;\n\n        case ID_END_ARRAY:\n        case ID_END_OBJECT:\n            {\n                boolean returnEnd = _headContext.isStartHandled();\n                f = _headContext.getFilter();\n                if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {\n                    f.filterFinishArray();\n                }\n                _headContext = _headContext.getParent();\n                _itemFilter = _headContext.getFilter();\n                if (returnEnd) {\n                    return (_currToken = t);\n                }\n            }\n            break;\n\n        case ID_FIELD_NAME:\n            {\n                final String name = delegate.getCurrentName();\n                // note: this will also set 'needToHandleName'\n                f = _headContext.setFieldName(name);\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _itemFilter = f;\n                    if (!_includePath) {\n                        // Minor twist here: if parent NOT included, may need to induce output of\n                        // surrounding START_OBJECT/END_OBJECT\n                        if (_includeImmediateParent && !_headContext.isStartHandled()) {\n                            t = _headContext.nextTokenToRead(); // returns START_OBJECT but also marks it handled\n                            _exposedContext = _headContext;\n                        }\n                    }\n                    return (_currToken = t);\n                }\n                if (f == null) {\n                    delegate.nextToken();\n                    delegate.skipChildren();\n                    break;\n                }\n                f = f.includeProperty(name);\n                if (f == null) {\n                    delegate.nextToken();\n                    delegate.skipChildren();\n                    break;\n                }\n                _itemFilter = f;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    if (_includePath) {\n                        return (_currToken = t);\n                    }\n                }\n                if (_includePath) {\n                    t = _nextTokenWithBuffering(_headContext);\n                    if (t != null) {\n                        _currToken = t;\n                        return t;\n                    }\n                }\n                break;\n            }\n\n        default: // scalar value\n            f = _itemFilter;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                return (_currToken = t);\n            }\n            if (f != null) {\n                f = _headContext.checkValue(f);\n                if ((f == TokenFilter.INCLUDE_ALL)\n                        || ((f != null) && f.includeValue(delegate))) {\n                    return (_currToken = t);\n                }\n            }\n            // Otherwise not included (leaves must be explicitly included)\n            break;\n        }",
      "info" : "SwitchStatement[10888-16429]:SwitchStatement[10939-16480]"
    }, {
      "left" : "case ID_START_ARRAY:",
      "right" : "case ID_START_ARRAY:",
      "info" : "SwitchCase[10914-10934]:SwitchCase[10965-10985]"
    }, {
      "left" : "f = _itemFilter;",
      "right" : "f = _itemFilter;",
      "info" : "ExpressionStatement[10947-10963]:ExpressionStatement[10998-11014]"
    }, {
      "left" : "if (f == TokenFilter.INCLUDE_ALL)",
      "right" : "if (f == TokenFilter.INCLUDE_ALL)",
      "info" : "IfStatement[10976-11144]:IfStatement[11027-11195]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11010-11144]:Block[11061-11195]"
    }, {
      "left" : "_headContext = _headContext.createChildArrayContext(f, true);",
      "right" : "_headContext = _headContext.createChildArrayContext(f, true);",
      "info" : "ExpressionStatement[11028-11089]:ExpressionStatement[11079-11140]"
    }, {
      "left" : "return (_currToken = t);",
      "right" : "return (_currToken = t);",
      "info" : "ReturnStatement[11106-11130]:ReturnStatement[11157-11181]"
    }, {
      "left" : "if (f == null)",
      "right" : "if (f == null)",
      "info" : "IfStatement[11157-11271]:IfStatement[11208-11322]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11172-11271]:Block[11223-11322]"
    }, {
      "left" : "delegate.skipChildren();",
      "right" : "delegate.skipChildren();",
      "info" : "ExpressionStatement[11210-11234]:ExpressionStatement[11261-11285]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[11251-11257]:BreakStatement[11302-11308]"
    }, {
      "left" : "f = _headContext.checkValue(f);",
      "right" : "f = _headContext.checkValue(f);",
      "info" : "ExpressionStatement[11335-11366]:ExpressionStatement[11386-11417]"
    }, {
      "left" : "if (f == null)",
      "right" : "if (f == null)",
      "info" : "IfStatement[11379-11473]:IfStatement[11430-11524]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11394-11473]:Block[11445-11524]"
    }, {
      "left" : "delegate.skipChildren();",
      "right" : "delegate.skipChildren();",
      "info" : "ExpressionStatement[11412-11436]:ExpressionStatement[11463-11487]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[11453-11459]:BreakStatement[11504-11510]"
    }, {
      "left" : "if (f != TokenFilter.INCLUDE_ALL)",
      "right" : "if (f != TokenFilter.INCLUDE_ALL)",
      "info" : "IfStatement[11486-11577]:IfStatement[11537-11628]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11520-11577]:Block[11571-11628]"
    }, {
      "left" : "f = f.filterStartArray();",
      "right" : "f = f.filterStartArray();",
      "info" : "ExpressionStatement[11538-11563]:ExpressionStatement[11589-11614]"
    }, {
      "left" : "_itemFilter = f;",
      "right" : "_itemFilter = f;",
      "info" : "ExpressionStatement[11590-11606]:ExpressionStatement[11641-11657]"
    }, {
      "left" : "if (f == TokenFilter.INCLUDE_ALL)",
      "right" : "if (f == TokenFilter.INCLUDE_ALL)",
      "info" : "IfStatement[11619-11787]:IfStatement[11670-11838]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11653-11787]:Block[11704-11838]"
    }, {
      "left" : "_headContext = _headContext.createChildArrayContext(f, true);",
      "right" : "_headContext = _headContext.createChildArrayContext(f, true);",
      "info" : "ExpressionStatement[11671-11732]:ExpressionStatement[11722-11783]"
    }, {
      "left" : "return (_currToken = t);",
      "right" : "return (_currToken = t);",
      "info" : "ReturnStatement[11749-11773]:ReturnStatement[11800-11824]"
    }, {
      "left" : "_headContext = _headContext.createChildArrayContext(f, false);",
      "right" : "_headContext = _headContext.createChildArrayContext(f, false);",
      "info" : "ExpressionStatement[11800-11862]:ExpressionStatement[11851-11913]"
    }, {
      "left" : "if (_includePath)",
      "right" : "if (_includePath)",
      "info" : "IfStatement[11959-12168]:IfStatement[12010-12219]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11977-12168]:Block[12028-12219]"
    }, {
      "left" : "t = _nextTokenWithBuffering(_headContext);",
      "right" : "t = _nextTokenWithBuffering(_headContext);",
      "info" : "ExpressionStatement[11995-12037]:ExpressionStatement[12046-12088]"
    }, {
      "left" : "if (t != null)",
      "right" : "if (t != null)",
      "info" : "IfStatement[12054-12154]:IfStatement[12105-12205]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12069-12154]:Block[12120-12205]"
    }, {
      "left" : "_currToken = t;",
      "right" : "_currToken = t;",
      "info" : "ExpressionStatement[12091-12106]:ExpressionStatement[12142-12157]"
    }, {
      "left" : "return t;",
      "right" : "return t;",
      "info" : "ReturnStatement[12127-12136]:ReturnStatement[12178-12187]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[12181-12187]:BreakStatement[12232-12238]"
    }, {
      "left" : "case ID_START_OBJECT:",
      "right" : "case ID_START_OBJECT:",
      "info" : "SwitchCase[12197-12218]:SwitchCase[12248-12269]"
    }, {
      "left" : "f = _itemFilter;",
      "right" : "f = _itemFilter;",
      "info" : "ExpressionStatement[12231-12247]:ExpressionStatement[12282-12298]"
    }, {
      "left" : "if (f == TokenFilter.INCLUDE_ALL)",
      "right" : "if (f == TokenFilter.INCLUDE_ALL)",
      "info" : "IfStatement[12260-12429]:IfStatement[12311-12480]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12294-12429]:Block[12345-12480]"
    }, {
      "left" : "_headContext = _headContext.createChildObjectContext(f, true);",
      "right" : "_headContext = _headContext.createChildObjectContext(f, true);",
      "info" : "ExpressionStatement[12312-12374]:ExpressionStatement[12363-12425]"
    }, {
      "left" : "return (_currToken = t);",
      "right" : "return (_currToken = t);",
      "info" : "ReturnStatement[12391-12415]:ReturnStatement[12442-12466]"
    }, {
      "left" : "if (f == null)",
      "right" : "if (f == null)",
      "info" : "IfStatement[12442-12556]:IfStatement[12493-12607]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12457-12556]:Block[12508-12607]"
    }, {
      "left" : "delegate.skipChildren();",
      "right" : "delegate.skipChildren();",
      "info" : "ExpressionStatement[12495-12519]:ExpressionStatement[12546-12570]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[12536-12542]:BreakStatement[12587-12593]"
    }, {
      "left" : "f = _headContext.checkValue(f);",
      "right" : "f = _headContext.checkValue(f);",
      "info" : "ExpressionStatement[12620-12651]:ExpressionStatement[12671-12702]"
    }, {
      "left" : "if (f == null)",
      "right" : "if (f == null)",
      "info" : "IfStatement[12664-12758]:IfStatement[12715-12809]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12679-12758]:Block[12730-12809]"
    }, {
      "left" : "delegate.skipChildren();",
      "right" : "delegate.skipChildren();",
      "info" : "ExpressionStatement[12697-12721]:ExpressionStatement[12748-12772]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[12738-12744]:BreakStatement[12789-12795]"
    }, {
      "left" : "if (f != TokenFilter.INCLUDE_ALL)",
      "right" : "if (f != TokenFilter.INCLUDE_ALL)",
      "info" : "IfStatement[12771-12863]:IfStatement[12822-12914]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12805-12863]:Block[12856-12914]"
    }, {
      "left" : "f = f.filterStartObject();",
      "right" : "f = f.filterStartObject();",
      "info" : "ExpressionStatement[12823-12849]:ExpressionStatement[12874-12900]"
    }, {
      "left" : "_itemFilter = f;",
      "right" : "_itemFilter = f;",
      "info" : "ExpressionStatement[12876-12892]:ExpressionStatement[12927-12943]"
    }, {
      "left" : "if (f == TokenFilter.INCLUDE_ALL)",
      "right" : "if (f == TokenFilter.INCLUDE_ALL)",
      "info" : "IfStatement[12905-13074]:IfStatement[12956-13125]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12939-13074]:Block[12990-13125]"
    }, {
      "left" : "_headContext = _headContext.createChildObjectContext(f, true);",
      "right" : "_headContext = _headContext.createChildObjectContext(f, true);",
      "info" : "ExpressionStatement[12957-13019]:ExpressionStatement[13008-13070]"
    }, {
      "left" : "return (_currToken = t);",
      "right" : "return (_currToken = t);",
      "info" : "ReturnStatement[13036-13060]:ReturnStatement[13087-13111]"
    }, {
      "left" : "_headContext = _headContext.createChildObjectContext(f, false);",
      "right" : "_headContext = _headContext.createChildObjectContext(f, false);",
      "info" : "ExpressionStatement[13087-13150]:ExpressionStatement[13138-13201]"
    }, {
      "left" : "if (_includePath)",
      "right" : "if (_includePath)",
      "info" : "IfStatement[13234-13443]:IfStatement[13285-13494]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13252-13443]:Block[13303-13494]"
    }, {
      "left" : "t = _nextTokenWithBuffering(_headContext);",
      "right" : "t = _nextTokenWithBuffering(_headContext);",
      "info" : "ExpressionStatement[13270-13312]:ExpressionStatement[13321-13363]"
    }, {
      "left" : "if (t != null)",
      "right" : "if (t != null)",
      "info" : "IfStatement[13329-13429]:IfStatement[13380-13480]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13344-13429]:Block[13395-13480]"
    }, {
      "left" : "_currToken = t;",
      "right" : "_currToken = t;",
      "info" : "ExpressionStatement[13366-13381]:ExpressionStatement[13417-13432]"
    }, {
      "left" : "return t;",
      "right" : "return t;",
      "info" : "ReturnStatement[13402-13411]:ReturnStatement[13453-13462]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13558-13564]:BreakStatement[13609-13615]"
    }, {
      "left" : "case ID_END_ARRAY:",
      "right" : "case ID_END_ARRAY:",
      "info" : "SwitchCase[13574-13592]:SwitchCase[13625-13643]"
    }, {
      "left" : "case ID_END_OBJECT:",
      "right" : "case ID_END_OBJECT:",
      "info" : "SwitchCase[13601-13620]:SwitchCase[13652-13671]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13633-14100]:Block[13684-14151]"
    }, {
      "left" : "boolean returnEnd = _headContext.isStartHandled();",
      "right" : "boolean returnEnd = _headContext.isStartHandled();",
      "info" : "VariableDeclarationStatement[13651-13701]:VariableDeclarationStatement[13702-13752]"
    }, {
      "left" : "f = _headContext.getFilter();",
      "right" : "f = _headContext.getFilter();",
      "info" : "ExpressionStatement[13718-13747]:ExpressionStatement[13769-13798]"
    }, {
      "left" : "if ((f != null) && (f != TokenFilter.INCLUDE_ALL))",
      "right" : "if ((f != null) && (f != TokenFilter.INCLUDE_ALL))",
      "info" : "IfStatement[13764-13877]:IfStatement[13815-13928]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13815-13877]:Block[13866-13928]"
    }, {
      "left" : "f.filterFinishArray();",
      "right" : "f.filterFinishArray();",
      "info" : "ExpressionStatement[13837-13859]:ExpressionStatement[13888-13910]"
    }, {
      "left" : "_headContext = _headContext.getParent();",
      "right" : "_headContext = _headContext.getParent();",
      "info" : "ExpressionStatement[13894-13934]:ExpressionStatement[13945-13985]"
    }, {
      "left" : "_itemFilter = _headContext.getFilter();",
      "right" : "_itemFilter = _headContext.getFilter();",
      "info" : "ExpressionStatement[13951-13990]:ExpressionStatement[14002-14041]"
    }, {
      "left" : "if (returnEnd)",
      "right" : "if (returnEnd)",
      "info" : "IfStatement[14007-14086]:IfStatement[14058-14137]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14022-14086]:Block[14073-14137]"
    }, {
      "left" : "return (_currToken = t);",
      "right" : "return (_currToken = t);",
      "info" : "ReturnStatement[14044-14068]:ReturnStatement[14095-14119]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[14113-14119]:BreakStatement[14164-14170]"
    }, {
      "left" : "case ID_FIELD_NAME:",
      "right" : "case ID_FIELD_NAME:",
      "info" : "SwitchCase[14129-14148]:SwitchCase[14180-14199]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14161-15882]:Block[14212-15933]"
    }, {
      "left" : "final String name = delegate.getCurrentName();",
      "right" : "final String name = delegate.getCurrentName();",
      "info" : "VariableDeclarationStatement[14179-14225]:VariableDeclarationStatement[14230-14276]"
    }, {
      "left" : "f = _headContext.setFieldName(name);",
      "right" : "f = _headContext.setFieldName(name);",
      "info" : "ExpressionStatement[14305-14341]:ExpressionStatement[14356-14392]"
    }, {
      "left" : "if (f == TokenFilter.INCLUDE_ALL)",
      "right" : "if (f == TokenFilter.INCLUDE_ALL)",
      "info" : "IfStatement[14358-15006]:IfStatement[14409-15057]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14392-15006]:Block[14443-15057]"
    }, {
      "left" : "_itemFilter = f;",
      "right" : "_itemFilter = f;",
      "info" : "ExpressionStatement[14414-14430]:ExpressionStatement[14465-14481]"
    }, {
      "left" : "if (!_includePath)",
      "right" : "if (!_includePath)",
      "info" : "IfStatement[14451-14943]:IfStatement[14502-14994]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14470-14943]:Block[14521-14994]"
    }, {
      "left" : "if (_includeImmediateParent && !_headContext.isStartHandled())",
      "right" : "if (_includeImmediateParent && !_headContext.isStartHandled())",
      "info" : "IfStatement[14657-14921]:IfStatement[14708-14972]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14720-14921]:Block[14771-14972]"
    }, {
      "left" : "t = _headContext.nextTokenToRead();",
      "right" : "t = _headContext.nextTokenToRead();",
      "info" : "ExpressionStatement[14750-14785]:ExpressionStatement[14801-14836]"
    }, {
      "left" : "_exposedContext = _headContext;",
      "right" : "_exposedContext = _headContext;",
      "info" : "ExpressionStatement[14864-14895]:ExpressionStatement[14915-14946]"
    }, {
      "left" : "return (_currToken = t);",
      "right" : "return (_currToken = t);",
      "info" : "ReturnStatement[14964-14988]:ReturnStatement[15015-15039]"
    }, {
      "left" : "if (f == null)",
      "right" : "if (f == null)",
      "info" : "IfStatement[15023-15171]:IfStatement[15074-15222]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15038-15171]:Block[15089-15222]"
    }, {
      "left" : "delegate.nextToken();",
      "right" : "delegate.nextToken();",
      "info" : "ExpressionStatement[15060-15081]:ExpressionStatement[15111-15132]"
    }, {
      "left" : "delegate.skipChildren();",
      "right" : "delegate.skipChildren();",
      "info" : "ExpressionStatement[15102-15126]:ExpressionStatement[15153-15177]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[15147-15153]:BreakStatement[15198-15204]"
    }, {
      "left" : "f = f.includeProperty(name);",
      "right" : "f = f.includeProperty(name);",
      "info" : "ExpressionStatement[15188-15216]:ExpressionStatement[15239-15267]"
    }, {
      "left" : "if (f == null)",
      "right" : "if (f == null)",
      "info" : "IfStatement[15233-15381]:IfStatement[15284-15432]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15248-15381]:Block[15299-15432]"
    }, {
      "left" : "delegate.nextToken();",
      "right" : "delegate.nextToken();",
      "info" : "ExpressionStatement[15270-15291]:ExpressionStatement[15321-15342]"
    }, {
      "left" : "delegate.skipChildren();",
      "right" : "delegate.skipChildren();",
      "info" : "ExpressionStatement[15312-15336]:ExpressionStatement[15363-15387]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[15357-15363]:BreakStatement[15408-15414]"
    }, {
      "left" : "_itemFilter = f;",
      "right" : "_itemFilter = f;",
      "info" : "ExpressionStatement[15398-15414]:ExpressionStatement[15449-15465]"
    }, {
      "left" : "if (f == TokenFilter.INCLUDE_ALL)",
      "right" : "if (f == TokenFilter.INCLUDE_ALL)",
      "info" : "IfStatement[15431-15595]:IfStatement[15482-15646]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15465-15595]:Block[15516-15646]"
    }, {
      "left" : "if (_includePath)",
      "right" : "if (_includePath)",
      "info" : "IfStatement[15487-15577]:IfStatement[15538-15628]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15505-15577]:Block[15556-15628]"
    }, {
      "left" : "return (_currToken = t);",
      "right" : "return (_currToken = t);",
      "info" : "ReturnStatement[15531-15555]:ReturnStatement[15582-15606]"
    }, {
      "left" : "if (_includePath)",
      "right" : "if (_includePath)",
      "info" : "IfStatement[15612-15845]:IfStatement[15663-15896]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15630-15845]:Block[15681-15896]"
    }, {
      "left" : "t = _nextTokenWithBuffering(_headContext);",
      "right" : "t = _nextTokenWithBuffering(_headContext);",
      "info" : "ExpressionStatement[15652-15694]:ExpressionStatement[15703-15745]"
    }, {
      "left" : "if (t != null)",
      "right" : "if (t != null)",
      "info" : "IfStatement[15715-15827]:IfStatement[15766-15878]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15730-15827]:Block[15781-15878]"
    }, {
      "left" : "_currToken = t;",
      "right" : "_currToken = t;",
      "info" : "ExpressionStatement[15756-15771]:ExpressionStatement[15807-15822]"
    }, {
      "left" : "return t;",
      "right" : "return t;",
      "info" : "ReturnStatement[15796-15805]:ReturnStatement[15847-15856]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[15862-15868]:BreakStatement[15913-15919]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[15892-15900]:SwitchCase[15943-15951]"
    }, {
      "left" : "f = _itemFilter;",
      "right" : "f = _itemFilter;",
      "info" : "ExpressionStatement[15929-15945]:ExpressionStatement[15980-15996]"
    }, {
      "left" : "if (f == TokenFilter.INCLUDE_ALL)",
      "right" : "if (f == TokenFilter.INCLUDE_ALL)",
      "info" : "IfStatement[15958-16048]:IfStatement[16009-16099]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15992-16048]:Block[16043-16099]"
    }, {
      "left" : "return (_currToken = t);",
      "right" : "return (_currToken = t);",
      "info" : "ReturnStatement[16010-16034]:ReturnStatement[16061-16085]"
    }, {
      "left" : "if (f != null)",
      "right" : "if (f != null)",
      "info" : "IfStatement[16061-16325]:IfStatement[16112-16376]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16076-16325]:Block[16127-16376]"
    }, {
      "left" : "f = _headContext.checkValue(f);",
      "right" : "f = _headContext.checkValue(f);",
      "info" : "ExpressionStatement[16094-16125]:ExpressionStatement[16145-16176]"
    }, {
      "left" : "if ((f == TokenFilter.INCLUDE_ALL)\n                        || ((f != null) && f.includeValue(delegate)))",
      "right" : "if ((f == TokenFilter.INCLUDE_ALL)\n                        || ((f != null) && f.includeValue(delegate)))",
      "info" : "IfStatement[16142-16311]:IfStatement[16193-16362]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16247-16311]:Block[16298-16362]"
    }, {
      "left" : "return (_currToken = t);",
      "right" : "return (_currToken = t);",
      "info" : "ReturnStatement[16269-16293]:ReturnStatement[16320-16344]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[16413-16419]:BreakStatement[16464-16470]"
    }, {
      "left" : "return _nextToken2();",
      "right" : "return _nextToken2();",
      "info" : "ReturnStatement[16508-16529]:ReturnStatement[16559-16580]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16856-22721]:Block[16907-22772]"
    }, {
      "left" : "main_loop:\n        while (true) {\n            JsonToken t = delegate.nextToken();\n            if (t == null) { // is this even legal?\n                _currToken = t;\n                return t;\n            }\n            TokenFilter f;\n\n            switch (t.id()) {\n            case ID_START_ARRAY:\n                f = _itemFilter;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildArrayContext(f, true);\n                    return (_currToken = t);\n                }\n                if (f == null) { // does this occur?\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                // Otherwise still iffy, need to check\n                f = _headContext.checkValue(f);\n                if (f == null) {\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                if (f != TokenFilter.INCLUDE_ALL) {\n                    f = f.filterStartArray();\n                }\n                _itemFilter = f;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildArrayContext(f, true);\n                    return (_currToken = t);\n                }\n                _headContext = _headContext.createChildArrayContext(f, false);\n                // but if we didn't figure it out yet, need to buffer possible events\n                if (_includePath) {\n                    t = _nextTokenWithBuffering(_headContext);\n                    if (t != null) {\n                        _currToken = t;\n                        return t;\n                    }\n                }\n                continue main_loop;\n\n            case ID_START_OBJECT:\n                f = _itemFilter;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildObjectContext(f, true);\n                    return (_currToken = t);\n                }\n                if (f == null) { // does this occur?\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                // Otherwise still iffy, need to check\n                f = _headContext.checkValue(f);\n                if (f == null) {\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                if (f != TokenFilter.INCLUDE_ALL) {\n                    f = f.filterStartObject();\n                }\n                _itemFilter = f;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildObjectContext(f, true);\n                    return (_currToken = t);\n                }\n                _headContext = _headContext.createChildObjectContext(f, false);\n                if (_includePath) {\n                    t = _nextTokenWithBuffering(_headContext);\n                    if (t != null) {\n                        _currToken = t;\n                        return t;\n                    }\n                }\n                continue main_loop;\n\n            case ID_END_ARRAY:\n            case ID_END_OBJECT:\n                {\n                    boolean returnEnd = _headContext.isStartHandled();\n                    f = _headContext.getFilter();\n                    if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {\n                        f.filterFinishArray();\n                    }\n                    _headContext = _headContext.getParent();\n                    _itemFilter = _headContext.getFilter();\n                    if (returnEnd) {\n                        return (_currToken = t);\n                    }\n                }\n                continue main_loop;\n\n            case ID_FIELD_NAME:\n                {\n                    final String name = delegate.getCurrentName();\n                    f = _headContext.setFieldName(name);\n                    if (f == TokenFilter.INCLUDE_ALL) {\n                        _itemFilter = f;\n                        return (_currToken = t);\n                    }\n                    if (f == null) { // filter out the value\n                        delegate.nextToken();\n                        delegate.skipChildren();\n                        continue main_loop;\n                    }\n                    f = f.includeProperty(name);\n                    if (f == null) { // filter out the value\n                        delegate.nextToken();\n                        delegate.skipChildren();\n                        continue main_loop;\n                    }\n                    _itemFilter = f;\n                    if (f == TokenFilter.INCLUDE_ALL) {\n                        if (_includePath) {\n                            return (_currToken = t);\n                        }\n//                        if (_includeImmediateParent) { ...\n                        continue main_loop;\n                    }\n                    if (_includePath) {\n                        t = _nextTokenWithBuffering(_headContext);\n                        if (t != null) {\n                            _currToken = t;\n                            return t;\n                        }\n                    }\n                }\n                continue main_loop;\n\n            default: // scalar value\n                f = _itemFilter;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    return (_currToken = t);\n                }\n                if (f != null) {\n                    f = _headContext.checkValue(f);\n                    if ((f == TokenFilter.INCLUDE_ALL)\n                            || ((f != null) && f.includeValue(delegate))) {\n                        return (_currToken = t);\n                    }\n                }\n                // Otherwise not included (leaves must be explicitly included)\n                break;\n            }\n        }",
      "right" : "main_loop:\n        while (true) {\n            JsonToken t = delegate.nextToken();\n            if (t == null) { // is this even legal?\n                _currToken = t;\n                return t;\n            }\n            TokenFilter f;\n\n            switch (t.id()) {\n            case ID_START_ARRAY:\n                f = _itemFilter;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildArrayContext(f, true);\n                    return (_currToken = t);\n                }\n                if (f == null) { // does this occur?\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                // Otherwise still iffy, need to check\n                f = _headContext.checkValue(f);\n                if (f == null) {\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                if (f != TokenFilter.INCLUDE_ALL) {\n                    f = f.filterStartArray();\n                }\n                _itemFilter = f;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildArrayContext(f, true);\n                    return (_currToken = t);\n                }\n                _headContext = _headContext.createChildArrayContext(f, false);\n                // but if we didn't figure it out yet, need to buffer possible events\n                if (_includePath) {\n                    t = _nextTokenWithBuffering(_headContext);\n                    if (t != null) {\n                        _currToken = t;\n                        return t;\n                    }\n                }\n                continue main_loop;\n\n            case ID_START_OBJECT:\n                f = _itemFilter;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildObjectContext(f, true);\n                    return (_currToken = t);\n                }\n                if (f == null) { // does this occur?\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                // Otherwise still iffy, need to check\n                f = _headContext.checkValue(f);\n                if (f == null) {\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                if (f != TokenFilter.INCLUDE_ALL) {\n                    f = f.filterStartObject();\n                }\n                _itemFilter = f;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildObjectContext(f, true);\n                    return (_currToken = t);\n                }\n                _headContext = _headContext.createChildObjectContext(f, false);\n                if (_includePath) {\n                    t = _nextTokenWithBuffering(_headContext);\n                    if (t != null) {\n                        _currToken = t;\n                        return t;\n                    }\n                }\n                continue main_loop;\n\n            case ID_END_ARRAY:\n            case ID_END_OBJECT:\n                {\n                    boolean returnEnd = _headContext.isStartHandled();\n                    f = _headContext.getFilter();\n                    if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {\n                        f.filterFinishArray();\n                    }\n                    _headContext = _headContext.getParent();\n                    _itemFilter = _headContext.getFilter();\n                    if (returnEnd) {\n                        return (_currToken = t);\n                    }\n                }\n                continue main_loop;\n\n            case ID_FIELD_NAME:\n                {\n                    final String name = delegate.getCurrentName();\n                    f = _headContext.setFieldName(name);\n                    if (f == TokenFilter.INCLUDE_ALL) {\n                        _itemFilter = f;\n                        return (_currToken = t);\n                    }\n                    if (f == null) { // filter out the value\n                        delegate.nextToken();\n                        delegate.skipChildren();\n                        continue main_loop;\n                    }\n                    f = f.includeProperty(name);\n                    if (f == null) { // filter out the value\n                        delegate.nextToken();\n                        delegate.skipChildren();\n                        continue main_loop;\n                    }\n                    _itemFilter = f;\n                    if (f == TokenFilter.INCLUDE_ALL) {\n                        if (_includePath) {\n                            return (_currToken = t);\n                        }\n//                        if (_includeImmediateParent) { ...\n                        continue main_loop;\n                    }\n                    if (_includePath) {\n                        t = _nextTokenWithBuffering(_headContext);\n                        if (t != null) {\n                            _currToken = t;\n                            return t;\n                        }\n                    }\n                }\n                continue main_loop;\n\n            default: // scalar value\n                f = _itemFilter;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    return (_currToken = t);\n                }\n                if (f != null) {\n                    f = _headContext.checkValue(f);\n                    if ((f == TokenFilter.INCLUDE_ALL)\n                            || ((f != null) && f.includeValue(delegate))) {\n                        return (_currToken = t);\n                    }\n                }\n                // Otherwise not included (leaves must be explicitly included)\n                break;\n            }\n        }",
      "info" : "LabeledStatement[16866-22715]:LabeledStatement[16917-22766]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[16885-22715]:WhileStatement[16936-22766]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16898-22715]:Block[16949-22766]"
    }, {
      "left" : "JsonToken t = delegate.nextToken();",
      "right" : "JsonToken t = delegate.nextToken();",
      "info" : "VariableDeclarationStatement[16912-16947]:VariableDeclarationStatement[16963-16998]"
    }, {
      "left" : "if (t == null)",
      "right" : "if (t == null)",
      "info" : "IfStatement[16960-17071]:IfStatement[17011-17122]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16975-17071]:Block[17026-17122]"
    }, {
      "left" : "_currToken = t;",
      "right" : "_currToken = t;",
      "info" : "ExpressionStatement[17016-17031]:ExpressionStatement[17067-17082]"
    }, {
      "left" : "return t;",
      "right" : "return t;",
      "info" : "ReturnStatement[17048-17057]:ReturnStatement[17099-17108]"
    }, {
      "left" : "TokenFilter f;",
      "right" : "TokenFilter f;",
      "info" : "VariableDeclarationStatement[17084-17098]:VariableDeclarationStatement[17135-17149]"
    }, {
      "left" : "switch (t.id()) {\n            case ID_START_ARRAY:\n                f = _itemFilter;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildArrayContext(f, true);\n                    return (_currToken = t);\n                }\n                if (f == null) { // does this occur?\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                // Otherwise still iffy, need to check\n                f = _headContext.checkValue(f);\n                if (f == null) {\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                if (f != TokenFilter.INCLUDE_ALL) {\n                    f = f.filterStartArray();\n                }\n                _itemFilter = f;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildArrayContext(f, true);\n                    return (_currToken = t);\n                }\n                _headContext = _headContext.createChildArrayContext(f, false);\n                // but if we didn't figure it out yet, need to buffer possible events\n                if (_includePath) {\n                    t = _nextTokenWithBuffering(_headContext);\n                    if (t != null) {\n                        _currToken = t;\n                        return t;\n                    }\n                }\n                continue main_loop;\n\n            case ID_START_OBJECT:\n                f = _itemFilter;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildObjectContext(f, true);\n                    return (_currToken = t);\n                }\n                if (f == null) { // does this occur?\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                // Otherwise still iffy, need to check\n                f = _headContext.checkValue(f);\n                if (f == null) {\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                if (f != TokenFilter.INCLUDE_ALL) {\n                    f = f.filterStartObject();\n                }\n                _itemFilter = f;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildObjectContext(f, true);\n                    return (_currToken = t);\n                }\n                _headContext = _headContext.createChildObjectContext(f, false);\n                if (_includePath) {\n                    t = _nextTokenWithBuffering(_headContext);\n                    if (t != null) {\n                        _currToken = t;\n                        return t;\n                    }\n                }\n                continue main_loop;\n\n            case ID_END_ARRAY:\n            case ID_END_OBJECT:\n                {\n                    boolean returnEnd = _headContext.isStartHandled();\n                    f = _headContext.getFilter();\n                    if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {\n                        f.filterFinishArray();\n                    }\n                    _headContext = _headContext.getParent();\n                    _itemFilter = _headContext.getFilter();\n                    if (returnEnd) {\n                        return (_currToken = t);\n                    }\n                }\n                continue main_loop;\n\n            case ID_FIELD_NAME:\n                {\n                    final String name = delegate.getCurrentName();\n                    f = _headContext.setFieldName(name);\n                    if (f == TokenFilter.INCLUDE_ALL) {\n                        _itemFilter = f;\n                        return (_currToken = t);\n                    }\n                    if (f == null) { // filter out the value\n                        delegate.nextToken();\n                        delegate.skipChildren();\n                        continue main_loop;\n                    }\n                    f = f.includeProperty(name);\n                    if (f == null) { // filter out the value\n                        delegate.nextToken();\n                        delegate.skipChildren();\n                        continue main_loop;\n                    }\n                    _itemFilter = f;\n                    if (f == TokenFilter.INCLUDE_ALL) {\n                        if (_includePath) {\n                            return (_currToken = t);\n                        }\n//                        if (_includeImmediateParent) { ...\n                        continue main_loop;\n                    }\n                    if (_includePath) {\n                        t = _nextTokenWithBuffering(_headContext);\n                        if (t != null) {\n                            _currToken = t;\n                            return t;\n                        }\n                    }\n                }\n                continue main_loop;\n\n            default: // scalar value\n                f = _itemFilter;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    return (_currToken = t);\n                }\n                if (f != null) {\n                    f = _headContext.checkValue(f);\n                    if ((f == TokenFilter.INCLUDE_ALL)\n                            || ((f != null) && f.includeValue(delegate))) {\n                        return (_currToken = t);\n                    }\n                }\n                // Otherwise not included (leaves must be explicitly included)\n                break;\n            }",
      "right" : "switch (t.id()) {\n            case ID_START_ARRAY:\n                f = _itemFilter;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildArrayContext(f, true);\n                    return (_currToken = t);\n                }\n                if (f == null) { // does this occur?\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                // Otherwise still iffy, need to check\n                f = _headContext.checkValue(f);\n                if (f == null) {\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                if (f != TokenFilter.INCLUDE_ALL) {\n                    f = f.filterStartArray();\n                }\n                _itemFilter = f;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildArrayContext(f, true);\n                    return (_currToken = t);\n                }\n                _headContext = _headContext.createChildArrayContext(f, false);\n                // but if we didn't figure it out yet, need to buffer possible events\n                if (_includePath) {\n                    t = _nextTokenWithBuffering(_headContext);\n                    if (t != null) {\n                        _currToken = t;\n                        return t;\n                    }\n                }\n                continue main_loop;\n\n            case ID_START_OBJECT:\n                f = _itemFilter;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildObjectContext(f, true);\n                    return (_currToken = t);\n                }\n                if (f == null) { // does this occur?\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                // Otherwise still iffy, need to check\n                f = _headContext.checkValue(f);\n                if (f == null) {\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                if (f != TokenFilter.INCLUDE_ALL) {\n                    f = f.filterStartObject();\n                }\n                _itemFilter = f;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildObjectContext(f, true);\n                    return (_currToken = t);\n                }\n                _headContext = _headContext.createChildObjectContext(f, false);\n                if (_includePath) {\n                    t = _nextTokenWithBuffering(_headContext);\n                    if (t != null) {\n                        _currToken = t;\n                        return t;\n                    }\n                }\n                continue main_loop;\n\n            case ID_END_ARRAY:\n            case ID_END_OBJECT:\n                {\n                    boolean returnEnd = _headContext.isStartHandled();\n                    f = _headContext.getFilter();\n                    if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {\n                        f.filterFinishArray();\n                    }\n                    _headContext = _headContext.getParent();\n                    _itemFilter = _headContext.getFilter();\n                    if (returnEnd) {\n                        return (_currToken = t);\n                    }\n                }\n                continue main_loop;\n\n            case ID_FIELD_NAME:\n                {\n                    final String name = delegate.getCurrentName();\n                    f = _headContext.setFieldName(name);\n                    if (f == TokenFilter.INCLUDE_ALL) {\n                        _itemFilter = f;\n                        return (_currToken = t);\n                    }\n                    if (f == null) { // filter out the value\n                        delegate.nextToken();\n                        delegate.skipChildren();\n                        continue main_loop;\n                    }\n                    f = f.includeProperty(name);\n                    if (f == null) { // filter out the value\n                        delegate.nextToken();\n                        delegate.skipChildren();\n                        continue main_loop;\n                    }\n                    _itemFilter = f;\n                    if (f == TokenFilter.INCLUDE_ALL) {\n                        if (_includePath) {\n                            return (_currToken = t);\n                        }\n//                        if (_includeImmediateParent) { ...\n                        continue main_loop;\n                    }\n                    if (_includePath) {\n                        t = _nextTokenWithBuffering(_headContext);\n                        if (t != null) {\n                            _currToken = t;\n                            return t;\n                        }\n                    }\n                }\n                continue main_loop;\n\n            default: // scalar value\n                f = _itemFilter;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    return (_currToken = t);\n                }\n                if (f != null) {\n                    f = _headContext.checkValue(f);\n                    if ((f == TokenFilter.INCLUDE_ALL)\n                            || ((f != null) && f.includeValue(delegate))) {\n                        return (_currToken = t);\n                    }\n                }\n                // Otherwise not included (leaves must be explicitly included)\n                break;\n            }",
      "info" : "SwitchStatement[17112-22705]:SwitchStatement[17163-22756]"
    }, {
      "left" : "case ID_START_ARRAY:",
      "right" : "case ID_START_ARRAY:",
      "info" : "SwitchCase[17142-17162]:SwitchCase[17193-17213]"
    }, {
      "left" : "f = _itemFilter;",
      "right" : "f = _itemFilter;",
      "info" : "ExpressionStatement[17179-17195]:ExpressionStatement[17230-17246]"
    }, {
      "left" : "if (f == TokenFilter.INCLUDE_ALL)",
      "right" : "if (f == TokenFilter.INCLUDE_ALL)",
      "info" : "IfStatement[17212-17392]:IfStatement[17263-17443]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17246-17392]:Block[17297-17443]"
    }, {
      "left" : "_headContext = _headContext.createChildArrayContext(f, true);",
      "right" : "_headContext = _headContext.createChildArrayContext(f, true);",
      "info" : "ExpressionStatement[17268-17329]:ExpressionStatement[17319-17380]"
    }, {
      "left" : "return (_currToken = t);",
      "right" : "return (_currToken = t);",
      "info" : "ReturnStatement[17350-17374]:ReturnStatement[17401-17425]"
    }, {
      "left" : "if (f == null)",
      "right" : "if (f == null)",
      "info" : "IfStatement[17409-17548]:IfStatement[17460-17599]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17424-17548]:Block[17475-17599]"
    }, {
      "left" : "delegate.skipChildren();",
      "right" : "delegate.skipChildren();",
      "info" : "ExpressionStatement[17466-17490]:ExpressionStatement[17517-17541]"
    }, {
      "left" : "continue main_loop;",
      "right" : "continue main_loop;",
      "info" : "ContinueStatement[17511-17530]:ContinueStatement[17562-17581]"
    }, {
      "left" : "f = _headContext.checkValue(f);",
      "right" : "f = _headContext.checkValue(f);",
      "info" : "ExpressionStatement[17620-17651]:ExpressionStatement[17671-17702]"
    }, {
      "left" : "if (f == null)",
      "right" : "if (f == null)",
      "info" : "IfStatement[17668-17787]:IfStatement[17719-17838]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17683-17787]:Block[17734-17838]"
    }, {
      "left" : "delegate.skipChildren();",
      "right" : "delegate.skipChildren();",
      "info" : "ExpressionStatement[17705-17729]:ExpressionStatement[17756-17780]"
    }, {
      "left" : "continue main_loop;",
      "right" : "continue main_loop;",
      "info" : "ContinueStatement[17750-17769]:ContinueStatement[17801-17820]"
    }, {
      "left" : "if (f != TokenFilter.INCLUDE_ALL)",
      "right" : "if (f != TokenFilter.INCLUDE_ALL)",
      "info" : "IfStatement[17804-17903]:IfStatement[17855-17954]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17838-17903]:Block[17889-17954]"
    }, {
      "left" : "f = f.filterStartArray();",
      "right" : "f = f.filterStartArray();",
      "info" : "ExpressionStatement[17860-17885]:ExpressionStatement[17911-17936]"
    }, {
      "left" : "_itemFilter = f;",
      "right" : "_itemFilter = f;",
      "info" : "ExpressionStatement[17920-17936]:ExpressionStatement[17971-17987]"
    }, {
      "left" : "if (f == TokenFilter.INCLUDE_ALL)",
      "right" : "if (f == TokenFilter.INCLUDE_ALL)",
      "info" : "IfStatement[17953-18133]:IfStatement[18004-18184]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17987-18133]:Block[18038-18184]"
    }, {
      "left" : "_headContext = _headContext.createChildArrayContext(f, true);",
      "right" : "_headContext = _headContext.createChildArrayContext(f, true);",
      "info" : "ExpressionStatement[18009-18070]:ExpressionStatement[18060-18121]"
    }, {
      "left" : "return (_currToken = t);",
      "right" : "return (_currToken = t);",
      "info" : "ReturnStatement[18091-18115]:ReturnStatement[18142-18166]"
    }, {
      "left" : "_headContext = _headContext.createChildArrayContext(f, false);",
      "right" : "_headContext = _headContext.createChildArrayContext(f, false);",
      "info" : "ExpressionStatement[18150-18212]:ExpressionStatement[18201-18263]"
    }, {
      "left" : "if (_includePath)",
      "right" : "if (_includePath)",
      "info" : "IfStatement[18315-18548]:IfStatement[18366-18599]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18333-18548]:Block[18384-18599]"
    }, {
      "left" : "t = _nextTokenWithBuffering(_headContext);",
      "right" : "t = _nextTokenWithBuffering(_headContext);",
      "info" : "ExpressionStatement[18355-18397]:ExpressionStatement[18406-18448]"
    }, {
      "left" : "if (t != null)",
      "right" : "if (t != null)",
      "info" : "IfStatement[18418-18530]:IfStatement[18469-18581]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18433-18530]:Block[18484-18581]"
    }, {
      "left" : "_currToken = t;",
      "right" : "_currToken = t;",
      "info" : "ExpressionStatement[18459-18474]:ExpressionStatement[18510-18525]"
    }, {
      "left" : "return t;",
      "right" : "return t;",
      "info" : "ReturnStatement[18499-18508]:ReturnStatement[18550-18559]"
    }, {
      "left" : "continue main_loop;",
      "right" : "continue main_loop;",
      "info" : "ContinueStatement[18565-18584]:ContinueStatement[18616-18635]"
    }, {
      "left" : "case ID_START_OBJECT:",
      "right" : "case ID_START_OBJECT:",
      "info" : "SwitchCase[18598-18619]:SwitchCase[18649-18670]"
    }, {
      "left" : "f = _itemFilter;",
      "right" : "f = _itemFilter;",
      "info" : "ExpressionStatement[18636-18652]:ExpressionStatement[18687-18703]"
    }, {
      "left" : "if (f == TokenFilter.INCLUDE_ALL)",
      "right" : "if (f == TokenFilter.INCLUDE_ALL)",
      "info" : "IfStatement[18669-18850]:IfStatement[18720-18901]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18703-18850]:Block[18754-18901]"
    }, {
      "left" : "_headContext = _headContext.createChildObjectContext(f, true);",
      "right" : "_headContext = _headContext.createChildObjectContext(f, true);",
      "info" : "ExpressionStatement[18725-18787]:ExpressionStatement[18776-18838]"
    }, {
      "left" : "return (_currToken = t);",
      "right" : "return (_currToken = t);",
      "info" : "ReturnStatement[18808-18832]:ReturnStatement[18859-18883]"
    }, {
      "left" : "if (f == null)",
      "right" : "if (f == null)",
      "info" : "IfStatement[18867-19006]:IfStatement[18918-19057]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18882-19006]:Block[18933-19057]"
    }, {
      "left" : "delegate.skipChildren();",
      "right" : "delegate.skipChildren();",
      "info" : "ExpressionStatement[18924-18948]:ExpressionStatement[18975-18999]"
    }, {
      "left" : "continue main_loop;",
      "right" : "continue main_loop;",
      "info" : "ContinueStatement[18969-18988]:ContinueStatement[19020-19039]"
    }, {
      "left" : "f = _headContext.checkValue(f);",
      "right" : "f = _headContext.checkValue(f);",
      "info" : "ExpressionStatement[19078-19109]:ExpressionStatement[19129-19160]"
    }, {
      "left" : "if (f == null)",
      "right" : "if (f == null)",
      "info" : "IfStatement[19126-19245]:IfStatement[19177-19296]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19141-19245]:Block[19192-19296]"
    }, {
      "left" : "delegate.skipChildren();",
      "right" : "delegate.skipChildren();",
      "info" : "ExpressionStatement[19163-19187]:ExpressionStatement[19214-19238]"
    }, {
      "left" : "continue main_loop;",
      "right" : "continue main_loop;",
      "info" : "ContinueStatement[19208-19227]:ContinueStatement[19259-19278]"
    }, {
      "left" : "if (f != TokenFilter.INCLUDE_ALL)",
      "right" : "if (f != TokenFilter.INCLUDE_ALL)",
      "info" : "IfStatement[19262-19362]:IfStatement[19313-19413]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19296-19362]:Block[19347-19413]"
    }, {
      "left" : "f = f.filterStartObject();",
      "right" : "f = f.filterStartObject();",
      "info" : "ExpressionStatement[19318-19344]:ExpressionStatement[19369-19395]"
    }, {
      "left" : "_itemFilter = f;",
      "right" : "_itemFilter = f;",
      "info" : "ExpressionStatement[19379-19395]:ExpressionStatement[19430-19446]"
    }, {
      "left" : "if (f == TokenFilter.INCLUDE_ALL)",
      "right" : "if (f == TokenFilter.INCLUDE_ALL)",
      "info" : "IfStatement[19412-19593]:IfStatement[19463-19644]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19446-19593]:Block[19497-19644]"
    }, {
      "left" : "_headContext = _headContext.createChildObjectContext(f, true);",
      "right" : "_headContext = _headContext.createChildObjectContext(f, true);",
      "info" : "ExpressionStatement[19468-19530]:ExpressionStatement[19519-19581]"
    }, {
      "left" : "return (_currToken = t);",
      "right" : "return (_currToken = t);",
      "info" : "ReturnStatement[19551-19575]:ReturnStatement[19602-19626]"
    }, {
      "left" : "_headContext = _headContext.createChildObjectContext(f, false);",
      "right" : "_headContext = _headContext.createChildObjectContext(f, false);",
      "info" : "ExpressionStatement[19610-19673]:ExpressionStatement[19661-19724]"
    }, {
      "left" : "if (_includePath)",
      "right" : "if (_includePath)",
      "info" : "IfStatement[19690-19923]:IfStatement[19741-19974]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19708-19923]:Block[19759-19974]"
    }, {
      "left" : "t = _nextTokenWithBuffering(_headContext);",
      "right" : "t = _nextTokenWithBuffering(_headContext);",
      "info" : "ExpressionStatement[19730-19772]:ExpressionStatement[19781-19823]"
    }, {
      "left" : "if (t != null)",
      "right" : "if (t != null)",
      "info" : "IfStatement[19793-19905]:IfStatement[19844-19956]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19808-19905]:Block[19859-19956]"
    }, {
      "left" : "_currToken = t;",
      "right" : "_currToken = t;",
      "info" : "ExpressionStatement[19834-19849]:ExpressionStatement[19885-19900]"
    }, {
      "left" : "return t;",
      "right" : "return t;",
      "info" : "ReturnStatement[19874-19883]:ReturnStatement[19925-19934]"
    }, {
      "left" : "continue main_loop;",
      "right" : "continue main_loop;",
      "info" : "ContinueStatement[19940-19959]:ContinueStatement[19991-20010]"
    }, {
      "left" : "case ID_END_ARRAY:",
      "right" : "case ID_END_ARRAY:",
      "info" : "SwitchCase[19973-19991]:SwitchCase[20024-20042]"
    }, {
      "left" : "case ID_END_OBJECT:",
      "right" : "case ID_END_OBJECT:",
      "info" : "SwitchCase[20004-20023]:SwitchCase[20055-20074]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20040-20551]:Block[20091-20602]"
    }, {
      "left" : "boolean returnEnd = _headContext.isStartHandled();",
      "right" : "boolean returnEnd = _headContext.isStartHandled();",
      "info" : "VariableDeclarationStatement[20062-20112]:VariableDeclarationStatement[20113-20163]"
    }, {
      "left" : "f = _headContext.getFilter();",
      "right" : "f = _headContext.getFilter();",
      "info" : "ExpressionStatement[20133-20162]:ExpressionStatement[20184-20213]"
    }, {
      "left" : "if ((f != null) && (f != TokenFilter.INCLUDE_ALL))",
      "right" : "if ((f != null) && (f != TokenFilter.INCLUDE_ALL))",
      "info" : "IfStatement[20183-20304]:IfStatement[20234-20355]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20234-20304]:Block[20285-20355]"
    }, {
      "left" : "f.filterFinishArray();",
      "right" : "f.filterFinishArray();",
      "info" : "ExpressionStatement[20260-20282]:ExpressionStatement[20311-20333]"
    }, {
      "left" : "_headContext = _headContext.getParent();",
      "right" : "_headContext = _headContext.getParent();",
      "info" : "ExpressionStatement[20325-20365]:ExpressionStatement[20376-20416]"
    }, {
      "left" : "_itemFilter = _headContext.getFilter();",
      "right" : "_itemFilter = _headContext.getFilter();",
      "info" : "ExpressionStatement[20386-20425]:ExpressionStatement[20437-20476]"
    }, {
      "left" : "if (returnEnd)",
      "right" : "if (returnEnd)",
      "info" : "IfStatement[20446-20533]:IfStatement[20497-20584]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20461-20533]:Block[20512-20584]"
    }, {
      "left" : "return (_currToken = t);",
      "right" : "return (_currToken = t);",
      "info" : "ReturnStatement[20487-20511]:ReturnStatement[20538-20562]"
    }, {
      "left" : "continue main_loop;",
      "right" : "continue main_loop;",
      "info" : "ContinueStatement[20568-20587]:ContinueStatement[20619-20638]"
    }, {
      "left" : "case ID_FIELD_NAME:",
      "right" : "case ID_FIELD_NAME:",
      "info" : "SwitchCase[20601-20620]:SwitchCase[20652-20671]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20637-22062]:Block[20688-22113]"
    }, {
      "left" : "final String name = delegate.getCurrentName();",
      "right" : "final String name = delegate.getCurrentName();",
      "info" : "VariableDeclarationStatement[20659-20705]:VariableDeclarationStatement[20710-20756]"
    }, {
      "left" : "f = _headContext.setFieldName(name);",
      "right" : "f = _headContext.setFieldName(name);",
      "info" : "ExpressionStatement[20726-20762]:ExpressionStatement[20777-20813]"
    }, {
      "left" : "if (f == TokenFilter.INCLUDE_ALL)",
      "right" : "if (f == TokenFilter.INCLUDE_ALL)",
      "info" : "IfStatement[20783-20930]:IfStatement[20834-20981]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20817-20930]:Block[20868-20981]"
    }, {
      "left" : "_itemFilter = f;",
      "right" : "_itemFilter = f;",
      "info" : "ExpressionStatement[20843-20859]:ExpressionStatement[20894-20910]"
    }, {
      "left" : "return (_currToken = t);",
      "right" : "return (_currToken = t);",
      "info" : "ReturnStatement[20884-20908]:ReturnStatement[20935-20959]"
    }, {
      "left" : "if (f == null)",
      "right" : "if (f == null)",
      "info" : "IfStatement[20951-21152]:IfStatement[21002-21203]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20966-21152]:Block[21017-21203]"
    }, {
      "left" : "delegate.nextToken();",
      "right" : "delegate.nextToken();",
      "info" : "ExpressionStatement[21016-21037]:ExpressionStatement[21067-21088]"
    }, {
      "left" : "delegate.skipChildren();",
      "right" : "delegate.skipChildren();",
      "info" : "ExpressionStatement[21062-21086]:ExpressionStatement[21113-21137]"
    }, {
      "left" : "continue main_loop;",
      "right" : "continue main_loop;",
      "info" : "ContinueStatement[21111-21130]:ContinueStatement[21162-21181]"
    }, {
      "left" : "f = f.includeProperty(name);",
      "right" : "f = f.includeProperty(name);",
      "info" : "ExpressionStatement[21173-21201]:ExpressionStatement[21224-21252]"
    }, {
      "left" : "if (f == null)",
      "right" : "if (f == null)",
      "info" : "IfStatement[21222-21423]:IfStatement[21273-21474]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21237-21423]:Block[21288-21474]"
    }, {
      "left" : "delegate.nextToken();",
      "right" : "delegate.nextToken();",
      "info" : "ExpressionStatement[21287-21308]:ExpressionStatement[21338-21359]"
    }, {
      "left" : "delegate.skipChildren();",
      "right" : "delegate.skipChildren();",
      "info" : "ExpressionStatement[21333-21357]:ExpressionStatement[21384-21408]"
    }, {
      "left" : "continue main_loop;",
      "right" : "continue main_loop;",
      "info" : "ContinueStatement[21382-21401]:ContinueStatement[21433-21452]"
    }, {
      "left" : "_itemFilter = f;",
      "right" : "_itemFilter = f;",
      "info" : "ExpressionStatement[21444-21460]:ExpressionStatement[21495-21511]"
    }, {
      "left" : "if (f == TokenFilter.INCLUDE_ALL)",
      "right" : "if (f == TokenFilter.INCLUDE_ALL)",
      "info" : "IfStatement[21481-21766]:IfStatement[21532-21817]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21515-21766]:Block[21566-21817]"
    }, {
      "left" : "if (_includePath)",
      "right" : "if (_includePath)",
      "info" : "IfStatement[21541-21639]:IfStatement[21592-21690]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21559-21639]:Block[21610-21690]"
    }, {
      "left" : "return (_currToken = t);",
      "right" : "return (_currToken = t);",
      "info" : "ReturnStatement[21589-21613]:ReturnStatement[21640-21664]"
    }, {
      "left" : "continue main_loop;",
      "right" : "continue main_loop;",
      "info" : "ContinueStatement[21725-21744]:ContinueStatement[21776-21795]"
    }, {
      "left" : "if (_includePath)",
      "right" : "if (_includePath)",
      "info" : "IfStatement[21787-22044]:IfStatement[21838-22095]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21805-22044]:Block[21856-22095]"
    }, {
      "left" : "t = _nextTokenWithBuffering(_headContext);",
      "right" : "t = _nextTokenWithBuffering(_headContext);",
      "info" : "ExpressionStatement[21831-21873]:ExpressionStatement[21882-21924]"
    }, {
      "left" : "if (t != null)",
      "right" : "if (t != null)",
      "info" : "IfStatement[21898-22022]:IfStatement[21949-22073]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21913-22022]:Block[21964-22073]"
    }, {
      "left" : "_currToken = t;",
      "right" : "_currToken = t;",
      "info" : "ExpressionStatement[21943-21958]:ExpressionStatement[21994-22009]"
    }, {
      "left" : "return t;",
      "right" : "return t;",
      "info" : "ReturnStatement[21987-21996]:ReturnStatement[22038-22047]"
    }, {
      "left" : "continue main_loop;",
      "right" : "continue main_loop;",
      "info" : "ContinueStatement[22079-22098]:ContinueStatement[22130-22149]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[22112-22120]:SwitchCase[22163-22171]"
    }, {
      "left" : "f = _itemFilter;",
      "right" : "f = _itemFilter;",
      "info" : "ExpressionStatement[22153-22169]:ExpressionStatement[22204-22220]"
    }, {
      "left" : "if (f == TokenFilter.INCLUDE_ALL)",
      "right" : "if (f == TokenFilter.INCLUDE_ALL)",
      "info" : "IfStatement[22186-22284]:IfStatement[22237-22335]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22220-22284]:Block[22271-22335]"
    }, {
      "left" : "return (_currToken = t);",
      "right" : "return (_currToken = t);",
      "info" : "ReturnStatement[22242-22266]:ReturnStatement[22293-22317]"
    }, {
      "left" : "if (f != null)",
      "right" : "if (f != null)",
      "info" : "IfStatement[22301-22589]:IfStatement[22352-22640]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22316-22589]:Block[22367-22640]"
    }, {
      "left" : "f = _headContext.checkValue(f);",
      "right" : "f = _headContext.checkValue(f);",
      "info" : "ExpressionStatement[22338-22369]:ExpressionStatement[22389-22420]"
    }, {
      "left" : "if ((f == TokenFilter.INCLUDE_ALL)\n                            || ((f != null) && f.includeValue(delegate)))",
      "right" : "if ((f == TokenFilter.INCLUDE_ALL)\n                            || ((f != null) && f.includeValue(delegate)))",
      "info" : "IfStatement[22390-22571]:IfStatement[22441-22622]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22499-22571]:Block[22550-22622]"
    }, {
      "left" : "return (_currToken = t);",
      "right" : "return (_currToken = t);",
      "info" : "ReturnStatement[22525-22549]:ReturnStatement[22576-22600]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[22685-22691]:BreakStatement[22736-22742]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22930-27944]:Block[22981-27995]"
    }, {
      "left" : "main_loop:\n        while (true) {\n            JsonToken t = delegate.nextToken();\n            if (t == null) { // is this even legal?\n                return t;\n            }\n            TokenFilter f;\n\n            // One simplification here: we know for a fact that the item filter is\n            // neither null nor 'include all', for most cases; the only exception\n            // being FIELD_NAME handling\n\n            switch (t.id()) {\n            case ID_START_ARRAY:\n                f = _headContext.checkValue(_itemFilter);\n                if (f == null) {\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                if (f != TokenFilter.INCLUDE_ALL) {\n                    f = f.filterStartArray();\n                }\n                _itemFilter = f;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildArrayContext(f, true);\n                    return _nextBuffered(buffRoot);\n                }\n                _headContext = _headContext.createChildArrayContext(f, false);\n                continue main_loop;\n\n            case ID_START_OBJECT:\n                f = _itemFilter;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildObjectContext(f, true);\n                    return t;\n                }\n                if (f == null) { // does this occur?\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                // Otherwise still iffy, need to check\n                f = _headContext.checkValue(f);\n                if (f == null) {\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                if (f != TokenFilter.INCLUDE_ALL) {\n                    f = f.filterStartObject();\n                }\n                _itemFilter = f;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildObjectContext(f, true);\n                    return _nextBuffered(buffRoot);\n                }\n                _headContext = _headContext.createChildObjectContext(f, false);\n                continue main_loop;\n\n            case ID_END_ARRAY:\n            case ID_END_OBJECT:\n                {\n                    // Unlike with other loops, here we know that content was NOT\n                    // included (won't get this far otherwise)\n                    f = _headContext.getFilter();\n                    if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {\n                        f.filterFinishArray();\n                    }\n                    boolean gotEnd = (_headContext == buffRoot);\n                    boolean returnEnd = gotEnd && _headContext.isStartHandled();\n\n                    _headContext = _headContext.getParent();\n                    _itemFilter = _headContext.getFilter();\n\n                    if (returnEnd) {\n                        return t;\n                    }\n                    // Hmmh. Do we need both checks, or should above suffice?\n                    if (gotEnd || (_headContext == buffRoot)) {\n                        return null;\n                    }\n                }\n                continue main_loop;\n\n            case ID_FIELD_NAME:\n                {\n                    final String name = delegate.getCurrentName();\n                    f = _headContext.setFieldName(name);\n                    if (f == TokenFilter.INCLUDE_ALL) {\n                        _itemFilter = f;\n                        return _nextBuffered(buffRoot);\n                    }\n                    if (f == null) { // filter out the value\n                        delegate.nextToken();\n                        delegate.skipChildren();\n                        continue main_loop;\n                    }\n                    f = f.includeProperty(name);\n                    if (f == null) { // filter out the value\n                        delegate.nextToken();\n                        delegate.skipChildren();\n                        continue main_loop;\n                    }\n                    _itemFilter = f;\n                    if (f == TokenFilter.INCLUDE_ALL) {\n                        return _nextBuffered(buffRoot);\n                    }\n                }\n                continue main_loop;\n\n            default: // scalar value\n                f = _itemFilter;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    return _nextBuffered(buffRoot);\n                }\n                if (f != null) {\n                    f = _headContext.checkValue(f);\n                    if ((f == TokenFilter.INCLUDE_ALL)\n                            || ((f != null) && f.includeValue(delegate))) {\n                        return _nextBuffered(buffRoot);\n                    }\n                }\n                // Otherwise not included (leaves must be explicitly included)\n                continue main_loop;\n            }\n        }",
      "right" : "main_loop:\n        while (true) {\n            JsonToken t = delegate.nextToken();\n            if (t == null) { // is this even legal?\n                return t;\n            }\n            TokenFilter f;\n\n            // One simplification here: we know for a fact that the item filter is\n            // neither null nor 'include all', for most cases; the only exception\n            // being FIELD_NAME handling\n\n            switch (t.id()) {\n            case ID_START_ARRAY:\n                f = _headContext.checkValue(_itemFilter);\n                if (f == null) {\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                if (f != TokenFilter.INCLUDE_ALL) {\n                    f = f.filterStartArray();\n                }\n                _itemFilter = f;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildArrayContext(f, true);\n                    return _nextBuffered(buffRoot);\n                }\n                _headContext = _headContext.createChildArrayContext(f, false);\n                continue main_loop;\n\n            case ID_START_OBJECT:\n                f = _itemFilter;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildObjectContext(f, true);\n                    return t;\n                }\n                if (f == null) { // does this occur?\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                // Otherwise still iffy, need to check\n                f = _headContext.checkValue(f);\n                if (f == null) {\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                if (f != TokenFilter.INCLUDE_ALL) {\n                    f = f.filterStartObject();\n                }\n                _itemFilter = f;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildObjectContext(f, true);\n                    return _nextBuffered(buffRoot);\n                }\n                _headContext = _headContext.createChildObjectContext(f, false);\n                continue main_loop;\n\n            case ID_END_ARRAY:\n            case ID_END_OBJECT:\n                {\n                    // Unlike with other loops, here we know that content was NOT\n                    // included (won't get this far otherwise)\n                    f = _headContext.getFilter();\n                    if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {\n                        f.filterFinishArray();\n                    }\n                    boolean gotEnd = (_headContext == buffRoot);\n                    boolean returnEnd = gotEnd && _headContext.isStartHandled();\n\n                    _headContext = _headContext.getParent();\n                    _itemFilter = _headContext.getFilter();\n\n                    if (returnEnd) {\n                        return t;\n                    }\n                    // Hmmh. Do we need both checks, or should above suffice?\n                    if (gotEnd || (_headContext == buffRoot)) {\n                        return null;\n                    }\n                }\n                continue main_loop;\n\n            case ID_FIELD_NAME:\n                {\n                    final String name = delegate.getCurrentName();\n                    f = _headContext.setFieldName(name);\n                    if (f == TokenFilter.INCLUDE_ALL) {\n                        _itemFilter = f;\n                        return _nextBuffered(buffRoot);\n                    }\n                    if (f == null) { // filter out the value\n                        delegate.nextToken();\n                        delegate.skipChildren();\n                        continue main_loop;\n                    }\n                    f = f.includeProperty(name);\n                    if (f == null) { // filter out the value\n                        delegate.nextToken();\n                        delegate.skipChildren();\n                        continue main_loop;\n                    }\n                    _itemFilter = f;\n                    if (f == TokenFilter.INCLUDE_ALL) {\n                        return _nextBuffered(buffRoot);\n                    }\n                }\n                continue main_loop;\n\n            default: // scalar value\n                f = _itemFilter;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    return _nextBuffered(buffRoot);\n                }\n                if (f != null) {\n                    f = _headContext.checkValue(f);\n                    if ((f == TokenFilter.INCLUDE_ALL)\n                            || ((f != null) && f.includeValue(delegate))) {\n                        return _nextBuffered(buffRoot);\n                    }\n                }\n                // Otherwise not included (leaves must be explicitly included)\n                continue main_loop;\n            }\n        }",
      "info" : "LabeledStatement[22940-27938]:LabeledStatement[22991-27989]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[22959-27938]:WhileStatement[23010-27989]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22972-27938]:Block[23023-27989]"
    }, {
      "left" : "JsonToken t = delegate.nextToken();",
      "right" : "JsonToken t = delegate.nextToken();",
      "info" : "VariableDeclarationStatement[22986-23021]:VariableDeclarationStatement[23037-23072]"
    }, {
      "left" : "if (t == null)",
      "right" : "if (t == null)",
      "info" : "IfStatement[23034-23113]:IfStatement[23085-23164]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23049-23113]:Block[23100-23164]"
    }, {
      "left" : "return t;",
      "right" : "return t;",
      "info" : "ReturnStatement[23090-23099]:ReturnStatement[23141-23150]"
    }, {
      "left" : "TokenFilter f;",
      "right" : "TokenFilter f;",
      "info" : "VariableDeclarationStatement[23126-23140]:VariableDeclarationStatement[23177-23191]"
    }, {
      "left" : "switch (t.id()) {\n            case ID_START_ARRAY:\n                f = _headContext.checkValue(_itemFilter);\n                if (f == null) {\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                if (f != TokenFilter.INCLUDE_ALL) {\n                    f = f.filterStartArray();\n                }\n                _itemFilter = f;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildArrayContext(f, true);\n                    return _nextBuffered(buffRoot);\n                }\n                _headContext = _headContext.createChildArrayContext(f, false);\n                continue main_loop;\n\n            case ID_START_OBJECT:\n                f = _itemFilter;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildObjectContext(f, true);\n                    return t;\n                }\n                if (f == null) { // does this occur?\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                // Otherwise still iffy, need to check\n                f = _headContext.checkValue(f);\n                if (f == null) {\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                if (f != TokenFilter.INCLUDE_ALL) {\n                    f = f.filterStartObject();\n                }\n                _itemFilter = f;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildObjectContext(f, true);\n                    return _nextBuffered(buffRoot);\n                }\n                _headContext = _headContext.createChildObjectContext(f, false);\n                continue main_loop;\n\n            case ID_END_ARRAY:\n            case ID_END_OBJECT:\n                {\n                    // Unlike with other loops, here we know that content was NOT\n                    // included (won't get this far otherwise)\n                    f = _headContext.getFilter();\n                    if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {\n                        f.filterFinishArray();\n                    }\n                    boolean gotEnd = (_headContext == buffRoot);\n                    boolean returnEnd = gotEnd && _headContext.isStartHandled();\n\n                    _headContext = _headContext.getParent();\n                    _itemFilter = _headContext.getFilter();\n\n                    if (returnEnd) {\n                        return t;\n                    }\n                    // Hmmh. Do we need both checks, or should above suffice?\n                    if (gotEnd || (_headContext == buffRoot)) {\n                        return null;\n                    }\n                }\n                continue main_loop;\n\n            case ID_FIELD_NAME:\n                {\n                    final String name = delegate.getCurrentName();\n                    f = _headContext.setFieldName(name);\n                    if (f == TokenFilter.INCLUDE_ALL) {\n                        _itemFilter = f;\n                        return _nextBuffered(buffRoot);\n                    }\n                    if (f == null) { // filter out the value\n                        delegate.nextToken();\n                        delegate.skipChildren();\n                        continue main_loop;\n                    }\n                    f = f.includeProperty(name);\n                    if (f == null) { // filter out the value\n                        delegate.nextToken();\n                        delegate.skipChildren();\n                        continue main_loop;\n                    }\n                    _itemFilter = f;\n                    if (f == TokenFilter.INCLUDE_ALL) {\n                        return _nextBuffered(buffRoot);\n                    }\n                }\n                continue main_loop;\n\n            default: // scalar value\n                f = _itemFilter;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    return _nextBuffered(buffRoot);\n                }\n                if (f != null) {\n                    f = _headContext.checkValue(f);\n                    if ((f == TokenFilter.INCLUDE_ALL)\n                            || ((f != null) && f.includeValue(delegate))) {\n                        return _nextBuffered(buffRoot);\n                    }\n                }\n                // Otherwise not included (leaves must be explicitly included)\n                continue main_loop;\n            }",
      "right" : "switch (t.id()) {\n            case ID_START_ARRAY:\n                f = _headContext.checkValue(_itemFilter);\n                if (f == null) {\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                if (f != TokenFilter.INCLUDE_ALL) {\n                    f = f.filterStartArray();\n                }\n                _itemFilter = f;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildArrayContext(f, true);\n                    return _nextBuffered(buffRoot);\n                }\n                _headContext = _headContext.createChildArrayContext(f, false);\n                continue main_loop;\n\n            case ID_START_OBJECT:\n                f = _itemFilter;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildObjectContext(f, true);\n                    return t;\n                }\n                if (f == null) { // does this occur?\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                // Otherwise still iffy, need to check\n                f = _headContext.checkValue(f);\n                if (f == null) {\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                if (f != TokenFilter.INCLUDE_ALL) {\n                    f = f.filterStartObject();\n                }\n                _itemFilter = f;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildObjectContext(f, true);\n                    return _nextBuffered(buffRoot);\n                }\n                _headContext = _headContext.createChildObjectContext(f, false);\n                continue main_loop;\n\n            case ID_END_ARRAY:\n            case ID_END_OBJECT:\n                {\n                    // Unlike with other loops, here we know that content was NOT\n                    // included (won't get this far otherwise)\n                    f = _headContext.getFilter();\n                    if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {\n                        f.filterFinishArray();\n                    }\n                    boolean gotEnd = (_headContext == buffRoot);\n                    boolean returnEnd = gotEnd && _headContext.isStartHandled();\n\n                    _headContext = _headContext.getParent();\n                    _itemFilter = _headContext.getFilter();\n\n                    if (returnEnd) {\n                        return t;\n                    }\n                    // Hmmh. Do we need both checks, or should above suffice?\n                    if (gotEnd || (_headContext == buffRoot)) {\n                        return null;\n                    }\n                }\n                continue main_loop;\n\n            case ID_FIELD_NAME:\n                {\n                    final String name = delegate.getCurrentName();\n                    f = _headContext.setFieldName(name);\n                    if (f == TokenFilter.INCLUDE_ALL) {\n                        _itemFilter = f;\n                        return _nextBuffered(buffRoot);\n                    }\n                    if (f == null) { // filter out the value\n                        delegate.nextToken();\n                        delegate.skipChildren();\n                        continue main_loop;\n                    }\n                    f = f.includeProperty(name);\n                    if (f == null) { // filter out the value\n                        delegate.nextToken();\n                        delegate.skipChildren();\n                        continue main_loop;\n                    }\n                    _itemFilter = f;\n                    if (f == TokenFilter.INCLUDE_ALL) {\n                        return _nextBuffered(buffRoot);\n                    }\n                }\n                continue main_loop;\n\n            default: // scalar value\n                f = _itemFilter;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    return _nextBuffered(buffRoot);\n                }\n                if (f != null) {\n                    f = _headContext.checkValue(f);\n                    if ((f == TokenFilter.INCLUDE_ALL)\n                            || ((f != null) && f.includeValue(delegate))) {\n                        return _nextBuffered(buffRoot);\n                    }\n                }\n                // Otherwise not included (leaves must be explicitly included)\n                continue main_loop;\n            }",
      "info" : "SwitchStatement[23361-27928]:SwitchStatement[23412-27979]"
    }, {
      "left" : "case ID_START_ARRAY:",
      "right" : "case ID_START_ARRAY:",
      "info" : "SwitchCase[23391-23411]:SwitchCase[23442-23462]"
    }, {
      "left" : "f = _headContext.checkValue(_itemFilter);",
      "right" : "f = _headContext.checkValue(_itemFilter);",
      "info" : "ExpressionStatement[23428-23469]:ExpressionStatement[23479-23520]"
    }, {
      "left" : "if (f == null)",
      "right" : "if (f == null)",
      "info" : "IfStatement[23486-23605]:IfStatement[23537-23656]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23501-23605]:Block[23552-23656]"
    }, {
      "left" : "delegate.skipChildren();",
      "right" : "delegate.skipChildren();",
      "info" : "ExpressionStatement[23523-23547]:ExpressionStatement[23574-23598]"
    }, {
      "left" : "continue main_loop;",
      "right" : "continue main_loop;",
      "info" : "ContinueStatement[23568-23587]:ContinueStatement[23619-23638]"
    }, {
      "left" : "if (f != TokenFilter.INCLUDE_ALL)",
      "right" : "if (f != TokenFilter.INCLUDE_ALL)",
      "info" : "IfStatement[23622-23721]:IfStatement[23673-23772]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23656-23721]:Block[23707-23772]"
    }, {
      "left" : "f = f.filterStartArray();",
      "right" : "f = f.filterStartArray();",
      "info" : "ExpressionStatement[23678-23703]:ExpressionStatement[23729-23754]"
    }, {
      "left" : "_itemFilter = f;",
      "right" : "_itemFilter = f;",
      "info" : "ExpressionStatement[23738-23754]:ExpressionStatement[23789-23805]"
    }, {
      "left" : "if (f == TokenFilter.INCLUDE_ALL)",
      "right" : "if (f == TokenFilter.INCLUDE_ALL)",
      "info" : "IfStatement[23771-23958]:IfStatement[23822-24009]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23805-23958]:Block[23856-24009]"
    }, {
      "left" : "_headContext = _headContext.createChildArrayContext(f, true);",
      "right" : "_headContext = _headContext.createChildArrayContext(f, true);",
      "info" : "ExpressionStatement[23827-23888]:ExpressionStatement[23878-23939]"
    }, {
      "left" : "return _nextBuffered(buffRoot);",
      "right" : "return _nextBuffered(buffRoot);",
      "info" : "ReturnStatement[23909-23940]:ReturnStatement[23960-23991]"
    }, {
      "left" : "_headContext = _headContext.createChildArrayContext(f, false);",
      "right" : "_headContext = _headContext.createChildArrayContext(f, false);",
      "info" : "ExpressionStatement[23975-24037]:ExpressionStatement[24026-24088]"
    }, {
      "left" : "continue main_loop;",
      "right" : "continue main_loop;",
      "info" : "ContinueStatement[24054-24073]:ContinueStatement[24105-24124]"
    }, {
      "left" : "case ID_START_OBJECT:",
      "right" : "case ID_START_OBJECT:",
      "info" : "SwitchCase[24087-24108]:SwitchCase[24138-24159]"
    }, {
      "left" : "f = _itemFilter;",
      "right" : "f = _itemFilter;",
      "info" : "ExpressionStatement[24125-24141]:ExpressionStatement[24176-24192]"
    }, {
      "left" : "if (f == TokenFilter.INCLUDE_ALL)",
      "right" : "if (f == TokenFilter.INCLUDE_ALL)",
      "info" : "IfStatement[24158-24324]:IfStatement[24209-24375]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24192-24324]:Block[24243-24375]"
    }, {
      "left" : "_headContext = _headContext.createChildObjectContext(f, true);",
      "right" : "_headContext = _headContext.createChildObjectContext(f, true);",
      "info" : "ExpressionStatement[24214-24276]:ExpressionStatement[24265-24327]"
    }, {
      "left" : "return t;",
      "right" : "return t;",
      "info" : "ReturnStatement[24297-24306]:ReturnStatement[24348-24357]"
    }, {
      "left" : "if (f == null)",
      "right" : "if (f == null)",
      "info" : "IfStatement[24341-24480]:IfStatement[24392-24531]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24356-24480]:Block[24407-24531]"
    }, {
      "left" : "delegate.skipChildren();",
      "right" : "delegate.skipChildren();",
      "info" : "ExpressionStatement[24398-24422]:ExpressionStatement[24449-24473]"
    }, {
      "left" : "continue main_loop;",
      "right" : "continue main_loop;",
      "info" : "ContinueStatement[24443-24462]:ContinueStatement[24494-24513]"
    }, {
      "left" : "f = _headContext.checkValue(f);",
      "right" : "f = _headContext.checkValue(f);",
      "info" : "ExpressionStatement[24552-24583]:ExpressionStatement[24603-24634]"
    }, {
      "left" : "if (f == null)",
      "right" : "if (f == null)",
      "info" : "IfStatement[24600-24719]:IfStatement[24651-24770]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24615-24719]:Block[24666-24770]"
    }, {
      "left" : "delegate.skipChildren();",
      "right" : "delegate.skipChildren();",
      "info" : "ExpressionStatement[24637-24661]:ExpressionStatement[24688-24712]"
    }, {
      "left" : "continue main_loop;",
      "right" : "continue main_loop;",
      "info" : "ContinueStatement[24682-24701]:ContinueStatement[24733-24752]"
    }, {
      "left" : "if (f != TokenFilter.INCLUDE_ALL)",
      "right" : "if (f != TokenFilter.INCLUDE_ALL)",
      "info" : "IfStatement[24736-24836]:IfStatement[24787-24887]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24770-24836]:Block[24821-24887]"
    }, {
      "left" : "f = f.filterStartObject();",
      "right" : "f = f.filterStartObject();",
      "info" : "ExpressionStatement[24792-24818]:ExpressionStatement[24843-24869]"
    }, {
      "left" : "_itemFilter = f;",
      "right" : "_itemFilter = f;",
      "info" : "ExpressionStatement[24853-24869]:ExpressionStatement[24904-24920]"
    }, {
      "left" : "if (f == TokenFilter.INCLUDE_ALL)",
      "right" : "if (f == TokenFilter.INCLUDE_ALL)",
      "info" : "IfStatement[24886-25074]:IfStatement[24937-25125]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24920-25074]:Block[24971-25125]"
    }, {
      "left" : "_headContext = _headContext.createChildObjectContext(f, true);",
      "right" : "_headContext = _headContext.createChildObjectContext(f, true);",
      "info" : "ExpressionStatement[24942-25004]:ExpressionStatement[24993-25055]"
    }, {
      "left" : "return _nextBuffered(buffRoot);",
      "right" : "return _nextBuffered(buffRoot);",
      "info" : "ReturnStatement[25025-25056]:ReturnStatement[25076-25107]"
    }, {
      "left" : "_headContext = _headContext.createChildObjectContext(f, false);",
      "right" : "_headContext = _headContext.createChildObjectContext(f, false);",
      "info" : "ExpressionStatement[25091-25154]:ExpressionStatement[25142-25205]"
    }, {
      "left" : "continue main_loop;",
      "right" : "continue main_loop;",
      "info" : "ContinueStatement[25171-25190]:ContinueStatement[25222-25241]"
    }, {
      "left" : "case ID_END_ARRAY:",
      "right" : "case ID_END_ARRAY:",
      "info" : "SwitchCase[25204-25222]:SwitchCase[25255-25273]"
    }, {
      "left" : "case ID_END_OBJECT:",
      "right" : "case ID_END_OBJECT:",
      "info" : "SwitchCase[25235-25254]:SwitchCase[25286-25305]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25271-26190]:Block[25322-26241]"
    }, {
      "left" : "f = _headContext.getFilter();",
      "right" : "f = _headContext.getFilter();",
      "info" : "ExpressionStatement[25438-25467]:ExpressionStatement[25489-25518]"
    }, {
      "left" : "if ((f != null) && (f != TokenFilter.INCLUDE_ALL))",
      "right" : "if ((f != null) && (f != TokenFilter.INCLUDE_ALL))",
      "info" : "IfStatement[25488-25609]:IfStatement[25539-25660]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25539-25609]:Block[25590-25660]"
    }, {
      "left" : "f.filterFinishArray();",
      "right" : "f.filterFinishArray();",
      "info" : "ExpressionStatement[25565-25587]:ExpressionStatement[25616-25638]"
    }, {
      "left" : "boolean gotEnd = (_headContext == buffRoot);",
      "right" : "boolean gotEnd = (_headContext == buffRoot);",
      "info" : "VariableDeclarationStatement[25630-25674]:VariableDeclarationStatement[25681-25725]"
    }, {
      "left" : "boolean returnEnd = gotEnd && _headContext.isStartHandled();",
      "right" : "boolean returnEnd = gotEnd && _headContext.isStartHandled();",
      "info" : "VariableDeclarationStatement[25695-25755]:VariableDeclarationStatement[25746-25806]"
    }, {
      "left" : "_headContext = _headContext.getParent();",
      "right" : "_headContext = _headContext.getParent();",
      "info" : "ExpressionStatement[25777-25817]:ExpressionStatement[25828-25868]"
    }, {
      "left" : "_itemFilter = _headContext.getFilter();",
      "right" : "_itemFilter = _headContext.getFilter();",
      "info" : "ExpressionStatement[25838-25877]:ExpressionStatement[25889-25928]"
    }, {
      "left" : "if (returnEnd)",
      "right" : "if (returnEnd)",
      "info" : "IfStatement[25899-25971]:IfStatement[25950-26022]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25914-25971]:Block[25965-26022]"
    }, {
      "left" : "return t;",
      "right" : "return t;",
      "info" : "ReturnStatement[25940-25949]:ReturnStatement[25991-26000]"
    }, {
      "left" : "if (gotEnd || (_headContext == buffRoot))",
      "right" : "if (gotEnd || (_headContext == buffRoot))",
      "info" : "IfStatement[26070-26172]:IfStatement[26121-26223]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26112-26172]:Block[26163-26223]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[26138-26150]:ReturnStatement[26189-26201]"
    }, {
      "left" : "continue main_loop;",
      "right" : "continue main_loop;",
      "info" : "ContinueStatement[26207-26226]:ContinueStatement[26258-26277]"
    }, {
      "left" : "case ID_FIELD_NAME:",
      "right" : "case ID_FIELD_NAME:",
      "info" : "SwitchCase[26240-26259]:SwitchCase[26291-26310]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26276-27258]:Block[26327-27309]"
    }, {
      "left" : "final String name = delegate.getCurrentName();",
      "right" : "final String name = delegate.getCurrentName();",
      "info" : "VariableDeclarationStatement[26298-26344]:VariableDeclarationStatement[26349-26395]"
    }, {
      "left" : "f = _headContext.setFieldName(name);",
      "right" : "f = _headContext.setFieldName(name);",
      "info" : "ExpressionStatement[26365-26401]:ExpressionStatement[26416-26452]"
    }, {
      "left" : "if (f == TokenFilter.INCLUDE_ALL)",
      "right" : "if (f == TokenFilter.INCLUDE_ALL)",
      "info" : "IfStatement[26422-26576]:IfStatement[26473-26627]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26456-26576]:Block[26507-26627]"
    }, {
      "left" : "_itemFilter = f;",
      "right" : "_itemFilter = f;",
      "info" : "ExpressionStatement[26482-26498]:ExpressionStatement[26533-26549]"
    }, {
      "left" : "return _nextBuffered(buffRoot);",
      "right" : "return _nextBuffered(buffRoot);",
      "info" : "ReturnStatement[26523-26554]:ReturnStatement[26574-26605]"
    }, {
      "left" : "if (f == null)",
      "right" : "if (f == null)",
      "info" : "IfStatement[26597-26798]:IfStatement[26648-26849]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26612-26798]:Block[26663-26849]"
    }, {
      "left" : "delegate.nextToken();",
      "right" : "delegate.nextToken();",
      "info" : "ExpressionStatement[26662-26683]:ExpressionStatement[26713-26734]"
    }, {
      "left" : "delegate.skipChildren();",
      "right" : "delegate.skipChildren();",
      "info" : "ExpressionStatement[26708-26732]:ExpressionStatement[26759-26783]"
    }, {
      "left" : "continue main_loop;",
      "right" : "continue main_loop;",
      "info" : "ContinueStatement[26757-26776]:ContinueStatement[26808-26827]"
    }, {
      "left" : "f = f.includeProperty(name);",
      "right" : "f = f.includeProperty(name);",
      "info" : "ExpressionStatement[26819-26847]:ExpressionStatement[26870-26898]"
    }, {
      "left" : "if (f == null)",
      "right" : "if (f == null)",
      "info" : "IfStatement[26868-27069]:IfStatement[26919-27120]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26883-27069]:Block[26934-27120]"
    }, {
      "left" : "delegate.nextToken();",
      "right" : "delegate.nextToken();",
      "info" : "ExpressionStatement[26933-26954]:ExpressionStatement[26984-27005]"
    }, {
      "left" : "delegate.skipChildren();",
      "right" : "delegate.skipChildren();",
      "info" : "ExpressionStatement[26979-27003]:ExpressionStatement[27030-27054]"
    }, {
      "left" : "continue main_loop;",
      "right" : "continue main_loop;",
      "info" : "ContinueStatement[27028-27047]:ContinueStatement[27079-27098]"
    }, {
      "left" : "_itemFilter = f;",
      "right" : "_itemFilter = f;",
      "info" : "ExpressionStatement[27090-27106]:ExpressionStatement[27141-27157]"
    }, {
      "left" : "if (f == TokenFilter.INCLUDE_ALL)",
      "right" : "if (f == TokenFilter.INCLUDE_ALL)",
      "info" : "IfStatement[27127-27240]:IfStatement[27178-27291]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27161-27240]:Block[27212-27291]"
    }, {
      "left" : "return _nextBuffered(buffRoot);",
      "right" : "return _nextBuffered(buffRoot);",
      "info" : "ReturnStatement[27187-27218]:ReturnStatement[27238-27269]"
    }, {
      "left" : "continue main_loop;",
      "right" : "continue main_loop;",
      "info" : "ContinueStatement[27275-27294]:ContinueStatement[27326-27345]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[27308-27316]:SwitchCase[27359-27367]"
    }, {
      "left" : "f = _itemFilter;",
      "right" : "f = _itemFilter;",
      "info" : "ExpressionStatement[27349-27365]:ExpressionStatement[27400-27416]"
    }, {
      "left" : "if (f == TokenFilter.INCLUDE_ALL)",
      "right" : "if (f == TokenFilter.INCLUDE_ALL)",
      "info" : "IfStatement[27382-27487]:IfStatement[27433-27538]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27416-27487]:Block[27467-27538]"
    }, {
      "left" : "return _nextBuffered(buffRoot);",
      "right" : "return _nextBuffered(buffRoot);",
      "info" : "ReturnStatement[27438-27469]:ReturnStatement[27489-27520]"
    }, {
      "left" : "if (f != null)",
      "right" : "if (f != null)",
      "info" : "IfStatement[27504-27799]:IfStatement[27555-27850]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27519-27799]:Block[27570-27850]"
    }, {
      "left" : "f = _headContext.checkValue(f);",
      "right" : "f = _headContext.checkValue(f);",
      "info" : "ExpressionStatement[27541-27572]:ExpressionStatement[27592-27623]"
    }, {
      "left" : "if ((f == TokenFilter.INCLUDE_ALL)\n                            || ((f != null) && f.includeValue(delegate)))",
      "right" : "if ((f == TokenFilter.INCLUDE_ALL)\n                            || ((f != null) && f.includeValue(delegate)))",
      "info" : "IfStatement[27593-27781]:IfStatement[27644-27832]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27702-27781]:Block[27753-27832]"
    }, {
      "left" : "return _nextBuffered(buffRoot);",
      "right" : "return _nextBuffered(buffRoot);",
      "info" : "ReturnStatement[27728-27759]:ReturnStatement[27779-27810]"
    }, {
      "left" : "continue main_loop;",
      "right" : "continue main_loop;",
      "info" : "ContinueStatement[27895-27914]:ContinueStatement[27946-27965]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28034-28985]:Block[28085-29036]"
    }, {
      "left" : "_exposedContext = buffRoot;",
      "right" : "_exposedContext = buffRoot;",
      "info" : "ExpressionStatement[28044-28071]:ExpressionStatement[28095-28122]"
    }, {
      "left" : "TokenFilterContext ctxt = buffRoot;",
      "right" : "TokenFilterContext ctxt = buffRoot;",
      "info" : "VariableDeclarationStatement[28080-28115]:VariableDeclarationStatement[28131-28166]"
    }, {
      "left" : "JsonToken t = ctxt.nextTokenToRead();",
      "right" : "JsonToken t = ctxt.nextTokenToRead();",
      "info" : "VariableDeclarationStatement[28124-28161]:VariableDeclarationStatement[28175-28212]"
    }, {
      "left" : "if (t != null)",
      "right" : "if (t != null)",
      "info" : "IfStatement[28170-28218]:IfStatement[28221-28269]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28185-28218]:Block[28236-28269]"
    }, {
      "left" : "return t;",
      "right" : "return t;",
      "info" : "ReturnStatement[28199-28208]:ReturnStatement[28250-28259]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[28227-28979]:WhileStatement[28278-29030]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28240-28979]:Block[28291-29030]"
    }, {
      "left" : "if (ctxt == _headContext)",
      "right" : "if (ctxt == _headContext)",
      "info" : "IfStatement[28299-28541]:IfStatement[28350-28592]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28325-28541]:Block[28376-28592]"
    }, {
      "left" : "throw _constructError(\"Internal error: failed to locate expected buffered tokens\");",
      "right" : "throw _constructError(\"Internal error: failed to locate expected buffered tokens\");",
      "info" : "ThrowStatement[28343-28426]:ThrowStatement[28394-28477]"
    }, {
      "left" : "ctxt = _exposedContext.findChildOf(ctxt);",
      "right" : "ctxt = _exposedContext.findChildOf(ctxt);",
      "info" : "ExpressionStatement[28609-28650]:ExpressionStatement[28660-28701]"
    }, {
      "left" : "_exposedContext = ctxt;",
      "right" : "_exposedContext = ctxt;",
      "info" : "ExpressionStatement[28663-28686]:ExpressionStatement[28714-28737]"
    }, {
      "left" : "if (ctxt == null)",
      "right" : "if (ctxt == null)",
      "info" : "IfStatement[28699-28849]:IfStatement[28750-28900]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28717-28849]:Block[28768-28900]"
    }, {
      "left" : "throw _constructError(\"Unexpected problem: chain of filtered context broken\");",
      "right" : "throw _constructError(\"Unexpected problem: chain of filtered context broken\");",
      "info" : "ThrowStatement[28757-28835]:ThrowStatement[28808-28886]"
    }, {
      "left" : "t = _exposedContext.nextTokenToRead();",
      "right" : "t = _exposedContext.nextTokenToRead();",
      "info" : "ExpressionStatement[28862-28900]:ExpressionStatement[28913-28951]"
    }, {
      "left" : "if (t != null)",
      "right" : "if (t != null)",
      "info" : "IfStatement[28913-28969]:IfStatement[28964-29020]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28928-28969]:Block[28979-29020]"
    }, {
      "left" : "return t;",
      "right" : "return t;",
      "info" : "ReturnStatement[28946-28955]:ReturnStatement[28997-29006]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29057-29250]:Block[29108-29301]"
    }, {
      "left" : "JsonToken t = nextToken();",
      "right" : "JsonToken t = nextToken();",
      "info" : "VariableDeclarationStatement[29120-29146]:VariableDeclarationStatement[29171-29197]"
    }, {
      "left" : "if (t == JsonToken.FIELD_NAME)",
      "right" : "if (t == JsonToken.FIELD_NAME)",
      "info" : "IfStatement[29155-29226]:IfStatement[29206-29277]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29186-29226]:Block[29237-29277]"
    }, {
      "left" : "t = nextToken();",
      "right" : "t = nextToken();",
      "info" : "ExpressionStatement[29200-29216]:ExpressionStatement[29251-29267]"
    }, {
      "left" : "return t;",
      "right" : "return t;",
      "info" : "ReturnStatement[29235-29244]:ReturnStatement[29286-29295]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29514-30200]:Block[29565-30251]"
    }, {
      "left" : "if ((_currToken != JsonToken.START_OBJECT)\n            && (_currToken != JsonToken.START_ARRAY))",
      "right" : "if ((_currToken != JsonToken.START_OBJECT)\n            && (_currToken != JsonToken.START_ARRAY))",
      "info" : "IfStatement[29524-29657]:IfStatement[29575-29708]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29621-29657]:Block[29672-29708]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[29635-29647]:ReturnStatement[29686-29698]"
    }, {
      "left" : "int open = 1;",
      "right" : "int open = 1;",
      "info" : "VariableDeclarationStatement[29666-29679]:VariableDeclarationStatement[29717-29730]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[29818-30194]:WhileStatement[29869-30245]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29831-30194]:Block[29882-30245]"
    }, {
      "left" : "JsonToken t = nextToken();",
      "right" : "JsonToken t = nextToken();",
      "info" : "VariableDeclarationStatement[29845-29871]:VariableDeclarationStatement[29896-29922]"
    }, {
      "left" : "if (t == null)",
      "right" : "if (t == null)",
      "info" : "IfStatement[29884-29981]:IfStatement[29935-30032]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29899-29981]:Block[29950-30032]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[29955-29967]:ReturnStatement[30006-30018]"
    }, {
      "left" : "if (t.isStructStart())",
      "right" : "if (t.isStructStart())",
      "info" : "IfStatement[29994-30184]:IfStatement[30045-30235]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30017-30056]:Block[30068-30107]"
    }, {
      "left" : "++open;",
      "right" : "++open;",
      "info" : "ExpressionStatement[30035-30042]:ExpressionStatement[30086-30093]"
    }, {
      "left" : "if (t.isStructEnd())",
      "right" : "if (t.isStructEnd())",
      "info" : "IfStatement[30062-30184]:IfStatement[30113-30235]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30083-30184]:Block[30134-30235]"
    }, {
      "left" : "if (--open == 0)",
      "right" : "if (--open == 0)",
      "info" : "IfStatement[30101-30170]:IfStatement[30152-30221]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30118-30170]:Block[30169-30221]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[30140-30152]:ReturnStatement[30191-30203]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30460-30491]:Block[30511-30542]"
    }, {
      "left" : "return delegate.getText();",
      "right" : "return delegate.getText();",
      "info" : "ReturnStatement[30462-30488]:ReturnStatement[30513-30539]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30541-30581]:Block[30592-30632]"
    }, {
      "left" : "return delegate.hasTextCharacters();",
      "right" : "return delegate.hasTextCharacters();",
      "info" : "ReturnStatement[30543-30579]:ReturnStatement[30594-30630]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30649-30689]:Block[30700-30740]"
    }, {
      "left" : "return delegate.getTextCharacters();",
      "right" : "return delegate.getTextCharacters();",
      "info" : "ReturnStatement[30651-30687]:ReturnStatement[30702-30738]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30750-30786]:Block[30801-30837]"
    }, {
      "left" : "return delegate.getTextLength();",
      "right" : "return delegate.getTextLength();",
      "info" : "ReturnStatement[30752-30784]:ReturnStatement[30803-30835]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30847-30883]:Block[30898-30934]"
    }, {
      "left" : "return delegate.getTextOffset();",
      "right" : "return delegate.getTextOffset();",
      "info" : "ReturnStatement[30849-30881]:ReturnStatement[30900-30932]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31165-31206]:Block[31216-31257]"
    }, {
      "left" : "return delegate.getBigIntegerValue();",
      "right" : "return delegate.getBigIntegerValue();",
      "info" : "ReturnStatement[31167-31204]:ReturnStatement[31218-31255]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31278-31316]:Block[31329-31367]"
    }, {
      "left" : "return delegate.getBooleanValue();",
      "right" : "return delegate.getBooleanValue();",
      "info" : "ReturnStatement[31280-31314]:ReturnStatement[31331-31365]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31386-31421]:Block[31437-31472]"
    }, {
      "left" : "return delegate.getByteValue();",
      "right" : "return delegate.getByteValue();",
      "info" : "ReturnStatement[31388-31419]:ReturnStatement[31439-31470]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31489-31525]:Block[31540-31576]"
    }, {
      "left" : "return delegate.getShortValue();",
      "right" : "return delegate.getShortValue();",
      "info" : "ReturnStatement[31491-31523]:ReturnStatement[31542-31574]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31600-31638]:Block[31651-31689]"
    }, {
      "left" : "return delegate.getDecimalValue();",
      "right" : "return delegate.getDecimalValue();",
      "info" : "ReturnStatement[31602-31636]:ReturnStatement[31653-31687]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31708-31745]:Block[31759-31796]"
    }, {
      "left" : "return delegate.getDoubleValue();",
      "right" : "return delegate.getDoubleValue();",
      "info" : "ReturnStatement[31710-31743]:ReturnStatement[31761-31794]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31813-31849]:Block[31864-31900]"
    }, {
      "left" : "return delegate.getFloatValue();",
      "right" : "return delegate.getFloatValue();",
      "info" : "ReturnStatement[31815-31847]:ReturnStatement[31866-31898]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31913-31947]:Block[31964-31998]"
    }, {
      "left" : "return delegate.getIntValue();",
      "right" : "return delegate.getIntValue();",
      "info" : "ReturnStatement[31915-31945]:ReturnStatement[31966-31996]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32013-32048]:Block[32064-32099]"
    }, {
      "left" : "return delegate.getLongValue();",
      "right" : "return delegate.getLongValue();",
      "info" : "ReturnStatement[32015-32046]:ReturnStatement[32066-32097]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32121-32157]:Block[32172-32208]"
    }, {
      "left" : "return delegate.getNumberType();",
      "right" : "return delegate.getNumberType();",
      "info" : "ReturnStatement[32123-32155]:ReturnStatement[32174-32206]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32227-32264]:Block[32278-32315]"
    }, {
      "left" : "return delegate.getNumberValue();",
      "right" : "return delegate.getNumberValue();",
      "info" : "ReturnStatement[32229-32262]:ReturnStatement[32280-32313]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32542-32578]:Block[32593-32629]"
    }, {
      "left" : "return delegate.getValueAsInt();",
      "right" : "return delegate.getValueAsInt();",
      "info" : "ReturnStatement[32544-32576]:ReturnStatement[32595-32627]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32655-32703]:Block[32706-32754]"
    }, {
      "left" : "return delegate.getValueAsInt(defaultValue);",
      "right" : "return delegate.getValueAsInt(defaultValue);",
      "info" : "ReturnStatement[32657-32701]:ReturnStatement[32708-32752]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32766-32803]:Block[32817-32854]"
    }, {
      "left" : "return delegate.getValueAsLong();",
      "right" : "return delegate.getValueAsLong();",
      "info" : "ReturnStatement[32768-32801]:ReturnStatement[32819-32852]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32883-32932]:Block[32934-32983]"
    }, {
      "left" : "return delegate.getValueAsLong(defaultValue);",
      "right" : "return delegate.getValueAsLong(defaultValue);",
      "info" : "ReturnStatement[32885-32930]:ReturnStatement[32936-32981]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32999-33038]:Block[33050-33089]"
    }, {
      "left" : "return delegate.getValueAsDouble();",
      "right" : "return delegate.getValueAsDouble();",
      "info" : "ReturnStatement[33001-33036]:ReturnStatement[33052-33087]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33124-33175]:Block[33175-33226]"
    }, {
      "left" : "return delegate.getValueAsDouble(defaultValue);",
      "right" : "return delegate.getValueAsDouble(defaultValue);",
      "info" : "ReturnStatement[33126-33173]:ReturnStatement[33177-33224]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33244-33284]:Block[33295-33335]"
    }, {
      "left" : "return delegate.getValueAsBoolean();",
      "right" : "return delegate.getValueAsBoolean();",
      "info" : "ReturnStatement[33246-33282]:ReturnStatement[33297-33333]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33373-33425]:Block[33424-33476]"
    }, {
      "left" : "return delegate.getValueAsBoolean(defaultValue);",
      "right" : "return delegate.getValueAsBoolean(defaultValue);",
      "info" : "ReturnStatement[33375-33423]:ReturnStatement[33426-33474]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33492-33531]:Block[33543-33582]"
    }, {
      "left" : "return delegate.getValueAsString();",
      "right" : "return delegate.getValueAsString();",
      "info" : "ReturnStatement[33494-33529]:ReturnStatement[33545-33580]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33617-33668]:Block[33668-33719]"
    }, {
      "left" : "return delegate.getValueAsString(defaultValue);",
      "right" : "return delegate.getValueAsString(defaultValue);",
      "info" : "ReturnStatement[33619-33666]:ReturnStatement[33670-33717]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33934-33974]:Block[33985-34025]"
    }, {
      "left" : "return delegate.getEmbeddedObject();",
      "right" : "return delegate.getEmbeddedObject();",
      "info" : "ReturnStatement[33936-33972]:ReturnStatement[33987-34023]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34063-34110]:Block[34114-34161]"
    }, {
      "left" : "return delegate.getBinaryValue(b64variant);",
      "right" : "return delegate.getBinaryValue(b64variant);",
      "info" : "ReturnStatement[34065-34108]:ReturnStatement[34116-34159]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34215-34268]:Block[34266-34319]"
    }, {
      "left" : "return delegate.readBinaryValue(b64variant, out);",
      "right" : "return delegate.readBinaryValue(b64variant, out);",
      "info" : "ReturnStatement[34217-34266]:ReturnStatement[34268-34317]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34322-34361]:Block[34373-34412]"
    }, {
      "left" : "return delegate.getTokenLocation();",
      "right" : "return delegate.getTokenLocation();",
      "info" : "ReturnStatement[34324-34359]:ReturnStatement[34375-34410]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34587-34708]:Block[34638-34759]"
    }, {
      "left" : "if (_exposedContext != null)",
      "right" : "if (_exposedContext != null)",
      "info" : "IfStatement[34597-34673]:IfStatement[34648-34724]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34626-34673]:Block[34677-34724]"
    }, {
      "left" : "return _exposedContext;",
      "right" : "return _exposedContext;",
      "info" : "ReturnStatement[34640-34663]:ReturnStatement[34691-34714]"
    }, {
      "left" : "return _headContext;",
      "right" : "return _headContext;",
      "info" : "ReturnStatement[34682-34702]:ReturnStatement[34733-34753]"
    } ]
  },
  "interFileMappings" : { }
}