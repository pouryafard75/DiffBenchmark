{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "JsonGenerator",
      "right" : "JsonGenerator",
      "info" : "TypeDeclaration[578-75796]:TypeDeclaration[578-76047]"
    }, {
      "left" : "enum : Feature",
      "right" : "enum : Feature",
      "info" : "EnumDeclaration[853-10308]:EnumDeclaration[853-10308]"
    }, {
      "left" : "private final boolean _defaultState;",
      "right" : "private final boolean _defaultState;",
      "info" : "FieldDeclaration[9430-9466]:FieldDeclaration[9430-9466]"
    }, {
      "left" : "private final int _mask;",
      "right" : "private final int _mask;",
      "info" : "FieldDeclaration[9475-9499]:FieldDeclaration[9475-9499]"
    }, {
      "left" : "public static int collectDefaults()",
      "right" : "public static int collectDefaults()",
      "info" : "MethodDeclaration[9517-9914]:MethodDeclaration[9517-9914]"
    }, {
      "left" : "private Feature(boolean defaultState)",
      "right" : "private Feature(boolean defaultState)",
      "info" : "MethodDeclaration[9932-10061]:MethodDeclaration[9932-10061]"
    }, {
      "left" : "public boolean enabledByDefault()",
      "right" : "public boolean enabledByDefault()",
      "info" : "MethodDeclaration[10071-10130]:MethodDeclaration[10071-10130]"
    }, {
      "left" : "public boolean enabledIn(int flags)",
      "right" : "public boolean enabledIn(int flags)",
      "info" : "MethodDeclaration[10140-10254]:MethodDeclaration[10140-10254]"
    }, {
      "left" : "public int getMask()",
      "right" : "public int getMask()",
      "info" : "MethodDeclaration[10264-10302]:MethodDeclaration[10264-10302]"
    }, {
      "left" : "protected PrettyPrinter _cfgPrettyPrinter;",
      "right" : "protected PrettyPrinter _cfgPrettyPrinter;",
      "info" : "FieldDeclaration[10479-10715]:FieldDeclaration[10479-10715]"
    }, {
      "left" : "protected JsonGenerator()",
      "right" : "protected JsonGenerator()",
      "info" : "MethodDeclaration[10905-10934]:MethodDeclaration[10905-10934]"
    }, {
      "left" : "public abstract JsonGenerator setCodec(ObjectCodec oc);",
      "right" : "public abstract JsonGenerator setCodec(ObjectCodec oc);",
      "info" : "MethodDeclaration[10940-11234]:MethodDeclaration[10940-11234]"
    }, {
      "left" : "public abstract ObjectCodec getCodec();",
      "right" : "public abstract ObjectCodec getCodec();",
      "info" : "MethodDeclaration[11240-11430]:MethodDeclaration[11240-11430]"
    }, {
      "left" : "public abstract Version version();",
      "right" : "public abstract Version version();",
      "info" : "MethodDeclaration[11436-11593]:MethodDeclaration[11436-11593]"
    }, {
      "left" : "public abstract JsonGenerator enable(Feature f);",
      "right" : "public abstract JsonGenerator enable(Feature f);",
      "info" : "MethodDeclaration[11784-12028]:MethodDeclaration[11784-12028]"
    }, {
      "left" : "public abstract JsonGenerator disable(Feature f);",
      "right" : "public abstract JsonGenerator disable(Feature f);",
      "info" : "MethodDeclaration[12034-12264]:MethodDeclaration[12034-12264]"
    }, {
      "left" : "public final JsonGenerator configure(Feature f, boolean state)",
      "right" : "public final JsonGenerator configure(Feature f, boolean state)",
      "info" : "MethodDeclaration[12270-12609]:MethodDeclaration[12270-12609]"
    }, {
      "left" : "public abstract boolean isEnabled(Feature f);",
      "right" : "public abstract boolean isEnabled(Feature f);",
      "info" : "MethodDeclaration[12615-12798]:MethodDeclaration[12615-12798]"
    }, {
      "left" : "public abstract int getFeatureMask();",
      "right" : "public abstract int getFeatureMask();",
      "info" : "MethodDeclaration[12804-13116]:MethodDeclaration[12804-13116]"
    }, {
      "left" : "public abstract JsonGenerator setFeatureMask(int values);",
      "right" : "public abstract JsonGenerator setFeatureMask(int values);",
      "info" : "MethodDeclaration[13122-13606]:MethodDeclaration[13122-13606]"
    }, {
      "left" : "public JsonGenerator overrideStdFeatures(int values, int mask)",
      "right" : "public JsonGenerator overrideStdFeatures(int values, int mask)",
      "info" : "MethodDeclaration[13612-14385]:MethodDeclaration[13612-14385]"
    }, {
      "left" : "public int getFormatFeatures()",
      "right" : "public int getFormatFeatures()",
      "info" : "MethodDeclaration[14391-14718]:MethodDeclaration[14391-14718]"
    }, {
      "left" : "public JsonGenerator overrideFormatFeatures(int values, int mask)",
      "right" : "public JsonGenerator overrideFormatFeatures(int values, int mask)",
      "info" : "MethodDeclaration[14728-15612]:MethodDeclaration[14728-15612]"
    }, {
      "left" : "public void setSchema(FormatSchema schema)",
      "right" : "public void setSchema(FormatSchema schema)",
      "info" : "MethodDeclaration[15806-16658]:MethodDeclaration[15806-16658]"
    }, {
      "left" : "public FormatSchema getSchema()",
      "right" : "public FormatSchema getSchema()",
      "info" : "MethodDeclaration[16664-16863]:MethodDeclaration[16664-16863]"
    }, {
      "left" : "public JsonGenerator setPrettyPrinter(PrettyPrinter pp)",
      "right" : "public JsonGenerator setPrettyPrinter(PrettyPrinter pp)",
      "info" : "MethodDeclaration[17053-17594]:MethodDeclaration[17053-17594]"
    }, {
      "left" : "public PrettyPrinter getPrettyPrinter()",
      "right" : "public PrettyPrinter getPrettyPrinter()",
      "info" : "MethodDeclaration[17600-17865]:MethodDeclaration[17600-17865]"
    }, {
      "left" : "public abstract JsonGenerator useDefaultPrettyPrinter();",
      "right" : "public abstract JsonGenerator useDefaultPrettyPrinter();",
      "info" : "MethodDeclaration[17875-18178]:MethodDeclaration[17875-18178]"
    }, {
      "left" : "public JsonGenerator setHighestNonEscapedChar(int charCode)",
      "right" : "public JsonGenerator setHighestNonEscapedChar(int charCode)",
      "info" : "MethodDeclaration[18184-19325]:MethodDeclaration[18184-19325]"
    }, {
      "left" : "public int getHighestEscapedChar()",
      "right" : "public int getHighestEscapedChar()",
      "info" : "MethodDeclaration[19331-20004]:MethodDeclaration[19331-20004]"
    }, {
      "left" : "public CharacterEscapes getCharacterEscapes()",
      "right" : "public CharacterEscapes getCharacterEscapes()",
      "info" : "MethodDeclaration[20010-20190]:MethodDeclaration[20010-20190]"
    }, {
      "left" : "public JsonGenerator setCharacterEscapes(CharacterEscapes esc)",
      "right" : "public JsonGenerator setCharacterEscapes(CharacterEscapes esc)",
      "info" : "MethodDeclaration[20196-20479]:MethodDeclaration[20196-20479]"
    }, {
      "left" : "public JsonGenerator setRootValueSeparator(SerializableString sep)",
      "right" : "public JsonGenerator setRootValueSeparator(SerializableString sep)",
      "info" : "MethodDeclaration[20485-20981]:MethodDeclaration[20485-20981]"
    }, {
      "left" : "public Object getOutputTarget()",
      "right" : "public Object getOutputTarget()",
      "info" : "MethodDeclaration[21174-21984]:MethodDeclaration[21174-21984]"
    }, {
      "left" : "public int getOutputBuffered()",
      "right" : "public int getOutputBuffered()",
      "info" : "MethodDeclaration[21990-22930]:MethodDeclaration[21990-22930]"
    }, {
      "left" : "public Object getCurrentValue()",
      "right" : "public Object getCurrentValue()",
      "info" : "MethodDeclaration[22936-23547]:MethodDeclaration[22936-23547]"
    }, {
      "left" : "public void setCurrentValue(Object v)",
      "right" : "public void setCurrentValue(Object v)",
      "info" : "MethodDeclaration[23553-23888]:MethodDeclaration[23553-23888]"
    }, {
      "left" : "public boolean canUseSchema(FormatSchema schema)",
      "right" : "public boolean canUseSchema(FormatSchema schema)",
      "info" : "MethodDeclaration[24094-24428]:MethodDeclaration[24094-24428]"
    }, {
      "left" : "public boolean canWriteObjectId()",
      "right" : "public boolean canWriteObjectId()",
      "info" : "MethodDeclaration[24438-25102]:MethodDeclaration[24438-25102]"
    }, {
      "left" : "public boolean canWriteTypeId()",
      "right" : "public boolean canWriteTypeId()",
      "info" : "MethodDeclaration[25108-25735]:MethodDeclaration[25108-25735]"
    }, {
      "left" : "public boolean canWriteBinaryNatively()",
      "right" : "public boolean canWriteBinaryNatively()",
      "info" : "MethodDeclaration[25741-26162]:MethodDeclaration[25741-26162]"
    }, {
      "left" : "public boolean canOmitFields()",
      "right" : "public boolean canOmitFields()",
      "info" : "MethodDeclaration[26172-26536]:MethodDeclaration[26172-26536]"
    }, {
      "left" : "public boolean canWriteFormattedNumbers()",
      "right" : "public boolean canWriteFormattedNumbers()",
      "info" : "MethodDeclaration[26542-27148]:MethodDeclaration[26542-27148]"
    }, {
      "left" : "public abstract void writeStartArray() throws IOException;",
      "right" : "public abstract void writeStartArray() throws IOException;",
      "info" : "MethodDeclaration[27347-27757]:MethodDeclaration[27347-27757]"
    }, {
      "left" : "public void writeStartArray(int size) throws IOException",
      "right" : "public void writeStartArray(int size) throws IOException",
      "info" : "MethodDeclaration[27763-28434]:MethodDeclaration[27763-28434]"
    }, {
      "left" : "public abstract void writeEndArray() throws IOException;",
      "right" : "public abstract void writeEndArray() throws IOException;",
      "info" : "MethodDeclaration[28444-28767]:MethodDeclaration[28444-28767]"
    }, {
      "left" : "public abstract void writeStartObject() throws IOException;",
      "right" : "public abstract void writeStartObject() throws IOException;",
      "info" : "MethodDeclaration[28773-29174]:MethodDeclaration[28773-29174]"
    }, {
      "left" : "public void writeStartObject(Object forValue) throws IOException",
      "right" : "public void writeStartObject(Object forValue) throws IOException",
      "info" : "MethodDeclaration[29180-29910]:MethodDeclaration[29180-29910]"
    }, {
      "left" : "public abstract void writeEndObject() throws IOException;",
      "right" : "public abstract void writeEndObject() throws IOException;",
      "info" : "MethodDeclaration[29916-30378]:MethodDeclaration[29916-30378]"
    }, {
      "left" : "public abstract void writeFieldName(String name) throws IOException;",
      "right" : "public abstract void writeFieldName(String name) throws IOException;",
      "info" : "MethodDeclaration[30384-30867]:MethodDeclaration[30384-30867]"
    }, {
      "left" : "public abstract void writeFieldName(SerializableString name) throws IOException;",
      "right" : "public abstract void writeFieldName(SerializableString name) throws IOException;",
      "info" : "MethodDeclaration[30873-31492]:MethodDeclaration[30873-31492]"
    }, {
      "left" : "public void writeFieldId(long id) throws IOException",
      "right" : "public void writeFieldId(long id) throws IOException",
      "info" : "MethodDeclaration[31498-32055]:MethodDeclaration[31498-32055]"
    }, {
      "left" : "public void writeArray(int[] array, int offset, int length) throws IOException",
      "right" : "public void writeArray(int[] array, int offset, int length) throws IOException",
      "info" : "MethodDeclaration[32259-33143]:MethodDeclaration[32259-33143]"
    }, {
      "left" : "public void writeArray(long[] array, int offset, int length) throws IOException",
      "right" : "public void writeArray(long[] array, int offset, int length) throws IOException",
      "info" : "MethodDeclaration[33149-34034]:MethodDeclaration[33149-34034]"
    }, {
      "left" : "public void writeArray(double[] array, int offset, int length) throws IOException",
      "right" : "public void writeArray(double[] array, int offset, int length) throws IOException",
      "info" : "MethodDeclaration[34040-34929]:MethodDeclaration[34040-34929]"
    }, {
      "left" : "public abstract void writeString(String text) throws IOException;",
      "right" : "public abstract void writeString(String text) throws IOException;",
      "info" : "MethodDeclaration[35132-35521]:MethodDeclaration[35132-35521]"
    }, {
      "left" : "public abstract void writeString(char[] text, int offset, int len) throws IOException;",
      "right" : "public abstract void writeString(char[] text, int offset, int len) throws IOException;",
      "info" : "MethodDeclaration[35527-35937]:MethodDeclaration[35527-35937]"
    }, {
      "left" : "public abstract void writeString(SerializableString text) throws IOException;",
      "right" : "public abstract void writeString(SerializableString text) throws IOException;",
      "info" : "MethodDeclaration[35943-36455]:MethodDeclaration[35943-36455]"
    }, {
      "left" : "public abstract void writeRawUTF8String(byte[] text, int offset, int length)\n        throws IOException;",
      "right" : "public abstract void writeRawUTF8String(byte[] text, int offset, int length)\n        throws IOException;",
      "info" : "MethodDeclaration[36461-37327]:MethodDeclaration[36461-37327]"
    }, {
      "left" : "public abstract void writeUTF8String(byte[] text, int offset, int length)\n        throws IOException;",
      "right" : "public abstract void writeUTF8String(byte[] text, int offset, int length)\n        throws IOException;",
      "info" : "MethodDeclaration[37333-38451]:MethodDeclaration[37333-38451]"
    }, {
      "left" : "public abstract void writeRaw(String text) throws IOException;",
      "right" : "public abstract void writeRaw(String text) throws IOException;",
      "info" : "MethodDeclaration[38654-39252]:MethodDeclaration[38654-39252]"
    }, {
      "left" : "public abstract void writeRaw(String text, int offset, int len) throws IOException;",
      "right" : "public abstract void writeRaw(String text, int offset, int len) throws IOException;",
      "info" : "MethodDeclaration[39258-39877]:MethodDeclaration[39258-39877]"
    }, {
      "left" : "public abstract void writeRaw(char[] text, int offset, int len) throws IOException;",
      "right" : "public abstract void writeRaw(char[] text, int offset, int len) throws IOException;",
      "info" : "MethodDeclaration[39883-40502]:MethodDeclaration[39883-40502]"
    }, {
      "left" : "public abstract void writeRaw(char c) throws IOException;",
      "right" : "public abstract void writeRaw(char c) throws IOException;",
      "info" : "MethodDeclaration[40508-41101]:MethodDeclaration[40508-41101]"
    }, {
      "left" : "public void writeRaw(SerializableString raw) throws IOException",
      "right" : "public void writeRaw(SerializableString raw) throws IOException",
      "info" : "MethodDeclaration[41107-42026]:MethodDeclaration[41107-42026]"
    }, {
      "left" : "public abstract void writeRawValue(String text) throws IOException;",
      "right" : "public abstract void writeRawValue(String text) throws IOException;",
      "info" : "MethodDeclaration[42032-42474]:MethodDeclaration[42032-42474]"
    }, {
      "left" : "public abstract void writeRawValue(String text, int offset, int len) throws IOException;",
      "right" : "public abstract void writeRawValue(String text, int offset, int len) throws IOException;",
      "info" : "MethodDeclaration[42480-42568]:MethodDeclaration[42480-42568]"
    }, {
      "left" : "public abstract void writeRawValue(char[] text, int offset, int len) throws IOException;",
      "right" : "public abstract void writeRawValue(char[] text, int offset, int len) throws IOException;",
      "info" : "MethodDeclaration[42574-42662]:MethodDeclaration[42574-42662]"
    }, {
      "left" : "public void writeRawValue(SerializableString raw) throws IOException",
      "right" : "public void writeRawValue(SerializableString raw) throws IOException",
      "info" : "MethodDeclaration[42668-43023]:MethodDeclaration[42668-43023]"
    }, {
      "left" : "public abstract void writeBinary(Base64Variant bv,\n            byte[] data, int offset, int len) throws IOException;",
      "right" : "public abstract void writeBinary(Base64Variant bv,\n            byte[] data, int offset, int len) throws IOException;",
      "info" : "MethodDeclaration[43029-44185]:MethodDeclaration[43029-44185]"
    }, {
      "left" : "public void writeBinary(byte[] data, int offset, int len) throws IOException",
      "right" : "public void writeBinary(byte[] data, int offset, int len) throws IOException",
      "info" : "MethodDeclaration[44191-44561]:MethodDeclaration[44191-44561]"
    }, {
      "left" : "public void writeBinary(byte[] data) throws IOException",
      "right" : "public void writeBinary(byte[] data) throws IOException",
      "info" : "MethodDeclaration[44567-44986]:MethodDeclaration[44567-44986]"
    }, {
      "left" : "public int writeBinary(InputStream data, int dataLength)\n        throws IOException",
      "right" : "public int writeBinary(InputStream data, int dataLength)\n        throws IOException",
      "info" : "MethodDeclaration[44992-45862]:MethodDeclaration[44992-45862]"
    }, {
      "left" : "public abstract int writeBinary(Base64Variant bv,\n            InputStream data, int dataLength) throws IOException;",
      "right" : "public abstract int writeBinary(Base64Variant bv,\n            InputStream data, int dataLength) throws IOException;",
      "info" : "MethodDeclaration[45872-47011]:MethodDeclaration[45872-47011]"
    }, {
      "left" : "public void writeNumber(short v) throws IOException",
      "right" : "public void writeNumber(short v) throws IOException",
      "info" : "MethodDeclaration[47203-47643]:MethodDeclaration[47203-47643]"
    }, {
      "left" : "public abstract void writeNumber(int v) throws IOException;",
      "right" : "public abstract void writeNumber(int v) throws IOException;",
      "info" : "MethodDeclaration[47649-48046]:MethodDeclaration[47649-48046]"
    }, {
      "left" : "public abstract void writeNumber(long v) throws IOException;",
      "right" : "public abstract void writeNumber(long v) throws IOException;",
      "info" : "MethodDeclaration[48052-48450]:MethodDeclaration[48052-48450]"
    }, {
      "left" : "public abstract void writeNumber(BigInteger v) throws IOException;",
      "right" : "public abstract void writeNumber(BigInteger v) throws IOException;",
      "info" : "MethodDeclaration[48456-48860]:MethodDeclaration[48456-48860]"
    }, {
      "left" : "public abstract void writeNumber(double v) throws IOException;",
      "right" : "public abstract void writeNumber(double v) throws IOException;",
      "info" : "MethodDeclaration[48866-49267]:MethodDeclaration[48866-49267]"
    }, {
      "left" : "public abstract void writeNumber(float v) throws IOException;",
      "right" : "public abstract void writeNumber(float v) throws IOException;",
      "info" : "MethodDeclaration[49273-49673]:MethodDeclaration[49273-49673]"
    }, {
      "left" : "public abstract void writeNumber(BigDecimal v) throws IOException;",
      "right" : "public abstract void writeNumber(BigDecimal v) throws IOException;",
      "info" : "MethodDeclaration[49679-50084]:MethodDeclaration[49679-50084]"
    }, {
      "left" : "public abstract void writeNumber(String encodedValue) throws IOException;",
      "right" : "public abstract void writeNumber(String encodedValue) throws IOException;",
      "info" : "MethodDeclaration[50090-51279]:MethodDeclaration[50090-51279]"
    }, {
      "left" : "public abstract void writeBoolean(boolean state) throws IOException;",
      "right" : "public abstract void writeBoolean(boolean state) throws IOException;",
      "info" : "MethodDeclaration[51485-51889]:MethodDeclaration[51485-51889]"
    }, {
      "left" : "public abstract void writeNull() throws IOException;",
      "right" : "public abstract void writeNull() throws IOException;",
      "info" : "MethodDeclaration[51895-52237]:MethodDeclaration[51895-52237]"
    }, {
      "left" : "public void writeEmbeddedObject(Object object) throws IOException",
      "right" : "public void writeEmbeddedObject(Object object) throws IOException",
      "info" : "MethodDeclaration[52243-52660]:MethodDeclaration[52243-52911]"
    }, {
      "left" : "public void writeObjectId(Object id) throws IOException",
      "right" : "public void writeObjectId(Object id) throws IOException",
      "info" : "MethodDeclaration[52874-53511]:MethodDeclaration[53125-53762]"
    }, {
      "left" : "public void writeObjectRef(Object id) throws IOException",
      "right" : "public void writeObjectRef(Object id) throws IOException",
      "info" : "MethodDeclaration[53517-54134]:MethodDeclaration[53768-54385]"
    }, {
      "left" : "public void writeTypeId(Object id) throws IOException",
      "right" : "public void writeTypeId(Object id) throws IOException",
      "info" : "MethodDeclaration[54144-54773]:MethodDeclaration[54395-55024]"
    }, {
      "left" : "public abstract void writeObject(Object pojo) throws IOException;",
      "right" : "public abstract void writeObject(Object pojo) throws IOException;",
      "info" : "MethodDeclaration[58181-58771]:MethodDeclaration[58432-59022]"
    }, {
      "left" : "public abstract void writeTree(TreeNode rootNode) throws IOException;",
      "right" : "public abstract void writeTree(TreeNode rootNode) throws IOException;",
      "info" : "MethodDeclaration[58777-59193]:MethodDeclaration[59028-59444]"
    }, {
      "left" : "public void writeStringField(String fieldName, String value) throws IOException",
      "right" : "public void writeStringField(String fieldName, String value) throws IOException",
      "info" : "MethodDeclaration[59394-59848]:MethodDeclaration[59645-60099]"
    }, {
      "left" : "public final void writeBooleanField(String fieldName, boolean value) throws IOException",
      "right" : "public final void writeBooleanField(String fieldName, boolean value) throws IOException",
      "info" : "MethodDeclaration[59854-60232]:MethodDeclaration[60105-60483]"
    }, {
      "left" : "public final void writeNullField(String fieldName) throws IOException",
      "right" : "public final void writeNullField(String fieldName) throws IOException",
      "info" : "MethodDeclaration[60238-60590]:MethodDeclaration[60489-60841]"
    }, {
      "left" : "public final void writeNumberField(String fieldName, int value) throws IOException",
      "right" : "public final void writeNumberField(String fieldName, int value) throws IOException",
      "info" : "MethodDeclaration[60596-60979]:MethodDeclaration[60847-61230]"
    }, {
      "left" : "public final void writeNumberField(String fieldName, long value) throws IOException",
      "right" : "public final void writeNumberField(String fieldName, long value) throws IOException",
      "info" : "MethodDeclaration[60985-61369]:MethodDeclaration[61236-61620]"
    }, {
      "left" : "public final void writeNumberField(String fieldName, double value) throws IOException",
      "right" : "public final void writeNumberField(String fieldName, double value) throws IOException",
      "info" : "MethodDeclaration[61375-61761]:MethodDeclaration[61626-62012]"
    }, {
      "left" : "public final void writeNumberField(String fieldName, float value) throws IOException",
      "right" : "public final void writeNumberField(String fieldName, float value) throws IOException",
      "info" : "MethodDeclaration[61767-62152]:MethodDeclaration[62018-62403]"
    }, {
      "left" : "public final void writeNumberField(String fieldName, BigDecimal value) throws IOException",
      "right" : "public final void writeNumberField(String fieldName, BigDecimal value) throws IOException",
      "info" : "MethodDeclaration[62158-62555]:MethodDeclaration[62409-62806]"
    }, {
      "left" : "public final void writeBinaryField(String fieldName, byte[] data) throws IOException",
      "right" : "public final void writeBinaryField(String fieldName, byte[] data) throws IOException",
      "info" : "MethodDeclaration[62561-62967]:MethodDeclaration[62812-63218]"
    }, {
      "left" : "public final void writeArrayFieldStart(String fieldName) throws IOException",
      "right" : "public final void writeArrayFieldStart(String fieldName) throws IOException",
      "info" : "MethodDeclaration[62973-63551]:MethodDeclaration[63224-63802]"
    }, {
      "left" : "public final void writeObjectFieldStart(String fieldName) throws IOException",
      "right" : "public final void writeObjectFieldStart(String fieldName) throws IOException",
      "info" : "MethodDeclaration[63557-64144]:MethodDeclaration[63808-64395]"
    }, {
      "left" : "public final void writeObjectField(String fieldName, Object pojo) throws IOException",
      "right" : "public final void writeObjectField(String fieldName, Object pojo) throws IOException",
      "info" : "MethodDeclaration[64150-64558]:MethodDeclaration[64401-64809]"
    }, {
      "left" : "public void writeOmittedField(String fieldName) throws IOException",
      "right" : "public void writeOmittedField(String fieldName) throws IOException",
      "info" : "MethodDeclaration[64564-64926]:MethodDeclaration[64815-65177]"
    }, {
      "left" : "public void copyCurrentEvent(JsonParser p) throws IOException",
      "right" : "public void copyCurrentEvent(JsonParser p) throws IOException",
      "info" : "MethodDeclaration[65120-67780]:MethodDeclaration[65371-68031]"
    }, {
      "left" : "public void copyCurrentStructure(JsonParser p) throws IOException",
      "right" : "public void copyCurrentStructure(JsonParser p) throws IOException",
      "info" : "MethodDeclaration[67786-70081]:MethodDeclaration[68037-70332]"
    }, {
      "left" : "public abstract JsonStreamContext getOutputContext();",
      "right" : "public abstract JsonStreamContext getOutputContext();",
      "info" : "MethodDeclaration[70265-70453]:MethodDeclaration[70516-70704]"
    }, {
      "left" : "public abstract void flush() throws IOException;",
      "right" : "public abstract void flush() throws IOException;",
      "info" : "MethodDeclaration[70638-70871]:MethodDeclaration[70889-71122]"
    }, {
      "left" : "public abstract boolean isClosed();",
      "right" : "public abstract boolean isClosed();",
      "info" : "MethodDeclaration[70877-71067]:MethodDeclaration[71128-71318]"
    }, {
      "left" : "public abstract void close() throws IOException;",
      "right" : "public abstract void close() throws IOException;",
      "info" : "MethodDeclaration[71249-71912]:MethodDeclaration[71500-72163]"
    }, {
      "left" : "protected void _reportError(String msg) throws JsonGenerationException",
      "right" : "protected void _reportError(String msg) throws JsonGenerationException",
      "info" : "MethodDeclaration[72100-72510]:MethodDeclaration[72351-72761]"
    }, {
      "left" : "protected final void _throwInternal()",
      "right" : "protected final void _throwInternal()",
      "info" : "MethodDeclaration[72516-72586]:MethodDeclaration[72767-72837]"
    }, {
      "left" : "protected void _reportUnsupportedOperation()",
      "right" : "protected void _reportUnsupportedOperation()",
      "info" : "MethodDeclaration[72592-72763]:MethodDeclaration[72843-73014]"
    }, {
      "left" : "protected final void _verifyOffsets(int arrayLength, int offset, int length)",
      "right" : "protected final void _verifyOffsets(int arrayLength, int offset, int length)",
      "info" : "MethodDeclaration[72769-73173]:MethodDeclaration[73020-73424]"
    }, {
      "left" : "protected void _writeSimpleObject(Object value)  throws IOException",
      "right" : "protected void _writeSimpleObject(Object value)  throws IOException",
      "info" : "MethodDeclaration[73179-75790]:MethodDeclaration[73430-76041]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9691-9914]:Block[9691-9914]"
    }, {
      "left" : "int flags = 0;",
      "right" : "int flags = 0;",
      "info" : "VariableDeclarationStatement[9705-9719]:VariableDeclarationStatement[9705-9719]"
    }, {
      "left" : "for (Feature f : values())",
      "right" : "for (Feature f : values())",
      "info" : "EnhancedForStatement[9732-9878]:EnhancedForStatement[9732-9878]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9759-9878]:Block[9759-9878]"
    }, {
      "left" : "if (f.enabledByDefault())",
      "right" : "if (f.enabledByDefault())",
      "info" : "IfStatement[9777-9864]:IfStatement[9777-9864]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9803-9864]:Block[9803-9864]"
    }, {
      "left" : "flags |= f.getMask();",
      "right" : "flags |= f.getMask();",
      "info" : "ExpressionStatement[9825-9846]:ExpressionStatement[9825-9846]"
    }, {
      "left" : "return flags;",
      "right" : "return flags;",
      "info" : "ReturnStatement[9891-9904]:ReturnStatement[9891-9904]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9970-10061]:Block[9970-10061]"
    }, {
      "left" : "_defaultState = defaultState;",
      "right" : "_defaultState = defaultState;",
      "info" : "ExpressionStatement[9984-10013]:ExpressionStatement[9984-10013]"
    }, {
      "left" : "_mask = (1 << ordinal());",
      "right" : "_mask = (1 << ordinal());",
      "info" : "ExpressionStatement[10026-10051]:ExpressionStatement[10026-10051]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10105-10130]:Block[10105-10130]"
    }, {
      "left" : "return _defaultState;",
      "right" : "return _defaultState;",
      "info" : "ReturnStatement[10107-10128]:ReturnStatement[10107-10128]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10222-10254]:Block[10222-10254]"
    }, {
      "left" : "return (flags & _mask) != 0;",
      "right" : "return (flags & _mask) != 0;",
      "info" : "ReturnStatement[10224-10252]:ReturnStatement[10224-10252]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10285-10302]:Block[10285-10302]"
    }, {
      "left" : "return _mask;",
      "right" : "return _mask;",
      "info" : "ReturnStatement[10287-10300]:ReturnStatement[10287-10300]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10931-10934]:Block[10931-10934]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12534-12609]:Block[12534-12609]"
    }, {
      "left" : "if (state)",
      "right" : "if (state)",
      "info" : "IfStatement[12544-12582]:IfStatement[12544-12582]"
    }, {
      "left" : "enable(f);",
      "right" : "enable(f);",
      "info" : "ExpressionStatement[12555-12565]:ExpressionStatement[12555-12565]"
    }, {
      "left" : "disable(f);",
      "right" : "disable(f);",
      "info" : "ExpressionStatement[12571-12582]:ExpressionStatement[12571-12582]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[12591-12603]:ReturnStatement[12591-12603]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14235-14385]:Block[14235-14385]"
    }, {
      "left" : "int oldState = getFeatureMask();",
      "right" : "int oldState = getFeatureMask();",
      "info" : "VariableDeclarationStatement[14245-14277]:VariableDeclarationStatement[14245-14277]"
    }, {
      "left" : "int newState = (oldState & ~mask) | (values & mask);",
      "right" : "int newState = (oldState & ~mask) | (values & mask);",
      "info" : "VariableDeclarationStatement[14286-14338]:VariableDeclarationStatement[14286-14338]"
    }, {
      "left" : "return setFeatureMask(newState);",
      "right" : "return setFeatureMask(newState);",
      "info" : "ReturnStatement[14347-14379]:ReturnStatement[14347-14379]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14693-14718]:Block[14693-14718]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[14703-14712]:ReturnStatement[14703-14712]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15323-15612]:Block[15323-15612]"
    }, {
      "left" : "throw new IllegalArgumentException(\"No FormatFeatures defined for generator of type \"+getClass().getName());",
      "right" : "throw new IllegalArgumentException(\"No FormatFeatures defined for generator of type \"+getClass().getName());",
      "info" : "ThrowStatement[15333-15441]:ThrowStatement[15333-15441]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16478-16658]:Block[16478-16658]"
    }, {
      "left" : "throw new UnsupportedOperationException(\"Generator of type \"+getClass().getName()+\" does not support schema of type '\"\n                +schema.getSchemaType()+\"'\");",
      "right" : "throw new UnsupportedOperationException(\"Generator of type \"+getClass().getName()+\" does not support schema of type '\"\n                +schema.getSchemaType()+\"'\");",
      "info" : "ThrowStatement[16488-16652]:ThrowStatement[16488-16652]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16847-16863]:Block[16847-16863]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[16849-16861]:ReturnStatement[16849-16861]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17534-17594]:Block[17534-17594]"
    }, {
      "left" : "_cfgPrettyPrinter = pp;",
      "right" : "_cfgPrettyPrinter = pp;",
      "info" : "ExpressionStatement[17544-17567]:ExpressionStatement[17544-17567]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[17576-17588]:ReturnStatement[17576-17588]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17824-17865]:Block[17824-17865]"
    }, {
      "left" : "return _cfgPrettyPrinter;",
      "right" : "return _cfgPrettyPrinter;",
      "info" : "ReturnStatement[17834-17859]:ReturnStatement[17834-17859]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19309-19325]:Block[19309-19325]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[19311-19323]:ReturnStatement[19311-19323]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19991-20004]:Block[19991-20004]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[19993-20002]:ReturnStatement[19993-20002]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20174-20190]:Block[20174-20190]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[20176-20188]:ReturnStatement[20176-20188]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20463-20479]:Block[20463-20479]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[20465-20477]:ReturnStatement[20465-20477]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20923-20981]:Block[20923-20981]"
    }, {
      "left" : "throw new UnsupportedOperationException();",
      "right" : "throw new UnsupportedOperationException();",
      "info" : "ThrowStatement[20933-20975]:ThrowStatement[20933-20975]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21956-21984]:Block[21956-21984]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[21966-21978]:ReturnStatement[21966-21978]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22904-22930]:Block[22904-22930]"
    }, {
      "left" : "return -1;",
      "right" : "return -1;",
      "info" : "ReturnStatement[22914-22924]:ReturnStatement[22914-22924]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23424-23547]:Block[23424-23547]"
    }, {
      "left" : "JsonStreamContext ctxt = getOutputContext();",
      "right" : "JsonStreamContext ctxt = getOutputContext();",
      "info" : "VariableDeclarationStatement[23434-23478]:VariableDeclarationStatement[23434-23478]"
    }, {
      "left" : "return (ctxt == null) ? null : ctxt.getCurrentValue();",
      "right" : "return (ctxt == null) ? null : ctxt.getCurrentValue();",
      "info" : "ReturnStatement[23487-23541]:ReturnStatement[23487-23541]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23753-23888]:Block[23753-23888]"
    }, {
      "left" : "JsonStreamContext ctxt = getOutputContext();",
      "right" : "JsonStreamContext ctxt = getOutputContext();",
      "info" : "VariableDeclarationStatement[23763-23807]:VariableDeclarationStatement[23763-23807]"
    }, {
      "left" : "if (ctxt != null)",
      "right" : "if (ctxt != null)",
      "info" : "IfStatement[23816-23882]:IfStatement[23816-23882]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23834-23882]:Block[23834-23882]"
    }, {
      "left" : "ctxt.setCurrentValue(v);",
      "right" : "ctxt.setCurrentValue(v);",
      "info" : "ExpressionStatement[23848-23872]:ExpressionStatement[23848-23872]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24411-24428]:Block[24411-24428]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[24413-24426]:ReturnStatement[24413-24426]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25085-25102]:Block[25085-25102]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[25087-25100]:ReturnStatement[25087-25100]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25718-25735]:Block[25718-25735]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[25720-25733]:ReturnStatement[25720-25733]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26145-26162]:Block[26145-26162]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[26147-26160]:ReturnStatement[26147-26160]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26520-26536]:Block[26520-26536]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[26522-26534]:ReturnStatement[26522-26534]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27131-27148]:Block[27131-27148]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[27133-27146]:ReturnStatement[27133-27146]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28400-28434]:Block[28400-28434]"
    }, {
      "left" : "writeStartArray();",
      "right" : "writeStartArray();",
      "info" : "ExpressionStatement[28410-28428]:ExpressionStatement[28410-28428]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29840-29910]:Block[29840-29910]"
    }, {
      "left" : "writeStartObject();",
      "right" : "writeStartObject();",
      "info" : "ExpressionStatement[29850-29869]:ExpressionStatement[29850-29869]"
    }, {
      "left" : "setCurrentValue(forValue);",
      "right" : "setCurrentValue(forValue);",
      "info" : "ExpressionStatement[29878-29904]:ExpressionStatement[29878-29904]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32005-32055]:Block[32005-32055]"
    }, {
      "left" : "writeFieldName(Long.toString(id));",
      "right" : "writeFieldName(Long.toString(id));",
      "info" : "ExpressionStatement[32015-32049]:ExpressionStatement[32015-32049]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32818-33143]:Block[32818-33143]"
    }, {
      "left" : "if (array == null)",
      "right" : "if (array == null)",
      "info" : "IfStatement[32828-32920]:IfStatement[32828-32920]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32847-32920]:Block[32847-32920]"
    }, {
      "left" : "throw new IllegalArgumentException(\"null array\");",
      "right" : "throw new IllegalArgumentException(\"null array\");",
      "info" : "ThrowStatement[32861-32910]:ThrowStatement[32861-32910]"
    }, {
      "left" : "_verifyOffsets(array.length, offset, length);",
      "right" : "_verifyOffsets(array.length, offset, length);",
      "info" : "ExpressionStatement[32929-32974]:ExpressionStatement[32929-32974]"
    }, {
      "left" : "writeStartArray();",
      "right" : "writeStartArray();",
      "info" : "ExpressionStatement[32983-33001]:ExpressionStatement[32983-33001]"
    }, {
      "left" : "for (int i = offset, end = offset+length; i < end; ++i)",
      "right" : "for (int i = offset, end = offset+length; i < end; ++i)",
      "info" : "ForStatement[33010-33112]:ForStatement[33010-33112]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33066-33112]:Block[33066-33112]"
    }, {
      "left" : "writeNumber(array[i]);",
      "right" : "writeNumber(array[i]);",
      "info" : "ExpressionStatement[33080-33102]:ExpressionStatement[33080-33102]"
    }, {
      "left" : "writeEndArray();",
      "right" : "writeEndArray();",
      "info" : "ExpressionStatement[33121-33137]:ExpressionStatement[33121-33137]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33709-34034]:Block[33709-34034]"
    }, {
      "left" : "if (array == null)",
      "right" : "if (array == null)",
      "info" : "IfStatement[33719-33811]:IfStatement[33719-33811]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33738-33811]:Block[33738-33811]"
    }, {
      "left" : "throw new IllegalArgumentException(\"null array\");",
      "right" : "throw new IllegalArgumentException(\"null array\");",
      "info" : "ThrowStatement[33752-33801]:ThrowStatement[33752-33801]"
    }, {
      "left" : "_verifyOffsets(array.length, offset, length);",
      "right" : "_verifyOffsets(array.length, offset, length);",
      "info" : "ExpressionStatement[33820-33865]:ExpressionStatement[33820-33865]"
    }, {
      "left" : "writeStartArray();",
      "right" : "writeStartArray();",
      "info" : "ExpressionStatement[33874-33892]:ExpressionStatement[33874-33892]"
    }, {
      "left" : "for (int i = offset, end = offset+length; i < end; ++i)",
      "right" : "for (int i = offset, end = offset+length; i < end; ++i)",
      "info" : "ForStatement[33901-34003]:ForStatement[33901-34003]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33957-34003]:Block[33957-34003]"
    }, {
      "left" : "writeNumber(array[i]);",
      "right" : "writeNumber(array[i]);",
      "info" : "ExpressionStatement[33971-33993]:ExpressionStatement[33971-33993]"
    }, {
      "left" : "writeEndArray();",
      "right" : "writeEndArray();",
      "info" : "ExpressionStatement[34012-34028]:ExpressionStatement[34012-34028]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34604-34929]:Block[34604-34929]"
    }, {
      "left" : "if (array == null)",
      "right" : "if (array == null)",
      "info" : "IfStatement[34614-34706]:IfStatement[34614-34706]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34633-34706]:Block[34633-34706]"
    }, {
      "left" : "throw new IllegalArgumentException(\"null array\");",
      "right" : "throw new IllegalArgumentException(\"null array\");",
      "info" : "ThrowStatement[34647-34696]:ThrowStatement[34647-34696]"
    }, {
      "left" : "_verifyOffsets(array.length, offset, length);",
      "right" : "_verifyOffsets(array.length, offset, length);",
      "info" : "ExpressionStatement[34715-34760]:ExpressionStatement[34715-34760]"
    }, {
      "left" : "writeStartArray();",
      "right" : "writeStartArray();",
      "info" : "ExpressionStatement[34769-34787]:ExpressionStatement[34769-34787]"
    }, {
      "left" : "for (int i = offset, end = offset+length; i < end; ++i)",
      "right" : "for (int i = offset, end = offset+length; i < end; ++i)",
      "info" : "ForStatement[34796-34898]:ForStatement[34796-34898]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34852-34898]:Block[34852-34898]"
    }, {
      "left" : "writeNumber(array[i]);",
      "right" : "writeNumber(array[i]);",
      "info" : "ExpressionStatement[34866-34888]:ExpressionStatement[34866-34888]"
    }, {
      "left" : "writeEndArray();",
      "right" : "writeEndArray();",
      "info" : "ExpressionStatement[34907-34923]:ExpressionStatement[34907-34923]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41985-42026]:Block[41985-42026]"
    }, {
      "left" : "writeRaw(raw.getValue());",
      "right" : "writeRaw(raw.getValue());",
      "info" : "ExpressionStatement[41995-42020]:ExpressionStatement[41995-42020]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42977-43023]:Block[42977-43023]"
    }, {
      "left" : "writeRawValue(raw.getValue());",
      "right" : "writeRawValue(raw.getValue());",
      "info" : "ExpressionStatement[42987-43017]:ExpressionStatement[42987-43017]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44478-44561]:Block[44478-44561]"
    }, {
      "left" : "writeBinary(Base64Variants.getDefaultVariant(), data, offset, len);",
      "right" : "writeBinary(Base64Variants.getDefaultVariant(), data, offset, len);",
      "info" : "ExpressionStatement[44488-44555]:ExpressionStatement[44488-44555]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44900-44986]:Block[44900-44986]"
    }, {
      "left" : "writeBinary(Base64Variants.getDefaultVariant(), data, 0, data.length);",
      "right" : "writeBinary(Base64Variants.getDefaultVariant(), data, 0, data.length);",
      "info" : "ExpressionStatement[44910-44980]:ExpressionStatement[44910-44980]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45773-45862]:Block[45773-45862]"
    }, {
      "left" : "return writeBinary(Base64Variants.getDefaultVariant(), data, dataLength);",
      "right" : "return writeBinary(Base64Variants.getDefaultVariant(), data, dataLength);",
      "info" : "ReturnStatement[45783-45856]:ReturnStatement[45783-45856]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47618-47643]:Block[47618-47643]"
    }, {
      "left" : "writeNumber((int) v);",
      "right" : "writeNumber((int) v);",
      "info" : "ExpressionStatement[47620-47641]:ExpressionStatement[47620-47641]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52460-52660]:Block[52460-52911]"
    }, {
      "left" : "throw new JsonGenerationException(\"No native support for writing embedded objects\",\n                this);",
      "right" : "throw new JsonGenerationException(\"No native support for writing embedded objects of type \"\n                +object.getClass().getName(),\n                this);",
      "info" : "ThrowStatement[52548-52654]:ThrowStatement[52745-52905]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53411-53511]:Block[53662-53762]"
    }, {
      "left" : "throw new JsonGenerationException(\"No native support for writing Object Ids\", this);",
      "right" : "throw new JsonGenerationException(\"No native support for writing Object Ids\", this);",
      "info" : "ThrowStatement[53421-53505]:ThrowStatement[53672-53756]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54034-54134]:Block[54285-54385]"
    }, {
      "left" : "throw new JsonGenerationException(\"No native support for writing Object Ids\", this);",
      "right" : "throw new JsonGenerationException(\"No native support for writing Object Ids\", this);",
      "info" : "ThrowStatement[54044-54128]:ThrowStatement[54295-54379]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54675-54773]:Block[54926-55024]"
    }, {
      "left" : "throw new JsonGenerationException(\"No native support for writing Type Ids\", this);",
      "right" : "throw new JsonGenerationException(\"No native support for writing Type Ids\", this);",
      "info" : "ThrowStatement[54685-54767]:ThrowStatement[54936-55018]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59778-59848]:Block[60029-60099]"
    }, {
      "left" : "writeFieldName(fieldName);",
      "right" : "writeFieldName(fieldName);",
      "info" : "ExpressionStatement[59788-59814]:ExpressionStatement[60039-60065]"
    }, {
      "left" : "writeString(value);",
      "right" : "writeString(value);",
      "info" : "ExpressionStatement[59823-59842]:ExpressionStatement[60074-60093]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60161-60232]:Block[60412-60483]"
    }, {
      "left" : "writeFieldName(fieldName);",
      "right" : "writeFieldName(fieldName);",
      "info" : "ExpressionStatement[60171-60197]:ExpressionStatement[60422-60448]"
    }, {
      "left" : "writeBoolean(value);",
      "right" : "writeBoolean(value);",
      "info" : "ExpressionStatement[60206-60226]:ExpressionStatement[60457-60477]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60527-60590]:Block[60778-60841]"
    }, {
      "left" : "writeFieldName(fieldName);",
      "right" : "writeFieldName(fieldName);",
      "info" : "ExpressionStatement[60537-60563]:ExpressionStatement[60788-60814]"
    }, {
      "left" : "writeNull();",
      "right" : "writeNull();",
      "info" : "ExpressionStatement[60572-60584]:ExpressionStatement[60823-60835]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60909-60979]:Block[61160-61230]"
    }, {
      "left" : "writeFieldName(fieldName);",
      "right" : "writeFieldName(fieldName);",
      "info" : "ExpressionStatement[60919-60945]:ExpressionStatement[61170-61196]"
    }, {
      "left" : "writeNumber(value);",
      "right" : "writeNumber(value);",
      "info" : "ExpressionStatement[60954-60973]:ExpressionStatement[61205-61224]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61299-61369]:Block[61550-61620]"
    }, {
      "left" : "writeFieldName(fieldName);",
      "right" : "writeFieldName(fieldName);",
      "info" : "ExpressionStatement[61309-61335]:ExpressionStatement[61560-61586]"
    }, {
      "left" : "writeNumber(value);",
      "right" : "writeNumber(value);",
      "info" : "ExpressionStatement[61344-61363]:ExpressionStatement[61595-61614]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61691-61761]:Block[61942-62012]"
    }, {
      "left" : "writeFieldName(fieldName);",
      "right" : "writeFieldName(fieldName);",
      "info" : "ExpressionStatement[61701-61727]:ExpressionStatement[61952-61978]"
    }, {
      "left" : "writeNumber(value);",
      "right" : "writeNumber(value);",
      "info" : "ExpressionStatement[61736-61755]:ExpressionStatement[61987-62006]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62082-62152]:Block[62333-62403]"
    }, {
      "left" : "writeFieldName(fieldName);",
      "right" : "writeFieldName(fieldName);",
      "info" : "ExpressionStatement[62092-62118]:ExpressionStatement[62343-62369]"
    }, {
      "left" : "writeNumber(value);",
      "right" : "writeNumber(value);",
      "info" : "ExpressionStatement[62127-62146]:ExpressionStatement[62378-62397]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62485-62555]:Block[62736-62806]"
    }, {
      "left" : "writeFieldName(fieldName);",
      "right" : "writeFieldName(fieldName);",
      "info" : "ExpressionStatement[62495-62521]:ExpressionStatement[62746-62772]"
    }, {
      "left" : "writeNumber(value);",
      "right" : "writeNumber(value);",
      "info" : "ExpressionStatement[62530-62549]:ExpressionStatement[62781-62800]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62898-62967]:Block[63149-63218]"
    }, {
      "left" : "writeFieldName(fieldName);",
      "right" : "writeFieldName(fieldName);",
      "info" : "ExpressionStatement[62908-62934]:ExpressionStatement[63159-63185]"
    }, {
      "left" : "writeBinary(data);",
      "right" : "writeBinary(data);",
      "info" : "ExpressionStatement[62943-62961]:ExpressionStatement[63194-63212]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63482-63551]:Block[63733-63802]"
    }, {
      "left" : "writeFieldName(fieldName);",
      "right" : "writeFieldName(fieldName);",
      "info" : "ExpressionStatement[63492-63518]:ExpressionStatement[63743-63769]"
    }, {
      "left" : "writeStartArray();",
      "right" : "writeStartArray();",
      "info" : "ExpressionStatement[63527-63545]:ExpressionStatement[63778-63796]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64074-64144]:Block[64325-64395]"
    }, {
      "left" : "writeFieldName(fieldName);",
      "right" : "writeFieldName(fieldName);",
      "info" : "ExpressionStatement[64084-64110]:ExpressionStatement[64335-64361]"
    }, {
      "left" : "writeStartObject();",
      "right" : "writeStartObject();",
      "info" : "ExpressionStatement[64119-64138]:ExpressionStatement[64370-64389]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64489-64558]:Block[64740-64809]"
    }, {
      "left" : "writeFieldName(fieldName);",
      "right" : "writeFieldName(fieldName);",
      "info" : "ExpressionStatement[64499-64525]:ExpressionStatement[64750-64776]"
    }, {
      "left" : "writeObject(pojo);",
      "right" : "writeObject(pojo);",
      "info" : "ExpressionStatement[64534-64552]:ExpressionStatement[64785-64803]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64923-64926]:Block[65174-65177]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65650-67780]:Block[65901-68031]"
    }, {
      "left" : "JsonToken t = p.currentToken();",
      "right" : "JsonToken t = p.currentToken();",
      "info" : "VariableDeclarationStatement[65660-65691]:VariableDeclarationStatement[65911-65942]"
    }, {
      "left" : "if (t == null)",
      "right" : "if (t == null)",
      "info" : "IfStatement[65737-65817]:IfStatement[65988-66068]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65752-65817]:Block[66003-66068]"
    }, {
      "left" : "_reportError(\"No current event to copy\");",
      "right" : "_reportError(\"No current event to copy\");",
      "info" : "ExpressionStatement[65766-65807]:ExpressionStatement[66017-66058]"
    }, {
      "left" : "switch (t.id()) {\n        case ID_NOT_AVAILABLE:\n            _reportError(\"No current event to copy\");\n            break; // never gets here\n        case ID_START_OBJECT:\n            writeStartObject();\n            break;\n        case ID_END_OBJECT:\n            writeEndObject();\n            break;\n        case ID_START_ARRAY:\n            writeStartArray();\n            break;\n        case ID_END_ARRAY:\n            writeEndArray();\n            break;\n        case ID_FIELD_NAME:\n            writeFieldName(p.getCurrentName());\n            break;\n        case ID_STRING:\n            if (p.hasTextCharacters()) {\n                writeString(p.getTextCharacters(), p.getTextOffset(), p.getTextLength());\n            } else {\n                writeString(p.getText());\n            }\n            break;\n        case ID_NUMBER_INT:\n        {\n            NumberType n = p.getNumberType();\n            if (n == NumberType.INT) {\n                writeNumber(p.getIntValue());\n            } else if (n == NumberType.BIG_INTEGER) {\n                writeNumber(p.getBigIntegerValue());\n            } else {\n                writeNumber(p.getLongValue());\n            }\n            break;\n        }\n        case ID_NUMBER_FLOAT:\n        {\n            NumberType n = p.getNumberType();\n            if (n == NumberType.BIG_DECIMAL) {\n                writeNumber(p.getDecimalValue());\n            } else if (n == NumberType.FLOAT) {\n                writeNumber(p.getFloatValue());\n            } else {\n                writeNumber(p.getDoubleValue());\n            }\n            break;\n        }\n        case ID_TRUE:\n            writeBoolean(true);\n            break;\n        case ID_FALSE:\n            writeBoolean(false);\n            break;\n        case ID_NULL:\n            writeNull();\n            break;\n        case ID_EMBEDDED_OBJECT:\n            writeObject(p.getEmbeddedObject());\n            break;\n        default:\n            _throwInternal();\n        }",
      "right" : "switch (t.id()) {\n        case ID_NOT_AVAILABLE:\n            _reportError(\"No current event to copy\");\n            break; // never gets here\n        case ID_START_OBJECT:\n            writeStartObject();\n            break;\n        case ID_END_OBJECT:\n            writeEndObject();\n            break;\n        case ID_START_ARRAY:\n            writeStartArray();\n            break;\n        case ID_END_ARRAY:\n            writeEndArray();\n            break;\n        case ID_FIELD_NAME:\n            writeFieldName(p.getCurrentName());\n            break;\n        case ID_STRING:\n            if (p.hasTextCharacters()) {\n                writeString(p.getTextCharacters(), p.getTextOffset(), p.getTextLength());\n            } else {\n                writeString(p.getText());\n            }\n            break;\n        case ID_NUMBER_INT:\n        {\n            NumberType n = p.getNumberType();\n            if (n == NumberType.INT) {\n                writeNumber(p.getIntValue());\n            } else if (n == NumberType.BIG_INTEGER) {\n                writeNumber(p.getBigIntegerValue());\n            } else {\n                writeNumber(p.getLongValue());\n            }\n            break;\n        }\n        case ID_NUMBER_FLOAT:\n        {\n            NumberType n = p.getNumberType();\n            if (n == NumberType.BIG_DECIMAL) {\n                writeNumber(p.getDecimalValue());\n            } else if (n == NumberType.FLOAT) {\n                writeNumber(p.getFloatValue());\n            } else {\n                writeNumber(p.getDoubleValue());\n            }\n            break;\n        }\n        case ID_TRUE:\n            writeBoolean(true);\n            break;\n        case ID_FALSE:\n            writeBoolean(false);\n            break;\n        case ID_NULL:\n            writeNull();\n            break;\n        case ID_EMBEDDED_OBJECT:\n            writeObject(p.getEmbeddedObject());\n            break;\n        default:\n            _throwInternal();\n        }",
      "info" : "SwitchStatement[65826-67774]:SwitchStatement[66077-68025]"
    }, {
      "left" : "case ID_NOT_AVAILABLE:",
      "right" : "case ID_NOT_AVAILABLE:",
      "info" : "SwitchCase[65852-65874]:SwitchCase[66103-66125]"
    }, {
      "left" : "_reportError(\"No current event to copy\");",
      "right" : "_reportError(\"No current event to copy\");",
      "info" : "ExpressionStatement[65887-65928]:ExpressionStatement[66138-66179]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[65941-65947]:BreakStatement[66192-66198]"
    }, {
      "left" : "case ID_START_OBJECT:",
      "right" : "case ID_START_OBJECT:",
      "info" : "SwitchCase[65975-65996]:SwitchCase[66226-66247]"
    }, {
      "left" : "writeStartObject();",
      "right" : "writeStartObject();",
      "info" : "ExpressionStatement[66009-66028]:ExpressionStatement[66260-66279]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[66041-66047]:BreakStatement[66292-66298]"
    }, {
      "left" : "case ID_END_OBJECT:",
      "right" : "case ID_END_OBJECT:",
      "info" : "SwitchCase[66056-66075]:SwitchCase[66307-66326]"
    }, {
      "left" : "writeEndObject();",
      "right" : "writeEndObject();",
      "info" : "ExpressionStatement[66088-66105]:ExpressionStatement[66339-66356]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[66118-66124]:BreakStatement[66369-66375]"
    }, {
      "left" : "case ID_START_ARRAY:",
      "right" : "case ID_START_ARRAY:",
      "info" : "SwitchCase[66133-66153]:SwitchCase[66384-66404]"
    }, {
      "left" : "writeStartArray();",
      "right" : "writeStartArray();",
      "info" : "ExpressionStatement[66166-66184]:ExpressionStatement[66417-66435]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[66197-66203]:BreakStatement[66448-66454]"
    }, {
      "left" : "case ID_END_ARRAY:",
      "right" : "case ID_END_ARRAY:",
      "info" : "SwitchCase[66212-66230]:SwitchCase[66463-66481]"
    }, {
      "left" : "writeEndArray();",
      "right" : "writeEndArray();",
      "info" : "ExpressionStatement[66243-66259]:ExpressionStatement[66494-66510]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[66272-66278]:BreakStatement[66523-66529]"
    }, {
      "left" : "case ID_FIELD_NAME:",
      "right" : "case ID_FIELD_NAME:",
      "info" : "SwitchCase[66287-66306]:SwitchCase[66538-66557]"
    }, {
      "left" : "writeFieldName(p.getCurrentName());",
      "right" : "writeFieldName(p.getCurrentName());",
      "info" : "ExpressionStatement[66319-66354]:ExpressionStatement[66570-66605]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[66367-66373]:BreakStatement[66618-66624]"
    }, {
      "left" : "case ID_STRING:",
      "right" : "case ID_STRING:",
      "info" : "SwitchCase[66382-66397]:SwitchCase[66633-66648]"
    }, {
      "left" : "if (p.hasTextCharacters())",
      "right" : "if (p.hasTextCharacters())",
      "info" : "IfStatement[66410-66605]:IfStatement[66661-66856]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66437-66542]:Block[66688-66793]"
    }, {
      "left" : "writeString(p.getTextCharacters(), p.getTextOffset(), p.getTextLength());",
      "right" : "writeString(p.getTextCharacters(), p.getTextOffset(), p.getTextLength());",
      "info" : "ExpressionStatement[66455-66528]:ExpressionStatement[66706-66779]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66548-66605]:Block[66799-66856]"
    }, {
      "left" : "writeString(p.getText());",
      "right" : "writeString(p.getText());",
      "info" : "ExpressionStatement[66566-66591]:ExpressionStatement[66817-66842]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[66618-66624]:BreakStatement[66869-66875]"
    }, {
      "left" : "case ID_NUMBER_INT:",
      "right" : "case ID_NUMBER_INT:",
      "info" : "SwitchCase[66633-66652]:SwitchCase[66884-66903]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66661-67011]:Block[66912-67262]"
    }, {
      "left" : "NumberType n = p.getNumberType();",
      "right" : "NumberType n = p.getNumberType();",
      "info" : "VariableDeclarationStatement[66675-66708]:VariableDeclarationStatement[66926-66959]"
    }, {
      "left" : "if (n == NumberType.INT)",
      "right" : "if (n == NumberType.INT)",
      "info" : "IfStatement[66721-66982]:IfStatement[66972-67233]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66746-66807]:Block[66997-67058]"
    }, {
      "left" : "writeNumber(p.getIntValue());",
      "right" : "writeNumber(p.getIntValue());",
      "info" : "ExpressionStatement[66764-66793]:ExpressionStatement[67015-67044]"
    }, {
      "left" : "if (n == NumberType.BIG_INTEGER)",
      "right" : "if (n == NumberType.BIG_INTEGER)",
      "info" : "IfStatement[66813-66982]:IfStatement[67064-67233]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66846-66914]:Block[67097-67165]"
    }, {
      "left" : "writeNumber(p.getBigIntegerValue());",
      "right" : "writeNumber(p.getBigIntegerValue());",
      "info" : "ExpressionStatement[66864-66900]:ExpressionStatement[67115-67151]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66920-66982]:Block[67171-67233]"
    }, {
      "left" : "writeNumber(p.getLongValue());",
      "right" : "writeNumber(p.getLongValue());",
      "info" : "ExpressionStatement[66938-66968]:ExpressionStatement[67189-67219]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[66995-67001]:BreakStatement[67246-67252]"
    }, {
      "left" : "case ID_NUMBER_FLOAT:",
      "right" : "case ID_NUMBER_FLOAT:",
      "info" : "SwitchCase[67020-67041]:SwitchCase[67271-67292]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67050-67403]:Block[67301-67654]"
    }, {
      "left" : "NumberType n = p.getNumberType();",
      "right" : "NumberType n = p.getNumberType();",
      "info" : "VariableDeclarationStatement[67064-67097]:VariableDeclarationStatement[67315-67348]"
    }, {
      "left" : "if (n == NumberType.BIG_DECIMAL)",
      "right" : "if (n == NumberType.BIG_DECIMAL)",
      "info" : "IfStatement[67110-67374]:IfStatement[67361-67625]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67143-67208]:Block[67394-67459]"
    }, {
      "left" : "writeNumber(p.getDecimalValue());",
      "right" : "writeNumber(p.getDecimalValue());",
      "info" : "ExpressionStatement[67161-67194]:ExpressionStatement[67412-67445]"
    }, {
      "left" : "if (n == NumberType.FLOAT)",
      "right" : "if (n == NumberType.FLOAT)",
      "info" : "IfStatement[67214-67374]:IfStatement[67465-67625]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67241-67304]:Block[67492-67555]"
    }, {
      "left" : "writeNumber(p.getFloatValue());",
      "right" : "writeNumber(p.getFloatValue());",
      "info" : "ExpressionStatement[67259-67290]:ExpressionStatement[67510-67541]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67310-67374]:Block[67561-67625]"
    }, {
      "left" : "writeNumber(p.getDoubleValue());",
      "right" : "writeNumber(p.getDoubleValue());",
      "info" : "ExpressionStatement[67328-67360]:ExpressionStatement[67579-67611]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[67387-67393]:BreakStatement[67638-67644]"
    }, {
      "left" : "case ID_TRUE:",
      "right" : "case ID_TRUE:",
      "info" : "SwitchCase[67412-67425]:SwitchCase[67663-67676]"
    }, {
      "left" : "writeBoolean(true);",
      "right" : "writeBoolean(true);",
      "info" : "ExpressionStatement[67438-67457]:ExpressionStatement[67689-67708]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[67470-67476]:BreakStatement[67721-67727]"
    }, {
      "left" : "case ID_FALSE:",
      "right" : "case ID_FALSE:",
      "info" : "SwitchCase[67485-67499]:SwitchCase[67736-67750]"
    }, {
      "left" : "writeBoolean(false);",
      "right" : "writeBoolean(false);",
      "info" : "ExpressionStatement[67512-67532]:ExpressionStatement[67763-67783]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[67545-67551]:BreakStatement[67796-67802]"
    }, {
      "left" : "case ID_NULL:",
      "right" : "case ID_NULL:",
      "info" : "SwitchCase[67560-67573]:SwitchCase[67811-67824]"
    }, {
      "left" : "writeNull();",
      "right" : "writeNull();",
      "info" : "ExpressionStatement[67586-67598]:ExpressionStatement[67837-67849]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[67611-67617]:BreakStatement[67862-67868]"
    }, {
      "left" : "case ID_EMBEDDED_OBJECT:",
      "right" : "case ID_EMBEDDED_OBJECT:",
      "info" : "SwitchCase[67626-67650]:SwitchCase[67877-67901]"
    }, {
      "left" : "writeObject(p.getEmbeddedObject());",
      "right" : "writeObject(p.getEmbeddedObject());",
      "info" : "ExpressionStatement[67663-67698]:ExpressionStatement[67914-67949]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[67711-67717]:BreakStatement[67962-67968]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[67726-67734]:SwitchCase[67977-67985]"
    }, {
      "left" : "_throwInternal();",
      "right" : "_throwInternal();",
      "info" : "ExpressionStatement[67747-67764]:ExpressionStatement[67998-68015]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69132-70081]:Block[69383-70332]"
    }, {
      "left" : "JsonToken t = p.currentToken();",
      "right" : "JsonToken t = p.currentToken();",
      "info" : "VariableDeclarationStatement[69142-69173]:VariableDeclarationStatement[69393-69424]"
    }, {
      "left" : "if (t == null)",
      "right" : "if (t == null)",
      "info" : "IfStatement[69182-69262]:IfStatement[69433-69513]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69197-69262]:Block[69448-69513]"
    }, {
      "left" : "_reportError(\"No current event to copy\");",
      "right" : "_reportError(\"No current event to copy\");",
      "info" : "ExpressionStatement[69211-69252]:ExpressionStatement[69462-69503]"
    }, {
      "left" : "int id = t.id();",
      "right" : "int id = t.id();",
      "info" : "VariableDeclarationStatement[69323-69339]:VariableDeclarationStatement[69574-69590]"
    }, {
      "left" : "if (id == ID_FIELD_NAME)",
      "right" : "if (id == ID_FIELD_NAME)",
      "info" : "IfStatement[69348-69545]:IfStatement[69599-69796]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69373-69545]:Block[69624-69796]"
    }, {
      "left" : "writeFieldName(p.getCurrentName());",
      "right" : "writeFieldName(p.getCurrentName());",
      "info" : "ExpressionStatement[69387-69422]:ExpressionStatement[69638-69673]"
    }, {
      "left" : "t = p.nextToken();",
      "right" : "t = p.nextToken();",
      "info" : "ExpressionStatement[69435-69453]:ExpressionStatement[69686-69704]"
    }, {
      "left" : "id = t.id();",
      "right" : "id = t.id();",
      "info" : "ExpressionStatement[69466-69478]:ExpressionStatement[69717-69729]"
    }, {
      "left" : "switch (id) {\n        case ID_START_OBJECT:\n            writeStartObject();\n            while (p.nextToken() != JsonToken.END_OBJECT) {\n                copyCurrentStructure(p);\n            }\n            writeEndObject();\n            break;\n        case ID_START_ARRAY:\n            writeStartArray();\n            while (p.nextToken() != JsonToken.END_ARRAY) {\n                copyCurrentStructure(p);\n            }\n            writeEndArray();\n            break;\n        default:\n            copyCurrentEvent(p);\n        }",
      "right" : "switch (id) {\n        case ID_START_OBJECT:\n            writeStartObject();\n            while (p.nextToken() != JsonToken.END_OBJECT) {\n                copyCurrentStructure(p);\n            }\n            writeEndObject();\n            break;\n        case ID_START_ARRAY:\n            writeStartArray();\n            while (p.nextToken() != JsonToken.END_ARRAY) {\n                copyCurrentStructure(p);\n            }\n            writeEndArray();\n            break;\n        default:\n            copyCurrentEvent(p);\n        }",
      "info" : "SwitchStatement[69554-70075]:SwitchStatement[69805-70326]"
    }, {
      "left" : "case ID_START_OBJECT:",
      "right" : "case ID_START_OBJECT:",
      "info" : "SwitchCase[69576-69597]:SwitchCase[69827-69848]"
    }, {
      "left" : "writeStartObject();",
      "right" : "writeStartObject();",
      "info" : "ExpressionStatement[69610-69629]:ExpressionStatement[69861-69880]"
    }, {
      "left" : "while (p.nextToken() != JsonToken.END_OBJECT)",
      "right" : "while (p.nextToken() != JsonToken.END_OBJECT)",
      "info" : "WhileStatement[69642-69744]:WhileStatement[69893-69995]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69688-69744]:Block[69939-69995]"
    }, {
      "left" : "copyCurrentStructure(p);",
      "right" : "copyCurrentStructure(p);",
      "info" : "ExpressionStatement[69706-69730]:ExpressionStatement[69957-69981]"
    }, {
      "left" : "writeEndObject();",
      "right" : "writeEndObject();",
      "info" : "ExpressionStatement[69757-69774]:ExpressionStatement[70008-70025]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[69787-69793]:BreakStatement[70038-70044]"
    }, {
      "left" : "case ID_START_ARRAY:",
      "right" : "case ID_START_ARRAY:",
      "info" : "SwitchCase[69802-69822]:SwitchCase[70053-70073]"
    }, {
      "left" : "writeStartArray();",
      "right" : "writeStartArray();",
      "info" : "ExpressionStatement[69835-69853]:ExpressionStatement[70086-70104]"
    }, {
      "left" : "while (p.nextToken() != JsonToken.END_ARRAY)",
      "right" : "while (p.nextToken() != JsonToken.END_ARRAY)",
      "info" : "WhileStatement[69866-69967]:WhileStatement[70117-70218]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69911-69967]:Block[70162-70218]"
    }, {
      "left" : "copyCurrentStructure(p);",
      "right" : "copyCurrentStructure(p);",
      "info" : "ExpressionStatement[69929-69953]:ExpressionStatement[70180-70204]"
    }, {
      "left" : "writeEndArray();",
      "right" : "writeEndArray();",
      "info" : "ExpressionStatement[69980-69996]:ExpressionStatement[70231-70247]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[70009-70015]:BreakStatement[70260-70266]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[70024-70032]:SwitchCase[70275-70283]"
    }, {
      "left" : "copyCurrentEvent(p);",
      "right" : "copyCurrentEvent(p);",
      "info" : "ExpressionStatement[70045-70065]:ExpressionStatement[70296-70316]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72449-72510]:Block[72700-72761]"
    }, {
      "left" : "throw new JsonGenerationException(msg, this);",
      "right" : "throw new JsonGenerationException(msg, this);",
      "info" : "ThrowStatement[72459-72504]:ThrowStatement[72710-72755]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72554-72586]:Block[72805-72837]"
    }, {
      "left" : "VersionUtil.throwInternal();",
      "right" : "VersionUtil.throwInternal();",
      "info" : "ExpressionStatement[72556-72584]:ExpressionStatement[72807-72835]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72637-72763]:Block[72888-73014]"
    }, {
      "left" : "throw new UnsupportedOperationException(\"Operation not supported by generator of type \"+getClass().getName());",
      "right" : "throw new UnsupportedOperationException(\"Operation not supported by generator of type \"+getClass().getName());",
      "info" : "ThrowStatement[72647-72757]:ThrowStatement[72898-73008]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72884-73173]:Block[73135-73424]"
    }, {
      "left" : "if ((offset < 0) || (offset + length) > arrayLength)",
      "right" : "if ((offset < 0) || (offset + length) > arrayLength)",
      "info" : "IfStatement[72894-73167]:IfStatement[73145-73418]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72947-73167]:Block[73198-73418]"
    }, {
      "left" : "throw new IllegalArgumentException(String.format(\n                    \"invalid argument(s) (offset=%d, length=%d) for input array of %d element\",\n                    offset, length, arrayLength));",
      "right" : "throw new IllegalArgumentException(String.format(\n                    \"invalid argument(s) (offset=%d, length=%d) for input array of %d element\",\n                    offset, length, arrayLength));",
      "info" : "ThrowStatement[72961-73157]:ThrowStatement[73212-73408]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73532-75790]:Block[73783-76041]"
    }, {
      "left" : "if (value == null)",
      "right" : "if (value == null)",
      "info" : "IfStatement[73755-73830]:IfStatement[74006-74081]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73774-73830]:Block[74025-74081]"
    }, {
      "left" : "writeNull();",
      "right" : "writeNull();",
      "info" : "ExpressionStatement[73788-73800]:ExpressionStatement[74039-74051]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[73813-73820]:ReturnStatement[74064-74071]"
    }, {
      "left" : "if (value instanceof String)",
      "right" : "if (value instanceof String)",
      "info" : "IfStatement[73839-73940]:IfStatement[74090-74191]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73868-73940]:Block[74119-74191]"
    }, {
      "left" : "writeString((String) value);",
      "right" : "writeString((String) value);",
      "info" : "ExpressionStatement[73882-73910]:ExpressionStatement[74133-74161]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[73923-73930]:ReturnStatement[74174-74181]"
    }, {
      "left" : "if (value instanceof Number)",
      "right" : "if (value instanceof Number)",
      "info" : "IfStatement[73949-75596]:IfStatement[74200-75847]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73978-75249]:Block[74229-75500]"
    }, {
      "left" : "Number n = (Number) value;",
      "right" : "Number n = (Number) value;",
      "info" : "VariableDeclarationStatement[73992-74018]:VariableDeclarationStatement[74243-74269]"
    }, {
      "left" : "if (n instanceof Integer)",
      "right" : "if (n instanceof Integer)",
      "info" : "IfStatement[74031-75239]:IfStatement[74282-75490]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74057-74139]:Block[74308-74390]"
    }, {
      "left" : "writeNumber(n.intValue());",
      "right" : "writeNumber(n.intValue());",
      "info" : "ExpressionStatement[74075-74101]:ExpressionStatement[74326-74352]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[74118-74125]:ReturnStatement[74369-74376]"
    }, {
      "left" : "if (n instanceof Long)",
      "right" : "if (n instanceof Long)",
      "info" : "IfStatement[74145-75239]:IfStatement[74396-75490]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74168-74251]:Block[74419-74502]"
    }, {
      "left" : "writeNumber(n.longValue());",
      "right" : "writeNumber(n.longValue());",
      "info" : "ExpressionStatement[74186-74213]:ExpressionStatement[74437-74464]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[74230-74237]:ReturnStatement[74481-74488]"
    }, {
      "left" : "if (n instanceof Double)",
      "right" : "if (n instanceof Double)",
      "info" : "IfStatement[74257-75239]:IfStatement[74508-75490]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74282-74367]:Block[74533-74618]"
    }, {
      "left" : "writeNumber(n.doubleValue());",
      "right" : "writeNumber(n.doubleValue());",
      "info" : "ExpressionStatement[74300-74329]:ExpressionStatement[74551-74580]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[74346-74353]:ReturnStatement[74597-74604]"
    }, {
      "left" : "if (n instanceof Float)",
      "right" : "if (n instanceof Float)",
      "info" : "IfStatement[74373-75239]:IfStatement[74624-75490]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74397-74481]:Block[74648-74732]"
    }, {
      "left" : "writeNumber(n.floatValue());",
      "right" : "writeNumber(n.floatValue());",
      "info" : "ExpressionStatement[74415-74443]:ExpressionStatement[74666-74694]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[74460-74467]:ReturnStatement[74711-74718]"
    }, {
      "left" : "if (n instanceof Short)",
      "right" : "if (n instanceof Short)",
      "info" : "IfStatement[74487-75239]:IfStatement[74738-75490]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74511-74595]:Block[74762-74846]"
    }, {
      "left" : "writeNumber(n.shortValue());",
      "right" : "writeNumber(n.shortValue());",
      "info" : "ExpressionStatement[74529-74557]:ExpressionStatement[74780-74808]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[74574-74581]:ReturnStatement[74825-74832]"
    }, {
      "left" : "if (n instanceof Byte)",
      "right" : "if (n instanceof Byte)",
      "info" : "IfStatement[74601-75239]:IfStatement[74852-75490]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74624-74707]:Block[74875-74958]"
    }, {
      "left" : "writeNumber(n.byteValue());",
      "right" : "writeNumber(n.byteValue());",
      "info" : "ExpressionStatement[74642-74669]:ExpressionStatement[74893-74920]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[74686-74693]:ReturnStatement[74937-74944]"
    }, {
      "left" : "if (n instanceof BigInteger)",
      "right" : "if (n instanceof BigInteger)",
      "info" : "IfStatement[74713-75239]:IfStatement[74964-75490]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74742-74826]:Block[74993-75077]"
    }, {
      "left" : "writeNumber((BigInteger) n);",
      "right" : "writeNumber((BigInteger) n);",
      "info" : "ExpressionStatement[74760-74788]:ExpressionStatement[75011-75039]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[74805-74812]:ReturnStatement[75056-75063]"
    }, {
      "left" : "if (n instanceof BigDecimal)",
      "right" : "if (n instanceof BigDecimal)",
      "info" : "IfStatement[74832-75239]:IfStatement[75083-75490]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74861-74979]:Block[75112-75230]"
    }, {
      "left" : "writeNumber((BigDecimal) n);",
      "right" : "writeNumber((BigDecimal) n);",
      "info" : "ExpressionStatement[74879-74907]:ExpressionStatement[75130-75158]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[74924-74931]:ReturnStatement[75175-75182]"
    }, {
      "left" : "if (n instanceof AtomicInteger)",
      "right" : "if (n instanceof AtomicInteger)",
      "info" : "IfStatement[74985-75239]:IfStatement[75236-75490]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75017-75112]:Block[75268-75363]"
    }, {
      "left" : "writeNumber(((AtomicInteger) n).get());",
      "right" : "writeNumber(((AtomicInteger) n).get());",
      "info" : "ExpressionStatement[75035-75074]:ExpressionStatement[75286-75325]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[75091-75098]:ReturnStatement[75342-75349]"
    }, {
      "left" : "if (n instanceof AtomicLong)",
      "right" : "if (n instanceof AtomicLong)",
      "info" : "IfStatement[75118-75239]:IfStatement[75369-75490]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75147-75239]:Block[75398-75490]"
    }, {
      "left" : "writeNumber(((AtomicLong) n).get());",
      "right" : "writeNumber(((AtomicLong) n).get());",
      "info" : "ExpressionStatement[75165-75201]:ExpressionStatement[75416-75452]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[75218-75225]:ReturnStatement[75469-75476]"
    }, {
      "left" : "if (value instanceof byte[])",
      "right" : "if (value instanceof byte[])",
      "info" : "IfStatement[75255-75596]:IfStatement[75506-75847]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75284-75356]:Block[75535-75607]"
    }, {
      "left" : "writeBinary((byte[]) value);",
      "right" : "writeBinary((byte[]) value);",
      "info" : "ExpressionStatement[75298-75326]:ExpressionStatement[75549-75577]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[75339-75346]:ReturnStatement[75590-75597]"
    }, {
      "left" : "if (value instanceof Boolean)",
      "right" : "if (value instanceof Boolean)",
      "info" : "IfStatement[75362-75596]:IfStatement[75613-75847]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75392-75466]:Block[75643-75717]"
    }, {
      "left" : "writeBoolean((Boolean) value);",
      "right" : "writeBoolean((Boolean) value);",
      "info" : "ExpressionStatement[75406-75436]:ExpressionStatement[75657-75687]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[75449-75456]:ReturnStatement[75700-75707]"
    }, {
      "left" : "if (value instanceof AtomicBoolean)",
      "right" : "if (value instanceof AtomicBoolean)",
      "info" : "IfStatement[75472-75596]:IfStatement[75723-75847]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75508-75596]:Block[75759-75847]"
    }, {
      "left" : "writeBoolean(((AtomicBoolean) value).get());",
      "right" : "writeBoolean(((AtomicBoolean) value).get());",
      "info" : "ExpressionStatement[75522-75566]:ExpressionStatement[75773-75817]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[75579-75586]:ReturnStatement[75830-75837]"
    }, {
      "left" : "throw new IllegalStateException(\"No ObjectCodec defined for the generator, can only serialize simple wrapper types (type passed \"\n                +value.getClass().getName()+\")\");",
      "right" : "throw new IllegalStateException(\"No ObjectCodec defined for the generator, can only serialize simple wrapper types (type passed \"\n                +value.getClass().getName()+\")\");",
      "info" : "ThrowStatement[75605-75784]:ThrowStatement[75856-76035]"
    } ]
  },
  "interFileMappings" : { }
}