{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "UTF8StreamJsonParser",
      "right" : "UTF8StreamJsonParser",
      "info" : "TypeDeclaration[354-111703]:TypeDeclaration[354-112301]"
    }, {
      "left" : "final static byte BYTE_LF = (byte) '\\n';",
      "right" : "final static byte BYTE_LF = (byte) '\\n';",
      "info" : "FieldDeclaration[563-603]:FieldDeclaration[563-603]"
    }, {
      "left" : "private final static int[] _icUTF8 = CharTypes.getInputCodeUtf8();",
      "right" : "private final static int[] _icUTF8 = CharTypes.getInputCodeUtf8();",
      "info" : "FieldDeclaration[674-740]:FieldDeclaration[674-740]"
    }, {
      "left" : "protected final static int[] _icLatin1 = CharTypes.getInputCodeLatin1();",
      "right" : "protected final static int[] _icLatin1 = CharTypes.getInputCodeLatin1();",
      "info" : "FieldDeclaration[884-956]:FieldDeclaration[884-956]"
    }, {
      "left" : "private final static int[] _icWS = CharTypes.getInputCodeWS();",
      "right" : "private final static int[] _icWS = CharTypes.getInputCodeWS();",
      "info" : "FieldDeclaration[1032-1094]:FieldDeclaration[1032-1094]"
    }, {
      "left" : "protected ObjectCodec _objectCodec;",
      "right" : "protected ObjectCodec _objectCodec;",
      "info" : "FieldDeclaration[1269-1479]:FieldDeclaration[1269-1479]"
    }, {
      "left" : "final protected BytesToNameCanonicalizer _symbols;",
      "right" : "final protected BytesToNameCanonicalizer _symbols;",
      "info" : "FieldDeclaration[1485-1616]:FieldDeclaration[1485-1616]"
    }, {
      "left" : "protected int[] _quadBuffer = new int[16];",
      "right" : "protected int[] _quadBuffer = new int[16];",
      "info" : "FieldDeclaration[1795-1900]:FieldDeclaration[1795-1900]"
    }, {
      "left" : "protected boolean _tokenIncomplete = false;",
      "right" : "protected boolean _tokenIncomplete = false;",
      "info" : "FieldDeclaration[1906-2142]:FieldDeclaration[1906-2142]"
    }, {
      "left" : "private int _quad1;",
      "right" : "private int _quad1;",
      "info" : "FieldDeclaration[2148-2241]:FieldDeclaration[2148-2241]"
    }, {
      "left" : "protected InputStream _inputStream;",
      "right" : "protected InputStream _inputStream;",
      "info" : "FieldDeclaration[2460-2495]:FieldDeclaration[2460-2495]"
    }, {
      "left" : "protected byte[] _inputBuffer;",
      "right" : "protected byte[] _inputBuffer;",
      "info" : "FieldDeclaration[2671-2893]:FieldDeclaration[2671-2893]"
    }, {
      "left" : "protected boolean _bufferRecyclable;",
      "right" : "protected boolean _bufferRecyclable;",
      "info" : "FieldDeclaration[2899-3185]:FieldDeclaration[2899-3185]"
    }, {
      "left" : "public UTF8StreamJsonParser(IOContext ctxt, int features, InputStream in,\n            ObjectCodec codec, BytesToNameCanonicalizer sym,\n            byte[] inputBuffer, int start, int end,\n            boolean bufferRecyclable)",
      "right" : "public UTF8StreamJsonParser(IOContext ctxt, int features, InputStream in,\n            ObjectCodec codec, BytesToNameCanonicalizer sym,\n            byte[] inputBuffer, int start, int end,\n            boolean bufferRecyclable)",
      "info" : "MethodDeclaration[3357-3839]:MethodDeclaration[3357-3839]"
    }, {
      "left" : "public ObjectCodec getCodec()",
      "right" : "public ObjectCodec getCodec()",
      "info" : "MethodDeclaration[3845-3925]:MethodDeclaration[3845-3925]"
    }, {
      "left" : "public void setCodec(ObjectCodec c)",
      "right" : "public void setCodec(ObjectCodec c)",
      "info" : "MethodDeclaration[3931-4014]:MethodDeclaration[3931-4014]"
    }, {
      "left" : "public int releaseBuffered(OutputStream out) throws IOException",
      "right" : "public int releaseBuffered(OutputStream out) throws IOException",
      "info" : "MethodDeclaration[4185-4519]:MethodDeclaration[4185-4519]"
    }, {
      "left" : "public Object getInputSource()",
      "right" : "public Object getInputSource()",
      "info" : "MethodDeclaration[4525-4606]:MethodDeclaration[4525-4606]"
    }, {
      "left" : "protected boolean loadMore()\n        throws IOException",
      "right" : "protected boolean loadMore()\n        throws IOException",
      "info" : "MethodDeclaration[4792-5536]:MethodDeclaration[4792-5536]"
    }, {
      "left" : "protected boolean _loadToHaveAtLeast(int minAvailable)\n        throws IOException",
      "right" : "protected boolean _loadToHaveAtLeast(int minAvailable)\n        throws IOException",
      "info" : "MethodDeclaration[5542-6958]:MethodDeclaration[5542-6958]"
    }, {
      "left" : "protected void _closeInput() throws IOException",
      "right" : "protected void _closeInput() throws IOException",
      "info" : "MethodDeclaration[6968-7465]:MethodDeclaration[6968-7465]"
    }, {
      "left" : "protected void _releaseBuffers() throws IOException",
      "right" : "protected void _releaseBuffers() throws IOException",
      "info" : "MethodDeclaration[7471-8050]:MethodDeclaration[7471-8050]"
    }, {
      "left" : "public String getText()\n        throws IOException, JsonParseException",
      "right" : "public String getText()\n        throws IOException, JsonParseException",
      "info" : "MethodDeclaration[8231-8637]:MethodDeclaration[8231-8637]"
    }, {
      "left" : "public String getValueAsString() throws IOException, JsonParseException",
      "right" : "public String getValueAsString() throws IOException, JsonParseException",
      "info" : "MethodDeclaration[8733-9147]:MethodDeclaration[8733-9147]"
    }, {
      "left" : "public String getValueAsString(String defValue) throws IOException, JsonParseException",
      "right" : "public String getValueAsString(String defValue) throws IOException, JsonParseException",
      "info" : "MethodDeclaration[9175-9608]:MethodDeclaration[9175-9608]"
    }, {
      "left" : "protected String _getText2(JsonToken t)",
      "right" : "protected String _getText2(JsonToken t)",
      "info" : "MethodDeclaration[9618-10056]:MethodDeclaration[9618-10056]"
    }, {
      "left" : "public char[] getTextCharacters()\n        throws IOException, JsonParseException",
      "right" : "public char[] getTextCharacters()\n        throws IOException, JsonParseException",
      "info" : "MethodDeclaration[10062-11418]:MethodDeclaration[10062-11418]"
    }, {
      "left" : "public int getTextLength()\n        throws IOException, JsonParseException",
      "right" : "public int getTextLength()\n        throws IOException, JsonParseException",
      "info" : "MethodDeclaration[11424-12227]:MethodDeclaration[11424-12227]"
    }, {
      "left" : "public int getTextOffset() throws IOException, JsonParseException",
      "right" : "public int getTextOffset() throws IOException, JsonParseException",
      "info" : "MethodDeclaration[12233-12939]:MethodDeclaration[12233-12939]"
    }, {
      "left" : "public byte[] getBinaryValue(Base64Variant b64variant)\n        throws IOException, JsonParseException",
      "right" : "public byte[] getBinaryValue(Base64Variant b64variant)\n        throws IOException, JsonParseException",
      "info" : "MethodDeclaration[12949-14309]:MethodDeclaration[12949-14309]"
    }, {
      "left" : "public int readBinaryValue(Base64Variant b64variant, OutputStream out)\n        throws IOException, JsonParseException",
      "right" : "public int readBinaryValue(Base64Variant b64variant, OutputStream out)\n        throws IOException, JsonParseException",
      "info" : "MethodDeclaration[14315-14977]:MethodDeclaration[14315-14977]"
    }, {
      "left" : "protected int _readBinary(Base64Variant b64variant, OutputStream out,\n                              byte[] buffer)\n        throws IOException, JsonParseException",
      "right" : "protected int _readBinary(Base64Variant b64variant, OutputStream out,\n                              byte[] buffer)\n        throws IOException, JsonParseException",
      "info" : "MethodDeclaration[14983-20223]:MethodDeclaration[14983-20223]"
    }, {
      "left" : "public JsonToken nextToken()\n        throws IOException, JsonParseException",
      "right" : "public JsonToken nextToken()\n        throws IOException, JsonParseException",
      "info" : "MethodDeclaration[20409-25011]:MethodDeclaration[20409-25011]"
    }, {
      "left" : "private JsonToken _nextTokenNotInObject(int i)\n        throws IOException, JsonParseException",
      "right" : "private JsonToken _nextTokenNotInObject(int i)\n        throws IOException, JsonParseException",
      "info" : "MethodDeclaration[25017-26710]:MethodDeclaration[25017-26710]"
    }, {
      "left" : "private JsonToken _nextAfterName()",
      "right" : "private JsonToken _nextAfterName()",
      "info" : "MethodDeclaration[26720-27285]:MethodDeclaration[26720-27285]"
    }, {
      "left" : "public void close() throws IOException",
      "right" : "public void close() throws IOException",
      "info" : "MethodDeclaration[27291-27446]:MethodDeclaration[27291-27446]"
    }, {
      "left" : "public boolean nextFieldName(SerializableString str)\n        throws IOException, JsonParseException",
      "right" : "public boolean nextFieldName(SerializableString str)\n        throws IOException, JsonParseException",
      "info" : "MethodDeclaration[27661-30936]:MethodDeclaration[27661-30936]"
    }, {
      "left" : "private void _isNextTokenNameYes()\n        throws IOException, JsonParseException",
      "right" : "private void _isNextTokenNameYes()\n        throws IOException, JsonParseException",
      "info" : "MethodDeclaration[30942-33006]:MethodDeclaration[30942-33006]"
    }, {
      "left" : "private boolean _isNextTokenNameMaybe(int i, SerializableString str)\n        throws IOException, JsonParseException",
      "right" : "private boolean _isNextTokenNameMaybe(int i, SerializableString str)\n        throws IOException, JsonParseException",
      "info" : "MethodDeclaration[33016-34908]:MethodDeclaration[33016-34908]"
    }, {
      "left" : "public String nextTextValue()\n        throws IOException, JsonParseException",
      "right" : "public String nextTextValue()\n        throws IOException, JsonParseException",
      "info" : "MethodDeclaration[34914-36060]:MethodDeclaration[34914-36060]"
    }, {
      "left" : "public int nextIntValue(int defaultValue)\n        throws IOException, JsonParseException",
      "right" : "public int nextIntValue(int defaultValue)\n        throws IOException, JsonParseException",
      "info" : "MethodDeclaration[36066-37094]:MethodDeclaration[36066-37094]"
    }, {
      "left" : "public long nextLongValue(long defaultValue)\n        throws IOException, JsonParseException",
      "right" : "public long nextLongValue(long defaultValue)\n        throws IOException, JsonParseException",
      "info" : "MethodDeclaration[37100-38133]:MethodDeclaration[37100-38133]"
    }, {
      "left" : "public Boolean nextBooleanValue()\n        throws IOException, JsonParseException",
      "right" : "public Boolean nextBooleanValue()\n        throws IOException, JsonParseException",
      "info" : "MethodDeclaration[38139-39301]:MethodDeclaration[38139-39301]"
    }, {
      "left" : "protected JsonToken _parseNumber(int c)\n        throws IOException, JsonParseException",
      "right" : "protected JsonToken _parseNumber(int c)\n        throws IOException, JsonParseException",
      "info" : "MethodDeclaration[39555-42530]:MethodDeclaration[39555-42613]"
    }, {
      "left" : "private JsonToken _parserNumber2(char[] outBuf, int outPtr, boolean negative,\n            int intPartLength)\n        throws IOException, JsonParseException",
      "right" : "private JsonToken _parserNumber2(char[] outBuf, int outPtr, boolean negative,\n            int intPartLength)\n        throws IOException, JsonParseException",
      "info" : "MethodDeclaration[42540-43903]:MethodDeclaration[42623-44100]"
    }, {
      "left" : "private int _verifyNoLeadingZeroes()\n        throws IOException, JsonParseException",
      "right" : "private int _verifyNoLeadingZeroes()\n        throws IOException, JsonParseException",
      "info" : "MethodDeclaration[43913-45321]:MethodDeclaration[44110-45518]"
    }, {
      "left" : "private JsonToken _parseFloat(char[] outBuf, int outPtr, int c,\n            boolean negative, int integerPartLength)\n        throws IOException, JsonParseException",
      "right" : "private JsonToken _parseFloat(char[] outBuf, int outPtr, int c,\n            boolean negative, int integerPartLength)\n        throws IOException, JsonParseException",
      "info" : "MethodDeclaration[45331-48596]:MethodDeclaration[45528-48888]"
    }, {
      "left" : "// caller had pushed it back, before calling; reset\n        // TODO? Handle UTF-8 char decoding for error reporting\n\n    \n    \n    protected Name _parseFieldName(int i)\n        throws IOException, JsonParseException",
      "right" : "protected Name _parseFieldName(int i)\n        throws IOException, JsonParseException",
      "info" : "MethodDeclaration[48602-51592]:MethodDeclaration[49852-52281]"
    }, {
      "left" : "protected Name parseMediumName(int q2, final int[] codes)\n        throws IOException, JsonParseException",
      "right" : "protected Name parseMediumName(int q2, final int[] codes)\n        throws IOException, JsonParseException",
      "info" : "MethodDeclaration[51598-52923]:MethodDeclaration[52287-53612]"
    }, {
      "left" : "protected Name parseLongName(int q)\n        throws IOException, JsonParseException",
      "right" : "protected Name parseLongName(int q)\n        throws IOException, JsonParseException",
      "info" : "MethodDeclaration[52929-55074]:MethodDeclaration[53618-55763]"
    }, {
      "left" : "protected Name slowParseName()\n        throws IOException, JsonParseException",
      "right" : "protected Name slowParseName()\n        throws IOException, JsonParseException",
      "info" : "MethodDeclaration[55080-55769]:MethodDeclaration[55769-56458]"
    }, {
      "left" : "private Name parseName(int q1, int ch, int lastQuadBytes)\n        throws IOException, JsonParseException",
      "right" : "private Name parseName(int q1, int ch, int lastQuadBytes)\n        throws IOException, JsonParseException",
      "info" : "MethodDeclaration[55775-55963]:MethodDeclaration[56464-56652]"
    }, {
      "left" : "private Name parseName(int q1, int q2, int ch, int lastQuadBytes)\n        throws IOException, JsonParseException",
      "right" : "private Name parseName(int q1, int q2, int ch, int lastQuadBytes)\n        throws IOException, JsonParseException",
      "info" : "MethodDeclaration[55969-56194]:MethodDeclaration[56658-56883]"
    }, {
      "left" : "protected Name parseEscapedName(int[] quads, int qlen, int currQuad, int ch,\n            int currQuadBytes)\n        throws IOException, JsonParseException",
      "right" : "protected Name parseEscapedName(int[] quads, int qlen, int currQuad, int ch,\n            int currQuadBytes)\n        throws IOException, JsonParseException",
      "info" : "MethodDeclaration[56200-60472]:MethodDeclaration[56889-61161]"
    }, {
      "left" : "protected Name _handleOddName(int ch)\n        throws IOException, JsonParseException",
      "right" : "protected Name _handleOddName(int ch)\n        throws IOException, JsonParseException",
      "info" : "MethodDeclaration[60478-63238]:MethodDeclaration[61167-63927]"
    }, {
      "left" : "protected Name _parseAposName()\n        throws IOException, JsonParseException",
      "right" : "protected Name _parseAposName()\n        throws IOException, JsonParseException",
      "info" : "MethodDeclaration[63478-67618]:MethodDeclaration[64167-68307]"
    }, {
      "left" : "private Name findName(int q1, int lastQuadBytes)\n        throws JsonParseException",
      "right" : "private Name findName(int q1, int lastQuadBytes)\n        throws JsonParseException",
      "info" : "MethodDeclaration[67816-68234]:MethodDeclaration[68505-68923]"
    }, {
      "left" : "private Name findName(int q1, int q2, int lastQuadBytes)\n        throws JsonParseException",
      "right" : "private Name findName(int q1, int q2, int lastQuadBytes)\n        throws JsonParseException",
      "info" : "MethodDeclaration[68240-68699]:MethodDeclaration[68929-69388]"
    }, {
      "left" : "private Name findName(int[] quads, int qlen, int lastQuad, int lastQuadBytes)\n        throws JsonParseException",
      "right" : "private Name findName(int[] quads, int qlen, int lastQuad, int lastQuadBytes)\n        throws JsonParseException",
      "info" : "MethodDeclaration[68705-69143]:MethodDeclaration[69394-69832]"
    }, {
      "left" : "private Name addName(int[] quads, int qlen, int lastQuadBytes)\n        throws JsonParseException",
      "right" : "private Name addName(int[] quads, int qlen, int lastQuadBytes)\n        throws JsonParseException",
      "info" : "MethodDeclaration[69149-73826]:MethodDeclaration[69838-74515]"
    }, {
      "left" : "protected void _finishString() throws IOException",
      "right" : "protected void _finishString() throws IOException",
      "info" : "MethodDeclaration[74022-75043]:MethodDeclaration[74711-75732]"
    }, {
      "left" : "private void _finishString2(char[] outBuf, int outPtr)\n        throws IOException",
      "right" : "private void _finishString2(char[] outBuf, int outPtr)\n        throws IOException",
      "info" : "MethodDeclaration[75049-77958]:MethodDeclaration[75738-78647]"
    }, {
      "left" : "protected void _skipString() throws IOException",
      "right" : "protected void _skipString() throws IOException",
      "info" : "MethodDeclaration[77964-79935]:MethodDeclaration[78653-80624]"
    }, {
      "left" : "protected JsonToken _handleUnexpectedValue(int c)\n        throws IOException",
      "right" : "protected JsonToken _handleUnexpectedValue(int c)\n        throws IOException",
      "info" : "MethodDeclaration[79941-81784]:MethodDeclaration[80630-82473]"
    }, {
      "left" : "protected JsonToken _handleApos()\n        throws IOException",
      "right" : "protected JsonToken _handleApos()\n        throws IOException",
      "info" : "MethodDeclaration[81790-84891]:MethodDeclaration[82479-85580]"
    }, {
      "left" : "protected JsonToken _handleInvalidNumberStart(int ch, boolean neg)\n        throws IOException",
      "right" : "protected JsonToken _handleInvalidNumberStart(int ch, boolean neg)\n        throws IOException",
      "info" : "MethodDeclaration[84901-86083]:MethodDeclaration[85590-86772]"
    }, {
      "left" : "protected void _matchToken(String matchStr, int i)\n        throws IOException",
      "right" : "protected void _matchToken(String matchStr, int i)\n        throws IOException",
      "info" : "MethodDeclaration[86089-87040]:MethodDeclaration[86778-87729]"
    }, {
      "left" : "protected void _reportInvalidToken(String matchedPart)\n       throws IOException",
      "right" : "protected void _reportInvalidToken(String matchedPart)\n       throws IOException",
      "info" : "MethodDeclaration[87046-87214]:MethodDeclaration[87735-87903]"
    }, {
      "left" : "protected void _reportInvalidToken(String matchedPart, String msg)\n        throws IOException",
      "right" : "protected void _reportInvalidToken(String matchedPart, String msg)\n        throws IOException",
      "info" : "MethodDeclaration[87224-88021]:MethodDeclaration[87913-88710]"
    }, {
      "left" : "private final int _skipWS() throws IOException",
      "right" : "private final int _skipWS() throws IOException",
      "info" : "MethodDeclaration[88229-89616]:MethodDeclaration[88918-90305]"
    }, {
      "left" : "private int _skipWSOrEnd() throws IOException",
      "right" : "private int _skipWSOrEnd() throws IOException",
      "info" : "MethodDeclaration[89622-90916]:MethodDeclaration[90311-91514]"
    }, {
      "left" : "private int _skipColon() throws IOException",
      "right" : "private int _skipColon() throws IOException",
      "info" : "MethodDeclaration[90922-93481]:MethodDeclaration[91520-94079]"
    }, {
      "left" : "private void _skipComment() throws IOException",
      "right" : "private void _skipComment() throws IOException",
      "info" : "MethodDeclaration[93491-94203]:MethodDeclaration[94089-94801]"
    }, {
      "left" : "private void _skipCComment() throws IOException",
      "right" : "private void _skipCComment() throws IOException",
      "info" : "MethodDeclaration[94209-95763]:MethodDeclaration[94807-96361]"
    }, {
      "left" : "private boolean _skipYAMLComment() throws IOException",
      "right" : "private boolean _skipYAMLComment() throws IOException",
      "info" : "MethodDeclaration[95769-95967]:MethodDeclaration[96367-96565]"
    }, {
      "left" : "private void _skipLine() throws IOException",
      "right" : "private void _skipLine() throws IOException",
      "info" : "MethodDeclaration[95973-97322]:MethodDeclaration[96571-97920]"
    }, {
      "left" : "protected char _decodeEscaped() throws IOException",
      "right" : "protected char _decodeEscaped() throws IOException",
      "info" : "MethodDeclaration[97332-98838]:MethodDeclaration[97930-99436]"
    }, {
      "left" : "protected int _decodeCharForError(int firstByte) throws IOException",
      "right" : "protected int _decodeCharForError(int firstByte) throws IOException",
      "info" : "MethodDeclaration[98844-100444]:MethodDeclaration[99442-101042]"
    }, {
      "left" : "private int _decodeUtf8_2(int c) throws IOException",
      "right" : "private int _decodeUtf8_2(int c) throws IOException",
      "info" : "MethodDeclaration[100632-100972]:MethodDeclaration[101230-101570]"
    }, {
      "left" : "private int _decodeUtf8_3(int c1) throws IOException",
      "right" : "private int _decodeUtf8_3(int c1) throws IOException",
      "info" : "MethodDeclaration[100978-101611]:MethodDeclaration[101576-102209]"
    }, {
      "left" : "private int _decodeUtf8_3fast(int c1) throws IOException",
      "right" : "private int _decodeUtf8_3fast(int c1) throws IOException",
      "info" : "MethodDeclaration[101617-102090]:MethodDeclaration[102215-102688]"
    }, {
      "left" : "private int _decodeUtf8_4(int c) throws IOException",
      "right" : "private int _decodeUtf8_4(int c) throws IOException",
      "info" : "MethodDeclaration[102096-103238]:MethodDeclaration[102694-103836]"
    }, {
      "left" : "private void _skipUtf8_2(int c) throws IOException",
      "right" : "private void _skipUtf8_2(int c) throws IOException",
      "info" : "MethodDeclaration[103244-103532]:MethodDeclaration[103842-104130]"
    }, {
      "left" : "private void _skipUtf8_3(int c) throws IOException",
      "right" : "private void _skipUtf8_3(int c) throws IOException",
      "info" : "MethodDeclaration[103644-104179]:MethodDeclaration[104242-104777]"
    }, {
      "left" : "private void _skipUtf8_4(int c) throws IOException",
      "right" : "private void _skipUtf8_4(int c) throws IOException",
      "info" : "MethodDeclaration[104185-104929]:MethodDeclaration[104783-105527]"
    }, {
      "left" : "protected void _skipCR() throws IOException",
      "right" : "protected void _skipCR() throws IOException",
      "info" : "MethodDeclaration[105118-105514]:MethodDeclaration[105716-106112]"
    }, {
      "left" : "private int nextByte() throws IOException",
      "right" : "private int nextByte() throws IOException",
      "info" : "MethodDeclaration[105524-105708]:MethodDeclaration[106122-106306]"
    }, {
      "left" : "protected void _reportInvalidChar(int c)\n        throws JsonParseException",
      "right" : "protected void _reportInvalidChar(int c)\n        throws JsonParseException",
      "info" : "MethodDeclaration[105899-106150]:MethodDeclaration[106497-106748]"
    }, {
      "left" : "protected void _reportInvalidInitial(int mask)\n        throws JsonParseException",
      "right" : "protected void _reportInvalidInitial(int mask)\n        throws JsonParseException",
      "info" : "MethodDeclaration[106156-106327]:MethodDeclaration[106754-106925]"
    }, {
      "left" : "protected void _reportInvalidOther(int mask)\n        throws JsonParseException",
      "right" : "protected void _reportInvalidOther(int mask)\n        throws JsonParseException",
      "info" : "MethodDeclaration[106333-106503]:MethodDeclaration[106931-107101]"
    }, {
      "left" : "protected void _reportInvalidOther(int mask, int ptr)\n        throws JsonParseException",
      "right" : "protected void _reportInvalidOther(int mask, int ptr)\n        throws JsonParseException",
      "info" : "MethodDeclaration[106509-106668]:MethodDeclaration[107107-107266]"
    }, {
      "left" : "public static int[] growArrayBy(int[] arr, int more)",
      "right" : "public static int[] growArrayBy(int[] arr, int more)",
      "info" : "MethodDeclaration[106674-106863]:MethodDeclaration[107272-107461]"
    }, {
      "left" : "protected byte[] _decodeBase64(Base64Variant b64variant) throws IOException",
      "right" : "protected byte[] _decodeBase64(Base64Variant b64variant) throws IOException",
      "info" : "MethodDeclaration[107034-111701]:MethodDeclaration[107632-112299]"
    } ],
    "mappings" : [
 {
      "left" : "ParserBase",
      "right" : "ParserBase",
      "info" : "SimpleType[546-556]:SimpleType[546-556]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3357-3363]:Modifier[3357-3363]"
    }, {
      "left" : "UTF8StreamJsonParser",
      "right" : "UTF8StreamJsonParser",
      "info" : "SimpleName[3364-3384]:SimpleName[3364-3384]"
    }, {
      "left" : "IOContext ctxt",
      "right" : "IOContext ctxt",
      "info" : "SingleVariableDeclaration[3385-3399]:SingleVariableDeclaration[3385-3399]"
    }, {
      "left" : "int features",
      "right" : "int features",
      "info" : "SingleVariableDeclaration[3401-3413]:SingleVariableDeclaration[3401-3413]"
    }, {
      "left" : "InputStream in",
      "right" : "InputStream in",
      "info" : "SingleVariableDeclaration[3415-3429]:SingleVariableDeclaration[3415-3429]"
    }, {
      "left" : "ObjectCodec codec",
      "right" : "ObjectCodec codec",
      "info" : "SingleVariableDeclaration[3443-3460]:SingleVariableDeclaration[3443-3460]"
    }, {
      "left" : "BytesToNameCanonicalizer sym",
      "right" : "BytesToNameCanonicalizer sym",
      "info" : "SingleVariableDeclaration[3462-3490]:SingleVariableDeclaration[3462-3490]"
    }, {
      "left" : "byte[] inputBuffer",
      "right" : "byte[] inputBuffer",
      "info" : "SingleVariableDeclaration[3504-3522]:SingleVariableDeclaration[3504-3522]"
    }, {
      "left" : "int start",
      "right" : "int start",
      "info" : "SingleVariableDeclaration[3524-3533]:SingleVariableDeclaration[3524-3533]"
    }, {
      "left" : "int end",
      "right" : "int end",
      "info" : "SingleVariableDeclaration[3535-3542]:SingleVariableDeclaration[3535-3542]"
    }, {
      "left" : "boolean bufferRecyclable",
      "right" : "boolean bufferRecyclable",
      "info" : "SingleVariableDeclaration[3556-3580]:SingleVariableDeclaration[3556-3580]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3586-3839]:Block[3586-3839]"
    }, {
      "left" : "super(ctxt, features);",
      "right" : "super(ctxt, features);",
      "info" : "SuperConstructorInvocation[3596-3618]:SuperConstructorInvocation[3596-3618]"
    }, {
      "left" : "_inputStream = in;",
      "right" : "_inputStream = in;",
      "info" : "ExpressionStatement[3627-3645]:ExpressionStatement[3627-3645]"
    }, {
      "left" : "_objectCodec = codec;",
      "right" : "_objectCodec = codec;",
      "info" : "ExpressionStatement[3654-3675]:ExpressionStatement[3654-3675]"
    }, {
      "left" : "_symbols = sym;",
      "right" : "_symbols = sym;",
      "info" : "ExpressionStatement[3684-3699]:ExpressionStatement[3684-3699]"
    }, {
      "left" : "_inputBuffer = inputBuffer;",
      "right" : "_inputBuffer = inputBuffer;",
      "info" : "ExpressionStatement[3708-3735]:ExpressionStatement[3708-3735]"
    }, {
      "left" : "_inputPtr = start;",
      "right" : "_inputPtr = start;",
      "info" : "ExpressionStatement[3744-3762]:ExpressionStatement[3744-3762]"
    }, {
      "left" : "_inputEnd = end;",
      "right" : "_inputEnd = end;",
      "info" : "ExpressionStatement[3771-3787]:ExpressionStatement[3771-3787]"
    }, {
      "left" : "_bufferRecyclable = bufferRecyclable;",
      "right" : "_bufferRecyclable = bufferRecyclable;",
      "info" : "ExpressionStatement[3796-3833]:ExpressionStatement[3796-3833]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[3845-3854]:MarkerAnnotation[3845-3854]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3859-3865]:Modifier[3859-3865]"
    }, {
      "left" : "ObjectCodec",
      "right" : "ObjectCodec",
      "info" : "SimpleType[3866-3877]:SimpleType[3866-3877]"
    }, {
      "left" : "getCodec",
      "right" : "getCodec",
      "info" : "SimpleName[3878-3886]:SimpleName[3878-3886]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3889-3925]:Block[3889-3925]"
    }, {
      "left" : "return _objectCodec;",
      "right" : "return _objectCodec;",
      "info" : "ReturnStatement[3899-3919]:ReturnStatement[3899-3919]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[3931-3940]:MarkerAnnotation[3931-3940]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3945-3951]:Modifier[3945-3951]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[3952-3956]:PrimitiveType[3952-3956]"
    }, {
      "left" : "setCodec",
      "right" : "setCodec",
      "info" : "SimpleName[3957-3965]:SimpleName[3957-3965]"
    }, {
      "left" : "ObjectCodec c",
      "right" : "ObjectCodec c",
      "info" : "SingleVariableDeclaration[3966-3979]:SingleVariableDeclaration[3966-3979]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3981-4014]:Block[3981-4014]"
    }, {
      "left" : "_objectCodec = c;",
      "right" : "_objectCodec = c;",
      "info" : "ExpressionStatement[3991-4008]:ExpressionStatement[3991-4008]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[4185-4194]:MarkerAnnotation[4185-4194]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4199-4205]:Modifier[4199-4205]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[4206-4209]:PrimitiveType[4206-4209]"
    }, {
      "left" : "releaseBuffered",
      "right" : "releaseBuffered",
      "info" : "SimpleName[4210-4225]:SimpleName[4210-4225]"
    }, {
      "left" : "OutputStream out",
      "right" : "OutputStream out",
      "info" : "SingleVariableDeclaration[4226-4242]:SingleVariableDeclaration[4226-4242]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[4251-4262]:SimpleType[4251-4262]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4267-4519]:Block[4267-4519]"
    }, {
      "left" : "int count = _inputEnd - _inputPtr;",
      "right" : "int count = _inputEnd - _inputPtr;",
      "info" : "VariableDeclarationStatement[4277-4311]:VariableDeclarationStatement[4277-4311]"
    }, {
      "left" : "if (count < 1)",
      "right" : "if (count < 1)",
      "info" : "IfStatement[4320-4368]:IfStatement[4320-4368]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4335-4368]:Block[4335-4368]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[4349-4358]:ReturnStatement[4349-4358]"
    }, {
      "left" : "int origPtr = _inputPtr;",
      "right" : "int origPtr = _inputPtr;",
      "info" : "VariableDeclarationStatement[4418-4442]:VariableDeclarationStatement[4418-4442]"
    }, {
      "left" : "out.write(_inputBuffer, origPtr, count);",
      "right" : "out.write(_inputBuffer, origPtr, count);",
      "info" : "ExpressionStatement[4451-4491]:ExpressionStatement[4451-4491]"
    }, {
      "left" : "return count;",
      "right" : "return count;",
      "info" : "ReturnStatement[4500-4513]:ReturnStatement[4500-4513]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[4525-4534]:MarkerAnnotation[4525-4534]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4539-4545]:Modifier[4539-4545]"
    }, {
      "left" : "Object",
      "right" : "Object",
      "info" : "SimpleType[4546-4552]:SimpleType[4546-4552]"
    }, {
      "left" : "getInputSource",
      "right" : "getInputSource",
      "info" : "SimpleName[4553-4567]:SimpleName[4553-4567]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4570-4606]:Block[4570-4606]"
    }, {
      "left" : "return _inputStream;",
      "right" : "return _inputStream;",
      "info" : "ReturnStatement[4580-4600]:ReturnStatement[4580-4600]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[4792-4801]:MarkerAnnotation[4792-4801]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[4806-4815]:Modifier[4806-4815]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[4816-4823]:PrimitiveType[4816-4823]"
    }, {
      "left" : "loadMore",
      "right" : "loadMore",
      "info" : "SimpleName[4824-4832]:SimpleName[4824-4832]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[4850-4861]:SimpleType[4850-4861]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4866-5536]:Block[4866-5536]"
    }, {
      "left" : "_currInputProcessed += _inputEnd;",
      "right" : "_currInputProcessed += _inputEnd;",
      "info" : "ExpressionStatement[4876-4909]:ExpressionStatement[4876-4909]"
    }, {
      "left" : "_currInputRowStart -= _inputEnd;",
      "right" : "_currInputRowStart -= _inputEnd;",
      "info" : "ExpressionStatement[4918-4950]:ExpressionStatement[4918-4950]"
    }, {
      "left" : "if (_inputStream != null)",
      "right" : "if (_inputStream != null)",
      "info" : "IfStatement[4968-5508]:IfStatement[4968-5508]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4994-5508]:Block[4994-5508]"
    }, {
      "left" : "int count = _inputStream.read(_inputBuffer, 0, _inputBuffer.length);",
      "right" : "int count = _inputStream.read(_inputBuffer, 0, _inputBuffer.length);",
      "info" : "VariableDeclarationStatement[5008-5076]:VariableDeclarationStatement[5008-5076]"
    }, {
      "left" : "if (count > 0)",
      "right" : "if (count > 0)",
      "info" : "IfStatement[5089-5214]:IfStatement[5089-5214]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5104-5214]:Block[5104-5214]"
    }, {
      "left" : "_inputPtr = 0;",
      "right" : "_inputPtr = 0;",
      "info" : "ExpressionStatement[5122-5136]:ExpressionStatement[5122-5136]"
    }, {
      "left" : "_inputEnd = count;",
      "right" : "_inputEnd = count;",
      "info" : "ExpressionStatement[5153-5171]:ExpressionStatement[5153-5171]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[5188-5200]:ReturnStatement[5188-5200]"
    }, {
      "left" : "_closeInput();",
      "right" : "_closeInput();",
      "info" : "ExpressionStatement[5255-5269]:ExpressionStatement[5255-5269]"
    }, {
      "left" : "if (count == 0)",
      "right" : "if (count == 0)",
      "info" : "IfStatement[5334-5498]:IfStatement[5334-5498]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5350-5498]:Block[5350-5498]"
    }, {
      "left" : "throw new IOException(\"InputStream.read() returned 0 characters when trying to read \"+_inputBuffer.length+\" bytes\");",
      "right" : "throw new IOException(\"InputStream.read() returned 0 characters when trying to read \"+_inputBuffer.length+\" bytes\");",
      "info" : "ThrowStatement[5368-5484]:ThrowStatement[5368-5484]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[5517-5530]:ReturnStatement[5517-5530]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[5707-5716]:Modifier[5707-5716]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[5717-5724]:PrimitiveType[5717-5724]"
    }, {
      "left" : "_loadToHaveAtLeast",
      "right" : "_loadToHaveAtLeast",
      "info" : "SimpleName[5725-5743]:SimpleName[5725-5743]"
    }, {
      "left" : "int minAvailable",
      "right" : "int minAvailable",
      "info" : "SingleVariableDeclaration[5744-5760]:SingleVariableDeclaration[5744-5760]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[5777-5788]:SimpleType[5777-5788]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5793-6958]:Block[5793-6958]"
    }, {
      "left" : "if (_inputStream == null)",
      "right" : "if (_inputStream == null)",
      "info" : "IfStatement[5898-5961]:IfStatement[5898-5961]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5924-5961]:Block[5924-5961]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[5938-5951]:ReturnStatement[5938-5951]"
    }, {
      "left" : "int amount = _inputEnd - _inputPtr;",
      "right" : "int amount = _inputEnd - _inputPtr;",
      "info" : "VariableDeclarationStatement[6019-6054]:VariableDeclarationStatement[6019-6054]"
    }, {
      "left" : "if (amount > 0 && _inputPtr > 0)",
      "right" : "if (amount > 0 && _inputPtr > 0)",
      "info" : "IfStatement[6063-6354]:IfStatement[6063-6354]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6096-6310]:Block[6096-6310]"
    }, {
      "left" : "_currInputProcessed += _inputPtr;",
      "right" : "_currInputProcessed += _inputPtr;",
      "info" : "ExpressionStatement[6110-6143]:ExpressionStatement[6110-6143]"
    }, {
      "left" : "_currInputRowStart -= _inputPtr;",
      "right" : "_currInputRowStart -= _inputPtr;",
      "info" : "ExpressionStatement[6156-6188]:ExpressionStatement[6156-6188]"
    }, {
      "left" : "System.arraycopy(_inputBuffer, _inputPtr, _inputBuffer, 0, amount);",
      "right" : "System.arraycopy(_inputBuffer, _inputPtr, _inputBuffer, 0, amount);",
      "info" : "ExpressionStatement[6201-6268]:ExpressionStatement[6201-6268]"
    }, {
      "left" : "_inputEnd = amount;",
      "right" : "_inputEnd = amount;",
      "info" : "ExpressionStatement[6281-6300]:ExpressionStatement[6281-6300]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6316-6354]:Block[6316-6354]"
    }, {
      "left" : "_inputEnd = 0;",
      "right" : "_inputEnd = 0;",
      "info" : "ExpressionStatement[6330-6344]:ExpressionStatement[6330-6344]"
    }, {
      "left" : "_inputPtr = 0;",
      "right" : "_inputPtr = 0;",
      "info" : "ExpressionStatement[6363-6377]:ExpressionStatement[6363-6377]"
    }, {
      "left" : "while (_inputEnd < minAvailable)",
      "right" : "while (_inputEnd < minAvailable)",
      "info" : "WhileStatement[6386-6931]:WhileStatement[6386-6931]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6419-6931]:Block[6419-6931]"
    }, {
      "left" : "int count = _inputStream.read(_inputBuffer, _inputEnd, _inputBuffer.length - _inputEnd);",
      "right" : "int count = _inputStream.read(_inputBuffer, _inputEnd, _inputBuffer.length - _inputEnd);",
      "info" : "VariableDeclarationStatement[6433-6521]:VariableDeclarationStatement[6433-6521]"
    }, {
      "left" : "if (count < 1)",
      "right" : "if (count < 1)",
      "info" : "IfStatement[6534-6889]:IfStatement[6534-6889]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6549-6889]:Block[6549-6889]"
    }, {
      "left" : "_closeInput();",
      "right" : "_closeInput();",
      "info" : "ExpressionStatement[6599-6613]:ExpressionStatement[6599-6613]"
    }, {
      "left" : "if (count == 0)",
      "right" : "if (count == 0)",
      "info" : "IfStatement[6686-6845]:IfStatement[6686-6845]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6702-6845]:Block[6702-6845]"
    }, {
      "left" : "throw new IOException(\"InputStream.read() returned 0 characters when trying to read \"+amount+\" bytes\");",
      "right" : "throw new IOException(\"InputStream.read() returned 0 characters when trying to read \"+amount+\" bytes\");",
      "info" : "ThrowStatement[6724-6827]:ThrowStatement[6724-6827]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[6862-6875]:ReturnStatement[6862-6875]"
    }, {
      "left" : "_inputEnd += count;",
      "right" : "_inputEnd += count;",
      "info" : "ExpressionStatement[6902-6921]:ExpressionStatement[6902-6921]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[6940-6952]:ReturnStatement[6940-6952]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[6968-6977]:MarkerAnnotation[6968-6977]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[6982-6991]:Modifier[6982-6991]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6992-6996]:PrimitiveType[6992-6996]"
    }, {
      "left" : "_closeInput",
      "right" : "_closeInput",
      "info" : "SimpleName[6997-7008]:SimpleName[6997-7008]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[7018-7029]:SimpleType[7018-7029]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7034-7465]:Block[7034-7465]"
    }, {
      "left" : "if (_inputStream != null)",
      "right" : "if (_inputStream != null)",
      "info" : "IfStatement[7247-7459]:IfStatement[7247-7459]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7273-7459]:Block[7273-7459]"
    }, {
      "left" : "if (_ioContext.isResourceManaged() || isEnabled(Feature.AUTO_CLOSE_SOURCE))",
      "right" : "if (_ioContext.isResourceManaged() || isEnabled(Feature.AUTO_CLOSE_SOURCE))",
      "info" : "IfStatement[7287-7416]:IfStatement[7287-7416]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7363-7416]:Block[7363-7416]"
    }, {
      "left" : "_inputStream.close();",
      "right" : "_inputStream.close();",
      "info" : "ExpressionStatement[7381-7402]:ExpressionStatement[7381-7402]"
    }, {
      "left" : "_inputStream = null;",
      "right" : "_inputStream = null;",
      "info" : "ExpressionStatement[7429-7449]:ExpressionStatement[7429-7449]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[7723-7732]:MarkerAnnotation[7723-7732]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[7737-7746]:Modifier[7737-7746]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7747-7751]:PrimitiveType[7747-7751]"
    }, {
      "left" : "_releaseBuffers",
      "right" : "_releaseBuffers",
      "info" : "SimpleName[7752-7767]:SimpleName[7752-7767]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[7777-7788]:SimpleType[7777-7788]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7793-8050]:Block[7793-8050]"
    }, {
      "left" : "super._releaseBuffers();",
      "right" : "super._releaseBuffers();",
      "info" : "ExpressionStatement[7803-7827]:ExpressionStatement[7803-7827]"
    }, {
      "left" : "if (_bufferRecyclable)",
      "right" : "if (_bufferRecyclable)",
      "info" : "IfStatement[7836-8044]:IfStatement[7836-8044]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7859-8044]:Block[7859-8044]"
    }, {
      "left" : "byte[] buf = _inputBuffer;",
      "right" : "byte[] buf = _inputBuffer;",
      "info" : "VariableDeclarationStatement[7873-7899]:VariableDeclarationStatement[7873-7899]"
    }, {
      "left" : "if (buf != null)",
      "right" : "if (buf != null)",
      "info" : "IfStatement[7912-8034]:IfStatement[7912-8034]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7929-8034]:Block[7929-8034]"
    }, {
      "left" : "_inputBuffer = null;",
      "right" : "_inputBuffer = null;",
      "info" : "ExpressionStatement[7947-7967]:ExpressionStatement[7947-7967]"
    }, {
      "left" : "_ioContext.releaseReadIOBuffer(buf);",
      "right" : "_ioContext.releaseReadIOBuffer(buf);",
      "info" : "ExpressionStatement[7984-8020]:ExpressionStatement[7984-8020]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[8231-8240]:MarkerAnnotation[8231-8240]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8245-8251]:Modifier[8245-8251]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[8252-8258]:SimpleType[8252-8258]"
    }, {
      "left" : "getText",
      "right" : "getText",
      "info" : "SimpleName[8259-8266]:SimpleName[8259-8266]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[8284-8295]:SimpleType[8284-8295]"
    }, {
      "left" : "JsonParseException",
      "right" : "JsonParseException",
      "info" : "SimpleType[8297-8315]:SimpleType[8297-8315]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8320-8637]:Block[8320-8637]"
    }, {
      "left" : "if (_currToken == JsonToken.VALUE_STRING)",
      "right" : "if (_currToken == JsonToken.VALUE_STRING)",
      "info" : "IfStatement[8330-8593]:IfStatement[8330-8593]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8372-8593]:Block[8372-8593]"
    }, {
      "left" : "if (_tokenIncomplete)",
      "right" : "if (_tokenIncomplete)",
      "info" : "IfStatement[8386-8532]:IfStatement[8386-8532]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8408-8532]:Block[8408-8532]"
    }, {
      "left" : "_tokenIncomplete = false;",
      "right" : "_tokenIncomplete = false;",
      "info" : "ExpressionStatement[8426-8451]:ExpressionStatement[8426-8451]"
    }, {
      "left" : "_finishString();",
      "right" : "_finishString();",
      "info" : "ExpressionStatement[8468-8484]:ExpressionStatement[8468-8484]"
    }, {
      "left" : "return _textBuffer.contentsAsString();",
      "right" : "return _textBuffer.contentsAsString();",
      "info" : "ReturnStatement[8545-8583]:ReturnStatement[8545-8583]"
    }, {
      "left" : "return _getText2(_currToken);",
      "right" : "return _getText2(_currToken);",
      "info" : "ReturnStatement[8602-8631]:ReturnStatement[8602-8631]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[8733-8742]:MarkerAnnotation[8733-8742]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8747-8753]:Modifier[8747-8753]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[8754-8760]:SimpleType[8754-8760]"
    }, {
      "left" : "getValueAsString",
      "right" : "getValueAsString",
      "info" : "SimpleName[8761-8777]:SimpleName[8761-8777]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[8787-8798]:SimpleType[8787-8798]"
    }, {
      "left" : "JsonParseException",
      "right" : "JsonParseException",
      "info" : "SimpleType[8800-8818]:SimpleType[8800-8818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8823-9147]:Block[8823-9147]"
    }, {
      "left" : "if (_currToken == JsonToken.VALUE_STRING)",
      "right" : "if (_currToken == JsonToken.VALUE_STRING)",
      "info" : "IfStatement[8833-9096]:IfStatement[8833-9096]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8875-9096]:Block[8875-9096]"
    }, {
      "left" : "if (_tokenIncomplete)",
      "right" : "if (_tokenIncomplete)",
      "info" : "IfStatement[8889-9035]:IfStatement[8889-9035]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8911-9035]:Block[8911-9035]"
    }, {
      "left" : "_tokenIncomplete = false;",
      "right" : "_tokenIncomplete = false;",
      "info" : "ExpressionStatement[8929-8954]:ExpressionStatement[8929-8954]"
    }, {
      "left" : "_finishString();",
      "right" : "_finishString();",
      "info" : "ExpressionStatement[8971-8987]:ExpressionStatement[8971-8987]"
    }, {
      "left" : "return _textBuffer.contentsAsString();",
      "right" : "return _textBuffer.contentsAsString();",
      "info" : "ReturnStatement[9048-9086]:ReturnStatement[9048-9086]"
    }, {
      "left" : "return super.getValueAsString(null);",
      "right" : "return super.getValueAsString(null);",
      "info" : "ReturnStatement[9105-9141]:ReturnStatement[9105-9141]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[9175-9184]:MarkerAnnotation[9175-9184]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9189-9195]:Modifier[9189-9195]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[9196-9202]:SimpleType[9196-9202]"
    }, {
      "left" : "getValueAsString",
      "right" : "getValueAsString",
      "info" : "SimpleName[9203-9219]:SimpleName[9203-9219]"
    }, {
      "left" : "String defValue",
      "right" : "String defValue",
      "info" : "SingleVariableDeclaration[9220-9235]:SingleVariableDeclaration[9220-9235]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[9244-9255]:SimpleType[9244-9255]"
    }, {
      "left" : "JsonParseException",
      "right" : "JsonParseException",
      "info" : "SimpleType[9257-9275]:SimpleType[9257-9275]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9280-9608]:Block[9280-9608]"
    }, {
      "left" : "if (_currToken == JsonToken.VALUE_STRING)",
      "right" : "if (_currToken == JsonToken.VALUE_STRING)",
      "info" : "IfStatement[9290-9553]:IfStatement[9290-9553]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9332-9553]:Block[9332-9553]"
    }, {
      "left" : "if (_tokenIncomplete)",
      "right" : "if (_tokenIncomplete)",
      "info" : "IfStatement[9346-9492]:IfStatement[9346-9492]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9368-9492]:Block[9368-9492]"
    }, {
      "left" : "_tokenIncomplete = false;",
      "right" : "_tokenIncomplete = false;",
      "info" : "ExpressionStatement[9386-9411]:ExpressionStatement[9386-9411]"
    }, {
      "left" : "_finishString();",
      "right" : "_finishString();",
      "info" : "ExpressionStatement[9428-9444]:ExpressionStatement[9428-9444]"
    }, {
      "left" : "return _textBuffer.contentsAsString();",
      "right" : "return _textBuffer.contentsAsString();",
      "info" : "ReturnStatement[9505-9543]:ReturnStatement[9505-9543]"
    }, {
      "left" : "return super.getValueAsString(defValue);",
      "right" : "return super.getValueAsString(defValue);",
      "info" : "ReturnStatement[9562-9602]:ReturnStatement[9562-9602]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[9618-9627]:Modifier[9618-9627]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[9628-9634]:SimpleType[9628-9634]"
    }, {
      "left" : "_getText2",
      "right" : "_getText2",
      "info" : "SimpleName[9635-9644]:SimpleName[9635-9644]"
    }, {
      "left" : "JsonToken t",
      "right" : "JsonToken t",
      "info" : "SingleVariableDeclaration[9645-9656]:SingleVariableDeclaration[9645-9656]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9662-10056]:Block[9662-10056]"
    }, {
      "left" : "if (t == null)",
      "right" : "if (t == null)",
      "info" : "IfStatement[9672-9723]:IfStatement[9672-9723]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9687-9723]:Block[9687-9723]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[9701-9713]:ReturnStatement[9701-9713]"
    }, {
      "left" : "switch (t) {\n        case FIELD_NAME:\n            return _parsingContext.getCurrentName();\n\n        case VALUE_STRING:\n            // fall through\n        case VALUE_NUMBER_INT:\n        case VALUE_NUMBER_FLOAT:\n            return _textBuffer.contentsAsString();\n        default:\n        \treturn t.asString();\n        }",
      "right" : "switch (t) {\n        case FIELD_NAME:\n            return _parsingContext.getCurrentName();\n\n        case VALUE_STRING:\n            // fall through\n        case VALUE_NUMBER_INT:\n        case VALUE_NUMBER_FLOAT:\n            return _textBuffer.contentsAsString();\n        default:\n        \treturn t.asString();\n        }",
      "info" : "SwitchStatement[9732-10050]:SwitchStatement[9732-10050]"
    }, {
      "left" : "case FIELD_NAME:",
      "right" : "case FIELD_NAME:",
      "info" : "SwitchCase[9753-9769]:SwitchCase[9753-9769]"
    }, {
      "left" : "return _parsingContext.getCurrentName();",
      "right" : "return _parsingContext.getCurrentName();",
      "info" : "ReturnStatement[9782-9822]:ReturnStatement[9782-9822]"
    }, {
      "left" : "case VALUE_STRING:",
      "right" : "case VALUE_STRING:",
      "info" : "SwitchCase[9832-9850]:SwitchCase[9832-9850]"
    }, {
      "left" : "case VALUE_NUMBER_INT:",
      "right" : "case VALUE_NUMBER_INT:",
      "info" : "SwitchCase[9887-9909]:SwitchCase[9887-9909]"
    }, {
      "left" : "case VALUE_NUMBER_FLOAT:",
      "right" : "case VALUE_NUMBER_FLOAT:",
      "info" : "SwitchCase[9918-9942]:SwitchCase[9918-9942]"
    }, {
      "left" : "return _textBuffer.contentsAsString();",
      "right" : "return _textBuffer.contentsAsString();",
      "info" : "ReturnStatement[9955-9993]:ReturnStatement[9955-9993]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[10002-10010]:SwitchCase[10002-10010]"
    }, {
      "left" : "return t.asString();",
      "right" : "return t.asString();",
      "info" : "ReturnStatement[10020-10040]:ReturnStatement[10020-10040]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[10062-10071]:MarkerAnnotation[10062-10071]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10076-10082]:Modifier[10076-10082]"
    }, {
      "left" : "char[]",
      "right" : "char[]",
      "info" : "ArrayType[10083-10089]:ArrayType[10083-10089]"
    }, {
      "left" : "getTextCharacters",
      "right" : "getTextCharacters",
      "info" : "SimpleName[10090-10107]:SimpleName[10090-10107]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[10125-10136]:SimpleType[10125-10136]"
    }, {
      "left" : "JsonParseException",
      "right" : "JsonParseException",
      "info" : "SimpleType[10138-10156]:SimpleType[10138-10156]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10161-11418]:Block[10161-11418]"
    }, {
      "left" : "if (_currToken != null)",
      "right" : "if (_currToken != null)",
      "info" : "IfStatement[10171-11391]:IfStatement[10171-11391]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10195-11391]:Block[10195-11391]"
    }, {
      "left" : "switch (_currToken) {\n                \n            case FIELD_NAME:\n                if (!_nameCopied) {\n                    String name = _parsingContext.getCurrentName();\n                    int nameLen = name.length();\n                    if (_nameCopyBuffer == null) {\n                        _nameCopyBuffer = _ioContext.allocNameCopyBuffer(nameLen);\n                    } else if (_nameCopyBuffer.length < nameLen) {\n                        _nameCopyBuffer = new char[nameLen];\n                    }\n                    name.getChars(0, nameLen, _nameCopyBuffer, 0);\n                    _nameCopied = true;\n                }\n                return _nameCopyBuffer;\n    \n            case VALUE_STRING:\n                if (_tokenIncomplete) {\n                    _tokenIncomplete = false;\n                    _finishString(); // only strings can be incomplete\n                }\n                // fall through\n            case VALUE_NUMBER_INT:\n            case VALUE_NUMBER_FLOAT:\n                return _textBuffer.getTextBuffer();\n                \n            default:\n                return _currToken.asCharArray();\n            }",
      "right" : "switch (_currToken) {\n                \n            case FIELD_NAME:\n                if (!_nameCopied) {\n                    String name = _parsingContext.getCurrentName();\n                    int nameLen = name.length();\n                    if (_nameCopyBuffer == null) {\n                        _nameCopyBuffer = _ioContext.allocNameCopyBuffer(nameLen);\n                    } else if (_nameCopyBuffer.length < nameLen) {\n                        _nameCopyBuffer = new char[nameLen];\n                    }\n                    name.getChars(0, nameLen, _nameCopyBuffer, 0);\n                    _nameCopied = true;\n                }\n                return _nameCopyBuffer;\n    \n            case VALUE_STRING:\n                if (_tokenIncomplete) {\n                    _tokenIncomplete = false;\n                    _finishString(); // only strings can be incomplete\n                }\n                // fall through\n            case VALUE_NUMBER_INT:\n            case VALUE_NUMBER_FLOAT:\n                return _textBuffer.getTextBuffer();\n                \n            default:\n                return _currToken.asCharArray();\n            }",
      "info" : "SwitchStatement[10244-11381]:SwitchStatement[10244-11381]"
    }, {
      "left" : "case FIELD_NAME:",
      "right" : "case FIELD_NAME:",
      "info" : "SwitchCase[10295-10311]:SwitchCase[10295-10311]"
    }, {
      "left" : "if (!_nameCopied)",
      "right" : "if (!_nameCopied)",
      "info" : "IfStatement[10328-10873]:IfStatement[10328-10873]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10346-10873]:Block[10346-10873]"
    }, {
      "left" : "String name = _parsingContext.getCurrentName();",
      "right" : "String name = _parsingContext.getCurrentName();",
      "info" : "VariableDeclarationStatement[10368-10415]:VariableDeclarationStatement[10368-10415]"
    }, {
      "left" : "int nameLen = name.length();",
      "right" : "int nameLen = name.length();",
      "info" : "VariableDeclarationStatement[10436-10464]:VariableDeclarationStatement[10436-10464]"
    }, {
      "left" : "if (_nameCopyBuffer == null)",
      "right" : "if (_nameCopyBuffer == null)",
      "info" : "IfStatement[10485-10748]:IfStatement[10485-10748]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10514-10620]:Block[10514-10620]"
    }, {
      "left" : "_nameCopyBuffer = _ioContext.allocNameCopyBuffer(nameLen);",
      "right" : "_nameCopyBuffer = _ioContext.allocNameCopyBuffer(nameLen);",
      "info" : "ExpressionStatement[10540-10598]:ExpressionStatement[10540-10598]"
    }, {
      "left" : "if (_nameCopyBuffer.length < nameLen)",
      "right" : "if (_nameCopyBuffer.length < nameLen)",
      "info" : "IfStatement[10626-10748]:IfStatement[10626-10748]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10664-10748]:Block[10664-10748]"
    }, {
      "left" : "_nameCopyBuffer = new char[nameLen];",
      "right" : "_nameCopyBuffer = new char[nameLen];",
      "info" : "ExpressionStatement[10690-10726]:ExpressionStatement[10690-10726]"
    }, {
      "left" : "name.getChars(0, nameLen, _nameCopyBuffer, 0);",
      "right" : "name.getChars(0, nameLen, _nameCopyBuffer, 0);",
      "info" : "ExpressionStatement[10769-10815]:ExpressionStatement[10769-10815]"
    }, {
      "left" : "_nameCopied = true;",
      "right" : "_nameCopied = true;",
      "info" : "ExpressionStatement[10836-10855]:ExpressionStatement[10836-10855]"
    }, {
      "left" : "return _nameCopyBuffer;",
      "right" : "return _nameCopyBuffer;",
      "info" : "ReturnStatement[10890-10913]:ReturnStatement[10890-10913]"
    }, {
      "left" : "case VALUE_STRING:",
      "right" : "case VALUE_STRING:",
      "info" : "SwitchCase[10931-10949]:SwitchCase[10931-10949]"
    }, {
      "left" : "if (_tokenIncomplete)",
      "right" : "if (_tokenIncomplete)",
      "info" : "IfStatement[10966-11124]:IfStatement[10966-11124]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10988-11124]:Block[10988-11124]"
    }, {
      "left" : "_tokenIncomplete = false;",
      "right" : "_tokenIncomplete = false;",
      "info" : "ExpressionStatement[11010-11035]:ExpressionStatement[11010-11035]"
    }, {
      "left" : "_finishString();",
      "right" : "_finishString();",
      "info" : "ExpressionStatement[11056-11072]:ExpressionStatement[11056-11072]"
    }, {
      "left" : "case VALUE_NUMBER_INT:",
      "right" : "case VALUE_NUMBER_INT:",
      "info" : "SwitchCase[11169-11191]:SwitchCase[11169-11191]"
    }, {
      "left" : "case VALUE_NUMBER_FLOAT:",
      "right" : "case VALUE_NUMBER_FLOAT:",
      "info" : "SwitchCase[11204-11228]:SwitchCase[11204-11228]"
    }, {
      "left" : "return _textBuffer.getTextBuffer();",
      "right" : "return _textBuffer.getTextBuffer();",
      "info" : "ReturnStatement[11245-11280]:ReturnStatement[11245-11280]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[11310-11318]:SwitchCase[11310-11318]"
    }, {
      "left" : "return _currToken.asCharArray();",
      "right" : "return _currToken.asCharArray();",
      "info" : "ReturnStatement[11335-11367]:ReturnStatement[11335-11367]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[11400-11412]:ReturnStatement[11400-11412]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[11424-11433]:MarkerAnnotation[11424-11433]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11438-11444]:Modifier[11438-11444]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[11445-11448]:PrimitiveType[11445-11448]"
    }, {
      "left" : "getTextLength",
      "right" : "getTextLength",
      "info" : "SimpleName[11449-11462]:SimpleName[11449-11462]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[11480-11491]:SimpleType[11480-11491]"
    }, {
      "left" : "JsonParseException",
      "right" : "JsonParseException",
      "info" : "SimpleType[11493-11511]:SimpleType[11493-11511]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11516-12227]:Block[11516-12227]"
    }, {
      "left" : "if (_currToken != null)",
      "right" : "if (_currToken != null)",
      "info" : "IfStatement[11526-12203]:IfStatement[11526-12203]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11550-12203]:Block[11550-12203]"
    }, {
      "left" : "switch (_currToken) {\n                \n            case FIELD_NAME:\n                return _parsingContext.getCurrentName().length();\n            case VALUE_STRING:\n                if (_tokenIncomplete) {\n                    _tokenIncomplete = false;\n                    _finishString(); // only strings can be incomplete\n                }\n                // fall through\n            case VALUE_NUMBER_INT:\n            case VALUE_NUMBER_FLOAT:\n                return _textBuffer.size();\n                \n            default:\n                return _currToken.asCharArray().length;\n            }",
      "right" : "switch (_currToken) {\n                \n            case FIELD_NAME:\n                return _parsingContext.getCurrentName().length();\n            case VALUE_STRING:\n                if (_tokenIncomplete) {\n                    _tokenIncomplete = false;\n                    _finishString(); // only strings can be incomplete\n                }\n                // fall through\n            case VALUE_NUMBER_INT:\n            case VALUE_NUMBER_FLOAT:\n                return _textBuffer.size();\n                \n            default:\n                return _currToken.asCharArray().length;\n            }",
      "info" : "SwitchStatement[11599-12193]:SwitchStatement[11599-12193]"
    }, {
      "left" : "case FIELD_NAME:",
      "right" : "case FIELD_NAME:",
      "info" : "SwitchCase[11650-11666]:SwitchCase[11650-11666]"
    }, {
      "left" : "return _parsingContext.getCurrentName().length();",
      "right" : "return _parsingContext.getCurrentName().length();",
      "info" : "ReturnStatement[11683-11732]:ReturnStatement[11683-11732]"
    }, {
      "left" : "case VALUE_STRING:",
      "right" : "case VALUE_STRING:",
      "info" : "SwitchCase[11745-11763]:SwitchCase[11745-11763]"
    }, {
      "left" : "if (_tokenIncomplete)",
      "right" : "if (_tokenIncomplete)",
      "info" : "IfStatement[11780-11938]:IfStatement[11780-11938]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11802-11938]:Block[11802-11938]"
    }, {
      "left" : "_tokenIncomplete = false;",
      "right" : "_tokenIncomplete = false;",
      "info" : "ExpressionStatement[11824-11849]:ExpressionStatement[11824-11849]"
    }, {
      "left" : "_finishString();",
      "right" : "_finishString();",
      "info" : "ExpressionStatement[11870-11886]:ExpressionStatement[11870-11886]"
    }, {
      "left" : "case VALUE_NUMBER_INT:",
      "right" : "case VALUE_NUMBER_INT:",
      "info" : "SwitchCase[11983-12005]:SwitchCase[11983-12005]"
    }, {
      "left" : "case VALUE_NUMBER_FLOAT:",
      "right" : "case VALUE_NUMBER_FLOAT:",
      "info" : "SwitchCase[12018-12042]:SwitchCase[12018-12042]"
    }, {
      "left" : "return _textBuffer.size();",
      "right" : "return _textBuffer.size();",
      "info" : "ReturnStatement[12059-12085]:ReturnStatement[12059-12085]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[12115-12123]:SwitchCase[12115-12123]"
    }, {
      "left" : "return _currToken.asCharArray().length;",
      "right" : "return _currToken.asCharArray().length;",
      "info" : "ReturnStatement[12140-12179]:ReturnStatement[12140-12179]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[12212-12221]:ReturnStatement[12212-12221]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[12233-12242]:MarkerAnnotation[12233-12242]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12247-12253]:Modifier[12247-12253]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[12254-12257]:PrimitiveType[12254-12257]"
    }, {
      "left" : "getTextOffset",
      "right" : "getTextOffset",
      "info" : "SimpleName[12258-12271]:SimpleName[12258-12271]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[12281-12292]:SimpleType[12281-12292]"
    }, {
      "left" : "JsonParseException",
      "right" : "JsonParseException",
      "info" : "SimpleType[12294-12312]:SimpleType[12294-12312]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12317-12939]:Block[12317-12939]"
    }, {
      "left" : "if (_currToken != null)",
      "right" : "if (_currToken != null)",
      "info" : "IfStatement[12394-12915]:IfStatement[12394-12915]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12418-12915]:Block[12418-12915]"
    }, {
      "left" : "switch (_currToken) {\n            case FIELD_NAME:\n                return 0;\n            case VALUE_STRING:\n                if (_tokenIncomplete) {\n                    _tokenIncomplete = false;\n                    _finishString(); // only strings can be incomplete\n                }\n                // fall through\n            case VALUE_NUMBER_INT:\n            case VALUE_NUMBER_FLOAT:\n                return _textBuffer.getTextOffset();\n            default:\n            }",
      "right" : "switch (_currToken) {\n            case FIELD_NAME:\n                return 0;\n            case VALUE_STRING:\n                if (_tokenIncomplete) {\n                    _tokenIncomplete = false;\n                    _finishString(); // only strings can be incomplete\n                }\n                // fall through\n            case VALUE_NUMBER_INT:\n            case VALUE_NUMBER_FLOAT:\n                return _textBuffer.getTextOffset();\n            default:\n            }",
      "info" : "SwitchStatement[12432-12905]:SwitchStatement[12432-12905]"
    }, {
      "left" : "case FIELD_NAME:",
      "right" : "case FIELD_NAME:",
      "info" : "SwitchCase[12466-12482]:SwitchCase[12466-12482]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[12499-12508]:ReturnStatement[12499-12508]"
    }, {
      "left" : "case VALUE_STRING:",
      "right" : "case VALUE_STRING:",
      "info" : "SwitchCase[12521-12539]:SwitchCase[12521-12539]"
    }, {
      "left" : "if (_tokenIncomplete)",
      "right" : "if (_tokenIncomplete)",
      "info" : "IfStatement[12556-12714]:IfStatement[12556-12714]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12578-12714]:Block[12578-12714]"
    }, {
      "left" : "_tokenIncomplete = false;",
      "right" : "_tokenIncomplete = false;",
      "info" : "ExpressionStatement[12600-12625]:ExpressionStatement[12600-12625]"
    }, {
      "left" : "_finishString();",
      "right" : "_finishString();",
      "info" : "ExpressionStatement[12646-12662]:ExpressionStatement[12646-12662]"
    }, {
      "left" : "case VALUE_NUMBER_INT:",
      "right" : "case VALUE_NUMBER_INT:",
      "info" : "SwitchCase[12759-12781]:SwitchCase[12759-12781]"
    }, {
      "left" : "case VALUE_NUMBER_FLOAT:",
      "right" : "case VALUE_NUMBER_FLOAT:",
      "info" : "SwitchCase[12794-12818]:SwitchCase[12794-12818]"
    }, {
      "left" : "return _textBuffer.getTextOffset();",
      "right" : "return _textBuffer.getTextOffset();",
      "info" : "ReturnStatement[12835-12870]:ReturnStatement[12835-12870]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[12883-12891]:SwitchCase[12883-12891]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[12924-12933]:ReturnStatement[12924-12933]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[12949-12958]:MarkerAnnotation[12949-12958]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12963-12969]:Modifier[12963-12969]"
    }, {
      "left" : "byte[]",
      "right" : "byte[]",
      "info" : "ArrayType[12970-12976]:ArrayType[12970-12976]"
    }, {
      "left" : "getBinaryValue",
      "right" : "getBinaryValue",
      "info" : "SimpleName[12977-12991]:SimpleName[12977-12991]"
    }, {
      "left" : "Base64Variant b64variant",
      "right" : "Base64Variant b64variant",
      "info" : "SingleVariableDeclaration[12992-13016]:SingleVariableDeclaration[12992-13016]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[13033-13044]:SimpleType[13033-13044]"
    }, {
      "left" : "JsonParseException",
      "right" : "JsonParseException",
      "info" : "SimpleType[13046-13064]:SimpleType[13046-13064]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13069-14309]:Block[13069-14309]"
    }, {
      "left" : "if (_currToken != JsonToken.VALUE_STRING &&\n                (_currToken != JsonToken.VALUE_EMBEDDED_OBJECT || _binaryValue == null))",
      "right" : "if (_currToken != JsonToken.VALUE_STRING &&\n                (_currToken != JsonToken.VALUE_EMBEDDED_OBJECT || _binaryValue == null))",
      "info" : "IfStatement[13079-13351]:IfStatement[13079-13351]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13212-13351]:Block[13212-13351]"
    }, {
      "left" : "_reportError(\"Current token (\"+_currToken+\") not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary\");",
      "right" : "_reportError(\"Current token (\"+_currToken+\") not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary\");",
      "info" : "ExpressionStatement[13226-13341]:ExpressionStatement[13226-13341]"
    }, {
      "left" : "if (_tokenIncomplete)",
      "right" : "if (_tokenIncomplete)",
      "info" : "IfStatement[13466-14274]:IfStatement[13466-14274]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13488-13935]:Block[13488-13935]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[13502-13750]:TryStatement[13502-13750]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13506-13579]:Block[13506-13579]"
    }, {
      "left" : "_binaryValue = _decodeBase64(b64variant);",
      "right" : "_binaryValue = _decodeBase64(b64variant);",
      "info" : "ExpressionStatement[13524-13565]:ExpressionStatement[13524-13565]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13617-13750]:Block[13617-13750]"
    }, {
      "left" : "throw _constructError(\"Failed to decode VALUE_STRING as base64 (\"+b64variant+\"): \"+iae.getMessage());",
      "right" : "throw _constructError(\"Failed to decode VALUE_STRING as base64 (\"+b64variant+\"): \"+iae.getMessage());",
      "info" : "ThrowStatement[13635-13736]:ThrowStatement[13635-13736]"
    }, {
      "left" : "_tokenIncomplete = false;",
      "right" : "_tokenIncomplete = false;",
      "info" : "ExpressionStatement[13900-13925]:ExpressionStatement[13900-13925]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13941-14274]:Block[13941-14274]"
    }, {
      "left" : "if (_binaryValue == null)",
      "right" : "if (_binaryValue == null)",
      "info" : "IfStatement[13993-14264]:IfStatement[13993-14264]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14019-14264]:Block[14019-14264]"
    }, {
      "left" : "@SuppressWarnings(\"resource\")\n                ByteArrayBuilder builder = _getByteArrayBuilder();",
      "right" : "@SuppressWarnings(\"resource\")\n                ByteArrayBuilder builder = _getByteArrayBuilder();",
      "info" : "VariableDeclarationStatement[14037-14133]:VariableDeclarationStatement[14037-14133]"
    }, {
      "left" : "_decodeBase64(getText(), builder, b64variant);",
      "right" : "_decodeBase64(getText(), builder, b64variant);",
      "info" : "ExpressionStatement[14150-14196]:ExpressionStatement[14150-14196]"
    }, {
      "left" : "_binaryValue = builder.toByteArray();",
      "right" : "_binaryValue = builder.toByteArray();",
      "info" : "ExpressionStatement[14213-14250]:ExpressionStatement[14213-14250]"
    }, {
      "left" : "return _binaryValue;",
      "right" : "return _binaryValue;",
      "info" : "ReturnStatement[14283-14303]:ReturnStatement[14283-14303]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[14315-14324]:MarkerAnnotation[14315-14324]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[14329-14335]:Modifier[14329-14335]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[14336-14339]:PrimitiveType[14336-14339]"
    }, {
      "left" : "readBinaryValue",
      "right" : "readBinaryValue",
      "info" : "SimpleName[14340-14355]:SimpleName[14340-14355]"
    }, {
      "left" : "Base64Variant b64variant",
      "right" : "Base64Variant b64variant",
      "info" : "SingleVariableDeclaration[14356-14380]:SingleVariableDeclaration[14356-14380]"
    }, {
      "left" : "OutputStream out",
      "right" : "OutputStream out",
      "info" : "SingleVariableDeclaration[14382-14398]:SingleVariableDeclaration[14382-14398]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[14415-14426]:SimpleType[14415-14426]"
    }, {
      "left" : "JsonParseException",
      "right" : "JsonParseException",
      "info" : "SimpleType[14428-14446]:SimpleType[14428-14446]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14451-14977]:Block[14451-14977]"
    }, {
      "left" : "if (!_tokenIncomplete || _currToken != JsonToken.VALUE_STRING)",
      "right" : "if (!_tokenIncomplete || _currToken != JsonToken.VALUE_STRING)",
      "info" : "IfStatement[14537-14717]:IfStatement[14537-14717]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14600-14717]:Block[14600-14717]"
    }, {
      "left" : "byte[] b = getBinaryValue(b64variant);",
      "right" : "byte[] b = getBinaryValue(b64variant);",
      "info" : "VariableDeclarationStatement[14614-14652]:VariableDeclarationStatement[14614-14652]"
    }, {
      "left" : "out.write(b);",
      "right" : "out.write(b);",
      "info" : "ExpressionStatement[14665-14678]:ExpressionStatement[14665-14678]"
    }, {
      "left" : "return b.length;",
      "right" : "return b.length;",
      "info" : "ReturnStatement[14691-14707]:ReturnStatement[14691-14707]"
    }, {
      "left" : "byte[] buf = _ioContext.allocBase64Buffer();",
      "right" : "byte[] buf = _ioContext.allocBase64Buffer();",
      "info" : "VariableDeclarationStatement[14780-14824]:VariableDeclarationStatement[14780-14824]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[14833-14971]:TryStatement[14833-14971]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14837-14902]:Block[14837-14902]"
    }, {
      "left" : "return _readBinary(b64variant, out, buf);",
      "right" : "return _readBinary(b64variant, out, buf);",
      "info" : "ReturnStatement[14851-14892]:ReturnStatement[14851-14892]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14911-14971]:Block[14911-14971]"
    }, {
      "left" : "_ioContext.releaseBase64Buffer(buf);",
      "right" : "_ioContext.releaseBase64Buffer(buf);",
      "info" : "ExpressionStatement[14925-14961]:ExpressionStatement[14925-14961]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[14983-14992]:Modifier[14983-14992]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[14993-14996]:PrimitiveType[14993-14996]"
    }, {
      "left" : "_readBinary",
      "right" : "_readBinary",
      "info" : "SimpleName[14997-15008]:SimpleName[14997-15008]"
    }, {
      "left" : "Base64Variant b64variant",
      "right" : "Base64Variant b64variant",
      "info" : "SingleVariableDeclaration[15009-15033]:SingleVariableDeclaration[15009-15033]"
    }, {
      "left" : "OutputStream out",
      "right" : "OutputStream out",
      "info" : "SingleVariableDeclaration[15035-15051]:SingleVariableDeclaration[15035-15051]"
    }, {
      "left" : "byte[] buffer",
      "right" : "byte[] buffer",
      "info" : "SingleVariableDeclaration[15083-15096]:SingleVariableDeclaration[15083-15096]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[15113-15124]:SimpleType[15113-15124]"
    }, {
      "left" : "JsonParseException",
      "right" : "JsonParseException",
      "info" : "SimpleType[15126-15144]:SimpleType[15126-15144]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15149-20223]:Block[15149-20223]"
    }, {
      "left" : "int outputPtr = 0;",
      "right" : "int outputPtr = 0;",
      "info" : "VariableDeclarationStatement[15159-15177]:VariableDeclarationStatement[15159-15177]"
    }, {
      "left" : "final int outputEnd = buffer.length - 3;",
      "right" : "final int outputEnd = buffer.length - 3;",
      "info" : "VariableDeclarationStatement[15186-15226]:VariableDeclarationStatement[15186-15226]"
    }, {
      "left" : "int outputCount = 0;",
      "right" : "int outputCount = 0;",
      "info" : "VariableDeclarationStatement[15235-15255]:VariableDeclarationStatement[15235-15255]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[15265-20033]:WhileStatement[15265-20033]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15278-20033]:Block[15278-20033]"
    }, {
      "left" : "int ch;",
      "right" : "int ch;",
      "info" : "VariableDeclarationStatement[15355-15362]:VariableDeclarationStatement[15355-15362]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[15375-15585]:DoStatement[15375-15585]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15378-15560]:Block[15378-15560]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[15396-15485]:IfStatement[15396-15485]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15424-15485]:Block[15424-15485]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[15446-15467]:ExpressionStatement[15446-15467]"
    }, {
      "left" : "ch = (int) _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "ch = (int) _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[15502-15546]:ExpressionStatement[15502-15546]"
    }, {
      "left" : "int bits = b64variant.decodeBase64Char(ch);",
      "right" : "int bits = b64variant.decodeBase64Char(ch);",
      "info" : "VariableDeclarationStatement[15598-15641]:VariableDeclarationStatement[15598-15641]"
    }, {
      "left" : "if (bits < 0)",
      "right" : "if (bits < 0)",
      "info" : "IfStatement[15654-15970]:IfStatement[15654-15970]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15668-15970]:Block[15668-15970]"
    }, {
      "left" : "if (ch == INT_QUOTE)",
      "right" : "if (ch == INT_QUOTE)",
      "info" : "IfStatement[15723-15790]:IfStatement[15723-15790]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15744-15790]:Block[15744-15790]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[15766-15772]:BreakStatement[15766-15772]"
    }, {
      "left" : "bits = _decodeBase64Escape(b64variant, ch, 0);",
      "right" : "bits = _decodeBase64Escape(b64variant, ch, 0);",
      "info" : "ExpressionStatement[15807-15853]:ExpressionStatement[15807-15853]"
    }, {
      "left" : "if (bits < 0)",
      "right" : "if (bits < 0)",
      "info" : "IfStatement[15870-15956]:IfStatement[15870-15956]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15884-15956]:Block[15884-15956]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[15929-15938]:ContinueStatement[15929-15938]"
    }, {
      "left" : "if (outputPtr > outputEnd)",
      "right" : "if (outputPtr > outputEnd)",
      "info" : "IfStatement[16026-16190]:IfStatement[16026-16190]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16053-16190]:Block[16053-16190]"
    }, {
      "left" : "outputCount += outputPtr;",
      "right" : "outputCount += outputPtr;",
      "info" : "ExpressionStatement[16071-16096]:ExpressionStatement[16071-16096]"
    }, {
      "left" : "out.write(buffer, 0, outputPtr);",
      "right" : "out.write(buffer, 0, outputPtr);",
      "info" : "ExpressionStatement[16113-16145]:ExpressionStatement[16113-16145]"
    }, {
      "left" : "outputPtr = 0;",
      "right" : "outputPtr = 0;",
      "info" : "ExpressionStatement[16162-16176]:ExpressionStatement[16162-16176]"
    }, {
      "left" : "int decodedData = bits;",
      "right" : "int decodedData = bits;",
      "info" : "VariableDeclarationStatement[16204-16227]:VariableDeclarationStatement[16204-16227]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[16312-16393]:IfStatement[16312-16393]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16340-16393]:Block[16340-16393]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[16358-16379]:ExpressionStatement[16358-16379]"
    }, {
      "left" : "ch = _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "ch = _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[16406-16444]:ExpressionStatement[16406-16444]"
    }, {
      "left" : "bits = b64variant.decodeBase64Char(ch);",
      "right" : "bits = b64variant.decodeBase64Char(ch);",
      "info" : "ExpressionStatement[16457-16496]:ExpressionStatement[16457-16496]"
    }, {
      "left" : "if (bits < 0)",
      "right" : "if (bits < 0)",
      "info" : "IfStatement[16509-16601]:IfStatement[16509-16601]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16523-16601]:Block[16523-16601]"
    }, {
      "left" : "bits = _decodeBase64Escape(b64variant, ch, 1);",
      "right" : "bits = _decodeBase64Escape(b64variant, ch, 1);",
      "info" : "ExpressionStatement[16541-16587]:ExpressionStatement[16541-16587]"
    }, {
      "left" : "decodedData = (decodedData << 6) | bits;",
      "right" : "decodedData = (decodedData << 6) | bits;",
      "info" : "ExpressionStatement[16614-16654]:ExpressionStatement[16614-16654]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[16729-16810]:IfStatement[16729-16810]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16757-16810]:Block[16757-16810]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[16775-16796]:ExpressionStatement[16775-16796]"
    }, {
      "left" : "ch = _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "ch = _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[16823-16861]:ExpressionStatement[16823-16861]"
    }, {
      "left" : "bits = b64variant.decodeBase64Char(ch);",
      "right" : "bits = b64variant.decodeBase64Char(ch);",
      "info" : "ExpressionStatement[16874-16913]:ExpressionStatement[16874-16913]"
    }, {
      "left" : "if (bits < 0)",
      "right" : "if (bits < 0)",
      "info" : "IfStatement[16984-18193]:IfStatement[16984-18193]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16998-18193]:Block[16998-18193]"
    }, {
      "left" : "if (bits != Base64Variant.BASE64_VALUE_PADDING)",
      "right" : "if (bits != Base64Variant.BASE64_VALUE_PADDING)",
      "info" : "IfStatement[17016-17461]:IfStatement[17016-17461]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17064-17461]:Block[17064-17461]"
    }, {
      "left" : "if (ch == '\"' && !b64variant.usesPadding())",
      "right" : "if (ch == '\"' && !b64variant.usesPadding())",
      "info" : "IfStatement[17169-17376]:IfStatement[17169-17376]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17213-17376]:Block[17213-17376]"
    }, {
      "left" : "decodedData >>= 4;",
      "right" : "decodedData >>= 4;",
      "info" : "ExpressionStatement[17239-17257]:ExpressionStatement[17239-17257]"
    }, {
      "left" : "buffer[outputPtr++] = (byte) decodedData;",
      "right" : "buffer[outputPtr++] = (byte) decodedData;",
      "info" : "ExpressionStatement[17282-17323]:ExpressionStatement[17282-17323]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[17348-17354]:BreakStatement[17348-17354]"
    }, {
      "left" : "bits = _decodeBase64Escape(b64variant, ch, 2);",
      "right" : "bits = _decodeBase64Escape(b64variant, ch, 2);",
      "info" : "ExpressionStatement[17397-17443]:ExpressionStatement[17397-17443]"
    }, {
      "left" : "if (bits == Base64Variant.BASE64_VALUE_PADDING)",
      "right" : "if (bits == Base64Variant.BASE64_VALUE_PADDING)",
      "info" : "IfStatement[17478-18179]:IfStatement[17478-18179]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17526-18179]:Block[17526-18179]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[17592-17689]:IfStatement[17592-17689]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17620-17689]:Block[17620-17689]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[17646-17667]:ExpressionStatement[17646-17667]"
    }, {
      "left" : "ch = _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "ch = _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[17710-17748]:ExpressionStatement[17710-17748]"
    }, {
      "left" : "if (!b64variant.usesPaddingChar(ch))",
      "right" : "if (!b64variant.usesPaddingChar(ch))",
      "info" : "IfStatement[17769-17967]:IfStatement[17769-17967]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17806-17967]:Block[17806-17967]"
    }, {
      "left" : "throw reportInvalidBase64Char(b64variant, ch, 3, \"expected padding character '\"+b64variant.getPaddingChar()+\"'\");",
      "right" : "throw reportInvalidBase64Char(b64variant, ch, 3, \"expected padding character '\"+b64variant.getPaddingChar()+\"'\");",
      "info" : "ThrowStatement[17832-17945]:ThrowStatement[17832-17945]"
    }, {
      "left" : "decodedData >>= 4;",
      "right" : "decodedData >>= 4;",
      "info" : "ExpressionStatement[18051-18069]:ExpressionStatement[18051-18069]"
    }, {
      "left" : "buffer[outputPtr++] = (byte) decodedData;",
      "right" : "buffer[outputPtr++] = (byte) decodedData;",
      "info" : "ExpressionStatement[18090-18131]:ExpressionStatement[18090-18131]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[18152-18161]:ContinueStatement[18152-18161]"
    }, {
      "left" : "decodedData = (decodedData << 6) | bits;",
      "right" : "decodedData = (decodedData << 6) | bits;",
      "info" : "ExpressionStatement[18240-18280]:ExpressionStatement[18240-18280]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[18364-18445]:IfStatement[18364-18445]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18392-18445]:Block[18392-18445]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[18410-18431]:ExpressionStatement[18410-18431]"
    }, {
      "left" : "ch = _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "ch = _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[18458-18496]:ExpressionStatement[18458-18496]"
    }, {
      "left" : "bits = b64variant.decodeBase64Char(ch);",
      "right" : "bits = b64variant.decodeBase64Char(ch);",
      "info" : "ExpressionStatement[18509-18548]:ExpressionStatement[18509-18548]"
    }, {
      "left" : "if (bits < 0)",
      "right" : "if (bits < 0)",
      "info" : "IfStatement[18561-19739]:IfStatement[18561-19739]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18575-19739]:Block[18575-19739]"
    }, {
      "left" : "if (bits != Base64Variant.BASE64_VALUE_PADDING)",
      "right" : "if (bits != Base64Variant.BASE64_VALUE_PADDING)",
      "info" : "IfStatement[18593-19111]:IfStatement[18593-19111]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18641-19111]:Block[18641-19111]"
    }, {
      "left" : "if (ch == '\"' && !b64variant.usesPadding())",
      "right" : "if (ch == '\"' && !b64variant.usesPadding())",
      "info" : "IfStatement[18746-19026]:IfStatement[18746-19026]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18790-19026]:Block[18790-19026]"
    }, {
      "left" : "decodedData >>= 2;",
      "right" : "decodedData >>= 2;",
      "info" : "ExpressionStatement[18816-18834]:ExpressionStatement[18816-18834]"
    }, {
      "left" : "buffer[outputPtr++] = (byte) (decodedData >> 8);",
      "right" : "buffer[outputPtr++] = (byte) (decodedData >> 8);",
      "info" : "ExpressionStatement[18859-18907]:ExpressionStatement[18859-18907]"
    }, {
      "left" : "buffer[outputPtr++] = (byte) decodedData;",
      "right" : "buffer[outputPtr++] = (byte) decodedData;",
      "info" : "ExpressionStatement[18932-18973]:ExpressionStatement[18932-18973]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[18998-19004]:BreakStatement[18998-19004]"
    }, {
      "left" : "bits = _decodeBase64Escape(b64variant, ch, 3);",
      "right" : "bits = _decodeBase64Escape(b64variant, ch, 3);",
      "info" : "ExpressionStatement[19047-19093]:ExpressionStatement[19047-19093]"
    }, {
      "left" : "if (bits == Base64Variant.BASE64_VALUE_PADDING)",
      "right" : "if (bits == Base64Variant.BASE64_VALUE_PADDING)",
      "info" : "IfStatement[19128-19725]:IfStatement[19128-19725]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19176-19725]:Block[19176-19725]"
    }, {
      "left" : "decodedData >>= 2;",
      "right" : "decodedData >>= 2;",
      "info" : "ExpressionStatement[19528-19546]:ExpressionStatement[19528-19546]"
    }, {
      "left" : "buffer[outputPtr++] = (byte) (decodedData >> 8);",
      "right" : "buffer[outputPtr++] = (byte) (decodedData >> 8);",
      "info" : "ExpressionStatement[19567-19615]:ExpressionStatement[19567-19615]"
    }, {
      "left" : "buffer[outputPtr++] = (byte) decodedData;",
      "right" : "buffer[outputPtr++] = (byte) decodedData;",
      "info" : "ExpressionStatement[19636-19677]:ExpressionStatement[19636-19677]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[19698-19707]:ContinueStatement[19698-19707]"
    }, {
      "left" : "decodedData = (decodedData << 6) | bits;",
      "right" : "decodedData = (decodedData << 6) | bits;",
      "info" : "ExpressionStatement[19806-19846]:ExpressionStatement[19806-19846]"
    }, {
      "left" : "buffer[outputPtr++] = (byte) (decodedData >> 16);",
      "right" : "buffer[outputPtr++] = (byte) (decodedData >> 16);",
      "info" : "ExpressionStatement[19859-19908]:ExpressionStatement[19859-19908]"
    }, {
      "left" : "buffer[outputPtr++] = (byte) (decodedData >> 8);",
      "right" : "buffer[outputPtr++] = (byte) (decodedData >> 8);",
      "info" : "ExpressionStatement[19921-19969]:ExpressionStatement[19921-19969]"
    }, {
      "left" : "buffer[outputPtr++] = (byte) decodedData;",
      "right" : "buffer[outputPtr++] = (byte) decodedData;",
      "info" : "ExpressionStatement[19982-20023]:ExpressionStatement[19982-20023]"
    }, {
      "left" : "_tokenIncomplete = false;",
      "right" : "_tokenIncomplete = false;",
      "info" : "ExpressionStatement[20042-20067]:ExpressionStatement[20042-20067]"
    }, {
      "left" : "if (outputPtr > 0)",
      "right" : "if (outputPtr > 0)",
      "info" : "IfStatement[20076-20189]:IfStatement[20076-20189]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20095-20189]:Block[20095-20189]"
    }, {
      "left" : "outputCount += outputPtr;",
      "right" : "outputCount += outputPtr;",
      "info" : "ExpressionStatement[20109-20134]:ExpressionStatement[20109-20134]"
    }, {
      "left" : "out.write(buffer, 0, outputPtr);",
      "right" : "out.write(buffer, 0, outputPtr);",
      "info" : "ExpressionStatement[20147-20179]:ExpressionStatement[20147-20179]"
    }, {
      "left" : "return outputCount;",
      "right" : "return outputCount;",
      "info" : "ReturnStatement[20198-20217]:ReturnStatement[20198-20217]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[20524-20533]:MarkerAnnotation[20524-20533]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[20538-20544]:Modifier[20538-20544]"
    }, {
      "left" : "JsonToken",
      "right" : "JsonToken",
      "info" : "SimpleType[20545-20554]:SimpleType[20545-20554]"
    }, {
      "left" : "nextToken",
      "right" : "nextToken",
      "info" : "SimpleName[20555-20564]:SimpleName[20555-20564]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[20582-20593]:SimpleType[20582-20593]"
    }, {
      "left" : "JsonParseException",
      "right" : "JsonParseException",
      "info" : "SimpleType[20595-20613]:SimpleType[20595-20613]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20618-25011]:Block[20618-25011]"
    }, {
      "left" : "_numTypesValid = NR_UNKNOWN;",
      "right" : "_numTypesValid = NR_UNKNOWN;",
      "info" : "ExpressionStatement[20628-20656]:ExpressionStatement[20628-20656]"
    }, {
      "left" : "if (_currToken == JsonToken.FIELD_NAME)",
      "right" : "if (_currToken == JsonToken.FIELD_NAME)",
      "info" : "IfStatement[20878-20966]:IfStatement[20878-20966]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20918-20966]:Block[20918-20966]"
    }, {
      "left" : "return _nextAfterName();",
      "right" : "return _nextAfterName();",
      "info" : "ReturnStatement[20932-20956]:ReturnStatement[20932-20956]"
    }, {
      "left" : "if (_tokenIncomplete)",
      "right" : "if (_tokenIncomplete)",
      "info" : "IfStatement[20975-21066]:IfStatement[20975-21066]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20997-21066]:Block[20997-21066]"
    }, {
      "left" : "_skipString();",
      "right" : "_skipString();",
      "info" : "ExpressionStatement[21011-21025]:ExpressionStatement[21011-21025]"
    }, {
      "left" : "int i = _skipWSOrEnd();",
      "right" : "int i = _skipWSOrEnd();",
      "info" : "VariableDeclarationStatement[21076-21099]:VariableDeclarationStatement[21076-21099]"
    }, {
      "left" : "if (i < 0)",
      "right" : "if (i < 0)",
      "info" : "IfStatement[21108-21372]:IfStatement[21108-21372]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21119-21372]:Block[21119-21372]"
    }, {
      "left" : "close();",
      "right" : "close();",
      "info" : "ExpressionStatement[21314-21322]:ExpressionStatement[21314-21322]"
    }, {
      "left" : "return (_currToken = null);",
      "right" : "return (_currToken = null);",
      "info" : "ReturnStatement[21335-21362]:ReturnStatement[21335-21362]"
    }, {
      "left" : "_tokenInputTotal = _currInputProcessed + _inputPtr - 1;",
      "right" : "_tokenInputTotal = _currInputProcessed + _inputPtr - 1;",
      "info" : "ExpressionStatement[21512-21567]:ExpressionStatement[21512-21567]"
    }, {
      "left" : "_tokenInputRow = _currInputRow;",
      "right" : "_tokenInputRow = _currInputRow;",
      "info" : "ExpressionStatement[21576-21607]:ExpressionStatement[21576-21607]"
    }, {
      "left" : "_tokenInputCol = _inputPtr - _currInputRowStart - 1;",
      "right" : "_tokenInputCol = _inputPtr - _currInputRowStart - 1;",
      "info" : "ExpressionStatement[21616-21668]:ExpressionStatement[21616-21668]"
    }, {
      "left" : "_binaryValue = null;",
      "right" : "_binaryValue = null;",
      "info" : "ExpressionStatement[21729-21749]:ExpressionStatement[21729-21749]"
    }, {
      "left" : "if (i == INT_RBRACKET)",
      "right" : "if (i == INT_RBRACKET)",
      "info" : "IfStatement[21785-22045]:IfStatement[21785-22045]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21808-22045]:Block[21808-22045]"
    }, {
      "left" : "if (!_parsingContext.inArray())",
      "right" : "if (!_parsingContext.inArray())",
      "info" : "IfStatement[21822-21921]:IfStatement[21822-21921]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21854-21921]:Block[21854-21921]"
    }, {
      "left" : "_reportMismatchedEndMarker(i, '}');",
      "right" : "_reportMismatchedEndMarker(i, '}');",
      "info" : "ExpressionStatement[21872-21907]:ExpressionStatement[21872-21907]"
    }, {
      "left" : "_parsingContext = _parsingContext.getParent();",
      "right" : "_parsingContext = _parsingContext.getParent();",
      "info" : "ExpressionStatement[21934-21980]:ExpressionStatement[21934-21980]"
    }, {
      "left" : "return (_currToken = JsonToken.END_ARRAY);",
      "right" : "return (_currToken = JsonToken.END_ARRAY);",
      "info" : "ReturnStatement[21993-22035]:ReturnStatement[21993-22035]"
    }, {
      "left" : "if (i == INT_RCURLY)",
      "right" : "if (i == INT_RCURLY)",
      "info" : "IfStatement[22054-22314]:IfStatement[22054-22314]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22075-22314]:Block[22075-22314]"
    }, {
      "left" : "if (!_parsingContext.inObject())",
      "right" : "if (!_parsingContext.inObject())",
      "info" : "IfStatement[22089-22189]:IfStatement[22089-22189]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22122-22189]:Block[22122-22189]"
    }, {
      "left" : "_reportMismatchedEndMarker(i, ']');",
      "right" : "_reportMismatchedEndMarker(i, ']');",
      "info" : "ExpressionStatement[22140-22175]:ExpressionStatement[22140-22175]"
    }, {
      "left" : "_parsingContext = _parsingContext.getParent();",
      "right" : "_parsingContext = _parsingContext.getParent();",
      "info" : "ExpressionStatement[22202-22248]:ExpressionStatement[22202-22248]"
    }, {
      "left" : "return (_currToken = JsonToken.END_OBJECT);",
      "right" : "return (_currToken = JsonToken.END_OBJECT);",
      "info" : "ReturnStatement[22261-22304]:ReturnStatement[22261-22304]"
    }, {
      "left" : "if (_parsingContext.expectComma())",
      "right" : "if (_parsingContext.expectComma())",
      "info" : "IfStatement[22368-22608]:IfStatement[22368-22608]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22403-22608]:Block[22403-22608]"
    }, {
      "left" : "if (i != INT_COMMA)",
      "right" : "if (i != INT_COMMA)",
      "info" : "IfStatement[22417-22571]:IfStatement[22417-22571]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22437-22571]:Block[22437-22571]"
    }, {
      "left" : "_reportUnexpectedChar(i, \"was expecting comma to separate \"+_parsingContext.getTypeDesc()+\" entries\");",
      "right" : "_reportUnexpectedChar(i, \"was expecting comma to separate \"+_parsingContext.getTypeDesc()+\" entries\");",
      "info" : "ExpressionStatement[22455-22557]:ExpressionStatement[22455-22557]"
    }, {
      "left" : "i = _skipWS();",
      "right" : "i = _skipWS();",
      "info" : "ExpressionStatement[22584-22598]:ExpressionStatement[22584-22598]"
    }, {
      "left" : "if (!_parsingContext.inObject())",
      "right" : "if (!_parsingContext.inObject())",
      "info" : "IfStatement[22790-22879]:IfStatement[22790-22879]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22823-22879]:Block[22823-22879]"
    }, {
      "left" : "return _nextTokenNotInObject(i);",
      "right" : "return _nextTokenNotInObject(i);",
      "info" : "ReturnStatement[22837-22869]:ReturnStatement[22837-22869]"
    }, {
      "left" : "Name n = _parseFieldName(i);",
      "right" : "Name n = _parseFieldName(i);",
      "info" : "VariableDeclarationStatement[22937-22965]:VariableDeclarationStatement[22937-22965]"
    }, {
      "left" : "_parsingContext.setCurrentName(n.getName());",
      "right" : "_parsingContext.setCurrentName(n.getName());",
      "info" : "ExpressionStatement[22974-23018]:ExpressionStatement[22974-23018]"
    }, {
      "left" : "_currToken = JsonToken.FIELD_NAME;",
      "right" : "_currToken = JsonToken.FIELD_NAME;",
      "info" : "ExpressionStatement[23027-23061]:ExpressionStatement[23027-23061]"
    }, {
      "left" : "if (_inputPtr < _inputEnd && _inputBuffer[_inputPtr] == ':')",
      "right" : "if (_inputPtr < _inputEnd && _inputBuffer[_inputPtr] == ':')",
      "info" : "IfStatement[23108-23397]:IfStatement[23108-23397]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23169-23205]:Block[23169-23205]"
    }, {
      "left" : "++_inputPtr;",
      "right" : "++_inputPtr;",
      "info" : "ExpressionStatement[23183-23195]:ExpressionStatement[23183-23195]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23211-23397]:Block[23211-23397]"
    }, {
      "left" : "i = _skipWS();",
      "right" : "i = _skipWS();",
      "info" : "ExpressionStatement[23225-23239]:ExpressionStatement[23225-23239]"
    }, {
      "left" : "if (i != INT_COLON)",
      "right" : "if (i != INT_COLON)",
      "info" : "IfStatement[23252-23387]:IfStatement[23252-23387]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23272-23387]:Block[23272-23387]"
    }, {
      "left" : "_reportUnexpectedChar(i, \"was expecting a colon to separate field name and value\");",
      "right" : "_reportUnexpectedChar(i, \"was expecting a colon to separate field name and value\");",
      "info" : "ExpressionStatement[23290-23373]:ExpressionStatement[23290-23373]"
    }, {
      "left" : "i = _skipWS();",
      "right" : "i = _skipWS();",
      "info" : "ExpressionStatement[23406-23420]:ExpressionStatement[23406-23420]"
    }, {
      "left" : "if (i == INT_QUOTE)",
      "right" : "if (i == INT_QUOTE)",
      "info" : "IfStatement[23519-23667]:IfStatement[23519-23667]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23539-23667]:Block[23539-23667]"
    }, {
      "left" : "_tokenIncomplete = true;",
      "right" : "_tokenIncomplete = true;",
      "info" : "ExpressionStatement[23553-23577]:ExpressionStatement[23553-23577]"
    }, {
      "left" : "_nextToken = JsonToken.VALUE_STRING;",
      "right" : "_nextToken = JsonToken.VALUE_STRING;",
      "info" : "ExpressionStatement[23590-23626]:ExpressionStatement[23590-23626]"
    }, {
      "left" : "return _currToken;",
      "right" : "return _currToken;",
      "info" : "ReturnStatement[23639-23657]:ReturnStatement[23639-23657]"
    }, {
      "left" : "JsonToken t;",
      "right" : "JsonToken t;",
      "info" : "VariableDeclarationStatement[23684-23696]:VariableDeclarationStatement[23684-23696]"
    }, {
      "left" : "switch (i) {\n        case '[':\n            t = JsonToken.START_ARRAY;\n            break;\n        case '{':\n            t = JsonToken.START_OBJECT;\n            break;\n        case ']':\n        case '}':\n            // Error: neither is valid at this point; valid closers have\n            // been handled earlier\n            _reportUnexpectedChar(i, \"expected a value\");\n        case 't':\n            _matchToken(\"true\", 1);\n            t = JsonToken.VALUE_TRUE;\n            break;\n        case 'f':\n            _matchToken(\"false\", 1);\n             t = JsonToken.VALUE_FALSE;\n            break;\n        case 'n':\n            _matchToken(\"null\", 1);\n            t = JsonToken.VALUE_NULL;\n            break;\n\n        case '-':\n            /* Should we have separate handling for plus? Although\n             * it is not allowed per se, it may be erroneously used,\n             * and could be indicate by a more specific error message.\n             */\n        case '0':\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n            t = _parseNumber(i);\n            break;\n        default:\n            t = _handleUnexpectedValue(i);\n        }",
      "right" : "switch (i) {\n        case '[':\n            t = JsonToken.START_ARRAY;\n            break;\n        case '{':\n            t = JsonToken.START_OBJECT;\n            break;\n        case ']':\n        case '}':\n            // Error: neither is valid at this point; valid closers have\n            // been handled earlier\n            _reportUnexpectedChar(i, \"expected a value\");\n        case 't':\n            _matchToken(\"true\", 1);\n            t = JsonToken.VALUE_TRUE;\n            break;\n        case 'f':\n            _matchToken(\"false\", 1);\n             t = JsonToken.VALUE_FALSE;\n            break;\n        case 'n':\n            _matchToken(\"null\", 1);\n            t = JsonToken.VALUE_NULL;\n            break;\n\n        case '-':\n            /* Should we have separate handling for plus? Although\n             * it is not allowed per se, it may be erroneously used,\n             * and could be indicate by a more specific error message.\n             */\n        case '0':\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n            t = _parseNumber(i);\n            break;\n        default:\n            t = _handleUnexpectedValue(i);\n        }",
      "info" : "SwitchStatement[23706-24954]:SwitchStatement[23706-24954]"
    }, {
      "left" : "case '[':",
      "right" : "case '[':",
      "info" : "SwitchCase[23727-23736]:SwitchCase[23727-23736]"
    }, {
      "left" : "t = JsonToken.START_ARRAY;",
      "right" : "t = JsonToken.START_ARRAY;",
      "info" : "ExpressionStatement[23749-23775]:ExpressionStatement[23749-23775]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[23788-23794]:BreakStatement[23788-23794]"
    }, {
      "left" : "case '{':",
      "right" : "case '{':",
      "info" : "SwitchCase[23803-23812]:SwitchCase[23803-23812]"
    }, {
      "left" : "t = JsonToken.START_OBJECT;",
      "right" : "t = JsonToken.START_OBJECT;",
      "info" : "ExpressionStatement[23825-23852]:ExpressionStatement[23825-23852]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[23865-23871]:BreakStatement[23865-23871]"
    }, {
      "left" : "case ']':",
      "right" : "case ']':",
      "info" : "SwitchCase[23880-23889]:SwitchCase[23880-23889]"
    }, {
      "left" : "case '}':",
      "right" : "case '}':",
      "info" : "SwitchCase[23898-23907]:SwitchCase[23898-23907]"
    }, {
      "left" : "_reportUnexpectedChar(i, \"expected a value\");",
      "right" : "_reportUnexpectedChar(i, \"expected a value\");",
      "info" : "ExpressionStatement[24029-24074]:ExpressionStatement[24029-24074]"
    }, {
      "left" : "case 't':",
      "right" : "case 't':",
      "info" : "SwitchCase[24083-24092]:SwitchCase[24083-24092]"
    }, {
      "left" : "_matchToken(\"true\", 1);",
      "right" : "_matchToken(\"true\", 1);",
      "info" : "ExpressionStatement[24105-24128]:ExpressionStatement[24105-24128]"
    }, {
      "left" : "t = JsonToken.VALUE_TRUE;",
      "right" : "t = JsonToken.VALUE_TRUE;",
      "info" : "ExpressionStatement[24141-24166]:ExpressionStatement[24141-24166]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[24179-24185]:BreakStatement[24179-24185]"
    }, {
      "left" : "case 'f':",
      "right" : "case 'f':",
      "info" : "SwitchCase[24194-24203]:SwitchCase[24194-24203]"
    }, {
      "left" : "_matchToken(\"false\", 1);",
      "right" : "_matchToken(\"false\", 1);",
      "info" : "ExpressionStatement[24216-24240]:ExpressionStatement[24216-24240]"
    }, {
      "left" : "t = JsonToken.VALUE_FALSE;",
      "right" : "t = JsonToken.VALUE_FALSE;",
      "info" : "ExpressionStatement[24254-24280]:ExpressionStatement[24254-24280]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[24293-24299]:BreakStatement[24293-24299]"
    }, {
      "left" : "case 'n':",
      "right" : "case 'n':",
      "info" : "SwitchCase[24308-24317]:SwitchCase[24308-24317]"
    }, {
      "left" : "_matchToken(\"null\", 1);",
      "right" : "_matchToken(\"null\", 1);",
      "info" : "ExpressionStatement[24330-24353]:ExpressionStatement[24330-24353]"
    }, {
      "left" : "t = JsonToken.VALUE_NULL;",
      "right" : "t = JsonToken.VALUE_NULL;",
      "info" : "ExpressionStatement[24366-24391]:ExpressionStatement[24366-24391]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[24404-24410]:BreakStatement[24404-24410]"
    }, {
      "left" : "case '-':",
      "right" : "case '-':",
      "info" : "SwitchCase[24420-24429]:SwitchCase[24420-24429]"
    }, {
      "left" : "case '0':",
      "right" : "case '0':",
      "info" : "SwitchCase[24661-24670]:SwitchCase[24661-24670]"
    }, {
      "left" : "case '1':",
      "right" : "case '1':",
      "info" : "SwitchCase[24679-24688]:SwitchCase[24679-24688]"
    }, {
      "left" : "case '2':",
      "right" : "case '2':",
      "info" : "SwitchCase[24697-24706]:SwitchCase[24697-24706]"
    }, {
      "left" : "case '3':",
      "right" : "case '3':",
      "info" : "SwitchCase[24715-24724]:SwitchCase[24715-24724]"
    }, {
      "left" : "case '4':",
      "right" : "case '4':",
      "info" : "SwitchCase[24733-24742]:SwitchCase[24733-24742]"
    }, {
      "left" : "case '5':",
      "right" : "case '5':",
      "info" : "SwitchCase[24751-24760]:SwitchCase[24751-24760]"
    }, {
      "left" : "case '6':",
      "right" : "case '6':",
      "info" : "SwitchCase[24769-24778]:SwitchCase[24769-24778]"
    }, {
      "left" : "case '7':",
      "right" : "case '7':",
      "info" : "SwitchCase[24787-24796]:SwitchCase[24787-24796]"
    }, {
      "left" : "case '8':",
      "right" : "case '8':",
      "info" : "SwitchCase[24805-24814]:SwitchCase[24805-24814]"
    }, {
      "left" : "case '9':",
      "right" : "case '9':",
      "info" : "SwitchCase[24823-24832]:SwitchCase[24823-24832]"
    }, {
      "left" : "t = _parseNumber(i);",
      "right" : "t = _parseNumber(i);",
      "info" : "ExpressionStatement[24845-24865]:ExpressionStatement[24845-24865]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[24878-24884]:BreakStatement[24878-24884]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[24893-24901]:SwitchCase[24893-24901]"
    }, {
      "left" : "t = _handleUnexpectedValue(i);",
      "right" : "t = _handleUnexpectedValue(i);",
      "info" : "ExpressionStatement[24914-24944]:ExpressionStatement[24914-24944]"
    }, {
      "left" : "_nextToken = t;",
      "right" : "_nextToken = t;",
      "info" : "ExpressionStatement[24963-24978]:ExpressionStatement[24963-24978]"
    }, {
      "left" : "return _currToken;",
      "right" : "return _currToken;",
      "info" : "ReturnStatement[24987-25005]:ReturnStatement[24987-25005]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[25017-25024]:Modifier[25017-25024]"
    }, {
      "left" : "JsonToken",
      "right" : "JsonToken",
      "info" : "SimpleType[25025-25034]:SimpleType[25025-25034]"
    }, {
      "left" : "_nextTokenNotInObject",
      "right" : "_nextTokenNotInObject",
      "info" : "SimpleName[25035-25056]:SimpleName[25035-25056]"
    }, {
      "left" : "int i",
      "right" : "int i",
      "info" : "SingleVariableDeclaration[25057-25062]:SingleVariableDeclaration[25057-25062]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[25079-25090]:SimpleType[25079-25090]"
    }, {
      "left" : "JsonParseException",
      "right" : "JsonParseException",
      "info" : "SimpleType[25092-25110]:SimpleType[25092-25110]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25115-26710]:Block[25115-26710]"
    }, {
      "left" : "if (i == INT_QUOTE)",
      "right" : "if (i == INT_QUOTE)",
      "info" : "IfStatement[25125-25251]:IfStatement[25125-25251]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25145-25251]:Block[25145-25251]"
    }, {
      "left" : "_tokenIncomplete = true;",
      "right" : "_tokenIncomplete = true;",
      "info" : "ExpressionStatement[25159-25183]:ExpressionStatement[25159-25183]"
    }, {
      "left" : "return (_currToken = JsonToken.VALUE_STRING);",
      "right" : "return (_currToken = JsonToken.VALUE_STRING);",
      "info" : "ReturnStatement[25196-25241]:ReturnStatement[25196-25241]"
    }, {
      "left" : "switch (i) {\n        case '[':\n            _parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);\n            return (_currToken = JsonToken.START_ARRAY);\n        case '{':\n            _parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);\n            return (_currToken = JsonToken.START_OBJECT);\n        case ']':\n        case '}':\n            // Error: neither is valid at this point; valid closers have\n            // been handled earlier\n            _reportUnexpectedChar(i, \"expected a value\");\n        case 't':\n            _matchToken(\"true\", 1);\n            return (_currToken = JsonToken.VALUE_TRUE);\n        case 'f':\n            _matchToken(\"false\", 1);\n            return (_currToken = JsonToken.VALUE_FALSE);\n        case 'n':\n            _matchToken(\"null\", 1);\n            return (_currToken = JsonToken.VALUE_NULL);\n        case '-':\n            /* Should we have separate handling for plus? Although\n             * it is not allowed per se, it may be erroneously used,\n             * and could be indicate by a more specific error message.\n             */\n        case '0':\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n            return (_currToken = _parseNumber(i));\n        }",
      "right" : "switch (i) {\n        case '[':\n            _parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);\n            return (_currToken = JsonToken.START_ARRAY);\n        case '{':\n            _parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);\n            return (_currToken = JsonToken.START_OBJECT);\n        case ']':\n        case '}':\n            // Error: neither is valid at this point; valid closers have\n            // been handled earlier\n            _reportUnexpectedChar(i, \"expected a value\");\n        case 't':\n            _matchToken(\"true\", 1);\n            return (_currToken = JsonToken.VALUE_TRUE);\n        case 'f':\n            _matchToken(\"false\", 1);\n            return (_currToken = JsonToken.VALUE_FALSE);\n        case 'n':\n            _matchToken(\"null\", 1);\n            return (_currToken = JsonToken.VALUE_NULL);\n        case '-':\n            /* Should we have separate handling for plus? Although\n             * it is not allowed per se, it may be erroneously used,\n             * and could be indicate by a more specific error message.\n             */\n        case '0':\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n            return (_currToken = _parseNumber(i));\n        }",
      "info" : "SwitchStatement[25260-26647]:SwitchStatement[25260-26647]"
    }, {
      "left" : "case '[':",
      "right" : "case '[':",
      "info" : "SwitchCase[25281-25290]:SwitchCase[25281-25290]"
    }, {
      "left" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
      "right" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
      "info" : "ExpressionStatement[25303-25393]:ExpressionStatement[25303-25393]"
    }, {
      "left" : "return (_currToken = JsonToken.START_ARRAY);",
      "right" : "return (_currToken = JsonToken.START_ARRAY);",
      "info" : "ReturnStatement[25406-25450]:ReturnStatement[25406-25450]"
    }, {
      "left" : "case '{':",
      "right" : "case '{':",
      "info" : "SwitchCase[25459-25468]:SwitchCase[25459-25468]"
    }, {
      "left" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
      "right" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
      "info" : "ExpressionStatement[25481-25572]:ExpressionStatement[25481-25572]"
    }, {
      "left" : "return (_currToken = JsonToken.START_OBJECT);",
      "right" : "return (_currToken = JsonToken.START_OBJECT);",
      "info" : "ReturnStatement[25585-25630]:ReturnStatement[25585-25630]"
    }, {
      "left" : "case ']':",
      "right" : "case ']':",
      "info" : "SwitchCase[25639-25648]:SwitchCase[25639-25648]"
    }, {
      "left" : "case '}':",
      "right" : "case '}':",
      "info" : "SwitchCase[25657-25666]:SwitchCase[25657-25666]"
    }, {
      "left" : "_reportUnexpectedChar(i, \"expected a value\");",
      "right" : "_reportUnexpectedChar(i, \"expected a value\");",
      "info" : "ExpressionStatement[25788-25833]:ExpressionStatement[25788-25833]"
    }, {
      "left" : "case 't':",
      "right" : "case 't':",
      "info" : "SwitchCase[25842-25851]:SwitchCase[25842-25851]"
    }, {
      "left" : "_matchToken(\"true\", 1);",
      "right" : "_matchToken(\"true\", 1);",
      "info" : "ExpressionStatement[25864-25887]:ExpressionStatement[25864-25887]"
    }, {
      "left" : "return (_currToken = JsonToken.VALUE_TRUE);",
      "right" : "return (_currToken = JsonToken.VALUE_TRUE);",
      "info" : "ReturnStatement[25900-25943]:ReturnStatement[25900-25943]"
    }, {
      "left" : "case 'f':",
      "right" : "case 'f':",
      "info" : "SwitchCase[25952-25961]:SwitchCase[25952-25961]"
    }, {
      "left" : "_matchToken(\"false\", 1);",
      "right" : "_matchToken(\"false\", 1);",
      "info" : "ExpressionStatement[25974-25998]:ExpressionStatement[25974-25998]"
    }, {
      "left" : "return (_currToken = JsonToken.VALUE_FALSE);",
      "right" : "return (_currToken = JsonToken.VALUE_FALSE);",
      "info" : "ReturnStatement[26011-26055]:ReturnStatement[26011-26055]"
    }, {
      "left" : "case 'n':",
      "right" : "case 'n':",
      "info" : "SwitchCase[26064-26073]:SwitchCase[26064-26073]"
    }, {
      "left" : "_matchToken(\"null\", 1);",
      "right" : "_matchToken(\"null\", 1);",
      "info" : "ExpressionStatement[26086-26109]:ExpressionStatement[26086-26109]"
    }, {
      "left" : "return (_currToken = JsonToken.VALUE_NULL);",
      "right" : "return (_currToken = JsonToken.VALUE_NULL);",
      "info" : "ReturnStatement[26122-26165]:ReturnStatement[26122-26165]"
    }, {
      "left" : "case '-':",
      "right" : "case '-':",
      "info" : "SwitchCase[26174-26183]:SwitchCase[26174-26183]"
    }, {
      "left" : "case '0':",
      "right" : "case '0':",
      "info" : "SwitchCase[26415-26424]:SwitchCase[26415-26424]"
    }, {
      "left" : "case '1':",
      "right" : "case '1':",
      "info" : "SwitchCase[26433-26442]:SwitchCase[26433-26442]"
    }, {
      "left" : "case '2':",
      "right" : "case '2':",
      "info" : "SwitchCase[26451-26460]:SwitchCase[26451-26460]"
    }, {
      "left" : "case '3':",
      "right" : "case '3':",
      "info" : "SwitchCase[26469-26478]:SwitchCase[26469-26478]"
    }, {
      "left" : "case '4':",
      "right" : "case '4':",
      "info" : "SwitchCase[26487-26496]:SwitchCase[26487-26496]"
    }, {
      "left" : "case '5':",
      "right" : "case '5':",
      "info" : "SwitchCase[26505-26514]:SwitchCase[26505-26514]"
    }, {
      "left" : "case '6':",
      "right" : "case '6':",
      "info" : "SwitchCase[26523-26532]:SwitchCase[26523-26532]"
    }, {
      "left" : "case '7':",
      "right" : "case '7':",
      "info" : "SwitchCase[26541-26550]:SwitchCase[26541-26550]"
    }, {
      "left" : "case '8':",
      "right" : "case '8':",
      "info" : "SwitchCase[26559-26568]:SwitchCase[26559-26568]"
    }, {
      "left" : "case '9':",
      "right" : "case '9':",
      "info" : "SwitchCase[26577-26586]:SwitchCase[26577-26586]"
    }, {
      "left" : "return (_currToken = _parseNumber(i));",
      "right" : "return (_currToken = _parseNumber(i));",
      "info" : "ReturnStatement[26599-26637]:ReturnStatement[26599-26637]"
    }, {
      "left" : "return (_currToken = _handleUnexpectedValue(i));",
      "right" : "return (_currToken = _handleUnexpectedValue(i));",
      "info" : "ReturnStatement[26656-26704]:ReturnStatement[26656-26704]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[26720-26727]:Modifier[26720-26727]"
    }, {
      "left" : "JsonToken",
      "right" : "JsonToken",
      "info" : "SimpleType[26728-26737]:SimpleType[26728-26737]"
    }, {
      "left" : "_nextAfterName",
      "right" : "_nextAfterName",
      "info" : "SimpleName[26738-26752]:SimpleName[26738-26752]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26759-27285]:Block[26759-27285]"
    }, {
      "left" : "_nameCopied = false;",
      "right" : "_nameCopied = false;",
      "info" : "ExpressionStatement[26769-26789]:ExpressionStatement[26769-26789]"
    }, {
      "left" : "JsonToken t = _nextToken;",
      "right" : "JsonToken t = _nextToken;",
      "info" : "VariableDeclarationStatement[26837-26862]:VariableDeclarationStatement[26837-26862]"
    }, {
      "left" : "_nextToken = null;",
      "right" : "_nextToken = null;",
      "info" : "ExpressionStatement[26871-26889]:ExpressionStatement[26871-26889]"
    }, {
      "left" : "if (t == JsonToken.START_ARRAY)",
      "right" : "if (t == JsonToken.START_ARRAY)",
      "info" : "IfStatement[26946-27246]:IfStatement[26946-27246]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26978-27092]:Block[26978-27092]"
    }, {
      "left" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
      "right" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
      "info" : "ExpressionStatement[26992-27082]:ExpressionStatement[26992-27082]"
    }, {
      "left" : "if (t == JsonToken.START_OBJECT)",
      "right" : "if (t == JsonToken.START_OBJECT)",
      "info" : "IfStatement[27098-27246]:IfStatement[27098-27246]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27131-27246]:Block[27131-27246]"
    }, {
      "left" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
      "right" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
      "info" : "ExpressionStatement[27145-27236]:ExpressionStatement[27145-27236]"
    }, {
      "left" : "return (_currToken = t);",
      "right" : "return (_currToken = t);",
      "info" : "ReturnStatement[27255-27279]:ReturnStatement[27255-27279]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[27291-27300]:MarkerAnnotation[27291-27300]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[27305-27311]:Modifier[27305-27311]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[27312-27316]:PrimitiveType[27312-27316]"
    }, {
      "left" : "close",
      "right" : "close",
      "info" : "SimpleName[27317-27322]:SimpleName[27317-27322]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[27332-27343]:SimpleType[27332-27343]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27348-27446]:Block[27348-27446]"
    }, {
      "left" : "super.close();",
      "right" : "super.close();",
      "info" : "ExpressionStatement[27358-27372]:ExpressionStatement[27358-27372]"
    }, {
      "left" : "_symbols.release();",
      "right" : "_symbols.release();",
      "info" : "ExpressionStatement[27421-27440]:ExpressionStatement[27421-27440]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[27661-27670]:MarkerAnnotation[27661-27670]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[27675-27681]:Modifier[27675-27681]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[27682-27689]:PrimitiveType[27682-27689]"
    }, {
      "left" : "nextFieldName",
      "right" : "nextFieldName",
      "info" : "SimpleName[27690-27703]:SimpleName[27690-27703]"
    }, {
      "left" : "SerializableString str",
      "right" : "SerializableString str",
      "info" : "SingleVariableDeclaration[27704-27726]:SingleVariableDeclaration[27704-27726]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[27743-27754]:SimpleType[27743-27754]"
    }, {
      "left" : "JsonParseException",
      "right" : "JsonParseException",
      "info" : "SimpleType[27756-27774]:SimpleType[27756-27774]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27779-30936]:Block[27779-30936]"
    }, {
      "left" : "_numTypesValid = NR_UNKNOWN;",
      "right" : "_numTypesValid = NR_UNKNOWN;",
      "info" : "ExpressionStatement[27867-27895]:ExpressionStatement[27867-27895]"
    }, {
      "left" : "if (_currToken == JsonToken.FIELD_NAME)",
      "right" : "if (_currToken == JsonToken.FIELD_NAME)",
      "info" : "IfStatement[27904-28047]:IfStatement[27904-28047]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27944-28047]:Block[27944-28047]"
    }, {
      "left" : "_nextAfterName();",
      "right" : "_nextAfterName();",
      "info" : "ExpressionStatement[27994-28011]:ExpressionStatement[27994-28011]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[28024-28037]:ReturnStatement[28024-28037]"
    }, {
      "left" : "if (_tokenIncomplete)",
      "right" : "if (_tokenIncomplete)",
      "info" : "IfStatement[28056-28116]:IfStatement[28056-28116]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28078-28116]:Block[28078-28116]"
    }, {
      "left" : "_skipString();",
      "right" : "_skipString();",
      "info" : "ExpressionStatement[28092-28106]:ExpressionStatement[28092-28106]"
    }, {
      "left" : "int i = _skipWSOrEnd();",
      "right" : "int i = _skipWSOrEnd();",
      "info" : "VariableDeclarationStatement[28125-28148]:VariableDeclarationStatement[28125-28148]"
    }, {
      "left" : "if (i < 0)",
      "right" : "if (i < 0)",
      "info" : "IfStatement[28157-28273]:IfStatement[28157-28273]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28168-28273]:Block[28168-28273]"
    }, {
      "left" : "close();",
      "right" : "close();",
      "info" : "ExpressionStatement[28198-28206]:ExpressionStatement[28198-28206]"
    }, {
      "left" : "_currToken = null;",
      "right" : "_currToken = null;",
      "info" : "ExpressionStatement[28219-28237]:ExpressionStatement[28219-28237]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[28250-28263]:ReturnStatement[28250-28263]"
    }, {
      "left" : "_tokenInputTotal = _currInputProcessed + _inputPtr - 1;",
      "right" : "_tokenInputTotal = _currInputProcessed + _inputPtr - 1;",
      "info" : "ExpressionStatement[28282-28337]:ExpressionStatement[28282-28337]"
    }, {
      "left" : "_tokenInputRow = _currInputRow;",
      "right" : "_tokenInputRow = _currInputRow;",
      "info" : "ExpressionStatement[28346-28377]:ExpressionStatement[28346-28377]"
    }, {
      "left" : "_tokenInputCol = _inputPtr - _currInputRowStart - 1;",
      "right" : "_tokenInputCol = _inputPtr - _currInputRowStart - 1;",
      "info" : "ExpressionStatement[28386-28438]:ExpressionStatement[28386-28438]"
    }, {
      "left" : "_binaryValue = null;",
      "right" : "_binaryValue = null;",
      "info" : "ExpressionStatement[28499-28519]:ExpressionStatement[28499-28519]"
    }, {
      "left" : "if (i == INT_RBRACKET)",
      "right" : "if (i == INT_RBRACKET)",
      "info" : "IfStatement[28555-28832]:IfStatement[28555-28832]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28578-28832]:Block[28578-28832]"
    }, {
      "left" : "if (!_parsingContext.inArray())",
      "right" : "if (!_parsingContext.inArray())",
      "info" : "IfStatement[28592-28691]:IfStatement[28592-28691]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28624-28691]:Block[28624-28691]"
    }, {
      "left" : "_reportMismatchedEndMarker(i, '}');",
      "right" : "_reportMismatchedEndMarker(i, '}');",
      "info" : "ExpressionStatement[28642-28677]:ExpressionStatement[28642-28677]"
    }, {
      "left" : "_parsingContext = _parsingContext.getParent();",
      "right" : "_parsingContext = _parsingContext.getParent();",
      "info" : "ExpressionStatement[28704-28750]:ExpressionStatement[28704-28750]"
    }, {
      "left" : "_currToken = JsonToken.END_ARRAY;",
      "right" : "_currToken = JsonToken.END_ARRAY;",
      "info" : "ExpressionStatement[28763-28796]:ExpressionStatement[28763-28796]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[28809-28822]:ReturnStatement[28809-28822]"
    }, {
      "left" : "if (i == INT_RCURLY)",
      "right" : "if (i == INT_RCURLY)",
      "info" : "IfStatement[28841-29118]:IfStatement[28841-29118]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28862-29118]:Block[28862-29118]"
    }, {
      "left" : "if (!_parsingContext.inObject())",
      "right" : "if (!_parsingContext.inObject())",
      "info" : "IfStatement[28876-28976]:IfStatement[28876-28976]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28909-28976]:Block[28909-28976]"
    }, {
      "left" : "_reportMismatchedEndMarker(i, ']');",
      "right" : "_reportMismatchedEndMarker(i, ']');",
      "info" : "ExpressionStatement[28927-28962]:ExpressionStatement[28927-28962]"
    }, {
      "left" : "_parsingContext = _parsingContext.getParent();",
      "right" : "_parsingContext = _parsingContext.getParent();",
      "info" : "ExpressionStatement[28989-29035]:ExpressionStatement[28989-29035]"
    }, {
      "left" : "_currToken = JsonToken.END_OBJECT;",
      "right" : "_currToken = JsonToken.END_OBJECT;",
      "info" : "ExpressionStatement[29048-29082]:ExpressionStatement[29048-29082]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[29095-29108]:ReturnStatement[29095-29108]"
    }, {
      "left" : "if (_parsingContext.expectComma())",
      "right" : "if (_parsingContext.expectComma())",
      "info" : "IfStatement[29172-29412]:IfStatement[29172-29412]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29207-29412]:Block[29207-29412]"
    }, {
      "left" : "if (i != INT_COMMA)",
      "right" : "if (i != INT_COMMA)",
      "info" : "IfStatement[29221-29375]:IfStatement[29221-29375]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29241-29375]:Block[29241-29375]"
    }, {
      "left" : "_reportUnexpectedChar(i, \"was expecting comma to separate \"+_parsingContext.getTypeDesc()+\" entries\");",
      "right" : "_reportUnexpectedChar(i, \"was expecting comma to separate \"+_parsingContext.getTypeDesc()+\" entries\");",
      "info" : "ExpressionStatement[29259-29361]:ExpressionStatement[29259-29361]"
    }, {
      "left" : "i = _skipWS();",
      "right" : "i = _skipWS();",
      "info" : "ExpressionStatement[29388-29402]:ExpressionStatement[29388-29402]"
    }, {
      "left" : "if (!_parsingContext.inObject())",
      "right" : "if (!_parsingContext.inObject())",
      "info" : "IfStatement[29422-29530]:IfStatement[29422-29530]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29455-29530]:Block[29455-29530]"
    }, {
      "left" : "_nextTokenNotInObject(i);",
      "right" : "_nextTokenNotInObject(i);",
      "info" : "ExpressionStatement[29469-29494]:ExpressionStatement[29469-29494]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[29507-29520]:ReturnStatement[29507-29520]"
    }, {
      "left" : "if (i == INT_QUOTE)",
      "right" : "if (i == INT_QUOTE)",
      "info" : "IfStatement[29597-30884]:IfStatement[29597-30884]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29617-30884]:Block[29617-30884]"
    }, {
      "left" : "byte[] nameBytes = str.asQuotedUTF8();",
      "right" : "byte[] nameBytes = str.asQuotedUTF8();",
      "info" : "VariableDeclarationStatement[29696-29734]:VariableDeclarationStatement[29696-29734]"
    }, {
      "left" : "final int len = nameBytes.length;",
      "right" : "final int len = nameBytes.length;",
      "info" : "VariableDeclarationStatement[29747-29780]:VariableDeclarationStatement[29747-29780]"
    }, {
      "left" : "if ((_inputPtr + len) < _inputEnd)",
      "right" : "if ((_inputPtr + len) < _inputEnd)",
      "info" : "IfStatement[29793-30874]:IfStatement[29793-30874]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29828-30874]:Block[29828-30874]"
    }, {
      "left" : "final int end = _inputPtr+len;",
      "right" : "final int end = _inputPtr+len;",
      "info" : "VariableDeclarationStatement[29905-29935]:VariableDeclarationStatement[29905-29935]"
    }, {
      "left" : "if (_inputBuffer[end] == INT_QUOTE)",
      "right" : "if (_inputBuffer[end] == INT_QUOTE)",
      "info" : "IfStatement[29952-30860]:IfStatement[29952-30860]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29988-30860]:Block[29988-30860]"
    }, {
      "left" : "int offset = 0;",
      "right" : "int offset = 0;",
      "info" : "VariableDeclarationStatement[30010-30025]:VariableDeclarationStatement[30010-30025]"
    }, {
      "left" : "final int ptr = _inputPtr;",
      "right" : "final int ptr = _inputPtr;",
      "info" : "VariableDeclarationStatement[30046-30072]:VariableDeclarationStatement[30046-30072]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[30093-30842]:WhileStatement[30093-30842]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30106-30842]:Block[30106-30842]"
    }, {
      "left" : "if (offset == len)",
      "right" : "if (offset == len)",
      "info" : "IfStatement[30132-30648]:IfStatement[30132-30648]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30151-30648]:Block[30151-30648]"
    }, {
      "left" : "_inputPtr = end+1;",
      "right" : "_inputPtr = end+1;",
      "info" : "ExpressionStatement[30196-30214]:ExpressionStatement[30196-30214]"
    }, {
      "left" : "_parsingContext.setCurrentName(str.getValue());",
      "right" : "_parsingContext.setCurrentName(str.getValue());",
      "info" : "ExpressionStatement[30340-30387]:ExpressionStatement[30340-30387]"
    }, {
      "left" : "_currToken = JsonToken.FIELD_NAME;",
      "right" : "_currToken = JsonToken.FIELD_NAME;",
      "info" : "ExpressionStatement[30416-30450]:ExpressionStatement[30416-30450]"
    }, {
      "left" : "_isNextTokenNameYes();",
      "right" : "_isNextTokenNameYes();",
      "info" : "ExpressionStatement[30559-30581]:ExpressionStatement[30559-30581]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[30610-30622]:ReturnStatement[30610-30622]"
    }, {
      "left" : "if (nameBytes[offset] != _inputBuffer[ptr+offset])",
      "right" : "if (nameBytes[offset] != _inputBuffer[ptr+offset])",
      "info" : "IfStatement[30673-30786]:IfStatement[30673-30786]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30724-30786]:Block[30724-30786]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[30754-30760]:BreakStatement[30754-30760]"
    }, {
      "left" : "++offset;",
      "right" : "++offset;",
      "info" : "ExpressionStatement[30811-30820]:ExpressionStatement[30811-30820]"
    }, {
      "left" : "return _isNextTokenNameMaybe(i, str);",
      "right" : "return _isNextTokenNameMaybe(i, str);",
      "info" : "ReturnStatement[30893-30930]:ReturnStatement[30893-30930]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[30942-30949]:Modifier[30942-30949]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[30950-30954]:PrimitiveType[30950-30954]"
    }, {
      "left" : "_isNextTokenNameYes",
      "right" : "_isNextTokenNameYes",
      "info" : "SimpleName[30955-30974]:SimpleName[30955-30974]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[30992-31003]:SimpleType[30992-31003]"
    }, {
      "left" : "JsonParseException",
      "right" : "JsonParseException",
      "info" : "SimpleType[31005-31023]:SimpleType[31005-31023]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31028-33006]:Block[31028-33006]"
    }, {
      "left" : "int i;",
      "right" : "int i;",
      "info" : "VariableDeclarationStatement[31109-31115]:VariableDeclarationStatement[31109-31115]"
    }, {
      "left" : "if (_inputPtr < (_inputEnd-1) && _inputBuffer[_inputPtr] == INT_COLON)",
      "right" : "if (_inputPtr < (_inputEnd-1) && _inputBuffer[_inputPtr] == INT_COLON)",
      "info" : "IfStatement[31124-31905]:IfStatement[31124-31905]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31195-31858]:Block[31195-31858]"
    }, {
      "left" : "i = _inputBuffer[++_inputPtr];",
      "right" : "i = _inputBuffer[++_inputPtr];",
      "info" : "ExpressionStatement[31228-31258]:ExpressionStatement[31228-31258]"
    }, {
      "left" : "++_inputPtr;",
      "right" : "++_inputPtr;",
      "info" : "ExpressionStatement[31271-31283]:ExpressionStatement[31271-31283]"
    }, {
      "left" : "if (i == INT_QUOTE)",
      "right" : "if (i == INT_QUOTE)",
      "info" : "IfStatement[31296-31449]:IfStatement[31296-31449]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31316-31449]:Block[31316-31449]"
    }, {
      "left" : "_tokenIncomplete = true;",
      "right" : "_tokenIncomplete = true;",
      "info" : "ExpressionStatement[31334-31358]:ExpressionStatement[31334-31358]"
    }, {
      "left" : "_nextToken = JsonToken.VALUE_STRING;",
      "right" : "_nextToken = JsonToken.VALUE_STRING;",
      "info" : "ExpressionStatement[31375-31411]:ExpressionStatement[31375-31411]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[31428-31435]:ReturnStatement[31428-31435]"
    }, {
      "left" : "if (i == INT_LCURLY)",
      "right" : "if (i == INT_LCURLY)",
      "info" : "IfStatement[31462-31575]:IfStatement[31462-31575]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31483-31575]:Block[31483-31575]"
    }, {
      "left" : "_nextToken = JsonToken.START_OBJECT;",
      "right" : "_nextToken = JsonToken.START_OBJECT;",
      "info" : "ExpressionStatement[31501-31537]:ExpressionStatement[31501-31537]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[31554-31561]:ReturnStatement[31554-31561]"
    }, {
      "left" : "if (i == INT_LBRACKET)",
      "right" : "if (i == INT_LBRACKET)",
      "info" : "IfStatement[31588-31702]:IfStatement[31588-31702]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31611-31702]:Block[31611-31702]"
    }, {
      "left" : "_nextToken = JsonToken.START_ARRAY;",
      "right" : "_nextToken = JsonToken.START_ARRAY;",
      "info" : "ExpressionStatement[31629-31664]:ExpressionStatement[31629-31664]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[31681-31688]:ReturnStatement[31681-31688]"
    }, {
      "left" : "i &= 0xFF;",
      "right" : "i &= 0xFF;",
      "info" : "ExpressionStatement[31715-31725]:ExpressionStatement[31715-31725]"
    }, {
      "left" : "if (i <= INT_SPACE || i == INT_SLASH)",
      "right" : "if (i <= INT_SPACE || i == INT_SLASH)",
      "info" : "IfStatement[31738-31848]:IfStatement[31738-31848]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31776-31848]:Block[31776-31848]"
    }, {
      "left" : "--_inputPtr;",
      "right" : "--_inputPtr;",
      "info" : "ExpressionStatement[31791-31803]:ExpressionStatement[31791-31803]"
    }, {
      "left" : "i = _skipWS();",
      "right" : "i = _skipWS();",
      "info" : "ExpressionStatement[31820-31834]:ExpressionStatement[31820-31834]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31864-31905]:Block[31864-31905]"
    }, {
      "left" : "i = _skipColon();",
      "right" : "i = _skipColon();",
      "info" : "ExpressionStatement[31878-31895]:ExpressionStatement[31878-31895]"
    }, {
      "left" : "switch (i) {\n        case '\"':\n            _tokenIncomplete = true;\n            _nextToken = JsonToken.VALUE_STRING;\n            return;\n        case '[':\n            _nextToken = JsonToken.START_ARRAY;\n            return;\n        case '{':\n            _nextToken = JsonToken.START_OBJECT;\n            return;\n        case ']':\n        case '}':\n            _reportUnexpectedChar(i, \"expected a value\");\n        case 't':\n            _matchToken(\"true\", 1);\n            _nextToken = JsonToken.VALUE_TRUE;\n            return;\n        case 'f':\n            _matchToken(\"false\", 1);\n            _nextToken = JsonToken.VALUE_FALSE;\n            return;\n        case 'n':\n            _matchToken(\"null\", 1);\n            _nextToken = JsonToken.VALUE_NULL;\n            return;\n        case '-':\n        case '0':\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n            _nextToken = _parseNumber(i);\n            return;\n        }",
      "right" : "switch (i) {\n        case '\"':\n            _tokenIncomplete = true;\n            _nextToken = JsonToken.VALUE_STRING;\n            return;\n        case '[':\n            _nextToken = JsonToken.START_ARRAY;\n            return;\n        case '{':\n            _nextToken = JsonToken.START_OBJECT;\n            return;\n        case ']':\n        case '}':\n            _reportUnexpectedChar(i, \"expected a value\");\n        case 't':\n            _matchToken(\"true\", 1);\n            _nextToken = JsonToken.VALUE_TRUE;\n            return;\n        case 'f':\n            _matchToken(\"false\", 1);\n            _nextToken = JsonToken.VALUE_FALSE;\n            return;\n        case 'n':\n            _matchToken(\"null\", 1);\n            _nextToken = JsonToken.VALUE_NULL;\n            return;\n        case '-':\n        case '0':\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n            _nextToken = _parseNumber(i);\n            return;\n        }",
      "info" : "SwitchStatement[31914-32952]:SwitchStatement[31914-32952]"
    }, {
      "left" : "case '\"':",
      "right" : "case '\"':",
      "info" : "SwitchCase[31935-31944]:SwitchCase[31935-31944]"
    }, {
      "left" : "_tokenIncomplete = true;",
      "right" : "_tokenIncomplete = true;",
      "info" : "ExpressionStatement[31957-31981]:ExpressionStatement[31957-31981]"
    }, {
      "left" : "_nextToken = JsonToken.VALUE_STRING;",
      "right" : "_nextToken = JsonToken.VALUE_STRING;",
      "info" : "ExpressionStatement[31994-32030]:ExpressionStatement[31994-32030]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[32043-32050]:ReturnStatement[32043-32050]"
    }, {
      "left" : "case '[':",
      "right" : "case '[':",
      "info" : "SwitchCase[32059-32068]:SwitchCase[32059-32068]"
    }, {
      "left" : "_nextToken = JsonToken.START_ARRAY;",
      "right" : "_nextToken = JsonToken.START_ARRAY;",
      "info" : "ExpressionStatement[32081-32116]:ExpressionStatement[32081-32116]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[32129-32136]:ReturnStatement[32129-32136]"
    }, {
      "left" : "case '{':",
      "right" : "case '{':",
      "info" : "SwitchCase[32145-32154]:SwitchCase[32145-32154]"
    }, {
      "left" : "_nextToken = JsonToken.START_OBJECT;",
      "right" : "_nextToken = JsonToken.START_OBJECT;",
      "info" : "ExpressionStatement[32167-32203]:ExpressionStatement[32167-32203]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[32216-32223]:ReturnStatement[32216-32223]"
    }, {
      "left" : "case ']':",
      "right" : "case ']':",
      "info" : "SwitchCase[32232-32241]:SwitchCase[32232-32241]"
    }, {
      "left" : "case '}':",
      "right" : "case '}':",
      "info" : "SwitchCase[32250-32259]:SwitchCase[32250-32259]"
    }, {
      "left" : "_reportUnexpectedChar(i, \"expected a value\");",
      "right" : "_reportUnexpectedChar(i, \"expected a value\");",
      "info" : "ExpressionStatement[32272-32317]:ExpressionStatement[32272-32317]"
    }, {
      "left" : "case 't':",
      "right" : "case 't':",
      "info" : "SwitchCase[32326-32335]:SwitchCase[32326-32335]"
    }, {
      "left" : "_matchToken(\"true\", 1);",
      "right" : "_matchToken(\"true\", 1);",
      "info" : "ExpressionStatement[32348-32371]:ExpressionStatement[32348-32371]"
    }, {
      "left" : "_nextToken = JsonToken.VALUE_TRUE;",
      "right" : "_nextToken = JsonToken.VALUE_TRUE;",
      "info" : "ExpressionStatement[32384-32418]:ExpressionStatement[32384-32418]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[32431-32438]:ReturnStatement[32431-32438]"
    }, {
      "left" : "case 'f':",
      "right" : "case 'f':",
      "info" : "SwitchCase[32447-32456]:SwitchCase[32447-32456]"
    }, {
      "left" : "_matchToken(\"false\", 1);",
      "right" : "_matchToken(\"false\", 1);",
      "info" : "ExpressionStatement[32469-32493]:ExpressionStatement[32469-32493]"
    }, {
      "left" : "_nextToken = JsonToken.VALUE_FALSE;",
      "right" : "_nextToken = JsonToken.VALUE_FALSE;",
      "info" : "ExpressionStatement[32506-32541]:ExpressionStatement[32506-32541]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[32554-32561]:ReturnStatement[32554-32561]"
    }, {
      "left" : "case 'n':",
      "right" : "case 'n':",
      "info" : "SwitchCase[32570-32579]:SwitchCase[32570-32579]"
    }, {
      "left" : "_matchToken(\"null\", 1);",
      "right" : "_matchToken(\"null\", 1);",
      "info" : "ExpressionStatement[32592-32615]:ExpressionStatement[32592-32615]"
    }, {
      "left" : "_nextToken = JsonToken.VALUE_NULL;",
      "right" : "_nextToken = JsonToken.VALUE_NULL;",
      "info" : "ExpressionStatement[32628-32662]:ExpressionStatement[32628-32662]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[32675-32682]:ReturnStatement[32675-32682]"
    }, {
      "left" : "case '-':",
      "right" : "case '-':",
      "info" : "SwitchCase[32691-32700]:SwitchCase[32691-32700]"
    }, {
      "left" : "case '0':",
      "right" : "case '0':",
      "info" : "SwitchCase[32709-32718]:SwitchCase[32709-32718]"
    }, {
      "left" : "case '1':",
      "right" : "case '1':",
      "info" : "SwitchCase[32727-32736]:SwitchCase[32727-32736]"
    }, {
      "left" : "case '2':",
      "right" : "case '2':",
      "info" : "SwitchCase[32745-32754]:SwitchCase[32745-32754]"
    }, {
      "left" : "case '3':",
      "right" : "case '3':",
      "info" : "SwitchCase[32763-32772]:SwitchCase[32763-32772]"
    }, {
      "left" : "case '4':",
      "right" : "case '4':",
      "info" : "SwitchCase[32781-32790]:SwitchCase[32781-32790]"
    }, {
      "left" : "case '5':",
      "right" : "case '5':",
      "info" : "SwitchCase[32799-32808]:SwitchCase[32799-32808]"
    }, {
      "left" : "case '6':",
      "right" : "case '6':",
      "info" : "SwitchCase[32817-32826]:SwitchCase[32817-32826]"
    }, {
      "left" : "case '7':",
      "right" : "case '7':",
      "info" : "SwitchCase[32835-32844]:SwitchCase[32835-32844]"
    }, {
      "left" : "case '8':",
      "right" : "case '8':",
      "info" : "SwitchCase[32853-32862]:SwitchCase[32853-32862]"
    }, {
      "left" : "case '9':",
      "right" : "case '9':",
      "info" : "SwitchCase[32871-32880]:SwitchCase[32871-32880]"
    }, {
      "left" : "_nextToken = _parseNumber(i);",
      "right" : "_nextToken = _parseNumber(i);",
      "info" : "ExpressionStatement[32893-32922]:ExpressionStatement[32893-32922]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[32935-32942]:ReturnStatement[32935-32942]"
    }, {
      "left" : "_nextToken = _handleUnexpectedValue(i);",
      "right" : "_nextToken = _handleUnexpectedValue(i);",
      "info" : "ExpressionStatement[32961-33000]:ExpressionStatement[32961-33000]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[33016-33023]:Modifier[33016-33023]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[33024-33031]:PrimitiveType[33024-33031]"
    }, {
      "left" : "_isNextTokenNameMaybe",
      "right" : "_isNextTokenNameMaybe",
      "info" : "SimpleName[33032-33053]:SimpleName[33032-33053]"
    }, {
      "left" : "int i",
      "right" : "int i",
      "info" : "SingleVariableDeclaration[33054-33059]:SingleVariableDeclaration[33054-33059]"
    }, {
      "left" : "SerializableString str",
      "right" : "SerializableString str",
      "info" : "SingleVariableDeclaration[33061-33083]:SingleVariableDeclaration[33061-33083]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[33100-33111]:SimpleType[33100-33111]"
    }, {
      "left" : "JsonParseException",
      "right" : "JsonParseException",
      "info" : "SimpleType[33113-33131]:SimpleType[33113-33131]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33136-34908]:Block[33136-34908]"
    }, {
      "left" : "Name n = _parseFieldName(i);",
      "right" : "Name n = _parseFieldName(i);",
      "info" : "VariableDeclarationStatement[33217-33245]:VariableDeclarationStatement[33217-33245]"
    }, {
      "left" : "final boolean match;",
      "right" : "final boolean match;",
      "info" : "VariableDeclarationStatement[33254-33274]:VariableDeclarationStatement[33254-33274]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33283-33441]:Block[33283-33441]"
    }, {
      "left" : "String nameStr = n.getName();",
      "right" : "String nameStr = n.getName();",
      "info" : "VariableDeclarationStatement[33297-33326]:VariableDeclarationStatement[33297-33326]"
    }, {
      "left" : "_parsingContext.setCurrentName(nameStr);",
      "right" : "_parsingContext.setCurrentName(nameStr);",
      "info" : "ExpressionStatement[33339-33379]:ExpressionStatement[33339-33379]"
    }, {
      "left" : "match = nameStr.equals(str.getValue());",
      "right" : "match = nameStr.equals(str.getValue());",
      "info" : "ExpressionStatement[33392-33431]:ExpressionStatement[33392-33431]"
    }, {
      "left" : "_currToken = JsonToken.FIELD_NAME;",
      "right" : "_currToken = JsonToken.FIELD_NAME;",
      "info" : "ExpressionStatement[33450-33484]:ExpressionStatement[33450-33484]"
    }, {
      "left" : "i = _skipWS();",
      "right" : "i = _skipWS();",
      "info" : "ExpressionStatement[33493-33507]:ExpressionStatement[33493-33507]"
    }, {
      "left" : "if (i != INT_COLON)",
      "right" : "if (i != INT_COLON)",
      "info" : "IfStatement[33516-33643]:IfStatement[33516-33643]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33536-33643]:Block[33536-33643]"
    }, {
      "left" : "_reportUnexpectedChar(i, \"was expecting a colon to separate field name and value\");",
      "right" : "_reportUnexpectedChar(i, \"was expecting a colon to separate field name and value\");",
      "info" : "ExpressionStatement[33550-33633]:ExpressionStatement[33550-33633]"
    }, {
      "left" : "i = _skipWS();",
      "right" : "i = _skipWS();",
      "info" : "ExpressionStatement[33652-33666]:ExpressionStatement[33652-33666]"
    }, {
      "left" : "if (i == INT_QUOTE)",
      "right" : "if (i == INT_QUOTE)",
      "info" : "IfStatement[33765-33908]:IfStatement[33765-33908]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33785-33908]:Block[33785-33908]"
    }, {
      "left" : "_tokenIncomplete = true;",
      "right" : "_tokenIncomplete = true;",
      "info" : "ExpressionStatement[33799-33823]:ExpressionStatement[33799-33823]"
    }, {
      "left" : "_nextToken = JsonToken.VALUE_STRING;",
      "right" : "_nextToken = JsonToken.VALUE_STRING;",
      "info" : "ExpressionStatement[33836-33872]:ExpressionStatement[33836-33872]"
    }, {
      "left" : "return match;",
      "right" : "return match;",
      "info" : "ReturnStatement[33885-33898]:ReturnStatement[33885-33898]"
    }, {
      "left" : "JsonToken t;",
      "right" : "JsonToken t;",
      "info" : "VariableDeclarationStatement[33917-33929]:VariableDeclarationStatement[33917-33929]"
    }, {
      "left" : "switch (i) {\n        case '[':\n            t = JsonToken.START_ARRAY;\n            break;\n        case '{':\n            t = JsonToken.START_OBJECT;\n            break;\n        case ']':\n        case '}':\n            _reportUnexpectedChar(i, \"expected a value\");\n        case 't':\n            _matchToken(\"true\", 1);\n            t = JsonToken.VALUE_TRUE;\n            break;\n        case 'f':\n            _matchToken(\"false\", 1);\n             t = JsonToken.VALUE_FALSE;\n            break;\n        case 'n':\n            _matchToken(\"null\", 1);\n            t = JsonToken.VALUE_NULL;\n            break;\n\n        case '-':\n        case '0':\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n\n            t = _parseNumber(i);\n            break;\n        default:\n            t = _handleUnexpectedValue(i);\n        }",
      "right" : "switch (i) {\n        case '[':\n            t = JsonToken.START_ARRAY;\n            break;\n        case '{':\n            t = JsonToken.START_OBJECT;\n            break;\n        case ']':\n        case '}':\n            _reportUnexpectedChar(i, \"expected a value\");\n        case 't':\n            _matchToken(\"true\", 1);\n            t = JsonToken.VALUE_TRUE;\n            break;\n        case 'f':\n            _matchToken(\"false\", 1);\n             t = JsonToken.VALUE_FALSE;\n            break;\n        case 'n':\n            _matchToken(\"null\", 1);\n            t = JsonToken.VALUE_NULL;\n            break;\n\n        case '-':\n        case '0':\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n\n            t = _parseNumber(i);\n            break;\n        default:\n            t = _handleUnexpectedValue(i);\n        }",
      "info" : "SwitchStatement[33939-34856]:SwitchStatement[33939-34856]"
    }, {
      "left" : "case '[':",
      "right" : "case '[':",
      "info" : "SwitchCase[33960-33969]:SwitchCase[33960-33969]"
    }, {
      "left" : "t = JsonToken.START_ARRAY;",
      "right" : "t = JsonToken.START_ARRAY;",
      "info" : "ExpressionStatement[33982-34008]:ExpressionStatement[33982-34008]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[34021-34027]:BreakStatement[34021-34027]"
    }, {
      "left" : "case '{':",
      "right" : "case '{':",
      "info" : "SwitchCase[34036-34045]:SwitchCase[34036-34045]"
    }, {
      "left" : "t = JsonToken.START_OBJECT;",
      "right" : "t = JsonToken.START_OBJECT;",
      "info" : "ExpressionStatement[34058-34085]:ExpressionStatement[34058-34085]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[34098-34104]:BreakStatement[34098-34104]"
    }, {
      "left" : "case ']':",
      "right" : "case ']':",
      "info" : "SwitchCase[34113-34122]:SwitchCase[34113-34122]"
    }, {
      "left" : "case '}':",
      "right" : "case '}':",
      "info" : "SwitchCase[34131-34140]:SwitchCase[34131-34140]"
    }, {
      "left" : "_reportUnexpectedChar(i, \"expected a value\");",
      "right" : "_reportUnexpectedChar(i, \"expected a value\");",
      "info" : "ExpressionStatement[34153-34198]:ExpressionStatement[34153-34198]"
    }, {
      "left" : "case 't':",
      "right" : "case 't':",
      "info" : "SwitchCase[34207-34216]:SwitchCase[34207-34216]"
    }, {
      "left" : "_matchToken(\"true\", 1);",
      "right" : "_matchToken(\"true\", 1);",
      "info" : "ExpressionStatement[34229-34252]:ExpressionStatement[34229-34252]"
    }, {
      "left" : "t = JsonToken.VALUE_TRUE;",
      "right" : "t = JsonToken.VALUE_TRUE;",
      "info" : "ExpressionStatement[34265-34290]:ExpressionStatement[34265-34290]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[34303-34309]:BreakStatement[34303-34309]"
    }, {
      "left" : "case 'f':",
      "right" : "case 'f':",
      "info" : "SwitchCase[34318-34327]:SwitchCase[34318-34327]"
    }, {
      "left" : "_matchToken(\"false\", 1);",
      "right" : "_matchToken(\"false\", 1);",
      "info" : "ExpressionStatement[34340-34364]:ExpressionStatement[34340-34364]"
    }, {
      "left" : "t = JsonToken.VALUE_FALSE;",
      "right" : "t = JsonToken.VALUE_FALSE;",
      "info" : "ExpressionStatement[34378-34404]:ExpressionStatement[34378-34404]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[34417-34423]:BreakStatement[34417-34423]"
    }, {
      "left" : "case 'n':",
      "right" : "case 'n':",
      "info" : "SwitchCase[34432-34441]:SwitchCase[34432-34441]"
    }, {
      "left" : "_matchToken(\"null\", 1);",
      "right" : "_matchToken(\"null\", 1);",
      "info" : "ExpressionStatement[34454-34477]:ExpressionStatement[34454-34477]"
    }, {
      "left" : "t = JsonToken.VALUE_NULL;",
      "right" : "t = JsonToken.VALUE_NULL;",
      "info" : "ExpressionStatement[34490-34515]:ExpressionStatement[34490-34515]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[34528-34534]:BreakStatement[34528-34534]"
    }, {
      "left" : "case '-':",
      "right" : "case '-':",
      "info" : "SwitchCase[34544-34553]:SwitchCase[34544-34553]"
    }, {
      "left" : "case '0':",
      "right" : "case '0':",
      "info" : "SwitchCase[34562-34571]:SwitchCase[34562-34571]"
    }, {
      "left" : "case '1':",
      "right" : "case '1':",
      "info" : "SwitchCase[34580-34589]:SwitchCase[34580-34589]"
    }, {
      "left" : "case '2':",
      "right" : "case '2':",
      "info" : "SwitchCase[34598-34607]:SwitchCase[34598-34607]"
    }, {
      "left" : "case '3':",
      "right" : "case '3':",
      "info" : "SwitchCase[34616-34625]:SwitchCase[34616-34625]"
    }, {
      "left" : "case '4':",
      "right" : "case '4':",
      "info" : "SwitchCase[34634-34643]:SwitchCase[34634-34643]"
    }, {
      "left" : "case '5':",
      "right" : "case '5':",
      "info" : "SwitchCase[34652-34661]:SwitchCase[34652-34661]"
    }, {
      "left" : "case '6':",
      "right" : "case '6':",
      "info" : "SwitchCase[34670-34679]:SwitchCase[34670-34679]"
    }, {
      "left" : "case '7':",
      "right" : "case '7':",
      "info" : "SwitchCase[34688-34697]:SwitchCase[34688-34697]"
    }, {
      "left" : "case '8':",
      "right" : "case '8':",
      "info" : "SwitchCase[34706-34715]:SwitchCase[34706-34715]"
    }, {
      "left" : "case '9':",
      "right" : "case '9':",
      "info" : "SwitchCase[34724-34733]:SwitchCase[34724-34733]"
    }, {
      "left" : "t = _parseNumber(i);",
      "right" : "t = _parseNumber(i);",
      "info" : "ExpressionStatement[34747-34767]:ExpressionStatement[34747-34767]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[34780-34786]:BreakStatement[34780-34786]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[34795-34803]:SwitchCase[34795-34803]"
    }, {
      "left" : "t = _handleUnexpectedValue(i);",
      "right" : "t = _handleUnexpectedValue(i);",
      "info" : "ExpressionStatement[34816-34846]:ExpressionStatement[34816-34846]"
    }, {
      "left" : "_nextToken = t;",
      "right" : "_nextToken = t;",
      "info" : "ExpressionStatement[34865-34880]:ExpressionStatement[34865-34880]"
    }, {
      "left" : "return match;",
      "right" : "return match;",
      "info" : "ReturnStatement[34889-34902]:ReturnStatement[34889-34902]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[34914-34923]:MarkerAnnotation[34914-34923]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[34928-34934]:Modifier[34928-34934]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[34935-34941]:SimpleType[34935-34941]"
    }, {
      "left" : "nextTextValue",
      "right" : "nextTextValue",
      "info" : "SimpleName[34942-34955]:SimpleName[34942-34955]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[34973-34984]:SimpleType[34973-34984]"
    }, {
      "left" : "JsonParseException",
      "right" : "JsonParseException",
      "info" : "SimpleType[34986-35004]:SimpleType[34986-35004]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35009-36060]:Block[35009-36060]"
    }, {
      "left" : "if (_currToken == JsonToken.FIELD_NAME)",
      "right" : "if (_currToken == JsonToken.FIELD_NAME)",
      "info" : "IfStatement[35100-35931]:IfStatement[35100-35931]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35140-35931]:Block[35140-35931]"
    }, {
      "left" : "_nameCopied = false;",
      "right" : "_nameCopied = false;",
      "info" : "ExpressionStatement[35193-35213]:ExpressionStatement[35193-35213]"
    }, {
      "left" : "JsonToken t = _nextToken;",
      "right" : "JsonToken t = _nextToken;",
      "info" : "VariableDeclarationStatement[35226-35251]:VariableDeclarationStatement[35226-35251]"
    }, {
      "left" : "_nextToken = null;",
      "right" : "_nextToken = null;",
      "info" : "ExpressionStatement[35264-35282]:ExpressionStatement[35264-35282]"
    }, {
      "left" : "_currToken = t;",
      "right" : "_currToken = t;",
      "info" : "ExpressionStatement[35295-35310]:ExpressionStatement[35295-35310]"
    }, {
      "left" : "if (t == JsonToken.VALUE_STRING)",
      "right" : "if (t == JsonToken.VALUE_STRING)",
      "info" : "IfStatement[35323-35567]:IfStatement[35323-35567]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35356-35567]:Block[35356-35567]"
    }, {
      "left" : "if (_tokenIncomplete)",
      "right" : "if (_tokenIncomplete)",
      "info" : "IfStatement[35374-35498]:IfStatement[35374-35498]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35396-35498]:Block[35396-35498]"
    }, {
      "left" : "_tokenIncomplete = false;",
      "right" : "_tokenIncomplete = false;",
      "info" : "ExpressionStatement[35418-35443]:ExpressionStatement[35418-35443]"
    }, {
      "left" : "_finishString();",
      "right" : "_finishString();",
      "info" : "ExpressionStatement[35464-35480]:ExpressionStatement[35464-35480]"
    }, {
      "left" : "return _textBuffer.contentsAsString();",
      "right" : "return _textBuffer.contentsAsString();",
      "info" : "ReturnStatement[35515-35553]:ReturnStatement[35515-35553]"
    }, {
      "left" : "if (t == JsonToken.START_ARRAY)",
      "right" : "if (t == JsonToken.START_ARRAY)",
      "info" : "IfStatement[35580-35896]:IfStatement[35580-35896]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35612-35734]:Block[35612-35734]"
    }, {
      "left" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
      "right" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
      "info" : "ExpressionStatement[35630-35720]:ExpressionStatement[35630-35720]"
    }, {
      "left" : "if (t == JsonToken.START_OBJECT)",
      "right" : "if (t == JsonToken.START_OBJECT)",
      "info" : "IfStatement[35740-35896]:IfStatement[35740-35896]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35773-35896]:Block[35773-35896]"
    }, {
      "left" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
      "right" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
      "info" : "ExpressionStatement[35791-35882]:ExpressionStatement[35791-35882]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[35909-35921]:ReturnStatement[35909-35921]"
    }, {
      "left" : "return (nextToken() == JsonToken.VALUE_STRING) ? getText() : null;",
      "right" : "return (nextToken() == JsonToken.VALUE_STRING) ? getText() : null;",
      "info" : "ReturnStatement[35988-36054]:ReturnStatement[35988-36054]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[36066-36075]:MarkerAnnotation[36066-36075]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[36080-36086]:Modifier[36080-36086]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[36087-36090]:PrimitiveType[36087-36090]"
    }, {
      "left" : "nextIntValue",
      "right" : "nextIntValue",
      "info" : "SimpleName[36091-36103]:SimpleName[36091-36103]"
    }, {
      "left" : "int defaultValue",
      "right" : "int defaultValue",
      "info" : "SingleVariableDeclaration[36104-36120]:SingleVariableDeclaration[36104-36120]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[36137-36148]:SimpleType[36137-36148]"
    }, {
      "left" : "JsonParseException",
      "right" : "JsonParseException",
      "info" : "SimpleType[36150-36168]:SimpleType[36150-36168]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36173-37094]:Block[36173-37094]"
    }, {
      "left" : "if (_currToken == JsonToken.FIELD_NAME)",
      "right" : "if (_currToken == JsonToken.FIELD_NAME)",
      "info" : "IfStatement[36264-36949]:IfStatement[36264-36949]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36304-36949]:Block[36304-36949]"
    }, {
      "left" : "_nameCopied = false;",
      "right" : "_nameCopied = false;",
      "info" : "ExpressionStatement[36357-36377]:ExpressionStatement[36357-36377]"
    }, {
      "left" : "JsonToken t = _nextToken;",
      "right" : "JsonToken t = _nextToken;",
      "info" : "VariableDeclarationStatement[36390-36415]:VariableDeclarationStatement[36390-36415]"
    }, {
      "left" : "_nextToken = null;",
      "right" : "_nextToken = null;",
      "info" : "ExpressionStatement[36428-36446]:ExpressionStatement[36428-36446]"
    }, {
      "left" : "_currToken = t;",
      "right" : "_currToken = t;",
      "info" : "ExpressionStatement[36459-36474]:ExpressionStatement[36459-36474]"
    }, {
      "left" : "if (t == JsonToken.VALUE_NUMBER_INT)",
      "right" : "if (t == JsonToken.VALUE_NUMBER_INT)",
      "info" : "IfStatement[36487-36577]:IfStatement[36487-36577]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36524-36577]:Block[36524-36577]"
    }, {
      "left" : "return getIntValue();",
      "right" : "return getIntValue();",
      "info" : "ReturnStatement[36542-36563]:ReturnStatement[36542-36563]"
    }, {
      "left" : "if (t == JsonToken.START_ARRAY)",
      "right" : "if (t == JsonToken.START_ARRAY)",
      "info" : "IfStatement[36590-36906]:IfStatement[36590-36906]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36622-36744]:Block[36622-36744]"
    }, {
      "left" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
      "right" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
      "info" : "ExpressionStatement[36640-36730]:ExpressionStatement[36640-36730]"
    }, {
      "left" : "if (t == JsonToken.START_OBJECT)",
      "right" : "if (t == JsonToken.START_OBJECT)",
      "info" : "IfStatement[36750-36906]:IfStatement[36750-36906]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36783-36906]:Block[36783-36906]"
    }, {
      "left" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
      "right" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
      "info" : "ExpressionStatement[36801-36892]:ExpressionStatement[36801-36892]"
    }, {
      "left" : "return defaultValue;",
      "right" : "return defaultValue;",
      "info" : "ReturnStatement[36919-36939]:ReturnStatement[36919-36939]"
    }, {
      "left" : "return (nextToken() == JsonToken.VALUE_NUMBER_INT) ? getIntValue() : defaultValue;",
      "right" : "return (nextToken() == JsonToken.VALUE_NUMBER_INT) ? getIntValue() : defaultValue;",
      "info" : "ReturnStatement[37006-37088]:ReturnStatement[37006-37088]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[37100-37109]:MarkerAnnotation[37100-37109]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[37114-37120]:Modifier[37114-37120]"
    }, {
      "left" : "long",
      "right" : "long",
      "info" : "PrimitiveType[37121-37125]:PrimitiveType[37121-37125]"
    }, {
      "left" : "nextLongValue",
      "right" : "nextLongValue",
      "info" : "SimpleName[37126-37139]:SimpleName[37126-37139]"
    }, {
      "left" : "long defaultValue",
      "right" : "long defaultValue",
      "info" : "SingleVariableDeclaration[37140-37157]:SingleVariableDeclaration[37140-37157]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[37174-37185]:SimpleType[37174-37185]"
    }, {
      "left" : "JsonParseException",
      "right" : "JsonParseException",
      "info" : "SimpleType[37187-37205]:SimpleType[37187-37205]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37210-38133]:Block[37210-38133]"
    }, {
      "left" : "if (_currToken == JsonToken.FIELD_NAME)",
      "right" : "if (_currToken == JsonToken.FIELD_NAME)",
      "info" : "IfStatement[37301-37987]:IfStatement[37301-37987]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37341-37987]:Block[37341-37987]"
    }, {
      "left" : "_nameCopied = false;",
      "right" : "_nameCopied = false;",
      "info" : "ExpressionStatement[37394-37414]:ExpressionStatement[37394-37414]"
    }, {
      "left" : "JsonToken t = _nextToken;",
      "right" : "JsonToken t = _nextToken;",
      "info" : "VariableDeclarationStatement[37427-37452]:VariableDeclarationStatement[37427-37452]"
    }, {
      "left" : "_nextToken = null;",
      "right" : "_nextToken = null;",
      "info" : "ExpressionStatement[37465-37483]:ExpressionStatement[37465-37483]"
    }, {
      "left" : "_currToken = t;",
      "right" : "_currToken = t;",
      "info" : "ExpressionStatement[37496-37511]:ExpressionStatement[37496-37511]"
    }, {
      "left" : "if (t == JsonToken.VALUE_NUMBER_INT)",
      "right" : "if (t == JsonToken.VALUE_NUMBER_INT)",
      "info" : "IfStatement[37524-37615]:IfStatement[37524-37615]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37561-37615]:Block[37561-37615]"
    }, {
      "left" : "return getLongValue();",
      "right" : "return getLongValue();",
      "info" : "ReturnStatement[37579-37601]:ReturnStatement[37579-37601]"
    }, {
      "left" : "if (t == JsonToken.START_ARRAY)",
      "right" : "if (t == JsonToken.START_ARRAY)",
      "info" : "IfStatement[37628-37944]:IfStatement[37628-37944]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37660-37782]:Block[37660-37782]"
    }, {
      "left" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
      "right" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
      "info" : "ExpressionStatement[37678-37768]:ExpressionStatement[37678-37768]"
    }, {
      "left" : "if (t == JsonToken.START_OBJECT)",
      "right" : "if (t == JsonToken.START_OBJECT)",
      "info" : "IfStatement[37788-37944]:IfStatement[37788-37944]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37821-37944]:Block[37821-37944]"
    }, {
      "left" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
      "right" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
      "info" : "ExpressionStatement[37839-37930]:ExpressionStatement[37839-37930]"
    }, {
      "left" : "return defaultValue;",
      "right" : "return defaultValue;",
      "info" : "ReturnStatement[37957-37977]:ReturnStatement[37957-37977]"
    }, {
      "left" : "return (nextToken() == JsonToken.VALUE_NUMBER_INT) ? getLongValue() : defaultValue;",
      "right" : "return (nextToken() == JsonToken.VALUE_NUMBER_INT) ? getLongValue() : defaultValue;",
      "info" : "ReturnStatement[38044-38127]:ReturnStatement[38044-38127]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[38139-38148]:MarkerAnnotation[38139-38148]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[38153-38159]:Modifier[38153-38159]"
    }, {
      "left" : "Boolean",
      "right" : "Boolean",
      "info" : "SimpleType[38160-38167]:SimpleType[38160-38167]"
    }, {
      "left" : "nextBooleanValue",
      "right" : "nextBooleanValue",
      "info" : "SimpleName[38168-38184]:SimpleName[38168-38184]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[38202-38213]:SimpleType[38202-38213]"
    }, {
      "left" : "JsonParseException",
      "right" : "JsonParseException",
      "info" : "SimpleType[38215-38233]:SimpleType[38215-38233]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38238-39301]:Block[38238-39301]"
    }, {
      "left" : "if (_currToken == JsonToken.FIELD_NAME)",
      "right" : "if (_currToken == JsonToken.FIELD_NAME)",
      "info" : "IfStatement[38329-39097]:IfStatement[38329-39097]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38369-39097]:Block[38369-39097]"
    }, {
      "left" : "_nameCopied = false;",
      "right" : "_nameCopied = false;",
      "info" : "ExpressionStatement[38422-38442]:ExpressionStatement[38422-38442]"
    }, {
      "left" : "JsonToken t = _nextToken;",
      "right" : "JsonToken t = _nextToken;",
      "info" : "VariableDeclarationStatement[38455-38480]:VariableDeclarationStatement[38455-38480]"
    }, {
      "left" : "_nextToken = null;",
      "right" : "_nextToken = null;",
      "info" : "ExpressionStatement[38493-38511]:ExpressionStatement[38493-38511]"
    }, {
      "left" : "_currToken = t;",
      "right" : "_currToken = t;",
      "info" : "ExpressionStatement[38524-38539]:ExpressionStatement[38524-38539]"
    }, {
      "left" : "if (t == JsonToken.VALUE_TRUE)",
      "right" : "if (t == JsonToken.VALUE_TRUE)",
      "info" : "IfStatement[38552-38635]:IfStatement[38552-38635]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38583-38635]:Block[38583-38635]"
    }, {
      "left" : "return Boolean.TRUE;",
      "right" : "return Boolean.TRUE;",
      "info" : "ReturnStatement[38601-38621]:ReturnStatement[38601-38621]"
    }, {
      "left" : "if (t == JsonToken.VALUE_FALSE)",
      "right" : "if (t == JsonToken.VALUE_FALSE)",
      "info" : "IfStatement[38648-38733]:IfStatement[38648-38733]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38680-38733]:Block[38680-38733]"
    }, {
      "left" : "return Boolean.FALSE;",
      "right" : "return Boolean.FALSE;",
      "info" : "ReturnStatement[38698-38719]:ReturnStatement[38698-38719]"
    }, {
      "left" : "if (t == JsonToken.START_ARRAY)",
      "right" : "if (t == JsonToken.START_ARRAY)",
      "info" : "IfStatement[38746-39062]:IfStatement[38746-39062]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38778-38900]:Block[38778-38900]"
    }, {
      "left" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
      "right" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
      "info" : "ExpressionStatement[38796-38886]:ExpressionStatement[38796-38886]"
    }, {
      "left" : "if (t == JsonToken.START_OBJECT)",
      "right" : "if (t == JsonToken.START_OBJECT)",
      "info" : "IfStatement[38906-39062]:IfStatement[38906-39062]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38939-39062]:Block[38939-39062]"
    }, {
      "left" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
      "right" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
      "info" : "ExpressionStatement[38957-39048]:ExpressionStatement[38957-39048]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[39075-39087]:ReturnStatement[39075-39087]"
    }, {
      "left" : "switch (nextToken()) {\n        case VALUE_TRUE:\n            return Boolean.TRUE;\n        case VALUE_FALSE:\n            return Boolean.FALSE;\n        default:\n        \treturn null;\n        }",
      "right" : "switch (nextToken()) {\n        case VALUE_TRUE:\n            return Boolean.TRUE;\n        case VALUE_FALSE:\n            return Boolean.FALSE;\n        default:\n        \treturn null;\n        }",
      "info" : "SwitchStatement[39106-39295]:SwitchStatement[39106-39295]"
    }, {
      "left" : "case VALUE_TRUE:",
      "right" : "case VALUE_TRUE:",
      "info" : "SwitchCase[39137-39153]:SwitchCase[39137-39153]"
    }, {
      "left" : "return Boolean.TRUE;",
      "right" : "return Boolean.TRUE;",
      "info" : "ReturnStatement[39166-39186]:ReturnStatement[39166-39186]"
    }, {
      "left" : "case VALUE_FALSE:",
      "right" : "case VALUE_FALSE:",
      "info" : "SwitchCase[39195-39212]:SwitchCase[39195-39212]"
    }, {
      "left" : "return Boolean.FALSE;",
      "right" : "return Boolean.FALSE;",
      "info" : "ReturnStatement[39225-39246]:ReturnStatement[39225-39246]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[39255-39263]:SwitchCase[39255-39263]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[39273-39285]:ReturnStatement[39273-39285]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[40334-40343]:Modifier[40334-40343]"
    }, {
      "left" : "JsonToken",
      "right" : "JsonToken",
      "info" : "SimpleType[40344-40353]:SimpleType[40344-40353]"
    }, {
      "left" : "_parseNumber",
      "right" : "_parseNumber",
      "info" : "SimpleName[40354-40366]:SimpleName[40354-40366]"
    }, {
      "left" : "int c",
      "right" : "int c",
      "info" : "SingleVariableDeclaration[40367-40372]:SingleVariableDeclaration[40367-40372]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[40389-40400]:SimpleType[40389-40400]"
    }, {
      "left" : "JsonParseException",
      "right" : "JsonParseException",
      "info" : "SimpleType[40402-40420]:SimpleType[40402-40420]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40425-42530]:Block[40425-42613]"
    }, {
      "left" : "char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();",
      "right" : "char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();",
      "info" : "VariableDeclarationStatement[40435-40491]:VariableDeclarationStatement[40435-40491]"
    }, {
      "left" : "int outPtr = 0;",
      "right" : "int outPtr = 0;",
      "info" : "VariableDeclarationStatement[40500-40515]:VariableDeclarationStatement[40500-40515]"
    }, {
      "left" : "boolean negative = (c == INT_MINUS);",
      "right" : "boolean negative = (c == INT_MINUS);",
      "info" : "VariableDeclarationStatement[40524-40560]:VariableDeclarationStatement[40524-40560]"
    }, {
      "left" : "if (negative)",
      "right" : "if (negative)",
      "info" : "IfStatement[40603-41028]:IfStatement[40603-41028]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40617-41028]:Block[40617-41028]"
    }, {
      "left" : "outBuf[outPtr++] = '-';",
      "right" : "outBuf[outPtr++] = '-';",
      "info" : "ExpressionStatement[40631-40654]:ExpressionStatement[40631-40654]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[40717-40798]:IfStatement[40717-40798]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40745-40798]:Block[40745-40798]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[40763-40784]:ExpressionStatement[40763-40784]"
    }, {
      "left" : "c = (int) _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "c = (int) _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[40811-40854]:ExpressionStatement[40811-40854]"
    }, {
      "left" : "if (c < INT_0 || c > INT_9)",
      "right" : "if (c < INT_0 || c > INT_9)",
      "info" : "IfStatement[40916-41018]:IfStatement[40916-41018]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40944-41018]:Block[40944-41018]"
    }, {
      "left" : "return _handleInvalidNumberStart(c, true);",
      "right" : "return _handleInvalidNumberStart(c, true);",
      "info" : "ReturnStatement[40962-41004]:ReturnStatement[40962-41004]"
    }, {
      "left" : "if (c == INT_0)",
      "right" : "if (c == INT_0)",
      "info" : "IfStatement[41119-41188]:IfStatement[41119-41188]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41135-41188]:Block[41135-41188]"
    }, {
      "left" : "c = _verifyNoLeadingZeroes();",
      "right" : "c = _verifyNoLeadingZeroes();",
      "info" : "ExpressionStatement[41149-41178]:ExpressionStatement[41149-41178]"
    }, {
      "left" : "outBuf[outPtr++] = (char) c;",
      "right" : "outBuf[outPtr++] = (char) c;",
      "info" : "ExpressionStatement[41263-41291]:ExpressionStatement[41263-41291]"
    }, {
      "left" : "int intLen = 1;",
      "right" : "int intLen = 1;",
      "info" : "VariableDeclarationStatement[41300-41315]:VariableDeclarationStatement[41300-41315]"
    }, {
      "left" : "int end = _inputPtr + outBuf.length;",
      "right" : "int end = _inputPtr + outBuf.length;",
      "info" : "VariableDeclarationStatement[41400-41436]:VariableDeclarationStatement[41400-41436]"
    }, {
      "left" : "if (end > _inputEnd)",
      "right" : "if (end > _inputEnd)",
      "info" : "IfStatement[41445-41506]:IfStatement[41445-41506]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41466-41506]:Block[41466-41506]"
    }, {
      "left" : "end = _inputEnd;",
      "right" : "end = _inputEnd;",
      "info" : "ExpressionStatement[41480-41496]:ExpressionStatement[41480-41496]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[41569-42124]:WhileStatement[41569-42124]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41582-42124]:Block[41582-42124]"
    }, {
      "left" : "if (_inputPtr >= end)",
      "right" : "if (_inputPtr >= end)",
      "info" : "IfStatement[41596-41770]:IfStatement[41596-41770]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41618-41770]:Block[41618-41770]"
    }, {
      "left" : "return _parserNumber2(outBuf, outPtr, negative, intLen);",
      "right" : "return _parserNumber2(outBuf, outPtr, negative, intLen);",
      "info" : "ReturnStatement[41700-41756]:ReturnStatement[41700-41756]"
    }, {
      "left" : "c = (int) _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "c = (int) _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[41783-41826]:ExpressionStatement[41783-41826]"
    }, {
      "left" : "if (c < INT_0 || c > INT_9)",
      "right" : "if (c < INT_0 || c > INT_9)",
      "info" : "IfStatement[41839-41905]:IfStatement[41839-41905]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41867-41905]:Block[41867-41905]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[41885-41891]:BreakStatement[41885-41891]"
    }, {
      "left" : "++intLen;",
      "right" : "++intLen;",
      "info" : "ExpressionStatement[41918-41927]:ExpressionStatement[41918-41927]"
    }, {
      "left" : "if (outPtr >= outBuf.length)",
      "right" : "if (outPtr >= outBuf.length)",
      "info" : "IfStatement[41940-42073]:IfStatement[41940-42073]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41969-42073]:Block[41969-42073]"
    }, {
      "left" : "outBuf = _textBuffer.finishCurrentSegment();",
      "right" : "outBuf = _textBuffer.finishCurrentSegment();",
      "info" : "ExpressionStatement[41987-42031]:ExpressionStatement[41987-42031]"
    }, {
      "left" : "outPtr = 0;",
      "right" : "outPtr = 0;",
      "info" : "ExpressionStatement[42048-42059]:ExpressionStatement[42048-42059]"
    }, {
      "left" : "outBuf[outPtr++] = (char) c;",
      "right" : "outBuf[outPtr++] = (char) c;",
      "info" : "ExpressionStatement[42086-42114]:ExpressionStatement[42086-42114]"
    }, {
      "left" : "if (c == '.' || c == 'e' || c == 'E')",
      "right" : "if (c == '.' || c == 'e' || c == 'E')",
      "info" : "IfStatement[42133-42251]:IfStatement[42133-42251]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42171-42251]:Block[42171-42251]"
    }, {
      "left" : "return _parseFloat(outBuf, outPtr, c, negative, intLen);",
      "right" : "return _parseFloat(outBuf, outPtr, c, negative, intLen);",
      "info" : "ReturnStatement[42185-42241]:ReturnStatement[42185-42241]"
    }, {
      "left" : "--_inputPtr;",
      "right" : "--_inputPtr;",
      "info" : "ExpressionStatement[42269-42281]:ExpressionStatement[42269-42281]"
    }, {
      "left" : "_textBuffer.setCurrentLength(outPtr);",
      "right" : "_textBuffer.setCurrentLength(outPtr);",
      "info" : "ExpressionStatement[42332-42369]:ExpressionStatement[42332-42369]"
    }, {
      "left" : "return resetInt(negative, intLen);",
      "right" : "return resetInt(negative, intLen);",
      "info" : "ReturnStatement[42490-42524]:ReturnStatement[42573-42607]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[42697-42704]:Modifier[42780-42787]"
    }, {
      "left" : "JsonToken",
      "right" : "JsonToken",
      "info" : "SimpleType[42705-42714]:SimpleType[42788-42797]"
    }, {
      "left" : "_parserNumber2",
      "right" : "_parserNumber2",
      "info" : "SimpleName[42715-42729]:SimpleName[42798-42812]"
    }, {
      "left" : "char[] outBuf",
      "right" : "char[] outBuf",
      "info" : "SingleVariableDeclaration[42730-42743]:SingleVariableDeclaration[42813-42826]"
    }, {
      "left" : "int outPtr",
      "right" : "int outPtr",
      "info" : "SingleVariableDeclaration[42745-42755]:SingleVariableDeclaration[42828-42838]"
    }, {
      "left" : "boolean negative",
      "right" : "boolean negative",
      "info" : "SingleVariableDeclaration[42757-42773]:SingleVariableDeclaration[42840-42856]"
    }, {
      "left" : "int intPartLength",
      "right" : "int intPartLength",
      "info" : "SingleVariableDeclaration[42787-42804]:SingleVariableDeclaration[42870-42887]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[42821-42832]:SimpleType[42904-42915]"
    }, {
      "left" : "JsonParseException",
      "right" : "JsonParseException",
      "info" : "SimpleType[42834-42852]:SimpleType[42917-42935]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42857-43903]:Block[42940-44100]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[42897-43617]:WhileStatement[42980-43700]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42910-43617]:Block[42993-43700]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd && !loadMore())",
      "right" : "if (_inputPtr >= _inputEnd && !loadMore())",
      "info" : "IfStatement[42924-43094]:IfStatement[43007-43177]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42967-43094]:Block[43050-43177]"
    }, {
      "left" : "_textBuffer.setCurrentLength(outPtr);",
      "right" : "_textBuffer.setCurrentLength(outPtr);",
      "info" : "ExpressionStatement[42985-43022]:ExpressionStatement[43068-43105]"
    }, {
      "left" : "return resetInt(negative, intPartLength);",
      "right" : "return resetInt(negative, intPartLength);",
      "info" : "ReturnStatement[43039-43080]:ReturnStatement[43122-43163]"
    }, {
      "left" : "int c = (int) _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "int c = (int) _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "VariableDeclarationStatement[43107-43154]:VariableDeclarationStatement[43190-43237]"
    }, {
      "left" : "if (c > INT_9 || c < INT_0)",
      "right" : "if (c > INT_9 || c < INT_0)",
      "info" : "IfStatement[43167-43391]:IfStatement[43250-43474]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43195-43391]:Block[43278-43474]"
    }, {
      "left" : "if (c == '.' || c == 'e' || c == 'E')",
      "right" : "if (c == '.' || c == 'e' || c == 'E')",
      "info" : "IfStatement[43213-43354]:IfStatement[43296-43437]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43251-43354]:Block[43334-43437]"
    }, {
      "left" : "return _parseFloat(outBuf, outPtr, c, negative, intPartLength);",
      "right" : "return _parseFloat(outBuf, outPtr, c, negative, intPartLength);",
      "info" : "ReturnStatement[43273-43336]:ReturnStatement[43356-43419]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[43371-43377]:BreakStatement[43454-43460]"
    }, {
      "left" : "if (outPtr >= outBuf.length)",
      "right" : "if (outPtr >= outBuf.length)",
      "info" : "IfStatement[43404-43537]:IfStatement[43487-43620]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43433-43537]:Block[43516-43620]"
    }, {
      "left" : "outBuf = _textBuffer.finishCurrentSegment();",
      "right" : "outBuf = _textBuffer.finishCurrentSegment();",
      "info" : "ExpressionStatement[43451-43495]:ExpressionStatement[43534-43578]"
    }, {
      "left" : "outPtr = 0;",
      "right" : "outPtr = 0;",
      "info" : "ExpressionStatement[43512-43523]:ExpressionStatement[43595-43606]"
    }, {
      "left" : "outBuf[outPtr++] = (char) c;",
      "right" : "outBuf[outPtr++] = (char) c;",
      "info" : "ExpressionStatement[43550-43578]:ExpressionStatement[43633-43661]"
    }, {
      "left" : "++intPartLength;",
      "right" : "++intPartLength;",
      "info" : "ExpressionStatement[43591-43607]:ExpressionStatement[43674-43690]"
    }, {
      "left" : "--_inputPtr;",
      "right" : "--_inputPtr;",
      "info" : "ExpressionStatement[43626-43638]:ExpressionStatement[43709-43721]"
    }, {
      "left" : "_textBuffer.setCurrentLength(outPtr);",
      "right" : "_textBuffer.setCurrentLength(outPtr);",
      "info" : "ExpressionStatement[43689-43726]:ExpressionStatement[43772-43809]"
    }, {
      "left" : "return resetInt(negative, intPartLength);",
      "right" : "return resetInt(negative, intPartLength);",
      "info" : "ReturnStatement[43847-43888]:ReturnStatement[44044-44085]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[44034-44041]:Modifier[44231-44238]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[44042-44045]:PrimitiveType[44239-44242]"
    }, {
      "left" : "_verifyNoLeadingZeroes",
      "right" : "_verifyNoLeadingZeroes",
      "info" : "SimpleName[44046-44068]:SimpleName[44243-44265]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[44086-44097]:SimpleType[44283-44294]"
    }, {
      "left" : "JsonParseException",
      "right" : "JsonParseException",
      "info" : "SimpleType[44099-44117]:SimpleType[44296-44314]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44122-45321]:Block[44319-45518]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd && !loadMore())",
      "right" : "if (_inputPtr >= _inputEnd && !loadMore())",
      "info" : "IfStatement[44164-44244]:IfStatement[44361-44441]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44207-44244]:Block[44404-44441]"
    }, {
      "left" : "return INT_0;",
      "right" : "return INT_0;",
      "info" : "ReturnStatement[44221-44234]:ReturnStatement[44418-44431]"
    }, {
      "left" : "int ch = _inputBuffer[_inputPtr] & 0xFF;",
      "right" : "int ch = _inputBuffer[_inputPtr] & 0xFF;",
      "info" : "VariableDeclarationStatement[44253-44293]:VariableDeclarationStatement[44450-44490]"
    }, {
      "left" : "if (ch < INT_0 || ch > INT_9)",
      "right" : "if (ch < INT_0 || ch > INT_9)",
      "info" : "IfStatement[44391-44458]:IfStatement[44588-44655]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44421-44458]:Block[44618-44655]"
    }, {
      "left" : "return INT_0;",
      "right" : "return INT_0;",
      "info" : "ReturnStatement[44435-44448]:ReturnStatement[44632-44645]"
    }, {
      "left" : "if (!isEnabled(Feature.ALLOW_NUMERIC_LEADING_ZEROS))",
      "right" : "if (!isEnabled(Feature.ALLOW_NUMERIC_LEADING_ZEROS))",
      "info" : "IfStatement[44533-44660]:IfStatement[44730-44857]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44586-44660]:Block[44783-44857]"
    }, {
      "left" : "reportInvalidNumber(\"Leading zeroes not allowed\");",
      "right" : "reportInvalidNumber(\"Leading zeroes not allowed\");",
      "info" : "ExpressionStatement[44600-44650]:ExpressionStatement[44797-44847]"
    }, {
      "left" : "++_inputPtr;",
      "right" : "++_inputPtr;",
      "info" : "ExpressionStatement[44779-44791]:ExpressionStatement[44976-44988]"
    }, {
      "left" : "if (ch == INT_0)",
      "right" : "if (ch == INT_0)",
      "info" : "IfStatement[44830-45296]:IfStatement[45027-45493]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44847-45296]:Block[45044-45493]"
    }, {
      "left" : "while (_inputPtr < _inputEnd || loadMore())",
      "right" : "while (_inputPtr < _inputEnd || loadMore())",
      "info" : "WhileStatement[44861-45286]:WhileStatement[45058-45483]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44905-45286]:Block[45102-45483]"
    }, {
      "left" : "ch = _inputBuffer[_inputPtr] & 0xFF;",
      "right" : "ch = _inputBuffer[_inputPtr] & 0xFF;",
      "info" : "ExpressionStatement[44923-44959]:ExpressionStatement[45120-45156]"
    }, {
      "left" : "if (ch < INT_0 || ch > INT_9)",
      "right" : "if (ch < INT_0 || ch > INT_9)",
      "info" : "IfStatement[44976-45102]:IfStatement[45173-45299]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45006-45102]:Block[45203-45299]"
    }, {
      "left" : "return INT_0;",
      "right" : "return INT_0;",
      "info" : "ReturnStatement[45071-45084]:ReturnStatement[45268-45281]"
    }, {
      "left" : "++_inputPtr;",
      "right" : "++_inputPtr;",
      "info" : "ExpressionStatement[45119-45131]:ExpressionStatement[45316-45328]"
    }, {
      "left" : "if (ch != INT_0)",
      "right" : "if (ch != INT_0)",
      "info" : "IfStatement[45172-45272]:IfStatement[45369-45469]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45189-45272]:Block[45386-45469]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[45248-45254]:BreakStatement[45445-45451]"
    }, {
      "left" : "return ch;",
      "right" : "return ch;",
      "info" : "ReturnStatement[45305-45315]:ReturnStatement[45502-45512]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[45331-45338]:Modifier[45528-45535]"
    }, {
      "left" : "JsonToken",
      "right" : "JsonToken",
      "info" : "SimpleType[45339-45348]:SimpleType[45536-45545]"
    }, {
      "left" : "_parseFloat",
      "right" : "_parseFloat",
      "info" : "SimpleName[45349-45360]:SimpleName[45546-45557]"
    }, {
      "left" : "char[] outBuf",
      "right" : "char[] outBuf",
      "info" : "SingleVariableDeclaration[45361-45374]:SingleVariableDeclaration[45558-45571]"
    }, {
      "left" : "int outPtr",
      "right" : "int outPtr",
      "info" : "SingleVariableDeclaration[45376-45386]:SingleVariableDeclaration[45573-45583]"
    }, {
      "left" : "int c",
      "right" : "int c",
      "info" : "SingleVariableDeclaration[45388-45393]:SingleVariableDeclaration[45585-45590]"
    }, {
      "left" : "boolean negative",
      "right" : "boolean negative",
      "info" : "SingleVariableDeclaration[45407-45423]:SingleVariableDeclaration[45604-45620]"
    }, {
      "left" : "int integerPartLength",
      "right" : "int integerPartLength",
      "info" : "SingleVariableDeclaration[45425-45446]:SingleVariableDeclaration[45622-45643]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[45463-45474]:SimpleType[45660-45671]"
    }, {
      "left" : "JsonParseException",
      "right" : "JsonParseException",
      "info" : "SimpleType[45476-45494]:SimpleType[45673-45691]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45499-48596]:Block[45696-48888]"
    }, {
      "left" : "int fractLen = 0;",
      "right" : "int fractLen = 0;",
      "info" : "VariableDeclarationStatement[45509-45526]:VariableDeclarationStatement[45706-45723]"
    }, {
      "left" : "boolean eof = false;",
      "right" : "boolean eof = false;",
      "info" : "VariableDeclarationStatement[45535-45555]:VariableDeclarationStatement[45732-45752]"
    }, {
      "left" : "if (c == '.')",
      "right" : "if (c == '.')",
      "info" : "IfStatement[45611-46506]:IfStatement[45808-46703]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45625-46506]:Block[45822-46703]"
    }, {
      "left" : "outBuf[outPtr++] = (char) c;",
      "right" : "outBuf[outPtr++] = (char) c;",
      "info" : "ExpressionStatement[45656-45684]:ExpressionStatement[45853-45881]"
    }, {
      "left" : "fract_loop:\n            while (true) {\n                if (_inputPtr >= _inputEnd && !loadMore()) {\n                    eof = true;\n                    break fract_loop;\n                }\n                c = (int) _inputBuffer[_inputPtr++] & 0xFF;\n                if (c < INT_0 || c > INT_9) {\n                    break fract_loop;\n                }\n                ++fractLen;\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                outBuf[outPtr++] = (char) c;\n            }",
      "right" : "fract_loop:\n            while (true) {\n                if (_inputPtr >= _inputEnd && !loadMore()) {\n                    eof = true;\n                    break fract_loop;\n                }\n                c = (int) _inputBuffer[_inputPtr++] & 0xFF;\n                if (c < INT_0 || c > INT_9) {\n                    break fract_loop;\n                }\n                ++fractLen;\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                outBuf[outPtr++] = (char) c;\n            }",
      "info" : "LabeledStatement[45698-46296]:LabeledStatement[45895-46493]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[45722-46296]:WhileStatement[45919-46493]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45735-46296]:Block[45932-46493]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd && !loadMore())",
      "right" : "if (_inputPtr >= _inputEnd && !loadMore())",
      "info" : "IfStatement[45753-45885]:IfStatement[45950-46082]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45796-45885]:Block[45993-46082]"
    }, {
      "left" : "eof = true;",
      "right" : "eof = true;",
      "info" : "ExpressionStatement[45818-45829]:ExpressionStatement[46015-46026]"
    }, {
      "left" : "break fract_loop;",
      "right" : "break fract_loop;",
      "info" : "BreakStatement[45850-45867]:BreakStatement[46047-46064]"
    }, {
      "left" : "c = (int) _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "c = (int) _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[45902-45945]:ExpressionStatement[46099-46142]"
    }, {
      "left" : "if (c < INT_0 || c > INT_9)",
      "right" : "if (c < INT_0 || c > INT_9)",
      "info" : "IfStatement[45962-46047]:IfStatement[46159-46244]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45990-46047]:Block[46187-46244]"
    }, {
      "left" : "break fract_loop;",
      "right" : "break fract_loop;",
      "info" : "BreakStatement[46012-46029]:BreakStatement[46209-46226]"
    }, {
      "left" : "++fractLen;",
      "right" : "++fractLen;",
      "info" : "ExpressionStatement[46064-46075]:ExpressionStatement[46261-46272]"
    }, {
      "left" : "if (outPtr >= outBuf.length)",
      "right" : "if (outPtr >= outBuf.length)",
      "info" : "IfStatement[46092-46237]:IfStatement[46289-46434]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46121-46237]:Block[46318-46434]"
    }, {
      "left" : "outBuf = _textBuffer.finishCurrentSegment();",
      "right" : "outBuf = _textBuffer.finishCurrentSegment();",
      "info" : "ExpressionStatement[46143-46187]:ExpressionStatement[46340-46384]"
    }, {
      "left" : "outPtr = 0;",
      "right" : "outPtr = 0;",
      "info" : "ExpressionStatement[46208-46219]:ExpressionStatement[46405-46416]"
    }, {
      "left" : "outBuf[outPtr++] = (char) c;",
      "right" : "outBuf[outPtr++] = (char) c;",
      "info" : "ExpressionStatement[46254-46282]:ExpressionStatement[46451-46479]"
    }, {
      "left" : "if (fractLen == 0)",
      "right" : "if (fractLen == 0)",
      "info" : "IfStatement[46374-46496]:IfStatement[46571-46693]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46393-46496]:Block[46590-46693]"
    }, {
      "left" : "reportUnexpectedNumberChar(c, \"Decimal point not followed by a digit\");",
      "right" : "reportUnexpectedNumberChar(c, \"Decimal point not followed by a digit\");",
      "info" : "ExpressionStatement[46411-46482]:ExpressionStatement[46608-46679]"
    }, {
      "left" : "int expLen = 0;",
      "right" : "int expLen = 0;",
      "info" : "VariableDeclarationStatement[46516-46531]:VariableDeclarationStatement[46713-46728]"
    }, {
      "left" : "if (c == 'e' || c == 'E')",
      "right" : "if (c == 'e' || c == 'E')",
      "info" : "IfStatement[46540-48222]:IfStatement[46737-48419]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46566-48222]:Block[46763-48419]"
    }, {
      "left" : "if (outPtr >= outBuf.length)",
      "right" : "if (outPtr >= outBuf.length)",
      "info" : "IfStatement[46593-46726]:IfStatement[46790-46923]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46622-46726]:Block[46819-46923]"
    }, {
      "left" : "outBuf = _textBuffer.finishCurrentSegment();",
      "right" : "outBuf = _textBuffer.finishCurrentSegment();",
      "info" : "ExpressionStatement[46640-46684]:ExpressionStatement[46837-46881]"
    }, {
      "left" : "outPtr = 0;",
      "right" : "outPtr = 0;",
      "info" : "ExpressionStatement[46701-46712]:ExpressionStatement[46898-46909]"
    }, {
      "left" : "outBuf[outPtr++] = (char) c;",
      "right" : "outBuf[outPtr++] = (char) c;",
      "info" : "ExpressionStatement[46739-46767]:ExpressionStatement[46936-46964]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[46847-46928]:IfStatement[47044-47125]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46875-46928]:Block[47072-47125]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[46893-46914]:ExpressionStatement[47090-47111]"
    }, {
      "left" : "c = (int) _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "c = (int) _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[46941-46984]:ExpressionStatement[47138-47181]"
    }, {
      "left" : "if (c == '-' || c == '+')",
      "right" : "if (c == '-' || c == '+')",
      "info" : "IfStatement[47028-47485]:IfStatement[47225-47682]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47054-47485]:Block[47251-47682]"
    }, {
      "left" : "if (outPtr >= outBuf.length)",
      "right" : "if (outPtr >= outBuf.length)",
      "info" : "IfStatement[47072-47217]:IfStatement[47269-47414]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47101-47217]:Block[47298-47414]"
    }, {
      "left" : "outBuf = _textBuffer.finishCurrentSegment();",
      "right" : "outBuf = _textBuffer.finishCurrentSegment();",
      "info" : "ExpressionStatement[47123-47167]:ExpressionStatement[47320-47364]"
    }, {
      "left" : "outPtr = 0;",
      "right" : "outPtr = 0;",
      "info" : "ExpressionStatement[47188-47199]:ExpressionStatement[47385-47396]"
    }, {
      "left" : "outBuf[outPtr++] = (char) c;",
      "right" : "outBuf[outPtr++] = (char) c;",
      "info" : "ExpressionStatement[47234-47262]:ExpressionStatement[47431-47459]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[47322-47411]:IfStatement[47519-47608]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47350-47411]:Block[47547-47608]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[47372-47393]:ExpressionStatement[47569-47590]"
    }, {
      "left" : "c = (int) _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "c = (int) _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[47428-47471]:ExpressionStatement[47625-47668]"
    }, {
      "left" : "exp_loop:\n            while (c <= INT_9 && c >= INT_0) {\n                ++expLen;\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                outBuf[outPtr++] = (char) c;\n                if (_inputPtr >= _inputEnd && !loadMore()) {\n                    eof = true;\n                    break exp_loop;\n                }\n                c = (int) _inputBuffer[_inputPtr++] & 0xFF;\n            }",
      "right" : "exp_loop:\n            while (c <= INT_9 && c >= INT_0) {\n                ++expLen;\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                outBuf[outPtr++] = (char) c;\n                if (_inputPtr >= _inputEnd && !loadMore()) {\n                    eof = true;\n                    break exp_loop;\n                }\n                c = (int) _inputBuffer[_inputPtr++] & 0xFF;\n            }",
      "info" : "LabeledStatement[47499-48009]:LabeledStatement[47696-48206]"
    }, {
      "left" : "while (c <= INT_9 && c >= INT_0)",
      "right" : "while (c <= INT_9 && c >= INT_0)",
      "info" : "WhileStatement[47521-48009]:WhileStatement[47718-48206]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47554-48009]:Block[47751-48206]"
    }, {
      "left" : "++expLen;",
      "right" : "++expLen;",
      "info" : "ExpressionStatement[47572-47581]:ExpressionStatement[47769-47778]"
    }, {
      "left" : "if (outPtr >= outBuf.length)",
      "right" : "if (outPtr >= outBuf.length)",
      "info" : "IfStatement[47598-47743]:IfStatement[47795-47940]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47627-47743]:Block[47824-47940]"
    }, {
      "left" : "outBuf = _textBuffer.finishCurrentSegment();",
      "right" : "outBuf = _textBuffer.finishCurrentSegment();",
      "info" : "ExpressionStatement[47649-47693]:ExpressionStatement[47846-47890]"
    }, {
      "left" : "outPtr = 0;",
      "right" : "outPtr = 0;",
      "info" : "ExpressionStatement[47714-47725]:ExpressionStatement[47911-47922]"
    }, {
      "left" : "outBuf[outPtr++] = (char) c;",
      "right" : "outBuf[outPtr++] = (char) c;",
      "info" : "ExpressionStatement[47760-47788]:ExpressionStatement[47957-47985]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd && !loadMore())",
      "right" : "if (_inputPtr >= _inputEnd && !loadMore())",
      "info" : "IfStatement[47805-47935]:IfStatement[48002-48132]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47848-47935]:Block[48045-48132]"
    }, {
      "left" : "eof = true;",
      "right" : "eof = true;",
      "info" : "ExpressionStatement[47870-47881]:ExpressionStatement[48067-48078]"
    }, {
      "left" : "break exp_loop;",
      "right" : "break exp_loop;",
      "info" : "BreakStatement[47902-47917]:BreakStatement[48099-48114]"
    }, {
      "left" : "c = (int) _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "c = (int) _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[47952-47995]:ExpressionStatement[48149-48192]"
    }, {
      "left" : "if (expLen == 0)",
      "right" : "if (expLen == 0)",
      "info" : "IfStatement[48087-48212]:IfStatement[48284-48409]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48104-48212]:Block[48301-48409]"
    }, {
      "left" : "reportUnexpectedNumberChar(c, \"Exponent indicator not followed by a digit\");",
      "right" : "reportUnexpectedNumberChar(c, \"Exponent indicator not followed by a digit\");",
      "info" : "ExpressionStatement[48122-48198]:ExpressionStatement[48319-48395]"
    }, {
      "left" : "if (!eof)",
      "right" : "if (!eof)",
      "info" : "IfStatement[48308-48436]:IfStatement[48505-48728]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48318-48436]:Block[48515-48728]"
    }, {
      "left" : "--_inputPtr;",
      "right" : "--_inputPtr;",
      "info" : "ExpressionStatement[48332-48344]:ExpressionStatement[48529-48541]"
    }, {
      "left" : "_textBuffer.setCurrentLength(outPtr);",
      "right" : "_textBuffer.setCurrentLength(outPtr);",
      "info" : "ExpressionStatement[48445-48482]:ExpressionStatement[48737-48774]"
    }, {
      "left" : "return resetFloat(negative, integerPartLength, fractLen, expLen);",
      "right" : "return resetFloat(negative, integerPartLength, fractLen, expLen);",
      "info" : "ReturnStatement[48525-48590]:ReturnStatement[48817-48882]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[49163-49172]:Modifier[49852-49861]"
    }, {
      "left" : "Name",
      "right" : "Name",
      "info" : "SimpleType[49173-49177]:SimpleType[49862-49866]"
    }, {
      "left" : "_parseFieldName",
      "right" : "_parseFieldName",
      "info" : "SimpleName[49178-49193]:SimpleName[49867-49882]"
    }, {
      "left" : "int i",
      "right" : "int i",
      "info" : "SingleVariableDeclaration[49194-49199]:SingleVariableDeclaration[49883-49888]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[49216-49227]:SimpleType[49905-49916]"
    }, {
      "left" : "JsonParseException",
      "right" : "JsonParseException",
      "info" : "SimpleType[49229-49247]:SimpleType[49918-49936]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49252-51592]:Block[49941-52281]"
    }, {
      "left" : "if (i != INT_QUOTE)",
      "right" : "if (i != INT_QUOTE)",
      "info" : "IfStatement[49262-49331]:IfStatement[49951-50020]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49282-49331]:Block[49971-50020]"
    }, {
      "left" : "return _handleOddName(i);",
      "right" : "return _handleOddName(i);",
      "info" : "ReturnStatement[49296-49321]:ReturnStatement[49985-50010]"
    }, {
      "left" : "if ((_inputPtr + 9) > _inputEnd)",
      "right" : "if ((_inputPtr + 9) > _inputEnd)",
      "info" : "IfStatement[49393-49516]:IfStatement[50082-50205]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49426-49516]:Block[50115-50205]"
    }, {
      "left" : "return slowParseName();",
      "right" : "return slowParseName();",
      "info" : "ReturnStatement[49483-49506]:ReturnStatement[50172-50195]"
    }, {
      "left" : "final byte[] input = _inputBuffer;",
      "right" : "final byte[] input = _inputBuffer;",
      "info" : "VariableDeclarationStatement[49850-49884]:VariableDeclarationStatement[50539-50573]"
    }, {
      "left" : "final int[] codes = _icLatin1;",
      "right" : "final int[] codes = _icLatin1;",
      "info" : "VariableDeclarationStatement[49893-49923]:VariableDeclarationStatement[50582-50612]"
    }, {
      "left" : "int q = input[_inputPtr++] & 0xFF;",
      "right" : "int q = input[_inputPtr++] & 0xFF;",
      "info" : "VariableDeclarationStatement[49933-49967]:VariableDeclarationStatement[50622-50656]"
    }, {
      "left" : "if (codes[q] == 0)",
      "right" : "if (codes[q] == 0)",
      "info" : "IfStatement[49977-51399]:IfStatement[50666-52088]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49996-51399]:Block[50685-52088]"
    }, {
      "left" : "i = input[_inputPtr++] & 0xFF;",
      "right" : "i = input[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[50010-50040]:ExpressionStatement[50699-50729]"
    }, {
      "left" : "if (codes[i] == 0)",
      "right" : "if (codes[i] == 0)",
      "info" : "IfStatement[50053-51231]:IfStatement[50742-51920]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50072-51231]:Block[50761-51920]"
    }, {
      "left" : "q = (q << 8) | i;",
      "right" : "q = (q << 8) | i;",
      "info" : "ExpressionStatement[50090-50107]:ExpressionStatement[50779-50796]"
    }, {
      "left" : "i = input[_inputPtr++] & 0xFF;",
      "right" : "i = input[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[50124-50154]:ExpressionStatement[50813-50843]"
    }, {
      "left" : "if (codes[i] == 0)",
      "right" : "if (codes[i] == 0)",
      "info" : "IfStatement[50171-51027]:IfStatement[50860-51716]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50190-51027]:Block[50879-51716]"
    }, {
      "left" : "q = (q << 8) | i;",
      "right" : "q = (q << 8) | i;",
      "info" : "ExpressionStatement[50212-50229]:ExpressionStatement[50901-50918]"
    }, {
      "left" : "i = input[_inputPtr++] & 0xFF;",
      "right" : "i = input[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[50250-50280]:ExpressionStatement[50939-50969]"
    }, {
      "left" : "if (codes[i] == 0)",
      "right" : "if (codes[i] == 0)",
      "info" : "IfStatement[50301-50819]:IfStatement[50990-51508]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50320-50819]:Block[51009-51508]"
    }, {
      "left" : "q = (q << 8) | i;",
      "right" : "q = (q << 8) | i;",
      "info" : "ExpressionStatement[50346-50363]:ExpressionStatement[51035-51052]"
    }, {
      "left" : "i = input[_inputPtr++] & 0xFF;",
      "right" : "i = input[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[50388-50418]:ExpressionStatement[51077-51107]"
    }, {
      "left" : "if (codes[i] == 0)",
      "right" : "if (codes[i] == 0)",
      "info" : "IfStatement[50443-50591]:IfStatement[51132-51280]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50462-50591]:Block[51151-51280]"
    }, {
      "left" : "_quad1 = q;",
      "right" : "_quad1 = q;",
      "info" : "ExpressionStatement[50492-50503]:ExpressionStatement[51181-51192]"
    }, {
      "left" : "return parseMediumName(i, codes);",
      "right" : "return parseMediumName(i, codes);",
      "info" : "ReturnStatement[50532-50565]:ReturnStatement[51221-51254]"
    }, {
      "left" : "if (i == INT_QUOTE)",
      "right" : "if (i == INT_QUOTE)",
      "info" : "IfStatement[50616-50746]:IfStatement[51305-51435]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50636-50746]:Block[51325-51435]"
    }, {
      "left" : "return findName(q, 4);",
      "right" : "return findName(q, 4);",
      "info" : "ReturnStatement[50698-50720]:ReturnStatement[51387-51409]"
    }, {
      "left" : "return parseName(q, i, 4);",
      "right" : "return parseName(q, i, 4);",
      "info" : "ReturnStatement[50771-50797]:ReturnStatement[51460-51486]"
    }, {
      "left" : "if (i == INT_QUOTE)",
      "right" : "if (i == INT_QUOTE)",
      "info" : "IfStatement[50840-50962]:IfStatement[51529-51651]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50860-50962]:Block[51549-51651]"
    }, {
      "left" : "return findName(q, 3);",
      "right" : "return findName(q, 3);",
      "info" : "ReturnStatement[50918-50940]:ReturnStatement[51607-51629]"
    }, {
      "left" : "return parseName(q, i, 3);",
      "right" : "return parseName(q, i, 3);",
      "info" : "ReturnStatement[50983-51009]:ReturnStatement[51672-51698]"
    }, {
      "left" : "if (i == INT_QUOTE)",
      "right" : "if (i == INT_QUOTE)",
      "info" : "IfStatement[51060-51174]:IfStatement[51749-51863]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51080-51174]:Block[51769-51863]"
    }, {
      "left" : "return findName(q, 2);",
      "right" : "return findName(q, 2);",
      "info" : "ReturnStatement[51134-51156]:ReturnStatement[51823-51845]"
    }, {
      "left" : "return parseName(q, i, 2);",
      "right" : "return parseName(q, i, 2);",
      "info" : "ReturnStatement[51191-51217]:ReturnStatement[51880-51906]"
    }, {
      "left" : "if (i == INT_QUOTE)",
      "right" : "if (i == INT_QUOTE)",
      "info" : "IfStatement[51244-51350]:IfStatement[51933-52039]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51264-51350]:Block[51953-52039]"
    }, {
      "left" : "return findName(q, 1);",
      "right" : "return findName(q, 1);",
      "info" : "ReturnStatement[51314-51336]:ReturnStatement[52003-52025]"
    }, {
      "left" : "return parseName(q, i, 1);",
      "right" : "return parseName(q, i, 1);",
      "info" : "ReturnStatement[51363-51389]:ReturnStatement[52052-52078]"
    }, {
      "left" : "if (q == INT_QUOTE)",
      "right" : "if (q == INT_QUOTE)",
      "info" : "IfStatement[51413-51524]:IfStatement[52102-52213]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51433-51524]:Block[52122-52213]"
    }, {
      "left" : "return BytesToNameCanonicalizer.getEmptyName();",
      "right" : "return BytesToNameCanonicalizer.getEmptyName();",
      "info" : "ReturnStatement[51467-51514]:ReturnStatement[52156-52203]"
    }, {
      "left" : "return parseName(0, q, 0);",
      "right" : "return parseName(0, q, 0);",
      "info" : "ReturnStatement[51533-51559]:ReturnStatement[52222-52248]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[51598-51607]:Modifier[52287-52296]"
    }, {
      "left" : "Name",
      "right" : "Name",
      "info" : "SimpleType[51608-51612]:SimpleType[52297-52301]"
    }, {
      "left" : "parseMediumName",
      "right" : "parseMediumName",
      "info" : "SimpleName[51613-51628]:SimpleName[52302-52317]"
    }, {
      "left" : "int q2",
      "right" : "int q2",
      "info" : "SingleVariableDeclaration[51629-51635]:SingleVariableDeclaration[52318-52324]"
    }, {
      "left" : "final int[] codes",
      "right" : "final int[] codes",
      "info" : "SingleVariableDeclaration[51637-51654]:SingleVariableDeclaration[52326-52343]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[51671-51682]:SimpleType[52360-52371]"
    }, {
      "left" : "JsonParseException",
      "right" : "JsonParseException",
      "info" : "SimpleType[51684-51702]:SimpleType[52373-52391]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51707-52923]:Block[52396-53612]"
    }, {
      "left" : "int i = _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "int i = _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "VariableDeclarationStatement[51756-51797]:VariableDeclarationStatement[52445-52486]"
    }, {
      "left" : "if (codes[i] != 0)",
      "right" : "if (codes[i] != 0)",
      "info" : "IfStatement[51806-52018]:IfStatement[52495-52707]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51825-52018]:Block[52514-52707]"
    }, {
      "left" : "if (i == INT_QUOTE)",
      "right" : "if (i == INT_QUOTE)",
      "info" : "IfStatement[51839-51933]:IfStatement[52528-52622]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51859-51933]:Block[52548-52622]"
    }, {
      "left" : "return findName(_quad1, q2, 1);",
      "right" : "return findName(_quad1, q2, 1);",
      "info" : "ReturnStatement[51888-51919]:ReturnStatement[52577-52608]"
    }, {
      "left" : "return parseName(_quad1, q2, i, 1);",
      "right" : "return parseName(_quad1, q2, i, 1);",
      "info" : "ReturnStatement[51946-51981]:ReturnStatement[52635-52670]"
    }, {
      "left" : "q2 = (q2 << 8) | i;",
      "right" : "q2 = (q2 << 8) | i;",
      "info" : "ExpressionStatement[52027-52046]:ExpressionStatement[52716-52735]"
    }, {
      "left" : "i = _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "i = _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[52055-52092]:ExpressionStatement[52744-52781]"
    }, {
      "left" : "if (codes[i] != 0)",
      "right" : "if (codes[i] != 0)",
      "info" : "IfStatement[52101-52286]:IfStatement[52790-52975]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52120-52286]:Block[52809-52975]"
    }, {
      "left" : "if (i == INT_QUOTE)",
      "right" : "if (i == INT_QUOTE)",
      "info" : "IfStatement[52134-52228]:IfStatement[52823-52917]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52154-52228]:Block[52843-52917]"
    }, {
      "left" : "return findName(_quad1, q2, 2);",
      "right" : "return findName(_quad1, q2, 2);",
      "info" : "ReturnStatement[52183-52214]:ReturnStatement[52872-52903]"
    }, {
      "left" : "return parseName(_quad1, q2, i, 2);",
      "right" : "return parseName(_quad1, q2, i, 2);",
      "info" : "ReturnStatement[52241-52276]:ReturnStatement[52930-52965]"
    }, {
      "left" : "q2 = (q2 << 8) | i;",
      "right" : "q2 = (q2 << 8) | i;",
      "info" : "ExpressionStatement[52295-52314]:ExpressionStatement[52984-53003]"
    }, {
      "left" : "i = _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "i = _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[52323-52360]:ExpressionStatement[53012-53049]"
    }, {
      "left" : "if (codes[i] != 0)",
      "right" : "if (codes[i] != 0)",
      "info" : "IfStatement[52369-52554]:IfStatement[53058-53243]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52388-52554]:Block[53077-53243]"
    }, {
      "left" : "if (i == INT_QUOTE)",
      "right" : "if (i == INT_QUOTE)",
      "info" : "IfStatement[52402-52496]:IfStatement[53091-53185]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52422-52496]:Block[53111-53185]"
    }, {
      "left" : "return findName(_quad1, q2, 3);",
      "right" : "return findName(_quad1, q2, 3);",
      "info" : "ReturnStatement[52451-52482]:ReturnStatement[53140-53171]"
    }, {
      "left" : "return parseName(_quad1, q2, i, 3);",
      "right" : "return parseName(_quad1, q2, i, 3);",
      "info" : "ReturnStatement[52509-52544]:ReturnStatement[53198-53233]"
    }, {
      "left" : "q2 = (q2 << 8) | i;",
      "right" : "q2 = (q2 << 8) | i;",
      "info" : "ExpressionStatement[52563-52582]:ExpressionStatement[53252-53271]"
    }, {
      "left" : "i = _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "i = _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[52591-52628]:ExpressionStatement[53280-53317]"
    }, {
      "left" : "if (codes[i] != 0)",
      "right" : "if (codes[i] != 0)",
      "info" : "IfStatement[52637-52822]:IfStatement[53326-53511]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52656-52822]:Block[53345-53511]"
    }, {
      "left" : "if (i == INT_QUOTE)",
      "right" : "if (i == INT_QUOTE)",
      "info" : "IfStatement[52670-52764]:IfStatement[53359-53453]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52690-52764]:Block[53379-53453]"
    }, {
      "left" : "return findName(_quad1, q2, 4);",
      "right" : "return findName(_quad1, q2, 4);",
      "info" : "ReturnStatement[52719-52750]:ReturnStatement[53408-53439]"
    }, {
      "left" : "return parseName(_quad1, q2, i, 4);",
      "right" : "return parseName(_quad1, q2, i, 4);",
      "info" : "ReturnStatement[52777-52812]:ReturnStatement[53466-53501]"
    }, {
      "left" : "_quadBuffer[0] = _quad1;",
      "right" : "_quadBuffer[0] = _quad1;",
      "info" : "ExpressionStatement[52831-52855]:ExpressionStatement[53520-53544]"
    }, {
      "left" : "_quadBuffer[1] = q2;",
      "right" : "_quadBuffer[1] = q2;",
      "info" : "ExpressionStatement[52864-52884]:ExpressionStatement[53553-53573]"
    }, {
      "left" : "return parseLongName(i);",
      "right" : "return parseLongName(i);",
      "info" : "ReturnStatement[52893-52917]:ReturnStatement[53582-53606]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[52929-52938]:Modifier[53618-53627]"
    }, {
      "left" : "Name",
      "right" : "Name",
      "info" : "SimpleType[52939-52943]:SimpleType[53628-53632]"
    }, {
      "left" : "parseLongName",
      "right" : "parseLongName",
      "info" : "SimpleName[52944-52957]:SimpleName[53633-53646]"
    }, {
      "left" : "int q",
      "right" : "int q",
      "info" : "SingleVariableDeclaration[52958-52963]:SingleVariableDeclaration[53647-53652]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[52980-52991]:SimpleType[53669-53680]"
    }, {
      "left" : "JsonParseException",
      "right" : "JsonParseException",
      "info" : "SimpleType[52993-53011]:SimpleType[53682-53700]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53016-55074]:Block[53705-55763]"
    }, {
      "left" : "final int[] codes = _icLatin1;",
      "right" : "final int[] codes = _icLatin1;",
      "info" : "VariableDeclarationStatement[53098-53128]:VariableDeclarationStatement[53787-53817]"
    }, {
      "left" : "int qlen = 2;",
      "right" : "int qlen = 2;",
      "info" : "VariableDeclarationStatement[53137-53150]:VariableDeclarationStatement[53826-53839]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[53160-55068]:WhileStatement[53849-55757]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53173-55068]:Block[53862-55757]"
    }, {
      "left" : "if ((_inputEnd - _inputPtr) < 4)",
      "right" : "if ((_inputEnd - _inputPtr) < 4)",
      "info" : "IfStatement[53392-53509]:IfStatement[54081-54198]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53425-53509]:Block[54114-54198]"
    }, {
      "left" : "return parseEscapedName(_quadBuffer, qlen, 0, q, 0);",
      "right" : "return parseEscapedName(_quadBuffer, qlen, 0, q, 0);",
      "info" : "ReturnStatement[53443-53495]:ReturnStatement[54132-54184]"
    }, {
      "left" : "int i = _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "int i = _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "VariableDeclarationStatement[53593-53634]:VariableDeclarationStatement[54282-54323]"
    }, {
      "left" : "if (codes[i] != 0)",
      "right" : "if (codes[i] != 0)",
      "info" : "IfStatement[53647-53868]:IfStatement[54336-54557]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53666-53868]:Block[54355-54557]"
    }, {
      "left" : "if (i == INT_QUOTE)",
      "right" : "if (i == INT_QUOTE)",
      "info" : "IfStatement[53684-53785]:IfStatement[54373-54474]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53704-53785]:Block[54393-54474]"
    }, {
      "left" : "return findName(_quadBuffer, qlen, q, 1);",
      "right" : "return findName(_quadBuffer, qlen, q, 1);",
      "info" : "ReturnStatement[53726-53767]:ReturnStatement[54415-54456]"
    }, {
      "left" : "return parseEscapedName(_quadBuffer, qlen, q, i, 1);",
      "right" : "return parseEscapedName(_quadBuffer, qlen, q, i, 1);",
      "info" : "ReturnStatement[53802-53854]:ReturnStatement[54491-54543]"
    }, {
      "left" : "q = (q << 8) | i;",
      "right" : "q = (q << 8) | i;",
      "info" : "ExpressionStatement[53882-53899]:ExpressionStatement[54571-54588]"
    }, {
      "left" : "i = _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "i = _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[53912-53949]:ExpressionStatement[54601-54638]"
    }, {
      "left" : "if (codes[i] != 0)",
      "right" : "if (codes[i] != 0)",
      "info" : "IfStatement[53962-54183]:IfStatement[54651-54872]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53981-54183]:Block[54670-54872]"
    }, {
      "left" : "if (i == INT_QUOTE)",
      "right" : "if (i == INT_QUOTE)",
      "info" : "IfStatement[53999-54100]:IfStatement[54688-54789]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54019-54100]:Block[54708-54789]"
    }, {
      "left" : "return findName(_quadBuffer, qlen, q, 2);",
      "right" : "return findName(_quadBuffer, qlen, q, 2);",
      "info" : "ReturnStatement[54041-54082]:ReturnStatement[54730-54771]"
    }, {
      "left" : "return parseEscapedName(_quadBuffer, qlen, q, i, 2);",
      "right" : "return parseEscapedName(_quadBuffer, qlen, q, i, 2);",
      "info" : "ReturnStatement[54117-54169]:ReturnStatement[54806-54858]"
    }, {
      "left" : "q = (q << 8) | i;",
      "right" : "q = (q << 8) | i;",
      "info" : "ExpressionStatement[54197-54214]:ExpressionStatement[54886-54903]"
    }, {
      "left" : "i = _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "i = _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[54227-54264]:ExpressionStatement[54916-54953]"
    }, {
      "left" : "if (codes[i] != 0)",
      "right" : "if (codes[i] != 0)",
      "info" : "IfStatement[54277-54498]:IfStatement[54966-55187]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54296-54498]:Block[54985-55187]"
    }, {
      "left" : "if (i == INT_QUOTE)",
      "right" : "if (i == INT_QUOTE)",
      "info" : "IfStatement[54314-54415]:IfStatement[55003-55104]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54334-54415]:Block[55023-55104]"
    }, {
      "left" : "return findName(_quadBuffer, qlen, q, 3);",
      "right" : "return findName(_quadBuffer, qlen, q, 3);",
      "info" : "ReturnStatement[54356-54397]:ReturnStatement[55045-55086]"
    }, {
      "left" : "return parseEscapedName(_quadBuffer, qlen, q, i, 3);",
      "right" : "return parseEscapedName(_quadBuffer, qlen, q, i, 3);",
      "info" : "ReturnStatement[54432-54484]:ReturnStatement[55121-55173]"
    }, {
      "left" : "q = (q << 8) | i;",
      "right" : "q = (q << 8) | i;",
      "info" : "ExpressionStatement[54512-54529]:ExpressionStatement[55201-55218]"
    }, {
      "left" : "i = _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "i = _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[54542-54579]:ExpressionStatement[55231-55268]"
    }, {
      "left" : "if (codes[i] != 0)",
      "right" : "if (codes[i] != 0)",
      "info" : "IfStatement[54592-54813]:IfStatement[55281-55502]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54611-54813]:Block[55300-55502]"
    }, {
      "left" : "if (i == INT_QUOTE)",
      "right" : "if (i == INT_QUOTE)",
      "info" : "IfStatement[54629-54730]:IfStatement[55318-55419]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54649-54730]:Block[55338-55419]"
    }, {
      "left" : "return findName(_quadBuffer, qlen, q, 4);",
      "right" : "return findName(_quadBuffer, qlen, q, 4);",
      "info" : "ReturnStatement[54671-54712]:ReturnStatement[55360-55401]"
    }, {
      "left" : "return parseEscapedName(_quadBuffer, qlen, q, i, 4);",
      "right" : "return parseEscapedName(_quadBuffer, qlen, q, i, 4);",
      "info" : "ReturnStatement[54747-54799]:ReturnStatement[55436-55488]"
    }, {
      "left" : "if (qlen >= _quadBuffer.length)",
      "right" : "if (qlen >= _quadBuffer.length)",
      "info" : "IfStatement[54893-55002]:IfStatement[55582-55691]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54925-55002]:Block[55614-55691]"
    }, {
      "left" : "_quadBuffer = growArrayBy(_quadBuffer, qlen);",
      "right" : "_quadBuffer = growArrayBy(_quadBuffer, qlen);",
      "info" : "ExpressionStatement[54943-54988]:ExpressionStatement[55632-55677]"
    }, {
      "left" : "_quadBuffer[qlen++] = q;",
      "right" : "_quadBuffer[qlen++] = q;",
      "info" : "ExpressionStatement[55015-55039]:ExpressionStatement[55704-55728]"
    }, {
      "left" : "q = i;",
      "right" : "q = i;",
      "info" : "ExpressionStatement[55052-55058]:ExpressionStatement[55741-55747]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[55283-55292]:Modifier[55972-55981]"
    }, {
      "left" : "Name",
      "right" : "Name",
      "info" : "SimpleType[55293-55297]:SimpleType[55982-55986]"
    }, {
      "left" : "slowParseName",
      "right" : "slowParseName",
      "info" : "SimpleName[55298-55311]:SimpleName[55987-56000]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[55329-55340]:SimpleType[56018-56029]"
    }, {
      "left" : "JsonParseException",
      "right" : "JsonParseException",
      "info" : "SimpleType[55342-55360]:SimpleType[56031-56049]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55365-55769]:Block[56054-56458]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[55375-55535]:IfStatement[56064-56224]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55403-55535]:Block[56092-56224]"
    }, {
      "left" : "if (!loadMore())",
      "right" : "if (!loadMore())",
      "info" : "IfStatement[55417-55525]:IfStatement[56106-56214]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55434-55525]:Block[56123-56214]"
    }, {
      "left" : "_reportInvalidEOF(\": was expecting closing '\\\"' for name\");",
      "right" : "_reportInvalidEOF(\": was expecting closing '\\\"' for name\");",
      "info" : "ExpressionStatement[55452-55511]:ExpressionStatement[56141-56200]"
    }, {
      "left" : "int i = _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "int i = _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "VariableDeclarationStatement[55544-55585]:VariableDeclarationStatement[56233-56274]"
    }, {
      "left" : "if (i == INT_QUOTE)",
      "right" : "if (i == INT_QUOTE)",
      "info" : "IfStatement[55594-55705]:IfStatement[56283-56394]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55614-55705]:Block[56303-56394]"
    }, {
      "left" : "return BytesToNameCanonicalizer.getEmptyName();",
      "right" : "return BytesToNameCanonicalizer.getEmptyName();",
      "info" : "ReturnStatement[55648-55695]:ReturnStatement[56337-56384]"
    }, {
      "left" : "return parseEscapedName(_quadBuffer, 0, 0, i, 0);",
      "right" : "return parseEscapedName(_quadBuffer, 0, 0, i, 0);",
      "info" : "ReturnStatement[55714-55763]:ReturnStatement[56403-56452]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[55775-55782]:Modifier[56464-56471]"
    }, {
      "left" : "Name",
      "right" : "Name",
      "info" : "SimpleType[55783-55787]:SimpleType[56472-56476]"
    }, {
      "left" : "parseName",
      "right" : "parseName",
      "info" : "SimpleName[55788-55797]:SimpleName[56477-56486]"
    }, {
      "left" : "int q1",
      "right" : "int q1",
      "info" : "SingleVariableDeclaration[55798-55804]:SingleVariableDeclaration[56487-56493]"
    }, {
      "left" : "int ch",
      "right" : "int ch",
      "info" : "SingleVariableDeclaration[55806-55812]:SingleVariableDeclaration[56495-56501]"
    }, {
      "left" : "int lastQuadBytes",
      "right" : "int lastQuadBytes",
      "info" : "SingleVariableDeclaration[55814-55831]:SingleVariableDeclaration[56503-56520]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[55848-55859]:SimpleType[56537-56548]"
    }, {
      "left" : "JsonParseException",
      "right" : "JsonParseException",
      "info" : "SimpleType[55861-55879]:SimpleType[56550-56568]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55884-55963]:Block[56573-56652]"
    }, {
      "left" : "return parseEscapedName(_quadBuffer, 0, q1, ch, lastQuadBytes);",
      "right" : "return parseEscapedName(_quadBuffer, 0, q1, ch, lastQuadBytes);",
      "info" : "ReturnStatement[55894-55957]:ReturnStatement[56583-56646]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[55969-55976]:Modifier[56658-56665]"
    }, {
      "left" : "Name",
      "right" : "Name",
      "info" : "SimpleType[55977-55981]:SimpleType[56666-56670]"
    }, {
      "left" : "parseName",
      "right" : "parseName",
      "info" : "SimpleName[55982-55991]:SimpleName[56671-56680]"
    }, {
      "left" : "int q1",
      "right" : "int q1",
      "info" : "SingleVariableDeclaration[55992-55998]:SingleVariableDeclaration[56681-56687]"
    }, {
      "left" : "int q2",
      "right" : "int q2",
      "info" : "SingleVariableDeclaration[56000-56006]:SingleVariableDeclaration[56689-56695]"
    }, {
      "left" : "int ch",
      "right" : "int ch",
      "info" : "SingleVariableDeclaration[56008-56014]:SingleVariableDeclaration[56697-56703]"
    }, {
      "left" : "int lastQuadBytes",
      "right" : "int lastQuadBytes",
      "info" : "SingleVariableDeclaration[56016-56033]:SingleVariableDeclaration[56705-56722]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[56050-56061]:SimpleType[56739-56750]"
    }, {
      "left" : "JsonParseException",
      "right" : "JsonParseException",
      "info" : "SimpleType[56063-56081]:SimpleType[56752-56770]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56086-56194]:Block[56775-56883]"
    }, {
      "left" : "_quadBuffer[0] = q1;",
      "right" : "_quadBuffer[0] = q1;",
      "info" : "ExpressionStatement[56096-56116]:ExpressionStatement[56785-56805]"
    }, {
      "left" : "return parseEscapedName(_quadBuffer, 1, q2, ch, lastQuadBytes);",
      "right" : "return parseEscapedName(_quadBuffer, 1, q2, ch, lastQuadBytes);",
      "info" : "ReturnStatement[56125-56188]:ReturnStatement[56814-56877]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[56536-56545]:Modifier[57225-57234]"
    }, {
      "left" : "Name",
      "right" : "Name",
      "info" : "SimpleType[56546-56550]:SimpleType[57235-57239]"
    }, {
      "left" : "parseEscapedName",
      "right" : "parseEscapedName",
      "info" : "SimpleName[56551-56567]:SimpleName[57240-57256]"
    }, {
      "left" : "int[] quads",
      "right" : "int[] quads",
      "info" : "SingleVariableDeclaration[56568-56579]:SingleVariableDeclaration[57257-57268]"
    }, {
      "left" : "int qlen",
      "right" : "int qlen",
      "info" : "SingleVariableDeclaration[56581-56589]:SingleVariableDeclaration[57270-57278]"
    }, {
      "left" : "int currQuad",
      "right" : "int currQuad",
      "info" : "SingleVariableDeclaration[56591-56603]:SingleVariableDeclaration[57280-57292]"
    }, {
      "left" : "int ch",
      "right" : "int ch",
      "info" : "SingleVariableDeclaration[56605-56611]:SingleVariableDeclaration[57294-57300]"
    }, {
      "left" : "int currQuadBytes",
      "right" : "int currQuadBytes",
      "info" : "SingleVariableDeclaration[56625-56642]:SingleVariableDeclaration[57314-57331]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[56659-56670]:SimpleType[57348-57359]"
    }, {
      "left" : "JsonParseException",
      "right" : "JsonParseException",
      "info" : "SimpleType[56672-56690]:SimpleType[57361-57379]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56695-60472]:Block[57384-61161]"
    }, {
      "left" : "final int[] codes = _icLatin1;",
      "right" : "final int[] codes = _icLatin1;",
      "info" : "VariableDeclarationStatement[56982-57012]:VariableDeclarationStatement[57671-57701]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[57022-60091]:WhileStatement[57711-60780]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57035-60091]:Block[57724-60780]"
    }, {
      "left" : "if (codes[ch] != 0)",
      "right" : "if (codes[ch] != 0)",
      "info" : "IfStatement[57049-59403]:IfStatement[57738-60092]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57069-59403]:Block[57758-60092]"
    }, {
      "left" : "if (ch == INT_QUOTE)",
      "right" : "if (ch == INT_QUOTE)",
      "info" : "IfStatement[57087-57169]:IfStatement[57776-57858]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57108-57169]:Block[57797-57858]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[57145-57151]:BreakStatement[57834-57840]"
    }, {
      "left" : "if (ch != INT_BACKSLASH)",
      "right" : "if (ch != INT_BACKSLASH)",
      "info" : "IfStatement[57227-57503]:IfStatement[57916-58192]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57252-57390]:Block[57941-58079]"
    }, {
      "left" : "_throwUnquotedSpace(ch, \"name\");",
      "right" : "_throwUnquotedSpace(ch, \"name\");",
      "info" : "ExpressionStatement[57340-57372]:ExpressionStatement[58029-58061]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57396-57503]:Block[58085-58192]"
    }, {
      "left" : "ch = _decodeEscaped();",
      "right" : "ch = _decodeEscaped();",
      "info" : "ExpressionStatement[57463-57485]:ExpressionStatement[58152-58174]"
    }, {
      "left" : "if (ch > 127)",
      "right" : "if (ch > 127)",
      "info" : "IfStatement[57798-59389]:IfStatement[58487-60078]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57812-59389]:Block[58501-60078]"
    }, {
      "left" : "if (currQuadBytes >= 4)",
      "right" : "if (currQuadBytes >= 4)",
      "info" : "IfStatement[57903-58243]:IfStatement[58592-58932]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57927-58243]:Block[58616-58932]"
    }, {
      "left" : "if (qlen >= quads.length)",
      "right" : "if (qlen >= quads.length)",
      "info" : "IfStatement[57953-58090]:IfStatement[58642-58779]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57979-58090]:Block[58668-58779]"
    }, {
      "left" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
      "right" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
      "info" : "ExpressionStatement[58009-58064]:ExpressionStatement[58698-58753]"
    }, {
      "left" : "quads[qlen++] = currQuad;",
      "right" : "quads[qlen++] = currQuad;",
      "info" : "ExpressionStatement[58115-58140]:ExpressionStatement[58804-58829]"
    }, {
      "left" : "currQuad = 0;",
      "right" : "currQuad = 0;",
      "info" : "ExpressionStatement[58165-58178]:ExpressionStatement[58854-58867]"
    }, {
      "left" : "currQuadBytes = 0;",
      "right" : "currQuadBytes = 0;",
      "info" : "ExpressionStatement[58203-58221]:ExpressionStatement[58892-58910]"
    }, {
      "left" : "if (ch < 0x800)",
      "right" : "if (ch < 0x800)",
      "info" : "IfStatement[58264-59250]:IfStatement[58953-59939]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58280-58485]:Block[58969-59174]"
    }, {
      "left" : "currQuad = (currQuad << 8) | (0xc0 | (ch >> 6));",
      "right" : "currQuad = (currQuad << 8) | (0xc0 | (ch >> 6));",
      "info" : "ExpressionStatement[58316-58364]:ExpressionStatement[59005-59053]"
    }, {
      "left" : "++currQuadBytes;",
      "right" : "++currQuadBytes;",
      "info" : "ExpressionStatement[58389-58405]:ExpressionStatement[59078-59094]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58491-59250]:Block[59180-59939]"
    }, {
      "left" : "currQuad = (currQuad << 8) | (0xe0 | (ch >> 12));",
      "right" : "currQuad = (currQuad << 8) | (0xe0 | (ch >> 12));",
      "info" : "ExpressionStatement[58568-58617]:ExpressionStatement[59257-59306]"
    }, {
      "left" : "++currQuadBytes;",
      "right" : "++currQuadBytes;",
      "info" : "ExpressionStatement[58642-58658]:ExpressionStatement[59331-59347]"
    }, {
      "left" : "if (currQuadBytes >= 4)",
      "right" : "if (currQuadBytes >= 4)",
      "info" : "IfStatement[58737-59105]:IfStatement[59426-59794]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58761-59105]:Block[59450-59794]"
    }, {
      "left" : "if (qlen >= quads.length)",
      "right" : "if (qlen >= quads.length)",
      "info" : "IfStatement[58791-58936]:IfStatement[59480-59625]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58817-58936]:Block[59506-59625]"
    }, {
      "left" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
      "right" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
      "info" : "ExpressionStatement[58851-58906]:ExpressionStatement[59540-59595]"
    }, {
      "left" : "quads[qlen++] = currQuad;",
      "right" : "quads[qlen++] = currQuad;",
      "info" : "ExpressionStatement[58965-58990]:ExpressionStatement[59654-59679]"
    }, {
      "left" : "currQuad = 0;",
      "right" : "currQuad = 0;",
      "info" : "ExpressionStatement[59019-59032]:ExpressionStatement[59708-59721]"
    }, {
      "left" : "currQuadBytes = 0;",
      "right" : "currQuadBytes = 0;",
      "info" : "ExpressionStatement[59061-59079]:ExpressionStatement[59750-59768]"
    }, {
      "left" : "currQuad = (currQuad << 8) | (0x80 | ((ch >> 6) & 0x3f));",
      "right" : "currQuad = (currQuad << 8) | (0x80 | ((ch >> 6) & 0x3f));",
      "info" : "ExpressionStatement[59130-59187]:ExpressionStatement[59819-59876]"
    }, {
      "left" : "++currQuadBytes;",
      "right" : "++currQuadBytes;",
      "info" : "ExpressionStatement[59212-59228]:ExpressionStatement[59901-59917]"
    }, {
      "left" : "ch = 0x80 | (ch & 0x3f);",
      "right" : "ch = 0x80 | (ch & 0x3f);",
      "info" : "ExpressionStatement[59347-59371]:ExpressionStatement[60036-60060]"
    }, {
      "left" : "if (currQuadBytes < 4)",
      "right" : "if (currQuadBytes < 4)",
      "info" : "IfStatement[59477-59864]:IfStatement[60166-60553]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59500-59597]:Block[60189-60286]"
    }, {
      "left" : "++currQuadBytes;",
      "right" : "++currQuadBytes;",
      "info" : "ExpressionStatement[59518-59534]:ExpressionStatement[60207-60223]"
    }, {
      "left" : "currQuad = (currQuad << 8) | ch;",
      "right" : "currQuad = (currQuad << 8) | ch;",
      "info" : "ExpressionStatement[59551-59583]:ExpressionStatement[60240-60272]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59603-59864]:Block[60292-60553]"
    }, {
      "left" : "if (qlen >= quads.length)",
      "right" : "if (qlen >= quads.length)",
      "info" : "IfStatement[59621-59742]:IfStatement[60310-60431]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59647-59742]:Block[60336-60431]"
    }, {
      "left" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
      "right" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
      "info" : "ExpressionStatement[59669-59724]:ExpressionStatement[60358-60413]"
    }, {
      "left" : "quads[qlen++] = currQuad;",
      "right" : "quads[qlen++] = currQuad;",
      "info" : "ExpressionStatement[59759-59784]:ExpressionStatement[60448-60473]"
    }, {
      "left" : "currQuad = ch;",
      "right" : "currQuad = ch;",
      "info" : "ExpressionStatement[59801-59815]:ExpressionStatement[60490-60504]"
    }, {
      "left" : "currQuadBytes = 1;",
      "right" : "currQuadBytes = 1;",
      "info" : "ExpressionStatement[59832-59850]:ExpressionStatement[60521-60539]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[59877-60030]:IfStatement[60566-60719]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59905-60030]:Block[60594-60719]"
    }, {
      "left" : "if (!loadMore())",
      "right" : "if (!loadMore())",
      "info" : "IfStatement[59923-60016]:IfStatement[60612-60705]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59940-60016]:Block[60629-60705]"
    }, {
      "left" : "_reportInvalidEOF(\" in field name\");",
      "right" : "_reportInvalidEOF(\" in field name\");",
      "info" : "ExpressionStatement[59962-59998]:ExpressionStatement[60651-60687]"
    }, {
      "left" : "ch = _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "ch = _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[60043-60081]:ExpressionStatement[60732-60770]"
    }, {
      "left" : "if (currQuadBytes > 0)",
      "right" : "if (currQuadBytes > 0)",
      "info" : "IfStatement[60101-60299]:IfStatement[60790-60988]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60124-60299]:Block[60813-60988]"
    }, {
      "left" : "if (qlen >= quads.length)",
      "right" : "if (qlen >= quads.length)",
      "info" : "IfStatement[60138-60251]:IfStatement[60827-60940]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60164-60251]:Block[60853-60940]"
    }, {
      "left" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
      "right" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
      "info" : "ExpressionStatement[60182-60237]:ExpressionStatement[60871-60926]"
    }, {
      "left" : "quads[qlen++] = currQuad;",
      "right" : "quads[qlen++] = currQuad;",
      "info" : "ExpressionStatement[60264-60289]:ExpressionStatement[60953-60978]"
    }, {
      "left" : "Name name = _symbols.findName(quads, qlen);",
      "right" : "Name name = _symbols.findName(quads, qlen);",
      "info" : "VariableDeclarationStatement[60308-60351]:VariableDeclarationStatement[60997-61040]"
    }, {
      "left" : "if (name == null)",
      "right" : "if (name == null)",
      "info" : "IfStatement[60360-60445]:IfStatement[61049-61134]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60378-60445]:Block[61067-61134]"
    }, {
      "left" : "name = addName(quads, qlen, currQuadBytes);",
      "right" : "name = addName(quads, qlen, currQuadBytes);",
      "info" : "ExpressionStatement[60392-60435]:ExpressionStatement[61081-61124]"
    }, {
      "left" : "return name;",
      "right" : "return name;",
      "info" : "ReturnStatement[60454-60466]:ReturnStatement[61143-61155]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[60728-60737]:Modifier[61417-61426]"
    }, {
      "left" : "Name",
      "right" : "Name",
      "info" : "SimpleType[60738-60742]:SimpleType[61427-61431]"
    }, {
      "left" : "_handleOddName",
      "right" : "_handleOddName",
      "info" : "SimpleName[60743-60757]:SimpleName[61432-61446]"
    }, {
      "left" : "int ch",
      "right" : "int ch",
      "info" : "SingleVariableDeclaration[60758-60764]:SingleVariableDeclaration[61447-61453]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[60781-60792]:SimpleType[61470-61481]"
    }, {
      "left" : "JsonParseException",
      "right" : "JsonParseException",
      "info" : "SimpleType[60794-60812]:SimpleType[61483-61501]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60817-63238]:Block[61506-63927]"
    }, {
      "left" : "if (ch == '\\'' && isEnabled(Feature.ALLOW_SINGLE_QUOTES))",
      "right" : "if (ch == '\\'' && isEnabled(Feature.ALLOW_SINGLE_QUOTES))",
      "info" : "IfStatement[60873-60979]:IfStatement[61562-61668]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60931-60979]:Block[61620-61668]"
    }, {
      "left" : "return _parseAposName();",
      "right" : "return _parseAposName();",
      "info" : "ReturnStatement[60945-60969]:ReturnStatement[61634-61658]"
    }, {
      "left" : "if (!isEnabled(Feature.ALLOW_UNQUOTED_FIELD_NAMES))",
      "right" : "if (!isEnabled(Feature.ALLOW_UNQUOTED_FIELD_NAMES))",
      "info" : "IfStatement[61054-61206]:IfStatement[61743-61895]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61106-61206]:Block[61795-61895]"
    }, {
      "left" : "_reportUnexpectedChar(ch, \"was expecting double-quote to start field name\");",
      "right" : "_reportUnexpectedChar(ch, \"was expecting double-quote to start field name\");",
      "info" : "ExpressionStatement[61120-61196]:ExpressionStatement[61809-61885]"
    }, {
      "left" : "final int[] codes = CharTypes.getInputCodeUtf8JsNames();",
      "right" : "final int[] codes = CharTypes.getInputCodeUtf8JsNames();",
      "info" : "VariableDeclarationStatement[61422-61478]:VariableDeclarationStatement[62111-62167]"
    }, {
      "left" : "if (codes[ch] != 0)",
      "right" : "if (codes[ch] != 0)",
      "info" : "IfStatement[61541-61725]:IfStatement[62230-62414]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61561-61725]:Block[62250-62414]"
    }, {
      "left" : "_reportUnexpectedChar(ch, \"was expecting either valid name character (for unquoted name) or double-quote (for quoted) to start field name\");",
      "right" : "_reportUnexpectedChar(ch, \"was expecting either valid name character (for unquoted name) or double-quote (for quoted) to start field name\");",
      "info" : "ExpressionStatement[61575-61715]:ExpressionStatement[62264-62404]"
    }, {
      "left" : "int[] quads = _quadBuffer;",
      "right" : "int[] quads = _quadBuffer;",
      "info" : "VariableDeclarationStatement[61946-61972]:VariableDeclarationStatement[62635-62661]"
    }, {
      "left" : "int qlen = 0;",
      "right" : "int qlen = 0;",
      "info" : "VariableDeclarationStatement[61981-61994]:VariableDeclarationStatement[62670-62683]"
    }, {
      "left" : "int currQuad = 0;",
      "right" : "int currQuad = 0;",
      "info" : "VariableDeclarationStatement[62003-62020]:VariableDeclarationStatement[62692-62709]"
    }, {
      "left" : "int currQuadBytes = 0;",
      "right" : "int currQuadBytes = 0;",
      "info" : "VariableDeclarationStatement[62029-62051]:VariableDeclarationStatement[62718-62740]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[62061-62857]:WhileStatement[62750-63546]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62074-62857]:Block[62763-63546]"
    }, {
      "left" : "if (currQuadBytes < 4)",
      "right" : "if (currQuadBytes < 4)",
      "info" : "IfStatement[62149-62536]:IfStatement[62838-63225]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62172-62269]:Block[62861-62958]"
    }, {
      "left" : "++currQuadBytes;",
      "right" : "++currQuadBytes;",
      "info" : "ExpressionStatement[62190-62206]:ExpressionStatement[62879-62895]"
    }, {
      "left" : "currQuad = (currQuad << 8) | ch;",
      "right" : "currQuad = (currQuad << 8) | ch;",
      "info" : "ExpressionStatement[62223-62255]:ExpressionStatement[62912-62944]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62275-62536]:Block[62964-63225]"
    }, {
      "left" : "if (qlen >= quads.length)",
      "right" : "if (qlen >= quads.length)",
      "info" : "IfStatement[62293-62414]:IfStatement[62982-63103]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62319-62414]:Block[63008-63103]"
    }, {
      "left" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
      "right" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
      "info" : "ExpressionStatement[62341-62396]:ExpressionStatement[63030-63085]"
    }, {
      "left" : "quads[qlen++] = currQuad;",
      "right" : "quads[qlen++] = currQuad;",
      "info" : "ExpressionStatement[62431-62456]:ExpressionStatement[63120-63145]"
    }, {
      "left" : "currQuad = ch;",
      "right" : "currQuad = ch;",
      "info" : "ExpressionStatement[62473-62487]:ExpressionStatement[63162-63176]"
    }, {
      "left" : "currQuadBytes = 1;",
      "right" : "currQuadBytes = 1;",
      "info" : "ExpressionStatement[62504-62522]:ExpressionStatement[63193-63211]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[62549-62702]:IfStatement[63238-63391]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62577-62702]:Block[63266-63391]"
    }, {
      "left" : "if (!loadMore())",
      "right" : "if (!loadMore())",
      "info" : "IfStatement[62595-62688]:IfStatement[63284-63377]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62612-62688]:Block[63301-63377]"
    }, {
      "left" : "_reportInvalidEOF(\" in field name\");",
      "right" : "_reportInvalidEOF(\" in field name\");",
      "info" : "ExpressionStatement[62634-62670]:ExpressionStatement[63323-63359]"
    }, {
      "left" : "ch = _inputBuffer[_inputPtr] & 0xFF;",
      "right" : "ch = _inputBuffer[_inputPtr] & 0xFF;",
      "info" : "ExpressionStatement[62715-62751]:ExpressionStatement[63404-63440]"
    }, {
      "left" : "if (codes[ch] != 0)",
      "right" : "if (codes[ch] != 0)",
      "info" : "IfStatement[62764-62822]:IfStatement[63453-63511]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62784-62822]:Block[63473-63511]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[62802-62808]:BreakStatement[63491-63497]"
    }, {
      "left" : "++_inputPtr;",
      "right" : "++_inputPtr;",
      "info" : "ExpressionStatement[62835-62847]:ExpressionStatement[63524-63536]"
    }, {
      "left" : "if (currQuadBytes > 0)",
      "right" : "if (currQuadBytes > 0)",
      "info" : "IfStatement[62867-63065]:IfStatement[63556-63754]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62890-63065]:Block[63579-63754]"
    }, {
      "left" : "if (qlen >= quads.length)",
      "right" : "if (qlen >= quads.length)",
      "info" : "IfStatement[62904-63017]:IfStatement[63593-63706]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62930-63017]:Block[63619-63706]"
    }, {
      "left" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
      "right" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
      "info" : "ExpressionStatement[62948-63003]:ExpressionStatement[63637-63692]"
    }, {
      "left" : "quads[qlen++] = currQuad;",
      "right" : "quads[qlen++] = currQuad;",
      "info" : "ExpressionStatement[63030-63055]:ExpressionStatement[63719-63744]"
    }, {
      "left" : "Name name = _symbols.findName(quads, qlen);",
      "right" : "Name name = _symbols.findName(quads, qlen);",
      "info" : "VariableDeclarationStatement[63074-63117]:VariableDeclarationStatement[63763-63806]"
    }, {
      "left" : "if (name == null)",
      "right" : "if (name == null)",
      "info" : "IfStatement[63126-63211]:IfStatement[63815-63900]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63144-63211]:Block[63833-63900]"
    }, {
      "left" : "name = addName(quads, qlen, currQuadBytes);",
      "right" : "name = addName(quads, qlen, currQuadBytes);",
      "info" : "ExpressionStatement[63158-63201]:ExpressionStatement[63847-63890]"
    }, {
      "left" : "return name;",
      "right" : "return name;",
      "info" : "ReturnStatement[63220-63232]:ReturnStatement[63909-63921]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[63478-63487]:Modifier[64167-64176]"
    }, {
      "left" : "Name",
      "right" : "Name",
      "info" : "SimpleType[63488-63492]:SimpleType[64177-64181]"
    }, {
      "left" : "_parseAposName",
      "right" : "_parseAposName",
      "info" : "SimpleName[63493-63507]:SimpleName[64182-64196]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[63525-63536]:SimpleType[64214-64225]"
    }, {
      "left" : "JsonParseException",
      "right" : "JsonParseException",
      "info" : "SimpleType[63538-63556]:SimpleType[64227-64245]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63561-67618]:Block[64250-68307]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[63571-63731]:IfStatement[64260-64420]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63599-63731]:Block[64288-64420]"
    }, {
      "left" : "if (!loadMore())",
      "right" : "if (!loadMore())",
      "info" : "IfStatement[63613-63721]:IfStatement[64302-64410]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63630-63721]:Block[64319-64410]"
    }, {
      "left" : "_reportInvalidEOF(\": was expecting closing '\\'' for name\");",
      "right" : "_reportInvalidEOF(\": was expecting closing '\\'' for name\");",
      "info" : "ExpressionStatement[63648-63707]:ExpressionStatement[64337-64396]"
    }, {
      "left" : "int ch = _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "int ch = _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "VariableDeclarationStatement[63740-63782]:VariableDeclarationStatement[64429-64471]"
    }, {
      "left" : "if (ch == '\\'')",
      "right" : "if (ch == '\\'')",
      "info" : "IfStatement[63791-63898]:IfStatement[64480-64587]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63807-63898]:Block[64496-64587]"
    }, {
      "left" : "return BytesToNameCanonicalizer.getEmptyName();",
      "right" : "return BytesToNameCanonicalizer.getEmptyName();",
      "info" : "ReturnStatement[63841-63888]:ReturnStatement[64530-64577]"
    }, {
      "left" : "int[] quads = _quadBuffer;",
      "right" : "int[] quads = _quadBuffer;",
      "info" : "VariableDeclarationStatement[63907-63933]:VariableDeclarationStatement[64596-64622]"
    }, {
      "left" : "int qlen = 0;",
      "right" : "int qlen = 0;",
      "info" : "VariableDeclarationStatement[63942-63955]:VariableDeclarationStatement[64631-64644]"
    }, {
      "left" : "int currQuad = 0;",
      "right" : "int currQuad = 0;",
      "info" : "VariableDeclarationStatement[63964-63981]:VariableDeclarationStatement[64653-64670]"
    }, {
      "left" : "int currQuadBytes = 0;",
      "right" : "int currQuadBytes = 0;",
      "info" : "VariableDeclarationStatement[63990-64012]:VariableDeclarationStatement[64679-64701]"
    }, {
      "left" : "final int[] codes = _icLatin1;",
      "right" : "final int[] codes = _icLatin1;",
      "info" : "VariableDeclarationStatement[64086-64116]:VariableDeclarationStatement[64775-64805]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[64126-67237]:WhileStatement[64815-67926]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64139-67237]:Block[64828-67926]"
    }, {
      "left" : "if (ch == '\\'')",
      "right" : "if (ch == '\\'')",
      "info" : "IfStatement[64153-64207]:IfStatement[64842-64896]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64169-64207]:Block[64858-64896]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[64187-64193]:BreakStatement[64876-64882]"
    }, {
      "left" : "if (ch != '\"' && codes[ch] != 0)",
      "right" : "if (ch != '\"' && codes[ch] != 0)",
      "info" : "IfStatement[64286-66549]:IfStatement[64975-67238]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64319-66549]:Block[65008-67238]"
    }, {
      "left" : "if (ch != '\\\\')",
      "right" : "if (ch != '\\\\')",
      "info" : "IfStatement[64337-64649]:IfStatement[65026-65338]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64353-64536]:Block[65042-65225]"
    }, {
      "left" : "_throwUnquotedSpace(ch, \"name\");",
      "right" : "_throwUnquotedSpace(ch, \"name\");",
      "info" : "ExpressionStatement[64486-64518]:ExpressionStatement[65175-65207]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64542-64649]:Block[65231-65338]"
    }, {
      "left" : "ch = _decodeEscaped();",
      "right" : "ch = _decodeEscaped();",
      "info" : "ExpressionStatement[64609-64631]:ExpressionStatement[65298-65320]"
    }, {
      "left" : "if (ch > 127)",
      "right" : "if (ch > 127)",
      "info" : "IfStatement[64944-66535]:IfStatement[65633-67224]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64958-66535]:Block[65647-67224]"
    }, {
      "left" : "if (currQuadBytes >= 4)",
      "right" : "if (currQuadBytes >= 4)",
      "info" : "IfStatement[65049-65389]:IfStatement[65738-66078]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65073-65389]:Block[65762-66078]"
    }, {
      "left" : "if (qlen >= quads.length)",
      "right" : "if (qlen >= quads.length)",
      "info" : "IfStatement[65099-65236]:IfStatement[65788-65925]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65125-65236]:Block[65814-65925]"
    }, {
      "left" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
      "right" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
      "info" : "ExpressionStatement[65155-65210]:ExpressionStatement[65844-65899]"
    }, {
      "left" : "quads[qlen++] = currQuad;",
      "right" : "quads[qlen++] = currQuad;",
      "info" : "ExpressionStatement[65261-65286]:ExpressionStatement[65950-65975]"
    }, {
      "left" : "currQuad = 0;",
      "right" : "currQuad = 0;",
      "info" : "ExpressionStatement[65311-65324]:ExpressionStatement[66000-66013]"
    }, {
      "left" : "currQuadBytes = 0;",
      "right" : "currQuadBytes = 0;",
      "info" : "ExpressionStatement[65349-65367]:ExpressionStatement[66038-66056]"
    }, {
      "left" : "if (ch < 0x800)",
      "right" : "if (ch < 0x800)",
      "info" : "IfStatement[65410-66396]:IfStatement[66099-67085]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65426-65631]:Block[66115-66320]"
    }, {
      "left" : "currQuad = (currQuad << 8) | (0xc0 | (ch >> 6));",
      "right" : "currQuad = (currQuad << 8) | (0xc0 | (ch >> 6));",
      "info" : "ExpressionStatement[65462-65510]:ExpressionStatement[66151-66199]"
    }, {
      "left" : "++currQuadBytes;",
      "right" : "++currQuadBytes;",
      "info" : "ExpressionStatement[65535-65551]:ExpressionStatement[66224-66240]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65637-66396]:Block[66326-67085]"
    }, {
      "left" : "currQuad = (currQuad << 8) | (0xe0 | (ch >> 12));",
      "right" : "currQuad = (currQuad << 8) | (0xe0 | (ch >> 12));",
      "info" : "ExpressionStatement[65714-65763]:ExpressionStatement[66403-66452]"
    }, {
      "left" : "++currQuadBytes;",
      "right" : "++currQuadBytes;",
      "info" : "ExpressionStatement[65788-65804]:ExpressionStatement[66477-66493]"
    }, {
      "left" : "if (currQuadBytes >= 4)",
      "right" : "if (currQuadBytes >= 4)",
      "info" : "IfStatement[65883-66251]:IfStatement[66572-66940]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65907-66251]:Block[66596-66940]"
    }, {
      "left" : "if (qlen >= quads.length)",
      "right" : "if (qlen >= quads.length)",
      "info" : "IfStatement[65937-66082]:IfStatement[66626-66771]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65963-66082]:Block[66652-66771]"
    }, {
      "left" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
      "right" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
      "info" : "ExpressionStatement[65997-66052]:ExpressionStatement[66686-66741]"
    }, {
      "left" : "quads[qlen++] = currQuad;",
      "right" : "quads[qlen++] = currQuad;",
      "info" : "ExpressionStatement[66111-66136]:ExpressionStatement[66800-66825]"
    }, {
      "left" : "currQuad = 0;",
      "right" : "currQuad = 0;",
      "info" : "ExpressionStatement[66165-66178]:ExpressionStatement[66854-66867]"
    }, {
      "left" : "currQuadBytes = 0;",
      "right" : "currQuadBytes = 0;",
      "info" : "ExpressionStatement[66207-66225]:ExpressionStatement[66896-66914]"
    }, {
      "left" : "currQuad = (currQuad << 8) | (0x80 | ((ch >> 6) & 0x3f));",
      "right" : "currQuad = (currQuad << 8) | (0x80 | ((ch >> 6) & 0x3f));",
      "info" : "ExpressionStatement[66276-66333]:ExpressionStatement[66965-67022]"
    }, {
      "left" : "++currQuadBytes;",
      "right" : "++currQuadBytes;",
      "info" : "ExpressionStatement[66358-66374]:ExpressionStatement[67047-67063]"
    }, {
      "left" : "ch = 0x80 | (ch & 0x3f);",
      "right" : "ch = 0x80 | (ch & 0x3f);",
      "info" : "ExpressionStatement[66493-66517]:ExpressionStatement[67182-67206]"
    }, {
      "left" : "if (currQuadBytes < 4)",
      "right" : "if (currQuadBytes < 4)",
      "info" : "IfStatement[66623-67010]:IfStatement[67312-67699]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66646-66743]:Block[67335-67432]"
    }, {
      "left" : "++currQuadBytes;",
      "right" : "++currQuadBytes;",
      "info" : "ExpressionStatement[66664-66680]:ExpressionStatement[67353-67369]"
    }, {
      "left" : "currQuad = (currQuad << 8) | ch;",
      "right" : "currQuad = (currQuad << 8) | ch;",
      "info" : "ExpressionStatement[66697-66729]:ExpressionStatement[67386-67418]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66749-67010]:Block[67438-67699]"
    }, {
      "left" : "if (qlen >= quads.length)",
      "right" : "if (qlen >= quads.length)",
      "info" : "IfStatement[66767-66888]:IfStatement[67456-67577]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66793-66888]:Block[67482-67577]"
    }, {
      "left" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
      "right" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
      "info" : "ExpressionStatement[66815-66870]:ExpressionStatement[67504-67559]"
    }, {
      "left" : "quads[qlen++] = currQuad;",
      "right" : "quads[qlen++] = currQuad;",
      "info" : "ExpressionStatement[66905-66930]:ExpressionStatement[67594-67619]"
    }, {
      "left" : "currQuad = ch;",
      "right" : "currQuad = ch;",
      "info" : "ExpressionStatement[66947-66961]:ExpressionStatement[67636-67650]"
    }, {
      "left" : "currQuadBytes = 1;",
      "right" : "currQuadBytes = 1;",
      "info" : "ExpressionStatement[66978-66996]:ExpressionStatement[67667-67685]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[67023-67176]:IfStatement[67712-67865]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67051-67176]:Block[67740-67865]"
    }, {
      "left" : "if (!loadMore())",
      "right" : "if (!loadMore())",
      "info" : "IfStatement[67069-67162]:IfStatement[67758-67851]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67086-67162]:Block[67775-67851]"
    }, {
      "left" : "_reportInvalidEOF(\" in field name\");",
      "right" : "_reportInvalidEOF(\" in field name\");",
      "info" : "ExpressionStatement[67108-67144]:ExpressionStatement[67797-67833]"
    }, {
      "left" : "ch = _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "ch = _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[67189-67227]:ExpressionStatement[67878-67916]"
    }, {
      "left" : "if (currQuadBytes > 0)",
      "right" : "if (currQuadBytes > 0)",
      "info" : "IfStatement[67247-67445]:IfStatement[67936-68134]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67270-67445]:Block[67959-68134]"
    }, {
      "left" : "if (qlen >= quads.length)",
      "right" : "if (qlen >= quads.length)",
      "info" : "IfStatement[67284-67397]:IfStatement[67973-68086]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67310-67397]:Block[67999-68086]"
    }, {
      "left" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
      "right" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
      "info" : "ExpressionStatement[67328-67383]:ExpressionStatement[68017-68072]"
    }, {
      "left" : "quads[qlen++] = currQuad;",
      "right" : "quads[qlen++] = currQuad;",
      "info" : "ExpressionStatement[67410-67435]:ExpressionStatement[68099-68124]"
    }, {
      "left" : "Name name = _symbols.findName(quads, qlen);",
      "right" : "Name name = _symbols.findName(quads, qlen);",
      "info" : "VariableDeclarationStatement[67454-67497]:VariableDeclarationStatement[68143-68186]"
    }, {
      "left" : "if (name == null)",
      "right" : "if (name == null)",
      "info" : "IfStatement[67506-67591]:IfStatement[68195-68280]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67524-67591]:Block[68213-68280]"
    }, {
      "left" : "name = addName(quads, qlen, currQuadBytes);",
      "right" : "name = addName(quads, qlen, currQuadBytes);",
      "info" : "ExpressionStatement[67538-67581]:ExpressionStatement[68227-68270]"
    }, {
      "left" : "return name;",
      "right" : "return name;",
      "info" : "ReturnStatement[67600-67612]:ReturnStatement[68289-68301]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[67816-67823]:Modifier[68505-68512]"
    }, {
      "left" : "Name",
      "right" : "Name",
      "info" : "SimpleType[67824-67828]:SimpleType[68513-68517]"
    }, {
      "left" : "findName",
      "right" : "findName",
      "info" : "SimpleName[67829-67837]:SimpleName[68518-68526]"
    }, {
      "left" : "int q1",
      "right" : "int q1",
      "info" : "SingleVariableDeclaration[67838-67844]:SingleVariableDeclaration[68527-68533]"
    }, {
      "left" : "int lastQuadBytes",
      "right" : "int lastQuadBytes",
      "info" : "SingleVariableDeclaration[67846-67863]:SingleVariableDeclaration[68535-68552]"
    }, {
      "left" : "JsonParseException",
      "right" : "JsonParseException",
      "info" : "SimpleType[67880-67898]:SimpleType[68569-68587]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67903-68234]:Block[68592-68923]"
    }, {
      "left" : "Name name = _symbols.findName(q1);",
      "right" : "Name name = _symbols.findName(q1);",
      "info" : "VariableDeclarationStatement[67986-68020]:VariableDeclarationStatement[68675-68709]"
    }, {
      "left" : "if (name != null)",
      "right" : "if (name != null)",
      "info" : "IfStatement[68029-68083]:IfStatement[68718-68772]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68047-68083]:Block[68736-68772]"
    }, {
      "left" : "return name;",
      "right" : "return name;",
      "info" : "ReturnStatement[68061-68073]:ReturnStatement[68750-68762]"
    }, {
      "left" : "_quadBuffer[0] = q1;",
      "right" : "_quadBuffer[0] = q1;",
      "info" : "ExpressionStatement[68153-68173]:ExpressionStatement[68842-68862]"
    }, {
      "left" : "return addName(_quadBuffer, 1, lastQuadBytes);",
      "right" : "return addName(_quadBuffer, 1, lastQuadBytes);",
      "info" : "ReturnStatement[68182-68228]:ReturnStatement[68871-68917]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[68240-68247]:Modifier[68929-68936]"
    }, {
      "left" : "Name",
      "right" : "Name",
      "info" : "SimpleType[68248-68252]:SimpleType[68937-68941]"
    }, {
      "left" : "findName",
      "right" : "findName",
      "info" : "SimpleName[68253-68261]:SimpleName[68942-68950]"
    }, {
      "left" : "int q1",
      "right" : "int q1",
      "info" : "SingleVariableDeclaration[68262-68268]:SingleVariableDeclaration[68951-68957]"
    }, {
      "left" : "int q2",
      "right" : "int q2",
      "info" : "SingleVariableDeclaration[68270-68276]:SingleVariableDeclaration[68959-68965]"
    }, {
      "left" : "int lastQuadBytes",
      "right" : "int lastQuadBytes",
      "info" : "SingleVariableDeclaration[68278-68295]:SingleVariableDeclaration[68967-68984]"
    }, {
      "left" : "JsonParseException",
      "right" : "JsonParseException",
      "info" : "SimpleType[68312-68330]:SimpleType[69001-69019]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68335-68699]:Block[69024-69388]"
    }, {
      "left" : "Name name = _symbols.findName(q1, q2);",
      "right" : "Name name = _symbols.findName(q1, q2);",
      "info" : "VariableDeclarationStatement[68418-68456]:VariableDeclarationStatement[69107-69145]"
    }, {
      "left" : "if (name != null)",
      "right" : "if (name != null)",
      "info" : "IfStatement[68465-68519]:IfStatement[69154-69208]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68483-68519]:Block[69172-69208]"
    }, {
      "left" : "return name;",
      "right" : "return name;",
      "info" : "ReturnStatement[68497-68509]:ReturnStatement[69186-69198]"
    }, {
      "left" : "_quadBuffer[0] = q1;",
      "right" : "_quadBuffer[0] = q1;",
      "info" : "ExpressionStatement[68589-68609]:ExpressionStatement[69278-69298]"
    }, {
      "left" : "_quadBuffer[1] = q2;",
      "right" : "_quadBuffer[1] = q2;",
      "info" : "ExpressionStatement[68618-68638]:ExpressionStatement[69307-69327]"
    }, {
      "left" : "return addName(_quadBuffer, 2, lastQuadBytes);",
      "right" : "return addName(_quadBuffer, 2, lastQuadBytes);",
      "info" : "ReturnStatement[68647-68693]:ReturnStatement[69336-69382]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[68705-68712]:Modifier[69394-69401]"
    }, {
      "left" : "Name",
      "right" : "Name",
      "info" : "SimpleType[68713-68717]:SimpleType[69402-69406]"
    }, {
      "left" : "findName",
      "right" : "findName",
      "info" : "SimpleName[68718-68726]:SimpleName[69407-69415]"
    }, {
      "left" : "int[] quads",
      "right" : "int[] quads",
      "info" : "SingleVariableDeclaration[68727-68738]:SingleVariableDeclaration[69416-69427]"
    }, {
      "left" : "int qlen",
      "right" : "int qlen",
      "info" : "SingleVariableDeclaration[68740-68748]:SingleVariableDeclaration[69429-69437]"
    }, {
      "left" : "int lastQuad",
      "right" : "int lastQuad",
      "info" : "SingleVariableDeclaration[68750-68762]:SingleVariableDeclaration[69439-69451]"
    }, {
      "left" : "int lastQuadBytes",
      "right" : "int lastQuadBytes",
      "info" : "SingleVariableDeclaration[68764-68781]:SingleVariableDeclaration[69453-69470]"
    }, {
      "left" : "JsonParseException",
      "right" : "JsonParseException",
      "info" : "SimpleType[68798-68816]:SimpleType[69487-69505]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68821-69143]:Block[69510-69832]"
    }, {
      "left" : "if (qlen >= quads.length)",
      "right" : "if (qlen >= quads.length)",
      "info" : "IfStatement[68831-68936]:IfStatement[69520-69625]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68857-68936]:Block[69546-69625]"
    }, {
      "left" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
      "right" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
      "info" : "ExpressionStatement[68871-68926]:ExpressionStatement[69560-69615]"
    }, {
      "left" : "quads[qlen++] = lastQuad;",
      "right" : "quads[qlen++] = lastQuad;",
      "info" : "ExpressionStatement[68945-68970]:ExpressionStatement[69634-69659]"
    }, {
      "left" : "Name name = _symbols.findName(quads, qlen);",
      "right" : "Name name = _symbols.findName(quads, qlen);",
      "info" : "VariableDeclarationStatement[68979-69022]:VariableDeclarationStatement[69668-69711]"
    }, {
      "left" : "if (name == null)",
      "right" : "if (name == null)",
      "info" : "IfStatement[69031-69116]:IfStatement[69720-69805]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69049-69116]:Block[69738-69805]"
    }, {
      "left" : "return addName(quads, qlen, lastQuadBytes);",
      "right" : "return addName(quads, qlen, lastQuadBytes);",
      "info" : "ReturnStatement[69063-69106]:ReturnStatement[69752-69795]"
    }, {
      "left" : "return name;",
      "right" : "return name;",
      "info" : "ReturnStatement[69125-69137]:ReturnStatement[69814-69826]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[69407-69414]:Modifier[70096-70103]"
    }, {
      "left" : "Name",
      "right" : "Name",
      "info" : "SimpleType[69415-69419]:SimpleType[70104-70108]"
    }, {
      "left" : "addName",
      "right" : "addName",
      "info" : "SimpleName[69420-69427]:SimpleName[70109-70116]"
    }, {
      "left" : "int[] quads",
      "right" : "int[] quads",
      "info" : "SingleVariableDeclaration[69428-69439]:SingleVariableDeclaration[70117-70128]"
    }, {
      "left" : "int qlen",
      "right" : "int qlen",
      "info" : "SingleVariableDeclaration[69441-69449]:SingleVariableDeclaration[70130-70138]"
    }, {
      "left" : "int lastQuadBytes",
      "right" : "int lastQuadBytes",
      "info" : "SingleVariableDeclaration[69451-69468]:SingleVariableDeclaration[70140-70157]"
    }, {
      "left" : "JsonParseException",
      "right" : "JsonParseException",
      "info" : "SimpleType[69485-69503]:SimpleType[70174-70192]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69508-73826]:Block[70197-74515]"
    }, {
      "left" : "int byteLen = (qlen << 2) - 4 + lastQuadBytes;",
      "right" : "int byteLen = (qlen << 2) - 4 + lastQuadBytes;",
      "info" : "VariableDeclarationStatement[69788-69834]:VariableDeclarationStatement[70477-70523]"
    }, {
      "left" : "int lastQuad;",
      "right" : "int lastQuad;",
      "info" : "VariableDeclarationStatement[70133-70146]:VariableDeclarationStatement[70822-70835]"
    }, {
      "left" : "if (lastQuadBytes < 4)",
      "right" : "if (lastQuadBytes < 4)",
      "info" : "IfStatement[70156-70379]:IfStatement[70845-71068]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70179-70336]:Block[70868-71025]"
    }, {
      "left" : "lastQuad = quads[qlen-1];",
      "right" : "lastQuad = quads[qlen-1];",
      "info" : "ExpressionStatement[70193-70218]:ExpressionStatement[70882-70907]"
    }, {
      "left" : "quads[qlen-1] = (lastQuad << ((4 - lastQuadBytes) << 3));",
      "right" : "quads[qlen-1] = (lastQuad << ((4 - lastQuadBytes) << 3));",
      "info" : "ExpressionStatement[70269-70326]:ExpressionStatement[70958-71015]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70342-70379]:Block[71031-71068]"
    }, {
      "left" : "lastQuad = 0;",
      "right" : "lastQuad = 0;",
      "info" : "ExpressionStatement[70356-70369]:ExpressionStatement[71045-71058]"
    }, {
      "left" : "char[] cbuf = _textBuffer.emptyAndGetCurrentSegment();",
      "right" : "char[] cbuf = _textBuffer.emptyAndGetCurrentSegment();",
      "info" : "VariableDeclarationStatement[70448-70502]:VariableDeclarationStatement[71137-71191]"
    }, {
      "left" : "int cix = 0;",
      "right" : "int cix = 0;",
      "info" : "VariableDeclarationStatement[70511-70523]:VariableDeclarationStatement[71200-71212]"
    }, {
      "left" : "for (int ix = 0; ix < byteLen)",
      "right" : "for (int ix = 0; ix < byteLen)",
      "info" : "ForStatement[70533-73507]:ForStatement[71222-74196]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70566-73507]:Block[71255-74196]"
    }, {
      "left" : "int ch = quads[ix >> 2];",
      "right" : "int ch = quads[ix >> 2];",
      "info" : "VariableDeclarationStatement[70580-70604]:VariableDeclarationStatement[71269-71293]"
    }, {
      "left" : "int byteIx = (ix & 3);",
      "right" : "int byteIx = (ix & 3);",
      "info" : "VariableDeclarationStatement[70653-70675]:VariableDeclarationStatement[71342-71364]"
    }, {
      "left" : "ch = (ch >> ((3 - byteIx) << 3)) & 0xFF;",
      "right" : "ch = (ch >> ((3 - byteIx) << 3)) & 0xFF;",
      "info" : "ExpressionStatement[70688-70728]:ExpressionStatement[71377-71417]"
    }, {
      "left" : "++ix;",
      "right" : "++ix;",
      "info" : "ExpressionStatement[70741-70746]:ExpressionStatement[71430-71435]"
    }, {
      "left" : "if (ch > 127)",
      "right" : "if (ch > 127)",
      "info" : "IfStatement[70760-73349]:IfStatement[71449-74038]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70774-73349]:Block[71463-74038]"
    }, {
      "left" : "int needed;",
      "right" : "int needed;",
      "info" : "VariableDeclarationStatement[70806-70817]:VariableDeclarationStatement[71495-71506]"
    }, {
      "left" : "if ((ch & 0xE0) == 0xC0)",
      "right" : "if ((ch & 0xE0) == 0xC0)",
      "info" : "IfStatement[70834-71461]:IfStatement[71523-72150]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70859-70971]:Block[71548-71660]"
    }, {
      "left" : "ch &= 0x1F;",
      "right" : "ch &= 0x1F;",
      "info" : "ExpressionStatement[70910-70921]:ExpressionStatement[71599-71610]"
    }, {
      "left" : "needed = 1;",
      "right" : "needed = 1;",
      "info" : "ExpressionStatement[70942-70953]:ExpressionStatement[71631-71642]"
    }, {
      "left" : "if ((ch & 0xF0) == 0xE0)",
      "right" : "if ((ch & 0xF0) == 0xE0)",
      "info" : "IfStatement[70977-71461]:IfStatement[71666-72150]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71002-71114]:Block[71691-71803]"
    }, {
      "left" : "ch &= 0x0F;",
      "right" : "ch &= 0x0F;",
      "info" : "ExpressionStatement[71053-71064]:ExpressionStatement[71742-71753]"
    }, {
      "left" : "needed = 2;",
      "right" : "needed = 2;",
      "info" : "ExpressionStatement[71085-71096]:ExpressionStatement[71774-71785]"
    }, {
      "left" : "if ((ch & 0xF8) == 0xF0)",
      "right" : "if ((ch & 0xF8) == 0xF0)",
      "info" : "IfStatement[71120-71461]:IfStatement[71809-72150]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71145-71279]:Block[71834-71968]"
    }, {
      "left" : "ch &= 0x07;",
      "right" : "ch &= 0x07;",
      "info" : "ExpressionStatement[71218-71229]:ExpressionStatement[71907-71918]"
    }, {
      "left" : "needed = 3;",
      "right" : "needed = 3;",
      "info" : "ExpressionStatement[71250-71261]:ExpressionStatement[71939-71950]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71285-71461]:Block[71974-72150]"
    }, {
      "left" : "_reportInvalidInitial(ch);",
      "right" : "_reportInvalidInitial(ch);",
      "info" : "ExpressionStatement[71350-71376]:ExpressionStatement[72039-72065]"
    }, {
      "left" : "needed = ch = 1;",
      "right" : "needed = ch = 1;",
      "info" : "ExpressionStatement[71397-71413]:ExpressionStatement[72086-72102]"
    }, {
      "left" : "if ((ix + needed) > byteLen)",
      "right" : "if ((ix + needed) > byteLen)",
      "info" : "IfStatement[71478-71583]:IfStatement[72167-72272]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71507-71583]:Block[72196-72272]"
    }, {
      "left" : "_reportInvalidEOF(\" in field name\");",
      "right" : "_reportInvalidEOF(\" in field name\");",
      "info" : "ExpressionStatement[71529-71565]:ExpressionStatement[72218-72254]"
    }, {
      "left" : "int ch2 = quads[ix >> 2];",
      "right" : "int ch2 = quads[ix >> 2];",
      "info" : "VariableDeclarationStatement[71671-71696]:VariableDeclarationStatement[72360-72385]"
    }, {
      "left" : "byteIx = (ix & 3);",
      "right" : "byteIx = (ix & 3);",
      "info" : "ExpressionStatement[71749-71767]:ExpressionStatement[72438-72456]"
    }, {
      "left" : "ch2 = (ch2 >> ((3 - byteIx) << 3));",
      "right" : "ch2 = (ch2 >> ((3 - byteIx) << 3));",
      "info" : "ExpressionStatement[71784-71819]:ExpressionStatement[72473-72508]"
    }, {
      "left" : "++ix;",
      "right" : "++ix;",
      "info" : "ExpressionStatement[71836-71841]:ExpressionStatement[72525-72530]"
    }, {
      "left" : "if ((ch2 & 0xC0) != 0x080)",
      "right" : "if ((ch2 & 0xC0) != 0x080)",
      "info" : "IfStatement[71875-71967]:IfStatement[72564-72656]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71902-71967]:Block[72591-72656]"
    }, {
      "left" : "_reportInvalidOther(ch2);",
      "right" : "_reportInvalidOther(ch2);",
      "info" : "ExpressionStatement[71924-71949]:ExpressionStatement[72613-72638]"
    }, {
      "left" : "ch = (ch << 6) | (ch2 & 0x3F);",
      "right" : "ch = (ch << 6) | (ch2 & 0x3F);",
      "info" : "ExpressionStatement[71984-72014]:ExpressionStatement[72673-72703]"
    }, {
      "left" : "if (needed > 1)",
      "right" : "if (needed > 1)",
      "info" : "IfStatement[72031-72896]:IfStatement[72720-73585]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72047-72896]:Block[72736-73585]"
    }, {
      "left" : "ch2 = quads[ix >> 2];",
      "right" : "ch2 = quads[ix >> 2];",
      "info" : "ExpressionStatement[72069-72090]:ExpressionStatement[72758-72779]"
    }, {
      "left" : "byteIx = (ix & 3);",
      "right" : "byteIx = (ix & 3);",
      "info" : "ExpressionStatement[72111-72129]:ExpressionStatement[72800-72818]"
    }, {
      "left" : "ch2 = (ch2 >> ((3 - byteIx) << 3));",
      "right" : "ch2 = (ch2 >> ((3 - byteIx) << 3));",
      "info" : "ExpressionStatement[72150-72185]:ExpressionStatement[72839-72874]"
    }, {
      "left" : "++ix;",
      "right" : "++ix;",
      "info" : "ExpressionStatement[72206-72211]:ExpressionStatement[72895-72900]"
    }, {
      "left" : "if ((ch2 & 0xC0) != 0x080)",
      "right" : "if ((ch2 & 0xC0) != 0x080)",
      "info" : "IfStatement[72253-72353]:IfStatement[72942-73042]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72280-72353]:Block[72969-73042]"
    }, {
      "left" : "_reportInvalidOther(ch2);",
      "right" : "_reportInvalidOther(ch2);",
      "info" : "ExpressionStatement[72306-72331]:ExpressionStatement[72995-73020]"
    }, {
      "left" : "ch = (ch << 6) | (ch2 & 0x3F);",
      "right" : "ch = (ch << 6) | (ch2 & 0x3F);",
      "info" : "ExpressionStatement[72374-72404]:ExpressionStatement[73063-73093]"
    }, {
      "left" : "if (needed > 2)",
      "right" : "if (needed > 2)",
      "info" : "IfStatement[72425-72878]:IfStatement[73114-73567]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72441-72878]:Block[73130-73567]"
    }, {
      "left" : "ch2 = quads[ix >> 2];",
      "right" : "ch2 = quads[ix >> 2];",
      "info" : "ExpressionStatement[72507-72528]:ExpressionStatement[73196-73217]"
    }, {
      "left" : "byteIx = (ix & 3);",
      "right" : "byteIx = (ix & 3);",
      "info" : "ExpressionStatement[72553-72571]:ExpressionStatement[73242-73260]"
    }, {
      "left" : "ch2 = (ch2 >> ((3 - byteIx) << 3));",
      "right" : "ch2 = (ch2 >> ((3 - byteIx) << 3));",
      "info" : "ExpressionStatement[72596-72631]:ExpressionStatement[73285-73320]"
    }, {
      "left" : "++ix;",
      "right" : "++ix;",
      "info" : "ExpressionStatement[72656-72661]:ExpressionStatement[73345-73350]"
    }, {
      "left" : "if ((ch2 & 0xC0) != 0x080)",
      "right" : "if ((ch2 & 0xC0) != 0x080)",
      "info" : "IfStatement[72686-72801]:IfStatement[73375-73490]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72713-72801]:Block[73402-73490]"
    }, {
      "left" : "_reportInvalidOther(ch2 & 0xFF);",
      "right" : "_reportInvalidOther(ch2 & 0xFF);",
      "info" : "ExpressionStatement[72743-72775]:ExpressionStatement[73432-73464]"
    }, {
      "left" : "ch = (ch << 6) | (ch2 & 0x3F);",
      "right" : "ch = (ch << 6) | (ch2 & 0x3F);",
      "info" : "ExpressionStatement[72826-72856]:ExpressionStatement[73515-73545]"
    }, {
      "left" : "if (needed > 2)",
      "right" : "if (needed > 2)",
      "info" : "IfStatement[72913-73335]:IfStatement[73602-74024]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72929-73335]:Block[73618-74024]"
    }, {
      "left" : "ch -= 0x10000;",
      "right" : "ch -= 0x10000;",
      "info" : "ExpressionStatement[73018-73032]:ExpressionStatement[73707-73721]"
    }, {
      "left" : "if (cix >= cbuf.length)",
      "right" : "if (cix >= cbuf.length)",
      "info" : "IfStatement[73090-73204]:IfStatement[73779-73893]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73114-73204]:Block[73803-73893]"
    }, {
      "left" : "cbuf = _textBuffer.expandCurrentSegment();",
      "right" : "cbuf = _textBuffer.expandCurrentSegment();",
      "info" : "ExpressionStatement[73140-73182]:ExpressionStatement[73829-73871]"
    }, {
      "left" : "cbuf[cix++] = (char) (0xD800 + (ch >> 10));",
      "right" : "cbuf[cix++] = (char) (0xD800 + (ch >> 10));",
      "info" : "ExpressionStatement[73225-73268]:ExpressionStatement[73914-73957]"
    }, {
      "left" : "ch = 0xDC00 | (ch & 0x03FF);",
      "right" : "ch = 0xDC00 | (ch & 0x03FF);",
      "info" : "ExpressionStatement[73289-73317]:ExpressionStatement[73978-74006]"
    }, {
      "left" : "if (cix >= cbuf.length)",
      "right" : "if (cix >= cbuf.length)",
      "info" : "IfStatement[73362-73460]:IfStatement[74051-74149]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73386-73460]:Block[74075-74149]"
    }, {
      "left" : "cbuf = _textBuffer.expandCurrentSegment();",
      "right" : "cbuf = _textBuffer.expandCurrentSegment();",
      "info" : "ExpressionStatement[73404-73446]:ExpressionStatement[74093-74135]"
    }, {
      "left" : "cbuf[cix++] = (char) ch;",
      "right" : "cbuf[cix++] = (char) ch;",
      "info" : "ExpressionStatement[73473-73497]:ExpressionStatement[74162-74186]"
    }, {
      "left" : "String baseName = new String(cbuf, 0, cix);",
      "right" : "String baseName = new String(cbuf, 0, cix);",
      "info" : "VariableDeclarationStatement[73594-73637]:VariableDeclarationStatement[74283-74326]"
    }, {
      "left" : "if (lastQuadBytes < 4)",
      "right" : "if (lastQuadBytes < 4)",
      "info" : "IfStatement[73692-73764]:IfStatement[74381-74453]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73715-73764]:Block[74404-74453]"
    }, {
      "left" : "quads[qlen-1] = lastQuad;",
      "right" : "quads[qlen-1] = lastQuad;",
      "info" : "ExpressionStatement[73729-73754]:ExpressionStatement[74418-74443]"
    }, {
      "left" : "return _symbols.addName(baseName, quads, qlen);",
      "right" : "return _symbols.addName(baseName, quads, qlen);",
      "info" : "ReturnStatement[73773-73820]:ReturnStatement[74462-74509]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[74022-74031]:MarkerAnnotation[74711-74720]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[74036-74045]:Modifier[74725-74734]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[74046-74050]:PrimitiveType[74735-74739]"
    }, {
      "left" : "_finishString",
      "right" : "_finishString",
      "info" : "SimpleName[74051-74064]:SimpleName[74740-74753]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[74074-74085]:SimpleType[74763-74774]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74090-75043]:Block[74779-75732]"
    }, {
      "left" : "int ptr = _inputPtr;",
      "right" : "int ptr = _inputPtr;",
      "info" : "VariableDeclarationStatement[74203-74223]:VariableDeclarationStatement[74892-74912]"
    }, {
      "left" : "if (ptr >= _inputEnd)",
      "right" : "if (ptr >= _inputEnd)",
      "info" : "IfStatement[74232-74328]:IfStatement[74921-75017]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74254-74328]:Block[74943-75017]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[74268-74289]:ExpressionStatement[74957-74978]"
    }, {
      "left" : "ptr = _inputPtr;",
      "right" : "ptr = _inputPtr;",
      "info" : "ExpressionStatement[74302-74318]:ExpressionStatement[74991-75007]"
    }, {
      "left" : "int outPtr = 0;",
      "right" : "int outPtr = 0;",
      "info" : "VariableDeclarationStatement[74337-74352]:VariableDeclarationStatement[75026-75041]"
    }, {
      "left" : "char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();",
      "right" : "char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();",
      "info" : "VariableDeclarationStatement[74361-74417]:VariableDeclarationStatement[75050-75106]"
    }, {
      "left" : "final int[] codes = _icUTF8;",
      "right" : "final int[] codes = _icUTF8;",
      "info" : "VariableDeclarationStatement[74426-74454]:VariableDeclarationStatement[75115-75143]"
    }, {
      "left" : "final int max = Math.min(_inputEnd, (ptr + outBuf.length));",
      "right" : "final int max = Math.min(_inputEnd, (ptr + outBuf.length));",
      "info" : "VariableDeclarationStatement[74464-74523]:VariableDeclarationStatement[75153-75212]"
    }, {
      "left" : "final byte[] inputBuffer = _inputBuffer;",
      "right" : "final byte[] inputBuffer = _inputBuffer;",
      "info" : "VariableDeclarationStatement[74532-74572]:VariableDeclarationStatement[75221-75261]"
    }, {
      "left" : "while (ptr < max)",
      "right" : "while (ptr < max)",
      "info" : "WhileStatement[74581-74972]:WhileStatement[75270-75661]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74599-74972]:Block[75288-75661]"
    }, {
      "left" : "int c = (int) inputBuffer[ptr] & 0xFF;",
      "right" : "int c = (int) inputBuffer[ptr] & 0xFF;",
      "info" : "VariableDeclarationStatement[74613-74651]:VariableDeclarationStatement[75302-75340]"
    }, {
      "left" : "if (codes[c] != 0)",
      "right" : "if (codes[c] != 0)",
      "info" : "IfStatement[74664-74902]:IfStatement[75353-75591]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74683-74902]:Block[75372-75591]"
    }, {
      "left" : "if (c == INT_QUOTE)",
      "right" : "if (c == INT_QUOTE)",
      "info" : "IfStatement[74701-74865]:IfStatement[75390-75554]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74721-74865]:Block[75410-75554]"
    }, {
      "left" : "_inputPtr = ptr+1;",
      "right" : "_inputPtr = ptr+1;",
      "info" : "ExpressionStatement[74743-74761]:ExpressionStatement[75432-75450]"
    }, {
      "left" : "_textBuffer.setCurrentLength(outPtr);",
      "right" : "_textBuffer.setCurrentLength(outPtr);",
      "info" : "ExpressionStatement[74782-74819]:ExpressionStatement[75471-75508]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[74840-74847]:ReturnStatement[75529-75536]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[74882-74888]:BreakStatement[75571-75577]"
    }, {
      "left" : "++ptr;",
      "right" : "++ptr;",
      "info" : "ExpressionStatement[74915-74921]:ExpressionStatement[75604-75610]"
    }, {
      "left" : "outBuf[outPtr++] = (char) c;",
      "right" : "outBuf[outPtr++] = (char) c;",
      "info" : "ExpressionStatement[74934-74962]:ExpressionStatement[75623-75651]"
    }, {
      "left" : "_inputPtr = ptr;",
      "right" : "_inputPtr = ptr;",
      "info" : "ExpressionStatement[74981-74997]:ExpressionStatement[75670-75686]"
    }, {
      "left" : "_finishString2(outBuf, outPtr);",
      "right" : "_finishString2(outBuf, outPtr);",
      "info" : "ExpressionStatement[75006-75037]:ExpressionStatement[75695-75726]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[75049-75056]:Modifier[75738-75745]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[75057-75061]:PrimitiveType[75746-75750]"
    }, {
      "left" : "_finishString2",
      "right" : "_finishString2",
      "info" : "SimpleName[75062-75076]:SimpleName[75751-75765]"
    }, {
      "left" : "char[] outBuf",
      "right" : "char[] outBuf",
      "info" : "SingleVariableDeclaration[75077-75090]:SingleVariableDeclaration[75766-75779]"
    }, {
      "left" : "int outPtr",
      "right" : "int outPtr",
      "info" : "SingleVariableDeclaration[75092-75102]:SingleVariableDeclaration[75781-75791]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[75119-75130]:SimpleType[75808-75819]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75135-77958]:Block[75824-78647]"
    }, {
      "left" : "int c;",
      "right" : "int c;",
      "info" : "VariableDeclarationStatement[75145-75151]:VariableDeclarationStatement[75834-75840]"
    }, {
      "left" : "final int[] codes = _icUTF8;",
      "right" : "final int[] codes = _icUTF8;",
      "info" : "VariableDeclarationStatement[75216-75244]:VariableDeclarationStatement[75905-75933]"
    }, {
      "left" : "final byte[] inputBuffer = _inputBuffer;",
      "right" : "final byte[] inputBuffer = _inputBuffer;",
      "info" : "VariableDeclarationStatement[75253-75293]:VariableDeclarationStatement[75942-75982]"
    }, {
      "left" : "main_loop:\n        while (true) {\n            // Then the tight ASCII non-funny-char loop:\n            ascii_loop:\n            while (true) {\n                int ptr = _inputPtr;\n                if (ptr >= _inputEnd) {\n                    loadMoreGuaranteed();\n                    ptr = _inputPtr;\n                }\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                final int max = Math.min(_inputEnd, (ptr + (outBuf.length - outPtr)));\n                while (ptr < max) {\n                    c = (int) inputBuffer[ptr++] & 0xFF;\n                    if (codes[c] != 0) {\n                        _inputPtr = ptr;\n                        break ascii_loop;\n                    }\n                    outBuf[outPtr++] = (char) c;\n                }\n                _inputPtr = ptr;\n            }\n            // Ok: end marker, escape or multi-byte?\n            if (c == INT_QUOTE) {\n                break main_loop;\n            }\n\n            switch (codes[c]) {\n            case 1: // backslash\n                c = _decodeEscaped();\n                break;\n            case 2: // 2-byte UTF\n                c = _decodeUtf8_2(c);\n                break;\n            case 3: // 3-byte UTF\n                if ((_inputEnd - _inputPtr) >= 2) {\n                    c = _decodeUtf8_3fast(c);\n                } else {\n                    c = _decodeUtf8_3(c);\n                }\n                break;\n            case 4: // 4-byte UTF\n                c = _decodeUtf8_4(c);\n                // Let's add first part right away:\n                outBuf[outPtr++] = (char) (0xD800 | (c >> 10));\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                c = 0xDC00 | (c & 0x3FF);\n                // And let the other char output down below\n                break;\n            default:\n                if (c < INT_SPACE) {\n                    // As per [JACKSON-208], call can now return:\n                    _throwUnquotedSpace(c, \"string value\");\n                } else {\n                    // Is this good enough error message?\n                    _reportInvalidChar(c);\n                }\n            }\n            // Need more room?\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            // Ok, let's add char to output:\n            outBuf[outPtr++] = (char) c;\n        }",
      "right" : "main_loop:\n        while (true) {\n            // Then the tight ASCII non-funny-char loop:\n            ascii_loop:\n            while (true) {\n                int ptr = _inputPtr;\n                if (ptr >= _inputEnd) {\n                    loadMoreGuaranteed();\n                    ptr = _inputPtr;\n                }\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                final int max = Math.min(_inputEnd, (ptr + (outBuf.length - outPtr)));\n                while (ptr < max) {\n                    c = (int) inputBuffer[ptr++] & 0xFF;\n                    if (codes[c] != 0) {\n                        _inputPtr = ptr;\n                        break ascii_loop;\n                    }\n                    outBuf[outPtr++] = (char) c;\n                }\n                _inputPtr = ptr;\n            }\n            // Ok: end marker, escape or multi-byte?\n            if (c == INT_QUOTE) {\n                break main_loop;\n            }\n\n            switch (codes[c]) {\n            case 1: // backslash\n                c = _decodeEscaped();\n                break;\n            case 2: // 2-byte UTF\n                c = _decodeUtf8_2(c);\n                break;\n            case 3: // 3-byte UTF\n                if ((_inputEnd - _inputPtr) >= 2) {\n                    c = _decodeUtf8_3fast(c);\n                } else {\n                    c = _decodeUtf8_3(c);\n                }\n                break;\n            case 4: // 4-byte UTF\n                c = _decodeUtf8_4(c);\n                // Let's add first part right away:\n                outBuf[outPtr++] = (char) (0xD800 | (c >> 10));\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                c = 0xDC00 | (c & 0x3FF);\n                // And let the other char output down below\n                break;\n            default:\n                if (c < INT_SPACE) {\n                    // As per [JACKSON-208], call can now return:\n                    _throwUnquotedSpace(c, \"string value\");\n                } else {\n                    // Is this good enough error message?\n                    _reportInvalidChar(c);\n                }\n            }\n            // Need more room?\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            // Ok, let's add char to output:\n            outBuf[outPtr++] = (char) c;\n        }",
      "info" : "LabeledStatement[75303-77906]:LabeledStatement[75992-78595]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[75322-77906]:WhileStatement[76011-78595]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75335-77906]:Block[76024-78595]"
    }, {
      "left" : "ascii_loop:\n            while (true) {\n                int ptr = _inputPtr;\n                if (ptr >= _inputEnd) {\n                    loadMoreGuaranteed();\n                    ptr = _inputPtr;\n                }\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                final int max = Math.min(_inputEnd, (ptr + (outBuf.length - outPtr)));\n                while (ptr < max) {\n                    c = (int) inputBuffer[ptr++] & 0xFF;\n                    if (codes[c] != 0) {\n                        _inputPtr = ptr;\n                        break ascii_loop;\n                    }\n                    outBuf[outPtr++] = (char) c;\n                }\n                _inputPtr = ptr;\n            }",
      "right" : "ascii_loop:\n            while (true) {\n                int ptr = _inputPtr;\n                if (ptr >= _inputEnd) {\n                    loadMoreGuaranteed();\n                    ptr = _inputPtr;\n                }\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                final int max = Math.min(_inputEnd, (ptr + (outBuf.length - outPtr)));\n                while (ptr < max) {\n                    c = (int) inputBuffer[ptr++] & 0xFF;\n                    if (codes[c] != 0) {\n                        _inputPtr = ptr;\n                        break ascii_loop;\n                    }\n                    outBuf[outPtr++] = (char) c;\n                }\n                _inputPtr = ptr;\n            }",
      "info" : "LabeledStatement[75406-76220]:LabeledStatement[76095-76909]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[75430-76220]:WhileStatement[76119-76909]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75443-76220]:Block[76132-76909]"
    }, {
      "left" : "int ptr = _inputPtr;",
      "right" : "int ptr = _inputPtr;",
      "info" : "VariableDeclarationStatement[75461-75481]:VariableDeclarationStatement[76150-76170]"
    }, {
      "left" : "if (ptr >= _inputEnd)",
      "right" : "if (ptr >= _inputEnd)",
      "info" : "IfStatement[75498-75618]:IfStatement[76187-76307]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75520-75618]:Block[76209-76307]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[75542-75563]:ExpressionStatement[76231-76252]"
    }, {
      "left" : "ptr = _inputPtr;",
      "right" : "ptr = _inputPtr;",
      "info" : "ExpressionStatement[75584-75600]:ExpressionStatement[76273-76289]"
    }, {
      "left" : "if (outPtr >= outBuf.length)",
      "right" : "if (outPtr >= outBuf.length)",
      "info" : "IfStatement[75635-75780]:IfStatement[76324-76469]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75664-75780]:Block[76353-76469]"
    }, {
      "left" : "outBuf = _textBuffer.finishCurrentSegment();",
      "right" : "outBuf = _textBuffer.finishCurrentSegment();",
      "info" : "ExpressionStatement[75686-75730]:ExpressionStatement[76375-76419]"
    }, {
      "left" : "outPtr = 0;",
      "right" : "outPtr = 0;",
      "info" : "ExpressionStatement[75751-75762]:ExpressionStatement[76440-76451]"
    }, {
      "left" : "final int max = Math.min(_inputEnd, (ptr + (outBuf.length - outPtr)));",
      "right" : "final int max = Math.min(_inputEnd, (ptr + (outBuf.length - outPtr)));",
      "info" : "VariableDeclarationStatement[75797-75867]:VariableDeclarationStatement[76486-76556]"
    }, {
      "left" : "while (ptr < max)",
      "right" : "while (ptr < max)",
      "info" : "WhileStatement[75884-76173]:WhileStatement[76573-76862]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75902-76173]:Block[76591-76862]"
    }, {
      "left" : "c = (int) inputBuffer[ptr++] & 0xFF;",
      "right" : "c = (int) inputBuffer[ptr++] & 0xFF;",
      "info" : "ExpressionStatement[75924-75960]:ExpressionStatement[76613-76649]"
    }, {
      "left" : "if (codes[c] != 0)",
      "right" : "if (codes[c] != 0)",
      "info" : "IfStatement[75981-76106]:IfStatement[76670-76795]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76000-76106]:Block[76689-76795]"
    }, {
      "left" : "_inputPtr = ptr;",
      "right" : "_inputPtr = ptr;",
      "info" : "ExpressionStatement[76026-76042]:ExpressionStatement[76715-76731]"
    }, {
      "left" : "break ascii_loop;",
      "right" : "break ascii_loop;",
      "info" : "BreakStatement[76067-76084]:BreakStatement[76756-76773]"
    }, {
      "left" : "outBuf[outPtr++] = (char) c;",
      "right" : "outBuf[outPtr++] = (char) c;",
      "info" : "ExpressionStatement[76127-76155]:ExpressionStatement[76816-76844]"
    }, {
      "left" : "_inputPtr = ptr;",
      "right" : "_inputPtr = ptr;",
      "info" : "ExpressionStatement[76190-76206]:ExpressionStatement[76879-76895]"
    }, {
      "left" : "if (c == INT_QUOTE)",
      "right" : "if (c == INT_QUOTE)",
      "info" : "IfStatement[76286-76354]:IfStatement[76975-77043]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76306-76354]:Block[76995-77043]"
    }, {
      "left" : "break main_loop;",
      "right" : "break main_loop;",
      "info" : "BreakStatement[76324-76340]:BreakStatement[77013-77029]"
    }, {
      "left" : "switch (codes[c]) {\n            case 1: // backslash\n                c = _decodeEscaped();\n                break;\n            case 2: // 2-byte UTF\n                c = _decodeUtf8_2(c);\n                break;\n            case 3: // 3-byte UTF\n                if ((_inputEnd - _inputPtr) >= 2) {\n                    c = _decodeUtf8_3fast(c);\n                } else {\n                    c = _decodeUtf8_3(c);\n                }\n                break;\n            case 4: // 4-byte UTF\n                c = _decodeUtf8_4(c);\n                // Let's add first part right away:\n                outBuf[outPtr++] = (char) (0xD800 | (c >> 10));\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                c = 0xDC00 | (c & 0x3FF);\n                // And let the other char output down below\n                break;\n            default:\n                if (c < INT_SPACE) {\n                    // As per [JACKSON-208], call can now return:\n                    _throwUnquotedSpace(c, \"string value\");\n                } else {\n                    // Is this good enough error message?\n                    _reportInvalidChar(c);\n                }\n            }",
      "right" : "switch (codes[c]) {\n            case 1: // backslash\n                c = _decodeEscaped();\n                break;\n            case 2: // 2-byte UTF\n                c = _decodeUtf8_2(c);\n                break;\n            case 3: // 3-byte UTF\n                if ((_inputEnd - _inputPtr) >= 2) {\n                    c = _decodeUtf8_3fast(c);\n                } else {\n                    c = _decodeUtf8_3(c);\n                }\n                break;\n            case 4: // 4-byte UTF\n                c = _decodeUtf8_4(c);\n                // Let's add first part right away:\n                outBuf[outPtr++] = (char) (0xD800 | (c >> 10));\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                c = 0xDC00 | (c & 0x3FF);\n                // And let the other char output down below\n                break;\n            default:\n                if (c < INT_SPACE) {\n                    // As per [JACKSON-208], call can now return:\n                    _throwUnquotedSpace(c, \"string value\");\n                } else {\n                    // Is this good enough error message?\n                    _reportInvalidChar(c);\n                }\n            }",
      "info" : "SwitchStatement[76368-77633]:SwitchStatement[77057-78322]"
    }, {
      "left" : "case 1:",
      "right" : "case 1:",
      "info" : "SwitchCase[76400-76407]:SwitchCase[77089-77096]"
    }, {
      "left" : "c = _decodeEscaped();",
      "right" : "c = _decodeEscaped();",
      "info" : "ExpressionStatement[76437-76458]:ExpressionStatement[77126-77147]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[76475-76481]:BreakStatement[77164-77170]"
    }, {
      "left" : "case 2:",
      "right" : "case 2:",
      "info" : "SwitchCase[76494-76501]:SwitchCase[77183-77190]"
    }, {
      "left" : "c = _decodeUtf8_2(c);",
      "right" : "c = _decodeUtf8_2(c);",
      "info" : "ExpressionStatement[76532-76553]:ExpressionStatement[77221-77242]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[76570-76576]:BreakStatement[77259-77265]"
    }, {
      "left" : "case 3:",
      "right" : "case 3:",
      "info" : "SwitchCase[76589-76596]:SwitchCase[77278-77285]"
    }, {
      "left" : "if ((_inputEnd - _inputPtr) >= 2)",
      "right" : "if ((_inputEnd - _inputPtr) >= 2)",
      "info" : "IfStatement[76627-76793]:IfStatement[77316-77482]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76661-76726]:Block[77350-77415]"
    }, {
      "left" : "c = _decodeUtf8_3fast(c);",
      "right" : "c = _decodeUtf8_3fast(c);",
      "info" : "ExpressionStatement[76683-76708]:ExpressionStatement[77372-77397]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76732-76793]:Block[77421-77482]"
    }, {
      "left" : "c = _decodeUtf8_3(c);",
      "right" : "c = _decodeUtf8_3(c);",
      "info" : "ExpressionStatement[76754-76775]:ExpressionStatement[77443-77464]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[76810-76816]:BreakStatement[77499-77505]"
    }, {
      "left" : "case 4:",
      "right" : "case 4:",
      "info" : "SwitchCase[76829-76836]:SwitchCase[77518-77525]"
    }, {
      "left" : "c = _decodeUtf8_4(c);",
      "right" : "c = _decodeUtf8_4(c);",
      "info" : "ExpressionStatement[76867-76888]:ExpressionStatement[77556-77577]"
    }, {
      "left" : "outBuf[outPtr++] = (char) (0xD800 | (c >> 10));",
      "right" : "outBuf[outPtr++] = (char) (0xD800 | (c >> 10));",
      "info" : "ExpressionStatement[76957-77004]:ExpressionStatement[77646-77693]"
    }, {
      "left" : "if (outPtr >= outBuf.length)",
      "right" : "if (outPtr >= outBuf.length)",
      "info" : "IfStatement[77021-77166]:IfStatement[77710-77855]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77050-77166]:Block[77739-77855]"
    }, {
      "left" : "outBuf = _textBuffer.finishCurrentSegment();",
      "right" : "outBuf = _textBuffer.finishCurrentSegment();",
      "info" : "ExpressionStatement[77072-77116]:ExpressionStatement[77761-77805]"
    }, {
      "left" : "outPtr = 0;",
      "right" : "outPtr = 0;",
      "info" : "ExpressionStatement[77137-77148]:ExpressionStatement[77826-77837]"
    }, {
      "left" : "c = 0xDC00 | (c & 0x3FF);",
      "right" : "c = 0xDC00 | (c & 0x3FF);",
      "info" : "ExpressionStatement[77183-77208]:ExpressionStatement[77872-77897]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[77285-77291]:BreakStatement[77974-77980]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[77304-77312]:SwitchCase[77993-78001]"
    }, {
      "left" : "if (c < INT_SPACE)",
      "right" : "if (c < INT_SPACE)",
      "info" : "IfStatement[77329-77619]:IfStatement[78018-78308]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77348-77493]:Block[78037-78182]"
    }, {
      "left" : "_throwUnquotedSpace(c, \"string value\");",
      "right" : "_throwUnquotedSpace(c, \"string value\");",
      "info" : "ExpressionStatement[77436-77475]:ExpressionStatement[78125-78164]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77499-77619]:Block[78188-78308]"
    }, {
      "left" : "_reportInvalidChar(c);",
      "right" : "_reportInvalidChar(c);",
      "info" : "ExpressionStatement[77579-77601]:ExpressionStatement[78268-78290]"
    }, {
      "left" : "if (outPtr >= outBuf.length)",
      "right" : "if (outPtr >= outBuf.length)",
      "info" : "IfStatement[77677-77810]:IfStatement[78366-78499]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77706-77810]:Block[78395-78499]"
    }, {
      "left" : "outBuf = _textBuffer.finishCurrentSegment();",
      "right" : "outBuf = _textBuffer.finishCurrentSegment();",
      "info" : "ExpressionStatement[77724-77768]:ExpressionStatement[78413-78457]"
    }, {
      "left" : "outPtr = 0;",
      "right" : "outPtr = 0;",
      "info" : "ExpressionStatement[77785-77796]:ExpressionStatement[78474-78485]"
    }, {
      "left" : "outBuf[outPtr++] = (char) c;",
      "right" : "outBuf[outPtr++] = (char) c;",
      "info" : "ExpressionStatement[77868-77896]:ExpressionStatement[78557-78585]"
    }, {
      "left" : "_textBuffer.setCurrentLength(outPtr);",
      "right" : "_textBuffer.setCurrentLength(outPtr);",
      "info" : "ExpressionStatement[77915-77952]:ExpressionStatement[78604-78641]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[78161-78170]:Modifier[78850-78859]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[78171-78175]:PrimitiveType[78860-78864]"
    }, {
      "left" : "_skipString",
      "right" : "_skipString",
      "info" : "SimpleName[78176-78187]:SimpleName[78865-78876]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[78197-78208]:SimpleType[78886-78897]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78213-79935]:Block[78902-80624]"
    }, {
      "left" : "_tokenIncomplete = false;",
      "right" : "_tokenIncomplete = false;",
      "info" : "ExpressionStatement[78223-78248]:ExpressionStatement[78912-78937]"
    }, {
      "left" : "final int[] codes = _icUTF8;",
      "right" : "final int[] codes = _icUTF8;",
      "info" : "VariableDeclarationStatement[78304-78332]:VariableDeclarationStatement[78993-79021]"
    }, {
      "left" : "final byte[] inputBuffer = _inputBuffer;",
      "right" : "final byte[] inputBuffer = _inputBuffer;",
      "info" : "VariableDeclarationStatement[78341-78381]:VariableDeclarationStatement[79030-79070]"
    }, {
      "left" : "main_loop:\n        while (true) {\n            int c;\n\n            ascii_loop:\n            while (true) {\n                int ptr = _inputPtr;\n                int max = _inputEnd;\n                if (ptr >= max) {\n                    loadMoreGuaranteed();\n                    ptr = _inputPtr;\n                    max = _inputEnd;\n                }\n                while (ptr < max) {\n                    c = (int) inputBuffer[ptr++] & 0xFF;\n                    if (codes[c] != 0) {\n                        _inputPtr = ptr;\n                        break ascii_loop;\n                    }\n                }\n                _inputPtr = ptr;\n            }\n            // Ok: end marker, escape or multi-byte?\n            if (c == INT_QUOTE) {\n                break main_loop;\n            }\n            \n            switch (codes[c]) {\n            case 1: // backslash\n                _decodeEscaped();\n                break;\n            case 2: // 2-byte UTF\n                _skipUtf8_2(c);\n                break;\n            case 3: // 3-byte UTF\n                _skipUtf8_3(c);\n                break;\n            case 4: // 4-byte UTF\n                _skipUtf8_4(c);\n                break;\n            default:\n                if (c < INT_SPACE) {\n                    // As per [JACKSON-208], call can now return:\n                    _throwUnquotedSpace(c, \"string value\");\n                } else {\n                    // Is this good enough error message?\n                    _reportInvalidChar(c);\n                }\n            }\n        }",
      "right" : "main_loop:\n        while (true) {\n            int c;\n\n            ascii_loop:\n            while (true) {\n                int ptr = _inputPtr;\n                int max = _inputEnd;\n                if (ptr >= max) {\n                    loadMoreGuaranteed();\n                    ptr = _inputPtr;\n                    max = _inputEnd;\n                }\n                while (ptr < max) {\n                    c = (int) inputBuffer[ptr++] & 0xFF;\n                    if (codes[c] != 0) {\n                        _inputPtr = ptr;\n                        break ascii_loop;\n                    }\n                }\n                _inputPtr = ptr;\n            }\n            // Ok: end marker, escape or multi-byte?\n            if (c == INT_QUOTE) {\n                break main_loop;\n            }\n            \n            switch (codes[c]) {\n            case 1: // backslash\n                _decodeEscaped();\n                break;\n            case 2: // 2-byte UTF\n                _skipUtf8_2(c);\n                break;\n            case 3: // 3-byte UTF\n                _skipUtf8_3(c);\n                break;\n            case 4: // 4-byte UTF\n                _skipUtf8_4(c);\n                break;\n            default:\n                if (c < INT_SPACE) {\n                    // As per [JACKSON-208], call can now return:\n                    _throwUnquotedSpace(c, \"string value\");\n                } else {\n                    // Is this good enough error message?\n                    _reportInvalidChar(c);\n                }\n            }\n        }",
      "info" : "LabeledStatement[78391-79929]:LabeledStatement[79080-80618]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[78410-79929]:WhileStatement[79099-80618]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78423-79929]:Block[79112-80618]"
    }, {
      "left" : "int c;",
      "right" : "int c;",
      "info" : "VariableDeclarationStatement[78437-78443]:VariableDeclarationStatement[79126-79132]"
    }, {
      "left" : "ascii_loop:\n            while (true) {\n                int ptr = _inputPtr;\n                int max = _inputEnd;\n                if (ptr >= max) {\n                    loadMoreGuaranteed();\n                    ptr = _inputPtr;\n                    max = _inputEnd;\n                }\n                while (ptr < max) {\n                    c = (int) inputBuffer[ptr++] & 0xFF;\n                    if (codes[c] != 0) {\n                        _inputPtr = ptr;\n                        break ascii_loop;\n                    }\n                }\n                _inputPtr = ptr;\n            }",
      "right" : "ascii_loop:\n            while (true) {\n                int ptr = _inputPtr;\n                int max = _inputEnd;\n                if (ptr >= max) {\n                    loadMoreGuaranteed();\n                    ptr = _inputPtr;\n                    max = _inputEnd;\n                }\n                while (ptr < max) {\n                    c = (int) inputBuffer[ptr++] & 0xFF;\n                    if (codes[c] != 0) {\n                        _inputPtr = ptr;\n                        break ascii_loop;\n                    }\n                }\n                _inputPtr = ptr;\n            }",
      "info" : "LabeledStatement[78457-79041]:LabeledStatement[79146-79730]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[78481-79041]:WhileStatement[79170-79730]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78494-79041]:Block[79183-79730]"
    }, {
      "left" : "int ptr = _inputPtr;",
      "right" : "int ptr = _inputPtr;",
      "info" : "VariableDeclarationStatement[78512-78532]:VariableDeclarationStatement[79201-79221]"
    }, {
      "left" : "int max = _inputEnd;",
      "right" : "int max = _inputEnd;",
      "info" : "VariableDeclarationStatement[78549-78569]:VariableDeclarationStatement[79238-79258]"
    }, {
      "left" : "if (ptr >= max)",
      "right" : "if (ptr >= max)",
      "info" : "IfStatement[78586-78737]:IfStatement[79275-79426]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78602-78737]:Block[79291-79426]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[78624-78645]:ExpressionStatement[79313-79334]"
    }, {
      "left" : "ptr = _inputPtr;",
      "right" : "ptr = _inputPtr;",
      "info" : "ExpressionStatement[78666-78682]:ExpressionStatement[79355-79371]"
    }, {
      "left" : "max = _inputEnd;",
      "right" : "max = _inputEnd;",
      "info" : "ExpressionStatement[78703-78719]:ExpressionStatement[79392-79408]"
    }, {
      "left" : "while (ptr < max)",
      "right" : "while (ptr < max)",
      "info" : "WhileStatement[78754-78994]:WhileStatement[79443-79683]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78772-78994]:Block[79461-79683]"
    }, {
      "left" : "c = (int) inputBuffer[ptr++] & 0xFF;",
      "right" : "c = (int) inputBuffer[ptr++] & 0xFF;",
      "info" : "ExpressionStatement[78794-78830]:ExpressionStatement[79483-79519]"
    }, {
      "left" : "if (codes[c] != 0)",
      "right" : "if (codes[c] != 0)",
      "info" : "IfStatement[78851-78976]:IfStatement[79540-79665]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78870-78976]:Block[79559-79665]"
    }, {
      "left" : "_inputPtr = ptr;",
      "right" : "_inputPtr = ptr;",
      "info" : "ExpressionStatement[78896-78912]:ExpressionStatement[79585-79601]"
    }, {
      "left" : "break ascii_loop;",
      "right" : "break ascii_loop;",
      "info" : "BreakStatement[78937-78954]:BreakStatement[79626-79643]"
    }, {
      "left" : "_inputPtr = ptr;",
      "right" : "_inputPtr = ptr;",
      "info" : "ExpressionStatement[79011-79027]:ExpressionStatement[79700-79716]"
    }, {
      "left" : "if (c == INT_QUOTE)",
      "right" : "if (c == INT_QUOTE)",
      "info" : "IfStatement[79107-79175]:IfStatement[79796-79864]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79127-79175]:Block[79816-79864]"
    }, {
      "left" : "break main_loop;",
      "right" : "break main_loop;",
      "info" : "BreakStatement[79145-79161]:BreakStatement[79834-79850]"
    }, {
      "left" : "switch (codes[c]) {\n            case 1: // backslash\n                _decodeEscaped();\n                break;\n            case 2: // 2-byte UTF\n                _skipUtf8_2(c);\n                break;\n            case 3: // 3-byte UTF\n                _skipUtf8_3(c);\n                break;\n            case 4: // 4-byte UTF\n                _skipUtf8_4(c);\n                break;\n            default:\n                if (c < INT_SPACE) {\n                    // As per [JACKSON-208], call can now return:\n                    _throwUnquotedSpace(c, \"string value\");\n                } else {\n                    // Is this good enough error message?\n                    _reportInvalidChar(c);\n                }\n            }",
      "right" : "switch (codes[c]) {\n            case 1: // backslash\n                _decodeEscaped();\n                break;\n            case 2: // 2-byte UTF\n                _skipUtf8_2(c);\n                break;\n            case 3: // 3-byte UTF\n                _skipUtf8_3(c);\n                break;\n            case 4: // 4-byte UTF\n                _skipUtf8_4(c);\n                break;\n            default:\n                if (c < INT_SPACE) {\n                    // As per [JACKSON-208], call can now return:\n                    _throwUnquotedSpace(c, \"string value\");\n                } else {\n                    // Is this good enough error message?\n                    _reportInvalidChar(c);\n                }\n            }",
      "info" : "SwitchStatement[79201-79919]:SwitchStatement[79890-80608]"
    }, {
      "left" : "case 1:",
      "right" : "case 1:",
      "info" : "SwitchCase[79233-79240]:SwitchCase[79922-79929]"
    }, {
      "left" : "_decodeEscaped();",
      "right" : "_decodeEscaped();",
      "info" : "ExpressionStatement[79270-79287]:ExpressionStatement[79959-79976]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[79304-79310]:BreakStatement[79993-79999]"
    }, {
      "left" : "case 2:",
      "right" : "case 2:",
      "info" : "SwitchCase[79323-79330]:SwitchCase[80012-80019]"
    }, {
      "left" : "_skipUtf8_2(c);",
      "right" : "_skipUtf8_2(c);",
      "info" : "ExpressionStatement[79361-79376]:ExpressionStatement[80050-80065]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[79393-79399]:BreakStatement[80082-80088]"
    }, {
      "left" : "case 3:",
      "right" : "case 3:",
      "info" : "SwitchCase[79412-79419]:SwitchCase[80101-80108]"
    }, {
      "left" : "_skipUtf8_3(c);",
      "right" : "_skipUtf8_3(c);",
      "info" : "ExpressionStatement[79450-79465]:ExpressionStatement[80139-80154]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[79482-79488]:BreakStatement[80171-80177]"
    }, {
      "left" : "case 4:",
      "right" : "case 4:",
      "info" : "SwitchCase[79501-79508]:SwitchCase[80190-80197]"
    }, {
      "left" : "_skipUtf8_4(c);",
      "right" : "_skipUtf8_4(c);",
      "info" : "ExpressionStatement[79539-79554]:ExpressionStatement[80228-80243]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[79571-79577]:BreakStatement[80260-80266]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[79590-79598]:SwitchCase[80279-80287]"
    }, {
      "left" : "if (c < INT_SPACE)",
      "right" : "if (c < INT_SPACE)",
      "info" : "IfStatement[79615-79905]:IfStatement[80304-80594]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79634-79779]:Block[80323-80468]"
    }, {
      "left" : "_throwUnquotedSpace(c, \"string value\");",
      "right" : "_throwUnquotedSpace(c, \"string value\");",
      "info" : "ExpressionStatement[79722-79761]:ExpressionStatement[80411-80450]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79785-79905]:Block[80474-80594]"
    }, {
      "left" : "_reportInvalidChar(c);",
      "right" : "_reportInvalidChar(c);",
      "info" : "ExpressionStatement[79865-79887]:ExpressionStatement[80554-80576]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[80096-80105]:Modifier[80785-80794]"
    }, {
      "left" : "JsonToken",
      "right" : "JsonToken",
      "info" : "SimpleType[80106-80115]:SimpleType[80795-80804]"
    }, {
      "left" : "_handleUnexpectedValue",
      "right" : "_handleUnexpectedValue",
      "info" : "SimpleName[80116-80138]:SimpleName[80805-80827]"
    }, {
      "left" : "int c",
      "right" : "int c",
      "info" : "SingleVariableDeclaration[80139-80144]:SingleVariableDeclaration[80828-80833]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[80161-80172]:SimpleType[80850-80861]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80177-81784]:Block[80866-82473]"
    }, {
      "left" : "switch (c) {\n        case '\\'':\n            if (isEnabled(Feature.ALLOW_SINGLE_QUOTES)) {\n                return _handleApos();\n            }\n            break;\n        case 'N':\n            _matchToken(\"NaN\", 1);\n            if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS)) {\n                return resetAsNaN(\"NaN\", Double.NaN);\n            }\n            _reportError(\"Non-standard token 'NaN': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");\n            break;\n        case 'I':\n            _matchToken(\"Infinity\", 1);\n            if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS)) {\n                return resetAsNaN(\"Infinity\", Double.POSITIVE_INFINITY);\n            }\n            _reportError(\"Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");\n            break;\n        case '+': // note: '-' is taken as number\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOFInValue();\n                }\n            }\n            return _handleInvalidNumberStart(_inputBuffer[_inputPtr++] & 0xFF, false);\n        }",
      "right" : "switch (c) {\n        case '\\'':\n            if (isEnabled(Feature.ALLOW_SINGLE_QUOTES)) {\n                return _handleApos();\n            }\n            break;\n        case 'N':\n            _matchToken(\"NaN\", 1);\n            if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS)) {\n                return resetAsNaN(\"NaN\", Double.NaN);\n            }\n            _reportError(\"Non-standard token 'NaN': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");\n            break;\n        case 'I':\n            _matchToken(\"Infinity\", 1);\n            if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS)) {\n                return resetAsNaN(\"Infinity\", Double.POSITIVE_INFINITY);\n            }\n            _reportError(\"Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");\n            break;\n        case '+': // note: '-' is taken as number\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOFInValue();\n                }\n            }\n            return _handleInvalidNumberStart(_inputBuffer[_inputPtr++] & 0xFF, false);\n        }",
      "info" : "SwitchStatement[80264-81397]:SwitchStatement[80953-82086]"
    }, {
      "left" : "case '\\'':",
      "right" : "case '\\'':",
      "info" : "SwitchCase[80285-80295]:SwitchCase[80974-80984]"
    }, {
      "left" : "if (isEnabled(Feature.ALLOW_SINGLE_QUOTES))",
      "right" : "if (isEnabled(Feature.ALLOW_SINGLE_QUOTES))",
      "info" : "IfStatement[80308-80405]:IfStatement[80997-81094]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80352-80405]:Block[81041-81094]"
    }, {
      "left" : "return _handleApos();",
      "right" : "return _handleApos();",
      "info" : "ReturnStatement[80370-80391]:ReturnStatement[81059-81080]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[80418-80424]:BreakStatement[81107-81113]"
    }, {
      "left" : "case 'N':",
      "right" : "case 'N':",
      "info" : "SwitchCase[80433-80442]:SwitchCase[81122-81131]"
    }, {
      "left" : "_matchToken(\"NaN\", 1);",
      "right" : "_matchToken(\"NaN\", 1);",
      "info" : "ExpressionStatement[80455-80477]:ExpressionStatement[81144-81166]"
    }, {
      "left" : "if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS))",
      "right" : "if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS))",
      "info" : "IfStatement[80490-80609]:IfStatement[81179-81298]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80540-80609]:Block[81229-81298]"
    }, {
      "left" : "return resetAsNaN(\"NaN\", Double.NaN);",
      "right" : "return resetAsNaN(\"NaN\", Double.NaN);",
      "info" : "ReturnStatement[80558-80595]:ReturnStatement[81247-81284]"
    }, {
      "left" : "_reportError(\"Non-standard token 'NaN': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");",
      "right" : "_reportError(\"Non-standard token 'NaN': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");",
      "info" : "ExpressionStatement[80622-80725]:ExpressionStatement[81311-81414]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[80738-80744]:BreakStatement[81427-81433]"
    }, {
      "left" : "case 'I':",
      "right" : "case 'I':",
      "info" : "SwitchCase[80753-80762]:SwitchCase[81442-81451]"
    }, {
      "left" : "_matchToken(\"Infinity\", 1);",
      "right" : "_matchToken(\"Infinity\", 1);",
      "info" : "ExpressionStatement[80775-80802]:ExpressionStatement[81464-81491]"
    }, {
      "left" : "if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS))",
      "right" : "if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS))",
      "info" : "IfStatement[80815-80953]:IfStatement[81504-81642]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80865-80953]:Block[81554-81642]"
    }, {
      "left" : "return resetAsNaN(\"Infinity\", Double.POSITIVE_INFINITY);",
      "right" : "return resetAsNaN(\"Infinity\", Double.POSITIVE_INFINITY);",
      "info" : "ReturnStatement[80883-80939]:ReturnStatement[81572-81628]"
    }, {
      "left" : "_reportError(\"Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");",
      "right" : "_reportError(\"Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");",
      "info" : "ExpressionStatement[80966-81074]:ExpressionStatement[81655-81763]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[81087-81093]:BreakStatement[81776-81782]"
    }, {
      "left" : "case '+':",
      "right" : "case '+':",
      "info" : "SwitchCase[81102-81111]:SwitchCase[81791-81800]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[81156-81300]:IfStatement[81845-81989]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81184-81300]:Block[81873-81989]"
    }, {
      "left" : "if (!loadMore())",
      "right" : "if (!loadMore())",
      "info" : "IfStatement[81202-81286]:IfStatement[81891-81975]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81219-81286]:Block[81908-81975]"
    }, {
      "left" : "_reportInvalidEOFInValue();",
      "right" : "_reportInvalidEOFInValue();",
      "info" : "ExpressionStatement[81241-81268]:ExpressionStatement[81930-81957]"
    }, {
      "left" : "return _handleInvalidNumberStart(_inputBuffer[_inputPtr++] & 0xFF, false);",
      "right" : "return _handleInvalidNumberStart(_inputBuffer[_inputPtr++] & 0xFF, false);",
      "info" : "ReturnStatement[81313-81387]:ReturnStatement[82002-82076]"
    }, {
      "left" : "if (Character.isJavaIdentifierStart(c))",
      "right" : "if (Character.isJavaIdentifierStart(c))",
      "info" : "IfStatement[81460-81590]:IfStatement[82149-82279]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81500-81590]:Block[82189-82279]"
    }, {
      "left" : "_reportInvalidToken(\"\"+((char) c), \"('true', 'false' or 'null')\");",
      "right" : "_reportInvalidToken(\"\"+((char) c), \"('true', 'false' or 'null')\");",
      "info" : "ExpressionStatement[81514-81580]:ExpressionStatement[82203-82269]"
    }, {
      "left" : "_reportUnexpectedChar(c, \"expected a valid value (number, String, array, object, 'true', 'false' or 'null')\");",
      "right" : "_reportUnexpectedChar(c, \"expected a valid value (number, String, array, object, 'true', 'false' or 'null')\");",
      "info" : "ExpressionStatement[81647-81757]:ExpressionStatement[82336-82446]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[81766-81778]:ReturnStatement[82455-82467]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[81790-81799]:Modifier[82479-82488]"
    }, {
      "left" : "JsonToken",
      "right" : "JsonToken",
      "info" : "SimpleType[81800-81809]:SimpleType[82489-82498]"
    }, {
      "left" : "_handleApos",
      "right" : "_handleApos",
      "info" : "SimpleName[81810-81821]:SimpleName[82499-82510]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[81839-81850]:SimpleType[82528-82539]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81855-84891]:Block[82544-85580]"
    }, {
      "left" : "int c = 0;",
      "right" : "int c = 0;",
      "info" : "VariableDeclarationStatement[81865-81875]:VariableDeclarationStatement[82554-82564]"
    }, {
      "left" : "int outPtr = 0;",
      "right" : "int outPtr = 0;",
      "info" : "VariableDeclarationStatement[81945-81960]:VariableDeclarationStatement[82634-82649]"
    }, {
      "left" : "char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();",
      "right" : "char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();",
      "info" : "VariableDeclarationStatement[81969-82025]:VariableDeclarationStatement[82658-82714]"
    }, {
      "left" : "final int[] codes = _icUTF8;",
      "right" : "final int[] codes = _icUTF8;",
      "info" : "VariableDeclarationStatement[82090-82118]:VariableDeclarationStatement[82779-82807]"
    }, {
      "left" : "final byte[] inputBuffer = _inputBuffer;",
      "right" : "final byte[] inputBuffer = _inputBuffer;",
      "info" : "VariableDeclarationStatement[82127-82167]:VariableDeclarationStatement[82816-82856]"
    }, {
      "left" : "main_loop:\n        while (true) {\n            // Then the tight ascii non-funny-char loop:\n            ascii_loop:\n            while (true) {\n                if (_inputPtr >= _inputEnd) {\n                    loadMoreGuaranteed();\n                }\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                int max = _inputEnd;\n                {\n                    int max2 = _inputPtr + (outBuf.length - outPtr);\n                    if (max2 < max) {\n                        max = max2;\n                    }\n                }\n                while (_inputPtr < max) {\n                    c = (int) inputBuffer[_inputPtr++] & 0xFF;\n                    if (c == '\\'' || codes[c] != 0) {\n                        break ascii_loop;\n                    }\n                    outBuf[outPtr++] = (char) c;\n                }\n            }\n\n            // Ok: end marker, escape or multi-byte?\n            if (c == '\\'') {\n                break main_loop;\n            }\n\n            switch (codes[c]) {\n            case 1: // backslash\n                if (c != '\\'') { // marked as special, isn't here\n                    c = _decodeEscaped();\n                }\n                break;\n            case 2: // 2-byte UTF\n                c = _decodeUtf8_2(c);\n                break;\n            case 3: // 3-byte UTF\n                if ((_inputEnd - _inputPtr) >= 2) {\n                    c = _decodeUtf8_3fast(c);\n                } else {\n                    c = _decodeUtf8_3(c);\n                }\n                break;\n            case 4: // 4-byte UTF\n                c = _decodeUtf8_4(c);\n                // Let's add first part right away:\n                outBuf[outPtr++] = (char) (0xD800 | (c >> 10));\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                c = 0xDC00 | (c & 0x3FF);\n                // And let the other char output down below\n                break;\n            default:\n                if (c < INT_SPACE) {\n                    _throwUnquotedSpace(c, \"string value\");\n                }\n                // Is this good enough error message?\n                _reportInvalidChar(c);\n            }\n            // Need more room?\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            // Ok, let's add char to output:\n            outBuf[outPtr++] = (char) c;\n        }",
      "right" : "main_loop:\n        while (true) {\n            // Then the tight ascii non-funny-char loop:\n            ascii_loop:\n            while (true) {\n                if (_inputPtr >= _inputEnd) {\n                    loadMoreGuaranteed();\n                }\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                int max = _inputEnd;\n                {\n                    int max2 = _inputPtr + (outBuf.length - outPtr);\n                    if (max2 < max) {\n                        max = max2;\n                    }\n                }\n                while (_inputPtr < max) {\n                    c = (int) inputBuffer[_inputPtr++] & 0xFF;\n                    if (c == '\\'' || codes[c] != 0) {\n                        break ascii_loop;\n                    }\n                    outBuf[outPtr++] = (char) c;\n                }\n            }\n\n            // Ok: end marker, escape or multi-byte?\n            if (c == '\\'') {\n                break main_loop;\n            }\n\n            switch (codes[c]) {\n            case 1: // backslash\n                if (c != '\\'') { // marked as special, isn't here\n                    c = _decodeEscaped();\n                }\n                break;\n            case 2: // 2-byte UTF\n                c = _decodeUtf8_2(c);\n                break;\n            case 3: // 3-byte UTF\n                if ((_inputEnd - _inputPtr) >= 2) {\n                    c = _decodeUtf8_3fast(c);\n                } else {\n                    c = _decodeUtf8_3(c);\n                }\n                break;\n            case 4: // 4-byte UTF\n                c = _decodeUtf8_4(c);\n                // Let's add first part right away:\n                outBuf[outPtr++] = (char) (0xD800 | (c >> 10));\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                c = 0xDC00 | (c & 0x3FF);\n                // And let the other char output down below\n                break;\n            default:\n                if (c < INT_SPACE) {\n                    _throwUnquotedSpace(c, \"string value\");\n                }\n                // Is this good enough error message?\n                _reportInvalidChar(c);\n            }\n            // Need more room?\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            // Ok, let's add char to output:\n            outBuf[outPtr++] = (char) c;\n        }",
      "info" : "LabeledStatement[82177-84799]:LabeledStatement[82866-85488]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[82196-84799]:WhileStatement[82885-85488]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82209-84799]:Block[82898-85488]"
    }, {
      "left" : "ascii_loop:\n            while (true) {\n                if (_inputPtr >= _inputEnd) {\n                    loadMoreGuaranteed();\n                }\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                int max = _inputEnd;\n                {\n                    int max2 = _inputPtr + (outBuf.length - outPtr);\n                    if (max2 < max) {\n                        max = max2;\n                    }\n                }\n                while (_inputPtr < max) {\n                    c = (int) inputBuffer[_inputPtr++] & 0xFF;\n                    if (c == '\\'' || codes[c] != 0) {\n                        break ascii_loop;\n                    }\n                    outBuf[outPtr++] = (char) c;\n                }\n            }",
      "right" : "ascii_loop:\n            while (true) {\n                if (_inputPtr >= _inputEnd) {\n                    loadMoreGuaranteed();\n                }\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                int max = _inputEnd;\n                {\n                    int max2 = _inputPtr + (outBuf.length - outPtr);\n                    if (max2 < max) {\n                        max = max2;\n                    }\n                }\n                while (_inputPtr < max) {\n                    c = (int) inputBuffer[_inputPtr++] & 0xFF;\n                    if (c == '\\'' || codes[c] != 0) {\n                        break ascii_loop;\n                    }\n                    outBuf[outPtr++] = (char) c;\n                }\n            }",
      "info" : "LabeledStatement[82280-83128]:LabeledStatement[82969-83817]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[82304-83128]:WhileStatement[82993-83817]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82317-83128]:Block[83006-83817]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[82335-82424]:IfStatement[83024-83113]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82363-82424]:Block[83052-83113]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[82385-82406]:ExpressionStatement[83074-83095]"
    }, {
      "left" : "if (outPtr >= outBuf.length)",
      "right" : "if (outPtr >= outBuf.length)",
      "info" : "IfStatement[82441-82586]:IfStatement[83130-83275]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82470-82586]:Block[83159-83275]"
    }, {
      "left" : "outBuf = _textBuffer.finishCurrentSegment();",
      "right" : "outBuf = _textBuffer.finishCurrentSegment();",
      "info" : "ExpressionStatement[82492-82536]:ExpressionStatement[83181-83225]"
    }, {
      "left" : "outPtr = 0;",
      "right" : "outPtr = 0;",
      "info" : "ExpressionStatement[82557-82568]:ExpressionStatement[83246-83257]"
    }, {
      "left" : "int max = _inputEnd;",
      "right" : "int max = _inputEnd;",
      "info" : "VariableDeclarationStatement[82603-82623]:VariableDeclarationStatement[83292-83312]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82640-82824]:Block[83329-83513]"
    }, {
      "left" : "int max2 = _inputPtr + (outBuf.length - outPtr);",
      "right" : "int max2 = _inputPtr + (outBuf.length - outPtr);",
      "info" : "VariableDeclarationStatement[82662-82710]:VariableDeclarationStatement[83351-83399]"
    }, {
      "left" : "if (max2 < max)",
      "right" : "if (max2 < max)",
      "info" : "IfStatement[82731-82806]:IfStatement[83420-83495]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82747-82806]:Block[83436-83495]"
    }, {
      "left" : "max = max2;",
      "right" : "max = max2;",
      "info" : "ExpressionStatement[82773-82784]:ExpressionStatement[83462-83473]"
    }, {
      "left" : "while (_inputPtr < max)",
      "right" : "while (_inputPtr < max)",
      "info" : "WhileStatement[82841-83114]:WhileStatement[83530-83803]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82865-83114]:Block[83554-83803]"
    }, {
      "left" : "c = (int) inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "c = (int) inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[82887-82929]:ExpressionStatement[83576-83618]"
    }, {
      "left" : "if (c == '\\'' || codes[c] != 0)",
      "right" : "if (c == '\\'' || codes[c] != 0)",
      "info" : "IfStatement[82950-83047]:IfStatement[83639-83736]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82982-83047]:Block[83671-83736]"
    }, {
      "left" : "break ascii_loop;",
      "right" : "break ascii_loop;",
      "info" : "BreakStatement[83008-83025]:BreakStatement[83697-83714]"
    }, {
      "left" : "outBuf[outPtr++] = (char) c;",
      "right" : "outBuf[outPtr++] = (char) c;",
      "info" : "ExpressionStatement[83068-83096]:ExpressionStatement[83757-83785]"
    }, {
      "left" : "if (c == '\\'')",
      "right" : "if (c == '\\'')",
      "info" : "IfStatement[83195-83258]:IfStatement[83884-83947]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[83210-83258]:Block[83899-83947]"
    }, {
      "left" : "break main_loop;",
      "right" : "break main_loop;",
      "info" : "BreakStatement[83228-83244]:BreakStatement[83917-83933]"
    }, {
      "left" : "switch (codes[c]) {\n            case 1: // backslash\n                if (c != '\\'') { // marked as special, isn't here\n                    c = _decodeEscaped();\n                }\n                break;\n            case 2: // 2-byte UTF\n                c = _decodeUtf8_2(c);\n                break;\n            case 3: // 3-byte UTF\n                if ((_inputEnd - _inputPtr) >= 2) {\n                    c = _decodeUtf8_3fast(c);\n                } else {\n                    c = _decodeUtf8_3(c);\n                }\n                break;\n            case 4: // 4-byte UTF\n                c = _decodeUtf8_4(c);\n                // Let's add first part right away:\n                outBuf[outPtr++] = (char) (0xD800 | (c >> 10));\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                c = 0xDC00 | (c & 0x3FF);\n                // And let the other char output down below\n                break;\n            default:\n                if (c < INT_SPACE) {\n                    _throwUnquotedSpace(c, \"string value\");\n                }\n                // Is this good enough error message?\n                _reportInvalidChar(c);\n            }",
      "right" : "switch (codes[c]) {\n            case 1: // backslash\n                if (c != '\\'') { // marked as special, isn't here\n                    c = _decodeEscaped();\n                }\n                break;\n            case 2: // 2-byte UTF\n                c = _decodeUtf8_2(c);\n                break;\n            case 3: // 3-byte UTF\n                if ((_inputEnd - _inputPtr) >= 2) {\n                    c = _decodeUtf8_3fast(c);\n                } else {\n                    c = _decodeUtf8_3(c);\n                }\n                break;\n            case 4: // 4-byte UTF\n                c = _decodeUtf8_4(c);\n                // Let's add first part right away:\n                outBuf[outPtr++] = (char) (0xD800 | (c >> 10));\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                c = 0xDC00 | (c & 0x3FF);\n                // And let the other char output down below\n                break;\n            default:\n                if (c < INT_SPACE) {\n                    _throwUnquotedSpace(c, \"string value\");\n                }\n                // Is this good enough error message?\n                _reportInvalidChar(c);\n            }",
      "info" : "SwitchStatement[83272-84526]:SwitchStatement[83961-85215]"
    }, {
      "left" : "case 1:",
      "right" : "case 1:",
      "info" : "SwitchCase[83304-83311]:SwitchCase[83993-84000]"
    }, {
      "left" : "if (c != '\\'')",
      "right" : "if (c != '\\'')",
      "info" : "IfStatement[83341-83450]:IfStatement[84030-84139]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[83356-83450]:Block[84045-84139]"
    }, {
      "left" : "c = _decodeEscaped();",
      "right" : "c = _decodeEscaped();",
      "info" : "ExpressionStatement[83411-83432]:ExpressionStatement[84100-84121]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[83467-83473]:BreakStatement[84156-84162]"
    }, {
      "left" : "case 2:",
      "right" : "case 2:",
      "info" : "SwitchCase[83486-83493]:SwitchCase[84175-84182]"
    }, {
      "left" : "c = _decodeUtf8_2(c);",
      "right" : "c = _decodeUtf8_2(c);",
      "info" : "ExpressionStatement[83524-83545]:ExpressionStatement[84213-84234]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[83562-83568]:BreakStatement[84251-84257]"
    }, {
      "left" : "case 3:",
      "right" : "case 3:",
      "info" : "SwitchCase[83581-83588]:SwitchCase[84270-84277]"
    }, {
      "left" : "if ((_inputEnd - _inputPtr) >= 2)",
      "right" : "if ((_inputEnd - _inputPtr) >= 2)",
      "info" : "IfStatement[83619-83785]:IfStatement[84308-84474]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[83653-83718]:Block[84342-84407]"
    }, {
      "left" : "c = _decodeUtf8_3fast(c);",
      "right" : "c = _decodeUtf8_3fast(c);",
      "info" : "ExpressionStatement[83675-83700]:ExpressionStatement[84364-84389]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[83724-83785]:Block[84413-84474]"
    }, {
      "left" : "c = _decodeUtf8_3(c);",
      "right" : "c = _decodeUtf8_3(c);",
      "info" : "ExpressionStatement[83746-83767]:ExpressionStatement[84435-84456]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[83802-83808]:BreakStatement[84491-84497]"
    }, {
      "left" : "case 4:",
      "right" : "case 4:",
      "info" : "SwitchCase[83821-83828]:SwitchCase[84510-84517]"
    }, {
      "left" : "c = _decodeUtf8_4(c);",
      "right" : "c = _decodeUtf8_4(c);",
      "info" : "ExpressionStatement[83859-83880]:ExpressionStatement[84548-84569]"
    }, {
      "left" : "outBuf[outPtr++] = (char) (0xD800 | (c >> 10));",
      "right" : "outBuf[outPtr++] = (char) (0xD800 | (c >> 10));",
      "info" : "ExpressionStatement[83949-83996]:ExpressionStatement[84638-84685]"
    }, {
      "left" : "if (outPtr >= outBuf.length)",
      "right" : "if (outPtr >= outBuf.length)",
      "info" : "IfStatement[84013-84158]:IfStatement[84702-84847]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[84042-84158]:Block[84731-84847]"
    }, {
      "left" : "outBuf = _textBuffer.finishCurrentSegment();",
      "right" : "outBuf = _textBuffer.finishCurrentSegment();",
      "info" : "ExpressionStatement[84064-84108]:ExpressionStatement[84753-84797]"
    }, {
      "left" : "outPtr = 0;",
      "right" : "outPtr = 0;",
      "info" : "ExpressionStatement[84129-84140]:ExpressionStatement[84818-84829]"
    }, {
      "left" : "c = 0xDC00 | (c & 0x3FF);",
      "right" : "c = 0xDC00 | (c & 0x3FF);",
      "info" : "ExpressionStatement[84175-84200]:ExpressionStatement[84864-84889]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[84277-84283]:BreakStatement[84966-84972]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[84296-84304]:SwitchCase[84985-84993]"
    }, {
      "left" : "if (c < INT_SPACE)",
      "right" : "if (c < INT_SPACE)",
      "info" : "IfStatement[84321-84419]:IfStatement[85010-85108]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[84340-84419]:Block[85029-85108]"
    }, {
      "left" : "_throwUnquotedSpace(c, \"string value\");",
      "right" : "_throwUnquotedSpace(c, \"string value\");",
      "info" : "ExpressionStatement[84362-84401]:ExpressionStatement[85051-85090]"
    }, {
      "left" : "_reportInvalidChar(c);",
      "right" : "_reportInvalidChar(c);",
      "info" : "ExpressionStatement[84490-84512]:ExpressionStatement[85179-85201]"
    }, {
      "left" : "if (outPtr >= outBuf.length)",
      "right" : "if (outPtr >= outBuf.length)",
      "info" : "IfStatement[84570-84703]:IfStatement[85259-85392]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[84599-84703]:Block[85288-85392]"
    }, {
      "left" : "outBuf = _textBuffer.finishCurrentSegment();",
      "right" : "outBuf = _textBuffer.finishCurrentSegment();",
      "info" : "ExpressionStatement[84617-84661]:ExpressionStatement[85306-85350]"
    }, {
      "left" : "outPtr = 0;",
      "right" : "outPtr = 0;",
      "info" : "ExpressionStatement[84678-84689]:ExpressionStatement[85367-85378]"
    }, {
      "left" : "outBuf[outPtr++] = (char) c;",
      "right" : "outBuf[outPtr++] = (char) c;",
      "info" : "ExpressionStatement[84761-84789]:ExpressionStatement[85450-85478]"
    }, {
      "left" : "_textBuffer.setCurrentLength(outPtr);",
      "right" : "_textBuffer.setCurrentLength(outPtr);",
      "info" : "ExpressionStatement[84808-84845]:ExpressionStatement[85497-85534]"
    }, {
      "left" : "return JsonToken.VALUE_STRING;",
      "right" : "return JsonToken.VALUE_STRING;",
      "info" : "ReturnStatement[84855-84885]:ReturnStatement[85544-85574]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[85021-85030]:Modifier[85710-85719]"
    }, {
      "left" : "JsonToken",
      "right" : "JsonToken",
      "info" : "SimpleType[85031-85040]:SimpleType[85720-85729]"
    }, {
      "left" : "_handleInvalidNumberStart",
      "right" : "_handleInvalidNumberStart",
      "info" : "SimpleName[85041-85066]:SimpleName[85730-85755]"
    }, {
      "left" : "int ch",
      "right" : "int ch",
      "info" : "SingleVariableDeclaration[85067-85073]:SingleVariableDeclaration[85756-85762]"
    }, {
      "left" : "boolean neg",
      "right" : "boolean neg",
      "info" : "SingleVariableDeclaration[85075-85086]:SingleVariableDeclaration[85764-85775]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[85103-85114]:SimpleType[85792-85803]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[85119-86083]:Block[85808-86772]"
    }, {
      "left" : "while (ch == 'I')",
      "right" : "while (ch == 'I')",
      "info" : "WhileStatement[85129-85946]:WhileStatement[85818-86635]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[85147-85946]:Block[85836-86635]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[85161-85305]:IfStatement[85850-85994]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[85189-85305]:Block[85878-85994]"
    }, {
      "left" : "if (!loadMore())",
      "right" : "if (!loadMore())",
      "info" : "IfStatement[85207-85291]:IfStatement[85896-85980]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[85224-85291]:Block[85913-85980]"
    }, {
      "left" : "_reportInvalidEOFInValue();",
      "right" : "_reportInvalidEOFInValue();",
      "info" : "ExpressionStatement[85246-85273]:ExpressionStatement[85935-85962]"
    }, {
      "left" : "ch = _inputBuffer[_inputPtr++];",
      "right" : "ch = _inputBuffer[_inputPtr++];",
      "info" : "ExpressionStatement[85318-85349]:ExpressionStatement[86007-86038]"
    }, {
      "left" : "String match;",
      "right" : "String match;",
      "info" : "VariableDeclarationStatement[85362-85375]:VariableDeclarationStatement[86051-86064]"
    }, {
      "left" : "if (ch == 'N')",
      "right" : "if (ch == 'N')",
      "info" : "IfStatement[85388-85600]:IfStatement[86077-86289]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[85403-85464]:Block[86092-86153]"
    }, {
      "left" : "match = neg ? \"-INF\" :\"+INF\";",
      "right" : "match = neg ? \"-INF\" :\"+INF\";",
      "info" : "ExpressionStatement[85421-85450]:ExpressionStatement[86110-86139]"
    }, {
      "left" : "if (ch == 'n')",
      "right" : "if (ch == 'n')",
      "info" : "IfStatement[85470-85600]:IfStatement[86159-86289]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[85485-85556]:Block[86174-86245]"
    }, {
      "left" : "match = neg ? \"-Infinity\" :\"+Infinity\";",
      "right" : "match = neg ? \"-Infinity\" :\"+Infinity\";",
      "info" : "ExpressionStatement[85503-85542]:ExpressionStatement[86192-86231]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[85562-85600]:Block[86251-86289]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[85580-85586]:BreakStatement[86269-86275]"
    }, {
      "left" : "_matchToken(match, 3);",
      "right" : "_matchToken(match, 3);",
      "info" : "ExpressionStatement[85613-85635]:ExpressionStatement[86302-86324]"
    }, {
      "left" : "if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS))",
      "right" : "if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS))",
      "info" : "IfStatement[85648-85814]:IfStatement[86337-86503]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[85698-85814]:Block[86387-86503]"
    }, {
      "left" : "return resetAsNaN(match, neg ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY);",
      "right" : "return resetAsNaN(match, neg ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY);",
      "info" : "ReturnStatement[85716-85800]:ReturnStatement[86405-86489]"
    }, {
      "left" : "_reportError(\"Non-standard token '\"+match+\"': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");",
      "right" : "_reportError(\"Non-standard token '\"+match+\"': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");",
      "info" : "ExpressionStatement[85827-85936]:ExpressionStatement[86516-86625]"
    }, {
      "left" : "reportUnexpectedNumberChar(ch, \"expected digit (0-9) to follow minus sign, for valid numeric value\");",
      "right" : "reportUnexpectedNumberChar(ch, \"expected digit (0-9) to follow minus sign, for valid numeric value\");",
      "info" : "ExpressionStatement[85955-86056]:ExpressionStatement[86644-86745]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[86065-86077]:ReturnStatement[86754-86766]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[86089-86098]:Modifier[86778-86787]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[86099-86103]:PrimitiveType[86788-86792]"
    }, {
      "left" : "_matchToken",
      "right" : "_matchToken",
      "info" : "SimpleName[86104-86115]:SimpleName[86793-86804]"
    }, {
      "left" : "String matchStr",
      "right" : "String matchStr",
      "info" : "SingleVariableDeclaration[86116-86131]:SingleVariableDeclaration[86805-86820]"
    }, {
      "left" : "int i",
      "right" : "int i",
      "info" : "SingleVariableDeclaration[86133-86138]:SingleVariableDeclaration[86822-86827]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[86155-86166]:SimpleType[86844-86855]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[86171-87040]:Block[86860-87729]"
    }, {
      "left" : "final int len = matchStr.length();",
      "right" : "final int len = matchStr.length();",
      "info" : "VariableDeclarationStatement[86181-86215]:VariableDeclarationStatement[86870-86904]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[86229-86493]:DoStatement[86918-87182]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[86232-86474]:Block[86921-87163]"
    }, {
      "left" : "if (((_inputPtr >= _inputEnd) && !loadMore())\n                ||  (_inputBuffer[_inputPtr] != matchStr.charAt(i)))",
      "right" : "if (((_inputPtr >= _inputEnd) && !loadMore())\n                ||  (_inputBuffer[_inputPtr] != matchStr.charAt(i)))",
      "info" : "IfStatement[86246-86439]:IfStatement[86935-87128]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[86361-86439]:Block[87050-87128]"
    }, {
      "left" : "_reportInvalidToken(matchStr.substring(0, i));",
      "right" : "_reportInvalidToken(matchStr.substring(0, i));",
      "info" : "ExpressionStatement[86379-86425]:ExpressionStatement[87068-87114]"
    }, {
      "left" : "++_inputPtr;",
      "right" : "++_inputPtr;",
      "info" : "ExpressionStatement[86452-86464]:ExpressionStatement[87141-87153]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd && !loadMore())",
      "right" : "if (_inputPtr >= _inputEnd && !loadMore())",
      "info" : "IfStatement[86583-86657]:IfStatement[87272-87346]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[86626-86657]:Block[87315-87346]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[86640-86647]:ReturnStatement[87329-87336]"
    }, {
      "left" : "int ch = _inputBuffer[_inputPtr] & 0xFF;",
      "right" : "int ch = _inputBuffer[_inputPtr] & 0xFF;",
      "info" : "VariableDeclarationStatement[86666-86706]:VariableDeclarationStatement[87355-87395]"
    }, {
      "left" : "if (ch < '0' || ch == ']' || ch == '}')",
      "right" : "if (ch < '0' || ch == ']' || ch == '}')",
      "info" : "IfStatement[86715-86812]:IfStatement[87404-87501]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[86755-86812]:Block[87444-87501]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[86795-86802]:ReturnStatement[87484-87491]"
    }, {
      "left" : "char c = (char) _decodeCharForError(ch);",
      "right" : "char c = (char) _decodeCharForError(ch);",
      "info" : "VariableDeclarationStatement[86876-86916]:VariableDeclarationStatement[87565-87605]"
    }, {
      "left" : "if (Character.isJavaIdentifierPart(c))",
      "right" : "if (Character.isJavaIdentifierPart(c))",
      "info" : "IfStatement[86925-87034]:IfStatement[87614-87723]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[86964-87034]:Block[87653-87723]"
    }, {
      "left" : "_reportInvalidToken(matchStr.substring(0, i));",
      "right" : "_reportInvalidToken(matchStr.substring(0, i));",
      "info" : "ExpressionStatement[86978-87024]:ExpressionStatement[87667-87713]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[87046-87055]:Modifier[87735-87744]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[87056-87060]:PrimitiveType[87745-87749]"
    }, {
      "left" : "_reportInvalidToken",
      "right" : "_reportInvalidToken",
      "info" : "SimpleName[87061-87080]:SimpleName[87750-87769]"
    }, {
      "left" : "String matchedPart",
      "right" : "String matchedPart",
      "info" : "SingleVariableDeclaration[87081-87099]:SingleVariableDeclaration[87770-87788]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[87115-87126]:SimpleType[87804-87815]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[87131-87214]:Block[87820-87903]"
    }, {
      "left" : "_reportInvalidToken(matchedPart, \"'null', 'true', 'false' or NaN\");",
      "right" : "_reportInvalidToken(matchedPart, \"'null', 'true', 'false' or NaN\");",
      "info" : "ExpressionStatement[87141-87208]:ExpressionStatement[87830-87897]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[87224-87233]:Modifier[87913-87922]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[87234-87238]:PrimitiveType[87923-87927]"
    }, {
      "left" : "_reportInvalidToken",
      "right" : "_reportInvalidToken",
      "info" : "SimpleName[87239-87258]:SimpleName[87928-87947]"
    }, {
      "left" : "String matchedPart",
      "right" : "String matchedPart",
      "info" : "SingleVariableDeclaration[87259-87277]:SingleVariableDeclaration[87948-87966]"
    }, {
      "left" : "String msg",
      "right" : "String msg",
      "info" : "SingleVariableDeclaration[87279-87289]:SingleVariableDeclaration[87968-87978]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[87306-87317]:SimpleType[87995-88006]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[87322-88021]:Block[88011-88710]"
    }, {
      "left" : "StringBuilder sb = new StringBuilder(matchedPart);",
      "right" : "StringBuilder sb = new StringBuilder(matchedPart);",
      "info" : "VariableDeclarationStatement[87332-87382]:VariableDeclarationStatement[88021-88071]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[87591-87931]:WhileStatement[88280-88620]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[87604-87931]:Block[88293-88620]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd && !loadMore())",
      "right" : "if (_inputPtr >= _inputEnd && !loadMore())",
      "info" : "IfStatement[87618-87699]:IfStatement[88307-88388]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[87661-87699]:Block[88350-88388]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[87679-87685]:BreakStatement[88368-88374]"
    }, {
      "left" : "int i = (int) _inputBuffer[_inputPtr++];",
      "right" : "int i = (int) _inputBuffer[_inputPtr++];",
      "info" : "VariableDeclarationStatement[87712-87752]:VariableDeclarationStatement[88401-88441]"
    }, {
      "left" : "char c = (char) _decodeCharForError(i);",
      "right" : "char c = (char) _decodeCharForError(i);",
      "info" : "VariableDeclarationStatement[87765-87804]:VariableDeclarationStatement[88454-88493]"
    }, {
      "left" : "if (!Character.isJavaIdentifierPart(c))",
      "right" : "if (!Character.isJavaIdentifierPart(c))",
      "info" : "IfStatement[87817-87895]:IfStatement[88506-88584]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[87857-87895]:Block[88546-88584]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[87875-87881]:BreakStatement[88564-88570]"
    }, {
      "left" : "sb.append(c);",
      "right" : "sb.append(c);",
      "info" : "ExpressionStatement[87908-87921]:ExpressionStatement[88597-88610]"
    }, {
      "left" : "_reportError(\"Unrecognized token '\"+sb.toString()+\"': was expecting \"+msg);",
      "right" : "_reportError(\"Unrecognized token '\"+sb.toString()+\"': was expecting \"+msg);",
      "info" : "ExpressionStatement[87940-88015]:ExpressionStatement[88629-88704]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[88229-88236]:Modifier[88918-88925]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[88237-88242]:Modifier[88926-88931]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[88243-88246]:PrimitiveType[88932-88935]"
    }, {
      "left" : "_skipWS",
      "right" : "_skipWS",
      "info" : "SimpleName[88247-88254]:SimpleName[88936-88943]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[88264-88275]:SimpleType[88953-88964]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[88280-89616]:Block[88969-90305]"
    }, {
      "left" : "final int[] codes = _icWS;",
      "right" : "final int[] codes = _icWS;",
      "info" : "VariableDeclarationStatement[88290-88316]:VariableDeclarationStatement[88979-89005]"
    }, {
      "left" : "while (_inputPtr < _inputEnd || loadMore())",
      "right" : "while (_inputPtr < _inputEnd || loadMore())",
      "info" : "WhileStatement[88325-89495]:WhileStatement[89014-90184]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[88369-89495]:Block[89058-90184]"
    }, {
      "left" : "final int i = _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "final int i = _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "VariableDeclarationStatement[88383-88430]:VariableDeclarationStatement[89072-89119]"
    }, {
      "left" : "switch (codes[i]) {\n            case 0: // done!\n                return i;\n            case 1: // skip\n                continue;\n            case 2: // 2-byte UTF\n                _skipUtf8_2(i);\n                break;\n            case 3: // 3-byte UTF\n                _skipUtf8_3(i);\n                break;\n            case 4: // 4-byte UTF\n                _skipUtf8_4(i);\n                break;\n            case INT_LF:\n                ++_currInputRow;\n                _currInputRowStart = _inputPtr;\n                break;\n            case INT_CR:\n                _skipCR();\n                break;\n            case '/':\n                _skipComment();\n                break;\n            case '#':\n                if (!_skipYAMLComment()) {\n                    return i;\n                }\n                break;\n            default: // e.g. -1\n                // Is this good enough error message?\n                if (i < 32) {\n                    _throwInvalidSpace(i);\n                }\n                _reportInvalidChar(i);\n            }",
      "right" : "switch (codes[i]) {\n            case 0: // done!\n                return i;\n            case 1: // skip\n                continue;\n            case 2: // 2-byte UTF\n                _skipUtf8_2(i);\n                break;\n            case 3: // 3-byte UTF\n                _skipUtf8_3(i);\n                break;\n            case 4: // 4-byte UTF\n                _skipUtf8_4(i);\n                break;\n            case INT_LF:\n                ++_currInputRow;\n                _currInputRowStart = _inputPtr;\n                break;\n            case INT_CR:\n                _skipCR();\n                break;\n            case '/':\n                _skipComment();\n                break;\n            case '#':\n                if (!_skipYAMLComment()) {\n                    return i;\n                }\n                break;\n            default: // e.g. -1\n                // Is this good enough error message?\n                if (i < 32) {\n                    _throwInvalidSpace(i);\n                }\n                _reportInvalidChar(i);\n            }",
      "info" : "SwitchStatement[88443-89485]:SwitchStatement[89132-90174]"
    }, {
      "left" : "case 0:",
      "right" : "case 0:",
      "info" : "SwitchCase[88475-88482]:SwitchCase[89164-89171]"
    }, {
      "left" : "return i;",
      "right" : "return i;",
      "info" : "ReturnStatement[88508-88517]:ReturnStatement[89197-89206]"
    }, {
      "left" : "case 1:",
      "right" : "case 1:",
      "info" : "SwitchCase[88530-88537]:SwitchCase[89219-89226]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[88562-88571]:ContinueStatement[89251-89260]"
    }, {
      "left" : "case 2:",
      "right" : "case 2:",
      "info" : "SwitchCase[88584-88591]:SwitchCase[89273-89280]"
    }, {
      "left" : "_skipUtf8_2(i);",
      "right" : "_skipUtf8_2(i);",
      "info" : "ExpressionStatement[88622-88637]:ExpressionStatement[89311-89326]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[88654-88660]:BreakStatement[89343-89349]"
    }, {
      "left" : "case 3:",
      "right" : "case 3:",
      "info" : "SwitchCase[88673-88680]:SwitchCase[89362-89369]"
    }, {
      "left" : "_skipUtf8_3(i);",
      "right" : "_skipUtf8_3(i);",
      "info" : "ExpressionStatement[88711-88726]:ExpressionStatement[89400-89415]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[88743-88749]:BreakStatement[89432-89438]"
    }, {
      "left" : "case 4:",
      "right" : "case 4:",
      "info" : "SwitchCase[88762-88769]:SwitchCase[89451-89458]"
    }, {
      "left" : "_skipUtf8_4(i);",
      "right" : "_skipUtf8_4(i);",
      "info" : "ExpressionStatement[88800-88815]:ExpressionStatement[89489-89504]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[88832-88838]:BreakStatement[89521-89527]"
    }, {
      "left" : "case INT_LF:",
      "right" : "case INT_LF:",
      "info" : "SwitchCase[88851-88863]:SwitchCase[89540-89552]"
    }, {
      "left" : "++_currInputRow;",
      "right" : "++_currInputRow;",
      "info" : "ExpressionStatement[88880-88896]:ExpressionStatement[89569-89585]"
    }, {
      "left" : "_currInputRowStart = _inputPtr;",
      "right" : "_currInputRowStart = _inputPtr;",
      "info" : "ExpressionStatement[88913-88944]:ExpressionStatement[89602-89633]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[88961-88967]:BreakStatement[89650-89656]"
    }, {
      "left" : "case INT_CR:",
      "right" : "case INT_CR:",
      "info" : "SwitchCase[88980-88992]:SwitchCase[89669-89681]"
    }, {
      "left" : "_skipCR();",
      "right" : "_skipCR();",
      "info" : "ExpressionStatement[89009-89019]:ExpressionStatement[89698-89708]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[89036-89042]:BreakStatement[89725-89731]"
    }, {
      "left" : "case '/':",
      "right" : "case '/':",
      "info" : "SwitchCase[89055-89064]:SwitchCase[89744-89753]"
    }, {
      "left" : "_skipComment();",
      "right" : "_skipComment();",
      "info" : "ExpressionStatement[89081-89096]:ExpressionStatement[89770-89785]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[89113-89119]:BreakStatement[89802-89808]"
    }, {
      "left" : "case '#':",
      "right" : "case '#':",
      "info" : "SwitchCase[89132-89141]:SwitchCase[89821-89830]"
    }, {
      "left" : "if (!_skipYAMLComment())",
      "right" : "if (!_skipYAMLComment())",
      "info" : "IfStatement[89158-89232]:IfStatement[89847-89921]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[89183-89232]:Block[89872-89921]"
    }, {
      "left" : "return i;",
      "right" : "return i;",
      "info" : "ReturnStatement[89205-89214]:ReturnStatement[89894-89903]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[89249-89255]:BreakStatement[89938-89944]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[89268-89276]:SwitchCase[89957-89965]"
    }, {
      "left" : "if (i < 32)",
      "right" : "if (i < 32)",
      "info" : "IfStatement[89358-89432]:IfStatement[90047-90121]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[89370-89432]:Block[90059-90121]"
    }, {
      "left" : "_throwInvalidSpace(i);",
      "right" : "_throwInvalidSpace(i);",
      "info" : "ExpressionStatement[89392-89414]:ExpressionStatement[90081-90103]"
    }, {
      "left" : "_reportInvalidChar(i);",
      "right" : "_reportInvalidChar(i);",
      "info" : "ExpressionStatement[89449-89471]:ExpressionStatement[90138-90160]"
    }, {
      "left" : "throw _constructError(\"Unexpected end-of-input within/between \"+_parsingContext.getTypeDesc()+\" entries\");",
      "right" : "throw _constructError(\"Unexpected end-of-input within/between \"+_parsingContext.getTypeDesc()+\" entries\");",
      "info" : "ThrowStatement[89504-89610]:ThrowStatement[90193-90299]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[89622-89629]:Modifier[90311-90318]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[89630-89633]:PrimitiveType[90319-90322]"
    }, {
      "left" : "_skipWSOrEnd",
      "right" : "_skipWSOrEnd",
      "info" : "SimpleName[89634-89646]:SimpleName[90323-90335]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[89656-89667]:SimpleType[90345-90356]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[89672-90916]:Block[90361-91514]"
    }, {
      "left" : "final int[] codes = _icWS;",
      "right" : "final int[] codes = _icWS;",
      "info" : "VariableDeclarationStatement[89682-89708]:VariableDeclarationStatement[90371-90397]"
    }, {
      "left" : "while ((_inputPtr < _inputEnd) || loadMore())",
      "right" : "while ((_inputPtr < _inputEnd) || loadMore())",
      "info" : "WhileStatement[89717-90835]:WhileStatement[90406-91433]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[89763-90835]:Block[90452-91433]"
    }, {
      "left" : "final int i = _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "final int i = _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "VariableDeclarationStatement[89777-89824]:VariableDeclarationStatement[90466-90513]"
    }, {
      "left" : "switch (codes[i]) {\n            case 0: // done!\n                return i;\n            case 1: // skip\n                continue;\n            case 2: // 2-byte UTF\n                _skipUtf8_2(i);\n                break;\n            case 3: // 3-byte UTF\n                _skipUtf8_3(i);\n                break;\n            case 4: // 4-byte UTF\n                _skipUtf8_4(i);\n                break;\n            case INT_LF:\n                ++_currInputRow;\n                _currInputRowStart = _inputPtr;\n                break;\n            case INT_CR:\n                _skipCR();\n                break;\n            case '/':\n                _skipComment();\n                break;\n            case '#':\n                if (!_skipYAMLComment()) {\n                    return i;\n                }\n                break;\n            default: // e.g. -1\n                if (i < 32) {\n                    _throwInvalidSpace(i);\n                }\n                _reportInvalidChar(i);\n            }",
      "right" : "switch (codes[i]) {\n            case 0: // done!\n                return i;\n            case 1: // skip\n                continue;\n            case 2: // 2-byte UTF\n                _skipUtf8_2(i);\n                break;\n            case 3: // 3-byte UTF\n                _skipUtf8_3(i);\n                break;\n            case 4: // 4-byte UTF\n                _skipUtf8_4(i);\n                break;\n            case INT_LF:\n                ++_currInputRow;\n                _currInputRowStart = _inputPtr;\n                break;\n            case INT_CR:\n                _skipCR();\n                break;\n            case '/':\n                _skipComment();\n                break;\n            case '#':\n                if (!_skipYAMLComment()) {\n                    return i;\n                }\n                break;\n            default: // e.g. -1\n                _reportInvalidChar(i);\n            }",
      "info" : "SwitchStatement[89837-90825]:SwitchStatement[90526-91423]"
    }, {
      "left" : "case 0:",
      "right" : "case 0:",
      "info" : "SwitchCase[89869-89876]:SwitchCase[90558-90565]"
    }, {
      "left" : "return i;",
      "right" : "return i;",
      "info" : "ReturnStatement[89902-89911]:ReturnStatement[90591-90600]"
    }, {
      "left" : "case 1:",
      "right" : "case 1:",
      "info" : "SwitchCase[89924-89931]:SwitchCase[90613-90620]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[89956-89965]:ContinueStatement[90645-90654]"
    }, {
      "left" : "case 2:",
      "right" : "case 2:",
      "info" : "SwitchCase[89978-89985]:SwitchCase[90667-90674]"
    }, {
      "left" : "_skipUtf8_2(i);",
      "right" : "_skipUtf8_2(i);",
      "info" : "ExpressionStatement[90016-90031]:ExpressionStatement[90705-90720]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[90048-90054]:BreakStatement[90737-90743]"
    }, {
      "left" : "case 3:",
      "right" : "case 3:",
      "info" : "SwitchCase[90067-90074]:SwitchCase[90756-90763]"
    }, {
      "left" : "_skipUtf8_3(i);",
      "right" : "_skipUtf8_3(i);",
      "info" : "ExpressionStatement[90105-90120]:ExpressionStatement[90794-90809]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[90137-90143]:BreakStatement[90826-90832]"
    }, {
      "left" : "case 4:",
      "right" : "case 4:",
      "info" : "SwitchCase[90156-90163]:SwitchCase[90845-90852]"
    }, {
      "left" : "_skipUtf8_4(i);",
      "right" : "_skipUtf8_4(i);",
      "info" : "ExpressionStatement[90194-90209]:ExpressionStatement[90883-90898]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[90226-90232]:BreakStatement[90915-90921]"
    }, {
      "left" : "case INT_LF:",
      "right" : "case INT_LF:",
      "info" : "SwitchCase[90245-90257]:SwitchCase[90934-90946]"
    }, {
      "left" : "++_currInputRow;",
      "right" : "++_currInputRow;",
      "info" : "ExpressionStatement[90274-90290]:ExpressionStatement[90963-90979]"
    }, {
      "left" : "_currInputRowStart = _inputPtr;",
      "right" : "_currInputRowStart = _inputPtr;",
      "info" : "ExpressionStatement[90307-90338]:ExpressionStatement[90996-91027]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[90355-90361]:BreakStatement[91044-91050]"
    }, {
      "left" : "case INT_CR:",
      "right" : "case INT_CR:",
      "info" : "SwitchCase[90374-90386]:SwitchCase[91063-91075]"
    }, {
      "left" : "_skipCR();",
      "right" : "_skipCR();",
      "info" : "ExpressionStatement[90403-90413]:ExpressionStatement[91092-91102]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[90430-90436]:BreakStatement[91119-91125]"
    }, {
      "left" : "case '/':",
      "right" : "case '/':",
      "info" : "SwitchCase[90449-90458]:SwitchCase[91138-91147]"
    }, {
      "left" : "_skipComment();",
      "right" : "_skipComment();",
      "info" : "ExpressionStatement[90475-90490]:ExpressionStatement[91164-91179]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[90507-90513]:BreakStatement[91196-91202]"
    }, {
      "left" : "case '#':",
      "right" : "case '#':",
      "info" : "SwitchCase[90526-90535]:SwitchCase[91215-91224]"
    }, {
      "left" : "if (!_skipYAMLComment())",
      "right" : "if (!_skipYAMLComment())",
      "info" : "IfStatement[90552-90626]:IfStatement[91241-91315]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[90577-90626]:Block[91266-91315]"
    }, {
      "left" : "return i;",
      "right" : "return i;",
      "info" : "ReturnStatement[90599-90608]:ReturnStatement[91288-91297]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[90643-90649]:BreakStatement[91332-91338]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[90662-90670]:SwitchCase[91351-91359]"
    }, {
      "left" : "_reportInvalidChar(i);",
      "right" : "_reportInvalidChar(i);",
      "info" : "ExpressionStatement[90789-90811]:ExpressionStatement[91387-91409]"
    }, {
      "left" : "_handleEOF();",
      "right" : "_handleEOF();",
      "info" : "ExpressionStatement[90878-90891]:ExpressionStatement[91476-91489]"
    }, {
      "left" : "return -1;",
      "right" : "return -1;",
      "info" : "ReturnStatement[90900-90910]:ReturnStatement[91498-91508]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[91048-91055]:Modifier[91646-91653]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[91056-91059]:PrimitiveType[91654-91657]"
    }, {
      "left" : "_skipColon",
      "right" : "_skipColon",
      "info" : "SimpleName[91060-91070]:SimpleName[91658-91668]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[91080-91091]:SimpleType[91678-91689]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[91096-93481]:Block[91694-94079]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[91106-91179]:IfStatement[91704-91777]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[91134-91179]:Block[91732-91777]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[91148-91169]:ExpressionStatement[91746-91767]"
    }, {
      "left" : "int i = _inputBuffer[_inputPtr++];",
      "right" : "int i = _inputBuffer[_inputPtr++];",
      "info" : "VariableDeclarationStatement[91257-91291]:VariableDeclarationStatement[91855-91889]"
    }, {
      "left" : "if (i == INT_COLON)",
      "right" : "if (i == INT_COLON)",
      "info" : "IfStatement[91300-92673]:IfStatement[91898-93271]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[91320-91574]:Block[91918-92172]"
    }, {
      "left" : "if (_inputPtr < _inputEnd)",
      "right" : "if (_inputPtr < _inputEnd)",
      "info" : "IfStatement[91334-91564]:IfStatement[91932-92162]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[91361-91564]:Block[91959-92162]"
    }, {
      "left" : "i = _inputBuffer[_inputPtr] & 0xFF;",
      "right" : "i = _inputBuffer[_inputPtr] & 0xFF;",
      "info" : "ExpressionStatement[91379-91414]:ExpressionStatement[91977-92012]"
    }, {
      "left" : "if (i > INT_SPACE && i != INT_SLASH)",
      "right" : "if (i > INT_SPACE && i != INT_SLASH)",
      "info" : "IfStatement[91431-91550]:IfStatement[92029-92148]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[91468-91550]:Block[92066-92148]"
    }, {
      "left" : "++_inputPtr;",
      "right" : "++_inputPtr;",
      "info" : "ExpressionStatement[91490-91502]:ExpressionStatement[92088-92100]"
    }, {
      "left" : "return i;",
      "right" : "return i;",
      "info" : "ReturnStatement[91523-91532]:ReturnStatement[92121-92130]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[91580-92673]:Block[92178-93271]"
    }, {
      "left" : "i &= 0xFF;",
      "right" : "i &= 0xFF;",
      "info" : "ExpressionStatement[91646-91656]:ExpressionStatement[92244-92254]"
    }, {
      "left" : "space_loop:\n            while (true) {\n                switch (i) {\n                case ' ':\n                case '\\t':\n                    break;\n                case INT_CR:\n                    _skipCR();\n                    break;\n                case INT_LF:\n                    ++_currInputRow;\n                    _currInputRowStart = _inputPtr;\n                    break;\n                case '/':\n                    _skipComment();\n                    break;\n                default:\n                    if (i < INT_SPACE) {\n                        _throwInvalidSpace(i);\n                    }\n                    break space_loop;\n                }\n                if (_inputPtr >= _inputEnd) {\n                    loadMoreGuaranteed();\n                }\n                i = _inputBuffer[_inputPtr++] & 0xFF;\n            }",
      "right" : "space_loop:\n            while (true) {\n                switch (i) {\n                case ' ':\n                case '\\t':\n                    break;\n                case INT_CR:\n                    _skipCR();\n                    break;\n                case INT_LF:\n                    ++_currInputRow;\n                    _currInputRowStart = _inputPtr;\n                    break;\n                case '/':\n                    _skipComment();\n                    break;\n                default:\n                    if (i < INT_SPACE) {\n                        _throwInvalidSpace(i);\n                    }\n                    break space_loop;\n                }\n                if (_inputPtr >= _inputEnd) {\n                    loadMoreGuaranteed();\n                }\n                i = _inputBuffer[_inputPtr++] & 0xFF;\n            }",
      "info" : "LabeledStatement[91682-92515]:LabeledStatement[92280-93113]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[91706-92515]:WhileStatement[92304-93113]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[91719-92515]:Block[92317-93113]"
    }, {
      "left" : "switch (i) {\n                case ' ':\n                case '\\t':\n                    break;\n                case INT_CR:\n                    _skipCR();\n                    break;\n                case INT_LF:\n                    ++_currInputRow;\n                    _currInputRowStart = _inputPtr;\n                    break;\n                case '/':\n                    _skipComment();\n                    break;\n                default:\n                    if (i < INT_SPACE) {\n                        _throwInvalidSpace(i);\n                    }\n                    break space_loop;\n                }",
      "right" : "switch (i) {\n                case ' ':\n                case '\\t':\n                    break;\n                case INT_CR:\n                    _skipCR();\n                    break;\n                case INT_LF:\n                    ++_currInputRow;\n                    _currInputRowStart = _inputPtr;\n                    break;\n                case '/':\n                    _skipComment();\n                    break;\n                default:\n                    if (i < INT_SPACE) {\n                        _throwInvalidSpace(i);\n                    }\n                    break space_loop;\n                }",
      "info" : "SwitchStatement[91737-92341]:SwitchStatement[92335-92939]"
    }, {
      "left" : "case ' ':",
      "right" : "case ' ':",
      "info" : "SwitchCase[91766-91775]:SwitchCase[92364-92373]"
    }, {
      "left" : "case '\\t':",
      "right" : "case '\\t':",
      "info" : "SwitchCase[91792-91802]:SwitchCase[92390-92400]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[91823-91829]:BreakStatement[92421-92427]"
    }, {
      "left" : "case INT_CR:",
      "right" : "case INT_CR:",
      "info" : "SwitchCase[91846-91858]:SwitchCase[92444-92456]"
    }, {
      "left" : "_skipCR();",
      "right" : "_skipCR();",
      "info" : "ExpressionStatement[91879-91889]:ExpressionStatement[92477-92487]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[91910-91916]:BreakStatement[92508-92514]"
    }, {
      "left" : "case INT_LF:",
      "right" : "case INT_LF:",
      "info" : "SwitchCase[91933-91945]:SwitchCase[92531-92543]"
    }, {
      "left" : "++_currInputRow;",
      "right" : "++_currInputRow;",
      "info" : "ExpressionStatement[91966-91982]:ExpressionStatement[92564-92580]"
    }, {
      "left" : "_currInputRowStart = _inputPtr;",
      "right" : "_currInputRowStart = _inputPtr;",
      "info" : "ExpressionStatement[92003-92034]:ExpressionStatement[92601-92632]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[92055-92061]:BreakStatement[92653-92659]"
    }, {
      "left" : "case '/':",
      "right" : "case '/':",
      "info" : "SwitchCase[92078-92087]:SwitchCase[92676-92685]"
    }, {
      "left" : "_skipComment();",
      "right" : "_skipComment();",
      "info" : "ExpressionStatement[92108-92123]:ExpressionStatement[92706-92721]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[92144-92150]:BreakStatement[92742-92748]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[92167-92175]:SwitchCase[92765-92773]"
    }, {
      "left" : "if (i < INT_SPACE)",
      "right" : "if (i < INT_SPACE)",
      "info" : "IfStatement[92196-92285]:IfStatement[92794-92883]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[92215-92285]:Block[92813-92883]"
    }, {
      "left" : "_throwInvalidSpace(i);",
      "right" : "_throwInvalidSpace(i);",
      "info" : "ExpressionStatement[92241-92263]:ExpressionStatement[92839-92861]"
    }, {
      "left" : "break space_loop;",
      "right" : "break space_loop;",
      "info" : "BreakStatement[92306-92323]:BreakStatement[92904-92921]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[92358-92447]:IfStatement[92956-93045]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[92386-92447]:Block[92984-93045]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[92408-92429]:ExpressionStatement[93006-93027]"
    }, {
      "left" : "i = _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "i = _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[92464-92501]:ExpressionStatement[93062-93099]"
    }, {
      "left" : "if (i != INT_COLON)",
      "right" : "if (i != INT_COLON)",
      "info" : "IfStatement[92528-92663]:IfStatement[93126-93261]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[92548-92663]:Block[93146-93261]"
    }, {
      "left" : "_reportUnexpectedChar(i, \"was expecting a colon to separate field name and value\");",
      "right" : "_reportUnexpectedChar(i, \"was expecting a colon to separate field name and value\");",
      "info" : "ExpressionStatement[92566-92649]:ExpressionStatement[93164-93247]"
    }, {
      "left" : "while (_inputPtr < _inputEnd || loadMore())",
      "right" : "while (_inputPtr < _inputEnd || loadMore())",
      "info" : "WhileStatement[92748-93360]:WhileStatement[93346-93958]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[92792-93360]:Block[93390-93958]"
    }, {
      "left" : "i = _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "i = _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[92806-92843]:ExpressionStatement[93404-93441]"
    }, {
      "left" : "if (i > INT_SPACE)",
      "right" : "if (i > INT_SPACE)",
      "info" : "IfStatement[92856-93350]:IfStatement[93454-93948]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[92875-93008]:Block[93473-93606]"
    }, {
      "left" : "if (i != INT_SLASH)",
      "right" : "if (i != INT_SLASH)",
      "info" : "IfStatement[92893-92962]:IfStatement[93491-93560]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[92913-92962]:Block[93511-93560]"
    }, {
      "left" : "return i;",
      "right" : "return i;",
      "info" : "ReturnStatement[92935-92944]:ReturnStatement[93533-93542]"
    }, {
      "left" : "_skipComment();",
      "right" : "_skipComment();",
      "info" : "ExpressionStatement[92979-92994]:ExpressionStatement[93577-93592]"
    }, {
      "left" : "if (i != INT_SPACE)",
      "right" : "if (i != INT_SPACE)",
      "info" : "IfStatement[93014-93350]:IfStatement[93612-93948]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[93034-93350]:Block[93632-93948]"
    }, {
      "left" : "if (i == INT_LF)",
      "right" : "if (i == INT_LF)",
      "info" : "IfStatement[93052-93336]:IfStatement[93650-93934]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[93069-93177]:Block[93667-93775]"
    }, {
      "left" : "++_currInputRow;",
      "right" : "++_currInputRow;",
      "info" : "ExpressionStatement[93091-93107]:ExpressionStatement[93689-93705]"
    }, {
      "left" : "_currInputRowStart = _inputPtr;",
      "right" : "_currInputRowStart = _inputPtr;",
      "info" : "ExpressionStatement[93128-93159]:ExpressionStatement[93726-93757]"
    }, {
      "left" : "if (i == INT_CR)",
      "right" : "if (i == INT_CR)",
      "info" : "IfStatement[93183-93336]:IfStatement[93781-93934]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[93200-93250]:Block[93798-93848]"
    }, {
      "left" : "_skipCR();",
      "right" : "_skipCR();",
      "info" : "ExpressionStatement[93222-93232]:ExpressionStatement[93820-93830]"
    }, {
      "left" : "if (i != INT_TAB)",
      "right" : "if (i != INT_TAB)",
      "info" : "IfStatement[93256-93336]:IfStatement[93854-93934]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[93274-93336]:Block[93872-93934]"
    }, {
      "left" : "_throwInvalidSpace(i);",
      "right" : "_throwInvalidSpace(i);",
      "info" : "ExpressionStatement[93296-93318]:ExpressionStatement[93894-93916]"
    }, {
      "left" : "throw _constructError(\"Unexpected end-of-input within/between \"+_parsingContext.getTypeDesc()+\" entries\");",
      "right" : "throw _constructError(\"Unexpected end-of-input within/between \"+_parsingContext.getTypeDesc()+\" entries\");",
      "info" : "ThrowStatement[93369-93475]:ThrowStatement[93967-94073]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[93491-93498]:Modifier[94089-94096]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[93499-93503]:PrimitiveType[94097-94101]"
    }, {
      "left" : "_skipComment",
      "right" : "_skipComment",
      "info" : "SimpleName[93504-93516]:SimpleName[94102-94114]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[93526-93537]:SimpleType[94124-94135]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[93542-94203]:Block[94140-94801]"
    }, {
      "left" : "if (!isEnabled(Feature.ALLOW_COMMENTS))",
      "right" : "if (!isEnabled(Feature.ALLOW_COMMENTS))",
      "info" : "IfStatement[93552-93756]:IfStatement[94150-94354]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[93592-93756]:Block[94190-94354]"
    }, {
      "left" : "_reportUnexpectedChar('/', \"maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)\");",
      "right" : "_reportUnexpectedChar('/', \"maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)\");",
      "info" : "ExpressionStatement[93606-93746]:ExpressionStatement[94204-94344]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd && !loadMore())",
      "right" : "if (_inputPtr >= _inputEnd && !loadMore())",
      "info" : "IfStatement[93822-93924]:IfStatement[94420-94522]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[93865-93924]:Block[94463-94522]"
    }, {
      "left" : "_reportInvalidEOF(\" in a comment\");",
      "right" : "_reportInvalidEOF(\" in a comment\");",
      "info" : "ExpressionStatement[93879-93914]:ExpressionStatement[94477-94512]"
    }, {
      "left" : "int c = _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "int c = _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "VariableDeclarationStatement[93933-93974]:VariableDeclarationStatement[94531-94572]"
    }, {
      "left" : "if (c == '/')",
      "right" : "if (c == '/')",
      "info" : "IfStatement[93983-94197]:IfStatement[94581-94795]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[93997-94033]:Block[94595-94631]"
    }, {
      "left" : "_skipLine();",
      "right" : "_skipLine();",
      "info" : "ExpressionStatement[94011-94023]:ExpressionStatement[94609-94621]"
    }, {
      "left" : "if (c == '*')",
      "right" : "if (c == '*')",
      "info" : "IfStatement[94039-94197]:IfStatement[94637-94795]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[94053-94093]:Block[94651-94691]"
    }, {
      "left" : "_skipCComment();",
      "right" : "_skipCComment();",
      "info" : "ExpressionStatement[94067-94083]:ExpressionStatement[94665-94681]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[94099-94197]:Block[94697-94795]"
    }, {
      "left" : "_reportUnexpectedChar(c, \"was expecting either '*' or '/' for a comment\");",
      "right" : "_reportUnexpectedChar(c, \"was expecting either '*' or '/' for a comment\");",
      "info" : "ExpressionStatement[94113-94187]:ExpressionStatement[94711-94785]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[94209-94216]:Modifier[94807-94814]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[94217-94221]:PrimitiveType[94815-94819]"
    }, {
      "left" : "_skipCComment",
      "right" : "_skipCComment",
      "info" : "SimpleName[94222-94235]:SimpleName[94820-94833]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[94245-94256]:SimpleType[94843-94854]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[94261-95763]:Block[94859-96361]"
    }, {
      "left" : "final int[] codes = CharTypes.getInputCodeComment();",
      "right" : "final int[] codes = CharTypes.getInputCodeComment();",
      "info" : "VariableDeclarationStatement[94343-94395]:VariableDeclarationStatement[94941-94993]"
    }, {
      "left" : "main_loop:\n        while ((_inputPtr < _inputEnd) || loadMore()) {\n            int i = (int) _inputBuffer[_inputPtr++] & 0xFF;\n            int code = codes[i];\n            if (code != 0) {\n                switch (code) {\n                case '*':\n                    if (_inputPtr >= _inputEnd && !loadMore()) {\n                        break main_loop;\n                    }\n                    if (_inputBuffer[_inputPtr] == INT_SLASH) {\n                        ++_inputPtr;\n                        return;\n                    }\n                    break;\n                case INT_LF:\n                    ++_currInputRow;\n                    _currInputRowStart = _inputPtr;\n                    break;\n                case INT_CR:\n                    _skipCR();\n                    break;\n                case 2: // 2-byte UTF\n                    _skipUtf8_2(i);\n                    break;\n                case 3: // 3-byte UTF\n                    _skipUtf8_3(i);\n                    break;\n                case 4: // 4-byte UTF\n                    _skipUtf8_4(i);\n                    break;\n                default: // e.g. -1\n                    // Is this good enough error message?\n                    _reportInvalidChar(i);\n                }\n            }\n        }",
      "right" : "main_loop:\n        while ((_inputPtr < _inputEnd) || loadMore()) {\n            int i = (int) _inputBuffer[_inputPtr++] & 0xFF;\n            int code = codes[i];\n            if (code != 0) {\n                switch (code) {\n                case '*':\n                    if (_inputPtr >= _inputEnd && !loadMore()) {\n                        break main_loop;\n                    }\n                    if (_inputBuffer[_inputPtr] == INT_SLASH) {\n                        ++_inputPtr;\n                        return;\n                    }\n                    break;\n                case INT_LF:\n                    ++_currInputRow;\n                    _currInputRowStart = _inputPtr;\n                    break;\n                case INT_CR:\n                    _skipCR();\n                    break;\n                case 2: // 2-byte UTF\n                    _skipUtf8_2(i);\n                    break;\n                case 3: // 3-byte UTF\n                    _skipUtf8_3(i);\n                    break;\n                case 4: // 4-byte UTF\n                    _skipUtf8_4(i);\n                    break;\n                default: // e.g. -1\n                    // Is this good enough error message?\n                    _reportInvalidChar(i);\n                }\n            }\n        }",
      "info" : "LabeledStatement[94443-95713]:LabeledStatement[95041-96311]"
    }, {
      "left" : "while ((_inputPtr < _inputEnd) || loadMore())",
      "right" : "while ((_inputPtr < _inputEnd) || loadMore())",
      "info" : "WhileStatement[94462-95713]:WhileStatement[95060-96311]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[94508-95713]:Block[95106-96311]"
    }, {
      "left" : "int i = (int) _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "int i = (int) _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "VariableDeclarationStatement[94522-94569]:VariableDeclarationStatement[95120-95167]"
    }, {
      "left" : "int code = codes[i];",
      "right" : "int code = codes[i];",
      "info" : "VariableDeclarationStatement[94582-94602]:VariableDeclarationStatement[95180-95200]"
    }, {
      "left" : "if (code != 0)",
      "right" : "if (code != 0)",
      "info" : "IfStatement[94615-95703]:IfStatement[95213-96301]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[94630-95703]:Block[95228-96301]"
    }, {
      "left" : "switch (code) {\n                case '*':\n                    if (_inputPtr >= _inputEnd && !loadMore()) {\n                        break main_loop;\n                    }\n                    if (_inputBuffer[_inputPtr] == INT_SLASH) {\n                        ++_inputPtr;\n                        return;\n                    }\n                    break;\n                case INT_LF:\n                    ++_currInputRow;\n                    _currInputRowStart = _inputPtr;\n                    break;\n                case INT_CR:\n                    _skipCR();\n                    break;\n                case 2: // 2-byte UTF\n                    _skipUtf8_2(i);\n                    break;\n                case 3: // 3-byte UTF\n                    _skipUtf8_3(i);\n                    break;\n                case 4: // 4-byte UTF\n                    _skipUtf8_4(i);\n                    break;\n                default: // e.g. -1\n                    // Is this good enough error message?\n                    _reportInvalidChar(i);\n                }",
      "right" : "switch (code) {\n                case '*':\n                    if (_inputPtr >= _inputEnd && !loadMore()) {\n                        break main_loop;\n                    }\n                    if (_inputBuffer[_inputPtr] == INT_SLASH) {\n                        ++_inputPtr;\n                        return;\n                    }\n                    break;\n                case INT_LF:\n                    ++_currInputRow;\n                    _currInputRowStart = _inputPtr;\n                    break;\n                case INT_CR:\n                    _skipCR();\n                    break;\n                case 2: // 2-byte UTF\n                    _skipUtf8_2(i);\n                    break;\n                case 3: // 3-byte UTF\n                    _skipUtf8_3(i);\n                    break;\n                case 4: // 4-byte UTF\n                    _skipUtf8_4(i);\n                    break;\n                default: // e.g. -1\n                    // Is this good enough error message?\n                    _reportInvalidChar(i);\n                }",
      "info" : "SwitchStatement[94648-95689]:SwitchStatement[95246-96287]"
    }, {
      "left" : "case '*':",
      "right" : "case '*':",
      "info" : "SwitchCase[94680-94689]:SwitchCase[95278-95287]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd && !loadMore())",
      "right" : "if (_inputPtr >= _inputEnd && !loadMore())",
      "info" : "IfStatement[94710-94817]:IfStatement[95308-95415]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[94753-94817]:Block[95351-95415]"
    }, {
      "left" : "break main_loop;",
      "right" : "break main_loop;",
      "info" : "BreakStatement[94779-94795]:BreakStatement[95377-95393]"
    }, {
      "left" : "if (_inputBuffer[_inputPtr] == INT_SLASH)",
      "right" : "if (_inputBuffer[_inputPtr] == INT_SLASH)",
      "info" : "IfStatement[94838-94972]:IfStatement[95436-95570]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[94880-94972]:Block[95478-95570]"
    }, {
      "left" : "++_inputPtr;",
      "right" : "++_inputPtr;",
      "info" : "ExpressionStatement[94906-94918]:ExpressionStatement[95504-95516]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[94943-94950]:ReturnStatement[95541-95548]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[94993-94999]:BreakStatement[95591-95597]"
    }, {
      "left" : "case INT_LF:",
      "right" : "case INT_LF:",
      "info" : "SwitchCase[95016-95028]:SwitchCase[95614-95626]"
    }, {
      "left" : "++_currInputRow;",
      "right" : "++_currInputRow;",
      "info" : "ExpressionStatement[95049-95065]:ExpressionStatement[95647-95663]"
    }, {
      "left" : "_currInputRowStart = _inputPtr;",
      "right" : "_currInputRowStart = _inputPtr;",
      "info" : "ExpressionStatement[95086-95117]:ExpressionStatement[95684-95715]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[95138-95144]:BreakStatement[95736-95742]"
    }, {
      "left" : "case INT_CR:",
      "right" : "case INT_CR:",
      "info" : "SwitchCase[95161-95173]:SwitchCase[95759-95771]"
    }, {
      "left" : "_skipCR();",
      "right" : "_skipCR();",
      "info" : "ExpressionStatement[95194-95204]:ExpressionStatement[95792-95802]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[95225-95231]:BreakStatement[95823-95829]"
    }, {
      "left" : "case 2:",
      "right" : "case 2:",
      "info" : "SwitchCase[95248-95255]:SwitchCase[95846-95853]"
    }, {
      "left" : "_skipUtf8_2(i);",
      "right" : "_skipUtf8_2(i);",
      "info" : "ExpressionStatement[95290-95305]:ExpressionStatement[95888-95903]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[95326-95332]:BreakStatement[95924-95930]"
    }, {
      "left" : "case 3:",
      "right" : "case 3:",
      "info" : "SwitchCase[95349-95356]:SwitchCase[95947-95954]"
    }, {
      "left" : "_skipUtf8_3(i);",
      "right" : "_skipUtf8_3(i);",
      "info" : "ExpressionStatement[95391-95406]:ExpressionStatement[95989-96004]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[95427-95433]:BreakStatement[96025-96031]"
    }, {
      "left" : "case 4:",
      "right" : "case 4:",
      "info" : "SwitchCase[95450-95457]:SwitchCase[96048-96055]"
    }, {
      "left" : "_skipUtf8_4(i);",
      "right" : "_skipUtf8_4(i);",
      "info" : "ExpressionStatement[95492-95507]:ExpressionStatement[96090-96105]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[95528-95534]:BreakStatement[96126-96132]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[95551-95559]:SwitchCase[96149-96157]"
    }, {
      "left" : "_reportInvalidChar(i);",
      "right" : "_reportInvalidChar(i);",
      "info" : "ExpressionStatement[95649-95671]:ExpressionStatement[96247-96269]"
    }, {
      "left" : "_reportInvalidEOF(\" in a comment\");",
      "right" : "_reportInvalidEOF(\" in a comment\");",
      "info" : "ExpressionStatement[95722-95757]:ExpressionStatement[96320-96355]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[95769-95776]:Modifier[96367-96374]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[95777-95784]:PrimitiveType[96375-96382]"
    }, {
      "left" : "_skipYAMLComment",
      "right" : "_skipYAMLComment",
      "info" : "SimpleName[95785-95801]:SimpleName[96383-96399]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[95811-95822]:SimpleType[96409-96420]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[95827-95967]:Block[96425-96565]"
    }, {
      "left" : "if (!isEnabled(Feature.ALLOW_YAML_COMMENTS))",
      "right" : "if (!isEnabled(Feature.ALLOW_YAML_COMMENTS))",
      "info" : "IfStatement[95837-95919]:IfStatement[96435-96517]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[95882-95919]:Block[96480-96517]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[95896-95909]:ReturnStatement[96494-96507]"
    }, {
      "left" : "_skipLine();",
      "right" : "_skipLine();",
      "info" : "ExpressionStatement[95928-95940]:ExpressionStatement[96526-96538]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[95949-95961]:ReturnStatement[96547-96559]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[96091-96098]:Modifier[96689-96696]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[96099-96103]:PrimitiveType[96697-96701]"
    }, {
      "left" : "_skipLine",
      "right" : "_skipLine",
      "info" : "SimpleName[96104-96113]:SimpleName[96702-96711]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[96123-96134]:SimpleType[96721-96732]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[96139-97322]:Block[96737-97920]"
    }, {
      "left" : "final int[] codes = CharTypes.getInputCodeComment();",
      "right" : "final int[] codes = CharTypes.getInputCodeComment();",
      "info" : "VariableDeclarationStatement[96193-96245]:VariableDeclarationStatement[96791-96843]"
    }, {
      "left" : "while ((_inputPtr < _inputEnd) || loadMore())",
      "right" : "while ((_inputPtr < _inputEnd) || loadMore())",
      "info" : "WhileStatement[96254-97316]:WhileStatement[96852-97914]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[96300-97316]:Block[96898-97914]"
    }, {
      "left" : "int i = (int) _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "int i = (int) _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "VariableDeclarationStatement[96314-96361]:VariableDeclarationStatement[96912-96959]"
    }, {
      "left" : "int code = codes[i];",
      "right" : "int code = codes[i];",
      "info" : "VariableDeclarationStatement[96374-96394]:VariableDeclarationStatement[96972-96992]"
    }, {
      "left" : "if (code != 0)",
      "right" : "if (code != 0)",
      "info" : "IfStatement[96407-97306]:IfStatement[97005-97904]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[96422-97306]:Block[97020-97904]"
    }, {
      "left" : "switch (code) {\n                case INT_LF:\n                    ++_currInputRow;\n                    _currInputRowStart = _inputPtr;\n                    return;\n                case INT_CR:\n                    _skipCR();\n                    return;\n                case '*': // nop for these comments\n                    break;\n                case 2: // 2-byte UTF\n                    _skipUtf8_2(i);\n                    break;\n                case 3: // 3-byte UTF\n                    _skipUtf8_3(i);\n                    break;\n                case 4: // 4-byte UTF\n                    _skipUtf8_4(i);\n                    break;\n                default: // e.g. -1\n                    if (code < 0) {\n                        // Is this good enough error message?\n                        _reportInvalidChar(i);\n                    }\n                }",
      "right" : "switch (code) {\n                case INT_LF:\n                    ++_currInputRow;\n                    _currInputRowStart = _inputPtr;\n                    return;\n                case INT_CR:\n                    _skipCR();\n                    return;\n                case '*': // nop for these comments\n                    break;\n                case 2: // 2-byte UTF\n                    _skipUtf8_2(i);\n                    break;\n                case 3: // 3-byte UTF\n                    _skipUtf8_3(i);\n                    break;\n                case 4: // 4-byte UTF\n                    _skipUtf8_4(i);\n                    break;\n                default: // e.g. -1\n                    if (code < 0) {\n                        // Is this good enough error message?\n                        _reportInvalidChar(i);\n                    }\n                }",
      "info" : "SwitchStatement[96440-97292]:SwitchStatement[97038-97890]"
    }, {
      "left" : "case INT_LF:",
      "right" : "case INT_LF:",
      "info" : "SwitchCase[96472-96484]:SwitchCase[97070-97082]"
    }, {
      "left" : "++_currInputRow;",
      "right" : "++_currInputRow;",
      "info" : "ExpressionStatement[96505-96521]:ExpressionStatement[97103-97119]"
    }, {
      "left" : "_currInputRowStart = _inputPtr;",
      "right" : "_currInputRowStart = _inputPtr;",
      "info" : "ExpressionStatement[96542-96573]:ExpressionStatement[97140-97171]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[96594-96601]:ReturnStatement[97192-97199]"
    }, {
      "left" : "case INT_CR:",
      "right" : "case INT_CR:",
      "info" : "SwitchCase[96618-96630]:SwitchCase[97216-97228]"
    }, {
      "left" : "_skipCR();",
      "right" : "_skipCR();",
      "info" : "ExpressionStatement[96651-96661]:ExpressionStatement[97249-97259]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[96682-96689]:ReturnStatement[97280-97287]"
    }, {
      "left" : "case '*':",
      "right" : "case '*':",
      "info" : "SwitchCase[96706-96715]:SwitchCase[97304-97313]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[96762-96768]:BreakStatement[97360-97366]"
    }, {
      "left" : "case 2:",
      "right" : "case 2:",
      "info" : "SwitchCase[96785-96792]:SwitchCase[97383-97390]"
    }, {
      "left" : "_skipUtf8_2(i);",
      "right" : "_skipUtf8_2(i);",
      "info" : "ExpressionStatement[96827-96842]:ExpressionStatement[97425-97440]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[96863-96869]:BreakStatement[97461-97467]"
    }, {
      "left" : "case 3:",
      "right" : "case 3:",
      "info" : "SwitchCase[96886-96893]:SwitchCase[97484-97491]"
    }, {
      "left" : "_skipUtf8_3(i);",
      "right" : "_skipUtf8_3(i);",
      "info" : "ExpressionStatement[96928-96943]:ExpressionStatement[97526-97541]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[96964-96970]:BreakStatement[97562-97568]"
    }, {
      "left" : "case 4:",
      "right" : "case 4:",
      "info" : "SwitchCase[96987-96994]:SwitchCase[97585-97592]"
    }, {
      "left" : "_skipUtf8_4(i);",
      "right" : "_skipUtf8_4(i);",
      "info" : "ExpressionStatement[97029-97044]:ExpressionStatement[97627-97642]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[97065-97071]:BreakStatement[97663-97669]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[97088-97096]:SwitchCase[97686-97694]"
    }, {
      "left" : "if (code < 0)",
      "right" : "if (code < 0)",
      "info" : "IfStatement[97128-97274]:IfStatement[97726-97872]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[97142-97274]:Block[97740-97872]"
    }, {
      "left" : "_reportInvalidChar(i);",
      "right" : "_reportInvalidChar(i);",
      "info" : "ExpressionStatement[97230-97252]:ExpressionStatement[97828-97850]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[97332-97341]:MarkerAnnotation[97930-97939]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[97346-97355]:Modifier[97944-97953]"
    }, {
      "left" : "char",
      "right" : "char",
      "info" : "PrimitiveType[97356-97360]:PrimitiveType[97954-97958]"
    }, {
      "left" : "_decodeEscaped",
      "right" : "_decodeEscaped",
      "info" : "SimpleName[97361-97375]:SimpleName[97959-97973]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[97385-97396]:SimpleType[97983-97994]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[97401-98838]:Block[97999-99436]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[97411-97563]:IfStatement[98009-98161]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[97439-97563]:Block[98037-98161]"
    }, {
      "left" : "if (!loadMore())",
      "right" : "if (!loadMore())",
      "info" : "IfStatement[97453-97553]:IfStatement[98051-98151]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[97470-97553]:Block[98068-98151]"
    }, {
      "left" : "_reportInvalidEOF(\" in character escape sequence\");",
      "right" : "_reportInvalidEOF(\" in character escape sequence\");",
      "info" : "ExpressionStatement[97488-97539]:ExpressionStatement[98086-98137]"
    }, {
      "left" : "int c = (int) _inputBuffer[_inputPtr++];",
      "right" : "int c = (int) _inputBuffer[_inputPtr++];",
      "info" : "VariableDeclarationStatement[97572-97612]:VariableDeclarationStatement[98170-98210]"
    }, {
      "left" : "switch ((int) c) {\n            // First, ones that are mapped\n        case 'b':\n            return '\\b';\n        case 't':\n            return '\\t';\n        case 'n':\n            return '\\n';\n        case 'f':\n            return '\\f';\n        case 'r':\n            return '\\r';\n\n            // And these are to be returned as they are\n        case '\"':\n        case '/':\n        case '\\\\':\n            return (char) c;\n\n        case 'u': // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }",
      "right" : "switch ((int) c) {\n            // First, ones that are mapped\n        case 'b':\n            return '\\b';\n        case 't':\n            return '\\t';\n        case 'n':\n            return '\\n';\n        case 'f':\n            return '\\f';\n        case 'r':\n            return '\\r';\n\n            // And these are to be returned as they are\n        case '\"':\n        case '/':\n        case '\\\\':\n            return (char) c;\n\n        case 'u': // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }",
      "info" : "SwitchStatement[97622-98218]:SwitchStatement[98220-98816]"
    }, {
      "left" : "case 'b':",
      "right" : "case 'b':",
      "info" : "SwitchCase[97692-97701]:SwitchCase[98290-98299]"
    }, {
      "left" : "return '\\b';",
      "right" : "return '\\b';",
      "info" : "ReturnStatement[97714-97726]:ReturnStatement[98312-98324]"
    }, {
      "left" : "case 't':",
      "right" : "case 't':",
      "info" : "SwitchCase[97735-97744]:SwitchCase[98333-98342]"
    }, {
      "left" : "return '\\t';",
      "right" : "return '\\t';",
      "info" : "ReturnStatement[97757-97769]:ReturnStatement[98355-98367]"
    }, {
      "left" : "case 'n':",
      "right" : "case 'n':",
      "info" : "SwitchCase[97778-97787]:SwitchCase[98376-98385]"
    }, {
      "left" : "return '\\n';",
      "right" : "return '\\n';",
      "info" : "ReturnStatement[97800-97812]:ReturnStatement[98398-98410]"
    }, {
      "left" : "case 'f':",
      "right" : "case 'f':",
      "info" : "SwitchCase[97821-97830]:SwitchCase[98419-98428]"
    }, {
      "left" : "return '\\f';",
      "right" : "return '\\f';",
      "info" : "ReturnStatement[97843-97855]:ReturnStatement[98441-98453]"
    }, {
      "left" : "case 'r':",
      "right" : "case 'r':",
      "info" : "SwitchCase[97864-97873]:SwitchCase[98462-98471]"
    }, {
      "left" : "return '\\r';",
      "right" : "return '\\r';",
      "info" : "ReturnStatement[97886-97898]:ReturnStatement[98484-98496]"
    }, {
      "left" : "case '\"':",
      "right" : "case '\"':",
      "info" : "SwitchCase[97964-97973]:SwitchCase[98562-98571]"
    }, {
      "left" : "case '/':",
      "right" : "case '/':",
      "info" : "SwitchCase[97982-97991]:SwitchCase[98580-98589]"
    }, {
      "left" : "case '\\\\':",
      "right" : "case '\\\\':",
      "info" : "SwitchCase[98000-98010]:SwitchCase[98598-98608]"
    }, {
      "left" : "return (char) c;",
      "right" : "return (char) c;",
      "info" : "ReturnStatement[98023-98039]:ReturnStatement[98621-98637]"
    }, {
      "left" : "case 'u':",
      "right" : "case 'u':",
      "info" : "SwitchCase[98049-98058]:SwitchCase[98647-98656]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[98098-98104]:BreakStatement[98696-98702]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[98114-98122]:SwitchCase[98712-98720]"
    }, {
      "left" : "return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));",
      "right" : "return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));",
      "info" : "ReturnStatement[98135-98208]:ReturnStatement[98733-98806]"
    }, {
      "left" : "int value = 0;",
      "right" : "int value = 0;",
      "info" : "VariableDeclarationStatement[98275-98289]:VariableDeclarationStatement[98873-98887]"
    }, {
      "left" : "for (int i = 0; i < 4; ++i)",
      "right" : "for (int i = 0; i < 4; ++i)",
      "info" : "ForStatement[98298-98803]:ForStatement[98896-99401]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[98326-98803]:Block[98924-99401]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[98340-98508]:IfStatement[98938-99106]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[98368-98508]:Block[98966-99106]"
    }, {
      "left" : "if (!loadMore())",
      "right" : "if (!loadMore())",
      "info" : "IfStatement[98386-98494]:IfStatement[98984-99092]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[98403-98494]:Block[99001-99092]"
    }, {
      "left" : "_reportInvalidEOF(\" in character escape sequence\");",
      "right" : "_reportInvalidEOF(\" in character escape sequence\");",
      "info" : "ExpressionStatement[98425-98476]:ExpressionStatement[99023-99074]"
    }, {
      "left" : "int ch = (int) _inputBuffer[_inputPtr++];",
      "right" : "int ch = (int) _inputBuffer[_inputPtr++];",
      "info" : "VariableDeclarationStatement[98521-98562]:VariableDeclarationStatement[99119-99160]"
    }, {
      "left" : "int digit = CharTypes.charToHex(ch);",
      "right" : "int digit = CharTypes.charToHex(ch);",
      "info" : "VariableDeclarationStatement[98575-98611]:VariableDeclarationStatement[99173-99209]"
    }, {
      "left" : "if (digit < 0)",
      "right" : "if (digit < 0)",
      "info" : "IfStatement[98624-98751]:IfStatement[99222-99349]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[98639-98751]:Block[99237-99349]"
    }, {
      "left" : "_reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");",
      "right" : "_reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");",
      "info" : "ExpressionStatement[98657-98737]:ExpressionStatement[99255-99335]"
    }, {
      "left" : "value = (value << 4) | digit;",
      "right" : "value = (value << 4) | digit;",
      "info" : "ExpressionStatement[98764-98793]:ExpressionStatement[99362-99391]"
    }, {
      "left" : "return (char) value;",
      "right" : "return (char) value;",
      "info" : "ReturnStatement[98812-98832]:ReturnStatement[99410-99430]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[98844-98853]:Modifier[99442-99451]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[98854-98857]:PrimitiveType[99452-99455]"
    }, {
      "left" : "_decodeCharForError",
      "right" : "_decodeCharForError",
      "info" : "SimpleName[98858-98877]:SimpleName[99456-99475]"
    }, {
      "left" : "int firstByte",
      "right" : "int firstByte",
      "info" : "SingleVariableDeclaration[98878-98891]:SingleVariableDeclaration[99476-99489]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[98900-98911]:SimpleType[99498-99509]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[98916-100444]:Block[99514-101042]"
    }, {
      "left" : "int c = (int) firstByte;",
      "right" : "int c = (int) firstByte;",
      "info" : "VariableDeclarationStatement[98926-98950]:VariableDeclarationStatement[99524-99548]"
    }, {
      "left" : "if (c < 0)",
      "right" : "if (c < 0)",
      "info" : "IfStatement[98959-100420]:IfStatement[99557-101018]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[98970-100420]:Block[99568-101018]"
    }, {
      "left" : "int needed;",
      "right" : "int needed;",
      "info" : "VariableDeclarationStatement[99020-99031]:VariableDeclarationStatement[99618-99629]"
    }, {
      "left" : "if ((c & 0xE0) == 0xC0)",
      "right" : "if ((c & 0xE0) == 0xC0)",
      "info" : "IfStatement[99122-99658]:IfStatement[99720-100256]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[99146-99245]:Block[99744-99843]"
    }, {
      "left" : "c &= 0x1F;",
      "right" : "c &= 0x1F;",
      "info" : "ExpressionStatement[99193-99203]:ExpressionStatement[99791-99801]"
    }, {
      "left" : "needed = 1;",
      "right" : "needed = 1;",
      "info" : "ExpressionStatement[99220-99231]:ExpressionStatement[99818-99829]"
    }, {
      "left" : "if ((c & 0xF0) == 0xE0)",
      "right" : "if ((c & 0xF0) == 0xE0)",
      "info" : "IfStatement[99251-99658]:IfStatement[99849-100256]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[99275-99374]:Block[99873-99972]"
    }, {
      "left" : "c &= 0x0F;",
      "right" : "c &= 0x0F;",
      "info" : "ExpressionStatement[99322-99332]:ExpressionStatement[99920-99930]"
    }, {
      "left" : "needed = 2;",
      "right" : "needed = 2;",
      "info" : "ExpressionStatement[99349-99360]:ExpressionStatement[99947-99958]"
    }, {
      "left" : "if ((c & 0xF8) == 0xF0)",
      "right" : "if ((c & 0xF8) == 0xF0)",
      "info" : "IfStatement[99380-99658]:IfStatement[99978-100256]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[99404-99541]:Block[100002-100139]"
    }, {
      "left" : "c &= 0x07;",
      "right" : "c &= 0x07;",
      "info" : "ExpressionStatement[99489-99499]:ExpressionStatement[100087-100097]"
    }, {
      "left" : "needed = 3;",
      "right" : "needed = 3;",
      "info" : "ExpressionStatement[99516-99527]:ExpressionStatement[100114-100125]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[99547-99658]:Block[100145-100256]"
    }, {
      "left" : "_reportInvalidInitial(c & 0xFF);",
      "right" : "_reportInvalidInitial(c & 0xFF);",
      "info" : "ExpressionStatement[99565-99597]:ExpressionStatement[100163-100195]"
    }, {
      "left" : "needed = 1;",
      "right" : "needed = 1;",
      "info" : "ExpressionStatement[99614-99625]:ExpressionStatement[100212-100223]"
    }, {
      "left" : "int d = nextByte();",
      "right" : "int d = nextByte();",
      "info" : "VariableDeclarationStatement[99672-99691]:VariableDeclarationStatement[100270-100289]"
    }, {
      "left" : "if ((d & 0xC0) != 0x080)",
      "right" : "if ((d & 0xC0) != 0x080)",
      "info" : "IfStatement[99704-99791]:IfStatement[100302-100389]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[99729-99791]:Block[100327-100389]"
    }, {
      "left" : "_reportInvalidOther(d & 0xFF);",
      "right" : "_reportInvalidOther(d & 0xFF);",
      "info" : "ExpressionStatement[99747-99777]:ExpressionStatement[100345-100375]"
    }, {
      "left" : "c = (c << 6) | (d & 0x3F);",
      "right" : "c = (c << 6) | (d & 0x3F);",
      "info" : "ExpressionStatement[99804-99830]:ExpressionStatement[100402-100428]"
    }, {
      "left" : "if (needed > 1)",
      "right" : "if (needed > 1)",
      "info" : "IfStatement[99856-100410]:IfStatement[100454-101008]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[99872-100410]:Block[100470-101008]"
    }, {
      "left" : "d = nextByte();",
      "right" : "d = nextByte();",
      "info" : "ExpressionStatement[99925-99940]:ExpressionStatement[100523-100538]"
    }, {
      "left" : "if ((d & 0xC0) != 0x080)",
      "right" : "if ((d & 0xC0) != 0x080)",
      "info" : "IfStatement[99969-100064]:IfStatement[100567-100662]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[99994-100064]:Block[100592-100662]"
    }, {
      "left" : "_reportInvalidOther(d & 0xFF);",
      "right" : "_reportInvalidOther(d & 0xFF);",
      "info" : "ExpressionStatement[100016-100046]:ExpressionStatement[100614-100644]"
    }, {
      "left" : "c = (c << 6) | (d & 0x3F);",
      "right" : "c = (c << 6) | (d & 0x3F);",
      "info" : "ExpressionStatement[100081-100107]:ExpressionStatement[100679-100705]"
    }, {
      "left" : "if (needed > 2)",
      "right" : "if (needed > 2)",
      "info" : "IfStatement[100124-100396]:IfStatement[100722-100994]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[100140-100396]:Block[100738-100994]"
    }, {
      "left" : "d = nextByte();",
      "right" : "d = nextByte();",
      "info" : "ExpressionStatement[100192-100207]:ExpressionStatement[100790-100805]"
    }, {
      "left" : "if ((d & 0xC0) != 0x080)",
      "right" : "if ((d & 0xC0) != 0x080)",
      "info" : "IfStatement[100228-100331]:IfStatement[100826-100929]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[100253-100331]:Block[100851-100929]"
    }, {
      "left" : "_reportInvalidOther(d & 0xFF);",
      "right" : "_reportInvalidOther(d & 0xFF);",
      "info" : "ExpressionStatement[100279-100309]:ExpressionStatement[100877-100907]"
    }, {
      "left" : "c = (c << 6) | (d & 0x3F);",
      "right" : "c = (c << 6) | (d & 0x3F);",
      "info" : "ExpressionStatement[100352-100378]:ExpressionStatement[100950-100976]"
    }, {
      "left" : "return c;",
      "right" : "return c;",
      "info" : "ReturnStatement[100429-100438]:ReturnStatement[101027-101036]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[100632-100639]:Modifier[101230-101237]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[100640-100643]:PrimitiveType[101238-101241]"
    }, {
      "left" : "_decodeUtf8_2",
      "right" : "_decodeUtf8_2",
      "info" : "SimpleName[100644-100657]:SimpleName[101242-101255]"
    }, {
      "left" : "int c",
      "right" : "int c",
      "info" : "SingleVariableDeclaration[100658-100663]:SingleVariableDeclaration[101256-101261]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[100672-100683]:SimpleType[101270-101281]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[100688-100972]:Block[101286-101570]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[100698-100771]:IfStatement[101296-101369]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[100726-100771]:Block[101324-101369]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[100740-100761]:ExpressionStatement[101338-101359]"
    }, {
      "left" : "int d = (int) _inputBuffer[_inputPtr++];",
      "right" : "int d = (int) _inputBuffer[_inputPtr++];",
      "info" : "VariableDeclarationStatement[100780-100820]:VariableDeclarationStatement[101378-101418]"
    }, {
      "left" : "if ((d & 0xC0) != 0x080)",
      "right" : "if ((d & 0xC0) != 0x080)",
      "info" : "IfStatement[100829-100919]:IfStatement[101427-101517]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[100854-100919]:Block[101452-101517]"
    }, {
      "left" : "_reportInvalidOther(d & 0xFF, _inputPtr);",
      "right" : "_reportInvalidOther(d & 0xFF, _inputPtr);",
      "info" : "ExpressionStatement[100868-100909]:ExpressionStatement[101466-101507]"
    }, {
      "left" : "return ((c & 0x1F) << 6) | (d & 0x3F);",
      "right" : "return ((c & 0x1F) << 6) | (d & 0x3F);",
      "info" : "ReturnStatement[100928-100966]:ReturnStatement[101526-101564]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[100978-100985]:Modifier[101576-101583]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[100986-100989]:PrimitiveType[101584-101587]"
    }, {
      "left" : "_decodeUtf8_3",
      "right" : "_decodeUtf8_3",
      "info" : "SimpleName[100990-101003]:SimpleName[101588-101601]"
    }, {
      "left" : "int c1",
      "right" : "int c1",
      "info" : "SingleVariableDeclaration[101004-101010]:SingleVariableDeclaration[101602-101608]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[101019-101030]:SimpleType[101617-101628]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[101035-101611]:Block[101633-102209]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[101045-101118]:IfStatement[101643-101716]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[101073-101118]:Block[101671-101716]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[101087-101108]:ExpressionStatement[101685-101706]"
    }, {
      "left" : "c1 &= 0x0F;",
      "right" : "c1 &= 0x0F;",
      "info" : "ExpressionStatement[101127-101138]:ExpressionStatement[101725-101736]"
    }, {
      "left" : "int d = (int) _inputBuffer[_inputPtr++];",
      "right" : "int d = (int) _inputBuffer[_inputPtr++];",
      "info" : "VariableDeclarationStatement[101147-101187]:VariableDeclarationStatement[101745-101785]"
    }, {
      "left" : "if ((d & 0xC0) != 0x080)",
      "right" : "if ((d & 0xC0) != 0x080)",
      "info" : "IfStatement[101196-101286]:IfStatement[101794-101884]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[101221-101286]:Block[101819-101884]"
    }, {
      "left" : "_reportInvalidOther(d & 0xFF, _inputPtr);",
      "right" : "_reportInvalidOther(d & 0xFF, _inputPtr);",
      "info" : "ExpressionStatement[101235-101276]:ExpressionStatement[101833-101874]"
    }, {
      "left" : "int c = (c1 << 6) | (d & 0x3F);",
      "right" : "int c = (c1 << 6) | (d & 0x3F);",
      "info" : "VariableDeclarationStatement[101295-101326]:VariableDeclarationStatement[101893-101924]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[101335-101408]:IfStatement[101933-102006]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[101363-101408]:Block[101961-102006]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[101377-101398]:ExpressionStatement[101975-101996]"
    }, {
      "left" : "d = (int) _inputBuffer[_inputPtr++];",
      "right" : "d = (int) _inputBuffer[_inputPtr++];",
      "info" : "ExpressionStatement[101417-101453]:ExpressionStatement[102015-102051]"
    }, {
      "left" : "if ((d & 0xC0) != 0x080)",
      "right" : "if ((d & 0xC0) != 0x080)",
      "info" : "IfStatement[101462-101552]:IfStatement[102060-102150]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[101487-101552]:Block[102085-102150]"
    }, {
      "left" : "_reportInvalidOther(d & 0xFF, _inputPtr);",
      "right" : "_reportInvalidOther(d & 0xFF, _inputPtr);",
      "info" : "ExpressionStatement[101501-101542]:ExpressionStatement[102099-102140]"
    }, {
      "left" : "c = (c << 6) | (d & 0x3F);",
      "right" : "c = (c << 6) | (d & 0x3F);",
      "info" : "ExpressionStatement[101561-101587]:ExpressionStatement[102159-102185]"
    }, {
      "left" : "return c;",
      "right" : "return c;",
      "info" : "ReturnStatement[101596-101605]:ReturnStatement[102194-102203]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[101617-101624]:Modifier[102215-102222]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[101625-101628]:PrimitiveType[102223-102226]"
    }, {
      "left" : "_decodeUtf8_3fast",
      "right" : "_decodeUtf8_3fast",
      "info" : "SimpleName[101629-101646]:SimpleName[102227-102244]"
    }, {
      "left" : "int c1",
      "right" : "int c1",
      "info" : "SingleVariableDeclaration[101647-101653]:SingleVariableDeclaration[102245-102251]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[101662-101673]:SimpleType[102260-102271]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[101678-102090]:Block[102276-102688]"
    }, {
      "left" : "c1 &= 0x0F;",
      "right" : "c1 &= 0x0F;",
      "info" : "ExpressionStatement[101688-101699]:ExpressionStatement[102286-102297]"
    }, {
      "left" : "int d = (int) _inputBuffer[_inputPtr++];",
      "right" : "int d = (int) _inputBuffer[_inputPtr++];",
      "info" : "VariableDeclarationStatement[101708-101748]:VariableDeclarationStatement[102306-102346]"
    }, {
      "left" : "if ((d & 0xC0) != 0x080)",
      "right" : "if ((d & 0xC0) != 0x080)",
      "info" : "IfStatement[101757-101847]:IfStatement[102355-102445]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[101782-101847]:Block[102380-102445]"
    }, {
      "left" : "_reportInvalidOther(d & 0xFF, _inputPtr);",
      "right" : "_reportInvalidOther(d & 0xFF, _inputPtr);",
      "info" : "ExpressionStatement[101796-101837]:ExpressionStatement[102394-102435]"
    }, {
      "left" : "int c = (c1 << 6) | (d & 0x3F);",
      "right" : "int c = (c1 << 6) | (d & 0x3F);",
      "info" : "VariableDeclarationStatement[101856-101887]:VariableDeclarationStatement[102454-102485]"
    }, {
      "left" : "d = (int) _inputBuffer[_inputPtr++];",
      "right" : "d = (int) _inputBuffer[_inputPtr++];",
      "info" : "ExpressionStatement[101896-101932]:ExpressionStatement[102494-102530]"
    }, {
      "left" : "if ((d & 0xC0) != 0x080)",
      "right" : "if ((d & 0xC0) != 0x080)",
      "info" : "IfStatement[101941-102031]:IfStatement[102539-102629]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[101966-102031]:Block[102564-102629]"
    }, {
      "left" : "_reportInvalidOther(d & 0xFF, _inputPtr);",
      "right" : "_reportInvalidOther(d & 0xFF, _inputPtr);",
      "info" : "ExpressionStatement[101980-102021]:ExpressionStatement[102578-102619]"
    }, {
      "left" : "c = (c << 6) | (d & 0x3F);",
      "right" : "c = (c << 6) | (d & 0x3F);",
      "info" : "ExpressionStatement[102040-102066]:ExpressionStatement[102638-102664]"
    }, {
      "left" : "return c;",
      "right" : "return c;",
      "info" : "ReturnStatement[102075-102084]:ReturnStatement[102673-102682]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[102238-102245]:Modifier[102836-102843]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[102246-102249]:PrimitiveType[102844-102847]"
    }, {
      "left" : "_decodeUtf8_4",
      "right" : "_decodeUtf8_4",
      "info" : "SimpleName[102250-102263]:SimpleName[102848-102861]"
    }, {
      "left" : "int c",
      "right" : "int c",
      "info" : "SingleVariableDeclaration[102264-102269]:SingleVariableDeclaration[102862-102867]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[102278-102289]:SimpleType[102876-102887]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[102294-103238]:Block[102892-103836]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[102304-102377]:IfStatement[102902-102975]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[102332-102377]:Block[102930-102975]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[102346-102367]:ExpressionStatement[102944-102965]"
    }, {
      "left" : "int d = (int) _inputBuffer[_inputPtr++];",
      "right" : "int d = (int) _inputBuffer[_inputPtr++];",
      "info" : "VariableDeclarationStatement[102386-102426]:VariableDeclarationStatement[102984-103024]"
    }, {
      "left" : "if ((d & 0xC0) != 0x080)",
      "right" : "if ((d & 0xC0) != 0x080)",
      "info" : "IfStatement[102435-102525]:IfStatement[103033-103123]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[102460-102525]:Block[103058-103123]"
    }, {
      "left" : "_reportInvalidOther(d & 0xFF, _inputPtr);",
      "right" : "_reportInvalidOther(d & 0xFF, _inputPtr);",
      "info" : "ExpressionStatement[102474-102515]:ExpressionStatement[103072-103113]"
    }, {
      "left" : "c = ((c & 0x07) << 6) | (d & 0x3F);",
      "right" : "c = ((c & 0x07) << 6) | (d & 0x3F);",
      "info" : "ExpressionStatement[102534-102569]:ExpressionStatement[103132-103167]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[102579-102652]:IfStatement[103177-103250]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[102607-102652]:Block[103205-103250]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[102621-102642]:ExpressionStatement[103219-103240]"
    }, {
      "left" : "d = (int) _inputBuffer[_inputPtr++];",
      "right" : "d = (int) _inputBuffer[_inputPtr++];",
      "info" : "ExpressionStatement[102661-102697]:ExpressionStatement[103259-103295]"
    }, {
      "left" : "if ((d & 0xC0) != 0x080)",
      "right" : "if ((d & 0xC0) != 0x080)",
      "info" : "IfStatement[102706-102796]:IfStatement[103304-103394]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[102731-102796]:Block[103329-103394]"
    }, {
      "left" : "_reportInvalidOther(d & 0xFF, _inputPtr);",
      "right" : "_reportInvalidOther(d & 0xFF, _inputPtr);",
      "info" : "ExpressionStatement[102745-102786]:ExpressionStatement[103343-103384]"
    }, {
      "left" : "c = (c << 6) | (d & 0x3F);",
      "right" : "c = (c << 6) | (d & 0x3F);",
      "info" : "ExpressionStatement[102805-102831]:ExpressionStatement[103403-103429]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[102840-102913]:IfStatement[103438-103511]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[102868-102913]:Block[103466-103511]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[102882-102903]:ExpressionStatement[103480-103501]"
    }, {
      "left" : "d = (int) _inputBuffer[_inputPtr++];",
      "right" : "d = (int) _inputBuffer[_inputPtr++];",
      "info" : "ExpressionStatement[102922-102958]:ExpressionStatement[103520-103556]"
    }, {
      "left" : "if ((d & 0xC0) != 0x080)",
      "right" : "if ((d & 0xC0) != 0x080)",
      "info" : "IfStatement[102967-103057]:IfStatement[103565-103655]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[102992-103057]:Block[103590-103655]"
    }, {
      "left" : "_reportInvalidOther(d & 0xFF, _inputPtr);",
      "right" : "_reportInvalidOther(d & 0xFF, _inputPtr);",
      "info" : "ExpressionStatement[103006-103047]:ExpressionStatement[103604-103645]"
    }, {
      "left" : "return ((c << 6) | (d & 0x3F)) - 0x10000;",
      "right" : "return ((c << 6) | (d & 0x3F)) - 0x10000;",
      "info" : "ReturnStatement[103191-103232]:ReturnStatement[103789-103830]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[103244-103251]:Modifier[103842-103849]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[103252-103256]:PrimitiveType[103850-103854]"
    }, {
      "left" : "_skipUtf8_2",
      "right" : "_skipUtf8_2",
      "info" : "SimpleName[103257-103268]:SimpleName[103855-103866]"
    }, {
      "left" : "int c",
      "right" : "int c",
      "info" : "SingleVariableDeclaration[103269-103274]:SingleVariableDeclaration[103867-103872]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[103283-103294]:SimpleType[103881-103892]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[103299-103532]:Block[103897-104130]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[103309-103382]:IfStatement[103907-103980]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[103337-103382]:Block[103935-103980]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[103351-103372]:ExpressionStatement[103949-103970]"
    }, {
      "left" : "c = (int) _inputBuffer[_inputPtr++];",
      "right" : "c = (int) _inputBuffer[_inputPtr++];",
      "info" : "ExpressionStatement[103391-103427]:ExpressionStatement[103989-104025]"
    }, {
      "left" : "if ((c & 0xC0) != 0x080)",
      "right" : "if ((c & 0xC0) != 0x080)",
      "info" : "IfStatement[103436-103526]:IfStatement[104034-104124]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[103461-103526]:Block[104059-104124]"
    }, {
      "left" : "_reportInvalidOther(c & 0xFF, _inputPtr);",
      "right" : "_reportInvalidOther(c & 0xFF, _inputPtr);",
      "info" : "ExpressionStatement[103475-103516]:ExpressionStatement[104073-104114]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[103644-103651]:Modifier[104242-104249]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[103652-103656]:PrimitiveType[104250-104254]"
    }, {
      "left" : "_skipUtf8_3",
      "right" : "_skipUtf8_3",
      "info" : "SimpleName[103657-103668]:SimpleName[104255-104266]"
    }, {
      "left" : "int c",
      "right" : "int c",
      "info" : "SingleVariableDeclaration[103669-103674]:SingleVariableDeclaration[104267-104272]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[103683-103694]:SimpleType[104281-104292]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[103699-104179]:Block[104297-104777]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[103709-103782]:IfStatement[104307-104380]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[103737-103782]:Block[104335-104380]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[103751-103772]:ExpressionStatement[104349-104370]"
    }, {
      "left" : "c = (int) _inputBuffer[_inputPtr++];",
      "right" : "c = (int) _inputBuffer[_inputPtr++];",
      "info" : "ExpressionStatement[103812-103848]:ExpressionStatement[104410-104446]"
    }, {
      "left" : "if ((c & 0xC0) != 0x080)",
      "right" : "if ((c & 0xC0) != 0x080)",
      "info" : "IfStatement[103857-103947]:IfStatement[104455-104545]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[103882-103947]:Block[104480-104545]"
    }, {
      "left" : "_reportInvalidOther(c & 0xFF, _inputPtr);",
      "right" : "_reportInvalidOther(c & 0xFF, _inputPtr);",
      "info" : "ExpressionStatement[103896-103937]:ExpressionStatement[104494-104535]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[103956-104029]:IfStatement[104554-104627]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[103984-104029]:Block[104582-104627]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[103998-104019]:ExpressionStatement[104596-104617]"
    }, {
      "left" : "c = (int) _inputBuffer[_inputPtr++];",
      "right" : "c = (int) _inputBuffer[_inputPtr++];",
      "info" : "ExpressionStatement[104038-104074]:ExpressionStatement[104636-104672]"
    }, {
      "left" : "if ((c & 0xC0) != 0x080)",
      "right" : "if ((c & 0xC0) != 0x080)",
      "info" : "IfStatement[104083-104173]:IfStatement[104681-104771]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[104108-104173]:Block[104706-104771]"
    }, {
      "left" : "_reportInvalidOther(c & 0xFF, _inputPtr);",
      "right" : "_reportInvalidOther(c & 0xFF, _inputPtr);",
      "info" : "ExpressionStatement[104122-104163]:ExpressionStatement[104720-104761]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[104185-104192]:Modifier[104783-104790]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[104193-104197]:PrimitiveType[104791-104795]"
    }, {
      "left" : "_skipUtf8_4",
      "right" : "_skipUtf8_4",
      "info" : "SimpleName[104198-104209]:SimpleName[104796-104807]"
    }, {
      "left" : "int c",
      "right" : "int c",
      "info" : "SingleVariableDeclaration[104210-104215]:SingleVariableDeclaration[104808-104813]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[104224-104235]:SimpleType[104822-104833]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[104240-104929]:Block[104838-105527]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[104250-104323]:IfStatement[104848-104921]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[104278-104323]:Block[104876-104921]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[104292-104313]:ExpressionStatement[104890-104911]"
    }, {
      "left" : "int d = (int) _inputBuffer[_inputPtr++];",
      "right" : "int d = (int) _inputBuffer[_inputPtr++];",
      "info" : "VariableDeclarationStatement[104332-104372]:VariableDeclarationStatement[104930-104970]"
    }, {
      "left" : "if ((d & 0xC0) != 0x080)",
      "right" : "if ((d & 0xC0) != 0x080)",
      "info" : "IfStatement[104381-104471]:IfStatement[104979-105069]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[104406-104471]:Block[105004-105069]"
    }, {
      "left" : "_reportInvalidOther(d & 0xFF, _inputPtr);",
      "right" : "_reportInvalidOther(d & 0xFF, _inputPtr);",
      "info" : "ExpressionStatement[104420-104461]:ExpressionStatement[105018-105059]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[104480-104553]:IfStatement[105078-105151]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[104508-104553]:Block[105106-105151]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[104522-104543]:ExpressionStatement[105120-105141]"
    }, {
      "left" : "d = (int) _inputBuffer[_inputPtr++];",
      "right" : "d = (int) _inputBuffer[_inputPtr++];",
      "info" : "ExpressionStatement[104562-104598]:ExpressionStatement[105160-105196]"
    }, {
      "left" : "if ((d & 0xC0) != 0x080)",
      "right" : "if ((d & 0xC0) != 0x080)",
      "info" : "IfStatement[104607-104697]:IfStatement[105205-105295]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[104632-104697]:Block[105230-105295]"
    }, {
      "left" : "_reportInvalidOther(d & 0xFF, _inputPtr);",
      "right" : "_reportInvalidOther(d & 0xFF, _inputPtr);",
      "info" : "ExpressionStatement[104646-104687]:ExpressionStatement[105244-105285]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[104706-104779]:IfStatement[105304-105377]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[104734-104779]:Block[105332-105377]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[104748-104769]:ExpressionStatement[105346-105367]"
    }, {
      "left" : "d = (int) _inputBuffer[_inputPtr++];",
      "right" : "d = (int) _inputBuffer[_inputPtr++];",
      "info" : "ExpressionStatement[104788-104824]:ExpressionStatement[105386-105422]"
    }, {
      "left" : "if ((d & 0xC0) != 0x080)",
      "right" : "if ((d & 0xC0) != 0x080)",
      "info" : "IfStatement[104833-104923]:IfStatement[105431-105521]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[104858-104923]:Block[105456-105521]"
    }, {
      "left" : "_reportInvalidOther(d & 0xFF, _inputPtr);",
      "right" : "_reportInvalidOther(d & 0xFF, _inputPtr);",
      "info" : "ExpressionStatement[104872-104913]:ExpressionStatement[105470-105511]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[105236-105245]:Modifier[105834-105843]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[105246-105250]:PrimitiveType[105844-105848]"
    }, {
      "left" : "_skipCR",
      "right" : "_skipCR",
      "info" : "SimpleName[105251-105258]:SimpleName[105849-105856]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[105268-105279]:SimpleType[105866-105877]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[105284-105514]:Block[105882-106112]"
    }, {
      "left" : "if (_inputPtr < _inputEnd || loadMore())",
      "right" : "if (_inputPtr < _inputEnd || loadMore())",
      "info" : "IfStatement[105294-105443]:IfStatement[105892-106041]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[105335-105443]:Block[105933-106041]"
    }, {
      "left" : "if (_inputBuffer[_inputPtr] == BYTE_LF)",
      "right" : "if (_inputBuffer[_inputPtr] == BYTE_LF)",
      "info" : "IfStatement[105349-105433]:IfStatement[105947-106031]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[105389-105433]:Block[105987-106031]"
    }, {
      "left" : "++_inputPtr;",
      "right" : "++_inputPtr;",
      "info" : "ExpressionStatement[105407-105419]:ExpressionStatement[106005-106017]"
    }, {
      "left" : "++_currInputRow;",
      "right" : "++_currInputRow;",
      "info" : "ExpressionStatement[105452-105468]:ExpressionStatement[106050-106066]"
    }, {
      "left" : "_currInputRowStart = _inputPtr;",
      "right" : "_currInputRowStart = _inputPtr;",
      "info" : "ExpressionStatement[105477-105508]:ExpressionStatement[106075-106106]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[105524-105531]:Modifier[106122-106129]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[105532-105535]:PrimitiveType[106130-106133]"
    }, {
      "left" : "nextByte",
      "right" : "nextByte",
      "info" : "SimpleName[105536-105544]:SimpleName[106134-106142]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[105554-105565]:SimpleType[106152-106163]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[105570-105708]:Block[106168-106306]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[105580-105653]:IfStatement[106178-106251]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[105608-105653]:Block[106206-106251]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[105622-105643]:ExpressionStatement[106220-106241]"
    }, {
      "left" : "return _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "return _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "ReturnStatement[105662-105702]:ReturnStatement[106260-106300]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[105899-105908]:Modifier[106497-106506]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[105909-105913]:PrimitiveType[106507-106511]"
    }, {
      "left" : "_reportInvalidChar",
      "right" : "_reportInvalidChar",
      "info" : "SimpleName[105914-105932]:SimpleName[106512-106530]"
    }, {
      "left" : "int c",
      "right" : "int c",
      "info" : "SingleVariableDeclaration[105933-105938]:SingleVariableDeclaration[106531-106536]"
    }, {
      "left" : "JsonParseException",
      "right" : "JsonParseException",
      "info" : "SimpleType[105955-105973]:SimpleType[106553-106571]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[105978-106150]:Block[106576-106748]"
    }, {
      "left" : "if (c < INT_SPACE)",
      "right" : "if (c < INT_SPACE)",
      "info" : "IfStatement[106045-106110]:IfStatement[106643-106708]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[106064-106110]:Block[106662-106708]"
    }, {
      "left" : "_throwInvalidSpace(c);",
      "right" : "_throwInvalidSpace(c);",
      "info" : "ExpressionStatement[106078-106100]:ExpressionStatement[106676-106698]"
    }, {
      "left" : "_reportInvalidInitial(c);",
      "right" : "_reportInvalidInitial(c);",
      "info" : "ExpressionStatement[106119-106144]:ExpressionStatement[106717-106742]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[106156-106165]:Modifier[106754-106763]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[106166-106170]:PrimitiveType[106764-106768]"
    }, {
      "left" : "_reportInvalidInitial",
      "right" : "_reportInvalidInitial",
      "info" : "SimpleName[106171-106192]:SimpleName[106769-106790]"
    }, {
      "left" : "int mask",
      "right" : "int mask",
      "info" : "SingleVariableDeclaration[106193-106201]:SingleVariableDeclaration[106791-106799]"
    }, {
      "left" : "JsonParseException",
      "right" : "JsonParseException",
      "info" : "SimpleType[106218-106236]:SimpleType[106816-106834]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[106241-106327]:Block[106839-106925]"
    }, {
      "left" : "_reportError(\"Invalid UTF-8 start byte 0x\"+Integer.toHexString(mask));",
      "right" : "_reportError(\"Invalid UTF-8 start byte 0x\"+Integer.toHexString(mask));",
      "info" : "ExpressionStatement[106251-106321]:ExpressionStatement[106849-106919]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[106333-106342]:Modifier[106931-106940]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[106343-106347]:PrimitiveType[106941-106945]"
    }, {
      "left" : "_reportInvalidOther",
      "right" : "_reportInvalidOther",
      "info" : "SimpleName[106348-106367]:SimpleName[106946-106965]"
    }, {
      "left" : "int mask",
      "right" : "int mask",
      "info" : "SingleVariableDeclaration[106368-106376]:SingleVariableDeclaration[106966-106974]"
    }, {
      "left" : "JsonParseException",
      "right" : "JsonParseException",
      "info" : "SimpleType[106393-106411]:SimpleType[106991-107009]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[106416-106503]:Block[107014-107101]"
    }, {
      "left" : "_reportError(\"Invalid UTF-8 middle byte 0x\"+Integer.toHexString(mask));",
      "right" : "_reportError(\"Invalid UTF-8 middle byte 0x\"+Integer.toHexString(mask));",
      "info" : "ExpressionStatement[106426-106497]:ExpressionStatement[107024-107095]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[106509-106518]:Modifier[107107-107116]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[106519-106523]:PrimitiveType[107117-107121]"
    }, {
      "left" : "_reportInvalidOther",
      "right" : "_reportInvalidOther",
      "info" : "SimpleName[106524-106543]:SimpleName[107122-107141]"
    }, {
      "left" : "int mask",
      "right" : "int mask",
      "info" : "SingleVariableDeclaration[106544-106552]:SingleVariableDeclaration[107142-107150]"
    }, {
      "left" : "int ptr",
      "right" : "int ptr",
      "info" : "SingleVariableDeclaration[106554-106561]:SingleVariableDeclaration[107152-107159]"
    }, {
      "left" : "JsonParseException",
      "right" : "JsonParseException",
      "info" : "SimpleType[106578-106596]:SimpleType[107176-107194]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[106601-106668]:Block[107199-107266]"
    }, {
      "left" : "_inputPtr = ptr;",
      "right" : "_inputPtr = ptr;",
      "info" : "ExpressionStatement[106611-106627]:ExpressionStatement[107209-107225]"
    }, {
      "left" : "_reportInvalidOther(mask);",
      "right" : "_reportInvalidOther(mask);",
      "info" : "ExpressionStatement[106636-106662]:ExpressionStatement[107234-107260]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[106674-106680]:Modifier[107272-107278]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[106681-106687]:Modifier[107279-107285]"
    }, {
      "left" : "int[]",
      "right" : "int[]",
      "info" : "ArrayType[106688-106693]:ArrayType[107286-107291]"
    }, {
      "left" : "growArrayBy",
      "right" : "growArrayBy",
      "info" : "SimpleName[106694-106705]:SimpleName[107292-107303]"
    }, {
      "left" : "int[] arr",
      "right" : "int[] arr",
      "info" : "SingleVariableDeclaration[106706-106715]:SingleVariableDeclaration[107304-107313]"
    }, {
      "left" : "int more",
      "right" : "int more",
      "info" : "SingleVariableDeclaration[106717-106725]:SingleVariableDeclaration[107315-107323]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[106731-106863]:Block[107329-107461]"
    }, {
      "left" : "if (arr == null)",
      "right" : "if (arr == null)",
      "info" : "IfStatement[106741-106803]:IfStatement[107339-107401]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[106758-106803]:Block[107356-107401]"
    }, {
      "left" : "return new int[more];",
      "right" : "return new int[more];",
      "info" : "ReturnStatement[106772-106793]:ReturnStatement[107370-107391]"
    }, {
      "left" : "return Arrays.copyOf(arr, arr.length + more);",
      "right" : "return Arrays.copyOf(arr, arr.length + more);",
      "info" : "ReturnStatement[106812-106857]:ReturnStatement[107410-107455]"
    }, {
      "left" : "@SuppressWarnings(\"resource\")",
      "right" : "@SuppressWarnings(\"resource\")",
      "info" : "SingleMemberAnnotation[107142-107171]:SingleMemberAnnotation[107740-107769]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[107176-107185]:Modifier[107774-107783]"
    }, {
      "left" : "byte[]",
      "right" : "byte[]",
      "info" : "ArrayType[107186-107192]:ArrayType[107784-107790]"
    }, {
      "left" : "_decodeBase64",
      "right" : "_decodeBase64",
      "info" : "SimpleName[107193-107206]:SimpleName[107791-107804]"
    }, {
      "left" : "Base64Variant b64variant",
      "right" : "Base64Variant b64variant",
      "info" : "SingleVariableDeclaration[107207-107231]:SingleVariableDeclaration[107805-107829]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[107240-107251]:SimpleType[107838-107849]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[107256-111701]:Block[107854-112299]"
    }, {
      "left" : "ByteArrayBuilder builder = _getByteArrayBuilder();",
      "right" : "ByteArrayBuilder builder = _getByteArrayBuilder();",
      "info" : "VariableDeclarationStatement[107266-107316]:VariableDeclarationStatement[107864-107914]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[107347-111695]:WhileStatement[107945-112293]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[107360-111695]:Block[107958-112293]"
    }, {
      "left" : "int ch;",
      "right" : "int ch;",
      "info" : "VariableDeclarationStatement[107437-107444]:VariableDeclarationStatement[108035-108042]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[107457-107667]:DoStatement[108055-108265]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[107460-107642]:Block[108058-108240]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[107478-107567]:IfStatement[108076-108165]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[107506-107567]:Block[108104-108165]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[107528-107549]:ExpressionStatement[108126-108147]"
    }, {
      "left" : "ch = (int) _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "ch = (int) _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[107584-107628]:ExpressionStatement[108182-108226]"
    }, {
      "left" : "int bits = b64variant.decodeBase64Char(ch);",
      "right" : "int bits = b64variant.decodeBase64Char(ch);",
      "info" : "VariableDeclarationStatement[107680-107723]:VariableDeclarationStatement[108278-108321]"
    }, {
      "left" : "if (bits < 0)",
      "right" : "if (bits < 0)",
      "info" : "IfStatement[107736-108075]:IfStatement[108334-108673]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[107750-108075]:Block[108348-108673]"
    }, {
      "left" : "if (ch == INT_QUOTE)",
      "right" : "if (ch == INT_QUOTE)",
      "info" : "IfStatement[107805-107895]:IfStatement[108403-108493]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[107826-107895]:Block[108424-108493]"
    }, {
      "left" : "return builder.toByteArray();",
      "right" : "return builder.toByteArray();",
      "info" : "ReturnStatement[107848-107877]:ReturnStatement[108446-108475]"
    }, {
      "left" : "bits = _decodeBase64Escape(b64variant, ch, 0);",
      "right" : "bits = _decodeBase64Escape(b64variant, ch, 0);",
      "info" : "ExpressionStatement[107912-107958]:ExpressionStatement[108510-108556]"
    }, {
      "left" : "if (bits < 0)",
      "right" : "if (bits < 0)",
      "info" : "IfStatement[107975-108061]:IfStatement[108573-108659]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[107989-108061]:Block[108587-108659]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[108034-108043]:ContinueStatement[108632-108641]"
    }, {
      "left" : "int decodedData = bits;",
      "right" : "int decodedData = bits;",
      "info" : "VariableDeclarationStatement[108088-108111]:VariableDeclarationStatement[108686-108709]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[108220-108301]:IfStatement[108818-108899]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[108248-108301]:Block[108846-108899]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[108266-108287]:ExpressionStatement[108864-108885]"
    }, {
      "left" : "ch = _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "ch = _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[108314-108352]:ExpressionStatement[108912-108950]"
    }, {
      "left" : "bits = b64variant.decodeBase64Char(ch);",
      "right" : "bits = b64variant.decodeBase64Char(ch);",
      "info" : "ExpressionStatement[108365-108404]:ExpressionStatement[108963-109002]"
    }, {
      "left" : "if (bits < 0)",
      "right" : "if (bits < 0)",
      "info" : "IfStatement[108417-108509]:IfStatement[109015-109107]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[108431-108509]:Block[109029-109107]"
    }, {
      "left" : "bits = _decodeBase64Escape(b64variant, ch, 1);",
      "right" : "bits = _decodeBase64Escape(b64variant, ch, 1);",
      "info" : "ExpressionStatement[108449-108495]:ExpressionStatement[109047-109093]"
    }, {
      "left" : "decodedData = (decodedData << 6) | bits;",
      "right" : "decodedData = (decodedData << 6) | bits;",
      "info" : "ExpressionStatement[108522-108562]:ExpressionStatement[109120-109160]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[108649-108730]:IfStatement[109247-109328]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[108677-108730]:Block[109275-109328]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[108695-108716]:ExpressionStatement[109293-109314]"
    }, {
      "left" : "ch = _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "ch = _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[108743-108781]:ExpressionStatement[109341-109379]"
    }, {
      "left" : "bits = b64variant.decodeBase64Char(ch);",
      "right" : "bits = b64variant.decodeBase64Char(ch);",
      "info" : "ExpressionStatement[108794-108833]:ExpressionStatement[109392-109431]"
    }, {
      "left" : "if (bits < 0)",
      "right" : "if (bits < 0)",
      "info" : "IfStatement[108904-110110]:IfStatement[109502-110708]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[108918-110110]:Block[109516-110708]"
    }, {
      "left" : "if (bits != Base64Variant.BASE64_VALUE_PADDING)",
      "right" : "if (bits != Base64Variant.BASE64_VALUE_PADDING)",
      "info" : "IfStatement[108936-109391]:IfStatement[109534-109989]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[108984-109391]:Block[109582-109989]"
    }, {
      "left" : "if (ch == '\"' && !b64variant.usesPadding())",
      "right" : "if (ch == '\"' && !b64variant.usesPadding())",
      "info" : "IfStatement[109089-109306]:IfStatement[109687-109904]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[109133-109306]:Block[109731-109904]"
    }, {
      "left" : "decodedData >>= 4;",
      "right" : "decodedData >>= 4;",
      "info" : "ExpressionStatement[109159-109177]:ExpressionStatement[109757-109775]"
    }, {
      "left" : "builder.append(decodedData);",
      "right" : "builder.append(decodedData);",
      "info" : "ExpressionStatement[109202-109230]:ExpressionStatement[109800-109828]"
    }, {
      "left" : "return builder.toByteArray();",
      "right" : "return builder.toByteArray();",
      "info" : "ReturnStatement[109255-109284]:ReturnStatement[109853-109882]"
    }, {
      "left" : "bits = _decodeBase64Escape(b64variant, ch, 2);",
      "right" : "bits = _decodeBase64Escape(b64variant, ch, 2);",
      "info" : "ExpressionStatement[109327-109373]:ExpressionStatement[109925-109971]"
    }, {
      "left" : "if (bits == Base64Variant.BASE64_VALUE_PADDING)",
      "right" : "if (bits == Base64Variant.BASE64_VALUE_PADDING)",
      "info" : "IfStatement[109408-110096]:IfStatement[110006-110694]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[109456-110096]:Block[110054-110694]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[109522-109619]:IfStatement[110120-110217]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[109550-109619]:Block[110148-110217]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[109576-109597]:ExpressionStatement[110174-110195]"
    }, {
      "left" : "ch = _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "ch = _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[109640-109678]:ExpressionStatement[110238-110276]"
    }, {
      "left" : "if (!b64variant.usesPaddingChar(ch))",
      "right" : "if (!b64variant.usesPaddingChar(ch))",
      "info" : "IfStatement[109699-109897]:IfStatement[110297-110495]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[109736-109897]:Block[110334-110495]"
    }, {
      "left" : "throw reportInvalidBase64Char(b64variant, ch, 3, \"expected padding character '\"+b64variant.getPaddingChar()+\"'\");",
      "right" : "throw reportInvalidBase64Char(b64variant, ch, 3, \"expected padding character '\"+b64variant.getPaddingChar()+\"'\");",
      "info" : "ThrowStatement[109762-109875]:ThrowStatement[110360-110473]"
    }, {
      "left" : "decodedData >>= 4;",
      "right" : "decodedData >>= 4;",
      "info" : "ExpressionStatement[109981-109999]:ExpressionStatement[110579-110597]"
    }, {
      "left" : "builder.append(decodedData);",
      "right" : "builder.append(decodedData);",
      "info" : "ExpressionStatement[110020-110048]:ExpressionStatement[110618-110646]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[110069-110078]:ContinueStatement[110667-110676]"
    }, {
      "left" : "decodedData = (decodedData << 6) | bits;",
      "right" : "decodedData = (decodedData << 6) | bits;",
      "info" : "ExpressionStatement[110157-110197]:ExpressionStatement[110755-110795]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[110281-110362]:IfStatement[110879-110960]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[110309-110362]:Block[110907-110960]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[110327-110348]:ExpressionStatement[110925-110946]"
    }, {
      "left" : "ch = _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "ch = _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[110375-110413]:ExpressionStatement[110973-111011]"
    }, {
      "left" : "bits = b64variant.decodeBase64Char(ch);",
      "right" : "bits = b64variant.decodeBase64Char(ch);",
      "info" : "ExpressionStatement[110426-110465]:ExpressionStatement[111024-111063]"
    }, {
      "left" : "if (bits < 0)",
      "right" : "if (bits < 0)",
      "info" : "IfStatement[110478-111527]:IfStatement[111076-112125]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[110492-111527]:Block[111090-112125]"
    }, {
      "left" : "if (bits != Base64Variant.BASE64_VALUE_PADDING)",
      "right" : "if (bits != Base64Variant.BASE64_VALUE_PADDING)",
      "info" : "IfStatement[110510-110973]:IfStatement[111108-111571]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[110558-110973]:Block[111156-111571]"
    }, {
      "left" : "if (ch == '\"' && !b64variant.usesPadding())",
      "right" : "if (ch == '\"' && !b64variant.usesPadding())",
      "info" : "IfStatement[110663-110888]:IfStatement[111261-111486]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[110707-110888]:Block[111305-111486]"
    }, {
      "left" : "decodedData >>= 2;",
      "right" : "decodedData >>= 2;",
      "info" : "ExpressionStatement[110733-110751]:ExpressionStatement[111331-111349]"
    }, {
      "left" : "builder.appendTwoBytes(decodedData);",
      "right" : "builder.appendTwoBytes(decodedData);",
      "info" : "ExpressionStatement[110776-110812]:ExpressionStatement[111374-111410]"
    }, {
      "left" : "return builder.toByteArray();",
      "right" : "return builder.toByteArray();",
      "info" : "ReturnStatement[110837-110866]:ReturnStatement[111435-111464]"
    }, {
      "left" : "bits = _decodeBase64Escape(b64variant, ch, 3);",
      "right" : "bits = _decodeBase64Escape(b64variant, ch, 3);",
      "info" : "ExpressionStatement[110909-110955]:ExpressionStatement[111507-111553]"
    }, {
      "left" : "if (bits == Base64Variant.BASE64_VALUE_PADDING)",
      "right" : "if (bits == Base64Variant.BASE64_VALUE_PADDING)",
      "info" : "IfStatement[110990-111513]:IfStatement[111588-112111]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[111038-111513]:Block[111636-112111]"
    }, {
      "left" : "decodedData >>= 2;",
      "right" : "decodedData >>= 2;",
      "info" : "ExpressionStatement[111390-111408]:ExpressionStatement[111988-112006]"
    }, {
      "left" : "builder.appendTwoBytes(decodedData);",
      "right" : "builder.appendTwoBytes(decodedData);",
      "info" : "ExpressionStatement[111429-111465]:ExpressionStatement[112027-112063]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[111486-111495]:ContinueStatement[112084-112093]"
    }, {
      "left" : "decodedData = (decodedData << 6) | bits;",
      "right" : "decodedData = (decodedData << 6) | bits;",
      "info" : "ExpressionStatement[111594-111634]:ExpressionStatement[112192-112232]"
    }, {
      "left" : "builder.appendThreeBytes(decodedData);",
      "right" : "builder.appendThreeBytes(decodedData);",
      "info" : "ExpressionStatement[111647-111685]:ExpressionStatement[112245-112283]"
    } ]
  },
  "interFileMappings" : { }
}