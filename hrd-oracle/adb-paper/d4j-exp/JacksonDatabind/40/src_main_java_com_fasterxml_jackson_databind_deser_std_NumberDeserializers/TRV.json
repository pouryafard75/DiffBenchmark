{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "private final static HashSet<String> _classNames = new HashSet<String>();",
      "right" : "private final static HashSet<String> _classNames = new HashSet<String>();",
      "info" : "FieldDeclaration[740-813]:FieldDeclaration[740-813]"
    }, {
      "left" : "public static JsonDeserializer<?> find(Class<?> rawType, String clsName)",
      "right" : "public static JsonDeserializer<?> find(Class<?> rawType, String clsName)",
      "info" : "MethodDeclaration[1370-4006]:MethodDeclaration[1370-4006]"
    }, {
      "left" : "private static final long serialVersionUID = 1L;",
      "right" : "private static final long serialVersionUID = 1L;",
      "info" : "FieldDeclaration[4382-4430]:FieldDeclaration[4382-4430]"
    }, {
      "left" : "protected final T _nullValue;",
      "right" : "protected final T _nullValue;",
      "info" : "FieldDeclaration[4440-4469]:FieldDeclaration[4440-4469]"
    }, {
      "left" : "protected final boolean _primitive;",
      "right" : "protected final boolean _primitive;",
      "info" : "FieldDeclaration[4478-4513]:FieldDeclaration[4478-4513]"
    }, {
      "left" : "protected PrimitiveOrWrapperDeserializer(Class<T> vc, T nvl)",
      "right" : "protected PrimitiveOrWrapperDeserializer(Class<T> vc, T nvl)",
      "info" : "MethodDeclaration[4523-4691]:MethodDeclaration[4523-4691]"
    }, {
      "left" : "public final T getNullValue(DeserializationContext ctxt) throws JsonMappingException",
      "right" : "public final T getNullValue(DeserializationContext ctxt) throws JsonMappingException",
      "info" : "MethodDeclaration[4701-5225]:MethodDeclaration[4701-5225]"
    }, {
      "left" : "// remove in 2.7\n        public final T getNullValue()",
      "right" : "// remove in 2.7\n        public final T getNullValue()",
      "info" : "MethodDeclaration[5235-5362]:MethodDeclaration[5235-5362]"
    }, {
      "left" : "BooleanDeserializer",
      "right" : "BooleanDeserializer",
      "info" : "TypeDeclaration[5691-6809]:TypeDeclaration[6222-7340]"
    }, {
      "left" : "private static final long serialVersionUID = 1L;",
      "right" : "private static final long serialVersionUID = 1L;",
      "info" : "FieldDeclaration[5827-5875]:FieldDeclaration[6358-6406]"
    }, {
      "left" : "final static BooleanDeserializer primitiveInstance = new BooleanDeserializer(Boolean.TYPE, Boolean.FALSE);",
      "right" : "final static BooleanDeserializer primitiveInstance = new BooleanDeserializer(Boolean.TYPE, Boolean.FALSE);",
      "info" : "FieldDeclaration[5885-5991]:FieldDeclaration[6416-6522]"
    }, {
      "left" : "final static BooleanDeserializer wrapperInstance = new BooleanDeserializer(Boolean.class, null);",
      "right" : "final static BooleanDeserializer wrapperInstance = new BooleanDeserializer(Boolean.class, null);",
      "info" : "FieldDeclaration[6000-6096]:FieldDeclaration[6531-6627]"
    }, {
      "left" : "public BooleanDeserializer(Class<Boolean> cls, Boolean nvl)",
      "right" : "public BooleanDeserializer(Class<Boolean> cls, Boolean nvl)",
      "info" : "MethodDeclaration[6106-6214]:MethodDeclaration[6637-6745]"
    }, {
      "left" : "public Boolean deserialize(JsonParser j, DeserializationContext ctxt) throws IOException",
      "right" : "public Boolean deserialize(JsonParser j, DeserializationContext ctxt) throws IOException",
      "info" : "MethodDeclaration[6232-6401]:MethodDeclaration[6763-6932]"
    }, {
      "left" : "public Boolean deserializeWithType(JsonParser p, DeserializationContext ctxt,\n                TypeDeserializer typeDeserializer)\n            throws IOException",
      "right" : "public Boolean deserializeWithType(JsonParser p, DeserializationContext ctxt,\n                TypeDeserializer typeDeserializer)\n            throws IOException",
      "info" : "MethodDeclaration[6563-6803]:MethodDeclaration[7094-7334]"
    }, {
      "left" : "ByteDeserializer",
      "right" : "ByteDeserializer",
      "info" : "TypeDeclaration[6815-7481]:TypeDeclaration[7346-8012]"
    }, {
      "left" : "private static final long serialVersionUID = 1L;",
      "right" : "private static final long serialVersionUID = 1L;",
      "info" : "FieldDeclaration[6939-6987]:FieldDeclaration[7470-7518]"
    }, {
      "left" : "final static ByteDeserializer primitiveInstance = new ByteDeserializer(Byte.TYPE, (byte) 0);",
      "right" : "final static ByteDeserializer primitiveInstance = new ByteDeserializer(Byte.TYPE, (byte) 0);",
      "info" : "FieldDeclaration[6997-7089]:FieldDeclaration[7528-7620]"
    }, {
      "left" : "final static ByteDeserializer wrapperInstance = new ByteDeserializer(Byte.class, null);",
      "right" : "final static ByteDeserializer wrapperInstance = new ByteDeserializer(Byte.class, null);",
      "info" : "FieldDeclaration[7098-7185]:FieldDeclaration[7629-7716]"
    }, {
      "left" : "public ByteDeserializer(Class<Byte> cls, Byte nvl)",
      "right" : "public ByteDeserializer(Class<Byte> cls, Byte nvl)",
      "info" : "MethodDeclaration[7203-7302]:MethodDeclaration[7734-7833]"
    }, {
      "left" : "public Byte deserialize(JsonParser p, DeserializationContext ctxt) throws IOException",
      "right" : "public Byte deserialize(JsonParser p, DeserializationContext ctxt) throws IOException",
      "info" : "MethodDeclaration[7312-7475]:MethodDeclaration[7843-8006]"
    }, {
      "left" : "ShortDeserializer",
      "right" : "ShortDeserializer",
      "info" : "TypeDeclaration[7487-8195]:TypeDeclaration[8018-8726]"
    }, {
      "left" : "private static final long serialVersionUID = 1L;",
      "right" : "private static final long serialVersionUID = 1L;",
      "info" : "FieldDeclaration[7613-7661]:FieldDeclaration[8144-8192]"
    }, {
      "left" : "final static ShortDeserializer primitiveInstance = new ShortDeserializer(Short.TYPE, Short.valueOf((short)0));",
      "right" : "final static ShortDeserializer primitiveInstance = new ShortDeserializer(Short.TYPE, Short.valueOf((short)0));",
      "info" : "FieldDeclaration[7671-7781]:FieldDeclaration[8202-8312]"
    }, {
      "left" : "final static ShortDeserializer wrapperInstance = new ShortDeserializer(Short.class, null);",
      "right" : "final static ShortDeserializer wrapperInstance = new ShortDeserializer(Short.class, null);",
      "info" : "FieldDeclaration[7790-7880]:FieldDeclaration[8321-8411]"
    }, {
      "left" : "public ShortDeserializer(Class<Short> cls, Short nvl)",
      "right" : "public ShortDeserializer(Class<Short> cls, Short nvl)",
      "info" : "MethodDeclaration[7898-8000]:MethodDeclaration[8429-8531]"
    }, {
      "left" : "public Short deserialize(JsonParser jp, DeserializationContext ctxt)\n            throws IOException",
      "right" : "public Short deserialize(JsonParser jp, DeserializationContext ctxt)\n            throws IOException",
      "info" : "MethodDeclaration[8010-8189]:MethodDeclaration[8541-8720]"
    }, {
      "left" : "CharacterDeserializer",
      "right" : "CharacterDeserializer",
      "info" : "TypeDeclaration[8201-10452]:TypeDeclaration[8732-10983]"
    }, {
      "left" : "private static final long serialVersionUID = 1L;",
      "right" : "private static final long serialVersionUID = 1L;",
      "info" : "FieldDeclaration[8335-8383]:FieldDeclaration[8866-8914]"
    }, {
      "left" : "final static CharacterDeserializer primitiveInstance = new CharacterDeserializer(Character.TYPE, '\\0');",
      "right" : "final static CharacterDeserializer primitiveInstance = new CharacterDeserializer(Character.TYPE, '\\0');",
      "info" : "FieldDeclaration[8393-8496]:FieldDeclaration[8924-9027]"
    }, {
      "left" : "final static CharacterDeserializer wrapperInstance = new CharacterDeserializer(Character.class, null);",
      "right" : "final static CharacterDeserializer wrapperInstance = new CharacterDeserializer(Character.class, null);",
      "info" : "FieldDeclaration[8505-8607]:FieldDeclaration[9036-9138]"
    }, {
      "left" : "public CharacterDeserializer(Class<Character> cls, Character nvl)",
      "right" : "public CharacterDeserializer(Class<Character> cls, Character nvl)",
      "info" : "MethodDeclaration[8625-8739]:MethodDeclaration[9156-9270]"
    }, {
      "left" : "public Character deserialize(JsonParser p, DeserializationContext ctxt)\n            throws IOException",
      "right" : "public Character deserialize(JsonParser p, DeserializationContext ctxt)\n            throws IOException",
      "info" : "MethodDeclaration[8749-10446]:MethodDeclaration[9280-10977]"
    }, {
      "left" : "IntegerDeserializer",
      "right" : "IntegerDeserializer",
      "info" : "TypeDeclaration[10458-11921]:TypeDeclaration[10989-12452]"
    }, {
      "left" : "private static final long serialVersionUID = 1L;",
      "right" : "private static final long serialVersionUID = 1L;",
      "info" : "FieldDeclaration[10594-10642]:FieldDeclaration[11125-11173]"
    }, {
      "left" : "final static IntegerDeserializer primitiveInstance = new IntegerDeserializer(Integer.TYPE, Integer.valueOf(0));",
      "right" : "final static IntegerDeserializer primitiveInstance = new IntegerDeserializer(Integer.TYPE, Integer.valueOf(0));",
      "info" : "FieldDeclaration[10652-10763]:FieldDeclaration[11183-11294]"
    }, {
      "left" : "final static IntegerDeserializer wrapperInstance = new IntegerDeserializer(Integer.class, null);",
      "right" : "final static IntegerDeserializer wrapperInstance = new IntegerDeserializer(Integer.class, null);",
      "info" : "FieldDeclaration[10772-10868]:FieldDeclaration[11303-11399]"
    }, {
      "left" : "public IntegerDeserializer(Class<Integer> cls, Integer nvl)",
      "right" : "public IntegerDeserializer(Class<Integer> cls, Integer nvl)",
      "info" : "MethodDeclaration[10886-10986]:MethodDeclaration[11417-11517]"
    }, {
      "left" : "public boolean isCachable()",
      "right" : "public boolean isCachable()",
      "info" : "MethodDeclaration[11068-11130]:MethodDeclaration[11599-11661]"
    }, {
      "left" : "public Integer deserialize(JsonParser p, DeserializationContext ctxt) throws IOException",
      "right" : "public Integer deserialize(JsonParser p, DeserializationContext ctxt) throws IOException",
      "info" : "MethodDeclaration[11140-11413]:MethodDeclaration[11671-11944]"
    }, {
      "left" : "public Integer deserializeWithType(JsonParser p, DeserializationContext ctxt,\n                TypeDeserializer typeDeserializer) throws IOException",
      "right" : "public Integer deserializeWithType(JsonParser p, DeserializationContext ctxt,\n                TypeDeserializer typeDeserializer) throws IOException",
      "info" : "MethodDeclaration[11575-11915]:MethodDeclaration[12106-12446]"
    }, {
      "left" : "LongDeserializer",
      "right" : "LongDeserializer",
      "info" : "TypeDeclaration[11927-12856]:TypeDeclaration[12458-13387]"
    }, {
      "left" : "private static final long serialVersionUID = 1L;",
      "right" : "private static final long serialVersionUID = 1L;",
      "info" : "FieldDeclaration[12057-12105]:FieldDeclaration[12588-12636]"
    }, {
      "left" : "final static LongDeserializer primitiveInstance = new LongDeserializer(Long.TYPE, Long.valueOf(0L));",
      "right" : "final static LongDeserializer primitiveInstance = new LongDeserializer(Long.TYPE, Long.valueOf(0L));",
      "info" : "FieldDeclaration[12115-12215]:FieldDeclaration[12646-12746]"
    }, {
      "left" : "final static LongDeserializer wrapperInstance = new LongDeserializer(Long.class, null);",
      "right" : "final static LongDeserializer wrapperInstance = new LongDeserializer(Long.class, null);",
      "info" : "FieldDeclaration[12224-12311]:FieldDeclaration[12755-12842]"
    }, {
      "left" : "public LongDeserializer(Class<Long> cls, Long nvl)",
      "right" : "public LongDeserializer(Class<Long> cls, Long nvl)",
      "info" : "MethodDeclaration[12329-12420]:MethodDeclaration[12860-12951]"
    }, {
      "left" : "public boolean isCachable()",
      "right" : "public boolean isCachable()",
      "info" : "MethodDeclaration[12502-12564]:MethodDeclaration[13033-13095]"
    }, {
      "left" : "public Long deserialize(JsonParser p, DeserializationContext ctxt) throws IOException",
      "right" : "public Long deserialize(JsonParser p, DeserializationContext ctxt) throws IOException",
      "info" : "MethodDeclaration[12582-12850]:MethodDeclaration[13113-13381]"
    }, {
      "left" : "FloatDeserializer",
      "right" : "FloatDeserializer",
      "info" : "TypeDeclaration[12862-13528]:TypeDeclaration[13393-14059]"
    }, {
      "left" : "private static final long serialVersionUID = 1L;",
      "right" : "private static final long serialVersionUID = 1L;",
      "info" : "FieldDeclaration[12988-13036]:FieldDeclaration[13519-13567]"
    }, {
      "left" : "final static FloatDeserializer primitiveInstance = new FloatDeserializer(Float.TYPE, 0.f);",
      "right" : "final static FloatDeserializer primitiveInstance = new FloatDeserializer(Float.TYPE, 0.f);",
      "info" : "FieldDeclaration[13046-13136]:FieldDeclaration[13577-13667]"
    }, {
      "left" : "final static FloatDeserializer wrapperInstance = new FloatDeserializer(Float.class, null);",
      "right" : "final static FloatDeserializer wrapperInstance = new FloatDeserializer(Float.class, null);",
      "info" : "FieldDeclaration[13145-13235]:FieldDeclaration[13676-13766]"
    }, {
      "left" : "public FloatDeserializer(Class<Float> cls, Float nvl)",
      "right" : "public FloatDeserializer(Class<Float> cls, Float nvl)",
      "info" : "MethodDeclaration[13253-13347]:MethodDeclaration[13784-13878]"
    }, {
      "left" : "public Float deserialize(JsonParser p, DeserializationContext ctxt) throws IOException",
      "right" : "public Float deserialize(JsonParser p, DeserializationContext ctxt) throws IOException",
      "info" : "MethodDeclaration[13357-13522]:MethodDeclaration[13888-14053]"
    }, {
      "left" : "DoubleDeserializer",
      "right" : "DoubleDeserializer",
      "info" : "TypeDeclaration[13534-14597]:TypeDeclaration[14065-15128]"
    }, {
      "left" : "private static final long serialVersionUID = 1L;",
      "right" : "private static final long serialVersionUID = 1L;",
      "info" : "FieldDeclaration[13662-13710]:FieldDeclaration[14193-14241]"
    }, {
      "left" : "final static DoubleDeserializer primitiveInstance = new DoubleDeserializer(Double.TYPE, 0.d);",
      "right" : "final static DoubleDeserializer primitiveInstance = new DoubleDeserializer(Double.TYPE, 0.d);",
      "info" : "FieldDeclaration[13720-13813]:FieldDeclaration[14251-14344]"
    }, {
      "left" : "final static DoubleDeserializer wrapperInstance = new DoubleDeserializer(Double.class, null);",
      "right" : "final static DoubleDeserializer wrapperInstance = new DoubleDeserializer(Double.class, null);",
      "info" : "FieldDeclaration[13822-13915]:FieldDeclaration[14353-14446]"
    }, {
      "left" : "public DoubleDeserializer(Class<Double> cls, Double nvl)",
      "right" : "public DoubleDeserializer(Class<Double> cls, Double nvl)",
      "info" : "MethodDeclaration[13933-14030]:MethodDeclaration[14464-14561]"
    }, {
      "left" : "public Double deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException",
      "right" : "public Double deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException",
      "info" : "MethodDeclaration[14040-14201]:MethodDeclaration[14571-14732]"
    }, {
      "left" : "public Double deserializeWithType(JsonParser jp, DeserializationContext ctxt,\n                TypeDeserializer typeDeserializer) throws IOException",
      "right" : "public Double deserializeWithType(JsonParser jp, DeserializationContext ctxt,\n                TypeDeserializer typeDeserializer) throws IOException",
      "info" : "MethodDeclaration[14363-14591]:MethodDeclaration[14894-15122]"
    }, {
      "left" : "NumberDeserializer",
      "right" : "NumberDeserializer",
      "info" : "TypeDeclaration[14603-19648]:TypeDeclaration[15134-20179]"
    }, {
      "left" : "public final static NumberDeserializer instance = new NumberDeserializer();",
      "right" : "public final static NumberDeserializer instance = new NumberDeserializer();",
      "info" : "FieldDeclaration[15252-15327]:FieldDeclaration[15783-15858]"
    }, {
      "left" : "public NumberDeserializer()",
      "right" : "public NumberDeserializer()",
      "info" : "MethodDeclaration[15345-15417]:MethodDeclaration[15876-15948]"
    }, {
      "left" : "public Object deserialize(JsonParser p, DeserializationContext ctxt) throws IOException",
      "right" : "public Object deserialize(JsonParser p, DeserializationContext ctxt) throws IOException",
      "info" : "MethodDeclaration[15427-18713]:MethodDeclaration[15958-19244]"
    }, {
      "left" : "public Object deserializeWithType(JsonParser jp, DeserializationContext ctxt,\n                                          TypeDeserializer typeDeserializer)\n            throws IOException",
      "right" : "public Object deserializeWithType(JsonParser jp, DeserializationContext ctxt,\n                                          TypeDeserializer typeDeserializer)\n            throws IOException",
      "info" : "MethodDeclaration[18723-19642]:MethodDeclaration[19254-20173]"
    }, {
      "left" : "BigIntegerDeserializer",
      "right" : "BigIntegerDeserializer",
      "info" : "TypeDeclaration[19876-22368]:TypeDeclaration[20407-22899]"
    }, {
      "left" : "public final static BigIntegerDeserializer instance = new BigIntegerDeserializer();",
      "right" : "public final static BigIntegerDeserializer instance = new BigIntegerDeserializer();",
      "info" : "FieldDeclaration[20146-20229]:FieldDeclaration[20677-20760]"
    }, {
      "left" : "public BigIntegerDeserializer()",
      "right" : "public BigIntegerDeserializer()",
      "info" : "MethodDeclaration[20239-20299]:MethodDeclaration[20770-20830]"
    }, {
      "left" : "public BigInteger deserialize(JsonParser p, DeserializationContext ctxt) throws IOException",
      "right" : "public BigInteger deserialize(JsonParser p, DeserializationContext ctxt) throws IOException",
      "info" : "MethodDeclaration[20309-22362]:MethodDeclaration[20840-22893]"
    }, {
      "left" : "BigDecimalDeserializer",
      "right" : "BigDecimalDeserializer",
      "info" : "TypeDeclaration[22378-24238]:TypeDeclaration[22909-24769]"
    }, {
      "left" : "public final static BigDecimalDeserializer instance = new BigDecimalDeserializer();",
      "right" : "public final static BigDecimalDeserializer instance = new BigDecimalDeserializer();",
      "info" : "FieldDeclaration[22537-22620]:FieldDeclaration[23068-23151]"
    }, {
      "left" : "public BigDecimalDeserializer()",
      "right" : "public BigDecimalDeserializer()",
      "info" : "MethodDeclaration[22631-22691]:MethodDeclaration[23162-23222]"
    }, {
      "left" : "public BigDecimal deserialize(JsonParser p, DeserializationContext ctxt)\n            throws IOException",
      "right" : "public BigDecimal deserialize(JsonParser p, DeserializationContext ctxt)\n            throws IOException",
      "info" : "MethodDeclaration[22701-24232]:MethodDeclaration[23232-24763]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1370-1376]:Modifier[1370-1376]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[1377-1383]:Modifier[1377-1383]"
    }, {
      "left" : "JsonDeserializer<?>",
      "right" : "JsonDeserializer<?>",
      "info" : "ParameterizedType[1384-1403]:ParameterizedType[1384-1403]"
    }, {
      "left" : "find",
      "right" : "find",
      "info" : "SimpleName[1404-1408]:SimpleName[1404-1408]"
    }, {
      "left" : "Class<?> rawType",
      "right" : "Class<?> rawType",
      "info" : "SingleVariableDeclaration[1409-1425]:SingleVariableDeclaration[1409-1425]"
    }, {
      "left" : "String clsName",
      "right" : "String clsName",
      "info" : "SingleVariableDeclaration[1427-1441]:SingleVariableDeclaration[1427-1441]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1443-4006]:Block[1443-4006]"
    }, {
      "left" : "if (rawType.isPrimitive())",
      "right" : "if (rawType.isPrimitive())",
      "info" : "IfStatement[1453-3860]:IfStatement[1453-3860]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1480-2425]:Block[1480-2425]"
    }, {
      "left" : "if (rawType == Integer.TYPE)",
      "right" : "if (rawType == Integer.TYPE)",
      "info" : "IfStatement[1494-1600]:IfStatement[1494-1600]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1523-1600]:Block[1523-1600]"
    }, {
      "left" : "return IntegerDeserializer.primitiveInstance;",
      "right" : "return IntegerDeserializer.primitiveInstance;",
      "info" : "ReturnStatement[1541-1586]:ReturnStatement[1541-1586]"
    }, {
      "left" : "if (rawType == Boolean.TYPE)",
      "right" : "if (rawType == Boolean.TYPE)",
      "info" : "IfStatement[1613-1719]:IfStatement[1613-1719]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1642-1719]:Block[1642-1719]"
    }, {
      "left" : "return BooleanDeserializer.primitiveInstance;",
      "right" : "return BooleanDeserializer.primitiveInstance;",
      "info" : "ReturnStatement[1660-1705]:ReturnStatement[1660-1705]"
    }, {
      "left" : "if (rawType == Long.TYPE)",
      "right" : "if (rawType == Long.TYPE)",
      "info" : "IfStatement[1732-1832]:IfStatement[1732-1832]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1758-1832]:Block[1758-1832]"
    }, {
      "left" : "return LongDeserializer.primitiveInstance;",
      "right" : "return LongDeserializer.primitiveInstance;",
      "info" : "ReturnStatement[1776-1818]:ReturnStatement[1776-1818]"
    }, {
      "left" : "if (rawType == Double.TYPE)",
      "right" : "if (rawType == Double.TYPE)",
      "info" : "IfStatement[1845-1949]:IfStatement[1845-1949]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1873-1949]:Block[1873-1949]"
    }, {
      "left" : "return DoubleDeserializer.primitiveInstance;",
      "right" : "return DoubleDeserializer.primitiveInstance;",
      "info" : "ReturnStatement[1891-1935]:ReturnStatement[1891-1935]"
    }, {
      "left" : "if (rawType == Character.TYPE)",
      "right" : "if (rawType == Character.TYPE)",
      "info" : "IfStatement[1962-2072]:IfStatement[1962-2072]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1993-2072]:Block[1993-2072]"
    }, {
      "left" : "return CharacterDeserializer.primitiveInstance;",
      "right" : "return CharacterDeserializer.primitiveInstance;",
      "info" : "ReturnStatement[2011-2058]:ReturnStatement[2011-2058]"
    }, {
      "left" : "if (rawType == Byte.TYPE)",
      "right" : "if (rawType == Byte.TYPE)",
      "info" : "IfStatement[2085-2185]:IfStatement[2085-2185]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2111-2185]:Block[2111-2185]"
    }, {
      "left" : "return ByteDeserializer.primitiveInstance;",
      "right" : "return ByteDeserializer.primitiveInstance;",
      "info" : "ReturnStatement[2129-2171]:ReturnStatement[2129-2171]"
    }, {
      "left" : "if (rawType == Short.TYPE)",
      "right" : "if (rawType == Short.TYPE)",
      "info" : "IfStatement[2198-2300]:IfStatement[2198-2300]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2225-2300]:Block[2225-2300]"
    }, {
      "left" : "return ShortDeserializer.primitiveInstance;",
      "right" : "return ShortDeserializer.primitiveInstance;",
      "info" : "ReturnStatement[2243-2286]:ReturnStatement[2243-2286]"
    }, {
      "left" : "if (rawType == Float.TYPE)",
      "right" : "if (rawType == Float.TYPE)",
      "info" : "IfStatement[2313-2415]:IfStatement[2313-2415]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2340-2415]:Block[2340-2415]"
    }, {
      "left" : "return FloatDeserializer.primitiveInstance;",
      "right" : "return FloatDeserializer.primitiveInstance;",
      "info" : "ReturnStatement[2358-2401]:ReturnStatement[2358-2401]"
    }, {
      "left" : "if (_classNames.contains(clsName))",
      "right" : "if (_classNames.contains(clsName))",
      "info" : "IfStatement[2431-3860]:IfStatement[2431-3860]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2466-3818]:Block[2466-3818]"
    }, {
      "left" : "if (rawType == Integer.class)",
      "right" : "if (rawType == Integer.class)",
      "info" : "IfStatement[2552-2657]:IfStatement[2552-2657]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2582-2657]:Block[2582-2657]"
    }, {
      "left" : "return IntegerDeserializer.wrapperInstance;",
      "right" : "return IntegerDeserializer.wrapperInstance;",
      "info" : "ReturnStatement[2600-2643]:ReturnStatement[2600-2643]"
    }, {
      "left" : "if (rawType == Boolean.class)",
      "right" : "if (rawType == Boolean.class)",
      "info" : "IfStatement[2670-2775]:IfStatement[2670-2775]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2700-2775]:Block[2700-2775]"
    }, {
      "left" : "return BooleanDeserializer.wrapperInstance;",
      "right" : "return BooleanDeserializer.wrapperInstance;",
      "info" : "ReturnStatement[2718-2761]:ReturnStatement[2718-2761]"
    }, {
      "left" : "if (rawType == Long.class)",
      "right" : "if (rawType == Long.class)",
      "info" : "IfStatement[2788-2887]:IfStatement[2788-2887]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2815-2887]:Block[2815-2887]"
    }, {
      "left" : "return LongDeserializer.wrapperInstance;",
      "right" : "return LongDeserializer.wrapperInstance;",
      "info" : "ReturnStatement[2833-2873]:ReturnStatement[2833-2873]"
    }, {
      "left" : "if (rawType == Double.class)",
      "right" : "if (rawType == Double.class)",
      "info" : "IfStatement[2900-3003]:IfStatement[2900-3003]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2929-3003]:Block[2929-3003]"
    }, {
      "left" : "return DoubleDeserializer.wrapperInstance;",
      "right" : "return DoubleDeserializer.wrapperInstance;",
      "info" : "ReturnStatement[2947-2989]:ReturnStatement[2947-2989]"
    }, {
      "left" : "if (rawType == Character.class)",
      "right" : "if (rawType == Character.class)",
      "info" : "IfStatement[3016-3125]:IfStatement[3016-3125]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3048-3125]:Block[3048-3125]"
    }, {
      "left" : "return CharacterDeserializer.wrapperInstance;",
      "right" : "return CharacterDeserializer.wrapperInstance;",
      "info" : "ReturnStatement[3066-3111]:ReturnStatement[3066-3111]"
    }, {
      "left" : "if (rawType == Byte.class)",
      "right" : "if (rawType == Byte.class)",
      "info" : "IfStatement[3138-3237]:IfStatement[3138-3237]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3165-3237]:Block[3165-3237]"
    }, {
      "left" : "return ByteDeserializer.wrapperInstance;",
      "right" : "return ByteDeserializer.wrapperInstance;",
      "info" : "ReturnStatement[3183-3223]:ReturnStatement[3183-3223]"
    }, {
      "left" : "if (rawType == Short.class)",
      "right" : "if (rawType == Short.class)",
      "info" : "IfStatement[3250-3351]:IfStatement[3250-3351]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3278-3351]:Block[3278-3351]"
    }, {
      "left" : "return ShortDeserializer.wrapperInstance;",
      "right" : "return ShortDeserializer.wrapperInstance;",
      "info" : "ReturnStatement[3296-3337]:ReturnStatement[3296-3337]"
    }, {
      "left" : "if (rawType == Float.class)",
      "right" : "if (rawType == Float.class)",
      "info" : "IfStatement[3364-3465]:IfStatement[3364-3465]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3392-3465]:Block[3392-3465]"
    }, {
      "left" : "return FloatDeserializer.wrapperInstance;",
      "right" : "return FloatDeserializer.wrapperInstance;",
      "info" : "ReturnStatement[3410-3451]:ReturnStatement[3410-3451]"
    }, {
      "left" : "if (rawType == Number.class)",
      "right" : "if (rawType == Number.class)",
      "info" : "IfStatement[3478-3574]:IfStatement[3478-3574]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3507-3574]:Block[3507-3574]"
    }, {
      "left" : "return NumberDeserializer.instance;",
      "right" : "return NumberDeserializer.instance;",
      "info" : "ReturnStatement[3525-3560]:ReturnStatement[3525-3560]"
    }, {
      "left" : "if (rawType == BigDecimal.class)",
      "right" : "if (rawType == BigDecimal.class)",
      "info" : "IfStatement[3587-3691]:IfStatement[3587-3691]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3620-3691]:Block[3620-3691]"
    }, {
      "left" : "return BigDecimalDeserializer.instance;",
      "right" : "return BigDecimalDeserializer.instance;",
      "info" : "ReturnStatement[3638-3677]:ReturnStatement[3638-3677]"
    }, {
      "left" : "if (rawType == BigInteger.class)",
      "right" : "if (rawType == BigInteger.class)",
      "info" : "IfStatement[3704-3808]:IfStatement[3704-3808]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3737-3808]:Block[3737-3808]"
    }, {
      "left" : "return BigIntegerDeserializer.instance;",
      "right" : "return BigIntegerDeserializer.instance;",
      "info" : "ReturnStatement[3755-3794]:ReturnStatement[3755-3794]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3824-3860]:Block[3824-3860]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[3838-3850]:ReturnStatement[3838-3850]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Internal error: can't find deserializer for \"+rawType.getName());",
      "right" : "throw new IllegalArgumentException(\"Internal error: can't find deserializer for \"+rawType.getName());",
      "info" : "ThrowStatement[3899-4000]:ThrowStatement[3899-4000]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[4523-4532]:Modifier[4523-4532]"
    }, {
      "left" : "PrimitiveOrWrapperDeserializer",
      "right" : "PrimitiveOrWrapperDeserializer",
      "info" : "SimpleName[4533-4563]:SimpleName[4533-4563]"
    }, {
      "left" : "Class<T> vc",
      "right" : "Class<T> vc",
      "info" : "SingleVariableDeclaration[4564-4575]:SingleVariableDeclaration[4564-4575]"
    }, {
      "left" : "T nvl",
      "right" : "T nvl",
      "info" : "SingleVariableDeclaration[4577-4582]:SingleVariableDeclaration[4577-4582]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4584-4691]:Block[4584-4691]"
    }, {
      "left" : "super(vc);",
      "right" : "super(vc);",
      "info" : "SuperConstructorInvocation[4598-4608]:SuperConstructorInvocation[4598-4608]"
    }, {
      "left" : "_nullValue = nvl;",
      "right" : "_nullValue = nvl;",
      "info" : "ExpressionStatement[4621-4638]:ExpressionStatement[4621-4638]"
    }, {
      "left" : "_primitive = vc.isPrimitive();",
      "right" : "_primitive = vc.isPrimitive();",
      "info" : "ExpressionStatement[4651-4681]:ExpressionStatement[4651-4681]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[4701-4710]:MarkerAnnotation[4701-4710]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4719-4725]:Modifier[4719-4725]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[4726-4731]:Modifier[4726-4731]"
    }, {
      "left" : "T",
      "right" : "T",
      "info" : "SimpleType[4732-4733]:SimpleType[4732-4733]"
    }, {
      "left" : "getNullValue",
      "right" : "getNullValue",
      "info" : "SimpleName[4734-4746]:SimpleName[4734-4746]"
    }, {
      "left" : "DeserializationContext ctxt",
      "right" : "DeserializationContext ctxt",
      "info" : "SingleVariableDeclaration[4747-4774]:SingleVariableDeclaration[4747-4774]"
    }, {
      "left" : "JsonMappingException",
      "right" : "JsonMappingException",
      "info" : "SimpleType[4783-4803]:SimpleType[4783-4803]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4812-5225]:Block[4812-5225]"
    }, {
      "left" : "if (_primitive && ctxt.isEnabled(DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES))",
      "right" : "if (_primitive && ctxt.isEnabled(DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES))",
      "info" : "IfStatement[4826-5184]:IfStatement[4826-5184]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4912-5184]:Block[4912-5184]"
    }, {
      "left" : "throw ctxt.mappingException(\n                        \"Can not map JSON null into type %s (set DeserializationConfig.DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES to 'false' to allow)\",\n                        handledType().toString());",
      "right" : "throw ctxt.mappingException(\n                        \"Can not map JSON null into type %s (set DeserializationConfig.DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES to 'false' to allow)\",\n                        handledType().toString());",
      "info" : "ThrowStatement[4930-5170]:ThrowStatement[4930-5170]"
    }, {
      "left" : "return _nullValue;",
      "right" : "return _nullValue;",
      "info" : "ReturnStatement[5197-5215]:ReturnStatement[5197-5215]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[5235-5244]:MarkerAnnotation[5235-5244]"
    }, {
      "left" : "@Deprecated",
      "right" : "@Deprecated",
      "info" : "MarkerAnnotation[5253-5264]:MarkerAnnotation[5253-5264]"
    }, {
      "left" : "// remove in 2.7",
      "right" : "// remove in 2.7",
      "info" : "LineComment[5265-5281]:LineComment[5265-5281]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5290-5296]:Modifier[5290-5296]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[5297-5302]:Modifier[5297-5302]"
    }, {
      "left" : "T",
      "right" : "T",
      "info" : "SimpleType[5303-5304]:SimpleType[5303-5304]"
    }, {
      "left" : "getNullValue",
      "right" : "getNullValue",
      "info" : "SimpleName[5305-5317]:SimpleName[5305-5317]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5320-5362]:Block[5320-5362]"
    }, {
      "left" : "return _nullValue;",
      "right" : "return _nullValue;",
      "info" : "ReturnStatement[5334-5352]:ReturnStatement[5334-5352]"
    }, {
      "left" : "@JacksonStdImpl",
      "right" : "@JacksonStdImpl",
      "info" : "MarkerAnnotation[5691-5706]:MarkerAnnotation[6222-6237]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5711-5717]:Modifier[6242-6248]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[5718-5723]:Modifier[6249-6254]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[5724-5730]:Modifier[6255-6261]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[5731-5736]:TYPE_DECLARATION_KIND[6262-6267]"
    }, {
      "left" : "BooleanDeserializer",
      "right" : "BooleanDeserializer",
      "info" : "SimpleName[5737-5756]:SimpleName[6268-6287]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6106-6112]:Modifier[6637-6643]"
    }, {
      "left" : "BooleanDeserializer",
      "right" : "BooleanDeserializer",
      "info" : "SimpleName[6113-6132]:SimpleName[6644-6663]"
    }, {
      "left" : "Class<Boolean> cls",
      "right" : "Class<Boolean> cls",
      "info" : "SingleVariableDeclaration[6133-6151]:SingleVariableDeclaration[6664-6682]"
    }, {
      "left" : "Boolean nvl",
      "right" : "Boolean nvl",
      "info" : "SingleVariableDeclaration[6153-6164]:SingleVariableDeclaration[6684-6695]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6174-6214]:Block[6705-6745]"
    }, {
      "left" : "super(cls, nvl);",
      "right" : "super(cls, nvl);",
      "info" : "SuperConstructorInvocation[6188-6204]:SuperConstructorInvocation[6719-6735]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[6232-6241]:MarkerAnnotation[6763-6772]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6250-6256]:Modifier[6781-6787]"
    }, {
      "left" : "Boolean",
      "right" : "Boolean",
      "info" : "SimpleType[6257-6264]:SimpleType[6788-6795]"
    }, {
      "left" : "deserialize",
      "right" : "deserialize",
      "info" : "SimpleName[6265-6276]:SimpleName[6796-6807]"
    }, {
      "left" : "JsonParser j",
      "right" : "JsonParser j",
      "info" : "SingleVariableDeclaration[6277-6289]:SingleVariableDeclaration[6808-6820]"
    }, {
      "left" : "DeserializationContext ctxt",
      "right" : "DeserializationContext ctxt",
      "info" : "SingleVariableDeclaration[6291-6318]:SingleVariableDeclaration[6822-6849]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[6327-6338]:SimpleType[6858-6869]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6347-6401]:Block[6878-6932]"
    }, {
      "left" : "return _parseBoolean(j, ctxt);",
      "right" : "return _parseBoolean(j, ctxt);",
      "info" : "ReturnStatement[6361-6391]:ReturnStatement[6892-6922]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[6563-6572]:MarkerAnnotation[7094-7103]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6581-6587]:Modifier[7112-7118]"
    }, {
      "left" : "Boolean",
      "right" : "Boolean",
      "info" : "SimpleType[6588-6595]:SimpleType[7119-7126]"
    }, {
      "left" : "deserializeWithType",
      "right" : "deserializeWithType",
      "info" : "SimpleName[6596-6615]:SimpleName[7127-7146]"
    }, {
      "left" : "JsonParser p",
      "right" : "JsonParser p",
      "info" : "SingleVariableDeclaration[6616-6628]:SingleVariableDeclaration[7147-7159]"
    }, {
      "left" : "DeserializationContext ctxt",
      "right" : "DeserializationContext ctxt",
      "info" : "SingleVariableDeclaration[6630-6657]:SingleVariableDeclaration[7161-7188]"
    }, {
      "left" : "TypeDeserializer typeDeserializer",
      "right" : "TypeDeserializer typeDeserializer",
      "info" : "SingleVariableDeclaration[6675-6708]:SingleVariableDeclaration[7206-7239]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[6729-6740]:SimpleType[7260-7271]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6749-6803]:Block[7280-7334]"
    }, {
      "left" : "return _parseBoolean(p, ctxt);",
      "right" : "return _parseBoolean(p, ctxt);",
      "info" : "ReturnStatement[6763-6793]:ReturnStatement[7294-7324]"
    }, {
      "left" : "@JacksonStdImpl",
      "right" : "@JacksonStdImpl",
      "info" : "MarkerAnnotation[6815-6830]:MarkerAnnotation[7346-7361]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6835-6841]:Modifier[7366-7372]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[6842-6848]:Modifier[7373-7379]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[6849-6854]:TYPE_DECLARATION_KIND[7380-7385]"
    }, {
      "left" : "ByteDeserializer",
      "right" : "ByteDeserializer",
      "info" : "SimpleName[6855-6871]:SimpleName[7386-7402]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7203-7209]:Modifier[7734-7740]"
    }, {
      "left" : "ByteDeserializer",
      "right" : "ByteDeserializer",
      "info" : "SimpleName[7210-7226]:SimpleName[7741-7757]"
    }, {
      "left" : "Class<Byte> cls",
      "right" : "Class<Byte> cls",
      "info" : "SingleVariableDeclaration[7227-7242]:SingleVariableDeclaration[7758-7773]"
    }, {
      "left" : "Byte nvl",
      "right" : "Byte nvl",
      "info" : "SingleVariableDeclaration[7244-7252]:SingleVariableDeclaration[7775-7783]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7262-7302]:Block[7793-7833]"
    }, {
      "left" : "super(cls, nvl);",
      "right" : "super(cls, nvl);",
      "info" : "SuperConstructorInvocation[7276-7292]:SuperConstructorInvocation[7807-7823]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[7312-7321]:MarkerAnnotation[7843-7852]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7330-7336]:Modifier[7861-7867]"
    }, {
      "left" : "Byte",
      "right" : "Byte",
      "info" : "SimpleType[7337-7341]:SimpleType[7868-7872]"
    }, {
      "left" : "deserialize",
      "right" : "deserialize",
      "info" : "SimpleName[7342-7353]:SimpleName[7873-7884]"
    }, {
      "left" : "JsonParser p",
      "right" : "JsonParser p",
      "info" : "SingleVariableDeclaration[7354-7366]:SingleVariableDeclaration[7885-7897]"
    }, {
      "left" : "DeserializationContext ctxt",
      "right" : "DeserializationContext ctxt",
      "info" : "SingleVariableDeclaration[7368-7395]:SingleVariableDeclaration[7899-7926]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[7404-7415]:SimpleType[7935-7946]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7424-7475]:Block[7955-8006]"
    }, {
      "left" : "return _parseByte(p, ctxt);",
      "right" : "return _parseByte(p, ctxt);",
      "info" : "ReturnStatement[7438-7465]:ReturnStatement[7969-7996]"
    }, {
      "left" : "@JacksonStdImpl",
      "right" : "@JacksonStdImpl",
      "info" : "MarkerAnnotation[7487-7502]:MarkerAnnotation[8018-8033]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7507-7513]:Modifier[8038-8044]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[7514-7520]:Modifier[8045-8051]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[7521-7526]:TYPE_DECLARATION_KIND[8052-8057]"
    }, {
      "left" : "ShortDeserializer",
      "right" : "ShortDeserializer",
      "info" : "SimpleName[7527-7544]:SimpleName[8058-8075]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7898-7904]:Modifier[8429-8435]"
    }, {
      "left" : "ShortDeserializer",
      "right" : "ShortDeserializer",
      "info" : "SimpleName[7905-7922]:SimpleName[8436-8453]"
    }, {
      "left" : "Class<Short> cls",
      "right" : "Class<Short> cls",
      "info" : "SingleVariableDeclaration[7923-7939]:SingleVariableDeclaration[8454-8470]"
    }, {
      "left" : "Short nvl",
      "right" : "Short nvl",
      "info" : "SingleVariableDeclaration[7941-7950]:SingleVariableDeclaration[8472-8481]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7960-8000]:Block[8491-8531]"
    }, {
      "left" : "super(cls, nvl);",
      "right" : "super(cls, nvl);",
      "info" : "SuperConstructorInvocation[7974-7990]:SuperConstructorInvocation[8505-8521]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[8010-8019]:MarkerAnnotation[8541-8550]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8028-8034]:Modifier[8559-8565]"
    }, {
      "left" : "Short",
      "right" : "Short",
      "info" : "SimpleType[8035-8040]:SimpleType[8566-8571]"
    }, {
      "left" : "deserialize",
      "right" : "deserialize",
      "info" : "SimpleName[8041-8052]:SimpleName[8572-8583]"
    }, {
      "left" : "JsonParser jp",
      "right" : "JsonParser jp",
      "info" : "SingleVariableDeclaration[8053-8066]:SingleVariableDeclaration[8584-8597]"
    }, {
      "left" : "DeserializationContext ctxt",
      "right" : "DeserializationContext ctxt",
      "info" : "SingleVariableDeclaration[8068-8095]:SingleVariableDeclaration[8599-8626]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[8116-8127]:SimpleType[8647-8658]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8136-8189]:Block[8667-8720]"
    }, {
      "left" : "return _parseShort(jp, ctxt);",
      "right" : "return _parseShort(jp, ctxt);",
      "info" : "ReturnStatement[8150-8179]:ReturnStatement[8681-8710]"
    }, {
      "left" : "@JacksonStdImpl",
      "right" : "@JacksonStdImpl",
      "info" : "MarkerAnnotation[8201-8216]:MarkerAnnotation[8732-8747]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8221-8227]:Modifier[8752-8758]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[8228-8234]:Modifier[8759-8765]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[8235-8240]:TYPE_DECLARATION_KIND[8766-8771]"
    }, {
      "left" : "CharacterDeserializer",
      "right" : "CharacterDeserializer",
      "info" : "SimpleName[8241-8262]:SimpleName[8772-8793]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8625-8631]:Modifier[9156-9162]"
    }, {
      "left" : "CharacterDeserializer",
      "right" : "CharacterDeserializer",
      "info" : "SimpleName[8632-8653]:SimpleName[9163-9184]"
    }, {
      "left" : "Class<Character> cls",
      "right" : "Class<Character> cls",
      "info" : "SingleVariableDeclaration[8654-8674]:SingleVariableDeclaration[9185-9205]"
    }, {
      "left" : "Character nvl",
      "right" : "Character nvl",
      "info" : "SingleVariableDeclaration[8676-8689]:SingleVariableDeclaration[9207-9220]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8699-8739]:Block[9230-9270]"
    }, {
      "left" : "super(cls, nvl);",
      "right" : "super(cls, nvl);",
      "info" : "SuperConstructorInvocation[8713-8729]:SuperConstructorInvocation[9244-9260]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[8749-8758]:MarkerAnnotation[9280-9289]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8767-8773]:Modifier[9298-9304]"
    }, {
      "left" : "Character",
      "right" : "Character",
      "info" : "SimpleType[8774-8783]:SimpleType[9305-9314]"
    }, {
      "left" : "deserialize",
      "right" : "deserialize",
      "info" : "SimpleName[8784-8795]:SimpleName[9315-9326]"
    }, {
      "left" : "JsonParser p",
      "right" : "JsonParser p",
      "info" : "SingleVariableDeclaration[8796-8808]:SingleVariableDeclaration[9327-9339]"
    }, {
      "left" : "DeserializationContext ctxt",
      "right" : "DeserializationContext ctxt",
      "info" : "SingleVariableDeclaration[8810-8837]:SingleVariableDeclaration[9341-9368]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[8858-8869]:SimpleType[9389-9400]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8878-10446]:Block[9409-10977]"
    }, {
      "left" : "switch (p.getCurrentTokenId()) {\n            case JsonTokenId.ID_NUMBER_INT: // ok iff ascii value\n                int value = p.getIntValue();\n                if (value >= 0 && value <= 0xFFFF) {\n                    return Character.valueOf((char) value);\n                }\n                break;\n            case JsonTokenId.ID_STRING: // this is the usual type\n                // But does it have to be exactly one char?\n                String text = p.getText();\n                if (text.length() == 1) {\n                    return Character.valueOf(text.charAt(0));\n                }\n                // actually, empty should become null?\n                if (text.length() == 0) {\n                    return (Character) getEmptyValue(ctxt);\n                }               \n                break;\n            case JsonTokenId.ID_START_ARRAY:\n                if (ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {\n                    p.nextToken();\n                    final Character C = deserialize(p, ctxt);\n                    if (p.nextToken() != JsonToken.END_ARRAY) {\n                        throw ctxt.wrongTokenException(p, JsonToken.END_ARRAY, \n                                \"Attempted to unwrap single value array for single '\" + _valueClass.getName() + \"' value but there was more than a single value in the array\"\n                                );\n                    }\n                    return C;\n                }\n            }",
      "right" : "switch (p.getCurrentTokenId()) {\n            case JsonTokenId.ID_NUMBER_INT: // ok iff ascii value\n                int value = p.getIntValue();\n                if (value >= 0 && value <= 0xFFFF) {\n                    return Character.valueOf((char) value);\n                }\n                break;\n            case JsonTokenId.ID_STRING: // this is the usual type\n                // But does it have to be exactly one char?\n                String text = p.getText();\n                if (text.length() == 1) {\n                    return Character.valueOf(text.charAt(0));\n                }\n                // actually, empty should become null?\n                if (text.length() == 0) {\n                    return (Character) getEmptyValue(ctxt);\n                }               \n                break;\n            case JsonTokenId.ID_START_ARRAY:\n                if (ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {\n                    p.nextToken();\n                    final Character C = deserialize(p, ctxt);\n                    if (p.nextToken() != JsonToken.END_ARRAY) {\n                        throw ctxt.wrongTokenException(p, JsonToken.END_ARRAY, \n                                \"Attempted to unwrap single value array for single '\" + _valueClass.getName() + \"' value but there was more than a single value in the array\"\n                                );\n                    }\n                    return C;\n                }\n            }",
      "info" : "SwitchStatement[8892-10361]:SwitchStatement[9423-10892]"
    }, {
      "left" : "case JsonTokenId.ID_NUMBER_INT:",
      "right" : "case JsonTokenId.ID_NUMBER_INT:",
      "info" : "SwitchCase[8937-8968]:SwitchCase[9468-9499]"
    }, {
      "left" : "int value = p.getIntValue();",
      "right" : "int value = p.getIntValue();",
      "info" : "VariableDeclarationStatement[9007-9035]:VariableDeclarationStatement[9538-9566]"
    }, {
      "left" : "if (value >= 0 && value <= 0xFFFF)",
      "right" : "if (value >= 0 && value <= 0xFFFF)",
      "info" : "IfStatement[9052-9166]:IfStatement[9583-9697]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9087-9166]:Block[9618-9697]"
    }, {
      "left" : "return Character.valueOf((char) value);",
      "right" : "return Character.valueOf((char) value);",
      "info" : "ReturnStatement[9109-9148]:ReturnStatement[9640-9679]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[9183-9189]:BreakStatement[9714-9720]"
    }, {
      "left" : "case JsonTokenId.ID_STRING:",
      "right" : "case JsonTokenId.ID_STRING:",
      "info" : "SwitchCase[9202-9229]:SwitchCase[9733-9760]"
    }, {
      "left" : "String text = p.getText();",
      "right" : "String text = p.getText();",
      "info" : "VariableDeclarationStatement[9332-9358]:VariableDeclarationStatement[9863-9889]"
    }, {
      "left" : "if (text.length() == 1)",
      "right" : "if (text.length() == 1)",
      "info" : "IfStatement[9375-9480]:IfStatement[9906-10011]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9399-9480]:Block[9930-10011]"
    }, {
      "left" : "return Character.valueOf(text.charAt(0));",
      "right" : "return Character.valueOf(text.charAt(0));",
      "info" : "ReturnStatement[9421-9462]:ReturnStatement[9952-9993]"
    }, {
      "left" : "if (text.length() == 0)",
      "right" : "if (text.length() == 0)",
      "info" : "IfStatement[9552-9655]:IfStatement[10083-10186]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9576-9655]:Block[10107-10186]"
    }, {
      "left" : "return (Character) getEmptyValue(ctxt);",
      "right" : "return (Character) getEmptyValue(ctxt);",
      "info" : "ReturnStatement[9598-9637]:ReturnStatement[10129-10168]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[9687-9693]:BreakStatement[10218-10224]"
    }, {
      "left" : "case JsonTokenId.ID_START_ARRAY:",
      "right" : "case JsonTokenId.ID_START_ARRAY:",
      "info" : "SwitchCase[9706-9738]:SwitchCase[10237-10269]"
    }, {
      "left" : "if (ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS))",
      "right" : "if (ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS))",
      "info" : "IfStatement[9755-10347]:IfStatement[10286-10878]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9826-10347]:Block[10357-10878]"
    }, {
      "left" : "p.nextToken();",
      "right" : "p.nextToken();",
      "info" : "ExpressionStatement[9848-9862]:ExpressionStatement[10379-10393]"
    }, {
      "left" : "final Character C = deserialize(p, ctxt);",
      "right" : "final Character C = deserialize(p, ctxt);",
      "info" : "VariableDeclarationStatement[9883-9924]:VariableDeclarationStatement[10414-10455]"
    }, {
      "left" : "if (p.nextToken() != JsonToken.END_ARRAY)",
      "right" : "if (p.nextToken() != JsonToken.END_ARRAY)",
      "info" : "IfStatement[9945-10299]:IfStatement[10476-10830]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9987-10299]:Block[10518-10830]"
    }, {
      "left" : "throw ctxt.wrongTokenException(p, JsonToken.END_ARRAY, \n                                \"Attempted to unwrap single value array for single '\" + _valueClass.getName() + \"' value but there was more than a single value in the array\"\n                                );",
      "right" : "throw ctxt.wrongTokenException(p, JsonToken.END_ARRAY, \n                                \"Attempted to unwrap single value array for single '\" + _valueClass.getName() + \"' value but there was more than a single value in the array\"\n                                );",
      "info" : "ThrowStatement[10013-10277]:ThrowStatement[10544-10808]"
    }, {
      "left" : "return C;",
      "right" : "return C;",
      "info" : "ReturnStatement[10320-10329]:ReturnStatement[10851-10860]"
    }, {
      "left" : "throw ctxt.mappingException(_valueClass, p.getCurrentToken());",
      "right" : "throw ctxt.mappingException(_valueClass, p.getCurrentToken());",
      "info" : "ThrowStatement[10374-10436]:ThrowStatement[10905-10967]"
    }, {
      "left" : "@JacksonStdImpl",
      "right" : "@JacksonStdImpl",
      "info" : "MarkerAnnotation[10458-10473]:MarkerAnnotation[10989-11004]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10478-10484]:Modifier[11009-11015]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[10485-10490]:Modifier[11016-11021]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[10491-10497]:Modifier[11022-11028]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[10498-10503]:TYPE_DECLARATION_KIND[11029-11034]"
    }, {
      "left" : "IntegerDeserializer",
      "right" : "IntegerDeserializer",
      "info" : "SimpleName[10504-10523]:SimpleName[11035-11054]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10886-10892]:Modifier[11417-11423]"
    }, {
      "left" : "IntegerDeserializer",
      "right" : "IntegerDeserializer",
      "info" : "SimpleName[10893-10912]:SimpleName[11424-11443]"
    }, {
      "left" : "Class<Integer> cls",
      "right" : "Class<Integer> cls",
      "info" : "SingleVariableDeclaration[10913-10931]:SingleVariableDeclaration[11444-11462]"
    }, {
      "left" : "Integer nvl",
      "right" : "Integer nvl",
      "info" : "SingleVariableDeclaration[10933-10944]:SingleVariableDeclaration[11464-11475]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10946-10986]:Block[11477-11517]"
    }, {
      "left" : "super(cls, nvl);",
      "right" : "super(cls, nvl);",
      "info" : "SuperConstructorInvocation[10960-10976]:SuperConstructorInvocation[11491-11507]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[11068-11077]:MarkerAnnotation[11599-11608]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11086-11092]:Modifier[11617-11623]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[11093-11100]:PrimitiveType[11624-11631]"
    }, {
      "left" : "isCachable",
      "right" : "isCachable",
      "info" : "SimpleName[11101-11111]:SimpleName[11632-11642]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11114-11130]:Block[11645-11661]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[11116-11128]:ReturnStatement[11647-11659]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[11140-11149]:MarkerAnnotation[11671-11680]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11158-11164]:Modifier[11689-11695]"
    }, {
      "left" : "Integer",
      "right" : "Integer",
      "info" : "SimpleType[11165-11172]:SimpleType[11696-11703]"
    }, {
      "left" : "deserialize",
      "right" : "deserialize",
      "info" : "SimpleName[11173-11184]:SimpleName[11704-11715]"
    }, {
      "left" : "JsonParser p",
      "right" : "JsonParser p",
      "info" : "SingleVariableDeclaration[11185-11197]:SingleVariableDeclaration[11716-11728]"
    }, {
      "left" : "DeserializationContext ctxt",
      "right" : "DeserializationContext ctxt",
      "info" : "SingleVariableDeclaration[11199-11226]:SingleVariableDeclaration[11730-11757]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[11235-11246]:SimpleType[11766-11777]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11247-11413]:Block[11778-11944]"
    }, {
      "left" : "if (p.hasToken(JsonToken.VALUE_NUMBER_INT))",
      "right" : "if (p.hasToken(JsonToken.VALUE_NUMBER_INT))",
      "info" : "IfStatement[11261-11360]:IfStatement[11792-11891]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11305-11360]:Block[11836-11891]"
    }, {
      "left" : "return p.getIntValue();",
      "right" : "return p.getIntValue();",
      "info" : "ReturnStatement[11323-11346]:ReturnStatement[11854-11877]"
    }, {
      "left" : "return _parseInteger(p, ctxt);",
      "right" : "return _parseInteger(p, ctxt);",
      "info" : "ReturnStatement[11373-11403]:ReturnStatement[11904-11934]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[11575-11584]:MarkerAnnotation[12106-12115]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11593-11599]:Modifier[12124-12130]"
    }, {
      "left" : "Integer",
      "right" : "Integer",
      "info" : "SimpleType[11600-11607]:SimpleType[12131-12138]"
    }, {
      "left" : "deserializeWithType",
      "right" : "deserializeWithType",
      "info" : "SimpleName[11608-11627]:SimpleName[12139-12158]"
    }, {
      "left" : "JsonParser p",
      "right" : "JsonParser p",
      "info" : "SingleVariableDeclaration[11628-11640]:SingleVariableDeclaration[12159-12171]"
    }, {
      "left" : "DeserializationContext ctxt",
      "right" : "DeserializationContext ctxt",
      "info" : "SingleVariableDeclaration[11642-11669]:SingleVariableDeclaration[12173-12200]"
    }, {
      "left" : "TypeDeserializer typeDeserializer",
      "right" : "TypeDeserializer typeDeserializer",
      "info" : "SingleVariableDeclaration[11687-11720]:SingleVariableDeclaration[12218-12251]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[11729-11740]:SimpleType[12260-12271]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11749-11915]:Block[12280-12446]"
    }, {
      "left" : "if (p.hasToken(JsonToken.VALUE_NUMBER_INT))",
      "right" : "if (p.hasToken(JsonToken.VALUE_NUMBER_INT))",
      "info" : "IfStatement[11763-11862]:IfStatement[12294-12393]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11807-11862]:Block[12338-12393]"
    }, {
      "left" : "return p.getIntValue();",
      "right" : "return p.getIntValue();",
      "info" : "ReturnStatement[11825-11848]:ReturnStatement[12356-12379]"
    }, {
      "left" : "return _parseInteger(p, ctxt);",
      "right" : "return _parseInteger(p, ctxt);",
      "info" : "ReturnStatement[11875-11905]:ReturnStatement[12406-12436]"
    }, {
      "left" : "@JacksonStdImpl",
      "right" : "@JacksonStdImpl",
      "info" : "MarkerAnnotation[11927-11942]:MarkerAnnotation[12458-12473]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11947-11953]:Modifier[12478-12484]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[11954-11959]:Modifier[12485-12490]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[11960-11966]:Modifier[12491-12497]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[11967-11972]:TYPE_DECLARATION_KIND[12498-12503]"
    }, {
      "left" : "LongDeserializer",
      "right" : "LongDeserializer",
      "info" : "SimpleName[11973-11989]:SimpleName[12504-12520]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12329-12335]:Modifier[12860-12866]"
    }, {
      "left" : "LongDeserializer",
      "right" : "LongDeserializer",
      "info" : "SimpleName[12336-12352]:SimpleName[12867-12883]"
    }, {
      "left" : "Class<Long> cls",
      "right" : "Class<Long> cls",
      "info" : "SingleVariableDeclaration[12353-12368]:SingleVariableDeclaration[12884-12899]"
    }, {
      "left" : "Long nvl",
      "right" : "Long nvl",
      "info" : "SingleVariableDeclaration[12370-12378]:SingleVariableDeclaration[12901-12909]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12380-12420]:Block[12911-12951]"
    }, {
      "left" : "super(cls, nvl);",
      "right" : "super(cls, nvl);",
      "info" : "SuperConstructorInvocation[12394-12410]:SuperConstructorInvocation[12925-12941]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[12502-12511]:MarkerAnnotation[13033-13042]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12520-12526]:Modifier[13051-13057]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[12527-12534]:PrimitiveType[13058-13065]"
    }, {
      "left" : "isCachable",
      "right" : "isCachable",
      "info" : "SimpleName[12535-12545]:SimpleName[13066-13076]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12548-12564]:Block[13079-13095]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[12550-12562]:ReturnStatement[13081-13093]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[12582-12591]:MarkerAnnotation[13113-13122]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12600-12606]:Modifier[13131-13137]"
    }, {
      "left" : "Long",
      "right" : "Long",
      "info" : "SimpleType[12607-12611]:SimpleType[13138-13142]"
    }, {
      "left" : "deserialize",
      "right" : "deserialize",
      "info" : "SimpleName[12612-12623]:SimpleName[13143-13154]"
    }, {
      "left" : "JsonParser p",
      "right" : "JsonParser p",
      "info" : "SingleVariableDeclaration[12624-12636]:SingleVariableDeclaration[13155-13167]"
    }, {
      "left" : "DeserializationContext ctxt",
      "right" : "DeserializationContext ctxt",
      "info" : "SingleVariableDeclaration[12638-12665]:SingleVariableDeclaration[13169-13196]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[12674-12685]:SimpleType[13205-13216]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12686-12850]:Block[13217-13381]"
    }, {
      "left" : "if (p.hasToken(JsonToken.VALUE_NUMBER_INT))",
      "right" : "if (p.hasToken(JsonToken.VALUE_NUMBER_INT))",
      "info" : "IfStatement[12700-12800]:IfStatement[13231-13331]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12744-12800]:Block[13275-13331]"
    }, {
      "left" : "return p.getLongValue();",
      "right" : "return p.getLongValue();",
      "info" : "ReturnStatement[12762-12786]:ReturnStatement[13293-13317]"
    }, {
      "left" : "return _parseLong(p, ctxt);",
      "right" : "return _parseLong(p, ctxt);",
      "info" : "ReturnStatement[12813-12840]:ReturnStatement[13344-13371]"
    }, {
      "left" : "@JacksonStdImpl",
      "right" : "@JacksonStdImpl",
      "info" : "MarkerAnnotation[12862-12877]:MarkerAnnotation[13393-13408]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12882-12888]:Modifier[13413-13419]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[12889-12895]:Modifier[13420-13426]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[12896-12901]:TYPE_DECLARATION_KIND[13427-13432]"
    }, {
      "left" : "FloatDeserializer",
      "right" : "FloatDeserializer",
      "info" : "SimpleName[12902-12919]:SimpleName[13433-13450]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[13253-13259]:Modifier[13784-13790]"
    }, {
      "left" : "FloatDeserializer",
      "right" : "FloatDeserializer",
      "info" : "SimpleName[13260-13277]:SimpleName[13791-13808]"
    }, {
      "left" : "Class<Float> cls",
      "right" : "Class<Float> cls",
      "info" : "SingleVariableDeclaration[13278-13294]:SingleVariableDeclaration[13809-13825]"
    }, {
      "left" : "Float nvl",
      "right" : "Float nvl",
      "info" : "SingleVariableDeclaration[13296-13305]:SingleVariableDeclaration[13827-13836]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13307-13347]:Block[13838-13878]"
    }, {
      "left" : "super(cls, nvl);",
      "right" : "super(cls, nvl);",
      "info" : "SuperConstructorInvocation[13321-13337]:SuperConstructorInvocation[13852-13868]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[13357-13366]:MarkerAnnotation[13888-13897]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[13375-13381]:Modifier[13906-13912]"
    }, {
      "left" : "Float",
      "right" : "Float",
      "info" : "SimpleType[13382-13387]:SimpleType[13913-13918]"
    }, {
      "left" : "deserialize",
      "right" : "deserialize",
      "info" : "SimpleName[13388-13399]:SimpleName[13919-13930]"
    }, {
      "left" : "JsonParser p",
      "right" : "JsonParser p",
      "info" : "SingleVariableDeclaration[13400-13412]:SingleVariableDeclaration[13931-13943]"
    }, {
      "left" : "DeserializationContext ctxt",
      "right" : "DeserializationContext ctxt",
      "info" : "SingleVariableDeclaration[13414-13441]:SingleVariableDeclaration[13945-13972]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[13450-13461]:SimpleType[13981-13992]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13470-13522]:Block[14001-14053]"
    }, {
      "left" : "return _parseFloat(p, ctxt);",
      "right" : "return _parseFloat(p, ctxt);",
      "info" : "ReturnStatement[13484-13512]:ReturnStatement[14015-14043]"
    }, {
      "left" : "@JacksonStdImpl",
      "right" : "@JacksonStdImpl",
      "info" : "MarkerAnnotation[13534-13549]:MarkerAnnotation[14065-14080]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[13554-13560]:Modifier[14085-14091]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[13561-13567]:Modifier[14092-14098]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[13568-13573]:TYPE_DECLARATION_KIND[14099-14104]"
    }, {
      "left" : "DoubleDeserializer",
      "right" : "DoubleDeserializer",
      "info" : "SimpleName[13574-13592]:SimpleName[14105-14123]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[13933-13939]:Modifier[14464-14470]"
    }, {
      "left" : "DoubleDeserializer",
      "right" : "DoubleDeserializer",
      "info" : "SimpleName[13940-13958]:SimpleName[14471-14489]"
    }, {
      "left" : "Class<Double> cls",
      "right" : "Class<Double> cls",
      "info" : "SingleVariableDeclaration[13959-13976]:SingleVariableDeclaration[14490-14507]"
    }, {
      "left" : "Double nvl",
      "right" : "Double nvl",
      "info" : "SingleVariableDeclaration[13978-13988]:SingleVariableDeclaration[14509-14519]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13990-14030]:Block[14521-14561]"
    }, {
      "left" : "super(cls, nvl);",
      "right" : "super(cls, nvl);",
      "info" : "SuperConstructorInvocation[14004-14020]:SuperConstructorInvocation[14535-14551]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[14040-14049]:MarkerAnnotation[14571-14580]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[14058-14064]:Modifier[14589-14595]"
    }, {
      "left" : "Double",
      "right" : "Double",
      "info" : "SimpleType[14065-14071]:SimpleType[14596-14602]"
    }, {
      "left" : "deserialize",
      "right" : "deserialize",
      "info" : "SimpleName[14072-14083]:SimpleName[14603-14614]"
    }, {
      "left" : "JsonParser jp",
      "right" : "JsonParser jp",
      "info" : "SingleVariableDeclaration[14084-14097]:SingleVariableDeclaration[14615-14628]"
    }, {
      "left" : "DeserializationContext ctxt",
      "right" : "DeserializationContext ctxt",
      "info" : "SingleVariableDeclaration[14099-14126]:SingleVariableDeclaration[14630-14657]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[14135-14146]:SimpleType[14666-14677]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14147-14201]:Block[14678-14732]"
    }, {
      "left" : "return _parseDouble(jp, ctxt);",
      "right" : "return _parseDouble(jp, ctxt);",
      "info" : "ReturnStatement[14161-14191]:ReturnStatement[14692-14722]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[14363-14372]:MarkerAnnotation[14894-14903]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[14381-14387]:Modifier[14912-14918]"
    }, {
      "left" : "Double",
      "right" : "Double",
      "info" : "SimpleType[14388-14394]:SimpleType[14919-14925]"
    }, {
      "left" : "deserializeWithType",
      "right" : "deserializeWithType",
      "info" : "SimpleName[14395-14414]:SimpleName[14926-14945]"
    }, {
      "left" : "JsonParser jp",
      "right" : "JsonParser jp",
      "info" : "SingleVariableDeclaration[14415-14428]:SingleVariableDeclaration[14946-14959]"
    }, {
      "left" : "DeserializationContext ctxt",
      "right" : "DeserializationContext ctxt",
      "info" : "SingleVariableDeclaration[14430-14457]:SingleVariableDeclaration[14961-14988]"
    }, {
      "left" : "TypeDeserializer typeDeserializer",
      "right" : "TypeDeserializer typeDeserializer",
      "info" : "SingleVariableDeclaration[14475-14508]:SingleVariableDeclaration[15006-15039]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[14517-14528]:SimpleType[15048-15059]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14537-14591]:Block[15068-15122]"
    }, {
      "left" : "return _parseDouble(jp, ctxt);",
      "right" : "return _parseDouble(jp, ctxt);",
      "info" : "ReturnStatement[14551-14581]:ReturnStatement[15082-15112]"
    }, {
      "left" : "@SuppressWarnings(\"serial\")",
      "right" : "@SuppressWarnings(\"serial\")",
      "info" : "SingleMemberAnnotation[15101-15128]:SingleMemberAnnotation[15632-15659]"
    }, {
      "left" : "@JacksonStdImpl",
      "right" : "@JacksonStdImpl",
      "info" : "MarkerAnnotation[15133-15148]:MarkerAnnotation[15664-15679]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[15153-15159]:Modifier[15684-15690]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[15160-15166]:Modifier[15691-15697]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[15167-15172]:TYPE_DECLARATION_KIND[15698-15703]"
    }, {
      "left" : "NumberDeserializer",
      "right" : "NumberDeserializer",
      "info" : "SimpleName[15173-15191]:SimpleName[15704-15722]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[15345-15351]:Modifier[15876-15882]"
    }, {
      "left" : "NumberDeserializer",
      "right" : "NumberDeserializer",
      "info" : "SimpleName[15352-15370]:SimpleName[15883-15901]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15373-15417]:Block[15904-15948]"
    }, {
      "left" : "super(Number.class);",
      "right" : "super(Number.class);",
      "info" : "SuperConstructorInvocation[15387-15407]:SuperConstructorInvocation[15918-15938]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[15427-15436]:MarkerAnnotation[15958-15967]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[15445-15451]:Modifier[15976-15982]"
    }, {
      "left" : "Object",
      "right" : "Object",
      "info" : "SimpleType[15452-15458]:SimpleType[15983-15989]"
    }, {
      "left" : "deserialize",
      "right" : "deserialize",
      "info" : "SimpleName[15459-15470]:SimpleName[15990-16001]"
    }, {
      "left" : "JsonParser p",
      "right" : "JsonParser p",
      "info" : "SingleVariableDeclaration[15471-15483]:SingleVariableDeclaration[16002-16014]"
    }, {
      "left" : "DeserializationContext ctxt",
      "right" : "DeserializationContext ctxt",
      "info" : "SingleVariableDeclaration[15485-15512]:SingleVariableDeclaration[16016-16043]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[15521-15532]:SimpleType[16052-16063]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15541-18713]:Block[16072-19244]"
    }, {
      "left" : "switch (p.getCurrentTokenId()) {\n            case JsonTokenId.ID_NUMBER_INT:\n                if (ctxt.hasSomeOfFeatures(F_MASK_INT_COERCIONS)) {\n                    return _coerceIntegral(p, ctxt);\n                }\n                return p.getNumberValue();\n\n            case JsonTokenId.ID_NUMBER_FLOAT:\n                if (ctxt.isEnabled(DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS)) {\n                    return p.getDecimalValue();\n                }\n                return Double.valueOf(p.getDoubleValue());\n\n            case JsonTokenId.ID_STRING:\n                /* Textual values are more difficult... not parsing itself, but figuring\n                 * out 'minimal' type to use \n                 */\n                String text = p.getText().trim();\n                if (text.length() == 0) {\n                    return getEmptyValue(ctxt);\n                }\n                if (_hasTextualNull(text)) {\n                    return getNullValue(ctxt);\n                }\n                if (_isPosInf(text)) {\n                    return Double.POSITIVE_INFINITY;\n                }\n                if (_isNegInf(text)) {\n                    return Double.NEGATIVE_INFINITY;\n                }\n                if (_isNaN(text)) {\n                    return Double.NaN;\n                }\n                try {\n                    if (!_isIntNumber(text)) {\n                        if (ctxt.isEnabled(DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS)) {\n                            return new BigDecimal(text);\n                        }\n                        return new Double(text);\n                    }\n                    if (ctxt.isEnabled(DeserializationFeature.USE_BIG_INTEGER_FOR_INTS)) {\n                        return new BigInteger(text);\n                    }\n                    long value = Long.parseLong(text);\n                    if (!ctxt.isEnabled(DeserializationFeature.USE_LONG_FOR_INTS)) {\n                        if (value <= Integer.MAX_VALUE && value >= Integer.MIN_VALUE) {\n                            return Integer.valueOf((int) value);\n                        }\n                    }\n                    return Long.valueOf(value);\n                } catch (IllegalArgumentException iae) {\n                    throw ctxt.weirdStringException(text, _valueClass, \"not a valid number\");\n                }\n            case JsonTokenId.ID_START_ARRAY:\n                if (ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {\n                    p.nextToken();\n                    final Object value = deserialize(p, ctxt);\n                    if (p.nextToken() != JsonToken.END_ARRAY) {\n                        throw ctxt.wrongTokenException(p, JsonToken.END_ARRAY, \n                                \"Attempted to unwrap single value array for single '\" + _valueClass.getName() + \"' value but there was more than a single value in the array\"\n                                );\n                    }\n                    return value;\n                }\n                break;\n            }",
      "right" : "switch (p.getCurrentTokenId()) {\n            case JsonTokenId.ID_NUMBER_INT:\n                if (ctxt.hasSomeOfFeatures(F_MASK_INT_COERCIONS)) {\n                    return _coerceIntegral(p, ctxt);\n                }\n                return p.getNumberValue();\n\n            case JsonTokenId.ID_NUMBER_FLOAT:\n                if (ctxt.isEnabled(DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS)) {\n                    return p.getDecimalValue();\n                }\n                return Double.valueOf(p.getDoubleValue());\n\n            case JsonTokenId.ID_STRING:\n                /* Textual values are more difficult... not parsing itself, but figuring\n                 * out 'minimal' type to use \n                 */\n                String text = p.getText().trim();\n                if (text.length() == 0) {\n                    return getEmptyValue(ctxt);\n                }\n                if (_hasTextualNull(text)) {\n                    return getNullValue(ctxt);\n                }\n                if (_isPosInf(text)) {\n                    return Double.POSITIVE_INFINITY;\n                }\n                if (_isNegInf(text)) {\n                    return Double.NEGATIVE_INFINITY;\n                }\n                if (_isNaN(text)) {\n                    return Double.NaN;\n                }\n                try {\n                    if (!_isIntNumber(text)) {\n                        if (ctxt.isEnabled(DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS)) {\n                            return new BigDecimal(text);\n                        }\n                        return new Double(text);\n                    }\n                    if (ctxt.isEnabled(DeserializationFeature.USE_BIG_INTEGER_FOR_INTS)) {\n                        return new BigInteger(text);\n                    }\n                    long value = Long.parseLong(text);\n                    if (!ctxt.isEnabled(DeserializationFeature.USE_LONG_FOR_INTS)) {\n                        if (value <= Integer.MAX_VALUE && value >= Integer.MIN_VALUE) {\n                            return Integer.valueOf((int) value);\n                        }\n                    }\n                    return Long.valueOf(value);\n                } catch (IllegalArgumentException iae) {\n                    throw ctxt.weirdStringException(text, _valueClass, \"not a valid number\");\n                }\n            case JsonTokenId.ID_START_ARRAY:\n                if (ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {\n                    p.nextToken();\n                    final Object value = deserialize(p, ctxt);\n                    if (p.nextToken() != JsonToken.END_ARRAY) {\n                        throw ctxt.wrongTokenException(p, JsonToken.END_ARRAY, \n                                \"Attempted to unwrap single value array for single '\" + _valueClass.getName() + \"' value but there was more than a single value in the array\"\n                                );\n                    }\n                    return value;\n                }\n                break;\n            }",
      "info" : "SwitchStatement[15555-18591]:SwitchStatement[16086-19122]"
    }, {
      "left" : "case JsonTokenId.ID_NUMBER_INT:",
      "right" : "case JsonTokenId.ID_NUMBER_INT:",
      "info" : "SwitchCase[15600-15631]:SwitchCase[16131-16162]"
    }, {
      "left" : "if (ctxt.hasSomeOfFeatures(F_MASK_INT_COERCIONS))",
      "right" : "if (ctxt.hasSomeOfFeatures(F_MASK_INT_COERCIONS))",
      "info" : "IfStatement[15648-15770]:IfStatement[16179-16301]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15698-15770]:Block[16229-16301]"
    }, {
      "left" : "return _coerceIntegral(p, ctxt);",
      "right" : "return _coerceIntegral(p, ctxt);",
      "info" : "ReturnStatement[15720-15752]:ReturnStatement[16251-16283]"
    }, {
      "left" : "return p.getNumberValue();",
      "right" : "return p.getNumberValue();",
      "info" : "ReturnStatement[15787-15813]:ReturnStatement[16318-16344]"
    }, {
      "left" : "case JsonTokenId.ID_NUMBER_FLOAT:",
      "right" : "case JsonTokenId.ID_NUMBER_FLOAT:",
      "info" : "SwitchCase[15827-15860]:SwitchCase[16358-16391]"
    }, {
      "left" : "if (ctxt.isEnabled(DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS))",
      "right" : "if (ctxt.isEnabled(DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS))",
      "info" : "IfStatement[15877-16015]:IfStatement[16408-16546]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15948-16015]:Block[16479-16546]"
    }, {
      "left" : "return p.getDecimalValue();",
      "right" : "return p.getDecimalValue();",
      "info" : "ReturnStatement[15970-15997]:ReturnStatement[16501-16528]"
    }, {
      "left" : "return Double.valueOf(p.getDoubleValue());",
      "right" : "return Double.valueOf(p.getDoubleValue());",
      "info" : "ReturnStatement[16032-16074]:ReturnStatement[16563-16605]"
    }, {
      "left" : "case JsonTokenId.ID_STRING:",
      "right" : "case JsonTokenId.ID_STRING:",
      "info" : "SwitchCase[16088-16115]:SwitchCase[16619-16646]"
    }, {
      "left" : "String text = p.getText().trim();",
      "right" : "String text = p.getText().trim();",
      "info" : "VariableDeclarationStatement[16287-16320]:VariableDeclarationStatement[16818-16851]"
    }, {
      "left" : "if (text.length() == 0)",
      "right" : "if (text.length() == 0)",
      "info" : "IfStatement[16337-16428]:IfStatement[16868-16959]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16361-16428]:Block[16892-16959]"
    }, {
      "left" : "return getEmptyValue(ctxt);",
      "right" : "return getEmptyValue(ctxt);",
      "info" : "ReturnStatement[16383-16410]:ReturnStatement[16914-16941]"
    }, {
      "left" : "if (_hasTextualNull(text))",
      "right" : "if (_hasTextualNull(text))",
      "info" : "IfStatement[16445-16538]:IfStatement[16976-17069]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16472-16538]:Block[17003-17069]"
    }, {
      "left" : "return getNullValue(ctxt);",
      "right" : "return getNullValue(ctxt);",
      "info" : "ReturnStatement[16494-16520]:ReturnStatement[17025-17051]"
    }, {
      "left" : "if (_isPosInf(text))",
      "right" : "if (_isPosInf(text))",
      "info" : "IfStatement[16555-16648]:IfStatement[17086-17179]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16576-16648]:Block[17107-17179]"
    }, {
      "left" : "return Double.POSITIVE_INFINITY;",
      "right" : "return Double.POSITIVE_INFINITY;",
      "info" : "ReturnStatement[16598-16630]:ReturnStatement[17129-17161]"
    }, {
      "left" : "if (_isNegInf(text))",
      "right" : "if (_isNegInf(text))",
      "info" : "IfStatement[16665-16758]:IfStatement[17196-17289]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16686-16758]:Block[17217-17289]"
    }, {
      "left" : "return Double.NEGATIVE_INFINITY;",
      "right" : "return Double.NEGATIVE_INFINITY;",
      "info" : "ReturnStatement[16708-16740]:ReturnStatement[17239-17271]"
    }, {
      "left" : "if (_isNaN(text))",
      "right" : "if (_isNaN(text))",
      "info" : "IfStatement[16775-16851]:IfStatement[17306-17382]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16793-16851]:Block[17324-17382]"
    }, {
      "left" : "return Double.NaN;",
      "right" : "return Double.NaN;",
      "info" : "ReturnStatement[16815-16833]:ReturnStatement[17346-17364]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[16868-17895]:TryStatement[17399-18426]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16872-17744]:Block[17403-18275]"
    }, {
      "left" : "if (!_isIntNumber(text))",
      "right" : "if (!_isIntNumber(text))",
      "info" : "IfStatement[16894-17171]:IfStatement[17425-17702]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16919-17171]:Block[17450-17702]"
    }, {
      "left" : "if (ctxt.isEnabled(DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS))",
      "right" : "if (ctxt.isEnabled(DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS))",
      "info" : "IfStatement[16945-17100]:IfStatement[17476-17631]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17016-17100]:Block[17547-17631]"
    }, {
      "left" : "return new BigDecimal(text);",
      "right" : "return new BigDecimal(text);",
      "info" : "ReturnStatement[17046-17074]:ReturnStatement[17577-17605]"
    }, {
      "left" : "return new Double(text);",
      "right" : "return new Double(text);",
      "info" : "ReturnStatement[17125-17149]:ReturnStatement[17656-17680]"
    }, {
      "left" : "if (ctxt.isEnabled(DeserializationFeature.USE_BIG_INTEGER_FOR_INTS))",
      "right" : "if (ctxt.isEnabled(DeserializationFeature.USE_BIG_INTEGER_FOR_INTS))",
      "info" : "IfStatement[17192-17337]:IfStatement[17723-17868]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17261-17337]:Block[17792-17868]"
    }, {
      "left" : "return new BigInteger(text);",
      "right" : "return new BigInteger(text);",
      "info" : "ReturnStatement[17287-17315]:ReturnStatement[17818-17846]"
    }, {
      "left" : "long value = Long.parseLong(text);",
      "right" : "long value = Long.parseLong(text);",
      "info" : "VariableDeclarationStatement[17358-17392]:VariableDeclarationStatement[17889-17923]"
    }, {
      "left" : "if (!ctxt.isEnabled(DeserializationFeature.USE_LONG_FOR_INTS))",
      "right" : "if (!ctxt.isEnabled(DeserializationFeature.USE_LONG_FOR_INTS))",
      "info" : "IfStatement[17413-17678]:IfStatement[17944-18209]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17476-17678]:Block[18007-18209]"
    }, {
      "left" : "if (value <= Integer.MAX_VALUE && value >= Integer.MIN_VALUE)",
      "right" : "if (value <= Integer.MAX_VALUE && value >= Integer.MIN_VALUE)",
      "info" : "IfStatement[17502-17656]:IfStatement[18033-18187]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17564-17656]:Block[18095-18187]"
    }, {
      "left" : "return Integer.valueOf((int) value);",
      "right" : "return Integer.valueOf((int) value);",
      "info" : "ReturnStatement[17594-17630]:ReturnStatement[18125-18161]"
    }, {
      "left" : "return Long.valueOf(value);",
      "right" : "return Long.valueOf(value);",
      "info" : "ReturnStatement[17699-17726]:ReturnStatement[18230-18257]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17782-17895]:Block[18313-18426]"
    }, {
      "left" : "throw ctxt.weirdStringException(text, _valueClass, \"not a valid number\");",
      "right" : "throw ctxt.weirdStringException(text, _valueClass, \"not a valid number\");",
      "info" : "ThrowStatement[17804-17877]:ThrowStatement[18335-18408]"
    }, {
      "left" : "case JsonTokenId.ID_START_ARRAY:",
      "right" : "case JsonTokenId.ID_START_ARRAY:",
      "info" : "SwitchCase[17908-17940]:SwitchCase[18439-18471]"
    }, {
      "left" : "if (ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS))",
      "right" : "if (ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS))",
      "info" : "IfStatement[17957-18554]:IfStatement[18488-19085]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18028-18554]:Block[18559-19085]"
    }, {
      "left" : "p.nextToken();",
      "right" : "p.nextToken();",
      "info" : "ExpressionStatement[18050-18064]:ExpressionStatement[18581-18595]"
    }, {
      "left" : "final Object value = deserialize(p, ctxt);",
      "right" : "final Object value = deserialize(p, ctxt);",
      "info" : "VariableDeclarationStatement[18085-18127]:VariableDeclarationStatement[18616-18658]"
    }, {
      "left" : "if (p.nextToken() != JsonToken.END_ARRAY)",
      "right" : "if (p.nextToken() != JsonToken.END_ARRAY)",
      "info" : "IfStatement[18148-18502]:IfStatement[18679-19033]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18190-18502]:Block[18721-19033]"
    }, {
      "left" : "throw ctxt.wrongTokenException(p, JsonToken.END_ARRAY, \n                                \"Attempted to unwrap single value array for single '\" + _valueClass.getName() + \"' value but there was more than a single value in the array\"\n                                );",
      "right" : "throw ctxt.wrongTokenException(p, JsonToken.END_ARRAY, \n                                \"Attempted to unwrap single value array for single '\" + _valueClass.getName() + \"' value but there was more than a single value in the array\"\n                                );",
      "info" : "ThrowStatement[18216-18480]:ThrowStatement[18747-19011]"
    }, {
      "left" : "return value;",
      "right" : "return value;",
      "info" : "ReturnStatement[18523-18536]:ReturnStatement[19054-19067]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[18571-18577]:BreakStatement[19102-19108]"
    }, {
      "left" : "throw ctxt.mappingException(_valueClass, p.getCurrentToken());",
      "right" : "throw ctxt.mappingException(_valueClass, p.getCurrentToken());",
      "info" : "ThrowStatement[18641-18703]:ThrowStatement[19172-19234]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[19018-19027]:MarkerAnnotation[19549-19558]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[19036-19042]:Modifier[19567-19573]"
    }, {
      "left" : "Object",
      "right" : "Object",
      "info" : "SimpleType[19043-19049]:SimpleType[19574-19580]"
    }, {
      "left" : "deserializeWithType",
      "right" : "deserializeWithType",
      "info" : "SimpleName[19050-19069]:SimpleName[19581-19600]"
    }, {
      "left" : "JsonParser jp",
      "right" : "JsonParser jp",
      "info" : "SingleVariableDeclaration[19070-19083]:SingleVariableDeclaration[19601-19614]"
    }, {
      "left" : "DeserializationContext ctxt",
      "right" : "DeserializationContext ctxt",
      "info" : "SingleVariableDeclaration[19085-19112]:SingleVariableDeclaration[19616-19643]"
    }, {
      "left" : "TypeDeserializer typeDeserializer",
      "right" : "TypeDeserializer typeDeserializer",
      "info" : "SingleVariableDeclaration[19156-19189]:SingleVariableDeclaration[19687-19720]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[19210-19221]:SimpleType[19741-19752]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19230-19642]:Block[19761-20173]"
    }, {
      "left" : "switch (jp.getCurrentTokenId()) {\n            case JsonTokenId.ID_NUMBER_INT:\n            case JsonTokenId.ID_NUMBER_FLOAT:\n            case JsonTokenId.ID_STRING:\n                // can not point to type information: hence must be non-typed (int/double)\n                return deserialize(jp, ctxt);\n            }",
      "right" : "switch (jp.getCurrentTokenId()) {\n            case JsonTokenId.ID_NUMBER_INT:\n            case JsonTokenId.ID_NUMBER_FLOAT:\n            case JsonTokenId.ID_STRING:\n                // can not point to type information: hence must be non-typed (int/double)\n                return deserialize(jp, ctxt);\n            }",
      "info" : "SwitchStatement[19244-19558]:SwitchStatement[19775-20089]"
    }, {
      "left" : "case JsonTokenId.ID_NUMBER_INT:",
      "right" : "case JsonTokenId.ID_NUMBER_INT:",
      "info" : "SwitchCase[19290-19321]:SwitchCase[19821-19852]"
    }, {
      "left" : "case JsonTokenId.ID_NUMBER_FLOAT:",
      "right" : "case JsonTokenId.ID_NUMBER_FLOAT:",
      "info" : "SwitchCase[19334-19367]:SwitchCase[19865-19898]"
    }, {
      "left" : "case JsonTokenId.ID_STRING:",
      "right" : "case JsonTokenId.ID_STRING:",
      "info" : "SwitchCase[19380-19407]:SwitchCase[19911-19938]"
    }, {
      "left" : "return deserialize(jp, ctxt);",
      "right" : "return deserialize(jp, ctxt);",
      "info" : "ReturnStatement[19515-19544]:ReturnStatement[20046-20075]"
    }, {
      "left" : "return typeDeserializer.deserializeTypedFromScalar(jp, ctxt);",
      "right" : "return typeDeserializer.deserializeTypedFromScalar(jp, ctxt);",
      "info" : "ReturnStatement[19571-19632]:ReturnStatement[20102-20163]"
    }, {
      "left" : "@SuppressWarnings(\"serial\")",
      "right" : "@SuppressWarnings(\"serial\")",
      "info" : "SingleMemberAnnotation[19987-20014]:SingleMemberAnnotation[20518-20545]"
    }, {
      "left" : "@JacksonStdImpl",
      "right" : "@JacksonStdImpl",
      "info" : "MarkerAnnotation[20019-20034]:MarkerAnnotation[20550-20565]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[20039-20045]:Modifier[20570-20576]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[20046-20052]:Modifier[20577-20583]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[20053-20058]:TYPE_DECLARATION_KIND[20584-20589]"
    }, {
      "left" : "BigIntegerDeserializer",
      "right" : "BigIntegerDeserializer",
      "info" : "SimpleName[20059-20081]:SimpleName[20590-20612]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[20239-20245]:Modifier[20770-20776]"
    }, {
      "left" : "BigIntegerDeserializer",
      "right" : "BigIntegerDeserializer",
      "info" : "SimpleName[20246-20268]:SimpleName[20777-20799]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20271-20299]:Block[20802-20830]"
    }, {
      "left" : "super(BigInteger.class);",
      "right" : "super(BigInteger.class);",
      "info" : "SuperConstructorInvocation[20273-20297]:SuperConstructorInvocation[20804-20828]"
    }, {
      "left" : "@SuppressWarnings(\"incomplete-switch\")",
      "right" : "@SuppressWarnings(\"incomplete-switch\")",
      "info" : "SingleMemberAnnotation[20309-20347]:SingleMemberAnnotation[20840-20878]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[20356-20365]:MarkerAnnotation[20887-20896]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[20374-20380]:Modifier[20905-20911]"
    }, {
      "left" : "BigInteger",
      "right" : "BigInteger",
      "info" : "SimpleType[20381-20391]:SimpleType[20912-20922]"
    }, {
      "left" : "deserialize",
      "right" : "deserialize",
      "info" : "SimpleName[20392-20403]:SimpleName[20923-20934]"
    }, {
      "left" : "JsonParser p",
      "right" : "JsonParser p",
      "info" : "SingleVariableDeclaration[20404-20416]:SingleVariableDeclaration[20935-20947]"
    }, {
      "left" : "DeserializationContext ctxt",
      "right" : "DeserializationContext ctxt",
      "info" : "SingleVariableDeclaration[20418-20445]:SingleVariableDeclaration[20949-20976]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[20454-20465]:SimpleType[20985-20996]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20474-22362]:Block[21005-22893]"
    }, {
      "left" : "switch (p.getCurrentTokenId()) {\n            case JsonTokenId.ID_NUMBER_INT:\n                switch (p.getNumberType()) {\n                case INT:\n                case LONG:\n                case BIG_INTEGER:\n                    return p.getBigIntegerValue();\n                }\n                break;\n            case JsonTokenId.ID_NUMBER_FLOAT:\n                if (!ctxt.isEnabled(DeserializationFeature.ACCEPT_FLOAT_AS_INT)) {\n                    _failDoubleToIntCoercion(p, ctxt, \"java.math.BigInteger\");\n                }\n                return p.getDecimalValue().toBigInteger();\n            case JsonTokenId.ID_START_ARRAY:\n                if (ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {\n                    p.nextToken();\n                    final BigInteger value = deserialize(p, ctxt);\n                    if (p.nextToken() != JsonToken.END_ARRAY) {\n                        throw ctxt.wrongTokenException(p, JsonToken.END_ARRAY,\n                            \"Attempted to unwrap single value array for single 'BigInteger' value but there was more than a single value in the array\"\n                        );\n                    }\n                    return value;\n                }\n                break;\n            case JsonTokenId.ID_STRING: // let's do implicit re-parse\n                String text = p.getText().trim();\n                if (text.length() == 0) {\n                    return null;\n                }\n                try {\n                    return new BigInteger(text);\n                } catch (IllegalArgumentException iae) {\n                    throw ctxt.weirdStringException(text, _valueClass, \"not a valid representation\");\n                }\n            }",
      "right" : "switch (p.getCurrentTokenId()) {\n            case JsonTokenId.ID_NUMBER_INT:\n                switch (p.getNumberType()) {\n                case INT:\n                case LONG:\n                case BIG_INTEGER:\n                    return p.getBigIntegerValue();\n                }\n                break;\n            case JsonTokenId.ID_NUMBER_FLOAT:\n                if (!ctxt.isEnabled(DeserializationFeature.ACCEPT_FLOAT_AS_INT)) {\n                    _failDoubleToIntCoercion(p, ctxt, \"java.math.BigInteger\");\n                }\n                return p.getDecimalValue().toBigInteger();\n            case JsonTokenId.ID_START_ARRAY:\n                if (ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {\n                    p.nextToken();\n                    final BigInteger value = deserialize(p, ctxt);\n                    if (p.nextToken() != JsonToken.END_ARRAY) {\n                        throw ctxt.wrongTokenException(p, JsonToken.END_ARRAY,\n                            \"Attempted to unwrap single value array for single 'BigInteger' value but there was more than a single value in the array\"\n                        );\n                    }\n                    return value;\n                }\n                break;\n            case JsonTokenId.ID_STRING: // let's do implicit re-parse\n                String text = p.getText().trim();\n                if (text.length() == 0) {\n                    return null;\n                }\n                try {\n                    return new BigInteger(text);\n                } catch (IllegalArgumentException iae) {\n                    throw ctxt.weirdStringException(text, _valueClass, \"not a valid representation\");\n                }\n            }",
      "info" : "SwitchStatement[20488-22202]:SwitchStatement[21019-22733]"
    }, {
      "left" : "case JsonTokenId.ID_NUMBER_INT:",
      "right" : "case JsonTokenId.ID_NUMBER_INT:",
      "info" : "SwitchCase[20533-20564]:SwitchCase[21064-21095]"
    }, {
      "left" : "switch (p.getNumberType()) {\n                case INT:\n                case LONG:\n                case BIG_INTEGER:\n                    return p.getBigIntegerValue();\n                }",
      "right" : "switch (p.getNumberType()) {\n                case INT:\n                case LONG:\n                case BIG_INTEGER:\n                    return p.getBigIntegerValue();\n                }",
      "info" : "SwitchStatement[20581-20765]:SwitchStatement[21112-21296]"
    }, {
      "left" : "case INT:",
      "right" : "case INT:",
      "info" : "SwitchCase[20626-20635]:SwitchCase[21157-21166]"
    }, {
      "left" : "case LONG:",
      "right" : "case LONG:",
      "info" : "SwitchCase[20652-20662]:SwitchCase[21183-21193]"
    }, {
      "left" : "case BIG_INTEGER:",
      "right" : "case BIG_INTEGER:",
      "info" : "SwitchCase[20679-20696]:SwitchCase[21210-21227]"
    }, {
      "left" : "return p.getBigIntegerValue();",
      "right" : "return p.getBigIntegerValue();",
      "info" : "ReturnStatement[20717-20747]:ReturnStatement[21248-21278]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[20782-20788]:BreakStatement[21313-21319]"
    }, {
      "left" : "case JsonTokenId.ID_NUMBER_FLOAT:",
      "right" : "case JsonTokenId.ID_NUMBER_FLOAT:",
      "info" : "SwitchCase[20801-20834]:SwitchCase[21332-21365]"
    }, {
      "left" : "if (!ctxt.isEnabled(DeserializationFeature.ACCEPT_FLOAT_AS_INT))",
      "right" : "if (!ctxt.isEnabled(DeserializationFeature.ACCEPT_FLOAT_AS_INT))",
      "info" : "IfStatement[20851-21014]:IfStatement[21382-21545]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20916-21014]:Block[21447-21545]"
    }, {
      "left" : "_failDoubleToIntCoercion(p, ctxt, \"java.math.BigInteger\");",
      "right" : "_failDoubleToIntCoercion(p, ctxt, \"java.math.BigInteger\");",
      "info" : "ExpressionStatement[20938-20996]:ExpressionStatement[21469-21527]"
    }, {
      "left" : "return p.getDecimalValue().toBigInteger();",
      "right" : "return p.getDecimalValue().toBigInteger();",
      "info" : "ReturnStatement[21031-21073]:ReturnStatement[21562-21604]"
    }, {
      "left" : "case JsonTokenId.ID_START_ARRAY:",
      "right" : "case JsonTokenId.ID_START_ARRAY:",
      "info" : "SwitchCase[21086-21118]:SwitchCase[21617-21649]"
    }, {
      "left" : "if (ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS))",
      "right" : "if (ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS))",
      "info" : "IfStatement[21135-21704]:IfStatement[21666-22235]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21206-21704]:Block[21737-22235]"
    }, {
      "left" : "p.nextToken();",
      "right" : "p.nextToken();",
      "info" : "ExpressionStatement[21228-21242]:ExpressionStatement[21759-21773]"
    }, {
      "left" : "final BigInteger value = deserialize(p, ctxt);",
      "right" : "final BigInteger value = deserialize(p, ctxt);",
      "info" : "VariableDeclarationStatement[21263-21309]:VariableDeclarationStatement[21794-21840]"
    }, {
      "left" : "if (p.nextToken() != JsonToken.END_ARRAY)",
      "right" : "if (p.nextToken() != JsonToken.END_ARRAY)",
      "info" : "IfStatement[21330-21652]:IfStatement[21861-22183]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21372-21652]:Block[21903-22183]"
    }, {
      "left" : "throw ctxt.wrongTokenException(p, JsonToken.END_ARRAY,\n                            \"Attempted to unwrap single value array for single 'BigInteger' value but there was more than a single value in the array\"\n                        );",
      "right" : "throw ctxt.wrongTokenException(p, JsonToken.END_ARRAY,\n                            \"Attempted to unwrap single value array for single 'BigInteger' value but there was more than a single value in the array\"\n                        );",
      "info" : "ThrowStatement[21398-21630]:ThrowStatement[21929-22161]"
    }, {
      "left" : "return value;",
      "right" : "return value;",
      "info" : "ReturnStatement[21673-21686]:ReturnStatement[22204-22217]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[21721-21727]:BreakStatement[22252-22258]"
    }, {
      "left" : "case JsonTokenId.ID_STRING:",
      "right" : "case JsonTokenId.ID_STRING:",
      "info" : "SwitchCase[21740-21767]:SwitchCase[22271-22298]"
    }, {
      "left" : "String text = p.getText().trim();",
      "right" : "String text = p.getText().trim();",
      "info" : "VariableDeclarationStatement[21814-21847]:VariableDeclarationStatement[22345-22378]"
    }, {
      "left" : "if (text.length() == 0)",
      "right" : "if (text.length() == 0)",
      "info" : "IfStatement[21864-21940]:IfStatement[22395-22471]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21888-21940]:Block[22419-22471]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[21910-21922]:ReturnStatement[22441-22453]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[21957-22188]:TryStatement[22488-22719]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21961-22029]:Block[22492-22560]"
    }, {
      "left" : "return new BigInteger(text);",
      "right" : "return new BigInteger(text);",
      "info" : "ReturnStatement[21983-22011]:ReturnStatement[22514-22542]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22067-22188]:Block[22598-22719]"
    }, {
      "left" : "throw ctxt.weirdStringException(text, _valueClass, \"not a valid representation\");",
      "right" : "throw ctxt.weirdStringException(text, _valueClass, \"not a valid representation\");",
      "info" : "ThrowStatement[22089-22170]:ThrowStatement[22620-22701]"
    }, {
      "left" : "throw ctxt.mappingException(_valueClass, p.getCurrentToken());",
      "right" : "throw ctxt.mappingException(_valueClass, p.getCurrentToken());",
      "info" : "ThrowStatement[22290-22352]:ThrowStatement[22821-22883]"
    }, {
      "left" : "@SuppressWarnings(\"serial\")",
      "right" : "@SuppressWarnings(\"serial\")",
      "info" : "SingleMemberAnnotation[22378-22405]:SingleMemberAnnotation[22909-22936]"
    }, {
      "left" : "@JacksonStdImpl",
      "right" : "@JacksonStdImpl",
      "info" : "MarkerAnnotation[22410-22425]:MarkerAnnotation[22941-22956]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[22430-22436]:Modifier[22961-22967]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[22437-22443]:Modifier[22968-22974]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[22444-22449]:TYPE_DECLARATION_KIND[22975-22980]"
    }, {
      "left" : "BigDecimalDeserializer",
      "right" : "BigDecimalDeserializer",
      "info" : "SimpleName[22450-22472]:SimpleName[22981-23003]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[22631-22637]:Modifier[23162-23168]"
    }, {
      "left" : "BigDecimalDeserializer",
      "right" : "BigDecimalDeserializer",
      "info" : "SimpleName[22638-22660]:SimpleName[23169-23191]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22663-22691]:Block[23194-23222]"
    }, {
      "left" : "super(BigDecimal.class);",
      "right" : "super(BigDecimal.class);",
      "info" : "SuperConstructorInvocation[22665-22689]:SuperConstructorInvocation[23196-23220]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[22701-22710]:MarkerAnnotation[23232-23241]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[22719-22725]:Modifier[23250-23256]"
    }, {
      "left" : "BigDecimal",
      "right" : "BigDecimal",
      "info" : "SimpleType[22726-22736]:SimpleType[23257-23267]"
    }, {
      "left" : "deserialize",
      "right" : "deserialize",
      "info" : "SimpleName[22737-22748]:SimpleName[23268-23279]"
    }, {
      "left" : "JsonParser p",
      "right" : "JsonParser p",
      "info" : "SingleVariableDeclaration[22749-22761]:SingleVariableDeclaration[23280-23292]"
    }, {
      "left" : "DeserializationContext ctxt",
      "right" : "DeserializationContext ctxt",
      "info" : "SingleVariableDeclaration[22763-22790]:SingleVariableDeclaration[23294-23321]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[22811-22822]:SimpleType[23342-23353]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22831-24232]:Block[23362-24763]"
    }, {
      "left" : "switch (p.getCurrentTokenId()) {\n            case JsonTokenId.ID_NUMBER_INT:\n            case JsonTokenId.ID_NUMBER_FLOAT:\n                return p.getDecimalValue();\n            case JsonTokenId.ID_STRING:\n                String text = p.getText().trim();\n                if (text.length() == 0) {\n                    return null;\n                }\n                try {\n                    return new BigDecimal(text);\n                } catch (IllegalArgumentException iae) {\n                    throw ctxt.weirdStringException(text, _valueClass, \"not a valid representation\");\n                }\n            case JsonTokenId.ID_START_ARRAY:\n                if (ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {\n                    p.nextToken();\n                    final BigDecimal value = deserialize(p, ctxt);\n                    if (p.nextToken() != JsonToken.END_ARRAY) {\n                        throw ctxt.wrongTokenException(p, JsonToken.END_ARRAY,\n                            \"Attempted to unwrap single value array for single 'BigDecimal' value but there was more than a single value in the array\"\n                        );\n                    }\n                    return value;\n                }\n                break;\n            }",
      "right" : "switch (p.getCurrentTokenId()) {\n            case JsonTokenId.ID_NUMBER_INT:\n            case JsonTokenId.ID_NUMBER_FLOAT:\n                return p.getDecimalValue();\n            case JsonTokenId.ID_STRING:\n                String text = p.getText().trim();\n                if (text.length() == 0) {\n                    return null;\n                }\n                try {\n                    return new BigDecimal(text);\n                } catch (IllegalArgumentException iae) {\n                    throw ctxt.weirdStringException(text, _valueClass, \"not a valid representation\");\n                }\n            case JsonTokenId.ID_START_ARRAY:\n                if (ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {\n                    p.nextToken();\n                    final BigDecimal value = deserialize(p, ctxt);\n                    if (p.nextToken() != JsonToken.END_ARRAY) {\n                        throw ctxt.wrongTokenException(p, JsonToken.END_ARRAY,\n                            \"Attempted to unwrap single value array for single 'BigDecimal' value but there was more than a single value in the array\"\n                        );\n                    }\n                    return value;\n                }\n                break;\n            }",
      "info" : "SwitchStatement[22845-24110]:SwitchStatement[23376-24641]"
    }, {
      "left" : "case JsonTokenId.ID_NUMBER_INT:",
      "right" : "case JsonTokenId.ID_NUMBER_INT:",
      "info" : "SwitchCase[22890-22921]:SwitchCase[23421-23452]"
    }, {
      "left" : "case JsonTokenId.ID_NUMBER_FLOAT:",
      "right" : "case JsonTokenId.ID_NUMBER_FLOAT:",
      "info" : "SwitchCase[22934-22967]:SwitchCase[23465-23498]"
    }, {
      "left" : "return p.getDecimalValue();",
      "right" : "return p.getDecimalValue();",
      "info" : "ReturnStatement[22984-23011]:ReturnStatement[23515-23542]"
    }, {
      "left" : "case JsonTokenId.ID_STRING:",
      "right" : "case JsonTokenId.ID_STRING:",
      "info" : "SwitchCase[23024-23051]:SwitchCase[23555-23582]"
    }, {
      "left" : "String text = p.getText().trim();",
      "right" : "String text = p.getText().trim();",
      "info" : "VariableDeclarationStatement[23068-23101]:VariableDeclarationStatement[23599-23632]"
    }, {
      "left" : "if (text.length() == 0)",
      "right" : "if (text.length() == 0)",
      "info" : "IfStatement[23118-23194]:IfStatement[23649-23725]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23142-23194]:Block[23673-23725]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[23164-23176]:ReturnStatement[23695-23707]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[23211-23442]:TryStatement[23742-23973]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23215-23283]:Block[23746-23814]"
    }, {
      "left" : "return new BigDecimal(text);",
      "right" : "return new BigDecimal(text);",
      "info" : "ReturnStatement[23237-23265]:ReturnStatement[23768-23796]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23321-23442]:Block[23852-23973]"
    }, {
      "left" : "throw ctxt.weirdStringException(text, _valueClass, \"not a valid representation\");",
      "right" : "throw ctxt.weirdStringException(text, _valueClass, \"not a valid representation\");",
      "info" : "ThrowStatement[23343-23424]:ThrowStatement[23874-23955]"
    }, {
      "left" : "case JsonTokenId.ID_START_ARRAY:",
      "right" : "case JsonTokenId.ID_START_ARRAY:",
      "info" : "SwitchCase[23455-23487]:SwitchCase[23986-24018]"
    }, {
      "left" : "if (ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS))",
      "right" : "if (ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS))",
      "info" : "IfStatement[23504-24073]:IfStatement[24035-24604]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23575-24073]:Block[24106-24604]"
    }, {
      "left" : "p.nextToken();",
      "right" : "p.nextToken();",
      "info" : "ExpressionStatement[23597-23611]:ExpressionStatement[24128-24142]"
    }, {
      "left" : "final BigDecimal value = deserialize(p, ctxt);",
      "right" : "final BigDecimal value = deserialize(p, ctxt);",
      "info" : "VariableDeclarationStatement[23632-23678]:VariableDeclarationStatement[24163-24209]"
    }, {
      "left" : "if (p.nextToken() != JsonToken.END_ARRAY)",
      "right" : "if (p.nextToken() != JsonToken.END_ARRAY)",
      "info" : "IfStatement[23699-24021]:IfStatement[24230-24552]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23741-24021]:Block[24272-24552]"
    }, {
      "left" : "throw ctxt.wrongTokenException(p, JsonToken.END_ARRAY,\n                            \"Attempted to unwrap single value array for single 'BigDecimal' value but there was more than a single value in the array\"\n                        );",
      "right" : "throw ctxt.wrongTokenException(p, JsonToken.END_ARRAY,\n                            \"Attempted to unwrap single value array for single 'BigDecimal' value but there was more than a single value in the array\"\n                        );",
      "info" : "ThrowStatement[23767-23999]:ThrowStatement[24298-24530]"
    }, {
      "left" : "return value;",
      "right" : "return value;",
      "info" : "ReturnStatement[24042-24055]:ReturnStatement[24573-24586]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[24090-24096]:BreakStatement[24621-24627]"
    }, {
      "left" : "throw ctxt.mappingException(_valueClass, p.getCurrentToken());",
      "right" : "throw ctxt.mappingException(_valueClass, p.getCurrentToken());",
      "info" : "ThrowStatement[24160-24222]:ThrowStatement[24691-24753]"
    } ]
  },
  "interFileMappings" : { }
}