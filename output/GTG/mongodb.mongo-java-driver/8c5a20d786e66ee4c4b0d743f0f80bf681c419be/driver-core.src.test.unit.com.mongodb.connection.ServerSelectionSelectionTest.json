{
  "matchedElements" : [
 {
    "left" : "class : ServerSelectionSelectionTest",
    "right" : "class : ServerSelectionSelectionTest",
    "info" : "TypeDeclaration[1661-8310]:TypeDeclaration[1654-8303]"
  }, {
    "left" : "definition",
    "right" : "definition",
    "info" : "FieldDeclaration[1739-1777]:FieldDeclaration[1732-1770]"
  }, {
    "left" : "clusterDescription",
    "right" : "clusterDescription",
    "info" : "FieldDeclaration[1782-1834]:FieldDeclaration[1775-1827]"
  }, {
    "left" : "public ServerSelectionSelectionTest(description , definition )",
    "right" : "public ServerSelectionSelectionTest(description , definition )",
    "info" : "MethodDeclaration[1840-2085]:MethodDeclaration[1833-2078]"
  }, {
    "left" : "public shouldPassAllOutcomes() : void",
    "right" : "public shouldPassAllOutcomes() : void",
    "info" : "MethodDeclaration[2091-2975]:MethodDeclaration[2084-2968]"
  }, {
    "left" : "public data() : ",
    "right" : "public data() : ",
    "info" : "MethodDeclaration[2981-3399]:MethodDeclaration[2974-3392]"
  }, {
    "left" : "private buildClusterDescription(topologyDescription ) : ",
    "right" : "private buildClusterDescription(topologyDescription ) : ",
    "info" : "MethodDeclaration[3405-3954]:MethodDeclaration[3398-3947]"
  }, {
    "left" : "private getClusterType(type ) : ",
    "right" : "private getClusterType(type ) : ",
    "info" : "MethodDeclaration[3960-4461]:MethodDeclaration[3953-4454]"
  }, {
    "left" : "private buildServerDescriptions(serverDescriptions ...) : ",
    "right" : "private buildServerDescriptions(serverDescriptions ...) : ",
    "info" : "MethodDeclaration[4467-4821]:MethodDeclaration[4460-4814]"
  }, {
    "left" : "private buildServerDescription(serverDescription ) : ",
    "right" : "private buildServerDescription(serverDescription ) : ",
    "info" : "MethodDeclaration[4827-5482]:MethodDeclaration[4820-5475]"
  }, {
    "left" : "private getServerType(serverTypeString ) : ",
    "right" : "private getServerType(serverTypeString ) : ",
    "info" : "MethodDeclaration[5488-6742]:MethodDeclaration[5481-6735]"
  }, {
    "left" : "private buildTagSets(tags ...) : ",
    "right" : "private buildTagSets(tags ...) : ",
    "info" : "MethodDeclaration[6748-6994]:MethodDeclaration[6741-6987]"
  }, {
    "left" : "private buildTagSet(tags ...) : ",
    "right" : "private buildTagSet(tags ...) : ",
    "info" : "MethodDeclaration[7001-7281]:MethodDeclaration[6994-7274]"
  }, {
    "left" : "private getServerSelector() : ",
    "right" : "private getServerSelector() : ",
    "info" : "MethodDeclaration[7287-8086]:MethodDeclaration[7280-8079]"
  }, {
    "left" : "private assertServers(actual , expected ) : void",
    "right" : "private assertServers(actual , expected ) : void",
    "info" : "MethodDeclaration[8092-8308]:MethodDeclaration[8085-8301]"
  } ],
  "mappings" : [
 {
    "left" : "@RunWith(Parameterized.class)",
    "right" : "@RunWith(Parameterized.class)",
    "info" : "SingleMemberAnnotation[1661-1690]:SingleMemberAnnotation[1654-1683]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[1691-1697]:Modifier[1684-1690]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[1698-1703]:TYPE_DECLARATION_KIND[1691-1696]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[1840-1846]:Modifier[1833-1839]"
  }, {
    "left" : "ServerSelectionSelectionTest",
    "right" : "ServerSelectionSelectionTest",
    "info" : "SimpleName[1847-1875]:SimpleName[1840-1868]"
  }, {
    "left" : "final String description",
    "right" : "final String description",
    "info" : "SingleVariableDeclaration[1876-1900]:SingleVariableDeclaration[1869-1893]"
  }, {
    "left" : "final BsonDocument definition",
    "right" : "final BsonDocument definition",
    "info" : "SingleVariableDeclaration[1902-1931]:SingleVariableDeclaration[1895-1924]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[1933-2085]:Block[1926-2078]"
  }, {
    "left" : "this.definition = definition;",
    "right" : "this.definition = definition;",
    "info" : "ExpressionStatement[1943-1972]:ExpressionStatement[1936-1965]"
  }, {
    "left" : "this.clusterDescription = buildClusterDescription(definition.getDocument(\"topology_description\"));",
    "right" : "this.clusterDescription = buildClusterDescription(definition.getDocument(\"topology_description\"));",
    "info" : "ExpressionStatement[1981-2079]:ExpressionStatement[1974-2072]"
  }, {
    "left" : "@Test",
    "right" : "@Test",
    "info" : "MarkerAnnotation[2091-2096]:MarkerAnnotation[2084-2089]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[2101-2107]:Modifier[2094-2100]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[2108-2112]:PrimitiveType[2101-2105]"
  }, {
    "left" : "shouldPassAllOutcomes",
    "right" : "shouldPassAllOutcomes",
    "info" : "SimpleName[2113-2134]:SimpleName[2106-2127]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2137-2975]:Block[2130-2968]"
  }, {
    "left" : "ServerSelector serverSelector = getServerSelector();",
    "right" : "ServerSelector serverSelector = getServerSelector();",
    "info" : "VariableDeclarationStatement[2147-2199]:VariableDeclarationStatement[2140-2192]"
  }, {
    "left" : "List<ServerDescription> suitableServers = buildServerDescriptions(definition.getArray(\"suitable_servers\"));",
    "right" : "List<ServerDescription> suitableServers = buildServerDescriptions(definition.getArray(\"suitable_servers\"));",
    "info" : "VariableDeclarationStatement[2209-2316]:VariableDeclarationStatement[2202-2309]"
  }, {
    "left" : "List<ServerDescription> selectedServers = serverSelector.select(clusterDescription);",
    "right" : "List<ServerDescription> selectedServers = serverSelector.select(clusterDescription);",
    "info" : "VariableDeclarationStatement[2325-2409]:VariableDeclarationStatement[2318-2402]"
  }, {
    "left" : "assertServers(selectedServers, suitableServers);",
    "right" : "assertServers(selectedServers, suitableServers);",
    "info" : "ExpressionStatement[2418-2466]:ExpressionStatement[2411-2459]"
  }, {
    "left" : "ServerSelector latencyBasedServerSelector = new CompositeServerSelector(asList(serverSelector,\n                new LatencyMinimizingServerSelector(15, TimeUnit.MILLISECONDS)));",
    "right" : "ServerSelector latencyBasedServerSelector = new CompositeServerSelector(asList(serverSelector,\n                new LatencyMinimizingServerSelector(15, TimeUnit.MILLISECONDS)));",
    "info" : "VariableDeclarationStatement[2476-2652]:VariableDeclarationStatement[2469-2645]"
  }, {
    "left" : "List<ServerDescription> inLatencyWindowServers = buildServerDescriptions(definition.getArray(\"in_latency_window\"));",
    "right" : "List<ServerDescription> inLatencyWindowServers = buildServerDescriptions(definition.getArray(\"in_latency_window\"));",
    "info" : "VariableDeclarationStatement[2661-2776]:VariableDeclarationStatement[2654-2769]"
  }, {
    "left" : "List<ServerDescription> latencyBasedSelectedServers = latencyBasedServerSelector.select(clusterDescription);",
    "right" : "List<ServerDescription> latencyBasedSelectedServers = latencyBasedServerSelector.select(clusterDescription);",
    "info" : "VariableDeclarationStatement[2785-2893]:VariableDeclarationStatement[2778-2886]"
  }, {
    "left" : "assertServers(latencyBasedSelectedServers, inLatencyWindowServers);",
    "right" : "assertServers(latencyBasedSelectedServers, inLatencyWindowServers);",
    "info" : "ExpressionStatement[2902-2969]:ExpressionStatement[2895-2962]"
  }, {
    "left" : "@Parameterized.Parameters(name = \"{0}\")",
    "right" : "@Parameterized.Parameters(name = \"{0}\")",
    "info" : "NormalAnnotation[2981-3020]:NormalAnnotation[2974-3013]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[3025-3031]:Modifier[3018-3024]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[3032-3038]:Modifier[3025-3031]"
  }, {
    "left" : "Collection<Object[]>",
    "right" : "Collection<Object[]>",
    "info" : "ParameterizedType[3039-3059]:ParameterizedType[3032-3052]"
  }, {
    "left" : "data",
    "right" : "data",
    "info" : "SimpleName[3060-3064]:SimpleName[3053-3057]"
  }, {
    "left" : "URISyntaxException",
    "right" : "URISyntaxException",
    "info" : "SimpleType[3074-3092]:SimpleType[3067-3085]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[3094-3105]:SimpleType[3087-3098]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3106-3399]:Block[3099-3392]"
  }, {
    "left" : "List<Object[]> data = new ArrayList<Object[]>();",
    "right" : "List<Object[]> data = new ArrayList<Object[]>();",
    "info" : "VariableDeclarationStatement[3116-3164]:VariableDeclarationStatement[3109-3157]"
  }, {
    "left" : "for (File file : JsonPoweredTestHelper.getTestFiles(\"/server-selection/server_selection\"))",
    "right" : "for (File file : JsonPoweredTestHelper.getTestFiles(\"/server-selection/server_selection\"))",
    "info" : "EnhancedForStatement[3173-3372]:EnhancedForStatement[3166-3365]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3264-3372]:Block[3257-3365]"
  }, {
    "left" : "data.add(new Object[]{file.getName(), JsonPoweredTestHelper.getTestDocument(file)});",
    "right" : "data.add(new Object[]{file.getName(), JsonPoweredTestHelper.getTestDocument(file)});",
    "info" : "ExpressionStatement[3278-3362]:ExpressionStatement[3271-3355]"
  }, {
    "left" : "return data;",
    "right" : "return data;",
    "info" : "ReturnStatement[3381-3393]:ReturnStatement[3374-3386]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[3405-3412]:Modifier[3398-3405]"
  }, {
    "left" : "ClusterDescription",
    "right" : "ClusterDescription",
    "info" : "SimpleType[3413-3431]:SimpleType[3406-3424]"
  }, {
    "left" : "buildClusterDescription",
    "right" : "buildClusterDescription",
    "info" : "SimpleName[3432-3455]:SimpleName[3425-3448]"
  }, {
    "left" : "final BsonDocument topologyDescription",
    "right" : "final BsonDocument topologyDescription",
    "info" : "SingleVariableDeclaration[3456-3494]:SingleVariableDeclaration[3449-3487]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3496-3954]:Block[3489-3947]"
  }, {
    "left" : "ClusterType clusterType = getClusterType(topologyDescription.getString(\"type\").getValue());",
    "right" : "ClusterType clusterType = getClusterType(topologyDescription.getString(\"type\").getValue());",
    "info" : "VariableDeclarationStatement[3506-3597]:VariableDeclarationStatement[3499-3590]"
  }, {
    "left" : "ClusterConnectionMode connectionMode = clusterType == ClusterType.STANDALONE ? ClusterConnectionMode.SINGLE\n                : ClusterConnectionMode.MULTIPLE;",
    "right" : "ClusterConnectionMode connectionMode = clusterType == ClusterType.STANDALONE ? ClusterConnectionMode.SINGLE\n                : ClusterConnectionMode.MULTIPLE;",
    "info" : "VariableDeclarationStatement[3606-3763]:VariableDeclarationStatement[3599-3756]"
  }, {
    "left" : "List<ServerDescription> servers = buildServerDescriptions(topologyDescription.getArray(\"servers\"));",
    "right" : "List<ServerDescription> servers = buildServerDescriptions(topologyDescription.getArray(\"servers\"));",
    "info" : "VariableDeclarationStatement[3772-3871]:VariableDeclarationStatement[3765-3864]"
  }, {
    "left" : "return new ClusterDescription(connectionMode, clusterType, servers);",
    "right" : "return new ClusterDescription(connectionMode, clusterType, servers);",
    "info" : "ReturnStatement[3880-3948]:ReturnStatement[3873-3941]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[3960-3967]:Modifier[3953-3960]"
  }, {
    "left" : "ClusterType",
    "right" : "ClusterType",
    "info" : "SimpleType[3968-3979]:SimpleType[3961-3972]"
  }, {
    "left" : "getClusterType",
    "right" : "getClusterType",
    "info" : "SimpleName[3980-3994]:SimpleName[3973-3987]"
  }, {
    "left" : "final String type",
    "right" : "final String type",
    "info" : "SingleVariableDeclaration[3995-4012]:SingleVariableDeclaration[3988-4005]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4014-4461]:Block[4007-4454]"
  }, {
    "left" : "if (type.equals(\"Single\"))",
    "right" : "if (type.equals(\"Single\"))",
    "info" : "IfStatement[4024-4371]:IfStatement[4017-4364]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4051-4105]:Block[4044-4098]"
  }, {
    "left" : "return ClusterType.STANDALONE;",
    "right" : "return ClusterType.STANDALONE;",
    "info" : "ReturnStatement[4065-4095]:ReturnStatement[4058-4088]"
  }, {
    "left" : "if (type.startsWith(\"ReplicaSet\"))",
    "right" : "if (type.startsWith(\"ReplicaSet\"))",
    "info" : "IfStatement[4111-4371]:IfStatement[4104-4364]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4146-4201]:Block[4139-4194]"
  }, {
    "left" : "return ClusterType.REPLICA_SET;",
    "right" : "return ClusterType.REPLICA_SET;",
    "info" : "ReturnStatement[4160-4191]:ReturnStatement[4153-4184]"
  }, {
    "left" : "if (type.equals(\"Sharded\"))",
    "right" : "if (type.equals(\"Sharded\"))",
    "info" : "IfStatement[4207-4371]:IfStatement[4200-4364]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4235-4286]:Block[4228-4279]"
  }, {
    "left" : "return ClusterType.SHARDED;",
    "right" : "return ClusterType.SHARDED;",
    "info" : "ReturnStatement[4249-4276]:ReturnStatement[4242-4269]"
  }, {
    "left" : "if (type.equals(\"Unknown\"))",
    "right" : "if (type.equals(\"Unknown\"))",
    "info" : "IfStatement[4292-4371]:IfStatement[4285-4364]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4320-4371]:Block[4313-4364]"
  }, {
    "left" : "return ClusterType.UNKNOWN;",
    "right" : "return ClusterType.UNKNOWN;",
    "info" : "ReturnStatement[4334-4361]:ReturnStatement[4327-4354]"
  }, {
    "left" : "throw new UnsupportedOperationException(\"Unknown topology type: \" + type);",
    "right" : "throw new UnsupportedOperationException(\"Unknown topology type: \" + type);",
    "info" : "ThrowStatement[4381-4455]:ThrowStatement[4374-4448]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[4467-4474]:Modifier[4460-4467]"
  }, {
    "left" : "List<ServerDescription>",
    "right" : "List<ServerDescription>",
    "info" : "ParameterizedType[4475-4498]:ParameterizedType[4468-4491]"
  }, {
    "left" : "buildServerDescriptions",
    "right" : "buildServerDescriptions",
    "info" : "SimpleName[4499-4522]:SimpleName[4492-4515]"
  }, {
    "left" : "final BsonArray serverDescriptions",
    "right" : "final BsonArray serverDescriptions",
    "info" : "SingleVariableDeclaration[4523-4557]:SingleVariableDeclaration[4516-4550]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4559-4821]:Block[4552-4814]"
  }, {
    "left" : "List<ServerDescription> descriptions = new ArrayList<ServerDescription>();",
    "right" : "List<ServerDescription> descriptions = new ArrayList<ServerDescription>();",
    "info" : "VariableDeclarationStatement[4569-4643]:VariableDeclarationStatement[4562-4636]"
  }, {
    "left" : "for (BsonValue document : serverDescriptions)",
    "right" : "for (BsonValue document : serverDescriptions)",
    "info" : "EnhancedForStatement[4652-4786]:EnhancedForStatement[4645-4779]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4698-4786]:Block[4691-4779]"
  }, {
    "left" : "descriptions.add(buildServerDescription(document.asDocument()));",
    "right" : "descriptions.add(buildServerDescription(document.asDocument()));",
    "info" : "ExpressionStatement[4712-4776]:ExpressionStatement[4705-4769]"
  }, {
    "left" : "return descriptions;",
    "right" : "return descriptions;",
    "info" : "ReturnStatement[4795-4815]:ReturnStatement[4788-4808]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[4827-4834]:Modifier[4820-4827]"
  }, {
    "left" : "ServerDescription",
    "right" : "ServerDescription",
    "info" : "SimpleType[4835-4852]:SimpleType[4828-4845]"
  }, {
    "left" : "buildServerDescription",
    "right" : "buildServerDescription",
    "info" : "SimpleName[4853-4875]:SimpleName[4846-4868]"
  }, {
    "left" : "final BsonDocument serverDescription",
    "right" : "final BsonDocument serverDescription",
    "info" : "SingleVariableDeclaration[4876-4912]:SingleVariableDeclaration[4869-4905]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4914-5482]:Block[4907-5475]"
  }, {
    "left" : "ServerDescription.Builder builder = ServerDescription.builder();",
    "right" : "ServerDescription.Builder builder = ServerDescription.builder();",
    "info" : "VariableDeclarationStatement[4924-4988]:VariableDeclarationStatement[4917-4981]"
  }, {
    "left" : "builder.address(new ServerAddress(serverDescription.getString(\"address\").getValue()));",
    "right" : "builder.address(new ServerAddress(serverDescription.getString(\"address\").getValue()));",
    "info" : "ExpressionStatement[4997-5083]:ExpressionStatement[4990-5076]"
  }, {
    "left" : "builder.type(getServerType(serverDescription.getString(\"type\").getValue()));",
    "right" : "builder.type(getServerType(serverDescription.getString(\"type\").getValue()));",
    "info" : "ExpressionStatement[5092-5168]:ExpressionStatement[5085-5161]"
  }, {
    "left" : "builder.tagSet(buildTagSet(serverDescription.getDocument(\"tags\")));",
    "right" : "builder.tagSet(buildTagSet(serverDescription.getDocument(\"tags\")));",
    "info" : "ExpressionStatement[5177-5244]:ExpressionStatement[5170-5237]"
  }, {
    "left" : "builder.roundTripTime(serverDescription.getNumber(\"avg_rtt_ms\").asInt32().getValue(), TimeUnit.MILLISECONDS);",
    "right" : "builder.roundTripTime(serverDescription.getNumber(\"avg_rtt_ms\").asInt32().getValue(), TimeUnit.MILLISECONDS);",
    "info" : "ExpressionStatement[5253-5362]:ExpressionStatement[5246-5355]"
  }, {
    "left" : "builder.state(ServerConnectionState.CONNECTED);",
    "right" : "builder.state(ServerConnectionState.CONNECTED);",
    "info" : "ExpressionStatement[5371-5418]:ExpressionStatement[5364-5411]"
  }, {
    "left" : "builder.ok(true);",
    "right" : "builder.ok(true);",
    "info" : "ExpressionStatement[5427-5444]:ExpressionStatement[5420-5437]"
  }, {
    "left" : "return builder.build();",
    "right" : "return builder.build();",
    "info" : "ReturnStatement[5453-5476]:ReturnStatement[5446-5469]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[5488-5495]:Modifier[5481-5488]"
  }, {
    "left" : "ServerType",
    "right" : "ServerType",
    "info" : "SimpleType[5496-5506]:SimpleType[5489-5499]"
  }, {
    "left" : "getServerType",
    "right" : "getServerType",
    "info" : "SimpleName[5507-5520]:SimpleName[5500-5513]"
  }, {
    "left" : "final String serverTypeString",
    "right" : "final String serverTypeString",
    "info" : "SingleVariableDeclaration[5521-5550]:SingleVariableDeclaration[5514-5543]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5552-6742]:Block[5545-6735]"
  }, {
    "left" : "ServerType serverType;",
    "right" : "ServerType serverType;",
    "info" : "VariableDeclarationStatement[5562-5584]:VariableDeclarationStatement[5555-5577]"
  }, {
    "left" : "if (serverTypeString.equals(\"RSPrimary\"))",
    "right" : "if (serverTypeString.equals(\"RSPrimary\"))",
    "info" : "IfStatement[5593-6709]:IfStatement[5586-6702]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5635-5703]:Block[5628-5696]"
  }, {
    "left" : "serverType = ServerType.REPLICA_SET_PRIMARY;",
    "right" : "serverType = ServerType.REPLICA_SET_PRIMARY;",
    "info" : "ExpressionStatement[5649-5693]:ExpressionStatement[5642-5686]"
  }, {
    "left" : "if (serverTypeString.equals(\"RSSecondary\"))",
    "right" : "if (serverTypeString.equals(\"RSSecondary\"))",
    "info" : "IfStatement[5709-6709]:IfStatement[5702-6702]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5753-5823]:Block[5746-5816]"
  }, {
    "left" : "serverType = ServerType.REPLICA_SET_SECONDARY;",
    "right" : "serverType = ServerType.REPLICA_SET_SECONDARY;",
    "info" : "ExpressionStatement[5767-5813]:ExpressionStatement[5760-5806]"
  }, {
    "left" : "if (serverTypeString.equals(\"RSArbiter\"))",
    "right" : "if (serverTypeString.equals(\"RSArbiter\"))",
    "info" : "IfStatement[5829-6709]:IfStatement[5822-6702]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5871-5939]:Block[5864-5932]"
  }, {
    "left" : "serverType = ServerType.REPLICA_SET_ARBITER;",
    "right" : "serverType = ServerType.REPLICA_SET_ARBITER;",
    "info" : "ExpressionStatement[5885-5929]:ExpressionStatement[5878-5922]"
  }, {
    "left" : "if (serverTypeString.equals(\"RSGhost\"))",
    "right" : "if (serverTypeString.equals(\"RSGhost\"))",
    "info" : "IfStatement[5945-6709]:IfStatement[5938-6702]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5985-6051]:Block[5978-6044]"
  }, {
    "left" : "serverType = ServerType.REPLICA_SET_GHOST;",
    "right" : "serverType = ServerType.REPLICA_SET_GHOST;",
    "info" : "ExpressionStatement[5999-6041]:ExpressionStatement[5992-6034]"
  }, {
    "left" : "if (serverTypeString.equals(\"RSOther\"))",
    "right" : "if (serverTypeString.equals(\"RSOther\"))",
    "info" : "IfStatement[6057-6709]:IfStatement[6050-6702]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6097-6163]:Block[6090-6156]"
  }, {
    "left" : "serverType = ServerType.REPLICA_SET_OTHER;",
    "right" : "serverType = ServerType.REPLICA_SET_OTHER;",
    "info" : "ExpressionStatement[6111-6153]:ExpressionStatement[6104-6146]"
  }, {
    "left" : "if (serverTypeString.equals(\"Mongos\"))",
    "right" : "if (serverTypeString.equals(\"Mongos\"))",
    "info" : "IfStatement[6169-6709]:IfStatement[6162-6702]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6208-6269]:Block[6201-6262]"
  }, {
    "left" : "serverType = ServerType.SHARD_ROUTER;",
    "right" : "serverType = ServerType.SHARD_ROUTER;",
    "info" : "ExpressionStatement[6222-6259]:ExpressionStatement[6215-6252]"
  }, {
    "left" : "if (serverTypeString.equals(\"Standalone\"))",
    "right" : "if (serverTypeString.equals(\"Standalone\"))",
    "info" : "IfStatement[6275-6709]:IfStatement[6268-6702]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6318-6377]:Block[6311-6370]"
  }, {
    "left" : "serverType = ServerType.STANDALONE;",
    "right" : "serverType = ServerType.STANDALONE;",
    "info" : "ExpressionStatement[6332-6367]:ExpressionStatement[6325-6360]"
  }, {
    "left" : "if (serverTypeString.equals(\"PossiblePrimary\"))",
    "right" : "if (serverTypeString.equals(\"PossiblePrimary\"))",
    "info" : "IfStatement[6383-6709]:IfStatement[6376-6702]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6431-6487]:Block[6424-6480]"
  }, {
    "left" : "serverType = ServerType.UNKNOWN;",
    "right" : "serverType = ServerType.UNKNOWN;",
    "info" : "ExpressionStatement[6445-6477]:ExpressionStatement[6438-6470]"
  }, {
    "left" : "if (serverTypeString.equals(\"Unknown\"))",
    "right" : "if (serverTypeString.equals(\"Unknown\"))",
    "info" : "IfStatement[6493-6709]:IfStatement[6486-6702]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6533-6589]:Block[6526-6582]"
  }, {
    "left" : "serverType = ServerType.UNKNOWN;",
    "right" : "serverType = ServerType.UNKNOWN;",
    "info" : "ExpressionStatement[6547-6579]:ExpressionStatement[6540-6572]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6595-6709]:Block[6588-6702]"
  }, {
    "left" : "throw new UnsupportedOperationException(\"No handler for server type \" + serverTypeString);",
    "right" : "throw new UnsupportedOperationException(\"No handler for server type \" + serverTypeString);",
    "info" : "ThrowStatement[6609-6699]:ThrowStatement[6602-6692]"
  }, {
    "left" : "return serverType;",
    "right" : "return serverType;",
    "info" : "ReturnStatement[6718-6736]:ReturnStatement[6711-6729]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[6748-6755]:Modifier[6741-6748]"
  }, {
    "left" : "List<TagSet>",
    "right" : "List<TagSet>",
    "info" : "ParameterizedType[6756-6768]:ParameterizedType[6749-6761]"
  }, {
    "left" : "buildTagSets",
    "right" : "buildTagSets",
    "info" : "SimpleName[6769-6781]:SimpleName[6762-6774]"
  }, {
    "left" : "final BsonArray tags",
    "right" : "final BsonArray tags",
    "info" : "SingleVariableDeclaration[6782-6802]:SingleVariableDeclaration[6775-6795]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6804-6994]:Block[6797-6987]"
  }, {
    "left" : "List<TagSet> tagSets = new ArrayList<TagSet>();",
    "right" : "List<TagSet> tagSets = new ArrayList<TagSet>();",
    "info" : "VariableDeclarationStatement[6814-6861]:VariableDeclarationStatement[6807-6854]"
  }, {
    "left" : "for (BsonValue tag : tags)",
    "right" : "for (BsonValue tag : tags)",
    "info" : "EnhancedForStatement[6870-6964]:EnhancedForStatement[6863-6957]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6897-6964]:Block[6890-6957]"
  }, {
    "left" : "tagSets.add(buildTagSet(tag.asDocument()));",
    "right" : "tagSets.add(buildTagSet(tag.asDocument()));",
    "info" : "ExpressionStatement[6911-6954]:ExpressionStatement[6904-6947]"
  }, {
    "left" : "return tagSets;",
    "right" : "return tagSets;",
    "info" : "ReturnStatement[6973-6988]:ReturnStatement[6966-6981]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[7001-7008]:Modifier[6994-7001]"
  }, {
    "left" : "TagSet",
    "right" : "TagSet",
    "info" : "SimpleType[7009-7015]:SimpleType[7002-7008]"
  }, {
    "left" : "buildTagSet",
    "right" : "buildTagSet",
    "info" : "SimpleName[7016-7027]:SimpleName[7009-7020]"
  }, {
    "left" : "final BsonDocument tags",
    "right" : "final BsonDocument tags",
    "info" : "SingleVariableDeclaration[7028-7051]:SingleVariableDeclaration[7021-7044]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7053-7281]:Block[7046-7274]"
  }, {
    "left" : "List<Tag> tagsSetTags = new ArrayList<Tag>();",
    "right" : "List<Tag> tagsSetTags = new ArrayList<Tag>();",
    "info" : "VariableDeclarationStatement[7063-7108]:VariableDeclarationStatement[7056-7101]"
  }, {
    "left" : "for (String key: tags.keySet())",
    "right" : "for (String key: tags.keySet())",
    "info" : "EnhancedForStatement[7117-7235]:EnhancedForStatement[7110-7228]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7149-7235]:Block[7142-7228]"
  }, {
    "left" : "tagsSetTags.add(new Tag(key, tags.getString(key).getValue()));",
    "right" : "tagsSetTags.add(new Tag(key, tags.getString(key).getValue()));",
    "info" : "ExpressionStatement[7163-7225]:ExpressionStatement[7156-7218]"
  }, {
    "left" : "return new TagSet(tagsSetTags);",
    "right" : "return new TagSet(tagsSetTags);",
    "info" : "ReturnStatement[7244-7275]:ReturnStatement[7237-7268]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[7287-7294]:Modifier[7280-7287]"
  }, {
    "left" : "ServerSelector",
    "right" : "ServerSelector",
    "info" : "SimpleType[7295-7309]:SimpleType[7288-7302]"
  }, {
    "left" : "getServerSelector",
    "right" : "getServerSelector",
    "info" : "SimpleName[7310-7327]:SimpleName[7303-7320]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7330-8086]:Block[7323-8079]"
  }, {
    "left" : "if (definition.getString(\"operation\").getValue().equals(\"write\"))",
    "right" : "if (definition.getString(\"operation\").getValue().equals(\"write\"))",
    "info" : "IfStatement[7340-8080]:IfStatement[7333-8073]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7406-7465]:Block[7399-7458]"
  }, {
    "left" : "return new PrimaryServerSelector();",
    "right" : "return new PrimaryServerSelector();",
    "info" : "ReturnStatement[7420-7455]:ReturnStatement[7413-7448]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7471-8080]:Block[7464-8073]"
  }, {
    "left" : "BsonDocument readPreferenceDefinition = definition.getDocument(\"read_preference\");",
    "right" : "BsonDocument readPreferenceDefinition = definition.getDocument(\"read_preference\");",
    "info" : "VariableDeclarationStatement[7485-7567]:VariableDeclarationStatement[7478-7560]"
  }, {
    "left" : "ReadPreference readPreference;",
    "right" : "ReadPreference readPreference;",
    "info" : "VariableDeclarationStatement[7580-7610]:VariableDeclarationStatement[7573-7603]"
  }, {
    "left" : "if (readPreferenceDefinition.getString(\"mode\").getValue().equals(\"Primary\"))",
    "right" : "if (readPreferenceDefinition.getString(\"mode\").getValue().equals(\"Primary\"))",
    "info" : "IfStatement[7623-8001]:IfStatement[7616-7994]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7700-7783]:Block[7693-7776]"
  }, {
    "left" : "readPreference = ReadPreference.valueOf(\"Primary\");",
    "right" : "readPreference = ReadPreference.valueOf(\"Primary\");",
    "info" : "ExpressionStatement[7718-7769]:ExpressionStatement[7711-7762]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7789-8001]:Block[7782-7994]"
  }, {
    "left" : "readPreference = ReadPreference.valueOf(readPreferenceDefinition.getString(\"mode\").getValue(),\n                        buildTagSets(readPreferenceDefinition.getArray(\"tag_sets\")));",
    "right" : "readPreference = ReadPreference.valueOf(readPreferenceDefinition.getString(\"mode\").getValue(),\n                        buildTagSets(readPreferenceDefinition.getArray(\"tag_sets\")));",
    "info" : "ExpressionStatement[7807-7987]:ExpressionStatement[7800-7980]"
  }, {
    "left" : "return new ReadPreferenceServerSelector(readPreference);",
    "right" : "return new ReadPreferenceServerSelector(readPreference);",
    "info" : "ReturnStatement[8014-8070]:ReturnStatement[8007-8063]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[8092-8099]:Modifier[8085-8092]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[8100-8104]:PrimitiveType[8093-8097]"
  }, {
    "left" : "assertServers",
    "right" : "assertServers",
    "info" : "SimpleName[8105-8118]:SimpleName[8098-8111]"
  }, {
    "left" : "final List<ServerDescription> actual",
    "right" : "final List<ServerDescription> actual",
    "info" : "SingleVariableDeclaration[8119-8155]:SingleVariableDeclaration[8112-8148]"
  }, {
    "left" : "final List<ServerDescription> expected",
    "right" : "final List<ServerDescription> expected",
    "info" : "SingleVariableDeclaration[8157-8195]:SingleVariableDeclaration[8150-8188]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8197-8308]:Block[8190-8301]"
  }, {
    "left" : "assertEquals(actual.size(), expected.size());",
    "right" : "assertEquals(actual.size(), expected.size());",
    "info" : "ExpressionStatement[8207-8252]:ExpressionStatement[8200-8245]"
  }, {
    "left" : "assertTrue(actual.containsAll(expected));",
    "right" : "assertTrue(actual.containsAll(expected));",
    "info" : "ExpressionStatement[8261-8302]:ExpressionStatement[8254-8295]"
  } ]
}