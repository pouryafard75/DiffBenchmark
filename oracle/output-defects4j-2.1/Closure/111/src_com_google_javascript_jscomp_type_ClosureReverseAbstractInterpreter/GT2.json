{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "ClosureReverseAbstractInterpreter",
      "right" : "ClosureReverseAbstractInterpreter",
      "info" : "TypeDeclaration[1665-8963]:TypeDeclaration[1665-9027]"
    }, {
      "left" : "private final Visitor<JSType> restrictToArrayVisitor =\n      new RestrictByTrueTypeOfResultVisitor() {\n        @Override\n        protected JSType caseTopType(JSType topType) {\n          return topType;\n        }\n\n        @Override\n        public JSType caseObjectType(ObjectType type) {\n          JSType arrayType = getNativeType(ARRAY_TYPE);\n          return arrayType.isSubtype(type) ? arrayType : null;\n        }\n      };",
      "right" : "private final Visitor<JSType> restrictToArrayVisitor =\n      new RestrictByTrueTypeOfResultVisitor() {\n        @Override\n        protected JSType caseTopType(JSType topType) {\n          return topType.isAllType() ?\n              getNativeType(ARRAY_TYPE) : topType;\n        }\n\n        @Override\n        public JSType caseObjectType(ObjectType type) {\n          JSType arrayType = getNativeType(ARRAY_TYPE);\n          return arrayType.isSubtype(type) ? arrayType : null;\n        }\n      };",
      "info" : "FieldDeclaration[1877-2362]:FieldDeclaration[1877-2426]"
    }, {
      "left" : "protected JSType caseTopType(JSType topType)",
      "right" : "protected JSType caseTopType(JSType topType)",
      "info" : "MethodDeclaration[2049-2149]:MethodDeclaration[2049-2213]"
    }, {
      "left" : "public JSType caseObjectType(ObjectType type)",
      "right" : "public JSType caseObjectType(ObjectType type)",
      "info" : "MethodDeclaration[2159-2353]:MethodDeclaration[2223-2417]"
    }, {
      "left" : "private final Visitor<JSType> restrictToNotArrayVisitor =\n      new RestrictByFalseTypeOfResultVisitor() {\n        @Override\n        public JSType caseObjectType(ObjectType type) {\n          return type.isSubtype(getNativeType(ARRAY_TYPE)) ? null : type;\n        }\n      };",
      "right" : "private final Visitor<JSType> restrictToNotArrayVisitor =\n      new RestrictByFalseTypeOfResultVisitor() {\n        @Override\n        public JSType caseObjectType(ObjectType type) {\n          return type.isSubtype(getNativeType(ARRAY_TYPE)) ? null : type;\n        }\n      };",
      "info" : "FieldDeclaration[2366-2701]:FieldDeclaration[2430-2765]"
    }, {
      "left" : "public JSType caseObjectType(ObjectType type)",
      "right" : "public JSType caseObjectType(ObjectType type)",
      "info" : "MethodDeclaration[2543-2692]:MethodDeclaration[2607-2756]"
    }, {
      "left" : "private final Visitor<JSType> restrictToObjectVisitor =\n      new RestrictByTrueTypeOfResultVisitor() {\n        @Override\n        protected JSType caseTopType(JSType topType) {\n          return getNativeType(NO_OBJECT_TYPE);\n        }\n\n        @Override\n        public JSType caseObjectType(ObjectType type) {\n          return type;\n        }\n\n        @Override\n        public JSType caseFunctionType(FunctionType type) {\n          return type;\n        }\n      };",
      "right" : "private final Visitor<JSType> restrictToObjectVisitor =\n      new RestrictByTrueTypeOfResultVisitor() {\n        @Override\n        protected JSType caseTopType(JSType topType) {\n          return getNativeType(NO_OBJECT_TYPE);\n        }\n\n        @Override\n        public JSType caseObjectType(ObjectType type) {\n          return type;\n        }\n\n        @Override\n        public JSType caseFunctionType(FunctionType type) {\n          return type;\n        }\n      };",
      "info" : "FieldDeclaration[2705-3282]:FieldDeclaration[2769-3346]"
    }, {
      "left" : "protected JSType caseTopType(JSType topType)",
      "right" : "protected JSType caseTopType(JSType topType)",
      "info" : "MethodDeclaration[2931-3053]:MethodDeclaration[2995-3117]"
    }, {
      "left" : "public JSType caseObjectType(ObjectType type)",
      "right" : "public JSType caseObjectType(ObjectType type)",
      "info" : "MethodDeclaration[3063-3161]:MethodDeclaration[3127-3225]"
    }, {
      "left" : "public JSType caseFunctionType(FunctionType type)",
      "right" : "public JSType caseFunctionType(FunctionType type)",
      "info" : "MethodDeclaration[3171-3273]:MethodDeclaration[3235-3337]"
    }, {
      "left" : "private final Visitor<JSType> restrictToNotObjectVisitor =\n      new RestrictByFalseTypeOfResultVisitor() {\n\n        @Override\n        public JSType caseAllType() {\n          return typeRegistry.createUnionType(\n              getNativeType(NUMBER_STRING_BOOLEAN), getNativeType(NULL_VOID));\n        }\n\n        @Override\n        public JSType caseObjectType(ObjectType type) {\n          return null;\n        }\n\n        @Override\n        public JSType caseFunctionType(FunctionType type) {\n          return null;\n        }\n      };",
      "right" : "private final Visitor<JSType> restrictToNotObjectVisitor =\n      new RestrictByFalseTypeOfResultVisitor() {\n\n        @Override\n        public JSType caseAllType() {\n          return typeRegistry.createUnionType(\n              getNativeType(NUMBER_STRING_BOOLEAN), getNativeType(NULL_VOID));\n        }\n\n        @Override\n        public JSType caseObjectType(ObjectType type) {\n          return null;\n        }\n\n        @Override\n        public JSType caseFunctionType(FunctionType type) {\n          return null;\n        }\n      };",
      "info" : "FieldDeclaration[3286-3878]:FieldDeclaration[3350-3942]"
    }, {
      "left" : "public JSType caseAllType()",
      "right" : "public JSType caseAllType()",
      "info" : "MethodDeclaration[3466-3649]:MethodDeclaration[3530-3713]"
    }, {
      "left" : "public JSType caseObjectType(ObjectType type)",
      "right" : "public JSType caseObjectType(ObjectType type)",
      "info" : "MethodDeclaration[3659-3757]:MethodDeclaration[3723-3821]"
    }, {
      "left" : "public JSType caseFunctionType(FunctionType type)",
      "right" : "public JSType caseFunctionType(FunctionType type)",
      "info" : "MethodDeclaration[3767-3869]:MethodDeclaration[3831-3933]"
    }, {
      "left" : "private Map<String, Function<TypeRestriction, JSType>> restricters;",
      "right" : "private Map<String, Function<TypeRestriction, JSType>> restricters;",
      "info" : "FieldDeclaration[3882-3992]:FieldDeclaration[3946-4056]"
    }, {
      "left" : "public ClosureReverseAbstractInterpreter(CodingConvention convention,\n      final JSTypeRegistry typeRegistry)",
      "right" : "public ClosureReverseAbstractInterpreter(CodingConvention convention,\n      final JSTypeRegistry typeRegistry)",
      "info" : "MethodDeclaration[3996-7255]:MethodDeclaration[4060-7319]"
    }, {
      "left" : "public JSType apply(TypeRestriction p)",
      "right" : "public JSType apply(TypeRestriction p)",
      "info" : "MethodDeclaration[4385-4683]:MethodDeclaration[4449-4747]"
    }, {
      "left" : "public JSType apply(TypeRestriction p)",
      "right" : "public JSType apply(TypeRestriction p)",
      "info" : "MethodDeclaration[4764-5055]:MethodDeclaration[4828-5119]"
    }, {
      "left" : "public JSType apply(TypeRestriction p)",
      "right" : "public JSType apply(TypeRestriction p)",
      "info" : "MethodDeclaration[5145-5484]:MethodDeclaration[5209-5548]"
    }, {
      "left" : "public JSType apply(TypeRestriction p)",
      "right" : "public JSType apply(TypeRestriction p)",
      "info" : "MethodDeclaration[5567-5710]:MethodDeclaration[5631-5774]"
    }, {
      "left" : "public JSType apply(TypeRestriction p)",
      "right" : "public JSType apply(TypeRestriction p)",
      "info" : "MethodDeclaration[5794-5938]:MethodDeclaration[5858-6002]"
    }, {
      "left" : "public JSType apply(TypeRestriction p)",
      "right" : "public JSType apply(TypeRestriction p)",
      "info" : "MethodDeclaration[6021-6164]:MethodDeclaration[6085-6228]"
    }, {
      "left" : "public JSType apply(TypeRestriction p)",
      "right" : "public JSType apply(TypeRestriction p)",
      "info" : "MethodDeclaration[6249-6394]:MethodDeclaration[6313-6458]"
    }, {
      "left" : "public JSType apply(TypeRestriction p)",
      "right" : "public JSType apply(TypeRestriction p)",
      "info" : "MethodDeclaration[6476-6808]:MethodDeclaration[6540-6872]"
    }, {
      "left" : "public JSType apply(TypeRestriction p)",
      "right" : "public JSType apply(TypeRestriction p)",
      "info" : "MethodDeclaration[6891-7226]:MethodDeclaration[6955-7290]"
    }, {
      "left" : "public FlowScope getPreciserScopeKnowingConditionOutcome(Node condition,\n      FlowScope blindScope, boolean outcome)",
      "right" : "public FlowScope getPreciserScopeKnowingConditionOutcome(Node condition,\n      FlowScope blindScope, boolean outcome)",
      "info" : "MethodDeclaration[7259-8238]:MethodDeclaration[7323-8302]"
    }, {
      "left" : "private FlowScope restrictParameter(Node parameter, JSType type,\n      FlowScope blindScope, Function<TypeRestriction, JSType> restriction,\n      boolean outcome)",
      "right" : "private FlowScope restrictParameter(Node parameter, JSType type,\n      FlowScope blindScope, Function<TypeRestriction, JSType> restriction,\n      boolean outcome)",
      "info" : "MethodDeclaration[8242-8728]:MethodDeclaration[8306-8792]"
    }, {
      "left" : "TypeRestriction",
      "right" : "TypeRestriction",
      "info" : "TypeDeclaration[8732-8961]:TypeDeclaration[8796-9025]"
    }, {
      "left" : "private final JSType type;",
      "right" : "private final JSType type;",
      "info" : "FieldDeclaration[8775-8801]:FieldDeclaration[8839-8865]"
    }, {
      "left" : "private final boolean outcome;",
      "right" : "private final boolean outcome;",
      "info" : "FieldDeclaration[8806-8836]:FieldDeclaration[8870-8900]"
    }, {
      "left" : "private TypeRestriction(JSType type, boolean outcome)",
      "right" : "private TypeRestriction(JSType type, boolean outcome)",
      "info" : "MethodDeclaration[8842-8957]:MethodDeclaration[8906-9021]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2112-2149]:Block[2112-2213]"
    }, {
      "left" : "return topType;",
      "right" : "return topType.isAllType() ?\n              getNativeType(ARRAY_TYPE) : topType;",
      "info" : "ReturnStatement[2124-2139]:ReturnStatement[2124-2203]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2223-2353]:Block[2287-2417]"
    }, {
      "left" : "JSType arrayType = getNativeType(ARRAY_TYPE);",
      "right" : "JSType arrayType = getNativeType(ARRAY_TYPE);",
      "info" : "VariableDeclarationStatement[2235-2280]:VariableDeclarationStatement[2299-2344]"
    }, {
      "left" : "return arrayType.isSubtype(type) ? arrayType : null;",
      "right" : "return arrayType.isSubtype(type) ? arrayType : null;",
      "info" : "ReturnStatement[2291-2343]:ReturnStatement[2355-2407]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2607-2692]:Block[2671-2756]"
    }, {
      "left" : "return type.isSubtype(getNativeType(ARRAY_TYPE)) ? null : type;",
      "right" : "return type.isSubtype(getNativeType(ARRAY_TYPE)) ? null : type;",
      "info" : "ReturnStatement[2619-2682]:ReturnStatement[2683-2746]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2994-3053]:Block[3058-3117]"
    }, {
      "left" : "return getNativeType(NO_OBJECT_TYPE);",
      "right" : "return getNativeType(NO_OBJECT_TYPE);",
      "info" : "ReturnStatement[3006-3043]:ReturnStatement[3070-3107]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3127-3161]:Block[3191-3225]"
    }, {
      "left" : "return type;",
      "right" : "return type;",
      "info" : "ReturnStatement[3139-3151]:ReturnStatement[3203-3215]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3239-3273]:Block[3303-3337]"
    }, {
      "left" : "return type;",
      "right" : "return type;",
      "info" : "ReturnStatement[3251-3263]:ReturnStatement[3315-3327]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3512-3649]:Block[3576-3713]"
    }, {
      "left" : "return typeRegistry.createUnionType(\n              getNativeType(NUMBER_STRING_BOOLEAN), getNativeType(NULL_VOID));",
      "right" : "return typeRegistry.createUnionType(\n              getNativeType(NUMBER_STRING_BOOLEAN), getNativeType(NULL_VOID));",
      "info" : "ReturnStatement[3524-3639]:ReturnStatement[3588-3703]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3723-3757]:Block[3787-3821]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[3735-3747]:ReturnStatement[3799-3811]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3835-3869]:Block[3899-3933]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[3847-3859]:ReturnStatement[3911-3923]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4177-7255]:Block[4241-7319]"
    }, {
      "left" : "super(convention, typeRegistry);",
      "right" : "super(convention, typeRegistry);",
      "info" : "SuperConstructorInvocation[4183-4215]:SuperConstructorInvocation[4247-4279]"
    }, {
      "left" : "this.restricters =\n      new ImmutableMap.Builder<String, Function<TypeRestriction, JSType>>()\n      .put(\"isDef\", new Function<TypeRestriction, JSType>() {\n        @Override\n        public JSType apply(TypeRestriction p) {\n          if (p.outcome) {\n            return getRestrictedWithoutUndefined(p.type);\n          } else {\n            return  p.type != null ?\n                getNativeType(VOID_TYPE).getGreatestSubtype(p.type) : null;\n          }\n         }\n      })\n      .put(\"isNull\", new Function<TypeRestriction, JSType>() {\n        @Override\n        public JSType apply(TypeRestriction p) {\n          if (p.outcome) {\n            return p.type != null ?\n                getNativeType(NULL_TYPE).getGreatestSubtype(p.type) : null;\n          } else {\n            return getRestrictedWithoutNull(p.type);\n          }\n        }\n      })\n      .put(\"isDefAndNotNull\", new Function<TypeRestriction, JSType>() {\n        @Override\n        public JSType apply(TypeRestriction p) {\n          if (p.outcome) {\n            return getRestrictedWithoutUndefined(\n                getRestrictedWithoutNull(p.type));\n          } else {\n            return p.type != null ?\n                getNativeType(NULL_VOID).getGreatestSubtype(p.type) : null;\n          }\n        }\n      })\n      .put(\"isString\", new Function<TypeRestriction, JSType>() {\n        @Override\n        public JSType apply(TypeRestriction p) {\n          return getRestrictedByTypeOfResult(p.type, \"string\", p.outcome);\n        }\n      })\n      .put(\"isBoolean\", new Function<TypeRestriction, JSType>() {\n        @Override\n        public JSType apply(TypeRestriction p) {\n          return getRestrictedByTypeOfResult(p.type, \"boolean\", p.outcome);\n        }\n      })\n      .put(\"isNumber\", new Function<TypeRestriction, JSType>() {\n        @Override\n        public JSType apply(TypeRestriction p) {\n          return getRestrictedByTypeOfResult(p.type, \"number\", p.outcome);\n        }\n      })\n      .put(\"isFunction\", new Function<TypeRestriction, JSType>() {\n        @Override\n        public JSType apply(TypeRestriction p) {\n          return getRestrictedByTypeOfResult(p.type, \"function\", p.outcome);\n        }\n      })\n      .put(\"isArray\", new Function<TypeRestriction, JSType>() {\n        @Override\n        public JSType apply(TypeRestriction p) {\n          if (p.type == null) {\n            return p.outcome ? getNativeType(ARRAY_TYPE) : null;\n          }\n\n          Visitor<JSType> visitor = p.outcome ? restrictToArrayVisitor :\n              restrictToNotArrayVisitor;\n          return p.type.visit(visitor);\n        }\n      })\n      .put(\"isObject\", new Function<TypeRestriction, JSType>() {\n        @Override\n        public JSType apply(TypeRestriction p) {\n          if (p.type == null) {\n            return p.outcome ? getNativeType(OBJECT_TYPE) : null;\n          }\n\n          Visitor<JSType> visitor = p.outcome ? restrictToObjectVisitor :\n              restrictToNotObjectVisitor;\n          return p.type.visit(visitor);\n        }\n      })\n      .build();",
      "right" : "this.restricters =\n      new ImmutableMap.Builder<String, Function<TypeRestriction, JSType>>()\n      .put(\"isDef\", new Function<TypeRestriction, JSType>() {\n        @Override\n        public JSType apply(TypeRestriction p) {\n          if (p.outcome) {\n            return getRestrictedWithoutUndefined(p.type);\n          } else {\n            return  p.type != null ?\n                getNativeType(VOID_TYPE).getGreatestSubtype(p.type) : null;\n          }\n         }\n      })\n      .put(\"isNull\", new Function<TypeRestriction, JSType>() {\n        @Override\n        public JSType apply(TypeRestriction p) {\n          if (p.outcome) {\n            return p.type != null ?\n                getNativeType(NULL_TYPE).getGreatestSubtype(p.type) : null;\n          } else {\n            return getRestrictedWithoutNull(p.type);\n          }\n        }\n      })\n      .put(\"isDefAndNotNull\", new Function<TypeRestriction, JSType>() {\n        @Override\n        public JSType apply(TypeRestriction p) {\n          if (p.outcome) {\n            return getRestrictedWithoutUndefined(\n                getRestrictedWithoutNull(p.type));\n          } else {\n            return p.type != null ?\n                getNativeType(NULL_VOID).getGreatestSubtype(p.type) : null;\n          }\n        }\n      })\n      .put(\"isString\", new Function<TypeRestriction, JSType>() {\n        @Override\n        public JSType apply(TypeRestriction p) {\n          return getRestrictedByTypeOfResult(p.type, \"string\", p.outcome);\n        }\n      })\n      .put(\"isBoolean\", new Function<TypeRestriction, JSType>() {\n        @Override\n        public JSType apply(TypeRestriction p) {\n          return getRestrictedByTypeOfResult(p.type, \"boolean\", p.outcome);\n        }\n      })\n      .put(\"isNumber\", new Function<TypeRestriction, JSType>() {\n        @Override\n        public JSType apply(TypeRestriction p) {\n          return getRestrictedByTypeOfResult(p.type, \"number\", p.outcome);\n        }\n      })\n      .put(\"isFunction\", new Function<TypeRestriction, JSType>() {\n        @Override\n        public JSType apply(TypeRestriction p) {\n          return getRestrictedByTypeOfResult(p.type, \"function\", p.outcome);\n        }\n      })\n      .put(\"isArray\", new Function<TypeRestriction, JSType>() {\n        @Override\n        public JSType apply(TypeRestriction p) {\n          if (p.type == null) {\n            return p.outcome ? getNativeType(ARRAY_TYPE) : null;\n          }\n\n          Visitor<JSType> visitor = p.outcome ? restrictToArrayVisitor :\n              restrictToNotArrayVisitor;\n          return p.type.visit(visitor);\n        }\n      })\n      .put(\"isObject\", new Function<TypeRestriction, JSType>() {\n        @Override\n        public JSType apply(TypeRestriction p) {\n          if (p.type == null) {\n            return p.outcome ? getNativeType(OBJECT_TYPE) : null;\n          }\n\n          Visitor<JSType> visitor = p.outcome ? restrictToObjectVisitor :\n              restrictToNotObjectVisitor;\n          return p.type.visit(visitor);\n        }\n      })\n      .build();",
      "info" : "ExpressionStatement[4220-7251]:ExpressionStatement[4284-7315]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4442-4683]:Block[4506-4747]"
    }, {
      "left" : "if (p.outcome)",
      "right" : "if (p.outcome)",
      "info" : "IfStatement[4454-4672]:IfStatement[4518-4736]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4469-4540]:Block[4533-4604]"
    }, {
      "left" : "return getRestrictedWithoutUndefined(p.type);",
      "right" : "return getRestrictedWithoutUndefined(p.type);",
      "info" : "ReturnStatement[4483-4528]:ReturnStatement[4547-4592]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4546-4672]:Block[4610-4736]"
    }, {
      "left" : "return  p.type != null ?\n                getNativeType(VOID_TYPE).getGreatestSubtype(p.type) : null;",
      "right" : "return  p.type != null ?\n                getNativeType(VOID_TYPE).getGreatestSubtype(p.type) : null;",
      "info" : "ReturnStatement[4560-4660]:ReturnStatement[4624-4724]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4821-5055]:Block[4885-5119]"
    }, {
      "left" : "if (p.outcome)",
      "right" : "if (p.outcome)",
      "info" : "IfStatement[4833-5045]:IfStatement[4897-5109]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4848-4973]:Block[4912-5037]"
    }, {
      "left" : "return p.type != null ?\n                getNativeType(NULL_TYPE).getGreatestSubtype(p.type) : null;",
      "right" : "return p.type != null ?\n                getNativeType(NULL_TYPE).getGreatestSubtype(p.type) : null;",
      "info" : "ReturnStatement[4862-4961]:ReturnStatement[4926-5025]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4979-5045]:Block[5043-5109]"
    }, {
      "left" : "return getRestrictedWithoutNull(p.type);",
      "right" : "return getRestrictedWithoutNull(p.type);",
      "info" : "ReturnStatement[4993-5033]:ReturnStatement[5057-5097]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5202-5484]:Block[5266-5548]"
    }, {
      "left" : "if (p.outcome)",
      "right" : "if (p.outcome)",
      "info" : "IfStatement[5214-5474]:IfStatement[5278-5538]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5229-5343]:Block[5293-5407]"
    }, {
      "left" : "return getRestrictedWithoutUndefined(\n                getRestrictedWithoutNull(p.type));",
      "right" : "return getRestrictedWithoutUndefined(\n                getRestrictedWithoutNull(p.type));",
      "info" : "ReturnStatement[5243-5331]:ReturnStatement[5307-5395]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5349-5474]:Block[5413-5538]"
    }, {
      "left" : "return p.type != null ?\n                getNativeType(NULL_VOID).getGreatestSubtype(p.type) : null;",
      "right" : "return p.type != null ?\n                getNativeType(NULL_VOID).getGreatestSubtype(p.type) : null;",
      "info" : "ReturnStatement[5363-5462]:ReturnStatement[5427-5526]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5624-5710]:Block[5688-5774]"
    }, {
      "left" : "return getRestrictedByTypeOfResult(p.type, \"string\", p.outcome);",
      "right" : "return getRestrictedByTypeOfResult(p.type, \"string\", p.outcome);",
      "info" : "ReturnStatement[5636-5700]:ReturnStatement[5700-5764]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5851-5938]:Block[5915-6002]"
    }, {
      "left" : "return getRestrictedByTypeOfResult(p.type, \"boolean\", p.outcome);",
      "right" : "return getRestrictedByTypeOfResult(p.type, \"boolean\", p.outcome);",
      "info" : "ReturnStatement[5863-5928]:ReturnStatement[5927-5992]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6078-6164]:Block[6142-6228]"
    }, {
      "left" : "return getRestrictedByTypeOfResult(p.type, \"number\", p.outcome);",
      "right" : "return getRestrictedByTypeOfResult(p.type, \"number\", p.outcome);",
      "info" : "ReturnStatement[6090-6154]:ReturnStatement[6154-6218]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6306-6394]:Block[6370-6458]"
    }, {
      "left" : "return getRestrictedByTypeOfResult(p.type, \"function\", p.outcome);",
      "right" : "return getRestrictedByTypeOfResult(p.type, \"function\", p.outcome);",
      "info" : "ReturnStatement[6318-6384]:ReturnStatement[6382-6448]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6533-6808]:Block[6597-6872]"
    }, {
      "left" : "if (p.type == null)",
      "right" : "if (p.type == null)",
      "info" : "IfStatement[6545-6643]:IfStatement[6609-6707]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6565-6643]:Block[6629-6707]"
    }, {
      "left" : "return p.outcome ? getNativeType(ARRAY_TYPE) : null;",
      "right" : "return p.outcome ? getNativeType(ARRAY_TYPE) : null;",
      "info" : "ReturnStatement[6579-6631]:ReturnStatement[6643-6695]"
    }, {
      "left" : "Visitor<JSType> visitor = p.outcome ? restrictToArrayVisitor :\n              restrictToNotArrayVisitor;",
      "right" : "Visitor<JSType> visitor = p.outcome ? restrictToArrayVisitor :\n              restrictToNotArrayVisitor;",
      "info" : "VariableDeclarationStatement[6655-6758]:VariableDeclarationStatement[6719-6822]"
    }, {
      "left" : "return p.type.visit(visitor);",
      "right" : "return p.type.visit(visitor);",
      "info" : "ReturnStatement[6769-6798]:ReturnStatement[6833-6862]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6948-7226]:Block[7012-7290]"
    }, {
      "left" : "if (p.type == null)",
      "right" : "if (p.type == null)",
      "info" : "IfStatement[6960-7059]:IfStatement[7024-7123]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6980-7059]:Block[7044-7123]"
    }, {
      "left" : "return p.outcome ? getNativeType(OBJECT_TYPE) : null;",
      "right" : "return p.outcome ? getNativeType(OBJECT_TYPE) : null;",
      "info" : "ReturnStatement[6994-7047]:ReturnStatement[7058-7111]"
    }, {
      "left" : "Visitor<JSType> visitor = p.outcome ? restrictToObjectVisitor :\n              restrictToNotObjectVisitor;",
      "right" : "Visitor<JSType> visitor = p.outcome ? restrictToObjectVisitor :\n              restrictToNotObjectVisitor;",
      "info" : "VariableDeclarationStatement[7071-7176]:VariableDeclarationStatement[7135-7240]"
    }, {
      "left" : "return p.type.visit(visitor);",
      "right" : "return p.type.visit(visitor);",
      "info" : "ReturnStatement[7187-7216]:ReturnStatement[7251-7280]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7389-8238]:Block[7453-8302]"
    }, {
      "left" : "if (condition.isCall() && condition.getChildCount() == 2)",
      "right" : "if (condition.isCall() && condition.getChildCount() == 2)",
      "info" : "IfStatement[7395-8140]:IfStatement[7459-8204]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7453-8140]:Block[7517-8204]"
    }, {
      "left" : "Node callee = condition.getFirstChild();",
      "right" : "Node callee = condition.getFirstChild();",
      "info" : "VariableDeclarationStatement[7461-7501]:VariableDeclarationStatement[7525-7565]"
    }, {
      "left" : "Node param = condition.getLastChild();",
      "right" : "Node param = condition.getLastChild();",
      "info" : "VariableDeclarationStatement[7508-7546]:VariableDeclarationStatement[7572-7610]"
    }, {
      "left" : "if (callee.isGetProp() && param.isQualifiedName())",
      "right" : "if (callee.isGetProp() && param.isQualifiedName())",
      "info" : "IfStatement[7553-8134]:IfStatement[7617-8198]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7604-8134]:Block[7668-8198]"
    }, {
      "left" : "JSType paramType =  getTypeIfRefinable(param, blindScope);",
      "right" : "JSType paramType =  getTypeIfRefinable(param, blindScope);",
      "info" : "VariableDeclarationStatement[7614-7672]:VariableDeclarationStatement[7678-7736]"
    }, {
      "left" : "Node left = callee.getFirstChild();",
      "right" : "Node left = callee.getFirstChild();",
      "info" : "VariableDeclarationStatement[7681-7716]:VariableDeclarationStatement[7745-7780]"
    }, {
      "left" : "Node right = callee.getLastChild();",
      "right" : "Node right = callee.getLastChild();",
      "info" : "VariableDeclarationStatement[7725-7760]:VariableDeclarationStatement[7789-7824]"
    }, {
      "left" : "if (left.isName() && \"goog\".equals(left.getString()) &&\n            right.isString())",
      "right" : "if (left.isName() && \"goog\".equals(left.getString()) &&\n            right.isString())",
      "info" : "IfStatement[7769-8126]:IfStatement[7833-8190]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7855-8126]:Block[7919-8190]"
    }, {
      "left" : "Function<TypeRestriction, JSType> restricter =\n              restricters.get(right.getString());",
      "right" : "Function<TypeRestriction, JSType> restricter =\n              restricters.get(right.getString());",
      "info" : "VariableDeclarationStatement[7867-7963]:VariableDeclarationStatement[7931-8027]"
    }, {
      "left" : "if (restricter != null)",
      "right" : "if (restricter != null)",
      "info" : "IfStatement[7974-8116]:IfStatement[8038-8180]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7998-8116]:Block[8062-8180]"
    }, {
      "left" : "return restrictParameter(param, paramType, blindScope, restricter,\n                outcome);",
      "right" : "return restrictParameter(param, paramType, blindScope, restricter,\n                outcome);",
      "info" : "ReturnStatement[8012-8104]:ReturnStatement[8076-8168]"
    }, {
      "left" : "return nextPreciserScopeKnowingConditionOutcome(\n        condition, blindScope, outcome);",
      "right" : "return nextPreciserScopeKnowingConditionOutcome(\n        condition, blindScope, outcome);",
      "info" : "ReturnStatement[8145-8234]:ReturnStatement[8209-8298]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8405-8728]:Block[8469-8792]"
    }, {
      "left" : "type = restriction.apply(new TypeRestriction(type, outcome));",
      "right" : "type = restriction.apply(new TypeRestriction(type, outcome));",
      "info" : "ExpressionStatement[8430-8491]:ExpressionStatement[8494-8555]"
    }, {
      "left" : "if (type != null)",
      "right" : "if (type != null)",
      "info" : "IfStatement[8523-8724]:IfStatement[8587-8788]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8541-8686]:Block[8605-8750]"
    }, {
      "left" : "FlowScope informed = blindScope.createChildFlowScope();",
      "right" : "FlowScope informed = blindScope.createChildFlowScope();",
      "info" : "VariableDeclarationStatement[8549-8604]:VariableDeclarationStatement[8613-8668]"
    }, {
      "left" : "declareNameInScope(informed, parameter, type);",
      "right" : "declareNameInScope(informed, parameter, type);",
      "info" : "ExpressionStatement[8611-8657]:ExpressionStatement[8675-8721]"
    }, {
      "left" : "return informed;",
      "right" : "return informed;",
      "info" : "ReturnStatement[8664-8680]:ReturnStatement[8728-8744]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8692-8724]:Block[8756-8788]"
    }, {
      "left" : "return blindScope;",
      "right" : "return blindScope;",
      "info" : "ReturnStatement[8700-8718]:ReturnStatement[8764-8782]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8896-8957]:Block[8960-9021]"
    }, {
      "left" : "this.type = type;",
      "right" : "this.type = type;",
      "info" : "ExpressionStatement[8904-8921]:ExpressionStatement[8968-8985]"
    }, {
      "left" : "this.outcome = outcome;",
      "right" : "this.outcome = outcome;",
      "info" : "ExpressionStatement[8928-8951]:ExpressionStatement[8992-9015]"
    } ]
  },
  "interFileMappings" : { }
}