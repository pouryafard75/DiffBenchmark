{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "static final char EOF = (char) -1;",
      "right" : "static final char EOF = (char) -1;",
      "info" : "FieldDeclaration[175-209]:FieldDeclaration[175-209]"
    }, {
      "left" : "private final String input;",
      "right" : "private final String input;",
      "info" : "FieldDeclaration[215-242]:FieldDeclaration[215-242]"
    }, {
      "left" : "private final int length;",
      "right" : "private final int length;",
      "info" : "FieldDeclaration[247-272]:FieldDeclaration[247-272]"
    }, {
      "left" : "private int pos = 0;",
      "right" : "private int pos = 0;",
      "info" : "FieldDeclaration[277-297]:FieldDeclaration[277-297]"
    }, {
      "left" : "private int mark = 0;",
      "right" : "private int mark = 0;",
      "info" : "FieldDeclaration[302-323]:FieldDeclaration[302-323]"
    }, {
      "left" : "int pos()",
      "right" : "int pos()",
      "info" : "MethodDeclaration[472-509]:MethodDeclaration[563-600]"
    }, {
      "left" : "boolean isEmpty()",
      "right" : "boolean isEmpty()",
      "info" : "MethodDeclaration[515-570]:MethodDeclaration[606-661]"
    }, {
      "left" : "char current()",
      "right" : "char current()",
      "info" : "MethodDeclaration[576-650]:MethodDeclaration[667-741]"
    }, {
      "left" : "char consume()",
      "right" : "char consume()",
      "info" : "MethodDeclaration[656-769]:MethodDeclaration[747-860]"
    }, {
      "left" : "void unconsume()",
      "right" : "void unconsume()",
      "info" : "MethodDeclaration[775-814]:MethodDeclaration[866-905]"
    }, {
      "left" : "void advance()",
      "right" : "void advance()",
      "info" : "MethodDeclaration[820-857]:MethodDeclaration[911-948]"
    }, {
      "left" : "void mark()",
      "right" : "void mark()",
      "info" : "MethodDeclaration[863-902]:MethodDeclaration[954-993]"
    }, {
      "left" : "void rewindToMark()",
      "right" : "void rewindToMark()",
      "info" : "MethodDeclaration[908-955]:MethodDeclaration[999-1046]"
    }, {
      "left" : "String consumeAsString()",
      "right" : "String consumeAsString()",
      "info" : "MethodDeclaration[961-1037]:MethodDeclaration[1052-1128]"
    }, {
      "left" : "String consumeTo(char c)",
      "right" : "String consumeTo(char c)",
      "info" : "MethodDeclaration[1043-1336]:MethodDeclaration[1134-1427]"
    }, {
      "left" : "String consumeTo(String seq)",
      "right" : "String consumeTo(String seq)",
      "info" : "MethodDeclaration[1342-1641]:MethodDeclaration[1433-1732]"
    }, {
      "left" : "String consumeToAny(char... seq)",
      "right" : "String consumeToAny(char... seq)",
      "info" : "MethodDeclaration[1647-1996]:MethodDeclaration[1738-2087]"
    }, {
      "left" : "String consumeLetterSequence()",
      "right" : "String consumeLetterSequence()",
      "info" : "MethodDeclaration[2152-2468]:MethodDeclaration[2239-2555]"
    }, {
      "left" : "String consumeHexSequence()",
      "right" : "String consumeHexSequence()",
      "info" : "MethodDeclaration[2474-2812]:MethodDeclaration[2561-2899]"
    }, {
      "left" : "String consumeDigitSequence()",
      "right" : "String consumeDigitSequence()",
      "info" : "MethodDeclaration[2818-3104]:MethodDeclaration[2905-3191]"
    }, {
      "left" : "boolean matches(char c)",
      "right" : "boolean matches(char c)",
      "info" : "MethodDeclaration[3110-3195]:MethodDeclaration[3197-3282]"
    }, {
      "left" : "boolean matches(String seq)",
      "right" : "boolean matches(String seq)",
      "info" : "MethodDeclaration[3201-3279]:MethodDeclaration[3288-3366]"
    }, {
      "left" : "boolean matchesIgnoreCase(String seq)",
      "right" : "boolean matchesIgnoreCase(String seq)",
      "info" : "MethodDeclaration[3285-3399]:MethodDeclaration[3372-3486]"
    }, {
      "left" : "boolean matchesAny(char... seq)",
      "right" : "boolean matchesAny(char... seq)",
      "info" : "MethodDeclaration[3405-3650]:MethodDeclaration[3492-3737]"
    }, {
      "left" : "boolean matchesLetter()",
      "right" : "boolean matchesLetter()",
      "info" : "MethodDeclaration[3656-3837]:MethodDeclaration[3743-3924]"
    }, {
      "left" : "boolean matchesDigit()",
      "right" : "boolean matchesDigit()",
      "info" : "MethodDeclaration[3843-3997]:MethodDeclaration[3930-4084]"
    }, {
      "left" : "boolean matchConsume(String seq)",
      "right" : "boolean matchConsume(String seq)",
      "info" : "MethodDeclaration[4003-4182]:MethodDeclaration[4090-4269]"
    }, {
      "left" : "boolean matchConsumeIgnoreCase(String seq)",
      "right" : "boolean matchConsumeIgnoreCase(String seq)",
      "info" : "MethodDeclaration[4188-4387]:MethodDeclaration[4275-4474]"
    }, {
      "left" : "boolean containsIgnoreCase(String seq)",
      "right" : "boolean containsIgnoreCase(String seq)",
      "info" : "MethodDeclaration[4393-4697]:MethodDeclaration[4480-4784]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[4703-4786]:MethodDeclaration[4790-4873]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[482-509]:Block[573-600]"
    }, {
      "left" : "return pos;",
      "right" : "return pos;",
      "info" : "ReturnStatement[492-503]:ReturnStatement[583-594]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[533-570]:Block[624-661]"
    }, {
      "left" : "return pos >= length;",
      "right" : "return pos >= length;",
      "info" : "ReturnStatement[543-564]:ReturnStatement[634-655]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[591-650]:Block[682-741]"
    }, {
      "left" : "return isEmpty() ? EOF : input.charAt(pos);",
      "right" : "return isEmpty() ? EOF : input.charAt(pos);",
      "info" : "ReturnStatement[601-644]:ReturnStatement[692-735]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[671-769]:Block[762-860]"
    }, {
      "left" : "char val = isEmpty() ? EOF : input.charAt(pos);",
      "right" : "char val = isEmpty() ? EOF : input.charAt(pos);",
      "info" : "VariableDeclarationStatement[681-728]:VariableDeclarationStatement[772-819]"
    }, {
      "left" : "pos++;",
      "right" : "pos++;",
      "info" : "ExpressionStatement[737-743]:ExpressionStatement[828-834]"
    }, {
      "left" : "return val;",
      "right" : "return val;",
      "info" : "ReturnStatement[752-763]:ReturnStatement[843-854]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[792-814]:Block[883-905]"
    }, {
      "left" : "pos--;",
      "right" : "pos--;",
      "info" : "ExpressionStatement[802-808]:ExpressionStatement[893-899]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[835-857]:Block[926-948]"
    }, {
      "left" : "pos++;",
      "right" : "pos++;",
      "info" : "ExpressionStatement[845-851]:ExpressionStatement[936-942]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[875-902]:Block[966-993]"
    }, {
      "left" : "mark = pos;",
      "right" : "mark = pos;",
      "info" : "ExpressionStatement[885-896]:ExpressionStatement[976-987]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[928-955]:Block[1019-1046]"
    }, {
      "left" : "pos = mark;",
      "right" : "pos = mark;",
      "info" : "ExpressionStatement[938-949]:ExpressionStatement[1029-1040]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[986-1037]:Block[1077-1128]"
    }, {
      "left" : "return input.substring(pos, pos++);",
      "right" : "return input.substring(pos, pos++);",
      "info" : "ReturnStatement[996-1031]:ReturnStatement[1087-1122]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1068-1336]:Block[1159-1427]"
    }, {
      "left" : "int offset = input.indexOf(c, pos);",
      "right" : "int offset = input.indexOf(c, pos);",
      "info" : "VariableDeclarationStatement[1078-1113]:VariableDeclarationStatement[1169-1204]"
    }, {
      "left" : "if (offset != -1)",
      "right" : "if (offset != -1)",
      "info" : "IfStatement[1122-1330]:IfStatement[1213-1421]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1140-1278]:Block[1231-1369]"
    }, {
      "left" : "String consumed = input.substring(pos, offset);",
      "right" : "String consumed = input.substring(pos, offset);",
      "info" : "VariableDeclarationStatement[1154-1201]:VariableDeclarationStatement[1245-1292]"
    }, {
      "left" : "pos += consumed.length();",
      "right" : "pos += consumed.length();",
      "info" : "ExpressionStatement[1214-1239]:ExpressionStatement[1305-1330]"
    }, {
      "left" : "return consumed;",
      "right" : "return consumed;",
      "info" : "ReturnStatement[1252-1268]:ReturnStatement[1343-1359]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1284-1330]:Block[1375-1421]"
    }, {
      "left" : "return consumeToEnd();",
      "right" : "return consumeToEnd();",
      "info" : "ReturnStatement[1298-1320]:ReturnStatement[1389-1411]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1371-1641]:Block[1462-1732]"
    }, {
      "left" : "int offset = input.indexOf(seq, pos);",
      "right" : "int offset = input.indexOf(seq, pos);",
      "info" : "VariableDeclarationStatement[1381-1418]:VariableDeclarationStatement[1472-1509]"
    }, {
      "left" : "if (offset != -1)",
      "right" : "if (offset != -1)",
      "info" : "IfStatement[1427-1635]:IfStatement[1518-1726]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1445-1583]:Block[1536-1674]"
    }, {
      "left" : "String consumed = input.substring(pos, offset);",
      "right" : "String consumed = input.substring(pos, offset);",
      "info" : "VariableDeclarationStatement[1459-1506]:VariableDeclarationStatement[1550-1597]"
    }, {
      "left" : "pos += consumed.length();",
      "right" : "pos += consumed.length();",
      "info" : "ExpressionStatement[1519-1544]:ExpressionStatement[1610-1635]"
    }, {
      "left" : "return consumed;",
      "right" : "return consumed;",
      "info" : "ReturnStatement[1557-1573]:ReturnStatement[1648-1664]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1589-1635]:Block[1680-1726]"
    }, {
      "left" : "return consumeToEnd();",
      "right" : "return consumeToEnd();",
      "info" : "ReturnStatement[1603-1625]:ReturnStatement[1694-1716]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1680-1996]:Block[1771-2087]"
    }, {
      "left" : "int start = pos;",
      "right" : "int start = pos;",
      "info" : "VariableDeclarationStatement[1690-1706]:VariableDeclarationStatement[1781-1797]"
    }, {
      "left" : "OUTER: while (!isEmpty()) {\n            char c = input.charAt(pos);\n            for (char seek : seq) {\n                if (seek == c)\n                    break OUTER;\n            }\n            pos++;\n        }",
      "right" : "OUTER: while (!isEmpty()) {\n            char c = input.charAt(pos);\n            for (char seek : seq) {\n                if (seek == c)\n                    break OUTER;\n            }\n            pos++;\n        }",
      "info" : "LabeledStatement[1716-1926]:LabeledStatement[1807-2017]"
    }, {
      "left" : "while (!isEmpty())",
      "right" : "while (!isEmpty())",
      "info" : "WhileStatement[1723-1926]:WhileStatement[1814-2017]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1742-1926]:Block[1833-2017]"
    }, {
      "left" : "char c = input.charAt(pos);",
      "right" : "char c = input.charAt(pos);",
      "info" : "VariableDeclarationStatement[1756-1783]:VariableDeclarationStatement[1847-1874]"
    }, {
      "left" : "for (char seek : seq)",
      "right" : "for (char seek : seq)",
      "info" : "EnhancedForStatement[1796-1897]:EnhancedForStatement[1887-1988]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1818-1897]:Block[1909-1988]"
    }, {
      "left" : "if (seek == c)",
      "right" : "if (seek == c)",
      "info" : "IfStatement[1836-1883]:IfStatement[1927-1974]"
    }, {
      "left" : "break OUTER;",
      "right" : "break OUTER;",
      "info" : "BreakStatement[1871-1883]:BreakStatement[1962-1974]"
    }, {
      "left" : "pos++;",
      "right" : "pos++;",
      "info" : "ExpressionStatement[1910-1916]:ExpressionStatement[2001-2007]"
    }, {
      "left" : "return pos > start ? input.substring(start, pos) : \"\";",
      "right" : "return pos > start ? input.substring(start, pos) : \"\";",
      "info" : "ReturnStatement[1936-1990]:ReturnStatement[2027-2081]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2183-2468]:Block[2270-2555]"
    }, {
      "left" : "int start = pos;",
      "right" : "int start = pos;",
      "info" : "VariableDeclarationStatement[2193-2209]:VariableDeclarationStatement[2280-2296]"
    }, {
      "left" : "while (!isEmpty())",
      "right" : "while (!isEmpty())",
      "info" : "WhileStatement[2218-2417]:WhileStatement[2305-2504]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2237-2417]:Block[2324-2504]"
    }, {
      "left" : "char c = input.charAt(pos);",
      "right" : "char c = input.charAt(pos);",
      "info" : "VariableDeclarationStatement[2251-2278]:VariableDeclarationStatement[2338-2365]"
    }, {
      "left" : "if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z'))",
      "right" : "if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z'))",
      "info" : "IfStatement[2291-2407]:IfStatement[2378-2494]"
    }, {
      "left" : "pos++;",
      "right" : "pos++;",
      "info" : "ExpressionStatement[2361-2367]:ExpressionStatement[2448-2454]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[2401-2407]:BreakStatement[2488-2494]"
    }, {
      "left" : "return input.substring(start, pos);",
      "right" : "return input.substring(start, pos);",
      "info" : "ReturnStatement[2427-2462]:ReturnStatement[2514-2549]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2502-2812]:Block[2589-2899]"
    }, {
      "left" : "int start = pos;",
      "right" : "int start = pos;",
      "info" : "VariableDeclarationStatement[2512-2528]:VariableDeclarationStatement[2599-2615]"
    }, {
      "left" : "while (!isEmpty())",
      "right" : "while (!isEmpty())",
      "info" : "WhileStatement[2537-2762]:WhileStatement[2624-2849]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2556-2762]:Block[2643-2849]"
    }, {
      "left" : "char c = input.charAt(pos);",
      "right" : "char c = input.charAt(pos);",
      "info" : "VariableDeclarationStatement[2570-2597]:VariableDeclarationStatement[2657-2684]"
    }, {
      "left" : "if ((c >= '0' && c <= '9') || (c >= 'A' && c <= 'F') || (c >= 'a' && c <= 'f'))",
      "right" : "if ((c >= '0' && c <= '9') || (c >= 'A' && c <= 'F') || (c >= 'a' && c <= 'f'))",
      "info" : "IfStatement[2610-2752]:IfStatement[2697-2839]"
    }, {
      "left" : "pos++;",
      "right" : "pos++;",
      "info" : "ExpressionStatement[2706-2712]:ExpressionStatement[2793-2799]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[2746-2752]:BreakStatement[2833-2839]"
    }, {
      "left" : "return input.substring(start, pos);",
      "right" : "return input.substring(start, pos);",
      "info" : "ReturnStatement[2771-2806]:ReturnStatement[2858-2893]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2848-3104]:Block[2935-3191]"
    }, {
      "left" : "int start = pos;",
      "right" : "int start = pos;",
      "info" : "VariableDeclarationStatement[2858-2874]:VariableDeclarationStatement[2945-2961]"
    }, {
      "left" : "while (!isEmpty())",
      "right" : "while (!isEmpty())",
      "info" : "WhileStatement[2883-3054]:WhileStatement[2970-3141]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2902-3054]:Block[2989-3141]"
    }, {
      "left" : "char c = input.charAt(pos);",
      "right" : "char c = input.charAt(pos);",
      "info" : "VariableDeclarationStatement[2916-2943]:VariableDeclarationStatement[3003-3030]"
    }, {
      "left" : "if (c >= '0' && c <= '9')",
      "right" : "if (c >= '0' && c <= '9')",
      "info" : "IfStatement[2956-3044]:IfStatement[3043-3131]"
    }, {
      "left" : "pos++;",
      "right" : "pos++;",
      "info" : "ExpressionStatement[2998-3004]:ExpressionStatement[3085-3091]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[3038-3044]:BreakStatement[3125-3131]"
    }, {
      "left" : "return input.substring(start, pos);",
      "right" : "return input.substring(start, pos);",
      "info" : "ReturnStatement[3063-3098]:ReturnStatement[3150-3185]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3134-3195]:Block[3221-3282]"
    }, {
      "left" : "return !isEmpty() && input.charAt(pos) == c;",
      "right" : "return !isEmpty() && input.charAt(pos) == c;",
      "info" : "ReturnStatement[3144-3188]:ReturnStatement[3231-3275]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3229-3279]:Block[3316-3366]"
    }, {
      "left" : "return input.startsWith(seq, pos);",
      "right" : "return input.startsWith(seq, pos);",
      "info" : "ReturnStatement[3239-3273]:ReturnStatement[3326-3360]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3323-3399]:Block[3410-3486]"
    }, {
      "left" : "return input.regionMatches(true, pos, seq, 0, seq.length());",
      "right" : "return input.regionMatches(true, pos, seq, 0, seq.length());",
      "info" : "ReturnStatement[3333-3393]:ReturnStatement[3420-3480]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3437-3650]:Block[3524-3737]"
    }, {
      "left" : "if (isEmpty())",
      "right" : "if (isEmpty())",
      "info" : "IfStatement[3447-3487]:IfStatement[3534-3574]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[3474-3487]:ReturnStatement[3561-3574]"
    }, {
      "left" : "char c = input.charAt(pos);",
      "right" : "char c = input.charAt(pos);",
      "info" : "VariableDeclarationStatement[3497-3524]:VariableDeclarationStatement[3584-3611]"
    }, {
      "left" : "for (char seek : seq)",
      "right" : "for (char seek : seq)",
      "info" : "EnhancedForStatement[3533-3622]:EnhancedForStatement[3620-3709]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3555-3622]:Block[3642-3709]"
    }, {
      "left" : "if (seek == c)",
      "right" : "if (seek == c)",
      "info" : "IfStatement[3569-3612]:IfStatement[3656-3699]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[3600-3612]:ReturnStatement[3687-3699]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[3631-3644]:ReturnStatement[3718-3731]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3680-3837]:Block[3767-3924]"
    }, {
      "left" : "if (isEmpty())",
      "right" : "if (isEmpty())",
      "info" : "IfStatement[3690-3730]:IfStatement[3777-3817]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[3717-3730]:ReturnStatement[3804-3817]"
    }, {
      "left" : "char c = input.charAt(pos);",
      "right" : "char c = input.charAt(pos);",
      "info" : "VariableDeclarationStatement[3739-3766]:VariableDeclarationStatement[3826-3853]"
    }, {
      "left" : "return (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z');",
      "right" : "return (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z');",
      "info" : "ReturnStatement[3775-3831]:ReturnStatement[3862-3918]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3866-3997]:Block[3953-4084]"
    }, {
      "left" : "if (isEmpty())",
      "right" : "if (isEmpty())",
      "info" : "IfStatement[3876-3916]:IfStatement[3963-4003]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[3903-3916]:ReturnStatement[3990-4003]"
    }, {
      "left" : "char c = input.charAt(pos);",
      "right" : "char c = input.charAt(pos);",
      "info" : "VariableDeclarationStatement[3925-3952]:VariableDeclarationStatement[4012-4039]"
    }, {
      "left" : "return (c >= '0' && c <= '9');",
      "right" : "return (c >= '0' && c <= '9');",
      "info" : "ReturnStatement[3961-3991]:ReturnStatement[4048-4078]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4036-4182]:Block[4123-4269]"
    }, {
      "left" : "if (matches(seq))",
      "right" : "if (matches(seq))",
      "info" : "IfStatement[4046-4176]:IfStatement[4133-4263]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4064-4133]:Block[4151-4220]"
    }, {
      "left" : "pos += seq.length();",
      "right" : "pos += seq.length();",
      "info" : "ExpressionStatement[4078-4098]:ExpressionStatement[4165-4185]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[4111-4123]:ReturnStatement[4198-4210]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4139-4176]:Block[4226-4263]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[4153-4166]:ReturnStatement[4240-4253]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4231-4387]:Block[4318-4474]"
    }, {
      "left" : "if (matchesIgnoreCase(seq))",
      "right" : "if (matchesIgnoreCase(seq))",
      "info" : "IfStatement[4241-4381]:IfStatement[4328-4468]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4269-4338]:Block[4356-4425]"
    }, {
      "left" : "pos += seq.length();",
      "right" : "pos += seq.length();",
      "info" : "ExpressionStatement[4283-4303]:ExpressionStatement[4370-4390]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[4316-4328]:ReturnStatement[4403-4415]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4344-4381]:Block[4431-4468]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[4358-4371]:ReturnStatement[4445-4458]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4432-4697]:Block[4519-4784]"
    }, {
      "left" : "String loScan = seq.toLowerCase();",
      "right" : "String loScan = seq.toLowerCase();",
      "info" : "VariableDeclarationStatement[4527-4561]:VariableDeclarationStatement[4614-4648]"
    }, {
      "left" : "String hiScan = seq.toUpperCase();",
      "right" : "String hiScan = seq.toUpperCase();",
      "info" : "VariableDeclarationStatement[4570-4604]:VariableDeclarationStatement[4657-4691]"
    }, {
      "left" : "return (input.indexOf(loScan, pos) > -1) || (input.indexOf(hiScan, pos) > -1);",
      "right" : "return (input.indexOf(loScan, pos) > -1) || (input.indexOf(hiScan, pos) > -1);",
      "info" : "ReturnStatement[4613-4691]:ReturnStatement[4700-4778]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4742-4786]:Block[4829-4873]"
    }, {
      "left" : "return input.substring(pos);",
      "right" : "return input.substring(pos);",
      "info" : "ReturnStatement[4752-4780]:ReturnStatement[4839-4867]"
    } ]
  },
  "interFileMappings" : { }
}