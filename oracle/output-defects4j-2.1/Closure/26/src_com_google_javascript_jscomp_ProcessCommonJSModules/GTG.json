{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "ProcessCommonJSModules",
      "right" : "ProcessCommonJSModules",
      "info" : "TypeDeclaration[1027-9252]:TypeDeclaration[1027-9436]"
    }, {
      "left" : "public static final String DEFAULT_FILENAME_PREFIX = \".\" + File.separator;",
      "right" : "public static final String DEFAULT_FILENAME_PREFIX = \".\" + File.separator;",
      "info" : "FieldDeclaration[1505-1579]:FieldDeclaration[1505-1579]"
    }, {
      "left" : "private static final String MODULE_NAME_SEPARATOR = \"\\\\$\";",
      "right" : "private static final String MODULE_NAME_SEPARATOR = \"\\\\$\";",
      "info" : "FieldDeclaration[1583-1641]:FieldDeclaration[1583-1641]"
    }, {
      "left" : "private static final String MODULE_NAME_PREFIX = \"module$\";",
      "right" : "private static final String MODULE_NAME_PREFIX = \"module$\";",
      "info" : "FieldDeclaration[1644-1703]:FieldDeclaration[1644-1703]"
    }, {
      "left" : "private final AbstractCompiler compiler;",
      "right" : "private final AbstractCompiler compiler;",
      "info" : "FieldDeclaration[1707-1747]:FieldDeclaration[1707-1747]"
    }, {
      "left" : "private final String filenamePrefix;",
      "right" : "private final String filenamePrefix;",
      "info" : "FieldDeclaration[1750-1786]:FieldDeclaration[1750-1786]"
    }, {
      "left" : "private final boolean reportDependencies;",
      "right" : "private final boolean reportDependencies;",
      "info" : "FieldDeclaration[1789-1830]:FieldDeclaration[1789-1830]"
    }, {
      "left" : "private JSModule module;",
      "right" : "private JSModule module;",
      "info" : "FieldDeclaration[1833-1857]:FieldDeclaration[1833-1857]"
    }, {
      "left" : "ProcessCommonJSModules(AbstractCompiler compiler, String filenamePrefix)",
      "right" : "ProcessCommonJSModules(AbstractCompiler compiler, String filenamePrefix)",
      "info" : "MethodDeclaration[1861-1981]:MethodDeclaration[1861-1981]"
    }, {
      "left" : "ProcessCommonJSModules(AbstractCompiler compiler, String filenamePrefix,\n      boolean reportDependencies)",
      "right" : "ProcessCommonJSModules(AbstractCompiler compiler, String filenamePrefix,\n      boolean reportDependencies)",
      "info" : "MethodDeclaration[1985-2303]:MethodDeclaration[1985-2303]"
    }, {
      "left" : "public void process(Node externs, Node root)",
      "right" : "public void process(Node externs, Node root)",
      "info" : "MethodDeclaration[2307-2460]:MethodDeclaration[2307-2460]"
    }, {
      "left" : "String guessCJSModuleName(String filename)",
      "right" : "String guessCJSModuleName(String filename)",
      "info" : "MethodDeclaration[2464-2568]:MethodDeclaration[2464-2568]"
    }, {
      "left" : "JSModule getModule()",
      "right" : "JSModule getModule()",
      "info" : "MethodDeclaration[2572-2723]:MethodDeclaration[2572-2723]"
    }, {
      "left" : "public static String toModuleName(String filename)",
      "right" : "public static String toModuleName(String filename)",
      "info" : "MethodDeclaration[2727-3261]:MethodDeclaration[2727-3261]"
    }, {
      "left" : "public static String toModuleName(String requiredFilename,\n      String currentFilename)",
      "right" : "public static String toModuleName(String requiredFilename,\n      String currentFilename)",
      "info" : "MethodDeclaration[3265-4009]:MethodDeclaration[3265-4009]"
    }, {
      "left" : "private String normalizeSourceName(String filename)",
      "right" : "private String normalizeSourceName(String filename)",
      "info" : "MethodDeclaration[4013-4208]:MethodDeclaration[4013-4208]"
    }, {
      "left" : "ProcessCommonJsModulesCallback",
      "right" : "ProcessCommonJsModulesCallback",
      "info" : "TypeDeclaration[4212-8346]:TypeDeclaration[4212-8530]"
    }, {
      "left" : "private int scriptNodeCount = 0;",
      "right" : "private int scriptNodeCount = 0;",
      "info" : "FieldDeclaration[4392-4424]:FieldDeclaration[4392-4424]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[4430-4933]:MethodDeclaration[4494-4997]"
    }, {
      "left" : "private void visitRequireCall(NodeTraversal t, Node require, Node parent)",
      "right" : "private void visitRequireCall(NodeTraversal t, Node require, Node parent)",
      "info" : "MethodDeclaration[4939-5805]:MethodDeclaration[5003-5869]"
    }, {
      "left" : "private void visitScript(NodeTraversal t, Node script)",
      "right" : "private void visitScript(NodeTraversal t, Node script)",
      "info" : "MethodDeclaration[5811-7045]:MethodDeclaration[5875-7109]"
    }, {
      "left" : "private void emitOptionalModuleExportsOverride(Node script,\n        String moduleName)",
      "right" : "private void emitOptionalModuleExportsOverride(Node script,\n        String moduleName)",
      "info" : "MethodDeclaration[7051-7625]:MethodDeclaration[7115-7767]"
    }, {
      "left" : "private void visitModuleExports(Node prop)",
      "right" : "private void visitModuleExports(Node prop)",
      "info" : "MethodDeclaration[7631-8113]:MethodDeclaration[7773-8297]"
    }, {
      "left" : "private Node getCurrentScriptNode(Node n)",
      "right" : "private Node getCurrentScriptNode(Node n)",
      "info" : "MethodDeclaration[8119-8342]:MethodDeclaration[8303-8526]"
    }, {
      "left" : "SuffixVarsCallback",
      "right" : "SuffixVarsCallback",
      "info" : "TypeDeclaration[8350-9250]:TypeDeclaration[8534-9434]"
    }, {
      "left" : "private static final String EXPORTS = \"exports\";",
      "right" : "private static final String EXPORTS = \"exports\";",
      "info" : "FieldDeclaration[8514-8562]:FieldDeclaration[8698-8746]"
    }, {
      "left" : "private final String suffix;",
      "right" : "private final String suffix;",
      "info" : "FieldDeclaration[8568-8596]:FieldDeclaration[8752-8780]"
    }, {
      "left" : "SuffixVarsCallback(String suffix)",
      "right" : "SuffixVarsCallback(String suffix)",
      "info" : "MethodDeclaration[8602-8671]:MethodDeclaration[8786-8855]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[8677-9246]:MethodDeclaration[8861-9430]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1934-1981]:Block[1934-1981]"
    }, {
      "left" : "this(compiler, filenamePrefix, true);",
      "right" : "this(compiler, filenamePrefix, true);",
      "info" : "ConstructorInvocation[1940-1977]:ConstructorInvocation[1940-1977]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2092-2303]:Block[2092-2303]"
    }, {
      "left" : "this.compiler = compiler;",
      "right" : "this.compiler = compiler;",
      "info" : "ExpressionStatement[2098-2123]:ExpressionStatement[2098-2123]"
    }, {
      "left" : "this.filenamePrefix = filenamePrefix.endsWith(File.separator) ?\n        filenamePrefix : filenamePrefix + File.separator;",
      "right" : "this.filenamePrefix = filenamePrefix.endsWith(File.separator) ?\n        filenamePrefix : filenamePrefix + File.separator;",
      "info" : "ExpressionStatement[2128-2249]:ExpressionStatement[2128-2249]"
    }, {
      "left" : "this.reportDependencies = reportDependencies;",
      "right" : "this.reportDependencies = reportDependencies;",
      "info" : "ExpressionStatement[2254-2299]:ExpressionStatement[2254-2299]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2364-2460]:Block[2364-2460]"
    }, {
      "left" : "NodeTraversal\n        .traverse(compiler, root, new ProcessCommonJsModulesCallback());",
      "right" : "NodeTraversal\n        .traverse(compiler, root, new ProcessCommonJsModulesCallback());",
      "info" : "ExpressionStatement[2370-2456]:ExpressionStatement[2370-2456]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2507-2568]:Block[2507-2568]"
    }, {
      "left" : "return toModuleName(normalizeSourceName(filename));",
      "right" : "return toModuleName(normalizeSourceName(filename));",
      "info" : "ReturnStatement[2513-2564]:ReturnStatement[2513-2564]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2699-2723]:Block[2699-2723]"
    }, {
      "left" : "return module;",
      "right" : "return module;",
      "info" : "ReturnStatement[2705-2719]:ReturnStatement[2705-2719]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3014-3261]:Block[3014-3261]"
    }, {
      "left" : "return MODULE_NAME_PREFIX +\n        filename.replaceAll(\"^\\\\.\" + Pattern.quote(File.separator), \"\")\n            .replaceAll(Pattern.quote(File.separator), MODULE_NAME_SEPARATOR)\n            .replaceAll(\"\\\\.js$\", \"\").replaceAll(\"-\", \"_\");",
      "right" : "return MODULE_NAME_PREFIX +\n        filename.replaceAll(\"^\\\\.\" + Pattern.quote(File.separator), \"\")\n            .replaceAll(Pattern.quote(File.separator), MODULE_NAME_SEPARATOR)\n            .replaceAll(\"\\\\.js$\", \"\").replaceAll(\"-\", \"_\");",
      "info" : "ReturnStatement[3020-3257]:ReturnStatement[3020-3257]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3489-4009]:Block[3489-4009]"
    }, {
      "left" : "requiredFilename = requiredFilename.replaceAll(\"\\\\.js$\", \"\");",
      "right" : "requiredFilename = requiredFilename.replaceAll(\"\\\\.js$\", \"\");",
      "info" : "ExpressionStatement[3495-3556]:ExpressionStatement[3495-3556]"
    }, {
      "left" : "currentFilename = currentFilename.replaceAll(\"\\\\.js$\", \"\");",
      "right" : "currentFilename = currentFilename.replaceAll(\"\\\\.js$\", \"\");",
      "info" : "ExpressionStatement[3561-3620]:ExpressionStatement[3561-3620]"
    }, {
      "left" : "if (requiredFilename.startsWith(\".\" + File.separator) ||\n        requiredFilename.startsWith(\"..\" + File.separator))",
      "right" : "if (requiredFilename.startsWith(\".\" + File.separator) ||\n        requiredFilename.startsWith(\"..\" + File.separator))",
      "info" : "IfStatement[3626-3962]:IfStatement[3626-3962]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3743-3962]:Block[3743-3962]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[3751-3956]:TryStatement[3751-3956]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3755-3878]:Block[3755-3878]"
    }, {
      "left" : "requiredFilename = (new URI(currentFilename)).resolve(new URI(requiredFilename))\n            .toString();",
      "right" : "requiredFilename = (new URI(currentFilename)).resolve(new URI(requiredFilename))\n            .toString();",
      "info" : "ExpressionStatement[3765-3870]:ExpressionStatement[3765-3870]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3908-3956]:Block[3908-3956]"
    }, {
      "left" : "throw new RuntimeException(e);",
      "right" : "throw new RuntimeException(e);",
      "info" : "ThrowStatement[3918-3948]:ThrowStatement[3918-3948]"
    }, {
      "left" : "return toModuleName(requiredFilename);",
      "right" : "return toModuleName(requiredFilename);",
      "info" : "ReturnStatement[3967-4005]:ReturnStatement[3967-4005]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4065-4208]:Block[4065-4208]"
    }, {
      "left" : "if (filename.indexOf(filenamePrefix) == 0)",
      "right" : "if (filename.indexOf(filenamePrefix) == 0)",
      "info" : "IfStatement[4071-4183]:IfStatement[4071-4183]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4114-4183]:Block[4114-4183]"
    }, {
      "left" : "filename = filename.substring(filenamePrefix.length());",
      "right" : "filename = filename.substring(filenamePrefix.length());",
      "info" : "ExpressionStatement[4122-4177]:ExpressionStatement[4122-4177]"
    }, {
      "left" : "return filename;",
      "right" : "return filename;",
      "info" : "ReturnStatement[4188-4204]:ReturnStatement[4188-4204]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4500-4933]:Block[4564-4997]"
    }, {
      "left" : "if (n.isCall() && n.getChildCount() == 2 &&\n          \"require\".equals(n.getFirstChild().getQualifiedName()) &&\n          n.getChildAtIndex(1).isString())",
      "right" : "if (n.isCall() && n.getChildCount() == 2 &&\n          \"require\".equals(n.getFirstChild().getQualifiedName()) &&\n          n.getChildAtIndex(1).isString())",
      "info" : "IfStatement[4508-4712]:IfStatement[4572-4776]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4663-4712]:Block[4727-4776]"
    }, {
      "left" : "visitRequireCall(t, n, parent);",
      "right" : "visitRequireCall(t, n, parent);",
      "info" : "ExpressionStatement[4673-4704]:ExpressionStatement[4737-4768]"
    }, {
      "left" : "if (n.isScript())",
      "right" : "if (n.isScript())",
      "info" : "IfStatement[4720-4801]:IfStatement[4784-4865]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4738-4801]:Block[4802-4865]"
    }, {
      "left" : "scriptNodeCount++;",
      "right" : "scriptNodeCount++;",
      "info" : "ExpressionStatement[4748-4766]:ExpressionStatement[4812-4830]"
    }, {
      "left" : "visitScript(t, n);",
      "right" : "visitScript(t, n);",
      "info" : "ExpressionStatement[4775-4793]:ExpressionStatement[4839-4857]"
    }, {
      "left" : "if (n.isGetProp() &&\n          \"module.exports\".equals(n.getQualifiedName()))",
      "right" : "if (n.isGetProp() &&\n          \"module.exports\".equals(n.getQualifiedName()))",
      "info" : "IfStatement[4809-4927]:IfStatement[4873-4991]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4887-4927]:Block[4951-4991]"
    }, {
      "left" : "visitModuleExports(n);",
      "right" : "visitModuleExports(n);",
      "info" : "ExpressionStatement[4897-4919]:ExpressionStatement[4961-4983]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5168-5805]:Block[5232-5869]"
    }, {
      "left" : "String moduleName = toModuleName(require.getChildAtIndex(1).getString(),\n          normalizeSourceName(t.getSourceName()));",
      "right" : "String moduleName = toModuleName(require.getChildAtIndex(1).getString(),\n          normalizeSourceName(t.getSourceName()));",
      "info" : "VariableDeclarationStatement[5176-5299]:VariableDeclarationStatement[5240-5363]"
    }, {
      "left" : "Node moduleRef = IR.name(moduleName).srcref(require);",
      "right" : "Node moduleRef = IR.name(moduleName).srcref(require);",
      "info" : "VariableDeclarationStatement[5306-5359]:VariableDeclarationStatement[5370-5423]"
    }, {
      "left" : "parent.replaceChild(require, moduleRef);",
      "right" : "parent.replaceChild(require, moduleRef);",
      "info" : "ExpressionStatement[5366-5406]:ExpressionStatement[5430-5470]"
    }, {
      "left" : "Node script = getCurrentScriptNode(parent);",
      "right" : "Node script = getCurrentScriptNode(parent);",
      "info" : "VariableDeclarationStatement[5413-5456]:VariableDeclarationStatement[5477-5520]"
    }, {
      "left" : "if (reportDependencies)",
      "right" : "if (reportDependencies)",
      "info" : "IfStatement[5463-5541]:IfStatement[5527-5605]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5487-5541]:Block[5551-5605]"
    }, {
      "left" : "t.getInput().addRequire(moduleName);",
      "right" : "t.getInput().addRequire(moduleName);",
      "info" : "ExpressionStatement[5497-5533]:ExpressionStatement[5561-5597]"
    }, {
      "left" : "script.addChildToFront(IR.exprResult(\n          IR.call(IR.getprop(IR.name(\"goog\"), IR.string(\"require\")),\n              IR.string(moduleName))).copyInformationFromForTree(require));",
      "right" : "script.addChildToFront(IR.exprResult(\n          IR.call(IR.getprop(IR.name(\"goog\"), IR.string(\"require\")),\n              IR.string(moduleName))).copyInformationFromForTree(require));",
      "info" : "ExpressionStatement[5582-5764]:ExpressionStatement[5646-5828]"
    }, {
      "left" : "compiler.reportCodeChange();",
      "right" : "compiler.reportCodeChange();",
      "info" : "ExpressionStatement[5771-5799]:ExpressionStatement[5835-5863]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5987-7045]:Block[6051-7109]"
    }, {
      "left" : "Preconditions.checkArgument(scriptNodeCount == 1,\n          \"ProcessCommonJSModules supports only one invocation per \" +\n          \"CompilerInput / script node\");",
      "right" : "Preconditions.checkArgument(scriptNodeCount == 1,\n          \"ProcessCommonJSModules supports only one invocation per \" +\n          \"CompilerInput / script node\");",
      "info" : "ExpressionStatement[5995-6157]:ExpressionStatement[6059-6221]"
    }, {
      "left" : "String moduleName = guessCJSModuleName(normalizeSourceName(script\n          .getSourceFileName()));",
      "right" : "String moduleName = guessCJSModuleName(normalizeSourceName(script\n          .getSourceFileName()));",
      "info" : "VariableDeclarationStatement[6164-6263]:VariableDeclarationStatement[6228-6327]"
    }, {
      "left" : "script.addChildToFront(IR.var(IR.name(moduleName), IR.objectlit())\n          .copyInformationFromForTree(script));",
      "right" : "script.addChildToFront(IR.var(IR.name(moduleName), IR.objectlit())\n          .copyInformationFromForTree(script));",
      "info" : "ExpressionStatement[6270-6384]:ExpressionStatement[6334-6448]"
    }, {
      "left" : "if (reportDependencies)",
      "right" : "if (reportDependencies)",
      "info" : "IfStatement[6391-6603]:IfStatement[6455-6667]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6415-6603]:Block[6479-6667]"
    }, {
      "left" : "CompilerInput ci = t.getInput();",
      "right" : "CompilerInput ci = t.getInput();",
      "info" : "VariableDeclarationStatement[6425-6457]:VariableDeclarationStatement[6489-6521]"
    }, {
      "left" : "ci.addProvide(moduleName);",
      "right" : "ci.addProvide(moduleName);",
      "info" : "ExpressionStatement[6466-6492]:ExpressionStatement[6530-6556]"
    }, {
      "left" : "JSModule m = new JSModule(moduleName);",
      "right" : "JSModule m = new JSModule(moduleName);",
      "info" : "VariableDeclarationStatement[6501-6539]:VariableDeclarationStatement[6565-6603]"
    }, {
      "left" : "m.addAndOverrideModule(ci);",
      "right" : "m.addAndOverrideModule(ci);",
      "info" : "ExpressionStatement[6548-6575]:ExpressionStatement[6612-6639]"
    }, {
      "left" : "module = m;",
      "right" : "module = m;",
      "info" : "ExpressionStatement[6584-6595]:ExpressionStatement[6648-6659]"
    }, {
      "left" : "script.addChildToFront(IR.exprResult(\n          IR.call(IR.getprop(IR.name(\"goog\"), IR.string(\"provide\")),\n              IR.string(moduleName))).copyInformationFromForTree(script));",
      "right" : "script.addChildToFront(IR.exprResult(\n          IR.call(IR.getprop(IR.name(\"goog\"), IR.string(\"provide\")),\n              IR.string(moduleName))).copyInformationFromForTree(script));",
      "info" : "ExpressionStatement[6610-6791]:ExpressionStatement[6674-6855]"
    }, {
      "left" : "emitOptionalModuleExportsOverride(script, moduleName);",
      "right" : "emitOptionalModuleExportsOverride(script, moduleName);",
      "info" : "ExpressionStatement[6799-6853]:ExpressionStatement[6863-6917]"
    }, {
      "left" : "NodeTraversal.traverse(compiler, script, new SuffixVarsCallback(\n          moduleName));",
      "right" : "NodeTraversal.traverse(compiler, script, new SuffixVarsCallback(\n          moduleName));",
      "info" : "ExpressionStatement[6915-7003]:ExpressionStatement[6979-7067]"
    }, {
      "left" : "compiler.reportCodeChange();",
      "right" : "compiler.reportCodeChange();",
      "info" : "ExpressionStatement[7011-7039]:ExpressionStatement[7075-7103]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7286-7625]:Block[7350-7767]"
    }, {
      "left" : "Node moduleExportsProp = IR.getprop(IR.name(moduleName),\n          IR.string(\"module$exports\"));",
      "right" : "Node moduleExportsProp = IR.getprop(IR.name(moduleName),\n          IR.string(\"module$exports\"));",
      "info" : "VariableDeclarationStatement[7295-7391]:VariableDeclarationStatement[7437-7533]"
    }, {
      "left" : "script.addChildToBack(IR.ifNode(\n          moduleExportsProp,\n          IR.block(IR.exprResult(IR.assign(IR.name(moduleName),\n              moduleExportsProp.cloneTree())))).copyInformationFromForTree(\n          script));",
      "right" : "script.addChildToBack(IR.ifNode(\n          moduleExportsProp,\n          IR.block(IR.exprResult(IR.assign(IR.name(moduleName),\n              moduleExportsProp.cloneTree())))).copyInformationFromForTree(\n          script));",
      "info" : "ExpressionStatement[7398-7619]:ExpressionStatement[7540-7761]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7750-8113]:Block[7892-8297]"
    }, {
      "left" : "String moduleName = guessCJSModuleName(prop.getSourceFileName());",
      "right" : "String moduleName = guessCJSModuleName(prop.getSourceFileName());",
      "info" : "VariableDeclarationStatement[7758-7823]:VariableDeclarationStatement[7900-7965]"
    }, {
      "left" : "Node module = prop.getChildAtIndex(0);",
      "right" : "Node module = prop.getChildAtIndex(0);",
      "info" : "VariableDeclarationStatement[7830-7868]:VariableDeclarationStatement[7972-8010]"
    }, {
      "left" : "module.putProp(Node.ORIGINALNAME_PROP, \"module\");",
      "right" : "module.putProp(Node.ORIGINALNAME_PROP, \"module\");",
      "info" : "ExpressionStatement[7875-7924]:ExpressionStatement[8017-8066]"
    }, {
      "left" : "module.setString(moduleName);",
      "right" : "module.setString(moduleName);",
      "info" : "ExpressionStatement[7931-7960]:ExpressionStatement[8073-8102]"
    }, {
      "left" : "Node exports = prop.getChildAtIndex(1);",
      "right" : "Node exports = prop.getChildAtIndex(1);",
      "info" : "VariableDeclarationStatement[7967-8006]:VariableDeclarationStatement[8109-8148]"
    }, {
      "left" : "exports.putProp(Node.ORIGINALNAME_PROP, \"exports\");",
      "right" : "exports.putProp(Node.ORIGINALNAME_PROP, \"exports\");",
      "info" : "ExpressionStatement[8013-8064]:ExpressionStatement[8155-8206]"
    }, {
      "left" : "exports.setString(\"module$exports\");",
      "right" : "exports.setString(\"module$exports\");",
      "info" : "ExpressionStatement[8071-8107]:ExpressionStatement[8213-8249]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8221-8342]:Block[8405-8526]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[8229-8336]:WhileStatement[8413-8520]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8242-8336]:Block[8426-8520]"
    }, {
      "left" : "if (n.isScript())",
      "right" : "if (n.isScript())",
      "info" : "IfStatement[8252-8301]:IfStatement[8436-8485]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8270-8301]:Block[8454-8485]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[8282-8291]:ReturnStatement[8466-8475]"
    }, {
      "left" : "n = n.getParent();",
      "right" : "n = n.getParent();",
      "info" : "ExpressionStatement[8310-8328]:ExpressionStatement[8494-8512]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8636-8671]:Block[8820-8855]"
    }, {
      "left" : "this.suffix = suffix;",
      "right" : "this.suffix = suffix;",
      "info" : "ExpressionStatement[8644-8665]:ExpressionStatement[8828-8849]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8747-9246]:Block[8931-9430]"
    }, {
      "left" : "if (n.isName())",
      "right" : "if (n.isName())",
      "info" : "IfStatement[8755-9240]:IfStatement[8939-9424]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8771-9240]:Block[8955-9424]"
    }, {
      "left" : "String name = n.getString();",
      "right" : "String name = n.getString();",
      "info" : "VariableDeclarationStatement[8781-8809]:VariableDeclarationStatement[8965-8993]"
    }, {
      "left" : "if (suffix.equals(name))",
      "right" : "if (suffix.equals(name))",
      "info" : "IfStatement[8818-8872]:IfStatement[9002-9056]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8843-8872]:Block[9027-9056]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[8855-8862]:ReturnStatement[9039-9046]"
    }, {
      "left" : "if (EXPORTS.equals(name))",
      "right" : "if (EXPORTS.equals(name))",
      "info" : "IfStatement[8881-9232]:IfStatement[9065-9416]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8907-9003]:Block[9091-9187]"
    }, {
      "left" : "n.setString(suffix);",
      "right" : "n.setString(suffix);",
      "info" : "ExpressionStatement[8919-8939]:ExpressionStatement[9103-9123]"
    }, {
      "left" : "n.putProp(Node.ORIGINALNAME_PROP, EXPORTS);",
      "right" : "n.putProp(Node.ORIGINALNAME_PROP, EXPORTS);",
      "info" : "ExpressionStatement[8950-8993]:ExpressionStatement[9134-9177]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9009-9232]:Block[9193-9416]"
    }, {
      "left" : "Scope.Var var = t.getScope().getVar(name);",
      "right" : "Scope.Var var = t.getScope().getVar(name);",
      "info" : "VariableDeclarationStatement[9021-9063]:VariableDeclarationStatement[9205-9247]"
    }, {
      "left" : "if (var != null && var.isGlobal())",
      "right" : "if (var != null && var.isGlobal())",
      "info" : "IfStatement[9074-9222]:IfStatement[9258-9406]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9109-9222]:Block[9293-9406]"
    }, {
      "left" : "n.setString(name + \"$$\" + suffix);",
      "right" : "n.setString(name + \"$$\" + suffix);",
      "info" : "ExpressionStatement[9123-9157]:ExpressionStatement[9307-9341]"
    }, {
      "left" : "n.putProp(Node.ORIGINALNAME_PROP, name);",
      "right" : "n.putProp(Node.ORIGINALNAME_PROP, name);",
      "info" : "ExpressionStatement[9170-9210]:ExpressionStatement[9354-9394]"
    } ]
  },
  "interFileMappings" : { }
}