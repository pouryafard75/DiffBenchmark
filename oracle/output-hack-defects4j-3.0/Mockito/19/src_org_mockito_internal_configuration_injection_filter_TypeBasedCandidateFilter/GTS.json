{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "TypeBasedCandidateFilter",
      "right" : "TypeBasedCandidateFilter",
      "info" : "TypeDeclaration[295-921]:TypeDeclaration[295-949]"
    }, {
      "left" : "MockCandidateFilter next;",
      "right" : "MockCandidateFilter next;",
      "info" : "FieldDeclaration[371-396]:FieldDeclaration[371-396]"
    }, {
      "left" : "public TypeBasedCandidateFilter(MockCandidateFilter next)",
      "right" : "public TypeBasedCandidateFilter(MockCandidateFilter next)",
      "info" : "MethodDeclaration[402-493]:MethodDeclaration[402-493]"
    }, {
      "left" : "public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, Object fieldInstance)",
      "right" : "public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance)",
      "info" : "MethodDeclaration[499-919]:MethodDeclaration[499-947]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[295-301]:Modifier[295-301]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[302-307]:TYPE_DECLARATION_KIND[302-307]"
    }, {
      "left" : "TypeBasedCandidateFilter",
      "right" : "TypeBasedCandidateFilter",
      "info" : "SimpleName[308-332]:SimpleName[308-332]"
    }, {
      "left" : "MockCandidateFilter",
      "right" : "MockCandidateFilter",
      "info" : "SimpleType[344-363]:SimpleType[344-363]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[402-408]:Modifier[402-408]"
    }, {
      "left" : "TypeBasedCandidateFilter",
      "right" : "TypeBasedCandidateFilter",
      "info" : "SimpleName[409-433]:SimpleName[409-433]"
    }, {
      "left" : "MockCandidateFilter next",
      "right" : "MockCandidateFilter next",
      "info" : "SingleVariableDeclaration[434-458]:SingleVariableDeclaration[434-458]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[460-493]:Block[460-493]"
    }, {
      "left" : "this.next = next;",
      "right" : "this.next = next;",
      "info" : "ExpressionStatement[470-487]:ExpressionStatement[470-487]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[499-505]:Modifier[499-505]"
    }, {
      "left" : "OngoingInjecter",
      "right" : "OngoingInjecter",
      "info" : "SimpleType[506-521]:SimpleType[506-521]"
    }, {
      "left" : "filterCandidate",
      "right" : "filterCandidate",
      "info" : "SimpleName[522-537]:SimpleName[522-537]"
    }, {
      "left" : "Collection<Object> mocks",
      "right" : "Collection<Object> mocks",
      "info" : "SingleVariableDeclaration[538-562]:SingleVariableDeclaration[538-562]"
    }, {
      "left" : "Field field",
      "right" : "Field field",
      "info" : "SingleVariableDeclaration[564-575]:SingleVariableDeclaration[564-575]"
    }, {
      "left" : "Object fieldInstance",
      "right" : "Object fieldInstance",
      "info" : "SingleVariableDeclaration[577-597]:SingleVariableDeclaration[597-617]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[599-919]:Block[619-947]"
    }, {
      "left" : "List<Object> mockTypeMatches = new ArrayList<Object>();",
      "right" : "List<Object> mockTypeMatches = new ArrayList<Object>();",
      "info" : "VariableDeclarationStatement[609-664]:VariableDeclarationStatement[629-684]"
    }, {
      "left" : "for (Object mock : mocks)",
      "right" : "for (Object mock : mocks)",
      "info" : "EnhancedForStatement[673-836]:EnhancedForStatement[693-856]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[699-836]:Block[719-856]"
    }, {
      "left" : "if (field.getType().isAssignableFrom(mock.getClass()))",
      "right" : "if (field.getType().isAssignableFrom(mock.getClass()))",
      "info" : "IfStatement[713-826]:IfStatement[733-846]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[768-826]:Block[788-846]"
    }, {
      "left" : "mockTypeMatches.add(mock);",
      "right" : "mockTypeMatches.add(mock);",
      "info" : "ExpressionStatement[786-812]:ExpressionStatement[806-832]"
    }, {
      "left" : "return next.filterCandidate(mockTypeMatches, field, fieldInstance);",
      "right" : "return next.filterCandidate(mockTypeMatches, field, fields, fieldInstance);",
      "info" : "ReturnStatement[846-913]:ReturnStatement[866-941]"
    } ]
  },
  "interFileMappings" : { }
}