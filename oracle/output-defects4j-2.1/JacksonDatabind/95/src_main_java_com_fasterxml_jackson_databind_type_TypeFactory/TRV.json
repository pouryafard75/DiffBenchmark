{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "private static final long serialVersionUID = 1L;",
      "right" : "private static final long serialVersionUID = 1L;",
      "info" : "FieldDeclaration[1326-1374]:FieldDeclaration[1326-1374]"
    }, {
      "left" : "private final static JavaType[] NO_TYPES = new JavaType[0];",
      "right" : "private final static JavaType[] NO_TYPES = new JavaType[0];",
      "info" : "FieldDeclaration[1380-1439]:FieldDeclaration[1380-1439]"
    }, {
      "left" : "protected final static TypeFactory instance = new TypeFactory();",
      "right" : "protected final static TypeFactory instance = new TypeFactory();",
      "info" : "FieldDeclaration[1445-1742]:FieldDeclaration[1445-1742]"
    }, {
      "left" : "protected final static TypeBindings EMPTY_BINDINGS = TypeBindings.emptyBindings();",
      "right" : "protected final static TypeBindings EMPTY_BINDINGS = TypeBindings.emptyBindings();",
      "info" : "FieldDeclaration[1748-1830]:FieldDeclaration[1748-1830]"
    }, {
      "left" : "private final static Class<?> CLS_STRING = String.class;",
      "right" : "private final static Class<?> CLS_STRING = String.class;",
      "info" : "FieldDeclaration[2203-2259]:FieldDeclaration[2203-2259]"
    }, {
      "left" : "private final static Class<?> CLS_OBJECT = Object.class;",
      "right" : "private final static Class<?> CLS_OBJECT = Object.class;",
      "info" : "FieldDeclaration[2264-2320]:FieldDeclaration[2264-2320]"
    }, {
      "left" : "private final static Class<?> CLS_COMPARABLE = Comparable.class;",
      "right" : "private final static Class<?> CLS_COMPARABLE = Comparable.class;",
      "info" : "FieldDeclaration[2326-2390]:FieldDeclaration[2326-2390]"
    }, {
      "left" : "private final static Class<?> CLS_CLASS = Class.class;",
      "right" : "private final static Class<?> CLS_CLASS = Class.class;",
      "info" : "FieldDeclaration[2395-2449]:FieldDeclaration[2395-2449]"
    }, {
      "left" : "private final static Class<?> CLS_ENUM = Enum.class;",
      "right" : "private final static Class<?> CLS_ENUM = Enum.class;",
      "info" : "FieldDeclaration[2454-2506]:FieldDeclaration[2454-2506]"
    }, {
      "left" : "private final static Class<?> CLS_BOOL = Boolean.TYPE;",
      "right" : "private final static Class<?> CLS_BOOL = Boolean.TYPE;",
      "info" : "FieldDeclaration[2512-2566]:FieldDeclaration[2512-2566]"
    }, {
      "left" : "private final static Class<?> CLS_INT = Integer.TYPE;",
      "right" : "private final static Class<?> CLS_INT = Integer.TYPE;",
      "info" : "FieldDeclaration[2571-2624]:FieldDeclaration[2571-2624]"
    }, {
      "left" : "private final static Class<?> CLS_LONG = Long.TYPE;",
      "right" : "private final static Class<?> CLS_LONG = Long.TYPE;",
      "info" : "FieldDeclaration[2629-2680]:FieldDeclaration[2629-2680]"
    }, {
      "left" : "protected final static SimpleType CORE_TYPE_BOOL = new SimpleType(CLS_BOOL);",
      "right" : "protected final static SimpleType CORE_TYPE_BOOL = new SimpleType(CLS_BOOL);",
      "info" : "FieldDeclaration[2934-3010]:FieldDeclaration[2934-3010]"
    }, {
      "left" : "protected final static SimpleType CORE_TYPE_INT = new SimpleType(CLS_INT);",
      "right" : "protected final static SimpleType CORE_TYPE_INT = new SimpleType(CLS_INT);",
      "info" : "FieldDeclaration[3015-3089]:FieldDeclaration[3015-3089]"
    }, {
      "left" : "protected final static SimpleType CORE_TYPE_LONG = new SimpleType(CLS_LONG);",
      "right" : "protected final static SimpleType CORE_TYPE_LONG = new SimpleType(CLS_LONG);",
      "info" : "FieldDeclaration[3094-3170]:FieldDeclaration[3094-3170]"
    }, {
      "left" : "protected final static SimpleType CORE_TYPE_STRING = new SimpleType(CLS_STRING);",
      "right" : "protected final static SimpleType CORE_TYPE_STRING = new SimpleType(CLS_STRING);",
      "info" : "FieldDeclaration[3241-3321]:FieldDeclaration[3241-3321]"
    }, {
      "left" : "protected final static SimpleType CORE_TYPE_OBJECT = new SimpleType(CLS_OBJECT);",
      "right" : "protected final static SimpleType CORE_TYPE_OBJECT = new SimpleType(CLS_OBJECT);",
      "info" : "FieldDeclaration[3345-3425]:FieldDeclaration[3345-3425]"
    }, {
      "left" : "protected final static SimpleType CORE_TYPE_COMPARABLE = new SimpleType(CLS_COMPARABLE);",
      "right" : "protected final static SimpleType CORE_TYPE_COMPARABLE = new SimpleType(CLS_COMPARABLE);",
      "info" : "FieldDeclaration[3431-3726]:FieldDeclaration[3431-3726]"
    }, {
      "left" : "protected final static SimpleType CORE_TYPE_ENUM = new SimpleType(CLS_ENUM);",
      "right" : "protected final static SimpleType CORE_TYPE_ENUM = new SimpleType(CLS_ENUM);",
      "info" : "FieldDeclaration[3732-3993]:FieldDeclaration[3732-3993]"
    }, {
      "left" : "protected final static SimpleType CORE_TYPE_CLASS = new SimpleType(CLS_CLASS);",
      "right" : "protected final static SimpleType CORE_TYPE_CLASS = new SimpleType(CLS_CLASS);",
      "info" : "FieldDeclaration[3999-4226]:FieldDeclaration[3999-4226]"
    }, {
      "left" : "protected final LRUMap<Object,JavaType> _typeCache;",
      "right" : "protected final LRUMap<Object,JavaType> _typeCache;",
      "info" : "FieldDeclaration[4232-4480]:FieldDeclaration[4232-4480]"
    }, {
      "left" : "protected final TypeModifier[] _modifiers;",
      "right" : "protected final TypeModifier[] _modifiers;",
      "info" : "FieldDeclaration[4651-4839]:FieldDeclaration[4651-4839]"
    }, {
      "left" : "protected final TypeParser _parser;",
      "right" : "protected final TypeParser _parser;",
      "info" : "FieldDeclaration[4845-4880]:FieldDeclaration[4845-4880]"
    }, {
      "left" : "protected final ClassLoader _classLoader;",
      "right" : "protected final ClassLoader _classLoader;",
      "info" : "FieldDeclaration[4890-5003]:FieldDeclaration[4890-5003]"
    }, {
      "left" : "private TypeFactory()",
      "right" : "private TypeFactory()",
      "info" : "MethodDeclaration[5171-5220]:MethodDeclaration[5171-5220]"
    }, {
      "left" : "protected TypeFactory(LRUMap<Object,JavaType> typeCache)",
      "right" : "protected TypeFactory(LRUMap<Object,JavaType> typeCache)",
      "info" : "MethodDeclaration[5226-5557]:MethodDeclaration[5226-5557]"
    }, {
      "left" : "protected TypeFactory(LRUMap<Object,JavaType> typeCache, TypeParser p,\n            TypeModifier[] mods, ClassLoader classLoader)",
      "right" : "protected TypeFactory(LRUMap<Object,JavaType> typeCache, TypeParser p,\n            TypeModifier[] mods, ClassLoader classLoader)",
      "info" : "MethodDeclaration[5563-6026]:MethodDeclaration[5563-6026]"
    }, {
      "left" : "public TypeFactory withModifier(TypeModifier mod)",
      "right" : "public TypeFactory withModifier(TypeModifier mod)",
      "info" : "MethodDeclaration[6032-6701]:MethodDeclaration[6032-6701]"
    }, {
      "left" : "public TypeFactory withClassLoader(ClassLoader classLoader)",
      "right" : "public TypeFactory withClassLoader(ClassLoader classLoader)",
      "info" : "MethodDeclaration[6707-6852]:MethodDeclaration[6707-6852]"
    }, {
      "left" : "public TypeFactory withCache(LRUMap<Object,JavaType> cache)",
      "right" : "public TypeFactory withCache(LRUMap<Object,JavaType> cache)",
      "info" : "MethodDeclaration[6858-7222]:MethodDeclaration[6858-7222]"
    }, {
      "left" : "public static TypeFactory defaultInstance()",
      "right" : "public static TypeFactory defaultInstance()",
      "info" : "MethodDeclaration[7228-7495]:MethodDeclaration[7228-7495]"
    }, {
      "left" : "public void clearCache()",
      "right" : "public void clearCache()",
      "info" : "MethodDeclaration[7501-8010]:MethodDeclaration[7501-8010]"
    }, {
      "left" : "public ClassLoader getClassLoader()",
      "right" : "public ClassLoader getClassLoader()",
      "info" : "MethodDeclaration[8016-8088]:MethodDeclaration[8016-8088]"
    }, {
      "left" : "public static JavaType unknownType()",
      "right" : "public static JavaType unknownType()",
      "info" : "MethodDeclaration[8308-8597]:MethodDeclaration[8308-8597]"
    }, {
      "left" : "public static Class<?> rawClass(Type t)",
      "right" : "public static Class<?> rawClass(Type t)",
      "info" : "MethodDeclaration[8603-9150]:MethodDeclaration[8603-9150]"
    }, {
      "left" : "public Class<?> findClass(String className) throws ClassNotFoundException",
      "right" : "public Class<?> findClass(String className) throws ClassNotFoundException",
      "info" : "MethodDeclaration[9332-10671]:MethodDeclaration[9332-10671]"
    }, {
      "left" : "protected Class<?> classForName(String name, boolean initialize,\n                                   ClassLoader loader) throws ClassNotFoundException",
      "right" : "protected Class<?> classForName(String name, boolean initialize,\n                                   ClassLoader loader) throws ClassNotFoundException",
      "info" : "MethodDeclaration[10681-10885]:MethodDeclaration[10681-10885]"
    }, {
      "left" : "protected Class<?> classForName(String name) throws ClassNotFoundException",
      "right" : "protected Class<?> classForName(String name) throws ClassNotFoundException",
      "info" : "MethodDeclaration[10895-11013]:MethodDeclaration[10895-11013]"
    }, {
      "left" : "protected Class<?> _findPrimitive(String className)",
      "right" : "protected Class<?> _findPrimitive(String className)",
      "info" : "MethodDeclaration[11019-11628]:MethodDeclaration[11019-11628]"
    }, {
      "left" : "private TypeBindings _bindingsForSubtype(JavaType baseType, int typeParamCount, Class<?> subclass)",
      "right" : "private TypeBindings _bindingsForSubtype(JavaType baseType, int typeParamCount, Class<?> subclass)",
      "info" : "MethodDeclaration[15605-17520]:MethodDeclaration[15577-17492]"
    }, {
      "left" : "private String _resolveTypePlaceholders(JavaType sourceType, JavaType actualType)\n        throws IllegalArgumentException",
      "right" : "private String _resolveTypePlaceholders(JavaType sourceType, JavaType actualType)\n        throws IllegalArgumentException",
      "info" : "MethodDeclaration[17526-18272]:MethodDeclaration[17498-18244]"
    }, {
      "left" : "private boolean _verifyAndResolvePlaceholders(JavaType exp, JavaType act)",
      "right" : "private boolean _verifyAndResolvePlaceholders(JavaType exp, JavaType act)",
      "info" : "MethodDeclaration[18278-19323]:MethodDeclaration[18250-19295]"
    }, {
      "left" : "public JavaType constructGeneralizedType(JavaType baseType, Class<?> superClass)",
      "right" : "public JavaType constructGeneralizedType(JavaType baseType, Class<?> superClass)",
      "info" : "MethodDeclaration[19329-20717]:MethodDeclaration[19301-20689]"
    }, {
      "left" : "public JavaType constructFromCanonical(String canonical) throws IllegalArgumentException",
      "right" : "public JavaType constructFromCanonical(String canonical) throws IllegalArgumentException",
      "info" : "MethodDeclaration[20723-21279]:MethodDeclaration[20695-21251]"
    }, {
      "left" : "public JavaType[] findTypeParameters(JavaType type, Class<?> expType)",
      "right" : "public JavaType[] findTypeParameters(JavaType type, Class<?> expType)",
      "info" : "MethodDeclaration[21285-21916]:MethodDeclaration[21257-21888]"
    }, {
      "left" : "// since 2.7    \n    public JavaType[] findTypeParameters(Class<?> clz, Class<?> expType, TypeBindings bindings)",
      "right" : "// since 2.7    \n    public JavaType[] findTypeParameters(Class<?> clz, Class<?> expType, TypeBindings bindings)",
      "info" : "MethodDeclaration[21922-22223]:MethodDeclaration[21894-22195]"
    }, {
      "left" : "// since 2.7    \n    public JavaType[] findTypeParameters(Class<?> clz, Class<?> expType)",
      "right" : "// since 2.7    \n    public JavaType[] findTypeParameters(Class<?> clz, Class<?> expType)",
      "info" : "MethodDeclaration[22233-22501]:MethodDeclaration[22205-22473]"
    }, {
      "left" : "public JavaType moreSpecificType(JavaType type1, JavaType type2)",
      "right" : "public JavaType moreSpecificType(JavaType type1, JavaType type2)",
      "info" : "MethodDeclaration[22507-23377]:MethodDeclaration[22479-23349]"
    }, {
      "left" : "public JavaType constructType(Type type)",
      "right" : "public JavaType constructType(Type type)",
      "info" : "MethodDeclaration[23561-23662]:MethodDeclaration[23533-23634]"
    }, {
      "left" : "public JavaType constructType(Type type, TypeBindings bindings)",
      "right" : "public JavaType constructType(Type type, TypeBindings bindings)",
      "info" : "MethodDeclaration[23668-23786]:MethodDeclaration[23640-23758]"
    }, {
      "left" : "public JavaType constructType(TypeReference<?> typeRef)",
      "right" : "public JavaType constructType(TypeReference<?> typeRef)",
      "info" : "MethodDeclaration[23796-24832]:MethodDeclaration[23768-24804]"
    }, {
      "left" : "public JavaType constructType(Type type, Class<?> contextClass)",
      "right" : "public JavaType constructType(Type type, Class<?> contextClass)",
      "info" : "MethodDeclaration[24838-25164]:MethodDeclaration[24810-25136]"
    }, {
      "left" : "public JavaType constructType(Type type, JavaType contextType)",
      "right" : "public JavaType constructType(Type type, JavaType contextType)",
      "info" : "MethodDeclaration[25170-26391]:MethodDeclaration[25142-26363]"
    }, {
      "left" : "public ArrayType constructArrayType(Class<?> elementType)",
      "right" : "public ArrayType constructArrayType(Class<?> elementType)",
      "info" : "MethodDeclaration[26571-26924]:MethodDeclaration[26543-26896]"
    }, {
      "left" : "public ArrayType constructArrayType(JavaType elementType)",
      "right" : "public ArrayType constructArrayType(JavaType elementType)",
      "info" : "MethodDeclaration[26934-27241]:MethodDeclaration[26906-27213]"
    }, {
      "left" : "public CollectionType constructCollectionType(Class<? extends Collection> collectionClass,\n            Class<?> elementClass)",
      "right" : "public CollectionType constructCollectionType(Class<? extends Collection> collectionClass,\n            Class<?> elementClass)",
      "info" : "MethodDeclaration[27247-27697]:MethodDeclaration[27219-27669]"
    }, {
      "left" : "public CollectionType constructCollectionType(Class<? extends Collection> collectionClass,\n            JavaType elementType)",
      "right" : "public CollectionType constructCollectionType(Class<? extends Collection> collectionClass,\n            JavaType elementType)",
      "info" : "MethodDeclaration[27703-28292]:MethodDeclaration[27675-28264]"
    }, {
      "left" : "public CollectionLikeType constructCollectionLikeType(Class<?> collectionClass, Class<?> elementClass)",
      "right" : "public CollectionLikeType constructCollectionLikeType(Class<?> collectionClass, Class<?> elementClass)",
      "info" : "MethodDeclaration[28298-28734]:MethodDeclaration[28270-28706]"
    }, {
      "left" : "public CollectionLikeType constructCollectionLikeType(Class<?> collectionClass, JavaType elementType)",
      "right" : "public CollectionLikeType constructCollectionLikeType(Class<?> collectionClass, JavaType elementType)",
      "info" : "MethodDeclaration[28744-29360]:MethodDeclaration[28716-29332]"
    }, {
      "left" : "public MapType constructMapType(Class<? extends Map> mapClass,\n            Class<?> keyClass, Class<?> valueClass)",
      "right" : "public MapType constructMapType(Class<? extends Map> mapClass,\n            Class<?> keyClass, Class<?> valueClass)",
      "info" : "MethodDeclaration[29366-29997]:MethodDeclaration[29338-29969]"
    }, {
      "left" : "public MapType constructMapType(Class<? extends Map> mapClass, JavaType keyType, JavaType valueType)",
      "right" : "public MapType constructMapType(Class<? extends Map> mapClass, JavaType keyType, JavaType valueType)",
      "info" : "MethodDeclaration[30003-30429]:MethodDeclaration[29975-30401]"
    }, {
      "left" : "public MapLikeType constructMapLikeType(Class<?> mapClass, Class<?> keyClass, Class<?> valueClass)",
      "right" : "public MapLikeType constructMapLikeType(Class<?> mapClass, Class<?> keyClass, Class<?> valueClass)",
      "info" : "MethodDeclaration[30435-30912]:MethodDeclaration[30407-30884]"
    }, {
      "left" : "public MapLikeType constructMapLikeType(Class<?> mapClass, JavaType keyType, JavaType valueType)",
      "right" : "public MapLikeType constructMapLikeType(Class<?> mapClass, JavaType keyType, JavaType valueType)",
      "info" : "MethodDeclaration[30918-31655]:MethodDeclaration[30890-31627]"
    }, {
      "left" : "public JavaType constructSimpleType(Class<?> rawType, JavaType[] parameterTypes)",
      "right" : "public JavaType constructSimpleType(Class<?> rawType, JavaType[] parameterTypes)",
      "info" : "MethodDeclaration[31661-31988]:MethodDeclaration[31633-31960]"
    }, {
      "left" : "public JavaType constructSimpleType(Class<?> rawType, Class<?> parameterTarget,\n            JavaType[] parameterTypes)",
      "right" : "public JavaType constructSimpleType(Class<?> rawType, Class<?> parameterTarget,\n            JavaType[] parameterTypes)",
      "info" : "MethodDeclaration[31994-32358]:MethodDeclaration[31966-32330]"
    }, {
      "left" : "public JavaType constructReferenceType(Class<?> rawType, JavaType referredType)",
      "right" : "public JavaType constructReferenceType(Class<?> rawType, JavaType referredType)",
      "info" : "MethodDeclaration[32365-32649]:MethodDeclaration[32337-32621]"
    }, {
      "left" : "// since 2.8\n    public JavaType uncheckedSimpleType(Class<?> cls)",
      "right" : "// since 2.8\n    public JavaType uncheckedSimpleType(Class<?> cls)",
      "info" : "MethodDeclaration[32655-33495]:MethodDeclaration[32627-33467]"
    }, {
      "left" : "public JavaType constructParametricType(Class<?> rawType, JavaType... parameterTypes)",
      "right" : "public JavaType constructParametricType(Class<?> rawType, JavaType... parameterTypes)",
      "info" : "MethodDeclaration[35164-36648]:MethodDeclaration[35146-36630]"
    }, {
      "left" : "public JavaType constructParametrizedType(Class<?> parametrized, Class<?> parametersFor,\n            JavaType... parameterTypes)",
      "right" : "public JavaType constructParametrizedType(Class<?> parametrized, Class<?> parametersFor,\n            JavaType... parameterTypes)",
      "info" : "MethodDeclaration[36654-36966]:MethodDeclaration[36636-36948]"
    }, {
      "left" : "public JavaType constructParametrizedType(Class<?> parametrized, Class<?> parametersFor,\n            Class<?>... parameterClasses)",
      "right" : "public JavaType constructParametrizedType(Class<?> parametrized, Class<?> parametersFor,\n            Class<?>... parameterClasses)",
      "info" : "MethodDeclaration[36972-37288]:MethodDeclaration[36954-37270]"
    }, {
      "left" : "public CollectionType constructRawCollectionType(Class<? extends Collection> collectionClass)",
      "right" : "public CollectionType constructRawCollectionType(Class<? extends Collection> collectionClass)",
      "info" : "MethodDeclaration[37533-38165]:MethodDeclaration[37515-38147]"
    }, {
      "left" : "public CollectionLikeType constructRawCollectionLikeType(Class<?> collectionClass)",
      "right" : "public CollectionLikeType constructRawCollectionLikeType(Class<?> collectionClass)",
      "info" : "MethodDeclaration[38171-38805]:MethodDeclaration[38153-38787]"
    }, {
      "left" : "public MapType constructRawMapType(Class<? extends Map> mapClass)",
      "right" : "public MapType constructRawMapType(Class<? extends Map> mapClass)",
      "info" : "MethodDeclaration[38811-39429]:MethodDeclaration[38793-39411]"
    }, {
      "left" : "public MapLikeType constructRawMapLikeType(Class<?> mapClass)",
      "right" : "public MapLikeType constructRawMapLikeType(Class<?> mapClass)",
      "info" : "MethodDeclaration[39435-40062]:MethodDeclaration[39417-40044]"
    }, {
      "left" : "private JavaType _mapType(Class<?> rawClass, TypeBindings bindings,\n            JavaType superClass, JavaType[] superInterfaces)",
      "right" : "private JavaType _mapType(Class<?> rawClass, TypeBindings bindings,\n            JavaType superClass, JavaType[] superInterfaces)",
      "info" : "MethodDeclaration[40245-41261]:MethodDeclaration[40227-41243]"
    }, {
      "left" : "private JavaType _collectionType(Class<?> rawClass, TypeBindings bindings,\n            JavaType superClass, JavaType[] superInterfaces)",
      "right" : "private JavaType _collectionType(Class<?> rawClass, TypeBindings bindings,\n            JavaType superClass, JavaType[] superInterfaces)",
      "info" : "MethodDeclaration[41267-41944]:MethodDeclaration[41249-41926]"
    }, {
      "left" : "private JavaType _referenceType(Class<?> rawClass, TypeBindings bindings,\n            JavaType superClass, JavaType[] superInterfaces)",
      "right" : "private JavaType _referenceType(Class<?> rawClass, TypeBindings bindings,\n            JavaType superClass, JavaType[] superInterfaces)",
      "info" : "MethodDeclaration[41950-42624]:MethodDeclaration[41932-42606]"
    }, {
      "left" : "protected JavaType _constructSimple(Class<?> raw, TypeBindings bindings,\n            JavaType superClass, JavaType[] superInterfaces)",
      "right" : "protected JavaType _constructSimple(Class<?> raw, TypeBindings bindings,\n            JavaType superClass, JavaType[] superInterfaces)",
      "info" : "MethodDeclaration[42630-43339]:MethodDeclaration[42612-43321]"
    }, {
      "left" : "protected JavaType _newSimpleType(Class<?> raw, TypeBindings bindings,\n            JavaType superClass, JavaType[] superInterfaces)",
      "right" : "protected JavaType _newSimpleType(Class<?> raw, TypeBindings bindings,\n            JavaType superClass, JavaType[] superInterfaces)",
      "info" : "MethodDeclaration[43345-43794]:MethodDeclaration[43327-43776]"
    }, {
      "left" : "protected JavaType _unknownType()",
      "right" : "protected JavaType _unknownType()",
      "info" : "MethodDeclaration[43800-44204]:MethodDeclaration[43782-44186]"
    }, {
      "left" : "protected JavaType _findWellKnownSimple(Class<?> clz)",
      "right" : "protected JavaType _findWellKnownSimple(Class<?> clz)",
      "info" : "MethodDeclaration[44210-44896]:MethodDeclaration[44192-44878]"
    }, {
      "left" : "protected JavaType _fromAny(ClassStack context, Type type, TypeBindings bindings)",
      "right" : "protected JavaType _fromAny(ClassStack context, Type type, TypeBindings bindings)",
      "info" : "MethodDeclaration[45087-47449]:MethodDeclaration[45069-47431]"
    }, {
      "left" : "protected JavaType _fromClass(ClassStack context, Class<?> rawType, TypeBindings bindings)",
      "right" : "protected JavaType _fromClass(ClassStack context, Class<?> rawType, TypeBindings bindings)",
      "info" : "MethodDeclaration[47455-51361]:MethodDeclaration[47437-51343]"
    }, {
      "left" : "protected JavaType _resolveSuperClass(ClassStack context, Class<?> rawType, TypeBindings parentBindings)",
      "right" : "protected JavaType _resolveSuperClass(ClassStack context, Class<?> rawType, TypeBindings parentBindings)",
      "info" : "MethodDeclaration[51367-51669]:MethodDeclaration[51349-51651]"
    }, {
      "left" : "protected JavaType[] _resolveSuperInterfaces(ClassStack context, Class<?> rawType, TypeBindings parentBindings)",
      "right" : "protected JavaType[] _resolveSuperInterfaces(ClassStack context, Class<?> rawType, TypeBindings parentBindings)",
      "info" : "MethodDeclaration[51675-52208]:MethodDeclaration[51657-52190]"
    }, {
      "left" : "protected JavaType _fromWellKnownClass(ClassStack context, Class<?> rawType, TypeBindings bindings,\n            JavaType superClass, JavaType[] superInterfaces)",
      "right" : "protected JavaType _fromWellKnownClass(ClassStack context, Class<?> rawType, TypeBindings bindings,\n            JavaType superClass, JavaType[] superInterfaces)",
      "info" : "MethodDeclaration[52214-53621]:MethodDeclaration[52196-53603]"
    }, {
      "left" : "protected JavaType _fromWellKnownInterface(ClassStack context, Class<?> rawType, TypeBindings bindings,\n            JavaType superClass, JavaType[] superInterfaces)",
      "right" : "protected JavaType _fromWellKnownInterface(ClassStack context, Class<?> rawType, TypeBindings bindings,\n            JavaType superClass, JavaType[] superInterfaces)",
      "info" : "MethodDeclaration[53627-54233]:MethodDeclaration[53609-54215]"
    }, {
      "left" : "protected JavaType _fromParamType(ClassStack context, ParameterizedType ptype,\n            TypeBindings parentBindings)",
      "right" : "protected JavaType _fromParamType(ClassStack context, ParameterizedType ptype,\n            TypeBindings parentBindings)",
      "info" : "MethodDeclaration[54239-55832]:MethodDeclaration[54221-55814]"
    }, {
      "left" : "protected JavaType _fromArrayType(ClassStack context, GenericArrayType type, TypeBindings bindings)",
      "right" : "protected JavaType _fromArrayType(ClassStack context, GenericArrayType type, TypeBindings bindings)",
      "info" : "MethodDeclaration[55838-56100]:MethodDeclaration[55820-56082]"
    }, {
      "left" : "protected JavaType _fromVariable(ClassStack context, TypeVariable<?> var, TypeBindings bindings)",
      "right" : "protected JavaType _fromVariable(ClassStack context, TypeVariable<?> var, TypeBindings bindings)",
      "info" : "MethodDeclaration[56106-56826]:MethodDeclaration[56088-56808]"
    }, {
      "left" : "protected JavaType _fromWildcard(ClassStack context, WildcardType type, TypeBindings bindings)",
      "right" : "protected JavaType _fromWildcard(ClassStack context, WildcardType type, TypeBindings bindings)",
      "info" : "MethodDeclaration[56832-57334]:MethodDeclaration[56814-57316]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5193-5220]:Block[5193-5220]"
    }, {
      "left" : "this(null);",
      "right" : "this(null);",
      "info" : "ConstructorInvocation[5203-5214]:ConstructorInvocation[5203-5214]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5317-5557]:Block[5317-5557]"
    }, {
      "left" : "if (typeCache == null)",
      "right" : "if (typeCache == null)",
      "info" : "IfStatement[5327-5423]:IfStatement[5327-5423]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5350-5423]:Block[5350-5423]"
    }, {
      "left" : "typeCache = new LRUMap<Object,JavaType>(16, 200);",
      "right" : "typeCache = new LRUMap<Object,JavaType>(16, 200);",
      "info" : "ExpressionStatement[5364-5413]:ExpressionStatement[5364-5413]"
    }, {
      "left" : "_typeCache = typeCache;",
      "right" : "_typeCache = typeCache;",
      "info" : "ExpressionStatement[5432-5455]:ExpressionStatement[5432-5455]"
    }, {
      "left" : "_parser = new TypeParser(this);",
      "right" : "_parser = new TypeParser(this);",
      "info" : "ExpressionStatement[5464-5495]:ExpressionStatement[5464-5495]"
    }, {
      "left" : "_modifiers = null;",
      "right" : "_modifiers = null;",
      "info" : "ExpressionStatement[5504-5522]:ExpressionStatement[5504-5522]"
    }, {
      "left" : "_classLoader = null;",
      "right" : "_classLoader = null;",
      "info" : "ExpressionStatement[5531-5551]:ExpressionStatement[5531-5551]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5696-6026]:Block[5696-6026]"
    }, {
      "left" : "if (typeCache == null)",
      "right" : "if (typeCache == null)",
      "info" : "IfStatement[5706-5802]:IfStatement[5706-5802]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5729-5802]:Block[5729-5802]"
    }, {
      "left" : "typeCache = new LRUMap<Object,JavaType>(16, 200);",
      "right" : "typeCache = new LRUMap<Object,JavaType>(16, 200);",
      "info" : "ExpressionStatement[5743-5792]:ExpressionStatement[5743-5792]"
    }, {
      "left" : "_typeCache = typeCache;",
      "right" : "_typeCache = typeCache;",
      "info" : "ExpressionStatement[5811-5834]:ExpressionStatement[5811-5834]"
    }, {
      "left" : "_parser = p.withFactory(this);",
      "right" : "_parser = p.withFactory(this);",
      "info" : "ExpressionStatement[5927-5957]:ExpressionStatement[5927-5957]"
    }, {
      "left" : "_modifiers = mods;",
      "right" : "_modifiers = mods;",
      "info" : "ExpressionStatement[5966-5984]:ExpressionStatement[5966-5984]"
    }, {
      "left" : "_classLoader = classLoader;",
      "right" : "_classLoader = classLoader;",
      "info" : "ExpressionStatement[5993-6020]:ExpressionStatement[5993-6020]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6087-6701]:Block[6087-6701]"
    }, {
      "left" : "LRUMap<Object,JavaType> typeCache = _typeCache;",
      "right" : "LRUMap<Object,JavaType> typeCache = _typeCache;",
      "info" : "VariableDeclarationStatement[6097-6144]:VariableDeclarationStatement[6097-6144]"
    }, {
      "left" : "TypeModifier[] mods;",
      "right" : "TypeModifier[] mods;",
      "info" : "VariableDeclarationStatement[6153-6173]:VariableDeclarationStatement[6153-6173]"
    }, {
      "left" : "if (mod == null)",
      "right" : "if (mod == null)",
      "info" : "IfStatement[6182-6623]:IfStatement[6182-6623]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6199-6449]:Block[6199-6449]"
    }, {
      "left" : "mods = null;",
      "right" : "mods = null;",
      "info" : "ExpressionStatement[6238-6250]:ExpressionStatement[6238-6250]"
    }, {
      "left" : "typeCache = null;",
      "right" : "typeCache = null;",
      "info" : "ExpressionStatement[6422-6439]:ExpressionStatement[6422-6439]"
    }, {
      "left" : "if (_modifiers == null)",
      "right" : "if (_modifiers == null)",
      "info" : "IfStatement[6455-6623]:IfStatement[6455-6623]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6479-6537]:Block[6479-6537]"
    }, {
      "left" : "mods = new TypeModifier[] { mod };",
      "right" : "mods = new TypeModifier[] { mod };",
      "info" : "ExpressionStatement[6493-6527]:ExpressionStatement[6493-6527]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6543-6623]:Block[6543-6623]"
    }, {
      "left" : "mods = ArrayBuilders.insertInListNoDup(_modifiers, mod);",
      "right" : "mods = ArrayBuilders.insertInListNoDup(_modifiers, mod);",
      "info" : "ExpressionStatement[6557-6613]:ExpressionStatement[6557-6613]"
    }, {
      "left" : "return new TypeFactory(typeCache, _parser, mods, _classLoader);",
      "right" : "return new TypeFactory(typeCache, _parser, mods, _classLoader);",
      "info" : "ReturnStatement[6632-6695]:ReturnStatement[6632-6695]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6767-6852]:Block[6767-6852]"
    }, {
      "left" : "return new TypeFactory(_typeCache, _parser, _modifiers, classLoader);",
      "right" : "return new TypeFactory(_typeCache, _parser, _modifiers, classLoader);",
      "info" : "ReturnStatement[6777-6846]:ReturnStatement[6777-6846]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7141-7222]:Block[7141-7222]"
    }, {
      "left" : "return new TypeFactory(cache, _parser, _modifiers, _classLoader);",
      "right" : "return new TypeFactory(cache, _parser, _modifiers, _classLoader);",
      "info" : "ReturnStatement[7151-7216]:ReturnStatement[7151-7216]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7475-7495]:Block[7475-7495]"
    }, {
      "left" : "return instance;",
      "right" : "return instance;",
      "info" : "ReturnStatement[7477-7493]:ReturnStatement[7477-7493]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7975-8010]:Block[7975-8010]"
    }, {
      "left" : "_typeCache.clear();",
      "right" : "_typeCache.clear();",
      "info" : "ExpressionStatement[7985-8004]:ExpressionStatement[7985-8004]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8052-8088]:Block[8052-8088]"
    }, {
      "left" : "return _classLoader;",
      "right" : "return _classLoader;",
      "info" : "ReturnStatement[8062-8082]:ReturnStatement[8062-8082]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8541-8597]:Block[8541-8597]"
    }, {
      "left" : "return defaultInstance()._unknownType();",
      "right" : "return defaultInstance()._unknownType();",
      "info" : "ReturnStatement[8551-8591]:ReturnStatement[8551-8591]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8938-9150]:Block[8938-9150]"
    }, {
      "left" : "if (t instanceof Class<?>)",
      "right" : "if (t instanceof Class<?>)",
      "info" : "IfStatement[8948-9019]:IfStatement[8948-9019]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8975-9019]:Block[8975-9019]"
    }, {
      "left" : "return (Class<?>) t;",
      "right" : "return (Class<?>) t;",
      "info" : "ReturnStatement[8989-9009]:ReturnStatement[8989-9009]"
    }, {
      "left" : "return defaultInstance().constructType(t).getRawClass();",
      "right" : "return defaultInstance().constructType(t).getRawClass();",
      "info" : "ReturnStatement[9088-9144]:ReturnStatement[9088-9144]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9630-10671]:Block[9630-10671]"
    }, {
      "left" : "if (className.indexOf('.') < 0)",
      "right" : "if (className.indexOf('.') < 0)",
      "info" : "IfStatement[9640-9813]:IfStatement[9640-9813]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9672-9813]:Block[9672-9813]"
    }, {
      "left" : "Class<?> prim = _findPrimitive(className);",
      "right" : "Class<?> prim = _findPrimitive(className);",
      "info" : "VariableDeclarationStatement[9686-9728]:VariableDeclarationStatement[9686-9728]"
    }, {
      "left" : "if (prim != null)",
      "right" : "if (prim != null)",
      "info" : "IfStatement[9741-9803]:IfStatement[9741-9803]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9759-9803]:Block[9759-9803]"
    }, {
      "left" : "return prim;",
      "right" : "return prim;",
      "info" : "ReturnStatement[9777-9789]:ReturnStatement[9777-9789]"
    }, {
      "left" : "Throwable prob = null;",
      "right" : "Throwable prob = null;",
      "info" : "VariableDeclarationStatement[9897-9919]:VariableDeclarationStatement[9897-9919]"
    }, {
      "left" : "ClassLoader loader = this.getClassLoader();",
      "right" : "ClassLoader loader = this.getClassLoader();",
      "info" : "VariableDeclarationStatement[9928-9971]:VariableDeclarationStatement[9928-9971]"
    }, {
      "left" : "if (loader == null)",
      "right" : "if (loader == null)",
      "info" : "IfStatement[9980-10081]:IfStatement[9980-10081]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10000-10081]:Block[10000-10081]"
    }, {
      "left" : "loader = \tThread.currentThread().getContextClassLoader();",
      "right" : "loader = \tThread.currentThread().getContextClassLoader();",
      "info" : "ExpressionStatement[10014-10071]:ExpressionStatement[10014-10071]"
    }, {
      "left" : "if (loader != null)",
      "right" : "if (loader != null)",
      "info" : "IfStatement[10090-10301]:IfStatement[10090-10301]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10110-10301]:Block[10110-10301]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[10124-10291]:TryStatement[10124-10291]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10128-10205]:Block[10128-10205]"
    }, {
      "left" : "return classForName(className, true, loader);",
      "right" : "return classForName(className, true, loader);",
      "info" : "ReturnStatement[10146-10191]:ReturnStatement[10146-10191]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10226-10291]:Block[10226-10291]"
    }, {
      "left" : "prob = ClassUtil.getRootCause(e);",
      "right" : "prob = ClassUtil.getRootCause(e);",
      "info" : "ExpressionStatement[10244-10277]:ExpressionStatement[10244-10277]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[10310-10497]:TryStatement[10310-10497]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10314-10369]:Block[10314-10369]"
    }, {
      "left" : "return classForName(className);",
      "right" : "return classForName(className);",
      "info" : "ReturnStatement[10328-10359]:ReturnStatement[10328-10359]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10390-10497]:Block[10390-10497]"
    }, {
      "left" : "if (prob == null)",
      "right" : "if (prob == null)",
      "info" : "IfStatement[10404-10487]:IfStatement[10404-10487]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10422-10487]:Block[10422-10487]"
    }, {
      "left" : "prob = ClassUtil.getRootCause(e);",
      "right" : "prob = ClassUtil.getRootCause(e);",
      "info" : "ExpressionStatement[10440-10473]:ExpressionStatement[10440-10473]"
    }, {
      "left" : "if (prob instanceof RuntimeException)",
      "right" : "if (prob instanceof RuntimeException)",
      "info" : "IfStatement[10506-10598]:IfStatement[10506-10598]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10544-10598]:Block[10544-10598]"
    }, {
      "left" : "throw (RuntimeException) prob;",
      "right" : "throw (RuntimeException) prob;",
      "info" : "ThrowStatement[10558-10588]:ThrowStatement[10558-10588]"
    }, {
      "left" : "throw new ClassNotFoundException(prob.getMessage(), prob);",
      "right" : "throw new ClassNotFoundException(prob.getMessage(), prob);",
      "info" : "ThrowStatement[10607-10665]:ThrowStatement[10607-10665]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10831-10885]:Block[10831-10885]"
    }, {
      "left" : "return Class.forName(name, true, loader);",
      "right" : "return Class.forName(name, true, loader);",
      "info" : "ReturnStatement[10838-10879]:ReturnStatement[10838-10879]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10970-11013]:Block[10970-11013]"
    }, {
      "left" : "return Class.forName(name);",
      "right" : "return Class.forName(name);",
      "info" : "ReturnStatement[10980-11007]:ReturnStatement[10980-11007]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11075-11628]:Block[11075-11628]"
    }, {
      "left" : "if (\"int\".equals(className))",
      "right" : "if (\"int\".equals(className))",
      "info" : "IfStatement[11085-11134]:IfStatement[11085-11134]"
    }, {
      "left" : "return Integer.TYPE;",
      "right" : "return Integer.TYPE;",
      "info" : "ReturnStatement[11114-11134]:ReturnStatement[11114-11134]"
    }, {
      "left" : "if (\"long\".equals(className))",
      "right" : "if (\"long\".equals(className))",
      "info" : "IfStatement[11143-11190]:IfStatement[11143-11190]"
    }, {
      "left" : "return Long.TYPE;",
      "right" : "return Long.TYPE;",
      "info" : "ReturnStatement[11173-11190]:ReturnStatement[11173-11190]"
    }, {
      "left" : "if (\"float\".equals(className))",
      "right" : "if (\"float\".equals(className))",
      "info" : "IfStatement[11199-11248]:IfStatement[11199-11248]"
    }, {
      "left" : "return Float.TYPE;",
      "right" : "return Float.TYPE;",
      "info" : "ReturnStatement[11230-11248]:ReturnStatement[11230-11248]"
    }, {
      "left" : "if (\"double\".equals(className))",
      "right" : "if (\"double\".equals(className))",
      "info" : "IfStatement[11257-11308]:IfStatement[11257-11308]"
    }, {
      "left" : "return Double.TYPE;",
      "right" : "return Double.TYPE;",
      "info" : "ReturnStatement[11289-11308]:ReturnStatement[11289-11308]"
    }, {
      "left" : "if (\"boolean\".equals(className))",
      "right" : "if (\"boolean\".equals(className))",
      "info" : "IfStatement[11317-11370]:IfStatement[11317-11370]"
    }, {
      "left" : "return Boolean.TYPE;",
      "right" : "return Boolean.TYPE;",
      "info" : "ReturnStatement[11350-11370]:ReturnStatement[11350-11370]"
    }, {
      "left" : "if (\"byte\".equals(className))",
      "right" : "if (\"byte\".equals(className))",
      "info" : "IfStatement[11379-11426]:IfStatement[11379-11426]"
    }, {
      "left" : "return Byte.TYPE;",
      "right" : "return Byte.TYPE;",
      "info" : "ReturnStatement[11409-11426]:ReturnStatement[11409-11426]"
    }, {
      "left" : "if (\"char\".equals(className))",
      "right" : "if (\"char\".equals(className))",
      "info" : "IfStatement[11435-11487]:IfStatement[11435-11487]"
    }, {
      "left" : "return Character.TYPE;",
      "right" : "return Character.TYPE;",
      "info" : "ReturnStatement[11465-11487]:ReturnStatement[11465-11487]"
    }, {
      "left" : "if (\"short\".equals(className))",
      "right" : "if (\"short\".equals(className))",
      "info" : "IfStatement[11496-11545]:IfStatement[11496-11545]"
    }, {
      "left" : "return Short.TYPE;",
      "right" : "return Short.TYPE;",
      "info" : "ReturnStatement[11527-11545]:ReturnStatement[11527-11545]"
    }, {
      "left" : "if (\"void\".equals(className))",
      "right" : "if (\"void\".equals(className))",
      "info" : "IfStatement[11554-11601]:IfStatement[11554-11601]"
    }, {
      "left" : "return Void.TYPE;",
      "right" : "return Void.TYPE;",
      "info" : "ReturnStatement[11584-11601]:ReturnStatement[11584-11601]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[11610-11622]:ReturnStatement[11610-11622]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15708-17520]:Block[15680-17492]"
    }, {
      "left" : "PlaceholderForType[] placeholders = new PlaceholderForType[typeParamCount];",
      "right" : "PlaceholderForType[] placeholders = new PlaceholderForType[typeParamCount];",
      "info" : "VariableDeclarationStatement[15718-15793]:VariableDeclarationStatement[15690-15765]"
    }, {
      "left" : "for (int i = 0; i < typeParamCount; ++i)",
      "right" : "for (int i = 0; i < typeParamCount; ++i)",
      "info" : "ForStatement[15802-15911]:ForStatement[15774-15883]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15843-15911]:Block[15815-15883]"
    }, {
      "left" : "placeholders[i] = new PlaceholderForType(i);",
      "right" : "placeholders[i] = new PlaceholderForType(i);",
      "info" : "ExpressionStatement[15857-15901]:ExpressionStatement[15829-15873]"
    }, {
      "left" : "TypeBindings b = TypeBindings.create(subclass, placeholders);",
      "right" : "TypeBindings b = TypeBindings.create(subclass, placeholders);",
      "info" : "VariableDeclarationStatement[15920-15981]:VariableDeclarationStatement[15892-15953]"
    }, {
      "left" : "JavaType tmpSub = _fromClass(null, subclass, b);",
      "right" : "JavaType tmpSub = _fromClass(null, subclass, b);",
      "info" : "VariableDeclarationStatement[16053-16101]:VariableDeclarationStatement[16025-16073]"
    }, {
      "left" : "JavaType baseWithPlaceholders = tmpSub.findSuperType(baseType.getRawClass());",
      "right" : "JavaType baseWithPlaceholders = tmpSub.findSuperType(baseType.getRawClass());",
      "info" : "VariableDeclarationStatement[16142-16219]:VariableDeclarationStatement[16114-16191]"
    }, {
      "left" : "if (baseWithPlaceholders == null)",
      "right" : "if (baseWithPlaceholders == null)",
      "info" : "IfStatement[16228-16533]:IfStatement[16200-16505]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16262-16533]:Block[16234-16505]"
    }, {
      "left" : "throw new IllegalArgumentException(String.format(\n                    \"Internal error: unable to locate supertype (%s) from resolved subtype %s\", baseType.getRawClass().getName(),\n                    subclass.getName()));",
      "right" : "throw new IllegalArgumentException(String.format(\n                    \"Internal error: unable to locate supertype (%s) from resolved subtype %s\", baseType.getRawClass().getName(),\n                    subclass.getName()));",
      "info" : "ThrowStatement[16302-16523]:ThrowStatement[16274-16495]"
    }, {
      "left" : "String error = _resolveTypePlaceholders(baseType, baseWithPlaceholders);",
      "right" : "String error = _resolveTypePlaceholders(baseType, baseWithPlaceholders);",
      "info" : "VariableDeclarationStatement[16626-16698]:VariableDeclarationStatement[16598-16670]"
    }, {
      "left" : "if (error != null)",
      "right" : "if (error != null)",
      "info" : "IfStatement[16707-16910]:IfStatement[16679-16882]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16726-16910]:Block[16698-16882]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Failed to specialize base type \"+baseType.toCanonical()+\" as \"\n                    +subclass.getName()+\", problem: \"+error);",
      "right" : "throw new IllegalArgumentException(\"Failed to specialize base type \"+baseType.toCanonical()+\" as \"\n                    +subclass.getName()+\", problem: \"+error);",
      "info" : "ThrowStatement[16740-16900]:ThrowStatement[16712-16872]"
    }, {
      "left" : "final JavaType[] typeParams = new JavaType[typeParamCount];",
      "right" : "final JavaType[] typeParams = new JavaType[typeParamCount];",
      "info" : "VariableDeclarationStatement[16920-16979]:VariableDeclarationStatement[16892-16951]"
    }, {
      "left" : "for (int i = 0; i < typeParamCount; ++i)",
      "right" : "for (int i = 0; i < typeParamCount; ++i)",
      "info" : "ForStatement[16988-17456]:ForStatement[16960-17428]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17029-17456]:Block[17001-17428]"
    }, {
      "left" : "JavaType t = placeholders[i].actualType();",
      "right" : "JavaType t = placeholders[i].actualType();",
      "info" : "VariableDeclarationStatement[17043-17085]:VariableDeclarationStatement[17015-17057]"
    }, {
      "left" : "if (t == null)",
      "right" : "if (t == null)",
      "info" : "IfStatement[17350-17415]:IfStatement[17322-17387]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17365-17415]:Block[17337-17387]"
    }, {
      "left" : "t = unknownType();",
      "right" : "t = unknownType();",
      "info" : "ExpressionStatement[17383-17401]:ExpressionStatement[17355-17373]"
    }, {
      "left" : "typeParams[i] = t;",
      "right" : "typeParams[i] = t;",
      "info" : "ExpressionStatement[17428-17446]:ExpressionStatement[17400-17418]"
    }, {
      "left" : "return TypeBindings.create(subclass, typeParams);",
      "right" : "return TypeBindings.create(subclass, typeParams);",
      "info" : "ReturnStatement[17465-17514]:ReturnStatement[17437-17486]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17652-18272]:Block[17624-18244]"
    }, {
      "left" : "List<JavaType> expectedTypes = sourceType.getBindings().getTypeParameters();",
      "right" : "List<JavaType> expectedTypes = sourceType.getBindings().getTypeParameters();",
      "info" : "VariableDeclarationStatement[17662-17738]:VariableDeclarationStatement[17634-17710]"
    }, {
      "left" : "List<JavaType> actualTypes = actualType.getBindings().getTypeParameters();",
      "right" : "List<JavaType> actualTypes = actualType.getBindings().getTypeParameters();",
      "info" : "VariableDeclarationStatement[17747-17821]:VariableDeclarationStatement[17719-17793]"
    }, {
      "left" : "for (int i = 0, len = expectedTypes.size(); i < len; ++i)",
      "right" : "for (int i = 0, len = expectedTypes.size(); i < len; ++i)",
      "info" : "ForStatement[17830-18245]:ForStatement[17802-18217]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17888-18245]:Block[17860-18217]"
    }, {
      "left" : "JavaType exp = expectedTypes.get(i);",
      "right" : "JavaType exp = expectedTypes.get(i);",
      "info" : "VariableDeclarationStatement[17902-17938]:VariableDeclarationStatement[17874-17910]"
    }, {
      "left" : "JavaType act = actualTypes.get(i);",
      "right" : "JavaType act = actualTypes.get(i);",
      "info" : "VariableDeclarationStatement[17951-17985]:VariableDeclarationStatement[17923-17957]"
    }, {
      "left" : "if (!_verifyAndResolvePlaceholders(exp, act))",
      "right" : "if (!_verifyAndResolvePlaceholders(exp, act))",
      "info" : "IfStatement[17998-18235]:IfStatement[17970-18207]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18044-18235]:Block[18016-18207]"
    }, {
      "left" : "return String.format(\"Type parameter #%d/%d differs; can not specialize %s with %s\",\n                        (i+1), len, exp.toCanonical(), act.toCanonical());",
      "right" : "return String.format(\"Type parameter #%d/%d differs; can not specialize %s with %s\",\n                        (i+1), len, exp.toCanonical(), act.toCanonical());",
      "info" : "ReturnStatement[18062-18221]:ReturnStatement[18034-18193]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[18254-18266]:ReturnStatement[18226-18238]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18356-19323]:Block[18328-19295]"
    }, {
      "left" : "if (act instanceof PlaceholderForType)",
      "right" : "if (act instanceof PlaceholderForType)",
      "info" : "IfStatement[18447-18578]:IfStatement[18419-18550]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18486-18578]:Block[18458-18550]"
    }, {
      "left" : "((PlaceholderForType) act).actualType(exp);",
      "right" : "((PlaceholderForType) act).actualType(exp);",
      "info" : "ExpressionStatement[18500-18543]:ExpressionStatement[18472-18515]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[18556-18568]:ReturnStatement[18528-18540]"
    }, {
      "left" : "if (exp.getRawClass() != act.getRawClass())",
      "right" : "if (exp.getRawClass() != act.getRawClass())",
      "info" : "IfStatement[18725-18806]:IfStatement[18697-18778]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18769-18806]:Block[18741-18778]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[18783-18796]:ReturnStatement[18755-18768]"
    }, {
      "left" : "List<JavaType> expectedTypes = exp.getBindings().getTypeParameters();",
      "right" : "List<JavaType> expectedTypes = exp.getBindings().getTypeParameters();",
      "info" : "VariableDeclarationStatement[18869-18938]:VariableDeclarationStatement[18841-18910]"
    }, {
      "left" : "List<JavaType> actualTypes = act.getBindings().getTypeParameters();",
      "right" : "List<JavaType> actualTypes = act.getBindings().getTypeParameters();",
      "info" : "VariableDeclarationStatement[18947-19014]:VariableDeclarationStatement[18919-18986]"
    }, {
      "left" : "for (int i = 0, len = expectedTypes.size(); i < len; ++i)",
      "right" : "for (int i = 0, len = expectedTypes.size(); i < len; ++i)",
      "info" : "ForStatement[19023-19296]:ForStatement[18995-19268]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19081-19296]:Block[19053-19268]"
    }, {
      "left" : "JavaType exp2 = expectedTypes.get(i);",
      "right" : "JavaType exp2 = expectedTypes.get(i);",
      "info" : "VariableDeclarationStatement[19095-19132]:VariableDeclarationStatement[19067-19104]"
    }, {
      "left" : "JavaType act2 = actualTypes.get(i);",
      "right" : "JavaType act2 = actualTypes.get(i);",
      "info" : "VariableDeclarationStatement[19145-19180]:VariableDeclarationStatement[19117-19152]"
    }, {
      "left" : "if (!_verifyAndResolvePlaceholders(exp2, act2))",
      "right" : "if (!_verifyAndResolvePlaceholders(exp2, act2))",
      "info" : "IfStatement[19193-19286]:IfStatement[19165-19258]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19241-19286]:Block[19213-19258]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[19259-19272]:ReturnStatement[19231-19244]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[19305-19317]:ReturnStatement[19277-19289]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19778-20717]:Block[19750-20689]"
    }, {
      "left" : "final Class<?> rawBase = baseType.getRawClass();",
      "right" : "final Class<?> rawBase = baseType.getRawClass();",
      "info" : "VariableDeclarationStatement[19885-19933]:VariableDeclarationStatement[19857-19905]"
    }, {
      "left" : "if (rawBase == superClass)",
      "right" : "if (rawBase == superClass)",
      "info" : "IfStatement[19942-20009]:IfStatement[19914-19981]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19969-20009]:Block[19941-19981]"
    }, {
      "left" : "return baseType;",
      "right" : "return baseType;",
      "info" : "ReturnStatement[19983-19999]:ReturnStatement[19955-19971]"
    }, {
      "left" : "JavaType superType = baseType.findSuperType(superClass);",
      "right" : "JavaType superType = baseType.findSuperType(superClass);",
      "info" : "VariableDeclarationStatement[20018-20074]:VariableDeclarationStatement[19990-20046]"
    }, {
      "left" : "if (superType == null)",
      "right" : "if (superType == null)",
      "info" : "IfStatement[20083-20685]:IfStatement[20055-20657]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20106-20685]:Block[20078-20657]"
    }, {
      "left" : "if (!superClass.isAssignableFrom(rawBase))",
      "right" : "if (!superClass.isAssignableFrom(rawBase))",
      "info" : "IfStatement[20198-20415]:IfStatement[20170-20387]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20241-20415]:Block[20213-20387]"
    }, {
      "left" : "throw new IllegalArgumentException(String.format(\n                        \"Class %s not a super-type of %s\", superClass.getName(), baseType));",
      "right" : "throw new IllegalArgumentException(String.format(\n                        \"Class %s not a super-type of %s\", superClass.getName(), baseType));",
      "info" : "ThrowStatement[20259-20401]:ThrowStatement[20231-20373]"
    }, {
      "left" : "throw new IllegalArgumentException(String.format(\n                    \"Internal error: class %s not included as super-type for %s\",\n                    superClass.getName(), baseType));",
      "right" : "throw new IllegalArgumentException(String.format(\n                    \"Internal error: class %s not included as super-type for %s\",\n                    superClass.getName(), baseType));",
      "info" : "ThrowStatement[20490-20675]:ThrowStatement[20462-20647]"
    }, {
      "left" : "return superType;",
      "right" : "return superType;",
      "info" : "ReturnStatement[20694-20711]:ReturnStatement[20666-20683]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21231-21279]:Block[21203-21251]"
    }, {
      "left" : "return _parser.parse(canonical);",
      "right" : "return _parser.parse(canonical);",
      "info" : "ReturnStatement[21241-21273]:ReturnStatement[21213-21245]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21730-21916]:Block[21702-21888]"
    }, {
      "left" : "JavaType match = type.findSuperType(expType);",
      "right" : "JavaType match = type.findSuperType(expType);",
      "info" : "VariableDeclarationStatement[21740-21785]:VariableDeclarationStatement[21712-21757]"
    }, {
      "left" : "if (match == null)",
      "right" : "if (match == null)",
      "info" : "IfStatement[21794-21853]:IfStatement[21766-21825]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21813-21853]:Block[21785-21825]"
    }, {
      "left" : "return NO_TYPES;",
      "right" : "return NO_TYPES;",
      "info" : "ReturnStatement[21827-21843]:ReturnStatement[21799-21815]"
    }, {
      "left" : "return match.getBindings().typeParameterArray();",
      "right" : "return match.getBindings().typeParameterArray();",
      "info" : "ReturnStatement[21862-21910]:ReturnStatement[21834-21882]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22142-22223]:Block[22114-22195]"
    }, {
      "left" : "return findTypeParameters(constructType(clz, bindings), expType);",
      "right" : "return findTypeParameters(constructType(clz, bindings), expType);",
      "info" : "ReturnStatement[22152-22217]:ReturnStatement[22124-22189]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22430-22501]:Block[22402-22473]"
    }, {
      "left" : "return findTypeParameters(constructType(clz), expType);",
      "right" : "return findTypeParameters(constructType(clz), expType);",
      "info" : "ReturnStatement[22440-22495]:ReturnStatement[22412-22467]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22919-23377]:Block[22891-23349]"
    }, {
      "left" : "if (type1 == null)",
      "right" : "if (type1 == null)",
      "info" : "IfStatement[22929-22985]:IfStatement[22901-22957]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22948-22985]:Block[22920-22957]"
    }, {
      "left" : "return type2;",
      "right" : "return type2;",
      "info" : "ReturnStatement[22962-22975]:ReturnStatement[22934-22947]"
    }, {
      "left" : "if (type2 == null)",
      "right" : "if (type2 == null)",
      "info" : "IfStatement[22994-23050]:IfStatement[22966-23022]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23013-23050]:Block[22985-23022]"
    }, {
      "left" : "return type1;",
      "right" : "return type1;",
      "info" : "ReturnStatement[23027-23040]:ReturnStatement[22999-23012]"
    }, {
      "left" : "Class<?> raw1 = type1.getRawClass();",
      "right" : "Class<?> raw1 = type1.getRawClass();",
      "info" : "VariableDeclarationStatement[23059-23095]:VariableDeclarationStatement[23031-23067]"
    }, {
      "left" : "Class<?> raw2 = type2.getRawClass();",
      "right" : "Class<?> raw2 = type2.getRawClass();",
      "info" : "VariableDeclarationStatement[23104-23140]:VariableDeclarationStatement[23076-23112]"
    }, {
      "left" : "if (raw1 == raw2)",
      "right" : "if (raw1 == raw2)",
      "info" : "IfStatement[23149-23204]:IfStatement[23121-23176]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23167-23204]:Block[23139-23176]"
    }, {
      "left" : "return type1;",
      "right" : "return type1;",
      "info" : "ReturnStatement[23181-23194]:ReturnStatement[23153-23166]"
    }, {
      "left" : "if (raw1.isAssignableFrom(raw2))",
      "right" : "if (raw1.isAssignableFrom(raw2))",
      "info" : "IfStatement[23279-23349]:IfStatement[23251-23321]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23312-23349]:Block[23284-23321]"
    }, {
      "left" : "return type2;",
      "right" : "return type2;",
      "info" : "ReturnStatement[23326-23339]:ReturnStatement[23298-23311]"
    }, {
      "left" : "return type1;",
      "right" : "return type1;",
      "info" : "ReturnStatement[23358-23371]:ReturnStatement[23330-23343]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23602-23662]:Block[23574-23634]"
    }, {
      "left" : "return _fromAny(null, type, EMPTY_BINDINGS);",
      "right" : "return _fromAny(null, type, EMPTY_BINDINGS);",
      "info" : "ReturnStatement[23612-23656]:ReturnStatement[23584-23628]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23732-23786]:Block[23704-23758]"
    }, {
      "left" : "return _fromAny(null, type, bindings);",
      "right" : "return _fromAny(null, type, bindings);",
      "info" : "ReturnStatement[23742-23780]:ReturnStatement[23714-23752]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23856-24832]:Block[23828-24804]"
    }, {
      "left" : "return _fromAny(null, typeRef.getType(), EMPTY_BINDINGS);",
      "right" : "return _fromAny(null, typeRef.getType(), EMPTY_BINDINGS);",
      "info" : "ReturnStatement[23932-23989]:ReturnStatement[23904-23961]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25016-25164]:Block[24988-25136]"
    }, {
      "left" : "JavaType contextType = (contextClass == null) ? null : constructType(contextClass);",
      "right" : "JavaType contextType = (contextClass == null) ? null : constructType(contextClass);",
      "info" : "VariableDeclarationStatement[25026-25109]:VariableDeclarationStatement[24998-25081]"
    }, {
      "left" : "return constructType(type, contextType);",
      "right" : "return constructType(type, contextType);",
      "info" : "ReturnStatement[25118-25158]:ReturnStatement[25090-25130]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25347-26391]:Block[25319-26363]"
    }, {
      "left" : "TypeBindings bindings;",
      "right" : "TypeBindings bindings;",
      "info" : "VariableDeclarationStatement[25357-25379]:VariableDeclarationStatement[25329-25351]"
    }, {
      "left" : "if (contextType == null)",
      "right" : "if (contextType == null)",
      "info" : "IfStatement[25388-26338]:IfStatement[25360-26310]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25413-25477]:Block[25385-25449]"
    }, {
      "left" : "bindings = TypeBindings.emptyBindings();",
      "right" : "bindings = TypeBindings.emptyBindings();",
      "info" : "ExpressionStatement[25427-25467]:ExpressionStatement[25399-25439]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25483-26338]:Block[25455-26310]"
    }, {
      "left" : "bindings = contextType.getBindings();",
      "right" : "bindings = contextType.getBindings();",
      "info" : "ExpressionStatement[25497-25534]:ExpressionStatement[25469-25506]"
    }, {
      "left" : "if (type.getClass() != Class.class)",
      "right" : "if (type.getClass() != Class.class)",
      "info" : "IfStatement[25838-26328]:IfStatement[25810-26300]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25874-26328]:Block[25846-26300]"
    }, {
      "left" : "while (bindings.isEmpty())",
      "right" : "while (bindings.isEmpty())",
      "info" : "WhileStatement[26047-26314]:WhileStatement[26019-26286]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26074-26314]:Block[26046-26286]"
    }, {
      "left" : "contextType = contextType.getSuperClass();",
      "right" : "contextType = contextType.getSuperClass();",
      "info" : "ExpressionStatement[26096-26138]:ExpressionStatement[26068-26110]"
    }, {
      "left" : "if (contextType == null)",
      "right" : "if (contextType == null)",
      "info" : "IfStatement[26159-26238]:IfStatement[26131-26210]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26184-26238]:Block[26156-26210]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[26210-26216]:BreakStatement[26182-26188]"
    }, {
      "left" : "bindings = contextType.getBindings();",
      "right" : "bindings = contextType.getBindings();",
      "info" : "ExpressionStatement[26259-26296]:ExpressionStatement[26231-26268]"
    }, {
      "left" : "return _fromAny(null, type, bindings);",
      "right" : "return _fromAny(null, type, bindings);",
      "info" : "ReturnStatement[26347-26385]:ReturnStatement[26319-26357]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26840-26924]:Block[26812-26896]"
    }, {
      "left" : "return ArrayType.construct(_fromAny(null, elementType, null), null);",
      "right" : "return ArrayType.construct(_fromAny(null, elementType, null), null);",
      "info" : "ReturnStatement[26850-26918]:ReturnStatement[26822-26890]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27179-27241]:Block[27151-27213]"
    }, {
      "left" : "return ArrayType.construct(elementType, null);",
      "right" : "return ArrayType.construct(elementType, null);",
      "info" : "ReturnStatement[27189-27235]:ReturnStatement[27161-27207]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27569-27697]:Block[27541-27669]"
    }, {
      "left" : "return constructCollectionType(collectionClass,\n                _fromClass(null, elementClass, EMPTY_BINDINGS));",
      "right" : "return constructCollectionType(collectionClass,\n                _fromClass(null, elementClass, EMPTY_BINDINGS));",
      "info" : "ReturnStatement[27579-27691]:ReturnStatement[27551-27663]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28024-28292]:Block[27996-28264]"
    }, {
      "left" : "return (CollectionType) _fromClass(null, collectionClass,\n                TypeBindings.create(collectionClass, elementType));",
      "right" : "return (CollectionType) _fromClass(null, collectionClass,\n                TypeBindings.create(collectionClass, elementType));",
      "info" : "ReturnStatement[28161-28286]:ReturnStatement[28133-28258]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28602-28734]:Block[28574-28706]"
    }, {
      "left" : "return constructCollectionLikeType(collectionClass,\n                _fromClass(null, elementClass, EMPTY_BINDINGS));",
      "right" : "return constructCollectionLikeType(collectionClass,\n                _fromClass(null, elementClass, EMPTY_BINDINGS));",
      "info" : "ReturnStatement[28612-28728]:ReturnStatement[28584-28700]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29047-29360]:Block[29019-29332]"
    }, {
      "left" : "JavaType type = _fromClass(null, collectionClass,\n                TypeBindings.createIfNeeded(collectionClass, elementType));",
      "right" : "JavaType type = _fromClass(null, collectionClass,\n                TypeBindings.createIfNeeded(collectionClass, elementType));",
      "info" : "VariableDeclarationStatement[29057-29182]:VariableDeclarationStatement[29029-29154]"
    }, {
      "left" : "if (type instanceof CollectionLikeType)",
      "right" : "if (type instanceof CollectionLikeType)",
      "info" : "IfStatement[29191-29288]:IfStatement[29163-29260]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29231-29288]:Block[29203-29260]"
    }, {
      "left" : "return (CollectionLikeType) type;",
      "right" : "return (CollectionLikeType) type;",
      "info" : "ReturnStatement[29245-29278]:ReturnStatement[29217-29250]"
    }, {
      "left" : "return CollectionLikeType.upgradeFrom(type, elementType);",
      "right" : "return CollectionLikeType.upgradeFrom(type, elementType);",
      "info" : "ReturnStatement[29297-29354]:ReturnStatement[29269-29326]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29679-29997]:Block[29651-29969]"
    }, {
      "left" : "JavaType kt, vt;",
      "right" : "JavaType kt, vt;",
      "info" : "VariableDeclarationStatement[29689-29705]:VariableDeclarationStatement[29661-29677]"
    }, {
      "left" : "if (mapClass == Properties.class)",
      "right" : "if (mapClass == Properties.class)",
      "info" : "IfStatement[29714-29940]:IfStatement[29686-29912]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29748-29799]:Block[29720-29771]"
    }, {
      "left" : "kt = vt = CORE_TYPE_STRING;",
      "right" : "kt = vt = CORE_TYPE_STRING;",
      "info" : "ExpressionStatement[29762-29789]:ExpressionStatement[29734-29761]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29805-29940]:Block[29777-29912]"
    }, {
      "left" : "kt = _fromClass(null, keyClass, EMPTY_BINDINGS);",
      "right" : "kt = _fromClass(null, keyClass, EMPTY_BINDINGS);",
      "info" : "ExpressionStatement[29819-29867]:ExpressionStatement[29791-29839]"
    }, {
      "left" : "vt = _fromClass(null, valueClass, EMPTY_BINDINGS);",
      "right" : "vt = _fromClass(null, valueClass, EMPTY_BINDINGS);",
      "info" : "ExpressionStatement[29880-29930]:ExpressionStatement[29852-29902]"
    }, {
      "left" : "return constructMapType(mapClass, kt, vt);",
      "right" : "return constructMapType(mapClass, kt, vt);",
      "info" : "ReturnStatement[29949-29991]:ReturnStatement[29921-29963]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30302-30429]:Block[30274-30401]"
    }, {
      "left" : "return (MapType) _fromClass(null, mapClass,\n                TypeBindings.create(mapClass, keyType, valueType));",
      "right" : "return (MapType) _fromClass(null, mapClass,\n                TypeBindings.create(mapClass, keyType, valueType));",
      "info" : "ReturnStatement[30312-30423]:ReturnStatement[30284-30395]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30736-30912]:Block[30708-30884]"
    }, {
      "left" : "return constructMapLikeType(mapClass,\n                _fromClass(null, keyClass, EMPTY_BINDINGS),\n                _fromClass(null, valueClass, EMPTY_BINDINGS));",
      "right" : "return constructMapLikeType(mapClass,\n                _fromClass(null, keyClass, EMPTY_BINDINGS),\n                _fromClass(null, valueClass, EMPTY_BINDINGS));",
      "info" : "ReturnStatement[30746-30906]:ReturnStatement[30718-30878]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31217-31655]:Block[31189-31627]"
    }, {
      "left" : "JavaType type = _fromClass(null, mapClass,\n                TypeBindings.createIfNeeded(mapClass, new JavaType[] { keyType, valueType }));",
      "right" : "JavaType type = _fromClass(null, mapClass,\n                TypeBindings.createIfNeeded(mapClass, new JavaType[] { keyType, valueType }));",
      "info" : "VariableDeclarationStatement[31354-31491]:VariableDeclarationStatement[31326-31463]"
    }, {
      "left" : "if (type instanceof MapLikeType)",
      "right" : "if (type instanceof MapLikeType)",
      "info" : "IfStatement[31500-31583]:IfStatement[31472-31555]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31533-31583]:Block[31505-31555]"
    }, {
      "left" : "return (MapLikeType) type;",
      "right" : "return (MapLikeType) type;",
      "info" : "ReturnStatement[31547-31573]:ReturnStatement[31519-31545]"
    }, {
      "left" : "return MapLikeType.upgradeFrom(type, keyType, valueType);",
      "right" : "return MapLikeType.upgradeFrom(type, keyType, valueType);",
      "info" : "ReturnStatement[31592-31649]:ReturnStatement[31564-31621]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31893-31988]:Block[31865-31960]"
    }, {
      "left" : "return _fromClass(null, rawType, TypeBindings.create(rawType, parameterTypes));",
      "right" : "return _fromClass(null, rawType, TypeBindings.create(rawType, parameterTypes));",
      "info" : "ReturnStatement[31903-31982]:ReturnStatement[31875-31954]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32290-32358]:Block[32262-32330]"
    }, {
      "left" : "return constructSimpleType(rawType, parameterTypes);",
      "right" : "return constructSimpleType(rawType, parameterTypes);",
      "info" : "ReturnStatement[32300-32352]:ReturnStatement[32272-32324]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32483-32649]:Block[32455-32621]"
    }, {
      "left" : "return ReferenceType.construct(rawType, null, // no bindings\n                null, null, // or super-class, interfaces?\n                referredType);",
      "right" : "return ReferenceType.construct(rawType, null, // no bindings\n                null, null, // or super-class, interfaces?\n                referredType);",
      "info" : "ReturnStatement[32493-32643]:ReturnStatement[32465-32615]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33334-33495]:Block[33306-33467]"
    }, {
      "left" : "return _constructSimple(cls, EMPTY_BINDINGS, null, null);",
      "right" : "return _constructSimple(cls, EMPTY_BINDINGS, null, null);",
      "info" : "ReturnStatement[33432-33489]:ReturnStatement[33404-33461]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36553-36648]:Block[36535-36630]"
    }, {
      "left" : "return _fromClass(null, rawType, TypeBindings.create(rawType, parameterTypes));",
      "right" : "return _fromClass(null, rawType, TypeBindings.create(rawType, parameterTypes));",
      "info" : "ReturnStatement[36563-36642]:ReturnStatement[36545-36624]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36889-36966]:Block[36871-36948]"
    }, {
      "left" : "return constructParametricType(parametrized, parameterTypes);",
      "right" : "return constructParametricType(parametrized, parameterTypes);",
      "info" : "ReturnStatement[36899-36960]:ReturnStatement[36881-36942]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37209-37288]:Block[37191-37270]"
    }, {
      "left" : "return constructParametricType(parametrized, parameterClasses);",
      "right" : "return constructParametricType(parametrized, parameterClasses);",
      "info" : "ReturnStatement[37219-37282]:ReturnStatement[37201-37264]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38086-38165]:Block[38068-38147]"
    }, {
      "left" : "return constructCollectionType(collectionClass, unknownType());",
      "right" : "return constructCollectionType(collectionClass, unknownType());",
      "info" : "ReturnStatement[38096-38159]:ReturnStatement[38078-38141]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38722-38805]:Block[38704-38787]"
    }, {
      "left" : "return constructCollectionLikeType(collectionClass, unknownType());",
      "right" : "return constructCollectionLikeType(collectionClass, unknownType());",
      "info" : "ReturnStatement[38732-38799]:ReturnStatement[38714-38781]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39349-39429]:Block[39331-39411]"
    }, {
      "left" : "return constructMapType(mapClass, unknownType(), unknownType());",
      "right" : "return constructMapType(mapClass, unknownType(), unknownType());",
      "info" : "ReturnStatement[39359-39423]:ReturnStatement[39341-39405]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39978-40062]:Block[39960-40044]"
    }, {
      "left" : "return constructMapLikeType(mapClass, unknownType(), unknownType());",
      "right" : "return constructMapLikeType(mapClass, unknownType(), unknownType());",
      "info" : "ReturnStatement[39988-40056]:ReturnStatement[39970-40038]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40378-41261]:Block[40360-41243]"
    }, {
      "left" : "JavaType kt, vt;",
      "right" : "JavaType kt, vt;",
      "info" : "VariableDeclarationStatement[40388-40404]:VariableDeclarationStatement[40370-40386]"
    }, {
      "left" : "if (rawClass == Properties.class)",
      "right" : "if (rawClass == Properties.class)",
      "info" : "IfStatement[40520-41164]:IfStatement[40502-41146]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40554-40605]:Block[40536-40587]"
    }, {
      "left" : "kt = vt = CORE_TYPE_STRING;",
      "right" : "kt = vt = CORE_TYPE_STRING;",
      "info" : "ExpressionStatement[40568-40595]:ExpressionStatement[40550-40577]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40611-41164]:Block[40593-41146]"
    }, {
      "left" : "List<JavaType> typeParams = bindings.getTypeParameters();",
      "right" : "List<JavaType> typeParams = bindings.getTypeParameters();",
      "info" : "VariableDeclarationStatement[40625-40682]:VariableDeclarationStatement[40607-40664]"
    }, {
      "left" : "switch (typeParams.size()) {\n            case 0: // acceptable?\n                kt = vt = _unknownType();\n                break;\n            case 2:\n                kt = typeParams.get(0);\n                vt = typeParams.get(1);\n                break;\n            default:\n                throw new IllegalArgumentException(\"Strange Map type \"+rawClass.getName()+\": can not determine type parameters\");\n            }",
      "right" : "switch (typeParams.size()) {\n            case 0: // acceptable?\n                kt = vt = _unknownType();\n                break;\n            case 2:\n                kt = typeParams.get(0);\n                vt = typeParams.get(1);\n                break;\n            default:\n                throw new IllegalArgumentException(\"Strange Map type \"+rawClass.getName()+\": can not determine type parameters\");\n            }",
      "info" : "SwitchStatement[40738-41154]:SwitchStatement[40720-41136]"
    }, {
      "left" : "case 0:",
      "right" : "case 0:",
      "info" : "SwitchCase[40779-40786]:SwitchCase[40761-40768]"
    }, {
      "left" : "kt = vt = _unknownType();",
      "right" : "kt = vt = _unknownType();",
      "info" : "ExpressionStatement[40818-40843]:ExpressionStatement[40800-40825]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[40860-40866]:BreakStatement[40842-40848]"
    }, {
      "left" : "case 2:",
      "right" : "case 2:",
      "info" : "SwitchCase[40879-40886]:SwitchCase[40861-40868]"
    }, {
      "left" : "kt = typeParams.get(0);",
      "right" : "kt = typeParams.get(0);",
      "info" : "ExpressionStatement[40903-40926]:ExpressionStatement[40885-40908]"
    }, {
      "left" : "vt = typeParams.get(1);",
      "right" : "vt = typeParams.get(1);",
      "info" : "ExpressionStatement[40943-40966]:ExpressionStatement[40925-40948]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[40983-40989]:BreakStatement[40965-40971]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[41002-41010]:SwitchCase[40984-40992]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Strange Map type \"+rawClass.getName()+\": can not determine type parameters\");",
      "right" : "throw new IllegalArgumentException(\"Strange Map type \"+rawClass.getName()+\": can not determine type parameters\");",
      "info" : "ThrowStatement[41027-41140]:ThrowStatement[41009-41122]"
    }, {
      "left" : "return MapType.construct(rawClass, bindings, superClass, superInterfaces, kt, vt);",
      "right" : "return MapType.construct(rawClass, bindings, superClass, superInterfaces, kt, vt);",
      "info" : "ReturnStatement[41173-41255]:ReturnStatement[41155-41237]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41407-41944]:Block[41389-41926]"
    }, {
      "left" : "List<JavaType> typeParams = bindings.getTypeParameters();",
      "right" : "List<JavaType> typeParams = bindings.getTypeParameters();",
      "info" : "VariableDeclarationStatement[41417-41474]:VariableDeclarationStatement[41399-41456]"
    }, {
      "left" : "JavaType ct;",
      "right" : "JavaType ct;",
      "info" : "VariableDeclarationStatement[41522-41534]:VariableDeclarationStatement[41504-41516]"
    }, {
      "left" : "if (typeParams.isEmpty())",
      "right" : "if (typeParams.isEmpty())",
      "info" : "IfStatement[41543-41844]:IfStatement[41525-41826]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41569-41613]:Block[41551-41595]"
    }, {
      "left" : "ct = _unknownType();",
      "right" : "ct = _unknownType();",
      "info" : "ExpressionStatement[41583-41603]:ExpressionStatement[41565-41585]"
    }, {
      "left" : "if (typeParams.size() == 1)",
      "right" : "if (typeParams.size() == 1)",
      "info" : "IfStatement[41619-41844]:IfStatement[41601-41826]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41647-41694]:Block[41629-41676]"
    }, {
      "left" : "ct = typeParams.get(0);",
      "right" : "ct = typeParams.get(0);",
      "info" : "ExpressionStatement[41661-41684]:ExpressionStatement[41643-41666]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41700-41844]:Block[41682-41826]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Strange Collection type \"+rawClass.getName()+\": can not determine type parameters\");",
      "right" : "throw new IllegalArgumentException(\"Strange Collection type \"+rawClass.getName()+\": can not determine type parameters\");",
      "info" : "ThrowStatement[41714-41834]:ThrowStatement[41696-41816]"
    }, {
      "left" : "return CollectionType.construct(rawClass, bindings, superClass, superInterfaces, ct);",
      "right" : "return CollectionType.construct(rawClass, bindings, superClass, superInterfaces, ct);",
      "info" : "ReturnStatement[41853-41938]:ReturnStatement[41835-41920]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42089-42624]:Block[42071-42606]"
    }, {
      "left" : "List<JavaType> typeParams = bindings.getTypeParameters();",
      "right" : "List<JavaType> typeParams = bindings.getTypeParameters();",
      "info" : "VariableDeclarationStatement[42099-42156]:VariableDeclarationStatement[42081-42138]"
    }, {
      "left" : "JavaType ct;",
      "right" : "JavaType ct;",
      "info" : "VariableDeclarationStatement[42204-42216]:VariableDeclarationStatement[42186-42198]"
    }, {
      "left" : "if (typeParams.isEmpty())",
      "right" : "if (typeParams.isEmpty())",
      "info" : "IfStatement[42225-42525]:IfStatement[42207-42507]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42251-42295]:Block[42233-42277]"
    }, {
      "left" : "ct = _unknownType();",
      "right" : "ct = _unknownType();",
      "info" : "ExpressionStatement[42265-42285]:ExpressionStatement[42247-42267]"
    }, {
      "left" : "if (typeParams.size() == 1)",
      "right" : "if (typeParams.size() == 1)",
      "info" : "IfStatement[42301-42525]:IfStatement[42283-42507]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42329-42376]:Block[42311-42358]"
    }, {
      "left" : "ct = typeParams.get(0);",
      "right" : "ct = typeParams.get(0);",
      "info" : "ExpressionStatement[42343-42366]:ExpressionStatement[42325-42348]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42382-42525]:Block[42364-42507]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Strange Reference type \"+rawClass.getName()+\": can not determine type parameters\");",
      "right" : "throw new IllegalArgumentException(\"Strange Reference type \"+rawClass.getName()+\": can not determine type parameters\");",
      "info" : "ThrowStatement[42396-42515]:ThrowStatement[42378-42497]"
    }, {
      "left" : "return ReferenceType.construct(rawClass, bindings, superClass, superInterfaces, ct);",
      "right" : "return ReferenceType.construct(rawClass, bindings, superClass, superInterfaces, ct);",
      "info" : "ReturnStatement[42534-42618]:ReturnStatement[42516-42600]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43077-43339]:Block[43059-43321]"
    }, {
      "left" : "if (bindings.isEmpty())",
      "right" : "if (bindings.isEmpty())",
      "info" : "IfStatement[43087-43258]:IfStatement[43069-43240]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43111-43258]:Block[43093-43240]"
    }, {
      "left" : "JavaType result = _findWellKnownSimple(raw);",
      "right" : "JavaType result = _findWellKnownSimple(raw);",
      "info" : "VariableDeclarationStatement[43125-43169]:VariableDeclarationStatement[43107-43151]"
    }, {
      "left" : "if (result != null)",
      "right" : "if (result != null)",
      "info" : "IfStatement[43182-43248]:IfStatement[43164-43230]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43202-43248]:Block[43184-43230]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[43220-43234]:ReturnStatement[43202-43216]"
    }, {
      "left" : "return _newSimpleType(raw, bindings, superClass, superInterfaces);",
      "right" : "return _newSimpleType(raw, bindings, superClass, superInterfaces);",
      "info" : "ReturnStatement[43267-43333]:ReturnStatement[43249-43315]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43712-43794]:Block[43694-43776]"
    }, {
      "left" : "return new SimpleType(raw, bindings, superClass, superInterfaces);",
      "right" : "return new SimpleType(raw, bindings, superClass, superInterfaces);",
      "info" : "ReturnStatement[43722-43788]:ReturnStatement[43704-43770]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43834-44204]:Block[43816-44186]"
    }, {
      "left" : "return CORE_TYPE_OBJECT;",
      "right" : "return CORE_TYPE_OBJECT;",
      "info" : "ReturnStatement[44174-44198]:ReturnStatement[44156-44180]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44509-44896]:Block[44491-44878]"
    }, {
      "left" : "if (clz.isPrimitive())",
      "right" : "if (clz.isPrimitive())",
      "info" : "IfStatement[44519-44869]:IfStatement[44501-44851]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44542-44719]:Block[44524-44701]"
    }, {
      "left" : "if (clz == CLS_BOOL)",
      "right" : "if (clz == CLS_BOOL)",
      "info" : "IfStatement[44556-44599]:IfStatement[44538-44581]"
    }, {
      "left" : "return CORE_TYPE_BOOL;",
      "right" : "return CORE_TYPE_BOOL;",
      "info" : "ReturnStatement[44577-44599]:ReturnStatement[44559-44581]"
    }, {
      "left" : "if (clz == CLS_INT)",
      "right" : "if (clz == CLS_INT)",
      "info" : "IfStatement[44612-44653]:IfStatement[44594-44635]"
    }, {
      "left" : "return CORE_TYPE_INT;",
      "right" : "return CORE_TYPE_INT;",
      "info" : "ReturnStatement[44632-44653]:ReturnStatement[44614-44635]"
    }, {
      "left" : "if (clz == CLS_LONG)",
      "right" : "if (clz == CLS_LONG)",
      "info" : "IfStatement[44666-44709]:IfStatement[44648-44691]"
    }, {
      "left" : "return CORE_TYPE_LONG;",
      "right" : "return CORE_TYPE_LONG;",
      "info" : "ReturnStatement[44687-44709]:ReturnStatement[44669-44691]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44725-44869]:Block[44707-44851]"
    }, {
      "left" : "if (clz == CLS_STRING)",
      "right" : "if (clz == CLS_STRING)",
      "info" : "IfStatement[44739-44786]:IfStatement[44721-44768]"
    }, {
      "left" : "return CORE_TYPE_STRING;",
      "right" : "return CORE_TYPE_STRING;",
      "info" : "ReturnStatement[44762-44786]:ReturnStatement[44744-44768]"
    }, {
      "left" : "if (clz == CLS_OBJECT)",
      "right" : "if (clz == CLS_OBJECT)",
      "info" : "IfStatement[44799-44846]:IfStatement[44781-44828]"
    }, {
      "left" : "return CORE_TYPE_OBJECT;",
      "right" : "return CORE_TYPE_OBJECT;",
      "info" : "ReturnStatement[44822-44846]:ReturnStatement[44804-44828]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[44878-44890]:ReturnStatement[44860-44872]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45377-47449]:Block[45359-47431]"
    }, {
      "left" : "JavaType resultType;",
      "right" : "JavaType resultType;",
      "info" : "VariableDeclarationStatement[45387-45407]:VariableDeclarationStatement[45369-45389]"
    }, {
      "left" : "if (type instanceof Class<?>)",
      "right" : "if (type instanceof Class<?>)",
      "info" : "IfStatement[45442-46615]:IfStatement[45424-46597]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45472-45646]:Block[45454-45628]"
    }, {
      "left" : "resultType = _fromClass(context, (Class<?>) type, EMPTY_BINDINGS);",
      "right" : "resultType = _fromClass(context, (Class<?>) type, EMPTY_BINDINGS);",
      "info" : "ExpressionStatement[45570-45636]:ExpressionStatement[45552-45618]"
    }, {
      "left" : "if (type instanceof ParameterizedType)",
      "right" : "if (type instanceof ParameterizedType)",
      "info" : "IfStatement[45708-46615]:IfStatement[45690-46597]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45747-45844]:Block[45729-45826]"
    }, {
      "left" : "resultType = _fromParamType(context, (ParameterizedType) type, bindings);",
      "right" : "resultType = _fromParamType(context, (ParameterizedType) type, bindings);",
      "info" : "ExpressionStatement[45761-45834]:ExpressionStatement[45743-45816]"
    }, {
      "left" : "if (type instanceof JavaType)",
      "right" : "if (type instanceof JavaType)",
      "info" : "IfStatement[45858-46615]:IfStatement[45840-46597]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45888-46021]:Block[45870-46003]"
    }, {
      "left" : "return (JavaType) type;",
      "right" : "return (JavaType) type;",
      "info" : "ReturnStatement[45988-46011]:ReturnStatement[45970-45993]"
    }, {
      "left" : "if (type instanceof GenericArrayType)",
      "right" : "if (type instanceof GenericArrayType)",
      "info" : "IfStatement[46035-46615]:IfStatement[46017-46597]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46073-46169]:Block[46055-46151]"
    }, {
      "left" : "resultType = _fromArrayType(context, (GenericArrayType) type, bindings);",
      "right" : "resultType = _fromArrayType(context, (GenericArrayType) type, bindings);",
      "info" : "ExpressionStatement[46087-46159]:ExpressionStatement[46069-46141]"
    }, {
      "left" : "if (type instanceof TypeVariable<?>)",
      "right" : "if (type instanceof TypeVariable<?>)",
      "info" : "IfStatement[46183-46615]:IfStatement[46165-46597]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46220-46314]:Block[46202-46296]"
    }, {
      "left" : "resultType = _fromVariable(context, (TypeVariable<?>) type, bindings);",
      "right" : "resultType = _fromVariable(context, (TypeVariable<?>) type, bindings);",
      "info" : "ExpressionStatement[46234-46304]:ExpressionStatement[46216-46286]"
    }, {
      "left" : "if (type instanceof WildcardType)",
      "right" : "if (type instanceof WildcardType)",
      "info" : "IfStatement[46328-46615]:IfStatement[46310-46597]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46362-46453]:Block[46344-46435]"
    }, {
      "left" : "resultType = _fromWildcard(context, (WildcardType) type, bindings);",
      "right" : "resultType = _fromWildcard(context, (WildcardType) type, bindings);",
      "info" : "ExpressionStatement[46376-46443]:ExpressionStatement[46358-46425]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46459-46615]:Block[46441-46597]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Unrecognized Type: \"+((type == null) ? \"[null]\" : type.toString()));",
      "right" : "throw new IllegalArgumentException(\"Unrecognized Type: \"+((type == null) ? \"[null]\" : type.toString()));",
      "info" : "ThrowStatement[46501-46605]:ThrowStatement[46483-46587]"
    }, {
      "left" : "if (_modifiers != null)",
      "right" : "if (_modifiers != null)",
      "info" : "IfStatement[46804-47416]:IfStatement[46786-47398]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46828-47416]:Block[46810-47398]"
    }, {
      "left" : "TypeBindings b = resultType.getBindings();",
      "right" : "TypeBindings b = resultType.getBindings();",
      "info" : "VariableDeclarationStatement[46842-46884]:VariableDeclarationStatement[46824-46866]"
    }, {
      "left" : "if (b == null)",
      "right" : "if (b == null)",
      "info" : "IfStatement[46897-46963]:IfStatement[46879-46945]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46912-46963]:Block[46894-46945]"
    }, {
      "left" : "b = EMPTY_BINDINGS;",
      "right" : "b = EMPTY_BINDINGS;",
      "info" : "ExpressionStatement[46930-46949]:ExpressionStatement[46912-46931]"
    }, {
      "left" : "for (TypeModifier mod : _modifiers)",
      "right" : "for (TypeModifier mod : _modifiers)",
      "info" : "EnhancedForStatement[46976-47406]:EnhancedForStatement[46958-47388]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47012-47406]:Block[46994-47388]"
    }, {
      "left" : "JavaType t = mod.modifyType(resultType, type, b, this);",
      "right" : "JavaType t = mod.modifyType(resultType, type, b, this);",
      "info" : "VariableDeclarationStatement[47030-47085]:VariableDeclarationStatement[47012-47067]"
    }, {
      "left" : "if (t == null)",
      "right" : "if (t == null)",
      "info" : "IfStatement[47102-47360]:IfStatement[47084-47342]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47117-47360]:Block[47099-47342]"
    }, {
      "left" : "throw new IllegalStateException(String.format(\n                            \"TypeModifier %s (of type %s) return null for type %s\",\n                            mod, mod.getClass().getName(), resultType));",
      "right" : "throw new IllegalStateException(String.format(\n                            \"TypeModifier %s (of type %s) return null for type %s\",\n                            mod, mod.getClass().getName(), resultType));",
      "info" : "ThrowStatement[47139-47342]:ThrowStatement[47121-47324]"
    }, {
      "left" : "resultType = t;",
      "right" : "resultType = t;",
      "info" : "ExpressionStatement[47377-47392]:ExpressionStatement[47359-47374]"
    }, {
      "left" : "return resultType;",
      "right" : "return resultType;",
      "info" : "ReturnStatement[47425-47443]:ReturnStatement[47407-47425]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47677-51361]:Block[47659-51343]"
    }, {
      "left" : "JavaType result = _findWellKnownSimple(rawType);",
      "right" : "JavaType result = _findWellKnownSimple(rawType);",
      "info" : "VariableDeclarationStatement[47754-47802]:VariableDeclarationStatement[47736-47784]"
    }, {
      "left" : "if (result != null)",
      "right" : "if (result != null)",
      "info" : "IfStatement[47811-47869]:IfStatement[47793-47851]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47831-47869]:Block[47813-47851]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[47845-47859]:ReturnStatement[47827-47841]"
    }, {
      "left" : "final Object key;",
      "right" : "final Object key;",
      "info" : "VariableDeclarationStatement[47948-47965]:VariableDeclarationStatement[47930-47947]"
    }, {
      "left" : "if ((bindings == null) || bindings.isEmpty())",
      "right" : "if ((bindings == null) || bindings.isEmpty())",
      "info" : "IfStatement[47974-48118]:IfStatement[47956-48100]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48020-48058]:Block[48002-48040]"
    }, {
      "left" : "key = rawType;",
      "right" : "key = rawType;",
      "info" : "ExpressionStatement[48034-48048]:ExpressionStatement[48016-48030]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48064-48118]:Block[48046-48100]"
    }, {
      "left" : "key = bindings.asKey(rawType);",
      "right" : "key = bindings.asKey(rawType);",
      "info" : "ExpressionStatement[48078-48108]:ExpressionStatement[48060-48090]"
    }, {
      "left" : "result = _typeCache.get(key);",
      "right" : "result = _typeCache.get(key);",
      "info" : "ExpressionStatement[48127-48156]:ExpressionStatement[48109-48138]"
    }, {
      "left" : "if (result != null)",
      "right" : "if (result != null)",
      "info" : "IfStatement[48195-48253]:IfStatement[48177-48235]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48215-48253]:Block[48197-48235]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[48229-48243]:ReturnStatement[48211-48225]"
    }, {
      "left" : "if (context == null)",
      "right" : "if (context == null)",
      "info" : "IfStatement[48314-48885]:IfStatement[48296-48867]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48335-48393]:Block[48317-48375]"
    }, {
      "left" : "context = new ClassStack(rawType);",
      "right" : "context = new ClassStack(rawType);",
      "info" : "ExpressionStatement[48349-48383]:ExpressionStatement[48331-48365]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48399-48885]:Block[48381-48867]"
    }, {
      "left" : "ClassStack prev = context.find(rawType);",
      "right" : "ClassStack prev = context.find(rawType);",
      "info" : "VariableDeclarationStatement[48413-48453]:VariableDeclarationStatement[48395-48435]"
    }, {
      "left" : "if (prev != null)",
      "right" : "if (prev != null)",
      "info" : "IfStatement[48466-48746]:IfStatement[48448-48728]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48484-48746]:Block[48466-48728]"
    }, {
      "left" : "ResolvedRecursiveType selfRef = new ResolvedRecursiveType(rawType, EMPTY_BINDINGS);",
      "right" : "ResolvedRecursiveType selfRef = new ResolvedRecursiveType(rawType, EMPTY_BINDINGS);",
      "info" : "VariableDeclarationStatement[48569-48652]:VariableDeclarationStatement[48551-48634]"
    }, {
      "left" : "prev.addSelfReference(selfRef);",
      "right" : "prev.addSelfReference(selfRef);",
      "info" : "ExpressionStatement[48669-48700]:ExpressionStatement[48651-48682]"
    }, {
      "left" : "return selfRef;",
      "right" : "return selfRef;",
      "info" : "ReturnStatement[48717-48732]:ReturnStatement[48699-48714]"
    }, {
      "left" : "context = context.child(rawType);",
      "right" : "context = context.child(rawType);",
      "info" : "ExpressionStatement[48842-48875]:ExpressionStatement[48824-48857]"
    }, {
      "left" : "if (rawType.isArray())",
      "right" : "if (rawType.isArray())",
      "info" : "IfStatement[48939-50973]:IfStatement[48921-50955]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48962-49102]:Block[48944-49084]"
    }, {
      "left" : "result = ArrayType.construct(_fromAny(context, rawType.getComponentType(), bindings),\n                    bindings);",
      "right" : "result = ArrayType.construct(_fromAny(context, rawType.getComponentType(), bindings),\n                    bindings);",
      "info" : "ExpressionStatement[48976-49092]:ExpressionStatement[48958-49074]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49108-50973]:Block[49090-50955]"
    }, {
      "left" : "JavaType superClass;",
      "right" : "JavaType superClass;",
      "info" : "VariableDeclarationStatement[49215-49235]:VariableDeclarationStatement[49197-49217]"
    }, {
      "left" : "JavaType[] superInterfaces;",
      "right" : "JavaType[] superInterfaces;",
      "info" : "VariableDeclarationStatement[49248-49275]:VariableDeclarationStatement[49230-49257]"
    }, {
      "left" : "if (rawType.isInterface())",
      "right" : "if (rawType.isInterface())",
      "info" : "IfStatement[49289-49722]:IfStatement[49271-49704]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49316-49453]:Block[49298-49435]"
    }, {
      "left" : "superClass = null;",
      "right" : "superClass = null;",
      "info" : "ExpressionStatement[49334-49352]:ExpressionStatement[49316-49334]"
    }, {
      "left" : "superInterfaces = _resolveSuperInterfaces(context, rawType, bindings);",
      "right" : "superInterfaces = _resolveSuperInterfaces(context, rawType, bindings);",
      "info" : "ExpressionStatement[49369-49439]:ExpressionStatement[49351-49421]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49459-49722]:Block[49441-49704]"
    }, {
      "left" : "superClass = _resolveSuperClass(context, rawType, bindings);",
      "right" : "superClass = _resolveSuperClass(context, rawType, bindings);",
      "info" : "ExpressionStatement[49561-49621]:ExpressionStatement[49543-49603]"
    }, {
      "left" : "superInterfaces = _resolveSuperInterfaces(context, rawType, bindings);",
      "right" : "superInterfaces = _resolveSuperInterfaces(context, rawType, bindings);",
      "info" : "ExpressionStatement[49638-49708]:ExpressionStatement[49620-49690]"
    }, {
      "left" : "if (rawType == Properties.class)",
      "right" : "if (rawType == Properties.class)",
      "info" : "IfStatement[49831-50326]:IfStatement[49813-50308]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49864-50031]:Block[49846-50013]"
    }, {
      "left" : "result = MapType.construct(rawType, bindings, superClass, superInterfaces,\n                        CORE_TYPE_STRING, CORE_TYPE_STRING);",
      "right" : "result = MapType.construct(rawType, bindings, superClass, superInterfaces,\n                        CORE_TYPE_STRING, CORE_TYPE_STRING);",
      "info" : "ExpressionStatement[49882-50017]:ExpressionStatement[49864-49999]"
    }, {
      "left" : "if (superClass != null)",
      "right" : "if (superClass != null)",
      "info" : "IfStatement[50195-50326]:IfStatement[50177-50308]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50219-50326]:Block[50201-50308]"
    }, {
      "left" : "result = superClass.refine(rawType, bindings, superClass, superInterfaces);",
      "right" : "result = superClass.refine(rawType, bindings, superClass, superInterfaces);",
      "info" : "ExpressionStatement[50237-50312]:ExpressionStatement[50219-50294]"
    }, {
      "left" : "if (result == null)",
      "right" : "if (result == null)",
      "info" : "IfStatement[50424-50963]:IfStatement[50406-50945]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50444-50963]:Block[50426-50945]"
    }, {
      "left" : "result = _fromWellKnownClass(context, rawType, bindings, superClass, superInterfaces);",
      "right" : "result = _fromWellKnownClass(context, rawType, bindings, superClass, superInterfaces);",
      "info" : "ExpressionStatement[50462-50548]:ExpressionStatement[50444-50530]"
    }, {
      "left" : "if (result == null)",
      "right" : "if (result == null)",
      "info" : "IfStatement[50566-50949]:IfStatement[50548-50931]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50586-50949]:Block[50568-50931]"
    }, {
      "left" : "result = _fromWellKnownInterface(context, rawType, bindings, superClass, superInterfaces);",
      "right" : "result = _fromWellKnownInterface(context, rawType, bindings, superClass, superInterfaces);",
      "info" : "ExpressionStatement[50608-50698]:ExpressionStatement[50590-50680]"
    }, {
      "left" : "if (result == null)",
      "right" : "if (result == null)",
      "info" : "IfStatement[50719-50931]:IfStatement[50701-50913]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50739-50931]:Block[50721-50913]"
    }, {
      "left" : "result = _newSimpleType(rawType, bindings, superClass, superInterfaces);",
      "right" : "result = _newSimpleType(rawType, bindings, superClass, superInterfaces);",
      "info" : "ExpressionStatement[50837-50909]:ExpressionStatement[50819-50891]"
    }, {
      "left" : "context.resolveSelfReferences(result);",
      "right" : "context.resolveSelfReferences(result);",
      "info" : "ExpressionStatement[50982-51020]:ExpressionStatement[50964-51002]"
    }, {
      "left" : "if (!result.hasHandlers())",
      "right" : "if (!result.hasHandlers())",
      "info" : "IfStatement[51223-51332]:IfStatement[51205-51314]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51250-51332]:Block[51232-51314]"
    }, {
      "left" : "_typeCache.putIfAbsent(key, result);",
      "right" : "_typeCache.putIfAbsent(key, result);",
      "info" : "ExpressionStatement[51264-51300]:ExpressionStatement[51246-51282]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[51341-51355]:ReturnStatement[51323-51337]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51476-51669]:Block[51458-51651]"
    }, {
      "left" : "Type parent = ClassUtil.getGenericSuperclass(rawType);",
      "right" : "Type parent = ClassUtil.getGenericSuperclass(rawType);",
      "info" : "VariableDeclarationStatement[51486-51540]:VariableDeclarationStatement[51468-51522]"
    }, {
      "left" : "if (parent == null)",
      "right" : "if (parent == null)",
      "info" : "IfStatement[51549-51605]:IfStatement[51531-51587]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51569-51605]:Block[51551-51587]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[51583-51595]:ReturnStatement[51565-51577]"
    }, {
      "left" : "return _fromAny(context, parent, parentBindings);",
      "right" : "return _fromAny(context, parent, parentBindings);",
      "info" : "ReturnStatement[51614-51663]:ReturnStatement[51596-51645]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51791-52208]:Block[51773-52190]"
    }, {
      "left" : "Type[] types = ClassUtil.getGenericInterfaces(rawType);",
      "right" : "Type[] types = ClassUtil.getGenericInterfaces(rawType);",
      "info" : "VariableDeclarationStatement[51801-51856]:VariableDeclarationStatement[51783-51838]"
    }, {
      "left" : "if (types == null || types.length == 0)",
      "right" : "if (types == null || types.length == 0)",
      "info" : "IfStatement[51865-51945]:IfStatement[51847-51927]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51905-51945]:Block[51887-51927]"
    }, {
      "left" : "return NO_TYPES;",
      "right" : "return NO_TYPES;",
      "info" : "ReturnStatement[51919-51935]:ReturnStatement[51901-51917]"
    }, {
      "left" : "int len = types.length;",
      "right" : "int len = types.length;",
      "info" : "VariableDeclarationStatement[51954-51977]:VariableDeclarationStatement[51936-51959]"
    }, {
      "left" : "JavaType[] resolved = new JavaType[len];",
      "right" : "JavaType[] resolved = new JavaType[len];",
      "info" : "VariableDeclarationStatement[51986-52026]:VariableDeclarationStatement[51968-52008]"
    }, {
      "left" : "for (int i = 0; i < len; ++i)",
      "right" : "for (int i = 0; i < len; ++i)",
      "info" : "ForStatement[52035-52177]:ForStatement[52017-52159]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52065-52177]:Block[52047-52159]"
    }, {
      "left" : "Type type = types[i];",
      "right" : "Type type = types[i];",
      "info" : "VariableDeclarationStatement[52079-52100]:VariableDeclarationStatement[52061-52082]"
    }, {
      "left" : "resolved[i] = _fromAny(context, type, parentBindings);",
      "right" : "resolved[i] = _fromAny(context, type, parentBindings);",
      "info" : "ExpressionStatement[52113-52167]:ExpressionStatement[52095-52149]"
    }, {
      "left" : "return resolved;",
      "right" : "return resolved;",
      "info" : "ReturnStatement[52186-52202]:ReturnStatement[52168-52184]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52605-53621]:Block[52587-53603]"
    }, {
      "left" : "if (bindings == null)",
      "right" : "if (bindings == null)",
      "info" : "IfStatement[52615-52701]:IfStatement[52597-52683]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52637-52701]:Block[52619-52683]"
    }, {
      "left" : "bindings = TypeBindings.emptyBindings();",
      "right" : "bindings = TypeBindings.emptyBindings();",
      "info" : "ExpressionStatement[52651-52691]:ExpressionStatement[52633-52673]"
    }, {
      "left" : "if (rawType == Map.class)",
      "right" : "if (rawType == Map.class)",
      "info" : "IfStatement[52800-52914]:IfStatement[52782-52896]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52826-52914]:Block[52808-52896]"
    }, {
      "left" : "return _mapType(rawType, bindings, superClass, superInterfaces);",
      "right" : "return _mapType(rawType, bindings, superClass, superInterfaces);",
      "info" : "ReturnStatement[52840-52904]:ReturnStatement[52822-52886]"
    }, {
      "left" : "if (rawType == Collection.class)",
      "right" : "if (rawType == Collection.class)",
      "info" : "IfStatement[52923-53051]:IfStatement[52905-53033]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52956-53051]:Block[52938-53033]"
    }, {
      "left" : "return _collectionType(rawType, bindings, superClass, superInterfaces);",
      "right" : "return _collectionType(rawType, bindings, superClass, superInterfaces);",
      "info" : "ReturnStatement[52970-53041]:ReturnStatement[52952-53023]"
    }, {
      "left" : "if (rawType == AtomicReference.class)",
      "right" : "if (rawType == AtomicReference.class)",
      "info" : "IfStatement[53106-53238]:IfStatement[53088-53220]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53144-53238]:Block[53126-53220]"
    }, {
      "left" : "return _referenceType(rawType, bindings, superClass, superInterfaces);",
      "right" : "return _referenceType(rawType, bindings, superClass, superInterfaces);",
      "info" : "ReturnStatement[53158-53228]:ReturnStatement[53140-53210]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[53603-53615]:ReturnStatement[53585-53597]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53796-54233]:Block[53778-54215]"
    }, {
      "left" : "final int intCount = superInterfaces.length;",
      "right" : "final int intCount = superInterfaces.length;",
      "info" : "VariableDeclarationStatement[53922-53966]:VariableDeclarationStatement[53904-53948]"
    }, {
      "left" : "for (int i = 0; i < intCount; ++i)",
      "right" : "for (int i = 0; i < intCount; ++i)",
      "info" : "ForStatement[53976-54206]:ForStatement[53958-54188]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54011-54206]:Block[53993-54188]"
    }, {
      "left" : "JavaType result = superInterfaces[i].refine(rawType, bindings, superClass, superInterfaces);",
      "right" : "JavaType result = superInterfaces[i].refine(rawType, bindings, superClass, superInterfaces);",
      "info" : "VariableDeclarationStatement[54025-54117]:VariableDeclarationStatement[54007-54099]"
    }, {
      "left" : "if (result != null)",
      "right" : "if (result != null)",
      "info" : "IfStatement[54130-54196]:IfStatement[54112-54178]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54150-54196]:Block[54132-54178]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[54168-54182]:ReturnStatement[54150-54164]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[54215-54227]:ReturnStatement[54197-54209]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54475-55832]:Block[54457-55814]"
    }, {
      "left" : "Class<?> rawType = (Class<?>) ptype.getRawType();",
      "right" : "Class<?> rawType = (Class<?>) ptype.getRawType();",
      "info" : "VariableDeclarationStatement[54562-54611]:VariableDeclarationStatement[54544-54593]"
    }, {
      "left" : "if (rawType == CLS_ENUM)",
      "right" : "if (rawType == CLS_ENUM)",
      "info" : "IfStatement[54759-54830]:IfStatement[54741-54812]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54784-54830]:Block[54766-54812]"
    }, {
      "left" : "return CORE_TYPE_ENUM;",
      "right" : "return CORE_TYPE_ENUM;",
      "info" : "ReturnStatement[54798-54820]:ReturnStatement[54780-54802]"
    }, {
      "left" : "if (rawType == CLS_COMPARABLE)",
      "right" : "if (rawType == CLS_COMPARABLE)",
      "info" : "IfStatement[54839-54922]:IfStatement[54821-54904]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54870-54922]:Block[54852-54904]"
    }, {
      "left" : "return CORE_TYPE_COMPARABLE;",
      "right" : "return CORE_TYPE_COMPARABLE;",
      "info" : "ReturnStatement[54884-54912]:ReturnStatement[54866-54894]"
    }, {
      "left" : "if (rawType == CLS_CLASS)",
      "right" : "if (rawType == CLS_CLASS)",
      "info" : "IfStatement[54931-55004]:IfStatement[54913-54986]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54957-55004]:Block[54939-54986]"
    }, {
      "left" : "return CORE_TYPE_CLASS;",
      "right" : "return CORE_TYPE_CLASS;",
      "info" : "ReturnStatement[54971-54994]:ReturnStatement[54953-54976]"
    }, {
      "left" : "Type[] args = ptype.getActualTypeArguments();",
      "right" : "Type[] args = ptype.getActualTypeArguments();",
      "info" : "VariableDeclarationStatement[55274-55319]:VariableDeclarationStatement[55256-55301]"
    }, {
      "left" : "int paramCount = (args == null) ? 0 : args.length;",
      "right" : "int paramCount = (args == null) ? 0 : args.length;",
      "info" : "VariableDeclarationStatement[55328-55378]:VariableDeclarationStatement[55310-55360]"
    }, {
      "left" : "TypeBindings newBindings;",
      "right" : "TypeBindings newBindings;",
      "info" : "VariableDeclarationStatement[55387-55412]:VariableDeclarationStatement[55369-55394]"
    }, {
      "left" : "if (paramCount == 0)",
      "right" : "if (paramCount == 0)",
      "info" : "IfStatement[55430-55768]:IfStatement[55412-55750]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55451-55504]:Block[55433-55486]"
    }, {
      "left" : "newBindings = EMPTY_BINDINGS;",
      "right" : "newBindings = EMPTY_BINDINGS;",
      "info" : "ExpressionStatement[55465-55494]:ExpressionStatement[55447-55476]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55510-55768]:Block[55492-55750]"
    }, {
      "left" : "JavaType[] pt = new JavaType[paramCount];",
      "right" : "JavaType[] pt = new JavaType[paramCount];",
      "info" : "VariableDeclarationStatement[55524-55565]:VariableDeclarationStatement[55506-55547]"
    }, {
      "left" : "for (int i = 0; i < paramCount; ++i)",
      "right" : "for (int i = 0; i < paramCount; ++i)",
      "info" : "ForStatement[55578-55698]:ForStatement[55560-55680]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55615-55698]:Block[55597-55680]"
    }, {
      "left" : "pt[i] = _fromAny(context, args[i], parentBindings);",
      "right" : "pt[i] = _fromAny(context, args[i], parentBindings);",
      "info" : "ExpressionStatement[55633-55684]:ExpressionStatement[55615-55666]"
    }, {
      "left" : "newBindings = TypeBindings.create(rawType, pt);",
      "right" : "newBindings = TypeBindings.create(rawType, pt);",
      "info" : "ExpressionStatement[55711-55758]:ExpressionStatement[55693-55740]"
    }, {
      "left" : "return _fromClass(context, rawType, newBindings);",
      "right" : "return _fromClass(context, rawType, newBindings);",
      "info" : "ReturnStatement[55777-55826]:ReturnStatement[55759-55808]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55942-56100]:Block[55924-56082]"
    }, {
      "left" : "JavaType elementType = _fromAny(context, type.getGenericComponentType(), bindings);",
      "right" : "JavaType elementType = _fromAny(context, type.getGenericComponentType(), bindings);",
      "info" : "VariableDeclarationStatement[55952-56035]:VariableDeclarationStatement[55934-56017]"
    }, {
      "left" : "return ArrayType.construct(elementType, bindings);",
      "right" : "return ArrayType.construct(elementType, bindings);",
      "info" : "ReturnStatement[56044-56094]:ReturnStatement[56026-56076]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56207-56826]:Block[56189-56808]"
    }, {
      "left" : "final String name = var.getName();",
      "right" : "final String name = var.getName();",
      "info" : "VariableDeclarationStatement[56265-56299]:VariableDeclarationStatement[56247-56281]"
    }, {
      "left" : "JavaType type = bindings.findBoundType(name);",
      "right" : "JavaType type = bindings.findBoundType(name);",
      "info" : "VariableDeclarationStatement[56308-56353]:VariableDeclarationStatement[56290-56335]"
    }, {
      "left" : "if (type != null)",
      "right" : "if (type != null)",
      "info" : "IfStatement[56362-56416]:IfStatement[56344-56398]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56380-56416]:Block[56362-56398]"
    }, {
      "left" : "return type;",
      "right" : "return type;",
      "info" : "ReturnStatement[56394-56406]:ReturnStatement[56376-56388]"
    }, {
      "left" : "if (bindings.hasUnbound(name))",
      "right" : "if (bindings.hasUnbound(name))",
      "info" : "IfStatement[56589-56668]:IfStatement[56571-56650]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56620-56668]:Block[56602-56650]"
    }, {
      "left" : "return CORE_TYPE_OBJECT;",
      "right" : "return CORE_TYPE_OBJECT;",
      "info" : "ReturnStatement[56634-56658]:ReturnStatement[56616-56640]"
    }, {
      "left" : "bindings = bindings.withUnboundVariable(name);",
      "right" : "bindings = bindings.withUnboundVariable(name);",
      "info" : "ExpressionStatement[56677-56723]:ExpressionStatement[56659-56705]"
    }, {
      "left" : "Type[] bounds = var.getBounds();",
      "right" : "Type[] bounds = var.getBounds();",
      "info" : "VariableDeclarationStatement[56733-56765]:VariableDeclarationStatement[56715-56747]"
    }, {
      "left" : "return _fromAny(context, bounds[0], bindings);",
      "right" : "return _fromAny(context, bounds[0], bindings);",
      "info" : "ReturnStatement[56774-56820]:ReturnStatement[56756-56802]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56931-57334]:Block[56913-57316]"
    }, {
      "left" : "return _fromAny(context, type.getUpperBounds()[0], bindings);",
      "right" : "return _fromAny(context, type.getUpperBounds()[0], bindings);",
      "info" : "ReturnStatement[57267-57328]:ReturnStatement[57249-57310]"
    } ]
  },
  "interFileMappings" : { }
}