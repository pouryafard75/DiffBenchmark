{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "private final AbstractCompiler compiler;",
      "right" : "private final AbstractCompiler compiler;",
      "info" : "FieldDeclaration[2483-2523]:FieldDeclaration[2483-2523]"
    }, {
      "left" : "private final boolean assertOnChange;",
      "right" : "private final boolean assertOnChange;",
      "info" : "FieldDeclaration[2526-2563]:FieldDeclaration[2526-2563]"
    }, {
      "left" : "private static final boolean CONVERT_WHILE_TO_FOR = true;",
      "right" : "private static final boolean CONVERT_WHILE_TO_FOR = true;",
      "info" : "FieldDeclaration[2566-2623]:FieldDeclaration[2566-2623]"
    }, {
      "left" : "static final boolean MAKE_LOCAL_NAMES_UNIQUE = true;",
      "right" : "static final boolean MAKE_LOCAL_NAMES_UNIQUE = true;",
      "info" : "FieldDeclaration[2626-2678]:FieldDeclaration[2626-2678]"
    }, {
      "left" : "Normalize(AbstractCompiler compiler, boolean assertOnChange)",
      "right" : "Normalize(AbstractCompiler compiler, boolean assertOnChange)",
      "info" : "MethodDeclaration[2682-2820]:MethodDeclaration[2682-2820]"
    }, {
      "left" : "private void reportCodeChange(String changeDescription)",
      "right" : "private void reportCodeChange(String changeDescription)",
      "info" : "MethodDeclaration[2824-3057]:MethodDeclaration[2824-3057]"
    }, {
      "left" : "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent)",
      "right" : "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[3524-3672]:MethodDeclaration[3524-3672]"
    }, {
      "left" : "PropogateConstantAnnotations",
      "right" : "PropogateConstantAnnotations",
      "info" : "TypeDeclaration[3676-5359]:TypeDeclaration[3676-5359]"
    }, {
      "left" : "private final AbstractCompiler compiler;",
      "right" : "private final AbstractCompiler compiler;",
      "info" : "FieldDeclaration[3801-3841]:FieldDeclaration[3801-3841]"
    }, {
      "left" : "private final boolean assertOnChange;",
      "right" : "private final boolean assertOnChange;",
      "info" : "FieldDeclaration[3846-3883]:FieldDeclaration[3846-3883]"
    }, {
      "left" : "public PropogateConstantAnnotations(\n        AbstractCompiler compiler, boolean forbidChanges)",
      "right" : "public PropogateConstantAnnotations(\n        AbstractCompiler compiler, boolean forbidChanges)",
      "info" : "MethodDeclaration[3889-4066]:MethodDeclaration[3889-4066]"
    }, {
      "left" : "public void process(Node externs, Node root)",
      "right" : "public void process(Node externs, Node root)",
      "info" : "MethodDeclaration[4072-4208]:MethodDeclaration[4072-4208]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[4214-5355]:MethodDeclaration[4214-5355]"
    }, {
      "left" : "VerifyConstants",
      "right" : "VerifyConstants",
      "info" : "TypeDeclaration[5363-7826]:TypeDeclaration[5363-7826]"
    }, {
      "left" : "final private AbstractCompiler compiler;",
      "right" : "final private AbstractCompiler compiler;",
      "info" : "FieldDeclaration[5552-5592]:FieldDeclaration[5552-5592]"
    }, {
      "left" : "final private boolean checkUserDeclarations;",
      "right" : "final private boolean checkUserDeclarations;",
      "info" : "FieldDeclaration[5597-5641]:FieldDeclaration[5597-5641]"
    }, {
      "left" : "VerifyConstants(AbstractCompiler compiler, boolean checkUserDeclarations)",
      "right" : "VerifyConstants(AbstractCompiler compiler, boolean checkUserDeclarations)",
      "info" : "MethodDeclaration[5647-5818]:MethodDeclaration[5647-5818]"
    }, {
      "left" : "public void process(Node externs, Node root)",
      "right" : "public void process(Node externs, Node root)",
      "info" : "MethodDeclaration[5824-6150]:MethodDeclaration[5824-6150]"
    }, {
      "left" : "private Map<String,Boolean> constantMap = Maps.newHashMap();",
      "right" : "private Map<String,Boolean> constantMap = Maps.newHashMap();",
      "info" : "FieldDeclaration[6156-6216]:FieldDeclaration[6156-6216]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[6222-7822]:MethodDeclaration[6222-7822]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[7830-8249]:MethodDeclaration[7830-8249]"
    }, {
      "left" : "private void doStatementNormalizations(NodeTraversal t, Node n, Node parent)",
      "right" : "private void doStatementNormalizations(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[8253-9017]:MethodDeclaration[8253-9017]"
    }, {
      "left" : "private void normalizeLabels(Node n)",
      "right" : "private void normalizeLabels(Node n)",
      "info" : "MethodDeclaration[9110-9848]:MethodDeclaration[9110-9848]"
    }, {
      "left" : "private void extractForInitializer(\n      Node n, Node before, Node beforeParent)",
      "right" : "private void extractForInitializer(\n      Node n, Node before, Node beforeParent)",
      "info" : "MethodDeclaration[9852-11458]:MethodDeclaration[9852-11458]"
    }, {
      "left" : "private void splitVarDeclarations(Node n)",
      "right" : "private void splitVarDeclarations(Node n)",
      "info" : "MethodDeclaration[11463-12266]:MethodDeclaration[11463-12266]"
    }, {
      "left" : "private void moveNamedFunctions(Node functionBody)",
      "right" : "private void moveNamedFunctions(Node functionBody)",
      "info" : "MethodDeclaration[12270-13696]:MethodDeclaration[12270-13696]"
    }, {
      "left" : "private Node addToFront(Node parent, Node newChild, Node after)",
      "right" : "private Node addToFront(Node parent, Node newChild, Node after)",
      "info" : "MethodDeclaration[13700-14114]:MethodDeclaration[13700-14114]"
    }, {
      "left" : "private void removeDuplicateDeclarations(Node root)",
      "right" : "private void removeDuplicateDeclarations(Node root)",
      "info" : "MethodDeclaration[14118-14489]:MethodDeclaration[14118-14489]"
    }, {
      "left" : "DuplicateDeclarationHandler",
      "right" : "DuplicateDeclarationHandler",
      "info" : "TypeDeclaration[14493-17225]:TypeDeclaration[14493-17225]"
    }, {
      "left" : "public void onRedeclaration(\n        Scope s, String name, Node n, Node parent, Node gramps,\n        Node nodeWithLineNumber)",
      "right" : "public void onRedeclaration(\n        Scope s, String name, Node n, Node parent, Node gramps,\n        Node nodeWithLineNumber)",
      "info" : "MethodDeclaration[14669-17220]:MethodDeclaration[14669-17220]"
    }, {
      "left" : "ScopeTicklingCallback",
      "right" : "ScopeTicklingCallback",
      "info" : "TypeDeclaration[17229-17894]:TypeDeclaration[17229-17894]"
    }, {
      "left" : "public void enterScope(NodeTraversal t)",
      "right" : "public void enterScope(NodeTraversal t)",
      "info" : "MethodDeclaration[17388-17558]:MethodDeclaration[17388-17558]"
    }, {
      "left" : "public void exitScope(NodeTraversal t)",
      "right" : "public void exitScope(NodeTraversal t)",
      "info" : "MethodDeclaration[17564-17648]:MethodDeclaration[17564-17648]"
    }, {
      "left" : "public boolean shouldTraverse(\n        NodeTraversal nodeTraversal, Node n, Node parent)",
      "right" : "public boolean shouldTraverse(\n        NodeTraversal nodeTraversal, Node n, Node parent)",
      "info" : "MethodDeclaration[17654-17783]:MethodDeclaration[17654-17783]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[17789-17890]:MethodDeclaration[17789-17890]"
    } ],
    "mappings" : [
 {
      "left" : "Normalize",
      "right" : "Normalize",
      "info" : "SimpleName[2682-2691]:SimpleName[2682-2691]"
    }, {
      "left" : "AbstractCompiler compiler",
      "right" : "AbstractCompiler compiler",
      "info" : "SingleVariableDeclaration[2692-2717]:SingleVariableDeclaration[2692-2717]"
    }, {
      "left" : "boolean assertOnChange",
      "right" : "boolean assertOnChange",
      "info" : "SingleVariableDeclaration[2719-2741]:SingleVariableDeclaration[2719-2741]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2743-2820]:Block[2743-2820]"
    }, {
      "left" : "this.compiler = compiler;",
      "right" : "this.compiler = compiler;",
      "info" : "ExpressionStatement[2749-2774]:ExpressionStatement[2749-2774]"
    }, {
      "left" : "this.assertOnChange = assertOnChange;",
      "right" : "this.assertOnChange = assertOnChange;",
      "info" : "ExpressionStatement[2779-2816]:ExpressionStatement[2779-2816]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[2824-2831]:Modifier[2824-2831]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[2832-2836]:PrimitiveType[2832-2836]"
    }, {
      "left" : "reportCodeChange",
      "right" : "reportCodeChange",
      "info" : "SimpleName[2837-2853]:SimpleName[2837-2853]"
    }, {
      "left" : "String changeDescription",
      "right" : "String changeDescription",
      "info" : "SingleVariableDeclaration[2854-2878]:SingleVariableDeclaration[2854-2878]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2880-3057]:Block[2880-3057]"
    }, {
      "left" : "if (assertOnChange)",
      "right" : "if (assertOnChange)",
      "info" : "IfStatement[2886-3020]:IfStatement[2886-3020]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2906-3020]:Block[2906-3020]"
    }, {
      "left" : "throw new IllegalStateException(\n          \"Normalize constraints violated:\\n\" + changeDescription);",
      "right" : "throw new IllegalStateException(\n          \"Normalize constraints violated:\\n\" + changeDescription);",
      "info" : "ThrowStatement[2914-3014]:ThrowStatement[2914-3014]"
    }, {
      "left" : "compiler.reportCodeChange();",
      "right" : "compiler.reportCodeChange();",
      "info" : "ExpressionStatement[3025-3053]:ExpressionStatement[3025-3053]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[3524-3533]:MarkerAnnotation[3524-3533]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3536-3542]:Modifier[3536-3542]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[3543-3550]:PrimitiveType[3543-3550]"
    }, {
      "left" : "shouldTraverse",
      "right" : "shouldTraverse",
      "info" : "SimpleName[3551-3565]:SimpleName[3551-3565]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[3566-3581]:SingleVariableDeclaration[3566-3581]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[3583-3589]:SingleVariableDeclaration[3583-3589]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[3591-3602]:SingleVariableDeclaration[3591-3602]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3604-3672]:Block[3604-3672]"
    }, {
      "left" : "doStatementNormalizations(t, n, parent);",
      "right" : "doStatementNormalizations(t, n, parent);",
      "info" : "ExpressionStatement[3610-3650]:ExpressionStatement[3610-3650]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[3656-3668]:ReturnStatement[3656-3668]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3676-3682]:Modifier[3676-3682]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[3683-3689]:Modifier[3683-3689]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[3690-3695]:TYPE_DECLARATION_KIND[3690-3695]"
    }, {
      "left" : "PropogateConstantAnnotations",
      "right" : "PropogateConstantAnnotations",
      "info" : "SimpleName[3696-3724]:SimpleName[3696-3724]"
    }, {
      "left" : "AbstractPostOrderCallback",
      "right" : "AbstractPostOrderCallback",
      "info" : "SimpleType[3739-3764]:SimpleType[3739-3764]"
    }, {
      "left" : "CompilerPass",
      "right" : "CompilerPass",
      "info" : "SimpleType[3782-3794]:SimpleType[3782-3794]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3889-3895]:Modifier[3889-3895]"
    }, {
      "left" : "PropogateConstantAnnotations",
      "right" : "PropogateConstantAnnotations",
      "info" : "SimpleName[3896-3924]:SimpleName[3896-3924]"
    }, {
      "left" : "AbstractCompiler compiler",
      "right" : "AbstractCompiler compiler",
      "info" : "SingleVariableDeclaration[3934-3959]:SingleVariableDeclaration[3934-3959]"
    }, {
      "left" : "boolean forbidChanges",
      "right" : "boolean forbidChanges",
      "info" : "SingleVariableDeclaration[3961-3982]:SingleVariableDeclaration[3961-3982]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3984-4066]:Block[3984-4066]"
    }, {
      "left" : "this.compiler = compiler;",
      "right" : "this.compiler = compiler;",
      "info" : "ExpressionStatement[3992-4017]:ExpressionStatement[3992-4017]"
    }, {
      "left" : "this.assertOnChange = forbidChanges;",
      "right" : "this.assertOnChange = forbidChanges;",
      "info" : "ExpressionStatement[4024-4060]:ExpressionStatement[4024-4060]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[4072-4081]:MarkerAnnotation[4072-4081]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4086-4092]:Modifier[4086-4092]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[4093-4097]:PrimitiveType[4093-4097]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[4098-4105]:SimpleName[4098-4105]"
    }, {
      "left" : "Node externs",
      "right" : "Node externs",
      "info" : "SingleVariableDeclaration[4106-4118]:SingleVariableDeclaration[4106-4118]"
    }, {
      "left" : "Node root",
      "right" : "Node root",
      "info" : "SingleVariableDeclaration[4120-4129]:SingleVariableDeclaration[4120-4129]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4131-4208]:Block[4131-4208]"
    }, {
      "left" : "new NodeTraversal(compiler, this).traverseRoots(externs, root);",
      "right" : "new NodeTraversal(compiler, this).traverseRoots(externs, root);",
      "info" : "ExpressionStatement[4139-4202]:ExpressionStatement[4139-4202]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[4214-4223]:MarkerAnnotation[4214-4223]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4228-4234]:Modifier[4228-4234]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[4235-4239]:PrimitiveType[4235-4239]"
    }, {
      "left" : "visit",
      "right" : "visit",
      "info" : "SimpleName[4240-4245]:SimpleName[4240-4245]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[4246-4261]:SingleVariableDeclaration[4246-4261]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[4263-4269]:SingleVariableDeclaration[4263-4269]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[4271-4282]:SingleVariableDeclaration[4271-4282]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4284-5355]:Block[4284-5355]"
    }, {
      "left" : "if (n.getType() == Token.NAME)",
      "right" : "if (n.getType() == Token.NAME)",
      "info" : "IfStatement[4359-5349]:IfStatement[4359-5349]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4390-5349]:Block[4390-5349]"
    }, {
      "left" : "if (n.getString().isEmpty())",
      "right" : "if (n.getString().isEmpty())",
      "info" : "IfStatement[4400-4458]:IfStatement[4400-4458]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4429-4458]:Block[4429-4458]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[4441-4448]:ReturnStatement[4441-4448]"
    }, {
      "left" : "JSDocInfo info = null;",
      "right" : "JSDocInfo info = null;",
      "info" : "VariableDeclarationStatement[4468-4490]:VariableDeclarationStatement[4468-4490]"
    }, {
      "left" : "Var var = t.getScope().getVar(n.getString());",
      "right" : "Var var = t.getScope().getVar(n.getString());",
      "info" : "VariableDeclarationStatement[4555-4600]:VariableDeclarationStatement[4555-4600]"
    }, {
      "left" : "if (var != null)",
      "right" : "if (var != null)",
      "info" : "IfStatement[4609-4674]:IfStatement[4609-4674]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4626-4674]:Block[4626-4674]"
    }, {
      "left" : "info = var.getJSDocInfo();",
      "right" : "info = var.getJSDocInfo();",
      "info" : "ExpressionStatement[4638-4664]:ExpressionStatement[4638-4664]"
    }, {
      "left" : "if ((info != null && info.isConstant()) &&\n            !n.getBooleanProp(Node.IS_CONSTANT_NAME))",
      "right" : "if ((info != null && info.isConstant()) &&\n            !n.getBooleanProp(Node.IS_CONSTANT_NAME))",
      "info" : "IfStatement[4684-5341]:IfStatement[4684-5341]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4781-5341]:Block[4781-5341]"
    }, {
      "left" : "n.putBooleanProp(Node.IS_CONSTANT_NAME, true);",
      "right" : "n.putBooleanProp(Node.IS_CONSTANT_NAME, true);",
      "info" : "ExpressionStatement[4793-4839]:ExpressionStatement[4793-4839]"
    }, {
      "left" : "if (assertOnChange)",
      "right" : "if (assertOnChange)",
      "info" : "IfStatement[4850-5131]:IfStatement[4850-5131]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4870-5131]:Block[4870-5131]"
    }, {
      "left" : "String name = n.getString();",
      "right" : "String name = n.getString();",
      "info" : "VariableDeclarationStatement[4884-4912]:VariableDeclarationStatement[4884-4912]"
    }, {
      "left" : "throw new IllegalStateException(\n                \"Unexpected const change.\\n\" +\n                \"  name: \"+ name + \"\\n\" +\n                \"  gramps:\" + n.getParent().getParent().toStringTree());",
      "right" : "throw new IllegalStateException(\n                \"Unexpected const change.\\n\" +\n                \"  name: \"+ name + \"\\n\" +\n                \"  gramps:\" + n.getParent().getParent().toStringTree());",
      "info" : "ThrowStatement[4925-5119]:ThrowStatement[4925-5119]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[5452-5458]:Modifier[5452-5458]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[5459-5464]:TYPE_DECLARATION_KIND[5459-5464]"
    }, {
      "left" : "VerifyConstants",
      "right" : "VerifyConstants",
      "info" : "SimpleName[5465-5480]:SimpleName[5465-5480]"
    }, {
      "left" : "AbstractPostOrderCallback",
      "right" : "AbstractPostOrderCallback",
      "info" : "SimpleType[5489-5514]:SimpleType[5489-5514]"
    }, {
      "left" : "CompilerPass",
      "right" : "CompilerPass",
      "info" : "SimpleType[5532-5544]:SimpleType[5532-5544]"
    }, {
      "left" : "VerifyConstants",
      "right" : "VerifyConstants",
      "info" : "SimpleName[5647-5662]:SimpleName[5647-5662]"
    }, {
      "left" : "AbstractCompiler compiler",
      "right" : "AbstractCompiler compiler",
      "info" : "SingleVariableDeclaration[5663-5688]:SingleVariableDeclaration[5663-5688]"
    }, {
      "left" : "boolean checkUserDeclarations",
      "right" : "boolean checkUserDeclarations",
      "info" : "SingleVariableDeclaration[5690-5719]:SingleVariableDeclaration[5690-5719]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5721-5818]:Block[5721-5818]"
    }, {
      "left" : "this.compiler = compiler;",
      "right" : "this.compiler = compiler;",
      "info" : "ExpressionStatement[5729-5754]:ExpressionStatement[5729-5754]"
    }, {
      "left" : "this.checkUserDeclarations = checkUserDeclarations;",
      "right" : "this.checkUserDeclarations = checkUserDeclarations;",
      "info" : "ExpressionStatement[5761-5812]:ExpressionStatement[5761-5812]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[5824-5833]:MarkerAnnotation[5824-5833]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5838-5844]:Modifier[5838-5844]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[5845-5849]:PrimitiveType[5845-5849]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[5850-5857]:SimpleName[5850-5857]"
    }, {
      "left" : "Node externs",
      "right" : "Node externs",
      "info" : "SingleVariableDeclaration[5858-5870]:SingleVariableDeclaration[5858-5870]"
    }, {
      "left" : "Node root",
      "right" : "Node root",
      "info" : "SingleVariableDeclaration[5872-5881]:SingleVariableDeclaration[5872-5881]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5883-6150]:Block[5883-6150]"
    }, {
      "left" : "Node externsAndJs = root.getParent();",
      "right" : "Node externsAndJs = root.getParent();",
      "info" : "VariableDeclarationStatement[5891-5928]:VariableDeclarationStatement[5891-5928]"
    }, {
      "left" : "Preconditions.checkState(externsAndJs != null);",
      "right" : "Preconditions.checkState(externsAndJs != null);",
      "info" : "ExpressionStatement[5935-5982]:ExpressionStatement[5935-5982]"
    }, {
      "left" : "Preconditions.checkState(externsAndJs.hasChild(externs));",
      "right" : "Preconditions.checkState(externsAndJs.hasChild(externs));",
      "info" : "ExpressionStatement[5989-6046]:ExpressionStatement[5989-6046]"
    }, {
      "left" : "NodeTraversal.traverseRoots(\n          compiler, Lists.newArrayList(externs, root), this);",
      "right" : "NodeTraversal.traverseRoots(\n          compiler, Lists.newArrayList(externs, root), this);",
      "info" : "ExpressionStatement[6054-6144]:ExpressionStatement[6054-6144]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[6222-6231]:MarkerAnnotation[6222-6231]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6236-6242]:Modifier[6236-6242]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6243-6247]:PrimitiveType[6243-6247]"
    }, {
      "left" : "visit",
      "right" : "visit",
      "info" : "SimpleName[6248-6253]:SimpleName[6248-6253]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[6254-6269]:SingleVariableDeclaration[6254-6269]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[6271-6277]:SingleVariableDeclaration[6271-6277]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[6279-6290]:SingleVariableDeclaration[6279-6290]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6292-7822]:Block[6292-7822]"
    }, {
      "left" : "if (n.getType() == Token.NAME)",
      "right" : "if (n.getType() == Token.NAME)",
      "info" : "IfStatement[6300-7816]:IfStatement[6300-7816]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6331-7816]:Block[6331-7816]"
    }, {
      "left" : "String name = n.getString();",
      "right" : "String name = n.getString();",
      "info" : "VariableDeclarationStatement[6341-6369]:VariableDeclarationStatement[6341-6369]"
    }, {
      "left" : "if (n.getString().isEmpty())",
      "right" : "if (n.getString().isEmpty())",
      "info" : "IfStatement[6378-6436]:IfStatement[6378-6436]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6407-6436]:Block[6407-6436]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[6419-6426]:ReturnStatement[6419-6426]"
    }, {
      "left" : "boolean isConst = n.getBooleanProp(Node.IS_CONSTANT_NAME);",
      "right" : "boolean isConst = n.getBooleanProp(Node.IS_CONSTANT_NAME);",
      "info" : "VariableDeclarationStatement[6446-6504]:VariableDeclarationStatement[6446-6504]"
    }, {
      "left" : "if (checkUserDeclarations)",
      "right" : "if (checkUserDeclarations)",
      "info" : "IfStatement[6513-7492]:IfStatement[6513-7492]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6540-7492]:Block[6540-7492]"
    }, {
      "left" : "boolean expectedConst = false;",
      "right" : "boolean expectedConst = false;",
      "info" : "VariableDeclarationStatement[6552-6582]:VariableDeclarationStatement[6552-6582]"
    }, {
      "left" : "if (NodeUtil.isConstantName(n)\n              || compiler.getCodingConvention().isConstant(n.getString()))",
      "right" : "if (NodeUtil.isConstantName(n)\n              || compiler.getCodingConvention().isConstant(n.getString()))",
      "info" : "IfStatement[6593-7142]:IfStatement[6593-7142]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6699-6746]:Block[6699-6746]"
    }, {
      "left" : "expectedConst = true;",
      "right" : "expectedConst = true;",
      "info" : "ExpressionStatement[6713-6734]:ExpressionStatement[6713-6734]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6752-7142]:Block[6752-7142]"
    }, {
      "left" : "expectedConst = false;",
      "right" : "expectedConst = false;",
      "info" : "ExpressionStatement[6766-6788]:ExpressionStatement[6766-6788]"
    }, {
      "left" : "JSDocInfo info = null;",
      "right" : "JSDocInfo info = null;",
      "info" : "VariableDeclarationStatement[6802-6824]:VariableDeclarationStatement[6802-6824]"
    }, {
      "left" : "Var var = t.getScope().getVar(n.getString());",
      "right" : "Var var = t.getScope().getVar(n.getString());",
      "info" : "VariableDeclarationStatement[6837-6882]:VariableDeclarationStatement[6837-6882]"
    }, {
      "left" : "if (var != null)",
      "right" : "if (var != null)",
      "info" : "IfStatement[6895-6968]:IfStatement[6895-6968]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6912-6968]:Block[6912-6968]"
    }, {
      "left" : "info = var.getJSDocInfo();",
      "right" : "info = var.getJSDocInfo();",
      "info" : "ExpressionStatement[6928-6954]:ExpressionStatement[6928-6954]"
    }, {
      "left" : "if (info != null && info.isConstant())",
      "right" : "if (info != null && info.isConstant())",
      "info" : "IfStatement[6982-7130]:IfStatement[6982-7130]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7021-7072]:Block[7021-7072]"
    }, {
      "left" : "expectedConst = true;",
      "right" : "expectedConst = true;",
      "info" : "ExpressionStatement[7037-7058]:ExpressionStatement[7037-7058]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7078-7130]:Block[7078-7130]"
    }, {
      "left" : "expectedConst = false;",
      "right" : "expectedConst = false;",
      "info" : "ExpressionStatement[7094-7116]:ExpressionStatement[7094-7116]"
    }, {
      "left" : "if (expectedConst)",
      "right" : "if (expectedConst)",
      "info" : "IfStatement[7154-7482]:IfStatement[7154-7482]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7173-7321]:Block[7173-7321]"
    }, {
      "left" : "Preconditions.checkState(expectedConst == isConst,\n                \"The name \" + name + \" is not annotated as constant.\");",
      "right" : "Preconditions.checkState(expectedConst == isConst,\n                \"The name \" + name + \" is not annotated as constant.\");",
      "info" : "ExpressionStatement[7187-7309]:ExpressionStatement[7187-7309]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7327-7482]:Block[7327-7482]"
    }, {
      "left" : "Preconditions.checkState(expectedConst == isConst,\n                \"The name \" + name + \" should not be annotated as constant.\");",
      "right" : "Preconditions.checkState(expectedConst == isConst,\n                \"The name \" + name + \" should not be annotated as constant.\");",
      "info" : "ExpressionStatement[7341-7470]:ExpressionStatement[7341-7470]"
    }, {
      "left" : "Boolean value = constantMap.get(name);",
      "right" : "Boolean value = constantMap.get(name);",
      "info" : "VariableDeclarationStatement[7502-7540]:VariableDeclarationStatement[7502-7540]"
    }, {
      "left" : "if (value == null)",
      "right" : "if (value == null)",
      "info" : "IfStatement[7549-7808]:IfStatement[7549-7808]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7568-7621]:Block[7568-7621]"
    }, {
      "left" : "constantMap.put(name, isConst);",
      "right" : "constantMap.put(name, isConst);",
      "info" : "ExpressionStatement[7580-7611]:ExpressionStatement[7580-7611]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7627-7808]:Block[7627-7808]"
    }, {
      "left" : "Preconditions.checkState(value.booleanValue() == isConst,\n              \"The name \" + name + \" is not consistently annotated as \" +\n              \"constant.\");",
      "right" : "Preconditions.checkState(value.booleanValue() == isConst,\n              \"The name \" + name + \" is not consistently annotated as \" +\n              \"constant.\");",
      "info" : "ExpressionStatement[7639-7798]:ExpressionStatement[7639-7798]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[7830-7839]:MarkerAnnotation[7830-7839]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7842-7848]:Modifier[7842-7848]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7849-7853]:PrimitiveType[7849-7853]"
    }, {
      "left" : "visit",
      "right" : "visit",
      "info" : "SimpleName[7854-7859]:SimpleName[7854-7859]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[7860-7875]:SingleVariableDeclaration[7860-7875]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[7877-7883]:SingleVariableDeclaration[7877-7883]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[7885-7896]:SingleVariableDeclaration[7885-7896]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7898-8249]:Block[7898-8249]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.WHILE:\n        if (CONVERT_WHILE_TO_FOR) {\n          Node expr = n.getFirstChild();\n          n.setType(Token.FOR);\n          n.addChildBefore(new Node(Token.EMPTY), expr);\n          n.addChildAfter(new Node(Token.EMPTY), expr);\n          reportCodeChange(\"WHILE node\");\n        }\n        break;\n    }",
      "right" : "switch (n.getType()) {\n      case Token.WHILE:\n        if (CONVERT_WHILE_TO_FOR) {\n          Node expr = n.getFirstChild();\n          n.setType(Token.FOR);\n          n.addChildBefore(new Node(Token.EMPTY), expr);\n          n.addChildAfter(new Node(Token.EMPTY), expr);\n          reportCodeChange(\"WHILE node\");\n        }\n        break;\n    }",
      "info" : "SwitchStatement[7904-8245]:SwitchStatement[7904-8245]"
    }, {
      "left" : "case Token.WHILE:",
      "right" : "case Token.WHILE:",
      "info" : "SwitchCase[7933-7950]:SwitchCase[7933-7950]"
    }, {
      "left" : "if (CONVERT_WHILE_TO_FOR)",
      "right" : "if (CONVERT_WHILE_TO_FOR)",
      "info" : "IfStatement[7959-8224]:IfStatement[7959-8224]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7985-8224]:Block[7985-8224]"
    }, {
      "left" : "Node expr = n.getFirstChild();",
      "right" : "Node expr = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[7997-8027]:VariableDeclarationStatement[7997-8027]"
    }, {
      "left" : "n.setType(Token.FOR);",
      "right" : "n.setType(Token.FOR);",
      "info" : "ExpressionStatement[8038-8059]:ExpressionStatement[8038-8059]"
    }, {
      "left" : "n.addChildBefore(new Node(Token.EMPTY), expr);",
      "right" : "n.addChildBefore(new Node(Token.EMPTY), expr);",
      "info" : "ExpressionStatement[8070-8116]:ExpressionStatement[8070-8116]"
    }, {
      "left" : "n.addChildAfter(new Node(Token.EMPTY), expr);",
      "right" : "n.addChildAfter(new Node(Token.EMPTY), expr);",
      "info" : "ExpressionStatement[8127-8172]:ExpressionStatement[8127-8172]"
    }, {
      "left" : "reportCodeChange(\"WHILE node\");",
      "right" : "reportCodeChange(\"WHILE node\");",
      "info" : "ExpressionStatement[8183-8214]:ExpressionStatement[8183-8214]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[8233-8239]:BreakStatement[8233-8239]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[8328-8335]:Modifier[8328-8335]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[8336-8340]:PrimitiveType[8336-8340]"
    }, {
      "left" : "doStatementNormalizations",
      "right" : "doStatementNormalizations",
      "info" : "SimpleName[8341-8366]:SimpleName[8341-8366]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[8367-8382]:SingleVariableDeclaration[8367-8382]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[8384-8390]:SingleVariableDeclaration[8384-8390]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[8392-8403]:SingleVariableDeclaration[8392-8403]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8405-9017]:Block[8405-9017]"
    }, {
      "left" : "if (n.getType() == Token.LABEL)",
      "right" : "if (n.getType() == Token.LABEL)",
      "info" : "IfStatement[8411-8476]:IfStatement[8411-8476]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8443-8476]:Block[8443-8476]"
    }, {
      "left" : "normalizeLabels(n);",
      "right" : "normalizeLabels(n);",
      "info" : "ExpressionStatement[8451-8470]:ExpressionStatement[8451-8470]"
    }, {
      "left" : "if (NodeUtil.isStatementBlock(n) || n.getType() == Token.LABEL)",
      "right" : "if (NodeUtil.isStatementBlock(n) || n.getType() == Token.LABEL)",
      "info" : "IfStatement[8620-8735]:IfStatement[8620-8735]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8684-8735]:Block[8684-8735]"
    }, {
      "left" : "extractForInitializer(n, null, null);",
      "right" : "extractForInitializer(n, null, null);",
      "info" : "ExpressionStatement[8692-8729]:ExpressionStatement[8692-8729]"
    }, {
      "left" : "if (NodeUtil.isStatementBlock(n))",
      "right" : "if (NodeUtil.isStatementBlock(n))",
      "info" : "IfStatement[8849-8921]:IfStatement[8849-8921]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8883-8921]:Block[8883-8921]"
    }, {
      "left" : "splitVarDeclarations(n);",
      "right" : "splitVarDeclarations(n);",
      "info" : "ExpressionStatement[8891-8915]:ExpressionStatement[8891-8915]"
    }, {
      "left" : "if (n.getType() == Token.FUNCTION)",
      "right" : "if (n.getType() == Token.FUNCTION)",
      "info" : "IfStatement[8927-9013]:IfStatement[8927-9013]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8962-9013]:Block[8962-9013]"
    }, {
      "left" : "moveNamedFunctions(n.getLastChild());",
      "right" : "moveNamedFunctions(n.getLastChild());",
      "info" : "ExpressionStatement[8970-9007]:ExpressionStatement[8970-9007]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[9345-9352]:Modifier[9345-9352]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[9353-9357]:PrimitiveType[9353-9357]"
    }, {
      "left" : "normalizeLabels",
      "right" : "normalizeLabels",
      "info" : "SimpleName[9358-9373]:SimpleName[9358-9373]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[9374-9380]:SingleVariableDeclaration[9374-9380]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9382-9848]:Block[9382-9848]"
    }, {
      "left" : "Preconditions.checkArgument(n.getType() == Token.LABEL);",
      "right" : "Preconditions.checkArgument(n.getType() == Token.LABEL);",
      "info" : "ExpressionStatement[9388-9444]:ExpressionStatement[9388-9444]"
    }, {
      "left" : "Node last = n.getLastChild();",
      "right" : "Node last = n.getLastChild();",
      "info" : "VariableDeclarationStatement[9450-9479]:VariableDeclarationStatement[9450-9479]"
    }, {
      "left" : "switch (last.getType()) {\n      case Token.LABEL:\n      case Token.BLOCK:\n      case Token.FOR:\n      case Token.WHILE:\n      case Token.DO:\n        return;\n      default:\n        Node block = new Node(Token.BLOCK);\n        n.replaceChild(last, block);\n        block.addChildToFront(last);\n        reportCodeChange(\"LABEL normalization\");\n        return;\n    }",
      "right" : "switch (last.getType()) {\n      case Token.LABEL:\n      case Token.BLOCK:\n      case Token.FOR:\n      case Token.WHILE:\n      case Token.DO:\n        return;\n      default:\n        Node block = new Node(Token.BLOCK);\n        n.replaceChild(last, block);\n        block.addChildToFront(last);\n        reportCodeChange(\"LABEL normalization\");\n        return;\n    }",
      "info" : "SwitchStatement[9484-9844]:SwitchStatement[9484-9844]"
    }, {
      "left" : "case Token.LABEL:",
      "right" : "case Token.LABEL:",
      "info" : "SwitchCase[9516-9533]:SwitchCase[9516-9533]"
    }, {
      "left" : "case Token.BLOCK:",
      "right" : "case Token.BLOCK:",
      "info" : "SwitchCase[9540-9557]:SwitchCase[9540-9557]"
    }, {
      "left" : "case Token.FOR:",
      "right" : "case Token.FOR:",
      "info" : "SwitchCase[9564-9579]:SwitchCase[9564-9579]"
    }, {
      "left" : "case Token.WHILE:",
      "right" : "case Token.WHILE:",
      "info" : "SwitchCase[9586-9603]:SwitchCase[9586-9603]"
    }, {
      "left" : "case Token.DO:",
      "right" : "case Token.DO:",
      "info" : "SwitchCase[9610-9624]:SwitchCase[9610-9624]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[9633-9640]:ReturnStatement[9633-9640]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[9647-9655]:SwitchCase[9647-9655]"
    }, {
      "left" : "Node block = new Node(Token.BLOCK);",
      "right" : "Node block = new Node(Token.BLOCK);",
      "info" : "VariableDeclarationStatement[9664-9699]:VariableDeclarationStatement[9664-9699]"
    }, {
      "left" : "n.replaceChild(last, block);",
      "right" : "n.replaceChild(last, block);",
      "info" : "ExpressionStatement[9708-9736]:ExpressionStatement[9708-9736]"
    }, {
      "left" : "block.addChildToFront(last);",
      "right" : "block.addChildToFront(last);",
      "info" : "ExpressionStatement[9745-9773]:ExpressionStatement[9745-9773]"
    }, {
      "left" : "reportCodeChange(\"LABEL normalization\");",
      "right" : "reportCodeChange(\"LABEL normalization\");",
      "info" : "ExpressionStatement[9782-9822]:ExpressionStatement[9782-9822]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[9831-9838]:ReturnStatement[9831-9838]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[10309-10316]:Modifier[10309-10316]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[10317-10321]:PrimitiveType[10317-10321]"
    }, {
      "left" : "extractForInitializer",
      "right" : "extractForInitializer",
      "info" : "SimpleName[10322-10343]:SimpleName[10322-10343]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[10351-10357]:SingleVariableDeclaration[10351-10357]"
    }, {
      "left" : "Node before",
      "right" : "Node before",
      "info" : "SingleVariableDeclaration[10359-10370]:SingleVariableDeclaration[10359-10370]"
    }, {
      "left" : "Node beforeParent",
      "right" : "Node beforeParent",
      "info" : "SingleVariableDeclaration[10372-10389]:SingleVariableDeclaration[10372-10389]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10391-11458]:Block[10391-11458]"
    }, {
      "left" : "for (Node next, c = n.getFirstChild(); c != null; c = next)",
      "right" : "for (Node next, c = n.getFirstChild(); c != null; c = next)",
      "info" : "ForStatement[10398-11454]:ForStatement[10398-11454]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10458-11454]:Block[10458-11454]"
    }, {
      "left" : "next = c.getNext();",
      "right" : "next = c.getNext();",
      "info" : "ExpressionStatement[10466-10485]:ExpressionStatement[10466-10485]"
    }, {
      "left" : "Node insertBefore = (before == null) ? c : before;",
      "right" : "Node insertBefore = (before == null) ? c : before;",
      "info" : "VariableDeclarationStatement[10492-10542]:VariableDeclarationStatement[10492-10542]"
    }, {
      "left" : "Node insertBeforeParent = (before == null) ? n : beforeParent;",
      "right" : "Node insertBeforeParent = (before == null) ? n : beforeParent;",
      "info" : "VariableDeclarationStatement[10549-10611]:VariableDeclarationStatement[10549-10611]"
    }, {
      "left" : "switch (c.getType()) {\n        case Token.LABEL:\n          extractForInitializer(c, insertBefore, insertBeforeParent);\n          break;\n        case Token.FOR:\n          if (!NodeUtil.isForIn(c)\n              && c.getFirstChild().getType() != Token.EMPTY) {\n            Node init = c.getFirstChild();\n            c.replaceChild(init, new Node(Token.EMPTY));\n\n            Node newStatement;\n            // Only VAR statements, and expressions are allowed,\n            // but are handled differently.\n            if (init.getType() == Token.VAR) {\n              newStatement = init;\n            } else {\n              newStatement = NodeUtil.newExpr(init);\n            }\n\n            insertBeforeParent.addChildBefore(newStatement, insertBefore);\n            reportCodeChange(\"FOR initializer\");\n          }\n          break;\n      }",
      "right" : "switch (c.getType()) {\n        case Token.LABEL:\n          extractForInitializer(c, insertBefore, insertBeforeParent);\n          break;\n        case Token.FOR:\n          if (!NodeUtil.isForIn(c)\n              && c.getFirstChild().getType() != Token.EMPTY) {\n            Node init = c.getFirstChild();\n            c.replaceChild(init, new Node(Token.EMPTY));\n\n            Node newStatement;\n            // Only VAR statements, and expressions are allowed,\n            // but are handled differently.\n            if (init.getType() == Token.VAR) {\n              newStatement = init;\n            } else {\n              newStatement = NodeUtil.newExpr(init);\n            }\n\n            insertBeforeParent.addChildBefore(newStatement, insertBefore);\n            reportCodeChange(\"FOR initializer\");\n          }\n          break;\n      }",
      "info" : "SwitchStatement[10618-11448]:SwitchStatement[10618-11448]"
    }, {
      "left" : "case Token.LABEL:",
      "right" : "case Token.LABEL:",
      "info" : "SwitchCase[10649-10666]:SwitchCase[10649-10666]"
    }, {
      "left" : "extractForInitializer(c, insertBefore, insertBeforeParent);",
      "right" : "extractForInitializer(c, insertBefore, insertBeforeParent);",
      "info" : "ExpressionStatement[10677-10736]:ExpressionStatement[10677-10736]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[10747-10753]:BreakStatement[10747-10753]"
    }, {
      "left" : "case Token.FOR:",
      "right" : "case Token.FOR:",
      "info" : "SwitchCase[10762-10777]:SwitchCase[10762-10777]"
    }, {
      "left" : "if (!NodeUtil.isForIn(c)\n              && c.getFirstChild().getType() != Token.EMPTY)",
      "right" : "if (!NodeUtil.isForIn(c)\n              && c.getFirstChild().getType() != Token.EMPTY)",
      "info" : "IfStatement[10788-11423]:IfStatement[10788-11423]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10874-11423]:Block[10874-11423]"
    }, {
      "left" : "Node init = c.getFirstChild();",
      "right" : "Node init = c.getFirstChild();",
      "info" : "VariableDeclarationStatement[10888-10918]:VariableDeclarationStatement[10888-10918]"
    }, {
      "left" : "c.replaceChild(init, new Node(Token.EMPTY));",
      "right" : "c.replaceChild(init, new Node(Token.EMPTY));",
      "info" : "ExpressionStatement[10931-10975]:ExpressionStatement[10931-10975]"
    }, {
      "left" : "Node newStatement;",
      "right" : "Node newStatement;",
      "info" : "VariableDeclarationStatement[10989-11007]:VariableDeclarationStatement[10989-11007]"
    }, {
      "left" : "if (init.getType() == Token.VAR)",
      "right" : "if (init.getType() == Token.VAR)",
      "info" : "IfStatement[11129-11286]:IfStatement[11129-11286]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11162-11212]:Block[11162-11212]"
    }, {
      "left" : "newStatement = init;",
      "right" : "newStatement = init;",
      "info" : "ExpressionStatement[11178-11198]:ExpressionStatement[11178-11198]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11218-11286]:Block[11218-11286]"
    }, {
      "left" : "newStatement = NodeUtil.newExpr(init);",
      "right" : "newStatement = NodeUtil.newExpr(init);",
      "info" : "ExpressionStatement[11234-11272]:ExpressionStatement[11234-11272]"
    }, {
      "left" : "insertBeforeParent.addChildBefore(newStatement, insertBefore);",
      "right" : "insertBeforeParent.addChildBefore(newStatement, insertBefore);",
      "info" : "ExpressionStatement[11300-11362]:ExpressionStatement[11300-11362]"
    }, {
      "left" : "reportCodeChange(\"FOR initializer\");",
      "right" : "reportCodeChange(\"FOR initializer\");",
      "info" : "ExpressionStatement[11375-11411]:ExpressionStatement[11375-11411]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[11434-11440]:BreakStatement[11434-11440]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[11636-11643]:Modifier[11636-11643]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[11644-11648]:PrimitiveType[11644-11648]"
    }, {
      "left" : "splitVarDeclarations",
      "right" : "splitVarDeclarations",
      "info" : "SimpleName[11649-11669]:SimpleName[11649-11669]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[11670-11676]:SingleVariableDeclaration[11670-11676]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11678-12266]:Block[11678-12266]"
    }, {
      "left" : "for (Node next, c = n.getFirstChild(); c != null; c = next)",
      "right" : "for (Node next, c = n.getFirstChild(); c != null; c = next)",
      "info" : "ForStatement[11684-12262]:ForStatement[11684-12262]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11744-12262]:Block[11744-12262]"
    }, {
      "left" : "next = c.getNext();",
      "right" : "next = c.getNext();",
      "info" : "ExpressionStatement[11752-11771]:ExpressionStatement[11752-11771]"
    }, {
      "left" : "if (c.getType() == Token.VAR)",
      "right" : "if (c.getType() == Token.VAR)",
      "info" : "IfStatement[11778-12256]:IfStatement[11778-12256]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11808-12256]:Block[11808-12256]"
    }, {
      "left" : "if (assertOnChange && !c.hasChildren())",
      "right" : "if (assertOnChange && !c.hasChildren())",
      "info" : "IfStatement[11818-11931]:IfStatement[11818-11931]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11858-11931]:Block[11858-11931]"
    }, {
      "left" : "throw new IllegalStateException(\"Empty VAR node.\");",
      "right" : "throw new IllegalStateException(\"Empty VAR node.\");",
      "info" : "ThrowStatement[11870-11921]:ThrowStatement[11870-11921]"
    }, {
      "left" : "while (c.getFirstChild() != c.getLastChild())",
      "right" : "while (c.getFirstChild() != c.getLastChild())",
      "info" : "WhileStatement[11941-12248]:WhileStatement[11941-12248]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11987-12248]:Block[11987-12248]"
    }, {
      "left" : "Node name = c.getFirstChild();",
      "right" : "Node name = c.getFirstChild();",
      "info" : "VariableDeclarationStatement[11999-12029]:VariableDeclarationStatement[11999-12029]"
    }, {
      "left" : "c.removeChild(name);",
      "right" : "c.removeChild(name);",
      "info" : "ExpressionStatement[12040-12060]:ExpressionStatement[12040-12060]"
    }, {
      "left" : "Node newVar = new Node(Token.VAR, name, n.getLineno(), n.getCharno());",
      "right" : "Node newVar = new Node(Token.VAR, name, n.getLineno(), n.getCharno());",
      "info" : "VariableDeclarationStatement[12071-12141]:VariableDeclarationStatement[12071-12141]"
    }, {
      "left" : "n.addChildBefore(newVar, c);",
      "right" : "n.addChildBefore(newVar, c);",
      "info" : "ExpressionStatement[12152-12180]:ExpressionStatement[12152-12180]"
    }, {
      "left" : "reportCodeChange(\"VAR with multiple children\");",
      "right" : "reportCodeChange(\"VAR with multiple children\");",
      "info" : "ExpressionStatement[12191-12238]:ExpressionStatement[12191-12238]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[12431-12438]:Modifier[12431-12438]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[12439-12443]:PrimitiveType[12439-12443]"
    }, {
      "left" : "moveNamedFunctions",
      "right" : "moveNamedFunctions",
      "info" : "SimpleName[12444-12462]:SimpleName[12444-12462]"
    }, {
      "left" : "Node functionBody",
      "right" : "Node functionBody",
      "info" : "SingleVariableDeclaration[12463-12480]:SingleVariableDeclaration[12463-12480]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12482-13696]:Block[12482-13696]"
    }, {
      "left" : "Preconditions.checkState(\n        functionBody.getParent().getType() == Token.FUNCTION);",
      "right" : "Preconditions.checkState(\n        functionBody.getParent().getType() == Token.FUNCTION);",
      "info" : "ExpressionStatement[12488-12576]:ExpressionStatement[12488-12576]"
    }, {
      "left" : "Node previous = null;",
      "right" : "Node previous = null;",
      "info" : "VariableDeclarationStatement[12581-12602]:VariableDeclarationStatement[12581-12602]"
    }, {
      "left" : "Node current = functionBody.getFirstChild();",
      "right" : "Node current = functionBody.getFirstChild();",
      "info" : "VariableDeclarationStatement[12607-12651]:VariableDeclarationStatement[12607-12651]"
    }, {
      "left" : "while (current != null && NodeUtil.isFunctionDeclaration(current))",
      "right" : "while (current != null && NodeUtil.isFunctionDeclaration(current))",
      "info" : "WhileStatement[12768-12903]:WhileStatement[12768-12903]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12835-12903]:Block[12835-12903]"
    }, {
      "left" : "previous = current;",
      "right" : "previous = current;",
      "info" : "ExpressionStatement[12843-12862]:ExpressionStatement[12843-12862]"
    }, {
      "left" : "current = current.getNext();",
      "right" : "current = current.getNext();",
      "info" : "ExpressionStatement[12869-12897]:ExpressionStatement[12869-12897]"
    }, {
      "left" : "Node insertAfter = previous;",
      "right" : "Node insertAfter = previous;",
      "info" : "VariableDeclarationStatement[12963-12991]:VariableDeclarationStatement[12963-12991]"
    }, {
      "left" : "while (current != null)",
      "right" : "while (current != null)",
      "info" : "WhileStatement[12996-13692]:WhileStatement[12996-13692]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13020-13692]:Block[13020-13692]"
    }, {
      "left" : "Node next = current.getNext();",
      "right" : "Node next = current.getNext();",
      "info" : "VariableDeclarationStatement[13095-13125]:VariableDeclarationStatement[13095-13125]"
    }, {
      "left" : "if (NodeUtil.isFunctionDeclaration(current))",
      "right" : "if (NodeUtil.isFunctionDeclaration(current))",
      "info" : "IfStatement[13132-13664]:IfStatement[13132-13664]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13177-13546]:Block[13177-13546]"
    }, {
      "left" : "Preconditions.checkNotNull(previous);",
      "right" : "Preconditions.checkNotNull(previous);",
      "info" : "ExpressionStatement[13236-13273]:ExpressionStatement[13236-13273]"
    }, {
      "left" : "functionBody.removeChildAfter(previous);",
      "right" : "functionBody.removeChildAfter(previous);",
      "info" : "ExpressionStatement[13282-13322]:ExpressionStatement[13282-13322]"
    }, {
      "left" : "insertAfter = addToFront(functionBody, current, insertAfter);",
      "right" : "insertAfter = addToFront(functionBody, current, insertAfter);",
      "info" : "ExpressionStatement[13440-13501]:ExpressionStatement[13440-13501]"
    }, {
      "left" : "compiler.reportCodeChange();",
      "right" : "compiler.reportCodeChange();",
      "info" : "ExpressionStatement[13510-13538]:ExpressionStatement[13510-13538]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13552-13664]:Block[13552-13664]"
    }, {
      "left" : "previous = current;",
      "right" : "previous = current;",
      "info" : "ExpressionStatement[13637-13656]:ExpressionStatement[13637-13656]"
    }, {
      "left" : "current = next;",
      "right" : "current = next;",
      "info" : "ExpressionStatement[13671-13686]:ExpressionStatement[13671-13686]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[13895-13902]:Modifier[13895-13902]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[13903-13907]:SimpleType[13903-13907]"
    }, {
      "left" : "addToFront",
      "right" : "addToFront",
      "info" : "SimpleName[13908-13918]:SimpleName[13908-13918]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[13919-13930]:SingleVariableDeclaration[13919-13930]"
    }, {
      "left" : "Node newChild",
      "right" : "Node newChild",
      "info" : "SingleVariableDeclaration[13932-13945]:SingleVariableDeclaration[13932-13945]"
    }, {
      "left" : "Node after",
      "right" : "Node after",
      "info" : "SingleVariableDeclaration[13947-13957]:SingleVariableDeclaration[13947-13957]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13959-14114]:Block[13959-14114]"
    }, {
      "left" : "if (after == null)",
      "right" : "if (after == null)",
      "info" : "IfStatement[13965-14089]:IfStatement[13965-14089]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13984-14031]:Block[13984-14031]"
    }, {
      "left" : "parent.addChildToFront(newChild);",
      "right" : "parent.addChildToFront(newChild);",
      "info" : "ExpressionStatement[13992-14025]:ExpressionStatement[13992-14025]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14037-14089]:Block[14037-14089]"
    }, {
      "left" : "parent.addChildAfter(newChild, after);",
      "right" : "parent.addChildAfter(newChild, after);",
      "info" : "ExpressionStatement[14045-14083]:ExpressionStatement[14045-14083]"
    }, {
      "left" : "return newChild;",
      "right" : "return newChild;",
      "info" : "ReturnStatement[14094-14110]:ReturnStatement[14094-14110]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[14170-14177]:Modifier[14170-14177]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[14178-14182]:PrimitiveType[14178-14182]"
    }, {
      "left" : "removeDuplicateDeclarations",
      "right" : "removeDuplicateDeclarations",
      "info" : "SimpleName[14183-14210]:SimpleName[14183-14210]"
    }, {
      "left" : "Node root",
      "right" : "Node root",
      "info" : "SingleVariableDeclaration[14211-14220]:SingleVariableDeclaration[14211-14220]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14222-14489]:Block[14222-14489]"
    }, {
      "left" : "Callback tickler = new ScopeTicklingCallback();",
      "right" : "Callback tickler = new ScopeTicklingCallback();",
      "info" : "VariableDeclarationStatement[14228-14275]:VariableDeclarationStatement[14228-14275]"
    }, {
      "left" : "ScopeCreator scopeCreator =  new SyntacticScopeCreator(\n        compiler, new DuplicateDeclarationHandler());",
      "right" : "ScopeCreator scopeCreator =  new SyntacticScopeCreator(\n        compiler, new DuplicateDeclarationHandler());",
      "info" : "VariableDeclarationStatement[14280-14389]:VariableDeclarationStatement[14280-14389]"
    }, {
      "left" : "NodeTraversal t = new NodeTraversal(compiler, tickler, scopeCreator);",
      "right" : "NodeTraversal t = new NodeTraversal(compiler, tickler, scopeCreator);",
      "info" : "VariableDeclarationStatement[14394-14463]:VariableDeclarationStatement[14394-14463]"
    }, {
      "left" : "t.traverse(root);",
      "right" : "t.traverse(root);",
      "info" : "ExpressionStatement[14468-14485]:ExpressionStatement[14468-14485]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[14554-14561]:Modifier[14554-14561]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[14562-14567]:Modifier[14562-14567]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[14568-14573]:TYPE_DECLARATION_KIND[14568-14573]"
    }, {
      "left" : "DuplicateDeclarationHandler",
      "right" : "DuplicateDeclarationHandler",
      "info" : "SimpleName[14574-14601]:SimpleName[14574-14601]"
    }, {
      "left" : "SyntacticScopeCreator.RedeclarationHandler",
      "right" : "SyntacticScopeCreator.RedeclarationHandler",
      "info" : "SimpleType[14619-14661]:SimpleType[14619-14661]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[14779-14788]:MarkerAnnotation[14779-14788]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[14793-14799]:Modifier[14793-14799]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[14800-14804]:PrimitiveType[14800-14804]"
    }, {
      "left" : "onRedeclaration",
      "right" : "onRedeclaration",
      "info" : "SimpleName[14805-14820]:SimpleName[14805-14820]"
    }, {
      "left" : "Scope s",
      "right" : "Scope s",
      "info" : "SingleVariableDeclaration[14830-14837]:SingleVariableDeclaration[14830-14837]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[14839-14850]:SingleVariableDeclaration[14839-14850]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[14852-14858]:SingleVariableDeclaration[14852-14858]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[14860-14871]:SingleVariableDeclaration[14860-14871]"
    }, {
      "left" : "Node gramps",
      "right" : "Node gramps",
      "info" : "SingleVariableDeclaration[14873-14884]:SingleVariableDeclaration[14873-14884]"
    }, {
      "left" : "Node nodeWithLineNumber",
      "right" : "Node nodeWithLineNumber",
      "info" : "SingleVariableDeclaration[14894-14917]:SingleVariableDeclaration[14894-14917]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14919-17220]:Block[14919-17220]"
    }, {
      "left" : "Preconditions.checkState(n.getType() == Token.NAME);",
      "right" : "Preconditions.checkState(n.getType() == Token.NAME);",
      "info" : "ExpressionStatement[14927-14979]:ExpressionStatement[14927-14979]"
    }, {
      "left" : "if (parent.getType() == Token.VAR)",
      "right" : "if (parent.getType() == Token.VAR)",
      "info" : "IfStatement[14986-17214]:IfStatement[14986-17214]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15021-17214]:Block[15021-17214]"
    }, {
      "left" : "Preconditions.checkState(parent.hasOneChild());",
      "right" : "Preconditions.checkState(parent.hasOneChild());",
      "info" : "ExpressionStatement[15031-15078]:ExpressionStatement[15031-15078]"
    }, {
      "left" : "if (n.hasChildren())",
      "right" : "if (n.hasChildren())",
      "info" : "IfStatement[16078-17151]:IfStatement[16078-17151]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16099-16485]:Block[16099-16485]"
    }, {
      "left" : "parent.removeChild(n);",
      "right" : "parent.removeChild(n);",
      "info" : "ExpressionStatement[16177-16199]:ExpressionStatement[16177-16199]"
    }, {
      "left" : "Node value = n.getFirstChild();",
      "right" : "Node value = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[16268-16299]:VariableDeclarationStatement[16268-16299]"
    }, {
      "left" : "n.removeChild(value);",
      "right" : "n.removeChild(value);",
      "info" : "ExpressionStatement[16310-16331]:ExpressionStatement[16310-16331]"
    }, {
      "left" : "Node replacement = new Node(Token.ASSIGN, n, value);",
      "right" : "Node replacement = new Node(Token.ASSIGN, n, value);",
      "info" : "VariableDeclarationStatement[16342-16394]:VariableDeclarationStatement[16342-16394]"
    }, {
      "left" : "gramps.replaceChild(parent, new Node(Token.EXPR_RESULT, replacement));",
      "right" : "gramps.replaceChild(parent, new Node(Token.EXPR_RESULT, replacement));",
      "info" : "ExpressionStatement[16405-16475]:ExpressionStatement[16405-16475]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16491-17151]:Block[16491-17151]"
    }, {
      "left" : "if (NodeUtil.isStatementBlock(gramps))",
      "right" : "if (NodeUtil.isStatementBlock(gramps))",
      "info" : "IfStatement[16552-17141]:IfStatement[16552-17141]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16591-16644]:Block[16591-16644]"
    }, {
      "left" : "gramps.removeChild(parent);",
      "right" : "gramps.removeChild(parent);",
      "info" : "ExpressionStatement[16605-16632]:ExpressionStatement[16605-16632]"
    }, {
      "left" : "if (gramps.getType() == Token.FOR)",
      "right" : "if (gramps.getType() == Token.FOR)",
      "info" : "IfStatement[16650-17141]:IfStatement[16650-17141]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16685-16987]:Block[16685-16987]"
    }, {
      "left" : "parent.removeChild(n);",
      "right" : "parent.removeChild(n);",
      "info" : "ExpressionStatement[16909-16931]:ExpressionStatement[16909-16931]"
    }, {
      "left" : "gramps.replaceChild(parent, n);",
      "right" : "gramps.replaceChild(parent, n);",
      "info" : "ExpressionStatement[16944-16975]:ExpressionStatement[16944-16975]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16993-17141]:Block[16993-17141]"
    }, {
      "left" : "Preconditions.checkState(gramps.getType() == Token.LABEL);",
      "right" : "Preconditions.checkState(gramps.getType() == Token.LABEL);",
      "info" : "ExpressionStatement[17007-17065]:ExpressionStatement[17007-17065]"
    }, {
      "left" : "gramps.replaceChild(parent, new Node(Token.EMPTY));",
      "right" : "gramps.replaceChild(parent, new Node(Token.EMPTY));",
      "info" : "ExpressionStatement[17078-17129]:ExpressionStatement[17078-17129]"
    }, {
      "left" : "reportCodeChange(\"Duplicate VAR declaration\");",
      "right" : "reportCodeChange(\"Duplicate VAR declaration\");",
      "info" : "ExpressionStatement[17160-17206]:ExpressionStatement[17160-17206]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[17294-17301]:Modifier[17294-17301]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[17302-17307]:Modifier[17302-17307]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[17308-17313]:TYPE_DECLARATION_KIND[17308-17313]"
    }, {
      "left" : "ScopeTicklingCallback",
      "right" : "ScopeTicklingCallback",
      "info" : "SimpleName[17314-17335]:SimpleName[17314-17335]"
    }, {
      "left" : "NodeTraversal.ScopedCallback",
      "right" : "NodeTraversal.ScopedCallback",
      "info" : "SimpleType[17353-17381]:SimpleType[17353-17381]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[17388-17397]:MarkerAnnotation[17388-17397]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[17402-17408]:Modifier[17402-17408]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[17409-17413]:PrimitiveType[17409-17413]"
    }, {
      "left" : "enterScope",
      "right" : "enterScope",
      "info" : "SimpleName[17414-17424]:SimpleName[17414-17424]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[17425-17440]:SingleVariableDeclaration[17425-17440]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17442-17558]:Block[17442-17558]"
    }, {
      "left" : "t.getScope();",
      "right" : "t.getScope();",
      "info" : "ExpressionStatement[17539-17552]:ExpressionStatement[17539-17552]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[17564-17573]:MarkerAnnotation[17564-17573]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[17578-17584]:Modifier[17578-17584]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[17585-17589]:PrimitiveType[17585-17589]"
    }, {
      "left" : "exitScope",
      "right" : "exitScope",
      "info" : "SimpleName[17590-17599]:SimpleName[17590-17599]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[17600-17615]:SingleVariableDeclaration[17600-17615]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17617-17648]:Block[17617-17648]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[17654-17663]:MarkerAnnotation[17654-17663]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[17668-17674]:Modifier[17668-17674]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[17675-17682]:PrimitiveType[17675-17682]"
    }, {
      "left" : "shouldTraverse",
      "right" : "shouldTraverse",
      "info" : "SimpleName[17683-17697]:SimpleName[17683-17697]"
    }, {
      "left" : "NodeTraversal nodeTraversal",
      "right" : "NodeTraversal nodeTraversal",
      "info" : "SingleVariableDeclaration[17707-17734]:SingleVariableDeclaration[17707-17734]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[17736-17742]:SingleVariableDeclaration[17736-17742]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[17744-17755]:SingleVariableDeclaration[17744-17755]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17757-17783]:Block[17757-17783]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[17765-17777]:ReturnStatement[17765-17777]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[17789-17798]:MarkerAnnotation[17789-17798]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[17803-17809]:Modifier[17803-17809]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[17810-17814]:PrimitiveType[17810-17814]"
    }, {
      "left" : "visit",
      "right" : "visit",
      "info" : "SimpleName[17815-17820]:SimpleName[17815-17820]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[17821-17836]:SingleVariableDeclaration[17821-17836]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[17838-17844]:SingleVariableDeclaration[17838-17844]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[17846-17857]:SingleVariableDeclaration[17846-17857]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17859-17890]:Block[17859-17890]"
    } ]
  },
  "interFileMappings" : { }
}