{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "ConvertAllTest",
      "right" : "ConvertAllTest",
      "info" : "TypeDeclaration[1973-22462]:TypeDeclaration[1999-23901]"
    }, {
      "left" : "public void testToObject()",
      "right" : "public void testToObject()",
      "info" : "MethodDeclaration[2101-2943]:MethodDeclaration[2127-2969]"
    }, {
      "left" : "public void testToString()",
      "right" : "public void testToString()",
      "info" : "MethodDeclaration[2949-3762]:MethodDeclaration[2975-3788]"
    }, {
      "left" : "public void testToBoolean()",
      "right" : "public void testToBoolean()",
      "info" : "MethodDeclaration[3768-5867]:MethodDeclaration[3794-5893]"
    }, {
      "left" : "public void testToByte()",
      "right" : "public void testToByte()",
      "info" : "MethodDeclaration[5873-6781]:MethodDeclaration[5899-6807]"
    }, {
      "left" : "public void testToShort()",
      "right" : "public void testToShort()",
      "info" : "MethodDeclaration[6787-7724]:MethodDeclaration[6813-7750]"
    }, {
      "left" : "public void testToInteger()",
      "right" : "public void testToInteger()",
      "info" : "MethodDeclaration[7730-8601]:MethodDeclaration[7756-8627]"
    }, {
      "left" : "public void testToLong()",
      "right" : "public void testToLong()",
      "info" : "MethodDeclaration[8607-10363]:MethodDeclaration[8633-10546]"
    }, {
      "left" : "public void testToBigInteger()",
      "right" : "public void testToBigInteger()",
      "info" : "MethodDeclaration[10369-11388]:MethodDeclaration[10552-11571]"
    }, {
      "left" : "public void testToBigDecimal()",
      "right" : "public void testToBigDecimal()",
      "info" : "MethodDeclaration[11394-12427]:MethodDeclaration[11577-12610]"
    }, {
      "left" : "private static <T, U> void testConversion(U expected, T from, Class<U> toClass)",
      "right" : "private static <T, U> void testConversion(U expected, T from, Class<U> toClass)",
      "info" : "MethodDeclaration[12433-14248]:MethodDeclaration[12616-14431]"
    }, {
      "left" : "public void testToJDBCArray() throws SQLException",
      "right" : "public void testToJDBCArray() throws SQLException",
      "info" : "MethodDeclaration[14254-16371]:MethodDeclaration[14437-16554]"
    }, {
      "left" : "public void testToDate()",
      "right" : "public void testToDate()",
      "info" : "MethodDeclaration[16377-16644]:MethodDeclaration[16560-16827]"
    }, {
      "left" : "public void testToLocalDate()",
      "right" : "public void testToLocalDate()",
      "info" : "MethodDeclaration[16650-16965]:MethodDeclaration[16833-17148]"
    }, {
      "left" : "public void testToTime()",
      "right" : "public void testToTime()",
      "info" : "MethodDeclaration[16971-17482]:MethodDeclaration[17154-17665]"
    }, {
      "left" : "public void testToLocalTime()",
      "right" : "public void testToLocalTime()",
      "info" : "MethodDeclaration[17488-18085]:MethodDeclaration[17671-18268]"
    }, {
      "left" : "public void testToOffsetTime()",
      "right" : "public void testToOffsetTime()",
      "info" : "MethodDeclaration[18091-18519]:MethodDeclaration[18274-18702]"
    }, {
      "left" : "public void testToTimestamp()",
      "right" : "public void testToTimestamp()",
      "info" : "MethodDeclaration[18525-19670]:MethodDeclaration[18708-19853]"
    }, {
      "left" : "public void testToLocalDateTime()",
      "right" : "public void testToLocalDateTime()",
      "info" : "MethodDeclaration[19676-21013]:MethodDeclaration[19859-21196]"
    }, {
      "left" : "public void testToOffsetDateTime()",
      "right" : "public void testToOffsetDateTime()",
      "info" : "MethodDeclaration[21019-22231]:MethodDeclaration[21202-22414]"
    }, {
      "left" : "public void testToOffsetDateTime()",
      "right" : "public void testToInstant()",
      "info" : "MethodDeclaration[21019-22231]:MethodDeclaration[22420-23670]"
    }, {
      "left" : "private Long millis(Temporal t)",
      "right" : "private Long millis(Temporal t)",
      "info" : "MethodDeclaration[22237-22460]:MethodDeclaration[23676-23899]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2045-2051]:Modifier[2071-2077]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[2052-2057]:TYPE_DECLARATION_KIND[2078-2083]"
    }, {
      "left" : "ConvertAllTest",
      "right" : "ConvertAllTest",
      "info" : "SimpleName[2058-2072]:SimpleName[2084-2098]"
    }, {
      "left" : "AbstractTest",
      "right" : "AbstractTest",
      "info" : "SimpleType[2081-2093]:SimpleType[2107-2119]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[2101-2106]:MarkerAnnotation[2127-2132]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2111-2117]:Modifier[2137-2143]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[2118-2122]:PrimitiveType[2144-2148]"
    }, {
      "left" : "testToObject",
      "right" : "testToObject",
      "info" : "SimpleName[2123-2135]:SimpleName[2149-2161]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2138-2943]:Block[2164-2969]"
    }, {
      "left" : "testConversion(null, null, Object.class);",
      "right" : "testConversion(null, null, Object.class);",
      "info" : "ExpressionStatement[2148-2189]:ExpressionStatement[2174-2215]"
    }, {
      "left" : "testConversion(\"a\", \"a\", Object.class);",
      "right" : "testConversion(\"a\", \"a\", Object.class);",
      "info" : "ExpressionStatement[2198-2237]:ExpressionStatement[2224-2263]"
    }, {
      "left" : "testConversion(true, true, Object.class);",
      "right" : "testConversion(true, true, Object.class);",
      "info" : "ExpressionStatement[2246-2287]:ExpressionStatement[2272-2313]"
    }, {
      "left" : "testConversion((byte) 1, (byte) 1, Object.class);",
      "right" : "testConversion((byte) 1, (byte) 1, Object.class);",
      "info" : "ExpressionStatement[2296-2345]:ExpressionStatement[2322-2371]"
    }, {
      "left" : "testConversion((short) 1, (short) 1, Object.class);",
      "right" : "testConversion((short) 1, (short) 1, Object.class);",
      "info" : "ExpressionStatement[2354-2405]:ExpressionStatement[2380-2431]"
    }, {
      "left" : "testConversion(1, 1, Object.class);",
      "right" : "testConversion(1, 1, Object.class);",
      "info" : "ExpressionStatement[2414-2449]:ExpressionStatement[2440-2475]"
    }, {
      "left" : "testConversion(1L, 1L, Object.class);",
      "right" : "testConversion(1L, 1L, Object.class);",
      "info" : "ExpressionStatement[2458-2495]:ExpressionStatement[2484-2521]"
    }, {
      "left" : "testConversion(1.0d, 1.0d, Object.class);",
      "right" : "testConversion(1.0d, 1.0d, Object.class);",
      "info" : "ExpressionStatement[2504-2545]:ExpressionStatement[2530-2571]"
    }, {
      "left" : "testConversion(1.0f, 1.0f, Object.class);",
      "right" : "testConversion(1.0f, 1.0f, Object.class);",
      "info" : "ExpressionStatement[2554-2595]:ExpressionStatement[2580-2621]"
    }, {
      "left" : "testConversion(BigInteger.ONE, BigInteger.ONE, Object.class);",
      "right" : "testConversion(BigInteger.ONE, BigInteger.ONE, Object.class);",
      "info" : "ExpressionStatement[2604-2665]:ExpressionStatement[2630-2691]"
    }, {
      "left" : "testConversion(BigDecimal.ONE, BigDecimal.ONE, Object.class);",
      "right" : "testConversion(BigDecimal.ONE, BigDecimal.ONE, Object.class);",
      "info" : "ExpressionStatement[2674-2735]:ExpressionStatement[2700-2761]"
    }, {
      "left" : "testConversion(new Date(0), new Date(0), Object.class);",
      "right" : "testConversion(new Date(0), new Date(0), Object.class);",
      "info" : "ExpressionStatement[2744-2799]:ExpressionStatement[2770-2825]"
    }, {
      "left" : "testConversion(new Time(0), new Time(0), Object.class);",
      "right" : "testConversion(new Time(0), new Time(0), Object.class);",
      "info" : "ExpressionStatement[2808-2863]:ExpressionStatement[2834-2889]"
    }, {
      "left" : "testConversion(new Timestamp(0), new Timestamp(0), Object.class);",
      "right" : "testConversion(new Timestamp(0), new Timestamp(0), Object.class);",
      "info" : "ExpressionStatement[2872-2937]:ExpressionStatement[2898-2963]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[2949-2954]:MarkerAnnotation[2975-2980]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2959-2965]:Modifier[2985-2991]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[2966-2970]:PrimitiveType[2992-2996]"
    }, {
      "left" : "testToString",
      "right" : "testToString",
      "info" : "SimpleName[2971-2983]:SimpleName[2997-3009]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2986-3762]:Block[3012-3788]"
    }, {
      "left" : "testConversion(null, null, String.class);",
      "right" : "testConversion(null, null, String.class);",
      "info" : "ExpressionStatement[2996-3037]:ExpressionStatement[3022-3063]"
    }, {
      "left" : "testConversion(\"a\", \"a\", String.class);",
      "right" : "testConversion(\"a\", \"a\", String.class);",
      "info" : "ExpressionStatement[3046-3085]:ExpressionStatement[3072-3111]"
    }, {
      "left" : "testConversion(\"true\", true, String.class);",
      "right" : "testConversion(\"true\", true, String.class);",
      "info" : "ExpressionStatement[3094-3137]:ExpressionStatement[3120-3163]"
    }, {
      "left" : "testConversion(\"1\", (byte) 1, String.class);",
      "right" : "testConversion(\"1\", (byte) 1, String.class);",
      "info" : "ExpressionStatement[3146-3190]:ExpressionStatement[3172-3216]"
    }, {
      "left" : "testConversion(\"1\", (short) 1, String.class);",
      "right" : "testConversion(\"1\", (short) 1, String.class);",
      "info" : "ExpressionStatement[3199-3244]:ExpressionStatement[3225-3270]"
    }, {
      "left" : "testConversion(\"1\", 1, String.class);",
      "right" : "testConversion(\"1\", 1, String.class);",
      "info" : "ExpressionStatement[3253-3290]:ExpressionStatement[3279-3316]"
    }, {
      "left" : "testConversion(\"1\", 1L, String.class);",
      "right" : "testConversion(\"1\", 1L, String.class);",
      "info" : "ExpressionStatement[3299-3337]:ExpressionStatement[3325-3363]"
    }, {
      "left" : "testConversion(\"1.0\", 1.0d, String.class);",
      "right" : "testConversion(\"1.0\", 1.0d, String.class);",
      "info" : "ExpressionStatement[3346-3388]:ExpressionStatement[3372-3414]"
    }, {
      "left" : "testConversion(\"1.0\", 1.0f, String.class);",
      "right" : "testConversion(\"1.0\", 1.0f, String.class);",
      "info" : "ExpressionStatement[3397-3439]:ExpressionStatement[3423-3465]"
    }, {
      "left" : "testConversion(\"1\", BigInteger.ONE, String.class);",
      "right" : "testConversion(\"1\", BigInteger.ONE, String.class);",
      "info" : "ExpressionStatement[3448-3498]:ExpressionStatement[3474-3524]"
    }, {
      "left" : "testConversion(\"1\", BigDecimal.ONE, String.class);",
      "right" : "testConversion(\"1\", BigDecimal.ONE, String.class);",
      "info" : "ExpressionStatement[3507-3557]:ExpressionStatement[3533-3583]"
    }, {
      "left" : "testConversion(zeroDate(), new Date(0), String.class);",
      "right" : "testConversion(zeroDate(), new Date(0), String.class);",
      "info" : "ExpressionStatement[3566-3620]:ExpressionStatement[3592-3646]"
    }, {
      "left" : "testConversion(zeroTime(), new Time(0), String.class);",
      "right" : "testConversion(zeroTime(), new Time(0), String.class);",
      "info" : "ExpressionStatement[3629-3683]:ExpressionStatement[3655-3709]"
    }, {
      "left" : "testConversion(zeroTimestamp(), new Timestamp(0), String.class);",
      "right" : "testConversion(zeroTimestamp(), new Timestamp(0), String.class);",
      "info" : "ExpressionStatement[3692-3756]:ExpressionStatement[3718-3782]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[3768-3773]:MarkerAnnotation[3794-3799]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3778-3784]:Modifier[3804-3810]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[3785-3789]:PrimitiveType[3811-3815]"
    }, {
      "left" : "testToBoolean",
      "right" : "testToBoolean",
      "info" : "SimpleName[3790-3803]:SimpleName[3816-3829]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3806-5867]:Block[3832-5893]"
    }, {
      "left" : "testConversion(false, null, boolean.class);",
      "right" : "testConversion(false, null, boolean.class);",
      "info" : "ExpressionStatement[3816-3859]:ExpressionStatement[3842-3885]"
    }, {
      "left" : "testConversion(false, \"xmf\", boolean.class);",
      "right" : "testConversion(false, \"xmf\", boolean.class);",
      "info" : "ExpressionStatement[3868-3912]:ExpressionStatement[3894-3938]"
    }, {
      "left" : "testConversion(null, null, Boolean.class);",
      "right" : "testConversion(null, null, Boolean.class);",
      "info" : "ExpressionStatement[3921-3963]:ExpressionStatement[3947-3989]"
    }, {
      "left" : "testConversion(true, \"true\", Boolean.class);",
      "right" : "testConversion(true, \"true\", Boolean.class);",
      "info" : "ExpressionStatement[3972-4016]:ExpressionStatement[3998-4042]"
    }, {
      "left" : "testConversion(true, \"1\", Boolean.class);",
      "right" : "testConversion(true, \"1\", Boolean.class);",
      "info" : "ExpressionStatement[4025-4066]:ExpressionStatement[4051-4092]"
    }, {
      "left" : "testConversion(true, \"yes\", Boolean.class);",
      "right" : "testConversion(true, \"yes\", Boolean.class);",
      "info" : "ExpressionStatement[4075-4118]:ExpressionStatement[4101-4144]"
    }, {
      "left" : "testConversion(false, \"false\", Boolean.class);",
      "right" : "testConversion(false, \"false\", Boolean.class);",
      "info" : "ExpressionStatement[4127-4173]:ExpressionStatement[4153-4199]"
    }, {
      "left" : "testConversion(true, \"t\", Boolean.class);",
      "right" : "testConversion(true, \"t\", Boolean.class);",
      "info" : "ExpressionStatement[4182-4223]:ExpressionStatement[4208-4249]"
    }, {
      "left" : "testConversion(false, \"f\", Boolean.class);",
      "right" : "testConversion(false, \"f\", Boolean.class);",
      "info" : "ExpressionStatement[4232-4274]:ExpressionStatement[4258-4300]"
    }, {
      "left" : "testConversion(false, \"0\", Boolean.class);",
      "right" : "testConversion(false, \"0\", Boolean.class);",
      "info" : "ExpressionStatement[4283-4325]:ExpressionStatement[4309-4351]"
    }, {
      "left" : "testConversion(false, \"no\", Boolean.class);",
      "right" : "testConversion(false, \"no\", Boolean.class);",
      "info" : "ExpressionStatement[4334-4377]:ExpressionStatement[4360-4403]"
    }, {
      "left" : "testConversion(null, \"xmf\", Boolean.class);",
      "right" : "testConversion(null, \"xmf\", Boolean.class);",
      "info" : "ExpressionStatement[4386-4429]:ExpressionStatement[4412-4455]"
    }, {
      "left" : "testConversion(true, true, Boolean.class);",
      "right" : "testConversion(true, true, Boolean.class);",
      "info" : "ExpressionStatement[4438-4480]:ExpressionStatement[4464-4506]"
    }, {
      "left" : "testConversion(false, false, Boolean.class);",
      "right" : "testConversion(false, false, Boolean.class);",
      "info" : "ExpressionStatement[4489-4533]:ExpressionStatement[4515-4559]"
    }, {
      "left" : "testConversion(null, (byte) 2, Boolean.class);",
      "right" : "testConversion(null, (byte) 2, Boolean.class);",
      "info" : "ExpressionStatement[4542-4588]:ExpressionStatement[4568-4614]"
    }, {
      "left" : "testConversion(true, (byte) 1, Boolean.class);",
      "right" : "testConversion(true, (byte) 1, Boolean.class);",
      "info" : "ExpressionStatement[4597-4643]:ExpressionStatement[4623-4669]"
    }, {
      "left" : "testConversion(false, (byte) 0, Boolean.class);",
      "right" : "testConversion(false, (byte) 0, Boolean.class);",
      "info" : "ExpressionStatement[4652-4699]:ExpressionStatement[4678-4725]"
    }, {
      "left" : "testConversion(null, (short) 2, Boolean.class);",
      "right" : "testConversion(null, (short) 2, Boolean.class);",
      "info" : "ExpressionStatement[4708-4755]:ExpressionStatement[4734-4781]"
    }, {
      "left" : "testConversion(true, (short) 1, Boolean.class);",
      "right" : "testConversion(true, (short) 1, Boolean.class);",
      "info" : "ExpressionStatement[4764-4811]:ExpressionStatement[4790-4837]"
    }, {
      "left" : "testConversion(false, (short) 0, Boolean.class);",
      "right" : "testConversion(false, (short) 0, Boolean.class);",
      "info" : "ExpressionStatement[4820-4868]:ExpressionStatement[4846-4894]"
    }, {
      "left" : "testConversion(null, 2, Boolean.class);",
      "right" : "testConversion(null, 2, Boolean.class);",
      "info" : "ExpressionStatement[4877-4916]:ExpressionStatement[4903-4942]"
    }, {
      "left" : "testConversion(true, 1, Boolean.class);",
      "right" : "testConversion(true, 1, Boolean.class);",
      "info" : "ExpressionStatement[4925-4964]:ExpressionStatement[4951-4990]"
    }, {
      "left" : "testConversion(false, 0, Boolean.class);",
      "right" : "testConversion(false, 0, Boolean.class);",
      "info" : "ExpressionStatement[4973-5013]:ExpressionStatement[4999-5039]"
    }, {
      "left" : "testConversion(null, 2L, Boolean.class);",
      "right" : "testConversion(null, 2L, Boolean.class);",
      "info" : "ExpressionStatement[5022-5062]:ExpressionStatement[5048-5088]"
    }, {
      "left" : "testConversion(true, 1L, Boolean.class);",
      "right" : "testConversion(true, 1L, Boolean.class);",
      "info" : "ExpressionStatement[5071-5111]:ExpressionStatement[5097-5137]"
    }, {
      "left" : "testConversion(false, 0L, Boolean.class);",
      "right" : "testConversion(false, 0L, Boolean.class);",
      "info" : "ExpressionStatement[5120-5161]:ExpressionStatement[5146-5187]"
    }, {
      "left" : "testConversion(null, 2.0, Boolean.class);",
      "right" : "testConversion(null, 2.0, Boolean.class);",
      "info" : "ExpressionStatement[5170-5211]:ExpressionStatement[5196-5237]"
    }, {
      "left" : "testConversion(true, 1.0, Boolean.class);",
      "right" : "testConversion(true, 1.0, Boolean.class);",
      "info" : "ExpressionStatement[5220-5261]:ExpressionStatement[5246-5287]"
    }, {
      "left" : "testConversion(false, 0.0, Boolean.class);",
      "right" : "testConversion(false, 0.0, Boolean.class);",
      "info" : "ExpressionStatement[5270-5312]:ExpressionStatement[5296-5338]"
    }, {
      "left" : "testConversion(null, BigInteger.TEN, Boolean.class);",
      "right" : "testConversion(null, BigInteger.TEN, Boolean.class);",
      "info" : "ExpressionStatement[5321-5373]:ExpressionStatement[5347-5399]"
    }, {
      "left" : "testConversion(true, BigInteger.ONE, Boolean.class);",
      "right" : "testConversion(true, BigInteger.ONE, Boolean.class);",
      "info" : "ExpressionStatement[5382-5434]:ExpressionStatement[5408-5460]"
    }, {
      "left" : "testConversion(false, BigInteger.ZERO, Boolean.class);",
      "right" : "testConversion(false, BigInteger.ZERO, Boolean.class);",
      "info" : "ExpressionStatement[5443-5497]:ExpressionStatement[5469-5523]"
    }, {
      "left" : "testConversion(null, BigDecimal.TEN, Boolean.class);",
      "right" : "testConversion(null, BigDecimal.TEN, Boolean.class);",
      "info" : "ExpressionStatement[5506-5558]:ExpressionStatement[5532-5584]"
    }, {
      "left" : "testConversion(true, BigDecimal.ONE, Boolean.class);",
      "right" : "testConversion(true, BigDecimal.ONE, Boolean.class);",
      "info" : "ExpressionStatement[5567-5619]:ExpressionStatement[5593-5645]"
    }, {
      "left" : "testConversion(false, BigDecimal.ZERO, Boolean.class);",
      "right" : "testConversion(false, BigDecimal.ZERO, Boolean.class);",
      "info" : "ExpressionStatement[5628-5682]:ExpressionStatement[5654-5708]"
    }, {
      "left" : "testConversion(null, new Date(0), Boolean.class);",
      "right" : "testConversion(null, new Date(0), Boolean.class);",
      "info" : "ExpressionStatement[5691-5740]:ExpressionStatement[5717-5766]"
    }, {
      "left" : "testConversion(null, new Time(0), Boolean.class);",
      "right" : "testConversion(null, new Time(0), Boolean.class);",
      "info" : "ExpressionStatement[5749-5798]:ExpressionStatement[5775-5824]"
    }, {
      "left" : "testConversion(null, new Timestamp(0), Boolean.class);",
      "right" : "testConversion(null, new Timestamp(0), Boolean.class);",
      "info" : "ExpressionStatement[5807-5861]:ExpressionStatement[5833-5887]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[5873-5878]:MarkerAnnotation[5899-5904]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5883-5889]:Modifier[5909-5915]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[5890-5894]:PrimitiveType[5916-5920]"
    }, {
      "left" : "testToByte",
      "right" : "testToByte",
      "info" : "SimpleName[5895-5905]:SimpleName[5921-5931]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5908-6781]:Block[5934-6807]"
    }, {
      "left" : "testConversion(null, null, Byte.class);",
      "right" : "testConversion(null, null, Byte.class);",
      "info" : "ExpressionStatement[5918-5957]:ExpressionStatement[5944-5983]"
    }, {
      "left" : "testConversion((byte) 0, null, byte.class);",
      "right" : "testConversion((byte) 0, null, byte.class);",
      "info" : "ExpressionStatement[5966-6009]:ExpressionStatement[5992-6035]"
    }, {
      "left" : "testConversion((byte) 1, \"1\", Byte.class);",
      "right" : "testConversion((byte) 1, \"1\", Byte.class);",
      "info" : "ExpressionStatement[6018-6060]:ExpressionStatement[6044-6086]"
    }, {
      "left" : "testConversion((byte) 1, true, Byte.class);",
      "right" : "testConversion((byte) 1, true, Byte.class);",
      "info" : "ExpressionStatement[6069-6112]:ExpressionStatement[6095-6138]"
    }, {
      "left" : "testConversion((byte) 0, false, Byte.class);",
      "right" : "testConversion((byte) 0, false, Byte.class);",
      "info" : "ExpressionStatement[6121-6165]:ExpressionStatement[6147-6191]"
    }, {
      "left" : "testConversion((byte) 1, (byte) 1, Byte.class);",
      "right" : "testConversion((byte) 1, (byte) 1, Byte.class);",
      "info" : "ExpressionStatement[6174-6221]:ExpressionStatement[6200-6247]"
    }, {
      "left" : "testConversion((byte) 1, (short) 1, Byte.class);",
      "right" : "testConversion((byte) 1, (short) 1, Byte.class);",
      "info" : "ExpressionStatement[6230-6278]:ExpressionStatement[6256-6304]"
    }, {
      "left" : "testConversion((byte) 1, 1, Byte.class);",
      "right" : "testConversion((byte) 1, 1, Byte.class);",
      "info" : "ExpressionStatement[6287-6327]:ExpressionStatement[6313-6353]"
    }, {
      "left" : "testConversion((byte) 1, 1L, Byte.class);",
      "right" : "testConversion((byte) 1, 1L, Byte.class);",
      "info" : "ExpressionStatement[6336-6377]:ExpressionStatement[6362-6403]"
    }, {
      "left" : "testConversion((byte) 1, 1.0d, Byte.class);",
      "right" : "testConversion((byte) 1, 1.0d, Byte.class);",
      "info" : "ExpressionStatement[6386-6429]:ExpressionStatement[6412-6455]"
    }, {
      "left" : "testConversion((byte) 1, 1.0f, Byte.class);",
      "right" : "testConversion((byte) 1, 1.0f, Byte.class);",
      "info" : "ExpressionStatement[6438-6481]:ExpressionStatement[6464-6507]"
    }, {
      "left" : "testConversion((byte) 1, BigInteger.ONE, Byte.class);",
      "right" : "testConversion((byte) 1, BigInteger.ONE, Byte.class);",
      "info" : "ExpressionStatement[6490-6543]:ExpressionStatement[6516-6569]"
    }, {
      "left" : "testConversion((byte) 1, BigDecimal.ONE, Byte.class);",
      "right" : "testConversion((byte) 1, BigDecimal.ONE, Byte.class);",
      "info" : "ExpressionStatement[6552-6605]:ExpressionStatement[6578-6631]"
    }, {
      "left" : "testConversion(null, new Date(0), Byte.class);",
      "right" : "testConversion(null, new Date(0), Byte.class);",
      "info" : "ExpressionStatement[6614-6660]:ExpressionStatement[6640-6686]"
    }, {
      "left" : "testConversion(null, new Time(0), Byte.class);",
      "right" : "testConversion(null, new Time(0), Byte.class);",
      "info" : "ExpressionStatement[6669-6715]:ExpressionStatement[6695-6741]"
    }, {
      "left" : "testConversion(null, new Timestamp(0), Byte.class);",
      "right" : "testConversion(null, new Timestamp(0), Byte.class);",
      "info" : "ExpressionStatement[6724-6775]:ExpressionStatement[6750-6801]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[6787-6792]:MarkerAnnotation[6813-6818]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6797-6803]:Modifier[6823-6829]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6804-6808]:PrimitiveType[6830-6834]"
    }, {
      "left" : "testToShort",
      "right" : "testToShort",
      "info" : "SimpleName[6809-6820]:SimpleName[6835-6846]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6823-7724]:Block[6849-7750]"
    }, {
      "left" : "testConversion(null, null, Short.class);",
      "right" : "testConversion(null, null, Short.class);",
      "info" : "ExpressionStatement[6833-6873]:ExpressionStatement[6859-6899]"
    }, {
      "left" : "testConversion((short) 0, null, short.class);",
      "right" : "testConversion((short) 0, null, short.class);",
      "info" : "ExpressionStatement[6882-6927]:ExpressionStatement[6908-6953]"
    }, {
      "left" : "testConversion((short) 1, \"1\", Short.class);",
      "right" : "testConversion((short) 1, \"1\", Short.class);",
      "info" : "ExpressionStatement[6936-6980]:ExpressionStatement[6962-7006]"
    }, {
      "left" : "testConversion((short) 1, true, Short.class);",
      "right" : "testConversion((short) 1, true, Short.class);",
      "info" : "ExpressionStatement[6989-7034]:ExpressionStatement[7015-7060]"
    }, {
      "left" : "testConversion((short) 0, false, Short.class);",
      "right" : "testConversion((short) 0, false, Short.class);",
      "info" : "ExpressionStatement[7043-7089]:ExpressionStatement[7069-7115]"
    }, {
      "left" : "testConversion((short) 1, (byte) 1, Short.class);",
      "right" : "testConversion((short) 1, (byte) 1, Short.class);",
      "info" : "ExpressionStatement[7098-7147]:ExpressionStatement[7124-7173]"
    }, {
      "left" : "testConversion((short) 1, (short) 1, Short.class);",
      "right" : "testConversion((short) 1, (short) 1, Short.class);",
      "info" : "ExpressionStatement[7156-7206]:ExpressionStatement[7182-7232]"
    }, {
      "left" : "testConversion((short) 1, 1, Short.class);",
      "right" : "testConversion((short) 1, 1, Short.class);",
      "info" : "ExpressionStatement[7215-7257]:ExpressionStatement[7241-7283]"
    }, {
      "left" : "testConversion((short) 1, 1L, Short.class);",
      "right" : "testConversion((short) 1, 1L, Short.class);",
      "info" : "ExpressionStatement[7266-7309]:ExpressionStatement[7292-7335]"
    }, {
      "left" : "testConversion((short) 1, 1.0d, Short.class);",
      "right" : "testConversion((short) 1, 1.0d, Short.class);",
      "info" : "ExpressionStatement[7318-7363]:ExpressionStatement[7344-7389]"
    }, {
      "left" : "testConversion((short) 1, 1.0f, Short.class);",
      "right" : "testConversion((short) 1, 1.0f, Short.class);",
      "info" : "ExpressionStatement[7372-7417]:ExpressionStatement[7398-7443]"
    }, {
      "left" : "testConversion((short) 1, BigInteger.ONE, Short.class);",
      "right" : "testConversion((short) 1, BigInteger.ONE, Short.class);",
      "info" : "ExpressionStatement[7426-7481]:ExpressionStatement[7452-7507]"
    }, {
      "left" : "testConversion((short) 1, BigDecimal.ONE, Short.class);",
      "right" : "testConversion((short) 1, BigDecimal.ONE, Short.class);",
      "info" : "ExpressionStatement[7490-7545]:ExpressionStatement[7516-7571]"
    }, {
      "left" : "testConversion(null, new Date(0), Short.class);",
      "right" : "testConversion(null, new Date(0), Short.class);",
      "info" : "ExpressionStatement[7554-7601]:ExpressionStatement[7580-7627]"
    }, {
      "left" : "testConversion(null, new Time(0), Short.class);",
      "right" : "testConversion(null, new Time(0), Short.class);",
      "info" : "ExpressionStatement[7610-7657]:ExpressionStatement[7636-7683]"
    }, {
      "left" : "testConversion(null, new Timestamp(0), Short.class);",
      "right" : "testConversion(null, new Timestamp(0), Short.class);",
      "info" : "ExpressionStatement[7666-7718]:ExpressionStatement[7692-7744]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[7730-7735]:MarkerAnnotation[7756-7761]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7740-7746]:Modifier[7766-7772]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7747-7751]:PrimitiveType[7773-7777]"
    }, {
      "left" : "testToInteger",
      "right" : "testToInteger",
      "info" : "SimpleName[7752-7765]:SimpleName[7778-7791]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7768-8601]:Block[7794-8627]"
    }, {
      "left" : "testConversion(null, null, Integer.class);",
      "right" : "testConversion(null, null, Integer.class);",
      "info" : "ExpressionStatement[7778-7820]:ExpressionStatement[7804-7846]"
    }, {
      "left" : "testConversion(0, null, int.class);",
      "right" : "testConversion(0, null, int.class);",
      "info" : "ExpressionStatement[7829-7864]:ExpressionStatement[7855-7890]"
    }, {
      "left" : "testConversion(1, \"1\", Integer.class);",
      "right" : "testConversion(1, \"1\", Integer.class);",
      "info" : "ExpressionStatement[7873-7911]:ExpressionStatement[7899-7937]"
    }, {
      "left" : "testConversion(1, true, Integer.class);",
      "right" : "testConversion(1, true, Integer.class);",
      "info" : "ExpressionStatement[7920-7959]:ExpressionStatement[7946-7985]"
    }, {
      "left" : "testConversion(0, false, Integer.class);",
      "right" : "testConversion(0, false, Integer.class);",
      "info" : "ExpressionStatement[7968-8008]:ExpressionStatement[7994-8034]"
    }, {
      "left" : "testConversion(1, (byte) 1, Integer.class);",
      "right" : "testConversion(1, (byte) 1, Integer.class);",
      "info" : "ExpressionStatement[8017-8060]:ExpressionStatement[8043-8086]"
    }, {
      "left" : "testConversion(1, (short) 1, Integer.class);",
      "right" : "testConversion(1, (short) 1, Integer.class);",
      "info" : "ExpressionStatement[8069-8113]:ExpressionStatement[8095-8139]"
    }, {
      "left" : "testConversion(1, 1, Integer.class);",
      "right" : "testConversion(1, 1, Integer.class);",
      "info" : "ExpressionStatement[8122-8158]:ExpressionStatement[8148-8184]"
    }, {
      "left" : "testConversion(1, 1L, Integer.class);",
      "right" : "testConversion(1, 1L, Integer.class);",
      "info" : "ExpressionStatement[8167-8204]:ExpressionStatement[8193-8230]"
    }, {
      "left" : "testConversion(1, 1.0d, Integer.class);",
      "right" : "testConversion(1, 1.0d, Integer.class);",
      "info" : "ExpressionStatement[8213-8252]:ExpressionStatement[8239-8278]"
    }, {
      "left" : "testConversion(1, 1.0f, Integer.class);",
      "right" : "testConversion(1, 1.0f, Integer.class);",
      "info" : "ExpressionStatement[8261-8300]:ExpressionStatement[8287-8326]"
    }, {
      "left" : "testConversion(1, BigInteger.ONE, Integer.class);",
      "right" : "testConversion(1, BigInteger.ONE, Integer.class);",
      "info" : "ExpressionStatement[8309-8358]:ExpressionStatement[8335-8384]"
    }, {
      "left" : "testConversion(1, BigDecimal.ONE, Integer.class);",
      "right" : "testConversion(1, BigDecimal.ONE, Integer.class);",
      "info" : "ExpressionStatement[8367-8416]:ExpressionStatement[8393-8442]"
    }, {
      "left" : "testConversion(null, new Date(0), Integer.class);",
      "right" : "testConversion(null, new Date(0), Integer.class);",
      "info" : "ExpressionStatement[8425-8474]:ExpressionStatement[8451-8500]"
    }, {
      "left" : "testConversion(null, new Time(0), Integer.class);",
      "right" : "testConversion(null, new Time(0), Integer.class);",
      "info" : "ExpressionStatement[8483-8532]:ExpressionStatement[8509-8558]"
    }, {
      "left" : "testConversion(null, new Timestamp(0), Integer.class);",
      "right" : "testConversion(null, new Timestamp(0), Integer.class);",
      "info" : "ExpressionStatement[8541-8595]:ExpressionStatement[8567-8621]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[8607-8612]:MarkerAnnotation[8633-8638]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8617-8623]:Modifier[8643-8649]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[8624-8628]:PrimitiveType[8650-8654]"
    }, {
      "left" : "testToLong",
      "right" : "testToLong",
      "info" : "SimpleName[8629-8639]:SimpleName[8655-8665]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8642-10363]:Block[8668-10546]"
    }, {
      "left" : "testConversion(null, null, Long.class);",
      "right" : "testConversion(null, null, Long.class);",
      "info" : "ExpressionStatement[8652-8691]:ExpressionStatement[8678-8717]"
    }, {
      "left" : "testConversion(0L, null, long.class);",
      "right" : "testConversion(0L, null, long.class);",
      "info" : "ExpressionStatement[8700-8737]:ExpressionStatement[8726-8763]"
    }, {
      "left" : "testConversion(1L, \"1\", Long.class);",
      "right" : "testConversion(1L, \"1\", Long.class);",
      "info" : "ExpressionStatement[8746-8782]:ExpressionStatement[8772-8808]"
    }, {
      "left" : "testConversion(1L, true, Long.class);",
      "right" : "testConversion(1L, true, Long.class);",
      "info" : "ExpressionStatement[8791-8828]:ExpressionStatement[8817-8854]"
    }, {
      "left" : "testConversion(0L, false, Long.class);",
      "right" : "testConversion(0L, false, Long.class);",
      "info" : "ExpressionStatement[8837-8875]:ExpressionStatement[8863-8901]"
    }, {
      "left" : "testConversion(1L, (byte) 1, Long.class);",
      "right" : "testConversion(1L, (byte) 1, Long.class);",
      "info" : "ExpressionStatement[8884-8925]:ExpressionStatement[8910-8951]"
    }, {
      "left" : "testConversion(1L, (short) 1, Long.class);",
      "right" : "testConversion(1L, (short) 1, Long.class);",
      "info" : "ExpressionStatement[8934-8976]:ExpressionStatement[8960-9002]"
    }, {
      "left" : "testConversion(1L, 1, Long.class);",
      "right" : "testConversion(1L, 1, Long.class);",
      "info" : "ExpressionStatement[8985-9019]:ExpressionStatement[9011-9045]"
    }, {
      "left" : "testConversion(1L, 1L, Long.class);",
      "right" : "testConversion(1L, 1L, Long.class);",
      "info" : "ExpressionStatement[9028-9063]:ExpressionStatement[9054-9089]"
    }, {
      "left" : "testConversion(1L, 1.0d, Long.class);",
      "right" : "testConversion(1L, 1.0d, Long.class);",
      "info" : "ExpressionStatement[9072-9109]:ExpressionStatement[9098-9135]"
    }, {
      "left" : "testConversion(1L, 1.0f, Long.class);",
      "right" : "testConversion(1L, 1.0f, Long.class);",
      "info" : "ExpressionStatement[9118-9155]:ExpressionStatement[9144-9181]"
    }, {
      "left" : "testConversion(1L, BigInteger.ONE, Long.class);",
      "right" : "testConversion(1L, BigInteger.ONE, Long.class);",
      "info" : "ExpressionStatement[9164-9211]:ExpressionStatement[9190-9237]"
    }, {
      "left" : "testConversion(1L, BigDecimal.ONE, Long.class);",
      "right" : "testConversion(1L, BigDecimal.ONE, Long.class);",
      "info" : "ExpressionStatement[9220-9267]:ExpressionStatement[9246-9293]"
    }, {
      "left" : "Date date = Date.valueOf(\"2001-02-03\");",
      "right" : "Date date = Date.valueOf(\"2001-02-03\");",
      "info" : "VariableDeclarationStatement[9278-9317]:VariableDeclarationStatement[9304-9343]"
    }, {
      "left" : "testConversion(date.getTime(), date, Long.class);",
      "right" : "testConversion(date.getTime(), date, Long.class);",
      "info" : "ExpressionStatement[9326-9375]:ExpressionStatement[9352-9401]"
    }, {
      "left" : "testConversion(date.getTime(), date.toLocalDate(), Long.class);",
      "right" : "testConversion(date.getTime(), date.toLocalDate(), Long.class);",
      "info" : "ExpressionStatement[9384-9447]:ExpressionStatement[9410-9473]"
    }, {
      "left" : "Time time = Time.valueOf(\"04:05:06\");",
      "right" : "Time time = Time.valueOf(\"04:05:06\");",
      "info" : "VariableDeclarationStatement[9458-9495]:VariableDeclarationStatement[9484-9521]"
    }, {
      "left" : "testConversion(time.getTime(), time, Long.class);",
      "right" : "testConversion(time.getTime(), time, Long.class);",
      "info" : "ExpressionStatement[9504-9553]:ExpressionStatement[9530-9579]"
    }, {
      "left" : "testConversion(time.getTime(), time.toLocalTime(), Long.class);",
      "right" : "testConversion(time.getTime(), time.toLocalTime(), Long.class);",
      "info" : "ExpressionStatement[9562-9625]:ExpressionStatement[9588-9651]"
    }, {
      "left" : "OffsetTime t1 = OffsetTime.parse(\"04:05:06.789Z\");",
      "right" : "OffsetTime t1 = OffsetTime.parse(\"04:05:06.789Z\");",
      "info" : "VariableDeclarationStatement[9635-9685]:VariableDeclarationStatement[9661-9711]"
    }, {
      "left" : "OffsetTime t2 = OffsetTime.parse(\"04:05:06.789+02:00\");",
      "right" : "OffsetTime t2 = OffsetTime.parse(\"04:05:06.789+02:00\");",
      "info" : "VariableDeclarationStatement[9694-9749]:VariableDeclarationStatement[9720-9775]"
    }, {
      "left" : "testConversion(millis(t1), t1, Long.class);",
      "right" : "testConversion(millis(t1), t1, Long.class);",
      "info" : "ExpressionStatement[9758-9801]:ExpressionStatement[9784-9827]"
    }, {
      "left" : "testConversion(millis(t2), t2, Long.class);",
      "right" : "testConversion(millis(t2), t2, Long.class);",
      "info" : "ExpressionStatement[9810-9853]:ExpressionStatement[9836-9879]"
    }, {
      "left" : "Timestamp timestamp = Timestamp.valueOf(\"2001-02-03 04:05:06.789\");",
      "right" : "Timestamp timestamp = Timestamp.valueOf(\"2001-02-03 04:05:06.789\");",
      "info" : "VariableDeclarationStatement[9864-9931]:VariableDeclarationStatement[9890-9957]"
    }, {
      "left" : "testConversion(timestamp.getTime(), timestamp, Long.class);",
      "right" : "testConversion(timestamp.getTime(), timestamp, Long.class);",
      "info" : "ExpressionStatement[9940-9999]:ExpressionStatement[9966-10025]"
    }, {
      "left" : "testConversion(timestamp.getTime(), timestamp.toLocalDateTime(), Long.class);",
      "right" : "testConversion(timestamp.getTime(), timestamp.toLocalDateTime(), Long.class);",
      "info" : "ExpressionStatement[10008-10085]:ExpressionStatement[10034-10111]"
    }, {
      "left" : "OffsetDateTime dt1 = OffsetDateTime.parse(\"2001-02-03T04:05:06.789Z\");",
      "right" : "OffsetDateTime dt1 = OffsetDateTime.parse(\"2001-02-03T04:05:06.789Z\");",
      "info" : "VariableDeclarationStatement[10095-10165]:VariableDeclarationStatement[10121-10191]"
    }, {
      "left" : "OffsetDateTime dt2 = OffsetDateTime.parse(\"2001-02-03T04:05:06.789+02:00\");",
      "right" : "OffsetDateTime dt2 = OffsetDateTime.parse(\"2001-02-03T04:05:06.789+02:00\");",
      "info" : "VariableDeclarationStatement[10174-10249]:VariableDeclarationStatement[10200-10275]"
    }, {
      "left" : "testConversion(millis(dt1), dt1, Long.class);",
      "right" : "testConversion(millis(dt1), dt1, Long.class);",
      "info" : "ExpressionStatement[10258-10303]:ExpressionStatement[10284-10329]"
    }, {
      "left" : "testConversion(millis(dt1), dt1, Long.class);",
      "right" : "testConversion(0L, Instant.ofEpochMilli(0), Long.class);",
      "info" : "ExpressionStatement[10258-10303]:ExpressionStatement[10430-10486]"
    }, {
      "left" : "millis",
      "right" : "ofEpochMilli",
      "info" : "SimpleName[10273-10279]:SimpleName[10457-10469]"
    }, {
      "left" : "testConversion(millis(dt2), dt2, Long.class);",
      "right" : "testConversion(millis(dt2), dt2, Long.class);",
      "info" : "ExpressionStatement[10312-10357]:ExpressionStatement[10338-10383]"
    }, {
      "left" : "testConversion(millis(dt2), dt2, Long.class);",
      "right" : "testConversion(millis(now), now, Long.class);",
      "info" : "ExpressionStatement[10312-10357]:ExpressionStatement[10495-10540]"
    }, {
      "left" : "dt2",
      "right" : "now",
      "info" : "SimpleName[10334-10337]:SimpleName[10517-10520]"
    }, {
      "left" : "dt2",
      "right" : "now",
      "info" : "SimpleName[10340-10343]:SimpleName[10523-10526]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[10369-10374]:MarkerAnnotation[10552-10557]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10379-10385]:Modifier[10562-10568]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[10386-10390]:PrimitiveType[10569-10573]"
    }, {
      "left" : "testToBigInteger",
      "right" : "testToBigInteger",
      "info" : "SimpleName[10391-10407]:SimpleName[10574-10590]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10410-11388]:Block[10593-11571]"
    }, {
      "left" : "testConversion(null, null, BigInteger.class);",
      "right" : "testConversion(null, null, BigInteger.class);",
      "info" : "ExpressionStatement[10420-10465]:ExpressionStatement[10603-10648]"
    }, {
      "left" : "testConversion(BigInteger.ONE, \"1\", BigInteger.class);",
      "right" : "testConversion(BigInteger.ONE, \"1\", BigInteger.class);",
      "info" : "ExpressionStatement[10474-10528]:ExpressionStatement[10657-10711]"
    }, {
      "left" : "testConversion(BigInteger.ONE, true, BigInteger.class);",
      "right" : "testConversion(BigInteger.ONE, true, BigInteger.class);",
      "info" : "ExpressionStatement[10537-10592]:ExpressionStatement[10720-10775]"
    }, {
      "left" : "testConversion(BigInteger.ZERO, false, BigInteger.class);",
      "right" : "testConversion(BigInteger.ZERO, false, BigInteger.class);",
      "info" : "ExpressionStatement[10601-10658]:ExpressionStatement[10784-10841]"
    }, {
      "left" : "testConversion(BigInteger.ONE, (byte) 1, BigInteger.class);",
      "right" : "testConversion(BigInteger.ONE, (byte) 1, BigInteger.class);",
      "info" : "ExpressionStatement[10667-10726]:ExpressionStatement[10850-10909]"
    }, {
      "left" : "testConversion(BigInteger.ONE, (short) 1, BigInteger.class);",
      "right" : "testConversion(BigInteger.ONE, (short) 1, BigInteger.class);",
      "info" : "ExpressionStatement[10735-10795]:ExpressionStatement[10918-10978]"
    }, {
      "left" : "testConversion(BigInteger.ONE, 1, BigInteger.class);",
      "right" : "testConversion(BigInteger.ONE, 1, BigInteger.class);",
      "info" : "ExpressionStatement[10804-10856]:ExpressionStatement[10987-11039]"
    }, {
      "left" : "testConversion(BigInteger.ONE, 1L, BigInteger.class);",
      "right" : "testConversion(BigInteger.ONE, 1L, BigInteger.class);",
      "info" : "ExpressionStatement[10865-10918]:ExpressionStatement[11048-11101]"
    }, {
      "left" : "testConversion(BigInteger.ONE, 1.0d, BigInteger.class);",
      "right" : "testConversion(BigInteger.ONE, 1.0d, BigInteger.class);",
      "info" : "ExpressionStatement[10927-10982]:ExpressionStatement[11110-11165]"
    }, {
      "left" : "testConversion(BigInteger.ONE, 1.0f, BigInteger.class);",
      "right" : "testConversion(BigInteger.ONE, 1.0f, BigInteger.class);",
      "info" : "ExpressionStatement[10991-11046]:ExpressionStatement[11174-11229]"
    }, {
      "left" : "testConversion(BigInteger.ONE, BigInteger.ONE, BigInteger.class);",
      "right" : "testConversion(BigInteger.ONE, BigInteger.ONE, BigInteger.class);",
      "info" : "ExpressionStatement[11055-11120]:ExpressionStatement[11238-11303]"
    }, {
      "left" : "testConversion(BigInteger.ONE, BigDecimal.ONE, BigInteger.class);",
      "right" : "testConversion(BigInteger.ONE, BigDecimal.ONE, BigInteger.class);",
      "info" : "ExpressionStatement[11129-11194]:ExpressionStatement[11312-11377]"
    }, {
      "left" : "testConversion(null, new Date(0), BigInteger.class);",
      "right" : "testConversion(null, new Date(0), BigInteger.class);",
      "info" : "ExpressionStatement[11203-11255]:ExpressionStatement[11386-11438]"
    }, {
      "left" : "testConversion(null, new Time(0), BigInteger.class);",
      "right" : "testConversion(null, new Time(0), BigInteger.class);",
      "info" : "ExpressionStatement[11264-11316]:ExpressionStatement[11447-11499]"
    }, {
      "left" : "testConversion(null, new Timestamp(0), BigInteger.class);",
      "right" : "testConversion(null, new Timestamp(0), BigInteger.class);",
      "info" : "ExpressionStatement[11325-11382]:ExpressionStatement[11508-11565]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[11394-11399]:MarkerAnnotation[11577-11582]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11404-11410]:Modifier[11587-11593]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[11411-11415]:PrimitiveType[11594-11598]"
    }, {
      "left" : "testToBigDecimal",
      "right" : "testToBigDecimal",
      "info" : "SimpleName[11416-11432]:SimpleName[11599-11615]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11435-12427]:Block[11618-12610]"
    }, {
      "left" : "testConversion(null, null, BigDecimal.class);",
      "right" : "testConversion(null, null, BigDecimal.class);",
      "info" : "ExpressionStatement[11445-11490]:ExpressionStatement[11628-11673]"
    }, {
      "left" : "testConversion(BigDecimal.ONE, \"1\", BigDecimal.class);",
      "right" : "testConversion(BigDecimal.ONE, \"1\", BigDecimal.class);",
      "info" : "ExpressionStatement[11499-11553]:ExpressionStatement[11682-11736]"
    }, {
      "left" : "testConversion(BigDecimal.ONE, true, BigDecimal.class);",
      "right" : "testConversion(BigDecimal.ONE, true, BigDecimal.class);",
      "info" : "ExpressionStatement[11562-11617]:ExpressionStatement[11745-11800]"
    }, {
      "left" : "testConversion(BigDecimal.ZERO, false, BigDecimal.class);",
      "right" : "testConversion(BigDecimal.ZERO, false, BigDecimal.class);",
      "info" : "ExpressionStatement[11626-11683]:ExpressionStatement[11809-11866]"
    }, {
      "left" : "testConversion(BigDecimal.ONE, (byte) 1, BigDecimal.class);",
      "right" : "testConversion(BigDecimal.ONE, (byte) 1, BigDecimal.class);",
      "info" : "ExpressionStatement[11692-11751]:ExpressionStatement[11875-11934]"
    }, {
      "left" : "testConversion(BigDecimal.ONE, (short) 1, BigDecimal.class);",
      "right" : "testConversion(BigDecimal.ONE, (short) 1, BigDecimal.class);",
      "info" : "ExpressionStatement[11760-11820]:ExpressionStatement[11943-12003]"
    }, {
      "left" : "testConversion(BigDecimal.ONE, 1, BigDecimal.class);",
      "right" : "testConversion(BigDecimal.ONE, 1, BigDecimal.class);",
      "info" : "ExpressionStatement[11829-11881]:ExpressionStatement[12012-12064]"
    }, {
      "left" : "testConversion(BigDecimal.ONE, 1L, BigDecimal.class);",
      "right" : "testConversion(BigDecimal.ONE, 1L, BigDecimal.class);",
      "info" : "ExpressionStatement[11890-11943]:ExpressionStatement[12073-12126]"
    }, {
      "left" : "testConversion(new BigDecimal(\"1.0\"), 1.0d, BigDecimal.class);",
      "right" : "testConversion(new BigDecimal(\"1.0\"), 1.0d, BigDecimal.class);",
      "info" : "ExpressionStatement[11952-12014]:ExpressionStatement[12135-12197]"
    }, {
      "left" : "testConversion(new BigDecimal(\"1.0\"), 1.0f, BigDecimal.class);",
      "right" : "testConversion(new BigDecimal(\"1.0\"), 1.0f, BigDecimal.class);",
      "info" : "ExpressionStatement[12023-12085]:ExpressionStatement[12206-12268]"
    }, {
      "left" : "testConversion(BigDecimal.ONE, BigInteger.ONE, BigDecimal.class);",
      "right" : "testConversion(BigDecimal.ONE, BigInteger.ONE, BigDecimal.class);",
      "info" : "ExpressionStatement[12094-12159]:ExpressionStatement[12277-12342]"
    }, {
      "left" : "testConversion(BigDecimal.ONE, BigDecimal.ONE, BigDecimal.class);",
      "right" : "testConversion(BigDecimal.ONE, BigDecimal.ONE, BigDecimal.class);",
      "info" : "ExpressionStatement[12168-12233]:ExpressionStatement[12351-12416]"
    }, {
      "left" : "testConversion(null, new Date(0), BigDecimal.class);",
      "right" : "testConversion(null, new Date(0), BigDecimal.class);",
      "info" : "ExpressionStatement[12242-12294]:ExpressionStatement[12425-12477]"
    }, {
      "left" : "testConversion(null, new Time(0), BigDecimal.class);",
      "right" : "testConversion(null, new Time(0), BigDecimal.class);",
      "info" : "ExpressionStatement[12303-12355]:ExpressionStatement[12486-12538]"
    }, {
      "left" : "testConversion(null, new Timestamp(0), BigDecimal.class);",
      "right" : "testConversion(null, new Timestamp(0), BigDecimal.class);",
      "info" : "ExpressionStatement[12364-12421]:ExpressionStatement[12547-12604]"
    }, {
      "left" : "@SuppressWarnings(\"unchecked\")",
      "right" : "@SuppressWarnings(\"unchecked\")",
      "info" : "SingleMemberAnnotation[12433-12463]:SingleMemberAnnotation[12616-12646]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[12468-12475]:Modifier[12651-12658]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[12476-12482]:Modifier[12659-12665]"
    }, {
      "left" : "T",
      "right" : "T",
      "info" : "TypeParameter[12484-12485]:TypeParameter[12667-12668]"
    }, {
      "left" : "U",
      "right" : "U",
      "info" : "TypeParameter[12487-12488]:TypeParameter[12670-12671]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[12490-12494]:PrimitiveType[12673-12677]"
    }, {
      "left" : "testConversion",
      "right" : "testConversion",
      "info" : "SimpleName[12495-12509]:SimpleName[12678-12692]"
    }, {
      "left" : "U expected",
      "right" : "U expected",
      "info" : "SingleVariableDeclaration[12510-12520]:SingleVariableDeclaration[12693-12703]"
    }, {
      "left" : "T from",
      "right" : "T from",
      "info" : "SingleVariableDeclaration[12522-12528]:SingleVariableDeclaration[12705-12711]"
    }, {
      "left" : "Class<U> toClass",
      "right" : "Class<U> toClass",
      "info" : "SingleVariableDeclaration[12530-12546]:SingleVariableDeclaration[12713-12729]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12548-14248]:Block[12731-14431]"
    }, {
      "left" : "if (from != null)",
      "right" : "if (from != null)",
      "info" : "IfStatement[12558-12728]:IfStatement[12741-12911]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12576-12728]:Block[12759-12911]"
    }, {
      "left" : "assertEquals(from, Convert.convert(from, Object.class));",
      "right" : "assertEquals(from, Convert.convert(from, Object.class));",
      "info" : "ExpressionStatement[12590-12646]:ExpressionStatement[12773-12829]"
    }, {
      "left" : "assertEquals(from, Convert.convert(from, from.getClass()));",
      "right" : "assertEquals(from, Convert.convert(from, from.getClass()));",
      "info" : "ExpressionStatement[12659-12718]:ExpressionStatement[12842-12901]"
    }, {
      "left" : "U conv1 = Convert.convert(from, toClass);",
      "right" : "U conv1 = Convert.convert(from, toClass);",
      "info" : "VariableDeclarationStatement[12738-12779]:VariableDeclarationStatement[12921-12962]"
    }, {
      "left" : "assertEquals(expected, conv1);",
      "right" : "assertEquals(expected, conv1);",
      "info" : "ExpressionStatement[12788-12818]:ExpressionStatement[12971-13001]"
    }, {
      "left" : "if (toClass.isPrimitive())",
      "right" : "if (toClass.isPrimitive())",
      "info" : "IfStatement[12828-13100]:IfStatement[13011-13283]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12855-12946]:Block[13038-13129]"
    }, {
      "left" : "assertTrue(wrapper(toClass).isInstance(conv1));",
      "right" : "assertTrue(wrapper(toClass).isInstance(conv1));",
      "info" : "ExpressionStatement[12869-12916]:ExpressionStatement[13052-13099]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[12929-12936]:ReturnStatement[13112-13119]"
    }, {
      "left" : "if (expected == null)",
      "right" : "if (expected == null)",
      "info" : "IfStatement[12960-13100]:IfStatement[13143-13283]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12982-13024]:Block[13165-13207]"
    }, {
      "left" : "assertNull(conv1);",
      "right" : "assertNull(conv1);",
      "info" : "ExpressionStatement[12996-13014]:ExpressionStatement[13179-13197]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13038-13100]:Block[13221-13283]"
    }, {
      "left" : "assertTrue(toClass.isInstance(conv1));",
      "right" : "assertTrue(toClass.isInstance(conv1));",
      "info" : "ExpressionStatement[13052-13090]:ExpressionStatement[13235-13273]"
    }, {
      "left" : "Class<?> toArrayClass = Array.newInstance(toClass, 0).getClass();",
      "right" : "Class<?> toArrayClass = Array.newInstance(toClass, 0).getClass();",
      "info" : "VariableDeclarationStatement[13110-13175]:VariableDeclarationStatement[13293-13358]"
    }, {
      "left" : "Object[] conv2 = Convert.convert(new Object[] { from, from }, new Class[] { toClass, toClass });",
      "right" : "Object[] conv2 = Convert.convert(new Object[] { from, from }, new Class[] { toClass, toClass });",
      "info" : "VariableDeclarationStatement[13185-13281]:VariableDeclarationStatement[13368-13464]"
    }, {
      "left" : "U[] conv3 = (U[]) Convert.convert(new Object[] { from, from }, toClass);",
      "right" : "U[] conv3 = (U[]) Convert.convert(new Object[] { from, from }, toClass);",
      "info" : "VariableDeclarationStatement[13290-13362]:VariableDeclarationStatement[13473-13545]"
    }, {
      "left" : "U[] conv4 = (U[]) Convert.convertArray(new Object[] { from, from }, toClass);",
      "right" : "U[] conv4 = (U[]) Convert.convertArray(new Object[] { from, from }, toClass);",
      "info" : "VariableDeclarationStatement[13371-13448]:VariableDeclarationStatement[13554-13631]"
    }, {
      "left" : "U[] conv5 = (U[]) Convert.convertArray(new Object[] { from, from }, toArrayClass);",
      "right" : "U[] conv5 = (U[]) Convert.convertArray(new Object[] { from, from }, toArrayClass);",
      "info" : "VariableDeclarationStatement[13457-13539]:VariableDeclarationStatement[13640-13722]"
    }, {
      "left" : "assertEquals(2, conv2.length);",
      "right" : "assertEquals(2, conv2.length);",
      "info" : "ExpressionStatement[13549-13579]:ExpressionStatement[13732-13762]"
    }, {
      "left" : "assertEquals(2, conv3.length);",
      "right" : "assertEquals(2, conv3.length);",
      "info" : "ExpressionStatement[13588-13618]:ExpressionStatement[13771-13801]"
    }, {
      "left" : "assertEquals(2, conv4.length);",
      "right" : "assertEquals(2, conv4.length);",
      "info" : "ExpressionStatement[13627-13657]:ExpressionStatement[13810-13840]"
    }, {
      "left" : "assertEquals(2, conv5.length);",
      "right" : "assertEquals(2, conv5.length);",
      "info" : "ExpressionStatement[13666-13696]:ExpressionStatement[13849-13879]"
    }, {
      "left" : "assertEquals(expected, conv2[0]);",
      "right" : "assertEquals(expected, conv2[0]);",
      "info" : "ExpressionStatement[13705-13738]:ExpressionStatement[13888-13921]"
    }, {
      "left" : "assertEquals(expected, conv2[1]);",
      "right" : "assertEquals(expected, conv2[1]);",
      "info" : "ExpressionStatement[13747-13780]:ExpressionStatement[13930-13963]"
    }, {
      "left" : "assertEquals(expected, conv3[0]);",
      "right" : "assertEquals(expected, conv3[0]);",
      "info" : "ExpressionStatement[13789-13822]:ExpressionStatement[13972-14005]"
    }, {
      "left" : "assertEquals(expected, conv3[1]);",
      "right" : "assertEquals(expected, conv3[1]);",
      "info" : "ExpressionStatement[13831-13864]:ExpressionStatement[14014-14047]"
    }, {
      "left" : "assertEquals(expected, conv4[0]);",
      "right" : "assertEquals(expected, conv4[0]);",
      "info" : "ExpressionStatement[13873-13906]:ExpressionStatement[14056-14089]"
    }, {
      "left" : "assertEquals(expected, conv4[1]);",
      "right" : "assertEquals(expected, conv4[1]);",
      "info" : "ExpressionStatement[13915-13948]:ExpressionStatement[14098-14131]"
    }, {
      "left" : "assertEquals(expected, conv5[0]);",
      "right" : "assertEquals(expected, conv5[0]);",
      "info" : "ExpressionStatement[13957-13990]:ExpressionStatement[14140-14173]"
    }, {
      "left" : "assertEquals(expected, conv5[1]);",
      "right" : "assertEquals(expected, conv5[1]);",
      "info" : "ExpressionStatement[13999-14032]:ExpressionStatement[14182-14215]"
    }, {
      "left" : "assertTrue(Object[].class.isInstance(conv2));",
      "right" : "assertTrue(Object[].class.isInstance(conv2));",
      "info" : "ExpressionStatement[14041-14086]:ExpressionStatement[14224-14269]"
    }, {
      "left" : "assertTrue(toArrayClass.isInstance(conv3));",
      "right" : "assertTrue(toArrayClass.isInstance(conv3));",
      "info" : "ExpressionStatement[14095-14138]:ExpressionStatement[14278-14321]"
    }, {
      "left" : "assertTrue(toArrayClass.isInstance(conv4));",
      "right" : "assertTrue(toArrayClass.isInstance(conv4));",
      "info" : "ExpressionStatement[14147-14190]:ExpressionStatement[14330-14373]"
    }, {
      "left" : "assertTrue(toArrayClass.isInstance(conv5));",
      "right" : "assertTrue(toArrayClass.isInstance(conv5));",
      "info" : "ExpressionStatement[14199-14242]:ExpressionStatement[14382-14425]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[14254-14259]:MarkerAnnotation[14437-14442]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[14264-14270]:Modifier[14447-14453]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[14271-14275]:PrimitiveType[14454-14458]"
    }, {
      "left" : "testToJDBCArray",
      "right" : "testToJDBCArray",
      "info" : "SimpleName[14276-14291]:SimpleName[14459-14474]"
    }, {
      "left" : "SQLException",
      "right" : "SQLException",
      "info" : "SimpleType[14301-14313]:SimpleType[14484-14496]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14314-16371]:Block[14497-16554]"
    }, {
      "left" : "Object[] from1 = null;",
      "right" : "Object[] from1 = null;",
      "info" : "VariableDeclarationStatement[14324-14346]:VariableDeclarationStatement[14507-14529]"
    }, {
      "left" : "java.sql.Array a1 = Convert.convert(from1, java.sql.Array.class);",
      "right" : "java.sql.Array a1 = Convert.convert(from1, java.sql.Array.class);",
      "info" : "VariableDeclarationStatement[14355-14420]:VariableDeclarationStatement[14538-14603]"
    }, {
      "left" : "assertNull(a1);",
      "right" : "assertNull(a1);",
      "info" : "ExpressionStatement[14429-14444]:ExpressionStatement[14612-14627]"
    }, {
      "left" : "Object[] from2 = new Object[0];",
      "right" : "Object[] from2 = new Object[0];",
      "info" : "VariableDeclarationStatement[14454-14485]:VariableDeclarationStatement[14637-14668]"
    }, {
      "left" : "java.sql.Array a2 = Convert.convert(from2, java.sql.Array.class);",
      "right" : "java.sql.Array a2 = Convert.convert(from2, java.sql.Array.class);",
      "info" : "VariableDeclarationStatement[14494-14559]:VariableDeclarationStatement[14677-14742]"
    }, {
      "left" : "Result<Record> r2 = create.fetch(a2.getResultSet());",
      "right" : "Result<Record> r2 = create.fetch(a2.getResultSet());",
      "info" : "VariableDeclarationStatement[14568-14620]:VariableDeclarationStatement[14751-14803]"
    }, {
      "left" : "assertArrayEquals(from2, (Object[]) a2.getArray());",
      "right" : "assertArrayEquals(from2, (Object[]) a2.getArray());",
      "info" : "ExpressionStatement[14629-14680]:ExpressionStatement[14812-14863]"
    }, {
      "left" : "assertEquals(0, r2.size());",
      "right" : "assertEquals(0, r2.size());",
      "info" : "ExpressionStatement[14689-14716]:ExpressionStatement[14872-14899]"
    }, {
      "left" : "assertEquals(2, r2.fields().length);",
      "right" : "assertEquals(2, r2.fields().length);",
      "info" : "ExpressionStatement[14725-14761]:ExpressionStatement[14908-14944]"
    }, {
      "left" : "assertEquals(\"INDEX\", r2.field(0).getName());",
      "right" : "assertEquals(\"INDEX\", r2.field(0).getName());",
      "info" : "ExpressionStatement[14770-14815]:ExpressionStatement[14953-14998]"
    }, {
      "left" : "assertEquals(Long.class, r2.field(0).getType());",
      "right" : "assertEquals(Long.class, r2.field(0).getType());",
      "info" : "ExpressionStatement[14824-14872]:ExpressionStatement[15007-15055]"
    }, {
      "left" : "assertEquals(\"VALUE\", r2.field(1).getName());",
      "right" : "assertEquals(\"VALUE\", r2.field(1).getName());",
      "info" : "ExpressionStatement[14881-14926]:ExpressionStatement[15064-15109]"
    }, {
      "left" : "assertEquals(Object.class, r2.field(1).getType());",
      "right" : "assertEquals(Object.class, r2.field(1).getType());",
      "info" : "ExpressionStatement[14935-14985]:ExpressionStatement[15118-15168]"
    }, {
      "left" : "Object[] from3 = { 1 };",
      "right" : "Object[] from3 = { 1 };",
      "info" : "VariableDeclarationStatement[14995-15018]:VariableDeclarationStatement[15178-15201]"
    }, {
      "left" : "java.sql.Array a3 = Convert.convert(from3, java.sql.Array.class);",
      "right" : "java.sql.Array a3 = Convert.convert(from3, java.sql.Array.class);",
      "info" : "VariableDeclarationStatement[15027-15092]:VariableDeclarationStatement[15210-15275]"
    }, {
      "left" : "Result<Record> r3 = create.fetch(a3.getResultSet());",
      "right" : "Result<Record> r3 = create.fetch(a3.getResultSet());",
      "info" : "VariableDeclarationStatement[15101-15153]:VariableDeclarationStatement[15284-15336]"
    }, {
      "left" : "assertArrayEquals(from3, (Object[]) a3.getArray());",
      "right" : "assertArrayEquals(from3, (Object[]) a3.getArray());",
      "info" : "ExpressionStatement[15162-15213]:ExpressionStatement[15345-15396]"
    }, {
      "left" : "assertEquals(1, r3.size());",
      "right" : "assertEquals(1, r3.size());",
      "info" : "ExpressionStatement[15222-15249]:ExpressionStatement[15405-15432]"
    }, {
      "left" : "assertEquals(1L, r3.getValue(0, \"INDEX\"));",
      "right" : "assertEquals(1L, r3.getValue(0, \"INDEX\"));",
      "info" : "ExpressionStatement[15258-15300]:ExpressionStatement[15441-15483]"
    }, {
      "left" : "assertEquals(1, r3.getValue(0, \"VALUE\"));",
      "right" : "assertEquals(1, r3.getValue(0, \"VALUE\"));",
      "info" : "ExpressionStatement[15309-15350]:ExpressionStatement[15492-15533]"
    }, {
      "left" : "assertEquals(2, r3.fields().length);",
      "right" : "assertEquals(2, r3.fields().length);",
      "info" : "ExpressionStatement[15359-15395]:ExpressionStatement[15542-15578]"
    }, {
      "left" : "assertEquals(\"INDEX\", r3.field(0).getName());",
      "right" : "assertEquals(\"INDEX\", r3.field(0).getName());",
      "info" : "ExpressionStatement[15404-15449]:ExpressionStatement[15587-15632]"
    }, {
      "left" : "0",
      "right" : "0",
      "info" : "METHOD_INVOCATION_ARGUMENTS[15435-15436]:METHOD_INVOCATION_ARGUMENTS[10470-10471]"
    }, {
      "left" : "assertEquals(Long.class, r3.field(0).getType());",
      "right" : "assertEquals(Long.class, r3.field(0).getType());",
      "info" : "ExpressionStatement[15458-15506]:ExpressionStatement[15641-15689]"
    }, {
      "left" : "assertEquals(\"VALUE\", r3.field(1).getName());",
      "right" : "assertEquals(\"VALUE\", r3.field(1).getName());",
      "info" : "ExpressionStatement[15515-15560]:ExpressionStatement[15698-15743]"
    }, {
      "left" : "assertEquals(Object.class, r3.field(1).getType());",
      "right" : "assertEquals(Object.class, r3.field(1).getType());",
      "info" : "ExpressionStatement[15569-15619]:ExpressionStatement[15752-15802]"
    }, {
      "left" : "String[] from4 = { \"A\", \"B\" };",
      "right" : "String[] from4 = { \"A\", \"B\" };",
      "info" : "VariableDeclarationStatement[15629-15659]:VariableDeclarationStatement[15812-15842]"
    }, {
      "left" : "java.sql.Array a4 = Convert.convert(from4, java.sql.Array.class);",
      "right" : "java.sql.Array a4 = Convert.convert(from4, java.sql.Array.class);",
      "info" : "VariableDeclarationStatement[15668-15733]:VariableDeclarationStatement[15851-15916]"
    }, {
      "left" : "Result<Record> r4 = create.fetch(a4.getResultSet());",
      "right" : "Result<Record> r4 = create.fetch(a4.getResultSet());",
      "info" : "VariableDeclarationStatement[15742-15794]:VariableDeclarationStatement[15925-15977]"
    }, {
      "left" : "assertArrayEquals(from4, (String[]) a4.getArray());",
      "right" : "assertArrayEquals(from4, (String[]) a4.getArray());",
      "info" : "ExpressionStatement[15803-15854]:ExpressionStatement[15986-16037]"
    }, {
      "left" : "assertEquals(2, r4.size());",
      "right" : "assertEquals(2, r4.size());",
      "info" : "ExpressionStatement[15863-15890]:ExpressionStatement[16046-16073]"
    }, {
      "left" : "assertEquals(1L, r4.getValue(0, \"INDEX\"));",
      "right" : "assertEquals(1L, r4.getValue(0, \"INDEX\"));",
      "info" : "ExpressionStatement[15899-15941]:ExpressionStatement[16082-16124]"
    }, {
      "left" : "assertEquals(\"A\", r4.getValue(0, \"VALUE\"));",
      "right" : "assertEquals(\"A\", r4.getValue(0, \"VALUE\"));",
      "info" : "ExpressionStatement[15950-15993]:ExpressionStatement[16133-16176]"
    }, {
      "left" : "assertEquals(2L, r4.getValue(1, \"INDEX\"));",
      "right" : "assertEquals(2L, r4.getValue(1, \"INDEX\"));",
      "info" : "ExpressionStatement[16002-16044]:ExpressionStatement[16185-16227]"
    }, {
      "left" : "assertEquals(\"B\", r4.getValue(1, \"VALUE\"));",
      "right" : "assertEquals(\"B\", r4.getValue(1, \"VALUE\"));",
      "info" : "ExpressionStatement[16053-16096]:ExpressionStatement[16236-16279]"
    }, {
      "left" : "assertEquals(2, r4.fields().length);",
      "right" : "assertEquals(2, r4.fields().length);",
      "info" : "ExpressionStatement[16105-16141]:ExpressionStatement[16288-16324]"
    }, {
      "left" : "assertEquals(\"INDEX\", r4.field(0).getName());",
      "right" : "assertEquals(\"INDEX\", r4.field(0).getName());",
      "info" : "ExpressionStatement[16150-16195]:ExpressionStatement[16333-16378]"
    }, {
      "left" : "assertEquals(Long.class, r4.field(0).getType());",
      "right" : "assertEquals(Long.class, r4.field(0).getType());",
      "info" : "ExpressionStatement[16204-16252]:ExpressionStatement[16387-16435]"
    }, {
      "left" : "assertEquals(\"VALUE\", r4.field(1).getName());",
      "right" : "assertEquals(\"VALUE\", r4.field(1).getName());",
      "info" : "ExpressionStatement[16261-16306]:ExpressionStatement[16444-16489]"
    }, {
      "left" : "assertEquals(String.class, r4.field(1).getType());",
      "right" : "assertEquals(String.class, r4.field(1).getType());",
      "info" : "ExpressionStatement[16315-16365]:ExpressionStatement[16498-16548]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[16377-16382]:MarkerAnnotation[16560-16565]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[16387-16393]:Modifier[16570-16576]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[16394-16398]:PrimitiveType[16577-16581]"
    }, {
      "left" : "testToDate",
      "right" : "testToDate",
      "info" : "SimpleName[16399-16409]:SimpleName[16582-16592]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16412-16644]:Block[16595-16827]"
    }, {
      "left" : "Date date = Date.valueOf(\"2001-02-03\");",
      "right" : "Date date = Date.valueOf(\"2001-02-03\");",
      "info" : "VariableDeclarationStatement[16422-16461]:VariableDeclarationStatement[16605-16644]"
    }, {
      "left" : "testConversion(date, \"2001-02-03\", Date.class);",
      "right" : "testConversion(date, \"2001-02-03\", Date.class);",
      "info" : "ExpressionStatement[16471-16518]:ExpressionStatement[16654-16701]"
    }, {
      "left" : "testConversion(date, date.getTime(), Date.class);",
      "right" : "testConversion(date, date.getTime(), Date.class);",
      "info" : "ExpressionStatement[16527-16576]:ExpressionStatement[16710-16759]"
    }, {
      "left" : "testConversion(date, date.toLocalDate(), Date.class);",
      "right" : "testConversion(date, date.toLocalDate(), Date.class);",
      "info" : "ExpressionStatement[16585-16638]:ExpressionStatement[16768-16821]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[16650-16655]:MarkerAnnotation[16833-16838]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[16660-16666]:Modifier[16843-16849]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[16667-16671]:PrimitiveType[16850-16854]"
    }, {
      "left" : "testToLocalDate",
      "right" : "testToLocalDate",
      "info" : "SimpleName[16672-16687]:SimpleName[16855-16870]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16690-16965]:Block[16873-17148]"
    }, {
      "left" : "Date date = Date.valueOf(\"2001-02-03\");",
      "right" : "Date date = Date.valueOf(\"2001-02-03\");",
      "info" : "VariableDeclarationStatement[16700-16739]:VariableDeclarationStatement[16883-16922]"
    }, {
      "left" : "testConversion(date.toLocalDate(), \"2001-02-03\", LocalDate.class);",
      "right" : "testConversion(date.toLocalDate(), \"2001-02-03\", LocalDate.class);",
      "info" : "ExpressionStatement[16749-16815]:ExpressionStatement[16932-16998]"
    }, {
      "left" : "testConversion(date.toLocalDate(), date.getTime(), LocalDate.class);",
      "right" : "testConversion(date.toLocalDate(), date.getTime(), LocalDate.class);",
      "info" : "ExpressionStatement[16824-16892]:ExpressionStatement[17007-17075]"
    }, {
      "left" : "testConversion(date.toLocalDate(), date, LocalDate.class);",
      "right" : "testConversion(date.toLocalDate(), date, LocalDate.class);",
      "info" : "ExpressionStatement[16901-16959]:ExpressionStatement[17084-17142]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[16971-16976]:MarkerAnnotation[17154-17159]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[16981-16987]:Modifier[17164-17170]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[16988-16992]:PrimitiveType[17171-17175]"
    }, {
      "left" : "testToTime",
      "right" : "testToTime",
      "info" : "SimpleName[16993-17003]:SimpleName[17176-17186]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17006-17482]:Block[17189-17665]"
    }, {
      "left" : "Time time = Time.valueOf(\"04:05:06\");",
      "right" : "Time time = Time.valueOf(\"04:05:06\");",
      "info" : "VariableDeclarationStatement[17016-17053]:VariableDeclarationStatement[17199-17236]"
    }, {
      "left" : "testConversion(time, \"04:05:06\", Time.class);",
      "right" : "testConversion(time, \"04:05:06\", Time.class);",
      "info" : "ExpressionStatement[17063-17108]:ExpressionStatement[17246-17291]"
    }, {
      "left" : "testConversion(time, time.getTime(), Time.class);",
      "right" : "testConversion(time, time.getTime(), Time.class);",
      "info" : "ExpressionStatement[17117-17166]:ExpressionStatement[17300-17349]"
    }, {
      "left" : "testConversion(time, time.toLocalTime(), Time.class);",
      "right" : "testConversion(time, time.toLocalTime(), Time.class);",
      "info" : "ExpressionStatement[17175-17228]:ExpressionStatement[17358-17411]"
    }, {
      "left" : "OffsetTime o1 = OffsetTime.parse(\"04:05:06.789Z\");",
      "right" : "OffsetTime o1 = OffsetTime.parse(\"04:05:06.789Z\");",
      "info" : "VariableDeclarationStatement[17238-17288]:VariableDeclarationStatement[17421-17471]"
    }, {
      "left" : "OffsetTime o2 = OffsetTime.parse(\"04:05:06.789+02:00\");",
      "right" : "OffsetTime o2 = OffsetTime.parse(\"04:05:06.789+02:00\");",
      "info" : "VariableDeclarationStatement[17297-17352]:VariableDeclarationStatement[17480-17535]"
    }, {
      "left" : "testConversion(new Time(millis(o1)), o1, Time.class);",
      "right" : "testConversion(new Time(millis(o1)), o1, Time.class);",
      "info" : "ExpressionStatement[17361-17414]:ExpressionStatement[17544-17597]"
    }, {
      "left" : "testConversion(new Time(millis(o2)), o2, Time.class);",
      "right" : "testConversion(new Time(millis(o2)), o2, Time.class);",
      "info" : "ExpressionStatement[17423-17476]:ExpressionStatement[17606-17659]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[17488-17493]:MarkerAnnotation[17671-17676]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[17498-17504]:Modifier[17681-17687]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[17505-17509]:PrimitiveType[17688-17692]"
    }, {
      "left" : "testToLocalTime",
      "right" : "testToLocalTime",
      "info" : "SimpleName[17510-17525]:SimpleName[17693-17708]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17528-18085]:Block[17711-18268]"
    }, {
      "left" : "Time time = Time.valueOf(\"04:05:06\");",
      "right" : "Time time = Time.valueOf(\"04:05:06\");",
      "info" : "VariableDeclarationStatement[17538-17575]:VariableDeclarationStatement[17721-17758]"
    }, {
      "left" : "testConversion(time.toLocalTime(), \"04:05:06\", LocalTime.class);",
      "right" : "testConversion(time.toLocalTime(), \"04:05:06\", LocalTime.class);",
      "info" : "ExpressionStatement[17585-17649]:ExpressionStatement[17768-17832]"
    }, {
      "left" : "testConversion(time.toLocalTime(), time.getTime(), LocalTime.class);",
      "right" : "testConversion(time.toLocalTime(), time.getTime(), LocalTime.class);",
      "info" : "ExpressionStatement[17658-17726]:ExpressionStatement[17841-17909]"
    }, {
      "left" : "testConversion(time.toLocalTime(), time, LocalTime.class);",
      "right" : "testConversion(time.toLocalTime(), time, LocalTime.class);",
      "info" : "ExpressionStatement[17735-17793]:ExpressionStatement[17918-17976]"
    }, {
      "left" : "OffsetTime o1 = OffsetTime.parse(\"04:05:06.789Z\");",
      "right" : "OffsetTime o1 = OffsetTime.parse(\"04:05:06.789Z\");",
      "info" : "VariableDeclarationStatement[17803-17853]:VariableDeclarationStatement[17986-18036]"
    }, {
      "left" : "OffsetTime o2 = OffsetTime.parse(\"04:05:06.789+02:00\");",
      "right" : "OffsetTime o2 = OffsetTime.parse(\"04:05:06.789+02:00\");",
      "info" : "VariableDeclarationStatement[17862-17917]:VariableDeclarationStatement[18045-18100]"
    }, {
      "left" : "testConversion(new Time(millis(o1)).toLocalTime(), o1, LocalTime.class);",
      "right" : "testConversion(new Time(millis(o1)).toLocalTime(), o1, LocalTime.class);",
      "info" : "ExpressionStatement[17926-17998]:ExpressionStatement[18109-18181]"
    }, {
      "left" : "testConversion(new Time(millis(o2)).toLocalTime(), o2, LocalTime.class);",
      "right" : "testConversion(new Time(millis(o2)).toLocalTime(), o2, LocalTime.class);",
      "info" : "ExpressionStatement[18007-18079]:ExpressionStatement[18190-18262]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[18091-18096]:MarkerAnnotation[18274-18279]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[18101-18107]:Modifier[18284-18290]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[18108-18112]:PrimitiveType[18291-18295]"
    }, {
      "left" : "testToOffsetTime",
      "right" : "testToOffsetTime",
      "info" : "SimpleName[18113-18129]:SimpleName[18296-18312]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18132-18519]:Block[18315-18702]"
    }, {
      "left" : "Time time = Time.valueOf(\"04:05:06\");",
      "right" : "Time time = Time.valueOf(\"04:05:06\");",
      "info" : "VariableDeclarationStatement[18142-18179]:VariableDeclarationStatement[18325-18362]"
    }, {
      "left" : "ZoneOffset offset = OffsetDateTime.now().getOffset();",
      "right" : "ZoneOffset offset = OffsetDateTime.now().getOffset();",
      "info" : "VariableDeclarationStatement[18188-18241]:VariableDeclarationStatement[18371-18424]"
    }, {
      "left" : "testConversion(time.toLocalTime().atOffset(offset), \"04:05:06\", OffsetTime.class);",
      "right" : "testConversion(time.toLocalTime().atOffset(offset), \"04:05:06\", OffsetTime.class);",
      "info" : "ExpressionStatement[18251-18333]:ExpressionStatement[18434-18516]"
    }, {
      "left" : "testConversion(time.toLocalTime().atOffset(offset), time.getTime(), OffsetTime.class);",
      "right" : "testConversion(time.toLocalTime().atOffset(offset), time.getTime(), OffsetTime.class);",
      "info" : "ExpressionStatement[18342-18428]:ExpressionStatement[18525-18611]"
    }, {
      "left" : "testConversion(time.toLocalTime().atOffset(offset), time, OffsetTime.class);",
      "right" : "testConversion(time.toLocalTime().atOffset(offset), time, OffsetTime.class);",
      "info" : "ExpressionStatement[18437-18513]:ExpressionStatement[18620-18696]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[18525-18530]:MarkerAnnotation[18708-18713]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[18535-18541]:Modifier[18718-18724]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[18542-18546]:PrimitiveType[18725-18729]"
    }, {
      "left" : "testToTimestamp",
      "right" : "testToTimestamp",
      "info" : "SimpleName[18547-18562]:SimpleName[18730-18745]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18565-19670]:Block[18748-19853]"
    }, {
      "left" : "Timestamp t1 = Timestamp.valueOf(\"2001-02-03 04:05:06\");",
      "right" : "Timestamp t1 = Timestamp.valueOf(\"2001-02-03 04:05:06\");",
      "info" : "VariableDeclarationStatement[18575-18631]:VariableDeclarationStatement[18758-18814]"
    }, {
      "left" : "Timestamp t2 = Timestamp.valueOf(\"2001-02-03 04:05:06.7\");",
      "right" : "Timestamp t2 = Timestamp.valueOf(\"2001-02-03 04:05:06.7\");",
      "info" : "VariableDeclarationStatement[18640-18698]:VariableDeclarationStatement[18823-18881]"
    }, {
      "left" : "Timestamp t3 = Timestamp.valueOf(\"2001-02-03 04:05:06.789\");",
      "right" : "Timestamp t3 = Timestamp.valueOf(\"2001-02-03 04:05:06.789\");",
      "info" : "VariableDeclarationStatement[18707-18767]:VariableDeclarationStatement[18890-18950]"
    }, {
      "left" : "testConversion(t1, \"2001-02-03 04:05:06\", Timestamp.class);",
      "right" : "testConversion(t1, \"2001-02-03 04:05:06\", Timestamp.class);",
      "info" : "ExpressionStatement[18777-18836]:ExpressionStatement[18960-19019]"
    }, {
      "left" : "testConversion(t2, \"2001-02-03 04:05:06.7\", Timestamp.class);",
      "right" : "testConversion(t2, \"2001-02-03 04:05:06.7\", Timestamp.class);",
      "info" : "ExpressionStatement[18845-18906]:ExpressionStatement[19028-19089]"
    }, {
      "left" : "testConversion(t3, \"2001-02-03 04:05:06.789\", Timestamp.class);",
      "right" : "testConversion(t3, \"2001-02-03 04:05:06.789\", Timestamp.class);",
      "info" : "ExpressionStatement[18915-18978]:ExpressionStatement[19098-19161]"
    }, {
      "left" : "testConversion(t1, t1.getTime(), Timestamp.class);",
      "right" : "testConversion(t1, t1.getTime(), Timestamp.class);",
      "info" : "ExpressionStatement[18988-19038]:ExpressionStatement[19171-19221]"
    }, {
      "left" : "testConversion(t2, t2.getTime(), Timestamp.class);",
      "right" : "testConversion(t2, t2.getTime(), Timestamp.class);",
      "info" : "ExpressionStatement[19047-19097]:ExpressionStatement[19230-19280]"
    }, {
      "left" : "testConversion(t3, t3.getTime(), Timestamp.class);",
      "right" : "testConversion(t3, t3.getTime(), Timestamp.class);",
      "info" : "ExpressionStatement[19106-19156]:ExpressionStatement[19289-19339]"
    }, {
      "left" : "testConversion(t1, t1.toLocalDateTime(), Timestamp.class);",
      "right" : "testConversion(t1, t1.toLocalDateTime(), Timestamp.class);",
      "info" : "ExpressionStatement[19166-19224]:ExpressionStatement[19349-19407]"
    }, {
      "left" : "testConversion(t2, t2.toLocalDateTime(), Timestamp.class);",
      "right" : "testConversion(t2, t2.toLocalDateTime(), Timestamp.class);",
      "info" : "ExpressionStatement[19233-19291]:ExpressionStatement[19416-19474]"
    }, {
      "left" : "testConversion(t3, t3.toLocalDateTime(), Timestamp.class);",
      "right" : "testConversion(t3, t3.toLocalDateTime(), Timestamp.class);",
      "info" : "ExpressionStatement[19300-19358]:ExpressionStatement[19483-19541]"
    }, {
      "left" : "OffsetDateTime o1 = OffsetDateTime.parse(\"2001-02-03T04:05:06.789Z\");",
      "right" : "OffsetDateTime o1 = OffsetDateTime.parse(\"2001-02-03T04:05:06.789Z\");",
      "info" : "VariableDeclarationStatement[19368-19437]:VariableDeclarationStatement[19551-19620]"
    }, {
      "left" : "OffsetDateTime o2 = OffsetDateTime.parse(\"2001-02-03T04:05:06.789+02:00\");",
      "right" : "OffsetDateTime o2 = OffsetDateTime.parse(\"2001-02-03T04:05:06.789+02:00\");",
      "info" : "VariableDeclarationStatement[19446-19520]:VariableDeclarationStatement[19629-19703]"
    }, {
      "left" : "testConversion(new Timestamp(millis(o1)), o1, Timestamp.class);",
      "right" : "testConversion(new Timestamp(millis(o1)), o1, Timestamp.class);",
      "info" : "ExpressionStatement[19529-19592]:ExpressionStatement[19712-19775]"
    }, {
      "left" : "testConversion(new Timestamp(millis(o2)), o2, Timestamp.class);",
      "right" : "testConversion(new Timestamp(millis(o2)), o2, Timestamp.class);",
      "info" : "ExpressionStatement[19601-19664]:ExpressionStatement[19784-19847]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[19676-19681]:MarkerAnnotation[19859-19864]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[19686-19692]:Modifier[19869-19875]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[19693-19697]:PrimitiveType[19876-19880]"
    }, {
      "left" : "testToLocalDateTime",
      "right" : "testToLocalDateTime",
      "info" : "SimpleName[19698-19717]:SimpleName[19881-19900]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19720-21013]:Block[19903-21196]"
    }, {
      "left" : "Timestamp t1 = Timestamp.valueOf(\"2001-02-03 04:05:06\");",
      "right" : "Timestamp t1 = Timestamp.valueOf(\"2001-02-03 04:05:06\");",
      "info" : "VariableDeclarationStatement[19730-19786]:VariableDeclarationStatement[19913-19969]"
    }, {
      "left" : "Timestamp t2 = Timestamp.valueOf(\"2001-02-03 04:05:06.7\");",
      "right" : "Timestamp t2 = Timestamp.valueOf(\"2001-02-03 04:05:06.7\");",
      "info" : "VariableDeclarationStatement[19795-19853]:VariableDeclarationStatement[19978-20036]"
    }, {
      "left" : "Timestamp t3 = Timestamp.valueOf(\"2001-02-03 04:05:06.789\");",
      "right" : "Timestamp t3 = Timestamp.valueOf(\"2001-02-03 04:05:06.789\");",
      "info" : "VariableDeclarationStatement[19862-19922]:VariableDeclarationStatement[20045-20105]"
    }, {
      "left" : "testConversion(t1.toLocalDateTime(), \"2001-02-03 04:05:06\", LocalDateTime.class);",
      "right" : "testConversion(t1.toLocalDateTime(), \"2001-02-03 04:05:06\", LocalDateTime.class);",
      "info" : "ExpressionStatement[19932-20013]:ExpressionStatement[20115-20196]"
    }, {
      "left" : "testConversion(t2.toLocalDateTime(), \"2001-02-03 04:05:06.7\", LocalDateTime.class);",
      "right" : "testConversion(t2.toLocalDateTime(), \"2001-02-03 04:05:06.7\", LocalDateTime.class);",
      "info" : "ExpressionStatement[20022-20105]:ExpressionStatement[20205-20288]"
    }, {
      "left" : "testConversion(t3.toLocalDateTime(), \"2001-02-03 04:05:06.789\", LocalDateTime.class);",
      "right" : "testConversion(t3.toLocalDateTime(), \"2001-02-03 04:05:06.789\", LocalDateTime.class);",
      "info" : "ExpressionStatement[20114-20199]:ExpressionStatement[20297-20382]"
    }, {
      "left" : "testConversion(t1.toLocalDateTime(), t1.getTime(), LocalDateTime.class);",
      "right" : "testConversion(t1.toLocalDateTime(), t1.getTime(), LocalDateTime.class);",
      "info" : "ExpressionStatement[20209-20281]:ExpressionStatement[20392-20464]"
    }, {
      "left" : "testConversion(t2.toLocalDateTime(), t2.getTime(), LocalDateTime.class);",
      "right" : "testConversion(t2.toLocalDateTime(), t2.getTime(), LocalDateTime.class);",
      "info" : "ExpressionStatement[20290-20362]:ExpressionStatement[20473-20545]"
    }, {
      "left" : "testConversion(t3.toLocalDateTime(), t3.getTime(), LocalDateTime.class);",
      "right" : "testConversion(t3.toLocalDateTime(), t3.getTime(), LocalDateTime.class);",
      "info" : "ExpressionStatement[20371-20443]:ExpressionStatement[20554-20626]"
    }, {
      "left" : "testConversion(t1.toLocalDateTime(), t1, LocalDateTime.class);",
      "right" : "testConversion(t1.toLocalDateTime(), t1, LocalDateTime.class);",
      "info" : "ExpressionStatement[20453-20515]:ExpressionStatement[20636-20698]"
    }, {
      "left" : "testConversion(t2.toLocalDateTime(), t2, LocalDateTime.class);",
      "right" : "testConversion(t2.toLocalDateTime(), t2, LocalDateTime.class);",
      "info" : "ExpressionStatement[20524-20586]:ExpressionStatement[20707-20769]"
    }, {
      "left" : "testConversion(t3.toLocalDateTime(), t3, LocalDateTime.class);",
      "right" : "testConversion(t3.toLocalDateTime(), t3, LocalDateTime.class);",
      "info" : "ExpressionStatement[20595-20657]:ExpressionStatement[20778-20840]"
    }, {
      "left" : "OffsetDateTime o1 = OffsetDateTime.parse(\"2001-02-03T04:05:06.789Z\");",
      "right" : "OffsetDateTime o1 = OffsetDateTime.parse(\"2001-02-03T04:05:06.789Z\");",
      "info" : "VariableDeclarationStatement[20667-20736]:VariableDeclarationStatement[20850-20919]"
    }, {
      "left" : "OffsetDateTime o2 = OffsetDateTime.parse(\"2001-02-03T04:05:06.789+02:00\");",
      "right" : "OffsetDateTime o2 = OffsetDateTime.parse(\"2001-02-03T04:05:06.789+02:00\");",
      "info" : "VariableDeclarationStatement[20745-20819]:VariableDeclarationStatement[20928-21002]"
    }, {
      "left" : "testConversion(new Timestamp(millis(o1)).toLocalDateTime(), o1, LocalDateTime.class);",
      "right" : "testConversion(new Timestamp(millis(o1)).toLocalDateTime(), o1, LocalDateTime.class);",
      "info" : "ExpressionStatement[20828-20913]:ExpressionStatement[21011-21096]"
    }, {
      "left" : "testConversion(new Timestamp(millis(o2)).toLocalDateTime(), o2, LocalDateTime.class);",
      "right" : "testConversion(new Timestamp(millis(o2)).toLocalDateTime(), o2, LocalDateTime.class);",
      "info" : "ExpressionStatement[20922-21007]:ExpressionStatement[21105-21190]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[21019-21024]:MarkerAnnotation[21202-21207]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[21019-21024]:MarkerAnnotation[22420-22425]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[21029-21035]:Modifier[21212-21218]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[21029-21035]:Modifier[22430-22436]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[21036-21040]:PrimitiveType[21219-21223]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[21036-21040]:PrimitiveType[22437-22441]"
    }, {
      "left" : "testToOffsetDateTime",
      "right" : "testToOffsetDateTime",
      "info" : "SimpleName[21041-21061]:SimpleName[21224-21244]"
    }, {
      "left" : "testToOffsetDateTime",
      "right" : "testToInstant",
      "info" : "SimpleName[21041-21061]:SimpleName[22442-22455]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21064-22231]:Block[21247-22414]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21064-22231]:Block[22458-23670]"
    }, {
      "left" : "Timestamp t1 = Timestamp.valueOf(\"2001-02-03 04:05:06\");",
      "right" : "Timestamp t1 = Timestamp.valueOf(\"2001-02-03 04:05:06\");",
      "info" : "VariableDeclarationStatement[21074-21130]:VariableDeclarationStatement[21257-21313]"
    }, {
      "left" : "Timestamp t1 = Timestamp.valueOf(\"2001-02-03 04:05:06\");",
      "right" : "Timestamp t1 = Timestamp.valueOf(\"2001-02-03 04:05:06\");",
      "info" : "VariableDeclarationStatement[21074-21130]:VariableDeclarationStatement[22468-22524]"
    }, {
      "left" : "Timestamp t2 = Timestamp.valueOf(\"2001-02-03 04:05:06.7\");",
      "right" : "Timestamp t2 = Timestamp.valueOf(\"2001-02-03 04:05:06.7\");",
      "info" : "VariableDeclarationStatement[21139-21197]:VariableDeclarationStatement[21322-21380]"
    }, {
      "left" : "Timestamp t2 = Timestamp.valueOf(\"2001-02-03 04:05:06.7\");",
      "right" : "Timestamp t2 = Timestamp.valueOf(\"2001-02-03 04:05:06.7\");",
      "info" : "VariableDeclarationStatement[21139-21197]:VariableDeclarationStatement[22533-22591]"
    }, {
      "left" : "Timestamp t3 = Timestamp.valueOf(\"2001-02-03 04:05:06.789\");",
      "right" : "Timestamp t3 = Timestamp.valueOf(\"2001-02-03 04:05:06.789\");",
      "info" : "VariableDeclarationStatement[21206-21266]:VariableDeclarationStatement[21389-21449]"
    }, {
      "left" : "Timestamp t3 = Timestamp.valueOf(\"2001-02-03 04:05:06.789\");",
      "right" : "Timestamp t3 = Timestamp.valueOf(\"2001-02-03 04:05:06.789\");",
      "info" : "VariableDeclarationStatement[21206-21266]:VariableDeclarationStatement[22600-22660]"
    }, {
      "left" : "ZoneOffset offset = OffsetDateTime.now().getOffset();",
      "right" : "ZoneOffset offset = OffsetDateTime.now().getOffset();",
      "info" : "VariableDeclarationStatement[21275-21328]:VariableDeclarationStatement[21458-21511]"
    }, {
      "left" : "ZoneOffset offset = OffsetDateTime.now().getOffset();",
      "right" : "ZoneOffset offset = OffsetDateTime.now().getOffset();",
      "info" : "VariableDeclarationStatement[21275-21328]:VariableDeclarationStatement[22669-22722]"
    }, {
      "left" : "testConversion(t1.toLocalDateTime().atOffset(offset), \"2001-02-03 04:05:06\", OffsetDateTime.class);",
      "right" : "testConversion(t1.toLocalDateTime().atOffset(offset), \"2001-02-03 04:05:06\", OffsetDateTime.class);",
      "info" : "ExpressionStatement[21338-21437]:ExpressionStatement[21521-21620]"
    }, {
      "left" : "testConversion(t1.toLocalDateTime().atOffset(offset), \"2001-02-03 04:05:06\", OffsetDateTime.class);",
      "right" : "testConversion(t1.toLocalDateTime().atOffset(offset).toInstant(), t1.getTime(), Instant.class);",
      "info" : "ExpressionStatement[21338-21437]:ExpressionStatement[23078-23173]"
    }, {
      "left" : "t1.toLocalDateTime().atOffset(offset)",
      "right" : "t1.toLocalDateTime().atOffset(offset)",
      "info" : "MethodInvocation[21353-21390]:MethodInvocation[23093-23130]"
    }, {
      "left" : "OffsetDateTime",
      "right" : "Instant",
      "info" : "SimpleName[21415-21429]:SimpleName[23158-23165]"
    }, {
      "left" : "testConversion(t2.toLocalDateTime().atOffset(offset), \"2001-02-03 04:05:06.7\", OffsetDateTime.class);",
      "right" : "testConversion(t2.toLocalDateTime().atOffset(offset), \"2001-02-03 04:05:06.7\", OffsetDateTime.class);",
      "info" : "ExpressionStatement[21446-21547]:ExpressionStatement[21629-21730]"
    }, {
      "left" : "testConversion(t2.toLocalDateTime().atOffset(offset), \"2001-02-03 04:05:06.7\", OffsetDateTime.class);",
      "right" : "testConversion(t2.toLocalDateTime().atOffset(offset).toInstant(), t2.getTime(), Instant.class);",
      "info" : "ExpressionStatement[21446-21547]:ExpressionStatement[23182-23277]"
    }, {
      "left" : "t2.toLocalDateTime().atOffset(offset)",
      "right" : "t2.toLocalDateTime().atOffset(offset)",
      "info" : "MethodInvocation[21461-21498]:MethodInvocation[23197-23234]"
    }, {
      "left" : "OffsetDateTime",
      "right" : "Instant",
      "info" : "SimpleName[21525-21539]:SimpleName[23262-23269]"
    }, {
      "left" : "testConversion(t3.toLocalDateTime().atOffset(offset), \"2001-02-03 04:05:06.789\", OffsetDateTime.class);",
      "right" : "testConversion(t3.toLocalDateTime().atOffset(offset), \"2001-02-03 04:05:06.789\", OffsetDateTime.class);",
      "info" : "ExpressionStatement[21556-21659]:ExpressionStatement[21739-21842]"
    }, {
      "left" : "testConversion(t3.toLocalDateTime().atOffset(offset), \"2001-02-03 04:05:06.789\", OffsetDateTime.class);",
      "right" : "testConversion(t3.toLocalDateTime().atOffset(offset).toInstant(), t3, Instant.class);",
      "info" : "ExpressionStatement[21556-21659]:ExpressionStatement[23579-23664]"
    }, {
      "left" : "t3.toLocalDateTime().atOffset(offset)",
      "right" : "t3.toLocalDateTime().atOffset(offset)",
      "info" : "MethodInvocation[21571-21608]:MethodInvocation[23594-23631]"
    }, {
      "left" : "OffsetDateTime",
      "right" : "Instant",
      "info" : "SimpleName[21637-21651]:SimpleName[23649-23656]"
    }, {
      "left" : "testConversion(t1.toLocalDateTime().atOffset(offset), t1.getTime(), OffsetDateTime.class);",
      "right" : "testConversion(t1.toLocalDateTime().atOffset(offset), t1.getTime(), OffsetDateTime.class);",
      "info" : "ExpressionStatement[21669-21759]:ExpressionStatement[21852-21942]"
    }, {
      "left" : "testConversion(t1.toLocalDateTime().atOffset(offset), t1.getTime(), OffsetDateTime.class);",
      "right" : "testConversion(t1.toLocalDateTime().atOffset(offset).toInstant(), t1, Instant.class);",
      "info" : "ExpressionStatement[21669-21759]:ExpressionStatement[23391-23476]"
    }, {
      "left" : "t1.toLocalDateTime().atOffset(offset)",
      "right" : "t1.toLocalDateTime().atOffset(offset)",
      "info" : "MethodInvocation[21684-21721]:MethodInvocation[23406-23443]"
    }, {
      "left" : "t1.getTime()",
      "right" : "t1.getTime()",
      "info" : "MethodInvocation[21723-21735]:MethodInvocation[23144-23156]"
    }, {
      "left" : "OffsetDateTime",
      "right" : "Instant",
      "info" : "SimpleName[21737-21751]:SimpleName[23461-23468]"
    }, {
      "left" : "testConversion(t2.toLocalDateTime().atOffset(offset), t2.getTime(), OffsetDateTime.class);",
      "right" : "testConversion(t2.toLocalDateTime().atOffset(offset), t2.getTime(), OffsetDateTime.class);",
      "info" : "ExpressionStatement[21768-21858]:ExpressionStatement[21951-22041]"
    }, {
      "left" : "testConversion(t2.toLocalDateTime().atOffset(offset), t2.getTime(), OffsetDateTime.class);",
      "right" : "testConversion(t2.toLocalDateTime().atOffset(offset).toInstant(), t2, Instant.class);",
      "info" : "ExpressionStatement[21768-21858]:ExpressionStatement[23485-23570]"
    }, {
      "left" : "t2.toLocalDateTime().atOffset(offset)",
      "right" : "t2.toLocalDateTime().atOffset(offset)",
      "info" : "MethodInvocation[21783-21820]:MethodInvocation[23500-23537]"
    }, {
      "left" : "t2.getTime()",
      "right" : "t2.getTime()",
      "info" : "MethodInvocation[21822-21834]:MethodInvocation[23248-23260]"
    }, {
      "left" : "OffsetDateTime",
      "right" : "Instant",
      "info" : "SimpleName[21836-21850]:SimpleName[23555-23562]"
    }, {
      "left" : "testConversion(t3.toLocalDateTime().atOffset(offset), t3.getTime(), OffsetDateTime.class);",
      "right" : "testConversion(t3.toLocalDateTime().atOffset(offset), t3.getTime(), OffsetDateTime.class);",
      "info" : "ExpressionStatement[21867-21957]:ExpressionStatement[22050-22140]"
    }, {
      "left" : "testConversion(t3.toLocalDateTime().atOffset(offset), t3.getTime(), OffsetDateTime.class);",
      "right" : "testConversion(t3.toLocalDateTime().atOffset(offset).toInstant(), t3.getTime(), Instant.class);",
      "info" : "ExpressionStatement[21867-21957]:ExpressionStatement[23286-23381]"
    }, {
      "left" : "t3.toLocalDateTime().atOffset(offset)",
      "right" : "t3.toLocalDateTime().atOffset(offset)",
      "info" : "MethodInvocation[21882-21919]:MethodInvocation[23301-23338]"
    }, {
      "left" : "OffsetDateTime",
      "right" : "Instant",
      "info" : "SimpleName[21935-21949]:SimpleName[23366-23373]"
    }, {
      "left" : "testConversion(t1.toLocalDateTime().atOffset(offset), t1, OffsetDateTime.class);",
      "right" : "testConversion(t1.toLocalDateTime().atOffset(offset), t1, OffsetDateTime.class);",
      "info" : "ExpressionStatement[21967-22047]:ExpressionStatement[22150-22230]"
    }, {
      "left" : "testConversion(t1.toLocalDateTime().atOffset(offset), t1, OffsetDateTime.class);",
      "right" : "testConversion(t1.toLocalDateTime().atOffset(offset).toInstant(), \"2001-02-03 04:05:06\", Instant.class);",
      "info" : "ExpressionStatement[21967-22047]:ExpressionStatement[22732-22836]"
    }, {
      "left" : "t1.toLocalDateTime().atOffset(offset)",
      "right" : "t1.toLocalDateTime().atOffset(offset)",
      "info" : "MethodInvocation[21982-22019]:MethodInvocation[22747-22784]"
    }, {
      "left" : "OffsetDateTime",
      "right" : "Instant",
      "info" : "SimpleName[22025-22039]:SimpleName[22821-22828]"
    }, {
      "left" : "testConversion(t2.toLocalDateTime().atOffset(offset), t2, OffsetDateTime.class);",
      "right" : "testConversion(t2.toLocalDateTime().atOffset(offset), t2, OffsetDateTime.class);",
      "info" : "ExpressionStatement[22056-22136]:ExpressionStatement[22239-22319]"
    }, {
      "left" : "testConversion(t2.toLocalDateTime().atOffset(offset), t2, OffsetDateTime.class);",
      "right" : "testConversion(t2.toLocalDateTime().atOffset(offset).toInstant(), \"2001-02-03 04:05:06.7\", Instant.class);",
      "info" : "ExpressionStatement[22056-22136]:ExpressionStatement[22845-22951]"
    }, {
      "left" : "t2.toLocalDateTime().atOffset(offset)",
      "right" : "t2.toLocalDateTime().atOffset(offset)",
      "info" : "MethodInvocation[22071-22108]:MethodInvocation[22860-22897]"
    }, {
      "left" : "OffsetDateTime",
      "right" : "Instant",
      "info" : "SimpleName[22114-22128]:SimpleName[22936-22943]"
    }, {
      "left" : "testConversion(t3.toLocalDateTime().atOffset(offset), t3, OffsetDateTime.class);",
      "right" : "testConversion(t3.toLocalDateTime().atOffset(offset), t3, OffsetDateTime.class);",
      "info" : "ExpressionStatement[22145-22225]:ExpressionStatement[22328-22408]"
    }, {
      "left" : "testConversion(t3.toLocalDateTime().atOffset(offset), t3, OffsetDateTime.class);",
      "right" : "testConversion(t3.toLocalDateTime().atOffset(offset).toInstant(), \"2001-02-03 04:05:06.789\", Instant.class);",
      "info" : "ExpressionStatement[22145-22225]:ExpressionStatement[22960-23068]"
    }, {
      "left" : "t3.toLocalDateTime().atOffset(offset)",
      "right" : "t3.toLocalDateTime().atOffset(offset)",
      "info" : "MethodInvocation[22160-22197]:MethodInvocation[22975-23012]"
    }, {
      "left" : "OffsetDateTime",
      "right" : "Instant",
      "info" : "SimpleName[22203-22217]:SimpleName[23053-23060]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[22237-22244]:Modifier[23676-23683]"
    }, {
      "left" : "Long",
      "right" : "Long",
      "info" : "SimpleType[22245-22249]:SimpleType[23684-23688]"
    }, {
      "left" : "millis",
      "right" : "millis",
      "info" : "SimpleName[22250-22256]:SimpleName[23689-23695]"
    }, {
      "left" : "Temporal t",
      "right" : "Temporal t",
      "info" : "SingleVariableDeclaration[22257-22267]:SingleVariableDeclaration[23696-23706]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22269-22460]:Block[23708-23899]"
    }, {
      "left" : "if (t.isSupported(INSTANT_SECONDS))",
      "right" : "if (t.isSupported(INSTANT_SECONDS))",
      "info" : "IfStatement[22279-22454]:IfStatement[23718-23893]"
    }, {
      "left" : "return 1000 * t.getLong(INSTANT_SECONDS) + t.getLong(MILLI_OF_SECOND);",
      "right" : "return 1000 * t.getLong(INSTANT_SECONDS) + t.getLong(MILLI_OF_SECOND);",
      "info" : "ReturnStatement[22327-22397]:ReturnStatement[23766-23836]"
    }, {
      "left" : "return t.getLong(MILLI_OF_DAY);",
      "right" : "return t.getLong(MILLI_OF_DAY);",
      "info" : "ReturnStatement[22423-22454]:ReturnStatement[23862-23893]"
    } ]
  },
  "interFileMappings" : { }
}