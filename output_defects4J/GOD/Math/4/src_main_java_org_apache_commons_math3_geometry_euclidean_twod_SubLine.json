{
  "matchedElements" : [
 {
    "left" : "class : SubLine",
    "right" : "class : SubLine",
    "info" : "TypeDeclaration[1772-9668]:TypeDeclaration[1772-9730]"
  }, {
    "left" : "public SubLine(hyperplane , remainingRegion )",
    "right" : "public SubLine(hyperplane , remainingRegion )",
    "info" : "MethodDeclaration[1952-2270]:MethodDeclaration[1952-2270]"
  }, {
    "left" : "public SubLine(start , end )",
    "right" : "public SubLine(start , end )",
    "info" : "MethodDeclaration[2276-2521]:MethodDeclaration[2276-2521]"
  }, {
    "left" : "public SubLine(segment )",
    "right" : "public SubLine(segment )",
    "info" : "MethodDeclaration[2527-2770]:MethodDeclaration[2527-2770]"
  }, {
    "left" : "public getSegments() : ",
    "right" : "public getSegments() : ",
    "info" : "MethodDeclaration[2776-4212]:MethodDeclaration[2776-4212]"
  }, {
    "left" : "public intersection(subLine , includeEndPoints boolean) : ",
    "right" : "public intersection(subLine , includeEndPoints boolean) : ",
    "info" : "MethodDeclaration[4218-5924]:MethodDeclaration[4218-5986]"
  }, {
    "left" : "private buildIntervalSet(start , end ) : ",
    "right" : "private buildIntervalSet(start , end ) : ",
    "info" : "MethodDeclaration[5930-6343]:MethodDeclaration[5992-6405]"
  }, {
    "left" : "protected buildNew(hyperplane , remainingRegion ) : ",
    "right" : "protected buildNew(hyperplane , remainingRegion ) : ",
    "info" : "MethodDeclaration[6349-6675]:MethodDeclaration[6411-6737]"
  }, {
    "left" : "public side(hyperplane ) : ",
    "right" : "public side(hyperplane ) : ",
    "info" : "MethodDeclaration[6681-7474]:MethodDeclaration[6743-7536]"
  }, {
    "left" : "public split(hyperplane ) : ",
    "right" : "public split(hyperplane ) : ",
    "info" : "MethodDeclaration[7480-9665]:MethodDeclaration[7542-9727]"
  } ],
  "mappings" : [
 {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[1868-1874]:Modifier[1868-1874]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[1875-1880]:TYPE_DECLARATION_KIND[1875-1880]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[2100-2106]:Modifier[2100-2106]"
  }, {
    "left" : "SubLine",
    "right" : "SubLine",
    "info" : "SimpleName[2107-2114]:SimpleName[2107-2114]"
  }, {
    "left" : "final Hyperplane<Euclidean2D> hyperplane",
    "right" : "final Hyperplane<Euclidean2D> hyperplane",
    "info" : "SingleVariableDeclaration[2115-2155]:SingleVariableDeclaration[2115-2155]"
  }, {
    "left" : "final Region<Euclidean1D> remainingRegion",
    "right" : "final Region<Euclidean1D> remainingRegion",
    "info" : "SingleVariableDeclaration[2176-2217]:SingleVariableDeclaration[2176-2217]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2219-2270]:Block[2219-2270]"
  }, {
    "left" : "super(hyperplane, remainingRegion);",
    "right" : "super(hyperplane, remainingRegion);",
    "info" : "SuperConstructorInvocation[2229-2264]:SuperConstructorInvocation[2229-2264]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[2390-2396]:Modifier[2390-2396]"
  }, {
    "left" : "SubLine",
    "right" : "SubLine",
    "info" : "SimpleName[2397-2404]:SimpleName[2397-2404]"
  }, {
    "left" : "final Vector2D start",
    "right" : "final Vector2D start",
    "info" : "SingleVariableDeclaration[2405-2425]:SingleVariableDeclaration[2405-2425]"
  }, {
    "left" : "final Vector2D end",
    "right" : "final Vector2D end",
    "info" : "SingleVariableDeclaration[2427-2445]:SingleVariableDeclaration[2427-2445]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2447-2521]:Block[2447-2521]"
  }, {
    "left" : "super(new Line(start, end), buildIntervalSet(start, end));",
    "right" : "super(new Line(start, end), buildIntervalSet(start, end));",
    "info" : "SuperConstructorInvocation[2457-2515]:SuperConstructorInvocation[2457-2515]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[2635-2641]:Modifier[2635-2641]"
  }, {
    "left" : "SubLine",
    "right" : "SubLine",
    "info" : "SimpleName[2642-2649]:SimpleName[2642-2649]"
  }, {
    "left" : "final Segment segment",
    "right" : "final Segment segment",
    "info" : "SingleVariableDeclaration[2650-2671]:SingleVariableDeclaration[2650-2671]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2673-2770]:Block[2673-2770]"
  }, {
    "left" : "super(segment.getLine(), buildIntervalSet(segment.getStart(), segment.getEnd()));",
    "right" : "super(segment.getLine(), buildIntervalSet(segment.getStart(), segment.getEnd()));",
    "info" : "SuperConstructorInvocation[2683-2764]:SuperConstructorInvocation[2683-2764]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[3664-3670]:Modifier[3664-3670]"
  }, {
    "left" : "List<Segment>",
    "right" : "List<Segment>",
    "info" : "ParameterizedType[3671-3684]:ParameterizedType[3671-3684]"
  }, {
    "left" : "getSegments",
    "right" : "getSegments",
    "info" : "SimpleName[3685-3696]:SimpleName[3685-3696]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3699-4212]:Block[3699-4212]"
  }, {
    "left" : "final Line line = (Line) getHyperplane();",
    "right" : "final Line line = (Line) getHyperplane();",
    "info" : "VariableDeclarationStatement[3710-3751]:VariableDeclarationStatement[3710-3751]"
  }, {
    "left" : "final List<Interval> list = ((IntervalsSet) getRemainingRegion()).asList();",
    "right" : "final List<Interval> list = ((IntervalsSet) getRemainingRegion()).asList();",
    "info" : "VariableDeclarationStatement[3760-3835]:VariableDeclarationStatement[3760-3835]"
  }, {
    "left" : "final List<Segment> segments = new ArrayList<Segment>();",
    "right" : "final List<Segment> segments = new ArrayList<Segment>();",
    "info" : "VariableDeclarationStatement[3844-3900]:VariableDeclarationStatement[3844-3900]"
  }, {
    "left" : "for (final Interval interval : list)",
    "right" : "for (final Interval interval : list)",
    "info" : "EnhancedForStatement[3910-4179]:EnhancedForStatement[3910-4179]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3947-4179]:Block[3947-4179]"
  }, {
    "left" : "final Vector2D start = line.toSpace(new Vector1D(interval.getInf()));",
    "right" : "final Vector2D start = line.toSpace(new Vector1D(interval.getInf()));",
    "info" : "VariableDeclarationStatement[3961-4030]:VariableDeclarationStatement[3961-4030]"
  }, {
    "left" : "final Vector2D end   = line.toSpace(new Vector1D(interval.getSup()));",
    "right" : "final Vector2D end   = line.toSpace(new Vector1D(interval.getSup()));",
    "info" : "VariableDeclarationStatement[4043-4112]:VariableDeclarationStatement[4043-4112]"
  }, {
    "left" : "segments.add(new Segment(start, end, line));",
    "right" : "segments.add(new Segment(start, end, line));",
    "info" : "ExpressionStatement[4125-4169]:ExpressionStatement[4125-4169]"
  }, {
    "left" : "return segments;",
    "right" : "return segments;",
    "info" : "ReturnStatement[4189-4205]:ReturnStatement[4189-4205]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[5043-5049]:Modifier[5043-5049]"
  }, {
    "left" : "Vector2D",
    "right" : "Vector2D",
    "info" : "SimpleType[5050-5058]:SimpleType[5050-5058]"
  }, {
    "left" : "intersection",
    "right" : "intersection",
    "info" : "SimpleName[5059-5071]:SimpleName[5059-5071]"
  }, {
    "left" : "final SubLine subLine",
    "right" : "final SubLine subLine",
    "info" : "SingleVariableDeclaration[5072-5093]:SingleVariableDeclaration[5072-5093]"
  }, {
    "left" : "final boolean includeEndPoints",
    "right" : "final boolean includeEndPoints",
    "info" : "SingleVariableDeclaration[5095-5125]:SingleVariableDeclaration[5095-5125]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5127-5924]:Block[5127-5986]"
  }, {
    "left" : "Line line1 = (Line) getHyperplane();",
    "right" : "Line line1 = (Line) getHyperplane();",
    "info" : "VariableDeclarationStatement[5179-5215]:VariableDeclarationStatement[5179-5215]"
  }, {
    "left" : "Line line2 = (Line) subLine.getHyperplane();",
    "right" : "Line line2 = (Line) subLine.getHyperplane();",
    "info" : "VariableDeclarationStatement[5224-5268]:VariableDeclarationStatement[5224-5268]"
  }, {
    "left" : "Vector2D v2D = line1.intersection(line2);",
    "right" : "Vector2D v2D = line1.intersection(line2);",
    "info" : "VariableDeclarationStatement[5331-5372]:VariableDeclarationStatement[5331-5372]"
  }, {
    "left" : "Location loc1 = getRemainingRegion().checkPoint(line1.toSubSpace(v2D));",
    "right" : "Location loc1 = getRemainingRegion().checkPoint(line1.toSubSpace(v2D));",
    "info" : "VariableDeclarationStatement[5448-5519]:VariableDeclarationStatement[5510-5581]"
  }, {
    "left" : "Location loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));",
    "right" : "Location loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));",
    "info" : "VariableDeclarationStatement[5596-5675]:VariableDeclarationStatement[5658-5737]"
  }, {
    "left" : "if (includeEndPoints)",
    "right" : "if (includeEndPoints)",
    "info" : "IfStatement[5685-5917]:IfStatement[5747-5979]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5707-5810]:Block[5769-5872]"
  }, {
    "left" : "return ((loc1 != Location.OUTSIDE) && (loc2 != Location.OUTSIDE)) ? v2D : null;",
    "right" : "return ((loc1 != Location.OUTSIDE) && (loc2 != Location.OUTSIDE)) ? v2D : null;",
    "info" : "ReturnStatement[5721-5800]:ReturnStatement[5783-5862]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5816-5917]:Block[5878-5979]"
  }, {
    "left" : "return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE)) ? v2D : null;",
    "right" : "return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE)) ? v2D : null;",
    "info" : "ReturnStatement[5830-5907]:ReturnStatement[5892-5969]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[6076-6083]:Modifier[6138-6145]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[6084-6090]:Modifier[6146-6152]"
  }, {
    "left" : "IntervalsSet",
    "right" : "IntervalsSet",
    "info" : "SimpleType[6091-6103]:SimpleType[6153-6165]"
  }, {
    "left" : "buildIntervalSet",
    "right" : "buildIntervalSet",
    "info" : "SimpleName[6104-6120]:SimpleName[6166-6182]"
  }, {
    "left" : "final Vector2D start",
    "right" : "final Vector2D start",
    "info" : "SingleVariableDeclaration[6121-6141]:SingleVariableDeclaration[6183-6203]"
  }, {
    "left" : "final Vector2D end",
    "right" : "final Vector2D end",
    "info" : "SingleVariableDeclaration[6143-6161]:SingleVariableDeclaration[6205-6223]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6163-6343]:Block[6225-6405]"
  }, {
    "left" : "final Line line = new Line(start, end);",
    "right" : "final Line line = new Line(start, end);",
    "info" : "VariableDeclarationStatement[6173-6212]:VariableDeclarationStatement[6235-6274]"
  }, {
    "left" : "return new IntervalsSet(line.toSubSpace(start).getX(),\n                                line.toSubSpace(end).getX());",
    "right" : "return new IntervalsSet(line.toSubSpace(start).getX(),\n                                line.toSubSpace(end).getX());",
    "info" : "ReturnStatement[6221-6337]:ReturnStatement[6283-6399]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[6374-6383]:MarkerAnnotation[6436-6445]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[6388-6397]:Modifier[6450-6459]"
  }, {
    "left" : "AbstractSubHyperplane<Euclidean2D, Euclidean1D>",
    "right" : "AbstractSubHyperplane<Euclidean2D, Euclidean1D>",
    "info" : "ParameterizedType[6398-6445]:ParameterizedType[6460-6507]"
  }, {
    "left" : "buildNew",
    "right" : "buildNew",
    "info" : "SimpleName[6446-6454]:SimpleName[6508-6516]"
  }, {
    "left" : "final Hyperplane<Euclidean2D> hyperplane",
    "right" : "final Hyperplane<Euclidean2D> hyperplane",
    "info" : "SingleVariableDeclaration[6455-6495]:SingleVariableDeclaration[6517-6557]"
  }, {
    "left" : "final Region<Euclidean1D> remainingRegion",
    "right" : "final Region<Euclidean1D> remainingRegion",
    "info" : "SingleVariableDeclaration[6568-6609]:SingleVariableDeclaration[6630-6671]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6611-6675]:Block[6673-6737]"
  }, {
    "left" : "return new SubLine(hyperplane, remainingRegion);",
    "right" : "return new SubLine(hyperplane, remainingRegion);",
    "info" : "ReturnStatement[6621-6669]:ReturnStatement[6683-6731]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[6706-6715]:MarkerAnnotation[6768-6777]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[6720-6726]:Modifier[6782-6788]"
  }, {
    "left" : "Side",
    "right" : "Side",
    "info" : "SimpleType[6727-6731]:SimpleType[6789-6793]"
  }, {
    "left" : "side",
    "right" : "side",
    "info" : "SimpleName[6732-6736]:SimpleName[6794-6798]"
  }, {
    "left" : "final Hyperplane<Euclidean2D> hyperplane",
    "right" : "final Hyperplane<Euclidean2D> hyperplane",
    "info" : "SingleVariableDeclaration[6737-6777]:SingleVariableDeclaration[6799-6839]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6779-7474]:Block[6841-7536]"
  }, {
    "left" : "final Line    thisLine  = (Line) getHyperplane();",
    "right" : "final Line    thisLine  = (Line) getHyperplane();",
    "info" : "VariableDeclarationStatement[6790-6839]:VariableDeclarationStatement[6852-6901]"
  }, {
    "left" : "final Line    otherLine = (Line) hyperplane;",
    "right" : "final Line    otherLine = (Line) hyperplane;",
    "info" : "VariableDeclarationStatement[6848-6892]:VariableDeclarationStatement[6910-6954]"
  }, {
    "left" : "final Vector2D crossing  = thisLine.intersection(otherLine);",
    "right" : "final Vector2D crossing  = thisLine.intersection(otherLine);",
    "info" : "VariableDeclarationStatement[6901-6961]:VariableDeclarationStatement[6963-7023]"
  }, {
    "left" : "if (crossing == null)",
    "right" : "if (crossing == null)",
    "info" : "IfStatement[6971-7209]:IfStatement[7033-7271]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6993-7209]:Block[7055-7271]"
  }, {
    "left" : "final double global = otherLine.getOffset(thisLine);",
    "right" : "final double global = otherLine.getOffset(thisLine);",
    "info" : "VariableDeclarationStatement[7046-7098]:VariableDeclarationStatement[7108-7160]"
  }, {
    "left" : "return (global < -1.0e-10) ? Side.MINUS : ((global > 1.0e-10) ? Side.PLUS : Side.HYPER);",
    "right" : "return (global < -1.0e-10) ? Side.MINUS : ((global > 1.0e-10) ? Side.PLUS : Side.HYPER);",
    "info" : "ReturnStatement[7111-7199]:ReturnStatement[7173-7261]"
  }, {
    "left" : "final boolean direct = FastMath.sin(thisLine.getAngle() - otherLine.getAngle()) < 0;",
    "right" : "final boolean direct = FastMath.sin(thisLine.getAngle() - otherLine.getAngle()) < 0;",
    "info" : "VariableDeclarationStatement[7253-7337]:VariableDeclarationStatement[7315-7399]"
  }, {
    "left" : "final Vector1D x = thisLine.toSubSpace(crossing);",
    "right" : "final Vector1D x = thisLine.toSubSpace(crossing);",
    "info" : "VariableDeclarationStatement[7346-7395]:VariableDeclarationStatement[7408-7457]"
  }, {
    "left" : "return getRemainingRegion().side(new OrientedPoint(x, direct));",
    "right" : "return getRemainingRegion().side(new OrientedPoint(x, direct));",
    "info" : "ReturnStatement[7404-7467]:ReturnStatement[7466-7529]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[7505-7514]:MarkerAnnotation[7567-7576]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[7519-7525]:Modifier[7581-7587]"
  }, {
    "left" : "SplitSubHyperplane<Euclidean2D>",
    "right" : "SplitSubHyperplane<Euclidean2D>",
    "info" : "ParameterizedType[7526-7557]:ParameterizedType[7588-7619]"
  }, {
    "left" : "split",
    "right" : "split",
    "info" : "SimpleName[7558-7563]:SimpleName[7620-7625]"
  }, {
    "left" : "final Hyperplane<Euclidean2D> hyperplane",
    "right" : "final Hyperplane<Euclidean2D> hyperplane",
    "info" : "SingleVariableDeclaration[7564-7604]:SingleVariableDeclaration[7626-7666]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7606-9665]:Block[7668-9727]"
  }, {
    "left" : "final Line    thisLine  = (Line) getHyperplane();",
    "right" : "final Line    thisLine  = (Line) getHyperplane();",
    "info" : "VariableDeclarationStatement[7617-7666]:VariableDeclarationStatement[7679-7728]"
  }, {
    "left" : "final Line    otherLine = (Line) hyperplane;",
    "right" : "final Line    otherLine = (Line) hyperplane;",
    "info" : "VariableDeclarationStatement[7675-7719]:VariableDeclarationStatement[7737-7781]"
  }, {
    "left" : "final Vector2D crossing  = thisLine.intersection(otherLine);",
    "right" : "final Vector2D crossing  = thisLine.intersection(otherLine);",
    "info" : "VariableDeclarationStatement[7728-7788]:VariableDeclarationStatement[7790-7850]"
  }, {
    "left" : "if (crossing == null)",
    "right" : "if (crossing == null)",
    "info" : "IfStatement[7798-8112]:IfStatement[7860-8174]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7820-8112]:Block[7882-8174]"
  }, {
    "left" : "final double global = otherLine.getOffset(thisLine);",
    "right" : "final double global = otherLine.getOffset(thisLine);",
    "info" : "VariableDeclarationStatement[7872-7924]:VariableDeclarationStatement[7934-7986]"
  }, {
    "left" : "return (global < -1.0e-10) ?\n                   new SplitSubHyperplane<Euclidean2D>(null, this) :\n                   new SplitSubHyperplane<Euclidean2D>(this, null);",
    "right" : "return (global < -1.0e-10) ?\n                   new SplitSubHyperplane<Euclidean2D>(null, this) :\n                   new SplitSubHyperplane<Euclidean2D>(this, null);",
    "info" : "ReturnStatement[7937-8102]:ReturnStatement[7999-8164]"
  }, {
    "left" : "final boolean direct = FastMath.sin(thisLine.getAngle() - otherLine.getAngle()) < 0;",
    "right" : "final boolean direct = FastMath.sin(thisLine.getAngle() - otherLine.getAngle()) < 0;",
    "info" : "VariableDeclarationStatement[8156-8240]:VariableDeclarationStatement[8218-8302]"
  }, {
    "left" : "final Vector1D x      = thisLine.toSubSpace(crossing);",
    "right" : "final Vector1D x      = thisLine.toSubSpace(crossing);",
    "info" : "VariableDeclarationStatement[8249-8303]:VariableDeclarationStatement[8311-8365]"
  }, {
    "left" : "final SubHyperplane<Euclidean1D> subPlus  = new OrientedPoint(x, !direct).wholeHyperplane();",
    "right" : "final SubHyperplane<Euclidean1D> subPlus  = new OrientedPoint(x, !direct).wholeHyperplane();",
    "info" : "VariableDeclarationStatement[8312-8404]:VariableDeclarationStatement[8374-8466]"
  }, {
    "left" : "final SubHyperplane<Euclidean1D> subMinus = new OrientedPoint(x,  direct).wholeHyperplane();",
    "right" : "final SubHyperplane<Euclidean1D> subMinus = new OrientedPoint(x,  direct).wholeHyperplane();",
    "info" : "VariableDeclarationStatement[8413-8505]:VariableDeclarationStatement[8475-8567]"
  }, {
    "left" : "final BSPTree<Euclidean1D> splitTree = getRemainingRegion().getTree(false).split(subMinus);",
    "right" : "final BSPTree<Euclidean1D> splitTree = getRemainingRegion().getTree(false).split(subMinus);",
    "info" : "VariableDeclarationStatement[8515-8606]:VariableDeclarationStatement[8577-8668]"
  }, {
    "left" : "final BSPTree<Euclidean1D> plusTree  = getRemainingRegion().isEmpty(splitTree.getPlus()) ?\n                                               new BSPTree<Euclidean1D>(Boolean.FALSE) :\n                                               new BSPTree<Euclidean1D>(subPlus, new BSPTree<Euclidean1D>(Boolean.FALSE),\n                                                                        splitTree.getPlus(), null);",
    "right" : "final BSPTree<Euclidean1D> plusTree  = getRemainingRegion().isEmpty(splitTree.getPlus()) ?\n                                               new BSPTree<Euclidean1D>(Boolean.FALSE) :\n                                               new BSPTree<Euclidean1D>(subPlus, new BSPTree<Euclidean1D>(Boolean.FALSE),\n                                                                        splitTree.getPlus(), null);",
    "info" : "VariableDeclarationStatement[8615-9016]:VariableDeclarationStatement[8677-9078]"
  }, {
    "left" : "final BSPTree<Euclidean1D> minusTree = getRemainingRegion().isEmpty(splitTree.getMinus()) ?\n                                               new BSPTree<Euclidean1D>(Boolean.FALSE) :\n                                               new BSPTree<Euclidean1D>(subMinus, new BSPTree<Euclidean1D>(Boolean.FALSE),\n                                                                        splitTree.getMinus(), null);",
    "right" : "final BSPTree<Euclidean1D> minusTree = getRemainingRegion().isEmpty(splitTree.getMinus()) ?\n                                               new BSPTree<Euclidean1D>(Boolean.FALSE) :\n                                               new BSPTree<Euclidean1D>(subMinus, new BSPTree<Euclidean1D>(Boolean.FALSE),\n                                                                        splitTree.getMinus(), null);",
    "info" : "VariableDeclarationStatement[9025-9429]:VariableDeclarationStatement[9087-9491]"
  }, {
    "left" : "return new SplitSubHyperplane<Euclidean2D>(new SubLine(thisLine.copySelf(), new IntervalsSet(plusTree)),\n                                                   new SubLine(thisLine.copySelf(), new IntervalsSet(minusTree)));",
    "right" : "return new SplitSubHyperplane<Euclidean2D>(new SubLine(thisLine.copySelf(), new IntervalsSet(plusTree)),\n                                                   new SubLine(thisLine.copySelf(), new IntervalsSet(minusTree)));",
    "info" : "ReturnStatement[9439-9658]:ReturnStatement[9501-9720]"
  } ]
}