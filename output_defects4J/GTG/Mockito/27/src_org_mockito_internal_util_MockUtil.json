{
  "matchedElements" : [
 {
    "left" : "class : MockUtil",
    "right" : "class : MockUtil",
    "info" : "TypeDeclaration[733-4259]:TypeDeclaration[733-4092]"
  }, {
    "left" : "creationValidator",
    "right" : "creationValidator",
    "info" : "FieldDeclaration[800-854]:FieldDeclaration[800-854]"
  }, {
    "left" : "public MockUtil(creationValidator )",
    "right" : "public MockUtil(creationValidator )",
    "info" : "MethodDeclaration[862-980]:MethodDeclaration[862-980]"
  }, {
    "left" : "public MockUtil()",
    "right" : "public MockUtil()",
    "info" : "MethodDeclaration[992-1062]:MethodDeclaration[992-1062]"
  }, {
    "left" : "public createMock(classToMock , settings ...) : ",
    "right" : "public createMock(classToMock , settings ...) : ",
    "info" : "MethodDeclaration[1070-2250]:MethodDeclaration[1070-2250]"
  }, {
    "left" : "public resetMock(mock ) : void",
    "right" : "public resetMock(mock ) : void",
    "info" : "MethodDeclaration[2258-2699]:MethodDeclaration[2258-2532]"
  }, {
    "left" : "private newMethodInterceptorFilter(settings ...) : ",
    "right" : "private newMethodInterceptorFilter(settings ...) : ",
    "info" : "MethodDeclaration[2707-3078]:MethodDeclaration[2540-2911]"
  }, {
    "left" : "public getMockHandler(mock ) : ",
    "right" : "public getMockHandler(mock ) : ",
    "info" : "MethodDeclaration[3086-3521]:MethodDeclaration[2919-3354]"
  }, {
    "left" : "private isMockitoMock(mock ) : boolean",
    "right" : "private isMockitoMock(mock ) : boolean",
    "info" : "MethodDeclaration[3529-3625]:MethodDeclaration[3362-3458]"
  }, {
    "left" : "public isMock(mock ) : boolean",
    "right" : "public isMock(mock ) : boolean",
    "info" : "MethodDeclaration[3633-3729]:MethodDeclaration[3466-3562]"
  }, {
    "left" : "private getInterceptor(mock ) : ",
    "right" : "private getInterceptor(mock ) : ",
    "info" : "MethodDeclaration[3737-4129]:MethodDeclaration[3570-3962]"
  }, {
    "left" : "public getMockName(mock ) : ",
    "right" : "public getMockName(mock ) : ",
    "info" : "MethodDeclaration[4137-4256]:MethodDeclaration[3970-4089]"
  } ],
  "mappings" : [
 {
    "left" : "@SuppressWarnings(\"unchecked\")",
    "right" : "@SuppressWarnings(\"unchecked\")",
    "info" : "SingleMemberAnnotation[733-763]:SingleMemberAnnotation[733-763]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[765-771]:Modifier[765-771]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[772-777]:TYPE_DECLARATION_KIND[772-777]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[862-868]:Modifier[862-868]"
  }, {
    "left" : "MockUtil",
    "right" : "MockUtil",
    "info" : "SimpleName[869-877]:SimpleName[869-877]"
  }, {
    "left" : "MockCreationValidator creationValidator",
    "right" : "MockCreationValidator creationValidator",
    "info" : "SingleVariableDeclaration[878-917]:SingleVariableDeclaration[878-917]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[919-980]:Block[919-980]"
  }, {
    "left" : "this.creationValidator = creationValidator;",
    "right" : "this.creationValidator = creationValidator;",
    "info" : "ExpressionStatement[930-973]:ExpressionStatement[930-973]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[992-998]:Modifier[992-998]"
  }, {
    "left" : "MockUtil",
    "right" : "MockUtil",
    "info" : "SimpleName[999-1007]:SimpleName[999-1007]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[1010-1062]:Block[1010-1062]"
  }, {
    "left" : "this(new MockCreationValidator());",
    "right" : "this(new MockCreationValidator());",
    "info" : "ConstructorInvocation[1021-1055]:ConstructorInvocation[1021-1055]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[1070-1076]:Modifier[1070-1076]"
  }, {
    "left" : "T",
    "right" : "T",
    "info" : "TypeParameter[1078-1079]:TypeParameter[1078-1079]"
  }, {
    "left" : "T",
    "right" : "T",
    "info" : "SimpleType[1081-1082]:SimpleType[1081-1082]"
  }, {
    "left" : "createMock",
    "right" : "createMock",
    "info" : "SimpleName[1083-1093]:SimpleName[1083-1093]"
  }, {
    "left" : "Class<T> classToMock",
    "right" : "Class<T> classToMock",
    "info" : "SingleVariableDeclaration[1094-1114]:SingleVariableDeclaration[1094-1114]"
  }, {
    "left" : "MockSettingsImpl settings",
    "right" : "MockSettingsImpl settings",
    "info" : "SingleVariableDeclaration[1116-1141]:SingleVariableDeclaration[1116-1141]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[1143-2250]:Block[1143-2250]"
  }, {
    "left" : "creationValidator.validateType(classToMock);",
    "right" : "creationValidator.validateType(classToMock);",
    "info" : "ExpressionStatement[1154-1198]:ExpressionStatement[1154-1198]"
  }, {
    "left" : "creationValidator.validateExtraInterfaces(classToMock, settings.getExtraInterfaces());",
    "right" : "creationValidator.validateExtraInterfaces(classToMock, settings.getExtraInterfaces());",
    "info" : "ExpressionStatement[1208-1294]:ExpressionStatement[1208-1294]"
  }, {
    "left" : "creationValidator.validateMockedType(classToMock, settings.getSpiedInstance());",
    "right" : "creationValidator.validateMockedType(classToMock, settings.getSpiedInstance());",
    "info" : "ExpressionStatement[1304-1383]:ExpressionStatement[1304-1383]"
  }, {
    "left" : "settings.initiateMockName(classToMock);",
    "right" : "settings.initiateMockName(classToMock);",
    "info" : "ExpressionStatement[1395-1434]:ExpressionStatement[1395-1434]"
  }, {
    "left" : "MethodInterceptorFilter filter = newMethodInterceptorFilter(settings);",
    "right" : "MethodInterceptorFilter filter = newMethodInterceptorFilter(settings);",
    "info" : "VariableDeclarationStatement[1446-1516]:VariableDeclarationStatement[1446-1516]"
  }, {
    "left" : "Class<?>[] interfaces = settings.getExtraInterfaces();",
    "right" : "Class<?>[] interfaces = settings.getExtraInterfaces();",
    "info" : "VariableDeclarationStatement[1526-1580]:VariableDeclarationStatement[1526-1580]"
  }, {
    "left" : "Class<?>[] ancillaryTypes;",
    "right" : "Class<?>[] ancillaryTypes;",
    "info" : "VariableDeclarationStatement[1592-1618]:VariableDeclarationStatement[1592-1618]"
  }, {
    "left" : "if (settings.isSerializable())",
    "right" : "if (settings.isSerializable())",
    "info" : "IfStatement[1628-1916]:IfStatement[1628-1916]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[1659-1817]:Block[1659-1817]"
  }, {
    "left" : "ancillaryTypes = interfaces == null ? new Class<?>[] {Serializable.class} : new ArrayUtils().concat(interfaces, Serializable.class);",
    "right" : "ancillaryTypes = interfaces == null ? new Class<?>[] {Serializable.class} : new ArrayUtils().concat(interfaces, Serializable.class);",
    "info" : "ExpressionStatement[1674-1806]:ExpressionStatement[1674-1806]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[1823-1916]:Block[1823-1916]"
  }, {
    "left" : "ancillaryTypes = interfaces == null ? new Class<?>[0] : interfaces;",
    "right" : "ancillaryTypes = interfaces == null ? new Class<?>[0] : interfaces;",
    "info" : "ExpressionStatement[1838-1905]:ExpressionStatement[1838-1905]"
  }, {
    "left" : "Object spiedInstance = settings.getSpiedInstance();",
    "right" : "Object spiedInstance = settings.getSpiedInstance();",
    "info" : "VariableDeclarationStatement[1928-1979]:VariableDeclarationStatement[1928-1979]"
  }, {
    "left" : "T mock = ClassImposterizer.INSTANCE.imposterise(filter, classToMock, ancillaryTypes);",
    "right" : "T mock = ClassImposterizer.INSTANCE.imposterise(filter, classToMock, ancillaryTypes);",
    "info" : "VariableDeclarationStatement[1999-2084]:VariableDeclarationStatement[1999-2084]"
  }, {
    "left" : "if (spiedInstance != null)",
    "right" : "if (spiedInstance != null)",
    "info" : "IfStatement[2104-2211]:IfStatement[2104-2211]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2131-2211]:Block[2131-2211]"
  }, {
    "left" : "new LenientCopyTool().copyToMock(spiedInstance, mock);",
    "right" : "new LenientCopyTool().copyToMock(spiedInstance, mock);",
    "info" : "ExpressionStatement[2146-2200]:ExpressionStatement[2146-2200]"
  }, {
    "left" : "return mock;",
    "right" : "return mock;",
    "info" : "ReturnStatement[2231-2243]:ReturnStatement[2231-2243]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[2258-2264]:Modifier[2258-2264]"
  }, {
    "left" : "T",
    "right" : "T",
    "info" : "TypeParameter[2266-2267]:TypeParameter[2266-2267]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[2269-2273]:PrimitiveType[2269-2273]"
  }, {
    "left" : "resetMock",
    "right" : "resetMock",
    "info" : "SimpleName[2274-2283]:SimpleName[2274-2283]"
  }, {
    "left" : "T mock",
    "right" : "T mock",
    "info" : "SingleVariableDeclaration[2284-2290]:SingleVariableDeclaration[2284-2290]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2292-2699]:Block[2292-2532]"
  }, {
    "left" : "MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);",
    "right" : "MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);",
    "info" : "VariableDeclarationStatement[2303-2365]:VariableDeclarationStatement[2303-2365]"
  }, {
    "left" : "MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));",
    "right" : "MethodInterceptorFilter newFilter = newMethodInterceptorFilter(oldMockHandler.getMockSettings());",
    "info" : "VariableDeclarationStatement[2452-2639]:VariableDeclarationStatement[2375-2472]"
  }, {
    "left" : "MethodInterceptorFilter",
    "right" : "newMethodInterceptorFilter",
    "info" : "SimpleName[2492-2515]:SimpleName[2411-2437]"
  }, {
    "left" : "org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS)",
    "right" : "oldMockHandler.getMockSettings()",
    "info" : "MethodInvocation[2551-2637]:MethodInvocation[2438-2470]"
  }, {
    "left" : "withSettings",
    "right" : "oldMockHandler",
    "info" : "SimpleName[2571-2583]:SimpleName[2438-2452]"
  }, {
    "left" : "defaultAnswer",
    "right" : "getMockSettings",
    "info" : "SimpleName[2586-2599]:SimpleName[2453-2468]"
  }, {
    "left" : "((Factory) mock).setCallback(0, newFilter);",
    "right" : "((Factory) mock).setCallback(0, newFilter);",
    "info" : "ExpressionStatement[2649-2692]:ExpressionStatement[2482-2525]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[2707-2714]:Modifier[2540-2547]"
  }, {
    "left" : "T",
    "right" : "T",
    "info" : "TypeParameter[2716-2717]:TypeParameter[2549-2550]"
  }, {
    "left" : "MethodInterceptorFilter",
    "right" : "MethodInterceptorFilter",
    "info" : "SimpleType[2719-2742]:SimpleType[2552-2575]"
  }, {
    "left" : "newMethodInterceptorFilter",
    "right" : "newMethodInterceptorFilter",
    "info" : "SimpleName[2743-2769]:SimpleName[2576-2602]"
  }, {
    "left" : "MockSettingsImpl settings",
    "right" : "MockSettingsImpl settings",
    "info" : "SingleVariableDeclaration[2770-2795]:SingleVariableDeclaration[2603-2628]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2797-3078]:Block[2630-2911]"
  }, {
    "left" : "MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "right" : "MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "info" : "VariableDeclarationStatement[2808-2866]:VariableDeclarationStatement[2641-2699]"
  }, {
    "left" : "InvocationNotifierHandler<T> invocationNotifierHandler = new InvocationNotifierHandler<T>(mockHandler, settings);",
    "right" : "InvocationNotifierHandler<T> invocationNotifierHandler = new InvocationNotifierHandler<T>(mockHandler, settings);",
    "info" : "VariableDeclarationStatement[2876-2989]:VariableDeclarationStatement[2709-2822]"
  }, {
    "left" : "return new MethodInterceptorFilter(invocationNotifierHandler, settings);",
    "right" : "return new MethodInterceptorFilter(invocationNotifierHandler, settings);",
    "info" : "ReturnStatement[2999-3071]:ReturnStatement[2832-2904]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[3086-3092]:Modifier[2919-2925]"
  }, {
    "left" : "T",
    "right" : "T",
    "info" : "TypeParameter[3094-3095]:TypeParameter[2927-2928]"
  }, {
    "left" : "MockHandlerInterface<T>",
    "right" : "MockHandlerInterface<T>",
    "info" : "ParameterizedType[3097-3120]:ParameterizedType[2930-2953]"
  }, {
    "left" : "getMockHandler",
    "right" : "getMockHandler",
    "info" : "SimpleName[3121-3135]:SimpleName[2954-2968]"
  }, {
    "left" : "T mock",
    "right" : "T mock",
    "info" : "SingleVariableDeclaration[3136-3142]:SingleVariableDeclaration[2969-2975]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3144-3521]:Block[2977-3354]"
  }, {
    "left" : "if (mock == null)",
    "right" : "if (mock == null)",
    "info" : "IfStatement[3155-3270]:IfStatement[2988-3103]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3173-3270]:Block[3006-3103]"
  }, {
    "left" : "throw new NotAMockException(\"Argument should be a mock, but is null!\");",
    "right" : "throw new NotAMockException(\"Argument should be a mock, but is null!\");",
    "info" : "ThrowStatement[3188-3259]:ThrowStatement[3021-3092]"
  }, {
    "left" : "if (isMockitoMock(mock))",
    "right" : "if (isMockitoMock(mock))",
    "info" : "IfStatement[3282-3514]:IfStatement[3115-3347]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3307-3397]:Block[3140-3230]"
  }, {
    "left" : "return (MockHandlerInterface) getInterceptor(mock).getHandler();",
    "right" : "return (MockHandlerInterface) getInterceptor(mock).getHandler();",
    "info" : "ReturnStatement[3322-3386]:ReturnStatement[3155-3219]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3403-3514]:Block[3236-3347]"
  }, {
    "left" : "throw new NotAMockException(\"Argument should be a mock, but is: \" + mock.getClass());",
    "right" : "throw new NotAMockException(\"Argument should be a mock, but is: \" + mock.getClass());",
    "info" : "ThrowStatement[3418-3503]:ThrowStatement[3251-3336]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[3529-3536]:Modifier[3362-3369]"
  }, {
    "left" : "T",
    "right" : "T",
    "info" : "TypeParameter[3538-3539]:TypeParameter[3371-3372]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[3541-3548]:PrimitiveType[3374-3381]"
  }, {
    "left" : "isMockitoMock",
    "right" : "isMockitoMock",
    "info" : "SimpleName[3549-3562]:SimpleName[3382-3395]"
  }, {
    "left" : "T mock",
    "right" : "T mock",
    "info" : "SingleVariableDeclaration[3563-3569]:SingleVariableDeclaration[3396-3402]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3571-3625]:Block[3404-3458]"
  }, {
    "left" : "return getInterceptor(mock) != null;",
    "right" : "return getInterceptor(mock) != null;",
    "info" : "ReturnStatement[3582-3618]:ReturnStatement[3415-3451]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[3633-3639]:Modifier[3466-3472]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[3640-3647]:PrimitiveType[3473-3480]"
  }, {
    "left" : "isMock",
    "right" : "isMock",
    "info" : "SimpleName[3648-3654]:SimpleName[3481-3487]"
  }, {
    "left" : "Object mock",
    "right" : "Object mock",
    "info" : "SingleVariableDeclaration[3655-3666]:SingleVariableDeclaration[3488-3499]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3668-3729]:Block[3501-3562]"
  }, {
    "left" : "return mock != null && isMockitoMock(mock);",
    "right" : "return mock != null && isMockitoMock(mock);",
    "info" : "ReturnStatement[3679-3722]:ReturnStatement[3512-3555]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[3737-3744]:Modifier[3570-3577]"
  }, {
    "left" : "T",
    "right" : "T",
    "info" : "TypeParameter[3746-3747]:TypeParameter[3579-3580]"
  }, {
    "left" : "MethodInterceptorFilter",
    "right" : "MethodInterceptorFilter",
    "info" : "SimpleType[3749-3772]:SimpleType[3582-3605]"
  }, {
    "left" : "getInterceptor",
    "right" : "getInterceptor",
    "info" : "SimpleName[3773-3787]:SimpleName[3606-3620]"
  }, {
    "left" : "T mock",
    "right" : "T mock",
    "info" : "SingleVariableDeclaration[3788-3794]:SingleVariableDeclaration[3621-3627]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3796-4129]:Block[3629-3962]"
  }, {
    "left" : "if (!(mock instanceof Factory))",
    "right" : "if (!(mock instanceof Factory))",
    "info" : "IfStatement[3807-3877]:IfStatement[3640-3710]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3839-3877]:Block[3672-3710]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[3854-3866]:ReturnStatement[3687-3699]"
  }, {
    "left" : "Factory factory = (Factory) mock;",
    "right" : "Factory factory = (Factory) mock;",
    "info" : "VariableDeclarationStatement[3887-3920]:VariableDeclarationStatement[3720-3753]"
  }, {
    "left" : "Callback callback = factory.getCallback(0);",
    "right" : "Callback callback = factory.getCallback(0);",
    "info" : "VariableDeclarationStatement[3930-3973]:VariableDeclarationStatement[3763-3806]"
  }, {
    "left" : "if (callback instanceof MethodInterceptorFilter)",
    "right" : "if (callback instanceof MethodInterceptorFilter)",
    "info" : "IfStatement[3983-4100]:IfStatement[3816-3933]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4032-4100]:Block[3865-3933]"
  }, {
    "left" : "return (MethodInterceptorFilter) callback;",
    "right" : "return (MethodInterceptorFilter) callback;",
    "info" : "ReturnStatement[4047-4089]:ReturnStatement[3880-3922]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[4110-4122]:ReturnStatement[3943-3955]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[4137-4143]:Modifier[3970-3976]"
  }, {
    "left" : "MockName",
    "right" : "MockName",
    "info" : "SimpleType[4144-4152]:SimpleType[3977-3985]"
  }, {
    "left" : "getMockName",
    "right" : "getMockName",
    "info" : "SimpleName[4153-4164]:SimpleName[3986-3997]"
  }, {
    "left" : "Object mock",
    "right" : "Object mock",
    "info" : "SingleVariableDeclaration[4165-4176]:SingleVariableDeclaration[3998-4009]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4178-4256]:Block[4011-4089]"
  }, {
    "left" : "return getMockHandler(mock).getMockSettings().getMockName();",
    "right" : "return getMockHandler(mock).getMockSettings().getMockName();",
    "info" : "ReturnStatement[4189-4249]:ReturnStatement[4022-4082]"
  } ]
}