{
  "matchedElements" : [
 {
    "left" : "class : UTF8StreamJsonParser",
    "right" : "class : UTF8StreamJsonParser",
    "info" : "TypeDeclaration[432-127067]:TypeDeclaration[432-127213]"
  }, {
    "left" : "BYTE_LF",
    "right" : "BYTE_LF",
    "info" : "FieldDeclaration[679-719]:FieldDeclaration[679-719]"
  }, {
    "left" : "_icUTF8",
    "right" : "_icUTF8",
    "info" : "FieldDeclaration[790-856]:FieldDeclaration[790-856]"
  }, {
    "left" : "_icLatin1",
    "right" : "_icLatin1",
    "info" : "FieldDeclaration[1000-1072]:FieldDeclaration[1000-1072]"
  }, {
    "left" : "_objectCodec",
    "right" : "_objectCodec",
    "info" : "FieldDeclaration[1243-1453]:FieldDeclaration[1243-1453]"
  }, {
    "left" : "_symbols",
    "right" : "_symbols",
    "info" : "FieldDeclaration[1459-1588]:FieldDeclaration[1459-1588]"
  }, {
    "left" : "_quadBuffer",
    "right" : "_quadBuffer",
    "info" : "FieldDeclaration[1759-1864]:FieldDeclaration[1759-1864]"
  }, {
    "left" : "_tokenIncomplete",
    "right" : "_tokenIncomplete",
    "info" : "FieldDeclaration[1870-2098]:FieldDeclaration[1870-2098]"
  }, {
    "left" : "_quad1",
    "right" : "_quad1",
    "info" : "FieldDeclaration[2104-2197]:FieldDeclaration[2104-2197]"
  }, {
    "left" : "_nameStartOffset",
    "right" : "_nameStartOffset",
    "info" : "FieldDeclaration[2203-2528]:FieldDeclaration[2203-2528]"
  }, {
    "left" : "_nameStartRow",
    "right" : "_nameStartRow",
    "info" : "FieldDeclaration[2535-2597]:FieldDeclaration[2535-2597]"
  }, {
    "left" : "_nameStartCol",
    "right" : "_nameStartCol",
    "info" : "FieldDeclaration[2603-2665]:FieldDeclaration[2603-2665]"
  }, {
    "left" : "_inputStream",
    "right" : "_inputStream",
    "info" : "FieldDeclaration[2876-2911]:FieldDeclaration[2876-2911]"
  }, {
    "left" : "_inputBuffer",
    "right" : "_inputBuffer",
    "info" : "FieldDeclaration[3087-3309]:FieldDeclaration[3087-3309]"
  }, {
    "left" : "_bufferRecyclable",
    "right" : "_bufferRecyclable",
    "info" : "FieldDeclaration[3315-3601]:FieldDeclaration[3315-3601]"
  }, {
    "left" : "public UTF8StreamJsonParser(ctxt , features int, in , codec , sym , inputBuffer , start int, end int, bufferRecyclable boolean)",
    "right" : "public UTF8StreamJsonParser(ctxt , features int, in , codec , sym , inputBuffer , start int, end int, bufferRecyclable boolean)",
    "info" : "MethodDeclaration[3773-4397]:MethodDeclaration[3773-4397]"
  }, {
    "left" : "public getCodec() : ",
    "right" : "public getCodec() : ",
    "info" : "MethodDeclaration[4403-4483]:MethodDeclaration[4403-4483]"
  }, {
    "left" : "public setCodec(c ) : void",
    "right" : "public setCodec(c ) : void",
    "info" : "MethodDeclaration[4489-4572]:MethodDeclaration[4489-4572]"
  }, {
    "left" : "public releaseBuffered(out ) : int",
    "right" : "public releaseBuffered(out ) : int",
    "info" : "MethodDeclaration[4758-5092]:MethodDeclaration[4758-5092]"
  }, {
    "left" : "public getInputSource() : ",
    "right" : "public getInputSource() : ",
    "info" : "MethodDeclaration[5098-5179]:MethodDeclaration[5098-5179]"
  }, {
    "left" : "protected loadMore() : boolean",
    "right" : "protected loadMore() : boolean",
    "info" : "MethodDeclaration[5369-6576]:MethodDeclaration[5369-6576]"
  }, {
    "left" : "protected _loadToHaveAtLeast(minAvailable int) : boolean",
    "right" : "protected _loadToHaveAtLeast(minAvailable int) : boolean",
    "info" : "MethodDeclaration[6582-8210]:MethodDeclaration[6582-8210]"
  }, {
    "left" : "protected _closeInput() : void",
    "right" : "protected _closeInput() : void",
    "info" : "MethodDeclaration[8220-8717]:MethodDeclaration[8220-8717]"
  }, {
    "left" : "protected _releaseBuffers() : void",
    "right" : "protected _releaseBuffers() : void",
    "info" : "MethodDeclaration[8723-9638]:MethodDeclaration[8723-9638]"
  }, {
    "left" : "public getText() : ",
    "right" : "public getText() : ",
    "info" : "MethodDeclaration[9819-10213]:MethodDeclaration[9819-10213]"
  }, {
    "left" : "public getValueAsString() : ",
    "right" : "public getValueAsString() : ",
    "info" : "MethodDeclaration[10309-10816]:MethodDeclaration[10309-10816]"
  }, {
    "left" : "public getValueAsString(defValue ) : ",
    "right" : "public getValueAsString(defValue ) : ",
    "info" : "MethodDeclaration[10844-11370]:MethodDeclaration[10844-11370]"
  }, {
    "left" : "public getValueAsInt() : int",
    "right" : "public getValueAsInt() : int",
    "info" : "MethodDeclaration[11393-11998]:MethodDeclaration[11393-11998]"
  }, {
    "left" : "public getValueAsInt(defValue int) : int",
    "right" : "public getValueAsInt(defValue int) : int",
    "info" : "MethodDeclaration[12021-12645]:MethodDeclaration[12021-12645]"
  }, {
    "left" : "protected _getText2(t ) : ",
    "right" : "protected _getText2(t ) : ",
    "info" : "MethodDeclaration[12655-13098]:MethodDeclaration[12655-13098]"
  }, {
    "left" : "public getTextCharacters() : ",
    "right" : "public getTextCharacters() : ",
    "info" : "MethodDeclaration[13104-14431]:MethodDeclaration[13104-14431]"
  }, {
    "left" : "public getTextLength() : int",
    "right" : "public getTextLength() : int",
    "info" : "MethodDeclaration[14437-15211]:MethodDeclaration[14437-15211]"
  }, {
    "left" : "public getTextOffset() : int",
    "right" : "public getTextOffset() : int",
    "info" : "MethodDeclaration[15217-15902]:MethodDeclaration[15217-15902]"
  }, {
    "left" : "public getBinaryValue(b64variant ) : ",
    "right" : "public getBinaryValue(b64variant ) : ",
    "info" : "MethodDeclaration[15912-17244]:MethodDeclaration[15912-17244]"
  }, {
    "left" : "public readBinaryValue(b64variant , out ) : int",
    "right" : "public readBinaryValue(b64variant , out ) : int",
    "info" : "MethodDeclaration[17250-17884]:MethodDeclaration[17250-17884]"
  }, {
    "left" : "protected _readBinary(b64variant , out , buffer ) : int",
    "right" : "protected _readBinary(b64variant , out , buffer ) : int",
    "info" : "MethodDeclaration[17890-23102]:MethodDeclaration[17890-23102]"
  }, {
    "left" : "public nextToken() : ",
    "right" : "public nextToken() : ",
    "info" : "MethodDeclaration[23288-27298]:MethodDeclaration[23288-27298]"
  }, {
    "left" : "private _nextTokenNotInObject(i int) : ",
    "right" : "private _nextTokenNotInObject(i int) : ",
    "info" : "MethodDeclaration[27304-28829]:MethodDeclaration[27304-28829]"
  }, {
    "left" : "private _nextAfterName() : ",
    "right" : "private _nextAfterName() : ",
    "info" : "MethodDeclaration[28839-29507]:MethodDeclaration[28839-29507]"
  }, {
    "left" : "public nextFieldName(str ) : boolean",
    "right" : "public nextFieldName(str ) : boolean",
    "info" : "MethodDeclaration[29718-32803]:MethodDeclaration[29718-32803]"
  }, {
    "left" : "public nextFieldName() : ",
    "right" : "public nextFieldName() : ",
    "info" : "MethodDeclaration[32809-35768]:MethodDeclaration[32809-35768]"
  }, {
    "left" : "private _skipColonFast(ptr int) : int",
    "right" : "private _skipColonFast(ptr int) : int",
    "info" : "MethodDeclaration[35849-37483]:MethodDeclaration[35849-37483]"
  }, {
    "left" : "private _isNextTokenNameYes(i int) : void",
    "right" : "private _isNextTokenNameYes(i int) : void",
    "info" : "MethodDeclaration[37493-38708]:MethodDeclaration[37493-38708]"
  }, {
    "left" : "private _isNextTokenNameMaybe(i int, str ) : boolean",
    "right" : "private _isNextTokenNameMaybe(i int, str ) : boolean",
    "info" : "MethodDeclaration[38714-40304]:MethodDeclaration[38714-40304]"
  }, {
    "left" : "public nextTextValue() : ",
    "right" : "public nextTextValue() : ",
    "info" : "MethodDeclaration[40310-41444]:MethodDeclaration[40310-41444]"
  }, {
    "left" : "public nextIntValue(defaultValue int) : int",
    "right" : "public nextIntValue(defaultValue int) : int",
    "info" : "MethodDeclaration[41450-42450]:MethodDeclaration[41450-42450]"
  }, {
    "left" : "public nextLongValue(defaultValue long) : long",
    "right" : "public nextLongValue(defaultValue long) : long",
    "info" : "MethodDeclaration[42456-43461]:MethodDeclaration[42456-43461]"
  }, {
    "left" : "public nextBooleanValue() : ",
    "right" : "public nextBooleanValue() : ",
    "info" : "MethodDeclaration[43467-44630]:MethodDeclaration[43467-44630]"
  }, {
    "left" : "protected _parsePosNumber(c int) : ",
    "right" : "protected _parsePosNumber(c int) : ",
    "info" : "MethodDeclaration[44820-47181]:MethodDeclaration[44820-47181]"
  }, {
    "left" : "protected _parseNegNumber() : ",
    "right" : "protected _parseNegNumber() : ",
    "info" : "MethodDeclaration[47191-49212]:MethodDeclaration[47191-49212]"
  }, {
    "left" : "private _parseNumber2(outBuf , outPtr int, negative boolean, intPartLength int) : ",
    "right" : "private _parseNumber2(outBuf , outPtr int, negative boolean, intPartLength int) : ",
    "info" : "MethodDeclaration[49218-50683]:MethodDeclaration[49218-50683]"
  }, {
    "left" : "private _verifyNoLeadingZeroes() : int",
    "right" : "private _verifyNoLeadingZeroes() : int",
    "info" : "MethodDeclaration[50693-52079]:MethodDeclaration[50693-52079]"
  }, {
    "left" : "private _parseFloat(outBuf , outPtr int, c int, negative boolean, integerPartLength int) : ",
    "right" : "private _parseFloat(outBuf , outPtr int, c int, negative boolean, integerPartLength int) : ",
    "info" : "MethodDeclaration[52089-55444]:MethodDeclaration[52089-55590]"
  }, {
    "left" : "private _verifyRootSpace(ch int) : void",
    "right" : "private _verifyRootSpace(ch int) : void",
    "info" : "MethodDeclaration[55450-56211]:MethodDeclaration[55596-56357]"
  }, {
    "left" : "protected _parseName(i int) : ",
    "right" : "protected _parseName(i int) : ",
    "info" : "MethodDeclaration[56408-58770]:MethodDeclaration[56554-58916]"
  }, {
    "left" : "protected parseMediumName(q2 int) : ",
    "right" : "protected parseMediumName(q2 int) : ",
    "info" : "MethodDeclaration[58776-60062]:MethodDeclaration[58922-60208]"
  }, {
    "left" : "protected parseMediumName2(q3 int, q2 int) : ",
    "right" : "protected parseMediumName2(q3 int, q2 int) : ",
    "info" : "MethodDeclaration[60068-61408]:MethodDeclaration[60214-61554]"
  }, {
    "left" : "protected parseLongName(q int, q2 int, q3 int) : ",
    "right" : "protected parseLongName(q int, q2 int, q3 int) : ",
    "info" : "MethodDeclaration[61418-63541]:MethodDeclaration[61564-63687]"
  }, {
    "left" : "protected slowParseName() : ",
    "right" : "protected slowParseName() : ",
    "info" : "MethodDeclaration[63547-64173]:MethodDeclaration[63693-64319]"
  }, {
    "left" : "private parseName(q1 int, ch int, lastQuadBytes int) : ",
    "right" : "private parseName(q1 int, ch int, lastQuadBytes int) : ",
    "info" : "MethodDeclaration[64179-64343]:MethodDeclaration[64325-64489]"
  }, {
    "left" : "private parseName(q1 int, q2 int, ch int, lastQuadBytes int) : ",
    "right" : "private parseName(q1 int, q2 int, ch int, lastQuadBytes int) : ",
    "info" : "MethodDeclaration[64349-64550]:MethodDeclaration[64495-64696]"
  }, {
    "left" : "private parseName(q1 int, q2 int, q3 int, ch int, lastQuadBytes int) : ",
    "right" : "private parseName(q1 int, q2 int, q3 int, ch int, lastQuadBytes int) : ",
    "info" : "MethodDeclaration[64556-64794]:MethodDeclaration[64702-64940]"
  }, {
    "left" : "protected parseEscapedName(quads , qlen int, currQuad int, ch int, currQuadBytes int) : ",
    "right" : "protected parseEscapedName(quads , qlen int, currQuad int, ch int, currQuadBytes int) : ",
    "info" : "MethodDeclaration[64804-69052]:MethodDeclaration[64950-69198]"
  }, {
    "left" : "protected _handleOddName(ch int) : ",
    "right" : "protected _handleOddName(ch int) : ",
    "info" : "MethodDeclaration[69058-71846]:MethodDeclaration[69204-71992]"
  }, {
    "left" : "protected _parseAposName() : ",
    "right" : "protected _parseAposName() : ",
    "info" : "MethodDeclaration[72086-76185]:MethodDeclaration[72232-76331]"
  }, {
    "left" : "private findName(q1 int, lastQuadBytes int) : ",
    "right" : "private findName(q1 int, lastQuadBytes int) : ",
    "info" : "MethodDeclaration[76383-76840]:MethodDeclaration[76529-76986]"
  }, {
    "left" : "private findName(q1 int, q2 int, lastQuadBytes int) : ",
    "right" : "private findName(q1 int, q2 int, lastQuadBytes int) : ",
    "info" : "MethodDeclaration[76846-77344]:MethodDeclaration[76992-77490]"
  }, {
    "left" : "private findName(q1 int, q2 int, q3 int, lastQuadBytes int) : ",
    "right" : "private findName(q1 int, q2 int, q3 int, lastQuadBytes int) : ",
    "info" : "MethodDeclaration[77350-77786]:MethodDeclaration[77496-77932]"
  }, {
    "left" : "private findName(quads , qlen int, lastQuad int, lastQuadBytes int) : ",
    "right" : "private findName(quads , qlen int, lastQuad int, lastQuadBytes int) : ",
    "info" : "MethodDeclaration[77796-78256]:MethodDeclaration[77942-78402]"
  }, {
    "left" : "private addName(quads , qlen int, lastQuadBytes int) : ",
    "right" : "private addName(quads , qlen int, lastQuadBytes int) : ",
    "info" : "MethodDeclaration[78262-82939]:MethodDeclaration[78408-83085]"
  }, {
    "left" : "protected _finishString() : void",
    "right" : "protected _finishString() : void",
    "info" : "MethodDeclaration[83135-84156]:MethodDeclaration[83281-84302]"
  }, {
    "left" : "protected _finishAndReturnString() : ",
    "right" : "protected _finishAndReturnString() : ",
    "info" : "MethodDeclaration[84162-85243]:MethodDeclaration[84308-85389]"
  }, {
    "left" : "private _finishString2(outBuf , outPtr int) : void",
    "right" : "private _finishString2(outBuf , outPtr int) : void",
    "info" : "MethodDeclaration[85253-88168]:MethodDeclaration[85399-88314]"
  }, {
    "left" : "protected _skipString() : void",
    "right" : "protected _skipString() : void",
    "info" : "MethodDeclaration[88174-90077]:MethodDeclaration[88320-90223]"
  }, {
    "left" : "protected _handleUnexpectedValue(c int) : ",
    "right" : "protected _handleUnexpectedValue(c int) : ",
    "info" : "MethodDeclaration[90083-92129]:MethodDeclaration[90229-92275]"
  }, {
    "left" : "protected _handleApos() : ",
    "right" : "protected _handleApos() : ",
    "info" : "MethodDeclaration[92135-95148]:MethodDeclaration[92281-95294]"
  }, {
    "left" : "protected _handleInvalidNumberStart(ch int, neg boolean) : ",
    "right" : "protected _handleInvalidNumberStart(ch int, neg boolean) : ",
    "info" : "MethodDeclaration[95158-96340]:MethodDeclaration[95304-96486]"
  }, {
    "left" : "protected _matchToken(matchStr , i int) : void",
    "right" : "protected _matchToken(matchStr , i int) : void",
    "info" : "MethodDeclaration[96346-96986]:MethodDeclaration[96492-97132]"
  }, {
    "left" : "private _matchToken2(matchStr , i int) : void",
    "right" : "private _matchToken2(matchStr , i int) : void",
    "info" : "MethodDeclaration[96992-97739]:MethodDeclaration[97138-97885]"
  }, {
    "left" : "private _checkMatchEnd(matchStr , i int, ch int) : void",
    "right" : "private _checkMatchEnd(matchStr , i int, ch int) : void",
    "info" : "MethodDeclaration[97745-98059]:MethodDeclaration[97891-98205]"
  }, {
    "left" : "private _skipWS() : int",
    "right" : "private _skipWS() : int",
    "info" : "MethodDeclaration[98267-99023]:MethodDeclaration[98413-99169]"
  }, {
    "left" : "private _skipWS2() : int",
    "right" : "private _skipWS2() : int",
    "info" : "MethodDeclaration[99029-100030]:MethodDeclaration[99175-100176]"
  }, {
    "left" : "private _skipWSOrEnd() : int",
    "right" : "private _skipWSOrEnd() : int",
    "info" : "MethodDeclaration[100040-101656]:MethodDeclaration[100186-101802]"
  }, {
    "left" : "private _skipWSOrEnd2() : int",
    "right" : "private _skipWSOrEnd2() : int",
    "info" : "MethodDeclaration[101662-102607]:MethodDeclaration[101808-102753]"
  }, {
    "left" : "private _skipColon() : int",
    "right" : "private _skipColon() : int",
    "info" : "MethodDeclaration[102613-104532]:MethodDeclaration[102759-104678]"
  }, {
    "left" : "private _skipColon2(gotColon boolean) : int",
    "right" : "private _skipColon2(gotColon boolean) : int",
    "info" : "MethodDeclaration[104538-105791]:MethodDeclaration[104684-105937]"
  }, {
    "left" : "private _skipComment() : void",
    "right" : "private _skipComment() : void",
    "info" : "MethodDeclaration[105797-106515]:MethodDeclaration[105943-106661]"
  }, {
    "left" : "private _skipCComment() : void",
    "right" : "private _skipCComment() : void",
    "info" : "MethodDeclaration[106521-108079]:MethodDeclaration[106667-108225]"
  }, {
    "left" : "private _skipYAMLComment() : boolean",
    "right" : "private _skipYAMLComment() : boolean",
    "info" : "MethodDeclaration[108085-108289]:MethodDeclaration[108231-108435]"
  }, {
    "left" : "private _skipLine() : void",
    "right" : "private _skipLine() : void",
    "info" : "MethodDeclaration[108295-109648]:MethodDeclaration[108441-109794]"
  }, {
    "left" : "protected _decodeEscaped() : char",
    "right" : "protected _decodeEscaped() : char",
    "info" : "MethodDeclaration[109658-111158]:MethodDeclaration[109804-111304]"
  }, {
    "left" : "protected _decodeCharForError(firstByte int) : int",
    "right" : "protected _decodeCharForError(firstByte int) : int",
    "info" : "MethodDeclaration[111164-112768]:MethodDeclaration[111310-112914]"
  }, {
    "left" : "private _decodeUtf8_2(c int) : int",
    "right" : "private _decodeUtf8_2(c int) : int",
    "info" : "MethodDeclaration[112956-113302]:MethodDeclaration[113102-113448]"
  }, {
    "left" : "private _decodeUtf8_3(c1 int) : int",
    "right" : "private _decodeUtf8_3(c1 int) : int",
    "info" : "MethodDeclaration[113308-113947]:MethodDeclaration[113454-114093]"
  }, {
    "left" : "private _decodeUtf8_3fast(c1 int) : int",
    "right" : "private _decodeUtf8_3fast(c1 int) : int",
    "info" : "MethodDeclaration[113953-114432]:MethodDeclaration[114099-114578]"
  }, {
    "left" : "private _decodeUtf8_4(c int) : int",
    "right" : "private _decodeUtf8_4(c int) : int",
    "info" : "MethodDeclaration[114438-115586]:MethodDeclaration[114584-115732]"
  }, {
    "left" : "private _skipUtf8_2() : void",
    "right" : "private _skipUtf8_2() : void",
    "info" : "MethodDeclaration[115592-115885]:MethodDeclaration[115738-116031]"
  }, {
    "left" : "private _skipUtf8_3() : void",
    "right" : "private _skipUtf8_3() : void",
    "info" : "MethodDeclaration[115997-116537]:MethodDeclaration[116143-116683]"
  }, {
    "left" : "private _skipUtf8_4(c int) : void",
    "right" : "private _skipUtf8_4(c int) : void",
    "info" : "MethodDeclaration[116543-117293]:MethodDeclaration[116689-117439]"
  }, {
    "left" : "protected _skipCR() : void",
    "right" : "protected _skipCR() : void",
    "info" : "MethodDeclaration[117482-117884]:MethodDeclaration[117628-118030]"
  }, {
    "left" : "private nextByte() : int",
    "right" : "private nextByte() : int",
    "info" : "MethodDeclaration[117894-118078]:MethodDeclaration[118040-118224]"
  }, {
    "left" : "protected _reportInvalidToken(matchedPart ) : void",
    "right" : "protected _reportInvalidToken(matchedPart ) : void",
    "info" : "MethodDeclaration[118269-118433]:MethodDeclaration[118415-118579]"
  }, {
    "left" : "protected _reportInvalidToken(matchedPart , msg ) : void",
    "right" : "protected _reportInvalidToken(matchedPart , msg ) : void",
    "info" : "MethodDeclaration[118439-119247]:MethodDeclaration[118585-119393]"
  }, {
    "left" : "protected _reportInvalidChar(c int) : void",
    "right" : "protected _reportInvalidChar(c int) : void",
    "info" : "MethodDeclaration[119261-119512]:MethodDeclaration[119407-119658]"
  }, {
    "left" : "protected _reportInvalidInitial(mask int) : void",
    "right" : "protected _reportInvalidInitial(mask int) : void",
    "info" : "MethodDeclaration[119518-119689]:MethodDeclaration[119664-119835]"
  }, {
    "left" : "protected _reportInvalidOther(mask int) : void",
    "right" : "protected _reportInvalidOther(mask int) : void",
    "info" : "MethodDeclaration[119695-119865]:MethodDeclaration[119841-120011]"
  }, {
    "left" : "protected _reportInvalidOther(mask int, ptr int) : void",
    "right" : "protected _reportInvalidOther(mask int, ptr int) : void",
    "info" : "MethodDeclaration[119871-120030]:MethodDeclaration[120017-120176]"
  }, {
    "left" : "public growArrayBy(arr , more int) : ",
    "right" : "public growArrayBy(arr , more int) : ",
    "info" : "MethodDeclaration[120036-120225]:MethodDeclaration[120182-120371]"
  }, {
    "left" : "protected _decodeBase64(b64variant ) : ",
    "right" : "protected _decodeBase64(b64variant ) : ",
    "info" : "MethodDeclaration[120414-125087]:MethodDeclaration[120560-125233]"
  }, {
    "left" : "public getTokenLocation() : ",
    "right" : "public getTokenLocation() : ",
    "info" : "MethodDeclaration[125354-125822]:MethodDeclaration[125500-125968]"
  }, {
    "left" : "public getCurrentLocation() : ",
    "right" : "public getCurrentLocation() : ",
    "info" : "MethodDeclaration[125891-126194]:MethodDeclaration[126037-126340]"
  }, {
    "left" : "private _updateLocation() : void",
    "right" : "private _updateLocation() : void",
    "info" : "MethodDeclaration[126218-126446]:MethodDeclaration[126364-126592]"
  }, {
    "left" : "private _updateNameLocation() : void",
    "right" : "private _updateNameLocation() : void",
    "info" : "MethodDeclaration[126470-126678]:MethodDeclaration[126616-126824]"
  }, {
    "left" : "private pad(q int, bytes int) : int",
    "right" : "private pad(q int, bytes int) : int",
    "info" : "MethodDeclaration[126859-127065]:MethodDeclaration[127005-127211]"
  } ],
  "mappings" : [
 {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[616-622]:Modifier[616-622]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[623-628]:TYPE_DECLARATION_KIND[623-628]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[3773-3779]:Modifier[3773-3779]"
  }, {
    "left" : "UTF8StreamJsonParser",
    "right" : "UTF8StreamJsonParser",
    "info" : "SimpleName[3780-3800]:SimpleName[3780-3800]"
  }, {
    "left" : "IOContext ctxt",
    "right" : "IOContext ctxt",
    "info" : "SingleVariableDeclaration[3801-3815]:SingleVariableDeclaration[3801-3815]"
  }, {
    "left" : "int features",
    "right" : "int features",
    "info" : "SingleVariableDeclaration[3817-3829]:SingleVariableDeclaration[3817-3829]"
  }, {
    "left" : "InputStream in",
    "right" : "InputStream in",
    "info" : "SingleVariableDeclaration[3831-3845]:SingleVariableDeclaration[3831-3845]"
  }, {
    "left" : "ObjectCodec codec",
    "right" : "ObjectCodec codec",
    "info" : "SingleVariableDeclaration[3859-3876]:SingleVariableDeclaration[3859-3876]"
  }, {
    "left" : "ByteQuadsCanonicalizer sym",
    "right" : "ByteQuadsCanonicalizer sym",
    "info" : "SingleVariableDeclaration[3878-3904]:SingleVariableDeclaration[3878-3904]"
  }, {
    "left" : "byte[] inputBuffer",
    "right" : "byte[] inputBuffer",
    "info" : "SingleVariableDeclaration[3918-3936]:SingleVariableDeclaration[3918-3936]"
  }, {
    "left" : "int start",
    "right" : "int start",
    "info" : "SingleVariableDeclaration[3938-3947]:SingleVariableDeclaration[3938-3947]"
  }, {
    "left" : "int end",
    "right" : "int end",
    "info" : "SingleVariableDeclaration[3949-3956]:SingleVariableDeclaration[3949-3956]"
  }, {
    "left" : "boolean bufferRecyclable",
    "right" : "boolean bufferRecyclable",
    "info" : "SingleVariableDeclaration[3970-3994]:SingleVariableDeclaration[3970-3994]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4000-4397]:Block[4000-4397]"
  }, {
    "left" : "super(ctxt, features);",
    "right" : "super(ctxt, features);",
    "info" : "SuperConstructorInvocation[4010-4032]:SuperConstructorInvocation[4010-4032]"
  }, {
    "left" : "_inputStream = in;",
    "right" : "_inputStream = in;",
    "info" : "ExpressionStatement[4041-4059]:ExpressionStatement[4041-4059]"
  }, {
    "left" : "_objectCodec = codec;",
    "right" : "_objectCodec = codec;",
    "info" : "ExpressionStatement[4068-4089]:ExpressionStatement[4068-4089]"
  }, {
    "left" : "_symbols = sym;",
    "right" : "_symbols = sym;",
    "info" : "ExpressionStatement[4098-4113]:ExpressionStatement[4098-4113]"
  }, {
    "left" : "_inputBuffer = inputBuffer;",
    "right" : "_inputBuffer = inputBuffer;",
    "info" : "ExpressionStatement[4122-4149]:ExpressionStatement[4122-4149]"
  }, {
    "left" : "_inputPtr = start;",
    "right" : "_inputPtr = start;",
    "info" : "ExpressionStatement[4158-4176]:ExpressionStatement[4158-4176]"
  }, {
    "left" : "_inputEnd = end;",
    "right" : "_inputEnd = end;",
    "info" : "ExpressionStatement[4185-4201]:ExpressionStatement[4185-4201]"
  }, {
    "left" : "_currInputRowStart = start;",
    "right" : "_currInputRowStart = start;",
    "info" : "ExpressionStatement[4210-4237]:ExpressionStatement[4210-4237]"
  }, {
    "left" : "_currInputProcessed = -start;",
    "right" : "_currInputProcessed = -start;",
    "info" : "ExpressionStatement[4316-4345]:ExpressionStatement[4316-4345]"
  }, {
    "left" : "_bufferRecyclable = bufferRecyclable;",
    "right" : "_bufferRecyclable = bufferRecyclable;",
    "info" : "ExpressionStatement[4354-4391]:ExpressionStatement[4354-4391]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[4403-4412]:MarkerAnnotation[4403-4412]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[4417-4423]:Modifier[4417-4423]"
  }, {
    "left" : "ObjectCodec",
    "right" : "ObjectCodec",
    "info" : "SimpleType[4424-4435]:SimpleType[4424-4435]"
  }, {
    "left" : "getCodec",
    "right" : "getCodec",
    "info" : "SimpleName[4436-4444]:SimpleName[4436-4444]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4447-4483]:Block[4447-4483]"
  }, {
    "left" : "return _objectCodec;",
    "right" : "return _objectCodec;",
    "info" : "ReturnStatement[4457-4477]:ReturnStatement[4457-4477]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[4489-4498]:MarkerAnnotation[4489-4498]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[4503-4509]:Modifier[4503-4509]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[4510-4514]:PrimitiveType[4510-4514]"
  }, {
    "left" : "setCodec",
    "right" : "setCodec",
    "info" : "SimpleName[4515-4523]:SimpleName[4515-4523]"
  }, {
    "left" : "ObjectCodec c",
    "right" : "ObjectCodec c",
    "info" : "SingleVariableDeclaration[4524-4537]:SingleVariableDeclaration[4524-4537]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4539-4572]:Block[4539-4572]"
  }, {
    "left" : "_objectCodec = c;",
    "right" : "_objectCodec = c;",
    "info" : "ExpressionStatement[4549-4566]:ExpressionStatement[4549-4566]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[4758-4767]:MarkerAnnotation[4758-4767]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[4772-4778]:Modifier[4772-4778]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[4779-4782]:PrimitiveType[4779-4782]"
  }, {
    "left" : "releaseBuffered",
    "right" : "releaseBuffered",
    "info" : "SimpleName[4783-4798]:SimpleName[4783-4798]"
  }, {
    "left" : "OutputStream out",
    "right" : "OutputStream out",
    "info" : "SingleVariableDeclaration[4799-4815]:SingleVariableDeclaration[4799-4815]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[4824-4835]:SimpleType[4824-4835]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4840-5092]:Block[4840-5092]"
  }, {
    "left" : "int count = _inputEnd - _inputPtr;",
    "right" : "int count = _inputEnd - _inputPtr;",
    "info" : "VariableDeclarationStatement[4850-4884]:VariableDeclarationStatement[4850-4884]"
  }, {
    "left" : "if (count < 1)",
    "right" : "if (count < 1)",
    "info" : "IfStatement[4893-4941]:IfStatement[4893-4941]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4908-4941]:Block[4908-4941]"
  }, {
    "left" : "return 0;",
    "right" : "return 0;",
    "info" : "ReturnStatement[4922-4931]:ReturnStatement[4922-4931]"
  }, {
    "left" : "int origPtr = _inputPtr;",
    "right" : "int origPtr = _inputPtr;",
    "info" : "VariableDeclarationStatement[4991-5015]:VariableDeclarationStatement[4991-5015]"
  }, {
    "left" : "out.write(_inputBuffer, origPtr, count);",
    "right" : "out.write(_inputBuffer, origPtr, count);",
    "info" : "ExpressionStatement[5024-5064]:ExpressionStatement[5024-5064]"
  }, {
    "left" : "return count;",
    "right" : "return count;",
    "info" : "ReturnStatement[5073-5086]:ReturnStatement[5073-5086]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[5098-5107]:MarkerAnnotation[5098-5107]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[5112-5118]:Modifier[5112-5118]"
  }, {
    "left" : "Object",
    "right" : "Object",
    "info" : "SimpleType[5119-5125]:SimpleType[5119-5125]"
  }, {
    "left" : "getInputSource",
    "right" : "getInputSource",
    "info" : "SimpleName[5126-5140]:SimpleName[5126-5140]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5143-5179]:Block[5143-5179]"
  }, {
    "left" : "return _inputStream;",
    "right" : "return _inputStream;",
    "info" : "ReturnStatement[5153-5173]:ReturnStatement[5153-5173]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[5369-5378]:MarkerAnnotation[5369-5378]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[5383-5392]:Modifier[5383-5392]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[5393-5398]:Modifier[5393-5398]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[5399-5406]:PrimitiveType[5399-5406]"
  }, {
    "left" : "loadMore",
    "right" : "loadMore",
    "info" : "SimpleName[5407-5415]:SimpleName[5407-5415]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[5425-5436]:SimpleType[5425-5436]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5441-6576]:Block[5441-6576]"
  }, {
    "left" : "final int bufSize = _inputEnd;",
    "right" : "final int bufSize = _inputEnd;",
    "info" : "VariableDeclarationStatement[5451-5481]:VariableDeclarationStatement[5451-5481]"
  }, {
    "left" : "_currInputProcessed += _inputEnd;",
    "right" : "_currInputProcessed += _inputEnd;",
    "info" : "ExpressionStatement[5491-5524]:ExpressionStatement[5491-5524]"
  }, {
    "left" : "_currInputRowStart -= _inputEnd;",
    "right" : "_currInputRowStart -= _inputEnd;",
    "info" : "ExpressionStatement[5533-5565]:ExpressionStatement[5533-5565]"
  }, {
    "left" : "_nameStartOffset -= bufSize;",
    "right" : "_nameStartOffset -= bufSize;",
    "info" : "ExpressionStatement[5814-5842]:ExpressionStatement[5814-5842]"
  }, {
    "left" : "if (_inputStream != null)",
    "right" : "if (_inputStream != null)",
    "info" : "IfStatement[5852-6548]:IfStatement[5852-6548]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5878-6548]:Block[5878-6548]"
  }, {
    "left" : "int space = _inputBuffer.length;",
    "right" : "int space = _inputBuffer.length;",
    "info" : "VariableDeclarationStatement[5892-5924]:VariableDeclarationStatement[5892-5924]"
  }, {
    "left" : "if (space == 0)",
    "right" : "if (space == 0)",
    "info" : "IfStatement[5937-6036]:IfStatement[5937-6036]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5953-6036]:Block[5953-6036]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[6009-6022]:ReturnStatement[6009-6022]"
  }, {
    "left" : "int count = _inputStream.read(_inputBuffer, 0, space);",
    "right" : "int count = _inputStream.read(_inputBuffer, 0, space);",
    "info" : "VariableDeclarationStatement[6062-6116]:VariableDeclarationStatement[6062-6116]"
  }, {
    "left" : "if (count > 0)",
    "right" : "if (count > 0)",
    "info" : "IfStatement[6129-6254]:IfStatement[6129-6254]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6144-6254]:Block[6144-6254]"
  }, {
    "left" : "_inputPtr = 0;",
    "right" : "_inputPtr = 0;",
    "info" : "ExpressionStatement[6162-6176]:ExpressionStatement[6162-6176]"
  }, {
    "left" : "_inputEnd = count;",
    "right" : "_inputEnd = count;",
    "info" : "ExpressionStatement[6193-6211]:ExpressionStatement[6193-6211]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[6228-6240]:ReturnStatement[6228-6240]"
  }, {
    "left" : "_closeInput();",
    "right" : "_closeInput();",
    "info" : "ExpressionStatement[6295-6309]:ExpressionStatement[6295-6309]"
  }, {
    "left" : "if (count == 0)",
    "right" : "if (count == 0)",
    "info" : "IfStatement[6374-6538]:IfStatement[6374-6538]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6390-6538]:Block[6390-6538]"
  }, {
    "left" : "throw new IOException(\"InputStream.read() returned 0 characters when trying to read \"+_inputBuffer.length+\" bytes\");",
    "right" : "throw new IOException(\"InputStream.read() returned 0 characters when trying to read \"+_inputBuffer.length+\" bytes\");",
    "info" : "ThrowStatement[6408-6524]:ThrowStatement[6408-6524]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[6557-6570]:ReturnStatement[6557-6570]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[6747-6756]:Modifier[6747-6756]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[6757-6762]:Modifier[6757-6762]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[6763-6770]:PrimitiveType[6763-6770]"
  }, {
    "left" : "_loadToHaveAtLeast",
    "right" : "_loadToHaveAtLeast",
    "info" : "SimpleName[6771-6789]:SimpleName[6771-6789]"
  }, {
    "left" : "int minAvailable",
    "right" : "int minAvailable",
    "info" : "SingleVariableDeclaration[6790-6806]:SingleVariableDeclaration[6790-6806]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[6815-6826]:SimpleType[6815-6826]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6831-8210]:Block[6831-8210]"
  }, {
    "left" : "if (_inputStream == null)",
    "right" : "if (_inputStream == null)",
    "info" : "IfStatement[6936-6999]:IfStatement[6936-6999]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6962-6999]:Block[6962-6999]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[6976-6989]:ReturnStatement[6976-6989]"
  }, {
    "left" : "int amount = _inputEnd - _inputPtr;",
    "right" : "int amount = _inputEnd - _inputPtr;",
    "info" : "VariableDeclarationStatement[7057-7092]:VariableDeclarationStatement[7057-7092]"
  }, {
    "left" : "if (amount > 0 && _inputPtr > 0)",
    "right" : "if (amount > 0 && _inputPtr > 0)",
    "info" : "IfStatement[7101-7606]:IfStatement[7101-7606]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7134-7562]:Block[7134-7562]"
  }, {
    "left" : "final int ptr = _inputPtr;",
    "right" : "final int ptr = _inputPtr;",
    "info" : "VariableDeclarationStatement[7148-7174]:VariableDeclarationStatement[7148-7174]"
  }, {
    "left" : "_currInputProcessed += ptr;",
    "right" : "_currInputProcessed += ptr;",
    "info" : "ExpressionStatement[7188-7215]:ExpressionStatement[7188-7215]"
  }, {
    "left" : "_currInputRowStart -= ptr;",
    "right" : "_currInputRowStart -= ptr;",
    "info" : "ExpressionStatement[7228-7254]:ExpressionStatement[7228-7254]"
  }, {
    "left" : "_nameStartOffset -= ptr;",
    "right" : "_nameStartOffset -= ptr;",
    "info" : "ExpressionStatement[7421-7445]:ExpressionStatement[7421-7445]"
  }, {
    "left" : "System.arraycopy(_inputBuffer, ptr, _inputBuffer, 0, amount);",
    "right" : "System.arraycopy(_inputBuffer, ptr, _inputBuffer, 0, amount);",
    "info" : "ExpressionStatement[7459-7520]:ExpressionStatement[7459-7520]"
  }, {
    "left" : "_inputEnd = amount;",
    "right" : "_inputEnd = amount;",
    "info" : "ExpressionStatement[7533-7552]:ExpressionStatement[7533-7552]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7568-7606]:Block[7568-7606]"
  }, {
    "left" : "_inputEnd = 0;",
    "right" : "_inputEnd = 0;",
    "info" : "ExpressionStatement[7582-7596]:ExpressionStatement[7582-7596]"
  }, {
    "left" : "_inputPtr = 0;",
    "right" : "_inputPtr = 0;",
    "info" : "ExpressionStatement[7615-7629]:ExpressionStatement[7615-7629]"
  }, {
    "left" : "while (_inputEnd < minAvailable)",
    "right" : "while (_inputEnd < minAvailable)",
    "info" : "WhileStatement[7638-8183]:WhileStatement[7638-8183]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7671-8183]:Block[7671-8183]"
  }, {
    "left" : "int count = _inputStream.read(_inputBuffer, _inputEnd, _inputBuffer.length - _inputEnd);",
    "right" : "int count = _inputStream.read(_inputBuffer, _inputEnd, _inputBuffer.length - _inputEnd);",
    "info" : "VariableDeclarationStatement[7685-7773]:VariableDeclarationStatement[7685-7773]"
  }, {
    "left" : "if (count < 1)",
    "right" : "if (count < 1)",
    "info" : "IfStatement[7786-8141]:IfStatement[7786-8141]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7801-8141]:Block[7801-8141]"
  }, {
    "left" : "_closeInput();",
    "right" : "_closeInput();",
    "info" : "ExpressionStatement[7851-7865]:ExpressionStatement[7851-7865]"
  }, {
    "left" : "if (count == 0)",
    "right" : "if (count == 0)",
    "info" : "IfStatement[7938-8097]:IfStatement[7938-8097]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7954-8097]:Block[7954-8097]"
  }, {
    "left" : "throw new IOException(\"InputStream.read() returned 0 characters when trying to read \"+amount+\" bytes\");",
    "right" : "throw new IOException(\"InputStream.read() returned 0 characters when trying to read \"+amount+\" bytes\");",
    "info" : "ThrowStatement[7976-8079]:ThrowStatement[7976-8079]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[8114-8127]:ReturnStatement[8114-8127]"
  }, {
    "left" : "_inputEnd += count;",
    "right" : "_inputEnd += count;",
    "info" : "ExpressionStatement[8154-8173]:ExpressionStatement[8154-8173]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[8192-8204]:ReturnStatement[8192-8204]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[8220-8229]:MarkerAnnotation[8220-8229]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[8234-8243]:Modifier[8234-8243]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[8244-8248]:PrimitiveType[8244-8248]"
  }, {
    "left" : "_closeInput",
    "right" : "_closeInput",
    "info" : "SimpleName[8249-8260]:SimpleName[8249-8260]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[8270-8281]:SimpleType[8270-8281]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8286-8717]:Block[8286-8717]"
  }, {
    "left" : "if (_inputStream != null)",
    "right" : "if (_inputStream != null)",
    "info" : "IfStatement[8499-8711]:IfStatement[8499-8711]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8525-8711]:Block[8525-8711]"
  }, {
    "left" : "if (_ioContext.isResourceManaged() || isEnabled(Feature.AUTO_CLOSE_SOURCE))",
    "right" : "if (_ioContext.isResourceManaged() || isEnabled(Feature.AUTO_CLOSE_SOURCE))",
    "info" : "IfStatement[8539-8668]:IfStatement[8539-8668]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8615-8668]:Block[8615-8668]"
  }, {
    "left" : "_inputStream.close();",
    "right" : "_inputStream.close();",
    "info" : "ExpressionStatement[8633-8654]:ExpressionStatement[8633-8654]"
  }, {
    "left" : "_inputStream = null;",
    "right" : "_inputStream = null;",
    "info" : "ExpressionStatement[8681-8701]:ExpressionStatement[8681-8701]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[8975-8984]:MarkerAnnotation[8975-8984]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[8989-8998]:Modifier[8989-8998]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[8999-9003]:PrimitiveType[8999-9003]"
  }, {
    "left" : "_releaseBuffers",
    "right" : "_releaseBuffers",
    "info" : "SimpleName[9004-9019]:SimpleName[9004-9019]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[9029-9040]:SimpleType[9029-9040]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9045-9638]:Block[9045-9638]"
  }, {
    "left" : "super._releaseBuffers();",
    "right" : "super._releaseBuffers();",
    "info" : "ExpressionStatement[9055-9079]:ExpressionStatement[9055-9079]"
  }, {
    "left" : "_symbols.release();",
    "right" : "_symbols.release();",
    "info" : "ExpressionStatement[9128-9147]:ExpressionStatement[9128-9147]"
  }, {
    "left" : "if (_bufferRecyclable)",
    "right" : "if (_bufferRecyclable)",
    "info" : "IfStatement[9156-9632]:IfStatement[9156-9632]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9179-9632]:Block[9179-9632]"
  }, {
    "left" : "byte[] buf = _inputBuffer;",
    "right" : "byte[] buf = _inputBuffer;",
    "info" : "VariableDeclarationStatement[9193-9219]:VariableDeclarationStatement[9193-9219]"
  }, {
    "left" : "if (buf != null)",
    "right" : "if (buf != null)",
    "info" : "IfStatement[9232-9622]:IfStatement[9232-9622]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9249-9622]:Block[9249-9622]"
  }, {
    "left" : "_inputBuffer = ByteArrayBuilder.NO_BYTES;",
    "right" : "_inputBuffer = ByteArrayBuilder.NO_BYTES;",
    "info" : "ExpressionStatement[9514-9555]:ExpressionStatement[9514-9555]"
  }, {
    "left" : "_ioContext.releaseReadIOBuffer(buf);",
    "right" : "_ioContext.releaseReadIOBuffer(buf);",
    "info" : "ExpressionStatement[9572-9608]:ExpressionStatement[9572-9608]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[9819-9828]:MarkerAnnotation[9819-9828]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[9833-9839]:Modifier[9833-9839]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[9840-9846]:SimpleType[9840-9846]"
  }, {
    "left" : "getText",
    "right" : "getText",
    "info" : "SimpleName[9847-9854]:SimpleName[9847-9854]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[9864-9875]:SimpleType[9864-9875]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9880-10213]:Block[9880-10213]"
  }, {
    "left" : "if (_currToken == JsonToken.VALUE_STRING)",
    "right" : "if (_currToken == JsonToken.VALUE_STRING)",
    "info" : "IfStatement[9890-10169]:IfStatement[9890-10169]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9932-10169]:Block[9932-10169]"
  }, {
    "left" : "if (_tokenIncomplete)",
    "right" : "if (_tokenIncomplete)",
    "info" : "IfStatement[9946-10108]:IfStatement[9946-10108]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9968-10108]:Block[9968-10108]"
  }, {
    "left" : "_tokenIncomplete = false;",
    "right" : "_tokenIncomplete = false;",
    "info" : "ExpressionStatement[9986-10011]:ExpressionStatement[9986-10011]"
  }, {
    "left" : "return _finishAndReturnString();",
    "right" : "return _finishAndReturnString();",
    "info" : "ReturnStatement[10028-10060]:ReturnStatement[10028-10060]"
  }, {
    "left" : "return _textBuffer.contentsAsString();",
    "right" : "return _textBuffer.contentsAsString();",
    "info" : "ReturnStatement[10121-10159]:ReturnStatement[10121-10159]"
  }, {
    "left" : "return _getText2(_currToken);",
    "right" : "return _getText2(_currToken);",
    "info" : "ReturnStatement[10178-10207]:ReturnStatement[10178-10207]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[10309-10318]:MarkerAnnotation[10309-10318]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[10323-10329]:Modifier[10323-10329]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[10330-10336]:SimpleType[10330-10336]"
  }, {
    "left" : "getValueAsString",
    "right" : "getValueAsString",
    "info" : "SimpleName[10337-10353]:SimpleName[10337-10353]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[10363-10374]:SimpleType[10363-10374]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10379-10816]:Block[10379-10816]"
  }, {
    "left" : "if (_currToken == JsonToken.VALUE_STRING)",
    "right" : "if (_currToken == JsonToken.VALUE_STRING)",
    "info" : "IfStatement[10389-10668]:IfStatement[10389-10668]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10431-10668]:Block[10431-10668]"
  }, {
    "left" : "if (_tokenIncomplete)",
    "right" : "if (_tokenIncomplete)",
    "info" : "IfStatement[10445-10607]:IfStatement[10445-10607]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10467-10607]:Block[10467-10607]"
  }, {
    "left" : "_tokenIncomplete = false;",
    "right" : "_tokenIncomplete = false;",
    "info" : "ExpressionStatement[10485-10510]:ExpressionStatement[10485-10510]"
  }, {
    "left" : "return _finishAndReturnString();",
    "right" : "return _finishAndReturnString();",
    "info" : "ReturnStatement[10527-10559]:ReturnStatement[10527-10559]"
  }, {
    "left" : "return _textBuffer.contentsAsString();",
    "right" : "return _textBuffer.contentsAsString();",
    "info" : "ReturnStatement[10620-10658]:ReturnStatement[10620-10658]"
  }, {
    "left" : "if (_currToken == JsonToken.FIELD_NAME)",
    "right" : "if (_currToken == JsonToken.FIELD_NAME)",
    "info" : "IfStatement[10677-10765]:IfStatement[10677-10765]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10717-10765]:Block[10717-10765]"
  }, {
    "left" : "return getCurrentName();",
    "right" : "return getCurrentName();",
    "info" : "ReturnStatement[10731-10755]:ReturnStatement[10731-10755]"
  }, {
    "left" : "return super.getValueAsString(null);",
    "right" : "return super.getValueAsString(null);",
    "info" : "ReturnStatement[10774-10810]:ReturnStatement[10774-10810]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[10844-10853]:MarkerAnnotation[10844-10853]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[10858-10864]:Modifier[10858-10864]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[10865-10871]:SimpleType[10865-10871]"
  }, {
    "left" : "getValueAsString",
    "right" : "getValueAsString",
    "info" : "SimpleName[10872-10888]:SimpleName[10872-10888]"
  }, {
    "left" : "String defValue",
    "right" : "String defValue",
    "info" : "SingleVariableDeclaration[10889-10904]:SingleVariableDeclaration[10889-10904]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[10913-10924]:SimpleType[10913-10924]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10929-11370]:Block[10929-11370]"
  }, {
    "left" : "if (_currToken == JsonToken.VALUE_STRING)",
    "right" : "if (_currToken == JsonToken.VALUE_STRING)",
    "info" : "IfStatement[10939-11218]:IfStatement[10939-11218]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10981-11218]:Block[10981-11218]"
  }, {
    "left" : "if (_tokenIncomplete)",
    "right" : "if (_tokenIncomplete)",
    "info" : "IfStatement[10995-11157]:IfStatement[10995-11157]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11017-11157]:Block[11017-11157]"
  }, {
    "left" : "_tokenIncomplete = false;",
    "right" : "_tokenIncomplete = false;",
    "info" : "ExpressionStatement[11035-11060]:ExpressionStatement[11035-11060]"
  }, {
    "left" : "return _finishAndReturnString();",
    "right" : "return _finishAndReturnString();",
    "info" : "ReturnStatement[11077-11109]:ReturnStatement[11077-11109]"
  }, {
    "left" : "return _textBuffer.contentsAsString();",
    "right" : "return _textBuffer.contentsAsString();",
    "info" : "ReturnStatement[11170-11208]:ReturnStatement[11170-11208]"
  }, {
    "left" : "if (_currToken == JsonToken.FIELD_NAME)",
    "right" : "if (_currToken == JsonToken.FIELD_NAME)",
    "info" : "IfStatement[11227-11315]:IfStatement[11227-11315]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11267-11315]:Block[11267-11315]"
  }, {
    "left" : "return getCurrentName();",
    "right" : "return getCurrentName();",
    "info" : "ReturnStatement[11281-11305]:ReturnStatement[11281-11305]"
  }, {
    "left" : "return super.getValueAsString(defValue);",
    "right" : "return super.getValueAsString(defValue);",
    "info" : "ReturnStatement[11324-11364]:ReturnStatement[11324-11364]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[11393-11402]:MarkerAnnotation[11393-11402]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[11407-11413]:Modifier[11407-11413]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[11414-11417]:PrimitiveType[11414-11417]"
  }, {
    "left" : "getValueAsInt",
    "right" : "getValueAsInt",
    "info" : "SimpleName[11418-11431]:SimpleName[11418-11431]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[11441-11452]:SimpleType[11441-11452]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11457-11998]:Block[11457-11998]"
  }, {
    "left" : "JsonToken t = _currToken;",
    "right" : "JsonToken t = _currToken;",
    "info" : "VariableDeclarationStatement[11467-11492]:VariableDeclarationStatement[11467-11492]"
  }, {
    "left" : "if ((t == JsonToken.VALUE_NUMBER_INT) || (t == JsonToken.VALUE_NUMBER_FLOAT))",
    "right" : "if ((t == JsonToken.VALUE_NUMBER_INT) || (t == JsonToken.VALUE_NUMBER_FLOAT))",
    "info" : "IfStatement[11501-11953]:IfStatement[11501-11953]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11579-11953]:Block[11579-11953]"
  }, {
    "left" : "if ((_numTypesValid & NR_INT) == 0)",
    "right" : "if ((_numTypesValid & NR_INT) == 0)",
    "info" : "IfStatement[11632-11912]:IfStatement[11632-11912]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11668-11912]:Block[11668-11912]"
  }, {
    "left" : "if (_numTypesValid == NR_UNKNOWN)",
    "right" : "if (_numTypesValid == NR_UNKNOWN)",
    "info" : "IfStatement[11686-11784]:IfStatement[11686-11784]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11720-11784]:Block[11720-11784]"
  }, {
    "left" : "return _parseIntValue();",
    "right" : "return _parseIntValue();",
    "info" : "ReturnStatement[11742-11766]:ReturnStatement[11742-11766]"
  }, {
    "left" : "if ((_numTypesValid & NR_INT) == 0)",
    "right" : "if ((_numTypesValid & NR_INT) == 0)",
    "info" : "IfStatement[11801-11898]:IfStatement[11801-11898]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11837-11898]:Block[11837-11898]"
  }, {
    "left" : "convertNumberToInt();",
    "right" : "convertNumberToInt();",
    "info" : "ExpressionStatement[11859-11880]:ExpressionStatement[11859-11880]"
  }, {
    "left" : "return _numberInt;",
    "right" : "return _numberInt;",
    "info" : "ReturnStatement[11925-11943]:ReturnStatement[11925-11943]"
  }, {
    "left" : "return super.getValueAsInt(0);",
    "right" : "return super.getValueAsInt(0);",
    "info" : "ReturnStatement[11962-11992]:ReturnStatement[11962-11992]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[12021-12030]:MarkerAnnotation[12021-12030]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[12035-12041]:Modifier[12035-12041]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[12042-12045]:PrimitiveType[12042-12045]"
  }, {
    "left" : "getValueAsInt",
    "right" : "getValueAsInt",
    "info" : "SimpleName[12046-12059]:SimpleName[12046-12059]"
  }, {
    "left" : "int defValue",
    "right" : "int defValue",
    "info" : "SingleVariableDeclaration[12060-12072]:SingleVariableDeclaration[12060-12072]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[12081-12092]:SimpleType[12081-12092]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12097-12645]:Block[12097-12645]"
  }, {
    "left" : "JsonToken t = _currToken;",
    "right" : "JsonToken t = _currToken;",
    "info" : "VariableDeclarationStatement[12107-12132]:VariableDeclarationStatement[12107-12132]"
  }, {
    "left" : "if ((t == JsonToken.VALUE_NUMBER_INT) || (t == JsonToken.VALUE_NUMBER_FLOAT))",
    "right" : "if ((t == JsonToken.VALUE_NUMBER_INT) || (t == JsonToken.VALUE_NUMBER_FLOAT))",
    "info" : "IfStatement[12141-12593]:IfStatement[12141-12593]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12219-12593]:Block[12219-12593]"
  }, {
    "left" : "if ((_numTypesValid & NR_INT) == 0)",
    "right" : "if ((_numTypesValid & NR_INT) == 0)",
    "info" : "IfStatement[12272-12552]:IfStatement[12272-12552]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12308-12552]:Block[12308-12552]"
  }, {
    "left" : "if (_numTypesValid == NR_UNKNOWN)",
    "right" : "if (_numTypesValid == NR_UNKNOWN)",
    "info" : "IfStatement[12326-12424]:IfStatement[12326-12424]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12360-12424]:Block[12360-12424]"
  }, {
    "left" : "return _parseIntValue();",
    "right" : "return _parseIntValue();",
    "info" : "ReturnStatement[12382-12406]:ReturnStatement[12382-12406]"
  }, {
    "left" : "if ((_numTypesValid & NR_INT) == 0)",
    "right" : "if ((_numTypesValid & NR_INT) == 0)",
    "info" : "IfStatement[12441-12538]:IfStatement[12441-12538]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12477-12538]:Block[12477-12538]"
  }, {
    "left" : "convertNumberToInt();",
    "right" : "convertNumberToInt();",
    "info" : "ExpressionStatement[12499-12520]:ExpressionStatement[12499-12520]"
  }, {
    "left" : "return _numberInt;",
    "right" : "return _numberInt;",
    "info" : "ReturnStatement[12565-12583]:ReturnStatement[12565-12583]"
  }, {
    "left" : "return super.getValueAsInt(defValue);",
    "right" : "return super.getValueAsInt(defValue);",
    "info" : "ReturnStatement[12602-12639]:ReturnStatement[12602-12639]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[12655-12664]:Modifier[12655-12664]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[12665-12670]:Modifier[12665-12670]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[12671-12677]:SimpleType[12671-12677]"
  }, {
    "left" : "_getText2",
    "right" : "_getText2",
    "info" : "SimpleName[12678-12687]:SimpleName[12678-12687]"
  }, {
    "left" : "JsonToken t",
    "right" : "JsonToken t",
    "info" : "SingleVariableDeclaration[12688-12699]:SingleVariableDeclaration[12688-12699]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12705-13098]:Block[12705-13098]"
  }, {
    "left" : "if (t == null)",
    "right" : "if (t == null)",
    "info" : "IfStatement[12715-12766]:IfStatement[12715-12766]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12730-12766]:Block[12730-12766]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[12744-12756]:ReturnStatement[12744-12756]"
  }, {
    "left" : "switch (t.id()) {\n        case ID_FIELD_NAME:\n            return _parsingContext.getCurrentName();\n\n        case ID_STRING:\n            // fall through\n        case ID_NUMBER_INT:\n        case ID_NUMBER_FLOAT:\n            return _textBuffer.contentsAsString();\n        default:\n        \treturn t.asString();\n        }",
    "right" : "switch (t.id()) {\n        case ID_FIELD_NAME:\n            return _parsingContext.getCurrentName();\n\n        case ID_STRING:\n            // fall through\n        case ID_NUMBER_INT:\n        case ID_NUMBER_FLOAT:\n            return _textBuffer.contentsAsString();\n        default:\n        \treturn t.asString();\n        }",
    "info" : "SwitchStatement[12775-13092]:SwitchStatement[12775-13092]"
  }, {
    "left" : "case ID_FIELD_NAME:",
    "right" : "case ID_FIELD_NAME:",
    "info" : "SwitchCase[12801-12820]:SwitchCase[12801-12820]"
  }, {
    "left" : "return _parsingContext.getCurrentName();",
    "right" : "return _parsingContext.getCurrentName();",
    "info" : "ReturnStatement[12833-12873]:ReturnStatement[12833-12873]"
  }, {
    "left" : "case ID_STRING:",
    "right" : "case ID_STRING:",
    "info" : "SwitchCase[12883-12898]:SwitchCase[12883-12898]"
  }, {
    "left" : "case ID_NUMBER_INT:",
    "right" : "case ID_NUMBER_INT:",
    "info" : "SwitchCase[12935-12954]:SwitchCase[12935-12954]"
  }, {
    "left" : "case ID_NUMBER_FLOAT:",
    "right" : "case ID_NUMBER_FLOAT:",
    "info" : "SwitchCase[12963-12984]:SwitchCase[12963-12984]"
  }, {
    "left" : "return _textBuffer.contentsAsString();",
    "right" : "return _textBuffer.contentsAsString();",
    "info" : "ReturnStatement[12997-13035]:ReturnStatement[12997-13035]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[13044-13052]:SwitchCase[13044-13052]"
  }, {
    "left" : "return t.asString();",
    "right" : "return t.asString();",
    "info" : "ReturnStatement[13062-13082]:ReturnStatement[13062-13082]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[13104-13113]:MarkerAnnotation[13104-13113]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[13118-13124]:Modifier[13118-13124]"
  }, {
    "left" : "char[]",
    "right" : "char[]",
    "info" : "ArrayType[13125-13131]:ArrayType[13125-13131]"
  }, {
    "left" : "getTextCharacters",
    "right" : "getTextCharacters",
    "info" : "SimpleName[13132-13149]:SimpleName[13132-13149]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[13159-13170]:SimpleType[13159-13170]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13175-14431]:Block[13175-14431]"
  }, {
    "left" : "if (_currToken != null)",
    "right" : "if (_currToken != null)",
    "info" : "IfStatement[13185-14404]:IfStatement[13185-14404]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13209-14404]:Block[13209-14404]"
  }, {
    "left" : "switch (_currToken.id()) {\n                \n            case ID_FIELD_NAME:\n                if (!_nameCopied) {\n                    String name = _parsingContext.getCurrentName();\n                    int nameLen = name.length();\n                    if (_nameCopyBuffer == null) {\n                        _nameCopyBuffer = _ioContext.allocNameCopyBuffer(nameLen);\n                    } else if (_nameCopyBuffer.length < nameLen) {\n                        _nameCopyBuffer = new char[nameLen];\n                    }\n                    name.getChars(0, nameLen, _nameCopyBuffer, 0);\n                    _nameCopied = true;\n                }\n                return _nameCopyBuffer;\n    \n            case ID_STRING:\n                if (_tokenIncomplete) {\n                    _tokenIncomplete = false;\n                    _finishString(); // only strings can be incomplete\n                }\n                // fall through\n            case ID_NUMBER_INT:\n            case ID_NUMBER_FLOAT:\n                return _textBuffer.getTextBuffer();\n                \n            default:\n                return _currToken.asCharArray();\n            }",
    "right" : "switch (_currToken.id()) {\n                \n            case ID_FIELD_NAME:\n                if (!_nameCopied) {\n                    String name = _parsingContext.getCurrentName();\n                    int nameLen = name.length();\n                    if (_nameCopyBuffer == null) {\n                        _nameCopyBuffer = _ioContext.allocNameCopyBuffer(nameLen);\n                    } else if (_nameCopyBuffer.length < nameLen) {\n                        _nameCopyBuffer = new char[nameLen];\n                    }\n                    name.getChars(0, nameLen, _nameCopyBuffer, 0);\n                    _nameCopied = true;\n                }\n                return _nameCopyBuffer;\n    \n            case ID_STRING:\n                if (_tokenIncomplete) {\n                    _tokenIncomplete = false;\n                    _finishString(); // only strings can be incomplete\n                }\n                // fall through\n            case ID_NUMBER_INT:\n            case ID_NUMBER_FLOAT:\n                return _textBuffer.getTextBuffer();\n                \n            default:\n                return _currToken.asCharArray();\n            }",
    "info" : "SwitchStatement[13258-14394]:SwitchStatement[13258-14394]"
  }, {
    "left" : "case ID_FIELD_NAME:",
    "right" : "case ID_FIELD_NAME:",
    "info" : "SwitchCase[13314-13333]:SwitchCase[13314-13333]"
  }, {
    "left" : "if (!_nameCopied)",
    "right" : "if (!_nameCopied)",
    "info" : "IfStatement[13350-13895]:IfStatement[13350-13895]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13368-13895]:Block[13368-13895]"
  }, {
    "left" : "String name = _parsingContext.getCurrentName();",
    "right" : "String name = _parsingContext.getCurrentName();",
    "info" : "VariableDeclarationStatement[13390-13437]:VariableDeclarationStatement[13390-13437]"
  }, {
    "left" : "int nameLen = name.length();",
    "right" : "int nameLen = name.length();",
    "info" : "VariableDeclarationStatement[13458-13486]:VariableDeclarationStatement[13458-13486]"
  }, {
    "left" : "if (_nameCopyBuffer == null)",
    "right" : "if (_nameCopyBuffer == null)",
    "info" : "IfStatement[13507-13770]:IfStatement[13507-13770]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13536-13642]:Block[13536-13642]"
  }, {
    "left" : "_nameCopyBuffer = _ioContext.allocNameCopyBuffer(nameLen);",
    "right" : "_nameCopyBuffer = _ioContext.allocNameCopyBuffer(nameLen);",
    "info" : "ExpressionStatement[13562-13620]:ExpressionStatement[13562-13620]"
  }, {
    "left" : "if (_nameCopyBuffer.length < nameLen)",
    "right" : "if (_nameCopyBuffer.length < nameLen)",
    "info" : "IfStatement[13648-13770]:IfStatement[13648-13770]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13686-13770]:Block[13686-13770]"
  }, {
    "left" : "_nameCopyBuffer = new char[nameLen];",
    "right" : "_nameCopyBuffer = new char[nameLen];",
    "info" : "ExpressionStatement[13712-13748]:ExpressionStatement[13712-13748]"
  }, {
    "left" : "name.getChars(0, nameLen, _nameCopyBuffer, 0);",
    "right" : "name.getChars(0, nameLen, _nameCopyBuffer, 0);",
    "info" : "ExpressionStatement[13791-13837]:ExpressionStatement[13791-13837]"
  }, {
    "left" : "_nameCopied = true;",
    "right" : "_nameCopied = true;",
    "info" : "ExpressionStatement[13858-13877]:ExpressionStatement[13858-13877]"
  }, {
    "left" : "return _nameCopyBuffer;",
    "right" : "return _nameCopyBuffer;",
    "info" : "ReturnStatement[13912-13935]:ReturnStatement[13912-13935]"
  }, {
    "left" : "case ID_STRING:",
    "right" : "case ID_STRING:",
    "info" : "SwitchCase[13953-13968]:SwitchCase[13953-13968]"
  }, {
    "left" : "if (_tokenIncomplete)",
    "right" : "if (_tokenIncomplete)",
    "info" : "IfStatement[13985-14143]:IfStatement[13985-14143]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14007-14143]:Block[14007-14143]"
  }, {
    "left" : "_tokenIncomplete = false;",
    "right" : "_tokenIncomplete = false;",
    "info" : "ExpressionStatement[14029-14054]:ExpressionStatement[14029-14054]"
  }, {
    "left" : "_finishString();",
    "right" : "_finishString();",
    "info" : "ExpressionStatement[14075-14091]:ExpressionStatement[14075-14091]"
  }, {
    "left" : "case ID_NUMBER_INT:",
    "right" : "case ID_NUMBER_INT:",
    "info" : "SwitchCase[14188-14207]:SwitchCase[14188-14207]"
  }, {
    "left" : "case ID_NUMBER_FLOAT:",
    "right" : "case ID_NUMBER_FLOAT:",
    "info" : "SwitchCase[14220-14241]:SwitchCase[14220-14241]"
  }, {
    "left" : "return _textBuffer.getTextBuffer();",
    "right" : "return _textBuffer.getTextBuffer();",
    "info" : "ReturnStatement[14258-14293]:ReturnStatement[14258-14293]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[14323-14331]:SwitchCase[14323-14331]"
  }, {
    "left" : "return _currToken.asCharArray();",
    "right" : "return _currToken.asCharArray();",
    "info" : "ReturnStatement[14348-14380]:ReturnStatement[14348-14380]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[14413-14425]:ReturnStatement[14413-14425]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[14437-14446]:MarkerAnnotation[14437-14446]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[14451-14457]:Modifier[14451-14457]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[14458-14461]:PrimitiveType[14458-14461]"
  }, {
    "left" : "getTextLength",
    "right" : "getTextLength",
    "info" : "SimpleName[14462-14475]:SimpleName[14462-14475]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[14485-14496]:SimpleType[14485-14496]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14501-15211]:Block[14501-15211]"
  }, {
    "left" : "if (_currToken != null)",
    "right" : "if (_currToken != null)",
    "info" : "IfStatement[14511-15187]:IfStatement[14511-15187]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14535-15187]:Block[14535-15187]"
  }, {
    "left" : "switch (_currToken.id()) {\n                \n            case ID_FIELD_NAME:\n                return _parsingContext.getCurrentName().length();\n            case ID_STRING:\n                if (_tokenIncomplete) {\n                    _tokenIncomplete = false;\n                    _finishString(); // only strings can be incomplete\n                }\n                // fall through\n            case ID_NUMBER_INT:\n            case ID_NUMBER_FLOAT:\n                return _textBuffer.size();\n                \n            default:\n                return _currToken.asCharArray().length;\n            }",
    "right" : "switch (_currToken.id()) {\n                \n            case ID_FIELD_NAME:\n                return _parsingContext.getCurrentName().length();\n            case ID_STRING:\n                if (_tokenIncomplete) {\n                    _tokenIncomplete = false;\n                    _finishString(); // only strings can be incomplete\n                }\n                // fall through\n            case ID_NUMBER_INT:\n            case ID_NUMBER_FLOAT:\n                return _textBuffer.size();\n                \n            default:\n                return _currToken.asCharArray().length;\n            }",
    "info" : "SwitchStatement[14584-15177]:SwitchStatement[14584-15177]"
  }, {
    "left" : "case ID_FIELD_NAME:",
    "right" : "case ID_FIELD_NAME:",
    "info" : "SwitchCase[14640-14659]:SwitchCase[14640-14659]"
  }, {
    "left" : "return _parsingContext.getCurrentName().length();",
    "right" : "return _parsingContext.getCurrentName().length();",
    "info" : "ReturnStatement[14676-14725]:ReturnStatement[14676-14725]"
  }, {
    "left" : "case ID_STRING:",
    "right" : "case ID_STRING:",
    "info" : "SwitchCase[14738-14753]:SwitchCase[14738-14753]"
  }, {
    "left" : "if (_tokenIncomplete)",
    "right" : "if (_tokenIncomplete)",
    "info" : "IfStatement[14770-14928]:IfStatement[14770-14928]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14792-14928]:Block[14792-14928]"
  }, {
    "left" : "_tokenIncomplete = false;",
    "right" : "_tokenIncomplete = false;",
    "info" : "ExpressionStatement[14814-14839]:ExpressionStatement[14814-14839]"
  }, {
    "left" : "_finishString();",
    "right" : "_finishString();",
    "info" : "ExpressionStatement[14860-14876]:ExpressionStatement[14860-14876]"
  }, {
    "left" : "case ID_NUMBER_INT:",
    "right" : "case ID_NUMBER_INT:",
    "info" : "SwitchCase[14973-14992]:SwitchCase[14973-14992]"
  }, {
    "left" : "case ID_NUMBER_FLOAT:",
    "right" : "case ID_NUMBER_FLOAT:",
    "info" : "SwitchCase[15005-15026]:SwitchCase[15005-15026]"
  }, {
    "left" : "return _textBuffer.size();",
    "right" : "return _textBuffer.size();",
    "info" : "ReturnStatement[15043-15069]:ReturnStatement[15043-15069]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[15099-15107]:SwitchCase[15099-15107]"
  }, {
    "left" : "return _currToken.asCharArray().length;",
    "right" : "return _currToken.asCharArray().length;",
    "info" : "ReturnStatement[15124-15163]:ReturnStatement[15124-15163]"
  }, {
    "left" : "return 0;",
    "right" : "return 0;",
    "info" : "ReturnStatement[15196-15205]:ReturnStatement[15196-15205]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[15217-15226]:MarkerAnnotation[15217-15226]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[15231-15237]:Modifier[15231-15237]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[15238-15241]:PrimitiveType[15238-15241]"
  }, {
    "left" : "getTextOffset",
    "right" : "getTextOffset",
    "info" : "SimpleName[15242-15255]:SimpleName[15242-15255]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[15265-15276]:SimpleType[15265-15276]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15281-15902]:Block[15281-15902]"
  }, {
    "left" : "if (_currToken != null)",
    "right" : "if (_currToken != null)",
    "info" : "IfStatement[15358-15878]:IfStatement[15358-15878]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15382-15878]:Block[15382-15878]"
  }, {
    "left" : "switch (_currToken.id()) {\n            case ID_FIELD_NAME:\n                return 0;\n            case ID_STRING:\n                if (_tokenIncomplete) {\n                    _tokenIncomplete = false;\n                    _finishString(); // only strings can be incomplete\n                }\n                // fall through\n            case ID_NUMBER_INT:\n            case ID_NUMBER_FLOAT:\n                return _textBuffer.getTextOffset();\n            default:\n            }",
    "right" : "switch (_currToken.id()) {\n            case ID_FIELD_NAME:\n                return 0;\n            case ID_STRING:\n                if (_tokenIncomplete) {\n                    _tokenIncomplete = false;\n                    _finishString(); // only strings can be incomplete\n                }\n                // fall through\n            case ID_NUMBER_INT:\n            case ID_NUMBER_FLOAT:\n                return _textBuffer.getTextOffset();\n            default:\n            }",
    "info" : "SwitchStatement[15396-15868]:SwitchStatement[15396-15868]"
  }, {
    "left" : "case ID_FIELD_NAME:",
    "right" : "case ID_FIELD_NAME:",
    "info" : "SwitchCase[15435-15454]:SwitchCase[15435-15454]"
  }, {
    "left" : "return 0;",
    "right" : "return 0;",
    "info" : "ReturnStatement[15471-15480]:ReturnStatement[15471-15480]"
  }, {
    "left" : "case ID_STRING:",
    "right" : "case ID_STRING:",
    "info" : "SwitchCase[15493-15508]:SwitchCase[15493-15508]"
  }, {
    "left" : "if (_tokenIncomplete)",
    "right" : "if (_tokenIncomplete)",
    "info" : "IfStatement[15525-15683]:IfStatement[15525-15683]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15547-15683]:Block[15547-15683]"
  }, {
    "left" : "_tokenIncomplete = false;",
    "right" : "_tokenIncomplete = false;",
    "info" : "ExpressionStatement[15569-15594]:ExpressionStatement[15569-15594]"
  }, {
    "left" : "_finishString();",
    "right" : "_finishString();",
    "info" : "ExpressionStatement[15615-15631]:ExpressionStatement[15615-15631]"
  }, {
    "left" : "case ID_NUMBER_INT:",
    "right" : "case ID_NUMBER_INT:",
    "info" : "SwitchCase[15728-15747]:SwitchCase[15728-15747]"
  }, {
    "left" : "case ID_NUMBER_FLOAT:",
    "right" : "case ID_NUMBER_FLOAT:",
    "info" : "SwitchCase[15760-15781]:SwitchCase[15760-15781]"
  }, {
    "left" : "return _textBuffer.getTextOffset();",
    "right" : "return _textBuffer.getTextOffset();",
    "info" : "ReturnStatement[15798-15833]:ReturnStatement[15798-15833]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[15846-15854]:SwitchCase[15846-15854]"
  }, {
    "left" : "return 0;",
    "right" : "return 0;",
    "info" : "ReturnStatement[15887-15896]:ReturnStatement[15887-15896]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[15912-15921]:MarkerAnnotation[15912-15921]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[15926-15932]:Modifier[15926-15932]"
  }, {
    "left" : "byte[]",
    "right" : "byte[]",
    "info" : "ArrayType[15933-15939]:ArrayType[15933-15939]"
  }, {
    "left" : "getBinaryValue",
    "right" : "getBinaryValue",
    "info" : "SimpleName[15940-15954]:SimpleName[15940-15954]"
  }, {
    "left" : "Base64Variant b64variant",
    "right" : "Base64Variant b64variant",
    "info" : "SingleVariableDeclaration[15955-15979]:SingleVariableDeclaration[15955-15979]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[15988-15999]:SimpleType[15988-15999]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16004-17244]:Block[16004-17244]"
  }, {
    "left" : "if (_currToken != JsonToken.VALUE_STRING &&\n                (_currToken != JsonToken.VALUE_EMBEDDED_OBJECT || _binaryValue == null))",
    "right" : "if (_currToken != JsonToken.VALUE_STRING &&\n                (_currToken != JsonToken.VALUE_EMBEDDED_OBJECT || _binaryValue == null))",
    "info" : "IfStatement[16014-16286]:IfStatement[16014-16286]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16147-16286]:Block[16147-16286]"
  }, {
    "left" : "_reportError(\"Current token (\"+_currToken+\") not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary\");",
    "right" : "_reportError(\"Current token (\"+_currToken+\") not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary\");",
    "info" : "ExpressionStatement[16161-16276]:ExpressionStatement[16161-16276]"
  }, {
    "left" : "if (_tokenIncomplete)",
    "right" : "if (_tokenIncomplete)",
    "info" : "IfStatement[16401-17209]:IfStatement[16401-17209]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16423-16870]:Block[16423-16870]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[16437-16685]:TryStatement[16437-16685]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16441-16514]:Block[16441-16514]"
  }, {
    "left" : "_binaryValue = _decodeBase64(b64variant);",
    "right" : "_binaryValue = _decodeBase64(b64variant);",
    "info" : "ExpressionStatement[16459-16500]:ExpressionStatement[16459-16500]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16552-16685]:Block[16552-16685]"
  }, {
    "left" : "throw _constructError(\"Failed to decode VALUE_STRING as base64 (\"+b64variant+\"): \"+iae.getMessage());",
    "right" : "throw _constructError(\"Failed to decode VALUE_STRING as base64 (\"+b64variant+\"): \"+iae.getMessage());",
    "info" : "ThrowStatement[16570-16671]:ThrowStatement[16570-16671]"
  }, {
    "left" : "_tokenIncomplete = false;",
    "right" : "_tokenIncomplete = false;",
    "info" : "ExpressionStatement[16835-16860]:ExpressionStatement[16835-16860]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16876-17209]:Block[16876-17209]"
  }, {
    "left" : "if (_binaryValue == null)",
    "right" : "if (_binaryValue == null)",
    "info" : "IfStatement[16928-17199]:IfStatement[16928-17199]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16954-17199]:Block[16954-17199]"
  }, {
    "left" : "@SuppressWarnings(\"resource\")\n                ByteArrayBuilder builder = _getByteArrayBuilder();",
    "right" : "@SuppressWarnings(\"resource\")\n                ByteArrayBuilder builder = _getByteArrayBuilder();",
    "info" : "VariableDeclarationStatement[16972-17068]:VariableDeclarationStatement[16972-17068]"
  }, {
    "left" : "_decodeBase64(getText(), builder, b64variant);",
    "right" : "_decodeBase64(getText(), builder, b64variant);",
    "info" : "ExpressionStatement[17085-17131]:ExpressionStatement[17085-17131]"
  }, {
    "left" : "_binaryValue = builder.toByteArray();",
    "right" : "_binaryValue = builder.toByteArray();",
    "info" : "ExpressionStatement[17148-17185]:ExpressionStatement[17148-17185]"
  }, {
    "left" : "return _binaryValue;",
    "right" : "return _binaryValue;",
    "info" : "ReturnStatement[17218-17238]:ReturnStatement[17218-17238]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[17250-17259]:MarkerAnnotation[17250-17259]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[17264-17270]:Modifier[17264-17270]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[17271-17274]:PrimitiveType[17271-17274]"
  }, {
    "left" : "readBinaryValue",
    "right" : "readBinaryValue",
    "info" : "SimpleName[17275-17290]:SimpleName[17275-17290]"
  }, {
    "left" : "Base64Variant b64variant",
    "right" : "Base64Variant b64variant",
    "info" : "SingleVariableDeclaration[17291-17315]:SingleVariableDeclaration[17291-17315]"
  }, {
    "left" : "OutputStream out",
    "right" : "OutputStream out",
    "info" : "SingleVariableDeclaration[17317-17333]:SingleVariableDeclaration[17317-17333]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[17342-17353]:SimpleType[17342-17353]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17358-17884]:Block[17358-17884]"
  }, {
    "left" : "if (!_tokenIncomplete || _currToken != JsonToken.VALUE_STRING)",
    "right" : "if (!_tokenIncomplete || _currToken != JsonToken.VALUE_STRING)",
    "info" : "IfStatement[17444-17624]:IfStatement[17444-17624]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17507-17624]:Block[17507-17624]"
  }, {
    "left" : "byte[] b = getBinaryValue(b64variant);",
    "right" : "byte[] b = getBinaryValue(b64variant);",
    "info" : "VariableDeclarationStatement[17521-17559]:VariableDeclarationStatement[17521-17559]"
  }, {
    "left" : "out.write(b);",
    "right" : "out.write(b);",
    "info" : "ExpressionStatement[17572-17585]:ExpressionStatement[17572-17585]"
  }, {
    "left" : "return b.length;",
    "right" : "return b.length;",
    "info" : "ReturnStatement[17598-17614]:ReturnStatement[17598-17614]"
  }, {
    "left" : "byte[] buf = _ioContext.allocBase64Buffer();",
    "right" : "byte[] buf = _ioContext.allocBase64Buffer();",
    "info" : "VariableDeclarationStatement[17687-17731]:VariableDeclarationStatement[17687-17731]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[17740-17878]:TryStatement[17740-17878]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17744-17809]:Block[17744-17809]"
  }, {
    "left" : "return _readBinary(b64variant, out, buf);",
    "right" : "return _readBinary(b64variant, out, buf);",
    "info" : "ReturnStatement[17758-17799]:ReturnStatement[17758-17799]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17818-17878]:Block[17818-17878]"
  }, {
    "left" : "_ioContext.releaseBase64Buffer(buf);",
    "right" : "_ioContext.releaseBase64Buffer(buf);",
    "info" : "ExpressionStatement[17832-17868]:ExpressionStatement[17832-17868]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[17890-17899]:Modifier[17890-17899]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[17900-17903]:PrimitiveType[17900-17903]"
  }, {
    "left" : "_readBinary",
    "right" : "_readBinary",
    "info" : "SimpleName[17904-17915]:SimpleName[17904-17915]"
  }, {
    "left" : "Base64Variant b64variant",
    "right" : "Base64Variant b64variant",
    "info" : "SingleVariableDeclaration[17916-17940]:SingleVariableDeclaration[17916-17940]"
  }, {
    "left" : "OutputStream out",
    "right" : "OutputStream out",
    "info" : "SingleVariableDeclaration[17942-17958]:SingleVariableDeclaration[17942-17958]"
  }, {
    "left" : "byte[] buffer",
    "right" : "byte[] buffer",
    "info" : "SingleVariableDeclaration[17990-18003]:SingleVariableDeclaration[17990-18003]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[18012-18023]:SimpleType[18012-18023]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18028-23102]:Block[18028-23102]"
  }, {
    "left" : "int outputPtr = 0;",
    "right" : "int outputPtr = 0;",
    "info" : "VariableDeclarationStatement[18038-18056]:VariableDeclarationStatement[18038-18056]"
  }, {
    "left" : "final int outputEnd = buffer.length - 3;",
    "right" : "final int outputEnd = buffer.length - 3;",
    "info" : "VariableDeclarationStatement[18065-18105]:VariableDeclarationStatement[18065-18105]"
  }, {
    "left" : "int outputCount = 0;",
    "right" : "int outputCount = 0;",
    "info" : "VariableDeclarationStatement[18114-18134]:VariableDeclarationStatement[18114-18134]"
  }, {
    "left" : "while (true)",
    "right" : "while (true)",
    "info" : "WhileStatement[18144-22912]:WhileStatement[18144-22912]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18157-22912]:Block[18157-22912]"
  }, {
    "left" : "int ch;",
    "right" : "int ch;",
    "info" : "VariableDeclarationStatement[18234-18241]:VariableDeclarationStatement[18234-18241]"
  }, {
    "left" : "do{...}",
    "right" : "do{...}",
    "info" : "DoStatement[18254-18464]:DoStatement[18254-18464]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18257-18439]:Block[18257-18439]"
  }, {
    "left" : "if (_inputPtr >= _inputEnd)",
    "right" : "if (_inputPtr >= _inputEnd)",
    "info" : "IfStatement[18275-18364]:IfStatement[18275-18364]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18303-18364]:Block[18303-18364]"
  }, {
    "left" : "loadMoreGuaranteed();",
    "right" : "loadMoreGuaranteed();",
    "info" : "ExpressionStatement[18325-18346]:ExpressionStatement[18325-18346]"
  }, {
    "left" : "ch = (int) _inputBuffer[_inputPtr++] & 0xFF;",
    "right" : "ch = (int) _inputBuffer[_inputPtr++] & 0xFF;",
    "info" : "ExpressionStatement[18381-18425]:ExpressionStatement[18381-18425]"
  }, {
    "left" : "int bits = b64variant.decodeBase64Char(ch);",
    "right" : "int bits = b64variant.decodeBase64Char(ch);",
    "info" : "VariableDeclarationStatement[18477-18520]:VariableDeclarationStatement[18477-18520]"
  }, {
    "left" : "if (bits < 0)",
    "right" : "if (bits < 0)",
    "info" : "IfStatement[18533-18849]:IfStatement[18533-18849]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18547-18849]:Block[18547-18849]"
  }, {
    "left" : "if (ch == INT_QUOTE)",
    "right" : "if (ch == INT_QUOTE)",
    "info" : "IfStatement[18602-18669]:IfStatement[18602-18669]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18623-18669]:Block[18623-18669]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[18645-18651]:BreakStatement[18645-18651]"
  }, {
    "left" : "bits = _decodeBase64Escape(b64variant, ch, 0);",
    "right" : "bits = _decodeBase64Escape(b64variant, ch, 0);",
    "info" : "ExpressionStatement[18686-18732]:ExpressionStatement[18686-18732]"
  }, {
    "left" : "if (bits < 0)",
    "right" : "if (bits < 0)",
    "info" : "IfStatement[18749-18835]:IfStatement[18749-18835]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18763-18835]:Block[18763-18835]"
  }, {
    "left" : "continue;",
    "right" : "continue;",
    "info" : "ContinueStatement[18808-18817]:ContinueStatement[18808-18817]"
  }, {
    "left" : "if (outputPtr > outputEnd)",
    "right" : "if (outputPtr > outputEnd)",
    "info" : "IfStatement[18905-19069]:IfStatement[18905-19069]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18932-19069]:Block[18932-19069]"
  }, {
    "left" : "outputCount += outputPtr;",
    "right" : "outputCount += outputPtr;",
    "info" : "ExpressionStatement[18950-18975]:ExpressionStatement[18950-18975]"
  }, {
    "left" : "out.write(buffer, 0, outputPtr);",
    "right" : "out.write(buffer, 0, outputPtr);",
    "info" : "ExpressionStatement[18992-19024]:ExpressionStatement[18992-19024]"
  }, {
    "left" : "outputPtr = 0;",
    "right" : "outputPtr = 0;",
    "info" : "ExpressionStatement[19041-19055]:ExpressionStatement[19041-19055]"
  }, {
    "left" : "int decodedData = bits;",
    "right" : "int decodedData = bits;",
    "info" : "VariableDeclarationStatement[19083-19106]:VariableDeclarationStatement[19083-19106]"
  }, {
    "left" : "if (_inputPtr >= _inputEnd)",
    "right" : "if (_inputPtr >= _inputEnd)",
    "info" : "IfStatement[19191-19272]:IfStatement[19191-19272]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19219-19272]:Block[19219-19272]"
  }, {
    "left" : "loadMoreGuaranteed();",
    "right" : "loadMoreGuaranteed();",
    "info" : "ExpressionStatement[19237-19258]:ExpressionStatement[19237-19258]"
  }, {
    "left" : "ch = _inputBuffer[_inputPtr++] & 0xFF;",
    "right" : "ch = _inputBuffer[_inputPtr++] & 0xFF;",
    "info" : "ExpressionStatement[19285-19323]:ExpressionStatement[19285-19323]"
  }, {
    "left" : "bits = b64variant.decodeBase64Char(ch);",
    "right" : "bits = b64variant.decodeBase64Char(ch);",
    "info" : "ExpressionStatement[19336-19375]:ExpressionStatement[19336-19375]"
  }, {
    "left" : "if (bits < 0)",
    "right" : "if (bits < 0)",
    "info" : "IfStatement[19388-19480]:IfStatement[19388-19480]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19402-19480]:Block[19402-19480]"
  }, {
    "left" : "bits = _decodeBase64Escape(b64variant, ch, 1);",
    "right" : "bits = _decodeBase64Escape(b64variant, ch, 1);",
    "info" : "ExpressionStatement[19420-19466]:ExpressionStatement[19420-19466]"
  }, {
    "left" : "decodedData = (decodedData << 6) | bits;",
    "right" : "decodedData = (decodedData << 6) | bits;",
    "info" : "ExpressionStatement[19493-19533]:ExpressionStatement[19493-19533]"
  }, {
    "left" : "if (_inputPtr >= _inputEnd)",
    "right" : "if (_inputPtr >= _inputEnd)",
    "info" : "IfStatement[19608-19689]:IfStatement[19608-19689]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19636-19689]:Block[19636-19689]"
  }, {
    "left" : "loadMoreGuaranteed();",
    "right" : "loadMoreGuaranteed();",
    "info" : "ExpressionStatement[19654-19675]:ExpressionStatement[19654-19675]"
  }, {
    "left" : "ch = _inputBuffer[_inputPtr++] & 0xFF;",
    "right" : "ch = _inputBuffer[_inputPtr++] & 0xFF;",
    "info" : "ExpressionStatement[19702-19740]:ExpressionStatement[19702-19740]"
  }, {
    "left" : "bits = b64variant.decodeBase64Char(ch);",
    "right" : "bits = b64variant.decodeBase64Char(ch);",
    "info" : "ExpressionStatement[19753-19792]:ExpressionStatement[19753-19792]"
  }, {
    "left" : "if (bits < 0)",
    "right" : "if (bits < 0)",
    "info" : "IfStatement[19863-21072]:IfStatement[19863-21072]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19877-21072]:Block[19877-21072]"
  }, {
    "left" : "if (bits != Base64Variant.BASE64_VALUE_PADDING)",
    "right" : "if (bits != Base64Variant.BASE64_VALUE_PADDING)",
    "info" : "IfStatement[19895-20340]:IfStatement[19895-20340]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19943-20340]:Block[19943-20340]"
  }, {
    "left" : "if (ch == '\"' && !b64variant.usesPadding())",
    "right" : "if (ch == '\"' && !b64variant.usesPadding())",
    "info" : "IfStatement[20048-20255]:IfStatement[20048-20255]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20092-20255]:Block[20092-20255]"
  }, {
    "left" : "decodedData >>= 4;",
    "right" : "decodedData >>= 4;",
    "info" : "ExpressionStatement[20118-20136]:ExpressionStatement[20118-20136]"
  }, {
    "left" : "buffer[outputPtr++] = (byte) decodedData;",
    "right" : "buffer[outputPtr++] = (byte) decodedData;",
    "info" : "ExpressionStatement[20161-20202]:ExpressionStatement[20161-20202]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[20227-20233]:BreakStatement[20227-20233]"
  }, {
    "left" : "bits = _decodeBase64Escape(b64variant, ch, 2);",
    "right" : "bits = _decodeBase64Escape(b64variant, ch, 2);",
    "info" : "ExpressionStatement[20276-20322]:ExpressionStatement[20276-20322]"
  }, {
    "left" : "if (bits == Base64Variant.BASE64_VALUE_PADDING)",
    "right" : "if (bits == Base64Variant.BASE64_VALUE_PADDING)",
    "info" : "IfStatement[20357-21058]:IfStatement[20357-21058]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20405-21058]:Block[20405-21058]"
  }, {
    "left" : "if (_inputPtr >= _inputEnd)",
    "right" : "if (_inputPtr >= _inputEnd)",
    "info" : "IfStatement[20471-20568]:IfStatement[20471-20568]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20499-20568]:Block[20499-20568]"
  }, {
    "left" : "loadMoreGuaranteed();",
    "right" : "loadMoreGuaranteed();",
    "info" : "ExpressionStatement[20525-20546]:ExpressionStatement[20525-20546]"
  }, {
    "left" : "ch = _inputBuffer[_inputPtr++] & 0xFF;",
    "right" : "ch = _inputBuffer[_inputPtr++] & 0xFF;",
    "info" : "ExpressionStatement[20589-20627]:ExpressionStatement[20589-20627]"
  }, {
    "left" : "if (!b64variant.usesPaddingChar(ch))",
    "right" : "if (!b64variant.usesPaddingChar(ch))",
    "info" : "IfStatement[20648-20846]:IfStatement[20648-20846]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20685-20846]:Block[20685-20846]"
  }, {
    "left" : "throw reportInvalidBase64Char(b64variant, ch, 3, \"expected padding character '\"+b64variant.getPaddingChar()+\"'\");",
    "right" : "throw reportInvalidBase64Char(b64variant, ch, 3, \"expected padding character '\"+b64variant.getPaddingChar()+\"'\");",
    "info" : "ThrowStatement[20711-20824]:ThrowStatement[20711-20824]"
  }, {
    "left" : "decodedData >>= 4;",
    "right" : "decodedData >>= 4;",
    "info" : "ExpressionStatement[20930-20948]:ExpressionStatement[20930-20948]"
  }, {
    "left" : "buffer[outputPtr++] = (byte) decodedData;",
    "right" : "buffer[outputPtr++] = (byte) decodedData;",
    "info" : "ExpressionStatement[20969-21010]:ExpressionStatement[20969-21010]"
  }, {
    "left" : "continue;",
    "right" : "continue;",
    "info" : "ContinueStatement[21031-21040]:ContinueStatement[21031-21040]"
  }, {
    "left" : "decodedData = (decodedData << 6) | bits;",
    "right" : "decodedData = (decodedData << 6) | bits;",
    "info" : "ExpressionStatement[21119-21159]:ExpressionStatement[21119-21159]"
  }, {
    "left" : "if (_inputPtr >= _inputEnd)",
    "right" : "if (_inputPtr >= _inputEnd)",
    "info" : "IfStatement[21243-21324]:IfStatement[21243-21324]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21271-21324]:Block[21271-21324]"
  }, {
    "left" : "loadMoreGuaranteed();",
    "right" : "loadMoreGuaranteed();",
    "info" : "ExpressionStatement[21289-21310]:ExpressionStatement[21289-21310]"
  }, {
    "left" : "ch = _inputBuffer[_inputPtr++] & 0xFF;",
    "right" : "ch = _inputBuffer[_inputPtr++] & 0xFF;",
    "info" : "ExpressionStatement[21337-21375]:ExpressionStatement[21337-21375]"
  }, {
    "left" : "bits = b64variant.decodeBase64Char(ch);",
    "right" : "bits = b64variant.decodeBase64Char(ch);",
    "info" : "ExpressionStatement[21388-21427]:ExpressionStatement[21388-21427]"
  }, {
    "left" : "if (bits < 0)",
    "right" : "if (bits < 0)",
    "info" : "IfStatement[21440-22618]:IfStatement[21440-22618]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21454-22618]:Block[21454-22618]"
  }, {
    "left" : "if (bits != Base64Variant.BASE64_VALUE_PADDING)",
    "right" : "if (bits != Base64Variant.BASE64_VALUE_PADDING)",
    "info" : "IfStatement[21472-21990]:IfStatement[21472-21990]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21520-21990]:Block[21520-21990]"
  }, {
    "left" : "if (ch == '\"' && !b64variant.usesPadding())",
    "right" : "if (ch == '\"' && !b64variant.usesPadding())",
    "info" : "IfStatement[21625-21905]:IfStatement[21625-21905]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21669-21905]:Block[21669-21905]"
  }, {
    "left" : "decodedData >>= 2;",
    "right" : "decodedData >>= 2;",
    "info" : "ExpressionStatement[21695-21713]:ExpressionStatement[21695-21713]"
  }, {
    "left" : "buffer[outputPtr++] = (byte) (decodedData >> 8);",
    "right" : "buffer[outputPtr++] = (byte) (decodedData >> 8);",
    "info" : "ExpressionStatement[21738-21786]:ExpressionStatement[21738-21786]"
  }, {
    "left" : "buffer[outputPtr++] = (byte) decodedData;",
    "right" : "buffer[outputPtr++] = (byte) decodedData;",
    "info" : "ExpressionStatement[21811-21852]:ExpressionStatement[21811-21852]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[21877-21883]:BreakStatement[21877-21883]"
  }, {
    "left" : "bits = _decodeBase64Escape(b64variant, ch, 3);",
    "right" : "bits = _decodeBase64Escape(b64variant, ch, 3);",
    "info" : "ExpressionStatement[21926-21972]:ExpressionStatement[21926-21972]"
  }, {
    "left" : "if (bits == Base64Variant.BASE64_VALUE_PADDING)",
    "right" : "if (bits == Base64Variant.BASE64_VALUE_PADDING)",
    "info" : "IfStatement[22007-22604]:IfStatement[22007-22604]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22055-22604]:Block[22055-22604]"
  }, {
    "left" : "decodedData >>= 2;",
    "right" : "decodedData >>= 2;",
    "info" : "ExpressionStatement[22407-22425]:ExpressionStatement[22407-22425]"
  }, {
    "left" : "buffer[outputPtr++] = (byte) (decodedData >> 8);",
    "right" : "buffer[outputPtr++] = (byte) (decodedData >> 8);",
    "info" : "ExpressionStatement[22446-22494]:ExpressionStatement[22446-22494]"
  }, {
    "left" : "buffer[outputPtr++] = (byte) decodedData;",
    "right" : "buffer[outputPtr++] = (byte) decodedData;",
    "info" : "ExpressionStatement[22515-22556]:ExpressionStatement[22515-22556]"
  }, {
    "left" : "continue;",
    "right" : "continue;",
    "info" : "ContinueStatement[22577-22586]:ContinueStatement[22577-22586]"
  }, {
    "left" : "decodedData = (decodedData << 6) | bits;",
    "right" : "decodedData = (decodedData << 6) | bits;",
    "info" : "ExpressionStatement[22685-22725]:ExpressionStatement[22685-22725]"
  }, {
    "left" : "buffer[outputPtr++] = (byte) (decodedData >> 16);",
    "right" : "buffer[outputPtr++] = (byte) (decodedData >> 16);",
    "info" : "ExpressionStatement[22738-22787]:ExpressionStatement[22738-22787]"
  }, {
    "left" : "buffer[outputPtr++] = (byte) (decodedData >> 8);",
    "right" : "buffer[outputPtr++] = (byte) (decodedData >> 8);",
    "info" : "ExpressionStatement[22800-22848]:ExpressionStatement[22800-22848]"
  }, {
    "left" : "buffer[outputPtr++] = (byte) decodedData;",
    "right" : "buffer[outputPtr++] = (byte) decodedData;",
    "info" : "ExpressionStatement[22861-22902]:ExpressionStatement[22861-22902]"
  }, {
    "left" : "_tokenIncomplete = false;",
    "right" : "_tokenIncomplete = false;",
    "info" : "ExpressionStatement[22921-22946]:ExpressionStatement[22921-22946]"
  }, {
    "left" : "if (outputPtr > 0)",
    "right" : "if (outputPtr > 0)",
    "info" : "IfStatement[22955-23068]:IfStatement[22955-23068]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22974-23068]:Block[22974-23068]"
  }, {
    "left" : "outputCount += outputPtr;",
    "right" : "outputCount += outputPtr;",
    "info" : "ExpressionStatement[22988-23013]:ExpressionStatement[22988-23013]"
  }, {
    "left" : "out.write(buffer, 0, outputPtr);",
    "right" : "out.write(buffer, 0, outputPtr);",
    "info" : "ExpressionStatement[23026-23058]:ExpressionStatement[23026-23058]"
  }, {
    "left" : "return outputCount;",
    "right" : "return outputCount;",
    "info" : "ReturnStatement[23077-23096]:ReturnStatement[23077-23096]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[23403-23412]:MarkerAnnotation[23403-23412]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[23417-23423]:Modifier[23417-23423]"
  }, {
    "left" : "JsonToken",
    "right" : "JsonToken",
    "info" : "SimpleType[23424-23433]:SimpleType[23424-23433]"
  }, {
    "left" : "nextToken",
    "right" : "nextToken",
    "info" : "SimpleName[23434-23443]:SimpleName[23434-23443]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[23453-23464]:SimpleType[23453-23464]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23469-27298]:Block[23469-27298]"
  }, {
    "left" : "if (_currToken == JsonToken.FIELD_NAME)",
    "right" : "if (_currToken == JsonToken.FIELD_NAME)",
    "info" : "IfStatement[23692-23780]:IfStatement[23692-23780]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23732-23780]:Block[23732-23780]"
  }, {
    "left" : "return _nextAfterName();",
    "right" : "return _nextAfterName();",
    "info" : "ReturnStatement[23746-23770]:ReturnStatement[23746-23770]"
  }, {
    "left" : "_numTypesValid = NR_UNKNOWN;",
    "right" : "_numTypesValid = NR_UNKNOWN;",
    "info" : "ExpressionStatement[23929-23957]:ExpressionStatement[23929-23957]"
  }, {
    "left" : "if (_tokenIncomplete)",
    "right" : "if (_tokenIncomplete)",
    "info" : "IfStatement[23966-24057]:IfStatement[23966-24057]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23988-24057]:Block[23988-24057]"
  }, {
    "left" : "_skipString();",
    "right" : "_skipString();",
    "info" : "ExpressionStatement[24002-24016]:ExpressionStatement[24002-24016]"
  }, {
    "left" : "int i = _skipWSOrEnd();",
    "right" : "int i = _skipWSOrEnd();",
    "info" : "VariableDeclarationStatement[24066-24089]:VariableDeclarationStatement[24066-24089]"
  }, {
    "left" : "if (i < 0)",
    "right" : "if (i < 0)",
    "info" : "IfStatement[24098-24288]:IfStatement[24098-24288]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24109-24288]:Block[24109-24288]"
  }, {
    "left" : "close();",
    "right" : "close();",
    "info" : "ExpressionStatement[24230-24238]:ExpressionStatement[24230-24238]"
  }, {
    "left" : "return (_currToken = null);",
    "right" : "return (_currToken = null);",
    "info" : "ReturnStatement[24251-24278]:ReturnStatement[24251-24278]"
  }, {
    "left" : "_binaryValue = null;",
    "right" : "_binaryValue = null;",
    "info" : "ExpressionStatement[24339-24359]:ExpressionStatement[24339-24359]"
  }, {
    "left" : "if (i == INT_RBRACKET)",
    "right" : "if (i == INT_RBRACKET)",
    "info" : "IfStatement[24395-24694]:IfStatement[24395-24694]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24418-24694]:Block[24418-24694]"
  }, {
    "left" : "_updateLocation();",
    "right" : "_updateLocation();",
    "info" : "ExpressionStatement[24432-24450]:ExpressionStatement[24432-24450]"
  }, {
    "left" : "if (!_parsingContext.inArray())",
    "right" : "if (!_parsingContext.inArray())",
    "info" : "IfStatement[24463-24562]:IfStatement[24463-24562]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24495-24562]:Block[24495-24562]"
  }, {
    "left" : "_reportMismatchedEndMarker(i, '}');",
    "right" : "_reportMismatchedEndMarker(i, '}');",
    "info" : "ExpressionStatement[24513-24548]:ExpressionStatement[24513-24548]"
  }, {
    "left" : "_parsingContext = _parsingContext.clearAndGetParent();",
    "right" : "_parsingContext = _parsingContext.clearAndGetParent();",
    "info" : "ExpressionStatement[24575-24629]:ExpressionStatement[24575-24629]"
  }, {
    "left" : "return (_currToken = JsonToken.END_ARRAY);",
    "right" : "return (_currToken = JsonToken.END_ARRAY);",
    "info" : "ReturnStatement[24642-24684]:ReturnStatement[24642-24684]"
  }, {
    "left" : "if (i == INT_RCURLY)",
    "right" : "if (i == INT_RCURLY)",
    "info" : "IfStatement[24703-25002]:IfStatement[24703-25002]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24724-25002]:Block[24724-25002]"
  }, {
    "left" : "_updateLocation();",
    "right" : "_updateLocation();",
    "info" : "ExpressionStatement[24738-24756]:ExpressionStatement[24738-24756]"
  }, {
    "left" : "if (!_parsingContext.inObject())",
    "right" : "if (!_parsingContext.inObject())",
    "info" : "IfStatement[24769-24869]:IfStatement[24769-24869]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24802-24869]:Block[24802-24869]"
  }, {
    "left" : "_reportMismatchedEndMarker(i, ']');",
    "right" : "_reportMismatchedEndMarker(i, ']');",
    "info" : "ExpressionStatement[24820-24855]:ExpressionStatement[24820-24855]"
  }, {
    "left" : "_parsingContext = _parsingContext.clearAndGetParent();",
    "right" : "_parsingContext = _parsingContext.clearAndGetParent();",
    "info" : "ExpressionStatement[24882-24936]:ExpressionStatement[24882-24936]"
  }, {
    "left" : "return (_currToken = JsonToken.END_OBJECT);",
    "right" : "return (_currToken = JsonToken.END_OBJECT);",
    "info" : "ReturnStatement[24949-24992]:ReturnStatement[24949-24992]"
  }, {
    "left" : "if (_parsingContext.expectComma())",
    "right" : "if (_parsingContext.expectComma())",
    "info" : "IfStatement[25056-25296]:IfStatement[25056-25296]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25091-25296]:Block[25091-25296]"
  }, {
    "left" : "if (i != INT_COMMA)",
    "right" : "if (i != INT_COMMA)",
    "info" : "IfStatement[25105-25259]:IfStatement[25105-25259]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25125-25259]:Block[25125-25259]"
  }, {
    "left" : "_reportUnexpectedChar(i, \"was expecting comma to separate \"+_parsingContext.getTypeDesc()+\" entries\");",
    "right" : "_reportUnexpectedChar(i, \"was expecting comma to separate \"+_parsingContext.getTypeDesc()+\" entries\");",
    "info" : "ExpressionStatement[25143-25245]:ExpressionStatement[25143-25245]"
  }, {
    "left" : "i = _skipWS();",
    "right" : "i = _skipWS();",
    "info" : "ExpressionStatement[25272-25286]:ExpressionStatement[25272-25286]"
  }, {
    "left" : "if (!_parsingContext.inObject())",
    "right" : "if (!_parsingContext.inObject())",
    "info" : "IfStatement[25478-25598]:IfStatement[25478-25598]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25511-25598]:Block[25511-25598]"
  }, {
    "left" : "_updateLocation();",
    "right" : "_updateLocation();",
    "info" : "ExpressionStatement[25525-25543]:ExpressionStatement[25525-25543]"
  }, {
    "left" : "return _nextTokenNotInObject(i);",
    "right" : "return _nextTokenNotInObject(i);",
    "info" : "ReturnStatement[25556-25588]:ReturnStatement[25556-25588]"
  }, {
    "left" : "_updateNameLocation();",
    "right" : "_updateNameLocation();",
    "info" : "ExpressionStatement[25656-25678]:ExpressionStatement[25656-25678]"
  }, {
    "left" : "String n = _parseName(i);",
    "right" : "String n = _parseName(i);",
    "info" : "VariableDeclarationStatement[25687-25712]:VariableDeclarationStatement[25687-25712]"
  }, {
    "left" : "_parsingContext.setCurrentName(n);",
    "right" : "_parsingContext.setCurrentName(n);",
    "info" : "ExpressionStatement[25721-25755]:ExpressionStatement[25721-25755]"
  }, {
    "left" : "_currToken = JsonToken.FIELD_NAME;",
    "right" : "_currToken = JsonToken.FIELD_NAME;",
    "info" : "ExpressionStatement[25764-25798]:ExpressionStatement[25764-25798]"
  }, {
    "left" : "i = _skipColon();",
    "right" : "i = _skipColon();",
    "info" : "ExpressionStatement[25808-25825]:ExpressionStatement[25808-25825]"
  }, {
    "left" : "_updateLocation();",
    "right" : "_updateLocation();",
    "info" : "ExpressionStatement[25834-25852]:ExpressionStatement[25834-25852]"
  }, {
    "left" : "if (i == INT_QUOTE)",
    "right" : "if (i == INT_QUOTE)",
    "info" : "IfStatement[25951-26099]:IfStatement[25951-26099]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25971-26099]:Block[25971-26099]"
  }, {
    "left" : "_tokenIncomplete = true;",
    "right" : "_tokenIncomplete = true;",
    "info" : "ExpressionStatement[25985-26009]:ExpressionStatement[25985-26009]"
  }, {
    "left" : "_nextToken = JsonToken.VALUE_STRING;",
    "right" : "_nextToken = JsonToken.VALUE_STRING;",
    "info" : "ExpressionStatement[26022-26058]:ExpressionStatement[26022-26058]"
  }, {
    "left" : "return _currToken;",
    "right" : "return _currToken;",
    "info" : "ReturnStatement[26071-26089]:ReturnStatement[26071-26089]"
  }, {
    "left" : "JsonToken t;",
    "right" : "JsonToken t;",
    "info" : "VariableDeclarationStatement[26116-26128]:VariableDeclarationStatement[26116-26128]"
  }, {
    "left" : "switch (i) {\n        case '-':\n            t = _parseNegNumber();\n            break;\n\n            /* Should we have separate handling for plus? Although\n             * it is not allowed per se, it may be erroneously used,\n             * and could be indicate by a more specific error message.\n             */\n        case '0':\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n            t = _parsePosNumber(i);\n            break;\n        case 'f':\n            _matchToken(\"false\", 1);\n             t = JsonToken.VALUE_FALSE;\n            break;\n        case 'n':\n            _matchToken(\"null\", 1);\n            t = JsonToken.VALUE_NULL;\n            break;\n        case 't':\n            _matchToken(\"true\", 1);\n            t = JsonToken.VALUE_TRUE;\n            break;\n        case '[':\n            t = JsonToken.START_ARRAY;\n            break;\n        case '{':\n            t = JsonToken.START_OBJECT;\n            break;\n\n        default:\n            t = _handleUnexpectedValue(i);\n        }",
    "right" : "switch (i) {\n        case '-':\n            t = _parseNegNumber();\n            break;\n\n            /* Should we have separate handling for plus? Although\n             * it is not allowed per se, it may be erroneously used,\n             * and could be indicate by a more specific error message.\n             */\n        case '0':\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n            t = _parsePosNumber(i);\n            break;\n        case 'f':\n            _matchToken(\"false\", 1);\n             t = JsonToken.VALUE_FALSE;\n            break;\n        case 'n':\n            _matchToken(\"null\", 1);\n            t = JsonToken.VALUE_NULL;\n            break;\n        case 't':\n            _matchToken(\"true\", 1);\n            t = JsonToken.VALUE_TRUE;\n            break;\n        case '[':\n            t = JsonToken.START_ARRAY;\n            break;\n        case '{':\n            t = JsonToken.START_OBJECT;\n            break;\n\n        default:\n            t = _handleUnexpectedValue(i);\n        }",
    "info" : "SwitchStatement[26138-27241]:SwitchStatement[26138-27241]"
  }, {
    "left" : "case '-':",
    "right" : "case '-':",
    "info" : "SwitchCase[26159-26168]:SwitchCase[26159-26168]"
  }, {
    "left" : "t = _parseNegNumber();",
    "right" : "t = _parseNegNumber();",
    "info" : "ExpressionStatement[26181-26203]:ExpressionStatement[26181-26203]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[26216-26222]:BreakStatement[26216-26222]"
  }, {
    "left" : "case '0':",
    "right" : "case '0':",
    "info" : "SwitchCase[26455-26464]:SwitchCase[26455-26464]"
  }, {
    "left" : "case '1':",
    "right" : "case '1':",
    "info" : "SwitchCase[26473-26482]:SwitchCase[26473-26482]"
  }, {
    "left" : "case '2':",
    "right" : "case '2':",
    "info" : "SwitchCase[26491-26500]:SwitchCase[26491-26500]"
  }, {
    "left" : "case '3':",
    "right" : "case '3':",
    "info" : "SwitchCase[26509-26518]:SwitchCase[26509-26518]"
  }, {
    "left" : "case '4':",
    "right" : "case '4':",
    "info" : "SwitchCase[26527-26536]:SwitchCase[26527-26536]"
  }, {
    "left" : "case '5':",
    "right" : "case '5':",
    "info" : "SwitchCase[26545-26554]:SwitchCase[26545-26554]"
  }, {
    "left" : "case '6':",
    "right" : "case '6':",
    "info" : "SwitchCase[26563-26572]:SwitchCase[26563-26572]"
  }, {
    "left" : "case '7':",
    "right" : "case '7':",
    "info" : "SwitchCase[26581-26590]:SwitchCase[26581-26590]"
  }, {
    "left" : "case '8':",
    "right" : "case '8':",
    "info" : "SwitchCase[26599-26608]:SwitchCase[26599-26608]"
  }, {
    "left" : "case '9':",
    "right" : "case '9':",
    "info" : "SwitchCase[26617-26626]:SwitchCase[26617-26626]"
  }, {
    "left" : "t = _parsePosNumber(i);",
    "right" : "t = _parsePosNumber(i);",
    "info" : "ExpressionStatement[26639-26662]:ExpressionStatement[26639-26662]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[26675-26681]:BreakStatement[26675-26681]"
  }, {
    "left" : "case 'f':",
    "right" : "case 'f':",
    "info" : "SwitchCase[26690-26699]:SwitchCase[26690-26699]"
  }, {
    "left" : "_matchToken(\"false\", 1);",
    "right" : "_matchToken(\"false\", 1);",
    "info" : "ExpressionStatement[26712-26736]:ExpressionStatement[26712-26736]"
  }, {
    "left" : "t = JsonToken.VALUE_FALSE;",
    "right" : "t = JsonToken.VALUE_FALSE;",
    "info" : "ExpressionStatement[26750-26776]:ExpressionStatement[26750-26776]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[26789-26795]:BreakStatement[26789-26795]"
  }, {
    "left" : "case 'n':",
    "right" : "case 'n':",
    "info" : "SwitchCase[26804-26813]:SwitchCase[26804-26813]"
  }, {
    "left" : "_matchToken(\"null\", 1);",
    "right" : "_matchToken(\"null\", 1);",
    "info" : "ExpressionStatement[26826-26849]:ExpressionStatement[26826-26849]"
  }, {
    "left" : "t = JsonToken.VALUE_NULL;",
    "right" : "t = JsonToken.VALUE_NULL;",
    "info" : "ExpressionStatement[26862-26887]:ExpressionStatement[26862-26887]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[26900-26906]:BreakStatement[26900-26906]"
  }, {
    "left" : "case 't':",
    "right" : "case 't':",
    "info" : "SwitchCase[26915-26924]:SwitchCase[26915-26924]"
  }, {
    "left" : "_matchToken(\"true\", 1);",
    "right" : "_matchToken(\"true\", 1);",
    "info" : "ExpressionStatement[26937-26960]:ExpressionStatement[26937-26960]"
  }, {
    "left" : "t = JsonToken.VALUE_TRUE;",
    "right" : "t = JsonToken.VALUE_TRUE;",
    "info" : "ExpressionStatement[26973-26998]:ExpressionStatement[26973-26998]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[27011-27017]:BreakStatement[27011-27017]"
  }, {
    "left" : "case '[':",
    "right" : "case '[':",
    "info" : "SwitchCase[27026-27035]:SwitchCase[27026-27035]"
  }, {
    "left" : "t = JsonToken.START_ARRAY;",
    "right" : "t = JsonToken.START_ARRAY;",
    "info" : "ExpressionStatement[27048-27074]:ExpressionStatement[27048-27074]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[27087-27093]:BreakStatement[27087-27093]"
  }, {
    "left" : "case '{':",
    "right" : "case '{':",
    "info" : "SwitchCase[27102-27111]:SwitchCase[27102-27111]"
  }, {
    "left" : "t = JsonToken.START_OBJECT;",
    "right" : "t = JsonToken.START_OBJECT;",
    "info" : "ExpressionStatement[27124-27151]:ExpressionStatement[27124-27151]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[27164-27170]:BreakStatement[27164-27170]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[27180-27188]:SwitchCase[27180-27188]"
  }, {
    "left" : "t = _handleUnexpectedValue(i);",
    "right" : "t = _handleUnexpectedValue(i);",
    "info" : "ExpressionStatement[27201-27231]:ExpressionStatement[27201-27231]"
  }, {
    "left" : "_nextToken = t;",
    "right" : "_nextToken = t;",
    "info" : "ExpressionStatement[27250-27265]:ExpressionStatement[27250-27265]"
  }, {
    "left" : "return _currToken;",
    "right" : "return _currToken;",
    "info" : "ReturnStatement[27274-27292]:ReturnStatement[27274-27292]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[27304-27311]:Modifier[27304-27311]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[27312-27317]:Modifier[27312-27317]"
  }, {
    "left" : "JsonToken",
    "right" : "JsonToken",
    "info" : "SimpleType[27318-27327]:SimpleType[27318-27327]"
  }, {
    "left" : "_nextTokenNotInObject",
    "right" : "_nextTokenNotInObject",
    "info" : "SimpleName[27328-27349]:SimpleName[27328-27349]"
  }, {
    "left" : "int i",
    "right" : "int i",
    "info" : "SingleVariableDeclaration[27350-27355]:SingleVariableDeclaration[27350-27355]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[27364-27375]:SimpleType[27364-27375]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27380-28829]:Block[27380-28829]"
  }, {
    "left" : "if (i == INT_QUOTE)",
    "right" : "if (i == INT_QUOTE)",
    "info" : "IfStatement[27390-27516]:IfStatement[27390-27516]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27410-27516]:Block[27410-27516]"
  }, {
    "left" : "_tokenIncomplete = true;",
    "right" : "_tokenIncomplete = true;",
    "info" : "ExpressionStatement[27424-27448]:ExpressionStatement[27424-27448]"
  }, {
    "left" : "return (_currToken = JsonToken.VALUE_STRING);",
    "right" : "return (_currToken = JsonToken.VALUE_STRING);",
    "info" : "ReturnStatement[27461-27506]:ReturnStatement[27461-27506]"
  }, {
    "left" : "switch (i) {\n        case '[':\n            _parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);\n            return (_currToken = JsonToken.START_ARRAY);\n        case '{':\n            _parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);\n            return (_currToken = JsonToken.START_OBJECT);\n        case 't':\n            _matchToken(\"true\", 1);\n            return (_currToken = JsonToken.VALUE_TRUE);\n        case 'f':\n            _matchToken(\"false\", 1);\n            return (_currToken = JsonToken.VALUE_FALSE);\n        case 'n':\n            _matchToken(\"null\", 1);\n            return (_currToken = JsonToken.VALUE_NULL);\n        case '-':\n            return (_currToken = _parseNegNumber());\n            /* Should we have separate handling for plus? Although\n             * it is not allowed per se, it may be erroneously used,\n             * and could be indicated by a more specific error message.\n             */\n        case '0':\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n            return (_currToken = _parsePosNumber(i));\n        }",
    "right" : "switch (i) {\n        case '[':\n            _parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);\n            return (_currToken = JsonToken.START_ARRAY);\n        case '{':\n            _parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);\n            return (_currToken = JsonToken.START_OBJECT);\n        case 't':\n            _matchToken(\"true\", 1);\n            return (_currToken = JsonToken.VALUE_TRUE);\n        case 'f':\n            _matchToken(\"false\", 1);\n            return (_currToken = JsonToken.VALUE_FALSE);\n        case 'n':\n            _matchToken(\"null\", 1);\n            return (_currToken = JsonToken.VALUE_NULL);\n        case '-':\n            return (_currToken = _parseNegNumber());\n            /* Should we have separate handling for plus? Although\n             * it is not allowed per se, it may be erroneously used,\n             * and could be indicated by a more specific error message.\n             */\n        case '0':\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n            return (_currToken = _parsePosNumber(i));\n        }",
    "info" : "SwitchStatement[27525-28766]:SwitchStatement[27525-28766]"
  }, {
    "left" : "case '[':",
    "right" : "case '[':",
    "info" : "SwitchCase[27546-27555]:SwitchCase[27546-27555]"
  }, {
    "left" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
    "right" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
    "info" : "ExpressionStatement[27568-27658]:ExpressionStatement[27568-27658]"
  }, {
    "left" : "return (_currToken = JsonToken.START_ARRAY);",
    "right" : "return (_currToken = JsonToken.START_ARRAY);",
    "info" : "ReturnStatement[27671-27715]:ReturnStatement[27671-27715]"
  }, {
    "left" : "case '{':",
    "right" : "case '{':",
    "info" : "SwitchCase[27724-27733]:SwitchCase[27724-27733]"
  }, {
    "left" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
    "right" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
    "info" : "ExpressionStatement[27746-27837]:ExpressionStatement[27746-27837]"
  }, {
    "left" : "return (_currToken = JsonToken.START_OBJECT);",
    "right" : "return (_currToken = JsonToken.START_OBJECT);",
    "info" : "ReturnStatement[27850-27895]:ReturnStatement[27850-27895]"
  }, {
    "left" : "case 't':",
    "right" : "case 't':",
    "info" : "SwitchCase[27904-27913]:SwitchCase[27904-27913]"
  }, {
    "left" : "_matchToken(\"true\", 1);",
    "right" : "_matchToken(\"true\", 1);",
    "info" : "ExpressionStatement[27926-27949]:ExpressionStatement[27926-27949]"
  }, {
    "left" : "return (_currToken = JsonToken.VALUE_TRUE);",
    "right" : "return (_currToken = JsonToken.VALUE_TRUE);",
    "info" : "ReturnStatement[27962-28005]:ReturnStatement[27962-28005]"
  }, {
    "left" : "case 'f':",
    "right" : "case 'f':",
    "info" : "SwitchCase[28014-28023]:SwitchCase[28014-28023]"
  }, {
    "left" : "_matchToken(\"false\", 1);",
    "right" : "_matchToken(\"false\", 1);",
    "info" : "ExpressionStatement[28036-28060]:ExpressionStatement[28036-28060]"
  }, {
    "left" : "return (_currToken = JsonToken.VALUE_FALSE);",
    "right" : "return (_currToken = JsonToken.VALUE_FALSE);",
    "info" : "ReturnStatement[28073-28117]:ReturnStatement[28073-28117]"
  }, {
    "left" : "case 'n':",
    "right" : "case 'n':",
    "info" : "SwitchCase[28126-28135]:SwitchCase[28126-28135]"
  }, {
    "left" : "_matchToken(\"null\", 1);",
    "right" : "_matchToken(\"null\", 1);",
    "info" : "ExpressionStatement[28148-28171]:ExpressionStatement[28148-28171]"
  }, {
    "left" : "return (_currToken = JsonToken.VALUE_NULL);",
    "right" : "return (_currToken = JsonToken.VALUE_NULL);",
    "info" : "ReturnStatement[28184-28227]:ReturnStatement[28184-28227]"
  }, {
    "left" : "case '-':",
    "right" : "case '-':",
    "info" : "SwitchCase[28236-28245]:SwitchCase[28236-28245]"
  }, {
    "left" : "return (_currToken = _parseNegNumber());",
    "right" : "return (_currToken = _parseNegNumber());",
    "info" : "ReturnStatement[28258-28298]:ReturnStatement[28258-28298]"
  }, {
    "left" : "case '0':",
    "right" : "case '0':",
    "info" : "SwitchCase[28531-28540]:SwitchCase[28531-28540]"
  }, {
    "left" : "case '1':",
    "right" : "case '1':",
    "info" : "SwitchCase[28549-28558]:SwitchCase[28549-28558]"
  }, {
    "left" : "case '2':",
    "right" : "case '2':",
    "info" : "SwitchCase[28567-28576]:SwitchCase[28567-28576]"
  }, {
    "left" : "case '3':",
    "right" : "case '3':",
    "info" : "SwitchCase[28585-28594]:SwitchCase[28585-28594]"
  }, {
    "left" : "case '4':",
    "right" : "case '4':",
    "info" : "SwitchCase[28603-28612]:SwitchCase[28603-28612]"
  }, {
    "left" : "case '5':",
    "right" : "case '5':",
    "info" : "SwitchCase[28621-28630]:SwitchCase[28621-28630]"
  }, {
    "left" : "case '6':",
    "right" : "case '6':",
    "info" : "SwitchCase[28639-28648]:SwitchCase[28639-28648]"
  }, {
    "left" : "case '7':",
    "right" : "case '7':",
    "info" : "SwitchCase[28657-28666]:SwitchCase[28657-28666]"
  }, {
    "left" : "case '8':",
    "right" : "case '8':",
    "info" : "SwitchCase[28675-28684]:SwitchCase[28675-28684]"
  }, {
    "left" : "case '9':",
    "right" : "case '9':",
    "info" : "SwitchCase[28693-28702]:SwitchCase[28693-28702]"
  }, {
    "left" : "return (_currToken = _parsePosNumber(i));",
    "right" : "return (_currToken = _parsePosNumber(i));",
    "info" : "ReturnStatement[28715-28756]:ReturnStatement[28715-28756]"
  }, {
    "left" : "return (_currToken = _handleUnexpectedValue(i));",
    "right" : "return (_currToken = _handleUnexpectedValue(i));",
    "info" : "ReturnStatement[28775-28823]:ReturnStatement[28775-28823]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[28839-28846]:Modifier[28839-28846]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[28847-28852]:Modifier[28847-28852]"
  }, {
    "left" : "JsonToken",
    "right" : "JsonToken",
    "info" : "SimpleType[28853-28862]:SimpleType[28853-28862]"
  }, {
    "left" : "_nextAfterName",
    "right" : "_nextAfterName",
    "info" : "SimpleName[28863-28877]:SimpleName[28863-28877]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28884-29507]:Block[28884-29507]"
  }, {
    "left" : "_nameCopied = false;",
    "right" : "_nameCopied = false;",
    "info" : "ExpressionStatement[28894-28914]:ExpressionStatement[28894-28914]"
  }, {
    "left" : "JsonToken t = _nextToken;",
    "right" : "JsonToken t = _nextToken;",
    "info" : "VariableDeclarationStatement[28962-28987]:VariableDeclarationStatement[28962-28987]"
  }, {
    "left" : "_nextToken = null;",
    "right" : "_nextToken = null;",
    "info" : "ExpressionStatement[28996-29014]:ExpressionStatement[28996-29014]"
  }, {
    "left" : "if (t == JsonToken.START_ARRAY)",
    "right" : "if (t == JsonToken.START_ARRAY)",
    "info" : "IfStatement[29168-29468]:IfStatement[29168-29468]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29200-29314]:Block[29200-29314]"
  }, {
    "left" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
    "right" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
    "info" : "ExpressionStatement[29214-29304]:ExpressionStatement[29214-29304]"
  }, {
    "left" : "if (t == JsonToken.START_OBJECT)",
    "right" : "if (t == JsonToken.START_OBJECT)",
    "info" : "IfStatement[29320-29468]:IfStatement[29320-29468]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29353-29468]:Block[29353-29468]"
  }, {
    "left" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
    "right" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
    "info" : "ExpressionStatement[29367-29458]:ExpressionStatement[29367-29458]"
  }, {
    "left" : "return (_currToken = t);",
    "right" : "return (_currToken = t);",
    "info" : "ReturnStatement[29477-29501]:ReturnStatement[29477-29501]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[29718-29727]:MarkerAnnotation[29718-29727]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[29732-29738]:Modifier[29732-29738]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[29739-29746]:PrimitiveType[29739-29746]"
  }, {
    "left" : "nextFieldName",
    "right" : "nextFieldName",
    "info" : "SimpleName[29747-29760]:SimpleName[29747-29760]"
  }, {
    "left" : "SerializableString str",
    "right" : "SerializableString str",
    "info" : "SingleVariableDeclaration[29761-29783]:SingleVariableDeclaration[29761-29783]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[29792-29803]:SimpleType[29792-29803]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29808-32803]:Block[29808-32803]"
  }, {
    "left" : "_numTypesValid = NR_UNKNOWN;",
    "right" : "_numTypesValid = NR_UNKNOWN;",
    "info" : "ExpressionStatement[29887-29915]:ExpressionStatement[29887-29915]"
  }, {
    "left" : "if (_currToken == JsonToken.FIELD_NAME)",
    "right" : "if (_currToken == JsonToken.FIELD_NAME)",
    "info" : "IfStatement[29924-30067]:IfStatement[29924-30067]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29964-30067]:Block[29964-30067]"
  }, {
    "left" : "_nextAfterName();",
    "right" : "_nextAfterName();",
    "info" : "ExpressionStatement[30014-30031]:ExpressionStatement[30014-30031]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[30044-30057]:ReturnStatement[30044-30057]"
  }, {
    "left" : "if (_tokenIncomplete)",
    "right" : "if (_tokenIncomplete)",
    "info" : "IfStatement[30076-30136]:IfStatement[30076-30136]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30098-30136]:Block[30098-30136]"
  }, {
    "left" : "_skipString();",
    "right" : "_skipString();",
    "info" : "ExpressionStatement[30112-30126]:ExpressionStatement[30112-30126]"
  }, {
    "left" : "int i = _skipWSOrEnd();",
    "right" : "int i = _skipWSOrEnd();",
    "info" : "VariableDeclarationStatement[30145-30168]:VariableDeclarationStatement[30145-30168]"
  }, {
    "left" : "if (i < 0)",
    "right" : "if (i < 0)",
    "info" : "IfStatement[30177-30293]:IfStatement[30177-30293]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30188-30293]:Block[30188-30293]"
  }, {
    "left" : "close();",
    "right" : "close();",
    "info" : "ExpressionStatement[30218-30226]:ExpressionStatement[30218-30226]"
  }, {
    "left" : "_currToken = null;",
    "right" : "_currToken = null;",
    "info" : "ExpressionStatement[30239-30257]:ExpressionStatement[30239-30257]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[30270-30283]:ReturnStatement[30270-30283]"
  }, {
    "left" : "_binaryValue = null;",
    "right" : "_binaryValue = null;",
    "info" : "ExpressionStatement[30302-30322]:ExpressionStatement[30302-30322]"
  }, {
    "left" : "if (i == INT_RBRACKET)",
    "right" : "if (i == INT_RBRACKET)",
    "info" : "IfStatement[30358-30674]:IfStatement[30358-30674]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30381-30674]:Block[30381-30674]"
  }, {
    "left" : "_updateLocation();",
    "right" : "_updateLocation();",
    "info" : "ExpressionStatement[30395-30413]:ExpressionStatement[30395-30413]"
  }, {
    "left" : "if (!_parsingContext.inArray())",
    "right" : "if (!_parsingContext.inArray())",
    "info" : "IfStatement[30426-30525]:IfStatement[30426-30525]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30458-30525]:Block[30458-30525]"
  }, {
    "left" : "_reportMismatchedEndMarker(i, '}');",
    "right" : "_reportMismatchedEndMarker(i, '}');",
    "info" : "ExpressionStatement[30476-30511]:ExpressionStatement[30476-30511]"
  }, {
    "left" : "_parsingContext = _parsingContext.clearAndGetParent();",
    "right" : "_parsingContext = _parsingContext.clearAndGetParent();",
    "info" : "ExpressionStatement[30538-30592]:ExpressionStatement[30538-30592]"
  }, {
    "left" : "_currToken = JsonToken.END_ARRAY;",
    "right" : "_currToken = JsonToken.END_ARRAY;",
    "info" : "ExpressionStatement[30605-30638]:ExpressionStatement[30605-30638]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[30651-30664]:ReturnStatement[30651-30664]"
  }, {
    "left" : "if (i == INT_RCURLY)",
    "right" : "if (i == INT_RCURLY)",
    "info" : "IfStatement[30683-30999]:IfStatement[30683-30999]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30704-30999]:Block[30704-30999]"
  }, {
    "left" : "_updateLocation();",
    "right" : "_updateLocation();",
    "info" : "ExpressionStatement[30718-30736]:ExpressionStatement[30718-30736]"
  }, {
    "left" : "if (!_parsingContext.inObject())",
    "right" : "if (!_parsingContext.inObject())",
    "info" : "IfStatement[30749-30849]:IfStatement[30749-30849]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30782-30849]:Block[30782-30849]"
  }, {
    "left" : "_reportMismatchedEndMarker(i, ']');",
    "right" : "_reportMismatchedEndMarker(i, ']');",
    "info" : "ExpressionStatement[30800-30835]:ExpressionStatement[30800-30835]"
  }, {
    "left" : "_parsingContext = _parsingContext.clearAndGetParent();",
    "right" : "_parsingContext = _parsingContext.clearAndGetParent();",
    "info" : "ExpressionStatement[30862-30916]:ExpressionStatement[30862-30916]"
  }, {
    "left" : "_currToken = JsonToken.END_OBJECT;",
    "right" : "_currToken = JsonToken.END_OBJECT;",
    "info" : "ExpressionStatement[30929-30963]:ExpressionStatement[30929-30963]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[30976-30989]:ReturnStatement[30976-30989]"
  }, {
    "left" : "if (_parsingContext.expectComma())",
    "right" : "if (_parsingContext.expectComma())",
    "info" : "IfStatement[31053-31293]:IfStatement[31053-31293]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31088-31293]:Block[31088-31293]"
  }, {
    "left" : "if (i != INT_COMMA)",
    "right" : "if (i != INT_COMMA)",
    "info" : "IfStatement[31102-31256]:IfStatement[31102-31256]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31122-31256]:Block[31122-31256]"
  }, {
    "left" : "_reportUnexpectedChar(i, \"was expecting comma to separate \"+_parsingContext.getTypeDesc()+\" entries\");",
    "right" : "_reportUnexpectedChar(i, \"was expecting comma to separate \"+_parsingContext.getTypeDesc()+\" entries\");",
    "info" : "ExpressionStatement[31140-31242]:ExpressionStatement[31140-31242]"
  }, {
    "left" : "i = _skipWS();",
    "right" : "i = _skipWS();",
    "info" : "ExpressionStatement[31269-31283]:ExpressionStatement[31269-31283]"
  }, {
    "left" : "if (!_parsingContext.inObject())",
    "right" : "if (!_parsingContext.inObject())",
    "info" : "IfStatement[31303-31442]:IfStatement[31303-31442]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31336-31442]:Block[31336-31442]"
  }, {
    "left" : "_updateLocation();",
    "right" : "_updateLocation();",
    "info" : "ExpressionStatement[31350-31368]:ExpressionStatement[31350-31368]"
  }, {
    "left" : "_nextTokenNotInObject(i);",
    "right" : "_nextTokenNotInObject(i);",
    "info" : "ExpressionStatement[31381-31406]:ExpressionStatement[31381-31406]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[31419-31432]:ReturnStatement[31419-31432]"
  }, {
    "left" : "_updateNameLocation();",
    "right" : "_updateNameLocation();",
    "info" : "ExpressionStatement[31509-31531]:ExpressionStatement[31509-31531]"
  }, {
    "left" : "if (i == INT_QUOTE)",
    "right" : "if (i == INT_QUOTE)",
    "info" : "IfStatement[31540-32751]:IfStatement[31540-32751]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31560-32751]:Block[31560-32751]"
  }, {
    "left" : "byte[] nameBytes = str.asQuotedUTF8();",
    "right" : "byte[] nameBytes = str.asQuotedUTF8();",
    "info" : "VariableDeclarationStatement[31639-31677]:VariableDeclarationStatement[31639-31677]"
  }, {
    "left" : "final int len = nameBytes.length;",
    "right" : "final int len = nameBytes.length;",
    "info" : "VariableDeclarationStatement[31690-31723]:VariableDeclarationStatement[31690-31723]"
  }, {
    "left" : "if ((_inputPtr + len + 4) < _inputEnd)",
    "right" : "if ((_inputPtr + len + 4) < _inputEnd)",
    "info" : "IfStatement[31872-32741]:IfStatement[31872-32741]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31911-32741]:Block[31911-32741]"
  }, {
    "left" : "final int end = _inputPtr+len;",
    "right" : "final int end = _inputPtr+len;",
    "info" : "VariableDeclarationStatement[31988-32018]:VariableDeclarationStatement[31988-32018]"
  }, {
    "left" : "if (_inputBuffer[end] == INT_QUOTE)",
    "right" : "if (_inputBuffer[end] == INT_QUOTE)",
    "info" : "IfStatement[32035-32727]:IfStatement[32035-32727]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32071-32727]:Block[32071-32727]"
  }, {
    "left" : "int offset = 0;",
    "right" : "int offset = 0;",
    "info" : "VariableDeclarationStatement[32093-32108]:VariableDeclarationStatement[32093-32108]"
  }, {
    "left" : "int ptr = _inputPtr;",
    "right" : "int ptr = _inputPtr;",
    "info" : "VariableDeclarationStatement[32129-32149]:VariableDeclarationStatement[32129-32149]"
  }, {
    "left" : "while (true)",
    "right" : "while (true)",
    "info" : "WhileStatement[32170-32709]:WhileStatement[32170-32709]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32183-32709]:Block[32183-32709]"
  }, {
    "left" : "if (ptr == end)",
    "right" : "if (ptr == end)",
    "info" : "IfStatement[32209-32491]:IfStatement[32209-32491]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32225-32491]:Block[32225-32491]"
  }, {
    "left" : "_parsingContext.setCurrentName(str.getValue());",
    "right" : "_parsingContext.setCurrentName(str.getValue());",
    "info" : "ExpressionStatement[32270-32317]:ExpressionStatement[32270-32317]"
  }, {
    "left" : "i = _skipColonFast(ptr+1);",
    "right" : "i = _skipColonFast(ptr+1);",
    "info" : "ExpressionStatement[32346-32372]:ExpressionStatement[32346-32372]"
  }, {
    "left" : "_isNextTokenNameYes(i);",
    "right" : "_isNextTokenNameYes(i);",
    "info" : "ExpressionStatement[32401-32424]:ExpressionStatement[32401-32424]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[32453-32465]:ReturnStatement[32453-32465]"
  }, {
    "left" : "if (nameBytes[offset] != _inputBuffer[ptr])",
    "right" : "if (nameBytes[offset] != _inputBuffer[ptr])",
    "info" : "IfStatement[32516-32622]:IfStatement[32516-32622]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32560-32622]:Block[32560-32622]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[32590-32596]:BreakStatement[32590-32596]"
  }, {
    "left" : "++offset;",
    "right" : "++offset;",
    "info" : "ExpressionStatement[32647-32656]:ExpressionStatement[32647-32656]"
  }, {
    "left" : "++ptr;",
    "right" : "++ptr;",
    "info" : "ExpressionStatement[32681-32687]:ExpressionStatement[32681-32687]"
  }, {
    "left" : "return _isNextTokenNameMaybe(i, str);",
    "right" : "return _isNextTokenNameMaybe(i, str);",
    "info" : "ReturnStatement[32760-32797]:ReturnStatement[32760-32797]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[32809-32818]:MarkerAnnotation[32809-32818]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[32823-32829]:Modifier[32823-32829]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[32830-32836]:SimpleType[32830-32836]"
  }, {
    "left" : "nextFieldName",
    "right" : "nextFieldName",
    "info" : "SimpleName[32837-32850]:SimpleName[32837-32850]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[32860-32871]:SimpleType[32860-32871]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32876-35768]:Block[32876-35768]"
  }, {
    "left" : "_numTypesValid = NR_UNKNOWN;",
    "right" : "_numTypesValid = NR_UNKNOWN;",
    "info" : "ExpressionStatement[32956-32984]:ExpressionStatement[32956-32984]"
  }, {
    "left" : "if (_currToken == JsonToken.FIELD_NAME)",
    "right" : "if (_currToken == JsonToken.FIELD_NAME)",
    "info" : "IfStatement[32993-33099]:IfStatement[32993-33099]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33033-33099]:Block[33033-33099]"
  }, {
    "left" : "_nextAfterName();",
    "right" : "_nextAfterName();",
    "info" : "ExpressionStatement[33047-33064]:ExpressionStatement[33047-33064]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[33077-33089]:ReturnStatement[33077-33089]"
  }, {
    "left" : "if (_tokenIncomplete)",
    "right" : "if (_tokenIncomplete)",
    "info" : "IfStatement[33108-33168]:IfStatement[33108-33168]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33130-33168]:Block[33130-33168]"
  }, {
    "left" : "_skipString();",
    "right" : "_skipString();",
    "info" : "ExpressionStatement[33144-33158]:ExpressionStatement[33144-33158]"
  }, {
    "left" : "int i = _skipWSOrEnd();",
    "right" : "int i = _skipWSOrEnd();",
    "info" : "VariableDeclarationStatement[33177-33200]:VariableDeclarationStatement[33177-33200]"
  }, {
    "left" : "if (i < 0)",
    "right" : "if (i < 0)",
    "info" : "IfStatement[33209-33308]:IfStatement[33209-33308]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33220-33308]:Block[33220-33308]"
  }, {
    "left" : "close();",
    "right" : "close();",
    "info" : "ExpressionStatement[33234-33242]:ExpressionStatement[33234-33242]"
  }, {
    "left" : "_currToken = null;",
    "right" : "_currToken = null;",
    "info" : "ExpressionStatement[33255-33273]:ExpressionStatement[33255-33273]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[33286-33298]:ReturnStatement[33286-33298]"
  }, {
    "left" : "_binaryValue = null;",
    "right" : "_binaryValue = null;",
    "info" : "ExpressionStatement[33317-33337]:ExpressionStatement[33317-33337]"
  }, {
    "left" : "if (i == INT_RBRACKET)",
    "right" : "if (i == INT_RBRACKET)",
    "info" : "IfStatement[33347-33662]:IfStatement[33347-33662]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33370-33662]:Block[33370-33662]"
  }, {
    "left" : "_updateLocation();",
    "right" : "_updateLocation();",
    "info" : "ExpressionStatement[33384-33402]:ExpressionStatement[33384-33402]"
  }, {
    "left" : "if (!_parsingContext.inArray())",
    "right" : "if (!_parsingContext.inArray())",
    "info" : "IfStatement[33415-33514]:IfStatement[33415-33514]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33447-33514]:Block[33447-33514]"
  }, {
    "left" : "_reportMismatchedEndMarker(i, '}');",
    "right" : "_reportMismatchedEndMarker(i, '}');",
    "info" : "ExpressionStatement[33465-33500]:ExpressionStatement[33465-33500]"
  }, {
    "left" : "_parsingContext = _parsingContext.clearAndGetParent();",
    "right" : "_parsingContext = _parsingContext.clearAndGetParent();",
    "info" : "ExpressionStatement[33527-33581]:ExpressionStatement[33527-33581]"
  }, {
    "left" : "_currToken = JsonToken.END_ARRAY;",
    "right" : "_currToken = JsonToken.END_ARRAY;",
    "info" : "ExpressionStatement[33594-33627]:ExpressionStatement[33594-33627]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[33640-33652]:ReturnStatement[33640-33652]"
  }, {
    "left" : "if (i == INT_RCURLY)",
    "right" : "if (i == INT_RCURLY)",
    "info" : "IfStatement[33671-33986]:IfStatement[33671-33986]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33692-33986]:Block[33692-33986]"
  }, {
    "left" : "_updateLocation();",
    "right" : "_updateLocation();",
    "info" : "ExpressionStatement[33706-33724]:ExpressionStatement[33706-33724]"
  }, {
    "left" : "if (!_parsingContext.inObject())",
    "right" : "if (!_parsingContext.inObject())",
    "info" : "IfStatement[33737-33837]:IfStatement[33737-33837]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33770-33837]:Block[33770-33837]"
  }, {
    "left" : "_reportMismatchedEndMarker(i, ']');",
    "right" : "_reportMismatchedEndMarker(i, ']');",
    "info" : "ExpressionStatement[33788-33823]:ExpressionStatement[33788-33823]"
  }, {
    "left" : "_parsingContext = _parsingContext.clearAndGetParent();",
    "right" : "_parsingContext = _parsingContext.clearAndGetParent();",
    "info" : "ExpressionStatement[33850-33904]:ExpressionStatement[33850-33904]"
  }, {
    "left" : "_currToken = JsonToken.END_OBJECT;",
    "right" : "_currToken = JsonToken.END_OBJECT;",
    "info" : "ExpressionStatement[33917-33951]:ExpressionStatement[33917-33951]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[33964-33976]:ReturnStatement[33964-33976]"
  }, {
    "left" : "if (_parsingContext.expectComma())",
    "right" : "if (_parsingContext.expectComma())",
    "info" : "IfStatement[34040-34280]:IfStatement[34040-34280]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34075-34280]:Block[34075-34280]"
  }, {
    "left" : "if (i != INT_COMMA)",
    "right" : "if (i != INT_COMMA)",
    "info" : "IfStatement[34089-34243]:IfStatement[34089-34243]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34109-34243]:Block[34109-34243]"
  }, {
    "left" : "_reportUnexpectedChar(i, \"was expecting comma to separate \"+_parsingContext.getTypeDesc()+\" entries\");",
    "right" : "_reportUnexpectedChar(i, \"was expecting comma to separate \"+_parsingContext.getTypeDesc()+\" entries\");",
    "info" : "ExpressionStatement[34127-34229]:ExpressionStatement[34127-34229]"
  }, {
    "left" : "i = _skipWS();",
    "right" : "i = _skipWS();",
    "info" : "ExpressionStatement[34256-34270]:ExpressionStatement[34256-34270]"
  }, {
    "left" : "if (!_parsingContext.inObject())",
    "right" : "if (!_parsingContext.inObject())",
    "info" : "IfStatement[34289-34427]:IfStatement[34289-34427]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34322-34427]:Block[34322-34427]"
  }, {
    "left" : "_updateLocation();",
    "right" : "_updateLocation();",
    "info" : "ExpressionStatement[34336-34354]:ExpressionStatement[34336-34354]"
  }, {
    "left" : "_nextTokenNotInObject(i);",
    "right" : "_nextTokenNotInObject(i);",
    "info" : "ExpressionStatement[34367-34392]:ExpressionStatement[34367-34392]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[34405-34417]:ReturnStatement[34405-34417]"
  }, {
    "left" : "_updateNameLocation();",
    "right" : "_updateNameLocation();",
    "info" : "ExpressionStatement[34437-34459]:ExpressionStatement[34437-34459]"
  }, {
    "left" : "final String nameStr = _parseName(i);",
    "right" : "final String nameStr = _parseName(i);",
    "info" : "VariableDeclarationStatement[34468-34505]:VariableDeclarationStatement[34468-34505]"
  }, {
    "left" : "_parsingContext.setCurrentName(nameStr);",
    "right" : "_parsingContext.setCurrentName(nameStr);",
    "info" : "ExpressionStatement[34514-34554]:ExpressionStatement[34514-34554]"
  }, {
    "left" : "_currToken = JsonToken.FIELD_NAME;",
    "right" : "_currToken = JsonToken.FIELD_NAME;",
    "info" : "ExpressionStatement[34563-34597]:ExpressionStatement[34563-34597]"
  }, {
    "left" : "i = _skipColon();",
    "right" : "i = _skipColon();",
    "info" : "ExpressionStatement[34607-34624]:ExpressionStatement[34607-34624]"
  }, {
    "left" : "_updateLocation();",
    "right" : "_updateLocation();",
    "info" : "ExpressionStatement[34633-34651]:ExpressionStatement[34633-34651]"
  }, {
    "left" : "if (i == INT_QUOTE)",
    "right" : "if (i == INT_QUOTE)",
    "info" : "IfStatement[34660-34805]:IfStatement[34660-34805]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34680-34805]:Block[34680-34805]"
  }, {
    "left" : "_tokenIncomplete = true;",
    "right" : "_tokenIncomplete = true;",
    "info" : "ExpressionStatement[34694-34718]:ExpressionStatement[34694-34718]"
  }, {
    "left" : "_nextToken = JsonToken.VALUE_STRING;",
    "right" : "_nextToken = JsonToken.VALUE_STRING;",
    "info" : "ExpressionStatement[34731-34767]:ExpressionStatement[34731-34767]"
  }, {
    "left" : "return nameStr;",
    "right" : "return nameStr;",
    "info" : "ReturnStatement[34780-34795]:ReturnStatement[34780-34795]"
  }, {
    "left" : "JsonToken t;",
    "right" : "JsonToken t;",
    "info" : "VariableDeclarationStatement[34814-34826]:VariableDeclarationStatement[34814-34826]"
  }, {
    "left" : "switch (i) {\n        case '-':\n            t = _parseNegNumber();\n            break;\n        case '0':\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n            t = _parsePosNumber(i);\n            break;\n        case 'f':\n            _matchToken(\"false\", 1);\n             t = JsonToken.VALUE_FALSE;\n            break;\n        case 'n':\n            _matchToken(\"null\", 1);\n            t = JsonToken.VALUE_NULL;\n            break;\n        case 't':\n            _matchToken(\"true\", 1);\n            t = JsonToken.VALUE_TRUE;\n            break;\n        case '[':\n            t = JsonToken.START_ARRAY;\n            break;\n        case '{':\n            t = JsonToken.START_OBJECT;\n            break;\n\n        default:\n            t = _handleUnexpectedValue(i);\n        }",
    "right" : "switch (i) {\n        case '-':\n            t = _parseNegNumber();\n            break;\n        case '0':\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n            t = _parsePosNumber(i);\n            break;\n        case 'f':\n            _matchToken(\"false\", 1);\n             t = JsonToken.VALUE_FALSE;\n            break;\n        case 'n':\n            _matchToken(\"null\", 1);\n            t = JsonToken.VALUE_NULL;\n            break;\n        case 't':\n            _matchToken(\"true\", 1);\n            t = JsonToken.VALUE_TRUE;\n            break;\n        case '[':\n            t = JsonToken.START_ARRAY;\n            break;\n        case '{':\n            t = JsonToken.START_OBJECT;\n            break;\n\n        default:\n            t = _handleUnexpectedValue(i);\n        }",
    "info" : "SwitchStatement[34835-35714]:SwitchStatement[34835-35714]"
  }, {
    "left" : "case '-':",
    "right" : "case '-':",
    "info" : "SwitchCase[34856-34865]:SwitchCase[34856-34865]"
  }, {
    "left" : "t = _parseNegNumber();",
    "right" : "t = _parseNegNumber();",
    "info" : "ExpressionStatement[34878-34900]:ExpressionStatement[34878-34900]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[34913-34919]:BreakStatement[34913-34919]"
  }, {
    "left" : "case '0':",
    "right" : "case '0':",
    "info" : "SwitchCase[34928-34937]:SwitchCase[34928-34937]"
  }, {
    "left" : "case '1':",
    "right" : "case '1':",
    "info" : "SwitchCase[34946-34955]:SwitchCase[34946-34955]"
  }, {
    "left" : "case '2':",
    "right" : "case '2':",
    "info" : "SwitchCase[34964-34973]:SwitchCase[34964-34973]"
  }, {
    "left" : "case '3':",
    "right" : "case '3':",
    "info" : "SwitchCase[34982-34991]:SwitchCase[34982-34991]"
  }, {
    "left" : "case '4':",
    "right" : "case '4':",
    "info" : "SwitchCase[35000-35009]:SwitchCase[35000-35009]"
  }, {
    "left" : "case '5':",
    "right" : "case '5':",
    "info" : "SwitchCase[35018-35027]:SwitchCase[35018-35027]"
  }, {
    "left" : "case '6':",
    "right" : "case '6':",
    "info" : "SwitchCase[35036-35045]:SwitchCase[35036-35045]"
  }, {
    "left" : "case '7':",
    "right" : "case '7':",
    "info" : "SwitchCase[35054-35063]:SwitchCase[35054-35063]"
  }, {
    "left" : "case '8':",
    "right" : "case '8':",
    "info" : "SwitchCase[35072-35081]:SwitchCase[35072-35081]"
  }, {
    "left" : "case '9':",
    "right" : "case '9':",
    "info" : "SwitchCase[35090-35099]:SwitchCase[35090-35099]"
  }, {
    "left" : "t = _parsePosNumber(i);",
    "right" : "t = _parsePosNumber(i);",
    "info" : "ExpressionStatement[35112-35135]:ExpressionStatement[35112-35135]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[35148-35154]:BreakStatement[35148-35154]"
  }, {
    "left" : "case 'f':",
    "right" : "case 'f':",
    "info" : "SwitchCase[35163-35172]:SwitchCase[35163-35172]"
  }, {
    "left" : "_matchToken(\"false\", 1);",
    "right" : "_matchToken(\"false\", 1);",
    "info" : "ExpressionStatement[35185-35209]:ExpressionStatement[35185-35209]"
  }, {
    "left" : "t = JsonToken.VALUE_FALSE;",
    "right" : "t = JsonToken.VALUE_FALSE;",
    "info" : "ExpressionStatement[35223-35249]:ExpressionStatement[35223-35249]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[35262-35268]:BreakStatement[35262-35268]"
  }, {
    "left" : "case 'n':",
    "right" : "case 'n':",
    "info" : "SwitchCase[35277-35286]:SwitchCase[35277-35286]"
  }, {
    "left" : "_matchToken(\"null\", 1);",
    "right" : "_matchToken(\"null\", 1);",
    "info" : "ExpressionStatement[35299-35322]:ExpressionStatement[35299-35322]"
  }, {
    "left" : "t = JsonToken.VALUE_NULL;",
    "right" : "t = JsonToken.VALUE_NULL;",
    "info" : "ExpressionStatement[35335-35360]:ExpressionStatement[35335-35360]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[35373-35379]:BreakStatement[35373-35379]"
  }, {
    "left" : "case 't':",
    "right" : "case 't':",
    "info" : "SwitchCase[35388-35397]:SwitchCase[35388-35397]"
  }, {
    "left" : "_matchToken(\"true\", 1);",
    "right" : "_matchToken(\"true\", 1);",
    "info" : "ExpressionStatement[35410-35433]:ExpressionStatement[35410-35433]"
  }, {
    "left" : "t = JsonToken.VALUE_TRUE;",
    "right" : "t = JsonToken.VALUE_TRUE;",
    "info" : "ExpressionStatement[35446-35471]:ExpressionStatement[35446-35471]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[35484-35490]:BreakStatement[35484-35490]"
  }, {
    "left" : "case '[':",
    "right" : "case '[':",
    "info" : "SwitchCase[35499-35508]:SwitchCase[35499-35508]"
  }, {
    "left" : "t = JsonToken.START_ARRAY;",
    "right" : "t = JsonToken.START_ARRAY;",
    "info" : "ExpressionStatement[35521-35547]:ExpressionStatement[35521-35547]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[35560-35566]:BreakStatement[35560-35566]"
  }, {
    "left" : "case '{':",
    "right" : "case '{':",
    "info" : "SwitchCase[35575-35584]:SwitchCase[35575-35584]"
  }, {
    "left" : "t = JsonToken.START_OBJECT;",
    "right" : "t = JsonToken.START_OBJECT;",
    "info" : "ExpressionStatement[35597-35624]:ExpressionStatement[35597-35624]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[35637-35643]:BreakStatement[35637-35643]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[35653-35661]:SwitchCase[35653-35661]"
  }, {
    "left" : "t = _handleUnexpectedValue(i);",
    "right" : "t = _handleUnexpectedValue(i);",
    "info" : "ExpressionStatement[35674-35704]:ExpressionStatement[35674-35704]"
  }, {
    "left" : "_nextToken = t;",
    "right" : "_nextToken = t;",
    "info" : "ExpressionStatement[35723-35738]:ExpressionStatement[35723-35738]"
  }, {
    "left" : "return nameStr;",
    "right" : "return nameStr;",
    "info" : "ReturnStatement[35747-35762]:ReturnStatement[35747-35762]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[35849-35856]:Modifier[35849-35856]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[35857-35862]:Modifier[35857-35862]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[35863-35866]:PrimitiveType[35863-35866]"
  }, {
    "left" : "_skipColonFast",
    "right" : "_skipColonFast",
    "info" : "SimpleName[35867-35881]:SimpleName[35867-35881]"
  }, {
    "left" : "int ptr",
    "right" : "int ptr",
    "info" : "SingleVariableDeclaration[35882-35889]:SingleVariableDeclaration[35882-35889]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[35898-35909]:SimpleType[35898-35909]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35914-37483]:Block[35914-37483]"
  }, {
    "left" : "int i = _inputBuffer[ptr++];",
    "right" : "int i = _inputBuffer[ptr++];",
    "info" : "VariableDeclarationStatement[35924-35952]:VariableDeclarationStatement[35924-35952]"
  }, {
    "left" : "if (i == INT_COLON)",
    "right" : "if (i == INT_COLON)",
    "info" : "IfStatement[35961-36674]:IfStatement[35961-36674]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35981-36674]:Block[35981-36674]"
  }, {
    "left" : "i = _inputBuffer[ptr++];",
    "right" : "i = _inputBuffer[ptr++];",
    "info" : "ExpressionStatement[36028-36052]:ExpressionStatement[36028-36052]"
  }, {
    "left" : "if (i > INT_SPACE)",
    "right" : "if (i > INT_SPACE)",
    "info" : "IfStatement[36065-36570]:IfStatement[36065-36570]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36084-36255]:Block[36084-36255]"
  }, {
    "left" : "if (i != INT_SLASH && i != INT_HASH)",
    "right" : "if (i != INT_SLASH && i != INT_HASH)",
    "info" : "IfStatement[36118-36241]:IfStatement[36118-36241]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36155-36241]:Block[36155-36241]"
  }, {
    "left" : "_inputPtr = ptr;",
    "right" : "_inputPtr = ptr;",
    "info" : "ExpressionStatement[36177-36193]:ExpressionStatement[36177-36193]"
  }, {
    "left" : "return i;",
    "right" : "return i;",
    "info" : "ReturnStatement[36214-36223]:ReturnStatement[36214-36223]"
  }, {
    "left" : "if (i == INT_SPACE || i == INT_TAB)",
    "right" : "if (i == INT_SPACE || i == INT_TAB)",
    "info" : "IfStatement[36261-36570]:IfStatement[36261-36570]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36297-36570]:Block[36297-36570]"
  }, {
    "left" : "i = (int) _inputBuffer[ptr++];",
    "right" : "i = (int) _inputBuffer[ptr++];",
    "info" : "ExpressionStatement[36315-36345]:ExpressionStatement[36315-36345]"
  }, {
    "left" : "if (i > INT_SPACE)",
    "right" : "if (i > INT_SPACE)",
    "info" : "IfStatement[36362-36556]:IfStatement[36362-36556]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36381-36556]:Block[36381-36556]"
  }, {
    "left" : "if (i != INT_SLASH && i != INT_HASH)",
    "right" : "if (i != INT_SLASH && i != INT_HASH)",
    "info" : "IfStatement[36403-36538]:IfStatement[36403-36538]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36440-36538]:Block[36440-36538]"
  }, {
    "left" : "_inputPtr = ptr;",
    "right" : "_inputPtr = ptr;",
    "info" : "ExpressionStatement[36466-36482]:ExpressionStatement[36466-36482]"
  }, {
    "left" : "return i;",
    "right" : "return i;",
    "info" : "ReturnStatement[36507-36516]:ReturnStatement[36507-36516]"
  }, {
    "left" : "_inputPtr = ptr-1;",
    "right" : "_inputPtr = ptr-1;",
    "info" : "ExpressionStatement[36583-36601]:ExpressionStatement[36583-36601]"
  }, {
    "left" : "return _skipColon2(true);",
    "right" : "return _skipColon2(true);",
    "info" : "ReturnStatement[36614-36639]:ReturnStatement[36614-36639]"
  }, {
    "left" : "if (i == INT_SPACE || i == INT_TAB)",
    "right" : "if (i == INT_SPACE || i == INT_TAB)",
    "info" : "IfStatement[36683-36767]:IfStatement[36683-36767]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36719-36767]:Block[36719-36767]"
  }, {
    "left" : "i = _inputBuffer[ptr++];",
    "right" : "i = _inputBuffer[ptr++];",
    "info" : "ExpressionStatement[36733-36757]:ExpressionStatement[36733-36757]"
  }, {
    "left" : "if (i == INT_COLON)",
    "right" : "if (i == INT_COLON)",
    "info" : "IfStatement[36776-37415]:IfStatement[36776-37415]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36796-37415]:Block[36796-37415]"
  }, {
    "left" : "i = _inputBuffer[ptr++];",
    "right" : "i = _inputBuffer[ptr++];",
    "info" : "ExpressionStatement[36810-36834]:ExpressionStatement[36810-36834]"
  }, {
    "left" : "if (i > INT_SPACE)",
    "right" : "if (i > INT_SPACE)",
    "info" : "IfStatement[36847-37336]:IfStatement[36847-37336]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36866-37021]:Block[36866-37021]"
  }, {
    "left" : "if (i != INT_SLASH && i != INT_HASH)",
    "right" : "if (i != INT_SLASH && i != INT_HASH)",
    "info" : "IfStatement[36884-37007]:IfStatement[36884-37007]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36921-37007]:Block[36921-37007]"
  }, {
    "left" : "_inputPtr = ptr;",
    "right" : "_inputPtr = ptr;",
    "info" : "ExpressionStatement[36943-36959]:ExpressionStatement[36943-36959]"
  }, {
    "left" : "return i;",
    "right" : "return i;",
    "info" : "ReturnStatement[36980-36989]:ReturnStatement[36980-36989]"
  }, {
    "left" : "if (i == INT_SPACE || i == INT_TAB)",
    "right" : "if (i == INT_SPACE || i == INT_TAB)",
    "info" : "IfStatement[37027-37336]:IfStatement[37027-37336]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37063-37336]:Block[37063-37336]"
  }, {
    "left" : "i = (int) _inputBuffer[ptr++];",
    "right" : "i = (int) _inputBuffer[ptr++];",
    "info" : "ExpressionStatement[37081-37111]:ExpressionStatement[37081-37111]"
  }, {
    "left" : "if (i > INT_SPACE)",
    "right" : "if (i > INT_SPACE)",
    "info" : "IfStatement[37128-37322]:IfStatement[37128-37322]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37147-37322]:Block[37147-37322]"
  }, {
    "left" : "if (i != INT_SLASH && i != INT_HASH)",
    "right" : "if (i != INT_SLASH && i != INT_HASH)",
    "info" : "IfStatement[37169-37304]:IfStatement[37169-37304]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37206-37304]:Block[37206-37304]"
  }, {
    "left" : "_inputPtr = ptr;",
    "right" : "_inputPtr = ptr;",
    "info" : "ExpressionStatement[37232-37248]:ExpressionStatement[37232-37248]"
  }, {
    "left" : "return i;",
    "right" : "return i;",
    "info" : "ReturnStatement[37273-37282]:ReturnStatement[37273-37282]"
  }, {
    "left" : "_inputPtr = ptr-1;",
    "right" : "_inputPtr = ptr-1;",
    "info" : "ExpressionStatement[37349-37367]:ExpressionStatement[37349-37367]"
  }, {
    "left" : "return _skipColon2(true);",
    "right" : "return _skipColon2(true);",
    "info" : "ReturnStatement[37380-37405]:ReturnStatement[37380-37405]"
  }, {
    "left" : "_inputPtr = ptr-1;",
    "right" : "_inputPtr = ptr-1;",
    "info" : "ExpressionStatement[37424-37442]:ExpressionStatement[37424-37442]"
  }, {
    "left" : "return _skipColon2(false);",
    "right" : "return _skipColon2(false);",
    "info" : "ReturnStatement[37451-37477]:ReturnStatement[37451-37477]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[37493-37500]:Modifier[37493-37500]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[37501-37506]:Modifier[37501-37506]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[37507-37511]:PrimitiveType[37507-37511]"
  }, {
    "left" : "_isNextTokenNameYes",
    "right" : "_isNextTokenNameYes",
    "info" : "SimpleName[37512-37531]:SimpleName[37512-37531]"
  }, {
    "left" : "int i",
    "right" : "int i",
    "info" : "SingleVariableDeclaration[37532-37537]:SingleVariableDeclaration[37532-37537]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[37546-37557]:SimpleType[37546-37557]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37562-38708]:Block[37562-38708]"
  }, {
    "left" : "_currToken = JsonToken.FIELD_NAME;",
    "right" : "_currToken = JsonToken.FIELD_NAME;",
    "info" : "ExpressionStatement[37572-37606]:ExpressionStatement[37572-37606]"
  }, {
    "left" : "_updateLocation();",
    "right" : "_updateLocation();",
    "info" : "ExpressionStatement[37615-37633]:ExpressionStatement[37615-37633]"
  }, {
    "left" : "switch (i) {\n        case '\"':\n            _tokenIncomplete = true;\n            _nextToken = JsonToken.VALUE_STRING;\n            return;\n        case '[':\n            _nextToken = JsonToken.START_ARRAY;\n            return;\n        case '{':\n            _nextToken = JsonToken.START_OBJECT;\n            return;\n        case 't':\n            _matchToken(\"true\", 1);\n            _nextToken = JsonToken.VALUE_TRUE;\n            return;\n        case 'f':\n            _matchToken(\"false\", 1);\n            _nextToken = JsonToken.VALUE_FALSE;\n            return;\n        case 'n':\n            _matchToken(\"null\", 1);\n            _nextToken = JsonToken.VALUE_NULL;\n            return;\n        case '-':\n            _nextToken = _parseNegNumber();\n            return;\n        case '0':\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n            _nextToken = _parsePosNumber(i);\n            return;\n        }",
    "right" : "switch (i) {\n        case '\"':\n            _tokenIncomplete = true;\n            _nextToken = JsonToken.VALUE_STRING;\n            return;\n        case '[':\n            _nextToken = JsonToken.START_ARRAY;\n            return;\n        case '{':\n            _nextToken = JsonToken.START_OBJECT;\n            return;\n        case 't':\n            _matchToken(\"true\", 1);\n            _nextToken = JsonToken.VALUE_TRUE;\n            return;\n        case 'f':\n            _matchToken(\"false\", 1);\n            _nextToken = JsonToken.VALUE_FALSE;\n            return;\n        case 'n':\n            _matchToken(\"null\", 1);\n            _nextToken = JsonToken.VALUE_NULL;\n            return;\n        case '-':\n            _nextToken = _parseNegNumber();\n            return;\n        case '0':\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n            _nextToken = _parsePosNumber(i);\n            return;\n        }",
    "info" : "SwitchStatement[37643-38654]:SwitchStatement[37643-38654]"
  }, {
    "left" : "case '\"':",
    "right" : "case '\"':",
    "info" : "SwitchCase[37664-37673]:SwitchCase[37664-37673]"
  }, {
    "left" : "_tokenIncomplete = true;",
    "right" : "_tokenIncomplete = true;",
    "info" : "ExpressionStatement[37686-37710]:ExpressionStatement[37686-37710]"
  }, {
    "left" : "_nextToken = JsonToken.VALUE_STRING;",
    "right" : "_nextToken = JsonToken.VALUE_STRING;",
    "info" : "ExpressionStatement[37723-37759]:ExpressionStatement[37723-37759]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[37772-37779]:ReturnStatement[37772-37779]"
  }, {
    "left" : "case '[':",
    "right" : "case '[':",
    "info" : "SwitchCase[37788-37797]:SwitchCase[37788-37797]"
  }, {
    "left" : "_nextToken = JsonToken.START_ARRAY;",
    "right" : "_nextToken = JsonToken.START_ARRAY;",
    "info" : "ExpressionStatement[37810-37845]:ExpressionStatement[37810-37845]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[37858-37865]:ReturnStatement[37858-37865]"
  }, {
    "left" : "case '{':",
    "right" : "case '{':",
    "info" : "SwitchCase[37874-37883]:SwitchCase[37874-37883]"
  }, {
    "left" : "_nextToken = JsonToken.START_OBJECT;",
    "right" : "_nextToken = JsonToken.START_OBJECT;",
    "info" : "ExpressionStatement[37896-37932]:ExpressionStatement[37896-37932]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[37945-37952]:ReturnStatement[37945-37952]"
  }, {
    "left" : "case 't':",
    "right" : "case 't':",
    "info" : "SwitchCase[37961-37970]:SwitchCase[37961-37970]"
  }, {
    "left" : "_matchToken(\"true\", 1);",
    "right" : "_matchToken(\"true\", 1);",
    "info" : "ExpressionStatement[37983-38006]:ExpressionStatement[37983-38006]"
  }, {
    "left" : "_nextToken = JsonToken.VALUE_TRUE;",
    "right" : "_nextToken = JsonToken.VALUE_TRUE;",
    "info" : "ExpressionStatement[38019-38053]:ExpressionStatement[38019-38053]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[38066-38073]:ReturnStatement[38066-38073]"
  }, {
    "left" : "case 'f':",
    "right" : "case 'f':",
    "info" : "SwitchCase[38082-38091]:SwitchCase[38082-38091]"
  }, {
    "left" : "_matchToken(\"false\", 1);",
    "right" : "_matchToken(\"false\", 1);",
    "info" : "ExpressionStatement[38104-38128]:ExpressionStatement[38104-38128]"
  }, {
    "left" : "_nextToken = JsonToken.VALUE_FALSE;",
    "right" : "_nextToken = JsonToken.VALUE_FALSE;",
    "info" : "ExpressionStatement[38141-38176]:ExpressionStatement[38141-38176]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[38189-38196]:ReturnStatement[38189-38196]"
  }, {
    "left" : "case 'n':",
    "right" : "case 'n':",
    "info" : "SwitchCase[38205-38214]:SwitchCase[38205-38214]"
  }, {
    "left" : "_matchToken(\"null\", 1);",
    "right" : "_matchToken(\"null\", 1);",
    "info" : "ExpressionStatement[38227-38250]:ExpressionStatement[38227-38250]"
  }, {
    "left" : "_nextToken = JsonToken.VALUE_NULL;",
    "right" : "_nextToken = JsonToken.VALUE_NULL;",
    "info" : "ExpressionStatement[38263-38297]:ExpressionStatement[38263-38297]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[38310-38317]:ReturnStatement[38310-38317]"
  }, {
    "left" : "case '-':",
    "right" : "case '-':",
    "info" : "SwitchCase[38326-38335]:SwitchCase[38326-38335]"
  }, {
    "left" : "_nextToken = _parseNegNumber();",
    "right" : "_nextToken = _parseNegNumber();",
    "info" : "ExpressionStatement[38348-38379]:ExpressionStatement[38348-38379]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[38392-38399]:ReturnStatement[38392-38399]"
  }, {
    "left" : "case '0':",
    "right" : "case '0':",
    "info" : "SwitchCase[38408-38417]:SwitchCase[38408-38417]"
  }, {
    "left" : "case '1':",
    "right" : "case '1':",
    "info" : "SwitchCase[38426-38435]:SwitchCase[38426-38435]"
  }, {
    "left" : "case '2':",
    "right" : "case '2':",
    "info" : "SwitchCase[38444-38453]:SwitchCase[38444-38453]"
  }, {
    "left" : "case '3':",
    "right" : "case '3':",
    "info" : "SwitchCase[38462-38471]:SwitchCase[38462-38471]"
  }, {
    "left" : "case '4':",
    "right" : "case '4':",
    "info" : "SwitchCase[38480-38489]:SwitchCase[38480-38489]"
  }, {
    "left" : "case '5':",
    "right" : "case '5':",
    "info" : "SwitchCase[38498-38507]:SwitchCase[38498-38507]"
  }, {
    "left" : "case '6':",
    "right" : "case '6':",
    "info" : "SwitchCase[38516-38525]:SwitchCase[38516-38525]"
  }, {
    "left" : "case '7':",
    "right" : "case '7':",
    "info" : "SwitchCase[38534-38543]:SwitchCase[38534-38543]"
  }, {
    "left" : "case '8':",
    "right" : "case '8':",
    "info" : "SwitchCase[38552-38561]:SwitchCase[38552-38561]"
  }, {
    "left" : "case '9':",
    "right" : "case '9':",
    "info" : "SwitchCase[38570-38579]:SwitchCase[38570-38579]"
  }, {
    "left" : "_nextToken = _parsePosNumber(i);",
    "right" : "_nextToken = _parsePosNumber(i);",
    "info" : "ExpressionStatement[38592-38624]:ExpressionStatement[38592-38624]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[38637-38644]:ReturnStatement[38637-38644]"
  }, {
    "left" : "_nextToken = _handleUnexpectedValue(i);",
    "right" : "_nextToken = _handleUnexpectedValue(i);",
    "info" : "ExpressionStatement[38663-38702]:ExpressionStatement[38663-38702]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[38714-38721]:Modifier[38714-38721]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[38722-38727]:Modifier[38722-38727]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[38728-38735]:PrimitiveType[38728-38735]"
  }, {
    "left" : "_isNextTokenNameMaybe",
    "right" : "_isNextTokenNameMaybe",
    "info" : "SimpleName[38736-38757]:SimpleName[38736-38757]"
  }, {
    "left" : "int i",
    "right" : "int i",
    "info" : "SingleVariableDeclaration[38758-38763]:SingleVariableDeclaration[38758-38763]"
  }, {
    "left" : "SerializableString str",
    "right" : "SerializableString str",
    "info" : "SingleVariableDeclaration[38765-38787]:SingleVariableDeclaration[38765-38787]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[38796-38807]:SimpleType[38796-38807]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38812-40304]:Block[38812-40304]"
  }, {
    "left" : "String n = _parseName(i);",
    "right" : "String n = _parseName(i);",
    "info" : "VariableDeclarationStatement[38881-38906]:VariableDeclarationStatement[38881-38906]"
  }, {
    "left" : "_parsingContext.setCurrentName(n);",
    "right" : "_parsingContext.setCurrentName(n);",
    "info" : "ExpressionStatement[38915-38949]:ExpressionStatement[38915-38949]"
  }, {
    "left" : "final boolean match = n.equals(str.getValue());",
    "right" : "final boolean match = n.equals(str.getValue());",
    "info" : "VariableDeclarationStatement[38958-39005]:VariableDeclarationStatement[38958-39005]"
  }, {
    "left" : "_currToken = JsonToken.FIELD_NAME;",
    "right" : "_currToken = JsonToken.FIELD_NAME;",
    "info" : "ExpressionStatement[39014-39048]:ExpressionStatement[39014-39048]"
  }, {
    "left" : "i = _skipColon();",
    "right" : "i = _skipColon();",
    "info" : "ExpressionStatement[39057-39074]:ExpressionStatement[39057-39074]"
  }, {
    "left" : "_updateLocation();",
    "right" : "_updateLocation();",
    "info" : "ExpressionStatement[39083-39101]:ExpressionStatement[39083-39101]"
  }, {
    "left" : "if (i == INT_QUOTE)",
    "right" : "if (i == INT_QUOTE)",
    "info" : "IfStatement[39200-39343]:IfStatement[39200-39343]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39220-39343]:Block[39220-39343]"
  }, {
    "left" : "_tokenIncomplete = true;",
    "right" : "_tokenIncomplete = true;",
    "info" : "ExpressionStatement[39234-39258]:ExpressionStatement[39234-39258]"
  }, {
    "left" : "_nextToken = JsonToken.VALUE_STRING;",
    "right" : "_nextToken = JsonToken.VALUE_STRING;",
    "info" : "ExpressionStatement[39271-39307]:ExpressionStatement[39271-39307]"
  }, {
    "left" : "return match;",
    "right" : "return match;",
    "info" : "ReturnStatement[39320-39333]:ReturnStatement[39320-39333]"
  }, {
    "left" : "JsonToken t;",
    "right" : "JsonToken t;",
    "info" : "VariableDeclarationStatement[39352-39364]:VariableDeclarationStatement[39352-39364]"
  }, {
    "left" : "switch (i) {\n        case '[':\n            t = JsonToken.START_ARRAY;\n            break;\n        case '{':\n            t = JsonToken.START_OBJECT;\n            break;\n        case 't':\n            _matchToken(\"true\", 1);\n            t = JsonToken.VALUE_TRUE;\n            break;\n        case 'f':\n            _matchToken(\"false\", 1);\n             t = JsonToken.VALUE_FALSE;\n            break;\n        case 'n':\n            _matchToken(\"null\", 1);\n            t = JsonToken.VALUE_NULL;\n            break;\n        case '-':\n            t = _parseNegNumber();\n            break;\n        case '0':\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n            t = _parsePosNumber(i);\n            break;\n        default:\n            t = _handleUnexpectedValue(i);\n        }",
    "right" : "switch (i) {\n        case '[':\n            t = JsonToken.START_ARRAY;\n            break;\n        case '{':\n            t = JsonToken.START_OBJECT;\n            break;\n        case 't':\n            _matchToken(\"true\", 1);\n            t = JsonToken.VALUE_TRUE;\n            break;\n        case 'f':\n            _matchToken(\"false\", 1);\n             t = JsonToken.VALUE_FALSE;\n            break;\n        case 'n':\n            _matchToken(\"null\", 1);\n            t = JsonToken.VALUE_NULL;\n            break;\n        case '-':\n            t = _parseNegNumber();\n            break;\n        case '0':\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n            t = _parsePosNumber(i);\n            break;\n        default:\n            t = _handleUnexpectedValue(i);\n        }",
    "info" : "SwitchStatement[39374-40252]:SwitchStatement[39374-40252]"
  }, {
    "left" : "case '[':",
    "right" : "case '[':",
    "info" : "SwitchCase[39395-39404]:SwitchCase[39395-39404]"
  }, {
    "left" : "t = JsonToken.START_ARRAY;",
    "right" : "t = JsonToken.START_ARRAY;",
    "info" : "ExpressionStatement[39417-39443]:ExpressionStatement[39417-39443]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[39456-39462]:BreakStatement[39456-39462]"
  }, {
    "left" : "case '{':",
    "right" : "case '{':",
    "info" : "SwitchCase[39471-39480]:SwitchCase[39471-39480]"
  }, {
    "left" : "t = JsonToken.START_OBJECT;",
    "right" : "t = JsonToken.START_OBJECT;",
    "info" : "ExpressionStatement[39493-39520]:ExpressionStatement[39493-39520]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[39533-39539]:BreakStatement[39533-39539]"
  }, {
    "left" : "case 't':",
    "right" : "case 't':",
    "info" : "SwitchCase[39548-39557]:SwitchCase[39548-39557]"
  }, {
    "left" : "_matchToken(\"true\", 1);",
    "right" : "_matchToken(\"true\", 1);",
    "info" : "ExpressionStatement[39570-39593]:ExpressionStatement[39570-39593]"
  }, {
    "left" : "t = JsonToken.VALUE_TRUE;",
    "right" : "t = JsonToken.VALUE_TRUE;",
    "info" : "ExpressionStatement[39606-39631]:ExpressionStatement[39606-39631]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[39644-39650]:BreakStatement[39644-39650]"
  }, {
    "left" : "case 'f':",
    "right" : "case 'f':",
    "info" : "SwitchCase[39659-39668]:SwitchCase[39659-39668]"
  }, {
    "left" : "_matchToken(\"false\", 1);",
    "right" : "_matchToken(\"false\", 1);",
    "info" : "ExpressionStatement[39681-39705]:ExpressionStatement[39681-39705]"
  }, {
    "left" : "t = JsonToken.VALUE_FALSE;",
    "right" : "t = JsonToken.VALUE_FALSE;",
    "info" : "ExpressionStatement[39719-39745]:ExpressionStatement[39719-39745]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[39758-39764]:BreakStatement[39758-39764]"
  }, {
    "left" : "case 'n':",
    "right" : "case 'n':",
    "info" : "SwitchCase[39773-39782]:SwitchCase[39773-39782]"
  }, {
    "left" : "_matchToken(\"null\", 1);",
    "right" : "_matchToken(\"null\", 1);",
    "info" : "ExpressionStatement[39795-39818]:ExpressionStatement[39795-39818]"
  }, {
    "left" : "t = JsonToken.VALUE_NULL;",
    "right" : "t = JsonToken.VALUE_NULL;",
    "info" : "ExpressionStatement[39831-39856]:ExpressionStatement[39831-39856]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[39869-39875]:BreakStatement[39869-39875]"
  }, {
    "left" : "case '-':",
    "right" : "case '-':",
    "info" : "SwitchCase[39884-39893]:SwitchCase[39884-39893]"
  }, {
    "left" : "t = _parseNegNumber();",
    "right" : "t = _parseNegNumber();",
    "info" : "ExpressionStatement[39906-39928]:ExpressionStatement[39906-39928]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[39941-39947]:BreakStatement[39941-39947]"
  }, {
    "left" : "case '0':",
    "right" : "case '0':",
    "info" : "SwitchCase[39956-39965]:SwitchCase[39956-39965]"
  }, {
    "left" : "case '1':",
    "right" : "case '1':",
    "info" : "SwitchCase[39974-39983]:SwitchCase[39974-39983]"
  }, {
    "left" : "case '2':",
    "right" : "case '2':",
    "info" : "SwitchCase[39992-40001]:SwitchCase[39992-40001]"
  }, {
    "left" : "case '3':",
    "right" : "case '3':",
    "info" : "SwitchCase[40010-40019]:SwitchCase[40010-40019]"
  }, {
    "left" : "case '4':",
    "right" : "case '4':",
    "info" : "SwitchCase[40028-40037]:SwitchCase[40028-40037]"
  }, {
    "left" : "case '5':",
    "right" : "case '5':",
    "info" : "SwitchCase[40046-40055]:SwitchCase[40046-40055]"
  }, {
    "left" : "case '6':",
    "right" : "case '6':",
    "info" : "SwitchCase[40064-40073]:SwitchCase[40064-40073]"
  }, {
    "left" : "case '7':",
    "right" : "case '7':",
    "info" : "SwitchCase[40082-40091]:SwitchCase[40082-40091]"
  }, {
    "left" : "case '8':",
    "right" : "case '8':",
    "info" : "SwitchCase[40100-40109]:SwitchCase[40100-40109]"
  }, {
    "left" : "case '9':",
    "right" : "case '9':",
    "info" : "SwitchCase[40118-40127]:SwitchCase[40118-40127]"
  }, {
    "left" : "t = _parsePosNumber(i);",
    "right" : "t = _parsePosNumber(i);",
    "info" : "ExpressionStatement[40140-40163]:ExpressionStatement[40140-40163]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[40176-40182]:BreakStatement[40176-40182]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[40191-40199]:SwitchCase[40191-40199]"
  }, {
    "left" : "t = _handleUnexpectedValue(i);",
    "right" : "t = _handleUnexpectedValue(i);",
    "info" : "ExpressionStatement[40212-40242]:ExpressionStatement[40212-40242]"
  }, {
    "left" : "_nextToken = t;",
    "right" : "_nextToken = t;",
    "info" : "ExpressionStatement[40261-40276]:ExpressionStatement[40261-40276]"
  }, {
    "left" : "return match;",
    "right" : "return match;",
    "info" : "ReturnStatement[40285-40298]:ReturnStatement[40285-40298]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[40310-40319]:MarkerAnnotation[40310-40319]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[40324-40330]:Modifier[40324-40330]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[40331-40337]:SimpleType[40331-40337]"
  }, {
    "left" : "nextTextValue",
    "right" : "nextTextValue",
    "info" : "SimpleName[40338-40351]:SimpleName[40338-40351]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[40361-40372]:SimpleType[40361-40372]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40377-41444]:Block[40377-41444]"
  }, {
    "left" : "if (_currToken == JsonToken.FIELD_NAME)",
    "right" : "if (_currToken == JsonToken.FIELD_NAME)",
    "info" : "IfStatement[40468-41315]:IfStatement[40468-41315]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40508-41315]:Block[40508-41315]"
  }, {
    "left" : "_nameCopied = false;",
    "right" : "_nameCopied = false;",
    "info" : "ExpressionStatement[40561-40581]:ExpressionStatement[40561-40581]"
  }, {
    "left" : "JsonToken t = _nextToken;",
    "right" : "JsonToken t = _nextToken;",
    "info" : "VariableDeclarationStatement[40594-40619]:VariableDeclarationStatement[40594-40619]"
  }, {
    "left" : "_nextToken = null;",
    "right" : "_nextToken = null;",
    "info" : "ExpressionStatement[40632-40650]:ExpressionStatement[40632-40650]"
  }, {
    "left" : "_currToken = t;",
    "right" : "_currToken = t;",
    "info" : "ExpressionStatement[40663-40678]:ExpressionStatement[40663-40678]"
  }, {
    "left" : "if (t == JsonToken.VALUE_STRING)",
    "right" : "if (t == JsonToken.VALUE_STRING)",
    "info" : "IfStatement[40691-40951]:IfStatement[40691-40951]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40724-40951]:Block[40724-40951]"
  }, {
    "left" : "if (_tokenIncomplete)",
    "right" : "if (_tokenIncomplete)",
    "info" : "IfStatement[40742-40882]:IfStatement[40742-40882]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40764-40882]:Block[40764-40882]"
  }, {
    "left" : "_tokenIncomplete = false;",
    "right" : "_tokenIncomplete = false;",
    "info" : "ExpressionStatement[40786-40811]:ExpressionStatement[40786-40811]"
  }, {
    "left" : "return _finishAndReturnString();",
    "right" : "return _finishAndReturnString();",
    "info" : "ReturnStatement[40832-40864]:ReturnStatement[40832-40864]"
  }, {
    "left" : "return _textBuffer.contentsAsString();",
    "right" : "return _textBuffer.contentsAsString();",
    "info" : "ReturnStatement[40899-40937]:ReturnStatement[40899-40937]"
  }, {
    "left" : "if (t == JsonToken.START_ARRAY)",
    "right" : "if (t == JsonToken.START_ARRAY)",
    "info" : "IfStatement[40964-41280]:IfStatement[40964-41280]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40996-41118]:Block[40996-41118]"
  }, {
    "left" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
    "right" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
    "info" : "ExpressionStatement[41014-41104]:ExpressionStatement[41014-41104]"
  }, {
    "left" : "if (t == JsonToken.START_OBJECT)",
    "right" : "if (t == JsonToken.START_OBJECT)",
    "info" : "IfStatement[41124-41280]:IfStatement[41124-41280]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41157-41280]:Block[41157-41280]"
  }, {
    "left" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
    "right" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
    "info" : "ExpressionStatement[41175-41266]:ExpressionStatement[41175-41266]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[41293-41305]:ReturnStatement[41293-41305]"
  }, {
    "left" : "return (nextToken() == JsonToken.VALUE_STRING) ? getText() : null;",
    "right" : "return (nextToken() == JsonToken.VALUE_STRING) ? getText() : null;",
    "info" : "ReturnStatement[41372-41438]:ReturnStatement[41372-41438]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[41450-41459]:MarkerAnnotation[41450-41459]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[41464-41470]:Modifier[41464-41470]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[41471-41474]:PrimitiveType[41471-41474]"
  }, {
    "left" : "nextIntValue",
    "right" : "nextIntValue",
    "info" : "SimpleName[41475-41487]:SimpleName[41475-41487]"
  }, {
    "left" : "int defaultValue",
    "right" : "int defaultValue",
    "info" : "SingleVariableDeclaration[41488-41504]:SingleVariableDeclaration[41488-41504]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[41513-41524]:SimpleType[41513-41524]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41529-42450]:Block[41529-42450]"
  }, {
    "left" : "if (_currToken == JsonToken.FIELD_NAME)",
    "right" : "if (_currToken == JsonToken.FIELD_NAME)",
    "info" : "IfStatement[41620-42305]:IfStatement[41620-42305]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41660-42305]:Block[41660-42305]"
  }, {
    "left" : "_nameCopied = false;",
    "right" : "_nameCopied = false;",
    "info" : "ExpressionStatement[41713-41733]:ExpressionStatement[41713-41733]"
  }, {
    "left" : "JsonToken t = _nextToken;",
    "right" : "JsonToken t = _nextToken;",
    "info" : "VariableDeclarationStatement[41746-41771]:VariableDeclarationStatement[41746-41771]"
  }, {
    "left" : "_nextToken = null;",
    "right" : "_nextToken = null;",
    "info" : "ExpressionStatement[41784-41802]:ExpressionStatement[41784-41802]"
  }, {
    "left" : "_currToken = t;",
    "right" : "_currToken = t;",
    "info" : "ExpressionStatement[41815-41830]:ExpressionStatement[41815-41830]"
  }, {
    "left" : "if (t == JsonToken.VALUE_NUMBER_INT)",
    "right" : "if (t == JsonToken.VALUE_NUMBER_INT)",
    "info" : "IfStatement[41843-41933]:IfStatement[41843-41933]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41880-41933]:Block[41880-41933]"
  }, {
    "left" : "return getIntValue();",
    "right" : "return getIntValue();",
    "info" : "ReturnStatement[41898-41919]:ReturnStatement[41898-41919]"
  }, {
    "left" : "if (t == JsonToken.START_ARRAY)",
    "right" : "if (t == JsonToken.START_ARRAY)",
    "info" : "IfStatement[41946-42262]:IfStatement[41946-42262]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41978-42100]:Block[41978-42100]"
  }, {
    "left" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
    "right" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
    "info" : "ExpressionStatement[41996-42086]:ExpressionStatement[41996-42086]"
  }, {
    "left" : "if (t == JsonToken.START_OBJECT)",
    "right" : "if (t == JsonToken.START_OBJECT)",
    "info" : "IfStatement[42106-42262]:IfStatement[42106-42262]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42139-42262]:Block[42139-42262]"
  }, {
    "left" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
    "right" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
    "info" : "ExpressionStatement[42157-42248]:ExpressionStatement[42157-42248]"
  }, {
    "left" : "return defaultValue;",
    "right" : "return defaultValue;",
    "info" : "ReturnStatement[42275-42295]:ReturnStatement[42275-42295]"
  }, {
    "left" : "return (nextToken() == JsonToken.VALUE_NUMBER_INT) ? getIntValue() : defaultValue;",
    "right" : "return (nextToken() == JsonToken.VALUE_NUMBER_INT) ? getIntValue() : defaultValue;",
    "info" : "ReturnStatement[42362-42444]:ReturnStatement[42362-42444]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[42456-42465]:MarkerAnnotation[42456-42465]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[42470-42476]:Modifier[42470-42476]"
  }, {
    "left" : "long",
    "right" : "long",
    "info" : "PrimitiveType[42477-42481]:PrimitiveType[42477-42481]"
  }, {
    "left" : "nextLongValue",
    "right" : "nextLongValue",
    "info" : "SimpleName[42482-42495]:SimpleName[42482-42495]"
  }, {
    "left" : "long defaultValue",
    "right" : "long defaultValue",
    "info" : "SingleVariableDeclaration[42496-42513]:SingleVariableDeclaration[42496-42513]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[42522-42533]:SimpleType[42522-42533]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42538-43461]:Block[42538-43461]"
  }, {
    "left" : "if (_currToken == JsonToken.FIELD_NAME)",
    "right" : "if (_currToken == JsonToken.FIELD_NAME)",
    "info" : "IfStatement[42629-43315]:IfStatement[42629-43315]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42669-43315]:Block[42669-43315]"
  }, {
    "left" : "_nameCopied = false;",
    "right" : "_nameCopied = false;",
    "info" : "ExpressionStatement[42722-42742]:ExpressionStatement[42722-42742]"
  }, {
    "left" : "JsonToken t = _nextToken;",
    "right" : "JsonToken t = _nextToken;",
    "info" : "VariableDeclarationStatement[42755-42780]:VariableDeclarationStatement[42755-42780]"
  }, {
    "left" : "_nextToken = null;",
    "right" : "_nextToken = null;",
    "info" : "ExpressionStatement[42793-42811]:ExpressionStatement[42793-42811]"
  }, {
    "left" : "_currToken = t;",
    "right" : "_currToken = t;",
    "info" : "ExpressionStatement[42824-42839]:ExpressionStatement[42824-42839]"
  }, {
    "left" : "if (t == JsonToken.VALUE_NUMBER_INT)",
    "right" : "if (t == JsonToken.VALUE_NUMBER_INT)",
    "info" : "IfStatement[42852-42943]:IfStatement[42852-42943]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42889-42943]:Block[42889-42943]"
  }, {
    "left" : "return getLongValue();",
    "right" : "return getLongValue();",
    "info" : "ReturnStatement[42907-42929]:ReturnStatement[42907-42929]"
  }, {
    "left" : "if (t == JsonToken.START_ARRAY)",
    "right" : "if (t == JsonToken.START_ARRAY)",
    "info" : "IfStatement[42956-43272]:IfStatement[42956-43272]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42988-43110]:Block[42988-43110]"
  }, {
    "left" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
    "right" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
    "info" : "ExpressionStatement[43006-43096]:ExpressionStatement[43006-43096]"
  }, {
    "left" : "if (t == JsonToken.START_OBJECT)",
    "right" : "if (t == JsonToken.START_OBJECT)",
    "info" : "IfStatement[43116-43272]:IfStatement[43116-43272]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43149-43272]:Block[43149-43272]"
  }, {
    "left" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
    "right" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
    "info" : "ExpressionStatement[43167-43258]:ExpressionStatement[43167-43258]"
  }, {
    "left" : "return defaultValue;",
    "right" : "return defaultValue;",
    "info" : "ReturnStatement[43285-43305]:ReturnStatement[43285-43305]"
  }, {
    "left" : "return (nextToken() == JsonToken.VALUE_NUMBER_INT) ? getLongValue() : defaultValue;",
    "right" : "return (nextToken() == JsonToken.VALUE_NUMBER_INT) ? getLongValue() : defaultValue;",
    "info" : "ReturnStatement[43372-43455]:ReturnStatement[43372-43455]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[43467-43476]:MarkerAnnotation[43467-43476]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[43481-43487]:Modifier[43481-43487]"
  }, {
    "left" : "Boolean",
    "right" : "Boolean",
    "info" : "SimpleType[43488-43495]:SimpleType[43488-43495]"
  }, {
    "left" : "nextBooleanValue",
    "right" : "nextBooleanValue",
    "info" : "SimpleName[43496-43512]:SimpleName[43496-43512]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[43522-43533]:SimpleType[43522-43533]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43538-44630]:Block[43538-44630]"
  }, {
    "left" : "if (_currToken == JsonToken.FIELD_NAME)",
    "right" : "if (_currToken == JsonToken.FIELD_NAME)",
    "info" : "IfStatement[43629-44397]:IfStatement[43629-44397]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43669-44397]:Block[43669-44397]"
  }, {
    "left" : "_nameCopied = false;",
    "right" : "_nameCopied = false;",
    "info" : "ExpressionStatement[43722-43742]:ExpressionStatement[43722-43742]"
  }, {
    "left" : "JsonToken t = _nextToken;",
    "right" : "JsonToken t = _nextToken;",
    "info" : "VariableDeclarationStatement[43755-43780]:VariableDeclarationStatement[43755-43780]"
  }, {
    "left" : "_nextToken = null;",
    "right" : "_nextToken = null;",
    "info" : "ExpressionStatement[43793-43811]:ExpressionStatement[43793-43811]"
  }, {
    "left" : "_currToken = t;",
    "right" : "_currToken = t;",
    "info" : "ExpressionStatement[43824-43839]:ExpressionStatement[43824-43839]"
  }, {
    "left" : "if (t == JsonToken.VALUE_TRUE)",
    "right" : "if (t == JsonToken.VALUE_TRUE)",
    "info" : "IfStatement[43852-43935]:IfStatement[43852-43935]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43883-43935]:Block[43883-43935]"
  }, {
    "left" : "return Boolean.TRUE;",
    "right" : "return Boolean.TRUE;",
    "info" : "ReturnStatement[43901-43921]:ReturnStatement[43901-43921]"
  }, {
    "left" : "if (t == JsonToken.VALUE_FALSE)",
    "right" : "if (t == JsonToken.VALUE_FALSE)",
    "info" : "IfStatement[43948-44033]:IfStatement[43948-44033]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43980-44033]:Block[43980-44033]"
  }, {
    "left" : "return Boolean.FALSE;",
    "right" : "return Boolean.FALSE;",
    "info" : "ReturnStatement[43998-44019]:ReturnStatement[43998-44019]"
  }, {
    "left" : "if (t == JsonToken.START_ARRAY)",
    "right" : "if (t == JsonToken.START_ARRAY)",
    "info" : "IfStatement[44046-44362]:IfStatement[44046-44362]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44078-44200]:Block[44078-44200]"
  }, {
    "left" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
    "right" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
    "info" : "ExpressionStatement[44096-44186]:ExpressionStatement[44096-44186]"
  }, {
    "left" : "if (t == JsonToken.START_OBJECT)",
    "right" : "if (t == JsonToken.START_OBJECT)",
    "info" : "IfStatement[44206-44362]:IfStatement[44206-44362]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44239-44362]:Block[44239-44362]"
  }, {
    "left" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
    "right" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
    "info" : "ExpressionStatement[44257-44348]:ExpressionStatement[44257-44348]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[44375-44387]:ReturnStatement[44375-44387]"
  }, {
    "left" : "JsonToken t = nextToken();",
    "right" : "JsonToken t = nextToken();",
    "info" : "VariableDeclarationStatement[44407-44433]:VariableDeclarationStatement[44407-44433]"
  }, {
    "left" : "if (t == JsonToken.VALUE_TRUE)",
    "right" : "if (t == JsonToken.VALUE_TRUE)",
    "info" : "IfStatement[44442-44517]:IfStatement[44442-44517]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44473-44517]:Block[44473-44517]"
  }, {
    "left" : "return Boolean.TRUE;",
    "right" : "return Boolean.TRUE;",
    "info" : "ReturnStatement[44487-44507]:ReturnStatement[44487-44507]"
  }, {
    "left" : "if (t == JsonToken.VALUE_FALSE)",
    "right" : "if (t == JsonToken.VALUE_FALSE)",
    "info" : "IfStatement[44526-44603]:IfStatement[44526-44603]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44558-44603]:Block[44558-44603]"
  }, {
    "left" : "return Boolean.FALSE;",
    "right" : "return Boolean.FALSE;",
    "info" : "ReturnStatement[44572-44593]:ReturnStatement[44572-44593]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[44612-44624]:ReturnStatement[44612-44624]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[45599-45608]:Modifier[45599-45608]"
  }, {
    "left" : "JsonToken",
    "right" : "JsonToken",
    "info" : "SimpleType[45609-45618]:SimpleType[45609-45618]"
  }, {
    "left" : "_parsePosNumber",
    "right" : "_parsePosNumber",
    "info" : "SimpleName[45619-45634]:SimpleName[45619-45634]"
  }, {
    "left" : "int c",
    "right" : "int c",
    "info" : "SingleVariableDeclaration[45635-45640]:SingleVariableDeclaration[45635-45640]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[45649-45660]:SimpleType[45649-45660]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45665-47181]:Block[45665-47181]"
  }, {
    "left" : "char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();",
    "right" : "char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();",
    "info" : "VariableDeclarationStatement[45675-45731]:VariableDeclarationStatement[45675-45731]"
  }, {
    "left" : "if (c == INT_0)",
    "right" : "if (c == INT_0)",
    "info" : "IfStatement[45821-45890]:IfStatement[45821-45890]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45837-45890]:Block[45837-45890]"
  }, {
    "left" : "c = _verifyNoLeadingZeroes();",
    "right" : "c = _verifyNoLeadingZeroes();",
    "info" : "ExpressionStatement[45851-45880]:ExpressionStatement[45851-45880]"
  }, {
    "left" : "outBuf[0] = (char) c;",
    "right" : "outBuf[0] = (char) c;",
    "info" : "ExpressionStatement[45956-45977]:ExpressionStatement[45956-45977]"
  }, {
    "left" : "int intLen = 1;",
    "right" : "int intLen = 1;",
    "info" : "VariableDeclarationStatement[45986-46001]:VariableDeclarationStatement[45986-46001]"
  }, {
    "left" : "int outPtr = 1;",
    "right" : "int outPtr = 1;",
    "info" : "VariableDeclarationStatement[46010-46025]:VariableDeclarationStatement[46010-46025]"
  }, {
    "left" : "int end = _inputPtr + outBuf.length - 1;",
    "right" : "int end = _inputPtr + outBuf.length - 1;",
    "info" : "VariableDeclarationStatement[46146-46186]:VariableDeclarationStatement[46146-46186]"
  }, {
    "left" : "if (end > _inputEnd)",
    "right" : "if (end > _inputEnd)",
    "info" : "IfStatement[46210-46271]:IfStatement[46210-46271]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46231-46271]:Block[46231-46271]"
  }, {
    "left" : "end = _inputEnd;",
    "right" : "end = _inputEnd;",
    "info" : "ExpressionStatement[46245-46261]:ExpressionStatement[46245-46261]"
  }, {
    "left" : "while (true)",
    "right" : "while (true)",
    "info" : "WhileStatement[46333-46708]:WhileStatement[46333-46708]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46346-46708]:Block[46346-46708]"
  }, {
    "left" : "if (_inputPtr >= end)",
    "right" : "if (_inputPtr >= end)",
    "info" : "IfStatement[46360-46500]:IfStatement[46360-46500]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46382-46500]:Block[46382-46500]"
  }, {
    "left" : "return _parseNumber2(outBuf, outPtr, false, intLen);",
    "right" : "return _parseNumber2(outBuf, outPtr, false, intLen);",
    "info" : "ReturnStatement[46434-46486]:ReturnStatement[46434-46486]"
  }, {
    "left" : "c = (int) _inputBuffer[_inputPtr++] & 0xFF;",
    "right" : "c = (int) _inputBuffer[_inputPtr++] & 0xFF;",
    "info" : "ExpressionStatement[46513-46556]:ExpressionStatement[46513-46556]"
  }, {
    "left" : "if (c < INT_0 || c > INT_9)",
    "right" : "if (c < INT_0 || c > INT_9)",
    "info" : "IfStatement[46569-46635]:IfStatement[46569-46635]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46597-46635]:Block[46597-46635]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[46615-46621]:BreakStatement[46615-46621]"
  }, {
    "left" : "++intLen;",
    "right" : "++intLen;",
    "info" : "ExpressionStatement[46648-46657]:ExpressionStatement[46648-46657]"
  }, {
    "left" : "outBuf[outPtr++] = (char) c;",
    "right" : "outBuf[outPtr++] = (char) c;",
    "info" : "ExpressionStatement[46670-46698]:ExpressionStatement[46670-46698]"
  }, {
    "left" : "if (c == '.' || c == 'e' || c == 'E')",
    "right" : "if (c == '.' || c == 'e' || c == 'E')",
    "info" : "IfStatement[46717-46832]:IfStatement[46717-46832]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46755-46832]:Block[46755-46832]"
  }, {
    "left" : "return _parseFloat(outBuf, outPtr, c, false, intLen);",
    "right" : "return _parseFloat(outBuf, outPtr, c, false, intLen);",
    "info" : "ReturnStatement[46769-46822]:ReturnStatement[46769-46822]"
  }, {
    "left" : "--_inputPtr;",
    "right" : "--_inputPtr;",
    "info" : "ExpressionStatement[46841-46853]:ExpressionStatement[46841-46853]"
  }, {
    "left" : "_textBuffer.setCurrentLength(outPtr);",
    "right" : "_textBuffer.setCurrentLength(outPtr);",
    "info" : "ExpressionStatement[46904-46941]:ExpressionStatement[46904-46941]"
  }, {
    "left" : "if (_parsingContext.inRoot())",
    "right" : "if (_parsingContext.inRoot())",
    "info" : "IfStatement[47028-47102]:IfStatement[47028-47102]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47058-47102]:Block[47058-47102]"
  }, {
    "left" : "_verifyRootSpace(c);",
    "right" : "_verifyRootSpace(c);",
    "info" : "ExpressionStatement[47072-47092]:ExpressionStatement[47072-47092]"
  }, {
    "left" : "return resetInt(false, intLen);",
    "right" : "return resetInt(false, intLen);",
    "info" : "ReturnStatement[47144-47175]:ReturnStatement[47144-47175]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[47191-47200]:Modifier[47191-47200]"
  }, {
    "left" : "JsonToken",
    "right" : "JsonToken",
    "info" : "SimpleType[47201-47210]:SimpleType[47201-47210]"
  }, {
    "left" : "_parseNegNumber",
    "right" : "_parseNegNumber",
    "info" : "SimpleName[47211-47226]:SimpleName[47211-47226]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[47236-47247]:SimpleType[47236-47247]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47252-49212]:Block[47252-49212]"
  }, {
    "left" : "char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();",
    "right" : "char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();",
    "info" : "VariableDeclarationStatement[47262-47318]:VariableDeclarationStatement[47262-47318]"
  }, {
    "left" : "int outPtr = 0;",
    "right" : "int outPtr = 0;",
    "info" : "VariableDeclarationStatement[47327-47342]:VariableDeclarationStatement[47327-47342]"
  }, {
    "left" : "outBuf[outPtr++] = '-';",
    "right" : "outBuf[outPtr++] = '-';",
    "info" : "ExpressionStatement[47385-47408]:ExpressionStatement[47385-47408]"
  }, {
    "left" : "if (_inputPtr >= _inputEnd)",
    "right" : "if (_inputPtr >= _inputEnd)",
    "info" : "IfStatement[47463-47536]:IfStatement[47463-47536]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47491-47536]:Block[47491-47536]"
  }, {
    "left" : "loadMoreGuaranteed();",
    "right" : "loadMoreGuaranteed();",
    "info" : "ExpressionStatement[47505-47526]:ExpressionStatement[47505-47526]"
  }, {
    "left" : "int c = (int) _inputBuffer[_inputPtr++] & 0xFF;",
    "right" : "int c = (int) _inputBuffer[_inputPtr++] & 0xFF;",
    "info" : "VariableDeclarationStatement[47545-47592]:VariableDeclarationStatement[47545-47592]"
  }, {
    "left" : "if (c < INT_0 || c > INT_9)",
    "right" : "if (c < INT_0 || c > INT_9)",
    "info" : "IfStatement[47646-47740]:IfStatement[47646-47740]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47674-47740]:Block[47674-47740]"
  }, {
    "left" : "return _handleInvalidNumberStart(c, true);",
    "right" : "return _handleInvalidNumberStart(c, true);",
    "info" : "ReturnStatement[47688-47730]:ReturnStatement[47688-47730]"
  }, {
    "left" : "if (c == INT_0)",
    "right" : "if (c == INT_0)",
    "info" : "IfStatement[47831-47900]:IfStatement[47831-47900]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47847-47900]:Block[47847-47900]"
  }, {
    "left" : "c = _verifyNoLeadingZeroes();",
    "right" : "c = _verifyNoLeadingZeroes();",
    "info" : "ExpressionStatement[47861-47890]:ExpressionStatement[47861-47890]"
  }, {
    "left" : "outBuf[outPtr++] = (char) c;",
    "right" : "outBuf[outPtr++] = (char) c;",
    "info" : "ExpressionStatement[47975-48003]:ExpressionStatement[47975-48003]"
  }, {
    "left" : "int intLen = 1;",
    "right" : "int intLen = 1;",
    "info" : "VariableDeclarationStatement[48012-48027]:VariableDeclarationStatement[48012-48027]"
  }, {
    "left" : "int end = _inputPtr + outBuf.length - outPtr;",
    "right" : "int end = _inputPtr + outBuf.length - outPtr;",
    "info" : "VariableDeclarationStatement[48149-48194]:VariableDeclarationStatement[48149-48194]"
  }, {
    "left" : "if (end > _inputEnd)",
    "right" : "if (end > _inputEnd)",
    "info" : "IfStatement[48203-48264]:IfStatement[48203-48264]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48224-48264]:Block[48224-48264]"
  }, {
    "left" : "end = _inputEnd;",
    "right" : "end = _inputEnd;",
    "info" : "ExpressionStatement[48238-48254]:ExpressionStatement[48238-48254]"
  }, {
    "left" : "while (true)",
    "right" : "while (true)",
    "info" : "WhileStatement[48327-48731]:WhileStatement[48327-48731]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48340-48731]:Block[48340-48731]"
  }, {
    "left" : "if (_inputPtr >= end)",
    "right" : "if (_inputPtr >= end)",
    "info" : "IfStatement[48354-48523]:IfStatement[48354-48523]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48376-48523]:Block[48376-48523]"
  }, {
    "left" : "return _parseNumber2(outBuf, outPtr, true, intLen);",
    "right" : "return _parseNumber2(outBuf, outPtr, true, intLen);",
    "info" : "ReturnStatement[48458-48509]:ReturnStatement[48458-48509]"
  }, {
    "left" : "c = (int) _inputBuffer[_inputPtr++] & 0xFF;",
    "right" : "c = (int) _inputBuffer[_inputPtr++] & 0xFF;",
    "info" : "ExpressionStatement[48536-48579]:ExpressionStatement[48536-48579]"
  }, {
    "left" : "if (c < INT_0 || c > INT_9)",
    "right" : "if (c < INT_0 || c > INT_9)",
    "info" : "IfStatement[48592-48658]:IfStatement[48592-48658]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48620-48658]:Block[48620-48658]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[48638-48644]:BreakStatement[48638-48644]"
  }, {
    "left" : "++intLen;",
    "right" : "++intLen;",
    "info" : "ExpressionStatement[48671-48680]:ExpressionStatement[48671-48680]"
  }, {
    "left" : "outBuf[outPtr++] = (char) c;",
    "right" : "outBuf[outPtr++] = (char) c;",
    "info" : "ExpressionStatement[48693-48721]:ExpressionStatement[48693-48721]"
  }, {
    "left" : "if (c == '.' || c == 'e' || c == 'E')",
    "right" : "if (c == '.' || c == 'e' || c == 'E')",
    "info" : "IfStatement[48740-48854]:IfStatement[48740-48854]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48778-48854]:Block[48778-48854]"
  }, {
    "left" : "return _parseFloat(outBuf, outPtr, c, true, intLen);",
    "right" : "return _parseFloat(outBuf, outPtr, c, true, intLen);",
    "info" : "ReturnStatement[48792-48844]:ReturnStatement[48792-48844]"
  }, {
    "left" : "--_inputPtr;",
    "right" : "--_inputPtr;",
    "info" : "ExpressionStatement[48872-48884]:ExpressionStatement[48872-48884]"
  }, {
    "left" : "_textBuffer.setCurrentLength(outPtr);",
    "right" : "_textBuffer.setCurrentLength(outPtr);",
    "info" : "ExpressionStatement[48935-48972]:ExpressionStatement[48935-48972]"
  }, {
    "left" : "if (_parsingContext.inRoot())",
    "right" : "if (_parsingContext.inRoot())",
    "info" : "IfStatement[49059-49133]:IfStatement[49059-49133]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49089-49133]:Block[49089-49133]"
  }, {
    "left" : "_verifyRootSpace(c);",
    "right" : "_verifyRootSpace(c);",
    "info" : "ExpressionStatement[49103-49123]:ExpressionStatement[49103-49123]"
  }, {
    "left" : "return resetInt(true, intLen);",
    "right" : "return resetInt(true, intLen);",
    "info" : "ReturnStatement[49176-49206]:ReturnStatement[49176-49206]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[49375-49382]:Modifier[49375-49382]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[49383-49388]:Modifier[49383-49388]"
  }, {
    "left" : "JsonToken",
    "right" : "JsonToken",
    "info" : "SimpleType[49389-49398]:SimpleType[49389-49398]"
  }, {
    "left" : "_parseNumber2",
    "right" : "_parseNumber2",
    "info" : "SimpleName[49399-49412]:SimpleName[49399-49412]"
  }, {
    "left" : "char[] outBuf",
    "right" : "char[] outBuf",
    "info" : "SingleVariableDeclaration[49413-49426]:SingleVariableDeclaration[49413-49426]"
  }, {
    "left" : "int outPtr",
    "right" : "int outPtr",
    "info" : "SingleVariableDeclaration[49428-49438]:SingleVariableDeclaration[49428-49438]"
  }, {
    "left" : "boolean negative",
    "right" : "boolean negative",
    "info" : "SingleVariableDeclaration[49440-49456]:SingleVariableDeclaration[49440-49456]"
  }, {
    "left" : "int intPartLength",
    "right" : "int intPartLength",
    "info" : "SingleVariableDeclaration[49470-49487]:SingleVariableDeclaration[49470-49487]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[49496-49507]:SimpleType[49496-49507]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49512-50683]:Block[49512-50683]"
  }, {
    "left" : "while (true)",
    "right" : "while (true)",
    "info" : "WhileStatement[49552-50283]:WhileStatement[49552-50283]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49565-50283]:Block[49565-50283]"
  }, {
    "left" : "if (_inputPtr >= _inputEnd && !loadMore())",
    "right" : "if (_inputPtr >= _inputEnd && !loadMore())",
    "info" : "IfStatement[49579-49749]:IfStatement[49579-49749]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49622-49749]:Block[49622-49749]"
  }, {
    "left" : "_textBuffer.setCurrentLength(outPtr);",
    "right" : "_textBuffer.setCurrentLength(outPtr);",
    "info" : "ExpressionStatement[49640-49677]:ExpressionStatement[49640-49677]"
  }, {
    "left" : "return resetInt(negative, intPartLength);",
    "right" : "return resetInt(negative, intPartLength);",
    "info" : "ReturnStatement[49694-49735]:ReturnStatement[49694-49735]"
  }, {
    "left" : "int c = (int) _inputBuffer[_inputPtr++] & 0xFF;",
    "right" : "int c = (int) _inputBuffer[_inputPtr++] & 0xFF;",
    "info" : "VariableDeclarationStatement[49762-49809]:VariableDeclarationStatement[49762-49809]"
  }, {
    "left" : "if (c > INT_9 || c < INT_0)",
    "right" : "if (c > INT_9 || c < INT_0)",
    "info" : "IfStatement[49822-50057]:IfStatement[49822-50057]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49850-50057]:Block[49850-50057]"
  }, {
    "left" : "if (c == INT_PERIOD || c == INT_e || c == INT_E)",
    "right" : "if (c == INT_PERIOD || c == INT_e || c == INT_E)",
    "info" : "IfStatement[49868-50020]:IfStatement[49868-50020]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49917-50020]:Block[49917-50020]"
  }, {
    "left" : "return _parseFloat(outBuf, outPtr, c, negative, intPartLength);",
    "right" : "return _parseFloat(outBuf, outPtr, c, negative, intPartLength);",
    "info" : "ReturnStatement[49939-50002]:ReturnStatement[49939-50002]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[50037-50043]:BreakStatement[50037-50043]"
  }, {
    "left" : "if (outPtr >= outBuf.length)",
    "right" : "if (outPtr >= outBuf.length)",
    "info" : "IfStatement[50070-50203]:IfStatement[50070-50203]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50099-50203]:Block[50099-50203]"
  }, {
    "left" : "outBuf = _textBuffer.finishCurrentSegment();",
    "right" : "outBuf = _textBuffer.finishCurrentSegment();",
    "info" : "ExpressionStatement[50117-50161]:ExpressionStatement[50117-50161]"
  }, {
    "left" : "outPtr = 0;",
    "right" : "outPtr = 0;",
    "info" : "ExpressionStatement[50178-50189]:ExpressionStatement[50178-50189]"
  }, {
    "left" : "outBuf[outPtr++] = (char) c;",
    "right" : "outBuf[outPtr++] = (char) c;",
    "info" : "ExpressionStatement[50216-50244]:ExpressionStatement[50216-50244]"
  }, {
    "left" : "++intPartLength;",
    "right" : "++intPartLength;",
    "info" : "ExpressionStatement[50257-50273]:ExpressionStatement[50257-50273]"
  }, {
    "left" : "--_inputPtr;",
    "right" : "--_inputPtr;",
    "info" : "ExpressionStatement[50292-50304]:ExpressionStatement[50292-50304]"
  }, {
    "left" : "_textBuffer.setCurrentLength(outPtr);",
    "right" : "_textBuffer.setCurrentLength(outPtr);",
    "info" : "ExpressionStatement[50355-50392]:ExpressionStatement[50355-50392]"
  }, {
    "left" : "if (_parsingContext.inRoot())",
    "right" : "if (_parsingContext.inRoot())",
    "info" : "IfStatement[50479-50584]:IfStatement[50479-50584]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50509-50584]:Block[50509-50584]"
  }, {
    "left" : "_verifyRootSpace(_inputBuffer[_inputPtr++] & 0xFF);",
    "right" : "_verifyRootSpace(_inputBuffer[_inputPtr++] & 0xFF);",
    "info" : "ExpressionStatement[50523-50574]:ExpressionStatement[50523-50574]"
  }, {
    "left" : "return resetInt(negative, intPartLength);",
    "right" : "return resetInt(negative, intPartLength);",
    "info" : "ReturnStatement[50627-50668]:ReturnStatement[50627-50668]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[50814-50821]:Modifier[50814-50821]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[50822-50827]:Modifier[50822-50827]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[50828-50831]:PrimitiveType[50828-50831]"
  }, {
    "left" : "_verifyNoLeadingZeroes",
    "right" : "_verifyNoLeadingZeroes",
    "info" : "SimpleName[50832-50854]:SimpleName[50832-50854]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[50864-50875]:SimpleType[50864-50875]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50880-52079]:Block[50880-52079]"
  }, {
    "left" : "if (_inputPtr >= _inputEnd && !loadMore())",
    "right" : "if (_inputPtr >= _inputEnd && !loadMore())",
    "info" : "IfStatement[50922-51002]:IfStatement[50922-51002]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50965-51002]:Block[50965-51002]"
  }, {
    "left" : "return INT_0;",
    "right" : "return INT_0;",
    "info" : "ReturnStatement[50979-50992]:ReturnStatement[50979-50992]"
  }, {
    "left" : "int ch = _inputBuffer[_inputPtr] & 0xFF;",
    "right" : "int ch = _inputBuffer[_inputPtr] & 0xFF;",
    "info" : "VariableDeclarationStatement[51011-51051]:VariableDeclarationStatement[51011-51051]"
  }, {
    "left" : "if (ch < INT_0 || ch > INT_9)",
    "right" : "if (ch < INT_0 || ch > INT_9)",
    "info" : "IfStatement[51149-51216]:IfStatement[51149-51216]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[51179-51216]:Block[51179-51216]"
  }, {
    "left" : "return INT_0;",
    "right" : "return INT_0;",
    "info" : "ReturnStatement[51193-51206]:ReturnStatement[51193-51206]"
  }, {
    "left" : "if (!isEnabled(Feature.ALLOW_NUMERIC_LEADING_ZEROS))",
    "right" : "if (!isEnabled(Feature.ALLOW_NUMERIC_LEADING_ZEROS))",
    "info" : "IfStatement[51291-51418]:IfStatement[51291-51418]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[51344-51418]:Block[51344-51418]"
  }, {
    "left" : "reportInvalidNumber(\"Leading zeroes not allowed\");",
    "right" : "reportInvalidNumber(\"Leading zeroes not allowed\");",
    "info" : "ExpressionStatement[51358-51408]:ExpressionStatement[51358-51408]"
  }, {
    "left" : "++_inputPtr;",
    "right" : "++_inputPtr;",
    "info" : "ExpressionStatement[51537-51549]:ExpressionStatement[51537-51549]"
  }, {
    "left" : "if (ch == INT_0)",
    "right" : "if (ch == INT_0)",
    "info" : "IfStatement[51588-52054]:IfStatement[51588-52054]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[51605-52054]:Block[51605-52054]"
  }, {
    "left" : "while (_inputPtr < _inputEnd || loadMore())",
    "right" : "while (_inputPtr < _inputEnd || loadMore())",
    "info" : "WhileStatement[51619-52044]:WhileStatement[51619-52044]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[51663-52044]:Block[51663-52044]"
  }, {
    "left" : "ch = _inputBuffer[_inputPtr] & 0xFF;",
    "right" : "ch = _inputBuffer[_inputPtr] & 0xFF;",
    "info" : "ExpressionStatement[51681-51717]:ExpressionStatement[51681-51717]"
  }, {
    "left" : "if (ch < INT_0 || ch > INT_9)",
    "right" : "if (ch < INT_0 || ch > INT_9)",
    "info" : "IfStatement[51734-51860]:IfStatement[51734-51860]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[51764-51860]:Block[51764-51860]"
  }, {
    "left" : "return INT_0;",
    "right" : "return INT_0;",
    "info" : "ReturnStatement[51829-51842]:ReturnStatement[51829-51842]"
  }, {
    "left" : "++_inputPtr;",
    "right" : "++_inputPtr;",
    "info" : "ExpressionStatement[51877-51889]:ExpressionStatement[51877-51889]"
  }, {
    "left" : "if (ch != INT_0)",
    "right" : "if (ch != INT_0)",
    "info" : "IfStatement[51930-52030]:IfStatement[51930-52030]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[51947-52030]:Block[51947-52030]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[52006-52012]:BreakStatement[52006-52012]"
  }, {
    "left" : "return ch;",
    "right" : "return ch;",
    "info" : "ReturnStatement[52063-52073]:ReturnStatement[52063-52073]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[52089-52096]:Modifier[52089-52096]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[52097-52102]:Modifier[52097-52102]"
  }, {
    "left" : "JsonToken",
    "right" : "JsonToken",
    "info" : "SimpleType[52103-52112]:SimpleType[52103-52112]"
  }, {
    "left" : "_parseFloat",
    "right" : "_parseFloat",
    "info" : "SimpleName[52113-52124]:SimpleName[52113-52124]"
  }, {
    "left" : "char[] outBuf",
    "right" : "char[] outBuf",
    "info" : "SingleVariableDeclaration[52125-52138]:SingleVariableDeclaration[52125-52138]"
  }, {
    "left" : "int outPtr",
    "right" : "int outPtr",
    "info" : "SingleVariableDeclaration[52140-52150]:SingleVariableDeclaration[52140-52150]"
  }, {
    "left" : "int c",
    "right" : "int c",
    "info" : "SingleVariableDeclaration[52152-52157]:SingleVariableDeclaration[52152-52157]"
  }, {
    "left" : "boolean negative",
    "right" : "boolean negative",
    "info" : "SingleVariableDeclaration[52171-52187]:SingleVariableDeclaration[52171-52187]"
  }, {
    "left" : "int integerPartLength",
    "right" : "int integerPartLength",
    "info" : "SingleVariableDeclaration[52189-52210]:SingleVariableDeclaration[52189-52210]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[52219-52230]:SimpleType[52219-52230]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52235-55444]:Block[52235-55590]"
  }, {
    "left" : "int fractLen = 0;",
    "right" : "int fractLen = 0;",
    "info" : "VariableDeclarationStatement[52245-52262]:VariableDeclarationStatement[52245-52262]"
  }, {
    "left" : "boolean eof = false;",
    "right" : "boolean eof = false;",
    "info" : "VariableDeclarationStatement[52271-52291]:VariableDeclarationStatement[52271-52291]"
  }, {
    "left" : "if (c == INT_PERIOD)",
    "right" : "if (c == INT_PERIOD)",
    "info" : "IfStatement[52347-53249]:IfStatement[52347-53395]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52368-53249]:Block[52368-53395]"
  }, {
    "left" : "outBuf[outPtr++] = (char) c;",
    "right" : "outBuf[outPtr++] = (char) c;",
    "info" : "ExpressionStatement[52399-52427]:ExpressionStatement[52545-52573]"
  }, {
    "left" : "fract_loop:\n            while (true) {\n                if (_inputPtr >= _inputEnd && !loadMore()) {\n                    eof = true;\n                    break fract_loop;\n                }\n                c = (int) _inputBuffer[_inputPtr++] & 0xFF;\n                if (c < INT_0 || c > INT_9) {\n                    break fract_loop;\n                }\n                ++fractLen;\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                outBuf[outPtr++] = (char) c;\n            }",
    "right" : "fract_loop:\n            while (true) {\n                if (_inputPtr >= _inputEnd && !loadMore()) {\n                    eof = true;\n                    break fract_loop;\n                }\n                c = (int) _inputBuffer[_inputPtr++] & 0xFF;\n                if (c < INT_0 || c > INT_9) {\n                    break fract_loop;\n                }\n                ++fractLen;\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                outBuf[outPtr++] = (char) c;\n            }",
    "info" : "LabeledStatement[52441-53039]:LabeledStatement[52587-53185]"
  }, {
    "left" : "while (true)",
    "right" : "while (true)",
    "info" : "WhileStatement[52465-53039]:WhileStatement[52611-53185]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52478-53039]:Block[52624-53185]"
  }, {
    "left" : "if (_inputPtr >= _inputEnd && !loadMore())",
    "right" : "if (_inputPtr >= _inputEnd && !loadMore())",
    "info" : "IfStatement[52496-52628]:IfStatement[52642-52774]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52539-52628]:Block[52685-52774]"
  }, {
    "left" : "eof = true;",
    "right" : "eof = true;",
    "info" : "ExpressionStatement[52561-52572]:ExpressionStatement[52707-52718]"
  }, {
    "left" : "break fract_loop;",
    "right" : "break fract_loop;",
    "info" : "BreakStatement[52593-52610]:BreakStatement[52739-52756]"
  }, {
    "left" : "c = (int) _inputBuffer[_inputPtr++] & 0xFF;",
    "right" : "c = (int) _inputBuffer[_inputPtr++] & 0xFF;",
    "info" : "ExpressionStatement[52645-52688]:ExpressionStatement[52791-52834]"
  }, {
    "left" : "if (c < INT_0 || c > INT_9)",
    "right" : "if (c < INT_0 || c > INT_9)",
    "info" : "IfStatement[52705-52790]:IfStatement[52851-52936]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52733-52790]:Block[52879-52936]"
  }, {
    "left" : "break fract_loop;",
    "right" : "break fract_loop;",
    "info" : "BreakStatement[52755-52772]:BreakStatement[52901-52918]"
  }, {
    "left" : "++fractLen;",
    "right" : "++fractLen;",
    "info" : "ExpressionStatement[52807-52818]:ExpressionStatement[52953-52964]"
  }, {
    "left" : "if (outPtr >= outBuf.length)",
    "right" : "if (outPtr >= outBuf.length)",
    "info" : "IfStatement[52835-52980]:IfStatement[52981-53126]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52864-52980]:Block[53010-53126]"
  }, {
    "left" : "outBuf = _textBuffer.finishCurrentSegment();",
    "right" : "outBuf = _textBuffer.finishCurrentSegment();",
    "info" : "ExpressionStatement[52886-52930]:ExpressionStatement[53032-53076]"
  }, {
    "left" : "outPtr = 0;",
    "right" : "outPtr = 0;",
    "info" : "ExpressionStatement[52951-52962]:ExpressionStatement[53097-53108]"
  }, {
    "left" : "outBuf[outPtr++] = (char) c;",
    "right" : "outBuf[outPtr++] = (char) c;",
    "info" : "ExpressionStatement[52997-53025]:ExpressionStatement[53143-53171]"
  }, {
    "left" : "if (fractLen == 0)",
    "right" : "if (fractLen == 0)",
    "info" : "IfStatement[53117-53239]:IfStatement[53263-53385]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53136-53239]:Block[53282-53385]"
  }, {
    "left" : "reportUnexpectedNumberChar(c, \"Decimal point not followed by a digit\");",
    "right" : "reportUnexpectedNumberChar(c, \"Decimal point not followed by a digit\");",
    "info" : "ExpressionStatement[53154-53225]:ExpressionStatement[53300-53371]"
  }, {
    "left" : "int expLen = 0;",
    "right" : "int expLen = 0;",
    "info" : "VariableDeclarationStatement[53259-53274]:VariableDeclarationStatement[53405-53420]"
  }, {
    "left" : "if (c == INT_e || c == INT_E)",
    "right" : "if (c == INT_e || c == INT_E)",
    "info" : "IfStatement[53283-54969]:IfStatement[53429-55115]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53313-54969]:Block[53459-55115]"
  }, {
    "left" : "if (outPtr >= outBuf.length)",
    "right" : "if (outPtr >= outBuf.length)",
    "info" : "IfStatement[53340-53473]:IfStatement[53486-53619]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53369-53473]:Block[53515-53619]"
  }, {
    "left" : "outBuf = _textBuffer.finishCurrentSegment();",
    "right" : "outBuf = _textBuffer.finishCurrentSegment();",
    "info" : "ExpressionStatement[53387-53431]:ExpressionStatement[53533-53577]"
  }, {
    "left" : "outPtr = 0;",
    "right" : "outPtr = 0;",
    "info" : "ExpressionStatement[53448-53459]:ExpressionStatement[53594-53605]"
  }, {
    "left" : "outBuf[outPtr++] = (char) c;",
    "right" : "outBuf[outPtr++] = (char) c;",
    "info" : "ExpressionStatement[53486-53514]:ExpressionStatement[53632-53660]"
  }, {
    "left" : "if (_inputPtr >= _inputEnd)",
    "right" : "if (_inputPtr >= _inputEnd)",
    "info" : "IfStatement[53594-53675]:IfStatement[53740-53821]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53622-53675]:Block[53768-53821]"
  }, {
    "left" : "loadMoreGuaranteed();",
    "right" : "loadMoreGuaranteed();",
    "info" : "ExpressionStatement[53640-53661]:ExpressionStatement[53786-53807]"
  }, {
    "left" : "c = (int) _inputBuffer[_inputPtr++] & 0xFF;",
    "right" : "c = (int) _inputBuffer[_inputPtr++] & 0xFF;",
    "info" : "ExpressionStatement[53688-53731]:ExpressionStatement[53834-53877]"
  }, {
    "left" : "if (c == '-' || c == '+')",
    "right" : "if (c == '-' || c == '+')",
    "info" : "IfStatement[53775-54232]:IfStatement[53921-54378]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53801-54232]:Block[53947-54378]"
  }, {
    "left" : "if (outPtr >= outBuf.length)",
    "right" : "if (outPtr >= outBuf.length)",
    "info" : "IfStatement[53819-53964]:IfStatement[53965-54110]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53848-53964]:Block[53994-54110]"
  }, {
    "left" : "outBuf = _textBuffer.finishCurrentSegment();",
    "right" : "outBuf = _textBuffer.finishCurrentSegment();",
    "info" : "ExpressionStatement[53870-53914]:ExpressionStatement[54016-54060]"
  }, {
    "left" : "outPtr = 0;",
    "right" : "outPtr = 0;",
    "info" : "ExpressionStatement[53935-53946]:ExpressionStatement[54081-54092]"
  }, {
    "left" : "outBuf[outPtr++] = (char) c;",
    "right" : "outBuf[outPtr++] = (char) c;",
    "info" : "ExpressionStatement[53981-54009]:ExpressionStatement[54127-54155]"
  }, {
    "left" : "if (_inputPtr >= _inputEnd)",
    "right" : "if (_inputPtr >= _inputEnd)",
    "info" : "IfStatement[54069-54158]:IfStatement[54215-54304]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[54097-54158]:Block[54243-54304]"
  }, {
    "left" : "loadMoreGuaranteed();",
    "right" : "loadMoreGuaranteed();",
    "info" : "ExpressionStatement[54119-54140]:ExpressionStatement[54265-54286]"
  }, {
    "left" : "c = (int) _inputBuffer[_inputPtr++] & 0xFF;",
    "right" : "c = (int) _inputBuffer[_inputPtr++] & 0xFF;",
    "info" : "ExpressionStatement[54175-54218]:ExpressionStatement[54321-54364]"
  }, {
    "left" : "exp_loop:\n            while (c <= INT_9 && c >= INT_0) {\n                ++expLen;\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                outBuf[outPtr++] = (char) c;\n                if (_inputPtr >= _inputEnd && !loadMore()) {\n                    eof = true;\n                    break exp_loop;\n                }\n                c = (int) _inputBuffer[_inputPtr++] & 0xFF;\n            }",
    "right" : "exp_loop:\n            while (c <= INT_9 && c >= INT_0) {\n                ++expLen;\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                outBuf[outPtr++] = (char) c;\n                if (_inputPtr >= _inputEnd && !loadMore()) {\n                    eof = true;\n                    break exp_loop;\n                }\n                c = (int) _inputBuffer[_inputPtr++] & 0xFF;\n            }",
    "info" : "LabeledStatement[54246-54756]:LabeledStatement[54392-54902]"
  }, {
    "left" : "while (c <= INT_9 && c >= INT_0)",
    "right" : "while (c <= INT_9 && c >= INT_0)",
    "info" : "WhileStatement[54268-54756]:WhileStatement[54414-54902]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[54301-54756]:Block[54447-54902]"
  }, {
    "left" : "++expLen;",
    "right" : "++expLen;",
    "info" : "ExpressionStatement[54319-54328]:ExpressionStatement[54465-54474]"
  }, {
    "left" : "if (outPtr >= outBuf.length)",
    "right" : "if (outPtr >= outBuf.length)",
    "info" : "IfStatement[54345-54490]:IfStatement[54491-54636]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[54374-54490]:Block[54520-54636]"
  }, {
    "left" : "outBuf = _textBuffer.finishCurrentSegment();",
    "right" : "outBuf = _textBuffer.finishCurrentSegment();",
    "info" : "ExpressionStatement[54396-54440]:ExpressionStatement[54542-54586]"
  }, {
    "left" : "outPtr = 0;",
    "right" : "outPtr = 0;",
    "info" : "ExpressionStatement[54461-54472]:ExpressionStatement[54607-54618]"
  }, {
    "left" : "outBuf[outPtr++] = (char) c;",
    "right" : "outBuf[outPtr++] = (char) c;",
    "info" : "ExpressionStatement[54507-54535]:ExpressionStatement[54653-54681]"
  }, {
    "left" : "if (_inputPtr >= _inputEnd && !loadMore())",
    "right" : "if (_inputPtr >= _inputEnd && !loadMore())",
    "info" : "IfStatement[54552-54682]:IfStatement[54698-54828]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[54595-54682]:Block[54741-54828]"
  }, {
    "left" : "eof = true;",
    "right" : "eof = true;",
    "info" : "ExpressionStatement[54617-54628]:ExpressionStatement[54763-54774]"
  }, {
    "left" : "break exp_loop;",
    "right" : "break exp_loop;",
    "info" : "BreakStatement[54649-54664]:BreakStatement[54795-54810]"
  }, {
    "left" : "c = (int) _inputBuffer[_inputPtr++] & 0xFF;",
    "right" : "c = (int) _inputBuffer[_inputPtr++] & 0xFF;",
    "info" : "ExpressionStatement[54699-54742]:ExpressionStatement[54845-54888]"
  }, {
    "left" : "if (expLen == 0)",
    "right" : "if (expLen == 0)",
    "info" : "IfStatement[54834-54959]:IfStatement[54980-55105]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[54851-54959]:Block[54997-55105]"
  }, {
    "left" : "reportUnexpectedNumberChar(c, \"Exponent indicator not followed by a digit\");",
    "right" : "reportUnexpectedNumberChar(c, \"Exponent indicator not followed by a digit\");",
    "info" : "ExpressionStatement[54869-54945]:ExpressionStatement[55015-55091]"
  }, {
    "left" : "if (!eof)",
    "right" : "if (!eof)",
    "info" : "IfStatement[55055-55284]:IfStatement[55201-55430]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[55065-55284]:Block[55211-55430]"
  }, {
    "left" : "--_inputPtr;",
    "right" : "--_inputPtr;",
    "info" : "ExpressionStatement[55079-55091]:ExpressionStatement[55225-55237]"
  }, {
    "left" : "if (_parsingContext.inRoot())",
    "right" : "if (_parsingContext.inRoot())",
    "info" : "IfStatement[55192-55274]:IfStatement[55338-55420]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[55222-55274]:Block[55368-55420]"
  }, {
    "left" : "_verifyRootSpace(c);",
    "right" : "_verifyRootSpace(c);",
    "info" : "ExpressionStatement[55240-55260]:ExpressionStatement[55386-55406]"
  }, {
    "left" : "_textBuffer.setCurrentLength(outPtr);",
    "right" : "_textBuffer.setCurrentLength(outPtr);",
    "info" : "ExpressionStatement[55293-55330]:ExpressionStatement[55439-55476]"
  }, {
    "left" : "return resetFloat(negative, integerPartLength, fractLen, expLen);",
    "right" : "return resetFloat(negative, integerPartLength, fractLen, expLen);",
    "info" : "ReturnStatement[55373-55438]:ReturnStatement[55519-55584]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[55695-55702]:Modifier[55841-55848]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[55703-55708]:Modifier[55849-55854]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[55709-55713]:PrimitiveType[55855-55859]"
  }, {
    "left" : "_verifyRootSpace",
    "right" : "_verifyRootSpace",
    "info" : "SimpleName[55714-55730]:SimpleName[55860-55876]"
  }, {
    "left" : "int ch",
    "right" : "int ch",
    "info" : "SingleVariableDeclaration[55731-55737]:SingleVariableDeclaration[55877-55883]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[55746-55757]:SimpleType[55892-55903]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[55762-56211]:Block[55908-56357]"
  }, {
    "left" : "++_inputPtr;",
    "right" : "++_inputPtr;",
    "info" : "ExpressionStatement[55832-55844]:ExpressionStatement[55978-55990]"
  }, {
    "left" : "switch (ch) {\n        case ' ':\n        case '\\t':\n            return;\n        case '\\r':\n            _skipCR();\n            return;\n        case '\\n':\n            ++_currInputRow;\n            _currInputRowStart = _inputPtr;\n            return;\n        }",
    "right" : "switch (ch) {\n        case ' ':\n        case '\\t':\n            return;\n        case '\\r':\n            _skipCR();\n            return;\n        case '\\n':\n            ++_currInputRow;\n            _currInputRowStart = _inputPtr;\n            return;\n        }",
    "info" : "SwitchStatement[55917-56171]:SwitchStatement[56063-56317]"
  }, {
    "left" : "case ' ':",
    "right" : "case ' ':",
    "info" : "SwitchCase[55939-55948]:SwitchCase[56085-56094]"
  }, {
    "left" : "case '\\t':",
    "right" : "case '\\t':",
    "info" : "SwitchCase[55957-55967]:SwitchCase[56103-56113]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[55980-55987]:ReturnStatement[56126-56133]"
  }, {
    "left" : "case '\\r':",
    "right" : "case '\\r':",
    "info" : "SwitchCase[55996-56006]:SwitchCase[56142-56152]"
  }, {
    "left" : "_skipCR();",
    "right" : "_skipCR();",
    "info" : "ExpressionStatement[56019-56029]:ExpressionStatement[56165-56175]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[56042-56049]:ReturnStatement[56188-56195]"
  }, {
    "left" : "case '\\n':",
    "right" : "case '\\n':",
    "info" : "SwitchCase[56058-56068]:SwitchCase[56204-56214]"
  }, {
    "left" : "++_currInputRow;",
    "right" : "++_currInputRow;",
    "info" : "ExpressionStatement[56081-56097]:ExpressionStatement[56227-56243]"
  }, {
    "left" : "_currInputRowStart = _inputPtr;",
    "right" : "_currInputRowStart = _inputPtr;",
    "info" : "ExpressionStatement[56110-56141]:ExpressionStatement[56256-56287]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[56154-56161]:ReturnStatement[56300-56307]"
  }, {
    "left" : "_reportMissingRootWS(ch);",
    "right" : "_reportMissingRootWS(ch);",
    "info" : "ExpressionStatement[56180-56205]:ExpressionStatement[56326-56351]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[56408-56417]:Modifier[56554-56563]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[56418-56423]:Modifier[56564-56569]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[56424-56430]:SimpleType[56570-56576]"
  }, {
    "left" : "_parseName",
    "right" : "_parseName",
    "info" : "SimpleName[56431-56441]:SimpleName[56577-56587]"
  }, {
    "left" : "int i",
    "right" : "int i",
    "info" : "SingleVariableDeclaration[56442-56447]:SingleVariableDeclaration[56588-56593]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[56456-56467]:SimpleType[56602-56613]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[56472-58770]:Block[56618-58916]"
  }, {
    "left" : "if (i != INT_QUOTE)",
    "right" : "if (i != INT_QUOTE)",
    "info" : "IfStatement[56482-56551]:IfStatement[56628-56697]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[56502-56551]:Block[56648-56697]"
  }, {
    "left" : "return _handleOddName(i);",
    "right" : "return _handleOddName(i);",
    "info" : "ReturnStatement[56516-56541]:ReturnStatement[56662-56687]"
  }, {
    "left" : "if ((_inputPtr + 13) > _inputEnd)",
    "right" : "if ((_inputPtr + 13) > _inputEnd)",
    "info" : "IfStatement[56613-56744]:IfStatement[56759-56890]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[56647-56744]:Block[56793-56890]"
  }, {
    "left" : "return slowParseName();",
    "right" : "return slowParseName();",
    "info" : "ReturnStatement[56711-56734]:ReturnStatement[56857-56880]"
  }, {
    "left" : "final byte[] input = _inputBuffer;",
    "right" : "final byte[] input = _inputBuffer;",
    "info" : "VariableDeclarationStatement[57078-57112]:VariableDeclarationStatement[57224-57258]"
  }, {
    "left" : "final int[] codes = _icLatin1;",
    "right" : "final int[] codes = _icLatin1;",
    "info" : "VariableDeclarationStatement[57121-57151]:VariableDeclarationStatement[57267-57297]"
  }, {
    "left" : "int q = input[_inputPtr++] & 0xFF;",
    "right" : "int q = input[_inputPtr++] & 0xFF;",
    "info" : "VariableDeclarationStatement[57161-57195]:VariableDeclarationStatement[57307-57341]"
  }, {
    "left" : "if (codes[q] == 0)",
    "right" : "if (codes[q] == 0)",
    "info" : "IfStatement[57205-58614]:IfStatement[57351-58760]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[57224-58614]:Block[57370-58760]"
  }, {
    "left" : "i = input[_inputPtr++] & 0xFF;",
    "right" : "i = input[_inputPtr++] & 0xFF;",
    "info" : "ExpressionStatement[57238-57268]:ExpressionStatement[57384-57414]"
  }, {
    "left" : "if (codes[i] == 0)",
    "right" : "if (codes[i] == 0)",
    "info" : "IfStatement[57281-58446]:IfStatement[57427-58592]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[57300-58446]:Block[57446-58592]"
  }, {
    "left" : "q = (q << 8) | i;",
    "right" : "q = (q << 8) | i;",
    "info" : "ExpressionStatement[57318-57335]:ExpressionStatement[57464-57481]"
  }, {
    "left" : "i = input[_inputPtr++] & 0xFF;",
    "right" : "i = input[_inputPtr++] & 0xFF;",
    "info" : "ExpressionStatement[57352-57382]:ExpressionStatement[57498-57528]"
  }, {
    "left" : "if (codes[i] == 0)",
    "right" : "if (codes[i] == 0)",
    "info" : "IfStatement[57399-58244]:IfStatement[57545-58390]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[57418-58244]:Block[57564-58390]"
  }, {
    "left" : "q = (q << 8) | i;",
    "right" : "q = (q << 8) | i;",
    "info" : "ExpressionStatement[57440-57457]:ExpressionStatement[57586-57603]"
  }, {
    "left" : "i = input[_inputPtr++] & 0xFF;",
    "right" : "i = input[_inputPtr++] & 0xFF;",
    "info" : "ExpressionStatement[57478-57508]:ExpressionStatement[57624-57654]"
  }, {
    "left" : "if (codes[i] == 0)",
    "right" : "if (codes[i] == 0)",
    "info" : "IfStatement[57529-58038]:IfStatement[57675-58184]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[57548-58038]:Block[57694-58184]"
  }, {
    "left" : "q = (q << 8) | i;",
    "right" : "q = (q << 8) | i;",
    "info" : "ExpressionStatement[57574-57591]:ExpressionStatement[57720-57737]"
  }, {
    "left" : "i = input[_inputPtr++] & 0xFF;",
    "right" : "i = input[_inputPtr++] & 0xFF;",
    "info" : "ExpressionStatement[57616-57646]:ExpressionStatement[57762-57792]"
  }, {
    "left" : "if (codes[i] == 0)",
    "right" : "if (codes[i] == 0)",
    "info" : "IfStatement[57671-57812]:IfStatement[57817-57958]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[57690-57812]:Block[57836-57958]"
  }, {
    "left" : "_quad1 = q;",
    "right" : "_quad1 = q;",
    "info" : "ExpressionStatement[57720-57731]:ExpressionStatement[57866-57877]"
  }, {
    "left" : "return parseMediumName(i);",
    "right" : "return parseMediumName(i);",
    "info" : "ReturnStatement[57760-57786]:ReturnStatement[57906-57932]"
  }, {
    "left" : "if (i == INT_QUOTE)",
    "right" : "if (i == INT_QUOTE)",
    "info" : "IfStatement[57837-57965]:IfStatement[57983-58111]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[57857-57965]:Block[58003-58111]"
  }, {
    "left" : "return findName(q, 4);",
    "right" : "return findName(q, 4);",
    "info" : "ReturnStatement[57917-57939]:ReturnStatement[58063-58085]"
  }, {
    "left" : "return parseName(q, i, 4);",
    "right" : "return parseName(q, i, 4);",
    "info" : "ReturnStatement[57990-58016]:ReturnStatement[58136-58162]"
  }, {
    "left" : "if (i == INT_QUOTE)",
    "right" : "if (i == INT_QUOTE)",
    "info" : "IfStatement[58059-58179]:IfStatement[58205-58325]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[58079-58179]:Block[58225-58325]"
  }, {
    "left" : "return findName(q, 3);",
    "right" : "return findName(q, 3);",
    "info" : "ReturnStatement[58135-58157]:ReturnStatement[58281-58303]"
  }, {
    "left" : "return parseName(q, i, 3);",
    "right" : "return parseName(q, i, 3);",
    "info" : "ReturnStatement[58200-58226]:ReturnStatement[58346-58372]"
  }, {
    "left" : "if (i == INT_QUOTE)",
    "right" : "if (i == INT_QUOTE)",
    "info" : "IfStatement[58277-58389]:IfStatement[58423-58535]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[58297-58389]:Block[58443-58535]"
  }, {
    "left" : "return findName(q, 2);",
    "right" : "return findName(q, 2);",
    "info" : "ReturnStatement[58349-58371]:ReturnStatement[58495-58517]"
  }, {
    "left" : "return parseName(q, i, 2);",
    "right" : "return parseName(q, i, 2);",
    "info" : "ReturnStatement[58406-58432]:ReturnStatement[58552-58578]"
  }, {
    "left" : "if (i == INT_QUOTE)",
    "right" : "if (i == INT_QUOTE)",
    "info" : "IfStatement[58459-58565]:IfStatement[58605-58711]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[58479-58565]:Block[58625-58711]"
  }, {
    "left" : "return findName(q, 1);",
    "right" : "return findName(q, 1);",
    "info" : "ReturnStatement[58529-58551]:ReturnStatement[58675-58697]"
  }, {
    "left" : "return parseName(q, i, 1);",
    "right" : "return parseName(q, i, 1);",
    "info" : "ReturnStatement[58578-58604]:ReturnStatement[58724-58750]"
  }, {
    "left" : "if (q == INT_QUOTE)",
    "right" : "if (q == INT_QUOTE)",
    "info" : "IfStatement[58628-58702]:IfStatement[58774-58848]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[58648-58702]:Block[58794-58848]"
  }, {
    "left" : "return \"\";",
    "right" : "return \"\";",
    "info" : "ReturnStatement[58682-58692]:ReturnStatement[58828-58838]"
  }, {
    "left" : "return parseName(0, q, 0);",
    "right" : "return parseName(0, q, 0);",
    "info" : "ReturnStatement[58711-58737]:ReturnStatement[58857-58883]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[58776-58785]:Modifier[58922-58931]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[58786-58791]:Modifier[58932-58937]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[58792-58798]:SimpleType[58938-58944]"
  }, {
    "left" : "parseMediumName",
    "right" : "parseMediumName",
    "info" : "SimpleName[58799-58814]:SimpleName[58945-58960]"
  }, {
    "left" : "int q2",
    "right" : "int q2",
    "info" : "SingleVariableDeclaration[58815-58821]:SingleVariableDeclaration[58961-58967]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[58830-58841]:SimpleType[58976-58987]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[58846-60062]:Block[58992-60208]"
  }, {
    "left" : "final byte[] input = _inputBuffer;",
    "right" : "final byte[] input = _inputBuffer;",
    "info" : "VariableDeclarationStatement[58856-58890]:VariableDeclarationStatement[59002-59036]"
  }, {
    "left" : "final int[] codes = _icLatin1;",
    "right" : "final int[] codes = _icLatin1;",
    "info" : "VariableDeclarationStatement[58899-58929]:VariableDeclarationStatement[59045-59075]"
  }, {
    "left" : "int i = input[_inputPtr++] & 0xFF;",
    "right" : "int i = input[_inputPtr++] & 0xFF;",
    "info" : "VariableDeclarationStatement[58978-59012]:VariableDeclarationStatement[59124-59158]"
  }, {
    "left" : "if (codes[i] != 0)",
    "right" : "if (codes[i] != 0)",
    "info" : "IfStatement[59021-59233]:IfStatement[59167-59379]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[59040-59233]:Block[59186-59379]"
  }, {
    "left" : "if (i == INT_QUOTE)",
    "right" : "if (i == INT_QUOTE)",
    "info" : "IfStatement[59054-59148]:IfStatement[59200-59294]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[59074-59148]:Block[59220-59294]"
  }, {
    "left" : "return findName(_quad1, q2, 1);",
    "right" : "return findName(_quad1, q2, 1);",
    "info" : "ReturnStatement[59103-59134]:ReturnStatement[59249-59280]"
  }, {
    "left" : "return parseName(_quad1, q2, i, 1);",
    "right" : "return parseName(_quad1, q2, i, 1);",
    "info" : "ReturnStatement[59161-59196]:ReturnStatement[59307-59342]"
  }, {
    "left" : "q2 = (q2 << 8) | i;",
    "right" : "q2 = (q2 << 8) | i;",
    "info" : "ExpressionStatement[59242-59261]:ExpressionStatement[59388-59407]"
  }, {
    "left" : "i = input[_inputPtr++] & 0xFF;",
    "right" : "i = input[_inputPtr++] & 0xFF;",
    "info" : "ExpressionStatement[59270-59300]:ExpressionStatement[59416-59446]"
  }, {
    "left" : "if (codes[i] != 0)",
    "right" : "if (codes[i] != 0)",
    "info" : "IfStatement[59309-59494]:IfStatement[59455-59640]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[59328-59494]:Block[59474-59640]"
  }, {
    "left" : "if (i == INT_QUOTE)",
    "right" : "if (i == INT_QUOTE)",
    "info" : "IfStatement[59342-59436]:IfStatement[59488-59582]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[59362-59436]:Block[59508-59582]"
  }, {
    "left" : "return findName(_quad1, q2, 2);",
    "right" : "return findName(_quad1, q2, 2);",
    "info" : "ReturnStatement[59391-59422]:ReturnStatement[59537-59568]"
  }, {
    "left" : "return parseName(_quad1, q2, i, 2);",
    "right" : "return parseName(_quad1, q2, i, 2);",
    "info" : "ReturnStatement[59449-59484]:ReturnStatement[59595-59630]"
  }, {
    "left" : "q2 = (q2 << 8) | i;",
    "right" : "q2 = (q2 << 8) | i;",
    "info" : "ExpressionStatement[59503-59522]:ExpressionStatement[59649-59668]"
  }, {
    "left" : "i = input[_inputPtr++] & 0xFF;",
    "right" : "i = input[_inputPtr++] & 0xFF;",
    "info" : "ExpressionStatement[59531-59561]:ExpressionStatement[59677-59707]"
  }, {
    "left" : "if (codes[i] != 0)",
    "right" : "if (codes[i] != 0)",
    "info" : "IfStatement[59570-59755]:IfStatement[59716-59901]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[59589-59755]:Block[59735-59901]"
  }, {
    "left" : "if (i == INT_QUOTE)",
    "right" : "if (i == INT_QUOTE)",
    "info" : "IfStatement[59603-59697]:IfStatement[59749-59843]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[59623-59697]:Block[59769-59843]"
  }, {
    "left" : "return findName(_quad1, q2, 3);",
    "right" : "return findName(_quad1, q2, 3);",
    "info" : "ReturnStatement[59652-59683]:ReturnStatement[59798-59829]"
  }, {
    "left" : "return parseName(_quad1, q2, i, 3);",
    "right" : "return parseName(_quad1, q2, i, 3);",
    "info" : "ReturnStatement[59710-59745]:ReturnStatement[59856-59891]"
  }, {
    "left" : "q2 = (q2 << 8) | i;",
    "right" : "q2 = (q2 << 8) | i;",
    "info" : "ExpressionStatement[59764-59783]:ExpressionStatement[59910-59929]"
  }, {
    "left" : "i = input[_inputPtr++] & 0xFF;",
    "right" : "i = input[_inputPtr++] & 0xFF;",
    "info" : "ExpressionStatement[59792-59822]:ExpressionStatement[59938-59968]"
  }, {
    "left" : "if (codes[i] != 0)",
    "right" : "if (codes[i] != 0)",
    "info" : "IfStatement[59831-60016]:IfStatement[59977-60162]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[59850-60016]:Block[59996-60162]"
  }, {
    "left" : "if (i == INT_QUOTE)",
    "right" : "if (i == INT_QUOTE)",
    "info" : "IfStatement[59864-59958]:IfStatement[60010-60104]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[59884-59958]:Block[60030-60104]"
  }, {
    "left" : "return findName(_quad1, q2, 4);",
    "right" : "return findName(_quad1, q2, 4);",
    "info" : "ReturnStatement[59913-59944]:ReturnStatement[60059-60090]"
  }, {
    "left" : "return parseName(_quad1, q2, i, 4);",
    "right" : "return parseName(_quad1, q2, i, 4);",
    "info" : "ReturnStatement[59971-60006]:ReturnStatement[60117-60152]"
  }, {
    "left" : "return parseMediumName2(i, q2);",
    "right" : "return parseMediumName2(i, q2);",
    "info" : "ReturnStatement[60025-60056]:ReturnStatement[60171-60202]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[60102-60111]:Modifier[60248-60257]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[60112-60117]:Modifier[60258-60263]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[60118-60124]:SimpleType[60264-60270]"
  }, {
    "left" : "parseMediumName2",
    "right" : "parseMediumName2",
    "info" : "SimpleName[60125-60141]:SimpleName[60271-60287]"
  }, {
    "left" : "int q3",
    "right" : "int q3",
    "info" : "SingleVariableDeclaration[60142-60148]:SingleVariableDeclaration[60288-60294]"
  }, {
    "left" : "final int q2",
    "right" : "final int q2",
    "info" : "SingleVariableDeclaration[60150-60162]:SingleVariableDeclaration[60296-60308]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[60171-60182]:SimpleType[60317-60328]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[60187-61408]:Block[60333-61554]"
  }, {
    "left" : "final byte[] input = _inputBuffer;",
    "right" : "final byte[] input = _inputBuffer;",
    "info" : "VariableDeclarationStatement[60197-60231]:VariableDeclarationStatement[60343-60377]"
  }, {
    "left" : "final int[] codes = _icLatin1;",
    "right" : "final int[] codes = _icLatin1;",
    "info" : "VariableDeclarationStatement[60240-60270]:VariableDeclarationStatement[60386-60416]"
  }, {
    "left" : "int i = input[_inputPtr++] & 0xFF;",
    "right" : "int i = input[_inputPtr++] & 0xFF;",
    "info" : "VariableDeclarationStatement[60315-60349]:VariableDeclarationStatement[60461-60495]"
  }, {
    "left" : "if (codes[i] != 0)",
    "right" : "if (codes[i] != 0)",
    "info" : "IfStatement[60358-60551]:IfStatement[60504-60697]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[60377-60551]:Block[60523-60697]"
  }, {
    "left" : "if (i == INT_QUOTE)",
    "right" : "if (i == INT_QUOTE)",
    "info" : "IfStatement[60391-60489]:IfStatement[60537-60635]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[60411-60489]:Block[60557-60635]"
  }, {
    "left" : "return findName(_quad1, q2, q3, 1);",
    "right" : "return findName(_quad1, q2, q3, 1);",
    "info" : "ReturnStatement[60440-60475]:ReturnStatement[60586-60621]"
  }, {
    "left" : "return parseName(_quad1, q2, q3, i, 1);",
    "right" : "return parseName(_quad1, q2, q3, i, 1);",
    "info" : "ReturnStatement[60502-60541]:ReturnStatement[60648-60687]"
  }, {
    "left" : "q3 = (q3 << 8) | i;",
    "right" : "q3 = (q3 << 8) | i;",
    "info" : "ExpressionStatement[60560-60579]:ExpressionStatement[60706-60725]"
  }, {
    "left" : "i = input[_inputPtr++] & 0xFF;",
    "right" : "i = input[_inputPtr++] & 0xFF;",
    "info" : "ExpressionStatement[60588-60618]:ExpressionStatement[60734-60764]"
  }, {
    "left" : "if (codes[i] != 0)",
    "right" : "if (codes[i] != 0)",
    "info" : "IfStatement[60627-60821]:IfStatement[60773-60967]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[60646-60821]:Block[60792-60967]"
  }, {
    "left" : "if (i == INT_QUOTE)",
    "right" : "if (i == INT_QUOTE)",
    "info" : "IfStatement[60660-60759]:IfStatement[60806-60905]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[60680-60759]:Block[60826-60905]"
  }, {
    "left" : "return findName(_quad1, q2, q3, 2);",
    "right" : "return findName(_quad1, q2, q3, 2);",
    "info" : "ReturnStatement[60710-60745]:ReturnStatement[60856-60891]"
  }, {
    "left" : "return parseName(_quad1, q2, q3, i, 2);",
    "right" : "return parseName(_quad1, q2, q3, i, 2);",
    "info" : "ReturnStatement[60772-60811]:ReturnStatement[60918-60957]"
  }, {
    "left" : "q3 = (q3 << 8) | i;",
    "right" : "q3 = (q3 << 8) | i;",
    "info" : "ExpressionStatement[60830-60849]:ExpressionStatement[60976-60995]"
  }, {
    "left" : "i = input[_inputPtr++] & 0xFF;",
    "right" : "i = input[_inputPtr++] & 0xFF;",
    "info" : "ExpressionStatement[60858-60888]:ExpressionStatement[61004-61034]"
  }, {
    "left" : "if (codes[i] != 0)",
    "right" : "if (codes[i] != 0)",
    "info" : "IfStatement[60897-61091]:IfStatement[61043-61237]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[60916-61091]:Block[61062-61237]"
  }, {
    "left" : "if (i == INT_QUOTE)",
    "right" : "if (i == INT_QUOTE)",
    "info" : "IfStatement[60930-61029]:IfStatement[61076-61175]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[60950-61029]:Block[61096-61175]"
  }, {
    "left" : "return findName(_quad1, q2, q3, 3);",
    "right" : "return findName(_quad1, q2, q3, 3);",
    "info" : "ReturnStatement[60980-61015]:ReturnStatement[61126-61161]"
  }, {
    "left" : "return parseName(_quad1, q2, q3, i, 3);",
    "right" : "return parseName(_quad1, q2, q3, i, 3);",
    "info" : "ReturnStatement[61042-61081]:ReturnStatement[61188-61227]"
  }, {
    "left" : "q3 = (q3 << 8) | i;",
    "right" : "q3 = (q3 << 8) | i;",
    "info" : "ExpressionStatement[61100-61119]:ExpressionStatement[61246-61265]"
  }, {
    "left" : "i = input[_inputPtr++] & 0xFF;",
    "right" : "i = input[_inputPtr++] & 0xFF;",
    "info" : "ExpressionStatement[61128-61158]:ExpressionStatement[61274-61304]"
  }, {
    "left" : "if (codes[i] != 0)",
    "right" : "if (codes[i] != 0)",
    "info" : "IfStatement[61167-61361]:IfStatement[61313-61507]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[61186-61361]:Block[61332-61507]"
  }, {
    "left" : "if (i == INT_QUOTE)",
    "right" : "if (i == INT_QUOTE)",
    "info" : "IfStatement[61200-61299]:IfStatement[61346-61445]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[61220-61299]:Block[61366-61445]"
  }, {
    "left" : "return findName(_quad1, q2, q3, 4);",
    "right" : "return findName(_quad1, q2, q3, 4);",
    "info" : "ReturnStatement[61250-61285]:ReturnStatement[61396-61431]"
  }, {
    "left" : "return parseName(_quad1, q2, q3, i, 4);",
    "right" : "return parseName(_quad1, q2, q3, i, 4);",
    "info" : "ReturnStatement[61312-61351]:ReturnStatement[61458-61497]"
  }, {
    "left" : "return parseLongName(i, q2, q3);",
    "right" : "return parseLongName(i, q2, q3);",
    "info" : "ReturnStatement[61370-61402]:ReturnStatement[61516-61548]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[61418-61427]:Modifier[61564-61573]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[61428-61433]:Modifier[61574-61579]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[61434-61440]:SimpleType[61580-61586]"
  }, {
    "left" : "parseLongName",
    "right" : "parseLongName",
    "info" : "SimpleName[61441-61454]:SimpleName[61587-61600]"
  }, {
    "left" : "int q",
    "right" : "int q",
    "info" : "SingleVariableDeclaration[61455-61460]:SingleVariableDeclaration[61601-61606]"
  }, {
    "left" : "final int q2",
    "right" : "final int q2",
    "info" : "SingleVariableDeclaration[61462-61474]:SingleVariableDeclaration[61608-61620]"
  }, {
    "left" : "int q3",
    "right" : "int q3",
    "info" : "SingleVariableDeclaration[61476-61482]:SingleVariableDeclaration[61622-61628]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[61491-61502]:SimpleType[61637-61648]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[61507-63541]:Block[61653-63687]"
  }, {
    "left" : "_quadBuffer[0] = _quad1;",
    "right" : "_quadBuffer[0] = _quad1;",
    "info" : "ExpressionStatement[61517-61541]:ExpressionStatement[61663-61687]"
  }, {
    "left" : "_quadBuffer[1] = q2;",
    "right" : "_quadBuffer[1] = q2;",
    "info" : "ExpressionStatement[61550-61570]:ExpressionStatement[61696-61716]"
  }, {
    "left" : "_quadBuffer[2] = q3;",
    "right" : "_quadBuffer[2] = q3;",
    "info" : "ExpressionStatement[61579-61599]:ExpressionStatement[61725-61745]"
  }, {
    "left" : "final byte[] input = _inputBuffer;",
    "right" : "final byte[] input = _inputBuffer;",
    "info" : "VariableDeclarationStatement[61681-61715]:VariableDeclarationStatement[61827-61861]"
  }, {
    "left" : "final int[] codes = _icLatin1;",
    "right" : "final int[] codes = _icLatin1;",
    "info" : "VariableDeclarationStatement[61724-61754]:VariableDeclarationStatement[61870-61900]"
  }, {
    "left" : "int qlen = 3;",
    "right" : "int qlen = 3;",
    "info" : "VariableDeclarationStatement[61763-61776]:VariableDeclarationStatement[61909-61922]"
  }, {
    "left" : "while ((_inputPtr + 4) <= _inputEnd)",
    "right" : "while ((_inputPtr + 4) <= _inputEnd)",
    "info" : "WhileStatement[61786-63284]:WhileStatement[61932-63430]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[61823-63284]:Block[61969-63430]"
  }, {
    "left" : "int i = input[_inputPtr++] & 0xFF;",
    "right" : "int i = input[_inputPtr++] & 0xFF;",
    "info" : "VariableDeclarationStatement[61837-61871]:VariableDeclarationStatement[61983-62017]"
  }, {
    "left" : "if (codes[i] != 0)",
    "right" : "if (codes[i] != 0)",
    "info" : "IfStatement[61884-62105]:IfStatement[62030-62251]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[61903-62105]:Block[62049-62251]"
  }, {
    "left" : "if (i == INT_QUOTE)",
    "right" : "if (i == INT_QUOTE)",
    "info" : "IfStatement[61921-62022]:IfStatement[62067-62168]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[61941-62022]:Block[62087-62168]"
  }, {
    "left" : "return findName(_quadBuffer, qlen, q, 1);",
    "right" : "return findName(_quadBuffer, qlen, q, 1);",
    "info" : "ReturnStatement[61963-62004]:ReturnStatement[62109-62150]"
  }, {
    "left" : "return parseEscapedName(_quadBuffer, qlen, q, i, 1);",
    "right" : "return parseEscapedName(_quadBuffer, qlen, q, i, 1);",
    "info" : "ReturnStatement[62039-62091]:ReturnStatement[62185-62237]"
  }, {
    "left" : "q = (q << 8) | i;",
    "right" : "q = (q << 8) | i;",
    "info" : "ExpressionStatement[62119-62136]:ExpressionStatement[62265-62282]"
  }, {
    "left" : "i = input[_inputPtr++] & 0xFF;",
    "right" : "i = input[_inputPtr++] & 0xFF;",
    "info" : "ExpressionStatement[62149-62179]:ExpressionStatement[62295-62325]"
  }, {
    "left" : "if (codes[i] != 0)",
    "right" : "if (codes[i] != 0)",
    "info" : "IfStatement[62192-62413]:IfStatement[62338-62559]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[62211-62413]:Block[62357-62559]"
  }, {
    "left" : "if (i == INT_QUOTE)",
    "right" : "if (i == INT_QUOTE)",
    "info" : "IfStatement[62229-62330]:IfStatement[62375-62476]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[62249-62330]:Block[62395-62476]"
  }, {
    "left" : "return findName(_quadBuffer, qlen, q, 2);",
    "right" : "return findName(_quadBuffer, qlen, q, 2);",
    "info" : "ReturnStatement[62271-62312]:ReturnStatement[62417-62458]"
  }, {
    "left" : "return parseEscapedName(_quadBuffer, qlen, q, i, 2);",
    "right" : "return parseEscapedName(_quadBuffer, qlen, q, i, 2);",
    "info" : "ReturnStatement[62347-62399]:ReturnStatement[62493-62545]"
  }, {
    "left" : "q = (q << 8) | i;",
    "right" : "q = (q << 8) | i;",
    "info" : "ExpressionStatement[62427-62444]:ExpressionStatement[62573-62590]"
  }, {
    "left" : "i = input[_inputPtr++] & 0xFF;",
    "right" : "i = input[_inputPtr++] & 0xFF;",
    "info" : "ExpressionStatement[62457-62487]:ExpressionStatement[62603-62633]"
  }, {
    "left" : "if (codes[i] != 0)",
    "right" : "if (codes[i] != 0)",
    "info" : "IfStatement[62500-62721]:IfStatement[62646-62867]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[62519-62721]:Block[62665-62867]"
  }, {
    "left" : "if (i == INT_QUOTE)",
    "right" : "if (i == INT_QUOTE)",
    "info" : "IfStatement[62537-62638]:IfStatement[62683-62784]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[62557-62638]:Block[62703-62784]"
  }, {
    "left" : "return findName(_quadBuffer, qlen, q, 3);",
    "right" : "return findName(_quadBuffer, qlen, q, 3);",
    "info" : "ReturnStatement[62579-62620]:ReturnStatement[62725-62766]"
  }, {
    "left" : "return parseEscapedName(_quadBuffer, qlen, q, i, 3);",
    "right" : "return parseEscapedName(_quadBuffer, qlen, q, i, 3);",
    "info" : "ReturnStatement[62655-62707]:ReturnStatement[62801-62853]"
  }, {
    "left" : "q = (q << 8) | i;",
    "right" : "q = (q << 8) | i;",
    "info" : "ExpressionStatement[62735-62752]:ExpressionStatement[62881-62898]"
  }, {
    "left" : "i = input[_inputPtr++] & 0xFF;",
    "right" : "i = input[_inputPtr++] & 0xFF;",
    "info" : "ExpressionStatement[62765-62795]:ExpressionStatement[62911-62941]"
  }, {
    "left" : "if (codes[i] != 0)",
    "right" : "if (codes[i] != 0)",
    "info" : "IfStatement[62808-63029]:IfStatement[62954-63175]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[62827-63029]:Block[62973-63175]"
  }, {
    "left" : "if (i == INT_QUOTE)",
    "right" : "if (i == INT_QUOTE)",
    "info" : "IfStatement[62845-62946]:IfStatement[62991-63092]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[62865-62946]:Block[63011-63092]"
  }, {
    "left" : "return findName(_quadBuffer, qlen, q, 4);",
    "right" : "return findName(_quadBuffer, qlen, q, 4);",
    "info" : "ReturnStatement[62887-62928]:ReturnStatement[63033-63074]"
  }, {
    "left" : "return parseEscapedName(_quadBuffer, qlen, q, i, 4);",
    "right" : "return parseEscapedName(_quadBuffer, qlen, q, i, 4);",
    "info" : "ReturnStatement[62963-63015]:ReturnStatement[63109-63161]"
  }, {
    "left" : "if (qlen >= _quadBuffer.length)",
    "right" : "if (qlen >= _quadBuffer.length)",
    "info" : "IfStatement[63109-63218]:IfStatement[63255-63364]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[63141-63218]:Block[63287-63364]"
  }, {
    "left" : "_quadBuffer = growArrayBy(_quadBuffer, qlen);",
    "right" : "_quadBuffer = growArrayBy(_quadBuffer, qlen);",
    "info" : "ExpressionStatement[63159-63204]:ExpressionStatement[63305-63350]"
  }, {
    "left" : "_quadBuffer[qlen++] = q;",
    "right" : "_quadBuffer[qlen++] = q;",
    "info" : "ExpressionStatement[63231-63255]:ExpressionStatement[63377-63401]"
  }, {
    "left" : "q = i;",
    "right" : "q = i;",
    "info" : "ExpressionStatement[63268-63274]:ExpressionStatement[63414-63420]"
  }, {
    "left" : "return parseEscapedName(_quadBuffer, qlen, 0, q, 0);",
    "right" : "return parseEscapedName(_quadBuffer, qlen, 0, q, 0);",
    "info" : "ReturnStatement[63483-63535]:ReturnStatement[63629-63681]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[63750-63759]:Modifier[63896-63905]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[63760-63766]:SimpleType[63906-63912]"
  }, {
    "left" : "slowParseName",
    "right" : "slowParseName",
    "info" : "SimpleName[63767-63780]:SimpleName[63913-63926]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[63790-63801]:SimpleType[63936-63947]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[63806-64173]:Block[63952-64319]"
  }, {
    "left" : "if (_inputPtr >= _inputEnd)",
    "right" : "if (_inputPtr >= _inputEnd)",
    "info" : "IfStatement[63816-63976]:IfStatement[63962-64122]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[63844-63976]:Block[63990-64122]"
  }, {
    "left" : "if (!loadMore())",
    "right" : "if (!loadMore())",
    "info" : "IfStatement[63858-63966]:IfStatement[64004-64112]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[63875-63966]:Block[64021-64112]"
  }, {
    "left" : "_reportInvalidEOF(\": was expecting closing '\\\"' for name\");",
    "right" : "_reportInvalidEOF(\": was expecting closing '\\\"' for name\");",
    "info" : "ExpressionStatement[63893-63952]:ExpressionStatement[64039-64098]"
  }, {
    "left" : "int i = _inputBuffer[_inputPtr++] & 0xFF;",
    "right" : "int i = _inputBuffer[_inputPtr++] & 0xFF;",
    "info" : "VariableDeclarationStatement[63985-64026]:VariableDeclarationStatement[64131-64172]"
  }, {
    "left" : "if (i == INT_QUOTE)",
    "right" : "if (i == INT_QUOTE)",
    "info" : "IfStatement[64035-64109]:IfStatement[64181-64255]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[64055-64109]:Block[64201-64255]"
  }, {
    "left" : "return \"\";",
    "right" : "return \"\";",
    "info" : "ReturnStatement[64089-64099]:ReturnStatement[64235-64245]"
  }, {
    "left" : "return parseEscapedName(_quadBuffer, 0, 0, i, 0);",
    "right" : "return parseEscapedName(_quadBuffer, 0, 0, i, 0);",
    "info" : "ReturnStatement[64118-64167]:ReturnStatement[64264-64313]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[64179-64186]:Modifier[64325-64332]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[64187-64192]:Modifier[64333-64338]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[64193-64199]:SimpleType[64339-64345]"
  }, {
    "left" : "parseName",
    "right" : "parseName",
    "info" : "SimpleName[64200-64209]:SimpleName[64346-64355]"
  }, {
    "left" : "int q1",
    "right" : "int q1",
    "info" : "SingleVariableDeclaration[64210-64216]:SingleVariableDeclaration[64356-64362]"
  }, {
    "left" : "int ch",
    "right" : "int ch",
    "info" : "SingleVariableDeclaration[64218-64224]:SingleVariableDeclaration[64364-64370]"
  }, {
    "left" : "int lastQuadBytes",
    "right" : "int lastQuadBytes",
    "info" : "SingleVariableDeclaration[64226-64243]:SingleVariableDeclaration[64372-64389]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[64252-64263]:SimpleType[64398-64409]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[64264-64343]:Block[64410-64489]"
  }, {
    "left" : "return parseEscapedName(_quadBuffer, 0, q1, ch, lastQuadBytes);",
    "right" : "return parseEscapedName(_quadBuffer, 0, q1, ch, lastQuadBytes);",
    "info" : "ReturnStatement[64274-64337]:ReturnStatement[64420-64483]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[64349-64356]:Modifier[64495-64502]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[64357-64362]:Modifier[64503-64508]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[64363-64369]:SimpleType[64509-64515]"
  }, {
    "left" : "parseName",
    "right" : "parseName",
    "info" : "SimpleName[64370-64379]:SimpleName[64516-64525]"
  }, {
    "left" : "int q1",
    "right" : "int q1",
    "info" : "SingleVariableDeclaration[64380-64386]:SingleVariableDeclaration[64526-64532]"
  }, {
    "left" : "int q2",
    "right" : "int q2",
    "info" : "SingleVariableDeclaration[64388-64394]:SingleVariableDeclaration[64534-64540]"
  }, {
    "left" : "int ch",
    "right" : "int ch",
    "info" : "SingleVariableDeclaration[64396-64402]:SingleVariableDeclaration[64542-64548]"
  }, {
    "left" : "int lastQuadBytes",
    "right" : "int lastQuadBytes",
    "info" : "SingleVariableDeclaration[64404-64421]:SingleVariableDeclaration[64550-64567]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[64430-64441]:SimpleType[64576-64587]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[64442-64550]:Block[64588-64696]"
  }, {
    "left" : "_quadBuffer[0] = q1;",
    "right" : "_quadBuffer[0] = q1;",
    "info" : "ExpressionStatement[64452-64472]:ExpressionStatement[64598-64618]"
  }, {
    "left" : "return parseEscapedName(_quadBuffer, 1, q2, ch, lastQuadBytes);",
    "right" : "return parseEscapedName(_quadBuffer, 1, q2, ch, lastQuadBytes);",
    "info" : "ReturnStatement[64481-64544]:ReturnStatement[64627-64690]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[64556-64563]:Modifier[64702-64709]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[64564-64569]:Modifier[64710-64715]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[64570-64576]:SimpleType[64716-64722]"
  }, {
    "left" : "parseName",
    "right" : "parseName",
    "info" : "SimpleName[64577-64586]:SimpleName[64723-64732]"
  }, {
    "left" : "int q1",
    "right" : "int q1",
    "info" : "SingleVariableDeclaration[64587-64593]:SingleVariableDeclaration[64733-64739]"
  }, {
    "left" : "int q2",
    "right" : "int q2",
    "info" : "SingleVariableDeclaration[64595-64601]:SingleVariableDeclaration[64741-64747]"
  }, {
    "left" : "int q3",
    "right" : "int q3",
    "info" : "SingleVariableDeclaration[64603-64609]:SingleVariableDeclaration[64749-64755]"
  }, {
    "left" : "int ch",
    "right" : "int ch",
    "info" : "SingleVariableDeclaration[64611-64617]:SingleVariableDeclaration[64757-64763]"
  }, {
    "left" : "int lastQuadBytes",
    "right" : "int lastQuadBytes",
    "info" : "SingleVariableDeclaration[64619-64636]:SingleVariableDeclaration[64765-64782]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[64645-64656]:SimpleType[64791-64802]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[64657-64794]:Block[64803-64940]"
  }, {
    "left" : "_quadBuffer[0] = q1;",
    "right" : "_quadBuffer[0] = q1;",
    "info" : "ExpressionStatement[64667-64687]:ExpressionStatement[64813-64833]"
  }, {
    "left" : "_quadBuffer[1] = q2;",
    "right" : "_quadBuffer[1] = q2;",
    "info" : "ExpressionStatement[64696-64716]:ExpressionStatement[64842-64862]"
  }, {
    "left" : "return parseEscapedName(_quadBuffer, 2, q3, ch, lastQuadBytes);",
    "right" : "return parseEscapedName(_quadBuffer, 2, q3, ch, lastQuadBytes);",
    "info" : "ReturnStatement[64725-64788]:ReturnStatement[64871-64934]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[65123-65132]:Modifier[65269-65278]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[65133-65138]:Modifier[65279-65284]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[65139-65145]:SimpleType[65285-65291]"
  }, {
    "left" : "parseEscapedName",
    "right" : "parseEscapedName",
    "info" : "SimpleName[65146-65162]:SimpleName[65292-65308]"
  }, {
    "left" : "int[] quads",
    "right" : "int[] quads",
    "info" : "SingleVariableDeclaration[65163-65174]:SingleVariableDeclaration[65309-65320]"
  }, {
    "left" : "int qlen",
    "right" : "int qlen",
    "info" : "SingleVariableDeclaration[65176-65184]:SingleVariableDeclaration[65322-65330]"
  }, {
    "left" : "int currQuad",
    "right" : "int currQuad",
    "info" : "SingleVariableDeclaration[65186-65198]:SingleVariableDeclaration[65332-65344]"
  }, {
    "left" : "int ch",
    "right" : "int ch",
    "info" : "SingleVariableDeclaration[65200-65206]:SingleVariableDeclaration[65346-65352]"
  }, {
    "left" : "int currQuadBytes",
    "right" : "int currQuadBytes",
    "info" : "SingleVariableDeclaration[65220-65237]:SingleVariableDeclaration[65366-65383]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[65246-65257]:SimpleType[65392-65403]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[65262-69052]:Block[65408-69198]"
  }, {
    "left" : "final int[] codes = _icLatin1;",
    "right" : "final int[] codes = _icLatin1;",
    "info" : "VariableDeclarationStatement[65540-65570]:VariableDeclarationStatement[65686-65716]"
  }, {
    "left" : "while (true)",
    "right" : "while (true)",
    "info" : "WhileStatement[65580-68649]:WhileStatement[65726-68795]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[65593-68649]:Block[65739-68795]"
  }, {
    "left" : "if (codes[ch] != 0)",
    "right" : "if (codes[ch] != 0)",
    "info" : "IfStatement[65607-67961]:IfStatement[65753-68107]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[65627-67961]:Block[65773-68107]"
  }, {
    "left" : "if (ch == INT_QUOTE)",
    "right" : "if (ch == INT_QUOTE)",
    "info" : "IfStatement[65645-65727]:IfStatement[65791-65873]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[65666-65727]:Block[65812-65873]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[65703-65709]:BreakStatement[65849-65855]"
  }, {
    "left" : "if (ch != INT_BACKSLASH)",
    "right" : "if (ch != INT_BACKSLASH)",
    "info" : "IfStatement[65785-66061]:IfStatement[65931-66207]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[65810-65948]:Block[65956-66094]"
  }, {
    "left" : "_throwUnquotedSpace(ch, \"name\");",
    "right" : "_throwUnquotedSpace(ch, \"name\");",
    "info" : "ExpressionStatement[65898-65930]:ExpressionStatement[66044-66076]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[65954-66061]:Block[66100-66207]"
  }, {
    "left" : "ch = _decodeEscaped();",
    "right" : "ch = _decodeEscaped();",
    "info" : "ExpressionStatement[66021-66043]:ExpressionStatement[66167-66189]"
  }, {
    "left" : "if (ch > 127)",
    "right" : "if (ch > 127)",
    "info" : "IfStatement[66356-67947]:IfStatement[66502-68093]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[66370-67947]:Block[66516-68093]"
  }, {
    "left" : "if (currQuadBytes >= 4)",
    "right" : "if (currQuadBytes >= 4)",
    "info" : "IfStatement[66461-66801]:IfStatement[66607-66947]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[66485-66801]:Block[66631-66947]"
  }, {
    "left" : "if (qlen >= quads.length)",
    "right" : "if (qlen >= quads.length)",
    "info" : "IfStatement[66511-66648]:IfStatement[66657-66794]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[66537-66648]:Block[66683-66794]"
  }, {
    "left" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
    "right" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
    "info" : "ExpressionStatement[66567-66622]:ExpressionStatement[66713-66768]"
  }, {
    "left" : "quads[qlen++] = currQuad;",
    "right" : "quads[qlen++] = currQuad;",
    "info" : "ExpressionStatement[66673-66698]:ExpressionStatement[66819-66844]"
  }, {
    "left" : "currQuad = 0;",
    "right" : "currQuad = 0;",
    "info" : "ExpressionStatement[66723-66736]:ExpressionStatement[66869-66882]"
  }, {
    "left" : "currQuadBytes = 0;",
    "right" : "currQuadBytes = 0;",
    "info" : "ExpressionStatement[66761-66779]:ExpressionStatement[66907-66925]"
  }, {
    "left" : "if (ch < 0x800)",
    "right" : "if (ch < 0x800)",
    "info" : "IfStatement[66822-67808]:IfStatement[66968-67954]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[66838-67043]:Block[66984-67189]"
  }, {
    "left" : "currQuad = (currQuad << 8) | (0xc0 | (ch >> 6));",
    "right" : "currQuad = (currQuad << 8) | (0xc0 | (ch >> 6));",
    "info" : "ExpressionStatement[66874-66922]:ExpressionStatement[67020-67068]"
  }, {
    "left" : "++currQuadBytes;",
    "right" : "++currQuadBytes;",
    "info" : "ExpressionStatement[66947-66963]:ExpressionStatement[67093-67109]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[67049-67808]:Block[67195-67954]"
  }, {
    "left" : "currQuad = (currQuad << 8) | (0xe0 | (ch >> 12));",
    "right" : "currQuad = (currQuad << 8) | (0xe0 | (ch >> 12));",
    "info" : "ExpressionStatement[67126-67175]:ExpressionStatement[67272-67321]"
  }, {
    "left" : "++currQuadBytes;",
    "right" : "++currQuadBytes;",
    "info" : "ExpressionStatement[67200-67216]:ExpressionStatement[67346-67362]"
  }, {
    "left" : "if (currQuadBytes >= 4)",
    "right" : "if (currQuadBytes >= 4)",
    "info" : "IfStatement[67295-67663]:IfStatement[67441-67809]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[67319-67663]:Block[67465-67809]"
  }, {
    "left" : "if (qlen >= quads.length)",
    "right" : "if (qlen >= quads.length)",
    "info" : "IfStatement[67349-67494]:IfStatement[67495-67640]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[67375-67494]:Block[67521-67640]"
  }, {
    "left" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
    "right" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
    "info" : "ExpressionStatement[67409-67464]:ExpressionStatement[67555-67610]"
  }, {
    "left" : "quads[qlen++] = currQuad;",
    "right" : "quads[qlen++] = currQuad;",
    "info" : "ExpressionStatement[67523-67548]:ExpressionStatement[67669-67694]"
  }, {
    "left" : "currQuad = 0;",
    "right" : "currQuad = 0;",
    "info" : "ExpressionStatement[67577-67590]:ExpressionStatement[67723-67736]"
  }, {
    "left" : "currQuadBytes = 0;",
    "right" : "currQuadBytes = 0;",
    "info" : "ExpressionStatement[67619-67637]:ExpressionStatement[67765-67783]"
  }, {
    "left" : "currQuad = (currQuad << 8) | (0x80 | ((ch >> 6) & 0x3f));",
    "right" : "currQuad = (currQuad << 8) | (0x80 | ((ch >> 6) & 0x3f));",
    "info" : "ExpressionStatement[67688-67745]:ExpressionStatement[67834-67891]"
  }, {
    "left" : "++currQuadBytes;",
    "right" : "++currQuadBytes;",
    "info" : "ExpressionStatement[67770-67786]:ExpressionStatement[67916-67932]"
  }, {
    "left" : "ch = 0x80 | (ch & 0x3f);",
    "right" : "ch = 0x80 | (ch & 0x3f);",
    "info" : "ExpressionStatement[67905-67929]:ExpressionStatement[68051-68075]"
  }, {
    "left" : "if (currQuadBytes < 4)",
    "right" : "if (currQuadBytes < 4)",
    "info" : "IfStatement[68035-68422]:IfStatement[68181-68568]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[68058-68155]:Block[68204-68301]"
  }, {
    "left" : "++currQuadBytes;",
    "right" : "++currQuadBytes;",
    "info" : "ExpressionStatement[68076-68092]:ExpressionStatement[68222-68238]"
  }, {
    "left" : "currQuad = (currQuad << 8) | ch;",
    "right" : "currQuad = (currQuad << 8) | ch;",
    "info" : "ExpressionStatement[68109-68141]:ExpressionStatement[68255-68287]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[68161-68422]:Block[68307-68568]"
  }, {
    "left" : "if (qlen >= quads.length)",
    "right" : "if (qlen >= quads.length)",
    "info" : "IfStatement[68179-68300]:IfStatement[68325-68446]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[68205-68300]:Block[68351-68446]"
  }, {
    "left" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
    "right" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
    "info" : "ExpressionStatement[68227-68282]:ExpressionStatement[68373-68428]"
  }, {
    "left" : "quads[qlen++] = currQuad;",
    "right" : "quads[qlen++] = currQuad;",
    "info" : "ExpressionStatement[68317-68342]:ExpressionStatement[68463-68488]"
  }, {
    "left" : "currQuad = ch;",
    "right" : "currQuad = ch;",
    "info" : "ExpressionStatement[68359-68373]:ExpressionStatement[68505-68519]"
  }, {
    "left" : "currQuadBytes = 1;",
    "right" : "currQuadBytes = 1;",
    "info" : "ExpressionStatement[68390-68408]:ExpressionStatement[68536-68554]"
  }, {
    "left" : "if (_inputPtr >= _inputEnd)",
    "right" : "if (_inputPtr >= _inputEnd)",
    "info" : "IfStatement[68435-68588]:IfStatement[68581-68734]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[68463-68588]:Block[68609-68734]"
  }, {
    "left" : "if (!loadMore())",
    "right" : "if (!loadMore())",
    "info" : "IfStatement[68481-68574]:IfStatement[68627-68720]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[68498-68574]:Block[68644-68720]"
  }, {
    "left" : "_reportInvalidEOF(\" in field name\");",
    "right" : "_reportInvalidEOF(\" in field name\");",
    "info" : "ExpressionStatement[68520-68556]:ExpressionStatement[68666-68702]"
  }, {
    "left" : "ch = _inputBuffer[_inputPtr++] & 0xFF;",
    "right" : "ch = _inputBuffer[_inputPtr++] & 0xFF;",
    "info" : "ExpressionStatement[68601-68639]:ExpressionStatement[68747-68785]"
  }, {
    "left" : "if (currQuadBytes > 0)",
    "right" : "if (currQuadBytes > 0)",
    "info" : "IfStatement[68659-68877]:IfStatement[68805-69023]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[68682-68877]:Block[68828-69023]"
  }, {
    "left" : "if (qlen >= quads.length)",
    "right" : "if (qlen >= quads.length)",
    "info" : "IfStatement[68696-68809]:IfStatement[68842-68955]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[68722-68809]:Block[68868-68955]"
  }, {
    "left" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
    "right" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
    "info" : "ExpressionStatement[68740-68795]:ExpressionStatement[68886-68941]"
  }, {
    "left" : "quads[qlen++] = pad(currQuad, currQuadBytes);",
    "right" : "quads[qlen++] = pad(currQuad, currQuadBytes);",
    "info" : "ExpressionStatement[68822-68867]:ExpressionStatement[68968-69013]"
  }, {
    "left" : "String name = _symbols.findName(quads, qlen);",
    "right" : "String name = _symbols.findName(quads, qlen);",
    "info" : "VariableDeclarationStatement[68886-68931]:VariableDeclarationStatement[69032-69077]"
  }, {
    "left" : "if (name == null)",
    "right" : "if (name == null)",
    "info" : "IfStatement[68940-69025]:IfStatement[69086-69171]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[68958-69025]:Block[69104-69171]"
  }, {
    "left" : "name = addName(quads, qlen, currQuadBytes);",
    "right" : "name = addName(quads, qlen, currQuadBytes);",
    "info" : "ExpressionStatement[68972-69015]:ExpressionStatement[69118-69161]"
  }, {
    "left" : "return name;",
    "right" : "return name;",
    "info" : "ReturnStatement[69034-69046]:ReturnStatement[69180-69192]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[69308-69317]:Modifier[69454-69463]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[69318-69324]:SimpleType[69464-69470]"
  }, {
    "left" : "_handleOddName",
    "right" : "_handleOddName",
    "info" : "SimpleName[69325-69339]:SimpleName[69471-69485]"
  }, {
    "left" : "int ch",
    "right" : "int ch",
    "info" : "SingleVariableDeclaration[69340-69346]:SingleVariableDeclaration[69486-69492]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[69355-69366]:SimpleType[69501-69512]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[69371-71846]:Block[69517-71992]"
  }, {
    "left" : "if (ch == '\\'' && isEnabled(Feature.ALLOW_SINGLE_QUOTES))",
    "right" : "if (ch == '\\'' && isEnabled(Feature.ALLOW_SINGLE_QUOTES))",
    "info" : "IfStatement[69427-69533]:IfStatement[69573-69679]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[69485-69533]:Block[69631-69679]"
  }, {
    "left" : "return _parseAposName();",
    "right" : "return _parseAposName();",
    "info" : "ReturnStatement[69499-69523]:ReturnStatement[69645-69669]"
  }, {
    "left" : "if (!isEnabled(Feature.ALLOW_UNQUOTED_FIELD_NAMES))",
    "right" : "if (!isEnabled(Feature.ALLOW_UNQUOTED_FIELD_NAMES))",
    "info" : "IfStatement[69608-69812]:IfStatement[69754-69958]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[69660-69812]:Block[69806-69958]"
  }, {
    "left" : "char c = (char) _decodeCharForError(ch);",
    "right" : "char c = (char) _decodeCharForError(ch);",
    "info" : "VariableDeclarationStatement[69674-69714]:VariableDeclarationStatement[69820-69860]"
  }, {
    "left" : "_reportUnexpectedChar(c, \"was expecting double-quote to start field name\");",
    "right" : "_reportUnexpectedChar(c, \"was expecting double-quote to start field name\");",
    "info" : "ExpressionStatement[69727-69802]:ExpressionStatement[69873-69948]"
  }, {
    "left" : "final int[] codes = CharTypes.getInputCodeUtf8JsNames();",
    "right" : "final int[] codes = CharTypes.getInputCodeUtf8JsNames();",
    "info" : "VariableDeclarationStatement[70028-70084]:VariableDeclarationStatement[70174-70230]"
  }, {
    "left" : "if (codes[ch] != 0)",
    "right" : "if (codes[ch] != 0)",
    "info" : "IfStatement[70147-70331]:IfStatement[70293-70477]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[70167-70331]:Block[70313-70477]"
  }, {
    "left" : "_reportUnexpectedChar(ch, \"was expecting either valid name character (for unquoted name) or double-quote (for quoted) to start field name\");",
    "right" : "_reportUnexpectedChar(ch, \"was expecting either valid name character (for unquoted name) or double-quote (for quoted) to start field name\");",
    "info" : "ExpressionStatement[70181-70321]:ExpressionStatement[70327-70467]"
  }, {
    "left" : "int[] quads = _quadBuffer;",
    "right" : "int[] quads = _quadBuffer;",
    "info" : "VariableDeclarationStatement[70552-70578]:VariableDeclarationStatement[70698-70724]"
  }, {
    "left" : "int qlen = 0;",
    "right" : "int qlen = 0;",
    "info" : "VariableDeclarationStatement[70587-70600]:VariableDeclarationStatement[70733-70746]"
  }, {
    "left" : "int currQuad = 0;",
    "right" : "int currQuad = 0;",
    "info" : "VariableDeclarationStatement[70609-70626]:VariableDeclarationStatement[70755-70772]"
  }, {
    "left" : "int currQuadBytes = 0;",
    "right" : "int currQuadBytes = 0;",
    "info" : "VariableDeclarationStatement[70635-70657]:VariableDeclarationStatement[70781-70803]"
  }, {
    "left" : "while (true)",
    "right" : "while (true)",
    "info" : "WhileStatement[70667-71463]:WhileStatement[70813-71609]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[70680-71463]:Block[70826-71609]"
  }, {
    "left" : "if (currQuadBytes < 4)",
    "right" : "if (currQuadBytes < 4)",
    "info" : "IfStatement[70755-71142]:IfStatement[70901-71288]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[70778-70875]:Block[70924-71021]"
  }, {
    "left" : "++currQuadBytes;",
    "right" : "++currQuadBytes;",
    "info" : "ExpressionStatement[70796-70812]:ExpressionStatement[70942-70958]"
  }, {
    "left" : "currQuad = (currQuad << 8) | ch;",
    "right" : "currQuad = (currQuad << 8) | ch;",
    "info" : "ExpressionStatement[70829-70861]:ExpressionStatement[70975-71007]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[70881-71142]:Block[71027-71288]"
  }, {
    "left" : "if (qlen >= quads.length)",
    "right" : "if (qlen >= quads.length)",
    "info" : "IfStatement[70899-71020]:IfStatement[71045-71166]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[70925-71020]:Block[71071-71166]"
  }, {
    "left" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
    "right" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
    "info" : "ExpressionStatement[70947-71002]:ExpressionStatement[71093-71148]"
  }, {
    "left" : "quads[qlen++] = currQuad;",
    "right" : "quads[qlen++] = currQuad;",
    "info" : "ExpressionStatement[71037-71062]:ExpressionStatement[71183-71208]"
  }, {
    "left" : "currQuad = ch;",
    "right" : "currQuad = ch;",
    "info" : "ExpressionStatement[71079-71093]:ExpressionStatement[71225-71239]"
  }, {
    "left" : "currQuadBytes = 1;",
    "right" : "currQuadBytes = 1;",
    "info" : "ExpressionStatement[71110-71128]:ExpressionStatement[71256-71274]"
  }, {
    "left" : "if (_inputPtr >= _inputEnd)",
    "right" : "if (_inputPtr >= _inputEnd)",
    "info" : "IfStatement[71155-71308]:IfStatement[71301-71454]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[71183-71308]:Block[71329-71454]"
  }, {
    "left" : "if (!loadMore())",
    "right" : "if (!loadMore())",
    "info" : "IfStatement[71201-71294]:IfStatement[71347-71440]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[71218-71294]:Block[71364-71440]"
  }, {
    "left" : "_reportInvalidEOF(\" in field name\");",
    "right" : "_reportInvalidEOF(\" in field name\");",
    "info" : "ExpressionStatement[71240-71276]:ExpressionStatement[71386-71422]"
  }, {
    "left" : "ch = _inputBuffer[_inputPtr] & 0xFF;",
    "right" : "ch = _inputBuffer[_inputPtr] & 0xFF;",
    "info" : "ExpressionStatement[71321-71357]:ExpressionStatement[71467-71503]"
  }, {
    "left" : "if (codes[ch] != 0)",
    "right" : "if (codes[ch] != 0)",
    "info" : "IfStatement[71370-71428]:IfStatement[71516-71574]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[71390-71428]:Block[71536-71574]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[71408-71414]:BreakStatement[71554-71560]"
  }, {
    "left" : "++_inputPtr;",
    "right" : "++_inputPtr;",
    "info" : "ExpressionStatement[71441-71453]:ExpressionStatement[71587-71599]"
  }, {
    "left" : "if (currQuadBytes > 0)",
    "right" : "if (currQuadBytes > 0)",
    "info" : "IfStatement[71473-71671]:IfStatement[71619-71817]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[71496-71671]:Block[71642-71817]"
  }, {
    "left" : "if (qlen >= quads.length)",
    "right" : "if (qlen >= quads.length)",
    "info" : "IfStatement[71510-71623]:IfStatement[71656-71769]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[71536-71623]:Block[71682-71769]"
  }, {
    "left" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
    "right" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
    "info" : "ExpressionStatement[71554-71609]:ExpressionStatement[71700-71755]"
  }, {
    "left" : "quads[qlen++] = currQuad;",
    "right" : "quads[qlen++] = currQuad;",
    "info" : "ExpressionStatement[71636-71661]:ExpressionStatement[71782-71807]"
  }, {
    "left" : "String name = _symbols.findName(quads, qlen);",
    "right" : "String name = _symbols.findName(quads, qlen);",
    "info" : "VariableDeclarationStatement[71680-71725]:VariableDeclarationStatement[71826-71871]"
  }, {
    "left" : "if (name == null)",
    "right" : "if (name == null)",
    "info" : "IfStatement[71734-71819]:IfStatement[71880-71965]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[71752-71819]:Block[71898-71965]"
  }, {
    "left" : "name = addName(quads, qlen, currQuadBytes);",
    "right" : "name = addName(quads, qlen, currQuadBytes);",
    "info" : "ExpressionStatement[71766-71809]:ExpressionStatement[71912-71955]"
  }, {
    "left" : "return name;",
    "right" : "return name;",
    "info" : "ReturnStatement[71828-71840]:ReturnStatement[71974-71986]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[72086-72095]:Modifier[72232-72241]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[72096-72102]:SimpleType[72242-72248]"
  }, {
    "left" : "_parseAposName",
    "right" : "_parseAposName",
    "info" : "SimpleName[72103-72117]:SimpleName[72249-72263]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[72127-72138]:SimpleType[72273-72284]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[72143-76185]:Block[72289-76331]"
  }, {
    "left" : "if (_inputPtr >= _inputEnd)",
    "right" : "if (_inputPtr >= _inputEnd)",
    "info" : "IfStatement[72153-72313]:IfStatement[72299-72459]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[72181-72313]:Block[72327-72459]"
  }, {
    "left" : "if (!loadMore())",
    "right" : "if (!loadMore())",
    "info" : "IfStatement[72195-72303]:IfStatement[72341-72449]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[72212-72303]:Block[72358-72449]"
  }, {
    "left" : "_reportInvalidEOF(\": was expecting closing '\\'' for name\");",
    "right" : "_reportInvalidEOF(\": was expecting closing '\\'' for name\");",
    "info" : "ExpressionStatement[72230-72289]:ExpressionStatement[72376-72435]"
  }, {
    "left" : "int ch = _inputBuffer[_inputPtr++] & 0xFF;",
    "right" : "int ch = _inputBuffer[_inputPtr++] & 0xFF;",
    "info" : "VariableDeclarationStatement[72322-72364]:VariableDeclarationStatement[72468-72510]"
  }, {
    "left" : "if (ch == '\\'')",
    "right" : "if (ch == '\\'')",
    "info" : "IfStatement[72373-72443]:IfStatement[72519-72589]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[72389-72443]:Block[72535-72589]"
  }, {
    "left" : "return \"\";",
    "right" : "return \"\";",
    "info" : "ReturnStatement[72423-72433]:ReturnStatement[72569-72579]"
  }, {
    "left" : "int[] quads = _quadBuffer;",
    "right" : "int[] quads = _quadBuffer;",
    "info" : "VariableDeclarationStatement[72452-72478]:VariableDeclarationStatement[72598-72624]"
  }, {
    "left" : "int qlen = 0;",
    "right" : "int qlen = 0;",
    "info" : "VariableDeclarationStatement[72487-72500]:VariableDeclarationStatement[72633-72646]"
  }, {
    "left" : "int currQuad = 0;",
    "right" : "int currQuad = 0;",
    "info" : "VariableDeclarationStatement[72509-72526]:VariableDeclarationStatement[72655-72672]"
  }, {
    "left" : "int currQuadBytes = 0;",
    "right" : "int currQuadBytes = 0;",
    "info" : "VariableDeclarationStatement[72535-72557]:VariableDeclarationStatement[72681-72703]"
  }, {
    "left" : "final int[] codes = _icLatin1;",
    "right" : "final int[] codes = _icLatin1;",
    "info" : "VariableDeclarationStatement[72631-72661]:VariableDeclarationStatement[72777-72807]"
  }, {
    "left" : "while (true)",
    "right" : "while (true)",
    "info" : "WhileStatement[72671-75782]:WhileStatement[72817-75928]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[72684-75782]:Block[72830-75928]"
  }, {
    "left" : "if (ch == '\\'')",
    "right" : "if (ch == '\\'')",
    "info" : "IfStatement[72698-72752]:IfStatement[72844-72898]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[72714-72752]:Block[72860-72898]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[72732-72738]:BreakStatement[72878-72884]"
  }, {
    "left" : "if (ch != '\"' && codes[ch] != 0)",
    "right" : "if (ch != '\"' && codes[ch] != 0)",
    "info" : "IfStatement[72831-75094]:IfStatement[72977-75240]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[72864-75094]:Block[73010-75240]"
  }, {
    "left" : "if (ch != '\\\\')",
    "right" : "if (ch != '\\\\')",
    "info" : "IfStatement[72882-73194]:IfStatement[73028-73340]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[72898-73081]:Block[73044-73227]"
  }, {
    "left" : "_throwUnquotedSpace(ch, \"name\");",
    "right" : "_throwUnquotedSpace(ch, \"name\");",
    "info" : "ExpressionStatement[73031-73063]:ExpressionStatement[73177-73209]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[73087-73194]:Block[73233-73340]"
  }, {
    "left" : "ch = _decodeEscaped();",
    "right" : "ch = _decodeEscaped();",
    "info" : "ExpressionStatement[73154-73176]:ExpressionStatement[73300-73322]"
  }, {
    "left" : "if (ch > 127)",
    "right" : "if (ch > 127)",
    "info" : "IfStatement[73489-75080]:IfStatement[73635-75226]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[73503-75080]:Block[73649-75226]"
  }, {
    "left" : "if (currQuadBytes >= 4)",
    "right" : "if (currQuadBytes >= 4)",
    "info" : "IfStatement[73594-73934]:IfStatement[73740-74080]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[73618-73934]:Block[73764-74080]"
  }, {
    "left" : "if (qlen >= quads.length)",
    "right" : "if (qlen >= quads.length)",
    "info" : "IfStatement[73644-73781]:IfStatement[73790-73927]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[73670-73781]:Block[73816-73927]"
  }, {
    "left" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
    "right" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
    "info" : "ExpressionStatement[73700-73755]:ExpressionStatement[73846-73901]"
  }, {
    "left" : "quads[qlen++] = currQuad;",
    "right" : "quads[qlen++] = currQuad;",
    "info" : "ExpressionStatement[73806-73831]:ExpressionStatement[73952-73977]"
  }, {
    "left" : "currQuad = 0;",
    "right" : "currQuad = 0;",
    "info" : "ExpressionStatement[73856-73869]:ExpressionStatement[74002-74015]"
  }, {
    "left" : "currQuadBytes = 0;",
    "right" : "currQuadBytes = 0;",
    "info" : "ExpressionStatement[73894-73912]:ExpressionStatement[74040-74058]"
  }, {
    "left" : "if (ch < 0x800)",
    "right" : "if (ch < 0x800)",
    "info" : "IfStatement[73955-74941]:IfStatement[74101-75087]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[73971-74176]:Block[74117-74322]"
  }, {
    "left" : "currQuad = (currQuad << 8) | (0xc0 | (ch >> 6));",
    "right" : "currQuad = (currQuad << 8) | (0xc0 | (ch >> 6));",
    "info" : "ExpressionStatement[74007-74055]:ExpressionStatement[74153-74201]"
  }, {
    "left" : "++currQuadBytes;",
    "right" : "++currQuadBytes;",
    "info" : "ExpressionStatement[74080-74096]:ExpressionStatement[74226-74242]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[74182-74941]:Block[74328-75087]"
  }, {
    "left" : "currQuad = (currQuad << 8) | (0xe0 | (ch >> 12));",
    "right" : "currQuad = (currQuad << 8) | (0xe0 | (ch >> 12));",
    "info" : "ExpressionStatement[74259-74308]:ExpressionStatement[74405-74454]"
  }, {
    "left" : "++currQuadBytes;",
    "right" : "++currQuadBytes;",
    "info" : "ExpressionStatement[74333-74349]:ExpressionStatement[74479-74495]"
  }, {
    "left" : "if (currQuadBytes >= 4)",
    "right" : "if (currQuadBytes >= 4)",
    "info" : "IfStatement[74428-74796]:IfStatement[74574-74942]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[74452-74796]:Block[74598-74942]"
  }, {
    "left" : "if (qlen >= quads.length)",
    "right" : "if (qlen >= quads.length)",
    "info" : "IfStatement[74482-74627]:IfStatement[74628-74773]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[74508-74627]:Block[74654-74773]"
  }, {
    "left" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
    "right" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
    "info" : "ExpressionStatement[74542-74597]:ExpressionStatement[74688-74743]"
  }, {
    "left" : "quads[qlen++] = currQuad;",
    "right" : "quads[qlen++] = currQuad;",
    "info" : "ExpressionStatement[74656-74681]:ExpressionStatement[74802-74827]"
  }, {
    "left" : "currQuad = 0;",
    "right" : "currQuad = 0;",
    "info" : "ExpressionStatement[74710-74723]:ExpressionStatement[74856-74869]"
  }, {
    "left" : "currQuadBytes = 0;",
    "right" : "currQuadBytes = 0;",
    "info" : "ExpressionStatement[74752-74770]:ExpressionStatement[74898-74916]"
  }, {
    "left" : "currQuad = (currQuad << 8) | (0x80 | ((ch >> 6) & 0x3f));",
    "right" : "currQuad = (currQuad << 8) | (0x80 | ((ch >> 6) & 0x3f));",
    "info" : "ExpressionStatement[74821-74878]:ExpressionStatement[74967-75024]"
  }, {
    "left" : "++currQuadBytes;",
    "right" : "++currQuadBytes;",
    "info" : "ExpressionStatement[74903-74919]:ExpressionStatement[75049-75065]"
  }, {
    "left" : "ch = 0x80 | (ch & 0x3f);",
    "right" : "ch = 0x80 | (ch & 0x3f);",
    "info" : "ExpressionStatement[75038-75062]:ExpressionStatement[75184-75208]"
  }, {
    "left" : "if (currQuadBytes < 4)",
    "right" : "if (currQuadBytes < 4)",
    "info" : "IfStatement[75168-75555]:IfStatement[75314-75701]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[75191-75288]:Block[75337-75434]"
  }, {
    "left" : "++currQuadBytes;",
    "right" : "++currQuadBytes;",
    "info" : "ExpressionStatement[75209-75225]:ExpressionStatement[75355-75371]"
  }, {
    "left" : "currQuad = (currQuad << 8) | ch;",
    "right" : "currQuad = (currQuad << 8) | ch;",
    "info" : "ExpressionStatement[75242-75274]:ExpressionStatement[75388-75420]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[75294-75555]:Block[75440-75701]"
  }, {
    "left" : "if (qlen >= quads.length)",
    "right" : "if (qlen >= quads.length)",
    "info" : "IfStatement[75312-75433]:IfStatement[75458-75579]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[75338-75433]:Block[75484-75579]"
  }, {
    "left" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
    "right" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
    "info" : "ExpressionStatement[75360-75415]:ExpressionStatement[75506-75561]"
  }, {
    "left" : "quads[qlen++] = currQuad;",
    "right" : "quads[qlen++] = currQuad;",
    "info" : "ExpressionStatement[75450-75475]:ExpressionStatement[75596-75621]"
  }, {
    "left" : "currQuad = ch;",
    "right" : "currQuad = ch;",
    "info" : "ExpressionStatement[75492-75506]:ExpressionStatement[75638-75652]"
  }, {
    "left" : "currQuadBytes = 1;",
    "right" : "currQuadBytes = 1;",
    "info" : "ExpressionStatement[75523-75541]:ExpressionStatement[75669-75687]"
  }, {
    "left" : "if (_inputPtr >= _inputEnd)",
    "right" : "if (_inputPtr >= _inputEnd)",
    "info" : "IfStatement[75568-75721]:IfStatement[75714-75867]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[75596-75721]:Block[75742-75867]"
  }, {
    "left" : "if (!loadMore())",
    "right" : "if (!loadMore())",
    "info" : "IfStatement[75614-75707]:IfStatement[75760-75853]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[75631-75707]:Block[75777-75853]"
  }, {
    "left" : "_reportInvalidEOF(\" in field name\");",
    "right" : "_reportInvalidEOF(\" in field name\");",
    "info" : "ExpressionStatement[75653-75689]:ExpressionStatement[75799-75835]"
  }, {
    "left" : "ch = _inputBuffer[_inputPtr++] & 0xFF;",
    "right" : "ch = _inputBuffer[_inputPtr++] & 0xFF;",
    "info" : "ExpressionStatement[75734-75772]:ExpressionStatement[75880-75918]"
  }, {
    "left" : "if (currQuadBytes > 0)",
    "right" : "if (currQuadBytes > 0)",
    "info" : "IfStatement[75792-76010]:IfStatement[75938-76156]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[75815-76010]:Block[75961-76156]"
  }, {
    "left" : "if (qlen >= quads.length)",
    "right" : "if (qlen >= quads.length)",
    "info" : "IfStatement[75829-75942]:IfStatement[75975-76088]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[75855-75942]:Block[76001-76088]"
  }, {
    "left" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
    "right" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
    "info" : "ExpressionStatement[75873-75928]:ExpressionStatement[76019-76074]"
  }, {
    "left" : "quads[qlen++] = pad(currQuad, currQuadBytes);",
    "right" : "quads[qlen++] = pad(currQuad, currQuadBytes);",
    "info" : "ExpressionStatement[75955-76000]:ExpressionStatement[76101-76146]"
  }, {
    "left" : "String name = _symbols.findName(quads, qlen);",
    "right" : "String name = _symbols.findName(quads, qlen);",
    "info" : "VariableDeclarationStatement[76019-76064]:VariableDeclarationStatement[76165-76210]"
  }, {
    "left" : "if (name == null)",
    "right" : "if (name == null)",
    "info" : "IfStatement[76073-76158]:IfStatement[76219-76304]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[76091-76158]:Block[76237-76304]"
  }, {
    "left" : "name = addName(quads, qlen, currQuadBytes);",
    "right" : "name = addName(quads, qlen, currQuadBytes);",
    "info" : "ExpressionStatement[76105-76148]:ExpressionStatement[76251-76294]"
  }, {
    "left" : "return name;",
    "right" : "return name;",
    "info" : "ReturnStatement[76167-76179]:ReturnStatement[76313-76325]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[76383-76390]:Modifier[76529-76536]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[76391-76396]:Modifier[76537-76542]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[76397-76403]:SimpleType[76543-76549]"
  }, {
    "left" : "findName",
    "right" : "findName",
    "info" : "SimpleName[76404-76412]:SimpleName[76550-76558]"
  }, {
    "left" : "int q1",
    "right" : "int q1",
    "info" : "SingleVariableDeclaration[76413-76419]:SingleVariableDeclaration[76559-76565]"
  }, {
    "left" : "int lastQuadBytes",
    "right" : "int lastQuadBytes",
    "info" : "SingleVariableDeclaration[76421-76438]:SingleVariableDeclaration[76567-76584]"
  }, {
    "left" : "JsonParseException",
    "right" : "JsonParseException",
    "info" : "SimpleType[76447-76465]:SimpleType[76593-76611]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[76470-76840]:Block[76616-76986]"
  }, {
    "left" : "q1 = pad(q1, lastQuadBytes);",
    "right" : "q1 = pad(q1, lastQuadBytes);",
    "info" : "ExpressionStatement[76480-76508]:ExpressionStatement[76626-76654]"
  }, {
    "left" : "String name = _symbols.findName(q1);",
    "right" : "String name = _symbols.findName(q1);",
    "info" : "VariableDeclarationStatement[76590-76626]:VariableDeclarationStatement[76736-76772]"
  }, {
    "left" : "if (name != null)",
    "right" : "if (name != null)",
    "info" : "IfStatement[76635-76689]:IfStatement[76781-76835]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[76653-76689]:Block[76799-76835]"
  }, {
    "left" : "return name;",
    "right" : "return name;",
    "info" : "ReturnStatement[76667-76679]:ReturnStatement[76813-76825]"
  }, {
    "left" : "_quadBuffer[0] = q1;",
    "right" : "_quadBuffer[0] = q1;",
    "info" : "ExpressionStatement[76759-76779]:ExpressionStatement[76905-76925]"
  }, {
    "left" : "return addName(_quadBuffer, 1, lastQuadBytes);",
    "right" : "return addName(_quadBuffer, 1, lastQuadBytes);",
    "info" : "ReturnStatement[76788-76834]:ReturnStatement[76934-76980]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[76846-76853]:Modifier[76992-76999]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[76854-76859]:Modifier[77000-77005]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[76860-76866]:SimpleType[77006-77012]"
  }, {
    "left" : "findName",
    "right" : "findName",
    "info" : "SimpleName[76867-76875]:SimpleName[77013-77021]"
  }, {
    "left" : "int q1",
    "right" : "int q1",
    "info" : "SingleVariableDeclaration[76876-76882]:SingleVariableDeclaration[77022-77028]"
  }, {
    "left" : "int q2",
    "right" : "int q2",
    "info" : "SingleVariableDeclaration[76884-76890]:SingleVariableDeclaration[77030-77036]"
  }, {
    "left" : "int lastQuadBytes",
    "right" : "int lastQuadBytes",
    "info" : "SingleVariableDeclaration[76892-76909]:SingleVariableDeclaration[77038-77055]"
  }, {
    "left" : "JsonParseException",
    "right" : "JsonParseException",
    "info" : "SimpleType[76918-76936]:SimpleType[77064-77082]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[76941-77344]:Block[77087-77490]"
  }, {
    "left" : "q2 = pad(q2, lastQuadBytes);",
    "right" : "q2 = pad(q2, lastQuadBytes);",
    "info" : "ExpressionStatement[76951-76979]:ExpressionStatement[77097-77125]"
  }, {
    "left" : "String name = _symbols.findName(q1, q2);",
    "right" : "String name = _symbols.findName(q1, q2);",
    "info" : "VariableDeclarationStatement[77061-77101]:VariableDeclarationStatement[77207-77247]"
  }, {
    "left" : "if (name != null)",
    "right" : "if (name != null)",
    "info" : "IfStatement[77110-77164]:IfStatement[77256-77310]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[77128-77164]:Block[77274-77310]"
  }, {
    "left" : "return name;",
    "right" : "return name;",
    "info" : "ReturnStatement[77142-77154]:ReturnStatement[77288-77300]"
  }, {
    "left" : "_quadBuffer[0] = q1;",
    "right" : "_quadBuffer[0] = q1;",
    "info" : "ExpressionStatement[77234-77254]:ExpressionStatement[77380-77400]"
  }, {
    "left" : "_quadBuffer[1] = q2;",
    "right" : "_quadBuffer[1] = q2;",
    "info" : "ExpressionStatement[77263-77283]:ExpressionStatement[77409-77429]"
  }, {
    "left" : "return addName(_quadBuffer, 2, lastQuadBytes);",
    "right" : "return addName(_quadBuffer, 2, lastQuadBytes);",
    "info" : "ReturnStatement[77292-77338]:ReturnStatement[77438-77484]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[77350-77357]:Modifier[77496-77503]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[77358-77363]:Modifier[77504-77509]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[77364-77370]:SimpleType[77510-77516]"
  }, {
    "left" : "findName",
    "right" : "findName",
    "info" : "SimpleName[77371-77379]:SimpleName[77517-77525]"
  }, {
    "left" : "int q1",
    "right" : "int q1",
    "info" : "SingleVariableDeclaration[77380-77386]:SingleVariableDeclaration[77526-77532]"
  }, {
    "left" : "int q2",
    "right" : "int q2",
    "info" : "SingleVariableDeclaration[77388-77394]:SingleVariableDeclaration[77534-77540]"
  }, {
    "left" : "int q3",
    "right" : "int q3",
    "info" : "SingleVariableDeclaration[77396-77402]:SingleVariableDeclaration[77542-77548]"
  }, {
    "left" : "int lastQuadBytes",
    "right" : "int lastQuadBytes",
    "info" : "SingleVariableDeclaration[77404-77421]:SingleVariableDeclaration[77550-77567]"
  }, {
    "left" : "JsonParseException",
    "right" : "JsonParseException",
    "info" : "SimpleType[77430-77448]:SimpleType[77576-77594]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[77453-77786]:Block[77599-77932]"
  }, {
    "left" : "q3 = pad(q3, lastQuadBytes);",
    "right" : "q3 = pad(q3, lastQuadBytes);",
    "info" : "ExpressionStatement[77463-77491]:ExpressionStatement[77609-77637]"
  }, {
    "left" : "String name = _symbols.findName(q1, q2, q3);",
    "right" : "String name = _symbols.findName(q1, q2, q3);",
    "info" : "VariableDeclarationStatement[77500-77544]:VariableDeclarationStatement[77646-77690]"
  }, {
    "left" : "if (name != null)",
    "right" : "if (name != null)",
    "info" : "IfStatement[77553-77607]:IfStatement[77699-77753]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[77571-77607]:Block[77717-77753]"
  }, {
    "left" : "return name;",
    "right" : "return name;",
    "info" : "ReturnStatement[77585-77597]:ReturnStatement[77731-77743]"
  }, {
    "left" : "int[] quads = _quadBuffer;",
    "right" : "int[] quads = _quadBuffer;",
    "info" : "VariableDeclarationStatement[77616-77642]:VariableDeclarationStatement[77762-77788]"
  }, {
    "left" : "quads[0] = q1;",
    "right" : "quads[0] = q1;",
    "info" : "ExpressionStatement[77651-77665]:ExpressionStatement[77797-77811]"
  }, {
    "left" : "quads[1] = q2;",
    "right" : "quads[1] = q2;",
    "info" : "ExpressionStatement[77674-77688]:ExpressionStatement[77820-77834]"
  }, {
    "left" : "quads[2] = pad(q3, lastQuadBytes);",
    "right" : "quads[2] = pad(q3, lastQuadBytes);",
    "info" : "ExpressionStatement[77697-77731]:ExpressionStatement[77843-77877]"
  }, {
    "left" : "return addName(quads, 3, lastQuadBytes);",
    "right" : "return addName(quads, 3, lastQuadBytes);",
    "info" : "ReturnStatement[77740-77780]:ReturnStatement[77886-77926]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[77796-77803]:Modifier[77942-77949]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[77804-77809]:Modifier[77950-77955]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[77810-77816]:SimpleType[77956-77962]"
  }, {
    "left" : "findName",
    "right" : "findName",
    "info" : "SimpleName[77817-77825]:SimpleName[77963-77971]"
  }, {
    "left" : "int[] quads",
    "right" : "int[] quads",
    "info" : "SingleVariableDeclaration[77826-77837]:SingleVariableDeclaration[77972-77983]"
  }, {
    "left" : "int qlen",
    "right" : "int qlen",
    "info" : "SingleVariableDeclaration[77839-77847]:SingleVariableDeclaration[77985-77993]"
  }, {
    "left" : "int lastQuad",
    "right" : "int lastQuad",
    "info" : "SingleVariableDeclaration[77849-77861]:SingleVariableDeclaration[77995-78007]"
  }, {
    "left" : "int lastQuadBytes",
    "right" : "int lastQuadBytes",
    "info" : "SingleVariableDeclaration[77863-77880]:SingleVariableDeclaration[78009-78026]"
  }, {
    "left" : "JsonParseException",
    "right" : "JsonParseException",
    "info" : "SimpleType[77889-77907]:SimpleType[78035-78053]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[77912-78256]:Block[78058-78402]"
  }, {
    "left" : "if (qlen >= quads.length)",
    "right" : "if (qlen >= quads.length)",
    "info" : "IfStatement[77922-78027]:IfStatement[78068-78173]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[77948-78027]:Block[78094-78173]"
  }, {
    "left" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
    "right" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
    "info" : "ExpressionStatement[77962-78017]:ExpressionStatement[78108-78163]"
  }, {
    "left" : "quads[qlen++] = pad(lastQuad, lastQuadBytes);",
    "right" : "quads[qlen++] = pad(lastQuad, lastQuadBytes);",
    "info" : "ExpressionStatement[78036-78081]:ExpressionStatement[78182-78227]"
  }, {
    "left" : "String name = _symbols.findName(quads, qlen);",
    "right" : "String name = _symbols.findName(quads, qlen);",
    "info" : "VariableDeclarationStatement[78090-78135]:VariableDeclarationStatement[78236-78281]"
  }, {
    "left" : "if (name == null)",
    "right" : "if (name == null)",
    "info" : "IfStatement[78144-78229]:IfStatement[78290-78375]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[78162-78229]:Block[78308-78375]"
  }, {
    "left" : "return addName(quads, qlen, lastQuadBytes);",
    "right" : "return addName(quads, qlen, lastQuadBytes);",
    "info" : "ReturnStatement[78176-78219]:ReturnStatement[78322-78365]"
  }, {
    "left" : "return name;",
    "right" : "return name;",
    "info" : "ReturnStatement[78238-78250]:ReturnStatement[78384-78396]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[78520-78527]:Modifier[78666-78673]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[78528-78533]:Modifier[78674-78679]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[78534-78540]:SimpleType[78680-78686]"
  }, {
    "left" : "addName",
    "right" : "addName",
    "info" : "SimpleName[78541-78548]:SimpleName[78687-78694]"
  }, {
    "left" : "int[] quads",
    "right" : "int[] quads",
    "info" : "SingleVariableDeclaration[78549-78560]:SingleVariableDeclaration[78695-78706]"
  }, {
    "left" : "int qlen",
    "right" : "int qlen",
    "info" : "SingleVariableDeclaration[78562-78570]:SingleVariableDeclaration[78708-78716]"
  }, {
    "left" : "int lastQuadBytes",
    "right" : "int lastQuadBytes",
    "info" : "SingleVariableDeclaration[78572-78589]:SingleVariableDeclaration[78718-78735]"
  }, {
    "left" : "JsonParseException",
    "right" : "JsonParseException",
    "info" : "SimpleType[78598-78616]:SimpleType[78744-78762]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[78621-82939]:Block[78767-83085]"
  }, {
    "left" : "int byteLen = (qlen << 2) - 4 + lastQuadBytes;",
    "right" : "int byteLen = (qlen << 2) - 4 + lastQuadBytes;",
    "info" : "VariableDeclarationStatement[78901-78947]:VariableDeclarationStatement[79047-79093]"
  }, {
    "left" : "int lastQuad;",
    "right" : "int lastQuad;",
    "info" : "VariableDeclarationStatement[79246-79259]:VariableDeclarationStatement[79392-79405]"
  }, {
    "left" : "if (lastQuadBytes < 4)",
    "right" : "if (lastQuadBytes < 4)",
    "info" : "IfStatement[79269-79492]:IfStatement[79415-79638]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[79292-79449]:Block[79438-79595]"
  }, {
    "left" : "lastQuad = quads[qlen-1];",
    "right" : "lastQuad = quads[qlen-1];",
    "info" : "ExpressionStatement[79306-79331]:ExpressionStatement[79452-79477]"
  }, {
    "left" : "quads[qlen-1] = (lastQuad << ((4 - lastQuadBytes) << 3));",
    "right" : "quads[qlen-1] = (lastQuad << ((4 - lastQuadBytes) << 3));",
    "info" : "ExpressionStatement[79382-79439]:ExpressionStatement[79528-79585]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[79455-79492]:Block[79601-79638]"
  }, {
    "left" : "lastQuad = 0;",
    "right" : "lastQuad = 0;",
    "info" : "ExpressionStatement[79469-79482]:ExpressionStatement[79615-79628]"
  }, {
    "left" : "char[] cbuf = _textBuffer.emptyAndGetCurrentSegment();",
    "right" : "char[] cbuf = _textBuffer.emptyAndGetCurrentSegment();",
    "info" : "VariableDeclarationStatement[79561-79615]:VariableDeclarationStatement[79707-79761]"
  }, {
    "left" : "int cix = 0;",
    "right" : "int cix = 0;",
    "info" : "VariableDeclarationStatement[79624-79636]:VariableDeclarationStatement[79770-79782]"
  }, {
    "left" : "for (int ix = 0; ix < byteLen)",
    "right" : "for (int ix = 0; ix < byteLen)",
    "info" : "ForStatement[79646-82620]:ForStatement[79792-82766]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[79679-82620]:Block[79825-82766]"
  }, {
    "left" : "int ch = quads[ix >> 2];",
    "right" : "int ch = quads[ix >> 2];",
    "info" : "VariableDeclarationStatement[79693-79717]:VariableDeclarationStatement[79839-79863]"
  }, {
    "left" : "int byteIx = (ix & 3);",
    "right" : "int byteIx = (ix & 3);",
    "info" : "VariableDeclarationStatement[79766-79788]:VariableDeclarationStatement[79912-79934]"
  }, {
    "left" : "ch = (ch >> ((3 - byteIx) << 3)) & 0xFF;",
    "right" : "ch = (ch >> ((3 - byteIx) << 3)) & 0xFF;",
    "info" : "ExpressionStatement[79801-79841]:ExpressionStatement[79947-79987]"
  }, {
    "left" : "++ix;",
    "right" : "++ix;",
    "info" : "ExpressionStatement[79854-79859]:ExpressionStatement[80000-80005]"
  }, {
    "left" : "if (ch > 127)",
    "right" : "if (ch > 127)",
    "info" : "IfStatement[79873-82462]:IfStatement[80019-82608]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[79887-82462]:Block[80033-82608]"
  }, {
    "left" : "int needed;",
    "right" : "int needed;",
    "info" : "VariableDeclarationStatement[79919-79930]:VariableDeclarationStatement[80065-80076]"
  }, {
    "left" : "if ((ch & 0xE0) == 0xC0)",
    "right" : "if ((ch & 0xE0) == 0xC0)",
    "info" : "IfStatement[79947-80574]:IfStatement[80093-80720]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[79972-80084]:Block[80118-80230]"
  }, {
    "left" : "ch &= 0x1F;",
    "right" : "ch &= 0x1F;",
    "info" : "ExpressionStatement[80023-80034]:ExpressionStatement[80169-80180]"
  }, {
    "left" : "needed = 1;",
    "right" : "needed = 1;",
    "info" : "ExpressionStatement[80055-80066]:ExpressionStatement[80201-80212]"
  }, {
    "left" : "if ((ch & 0xF0) == 0xE0)",
    "right" : "if ((ch & 0xF0) == 0xE0)",
    "info" : "IfStatement[80090-80574]:IfStatement[80236-80720]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[80115-80227]:Block[80261-80373]"
  }, {
    "left" : "ch &= 0x0F;",
    "right" : "ch &= 0x0F;",
    "info" : "ExpressionStatement[80166-80177]:ExpressionStatement[80312-80323]"
  }, {
    "left" : "needed = 2;",
    "right" : "needed = 2;",
    "info" : "ExpressionStatement[80198-80209]:ExpressionStatement[80344-80355]"
  }, {
    "left" : "if ((ch & 0xF8) == 0xF0)",
    "right" : "if ((ch & 0xF8) == 0xF0)",
    "info" : "IfStatement[80233-80574]:IfStatement[80379-80720]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[80258-80392]:Block[80404-80538]"
  }, {
    "left" : "ch &= 0x07;",
    "right" : "ch &= 0x07;",
    "info" : "ExpressionStatement[80331-80342]:ExpressionStatement[80477-80488]"
  }, {
    "left" : "needed = 3;",
    "right" : "needed = 3;",
    "info" : "ExpressionStatement[80363-80374]:ExpressionStatement[80509-80520]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[80398-80574]:Block[80544-80720]"
  }, {
    "left" : "_reportInvalidInitial(ch);",
    "right" : "_reportInvalidInitial(ch);",
    "info" : "ExpressionStatement[80463-80489]:ExpressionStatement[80609-80635]"
  }, {
    "left" : "needed = ch = 1;",
    "right" : "needed = ch = 1;",
    "info" : "ExpressionStatement[80510-80526]:ExpressionStatement[80656-80672]"
  }, {
    "left" : "if ((ix + needed) > byteLen)",
    "right" : "if ((ix + needed) > byteLen)",
    "info" : "IfStatement[80591-80696]:IfStatement[80737-80842]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[80620-80696]:Block[80766-80842]"
  }, {
    "left" : "_reportInvalidEOF(\" in field name\");",
    "right" : "_reportInvalidEOF(\" in field name\");",
    "info" : "ExpressionStatement[80642-80678]:ExpressionStatement[80788-80824]"
  }, {
    "left" : "int ch2 = quads[ix >> 2];",
    "right" : "int ch2 = quads[ix >> 2];",
    "info" : "VariableDeclarationStatement[80784-80809]:VariableDeclarationStatement[80930-80955]"
  }, {
    "left" : "byteIx = (ix & 3);",
    "right" : "byteIx = (ix & 3);",
    "info" : "ExpressionStatement[80862-80880]:ExpressionStatement[81008-81026]"
  }, {
    "left" : "ch2 = (ch2 >> ((3 - byteIx) << 3));",
    "right" : "ch2 = (ch2 >> ((3 - byteIx) << 3));",
    "info" : "ExpressionStatement[80897-80932]:ExpressionStatement[81043-81078]"
  }, {
    "left" : "++ix;",
    "right" : "++ix;",
    "info" : "ExpressionStatement[80949-80954]:ExpressionStatement[81095-81100]"
  }, {
    "left" : "if ((ch2 & 0xC0) != 0x080)",
    "right" : "if ((ch2 & 0xC0) != 0x080)",
    "info" : "IfStatement[80988-81080]:IfStatement[81134-81226]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[81015-81080]:Block[81161-81226]"
  }, {
    "left" : "_reportInvalidOther(ch2);",
    "right" : "_reportInvalidOther(ch2);",
    "info" : "ExpressionStatement[81037-81062]:ExpressionStatement[81183-81208]"
  }, {
    "left" : "ch = (ch << 6) | (ch2 & 0x3F);",
    "right" : "ch = (ch << 6) | (ch2 & 0x3F);",
    "info" : "ExpressionStatement[81097-81127]:ExpressionStatement[81243-81273]"
  }, {
    "left" : "if (needed > 1)",
    "right" : "if (needed > 1)",
    "info" : "IfStatement[81144-82009]:IfStatement[81290-82155]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[81160-82009]:Block[81306-82155]"
  }, {
    "left" : "ch2 = quads[ix >> 2];",
    "right" : "ch2 = quads[ix >> 2];",
    "info" : "ExpressionStatement[81182-81203]:ExpressionStatement[81328-81349]"
  }, {
    "left" : "byteIx = (ix & 3);",
    "right" : "byteIx = (ix & 3);",
    "info" : "ExpressionStatement[81224-81242]:ExpressionStatement[81370-81388]"
  }, {
    "left" : "ch2 = (ch2 >> ((3 - byteIx) << 3));",
    "right" : "ch2 = (ch2 >> ((3 - byteIx) << 3));",
    "info" : "ExpressionStatement[81263-81298]:ExpressionStatement[81409-81444]"
  }, {
    "left" : "++ix;",
    "right" : "++ix;",
    "info" : "ExpressionStatement[81319-81324]:ExpressionStatement[81465-81470]"
  }, {
    "left" : "if ((ch2 & 0xC0) != 0x080)",
    "right" : "if ((ch2 & 0xC0) != 0x080)",
    "info" : "IfStatement[81366-81466]:IfStatement[81512-81612]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[81393-81466]:Block[81539-81612]"
  }, {
    "left" : "_reportInvalidOther(ch2);",
    "right" : "_reportInvalidOther(ch2);",
    "info" : "ExpressionStatement[81419-81444]:ExpressionStatement[81565-81590]"
  }, {
    "left" : "ch = (ch << 6) | (ch2 & 0x3F);",
    "right" : "ch = (ch << 6) | (ch2 & 0x3F);",
    "info" : "ExpressionStatement[81487-81517]:ExpressionStatement[81633-81663]"
  }, {
    "left" : "if (needed > 2)",
    "right" : "if (needed > 2)",
    "info" : "IfStatement[81538-81991]:IfStatement[81684-82137]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[81554-81991]:Block[81700-82137]"
  }, {
    "left" : "ch2 = quads[ix >> 2];",
    "right" : "ch2 = quads[ix >> 2];",
    "info" : "ExpressionStatement[81620-81641]:ExpressionStatement[81766-81787]"
  }, {
    "left" : "byteIx = (ix & 3);",
    "right" : "byteIx = (ix & 3);",
    "info" : "ExpressionStatement[81666-81684]:ExpressionStatement[81812-81830]"
  }, {
    "left" : "ch2 = (ch2 >> ((3 - byteIx) << 3));",
    "right" : "ch2 = (ch2 >> ((3 - byteIx) << 3));",
    "info" : "ExpressionStatement[81709-81744]:ExpressionStatement[81855-81890]"
  }, {
    "left" : "++ix;",
    "right" : "++ix;",
    "info" : "ExpressionStatement[81769-81774]:ExpressionStatement[81915-81920]"
  }, {
    "left" : "if ((ch2 & 0xC0) != 0x080)",
    "right" : "if ((ch2 & 0xC0) != 0x080)",
    "info" : "IfStatement[81799-81914]:IfStatement[81945-82060]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[81826-81914]:Block[81972-82060]"
  }, {
    "left" : "_reportInvalidOther(ch2 & 0xFF);",
    "right" : "_reportInvalidOther(ch2 & 0xFF);",
    "info" : "ExpressionStatement[81856-81888]:ExpressionStatement[82002-82034]"
  }, {
    "left" : "ch = (ch << 6) | (ch2 & 0x3F);",
    "right" : "ch = (ch << 6) | (ch2 & 0x3F);",
    "info" : "ExpressionStatement[81939-81969]:ExpressionStatement[82085-82115]"
  }, {
    "left" : "if (needed > 2)",
    "right" : "if (needed > 2)",
    "info" : "IfStatement[82026-82448]:IfStatement[82172-82594]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[82042-82448]:Block[82188-82594]"
  }, {
    "left" : "ch -= 0x10000;",
    "right" : "ch -= 0x10000;",
    "info" : "ExpressionStatement[82131-82145]:ExpressionStatement[82277-82291]"
  }, {
    "left" : "if (cix >= cbuf.length)",
    "right" : "if (cix >= cbuf.length)",
    "info" : "IfStatement[82203-82317]:IfStatement[82349-82463]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[82227-82317]:Block[82373-82463]"
  }, {
    "left" : "cbuf = _textBuffer.expandCurrentSegment();",
    "right" : "cbuf = _textBuffer.expandCurrentSegment();",
    "info" : "ExpressionStatement[82253-82295]:ExpressionStatement[82399-82441]"
  }, {
    "left" : "cbuf[cix++] = (char) (0xD800 + (ch >> 10));",
    "right" : "cbuf[cix++] = (char) (0xD800 + (ch >> 10));",
    "info" : "ExpressionStatement[82338-82381]:ExpressionStatement[82484-82527]"
  }, {
    "left" : "ch = 0xDC00 | (ch & 0x03FF);",
    "right" : "ch = 0xDC00 | (ch & 0x03FF);",
    "info" : "ExpressionStatement[82402-82430]:ExpressionStatement[82548-82576]"
  }, {
    "left" : "if (cix >= cbuf.length)",
    "right" : "if (cix >= cbuf.length)",
    "info" : "IfStatement[82475-82573]:IfStatement[82621-82719]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[82499-82573]:Block[82645-82719]"
  }, {
    "left" : "cbuf = _textBuffer.expandCurrentSegment();",
    "right" : "cbuf = _textBuffer.expandCurrentSegment();",
    "info" : "ExpressionStatement[82517-82559]:ExpressionStatement[82663-82705]"
  }, {
    "left" : "cbuf[cix++] = (char) ch;",
    "right" : "cbuf[cix++] = (char) ch;",
    "info" : "ExpressionStatement[82586-82610]:ExpressionStatement[82732-82756]"
  }, {
    "left" : "String baseName = new String(cbuf, 0, cix);",
    "right" : "String baseName = new String(cbuf, 0, cix);",
    "info" : "VariableDeclarationStatement[82707-82750]:VariableDeclarationStatement[82853-82896]"
  }, {
    "left" : "if (lastQuadBytes < 4)",
    "right" : "if (lastQuadBytes < 4)",
    "info" : "IfStatement[82805-82877]:IfStatement[82951-83023]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[82828-82877]:Block[82974-83023]"
  }, {
    "left" : "quads[qlen-1] = lastQuad;",
    "right" : "quads[qlen-1] = lastQuad;",
    "info" : "ExpressionStatement[82842-82867]:ExpressionStatement[82988-83013]"
  }, {
    "left" : "return _symbols.addName(baseName, quads, qlen);",
    "right" : "return _symbols.addName(baseName, quads, qlen);",
    "info" : "ReturnStatement[82886-82933]:ReturnStatement[83032-83079]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[83135-83144]:MarkerAnnotation[83281-83290]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[83149-83158]:Modifier[83295-83304]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[83159-83163]:PrimitiveType[83305-83309]"
  }, {
    "left" : "_finishString",
    "right" : "_finishString",
    "info" : "SimpleName[83164-83177]:SimpleName[83310-83323]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[83187-83198]:SimpleType[83333-83344]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[83203-84156]:Block[83349-84302]"
  }, {
    "left" : "int ptr = _inputPtr;",
    "right" : "int ptr = _inputPtr;",
    "info" : "VariableDeclarationStatement[83316-83336]:VariableDeclarationStatement[83462-83482]"
  }, {
    "left" : "if (ptr >= _inputEnd)",
    "right" : "if (ptr >= _inputEnd)",
    "info" : "IfStatement[83345-83441]:IfStatement[83491-83587]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[83367-83441]:Block[83513-83587]"
  }, {
    "left" : "loadMoreGuaranteed();",
    "right" : "loadMoreGuaranteed();",
    "info" : "ExpressionStatement[83381-83402]:ExpressionStatement[83527-83548]"
  }, {
    "left" : "ptr = _inputPtr;",
    "right" : "ptr = _inputPtr;",
    "info" : "ExpressionStatement[83415-83431]:ExpressionStatement[83561-83577]"
  }, {
    "left" : "int outPtr = 0;",
    "right" : "int outPtr = 0;",
    "info" : "VariableDeclarationStatement[83450-83465]:VariableDeclarationStatement[83596-83611]"
  }, {
    "left" : "char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();",
    "right" : "char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();",
    "info" : "VariableDeclarationStatement[83474-83530]:VariableDeclarationStatement[83620-83676]"
  }, {
    "left" : "final int[] codes = _icUTF8;",
    "right" : "final int[] codes = _icUTF8;",
    "info" : "VariableDeclarationStatement[83539-83567]:VariableDeclarationStatement[83685-83713]"
  }, {
    "left" : "final int max = Math.min(_inputEnd, (ptr + outBuf.length));",
    "right" : "final int max = Math.min(_inputEnd, (ptr + outBuf.length));",
    "info" : "VariableDeclarationStatement[83577-83636]:VariableDeclarationStatement[83723-83782]"
  }, {
    "left" : "final byte[] inputBuffer = _inputBuffer;",
    "right" : "final byte[] inputBuffer = _inputBuffer;",
    "info" : "VariableDeclarationStatement[83645-83685]:VariableDeclarationStatement[83791-83831]"
  }, {
    "left" : "while (ptr < max)",
    "right" : "while (ptr < max)",
    "info" : "WhileStatement[83694-84085]:WhileStatement[83840-84231]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[83712-84085]:Block[83858-84231]"
  }, {
    "left" : "int c = (int) inputBuffer[ptr] & 0xFF;",
    "right" : "int c = (int) inputBuffer[ptr] & 0xFF;",
    "info" : "VariableDeclarationStatement[83726-83764]:VariableDeclarationStatement[83872-83910]"
  }, {
    "left" : "if (codes[c] != 0)",
    "right" : "if (codes[c] != 0)",
    "info" : "IfStatement[83777-84015]:IfStatement[83923-84161]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[83796-84015]:Block[83942-84161]"
  }, {
    "left" : "if (c == INT_QUOTE)",
    "right" : "if (c == INT_QUOTE)",
    "info" : "IfStatement[83814-83978]:IfStatement[83960-84124]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[83834-83978]:Block[83980-84124]"
  }, {
    "left" : "_inputPtr = ptr+1;",
    "right" : "_inputPtr = ptr+1;",
    "info" : "ExpressionStatement[83856-83874]:ExpressionStatement[84002-84020]"
  }, {
    "left" : "_textBuffer.setCurrentLength(outPtr);",
    "right" : "_textBuffer.setCurrentLength(outPtr);",
    "info" : "ExpressionStatement[83895-83932]:ExpressionStatement[84041-84078]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[83953-83960]:ReturnStatement[84099-84106]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[83995-84001]:BreakStatement[84141-84147]"
  }, {
    "left" : "++ptr;",
    "right" : "++ptr;",
    "info" : "ExpressionStatement[84028-84034]:ExpressionStatement[84174-84180]"
  }, {
    "left" : "outBuf[outPtr++] = (char) c;",
    "right" : "outBuf[outPtr++] = (char) c;",
    "info" : "ExpressionStatement[84047-84075]:ExpressionStatement[84193-84221]"
  }, {
    "left" : "_inputPtr = ptr;",
    "right" : "_inputPtr = ptr;",
    "info" : "ExpressionStatement[84094-84110]:ExpressionStatement[84240-84256]"
  }, {
    "left" : "_finishString2(outBuf, outPtr);",
    "right" : "_finishString2(outBuf, outPtr);",
    "info" : "ExpressionStatement[84119-84150]:ExpressionStatement[84265-84296]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[84196-84205]:Modifier[84342-84351]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[84206-84212]:SimpleType[84352-84358]"
  }, {
    "left" : "_finishAndReturnString",
    "right" : "_finishAndReturnString",
    "info" : "SimpleName[84213-84235]:SimpleName[84359-84381]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[84245-84256]:SimpleType[84391-84402]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[84261-85243]:Block[84407-85389]"
  }, {
    "left" : "int ptr = _inputPtr;",
    "right" : "int ptr = _inputPtr;",
    "info" : "VariableDeclarationStatement[84374-84394]:VariableDeclarationStatement[84520-84540]"
  }, {
    "left" : "if (ptr >= _inputEnd)",
    "right" : "if (ptr >= _inputEnd)",
    "info" : "IfStatement[84403-84499]:IfStatement[84549-84645]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[84425-84499]:Block[84571-84645]"
  }, {
    "left" : "loadMoreGuaranteed();",
    "right" : "loadMoreGuaranteed();",
    "info" : "ExpressionStatement[84439-84460]:ExpressionStatement[84585-84606]"
  }, {
    "left" : "ptr = _inputPtr;",
    "right" : "ptr = _inputPtr;",
    "info" : "ExpressionStatement[84473-84489]:ExpressionStatement[84619-84635]"
  }, {
    "left" : "int outPtr = 0;",
    "right" : "int outPtr = 0;",
    "info" : "VariableDeclarationStatement[84508-84523]:VariableDeclarationStatement[84654-84669]"
  }, {
    "left" : "char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();",
    "right" : "char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();",
    "info" : "VariableDeclarationStatement[84532-84588]:VariableDeclarationStatement[84678-84734]"
  }, {
    "left" : "final int[] codes = _icUTF8;",
    "right" : "final int[] codes = _icUTF8;",
    "info" : "VariableDeclarationStatement[84597-84625]:VariableDeclarationStatement[84743-84771]"
  }, {
    "left" : "final int max = Math.min(_inputEnd, (ptr + outBuf.length));",
    "right" : "final int max = Math.min(_inputEnd, (ptr + outBuf.length));",
    "info" : "VariableDeclarationStatement[84635-84694]:VariableDeclarationStatement[84781-84840]"
  }, {
    "left" : "final byte[] inputBuffer = _inputBuffer;",
    "right" : "final byte[] inputBuffer = _inputBuffer;",
    "info" : "VariableDeclarationStatement[84703-84743]:VariableDeclarationStatement[84849-84889]"
  }, {
    "left" : "while (ptr < max)",
    "right" : "while (ptr < max)",
    "info" : "WhileStatement[84752-85125]:WhileStatement[84898-85271]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[84770-85125]:Block[84916-85271]"
  }, {
    "left" : "int c = (int) inputBuffer[ptr] & 0xFF;",
    "right" : "int c = (int) inputBuffer[ptr] & 0xFF;",
    "info" : "VariableDeclarationStatement[84784-84822]:VariableDeclarationStatement[84930-84968]"
  }, {
    "left" : "if (codes[c] != 0)",
    "right" : "if (codes[c] != 0)",
    "info" : "IfStatement[84835-85055]:IfStatement[84981-85201]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[84854-85055]:Block[85000-85201]"
  }, {
    "left" : "if (c == INT_QUOTE)",
    "right" : "if (c == INT_QUOTE)",
    "info" : "IfStatement[84872-85018]:IfStatement[85018-85164]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[84892-85018]:Block[85038-85164]"
  }, {
    "left" : "_inputPtr = ptr+1;",
    "right" : "_inputPtr = ptr+1;",
    "info" : "ExpressionStatement[84914-84932]:ExpressionStatement[85060-85078]"
  }, {
    "left" : "return _textBuffer.setCurrentAndReturn(outPtr);",
    "right" : "return _textBuffer.setCurrentAndReturn(outPtr);",
    "info" : "ReturnStatement[84953-85000]:ReturnStatement[85099-85146]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[85035-85041]:BreakStatement[85181-85187]"
  }, {
    "left" : "++ptr;",
    "right" : "++ptr;",
    "info" : "ExpressionStatement[85068-85074]:ExpressionStatement[85214-85220]"
  }, {
    "left" : "outBuf[outPtr++] = (char) c;",
    "right" : "outBuf[outPtr++] = (char) c;",
    "info" : "ExpressionStatement[85087-85115]:ExpressionStatement[85233-85261]"
  }, {
    "left" : "_inputPtr = ptr;",
    "right" : "_inputPtr = ptr;",
    "info" : "ExpressionStatement[85134-85150]:ExpressionStatement[85280-85296]"
  }, {
    "left" : "_finishString2(outBuf, outPtr);",
    "right" : "_finishString2(outBuf, outPtr);",
    "info" : "ExpressionStatement[85159-85190]:ExpressionStatement[85305-85336]"
  }, {
    "left" : "return _textBuffer.contentsAsString();",
    "right" : "return _textBuffer.contentsAsString();",
    "info" : "ReturnStatement[85199-85237]:ReturnStatement[85345-85383]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[85253-85260]:Modifier[85399-85406]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[85261-85266]:Modifier[85407-85412]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[85267-85271]:PrimitiveType[85413-85417]"
  }, {
    "left" : "_finishString2",
    "right" : "_finishString2",
    "info" : "SimpleName[85272-85286]:SimpleName[85418-85432]"
  }, {
    "left" : "char[] outBuf",
    "right" : "char[] outBuf",
    "info" : "SingleVariableDeclaration[85287-85300]:SingleVariableDeclaration[85433-85446]"
  }, {
    "left" : "int outPtr",
    "right" : "int outPtr",
    "info" : "SingleVariableDeclaration[85302-85312]:SingleVariableDeclaration[85448-85458]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[85329-85340]:SimpleType[85475-85486]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[85345-88168]:Block[85491-88314]"
  }, {
    "left" : "int c;",
    "right" : "int c;",
    "info" : "VariableDeclarationStatement[85355-85361]:VariableDeclarationStatement[85501-85507]"
  }, {
    "left" : "final int[] codes = _icUTF8;",
    "right" : "final int[] codes = _icUTF8;",
    "info" : "VariableDeclarationStatement[85426-85454]:VariableDeclarationStatement[85572-85600]"
  }, {
    "left" : "final byte[] inputBuffer = _inputBuffer;",
    "right" : "final byte[] inputBuffer = _inputBuffer;",
    "info" : "VariableDeclarationStatement[85463-85503]:VariableDeclarationStatement[85609-85649]"
  }, {
    "left" : "main_loop:\n        while (true) {\n            // Then the tight ASCII non-funny-char loop:\n            ascii_loop:\n            while (true) {\n                int ptr = _inputPtr;\n                if (ptr >= _inputEnd) {\n                    loadMoreGuaranteed();\n                    ptr = _inputPtr;\n                }\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                final int max = Math.min(_inputEnd, (ptr + (outBuf.length - outPtr)));\n                while (ptr < max) {\n                    c = (int) inputBuffer[ptr++] & 0xFF;\n                    if (codes[c] != 0) {\n                        _inputPtr = ptr;\n                        break ascii_loop;\n                    }\n                    outBuf[outPtr++] = (char) c;\n                }\n                _inputPtr = ptr;\n            }\n            // Ok: end marker, escape or multi-byte?\n            if (c == INT_QUOTE) {\n                break main_loop;\n            }\n\n            switch (codes[c]) {\n            case 1: // backslash\n                c = _decodeEscaped();\n                break;\n            case 2: // 2-byte UTF\n                c = _decodeUtf8_2(c);\n                break;\n            case 3: // 3-byte UTF\n                if ((_inputEnd - _inputPtr) >= 2) {\n                    c = _decodeUtf8_3fast(c);\n                } else {\n                    c = _decodeUtf8_3(c);\n                }\n                break;\n            case 4: // 4-byte UTF\n                c = _decodeUtf8_4(c);\n                // Let's add first part right away:\n                outBuf[outPtr++] = (char) (0xD800 | (c >> 10));\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                c = 0xDC00 | (c & 0x3FF);\n                // And let the other char output down below\n                break;\n            default:\n                if (c < INT_SPACE) {\n                    // As per [JACKSON-208], call can now return:\n                    _throwUnquotedSpace(c, \"string value\");\n                } else {\n                    // Is this good enough error message?\n                    _reportInvalidChar(c);\n                }\n            }\n            // Need more room?\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            // Ok, let's add char to output:\n            outBuf[outPtr++] = (char) c;\n        }",
    "right" : "main_loop:\n        while (true) {\n            // Then the tight ASCII non-funny-char loop:\n            ascii_loop:\n            while (true) {\n                int ptr = _inputPtr;\n                if (ptr >= _inputEnd) {\n                    loadMoreGuaranteed();\n                    ptr = _inputPtr;\n                }\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                final int max = Math.min(_inputEnd, (ptr + (outBuf.length - outPtr)));\n                while (ptr < max) {\n                    c = (int) inputBuffer[ptr++] & 0xFF;\n                    if (codes[c] != 0) {\n                        _inputPtr = ptr;\n                        break ascii_loop;\n                    }\n                    outBuf[outPtr++] = (char) c;\n                }\n                _inputPtr = ptr;\n            }\n            // Ok: end marker, escape or multi-byte?\n            if (c == INT_QUOTE) {\n                break main_loop;\n            }\n\n            switch (codes[c]) {\n            case 1: // backslash\n                c = _decodeEscaped();\n                break;\n            case 2: // 2-byte UTF\n                c = _decodeUtf8_2(c);\n                break;\n            case 3: // 3-byte UTF\n                if ((_inputEnd - _inputPtr) >= 2) {\n                    c = _decodeUtf8_3fast(c);\n                } else {\n                    c = _decodeUtf8_3(c);\n                }\n                break;\n            case 4: // 4-byte UTF\n                c = _decodeUtf8_4(c);\n                // Let's add first part right away:\n                outBuf[outPtr++] = (char) (0xD800 | (c >> 10));\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                c = 0xDC00 | (c & 0x3FF);\n                // And let the other char output down below\n                break;\n            default:\n                if (c < INT_SPACE) {\n                    // As per [JACKSON-208], call can now return:\n                    _throwUnquotedSpace(c, \"string value\");\n                } else {\n                    // Is this good enough error message?\n                    _reportInvalidChar(c);\n                }\n            }\n            // Need more room?\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            // Ok, let's add char to output:\n            outBuf[outPtr++] = (char) c;\n        }",
    "info" : "LabeledStatement[85513-88116]:LabeledStatement[85659-88262]"
  }, {
    "left" : "while (true)",
    "right" : "while (true)",
    "info" : "WhileStatement[85532-88116]:WhileStatement[85678-88262]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[85545-88116]:Block[85691-88262]"
  }, {
    "left" : "ascii_loop:\n            while (true) {\n                int ptr = _inputPtr;\n                if (ptr >= _inputEnd) {\n                    loadMoreGuaranteed();\n                    ptr = _inputPtr;\n                }\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                final int max = Math.min(_inputEnd, (ptr + (outBuf.length - outPtr)));\n                while (ptr < max) {\n                    c = (int) inputBuffer[ptr++] & 0xFF;\n                    if (codes[c] != 0) {\n                        _inputPtr = ptr;\n                        break ascii_loop;\n                    }\n                    outBuf[outPtr++] = (char) c;\n                }\n                _inputPtr = ptr;\n            }",
    "right" : "ascii_loop:\n            while (true) {\n                int ptr = _inputPtr;\n                if (ptr >= _inputEnd) {\n                    loadMoreGuaranteed();\n                    ptr = _inputPtr;\n                }\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                final int max = Math.min(_inputEnd, (ptr + (outBuf.length - outPtr)));\n                while (ptr < max) {\n                    c = (int) inputBuffer[ptr++] & 0xFF;\n                    if (codes[c] != 0) {\n                        _inputPtr = ptr;\n                        break ascii_loop;\n                    }\n                    outBuf[outPtr++] = (char) c;\n                }\n                _inputPtr = ptr;\n            }",
    "info" : "LabeledStatement[85616-86430]:LabeledStatement[85762-86576]"
  }, {
    "left" : "while (true)",
    "right" : "while (true)",
    "info" : "WhileStatement[85640-86430]:WhileStatement[85786-86576]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[85653-86430]:Block[85799-86576]"
  }, {
    "left" : "int ptr = _inputPtr;",
    "right" : "int ptr = _inputPtr;",
    "info" : "VariableDeclarationStatement[85671-85691]:VariableDeclarationStatement[85817-85837]"
  }, {
    "left" : "if (ptr >= _inputEnd)",
    "right" : "if (ptr >= _inputEnd)",
    "info" : "IfStatement[85708-85828]:IfStatement[85854-85974]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[85730-85828]:Block[85876-85974]"
  }, {
    "left" : "loadMoreGuaranteed();",
    "right" : "loadMoreGuaranteed();",
    "info" : "ExpressionStatement[85752-85773]:ExpressionStatement[85898-85919]"
  }, {
    "left" : "ptr = _inputPtr;",
    "right" : "ptr = _inputPtr;",
    "info" : "ExpressionStatement[85794-85810]:ExpressionStatement[85940-85956]"
  }, {
    "left" : "if (outPtr >= outBuf.length)",
    "right" : "if (outPtr >= outBuf.length)",
    "info" : "IfStatement[85845-85990]:IfStatement[85991-86136]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[85874-85990]:Block[86020-86136]"
  }, {
    "left" : "outBuf = _textBuffer.finishCurrentSegment();",
    "right" : "outBuf = _textBuffer.finishCurrentSegment();",
    "info" : "ExpressionStatement[85896-85940]:ExpressionStatement[86042-86086]"
  }, {
    "left" : "outPtr = 0;",
    "right" : "outPtr = 0;",
    "info" : "ExpressionStatement[85961-85972]:ExpressionStatement[86107-86118]"
  }, {
    "left" : "final int max = Math.min(_inputEnd, (ptr + (outBuf.length - outPtr)));",
    "right" : "final int max = Math.min(_inputEnd, (ptr + (outBuf.length - outPtr)));",
    "info" : "VariableDeclarationStatement[86007-86077]:VariableDeclarationStatement[86153-86223]"
  }, {
    "left" : "while (ptr < max)",
    "right" : "while (ptr < max)",
    "info" : "WhileStatement[86094-86383]:WhileStatement[86240-86529]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[86112-86383]:Block[86258-86529]"
  }, {
    "left" : "c = (int) inputBuffer[ptr++] & 0xFF;",
    "right" : "c = (int) inputBuffer[ptr++] & 0xFF;",
    "info" : "ExpressionStatement[86134-86170]:ExpressionStatement[86280-86316]"
  }, {
    "left" : "if (codes[c] != 0)",
    "right" : "if (codes[c] != 0)",
    "info" : "IfStatement[86191-86316]:IfStatement[86337-86462]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[86210-86316]:Block[86356-86462]"
  }, {
    "left" : "_inputPtr = ptr;",
    "right" : "_inputPtr = ptr;",
    "info" : "ExpressionStatement[86236-86252]:ExpressionStatement[86382-86398]"
  }, {
    "left" : "break ascii_loop;",
    "right" : "break ascii_loop;",
    "info" : "BreakStatement[86277-86294]:BreakStatement[86423-86440]"
  }, {
    "left" : "outBuf[outPtr++] = (char) c;",
    "right" : "outBuf[outPtr++] = (char) c;",
    "info" : "ExpressionStatement[86337-86365]:ExpressionStatement[86483-86511]"
  }, {
    "left" : "_inputPtr = ptr;",
    "right" : "_inputPtr = ptr;",
    "info" : "ExpressionStatement[86400-86416]:ExpressionStatement[86546-86562]"
  }, {
    "left" : "if (c == INT_QUOTE)",
    "right" : "if (c == INT_QUOTE)",
    "info" : "IfStatement[86496-86564]:IfStatement[86642-86710]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[86516-86564]:Block[86662-86710]"
  }, {
    "left" : "break main_loop;",
    "right" : "break main_loop;",
    "info" : "BreakStatement[86534-86550]:BreakStatement[86680-86696]"
  }, {
    "left" : "switch (codes[c]) {\n            case 1: // backslash\n                c = _decodeEscaped();\n                break;\n            case 2: // 2-byte UTF\n                c = _decodeUtf8_2(c);\n                break;\n            case 3: // 3-byte UTF\n                if ((_inputEnd - _inputPtr) >= 2) {\n                    c = _decodeUtf8_3fast(c);\n                } else {\n                    c = _decodeUtf8_3(c);\n                }\n                break;\n            case 4: // 4-byte UTF\n                c = _decodeUtf8_4(c);\n                // Let's add first part right away:\n                outBuf[outPtr++] = (char) (0xD800 | (c >> 10));\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                c = 0xDC00 | (c & 0x3FF);\n                // And let the other char output down below\n                break;\n            default:\n                if (c < INT_SPACE) {\n                    // As per [JACKSON-208], call can now return:\n                    _throwUnquotedSpace(c, \"string value\");\n                } else {\n                    // Is this good enough error message?\n                    _reportInvalidChar(c);\n                }\n            }",
    "right" : "switch (codes[c]) {\n            case 1: // backslash\n                c = _decodeEscaped();\n                break;\n            case 2: // 2-byte UTF\n                c = _decodeUtf8_2(c);\n                break;\n            case 3: // 3-byte UTF\n                if ((_inputEnd - _inputPtr) >= 2) {\n                    c = _decodeUtf8_3fast(c);\n                } else {\n                    c = _decodeUtf8_3(c);\n                }\n                break;\n            case 4: // 4-byte UTF\n                c = _decodeUtf8_4(c);\n                // Let's add first part right away:\n                outBuf[outPtr++] = (char) (0xD800 | (c >> 10));\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                c = 0xDC00 | (c & 0x3FF);\n                // And let the other char output down below\n                break;\n            default:\n                if (c < INT_SPACE) {\n                    // As per [JACKSON-208], call can now return:\n                    _throwUnquotedSpace(c, \"string value\");\n                } else {\n                    // Is this good enough error message?\n                    _reportInvalidChar(c);\n                }\n            }",
    "info" : "SwitchStatement[86578-87843]:SwitchStatement[86724-87989]"
  }, {
    "left" : "case 1:",
    "right" : "case 1:",
    "info" : "SwitchCase[86610-86617]:SwitchCase[86756-86763]"
  }, {
    "left" : "c = _decodeEscaped();",
    "right" : "c = _decodeEscaped();",
    "info" : "ExpressionStatement[86647-86668]:ExpressionStatement[86793-86814]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[86685-86691]:BreakStatement[86831-86837]"
  }, {
    "left" : "case 2:",
    "right" : "case 2:",
    "info" : "SwitchCase[86704-86711]:SwitchCase[86850-86857]"
  }, {
    "left" : "c = _decodeUtf8_2(c);",
    "right" : "c = _decodeUtf8_2(c);",
    "info" : "ExpressionStatement[86742-86763]:ExpressionStatement[86888-86909]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[86780-86786]:BreakStatement[86926-86932]"
  }, {
    "left" : "case 3:",
    "right" : "case 3:",
    "info" : "SwitchCase[86799-86806]:SwitchCase[86945-86952]"
  }, {
    "left" : "if ((_inputEnd - _inputPtr) >= 2)",
    "right" : "if ((_inputEnd - _inputPtr) >= 2)",
    "info" : "IfStatement[86837-87003]:IfStatement[86983-87149]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[86871-86936]:Block[87017-87082]"
  }, {
    "left" : "c = _decodeUtf8_3fast(c);",
    "right" : "c = _decodeUtf8_3fast(c);",
    "info" : "ExpressionStatement[86893-86918]:ExpressionStatement[87039-87064]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[86942-87003]:Block[87088-87149]"
  }, {
    "left" : "c = _decodeUtf8_3(c);",
    "right" : "c = _decodeUtf8_3(c);",
    "info" : "ExpressionStatement[86964-86985]:ExpressionStatement[87110-87131]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[87020-87026]:BreakStatement[87166-87172]"
  }, {
    "left" : "case 4:",
    "right" : "case 4:",
    "info" : "SwitchCase[87039-87046]:SwitchCase[87185-87192]"
  }, {
    "left" : "c = _decodeUtf8_4(c);",
    "right" : "c = _decodeUtf8_4(c);",
    "info" : "ExpressionStatement[87077-87098]:ExpressionStatement[87223-87244]"
  }, {
    "left" : "outBuf[outPtr++] = (char) (0xD800 | (c >> 10));",
    "right" : "outBuf[outPtr++] = (char) (0xD800 | (c >> 10));",
    "info" : "ExpressionStatement[87167-87214]:ExpressionStatement[87313-87360]"
  }, {
    "left" : "if (outPtr >= outBuf.length)",
    "right" : "if (outPtr >= outBuf.length)",
    "info" : "IfStatement[87231-87376]:IfStatement[87377-87522]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[87260-87376]:Block[87406-87522]"
  }, {
    "left" : "outBuf = _textBuffer.finishCurrentSegment();",
    "right" : "outBuf = _textBuffer.finishCurrentSegment();",
    "info" : "ExpressionStatement[87282-87326]:ExpressionStatement[87428-87472]"
  }, {
    "left" : "outPtr = 0;",
    "right" : "outPtr = 0;",
    "info" : "ExpressionStatement[87347-87358]:ExpressionStatement[87493-87504]"
  }, {
    "left" : "c = 0xDC00 | (c & 0x3FF);",
    "right" : "c = 0xDC00 | (c & 0x3FF);",
    "info" : "ExpressionStatement[87393-87418]:ExpressionStatement[87539-87564]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[87495-87501]:BreakStatement[87641-87647]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[87514-87522]:SwitchCase[87660-87668]"
  }, {
    "left" : "if (c < INT_SPACE)",
    "right" : "if (c < INT_SPACE)",
    "info" : "IfStatement[87539-87829]:IfStatement[87685-87975]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[87558-87703]:Block[87704-87849]"
  }, {
    "left" : "_throwUnquotedSpace(c, \"string value\");",
    "right" : "_throwUnquotedSpace(c, \"string value\");",
    "info" : "ExpressionStatement[87646-87685]:ExpressionStatement[87792-87831]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[87709-87829]:Block[87855-87975]"
  }, {
    "left" : "_reportInvalidChar(c);",
    "right" : "_reportInvalidChar(c);",
    "info" : "ExpressionStatement[87789-87811]:ExpressionStatement[87935-87957]"
  }, {
    "left" : "if (outPtr >= outBuf.length)",
    "right" : "if (outPtr >= outBuf.length)",
    "info" : "IfStatement[87887-88020]:IfStatement[88033-88166]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[87916-88020]:Block[88062-88166]"
  }, {
    "left" : "outBuf = _textBuffer.finishCurrentSegment();",
    "right" : "outBuf = _textBuffer.finishCurrentSegment();",
    "info" : "ExpressionStatement[87934-87978]:ExpressionStatement[88080-88124]"
  }, {
    "left" : "outPtr = 0;",
    "right" : "outPtr = 0;",
    "info" : "ExpressionStatement[87995-88006]:ExpressionStatement[88141-88152]"
  }, {
    "left" : "outBuf[outPtr++] = (char) c;",
    "right" : "outBuf[outPtr++] = (char) c;",
    "info" : "ExpressionStatement[88078-88106]:ExpressionStatement[88224-88252]"
  }, {
    "left" : "_textBuffer.setCurrentLength(outPtr);",
    "right" : "_textBuffer.setCurrentLength(outPtr);",
    "info" : "ExpressionStatement[88125-88162]:ExpressionStatement[88271-88308]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[88371-88380]:Modifier[88517-88526]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[88381-88385]:PrimitiveType[88527-88531]"
  }, {
    "left" : "_skipString",
    "right" : "_skipString",
    "info" : "SimpleName[88386-88397]:SimpleName[88532-88543]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[88407-88418]:SimpleType[88553-88564]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[88423-90077]:Block[88569-90223]"
  }, {
    "left" : "_tokenIncomplete = false;",
    "right" : "_tokenIncomplete = false;",
    "info" : "ExpressionStatement[88433-88458]:ExpressionStatement[88579-88604]"
  }, {
    "left" : "final int[] codes = _icUTF8;",
    "right" : "final int[] codes = _icUTF8;",
    "info" : "VariableDeclarationStatement[88514-88542]:VariableDeclarationStatement[88660-88688]"
  }, {
    "left" : "final byte[] inputBuffer = _inputBuffer;",
    "right" : "final byte[] inputBuffer = _inputBuffer;",
    "info" : "VariableDeclarationStatement[88551-88591]:VariableDeclarationStatement[88697-88737]"
  }, {
    "left" : "main_loop:\n        while (true) {\n            int c;\n\n            ascii_loop:\n            while (true) {\n                int ptr = _inputPtr;\n                int max = _inputEnd;\n                if (ptr >= max) {\n                    loadMoreGuaranteed();\n                    ptr = _inputPtr;\n                    max = _inputEnd;\n                }\n                while (ptr < max) {\n                    c = (int) inputBuffer[ptr++] & 0xFF;\n                    if (codes[c] != 0) {\n                        _inputPtr = ptr;\n                        break ascii_loop;\n                    }\n                }\n                _inputPtr = ptr;\n            }\n            // Ok: end marker, escape or multi-byte?\n            if (c == INT_QUOTE) {\n                break main_loop;\n            }\n            \n            switch (codes[c]) {\n            case 1: // backslash\n                _decodeEscaped();\n                break;\n            case 2: // 2-byte UTF\n                _skipUtf8_2();\n                break;\n            case 3: // 3-byte UTF\n                _skipUtf8_3();\n                break;\n            case 4: // 4-byte UTF\n                _skipUtf8_4(c);\n                break;\n            default:\n                if (c < INT_SPACE) {\n                    _throwUnquotedSpace(c, \"string value\");\n                } else {\n                    // Is this good enough error message?\n                    _reportInvalidChar(c);\n                }\n            }\n        }",
    "right" : "main_loop:\n        while (true) {\n            int c;\n\n            ascii_loop:\n            while (true) {\n                int ptr = _inputPtr;\n                int max = _inputEnd;\n                if (ptr >= max) {\n                    loadMoreGuaranteed();\n                    ptr = _inputPtr;\n                    max = _inputEnd;\n                }\n                while (ptr < max) {\n                    c = (int) inputBuffer[ptr++] & 0xFF;\n                    if (codes[c] != 0) {\n                        _inputPtr = ptr;\n                        break ascii_loop;\n                    }\n                }\n                _inputPtr = ptr;\n            }\n            // Ok: end marker, escape or multi-byte?\n            if (c == INT_QUOTE) {\n                break main_loop;\n            }\n            \n            switch (codes[c]) {\n            case 1: // backslash\n                _decodeEscaped();\n                break;\n            case 2: // 2-byte UTF\n                _skipUtf8_2();\n                break;\n            case 3: // 3-byte UTF\n                _skipUtf8_3();\n                break;\n            case 4: // 4-byte UTF\n                _skipUtf8_4(c);\n                break;\n            default:\n                if (c < INT_SPACE) {\n                    _throwUnquotedSpace(c, \"string value\");\n                } else {\n                    // Is this good enough error message?\n                    _reportInvalidChar(c);\n                }\n            }\n        }",
    "info" : "LabeledStatement[88601-90071]:LabeledStatement[88747-90217]"
  }, {
    "left" : "while (true)",
    "right" : "while (true)",
    "info" : "WhileStatement[88620-90071]:WhileStatement[88766-90217]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[88633-90071]:Block[88779-90217]"
  }, {
    "left" : "int c;",
    "right" : "int c;",
    "info" : "VariableDeclarationStatement[88647-88653]:VariableDeclarationStatement[88793-88799]"
  }, {
    "left" : "ascii_loop:\n            while (true) {\n                int ptr = _inputPtr;\n                int max = _inputEnd;\n                if (ptr >= max) {\n                    loadMoreGuaranteed();\n                    ptr = _inputPtr;\n                    max = _inputEnd;\n                }\n                while (ptr < max) {\n                    c = (int) inputBuffer[ptr++] & 0xFF;\n                    if (codes[c] != 0) {\n                        _inputPtr = ptr;\n                        break ascii_loop;\n                    }\n                }\n                _inputPtr = ptr;\n            }",
    "right" : "ascii_loop:\n            while (true) {\n                int ptr = _inputPtr;\n                int max = _inputEnd;\n                if (ptr >= max) {\n                    loadMoreGuaranteed();\n                    ptr = _inputPtr;\n                    max = _inputEnd;\n                }\n                while (ptr < max) {\n                    c = (int) inputBuffer[ptr++] & 0xFF;\n                    if (codes[c] != 0) {\n                        _inputPtr = ptr;\n                        break ascii_loop;\n                    }\n                }\n                _inputPtr = ptr;\n            }",
    "info" : "LabeledStatement[88667-89251]:LabeledStatement[88813-89397]"
  }, {
    "left" : "while (true)",
    "right" : "while (true)",
    "info" : "WhileStatement[88691-89251]:WhileStatement[88837-89397]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[88704-89251]:Block[88850-89397]"
  }, {
    "left" : "int ptr = _inputPtr;",
    "right" : "int ptr = _inputPtr;",
    "info" : "VariableDeclarationStatement[88722-88742]:VariableDeclarationStatement[88868-88888]"
  }, {
    "left" : "int max = _inputEnd;",
    "right" : "int max = _inputEnd;",
    "info" : "VariableDeclarationStatement[88759-88779]:VariableDeclarationStatement[88905-88925]"
  }, {
    "left" : "if (ptr >= max)",
    "right" : "if (ptr >= max)",
    "info" : "IfStatement[88796-88947]:IfStatement[88942-89093]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[88812-88947]:Block[88958-89093]"
  }, {
    "left" : "loadMoreGuaranteed();",
    "right" : "loadMoreGuaranteed();",
    "info" : "ExpressionStatement[88834-88855]:ExpressionStatement[88980-89001]"
  }, {
    "left" : "ptr = _inputPtr;",
    "right" : "ptr = _inputPtr;",
    "info" : "ExpressionStatement[88876-88892]:ExpressionStatement[89022-89038]"
  }, {
    "left" : "max = _inputEnd;",
    "right" : "max = _inputEnd;",
    "info" : "ExpressionStatement[88913-88929]:ExpressionStatement[89059-89075]"
  }, {
    "left" : "while (ptr < max)",
    "right" : "while (ptr < max)",
    "info" : "WhileStatement[88964-89204]:WhileStatement[89110-89350]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[88982-89204]:Block[89128-89350]"
  }, {
    "left" : "c = (int) inputBuffer[ptr++] & 0xFF;",
    "right" : "c = (int) inputBuffer[ptr++] & 0xFF;",
    "info" : "ExpressionStatement[89004-89040]:ExpressionStatement[89150-89186]"
  }, {
    "left" : "if (codes[c] != 0)",
    "right" : "if (codes[c] != 0)",
    "info" : "IfStatement[89061-89186]:IfStatement[89207-89332]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[89080-89186]:Block[89226-89332]"
  }, {
    "left" : "_inputPtr = ptr;",
    "right" : "_inputPtr = ptr;",
    "info" : "ExpressionStatement[89106-89122]:ExpressionStatement[89252-89268]"
  }, {
    "left" : "break ascii_loop;",
    "right" : "break ascii_loop;",
    "info" : "BreakStatement[89147-89164]:BreakStatement[89293-89310]"
  }, {
    "left" : "_inputPtr = ptr;",
    "right" : "_inputPtr = ptr;",
    "info" : "ExpressionStatement[89221-89237]:ExpressionStatement[89367-89383]"
  }, {
    "left" : "if (c == INT_QUOTE)",
    "right" : "if (c == INT_QUOTE)",
    "info" : "IfStatement[89317-89385]:IfStatement[89463-89531]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[89337-89385]:Block[89483-89531]"
  }, {
    "left" : "break main_loop;",
    "right" : "break main_loop;",
    "info" : "BreakStatement[89355-89371]:BreakStatement[89501-89517]"
  }, {
    "left" : "switch (codes[c]) {\n            case 1: // backslash\n                _decodeEscaped();\n                break;\n            case 2: // 2-byte UTF\n                _skipUtf8_2();\n                break;\n            case 3: // 3-byte UTF\n                _skipUtf8_3();\n                break;\n            case 4: // 4-byte UTF\n                _skipUtf8_4(c);\n                break;\n            default:\n                if (c < INT_SPACE) {\n                    _throwUnquotedSpace(c, \"string value\");\n                } else {\n                    // Is this good enough error message?\n                    _reportInvalidChar(c);\n                }\n            }",
    "right" : "switch (codes[c]) {\n            case 1: // backslash\n                _decodeEscaped();\n                break;\n            case 2: // 2-byte UTF\n                _skipUtf8_2();\n                break;\n            case 3: // 3-byte UTF\n                _skipUtf8_3();\n                break;\n            case 4: // 4-byte UTF\n                _skipUtf8_4(c);\n                break;\n            default:\n                if (c < INT_SPACE) {\n                    _throwUnquotedSpace(c, \"string value\");\n                } else {\n                    // Is this good enough error message?\n                    _reportInvalidChar(c);\n                }\n            }",
    "info" : "SwitchStatement[89411-90061]:SwitchStatement[89557-90207]"
  }, {
    "left" : "case 1:",
    "right" : "case 1:",
    "info" : "SwitchCase[89443-89450]:SwitchCase[89589-89596]"
  }, {
    "left" : "_decodeEscaped();",
    "right" : "_decodeEscaped();",
    "info" : "ExpressionStatement[89480-89497]:ExpressionStatement[89626-89643]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[89514-89520]:BreakStatement[89660-89666]"
  }, {
    "left" : "case 2:",
    "right" : "case 2:",
    "info" : "SwitchCase[89533-89540]:SwitchCase[89679-89686]"
  }, {
    "left" : "_skipUtf8_2();",
    "right" : "_skipUtf8_2();",
    "info" : "ExpressionStatement[89571-89585]:ExpressionStatement[89717-89731]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[89602-89608]:BreakStatement[89748-89754]"
  }, {
    "left" : "case 3:",
    "right" : "case 3:",
    "info" : "SwitchCase[89621-89628]:SwitchCase[89767-89774]"
  }, {
    "left" : "_skipUtf8_3();",
    "right" : "_skipUtf8_3();",
    "info" : "ExpressionStatement[89659-89673]:ExpressionStatement[89805-89819]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[89690-89696]:BreakStatement[89836-89842]"
  }, {
    "left" : "case 4:",
    "right" : "case 4:",
    "info" : "SwitchCase[89709-89716]:SwitchCase[89855-89862]"
  }, {
    "left" : "_skipUtf8_4(c);",
    "right" : "_skipUtf8_4(c);",
    "info" : "ExpressionStatement[89747-89762]:ExpressionStatement[89893-89908]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[89779-89785]:BreakStatement[89925-89931]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[89798-89806]:SwitchCase[89944-89952]"
  }, {
    "left" : "if (c < INT_SPACE)",
    "right" : "if (c < INT_SPACE)",
    "info" : "IfStatement[89823-90047]:IfStatement[89969-90193]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[89842-89921]:Block[89988-90067]"
  }, {
    "left" : "_throwUnquotedSpace(c, \"string value\");",
    "right" : "_throwUnquotedSpace(c, \"string value\");",
    "info" : "ExpressionStatement[89864-89903]:ExpressionStatement[90010-90049]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[89927-90047]:Block[90073-90193]"
  }, {
    "left" : "_reportInvalidChar(c);",
    "right" : "_reportInvalidChar(c);",
    "info" : "ExpressionStatement[90007-90029]:ExpressionStatement[90153-90175]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[90238-90247]:Modifier[90384-90393]"
  }, {
    "left" : "JsonToken",
    "right" : "JsonToken",
    "info" : "SimpleType[90248-90257]:SimpleType[90394-90403]"
  }, {
    "left" : "_handleUnexpectedValue",
    "right" : "_handleUnexpectedValue",
    "info" : "SimpleName[90258-90280]:SimpleName[90404-90426]"
  }, {
    "left" : "int c",
    "right" : "int c",
    "info" : "SingleVariableDeclaration[90281-90286]:SingleVariableDeclaration[90427-90432]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[90303-90314]:SimpleType[90449-90460]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[90319-92129]:Block[90465-92275]"
  }, {
    "left" : "switch (c) {\n        case ']':\n        case '}':\n            // Error: neither is valid at this point; valid closers have\n            // been handled earlier\n            _reportUnexpectedChar(c, \"expected a value\");\n        case '\\'':\n            if (isEnabled(Feature.ALLOW_SINGLE_QUOTES)) {\n                return _handleApos();\n            }\n            break;\n        case 'N':\n            _matchToken(\"NaN\", 1);\n            if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS)) {\n                return resetAsNaN(\"NaN\", Double.NaN);\n            }\n            _reportError(\"Non-standard token 'NaN': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");\n            break;\n        case 'I':\n            _matchToken(\"Infinity\", 1);\n            if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS)) {\n                return resetAsNaN(\"Infinity\", Double.POSITIVE_INFINITY);\n            }\n            _reportError(\"Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");\n            break;\n        case '+': // note: '-' is taken as number\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOFInValue();\n                }\n            }\n            return _handleInvalidNumberStart(_inputBuffer[_inputPtr++] & 0xFF, false);\n        }",
    "right" : "switch (c) {\n        case ']':\n        case '}':\n            // Error: neither is valid at this point; valid closers have\n            // been handled earlier\n            _reportUnexpectedChar(c, \"expected a value\");\n        case '\\'':\n            if (isEnabled(Feature.ALLOW_SINGLE_QUOTES)) {\n                return _handleApos();\n            }\n            break;\n        case 'N':\n            _matchToken(\"NaN\", 1);\n            if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS)) {\n                return resetAsNaN(\"NaN\", Double.NaN);\n            }\n            _reportError(\"Non-standard token 'NaN': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");\n            break;\n        case 'I':\n            _matchToken(\"Infinity\", 1);\n            if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS)) {\n                return resetAsNaN(\"Infinity\", Double.POSITIVE_INFINITY);\n            }\n            _reportError(\"Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");\n            break;\n        case '+': // note: '-' is taken as number\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOFInValue();\n                }\n            }\n            return _handleInvalidNumberStart(_inputBuffer[_inputPtr++] & 0xFF, false);\n        }",
    "info" : "SwitchStatement[90406-91742]:SwitchStatement[90552-91888]"
  }, {
    "left" : "case ']':",
    "right" : "case ']':",
    "info" : "SwitchCase[90427-90436]:SwitchCase[90573-90582]"
  }, {
    "left" : "case '}':",
    "right" : "case '}':",
    "info" : "SwitchCase[90445-90454]:SwitchCase[90591-90600]"
  }, {
    "left" : "_reportUnexpectedChar(c, \"expected a value\");",
    "right" : "_reportUnexpectedChar(c, \"expected a value\");",
    "info" : "ExpressionStatement[90576-90621]:ExpressionStatement[90722-90767]"
  }, {
    "left" : "case '\\'':",
    "right" : "case '\\'':",
    "info" : "SwitchCase[90630-90640]:SwitchCase[90776-90786]"
  }, {
    "left" : "if (isEnabled(Feature.ALLOW_SINGLE_QUOTES))",
    "right" : "if (isEnabled(Feature.ALLOW_SINGLE_QUOTES))",
    "info" : "IfStatement[90653-90750]:IfStatement[90799-90896]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[90697-90750]:Block[90843-90896]"
  }, {
    "left" : "return _handleApos();",
    "right" : "return _handleApos();",
    "info" : "ReturnStatement[90715-90736]:ReturnStatement[90861-90882]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[90763-90769]:BreakStatement[90909-90915]"
  }, {
    "left" : "case 'N':",
    "right" : "case 'N':",
    "info" : "SwitchCase[90778-90787]:SwitchCase[90924-90933]"
  }, {
    "left" : "_matchToken(\"NaN\", 1);",
    "right" : "_matchToken(\"NaN\", 1);",
    "info" : "ExpressionStatement[90800-90822]:ExpressionStatement[90946-90968]"
  }, {
    "left" : "if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS))",
    "right" : "if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS))",
    "info" : "IfStatement[90835-90954]:IfStatement[90981-91100]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[90885-90954]:Block[91031-91100]"
  }, {
    "left" : "return resetAsNaN(\"NaN\", Double.NaN);",
    "right" : "return resetAsNaN(\"NaN\", Double.NaN);",
    "info" : "ReturnStatement[90903-90940]:ReturnStatement[91049-91086]"
  }, {
    "left" : "_reportError(\"Non-standard token 'NaN': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");",
    "right" : "_reportError(\"Non-standard token 'NaN': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");",
    "info" : "ExpressionStatement[90967-91070]:ExpressionStatement[91113-91216]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[91083-91089]:BreakStatement[91229-91235]"
  }, {
    "left" : "case 'I':",
    "right" : "case 'I':",
    "info" : "SwitchCase[91098-91107]:SwitchCase[91244-91253]"
  }, {
    "left" : "_matchToken(\"Infinity\", 1);",
    "right" : "_matchToken(\"Infinity\", 1);",
    "info" : "ExpressionStatement[91120-91147]:ExpressionStatement[91266-91293]"
  }, {
    "left" : "if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS))",
    "right" : "if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS))",
    "info" : "IfStatement[91160-91298]:IfStatement[91306-91444]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[91210-91298]:Block[91356-91444]"
  }, {
    "left" : "return resetAsNaN(\"Infinity\", Double.POSITIVE_INFINITY);",
    "right" : "return resetAsNaN(\"Infinity\", Double.POSITIVE_INFINITY);",
    "info" : "ReturnStatement[91228-91284]:ReturnStatement[91374-91430]"
  }, {
    "left" : "_reportError(\"Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");",
    "right" : "_reportError(\"Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");",
    "info" : "ExpressionStatement[91311-91419]:ExpressionStatement[91457-91565]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[91432-91438]:BreakStatement[91578-91584]"
  }, {
    "left" : "case '+':",
    "right" : "case '+':",
    "info" : "SwitchCase[91447-91456]:SwitchCase[91593-91602]"
  }, {
    "left" : "if (_inputPtr >= _inputEnd)",
    "right" : "if (_inputPtr >= _inputEnd)",
    "info" : "IfStatement[91501-91645]:IfStatement[91647-91791]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[91529-91645]:Block[91675-91791]"
  }, {
    "left" : "if (!loadMore())",
    "right" : "if (!loadMore())",
    "info" : "IfStatement[91547-91631]:IfStatement[91693-91777]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[91564-91631]:Block[91710-91777]"
  }, {
    "left" : "_reportInvalidEOFInValue();",
    "right" : "_reportInvalidEOFInValue();",
    "info" : "ExpressionStatement[91586-91613]:ExpressionStatement[91732-91759]"
  }, {
    "left" : "return _handleInvalidNumberStart(_inputBuffer[_inputPtr++] & 0xFF, false);",
    "right" : "return _handleInvalidNumberStart(_inputBuffer[_inputPtr++] & 0xFF, false);",
    "info" : "ReturnStatement[91658-91732]:ReturnStatement[91804-91878]"
  }, {
    "left" : "if (Character.isJavaIdentifierStart(c))",
    "right" : "if (Character.isJavaIdentifierStart(c))",
    "info" : "IfStatement[91805-91935]:IfStatement[91951-92081]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[91845-91935]:Block[91991-92081]"
  }, {
    "left" : "_reportInvalidToken(\"\"+((char) c), \"('true', 'false' or 'null')\");",
    "right" : "_reportInvalidToken(\"\"+((char) c), \"('true', 'false' or 'null')\");",
    "info" : "ExpressionStatement[91859-91925]:ExpressionStatement[92005-92071]"
  }, {
    "left" : "_reportUnexpectedChar(c, \"expected a valid value (number, String, array, object, 'true', 'false' or 'null')\");",
    "right" : "_reportUnexpectedChar(c, \"expected a valid value (number, String, array, object, 'true', 'false' or 'null')\");",
    "info" : "ExpressionStatement[91992-92102]:ExpressionStatement[92138-92248]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[92111-92123]:ReturnStatement[92257-92269]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[92135-92144]:Modifier[92281-92290]"
  }, {
    "left" : "JsonToken",
    "right" : "JsonToken",
    "info" : "SimpleType[92145-92154]:SimpleType[92291-92300]"
  }, {
    "left" : "_handleApos",
    "right" : "_handleApos",
    "info" : "SimpleName[92155-92166]:SimpleName[92301-92312]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[92184-92195]:SimpleType[92330-92341]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[92200-95148]:Block[92346-95294]"
  }, {
    "left" : "int c = 0;",
    "right" : "int c = 0;",
    "info" : "VariableDeclarationStatement[92210-92220]:VariableDeclarationStatement[92356-92366]"
  }, {
    "left" : "int outPtr = 0;",
    "right" : "int outPtr = 0;",
    "info" : "VariableDeclarationStatement[92290-92305]:VariableDeclarationStatement[92436-92451]"
  }, {
    "left" : "char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();",
    "right" : "char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();",
    "info" : "VariableDeclarationStatement[92314-92370]:VariableDeclarationStatement[92460-92516]"
  }, {
    "left" : "final int[] codes = _icUTF8;",
    "right" : "final int[] codes = _icUTF8;",
    "info" : "VariableDeclarationStatement[92435-92463]:VariableDeclarationStatement[92581-92609]"
  }, {
    "left" : "final byte[] inputBuffer = _inputBuffer;",
    "right" : "final byte[] inputBuffer = _inputBuffer;",
    "info" : "VariableDeclarationStatement[92472-92512]:VariableDeclarationStatement[92618-92658]"
  }, {
    "left" : "main_loop:\n        while (true) {\n            // Then the tight ascii non-funny-char loop:\n            ascii_loop:\n            while (true) {\n                if (_inputPtr >= _inputEnd) {\n                    loadMoreGuaranteed();\n                }\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                int max = _inputEnd;\n                {\n                    int max2 = _inputPtr + (outBuf.length - outPtr);\n                    if (max2 < max) {\n                        max = max2;\n                    }\n                }\n                while (_inputPtr < max) {\n                    c = (int) inputBuffer[_inputPtr++] & 0xFF;\n                    if (c == '\\'' || codes[c] != 0) {\n                        break ascii_loop;\n                    }\n                    outBuf[outPtr++] = (char) c;\n                }\n            }\n\n            // Ok: end marker, escape or multi-byte?\n            if (c == '\\'') {\n                break main_loop;\n            }\n\n            switch (codes[c]) {\n            case 1: // backslash\n                c = _decodeEscaped();\n                break;\n            case 2: // 2-byte UTF\n                c = _decodeUtf8_2(c);\n                break;\n            case 3: // 3-byte UTF\n                if ((_inputEnd - _inputPtr) >= 2) {\n                    c = _decodeUtf8_3fast(c);\n                } else {\n                    c = _decodeUtf8_3(c);\n                }\n                break;\n            case 4: // 4-byte UTF\n                c = _decodeUtf8_4(c);\n                // Let's add first part right away:\n                outBuf[outPtr++] = (char) (0xD800 | (c >> 10));\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                c = 0xDC00 | (c & 0x3FF);\n                // And let the other char output down below\n                break;\n            default:\n                if (c < INT_SPACE) {\n                    _throwUnquotedSpace(c, \"string value\");\n                }\n                // Is this good enough error message?\n                _reportInvalidChar(c);\n            }\n            // Need more room?\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            // Ok, let's add char to output:\n            outBuf[outPtr++] = (char) c;\n        }",
    "right" : "main_loop:\n        while (true) {\n            // Then the tight ascii non-funny-char loop:\n            ascii_loop:\n            while (true) {\n                if (_inputPtr >= _inputEnd) {\n                    loadMoreGuaranteed();\n                }\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                int max = _inputEnd;\n                {\n                    int max2 = _inputPtr + (outBuf.length - outPtr);\n                    if (max2 < max) {\n                        max = max2;\n                    }\n                }\n                while (_inputPtr < max) {\n                    c = (int) inputBuffer[_inputPtr++] & 0xFF;\n                    if (c == '\\'' || codes[c] != 0) {\n                        break ascii_loop;\n                    }\n                    outBuf[outPtr++] = (char) c;\n                }\n            }\n\n            // Ok: end marker, escape or multi-byte?\n            if (c == '\\'') {\n                break main_loop;\n            }\n\n            switch (codes[c]) {\n            case 1: // backslash\n                c = _decodeEscaped();\n                break;\n            case 2: // 2-byte UTF\n                c = _decodeUtf8_2(c);\n                break;\n            case 3: // 3-byte UTF\n                if ((_inputEnd - _inputPtr) >= 2) {\n                    c = _decodeUtf8_3fast(c);\n                } else {\n                    c = _decodeUtf8_3(c);\n                }\n                break;\n            case 4: // 4-byte UTF\n                c = _decodeUtf8_4(c);\n                // Let's add first part right away:\n                outBuf[outPtr++] = (char) (0xD800 | (c >> 10));\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                c = 0xDC00 | (c & 0x3FF);\n                // And let the other char output down below\n                break;\n            default:\n                if (c < INT_SPACE) {\n                    _throwUnquotedSpace(c, \"string value\");\n                }\n                // Is this good enough error message?\n                _reportInvalidChar(c);\n            }\n            // Need more room?\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            // Ok, let's add char to output:\n            outBuf[outPtr++] = (char) c;\n        }",
    "info" : "LabeledStatement[92522-95056]:LabeledStatement[92668-95202]"
  }, {
    "left" : "while (true)",
    "right" : "while (true)",
    "info" : "WhileStatement[92541-95056]:WhileStatement[92687-95202]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[92554-95056]:Block[92700-95202]"
  }, {
    "left" : "ascii_loop:\n            while (true) {\n                if (_inputPtr >= _inputEnd) {\n                    loadMoreGuaranteed();\n                }\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                int max = _inputEnd;\n                {\n                    int max2 = _inputPtr + (outBuf.length - outPtr);\n                    if (max2 < max) {\n                        max = max2;\n                    }\n                }\n                while (_inputPtr < max) {\n                    c = (int) inputBuffer[_inputPtr++] & 0xFF;\n                    if (c == '\\'' || codes[c] != 0) {\n                        break ascii_loop;\n                    }\n                    outBuf[outPtr++] = (char) c;\n                }\n            }",
    "right" : "ascii_loop:\n            while (true) {\n                if (_inputPtr >= _inputEnd) {\n                    loadMoreGuaranteed();\n                }\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                int max = _inputEnd;\n                {\n                    int max2 = _inputPtr + (outBuf.length - outPtr);\n                    if (max2 < max) {\n                        max = max2;\n                    }\n                }\n                while (_inputPtr < max) {\n                    c = (int) inputBuffer[_inputPtr++] & 0xFF;\n                    if (c == '\\'' || codes[c] != 0) {\n                        break ascii_loop;\n                    }\n                    outBuf[outPtr++] = (char) c;\n                }\n            }",
    "info" : "LabeledStatement[92625-93473]:LabeledStatement[92771-93619]"
  }, {
    "left" : "while (true)",
    "right" : "while (true)",
    "info" : "WhileStatement[92649-93473]:WhileStatement[92795-93619]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[92662-93473]:Block[92808-93619]"
  }, {
    "left" : "if (_inputPtr >= _inputEnd)",
    "right" : "if (_inputPtr >= _inputEnd)",
    "info" : "IfStatement[92680-92769]:IfStatement[92826-92915]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[92708-92769]:Block[92854-92915]"
  }, {
    "left" : "loadMoreGuaranteed();",
    "right" : "loadMoreGuaranteed();",
    "info" : "ExpressionStatement[92730-92751]:ExpressionStatement[92876-92897]"
  }, {
    "left" : "if (outPtr >= outBuf.length)",
    "right" : "if (outPtr >= outBuf.length)",
    "info" : "IfStatement[92786-92931]:IfStatement[92932-93077]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[92815-92931]:Block[92961-93077]"
  }, {
    "left" : "outBuf = _textBuffer.finishCurrentSegment();",
    "right" : "outBuf = _textBuffer.finishCurrentSegment();",
    "info" : "ExpressionStatement[92837-92881]:ExpressionStatement[92983-93027]"
  }, {
    "left" : "outPtr = 0;",
    "right" : "outPtr = 0;",
    "info" : "ExpressionStatement[92902-92913]:ExpressionStatement[93048-93059]"
  }, {
    "left" : "int max = _inputEnd;",
    "right" : "int max = _inputEnd;",
    "info" : "VariableDeclarationStatement[92948-92968]:VariableDeclarationStatement[93094-93114]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[92985-93169]:Block[93131-93315]"
  }, {
    "left" : "int max2 = _inputPtr + (outBuf.length - outPtr);",
    "right" : "int max2 = _inputPtr + (outBuf.length - outPtr);",
    "info" : "VariableDeclarationStatement[93007-93055]:VariableDeclarationStatement[93153-93201]"
  }, {
    "left" : "if (max2 < max)",
    "right" : "if (max2 < max)",
    "info" : "IfStatement[93076-93151]:IfStatement[93222-93297]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[93092-93151]:Block[93238-93297]"
  }, {
    "left" : "max = max2;",
    "right" : "max = max2;",
    "info" : "ExpressionStatement[93118-93129]:ExpressionStatement[93264-93275]"
  }, {
    "left" : "while (_inputPtr < max)",
    "right" : "while (_inputPtr < max)",
    "info" : "WhileStatement[93186-93459]:WhileStatement[93332-93605]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[93210-93459]:Block[93356-93605]"
  }, {
    "left" : "c = (int) inputBuffer[_inputPtr++] & 0xFF;",
    "right" : "c = (int) inputBuffer[_inputPtr++] & 0xFF;",
    "info" : "ExpressionStatement[93232-93274]:ExpressionStatement[93378-93420]"
  }, {
    "left" : "if (c == '\\'' || codes[c] != 0)",
    "right" : "if (c == '\\'' || codes[c] != 0)",
    "info" : "IfStatement[93295-93392]:IfStatement[93441-93538]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[93327-93392]:Block[93473-93538]"
  }, {
    "left" : "break ascii_loop;",
    "right" : "break ascii_loop;",
    "info" : "BreakStatement[93353-93370]:BreakStatement[93499-93516]"
  }, {
    "left" : "outBuf[outPtr++] = (char) c;",
    "right" : "outBuf[outPtr++] = (char) c;",
    "info" : "ExpressionStatement[93413-93441]:ExpressionStatement[93559-93587]"
  }, {
    "left" : "if (c == '\\'')",
    "right" : "if (c == '\\'')",
    "info" : "IfStatement[93540-93603]:IfStatement[93686-93749]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[93555-93603]:Block[93701-93749]"
  }, {
    "left" : "break main_loop;",
    "right" : "break main_loop;",
    "info" : "BreakStatement[93573-93589]:BreakStatement[93719-93735]"
  }, {
    "left" : "switch (codes[c]) {\n            case 1: // backslash\n                c = _decodeEscaped();\n                break;\n            case 2: // 2-byte UTF\n                c = _decodeUtf8_2(c);\n                break;\n            case 3: // 3-byte UTF\n                if ((_inputEnd - _inputPtr) >= 2) {\n                    c = _decodeUtf8_3fast(c);\n                } else {\n                    c = _decodeUtf8_3(c);\n                }\n                break;\n            case 4: // 4-byte UTF\n                c = _decodeUtf8_4(c);\n                // Let's add first part right away:\n                outBuf[outPtr++] = (char) (0xD800 | (c >> 10));\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                c = 0xDC00 | (c & 0x3FF);\n                // And let the other char output down below\n                break;\n            default:\n                if (c < INT_SPACE) {\n                    _throwUnquotedSpace(c, \"string value\");\n                }\n                // Is this good enough error message?\n                _reportInvalidChar(c);\n            }",
    "right" : "switch (codes[c]) {\n            case 1: // backslash\n                c = _decodeEscaped();\n                break;\n            case 2: // 2-byte UTF\n                c = _decodeUtf8_2(c);\n                break;\n            case 3: // 3-byte UTF\n                if ((_inputEnd - _inputPtr) >= 2) {\n                    c = _decodeUtf8_3fast(c);\n                } else {\n                    c = _decodeUtf8_3(c);\n                }\n                break;\n            case 4: // 4-byte UTF\n                c = _decodeUtf8_4(c);\n                // Let's add first part right away:\n                outBuf[outPtr++] = (char) (0xD800 | (c >> 10));\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                c = 0xDC00 | (c & 0x3FF);\n                // And let the other char output down below\n                break;\n            default:\n                if (c < INT_SPACE) {\n                    _throwUnquotedSpace(c, \"string value\");\n                }\n                // Is this good enough error message?\n                _reportInvalidChar(c);\n            }",
    "info" : "SwitchStatement[93617-94783]:SwitchStatement[93763-94929]"
  }, {
    "left" : "case 1:",
    "right" : "case 1:",
    "info" : "SwitchCase[93649-93656]:SwitchCase[93795-93802]"
  }, {
    "left" : "c = _decodeEscaped();",
    "right" : "c = _decodeEscaped();",
    "info" : "ExpressionStatement[93686-93707]:ExpressionStatement[93832-93853]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[93724-93730]:BreakStatement[93870-93876]"
  }, {
    "left" : "case 2:",
    "right" : "case 2:",
    "info" : "SwitchCase[93743-93750]:SwitchCase[93889-93896]"
  }, {
    "left" : "c = _decodeUtf8_2(c);",
    "right" : "c = _decodeUtf8_2(c);",
    "info" : "ExpressionStatement[93781-93802]:ExpressionStatement[93927-93948]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[93819-93825]:BreakStatement[93965-93971]"
  }, {
    "left" : "case 3:",
    "right" : "case 3:",
    "info" : "SwitchCase[93838-93845]:SwitchCase[93984-93991]"
  }, {
    "left" : "if ((_inputEnd - _inputPtr) >= 2)",
    "right" : "if ((_inputEnd - _inputPtr) >= 2)",
    "info" : "IfStatement[93876-94042]:IfStatement[94022-94188]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[93910-93975]:Block[94056-94121]"
  }, {
    "left" : "c = _decodeUtf8_3fast(c);",
    "right" : "c = _decodeUtf8_3fast(c);",
    "info" : "ExpressionStatement[93932-93957]:ExpressionStatement[94078-94103]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[93981-94042]:Block[94127-94188]"
  }, {
    "left" : "c = _decodeUtf8_3(c);",
    "right" : "c = _decodeUtf8_3(c);",
    "info" : "ExpressionStatement[94003-94024]:ExpressionStatement[94149-94170]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[94059-94065]:BreakStatement[94205-94211]"
  }, {
    "left" : "case 4:",
    "right" : "case 4:",
    "info" : "SwitchCase[94078-94085]:SwitchCase[94224-94231]"
  }, {
    "left" : "c = _decodeUtf8_4(c);",
    "right" : "c = _decodeUtf8_4(c);",
    "info" : "ExpressionStatement[94116-94137]:ExpressionStatement[94262-94283]"
  }, {
    "left" : "outBuf[outPtr++] = (char) (0xD800 | (c >> 10));",
    "right" : "outBuf[outPtr++] = (char) (0xD800 | (c >> 10));",
    "info" : "ExpressionStatement[94206-94253]:ExpressionStatement[94352-94399]"
  }, {
    "left" : "if (outPtr >= outBuf.length)",
    "right" : "if (outPtr >= outBuf.length)",
    "info" : "IfStatement[94270-94415]:IfStatement[94416-94561]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[94299-94415]:Block[94445-94561]"
  }, {
    "left" : "outBuf = _textBuffer.finishCurrentSegment();",
    "right" : "outBuf = _textBuffer.finishCurrentSegment();",
    "info" : "ExpressionStatement[94321-94365]:ExpressionStatement[94467-94511]"
  }, {
    "left" : "outPtr = 0;",
    "right" : "outPtr = 0;",
    "info" : "ExpressionStatement[94386-94397]:ExpressionStatement[94532-94543]"
  }, {
    "left" : "c = 0xDC00 | (c & 0x3FF);",
    "right" : "c = 0xDC00 | (c & 0x3FF);",
    "info" : "ExpressionStatement[94432-94457]:ExpressionStatement[94578-94603]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[94534-94540]:BreakStatement[94680-94686]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[94553-94561]:SwitchCase[94699-94707]"
  }, {
    "left" : "if (c < INT_SPACE)",
    "right" : "if (c < INT_SPACE)",
    "info" : "IfStatement[94578-94676]:IfStatement[94724-94822]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[94597-94676]:Block[94743-94822]"
  }, {
    "left" : "_throwUnquotedSpace(c, \"string value\");",
    "right" : "_throwUnquotedSpace(c, \"string value\");",
    "info" : "ExpressionStatement[94619-94658]:ExpressionStatement[94765-94804]"
  }, {
    "left" : "_reportInvalidChar(c);",
    "right" : "_reportInvalidChar(c);",
    "info" : "ExpressionStatement[94747-94769]:ExpressionStatement[94893-94915]"
  }, {
    "left" : "if (outPtr >= outBuf.length)",
    "right" : "if (outPtr >= outBuf.length)",
    "info" : "IfStatement[94827-94960]:IfStatement[94973-95106]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[94856-94960]:Block[95002-95106]"
  }, {
    "left" : "outBuf = _textBuffer.finishCurrentSegment();",
    "right" : "outBuf = _textBuffer.finishCurrentSegment();",
    "info" : "ExpressionStatement[94874-94918]:ExpressionStatement[95020-95064]"
  }, {
    "left" : "outPtr = 0;",
    "right" : "outPtr = 0;",
    "info" : "ExpressionStatement[94935-94946]:ExpressionStatement[95081-95092]"
  }, {
    "left" : "outBuf[outPtr++] = (char) c;",
    "right" : "outBuf[outPtr++] = (char) c;",
    "info" : "ExpressionStatement[95018-95046]:ExpressionStatement[95164-95192]"
  }, {
    "left" : "_textBuffer.setCurrentLength(outPtr);",
    "right" : "_textBuffer.setCurrentLength(outPtr);",
    "info" : "ExpressionStatement[95065-95102]:ExpressionStatement[95211-95248]"
  }, {
    "left" : "return JsonToken.VALUE_STRING;",
    "right" : "return JsonToken.VALUE_STRING;",
    "info" : "ReturnStatement[95112-95142]:ReturnStatement[95258-95288]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[95278-95287]:Modifier[95424-95433]"
  }, {
    "left" : "JsonToken",
    "right" : "JsonToken",
    "info" : "SimpleType[95288-95297]:SimpleType[95434-95443]"
  }, {
    "left" : "_handleInvalidNumberStart",
    "right" : "_handleInvalidNumberStart",
    "info" : "SimpleName[95298-95323]:SimpleName[95444-95469]"
  }, {
    "left" : "int ch",
    "right" : "int ch",
    "info" : "SingleVariableDeclaration[95324-95330]:SingleVariableDeclaration[95470-95476]"
  }, {
    "left" : "boolean neg",
    "right" : "boolean neg",
    "info" : "SingleVariableDeclaration[95332-95343]:SingleVariableDeclaration[95478-95489]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[95360-95371]:SimpleType[95506-95517]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[95376-96340]:Block[95522-96486]"
  }, {
    "left" : "while (ch == 'I')",
    "right" : "while (ch == 'I')",
    "info" : "WhileStatement[95386-96203]:WhileStatement[95532-96349]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[95404-96203]:Block[95550-96349]"
  }, {
    "left" : "if (_inputPtr >= _inputEnd)",
    "right" : "if (_inputPtr >= _inputEnd)",
    "info" : "IfStatement[95418-95562]:IfStatement[95564-95708]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[95446-95562]:Block[95592-95708]"
  }, {
    "left" : "if (!loadMore())",
    "right" : "if (!loadMore())",
    "info" : "IfStatement[95464-95548]:IfStatement[95610-95694]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[95481-95548]:Block[95627-95694]"
  }, {
    "left" : "_reportInvalidEOFInValue();",
    "right" : "_reportInvalidEOFInValue();",
    "info" : "ExpressionStatement[95503-95530]:ExpressionStatement[95649-95676]"
  }, {
    "left" : "ch = _inputBuffer[_inputPtr++];",
    "right" : "ch = _inputBuffer[_inputPtr++];",
    "info" : "ExpressionStatement[95575-95606]:ExpressionStatement[95721-95752]"
  }, {
    "left" : "String match;",
    "right" : "String match;",
    "info" : "VariableDeclarationStatement[95619-95632]:VariableDeclarationStatement[95765-95778]"
  }, {
    "left" : "if (ch == 'N')",
    "right" : "if (ch == 'N')",
    "info" : "IfStatement[95645-95857]:IfStatement[95791-96003]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[95660-95721]:Block[95806-95867]"
  }, {
    "left" : "match = neg ? \"-INF\" :\"+INF\";",
    "right" : "match = neg ? \"-INF\" :\"+INF\";",
    "info" : "ExpressionStatement[95678-95707]:ExpressionStatement[95824-95853]"
  }, {
    "left" : "if (ch == 'n')",
    "right" : "if (ch == 'n')",
    "info" : "IfStatement[95727-95857]:IfStatement[95873-96003]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[95742-95813]:Block[95888-95959]"
  }, {
    "left" : "match = neg ? \"-Infinity\" :\"+Infinity\";",
    "right" : "match = neg ? \"-Infinity\" :\"+Infinity\";",
    "info" : "ExpressionStatement[95760-95799]:ExpressionStatement[95906-95945]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[95819-95857]:Block[95965-96003]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[95837-95843]:BreakStatement[95983-95989]"
  }, {
    "left" : "_matchToken(match, 3);",
    "right" : "_matchToken(match, 3);",
    "info" : "ExpressionStatement[95870-95892]:ExpressionStatement[96016-96038]"
  }, {
    "left" : "if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS))",
    "right" : "if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS))",
    "info" : "IfStatement[95905-96071]:IfStatement[96051-96217]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[95955-96071]:Block[96101-96217]"
  }, {
    "left" : "return resetAsNaN(match, neg ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY);",
    "right" : "return resetAsNaN(match, neg ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY);",
    "info" : "ReturnStatement[95973-96057]:ReturnStatement[96119-96203]"
  }, {
    "left" : "_reportError(\"Non-standard token '\"+match+\"': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");",
    "right" : "_reportError(\"Non-standard token '\"+match+\"': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");",
    "info" : "ExpressionStatement[96084-96193]:ExpressionStatement[96230-96339]"
  }, {
    "left" : "reportUnexpectedNumberChar(ch, \"expected digit (0-9) to follow minus sign, for valid numeric value\");",
    "right" : "reportUnexpectedNumberChar(ch, \"expected digit (0-9) to follow minus sign, for valid numeric value\");",
    "info" : "ExpressionStatement[96212-96313]:ExpressionStatement[96358-96459]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[96322-96334]:ReturnStatement[96468-96480]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[96346-96355]:Modifier[96492-96501]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[96356-96361]:Modifier[96502-96507]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[96362-96366]:PrimitiveType[96508-96512]"
  }, {
    "left" : "_matchToken",
    "right" : "_matchToken",
    "info" : "SimpleName[96367-96378]:SimpleName[96513-96524]"
  }, {
    "left" : "String matchStr",
    "right" : "String matchStr",
    "info" : "SingleVariableDeclaration[96379-96394]:SingleVariableDeclaration[96525-96540]"
  }, {
    "left" : "int i",
    "right" : "int i",
    "info" : "SingleVariableDeclaration[96396-96401]:SingleVariableDeclaration[96542-96547]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[96410-96421]:SimpleType[96556-96567]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[96426-96986]:Block[96572-97132]"
  }, {
    "left" : "final int len = matchStr.length();",
    "right" : "final int len = matchStr.length();",
    "info" : "VariableDeclarationStatement[96436-96470]:VariableDeclarationStatement[96582-96616]"
  }, {
    "left" : "if ((_inputPtr + len) >= _inputEnd)",
    "right" : "if ((_inputPtr + len) >= _inputEnd)",
    "info" : "IfStatement[96479-96585]:IfStatement[96625-96731]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[96515-96585]:Block[96661-96731]"
  }, {
    "left" : "_matchToken2(matchStr, i);",
    "right" : "_matchToken2(matchStr, i);",
    "info" : "ExpressionStatement[96529-96555]:ExpressionStatement[96675-96701]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[96568-96575]:ReturnStatement[96714-96721]"
  }, {
    "left" : "do{...}",
    "right" : "do{...}",
    "info" : "DoStatement[96594-96794]:DoStatement[96740-96940]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[96597-96775]:Block[96743-96921]"
  }, {
    "left" : "if (_inputBuffer[_inputPtr] != matchStr.charAt(i))",
    "right" : "if (_inputBuffer[_inputPtr] != matchStr.charAt(i))",
    "info" : "IfStatement[96611-96740]:IfStatement[96757-96886]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[96662-96740]:Block[96808-96886]"
  }, {
    "left" : "_reportInvalidToken(matchStr.substring(0, i));",
    "right" : "_reportInvalidToken(matchStr.substring(0, i));",
    "info" : "ExpressionStatement[96680-96726]:ExpressionStatement[96826-96872]"
  }, {
    "left" : "++_inputPtr;",
    "right" : "++_inputPtr;",
    "info" : "ExpressionStatement[96753-96765]:ExpressionStatement[96899-96911]"
  }, {
    "left" : "int ch = _inputBuffer[_inputPtr] & 0xFF;",
    "right" : "int ch = _inputBuffer[_inputPtr] & 0xFF;",
    "info" : "VariableDeclarationStatement[96808-96848]:VariableDeclarationStatement[96954-96994]"
  }, {
    "left" : "if (ch >= '0' && ch != ']' && ch != '}')",
    "right" : "if (ch >= '0' && ch != ']' && ch != '}')",
    "info" : "IfStatement[96857-96980]:IfStatement[97003-97126]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[96898-96980]:Block[97044-97126]"
  }, {
    "left" : "_checkMatchEnd(matchStr, i, ch);",
    "right" : "_checkMatchEnd(matchStr, i, ch);",
    "info" : "ExpressionStatement[96938-96970]:ExpressionStatement[97084-97116]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[96992-96999]:Modifier[97138-97145]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[97000-97005]:Modifier[97146-97151]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[97006-97010]:PrimitiveType[97152-97156]"
  }, {
    "left" : "_matchToken2",
    "right" : "_matchToken2",
    "info" : "SimpleName[97011-97023]:SimpleName[97157-97169]"
  }, {
    "left" : "String matchStr",
    "right" : "String matchStr",
    "info" : "SingleVariableDeclaration[97024-97039]:SingleVariableDeclaration[97170-97185]"
  }, {
    "left" : "int i",
    "right" : "int i",
    "info" : "SingleVariableDeclaration[97041-97046]:SingleVariableDeclaration[97187-97192]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[97055-97066]:SimpleType[97201-97212]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[97071-97739]:Block[97217-97885]"
  }, {
    "left" : "final int len = matchStr.length();",
    "right" : "final int len = matchStr.length();",
    "info" : "VariableDeclarationStatement[97081-97115]:VariableDeclarationStatement[97227-97261]"
  }, {
    "left" : "do{...}",
    "right" : "do{...}",
    "info" : "DoStatement[97124-97388]:DoStatement[97270-97534]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[97127-97369]:Block[97273-97515]"
  }, {
    "left" : "if (((_inputPtr >= _inputEnd) && !loadMore())\n                ||  (_inputBuffer[_inputPtr] != matchStr.charAt(i)))",
    "right" : "if (((_inputPtr >= _inputEnd) && !loadMore())\n                ||  (_inputBuffer[_inputPtr] != matchStr.charAt(i)))",
    "info" : "IfStatement[97141-97334]:IfStatement[97287-97480]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[97256-97334]:Block[97402-97480]"
  }, {
    "left" : "_reportInvalidToken(matchStr.substring(0, i));",
    "right" : "_reportInvalidToken(matchStr.substring(0, i));",
    "info" : "ExpressionStatement[97274-97320]:ExpressionStatement[97420-97466]"
  }, {
    "left" : "++_inputPtr;",
    "right" : "++_inputPtr;",
    "info" : "ExpressionStatement[97347-97359]:ExpressionStatement[97493-97505]"
  }, {
    "left" : "if (_inputPtr >= _inputEnd && !loadMore())",
    "right" : "if (_inputPtr >= _inputEnd && !loadMore())",
    "info" : "IfStatement[97478-97552]:IfStatement[97624-97698]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[97521-97552]:Block[97667-97698]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[97535-97542]:ReturnStatement[97681-97688]"
  }, {
    "left" : "int ch = _inputBuffer[_inputPtr] & 0xFF;",
    "right" : "int ch = _inputBuffer[_inputPtr] & 0xFF;",
    "info" : "VariableDeclarationStatement[97561-97601]:VariableDeclarationStatement[97707-97747]"
  }, {
    "left" : "if (ch >= '0' && ch != ']' && ch != '}')",
    "right" : "if (ch >= '0' && ch != ']' && ch != '}')",
    "info" : "IfStatement[97610-97733]:IfStatement[97756-97879]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[97651-97733]:Block[97797-97879]"
  }, {
    "left" : "_checkMatchEnd(matchStr, i, ch);",
    "right" : "_checkMatchEnd(matchStr, i, ch);",
    "info" : "ExpressionStatement[97691-97723]:ExpressionStatement[97837-97869]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[97745-97752]:Modifier[97891-97898]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[97753-97758]:Modifier[97899-97904]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[97759-97763]:PrimitiveType[97905-97909]"
  }, {
    "left" : "_checkMatchEnd",
    "right" : "_checkMatchEnd",
    "info" : "SimpleName[97764-97778]:SimpleName[97910-97924]"
  }, {
    "left" : "String matchStr",
    "right" : "String matchStr",
    "info" : "SingleVariableDeclaration[97779-97794]:SingleVariableDeclaration[97925-97940]"
  }, {
    "left" : "int i",
    "right" : "int i",
    "info" : "SingleVariableDeclaration[97796-97801]:SingleVariableDeclaration[97942-97947]"
  }, {
    "left" : "int ch",
    "right" : "int ch",
    "info" : "SingleVariableDeclaration[97803-97809]:SingleVariableDeclaration[97949-97955]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[97818-97829]:SimpleType[97964-97975]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[97830-98059]:Block[97976-98205]"
  }, {
    "left" : "char c = (char) _decodeCharForError(ch);",
    "right" : "char c = (char) _decodeCharForError(ch);",
    "info" : "VariableDeclarationStatement[97895-97935]:VariableDeclarationStatement[98041-98081]"
  }, {
    "left" : "if (Character.isJavaIdentifierPart(c))",
    "right" : "if (Character.isJavaIdentifierPart(c))",
    "info" : "IfStatement[97944-98053]:IfStatement[98090-98199]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[97983-98053]:Block[98129-98199]"
  }, {
    "left" : "_reportInvalidToken(matchStr.substring(0, i));",
    "right" : "_reportInvalidToken(matchStr.substring(0, i));",
    "info" : "ExpressionStatement[97997-98043]:ExpressionStatement[98143-98189]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[98267-98274]:Modifier[98413-98420]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[98275-98280]:Modifier[98421-98426]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[98281-98284]:PrimitiveType[98427-98430]"
  }, {
    "left" : "_skipWS",
    "right" : "_skipWS",
    "info" : "SimpleName[98285-98292]:SimpleName[98431-98438]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[98302-98313]:SimpleType[98448-98459]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[98318-99023]:Block[98464-99169]"
  }, {
    "left" : "while (_inputPtr < _inputEnd)",
    "right" : "while (_inputPtr < _inputEnd)",
    "info" : "WhileStatement[98328-98990]:WhileStatement[98474-99136]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[98358-98990]:Block[98504-99136]"
  }, {
    "left" : "int i = _inputBuffer[_inputPtr++] & 0xFF;",
    "right" : "int i = _inputBuffer[_inputPtr++] & 0xFF;",
    "info" : "VariableDeclarationStatement[98372-98413]:VariableDeclarationStatement[98518-98559]"
  }, {
    "left" : "if (i > INT_SPACE)",
    "right" : "if (i > INT_SPACE)",
    "info" : "IfStatement[98426-98631]:IfStatement[98572-98777]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[98445-98631]:Block[98591-98777]"
  }, {
    "left" : "if (i == INT_SLASH || i == INT_HASH)",
    "right" : "if (i == INT_SLASH || i == INT_HASH)",
    "info" : "IfStatement[98463-98591]:IfStatement[98609-98737]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[98500-98591]:Block[98646-98737]"
  }, {
    "left" : "--_inputPtr;",
    "right" : "--_inputPtr;",
    "info" : "ExpressionStatement[98522-98534]:ExpressionStatement[98668-98680]"
  }, {
    "left" : "return _skipWS2();",
    "right" : "return _skipWS2();",
    "info" : "ReturnStatement[98555-98573]:ReturnStatement[98701-98719]"
  }, {
    "left" : "return i;",
    "right" : "return i;",
    "info" : "ReturnStatement[98608-98617]:ReturnStatement[98754-98763]"
  }, {
    "left" : "if (i != INT_SPACE)",
    "right" : "if (i != INT_SPACE)",
    "info" : "IfStatement[98644-98980]:IfStatement[98790-99126]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[98664-98980]:Block[98810-99126]"
  }, {
    "left" : "if (i == INT_LF)",
    "right" : "if (i == INT_LF)",
    "info" : "IfStatement[98682-98966]:IfStatement[98828-99112]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[98699-98807]:Block[98845-98953]"
  }, {
    "left" : "++_currInputRow;",
    "right" : "++_currInputRow;",
    "info" : "ExpressionStatement[98721-98737]:ExpressionStatement[98867-98883]"
  }, {
    "left" : "_currInputRowStart = _inputPtr;",
    "right" : "_currInputRowStart = _inputPtr;",
    "info" : "ExpressionStatement[98758-98789]:ExpressionStatement[98904-98935]"
  }, {
    "left" : "if (i == INT_CR)",
    "right" : "if (i == INT_CR)",
    "info" : "IfStatement[98813-98966]:IfStatement[98959-99112]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[98830-98880]:Block[98976-99026]"
  }, {
    "left" : "_skipCR();",
    "right" : "_skipCR();",
    "info" : "ExpressionStatement[98852-98862]:ExpressionStatement[98998-99008]"
  }, {
    "left" : "if (i != INT_TAB)",
    "right" : "if (i != INT_TAB)",
    "info" : "IfStatement[98886-98966]:IfStatement[99032-99112]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[98904-98966]:Block[99050-99112]"
  }, {
    "left" : "_throwInvalidSpace(i);",
    "right" : "_throwInvalidSpace(i);",
    "info" : "ExpressionStatement[98926-98948]:ExpressionStatement[99072-99094]"
  }, {
    "left" : "return _skipWS2();",
    "right" : "return _skipWS2();",
    "info" : "ReturnStatement[98999-99017]:ReturnStatement[99145-99163]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[99029-99036]:Modifier[99175-99182]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[99037-99042]:Modifier[99183-99188]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[99043-99046]:PrimitiveType[99189-99192]"
  }, {
    "left" : "_skipWS2",
    "right" : "_skipWS2",
    "info" : "SimpleName[99047-99055]:SimpleName[99193-99201]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[99065-99076]:SimpleType[99211-99222]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[99081-100030]:Block[99227-100176]"
  }, {
    "left" : "while (_inputPtr < _inputEnd || loadMore())",
    "right" : "while (_inputPtr < _inputEnd || loadMore())",
    "info" : "WhileStatement[99091-99901]:WhileStatement[99237-100047]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[99135-99901]:Block[99281-100047]"
  }, {
    "left" : "int i = _inputBuffer[_inputPtr++] & 0xFF;",
    "right" : "int i = _inputBuffer[_inputPtr++] & 0xFF;",
    "info" : "VariableDeclarationStatement[99149-99190]:VariableDeclarationStatement[99295-99336]"
  }, {
    "left" : "if (i > INT_SPACE)",
    "right" : "if (i > INT_SPACE)",
    "info" : "IfStatement[99203-99542]:IfStatement[99349-99688]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[99222-99542]:Block[99368-99688]"
  }, {
    "left" : "if (i == INT_SLASH)",
    "right" : "if (i == INT_SLASH)",
    "info" : "IfStatement[99240-99345]:IfStatement[99386-99491]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[99260-99345]:Block[99406-99491]"
  }, {
    "left" : "_skipComment();",
    "right" : "_skipComment();",
    "info" : "ExpressionStatement[99282-99297]:ExpressionStatement[99428-99443]"
  }, {
    "left" : "continue;",
    "right" : "continue;",
    "info" : "ContinueStatement[99318-99327]:ContinueStatement[99464-99473]"
  }, {
    "left" : "if (i == INT_HASH)",
    "right" : "if (i == INT_HASH)",
    "info" : "IfStatement[99362-99502]:IfStatement[99508-99648]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[99381-99502]:Block[99527-99648]"
  }, {
    "left" : "if (_skipYAMLComment())",
    "right" : "if (_skipYAMLComment())",
    "info" : "IfStatement[99403-99484]:IfStatement[99549-99630]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[99427-99484]:Block[99573-99630]"
  }, {
    "left" : "continue;",
    "right" : "continue;",
    "info" : "ContinueStatement[99453-99462]:ContinueStatement[99599-99608]"
  }, {
    "left" : "return i;",
    "right" : "return i;",
    "info" : "ReturnStatement[99519-99528]:ReturnStatement[99665-99674]"
  }, {
    "left" : "if (i != INT_SPACE)",
    "right" : "if (i != INT_SPACE)",
    "info" : "IfStatement[99555-99891]:IfStatement[99701-100037]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[99575-99891]:Block[99721-100037]"
  }, {
    "left" : "if (i == INT_LF)",
    "right" : "if (i == INT_LF)",
    "info" : "IfStatement[99593-99877]:IfStatement[99739-100023]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[99610-99718]:Block[99756-99864]"
  }, {
    "left" : "++_currInputRow;",
    "right" : "++_currInputRow;",
    "info" : "ExpressionStatement[99632-99648]:ExpressionStatement[99778-99794]"
  }, {
    "left" : "_currInputRowStart = _inputPtr;",
    "right" : "_currInputRowStart = _inputPtr;",
    "info" : "ExpressionStatement[99669-99700]:ExpressionStatement[99815-99846]"
  }, {
    "left" : "if (i == INT_CR)",
    "right" : "if (i == INT_CR)",
    "info" : "IfStatement[99724-99877]:IfStatement[99870-100023]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[99741-99791]:Block[99887-99937]"
  }, {
    "left" : "_skipCR();",
    "right" : "_skipCR();",
    "info" : "ExpressionStatement[99763-99773]:ExpressionStatement[99909-99919]"
  }, {
    "left" : "if (i != INT_TAB)",
    "right" : "if (i != INT_TAB)",
    "info" : "IfStatement[99797-99877]:IfStatement[99943-100023]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[99815-99877]:Block[99961-100023]"
  }, {
    "left" : "_throwInvalidSpace(i);",
    "right" : "_throwInvalidSpace(i);",
    "info" : "ExpressionStatement[99837-99859]:ExpressionStatement[99983-100005]"
  }, {
    "left" : "throw _constructError(\"Unexpected end-of-input within/between \"+_parsingContext.getTypeDesc()+\" entries\");",
    "right" : "throw _constructError(\"Unexpected end-of-input within/between \"+_parsingContext.getTypeDesc()+\" entries\");",
    "info" : "ThrowStatement[99918-100024]:ThrowStatement[100064-100170]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[100040-100047]:Modifier[100186-100193]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[100048-100053]:Modifier[100194-100199]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[100054-100057]:PrimitiveType[100200-100203]"
  }, {
    "left" : "_skipWSOrEnd",
    "right" : "_skipWSOrEnd",
    "info" : "SimpleName[100058-100070]:SimpleName[100204-100216]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[100080-100091]:SimpleType[100226-100237]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[100096-101656]:Block[100242-101802]"
  }, {
    "left" : "if (_inputPtr >= _inputEnd)",
    "right" : "if (_inputPtr >= _inputEnd)",
    "info" : "IfStatement[100258-100383]:IfStatement[100404-100529]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[100286-100383]:Block[100432-100529]"
  }, {
    "left" : "if (!loadMore())",
    "right" : "if (!loadMore())",
    "info" : "IfStatement[100300-100373]:IfStatement[100446-100519]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[100317-100373]:Block[100463-100519]"
  }, {
    "left" : "return _eofAsNextChar();",
    "right" : "return _eofAsNextChar();",
    "info" : "ReturnStatement[100335-100359]:ReturnStatement[100481-100505]"
  }, {
    "left" : "int i = _inputBuffer[_inputPtr++] & 0xFF;",
    "right" : "int i = _inputBuffer[_inputPtr++] & 0xFF;",
    "info" : "VariableDeclarationStatement[100392-100433]:VariableDeclarationStatement[100538-100579]"
  }, {
    "left" : "if (i > INT_SPACE)",
    "right" : "if (i > INT_SPACE)",
    "info" : "IfStatement[100442-100628]:IfStatement[100588-100774]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[100461-100628]:Block[100607-100774]"
  }, {
    "left" : "if (i == INT_SLASH || i == INT_HASH)",
    "right" : "if (i == INT_SLASH || i == INT_HASH)",
    "info" : "IfStatement[100475-100596]:IfStatement[100621-100742]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[100512-100596]:Block[100658-100742]"
  }, {
    "left" : "--_inputPtr;",
    "right" : "--_inputPtr;",
    "info" : "ExpressionStatement[100530-100542]:ExpressionStatement[100676-100688]"
  }, {
    "left" : "return _skipWSOrEnd2();",
    "right" : "return _skipWSOrEnd2();",
    "info" : "ReturnStatement[100559-100582]:ReturnStatement[100705-100728]"
  }, {
    "left" : "return i;",
    "right" : "return i;",
    "info" : "ReturnStatement[100609-100618]:ReturnStatement[100755-100764]"
  }, {
    "left" : "if (i != INT_SPACE)",
    "right" : "if (i != INT_SPACE)",
    "info" : "IfStatement[100637-100937]:IfStatement[100783-101083]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[100657-100937]:Block[100803-101083]"
  }, {
    "left" : "if (i == INT_LF)",
    "right" : "if (i == INT_LF)",
    "info" : "IfStatement[100671-100927]:IfStatement[100817-101073]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[100688-100784]:Block[100834-100930]"
  }, {
    "left" : "++_currInputRow;",
    "right" : "++_currInputRow;",
    "info" : "ExpressionStatement[100706-100722]:ExpressionStatement[100852-100868]"
  }, {
    "left" : "_currInputRowStart = _inputPtr;",
    "right" : "_currInputRowStart = _inputPtr;",
    "info" : "ExpressionStatement[100739-100770]:ExpressionStatement[100885-100916]"
  }, {
    "left" : "if (i == INT_CR)",
    "right" : "if (i == INT_CR)",
    "info" : "IfStatement[100790-100927]:IfStatement[100936-101073]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[100807-100849]:Block[100953-100995]"
  }, {
    "left" : "_skipCR();",
    "right" : "_skipCR();",
    "info" : "ExpressionStatement[100825-100835]:ExpressionStatement[100971-100981]"
  }, {
    "left" : "if (i != INT_TAB)",
    "right" : "if (i != INT_TAB)",
    "info" : "IfStatement[100855-100927]:IfStatement[101001-101073]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[100873-100927]:Block[101019-101073]"
  }, {
    "left" : "_throwInvalidSpace(i);",
    "right" : "_throwInvalidSpace(i);",
    "info" : "ExpressionStatement[100891-100913]:ExpressionStatement[101037-101059]"
  }, {
    "left" : "while (_inputPtr < _inputEnd)",
    "right" : "while (_inputPtr < _inputEnd)",
    "info" : "WhileStatement[100955-101618]:WhileStatement[101101-101764]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[100985-101618]:Block[101131-101764]"
  }, {
    "left" : "i = _inputBuffer[_inputPtr++] & 0xFF;",
    "right" : "i = _inputBuffer[_inputPtr++] & 0xFF;",
    "info" : "ExpressionStatement[100999-101036]:ExpressionStatement[101145-101182]"
  }, {
    "left" : "if (i > INT_SPACE)",
    "right" : "if (i > INT_SPACE)",
    "info" : "IfStatement[101049-101259]:IfStatement[101195-101405]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[101068-101259]:Block[101214-101405]"
  }, {
    "left" : "if (i == INT_SLASH || i == INT_HASH)",
    "right" : "if (i == INT_SLASH || i == INT_HASH)",
    "info" : "IfStatement[101086-101219]:IfStatement[101232-101365]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[101123-101219]:Block[101269-101365]"
  }, {
    "left" : "--_inputPtr;",
    "right" : "--_inputPtr;",
    "info" : "ExpressionStatement[101145-101157]:ExpressionStatement[101291-101303]"
  }, {
    "left" : "return _skipWSOrEnd2();",
    "right" : "return _skipWSOrEnd2();",
    "info" : "ReturnStatement[101178-101201]:ReturnStatement[101324-101347]"
  }, {
    "left" : "return i;",
    "right" : "return i;",
    "info" : "ReturnStatement[101236-101245]:ReturnStatement[101382-101391]"
  }, {
    "left" : "if (i != INT_SPACE)",
    "right" : "if (i != INT_SPACE)",
    "info" : "IfStatement[101272-101608]:IfStatement[101418-101754]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[101292-101608]:Block[101438-101754]"
  }, {
    "left" : "if (i == INT_LF)",
    "right" : "if (i == INT_LF)",
    "info" : "IfStatement[101310-101594]:IfStatement[101456-101740]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[101327-101435]:Block[101473-101581]"
  }, {
    "left" : "++_currInputRow;",
    "right" : "++_currInputRow;",
    "info" : "ExpressionStatement[101349-101365]:ExpressionStatement[101495-101511]"
  }, {
    "left" : "_currInputRowStart = _inputPtr;",
    "right" : "_currInputRowStart = _inputPtr;",
    "info" : "ExpressionStatement[101386-101417]:ExpressionStatement[101532-101563]"
  }, {
    "left" : "if (i == INT_CR)",
    "right" : "if (i == INT_CR)",
    "info" : "IfStatement[101441-101594]:IfStatement[101587-101740]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[101458-101508]:Block[101604-101654]"
  }, {
    "left" : "_skipCR();",
    "right" : "_skipCR();",
    "info" : "ExpressionStatement[101480-101490]:ExpressionStatement[101626-101636]"
  }, {
    "left" : "if (i != INT_TAB)",
    "right" : "if (i != INT_TAB)",
    "info" : "IfStatement[101514-101594]:IfStatement[101660-101740]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[101532-101594]:Block[101678-101740]"
  }, {
    "left" : "_throwInvalidSpace(i);",
    "right" : "_throwInvalidSpace(i);",
    "info" : "ExpressionStatement[101554-101576]:ExpressionStatement[101700-101722]"
  }, {
    "left" : "return _skipWSOrEnd2();",
    "right" : "return _skipWSOrEnd2();",
    "info" : "ReturnStatement[101627-101650]:ReturnStatement[101773-101796]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[101662-101669]:Modifier[101808-101815]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[101670-101675]:Modifier[101816-101821]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[101676-101679]:PrimitiveType[101822-101825]"
  }, {
    "left" : "_skipWSOrEnd2",
    "right" : "_skipWSOrEnd2",
    "info" : "SimpleName[101680-101693]:SimpleName[101826-101839]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[101703-101714]:SimpleType[101849-101860]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[101719-102607]:Block[101865-102753]"
  }, {
    "left" : "while ((_inputPtr < _inputEnd) || loadMore())",
    "right" : "while ((_inputPtr < _inputEnd) || loadMore())",
    "info" : "WhileStatement[101729-102534]:WhileStatement[101875-102680]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[101775-102534]:Block[101921-102680]"
  }, {
    "left" : "int i = _inputBuffer[_inputPtr++] & 0xFF;",
    "right" : "int i = _inputBuffer[_inputPtr++] & 0xFF;",
    "info" : "VariableDeclarationStatement[101789-101830]:VariableDeclarationStatement[101935-101976]"
  }, {
    "left" : "if (i > INT_SPACE)",
    "right" : "if (i > INT_SPACE)",
    "info" : "IfStatement[101843-102524]:IfStatement[101989-102670]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[101862-102182]:Block[102008-102328]"
  }, {
    "left" : "if (i == INT_SLASH)",
    "right" : "if (i == INT_SLASH)",
    "info" : "IfStatement[101880-101985]:IfStatement[102026-102131]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[101900-101985]:Block[102046-102131]"
  }, {
    "left" : "_skipComment();",
    "right" : "_skipComment();",
    "info" : "ExpressionStatement[101922-101937]:ExpressionStatement[102068-102083]"
  }, {
    "left" : "continue;",
    "right" : "continue;",
    "info" : "ContinueStatement[101958-101967]:ContinueStatement[102104-102113]"
  }, {
    "left" : "if (i == INT_HASH)",
    "right" : "if (i == INT_HASH)",
    "info" : "IfStatement[102002-102142]:IfStatement[102148-102288]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[102021-102142]:Block[102167-102288]"
  }, {
    "left" : "if (_skipYAMLComment())",
    "right" : "if (_skipYAMLComment())",
    "info" : "IfStatement[102043-102124]:IfStatement[102189-102270]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[102067-102124]:Block[102213-102270]"
  }, {
    "left" : "continue;",
    "right" : "continue;",
    "info" : "ContinueStatement[102093-102102]:ContinueStatement[102239-102248]"
  }, {
    "left" : "return i;",
    "right" : "return i;",
    "info" : "ReturnStatement[102159-102168]:ReturnStatement[102305-102314]"
  }, {
    "left" : "if (i != INT_SPACE)",
    "right" : "if (i != INT_SPACE)",
    "info" : "IfStatement[102188-102524]:IfStatement[102334-102670]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[102208-102524]:Block[102354-102670]"
  }, {
    "left" : "if (i == INT_LF)",
    "right" : "if (i == INT_LF)",
    "info" : "IfStatement[102226-102510]:IfStatement[102372-102656]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[102243-102351]:Block[102389-102497]"
  }, {
    "left" : "++_currInputRow;",
    "right" : "++_currInputRow;",
    "info" : "ExpressionStatement[102265-102281]:ExpressionStatement[102411-102427]"
  }, {
    "left" : "_currInputRowStart = _inputPtr;",
    "right" : "_currInputRowStart = _inputPtr;",
    "info" : "ExpressionStatement[102302-102333]:ExpressionStatement[102448-102479]"
  }, {
    "left" : "if (i == INT_CR)",
    "right" : "if (i == INT_CR)",
    "info" : "IfStatement[102357-102510]:IfStatement[102503-102656]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[102374-102424]:Block[102520-102570]"
  }, {
    "left" : "_skipCR();",
    "right" : "_skipCR();",
    "info" : "ExpressionStatement[102396-102406]:ExpressionStatement[102542-102552]"
  }, {
    "left" : "if (i != INT_TAB)",
    "right" : "if (i != INT_TAB)",
    "info" : "IfStatement[102430-102510]:IfStatement[102576-102656]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[102448-102510]:Block[102594-102656]"
  }, {
    "left" : "_throwInvalidSpace(i);",
    "right" : "_throwInvalidSpace(i);",
    "info" : "ExpressionStatement[102470-102492]:ExpressionStatement[102616-102638]"
  }, {
    "left" : "return _eofAsNextChar();",
    "right" : "return _eofAsNextChar();",
    "info" : "ReturnStatement[102577-102601]:ReturnStatement[102723-102747]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[102613-102620]:Modifier[102759-102766]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[102621-102626]:Modifier[102767-102772]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[102627-102630]:PrimitiveType[102773-102776]"
  }, {
    "left" : "_skipColon",
    "right" : "_skipColon",
    "info" : "SimpleName[102631-102641]:SimpleName[102777-102787]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[102651-102662]:SimpleType[102797-102808]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[102667-104532]:Block[102813-104678]"
  }, {
    "left" : "if ((_inputPtr + 4) >= _inputEnd)",
    "right" : "if ((_inputPtr + 4) >= _inputEnd)",
    "info" : "IfStatement[102677-102761]:IfStatement[102823-102907]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[102711-102761]:Block[102857-102907]"
  }, {
    "left" : "return _skipColon2(false);",
    "right" : "return _skipColon2(false);",
    "info" : "ReturnStatement[102725-102751]:ReturnStatement[102871-102897]"
  }, {
    "left" : "int i = _inputBuffer[_inputPtr];",
    "right" : "int i = _inputBuffer[_inputPtr];",
    "info" : "VariableDeclarationStatement[102850-102882]:VariableDeclarationStatement[102996-103028]"
  }, {
    "left" : "if (i == INT_COLON)",
    "right" : "if (i == INT_COLON)",
    "info" : "IfStatement[102891-103684]:IfStatement[103037-103830]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[102911-103684]:Block[103057-103830]"
  }, {
    "left" : "i = _inputBuffer[++_inputPtr];",
    "right" : "i = _inputBuffer[++_inputPtr];",
    "info" : "ExpressionStatement[102958-102988]:ExpressionStatement[103104-103134]"
  }, {
    "left" : "if (i > INT_SPACE)",
    "right" : "if (i > INT_SPACE)",
    "info" : "IfStatement[103001-103225]:IfStatement[103147-103371]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[103020-103225]:Block[103166-103371]"
  }, {
    "left" : "if (i == INT_SLASH || i == INT_HASH)",
    "right" : "if (i == INT_SLASH || i == INT_HASH)",
    "info" : "IfStatement[103054-103156]:IfStatement[103200-103302]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[103091-103156]:Block[103237-103302]"
  }, {
    "left" : "return _skipColon2(true);",
    "right" : "return _skipColon2(true);",
    "info" : "ReturnStatement[103113-103138]:ReturnStatement[103259-103284]"
  }, {
    "left" : "++_inputPtr;",
    "right" : "++_inputPtr;",
    "info" : "ExpressionStatement[103173-103185]:ExpressionStatement[103319-103331]"
  }, {
    "left" : "return i;",
    "right" : "return i;",
    "info" : "ReturnStatement[103202-103211]:ReturnStatement[103348-103357]"
  }, {
    "left" : "if (i == INT_SPACE || i == INT_TAB)",
    "right" : "if (i == INT_SPACE || i == INT_TAB)",
    "info" : "IfStatement[103238-103611]:IfStatement[103384-103757]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[103274-103611]:Block[103420-103757]"
  }, {
    "left" : "i = (int) _inputBuffer[++_inputPtr];",
    "right" : "i = (int) _inputBuffer[++_inputPtr];",
    "info" : "ExpressionStatement[103292-103328]:ExpressionStatement[103438-103474]"
  }, {
    "left" : "if (i > INT_SPACE)",
    "right" : "if (i > INT_SPACE)",
    "info" : "IfStatement[103345-103597]:IfStatement[103491-103743]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[103364-103597]:Block[103510-103743]"
  }, {
    "left" : "if (i == INT_SLASH || i == INT_HASH)",
    "right" : "if (i == INT_SLASH || i == INT_HASH)",
    "info" : "IfStatement[103386-103496]:IfStatement[103532-103642]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[103423-103496]:Block[103569-103642]"
  }, {
    "left" : "return _skipColon2(true);",
    "right" : "return _skipColon2(true);",
    "info" : "ReturnStatement[103449-103474]:ReturnStatement[103595-103620]"
  }, {
    "left" : "++_inputPtr;",
    "right" : "++_inputPtr;",
    "info" : "ExpressionStatement[103517-103529]:ExpressionStatement[103663-103675]"
  }, {
    "left" : "return i;",
    "right" : "return i;",
    "info" : "ReturnStatement[103570-103579]:ReturnStatement[103716-103725]"
  }, {
    "left" : "return _skipColon2(true);",
    "right" : "return _skipColon2(true);",
    "info" : "ReturnStatement[103624-103649]:ReturnStatement[103770-103795]"
  }, {
    "left" : "if (i == INT_SPACE || i == INT_TAB)",
    "right" : "if (i == INT_SPACE || i == INT_TAB)",
    "info" : "IfStatement[103693-103783]:IfStatement[103839-103929]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[103729-103783]:Block[103875-103929]"
  }, {
    "left" : "i = _inputBuffer[++_inputPtr];",
    "right" : "i = _inputBuffer[++_inputPtr];",
    "info" : "ExpressionStatement[103743-103773]:ExpressionStatement[103889-103919]"
  }, {
    "left" : "if (i == INT_COLON)",
    "right" : "if (i == INT_COLON)",
    "info" : "IfStatement[103792-104491]:IfStatement[103938-104637]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[103812-104491]:Block[103958-104637]"
  }, {
    "left" : "i = _inputBuffer[++_inputPtr];",
    "right" : "i = _inputBuffer[++_inputPtr];",
    "info" : "ExpressionStatement[103826-103856]:ExpressionStatement[103972-104002]"
  }, {
    "left" : "if (i > INT_SPACE)",
    "right" : "if (i > INT_SPACE)",
    "info" : "IfStatement[103869-104077]:IfStatement[104015-104223]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[103888-104077]:Block[104034-104223]"
  }, {
    "left" : "if (i == INT_SLASH || i == INT_HASH)",
    "right" : "if (i == INT_SLASH || i == INT_HASH)",
    "info" : "IfStatement[103906-104008]:IfStatement[104052-104154]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[103943-104008]:Block[104089-104154]"
  }, {
    "left" : "return _skipColon2(true);",
    "right" : "return _skipColon2(true);",
    "info" : "ReturnStatement[103965-103990]:ReturnStatement[104111-104136]"
  }, {
    "left" : "++_inputPtr;",
    "right" : "++_inputPtr;",
    "info" : "ExpressionStatement[104025-104037]:ExpressionStatement[104171-104183]"
  }, {
    "left" : "return i;",
    "right" : "return i;",
    "info" : "ReturnStatement[104054-104063]:ReturnStatement[104200-104209]"
  }, {
    "left" : "if (i == INT_SPACE || i == INT_TAB)",
    "right" : "if (i == INT_SPACE || i == INT_TAB)",
    "info" : "IfStatement[104090-104443]:IfStatement[104236-104589]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[104126-104443]:Block[104272-104589]"
  }, {
    "left" : "i = (int) _inputBuffer[++_inputPtr];",
    "right" : "i = (int) _inputBuffer[++_inputPtr];",
    "info" : "ExpressionStatement[104144-104180]:ExpressionStatement[104290-104326]"
  }, {
    "left" : "if (i > INT_SPACE)",
    "right" : "if (i > INT_SPACE)",
    "info" : "IfStatement[104197-104429]:IfStatement[104343-104575]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[104216-104429]:Block[104362-104575]"
  }, {
    "left" : "if (i == INT_SLASH || i == INT_HASH)",
    "right" : "if (i == INT_SLASH || i == INT_HASH)",
    "info" : "IfStatement[104238-104348]:IfStatement[104384-104494]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[104275-104348]:Block[104421-104494]"
  }, {
    "left" : "return _skipColon2(true);",
    "right" : "return _skipColon2(true);",
    "info" : "ReturnStatement[104301-104326]:ReturnStatement[104447-104472]"
  }, {
    "left" : "++_inputPtr;",
    "right" : "++_inputPtr;",
    "info" : "ExpressionStatement[104369-104381]:ExpressionStatement[104515-104527]"
  }, {
    "left" : "return i;",
    "right" : "return i;",
    "info" : "ReturnStatement[104402-104411]:ReturnStatement[104548-104557]"
  }, {
    "left" : "return _skipColon2(true);",
    "right" : "return _skipColon2(true);",
    "info" : "ReturnStatement[104456-104481]:ReturnStatement[104602-104627]"
  }, {
    "left" : "return _skipColon2(false);",
    "right" : "return _skipColon2(false);",
    "info" : "ReturnStatement[104500-104526]:ReturnStatement[104646-104672]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[104538-104545]:Modifier[104684-104691]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[104546-104551]:Modifier[104692-104697]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[104552-104555]:PrimitiveType[104698-104701]"
  }, {
    "left" : "_skipColon2",
    "right" : "_skipColon2",
    "info" : "SimpleName[104556-104567]:SimpleName[104702-104713]"
  }, {
    "left" : "boolean gotColon",
    "right" : "boolean gotColon",
    "info" : "SingleVariableDeclaration[104568-104584]:SingleVariableDeclaration[104714-104730]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[104593-104604]:SimpleType[104739-104750]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[104609-105791]:Block[104755-105937]"
  }, {
    "left" : "while (_inputPtr < _inputEnd || loadMore())",
    "right" : "while (_inputPtr < _inputEnd || loadMore())",
    "info" : "WhileStatement[104619-105670]:WhileStatement[104765-105816]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[104663-105670]:Block[104809-105816]"
  }, {
    "left" : "int i = _inputBuffer[_inputPtr++] & 0xFF;",
    "right" : "int i = _inputBuffer[_inputPtr++] & 0xFF;",
    "info" : "VariableDeclarationStatement[104677-104718]:VariableDeclarationStatement[104823-104864]"
  }, {
    "left" : "if (i > INT_SPACE)",
    "right" : "if (i > INT_SPACE)",
    "info" : "IfStatement[104732-105660]:IfStatement[104878-105806]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[104751-105318]:Block[104897-105464]"
  }, {
    "left" : "if (i == INT_SLASH)",
    "right" : "if (i == INT_SLASH)",
    "info" : "IfStatement[104769-104874]:IfStatement[104915-105020]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[104789-104874]:Block[104935-105020]"
  }, {
    "left" : "_skipComment();",
    "right" : "_skipComment();",
    "info" : "ExpressionStatement[104811-104826]:ExpressionStatement[104957-104972]"
  }, {
    "left" : "continue;",
    "right" : "continue;",
    "info" : "ContinueStatement[104847-104856]:ContinueStatement[104993-105002]"
  }, {
    "left" : "if (i == INT_HASH)",
    "right" : "if (i == INT_HASH)",
    "info" : "IfStatement[104891-105031]:IfStatement[105037-105177]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[104910-105031]:Block[105056-105177]"
  }, {
    "left" : "if (_skipYAMLComment())",
    "right" : "if (_skipYAMLComment())",
    "info" : "IfStatement[104932-105013]:IfStatement[105078-105159]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[104956-105013]:Block[105102-105159]"
  }, {
    "left" : "continue;",
    "right" : "continue;",
    "info" : "ContinueStatement[104982-104991]:ContinueStatement[105128-105137]"
  }, {
    "left" : "if (gotColon)",
    "right" : "if (gotColon)",
    "info" : "IfStatement[105048-105111]:IfStatement[105194-105257]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[105062-105111]:Block[105208-105257]"
  }, {
    "left" : "return i;",
    "right" : "return i;",
    "info" : "ReturnStatement[105084-105093]:ReturnStatement[105230-105239]"
  }, {
    "left" : "if (i != INT_COLON)",
    "right" : "if (i != INT_COLON)",
    "info" : "IfStatement[105128-105271]:IfStatement[105274-105417]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[105148-105271]:Block[105294-105417]"
  }, {
    "left" : "_reportUnexpectedChar(i, \"was expecting a colon to separate field name and value\");",
    "right" : "_reportUnexpectedChar(i, \"was expecting a colon to separate field name and value\");",
    "info" : "ExpressionStatement[105170-105253]:ExpressionStatement[105316-105399]"
  }, {
    "left" : "gotColon = true;",
    "right" : "gotColon = true;",
    "info" : "ExpressionStatement[105288-105304]:ExpressionStatement[105434-105450]"
  }, {
    "left" : "if (i != INT_SPACE)",
    "right" : "if (i != INT_SPACE)",
    "info" : "IfStatement[105324-105660]:IfStatement[105470-105806]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[105344-105660]:Block[105490-105806]"
  }, {
    "left" : "if (i == INT_LF)",
    "right" : "if (i == INT_LF)",
    "info" : "IfStatement[105362-105646]:IfStatement[105508-105792]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[105379-105487]:Block[105525-105633]"
  }, {
    "left" : "++_currInputRow;",
    "right" : "++_currInputRow;",
    "info" : "ExpressionStatement[105401-105417]:ExpressionStatement[105547-105563]"
  }, {
    "left" : "_currInputRowStart = _inputPtr;",
    "right" : "_currInputRowStart = _inputPtr;",
    "info" : "ExpressionStatement[105438-105469]:ExpressionStatement[105584-105615]"
  }, {
    "left" : "if (i == INT_CR)",
    "right" : "if (i == INT_CR)",
    "info" : "IfStatement[105493-105646]:IfStatement[105639-105792]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[105510-105560]:Block[105656-105706]"
  }, {
    "left" : "_skipCR();",
    "right" : "_skipCR();",
    "info" : "ExpressionStatement[105532-105542]:ExpressionStatement[105678-105688]"
  }, {
    "left" : "if (i != INT_TAB)",
    "right" : "if (i != INT_TAB)",
    "info" : "IfStatement[105566-105646]:IfStatement[105712-105792]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[105584-105646]:Block[105730-105792]"
  }, {
    "left" : "_throwInvalidSpace(i);",
    "right" : "_throwInvalidSpace(i);",
    "info" : "ExpressionStatement[105606-105628]:ExpressionStatement[105752-105774]"
  }, {
    "left" : "throw _constructError(\"Unexpected end-of-input within/between \"+_parsingContext.getTypeDesc()+\" entries\");",
    "right" : "throw _constructError(\"Unexpected end-of-input within/between \"+_parsingContext.getTypeDesc()+\" entries\");",
    "info" : "ThrowStatement[105679-105785]:ThrowStatement[105825-105931]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[105797-105804]:Modifier[105943-105950]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[105805-105810]:Modifier[105951-105956]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[105811-105815]:PrimitiveType[105957-105961]"
  }, {
    "left" : "_skipComment",
    "right" : "_skipComment",
    "info" : "SimpleName[105816-105828]:SimpleName[105962-105974]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[105838-105849]:SimpleType[105984-105995]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[105854-106515]:Block[106000-106661]"
  }, {
    "left" : "if (!isEnabled(Feature.ALLOW_COMMENTS))",
    "right" : "if (!isEnabled(Feature.ALLOW_COMMENTS))",
    "info" : "IfStatement[105864-106068]:IfStatement[106010-106214]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[105904-106068]:Block[106050-106214]"
  }, {
    "left" : "_reportUnexpectedChar('/', \"maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)\");",
    "right" : "_reportUnexpectedChar('/', \"maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)\");",
    "info" : "ExpressionStatement[105918-106058]:ExpressionStatement[106064-106204]"
  }, {
    "left" : "if (_inputPtr >= _inputEnd && !loadMore())",
    "right" : "if (_inputPtr >= _inputEnd && !loadMore())",
    "info" : "IfStatement[106134-106236]:IfStatement[106280-106382]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[106177-106236]:Block[106323-106382]"
  }, {
    "left" : "_reportInvalidEOF(\" in a comment\");",
    "right" : "_reportInvalidEOF(\" in a comment\");",
    "info" : "ExpressionStatement[106191-106226]:ExpressionStatement[106337-106372]"
  }, {
    "left" : "int c = _inputBuffer[_inputPtr++] & 0xFF;",
    "right" : "int c = _inputBuffer[_inputPtr++] & 0xFF;",
    "info" : "VariableDeclarationStatement[106245-106286]:VariableDeclarationStatement[106391-106432]"
  }, {
    "left" : "if (c == '/')",
    "right" : "if (c == '/')",
    "info" : "IfStatement[106295-106509]:IfStatement[106441-106655]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[106309-106345]:Block[106455-106491]"
  }, {
    "left" : "_skipLine();",
    "right" : "_skipLine();",
    "info" : "ExpressionStatement[106323-106335]:ExpressionStatement[106469-106481]"
  }, {
    "left" : "if (c == '*')",
    "right" : "if (c == '*')",
    "info" : "IfStatement[106351-106509]:IfStatement[106497-106655]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[106365-106405]:Block[106511-106551]"
  }, {
    "left" : "_skipCComment();",
    "right" : "_skipCComment();",
    "info" : "ExpressionStatement[106379-106395]:ExpressionStatement[106525-106541]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[106411-106509]:Block[106557-106655]"
  }, {
    "left" : "_reportUnexpectedChar(c, \"was expecting either '*' or '/' for a comment\");",
    "right" : "_reportUnexpectedChar(c, \"was expecting either '*' or '/' for a comment\");",
    "info" : "ExpressionStatement[106425-106499]:ExpressionStatement[106571-106645]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[106521-106528]:Modifier[106667-106674]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[106529-106534]:Modifier[106675-106680]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[106535-106539]:PrimitiveType[106681-106685]"
  }, {
    "left" : "_skipCComment",
    "right" : "_skipCComment",
    "info" : "SimpleName[106540-106553]:SimpleName[106686-106699]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[106563-106574]:SimpleType[106709-106720]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[106579-108079]:Block[106725-108225]"
  }, {
    "left" : "final int[] codes = CharTypes.getInputCodeComment();",
    "right" : "final int[] codes = CharTypes.getInputCodeComment();",
    "info" : "VariableDeclarationStatement[106661-106713]:VariableDeclarationStatement[106807-106859]"
  }, {
    "left" : "main_loop:\n        while ((_inputPtr < _inputEnd) || loadMore()) {\n            int i = (int) _inputBuffer[_inputPtr++] & 0xFF;\n            int code = codes[i];\n            if (code != 0) {\n                switch (code) {\n                case '*':\n                    if (_inputPtr >= _inputEnd && !loadMore()) {\n                        break main_loop;\n                    }\n                    if (_inputBuffer[_inputPtr] == INT_SLASH) {\n                        ++_inputPtr;\n                        return;\n                    }\n                    break;\n                case INT_LF:\n                    ++_currInputRow;\n                    _currInputRowStart = _inputPtr;\n                    break;\n                case INT_CR:\n                    _skipCR();\n                    break;\n                case 2: // 2-byte UTF\n                    _skipUtf8_2();\n                    break;\n                case 3: // 3-byte UTF\n                    _skipUtf8_3();\n                    break;\n                case 4: // 4-byte UTF\n                    _skipUtf8_4(i);\n                    break;\n                default: // e.g. -1\n                    // Is this good enough error message?\n                    _reportInvalidChar(i);\n                }\n            }\n        }",
    "right" : "main_loop:\n        while ((_inputPtr < _inputEnd) || loadMore()) {\n            int i = (int) _inputBuffer[_inputPtr++] & 0xFF;\n            int code = codes[i];\n            if (code != 0) {\n                switch (code) {\n                case '*':\n                    if (_inputPtr >= _inputEnd && !loadMore()) {\n                        break main_loop;\n                    }\n                    if (_inputBuffer[_inputPtr] == INT_SLASH) {\n                        ++_inputPtr;\n                        return;\n                    }\n                    break;\n                case INT_LF:\n                    ++_currInputRow;\n                    _currInputRowStart = _inputPtr;\n                    break;\n                case INT_CR:\n                    _skipCR();\n                    break;\n                case 2: // 2-byte UTF\n                    _skipUtf8_2();\n                    break;\n                case 3: // 3-byte UTF\n                    _skipUtf8_3();\n                    break;\n                case 4: // 4-byte UTF\n                    _skipUtf8_4(i);\n                    break;\n                default: // e.g. -1\n                    // Is this good enough error message?\n                    _reportInvalidChar(i);\n                }\n            }\n        }",
    "info" : "LabeledStatement[106761-108029]:LabeledStatement[106907-108175]"
  }, {
    "left" : "while ((_inputPtr < _inputEnd) || loadMore())",
    "right" : "while ((_inputPtr < _inputEnd) || loadMore())",
    "info" : "WhileStatement[106780-108029]:WhileStatement[106926-108175]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[106826-108029]:Block[106972-108175]"
  }, {
    "left" : "int i = (int) _inputBuffer[_inputPtr++] & 0xFF;",
    "right" : "int i = (int) _inputBuffer[_inputPtr++] & 0xFF;",
    "info" : "VariableDeclarationStatement[106840-106887]:VariableDeclarationStatement[106986-107033]"
  }, {
    "left" : "int code = codes[i];",
    "right" : "int code = codes[i];",
    "info" : "VariableDeclarationStatement[106900-106920]:VariableDeclarationStatement[107046-107066]"
  }, {
    "left" : "if (code != 0)",
    "right" : "if (code != 0)",
    "info" : "IfStatement[106933-108019]:IfStatement[107079-108165]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[106948-108019]:Block[107094-108165]"
  }, {
    "left" : "switch (code) {\n                case '*':\n                    if (_inputPtr >= _inputEnd && !loadMore()) {\n                        break main_loop;\n                    }\n                    if (_inputBuffer[_inputPtr] == INT_SLASH) {\n                        ++_inputPtr;\n                        return;\n                    }\n                    break;\n                case INT_LF:\n                    ++_currInputRow;\n                    _currInputRowStart = _inputPtr;\n                    break;\n                case INT_CR:\n                    _skipCR();\n                    break;\n                case 2: // 2-byte UTF\n                    _skipUtf8_2();\n                    break;\n                case 3: // 3-byte UTF\n                    _skipUtf8_3();\n                    break;\n                case 4: // 4-byte UTF\n                    _skipUtf8_4(i);\n                    break;\n                default: // e.g. -1\n                    // Is this good enough error message?\n                    _reportInvalidChar(i);\n                }",
    "right" : "switch (code) {\n                case '*':\n                    if (_inputPtr >= _inputEnd && !loadMore()) {\n                        break main_loop;\n                    }\n                    if (_inputBuffer[_inputPtr] == INT_SLASH) {\n                        ++_inputPtr;\n                        return;\n                    }\n                    break;\n                case INT_LF:\n                    ++_currInputRow;\n                    _currInputRowStart = _inputPtr;\n                    break;\n                case INT_CR:\n                    _skipCR();\n                    break;\n                case 2: // 2-byte UTF\n                    _skipUtf8_2();\n                    break;\n                case 3: // 3-byte UTF\n                    _skipUtf8_3();\n                    break;\n                case 4: // 4-byte UTF\n                    _skipUtf8_4(i);\n                    break;\n                default: // e.g. -1\n                    // Is this good enough error message?\n                    _reportInvalidChar(i);\n                }",
    "info" : "SwitchStatement[106966-108005]:SwitchStatement[107112-108151]"
  }, {
    "left" : "case '*':",
    "right" : "case '*':",
    "info" : "SwitchCase[106998-107007]:SwitchCase[107144-107153]"
  }, {
    "left" : "if (_inputPtr >= _inputEnd && !loadMore())",
    "right" : "if (_inputPtr >= _inputEnd && !loadMore())",
    "info" : "IfStatement[107028-107135]:IfStatement[107174-107281]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[107071-107135]:Block[107217-107281]"
  }, {
    "left" : "break main_loop;",
    "right" : "break main_loop;",
    "info" : "BreakStatement[107097-107113]:BreakStatement[107243-107259]"
  }, {
    "left" : "if (_inputBuffer[_inputPtr] == INT_SLASH)",
    "right" : "if (_inputBuffer[_inputPtr] == INT_SLASH)",
    "info" : "IfStatement[107156-107290]:IfStatement[107302-107436]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[107198-107290]:Block[107344-107436]"
  }, {
    "left" : "++_inputPtr;",
    "right" : "++_inputPtr;",
    "info" : "ExpressionStatement[107224-107236]:ExpressionStatement[107370-107382]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[107261-107268]:ReturnStatement[107407-107414]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[107311-107317]:BreakStatement[107457-107463]"
  }, {
    "left" : "case INT_LF:",
    "right" : "case INT_LF:",
    "info" : "SwitchCase[107334-107346]:SwitchCase[107480-107492]"
  }, {
    "left" : "++_currInputRow;",
    "right" : "++_currInputRow;",
    "info" : "ExpressionStatement[107367-107383]:ExpressionStatement[107513-107529]"
  }, {
    "left" : "_currInputRowStart = _inputPtr;",
    "right" : "_currInputRowStart = _inputPtr;",
    "info" : "ExpressionStatement[107404-107435]:ExpressionStatement[107550-107581]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[107456-107462]:BreakStatement[107602-107608]"
  }, {
    "left" : "case INT_CR:",
    "right" : "case INT_CR:",
    "info" : "SwitchCase[107479-107491]:SwitchCase[107625-107637]"
  }, {
    "left" : "_skipCR();",
    "right" : "_skipCR();",
    "info" : "ExpressionStatement[107512-107522]:ExpressionStatement[107658-107668]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[107543-107549]:BreakStatement[107689-107695]"
  }, {
    "left" : "case 2:",
    "right" : "case 2:",
    "info" : "SwitchCase[107566-107573]:SwitchCase[107712-107719]"
  }, {
    "left" : "_skipUtf8_2();",
    "right" : "_skipUtf8_2();",
    "info" : "ExpressionStatement[107608-107622]:ExpressionStatement[107754-107768]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[107643-107649]:BreakStatement[107789-107795]"
  }, {
    "left" : "case 3:",
    "right" : "case 3:",
    "info" : "SwitchCase[107666-107673]:SwitchCase[107812-107819]"
  }, {
    "left" : "_skipUtf8_3();",
    "right" : "_skipUtf8_3();",
    "info" : "ExpressionStatement[107708-107722]:ExpressionStatement[107854-107868]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[107743-107749]:BreakStatement[107889-107895]"
  }, {
    "left" : "case 4:",
    "right" : "case 4:",
    "info" : "SwitchCase[107766-107773]:SwitchCase[107912-107919]"
  }, {
    "left" : "_skipUtf8_4(i);",
    "right" : "_skipUtf8_4(i);",
    "info" : "ExpressionStatement[107808-107823]:ExpressionStatement[107954-107969]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[107844-107850]:BreakStatement[107990-107996]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[107867-107875]:SwitchCase[108013-108021]"
  }, {
    "left" : "_reportInvalidChar(i);",
    "right" : "_reportInvalidChar(i);",
    "info" : "ExpressionStatement[107965-107987]:ExpressionStatement[108111-108133]"
  }, {
    "left" : "_reportInvalidEOF(\" in a comment\");",
    "right" : "_reportInvalidEOF(\" in a comment\");",
    "info" : "ExpressionStatement[108038-108073]:ExpressionStatement[108184-108219]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[108085-108092]:Modifier[108231-108238]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[108093-108098]:Modifier[108239-108244]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[108099-108106]:PrimitiveType[108245-108252]"
  }, {
    "left" : "_skipYAMLComment",
    "right" : "_skipYAMLComment",
    "info" : "SimpleName[108107-108123]:SimpleName[108253-108269]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[108133-108144]:SimpleType[108279-108290]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[108149-108289]:Block[108295-108435]"
  }, {
    "left" : "if (!isEnabled(Feature.ALLOW_YAML_COMMENTS))",
    "right" : "if (!isEnabled(Feature.ALLOW_YAML_COMMENTS))",
    "info" : "IfStatement[108159-108241]:IfStatement[108305-108387]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[108204-108241]:Block[108350-108387]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[108218-108231]:ReturnStatement[108364-108377]"
  }, {
    "left" : "_skipLine();",
    "right" : "_skipLine();",
    "info" : "ExpressionStatement[108250-108262]:ExpressionStatement[108396-108408]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[108271-108283]:ReturnStatement[108417-108429]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[108413-108420]:Modifier[108559-108566]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[108421-108426]:Modifier[108567-108572]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[108427-108431]:PrimitiveType[108573-108577]"
  }, {
    "left" : "_skipLine",
    "right" : "_skipLine",
    "info" : "SimpleName[108432-108441]:SimpleName[108578-108587]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[108451-108462]:SimpleType[108597-108608]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[108467-109648]:Block[108613-109794]"
  }, {
    "left" : "final int[] codes = CharTypes.getInputCodeComment();",
    "right" : "final int[] codes = CharTypes.getInputCodeComment();",
    "info" : "VariableDeclarationStatement[108521-108573]:VariableDeclarationStatement[108667-108719]"
  }, {
    "left" : "while ((_inputPtr < _inputEnd) || loadMore())",
    "right" : "while ((_inputPtr < _inputEnd) || loadMore())",
    "info" : "WhileStatement[108582-109642]:WhileStatement[108728-109788]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[108628-109642]:Block[108774-109788]"
  }, {
    "left" : "int i = (int) _inputBuffer[_inputPtr++] & 0xFF;",
    "right" : "int i = (int) _inputBuffer[_inputPtr++] & 0xFF;",
    "info" : "VariableDeclarationStatement[108642-108689]:VariableDeclarationStatement[108788-108835]"
  }, {
    "left" : "int code = codes[i];",
    "right" : "int code = codes[i];",
    "info" : "VariableDeclarationStatement[108702-108722]:VariableDeclarationStatement[108848-108868]"
  }, {
    "left" : "if (code != 0)",
    "right" : "if (code != 0)",
    "info" : "IfStatement[108735-109632]:IfStatement[108881-109778]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[108750-109632]:Block[108896-109778]"
  }, {
    "left" : "switch (code) {\n                case INT_LF:\n                    ++_currInputRow;\n                    _currInputRowStart = _inputPtr;\n                    return;\n                case INT_CR:\n                    _skipCR();\n                    return;\n                case '*': // nop for these comments\n                    break;\n                case 2: // 2-byte UTF\n                    _skipUtf8_2();\n                    break;\n                case 3: // 3-byte UTF\n                    _skipUtf8_3();\n                    break;\n                case 4: // 4-byte UTF\n                    _skipUtf8_4(i);\n                    break;\n                default: // e.g. -1\n                    if (code < 0) {\n                        // Is this good enough error message?\n                        _reportInvalidChar(i);\n                    }\n                }",
    "right" : "switch (code) {\n                case INT_LF:\n                    ++_currInputRow;\n                    _currInputRowStart = _inputPtr;\n                    return;\n                case INT_CR:\n                    _skipCR();\n                    return;\n                case '*': // nop for these comments\n                    break;\n                case 2: // 2-byte UTF\n                    _skipUtf8_2();\n                    break;\n                case 3: // 3-byte UTF\n                    _skipUtf8_3();\n                    break;\n                case 4: // 4-byte UTF\n                    _skipUtf8_4(i);\n                    break;\n                default: // e.g. -1\n                    if (code < 0) {\n                        // Is this good enough error message?\n                        _reportInvalidChar(i);\n                    }\n                }",
    "info" : "SwitchStatement[108768-109618]:SwitchStatement[108914-109764]"
  }, {
    "left" : "case INT_LF:",
    "right" : "case INT_LF:",
    "info" : "SwitchCase[108800-108812]:SwitchCase[108946-108958]"
  }, {
    "left" : "++_currInputRow;",
    "right" : "++_currInputRow;",
    "info" : "ExpressionStatement[108833-108849]:ExpressionStatement[108979-108995]"
  }, {
    "left" : "_currInputRowStart = _inputPtr;",
    "right" : "_currInputRowStart = _inputPtr;",
    "info" : "ExpressionStatement[108870-108901]:ExpressionStatement[109016-109047]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[108922-108929]:ReturnStatement[109068-109075]"
  }, {
    "left" : "case INT_CR:",
    "right" : "case INT_CR:",
    "info" : "SwitchCase[108946-108958]:SwitchCase[109092-109104]"
  }, {
    "left" : "_skipCR();",
    "right" : "_skipCR();",
    "info" : "ExpressionStatement[108979-108989]:ExpressionStatement[109125-109135]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[109010-109017]:ReturnStatement[109156-109163]"
  }, {
    "left" : "case '*':",
    "right" : "case '*':",
    "info" : "SwitchCase[109034-109043]:SwitchCase[109180-109189]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[109090-109096]:BreakStatement[109236-109242]"
  }, {
    "left" : "case 2:",
    "right" : "case 2:",
    "info" : "SwitchCase[109113-109120]:SwitchCase[109259-109266]"
  }, {
    "left" : "_skipUtf8_2();",
    "right" : "_skipUtf8_2();",
    "info" : "ExpressionStatement[109155-109169]:ExpressionStatement[109301-109315]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[109190-109196]:BreakStatement[109336-109342]"
  }, {
    "left" : "case 3:",
    "right" : "case 3:",
    "info" : "SwitchCase[109213-109220]:SwitchCase[109359-109366]"
  }, {
    "left" : "_skipUtf8_3();",
    "right" : "_skipUtf8_3();",
    "info" : "ExpressionStatement[109255-109269]:ExpressionStatement[109401-109415]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[109290-109296]:BreakStatement[109436-109442]"
  }, {
    "left" : "case 4:",
    "right" : "case 4:",
    "info" : "SwitchCase[109313-109320]:SwitchCase[109459-109466]"
  }, {
    "left" : "_skipUtf8_4(i);",
    "right" : "_skipUtf8_4(i);",
    "info" : "ExpressionStatement[109355-109370]:ExpressionStatement[109501-109516]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[109391-109397]:BreakStatement[109537-109543]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[109414-109422]:SwitchCase[109560-109568]"
  }, {
    "left" : "if (code < 0)",
    "right" : "if (code < 0)",
    "info" : "IfStatement[109454-109600]:IfStatement[109600-109746]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[109468-109600]:Block[109614-109746]"
  }, {
    "left" : "_reportInvalidChar(i);",
    "right" : "_reportInvalidChar(i);",
    "info" : "ExpressionStatement[109556-109578]:ExpressionStatement[109702-109724]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[109658-109667]:MarkerAnnotation[109804-109813]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[109672-109681]:Modifier[109818-109827]"
  }, {
    "left" : "char",
    "right" : "char",
    "info" : "PrimitiveType[109682-109686]:PrimitiveType[109828-109832]"
  }, {
    "left" : "_decodeEscaped",
    "right" : "_decodeEscaped",
    "info" : "SimpleName[109687-109701]:SimpleName[109833-109847]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[109711-109722]:SimpleType[109857-109868]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[109727-111158]:Block[109873-111304]"
  }, {
    "left" : "if (_inputPtr >= _inputEnd)",
    "right" : "if (_inputPtr >= _inputEnd)",
    "info" : "IfStatement[109737-109889]:IfStatement[109883-110035]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[109765-109889]:Block[109911-110035]"
  }, {
    "left" : "if (!loadMore())",
    "right" : "if (!loadMore())",
    "info" : "IfStatement[109779-109879]:IfStatement[109925-110025]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[109796-109879]:Block[109942-110025]"
  }, {
    "left" : "_reportInvalidEOF(\" in character escape sequence\");",
    "right" : "_reportInvalidEOF(\" in character escape sequence\");",
    "info" : "ExpressionStatement[109814-109865]:ExpressionStatement[109960-110011]"
  }, {
    "left" : "int c = (int) _inputBuffer[_inputPtr++];",
    "right" : "int c = (int) _inputBuffer[_inputPtr++];",
    "info" : "VariableDeclarationStatement[109898-109938]:VariableDeclarationStatement[110044-110084]"
  }, {
    "left" : "switch (c) {\n            // First, ones that are mapped\n        case 'b':\n            return '\\b';\n        case 't':\n            return '\\t';\n        case 'n':\n            return '\\n';\n        case 'f':\n            return '\\f';\n        case 'r':\n            return '\\r';\n\n            // And these are to be returned as they are\n        case '\"':\n        case '/':\n        case '\\\\':\n            return (char) c;\n\n        case 'u': // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }",
    "right" : "switch (c) {\n            // First, ones that are mapped\n        case 'b':\n            return '\\b';\n        case 't':\n            return '\\t';\n        case 'n':\n            return '\\n';\n        case 'f':\n            return '\\f';\n        case 'r':\n            return '\\r';\n\n            // And these are to be returned as they are\n        case '\"':\n        case '/':\n        case '\\\\':\n            return (char) c;\n\n        case 'u': // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }",
    "info" : "SwitchStatement[109948-110538]:SwitchStatement[110094-110684]"
  }, {
    "left" : "case 'b':",
    "right" : "case 'b':",
    "info" : "SwitchCase[110012-110021]:SwitchCase[110158-110167]"
  }, {
    "left" : "return '\\b';",
    "right" : "return '\\b';",
    "info" : "ReturnStatement[110034-110046]:ReturnStatement[110180-110192]"
  }, {
    "left" : "case 't':",
    "right" : "case 't':",
    "info" : "SwitchCase[110055-110064]:SwitchCase[110201-110210]"
  }, {
    "left" : "return '\\t';",
    "right" : "return '\\t';",
    "info" : "ReturnStatement[110077-110089]:ReturnStatement[110223-110235]"
  }, {
    "left" : "case 'n':",
    "right" : "case 'n':",
    "info" : "SwitchCase[110098-110107]:SwitchCase[110244-110253]"
  }, {
    "left" : "return '\\n';",
    "right" : "return '\\n';",
    "info" : "ReturnStatement[110120-110132]:ReturnStatement[110266-110278]"
  }, {
    "left" : "case 'f':",
    "right" : "case 'f':",
    "info" : "SwitchCase[110141-110150]:SwitchCase[110287-110296]"
  }, {
    "left" : "return '\\f';",
    "right" : "return '\\f';",
    "info" : "ReturnStatement[110163-110175]:ReturnStatement[110309-110321]"
  }, {
    "left" : "case 'r':",
    "right" : "case 'r':",
    "info" : "SwitchCase[110184-110193]:SwitchCase[110330-110339]"
  }, {
    "left" : "return '\\r';",
    "right" : "return '\\r';",
    "info" : "ReturnStatement[110206-110218]:ReturnStatement[110352-110364]"
  }, {
    "left" : "case '\"':",
    "right" : "case '\"':",
    "info" : "SwitchCase[110284-110293]:SwitchCase[110430-110439]"
  }, {
    "left" : "case '/':",
    "right" : "case '/':",
    "info" : "SwitchCase[110302-110311]:SwitchCase[110448-110457]"
  }, {
    "left" : "case '\\\\':",
    "right" : "case '\\\\':",
    "info" : "SwitchCase[110320-110330]:SwitchCase[110466-110476]"
  }, {
    "left" : "return (char) c;",
    "right" : "return (char) c;",
    "info" : "ReturnStatement[110343-110359]:ReturnStatement[110489-110505]"
  }, {
    "left" : "case 'u':",
    "right" : "case 'u':",
    "info" : "SwitchCase[110369-110378]:SwitchCase[110515-110524]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[110418-110424]:BreakStatement[110564-110570]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[110434-110442]:SwitchCase[110580-110588]"
  }, {
    "left" : "return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));",
    "right" : "return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));",
    "info" : "ReturnStatement[110455-110528]:ReturnStatement[110601-110674]"
  }, {
    "left" : "int value = 0;",
    "right" : "int value = 0;",
    "info" : "VariableDeclarationStatement[110595-110609]:VariableDeclarationStatement[110741-110755]"
  }, {
    "left" : "for (int i = 0; i < 4; ++i)",
    "right" : "for (int i = 0; i < 4; ++i)",
    "info" : "ForStatement[110618-111123]:ForStatement[110764-111269]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[110646-111123]:Block[110792-111269]"
  }, {
    "left" : "if (_inputPtr >= _inputEnd)",
    "right" : "if (_inputPtr >= _inputEnd)",
    "info" : "IfStatement[110660-110828]:IfStatement[110806-110974]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[110688-110828]:Block[110834-110974]"
  }, {
    "left" : "if (!loadMore())",
    "right" : "if (!loadMore())",
    "info" : "IfStatement[110706-110814]:IfStatement[110852-110960]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[110723-110814]:Block[110869-110960]"
  }, {
    "left" : "_reportInvalidEOF(\" in character escape sequence\");",
    "right" : "_reportInvalidEOF(\" in character escape sequence\");",
    "info" : "ExpressionStatement[110745-110796]:ExpressionStatement[110891-110942]"
  }, {
    "left" : "int ch = (int) _inputBuffer[_inputPtr++];",
    "right" : "int ch = (int) _inputBuffer[_inputPtr++];",
    "info" : "VariableDeclarationStatement[110841-110882]:VariableDeclarationStatement[110987-111028]"
  }, {
    "left" : "int digit = CharTypes.charToHex(ch);",
    "right" : "int digit = CharTypes.charToHex(ch);",
    "info" : "VariableDeclarationStatement[110895-110931]:VariableDeclarationStatement[111041-111077]"
  }, {
    "left" : "if (digit < 0)",
    "right" : "if (digit < 0)",
    "info" : "IfStatement[110944-111071]:IfStatement[111090-111217]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[110959-111071]:Block[111105-111217]"
  }, {
    "left" : "_reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");",
    "right" : "_reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");",
    "info" : "ExpressionStatement[110977-111057]:ExpressionStatement[111123-111203]"
  }, {
    "left" : "value = (value << 4) | digit;",
    "right" : "value = (value << 4) | digit;",
    "info" : "ExpressionStatement[111084-111113]:ExpressionStatement[111230-111259]"
  }, {
    "left" : "return (char) value;",
    "right" : "return (char) value;",
    "info" : "ReturnStatement[111132-111152]:ReturnStatement[111278-111298]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[111164-111173]:Modifier[111310-111319]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[111174-111177]:PrimitiveType[111320-111323]"
  }, {
    "left" : "_decodeCharForError",
    "right" : "_decodeCharForError",
    "info" : "SimpleName[111178-111197]:SimpleName[111324-111343]"
  }, {
    "left" : "int firstByte",
    "right" : "int firstByte",
    "info" : "SingleVariableDeclaration[111198-111211]:SingleVariableDeclaration[111344-111357]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[111220-111231]:SimpleType[111366-111377]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[111236-112768]:Block[111382-112914]"
  }, {
    "left" : "int c = firstByte & 0xFF;",
    "right" : "int c = firstByte & 0xFF;",
    "info" : "VariableDeclarationStatement[111246-111271]:VariableDeclarationStatement[111392-111417]"
  }, {
    "left" : "if (c > 0x7F)",
    "right" : "if (c > 0x7F)",
    "info" : "IfStatement[111280-112744]:IfStatement[111426-112890]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[111294-112744]:Block[111440-112890]"
  }, {
    "left" : "int needed;",
    "right" : "int needed;",
    "info" : "VariableDeclarationStatement[111344-111355]:VariableDeclarationStatement[111490-111501]"
  }, {
    "left" : "if ((c & 0xE0) == 0xC0)",
    "right" : "if ((c & 0xE0) == 0xC0)",
    "info" : "IfStatement[111446-111982]:IfStatement[111592-112128]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[111470-111569]:Block[111616-111715]"
  }, {
    "left" : "c &= 0x1F;",
    "right" : "c &= 0x1F;",
    "info" : "ExpressionStatement[111517-111527]:ExpressionStatement[111663-111673]"
  }, {
    "left" : "needed = 1;",
    "right" : "needed = 1;",
    "info" : "ExpressionStatement[111544-111555]:ExpressionStatement[111690-111701]"
  }, {
    "left" : "if ((c & 0xF0) == 0xE0)",
    "right" : "if ((c & 0xF0) == 0xE0)",
    "info" : "IfStatement[111575-111982]:IfStatement[111721-112128]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[111599-111698]:Block[111745-111844]"
  }, {
    "left" : "c &= 0x0F;",
    "right" : "c &= 0x0F;",
    "info" : "ExpressionStatement[111646-111656]:ExpressionStatement[111792-111802]"
  }, {
    "left" : "needed = 2;",
    "right" : "needed = 2;",
    "info" : "ExpressionStatement[111673-111684]:ExpressionStatement[111819-111830]"
  }, {
    "left" : "if ((c & 0xF8) == 0xF0)",
    "right" : "if ((c & 0xF8) == 0xF0)",
    "info" : "IfStatement[111704-111982]:IfStatement[111850-112128]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[111728-111865]:Block[111874-112011]"
  }, {
    "left" : "c &= 0x07;",
    "right" : "c &= 0x07;",
    "info" : "ExpressionStatement[111813-111823]:ExpressionStatement[111959-111969]"
  }, {
    "left" : "needed = 3;",
    "right" : "needed = 3;",
    "info" : "ExpressionStatement[111840-111851]:ExpressionStatement[111986-111997]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[111871-111982]:Block[112017-112128]"
  }, {
    "left" : "_reportInvalidInitial(c & 0xFF);",
    "right" : "_reportInvalidInitial(c & 0xFF);",
    "info" : "ExpressionStatement[111889-111921]:ExpressionStatement[112035-112067]"
  }, {
    "left" : "needed = 1;",
    "right" : "needed = 1;",
    "info" : "ExpressionStatement[111938-111949]:ExpressionStatement[112084-112095]"
  }, {
    "left" : "int d = nextByte();",
    "right" : "int d = nextByte();",
    "info" : "VariableDeclarationStatement[111996-112015]:VariableDeclarationStatement[112142-112161]"
  }, {
    "left" : "if ((d & 0xC0) != 0x080)",
    "right" : "if ((d & 0xC0) != 0x080)",
    "info" : "IfStatement[112028-112115]:IfStatement[112174-112261]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[112053-112115]:Block[112199-112261]"
  }, {
    "left" : "_reportInvalidOther(d & 0xFF);",
    "right" : "_reportInvalidOther(d & 0xFF);",
    "info" : "ExpressionStatement[112071-112101]:ExpressionStatement[112217-112247]"
  }, {
    "left" : "c = (c << 6) | (d & 0x3F);",
    "right" : "c = (c << 6) | (d & 0x3F);",
    "info" : "ExpressionStatement[112128-112154]:ExpressionStatement[112274-112300]"
  }, {
    "left" : "if (needed > 1)",
    "right" : "if (needed > 1)",
    "info" : "IfStatement[112180-112734]:IfStatement[112326-112880]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[112196-112734]:Block[112342-112880]"
  }, {
    "left" : "d = nextByte();",
    "right" : "d = nextByte();",
    "info" : "ExpressionStatement[112249-112264]:ExpressionStatement[112395-112410]"
  }, {
    "left" : "if ((d & 0xC0) != 0x080)",
    "right" : "if ((d & 0xC0) != 0x080)",
    "info" : "IfStatement[112293-112388]:IfStatement[112439-112534]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[112318-112388]:Block[112464-112534]"
  }, {
    "left" : "_reportInvalidOther(d & 0xFF);",
    "right" : "_reportInvalidOther(d & 0xFF);",
    "info" : "ExpressionStatement[112340-112370]:ExpressionStatement[112486-112516]"
  }, {
    "left" : "c = (c << 6) | (d & 0x3F);",
    "right" : "c = (c << 6) | (d & 0x3F);",
    "info" : "ExpressionStatement[112405-112431]:ExpressionStatement[112551-112577]"
  }, {
    "left" : "if (needed > 2)",
    "right" : "if (needed > 2)",
    "info" : "IfStatement[112448-112720]:IfStatement[112594-112866]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[112464-112720]:Block[112610-112866]"
  }, {
    "left" : "d = nextByte();",
    "right" : "d = nextByte();",
    "info" : "ExpressionStatement[112516-112531]:ExpressionStatement[112662-112677]"
  }, {
    "left" : "if ((d & 0xC0) != 0x080)",
    "right" : "if ((d & 0xC0) != 0x080)",
    "info" : "IfStatement[112552-112655]:IfStatement[112698-112801]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[112577-112655]:Block[112723-112801]"
  }, {
    "left" : "_reportInvalidOther(d & 0xFF);",
    "right" : "_reportInvalidOther(d & 0xFF);",
    "info" : "ExpressionStatement[112603-112633]:ExpressionStatement[112749-112779]"
  }, {
    "left" : "c = (c << 6) | (d & 0x3F);",
    "right" : "c = (c << 6) | (d & 0x3F);",
    "info" : "ExpressionStatement[112676-112702]:ExpressionStatement[112822-112848]"
  }, {
    "left" : "return c;",
    "right" : "return c;",
    "info" : "ReturnStatement[112753-112762]:ReturnStatement[112899-112908]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[112956-112963]:Modifier[113102-113109]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[112964-112969]:Modifier[113110-113115]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[112970-112973]:PrimitiveType[113116-113119]"
  }, {
    "left" : "_decodeUtf8_2",
    "right" : "_decodeUtf8_2",
    "info" : "SimpleName[112974-112987]:SimpleName[113120-113133]"
  }, {
    "left" : "int c",
    "right" : "int c",
    "info" : "SingleVariableDeclaration[112988-112993]:SingleVariableDeclaration[113134-113139]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[113002-113013]:SimpleType[113148-113159]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[113018-113302]:Block[113164-113448]"
  }, {
    "left" : "if (_inputPtr >= _inputEnd)",
    "right" : "if (_inputPtr >= _inputEnd)",
    "info" : "IfStatement[113028-113101]:IfStatement[113174-113247]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[113056-113101]:Block[113202-113247]"
  }, {
    "left" : "loadMoreGuaranteed();",
    "right" : "loadMoreGuaranteed();",
    "info" : "ExpressionStatement[113070-113091]:ExpressionStatement[113216-113237]"
  }, {
    "left" : "int d = (int) _inputBuffer[_inputPtr++];",
    "right" : "int d = (int) _inputBuffer[_inputPtr++];",
    "info" : "VariableDeclarationStatement[113110-113150]:VariableDeclarationStatement[113256-113296]"
  }, {
    "left" : "if ((d & 0xC0) != 0x080)",
    "right" : "if ((d & 0xC0) != 0x080)",
    "info" : "IfStatement[113159-113249]:IfStatement[113305-113395]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[113184-113249]:Block[113330-113395]"
  }, {
    "left" : "_reportInvalidOther(d & 0xFF, _inputPtr);",
    "right" : "_reportInvalidOther(d & 0xFF, _inputPtr);",
    "info" : "ExpressionStatement[113198-113239]:ExpressionStatement[113344-113385]"
  }, {
    "left" : "return ((c & 0x1F) << 6) | (d & 0x3F);",
    "right" : "return ((c & 0x1F) << 6) | (d & 0x3F);",
    "info" : "ReturnStatement[113258-113296]:ReturnStatement[113404-113442]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[113308-113315]:Modifier[113454-113461]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[113316-113321]:Modifier[113462-113467]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[113322-113325]:PrimitiveType[113468-113471]"
  }, {
    "left" : "_decodeUtf8_3",
    "right" : "_decodeUtf8_3",
    "info" : "SimpleName[113326-113339]:SimpleName[113472-113485]"
  }, {
    "left" : "int c1",
    "right" : "int c1",
    "info" : "SingleVariableDeclaration[113340-113346]:SingleVariableDeclaration[113486-113492]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[113355-113366]:SimpleType[113501-113512]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[113371-113947]:Block[113517-114093]"
  }, {
    "left" : "if (_inputPtr >= _inputEnd)",
    "right" : "if (_inputPtr >= _inputEnd)",
    "info" : "IfStatement[113381-113454]:IfStatement[113527-113600]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[113409-113454]:Block[113555-113600]"
  }, {
    "left" : "loadMoreGuaranteed();",
    "right" : "loadMoreGuaranteed();",
    "info" : "ExpressionStatement[113423-113444]:ExpressionStatement[113569-113590]"
  }, {
    "left" : "c1 &= 0x0F;",
    "right" : "c1 &= 0x0F;",
    "info" : "ExpressionStatement[113463-113474]:ExpressionStatement[113609-113620]"
  }, {
    "left" : "int d = (int) _inputBuffer[_inputPtr++];",
    "right" : "int d = (int) _inputBuffer[_inputPtr++];",
    "info" : "VariableDeclarationStatement[113483-113523]:VariableDeclarationStatement[113629-113669]"
  }, {
    "left" : "if ((d & 0xC0) != 0x080)",
    "right" : "if ((d & 0xC0) != 0x080)",
    "info" : "IfStatement[113532-113622]:IfStatement[113678-113768]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[113557-113622]:Block[113703-113768]"
  }, {
    "left" : "_reportInvalidOther(d & 0xFF, _inputPtr);",
    "right" : "_reportInvalidOther(d & 0xFF, _inputPtr);",
    "info" : "ExpressionStatement[113571-113612]:ExpressionStatement[113717-113758]"
  }, {
    "left" : "int c = (c1 << 6) | (d & 0x3F);",
    "right" : "int c = (c1 << 6) | (d & 0x3F);",
    "info" : "VariableDeclarationStatement[113631-113662]:VariableDeclarationStatement[113777-113808]"
  }, {
    "left" : "if (_inputPtr >= _inputEnd)",
    "right" : "if (_inputPtr >= _inputEnd)",
    "info" : "IfStatement[113671-113744]:IfStatement[113817-113890]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[113699-113744]:Block[113845-113890]"
  }, {
    "left" : "loadMoreGuaranteed();",
    "right" : "loadMoreGuaranteed();",
    "info" : "ExpressionStatement[113713-113734]:ExpressionStatement[113859-113880]"
  }, {
    "left" : "d = (int) _inputBuffer[_inputPtr++];",
    "right" : "d = (int) _inputBuffer[_inputPtr++];",
    "info" : "ExpressionStatement[113753-113789]:ExpressionStatement[113899-113935]"
  }, {
    "left" : "if ((d & 0xC0) != 0x080)",
    "right" : "if ((d & 0xC0) != 0x080)",
    "info" : "IfStatement[113798-113888]:IfStatement[113944-114034]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[113823-113888]:Block[113969-114034]"
  }, {
    "left" : "_reportInvalidOther(d & 0xFF, _inputPtr);",
    "right" : "_reportInvalidOther(d & 0xFF, _inputPtr);",
    "info" : "ExpressionStatement[113837-113878]:ExpressionStatement[113983-114024]"
  }, {
    "left" : "c = (c << 6) | (d & 0x3F);",
    "right" : "c = (c << 6) | (d & 0x3F);",
    "info" : "ExpressionStatement[113897-113923]:ExpressionStatement[114043-114069]"
  }, {
    "left" : "return c;",
    "right" : "return c;",
    "info" : "ReturnStatement[113932-113941]:ReturnStatement[114078-114087]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[113953-113960]:Modifier[114099-114106]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[113961-113966]:Modifier[114107-114112]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[113967-113970]:PrimitiveType[114113-114116]"
  }, {
    "left" : "_decodeUtf8_3fast",
    "right" : "_decodeUtf8_3fast",
    "info" : "SimpleName[113971-113988]:SimpleName[114117-114134]"
  }, {
    "left" : "int c1",
    "right" : "int c1",
    "info" : "SingleVariableDeclaration[113989-113995]:SingleVariableDeclaration[114135-114141]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[114004-114015]:SimpleType[114150-114161]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[114020-114432]:Block[114166-114578]"
  }, {
    "left" : "c1 &= 0x0F;",
    "right" : "c1 &= 0x0F;",
    "info" : "ExpressionStatement[114030-114041]:ExpressionStatement[114176-114187]"
  }, {
    "left" : "int d = (int) _inputBuffer[_inputPtr++];",
    "right" : "int d = (int) _inputBuffer[_inputPtr++];",
    "info" : "VariableDeclarationStatement[114050-114090]:VariableDeclarationStatement[114196-114236]"
  }, {
    "left" : "if ((d & 0xC0) != 0x080)",
    "right" : "if ((d & 0xC0) != 0x080)",
    "info" : "IfStatement[114099-114189]:IfStatement[114245-114335]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[114124-114189]:Block[114270-114335]"
  }, {
    "left" : "_reportInvalidOther(d & 0xFF, _inputPtr);",
    "right" : "_reportInvalidOther(d & 0xFF, _inputPtr);",
    "info" : "ExpressionStatement[114138-114179]:ExpressionStatement[114284-114325]"
  }, {
    "left" : "int c = (c1 << 6) | (d & 0x3F);",
    "right" : "int c = (c1 << 6) | (d & 0x3F);",
    "info" : "VariableDeclarationStatement[114198-114229]:VariableDeclarationStatement[114344-114375]"
  }, {
    "left" : "d = (int) _inputBuffer[_inputPtr++];",
    "right" : "d = (int) _inputBuffer[_inputPtr++];",
    "info" : "ExpressionStatement[114238-114274]:ExpressionStatement[114384-114420]"
  }, {
    "left" : "if ((d & 0xC0) != 0x080)",
    "right" : "if ((d & 0xC0) != 0x080)",
    "info" : "IfStatement[114283-114373]:IfStatement[114429-114519]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[114308-114373]:Block[114454-114519]"
  }, {
    "left" : "_reportInvalidOther(d & 0xFF, _inputPtr);",
    "right" : "_reportInvalidOther(d & 0xFF, _inputPtr);",
    "info" : "ExpressionStatement[114322-114363]:ExpressionStatement[114468-114509]"
  }, {
    "left" : "c = (c << 6) | (d & 0x3F);",
    "right" : "c = (c << 6) | (d & 0x3F);",
    "info" : "ExpressionStatement[114382-114408]:ExpressionStatement[114528-114554]"
  }, {
    "left" : "return c;",
    "right" : "return c;",
    "info" : "ReturnStatement[114417-114426]:ReturnStatement[114563-114572]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[114580-114587]:Modifier[114726-114733]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[114588-114593]:Modifier[114734-114739]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[114594-114597]:PrimitiveType[114740-114743]"
  }, {
    "left" : "_decodeUtf8_4",
    "right" : "_decodeUtf8_4",
    "info" : "SimpleName[114598-114611]:SimpleName[114744-114757]"
  }, {
    "left" : "int c",
    "right" : "int c",
    "info" : "SingleVariableDeclaration[114612-114617]:SingleVariableDeclaration[114758-114763]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[114626-114637]:SimpleType[114772-114783]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[114642-115586]:Block[114788-115732]"
  }, {
    "left" : "if (_inputPtr >= _inputEnd)",
    "right" : "if (_inputPtr >= _inputEnd)",
    "info" : "IfStatement[114652-114725]:IfStatement[114798-114871]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[114680-114725]:Block[114826-114871]"
  }, {
    "left" : "loadMoreGuaranteed();",
    "right" : "loadMoreGuaranteed();",
    "info" : "ExpressionStatement[114694-114715]:ExpressionStatement[114840-114861]"
  }, {
    "left" : "int d = (int) _inputBuffer[_inputPtr++];",
    "right" : "int d = (int) _inputBuffer[_inputPtr++];",
    "info" : "VariableDeclarationStatement[114734-114774]:VariableDeclarationStatement[114880-114920]"
  }, {
    "left" : "if ((d & 0xC0) != 0x080)",
    "right" : "if ((d & 0xC0) != 0x080)",
    "info" : "IfStatement[114783-114873]:IfStatement[114929-115019]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[114808-114873]:Block[114954-115019]"
  }, {
    "left" : "_reportInvalidOther(d & 0xFF, _inputPtr);",
    "right" : "_reportInvalidOther(d & 0xFF, _inputPtr);",
    "info" : "ExpressionStatement[114822-114863]:ExpressionStatement[114968-115009]"
  }, {
    "left" : "c = ((c & 0x07) << 6) | (d & 0x3F);",
    "right" : "c = ((c & 0x07) << 6) | (d & 0x3F);",
    "info" : "ExpressionStatement[114882-114917]:ExpressionStatement[115028-115063]"
  }, {
    "left" : "if (_inputPtr >= _inputEnd)",
    "right" : "if (_inputPtr >= _inputEnd)",
    "info" : "IfStatement[114927-115000]:IfStatement[115073-115146]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[114955-115000]:Block[115101-115146]"
  }, {
    "left" : "loadMoreGuaranteed();",
    "right" : "loadMoreGuaranteed();",
    "info" : "ExpressionStatement[114969-114990]:ExpressionStatement[115115-115136]"
  }, {
    "left" : "d = (int) _inputBuffer[_inputPtr++];",
    "right" : "d = (int) _inputBuffer[_inputPtr++];",
    "info" : "ExpressionStatement[115009-115045]:ExpressionStatement[115155-115191]"
  }, {
    "left" : "if ((d & 0xC0) != 0x080)",
    "right" : "if ((d & 0xC0) != 0x080)",
    "info" : "IfStatement[115054-115144]:IfStatement[115200-115290]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[115079-115144]:Block[115225-115290]"
  }, {
    "left" : "_reportInvalidOther(d & 0xFF, _inputPtr);",
    "right" : "_reportInvalidOther(d & 0xFF, _inputPtr);",
    "info" : "ExpressionStatement[115093-115134]:ExpressionStatement[115239-115280]"
  }, {
    "left" : "c = (c << 6) | (d & 0x3F);",
    "right" : "c = (c << 6) | (d & 0x3F);",
    "info" : "ExpressionStatement[115153-115179]:ExpressionStatement[115299-115325]"
  }, {
    "left" : "if (_inputPtr >= _inputEnd)",
    "right" : "if (_inputPtr >= _inputEnd)",
    "info" : "IfStatement[115188-115261]:IfStatement[115334-115407]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[115216-115261]:Block[115362-115407]"
  }, {
    "left" : "loadMoreGuaranteed();",
    "right" : "loadMoreGuaranteed();",
    "info" : "ExpressionStatement[115230-115251]:ExpressionStatement[115376-115397]"
  }, {
    "left" : "d = (int) _inputBuffer[_inputPtr++];",
    "right" : "d = (int) _inputBuffer[_inputPtr++];",
    "info" : "ExpressionStatement[115270-115306]:ExpressionStatement[115416-115452]"
  }, {
    "left" : "if ((d & 0xC0) != 0x080)",
    "right" : "if ((d & 0xC0) != 0x080)",
    "info" : "IfStatement[115315-115405]:IfStatement[115461-115551]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[115340-115405]:Block[115486-115551]"
  }, {
    "left" : "_reportInvalidOther(d & 0xFF, _inputPtr);",
    "right" : "_reportInvalidOther(d & 0xFF, _inputPtr);",
    "info" : "ExpressionStatement[115354-115395]:ExpressionStatement[115500-115541]"
  }, {
    "left" : "return ((c << 6) | (d & 0x3F)) - 0x10000;",
    "right" : "return ((c << 6) | (d & 0x3F)) - 0x10000;",
    "info" : "ReturnStatement[115539-115580]:ReturnStatement[115685-115726]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[115592-115599]:Modifier[115738-115745]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[115600-115605]:Modifier[115746-115751]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[115606-115610]:PrimitiveType[115752-115756]"
  }, {
    "left" : "_skipUtf8_2",
    "right" : "_skipUtf8_2",
    "info" : "SimpleName[115611-115622]:SimpleName[115757-115768]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[115632-115643]:SimpleType[115778-115789]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[115648-115885]:Block[115794-116031]"
  }, {
    "left" : "if (_inputPtr >= _inputEnd)",
    "right" : "if (_inputPtr >= _inputEnd)",
    "info" : "IfStatement[115658-115731]:IfStatement[115804-115877]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[115686-115731]:Block[115832-115877]"
  }, {
    "left" : "loadMoreGuaranteed();",
    "right" : "loadMoreGuaranteed();",
    "info" : "ExpressionStatement[115700-115721]:ExpressionStatement[115846-115867]"
  }, {
    "left" : "int c = (int) _inputBuffer[_inputPtr++];",
    "right" : "int c = (int) _inputBuffer[_inputPtr++];",
    "info" : "VariableDeclarationStatement[115740-115780]:VariableDeclarationStatement[115886-115926]"
  }, {
    "left" : "if ((c & 0xC0) != 0x080)",
    "right" : "if ((c & 0xC0) != 0x080)",
    "info" : "IfStatement[115789-115879]:IfStatement[115935-116025]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[115814-115879]:Block[115960-116025]"
  }, {
    "left" : "_reportInvalidOther(c & 0xFF, _inputPtr);",
    "right" : "_reportInvalidOther(c & 0xFF, _inputPtr);",
    "info" : "ExpressionStatement[115828-115869]:ExpressionStatement[115974-116015]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[115997-116004]:Modifier[116143-116150]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[116005-116010]:Modifier[116151-116156]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[116011-116015]:PrimitiveType[116157-116161]"
  }, {
    "left" : "_skipUtf8_3",
    "right" : "_skipUtf8_3",
    "info" : "SimpleName[116016-116027]:SimpleName[116162-116173]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[116037-116048]:SimpleType[116183-116194]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[116053-116537]:Block[116199-116683]"
  }, {
    "left" : "if (_inputPtr >= _inputEnd)",
    "right" : "if (_inputPtr >= _inputEnd)",
    "info" : "IfStatement[116063-116136]:IfStatement[116209-116282]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[116091-116136]:Block[116237-116282]"
  }, {
    "left" : "loadMoreGuaranteed();",
    "right" : "loadMoreGuaranteed();",
    "info" : "ExpressionStatement[116105-116126]:ExpressionStatement[116251-116272]"
  }, {
    "left" : "int c = (int) _inputBuffer[_inputPtr++];",
    "right" : "int c = (int) _inputBuffer[_inputPtr++];",
    "info" : "VariableDeclarationStatement[116166-116206]:VariableDeclarationStatement[116312-116352]"
  }, {
    "left" : "if ((c & 0xC0) != 0x080)",
    "right" : "if ((c & 0xC0) != 0x080)",
    "info" : "IfStatement[116215-116305]:IfStatement[116361-116451]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[116240-116305]:Block[116386-116451]"
  }, {
    "left" : "_reportInvalidOther(c & 0xFF, _inputPtr);",
    "right" : "_reportInvalidOther(c & 0xFF, _inputPtr);",
    "info" : "ExpressionStatement[116254-116295]:ExpressionStatement[116400-116441]"
  }, {
    "left" : "if (_inputPtr >= _inputEnd)",
    "right" : "if (_inputPtr >= _inputEnd)",
    "info" : "IfStatement[116314-116387]:IfStatement[116460-116533]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[116342-116387]:Block[116488-116533]"
  }, {
    "left" : "loadMoreGuaranteed();",
    "right" : "loadMoreGuaranteed();",
    "info" : "ExpressionStatement[116356-116377]:ExpressionStatement[116502-116523]"
  }, {
    "left" : "c = (int) _inputBuffer[_inputPtr++];",
    "right" : "c = (int) _inputBuffer[_inputPtr++];",
    "info" : "ExpressionStatement[116396-116432]:ExpressionStatement[116542-116578]"
  }, {
    "left" : "if ((c & 0xC0) != 0x080)",
    "right" : "if ((c & 0xC0) != 0x080)",
    "info" : "IfStatement[116441-116531]:IfStatement[116587-116677]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[116466-116531]:Block[116612-116677]"
  }, {
    "left" : "_reportInvalidOther(c & 0xFF, _inputPtr);",
    "right" : "_reportInvalidOther(c & 0xFF, _inputPtr);",
    "info" : "ExpressionStatement[116480-116521]:ExpressionStatement[116626-116667]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[116543-116550]:Modifier[116689-116696]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[116551-116556]:Modifier[116697-116702]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[116557-116561]:PrimitiveType[116703-116707]"
  }, {
    "left" : "_skipUtf8_4",
    "right" : "_skipUtf8_4",
    "info" : "SimpleName[116562-116573]:SimpleName[116708-116719]"
  }, {
    "left" : "int c",
    "right" : "int c",
    "info" : "SingleVariableDeclaration[116574-116579]:SingleVariableDeclaration[116720-116725]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[116588-116599]:SimpleType[116734-116745]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[116604-117293]:Block[116750-117439]"
  }, {
    "left" : "if (_inputPtr >= _inputEnd)",
    "right" : "if (_inputPtr >= _inputEnd)",
    "info" : "IfStatement[116614-116687]:IfStatement[116760-116833]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[116642-116687]:Block[116788-116833]"
  }, {
    "left" : "loadMoreGuaranteed();",
    "right" : "loadMoreGuaranteed();",
    "info" : "ExpressionStatement[116656-116677]:ExpressionStatement[116802-116823]"
  }, {
    "left" : "int d = (int) _inputBuffer[_inputPtr++];",
    "right" : "int d = (int) _inputBuffer[_inputPtr++];",
    "info" : "VariableDeclarationStatement[116696-116736]:VariableDeclarationStatement[116842-116882]"
  }, {
    "left" : "if ((d & 0xC0) != 0x080)",
    "right" : "if ((d & 0xC0) != 0x080)",
    "info" : "IfStatement[116745-116835]:IfStatement[116891-116981]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[116770-116835]:Block[116916-116981]"
  }, {
    "left" : "_reportInvalidOther(d & 0xFF, _inputPtr);",
    "right" : "_reportInvalidOther(d & 0xFF, _inputPtr);",
    "info" : "ExpressionStatement[116784-116825]:ExpressionStatement[116930-116971]"
  }, {
    "left" : "if (_inputPtr >= _inputEnd)",
    "right" : "if (_inputPtr >= _inputEnd)",
    "info" : "IfStatement[116844-116917]:IfStatement[116990-117063]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[116872-116917]:Block[117018-117063]"
  }, {
    "left" : "loadMoreGuaranteed();",
    "right" : "loadMoreGuaranteed();",
    "info" : "ExpressionStatement[116886-116907]:ExpressionStatement[117032-117053]"
  }, {
    "left" : "d = (int) _inputBuffer[_inputPtr++];",
    "right" : "d = (int) _inputBuffer[_inputPtr++];",
    "info" : "ExpressionStatement[116926-116962]:ExpressionStatement[117072-117108]"
  }, {
    "left" : "if ((d & 0xC0) != 0x080)",
    "right" : "if ((d & 0xC0) != 0x080)",
    "info" : "IfStatement[116971-117061]:IfStatement[117117-117207]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[116996-117061]:Block[117142-117207]"
  }, {
    "left" : "_reportInvalidOther(d & 0xFF, _inputPtr);",
    "right" : "_reportInvalidOther(d & 0xFF, _inputPtr);",
    "info" : "ExpressionStatement[117010-117051]:ExpressionStatement[117156-117197]"
  }, {
    "left" : "if (_inputPtr >= _inputEnd)",
    "right" : "if (_inputPtr >= _inputEnd)",
    "info" : "IfStatement[117070-117143]:IfStatement[117216-117289]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[117098-117143]:Block[117244-117289]"
  }, {
    "left" : "loadMoreGuaranteed();",
    "right" : "loadMoreGuaranteed();",
    "info" : "ExpressionStatement[117112-117133]:ExpressionStatement[117258-117279]"
  }, {
    "left" : "d = (int) _inputBuffer[_inputPtr++];",
    "right" : "d = (int) _inputBuffer[_inputPtr++];",
    "info" : "ExpressionStatement[117152-117188]:ExpressionStatement[117298-117334]"
  }, {
    "left" : "if ((d & 0xC0) != 0x080)",
    "right" : "if ((d & 0xC0) != 0x080)",
    "info" : "IfStatement[117197-117287]:IfStatement[117343-117433]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[117222-117287]:Block[117368-117433]"
  }, {
    "left" : "_reportInvalidOther(d & 0xFF, _inputPtr);",
    "right" : "_reportInvalidOther(d & 0xFF, _inputPtr);",
    "info" : "ExpressionStatement[117236-117277]:ExpressionStatement[117382-117423]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[117600-117609]:Modifier[117746-117755]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[117610-117615]:Modifier[117756-117761]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[117616-117620]:PrimitiveType[117762-117766]"
  }, {
    "left" : "_skipCR",
    "right" : "_skipCR",
    "info" : "SimpleName[117621-117628]:SimpleName[117767-117774]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[117638-117649]:SimpleType[117784-117795]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[117654-117884]:Block[117800-118030]"
  }, {
    "left" : "if (_inputPtr < _inputEnd || loadMore())",
    "right" : "if (_inputPtr < _inputEnd || loadMore())",
    "info" : "IfStatement[117664-117813]:IfStatement[117810-117959]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[117705-117813]:Block[117851-117959]"
  }, {
    "left" : "if (_inputBuffer[_inputPtr] == BYTE_LF)",
    "right" : "if (_inputBuffer[_inputPtr] == BYTE_LF)",
    "info" : "IfStatement[117719-117803]:IfStatement[117865-117949]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[117759-117803]:Block[117905-117949]"
  }, {
    "left" : "++_inputPtr;",
    "right" : "++_inputPtr;",
    "info" : "ExpressionStatement[117777-117789]:ExpressionStatement[117923-117935]"
  }, {
    "left" : "++_currInputRow;",
    "right" : "++_currInputRow;",
    "info" : "ExpressionStatement[117822-117838]:ExpressionStatement[117968-117984]"
  }, {
    "left" : "_currInputRowStart = _inputPtr;",
    "right" : "_currInputRowStart = _inputPtr;",
    "info" : "ExpressionStatement[117847-117878]:ExpressionStatement[117993-118024]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[117894-117901]:Modifier[118040-118047]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[117902-117905]:PrimitiveType[118048-118051]"
  }, {
    "left" : "nextByte",
    "right" : "nextByte",
    "info" : "SimpleName[117906-117914]:SimpleName[118052-118060]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[117924-117935]:SimpleType[118070-118081]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[117940-118078]:Block[118086-118224]"
  }, {
    "left" : "if (_inputPtr >= _inputEnd)",
    "right" : "if (_inputPtr >= _inputEnd)",
    "info" : "IfStatement[117950-118023]:IfStatement[118096-118169]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[117978-118023]:Block[118124-118169]"
  }, {
    "left" : "loadMoreGuaranteed();",
    "right" : "loadMoreGuaranteed();",
    "info" : "ExpressionStatement[117992-118013]:ExpressionStatement[118138-118159]"
  }, {
    "left" : "return _inputBuffer[_inputPtr++] & 0xFF;",
    "right" : "return _inputBuffer[_inputPtr++] & 0xFF;",
    "info" : "ReturnStatement[118032-118072]:ReturnStatement[118178-118218]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[118269-118278]:Modifier[118415-118424]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[118279-118283]:PrimitiveType[118425-118429]"
  }, {
    "left" : "_reportInvalidToken",
    "right" : "_reportInvalidToken",
    "info" : "SimpleName[118284-118303]:SimpleName[118430-118449]"
  }, {
    "left" : "String matchedPart",
    "right" : "String matchedPart",
    "info" : "SingleVariableDeclaration[118304-118322]:SingleVariableDeclaration[118450-118468]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[118331-118342]:SimpleType[118477-118488]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[118348-118433]:Block[118494-118579]"
  }, {
    "left" : "_reportInvalidToken(matchedPart, \"'null', 'true', 'false' or NaN\");",
    "right" : "_reportInvalidToken(matchedPart, \"'null', 'true', 'false' or NaN\");",
    "info" : "ExpressionStatement[118359-118426]:ExpressionStatement[118505-118572]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[118439-118448]:Modifier[118585-118594]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[118449-118453]:PrimitiveType[118595-118599]"
  }, {
    "left" : "_reportInvalidToken",
    "right" : "_reportInvalidToken",
    "info" : "SimpleName[118454-118473]:SimpleName[118600-118619]"
  }, {
    "left" : "String matchedPart",
    "right" : "String matchedPart",
    "info" : "SingleVariableDeclaration[118474-118492]:SingleVariableDeclaration[118620-118638]"
  }, {
    "left" : "String msg",
    "right" : "String msg",
    "info" : "SingleVariableDeclaration[118494-118504]:SingleVariableDeclaration[118640-118650]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[118513-118524]:SimpleType[118659-118670]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[118530-119247]:Block[118676-119393]"
  }, {
    "left" : "StringBuilder sb = new StringBuilder(matchedPart);",
    "right" : "StringBuilder sb = new StringBuilder(matchedPart);",
    "info" : "VariableDeclarationStatement[118541-118591]:VariableDeclarationStatement[118687-118737]"
  }, {
    "left" : "while (true)",
    "right" : "while (true)",
    "info" : "WhileStatement[118805-119155]:WhileStatement[118951-119301]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[118818-119155]:Block[118964-119301]"
  }, {
    "left" : "if (_inputPtr >= _inputEnd && !loadMore())",
    "right" : "if (_inputPtr >= _inputEnd && !loadMore())",
    "info" : "IfStatement[118833-118916]:IfStatement[118979-119062]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[118876-118916]:Block[119022-119062]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[118895-118901]:BreakStatement[119041-119047]"
  }, {
    "left" : "int i = (int) _inputBuffer[_inputPtr++];",
    "right" : "int i = (int) _inputBuffer[_inputPtr++];",
    "info" : "VariableDeclarationStatement[118930-118970]:VariableDeclarationStatement[119076-119116]"
  }, {
    "left" : "char c = (char) _decodeCharForError(i);",
    "right" : "char c = (char) _decodeCharForError(i);",
    "info" : "VariableDeclarationStatement[118984-119023]:VariableDeclarationStatement[119130-119169]"
  }, {
    "left" : "if (!Character.isJavaIdentifierPart(c))",
    "right" : "if (!Character.isJavaIdentifierPart(c))",
    "info" : "IfStatement[119037-119117]:IfStatement[119183-119263]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[119077-119117]:Block[119223-119263]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[119096-119102]:BreakStatement[119242-119248]"
  }, {
    "left" : "sb.append(c);",
    "right" : "sb.append(c);",
    "info" : "ExpressionStatement[119131-119144]:ExpressionStatement[119277-119290]"
  }, {
    "left" : "_reportError(\"Unrecognized token '\"+sb.toString()+\"': was expecting \"+msg);",
    "right" : "_reportError(\"Unrecognized token '\"+sb.toString()+\"': was expecting \"+msg);",
    "info" : "ExpressionStatement[119165-119240]:ExpressionStatement[119311-119386]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[119261-119270]:Modifier[119407-119416]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[119271-119275]:PrimitiveType[119417-119421]"
  }, {
    "left" : "_reportInvalidChar",
    "right" : "_reportInvalidChar",
    "info" : "SimpleName[119276-119294]:SimpleName[119422-119440]"
  }, {
    "left" : "int c",
    "right" : "int c",
    "info" : "SingleVariableDeclaration[119295-119300]:SingleVariableDeclaration[119441-119446]"
  }, {
    "left" : "JsonParseException",
    "right" : "JsonParseException",
    "info" : "SimpleType[119317-119335]:SimpleType[119463-119481]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[119340-119512]:Block[119486-119658]"
  }, {
    "left" : "if (c < INT_SPACE)",
    "right" : "if (c < INT_SPACE)",
    "info" : "IfStatement[119407-119472]:IfStatement[119553-119618]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[119426-119472]:Block[119572-119618]"
  }, {
    "left" : "_throwInvalidSpace(c);",
    "right" : "_throwInvalidSpace(c);",
    "info" : "ExpressionStatement[119440-119462]:ExpressionStatement[119586-119608]"
  }, {
    "left" : "_reportInvalidInitial(c);",
    "right" : "_reportInvalidInitial(c);",
    "info" : "ExpressionStatement[119481-119506]:ExpressionStatement[119627-119652]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[119518-119527]:Modifier[119664-119673]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[119528-119532]:PrimitiveType[119674-119678]"
  }, {
    "left" : "_reportInvalidInitial",
    "right" : "_reportInvalidInitial",
    "info" : "SimpleName[119533-119554]:SimpleName[119679-119700]"
  }, {
    "left" : "int mask",
    "right" : "int mask",
    "info" : "SingleVariableDeclaration[119555-119563]:SingleVariableDeclaration[119701-119709]"
  }, {
    "left" : "JsonParseException",
    "right" : "JsonParseException",
    "info" : "SimpleType[119580-119598]:SimpleType[119726-119744]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[119603-119689]:Block[119749-119835]"
  }, {
    "left" : "_reportError(\"Invalid UTF-8 start byte 0x\"+Integer.toHexString(mask));",
    "right" : "_reportError(\"Invalid UTF-8 start byte 0x\"+Integer.toHexString(mask));",
    "info" : "ExpressionStatement[119613-119683]:ExpressionStatement[119759-119829]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[119695-119704]:Modifier[119841-119850]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[119705-119709]:PrimitiveType[119851-119855]"
  }, {
    "left" : "_reportInvalidOther",
    "right" : "_reportInvalidOther",
    "info" : "SimpleName[119710-119729]:SimpleName[119856-119875]"
  }, {
    "left" : "int mask",
    "right" : "int mask",
    "info" : "SingleVariableDeclaration[119730-119738]:SingleVariableDeclaration[119876-119884]"
  }, {
    "left" : "JsonParseException",
    "right" : "JsonParseException",
    "info" : "SimpleType[119755-119773]:SimpleType[119901-119919]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[119778-119865]:Block[119924-120011]"
  }, {
    "left" : "_reportError(\"Invalid UTF-8 middle byte 0x\"+Integer.toHexString(mask));",
    "right" : "_reportError(\"Invalid UTF-8 middle byte 0x\"+Integer.toHexString(mask));",
    "info" : "ExpressionStatement[119788-119859]:ExpressionStatement[119934-120005]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[119871-119880]:Modifier[120017-120026]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[119881-119885]:PrimitiveType[120027-120031]"
  }, {
    "left" : "_reportInvalidOther",
    "right" : "_reportInvalidOther",
    "info" : "SimpleName[119886-119905]:SimpleName[120032-120051]"
  }, {
    "left" : "int mask",
    "right" : "int mask",
    "info" : "SingleVariableDeclaration[119906-119914]:SingleVariableDeclaration[120052-120060]"
  }, {
    "left" : "int ptr",
    "right" : "int ptr",
    "info" : "SingleVariableDeclaration[119916-119923]:SingleVariableDeclaration[120062-120069]"
  }, {
    "left" : "JsonParseException",
    "right" : "JsonParseException",
    "info" : "SimpleType[119940-119958]:SimpleType[120086-120104]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[119963-120030]:Block[120109-120176]"
  }, {
    "left" : "_inputPtr = ptr;",
    "right" : "_inputPtr = ptr;",
    "info" : "ExpressionStatement[119973-119989]:ExpressionStatement[120119-120135]"
  }, {
    "left" : "_reportInvalidOther(mask);",
    "right" : "_reportInvalidOther(mask);",
    "info" : "ExpressionStatement[119998-120024]:ExpressionStatement[120144-120170]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[120036-120042]:Modifier[120182-120188]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[120043-120049]:Modifier[120189-120195]"
  }, {
    "left" : "int[]",
    "right" : "int[]",
    "info" : "ArrayType[120050-120055]:ArrayType[120196-120201]"
  }, {
    "left" : "growArrayBy",
    "right" : "growArrayBy",
    "info" : "SimpleName[120056-120067]:SimpleName[120202-120213]"
  }, {
    "left" : "int[] arr",
    "right" : "int[] arr",
    "info" : "SingleVariableDeclaration[120068-120077]:SingleVariableDeclaration[120214-120223]"
  }, {
    "left" : "int more",
    "right" : "int more",
    "info" : "SingleVariableDeclaration[120079-120087]:SingleVariableDeclaration[120225-120233]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[120093-120225]:Block[120239-120371]"
  }, {
    "left" : "if (arr == null)",
    "right" : "if (arr == null)",
    "info" : "IfStatement[120103-120165]:IfStatement[120249-120311]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[120120-120165]:Block[120266-120311]"
  }, {
    "left" : "return new int[more];",
    "right" : "return new int[more];",
    "info" : "ReturnStatement[120134-120155]:ReturnStatement[120280-120301]"
  }, {
    "left" : "return Arrays.copyOf(arr, arr.length + more);",
    "right" : "return Arrays.copyOf(arr, arr.length + more);",
    "info" : "ReturnStatement[120174-120219]:ReturnStatement[120320-120365]"
  }, {
    "left" : "@SuppressWarnings(\"resource\")",
    "right" : "@SuppressWarnings(\"resource\")",
    "info" : "SingleMemberAnnotation[120522-120551]:SingleMemberAnnotation[120668-120697]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[120556-120565]:Modifier[120702-120711]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[120566-120571]:Modifier[120712-120717]"
  }, {
    "left" : "byte[]",
    "right" : "byte[]",
    "info" : "ArrayType[120572-120578]:ArrayType[120718-120724]"
  }, {
    "left" : "_decodeBase64",
    "right" : "_decodeBase64",
    "info" : "SimpleName[120579-120592]:SimpleName[120725-120738]"
  }, {
    "left" : "Base64Variant b64variant",
    "right" : "Base64Variant b64variant",
    "info" : "SingleVariableDeclaration[120593-120617]:SingleVariableDeclaration[120739-120763]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[120626-120637]:SimpleType[120772-120783]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[120642-125087]:Block[120788-125233]"
  }, {
    "left" : "ByteArrayBuilder builder = _getByteArrayBuilder();",
    "right" : "ByteArrayBuilder builder = _getByteArrayBuilder();",
    "info" : "VariableDeclarationStatement[120652-120702]:VariableDeclarationStatement[120798-120848]"
  }, {
    "left" : "while (true)",
    "right" : "while (true)",
    "info" : "WhileStatement[120733-125081]:WhileStatement[120879-125227]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[120746-125081]:Block[120892-125227]"
  }, {
    "left" : "int ch;",
    "right" : "int ch;",
    "info" : "VariableDeclarationStatement[120823-120830]:VariableDeclarationStatement[120969-120976]"
  }, {
    "left" : "do{...}",
    "right" : "do{...}",
    "info" : "DoStatement[120843-121053]:DoStatement[120989-121199]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[120846-121028]:Block[120992-121174]"
  }, {
    "left" : "if (_inputPtr >= _inputEnd)",
    "right" : "if (_inputPtr >= _inputEnd)",
    "info" : "IfStatement[120864-120953]:IfStatement[121010-121099]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[120892-120953]:Block[121038-121099]"
  }, {
    "left" : "loadMoreGuaranteed();",
    "right" : "loadMoreGuaranteed();",
    "info" : "ExpressionStatement[120914-120935]:ExpressionStatement[121060-121081]"
  }, {
    "left" : "ch = (int) _inputBuffer[_inputPtr++] & 0xFF;",
    "right" : "ch = (int) _inputBuffer[_inputPtr++] & 0xFF;",
    "info" : "ExpressionStatement[120970-121014]:ExpressionStatement[121116-121160]"
  }, {
    "left" : "int bits = b64variant.decodeBase64Char(ch);",
    "right" : "int bits = b64variant.decodeBase64Char(ch);",
    "info" : "VariableDeclarationStatement[121066-121109]:VariableDeclarationStatement[121212-121255]"
  }, {
    "left" : "if (bits < 0)",
    "right" : "if (bits < 0)",
    "info" : "IfStatement[121122-121461]:IfStatement[121268-121607]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[121136-121461]:Block[121282-121607]"
  }, {
    "left" : "if (ch == INT_QUOTE)",
    "right" : "if (ch == INT_QUOTE)",
    "info" : "IfStatement[121191-121281]:IfStatement[121337-121427]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[121212-121281]:Block[121358-121427]"
  }, {
    "left" : "return builder.toByteArray();",
    "right" : "return builder.toByteArray();",
    "info" : "ReturnStatement[121234-121263]:ReturnStatement[121380-121409]"
  }, {
    "left" : "bits = _decodeBase64Escape(b64variant, ch, 0);",
    "right" : "bits = _decodeBase64Escape(b64variant, ch, 0);",
    "info" : "ExpressionStatement[121298-121344]:ExpressionStatement[121444-121490]"
  }, {
    "left" : "if (bits < 0)",
    "right" : "if (bits < 0)",
    "info" : "IfStatement[121361-121447]:IfStatement[121507-121593]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[121375-121447]:Block[121521-121593]"
  }, {
    "left" : "continue;",
    "right" : "continue;",
    "info" : "ContinueStatement[121420-121429]:ContinueStatement[121566-121575]"
  }, {
    "left" : "int decodedData = bits;",
    "right" : "int decodedData = bits;",
    "info" : "VariableDeclarationStatement[121474-121497]:VariableDeclarationStatement[121620-121643]"
  }, {
    "left" : "if (_inputPtr >= _inputEnd)",
    "right" : "if (_inputPtr >= _inputEnd)",
    "info" : "IfStatement[121606-121687]:IfStatement[121752-121833]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[121634-121687]:Block[121780-121833]"
  }, {
    "left" : "loadMoreGuaranteed();",
    "right" : "loadMoreGuaranteed();",
    "info" : "ExpressionStatement[121652-121673]:ExpressionStatement[121798-121819]"
  }, {
    "left" : "ch = _inputBuffer[_inputPtr++] & 0xFF;",
    "right" : "ch = _inputBuffer[_inputPtr++] & 0xFF;",
    "info" : "ExpressionStatement[121700-121738]:ExpressionStatement[121846-121884]"
  }, {
    "left" : "bits = b64variant.decodeBase64Char(ch);",
    "right" : "bits = b64variant.decodeBase64Char(ch);",
    "info" : "ExpressionStatement[121751-121790]:ExpressionStatement[121897-121936]"
  }, {
    "left" : "if (bits < 0)",
    "right" : "if (bits < 0)",
    "info" : "IfStatement[121803-121895]:IfStatement[121949-122041]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[121817-121895]:Block[121963-122041]"
  }, {
    "left" : "bits = _decodeBase64Escape(b64variant, ch, 1);",
    "right" : "bits = _decodeBase64Escape(b64variant, ch, 1);",
    "info" : "ExpressionStatement[121835-121881]:ExpressionStatement[121981-122027]"
  }, {
    "left" : "decodedData = (decodedData << 6) | bits;",
    "right" : "decodedData = (decodedData << 6) | bits;",
    "info" : "ExpressionStatement[121908-121948]:ExpressionStatement[122054-122094]"
  }, {
    "left" : "if (_inputPtr >= _inputEnd)",
    "right" : "if (_inputPtr >= _inputEnd)",
    "info" : "IfStatement[122035-122116]:IfStatement[122181-122262]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[122063-122116]:Block[122209-122262]"
  }, {
    "left" : "loadMoreGuaranteed();",
    "right" : "loadMoreGuaranteed();",
    "info" : "ExpressionStatement[122081-122102]:ExpressionStatement[122227-122248]"
  }, {
    "left" : "ch = _inputBuffer[_inputPtr++] & 0xFF;",
    "right" : "ch = _inputBuffer[_inputPtr++] & 0xFF;",
    "info" : "ExpressionStatement[122129-122167]:ExpressionStatement[122275-122313]"
  }, {
    "left" : "bits = b64variant.decodeBase64Char(ch);",
    "right" : "bits = b64variant.decodeBase64Char(ch);",
    "info" : "ExpressionStatement[122180-122219]:ExpressionStatement[122326-122365]"
  }, {
    "left" : "if (bits < 0)",
    "right" : "if (bits < 0)",
    "info" : "IfStatement[122290-123496]:IfStatement[122436-123642]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[122304-123496]:Block[122450-123642]"
  }, {
    "left" : "if (bits != Base64Variant.BASE64_VALUE_PADDING)",
    "right" : "if (bits != Base64Variant.BASE64_VALUE_PADDING)",
    "info" : "IfStatement[122322-122777]:IfStatement[122468-122923]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[122370-122777]:Block[122516-122923]"
  }, {
    "left" : "if (ch == '\"' && !b64variant.usesPadding())",
    "right" : "if (ch == '\"' && !b64variant.usesPadding())",
    "info" : "IfStatement[122475-122692]:IfStatement[122621-122838]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[122519-122692]:Block[122665-122838]"
  }, {
    "left" : "decodedData >>= 4;",
    "right" : "decodedData >>= 4;",
    "info" : "ExpressionStatement[122545-122563]:ExpressionStatement[122691-122709]"
  }, {
    "left" : "builder.append(decodedData);",
    "right" : "builder.append(decodedData);",
    "info" : "ExpressionStatement[122588-122616]:ExpressionStatement[122734-122762]"
  }, {
    "left" : "return builder.toByteArray();",
    "right" : "return builder.toByteArray();",
    "info" : "ReturnStatement[122641-122670]:ReturnStatement[122787-122816]"
  }, {
    "left" : "bits = _decodeBase64Escape(b64variant, ch, 2);",
    "right" : "bits = _decodeBase64Escape(b64variant, ch, 2);",
    "info" : "ExpressionStatement[122713-122759]:ExpressionStatement[122859-122905]"
  }, {
    "left" : "if (bits == Base64Variant.BASE64_VALUE_PADDING)",
    "right" : "if (bits == Base64Variant.BASE64_VALUE_PADDING)",
    "info" : "IfStatement[122794-123482]:IfStatement[122940-123628]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[122842-123482]:Block[122988-123628]"
  }, {
    "left" : "if (_inputPtr >= _inputEnd)",
    "right" : "if (_inputPtr >= _inputEnd)",
    "info" : "IfStatement[122908-123005]:IfStatement[123054-123151]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[122936-123005]:Block[123082-123151]"
  }, {
    "left" : "loadMoreGuaranteed();",
    "right" : "loadMoreGuaranteed();",
    "info" : "ExpressionStatement[122962-122983]:ExpressionStatement[123108-123129]"
  }, {
    "left" : "ch = _inputBuffer[_inputPtr++] & 0xFF;",
    "right" : "ch = _inputBuffer[_inputPtr++] & 0xFF;",
    "info" : "ExpressionStatement[123026-123064]:ExpressionStatement[123172-123210]"
  }, {
    "left" : "if (!b64variant.usesPaddingChar(ch))",
    "right" : "if (!b64variant.usesPaddingChar(ch))",
    "info" : "IfStatement[123085-123283]:IfStatement[123231-123429]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[123122-123283]:Block[123268-123429]"
  }, {
    "left" : "throw reportInvalidBase64Char(b64variant, ch, 3, \"expected padding character '\"+b64variant.getPaddingChar()+\"'\");",
    "right" : "throw reportInvalidBase64Char(b64variant, ch, 3, \"expected padding character '\"+b64variant.getPaddingChar()+\"'\");",
    "info" : "ThrowStatement[123148-123261]:ThrowStatement[123294-123407]"
  }, {
    "left" : "decodedData >>= 4;",
    "right" : "decodedData >>= 4;",
    "info" : "ExpressionStatement[123367-123385]:ExpressionStatement[123513-123531]"
  }, {
    "left" : "builder.append(decodedData);",
    "right" : "builder.append(decodedData);",
    "info" : "ExpressionStatement[123406-123434]:ExpressionStatement[123552-123580]"
  }, {
    "left" : "continue;",
    "right" : "continue;",
    "info" : "ContinueStatement[123455-123464]:ContinueStatement[123601-123610]"
  }, {
    "left" : "decodedData = (decodedData << 6) | bits;",
    "right" : "decodedData = (decodedData << 6) | bits;",
    "info" : "ExpressionStatement[123543-123583]:ExpressionStatement[123689-123729]"
  }, {
    "left" : "if (_inputPtr >= _inputEnd)",
    "right" : "if (_inputPtr >= _inputEnd)",
    "info" : "IfStatement[123667-123748]:IfStatement[123813-123894]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[123695-123748]:Block[123841-123894]"
  }, {
    "left" : "loadMoreGuaranteed();",
    "right" : "loadMoreGuaranteed();",
    "info" : "ExpressionStatement[123713-123734]:ExpressionStatement[123859-123880]"
  }, {
    "left" : "ch = _inputBuffer[_inputPtr++] & 0xFF;",
    "right" : "ch = _inputBuffer[_inputPtr++] & 0xFF;",
    "info" : "ExpressionStatement[123761-123799]:ExpressionStatement[123907-123945]"
  }, {
    "left" : "bits = b64variant.decodeBase64Char(ch);",
    "right" : "bits = b64variant.decodeBase64Char(ch);",
    "info" : "ExpressionStatement[123812-123851]:ExpressionStatement[123958-123997]"
  }, {
    "left" : "if (bits < 0)",
    "right" : "if (bits < 0)",
    "info" : "IfStatement[123864-124913]:IfStatement[124010-125059]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[123878-124913]:Block[124024-125059]"
  }, {
    "left" : "if (bits != Base64Variant.BASE64_VALUE_PADDING)",
    "right" : "if (bits != Base64Variant.BASE64_VALUE_PADDING)",
    "info" : "IfStatement[123896-124359]:IfStatement[124042-124505]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[123944-124359]:Block[124090-124505]"
  }, {
    "left" : "if (ch == '\"' && !b64variant.usesPadding())",
    "right" : "if (ch == '\"' && !b64variant.usesPadding())",
    "info" : "IfStatement[124049-124274]:IfStatement[124195-124420]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[124093-124274]:Block[124239-124420]"
  }, {
    "left" : "decodedData >>= 2;",
    "right" : "decodedData >>= 2;",
    "info" : "ExpressionStatement[124119-124137]:ExpressionStatement[124265-124283]"
  }, {
    "left" : "builder.appendTwoBytes(decodedData);",
    "right" : "builder.appendTwoBytes(decodedData);",
    "info" : "ExpressionStatement[124162-124198]:ExpressionStatement[124308-124344]"
  }, {
    "left" : "return builder.toByteArray();",
    "right" : "return builder.toByteArray();",
    "info" : "ReturnStatement[124223-124252]:ReturnStatement[124369-124398]"
  }, {
    "left" : "bits = _decodeBase64Escape(b64variant, ch, 3);",
    "right" : "bits = _decodeBase64Escape(b64variant, ch, 3);",
    "info" : "ExpressionStatement[124295-124341]:ExpressionStatement[124441-124487]"
  }, {
    "left" : "if (bits == Base64Variant.BASE64_VALUE_PADDING)",
    "right" : "if (bits == Base64Variant.BASE64_VALUE_PADDING)",
    "info" : "IfStatement[124376-124899]:IfStatement[124522-125045]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[124424-124899]:Block[124570-125045]"
  }, {
    "left" : "decodedData >>= 2;",
    "right" : "decodedData >>= 2;",
    "info" : "ExpressionStatement[124776-124794]:ExpressionStatement[124922-124940]"
  }, {
    "left" : "builder.appendTwoBytes(decodedData);",
    "right" : "builder.appendTwoBytes(decodedData);",
    "info" : "ExpressionStatement[124815-124851]:ExpressionStatement[124961-124997]"
  }, {
    "left" : "continue;",
    "right" : "continue;",
    "info" : "ContinueStatement[124872-124881]:ContinueStatement[125018-125027]"
  }, {
    "left" : "decodedData = (decodedData << 6) | bits;",
    "right" : "decodedData = (decodedData << 6) | bits;",
    "info" : "ExpressionStatement[124980-125020]:ExpressionStatement[125126-125166]"
  }, {
    "left" : "builder.appendThreeBytes(decodedData);",
    "right" : "builder.appendThreeBytes(decodedData);",
    "info" : "ExpressionStatement[125033-125071]:ExpressionStatement[125179-125217]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[125354-125363]:MarkerAnnotation[125500-125509]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[125368-125374]:Modifier[125514-125520]"
  }, {
    "left" : "JsonLocation",
    "right" : "JsonLocation",
    "info" : "SimpleType[125375-125387]:SimpleType[125521-125533]"
  }, {
    "left" : "getTokenLocation",
    "right" : "getTokenLocation",
    "info" : "SimpleName[125388-125404]:SimpleName[125534-125550]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[125411-125822]:Block[125557-125968]"
  }, {
    "left" : "final Object src = _ioContext.getSourceReference();",
    "right" : "final Object src = _ioContext.getSourceReference();",
    "info" : "VariableDeclarationStatement[125421-125472]:VariableDeclarationStatement[125567-125618]"
  }, {
    "left" : "if (_currToken == JsonToken.FIELD_NAME)",
    "right" : "if (_currToken == JsonToken.FIELD_NAME)",
    "info" : "IfStatement[125481-125705]:IfStatement[125627-125851]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[125521-125705]:Block[125667-125851]"
  }, {
    "left" : "long total = _currInputProcessed + (_nameStartOffset-1);",
    "right" : "long total = _currInputProcessed + (_nameStartOffset-1);",
    "info" : "VariableDeclarationStatement[125535-125591]:VariableDeclarationStatement[125681-125737]"
  }, {
    "left" : "return new JsonLocation(src,\n                    total, -1L, _nameStartRow, _nameStartCol);",
    "right" : "return new JsonLocation(src,\n                    total, -1L, _nameStartRow, _nameStartCol);",
    "info" : "ReturnStatement[125604-125695]:ReturnStatement[125750-125841]"
  }, {
    "left" : "return new JsonLocation(src,\n                _tokenInputTotal-1, -1L, _tokenInputRow, _tokenInputCol);",
    "right" : "return new JsonLocation(src,\n                _tokenInputTotal-1, -1L, _tokenInputRow, _tokenInputCol);",
    "info" : "ReturnStatement[125714-125816]:ReturnStatement[125860-125962]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[125891-125900]:MarkerAnnotation[126037-126046]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[125905-125911]:Modifier[126051-126057]"
  }, {
    "left" : "JsonLocation",
    "right" : "JsonLocation",
    "info" : "SimpleType[125912-125924]:SimpleType[126058-126070]"
  }, {
    "left" : "getCurrentLocation",
    "right" : "getCurrentLocation",
    "info" : "SimpleName[125925-125943]:SimpleName[126071-126089]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[125950-126194]:Block[126096-126340]"
  }, {
    "left" : "int col = _inputPtr - _currInputRowStart + 1;",
    "right" : "int col = _inputPtr - _currInputRowStart + 1;",
    "info" : "VariableDeclarationStatement[125960-126005]:VariableDeclarationStatement[126106-126151]"
  }, {
    "left" : "return new JsonLocation(_ioContext.getSourceReference(),\n                _currInputProcessed + _inputPtr, -1L, // bytes, chars\n                _currInputRow, col);",
    "right" : "return new JsonLocation(_ioContext.getSourceReference(),\n                _currInputProcessed + _inputPtr, -1L, // bytes, chars\n                _currInputRow, col);",
    "info" : "ReturnStatement[126025-126188]:ReturnStatement[126171-126334]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[126218-126225]:Modifier[126364-126371]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[126226-126231]:Modifier[126372-126377]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[126232-126236]:PrimitiveType[126378-126382]"
  }, {
    "left" : "_updateLocation",
    "right" : "_updateLocation",
    "info" : "SimpleName[126237-126252]:SimpleName[126383-126398]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[126259-126446]:Block[126405-126592]"
  }, {
    "left" : "_tokenInputRow = _currInputRow;",
    "right" : "_tokenInputRow = _currInputRow;",
    "info" : "ExpressionStatement[126269-126300]:ExpressionStatement[126415-126446]"
  }, {
    "left" : "final int ptr = _inputPtr;",
    "right" : "final int ptr = _inputPtr;",
    "info" : "VariableDeclarationStatement[126309-126335]:VariableDeclarationStatement[126455-126481]"
  }, {
    "left" : "_tokenInputTotal = _currInputProcessed + ptr;",
    "right" : "_tokenInputTotal = _currInputProcessed + ptr;",
    "info" : "ExpressionStatement[126344-126389]:ExpressionStatement[126490-126535]"
  }, {
    "left" : "_tokenInputCol = ptr - _currInputRowStart;",
    "right" : "_tokenInputCol = ptr - _currInputRowStart;",
    "info" : "ExpressionStatement[126398-126440]:ExpressionStatement[126544-126586]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[126470-126477]:Modifier[126616-126623]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[126478-126483]:Modifier[126624-126629]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[126484-126488]:PrimitiveType[126630-126634]"
  }, {
    "left" : "_updateNameLocation",
    "right" : "_updateNameLocation",
    "info" : "SimpleName[126489-126508]:SimpleName[126635-126654]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[126515-126678]:Block[126661-126824]"
  }, {
    "left" : "_nameStartRow = _currInputRow;",
    "right" : "_nameStartRow = _currInputRow;",
    "info" : "ExpressionStatement[126525-126555]:ExpressionStatement[126671-126701]"
  }, {
    "left" : "final int ptr = _inputPtr;",
    "right" : "final int ptr = _inputPtr;",
    "info" : "VariableDeclarationStatement[126564-126590]:VariableDeclarationStatement[126710-126736]"
  }, {
    "left" : "_nameStartOffset = ptr;",
    "right" : "_nameStartOffset = ptr;",
    "info" : "ExpressionStatement[126599-126622]:ExpressionStatement[126745-126768]"
  }, {
    "left" : "_nameStartCol = ptr - _currInputRowStart;",
    "right" : "_nameStartCol = ptr - _currInputRowStart;",
    "info" : "ExpressionStatement[126631-126672]:ExpressionStatement[126777-126818]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[126949-126956]:Modifier[127095-127102]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[126957-126962]:Modifier[127103-127108]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[126963-126969]:Modifier[127109-127115]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[126970-126973]:PrimitiveType[127116-127119]"
  }, {
    "left" : "pad",
    "right" : "pad",
    "info" : "SimpleName[126974-126977]:SimpleName[127120-127123]"
  }, {
    "left" : "int q",
    "right" : "int q",
    "info" : "SingleVariableDeclaration[126978-126983]:SingleVariableDeclaration[127124-127129]"
  }, {
    "left" : "int bytes",
    "right" : "int bytes",
    "info" : "SingleVariableDeclaration[126985-126994]:SingleVariableDeclaration[127131-127140]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[126996-127065]:Block[127142-127211]"
  }, {
    "left" : "return (bytes == 4) ? q : (q | (-1 << (bytes << 3)));",
    "right" : "return (bytes == 4) ? q : (q | (-1 << (bytes << 3)));",
    "info" : "ReturnStatement[127006-127059]:ReturnStatement[127152-127205]"
  } ]
}