{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "enum : HtmlTreeBuilderState",
      "right" : "enum : HtmlTreeBuilderState",
      "info" : "EnumDeclaration[119-71182]:EnumDeclaration[119-71182]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[297-1357]:MethodDeclaration[297-1357]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[1390-2252]:MethodDeclaration[1390-2252]"
    }, {
      "left" : "private boolean anythingElse(Token t, HtmlTreeBuilder tb)",
      "right" : "private boolean anythingElse(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[2262-2443]:MethodDeclaration[2262-2443]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[2476-3601]:MethodDeclaration[2476-3601]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[3630-6588]:MethodDeclaration[3630-6588]"
    }, {
      "left" : "private boolean anythingElse(Token t, TreeBuilder tb)",
      "right" : "private boolean anythingElse(Token t, TreeBuilder tb)",
      "info" : "MethodDeclaration[6598-6735]:MethodDeclaration[6598-6735]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[6772-7845]:MethodDeclaration[6772-7845]"
    }, {
      "left" : "private boolean anythingElse(Token t, HtmlTreeBuilder tb)",
      "right" : "private boolean anythingElse(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[7855-8042]:MethodDeclaration[7855-8042]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[8074-9853]:MethodDeclaration[8074-9853]"
    }, {
      "left" : "private boolean anythingElse(Token t, HtmlTreeBuilder tb)",
      "right" : "private boolean anythingElse(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[9863-10039]:MethodDeclaration[9863-10039]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[10068-38308]:MethodDeclaration[10068-38308]"
    }, {
      "left" : "boolean anyOtherEndTag(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean anyOtherEndTag(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[38318-39152]:MethodDeclaration[38318-39152]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[39242-39888]:MethodDeclaration[39242-39888]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[39918-43807]:MethodDeclaration[39918-43807]"
    }, {
      "left" : "boolean anythingElse(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean anythingElse(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[43817-44298]:MethodDeclaration[43817-44298]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[44332-46119]:MethodDeclaration[44332-46119]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[46151-47713]:MethodDeclaration[46151-47713]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[47749-49587]:MethodDeclaration[47749-49587]"
    }, {
      "left" : "private boolean anythingElse(Token t, TreeBuilder tb)",
      "right" : "private boolean anythingElse(Token t, TreeBuilder tb)",
      "info" : "MethodDeclaration[49597-49843]:MethodDeclaration[49597-49843]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[49877-51868]:MethodDeclaration[49877-51868]"
    }, {
      "left" : "private boolean exitTableBody(Token t, HtmlTreeBuilder tb)",
      "right" : "private boolean exitTableBody(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[51878-52317]:MethodDeclaration[51878-52317]"
    }, {
      "left" : "private boolean anythingElse(Token t, HtmlTreeBuilder tb)",
      "right" : "private boolean anythingElse(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[52327-52439]:MethodDeclaration[52327-52439]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[52467-54444]:MethodDeclaration[52467-54444]"
    }, {
      "left" : "private boolean anythingElse(Token t, HtmlTreeBuilder tb)",
      "right" : "private boolean anythingElse(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[54454-54566]:MethodDeclaration[54454-54566]"
    }, {
      "left" : "private boolean handleMissingTr(Token t, TreeBuilder tb)",
      "right" : "private boolean handleMissingTr(Token t, TreeBuilder tb)",
      "info" : "MethodDeclaration[54576-54812]:MethodDeclaration[54576-54812]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[54841-56783]:MethodDeclaration[54841-56783]"
    }, {
      "left" : "private boolean anythingElse(Token t, HtmlTreeBuilder tb)",
      "right" : "private boolean anythingElse(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[56793-56904]:MethodDeclaration[56793-56904]"
    }, {
      "left" : "private void closeCell(HtmlTreeBuilder tb)",
      "right" : "private void closeCell(HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[56914-57138]:MethodDeclaration[56914-57138]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[57169-61185]:MethodDeclaration[57169-61185]"
    }, {
      "left" : "private boolean anythingElse(Token t, HtmlTreeBuilder tb)",
      "right" : "private boolean anythingElse(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[61195-61318]:MethodDeclaration[61195-61318]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[61356-62149]:MethodDeclaration[61356-62149]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[62181-63190]:MethodDeclaration[62181-63190]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[63223-65020]:MethodDeclaration[63223-65020]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[65056-65988]:MethodDeclaration[65056-65988]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[66025-66567]:MethodDeclaration[66025-66567]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[66608-67240]:MethodDeclaration[66608-67240]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[67277-67416]:MethodDeclaration[67277-67416]"
    }, {
      "left" : "private static String nullString = String.valueOf('\\u0000');",
      "right" : "private static String nullString = String.valueOf('\\u0000');",
      "info" : "FieldDeclaration[67429-67489]:FieldDeclaration[67429-67489]"
    }, {
      "left" : "abstract boolean process(Token t, HtmlTreeBuilder tb);",
      "right" : "abstract boolean process(Token t, HtmlTreeBuilder tb);",
      "info" : "MethodDeclaration[67495-67549]:MethodDeclaration[67495-67549]"
    }, {
      "left" : "private static boolean isWhitespace(Token t)",
      "right" : "private static boolean isWhitespace(Token t)",
      "info" : "MethodDeclaration[67555-67762]:MethodDeclaration[67555-67762]"
    }, {
      "left" : "private static boolean isWhitespace(String data)",
      "right" : "private static boolean isWhitespace(String data)",
      "info" : "MethodDeclaration[67768-68091]:MethodDeclaration[67768-68091]"
    }, {
      "left" : "private static void handleRcData(Token.StartTag startTag, HtmlTreeBuilder tb)",
      "right" : "private static void handleRcData(Token.StartTag startTag, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[68097-68328]:MethodDeclaration[68097-68328]"
    }, {
      "left" : "private static void handleRawtext(Token.StartTag startTag, HtmlTreeBuilder tb)",
      "right" : "private static void handleRawtext(Token.StartTag startTag, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[68334-68567]:MethodDeclaration[68334-68567]"
    }, {
      "left" : "Constants",
      "right" : "Constants",
      "info" : "TypeDeclaration[68737-71180]:TypeDeclaration[68737-71180]"
    }, {
      "left" : "private static final String[] InBodyStartToHead = new String[]{\"base\", \"basefont\", \"bgsound\", \"command\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\"};",
      "right" : "private static final String[] InBodyStartToHead = new String[]{\"base\", \"basefont\", \"bgsound\", \"command\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\"};",
      "info" : "FieldDeclaration[68784-68945]:FieldDeclaration[68784-68945]"
    }, {
      "left" : "private static final String[] InBodyStartPClosers = new String[]{\"address\", \"article\", \"aside\", \"blockquote\", \"center\", \"details\", \"dir\", \"div\", \"dl\",\n                \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"menu\", \"nav\", \"ol\",\n                \"p\", \"section\", \"summary\", \"ul\"};",
      "right" : "private static final String[] InBodyStartPClosers = new String[]{\"address\", \"article\", \"aside\", \"blockquote\", \"center\", \"details\", \"dir\", \"div\", \"dl\",\n                \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"menu\", \"nav\", \"ol\",\n                \"p\", \"section\", \"summary\", \"ul\"};",
      "info" : "FieldDeclaration[68954-69257]:FieldDeclaration[68954-69257]"
    }, {
      "left" : "private static final String[] Headings = new String[]{\"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\"};",
      "right" : "private static final String[] Headings = new String[]{\"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\"};",
      "info" : "FieldDeclaration[69266-69356]:FieldDeclaration[69266-69356]"
    }, {
      "left" : "private static final String[] InBodyStartPreListing = new String[]{\"pre\", \"listing\"};",
      "right" : "private static final String[] InBodyStartPreListing = new String[]{\"pre\", \"listing\"};",
      "info" : "FieldDeclaration[69365-69450]:FieldDeclaration[69365-69450]"
    }, {
      "left" : "private static final String[] InBodyStartLiBreakers = new String[]{\"address\", \"div\", \"p\"};",
      "right" : "private static final String[] InBodyStartLiBreakers = new String[]{\"address\", \"div\", \"p\"};",
      "info" : "FieldDeclaration[69459-69549]:FieldDeclaration[69459-69549]"
    }, {
      "left" : "private static final String[] DdDt = new String[]{\"dd\", \"dt\"};",
      "right" : "private static final String[] DdDt = new String[]{\"dd\", \"dt\"};",
      "info" : "FieldDeclaration[69558-69620]:FieldDeclaration[69558-69620]"
    }, {
      "left" : "private static final String[] Formatters = new String[]{\"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"};",
      "right" : "private static final String[] Formatters = new String[]{\"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"};",
      "info" : "FieldDeclaration[69629-69769]:FieldDeclaration[69629-69769]"
    }, {
      "left" : "private static final String[] InBodyStartApplets = new String[]{\"applet\", \"marquee\", \"object\"};",
      "right" : "private static final String[] InBodyStartApplets = new String[]{\"applet\", \"marquee\", \"object\"};",
      "info" : "FieldDeclaration[69778-69873]:FieldDeclaration[69778-69873]"
    }, {
      "left" : "private static final String[] InBodyStartEmptyFormatters = new String[]{\"area\", \"br\", \"embed\", \"img\", \"keygen\", \"wbr\"};",
      "right" : "private static final String[] InBodyStartEmptyFormatters = new String[]{\"area\", \"br\", \"embed\", \"img\", \"keygen\", \"wbr\"};",
      "info" : "FieldDeclaration[69882-70001]:FieldDeclaration[69882-70001]"
    }, {
      "left" : "private static final String[] InBodyStartMedia = new String[]{\"param\", \"source\", \"track\"};",
      "right" : "private static final String[] InBodyStartMedia = new String[]{\"param\", \"source\", \"track\"};",
      "info" : "FieldDeclaration[70010-70100]:FieldDeclaration[70010-70100]"
    }, {
      "left" : "private static final String[] InBodyStartInputAttribs = new String[]{\"name\", \"action\", \"prompt\"};",
      "right" : "private static final String[] InBodyStartInputAttribs = new String[]{\"name\", \"action\", \"prompt\"};",
      "info" : "FieldDeclaration[70109-70206]:FieldDeclaration[70109-70206]"
    }, {
      "left" : "private static final String[] InBodyStartOptions = new String[]{\"optgroup\", \"option\"};",
      "right" : "private static final String[] InBodyStartOptions = new String[]{\"optgroup\", \"option\"};",
      "info" : "FieldDeclaration[70215-70301]:FieldDeclaration[70215-70301]"
    }, {
      "left" : "private static final String[] InBodyStartRuby = new String[]{\"rp\", \"rt\"};",
      "right" : "private static final String[] InBodyStartRuby = new String[]{\"rp\", \"rt\"};",
      "info" : "FieldDeclaration[70310-70383]:FieldDeclaration[70310-70383]"
    }, {
      "left" : "private static final String[] InBodyStartDrop = new String[]{\"caption\", \"col\", \"colgroup\", \"frame\", \"head\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"};",
      "right" : "private static final String[] InBodyStartDrop = new String[]{\"caption\", \"col\", \"colgroup\", \"frame\", \"head\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"};",
      "info" : "FieldDeclaration[70392-70545]:FieldDeclaration[70392-70545]"
    }, {
      "left" : "private static final String[] InBodyEndClosers = new String[]{\"address\", \"article\", \"aside\", \"blockquote\", \"button\", \"center\", \"details\", \"dir\", \"div\",\n                \"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"listing\", \"menu\",\n                \"nav\", \"ol\", \"pre\", \"section\", \"summary\", \"ul\"};",
      "right" : "private static final String[] InBodyEndClosers = new String[]{\"address\", \"article\", \"aside\", \"blockquote\", \"button\", \"center\", \"details\", \"dir\", \"div\",\n                \"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"listing\", \"menu\",\n                \"nav\", \"ol\", \"pre\", \"section\", \"summary\", \"ul\"};",
      "info" : "FieldDeclaration[70554-70877]:FieldDeclaration[70554-70877]"
    }, {
      "left" : "private static final String[] InBodyEndAdoptionFormatters = new String[]{\"a\", \"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"nobr\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"};",
      "right" : "private static final String[] InBodyEndAdoptionFormatters = new String[]{\"a\", \"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"nobr\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"};",
      "info" : "FieldDeclaration[70886-71056]:FieldDeclaration[70886-71056]"
    }, {
      "left" : "private static final String[] InBodyEndTableFosters = new String[]{\"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"};",
      "right" : "private static final String[] InBodyEndTableFosters = new String[]{\"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"};",
      "info" : "FieldDeclaration[71065-71174]:FieldDeclaration[71065-71174]"
    } ],
    "mappings" : [
 {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[297-304]:PrimitiveType[297-304]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[305-312]:SimpleName[305-312]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[313-320]:SingleVariableDeclaration[313-320]"
    }, {
      "left" : "HtmlTreeBuilder tb",
      "right" : "HtmlTreeBuilder tb",
      "info" : "SingleVariableDeclaration[322-340]:SingleVariableDeclaration[322-340]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[342-1357]:Block[342-1357]"
    }, {
      "left" : "if (isWhitespace(t))",
      "right" : "if (isWhitespace(t))",
      "info" : "IfStatement[356-1322]:IfStatement[356-1322]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[377-442]:Block[377-442]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[395-407]:ReturnStatement[395-407]"
    }, {
      "left" : "if (t.isComment())",
      "right" : "if (t.isComment())",
      "info" : "IfStatement[448-1322]:IfStatement[448-1322]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[467-524]:Block[467-524]"
    }, {
      "left" : "tb.insert(t.asComment());",
      "right" : "tb.insert(t.asComment());",
      "info" : "ExpressionStatement[485-510]:ExpressionStatement[485-510]"
    }, {
      "left" : "if (t.isDoctype())",
      "right" : "if (t.isDoctype())",
      "info" : "IfStatement[530-1322]:IfStatement[530-1322]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[549-1151]:Block[549-1151]"
    }, {
      "left" : "Token.Doctype d = t.asDoctype();",
      "right" : "Token.Doctype d = t.asDoctype();",
      "info" : "VariableDeclarationStatement[689-721]:VariableDeclarationStatement[689-721]"
    }, {
      "left" : "DocumentType doctype = new DocumentType(\n                    tb.settings.normalizeTag(d.getName()), d.getPubSysKey(), d.getPublicIdentifier(), d.getSystemIdentifier(), tb.getBaseUri());",
      "right" : "DocumentType doctype = new DocumentType(\n                    tb.settings.normalizeTag(d.getName()), d.getPubSysKey(), d.getPublicIdentifier(), d.getSystemIdentifier(), tb.getBaseUri());",
      "info" : "VariableDeclarationStatement[738-923]:VariableDeclarationStatement[738-923]"
    }, {
      "left" : "tb.getDocument().appendChild(doctype);",
      "right" : "tb.getDocument().appendChild(doctype);",
      "info" : "ExpressionStatement[940-978]:ExpressionStatement[940-978]"
    }, {
      "left" : "if (d.isForceQuirks())",
      "right" : "if (d.isForceQuirks())",
      "info" : "IfStatement[995-1094]:IfStatement[995-1094]"
    }, {
      "left" : "tb.getDocument().quirksMode(Document.QuirksMode.quirks);",
      "right" : "tb.getDocument().quirksMode(Document.QuirksMode.quirks);",
      "info" : "ExpressionStatement[1038-1094]:ExpressionStatement[1038-1094]"
    }, {
      "left" : "tb.transition(BeforeHtml);",
      "right" : "tb.transition(BeforeHtml);",
      "info" : "ExpressionStatement[1111-1137]:ExpressionStatement[1111-1137]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1157-1322]:Block[1157-1322]"
    }, {
      "left" : "tb.transition(BeforeHtml);",
      "right" : "tb.transition(BeforeHtml);",
      "info" : "ExpressionStatement[1224-1250]:ExpressionStatement[1224-1250]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[1267-1288]:ReturnStatement[1267-1288]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[1335-1347]:ReturnStatement[1335-1347]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[1390-1397]:PrimitiveType[1390-1397]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[1398-1405]:SimpleName[1398-1405]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[1406-1413]:SingleVariableDeclaration[1406-1413]"
    }, {
      "left" : "HtmlTreeBuilder tb",
      "right" : "HtmlTreeBuilder tb",
      "info" : "SingleVariableDeclaration[1415-1433]:SingleVariableDeclaration[1415-1433]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1435-2252]:Block[1435-2252]"
    }, {
      "left" : "if (t.isDoctype())",
      "right" : "if (t.isDoctype())",
      "info" : "IfStatement[1449-2217]:IfStatement[1449-2217]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1468-1545]:Block[1468-1545]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[1486-1501]:ExpressionStatement[1486-1501]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[1518-1531]:ReturnStatement[1518-1531]"
    }, {
      "left" : "if (t.isComment())",
      "right" : "if (t.isComment())",
      "info" : "IfStatement[1551-2217]:IfStatement[1551-2217]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1570-1627]:Block[1570-1627]"
    }, {
      "left" : "tb.insert(t.asComment());",
      "right" : "tb.insert(t.asComment());",
      "info" : "ExpressionStatement[1588-1613]:ExpressionStatement[1588-1613]"
    }, {
      "left" : "if (isWhitespace(t))",
      "right" : "if (isWhitespace(t))",
      "info" : "IfStatement[1633-2217]:IfStatement[1633-2217]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1654-1719]:Block[1654-1719]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[1672-1684]:ReturnStatement[1672-1684]"
    }, {
      "left" : "if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))",
      "right" : "if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))",
      "info" : "IfStatement[1725-2217]:IfStatement[1725-2217]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1791-1892]:Block[1791-1892]"
    }, {
      "left" : "tb.insert(t.asStartTag());",
      "right" : "tb.insert(t.asStartTag());",
      "info" : "ExpressionStatement[1809-1835]:ExpressionStatement[1809-1835]"
    }, {
      "left" : "tb.transition(BeforeHead);",
      "right" : "tb.transition(BeforeHead);",
      "info" : "ExpressionStatement[1852-1878]:ExpressionStatement[1852-1878]"
    }, {
      "left" : "if (t.isEndTag() && (StringUtil.in(t.asEndTag().normalName(), \"head\", \"body\", \"html\", \"br\")))",
      "right" : "if (t.isEndTag() && (StringUtil.in(t.asEndTag().normalName(), \"head\", \"body\", \"html\", \"br\")))",
      "info" : "IfStatement[1898-2217]:IfStatement[1898-2217]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1992-2051]:Block[1992-2051]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[2010-2037]:ReturnStatement[2010-2037]"
    }, {
      "left" : "if (t.isEndTag())",
      "right" : "if (t.isEndTag())",
      "info" : "IfStatement[2057-2217]:IfStatement[2057-2217]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2075-2152]:Block[2075-2152]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[2093-2108]:ExpressionStatement[2093-2108]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[2125-2138]:ReturnStatement[2125-2138]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2158-2217]:Block[2158-2217]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[2176-2203]:ReturnStatement[2176-2203]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[2230-2242]:ReturnStatement[2230-2242]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[2262-2269]:Modifier[2262-2269]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[2270-2277]:PrimitiveType[2270-2277]"
    }, {
      "left" : "anythingElse",
      "right" : "anythingElse",
      "info" : "SimpleName[2278-2290]:SimpleName[2278-2290]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[2291-2298]:SingleVariableDeclaration[2291-2298]"
    }, {
      "left" : "HtmlTreeBuilder tb",
      "right" : "HtmlTreeBuilder tb",
      "info" : "SingleVariableDeclaration[2300-2318]:SingleVariableDeclaration[2300-2318]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2320-2443]:Block[2320-2443]"
    }, {
      "left" : "tb.insertStartTag(\"html\");",
      "right" : "tb.insertStartTag(\"html\");",
      "info" : "ExpressionStatement[2334-2360]:ExpressionStatement[2334-2360]"
    }, {
      "left" : "tb.transition(BeforeHead);",
      "right" : "tb.transition(BeforeHead);",
      "info" : "ExpressionStatement[2373-2399]:ExpressionStatement[2373-2399]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[2412-2433]:ReturnStatement[2412-2433]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[2476-2483]:PrimitiveType[2476-2483]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[2484-2491]:SimpleName[2484-2491]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[2492-2499]:SingleVariableDeclaration[2492-2499]"
    }, {
      "left" : "HtmlTreeBuilder tb",
      "right" : "HtmlTreeBuilder tb",
      "info" : "SingleVariableDeclaration[2501-2519]:SingleVariableDeclaration[2501-2519]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2521-3601]:Block[2521-3601]"
    }, {
      "left" : "if (isWhitespace(t))",
      "right" : "if (isWhitespace(t))",
      "info" : "IfStatement[2535-3566]:IfStatement[2535-3566]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2556-2600]:Block[2556-2600]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[2574-2586]:ReturnStatement[2574-2586]"
    }, {
      "left" : "if (t.isComment())",
      "right" : "if (t.isComment())",
      "info" : "IfStatement[2606-3566]:IfStatement[2606-3566]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2625-2682]:Block[2625-2682]"
    }, {
      "left" : "tb.insert(t.asComment());",
      "right" : "tb.insert(t.asComment());",
      "info" : "ExpressionStatement[2643-2668]:ExpressionStatement[2643-2668]"
    }, {
      "left" : "if (t.isDoctype())",
      "right" : "if (t.isDoctype())",
      "info" : "IfStatement[2688-3566]:IfStatement[2688-3566]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2707-2784]:Block[2707-2784]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[2725-2740]:ExpressionStatement[2725-2740]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[2757-2770]:ReturnStatement[2757-2770]"
    }, {
      "left" : "if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))",
      "right" : "if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))",
      "info" : "IfStatement[2790-3566]:IfStatement[2790-3566]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2856-2940]:Block[2856-2940]"
    }, {
      "left" : "return InBody.process(t, tb);",
      "right" : "return InBody.process(t, tb);",
      "info" : "ReturnStatement[2874-2903]:ReturnStatement[2874-2903]"
    }, {
      "left" : "if (t.isStartTag() && t.asStartTag().normalName().equals(\"head\"))",
      "right" : "if (t.isStartTag() && t.asStartTag().normalName().equals(\"head\"))",
      "info" : "IfStatement[2946-3566]:IfStatement[2946-3566]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3012-3165]:Block[3012-3165]"
    }, {
      "left" : "Element head = tb.insert(t.asStartTag());",
      "right" : "Element head = tb.insert(t.asStartTag());",
      "info" : "VariableDeclarationStatement[3030-3071]:VariableDeclarationStatement[3030-3071]"
    }, {
      "left" : "tb.setHeadElement(head);",
      "right" : "tb.setHeadElement(head);",
      "info" : "ExpressionStatement[3088-3112]:ExpressionStatement[3088-3112]"
    }, {
      "left" : "tb.transition(InHead);",
      "right" : "tb.transition(InHead);",
      "info" : "ExpressionStatement[3129-3151]:ExpressionStatement[3129-3151]"
    }, {
      "left" : "if (t.isEndTag() && (StringUtil.in(t.asEndTag().normalName(), \"head\", \"body\", \"html\", \"br\")))",
      "right" : "if (t.isEndTag() && (StringUtil.in(t.asEndTag().normalName(), \"head\", \"body\", \"html\", \"br\")))",
      "info" : "IfStatement[3171-3566]:IfStatement[3171-3566]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3265-3362]:Block[3265-3362]"
    }, {
      "left" : "tb.processStartTag(\"head\");",
      "right" : "tb.processStartTag(\"head\");",
      "info" : "ExpressionStatement[3283-3310]:ExpressionStatement[3283-3310]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[3327-3348]:ReturnStatement[3327-3348]"
    }, {
      "left" : "if (t.isEndTag())",
      "right" : "if (t.isEndTag())",
      "info" : "IfStatement[3368-3566]:IfStatement[3368-3566]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3386-3463]:Block[3386-3463]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[3404-3419]:ExpressionStatement[3404-3419]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[3436-3449]:ReturnStatement[3436-3449]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3469-3566]:Block[3469-3566]"
    }, {
      "left" : "tb.processStartTag(\"head\");",
      "right" : "tb.processStartTag(\"head\");",
      "info" : "ExpressionStatement[3487-3514]:ExpressionStatement[3487-3514]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[3531-3552]:ReturnStatement[3531-3552]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[3579-3591]:ReturnStatement[3579-3591]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[3630-3637]:PrimitiveType[3630-3637]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[3638-3645]:SimpleName[3638-3645]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[3646-3653]:SingleVariableDeclaration[3646-3653]"
    }, {
      "left" : "HtmlTreeBuilder tb",
      "right" : "HtmlTreeBuilder tb",
      "info" : "SingleVariableDeclaration[3655-3673]:SingleVariableDeclaration[3655-3673]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3675-6588]:Block[3675-6588]"
    }, {
      "left" : "if (isWhitespace(t))",
      "right" : "if (isWhitespace(t))",
      "info" : "IfStatement[3689-3798]:IfStatement[3689-3798]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3710-3798]:Block[3710-3798]"
    }, {
      "left" : "tb.insert(t.asCharacter());",
      "right" : "tb.insert(t.asCharacter());",
      "info" : "ExpressionStatement[3728-3755]:ExpressionStatement[3728-3755]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[3772-3784]:ReturnStatement[3772-3784]"
    }, {
      "left" : "switch (t.type) {\n                case Comment:\n                    tb.insert(t.asComment());\n                    break;\n                case Doctype:\n                    tb.error(this);\n                    return false;\n                case StartTag:\n                    Token.StartTag start = t.asStartTag();\n                    String name = start.normalName();\n                    if (name.equals(\"html\")) {\n                        return InBody.process(t, tb);\n                    } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\")) {\n                        Element el = tb.insertEmpty(start);\n                        // jsoup special: update base the frist time it is seen\n                        if (name.equals(\"base\") && el.hasAttr(\"href\"))\n                            tb.maybeSetBaseUri(el);\n                    } else if (name.equals(\"meta\")) {\n                        Element meta = tb.insertEmpty(start);\n                        // todo: charset switches\n                    } else if (name.equals(\"title\")) {\n                        handleRcData(start, tb);\n                    } else if (StringUtil.in(name, \"noframes\", \"style\")) {\n                        handleRawtext(start, tb);\n                    } else if (name.equals(\"noscript\")) {\n                        // else if noscript && scripting flag = true: rawtext (jsoup doesn't run script, to handle as noscript)\n                        tb.insert(start);\n                        tb.transition(InHeadNoscript);\n                    } else if (name.equals(\"script\")) {\n                        // skips some script rules as won't execute them\n\n                        tb.tokeniser.transition(TokeniserState.ScriptData);\n                        tb.markInsertionMode();\n                        tb.transition(Text);\n                        tb.insert(start);\n                    } else if (name.equals(\"head\")) {\n                        tb.error(this);\n                        return false;\n                    } else {\n                        return anythingElse(t, tb);\n                    }\n                    break;\n                case EndTag:\n                    Token.EndTag end = t.asEndTag();\n                    name = end.normalName();\n                    if (name.equals(\"head\")) {\n                        tb.pop();\n                        tb.transition(AfterHead);\n                    } else if (StringUtil.in(name, \"body\", \"html\", \"br\")) {\n                        return anythingElse(t, tb);\n                    } else {\n                        tb.error(this);\n                        return false;\n                    }\n                    break;\n                default:\n                    return anythingElse(t, tb);\n            }",
      "right" : "switch (t.type) {\n                case Comment:\n                    tb.insert(t.asComment());\n                    break;\n                case Doctype:\n                    tb.error(this);\n                    return false;\n                case StartTag:\n                    Token.StartTag start = t.asStartTag();\n                    String name = start.normalName();\n                    if (name.equals(\"html\")) {\n                        return InBody.process(t, tb);\n                    } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\")) {\n                        Element el = tb.insertEmpty(start);\n                        // jsoup special: update base the frist time it is seen\n                        if (name.equals(\"base\") && el.hasAttr(\"href\"))\n                            tb.maybeSetBaseUri(el);\n                    } else if (name.equals(\"meta\")) {\n                        Element meta = tb.insertEmpty(start);\n                        // todo: charset switches\n                    } else if (name.equals(\"title\")) {\n                        handleRcData(start, tb);\n                    } else if (StringUtil.in(name, \"noframes\", \"style\")) {\n                        handleRawtext(start, tb);\n                    } else if (name.equals(\"noscript\")) {\n                        // else if noscript && scripting flag = true: rawtext (jsoup doesn't run script, to handle as noscript)\n                        tb.insert(start);\n                        tb.transition(InHeadNoscript);\n                    } else if (name.equals(\"script\")) {\n                        // skips some script rules as won't execute them\n\n                        tb.tokeniser.transition(TokeniserState.ScriptData);\n                        tb.markInsertionMode();\n                        tb.transition(Text);\n                        tb.insert(start);\n                    } else if (name.equals(\"head\")) {\n                        tb.error(this);\n                        return false;\n                    } else {\n                        return anythingElse(t, tb);\n                    }\n                    break;\n                case EndTag:\n                    Token.EndTag end = t.asEndTag();\n                    name = end.normalName();\n                    if (name.equals(\"head\")) {\n                        tb.pop();\n                        tb.transition(AfterHead);\n                    } else if (StringUtil.in(name, \"body\", \"html\", \"br\")) {\n                        return anythingElse(t, tb);\n                    } else {\n                        tb.error(this);\n                        return false;\n                    }\n                    break;\n                default:\n                    return anythingElse(t, tb);\n            }",
      "info" : "SwitchStatement[3811-6553]:SwitchStatement[3811-6553]"
    }, {
      "left" : "case Comment:",
      "right" : "case Comment:",
      "info" : "SwitchCase[3845-3858]:SwitchCase[3845-3858]"
    }, {
      "left" : "tb.insert(t.asComment());",
      "right" : "tb.insert(t.asComment());",
      "info" : "ExpressionStatement[3879-3904]:ExpressionStatement[3879-3904]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[3925-3931]:BreakStatement[3925-3931]"
    }, {
      "left" : "case Doctype:",
      "right" : "case Doctype:",
      "info" : "SwitchCase[3948-3961]:SwitchCase[3948-3961]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[3982-3997]:ExpressionStatement[3982-3997]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[4018-4031]:ReturnStatement[4018-4031]"
    }, {
      "left" : "case StartTag:",
      "right" : "case StartTag:",
      "info" : "SwitchCase[4048-4062]:SwitchCase[4048-4062]"
    }, {
      "left" : "Token.StartTag start = t.asStartTag();",
      "right" : "Token.StartTag start = t.asStartTag();",
      "info" : "VariableDeclarationStatement[4083-4121]:VariableDeclarationStatement[4083-4121]"
    }, {
      "left" : "String name = start.normalName();",
      "right" : "String name = start.normalName();",
      "info" : "VariableDeclarationStatement[4142-4175]:VariableDeclarationStatement[4142-4175]"
    }, {
      "left" : "if (name.equals(\"html\"))",
      "right" : "if (name.equals(\"html\"))",
      "info" : "IfStatement[4196-5897]:IfStatement[4196-5897]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4221-4298]:Block[4221-4298]"
    }, {
      "left" : "return InBody.process(t, tb);",
      "right" : "return InBody.process(t, tb);",
      "info" : "ReturnStatement[4247-4276]:ReturnStatement[4247-4276]"
    }, {
      "left" : "if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\"))",
      "right" : "if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\"))",
      "info" : "IfStatement[4304-5897]:IfStatement[4304-5897]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4379-4665]:Block[4379-4665]"
    }, {
      "left" : "Element el = tb.insertEmpty(start);",
      "right" : "Element el = tb.insertEmpty(start);",
      "info" : "VariableDeclarationStatement[4405-4440]:VariableDeclarationStatement[4405-4440]"
    }, {
      "left" : "if (name.equals(\"base\") && el.hasAttr(\"href\"))",
      "right" : "if (name.equals(\"base\") && el.hasAttr(\"href\"))",
      "info" : "IfStatement[4545-4643]:IfStatement[4545-4643]"
    }, {
      "left" : "tb.maybeSetBaseUri(el);",
      "right" : "tb.maybeSetBaseUri(el);",
      "info" : "ExpressionStatement[4620-4643]:ExpressionStatement[4620-4643]"
    }, {
      "left" : "if (name.equals(\"meta\"))",
      "right" : "if (name.equals(\"meta\"))",
      "info" : "IfStatement[4671-5897]:IfStatement[4671-5897]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4696-4831]:Block[4696-4831]"
    }, {
      "left" : "Element meta = tb.insertEmpty(start);",
      "right" : "Element meta = tb.insertEmpty(start);",
      "info" : "VariableDeclarationStatement[4722-4759]:VariableDeclarationStatement[4722-4759]"
    }, {
      "left" : "if (name.equals(\"title\"))",
      "right" : "if (name.equals(\"title\"))",
      "info" : "IfStatement[4837-5897]:IfStatement[4837-5897]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4863-4935]:Block[4863-4935]"
    }, {
      "left" : "handleRcData(start, tb);",
      "right" : "handleRcData(start, tb);",
      "info" : "ExpressionStatement[4889-4913]:ExpressionStatement[4889-4913]"
    }, {
      "left" : "if (StringUtil.in(name, \"noframes\", \"style\"))",
      "right" : "if (StringUtil.in(name, \"noframes\", \"style\"))",
      "info" : "IfStatement[4941-5897]:IfStatement[4941-5897]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4987-5060]:Block[4987-5060]"
    }, {
      "left" : "handleRawtext(start, tb);",
      "right" : "handleRawtext(start, tb);",
      "info" : "ExpressionStatement[5013-5038]:ExpressionStatement[5013-5038]"
    }, {
      "left" : "if (name.equals(\"noscript\"))",
      "right" : "if (name.equals(\"noscript\"))",
      "info" : "IfStatement[5066-5897]:IfStatement[5066-5897]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5095-5343]:Block[5095-5343]"
    }, {
      "left" : "tb.insert(start);",
      "right" : "tb.insert(start);",
      "info" : "ExpressionStatement[5249-5266]:ExpressionStatement[5249-5266]"
    }, {
      "left" : "tb.transition(InHeadNoscript);",
      "right" : "tb.transition(InHeadNoscript);",
      "info" : "ExpressionStatement[5291-5321]:ExpressionStatement[5291-5321]"
    }, {
      "left" : "if (name.equals(\"script\"))",
      "right" : "if (name.equals(\"script\"))",
      "info" : "IfStatement[5349-5897]:IfStatement[5349-5897]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5376-5684]:Block[5376-5684]"
    }, {
      "left" : "tb.tokeniser.transition(TokeniserState.ScriptData);",
      "right" : "tb.tokeniser.transition(TokeniserState.ScriptData);",
      "info" : "ExpressionStatement[5476-5527]:ExpressionStatement[5476-5527]"
    }, {
      "left" : "tb.markInsertionMode();",
      "right" : "tb.markInsertionMode();",
      "info" : "ExpressionStatement[5552-5575]:ExpressionStatement[5552-5575]"
    }, {
      "left" : "tb.transition(Text);",
      "right" : "tb.transition(Text);",
      "info" : "ExpressionStatement[5600-5620]:ExpressionStatement[5600-5620]"
    }, {
      "left" : "tb.insert(start);",
      "right" : "tb.insert(start);",
      "info" : "ExpressionStatement[5645-5662]:ExpressionStatement[5645-5662]"
    }, {
      "left" : "if (name.equals(\"head\"))",
      "right" : "if (name.equals(\"head\"))",
      "info" : "IfStatement[5690-5897]:IfStatement[5690-5897]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5715-5816]:Block[5715-5816]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[5741-5756]:ExpressionStatement[5741-5756]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[5781-5794]:ReturnStatement[5781-5794]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5822-5897]:Block[5822-5897]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[5848-5875]:ReturnStatement[5848-5875]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[5918-5924]:BreakStatement[5918-5924]"
    }, {
      "left" : "case EndTag:",
      "right" : "case EndTag:",
      "info" : "SwitchCase[5941-5953]:SwitchCase[5941-5953]"
    }, {
      "left" : "Token.EndTag end = t.asEndTag();",
      "right" : "Token.EndTag end = t.asEndTag();",
      "info" : "VariableDeclarationStatement[5974-6006]:VariableDeclarationStatement[5974-6006]"
    }, {
      "left" : "name = end.normalName();",
      "right" : "name = end.normalName();",
      "info" : "ExpressionStatement[6027-6051]:ExpressionStatement[6027-6051]"
    }, {
      "left" : "if (name.equals(\"head\"))",
      "right" : "if (name.equals(\"head\"))",
      "info" : "IfStatement[6072-6439]:IfStatement[6072-6439]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6097-6204]:Block[6097-6204]"
    }, {
      "left" : "tb.pop();",
      "right" : "tb.pop();",
      "info" : "ExpressionStatement[6123-6132]:ExpressionStatement[6123-6132]"
    }, {
      "left" : "tb.transition(AfterHead);",
      "right" : "tb.transition(AfterHead);",
      "info" : "ExpressionStatement[6157-6182]:ExpressionStatement[6157-6182]"
    }, {
      "left" : "if (StringUtil.in(name, \"body\", \"html\", \"br\"))",
      "right" : "if (StringUtil.in(name, \"body\", \"html\", \"br\"))",
      "info" : "IfStatement[6210-6439]:IfStatement[6210-6439]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6257-6332]:Block[6257-6332]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[6283-6310]:ReturnStatement[6283-6310]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6338-6439]:Block[6338-6439]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[6364-6379]:ExpressionStatement[6364-6379]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[6404-6417]:ReturnStatement[6404-6417]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[6460-6466]:BreakStatement[6460-6466]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[6483-6491]:SwitchCase[6483-6491]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[6512-6539]:ReturnStatement[6512-6539]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[6566-6578]:ReturnStatement[6566-6578]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[6598-6605]:Modifier[6598-6605]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[6606-6613]:PrimitiveType[6606-6613]"
    }, {
      "left" : "anythingElse",
      "right" : "anythingElse",
      "info" : "SimpleName[6614-6626]:SimpleName[6614-6626]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[6627-6634]:SingleVariableDeclaration[6627-6634]"
    }, {
      "left" : "TreeBuilder tb",
      "right" : "TreeBuilder tb",
      "info" : "SingleVariableDeclaration[6636-6650]:SingleVariableDeclaration[6636-6650]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6652-6735]:Block[6652-6735]"
    }, {
      "left" : "tb.processEndTag(\"head\");",
      "right" : "tb.processEndTag(\"head\");",
      "info" : "ExpressionStatement[6666-6691]:ExpressionStatement[6666-6691]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[6704-6725]:ReturnStatement[6704-6725]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[6772-6779]:PrimitiveType[6772-6779]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[6780-6787]:SimpleName[6780-6787]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[6788-6795]:SingleVariableDeclaration[6788-6795]"
    }, {
      "left" : "HtmlTreeBuilder tb",
      "right" : "HtmlTreeBuilder tb",
      "info" : "SingleVariableDeclaration[6797-6815]:SingleVariableDeclaration[6797-6815]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6817-7845]:Block[6817-7845]"
    }, {
      "left" : "if (t.isDoctype())",
      "right" : "if (t.isDoctype())",
      "info" : "IfStatement[6831-7810]:IfStatement[6831-7810]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6850-6897]:Block[6850-6897]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[6868-6883]:ExpressionStatement[6868-6883]"
    }, {
      "left" : "if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))",
      "right" : "if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))",
      "info" : "IfStatement[6903-7810]:IfStatement[6903-7810]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6969-7030]:Block[6969-7030]"
    }, {
      "left" : "return tb.process(t, InBody);",
      "right" : "return tb.process(t, InBody);",
      "info" : "ReturnStatement[6987-7016]:ReturnStatement[6987-7016]"
    }, {
      "left" : "if (t.isEndTag() && t.asEndTag().normalName().equals(\"noscript\"))",
      "right" : "if (t.isEndTag() && t.asEndTag().normalName().equals(\"noscript\"))",
      "info" : "IfStatement[7036-7810]:IfStatement[7036-7810]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7102-7182]:Block[7102-7182]"
    }, {
      "left" : "tb.pop();",
      "right" : "tb.pop();",
      "info" : "ExpressionStatement[7120-7129]:ExpressionStatement[7120-7129]"
    }, {
      "left" : "tb.transition(InHead);",
      "right" : "tb.transition(InHead);",
      "info" : "ExpressionStatement[7146-7168]:ExpressionStatement[7146-7168]"
    }, {
      "left" : "if (isWhitespace(t) || t.isComment() || (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(),\n                    \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"style\")))",
      "right" : "if (isWhitespace(t) || t.isComment() || (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(),\n                    \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"style\")))",
      "info" : "IfStatement[7188-7810]:IfStatement[7188-7810]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7372-7433]:Block[7372-7433]"
    }, {
      "left" : "return tb.process(t, InHead);",
      "right" : "return tb.process(t, InHead);",
      "info" : "ReturnStatement[7390-7419]:ReturnStatement[7390-7419]"
    }, {
      "left" : "if (t.isEndTag() && t.asEndTag().normalName().equals(\"br\"))",
      "right" : "if (t.isEndTag() && t.asEndTag().normalName().equals(\"br\"))",
      "info" : "IfStatement[7439-7810]:IfStatement[7439-7810]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7499-7558]:Block[7499-7558]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[7517-7544]:ReturnStatement[7517-7544]"
    }, {
      "left" : "if ((t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"head\", \"noscript\")) || t.isEndTag())",
      "right" : "if ((t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"head\", \"noscript\")) || t.isEndTag())",
      "info" : "IfStatement[7564-7810]:IfStatement[7564-7810]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7668-7745]:Block[7668-7745]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[7686-7701]:ExpressionStatement[7686-7701]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[7718-7731]:ReturnStatement[7718-7731]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7751-7810]:Block[7751-7810]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[7769-7796]:ReturnStatement[7769-7796]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[7823-7835]:ReturnStatement[7823-7835]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[7855-7862]:Modifier[7855-7862]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[7863-7870]:PrimitiveType[7863-7870]"
    }, {
      "left" : "anythingElse",
      "right" : "anythingElse",
      "info" : "SimpleName[7871-7883]:SimpleName[7871-7883]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[7884-7891]:SingleVariableDeclaration[7884-7891]"
    }, {
      "left" : "HtmlTreeBuilder tb",
      "right" : "HtmlTreeBuilder tb",
      "info" : "SingleVariableDeclaration[7893-7911]:SingleVariableDeclaration[7893-7911]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7913-8042]:Block[7913-8042]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[7927-7942]:ExpressionStatement[7927-7942]"
    }, {
      "left" : "tb.insert(new Token.Character().data(t.toString()));",
      "right" : "tb.insert(new Token.Character().data(t.toString()));",
      "info" : "ExpressionStatement[7955-8007]:ExpressionStatement[7955-8007]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[8020-8032]:ReturnStatement[8020-8032]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[8074-8081]:PrimitiveType[8074-8081]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[8082-8089]:SimpleName[8082-8089]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[8090-8097]:SingleVariableDeclaration[8090-8097]"
    }, {
      "left" : "HtmlTreeBuilder tb",
      "right" : "HtmlTreeBuilder tb",
      "info" : "SingleVariableDeclaration[8099-8117]:SingleVariableDeclaration[8099-8117]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8119-9853]:Block[8119-9853]"
    }, {
      "left" : "if (isWhitespace(t))",
      "right" : "if (isWhitespace(t))",
      "info" : "IfStatement[8133-9818]:IfStatement[8133-9818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8154-8213]:Block[8154-8213]"
    }, {
      "left" : "tb.insert(t.asCharacter());",
      "right" : "tb.insert(t.asCharacter());",
      "info" : "ExpressionStatement[8172-8199]:ExpressionStatement[8172-8199]"
    }, {
      "left" : "if (t.isComment())",
      "right" : "if (t.isComment())",
      "info" : "IfStatement[8219-9818]:IfStatement[8219-9818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8238-8295]:Block[8238-8295]"
    }, {
      "left" : "tb.insert(t.asComment());",
      "right" : "tb.insert(t.asComment());",
      "info" : "ExpressionStatement[8256-8281]:ExpressionStatement[8256-8281]"
    }, {
      "left" : "if (t.isDoctype())",
      "right" : "if (t.isDoctype())",
      "info" : "IfStatement[8301-9818]:IfStatement[8301-9818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8320-8367]:Block[8320-8367]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[8338-8353]:ExpressionStatement[8338-8353]"
    }, {
      "left" : "if (t.isStartTag())",
      "right" : "if (t.isStartTag())",
      "info" : "IfStatement[8373-9818]:IfStatement[8373-9818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8393-9487]:Block[8393-9487]"
    }, {
      "left" : "Token.StartTag startTag = t.asStartTag();",
      "right" : "Token.StartTag startTag = t.asStartTag();",
      "info" : "VariableDeclarationStatement[8411-8452]:VariableDeclarationStatement[8411-8452]"
    }, {
      "left" : "String name = startTag.normalName();",
      "right" : "String name = startTag.normalName();",
      "info" : "VariableDeclarationStatement[8469-8505]:VariableDeclarationStatement[8469-8505]"
    }, {
      "left" : "if (name.equals(\"html\"))",
      "right" : "if (name.equals(\"html\"))",
      "info" : "IfStatement[8522-9473]:IfStatement[8522-9473]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8547-8616]:Block[8547-8616]"
    }, {
      "left" : "return tb.process(t, InBody);",
      "right" : "return tb.process(t, InBody);",
      "info" : "ReturnStatement[8569-8598]:ReturnStatement[8569-8598]"
    }, {
      "left" : "if (name.equals(\"body\"))",
      "right" : "if (name.equals(\"body\"))",
      "info" : "IfStatement[8622-9473]:IfStatement[8622-9473]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8647-8792]:Block[8647-8792]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[8669-8689]:ExpressionStatement[8669-8689]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[8710-8731]:ExpressionStatement[8710-8731]"
    }, {
      "left" : "tb.transition(InBody);",
      "right" : "tb.transition(InBody);",
      "info" : "ExpressionStatement[8752-8774]:ExpressionStatement[8752-8774]"
    }, {
      "left" : "if (name.equals(\"frameset\"))",
      "right" : "if (name.equals(\"frameset\"))",
      "info" : "IfStatement[8798-9473]:IfStatement[8798-9473]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8827-8934]:Block[8827-8934]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[8849-8869]:ExpressionStatement[8849-8869]"
    }, {
      "left" : "tb.transition(InFrameset);",
      "right" : "tb.transition(InFrameset);",
      "info" : "ExpressionStatement[8890-8916]:ExpressionStatement[8890-8916]"
    }, {
      "left" : "if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\"))",
      "right" : "if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\"))",
      "info" : "IfStatement[8940-9473]:IfStatement[8940-9473]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9052-9287]:Block[9052-9287]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[9074-9089]:ExpressionStatement[9074-9089]"
    }, {
      "left" : "Element head = tb.getHeadElement();",
      "right" : "Element head = tb.getHeadElement();",
      "info" : "VariableDeclarationStatement[9110-9145]:VariableDeclarationStatement[9110-9145]"
    }, {
      "left" : "tb.push(head);",
      "right" : "tb.push(head);",
      "info" : "ExpressionStatement[9166-9180]:ExpressionStatement[9166-9180]"
    }, {
      "left" : "tb.process(t, InHead);",
      "right" : "tb.process(t, InHead);",
      "info" : "ExpressionStatement[9201-9223]:ExpressionStatement[9201-9223]"
    }, {
      "left" : "tb.removeFromStack(head);",
      "right" : "tb.removeFromStack(head);",
      "info" : "ExpressionStatement[9244-9269]:ExpressionStatement[9244-9269]"
    }, {
      "left" : "if (name.equals(\"head\"))",
      "right" : "if (name.equals(\"head\"))",
      "info" : "IfStatement[9293-9473]:IfStatement[9293-9473]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9318-9407]:Block[9318-9407]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[9340-9355]:ExpressionStatement[9340-9355]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[9376-9389]:ReturnStatement[9376-9389]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9413-9473]:Block[9413-9473]"
    }, {
      "left" : "anythingElse(t, tb);",
      "right" : "anythingElse(t, tb);",
      "info" : "ExpressionStatement[9435-9455]:ExpressionStatement[9435-9455]"
    }, {
      "left" : "if (t.isEndTag())",
      "right" : "if (t.isEndTag())",
      "info" : "IfStatement[9493-9818]:IfStatement[9493-9818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9511-9760]:Block[9511-9760]"
    }, {
      "left" : "if (StringUtil.in(t.asEndTag().normalName(), \"body\", \"html\"))",
      "right" : "if (StringUtil.in(t.asEndTag().normalName(), \"body\", \"html\"))",
      "info" : "IfStatement[9529-9746]:IfStatement[9529-9746]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9591-9651]:Block[9591-9651]"
    }, {
      "left" : "anythingElse(t, tb);",
      "right" : "anythingElse(t, tb);",
      "info" : "ExpressionStatement[9613-9633]:ExpressionStatement[9613-9633]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9657-9746]:Block[9657-9746]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[9679-9694]:ExpressionStatement[9679-9694]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[9715-9728]:ReturnStatement[9715-9728]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9766-9818]:Block[9766-9818]"
    }, {
      "left" : "anythingElse(t, tb);",
      "right" : "anythingElse(t, tb);",
      "info" : "ExpressionStatement[9784-9804]:ExpressionStatement[9784-9804]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[9831-9843]:ReturnStatement[9831-9843]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[9863-9870]:Modifier[9863-9870]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[9871-9878]:PrimitiveType[9871-9878]"
    }, {
      "left" : "anythingElse",
      "right" : "anythingElse",
      "info" : "SimpleName[9879-9891]:SimpleName[9879-9891]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[9892-9899]:SingleVariableDeclaration[9892-9899]"
    }, {
      "left" : "HtmlTreeBuilder tb",
      "right" : "HtmlTreeBuilder tb",
      "info" : "SingleVariableDeclaration[9901-9919]:SingleVariableDeclaration[9901-9919]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9921-10039]:Block[9921-10039]"
    }, {
      "left" : "tb.processStartTag(\"body\");",
      "right" : "tb.processStartTag(\"body\");",
      "info" : "ExpressionStatement[9935-9962]:ExpressionStatement[9935-9962]"
    }, {
      "left" : "tb.framesetOk(true);",
      "right" : "tb.framesetOk(true);",
      "info" : "ExpressionStatement[9975-9995]:ExpressionStatement[9975-9995]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[10008-10029]:ReturnStatement[10008-10029]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[10068-10075]:PrimitiveType[10068-10075]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[10076-10083]:SimpleName[10076-10083]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[10084-10091]:SingleVariableDeclaration[10084-10091]"
    }, {
      "left" : "HtmlTreeBuilder tb",
      "right" : "HtmlTreeBuilder tb",
      "info" : "SingleVariableDeclaration[10093-10111]:SingleVariableDeclaration[10093-10111]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10113-38308]:Block[10113-38308]"
    }, {
      "left" : "switch (t.type) {\n                case Character: {\n                    Token.Character c = t.asCharacter();\n                    if (c.getData().equals(nullString)) {\n                        // todo confirm that check\n                        tb.error(this);\n                        return false;\n                    } else if (tb.framesetOk() && isWhitespace(c)) { // don't check if whitespace if frames already closed\n                        tb.reconstructFormattingElements();\n                        tb.insert(c);\n                    } else {\n                        tb.reconstructFormattingElements();\n                        tb.insert(c);\n                        tb.framesetOk(false);\n                    }\n                    break;\n                }\n                case Comment: {\n                    tb.insert(t.asComment());\n                    break;\n                }\n                case Doctype: {\n                    tb.error(this);\n                    return false;\n                }\n                case StartTag:\n                    Token.StartTag startTag = t.asStartTag();\n                    // todo - refactor to a switch statement\n                    String name = startTag.normalName();\n                    if (name.equals(\"a\")) {\n                        if (tb.getActiveFormattingElement(\"a\") != null) {\n                            tb.error(this);\n                            tb.processEndTag(\"a\");\n\n                            // still on stack?\n                            Element remainingA = tb.getFromStack(\"a\");\n                            if (remainingA != null) {\n                                tb.removeFromActiveFormattingElements(remainingA);\n                                tb.removeFromStack(remainingA);\n                            }\n                        }\n                        tb.reconstructFormattingElements();\n                        Element a = tb.insert(startTag);\n                        tb.pushActiveFormattingElements(a);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartEmptyFormatters)) {\n                        tb.reconstructFormattingElements();\n                        tb.insertEmpty(startTag);\n                        tb.framesetOk(false);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartPClosers)) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insert(startTag);\n                    } else if (name.equals(\"span\")) {\n                        // same as final else, but short circuits lots of checks\n                        tb.reconstructFormattingElements();\n                        tb.insert(startTag);\n                    } else if (name.equals(\"li\")) {\n                        tb.framesetOk(false);\n                        ArrayList<Element> stack = tb.getStack();\n                        for (int i = stack.size() - 1; i > 0; i--) {\n                            Element el = stack.get(i);\n                            if (el.nodeName().equals(\"li\")) {\n                                tb.processEndTag(\"li\");\n                                break;\n                            }\n                            if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers))\n                                break;\n                        }\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insert(startTag);\n                    } else if (name.equals(\"html\")) {\n                        tb.error(this);\n                        // merge attributes onto real html\n                        Element html = tb.getStack().get(0);\n                        for (Attribute attribute : startTag.getAttributes()) {\n                            if (!html.hasAttr(attribute.getKey()))\n                                html.attributes().put(attribute);\n                        }\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartToHead)) {\n                        return tb.process(t, InHead);\n                    } else if (name.equals(\"body\")) {\n                        tb.error(this);\n                        ArrayList<Element> stack = tb.getStack();\n                        if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) {\n                            // only in fragment case\n                            return false; // ignore\n                        } else {\n                            tb.framesetOk(false);\n                            Element body = stack.get(1);\n                            for (Attribute attribute : startTag.getAttributes()) {\n                                if (!body.hasAttr(attribute.getKey()))\n                                    body.attributes().put(attribute);\n                            }\n                        }\n                    } else if (name.equals(\"frameset\")) {\n                        tb.error(this);\n                        ArrayList<Element> stack = tb.getStack();\n                        if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) {\n                            // only in fragment case\n                            return false; // ignore\n                        } else if (!tb.framesetOk()) {\n                            return false; // ignore frameset\n                        } else {\n                            Element second = stack.get(1);\n                            if (second.parent() != null)\n                                second.remove();\n                            // pop up to html element\n                            while (stack.size() > 1)\n                                stack.remove(stack.size()-1);\n                            tb.insert(startTag);\n                            tb.transition(InFrameset);\n                        }\n                    } else if (StringUtil.inSorted(name, Constants.Headings)) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        if (StringUtil.inSorted(tb.currentElement().nodeName(), Constants.Headings)) {\n                            tb.error(this);\n                            tb.pop();\n                        }\n                        tb.insert(startTag);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartPreListing)) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insert(startTag);\n                        // todo: ignore LF if next token\n                        tb.framesetOk(false);\n                    } else if (name.equals(\"form\")) {\n                        if (tb.getFormElement() != null) {\n                            tb.error(this);\n                            return false;\n                        }\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insertForm(startTag, true);\n                    } else if (StringUtil.inSorted(name, Constants.DdDt)) {\n                        tb.framesetOk(false);\n                        ArrayList<Element> stack = tb.getStack();\n                        for (int i = stack.size() - 1; i > 0; i--) {\n                            Element el = stack.get(i);\n                            if (StringUtil.inSorted(el.nodeName(), Constants.DdDt)) {\n                                tb.processEndTag(el.nodeName());\n                                break;\n                            }\n                            if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers))\n                                break;\n                        }\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insert(startTag);\n                    } else if (name.equals(\"plaintext\")) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insert(startTag);\n                        tb.tokeniser.transition(TokeniserState.PLAINTEXT); // once in, never gets out\n                    } else if (name.equals(\"button\")) {\n                        if (tb.inButtonScope(\"button\")) {\n                            // close and reprocess\n                            tb.error(this);\n                            tb.processEndTag(\"button\");\n                            tb.process(startTag);\n                        } else {\n                            tb.reconstructFormattingElements();\n                            tb.insert(startTag);\n                            tb.framesetOk(false);\n                        }\n                    } else if (StringUtil.inSorted(name, Constants.Formatters)) {\n                        tb.reconstructFormattingElements();\n                        Element el = tb.insert(startTag);\n                        tb.pushActiveFormattingElements(el);\n                    } else if (name.equals(\"nobr\")) {\n                        tb.reconstructFormattingElements();\n                        if (tb.inScope(\"nobr\")) {\n                            tb.error(this);\n                            tb.processEndTag(\"nobr\");\n                            tb.reconstructFormattingElements();\n                        }\n                        Element el = tb.insert(startTag);\n                        tb.pushActiveFormattingElements(el);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) {\n                        tb.reconstructFormattingElements();\n                        tb.insert(startTag);\n                        tb.insertMarkerToFormattingElements();\n                        tb.framesetOk(false);\n                    } else if (name.equals(\"table\")) {\n                        if (tb.getDocument().quirksMode() != Document.QuirksMode.quirks && tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insert(startTag);\n                        tb.framesetOk(false);\n                        tb.transition(InTable);\n                    } else if (name.equals(\"input\")) {\n                        tb.reconstructFormattingElements();\n                        Element el = tb.insertEmpty(startTag);\n                        if (!el.attr(\"type\").equalsIgnoreCase(\"hidden\"))\n                            tb.framesetOk(false);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartMedia)) {\n                        tb.insertEmpty(startTag);\n                    } else if (name.equals(\"hr\")) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insertEmpty(startTag);\n                        tb.framesetOk(false);\n                    } else if (name.equals(\"image\")) {\n                        if (tb.getFromStack(\"svg\") == null)\n                            return tb.process(startTag.name(\"img\")); // change <image> to <img>, unless in svg\n                        else\n                            tb.insert(startTag);\n                    } else if (name.equals(\"isindex\")) {\n                        // how much do we care about the early 90s?\n                        tb.error(this);\n                        if (tb.getFormElement() != null)\n                            return false;\n\n                        tb.processStartTag(\"form\");\n                        if (startTag.attributes.hasKey(\"action\")) {\n                            Element form = tb.getFormElement();\n                            form.attr(\"action\", startTag.attributes.get(\"action\"));\n                        }\n                        tb.processStartTag(\"hr\");\n                        tb.processStartTag(\"label\");\n                        // hope you like english.\n                        String prompt = startTag.attributes.hasKey(\"prompt\") ?\n                                startTag.attributes.get(\"prompt\") :\n                                \"This is a searchable index. Enter search keywords: \";\n\n                        tb.process(new Token.Character().data(prompt));\n\n                        // input\n                        Attributes inputAttribs = new Attributes();\n                        for (Attribute attr : startTag.attributes) {\n                            if (!StringUtil.inSorted(attr.getKey(), Constants.InBodyStartInputAttribs))\n                                inputAttribs.put(attr);\n                        }\n                        inputAttribs.put(\"name\", \"isindex\");\n                        tb.processStartTag(\"input\", inputAttribs);\n                        tb.processEndTag(\"label\");\n                        tb.processStartTag(\"hr\");\n                        tb.processEndTag(\"form\");\n                    } else if (name.equals(\"textarea\")) {\n                        tb.insert(startTag);\n                        // todo: If the next token is a U+000A LINE FEED (LF) character token, then ignore that token and move on to the next one. (Newlines at the start of textarea elements are ignored as an authoring convenience.)\n                        tb.tokeniser.transition(TokeniserState.Rcdata);\n                        tb.markInsertionMode();\n                        tb.framesetOk(false);\n                        tb.transition(Text);\n                    } else if (name.equals(\"xmp\")) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.reconstructFormattingElements();\n                        tb.framesetOk(false);\n                        handleRawtext(startTag, tb);\n                    } else if (name.equals(\"iframe\")) {\n                        tb.framesetOk(false);\n                        handleRawtext(startTag, tb);\n                    } else if (name.equals(\"noembed\")) {\n                        // also handle noscript if script enabled\n                        handleRawtext(startTag, tb);\n                    } else if (name.equals(\"select\")) {\n                        tb.reconstructFormattingElements();\n                        tb.insert(startTag);\n                        tb.framesetOk(false);\n\n                        HtmlTreeBuilderState state = tb.state();\n                        if (state.equals(InTable) || state.equals(InCaption) || state.equals(InTableBody) || state.equals(InRow) || state.equals(InCell))\n                            tb.transition(InSelectInTable);\n                        else\n                            tb.transition(InSelect);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartOptions)) {\n                        if (tb.currentElement().nodeName().equals(\"option\"))\n                            tb.processEndTag(\"option\");\n                        tb.reconstructFormattingElements();\n                        tb.insert(startTag);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartRuby)) {\n                        if (tb.inScope(\"ruby\")) {\n                            tb.generateImpliedEndTags();\n                            if (!tb.currentElement().nodeName().equals(\"ruby\")) {\n                                tb.error(this);\n                                tb.popStackToBefore(\"ruby\"); // i.e. close up to but not include name\n                            }\n                            tb.insert(startTag);\n                        }\n                    } else if (name.equals(\"math\")) {\n                        tb.reconstructFormattingElements();\n                        // todo: handle A start tag whose tag name is \"math\" (i.e. foreign, mathml)\n                        tb.insert(startTag);\n                    } else if (name.equals(\"svg\")) {\n                        tb.reconstructFormattingElements();\n                        // todo: handle A start tag whose tag name is \"svg\" (xlink, svg)\n                        tb.insert(startTag);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartDrop)) {\n                        tb.error(this);\n                        return false;\n                    } else {\n                        tb.reconstructFormattingElements();\n                        tb.insert(startTag);\n                    }\n                    break;\n\n                case EndTag:\n                    Token.EndTag endTag = t.asEndTag();\n                    name = endTag.normalName();\n                    if (StringUtil.inSorted(name, Constants.InBodyEndAdoptionFormatters)) {\n                        // Adoption Agency Algorithm.\n                        for (int i = 0; i < 8; i++) {\n                            Element formatEl = tb.getActiveFormattingElement(name);\n                            if (formatEl == null)\n                                return anyOtherEndTag(t, tb);\n                            else if (!tb.onStack(formatEl)) {\n                                tb.error(this);\n                                tb.removeFromActiveFormattingElements(formatEl);\n                                return true;\n                            } else if (!tb.inScope(formatEl.nodeName())) {\n                                tb.error(this);\n                                return false;\n                            } else if (tb.currentElement() != formatEl)\n                                tb.error(this);\n\n                            Element furthestBlock = null;\n                            Element commonAncestor = null;\n                            boolean seenFormattingElement = false;\n                            ArrayList<Element> stack = tb.getStack();\n                            // the spec doesn't limit to < 64, but in degenerate cases (9000+ stack depth) this prevents\n                            // run-aways\n                            final int stackSize = stack.size();\n                            for (int si = 0; si < stackSize && si < 64; si++) {\n                                Element el = stack.get(si);\n                                if (el == formatEl) {\n                                    commonAncestor = stack.get(si - 1);\n                                    seenFormattingElement = true;\n                                } else if (seenFormattingElement && tb.isSpecial(el)) {\n                                    furthestBlock = el;\n                                    break;\n                                }\n                            }\n                            if (furthestBlock == null) {\n                                tb.popStackToClose(formatEl.nodeName());\n                                tb.removeFromActiveFormattingElements(formatEl);\n                                return true;\n                            }\n\n                            // todo: Let a bookmark note the position of the formatting element in the list of active formatting elements relative to the elements on either side of it in the list.\n                            // does that mean: int pos of format el in list?\n                            Element node = furthestBlock;\n                            Element lastNode = furthestBlock;\n                            for (int j = 0; j < 3; j++) {\n                                if (tb.onStack(node))\n                                    node = tb.aboveOnStack(node);\n                                if (!tb.isInActiveFormattingElements(node)) { // note no bookmark check\n                                    tb.removeFromStack(node);\n                                    continue;\n                                } else if (node == formatEl)\n                                    break;\n\n                                Element replacement = new Element(Tag.valueOf(node.nodeName(), ParseSettings.preserveCase), tb.getBaseUri());\n                                // case will follow the original node (so honours ParseSettings)\n                                tb.replaceActiveFormattingElement(node, replacement);\n                                tb.replaceOnStack(node, replacement);\n                                node = replacement;\n\n                                if (lastNode == furthestBlock) {\n                                    // todo: move the aforementioned bookmark to be immediately after the new node in the list of active formatting elements.\n                                    // not getting how this bookmark both straddles the element above, but is inbetween here...\n                                }\n                                if (lastNode.parent() != null)\n                                    lastNode.remove();\n                                node.appendChild(lastNode);\n\n                                lastNode = node;\n                            }\n\n                            if (StringUtil.inSorted(commonAncestor.nodeName(), Constants.InBodyEndTableFosters)) {\n                                if (lastNode.parent() != null)\n                                    lastNode.remove();\n                                tb.insertInFosterParent(lastNode);\n                            } else {\n                                if (lastNode.parent() != null)\n                                    lastNode.remove();\n                                commonAncestor.appendChild(lastNode);\n                            }\n\n                            Element adopter = new Element(formatEl.tag(), tb.getBaseUri());\n                            adopter.attributes().addAll(formatEl.attributes());\n                            Node[] childNodes = furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()]);\n                            for (Node childNode : childNodes) {\n                                adopter.appendChild(childNode); // append will reparent. thus the clone to avoid concurrent mod.\n                            }\n                            furthestBlock.appendChild(adopter);\n                            tb.removeFromActiveFormattingElements(formatEl);\n                            // todo: insert the new element into the list of active formatting elements at the position of the aforementioned bookmark.\n                            tb.removeFromStack(formatEl);\n                            tb.insertOnStackAfter(furthestBlock, adopter);\n                        }\n                    } else if (StringUtil.inSorted(name, Constants.InBodyEndClosers)) {\n                        if (!tb.inScope(name)) {\n                            // nothing to close\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.generateImpliedEndTags();\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(name);\n                        }\n                    } else if (name.equals(\"span\")) {\n                        // same as final fall through, but saves short circuit\n                        return anyOtherEndTag(t, tb);\n                    } else if (name.equals(\"li\")) {\n                        if (!tb.inListItemScope(name)) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.generateImpliedEndTags(name);\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(name);\n                        }\n                    } else if (name.equals(\"body\")) {\n                        if (!tb.inScope(\"body\")) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            // todo: error if stack contains something not dd, dt, li, optgroup, option, p, rp, rt, tbody, td, tfoot, th, thead, tr, body, html\n                            tb.transition(AfterBody);\n                        }\n                    } else if (name.equals(\"html\")) {\n                        boolean notIgnored = tb.processEndTag(\"body\");\n                        if (notIgnored)\n                            return tb.process(endTag);\n                    } else if (name.equals(\"form\")) {\n                        Element currentForm = tb.getFormElement();\n                        tb.setFormElement(null);\n                        if (currentForm == null || !tb.inScope(name)) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.generateImpliedEndTags();\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            // remove currentForm from stack. will shift anything under up.\n                            tb.removeFromStack(currentForm);\n                        }\n                    } else if (name.equals(\"p\")) {\n                        if (!tb.inButtonScope(name)) {\n                            tb.error(this);\n                            tb.processStartTag(name); // if no p to close, creates an empty <p></p>\n                            return tb.process(endTag);\n                        } else {\n                            tb.generateImpliedEndTags(name);\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(name);\n                        }\n                    } else if (StringUtil.inSorted(name, Constants.DdDt)) {\n                        if (!tb.inScope(name)) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.generateImpliedEndTags(name);\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(name);\n                        }\n                    } else if (StringUtil.inSorted(name, Constants.Headings)) {\n                        if (!tb.inScope(Constants.Headings)) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.generateImpliedEndTags(name);\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(Constants.Headings);\n                        }\n                    } else if (name.equals(\"sarcasm\")) {\n                        // *sigh*\n                        return anyOtherEndTag(t, tb);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) {\n                        if (!tb.inScope(\"name\")) {\n                            if (!tb.inScope(name)) {\n                                tb.error(this);\n                                return false;\n                            }\n                            tb.generateImpliedEndTags();\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(name);\n                            tb.clearFormattingElementsToLastMarker();\n                        }\n                    } else if (name.equals(\"br\")) {\n                        tb.error(this);\n                        tb.processStartTag(\"br\");\n                        return false;\n                    } else {\n                        return anyOtherEndTag(t, tb);\n                    }\n\n                    break;\n                case EOF:\n                    // todo: error if stack contains something not dd, dt, li, p, tbody, td, tfoot, th, thead, tr, body, html\n                    // stop parsing\n                    break;\n            }",
      "right" : "switch (t.type) {\n                case Character: {\n                    Token.Character c = t.asCharacter();\n                    if (c.getData().equals(nullString)) {\n                        // todo confirm that check\n                        tb.error(this);\n                        return false;\n                    } else if (tb.framesetOk() && isWhitespace(c)) { // don't check if whitespace if frames already closed\n                        tb.reconstructFormattingElements();\n                        tb.insert(c);\n                    } else {\n                        tb.reconstructFormattingElements();\n                        tb.insert(c);\n                        tb.framesetOk(false);\n                    }\n                    break;\n                }\n                case Comment: {\n                    tb.insert(t.asComment());\n                    break;\n                }\n                case Doctype: {\n                    tb.error(this);\n                    return false;\n                }\n                case StartTag:\n                    Token.StartTag startTag = t.asStartTag();\n                    // todo - refactor to a switch statement\n                    String name = startTag.normalName();\n                    if (name.equals(\"a\")) {\n                        if (tb.getActiveFormattingElement(\"a\") != null) {\n                            tb.error(this);\n                            tb.processEndTag(\"a\");\n\n                            // still on stack?\n                            Element remainingA = tb.getFromStack(\"a\");\n                            if (remainingA != null) {\n                                tb.removeFromActiveFormattingElements(remainingA);\n                                tb.removeFromStack(remainingA);\n                            }\n                        }\n                        tb.reconstructFormattingElements();\n                        Element a = tb.insert(startTag);\n                        tb.pushActiveFormattingElements(a);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartEmptyFormatters)) {\n                        tb.reconstructFormattingElements();\n                        tb.insertEmpty(startTag);\n                        tb.framesetOk(false);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartPClosers)) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insert(startTag);\n                    } else if (name.equals(\"span\")) {\n                        // same as final else, but short circuits lots of checks\n                        tb.reconstructFormattingElements();\n                        tb.insert(startTag);\n                    } else if (name.equals(\"li\")) {\n                        tb.framesetOk(false);\n                        ArrayList<Element> stack = tb.getStack();\n                        for (int i = stack.size() - 1; i > 0; i--) {\n                            Element el = stack.get(i);\n                            if (el.nodeName().equals(\"li\")) {\n                                tb.processEndTag(\"li\");\n                                break;\n                            }\n                            if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers))\n                                break;\n                        }\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insert(startTag);\n                    } else if (name.equals(\"html\")) {\n                        tb.error(this);\n                        // merge attributes onto real html\n                        Element html = tb.getStack().get(0);\n                        for (Attribute attribute : startTag.getAttributes()) {\n                            if (!html.hasAttr(attribute.getKey()))\n                                html.attributes().put(attribute);\n                        }\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartToHead)) {\n                        return tb.process(t, InHead);\n                    } else if (name.equals(\"body\")) {\n                        tb.error(this);\n                        ArrayList<Element> stack = tb.getStack();\n                        if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) {\n                            // only in fragment case\n                            return false; // ignore\n                        } else {\n                            tb.framesetOk(false);\n                            Element body = stack.get(1);\n                            for (Attribute attribute : startTag.getAttributes()) {\n                                if (!body.hasAttr(attribute.getKey()))\n                                    body.attributes().put(attribute);\n                            }\n                        }\n                    } else if (name.equals(\"frameset\")) {\n                        tb.error(this);\n                        ArrayList<Element> stack = tb.getStack();\n                        if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) {\n                            // only in fragment case\n                            return false; // ignore\n                        } else if (!tb.framesetOk()) {\n                            return false; // ignore frameset\n                        } else {\n                            Element second = stack.get(1);\n                            if (second.parent() != null)\n                                second.remove();\n                            // pop up to html element\n                            while (stack.size() > 1)\n                                stack.remove(stack.size()-1);\n                            tb.insert(startTag);\n                            tb.transition(InFrameset);\n                        }\n                    } else if (StringUtil.inSorted(name, Constants.Headings)) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        if (StringUtil.inSorted(tb.currentElement().nodeName(), Constants.Headings)) {\n                            tb.error(this);\n                            tb.pop();\n                        }\n                        tb.insert(startTag);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartPreListing)) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insert(startTag);\n                        // todo: ignore LF if next token\n                        tb.framesetOk(false);\n                    } else if (name.equals(\"form\")) {\n                        if (tb.getFormElement() != null) {\n                            tb.error(this);\n                            return false;\n                        }\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insertForm(startTag, true);\n                    } else if (StringUtil.inSorted(name, Constants.DdDt)) {\n                        tb.framesetOk(false);\n                        ArrayList<Element> stack = tb.getStack();\n                        for (int i = stack.size() - 1; i > 0; i--) {\n                            Element el = stack.get(i);\n                            if (StringUtil.inSorted(el.nodeName(), Constants.DdDt)) {\n                                tb.processEndTag(el.nodeName());\n                                break;\n                            }\n                            if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers))\n                                break;\n                        }\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insert(startTag);\n                    } else if (name.equals(\"plaintext\")) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insert(startTag);\n                        tb.tokeniser.transition(TokeniserState.PLAINTEXT); // once in, never gets out\n                    } else if (name.equals(\"button\")) {\n                        if (tb.inButtonScope(\"button\")) {\n                            // close and reprocess\n                            tb.error(this);\n                            tb.processEndTag(\"button\");\n                            tb.process(startTag);\n                        } else {\n                            tb.reconstructFormattingElements();\n                            tb.insert(startTag);\n                            tb.framesetOk(false);\n                        }\n                    } else if (StringUtil.inSorted(name, Constants.Formatters)) {\n                        tb.reconstructFormattingElements();\n                        Element el = tb.insert(startTag);\n                        tb.pushActiveFormattingElements(el);\n                    } else if (name.equals(\"nobr\")) {\n                        tb.reconstructFormattingElements();\n                        if (tb.inScope(\"nobr\")) {\n                            tb.error(this);\n                            tb.processEndTag(\"nobr\");\n                            tb.reconstructFormattingElements();\n                        }\n                        Element el = tb.insert(startTag);\n                        tb.pushActiveFormattingElements(el);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) {\n                        tb.reconstructFormattingElements();\n                        tb.insert(startTag);\n                        tb.insertMarkerToFormattingElements();\n                        tb.framesetOk(false);\n                    } else if (name.equals(\"table\")) {\n                        if (tb.getDocument().quirksMode() != Document.QuirksMode.quirks && tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insert(startTag);\n                        tb.framesetOk(false);\n                        tb.transition(InTable);\n                    } else if (name.equals(\"input\")) {\n                        tb.reconstructFormattingElements();\n                        Element el = tb.insertEmpty(startTag);\n                        if (!el.attr(\"type\").equalsIgnoreCase(\"hidden\"))\n                            tb.framesetOk(false);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartMedia)) {\n                        tb.insertEmpty(startTag);\n                    } else if (name.equals(\"hr\")) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insertEmpty(startTag);\n                        tb.framesetOk(false);\n                    } else if (name.equals(\"image\")) {\n                        if (tb.getFromStack(\"svg\") == null)\n                            return tb.process(startTag.name(\"img\")); // change <image> to <img>, unless in svg\n                        else\n                            tb.insert(startTag);\n                    } else if (name.equals(\"isindex\")) {\n                        // how much do we care about the early 90s?\n                        tb.error(this);\n                        if (tb.getFormElement() != null)\n                            return false;\n\n                        tb.processStartTag(\"form\");\n                        if (startTag.attributes.hasKey(\"action\")) {\n                            Element form = tb.getFormElement();\n                            form.attr(\"action\", startTag.attributes.get(\"action\"));\n                        }\n                        tb.processStartTag(\"hr\");\n                        tb.processStartTag(\"label\");\n                        // hope you like english.\n                        String prompt = startTag.attributes.hasKey(\"prompt\") ?\n                                startTag.attributes.get(\"prompt\") :\n                                \"This is a searchable index. Enter search keywords: \";\n\n                        tb.process(new Token.Character().data(prompt));\n\n                        // input\n                        Attributes inputAttribs = new Attributes();\n                        for (Attribute attr : startTag.attributes) {\n                            if (!StringUtil.inSorted(attr.getKey(), Constants.InBodyStartInputAttribs))\n                                inputAttribs.put(attr);\n                        }\n                        inputAttribs.put(\"name\", \"isindex\");\n                        tb.processStartTag(\"input\", inputAttribs);\n                        tb.processEndTag(\"label\");\n                        tb.processStartTag(\"hr\");\n                        tb.processEndTag(\"form\");\n                    } else if (name.equals(\"textarea\")) {\n                        tb.insert(startTag);\n                        // todo: If the next token is a U+000A LINE FEED (LF) character token, then ignore that token and move on to the next one. (Newlines at the start of textarea elements are ignored as an authoring convenience.)\n                        tb.tokeniser.transition(TokeniserState.Rcdata);\n                        tb.markInsertionMode();\n                        tb.framesetOk(false);\n                        tb.transition(Text);\n                    } else if (name.equals(\"xmp\")) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.reconstructFormattingElements();\n                        tb.framesetOk(false);\n                        handleRawtext(startTag, tb);\n                    } else if (name.equals(\"iframe\")) {\n                        tb.framesetOk(false);\n                        handleRawtext(startTag, tb);\n                    } else if (name.equals(\"noembed\")) {\n                        // also handle noscript if script enabled\n                        handleRawtext(startTag, tb);\n                    } else if (name.equals(\"select\")) {\n                        tb.reconstructFormattingElements();\n                        tb.insert(startTag);\n                        tb.framesetOk(false);\n\n                        HtmlTreeBuilderState state = tb.state();\n                        if (state.equals(InTable) || state.equals(InCaption) || state.equals(InTableBody) || state.equals(InRow) || state.equals(InCell))\n                            tb.transition(InSelectInTable);\n                        else\n                            tb.transition(InSelect);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartOptions)) {\n                        if (tb.currentElement().nodeName().equals(\"option\"))\n                            tb.processEndTag(\"option\");\n                        tb.reconstructFormattingElements();\n                        tb.insert(startTag);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartRuby)) {\n                        if (tb.inScope(\"ruby\")) {\n                            tb.generateImpliedEndTags();\n                            if (!tb.currentElement().nodeName().equals(\"ruby\")) {\n                                tb.error(this);\n                                tb.popStackToBefore(\"ruby\"); // i.e. close up to but not include name\n                            }\n                            tb.insert(startTag);\n                        }\n                    } else if (name.equals(\"math\")) {\n                        tb.reconstructFormattingElements();\n                        // todo: handle A start tag whose tag name is \"math\" (i.e. foreign, mathml)\n                        tb.insert(startTag);\n                    } else if (name.equals(\"svg\")) {\n                        tb.reconstructFormattingElements();\n                        // todo: handle A start tag whose tag name is \"svg\" (xlink, svg)\n                        tb.insert(startTag);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartDrop)) {\n                        tb.error(this);\n                        return false;\n                    } else {\n                        tb.reconstructFormattingElements();\n                        tb.insert(startTag);\n                    }\n                    break;\n\n                case EndTag:\n                    Token.EndTag endTag = t.asEndTag();\n                    name = endTag.normalName();\n                    if (StringUtil.inSorted(name, Constants.InBodyEndAdoptionFormatters)) {\n                        // Adoption Agency Algorithm.\n                        for (int i = 0; i < 8; i++) {\n                            Element formatEl = tb.getActiveFormattingElement(name);\n                            if (formatEl == null)\n                                return anyOtherEndTag(t, tb);\n                            else if (!tb.onStack(formatEl)) {\n                                tb.error(this);\n                                tb.removeFromActiveFormattingElements(formatEl);\n                                return true;\n                            } else if (!tb.inScope(formatEl.nodeName())) {\n                                tb.error(this);\n                                return false;\n                            } else if (tb.currentElement() != formatEl)\n                                tb.error(this);\n\n                            Element furthestBlock = null;\n                            Element commonAncestor = null;\n                            boolean seenFormattingElement = false;\n                            ArrayList<Element> stack = tb.getStack();\n                            // the spec doesn't limit to < 64, but in degenerate cases (9000+ stack depth) this prevents\n                            // run-aways\n                            final int stackSize = stack.size();\n                            for (int si = 0; si < stackSize && si < 64; si++) {\n                                Element el = stack.get(si);\n                                if (el == formatEl) {\n                                    commonAncestor = stack.get(si - 1);\n                                    seenFormattingElement = true;\n                                } else if (seenFormattingElement && tb.isSpecial(el)) {\n                                    furthestBlock = el;\n                                    break;\n                                }\n                            }\n                            if (furthestBlock == null) {\n                                tb.popStackToClose(formatEl.nodeName());\n                                tb.removeFromActiveFormattingElements(formatEl);\n                                return true;\n                            }\n\n                            // todo: Let a bookmark note the position of the formatting element in the list of active formatting elements relative to the elements on either side of it in the list.\n                            // does that mean: int pos of format el in list?\n                            Element node = furthestBlock;\n                            Element lastNode = furthestBlock;\n                            for (int j = 0; j < 3; j++) {\n                                if (tb.onStack(node))\n                                    node = tb.aboveOnStack(node);\n                                if (!tb.isInActiveFormattingElements(node)) { // note no bookmark check\n                                    tb.removeFromStack(node);\n                                    continue;\n                                } else if (node == formatEl)\n                                    break;\n\n                                Element replacement = new Element(Tag.valueOf(node.nodeName(), ParseSettings.preserveCase), tb.getBaseUri());\n                                // case will follow the original node (so honours ParseSettings)\n                                tb.replaceActiveFormattingElement(node, replacement);\n                                tb.replaceOnStack(node, replacement);\n                                node = replacement;\n\n                                if (lastNode == furthestBlock) {\n                                    // todo: move the aforementioned bookmark to be immediately after the new node in the list of active formatting elements.\n                                    // not getting how this bookmark both straddles the element above, but is inbetween here...\n                                }\n                                if (lastNode.parent() != null)\n                                    lastNode.remove();\n                                node.appendChild(lastNode);\n\n                                lastNode = node;\n                            }\n\n                            if (StringUtil.inSorted(commonAncestor.nodeName(), Constants.InBodyEndTableFosters)) {\n                                if (lastNode.parent() != null)\n                                    lastNode.remove();\n                                tb.insertInFosterParent(lastNode);\n                            } else {\n                                if (lastNode.parent() != null)\n                                    lastNode.remove();\n                                commonAncestor.appendChild(lastNode);\n                            }\n\n                            Element adopter = new Element(formatEl.tag(), tb.getBaseUri());\n                            adopter.attributes().addAll(formatEl.attributes());\n                            Node[] childNodes = furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()]);\n                            for (Node childNode : childNodes) {\n                                adopter.appendChild(childNode); // append will reparent. thus the clone to avoid concurrent mod.\n                            }\n                            furthestBlock.appendChild(adopter);\n                            tb.removeFromActiveFormattingElements(formatEl);\n                            // todo: insert the new element into the list of active formatting elements at the position of the aforementioned bookmark.\n                            tb.removeFromStack(formatEl);\n                            tb.insertOnStackAfter(furthestBlock, adopter);\n                        }\n                    } else if (StringUtil.inSorted(name, Constants.InBodyEndClosers)) {\n                        if (!tb.inScope(name)) {\n                            // nothing to close\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.generateImpliedEndTags();\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(name);\n                        }\n                    } else if (name.equals(\"span\")) {\n                        // same as final fall through, but saves short circuit\n                        return anyOtherEndTag(t, tb);\n                    } else if (name.equals(\"li\")) {\n                        if (!tb.inListItemScope(name)) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.generateImpliedEndTags(name);\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(name);\n                        }\n                    } else if (name.equals(\"body\")) {\n                        if (!tb.inScope(\"body\")) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            // todo: error if stack contains something not dd, dt, li, optgroup, option, p, rp, rt, tbody, td, tfoot, th, thead, tr, body, html\n                            tb.transition(AfterBody);\n                        }\n                    } else if (name.equals(\"html\")) {\n                        boolean notIgnored = tb.processEndTag(\"body\");\n                        if (notIgnored)\n                            return tb.process(endTag);\n                    } else if (name.equals(\"form\")) {\n                        Element currentForm = tb.getFormElement();\n                        tb.setFormElement(null);\n                        if (currentForm == null || !tb.inScope(name)) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.generateImpliedEndTags();\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            // remove currentForm from stack. will shift anything under up.\n                            tb.removeFromStack(currentForm);\n                        }\n                    } else if (name.equals(\"p\")) {\n                        if (!tb.inButtonScope(name)) {\n                            tb.error(this);\n                            tb.processStartTag(name); // if no p to close, creates an empty <p></p>\n                            return tb.process(endTag);\n                        } else {\n                            tb.generateImpliedEndTags(name);\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(name);\n                        }\n                    } else if (StringUtil.inSorted(name, Constants.DdDt)) {\n                        if (!tb.inScope(name)) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.generateImpliedEndTags(name);\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(name);\n                        }\n                    } else if (StringUtil.inSorted(name, Constants.Headings)) {\n                        if (!tb.inScope(Constants.Headings)) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.generateImpliedEndTags(name);\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(Constants.Headings);\n                        }\n                    } else if (name.equals(\"sarcasm\")) {\n                        // *sigh*\n                        return anyOtherEndTag(t, tb);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) {\n                        if (!tb.inScope(\"name\")) {\n                            if (!tb.inScope(name)) {\n                                tb.error(this);\n                                return false;\n                            }\n                            tb.generateImpliedEndTags();\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(name);\n                            tb.clearFormattingElementsToLastMarker();\n                        }\n                    } else if (name.equals(\"br\")) {\n                        tb.error(this);\n                        tb.processStartTag(\"br\");\n                        return false;\n                    } else {\n                        return anyOtherEndTag(t, tb);\n                    }\n\n                    break;\n                case EOF:\n                    // todo: error if stack contains something not dd, dt, li, p, tbody, td, tfoot, th, thead, tr, body, html\n                    // stop parsing\n                    break;\n            }",
      "info" : "SwitchStatement[10127-38273]:SwitchStatement[10127-38273]"
    }, {
      "left" : "case Character:",
      "right" : "case Character:",
      "info" : "SwitchCase[10161-10176]:SwitchCase[10161-10176]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10177-10883]:Block[10177-10883]"
    }, {
      "left" : "Token.Character c = t.asCharacter();",
      "right" : "Token.Character c = t.asCharacter();",
      "info" : "VariableDeclarationStatement[10199-10235]:VariableDeclarationStatement[10199-10235]"
    }, {
      "left" : "if (c.getData().equals(nullString))",
      "right" : "if (c.getData().equals(nullString))",
      "info" : "IfStatement[10256-10838]:IfStatement[10256-10838]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10292-10444]:Block[10292-10444]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[10369-10384]:ExpressionStatement[10369-10384]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[10409-10422]:ReturnStatement[10409-10422]"
    }, {
      "left" : "if (tb.framesetOk() && isWhitespace(c))",
      "right" : "if (tb.framesetOk() && isWhitespace(c))",
      "info" : "IfStatement[10450-10838]:IfStatement[10450-10838]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10490-10665]:Block[10490-10665]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[10570-10605]:ExpressionStatement[10570-10605]"
    }, {
      "left" : "tb.insert(c);",
      "right" : "tb.insert(c);",
      "info" : "ExpressionStatement[10630-10643]:ExpressionStatement[10630-10643]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10671-10838]:Block[10671-10838]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[10697-10732]:ExpressionStatement[10697-10732]"
    }, {
      "left" : "tb.insert(c);",
      "right" : "tb.insert(c);",
      "info" : "ExpressionStatement[10757-10770]:ExpressionStatement[10757-10770]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[10795-10816]:ExpressionStatement[10795-10816]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[10859-10865]:BreakStatement[10859-10865]"
    }, {
      "left" : "case Comment:",
      "right" : "case Comment:",
      "info" : "SwitchCase[10900-10913]:SwitchCase[10900-10913]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10914-11006]:Block[10914-11006]"
    }, {
      "left" : "tb.insert(t.asComment());",
      "right" : "tb.insert(t.asComment());",
      "info" : "ExpressionStatement[10936-10961]:ExpressionStatement[10936-10961]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[10982-10988]:BreakStatement[10982-10988]"
    }, {
      "left" : "case Doctype:",
      "right" : "case Doctype:",
      "info" : "SwitchCase[11023-11036]:SwitchCase[11023-11036]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11037-11126]:Block[11037-11126]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[11059-11074]:ExpressionStatement[11059-11074]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[11095-11108]:ReturnStatement[11095-11108]"
    }, {
      "left" : "case StartTag:",
      "right" : "case StartTag:",
      "info" : "SwitchCase[11143-11157]:SwitchCase[11143-11157]"
    }, {
      "left" : "Token.StartTag startTag = t.asStartTag();",
      "right" : "Token.StartTag startTag = t.asStartTag();",
      "info" : "VariableDeclarationStatement[11178-11219]:VariableDeclarationStatement[11178-11219]"
    }, {
      "left" : "String name = startTag.normalName();",
      "right" : "String name = startTag.normalName();",
      "info" : "VariableDeclarationStatement[11301-11337]:VariableDeclarationStatement[11301-11337]"
    }, {
      "left" : "if (name.equals(\"a\"))",
      "right" : "if (name.equals(\"a\"))",
      "info" : "IfStatement[11358-26678]:IfStatement[11358-26678]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11380-12125]:Block[11380-12125]"
    }, {
      "left" : "if (tb.getActiveFormattingElement(\"a\") != null)",
      "right" : "if (tb.getActiveFormattingElement(\"a\") != null)",
      "info" : "IfStatement[11406-11926]:IfStatement[11406-11926]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11454-11926]:Block[11454-11926]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[11484-11499]:ExpressionStatement[11484-11499]"
    }, {
      "left" : "tb.processEndTag(\"a\");",
      "right" : "tb.processEndTag(\"a\");",
      "info" : "ExpressionStatement[11528-11550]:ExpressionStatement[11528-11550]"
    }, {
      "left" : "Element remainingA = tb.getFromStack(\"a\");",
      "right" : "Element remainingA = tb.getFromStack(\"a\");",
      "info" : "VariableDeclarationStatement[11627-11669]:VariableDeclarationStatement[11627-11669]"
    }, {
      "left" : "if (remainingA != null)",
      "right" : "if (remainingA != null)",
      "info" : "IfStatement[11698-11900]:IfStatement[11698-11900]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11722-11900]:Block[11722-11900]"
    }, {
      "left" : "tb.removeFromActiveFormattingElements(remainingA);",
      "right" : "tb.removeFromActiveFormattingElements(remainingA);",
      "info" : "ExpressionStatement[11756-11806]:ExpressionStatement[11756-11806]"
    }, {
      "left" : "tb.removeFromStack(remainingA);",
      "right" : "tb.removeFromStack(remainingA);",
      "info" : "ExpressionStatement[11839-11870]:ExpressionStatement[11839-11870]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[11951-11986]:ExpressionStatement[11951-11986]"
    }, {
      "left" : "Element a = tb.insert(startTag);",
      "right" : "Element a = tb.insert(startTag);",
      "info" : "VariableDeclarationStatement[12011-12043]:VariableDeclarationStatement[12011-12043]"
    }, {
      "left" : "tb.pushActiveFormattingElements(a);",
      "right" : "tb.pushActiveFormattingElements(a);",
      "info" : "ExpressionStatement[12068-12103]:ExpressionStatement[12068-12103]"
    }, {
      "left" : "if (StringUtil.inSorted(name, Constants.InBodyStartEmptyFormatters))",
      "right" : "if (StringUtil.inSorted(name, Constants.InBodyStartEmptyFormatters))",
      "info" : "IfStatement[12131-26678]:IfStatement[12131-26678]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12200-12379]:Block[12200-12379]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[12226-12261]:ExpressionStatement[12226-12261]"
    }, {
      "left" : "tb.insertEmpty(startTag);",
      "right" : "tb.insertEmpty(startTag);",
      "info" : "ExpressionStatement[12286-12311]:ExpressionStatement[12286-12311]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[12336-12357]:ExpressionStatement[12336-12357]"
    }, {
      "left" : "if (StringUtil.inSorted(name, Constants.InBodyStartPClosers))",
      "right" : "if (StringUtil.inSorted(name, Constants.InBodyStartPClosers))",
      "info" : "IfStatement[12385-26678]:IfStatement[12385-26678]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12447-12645]:Block[12447-12645]"
    }, {
      "left" : "if (tb.inButtonScope(\"p\"))",
      "right" : "if (tb.inButtonScope(\"p\"))",
      "info" : "IfStatement[12473-12578]:IfStatement[12473-12578]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12500-12578]:Block[12500-12578]"
    }, {
      "left" : "tb.processEndTag(\"p\");",
      "right" : "tb.processEndTag(\"p\");",
      "info" : "ExpressionStatement[12530-12552]:ExpressionStatement[12530-12552]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[12603-12623]:ExpressionStatement[12603-12623]"
    }, {
      "left" : "if (name.equals(\"span\"))",
      "right" : "if (name.equals(\"span\"))",
      "info" : "IfStatement[12651-26678]:IfStatement[12651-26678]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12676-12885]:Block[12676-12885]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[12783-12818]:ExpressionStatement[12783-12818]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[12843-12863]:ExpressionStatement[12843-12863]"
    }, {
      "left" : "if (name.equals(\"li\"))",
      "right" : "if (name.equals(\"li\"))",
      "info" : "IfStatement[12891-26678]:IfStatement[12891-26678]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12914-13722]:Block[12914-13722]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[12940-12961]:ExpressionStatement[12940-12961]"
    }, {
      "left" : "ArrayList<Element> stack = tb.getStack();",
      "right" : "ArrayList<Element> stack = tb.getStack();",
      "info" : "VariableDeclarationStatement[12986-13027]:VariableDeclarationStatement[12986-13027]"
    }, {
      "left" : "for (int i = stack.size() - 1; i > 0; i--)",
      "right" : "for (int i = stack.size() - 1; i > 0; i--)",
      "info" : "ForStatement[13052-13525]:ForStatement[13052-13525]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13095-13525]:Block[13095-13525]"
    }, {
      "left" : "Element el = stack.get(i);",
      "right" : "Element el = stack.get(i);",
      "info" : "VariableDeclarationStatement[13125-13151]:VariableDeclarationStatement[13125-13151]"
    }, {
      "left" : "if (el.nodeName().equals(\"li\"))",
      "right" : "if (el.nodeName().equals(\"li\"))",
      "info" : "IfStatement[13180-13338]:IfStatement[13180-13338]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13212-13338]:Block[13212-13338]"
    }, {
      "left" : "tb.processEndTag(\"li\");",
      "right" : "tb.processEndTag(\"li\");",
      "info" : "ExpressionStatement[13246-13269]:ExpressionStatement[13246-13269]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13302-13308]:BreakStatement[13302-13308]"
    }, {
      "left" : "if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers))",
      "right" : "if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers))",
      "info" : "IfStatement[13367-13499]:IfStatement[13367-13499]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13493-13499]:BreakStatement[13493-13499]"
    }, {
      "left" : "if (tb.inButtonScope(\"p\"))",
      "right" : "if (tb.inButtonScope(\"p\"))",
      "info" : "IfStatement[13550-13655]:IfStatement[13550-13655]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13577-13655]:Block[13577-13655]"
    }, {
      "left" : "tb.processEndTag(\"p\");",
      "right" : "tb.processEndTag(\"p\");",
      "info" : "ExpressionStatement[13607-13629]:ExpressionStatement[13607-13629]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[13680-13700]:ExpressionStatement[13680-13700]"
    }, {
      "left" : "if (name.equals(\"html\"))",
      "right" : "if (name.equals(\"html\"))",
      "info" : "IfStatement[13728-26678]:IfStatement[13728-26678]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13753-14174]:Block[13753-14174]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[13779-13794]:ExpressionStatement[13779-13794]"
    }, {
      "left" : "Element html = tb.getStack().get(0);",
      "right" : "Element html = tb.getStack().get(0);",
      "info" : "VariableDeclarationStatement[13878-13914]:VariableDeclarationStatement[13878-13914]"
    }, {
      "left" : "for (Attribute attribute : startTag.getAttributes())",
      "right" : "for (Attribute attribute : startTag.getAttributes())",
      "info" : "EnhancedForStatement[13939-14152]:EnhancedForStatement[13939-14152]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13992-14152]:Block[13992-14152]"
    }, {
      "left" : "if (!html.hasAttr(attribute.getKey()))",
      "right" : "if (!html.hasAttr(attribute.getKey()))",
      "info" : "IfStatement[14022-14126]:IfStatement[14022-14126]"
    }, {
      "left" : "html.attributes().put(attribute);",
      "right" : "html.attributes().put(attribute);",
      "info" : "ExpressionStatement[14093-14126]:ExpressionStatement[14093-14126]"
    }, {
      "left" : "if (StringUtil.inSorted(name, Constants.InBodyStartToHead))",
      "right" : "if (StringUtil.inSorted(name, Constants.InBodyStartToHead))",
      "info" : "IfStatement[14180-26678]:IfStatement[14180-26678]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14240-14317]:Block[14240-14317]"
    }, {
      "left" : "return tb.process(t, InHead);",
      "right" : "return tb.process(t, InHead);",
      "info" : "ReturnStatement[14266-14295]:ReturnStatement[14266-14295]"
    }, {
      "left" : "if (name.equals(\"body\"))",
      "right" : "if (name.equals(\"body\"))",
      "info" : "IfStatement[14323-26678]:IfStatement[14323-26678]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14348-15116]:Block[14348-15116]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[14374-14389]:ExpressionStatement[14374-14389]"
    }, {
      "left" : "ArrayList<Element> stack = tb.getStack();",
      "right" : "ArrayList<Element> stack = tb.getStack();",
      "info" : "VariableDeclarationStatement[14414-14455]:VariableDeclarationStatement[14414-14455]"
    }, {
      "left" : "if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\")))",
      "right" : "if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\")))",
      "info" : "IfStatement[14480-15094]:IfStatement[14480-15094]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14568-14700]:Block[14568-14700]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[14651-14664]:ReturnStatement[14651-14664]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14706-15094]:Block[14706-15094]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[14736-14757]:ExpressionStatement[14736-14757]"
    }, {
      "left" : "Element body = stack.get(1);",
      "right" : "Element body = stack.get(1);",
      "info" : "VariableDeclarationStatement[14786-14814]:VariableDeclarationStatement[14786-14814]"
    }, {
      "left" : "for (Attribute attribute : startTag.getAttributes())",
      "right" : "for (Attribute attribute : startTag.getAttributes())",
      "info" : "EnhancedForStatement[14843-15068]:EnhancedForStatement[14843-15068]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14896-15068]:Block[14896-15068]"
    }, {
      "left" : "if (!body.hasAttr(attribute.getKey()))",
      "right" : "if (!body.hasAttr(attribute.getKey()))",
      "info" : "IfStatement[14930-15038]:IfStatement[14930-15038]"
    }, {
      "left" : "body.attributes().put(attribute);",
      "right" : "body.attributes().put(attribute);",
      "info" : "ExpressionStatement[15005-15038]:ExpressionStatement[15005-15038]"
    }, {
      "left" : "if (name.equals(\"frameset\"))",
      "right" : "if (name.equals(\"frameset\"))",
      "info" : "IfStatement[15122-26678]:IfStatement[15122-26678]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15151-16112]:Block[15151-16112]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[15177-15192]:ExpressionStatement[15177-15192]"
    }, {
      "left" : "ArrayList<Element> stack = tb.getStack();",
      "right" : "ArrayList<Element> stack = tb.getStack();",
      "info" : "VariableDeclarationStatement[15217-15258]:VariableDeclarationStatement[15217-15258]"
    }, {
      "left" : "if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\")))",
      "right" : "if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\")))",
      "info" : "IfStatement[15283-16090]:IfStatement[15283-16090]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15371-15503]:Block[15371-15503]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[15454-15467]:ReturnStatement[15454-15467]"
    }, {
      "left" : "if (!tb.framesetOk())",
      "right" : "if (!tb.framesetOk())",
      "info" : "IfStatement[15509-16090]:IfStatement[15509-16090]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15531-15619]:Block[15531-15619]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[15561-15574]:ReturnStatement[15561-15574]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15625-16090]:Block[15625-16090]"
    }, {
      "left" : "Element second = stack.get(1);",
      "right" : "Element second = stack.get(1);",
      "info" : "VariableDeclarationStatement[15655-15685]:VariableDeclarationStatement[15655-15685]"
    }, {
      "left" : "if (second.parent() != null)",
      "right" : "if (second.parent() != null)",
      "info" : "IfStatement[15714-15791]:IfStatement[15714-15791]"
    }, {
      "left" : "second.remove();",
      "right" : "second.remove();",
      "info" : "ExpressionStatement[15775-15791]:ExpressionStatement[15775-15791]"
    }, {
      "left" : "while (stack.size() > 1)\n                                stack.remove(stack.size()-1);",
      "right" : "while (stack.size() > 1)\n                                stack.remove(stack.size()-1);",
      "info" : "WhileStatement[15874-15960]:WhileStatement[15874-15960]"
    }, {
      "left" : "stack.remove(stack.size()-1);",
      "right" : "stack.remove(stack.size()-1);",
      "info" : "ExpressionStatement[15931-15960]:ExpressionStatement[15931-15960]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[15989-16009]:ExpressionStatement[15989-16009]"
    }, {
      "left" : "tb.transition(InFrameset);",
      "right" : "tb.transition(InFrameset);",
      "info" : "ExpressionStatement[16038-16064]:ExpressionStatement[16038-16064]"
    }, {
      "left" : "if (StringUtil.inSorted(name, Constants.Headings))",
      "right" : "if (StringUtil.inSorted(name, Constants.Headings))",
      "info" : "IfStatement[16118-26678]:IfStatement[16118-26678]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16169-16578]:Block[16169-16578]"
    }, {
      "left" : "if (tb.inButtonScope(\"p\"))",
      "right" : "if (tb.inButtonScope(\"p\"))",
      "info" : "IfStatement[16195-16300]:IfStatement[16195-16300]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16222-16300]:Block[16222-16300]"
    }, {
      "left" : "tb.processEndTag(\"p\");",
      "right" : "tb.processEndTag(\"p\");",
      "info" : "ExpressionStatement[16252-16274]:ExpressionStatement[16252-16274]"
    }, {
      "left" : "if (StringUtil.inSorted(tb.currentElement().nodeName(), Constants.Headings))",
      "right" : "if (StringUtil.inSorted(tb.currentElement().nodeName(), Constants.Headings))",
      "info" : "IfStatement[16325-16511]:IfStatement[16325-16511]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16402-16511]:Block[16402-16511]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[16432-16447]:ExpressionStatement[16432-16447]"
    }, {
      "left" : "tb.pop();",
      "right" : "tb.pop();",
      "info" : "ExpressionStatement[16476-16485]:ExpressionStatement[16476-16485]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[16536-16556]:ExpressionStatement[16536-16556]"
    }, {
      "left" : "if (StringUtil.inSorted(name, Constants.InBodyStartPreListing))",
      "right" : "if (StringUtil.inSorted(name, Constants.InBodyStartPreListing))",
      "info" : "IfStatement[16584-26678]:IfStatement[16584-26678]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16648-16949]:Block[16648-16949]"
    }, {
      "left" : "if (tb.inButtonScope(\"p\"))",
      "right" : "if (tb.inButtonScope(\"p\"))",
      "info" : "IfStatement[16674-16779]:IfStatement[16674-16779]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16701-16779]:Block[16701-16779]"
    }, {
      "left" : "tb.processEndTag(\"p\");",
      "right" : "tb.processEndTag(\"p\");",
      "info" : "ExpressionStatement[16731-16753]:ExpressionStatement[16731-16753]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[16804-16824]:ExpressionStatement[16804-16824]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[16906-16927]:ExpressionStatement[16906-16927]"
    }, {
      "left" : "if (name.equals(\"form\"))",
      "right" : "if (name.equals(\"form\"))",
      "info" : "IfStatement[16955-26678]:IfStatement[16955-26678]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16980-17359]:Block[16980-17359]"
    }, {
      "left" : "if (tb.getFormElement() != null)",
      "right" : "if (tb.getFormElement() != null)",
      "info" : "IfStatement[17006-17152]:IfStatement[17006-17152]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17039-17152]:Block[17039-17152]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[17069-17084]:ExpressionStatement[17069-17084]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[17113-17126]:ReturnStatement[17113-17126]"
    }, {
      "left" : "if (tb.inButtonScope(\"p\"))",
      "right" : "if (tb.inButtonScope(\"p\"))",
      "info" : "IfStatement[17177-17282]:IfStatement[17177-17282]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17204-17282]:Block[17204-17282]"
    }, {
      "left" : "tb.processEndTag(\"p\");",
      "right" : "tb.processEndTag(\"p\");",
      "info" : "ExpressionStatement[17234-17256]:ExpressionStatement[17234-17256]"
    }, {
      "left" : "tb.insertForm(startTag, true);",
      "right" : "tb.insertForm(startTag, true);",
      "info" : "ExpressionStatement[17307-17337]:ExpressionStatement[17307-17337]"
    }, {
      "left" : "if (StringUtil.inSorted(name, Constants.DdDt))",
      "right" : "if (StringUtil.inSorted(name, Constants.DdDt))",
      "info" : "IfStatement[17365-26678]:IfStatement[17365-26678]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17412-18253]:Block[17412-18253]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[17438-17459]:ExpressionStatement[17438-17459]"
    }, {
      "left" : "ArrayList<Element> stack = tb.getStack();",
      "right" : "ArrayList<Element> stack = tb.getStack();",
      "info" : "VariableDeclarationStatement[17484-17525]:VariableDeclarationStatement[17484-17525]"
    }, {
      "left" : "for (int i = stack.size() - 1; i > 0; i--)",
      "right" : "for (int i = stack.size() - 1; i > 0; i--)",
      "info" : "ForStatement[17550-18056]:ForStatement[17550-18056]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17593-18056]:Block[17593-18056]"
    }, {
      "left" : "Element el = stack.get(i);",
      "right" : "Element el = stack.get(i);",
      "info" : "VariableDeclarationStatement[17623-17649]:VariableDeclarationStatement[17623-17649]"
    }, {
      "left" : "if (StringUtil.inSorted(el.nodeName(), Constants.DdDt))",
      "right" : "if (StringUtil.inSorted(el.nodeName(), Constants.DdDt))",
      "info" : "IfStatement[17678-17869]:IfStatement[17678-17869]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17734-17869]:Block[17734-17869]"
    }, {
      "left" : "tb.processEndTag(el.nodeName());",
      "right" : "tb.processEndTag(el.nodeName());",
      "info" : "ExpressionStatement[17768-17800]:ExpressionStatement[17768-17800]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[17833-17839]:BreakStatement[17833-17839]"
    }, {
      "left" : "if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers))",
      "right" : "if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers))",
      "info" : "IfStatement[17898-18030]:IfStatement[17898-18030]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[18024-18030]:BreakStatement[18024-18030]"
    }, {
      "left" : "if (tb.inButtonScope(\"p\"))",
      "right" : "if (tb.inButtonScope(\"p\"))",
      "info" : "IfStatement[18081-18186]:IfStatement[18081-18186]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18108-18186]:Block[18108-18186]"
    }, {
      "left" : "tb.processEndTag(\"p\");",
      "right" : "tb.processEndTag(\"p\");",
      "info" : "ExpressionStatement[18138-18160]:ExpressionStatement[18138-18160]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[18211-18231]:ExpressionStatement[18211-18231]"
    }, {
      "left" : "if (name.equals(\"plaintext\"))",
      "right" : "if (name.equals(\"plaintext\"))",
      "info" : "IfStatement[18259-26678]:IfStatement[18259-26678]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18289-18589]:Block[18289-18589]"
    }, {
      "left" : "if (tb.inButtonScope(\"p\"))",
      "right" : "if (tb.inButtonScope(\"p\"))",
      "info" : "IfStatement[18315-18420]:IfStatement[18315-18420]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18342-18420]:Block[18342-18420]"
    }, {
      "left" : "tb.processEndTag(\"p\");",
      "right" : "tb.processEndTag(\"p\");",
      "info" : "ExpressionStatement[18372-18394]:ExpressionStatement[18372-18394]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[18445-18465]:ExpressionStatement[18445-18465]"
    }, {
      "left" : "tb.tokeniser.transition(TokeniserState.PLAINTEXT);",
      "right" : "tb.tokeniser.transition(TokeniserState.PLAINTEXT);",
      "info" : "ExpressionStatement[18490-18540]:ExpressionStatement[18490-18540]"
    }, {
      "left" : "if (name.equals(\"button\"))",
      "right" : "if (name.equals(\"button\"))",
      "info" : "IfStatement[18595-26678]:IfStatement[18595-26678]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18622-19126]:Block[18622-19126]"
    }, {
      "left" : "if (tb.inButtonScope(\"button\"))",
      "right" : "if (tb.inButtonScope(\"button\"))",
      "info" : "IfStatement[18648-19104]:IfStatement[18648-19104]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18680-18908]:Block[18680-18908]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[18761-18776]:ExpressionStatement[18761-18776]"
    }, {
      "left" : "tb.processEndTag(\"button\");",
      "right" : "tb.processEndTag(\"button\");",
      "info" : "ExpressionStatement[18805-18832]:ExpressionStatement[18805-18832]"
    }, {
      "left" : "tb.process(startTag);",
      "right" : "tb.process(startTag);",
      "info" : "ExpressionStatement[18861-18882]:ExpressionStatement[18861-18882]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18914-19104]:Block[18914-19104]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[18944-18979]:ExpressionStatement[18944-18979]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[19008-19028]:ExpressionStatement[19008-19028]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[19057-19078]:ExpressionStatement[19057-19078]"
    }, {
      "left" : "if (StringUtil.inSorted(name, Constants.Formatters))",
      "right" : "if (StringUtil.inSorted(name, Constants.Formatters))",
      "info" : "IfStatement[19132-26678]:IfStatement[19132-26678]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19185-19387]:Block[19185-19387]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[19211-19246]:ExpressionStatement[19211-19246]"
    }, {
      "left" : "Element el = tb.insert(startTag);",
      "right" : "Element el = tb.insert(startTag);",
      "info" : "VariableDeclarationStatement[19271-19304]:VariableDeclarationStatement[19271-19304]"
    }, {
      "left" : "tb.pushActiveFormattingElements(el);",
      "right" : "tb.pushActiveFormattingElements(el);",
      "info" : "ExpressionStatement[19329-19365]:ExpressionStatement[19329-19365]"
    }, {
      "left" : "if (name.equals(\"nobr\"))",
      "right" : "if (name.equals(\"nobr\"))",
      "info" : "IfStatement[19393-26678]:IfStatement[19393-26678]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19418-19858]:Block[19418-19858]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[19444-19479]:ExpressionStatement[19444-19479]"
    }, {
      "left" : "if (tb.inScope(\"nobr\"))",
      "right" : "if (tb.inScope(\"nobr\"))",
      "info" : "IfStatement[19504-19717]:IfStatement[19504-19717]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19528-19717]:Block[19528-19717]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[19558-19573]:ExpressionStatement[19558-19573]"
    }, {
      "left" : "tb.processEndTag(\"nobr\");",
      "right" : "tb.processEndTag(\"nobr\");",
      "info" : "ExpressionStatement[19602-19627]:ExpressionStatement[19602-19627]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[19656-19691]:ExpressionStatement[19656-19691]"
    }, {
      "left" : "Element el = tb.insert(startTag);",
      "right" : "Element el = tb.insert(startTag);",
      "info" : "VariableDeclarationStatement[19742-19775]:VariableDeclarationStatement[19742-19775]"
    }, {
      "left" : "tb.pushActiveFormattingElements(el);",
      "right" : "tb.pushActiveFormattingElements(el);",
      "info" : "ExpressionStatement[19800-19836]:ExpressionStatement[19800-19836]"
    }, {
      "left" : "if (StringUtil.inSorted(name, Constants.InBodyStartApplets))",
      "right" : "if (StringUtil.inSorted(name, Constants.InBodyStartApplets))",
      "info" : "IfStatement[19864-26678]:IfStatement[19864-26678]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19925-20162]:Block[19925-20162]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[19951-19986]:ExpressionStatement[19951-19986]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[20011-20031]:ExpressionStatement[20011-20031]"
    }, {
      "left" : "tb.insertMarkerToFormattingElements();",
      "right" : "tb.insertMarkerToFormattingElements();",
      "info" : "ExpressionStatement[20056-20094]:ExpressionStatement[20056-20094]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[20119-20140]:ExpressionStatement[20119-20140]"
    }, {
      "left" : "if (name.equals(\"table\"))",
      "right" : "if (name.equals(\"table\"))",
      "info" : "IfStatement[20168-26678]:IfStatement[20168-26678]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20194-20549]:Block[20194-20549]"
    }, {
      "left" : "if (tb.getDocument().quirksMode() != Document.QuirksMode.quirks && tb.inButtonScope(\"p\"))",
      "right" : "if (tb.getDocument().quirksMode() != Document.QuirksMode.quirks && tb.inButtonScope(\"p\"))",
      "info" : "IfStatement[20220-20388]:IfStatement[20220-20388]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20310-20388]:Block[20310-20388]"
    }, {
      "left" : "tb.processEndTag(\"p\");",
      "right" : "tb.processEndTag(\"p\");",
      "info" : "ExpressionStatement[20340-20362]:ExpressionStatement[20340-20362]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[20413-20433]:ExpressionStatement[20413-20433]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[20458-20479]:ExpressionStatement[20458-20479]"
    }, {
      "left" : "tb.transition(InTable);",
      "right" : "tb.transition(InTable);",
      "info" : "ExpressionStatement[20504-20527]:ExpressionStatement[20504-20527]"
    }, {
      "left" : "if (name.equals(\"input\"))",
      "right" : "if (name.equals(\"input\"))",
      "info" : "IfStatement[20555-26678]:IfStatement[20555-26678]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20581-20850]:Block[20581-20850]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[20607-20642]:ExpressionStatement[20607-20642]"
    }, {
      "left" : "Element el = tb.insertEmpty(startTag);",
      "right" : "Element el = tb.insertEmpty(startTag);",
      "info" : "VariableDeclarationStatement[20667-20705]:VariableDeclarationStatement[20667-20705]"
    }, {
      "left" : "if (!el.attr(\"type\").equalsIgnoreCase(\"hidden\"))",
      "right" : "if (!el.attr(\"type\").equalsIgnoreCase(\"hidden\"))",
      "info" : "IfStatement[20730-20828]:IfStatement[20730-20828]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[20807-20828]:ExpressionStatement[20807-20828]"
    }, {
      "left" : "if (StringUtil.inSorted(name, Constants.InBodyStartMedia))",
      "right" : "if (StringUtil.inSorted(name, Constants.InBodyStartMedia))",
      "info" : "IfStatement[20856-26678]:IfStatement[20856-26678]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20915-20988]:Block[20915-20988]"
    }, {
      "left" : "tb.insertEmpty(startTag);",
      "right" : "tb.insertEmpty(startTag);",
      "info" : "ExpressionStatement[20941-20966]:ExpressionStatement[20941-20966]"
    }, {
      "left" : "if (name.equals(\"hr\"))",
      "right" : "if (name.equals(\"hr\"))",
      "info" : "IfStatement[20994-26678]:IfStatement[20994-26678]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21017-21266]:Block[21017-21266]"
    }, {
      "left" : "if (tb.inButtonScope(\"p\"))",
      "right" : "if (tb.inButtonScope(\"p\"))",
      "info" : "IfStatement[21043-21148]:IfStatement[21043-21148]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21070-21148]:Block[21070-21148]"
    }, {
      "left" : "tb.processEndTag(\"p\");",
      "right" : "tb.processEndTag(\"p\");",
      "info" : "ExpressionStatement[21100-21122]:ExpressionStatement[21100-21122]"
    }, {
      "left" : "tb.insertEmpty(startTag);",
      "right" : "tb.insertEmpty(startTag);",
      "info" : "ExpressionStatement[21173-21198]:ExpressionStatement[21173-21198]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[21223-21244]:ExpressionStatement[21223-21244]"
    }, {
      "left" : "if (name.equals(\"image\"))",
      "right" : "if (name.equals(\"image\"))",
      "info" : "IfStatement[21272-26678]:IfStatement[21272-26678]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21298-21570]:Block[21298-21570]"
    }, {
      "left" : "if (tb.getFromStack(\"svg\") == null)",
      "right" : "if (tb.getFromStack(\"svg\") == null)",
      "info" : "IfStatement[21324-21548]:IfStatement[21324-21548]"
    }, {
      "left" : "return tb.process(startTag.name(\"img\"));",
      "right" : "return tb.process(startTag.name(\"img\"));",
      "info" : "ReturnStatement[21388-21428]:ReturnStatement[21388-21428]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[21528-21548]:ExpressionStatement[21528-21548]"
    }, {
      "left" : "if (name.equals(\"isindex\"))",
      "right" : "if (name.equals(\"isindex\"))",
      "info" : "IfStatement[21576-26678]:IfStatement[21576-26678]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21604-23225]:Block[21604-23225]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[21698-21713]:ExpressionStatement[21698-21713]"
    }, {
      "left" : "if (tb.getFormElement() != null)",
      "right" : "if (tb.getFormElement() != null)",
      "info" : "IfStatement[21738-21812]:IfStatement[21738-21812]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[21799-21812]:ReturnStatement[21799-21812]"
    }, {
      "left" : "tb.processStartTag(\"form\");",
      "right" : "tb.processStartTag(\"form\");",
      "info" : "ExpressionStatement[21838-21865]:ExpressionStatement[21838-21865]"
    }, {
      "left" : "if (startTag.attributes.hasKey(\"action\"))",
      "right" : "if (startTag.attributes.hasKey(\"action\"))",
      "info" : "IfStatement[21890-22107]:IfStatement[21890-22107]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21932-22107]:Block[21932-22107]"
    }, {
      "left" : "Element form = tb.getFormElement();",
      "right" : "Element form = tb.getFormElement();",
      "info" : "VariableDeclarationStatement[21962-21997]:VariableDeclarationStatement[21962-21997]"
    }, {
      "left" : "form.attr(\"action\", startTag.attributes.get(\"action\"));",
      "right" : "form.attr(\"action\", startTag.attributes.get(\"action\"));",
      "info" : "ExpressionStatement[22026-22081]:ExpressionStatement[22026-22081]"
    }, {
      "left" : "tb.processStartTag(\"hr\");",
      "right" : "tb.processStartTag(\"hr\");",
      "info" : "ExpressionStatement[22132-22157]:ExpressionStatement[22132-22157]"
    }, {
      "left" : "tb.processStartTag(\"label\");",
      "right" : "tb.processStartTag(\"label\");",
      "info" : "ExpressionStatement[22182-22210]:ExpressionStatement[22182-22210]"
    }, {
      "left" : "String prompt = startTag.attributes.hasKey(\"prompt\") ?\n                                startTag.attributes.get(\"prompt\") :\n                                \"This is a searchable index. Enter search keywords: \";",
      "right" : "String prompt = startTag.attributes.hasKey(\"prompt\") ?\n                                startTag.attributes.get(\"prompt\") :\n                                \"This is a searchable index. Enter search keywords: \";",
      "info" : "VariableDeclarationStatement[22285-22494]:VariableDeclarationStatement[22285-22494]"
    }, {
      "left" : "tb.process(new Token.Character().data(prompt));",
      "right" : "tb.process(new Token.Character().data(prompt));",
      "info" : "ExpressionStatement[22520-22567]:ExpressionStatement[22520-22567]"
    }, {
      "left" : "Attributes inputAttribs = new Attributes();",
      "right" : "Attributes inputAttribs = new Attributes();",
      "info" : "VariableDeclarationStatement[22626-22669]:VariableDeclarationStatement[22626-22669]"
    }, {
      "left" : "for (Attribute attr : startTag.attributes)",
      "right" : "for (Attribute attr : startTag.attributes)",
      "info" : "EnhancedForStatement[22694-22924]:EnhancedForStatement[22694-22924]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22737-22924]:Block[22737-22924]"
    }, {
      "left" : "if (!StringUtil.inSorted(attr.getKey(), Constants.InBodyStartInputAttribs))",
      "right" : "if (!StringUtil.inSorted(attr.getKey(), Constants.InBodyStartInputAttribs))",
      "info" : "IfStatement[22767-22898]:IfStatement[22767-22898]"
    }, {
      "left" : "inputAttribs.put(attr);",
      "right" : "inputAttribs.put(attr);",
      "info" : "ExpressionStatement[22875-22898]:ExpressionStatement[22875-22898]"
    }, {
      "left" : "inputAttribs.put(\"name\", \"isindex\");",
      "right" : "inputAttribs.put(\"name\", \"isindex\");",
      "info" : "ExpressionStatement[22949-22985]:ExpressionStatement[22949-22985]"
    }, {
      "left" : "tb.processStartTag(\"input\", inputAttribs);",
      "right" : "tb.processStartTag(\"input\", inputAttribs);",
      "info" : "ExpressionStatement[23010-23052]:ExpressionStatement[23010-23052]"
    }, {
      "left" : "tb.processEndTag(\"label\");",
      "right" : "tb.processEndTag(\"label\");",
      "info" : "ExpressionStatement[23077-23103]:ExpressionStatement[23077-23103]"
    }, {
      "left" : "tb.processStartTag(\"hr\");",
      "right" : "tb.processStartTag(\"hr\");",
      "info" : "ExpressionStatement[23128-23153]:ExpressionStatement[23128-23153]"
    }, {
      "left" : "tb.processEndTag(\"form\");",
      "right" : "tb.processEndTag(\"form\");",
      "info" : "ExpressionStatement[23178-23203]:ExpressionStatement[23178-23203]"
    }, {
      "left" : "if (name.equals(\"textarea\"))",
      "right" : "if (name.equals(\"textarea\"))",
      "info" : "IfStatement[23231-26678]:IfStatement[23231-26678]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23260-23772]:Block[23260-23772]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[23286-23306]:ExpressionStatement[23286-23306]"
    }, {
      "left" : "tb.tokeniser.transition(TokeniserState.Rcdata);",
      "right" : "tb.tokeniser.transition(TokeniserState.Rcdata);",
      "info" : "ExpressionStatement[23564-23611]:ExpressionStatement[23564-23611]"
    }, {
      "left" : "tb.markInsertionMode();",
      "right" : "tb.markInsertionMode();",
      "info" : "ExpressionStatement[23636-23659]:ExpressionStatement[23636-23659]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[23684-23705]:ExpressionStatement[23684-23705]"
    }, {
      "left" : "tb.transition(Text);",
      "right" : "tb.transition(Text);",
      "info" : "ExpressionStatement[23730-23750]:ExpressionStatement[23730-23750]"
    }, {
      "left" : "if (name.equals(\"xmp\"))",
      "right" : "if (name.equals(\"xmp\"))",
      "info" : "IfStatement[23778-26678]:IfStatement[23778-26678]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23802-24114]:Block[23802-24114]"
    }, {
      "left" : "if (tb.inButtonScope(\"p\"))",
      "right" : "if (tb.inButtonScope(\"p\"))",
      "info" : "IfStatement[23828-23933]:IfStatement[23828-23933]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23855-23933]:Block[23855-23933]"
    }, {
      "left" : "tb.processEndTag(\"p\");",
      "right" : "tb.processEndTag(\"p\");",
      "info" : "ExpressionStatement[23885-23907]:ExpressionStatement[23885-23907]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[23958-23993]:ExpressionStatement[23958-23993]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[24018-24039]:ExpressionStatement[24018-24039]"
    }, {
      "left" : "handleRawtext(startTag, tb);",
      "right" : "handleRawtext(startTag, tb);",
      "info" : "ExpressionStatement[24064-24092]:ExpressionStatement[24064-24092]"
    }, {
      "left" : "if (name.equals(\"iframe\"))",
      "right" : "if (name.equals(\"iframe\"))",
      "info" : "IfStatement[24120-26678]:IfStatement[24120-26678]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24147-24269]:Block[24147-24269]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[24173-24194]:ExpressionStatement[24173-24194]"
    }, {
      "left" : "handleRawtext(startTag, tb);",
      "right" : "handleRawtext(startTag, tb);",
      "info" : "ExpressionStatement[24219-24247]:ExpressionStatement[24219-24247]"
    }, {
      "left" : "if (name.equals(\"noembed\"))",
      "right" : "if (name.equals(\"noembed\"))",
      "info" : "IfStatement[24275-26678]:IfStatement[24275-26678]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24303-24445]:Block[24303-24445]"
    }, {
      "left" : "handleRawtext(startTag, tb);",
      "right" : "handleRawtext(startTag, tb);",
      "info" : "ExpressionStatement[24395-24423]:ExpressionStatement[24395-24423]"
    }, {
      "left" : "if (name.equals(\"select\"))",
      "right" : "if (name.equals(\"select\"))",
      "info" : "IfStatement[24451-26678]:IfStatement[24451-26678]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24478-25014]:Block[24478-25014]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[24504-24539]:ExpressionStatement[24504-24539]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[24564-24584]:ExpressionStatement[24564-24584]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[24609-24630]:ExpressionStatement[24609-24630]"
    }, {
      "left" : "HtmlTreeBuilderState state = tb.state();",
      "right" : "HtmlTreeBuilderState state = tb.state();",
      "info" : "VariableDeclarationStatement[24656-24696]:VariableDeclarationStatement[24656-24696]"
    }, {
      "left" : "if (state.equals(InTable) || state.equals(InCaption) || state.equals(InTableBody) || state.equals(InRow) || state.equals(InCell))",
      "right" : "if (state.equals(InTable) || state.equals(InCaption) || state.equals(InTableBody) || state.equals(InRow) || state.equals(InCell))",
      "info" : "IfStatement[24721-24992]:IfStatement[24721-24992]"
    }, {
      "left" : "tb.transition(InSelectInTable);",
      "right" : "tb.transition(InSelectInTable);",
      "info" : "ExpressionStatement[24879-24910]:ExpressionStatement[24879-24910]"
    }, {
      "left" : "tb.transition(InSelect);",
      "right" : "tb.transition(InSelect);",
      "info" : "ExpressionStatement[24968-24992]:ExpressionStatement[24968-24992]"
    }, {
      "left" : "if (StringUtil.inSorted(name, Constants.InBodyStartOptions))",
      "right" : "if (StringUtil.inSorted(name, Constants.InBodyStartOptions))",
      "info" : "IfStatement[25020-26678]:IfStatement[25020-26678]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25081-25342]:Block[25081-25342]"
    }, {
      "left" : "if (tb.currentElement().nodeName().equals(\"option\"))",
      "right" : "if (tb.currentElement().nodeName().equals(\"option\"))",
      "info" : "IfStatement[25107-25215]:IfStatement[25107-25215]"
    }, {
      "left" : "tb.processEndTag(\"option\");",
      "right" : "tb.processEndTag(\"option\");",
      "info" : "ExpressionStatement[25188-25215]:ExpressionStatement[25188-25215]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[25240-25275]:ExpressionStatement[25240-25275]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[25300-25320]:ExpressionStatement[25300-25320]"
    }, {
      "left" : "if (StringUtil.inSorted(name, Constants.InBodyStartRuby))",
      "right" : "if (StringUtil.inSorted(name, Constants.InBodyStartRuby))",
      "info" : "IfStatement[25348-26678]:IfStatement[25348-26678]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25406-25873]:Block[25406-25873]"
    }, {
      "left" : "if (tb.inScope(\"ruby\"))",
      "right" : "if (tb.inScope(\"ruby\"))",
      "info" : "IfStatement[25432-25851]:IfStatement[25432-25851]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25456-25851]:Block[25456-25851]"
    }, {
      "left" : "tb.generateImpliedEndTags();",
      "right" : "tb.generateImpliedEndTags();",
      "info" : "ExpressionStatement[25486-25514]:ExpressionStatement[25486-25514]"
    }, {
      "left" : "if (!tb.currentElement().nodeName().equals(\"ruby\"))",
      "right" : "if (!tb.currentElement().nodeName().equals(\"ruby\"))",
      "info" : "IfStatement[25543-25776]:IfStatement[25543-25776]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25595-25776]:Block[25595-25776]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[25629-25644]:ExpressionStatement[25629-25644]"
    }, {
      "left" : "tb.popStackToBefore(\"ruby\");",
      "right" : "tb.popStackToBefore(\"ruby\");",
      "info" : "ExpressionStatement[25677-25705]:ExpressionStatement[25677-25705]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[25805-25825]:ExpressionStatement[25805-25825]"
    }, {
      "left" : "if (name.equals(\"math\"))",
      "right" : "if (name.equals(\"math\"))",
      "info" : "IfStatement[25879-26678]:IfStatement[25879-26678]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25904-26132]:Block[25904-26132]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[25930-25965]:ExpressionStatement[25930-25965]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[26090-26110]:ExpressionStatement[26090-26110]"
    }, {
      "left" : "if (name.equals(\"svg\"))",
      "right" : "if (name.equals(\"svg\"))",
      "info" : "IfStatement[26138-26678]:IfStatement[26138-26678]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26162-26379]:Block[26162-26379]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[26188-26223]:ExpressionStatement[26188-26223]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[26337-26357]:ExpressionStatement[26337-26357]"
    }, {
      "left" : "if (StringUtil.inSorted(name, Constants.InBodyStartDrop))",
      "right" : "if (StringUtil.inSorted(name, Constants.InBodyStartDrop))",
      "info" : "IfStatement[26385-26678]:IfStatement[26385-26678]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26443-26544]:Block[26443-26544]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[26469-26484]:ExpressionStatement[26469-26484]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[26509-26522]:ReturnStatement[26509-26522]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26550-26678]:Block[26550-26678]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[26576-26611]:ExpressionStatement[26576-26611]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[26636-26656]:ExpressionStatement[26636-26656]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[26699-26705]:BreakStatement[26699-26705]"
    }, {
      "left" : "case EndTag:",
      "right" : "case EndTag:",
      "info" : "SwitchCase[26723-26735]:SwitchCase[26723-26735]"
    }, {
      "left" : "Token.EndTag endTag = t.asEndTag();",
      "right" : "Token.EndTag endTag = t.asEndTag();",
      "info" : "VariableDeclarationStatement[26756-26791]:VariableDeclarationStatement[26756-26791]"
    }, {
      "left" : "name = endTag.normalName();",
      "right" : "name = endTag.normalName();",
      "info" : "ExpressionStatement[26812-26839]:ExpressionStatement[26812-26839]"
    }, {
      "left" : "if (StringUtil.inSorted(name, Constants.InBodyEndAdoptionFormatters))",
      "right" : "if (StringUtil.inSorted(name, Constants.InBodyEndAdoptionFormatters))",
      "info" : "IfStatement[26860-38016]:IfStatement[26860-38016]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26930-32642]:Block[26930-32642]"
    }, {
      "left" : "for (int i = 0; i < 8; i++)",
      "right" : "for (int i = 0; i < 8; i++)",
      "info" : "ForStatement[27010-32620]:ForStatement[27010-32620]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27038-32620]:Block[27038-32620]"
    }, {
      "left" : "Element formatEl = tb.getActiveFormattingElement(name);",
      "right" : "Element formatEl = tb.getActiveFormattingElement(name);",
      "info" : "VariableDeclarationStatement[27068-27123]:VariableDeclarationStatement[27068-27123]"
    }, {
      "left" : "if (formatEl == null)",
      "right" : "if (formatEl == null)",
      "info" : "IfStatement[27152-27760]:IfStatement[27152-27760]"
    }, {
      "left" : "return anyOtherEndTag(t, tb);",
      "right" : "return anyOtherEndTag(t, tb);",
      "info" : "ReturnStatement[27206-27235]:ReturnStatement[27206-27235]"
    }, {
      "left" : "if (!tb.onStack(formatEl))",
      "right" : "if (!tb.onStack(formatEl))",
      "info" : "IfStatement[27269-27760]:IfStatement[27269-27760]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27296-27501]:Block[27296-27501]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[27330-27345]:ExpressionStatement[27330-27345]"
    }, {
      "left" : "tb.removeFromActiveFormattingElements(formatEl);",
      "right" : "tb.removeFromActiveFormattingElements(formatEl);",
      "info" : "ExpressionStatement[27378-27426]:ExpressionStatement[27378-27426]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[27459-27471]:ReturnStatement[27459-27471]"
    }, {
      "left" : "if (!tb.inScope(formatEl.nodeName()))",
      "right" : "if (!tb.inScope(formatEl.nodeName()))",
      "info" : "IfStatement[27507-27760]:IfStatement[27507-27760]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27545-27670]:Block[27545-27670]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[27579-27594]:ExpressionStatement[27579-27594]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[27627-27640]:ReturnStatement[27627-27640]"
    }, {
      "left" : "if (tb.currentElement() != formatEl)",
      "right" : "if (tb.currentElement() != formatEl)",
      "info" : "IfStatement[27676-27760]:IfStatement[27676-27760]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[27745-27760]:ExpressionStatement[27745-27760]"
    }, {
      "left" : "Element furthestBlock = null;",
      "right" : "Element furthestBlock = null;",
      "info" : "VariableDeclarationStatement[27790-27819]:VariableDeclarationStatement[27790-27819]"
    }, {
      "left" : "Element commonAncestor = null;",
      "right" : "Element commonAncestor = null;",
      "info" : "VariableDeclarationStatement[27848-27878]:VariableDeclarationStatement[27848-27878]"
    }, {
      "left" : "boolean seenFormattingElement = false;",
      "right" : "boolean seenFormattingElement = false;",
      "info" : "VariableDeclarationStatement[27907-27945]:VariableDeclarationStatement[27907-27945]"
    }, {
      "left" : "ArrayList<Element> stack = tb.getStack();",
      "right" : "ArrayList<Element> stack = tb.getStack();",
      "info" : "VariableDeclarationStatement[27974-28015]:VariableDeclarationStatement[27974-28015]"
    }, {
      "left" : "final int stackSize = stack.size();",
      "right" : "final int stackSize = stack.size();",
      "info" : "VariableDeclarationStatement[28206-28241]:VariableDeclarationStatement[28206-28241]"
    }, {
      "left" : "for (int si = 0; si < stackSize && si < 64; si++)",
      "right" : "for (int si = 0; si < stackSize && si < 64; si++)",
      "info" : "ForStatement[28270-28824]:ForStatement[28270-28824]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28320-28824]:Block[28320-28824]"
    }, {
      "left" : "Element el = stack.get(si);",
      "right" : "Element el = stack.get(si);",
      "info" : "VariableDeclarationStatement[28354-28381]:VariableDeclarationStatement[28354-28381]"
    }, {
      "left" : "if (el == formatEl)",
      "right" : "if (el == formatEl)",
      "info" : "IfStatement[28414-28794]:IfStatement[28414-28794]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28434-28607]:Block[28434-28607]"
    }, {
      "left" : "commonAncestor = stack.get(si - 1);",
      "right" : "commonAncestor = stack.get(si - 1);",
      "info" : "ExpressionStatement[28472-28507]:ExpressionStatement[28472-28507]"
    }, {
      "left" : "seenFormattingElement = true;",
      "right" : "seenFormattingElement = true;",
      "info" : "ExpressionStatement[28544-28573]:ExpressionStatement[28544-28573]"
    }, {
      "left" : "if (seenFormattingElement && tb.isSpecial(el))",
      "right" : "if (seenFormattingElement && tb.isSpecial(el))",
      "info" : "IfStatement[28613-28794]:IfStatement[28613-28794]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28660-28794]:Block[28660-28794]"
    }, {
      "left" : "furthestBlock = el;",
      "right" : "furthestBlock = el;",
      "info" : "ExpressionStatement[28698-28717]:ExpressionStatement[28698-28717]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[28754-28760]:BreakStatement[28754-28760]"
    }, {
      "left" : "if (furthestBlock == null)",
      "right" : "if (furthestBlock == null)",
      "info" : "IfStatement[28853-29110]:IfStatement[28853-29110]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28880-29110]:Block[28880-29110]"
    }, {
      "left" : "tb.popStackToClose(formatEl.nodeName());",
      "right" : "tb.popStackToClose(formatEl.nodeName());",
      "info" : "ExpressionStatement[28914-28954]:ExpressionStatement[28914-28954]"
    }, {
      "left" : "tb.removeFromActiveFormattingElements(formatEl);",
      "right" : "tb.removeFromActiveFormattingElements(formatEl);",
      "info" : "ExpressionStatement[28987-29035]:ExpressionStatement[28987-29035]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[29068-29080]:ReturnStatement[29068-29080]"
    }, {
      "left" : "Element node = furthestBlock;",
      "right" : "Element node = furthestBlock;",
      "info" : "VariableDeclarationStatement[29414-29443]:VariableDeclarationStatement[29414-29443]"
    }, {
      "left" : "Element lastNode = furthestBlock;",
      "right" : "Element lastNode = furthestBlock;",
      "info" : "VariableDeclarationStatement[29472-29505]:VariableDeclarationStatement[29472-29505]"
    }, {
      "left" : "for (int j = 0; j < 3; j++)",
      "right" : "for (int j = 0; j < 3; j++)",
      "info" : "ForStatement[29534-31091]:ForStatement[29534-31091]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29562-31091]:Block[29562-31091]"
    }, {
      "left" : "if (tb.onStack(node))",
      "right" : "if (tb.onStack(node))",
      "info" : "IfStatement[29596-29683]:IfStatement[29596-29683]"
    }, {
      "left" : "node = tb.aboveOnStack(node);",
      "right" : "node = tb.aboveOnStack(node);",
      "info" : "ExpressionStatement[29654-29683]:ExpressionStatement[29654-29683]"
    }, {
      "left" : "if (!tb.isInActiveFormattingElements(node))",
      "right" : "if (!tb.isInActiveFormattingElements(node))",
      "info" : "IfStatement[29716-29999]:IfStatement[29716-29999]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29760-29929]:Block[29760-29929]"
    }, {
      "left" : "tb.removeFromStack(node);",
      "right" : "tb.removeFromStack(node);",
      "info" : "ExpressionStatement[29824-29849]:ExpressionStatement[29824-29849]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[29886-29895]:ContinueStatement[29886-29895]"
    }, {
      "left" : "if (node == formatEl)",
      "right" : "if (node == formatEl)",
      "info" : "IfStatement[29935-29999]:IfStatement[29935-29999]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[29993-29999]:BreakStatement[29993-29999]"
    }, {
      "left" : "Element replacement = new Element(Tag.valueOf(node.nodeName(), ParseSettings.preserveCase), tb.getBaseUri());",
      "right" : "Element replacement = new Element(Tag.valueOf(node.nodeName(), ParseSettings.preserveCase), tb.getBaseUri());",
      "info" : "VariableDeclarationStatement[30033-30142]:VariableDeclarationStatement[30033-30142]"
    }, {
      "left" : "tb.replaceActiveFormattingElement(node, replacement);",
      "right" : "tb.replaceActiveFormattingElement(node, replacement);",
      "info" : "ExpressionStatement[30272-30325]:ExpressionStatement[30272-30325]"
    }, {
      "left" : "tb.replaceOnStack(node, replacement);",
      "right" : "tb.replaceOnStack(node, replacement);",
      "info" : "ExpressionStatement[30358-30395]:ExpressionStatement[30358-30395]"
    }, {
      "left" : "node = replacement;",
      "right" : "node = replacement;",
      "info" : "ExpressionStatement[30428-30447]:ExpressionStatement[30428-30447]"
    }, {
      "left" : "if (lastNode == furthestBlock)",
      "right" : "if (lastNode == furthestBlock)",
      "info" : "IfStatement[30481-30833]:IfStatement[30481-30833]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30512-30833]:Block[30512-30833]"
    }, {
      "left" : "if (lastNode.parent() != null)",
      "right" : "if (lastNode.parent() != null)",
      "info" : "IfStatement[30866-30951]:IfStatement[30866-30951]"
    }, {
      "left" : "lastNode.remove();",
      "right" : "lastNode.remove();",
      "info" : "ExpressionStatement[30933-30951]:ExpressionStatement[30933-30951]"
    }, {
      "left" : "node.appendChild(lastNode);",
      "right" : "node.appendChild(lastNode);",
      "info" : "ExpressionStatement[30984-31011]:ExpressionStatement[30984-31011]"
    }, {
      "left" : "lastNode = node;",
      "right" : "lastNode = node;",
      "info" : "ExpressionStatement[31045-31061]:ExpressionStatement[31045-31061]"
    }, {
      "left" : "if (StringUtil.inSorted(commonAncestor.nodeName(), Constants.InBodyEndTableFosters))",
      "right" : "if (StringUtil.inSorted(commonAncestor.nodeName(), Constants.InBodyEndTableFosters))",
      "info" : "IfStatement[31121-31647]:IfStatement[31121-31647]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31206-31422]:Block[31206-31422]"
    }, {
      "left" : "if (lastNode.parent() != null)",
      "right" : "if (lastNode.parent() != null)",
      "info" : "IfStatement[31240-31325]:IfStatement[31240-31325]"
    }, {
      "left" : "lastNode.remove();",
      "right" : "lastNode.remove();",
      "info" : "ExpressionStatement[31307-31325]:ExpressionStatement[31307-31325]"
    }, {
      "left" : "tb.insertInFosterParent(lastNode);",
      "right" : "tb.insertInFosterParent(lastNode);",
      "info" : "ExpressionStatement[31358-31392]:ExpressionStatement[31358-31392]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31428-31647]:Block[31428-31647]"
    }, {
      "left" : "if (lastNode.parent() != null)",
      "right" : "if (lastNode.parent() != null)",
      "info" : "IfStatement[31462-31547]:IfStatement[31462-31547]"
    }, {
      "left" : "lastNode.remove();",
      "right" : "lastNode.remove();",
      "info" : "ExpressionStatement[31529-31547]:ExpressionStatement[31529-31547]"
    }, {
      "left" : "commonAncestor.appendChild(lastNode);",
      "right" : "commonAncestor.appendChild(lastNode);",
      "info" : "ExpressionStatement[31580-31617]:ExpressionStatement[31580-31617]"
    }, {
      "left" : "Element adopter = new Element(formatEl.tag(), tb.getBaseUri());",
      "right" : "Element adopter = new Element(formatEl.tag(), tb.getBaseUri());",
      "info" : "VariableDeclarationStatement[31677-31740]:VariableDeclarationStatement[31677-31740]"
    }, {
      "left" : "adopter.attributes().addAll(formatEl.attributes());",
      "right" : "adopter.attributes().addAll(formatEl.attributes());",
      "info" : "ExpressionStatement[31769-31820]:ExpressionStatement[31769-31820]"
    }, {
      "left" : "Node[] childNodes = furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()]);",
      "right" : "Node[] childNodes = furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()]);",
      "info" : "VariableDeclarationStatement[31849-31945]:VariableDeclarationStatement[31849-31945]"
    }, {
      "left" : "for (Node childNode : childNodes)",
      "right" : "for (Node childNode : childNodes)",
      "info" : "EnhancedForStatement[31974-32168]:EnhancedForStatement[31974-32168]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32008-32168]:Block[32008-32168]"
    }, {
      "left" : "adopter.appendChild(childNode);",
      "right" : "adopter.appendChild(childNode);",
      "info" : "ExpressionStatement[32042-32073]:ExpressionStatement[32042-32073]"
    }, {
      "left" : "furthestBlock.appendChild(adopter);",
      "right" : "furthestBlock.appendChild(adopter);",
      "info" : "ExpressionStatement[32197-32232]:ExpressionStatement[32197-32232]"
    }, {
      "left" : "tb.removeFromActiveFormattingElements(formatEl);",
      "right" : "tb.removeFromActiveFormattingElements(formatEl);",
      "info" : "ExpressionStatement[32261-32309]:ExpressionStatement[32261-32309]"
    }, {
      "left" : "tb.removeFromStack(formatEl);",
      "right" : "tb.removeFromStack(formatEl);",
      "info" : "ExpressionStatement[32490-32519]:ExpressionStatement[32490-32519]"
    }, {
      "left" : "tb.insertOnStackAfter(furthestBlock, adopter);",
      "right" : "tb.insertOnStackAfter(furthestBlock, adopter);",
      "info" : "ExpressionStatement[32548-32594]:ExpressionStatement[32548-32594]"
    }, {
      "left" : "if (StringUtil.inSorted(name, Constants.InBodyEndClosers))",
      "right" : "if (StringUtil.inSorted(name, Constants.InBodyEndClosers))",
      "info" : "IfStatement[32648-38016]:IfStatement[32648-38016]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32707-33209]:Block[32707-33209]"
    }, {
      "left" : "if (!tb.inScope(name))",
      "right" : "if (!tb.inScope(name))",
      "info" : "IfStatement[32733-33187]:IfStatement[32733-33187]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32756-32917]:Block[32756-32917]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[32834-32849]:ExpressionStatement[32834-32849]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[32878-32891]:ReturnStatement[32878-32891]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32923-33187]:Block[32923-33187]"
    }, {
      "left" : "tb.generateImpliedEndTags();",
      "right" : "tb.generateImpliedEndTags();",
      "info" : "ExpressionStatement[32953-32981]:ExpressionStatement[32953-32981]"
    }, {
      "left" : "if (!tb.currentElement().nodeName().equals(name))",
      "right" : "if (!tb.currentElement().nodeName().equals(name))",
      "info" : "IfStatement[33010-33107]:IfStatement[33010-33107]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[33092-33107]:ExpressionStatement[33092-33107]"
    }, {
      "left" : "tb.popStackToClose(name);",
      "right" : "tb.popStackToClose(name);",
      "info" : "ExpressionStatement[33136-33161]:ExpressionStatement[33136-33161]"
    }, {
      "left" : "if (name.equals(\"span\"))",
      "right" : "if (name.equals(\"span\"))",
      "info" : "IfStatement[33215-38016]:IfStatement[33215-38016]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33240-33396]:Block[33240-33396]"
    }, {
      "left" : "return anyOtherEndTag(t, tb);",
      "right" : "return anyOtherEndTag(t, tb);",
      "info" : "ReturnStatement[33345-33374]:ReturnStatement[33345-33374]"
    }, {
      "left" : "if (name.equals(\"li\"))",
      "right" : "if (name.equals(\"li\"))",
      "info" : "IfStatement[33402-38016]:IfStatement[33402-38016]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33425-33891]:Block[33425-33891]"
    }, {
      "left" : "if (!tb.inListItemScope(name))",
      "right" : "if (!tb.inListItemScope(name))",
      "info" : "IfStatement[33451-33869]:IfStatement[33451-33869]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33482-33595]:Block[33482-33595]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[33512-33527]:ExpressionStatement[33512-33527]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[33556-33569]:ReturnStatement[33556-33569]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33601-33869]:Block[33601-33869]"
    }, {
      "left" : "tb.generateImpliedEndTags(name);",
      "right" : "tb.generateImpliedEndTags(name);",
      "info" : "ExpressionStatement[33631-33663]:ExpressionStatement[33631-33663]"
    }, {
      "left" : "if (!tb.currentElement().nodeName().equals(name))",
      "right" : "if (!tb.currentElement().nodeName().equals(name))",
      "info" : "IfStatement[33692-33789]:IfStatement[33692-33789]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[33774-33789]:ExpressionStatement[33774-33789]"
    }, {
      "left" : "tb.popStackToClose(name);",
      "right" : "tb.popStackToClose(name);",
      "info" : "ExpressionStatement[33818-33843]:ExpressionStatement[33818-33843]"
    }, {
      "left" : "if (name.equals(\"body\"))",
      "right" : "if (name.equals(\"body\"))",
      "info" : "IfStatement[33897-38016]:IfStatement[33897-38016]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33922-34355]:Block[33922-34355]"
    }, {
      "left" : "if (!tb.inScope(\"body\"))",
      "right" : "if (!tb.inScope(\"body\"))",
      "info" : "IfStatement[33948-34333]:IfStatement[33948-34333]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33973-34086]:Block[33973-34086]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[34003-34018]:ExpressionStatement[34003-34018]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[34047-34060]:ReturnStatement[34047-34060]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34092-34333]:Block[34092-34333]"
    }, {
      "left" : "tb.transition(AfterBody);",
      "right" : "tb.transition(AfterBody);",
      "info" : "ExpressionStatement[34282-34307]:ExpressionStatement[34282-34307]"
    }, {
      "left" : "if (name.equals(\"html\"))",
      "right" : "if (name.equals(\"html\"))",
      "info" : "IfStatement[34361-38016]:IfStatement[34361-38016]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34386-34575]:Block[34386-34575]"
    }, {
      "left" : "boolean notIgnored = tb.processEndTag(\"body\");",
      "right" : "boolean notIgnored = tb.processEndTag(\"body\");",
      "info" : "VariableDeclarationStatement[34412-34458]:VariableDeclarationStatement[34412-34458]"
    }, {
      "left" : "if (notIgnored)",
      "right" : "if (notIgnored)",
      "info" : "IfStatement[34483-34553]:IfStatement[34483-34553]"
    }, {
      "left" : "return tb.process(endTag);",
      "right" : "return tb.process(endTag);",
      "info" : "ReturnStatement[34527-34553]:ReturnStatement[34527-34553]"
    }, {
      "left" : "if (name.equals(\"form\"))",
      "right" : "if (name.equals(\"form\"))",
      "info" : "IfStatement[34581-38016]:IfStatement[34581-38016]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34606-35298]:Block[34606-35298]"
    }, {
      "left" : "Element currentForm = tb.getFormElement();",
      "right" : "Element currentForm = tb.getFormElement();",
      "info" : "VariableDeclarationStatement[34632-34674]:VariableDeclarationStatement[34632-34674]"
    }, {
      "left" : "tb.setFormElement(null);",
      "right" : "tb.setFormElement(null);",
      "info" : "ExpressionStatement[34699-34723]:ExpressionStatement[34699-34723]"
    }, {
      "left" : "if (currentForm == null || !tb.inScope(name))",
      "right" : "if (currentForm == null || !tb.inScope(name))",
      "info" : "IfStatement[34748-35276]:IfStatement[34748-35276]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34794-34907]:Block[34794-34907]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[34824-34839]:ExpressionStatement[34824-34839]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[34868-34881]:ReturnStatement[34868-34881]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34913-35276]:Block[34913-35276]"
    }, {
      "left" : "tb.generateImpliedEndTags();",
      "right" : "tb.generateImpliedEndTags();",
      "info" : "ExpressionStatement[34943-34971]:ExpressionStatement[34943-34971]"
    }, {
      "left" : "if (!tb.currentElement().nodeName().equals(name))",
      "right" : "if (!tb.currentElement().nodeName().equals(name))",
      "info" : "IfStatement[35000-35097]:IfStatement[35000-35097]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[35082-35097]:ExpressionStatement[35082-35097]"
    }, {
      "left" : "tb.removeFromStack(currentForm);",
      "right" : "tb.removeFromStack(currentForm);",
      "info" : "ExpressionStatement[35218-35250]:ExpressionStatement[35218-35250]"
    }, {
      "left" : "if (name.equals(\"p\"))",
      "right" : "if (name.equals(\"p\"))",
      "info" : "IfStatement[35304-38016]:IfStatement[35304-38016]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35326-35903]:Block[35326-35903]"
    }, {
      "left" : "if (!tb.inButtonScope(name))",
      "right" : "if (!tb.inButtonScope(name))",
      "info" : "IfStatement[35352-35881]:IfStatement[35352-35881]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35381-35607]:Block[35381-35607]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[35411-35426]:ExpressionStatement[35411-35426]"
    }, {
      "left" : "tb.processStartTag(name);",
      "right" : "tb.processStartTag(name);",
      "info" : "ExpressionStatement[35455-35480]:ExpressionStatement[35455-35480]"
    }, {
      "left" : "return tb.process(endTag);",
      "right" : "return tb.process(endTag);",
      "info" : "ReturnStatement[35555-35581]:ReturnStatement[35555-35581]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35613-35881]:Block[35613-35881]"
    }, {
      "left" : "tb.generateImpliedEndTags(name);",
      "right" : "tb.generateImpliedEndTags(name);",
      "info" : "ExpressionStatement[35643-35675]:ExpressionStatement[35643-35675]"
    }, {
      "left" : "if (!tb.currentElement().nodeName().equals(name))",
      "right" : "if (!tb.currentElement().nodeName().equals(name))",
      "info" : "IfStatement[35704-35801]:IfStatement[35704-35801]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[35786-35801]:ExpressionStatement[35786-35801]"
    }, {
      "left" : "tb.popStackToClose(name);",
      "right" : "tb.popStackToClose(name);",
      "info" : "ExpressionStatement[35830-35855]:ExpressionStatement[35830-35855]"
    }, {
      "left" : "if (StringUtil.inSorted(name, Constants.DdDt))",
      "right" : "if (StringUtil.inSorted(name, Constants.DdDt))",
      "info" : "IfStatement[35909-38016]:IfStatement[35909-38016]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35956-36414]:Block[35956-36414]"
    }, {
      "left" : "if (!tb.inScope(name))",
      "right" : "if (!tb.inScope(name))",
      "info" : "IfStatement[35982-36392]:IfStatement[35982-36392]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36005-36118]:Block[36005-36118]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[36035-36050]:ExpressionStatement[36035-36050]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[36079-36092]:ReturnStatement[36079-36092]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36124-36392]:Block[36124-36392]"
    }, {
      "left" : "tb.generateImpliedEndTags(name);",
      "right" : "tb.generateImpliedEndTags(name);",
      "info" : "ExpressionStatement[36154-36186]:ExpressionStatement[36154-36186]"
    }, {
      "left" : "if (!tb.currentElement().nodeName().equals(name))",
      "right" : "if (!tb.currentElement().nodeName().equals(name))",
      "info" : "IfStatement[36215-36312]:IfStatement[36215-36312]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[36297-36312]:ExpressionStatement[36297-36312]"
    }, {
      "left" : "tb.popStackToClose(name);",
      "right" : "tb.popStackToClose(name);",
      "info" : "ExpressionStatement[36341-36366]:ExpressionStatement[36341-36366]"
    }, {
      "left" : "if (StringUtil.inSorted(name, Constants.Headings))",
      "right" : "if (StringUtil.inSorted(name, Constants.Headings))",
      "info" : "IfStatement[36420-38016]:IfStatement[36420-38016]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36471-36957]:Block[36471-36957]"
    }, {
      "left" : "if (!tb.inScope(Constants.Headings))",
      "right" : "if (!tb.inScope(Constants.Headings))",
      "info" : "IfStatement[36497-36935]:IfStatement[36497-36935]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36534-36647]:Block[36534-36647]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[36564-36579]:ExpressionStatement[36564-36579]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[36608-36621]:ReturnStatement[36608-36621]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36653-36935]:Block[36653-36935]"
    }, {
      "left" : "tb.generateImpliedEndTags(name);",
      "right" : "tb.generateImpliedEndTags(name);",
      "info" : "ExpressionStatement[36683-36715]:ExpressionStatement[36683-36715]"
    }, {
      "left" : "if (!tb.currentElement().nodeName().equals(name))",
      "right" : "if (!tb.currentElement().nodeName().equals(name))",
      "info" : "IfStatement[36744-36841]:IfStatement[36744-36841]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[36826-36841]:ExpressionStatement[36826-36841]"
    }, {
      "left" : "tb.popStackToClose(Constants.Headings);",
      "right" : "tb.popStackToClose(Constants.Headings);",
      "info" : "ExpressionStatement[36870-36909]:ExpressionStatement[36870-36909]"
    }, {
      "left" : "if (name.equals(\"sarcasm\"))",
      "right" : "if (name.equals(\"sarcasm\"))",
      "info" : "IfStatement[36963-38016]:IfStatement[36963-38016]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36991-37102]:Block[36991-37102]"
    }, {
      "left" : "return anyOtherEndTag(t, tb);",
      "right" : "return anyOtherEndTag(t, tb);",
      "info" : "ReturnStatement[37051-37080]:ReturnStatement[37051-37080]"
    }, {
      "left" : "if (StringUtil.inSorted(name, Constants.InBodyStartApplets))",
      "right" : "if (StringUtil.inSorted(name, Constants.InBodyStartApplets))",
      "info" : "IfStatement[37108-38016]:IfStatement[37108-38016]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37169-37753]:Block[37169-37753]"
    }, {
      "left" : "if (!tb.inScope(\"name\"))",
      "right" : "if (!tb.inScope(\"name\"))",
      "info" : "IfStatement[37195-37731]:IfStatement[37195-37731]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37220-37731]:Block[37220-37731]"
    }, {
      "left" : "if (!tb.inScope(name))",
      "right" : "if (!tb.inScope(name))",
      "info" : "IfStatement[37250-37398]:IfStatement[37250-37398]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37273-37398]:Block[37273-37398]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[37307-37322]:ExpressionStatement[37307-37322]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[37355-37368]:ReturnStatement[37355-37368]"
    }, {
      "left" : "tb.generateImpliedEndTags();",
      "right" : "tb.generateImpliedEndTags();",
      "info" : "ExpressionStatement[37427-37455]:ExpressionStatement[37427-37455]"
    }, {
      "left" : "if (!tb.currentElement().nodeName().equals(name))",
      "right" : "if (!tb.currentElement().nodeName().equals(name))",
      "info" : "IfStatement[37484-37581]:IfStatement[37484-37581]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[37566-37581]:ExpressionStatement[37566-37581]"
    }, {
      "left" : "tb.popStackToClose(name);",
      "right" : "tb.popStackToClose(name);",
      "info" : "ExpressionStatement[37610-37635]:ExpressionStatement[37610-37635]"
    }, {
      "left" : "tb.clearFormattingElementsToLastMarker();",
      "right" : "tb.clearFormattingElementsToLastMarker();",
      "info" : "ExpressionStatement[37664-37705]:ExpressionStatement[37664-37705]"
    }, {
      "left" : "if (name.equals(\"br\"))",
      "right" : "if (name.equals(\"br\"))",
      "info" : "IfStatement[37759-38016]:IfStatement[37759-38016]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37782-37933]:Block[37782-37933]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[37808-37823]:ExpressionStatement[37808-37823]"
    }, {
      "left" : "tb.processStartTag(\"br\");",
      "right" : "tb.processStartTag(\"br\");",
      "info" : "ExpressionStatement[37848-37873]:ExpressionStatement[37848-37873]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[37898-37911]:ReturnStatement[37898-37911]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37939-38016]:Block[37939-38016]"
    }, {
      "left" : "return anyOtherEndTag(t, tb);",
      "right" : "return anyOtherEndTag(t, tb);",
      "info" : "ReturnStatement[37965-37994]:ReturnStatement[37965-37994]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[38038-38044]:BreakStatement[38038-38044]"
    }, {
      "left" : "case EOF:",
      "right" : "case EOF:",
      "info" : "SwitchCase[38061-38070]:SwitchCase[38061-38070]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[38253-38259]:BreakStatement[38253-38259]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[38286-38298]:ReturnStatement[38286-38298]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[38318-38325]:PrimitiveType[38318-38325]"
    }, {
      "left" : "anyOtherEndTag",
      "right" : "anyOtherEndTag",
      "info" : "SimpleName[38326-38340]:SimpleName[38326-38340]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[38341-38348]:SingleVariableDeclaration[38341-38348]"
    }, {
      "left" : "HtmlTreeBuilder tb",
      "right" : "HtmlTreeBuilder tb",
      "info" : "SingleVariableDeclaration[38350-38368]:SingleVariableDeclaration[38350-38368]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38370-39152]:Block[38370-39152]"
    }, {
      "left" : "String name = t.asEndTag().name();",
      "right" : "String name = t.asEndTag().name();",
      "info" : "VariableDeclarationStatement[38384-38418]:VariableDeclarationStatement[38384-38418]"
    }, {
      "left" : "ArrayList<Element> stack = tb.getStack();",
      "right" : "ArrayList<Element> stack = tb.getStack();",
      "info" : "VariableDeclarationStatement[38475-38516]:VariableDeclarationStatement[38475-38516]"
    }, {
      "left" : "for (int pos = stack.size() -1; pos >= 0; pos--)",
      "right" : "for (int pos = stack.size() -1; pos >= 0; pos--)",
      "info" : "ForStatement[38529-39117]:ForStatement[38529-39117]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38578-39117]:Block[38578-39117]"
    }, {
      "left" : "Element node = stack.get(pos);",
      "right" : "Element node = stack.get(pos);",
      "info" : "VariableDeclarationStatement[38596-38626]:VariableDeclarationStatement[38596-38626]"
    }, {
      "left" : "if (node.nodeName().equals(name))",
      "right" : "if (node.nodeName().equals(name))",
      "info" : "IfStatement[38643-39103]:IfStatement[38643-39103]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38677-38932]:Block[38677-38932]"
    }, {
      "left" : "tb.generateImpliedEndTags(name);",
      "right" : "tb.generateImpliedEndTags(name);",
      "info" : "ExpressionStatement[38699-38731]:ExpressionStatement[38699-38731]"
    }, {
      "left" : "if (!name.equals(tb.currentElement().nodeName()))",
      "right" : "if (!name.equals(tb.currentElement().nodeName()))",
      "info" : "IfStatement[38752-38841]:IfStatement[38752-38841]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[38826-38841]:ExpressionStatement[38826-38841]"
    }, {
      "left" : "tb.popStackToClose(name);",
      "right" : "tb.popStackToClose(name);",
      "info" : "ExpressionStatement[38862-38887]:ExpressionStatement[38862-38887]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[38908-38914]:BreakStatement[38908-38914]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38938-39103]:Block[38938-39103]"
    }, {
      "left" : "if (tb.isSpecial(node))",
      "right" : "if (tb.isSpecial(node))",
      "info" : "IfStatement[38960-39085]:IfStatement[38960-39085]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38984-39085]:Block[38984-39085]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[39010-39025]:ExpressionStatement[39010-39025]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[39050-39063]:ReturnStatement[39050-39063]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[39130-39142]:ReturnStatement[39130-39142]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[39242-39249]:PrimitiveType[39242-39249]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[39250-39257]:SimpleName[39250-39257]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[39258-39265]:SingleVariableDeclaration[39258-39265]"
    }, {
      "left" : "HtmlTreeBuilder tb",
      "right" : "HtmlTreeBuilder tb",
      "info" : "SingleVariableDeclaration[39267-39285]:SingleVariableDeclaration[39267-39285]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39287-39888]:Block[39287-39888]"
    }, {
      "left" : "if (t.isCharacter())",
      "right" : "if (t.isCharacter())",
      "info" : "IfStatement[39301-39853]:IfStatement[39301-39853]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39322-39381]:Block[39322-39381]"
    }, {
      "left" : "tb.insert(t.asCharacter());",
      "right" : "tb.insert(t.asCharacter());",
      "info" : "ExpressionStatement[39340-39367]:ExpressionStatement[39340-39367]"
    }, {
      "left" : "if (t.isEOF())",
      "right" : "if (t.isEOF())",
      "info" : "IfStatement[39387-39853]:IfStatement[39387-39853]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39402-39626]:Block[39402-39626]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[39420-39435]:ExpressionStatement[39420-39435]"
    }, {
      "left" : "tb.pop();",
      "right" : "tb.pop();",
      "info" : "ExpressionStatement[39514-39523]:ExpressionStatement[39514-39523]"
    }, {
      "left" : "tb.transition(tb.originalState());",
      "right" : "tb.transition(tb.originalState());",
      "info" : "ExpressionStatement[39540-39574]:ExpressionStatement[39540-39574]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[39591-39612]:ReturnStatement[39591-39612]"
    }, {
      "left" : "if (t.isEndTag())",
      "right" : "if (t.isEndTag())",
      "info" : "IfStatement[39632-39853]:IfStatement[39632-39853]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39650-39853]:Block[39650-39853]"
    }, {
      "left" : "tb.pop();",
      "right" : "tb.pop();",
      "info" : "ExpressionStatement[39779-39788]:ExpressionStatement[39779-39788]"
    }, {
      "left" : "tb.transition(tb.originalState());",
      "right" : "tb.transition(tb.originalState());",
      "info" : "ExpressionStatement[39805-39839]:ExpressionStatement[39805-39839]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[39866-39878]:ReturnStatement[39866-39878]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[39918-39925]:PrimitiveType[39918-39925]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[39926-39933]:SimpleName[39926-39933]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[39934-39941]:SingleVariableDeclaration[39934-39941]"
    }, {
      "left" : "HtmlTreeBuilder tb",
      "right" : "HtmlTreeBuilder tb",
      "info" : "SingleVariableDeclaration[39943-39961]:SingleVariableDeclaration[39943-39961]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39963-43807]:Block[39963-43807]"
    }, {
      "left" : "if (t.isCharacter())",
      "right" : "if (t.isCharacter())",
      "info" : "IfStatement[39977-43757]:IfStatement[39977-43757]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39998-40183]:Block[39998-40183]"
    }, {
      "left" : "tb.newPendingTableCharacters();",
      "right" : "tb.newPendingTableCharacters();",
      "info" : "ExpressionStatement[40016-40047]:ExpressionStatement[40016-40047]"
    }, {
      "left" : "tb.markInsertionMode();",
      "right" : "tb.markInsertionMode();",
      "info" : "ExpressionStatement[40064-40087]:ExpressionStatement[40064-40087]"
    }, {
      "left" : "tb.transition(InTableText);",
      "right" : "tb.transition(InTableText);",
      "info" : "ExpressionStatement[40104-40131]:ExpressionStatement[40104-40131]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[40148-40169]:ReturnStatement[40148-40169]"
    }, {
      "left" : "if (t.isComment())",
      "right" : "if (t.isComment())",
      "info" : "IfStatement[40189-43757]:IfStatement[40189-43757]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40208-40294]:Block[40208-40294]"
    }, {
      "left" : "tb.insert(t.asComment());",
      "right" : "tb.insert(t.asComment());",
      "info" : "ExpressionStatement[40226-40251]:ExpressionStatement[40226-40251]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[40268-40280]:ReturnStatement[40268-40280]"
    }, {
      "left" : "if (t.isDoctype())",
      "right" : "if (t.isDoctype())",
      "info" : "IfStatement[40300-43757]:IfStatement[40300-43757]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40319-40396]:Block[40319-40396]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[40337-40352]:ExpressionStatement[40337-40352]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[40369-40382]:ReturnStatement[40369-40382]"
    }, {
      "left" : "if (t.isStartTag())",
      "right" : "if (t.isStartTag())",
      "info" : "IfStatement[40402-43757]:IfStatement[40402-43757]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40422-42730]:Block[40422-42730]"
    }, {
      "left" : "Token.StartTag startTag = t.asStartTag();",
      "right" : "Token.StartTag startTag = t.asStartTag();",
      "info" : "VariableDeclarationStatement[40440-40481]:VariableDeclarationStatement[40440-40481]"
    }, {
      "left" : "String name = startTag.normalName();",
      "right" : "String name = startTag.normalName();",
      "info" : "VariableDeclarationStatement[40498-40534]:VariableDeclarationStatement[40498-40534]"
    }, {
      "left" : "if (name.equals(\"caption\"))",
      "right" : "if (name.equals(\"caption\"))",
      "info" : "IfStatement[40551-42541]:IfStatement[40551-42541]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40579-40795]:Block[40579-40795]"
    }, {
      "left" : "tb.clearStackToTableContext();",
      "right" : "tb.clearStackToTableContext();",
      "info" : "ExpressionStatement[40601-40631]:ExpressionStatement[40601-40631]"
    }, {
      "left" : "tb.insertMarkerToFormattingElements();",
      "right" : "tb.insertMarkerToFormattingElements();",
      "info" : "ExpressionStatement[40652-40690]:ExpressionStatement[40652-40690]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[40711-40731]:ExpressionStatement[40711-40731]"
    }, {
      "left" : "tb.transition(InCaption);",
      "right" : "tb.transition(InCaption);",
      "info" : "ExpressionStatement[40752-40777]:ExpressionStatement[40752-40777]"
    }, {
      "left" : "if (name.equals(\"colgroup\"))",
      "right" : "if (name.equals(\"colgroup\"))",
      "info" : "IfStatement[40801-42541]:IfStatement[40801-42541]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40830-40991]:Block[40830-40991]"
    }, {
      "left" : "tb.clearStackToTableContext();",
      "right" : "tb.clearStackToTableContext();",
      "info" : "ExpressionStatement[40852-40882]:ExpressionStatement[40852-40882]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[40903-40923]:ExpressionStatement[40903-40923]"
    }, {
      "left" : "tb.transition(InColumnGroup);",
      "right" : "tb.transition(InColumnGroup);",
      "info" : "ExpressionStatement[40944-40973]:ExpressionStatement[40944-40973]"
    }, {
      "left" : "if (name.equals(\"col\"))",
      "right" : "if (name.equals(\"col\"))",
      "info" : "IfStatement[40997-42541]:IfStatement[40997-42541]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41021-41134]:Block[41021-41134]"
    }, {
      "left" : "tb.processStartTag(\"colgroup\");",
      "right" : "tb.processStartTag(\"colgroup\");",
      "info" : "ExpressionStatement[41043-41074]:ExpressionStatement[41043-41074]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[41095-41116]:ReturnStatement[41095-41116]"
    }, {
      "left" : "if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\"))",
      "right" : "if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\"))",
      "info" : "IfStatement[41140-42541]:IfStatement[41140-42541]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41192-41351]:Block[41192-41351]"
    }, {
      "left" : "tb.clearStackToTableContext();",
      "right" : "tb.clearStackToTableContext();",
      "info" : "ExpressionStatement[41214-41244]:ExpressionStatement[41214-41244]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[41265-41285]:ExpressionStatement[41265-41285]"
    }, {
      "left" : "tb.transition(InTableBody);",
      "right" : "tb.transition(InTableBody);",
      "info" : "ExpressionStatement[41306-41333]:ExpressionStatement[41306-41333]"
    }, {
      "left" : "if (StringUtil.in(name, \"td\", \"th\", \"tr\"))",
      "right" : "if (StringUtil.in(name, \"td\", \"th\", \"tr\"))",
      "info" : "IfStatement[41357-42541]:IfStatement[41357-42541]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41400-41510]:Block[41400-41510]"
    }, {
      "left" : "tb.processStartTag(\"tbody\");",
      "right" : "tb.processStartTag(\"tbody\");",
      "info" : "ExpressionStatement[41422-41450]:ExpressionStatement[41422-41450]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[41471-41492]:ReturnStatement[41471-41492]"
    }, {
      "left" : "if (name.equals(\"table\"))",
      "right" : "if (name.equals(\"table\"))",
      "info" : "IfStatement[41516-42541]:IfStatement[41516-42541]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41542-41776]:Block[41542-41776]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[41564-41579]:ExpressionStatement[41564-41579]"
    }, {
      "left" : "boolean processed = tb.processEndTag(\"table\");",
      "right" : "boolean processed = tb.processEndTag(\"table\");",
      "info" : "VariableDeclarationStatement[41600-41646]:VariableDeclarationStatement[41600-41646]"
    }, {
      "left" : "if (processed)",
      "right" : "if (processed)",
      "info" : "IfStatement[41667-41758]:IfStatement[41667-41758]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[41737-41758]:ReturnStatement[41737-41758]"
    }, {
      "left" : "if (StringUtil.in(name, \"style\", \"script\"))",
      "right" : "if (StringUtil.in(name, \"style\", \"script\"))",
      "info" : "IfStatement[41782-42541]:IfStatement[41782-42541]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41826-41895]:Block[41826-41895]"
    }, {
      "left" : "return tb.process(t, InHead);",
      "right" : "return tb.process(t, InHead);",
      "info" : "ReturnStatement[41848-41877]:ReturnStatement[41848-41877]"
    }, {
      "left" : "if (name.equals(\"input\"))",
      "right" : "if (name.equals(\"input\"))",
      "info" : "IfStatement[41901-42541]:IfStatement[41901-42541]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41927-42186]:Block[41927-42186]"
    }, {
      "left" : "if (!startTag.attributes.get(\"type\").equalsIgnoreCase(\"hidden\"))",
      "right" : "if (!startTag.attributes.get(\"type\").equalsIgnoreCase(\"hidden\"))",
      "info" : "IfStatement[41949-42168]:IfStatement[41949-42168]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42014-42089]:Block[42014-42089]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[42040-42067]:ReturnStatement[42040-42067]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42095-42168]:Block[42095-42168]"
    }, {
      "left" : "tb.insertEmpty(startTag);",
      "right" : "tb.insertEmpty(startTag);",
      "info" : "ExpressionStatement[42121-42146]:ExpressionStatement[42121-42146]"
    }, {
      "left" : "if (name.equals(\"form\"))",
      "right" : "if (name.equals(\"form\"))",
      "info" : "IfStatement[42192-42541]:IfStatement[42192-42541]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42217-42468]:Block[42217-42468]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[42239-42254]:ExpressionStatement[42239-42254]"
    }, {
      "left" : "if (tb.getFormElement() != null)",
      "right" : "if (tb.getFormElement() != null)",
      "info" : "IfStatement[42275-42450]:IfStatement[42275-42450]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[42332-42345]:ReturnStatement[42332-42345]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42371-42450]:Block[42371-42450]"
    }, {
      "left" : "tb.insertForm(startTag, false);",
      "right" : "tb.insertForm(startTag, false);",
      "info" : "ExpressionStatement[42397-42428]:ExpressionStatement[42397-42428]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42474-42541]:Block[42474-42541]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[42496-42523]:ReturnStatement[42496-42523]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[42558-42570]:ReturnStatement[42558-42570]"
    }, {
      "left" : "if (t.isEndTag())",
      "right" : "if (t.isEndTag())",
      "info" : "IfStatement[42736-43757]:IfStatement[42736-43757]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42754-43572]:Block[42754-43572]"
    }, {
      "left" : "Token.EndTag endTag = t.asEndTag();",
      "right" : "Token.EndTag endTag = t.asEndTag();",
      "info" : "VariableDeclarationStatement[42772-42807]:VariableDeclarationStatement[42772-42807]"
    }, {
      "left" : "String name = endTag.normalName();",
      "right" : "String name = endTag.normalName();",
      "info" : "VariableDeclarationStatement[42824-42858]:VariableDeclarationStatement[42824-42858]"
    }, {
      "left" : "if (name.equals(\"table\"))",
      "right" : "if (name.equals(\"table\"))",
      "info" : "IfStatement[42876-43506]:IfStatement[42876-43506]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42902-43198]:Block[42902-43198]"
    }, {
      "left" : "if (!tb.inTableScope(name))",
      "right" : "if (!tb.inTableScope(name))",
      "info" : "IfStatement[42924-43135]:IfStatement[42924-43135]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42952-43053]:Block[42952-43053]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[42978-42993]:ExpressionStatement[42978-42993]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[43018-43031]:ReturnStatement[43018-43031]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43059-43135]:Block[43059-43135]"
    }, {
      "left" : "tb.popStackToClose(\"table\");",
      "right" : "tb.popStackToClose(\"table\");",
      "info" : "ExpressionStatement[43085-43113]:ExpressionStatement[43085-43113]"
    }, {
      "left" : "tb.resetInsertionMode();",
      "right" : "tb.resetInsertionMode();",
      "info" : "ExpressionStatement[43156-43180]:ExpressionStatement[43156-43180]"
    }, {
      "left" : "if (StringUtil.in(name,\n                        \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"))",
      "right" : "if (StringUtil.in(name,\n                        \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"))",
      "info" : "IfStatement[43204-43506]:IfStatement[43204-43506]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43344-43433]:Block[43344-43433]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[43366-43381]:ExpressionStatement[43366-43381]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[43402-43415]:ReturnStatement[43402-43415]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43439-43506]:Block[43439-43506]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[43461-43488]:ReturnStatement[43461-43488]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[43523-43535]:ReturnStatement[43523-43535]"
    }, {
      "left" : "if (t.isEOF())",
      "right" : "if (t.isEOF())",
      "info" : "IfStatement[43578-43757]:IfStatement[43578-43757]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43593-43757]:Block[43593-43757]"
    }, {
      "left" : "if (tb.currentElement().nodeName().equals(\"html\"))",
      "right" : "if (tb.currentElement().nodeName().equals(\"html\"))",
      "info" : "IfStatement[43611-43697]:IfStatement[43611-43697]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[43682-43697]:ExpressionStatement[43682-43697]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[43714-43726]:ReturnStatement[43714-43726]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[43770-43797]:ReturnStatement[43770-43797]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[43817-43824]:PrimitiveType[43817-43824]"
    }, {
      "left" : "anythingElse",
      "right" : "anythingElse",
      "info" : "SimpleName[43825-43837]:SimpleName[43825-43837]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[43838-43845]:SingleVariableDeclaration[43838-43845]"
    }, {
      "left" : "HtmlTreeBuilder tb",
      "right" : "HtmlTreeBuilder tb",
      "info" : "SingleVariableDeclaration[43847-43865]:SingleVariableDeclaration[43847-43865]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43867-44298]:Block[43867-44298]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[43881-43896]:ExpressionStatement[43881-43896]"
    }, {
      "left" : "boolean processed;",
      "right" : "boolean processed;",
      "info" : "VariableDeclarationStatement[43909-43927]:VariableDeclarationStatement[43909-43927]"
    }, {
      "left" : "if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"))",
      "right" : "if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"))",
      "info" : "IfStatement[43940-44258]:IfStatement[43940-44258]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44033-44186]:Block[44033-44186]"
    }, {
      "left" : "tb.setFosterInserts(true);",
      "right" : "tb.setFosterInserts(true);",
      "info" : "ExpressionStatement[44051-44077]:ExpressionStatement[44051-44077]"
    }, {
      "left" : "processed = tb.process(t, InBody);",
      "right" : "processed = tb.process(t, InBody);",
      "info" : "ExpressionStatement[44094-44128]:ExpressionStatement[44094-44128]"
    }, {
      "left" : "tb.setFosterInserts(false);",
      "right" : "tb.setFosterInserts(false);",
      "info" : "ExpressionStatement[44145-44172]:ExpressionStatement[44145-44172]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44192-44258]:Block[44192-44258]"
    }, {
      "left" : "processed = tb.process(t, InBody);",
      "right" : "processed = tb.process(t, InBody);",
      "info" : "ExpressionStatement[44210-44244]:ExpressionStatement[44210-44244]"
    }, {
      "left" : "return processed;",
      "right" : "return processed;",
      "info" : "ReturnStatement[44271-44288]:ReturnStatement[44271-44288]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[44332-44339]:PrimitiveType[44332-44339]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[44340-44347]:SimpleName[44340-44347]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[44348-44355]:SingleVariableDeclaration[44348-44355]"
    }, {
      "left" : "HtmlTreeBuilder tb",
      "right" : "HtmlTreeBuilder tb",
      "info" : "SingleVariableDeclaration[44357-44375]:SingleVariableDeclaration[44357-44375]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44377-46119]:Block[44377-46119]"
    }, {
      "left" : "switch (t.type) {\n                case Character:\n                    Token.Character c = t.asCharacter();\n                    if (c.getData().equals(nullString)) {\n                        tb.error(this);\n                        return false;\n                    } else {\n                        tb.getPendingTableCharacters().add(c.getData());\n                    }\n                    break;\n                default:\n                    // todo - don't really like the way these table character data lists are built\n                    if (tb.getPendingTableCharacters().size() > 0) {\n                        for (String character : tb.getPendingTableCharacters()) {\n                            if (!isWhitespace(character)) {\n                                // InTable anything else section:\n                                tb.error(this);\n                                if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) {\n                                    tb.setFosterInserts(true);\n                                    tb.process(new Token.Character().data(character), InBody);\n                                    tb.setFosterInserts(false);\n                                } else {\n                                    tb.process(new Token.Character().data(character), InBody);\n                                }\n                            } else\n                                tb.insert(new Token.Character().data(character));\n                        }\n                        tb.newPendingTableCharacters();\n                    }\n                    tb.transition(tb.originalState());\n                    return tb.process(t);\n            }",
      "right" : "switch (t.type) {\n                case Character:\n                    Token.Character c = t.asCharacter();\n                    if (c.getData().equals(nullString)) {\n                        tb.error(this);\n                        return false;\n                    } else {\n                        tb.getPendingTableCharacters().add(c.getData());\n                    }\n                    break;\n                default:\n                    // todo - don't really like the way these table character data lists are built\n                    if (tb.getPendingTableCharacters().size() > 0) {\n                        for (String character : tb.getPendingTableCharacters()) {\n                            if (!isWhitespace(character)) {\n                                // InTable anything else section:\n                                tb.error(this);\n                                if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) {\n                                    tb.setFosterInserts(true);\n                                    tb.process(new Token.Character().data(character), InBody);\n                                    tb.setFosterInserts(false);\n                                } else {\n                                    tb.process(new Token.Character().data(character), InBody);\n                                }\n                            } else\n                                tb.insert(new Token.Character().data(character));\n                        }\n                        tb.newPendingTableCharacters();\n                    }\n                    tb.transition(tb.originalState());\n                    return tb.process(t);\n            }",
      "info" : "SwitchStatement[44391-46084]:SwitchStatement[44391-46084]"
    }, {
      "left" : "case Character:",
      "right" : "case Character:",
      "info" : "SwitchCase[44425-44440]:SwitchCase[44425-44440]"
    }, {
      "left" : "Token.Character c = t.asCharacter();",
      "right" : "Token.Character c = t.asCharacter();",
      "info" : "VariableDeclarationStatement[44461-44497]:VariableDeclarationStatement[44461-44497]"
    }, {
      "left" : "if (c.getData().equals(nullString))",
      "right" : "if (c.getData().equals(nullString))",
      "info" : "IfStatement[44518-44757]:IfStatement[44518-44757]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44554-44655]:Block[44554-44655]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[44580-44595]:ExpressionStatement[44580-44595]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[44620-44633]:ReturnStatement[44620-44633]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44661-44757]:Block[44661-44757]"
    }, {
      "left" : "tb.getPendingTableCharacters().add(c.getData());",
      "right" : "tb.getPendingTableCharacters().add(c.getData());",
      "info" : "ExpressionStatement[44687-44735]:ExpressionStatement[44687-44735]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[44778-44784]:BreakStatement[44778-44784]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[44801-44809]:SwitchCase[44801-44809]"
    }, {
      "left" : "if (tb.getPendingTableCharacters().size() > 0)",
      "right" : "if (tb.getPendingTableCharacters().size() > 0)",
      "info" : "IfStatement[44929-45973]:IfStatement[44929-45973]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44976-45973]:Block[44976-45973]"
    }, {
      "left" : "for (String character : tb.getPendingTableCharacters())",
      "right" : "for (String character : tb.getPendingTableCharacters())",
      "info" : "EnhancedForStatement[45002-45895]:EnhancedForStatement[45002-45895]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45058-45895]:Block[45058-45895]"
    }, {
      "left" : "if (!isWhitespace(character))",
      "right" : "if (!isWhitespace(character))",
      "info" : "IfStatement[45088-45869]:IfStatement[45088-45869]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45118-45782]:Block[45118-45782]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[45218-45233]:ExpressionStatement[45218-45233]"
    }, {
      "left" : "if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"))",
      "right" : "if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"))",
      "info" : "IfStatement[45266-45752]:IfStatement[45266-45752]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45359-45616]:Block[45359-45616]"
    }, {
      "left" : "tb.setFosterInserts(true);",
      "right" : "tb.setFosterInserts(true);",
      "info" : "ExpressionStatement[45397-45423]:ExpressionStatement[45397-45423]"
    }, {
      "left" : "tb.process(new Token.Character().data(character), InBody);",
      "right" : "tb.process(new Token.Character().data(character), InBody);",
      "info" : "ExpressionStatement[45460-45518]:ExpressionStatement[45460-45518]"
    }, {
      "left" : "tb.setFosterInserts(false);",
      "right" : "tb.setFosterInserts(false);",
      "info" : "ExpressionStatement[45555-45582]:ExpressionStatement[45555-45582]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45622-45752]:Block[45622-45752]"
    }, {
      "left" : "tb.process(new Token.Character().data(character), InBody);",
      "right" : "tb.process(new Token.Character().data(character), InBody);",
      "info" : "ExpressionStatement[45660-45718]:ExpressionStatement[45660-45718]"
    }, {
      "left" : "tb.insert(new Token.Character().data(character));",
      "right" : "tb.insert(new Token.Character().data(character));",
      "info" : "ExpressionStatement[45820-45869]:ExpressionStatement[45820-45869]"
    }, {
      "left" : "tb.newPendingTableCharacters();",
      "right" : "tb.newPendingTableCharacters();",
      "info" : "ExpressionStatement[45920-45951]:ExpressionStatement[45920-45951]"
    }, {
      "left" : "tb.transition(tb.originalState());",
      "right" : "tb.transition(tb.originalState());",
      "info" : "ExpressionStatement[45994-46028]:ExpressionStatement[45994-46028]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[46049-46070]:ReturnStatement[46049-46070]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[46097-46109]:ReturnStatement[46097-46109]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[46151-46158]:PrimitiveType[46151-46158]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[46159-46166]:SimpleName[46159-46166]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[46167-46174]:SingleVariableDeclaration[46167-46174]"
    }, {
      "left" : "HtmlTreeBuilder tb",
      "right" : "HtmlTreeBuilder tb",
      "info" : "SingleVariableDeclaration[46176-46194]:SingleVariableDeclaration[46176-46194]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46196-47713]:Block[46196-47713]"
    }, {
      "left" : "if (t.isEndTag() && t.asEndTag().normalName().equals(\"caption\"))",
      "right" : "if (t.isEndTag() && t.asEndTag().normalName().equals(\"caption\"))",
      "info" : "IfStatement[46210-47678]:IfStatement[46210-47678]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46275-46873]:Block[46275-46873]"
    }, {
      "left" : "Token.EndTag endTag = t.asEndTag();",
      "right" : "Token.EndTag endTag = t.asEndTag();",
      "info" : "VariableDeclarationStatement[46293-46328]:VariableDeclarationStatement[46293-46328]"
    }, {
      "left" : "String name = endTag.normalName();",
      "right" : "String name = endTag.normalName();",
      "info" : "VariableDeclarationStatement[46345-46379]:VariableDeclarationStatement[46345-46379]"
    }, {
      "left" : "if (!tb.inTableScope(name))",
      "right" : "if (!tb.inTableScope(name))",
      "info" : "IfStatement[46396-46859]:IfStatement[46396-46859]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46424-46513]:Block[46424-46513]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[46446-46461]:ExpressionStatement[46446-46461]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[46482-46495]:ReturnStatement[46482-46495]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46519-46859]:Block[46519-46859]"
    }, {
      "left" : "tb.generateImpliedEndTags();",
      "right" : "tb.generateImpliedEndTags();",
      "info" : "ExpressionStatement[46541-46569]:ExpressionStatement[46541-46569]"
    }, {
      "left" : "if (!tb.currentElement().nodeName().equals(\"caption\"))",
      "right" : "if (!tb.currentElement().nodeName().equals(\"caption\"))",
      "info" : "IfStatement[46590-46684]:IfStatement[46590-46684]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[46669-46684]:ExpressionStatement[46669-46684]"
    }, {
      "left" : "tb.popStackToClose(\"caption\");",
      "right" : "tb.popStackToClose(\"caption\");",
      "info" : "ExpressionStatement[46705-46735]:ExpressionStatement[46705-46735]"
    }, {
      "left" : "tb.clearFormattingElementsToLastMarker();",
      "right" : "tb.clearFormattingElementsToLastMarker();",
      "info" : "ExpressionStatement[46756-46797]:ExpressionStatement[46756-46797]"
    }, {
      "left" : "tb.transition(InTable);",
      "right" : "tb.transition(InTable);",
      "info" : "ExpressionStatement[46818-46841]:ExpressionStatement[46818-46841]"
    }, {
      "left" : "if ((\n                    t.isStartTag() && StringUtil.in(t.asStartTag().normalName(),\n                            \"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\") ||\n                            t.isEndTag() && t.asEndTag().normalName().equals(\"table\")))",
      "right" : "if ((\n                    t.isStartTag() && StringUtil.in(t.asStartTag().normalName(),\n                            \"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\") ||\n                            t.isEndTag() && t.asEndTag().normalName().equals(\"table\")))",
      "info" : "IfStatement[46879-47678]:IfStatement[46879-47678]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47181-47366]:Block[47181-47366]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[47199-47214]:ExpressionStatement[47199-47214]"
    }, {
      "left" : "boolean processed = tb.processEndTag(\"caption\");",
      "right" : "boolean processed = tb.processEndTag(\"caption\");",
      "info" : "VariableDeclarationStatement[47231-47279]:VariableDeclarationStatement[47231-47279]"
    }, {
      "left" : "if (processed)",
      "right" : "if (processed)",
      "info" : "IfStatement[47296-47352]:IfStatement[47296-47352]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[47331-47352]:ReturnStatement[47331-47352]"
    }, {
      "left" : "if (t.isEndTag() && StringUtil.in(t.asEndTag().normalName(),\n                    \"body\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"))",
      "right" : "if (t.isEndTag() && StringUtil.in(t.asEndTag().normalName(),\n                    \"body\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"))",
      "info" : "IfStatement[47372-47678]:IfStatement[47372-47678]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47534-47611]:Block[47534-47611]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[47552-47567]:ExpressionStatement[47552-47567]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[47584-47597]:ReturnStatement[47584-47597]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47617-47678]:Block[47617-47678]"
    }, {
      "left" : "return tb.process(t, InBody);",
      "right" : "return tb.process(t, InBody);",
      "info" : "ReturnStatement[47635-47664]:ReturnStatement[47635-47664]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[47691-47703]:ReturnStatement[47691-47703]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[47749-47756]:PrimitiveType[47749-47756]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[47757-47764]:SimpleName[47757-47764]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[47765-47772]:SingleVariableDeclaration[47765-47772]"
    }, {
      "left" : "HtmlTreeBuilder tb",
      "right" : "HtmlTreeBuilder tb",
      "info" : "SingleVariableDeclaration[47774-47792]:SingleVariableDeclaration[47774-47792]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47794-49587]:Block[47794-49587]"
    }, {
      "left" : "if (isWhitespace(t))",
      "right" : "if (isWhitespace(t))",
      "info" : "IfStatement[47808-47917]:IfStatement[47808-47917]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47829-47917]:Block[47829-47917]"
    }, {
      "left" : "tb.insert(t.asCharacter());",
      "right" : "tb.insert(t.asCharacter());",
      "info" : "ExpressionStatement[47847-47874]:ExpressionStatement[47847-47874]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[47891-47903]:ReturnStatement[47891-47903]"
    }, {
      "left" : "switch (t.type) {\n                case Comment:\n                    tb.insert(t.asComment());\n                    break;\n                case Doctype:\n                    tb.error(this);\n                    break;\n                case StartTag:\n                    Token.StartTag startTag = t.asStartTag();\n                    switch (startTag.normalName()) {\n                        case \"html\":\n                            return tb.process(t, InBody);\n                        case \"col\":\n                            tb.insertEmpty(startTag);\n                            break;\n                        default:\n                            return anythingElse(t, tb);\n                    }\n                    break;\n                case EndTag:\n                    Token.EndTag endTag = t.asEndTag();\n                    if (endTag.normalName.equals(\"colgroup\")) {\n                        if (tb.currentElement().nodeName().equals(\"html\")) { // frag case\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.pop();\n                            tb.transition(InTable);\n                        }\n                    } else\n                        return anythingElse(t, tb);\n                    break;\n                case EOF:\n                    if (tb.currentElement().nodeName().equals(\"html\"))\n                        return true; // stop parsing; frag case\n                    else\n                        return anythingElse(t, tb);\n                default:\n                    return anythingElse(t, tb);\n            }",
      "right" : "switch (t.type) {\n                case Comment:\n                    tb.insert(t.asComment());\n                    break;\n                case Doctype:\n                    tb.error(this);\n                    break;\n                case StartTag:\n                    Token.StartTag startTag = t.asStartTag();\n                    switch (startTag.normalName()) {\n                        case \"html\":\n                            return tb.process(t, InBody);\n                        case \"col\":\n                            tb.insertEmpty(startTag);\n                            break;\n                        default:\n                            return anythingElse(t, tb);\n                    }\n                    break;\n                case EndTag:\n                    Token.EndTag endTag = t.asEndTag();\n                    if (endTag.normalName.equals(\"colgroup\")) {\n                        if (tb.currentElement().nodeName().equals(\"html\")) { // frag case\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.pop();\n                            tb.transition(InTable);\n                        }\n                    } else\n                        return anythingElse(t, tb);\n                    break;\n                case EOF:\n                    if (tb.currentElement().nodeName().equals(\"html\"))\n                        return true; // stop parsing; frag case\n                    else\n                        return anythingElse(t, tb);\n                default:\n                    return anythingElse(t, tb);\n            }",
      "info" : "SwitchStatement[47930-49552]:SwitchStatement[47930-49552]"
    }, {
      "left" : "case Comment:",
      "right" : "case Comment:",
      "info" : "SwitchCase[47964-47977]:SwitchCase[47964-47977]"
    }, {
      "left" : "tb.insert(t.asComment());",
      "right" : "tb.insert(t.asComment());",
      "info" : "ExpressionStatement[47998-48023]:ExpressionStatement[47998-48023]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[48044-48050]:BreakStatement[48044-48050]"
    }, {
      "left" : "case Doctype:",
      "right" : "case Doctype:",
      "info" : "SwitchCase[48067-48080]:SwitchCase[48067-48080]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[48101-48116]:ExpressionStatement[48101-48116]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[48137-48143]:BreakStatement[48137-48143]"
    }, {
      "left" : "case StartTag:",
      "right" : "case StartTag:",
      "info" : "SwitchCase[48160-48174]:SwitchCase[48160-48174]"
    }, {
      "left" : "Token.StartTag startTag = t.asStartTag();",
      "right" : "Token.StartTag startTag = t.asStartTag();",
      "info" : "VariableDeclarationStatement[48195-48236]:VariableDeclarationStatement[48195-48236]"
    }, {
      "left" : "switch (startTag.normalName()) {\n                        case \"html\":\n                            return tb.process(t, InBody);\n                        case \"col\":\n                            tb.insertEmpty(startTag);\n                            break;\n                        default:\n                            return anythingElse(t, tb);\n                    }",
      "right" : "switch (startTag.normalName()) {\n                        case \"html\":\n                            return tb.process(t, InBody);\n                        case \"col\":\n                            tb.insertEmpty(startTag);\n                            break;\n                        default:\n                            return anythingElse(t, tb);\n                    }",
      "info" : "SwitchStatement[48257-48620]:SwitchStatement[48257-48620]"
    }, {
      "left" : "case \"html\":",
      "right" : "case \"html\":",
      "info" : "SwitchCase[48314-48326]:SwitchCase[48314-48326]"
    }, {
      "left" : "return tb.process(t, InBody);",
      "right" : "return tb.process(t, InBody);",
      "info" : "ReturnStatement[48355-48384]:ReturnStatement[48355-48384]"
    }, {
      "left" : "case \"col\":",
      "right" : "case \"col\":",
      "info" : "SwitchCase[48409-48420]:SwitchCase[48409-48420]"
    }, {
      "left" : "tb.insertEmpty(startTag);",
      "right" : "tb.insertEmpty(startTag);",
      "info" : "ExpressionStatement[48449-48474]:ExpressionStatement[48449-48474]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[48503-48509]:BreakStatement[48503-48509]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[48534-48542]:SwitchCase[48534-48542]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[48571-48598]:ReturnStatement[48571-48598]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[48641-48647]:BreakStatement[48641-48647]"
    }, {
      "left" : "case EndTag:",
      "right" : "case EndTag:",
      "info" : "SwitchCase[48664-48676]:SwitchCase[48664-48676]"
    }, {
      "left" : "Token.EndTag endTag = t.asEndTag();",
      "right" : "Token.EndTag endTag = t.asEndTag();",
      "info" : "VariableDeclarationStatement[48697-48732]:VariableDeclarationStatement[48697-48732]"
    }, {
      "left" : "if (endTag.normalName.equals(\"colgroup\"))",
      "right" : "if (endTag.normalName.equals(\"colgroup\"))",
      "info" : "IfStatement[48753-49200]:IfStatement[48753-49200]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48795-49143]:Block[48795-49143]"
    }, {
      "left" : "if (tb.currentElement().nodeName().equals(\"html\"))",
      "right" : "if (tb.currentElement().nodeName().equals(\"html\"))",
      "info" : "IfStatement[48821-49121]:IfStatement[48821-49121]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48872-48998]:Block[48872-48998]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[48915-48930]:ExpressionStatement[48915-48930]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[48959-48972]:ReturnStatement[48959-48972]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49004-49121]:Block[49004-49121]"
    }, {
      "left" : "tb.pop();",
      "right" : "tb.pop();",
      "info" : "ExpressionStatement[49034-49043]:ExpressionStatement[49034-49043]"
    }, {
      "left" : "tb.transition(InTable);",
      "right" : "tb.transition(InTable);",
      "info" : "ExpressionStatement[49072-49095]:ExpressionStatement[49072-49095]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[49173-49200]:ReturnStatement[49173-49200]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[49221-49227]:BreakStatement[49221-49227]"
    }, {
      "left" : "case EOF:",
      "right" : "case EOF:",
      "info" : "SwitchCase[49244-49253]:SwitchCase[49244-49253]"
    }, {
      "left" : "if (tb.currentElement().nodeName().equals(\"html\"))",
      "right" : "if (tb.currentElement().nodeName().equals(\"html\"))",
      "info" : "IfStatement[49274-49465]:IfStatement[49274-49465]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[49349-49361]:ReturnStatement[49349-49361]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[49438-49465]:ReturnStatement[49438-49465]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[49482-49490]:SwitchCase[49482-49490]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[49511-49538]:ReturnStatement[49511-49538]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[49565-49577]:ReturnStatement[49565-49577]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[49597-49604]:Modifier[49597-49604]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[49605-49612]:PrimitiveType[49605-49612]"
    }, {
      "left" : "anythingElse",
      "right" : "anythingElse",
      "info" : "SimpleName[49613-49625]:SimpleName[49613-49625]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[49626-49633]:SingleVariableDeclaration[49626-49633]"
    }, {
      "left" : "TreeBuilder tb",
      "right" : "TreeBuilder tb",
      "info" : "SingleVariableDeclaration[49635-49649]:SingleVariableDeclaration[49635-49649]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49651-49843]:Block[49651-49843]"
    }, {
      "left" : "boolean processed = tb.processEndTag(\"colgroup\");",
      "right" : "boolean processed = tb.processEndTag(\"colgroup\");",
      "info" : "VariableDeclarationStatement[49665-49714]:VariableDeclarationStatement[49665-49714]"
    }, {
      "left" : "if (processed)",
      "right" : "if (processed)",
      "info" : "IfStatement[49727-49808]:IfStatement[49727-49808]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[49787-49808]:ReturnStatement[49787-49808]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[49821-49833]:ReturnStatement[49821-49833]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[49877-49884]:PrimitiveType[49877-49884]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[49885-49892]:SimpleName[49885-49892]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[49893-49900]:SingleVariableDeclaration[49893-49900]"
    }, {
      "left" : "HtmlTreeBuilder tb",
      "right" : "HtmlTreeBuilder tb",
      "info" : "SingleVariableDeclaration[49902-49920]:SingleVariableDeclaration[49902-49920]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49922-51868]:Block[49922-51868]"
    }, {
      "left" : "switch (t.type) {\n                case StartTag:\n                    Token.StartTag startTag = t.asStartTag();\n                    String name = startTag.normalName();\n                    if (name.equals(\"tr\")) {\n                        tb.clearStackToTableBodyContext();\n                        tb.insert(startTag);\n                        tb.transition(InRow);\n                    } else if (StringUtil.in(name, \"th\", \"td\")) {\n                        tb.error(this);\n                        tb.processStartTag(\"tr\");\n                        return tb.process(startTag);\n                    } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) {\n                        return exitTableBody(t, tb);\n                    } else\n                        return anythingElse(t, tb);\n                    break;\n                case EndTag:\n                    Token.EndTag endTag = t.asEndTag();\n                    name = endTag.normalName();\n                    if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n                        if (!tb.inTableScope(name)) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.clearStackToTableBodyContext();\n                            tb.pop();\n                            tb.transition(InTable);\n                        }\n                    } else if (name.equals(\"table\")) {\n                        return exitTableBody(t, tb);\n                    } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) {\n                        tb.error(this);\n                        return false;\n                    } else\n                        return anythingElse(t, tb);\n                    break;\n                default:\n                    return anythingElse(t, tb);\n            }",
      "right" : "switch (t.type) {\n                case StartTag:\n                    Token.StartTag startTag = t.asStartTag();\n                    String name = startTag.normalName();\n                    if (name.equals(\"tr\")) {\n                        tb.clearStackToTableBodyContext();\n                        tb.insert(startTag);\n                        tb.transition(InRow);\n                    } else if (StringUtil.in(name, \"th\", \"td\")) {\n                        tb.error(this);\n                        tb.processStartTag(\"tr\");\n                        return tb.process(startTag);\n                    } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) {\n                        return exitTableBody(t, tb);\n                    } else\n                        return anythingElse(t, tb);\n                    break;\n                case EndTag:\n                    Token.EndTag endTag = t.asEndTag();\n                    name = endTag.normalName();\n                    if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n                        if (!tb.inTableScope(name)) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.clearStackToTableBodyContext();\n                            tb.pop();\n                            tb.transition(InTable);\n                        }\n                    } else if (name.equals(\"table\")) {\n                        return exitTableBody(t, tb);\n                    } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) {\n                        tb.error(this);\n                        return false;\n                    } else\n                        return anythingElse(t, tb);\n                    break;\n                default:\n                    return anythingElse(t, tb);\n            }",
      "info" : "SwitchStatement[49936-51833]:SwitchStatement[49936-51833]"
    }, {
      "left" : "case StartTag:",
      "right" : "case StartTag:",
      "info" : "SwitchCase[49970-49984]:SwitchCase[49970-49984]"
    }, {
      "left" : "Token.StartTag startTag = t.asStartTag();",
      "right" : "Token.StartTag startTag = t.asStartTag();",
      "info" : "VariableDeclarationStatement[50005-50046]:VariableDeclarationStatement[50005-50046]"
    }, {
      "left" : "String name = startTag.normalName();",
      "right" : "String name = startTag.normalName();",
      "info" : "VariableDeclarationStatement[50067-50103]:VariableDeclarationStatement[50067-50103]"
    }, {
      "left" : "if (name.equals(\"tr\"))",
      "right" : "if (name.equals(\"tr\"))",
      "info" : "IfStatement[50124-50750]:IfStatement[50124-50750]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50147-50320]:Block[50147-50320]"
    }, {
      "left" : "tb.clearStackToTableBodyContext();",
      "right" : "tb.clearStackToTableBodyContext();",
      "info" : "ExpressionStatement[50173-50207]:ExpressionStatement[50173-50207]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[50232-50252]:ExpressionStatement[50232-50252]"
    }, {
      "left" : "tb.transition(InRow);",
      "right" : "tb.transition(InRow);",
      "info" : "ExpressionStatement[50277-50298]:ExpressionStatement[50277-50298]"
    }, {
      "left" : "if (StringUtil.in(name, \"th\", \"td\"))",
      "right" : "if (StringUtil.in(name, \"th\", \"td\"))",
      "info" : "IfStatement[50326-50750]:IfStatement[50326-50750]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50363-50529]:Block[50363-50529]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[50389-50404]:ExpressionStatement[50389-50404]"
    }, {
      "left" : "tb.processStartTag(\"tr\");",
      "right" : "tb.processStartTag(\"tr\");",
      "info" : "ExpressionStatement[50429-50454]:ExpressionStatement[50429-50454]"
    }, {
      "left" : "return tb.process(startTag);",
      "right" : "return tb.process(startTag);",
      "info" : "ReturnStatement[50479-50507]:ReturnStatement[50479-50507]"
    }, {
      "left" : "if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\"))",
      "right" : "if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\"))",
      "info" : "IfStatement[50535-50750]:IfStatement[50535-50750]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50617-50693]:Block[50617-50693]"
    }, {
      "left" : "return exitTableBody(t, tb);",
      "right" : "return exitTableBody(t, tb);",
      "info" : "ReturnStatement[50643-50671]:ReturnStatement[50643-50671]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[50723-50750]:ReturnStatement[50723-50750]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[50771-50777]:BreakStatement[50771-50777]"
    }, {
      "left" : "case EndTag:",
      "right" : "case EndTag:",
      "info" : "SwitchCase[50794-50806]:SwitchCase[50794-50806]"
    }, {
      "left" : "Token.EndTag endTag = t.asEndTag();",
      "right" : "Token.EndTag endTag = t.asEndTag();",
      "info" : "VariableDeclarationStatement[50827-50862]:VariableDeclarationStatement[50827-50862]"
    }, {
      "left" : "name = endTag.normalName();",
      "right" : "name = endTag.normalName();",
      "info" : "ExpressionStatement[50883-50910]:ExpressionStatement[50883-50910]"
    }, {
      "left" : "if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\"))",
      "right" : "if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\"))",
      "info" : "IfStatement[50931-51719]:IfStatement[50931-51719]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50983-51358]:Block[50983-51358]"
    }, {
      "left" : "if (!tb.inTableScope(name))",
      "right" : "if (!tb.inTableScope(name))",
      "info" : "IfStatement[51009-51336]:IfStatement[51009-51336]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51037-51150]:Block[51037-51150]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[51067-51082]:ExpressionStatement[51067-51082]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[51111-51124]:ReturnStatement[51111-51124]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51156-51336]:Block[51156-51336]"
    }, {
      "left" : "tb.clearStackToTableBodyContext();",
      "right" : "tb.clearStackToTableBodyContext();",
      "info" : "ExpressionStatement[51186-51220]:ExpressionStatement[51186-51220]"
    }, {
      "left" : "tb.pop();",
      "right" : "tb.pop();",
      "info" : "ExpressionStatement[51249-51258]:ExpressionStatement[51249-51258]"
    }, {
      "left" : "tb.transition(InTable);",
      "right" : "tb.transition(InTable);",
      "info" : "ExpressionStatement[51287-51310]:ExpressionStatement[51287-51310]"
    }, {
      "left" : "if (name.equals(\"table\"))",
      "right" : "if (name.equals(\"table\"))",
      "info" : "IfStatement[51364-51719]:IfStatement[51364-51719]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51390-51466]:Block[51390-51466]"
    }, {
      "left" : "return exitTableBody(t, tb);",
      "right" : "return exitTableBody(t, tb);",
      "info" : "ReturnStatement[51416-51444]:ReturnStatement[51416-51444]"
    }, {
      "left" : "if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\"))",
      "right" : "if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\"))",
      "info" : "IfStatement[51472-51719]:IfStatement[51472-51719]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51561-51662]:Block[51561-51662]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[51587-51602]:ExpressionStatement[51587-51602]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[51627-51640]:ReturnStatement[51627-51640]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[51692-51719]:ReturnStatement[51692-51719]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[51740-51746]:BreakStatement[51740-51746]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[51763-51771]:SwitchCase[51763-51771]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[51792-51819]:ReturnStatement[51792-51819]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[51846-51858]:ReturnStatement[51846-51858]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[51878-51885]:Modifier[51878-51885]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[51886-51893]:PrimitiveType[51886-51893]"
    }, {
      "left" : "exitTableBody",
      "right" : "exitTableBody",
      "info" : "SimpleName[51894-51907]:SimpleName[51894-51907]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[51908-51915]:SingleVariableDeclaration[51908-51915]"
    }, {
      "left" : "HtmlTreeBuilder tb",
      "right" : "HtmlTreeBuilder tb",
      "info" : "SingleVariableDeclaration[51917-51935]:SingleVariableDeclaration[51917-51935]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51937-52317]:Block[51937-52317]"
    }, {
      "left" : "if (!(tb.inTableScope(\"tbody\") || tb.inTableScope(\"thead\") || tb.inScope(\"tfoot\")))",
      "right" : "if (!(tb.inTableScope(\"tbody\") || tb.inTableScope(\"thead\") || tb.inScope(\"tfoot\")))",
      "info" : "IfStatement[51951-52141]:IfStatement[51951-52141]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52035-52141]:Block[52035-52141]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[52082-52097]:ExpressionStatement[52082-52097]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[52114-52127]:ReturnStatement[52114-52127]"
    }, {
      "left" : "tb.clearStackToTableBodyContext();",
      "right" : "tb.clearStackToTableBodyContext();",
      "info" : "ExpressionStatement[52154-52188]:ExpressionStatement[52154-52188]"
    }, {
      "left" : "tb.processEndTag(tb.currentElement().nodeName());",
      "right" : "tb.processEndTag(tb.currentElement().nodeName());",
      "info" : "ExpressionStatement[52201-52250]:ExpressionStatement[52201-52250]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[52286-52307]:ReturnStatement[52286-52307]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[52327-52334]:Modifier[52327-52334]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[52335-52342]:PrimitiveType[52335-52342]"
    }, {
      "left" : "anythingElse",
      "right" : "anythingElse",
      "info" : "SimpleName[52343-52355]:SimpleName[52343-52355]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[52356-52363]:SingleVariableDeclaration[52356-52363]"
    }, {
      "left" : "HtmlTreeBuilder tb",
      "right" : "HtmlTreeBuilder tb",
      "info" : "SingleVariableDeclaration[52365-52383]:SingleVariableDeclaration[52365-52383]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52385-52439]:Block[52385-52439]"
    }, {
      "left" : "return tb.process(t, InTable);",
      "right" : "return tb.process(t, InTable);",
      "info" : "ReturnStatement[52399-52429]:ReturnStatement[52399-52429]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[52467-52474]:PrimitiveType[52467-52474]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[52475-52482]:SimpleName[52475-52482]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[52483-52490]:SingleVariableDeclaration[52483-52490]"
    }, {
      "left" : "HtmlTreeBuilder tb",
      "right" : "HtmlTreeBuilder tb",
      "info" : "SingleVariableDeclaration[52492-52510]:SingleVariableDeclaration[52492-52510]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52512-54444]:Block[52512-54444]"
    }, {
      "left" : "if (t.isStartTag())",
      "right" : "if (t.isStartTag())",
      "info" : "IfStatement[52526-54409]:IfStatement[52526-54409]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52546-53180]:Block[52546-53180]"
    }, {
      "left" : "Token.StartTag startTag = t.asStartTag();",
      "right" : "Token.StartTag startTag = t.asStartTag();",
      "info" : "VariableDeclarationStatement[52564-52605]:VariableDeclarationStatement[52564-52605]"
    }, {
      "left" : "String name = startTag.normalName();",
      "right" : "String name = startTag.normalName();",
      "info" : "VariableDeclarationStatement[52622-52658]:VariableDeclarationStatement[52622-52658]"
    }, {
      "left" : "if (StringUtil.in(name, \"th\", \"td\"))",
      "right" : "if (StringUtil.in(name, \"th\", \"td\"))",
      "info" : "IfStatement[52676-53166]:IfStatement[52676-53166]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52713-52929]:Block[52713-52929]"
    }, {
      "left" : "tb.clearStackToTableRowContext();",
      "right" : "tb.clearStackToTableRowContext();",
      "info" : "ExpressionStatement[52735-52768]:ExpressionStatement[52735-52768]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[52789-52809]:ExpressionStatement[52789-52809]"
    }, {
      "left" : "tb.transition(InCell);",
      "right" : "tb.transition(InCell);",
      "info" : "ExpressionStatement[52830-52852]:ExpressionStatement[52830-52852]"
    }, {
      "left" : "tb.insertMarkerToFormattingElements();",
      "right" : "tb.insertMarkerToFormattingElements();",
      "info" : "ExpressionStatement[52873-52911]:ExpressionStatement[52873-52911]"
    }, {
      "left" : "if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\", \"tr\"))",
      "right" : "if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\", \"tr\"))",
      "info" : "IfStatement[52935-53166]:IfStatement[52935-53166]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53023-53093]:Block[53023-53093]"
    }, {
      "left" : "return handleMissingTr(t, tb);",
      "right" : "return handleMissingTr(t, tb);",
      "info" : "ReturnStatement[53045-53075]:ReturnStatement[53045-53075]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53099-53166]:Block[53099-53166]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[53121-53148]:ReturnStatement[53121-53148]"
    }, {
      "left" : "if (t.isEndTag())",
      "right" : "if (t.isEndTag())",
      "info" : "IfStatement[53186-54409]:IfStatement[53186-54409]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53204-54344]:Block[53204-54344]"
    }, {
      "left" : "Token.EndTag endTag = t.asEndTag();",
      "right" : "Token.EndTag endTag = t.asEndTag();",
      "info" : "VariableDeclarationStatement[53222-53257]:VariableDeclarationStatement[53222-53257]"
    }, {
      "left" : "String name = endTag.normalName();",
      "right" : "String name = endTag.normalName();",
      "info" : "VariableDeclarationStatement[53274-53308]:VariableDeclarationStatement[53274-53308]"
    }, {
      "left" : "if (name.equals(\"tr\"))",
      "right" : "if (name.equals(\"tr\"))",
      "info" : "IfStatement[53326-54330]:IfStatement[53326-54330]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53349-53664]:Block[53349-53664]"
    }, {
      "left" : "if (!tb.inTableScope(name))",
      "right" : "if (!tb.inTableScope(name))",
      "info" : "IfStatement[53371-53508]:IfStatement[53371-53508]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53399-53508]:Block[53399-53508]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[53425-53440]:ExpressionStatement[53425-53440]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[53473-53486]:ReturnStatement[53473-53486]"
    }, {
      "left" : "tb.clearStackToTableRowContext();",
      "right" : "tb.clearStackToTableRowContext();",
      "info" : "ExpressionStatement[53529-53562]:ExpressionStatement[53529-53562]"
    }, {
      "left" : "tb.pop();",
      "right" : "tb.pop();",
      "info" : "ExpressionStatement[53583-53592]:ExpressionStatement[53583-53592]"
    }, {
      "left" : "tb.transition(InTableBody);",
      "right" : "tb.transition(InTableBody);",
      "info" : "ExpressionStatement[53619-53646]:ExpressionStatement[53619-53646]"
    }, {
      "left" : "if (name.equals(\"table\"))",
      "right" : "if (name.equals(\"table\"))",
      "info" : "IfStatement[53670-54330]:IfStatement[53670-54330]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53696-53766]:Block[53696-53766]"
    }, {
      "left" : "return handleMissingTr(t, tb);",
      "right" : "return handleMissingTr(t, tb);",
      "info" : "ReturnStatement[53718-53748]:ReturnStatement[53718-53748]"
    }, {
      "left" : "if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\"))",
      "right" : "if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\"))",
      "info" : "IfStatement[53772-54330]:IfStatement[53772-54330]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53824-54079]:Block[53824-54079]"
    }, {
      "left" : "if (!tb.inTableScope(name))",
      "right" : "if (!tb.inTableScope(name))",
      "info" : "IfStatement[53846-53975]:IfStatement[53846-53975]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53874-53975]:Block[53874-53975]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[53900-53915]:ExpressionStatement[53900-53915]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[53940-53953]:ReturnStatement[53940-53953]"
    }, {
      "left" : "tb.processEndTag(\"tr\");",
      "right" : "tb.processEndTag(\"tr\");",
      "info" : "ExpressionStatement[53996-54019]:ExpressionStatement[53996-54019]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[54040-54061]:ReturnStatement[54040-54061]"
    }, {
      "left" : "if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\"))",
      "right" : "if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\"))",
      "info" : "IfStatement[54085-54330]:IfStatement[54085-54330]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54168-54257]:Block[54168-54257]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[54190-54205]:ExpressionStatement[54190-54205]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[54226-54239]:ReturnStatement[54226-54239]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54263-54330]:Block[54263-54330]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[54285-54312]:ReturnStatement[54285-54312]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54350-54409]:Block[54350-54409]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[54368-54395]:ReturnStatement[54368-54395]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[54422-54434]:ReturnStatement[54422-54434]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[54454-54461]:Modifier[54454-54461]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[54462-54469]:PrimitiveType[54462-54469]"
    }, {
      "left" : "anythingElse",
      "right" : "anythingElse",
      "info" : "SimpleName[54470-54482]:SimpleName[54470-54482]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[54483-54490]:SingleVariableDeclaration[54483-54490]"
    }, {
      "left" : "HtmlTreeBuilder tb",
      "right" : "HtmlTreeBuilder tb",
      "info" : "SingleVariableDeclaration[54492-54510]:SingleVariableDeclaration[54492-54510]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54512-54566]:Block[54512-54566]"
    }, {
      "left" : "return tb.process(t, InTable);",
      "right" : "return tb.process(t, InTable);",
      "info" : "ReturnStatement[54526-54556]:ReturnStatement[54526-54556]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[54576-54583]:Modifier[54576-54583]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[54584-54591]:PrimitiveType[54584-54591]"
    }, {
      "left" : "handleMissingTr",
      "right" : "handleMissingTr",
      "info" : "SimpleName[54592-54607]:SimpleName[54592-54607]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[54608-54615]:SingleVariableDeclaration[54608-54615]"
    }, {
      "left" : "TreeBuilder tb",
      "right" : "TreeBuilder tb",
      "info" : "SingleVariableDeclaration[54617-54631]:SingleVariableDeclaration[54617-54631]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54633-54812]:Block[54633-54812]"
    }, {
      "left" : "boolean processed = tb.processEndTag(\"tr\");",
      "right" : "boolean processed = tb.processEndTag(\"tr\");",
      "info" : "VariableDeclarationStatement[54647-54690]:VariableDeclarationStatement[54647-54690]"
    }, {
      "left" : "if (processed)",
      "right" : "if (processed)",
      "info" : "IfStatement[54703-54802]:IfStatement[54703-54802]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[54734-54755]:ReturnStatement[54734-54755]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[54789-54802]:ReturnStatement[54789-54802]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[54841-54848]:PrimitiveType[54841-54848]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[54849-54856]:SimpleName[54849-54856]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[54857-54864]:SingleVariableDeclaration[54857-54864]"
    }, {
      "left" : "HtmlTreeBuilder tb",
      "right" : "HtmlTreeBuilder tb",
      "info" : "SingleVariableDeclaration[54866-54884]:SingleVariableDeclaration[54866-54884]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54886-56783]:Block[54886-56783]"
    }, {
      "left" : "if (t.isEndTag())",
      "right" : "if (t.isEndTag())",
      "info" : "IfStatement[54900-56748]:IfStatement[54900-56748]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54918-56243]:Block[54918-56243]"
    }, {
      "left" : "Token.EndTag endTag = t.asEndTag();",
      "right" : "Token.EndTag endTag = t.asEndTag();",
      "info" : "VariableDeclarationStatement[54936-54971]:VariableDeclarationStatement[54936-54971]"
    }, {
      "left" : "String name = endTag.normalName();",
      "right" : "String name = endTag.normalName();",
      "info" : "VariableDeclarationStatement[54988-55022]:VariableDeclarationStatement[54988-55022]"
    }, {
      "left" : "if (StringUtil.in(name, \"td\", \"th\"))",
      "right" : "if (StringUtil.in(name, \"td\", \"th\"))",
      "info" : "IfStatement[55040-56229]:IfStatement[55040-56229]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55077-55671]:Block[55077-55671]"
    }, {
      "left" : "if (!tb.inTableScope(name))",
      "right" : "if (!tb.inTableScope(name))",
      "info" : "IfStatement[55099-55344]:IfStatement[55099-55344]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55127-55344]:Block[55127-55344]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[55153-55168]:ExpressionStatement[55153-55168]"
    }, {
      "left" : "tb.transition(InRow);",
      "right" : "tb.transition(InRow);",
      "info" : "ExpressionStatement[55193-55214]:ExpressionStatement[55193-55214]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[55309-55322]:ReturnStatement[55309-55322]"
    }, {
      "left" : "tb.generateImpliedEndTags();",
      "right" : "tb.generateImpliedEndTags();",
      "info" : "ExpressionStatement[55365-55393]:ExpressionStatement[55365-55393]"
    }, {
      "left" : "if (!tb.currentElement().nodeName().equals(name))",
      "right" : "if (!tb.currentElement().nodeName().equals(name))",
      "info" : "IfStatement[55414-55503]:IfStatement[55414-55503]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[55488-55503]:ExpressionStatement[55488-55503]"
    }, {
      "left" : "tb.popStackToClose(name);",
      "right" : "tb.popStackToClose(name);",
      "info" : "ExpressionStatement[55524-55549]:ExpressionStatement[55524-55549]"
    }, {
      "left" : "tb.clearFormattingElementsToLastMarker();",
      "right" : "tb.clearFormattingElementsToLastMarker();",
      "info" : "ExpressionStatement[55570-55611]:ExpressionStatement[55570-55611]"
    }, {
      "left" : "tb.transition(InRow);",
      "right" : "tb.transition(InRow);",
      "info" : "ExpressionStatement[55632-55653]:ExpressionStatement[55632-55653]"
    }, {
      "left" : "if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\"))",
      "right" : "if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\"))",
      "info" : "IfStatement[55677-56229]:IfStatement[55677-56229]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55748-55837]:Block[55748-55837]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[55770-55785]:ExpressionStatement[55770-55785]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[55806-55819]:ReturnStatement[55806-55819]"
    }, {
      "left" : "if (StringUtil.in(name, \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"))",
      "right" : "if (StringUtil.in(name, \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"))",
      "info" : "IfStatement[55843-56229]:IfStatement[55843-56229]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55910-56156]:Block[55910-56156]"
    }, {
      "left" : "if (!tb.inTableScope(name))",
      "right" : "if (!tb.inTableScope(name))",
      "info" : "IfStatement[55932-56061]:IfStatement[55932-56061]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55960-56061]:Block[55960-56061]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[55986-56001]:ExpressionStatement[55986-56001]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[56026-56039]:ReturnStatement[56026-56039]"
    }, {
      "left" : "closeCell(tb);",
      "right" : "closeCell(tb);",
      "info" : "ExpressionStatement[56082-56096]:ExpressionStatement[56082-56096]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[56117-56138]:ReturnStatement[56117-56138]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56162-56229]:Block[56162-56229]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[56184-56211]:ReturnStatement[56184-56211]"
    }, {
      "left" : "if (t.isStartTag() &&\n                    StringUtil.in(t.asStartTag().normalName(),\n                            \"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"))",
      "right" : "if (t.isStartTag() &&\n                    StringUtil.in(t.asStartTag().normalName(),\n                            \"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"))",
      "info" : "IfStatement[56249-56748]:IfStatement[56249-56748]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56438-56683]:Block[56438-56683]"
    }, {
      "left" : "if (!(tb.inTableScope(\"td\") || tb.inTableScope(\"th\")))",
      "right" : "if (!(tb.inTableScope(\"td\") || tb.inTableScope(\"th\")))",
      "info" : "IfStatement[56456-56600]:IfStatement[56456-56600]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56511-56600]:Block[56511-56600]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[56533-56548]:ExpressionStatement[56533-56548]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[56569-56582]:ReturnStatement[56569-56582]"
    }, {
      "left" : "closeCell(tb);",
      "right" : "closeCell(tb);",
      "info" : "ExpressionStatement[56617-56631]:ExpressionStatement[56617-56631]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[56648-56669]:ReturnStatement[56648-56669]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56689-56748]:Block[56689-56748]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[56707-56734]:ReturnStatement[56707-56734]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[56761-56773]:ReturnStatement[56761-56773]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[56793-56800]:Modifier[56793-56800]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[56801-56808]:PrimitiveType[56801-56808]"
    }, {
      "left" : "anythingElse",
      "right" : "anythingElse",
      "info" : "SimpleName[56809-56821]:SimpleName[56809-56821]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[56822-56829]:SingleVariableDeclaration[56822-56829]"
    }, {
      "left" : "HtmlTreeBuilder tb",
      "right" : "HtmlTreeBuilder tb",
      "info" : "SingleVariableDeclaration[56831-56849]:SingleVariableDeclaration[56831-56849]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56851-56904]:Block[56851-56904]"
    }, {
      "left" : "return tb.process(t, InBody);",
      "right" : "return tb.process(t, InBody);",
      "info" : "ReturnStatement[56865-56894]:ReturnStatement[56865-56894]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[56914-56921]:Modifier[56914-56921]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[56922-56926]:PrimitiveType[56922-56926]"
    }, {
      "left" : "closeCell",
      "right" : "closeCell",
      "info" : "SimpleName[56927-56936]:SimpleName[56927-56936]"
    }, {
      "left" : "HtmlTreeBuilder tb",
      "right" : "HtmlTreeBuilder tb",
      "info" : "SingleVariableDeclaration[56937-56955]:SingleVariableDeclaration[56937-56955]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56957-57138]:Block[56957-57138]"
    }, {
      "left" : "if (tb.inTableScope(\"td\"))",
      "right" : "if (tb.inTableScope(\"td\"))",
      "info" : "IfStatement[56971-57094]:IfStatement[56971-57094]"
    }, {
      "left" : "tb.processEndTag(\"td\");",
      "right" : "tb.processEndTag(\"td\");",
      "info" : "ExpressionStatement[57014-57037]:ExpressionStatement[57014-57037]"
    }, {
      "left" : "tb.processEndTag(\"th\");",
      "right" : "tb.processEndTag(\"th\");",
      "info" : "ExpressionStatement[57071-57094]:ExpressionStatement[57071-57094]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[57169-57176]:PrimitiveType[57169-57176]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[57177-57184]:SimpleName[57177-57184]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[57185-57192]:SingleVariableDeclaration[57185-57192]"
    }, {
      "left" : "HtmlTreeBuilder tb",
      "right" : "HtmlTreeBuilder tb",
      "info" : "SingleVariableDeclaration[57194-57212]:SingleVariableDeclaration[57194-57212]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57214-61185]:Block[57214-61185]"
    }, {
      "left" : "switch (t.type) {\n                case Character:\n                    Token.Character c = t.asCharacter();\n                    if (c.getData().equals(nullString)) {\n                        tb.error(this);\n                        return false;\n                    } else {\n                        tb.insert(c);\n                    }\n                    break;\n                case Comment:\n                    tb.insert(t.asComment());\n                    break;\n                case Doctype:\n                    tb.error(this);\n                    return false;\n                case StartTag:\n                    Token.StartTag start = t.asStartTag();\n                    String name = start.normalName();\n                    if (name.equals(\"html\"))\n                        return tb.process(start, InBody);\n                    else if (name.equals(\"option\")) {\n                        if (tb.currentElement().nodeName().equals(\"option\"))\n                            tb.processEndTag(\"option\");\n                        tb.insert(start);\n                    } else if (name.equals(\"optgroup\")) {\n                        if (tb.currentElement().nodeName().equals(\"option\"))\n                            tb.processEndTag(\"option\");\n                        else if (tb.currentElement().nodeName().equals(\"optgroup\"))\n                            tb.processEndTag(\"optgroup\");\n                        tb.insert(start);\n                    } else if (name.equals(\"select\")) {\n                        tb.error(this);\n                        return tb.processEndTag(\"select\");\n                    } else if (StringUtil.in(name, \"input\", \"keygen\", \"textarea\")) {\n                        tb.error(this);\n                        if (!tb.inSelectScope(\"select\"))\n                            return false; // frag\n                        tb.processEndTag(\"select\");\n                        return tb.process(start);\n                    } else if (name.equals(\"script\")) {\n                        return tb.process(t, InHead);\n                    } else {\n                        return anythingElse(t, tb);\n                    }\n                    break;\n                case EndTag:\n                    Token.EndTag end = t.asEndTag();\n                    name = end.normalName();\n                    switch (name) {\n                        case \"optgroup\":\n                            if (tb.currentElement().nodeName().equals(\"option\") && tb.aboveOnStack(tb.currentElement()) != null && tb.aboveOnStack(tb.currentElement()).nodeName().equals(\"optgroup\"))\n                                tb.processEndTag(\"option\");\n                            if (tb.currentElement().nodeName().equals(\"optgroup\"))\n                                tb.pop();\n                            else\n                                tb.error(this);\n                            break;\n                        case \"option\":\n                            if (tb.currentElement().nodeName().equals(\"option\"))\n                                tb.pop();\n                            else\n                                tb.error(this);\n                            break;\n                        case \"select\":\n                            if (!tb.inSelectScope(name)) {\n                                tb.error(this);\n                                return false;\n                            } else {\n                                tb.popStackToClose(name);\n                                tb.resetInsertionMode();\n                            }\n                            break;\n                        default:\n                            return anythingElse(t, tb);\n                    }\n                    break;\n                case EOF:\n                    if (!tb.currentElement().nodeName().equals(\"html\"))\n                        tb.error(this);\n                    break;\n                default:\n                    return anythingElse(t, tb);\n            }",
      "right" : "switch (t.type) {\n                case Character:\n                    Token.Character c = t.asCharacter();\n                    if (c.getData().equals(nullString)) {\n                        tb.error(this);\n                        return false;\n                    } else {\n                        tb.insert(c);\n                    }\n                    break;\n                case Comment:\n                    tb.insert(t.asComment());\n                    break;\n                case Doctype:\n                    tb.error(this);\n                    return false;\n                case StartTag:\n                    Token.StartTag start = t.asStartTag();\n                    String name = start.normalName();\n                    if (name.equals(\"html\"))\n                        return tb.process(start, InBody);\n                    else if (name.equals(\"option\")) {\n                        if (tb.currentElement().nodeName().equals(\"option\"))\n                            tb.processEndTag(\"option\");\n                        tb.insert(start);\n                    } else if (name.equals(\"optgroup\")) {\n                        if (tb.currentElement().nodeName().equals(\"option\"))\n                            tb.processEndTag(\"option\");\n                        else if (tb.currentElement().nodeName().equals(\"optgroup\"))\n                            tb.processEndTag(\"optgroup\");\n                        tb.insert(start);\n                    } else if (name.equals(\"select\")) {\n                        tb.error(this);\n                        return tb.processEndTag(\"select\");\n                    } else if (StringUtil.in(name, \"input\", \"keygen\", \"textarea\")) {\n                        tb.error(this);\n                        if (!tb.inSelectScope(\"select\"))\n                            return false; // frag\n                        tb.processEndTag(\"select\");\n                        return tb.process(start);\n                    } else if (name.equals(\"script\")) {\n                        return tb.process(t, InHead);\n                    } else {\n                        return anythingElse(t, tb);\n                    }\n                    break;\n                case EndTag:\n                    Token.EndTag end = t.asEndTag();\n                    name = end.normalName();\n                    switch (name) {\n                        case \"optgroup\":\n                            if (tb.currentElement().nodeName().equals(\"option\") && tb.aboveOnStack(tb.currentElement()) != null && tb.aboveOnStack(tb.currentElement()).nodeName().equals(\"optgroup\"))\n                                tb.processEndTag(\"option\");\n                            if (tb.currentElement().nodeName().equals(\"optgroup\"))\n                                tb.pop();\n                            else\n                                tb.error(this);\n                            break;\n                        case \"option\":\n                            if (tb.currentElement().nodeName().equals(\"option\"))\n                                tb.pop();\n                            else\n                                tb.error(this);\n                            break;\n                        case \"select\":\n                            if (!tb.inSelectScope(name)) {\n                                tb.error(this);\n                                return false;\n                            } else {\n                                tb.popStackToClose(name);\n                                tb.resetInsertionMode();\n                            }\n                            break;\n                        default:\n                            return anythingElse(t, tb);\n                    }\n                    break;\n                case EOF:\n                    if (!tb.currentElement().nodeName().equals(\"html\"))\n                        tb.error(this);\n                    break;\n                default:\n                    return anythingElse(t, tb);\n            }",
      "info" : "SwitchStatement[57228-61150]:SwitchStatement[57228-61150]"
    }, {
      "left" : "case Character:",
      "right" : "case Character:",
      "info" : "SwitchCase[57262-57277]:SwitchCase[57262-57277]"
    }, {
      "left" : "Token.Character c = t.asCharacter();",
      "right" : "Token.Character c = t.asCharacter();",
      "info" : "VariableDeclarationStatement[57298-57334]:VariableDeclarationStatement[57298-57334]"
    }, {
      "left" : "if (c.getData().equals(nullString))",
      "right" : "if (c.getData().equals(nullString))",
      "info" : "IfStatement[57355-57559]:IfStatement[57355-57559]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57391-57492]:Block[57391-57492]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[57417-57432]:ExpressionStatement[57417-57432]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[57457-57470]:ReturnStatement[57457-57470]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57498-57559]:Block[57498-57559]"
    }, {
      "left" : "tb.insert(c);",
      "right" : "tb.insert(c);",
      "info" : "ExpressionStatement[57524-57537]:ExpressionStatement[57524-57537]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[57580-57586]:BreakStatement[57580-57586]"
    }, {
      "left" : "case Comment:",
      "right" : "case Comment:",
      "info" : "SwitchCase[57603-57616]:SwitchCase[57603-57616]"
    }, {
      "left" : "tb.insert(t.asComment());",
      "right" : "tb.insert(t.asComment());",
      "info" : "ExpressionStatement[57637-57662]:ExpressionStatement[57637-57662]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[57683-57689]:BreakStatement[57683-57689]"
    }, {
      "left" : "case Doctype:",
      "right" : "case Doctype:",
      "info" : "SwitchCase[57706-57719]:SwitchCase[57706-57719]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[57740-57755]:ExpressionStatement[57740-57755]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[57776-57789]:ReturnStatement[57776-57789]"
    }, {
      "left" : "case StartTag:",
      "right" : "case StartTag:",
      "info" : "SwitchCase[57806-57820]:SwitchCase[57806-57820]"
    }, {
      "left" : "Token.StartTag start = t.asStartTag();",
      "right" : "Token.StartTag start = t.asStartTag();",
      "info" : "VariableDeclarationStatement[57841-57879]:VariableDeclarationStatement[57841-57879]"
    }, {
      "left" : "String name = start.normalName();",
      "right" : "String name = start.normalName();",
      "info" : "VariableDeclarationStatement[57900-57933]:VariableDeclarationStatement[57900-57933]"
    }, {
      "left" : "if (name.equals(\"html\"))",
      "right" : "if (name.equals(\"html\"))",
      "info" : "IfStatement[57954-59342]:IfStatement[57954-59342]"
    }, {
      "left" : "return tb.process(start, InBody);",
      "right" : "return tb.process(start, InBody);",
      "info" : "ReturnStatement[58003-58036]:ReturnStatement[58003-58036]"
    }, {
      "left" : "if (name.equals(\"option\"))",
      "right" : "if (name.equals(\"option\"))",
      "info" : "IfStatement[58062-59342]:IfStatement[58062-59342]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58089-58287]:Block[58089-58287]"
    }, {
      "left" : "if (tb.currentElement().nodeName().equals(\"option\"))",
      "right" : "if (tb.currentElement().nodeName().equals(\"option\"))",
      "info" : "IfStatement[58115-58223]:IfStatement[58115-58223]"
    }, {
      "left" : "tb.processEndTag(\"option\");",
      "right" : "tb.processEndTag(\"option\");",
      "info" : "ExpressionStatement[58196-58223]:ExpressionStatement[58196-58223]"
    }, {
      "left" : "tb.insert(start);",
      "right" : "tb.insert(start);",
      "info" : "ExpressionStatement[58248-58265]:ExpressionStatement[58248-58265]"
    }, {
      "left" : "if (name.equals(\"optgroup\"))",
      "right" : "if (name.equals(\"optgroup\"))",
      "info" : "IfStatement[58293-59342]:IfStatement[58293-59342]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58322-58662]:Block[58322-58662]"
    }, {
      "left" : "if (tb.currentElement().nodeName().equals(\"option\"))",
      "right" : "if (tb.currentElement().nodeName().equals(\"option\"))",
      "info" : "IfStatement[58348-58598]:IfStatement[58348-58598]"
    }, {
      "left" : "tb.processEndTag(\"option\");",
      "right" : "tb.processEndTag(\"option\");",
      "info" : "ExpressionStatement[58429-58456]:ExpressionStatement[58429-58456]"
    }, {
      "left" : "if (tb.currentElement().nodeName().equals(\"optgroup\"))",
      "right" : "if (tb.currentElement().nodeName().equals(\"optgroup\"))",
      "info" : "IfStatement[58486-58598]:IfStatement[58486-58598]"
    }, {
      "left" : "tb.processEndTag(\"optgroup\");",
      "right" : "tb.processEndTag(\"optgroup\");",
      "info" : "ExpressionStatement[58569-58598]:ExpressionStatement[58569-58598]"
    }, {
      "left" : "tb.insert(start);",
      "right" : "tb.insert(start);",
      "info" : "ExpressionStatement[58623-58640]:ExpressionStatement[58623-58640]"
    }, {
      "left" : "if (name.equals(\"select\"))",
      "right" : "if (name.equals(\"select\"))",
      "info" : "IfStatement[58668-59342]:IfStatement[58668-59342]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58695-58817]:Block[58695-58817]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[58721-58736]:ExpressionStatement[58721-58736]"
    }, {
      "left" : "return tb.processEndTag(\"select\");",
      "right" : "return tb.processEndTag(\"select\");",
      "info" : "ReturnStatement[58761-58795]:ReturnStatement[58761-58795]"
    }, {
      "left" : "if (StringUtil.in(name, \"input\", \"keygen\", \"textarea\"))",
      "right" : "if (StringUtil.in(name, \"input\", \"keygen\", \"textarea\"))",
      "info" : "IfStatement[58823-59342]:IfStatement[58823-59342]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58879-59151]:Block[58879-59151]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[58905-58920]:ExpressionStatement[58905-58920]"
    }, {
      "left" : "if (!tb.inSelectScope(\"select\"))",
      "right" : "if (!tb.inSelectScope(\"select\"))",
      "info" : "IfStatement[58945-59019]:IfStatement[58945-59019]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[59006-59019]:ReturnStatement[59006-59019]"
    }, {
      "left" : "tb.processEndTag(\"select\");",
      "right" : "tb.processEndTag(\"select\");",
      "info" : "ExpressionStatement[59052-59079]:ExpressionStatement[59052-59079]"
    }, {
      "left" : "return tb.process(start);",
      "right" : "return tb.process(start);",
      "info" : "ReturnStatement[59104-59129]:ReturnStatement[59104-59129]"
    }, {
      "left" : "if (name.equals(\"script\"))",
      "right" : "if (name.equals(\"script\"))",
      "info" : "IfStatement[59157-59342]:IfStatement[59157-59342]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59184-59261]:Block[59184-59261]"
    }, {
      "left" : "return tb.process(t, InHead);",
      "right" : "return tb.process(t, InHead);",
      "info" : "ReturnStatement[59210-59239]:ReturnStatement[59210-59239]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59267-59342]:Block[59267-59342]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[59293-59320]:ReturnStatement[59293-59320]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[59363-59369]:BreakStatement[59363-59369]"
    }, {
      "left" : "case EndTag:",
      "right" : "case EndTag:",
      "info" : "SwitchCase[59386-59398]:SwitchCase[59386-59398]"
    }, {
      "left" : "Token.EndTag end = t.asEndTag();",
      "right" : "Token.EndTag end = t.asEndTag();",
      "info" : "VariableDeclarationStatement[59419-59451]:VariableDeclarationStatement[59419-59451]"
    }, {
      "left" : "name = end.normalName();",
      "right" : "name = end.normalName();",
      "info" : "ExpressionStatement[59472-59496]:ExpressionStatement[59472-59496]"
    }, {
      "left" : "switch (name) {\n                        case \"optgroup\":\n                            if (tb.currentElement().nodeName().equals(\"option\") && tb.aboveOnStack(tb.currentElement()) != null && tb.aboveOnStack(tb.currentElement()).nodeName().equals(\"optgroup\"))\n                                tb.processEndTag(\"option\");\n                            if (tb.currentElement().nodeName().equals(\"optgroup\"))\n                                tb.pop();\n                            else\n                                tb.error(this);\n                            break;\n                        case \"option\":\n                            if (tb.currentElement().nodeName().equals(\"option\"))\n                                tb.pop();\n                            else\n                                tb.error(this);\n                            break;\n                        case \"select\":\n                            if (!tb.inSelectScope(name)) {\n                                tb.error(this);\n                                return false;\n                            } else {\n                                tb.popStackToClose(name);\n                                tb.resetInsertionMode();\n                            }\n                            break;\n                        default:\n                            return anythingElse(t, tb);\n                    }",
      "right" : "switch (name) {\n                        case \"optgroup\":\n                            if (tb.currentElement().nodeName().equals(\"option\") && tb.aboveOnStack(tb.currentElement()) != null && tb.aboveOnStack(tb.currentElement()).nodeName().equals(\"optgroup\"))\n                                tb.processEndTag(\"option\");\n                            if (tb.currentElement().nodeName().equals(\"optgroup\"))\n                                tb.pop();\n                            else\n                                tb.error(this);\n                            break;\n                        case \"option\":\n                            if (tb.currentElement().nodeName().equals(\"option\"))\n                                tb.pop();\n                            else\n                                tb.error(this);\n                            break;\n                        case \"select\":\n                            if (!tb.inSelectScope(name)) {\n                                tb.error(this);\n                                return false;\n                            } else {\n                                tb.popStackToClose(name);\n                                tb.resetInsertionMode();\n                            }\n                            break;\n                        default:\n                            return anythingElse(t, tb);\n                    }",
      "info" : "SwitchStatement[59517-60871]:SwitchStatement[59517-60871]"
    }, {
      "left" : "case \"optgroup\":",
      "right" : "case \"optgroup\":",
      "info" : "SwitchCase[59557-59573]:SwitchCase[59557-59573]"
    }, {
      "left" : "if (tb.currentElement().nodeName().equals(\"option\") && tb.aboveOnStack(tb.currentElement()) != null && tb.aboveOnStack(tb.currentElement()).nodeName().equals(\"optgroup\"))",
      "right" : "if (tb.currentElement().nodeName().equals(\"option\") && tb.aboveOnStack(tb.currentElement()) != null && tb.aboveOnStack(tb.currentElement()).nodeName().equals(\"optgroup\"))",
      "info" : "IfStatement[59602-59832]:IfStatement[59602-59832]"
    }, {
      "left" : "tb.processEndTag(\"option\");",
      "right" : "tb.processEndTag(\"option\");",
      "info" : "ExpressionStatement[59805-59832]:ExpressionStatement[59805-59832]"
    }, {
      "left" : "if (tb.currentElement().nodeName().equals(\"optgroup\"))",
      "right" : "if (tb.currentElement().nodeName().equals(\"optgroup\"))",
      "info" : "IfStatement[59861-60038]:IfStatement[59861-60038]"
    }, {
      "left" : "tb.pop();",
      "right" : "tb.pop();",
      "info" : "ExpressionStatement[59948-59957]:ExpressionStatement[59948-59957]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[60023-60038]:ExpressionStatement[60023-60038]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[60067-60073]:BreakStatement[60067-60073]"
    }, {
      "left" : "case \"option\":",
      "right" : "case \"option\":",
      "info" : "SwitchCase[60098-60112]:SwitchCase[60098-60112]"
    }, {
      "left" : "if (tb.currentElement().nodeName().equals(\"option\"))",
      "right" : "if (tb.currentElement().nodeName().equals(\"option\"))",
      "info" : "IfStatement[60141-60316]:IfStatement[60141-60316]"
    }, {
      "left" : "tb.pop();",
      "right" : "tb.pop();",
      "info" : "ExpressionStatement[60226-60235]:ExpressionStatement[60226-60235]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[60301-60316]:ExpressionStatement[60301-60316]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[60345-60351]:BreakStatement[60345-60351]"
    }, {
      "left" : "case \"select\":",
      "right" : "case \"select\":",
      "info" : "SwitchCase[60376-60390]:SwitchCase[60376-60390]"
    }, {
      "left" : "if (!tb.inSelectScope(name))",
      "right" : "if (!tb.inSelectScope(name))",
      "info" : "IfStatement[60419-60725]:IfStatement[60419-60725]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60448-60573]:Block[60448-60573]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[60482-60497]:ExpressionStatement[60482-60497]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[60530-60543]:ReturnStatement[60530-60543]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60579-60725]:Block[60579-60725]"
    }, {
      "left" : "tb.popStackToClose(name);",
      "right" : "tb.popStackToClose(name);",
      "info" : "ExpressionStatement[60613-60638]:ExpressionStatement[60613-60638]"
    }, {
      "left" : "tb.resetInsertionMode();",
      "right" : "tb.resetInsertionMode();",
      "info" : "ExpressionStatement[60671-60695]:ExpressionStatement[60671-60695]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[60754-60760]:BreakStatement[60754-60760]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[60785-60793]:SwitchCase[60785-60793]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[60822-60849]:ReturnStatement[60822-60849]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[60892-60898]:BreakStatement[60892-60898]"
    }, {
      "left" : "case EOF:",
      "right" : "case EOF:",
      "info" : "SwitchCase[60915-60924]:SwitchCase[60915-60924]"
    }, {
      "left" : "if (!tb.currentElement().nodeName().equals(\"html\"))",
      "right" : "if (!tb.currentElement().nodeName().equals(\"html\"))",
      "info" : "IfStatement[60945-61036]:IfStatement[60945-61036]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[61021-61036]:ExpressionStatement[61021-61036]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[61057-61063]:BreakStatement[61057-61063]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[61080-61088]:SwitchCase[61080-61088]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[61109-61136]:ReturnStatement[61109-61136]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[61163-61175]:ReturnStatement[61163-61175]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[61195-61202]:Modifier[61195-61202]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[61203-61210]:PrimitiveType[61203-61210]"
    }, {
      "left" : "anythingElse",
      "right" : "anythingElse",
      "info" : "SimpleName[61211-61223]:SimpleName[61211-61223]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[61224-61231]:SingleVariableDeclaration[61224-61231]"
    }, {
      "left" : "HtmlTreeBuilder tb",
      "right" : "HtmlTreeBuilder tb",
      "info" : "SingleVariableDeclaration[61233-61251]:SingleVariableDeclaration[61233-61251]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61253-61318]:Block[61253-61318]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[61267-61282]:ExpressionStatement[61267-61282]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[61295-61308]:ReturnStatement[61295-61308]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[61356-61363]:PrimitiveType[61356-61363]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[61364-61371]:SimpleName[61364-61371]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[61372-61379]:SingleVariableDeclaration[61372-61379]"
    }, {
      "left" : "HtmlTreeBuilder tb",
      "right" : "HtmlTreeBuilder tb",
      "info" : "SingleVariableDeclaration[61381-61399]:SingleVariableDeclaration[61381-61399]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61401-62149]:Block[61401-62149]"
    }, {
      "left" : "if (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\"))",
      "right" : "if (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\"))",
      "info" : "IfStatement[61415-62139]:IfStatement[61415-62139]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61546-61675]:Block[61546-61675]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[61564-61579]:ExpressionStatement[61564-61579]"
    }, {
      "left" : "tb.processEndTag(\"select\");",
      "right" : "tb.processEndTag(\"select\");",
      "info" : "ExpressionStatement[61596-61623]:ExpressionStatement[61596-61623]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[61640-61661]:ReturnStatement[61640-61661]"
    }, {
      "left" : "if (t.isEndTag() && StringUtil.in(t.asEndTag().normalName(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\"))",
      "right" : "if (t.isEndTag() && StringUtil.in(t.asEndTag().normalName(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\"))",
      "info" : "IfStatement[61681-62139]:IfStatement[61681-62139]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61808-62070]:Block[61808-62070]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[61826-61841]:ExpressionStatement[61826-61841]"
    }, {
      "left" : "if (tb.inTableScope(t.asEndTag().normalName()))",
      "right" : "if (tb.inTableScope(t.asEndTag().normalName()))",
      "info" : "IfStatement[61858-62056]:IfStatement[61858-62056]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61906-62017]:Block[61906-62017]"
    }, {
      "left" : "tb.processEndTag(\"select\");",
      "right" : "tb.processEndTag(\"select\");",
      "info" : "ExpressionStatement[61928-61955]:ExpressionStatement[61928-61955]"
    }, {
      "left" : "return (tb.process(t));",
      "right" : "return (tb.process(t));",
      "info" : "ReturnStatement[61976-61999]:ReturnStatement[61976-61999]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[62043-62056]:ReturnStatement[62043-62056]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62076-62139]:Block[62076-62139]"
    }, {
      "left" : "return tb.process(t, InSelect);",
      "right" : "return tb.process(t, InSelect);",
      "info" : "ReturnStatement[62094-62125]:ReturnStatement[62094-62125]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[62181-62188]:PrimitiveType[62181-62188]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[62189-62196]:SimpleName[62189-62196]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[62197-62204]:SingleVariableDeclaration[62197-62204]"
    }, {
      "left" : "HtmlTreeBuilder tb",
      "right" : "HtmlTreeBuilder tb",
      "info" : "SingleVariableDeclaration[62206-62224]:SingleVariableDeclaration[62206-62224]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62226-63190]:Block[62226-63190]"
    }, {
      "left" : "if (isWhitespace(t))",
      "right" : "if (isWhitespace(t))",
      "info" : "IfStatement[62240-63155]:IfStatement[62240-63155]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62261-62322]:Block[62261-62322]"
    }, {
      "left" : "return tb.process(t, InBody);",
      "right" : "return tb.process(t, InBody);",
      "info" : "ReturnStatement[62279-62308]:ReturnStatement[62279-62308]"
    }, {
      "left" : "if (t.isComment())",
      "right" : "if (t.isComment())",
      "info" : "IfStatement[62328-63155]:IfStatement[62328-63155]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62347-62422]:Block[62347-62422]"
    }, {
      "left" : "tb.insert(t.asComment());",
      "right" : "tb.insert(t.asComment());",
      "info" : "ExpressionStatement[62365-62390]:ExpressionStatement[62365-62390]"
    }, {
      "left" : "if (t.isDoctype())",
      "right" : "if (t.isDoctype())",
      "info" : "IfStatement[62428-63155]:IfStatement[62428-63155]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62447-62524]:Block[62447-62524]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[62465-62480]:ExpressionStatement[62465-62480]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[62497-62510]:ReturnStatement[62497-62510]"
    }, {
      "left" : "if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))",
      "right" : "if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))",
      "info" : "IfStatement[62530-63155]:IfStatement[62530-63155]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62596-62657]:Block[62596-62657]"
    }, {
      "left" : "return tb.process(t, InBody);",
      "right" : "return tb.process(t, InBody);",
      "info" : "ReturnStatement[62614-62643]:ReturnStatement[62614-62643]"
    }, {
      "left" : "if (t.isEndTag() && t.asEndTag().normalName().equals(\"html\"))",
      "right" : "if (t.isEndTag() && t.asEndTag().normalName().equals(\"html\"))",
      "info" : "IfStatement[62663-63155]:IfStatement[62663-63155]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62725-62950]:Block[62725-62950]"
    }, {
      "left" : "if (tb.isFragmentParsing())",
      "right" : "if (tb.isFragmentParsing())",
      "info" : "IfStatement[62743-62936]:IfStatement[62743-62936]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62771-62860]:Block[62771-62860]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[62793-62808]:ExpressionStatement[62793-62808]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[62829-62842]:ReturnStatement[62829-62842]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62866-62936]:Block[62866-62936]"
    }, {
      "left" : "tb.transition(AfterAfterBody);",
      "right" : "tb.transition(AfterAfterBody);",
      "info" : "ExpressionStatement[62888-62918]:ExpressionStatement[62888-62918]"
    }, {
      "left" : "if (t.isEOF())",
      "right" : "if (t.isEOF())",
      "info" : "IfStatement[62956-63155]:IfStatement[62956-63155]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62971-63025]:Block[62971-63025]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63031-63155]:Block[63031-63155]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[63049-63064]:ExpressionStatement[63049-63064]"
    }, {
      "left" : "tb.transition(InBody);",
      "right" : "tb.transition(InBody);",
      "info" : "ExpressionStatement[63081-63103]:ExpressionStatement[63081-63103]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[63120-63141]:ReturnStatement[63120-63141]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[63168-63180]:ReturnStatement[63168-63180]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[63223-63230]:PrimitiveType[63223-63230]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[63231-63238]:SimpleName[63231-63238]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[63239-63246]:SingleVariableDeclaration[63239-63246]"
    }, {
      "left" : "HtmlTreeBuilder tb",
      "right" : "HtmlTreeBuilder tb",
      "info" : "SingleVariableDeclaration[63248-63266]:SingleVariableDeclaration[63248-63266]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63268-65020]:Block[63268-65020]"
    }, {
      "left" : "if (isWhitespace(t))",
      "right" : "if (isWhitespace(t))",
      "info" : "IfStatement[63282-64985]:IfStatement[63282-64985]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63303-63362]:Block[63303-63362]"
    }, {
      "left" : "tb.insert(t.asCharacter());",
      "right" : "tb.insert(t.asCharacter());",
      "info" : "ExpressionStatement[63321-63348]:ExpressionStatement[63321-63348]"
    }, {
      "left" : "if (t.isComment())",
      "right" : "if (t.isComment())",
      "info" : "IfStatement[63368-64985]:IfStatement[63368-64985]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63387-63444]:Block[63387-63444]"
    }, {
      "left" : "tb.insert(t.asComment());",
      "right" : "tb.insert(t.asComment());",
      "info" : "ExpressionStatement[63405-63430]:ExpressionStatement[63405-63430]"
    }, {
      "left" : "if (t.isDoctype())",
      "right" : "if (t.isDoctype())",
      "info" : "IfStatement[63450-64985]:IfStatement[63450-64985]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63469-63546]:Block[63469-63546]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[63487-63502]:ExpressionStatement[63487-63502]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[63519-63532]:ReturnStatement[63519-63532]"
    }, {
      "left" : "if (t.isStartTag())",
      "right" : "if (t.isStartTag())",
      "info" : "IfStatement[63552-64985]:IfStatement[63552-64985]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63572-64221]:Block[63572-64221]"
    }, {
      "left" : "Token.StartTag start = t.asStartTag();",
      "right" : "Token.StartTag start = t.asStartTag();",
      "info" : "VariableDeclarationStatement[63590-63628]:VariableDeclarationStatement[63590-63628]"
    }, {
      "left" : "switch (start.normalName()) {\n                    case \"html\":\n                        return tb.process(start, InBody);\n                    case \"frameset\":\n                        tb.insert(start);\n                        break;\n                    case \"frame\":\n                        tb.insertEmpty(start);\n                        break;\n                    case \"noframes\":\n                        return tb.process(start, InHead);\n                    default:\n                        tb.error(this);\n                        return false;\n                }",
      "right" : "switch (start.normalName()) {\n                    case \"html\":\n                        return tb.process(start, InBody);\n                    case \"frameset\":\n                        tb.insert(start);\n                        break;\n                    case \"frame\":\n                        tb.insertEmpty(start);\n                        break;\n                    case \"noframes\":\n                        return tb.process(start, InHead);\n                    default:\n                        tb.error(this);\n                        return false;\n                }",
      "info" : "SwitchStatement[63645-64207]:SwitchStatement[63645-64207]"
    }, {
      "left" : "case \"html\":",
      "right" : "case \"html\":",
      "info" : "SwitchCase[63695-63707]:SwitchCase[63695-63707]"
    }, {
      "left" : "return tb.process(start, InBody);",
      "right" : "return tb.process(start, InBody);",
      "info" : "ReturnStatement[63732-63765]:ReturnStatement[63732-63765]"
    }, {
      "left" : "case \"frameset\":",
      "right" : "case \"frameset\":",
      "info" : "SwitchCase[63786-63802]:SwitchCase[63786-63802]"
    }, {
      "left" : "tb.insert(start);",
      "right" : "tb.insert(start);",
      "info" : "ExpressionStatement[63827-63844]:ExpressionStatement[63827-63844]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[63869-63875]:BreakStatement[63869-63875]"
    }, {
      "left" : "case \"frame\":",
      "right" : "case \"frame\":",
      "info" : "SwitchCase[63896-63909]:SwitchCase[63896-63909]"
    }, {
      "left" : "tb.insertEmpty(start);",
      "right" : "tb.insertEmpty(start);",
      "info" : "ExpressionStatement[63934-63956]:ExpressionStatement[63934-63956]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[63981-63987]:BreakStatement[63981-63987]"
    }, {
      "left" : "case \"noframes\":",
      "right" : "case \"noframes\":",
      "info" : "SwitchCase[64008-64024]:SwitchCase[64008-64024]"
    }, {
      "left" : "return tb.process(start, InHead);",
      "right" : "return tb.process(start, InHead);",
      "info" : "ReturnStatement[64049-64082]:ReturnStatement[64049-64082]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[64103-64111]:SwitchCase[64103-64111]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[64136-64151]:ExpressionStatement[64136-64151]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[64176-64189]:ReturnStatement[64176-64189]"
    }, {
      "left" : "if (t.isEndTag() && t.asEndTag().normalName().equals(\"frameset\"))",
      "right" : "if (t.isEndTag() && t.asEndTag().normalName().equals(\"frameset\"))",
      "info" : "IfStatement[64227-64985]:IfStatement[64227-64985]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64293-64709]:Block[64293-64709]"
    }, {
      "left" : "if (tb.currentElement().nodeName().equals(\"html\"))",
      "right" : "if (tb.currentElement().nodeName().equals(\"html\"))",
      "info" : "IfStatement[64311-64695]:IfStatement[64311-64695]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64362-64459]:Block[64362-64459]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[64392-64407]:ExpressionStatement[64392-64407]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[64428-64441]:ReturnStatement[64428-64441]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64465-64695]:Block[64465-64695]"
    }, {
      "left" : "tb.pop();",
      "right" : "tb.pop();",
      "info" : "ExpressionStatement[64487-64496]:ExpressionStatement[64487-64496]"
    }, {
      "left" : "if (!tb.isFragmentParsing() && !tb.currentElement().nodeName().equals(\"frameset\"))",
      "right" : "if (!tb.isFragmentParsing() && !tb.currentElement().nodeName().equals(\"frameset\"))",
      "info" : "IfStatement[64517-64677]:IfStatement[64517-64677]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64600-64677]:Block[64600-64677]"
    }, {
      "left" : "tb.transition(AfterFrameset);",
      "right" : "tb.transition(AfterFrameset);",
      "info" : "ExpressionStatement[64626-64655]:ExpressionStatement[64626-64655]"
    }, {
      "left" : "if (t.isEOF())",
      "right" : "if (t.isEOF())",
      "info" : "IfStatement[64715-64985]:IfStatement[64715-64985]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64730-64902]:Block[64730-64902]"
    }, {
      "left" : "if (!tb.currentElement().nodeName().equals(\"html\"))",
      "right" : "if (!tb.currentElement().nodeName().equals(\"html\"))",
      "info" : "IfStatement[64748-64888]:IfStatement[64748-64888]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64800-64888]:Block[64800-64888]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[64822-64837]:ExpressionStatement[64822-64837]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[64858-64870]:ReturnStatement[64858-64870]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64908-64985]:Block[64908-64985]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[64926-64941]:ExpressionStatement[64926-64941]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[64958-64971]:ReturnStatement[64958-64971]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[64998-65010]:ReturnStatement[64998-65010]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[65056-65063]:PrimitiveType[65056-65063]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[65064-65071]:SimpleName[65064-65071]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[65072-65079]:SingleVariableDeclaration[65072-65079]"
    }, {
      "left" : "HtmlTreeBuilder tb",
      "right" : "HtmlTreeBuilder tb",
      "info" : "SingleVariableDeclaration[65081-65099]:SingleVariableDeclaration[65081-65099]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65101-65988]:Block[65101-65988]"
    }, {
      "left" : "if (isWhitespace(t))",
      "right" : "if (isWhitespace(t))",
      "info" : "IfStatement[65115-65953]:IfStatement[65115-65953]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65136-65195]:Block[65136-65195]"
    }, {
      "left" : "tb.insert(t.asCharacter());",
      "right" : "tb.insert(t.asCharacter());",
      "info" : "ExpressionStatement[65154-65181]:ExpressionStatement[65154-65181]"
    }, {
      "left" : "if (t.isComment())",
      "right" : "if (t.isComment())",
      "info" : "IfStatement[65201-65953]:IfStatement[65201-65953]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65220-65277]:Block[65220-65277]"
    }, {
      "left" : "tb.insert(t.asComment());",
      "right" : "tb.insert(t.asComment());",
      "info" : "ExpressionStatement[65238-65263]:ExpressionStatement[65238-65263]"
    }, {
      "left" : "if (t.isDoctype())",
      "right" : "if (t.isDoctype())",
      "info" : "IfStatement[65283-65953]:IfStatement[65283-65953]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65302-65379]:Block[65302-65379]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[65320-65335]:ExpressionStatement[65320-65335]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[65352-65365]:ReturnStatement[65352-65365]"
    }, {
      "left" : "if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))",
      "right" : "if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))",
      "info" : "IfStatement[65385-65953]:IfStatement[65385-65953]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65451-65512]:Block[65451-65512]"
    }, {
      "left" : "return tb.process(t, InBody);",
      "right" : "return tb.process(t, InBody);",
      "info" : "ReturnStatement[65469-65498]:ReturnStatement[65469-65498]"
    }, {
      "left" : "if (t.isEndTag() && t.asEndTag().normalName().equals(\"html\"))",
      "right" : "if (t.isEndTag() && t.asEndTag().normalName().equals(\"html\"))",
      "info" : "IfStatement[65518-65953]:IfStatement[65518-65953]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65580-65646]:Block[65580-65646]"
    }, {
      "left" : "tb.transition(AfterAfterFrameset);",
      "right" : "tb.transition(AfterAfterFrameset);",
      "info" : "ExpressionStatement[65598-65632]:ExpressionStatement[65598-65632]"
    }, {
      "left" : "if (t.isStartTag() && t.asStartTag().normalName().equals(\"noframes\"))",
      "right" : "if (t.isStartTag() && t.asStartTag().normalName().equals(\"noframes\"))",
      "info" : "IfStatement[65652-65953]:IfStatement[65652-65953]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65722-65783]:Block[65722-65783]"
    }, {
      "left" : "return tb.process(t, InHead);",
      "right" : "return tb.process(t, InHead);",
      "info" : "ReturnStatement[65740-65769]:ReturnStatement[65740-65769]"
    }, {
      "left" : "if (t.isEOF())",
      "right" : "if (t.isEOF())",
      "info" : "IfStatement[65789-65953]:IfStatement[65789-65953]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65804-65870]:Block[65804-65870]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65876-65953]:Block[65876-65953]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[65894-65909]:ExpressionStatement[65894-65909]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[65926-65939]:ReturnStatement[65926-65939]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[65966-65978]:ReturnStatement[65966-65978]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[66025-66032]:PrimitiveType[66025-66032]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[66033-66040]:SimpleName[66033-66040]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[66041-66048]:SingleVariableDeclaration[66041-66048]"
    }, {
      "left" : "HtmlTreeBuilder tb",
      "right" : "HtmlTreeBuilder tb",
      "info" : "SingleVariableDeclaration[66050-66068]:SingleVariableDeclaration[66050-66068]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66070-66567]:Block[66070-66567]"
    }, {
      "left" : "if (t.isComment())",
      "right" : "if (t.isComment())",
      "info" : "IfStatement[66084-66532]:IfStatement[66084-66532]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66103-66160]:Block[66103-66160]"
    }, {
      "left" : "tb.insert(t.asComment());",
      "right" : "tb.insert(t.asComment());",
      "info" : "ExpressionStatement[66121-66146]:ExpressionStatement[66121-66146]"
    }, {
      "left" : "if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")))",
      "right" : "if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")))",
      "info" : "IfStatement[66166-66532]:IfStatement[66166-66532]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66270-66331]:Block[66270-66331]"
    }, {
      "left" : "return tb.process(t, InBody);",
      "right" : "return tb.process(t, InBody);",
      "info" : "ReturnStatement[66288-66317]:ReturnStatement[66288-66317]"
    }, {
      "left" : "if (t.isEOF())",
      "right" : "if (t.isEOF())",
      "info" : "IfStatement[66337-66532]:IfStatement[66337-66532]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66352-66402]:Block[66352-66402]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66408-66532]:Block[66408-66532]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[66426-66441]:ExpressionStatement[66426-66441]"
    }, {
      "left" : "tb.transition(InBody);",
      "right" : "tb.transition(InBody);",
      "info" : "ExpressionStatement[66458-66480]:ExpressionStatement[66458-66480]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[66497-66518]:ReturnStatement[66497-66518]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[66545-66557]:ReturnStatement[66545-66557]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[66608-66615]:PrimitiveType[66608-66615]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[66616-66623]:SimpleName[66616-66623]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[66624-66631]:SingleVariableDeclaration[66624-66631]"
    }, {
      "left" : "HtmlTreeBuilder tb",
      "right" : "HtmlTreeBuilder tb",
      "info" : "SingleVariableDeclaration[66633-66651]:SingleVariableDeclaration[66633-66651]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66653-67240]:Block[66653-67240]"
    }, {
      "left" : "if (t.isComment())",
      "right" : "if (t.isComment())",
      "info" : "IfStatement[66667-67205]:IfStatement[66667-67205]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66686-66743]:Block[66686-66743]"
    }, {
      "left" : "tb.insert(t.asComment());",
      "right" : "tb.insert(t.asComment());",
      "info" : "ExpressionStatement[66704-66729]:ExpressionStatement[66704-66729]"
    }, {
      "left" : "if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")))",
      "right" : "if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")))",
      "info" : "IfStatement[66749-67205]:IfStatement[66749-67205]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66853-66914]:Block[66853-66914]"
    }, {
      "left" : "return tb.process(t, InBody);",
      "right" : "return tb.process(t, InBody);",
      "info" : "ReturnStatement[66871-66900]:ReturnStatement[66871-66900]"
    }, {
      "left" : "if (t.isEOF())",
      "right" : "if (t.isEOF())",
      "info" : "IfStatement[66920-67205]:IfStatement[66920-67205]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66935-66985]:Block[66935-66985]"
    }, {
      "left" : "if (t.isStartTag() && t.asStartTag().normalName().equals(\"noframes\"))",
      "right" : "if (t.isStartTag() && t.asStartTag().normalName().equals(\"noframes\"))",
      "info" : "IfStatement[66991-67205]:IfStatement[66991-67205]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67061-67122]:Block[67061-67122]"
    }, {
      "left" : "return tb.process(t, InHead);",
      "right" : "return tb.process(t, InHead);",
      "info" : "ReturnStatement[67079-67108]:ReturnStatement[67079-67108]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67128-67205]:Block[67128-67205]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[67146-67161]:ExpressionStatement[67146-67161]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[67178-67191]:ReturnStatement[67178-67191]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[67218-67230]:ReturnStatement[67218-67230]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[67277-67284]:PrimitiveType[67277-67284]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[67285-67292]:SimpleName[67285-67292]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[67293-67300]:SingleVariableDeclaration[67293-67300]"
    }, {
      "left" : "HtmlTreeBuilder tb",
      "right" : "HtmlTreeBuilder tb",
      "info" : "SingleVariableDeclaration[67302-67320]:SingleVariableDeclaration[67302-67320]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67322-67416]:Block[67322-67416]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[67336-67348]:ReturnStatement[67336-67348]"
    }, {
      "left" : "abstract",
      "right" : "abstract",
      "info" : "Modifier[67495-67503]:Modifier[67495-67503]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[67504-67511]:PrimitiveType[67504-67511]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[67512-67519]:SimpleName[67512-67519]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[67520-67527]:SingleVariableDeclaration[67520-67527]"
    }, {
      "left" : "HtmlTreeBuilder tb",
      "right" : "HtmlTreeBuilder tb",
      "info" : "SingleVariableDeclaration[67529-67547]:SingleVariableDeclaration[67529-67547]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[67555-67562]:Modifier[67555-67562]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[67563-67569]:Modifier[67563-67569]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[67570-67577]:PrimitiveType[67570-67577]"
    }, {
      "left" : "isWhitespace",
      "right" : "isWhitespace",
      "info" : "SimpleName[67578-67590]:SimpleName[67578-67590]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[67591-67598]:SingleVariableDeclaration[67591-67598]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67600-67762]:Block[67600-67762]"
    }, {
      "left" : "if (t.isCharacter())",
      "right" : "if (t.isCharacter())",
      "info" : "IfStatement[67610-67734]:IfStatement[67610-67734]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67631-67734]:Block[67631-67734]"
    }, {
      "left" : "String data = t.asCharacter().getData();",
      "right" : "String data = t.asCharacter().getData();",
      "info" : "VariableDeclarationStatement[67645-67685]:VariableDeclarationStatement[67645-67685]"
    }, {
      "left" : "return isWhitespace(data);",
      "right" : "return isWhitespace(data);",
      "info" : "ReturnStatement[67698-67724]:ReturnStatement[67698-67724]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[67743-67756]:ReturnStatement[67743-67756]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[67768-67775]:Modifier[67768-67775]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[67776-67782]:Modifier[67776-67782]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[67783-67790]:PrimitiveType[67783-67790]"
    }, {
      "left" : "isWhitespace",
      "right" : "isWhitespace",
      "info" : "SimpleName[67791-67803]:SimpleName[67791-67803]"
    }, {
      "left" : "String data",
      "right" : "String data",
      "info" : "SingleVariableDeclaration[67804-67815]:SingleVariableDeclaration[67804-67815]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67817-68091]:Block[67817-68091]"
    }, {
      "left" : "for (int i = 0; i < data.length(); i++)",
      "right" : "for (int i = 0; i < data.length(); i++)",
      "info" : "ForStatement[67901-68064]:ForStatement[67901-68064]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67941-68064]:Block[67941-68064]"
    }, {
      "left" : "char c = data.charAt(i);",
      "right" : "char c = data.charAt(i);",
      "info" : "VariableDeclarationStatement[67955-67979]:VariableDeclarationStatement[67955-67979]"
    }, {
      "left" : "if (!StringUtil.isWhitespace(c))",
      "right" : "if (!StringUtil.isWhitespace(c))",
      "info" : "IfStatement[67992-68054]:IfStatement[67992-68054]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[68041-68054]:ReturnStatement[68041-68054]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[68073-68085]:ReturnStatement[68073-68085]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[68097-68104]:Modifier[68097-68104]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[68105-68111]:Modifier[68105-68111]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[68112-68116]:PrimitiveType[68112-68116]"
    }, {
      "left" : "handleRcData",
      "right" : "handleRcData",
      "info" : "SimpleName[68117-68129]:SimpleName[68117-68129]"
    }, {
      "left" : "Token.StartTag startTag",
      "right" : "Token.StartTag startTag",
      "info" : "SingleVariableDeclaration[68130-68153]:SingleVariableDeclaration[68130-68153]"
    }, {
      "left" : "HtmlTreeBuilder tb",
      "right" : "HtmlTreeBuilder tb",
      "info" : "SingleVariableDeclaration[68155-68173]:SingleVariableDeclaration[68155-68173]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68175-68328]:Block[68175-68328]"
    }, {
      "left" : "tb.tokeniser.transition(TokeniserState.Rcdata);",
      "right" : "tb.tokeniser.transition(TokeniserState.Rcdata);",
      "info" : "ExpressionStatement[68185-68232]:ExpressionStatement[68185-68232]"
    }, {
      "left" : "tb.markInsertionMode();",
      "right" : "tb.markInsertionMode();",
      "info" : "ExpressionStatement[68241-68264]:ExpressionStatement[68241-68264]"
    }, {
      "left" : "tb.transition(Text);",
      "right" : "tb.transition(Text);",
      "info" : "ExpressionStatement[68273-68293]:ExpressionStatement[68273-68293]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[68302-68322]:ExpressionStatement[68302-68322]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[68334-68341]:Modifier[68334-68341]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[68342-68348]:Modifier[68342-68348]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[68349-68353]:PrimitiveType[68349-68353]"
    }, {
      "left" : "handleRawtext",
      "right" : "handleRawtext",
      "info" : "SimpleName[68354-68367]:SimpleName[68354-68367]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68413-68567]:Block[68413-68567]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[68423-68443]:ExpressionStatement[68541-68561]"
    }, {
      "left" : "tb.tokeniser.transition(TokeniserState.Rawtext);",
      "right" : "tb.tokeniser.transition(TokeniserState.Rawtext);",
      "info" : "ExpressionStatement[68452-68500]:ExpressionStatement[68423-68471]"
    }, {
      "left" : "tb.markInsertionMode();",
      "right" : "tb.markInsertionMode();",
      "info" : "ExpressionStatement[68509-68532]:ExpressionStatement[68480-68503]"
    }, {
      "left" : "tb.transition(Text);",
      "right" : "tb.transition(Text);",
      "info" : "ExpressionStatement[68541-68561]:ExpressionStatement[68512-68532]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[68737-68744]:Modifier[68737-68744]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[68745-68751]:Modifier[68745-68751]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[68752-68757]:Modifier[68752-68757]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[68758-68763]:TYPE_DECLARATION_KIND[68758-68763]"
    }, {
      "left" : "Constants",
      "right" : "Constants",
      "info" : "SimpleName[68764-68773]:SimpleName[68764-68773]"
    } ]
  },
  "interFileMappings" : { }
}