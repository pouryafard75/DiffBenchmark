{
  "matchedElements" : [
 {
    "left" : "",
    "right" : "",
    "info" : "TypeDeclaration[1318-6482]:TypeDeclaration[1318-7032]"
  }, {
    "left" : "",
    "right" : "",
    "info" : "FieldDeclaration[2531-2700]:FieldDeclaration[2531-2700]"
  }, {
    "left" : "/**\n     * A key is pointing to the warning message text in \"messages.properties\"\n     * file.\n     */\n    public static final String MSG_VARIABLE = \"require.this.variable\";",
    "right" : "/**\n     * A key is pointing to the warning message text in \"messages.properties\"\n     * file.\n     */\n    public static final String MSG_VARIABLE = \"require.this.variable\";",
    "info" : "FieldDeclaration[2706-2879]:FieldDeclaration[2706-2879]"
  }, {
    "left" : "/** whether we should check fields usage. */\n    private boolean checkFields = true;",
    "right" : "/** whether we should check fields usage. */\n    private boolean checkFields = true;",
    "info" : "FieldDeclaration[2885-2969]:FieldDeclaration[2885-2969]"
  }, {
    "left" : "/** whether we should check methods usage. */\n    private boolean checkMethods = true;",
    "right" : "/** whether we should check methods usage. */\n    private boolean checkMethods = true;",
    "info" : "FieldDeclaration[2974-3060]:FieldDeclaration[2974-3060]"
  }, {
    "left" : "/**\n     * Setter for checkFields property.\n     * @param checkFields should we check fields usage or not.\n     */\n    public void setCheckFields(boolean checkFields) {\n        this.checkFields = checkFields;\n    }",
    "right" : "/**\n     * Setter for checkFields property.\n     * @param checkFields should we check fields usage or not.\n     */\n    public void setCheckFields(boolean checkFields) {\n        this.checkFields = checkFields;\n    }",
    "info" : "MethodDeclaration[3066-3280]:MethodDeclaration[3066-3280]"
  }, {
    "left" : "/**\n     * Setter for checkMethods property.\n     * @param checkMethods should we check methods usage or not.\n     */\n    public void setCheckMethods(boolean checkMethods) {\n        this.checkMethods = checkMethods;\n    }",
    "right" : "/**\n     * Setter for checkMethods property.\n     * @param checkMethods should we check methods usage or not.\n     */\n    public void setCheckMethods(boolean checkMethods) {\n        this.checkMethods = checkMethods;\n    }",
    "info" : "MethodDeclaration[3286-3507]:MethodDeclaration[3286-3507]"
  }, {
    "left" : "@Override\n    public int[] getDefaultTokens() {\n        return new int[] {\n            TokenTypes.CLASS_DEF,\n            TokenTypes.CTOR_DEF,\n            TokenTypes.ENUM_DEF,\n            TokenTypes.IDENT,\n            TokenTypes.INTERFACE_DEF,\n            TokenTypes.METHOD_DEF,\n            TokenTypes.PARAMETER_DEF,\n            TokenTypes.SLIST,\n            TokenTypes.VARIABLE_DEF,\n        };\n    }",
    "right" : "@Override\n    public int[] getDefaultTokens() {\n        return new int[] {\n            TokenTypes.CLASS_DEF,\n            TokenTypes.CTOR_DEF,\n            TokenTypes.ENUM_DEF,\n            TokenTypes.IDENT,\n            TokenTypes.INTERFACE_DEF,\n            TokenTypes.METHOD_DEF,\n            TokenTypes.PARAMETER_DEF,\n            TokenTypes.SLIST,\n            TokenTypes.VARIABLE_DEF,\n        };\n    }",
    "info" : "MethodDeclaration[3513-3912]:MethodDeclaration[3513-3912]"
  }, {
    "left" : "@Override\n    public int[] getRequiredTokens() {\n        return getDefaultTokens();\n    }",
    "right" : "@Override\n    public int[] getRequiredTokens() {\n        return getDefaultTokens();\n    }",
    "info" : "MethodDeclaration[3918-4007]:MethodDeclaration[3918-4007]"
  }, {
    "left" : "@Override\n    public int[] getAcceptableTokens() {\n        return new int[] {\n            TokenTypes.IDENT,\n        };\n    }",
    "right" : "@Override\n    public int[] getAcceptableTokens() {\n        return new int[] {\n            TokenTypes.IDENT,\n        };\n    }",
    "info" : "MethodDeclaration[4013-4137]:MethodDeclaration[4013-4137]"
  }, {
    "left" : "@Override\n    public void visitToken(DetailAST ast) {\n        super.visitToken(ast);\n        if (ast.getType() == TokenTypes.IDENT) {\n            processIDENT(ast);\n        }\n    }",
    "right" : "@Override\n    public void visitToken(DetailAST ast) {\n        super.visitToken(ast);\n        if (ast.getType() == TokenTypes.IDENT) {\n            processIDENT(ast);\n        }\n    }",
    "info" : "MethodDeclaration[4143-4323]:MethodDeclaration[4143-4323]"
  }, {
    "left" : "/**\n     * Checks if a given IDENT is method call or field name which\n     * require explicit <code>this</code> qualifier.\n     *\n     * @param ast IDENT to check.\n     */\n    private void processIDENT(DetailAST ast) {\n        final int parentType = ast.getParent().getType();\n\n        if (parentType == TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR\n            || parentType == TokenTypes.ANNOTATION\n            || parentType == TokenTypes.ANNOTATION_FIELD_DEF) {\n            //cannot refer to 'this' from annotations\n            return;\n        }\n\n        // let's check method calls\n        if (parentType == TokenTypes.METHOD_CALL) {\n            if (checkMethods && isClassMethod(ast.getText())) {\n                log(ast, \"require.this.method\", ast.getText());\n            }\n            return;\n        }\n\n        // let's check fields\n        if (!checkFields) {\n            // we shouldn't check fields\n            return;\n        }\n\n        if (ScopeUtils.getSurroundingScope(ast) == null) {\n            // it is not a class or interface it's\n            // either import or package\n            // we shouldn't checks this\n            return;\n        }\n\n        if (parentType == TokenTypes.DOT\n            && ast.getPreviousSibling() != null) {\n            // it's the method name in a method call; no problem\n            return;\n        }\n        if (parentType == TokenTypes.TYPE\n            || parentType == TokenTypes.LITERAL_NEW) {\n            // it's a type name; no problem\n            return;\n        }\n        if (parentType == TokenTypes.VARIABLE_DEF\n            || parentType == TokenTypes.CTOR_DEF\n            || parentType == TokenTypes.METHOD_DEF\n            || parentType == TokenTypes.CLASS_DEF\n            || parentType == TokenTypes.ENUM_DEF\n            || parentType == TokenTypes.INTERFACE_DEF\n            || parentType == TokenTypes.PARAMETER_DEF\n            || parentType == TokenTypes.TYPE_ARGUMENT) {\n            // it's being declared; no problem\n            return;\n        }\n\n        final String name = ast.getText();\n        if (isClassField(name)) {\n            log(ast, \"require.this.variable\", name);\n        }\n    }",
    "right" : "/**\n     * check that token is related to Definition tokens\n     * @param parentType token Type\n     * @return true if token is related to Definition Tokens\n     */\n    private boolean isDeclarationToken(int parentType) {\n        return parentType == TokenTypes.VARIABLE_DEF\n            || parentType == TokenTypes.CTOR_DEF\n            || parentType == TokenTypes.METHOD_DEF\n            || parentType == TokenTypes.CLASS_DEF\n            || parentType == TokenTypes.ENUM_DEF\n            || parentType == TokenTypes.INTERFACE_DEF\n            || parentType == TokenTypes.PARAMETER_DEF\n            || parentType == TokenTypes.TYPE_ARGUMENT;\n    }",
    "info" : "MethodDeclaration[4329-6480]:MethodDeclaration[6388-7030]"
  } ],
  "mappings" : [
 {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[2465-2471]:Modifier[2465-2471]"
  }, {
    "left" : "DeclarationCollector",
    "right" : "DeclarationCollector",
    "info" : "SimpleType[2503-2523]:SimpleType[2503-2523]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[3185-3191]:Modifier[3185-3191]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[3192-3196]:PrimitiveType[3192-3196]"
  }, {
    "left" : "boolean checkFields",
    "right" : "boolean checkFields",
    "info" : "SingleVariableDeclaration[3212-3231]:SingleVariableDeclaration[3212-3231]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3233-3280]:Block[3233-3280]"
  }, {
    "left" : "this.checkFields = checkFields;",
    "right" : "this.checkFields = checkFields;",
    "info" : "ExpressionStatement[3243-3274]:ExpressionStatement[3243-3274]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[3408-3414]:Modifier[3408-3414]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[3415-3419]:PrimitiveType[3415-3419]"
  }, {
    "left" : "boolean checkMethods",
    "right" : "boolean checkMethods",
    "info" : "SingleVariableDeclaration[3436-3456]:SingleVariableDeclaration[3436-3456]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3458-3507]:Block[3458-3507]"
  }, {
    "left" : "this.checkMethods = checkMethods;",
    "right" : "this.checkMethods = checkMethods;",
    "info" : "ExpressionStatement[3468-3501]:ExpressionStatement[3468-3501]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[3513-3522]:MarkerAnnotation[3513-3522]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[3527-3533]:Modifier[3527-3533]"
  }, {
    "left" : "int[]",
    "right" : "int[]",
    "info" : "ArrayType[3534-3539]:ArrayType[3534-3539]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3559-3912]:Block[3559-3912]"
  }, {
    "left" : "return new int[] {\n            TokenTypes.CLASS_DEF,\n            TokenTypes.CTOR_DEF,\n            TokenTypes.ENUM_DEF,\n            TokenTypes.IDENT,\n            TokenTypes.INTERFACE_DEF,\n            TokenTypes.METHOD_DEF,\n            TokenTypes.PARAMETER_DEF,\n            TokenTypes.SLIST,\n            TokenTypes.VARIABLE_DEF,\n        };",
    "right" : "return new int[] {\n            TokenTypes.CLASS_DEF,\n            TokenTypes.CTOR_DEF,\n            TokenTypes.ENUM_DEF,\n            TokenTypes.IDENT,\n            TokenTypes.INTERFACE_DEF,\n            TokenTypes.METHOD_DEF,\n            TokenTypes.PARAMETER_DEF,\n            TokenTypes.SLIST,\n            TokenTypes.VARIABLE_DEF,\n        };",
    "info" : "ReturnStatement[3569-3906]:ReturnStatement[3569-3906]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[3918-3927]:MarkerAnnotation[3918-3927]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[3932-3938]:Modifier[3932-3938]"
  }, {
    "left" : "int[]",
    "right" : "int[]",
    "info" : "ArrayType[3939-3944]:ArrayType[3939-3944]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3965-4007]:Block[3965-4007]"
  }, {
    "left" : "return getDefaultTokens();",
    "right" : "return getDefaultTokens();",
    "info" : "ReturnStatement[3975-4001]:ReturnStatement[3975-4001]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[4013-4022]:MarkerAnnotation[4013-4022]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[4027-4033]:Modifier[4027-4033]"
  }, {
    "left" : "int[]",
    "right" : "int[]",
    "info" : "ArrayType[4034-4039]:ArrayType[4034-4039]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4062-4137]:Block[4062-4137]"
  }, {
    "left" : "return new int[] {\n            TokenTypes.IDENT,\n        };",
    "right" : "return new int[] {\n            TokenTypes.IDENT,\n        };",
    "info" : "ReturnStatement[4072-4131]:ReturnStatement[4072-4131]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[4143-4152]:MarkerAnnotation[4143-4152]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[4157-4163]:Modifier[4157-4163]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[4164-4168]:PrimitiveType[4164-4168]"
  }, {
    "left" : "DetailAST ast",
    "right" : "DetailAST ast",
    "info" : "SingleVariableDeclaration[4180-4193]:SingleVariableDeclaration[4180-4193]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4195-4323]:Block[4195-4323]"
  }, {
    "left" : "super.visitToken(ast);",
    "right" : "super.visitToken(ast);",
    "info" : "ExpressionStatement[4205-4227]:ExpressionStatement[4205-4227]"
  }, {
    "left" : "if (ast.getType() == TokenTypes.IDENT)",
    "right" : "if (ast.getType() == TokenTypes.IDENT)",
    "info" : "IfStatement[4236-4317]:IfStatement[4236-4317]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4275-4317]:Block[4275-4317]"
  }, {
    "left" : "processIDENT(ast);",
    "right" : "processIDENT(ast);",
    "info" : "ExpressionStatement[4289-4307]:ExpressionStatement[4289-4307]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[4505-4512]:Modifier[4505-4512]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[4513-4517]:PrimitiveType[4513-4517]"
  }, {
    "left" : "DetailAST ast",
    "right" : "DetailAST ast",
    "info" : "SingleVariableDeclaration[4531-4544]:SingleVariableDeclaration[4531-4544]"
  }, {
    "left" : "final int parentType = ast.getParent().getType();",
    "right" : "final int parentType = ast.getParent().getType();",
    "info" : "VariableDeclarationStatement[4556-4605]:VariableDeclarationStatement[4556-4605]"
  }, {
    "left" : "parentType",
    "right" : "parentType",
    "info" : "SimpleName[4619-4629]:SimpleName[4622-4632]"
  }, {
    "left" : "TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR",
    "right" : "TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR",
    "info" : "QualifiedName[4633-4672]:QualifiedName[4653-4692]"
  }, {
    "left" : "parentType",
    "right" : "parentType",
    "info" : "SimpleName[4688-4698]:SimpleName[5512-5522]"
  }, {
    "left" : "TokenTypes.ANNOTATION",
    "right" : "TokenTypes.ANNOTATION",
    "info" : "QualifiedName[4702-4723]:QualifiedName[4711-4732]"
  }, {
    "left" : "parentType",
    "right" : "parentType",
    "info" : "SimpleName[4739-4749]:SimpleName[6144-6154]"
  }, {
    "left" : "TokenTypes.ANNOTATION_FIELD_DEF",
    "right" : "TokenTypes.ANNOTATION_FIELD_DEF",
    "info" : "QualifiedName[4753-4784]:QualifiedName[4751-4782]"
  }, {
    "left" : "parentType",
    "right" : "parentType",
    "info" : "SimpleName[4921-4931]:SimpleName[5237-5247]"
  }, {
    "left" : "TokenTypes.METHOD_CALL",
    "right" : "TokenTypes.METHOD_CALL",
    "info" : "QualifiedName[4935-4957]:QualifiedName[4880-4902]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4959-5132]:Block[4904-5140]"
  }, {
    "left" : "if (checkMethods && isClassMethod(ast.getText()))",
    "right" : "if (checkMethods && isClassMethod(ast.getText()))",
    "info" : "IfStatement[4973-5102]:IfStatement[4966-5103]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5023-5102]:Block[5016-5103]"
  }, {
    "left" : "log(ast, \"require.this.method\", ast.getText());",
    "right" : "log(ast, \"require.this.method\", ast.getText());",
    "info" : "ExpressionStatement[5041-5088]:ExpressionStatement[5038-5085]"
  }, {
    "left" : "if (!checkFields)",
    "right" : "if (checkFields)",
    "info" : "IfStatement[5172-5262]:IfStatement[5180-5267]"
  }, {
    "left" : "checkFields",
    "right" : "checkFields",
    "info" : "SimpleName[5177-5188]:SimpleName[5184-5195]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5190-5262]:Block[5197-5267]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[5245-5252]:ReturnStatement[6218-6225]"
  }, {
    "left" : "if (ScopeUtils.getSurroundingScope(ast) == null)",
    "right" : "if (ScopeUtils.getSurroundingScope(ast) == null)",
    "info" : "IfStatement[5272-5483]:IfStatement[5534-5745]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5321-5483]:Block[5583-5745]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[5466-5473]:ReturnStatement[5728-5735]"
  }, {
    "left" : "if (parentType == TokenTypes.DOT\n            && ast.getPreviousSibling() != null)",
    "right" : "if (parentType == TokenTypes.DOT\n                && ast.getPreviousSibling() != null)",
    "info" : "IfStatement[5493-5671]:IfStatement[5755-5937]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5575-5671]:Block[5841-5937]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[5654-5661]:ReturnStatement[5920-5927]"
  }, {
    "left" : "if (parentType == TokenTypes.TYPE\n            || parentType == TokenTypes.LITERAL_NEW)",
    "right" : "if (parentType == TokenTypes.TYPE\n                || parentType == TokenTypes.LITERAL_NEW)",
    "info" : "IfStatement[5680-5842]:IfStatement[5946-6112]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5767-5842]:Block[6037-6112]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[5825-5832]:ReturnStatement[6095-6102]"
  }, {
    "left" : "parentType == TokenTypes.VARIABLE_DEF\n            || parentType == TokenTypes.CTOR_DEF\n            || parentType == TokenTypes.METHOD_DEF\n            || parentType == TokenTypes.CLASS_DEF\n            || parentType == TokenTypes.ENUM_DEF\n            || parentType == TokenTypes.INTERFACE_DEF\n            || parentType == TokenTypes.PARAMETER_DEF\n            || parentType == TokenTypes.TYPE_ARGUMENT",
    "right" : "parentType == TokenTypes.VARIABLE_DEF\n            || parentType == TokenTypes.CTOR_DEF\n            || parentType == TokenTypes.METHOD_DEF\n            || parentType == TokenTypes.CLASS_DEF\n            || parentType == TokenTypes.ENUM_DEF\n            || parentType == TokenTypes.INTERFACE_DEF\n            || parentType == TokenTypes.PARAMETER_DEF\n            || parentType == TokenTypes.TYPE_ARGUMENT",
    "info" : "InfixExpression[5855-6253]:InfixExpression[6625-7023]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6255-6333]:Block[6608-7030]"
  }, {
    "left" : "return;",
    "right" : "return parentType == TokenTypes.VARIABLE_DEF\n            || parentType == TokenTypes.CTOR_DEF\n            || parentType == TokenTypes.METHOD_DEF\n            || parentType == TokenTypes.CLASS_DEF\n            || parentType == TokenTypes.ENUM_DEF\n            || parentType == TokenTypes.INTERFACE_DEF\n            || parentType == TokenTypes.PARAMETER_DEF\n            || parentType == TokenTypes.TYPE_ARGUMENT;",
    "info" : "ReturnStatement[6316-6323]:ReturnStatement[6618-7024]"
  }, {
    "left" : "final String name = ast.getText();",
    "right" : "final String name = ast.getText();",
    "info" : "VariableDeclarationStatement[6343-6377]:VariableDeclarationStatement[6245-6279]"
  }, {
    "left" : "if (isClassField(name))",
    "right" : "if (isClassField(name))",
    "info" : "IfStatement[6386-6474]:IfStatement[6288-6376]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6410-6474]:Block[6312-6376]"
  }, {
    "left" : "log(ast, \"require.this.variable\", name);",
    "right" : "log(ast, \"require.this.variable\", name);",
    "info" : "ExpressionStatement[6424-6464]:ExpressionStatement[6326-6366]"
  } ]
}