{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "private static final Pattern charsetPattern = Pattern.compile(\"(?i)\\\\bcharset=\\\\s*(?:\\\"|')?([^\\\\s,;\\\"']*)\");",
      "right" : "private static final Pattern charsetPattern = Pattern.compile(\"(?i)\\\\bcharset=\\\\s*(?:\\\"|')?([^\\\\s,;\\\"']*)\");",
      "info" : "FieldDeclaration[434-542]:FieldDeclaration[434-542]"
    }, {
      "left" : "static final String defaultCharset = \"UTF-8\";",
      "right" : "static final String defaultCharset = \"UTF-8\";",
      "info" : "FieldDeclaration[547-592]:FieldDeclaration[547-592]"
    }, {
      "left" : "private static final int bufferSize = 0x20000;",
      "right" : "private static final int bufferSize = 0x20000;",
      "info" : "FieldDeclaration[644-690]:FieldDeclaration[644-690]"
    }, {
      "left" : "private DataUtil()",
      "right" : "private DataUtil()",
      "info" : "MethodDeclaration[706-727]:MethodDeclaration[706-727]"
    }, {
      "left" : "public static Document load(File in, String charsetName, String baseUri) throws IOException",
      "right" : "public static Document load(File in, String charsetName, String baseUri) throws IOException",
      "info" : "MethodDeclaration[733-1453]:MethodDeclaration[733-1453]"
    }, {
      "left" : "public static Document load(InputStream in, String charsetName, String baseUri) throws IOException",
      "right" : "public static Document load(InputStream in, String charsetName, String baseUri) throws IOException",
      "info" : "MethodDeclaration[1459-2019]:MethodDeclaration[1459-2019]"
    }, {
      "left" : "public static Document load(InputStream in, String charsetName, String baseUri, Parser parser) throws IOException",
      "right" : "public static Document load(InputStream in, String charsetName, String baseUri, Parser parser) throws IOException",
      "info" : "MethodDeclaration[2025-2687]:MethodDeclaration[2025-2687]"
    }, {
      "left" : "static ByteBuffer readToByteBuffer(InputStream inStream, int maxSize) throws IOException",
      "right" : "static ByteBuffer readToByteBuffer(InputStream inStream, int maxSize) throws IOException",
      "info" : "MethodDeclaration[5687-6903]:MethodDeclaration[5711-6927]"
    }, {
      "left" : "static ByteBuffer readToByteBuffer(InputStream inStream) throws IOException",
      "right" : "static ByteBuffer readToByteBuffer(InputStream inStream) throws IOException",
      "info" : "MethodDeclaration[6909-7038]:MethodDeclaration[6933-7062]"
    }, {
      "left" : "static String getCharsetFromContentType(String contentType)",
      "right" : "static String getCharsetFromContentType(String contentType)",
      "info" : "MethodDeclaration[7044-8113]:MethodDeclaration[7068-8137]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[725-727]:Block[725-727]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1096-1453]:Block[1096-1453]"
    }, {
      "left" : "FileInputStream inStream = null;",
      "right" : "FileInputStream inStream = null;",
      "info" : "VariableDeclarationStatement[1106-1138]:VariableDeclarationStatement[1106-1138]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[1147-1447]:TryStatement[1147-1447]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1151-1359]:Block[1151-1359]"
    }, {
      "left" : "inStream = new FileInputStream(in);",
      "right" : "inStream = new FileInputStream(in);",
      "info" : "ExpressionStatement[1165-1200]:ExpressionStatement[1165-1200]"
    }, {
      "left" : "ByteBuffer byteData = readToByteBuffer(inStream);",
      "right" : "ByteBuffer byteData = readToByteBuffer(inStream);",
      "info" : "VariableDeclarationStatement[1213-1262]:VariableDeclarationStatement[1213-1262]"
    }, {
      "left" : "return parseByteData(byteData, charsetName, baseUri, Parser.htmlParser());",
      "right" : "return parseByteData(byteData, charsetName, baseUri, Parser.htmlParser());",
      "info" : "ReturnStatement[1275-1349]:ReturnStatement[1275-1349]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1368-1447]:Block[1368-1447]"
    }, {
      "left" : "if (inStream != null)",
      "right" : "if (inStream != null)",
      "info" : "IfStatement[1382-1437]:IfStatement[1382-1437]"
    }, {
      "left" : "inStream.close();",
      "right" : "inStream.close();",
      "info" : "ExpressionStatement[1420-1437]:ExpressionStatement[1420-1437]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1877-2019]:Block[1877-2019]"
    }, {
      "left" : "ByteBuffer byteData = readToByteBuffer(in);",
      "right" : "ByteBuffer byteData = readToByteBuffer(in);",
      "info" : "VariableDeclarationStatement[1887-1930]:VariableDeclarationStatement[1887-1930]"
    }, {
      "left" : "return parseByteData(byteData, charsetName, baseUri, Parser.htmlParser());",
      "right" : "return parseByteData(byteData, charsetName, baseUri, Parser.htmlParser());",
      "info" : "ReturnStatement[1939-2013]:ReturnStatement[1939-2013]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2558-2687]:Block[2558-2687]"
    }, {
      "left" : "ByteBuffer byteData = readToByteBuffer(in);",
      "right" : "ByteBuffer byteData = readToByteBuffer(in);",
      "info" : "VariableDeclarationStatement[2568-2611]:VariableDeclarationStatement[2568-2611]"
    }, {
      "left" : "return parseByteData(byteData, charsetName, baseUri, parser);",
      "right" : "return parseByteData(byteData, charsetName, baseUri, parser);",
      "info" : "ReturnStatement[2620-2681]:ReturnStatement[2620-2681]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6119-6903]:Block[6143-6927]"
    }, {
      "left" : "Validate.isTrue(maxSize >= 0, \"maxSize must be 0 (unlimited) or larger\");",
      "right" : "Validate.isTrue(maxSize >= 0, \"maxSize must be 0 (unlimited) or larger\");",
      "info" : "ExpressionStatement[6129-6202]:ExpressionStatement[6153-6226]"
    }, {
      "left" : "final boolean capped = maxSize > 0;",
      "right" : "final boolean capped = maxSize > 0;",
      "info" : "VariableDeclarationStatement[6211-6246]:VariableDeclarationStatement[6235-6270]"
    }, {
      "left" : "byte[] buffer = new byte[bufferSize];",
      "right" : "byte[] buffer = new byte[bufferSize];",
      "info" : "VariableDeclarationStatement[6255-6292]:VariableDeclarationStatement[6279-6316]"
    }, {
      "left" : "ByteArrayOutputStream outStream = new ByteArrayOutputStream(bufferSize);",
      "right" : "ByteArrayOutputStream outStream = new ByteArrayOutputStream(bufferSize);",
      "info" : "VariableDeclarationStatement[6301-6373]:VariableDeclarationStatement[6325-6397]"
    }, {
      "left" : "int read;",
      "right" : "int read;",
      "info" : "VariableDeclarationStatement[6382-6391]:VariableDeclarationStatement[6406-6415]"
    }, {
      "left" : "int remaining = maxSize;",
      "right" : "int remaining = maxSize;",
      "info" : "VariableDeclarationStatement[6400-6424]:VariableDeclarationStatement[6424-6448]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[6434-6800]:WhileStatement[6458-6824]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6447-6800]:Block[6471-6824]"
    }, {
      "left" : "read = inStream.read(buffer);",
      "right" : "read = inStream.read(buffer);",
      "info" : "ExpressionStatement[6461-6490]:ExpressionStatement[6485-6514]"
    }, {
      "left" : "if (read == -1)",
      "right" : "if (read == -1)",
      "info" : "IfStatement[6503-6525]:IfStatement[6527-6549]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[6519-6525]:BreakStatement[6543-6549]"
    }, {
      "left" : "if (capped)",
      "right" : "if (capped)",
      "info" : "IfStatement[6538-6744]:IfStatement[6562-6768]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6550-6744]:Block[6574-6768]"
    }, {
      "left" : "if (read > remaining)",
      "right" : "if (read > remaining)",
      "info" : "IfStatement[6568-6695]:IfStatement[6592-6719]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6590-6695]:Block[6614-6719]"
    }, {
      "left" : "outStream.write(buffer, 0, remaining);",
      "right" : "outStream.write(buffer, 0, remaining);",
      "info" : "ExpressionStatement[6612-6650]:ExpressionStatement[6636-6674]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[6671-6677]:BreakStatement[6695-6701]"
    }, {
      "left" : "remaining -= read;",
      "right" : "remaining -= read;",
      "info" : "ExpressionStatement[6712-6730]:ExpressionStatement[6736-6754]"
    }, {
      "left" : "outStream.write(buffer, 0, read);",
      "right" : "outStream.write(buffer, 0, read);",
      "info" : "ExpressionStatement[6757-6790]:ExpressionStatement[6781-6814]"
    }, {
      "left" : "ByteBuffer byteData = ByteBuffer.wrap(outStream.toByteArray());",
      "right" : "ByteBuffer byteData = ByteBuffer.wrap(outStream.toByteArray());",
      "info" : "VariableDeclarationStatement[6809-6872]:VariableDeclarationStatement[6833-6896]"
    }, {
      "left" : "return byteData;",
      "right" : "return byteData;",
      "info" : "ReturnStatement[6881-6897]:ReturnStatement[6905-6921]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6985-7038]:Block[7009-7062]"
    }, {
      "left" : "return readToByteBuffer(inStream, 0);",
      "right" : "return readToByteBuffer(inStream, 0);",
      "info" : "ReturnStatement[6995-7032]:ReturnStatement[7019-7056]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7400-8113]:Block[7424-8137]"
    }, {
      "left" : "if (contentType == null)",
      "right" : "if (contentType == null)",
      "info" : "IfStatement[7410-7447]:IfStatement[7434-7471]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[7435-7447]:ReturnStatement[7459-7471]"
    }, {
      "left" : "Matcher m = charsetPattern.matcher(contentType);",
      "right" : "Matcher m = charsetPattern.matcher(contentType);",
      "info" : "VariableDeclarationStatement[7456-7504]:VariableDeclarationStatement[7480-7528]"
    }, {
      "left" : "if (m.find())",
      "right" : "if (m.find())",
      "info" : "IfStatement[7513-8086]:IfStatement[7537-8110]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7527-8086]:Block[7551-8110]"
    }, {
      "left" : "String charset = m.group(1).trim();",
      "right" : "String charset = m.group(1).trim();",
      "info" : "VariableDeclarationStatement[7541-7576]:VariableDeclarationStatement[7565-7600]"
    }, {
      "left" : "charset = charset.replace(\"charset=\", \"\");",
      "right" : "charset = charset.replace(\"charset=\", \"\");",
      "info" : "ExpressionStatement[7589-7631]:ExpressionStatement[7613-7655]"
    }, {
      "left" : "if (charset.isEmpty())",
      "right" : "if (charset.isEmpty())",
      "info" : "IfStatement[7644-7679]:IfStatement[7668-7703]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[7667-7679]:ReturnStatement[7691-7703]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[7692-8076]:TryStatement[7716-8100]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7696-7906]:Block[7720-7930]"
    }, {
      "left" : "if (Charset.isSupported(charset))",
      "right" : "if (Charset.isSupported(charset))",
      "info" : "IfStatement[7714-7763]:IfStatement[7738-7787]"
    }, {
      "left" : "return charset;",
      "right" : "return charset;",
      "info" : "ReturnStatement[7748-7763]:ReturnStatement[7772-7787]"
    }, {
      "left" : "charset = charset.toUpperCase(Locale.ENGLISH);",
      "right" : "charset = charset.toUpperCase(Locale.ENGLISH);",
      "info" : "ExpressionStatement[7780-7826]:ExpressionStatement[7804-7850]"
    }, {
      "left" : "if (Charset.isSupported(charset))",
      "right" : "if (Charset.isSupported(charset))",
      "info" : "IfStatement[7843-7892]:IfStatement[7867-7916]"
    }, {
      "left" : "return charset;",
      "right" : "return charset;",
      "info" : "ReturnStatement[7877-7892]:ReturnStatement[7901-7916]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7945-8076]:Block[7969-8100]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[8050-8062]:ReturnStatement[8074-8086]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[8095-8107]:ReturnStatement[8119-8131]"
    } ]
  },
  "interFileMappings" : { }
}