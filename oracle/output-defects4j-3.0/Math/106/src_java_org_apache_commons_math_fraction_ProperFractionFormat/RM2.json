{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "ProperFractionFormat",
      "right" : "ProperFractionFormat",
      "info" : "TypeDeclaration[826-7589]:TypeDeclaration[826-7815]"
    }, {
      "left" : "private static final long serialVersionUID = -6337346779577272307L;",
      "right" : "private static final long serialVersionUID = -6337346779577272307L;",
      "info" : "FieldDeclaration[1302-1413]:FieldDeclaration[1302-1413]"
    }, {
      "left" : "private NumberFormat wholeFormat;",
      "right" : "private NumberFormat wholeFormat;",
      "info" : "FieldDeclaration[1425-1508]:FieldDeclaration[1425-1508]"
    }, {
      "left" : "public ProperFractionFormat()",
      "right" : "public ProperFractionFormat()",
      "info" : "MethodDeclaration[1516-1741]:MethodDeclaration[1516-1741]"
    }, {
      "left" : "public ProperFractionFormat(NumberFormat format)",
      "right" : "public ProperFractionFormat(NumberFormat format)",
      "info" : "MethodDeclaration[1753-2132]:MethodDeclaration[1753-2132]"
    }, {
      "left" : "public ProperFractionFormat(NumberFormat wholeFormat,\r\n            NumberFormat numeratorFormat,\r\n            NumberFormat denominatorFormat)",
      "right" : "public ProperFractionFormat(NumberFormat wholeFormat,\r\n            NumberFormat numeratorFormat,\r\n            NumberFormat denominatorFormat)",
      "info" : "MethodDeclaration[2144-2738]:MethodDeclaration[2144-2738]"
    }, {
      "left" : "public StringBuffer format(Fraction fraction, StringBuffer toAppendTo,\r\n            FieldPosition pos)",
      "right" : "public StringBuffer format(Fraction fraction, StringBuffer toAppendTo,\r\n            FieldPosition pos)",
      "info" : "MethodDeclaration[2750-3891]:MethodDeclaration[2750-3891]"
    }, {
      "left" : "public NumberFormat getWholeFormat()",
      "right" : "public NumberFormat getWholeFormat()",
      "info" : "MethodDeclaration[3899-4058]:MethodDeclaration[3899-4058]"
    }, {
      "left" : "public Fraction parse(String source, ParsePosition pos)",
      "right" : "public Fraction parse(String source, ParsePosition pos)",
      "info" : "MethodDeclaration[4070-7137]:MethodDeclaration[4070-7363]"
    }, {
      "left" : "public void setWholeFormat(NumberFormat format)",
      "right" : "public void setWholeFormat(NumberFormat format)",
      "info" : "MethodDeclaration[7149-7586]:MethodDeclaration[7375-7812]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1232-1238]:Modifier[1232-1238]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[1239-1244]:TYPE_DECLARATION_KIND[1239-1244]"
    }, {
      "left" : "ProperFractionFormat",
      "right" : "ProperFractionFormat",
      "info" : "SimpleName[1245-1265]:SimpleName[1245-1265]"
    }, {
      "left" : "FractionFormat",
      "right" : "FractionFormat",
      "info" : "SimpleType[1274-1288]:SimpleType[1274-1288]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1662-1668]:Modifier[1662-1668]"
    }, {
      "left" : "ProperFractionFormat",
      "right" : "ProperFractionFormat",
      "info" : "SimpleName[1669-1689]:SimpleName[1669-1689]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1692-1741]:Block[1692-1741]"
    }, {
      "left" : "this(getDefaultNumberFormat());",
      "right" : "this(getDefaultNumberFormat());",
      "info" : "ConstructorInvocation[1703-1734]:ConstructorInvocation[1703-1734]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1992-1998]:Modifier[1992-1998]"
    }, {
      "left" : "ProperFractionFormat",
      "right" : "ProperFractionFormat",
      "info" : "SimpleName[1999-2019]:SimpleName[1999-2019]"
    }, {
      "left" : "NumberFormat format",
      "right" : "NumberFormat format",
      "info" : "SingleVariableDeclaration[2020-2039]:SingleVariableDeclaration[2020-2039]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2041-2132]:Block[2041-2132]"
    }, {
      "left" : "this(format, (NumberFormat)format.clone(), (NumberFormat)format.clone());",
      "right" : "this(format, (NumberFormat)format.clone(), (NumberFormat)format.clone());",
      "info" : "ConstructorInvocation[2052-2125]:ConstructorInvocation[2052-2125]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2493-2499]:Modifier[2493-2499]"
    }, {
      "left" : "ProperFractionFormat",
      "right" : "ProperFractionFormat",
      "info" : "SimpleName[2500-2520]:SimpleName[2500-2520]"
    }, {
      "left" : "NumberFormat wholeFormat",
      "right" : "NumberFormat wholeFormat",
      "info" : "SingleVariableDeclaration[2521-2545]:SingleVariableDeclaration[2521-2545]"
    }, {
      "left" : "NumberFormat numeratorFormat",
      "right" : "NumberFormat numeratorFormat",
      "info" : "SingleVariableDeclaration[2560-2588]:SingleVariableDeclaration[2560-2588]"
    }, {
      "left" : "NumberFormat denominatorFormat",
      "right" : "NumberFormat denominatorFormat",
      "info" : "SingleVariableDeclaration[2603-2633]:SingleVariableDeclaration[2603-2633]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2640-2738]:Block[2640-2738]"
    }, {
      "left" : "super(numeratorFormat, denominatorFormat);",
      "right" : "super(numeratorFormat, denominatorFormat);",
      "info" : "SuperConstructorInvocation[2651-2693]:SuperConstructorInvocation[2651-2693]"
    }, {
      "left" : "setWholeFormat(wholeFormat);",
      "right" : "setWholeFormat(wholeFormat);",
      "info" : "ExpressionStatement[2703-2731]:ExpressionStatement[2703-2731]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3171-3177]:Modifier[3171-3177]"
    }, {
      "left" : "StringBuffer",
      "right" : "StringBuffer",
      "info" : "SimpleType[3178-3190]:SimpleType[3178-3190]"
    }, {
      "left" : "format",
      "right" : "format",
      "info" : "SimpleName[3191-3197]:SimpleName[3191-3197]"
    }, {
      "left" : "Fraction fraction",
      "right" : "Fraction fraction",
      "info" : "SingleVariableDeclaration[3198-3215]:SingleVariableDeclaration[3198-3215]"
    }, {
      "left" : "StringBuffer toAppendTo",
      "right" : "StringBuffer toAppendTo",
      "info" : "SingleVariableDeclaration[3217-3240]:SingleVariableDeclaration[3217-3240]"
    }, {
      "left" : "FieldPosition pos",
      "right" : "FieldPosition pos",
      "info" : "SingleVariableDeclaration[3255-3272]:SingleVariableDeclaration[3255-3272]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3274-3891]:Block[3274-3891]"
    }, {
      "left" : "pos.setBeginIndex(0);",
      "right" : "pos.setBeginIndex(0);",
      "info" : "ExpressionStatement[3295-3316]:ExpressionStatement[3295-3316]"
    }, {
      "left" : "pos.setEndIndex(0);",
      "right" : "pos.setEndIndex(0);",
      "info" : "ExpressionStatement[3326-3345]:ExpressionStatement[3326-3345]"
    }, {
      "left" : "int num = fraction.getNumerator();",
      "right" : "int num = fraction.getNumerator();",
      "info" : "VariableDeclarationStatement[3357-3391]:VariableDeclarationStatement[3357-3391]"
    }, {
      "left" : "int den = fraction.getDenominator();",
      "right" : "int den = fraction.getDenominator();",
      "info" : "VariableDeclarationStatement[3401-3437]:VariableDeclarationStatement[3401-3437]"
    }, {
      "left" : "int whole = num / den;",
      "right" : "int whole = num / den;",
      "info" : "VariableDeclarationStatement[3447-3469]:VariableDeclarationStatement[3447-3469]"
    }, {
      "left" : "num = num % den;",
      "right" : "num = num % den;",
      "info" : "ExpressionStatement[3479-3495]:ExpressionStatement[3479-3495]"
    }, {
      "left" : "if (whole != 0)",
      "right" : "if (whole != 0)",
      "info" : "IfStatement[3515-3676]:IfStatement[3515-3676]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3531-3676]:Block[3531-3676]"
    }, {
      "left" : "getWholeFormat().format(whole, toAppendTo, pos);",
      "right" : "getWholeFormat().format(whole, toAppendTo, pos);",
      "info" : "ExpressionStatement[3546-3594]:ExpressionStatement[3546-3594]"
    }, {
      "left" : "toAppendTo.append(' ');",
      "right" : "toAppendTo.append(' ');",
      "info" : "ExpressionStatement[3608-3631]:ExpressionStatement[3608-3631]"
    }, {
      "left" : "num = Math.abs(num);",
      "right" : "num = Math.abs(num);",
      "info" : "ExpressionStatement[3645-3665]:ExpressionStatement[3645-3665]"
    }, {
      "left" : "getNumeratorFormat().format(num, toAppendTo, pos);",
      "right" : "getNumeratorFormat().format(num, toAppendTo, pos);",
      "info" : "ExpressionStatement[3686-3736]:ExpressionStatement[3686-3736]"
    }, {
      "left" : "toAppendTo.append(\" / \");",
      "right" : "toAppendTo.append(\" / \");",
      "info" : "ExpressionStatement[3746-3771]:ExpressionStatement[3746-3771]"
    }, {
      "left" : "getDenominatorFormat().format(den, toAppendTo,\r\n            pos);",
      "right" : "getDenominatorFormat().format(den, toAppendTo,\r\n            pos);",
      "info" : "ExpressionStatement[3781-3846]:ExpressionStatement[3781-3846]"
    }, {
      "left" : "return toAppendTo;",
      "right" : "return toAppendTo;",
      "info" : "ReturnStatement[3866-3884]:ReturnStatement[3866-3884]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3984-3990]:Modifier[3984-3990]"
    }, {
      "left" : "NumberFormat",
      "right" : "NumberFormat",
      "info" : "SimpleType[3991-4003]:SimpleType[3991-4003]"
    }, {
      "left" : "getWholeFormat",
      "right" : "getWholeFormat",
      "info" : "SimpleName[4004-4018]:SimpleName[4004-4018]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4021-4058]:Block[4021-4058]"
    }, {
      "left" : "return wholeFormat;",
      "right" : "return wholeFormat;",
      "info" : "ReturnStatement[4032-4051]:ReturnStatement[4032-4051]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4595-4601]:Modifier[4595-4601]"
    }, {
      "left" : "parse",
      "right" : "parse",
      "info" : "SimpleName[4611-4616]:SimpleName[4611-4616]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4651-7137]:Block[4651-7363]"
    }, {
      "left" : "Fraction ret = super.parse(source, pos);",
      "right" : "Fraction ret = super.parse(source, pos);",
      "info" : "VariableDeclarationStatement[4705-4745]:VariableDeclarationStatement[4705-4745]"
    }, {
      "left" : "if (ret != null)",
      "right" : "if (ret != null)",
      "info" : "IfStatement[4755-4809]:IfStatement[4755-4809]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4772-4809]:Block[4772-4809]"
    }, {
      "left" : "return ret;",
      "right" : "return ret;",
      "info" : "ReturnStatement[4787-4798]:ReturnStatement[4787-4798]"
    }, {
      "left" : "int initialIndex = pos.getIndex();",
      "right" : "int initialIndex = pos.getIndex();",
      "info" : "VariableDeclarationStatement[4829-4863]:VariableDeclarationStatement[4829-4863]"
    }, {
      "left" : "parseAndIgnoreWhitespace(source, pos);",
      "right" : "parseAndIgnoreWhitespace(source, pos);",
      "info" : "ExpressionStatement[4904-4942]:ExpressionStatement[4904-4942]"
    }, {
      "left" : "Number whole = getWholeFormat().parse(source, pos);",
      "right" : "Number whole = getWholeFormat().parse(source, pos);",
      "info" : "VariableDeclarationStatement[4978-5029]:VariableDeclarationStatement[4978-5029]"
    }, {
      "left" : "if (whole == null)",
      "right" : "if (whole == null)",
      "info" : "IfStatement[5039-5289]:IfStatement[5039-5289]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5058-5289]:Block[5058-5289]"
    }, {
      "left" : "pos.setIndex(initialIndex);",
      "right" : "pos.setIndex(initialIndex);",
      "info" : "ExpressionStatement[5225-5252]:ExpressionStatement[5225-5252]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[5266-5278]:ReturnStatement[5266-5278]"
    }, {
      "left" : "parseAndIgnoreWhitespace(source, pos);",
      "right" : "parseAndIgnoreWhitespace(source, pos);",
      "info" : "ExpressionStatement[5330-5368]:ExpressionStatement[5330-5368]"
    }, {
      "left" : "Number num = getNumeratorFormat().parse(source, pos);",
      "right" : "Number num = getNumeratorFormat().parse(source, pos);",
      "info" : "VariableDeclarationStatement[5416-5469]:VariableDeclarationStatement[5416-5469]"
    }, {
      "left" : "if (num == null)",
      "right" : "if (num == null)",
      "info" : "IfStatement[5479-5727]:IfStatement[5479-5727]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5496-5727]:Block[5496-5727]"
    }, {
      "left" : "pos.setIndex(initialIndex);",
      "right" : "pos.setIndex(initialIndex);",
      "info" : "ExpressionStatement[5663-5690]:ExpressionStatement[5663-5690]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[5704-5716]:ReturnStatement[5704-5716]"
    }, {
      "left" : "int startIndex = pos.getIndex();",
      "right" : "int startIndex = pos.getIndex();",
      "info" : "VariableDeclarationStatement[5837-5869]:VariableDeclarationStatement[5950-5982]"
    }, {
      "left" : "char c = parseNextCharacter(source, pos);",
      "right" : "char c = parseNextCharacter(source, pos);",
      "info" : "VariableDeclarationStatement[5879-5920]:VariableDeclarationStatement[5992-6033]"
    }, {
      "left" : "switch (c) {\r\n        case 0 :\r\n            // no '/'\r\n            // return num as a fraction\r\n            return new Fraction(num.intValue(), 1);\r\n        case '/' :\r\n            // found '/', continue parsing denominator\r\n            break;\r\n        default :\r\n            // invalid '/'\r\n            // set index back to initial, error index should be the last\r\n            // character examined.\r\n            pos.setIndex(initialIndex);\r\n            pos.setErrorIndex(startIndex);\r\n            return null;\r\n        }",
      "right" : "switch (c) {\r\n        case 0 :\r\n            // no '/'\r\n            // return num as a fraction\r\n            return new Fraction(num.intValue(), 1);\r\n        case '/' :\r\n            // found '/', continue parsing denominator\r\n            break;\r\n        default :\r\n            // invalid '/'\r\n            // set index back to initial, error index should be the last\r\n            // character examined.\r\n            pos.setIndex(initialIndex);\r\n            pos.setErrorIndex(startIndex);\r\n            return null;\r\n        }",
      "info" : "SwitchStatement[5930-6452]:SwitchStatement[6043-6565]"
    }, {
      "left" : "case 0 :",
      "right" : "case 0 :",
      "info" : "SwitchCase[5952-5960]:SwitchCase[6065-6073]"
    }, {
      "left" : "return new Fraction(num.intValue(), 1);",
      "right" : "return new Fraction(num.intValue(), 1);",
      "info" : "ReturnStatement[6038-6077]:ReturnStatement[6151-6190]"
    }, {
      "left" : "case '/' :",
      "right" : "case '/' :",
      "info" : "SwitchCase[6087-6097]:SwitchCase[6200-6210]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[6167-6173]:BreakStatement[6280-6286]"
    }, {
      "left" : "default :",
      "right" : "default :",
      "info" : "SwitchCase[6183-6192]:SwitchCase[6296-6305]"
    }, {
      "left" : "pos.setIndex(initialIndex);",
      "right" : "pos.setIndex(initialIndex);",
      "info" : "ExpressionStatement[6344-6371]:ExpressionStatement[6457-6484]"
    }, {
      "left" : "pos.setErrorIndex(startIndex);",
      "right" : "pos.setErrorIndex(startIndex);",
      "info" : "ExpressionStatement[6385-6415]:ExpressionStatement[6498-6528]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[6429-6441]:ReturnStatement[6542-6554]"
    }, {
      "left" : "parseAndIgnoreWhitespace(source, pos);",
      "right" : "parseAndIgnoreWhitespace(source, pos);",
      "info" : "ExpressionStatement[6493-6531]:ExpressionStatement[6606-6644]"
    }, {
      "left" : "Number den = getDenominatorFormat().parse(source, pos);",
      "right" : "Number den = getDenominatorFormat().parse(source, pos);",
      "info" : "VariableDeclarationStatement[6573-6628]:VariableDeclarationStatement[6686-6741]"
    }, {
      "left" : "if (den == null)",
      "right" : "if (den == null)",
      "info" : "IfStatement[6638-6886]:IfStatement[6751-6999]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6655-6886]:Block[6768-6999]"
    }, {
      "left" : "pos.setIndex(initialIndex);",
      "right" : "pos.setIndex(initialIndex);",
      "info" : "ExpressionStatement[6822-6849]:ExpressionStatement[6935-6962]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[6863-6875]:ReturnStatement[6976-6988]"
    }, {
      "left" : "int w = whole.intValue();",
      "right" : "int w = whole.intValue();",
      "info" : "VariableDeclarationStatement[6961-6986]:VariableDeclarationStatement[7187-7212]"
    }, {
      "left" : "int n = num.intValue();",
      "right" : "int n = num.intValue();",
      "info" : "VariableDeclarationStatement[6996-7019]:VariableDeclarationStatement[7222-7245]"
    }, {
      "left" : "int d = den.intValue();",
      "right" : "int d = den.intValue();",
      "info" : "VariableDeclarationStatement[7029-7052]:VariableDeclarationStatement[7255-7278]"
    }, {
      "left" : "return new Fraction(((Math.abs(w) * d) + n) * MathUtils.sign(w), d);",
      "right" : "return new Fraction(((Math.abs(w) * d) + n) * MathUtils.sign(w), d);",
      "info" : "ReturnStatement[7062-7130]:ReturnStatement[7288-7356]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7352-7358]:Modifier[7578-7584]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7359-7363]:PrimitiveType[7585-7589]"
    }, {
      "left" : "setWholeFormat",
      "right" : "setWholeFormat",
      "info" : "SimpleName[7364-7378]:SimpleName[7590-7604]"
    }, {
      "left" : "NumberFormat format",
      "right" : "NumberFormat format",
      "info" : "SingleVariableDeclaration[7379-7398]:SingleVariableDeclaration[7605-7624]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7400-7586]:Block[7626-7812]"
    }, {
      "left" : "if (format == null)",
      "right" : "if (format == null)",
      "info" : "IfStatement[7411-7543]:IfStatement[7637-7769]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7431-7543]:Block[7657-7769]"
    }, {
      "left" : "throw new IllegalArgumentException(\r\n                \"whole format can not be null.\");",
      "right" : "throw new IllegalArgumentException(\r\n                \"whole format can not be null.\");",
      "info" : "ThrowStatement[7446-7532]:ThrowStatement[7672-7758]"
    }, {
      "left" : "this.wholeFormat = format;",
      "right" : "this.wholeFormat = format;",
      "info" : "ExpressionStatement[7553-7579]:ExpressionStatement[7779-7805]"
    } ]
  },
  "interFileMappings" : { }
}