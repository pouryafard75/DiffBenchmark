{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "NameBasedCandidateFilter",
      "right" : "NameBasedCandidateFilter",
      "info" : "TypeDeclaration[339-1453]:TypeDeclaration[339-1903]"
    }, {
      "left" : "private final MockCandidateFilter next;",
      "right" : "private final MockCandidateFilter next;",
      "info" : "FieldDeclaration[411-450]:FieldDeclaration[411-450]"
    }, {
      "left" : "private final MockUtil mockUtil = new MockUtil();",
      "right" : "private final MockUtil mockUtil = new MockUtil();",
      "info" : "FieldDeclaration[452-501]:FieldDeclaration[452-501]"
    }, {
      "left" : "public NameBasedCandidateFilter(MockCandidateFilter next)",
      "right" : "public NameBasedCandidateFilter(MockCandidateFilter next)",
      "info" : "MethodDeclaration[504-586]:MethodDeclaration[504-586]"
    }, {
      "left" : "public OngoingInjecter filterCandidate(Collection<Object> mocks,\n\t\t\tField field, Object fieldInstance)",
      "right" : "public OngoingInjecter filterCandidate(Collection<Object> mocks,\n\t\t\tField field, List<Field> fields, Object fieldInstance)",
      "info" : "MethodDeclaration[589-1451]:MethodDeclaration[589-1901]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[562-586]:Block[562-586]"
    }, {
      "left" : "this.next = next;",
      "right" : "this.next = next;",
      "info" : "ExpressionStatement[566-583]:ExpressionStatement[566-583]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[692-1451]:Block[712-1901]"
    }, {
      "left" : "List<Object> mockNameMatches = new ArrayList<Object>();",
      "right" : "List<Object> mockNameMatches = new ArrayList<Object>();",
      "info" : "VariableDeclarationStatement[696-751]:VariableDeclarationStatement[716-771]"
    }, {
      "left" : "if (mocks.size() > 1)",
      "right" : "if (mocks.size() > 1)",
      "info" : "IfStatement[754-1388]:IfStatement[774-1830]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[776-1388]:Block[1706-1821]"
    }, {
      "left" : "for (Object mock : mocks)",
      "right" : "for (Object mock : mocks)",
      "info" : "EnhancedForStatement[781-924]:EnhancedForStatement[801-944]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[807-924]:Block[827-944]"
    }, {
      "left" : "if (field.getName().equals(mockUtil.getMockName(mock).toString()))",
      "right" : "if (field.getName().equals(mockUtil.getMockName(mock).toString()))",
      "info" : "IfStatement[813-919]:IfStatement[833-939]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[880-919]:Block[900-939]"
    }, {
      "left" : "mockNameMatches.add(mock);",
      "right" : "mockNameMatches.add(mock);",
      "info" : "ExpressionStatement[887-913]:ExpressionStatement[907-933]"
    }, {
      "left" : "return next.filterCandidate(mockNameMatches, field,\n\t\t\t\t\tfieldInstance);",
      "right" : "return next.filterCandidate(mockNameMatches, field, fields,\n\t\t\t\t\tfieldInstance);",
      "info" : "ReturnStatement[928-1000]:ReturnStatement[948-1028]"
    }, {
      "left" : "return next.filterCandidate(mocks, field, fieldInstance);",
      "right" : "return next.filterCandidate(mocks, field, fields, fieldInstance);",
      "info" : "ReturnStatement[1391-1448]:ReturnStatement[1833-1898]"
    } ]
  },
  "interFileMappings" : { }
}