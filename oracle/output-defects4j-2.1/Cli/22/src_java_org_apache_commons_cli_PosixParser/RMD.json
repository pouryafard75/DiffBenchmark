{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "PosixParser",
      "right" : "PosixParser",
      "info" : "TypeDeclaration[941-9365]:TypeDeclaration[941-9608]"
    }, {
      "left" : "private List tokens = new ArrayList();",
      "right" : "private List tokens = new ArrayList();",
      "info" : "FieldDeclaration[1207-1284]:FieldDeclaration[1207-1284]"
    }, {
      "left" : "private boolean eatTheRest;",
      "right" : "private boolean eatTheRest;",
      "info" : "FieldDeclaration[1290-1366]:FieldDeclaration[1290-1366]"
    }, {
      "left" : "private Options options;",
      "right" : "private Options options;",
      "info" : "FieldDeclaration[1414-1474]:FieldDeclaration[1448-1508]"
    }, {
      "left" : "private void init()",
      "right" : "private void init()",
      "info" : "MethodDeclaration[1480-1732]:MethodDeclaration[1514-1766]"
    }, {
      "left" : "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",
      "right" : "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",
      "info" : "MethodDeclaration[1738-5766]:MethodDeclaration[1772-5793]"
    }, {
      "left" : "private void gobble(Iterator iter)",
      "right" : "private void gobble(Iterator iter)",
      "info" : "MethodDeclaration[5772-6109]:MethodDeclaration[5799-6136]"
    }, {
      "left" : "private void processNonOptionToken(String value)",
      "right" : "private void processNonOptionToken(String value, boolean stopAtNonOption)",
      "info" : "MethodDeclaration[6115-6531]:MethodDeclaration[6142-6686]"
    }, {
      "left" : "private void processOptionToken(String token, boolean stopAtNonOption)",
      "right" : "private void processOptionToken(String token, boolean stopAtNonOption)",
      "info" : "MethodDeclaration[6537-7222]:MethodDeclaration[6692-7489]"
    }, {
      "left" : "protected void burstToken(String token, boolean stopAtNonOption)",
      "right" : "protected void burstToken(String token, boolean stopAtNonOption)",
      "info" : "MethodDeclaration[7228-9363]:MethodDeclaration[7495-9606]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1673-1732]:Block[1707-1766]"
    }, {
      "left" : "eatTheRest = false;",
      "right" : "eatTheRest = false;",
      "info" : "ExpressionStatement[1683-1702]:ExpressionStatement[1717-1736]"
    }, {
      "left" : "tokens.clear();",
      "right" : "tokens.clear();",
      "info" : "ExpressionStatement[1711-1726]:ExpressionStatement[1745-1760]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3955-5766]:Block[3989-5793]"
    }, {
      "left" : "init();",
      "right" : "init();",
      "info" : "ExpressionStatement[3965-3972]:ExpressionStatement[3999-4006]"
    }, {
      "left" : "this.options = options;",
      "right" : "this.options = options;",
      "info" : "ExpressionStatement[3981-4004]:ExpressionStatement[4015-4038]"
    }, {
      "left" : "Iterator iter = Arrays.asList(arguments).iterator();",
      "right" : "Iterator iter = Arrays.asList(arguments).iterator();",
      "info" : "VariableDeclarationStatement[4065-4117]:VariableDeclarationStatement[4099-4151]"
    }, {
      "left" : "while (iter.hasNext())",
      "right" : "while (iter.hasNext())",
      "info" : "WhileStatement[4170-5690]:WhileStatement[4204-5717]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4201-5690]:Block[4235-5717]"
    }, {
      "left" : "String token = (String) iter.next();",
      "right" : "String token = (String) iter.next();",
      "info" : "VariableDeclarationStatement[4262-4298]:VariableDeclarationStatement[4296-4332]"
    }, {
      "left" : "if (token.startsWith(\"--\"))",
      "right" : "if (token.startsWith(\"--\"))",
      "info" : "IfStatement[4365-5653]:IfStatement[4399-5680]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4405-4937]:Block[4439-5048]"
    }, {
      "left" : "int pos = token.indexOf('=');",
      "right" : "int pos = token.indexOf('=');",
      "info" : "VariableDeclarationStatement[4423-4452]:VariableDeclarationStatement[4457-4486]"
    }, {
      "left" : "String opt = pos == -1 ? token : token.substring(0, pos);",
      "right" : "String opt = pos == -1 ? token : token.substring(0, pos);",
      "info" : "VariableDeclarationStatement[4469-4526]:VariableDeclarationStatement[4503-4560]"
    }, {
      "left" : "if (!options.hasOption(opt))",
      "right" : "if (!options.hasOption(opt))",
      "info" : "IfStatement[4553-4923]:IfStatement[4587-5034]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4598-4667]:Block[4632-4718]"
    }, {
      "left" : "processNonOptionToken(token);",
      "right" : "processNonOptionToken(token, stopAtNonOption);",
      "info" : "ExpressionStatement[4620-4649]:ExpressionStatement[4654-4700]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4705-4923]:Block[4756-5034]"
    }, {
      "left" : "tokens.add(opt);",
      "right" : "tokens.add(opt);",
      "info" : "ExpressionStatement[4748-4764]:ExpressionStatement[4859-4875]"
    }, {
      "left" : "if (pos != -1)",
      "right" : "if (pos != -1)",
      "info" : "IfStatement[4785-4905]:IfStatement[4896-5016]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4820-4905]:Block[4931-5016]"
    }, {
      "left" : "tokens.add(token.substring(pos + 1));",
      "right" : "tokens.add(token.substring(pos + 1));",
      "info" : "ExpressionStatement[4846-4883]:ExpressionStatement[4957-4994]"
    }, {
      "left" : "if (\"-\".equals(token))",
      "right" : "if (\"-\".equals(token))",
      "info" : "IfStatement[4985-5653]:IfStatement[5096-5680]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5020-5070]:Block[5131-5181]"
    }, {
      "left" : "tokens.add(token);",
      "right" : "tokens.add(token);",
      "info" : "ExpressionStatement[5038-5056]:ExpressionStatement[5149-5167]"
    }, {
      "left" : "if (token.startsWith(\"-\"))",
      "right" : "if (token.startsWith(\"-\"))",
      "info" : "IfStatement[5088-5653]:IfStatement[5199-5680]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5127-5461]:Block[5238-5572]"
    }, {
      "left" : "if (token.length() == 2 || options.hasOption(token))",
      "right" : "if (token.length() == 2 || options.hasOption(token))",
      "info" : "IfStatement[5145-5447]:IfStatement[5256-5558]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5214-5297]:Block[5325-5408]"
    }, {
      "left" : "processOptionToken(token, stopAtNonOption);",
      "right" : "processOptionToken(token, stopAtNonOption);",
      "info" : "ExpressionStatement[5236-5279]:ExpressionStatement[5347-5390]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5372-5447]:Block[5483-5558]"
    }, {
      "left" : "burstToken(token, stopAtNonOption);",
      "right" : "burstToken(token, stopAtNonOption);",
      "info" : "ExpressionStatement[5394-5429]:ExpressionStatement[5505-5540]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5512-5573]:Block[5602-5680]"
    }, {
      "left" : "processNonOptionToken(token);",
      "right" : "processNonOptionToken(token, stopAtNonOption);",
      "info" : "ExpressionStatement[5530-5559]:ExpressionStatement[5620-5666]"
    }, {
      "left" : "gobble(iter);",
      "right" : "gobble(iter);",
      "info" : "ExpressionStatement[5667-5680]:ExpressionStatement[5694-5707]"
    }, {
      "left" : "return (String[]) tokens.toArray(new String[tokens.size()]);",
      "right" : "return (String[]) tokens.toArray(new String[tokens.size()]);",
      "info" : "ReturnStatement[5700-5760]:ReturnStatement[5727-5787]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5954-6109]:Block[5981-6136]"
    }, {
      "left" : "if (eatTheRest)",
      "right" : "if (eatTheRest)",
      "info" : "IfStatement[5964-6103]:IfStatement[5991-6130]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5988-6103]:Block[6015-6130]"
    }, {
      "left" : "while (iter.hasNext())",
      "right" : "while (iter.hasNext())",
      "info" : "WhileStatement[6002-6093]:WhileStatement[6029-6120]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6037-6093]:Block[6064-6120]"
    }, {
      "left" : "tokens.add(iter.next());",
      "right" : "tokens.add(iter.next());",
      "info" : "ExpressionStatement[6055-6079]:ExpressionStatement[6082-6106]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6435-6531]:Block[6487-6686]"
    }, {
      "left" : "eatTheRest = true;",
      "right" : "eatTheRest = true;",
      "info" : "ExpressionStatement[6449-6467]:ExpressionStatement[6594-6612]"
    }, {
      "left" : "tokens.add(\"--\");",
      "right" : "tokens.add(\"--\");",
      "info" : "ExpressionStatement[6480-6497]:ExpressionStatement[6625-6642]"
    }, {
      "left" : "tokens.add(value);",
      "right" : "tokens.add(value);",
      "info" : "ExpressionStatement[6507-6525]:ExpressionStatement[6662-6680]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7077-7222]:Block[7232-7489]"
    }, {
      "left" : "if (stopAtNonOption && !options.hasOption(token))",
      "right" : "if (stopAtNonOption && !options.hasOption(token))",
      "info" : "IfStatement[7087-7187]:IfStatement[7242-7342]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7145-7187]:Block[7300-7342]"
    }, {
      "left" : "eatTheRest = true;",
      "right" : "eatTheRest = true;",
      "info" : "ExpressionStatement[7159-7177]:ExpressionStatement[7314-7332]"
    }, {
      "left" : "tokens.add(token);",
      "right" : "tokens.add(token);",
      "info" : "ExpressionStatement[7198-7216]:ExpressionStatement[7465-7483]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8592-9363]:Block[8859-9606]"
    }, {
      "left" : "for (int i = 1; i < token.length(); i++)",
      "right" : "for (int i = 1; i < token.length(); i++)",
      "info" : "ForStatement[8632-9357]:ForStatement[8869-9600]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8681-9357]:Block[8918-9600]"
    }, {
      "left" : "String ch = String.valueOf(token.charAt(i));",
      "right" : "String ch = String.valueOf(token.charAt(i));",
      "info" : "VariableDeclarationStatement[8695-8739]:VariableDeclarationStatement[8932-8976]"
    }, {
      "left" : "if (options.hasOption(ch))",
      "right" : "if (options.hasOption(ch))",
      "info" : "IfStatement[8753-9347]:IfStatement[8990-9590]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8792-9096]:Block[9029-9333]"
    }, {
      "left" : "tokens.add(\"-\" + ch);",
      "right" : "tokens.add(\"-\" + ch);",
      "info" : "ExpressionStatement[8810-8831]:ExpressionStatement[9047-9068]"
    }, {
      "left" : "currentOption = options.getOption(ch);",
      "right" : "currentOption = options.getOption(ch);",
      "info" : "ExpressionStatement[8848-8886]:ExpressionStatement[9085-9123]"
    }, {
      "left" : "if (currentOption.hasArg() && (token.length() != (i + 1)))",
      "right" : "if (currentOption.hasArg() && (token.length() != (i + 1)))",
      "info" : "IfStatement[8904-9082]:IfStatement[9141-9319]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8979-9082]:Block[9216-9319]"
    }, {
      "left" : "tokens.add(token.substring(i + 1));",
      "right" : "tokens.add(token.substring(i + 1));",
      "info" : "ExpressionStatement[9001-9036]:ExpressionStatement[9238-9273]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[9058-9064]:BreakStatement[9295-9301]"
    }, {
      "left" : "if (stopAtNonOption)",
      "right" : "if (stopAtNonOption)",
      "info" : "IfStatement[9114-9347]:IfStatement[9351-9590]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9147-9244]:Block[9384-9487]"
    }, {
      "left" : "processNonOptionToken(token.substring(i));",
      "right" : "processNonOptionToken(token.substring(i), true);",
      "info" : "ExpressionStatement[9165-9207]:ExpressionStatement[9402-9450]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[9224-9230]:BreakStatement[9467-9473]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9274-9347]:Block[9517-9590]"
    }, {
      "left" : "tokens.add(token);",
      "right" : "tokens.add(token);",
      "info" : "ExpressionStatement[9292-9310]:ExpressionStatement[9535-9553]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[9327-9333]:BreakStatement[9570-9576]"
    } ]
  },
  "interFileMappings" : { }
}