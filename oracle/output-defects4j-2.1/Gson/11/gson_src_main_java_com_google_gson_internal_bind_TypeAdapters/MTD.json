{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "TypeAdapters",
      "right" : "TypeAdapters",
      "info" : "TypeDeclaration[1975-31105]:TypeDeclaration[1975-31124]"
    }, {
      "left" : "private TypeAdapters()",
      "right" : "private TypeAdapters()",
      "info" : "MethodDeclaration[2053-2128]:MethodDeclaration[2053-2128]"
    }, {
      "left" : "@SuppressWarnings(\"rawtypes\")\n  public static final TypeAdapter<Class> CLASS = new TypeAdapter<Class>() {\n    @Override\n    public void write(JsonWriter out, Class value) throws IOException {\n      if (value == null) {\n        out.nullValue();\n      } else {\n        throw new UnsupportedOperationException(\"Attempted to serialize java.lang.Class: \"\n            + value.getName() + \". Forgot to register a type adapter?\");\n      }\n    }\n    @Override\n    public Class read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      } else {\n        throw new UnsupportedOperationException(\n            \"Attempted to deserialize a java.lang.Class. Forgot to register a type adapter?\");\n      }\n    }\n  };",
      "right" : "@SuppressWarnings(\"rawtypes\")\n  public static final TypeAdapter<Class> CLASS = new TypeAdapter<Class>() {\n    @Override\n    public void write(JsonWriter out, Class value) throws IOException {\n      if (value == null) {\n        out.nullValue();\n      } else {\n        throw new UnsupportedOperationException(\"Attempted to serialize java.lang.Class: \"\n            + value.getName() + \". Forgot to register a type adapter?\");\n      }\n    }\n    @Override\n    public Class read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      } else {\n        throw new UnsupportedOperationException(\n            \"Attempted to deserialize a java.lang.Class. Forgot to register a type adapter?\");\n      }\n    }\n  };",
      "info" : "FieldDeclaration[2132-2903]:FieldDeclaration[2132-2903]"
    }, {
      "left" : "public void write(JsonWriter out, Class value) throws IOException",
      "right" : "public void write(JsonWriter out, Class value) throws IOException",
      "info" : "MethodDeclaration[2242-2568]:MethodDeclaration[2242-2568]"
    }, {
      "left" : "public Class read(JsonReader in) throws IOException",
      "right" : "public Class read(JsonReader in) throws IOException",
      "info" : "MethodDeclaration[2573-2898]:MethodDeclaration[2573-2898]"
    }, {
      "left" : "public static final TypeAdapterFactory CLASS_FACTORY = newFactory(Class.class, CLASS);",
      "right" : "public static final TypeAdapterFactory CLASS_FACTORY = newFactory(Class.class, CLASS);",
      "info" : "FieldDeclaration[2906-2992]:FieldDeclaration[2906-2992]"
    }, {
      "left" : "public static final TypeAdapter<BitSet> BIT_SET = new TypeAdapter<BitSet>() {\n    @Override public BitSet read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n\n      BitSet bitset = new BitSet();\n      in.beginArray();\n      int i = 0;\n      JsonToken tokenType = in.peek();\n      while (tokenType != JsonToken.END_ARRAY) {\n        boolean set;\n        switch (tokenType) {\n        case NUMBER:\n          set = in.nextInt() != 0;\n          break;\n        case BOOLEAN:\n          set = in.nextBoolean();\n          break;\n        case STRING:\n          String stringValue = in.nextString();\n          try {\n            set = Integer.parseInt(stringValue) != 0;\n          } catch (NumberFormatException e) {\n            throw new JsonSyntaxException(\n                \"Error: Expecting: bitset number value (1, 0), Found: \" + stringValue);\n          }\n          break;\n        default:\n          throw new JsonSyntaxException(\"Invalid bitset value type: \" + tokenType);\n        }\n        if (set) {\n          bitset.set(i);\n        }\n        ++i;\n        tokenType = in.peek();\n      }\n      in.endArray();\n      return bitset;\n    }\n\n    @Override public void write(JsonWriter out, BitSet src) throws IOException {\n      if (src == null) {\n        out.nullValue();\n        return;\n      }\n\n      out.beginArray();\n      for (int i = 0; i < src.length(); i++) {\n        int value = (src.get(i)) ? 1 : 0;\n        out.value(value);\n      }\n      out.endArray();\n    }\n  };",
      "right" : "public static final TypeAdapter<BitSet> BIT_SET = new TypeAdapter<BitSet>() {\n    @Override public BitSet read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n\n      BitSet bitset = new BitSet();\n      in.beginArray();\n      int i = 0;\n      JsonToken tokenType = in.peek();\n      while (tokenType != JsonToken.END_ARRAY) {\n        boolean set;\n        switch (tokenType) {\n        case NUMBER:\n          set = in.nextInt() != 0;\n          break;\n        case BOOLEAN:\n          set = in.nextBoolean();\n          break;\n        case STRING:\n          String stringValue = in.nextString();\n          try {\n            set = Integer.parseInt(stringValue) != 0;\n          } catch (NumberFormatException e) {\n            throw new JsonSyntaxException(\n                \"Error: Expecting: bitset number value (1, 0), Found: \" + stringValue);\n          }\n          break;\n        default:\n          throw new JsonSyntaxException(\"Invalid bitset value type: \" + tokenType);\n        }\n        if (set) {\n          bitset.set(i);\n        }\n        ++i;\n        tokenType = in.peek();\n      }\n      in.endArray();\n      return bitset;\n    }\n\n    @Override public void write(JsonWriter out, BitSet src) throws IOException {\n      if (src == null) {\n        out.nullValue();\n        return;\n      }\n\n      out.beginArray();\n      for (int i = 0; i < src.length(); i++) {\n        int value = (src.get(i)) ? 1 : 0;\n        out.value(value);\n      }\n      out.endArray();\n    }\n  };",
      "info" : "FieldDeclaration[2996-4543]:FieldDeclaration[2996-4543]"
    }, {
      "left" : "public BitSet read(JsonReader in) throws IOException",
      "right" : "public BitSet read(JsonReader in) throws IOException",
      "info" : "MethodDeclaration[3078-4206]:MethodDeclaration[3078-4206]"
    }, {
      "left" : "public void write(JsonWriter out, BitSet src) throws IOException",
      "right" : "public void write(JsonWriter out, BitSet src) throws IOException",
      "info" : "MethodDeclaration[4212-4538]:MethodDeclaration[4212-4538]"
    }, {
      "left" : "public static final TypeAdapterFactory BIT_SET_FACTORY = newFactory(BitSet.class, BIT_SET);",
      "right" : "public static final TypeAdapterFactory BIT_SET_FACTORY = newFactory(BitSet.class, BIT_SET);",
      "info" : "FieldDeclaration[4547-4638]:FieldDeclaration[4547-4638]"
    }, {
      "left" : "public static final TypeAdapter<Boolean> BOOLEAN = new TypeAdapter<Boolean>() {\n    @Override\n    public Boolean read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      } else if (in.peek() == JsonToken.STRING) {\n        // support strings for compatibility with GSON 1.7\n        return Boolean.parseBoolean(in.nextString());\n      }\n      return in.nextBoolean();\n    }\n    @Override\n    public void write(JsonWriter out, Boolean value) throws IOException {\n      out.value(value);\n    }\n  };",
      "right" : "public static final TypeAdapter<Boolean> BOOLEAN = new TypeAdapter<Boolean>() {\n    @Override\n    public Boolean read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      } else if (in.peek() == JsonToken.STRING) {\n        // support strings for compatibility with GSON 1.7\n        return Boolean.parseBoolean(in.nextString());\n      }\n      return in.nextBoolean();\n    }\n    @Override\n    public void write(JsonWriter out, Boolean value) throws IOException {\n      out.value(value);\n    }\n  };",
      "info" : "FieldDeclaration[4642-5211]:FieldDeclaration[4642-5211]"
    }, {
      "left" : "public Boolean read(JsonReader in) throws IOException",
      "right" : "public Boolean read(JsonReader in) throws IOException",
      "info" : "MethodDeclaration[4726-5088]:MethodDeclaration[4726-5088]"
    }, {
      "left" : "public void write(JsonWriter out, Boolean value) throws IOException",
      "right" : "public void write(JsonWriter out, Boolean value) throws IOException",
      "info" : "MethodDeclaration[5093-5206]:MethodDeclaration[5093-5206]"
    }, {
      "left" : "public static final TypeAdapter<Boolean> BOOLEAN_AS_STRING = new TypeAdapter<Boolean>() {\n    @Override public Boolean read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      return Boolean.valueOf(in.nextString());\n    }\n\n    @Override public void write(JsonWriter out, Boolean value) throws IOException {\n      out.value(value == null ? \"null\" : value.toString());\n    }\n  };",
      "right" : "public static final TypeAdapter<Boolean> BOOLEAN_AS_STRING = new TypeAdapter<Boolean>() {\n    @Override public Boolean read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      return Boolean.valueOf(in.nextString());\n    }\n\n    @Override public void write(JsonWriter out, Boolean value) throws IOException {\n      out.value(value == null ? \"null\" : value.toString());\n    }\n  };",
      "info" : "FieldDeclaration[5215-5792]:FieldDeclaration[5215-5792]"
    }, {
      "left" : "public Boolean read(JsonReader in) throws IOException",
      "right" : "public Boolean read(JsonReader in) throws IOException",
      "info" : "MethodDeclaration[5425-5636]:MethodDeclaration[5425-5636]"
    }, {
      "left" : "public void write(JsonWriter out, Boolean value) throws IOException",
      "right" : "public void write(JsonWriter out, Boolean value) throws IOException",
      "info" : "MethodDeclaration[5642-5787]:MethodDeclaration[5642-5787]"
    }, {
      "left" : "public static final TypeAdapterFactory BOOLEAN_FACTORY\n      = newFactory(boolean.class, Boolean.class, BOOLEAN);",
      "right" : "public static final TypeAdapterFactory BOOLEAN_FACTORY\n      = newFactory(boolean.class, Boolean.class, BOOLEAN);",
      "info" : "FieldDeclaration[5796-5909]:FieldDeclaration[5796-5909]"
    }, {
      "left" : "public static final TypeAdapter<Number> BYTE = new TypeAdapter<Number>() {\n    @Override\n    public Number read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      try {\n        int intValue = in.nextInt();\n        return (byte) intValue;\n      } catch (NumberFormatException e) {\n        throw new JsonSyntaxException(e);\n      }\n    }\n    @Override\n    public void write(JsonWriter out, Number value) throws IOException {\n      out.value(value);\n    }\n  };",
      "right" : "public static final TypeAdapter<Number> BYTE = new TypeAdapter<Number>() {\n    @Override\n    public Number read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      try {\n        int intValue = in.nextInt();\n        return (byte) intValue;\n      } catch (NumberFormatException e) {\n        throw new JsonSyntaxException(e);\n      }\n    }\n    @Override\n    public void write(JsonWriter out, Number value) throws IOException {\n      out.value(value);\n    }\n  };",
      "info" : "FieldDeclaration[5913-6454]:FieldDeclaration[5913-6454]"
    }, {
      "left" : "public Number read(JsonReader in) throws IOException",
      "right" : "public Number read(JsonReader in) throws IOException",
      "info" : "MethodDeclaration[5992-6332]:MethodDeclaration[5992-6332]"
    }, {
      "left" : "public void write(JsonWriter out, Number value) throws IOException",
      "right" : "public void write(JsonWriter out, Number value) throws IOException",
      "info" : "MethodDeclaration[6337-6449]:MethodDeclaration[6337-6449]"
    }, {
      "left" : "public static final TypeAdapterFactory BYTE_FACTORY\n      = newFactory(byte.class, Byte.class, BYTE);",
      "right" : "public static final TypeAdapterFactory BYTE_FACTORY\n      = newFactory(byte.class, Byte.class, BYTE);",
      "info" : "FieldDeclaration[6458-6559]:FieldDeclaration[6458-6559]"
    }, {
      "left" : "public static final TypeAdapter<Number> SHORT = new TypeAdapter<Number>() {\n    @Override\n    public Number read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      try {\n        return (short) in.nextInt();\n      } catch (NumberFormatException e) {\n        throw new JsonSyntaxException(e);\n      }\n    }\n    @Override\n    public void write(JsonWriter out, Number value) throws IOException {\n      out.value(value);\n    }\n  };",
      "right" : "public static final TypeAdapter<Number> SHORT = new TypeAdapter<Number>() {\n    @Override\n    public Number read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      try {\n        return (short) in.nextInt();\n      } catch (NumberFormatException e) {\n        throw new JsonSyntaxException(e);\n      }\n    }\n    @Override\n    public void write(JsonWriter out, Number value) throws IOException {\n      out.value(value);\n    }\n  };",
      "info" : "FieldDeclaration[6563-7073]:FieldDeclaration[6563-7073]"
    }, {
      "left" : "public Number read(JsonReader in) throws IOException",
      "right" : "public Number read(JsonReader in) throws IOException",
      "info" : "MethodDeclaration[6643-6951]:MethodDeclaration[6643-6951]"
    }, {
      "left" : "public void write(JsonWriter out, Number value) throws IOException",
      "right" : "public void write(JsonWriter out, Number value) throws IOException",
      "info" : "MethodDeclaration[6956-7068]:MethodDeclaration[6956-7068]"
    }, {
      "left" : "public static final TypeAdapterFactory SHORT_FACTORY\n      = newFactory(short.class, Short.class, SHORT);",
      "right" : "public static final TypeAdapterFactory SHORT_FACTORY\n      = newFactory(short.class, Short.class, SHORT);",
      "info" : "FieldDeclaration[7077-7182]:FieldDeclaration[7077-7182]"
    }, {
      "left" : "public static final TypeAdapter<Number> INTEGER = new TypeAdapter<Number>() {\n    @Override\n    public Number read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      try {\n        return in.nextInt();\n      } catch (NumberFormatException e) {\n        throw new JsonSyntaxException(e);\n      }\n    }\n    @Override\n    public void write(JsonWriter out, Number value) throws IOException {\n      out.value(value);\n    }\n  };",
      "right" : "public static final TypeAdapter<Number> INTEGER = new TypeAdapter<Number>() {\n    @Override\n    public Number read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      try {\n        return in.nextInt();\n      } catch (NumberFormatException e) {\n        throw new JsonSyntaxException(e);\n      }\n    }\n    @Override\n    public void write(JsonWriter out, Number value) throws IOException {\n      out.value(value);\n    }\n  };",
      "info" : "FieldDeclaration[7186-7690]:FieldDeclaration[7186-7690]"
    }, {
      "left" : "public Number read(JsonReader in) throws IOException",
      "right" : "public Number read(JsonReader in) throws IOException",
      "info" : "MethodDeclaration[7268-7568]:MethodDeclaration[7268-7568]"
    }, {
      "left" : "public void write(JsonWriter out, Number value) throws IOException",
      "right" : "public void write(JsonWriter out, Number value) throws IOException",
      "info" : "MethodDeclaration[7573-7685]:MethodDeclaration[7573-7685]"
    }, {
      "left" : "public static final TypeAdapterFactory INTEGER_FACTORY\n      = newFactory(int.class, Integer.class, INTEGER);",
      "right" : "public static final TypeAdapterFactory INTEGER_FACTORY\n      = newFactory(int.class, Integer.class, INTEGER);",
      "info" : "FieldDeclaration[7693-7802]:FieldDeclaration[7693-7802]"
    }, {
      "left" : "public static final TypeAdapter<AtomicInteger> ATOMIC_INTEGER = new TypeAdapter<AtomicInteger>() {\n    @Override public AtomicInteger read(JsonReader in) throws IOException {\n      try {\n        return new AtomicInteger(in.nextInt());\n      } catch (NumberFormatException e) {\n        throw new JsonSyntaxException(e);\n      }\n    }\n    @Override public void write(JsonWriter out, AtomicInteger value) throws IOException {\n      out.value(value.get());\n    }\n  }.nullSafe();",
      "right" : "public static final TypeAdapter<AtomicInteger> ATOMIC_INTEGER = new TypeAdapter<AtomicInteger>() {\n    @Override public AtomicInteger read(JsonReader in) throws IOException {\n      try {\n        return new AtomicInteger(in.nextInt());\n      } catch (NumberFormatException e) {\n        throw new JsonSyntaxException(e);\n      }\n    }\n    @Override public void write(JsonWriter out, AtomicInteger value) throws IOException {\n      out.value(value.get());\n    }\n  }.nullSafe();",
      "info" : "FieldDeclaration[7806-8280]:FieldDeclaration[7806-8280]"
    }, {
      "left" : "public AtomicInteger read(JsonReader in) throws IOException",
      "right" : "public AtomicInteger read(JsonReader in) throws IOException",
      "info" : "MethodDeclaration[7909-8138]:MethodDeclaration[7909-8138]"
    }, {
      "left" : "public void write(JsonWriter out, AtomicInteger value) throws IOException",
      "right" : "public void write(JsonWriter out, AtomicInteger value) throws IOException",
      "info" : "MethodDeclaration[8143-8264]:MethodDeclaration[8143-8264]"
    }, {
      "left" : "public static final TypeAdapterFactory ATOMIC_INTEGER_FACTORY =\n      newFactory(AtomicInteger.class, TypeAdapters.ATOMIC_INTEGER);",
      "right" : "public static final TypeAdapterFactory ATOMIC_INTEGER_FACTORY =\n      newFactory(AtomicInteger.class, TypeAdapters.ATOMIC_INTEGER);",
      "info" : "FieldDeclaration[8283-8414]:FieldDeclaration[8283-8414]"
    }, {
      "left" : "public static final TypeAdapter<AtomicBoolean> ATOMIC_BOOLEAN = new TypeAdapter<AtomicBoolean>() {\n    @Override public AtomicBoolean read(JsonReader in) throws IOException {\n      return new AtomicBoolean(in.nextBoolean());\n    }\n    @Override public void write(JsonWriter out, AtomicBoolean value) throws IOException {\n      out.value(value.get());\n    }\n  }.nullSafe();",
      "right" : "public static final TypeAdapter<AtomicBoolean> ATOMIC_BOOLEAN = new TypeAdapter<AtomicBoolean>() {\n    @Override public AtomicBoolean read(JsonReader in) throws IOException {\n      return new AtomicBoolean(in.nextBoolean());\n    }\n    @Override public void write(JsonWriter out, AtomicBoolean value) throws IOException {\n      out.value(value.get());\n    }\n  }.nullSafe();",
      "info" : "FieldDeclaration[8418-8790]:FieldDeclaration[8418-8790]"
    }, {
      "left" : "public AtomicBoolean read(JsonReader in) throws IOException",
      "right" : "public AtomicBoolean read(JsonReader in) throws IOException",
      "info" : "MethodDeclaration[8521-8648]:MethodDeclaration[8521-8648]"
    }, {
      "left" : "public void write(JsonWriter out, AtomicBoolean value) throws IOException",
      "right" : "public void write(JsonWriter out, AtomicBoolean value) throws IOException",
      "info" : "MethodDeclaration[8653-8774]:MethodDeclaration[8653-8774]"
    }, {
      "left" : "public static final TypeAdapterFactory ATOMIC_BOOLEAN_FACTORY =\n      newFactory(AtomicBoolean.class, TypeAdapters.ATOMIC_BOOLEAN);",
      "right" : "public static final TypeAdapterFactory ATOMIC_BOOLEAN_FACTORY =\n      newFactory(AtomicBoolean.class, TypeAdapters.ATOMIC_BOOLEAN);",
      "info" : "FieldDeclaration[8793-8924]:FieldDeclaration[8793-8924]"
    }, {
      "left" : "public static final TypeAdapter<AtomicIntegerArray> ATOMIC_INTEGER_ARRAY = new TypeAdapter<AtomicIntegerArray>() {\n    @Override public AtomicIntegerArray read(JsonReader in) throws IOException {\n        List<Integer> list = new ArrayList<Integer>();\n        in.beginArray();\n        while (in.hasNext()) {\n          try {\n            int integer = in.nextInt();\n            list.add(integer);\n          } catch (NumberFormatException e) {\n            throw new JsonSyntaxException(e);\n          }\n        }\n        in.endArray();\n        int length = list.size();\n        AtomicIntegerArray array = new AtomicIntegerArray(length);\n        for (int i = 0; i < length; ++i) {\n          array.set(i, list.get(i));\n        }\n        return array;\n    }\n    @Override public void write(JsonWriter out, AtomicIntegerArray value) throws IOException {\n      out.beginArray();\n      for (int i = 0, length = value.length(); i < length; i++) {\n        out.value(value.get(i));\n      }\n      out.endArray();\n    }\n  }.nullSafe();",
      "right" : "public static final TypeAdapter<AtomicIntegerArray> ATOMIC_INTEGER_ARRAY = new TypeAdapter<AtomicIntegerArray>() {\n    @Override public AtomicIntegerArray read(JsonReader in) throws IOException {\n        List<Integer> list = new ArrayList<Integer>();\n        in.beginArray();\n        while (in.hasNext()) {\n          try {\n            int integer = in.nextInt();\n            list.add(integer);\n          } catch (NumberFormatException e) {\n            throw new JsonSyntaxException(e);\n          }\n        }\n        in.endArray();\n        int length = list.size();\n        AtomicIntegerArray array = new AtomicIntegerArray(length);\n        for (int i = 0; i < length; ++i) {\n          array.set(i, list.get(i));\n        }\n        return array;\n    }\n    @Override public void write(JsonWriter out, AtomicIntegerArray value) throws IOException {\n      out.beginArray();\n      for (int i = 0, length = value.length(); i < length; i++) {\n        out.value(value.get(i));\n      }\n      out.endArray();\n    }\n  }.nullSafe();",
      "info" : "FieldDeclaration[8928-9947]:FieldDeclaration[8928-9947]"
    }, {
      "left" : "public AtomicIntegerArray read(JsonReader in) throws IOException",
      "right" : "public AtomicIntegerArray read(JsonReader in) throws IOException",
      "info" : "MethodDeclaration[9047-9677]:MethodDeclaration[9047-9677]"
    }, {
      "left" : "public void write(JsonWriter out, AtomicIntegerArray value) throws IOException",
      "right" : "public void write(JsonWriter out, AtomicIntegerArray value) throws IOException",
      "info" : "MethodDeclaration[9682-9931]:MethodDeclaration[9682-9931]"
    }, {
      "left" : "public static final TypeAdapterFactory ATOMIC_INTEGER_ARRAY_FACTORY =\n      newFactory(AtomicIntegerArray.class, TypeAdapters.ATOMIC_INTEGER_ARRAY);",
      "right" : "public static final TypeAdapterFactory ATOMIC_INTEGER_ARRAY_FACTORY =\n      newFactory(AtomicIntegerArray.class, TypeAdapters.ATOMIC_INTEGER_ARRAY);",
      "info" : "FieldDeclaration[9950-10098]:FieldDeclaration[9950-10098]"
    }, {
      "left" : "public static final TypeAdapter<Number> LONG = new TypeAdapter<Number>() {\n    @Override\n    public Number read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      try {\n        return in.nextLong();\n      } catch (NumberFormatException e) {\n        throw new JsonSyntaxException(e);\n      }\n    }\n    @Override\n    public void write(JsonWriter out, Number value) throws IOException {\n      out.value(value);\n    }\n  };",
      "right" : "public static final TypeAdapter<Number> LONG = new TypeAdapter<Number>() {\n    @Override\n    public Number read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      try {\n        return in.nextLong();\n      } catch (NumberFormatException e) {\n        throw new JsonSyntaxException(e);\n      }\n    }\n    @Override\n    public void write(JsonWriter out, Number value) throws IOException {\n      out.value(value);\n    }\n  };",
      "info" : "FieldDeclaration[10102-10604]:FieldDeclaration[10102-10604]"
    }, {
      "left" : "public Number read(JsonReader in) throws IOException",
      "right" : "public Number read(JsonReader in) throws IOException",
      "info" : "MethodDeclaration[10181-10482]:MethodDeclaration[10181-10482]"
    }, {
      "left" : "public void write(JsonWriter out, Number value) throws IOException",
      "right" : "public void write(JsonWriter out, Number value) throws IOException",
      "info" : "MethodDeclaration[10487-10599]:MethodDeclaration[10487-10599]"
    }, {
      "left" : "public static final TypeAdapter<Number> FLOAT = new TypeAdapter<Number>() {\n    @Override\n    public Number read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      return (float) in.nextDouble();\n    }\n    @Override\n    public void write(JsonWriter out, Number value) throws IOException {\n      out.value(value);\n    }\n  };",
      "right" : "public static final TypeAdapter<Number> FLOAT = new TypeAdapter<Number>() {\n    @Override\n    public Number read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      return (float) in.nextDouble();\n    }\n    @Override\n    public void write(JsonWriter out, Number value) throws IOException {\n      out.value(value);\n    }\n  };",
      "info" : "FieldDeclaration[10608-11015]:FieldDeclaration[10608-11015]"
    }, {
      "left" : "public Number read(JsonReader in) throws IOException",
      "right" : "public Number read(JsonReader in) throws IOException",
      "info" : "MethodDeclaration[10688-10893]:MethodDeclaration[10688-10893]"
    }, {
      "left" : "public void write(JsonWriter out, Number value) throws IOException",
      "right" : "public void write(JsonWriter out, Number value) throws IOException",
      "info" : "MethodDeclaration[10898-11010]:MethodDeclaration[10898-11010]"
    }, {
      "left" : "public static final TypeAdapter<Number> DOUBLE = new TypeAdapter<Number>() {\n    @Override\n    public Number read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      return in.nextDouble();\n    }\n    @Override\n    public void write(JsonWriter out, Number value) throws IOException {\n      out.value(value);\n    }\n  };",
      "right" : "public static final TypeAdapter<Number> DOUBLE = new TypeAdapter<Number>() {\n    @Override\n    public Number read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      return in.nextDouble();\n    }\n    @Override\n    public void write(JsonWriter out, Number value) throws IOException {\n      out.value(value);\n    }\n  };",
      "info" : "FieldDeclaration[11019-11419]:FieldDeclaration[11019-11419]"
    }, {
      "left" : "public Number read(JsonReader in) throws IOException",
      "right" : "public Number read(JsonReader in) throws IOException",
      "info" : "MethodDeclaration[11100-11297]:MethodDeclaration[11100-11297]"
    }, {
      "left" : "public void write(JsonWriter out, Number value) throws IOException",
      "right" : "public void write(JsonWriter out, Number value) throws IOException",
      "info" : "MethodDeclaration[11302-11414]:MethodDeclaration[11302-11414]"
    }, {
      "left" : "public static final TypeAdapter<Number> NUMBER = new TypeAdapter<Number>() {\n    @Override\n    public Number read(JsonReader in) throws IOException {\n      JsonToken jsonToken = in.peek();\n      switch (jsonToken) {\n      case NULL:\n        in.nextNull();\n        return null;\n      case NUMBER:\n        return new LazilyParsedNumber(in.nextString());\n      default:\n        throw new JsonSyntaxException(\"Expecting number, got: \" + jsonToken);\n      }\n    }\n    @Override\n    public void write(JsonWriter out, Number value) throws IOException {\n      out.value(value);\n    }\n  };",
      "right" : "public static final TypeAdapter<Number> NUMBER = new TypeAdapter<Number>() {\n    @Override\n    public Number read(JsonReader in) throws IOException {\n      JsonToken jsonToken = in.peek();\n      switch (jsonToken) {\n      case NULL:\n        in.nextNull();\n        return null;\n      case NUMBER:\n      case STRING:\n        return new LazilyParsedNumber(in.nextString());\n      default:\n        throw new JsonSyntaxException(\"Expecting number, got: \" + jsonToken);\n      }\n    }\n    @Override\n    public void write(JsonWriter out, Number value) throws IOException {\n      out.value(value);\n    }\n  };",
      "info" : "FieldDeclaration[11423-12003]:FieldDeclaration[11423-12022]"
    }, {
      "left" : "public Number read(JsonReader in) throws IOException",
      "right" : "public Number read(JsonReader in) throws IOException",
      "info" : "MethodDeclaration[11504-11881]:MethodDeclaration[11504-11900]"
    }, {
      "left" : "public void write(JsonWriter out, Number value) throws IOException",
      "right" : "public void write(JsonWriter out, Number value) throws IOException",
      "info" : "MethodDeclaration[11886-11998]:MethodDeclaration[11905-12017]"
    }, {
      "left" : "public static final TypeAdapterFactory NUMBER_FACTORY = newFactory(Number.class, NUMBER);",
      "right" : "public static final TypeAdapterFactory NUMBER_FACTORY = newFactory(Number.class, NUMBER);",
      "info" : "FieldDeclaration[12007-12096]:FieldDeclaration[12026-12115]"
    }, {
      "left" : "public static final TypeAdapter<Character> CHARACTER = new TypeAdapter<Character>() {\n    @Override\n    public Character read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      String str = in.nextString();\n      if (str.length() != 1) {\n        throw new JsonSyntaxException(\"Expecting character, got: \" + str);\n      }\n      return str.charAt(0);\n    }\n    @Override\n    public void write(JsonWriter out, Character value) throws IOException {\n      out.value(value == null ? null : String.valueOf(value));\n    }\n  };",
      "right" : "public static final TypeAdapter<Character> CHARACTER = new TypeAdapter<Character>() {\n    @Override\n    public Character read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      String str = in.nextString();\n      if (str.length() != 1) {\n        throw new JsonSyntaxException(\"Expecting character, got: \" + str);\n      }\n      return str.charAt(0);\n    }\n    @Override\n    public void write(JsonWriter out, Character value) throws IOException {\n      out.value(value == null ? null : String.valueOf(value));\n    }\n  };",
      "info" : "FieldDeclaration[12100-12702]:FieldDeclaration[12119-12721]"
    }, {
      "left" : "public Character read(JsonReader in) throws IOException",
      "right" : "public Character read(JsonReader in) throws IOException",
      "info" : "MethodDeclaration[12190-12538]:MethodDeclaration[12209-12557]"
    }, {
      "left" : "public void write(JsonWriter out, Character value) throws IOException",
      "right" : "public void write(JsonWriter out, Character value) throws IOException",
      "info" : "MethodDeclaration[12543-12697]:MethodDeclaration[12562-12716]"
    }, {
      "left" : "public static final TypeAdapterFactory CHARACTER_FACTORY\n      = newFactory(char.class, Character.class, CHARACTER);",
      "right" : "public static final TypeAdapterFactory CHARACTER_FACTORY\n      = newFactory(char.class, Character.class, CHARACTER);",
      "info" : "FieldDeclaration[12706-12822]:FieldDeclaration[12725-12841]"
    }, {
      "left" : "public static final TypeAdapter<String> STRING = new TypeAdapter<String>() {\n    @Override\n    public String read(JsonReader in) throws IOException {\n      JsonToken peek = in.peek();\n      if (peek == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      \n      if (peek == JsonToken.BOOLEAN) {\n        return Boolean.toString(in.nextBoolean());\n      }\n      return in.nextString();\n    }\n    @Override\n    public void write(JsonWriter out, String value) throws IOException {\n      out.value(value);\n    }\n  };",
      "right" : "public static final TypeAdapter<String> STRING = new TypeAdapter<String>() {\n    @Override\n    public String read(JsonReader in) throws IOException {\n      JsonToken peek = in.peek();\n      if (peek == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      \n      if (peek == JsonToken.BOOLEAN) {\n        return Boolean.toString(in.nextBoolean());\n      }\n      return in.nextString();\n    }\n    @Override\n    public void write(JsonWriter out, String value) throws IOException {\n      out.value(value);\n    }\n  };",
      "info" : "FieldDeclaration[12826-13420]:FieldDeclaration[12845-13439]"
    }, {
      "left" : "public String read(JsonReader in) throws IOException",
      "right" : "public String read(JsonReader in) throws IOException",
      "info" : "MethodDeclaration[12907-13298]:MethodDeclaration[12926-13317]"
    }, {
      "left" : "public void write(JsonWriter out, String value) throws IOException",
      "right" : "public void write(JsonWriter out, String value) throws IOException",
      "info" : "MethodDeclaration[13303-13415]:MethodDeclaration[13322-13434]"
    }, {
      "left" : "public static final TypeAdapter<BigDecimal> BIG_DECIMAL = new TypeAdapter<BigDecimal>() {\n    @Override public BigDecimal read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      try {\n        return new BigDecimal(in.nextString());\n      } catch (NumberFormatException e) {\n        throw new JsonSyntaxException(e);\n      }\n    }\n\n    @Override public void write(JsonWriter out, BigDecimal value) throws IOException {\n      out.value(value);\n    }\n  };",
      "right" : "public static final TypeAdapter<BigDecimal> BIG_DECIMAL = new TypeAdapter<BigDecimal>() {\n    @Override public BigDecimal read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      try {\n        return new BigDecimal(in.nextString());\n      } catch (NumberFormatException e) {\n        throw new JsonSyntaxException(e);\n      }\n    }\n\n    @Override public void write(JsonWriter out, BigDecimal value) throws IOException {\n      out.value(value);\n    }\n  };",
      "info" : "FieldDeclaration[13426-13962]:FieldDeclaration[13445-13981]"
    }, {
      "left" : "public BigDecimal read(JsonReader in) throws IOException",
      "right" : "public BigDecimal read(JsonReader in) throws IOException",
      "info" : "MethodDeclaration[13520-13839]:MethodDeclaration[13539-13858]"
    }, {
      "left" : "public void write(JsonWriter out, BigDecimal value) throws IOException",
      "right" : "public void write(JsonWriter out, BigDecimal value) throws IOException",
      "info" : "MethodDeclaration[13845-13957]:MethodDeclaration[13864-13976]"
    }, {
      "left" : "public static final TypeAdapter<BigInteger> BIG_INTEGER = new TypeAdapter<BigInteger>() {\n    @Override public BigInteger read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      try {\n        return new BigInteger(in.nextString());\n      } catch (NumberFormatException e) {\n        throw new JsonSyntaxException(e);\n      }\n    }\n\n    @Override public void write(JsonWriter out, BigInteger value) throws IOException {\n      out.value(value);\n    }\n  };",
      "right" : "public static final TypeAdapter<BigInteger> BIG_INTEGER = new TypeAdapter<BigInteger>() {\n    @Override public BigInteger read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      try {\n        return new BigInteger(in.nextString());\n      } catch (NumberFormatException e) {\n        throw new JsonSyntaxException(e);\n      }\n    }\n\n    @Override public void write(JsonWriter out, BigInteger value) throws IOException {\n      out.value(value);\n    }\n  };",
      "info" : "FieldDeclaration[13968-14504]:FieldDeclaration[13987-14523]"
    }, {
      "left" : "public BigInteger read(JsonReader in) throws IOException",
      "right" : "public BigInteger read(JsonReader in) throws IOException",
      "info" : "MethodDeclaration[14062-14381]:MethodDeclaration[14081-14400]"
    }, {
      "left" : "public void write(JsonWriter out, BigInteger value) throws IOException",
      "right" : "public void write(JsonWriter out, BigInteger value) throws IOException",
      "info" : "MethodDeclaration[14387-14499]:MethodDeclaration[14406-14518]"
    }, {
      "left" : "public static final TypeAdapterFactory STRING_FACTORY = newFactory(String.class, STRING);",
      "right" : "public static final TypeAdapterFactory STRING_FACTORY = newFactory(String.class, STRING);",
      "info" : "FieldDeclaration[14508-14597]:FieldDeclaration[14527-14616]"
    }, {
      "left" : "public static final TypeAdapter<StringBuilder> STRING_BUILDER = new TypeAdapter<StringBuilder>() {\n    @Override\n    public StringBuilder read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      return new StringBuilder(in.nextString());\n    }\n    @Override\n    public void write(JsonWriter out, StringBuilder value) throws IOException {\n      out.value(value == null ? null : value.toString());\n    }\n  };",
      "right" : "public static final TypeAdapter<StringBuilder> STRING_BUILDER = new TypeAdapter<StringBuilder>() {\n    @Override\n    public StringBuilder read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      return new StringBuilder(in.nextString());\n    }\n    @Override\n    public void write(JsonWriter out, StringBuilder value) throws IOException {\n      out.value(value == null ? null : value.toString());\n    }\n  };",
      "info" : "FieldDeclaration[14601-15090]:FieldDeclaration[14620-15109]"
    }, {
      "left" : "public StringBuilder read(JsonReader in) throws IOException",
      "right" : "public StringBuilder read(JsonReader in) throws IOException",
      "info" : "MethodDeclaration[14704-14927]:MethodDeclaration[14723-14946]"
    }, {
      "left" : "public void write(JsonWriter out, StringBuilder value) throws IOException",
      "right" : "public void write(JsonWriter out, StringBuilder value) throws IOException",
      "info" : "MethodDeclaration[14932-15085]:MethodDeclaration[14951-15104]"
    }, {
      "left" : "public static final TypeAdapterFactory STRING_BUILDER_FACTORY =\n    newFactory(StringBuilder.class, STRING_BUILDER);",
      "right" : "public static final TypeAdapterFactory STRING_BUILDER_FACTORY =\n    newFactory(StringBuilder.class, STRING_BUILDER);",
      "info" : "FieldDeclaration[15094-15210]:FieldDeclaration[15113-15229]"
    }, {
      "left" : "public static final TypeAdapter<StringBuffer> STRING_BUFFER = new TypeAdapter<StringBuffer>() {\n    @Override\n    public StringBuffer read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      return new StringBuffer(in.nextString());\n    }\n    @Override\n    public void write(JsonWriter out, StringBuffer value) throws IOException {\n      out.value(value == null ? null : value.toString());\n    }\n  };",
      "right" : "public static final TypeAdapter<StringBuffer> STRING_BUFFER = new TypeAdapter<StringBuffer>() {\n    @Override\n    public StringBuffer read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      return new StringBuffer(in.nextString());\n    }\n    @Override\n    public void write(JsonWriter out, StringBuffer value) throws IOException {\n      out.value(value == null ? null : value.toString());\n    }\n  };",
      "info" : "FieldDeclaration[15214-15697]:FieldDeclaration[15233-15716]"
    }, {
      "left" : "public StringBuffer read(JsonReader in) throws IOException",
      "right" : "public StringBuffer read(JsonReader in) throws IOException",
      "info" : "MethodDeclaration[15314-15535]:MethodDeclaration[15333-15554]"
    }, {
      "left" : "public void write(JsonWriter out, StringBuffer value) throws IOException",
      "right" : "public void write(JsonWriter out, StringBuffer value) throws IOException",
      "info" : "MethodDeclaration[15540-15692]:MethodDeclaration[15559-15711]"
    }, {
      "left" : "public static final TypeAdapterFactory STRING_BUFFER_FACTORY =\n    newFactory(StringBuffer.class, STRING_BUFFER);",
      "right" : "public static final TypeAdapterFactory STRING_BUFFER_FACTORY =\n    newFactory(StringBuffer.class, STRING_BUFFER);",
      "info" : "FieldDeclaration[15701-15814]:FieldDeclaration[15720-15833]"
    }, {
      "left" : "public static final TypeAdapter<URL> URL = new TypeAdapter<URL>() {\n    @Override\n    public URL read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      String nextString = in.nextString();\n      return \"null\".equals(nextString) ? null : new URL(nextString);\n    }\n    @Override\n    public void write(JsonWriter out, URL value) throws IOException {\n      out.value(value == null ? null : value.toExternalForm());\n    }\n  };",
      "right" : "public static final TypeAdapter<URL> URL = new TypeAdapter<URL>() {\n    @Override\n    public URL read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      String nextString = in.nextString();\n      return \"null\".equals(nextString) ? null : new URL(nextString);\n    }\n    @Override\n    public void write(JsonWriter out, URL value) throws IOException {\n      out.value(value == null ? null : value.toExternalForm());\n    }\n  };",
      "info" : "FieldDeclaration[15818-16325]:FieldDeclaration[15837-16344]"
    }, {
      "left" : "public URL read(JsonReader in) throws IOException",
      "right" : "public URL read(JsonReader in) throws IOException",
      "info" : "MethodDeclaration[15890-16166]:MethodDeclaration[15909-16185]"
    }, {
      "left" : "public void write(JsonWriter out, URL value) throws IOException",
      "right" : "public void write(JsonWriter out, URL value) throws IOException",
      "info" : "MethodDeclaration[16171-16320]:MethodDeclaration[16190-16339]"
    }, {
      "left" : "public static final TypeAdapterFactory URL_FACTORY = newFactory(URL.class, URL);",
      "right" : "public static final TypeAdapterFactory URL_FACTORY = newFactory(URL.class, URL);",
      "info" : "FieldDeclaration[16329-16409]:FieldDeclaration[16348-16428]"
    }, {
      "left" : "public static final TypeAdapter<URI> URI = new TypeAdapter<URI>() {\n    @Override\n    public URI read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      try {\n        String nextString = in.nextString();\n        return \"null\".equals(nextString) ? null : new URI(nextString);\n      } catch (URISyntaxException e) {\n        throw new JsonIOException(e);\n      }\n    }\n    @Override\n    public void write(JsonWriter out, URI value) throws IOException {\n      out.value(value == null ? null : value.toASCIIString());\n    }\n  };",
      "right" : "public static final TypeAdapter<URI> URI = new TypeAdapter<URI>() {\n    @Override\n    public URI read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      try {\n        String nextString = in.nextString();\n        return \"null\".equals(nextString) ? null : new URI(nextString);\n      } catch (URISyntaxException e) {\n        throw new JsonIOException(e);\n      }\n    }\n    @Override\n    public void write(JsonWriter out, URI value) throws IOException {\n      out.value(value == null ? null : value.toASCIIString());\n    }\n  };",
      "info" : "FieldDeclaration[16413-17020]:FieldDeclaration[16432-17039]"
    }, {
      "left" : "public URI read(JsonReader in) throws IOException",
      "right" : "public URI read(JsonReader in) throws IOException",
      "info" : "MethodDeclaration[16485-16862]:MethodDeclaration[16504-16881]"
    }, {
      "left" : "public void write(JsonWriter out, URI value) throws IOException",
      "right" : "public void write(JsonWriter out, URI value) throws IOException",
      "info" : "MethodDeclaration[16867-17015]:MethodDeclaration[16886-17034]"
    }, {
      "left" : "public static final TypeAdapterFactory URI_FACTORY = newFactory(URI.class, URI);",
      "right" : "public static final TypeAdapterFactory URI_FACTORY = newFactory(URI.class, URI);",
      "info" : "FieldDeclaration[17024-17104]:FieldDeclaration[17043-17123]"
    }, {
      "left" : "public static final TypeAdapter<InetAddress> INET_ADDRESS = new TypeAdapter<InetAddress>() {\n    @Override\n    public InetAddress read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      // regrettably, this should have included both the host name and the host address\n      return InetAddress.getByName(in.nextString());\n    }\n    @Override\n    public void write(JsonWriter out, InetAddress value) throws IOException {\n      out.value(value == null ? null : value.getHostAddress());\n    }\n  };",
      "right" : "public static final TypeAdapter<InetAddress> INET_ADDRESS = new TypeAdapter<InetAddress>() {\n    @Override\n    public InetAddress read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      // regrettably, this should have included both the host name and the host address\n      return InetAddress.getByName(in.nextString());\n    }\n    @Override\n    public void write(JsonWriter out, InetAddress value) throws IOException {\n      out.value(value == null ? null : value.getHostAddress());\n    }\n  };",
      "info" : "FieldDeclaration[17108-17685]:FieldDeclaration[17127-17704]"
    }, {
      "left" : "public InetAddress read(JsonReader in) throws IOException",
      "right" : "public InetAddress read(JsonReader in) throws IOException",
      "info" : "MethodDeclaration[17205-17518]:MethodDeclaration[17224-17537]"
    }, {
      "left" : "public void write(JsonWriter out, InetAddress value) throws IOException",
      "right" : "public void write(JsonWriter out, InetAddress value) throws IOException",
      "info" : "MethodDeclaration[17523-17680]:MethodDeclaration[17542-17699]"
    }, {
      "left" : "public static final TypeAdapterFactory INET_ADDRESS_FACTORY =\n    newTypeHierarchyFactory(InetAddress.class, INET_ADDRESS);",
      "right" : "public static final TypeAdapterFactory INET_ADDRESS_FACTORY =\n    newTypeHierarchyFactory(InetAddress.class, INET_ADDRESS);",
      "info" : "FieldDeclaration[17689-17812]:FieldDeclaration[17708-17831]"
    }, {
      "left" : "public static final TypeAdapter<UUID> UUID = new TypeAdapter<UUID>() {\n    @Override\n    public UUID read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      return java.util.UUID.fromString(in.nextString());\n    }\n    @Override\n    public void write(JsonWriter out, UUID value) throws IOException {\n      out.value(value == null ? null : value.toString());\n    }\n  };",
      "right" : "public static final TypeAdapter<UUID> UUID = new TypeAdapter<UUID>() {\n    @Override\n    public UUID read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      return java.util.UUID.fromString(in.nextString());\n    }\n    @Override\n    public void write(JsonWriter out, UUID value) throws IOException {\n      out.value(value == null ? null : value.toString());\n    }\n  };",
      "info" : "FieldDeclaration[17816-18267]:FieldDeclaration[17835-18286]"
    }, {
      "left" : "public UUID read(JsonReader in) throws IOException",
      "right" : "public UUID read(JsonReader in) throws IOException",
      "info" : "MethodDeclaration[17891-18113]:MethodDeclaration[17910-18132]"
    }, {
      "left" : "public void write(JsonWriter out, UUID value) throws IOException",
      "right" : "public void write(JsonWriter out, UUID value) throws IOException",
      "info" : "MethodDeclaration[18118-18262]:MethodDeclaration[18137-18281]"
    }, {
      "left" : "public static final TypeAdapterFactory UUID_FACTORY = newFactory(UUID.class, UUID);",
      "right" : "public static final TypeAdapterFactory UUID_FACTORY = newFactory(UUID.class, UUID);",
      "info" : "FieldDeclaration[18271-18354]:FieldDeclaration[18290-18373]"
    }, {
      "left" : "public static final TypeAdapter<Currency> CURRENCY = new TypeAdapter<Currency>() {\n    @Override\n    public Currency read(JsonReader in) throws IOException {\n      return Currency.getInstance(in.nextString());\n    }\n    @Override\n    public void write(JsonWriter out, Currency value) throws IOException {\n      out.value(value.getCurrencyCode());\n    }\n  }.nullSafe();",
      "right" : "public static final TypeAdapter<Currency> CURRENCY = new TypeAdapter<Currency>() {\n    @Override\n    public Currency read(JsonReader in) throws IOException {\n      return Currency.getInstance(in.nextString());\n    }\n    @Override\n    public void write(JsonWriter out, Currency value) throws IOException {\n      out.value(value.getCurrencyCode());\n    }\n  }.nullSafe();",
      "info" : "FieldDeclaration[18358-18726]:FieldDeclaration[18377-18745]"
    }, {
      "left" : "public Currency read(JsonReader in) throws IOException",
      "right" : "public Currency read(JsonReader in) throws IOException",
      "info" : "MethodDeclaration[18445-18573]:MethodDeclaration[18464-18592]"
    }, {
      "left" : "public void write(JsonWriter out, Currency value) throws IOException",
      "right" : "public void write(JsonWriter out, Currency value) throws IOException",
      "info" : "MethodDeclaration[18578-18710]:MethodDeclaration[18597-18729]"
    }, {
      "left" : "public static final TypeAdapterFactory CURRENCY_FACTORY = newFactory(Currency.class, CURRENCY);",
      "right" : "public static final TypeAdapterFactory CURRENCY_FACTORY = newFactory(Currency.class, CURRENCY);",
      "info" : "FieldDeclaration[18729-18824]:FieldDeclaration[18748-18843]"
    }, {
      "left" : "public static final TypeAdapterFactory TIMESTAMP_FACTORY = new TypeAdapterFactory() {\n    @SuppressWarnings(\"unchecked\") // we use a runtime check to make sure the 'T's equal\n    @Override public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {\n      if (typeToken.getRawType() != Timestamp.class) {\n        return null;\n      }\n\n      final TypeAdapter<Date> dateTypeAdapter = gson.getAdapter(Date.class);\n      return (TypeAdapter<T>) new TypeAdapter<Timestamp>() {\n        @Override public Timestamp read(JsonReader in) throws IOException {\n          Date date = dateTypeAdapter.read(in);\n          return date != null ? new Timestamp(date.getTime()) : null;\n        }\n\n        @Override public void write(JsonWriter out, Timestamp value) throws IOException {\n          dateTypeAdapter.write(out, value);\n        }\n      };\n    }\n  };",
      "right" : "public static final TypeAdapterFactory TIMESTAMP_FACTORY = new TypeAdapterFactory() {\n    @SuppressWarnings(\"unchecked\") // we use a runtime check to make sure the 'T's equal\n    @Override public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {\n      if (typeToken.getRawType() != Timestamp.class) {\n        return null;\n      }\n\n      final TypeAdapter<Date> dateTypeAdapter = gson.getAdapter(Date.class);\n      return (TypeAdapter<T>) new TypeAdapter<Timestamp>() {\n        @Override public Timestamp read(JsonReader in) throws IOException {\n          Date date = dateTypeAdapter.read(in);\n          return date != null ? new Timestamp(date.getTime()) : null;\n        }\n\n        @Override public void write(JsonWriter out, Timestamp value) throws IOException {\n          dateTypeAdapter.write(out, value);\n        }\n      };\n    }\n  };",
      "info" : "FieldDeclaration[18828-19679]:FieldDeclaration[18847-19698]"
    }, {
      "left" : "public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken)",
      "right" : "public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken)",
      "info" : "MethodDeclaration[18918-19674]:MethodDeclaration[18937-19693]"
    }, {
      "left" : "public Timestamp read(JsonReader in) throws IOException",
      "right" : "public Timestamp read(JsonReader in) throws IOException",
      "info" : "MethodDeclaration[19318-19513]:MethodDeclaration[19337-19532]"
    }, {
      "left" : "public void write(JsonWriter out, Timestamp value) throws IOException",
      "right" : "public void write(JsonWriter out, Timestamp value) throws IOException",
      "info" : "MethodDeclaration[19523-19659]:MethodDeclaration[19542-19678]"
    }, {
      "left" : "public static final TypeAdapter<Calendar> CALENDAR = new TypeAdapter<Calendar>() {\n    private static final String YEAR = \"year\";\n    private static final String MONTH = \"month\";\n    private static final String DAY_OF_MONTH = \"dayOfMonth\";\n    private static final String HOUR_OF_DAY = \"hourOfDay\";\n    private static final String MINUTE = \"minute\";\n    private static final String SECOND = \"second\";\n\n    @Override\n    public Calendar read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return  null;\n      }\n      in.beginObject();\n      int year = 0;\n      int month = 0;\n      int dayOfMonth = 0;\n      int hourOfDay = 0;\n      int minute = 0;\n      int second = 0;\n      while (in.peek() != JsonToken.END_OBJECT) {\n        String name = in.nextName();\n        int value = in.nextInt();\n        if (YEAR.equals(name)) {\n          year = value;\n        } else if (MONTH.equals(name)) {\n          month = value;\n        } else if (DAY_OF_MONTH.equals(name)) {\n          dayOfMonth = value;\n        } else if (HOUR_OF_DAY.equals(name)) {\n          hourOfDay = value;\n        } else if (MINUTE.equals(name)) {\n          minute = value;\n        } else if (SECOND.equals(name)) {\n          second = value;\n        }\n      }\n      in.endObject();\n      return new GregorianCalendar(year, month, dayOfMonth, hourOfDay, minute, second);\n    }\n\n    @Override\n    public void write(JsonWriter out, Calendar value) throws IOException {\n      if (value == null) {\n        out.nullValue();\n        return;\n      }\n      out.beginObject();\n      out.name(YEAR);\n      out.value(value.get(Calendar.YEAR));\n      out.name(MONTH);\n      out.value(value.get(Calendar.MONTH));\n      out.name(DAY_OF_MONTH);\n      out.value(value.get(Calendar.DAY_OF_MONTH));\n      out.name(HOUR_OF_DAY);\n      out.value(value.get(Calendar.HOUR_OF_DAY));\n      out.name(MINUTE);\n      out.value(value.get(Calendar.MINUTE));\n      out.name(SECOND);\n      out.value(value.get(Calendar.SECOND));\n      out.endObject();\n    }\n  };",
      "right" : "public static final TypeAdapter<Calendar> CALENDAR = new TypeAdapter<Calendar>() {\n    private static final String YEAR = \"year\";\n    private static final String MONTH = \"month\";\n    private static final String DAY_OF_MONTH = \"dayOfMonth\";\n    private static final String HOUR_OF_DAY = \"hourOfDay\";\n    private static final String MINUTE = \"minute\";\n    private static final String SECOND = \"second\";\n\n    @Override\n    public Calendar read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return  null;\n      }\n      in.beginObject();\n      int year = 0;\n      int month = 0;\n      int dayOfMonth = 0;\n      int hourOfDay = 0;\n      int minute = 0;\n      int second = 0;\n      while (in.peek() != JsonToken.END_OBJECT) {\n        String name = in.nextName();\n        int value = in.nextInt();\n        if (YEAR.equals(name)) {\n          year = value;\n        } else if (MONTH.equals(name)) {\n          month = value;\n        } else if (DAY_OF_MONTH.equals(name)) {\n          dayOfMonth = value;\n        } else if (HOUR_OF_DAY.equals(name)) {\n          hourOfDay = value;\n        } else if (MINUTE.equals(name)) {\n          minute = value;\n        } else if (SECOND.equals(name)) {\n          second = value;\n        }\n      }\n      in.endObject();\n      return new GregorianCalendar(year, month, dayOfMonth, hourOfDay, minute, second);\n    }\n\n    @Override\n    public void write(JsonWriter out, Calendar value) throws IOException {\n      if (value == null) {\n        out.nullValue();\n        return;\n      }\n      out.beginObject();\n      out.name(YEAR);\n      out.value(value.get(Calendar.YEAR));\n      out.name(MONTH);\n      out.value(value.get(Calendar.MONTH));\n      out.name(DAY_OF_MONTH);\n      out.value(value.get(Calendar.DAY_OF_MONTH));\n      out.name(HOUR_OF_DAY);\n      out.value(value.get(Calendar.HOUR_OF_DAY));\n      out.name(MINUTE);\n      out.value(value.get(Calendar.MINUTE));\n      out.name(SECOND);\n      out.value(value.get(Calendar.SECOND));\n      out.endObject();\n    }\n  };",
      "info" : "FieldDeclaration[19683-21736]:FieldDeclaration[19702-21755]"
    }, {
      "left" : "private static final String YEAR = \"year\";",
      "right" : "private static final String YEAR = \"year\";",
      "info" : "FieldDeclaration[19770-19812]:FieldDeclaration[19789-19831]"
    }, {
      "left" : "private static final String MONTH = \"month\";",
      "right" : "private static final String MONTH = \"month\";",
      "info" : "FieldDeclaration[19817-19861]:FieldDeclaration[19836-19880]"
    }, {
      "left" : "private static final String DAY_OF_MONTH = \"dayOfMonth\";",
      "right" : "private static final String DAY_OF_MONTH = \"dayOfMonth\";",
      "info" : "FieldDeclaration[19866-19922]:FieldDeclaration[19885-19941]"
    }, {
      "left" : "private static final String HOUR_OF_DAY = \"hourOfDay\";",
      "right" : "private static final String HOUR_OF_DAY = \"hourOfDay\";",
      "info" : "FieldDeclaration[19927-19981]:FieldDeclaration[19946-20000]"
    }, {
      "left" : "private static final String MINUTE = \"minute\";",
      "right" : "private static final String MINUTE = \"minute\";",
      "info" : "FieldDeclaration[19986-20032]:FieldDeclaration[20005-20051]"
    }, {
      "left" : "private static final String SECOND = \"second\";",
      "right" : "private static final String SECOND = \"second\";",
      "info" : "FieldDeclaration[20037-20083]:FieldDeclaration[20056-20102]"
    }, {
      "left" : "public Calendar read(JsonReader in) throws IOException",
      "right" : "public Calendar read(JsonReader in) throws IOException",
      "info" : "MethodDeclaration[20089-21081]:MethodDeclaration[20108-21100]"
    }, {
      "left" : "public void write(JsonWriter out, Calendar value) throws IOException",
      "right" : "public void write(JsonWriter out, Calendar value) throws IOException",
      "info" : "MethodDeclaration[21087-21731]:MethodDeclaration[21106-21750]"
    }, {
      "left" : "public static final TypeAdapterFactory CALENDAR_FACTORY =\n    newFactoryForMultipleTypes(Calendar.class, GregorianCalendar.class, CALENDAR);",
      "right" : "public static final TypeAdapterFactory CALENDAR_FACTORY =\n    newFactoryForMultipleTypes(Calendar.class, GregorianCalendar.class, CALENDAR);",
      "info" : "FieldDeclaration[21740-21880]:FieldDeclaration[21759-21899]"
    }, {
      "left" : "public static final TypeAdapter<Locale> LOCALE = new TypeAdapter<Locale>() {\n    @Override\n    public Locale read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      String locale = in.nextString();\n      StringTokenizer tokenizer = new StringTokenizer(locale, \"_\");\n      String language = null;\n      String country = null;\n      String variant = null;\n      if (tokenizer.hasMoreElements()) {\n        language = tokenizer.nextToken();\n      }\n      if (tokenizer.hasMoreElements()) {\n        country = tokenizer.nextToken();\n      }\n      if (tokenizer.hasMoreElements()) {\n        variant = tokenizer.nextToken();\n      }\n      if (country == null && variant == null) {\n        return new Locale(language);\n      } else if (variant == null) {\n        return new Locale(language, country);\n      } else {\n        return new Locale(language, country, variant);\n      }\n    }\n    @Override\n    public void write(JsonWriter out, Locale value) throws IOException {\n      out.value(value == null ? null : value.toString());\n    }\n  };",
      "right" : "public static final TypeAdapter<Locale> LOCALE = new TypeAdapter<Locale>() {\n    @Override\n    public Locale read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      String locale = in.nextString();\n      StringTokenizer tokenizer = new StringTokenizer(locale, \"_\");\n      String language = null;\n      String country = null;\n      String variant = null;\n      if (tokenizer.hasMoreElements()) {\n        language = tokenizer.nextToken();\n      }\n      if (tokenizer.hasMoreElements()) {\n        country = tokenizer.nextToken();\n      }\n      if (tokenizer.hasMoreElements()) {\n        variant = tokenizer.nextToken();\n      }\n      if (country == null && variant == null) {\n        return new Locale(language);\n      } else if (variant == null) {\n        return new Locale(language, country);\n      } else {\n        return new Locale(language, country, variant);\n      }\n    }\n    @Override\n    public void write(JsonWriter out, Locale value) throws IOException {\n      out.value(value == null ? null : value.toString());\n    }\n  };",
      "info" : "FieldDeclaration[21884-22999]:FieldDeclaration[21903-23018]"
    }, {
      "left" : "public Locale read(JsonReader in) throws IOException",
      "right" : "public Locale read(JsonReader in) throws IOException",
      "info" : "MethodDeclaration[21965-22843]:MethodDeclaration[21984-22862]"
    }, {
      "left" : "public void write(JsonWriter out, Locale value) throws IOException",
      "right" : "public void write(JsonWriter out, Locale value) throws IOException",
      "info" : "MethodDeclaration[22848-22994]:MethodDeclaration[22867-23013]"
    }, {
      "left" : "public static final TypeAdapterFactory LOCALE_FACTORY = newFactory(Locale.class, LOCALE);",
      "right" : "public static final TypeAdapterFactory LOCALE_FACTORY = newFactory(Locale.class, LOCALE);",
      "info" : "FieldDeclaration[23003-23092]:FieldDeclaration[23022-23111]"
    }, {
      "left" : "public static final TypeAdapter<JsonElement> JSON_ELEMENT = new TypeAdapter<JsonElement>() {\n    @Override public JsonElement read(JsonReader in) throws IOException {\n      switch (in.peek()) {\n      case STRING:\n        return new JsonPrimitive(in.nextString());\n      case NUMBER:\n        String number = in.nextString();\n        return new JsonPrimitive(new LazilyParsedNumber(number));\n      case BOOLEAN:\n        return new JsonPrimitive(in.nextBoolean());\n      case NULL:\n        in.nextNull();\n        return JsonNull.INSTANCE;\n      case BEGIN_ARRAY:\n        JsonArray array = new JsonArray();\n        in.beginArray();\n        while (in.hasNext()) {\n          array.add(read(in));\n        }\n        in.endArray();\n        return array;\n      case BEGIN_OBJECT:\n        JsonObject object = new JsonObject();\n        in.beginObject();\n        while (in.hasNext()) {\n          object.add(in.nextName(), read(in));\n        }\n        in.endObject();\n        return object;\n      case END_DOCUMENT:\n      case NAME:\n      case END_OBJECT:\n      case END_ARRAY:\n      default:\n        throw new IllegalArgumentException();\n      }\n    }\n\n    @Override public void write(JsonWriter out, JsonElement value) throws IOException {\n      if (value == null || value.isJsonNull()) {\n        out.nullValue();\n      } else if (value.isJsonPrimitive()) {\n        JsonPrimitive primitive = value.getAsJsonPrimitive();\n        if (primitive.isNumber()) {\n          out.value(primitive.getAsNumber());\n        } else if (primitive.isBoolean()) {\n          out.value(primitive.getAsBoolean());\n        } else {\n          out.value(primitive.getAsString());\n        }\n\n      } else if (value.isJsonArray()) {\n        out.beginArray();\n        for (JsonElement e : value.getAsJsonArray()) {\n          write(out, e);\n        }\n        out.endArray();\n\n      } else if (value.isJsonObject()) {\n        out.beginObject();\n        for (Map.Entry<String, JsonElement> e : value.getAsJsonObject().entrySet()) {\n          out.name(e.getKey());\n          write(out, e.getValue());\n        }\n        out.endObject();\n\n      } else {\n        throw new IllegalArgumentException(\"Couldn't write \" + value.getClass());\n      }\n    }\n  };",
      "right" : "public static final TypeAdapter<JsonElement> JSON_ELEMENT = new TypeAdapter<JsonElement>() {\n    @Override public JsonElement read(JsonReader in) throws IOException {\n      switch (in.peek()) {\n      case STRING:\n        return new JsonPrimitive(in.nextString());\n      case NUMBER:\n        String number = in.nextString();\n        return new JsonPrimitive(new LazilyParsedNumber(number));\n      case BOOLEAN:\n        return new JsonPrimitive(in.nextBoolean());\n      case NULL:\n        in.nextNull();\n        return JsonNull.INSTANCE;\n      case BEGIN_ARRAY:\n        JsonArray array = new JsonArray();\n        in.beginArray();\n        while (in.hasNext()) {\n          array.add(read(in));\n        }\n        in.endArray();\n        return array;\n      case BEGIN_OBJECT:\n        JsonObject object = new JsonObject();\n        in.beginObject();\n        while (in.hasNext()) {\n          object.add(in.nextName(), read(in));\n        }\n        in.endObject();\n        return object;\n      case END_DOCUMENT:\n      case NAME:\n      case END_OBJECT:\n      case END_ARRAY:\n      default:\n        throw new IllegalArgumentException();\n      }\n    }\n\n    @Override public void write(JsonWriter out, JsonElement value) throws IOException {\n      if (value == null || value.isJsonNull()) {\n        out.nullValue();\n      } else if (value.isJsonPrimitive()) {\n        JsonPrimitive primitive = value.getAsJsonPrimitive();\n        if (primitive.isNumber()) {\n          out.value(primitive.getAsNumber());\n        } else if (primitive.isBoolean()) {\n          out.value(primitive.getAsBoolean());\n        } else {\n          out.value(primitive.getAsString());\n        }\n\n      } else if (value.isJsonArray()) {\n        out.beginArray();\n        for (JsonElement e : value.getAsJsonArray()) {\n          write(out, e);\n        }\n        out.endArray();\n\n      } else if (value.isJsonObject()) {\n        out.beginObject();\n        for (Map.Entry<String, JsonElement> e : value.getAsJsonObject().entrySet()) {\n          out.name(e.getKey());\n          write(out, e.getValue());\n        }\n        out.endObject();\n\n      } else {\n        throw new IllegalArgumentException(\"Couldn't write \" + value.getClass());\n      }\n    }\n  };",
      "info" : "FieldDeclaration[23096-25305]:FieldDeclaration[23115-25324]"
    }, {
      "left" : "public JsonElement read(JsonReader in) throws IOException",
      "right" : "public JsonElement read(JsonReader in) throws IOException",
      "info" : "MethodDeclaration[23193-24234]:MethodDeclaration[23212-24253]"
    }, {
      "left" : "public void write(JsonWriter out, JsonElement value) throws IOException",
      "right" : "public void write(JsonWriter out, JsonElement value) throws IOException",
      "info" : "MethodDeclaration[24240-25300]:MethodDeclaration[24259-25319]"
    }, {
      "left" : "public static final TypeAdapterFactory JSON_ELEMENT_FACTORY\n      = newTypeHierarchyFactory(JsonElement.class, JSON_ELEMENT);",
      "right" : "public static final TypeAdapterFactory JSON_ELEMENT_FACTORY\n      = newTypeHierarchyFactory(JsonElement.class, JSON_ELEMENT);",
      "info" : "FieldDeclaration[25309-25434]:FieldDeclaration[25328-25453]"
    }, {
      "left" : "EnumTypeAdapter",
      "right" : "EnumTypeAdapter",
      "info" : "TypeDeclaration[25438-26715]:TypeDeclaration[25457-26734]"
    }, {
      "left" : "private final Map<String, T> nameToConstant = new HashMap<String, T>();",
      "right" : "private final Map<String, T> nameToConstant = new HashMap<String, T>();",
      "info" : "FieldDeclaration[25529-25600]:FieldDeclaration[25548-25619]"
    }, {
      "left" : "private final Map<T, String> constantToName = new HashMap<T, String>();",
      "right" : "private final Map<T, String> constantToName = new HashMap<T, String>();",
      "info" : "FieldDeclaration[25605-25676]:FieldDeclaration[25624-25695]"
    }, {
      "left" : "public EnumTypeAdapter(Class<T> classOfT)",
      "right" : "public EnumTypeAdapter(Class<T> classOfT)",
      "info" : "MethodDeclaration[25682-26346]:MethodDeclaration[25701-26365]"
    }, {
      "left" : "public T read(JsonReader in) throws IOException",
      "right" : "public T read(JsonReader in) throws IOException",
      "info" : "MethodDeclaration[26351-26559]:MethodDeclaration[26370-26578]"
    }, {
      "left" : "public void write(JsonWriter out, T value) throws IOException",
      "right" : "public void write(JsonWriter out, T value) throws IOException",
      "info" : "MethodDeclaration[26565-26711]:MethodDeclaration[26584-26730]"
    }, {
      "left" : "public static final TypeAdapterFactory ENUM_FACTORY = new TypeAdapterFactory() {\n    @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n    @Override public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {\n      Class<? super T> rawType = typeToken.getRawType();\n      if (!Enum.class.isAssignableFrom(rawType) || rawType == Enum.class) {\n        return null;\n      }\n      if (!rawType.isEnum()) {\n        rawType = rawType.getSuperclass(); // handle anonymous subclasses\n      }\n      return (TypeAdapter<T>) new EnumTypeAdapter(rawType);\n    }\n  };",
      "right" : "public static final TypeAdapterFactory ENUM_FACTORY = new TypeAdapterFactory() {\n    @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n    @Override public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {\n      Class<? super T> rawType = typeToken.getRawType();\n      if (!Enum.class.isAssignableFrom(rawType) || rawType == Enum.class) {\n        return null;\n      }\n      if (!rawType.isEnum()) {\n        rawType = rawType.getSuperclass(); // handle anonymous subclasses\n      }\n      return (TypeAdapter<T>) new EnumTypeAdapter(rawType);\n    }\n  };",
      "info" : "FieldDeclaration[26719-27278]:FieldDeclaration[26738-27297]"
    }, {
      "left" : "public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken)",
      "right" : "public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken)",
      "info" : "MethodDeclaration[26804-27273]:MethodDeclaration[26823-27292]"
    }, {
      "left" : "public static <TT> TypeAdapterFactory newFactory(\n      final TypeToken<TT> type, final TypeAdapter<TT> typeAdapter)",
      "right" : "public static <TT> TypeAdapterFactory newFactory(\n      final TypeToken<TT> type, final TypeAdapter<TT> typeAdapter)",
      "info" : "MethodDeclaration[27282-27711]:MethodDeclaration[27301-27730]"
    }, {
      "left" : "public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken)",
      "right" : "public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken)",
      "info" : "MethodDeclaration[27445-27700]:MethodDeclaration[27464-27719]"
    }, {
      "left" : "public static <TT> TypeAdapterFactory newFactory(\n      final Class<TT> type, final TypeAdapter<TT> typeAdapter)",
      "right" : "public static <TT> TypeAdapterFactory newFactory(\n      final Class<TT> type, final TypeAdapter<TT> typeAdapter)",
      "info" : "MethodDeclaration[27715-28282]:MethodDeclaration[27734-28301]"
    }, {
      "left" : "public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken)",
      "right" : "public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken)",
      "info" : "MethodDeclaration[27874-28137]:MethodDeclaration[27893-28156]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[28144-28271]:MethodDeclaration[28163-28290]"
    }, {
      "left" : "public static <TT> TypeAdapterFactory newFactory(\n      final Class<TT> unboxed, final Class<TT> boxed, final TypeAdapter<? super TT> typeAdapter)",
      "right" : "public static <TT> TypeAdapterFactory newFactory(\n      final Class<TT> unboxed, final Class<TT> boxed, final TypeAdapter<? super TT> typeAdapter)",
      "info" : "MethodDeclaration[28286-28995]:MethodDeclaration[28305-29014]"
    }, {
      "left" : "public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken)",
      "right" : "public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken)",
      "info" : "MethodDeclaration[28479-28811]:MethodDeclaration[28498-28830]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[28818-28984]:MethodDeclaration[28837-29003]"
    }, {
      "left" : "public static <TT> TypeAdapterFactory newFactoryForMultipleTypes(final Class<TT> base,\n      final Class<? extends TT> sub, final TypeAdapter<? super TT> typeAdapter)",
      "right" : "public static <TT> TypeAdapterFactory newFactoryForMultipleTypes(final Class<TT> base,\n      final Class<? extends TT> sub, final TypeAdapter<? super TT> typeAdapter)",
      "info" : "MethodDeclaration[28999-29718]:MethodDeclaration[29018-29737]"
    }, {
      "left" : "public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken)",
      "right" : "public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken)",
      "info" : "MethodDeclaration[29212-29539]:MethodDeclaration[29231-29558]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[29546-29707]:MethodDeclaration[29565-29726]"
    }, {
      "left" : "public static <T1> TypeAdapterFactory newTypeHierarchyFactory(\n      final Class<T1> clazz, final TypeAdapter<T1> typeAdapter)",
      "right" : "public static <T1> TypeAdapterFactory newTypeHierarchyFactory(\n      final Class<T1> clazz, final TypeAdapter<T1> typeAdapter)",
      "info" : "MethodDeclaration[29722-31103]:MethodDeclaration[29741-31122]"
    }, {
      "left" : "public <T2> TypeAdapter<T2> create(Gson gson, TypeToken<T2> typeToken)",
      "right" : "public <T2> TypeAdapter<T2> create(Gson gson, TypeToken<T2> typeToken)",
      "info" : "MethodDeclaration[30064-30948]:MethodDeclaration[30083-30967]"
    }, {
      "left" : "public void write(JsonWriter out, T1 value) throws IOException",
      "right" : "public void write(JsonWriter out, T1 value) throws IOException",
      "info" : "MethodDeclaration[30410-30539]:MethodDeclaration[30429-30558]"
    }, {
      "left" : "public T1 read(JsonReader in) throws IOException",
      "right" : "public T1 read(JsonReader in) throws IOException",
      "info" : "MethodDeclaration[30551-30929]:MethodDeclaration[30570-30948]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[30955-31092]:MethodDeclaration[30974-31111]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2076-2128]:Block[2076-2128]"
    }, {
      "left" : "throw new UnsupportedOperationException();",
      "right" : "throw new UnsupportedOperationException();",
      "info" : "ThrowStatement[2082-2124]:ThrowStatement[2082-2124]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2322-2568]:Block[2322-2568]"
    }, {
      "left" : "if (value == null)",
      "right" : "if (value == null)",
      "info" : "IfStatement[2330-2562]:IfStatement[2330-2562]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2349-2383]:Block[2349-2383]"
    }, {
      "left" : "out.nullValue();",
      "right" : "out.nullValue();",
      "info" : "ExpressionStatement[2359-2375]:ExpressionStatement[2359-2375]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2389-2562]:Block[2389-2562]"
    }, {
      "left" : "throw new UnsupportedOperationException(\"Attempted to serialize java.lang.Class: \"\n            + value.getName() + \". Forgot to register a type adapter?\");",
      "right" : "throw new UnsupportedOperationException(\"Attempted to serialize java.lang.Class: \"\n            + value.getName() + \". Forgot to register a type adapter?\");",
      "info" : "ThrowStatement[2399-2554]:ThrowStatement[2399-2554]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2639-2898]:Block[2639-2898]"
    }, {
      "left" : "if (in.peek() == JsonToken.NULL)",
      "right" : "if (in.peek() == JsonToken.NULL)",
      "info" : "IfStatement[2647-2892]:IfStatement[2647-2892]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2680-2733]:Block[2680-2733]"
    }, {
      "left" : "in.nextNull();",
      "right" : "in.nextNull();",
      "info" : "ExpressionStatement[2690-2704]:ExpressionStatement[2690-2704]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[2713-2725]:ReturnStatement[2713-2725]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2739-2892]:Block[2739-2892]"
    }, {
      "left" : "throw new UnsupportedOperationException(\n            \"Attempted to deserialize a java.lang.Class. Forgot to register a type adapter?\");",
      "right" : "throw new UnsupportedOperationException(\n            \"Attempted to deserialize a java.lang.Class. Forgot to register a type adapter?\");",
      "info" : "ThrowStatement[2749-2884]:ThrowStatement[2749-2884]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3141-4206]:Block[3141-4206]"
    }, {
      "left" : "if (in.peek() == JsonToken.NULL)",
      "right" : "if (in.peek() == JsonToken.NULL)",
      "info" : "IfStatement[3149-3235]:IfStatement[3149-3235]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3182-3235]:Block[3182-3235]"
    }, {
      "left" : "in.nextNull();",
      "right" : "in.nextNull();",
      "info" : "ExpressionStatement[3192-3206]:ExpressionStatement[3192-3206]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[3215-3227]:ReturnStatement[3215-3227]"
    }, {
      "left" : "BitSet bitset = new BitSet();",
      "right" : "BitSet bitset = new BitSet();",
      "info" : "VariableDeclarationStatement[3243-3272]:VariableDeclarationStatement[3243-3272]"
    }, {
      "left" : "in.beginArray();",
      "right" : "in.beginArray();",
      "info" : "ExpressionStatement[3279-3295]:ExpressionStatement[3279-3295]"
    }, {
      "left" : "int i = 0;",
      "right" : "int i = 0;",
      "info" : "VariableDeclarationStatement[3302-3312]:VariableDeclarationStatement[3302-3312]"
    }, {
      "left" : "JsonToken tokenType = in.peek();",
      "right" : "JsonToken tokenType = in.peek();",
      "info" : "VariableDeclarationStatement[3319-3351]:VariableDeclarationStatement[3319-3351]"
    }, {
      "left" : "while (tokenType != JsonToken.END_ARRAY)",
      "right" : "while (tokenType != JsonToken.END_ARRAY)",
      "info" : "WhileStatement[3358-4158]:WhileStatement[3358-4158]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3399-4158]:Block[3399-4158]"
    }, {
      "left" : "boolean set;",
      "right" : "boolean set;",
      "info" : "VariableDeclarationStatement[3409-3421]:VariableDeclarationStatement[3409-3421]"
    }, {
      "left" : "switch (tokenType) {\n        case NUMBER:\n          set = in.nextInt() != 0;\n          break;\n        case BOOLEAN:\n          set = in.nextBoolean();\n          break;\n        case STRING:\n          String stringValue = in.nextString();\n          try {\n            set = Integer.parseInt(stringValue) != 0;\n          } catch (NumberFormatException e) {\n            throw new JsonSyntaxException(\n                \"Error: Expecting: bitset number value (1, 0), Found: \" + stringValue);\n          }\n          break;\n        default:\n          throw new JsonSyntaxException(\"Invalid bitset value type: \" + tokenType);\n        }",
      "right" : "switch (tokenType) {\n        case NUMBER:\n          set = in.nextInt() != 0;\n          break;\n        case BOOLEAN:\n          set = in.nextBoolean();\n          break;\n        case STRING:\n          String stringValue = in.nextString();\n          try {\n            set = Integer.parseInt(stringValue) != 0;\n          } catch (NumberFormatException e) {\n            throw new JsonSyntaxException(\n                \"Error: Expecting: bitset number value (1, 0), Found: \" + stringValue);\n          }\n          break;\n        default:\n          throw new JsonSyntaxException(\"Invalid bitset value type: \" + tokenType);\n        }",
      "info" : "SwitchStatement[3430-4052]:SwitchStatement[3430-4052]"
    }, {
      "left" : "case NUMBER:",
      "right" : "case NUMBER:",
      "info" : "SwitchCase[3459-3471]:SwitchCase[3459-3471]"
    }, {
      "left" : "set = in.nextInt() != 0;",
      "right" : "set = in.nextInt() != 0;",
      "info" : "ExpressionStatement[3482-3506]:ExpressionStatement[3482-3506]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[3517-3523]:BreakStatement[3517-3523]"
    }, {
      "left" : "case BOOLEAN:",
      "right" : "case BOOLEAN:",
      "info" : "SwitchCase[3532-3545]:SwitchCase[3532-3545]"
    }, {
      "left" : "set = in.nextBoolean();",
      "right" : "set = in.nextBoolean();",
      "info" : "ExpressionStatement[3556-3579]:ExpressionStatement[3556-3579]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[3590-3596]:BreakStatement[3590-3596]"
    }, {
      "left" : "case STRING:",
      "right" : "case STRING:",
      "info" : "SwitchCase[3605-3617]:SwitchCase[3605-3617]"
    }, {
      "left" : "String stringValue = in.nextString();",
      "right" : "String stringValue = in.nextString();",
      "info" : "VariableDeclarationStatement[3628-3665]:VariableDeclarationStatement[3628-3665]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[3676-3924]:TryStatement[3676-3924]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3680-3747]:Block[3680-3747]"
    }, {
      "left" : "set = Integer.parseInt(stringValue) != 0;",
      "right" : "set = Integer.parseInt(stringValue) != 0;",
      "info" : "ExpressionStatement[3694-3735]:ExpressionStatement[3694-3735]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3780-3924]:Block[3780-3924]"
    }, {
      "left" : "throw new JsonSyntaxException(\n                \"Error: Expecting: bitset number value (1, 0), Found: \" + stringValue);",
      "right" : "throw new JsonSyntaxException(\n                \"Error: Expecting: bitset number value (1, 0), Found: \" + stringValue);",
      "info" : "ThrowStatement[3794-3912]:ThrowStatement[3794-3912]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[3935-3941]:BreakStatement[3935-3941]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[3950-3958]:SwitchCase[3950-3958]"
    }, {
      "left" : "throw new JsonSyntaxException(\"Invalid bitset value type: \" + tokenType);",
      "right" : "throw new JsonSyntaxException(\"Invalid bitset value type: \" + tokenType);",
      "info" : "ThrowStatement[3969-4042]:ThrowStatement[3969-4042]"
    }, {
      "left" : "if (set)",
      "right" : "if (set)",
      "info" : "IfStatement[4061-4106]:IfStatement[4061-4106]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4070-4106]:Block[4070-4106]"
    }, {
      "left" : "bitset.set(i);",
      "right" : "bitset.set(i);",
      "info" : "ExpressionStatement[4082-4096]:ExpressionStatement[4082-4096]"
    }, {
      "left" : "++i;",
      "right" : "++i;",
      "info" : "ExpressionStatement[4115-4119]:ExpressionStatement[4115-4119]"
    }, {
      "left" : "tokenType = in.peek();",
      "right" : "tokenType = in.peek();",
      "info" : "ExpressionStatement[4128-4150]:ExpressionStatement[4128-4150]"
    }, {
      "left" : "in.endArray();",
      "right" : "in.endArray();",
      "info" : "ExpressionStatement[4165-4179]:ExpressionStatement[4165-4179]"
    }, {
      "left" : "return bitset;",
      "right" : "return bitset;",
      "info" : "ReturnStatement[4186-4200]:ReturnStatement[4186-4200]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4287-4538]:Block[4287-4538]"
    }, {
      "left" : "if (src == null)",
      "right" : "if (src == null)",
      "info" : "IfStatement[4295-4362]:IfStatement[4295-4362]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4312-4362]:Block[4312-4362]"
    }, {
      "left" : "out.nullValue();",
      "right" : "out.nullValue();",
      "info" : "ExpressionStatement[4322-4338]:ExpressionStatement[4322-4338]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[4347-4354]:ReturnStatement[4347-4354]"
    }, {
      "left" : "out.beginArray();",
      "right" : "out.beginArray();",
      "info" : "ExpressionStatement[4370-4387]:ExpressionStatement[4370-4387]"
    }, {
      "left" : "for (int i = 0; i < src.length(); i++)",
      "right" : "for (int i = 0; i < src.length(); i++)",
      "info" : "ForStatement[4394-4510]:ForStatement[4394-4510]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4433-4510]:Block[4433-4510]"
    }, {
      "left" : "int value = (src.get(i)) ? 1 : 0;",
      "right" : "int value = (src.get(i)) ? 1 : 0;",
      "info" : "VariableDeclarationStatement[4443-4476]:VariableDeclarationStatement[4443-4476]"
    }, {
      "left" : "out.value(value);",
      "right" : "out.value(value);",
      "info" : "ExpressionStatement[4485-4502]:ExpressionStatement[4485-4502]"
    }, {
      "left" : "out.endArray();",
      "right" : "out.endArray();",
      "info" : "ExpressionStatement[4517-4532]:ExpressionStatement[4517-4532]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4794-5088]:Block[4794-5088]"
    }, {
      "left" : "if (in.peek() == JsonToken.NULL)",
      "right" : "if (in.peek() == JsonToken.NULL)",
      "info" : "IfStatement[4802-5051]:IfStatement[4802-5051]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4835-4888]:Block[4835-4888]"
    }, {
      "left" : "in.nextNull();",
      "right" : "in.nextNull();",
      "info" : "ExpressionStatement[4845-4859]:ExpressionStatement[4845-4859]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[4868-4880]:ReturnStatement[4868-4880]"
    }, {
      "left" : "if (in.peek() == JsonToken.STRING)",
      "right" : "if (in.peek() == JsonToken.STRING)",
      "info" : "IfStatement[4894-5051]:IfStatement[4894-5051]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4929-5051]:Block[4929-5051]"
    }, {
      "left" : "return Boolean.parseBoolean(in.nextString());",
      "right" : "return Boolean.parseBoolean(in.nextString());",
      "info" : "ReturnStatement[4998-5043]:ReturnStatement[4998-5043]"
    }, {
      "left" : "return in.nextBoolean();",
      "right" : "return in.nextBoolean();",
      "info" : "ReturnStatement[5058-5082]:ReturnStatement[5058-5082]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5175-5206]:Block[5175-5206]"
    }, {
      "left" : "out.value(value);",
      "right" : "out.value(value);",
      "info" : "ExpressionStatement[5183-5200]:ExpressionStatement[5183-5200]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5489-5636]:Block[5489-5636]"
    }, {
      "left" : "if (in.peek() == JsonToken.NULL)",
      "right" : "if (in.peek() == JsonToken.NULL)",
      "info" : "IfStatement[5497-5583]:IfStatement[5497-5583]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5530-5583]:Block[5530-5583]"
    }, {
      "left" : "in.nextNull();",
      "right" : "in.nextNull();",
      "info" : "ExpressionStatement[5540-5554]:ExpressionStatement[5540-5554]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[5563-5575]:ReturnStatement[5563-5575]"
    }, {
      "left" : "return Boolean.valueOf(in.nextString());",
      "right" : "return Boolean.valueOf(in.nextString());",
      "info" : "ReturnStatement[5590-5630]:ReturnStatement[5590-5630]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5720-5787]:Block[5720-5787]"
    }, {
      "left" : "out.value(value == null ? \"null\" : value.toString());",
      "right" : "out.value(value == null ? \"null\" : value.toString());",
      "info" : "ExpressionStatement[5728-5781]:ExpressionStatement[5728-5781]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6059-6332]:Block[6059-6332]"
    }, {
      "left" : "if (in.peek() == JsonToken.NULL)",
      "right" : "if (in.peek() == JsonToken.NULL)",
      "info" : "IfStatement[6067-6153]:IfStatement[6067-6153]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6100-6153]:Block[6100-6153]"
    }, {
      "left" : "in.nextNull();",
      "right" : "in.nextNull();",
      "info" : "ExpressionStatement[6110-6124]:ExpressionStatement[6110-6124]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[6133-6145]:ReturnStatement[6133-6145]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[6160-6326]:TryStatement[6160-6326]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6164-6242]:Block[6164-6242]"
    }, {
      "left" : "int intValue = in.nextInt();",
      "right" : "int intValue = in.nextInt();",
      "info" : "VariableDeclarationStatement[6174-6202]:VariableDeclarationStatement[6174-6202]"
    }, {
      "left" : "return (byte) intValue;",
      "right" : "return (byte) intValue;",
      "info" : "ReturnStatement[6211-6234]:ReturnStatement[6211-6234]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6275-6326]:Block[6275-6326]"
    }, {
      "left" : "throw new JsonSyntaxException(e);",
      "right" : "throw new JsonSyntaxException(e);",
      "info" : "ThrowStatement[6285-6318]:ThrowStatement[6285-6318]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6418-6449]:Block[6418-6449]"
    }, {
      "left" : "out.value(value);",
      "right" : "out.value(value);",
      "info" : "ExpressionStatement[6426-6443]:ExpressionStatement[6426-6443]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6710-6951]:Block[6710-6951]"
    }, {
      "left" : "if (in.peek() == JsonToken.NULL)",
      "right" : "if (in.peek() == JsonToken.NULL)",
      "info" : "IfStatement[6718-6804]:IfStatement[6718-6804]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6751-6804]:Block[6751-6804]"
    }, {
      "left" : "in.nextNull();",
      "right" : "in.nextNull();",
      "info" : "ExpressionStatement[6761-6775]:ExpressionStatement[6761-6775]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[6784-6796]:ReturnStatement[6784-6796]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[6811-6945]:TryStatement[6811-6945]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6815-6861]:Block[6815-6861]"
    }, {
      "left" : "return (short) in.nextInt();",
      "right" : "return (short) in.nextInt();",
      "info" : "ReturnStatement[6825-6853]:ReturnStatement[6825-6853]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6894-6945]:Block[6894-6945]"
    }, {
      "left" : "throw new JsonSyntaxException(e);",
      "right" : "throw new JsonSyntaxException(e);",
      "info" : "ThrowStatement[6904-6937]:ThrowStatement[6904-6937]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7037-7068]:Block[7037-7068]"
    }, {
      "left" : "out.value(value);",
      "right" : "out.value(value);",
      "info" : "ExpressionStatement[7045-7062]:ExpressionStatement[7045-7062]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7335-7568]:Block[7335-7568]"
    }, {
      "left" : "if (in.peek() == JsonToken.NULL)",
      "right" : "if (in.peek() == JsonToken.NULL)",
      "info" : "IfStatement[7343-7429]:IfStatement[7343-7429]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7376-7429]:Block[7376-7429]"
    }, {
      "left" : "in.nextNull();",
      "right" : "in.nextNull();",
      "info" : "ExpressionStatement[7386-7400]:ExpressionStatement[7386-7400]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[7409-7421]:ReturnStatement[7409-7421]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[7436-7562]:TryStatement[7436-7562]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7440-7478]:Block[7440-7478]"
    }, {
      "left" : "return in.nextInt();",
      "right" : "return in.nextInt();",
      "info" : "ReturnStatement[7450-7470]:ReturnStatement[7450-7470]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7511-7562]:Block[7511-7562]"
    }, {
      "left" : "throw new JsonSyntaxException(e);",
      "right" : "throw new JsonSyntaxException(e);",
      "info" : "ThrowStatement[7521-7554]:ThrowStatement[7521-7554]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7654-7685]:Block[7654-7685]"
    }, {
      "left" : "out.value(value);",
      "right" : "out.value(value);",
      "info" : "ExpressionStatement[7662-7679]:ExpressionStatement[7662-7679]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7979-8138]:Block[7979-8138]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[7987-8132]:TryStatement[7987-8132]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7991-8048]:Block[7991-8048]"
    }, {
      "left" : "return new AtomicInteger(in.nextInt());",
      "right" : "return new AtomicInteger(in.nextInt());",
      "info" : "ReturnStatement[8001-8040]:ReturnStatement[8001-8040]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8081-8132]:Block[8081-8132]"
    }, {
      "left" : "throw new JsonSyntaxException(e);",
      "right" : "throw new JsonSyntaxException(e);",
      "info" : "ThrowStatement[8091-8124]:ThrowStatement[8091-8124]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8227-8264]:Block[8227-8264]"
    }, {
      "left" : "out.value(value.get());",
      "right" : "out.value(value.get());",
      "info" : "ExpressionStatement[8235-8258]:ExpressionStatement[8235-8258]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8591-8648]:Block[8591-8648]"
    }, {
      "left" : "return new AtomicBoolean(in.nextBoolean());",
      "right" : "return new AtomicBoolean(in.nextBoolean());",
      "info" : "ReturnStatement[8599-8642]:ReturnStatement[8599-8642]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8737-8774]:Block[8737-8774]"
    }, {
      "left" : "out.value(value.get());",
      "right" : "out.value(value.get());",
      "info" : "ExpressionStatement[8745-8768]:ExpressionStatement[8745-8768]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9122-9677]:Block[9122-9677]"
    }, {
      "left" : "List<Integer> list = new ArrayList<Integer>();",
      "right" : "List<Integer> list = new ArrayList<Integer>();",
      "info" : "VariableDeclarationStatement[9132-9178]:VariableDeclarationStatement[9132-9178]"
    }, {
      "left" : "in.beginArray();",
      "right" : "in.beginArray();",
      "info" : "ExpressionStatement[9187-9203]:ExpressionStatement[9187-9203]"
    }, {
      "left" : "while (in.hasNext())",
      "right" : "while (in.hasNext())",
      "info" : "WhileStatement[9212-9435]:WhileStatement[9212-9435]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9233-9435]:Block[9233-9435]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[9245-9425]:TryStatement[9245-9425]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9249-9333]:Block[9249-9333]"
    }, {
      "left" : "int integer = in.nextInt();",
      "right" : "int integer = in.nextInt();",
      "info" : "VariableDeclarationStatement[9263-9290]:VariableDeclarationStatement[9263-9290]"
    }, {
      "left" : "list.add(integer);",
      "right" : "list.add(integer);",
      "info" : "ExpressionStatement[9303-9321]:ExpressionStatement[9303-9321]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9366-9425]:Block[9366-9425]"
    }, {
      "left" : "throw new JsonSyntaxException(e);",
      "right" : "throw new JsonSyntaxException(e);",
      "info" : "ThrowStatement[9380-9413]:ThrowStatement[9380-9413]"
    }, {
      "left" : "in.endArray();",
      "right" : "in.endArray();",
      "info" : "ExpressionStatement[9444-9458]:ExpressionStatement[9444-9458]"
    }, {
      "left" : "int length = list.size();",
      "right" : "int length = list.size();",
      "info" : "VariableDeclarationStatement[9467-9492]:VariableDeclarationStatement[9467-9492]"
    }, {
      "left" : "AtomicIntegerArray array = new AtomicIntegerArray(length);",
      "right" : "AtomicIntegerArray array = new AtomicIntegerArray(length);",
      "info" : "VariableDeclarationStatement[9501-9559]:VariableDeclarationStatement[9501-9559]"
    }, {
      "left" : "for (int i = 0; i < length; ++i)",
      "right" : "for (int i = 0; i < length; ++i)",
      "info" : "ForStatement[9568-9649]:ForStatement[9568-9649]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9601-9649]:Block[9601-9649]"
    }, {
      "left" : "array.set(i, list.get(i));",
      "right" : "array.set(i, list.get(i));",
      "info" : "ExpressionStatement[9613-9639]:ExpressionStatement[9613-9639]"
    }, {
      "left" : "return array;",
      "right" : "return array;",
      "info" : "ReturnStatement[9658-9671]:ReturnStatement[9658-9671]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9771-9931]:Block[9771-9931]"
    }, {
      "left" : "out.beginArray();",
      "right" : "out.beginArray();",
      "info" : "ExpressionStatement[9779-9796]:ExpressionStatement[9779-9796]"
    }, {
      "left" : "for (int i = 0, length = value.length(); i < length; i++)",
      "right" : "for (int i = 0, length = value.length(); i < length; i++)",
      "info" : "ForStatement[9803-9903]:ForStatement[9803-9903]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9861-9903]:Block[9861-9903]"
    }, {
      "left" : "out.value(value.get(i));",
      "right" : "out.value(value.get(i));",
      "info" : "ExpressionStatement[9871-9895]:ExpressionStatement[9871-9895]"
    }, {
      "left" : "out.endArray();",
      "right" : "out.endArray();",
      "info" : "ExpressionStatement[9910-9925]:ExpressionStatement[9910-9925]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10248-10482]:Block[10248-10482]"
    }, {
      "left" : "if (in.peek() == JsonToken.NULL)",
      "right" : "if (in.peek() == JsonToken.NULL)",
      "info" : "IfStatement[10256-10342]:IfStatement[10256-10342]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10289-10342]:Block[10289-10342]"
    }, {
      "left" : "in.nextNull();",
      "right" : "in.nextNull();",
      "info" : "ExpressionStatement[10299-10313]:ExpressionStatement[10299-10313]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[10322-10334]:ReturnStatement[10322-10334]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[10349-10476]:TryStatement[10349-10476]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10353-10392]:Block[10353-10392]"
    }, {
      "left" : "return in.nextLong();",
      "right" : "return in.nextLong();",
      "info" : "ReturnStatement[10363-10384]:ReturnStatement[10363-10384]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10425-10476]:Block[10425-10476]"
    }, {
      "left" : "throw new JsonSyntaxException(e);",
      "right" : "throw new JsonSyntaxException(e);",
      "info" : "ThrowStatement[10435-10468]:ThrowStatement[10435-10468]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10568-10599]:Block[10568-10599]"
    }, {
      "left" : "out.value(value);",
      "right" : "out.value(value);",
      "info" : "ExpressionStatement[10576-10593]:ExpressionStatement[10576-10593]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10755-10893]:Block[10755-10893]"
    }, {
      "left" : "if (in.peek() == JsonToken.NULL)",
      "right" : "if (in.peek() == JsonToken.NULL)",
      "info" : "IfStatement[10763-10849]:IfStatement[10763-10849]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10796-10849]:Block[10796-10849]"
    }, {
      "left" : "in.nextNull();",
      "right" : "in.nextNull();",
      "info" : "ExpressionStatement[10806-10820]:ExpressionStatement[10806-10820]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[10829-10841]:ReturnStatement[10829-10841]"
    }, {
      "left" : "return (float) in.nextDouble();",
      "right" : "return (float) in.nextDouble();",
      "info" : "ReturnStatement[10856-10887]:ReturnStatement[10856-10887]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10979-11010]:Block[10979-11010]"
    }, {
      "left" : "out.value(value);",
      "right" : "out.value(value);",
      "info" : "ExpressionStatement[10987-11004]:ExpressionStatement[10987-11004]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11167-11297]:Block[11167-11297]"
    }, {
      "left" : "if (in.peek() == JsonToken.NULL)",
      "right" : "if (in.peek() == JsonToken.NULL)",
      "info" : "IfStatement[11175-11261]:IfStatement[11175-11261]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11208-11261]:Block[11208-11261]"
    }, {
      "left" : "in.nextNull();",
      "right" : "in.nextNull();",
      "info" : "ExpressionStatement[11218-11232]:ExpressionStatement[11218-11232]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[11241-11253]:ReturnStatement[11241-11253]"
    }, {
      "left" : "return in.nextDouble();",
      "right" : "return in.nextDouble();",
      "info" : "ReturnStatement[11268-11291]:ReturnStatement[11268-11291]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11383-11414]:Block[11383-11414]"
    }, {
      "left" : "out.value(value);",
      "right" : "out.value(value);",
      "info" : "ExpressionStatement[11391-11408]:ExpressionStatement[11391-11408]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11571-11881]:Block[11571-11900]"
    }, {
      "left" : "JsonToken jsonToken = in.peek();",
      "right" : "JsonToken jsonToken = in.peek();",
      "info" : "VariableDeclarationStatement[11579-11611]:VariableDeclarationStatement[11579-11611]"
    }, {
      "left" : "switch (jsonToken) {\n      case NULL:\n        in.nextNull();\n        return null;\n      case NUMBER:\n        return new LazilyParsedNumber(in.nextString());\n      default:\n        throw new JsonSyntaxException(\"Expecting number, got: \" + jsonToken);\n      }",
      "right" : "switch (jsonToken) {\n      case NULL:\n        in.nextNull();\n        return null;\n      case NUMBER:\n      case STRING:\n        return new LazilyParsedNumber(in.nextString());\n      default:\n        throw new JsonSyntaxException(\"Expecting number, got: \" + jsonToken);\n      }",
      "info" : "SwitchStatement[11618-11875]:SwitchStatement[11618-11894]"
    }, {
      "left" : "case NULL:",
      "right" : "case NULL:",
      "info" : "SwitchCase[11645-11655]:SwitchCase[11645-11655]"
    }, {
      "left" : "in.nextNull();",
      "right" : "in.nextNull();",
      "info" : "ExpressionStatement[11664-11678]:ExpressionStatement[11664-11678]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[11687-11699]:ReturnStatement[11687-11699]"
    }, {
      "left" : "case NUMBER:",
      "right" : "case STRING:",
      "info" : "SwitchCase[11706-11718]:SwitchCase[11725-11737]"
    }, {
      "left" : "return new LazilyParsedNumber(in.nextString());",
      "right" : "return new LazilyParsedNumber(in.nextString());",
      "info" : "ReturnStatement[11727-11774]:ReturnStatement[11746-11793]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[11781-11789]:SwitchCase[11800-11808]"
    }, {
      "left" : "throw new JsonSyntaxException(\"Expecting number, got: \" + jsonToken);",
      "right" : "throw new JsonSyntaxException(\"Expecting number, got: \" + jsonToken);",
      "info" : "ThrowStatement[11798-11867]:ThrowStatement[11817-11886]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11967-11998]:Block[11986-12017]"
    }, {
      "left" : "out.value(value);",
      "right" : "out.value(value);",
      "info" : "ExpressionStatement[11975-11992]:ExpressionStatement[11994-12011]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12260-12538]:Block[12279-12557]"
    }, {
      "left" : "if (in.peek() == JsonToken.NULL)",
      "right" : "if (in.peek() == JsonToken.NULL)",
      "info" : "IfStatement[12268-12354]:IfStatement[12287-12373]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12301-12354]:Block[12320-12373]"
    }, {
      "left" : "in.nextNull();",
      "right" : "in.nextNull();",
      "info" : "ExpressionStatement[12311-12325]:ExpressionStatement[12330-12344]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[12334-12346]:ReturnStatement[12353-12365]"
    }, {
      "left" : "String str = in.nextString();",
      "right" : "String str = in.nextString();",
      "info" : "VariableDeclarationStatement[12361-12390]:VariableDeclarationStatement[12380-12409]"
    }, {
      "left" : "if (str.length() != 1)",
      "right" : "if (str.length() != 1)",
      "info" : "IfStatement[12397-12504]:IfStatement[12416-12523]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12420-12504]:Block[12439-12523]"
    }, {
      "left" : "throw new JsonSyntaxException(\"Expecting character, got: \" + str);",
      "right" : "throw new JsonSyntaxException(\"Expecting character, got: \" + str);",
      "info" : "ThrowStatement[12430-12496]:ThrowStatement[12449-12515]"
    }, {
      "left" : "return str.charAt(0);",
      "right" : "return str.charAt(0);",
      "info" : "ReturnStatement[12511-12532]:ReturnStatement[12530-12551]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12627-12697]:Block[12646-12716]"
    }, {
      "left" : "out.value(value == null ? null : String.valueOf(value));",
      "right" : "out.value(value == null ? null : String.valueOf(value));",
      "info" : "ExpressionStatement[12635-12691]:ExpressionStatement[12654-12710]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12974-13298]:Block[12993-13317]"
    }, {
      "left" : "JsonToken peek = in.peek();",
      "right" : "JsonToken peek = in.peek();",
      "info" : "VariableDeclarationStatement[12982-13009]:VariableDeclarationStatement[13001-13028]"
    }, {
      "left" : "if (peek == JsonToken.NULL)",
      "right" : "if (peek == JsonToken.NULL)",
      "info" : "IfStatement[13016-13097]:IfStatement[13035-13116]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13044-13097]:Block[13063-13116]"
    }, {
      "left" : "in.nextNull();",
      "right" : "in.nextNull();",
      "info" : "ExpressionStatement[13054-13068]:ExpressionStatement[13073-13087]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[13077-13089]:ReturnStatement[13096-13108]"
    }, {
      "left" : "if (peek == JsonToken.BOOLEAN)",
      "right" : "if (peek == JsonToken.BOOLEAN)",
      "info" : "IfStatement[13171-13262]:IfStatement[13190-13281]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13202-13262]:Block[13221-13281]"
    }, {
      "left" : "return Boolean.toString(in.nextBoolean());",
      "right" : "return Boolean.toString(in.nextBoolean());",
      "info" : "ReturnStatement[13212-13254]:ReturnStatement[13231-13273]"
    }, {
      "left" : "return in.nextString();",
      "right" : "return in.nextString();",
      "info" : "ReturnStatement[13269-13292]:ReturnStatement[13288-13311]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13384-13415]:Block[13403-13434]"
    }, {
      "left" : "out.value(value);",
      "right" : "out.value(value);",
      "info" : "ExpressionStatement[13392-13409]:ExpressionStatement[13411-13428]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13587-13839]:Block[13606-13858]"
    }, {
      "left" : "if (in.peek() == JsonToken.NULL)",
      "right" : "if (in.peek() == JsonToken.NULL)",
      "info" : "IfStatement[13595-13681]:IfStatement[13614-13700]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13628-13681]:Block[13647-13700]"
    }, {
      "left" : "in.nextNull();",
      "right" : "in.nextNull();",
      "info" : "ExpressionStatement[13638-13652]:ExpressionStatement[13657-13671]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[13661-13673]:ReturnStatement[13680-13692]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[13688-13833]:TryStatement[13707-13852]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13692-13749]:Block[13711-13768]"
    }, {
      "left" : "return new BigDecimal(in.nextString());",
      "right" : "return new BigDecimal(in.nextString());",
      "info" : "ReturnStatement[13702-13741]:ReturnStatement[13721-13760]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13782-13833]:Block[13801-13852]"
    }, {
      "left" : "throw new JsonSyntaxException(e);",
      "right" : "throw new JsonSyntaxException(e);",
      "info" : "ThrowStatement[13792-13825]:ThrowStatement[13811-13844]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13926-13957]:Block[13945-13976]"
    }, {
      "left" : "out.value(value);",
      "right" : "out.value(value);",
      "info" : "ExpressionStatement[13934-13951]:ExpressionStatement[13953-13970]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14129-14381]:Block[14148-14400]"
    }, {
      "left" : "if (in.peek() == JsonToken.NULL)",
      "right" : "if (in.peek() == JsonToken.NULL)",
      "info" : "IfStatement[14137-14223]:IfStatement[14156-14242]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14170-14223]:Block[14189-14242]"
    }, {
      "left" : "in.nextNull();",
      "right" : "in.nextNull();",
      "info" : "ExpressionStatement[14180-14194]:ExpressionStatement[14199-14213]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[14203-14215]:ReturnStatement[14222-14234]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[14230-14375]:TryStatement[14249-14394]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14234-14291]:Block[14253-14310]"
    }, {
      "left" : "return new BigInteger(in.nextString());",
      "right" : "return new BigInteger(in.nextString());",
      "info" : "ReturnStatement[14244-14283]:ReturnStatement[14263-14302]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14324-14375]:Block[14343-14394]"
    }, {
      "left" : "throw new JsonSyntaxException(e);",
      "right" : "throw new JsonSyntaxException(e);",
      "info" : "ThrowStatement[14334-14367]:ThrowStatement[14353-14386]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14468-14499]:Block[14487-14518]"
    }, {
      "left" : "out.value(value);",
      "right" : "out.value(value);",
      "info" : "ExpressionStatement[14476-14493]:ExpressionStatement[14495-14512]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14778-14927]:Block[14797-14946]"
    }, {
      "left" : "if (in.peek() == JsonToken.NULL)",
      "right" : "if (in.peek() == JsonToken.NULL)",
      "info" : "IfStatement[14786-14872]:IfStatement[14805-14891]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14819-14872]:Block[14838-14891]"
    }, {
      "left" : "in.nextNull();",
      "right" : "in.nextNull();",
      "info" : "ExpressionStatement[14829-14843]:ExpressionStatement[14848-14862]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[14852-14864]:ReturnStatement[14871-14883]"
    }, {
      "left" : "return new StringBuilder(in.nextString());",
      "right" : "return new StringBuilder(in.nextString());",
      "info" : "ReturnStatement[14879-14921]:ReturnStatement[14898-14940]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15020-15085]:Block[15039-15104]"
    }, {
      "left" : "out.value(value == null ? null : value.toString());",
      "right" : "out.value(value == null ? null : value.toString());",
      "info" : "ExpressionStatement[15028-15079]:ExpressionStatement[15047-15098]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15387-15535]:Block[15406-15554]"
    }, {
      "left" : "if (in.peek() == JsonToken.NULL)",
      "right" : "if (in.peek() == JsonToken.NULL)",
      "info" : "IfStatement[15395-15481]:IfStatement[15414-15500]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15428-15481]:Block[15447-15500]"
    }, {
      "left" : "in.nextNull();",
      "right" : "in.nextNull();",
      "info" : "ExpressionStatement[15438-15452]:ExpressionStatement[15457-15471]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[15461-15473]:ReturnStatement[15480-15492]"
    }, {
      "left" : "return new StringBuffer(in.nextString());",
      "right" : "return new StringBuffer(in.nextString());",
      "info" : "ReturnStatement[15488-15529]:ReturnStatement[15507-15548]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15627-15692]:Block[15646-15711]"
    }, {
      "left" : "out.value(value == null ? null : value.toString());",
      "right" : "out.value(value == null ? null : value.toString());",
      "info" : "ExpressionStatement[15635-15686]:ExpressionStatement[15654-15705]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15954-16166]:Block[15973-16185]"
    }, {
      "left" : "if (in.peek() == JsonToken.NULL)",
      "right" : "if (in.peek() == JsonToken.NULL)",
      "info" : "IfStatement[15962-16048]:IfStatement[15981-16067]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15995-16048]:Block[16014-16067]"
    }, {
      "left" : "in.nextNull();",
      "right" : "in.nextNull();",
      "info" : "ExpressionStatement[16005-16019]:ExpressionStatement[16024-16038]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[16028-16040]:ReturnStatement[16047-16059]"
    }, {
      "left" : "String nextString = in.nextString();",
      "right" : "String nextString = in.nextString();",
      "info" : "VariableDeclarationStatement[16055-16091]:VariableDeclarationStatement[16074-16110]"
    }, {
      "left" : "return \"null\".equals(nextString) ? null : new URL(nextString);",
      "right" : "return \"null\".equals(nextString) ? null : new URL(nextString);",
      "info" : "ReturnStatement[16098-16160]:ReturnStatement[16117-16179]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16249-16320]:Block[16268-16339]"
    }, {
      "left" : "out.value(value == null ? null : value.toExternalForm());",
      "right" : "out.value(value == null ? null : value.toExternalForm());",
      "info" : "ExpressionStatement[16257-16314]:ExpressionStatement[16276-16333]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16549-16862]:Block[16568-16881]"
    }, {
      "left" : "if (in.peek() == JsonToken.NULL)",
      "right" : "if (in.peek() == JsonToken.NULL)",
      "info" : "IfStatement[16557-16643]:IfStatement[16576-16662]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16590-16643]:Block[16609-16662]"
    }, {
      "left" : "in.nextNull();",
      "right" : "in.nextNull();",
      "info" : "ExpressionStatement[16600-16614]:ExpressionStatement[16619-16633]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[16623-16635]:ReturnStatement[16642-16654]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[16650-16856]:TryStatement[16669-16875]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16654-16779]:Block[16673-16798]"
    }, {
      "left" : "String nextString = in.nextString();",
      "right" : "String nextString = in.nextString();",
      "info" : "VariableDeclarationStatement[16664-16700]:VariableDeclarationStatement[16683-16719]"
    }, {
      "left" : "return \"null\".equals(nextString) ? null : new URI(nextString);",
      "right" : "return \"null\".equals(nextString) ? null : new URI(nextString);",
      "info" : "ReturnStatement[16709-16771]:ReturnStatement[16728-16790]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16809-16856]:Block[16828-16875]"
    }, {
      "left" : "throw new JsonIOException(e);",
      "right" : "throw new JsonIOException(e);",
      "info" : "ThrowStatement[16819-16848]:ThrowStatement[16838-16867]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16945-17015]:Block[16964-17034]"
    }, {
      "left" : "out.value(value == null ? null : value.toASCIIString());",
      "right" : "out.value(value == null ? null : value.toASCIIString());",
      "info" : "ExpressionStatement[16953-17009]:ExpressionStatement[16972-17028]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17277-17518]:Block[17296-17537]"
    }, {
      "left" : "if (in.peek() == JsonToken.NULL)",
      "right" : "if (in.peek() == JsonToken.NULL)",
      "info" : "IfStatement[17285-17371]:IfStatement[17304-17390]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17318-17371]:Block[17337-17390]"
    }, {
      "left" : "in.nextNull();",
      "right" : "in.nextNull();",
      "info" : "ExpressionStatement[17328-17342]:ExpressionStatement[17347-17361]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[17351-17363]:ReturnStatement[17370-17382]"
    }, {
      "left" : "return InetAddress.getByName(in.nextString());",
      "right" : "return InetAddress.getByName(in.nextString());",
      "info" : "ReturnStatement[17466-17512]:ReturnStatement[17485-17531]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17609-17680]:Block[17628-17699]"
    }, {
      "left" : "out.value(value == null ? null : value.getHostAddress());",
      "right" : "out.value(value == null ? null : value.getHostAddress());",
      "info" : "ExpressionStatement[17617-17674]:ExpressionStatement[17636-17693]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17956-18113]:Block[17975-18132]"
    }, {
      "left" : "if (in.peek() == JsonToken.NULL)",
      "right" : "if (in.peek() == JsonToken.NULL)",
      "info" : "IfStatement[17964-18050]:IfStatement[17983-18069]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17997-18050]:Block[18016-18069]"
    }, {
      "left" : "in.nextNull();",
      "right" : "in.nextNull();",
      "info" : "ExpressionStatement[18007-18021]:ExpressionStatement[18026-18040]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[18030-18042]:ReturnStatement[18049-18061]"
    }, {
      "left" : "return java.util.UUID.fromString(in.nextString());",
      "right" : "return java.util.UUID.fromString(in.nextString());",
      "info" : "ReturnStatement[18057-18107]:ReturnStatement[18076-18126]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18197-18262]:Block[18216-18281]"
    }, {
      "left" : "out.value(value == null ? null : value.toString());",
      "right" : "out.value(value == null ? null : value.toString());",
      "info" : "ExpressionStatement[18205-18256]:ExpressionStatement[18224-18275]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18514-18573]:Block[18533-18592]"
    }, {
      "left" : "return Currency.getInstance(in.nextString());",
      "right" : "return Currency.getInstance(in.nextString());",
      "info" : "ReturnStatement[18522-18567]:ReturnStatement[18541-18586]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18661-18710]:Block[18680-18729]"
    }, {
      "left" : "out.value(value.getCurrencyCode());",
      "right" : "out.value(value.getCurrencyCode());",
      "info" : "ExpressionStatement[18669-18704]:ExpressionStatement[18688-18723]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19085-19674]:Block[19104-19693]"
    }, {
      "left" : "if (typeToken.getRawType() != Timestamp.class)",
      "right" : "if (typeToken.getRawType() != Timestamp.class)",
      "info" : "IfStatement[19093-19170]:IfStatement[19112-19189]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19140-19170]:Block[19159-19189]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[19150-19162]:ReturnStatement[19169-19181]"
    }, {
      "left" : "final TypeAdapter<Date> dateTypeAdapter = gson.getAdapter(Date.class);",
      "right" : "final TypeAdapter<Date> dateTypeAdapter = gson.getAdapter(Date.class);",
      "info" : "VariableDeclarationStatement[19178-19248]:VariableDeclarationStatement[19197-19267]"
    }, {
      "left" : "return (TypeAdapter<T>) new TypeAdapter<Timestamp>() {\n        @Override public Timestamp read(JsonReader in) throws IOException {\n          Date date = dateTypeAdapter.read(in);\n          return date != null ? new Timestamp(date.getTime()) : null;\n        }\n\n        @Override public void write(JsonWriter out, Timestamp value) throws IOException {\n          dateTypeAdapter.write(out, value);\n        }\n      };",
      "right" : "return (TypeAdapter<T>) new TypeAdapter<Timestamp>() {\n        @Override public Timestamp read(JsonReader in) throws IOException {\n          Date date = dateTypeAdapter.read(in);\n          return date != null ? new Timestamp(date.getTime()) : null;\n        }\n\n        @Override public void write(JsonWriter out, Timestamp value) throws IOException {\n          dateTypeAdapter.write(out, value);\n        }\n      };",
      "info" : "ReturnStatement[19255-19668]:ReturnStatement[19274-19687]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19384-19513]:Block[19403-19532]"
    }, {
      "left" : "Date date = dateTypeAdapter.read(in);",
      "right" : "Date date = dateTypeAdapter.read(in);",
      "info" : "VariableDeclarationStatement[19396-19433]:VariableDeclarationStatement[19415-19452]"
    }, {
      "left" : "return date != null ? new Timestamp(date.getTime()) : null;",
      "right" : "return date != null ? new Timestamp(date.getTime()) : null;",
      "info" : "ReturnStatement[19444-19503]:ReturnStatement[19463-19522]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19603-19659]:Block[19622-19678]"
    }, {
      "left" : "dateTypeAdapter.write(out, value);",
      "right" : "dateTypeAdapter.write(out, value);",
      "info" : "ExpressionStatement[19615-19649]:ExpressionStatement[19634-19668]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20158-21081]:Block[20177-21100]"
    }, {
      "left" : "if (in.peek() == JsonToken.NULL)",
      "right" : "if (in.peek() == JsonToken.NULL)",
      "info" : "IfStatement[20166-20253]:IfStatement[20185-20272]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20199-20253]:Block[20218-20272]"
    }, {
      "left" : "in.nextNull();",
      "right" : "in.nextNull();",
      "info" : "ExpressionStatement[20209-20223]:ExpressionStatement[20228-20242]"
    }, {
      "left" : "return  null;",
      "right" : "return  null;",
      "info" : "ReturnStatement[20232-20245]:ReturnStatement[20251-20264]"
    }, {
      "left" : "in.beginObject();",
      "right" : "in.beginObject();",
      "info" : "ExpressionStatement[20260-20277]:ExpressionStatement[20279-20296]"
    }, {
      "left" : "int year = 0;",
      "right" : "int year = 0;",
      "info" : "VariableDeclarationStatement[20284-20297]:VariableDeclarationStatement[20303-20316]"
    }, {
      "left" : "int month = 0;",
      "right" : "int month = 0;",
      "info" : "VariableDeclarationStatement[20304-20318]:VariableDeclarationStatement[20323-20337]"
    }, {
      "left" : "int dayOfMonth = 0;",
      "right" : "int dayOfMonth = 0;",
      "info" : "VariableDeclarationStatement[20325-20344]:VariableDeclarationStatement[20344-20363]"
    }, {
      "left" : "int hourOfDay = 0;",
      "right" : "int hourOfDay = 0;",
      "info" : "VariableDeclarationStatement[20351-20369]:VariableDeclarationStatement[20370-20388]"
    }, {
      "left" : "int minute = 0;",
      "right" : "int minute = 0;",
      "info" : "VariableDeclarationStatement[20376-20391]:VariableDeclarationStatement[20395-20410]"
    }, {
      "left" : "int second = 0;",
      "right" : "int second = 0;",
      "info" : "VariableDeclarationStatement[20398-20413]:VariableDeclarationStatement[20417-20432]"
    }, {
      "left" : "while (in.peek() != JsonToken.END_OBJECT)",
      "right" : "while (in.peek() != JsonToken.END_OBJECT)",
      "info" : "WhileStatement[20420-20965]:WhileStatement[20439-20984]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20462-20965]:Block[20481-20984]"
    }, {
      "left" : "String name = in.nextName();",
      "right" : "String name = in.nextName();",
      "info" : "VariableDeclarationStatement[20472-20500]:VariableDeclarationStatement[20491-20519]"
    }, {
      "left" : "int value = in.nextInt();",
      "right" : "int value = in.nextInt();",
      "info" : "VariableDeclarationStatement[20509-20534]:VariableDeclarationStatement[20528-20553]"
    }, {
      "left" : "if (YEAR.equals(name))",
      "right" : "if (YEAR.equals(name))",
      "info" : "IfStatement[20543-20957]:IfStatement[20562-20976]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20566-20601]:Block[20585-20620]"
    }, {
      "left" : "year = value;",
      "right" : "year = value;",
      "info" : "ExpressionStatement[20578-20591]:ExpressionStatement[20597-20610]"
    }, {
      "left" : "if (MONTH.equals(name))",
      "right" : "if (MONTH.equals(name))",
      "info" : "IfStatement[20607-20957]:IfStatement[20626-20976]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20631-20667]:Block[20650-20686]"
    }, {
      "left" : "month = value;",
      "right" : "month = value;",
      "info" : "ExpressionStatement[20643-20657]:ExpressionStatement[20662-20676]"
    }, {
      "left" : "if (DAY_OF_MONTH.equals(name))",
      "right" : "if (DAY_OF_MONTH.equals(name))",
      "info" : "IfStatement[20673-20957]:IfStatement[20692-20976]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20704-20745]:Block[20723-20764]"
    }, {
      "left" : "dayOfMonth = value;",
      "right" : "dayOfMonth = value;",
      "info" : "ExpressionStatement[20716-20735]:ExpressionStatement[20735-20754]"
    }, {
      "left" : "if (HOUR_OF_DAY.equals(name))",
      "right" : "if (HOUR_OF_DAY.equals(name))",
      "info" : "IfStatement[20751-20957]:IfStatement[20770-20976]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20781-20821]:Block[20800-20840]"
    }, {
      "left" : "hourOfDay = value;",
      "right" : "hourOfDay = value;",
      "info" : "ExpressionStatement[20793-20811]:ExpressionStatement[20812-20830]"
    }, {
      "left" : "if (MINUTE.equals(name))",
      "right" : "if (MINUTE.equals(name))",
      "info" : "IfStatement[20827-20957]:IfStatement[20846-20976]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20852-20889]:Block[20871-20908]"
    }, {
      "left" : "minute = value;",
      "right" : "minute = value;",
      "info" : "ExpressionStatement[20864-20879]:ExpressionStatement[20883-20898]"
    }, {
      "left" : "if (SECOND.equals(name))",
      "right" : "if (SECOND.equals(name))",
      "info" : "IfStatement[20895-20957]:IfStatement[20914-20976]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20920-20957]:Block[20939-20976]"
    }, {
      "left" : "second = value;",
      "right" : "second = value;",
      "info" : "ExpressionStatement[20932-20947]:ExpressionStatement[20951-20966]"
    }, {
      "left" : "in.endObject();",
      "right" : "in.endObject();",
      "info" : "ExpressionStatement[20972-20987]:ExpressionStatement[20991-21006]"
    }, {
      "left" : "return new GregorianCalendar(year, month, dayOfMonth, hourOfDay, minute, second);",
      "right" : "return new GregorianCalendar(year, month, dayOfMonth, hourOfDay, minute, second);",
      "info" : "ReturnStatement[20994-21075]:ReturnStatement[21013-21094]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21170-21731]:Block[21189-21750]"
    }, {
      "left" : "if (value == null)",
      "right" : "if (value == null)",
      "info" : "IfStatement[21178-21247]:IfStatement[21197-21266]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21197-21247]:Block[21216-21266]"
    }, {
      "left" : "out.nullValue();",
      "right" : "out.nullValue();",
      "info" : "ExpressionStatement[21207-21223]:ExpressionStatement[21226-21242]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[21232-21239]:ReturnStatement[21251-21258]"
    }, {
      "left" : "out.beginObject();",
      "right" : "out.beginObject();",
      "info" : "ExpressionStatement[21254-21272]:ExpressionStatement[21273-21291]"
    }, {
      "left" : "out.name(YEAR);",
      "right" : "out.name(YEAR);",
      "info" : "ExpressionStatement[21279-21294]:ExpressionStatement[21298-21313]"
    }, {
      "left" : "out.value(value.get(Calendar.YEAR));",
      "right" : "out.value(value.get(Calendar.YEAR));",
      "info" : "ExpressionStatement[21301-21337]:ExpressionStatement[21320-21356]"
    }, {
      "left" : "out.name(MONTH);",
      "right" : "out.name(MONTH);",
      "info" : "ExpressionStatement[21344-21360]:ExpressionStatement[21363-21379]"
    }, {
      "left" : "out.value(value.get(Calendar.MONTH));",
      "right" : "out.value(value.get(Calendar.MONTH));",
      "info" : "ExpressionStatement[21367-21404]:ExpressionStatement[21386-21423]"
    }, {
      "left" : "out.name(DAY_OF_MONTH);",
      "right" : "out.name(DAY_OF_MONTH);",
      "info" : "ExpressionStatement[21411-21434]:ExpressionStatement[21430-21453]"
    }, {
      "left" : "out.value(value.get(Calendar.DAY_OF_MONTH));",
      "right" : "out.value(value.get(Calendar.DAY_OF_MONTH));",
      "info" : "ExpressionStatement[21441-21485]:ExpressionStatement[21460-21504]"
    }, {
      "left" : "out.name(HOUR_OF_DAY);",
      "right" : "out.name(HOUR_OF_DAY);",
      "info" : "ExpressionStatement[21492-21514]:ExpressionStatement[21511-21533]"
    }, {
      "left" : "out.value(value.get(Calendar.HOUR_OF_DAY));",
      "right" : "out.value(value.get(Calendar.HOUR_OF_DAY));",
      "info" : "ExpressionStatement[21521-21564]:ExpressionStatement[21540-21583]"
    }, {
      "left" : "out.name(MINUTE);",
      "right" : "out.name(MINUTE);",
      "info" : "ExpressionStatement[21571-21588]:ExpressionStatement[21590-21607]"
    }, {
      "left" : "out.value(value.get(Calendar.MINUTE));",
      "right" : "out.value(value.get(Calendar.MINUTE));",
      "info" : "ExpressionStatement[21595-21633]:ExpressionStatement[21614-21652]"
    }, {
      "left" : "out.name(SECOND);",
      "right" : "out.name(SECOND);",
      "info" : "ExpressionStatement[21640-21657]:ExpressionStatement[21659-21676]"
    }, {
      "left" : "out.value(value.get(Calendar.SECOND));",
      "right" : "out.value(value.get(Calendar.SECOND));",
      "info" : "ExpressionStatement[21664-21702]:ExpressionStatement[21683-21721]"
    }, {
      "left" : "out.endObject();",
      "right" : "out.endObject();",
      "info" : "ExpressionStatement[21709-21725]:ExpressionStatement[21728-21744]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22032-22843]:Block[22051-22862]"
    }, {
      "left" : "if (in.peek() == JsonToken.NULL)",
      "right" : "if (in.peek() == JsonToken.NULL)",
      "info" : "IfStatement[22040-22126]:IfStatement[22059-22145]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22073-22126]:Block[22092-22145]"
    }, {
      "left" : "in.nextNull();",
      "right" : "in.nextNull();",
      "info" : "ExpressionStatement[22083-22097]:ExpressionStatement[22102-22116]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[22106-22118]:ReturnStatement[22125-22137]"
    }, {
      "left" : "String locale = in.nextString();",
      "right" : "String locale = in.nextString();",
      "info" : "VariableDeclarationStatement[22133-22165]:VariableDeclarationStatement[22152-22184]"
    }, {
      "left" : "StringTokenizer tokenizer = new StringTokenizer(locale, \"_\");",
      "right" : "StringTokenizer tokenizer = new StringTokenizer(locale, \"_\");",
      "info" : "VariableDeclarationStatement[22172-22233]:VariableDeclarationStatement[22191-22252]"
    }, {
      "left" : "String language = null;",
      "right" : "String language = null;",
      "info" : "VariableDeclarationStatement[22240-22263]:VariableDeclarationStatement[22259-22282]"
    }, {
      "left" : "String country = null;",
      "right" : "String country = null;",
      "info" : "VariableDeclarationStatement[22270-22292]:VariableDeclarationStatement[22289-22311]"
    }, {
      "left" : "String variant = null;",
      "right" : "String variant = null;",
      "info" : "VariableDeclarationStatement[22299-22321]:VariableDeclarationStatement[22318-22340]"
    }, {
      "left" : "if (tokenizer.hasMoreElements())",
      "right" : "if (tokenizer.hasMoreElements())",
      "info" : "IfStatement[22328-22412]:IfStatement[22347-22431]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22361-22412]:Block[22380-22431]"
    }, {
      "left" : "language = tokenizer.nextToken();",
      "right" : "language = tokenizer.nextToken();",
      "info" : "ExpressionStatement[22371-22404]:ExpressionStatement[22390-22423]"
    }, {
      "left" : "if (tokenizer.hasMoreElements())",
      "right" : "if (tokenizer.hasMoreElements())",
      "info" : "IfStatement[22419-22502]:IfStatement[22438-22521]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22452-22502]:Block[22471-22521]"
    }, {
      "left" : "country = tokenizer.nextToken();",
      "right" : "country = tokenizer.nextToken();",
      "info" : "ExpressionStatement[22462-22494]:ExpressionStatement[22481-22513]"
    }, {
      "left" : "if (tokenizer.hasMoreElements())",
      "right" : "if (tokenizer.hasMoreElements())",
      "info" : "IfStatement[22509-22592]:IfStatement[22528-22611]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22542-22592]:Block[22561-22611]"
    }, {
      "left" : "variant = tokenizer.nextToken();",
      "right" : "variant = tokenizer.nextToken();",
      "info" : "ExpressionStatement[22552-22584]:ExpressionStatement[22571-22603]"
    }, {
      "left" : "if (country == null && variant == null)",
      "right" : "if (country == null && variant == null)",
      "info" : "IfStatement[22599-22837]:IfStatement[22618-22856]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22639-22685]:Block[22658-22704]"
    }, {
      "left" : "return new Locale(language);",
      "right" : "return new Locale(language);",
      "info" : "ReturnStatement[22649-22677]:ReturnStatement[22668-22696]"
    }, {
      "left" : "if (variant == null)",
      "right" : "if (variant == null)",
      "info" : "IfStatement[22691-22837]:IfStatement[22710-22856]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22712-22767]:Block[22731-22786]"
    }, {
      "left" : "return new Locale(language, country);",
      "right" : "return new Locale(language, country);",
      "info" : "ReturnStatement[22722-22759]:ReturnStatement[22741-22778]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22773-22837]:Block[22792-22856]"
    }, {
      "left" : "return new Locale(language, country, variant);",
      "right" : "return new Locale(language, country, variant);",
      "info" : "ReturnStatement[22783-22829]:ReturnStatement[22802-22848]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22929-22994]:Block[22948-23013]"
    }, {
      "left" : "out.value(value == null ? null : value.toString());",
      "right" : "out.value(value == null ? null : value.toString());",
      "info" : "ExpressionStatement[22937-22988]:ExpressionStatement[22956-23007]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23261-24234]:Block[23280-24253]"
    }, {
      "left" : "switch (in.peek()) {\n      case STRING:\n        return new JsonPrimitive(in.nextString());\n      case NUMBER:\n        String number = in.nextString();\n        return new JsonPrimitive(new LazilyParsedNumber(number));\n      case BOOLEAN:\n        return new JsonPrimitive(in.nextBoolean());\n      case NULL:\n        in.nextNull();\n        return JsonNull.INSTANCE;\n      case BEGIN_ARRAY:\n        JsonArray array = new JsonArray();\n        in.beginArray();\n        while (in.hasNext()) {\n          array.add(read(in));\n        }\n        in.endArray();\n        return array;\n      case BEGIN_OBJECT:\n        JsonObject object = new JsonObject();\n        in.beginObject();\n        while (in.hasNext()) {\n          object.add(in.nextName(), read(in));\n        }\n        in.endObject();\n        return object;\n      case END_DOCUMENT:\n      case NAME:\n      case END_OBJECT:\n      case END_ARRAY:\n      default:\n        throw new IllegalArgumentException();\n      }",
      "right" : "switch (in.peek()) {\n      case STRING:\n        return new JsonPrimitive(in.nextString());\n      case NUMBER:\n        String number = in.nextString();\n        return new JsonPrimitive(new LazilyParsedNumber(number));\n      case BOOLEAN:\n        return new JsonPrimitive(in.nextBoolean());\n      case NULL:\n        in.nextNull();\n        return JsonNull.INSTANCE;\n      case BEGIN_ARRAY:\n        JsonArray array = new JsonArray();\n        in.beginArray();\n        while (in.hasNext()) {\n          array.add(read(in));\n        }\n        in.endArray();\n        return array;\n      case BEGIN_OBJECT:\n        JsonObject object = new JsonObject();\n        in.beginObject();\n        while (in.hasNext()) {\n          object.add(in.nextName(), read(in));\n        }\n        in.endObject();\n        return object;\n      case END_DOCUMENT:\n      case NAME:\n      case END_OBJECT:\n      case END_ARRAY:\n      default:\n        throw new IllegalArgumentException();\n      }",
      "info" : "SwitchStatement[23269-24228]:SwitchStatement[23288-24247]"
    }, {
      "left" : "case STRING:",
      "right" : "case STRING:",
      "info" : "SwitchCase[23296-23308]:SwitchCase[23315-23327]"
    }, {
      "left" : "return new JsonPrimitive(in.nextString());",
      "right" : "return new JsonPrimitive(in.nextString());",
      "info" : "ReturnStatement[23317-23359]:ReturnStatement[23336-23378]"
    }, {
      "left" : "case NUMBER:",
      "right" : "case NUMBER:",
      "info" : "SwitchCase[23366-23378]:SwitchCase[23385-23397]"
    }, {
      "left" : "String number = in.nextString();",
      "right" : "String number = in.nextString();",
      "info" : "VariableDeclarationStatement[23387-23419]:VariableDeclarationStatement[23406-23438]"
    }, {
      "left" : "return new JsonPrimitive(new LazilyParsedNumber(number));",
      "right" : "return new JsonPrimitive(new LazilyParsedNumber(number));",
      "info" : "ReturnStatement[23428-23485]:ReturnStatement[23447-23504]"
    }, {
      "left" : "case BOOLEAN:",
      "right" : "case BOOLEAN:",
      "info" : "SwitchCase[23492-23505]:SwitchCase[23511-23524]"
    }, {
      "left" : "return new JsonPrimitive(in.nextBoolean());",
      "right" : "return new JsonPrimitive(in.nextBoolean());",
      "info" : "ReturnStatement[23514-23557]:ReturnStatement[23533-23576]"
    }, {
      "left" : "case NULL:",
      "right" : "case NULL:",
      "info" : "SwitchCase[23564-23574]:SwitchCase[23583-23593]"
    }, {
      "left" : "in.nextNull();",
      "right" : "in.nextNull();",
      "info" : "ExpressionStatement[23583-23597]:ExpressionStatement[23602-23616]"
    }, {
      "left" : "return JsonNull.INSTANCE;",
      "right" : "return JsonNull.INSTANCE;",
      "info" : "ReturnStatement[23606-23631]:ReturnStatement[23625-23650]"
    }, {
      "left" : "case BEGIN_ARRAY:",
      "right" : "case BEGIN_ARRAY:",
      "info" : "SwitchCase[23638-23655]:SwitchCase[23657-23674]"
    }, {
      "left" : "JsonArray array = new JsonArray();",
      "right" : "JsonArray array = new JsonArray();",
      "info" : "VariableDeclarationStatement[23664-23698]:VariableDeclarationStatement[23683-23717]"
    }, {
      "left" : "in.beginArray();",
      "right" : "in.beginArray();",
      "info" : "ExpressionStatement[23707-23723]:ExpressionStatement[23726-23742]"
    }, {
      "left" : "while (in.hasNext())",
      "right" : "while (in.hasNext())",
      "info" : "WhileStatement[23732-23795]:WhileStatement[23751-23814]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23753-23795]:Block[23772-23814]"
    }, {
      "left" : "array.add(read(in));",
      "right" : "array.add(read(in));",
      "info" : "ExpressionStatement[23765-23785]:ExpressionStatement[23784-23804]"
    }, {
      "left" : "in.endArray();",
      "right" : "in.endArray();",
      "info" : "ExpressionStatement[23804-23818]:ExpressionStatement[23823-23837]"
    }, {
      "left" : "return array;",
      "right" : "return array;",
      "info" : "ReturnStatement[23827-23840]:ReturnStatement[23846-23859]"
    }, {
      "left" : "case BEGIN_OBJECT:",
      "right" : "case BEGIN_OBJECT:",
      "info" : "SwitchCase[23847-23865]:SwitchCase[23866-23884]"
    }, {
      "left" : "JsonObject object = new JsonObject();",
      "right" : "JsonObject object = new JsonObject();",
      "info" : "VariableDeclarationStatement[23874-23911]:VariableDeclarationStatement[23893-23930]"
    }, {
      "left" : "in.beginObject();",
      "right" : "in.beginObject();",
      "info" : "ExpressionStatement[23920-23937]:ExpressionStatement[23939-23956]"
    }, {
      "left" : "while (in.hasNext())",
      "right" : "while (in.hasNext())",
      "info" : "WhileStatement[23946-24025]:WhileStatement[23965-24044]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23967-24025]:Block[23986-24044]"
    }, {
      "left" : "object.add(in.nextName(), read(in));",
      "right" : "object.add(in.nextName(), read(in));",
      "info" : "ExpressionStatement[23979-24015]:ExpressionStatement[23998-24034]"
    }, {
      "left" : "in.endObject();",
      "right" : "in.endObject();",
      "info" : "ExpressionStatement[24034-24049]:ExpressionStatement[24053-24068]"
    }, {
      "left" : "return object;",
      "right" : "return object;",
      "info" : "ReturnStatement[24058-24072]:ReturnStatement[24077-24091]"
    }, {
      "left" : "case END_DOCUMENT:",
      "right" : "case END_DOCUMENT:",
      "info" : "SwitchCase[24079-24097]:SwitchCase[24098-24116]"
    }, {
      "left" : "case NAME:",
      "right" : "case NAME:",
      "info" : "SwitchCase[24104-24114]:SwitchCase[24123-24133]"
    }, {
      "left" : "case END_OBJECT:",
      "right" : "case END_OBJECT:",
      "info" : "SwitchCase[24121-24137]:SwitchCase[24140-24156]"
    }, {
      "left" : "case END_ARRAY:",
      "right" : "case END_ARRAY:",
      "info" : "SwitchCase[24144-24159]:SwitchCase[24163-24178]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[24166-24174]:SwitchCase[24185-24193]"
    }, {
      "left" : "throw new IllegalArgumentException();",
      "right" : "throw new IllegalArgumentException();",
      "info" : "ThrowStatement[24183-24220]:ThrowStatement[24202-24239]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24322-25300]:Block[24341-25319]"
    }, {
      "left" : "if (value == null || value.isJsonNull())",
      "right" : "if (value == null || value.isJsonNull())",
      "info" : "IfStatement[24330-25294]:IfStatement[24349-25313]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24371-24405]:Block[24390-24424]"
    }, {
      "left" : "out.nullValue();",
      "right" : "out.nullValue();",
      "info" : "ExpressionStatement[24381-24397]:ExpressionStatement[24400-24416]"
    }, {
      "left" : "if (value.isJsonPrimitive())",
      "right" : "if (value.isJsonPrimitive())",
      "info" : "IfStatement[24411-25294]:IfStatement[24430-25313]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24440-24758]:Block[24459-24777]"
    }, {
      "left" : "JsonPrimitive primitive = value.getAsJsonPrimitive();",
      "right" : "JsonPrimitive primitive = value.getAsJsonPrimitive();",
      "info" : "VariableDeclarationStatement[24450-24503]:VariableDeclarationStatement[24469-24522]"
    }, {
      "left" : "if (primitive.isNumber())",
      "right" : "if (primitive.isNumber())",
      "info" : "IfStatement[24512-24749]:IfStatement[24531-24768]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24538-24595]:Block[24557-24614]"
    }, {
      "left" : "out.value(primitive.getAsNumber());",
      "right" : "out.value(primitive.getAsNumber());",
      "info" : "ExpressionStatement[24550-24585]:ExpressionStatement[24569-24604]"
    }, {
      "left" : "if (primitive.isBoolean())",
      "right" : "if (primitive.isBoolean())",
      "info" : "IfStatement[24601-24749]:IfStatement[24620-24768]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24628-24686]:Block[24647-24705]"
    }, {
      "left" : "out.value(primitive.getAsBoolean());",
      "right" : "out.value(primitive.getAsBoolean());",
      "info" : "ExpressionStatement[24640-24676]:ExpressionStatement[24659-24695]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24692-24749]:Block[24711-24768]"
    }, {
      "left" : "out.value(primitive.getAsString());",
      "right" : "out.value(primitive.getAsString());",
      "info" : "ExpressionStatement[24704-24739]:ExpressionStatement[24723-24758]"
    }, {
      "left" : "if (value.isJsonArray())",
      "right" : "if (value.isJsonArray())",
      "info" : "IfStatement[24764-25294]:IfStatement[24783-25313]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24789-24939]:Block[24808-24958]"
    }, {
      "left" : "out.beginArray();",
      "right" : "out.beginArray();",
      "info" : "ExpressionStatement[24799-24816]:ExpressionStatement[24818-24835]"
    }, {
      "left" : "for (JsonElement e : value.getAsJsonArray())",
      "right" : "for (JsonElement e : value.getAsJsonArray())",
      "info" : "EnhancedForStatement[24825-24906]:EnhancedForStatement[24844-24925]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24870-24906]:Block[24889-24925]"
    }, {
      "left" : "write(out, e);",
      "right" : "write(out, e);",
      "info" : "ExpressionStatement[24882-24896]:ExpressionStatement[24901-24915]"
    }, {
      "left" : "out.endArray();",
      "right" : "out.endArray();",
      "info" : "ExpressionStatement[24915-24930]:ExpressionStatement[24934-24949]"
    }, {
      "left" : "if (value.isJsonObject())",
      "right" : "if (value.isJsonObject())",
      "info" : "IfStatement[24945-25294]:IfStatement[24964-25313]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24971-25197]:Block[24990-25216]"
    }, {
      "left" : "out.beginObject();",
      "right" : "out.beginObject();",
      "info" : "ExpressionStatement[24981-24999]:ExpressionStatement[25000-25018]"
    }, {
      "left" : "for (Map.Entry<String, JsonElement> e : value.getAsJsonObject().entrySet())",
      "right" : "for (Map.Entry<String, JsonElement> e : value.getAsJsonObject().entrySet())",
      "info" : "EnhancedForStatement[25008-25163]:EnhancedForStatement[25027-25182]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25084-25163]:Block[25103-25182]"
    }, {
      "left" : "out.name(e.getKey());",
      "right" : "out.name(e.getKey());",
      "info" : "ExpressionStatement[25096-25117]:ExpressionStatement[25115-25136]"
    }, {
      "left" : "write(out, e.getValue());",
      "right" : "write(out, e.getValue());",
      "info" : "ExpressionStatement[25128-25153]:ExpressionStatement[25147-25172]"
    }, {
      "left" : "out.endObject();",
      "right" : "out.endObject();",
      "info" : "ExpressionStatement[25172-25188]:ExpressionStatement[25191-25207]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25203-25294]:Block[25222-25313]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Couldn't write \" + value.getClass());",
      "right" : "throw new IllegalArgumentException(\"Couldn't write \" + value.getClass());",
      "info" : "ThrowStatement[25213-25286]:ThrowStatement[25232-25305]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25724-26346]:Block[25743-26365]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[25732-26340]:TryStatement[25751-26359]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25736-26262]:Block[25755-26281]"
    }, {
      "left" : "for (T constant : classOfT.getEnumConstants())",
      "right" : "for (T constant : classOfT.getEnumConstants())",
      "info" : "EnhancedForStatement[25746-26254]:EnhancedForStatement[25765-26273]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25793-26254]:Block[25812-26273]"
    }, {
      "left" : "String name = constant.name();",
      "right" : "String name = constant.name();",
      "info" : "VariableDeclarationStatement[25805-25835]:VariableDeclarationStatement[25824-25854]"
    }, {
      "left" : "SerializedName annotation = classOfT.getField(name).getAnnotation(SerializedName.class);",
      "right" : "SerializedName annotation = classOfT.getField(name).getAnnotation(SerializedName.class);",
      "info" : "VariableDeclarationStatement[25846-25934]:VariableDeclarationStatement[25865-25953]"
    }, {
      "left" : "if (annotation != null)",
      "right" : "if (annotation != null)",
      "info" : "IfStatement[25945-26152]:IfStatement[25964-26171]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25969-26152]:Block[25988-26171]"
    }, {
      "left" : "name = annotation.value();",
      "right" : "name = annotation.value();",
      "info" : "ExpressionStatement[25983-26009]:ExpressionStatement[26002-26028]"
    }, {
      "left" : "for (String alternate : annotation.alternate())",
      "right" : "for (String alternate : annotation.alternate())",
      "info" : "EnhancedForStatement[26022-26140]:EnhancedForStatement[26041-26159]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26070-26140]:Block[26089-26159]"
    }, {
      "left" : "nameToConstant.put(alternate, constant);",
      "right" : "nameToConstant.put(alternate, constant);",
      "info" : "ExpressionStatement[26086-26126]:ExpressionStatement[26105-26145]"
    }, {
      "left" : "nameToConstant.put(name, constant);",
      "right" : "nameToConstant.put(name, constant);",
      "info" : "ExpressionStatement[26163-26198]:ExpressionStatement[26182-26217]"
    }, {
      "left" : "constantToName.put(constant, name);",
      "right" : "constantToName.put(constant, name);",
      "info" : "ExpressionStatement[26209-26244]:ExpressionStatement[26228-26263]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26294-26340]:Block[26313-26359]"
    }, {
      "left" : "throw new AssertionError(e);",
      "right" : "throw new AssertionError(e);",
      "info" : "ThrowStatement[26304-26332]:ThrowStatement[26323-26351]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26409-26559]:Block[26428-26578]"
    }, {
      "left" : "if (in.peek() == JsonToken.NULL)",
      "right" : "if (in.peek() == JsonToken.NULL)",
      "info" : "IfStatement[26417-26503]:IfStatement[26436-26522]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26450-26503]:Block[26469-26522]"
    }, {
      "left" : "in.nextNull();",
      "right" : "in.nextNull();",
      "info" : "ExpressionStatement[26460-26474]:ExpressionStatement[26479-26493]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[26483-26495]:ReturnStatement[26502-26514]"
    }, {
      "left" : "return nameToConstant.get(in.nextString());",
      "right" : "return nameToConstant.get(in.nextString());",
      "info" : "ReturnStatement[26510-26553]:ReturnStatement[26529-26572]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26637-26711]:Block[26656-26730]"
    }, {
      "left" : "out.value(value == null ? null : constantToName.get(value));",
      "right" : "out.value(value == null ? null : constantToName.get(value));",
      "info" : "ExpressionStatement[26645-26705]:ExpressionStatement[26664-26724]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26931-27273]:Block[26950-27292]"
    }, {
      "left" : "Class<? super T> rawType = typeToken.getRawType();",
      "right" : "Class<? super T> rawType = typeToken.getRawType();",
      "info" : "VariableDeclarationStatement[26939-26989]:VariableDeclarationStatement[26958-27008]"
    }, {
      "left" : "if (!Enum.class.isAssignableFrom(rawType) || rawType == Enum.class)",
      "right" : "if (!Enum.class.isAssignableFrom(rawType) || rawType == Enum.class)",
      "info" : "IfStatement[26996-27094]:IfStatement[27015-27113]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27064-27094]:Block[27083-27113]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[27074-27086]:ReturnStatement[27093-27105]"
    }, {
      "left" : "if (!rawType.isEnum())",
      "right" : "if (!rawType.isEnum())",
      "info" : "IfStatement[27101-27207]:IfStatement[27120-27226]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27124-27207]:Block[27143-27226]"
    }, {
      "left" : "rawType = rawType.getSuperclass();",
      "right" : "rawType = rawType.getSuperclass();",
      "info" : "ExpressionStatement[27134-27168]:ExpressionStatement[27153-27187]"
    }, {
      "left" : "return (TypeAdapter<T>) new EnumTypeAdapter(rawType);",
      "right" : "return (TypeAdapter<T>) new EnumTypeAdapter(rawType);",
      "info" : "ReturnStatement[27214-27267]:ReturnStatement[27233-27286]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27399-27711]:Block[27418-27730]"
    }, {
      "left" : "return new TypeAdapterFactory() {\n      @SuppressWarnings(\"unchecked\") // we use a runtime check to make sure the 'T's equal\n      @Override public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {\n        return typeToken.equals(type) ? (TypeAdapter<T>) typeAdapter : null;\n      }\n    };",
      "right" : "return new TypeAdapterFactory() {\n      @SuppressWarnings(\"unchecked\") // we use a runtime check to make sure the 'T's equal\n      @Override public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {\n        return typeToken.equals(type) ? (TypeAdapter<T>) typeAdapter : null;\n      }\n    };",
      "info" : "ReturnStatement[27405-27707]:ReturnStatement[27424-27726]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27614-27700]:Block[27633-27719]"
    }, {
      "left" : "return typeToken.equals(type) ? (TypeAdapter<T>) typeAdapter : null;",
      "right" : "return typeToken.equals(type) ? (TypeAdapter<T>) typeAdapter : null;",
      "info" : "ReturnStatement[27624-27692]:ReturnStatement[27643-27711]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27828-28282]:Block[27847-28301]"
    }, {
      "left" : "return new TypeAdapterFactory() {\n      @SuppressWarnings(\"unchecked\") // we use a runtime check to make sure the 'T's equal\n      @Override public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {\n        return typeToken.getRawType() == type ? (TypeAdapter<T>) typeAdapter : null;\n      }\n      @Override public String toString() {\n        return \"Factory[type=\" + type.getName() + \",adapter=\" + typeAdapter + \"]\";\n      }\n    };",
      "right" : "return new TypeAdapterFactory() {\n      @SuppressWarnings(\"unchecked\") // we use a runtime check to make sure the 'T's equal\n      @Override public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {\n        return typeToken.getRawType() == type ? (TypeAdapter<T>) typeAdapter : null;\n      }\n      @Override public String toString() {\n        return \"Factory[type=\" + type.getName() + \",adapter=\" + typeAdapter + \"]\";\n      }\n    };",
      "info" : "ReturnStatement[27834-28278]:ReturnStatement[27853-28297]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28043-28137]:Block[28062-28156]"
    }, {
      "left" : "return typeToken.getRawType() == type ? (TypeAdapter<T>) typeAdapter : null;",
      "right" : "return typeToken.getRawType() == type ? (TypeAdapter<T>) typeAdapter : null;",
      "info" : "ReturnStatement[28053-28129]:ReturnStatement[28072-28148]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28179-28271]:Block[28198-28290]"
    }, {
      "left" : "return \"Factory[type=\" + type.getName() + \",adapter=\" + typeAdapter + \"]\";",
      "right" : "return \"Factory[type=\" + type.getName() + \",adapter=\" + typeAdapter + \"]\";",
      "info" : "ReturnStatement[28189-28263]:ReturnStatement[28208-28282]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28433-28995]:Block[28452-29014]"
    }, {
      "left" : "return new TypeAdapterFactory() {\n      @SuppressWarnings(\"unchecked\") // we use a runtime check to make sure the 'T's equal\n      @Override public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {\n        Class<? super T> rawType = typeToken.getRawType();\n        return (rawType == unboxed || rawType == boxed) ? (TypeAdapter<T>) typeAdapter : null;\n      }\n      @Override public String toString() {\n        return \"Factory[type=\" + boxed.getName()\n            + \"+\" + unboxed.getName() + \",adapter=\" + typeAdapter + \"]\";\n      }\n    };",
      "right" : "return new TypeAdapterFactory() {\n      @SuppressWarnings(\"unchecked\") // we use a runtime check to make sure the 'T's equal\n      @Override public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {\n        Class<? super T> rawType = typeToken.getRawType();\n        return (rawType == unboxed || rawType == boxed) ? (TypeAdapter<T>) typeAdapter : null;\n      }\n      @Override public String toString() {\n        return \"Factory[type=\" + boxed.getName()\n            + \"+\" + unboxed.getName() + \",adapter=\" + typeAdapter + \"]\";\n      }\n    };",
      "info" : "ReturnStatement[28439-28991]:ReturnStatement[28458-29010]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28648-28811]:Block[28667-28830]"
    }, {
      "left" : "Class<? super T> rawType = typeToken.getRawType();",
      "right" : "Class<? super T> rawType = typeToken.getRawType();",
      "info" : "VariableDeclarationStatement[28658-28708]:VariableDeclarationStatement[28677-28727]"
    }, {
      "left" : "return (rawType == unboxed || rawType == boxed) ? (TypeAdapter<T>) typeAdapter : null;",
      "right" : "return (rawType == unboxed || rawType == boxed) ? (TypeAdapter<T>) typeAdapter : null;",
      "info" : "ReturnStatement[28717-28803]:ReturnStatement[28736-28822]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28853-28984]:Block[28872-29003]"
    }, {
      "left" : "return \"Factory[type=\" + boxed.getName()\n            + \"+\" + unboxed.getName() + \",adapter=\" + typeAdapter + \"]\";",
      "right" : "return \"Factory[type=\" + boxed.getName()\n            + \"+\" + unboxed.getName() + \",adapter=\" + typeAdapter + \"]\";",
      "info" : "ReturnStatement[28863-28976]:ReturnStatement[28882-28995]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29166-29718]:Block[29185-29737]"
    }, {
      "left" : "return new TypeAdapterFactory() {\n      @SuppressWarnings(\"unchecked\") // we use a runtime check to make sure the 'T's equal\n      @Override public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {\n        Class<? super T> rawType = typeToken.getRawType();\n        return (rawType == base || rawType == sub) ? (TypeAdapter<T>) typeAdapter : null;\n      }\n      @Override public String toString() {\n        return \"Factory[type=\" + base.getName()\n            + \"+\" + sub.getName() + \",adapter=\" + typeAdapter + \"]\";\n      }\n    };",
      "right" : "return new TypeAdapterFactory() {\n      @SuppressWarnings(\"unchecked\") // we use a runtime check to make sure the 'T's equal\n      @Override public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {\n        Class<? super T> rawType = typeToken.getRawType();\n        return (rawType == base || rawType == sub) ? (TypeAdapter<T>) typeAdapter : null;\n      }\n      @Override public String toString() {\n        return \"Factory[type=\" + base.getName()\n            + \"+\" + sub.getName() + \",adapter=\" + typeAdapter + \"]\";\n      }\n    };",
      "info" : "ReturnStatement[29172-29714]:ReturnStatement[29191-29733]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29381-29539]:Block[29400-29558]"
    }, {
      "left" : "Class<? super T> rawType = typeToken.getRawType();",
      "right" : "Class<? super T> rawType = typeToken.getRawType();",
      "info" : "VariableDeclarationStatement[29391-29441]:VariableDeclarationStatement[29410-29460]"
    }, {
      "left" : "return (rawType == base || rawType == sub) ? (TypeAdapter<T>) typeAdapter : null;",
      "right" : "return (rawType == base || rawType == sub) ? (TypeAdapter<T>) typeAdapter : null;",
      "info" : "ReturnStatement[29450-29531]:ReturnStatement[29469-29550]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29581-29707]:Block[29600-29726]"
    }, {
      "left" : "return \"Factory[type=\" + base.getName()\n            + \"+\" + sub.getName() + \",adapter=\" + typeAdapter + \"]\";",
      "right" : "return \"Factory[type=\" + base.getName()\n            + \"+\" + sub.getName() + \",adapter=\" + typeAdapter + \"]\";",
      "info" : "ReturnStatement[29591-29699]:ReturnStatement[29610-29718]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30018-31103]:Block[30037-31122]"
    }, {
      "left" : "return new TypeAdapterFactory() {\n      @SuppressWarnings(\"unchecked\")\n      @Override public <T2> TypeAdapter<T2> create(Gson gson, TypeToken<T2> typeToken) {\n        final Class<? super T2> requestedType = typeToken.getRawType();\n        if (!clazz.isAssignableFrom(requestedType)) {\n          return null;\n        }\n        return (TypeAdapter<T2>) new TypeAdapter<T1>() {\n          @Override public void write(JsonWriter out, T1 value) throws IOException {\n            typeAdapter.write(out, value);\n          }\n\n          @Override public T1 read(JsonReader in) throws IOException {\n            T1 result = typeAdapter.read(in);\n            if (result != null && !requestedType.isInstance(result)) {\n              throw new JsonSyntaxException(\"Expected a \" + requestedType.getName()\n                  + \" but was \" + result.getClass().getName());\n            }\n            return result;\n          }\n        };\n      }\n      @Override public String toString() {\n        return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\n      }\n    };",
      "right" : "return new TypeAdapterFactory() {\n      @SuppressWarnings(\"unchecked\")\n      @Override public <T2> TypeAdapter<T2> create(Gson gson, TypeToken<T2> typeToken) {\n        final Class<? super T2> requestedType = typeToken.getRawType();\n        if (!clazz.isAssignableFrom(requestedType)) {\n          return null;\n        }\n        return (TypeAdapter<T2>) new TypeAdapter<T1>() {\n          @Override public void write(JsonWriter out, T1 value) throws IOException {\n            typeAdapter.write(out, value);\n          }\n\n          @Override public T1 read(JsonReader in) throws IOException {\n            T1 result = typeAdapter.read(in);\n            if (result != null && !requestedType.isInstance(result)) {\n              throw new JsonSyntaxException(\"Expected a \" + requestedType.getName()\n                  + \" but was \" + result.getClass().getName());\n            }\n            return result;\n          }\n        };\n      }\n      @Override public String toString() {\n        return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\n      }\n    };",
      "info" : "ReturnStatement[30024-31099]:ReturnStatement[30043-31118]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30182-30948]:Block[30201-30967]"
    }, {
      "left" : "final Class<? super T2> requestedType = typeToken.getRawType();",
      "right" : "final Class<? super T2> requestedType = typeToken.getRawType();",
      "info" : "VariableDeclarationStatement[30192-30255]:VariableDeclarationStatement[30211-30274]"
    }, {
      "left" : "if (!clazz.isAssignableFrom(requestedType))",
      "right" : "if (!clazz.isAssignableFrom(requestedType))",
      "info" : "IfStatement[30264-30342]:IfStatement[30283-30361]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30308-30342]:Block[30327-30361]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[30320-30332]:ReturnStatement[30339-30351]"
    }, {
      "left" : "return (TypeAdapter<T2>) new TypeAdapter<T1>() {\n          @Override public void write(JsonWriter out, T1 value) throws IOException {\n            typeAdapter.write(out, value);\n          }\n\n          @Override public T1 read(JsonReader in) throws IOException {\n            T1 result = typeAdapter.read(in);\n            if (result != null && !requestedType.isInstance(result)) {\n              throw new JsonSyntaxException(\"Expected a \" + requestedType.getName()\n                  + \" but was \" + result.getClass().getName());\n            }\n            return result;\n          }\n        };",
      "right" : "return (TypeAdapter<T2>) new TypeAdapter<T1>() {\n          @Override public void write(JsonWriter out, T1 value) throws IOException {\n            typeAdapter.write(out, value);\n          }\n\n          @Override public T1 read(JsonReader in) throws IOException {\n            T1 result = typeAdapter.read(in);\n            if (result != null && !requestedType.isInstance(result)) {\n              throw new JsonSyntaxException(\"Expected a \" + requestedType.getName()\n                  + \" but was \" + result.getClass().getName());\n            }\n            return result;\n          }\n        };",
      "info" : "ReturnStatement[30351-30940]:ReturnStatement[30370-30959]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30483-30539]:Block[30502-30558]"
    }, {
      "left" : "typeAdapter.write(out, value);",
      "right" : "typeAdapter.write(out, value);",
      "info" : "ExpressionStatement[30497-30527]:ExpressionStatement[30516-30546]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30610-30929]:Block[30629-30948]"
    }, {
      "left" : "T1 result = typeAdapter.read(in);",
      "right" : "T1 result = typeAdapter.read(in);",
      "info" : "VariableDeclarationStatement[30624-30657]:VariableDeclarationStatement[30643-30676]"
    }, {
      "left" : "if (result != null && !requestedType.isInstance(result))",
      "right" : "if (result != null && !requestedType.isInstance(result))",
      "info" : "IfStatement[30670-30890]:IfStatement[30689-30909]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30727-30890]:Block[30746-30909]"
    }, {
      "left" : "throw new JsonSyntaxException(\"Expected a \" + requestedType.getName()\n                  + \" but was \" + result.getClass().getName());",
      "right" : "throw new JsonSyntaxException(\"Expected a \" + requestedType.getName()\n                  + \" but was \" + result.getClass().getName());",
      "info" : "ThrowStatement[30743-30876]:ThrowStatement[30762-30895]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[30903-30917]:ReturnStatement[30922-30936]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30990-31092]:Block[31009-31111]"
    }, {
      "left" : "return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";",
      "right" : "return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";",
      "info" : "ReturnStatement[31000-31084]:ReturnStatement[31019-31103]"
    } ]
  },
  "interFileMappings" : { }
}