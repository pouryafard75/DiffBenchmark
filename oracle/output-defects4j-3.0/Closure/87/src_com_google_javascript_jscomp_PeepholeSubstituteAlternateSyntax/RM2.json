{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "PeepholeSubstituteAlternateSyntax",
      "right" : "PeepholeSubstituteAlternateSyntax",
      "info" : "TypeDeclaration[959-35820]:TypeDeclaration[959-36292]"
    }, {
      "left" : "private static final int AND_PRECEDENCE = NodeUtil.precedence(Token.AND);",
      "right" : "private static final int AND_PRECEDENCE = NodeUtil.precedence(Token.AND);",
      "info" : "FieldDeclaration[1250-1323]:FieldDeclaration[1250-1323]"
    }, {
      "left" : "private static final int OR_PRECEDENCE = NodeUtil.precedence(Token.OR);",
      "right" : "private static final int OR_PRECEDENCE = NodeUtil.precedence(Token.OR);",
      "info" : "FieldDeclaration[1326-1397]:FieldDeclaration[1326-1397]"
    }, {
      "left" : "static final DiagnosticType INVALID_REGULAR_EXPRESSION_FLAGS =\n    DiagnosticType.error(\n        \"JSC_INVALID_REGULAR_EXPRESSION_FLAGS\",\n        \"Invalid flags to RegExp constructor: {0}\");",
      "right" : "static final DiagnosticType INVALID_REGULAR_EXPRESSION_FLAGS =\n    DiagnosticType.error(\n        \"JSC_INVALID_REGULAR_EXPRESSION_FLAGS\",\n        \"Invalid flags to RegExp constructor: {0}\");",
      "info" : "FieldDeclaration[1401-1590]:FieldDeclaration[1401-1590]"
    }, {
      "left" : "static final Predicate<Node> DONT_TRAVERSE_FUNCTIONS_PREDICATE\n      = new Predicate<Node>() {\n    @Override\n    public boolean apply(Node input) {\n      return input.getType() != Token.FUNCTION;\n    }\n  };",
      "right" : "static final Predicate<Node> DONT_TRAVERSE_FUNCTIONS_PREDICATE\n      = new Predicate<Node>() {\n    @Override\n    public boolean apply(Node input) {\n      return input.getType() != Token.FUNCTION;\n    }\n  };",
      "info" : "FieldDeclaration[1594-1800]:FieldDeclaration[1594-1800]"
    }, {
      "left" : "public boolean apply(Node input)",
      "right" : "public boolean apply(Node input)",
      "info" : "MethodDeclaration[1693-1795]:MethodDeclaration[1693-1795]"
    }, {
      "left" : "public Node optimizeSubtree(Node node)",
      "right" : "public Node optimizeSubtree(Node node)",
      "info" : "MethodDeclaration[1804-3203]:MethodDeclaration[1804-3203]"
    }, {
      "left" : "private Node tryReduceReturn(Node n)",
      "right" : "private Node tryReduceReturn(Node n)",
      "info" : "MethodDeclaration[3207-6913]:MethodDeclaration[3207-6913]"
    }, {
      "left" : "private Node tryMinimizeNot(Node n)",
      "right" : "private Node tryMinimizeNot(Node n)",
      "info" : "MethodDeclaration[6917-7902]:MethodDeclaration[6917-7902]"
    }, {
      "left" : "private Node tryMinimizeIf(Node n)",
      "right" : "private Node tryMinimizeIf(Node n)",
      "info" : "MethodDeclaration[7906-15579]:MethodDeclaration[7906-15579]"
    }, {
      "left" : "private void tryRemoveRepeatedStatements(Node n)",
      "right" : "private void tryRemoveRepeatedStatements(Node n)",
      "info" : "MethodDeclaration[15583-16842]:MethodDeclaration[15583-16842]"
    }, {
      "left" : "private boolean isFoldableExpressBlock(Node n)",
      "right" : "private boolean isFoldableExpressBlock(Node n)",
      "info" : "MethodDeclaration[16845-17715]:MethodDeclaration[16845-18187]"
    }, {
      "left" : "private Node getBlockExpression(Node n)",
      "right" : "private Node getBlockExpression(Node n)",
      "info" : "MethodDeclaration[17719-17897]:MethodDeclaration[18191-18369]"
    }, {
      "left" : "private boolean isReturnExpressBlock(Node n)",
      "right" : "private boolean isReturnExpressBlock(Node n)",
      "info" : "MethodDeclaration[17901-18291]:MethodDeclaration[18373-18763]"
    }, {
      "left" : "private Node getBlockReturnExpression(Node n)",
      "right" : "private Node getBlockReturnExpression(Node n)",
      "info" : "MethodDeclaration[18295-18515]:MethodDeclaration[18767-18987]"
    }, {
      "left" : "private boolean isVarBlock(Node n)",
      "right" : "private boolean isVarBlock(Node n)",
      "info" : "MethodDeclaration[18519-18925]:MethodDeclaration[18991-19397]"
    }, {
      "left" : "private Node getBlockVar(Node n)",
      "right" : "private Node getBlockVar(Node n)",
      "info" : "MethodDeclaration[18929-19081]:MethodDeclaration[19401-19553]"
    }, {
      "left" : "private boolean consumesDanglingElse(Node n)",
      "right" : "private boolean consumesDanglingElse(Node n)",
      "info" : "MethodDeclaration[19085-19778]:MethodDeclaration[19557-20250]"
    }, {
      "left" : "private boolean isLowerPrecedenceInExpression(Node n,\n      final int precedence)",
      "right" : "private boolean isLowerPrecedenceInExpression(Node n,\n      final int precedence)",
      "info" : "MethodDeclaration[19782-20283]:MethodDeclaration[20254-20755]"
    }, {
      "left" : "public boolean apply(Node input)",
      "right" : "public boolean apply(Node input)",
      "info" : "MethodDeclaration[20048-20172]:MethodDeclaration[20520-20644]"
    }, {
      "left" : "private boolean isPropertyAssignmentInExpression(Node n)",
      "right" : "private boolean isPropertyAssignmentInExpression(Node n)",
      "info" : "MethodDeclaration[20287-20810]:MethodDeclaration[20759-21282]"
    }, {
      "left" : "public boolean apply(Node input)",
      "right" : "public boolean apply(Node input)",
      "info" : "MethodDeclaration[20516-20684]:MethodDeclaration[20988-21156]"
    }, {
      "left" : "private Node tryMinimizeCondition(Node n)",
      "right" : "private Node tryMinimizeCondition(Node n)",
      "info" : "MethodDeclaration[20814-26415]:MethodDeclaration[21286-26887]"
    }, {
      "left" : "private Node maybeReplaceChildWithNumber(Node n, Node parent, int num)",
      "right" : "private Node maybeReplaceChildWithNumber(Node n, Node parent, int num)",
      "info" : "MethodDeclaration[26419-26882]:MethodDeclaration[26891-27354]"
    }, {
      "left" : "private static final ImmutableSet<String> STANDARD_OBJECT_CONSTRUCTORS =\n    // String, Number, and Boolean functions return non-object types, whereas\n    // new String, new Number, and new Boolean return object types, so don't\n    // include them here.\n    ImmutableSet.of(\n      \"Object\",\n      \"Array\",\n      \"RegExp\",\n      \"Error\"\n      );",
      "right" : "private static final ImmutableSet<String> STANDARD_OBJECT_CONSTRUCTORS =\n    // String, Number, and Boolean functions return non-object types, whereas\n    // new String, new Number, and new Boolean return object types, so don't\n    // include them here.\n    ImmutableSet.of(\n      \"Object\",\n      \"Array\",\n      \"RegExp\",\n      \"Error\"\n      );",
      "info" : "FieldDeclaration[26886-27230]:FieldDeclaration[27358-27702]"
    }, {
      "left" : "private Node tryFoldStandardConstructors(Node n)",
      "right" : "private Node tryFoldStandardConstructors(Node n)",
      "info" : "MethodDeclaration[27234-27876]:MethodDeclaration[27706-28348]"
    }, {
      "left" : "private Node tryFoldLiteralConstructor(Node n)",
      "right" : "private Node tryFoldLiteralConstructor(Node n)",
      "info" : "MethodDeclaration[27880-29796]:MethodDeclaration[28352-30268]"
    }, {
      "left" : "enum : FoldArrayAction",
      "right" : "enum : FoldArrayAction",
      "info" : "EnumDeclaration[29800-29910]:EnumDeclaration[30272-30382]"
    }, {
      "left" : "private FoldArrayAction isSafeToFoldArrayConstructor(Node arg)",
      "right" : "private FoldArrayAction isSafeToFoldArrayConstructor(Node arg)",
      "info" : "MethodDeclaration[29914-31116]:MethodDeclaration[30386-31588]"
    }, {
      "left" : "private Node tryFoldRegularExpressionConstructor(Node n)",
      "right" : "private Node tryFoldRegularExpressionConstructor(Node n)",
      "info" : "MethodDeclaration[31120-33292]:MethodDeclaration[31592-33764]"
    }, {
      "left" : "private static final Pattern REGEXP_FLAGS_RE = Pattern.compile(\"^[gmi]*$\");",
      "right" : "private static final Pattern REGEXP_FLAGS_RE = Pattern.compile(\"^[gmi]*$\");",
      "info" : "FieldDeclaration[33296-33371]:FieldDeclaration[33768-33843]"
    }, {
      "left" : "private static boolean areValidRegexpFlags(String flags)",
      "right" : "private static boolean areValidRegexpFlags(String flags)",
      "info" : "MethodDeclaration[33375-33859]:MethodDeclaration[33847-34331]"
    }, {
      "left" : "private static boolean areSafeFlagsToFold(String flags)",
      "right" : "private static boolean areSafeFlagsToFold(String flags)",
      "info" : "MethodDeclaration[33863-34358]:MethodDeclaration[34335-34830]"
    }, {
      "left" : "private static Node makeForwardSlashBracketSafe(Node n)",
      "right" : "private static Node makeForwardSlashBracketSafe(Node n)",
      "info" : "MethodDeclaration[34362-35208]:MethodDeclaration[34834-35680]"
    }, {
      "left" : "static boolean containsUnicodeEscape(String s)",
      "right" : "static boolean containsUnicodeEscape(String s)",
      "info" : "MethodDeclaration[35212-35818]:MethodDeclaration[35684-36290]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1159-1165]:Modifier[1159-1165]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[1166-1171]:TYPE_DECLARATION_KIND[1166-1171]"
    }, {
      "left" : "PeepholeSubstituteAlternateSyntax",
      "right" : "PeepholeSubstituteAlternateSyntax",
      "info" : "SimpleName[1172-1205]:SimpleName[1172-1205]"
    }, {
      "left" : "AbstractPeepholeOptimization",
      "right" : "AbstractPeepholeOptimization",
      "info" : "SimpleType[1216-1244]:SimpleType[1216-1244]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[1693-1702]:MarkerAnnotation[1693-1702]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1707-1713]:Modifier[1707-1713]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[1714-1721]:PrimitiveType[1714-1721]"
    }, {
      "left" : "apply",
      "right" : "apply",
      "info" : "SimpleName[1722-1727]:SimpleName[1722-1727]"
    }, {
      "left" : "Node input",
      "right" : "Node input",
      "info" : "SingleVariableDeclaration[1728-1738]:SingleVariableDeclaration[1728-1738]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1740-1795]:Block[1740-1795]"
    }, {
      "left" : "return input.getType() != Token.FUNCTION;",
      "right" : "return input.getType() != Token.FUNCTION;",
      "info" : "ReturnStatement[1748-1789]:ReturnStatement[1748-1789]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[1891-1900]:MarkerAnnotation[1891-1900]"
    }, {
      "left" : "@SuppressWarnings(\"fallthrough\")",
      "right" : "@SuppressWarnings(\"fallthrough\")",
      "info" : "SingleMemberAnnotation[1903-1935]:SingleMemberAnnotation[1903-1935]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1938-1944]:Modifier[1938-1944]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[1945-1949]:SimpleType[1945-1949]"
    }, {
      "left" : "optimizeSubtree",
      "right" : "optimizeSubtree",
      "info" : "SimpleName[1950-1965]:SimpleName[1950-1965]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[1966-1975]:SingleVariableDeclaration[1966-1975]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1977-3203]:Block[1977-3203]"
    }, {
      "left" : "switch(node.getType()) {\n      case Token.RETURN:\n        return tryReduceReturn(node);\n\n      case Token.NOT:\n        tryMinimizeCondition(node.getFirstChild());\n        return tryMinimizeNot(node);\n\n      case Token.IF:\n        tryMinimizeCondition(node.getFirstChild());\n        return tryMinimizeIf(node);\n\n      case Token.EXPR_RESULT:\n        tryMinimizeCondition(node.getFirstChild());\n        return node;\n\n      case Token.HOOK:\n        tryMinimizeCondition(node.getFirstChild());\n        return node;\n\n      case Token.WHILE:\n      case Token.DO:\n        tryMinimizeCondition(NodeUtil.getConditionExpression(node));\n        return node;\n\n      case Token.FOR:\n        if (!NodeUtil.isForIn(node)) {\n          tryMinimizeCondition(NodeUtil.getConditionExpression(node));\n        }\n        return node;\n\n      case Token.NEW:\n        node = tryFoldStandardConstructors(node);\n        if (node.getType() != Token.CALL) {\n          return node;\n        }\n        // Fall through on purpose because tryFoldStandardConstructors() may\n        // convert a NEW node into a CALL node\n      case Token.CALL:\n        return tryFoldLiteralConstructor(node);\n\n      default:\n        return node; //Nothing changed\n    }",
      "right" : "switch(node.getType()) {\n      case Token.RETURN:\n        return tryReduceReturn(node);\n\n      case Token.NOT:\n        tryMinimizeCondition(node.getFirstChild());\n        return tryMinimizeNot(node);\n\n      case Token.IF:\n        tryMinimizeCondition(node.getFirstChild());\n        return tryMinimizeIf(node);\n\n      case Token.EXPR_RESULT:\n        tryMinimizeCondition(node.getFirstChild());\n        return node;\n\n      case Token.HOOK:\n        tryMinimizeCondition(node.getFirstChild());\n        return node;\n\n      case Token.WHILE:\n      case Token.DO:\n        tryMinimizeCondition(NodeUtil.getConditionExpression(node));\n        return node;\n\n      case Token.FOR:\n        if (!NodeUtil.isForIn(node)) {\n          tryMinimizeCondition(NodeUtil.getConditionExpression(node));\n        }\n        return node;\n\n      case Token.NEW:\n        node = tryFoldStandardConstructors(node);\n        if (node.getType() != Token.CALL) {\n          return node;\n        }\n        // Fall through on purpose because tryFoldStandardConstructors() may\n        // convert a NEW node into a CALL node\n      case Token.CALL:\n        return tryFoldLiteralConstructor(node);\n\n      default:\n        return node; //Nothing changed\n    }",
      "info" : "SwitchStatement[1983-3199]:SwitchStatement[1983-3199]"
    }, {
      "left" : "case Token.RETURN:",
      "right" : "case Token.RETURN:",
      "info" : "SwitchCase[2014-2032]:SwitchCase[2014-2032]"
    }, {
      "left" : "return tryReduceReturn(node);",
      "right" : "return tryReduceReturn(node);",
      "info" : "ReturnStatement[2041-2070]:ReturnStatement[2041-2070]"
    }, {
      "left" : "case Token.NOT:",
      "right" : "case Token.NOT:",
      "info" : "SwitchCase[2078-2093]:SwitchCase[2078-2093]"
    }, {
      "left" : "tryMinimizeCondition(node.getFirstChild());",
      "right" : "tryMinimizeCondition(node.getFirstChild());",
      "info" : "ExpressionStatement[2102-2145]:ExpressionStatement[2102-2145]"
    }, {
      "left" : "return tryMinimizeNot(node);",
      "right" : "return tryMinimizeNot(node);",
      "info" : "ReturnStatement[2154-2182]:ReturnStatement[2154-2182]"
    }, {
      "left" : "case Token.IF:",
      "right" : "case Token.IF:",
      "info" : "SwitchCase[2190-2204]:SwitchCase[2190-2204]"
    }, {
      "left" : "tryMinimizeCondition(node.getFirstChild());",
      "right" : "tryMinimizeCondition(node.getFirstChild());",
      "info" : "ExpressionStatement[2213-2256]:ExpressionStatement[2213-2256]"
    }, {
      "left" : "return tryMinimizeIf(node);",
      "right" : "return tryMinimizeIf(node);",
      "info" : "ReturnStatement[2265-2292]:ReturnStatement[2265-2292]"
    }, {
      "left" : "case Token.EXPR_RESULT:",
      "right" : "case Token.EXPR_RESULT:",
      "info" : "SwitchCase[2300-2323]:SwitchCase[2300-2323]"
    }, {
      "left" : "tryMinimizeCondition(node.getFirstChild());",
      "right" : "tryMinimizeCondition(node.getFirstChild());",
      "info" : "ExpressionStatement[2332-2375]:ExpressionStatement[2332-2375]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[2384-2396]:ReturnStatement[2384-2396]"
    }, {
      "left" : "case Token.HOOK:",
      "right" : "case Token.HOOK:",
      "info" : "SwitchCase[2404-2420]:SwitchCase[2404-2420]"
    }, {
      "left" : "tryMinimizeCondition(node.getFirstChild());",
      "right" : "tryMinimizeCondition(node.getFirstChild());",
      "info" : "ExpressionStatement[2429-2472]:ExpressionStatement[2429-2472]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[2481-2493]:ReturnStatement[2481-2493]"
    }, {
      "left" : "case Token.WHILE:",
      "right" : "case Token.WHILE:",
      "info" : "SwitchCase[2501-2518]:SwitchCase[2501-2518]"
    }, {
      "left" : "case Token.DO:",
      "right" : "case Token.DO:",
      "info" : "SwitchCase[2525-2539]:SwitchCase[2525-2539]"
    }, {
      "left" : "tryMinimizeCondition(NodeUtil.getConditionExpression(node));",
      "right" : "tryMinimizeCondition(NodeUtil.getConditionExpression(node));",
      "info" : "ExpressionStatement[2548-2608]:ExpressionStatement[2548-2608]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[2617-2629]:ReturnStatement[2617-2629]"
    }, {
      "left" : "case Token.FOR:",
      "right" : "case Token.FOR:",
      "info" : "SwitchCase[2637-2652]:SwitchCase[2637-2652]"
    }, {
      "left" : "if (!NodeUtil.isForIn(node))",
      "right" : "if (!NodeUtil.isForIn(node))",
      "info" : "IfStatement[2661-2772]:IfStatement[2661-2772]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2690-2772]:Block[2690-2772]"
    }, {
      "left" : "tryMinimizeCondition(NodeUtil.getConditionExpression(node));",
      "right" : "tryMinimizeCondition(NodeUtil.getConditionExpression(node));",
      "info" : "ExpressionStatement[2702-2762]:ExpressionStatement[2702-2762]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[2781-2793]:ReturnStatement[2781-2793]"
    }, {
      "left" : "case Token.NEW:",
      "right" : "case Token.NEW:",
      "info" : "SwitchCase[2801-2816]:SwitchCase[2801-2816]"
    }, {
      "left" : "node = tryFoldStandardConstructors(node);",
      "right" : "node = tryFoldStandardConstructors(node);",
      "info" : "ExpressionStatement[2825-2866]:ExpressionStatement[2825-2866]"
    }, {
      "left" : "if (node.getType() != Token.CALL)",
      "right" : "if (node.getType() != Token.CALL)",
      "info" : "IfStatement[2875-2943]:IfStatement[2875-2943]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2909-2943]:Block[2909-2943]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[2921-2933]:ReturnStatement[2921-2933]"
    }, {
      "left" : "case Token.CALL:",
      "right" : "case Token.CALL:",
      "info" : "SwitchCase[3074-3090]:SwitchCase[3074-3090]"
    }, {
      "left" : "return tryFoldLiteralConstructor(node);",
      "right" : "return tryFoldLiteralConstructor(node);",
      "info" : "ReturnStatement[3099-3138]:ReturnStatement[3099-3138]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[3146-3154]:SwitchCase[3146-3154]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[3163-3175]:ReturnStatement[3163-3175]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[3369-3376]:Modifier[3369-3376]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[3377-3381]:SimpleType[3377-3381]"
    }, {
      "left" : "tryReduceReturn",
      "right" : "tryReduceReturn",
      "info" : "SimpleName[3382-3397]:SimpleName[3382-3397]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[3398-3404]:SingleVariableDeclaration[3398-3404]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3406-6913]:Block[3406-6913]"
    }, {
      "left" : "Node result = n.getFirstChild();",
      "right" : "Node result = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[3412-3444]:VariableDeclarationStatement[3412-3444]"
    }, {
      "left" : "boolean possibleException = result != null &&\n        ControlFlowAnalysis.mayThrowException(result);",
      "right" : "boolean possibleException = result != null &&\n        ControlFlowAnalysis.mayThrowException(result);",
      "info" : "VariableDeclarationStatement[3450-3550]:VariableDeclarationStatement[3450-3550]"
    }, {
      "left" : "Node breakTarget = n;",
      "right" : "Node breakTarget = n;",
      "info" : "VariableDeclarationStatement[3685-3706]:VariableDeclarationStatement[3685-3706]"
    }, {
      "left" : "boolean safe = true;",
      "right" : "boolean safe = true;",
      "info" : "VariableDeclarationStatement[3711-3731]:VariableDeclarationStatement[3711-3731]"
    }, {
      "left" : "for (;!ControlFlowAnalysis.isBreakTarget(breakTarget, null /* no label */);\n        breakTarget = breakTarget.getParent())",
      "right" : "for (;!ControlFlowAnalysis.isBreakTarget(breakTarget, null /* no label */);\n        breakTarget = breakTarget.getParent())",
      "info" : "ForStatement[3737-4346]:ForStatement[3737-4346]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3860-4346]:Block[3860-4346]"
    }, {
      "left" : "if (NodeUtil.isFunction(breakTarget) ||\n          breakTarget.getType() == Token.SCRIPT)",
      "right" : "if (NodeUtil.isFunction(breakTarget) ||\n          breakTarget.getType() == Token.SCRIPT)",
      "info" : "IfStatement[3868-4340]:IfStatement[3868-4340]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3957-4340]:Block[3957-4340]"
    }, {
      "left" : "safe = false;",
      "right" : "safe = false;",
      "info" : "ExpressionStatement[4304-4317]:ExpressionStatement[4304-4317]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[4326-4332]:BreakStatement[4326-4332]"
    }, {
      "left" : "Node follow = ControlFlowAnalysis.computeFollowNode(breakTarget);",
      "right" : "Node follow = ControlFlowAnalysis.computeFollowNode(breakTarget);",
      "info" : "VariableDeclarationStatement[4352-4417]:VariableDeclarationStatement[4352-4417]"
    }, {
      "left" : "while (follow != null &&\n        NodeUtil.isTryFinallyNode(follow.getParent(), follow))",
      "right" : "while (follow != null &&\n        NodeUtil.isTryFinallyNode(follow.getParent(), follow))",
      "info" : "WhileStatement[4797-5200]:WhileStatement[4797-5200]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4885-5200]:Block[4885-5200]"
    }, {
      "left" : "if (result != null &&\n          // TODO(user): Use the new side effects API for more accuracy.\n          (NodeUtil.canBeSideEffected(result) ||\n           NodeUtil.mayHaveSideEffects(result)))",
      "right" : "if (result != null &&\n          // TODO(user): Use the new side effects API for more accuracy.\n          (NodeUtil.canBeSideEffected(result) ||\n           NodeUtil.mayHaveSideEffects(result)))",
      "info" : "IfStatement[4893-5132]:IfStatement[4893-5132]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5086-5132]:Block[5086-5132]"
    }, {
      "left" : "safe = false;",
      "right" : "safe = false;",
      "info" : "ExpressionStatement[5096-5109]:ExpressionStatement[5096-5109]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[5118-5124]:BreakStatement[5118-5124]"
    }, {
      "left" : "follow = ControlFlowAnalysis.computeFollowNode(follow);",
      "right" : "follow = ControlFlowAnalysis.computeFollowNode(follow);",
      "info" : "ExpressionStatement[5139-5194]:ExpressionStatement[5139-5194]"
    }, {
      "left" : "if (safe)",
      "right" : "if (safe)",
      "info" : "IfStatement[5206-6267]:IfStatement[5206-6267]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5216-6267]:Block[5216-6267]"
    }, {
      "left" : "if (follow == null)",
      "right" : "if (follow == null)",
      "info" : "IfStatement[5224-6155]:IfStatement[5224-6155]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5244-5524]:Block[5244-5524]"
    }, {
      "left" : "if (result == null)",
      "right" : "if (result == null)",
      "info" : "IfStatement[5400-5515]:IfStatement[5400-5515]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5420-5515]:Block[5420-5515]"
    }, {
      "left" : "n.setType(Token.BREAK);",
      "right" : "n.setType(Token.BREAK);",
      "info" : "ExpressionStatement[5432-5455]:ExpressionStatement[5432-5455]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[5466-5485]:ExpressionStatement[5466-5485]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[5496-5505]:ReturnStatement[5496-5505]"
    }, {
      "left" : "if (follow.getType() == Token.RETURN &&\n          (result == follow.getFirstChild() ||\n           (result != null && follow.hasChildren() &&\n            result.checkTreeEqualsSilent(follow.getFirstChild())) &&\n            ControlFlowAnalysis.getExceptionHandler(n) ==\n            ControlFlowAnalysis.getExceptionHandler(follow)\n           ))",
      "right" : "if (follow.getType() == Token.RETURN &&\n          (result == follow.getFirstChild() ||\n           (result != null && follow.hasChildren() &&\n            result.checkTreeEqualsSilent(follow.getFirstChild())) &&\n            ControlFlowAnalysis.getExceptionHandler(n) ==\n            ControlFlowAnalysis.getExceptionHandler(follow)\n           ))",
      "info" : "IfStatement[5530-6155]:IfStatement[5530-6155]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5872-6155]:Block[5872-6155]"
    }, {
      "left" : "n.removeChildren();",
      "right" : "n.removeChildren();",
      "info" : "ExpressionStatement[6050-6069]:ExpressionStatement[6050-6069]"
    }, {
      "left" : "n.setType(Token.BREAK);",
      "right" : "n.setType(Token.BREAK);",
      "info" : "ExpressionStatement[6078-6101]:ExpressionStatement[6078-6101]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[6110-6129]:ExpressionStatement[6110-6129]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[6138-6147]:ReturnStatement[6138-6147]"
    }, {
      "left" : "if (result != null)",
      "right" : "if (result != null)",
      "info" : "IfStatement[6345-6894]:IfStatement[6345-6894]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6365-6894]:Block[6365-6894]"
    }, {
      "left" : "switch (result.getType()) {\n        case Token.VOID:\n          Node operand = result.getFirstChild();\n          if (!mayHaveSideEffects(operand)) {\n            n.removeFirstChild();\n            reportCodeChange();\n          }\n          break;\n        case Token.NAME:\n          String name = result.getString();\n          if (name.equals(\"undefined\")) {\n            n.removeFirstChild();\n            reportCodeChange();\n          }\n          break;\n        default:\n          //Do nothing\n            break;\n      }",
      "right" : "switch (result.getType()) {\n        case Token.VOID:\n          Node operand = result.getFirstChild();\n          if (!mayHaveSideEffects(operand)) {\n            n.removeFirstChild();\n            reportCodeChange();\n          }\n          break;\n        case Token.NAME:\n          String name = result.getString();\n          if (name.equals(\"undefined\")) {\n            n.removeFirstChild();\n            reportCodeChange();\n          }\n          break;\n        default:\n          //Do nothing\n            break;\n      }",
      "info" : "SwitchStatement[6373-6888]:SwitchStatement[6373-6888]"
    }, {
      "left" : "case Token.VOID:",
      "right" : "case Token.VOID:",
      "info" : "SwitchCase[6409-6425]:SwitchCase[6409-6425]"
    }, {
      "left" : "Node operand = result.getFirstChild();",
      "right" : "Node operand = result.getFirstChild();",
      "info" : "VariableDeclarationStatement[6436-6474]:VariableDeclarationStatement[6436-6474]"
    }, {
      "left" : "if (!mayHaveSideEffects(operand))",
      "right" : "if (!mayHaveSideEffects(operand))",
      "info" : "IfStatement[6485-6598]:IfStatement[6485-6598]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6519-6598]:Block[6519-6598]"
    }, {
      "left" : "n.removeFirstChild();",
      "right" : "n.removeFirstChild();",
      "info" : "ExpressionStatement[6533-6554]:ExpressionStatement[6533-6554]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[6567-6586]:ExpressionStatement[6567-6586]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[6609-6615]:BreakStatement[6609-6615]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[6624-6640]:SwitchCase[6624-6640]"
    }, {
      "left" : "String name = result.getString();",
      "right" : "String name = result.getString();",
      "info" : "VariableDeclarationStatement[6651-6684]:VariableDeclarationStatement[6651-6684]"
    }, {
      "left" : "if (name.equals(\"undefined\"))",
      "right" : "if (name.equals(\"undefined\"))",
      "info" : "IfStatement[6695-6804]:IfStatement[6695-6804]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6725-6804]:Block[6725-6804]"
    }, {
      "left" : "n.removeFirstChild();",
      "right" : "n.removeFirstChild();",
      "info" : "ExpressionStatement[6739-6760]:ExpressionStatement[6739-6760]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[6773-6792]:ExpressionStatement[6773-6792]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[6815-6821]:BreakStatement[6815-6821]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[6830-6838]:SwitchCase[6830-6838]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[6874-6880]:BreakStatement[6874-6880]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[6900-6909]:ReturnStatement[6900-6909]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[7055-7062]:Modifier[7055-7062]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[7063-7067]:SimpleType[7063-7067]"
    }, {
      "left" : "tryMinimizeNot",
      "right" : "tryMinimizeNot",
      "info" : "SimpleName[7068-7082]:SimpleName[7068-7082]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[7083-7089]:SingleVariableDeclaration[7083-7089]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7091-7902]:Block[7091-7902]"
    }, {
      "left" : "Node parent = n.getParent();",
      "right" : "Node parent = n.getParent();",
      "info" : "VariableDeclarationStatement[7097-7125]:VariableDeclarationStatement[7097-7125]"
    }, {
      "left" : "Node notChild = n.getFirstChild();",
      "right" : "Node notChild = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[7131-7165]:VariableDeclarationStatement[7131-7165]"
    }, {
      "left" : "int complementOperator;",
      "right" : "int complementOperator;",
      "info" : "VariableDeclarationStatement[7239-7262]:VariableDeclarationStatement[7239-7262]"
    }, {
      "left" : "switch (notChild.getType()) {\n      case Token.EQ:\n        complementOperator = Token.NE;\n        break;\n      case Token.NE:\n        complementOperator = Token.EQ;\n        break;\n      case Token.SHEQ:\n        complementOperator = Token.SHNE;\n        break;\n      case Token.SHNE:\n        complementOperator = Token.SHEQ;\n        break;\n      // GT, GE, LT, LE are not handled in this because !(x<NaN) != x>=NaN.\n      default:\n        return n;\n    }",
      "right" : "switch (notChild.getType()) {\n      case Token.EQ:\n        complementOperator = Token.NE;\n        break;\n      case Token.NE:\n        complementOperator = Token.EQ;\n        break;\n      case Token.SHEQ:\n        complementOperator = Token.SHNE;\n        break;\n      case Token.SHNE:\n        complementOperator = Token.SHEQ;\n        break;\n      // GT, GE, LT, LE are not handled in this because !(x<NaN) != x>=NaN.\n      default:\n        return n;\n    }",
      "info" : "SwitchStatement[7267-7719]:SwitchStatement[7267-7719]"
    }, {
      "left" : "case Token.EQ:",
      "right" : "case Token.EQ:",
      "info" : "SwitchCase[7303-7317]:SwitchCase[7303-7317]"
    }, {
      "left" : "complementOperator = Token.NE;",
      "right" : "complementOperator = Token.NE;",
      "info" : "ExpressionStatement[7326-7356]:ExpressionStatement[7326-7356]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[7365-7371]:BreakStatement[7365-7371]"
    }, {
      "left" : "case Token.NE:",
      "right" : "case Token.NE:",
      "info" : "SwitchCase[7378-7392]:SwitchCase[7378-7392]"
    }, {
      "left" : "complementOperator = Token.EQ;",
      "right" : "complementOperator = Token.EQ;",
      "info" : "ExpressionStatement[7401-7431]:ExpressionStatement[7401-7431]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[7440-7446]:BreakStatement[7440-7446]"
    }, {
      "left" : "case Token.SHEQ:",
      "right" : "case Token.SHEQ:",
      "info" : "SwitchCase[7453-7469]:SwitchCase[7453-7469]"
    }, {
      "left" : "complementOperator = Token.SHNE;",
      "right" : "complementOperator = Token.SHNE;",
      "info" : "ExpressionStatement[7478-7510]:ExpressionStatement[7478-7510]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[7519-7525]:BreakStatement[7519-7525]"
    }, {
      "left" : "case Token.SHNE:",
      "right" : "case Token.SHNE:",
      "info" : "SwitchCase[7532-7548]:SwitchCase[7532-7548]"
    }, {
      "left" : "complementOperator = Token.SHEQ;",
      "right" : "complementOperator = Token.SHEQ;",
      "info" : "ExpressionStatement[7557-7589]:ExpressionStatement[7557-7589]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[7598-7604]:BreakStatement[7598-7604]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[7687-7695]:SwitchCase[7687-7695]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[7704-7713]:ReturnStatement[7704-7713]"
    }, {
      "left" : "Node newOperator = n.removeFirstChild();",
      "right" : "Node newOperator = n.removeFirstChild();",
      "info" : "VariableDeclarationStatement[7724-7764]:VariableDeclarationStatement[7724-7764]"
    }, {
      "left" : "newOperator.setType(complementOperator);",
      "right" : "newOperator.setType(complementOperator);",
      "info" : "ExpressionStatement[7769-7809]:ExpressionStatement[7769-7809]"
    }, {
      "left" : "parent.replaceChild(n, newOperator);",
      "right" : "parent.replaceChild(n, newOperator);",
      "info" : "ExpressionStatement[7814-7850]:ExpressionStatement[7814-7850]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[7855-7874]:ExpressionStatement[7855-7874]"
    }, {
      "left" : "return newOperator;",
      "right" : "return newOperator;",
      "info" : "ReturnStatement[7879-7898]:ReturnStatement[7879-7898]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[8057-8064]:Modifier[8057-8064]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[8065-8069]:SimpleType[8065-8069]"
    }, {
      "left" : "tryMinimizeIf",
      "right" : "tryMinimizeIf",
      "info" : "SimpleName[8070-8083]:SimpleName[8070-8083]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[8084-8090]:SingleVariableDeclaration[8084-8090]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8092-15579]:Block[8092-15579]"
    }, {
      "left" : "Node parent = n.getParent();",
      "right" : "Node parent = n.getParent();",
      "info" : "VariableDeclarationStatement[8099-8127]:VariableDeclarationStatement[8099-8127]"
    }, {
      "left" : "Node cond = n.getFirstChild();",
      "right" : "Node cond = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[8133-8163]:VariableDeclarationStatement[8133-8163]"
    }, {
      "left" : "if (NodeUtil.isLiteralValue(cond, true))",
      "right" : "if (NodeUtil.isLiteralValue(cond, true))",
      "info" : "IfStatement[8280-8344]:IfStatement[8280-8344]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8321-8344]:Block[8321-8344]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[8329-8338]:ReturnStatement[8329-8338]"
    }, {
      "left" : "Node thenBranch = cond.getNext();",
      "right" : "Node thenBranch = cond.getNext();",
      "info" : "VariableDeclarationStatement[8350-8383]:VariableDeclarationStatement[8350-8383]"
    }, {
      "left" : "Node elseBranch = thenBranch.getNext();",
      "right" : "Node elseBranch = thenBranch.getNext();",
      "info" : "VariableDeclarationStatement[8388-8427]:VariableDeclarationStatement[8388-8427]"
    }, {
      "left" : "if (elseBranch == null)",
      "right" : "if (elseBranch == null)",
      "info" : "IfStatement[8433-10021]:IfStatement[8433-10021]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8457-10021]:Block[8457-10021]"
    }, {
      "left" : "if (isFoldableExpressBlock(thenBranch))",
      "right" : "if (isFoldableExpressBlock(thenBranch))",
      "info" : "IfStatement[8465-9998]:IfStatement[8465-9998]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8505-9998]:Block[8505-9998]"
    }, {
      "left" : "Node expr = getBlockExpression(thenBranch);",
      "right" : "Node expr = getBlockExpression(thenBranch);",
      "info" : "VariableDeclarationStatement[8515-8558]:VariableDeclarationStatement[8515-8558]"
    }, {
      "left" : "if (isPropertyAssignmentInExpression(expr))",
      "right" : "if (isPropertyAssignmentInExpression(expr))",
      "info" : "IfStatement[8567-8777]:IfStatement[8567-8777]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8611-8777]:Block[8611-8777]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[8758-8767]:ReturnStatement[8758-8767]"
    }, {
      "left" : "if (cond.getType() == Token.NOT)",
      "right" : "if (cond.getType() == Token.NOT)",
      "info" : "IfStatement[8787-9406]:IfStatement[8787-9406]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8820-9406]:Block[8820-9406]"
    }, {
      "left" : "if (isLowerPrecedenceInExpression(cond, OR_PRECEDENCE) &&\n              isLowerPrecedenceInExpression(expr.getFirstChild(),\n                  OR_PRECEDENCE))",
      "right" : "if (isLowerPrecedenceInExpression(cond, OR_PRECEDENCE) &&\n              isLowerPrecedenceInExpression(expr.getFirstChild(),\n                  OR_PRECEDENCE))",
      "info" : "IfStatement[8871-9125]:IfStatement[8871-9125]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9029-9125]:Block[9029-9125]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[9104-9113]:ReturnStatement[9104-9113]"
    }, {
      "left" : "Node or = new Node(Token.OR, cond.removeFirstChild(),\n          expr.removeFirstChild()).copyInformationFrom(n);",
      "right" : "Node or = new Node(Token.OR, cond.removeFirstChild(),\n          expr.removeFirstChild()).copyInformationFrom(n);",
      "info" : "VariableDeclarationStatement[9137-9249]:VariableDeclarationStatement[9137-9249]"
    }, {
      "left" : "Node newExpr = NodeUtil.newExpr(or);",
      "right" : "Node newExpr = NodeUtil.newExpr(or);",
      "info" : "VariableDeclarationStatement[9260-9296]:VariableDeclarationStatement[9260-9296]"
    }, {
      "left" : "parent.replaceChild(n, newExpr);",
      "right" : "parent.replaceChild(n, newExpr);",
      "info" : "ExpressionStatement[9307-9339]:ExpressionStatement[9307-9339]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[9350-9369]:ExpressionStatement[9350-9369]"
    }, {
      "left" : "return newExpr;",
      "right" : "return newExpr;",
      "info" : "ReturnStatement[9381-9396]:ReturnStatement[9381-9396]"
    }, {
      "left" : "if (isLowerPrecedenceInExpression(cond, AND_PRECEDENCE) ||\n            isLowerPrecedenceInExpression(expr.getFirstChild(),\n                AND_PRECEDENCE))",
      "right" : "if (isLowerPrecedenceInExpression(cond, AND_PRECEDENCE) ||\n            isLowerPrecedenceInExpression(expr.getFirstChild(),\n                AND_PRECEDENCE))",
      "info" : "IfStatement[9452-9702]:IfStatement[9452-9702]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9608-9702]:Block[9608-9702]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[9683-9692]:ReturnStatement[9683-9692]"
    }, {
      "left" : "n.removeChild(cond);",
      "right" : "n.removeChild(cond);",
      "info" : "ExpressionStatement[9712-9732]:ExpressionStatement[9712-9732]"
    }, {
      "left" : "Node and = new Node(Token.AND, cond, expr.removeFirstChild())\n                       .copyInformationFrom(n);",
      "right" : "Node and = new Node(Token.AND, cond, expr.removeFirstChild())\n                       .copyInformationFrom(n);",
      "info" : "VariableDeclarationStatement[9741-9850]:VariableDeclarationStatement[9741-9850]"
    }, {
      "left" : "Node newExpr = NodeUtil.newExpr(and);",
      "right" : "Node newExpr = NodeUtil.newExpr(and);",
      "info" : "VariableDeclarationStatement[9859-9896]:VariableDeclarationStatement[9859-9896]"
    }, {
      "left" : "parent.replaceChild(n, newExpr);",
      "right" : "parent.replaceChild(n, newExpr);",
      "info" : "ExpressionStatement[9905-9937]:ExpressionStatement[9905-9937]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[9946-9965]:ExpressionStatement[9946-9965]"
    }, {
      "left" : "return newExpr;",
      "right" : "return newExpr;",
      "info" : "ReturnStatement[9975-9990]:ReturnStatement[9975-9990]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[10006-10015]:ReturnStatement[10006-10015]"
    }, {
      "left" : "tryRemoveRepeatedStatements(n);",
      "right" : "tryRemoveRepeatedStatements(n);",
      "info" : "ExpressionStatement[10190-10221]:ExpressionStatement[10190-10221]"
    }, {
      "left" : "if (cond.getType() == Token.NOT && !consumesDanglingElse(elseBranch))",
      "right" : "if (cond.getType() == Token.NOT && !consumesDanglingElse(elseBranch))",
      "info" : "IfStatement[10341-10582]:IfStatement[10341-10582]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10411-10582]:Block[10411-10582]"
    }, {
      "left" : "n.replaceChild(cond, cond.removeFirstChild());",
      "right" : "n.replaceChild(cond, cond.removeFirstChild());",
      "info" : "ExpressionStatement[10419-10465]:ExpressionStatement[10419-10465]"
    }, {
      "left" : "n.removeChild(thenBranch);",
      "right" : "n.removeChild(thenBranch);",
      "info" : "ExpressionStatement[10472-10498]:ExpressionStatement[10472-10498]"
    }, {
      "left" : "n.addChildToBack(thenBranch);",
      "right" : "n.addChildToBack(thenBranch);",
      "info" : "ExpressionStatement[10505-10534]:ExpressionStatement[10505-10534]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[10541-10560]:ExpressionStatement[10541-10560]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[10567-10576]:ReturnStatement[10567-10576]"
    }, {
      "left" : "if (isReturnExpressBlock(thenBranch) && isReturnExpressBlock(elseBranch))",
      "right" : "if (isReturnExpressBlock(thenBranch) && isReturnExpressBlock(elseBranch))",
      "info" : "IfStatement[10641-11389]:IfStatement[10641-11389]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10715-11389]:Block[10715-11389]"
    }, {
      "left" : "Node thenExpr = getBlockReturnExpression(thenBranch);",
      "right" : "Node thenExpr = getBlockReturnExpression(thenBranch);",
      "info" : "VariableDeclarationStatement[10723-10776]:VariableDeclarationStatement[10723-10776]"
    }, {
      "left" : "Node elseExpr = getBlockReturnExpression(elseBranch);",
      "right" : "Node elseExpr = getBlockReturnExpression(elseBranch);",
      "info" : "VariableDeclarationStatement[10783-10836]:VariableDeclarationStatement[10783-10836]"
    }, {
      "left" : "n.removeChild(cond);",
      "right" : "n.removeChild(cond);",
      "info" : "ExpressionStatement[10843-10863]:ExpressionStatement[10843-10863]"
    }, {
      "left" : "thenExpr.detachFromParent();",
      "right" : "thenExpr.detachFromParent();",
      "info" : "ExpressionStatement[10870-10898]:ExpressionStatement[10870-10898]"
    }, {
      "left" : "elseExpr.detachFromParent();",
      "right" : "elseExpr.detachFromParent();",
      "info" : "ExpressionStatement[10905-10933]:ExpressionStatement[10905-10933]"
    }, {
      "left" : "Node hookNode = new Node(Token.HOOK, cond, thenExpr, elseExpr)\n                          .copyInformationFrom(n);",
      "right" : "Node hookNode = new Node(Token.HOOK, cond, thenExpr, elseExpr)\n                          .copyInformationFrom(n);",
      "info" : "VariableDeclarationStatement[11119-11232]:VariableDeclarationStatement[11119-11232]"
    }, {
      "left" : "Node returnNode = new Node(Token.RETURN, hookNode);",
      "right" : "Node returnNode = new Node(Token.RETURN, hookNode);",
      "info" : "VariableDeclarationStatement[11239-11290]:VariableDeclarationStatement[11239-11290]"
    }, {
      "left" : "parent.replaceChild(n, returnNode);",
      "right" : "parent.replaceChild(n, returnNode);",
      "info" : "ExpressionStatement[11297-11332]:ExpressionStatement[11297-11332]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[11339-11358]:ExpressionStatement[11339-11358]"
    }, {
      "left" : "return returnNode;",
      "right" : "return returnNode;",
      "info" : "ReturnStatement[11365-11383]:ReturnStatement[11365-11383]"
    }, {
      "left" : "boolean thenBranchIsExpressionBlock = isFoldableExpressBlock(thenBranch);",
      "right" : "boolean thenBranchIsExpressionBlock = isFoldableExpressBlock(thenBranch);",
      "info" : "VariableDeclarationStatement[11395-11468]:VariableDeclarationStatement[11395-11468]"
    }, {
      "left" : "boolean elseBranchIsExpressionBlock = isFoldableExpressBlock(elseBranch);",
      "right" : "boolean elseBranchIsExpressionBlock = isFoldableExpressBlock(elseBranch);",
      "info" : "VariableDeclarationStatement[11473-11546]:VariableDeclarationStatement[11473-11546]"
    }, {
      "left" : "if (thenBranchIsExpressionBlock && elseBranchIsExpressionBlock)",
      "right" : "if (thenBranchIsExpressionBlock && elseBranchIsExpressionBlock)",
      "info" : "IfStatement[11552-13483]:IfStatement[11552-13483]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11616-13483]:Block[11616-13483]"
    }, {
      "left" : "Node thenOp = getBlockExpression(thenBranch).getFirstChild();",
      "right" : "Node thenOp = getBlockExpression(thenBranch).getFirstChild();",
      "info" : "VariableDeclarationStatement[11624-11685]:VariableDeclarationStatement[11624-11685]"
    }, {
      "left" : "Node elseOp = getBlockExpression(elseBranch).getFirstChild();",
      "right" : "Node elseOp = getBlockExpression(elseBranch).getFirstChild();",
      "info" : "VariableDeclarationStatement[11692-11753]:VariableDeclarationStatement[11692-11753]"
    }, {
      "left" : "if (thenOp.getType() == elseOp.getType())",
      "right" : "if (thenOp.getType() == elseOp.getType())",
      "info" : "IfStatement[11760-13461]:IfStatement[11760-13461]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11802-13461]:Block[11802-13461]"
    }, {
      "left" : "if (NodeUtil.isAssignmentOp(thenOp))",
      "right" : "if (NodeUtil.isAssignmentOp(thenOp))",
      "info" : "IfStatement[11854-13453]:IfStatement[11854-13453]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11891-12981]:Block[11891-12981]"
    }, {
      "left" : "Node lhs = thenOp.getFirstChild();",
      "right" : "Node lhs = thenOp.getFirstChild();",
      "info" : "VariableDeclarationStatement[11903-11937]:VariableDeclarationStatement[11903-11937]"
    }, {
      "left" : "if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&\n              // if LHS has side effects, don't proceed [since the optimization\n              // evaluates LHS before cond]\n              // NOTE - there are some circumstances where we can\n              // proceed even if there are side effects...\n              !mayEffectMutableState(lhs))",
      "right" : "if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&\n              // if LHS has side effects, don't proceed [since the optimization\n              // evaluates LHS before cond]\n              // NOTE - there are some circumstances where we can\n              // proceed even if there are side effects...\n              !mayEffectMutableState(lhs))",
      "info" : "IfStatement[11948-12971]:IfStatement[11948-12971]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12301-12971]:Block[12301-12971]"
    }, {
      "left" : "n.removeChild(cond);",
      "right" : "n.removeChild(cond);",
      "info" : "ExpressionStatement[12316-12336]:ExpressionStatement[12316-12336]"
    }, {
      "left" : "Node assignName = thenOp.removeFirstChild();",
      "right" : "Node assignName = thenOp.removeFirstChild();",
      "info" : "VariableDeclarationStatement[12349-12393]:VariableDeclarationStatement[12349-12393]"
    }, {
      "left" : "Node thenExpr = thenOp.removeFirstChild();",
      "right" : "Node thenExpr = thenOp.removeFirstChild();",
      "info" : "VariableDeclarationStatement[12406-12448]:VariableDeclarationStatement[12406-12448]"
    }, {
      "left" : "Node elseExpr = elseOp.getLastChild();",
      "right" : "Node elseExpr = elseOp.getLastChild();",
      "info" : "VariableDeclarationStatement[12461-12499]:VariableDeclarationStatement[12461-12499]"
    }, {
      "left" : "elseOp.removeChild(elseExpr);",
      "right" : "elseOp.removeChild(elseExpr);",
      "info" : "ExpressionStatement[12512-12541]:ExpressionStatement[12512-12541]"
    }, {
      "left" : "Node hookNode = new Node(Token.HOOK, cond, thenExpr, elseExpr)\n                                .copyInformationFrom(n);",
      "right" : "Node hookNode = new Node(Token.HOOK, cond, thenExpr, elseExpr)\n                                .copyInformationFrom(n);",
      "info" : "VariableDeclarationStatement[12555-12674]:VariableDeclarationStatement[12555-12674]"
    }, {
      "left" : "Node assign = new Node(thenOp.getType(), assignName, hookNode)\n                              .copyInformationFrom(thenOp);",
      "right" : "Node assign = new Node(thenOp.getType(), assignName, hookNode)\n                              .copyInformationFrom(thenOp);",
      "info" : "VariableDeclarationStatement[12687-12809]:VariableDeclarationStatement[12687-12809]"
    }, {
      "left" : "Node expr = NodeUtil.newExpr(assign);",
      "right" : "Node expr = NodeUtil.newExpr(assign);",
      "info" : "VariableDeclarationStatement[12822-12859]:VariableDeclarationStatement[12822-12859]"
    }, {
      "left" : "parent.replaceChild(n, expr);",
      "right" : "parent.replaceChild(n, expr);",
      "info" : "ExpressionStatement[12872-12901]:ExpressionStatement[12872-12901]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[12914-12933]:ExpressionStatement[12914-12933]"
    }, {
      "left" : "return expr;",
      "right" : "return expr;",
      "info" : "ReturnStatement[12947-12959]:ReturnStatement[12947-12959]"
    }, {
      "left" : "if (NodeUtil.isCall(thenOp))",
      "right" : "if (NodeUtil.isCall(thenOp))",
      "info" : "IfStatement[12987-13453]:IfStatement[12987-13453]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13016-13453]:Block[13016-13453]"
    }, {
      "left" : "n.removeChild(cond);",
      "right" : "n.removeChild(cond);",
      "info" : "ExpressionStatement[13081-13101]:ExpressionStatement[13081-13101]"
    }, {
      "left" : "thenOp.detachFromParent();",
      "right" : "thenOp.detachFromParent();",
      "info" : "ExpressionStatement[13112-13138]:ExpressionStatement[13112-13138]"
    }, {
      "left" : "elseOp.detachFromParent();",
      "right" : "elseOp.detachFromParent();",
      "info" : "ExpressionStatement[13149-13175]:ExpressionStatement[13149-13175]"
    }, {
      "left" : "Node hookNode = new Node(Token.HOOK, cond, thenOp, elseOp)\n                              .copyInformationFrom(n);",
      "right" : "Node hookNode = new Node(Token.HOOK, cond, thenOp, elseOp)\n                              .copyInformationFrom(n);",
      "info" : "VariableDeclarationStatement[13186-13299]:VariableDeclarationStatement[13186-13299]"
    }, {
      "left" : "Node expr = NodeUtil.newExpr(hookNode);",
      "right" : "Node expr = NodeUtil.newExpr(hookNode);",
      "info" : "VariableDeclarationStatement[13310-13349]:VariableDeclarationStatement[13310-13349]"
    }, {
      "left" : "parent.replaceChild(n, expr);",
      "right" : "parent.replaceChild(n, expr);",
      "info" : "ExpressionStatement[13360-13389]:ExpressionStatement[13360-13389]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[13400-13419]:ExpressionStatement[13400-13419]"
    }, {
      "left" : "return expr;",
      "right" : "return expr;",
      "info" : "ReturnStatement[13431-13443]:ReturnStatement[13431-13443]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[13468-13477]:ReturnStatement[13468-13477]"
    }, {
      "left" : "boolean thenBranchIsVar = isVarBlock(thenBranch);",
      "right" : "boolean thenBranchIsVar = isVarBlock(thenBranch);",
      "info" : "VariableDeclarationStatement[13489-13538]:VariableDeclarationStatement[13489-13538]"
    }, {
      "left" : "boolean elseBranchIsVar = isVarBlock(elseBranch);",
      "right" : "boolean elseBranchIsVar = isVarBlock(elseBranch);",
      "info" : "VariableDeclarationStatement[13543-13592]:VariableDeclarationStatement[13543-13592]"
    }, {
      "left" : "if (thenBranchIsVar && elseBranchIsExpressionBlock &&\n        NodeUtil.isAssign(getBlockExpression(elseBranch).getFirstChild()))",
      "right" : "if (thenBranchIsVar && elseBranchIsExpressionBlock &&\n        NodeUtil.isAssign(getBlockExpression(elseBranch).getFirstChild()))",
      "info" : "IfStatement[13644-15560]:IfStatement[13644-15560]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13773-14622]:Block[13773-14622]"
    }, {
      "left" : "Node var = getBlockVar(thenBranch);",
      "right" : "Node var = getBlockVar(thenBranch);",
      "info" : "VariableDeclarationStatement[13782-13817]:VariableDeclarationStatement[13782-13817]"
    }, {
      "left" : "Node elseAssign = getBlockExpression(elseBranch).getFirstChild();",
      "right" : "Node elseAssign = getBlockExpression(elseBranch).getFirstChild();",
      "info" : "VariableDeclarationStatement[13824-13889]:VariableDeclarationStatement[13824-13889]"
    }, {
      "left" : "Node name1 = var.getFirstChild();",
      "right" : "Node name1 = var.getFirstChild();",
      "info" : "VariableDeclarationStatement[13897-13930]:VariableDeclarationStatement[13897-13930]"
    }, {
      "left" : "Node maybeName2 = elseAssign.getFirstChild();",
      "right" : "Node maybeName2 = elseAssign.getFirstChild();",
      "info" : "VariableDeclarationStatement[13937-13982]:VariableDeclarationStatement[13937-13982]"
    }, {
      "left" : "if (name1.hasChildren()\n          && maybeName2.getType() == Token.NAME\n          && name1.getString().equals(maybeName2.getString()))",
      "right" : "if (name1.hasChildren()\n          && maybeName2.getType() == Token.NAME\n          && name1.getString().equals(maybeName2.getString()))",
      "info" : "IfStatement[13990-14569]:IfStatement[13990-14569]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14125-14569]:Block[14125-14569]"
    }, {
      "left" : "Node thenExpr = name1.removeChildren();",
      "right" : "Node thenExpr = name1.removeChildren();",
      "info" : "VariableDeclarationStatement[14135-14174]:VariableDeclarationStatement[14135-14174]"
    }, {
      "left" : "Node elseExpr = elseAssign.getLastChild().detachFromParent();",
      "right" : "Node elseExpr = elseAssign.getLastChild().detachFromParent();",
      "info" : "VariableDeclarationStatement[14183-14244]:VariableDeclarationStatement[14183-14244]"
    }, {
      "left" : "cond.detachFromParent();",
      "right" : "cond.detachFromParent();",
      "info" : "ExpressionStatement[14253-14277]:ExpressionStatement[14253-14277]"
    }, {
      "left" : "Node hookNode = new Node(Token.HOOK, cond, thenExpr, elseExpr)\n                            .copyInformationFrom(n);",
      "right" : "Node hookNode = new Node(Token.HOOK, cond, thenExpr, elseExpr)\n                            .copyInformationFrom(n);",
      "info" : "VariableDeclarationStatement[14286-14401]:VariableDeclarationStatement[14286-14401]"
    }, {
      "left" : "var.detachFromParent();",
      "right" : "var.detachFromParent();",
      "info" : "ExpressionStatement[14410-14433]:ExpressionStatement[14410-14433]"
    }, {
      "left" : "name1.addChildrenToBack(hookNode);",
      "right" : "name1.addChildrenToBack(hookNode);",
      "info" : "ExpressionStatement[14442-14476]:ExpressionStatement[14442-14476]"
    }, {
      "left" : "parent.replaceChild(n, var);",
      "right" : "parent.replaceChild(n, var);",
      "info" : "ExpressionStatement[14485-14513]:ExpressionStatement[14485-14513]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[14522-14541]:ExpressionStatement[14522-14541]"
    }, {
      "left" : "return var;",
      "right" : "return var;",
      "info" : "ReturnStatement[14550-14561]:ReturnStatement[14550-14561]"
    }, {
      "left" : "if (elseBranchIsVar && thenBranchIsExpressionBlock &&\n        NodeUtil.isAssign(getBlockExpression(thenBranch).getFirstChild()))",
      "right" : "if (elseBranchIsVar && thenBranchIsExpressionBlock &&\n        NodeUtil.isAssign(getBlockExpression(thenBranch).getFirstChild()))",
      "info" : "IfStatement[14628-15560]:IfStatement[14628-15560]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14757-15560]:Block[14757-15560]"
    }, {
      "left" : "Node var = getBlockVar(elseBranch);",
      "right" : "Node var = getBlockVar(elseBranch);",
      "info" : "VariableDeclarationStatement[14766-14801]:VariableDeclarationStatement[14766-14801]"
    }, {
      "left" : "Node thenAssign = getBlockExpression(thenBranch).getFirstChild();",
      "right" : "Node thenAssign = getBlockExpression(thenBranch).getFirstChild();",
      "info" : "VariableDeclarationStatement[14808-14873]:VariableDeclarationStatement[14808-14873]"
    }, {
      "left" : "Node maybeName1 = thenAssign.getFirstChild();",
      "right" : "Node maybeName1 = thenAssign.getFirstChild();",
      "info" : "VariableDeclarationStatement[14881-14926]:VariableDeclarationStatement[14881-14926]"
    }, {
      "left" : "Node name2 = var.getFirstChild();",
      "right" : "Node name2 = var.getFirstChild();",
      "info" : "VariableDeclarationStatement[14933-14966]:VariableDeclarationStatement[14933-14966]"
    }, {
      "left" : "if (name2.hasChildren()\n          && maybeName1.getType() == Token.NAME\n          && maybeName1.getString().equals(name2.getString()))",
      "right" : "if (name2.hasChildren()\n          && maybeName1.getType() == Token.NAME\n          && maybeName1.getString().equals(name2.getString()))",
      "info" : "IfStatement[14974-15554]:IfStatement[14974-15554]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15109-15554]:Block[15109-15554]"
    }, {
      "left" : "Node thenExpr = thenAssign.getLastChild().detachFromParent();",
      "right" : "Node thenExpr = thenAssign.getLastChild().detachFromParent();",
      "info" : "VariableDeclarationStatement[15119-15180]:VariableDeclarationStatement[15119-15180]"
    }, {
      "left" : "Node elseExpr = name2.removeChildren();",
      "right" : "Node elseExpr = name2.removeChildren();",
      "info" : "VariableDeclarationStatement[15189-15228]:VariableDeclarationStatement[15189-15228]"
    }, {
      "left" : "cond.detachFromParent();",
      "right" : "cond.detachFromParent();",
      "info" : "ExpressionStatement[15237-15261]:ExpressionStatement[15237-15261]"
    }, {
      "left" : "Node hookNode = new Node(Token.HOOK, cond, thenExpr, elseExpr)\n                            .copyInformationFrom(n);",
      "right" : "Node hookNode = new Node(Token.HOOK, cond, thenExpr, elseExpr)\n                            .copyInformationFrom(n);",
      "info" : "VariableDeclarationStatement[15270-15385]:VariableDeclarationStatement[15270-15385]"
    }, {
      "left" : "var.detachFromParent();",
      "right" : "var.detachFromParent();",
      "info" : "ExpressionStatement[15394-15417]:ExpressionStatement[15394-15417]"
    }, {
      "left" : "name2.addChildrenToBack(hookNode);",
      "right" : "name2.addChildrenToBack(hookNode);",
      "info" : "ExpressionStatement[15426-15460]:ExpressionStatement[15426-15460]"
    }, {
      "left" : "parent.replaceChild(n, var);",
      "right" : "parent.replaceChild(n, var);",
      "info" : "ExpressionStatement[15469-15497]:ExpressionStatement[15469-15497]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[15506-15525]:ExpressionStatement[15506-15525]"
    }, {
      "left" : "return var;",
      "right" : "return var;",
      "info" : "ReturnStatement[15535-15546]:ReturnStatement[15535-15546]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[15566-15575]:ReturnStatement[15566-15575]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[15920-15927]:Modifier[15920-15927]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[15928-15932]:PrimitiveType[15928-15932]"
    }, {
      "left" : "tryRemoveRepeatedStatements",
      "right" : "tryRemoveRepeatedStatements",
      "info" : "SimpleName[15933-15960]:SimpleName[15933-15960]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[15961-15967]:SingleVariableDeclaration[15961-15967]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15969-16842]:Block[15969-16842]"
    }, {
      "left" : "Preconditions.checkState(n.getType() == Token.IF);",
      "right" : "Preconditions.checkState(n.getType() == Token.IF);",
      "info" : "ExpressionStatement[15975-16025]:ExpressionStatement[15975-16025]"
    }, {
      "left" : "Node parent = n.getParent();",
      "right" : "Node parent = n.getParent();",
      "info" : "VariableDeclarationStatement[16031-16059]:VariableDeclarationStatement[16031-16059]"
    }, {
      "left" : "if (!NodeUtil.isStatementBlock(parent))",
      "right" : "if (!NodeUtil.isStatementBlock(parent))",
      "info" : "IfStatement[16064-16232]:IfStatement[16064-16232]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16104-16232]:Block[16104-16232]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[16219-16226]:ReturnStatement[16219-16226]"
    }, {
      "left" : "Node cond = n.getFirstChild();",
      "right" : "Node cond = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[16238-16268]:VariableDeclarationStatement[16238-16268]"
    }, {
      "left" : "Node trueBranch = cond.getNext();",
      "right" : "Node trueBranch = cond.getNext();",
      "info" : "VariableDeclarationStatement[16273-16306]:VariableDeclarationStatement[16273-16306]"
    }, {
      "left" : "Node falseBranch = trueBranch.getNext();",
      "right" : "Node falseBranch = trueBranch.getNext();",
      "info" : "VariableDeclarationStatement[16311-16351]:VariableDeclarationStatement[16311-16351]"
    }, {
      "left" : "Preconditions.checkNotNull(trueBranch);",
      "right" : "Preconditions.checkNotNull(trueBranch);",
      "info" : "ExpressionStatement[16356-16395]:ExpressionStatement[16356-16395]"
    }, {
      "left" : "Preconditions.checkNotNull(falseBranch);",
      "right" : "Preconditions.checkNotNull(falseBranch);",
      "info" : "ExpressionStatement[16400-16440]:ExpressionStatement[16400-16440]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[16446-16838]:WhileStatement[16446-16838]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16459-16838]:Block[16459-16838]"
    }, {
      "left" : "Node lastTrue = trueBranch.getLastChild();",
      "right" : "Node lastTrue = trueBranch.getLastChild();",
      "info" : "VariableDeclarationStatement[16467-16509]:VariableDeclarationStatement[16467-16509]"
    }, {
      "left" : "Node lastFalse = falseBranch.getLastChild();",
      "right" : "Node lastFalse = falseBranch.getLastChild();",
      "info" : "VariableDeclarationStatement[16516-16560]:VariableDeclarationStatement[16516-16560]"
    }, {
      "left" : "if (lastTrue == null || lastFalse == null\n          || !areNodesEqualForInlining(lastTrue, lastFalse))",
      "right" : "if (lastTrue == null || lastFalse == null\n          || !areNodesEqualForInlining(lastTrue, lastFalse))",
      "info" : "IfStatement[16567-16694]:IfStatement[16567-16694]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16670-16694]:Block[16670-16694]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[16680-16686]:BreakStatement[16680-16686]"
    }, {
      "left" : "lastTrue.detachFromParent();",
      "right" : "lastTrue.detachFromParent();",
      "info" : "ExpressionStatement[16701-16729]:ExpressionStatement[16701-16729]"
    }, {
      "left" : "lastFalse.detachFromParent();",
      "right" : "lastFalse.detachFromParent();",
      "info" : "ExpressionStatement[16736-16765]:ExpressionStatement[16736-16765]"
    }, {
      "left" : "parent.addChildAfter(lastTrue, n);",
      "right" : "parent.addChildAfter(lastTrue, n);",
      "info" : "ExpressionStatement[16772-16806]:ExpressionStatement[16772-16806]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[16813-16832]:ExpressionStatement[16813-16832]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[16954-16961]:Modifier[16954-16961]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[16962-16969]:PrimitiveType[16962-16969]"
    }, {
      "left" : "isFoldableExpressBlock",
      "right" : "isFoldableExpressBlock",
      "info" : "SimpleName[16970-16992]:SimpleName[16970-16992]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17001-17715]:Block[17001-18187]"
    }, {
      "left" : "if (n.getType() == Token.BLOCK)",
      "right" : "if (n.getType() == Token.BLOCK)",
      "info" : "IfStatement[17007-17692]:IfStatement[17007-18164]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17039-17692]:Block[17039-18164]"
    }, {
      "left" : "if (n.hasOneChild())",
      "right" : "if (n.hasOneChild())",
      "info" : "IfStatement[17047-17686]:IfStatement[17047-18158]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17068-17686]:Block[17068-18158]"
    }, {
      "left" : "Node maybeExpr = n.getFirstChild();",
      "right" : "Node maybeExpr = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[17078-17113]:VariableDeclarationStatement[17078-17113]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[17698-17711]:ReturnStatement[18170-18183]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[17765-17772]:Modifier[18237-18244]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[17773-17777]:SimpleType[18245-18249]"
    }, {
      "left" : "getBlockExpression",
      "right" : "getBlockExpression",
      "info" : "SimpleName[17778-17796]:SimpleName[18250-18268]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[17797-17803]:SingleVariableDeclaration[18269-18275]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17805-17897]:Block[18277-18369]"
    }, {
      "left" : "Preconditions.checkState(isFoldableExpressBlock(n));",
      "right" : "Preconditions.checkState(isFoldableExpressBlock(n));",
      "info" : "ExpressionStatement[17811-17863]:ExpressionStatement[18283-18335]"
    }, {
      "left" : "return n.getFirstChild();",
      "right" : "return n.getFirstChild();",
      "info" : "ReturnStatement[17868-17893]:ReturnStatement[18340-18365]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[18006-18013]:Modifier[18478-18485]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[18014-18021]:PrimitiveType[18486-18493]"
    }, {
      "left" : "isReturnExpressBlock",
      "right" : "isReturnExpressBlock",
      "info" : "SimpleName[18022-18042]:SimpleName[18494-18514]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[18043-18049]:SingleVariableDeclaration[18515-18521]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18051-18291]:Block[18523-18763]"
    }, {
      "left" : "if (n.getType() == Token.BLOCK)",
      "right" : "if (n.getType() == Token.BLOCK)",
      "info" : "IfStatement[18057-18268]:IfStatement[18529-18740]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18089-18268]:Block[18561-18740]"
    }, {
      "left" : "if (n.hasOneChild())",
      "right" : "if (n.hasOneChild())",
      "info" : "IfStatement[18097-18262]:IfStatement[18569-18734]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18118-18262]:Block[18590-18734]"
    }, {
      "left" : "Node first = n.getFirstChild();",
      "right" : "Node first = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[18128-18159]:VariableDeclarationStatement[18600-18631]"
    }, {
      "left" : "if (first.getType() == Token.RETURN)",
      "right" : "if (first.getType() == Token.RETURN)",
      "info" : "IfStatement[18168-18254]:IfStatement[18640-18726]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18205-18254]:Block[18677-18726]"
    }, {
      "left" : "return first.hasOneChild();",
      "right" : "return first.hasOneChild();",
      "info" : "ReturnStatement[18217-18244]:ReturnStatement[18689-18716]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[18274-18287]:ReturnStatement[18746-18759]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[18363-18370]:Modifier[18835-18842]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[18371-18375]:SimpleType[18843-18847]"
    }, {
      "left" : "getBlockReturnExpression",
      "right" : "getBlockReturnExpression",
      "info" : "SimpleName[18376-18400]:SimpleName[18848-18872]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[18401-18407]:SingleVariableDeclaration[18873-18879]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18409-18515]:Block[18881-18987]"
    }, {
      "left" : "Preconditions.checkState(isReturnExpressBlock(n));",
      "right" : "Preconditions.checkState(isReturnExpressBlock(n));",
      "info" : "ExpressionStatement[18415-18465]:ExpressionStatement[18887-18937]"
    }, {
      "left" : "return n.getFirstChild().getFirstChild();",
      "right" : "return n.getFirstChild().getFirstChild();",
      "info" : "ReturnStatement[18470-18511]:ReturnStatement[18942-18983]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[18653-18660]:Modifier[19125-19132]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[18661-18668]:PrimitiveType[19133-19140]"
    }, {
      "left" : "isVarBlock",
      "right" : "isVarBlock",
      "info" : "SimpleName[18669-18679]:SimpleName[19141-19151]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[18680-18686]:SingleVariableDeclaration[19152-19158]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18688-18925]:Block[19160-19397]"
    }, {
      "left" : "if (n.getType() == Token.BLOCK)",
      "right" : "if (n.getType() == Token.BLOCK)",
      "info" : "IfStatement[18694-18902]:IfStatement[19166-19374]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18726-18902]:Block[19198-19374]"
    }, {
      "left" : "if (n.hasOneChild())",
      "right" : "if (n.hasOneChild())",
      "info" : "IfStatement[18734-18896]:IfStatement[19206-19368]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18755-18896]:Block[19227-19368]"
    }, {
      "left" : "Node first = n.getFirstChild();",
      "right" : "Node first = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[18765-18796]:VariableDeclarationStatement[19237-19268]"
    }, {
      "left" : "if (first.getType() == Token.VAR)",
      "right" : "if (first.getType() == Token.VAR)",
      "info" : "IfStatement[18805-18888]:IfStatement[19277-19360]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18839-18888]:Block[19311-19360]"
    }, {
      "left" : "return first.hasOneChild();",
      "right" : "return first.hasOneChild();",
      "info" : "ReturnStatement[18851-18878]:ReturnStatement[19323-19350]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[18908-18921]:ReturnStatement[19380-19393]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[18968-18975]:Modifier[19440-19447]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[18976-18980]:SimpleType[19448-19452]"
    }, {
      "left" : "getBlockVar",
      "right" : "getBlockVar",
      "info" : "SimpleName[18981-18992]:SimpleName[19453-19464]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[18993-18999]:SingleVariableDeclaration[19465-19471]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19001-19081]:Block[19473-19553]"
    }, {
      "left" : "Preconditions.checkState(isVarBlock(n));",
      "right" : "Preconditions.checkState(isVarBlock(n));",
      "info" : "ExpressionStatement[19007-19047]:ExpressionStatement[19479-19519]"
    }, {
      "left" : "return n.getFirstChild();",
      "right" : "return n.getFirstChild();",
      "info" : "ReturnStatement[19052-19077]:ReturnStatement[19524-19549]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[19301-19308]:Modifier[19773-19780]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[19309-19316]:PrimitiveType[19781-19788]"
    }, {
      "left" : "consumesDanglingElse",
      "right" : "consumesDanglingElse",
      "info" : "SimpleName[19317-19337]:SimpleName[19789-19809]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[19338-19344]:SingleVariableDeclaration[19810-19816]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19346-19778]:Block[19818-20250]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[19352-19774]:WhileStatement[19824-20246]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19365-19774]:Block[19837-20246]"
    }, {
      "left" : "switch (n.getType()) {\n        case Token.IF:\n          if (n.getChildCount() < 3) {\n            return true;\n          }\n          // This IF node has no else clause.\n          n = n.getLastChild();\n          continue;\n        case Token.WITH:\n        case Token.WHILE:\n        case Token.FOR:\n          n = n.getLastChild();\n          continue;\n        default:\n          return false;\n      }",
      "right" : "switch (n.getType()) {\n        case Token.IF:\n          if (n.getChildCount() < 3) {\n            return true;\n          }\n          // This IF node has no else clause.\n          n = n.getLastChild();\n          continue;\n        case Token.WITH:\n        case Token.WHILE:\n        case Token.FOR:\n          n = n.getLastChild();\n          continue;\n        default:\n          return false;\n      }",
      "info" : "SwitchStatement[19373-19768]:SwitchStatement[19845-20240]"
    }, {
      "left" : "case Token.IF:",
      "right" : "case Token.IF:",
      "info" : "SwitchCase[19404-19418]:SwitchCase[19876-19890]"
    }, {
      "left" : "if (n.getChildCount() < 3)",
      "right" : "if (n.getChildCount() < 3)",
      "info" : "IfStatement[19429-19494]:IfStatement[19901-19966]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19456-19494]:Block[19928-19966]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[19470-19482]:ReturnStatement[19942-19954]"
    }, {
      "left" : "n = n.getLastChild();",
      "right" : "n = n.getLastChild();",
      "info" : "ExpressionStatement[19551-19572]:ExpressionStatement[20023-20044]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[19583-19592]:ContinueStatement[20055-20064]"
    }, {
      "left" : "case Token.WITH:",
      "right" : "case Token.WITH:",
      "info" : "SwitchCase[19601-19617]:SwitchCase[20073-20089]"
    }, {
      "left" : "case Token.WHILE:",
      "right" : "case Token.WHILE:",
      "info" : "SwitchCase[19626-19643]:SwitchCase[20098-20115]"
    }, {
      "left" : "case Token.FOR:",
      "right" : "case Token.FOR:",
      "info" : "SwitchCase[19652-19667]:SwitchCase[20124-20139]"
    }, {
      "left" : "n = n.getLastChild();",
      "right" : "n = n.getLastChild();",
      "info" : "ExpressionStatement[19678-19699]:ExpressionStatement[20150-20171]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[19710-19719]:ContinueStatement[20182-20191]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[19728-19736]:SwitchCase[20200-20208]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[19747-19760]:ReturnStatement[20219-20232]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[19885-19892]:Modifier[20357-20364]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[19893-19900]:PrimitiveType[20365-20372]"
    }, {
      "left" : "isLowerPrecedenceInExpression",
      "right" : "isLowerPrecedenceInExpression",
      "info" : "SimpleName[19901-19930]:SimpleName[20373-20402]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[19931-19937]:SingleVariableDeclaration[20403-20409]"
    }, {
      "left" : "final int precedence",
      "right" : "final int precedence",
      "info" : "SingleVariableDeclaration[19945-19965]:SingleVariableDeclaration[20417-20437]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19967-20283]:Block[20439-20755]"
    }, {
      "left" : "Predicate<Node> isLowerPrecedencePredicate = new Predicate<Node>() {\n      @Override\n      public boolean apply(Node input) {\n        return NodeUtil.precedence(input.getType()) < precedence;\n      }\n    };",
      "right" : "Predicate<Node> isLowerPrecedencePredicate = new Predicate<Node>() {\n      @Override\n      public boolean apply(Node input) {\n        return NodeUtil.precedence(input.getType()) < precedence;\n      }\n    };",
      "info" : "VariableDeclarationStatement[19973-20179]:VariableDeclarationStatement[20445-20651]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[20048-20057]:MarkerAnnotation[20520-20529]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[20064-20070]:Modifier[20536-20542]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[20071-20078]:PrimitiveType[20543-20550]"
    }, {
      "left" : "apply",
      "right" : "apply",
      "info" : "SimpleName[20079-20084]:SimpleName[20551-20556]"
    }, {
      "left" : "Node input",
      "right" : "Node input",
      "info" : "SingleVariableDeclaration[20085-20095]:SingleVariableDeclaration[20557-20567]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20097-20172]:Block[20569-20644]"
    }, {
      "left" : "return NodeUtil.precedence(input.getType()) < precedence;",
      "right" : "return NodeUtil.precedence(input.getType()) < precedence;",
      "info" : "ReturnStatement[20107-20164]:ReturnStatement[20579-20636]"
    }, {
      "left" : "return NodeUtil.has(n, isLowerPrecedencePredicate,\n        DONT_TRAVERSE_FUNCTIONS_PREDICATE);",
      "right" : "return NodeUtil.has(n, isLowerPrecedencePredicate,\n        DONT_TRAVERSE_FUNCTIONS_PREDICATE);",
      "info" : "ReturnStatement[20185-20279]:ReturnStatement[20657-20751]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[20355-20362]:Modifier[20827-20834]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[20363-20370]:PrimitiveType[20835-20842]"
    }, {
      "left" : "isPropertyAssignmentInExpression",
      "right" : "isPropertyAssignmentInExpression",
      "info" : "SimpleName[20371-20403]:SimpleName[20843-20875]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[20404-20410]:SingleVariableDeclaration[20876-20882]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20412-20810]:Block[20884-21282]"
    }, {
      "left" : "Predicate<Node> isPropertyAssignmentInExpressionPredicate =\n        new Predicate<Node>() {\n      @Override\n      public boolean apply(Node input) {\n        return (input.getType() == Token.GETPROP &&\n            input.getParent().getType() == Token.ASSIGN);\n      }\n    };",
      "right" : "Predicate<Node> isPropertyAssignmentInExpressionPredicate =\n        new Predicate<Node>() {\n      @Override\n      public boolean apply(Node input) {\n        return (input.getType() == Token.GETPROP &&\n            input.getParent().getType() == Token.ASSIGN);\n      }\n    };",
      "info" : "VariableDeclarationStatement[20418-20691]:VariableDeclarationStatement[20890-21163]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[20516-20525]:MarkerAnnotation[20988-20997]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[20532-20538]:Modifier[21004-21010]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[20539-20546]:PrimitiveType[21011-21018]"
    }, {
      "left" : "apply",
      "right" : "apply",
      "info" : "SimpleName[20547-20552]:SimpleName[21019-21024]"
    }, {
      "left" : "Node input",
      "right" : "Node input",
      "info" : "SingleVariableDeclaration[20553-20563]:SingleVariableDeclaration[21025-21035]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20565-20684]:Block[21037-21156]"
    }, {
      "left" : "return (input.getType() == Token.GETPROP &&\n            input.getParent().getType() == Token.ASSIGN);",
      "right" : "return (input.getType() == Token.GETPROP &&\n            input.getParent().getType() == Token.ASSIGN);",
      "info" : "ReturnStatement[20575-20676]:ReturnStatement[21047-21148]"
    }, {
      "left" : "return NodeUtil.has(n, isPropertyAssignmentInExpressionPredicate,\n        DONT_TRAVERSE_FUNCTIONS_PREDICATE);",
      "right" : "return NodeUtil.has(n, isPropertyAssignmentInExpressionPredicate,\n        DONT_TRAVERSE_FUNCTIONS_PREDICATE);",
      "info" : "ReturnStatement[20697-20806]:ReturnStatement[21169-21278]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[21252-21259]:Modifier[21724-21731]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[21260-21264]:SimpleType[21732-21736]"
    }, {
      "left" : "tryMinimizeCondition",
      "right" : "tryMinimizeCondition",
      "info" : "SimpleName[21265-21285]:SimpleName[21737-21757]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[21286-21292]:SingleVariableDeclaration[21758-21764]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21294-26415]:Block[21766-26887]"
    }, {
      "left" : "Node parent = n.getParent();",
      "right" : "Node parent = n.getParent();",
      "info" : "VariableDeclarationStatement[21300-21328]:VariableDeclarationStatement[21772-21800]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.NOT:\n        Node first = n.getFirstChild();\n        switch (first.getType()) {\n          case Token.NOT: {\n              Node newRoot = first.removeFirstChild();\n              parent.replaceChild(n, newRoot);\n              reportCodeChange();\n              // No need to traverse, tryMinimizeCondition is called on the\n              // NOT children are handled below.\n              return newRoot;\n            }\n          case Token.AND:\n          case Token.OR: {\n              Node leftParent = first.getFirstChild();\n              Node rightParent = first.getLastChild();\n              if (leftParent.getType() == Token.NOT\n                  && rightParent.getType() == Token.NOT) {\n                Node left = leftParent.removeFirstChild();\n                Node right = rightParent.removeFirstChild();\n\n                int newOp = (first.getType() == Token.AND) ? Token.OR : Token.AND;\n                Node newRoot = new Node(newOp, left, right);\n                parent.replaceChild(n, newRoot);\n                reportCodeChange();\n                // No need to traverse, tryMinimizeCondition is called on the\n                // AND and OR children below.\n                return newRoot;\n              }\n            }\n            break;\n        }\n        // No need to traverse, tryMinimizeCondition is called on the NOT\n        // children in the general case in the main post-order traversal.\n        return n;\n\n      case Token.OR:\n      case Token.AND: {\n        Node left = n.getFirstChild();\n        Node right = n.getLastChild();\n\n        // Because the expression is in a boolean context minimize\n        // the children, this can't be done in the general case.\n        left = tryMinimizeCondition(left);\n        right = tryMinimizeCondition(right);\n\n        // Remove useless conditionals\n        // Handle four cases:\n        //   x || false --> x\n        //   x || true  --> true\n        //   x && true --> x\n        //   x && false  --> false\n        TernaryValue rightVal = NodeUtil.getBooleanValue(right);\n        if (NodeUtil.getBooleanValue(right) != TernaryValue.UNKNOWN) {\n          int type = n.getType();\n          Node replacement = null;\n          boolean rval = rightVal.toBoolean(true);\n\n          // (x || FALSE) => x\n          // (x && TRUE) => x\n          if (type == Token.OR && !rval ||\n              type == Token.AND && rval) {\n            replacement = left;\n          } else if (!mayHaveSideEffects(left)) {\n            replacement = right;\n          }\n\n          if (replacement != null) {\n            n.detachChildren();\n            parent.replaceChild(n, replacement);\n            reportCodeChange();\n            return replacement;\n          }\n        }\n        return n;\n      }\n\n      case Token.HOOK: {\n        Node condition = n.getFirstChild();\n        Node trueNode = n.getFirstChild().getNext();\n        Node falseNode = n.getLastChild();\n\n        // Because the expression is in a boolean context minimize\n        // the result children, this can't be done in the general case.\n        // The condition is handled in the general case in #optimizeSubtree\n        trueNode = tryMinimizeCondition(trueNode);\n        falseNode = tryMinimizeCondition(falseNode);\n\n        // Handle four cases:\n        //   x ? true : false --> x\n        //   x ? false : true --> !x\n        //   x ? true : y     --> x || y\n        //   x ? y : false    --> x && y\n        Node replacement = null;\n        if (NodeUtil.getBooleanValue(trueNode) == TernaryValue.TRUE\n            && NodeUtil.getBooleanValue(falseNode) == TernaryValue.FALSE) {\n          // Remove useless conditionals, keep the condition\n          condition.detachFromParent();\n          replacement = condition;\n        } else if (NodeUtil.getBooleanValue(trueNode) == TernaryValue.FALSE\n            && NodeUtil.getBooleanValue(falseNode) == TernaryValue.TRUE) {\n          // Remove useless conditionals, keep the condition\n          condition.detachFromParent();\n          replacement = new Node(Token.NOT, condition);\n        } else if (NodeUtil.getBooleanValue(trueNode) == TernaryValue.TRUE) {\n          // Remove useless true case.\n          n.detachChildren();\n          replacement = new Node(Token.OR, condition, falseNode);\n        } else if (NodeUtil.getBooleanValue(falseNode) == TernaryValue.FALSE) {\n          // Remove useless false case\n          n.detachChildren();\n          replacement = new Node(Token.AND, condition, trueNode);\n        }\n\n        if (replacement != null) {\n          parent.replaceChild(n, replacement);\n          n = replacement;\n          reportCodeChange();\n        }\n\n        return n;\n      }\n\n      default:\n        // while(true) --> while(1)\n        TernaryValue nVal = NodeUtil.getBooleanValue(n);\n        if (nVal != TernaryValue.UNKNOWN) {\n          boolean result = nVal.toBoolean(true);\n          int equivalentResult = result ? 1 : 0;\n          return maybeReplaceChildWithNumber(n, parent, equivalentResult);\n        }\n        // We can't do anything else currently.\n        return n;\n    }",
      "right" : "switch (n.getType()) {\n      case Token.NOT:\n        Node first = n.getFirstChild();\n        switch (first.getType()) {\n          case Token.NOT: {\n              Node newRoot = first.removeFirstChild();\n              parent.replaceChild(n, newRoot);\n              reportCodeChange();\n              // No need to traverse, tryMinimizeCondition is called on the\n              // NOT children are handled below.\n              return newRoot;\n            }\n          case Token.AND:\n          case Token.OR: {\n              Node leftParent = first.getFirstChild();\n              Node rightParent = first.getLastChild();\n              if (leftParent.getType() == Token.NOT\n                  && rightParent.getType() == Token.NOT) {\n                Node left = leftParent.removeFirstChild();\n                Node right = rightParent.removeFirstChild();\n\n                int newOp = (first.getType() == Token.AND) ? Token.OR : Token.AND;\n                Node newRoot = new Node(newOp, left, right);\n                parent.replaceChild(n, newRoot);\n                reportCodeChange();\n                // No need to traverse, tryMinimizeCondition is called on the\n                // AND and OR children below.\n                return newRoot;\n              }\n            }\n            break;\n        }\n        // No need to traverse, tryMinimizeCondition is called on the NOT\n        // children in the general case in the main post-order traversal.\n        return n;\n\n      case Token.OR:\n      case Token.AND: {\n        Node left = n.getFirstChild();\n        Node right = n.getLastChild();\n\n        // Because the expression is in a boolean context minimize\n        // the children, this can't be done in the general case.\n        left = tryMinimizeCondition(left);\n        right = tryMinimizeCondition(right);\n\n        // Remove useless conditionals\n        // Handle four cases:\n        //   x || false --> x\n        //   x || true  --> true\n        //   x && true --> x\n        //   x && false  --> false\n        TernaryValue rightVal = NodeUtil.getBooleanValue(right);\n        if (NodeUtil.getBooleanValue(right) != TernaryValue.UNKNOWN) {\n          int type = n.getType();\n          Node replacement = null;\n          boolean rval = rightVal.toBoolean(true);\n\n          // (x || FALSE) => x\n          // (x && TRUE) => x\n          if (type == Token.OR && !rval ||\n              type == Token.AND && rval) {\n            replacement = left;\n          } else if (!mayHaveSideEffects(left)) {\n            replacement = right;\n          }\n\n          if (replacement != null) {\n            n.detachChildren();\n            parent.replaceChild(n, replacement);\n            reportCodeChange();\n            return replacement;\n          }\n        }\n        return n;\n      }\n\n      case Token.HOOK: {\n        Node condition = n.getFirstChild();\n        Node trueNode = n.getFirstChild().getNext();\n        Node falseNode = n.getLastChild();\n\n        // Because the expression is in a boolean context minimize\n        // the result children, this can't be done in the general case.\n        // The condition is handled in the general case in #optimizeSubtree\n        trueNode = tryMinimizeCondition(trueNode);\n        falseNode = tryMinimizeCondition(falseNode);\n\n        // Handle four cases:\n        //   x ? true : false --> x\n        //   x ? false : true --> !x\n        //   x ? true : y     --> x || y\n        //   x ? y : false    --> x && y\n        Node replacement = null;\n        if (NodeUtil.getBooleanValue(trueNode) == TernaryValue.TRUE\n            && NodeUtil.getBooleanValue(falseNode) == TernaryValue.FALSE) {\n          // Remove useless conditionals, keep the condition\n          condition.detachFromParent();\n          replacement = condition;\n        } else if (NodeUtil.getBooleanValue(trueNode) == TernaryValue.FALSE\n            && NodeUtil.getBooleanValue(falseNode) == TernaryValue.TRUE) {\n          // Remove useless conditionals, keep the condition\n          condition.detachFromParent();\n          replacement = new Node(Token.NOT, condition);\n        } else if (NodeUtil.getBooleanValue(trueNode) == TernaryValue.TRUE) {\n          // Remove useless true case.\n          n.detachChildren();\n          replacement = new Node(Token.OR, condition, falseNode);\n        } else if (NodeUtil.getBooleanValue(falseNode) == TernaryValue.FALSE) {\n          // Remove useless false case\n          n.detachChildren();\n          replacement = new Node(Token.AND, condition, trueNode);\n        }\n\n        if (replacement != null) {\n          parent.replaceChild(n, replacement);\n          n = replacement;\n          reportCodeChange();\n        }\n\n        return n;\n      }\n\n      default:\n        // while(true) --> while(1)\n        TernaryValue nVal = NodeUtil.getBooleanValue(n);\n        if (nVal != TernaryValue.UNKNOWN) {\n          boolean result = nVal.toBoolean(true);\n          int equivalentResult = result ? 1 : 0;\n          return maybeReplaceChildWithNumber(n, parent, equivalentResult);\n        }\n        // We can't do anything else currently.\n        return n;\n    }",
      "info" : "SwitchStatement[21334-26411]:SwitchStatement[21806-26883]"
    }, {
      "left" : "case Token.NOT:",
      "right" : "case Token.NOT:",
      "info" : "SwitchCase[21363-21378]:SwitchCase[21835-21850]"
    }, {
      "left" : "Node first = n.getFirstChild();",
      "right" : "Node first = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[21387-21418]:VariableDeclarationStatement[21859-21890]"
    }, {
      "left" : "switch (first.getType()) {\n          case Token.NOT: {\n              Node newRoot = first.removeFirstChild();\n              parent.replaceChild(n, newRoot);\n              reportCodeChange();\n              // No need to traverse, tryMinimizeCondition is called on the\n              // NOT children are handled below.\n              return newRoot;\n            }\n          case Token.AND:\n          case Token.OR: {\n              Node leftParent = first.getFirstChild();\n              Node rightParent = first.getLastChild();\n              if (leftParent.getType() == Token.NOT\n                  && rightParent.getType() == Token.NOT) {\n                Node left = leftParent.removeFirstChild();\n                Node right = rightParent.removeFirstChild();\n\n                int newOp = (first.getType() == Token.AND) ? Token.OR : Token.AND;\n                Node newRoot = new Node(newOp, left, right);\n                parent.replaceChild(n, newRoot);\n                reportCodeChange();\n                // No need to traverse, tryMinimizeCondition is called on the\n                // AND and OR children below.\n                return newRoot;\n              }\n            }\n            break;\n        }",
      "right" : "switch (first.getType()) {\n          case Token.NOT: {\n              Node newRoot = first.removeFirstChild();\n              parent.replaceChild(n, newRoot);\n              reportCodeChange();\n              // No need to traverse, tryMinimizeCondition is called on the\n              // NOT children are handled below.\n              return newRoot;\n            }\n          case Token.AND:\n          case Token.OR: {\n              Node leftParent = first.getFirstChild();\n              Node rightParent = first.getLastChild();\n              if (leftParent.getType() == Token.NOT\n                  && rightParent.getType() == Token.NOT) {\n                Node left = leftParent.removeFirstChild();\n                Node right = rightParent.removeFirstChild();\n\n                int newOp = (first.getType() == Token.AND) ? Token.OR : Token.AND;\n                Node newRoot = new Node(newOp, left, right);\n                parent.replaceChild(n, newRoot);\n                reportCodeChange();\n                // No need to traverse, tryMinimizeCondition is called on the\n                // AND and OR children below.\n                return newRoot;\n              }\n            }\n            break;\n        }",
      "info" : "SwitchStatement[21427-22625]:SwitchStatement[21899-23097]"
    }, {
      "left" : "case Token.NOT:",
      "right" : "case Token.NOT:",
      "info" : "SwitchCase[21464-21479]:SwitchCase[21936-21951]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21480-21786]:Block[21952-22258]"
    }, {
      "left" : "Node newRoot = first.removeFirstChild();",
      "right" : "Node newRoot = first.removeFirstChild();",
      "info" : "VariableDeclarationStatement[21496-21536]:VariableDeclarationStatement[21968-22008]"
    }, {
      "left" : "parent.replaceChild(n, newRoot);",
      "right" : "parent.replaceChild(n, newRoot);",
      "info" : "ExpressionStatement[21551-21583]:ExpressionStatement[22023-22055]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[21598-21617]:ExpressionStatement[22070-22089]"
    }, {
      "left" : "return newRoot;",
      "right" : "return newRoot;",
      "info" : "ReturnStatement[21757-21772]:ReturnStatement[22229-22244]"
    }, {
      "left" : "case Token.AND:",
      "right" : "case Token.AND:",
      "info" : "SwitchCase[21797-21812]:SwitchCase[22269-22284]"
    }, {
      "left" : "case Token.OR:",
      "right" : "case Token.OR:",
      "info" : "SwitchCase[21823-21837]:SwitchCase[22295-22309]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21838-22596]:Block[22310-23068]"
    }, {
      "left" : "Node leftParent = first.getFirstChild();",
      "right" : "Node leftParent = first.getFirstChild();",
      "info" : "VariableDeclarationStatement[21854-21894]:VariableDeclarationStatement[22326-22366]"
    }, {
      "left" : "Node rightParent = first.getLastChild();",
      "right" : "Node rightParent = first.getLastChild();",
      "info" : "VariableDeclarationStatement[21909-21949]:VariableDeclarationStatement[22381-22421]"
    }, {
      "left" : "if (leftParent.getType() == Token.NOT\n                  && rightParent.getType() == Token.NOT)",
      "right" : "if (leftParent.getType() == Token.NOT\n                  && rightParent.getType() == Token.NOT)",
      "info" : "IfStatement[21964-22582]:IfStatement[22436-23054]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22059-22582]:Block[22531-23054]"
    }, {
      "left" : "Node left = leftParent.removeFirstChild();",
      "right" : "Node left = leftParent.removeFirstChild();",
      "info" : "VariableDeclarationStatement[22077-22119]:VariableDeclarationStatement[22549-22591]"
    }, {
      "left" : "Node right = rightParent.removeFirstChild();",
      "right" : "Node right = rightParent.removeFirstChild();",
      "info" : "VariableDeclarationStatement[22136-22180]:VariableDeclarationStatement[22608-22652]"
    }, {
      "left" : "int newOp = (first.getType() == Token.AND) ? Token.OR : Token.AND;",
      "right" : "int newOp = (first.getType() == Token.AND) ? Token.OR : Token.AND;",
      "info" : "VariableDeclarationStatement[22198-22264]:VariableDeclarationStatement[22670-22736]"
    }, {
      "left" : "Node newRoot = new Node(newOp, left, right);",
      "right" : "Node newRoot = new Node(newOp, left, right);",
      "info" : "VariableDeclarationStatement[22281-22325]:VariableDeclarationStatement[22753-22797]"
    }, {
      "left" : "parent.replaceChild(n, newRoot);",
      "right" : "parent.replaceChild(n, newRoot);",
      "info" : "ExpressionStatement[22342-22374]:ExpressionStatement[22814-22846]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[22391-22410]:ExpressionStatement[22863-22882]"
    }, {
      "left" : "return newRoot;",
      "right" : "return newRoot;",
      "info" : "ReturnStatement[22551-22566]:ReturnStatement[23023-23038]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[22609-22615]:BreakStatement[23081-23087]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[22782-22791]:ReturnStatement[23254-23263]"
    }, {
      "left" : "case Token.OR:",
      "right" : "case Token.OR:",
      "info" : "SwitchCase[22799-22813]:SwitchCase[23271-23285]"
    }, {
      "left" : "case Token.AND:",
      "right" : "case Token.AND:",
      "info" : "SwitchCase[22820-22835]:SwitchCase[23292-23307]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22836-24095]:Block[23308-24567]"
    }, {
      "left" : "Node left = n.getFirstChild();",
      "right" : "Node left = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[22846-22876]:VariableDeclarationStatement[23318-23348]"
    }, {
      "left" : "Node right = n.getLastChild();",
      "right" : "Node right = n.getLastChild();",
      "info" : "VariableDeclarationStatement[22885-22915]:VariableDeclarationStatement[23357-23387]"
    }, {
      "left" : "left = tryMinimizeCondition(left);",
      "right" : "left = tryMinimizeCondition(left);",
      "info" : "ExpressionStatement[23057-23091]:ExpressionStatement[23529-23563]"
    }, {
      "left" : "right = tryMinimizeCondition(right);",
      "right" : "right = tryMinimizeCondition(right);",
      "info" : "ExpressionStatement[23100-23136]:ExpressionStatement[23572-23608]"
    }, {
      "left" : "TernaryValue rightVal = NodeUtil.getBooleanValue(right);",
      "right" : "TernaryValue rightVal = NodeUtil.getBooleanValue(right);",
      "info" : "VariableDeclarationStatement[23342-23398]:VariableDeclarationStatement[23814-23870]"
    }, {
      "left" : "if (NodeUtil.getBooleanValue(right) != TernaryValue.UNKNOWN)",
      "right" : "if (NodeUtil.getBooleanValue(right) != TernaryValue.UNKNOWN)",
      "info" : "IfStatement[23407-24069]:IfStatement[23879-24541]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23468-24069]:Block[23940-24541]"
    }, {
      "left" : "int type = n.getType();",
      "right" : "int type = n.getType();",
      "info" : "VariableDeclarationStatement[23480-23503]:VariableDeclarationStatement[23952-23975]"
    }, {
      "left" : "Node replacement = null;",
      "right" : "Node replacement = null;",
      "info" : "VariableDeclarationStatement[23514-23538]:VariableDeclarationStatement[23986-24010]"
    }, {
      "left" : "boolean rval = rightVal.toBoolean(true);",
      "right" : "boolean rval = rightVal.toBoolean(true);",
      "info" : "VariableDeclarationStatement[23549-23589]:VariableDeclarationStatement[24021-24061]"
    }, {
      "left" : "if (type == Token.OR && !rval ||\n              type == Token.AND && rval)",
      "right" : "if (type == Token.OR && !rval ||\n              type == Token.AND && rval)",
      "info" : "IfStatement[23662-23864]:IfStatement[24134-24336]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23736-23781]:Block[24208-24253]"
    }, {
      "left" : "replacement = left;",
      "right" : "replacement = left;",
      "info" : "ExpressionStatement[23750-23769]:ExpressionStatement[24222-24241]"
    }, {
      "left" : "if (!mayHaveSideEffects(left))",
      "right" : "if (!mayHaveSideEffects(left))",
      "info" : "IfStatement[23787-23864]:IfStatement[24259-24336]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23818-23864]:Block[24290-24336]"
    }, {
      "left" : "replacement = right;",
      "right" : "replacement = right;",
      "info" : "ExpressionStatement[23832-23852]:ExpressionStatement[24304-24324]"
    }, {
      "left" : "if (replacement != null)",
      "right" : "if (replacement != null)",
      "info" : "IfStatement[23876-24059]:IfStatement[24348-24531]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23901-24059]:Block[24373-24531]"
    }, {
      "left" : "n.detachChildren();",
      "right" : "n.detachChildren();",
      "info" : "ExpressionStatement[23915-23934]:ExpressionStatement[24387-24406]"
    }, {
      "left" : "parent.replaceChild(n, replacement);",
      "right" : "parent.replaceChild(n, replacement);",
      "info" : "ExpressionStatement[23947-23983]:ExpressionStatement[24419-24455]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[23996-24015]:ExpressionStatement[24468-24487]"
    }, {
      "left" : "return replacement;",
      "right" : "return replacement;",
      "info" : "ReturnStatement[24028-24047]:ReturnStatement[24500-24519]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[24078-24087]:ReturnStatement[24550-24559]"
    }, {
      "left" : "case Token.HOOK:",
      "right" : "case Token.HOOK:",
      "info" : "SwitchCase[24103-24119]:SwitchCase[24575-24591]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24120-26003]:Block[24592-26475]"
    }, {
      "left" : "Node condition = n.getFirstChild();",
      "right" : "Node condition = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[24130-24165]:VariableDeclarationStatement[24602-24637]"
    }, {
      "left" : "Node trueNode = n.getFirstChild().getNext();",
      "right" : "Node trueNode = n.getFirstChild().getNext();",
      "info" : "VariableDeclarationStatement[24174-24218]:VariableDeclarationStatement[24646-24690]"
    }, {
      "left" : "Node falseNode = n.getLastChild();",
      "right" : "Node falseNode = n.getLastChild();",
      "info" : "VariableDeclarationStatement[24227-24261]:VariableDeclarationStatement[24699-24733]"
    }, {
      "left" : "trueNode = tryMinimizeCondition(trueNode);",
      "right" : "trueNode = tryMinimizeCondition(trueNode);",
      "info" : "ExpressionStatement[24486-24528]:ExpressionStatement[24958-25000]"
    }, {
      "left" : "falseNode = tryMinimizeCondition(falseNode);",
      "right" : "falseNode = tryMinimizeCondition(falseNode);",
      "info" : "ExpressionStatement[24537-24581]:ExpressionStatement[25009-25053]"
    }, {
      "left" : "Node replacement = null;",
      "right" : "Node replacement = null;",
      "info" : "VariableDeclarationStatement[24776-24800]:VariableDeclarationStatement[25248-25272]"
    }, {
      "left" : "if (NodeUtil.getBooleanValue(trueNode) == TernaryValue.TRUE\n            && NodeUtil.getBooleanValue(falseNode) == TernaryValue.FALSE)",
      "right" : "if (NodeUtil.getBooleanValue(trueNode) == TernaryValue.TRUE\n            && NodeUtil.getBooleanValue(falseNode) == TernaryValue.FALSE)",
      "info" : "IfStatement[24809-25826]:IfStatement[25281-26298]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24943-25090]:Block[25415-25562]"
    }, {
      "left" : "condition.detachFromParent();",
      "right" : "condition.detachFromParent();",
      "info" : "ExpressionStatement[25016-25045]:ExpressionStatement[25488-25517]"
    }, {
      "left" : "replacement = condition;",
      "right" : "replacement = condition;",
      "info" : "ExpressionStatement[25056-25080]:ExpressionStatement[25528-25552]"
    }, {
      "left" : "if (NodeUtil.getBooleanValue(trueNode) == TernaryValue.FALSE\n            && NodeUtil.getBooleanValue(falseNode) == TernaryValue.TRUE)",
      "right" : "if (NodeUtil.getBooleanValue(trueNode) == TernaryValue.FALSE\n            && NodeUtil.getBooleanValue(falseNode) == TernaryValue.TRUE)",
      "info" : "IfStatement[25096-25826]:IfStatement[25568-26298]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25230-25398]:Block[25702-25870]"
    }, {
      "left" : "condition.detachFromParent();",
      "right" : "condition.detachFromParent();",
      "info" : "ExpressionStatement[25303-25332]:ExpressionStatement[25775-25804]"
    }, {
      "left" : "replacement = new Node(Token.NOT, condition);",
      "right" : "replacement = new Node(Token.NOT, condition);",
      "info" : "ExpressionStatement[25343-25388]:ExpressionStatement[25815-25860]"
    }, {
      "left" : "if (NodeUtil.getBooleanValue(trueNode) == TernaryValue.TRUE)",
      "right" : "if (NodeUtil.getBooleanValue(trueNode) == TernaryValue.TRUE)",
      "info" : "IfStatement[25404-25826]:IfStatement[25876-26298]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25465-25611]:Block[25937-26083]"
    }, {
      "left" : "n.detachChildren();",
      "right" : "n.detachChildren();",
      "info" : "ExpressionStatement[25516-25535]:ExpressionStatement[25988-26007]"
    }, {
      "left" : "replacement = new Node(Token.OR, condition, falseNode);",
      "right" : "replacement = new Node(Token.OR, condition, falseNode);",
      "info" : "ExpressionStatement[25546-25601]:ExpressionStatement[26018-26073]"
    }, {
      "left" : "if (NodeUtil.getBooleanValue(falseNode) == TernaryValue.FALSE)",
      "right" : "if (NodeUtil.getBooleanValue(falseNode) == TernaryValue.FALSE)",
      "info" : "IfStatement[25617-25826]:IfStatement[26089-26298]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25680-25826]:Block[26152-26298]"
    }, {
      "left" : "n.detachChildren();",
      "right" : "n.detachChildren();",
      "info" : "ExpressionStatement[25731-25750]:ExpressionStatement[26203-26222]"
    }, {
      "left" : "replacement = new Node(Token.AND, condition, trueNode);",
      "right" : "replacement = new Node(Token.AND, condition, trueNode);",
      "info" : "ExpressionStatement[25761-25816]:ExpressionStatement[26233-26288]"
    }, {
      "left" : "if (replacement != null)",
      "right" : "if (replacement != null)",
      "info" : "IfStatement[25836-25976]:IfStatement[26308-26448]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25861-25976]:Block[26333-26448]"
    }, {
      "left" : "parent.replaceChild(n, replacement);",
      "right" : "parent.replaceChild(n, replacement);",
      "info" : "ExpressionStatement[25873-25909]:ExpressionStatement[26345-26381]"
    }, {
      "left" : "n = replacement;",
      "right" : "n = replacement;",
      "info" : "ExpressionStatement[25920-25936]:ExpressionStatement[26392-26408]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[25947-25966]:ExpressionStatement[26419-26438]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[25986-25995]:ReturnStatement[26458-26467]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[26011-26019]:SwitchCase[26483-26491]"
    }, {
      "left" : "TernaryValue nVal = NodeUtil.getBooleanValue(n);",
      "right" : "TernaryValue nVal = NodeUtil.getBooleanValue(n);",
      "info" : "VariableDeclarationStatement[26064-26112]:VariableDeclarationStatement[26536-26584]"
    }, {
      "left" : "if (nVal != TernaryValue.UNKNOWN)",
      "right" : "if (nVal != TernaryValue.UNKNOWN)",
      "info" : "IfStatement[26121-26339]:IfStatement[26593-26811]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26155-26339]:Block[26627-26811]"
    }, {
      "left" : "boolean result = nVal.toBoolean(true);",
      "right" : "boolean result = nVal.toBoolean(true);",
      "info" : "VariableDeclarationStatement[26167-26205]:VariableDeclarationStatement[26639-26677]"
    }, {
      "left" : "int equivalentResult = result ? 1 : 0;",
      "right" : "int equivalentResult = result ? 1 : 0;",
      "info" : "VariableDeclarationStatement[26216-26254]:VariableDeclarationStatement[26688-26726]"
    }, {
      "left" : "return maybeReplaceChildWithNumber(n, parent, equivalentResult);",
      "right" : "return maybeReplaceChildWithNumber(n, parent, equivalentResult);",
      "info" : "ReturnStatement[26265-26329]:ReturnStatement[26737-26801]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[26396-26405]:ReturnStatement[26868-26877]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[26619-26626]:Modifier[27091-27098]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[26627-26631]:SimpleType[27099-27103]"
    }, {
      "left" : "maybeReplaceChildWithNumber",
      "right" : "maybeReplaceChildWithNumber",
      "info" : "SimpleName[26632-26659]:SimpleName[27104-27131]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[26660-26666]:SingleVariableDeclaration[27132-27138]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[26668-26679]:SingleVariableDeclaration[27140-27151]"
    }, {
      "left" : "int num",
      "right" : "int num",
      "info" : "SingleVariableDeclaration[26681-26688]:SingleVariableDeclaration[27153-27160]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26690-26882]:Block[27162-27354]"
    }, {
      "left" : "Node newNode = Node.newNumber(num);",
      "right" : "Node newNode = Node.newNumber(num);",
      "info" : "VariableDeclarationStatement[26696-26731]:VariableDeclarationStatement[27168-27203]"
    }, {
      "left" : "if (!newNode.isEquivalentTo(n))",
      "right" : "if (!newNode.isEquivalentTo(n))",
      "info" : "IfStatement[26736-26863]:IfStatement[27208-27335]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26768-26863]:Block[27240-27335]"
    }, {
      "left" : "parent.replaceChild(n, newNode);",
      "right" : "parent.replaceChild(n, newNode);",
      "info" : "ExpressionStatement[26776-26808]:ExpressionStatement[27248-27280]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[26815-26834]:ExpressionStatement[27287-27306]"
    }, {
      "left" : "return newNode;",
      "right" : "return newNode;",
      "info" : "ReturnStatement[26842-26857]:ReturnStatement[27314-27329]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[26869-26878]:ReturnStatement[27341-27350]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[27286-27293]:Modifier[27758-27765]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[27294-27298]:SimpleType[27766-27770]"
    }, {
      "left" : "tryFoldStandardConstructors",
      "right" : "tryFoldStandardConstructors",
      "info" : "SimpleName[27299-27326]:SimpleName[27771-27798]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[27327-27333]:SingleVariableDeclaration[27799-27805]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27335-27876]:Block[27807-28348]"
    }, {
      "left" : "Preconditions.checkState(n.getType() == Token.NEW);",
      "right" : "Preconditions.checkState(n.getType() == Token.NEW);",
      "info" : "ExpressionStatement[27341-27392]:ExpressionStatement[27813-27864]"
    }, {
      "left" : "if (isASTNormalized())",
      "right" : "if (isASTNormalized())",
      "info" : "IfStatement[27565-27857]:IfStatement[28037-28329]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27588-27857]:Block[28060-28329]"
    }, {
      "left" : "if (n.getFirstChild().getType() == Token.NAME)",
      "right" : "if (n.getFirstChild().getType() == Token.NAME)",
      "info" : "IfStatement[27596-27851]:IfStatement[28068-28323]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27643-27851]:Block[28115-28323]"
    }, {
      "left" : "String className = n.getFirstChild().getString();",
      "right" : "String className = n.getFirstChild().getString();",
      "info" : "VariableDeclarationStatement[27653-27702]:VariableDeclarationStatement[28125-28174]"
    }, {
      "left" : "if (STANDARD_OBJECT_CONSTRUCTORS.contains(className))",
      "right" : "if (STANDARD_OBJECT_CONSTRUCTORS.contains(className))",
      "info" : "IfStatement[27711-27843]:IfStatement[28183-28315]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27765-27843]:Block[28237-28315]"
    }, {
      "left" : "n.setType(Token.CALL);",
      "right" : "n.setType(Token.CALL);",
      "info" : "ExpressionStatement[27779-27801]:ExpressionStatement[28251-28273]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[27814-27833]:ExpressionStatement[28286-28305]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[27863-27872]:ReturnStatement[28335-28344]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[28040-28047]:Modifier[28512-28519]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[28048-28052]:SimpleType[28520-28524]"
    }, {
      "left" : "tryFoldLiteralConstructor",
      "right" : "tryFoldLiteralConstructor",
      "info" : "SimpleName[28053-28078]:SimpleName[28525-28550]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[28079-28085]:SingleVariableDeclaration[28551-28557]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28087-29796]:Block[28559-30268]"
    }, {
      "left" : "Preconditions.checkArgument(n.getType() == Token.CALL\n        || n.getType() == Token.NEW);",
      "right" : "Preconditions.checkArgument(n.getType() == Token.CALL\n        || n.getType() == Token.NEW);",
      "info" : "ExpressionStatement[28093-28184]:ExpressionStatement[28565-28656]"
    }, {
      "left" : "Node constructorNameNode = n.getFirstChild();",
      "right" : "Node constructorNameNode = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[28190-28235]:VariableDeclarationStatement[28662-28707]"
    }, {
      "left" : "Node newLiteralNode = null;",
      "right" : "Node newLiteralNode = null;",
      "info" : "VariableDeclarationStatement[28241-28268]:VariableDeclarationStatement[28713-28740]"
    }, {
      "left" : "if (isASTNormalized() && Token.NAME == constructorNameNode.getType())",
      "right" : "if (isASTNormalized() && Token.NAME == constructorNameNode.getType())",
      "info" : "IfStatement[28466-29778]:IfStatement[28938-30250]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28536-29778]:Block[29008-30250]"
    }, {
      "left" : "String className = constructorNameNode.getString();",
      "right" : "String className = constructorNameNode.getString();",
      "info" : "VariableDeclarationStatement[28545-28596]:VariableDeclarationStatement[29017-29068]"
    }, {
      "left" : "if (\"RegExp\".equals(className))",
      "right" : "if (\"RegExp\".equals(className))",
      "info" : "IfStatement[28604-29772]:IfStatement[29076-30244]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28636-28743]:Block[29108-29215]"
    }, {
      "left" : "return tryFoldRegularExpressionConstructor(n);",
      "right" : "return tryFoldRegularExpressionConstructor(n);",
      "info" : "ReturnStatement[28689-28735]:ReturnStatement[29161-29207]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28749-29772]:Block[29221-30244]"
    }, {
      "left" : "boolean constructorHasArgs = constructorNameNode.getNext() != null;",
      "right" : "boolean constructorHasArgs = constructorNameNode.getNext() != null;",
      "info" : "VariableDeclarationStatement[28759-28826]:VariableDeclarationStatement[29231-29298]"
    }, {
      "left" : "if (\"Object\".equals(className) && !constructorHasArgs)",
      "right" : "if (\"Object\".equals(className) && !constructorHasArgs)",
      "info" : "IfStatement[28836-29595]:IfStatement[29308-30067]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28891-28989]:Block[29363-29461]"
    }, {
      "left" : "newLiteralNode = new Node(Token.OBJECTLIT);",
      "right" : "newLiteralNode = new Node(Token.OBJECTLIT);",
      "info" : "ExpressionStatement[28936-28979]:ExpressionStatement[29408-29451]"
    }, {
      "left" : "if (\"Array\".equals(className))",
      "right" : "if (\"Array\".equals(className))",
      "info" : "IfStatement[28995-29595]:IfStatement[29467-30067]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29026-29595]:Block[29498-30067]"
    }, {
      "left" : "Node arg0 = constructorNameNode.getNext();",
      "right" : "Node arg0 = constructorNameNode.getNext();",
      "info" : "VariableDeclarationStatement[29100-29142]:VariableDeclarationStatement[29572-29614]"
    }, {
      "left" : "FoldArrayAction action = isSafeToFoldArrayConstructor(arg0);",
      "right" : "FoldArrayAction action = isSafeToFoldArrayConstructor(arg0);",
      "info" : "VariableDeclarationStatement[29153-29213]:VariableDeclarationStatement[29625-29685]"
    }, {
      "left" : "if (action == FoldArrayAction.SAFE_TO_FOLD_WITH_ARGS ||\n              action == FoldArrayAction.SAFE_TO_FOLD_WITHOUT_ARGS)",
      "right" : "if (action == FoldArrayAction.SAFE_TO_FOLD_WITH_ARGS ||\n              action == FoldArrayAction.SAFE_TO_FOLD_WITHOUT_ARGS)",
      "info" : "IfStatement[29225-29585]:IfStatement[29697-30057]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29348-29585]:Block[29820-30057]"
    }, {
      "left" : "newLiteralNode = new Node(Token.ARRAYLIT);",
      "right" : "newLiteralNode = new Node(Token.ARRAYLIT);",
      "info" : "ExpressionStatement[29362-29404]:ExpressionStatement[29834-29876]"
    }, {
      "left" : "n.removeChildren();",
      "right" : "n.removeChildren();",
      "info" : "ExpressionStatement[29417-29436]:ExpressionStatement[29889-29908]"
    }, {
      "left" : "if (action == FoldArrayAction.SAFE_TO_FOLD_WITH_ARGS)",
      "right" : "if (action == FoldArrayAction.SAFE_TO_FOLD_WITH_ARGS)",
      "info" : "IfStatement[29449-29573]:IfStatement[29921-30045]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29503-29573]:Block[29975-30045]"
    }, {
      "left" : "newLiteralNode.addChildrenToFront(arg0);",
      "right" : "newLiteralNode.addChildrenToFront(arg0);",
      "info" : "ExpressionStatement[29519-29559]:ExpressionStatement[29991-30031]"
    }, {
      "left" : "if (newLiteralNode != null)",
      "right" : "if (newLiteralNode != null)",
      "info" : "IfStatement[29605-29764]:IfStatement[30077-30236]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29633-29764]:Block[30105-30236]"
    }, {
      "left" : "n.getParent().replaceChild(n, newLiteralNode);",
      "right" : "n.getParent().replaceChild(n, newLiteralNode);",
      "info" : "ExpressionStatement[29645-29691]:ExpressionStatement[30117-30163]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[29702-29721]:ExpressionStatement[30174-30193]"
    }, {
      "left" : "return newLiteralNode;",
      "right" : "return newLiteralNode;",
      "info" : "ReturnStatement[29732-29754]:ReturnStatement[30204-30226]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[29783-29792]:ReturnStatement[30255-30264]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[30227-30234]:Modifier[30699-30706]"
    }, {
      "left" : "FoldArrayAction",
      "right" : "FoldArrayAction",
      "info" : "SimpleType[30235-30250]:SimpleType[30707-30722]"
    }, {
      "left" : "isSafeToFoldArrayConstructor",
      "right" : "isSafeToFoldArrayConstructor",
      "info" : "SimpleName[30251-30279]:SimpleName[30723-30751]"
    }, {
      "left" : "Node arg",
      "right" : "Node arg",
      "info" : "SingleVariableDeclaration[30280-30288]:SingleVariableDeclaration[30752-30760]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30290-31116]:Block[30762-31588]"
    }, {
      "left" : "FoldArrayAction action = FoldArrayAction.NOT_SAFE_TO_FOLD;",
      "right" : "FoldArrayAction action = FoldArrayAction.NOT_SAFE_TO_FOLD;",
      "info" : "VariableDeclarationStatement[30296-30354]:VariableDeclarationStatement[30768-30826]"
    }, {
      "left" : "if (arg == null)",
      "right" : "if (arg == null)",
      "info" : "IfStatement[30360-31093]:IfStatement[30832-31565]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30377-30442]:Block[30849-30914]"
    }, {
      "left" : "action = FoldArrayAction.SAFE_TO_FOLD_WITHOUT_ARGS;",
      "right" : "action = FoldArrayAction.SAFE_TO_FOLD_WITHOUT_ARGS;",
      "info" : "ExpressionStatement[30385-30436]:ExpressionStatement[30857-30908]"
    }, {
      "left" : "if (arg.getNext() != null)",
      "right" : "if (arg.getNext() != null)",
      "info" : "IfStatement[30448-31093]:IfStatement[30920-31565]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30475-30537]:Block[30947-31009]"
    }, {
      "left" : "action = FoldArrayAction.SAFE_TO_FOLD_WITH_ARGS;",
      "right" : "action = FoldArrayAction.SAFE_TO_FOLD_WITH_ARGS;",
      "info" : "ExpressionStatement[30483-30531]:ExpressionStatement[30955-31003]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30543-31093]:Block[31015-31565]"
    }, {
      "left" : "switch (arg.getType()) {\n        case (Token.STRING):\n          // \"Array('a')\" --> \"['a']\"\n          action = FoldArrayAction.SAFE_TO_FOLD_WITH_ARGS;\n          break;\n        case (Token.NUMBER):\n          // \"Array(0)\" --> \"[]\"\n          if (arg.getDouble() == 0) {\n            action = FoldArrayAction.SAFE_TO_FOLD_WITHOUT_ARGS;\n          }\n          break;\n        case (Token.ARRAYLIT):\n          // \"Array([args])\" --> \"[[args]]\"\n          action = FoldArrayAction.SAFE_TO_FOLD_WITH_ARGS;\n          break;\n        default:\n      }",
      "right" : "switch (arg.getType()) {\n        case (Token.STRING):\n          // \"Array('a')\" --> \"['a']\"\n          action = FoldArrayAction.SAFE_TO_FOLD_WITH_ARGS;\n          break;\n        case (Token.NUMBER):\n          // \"Array(0)\" --> \"[]\"\n          if (arg.getDouble() == 0) {\n            action = FoldArrayAction.SAFE_TO_FOLD_WITHOUT_ARGS;\n          }\n          break;\n        case (Token.ARRAYLIT):\n          // \"Array([args])\" --> \"[[args]]\"\n          action = FoldArrayAction.SAFE_TO_FOLD_WITH_ARGS;\n          break;\n        default:\n      }",
      "info" : "SwitchStatement[30551-31087]:SwitchStatement[31023-31559]"
    }, {
      "left" : "case (Token.STRING):",
      "right" : "case (Token.STRING):",
      "info" : "SwitchCase[30584-30604]:SwitchCase[31056-31076]"
    }, {
      "left" : "action = FoldArrayAction.SAFE_TO_FOLD_WITH_ARGS;",
      "right" : "action = FoldArrayAction.SAFE_TO_FOLD_WITH_ARGS;",
      "info" : "ExpressionStatement[30653-30701]:ExpressionStatement[31125-31173]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[30712-30718]:BreakStatement[31184-31190]"
    }, {
      "left" : "case (Token.NUMBER):",
      "right" : "case (Token.NUMBER):",
      "info" : "SwitchCase[30727-30747]:SwitchCase[31199-31219]"
    }, {
      "left" : "if (arg.getDouble() == 0)",
      "right" : "if (arg.getDouble() == 0)",
      "info" : "IfStatement[30791-30894]:IfStatement[31263-31366]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30817-30894]:Block[31289-31366]"
    }, {
      "left" : "action = FoldArrayAction.SAFE_TO_FOLD_WITHOUT_ARGS;",
      "right" : "action = FoldArrayAction.SAFE_TO_FOLD_WITHOUT_ARGS;",
      "info" : "ExpressionStatement[30831-30882]:ExpressionStatement[31303-31354]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[30905-30911]:BreakStatement[31377-31383]"
    }, {
      "left" : "case (Token.ARRAYLIT):",
      "right" : "case (Token.ARRAYLIT):",
      "info" : "SwitchCase[30920-30942]:SwitchCase[31392-31414]"
    }, {
      "left" : "action = FoldArrayAction.SAFE_TO_FOLD_WITH_ARGS;",
      "right" : "action = FoldArrayAction.SAFE_TO_FOLD_WITH_ARGS;",
      "info" : "ExpressionStatement[30997-31045]:ExpressionStatement[31469-31517]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[31056-31062]:BreakStatement[31528-31534]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[31071-31079]:SwitchCase[31543-31551]"
    }, {
      "left" : "return action;",
      "right" : "return action;",
      "info" : "ReturnStatement[31098-31112]:ReturnStatement[31570-31584]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[31120-31127]:Modifier[31592-31599]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[31128-31132]:SimpleType[31600-31604]"
    }, {
      "left" : "tryFoldRegularExpressionConstructor",
      "right" : "tryFoldRegularExpressionConstructor",
      "info" : "SimpleName[31133-31168]:SimpleName[31605-31640]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[31169-31175]:SingleVariableDeclaration[31641-31647]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31177-33292]:Block[31649-33764]"
    }, {
      "left" : "Node parent = n.getParent();",
      "right" : "Node parent = n.getParent();",
      "info" : "VariableDeclarationStatement[31183-31211]:VariableDeclarationStatement[31655-31683]"
    }, {
      "left" : "Node constructor = n.getFirstChild();",
      "right" : "Node constructor = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[31216-31253]:VariableDeclarationStatement[31688-31725]"
    }, {
      "left" : "Node pattern = constructor.getNext();",
      "right" : "Node pattern = constructor.getNext();",
      "info" : "VariableDeclarationStatement[31258-31295]:VariableDeclarationStatement[31730-31767]"
    }, {
      "left" : "Node flags = null != pattern ? pattern.getNext() : null;",
      "right" : "Node flags = null != pattern ? pattern.getNext() : null;",
      "info" : "VariableDeclarationStatement[31319-31375]:VariableDeclarationStatement[31791-31847]"
    }, {
      "left" : "if (!isASTNormalized())",
      "right" : "if (!isASTNormalized())",
      "info" : "IfStatement[31599-31646]:IfStatement[32071-32118]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31623-31646]:Block[32095-32118]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[31631-31640]:ReturnStatement[32103-32112]"
    }, {
      "left" : "if (null == pattern || (null != flags && null != flags.getNext()))",
      "right" : "if (null == pattern || (null != flags && null != flags.getNext()))",
      "info" : "IfStatement[31652-31781]:IfStatement[32124-32253]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31719-31781]:Block[32191-32253]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[31766-31775]:ReturnStatement[32238-32247]"
    }, {
      "left" : "if (// is pattern folded\n        pattern.getType() == Token.STRING\n        // make sure empty pattern doesn't fold to //\n        && !\"\".equals(pattern.getString())\n\n        // NOTE(nicksantos): Make sure that the regexp isn't longer than\n        // 100 chars, or it blows up the regexp parser in Opera 9.2.\n        && pattern.getString().length() < 100\n\n        && (null == flags || flags.getType() == Token.STRING)\n        // don't escape patterns with unicode escapes since Safari behaves badly\n        // (read can't parse or crashes) on regex literals with unicode escapes\n        && !containsUnicodeEscape(pattern.getString()))",
      "right" : "if (// is pattern folded\n        pattern.getType() == Token.STRING\n        // make sure empty pattern doesn't fold to //\n        && !\"\".equals(pattern.getString())\n\n        // NOTE(nicksantos): Make sure that the regexp isn't longer than\n        // 100 chars, or it blows up the regexp parser in Opera 9.2.\n        && pattern.getString().length() < 100\n\n        && (null == flags || flags.getType() == Token.STRING)\n        // don't escape patterns with unicode escapes since Safari behaves badly\n        // (read can't parse or crashes) on regex literals with unicode escapes\n        && !containsUnicodeEscape(pattern.getString()))",
      "info" : "IfStatement[31787-33273]:IfStatement[32259-33745]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32420-33273]:Block[32892-33745]"
    }, {
      "left" : "pattern = makeForwardSlashBracketSafe(pattern);",
      "right" : "pattern = makeForwardSlashBracketSafe(pattern);",
      "info" : "ExpressionStatement[32580-32627]:ExpressionStatement[33052-33099]"
    }, {
      "left" : "Node regexLiteral;",
      "right" : "Node regexLiteral;",
      "info" : "VariableDeclarationStatement[32635-32653]:VariableDeclarationStatement[33107-33125]"
    }, {
      "left" : "if (null == flags || \"\".equals(flags.getString()))",
      "right" : "if (null == flags || \"\".equals(flags.getString()))",
      "info" : "IfStatement[32660-33169]:IfStatement[33132-33641]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32711-32804]:Block[33183-33276]"
    }, {
      "left" : "regexLiteral = new Node(Token.REGEXP, pattern);",
      "right" : "regexLiteral = new Node(Token.REGEXP, pattern);",
      "info" : "ExpressionStatement[32749-32796]:ExpressionStatement[33221-33268]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32810-33169]:Block[33282-33641]"
    }, {
      "left" : "if (!areValidRegexpFlags(flags.getString()))",
      "right" : "if (!areValidRegexpFlags(flags.getString()))",
      "info" : "IfStatement[32850-32984]:IfStatement[33322-33456]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32895-32984]:Block[33367-33456]"
    }, {
      "left" : "error(INVALID_REGULAR_EXPRESSION_FLAGS, flags);",
      "right" : "error(INVALID_REGULAR_EXPRESSION_FLAGS, flags);",
      "info" : "ExpressionStatement[32907-32954]:ExpressionStatement[33379-33426]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[32965-32974]:ReturnStatement[33437-33446]"
    }, {
      "left" : "if (!areSafeFlagsToFold(flags.getString()))",
      "right" : "if (!areSafeFlagsToFold(flags.getString()))",
      "info" : "IfStatement[32993-33068]:IfStatement[33465-33540]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33037-33068]:Block[33509-33540]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[33049-33058]:ReturnStatement[33521-33530]"
    }, {
      "left" : "n.removeChild(flags);",
      "right" : "n.removeChild(flags);",
      "info" : "ExpressionStatement[33077-33098]:ExpressionStatement[33549-33570]"
    }, {
      "left" : "regexLiteral = new Node(Token.REGEXP, pattern, flags);",
      "right" : "regexLiteral = new Node(Token.REGEXP, pattern, flags);",
      "info" : "ExpressionStatement[33107-33161]:ExpressionStatement[33579-33633]"
    }, {
      "left" : "parent.replaceChild(n, regexLiteral);",
      "right" : "parent.replaceChild(n, regexLiteral);",
      "info" : "ExpressionStatement[33177-33214]:ExpressionStatement[33649-33686]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[33221-33240]:ExpressionStatement[33693-33712]"
    }, {
      "left" : "return regexLiteral;",
      "right" : "return regexLiteral;",
      "info" : "ReturnStatement[33247-33267]:ReturnStatement[33719-33739]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[33279-33288]:ReturnStatement[33751-33760]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[33744-33751]:Modifier[34216-34223]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[33752-33758]:Modifier[34224-34230]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[33759-33766]:PrimitiveType[34231-34238]"
    }, {
      "left" : "areValidRegexpFlags",
      "right" : "areValidRegexpFlags",
      "info" : "SimpleName[33767-33786]:SimpleName[34239-34258]"
    }, {
      "left" : "String flags",
      "right" : "String flags",
      "info" : "SingleVariableDeclaration[33787-33799]:SingleVariableDeclaration[34259-34271]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33801-33859]:Block[34273-34331]"
    }, {
      "left" : "return REGEXP_FLAGS_RE.matcher(flags).matches();",
      "right" : "return REGEXP_FLAGS_RE.matcher(flags).matches();",
      "info" : "ReturnStatement[33807-33855]:ReturnStatement[34279-34327]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[34262-34269]:Modifier[34734-34741]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[34270-34276]:Modifier[34742-34748]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[34277-34284]:PrimitiveType[34749-34756]"
    }, {
      "left" : "areSafeFlagsToFold",
      "right" : "areSafeFlagsToFold",
      "info" : "SimpleName[34285-34303]:SimpleName[34757-34775]"
    }, {
      "left" : "String flags",
      "right" : "String flags",
      "info" : "SingleVariableDeclaration[34304-34316]:SingleVariableDeclaration[34776-34788]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34318-34358]:Block[34790-34830]"
    }, {
      "left" : "return flags.indexOf('g') < 0;",
      "right" : "return flags.indexOf('g') < 0;",
      "info" : "ReturnStatement[34324-34354]:ReturnStatement[34796-34826]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[34448-34455]:Modifier[34920-34927]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[34456-34462]:Modifier[34928-34934]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[34463-34467]:SimpleType[34935-34939]"
    }, {
      "left" : "makeForwardSlashBracketSafe",
      "right" : "makeForwardSlashBracketSafe",
      "info" : "SimpleName[34468-34495]:SimpleName[34940-34967]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[34496-34502]:SingleVariableDeclaration[34968-34974]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34504-35208]:Block[34976-35680]"
    }, {
      "left" : "String s = n.getString();",
      "right" : "String s = n.getString();",
      "info" : "VariableDeclarationStatement[34510-34535]:VariableDeclarationStatement[34982-35007]"
    }, {
      "left" : "StringBuilder sb = null;",
      "right" : "StringBuilder sb = null;",
      "info" : "VariableDeclarationStatement[34582-34606]:VariableDeclarationStatement[35054-35078]"
    }, {
      "left" : "int pos = 0;",
      "right" : "int pos = 0;",
      "info" : "VariableDeclarationStatement[34611-34623]:VariableDeclarationStatement[35083-35095]"
    }, {
      "left" : "for (int i = 0; i < s.length(); ++i)",
      "right" : "for (int i = 0; i < s.length(); ++i)",
      "info" : "ForStatement[34628-34986]:ForStatement[35100-35458]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34665-34986]:Block[35137-35458]"
    }, {
      "left" : "switch (s.charAt(i)) {\n        case '\\\\':  // skip over the next char after a '\\\\'.\n          ++i;\n          break;\n        case '/':  // escape it\n          if (null == sb) { sb = new StringBuilder(s.length() + 16); }\n          sb.append(s, pos, i).append('\\\\');\n          pos = i;\n          break;\n      }",
      "right" : "switch (s.charAt(i)) {\n        case '\\\\':  // skip over the next char after a '\\\\'.\n          ++i;\n          break;\n        case '/':  // escape it\n          if (null == sb) { sb = new StringBuilder(s.length() + 16); }\n          sb.append(s, pos, i).append('\\\\');\n          pos = i;\n          break;\n      }",
      "info" : "SwitchStatement[34673-34980]:SwitchStatement[35145-35452]"
    }, {
      "left" : "case '\\\\':",
      "right" : "case '\\\\':",
      "info" : "SwitchCase[34704-34714]:SwitchCase[35176-35186]"
    }, {
      "left" : "++i;",
      "right" : "++i;",
      "info" : "ExpressionStatement[34767-34771]:ExpressionStatement[35239-35243]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[34782-34788]:BreakStatement[35254-35260]"
    }, {
      "left" : "case '/':",
      "right" : "case '/':",
      "info" : "SwitchCase[34797-34806]:SwitchCase[35269-35278]"
    }, {
      "left" : "if (null == sb)",
      "right" : "if (null == sb)",
      "info" : "IfStatement[34831-34891]:IfStatement[35303-35363]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34847-34891]:Block[35319-35363]"
    }, {
      "left" : "sb = new StringBuilder(s.length() + 16);",
      "right" : "sb = new StringBuilder(s.length() + 16);",
      "info" : "ExpressionStatement[34849-34889]:ExpressionStatement[35321-35361]"
    }, {
      "left" : "sb.append(s, pos, i).append('\\\\');",
      "right" : "sb.append(s, pos, i).append('\\\\');",
      "info" : "ExpressionStatement[34902-34936]:ExpressionStatement[35374-35408]"
    }, {
      "left" : "pos = i;",
      "right" : "pos = i;",
      "info" : "ExpressionStatement[34947-34955]:ExpressionStatement[35419-35427]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[34966-34972]:BreakStatement[35438-35444]"
    }, {
      "left" : "if (null == sb)",
      "right" : "if (null == sb)",
      "info" : "IfStatement[35062-35103]:IfStatement[35534-35575]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35078-35103]:Block[35550-35575]"
    }, {
      "left" : "return n.cloneTree();",
      "right" : "return n.cloneTree();",
      "info" : "ReturnStatement[35080-35101]:ReturnStatement[35552-35573]"
    }, {
      "left" : "sb.append(s, pos, s.length());",
      "right" : "sb.append(s, pos, s.length());",
      "info" : "ExpressionStatement[35109-35139]:ExpressionStatement[35581-35611]"
    }, {
      "left" : "return Node.newString(sb.toString()).copyInformationFrom(n);",
      "right" : "return Node.newString(sb.toString()).copyInformationFrom(n);",
      "info" : "ReturnStatement[35144-35204]:ReturnStatement[35616-35676]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[35357-35363]:Modifier[35829-35835]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[35364-35371]:PrimitiveType[35836-35843]"
    }, {
      "left" : "containsUnicodeEscape",
      "right" : "containsUnicodeEscape",
      "info" : "SimpleName[35372-35393]:SimpleName[35844-35865]"
    }, {
      "left" : "String s",
      "right" : "String s",
      "info" : "SingleVariableDeclaration[35394-35402]:SingleVariableDeclaration[35866-35874]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35404-35818]:Block[35876-36290]"
    }, {
      "left" : "String esc = CodeGenerator.regexpEscape(s);",
      "right" : "String esc = CodeGenerator.regexpEscape(s);",
      "info" : "VariableDeclarationStatement[35410-35453]:VariableDeclarationStatement[35882-35925]"
    }, {
      "left" : "for (int i = -1; (i = esc.indexOf(\"\\\\u\", i + 1)) >= 0)",
      "right" : "for (int i = -1; (i = esc.indexOf(\"\\\\u\", i + 1)) >= 0)",
      "info" : "ForStatement[35458-35796]:ForStatement[35930-36268]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35514-35796]:Block[35986-36268]"
    }, {
      "left" : "int nSlashes = 0;",
      "right" : "int nSlashes = 0;",
      "info" : "VariableDeclarationStatement[35522-35539]:VariableDeclarationStatement[35994-36011]"
    }, {
      "left" : "while (i - nSlashes > 0 && '\\\\' == esc.charAt(i - nSlashes - 1))",
      "right" : "while (i - nSlashes > 0 && '\\\\' == esc.charAt(i - nSlashes - 1))",
      "info" : "WhileStatement[35546-35640]:WhileStatement[36018-36112]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35611-35640]:Block[36083-36112]"
    }, {
      "left" : "++nSlashes;",
      "right" : "++nSlashes;",
      "info" : "ExpressionStatement[35621-35632]:ExpressionStatement[36093-36104]"
    }, {
      "left" : "if (0 == (nSlashes & 1))",
      "right" : "if (0 == (nSlashes & 1))",
      "info" : "IfStatement[35749-35790]:IfStatement[36221-36262]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35774-35790]:Block[36246-36262]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[35776-35788]:ReturnStatement[36248-36260]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[35801-35814]:ReturnStatement[36273-36286]"
    } ]
  },
  "interFileMappings" : { }
}