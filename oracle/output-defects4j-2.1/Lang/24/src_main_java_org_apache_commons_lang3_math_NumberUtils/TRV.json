{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "public static final Long LONG_ZERO = new Long(0L);",
      "right" : "public static final Long LONG_ZERO = new Long(0L);",
      "info" : "FieldDeclaration[1486-1580]:FieldDeclaration[1486-1580]"
    }, {
      "left" : "public static final Long LONG_ONE = new Long(1L);",
      "right" : "public static final Long LONG_ONE = new Long(1L);",
      "info" : "FieldDeclaration[1585-1677]:FieldDeclaration[1585-1677]"
    }, {
      "left" : "public static final Long LONG_MINUS_ONE = new Long(-1L);",
      "right" : "public static final Long LONG_MINUS_ONE = new Long(-1L);",
      "info" : "FieldDeclaration[1682-1787]:FieldDeclaration[1682-1787]"
    }, {
      "left" : "public static final Integer INTEGER_ZERO = new Integer(0);",
      "right" : "public static final Integer INTEGER_ZERO = new Integer(0);",
      "info" : "FieldDeclaration[1792-1897]:FieldDeclaration[1792-1897]"
    }, {
      "left" : "public static final Integer INTEGER_ONE = new Integer(1);",
      "right" : "public static final Integer INTEGER_ONE = new Integer(1);",
      "info" : "FieldDeclaration[1902-2005]:FieldDeclaration[1902-2005]"
    }, {
      "left" : "public static final Integer INTEGER_MINUS_ONE = new Integer(-1);",
      "right" : "public static final Integer INTEGER_MINUS_ONE = new Integer(-1);",
      "info" : "FieldDeclaration[2010-2126]:FieldDeclaration[2010-2126]"
    }, {
      "left" : "public static final Short SHORT_ZERO = new Short((short) 0);",
      "right" : "public static final Short SHORT_ZERO = new Short((short) 0);",
      "info" : "FieldDeclaration[2131-2236]:FieldDeclaration[2131-2236]"
    }, {
      "left" : "public static final Short SHORT_ONE = new Short((short) 1);",
      "right" : "public static final Short SHORT_ONE = new Short((short) 1);",
      "info" : "FieldDeclaration[2241-2344]:FieldDeclaration[2241-2344]"
    }, {
      "left" : "public static final Short SHORT_MINUS_ONE = new Short((short) -1);",
      "right" : "public static final Short SHORT_MINUS_ONE = new Short((short) -1);",
      "info" : "FieldDeclaration[2349-2465]:FieldDeclaration[2349-2465]"
    }, {
      "left" : "public static final Byte BYTE_ZERO = Byte.valueOf((byte) 0);",
      "right" : "public static final Byte BYTE_ZERO = Byte.valueOf((byte) 0);",
      "info" : "FieldDeclaration[2470-2574]:FieldDeclaration[2470-2574]"
    }, {
      "left" : "public static final Byte BYTE_ONE = Byte.valueOf((byte) 1);",
      "right" : "public static final Byte BYTE_ONE = Byte.valueOf((byte) 1);",
      "info" : "FieldDeclaration[2579-2681]:FieldDeclaration[2579-2681]"
    }, {
      "left" : "public static final Byte BYTE_MINUS_ONE = Byte.valueOf((byte) -1);",
      "right" : "public static final Byte BYTE_MINUS_ONE = Byte.valueOf((byte) -1);",
      "info" : "FieldDeclaration[2686-2801]:FieldDeclaration[2686-2801]"
    }, {
      "left" : "public static final Double DOUBLE_ZERO = new Double(0.0d);",
      "right" : "public static final Double DOUBLE_ZERO = new Double(0.0d);",
      "info" : "FieldDeclaration[2806-2910]:FieldDeclaration[2806-2910]"
    }, {
      "left" : "public static final Double DOUBLE_ONE = new Double(1.0d);",
      "right" : "public static final Double DOUBLE_ONE = new Double(1.0d);",
      "info" : "FieldDeclaration[2915-3017]:FieldDeclaration[2915-3017]"
    }, {
      "left" : "public static final Double DOUBLE_MINUS_ONE = new Double(-1.0d);",
      "right" : "public static final Double DOUBLE_MINUS_ONE = new Double(-1.0d);",
      "info" : "FieldDeclaration[3022-3137]:FieldDeclaration[3022-3137]"
    }, {
      "left" : "public static final Float FLOAT_ZERO = new Float(0.0f);",
      "right" : "public static final Float FLOAT_ZERO = new Float(0.0f);",
      "info" : "FieldDeclaration[3142-3242]:FieldDeclaration[3142-3242]"
    }, {
      "left" : "public static final Float FLOAT_ONE = new Float(1.0f);",
      "right" : "public static final Float FLOAT_ONE = new Float(1.0f);",
      "info" : "FieldDeclaration[3247-3345]:FieldDeclaration[3247-3345]"
    }, {
      "left" : "public static final Float FLOAT_MINUS_ONE = new Float(-1.0f);",
      "right" : "public static final Float FLOAT_MINUS_ONE = new Float(-1.0f);",
      "info" : "FieldDeclaration[3350-3461]:FieldDeclaration[3350-3461]"
    }, {
      "left" : "public NumberUtils()",
      "right" : "public NumberUtils()",
      "info" : "MethodDeclaration[3467-3826]:MethodDeclaration[3467-3826]"
    }, {
      "left" : "public static int toInt(String str)",
      "right" : "public static int toInt(String str)",
      "info" : "MethodDeclaration[3910-4538]:MethodDeclaration[3910-4538]"
    }, {
      "left" : "public static int toInt(String str, int defaultValue)",
      "right" : "public static int toInt(String str, int defaultValue)",
      "info" : "MethodDeclaration[4544-5413]:MethodDeclaration[4544-5413]"
    }, {
      "left" : "public static long toLong(String str)",
      "right" : "public static long toLong(String str)",
      "info" : "MethodDeclaration[5419-6055]:MethodDeclaration[5419-6055]"
    }, {
      "left" : "public static long toLong(String str, long defaultValue)",
      "right" : "public static long toLong(String str, long defaultValue)",
      "info" : "MethodDeclaration[6061-6942]:MethodDeclaration[6061-6942]"
    }, {
      "left" : "public static float toFloat(String str)",
      "right" : "public static float toFloat(String str)",
      "info" : "MethodDeclaration[6948-7645]:MethodDeclaration[6948-7645]"
    }, {
      "left" : "public static float toFloat(String str, float defaultValue)",
      "right" : "public static float toFloat(String str, float defaultValue)",
      "info" : "MethodDeclaration[7651-8593]:MethodDeclaration[7651-8593]"
    }, {
      "left" : "public static double toDouble(String str)",
      "right" : "public static double toDouble(String str)",
      "info" : "MethodDeclaration[8599-9304]:MethodDeclaration[8599-9304]"
    }, {
      "left" : "public static double toDouble(String str, double defaultValue)",
      "right" : "public static double toDouble(String str, double defaultValue)",
      "info" : "MethodDeclaration[9310-10257]:MethodDeclaration[9310-10257]"
    }, {
      "left" : "public static byte toByte(String str)",
      "right" : "public static byte toByte(String str)",
      "info" : "MethodDeclaration[10343-10985]:MethodDeclaration[10343-10985]"
    }, {
      "left" : "public static byte toByte(String str, byte defaultValue)",
      "right" : "public static byte toByte(String str, byte defaultValue)",
      "info" : "MethodDeclaration[10991-11865]:MethodDeclaration[10991-11865]"
    }, {
      "left" : "public static short toShort(String str)",
      "right" : "public static short toShort(String str)",
      "info" : "MethodDeclaration[11871-12522]:MethodDeclaration[11871-12522]"
    }, {
      "left" : "public static short toShort(String str, short defaultValue)",
      "right" : "public static short toShort(String str, short defaultValue)",
      "info" : "MethodDeclaration[12528-13413]:MethodDeclaration[12528-13413]"
    }, {
      "left" : "public static Number createNumber(String str) throws NumberFormatException",
      "right" : "public static Number createNumber(String str) throws NumberFormatException",
      "info" : "MethodDeclaration[14658-21872]:MethodDeclaration[14658-21872]"
    }, {
      "left" : "private static boolean isAllZeros(String str)",
      "right" : "private static boolean isAllZeros(String str)",
      "info" : "MethodDeclaration[21878-22440]:MethodDeclaration[21878-22440]"
    }, {
      "left" : "public static Float createFloat(String str)",
      "right" : "public static Float createFloat(String str)",
      "info" : "MethodDeclaration[22524-23027]:MethodDeclaration[22524-23027]"
    }, {
      "left" : "public static Double createDouble(String str)",
      "right" : "public static Double createDouble(String str)",
      "info" : "MethodDeclaration[23033-23541]:MethodDeclaration[23033-23541]"
    }, {
      "left" : "public static Integer createInteger(String str)",
      "right" : "public static Integer createInteger(String str)",
      "info" : "MethodDeclaration[23547-24169]:MethodDeclaration[23547-24169]"
    }, {
      "left" : "public static Long createLong(String str)",
      "right" : "public static Long createLong(String str)",
      "info" : "MethodDeclaration[24175-24673]:MethodDeclaration[24175-24673]"
    }, {
      "left" : "public static BigInteger createBigInteger(String str)",
      "right" : "public static BigInteger createBigInteger(String str)",
      "info" : "MethodDeclaration[24679-25203]:MethodDeclaration[24679-25203]"
    }, {
      "left" : "public static BigDecimal createBigDecimal(String str)",
      "right" : "public static BigDecimal createBigDecimal(String str)",
      "info" : "MethodDeclaration[25209-25943]:MethodDeclaration[25209-25943]"
    }, {
      "left" : "public static long min(long[] array)",
      "right" : "public static long min(long[] array)",
      "info" : "MethodDeclaration[26044-26911]:MethodDeclaration[26044-26911]"
    }, {
      "left" : "public static int min(int[] array)",
      "right" : "public static int min(int[] array)",
      "info" : "MethodDeclaration[26917-27781]:MethodDeclaration[26917-27781]"
    }, {
      "left" : "public static short min(short[] array)",
      "right" : "public static short min(short[] array)",
      "info" : "MethodDeclaration[27787-28657]:MethodDeclaration[27787-28657]"
    }, {
      "left" : "public static byte min(byte[] array)",
      "right" : "public static byte min(byte[] array)",
      "info" : "MethodDeclaration[28663-29530]:MethodDeclaration[28663-29530]"
    }, {
      "left" : "public static double min(double[] array)",
      "right" : "public static double min(double[] array)",
      "info" : "MethodDeclaration[29537-30613]:MethodDeclaration[29537-30613]"
    }, {
      "left" : "public static float min(float[] array)",
      "right" : "public static float min(float[] array)",
      "info" : "MethodDeclaration[30619-31689]:MethodDeclaration[30619-31689]"
    }, {
      "left" : "public static long max(long[] array)",
      "right" : "public static long max(long[] array)",
      "info" : "MethodDeclaration[31790-32649]:MethodDeclaration[31790-32649]"
    }, {
      "left" : "public static int max(int[] array)",
      "right" : "public static int max(int[] array)",
      "info" : "MethodDeclaration[32655-33519]:MethodDeclaration[32655-33519]"
    }, {
      "left" : "public static short max(short[] array)",
      "right" : "public static short max(short[] array)",
      "info" : "MethodDeclaration[33525-34395]:MethodDeclaration[33525-34395]"
    }, {
      "left" : "public static byte max(byte[] array)",
      "right" : "public static byte max(byte[] array)",
      "info" : "MethodDeclaration[34401-35268]:MethodDeclaration[34401-35268]"
    }, {
      "left" : "public static double max(double[] array)",
      "right" : "public static double max(double[] array)",
      "info" : "MethodDeclaration[35274-36349]:MethodDeclaration[35274-36349]"
    }, {
      "left" : "public static float max(float[] array)",
      "right" : "public static float max(float[] array)",
      "info" : "MethodDeclaration[36355-37417]:MethodDeclaration[36355-37417]"
    }, {
      "left" : "public static long min(long a, long b, long c)",
      "right" : "public static long min(long a, long b, long c)",
      "info" : "MethodDeclaration[37525-37905]:MethodDeclaration[37525-37905]"
    }, {
      "left" : "public static int min(int a, int b, int c)",
      "right" : "public static int min(int a, int b, int c)",
      "info" : "MethodDeclaration[37911-38286]:MethodDeclaration[37911-38286]"
    }, {
      "left" : "public static short min(short a, short b, short c)",
      "right" : "public static short min(short a, short b, short c)",
      "info" : "MethodDeclaration[38292-38677]:MethodDeclaration[38292-38677]"
    }, {
      "left" : "public static byte min(byte a, byte b, byte c)",
      "right" : "public static byte min(byte a, byte b, byte c)",
      "info" : "MethodDeclaration[38683-39063]:MethodDeclaration[38683-39063]"
    }, {
      "left" : "public static double min(double a, double b, double c)",
      "right" : "public static double min(double a, double b, double c)",
      "info" : "MethodDeclaration[39069-39611]:MethodDeclaration[39069-39611]"
    }, {
      "left" : "public static float min(float a, float b, float c)",
      "right" : "public static float min(float a, float b, float c)",
      "info" : "MethodDeclaration[39617-40150]:MethodDeclaration[39617-40150]"
    }, {
      "left" : "public static long max(long a, long b, long c)",
      "right" : "public static long max(long a, long b, long c)",
      "info" : "MethodDeclaration[40253-40632]:MethodDeclaration[40253-40632]"
    }, {
      "left" : "public static int max(int a, int b, int c)",
      "right" : "public static int max(int a, int b, int c)",
      "info" : "MethodDeclaration[40638-41012]:MethodDeclaration[40638-41012]"
    }, {
      "left" : "public static short max(short a, short b, short c)",
      "right" : "public static short max(short a, short b, short c)",
      "info" : "MethodDeclaration[41018-41402]:MethodDeclaration[41018-41402]"
    }, {
      "left" : "public static byte max(byte a, byte b, byte c)",
      "right" : "public static byte max(byte a, byte b, byte c)",
      "info" : "MethodDeclaration[41408-41787]:MethodDeclaration[41408-41787]"
    }, {
      "left" : "public static double max(double a, double b, double c)",
      "right" : "public static double max(double a, double b, double c)",
      "info" : "MethodDeclaration[41793-42333]:MethodDeclaration[41793-42333]"
    }, {
      "left" : "public static float max(float a, float b, float c)",
      "right" : "public static float max(float a, float b, float c)",
      "info" : "MethodDeclaration[42339-42871]:MethodDeclaration[42339-42871]"
    }, {
      "left" : "public static boolean isDigits(String str)",
      "right" : "public static boolean isDigits(String str)",
      "info" : "MethodDeclaration[42955-43590]:MethodDeclaration[42955-43590]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3802-3826]:Block[3802-3826]"
    }, {
      "left" : "super();",
      "right" : "super();",
      "info" : "SuperConstructorInvocation[3812-3820]:SuperConstructorInvocation[3812-3820]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4501-4538]:Block[4501-4538]"
    }, {
      "left" : "return toInt(str, 0);",
      "right" : "return toInt(str, 0);",
      "info" : "ReturnStatement[4511-4532]:ReturnStatement[4511-4532]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5192-5413]:Block[5192-5413]"
    }, {
      "left" : "if(str == null)",
      "right" : "if(str == null)",
      "info" : "IfStatement[5202-5262]:IfStatement[5202-5262]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5218-5262]:Block[5218-5262]"
    }, {
      "left" : "return defaultValue;",
      "right" : "return defaultValue;",
      "info" : "ReturnStatement[5232-5252]:ReturnStatement[5232-5252]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[5271-5407]:TryStatement[5271-5407]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5275-5328]:Block[5275-5328]"
    }, {
      "left" : "return Integer.parseInt(str);",
      "right" : "return Integer.parseInt(str);",
      "info" : "ReturnStatement[5289-5318]:ReturnStatement[5289-5318]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5363-5407]:Block[5363-5407]"
    }, {
      "left" : "return defaultValue;",
      "right" : "return defaultValue;",
      "info" : "ReturnStatement[5377-5397]:ReturnStatement[5377-5397]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6016-6055]:Block[6016-6055]"
    }, {
      "left" : "return toLong(str, 0L);",
      "right" : "return toLong(str, 0L);",
      "info" : "ReturnStatement[6026-6049]:ReturnStatement[6026-6049]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6722-6942]:Block[6722-6942]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[6732-6793]:IfStatement[6732-6793]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6749-6793]:Block[6749-6793]"
    }, {
      "left" : "return defaultValue;",
      "right" : "return defaultValue;",
      "info" : "ReturnStatement[6763-6783]:ReturnStatement[6763-6783]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[6802-6936]:TryStatement[6802-6936]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6806-6857]:Block[6806-6857]"
    }, {
      "left" : "return Long.parseLong(str);",
      "right" : "return Long.parseLong(str);",
      "info" : "ReturnStatement[6820-6847]:ReturnStatement[6820-6847]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6892-6936]:Block[6892-6936]"
    }, {
      "left" : "return defaultValue;",
      "right" : "return defaultValue;",
      "info" : "ReturnStatement[6906-6926]:ReturnStatement[6906-6926]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7603-7645]:Block[7603-7645]"
    }, {
      "left" : "return toFloat(str, 0.0f);",
      "right" : "return toFloat(str, 0.0f);",
      "info" : "ReturnStatement[7613-7639]:ReturnStatement[7613-7639]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8382-8593]:Block[8382-8593]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[8390-8447]:IfStatement[8390-8447]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8407-8447]:Block[8407-8447]"
    }, {
      "left" : "return defaultValue;",
      "right" : "return defaultValue;",
      "info" : "ReturnStatement[8419-8439]:ReturnStatement[8419-8439]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[8459-8587]:TryStatement[8459-8587]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8463-8512]:Block[8463-8512]"
    }, {
      "left" : "return Float.parseFloat(str);",
      "right" : "return Float.parseFloat(str);",
      "info" : "ReturnStatement[8475-8504]:ReturnStatement[8475-8504]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8547-8587]:Block[8547-8587]"
    }, {
      "left" : "return defaultValue;",
      "right" : "return defaultValue;",
      "info" : "ReturnStatement[8559-8579]:ReturnStatement[8559-8579]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9261-9304]:Block[9261-9304]"
    }, {
      "left" : "return toDouble(str, 0.0d);",
      "right" : "return toDouble(str, 0.0d);",
      "info" : "ReturnStatement[9271-9298]:ReturnStatement[9271-9298]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10049-10257]:Block[10049-10257]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[10057-10114]:IfStatement[10057-10114]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10074-10114]:Block[10074-10114]"
    }, {
      "left" : "return defaultValue;",
      "right" : "return defaultValue;",
      "info" : "ReturnStatement[10086-10106]:ReturnStatement[10086-10106]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[10121-10251]:TryStatement[10121-10251]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10125-10176]:Block[10125-10176]"
    }, {
      "left" : "return Double.parseDouble(str);",
      "right" : "return Double.parseDouble(str);",
      "info" : "ReturnStatement[10137-10168]:ReturnStatement[10137-10168]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10211-10251]:Block[10211-10251]"
    }, {
      "left" : "return defaultValue;",
      "right" : "return defaultValue;",
      "info" : "ReturnStatement[10223-10243]:ReturnStatement[10223-10243]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10940-10985]:Block[10940-10985]"
    }, {
      "left" : "return toByte(str, (byte) 0);",
      "right" : "return toByte(str, (byte) 0);",
      "info" : "ReturnStatement[10950-10979]:ReturnStatement[10950-10979]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11646-11865]:Block[11646-11865]"
    }, {
      "left" : "if(str == null)",
      "right" : "if(str == null)",
      "info" : "IfStatement[11656-11716]:IfStatement[11656-11716]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11672-11716]:Block[11672-11716]"
    }, {
      "left" : "return defaultValue;",
      "right" : "return defaultValue;",
      "info" : "ReturnStatement[11686-11706]:ReturnStatement[11686-11706]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[11725-11859]:TryStatement[11725-11859]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11729-11780]:Block[11729-11780]"
    }, {
      "left" : "return Byte.parseByte(str);",
      "right" : "return Byte.parseByte(str);",
      "info" : "ReturnStatement[11743-11770]:ReturnStatement[11743-11770]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11815-11859]:Block[11815-11859]"
    }, {
      "left" : "return defaultValue;",
      "right" : "return defaultValue;",
      "info" : "ReturnStatement[11829-11849]:ReturnStatement[11829-11849]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12475-12522]:Block[12475-12522]"
    }, {
      "left" : "return toShort(str, (short) 0);",
      "right" : "return toShort(str, (short) 0);",
      "info" : "ReturnStatement[12485-12516]:ReturnStatement[12485-12516]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13192-13413]:Block[13192-13413]"
    }, {
      "left" : "if(str == null)",
      "right" : "if(str == null)",
      "info" : "IfStatement[13202-13262]:IfStatement[13202-13262]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13218-13262]:Block[13218-13262]"
    }, {
      "left" : "return defaultValue;",
      "right" : "return defaultValue;",
      "info" : "ReturnStatement[13232-13252]:ReturnStatement[13232-13252]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[13271-13407]:TryStatement[13271-13407]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13275-13328]:Block[13275-13328]"
    }, {
      "left" : "return Short.parseShort(str);",
      "right" : "return Short.parseShort(str);",
      "info" : "ReturnStatement[13289-13318]:ReturnStatement[13289-13318]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13363-13407]:Block[13363-13407]"
    }, {
      "left" : "return defaultValue;",
      "right" : "return defaultValue;",
      "info" : "ReturnStatement[13377-13397]:ReturnStatement[13377-13397]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15994-21872]:Block[15994-21872]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[16004-16057]:IfStatement[16004-16057]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16021-16057]:Block[16021-16057]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[16035-16047]:ReturnStatement[16035-16047]"
    }, {
      "left" : "if (StringUtils.isBlank(str))",
      "right" : "if (StringUtils.isBlank(str))",
      "info" : "IfStatement[16066-16192]:IfStatement[16066-16192]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16096-16192]:Block[16096-16192]"
    }, {
      "left" : "throw new NumberFormatException(\"A blank string is not a valid number\");",
      "right" : "throw new NumberFormatException(\"A blank string is not a valid number\");",
      "info" : "ThrowStatement[16110-16182]:ThrowStatement[16110-16182]"
    }, {
      "left" : "if (str.startsWith(\"--\"))",
      "right" : "if (str.startsWith(\"--\"))",
      "info" : "IfStatement[16203-16512]:IfStatement[16203-16512]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16229-16512]:Block[16229-16512]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[16490-16502]:ReturnStatement[16490-16502]"
    }, {
      "left" : "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\"))",
      "right" : "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\"))",
      "info" : "IfStatement[16521-16622]:IfStatement[16521-16622]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16572-16622]:Block[16572-16622]"
    }, {
      "left" : "return createInteger(str);",
      "right" : "return createInteger(str);",
      "info" : "ReturnStatement[16586-16612]:ReturnStatement[16586-16612]"
    }, {
      "left" : "char lastChar = str.charAt(str.length() - 1);",
      "right" : "char lastChar = str.charAt(str.length() - 1);",
      "info" : "VariableDeclarationStatement[16634-16679]:VariableDeclarationStatement[16634-16679]"
    }, {
      "left" : "String mant;",
      "right" : "String mant;",
      "info" : "VariableDeclarationStatement[16688-16700]:VariableDeclarationStatement[16688-16700]"
    }, {
      "left" : "String dec;",
      "right" : "String dec;",
      "info" : "VariableDeclarationStatement[16709-16720]:VariableDeclarationStatement[16709-16720]"
    }, {
      "left" : "String exp;",
      "right" : "String exp;",
      "info" : "VariableDeclarationStatement[16729-16740]:VariableDeclarationStatement[16729-16740]"
    }, {
      "left" : "int decPos = str.indexOf('.');",
      "right" : "int decPos = str.indexOf('.');",
      "info" : "VariableDeclarationStatement[16749-16779]:VariableDeclarationStatement[16749-16779]"
    }, {
      "left" : "int expPos = str.indexOf('e') + str.indexOf('E') + 1;",
      "right" : "int expPos = str.indexOf('e') + str.indexOf('E') + 1;",
      "info" : "VariableDeclarationStatement[16788-16841]:VariableDeclarationStatement[16788-16841]"
    }, {
      "left" : "if (decPos > -1)",
      "right" : "if (decPos > -1)",
      "info" : "IfStatement[16851-17598]:IfStatement[16851-17598]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16868-17265]:Block[16868-17265]"
    }, {
      "left" : "if (expPos > -1)",
      "right" : "if (expPos > -1)",
      "info" : "IfStatement[16883-17210]:IfStatement[16883-17210]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16900-17140]:Block[16900-17140]"
    }, {
      "left" : "if (expPos < decPos || expPos > str.length())",
      "right" : "if (expPos < decPos || expPos > str.length())",
      "info" : "IfStatement[16918-17069]:IfStatement[16918-17069]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16964-17069]:Block[16964-17069]"
    }, {
      "left" : "throw new NumberFormatException(str + \" is not a valid number.\");",
      "right" : "throw new NumberFormatException(str + \" is not a valid number.\");",
      "info" : "ThrowStatement[16986-17051]:ThrowStatement[16986-17051]"
    }, {
      "left" : "dec = str.substring(decPos + 1, expPos);",
      "right" : "dec = str.substring(decPos + 1, expPos);",
      "info" : "ExpressionStatement[17086-17126]:ExpressionStatement[17086-17126]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17146-17210]:Block[17146-17210]"
    }, {
      "left" : "dec = str.substring(decPos + 1);",
      "right" : "dec = str.substring(decPos + 1);",
      "info" : "ExpressionStatement[17164-17196]:ExpressionStatement[17164-17196]"
    }, {
      "left" : "mant = str.substring(0, decPos);",
      "right" : "mant = str.substring(0, decPos);",
      "info" : "ExpressionStatement[17223-17255]:ExpressionStatement[17223-17255]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17271-17598]:Block[17271-17598]"
    }, {
      "left" : "if (expPos > -1)",
      "right" : "if (expPos > -1)",
      "info" : "IfStatement[17285-17564]:IfStatement[17285-17564]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17302-17515]:Block[17302-17515]"
    }, {
      "left" : "if (expPos > str.length())",
      "right" : "if (expPos > str.length())",
      "info" : "IfStatement[17320-17452]:IfStatement[17320-17452]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17347-17452]:Block[17347-17452]"
    }, {
      "left" : "throw new NumberFormatException(str + \" is not a valid number.\");",
      "right" : "throw new NumberFormatException(str + \" is not a valid number.\");",
      "info" : "ThrowStatement[17369-17434]:ThrowStatement[17369-17434]"
    }, {
      "left" : "mant = str.substring(0, expPos);",
      "right" : "mant = str.substring(0, expPos);",
      "info" : "ExpressionStatement[17469-17501]:ExpressionStatement[17469-17501]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17521-17564]:Block[17521-17564]"
    }, {
      "left" : "mant = str;",
      "right" : "mant = str;",
      "info" : "ExpressionStatement[17539-17550]:ExpressionStatement[17539-17550]"
    }, {
      "left" : "dec = null;",
      "right" : "dec = null;",
      "info" : "ExpressionStatement[17577-17588]:ExpressionStatement[17577-17588]"
    }, {
      "left" : "if (!Character.isDigit(lastChar) && lastChar != '.')",
      "right" : "if (!Character.isDigit(lastChar) && lastChar != '.')",
      "info" : "IfStatement[17607-21866]:IfStatement[17607-21866]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17660-20171]:Block[17660-20171]"
    }, {
      "left" : "if (expPos > -1 && expPos < str.length() - 1)",
      "right" : "if (expPos > -1 && expPos < str.length() - 1)",
      "info" : "IfStatement[17674-17851]:IfStatement[17674-17851]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17720-17802]:Block[17720-17802]"
    }, {
      "left" : "exp = str.substring(expPos + 1, str.length() - 1);",
      "right" : "exp = str.substring(expPos + 1, str.length() - 1);",
      "info" : "ExpressionStatement[17738-17788]:ExpressionStatement[17738-17788]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17808-17851]:Block[17808-17851]"
    }, {
      "left" : "exp = null;",
      "right" : "exp = null;",
      "info" : "ExpressionStatement[17826-17837]:ExpressionStatement[17826-17837]"
    }, {
      "left" : "String numeric = str.substring(0, str.length() - 1);",
      "right" : "String numeric = str.substring(0, str.length() - 1);",
      "info" : "VariableDeclarationStatement[17907-17959]:VariableDeclarationStatement[17907-17959]"
    }, {
      "left" : "boolean allZeros = isAllZeros(mant) && isAllZeros(exp);",
      "right" : "boolean allZeros = isAllZeros(mant) && isAllZeros(exp);",
      "info" : "VariableDeclarationStatement[17972-18027]:VariableDeclarationStatement[17972-18027]"
    }, {
      "left" : "switch (lastChar) {\n                case 'l' :\n                case 'L' :\n                    if (dec == null\n                        && exp == null\n                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {\n                        try {\n                            return createLong(numeric);\n                        } catch (NumberFormatException nfe) {\n                            //Too big for a long\n                        }\n                        return createBigInteger(numeric);\n\n                    }\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                case 'f' :\n                case 'F' :\n                    try {\n                        Float f = NumberUtils.createFloat(numeric);\n                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                            //If it's too big for a float or the float value = 0 and the string\n                            //has non-zeros in it, then float does not have the precision we want\n                            return f;\n                        }\n\n                    } catch (NumberFormatException nfe) {\n                        // ignore the bad number\n                    }\n                    //$FALL-THROUGH$\n                case 'd' :\n                case 'D' :\n                    try {\n                        Double d = NumberUtils.createDouble(numeric);\n                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\n                            return d;\n                        }\n                    } catch (NumberFormatException nfe) {\n                        // ignore the bad number\n                    }\n                    try {\n                        return createBigDecimal(numeric);\n                    } catch (NumberFormatException e) {\n                        // ignore the bad number\n                    }\n                    //$FALL-THROUGH$\n                default :\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n\n            }",
      "right" : "switch (lastChar) {\n                case 'l' :\n                case 'L' :\n                    if (dec == null\n                        && exp == null\n                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {\n                        try {\n                            return createLong(numeric);\n                        } catch (NumberFormatException nfe) {\n                            //Too big for a long\n                        }\n                        return createBigInteger(numeric);\n\n                    }\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                case 'f' :\n                case 'F' :\n                    try {\n                        Float f = NumberUtils.createFloat(numeric);\n                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                            //If it's too big for a float or the float value = 0 and the string\n                            //has non-zeros in it, then float does not have the precision we want\n                            return f;\n                        }\n\n                    } catch (NumberFormatException nfe) {\n                        // ignore the bad number\n                    }\n                    //$FALL-THROUGH$\n                case 'd' :\n                case 'D' :\n                    try {\n                        Double d = NumberUtils.createDouble(numeric);\n                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\n                            return d;\n                        }\n                    } catch (NumberFormatException nfe) {\n                        // ignore the bad number\n                    }\n                    try {\n                        return createBigDecimal(numeric);\n                    } catch (NumberFormatException e) {\n                        // ignore the bad number\n                    }\n                    //$FALL-THROUGH$\n                default :\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n\n            }",
      "info" : "SwitchStatement[18040-20161]:SwitchStatement[18040-20161]"
    }, {
      "left" : "case 'l' :",
      "right" : "case 'l' :",
      "info" : "SwitchCase[18076-18086]:SwitchCase[18076-18086]"
    }, {
      "left" : "case 'L' :",
      "right" : "case 'L' :",
      "info" : "SwitchCase[18103-18113]:SwitchCase[18103-18113]"
    }, {
      "left" : "if (dec == null\n                        && exp == null\n                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric)))",
      "right" : "if (dec == null\n                        && exp == null\n                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric)))",
      "info" : "IfStatement[18134-18604]:IfStatement[18134-18604]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18299-18604]:Block[18299-18604]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[18325-18523]:TryStatement[18325-18523]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18329-18412]:Block[18329-18412]"
    }, {
      "left" : "return createLong(numeric);",
      "right" : "return createLong(numeric);",
      "info" : "ReturnStatement[18359-18386]:ReturnStatement[18359-18386]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18447-18523]:Block[18447-18523]"
    }, {
      "left" : "return createBigInteger(numeric);",
      "right" : "return createBigInteger(numeric);",
      "info" : "ReturnStatement[18548-18581]:ReturnStatement[18548-18581]"
    }, {
      "left" : "throw new NumberFormatException(str + \" is not a valid number.\");",
      "right" : "throw new NumberFormatException(str + \" is not a valid number.\");",
      "info" : "ThrowStatement[18625-18690]:ThrowStatement[18625-18690]"
    }, {
      "left" : "case 'f' :",
      "right" : "case 'f' :",
      "info" : "SwitchCase[18707-18717]:SwitchCase[18707-18717]"
    }, {
      "left" : "case 'F' :",
      "right" : "case 'F' :",
      "info" : "SwitchCase[18734-18744]:SwitchCase[18734-18744]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[18765-19316]:TryStatement[18765-19316]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18769-19209]:Block[18769-19209]"
    }, {
      "left" : "Float f = NumberUtils.createFloat(numeric);",
      "right" : "Float f = NumberUtils.createFloat(numeric);",
      "info" : "VariableDeclarationStatement[18795-18838]:VariableDeclarationStatement[18795-18838]"
    }, {
      "left" : "if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros)))",
      "right" : "if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros)))",
      "info" : "IfStatement[18863-19186]:IfStatement[18863-19186]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18927-19186]:Block[18927-19186]"
    }, {
      "left" : "return f;",
      "right" : "return f;",
      "info" : "ReturnStatement[19151-19160]:ReturnStatement[19151-19160]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19244-19316]:Block[19244-19316]"
    }, {
      "left" : "case 'd' :",
      "right" : "case 'd' :",
      "info" : "SwitchCase[19370-19380]:SwitchCase[19370-19380]"
    }, {
      "left" : "case 'D' :",
      "right" : "case 'D' :",
      "info" : "SwitchCase[19397-19407]:SwitchCase[19397-19407]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[19428-19786]:TryStatement[19428-19786]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19432-19679]:Block[19432-19679]"
    }, {
      "left" : "Double d = NumberUtils.createDouble(numeric);",
      "right" : "Double d = NumberUtils.createDouble(numeric);",
      "info" : "VariableDeclarationStatement[19458-19503]:VariableDeclarationStatement[19458-19503]"
    }, {
      "left" : "if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros)))",
      "right" : "if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros)))",
      "info" : "IfStatement[19528-19657]:IfStatement[19528-19657]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19592-19657]:Block[19592-19657]"
    }, {
      "left" : "return d;",
      "right" : "return d;",
      "info" : "ReturnStatement[19622-19631]:ReturnStatement[19622-19631]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19714-19786]:Block[19714-19786]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[19807-19997]:TryStatement[19807-19997]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19811-19892]:Block[19811-19892]"
    }, {
      "left" : "return createBigDecimal(numeric);",
      "right" : "return createBigDecimal(numeric);",
      "info" : "ReturnStatement[19837-19870]:ReturnStatement[19837-19870]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19925-19997]:Block[19925-19997]"
    }, {
      "left" : "default :",
      "right" : "default :",
      "info" : "SwitchCase[20051-20060]:SwitchCase[20051-20060]"
    }, {
      "left" : "throw new NumberFormatException(str + \" is not a valid number.\");",
      "right" : "throw new NumberFormatException(str + \" is not a valid number.\");",
      "info" : "ThrowStatement[20081-20146]:ThrowStatement[20081-20146]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20177-21866]:Block[20177-21866]"
    }, {
      "left" : "if (expPos > -1 && expPos < str.length() - 1)",
      "right" : "if (expPos > -1 && expPos < str.length() - 1)",
      "info" : "IfStatement[20312-20485]:IfStatement[20312-20485]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20358-20436]:Block[20358-20436]"
    }, {
      "left" : "exp = str.substring(expPos + 1, str.length());",
      "right" : "exp = str.substring(expPos + 1, str.length());",
      "info" : "ExpressionStatement[20376-20422]:ExpressionStatement[20376-20422]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20442-20485]:Block[20442-20485]"
    }, {
      "left" : "exp = null;",
      "right" : "exp = null;",
      "info" : "ExpressionStatement[20460-20471]:ExpressionStatement[20460-20471]"
    }, {
      "left" : "if (dec == null && exp == null)",
      "right" : "if (dec == null && exp == null)",
      "info" : "IfStatement[20498-21856]:IfStatement[20498-21856]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20530-21006]:Block[20530-21006]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[20593-20762]:TryStatement[20593-20762]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20597-20663]:Block[20597-20663]"
    }, {
      "left" : "return createInteger(str);",
      "right" : "return createInteger(str);",
      "info" : "ReturnStatement[20619-20645]:ReturnStatement[20619-20645]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20698-20762]:Block[20698-20762]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[20779-20945]:TryStatement[20779-20945]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20783-20846]:Block[20783-20846]"
    }, {
      "left" : "return createLong(str);",
      "right" : "return createLong(str);",
      "info" : "ReturnStatement[20805-20828]:ReturnStatement[20805-20828]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20881-20945]:Block[20881-20945]"
    }, {
      "left" : "return createBigInteger(str);",
      "right" : "return createBigInteger(str);",
      "info" : "ReturnStatement[20962-20991]:ReturnStatement[20962-20991]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21012-21856]:Block[21012-21856]"
    }, {
      "left" : "boolean allZeros = isAllZeros(mant) && isAllZeros(exp);",
      "right" : "boolean allZeros = isAllZeros(mant) && isAllZeros(exp);",
      "info" : "VariableDeclarationStatement[21078-21133]:VariableDeclarationStatement[21078-21133]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[21150-21462]:TryStatement[21150-21462]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21154-21363]:Block[21154-21363]"
    }, {
      "left" : "Float f = createFloat(str);",
      "right" : "Float f = createFloat(str);",
      "info" : "VariableDeclarationStatement[21176-21203]:VariableDeclarationStatement[21176-21203]"
    }, {
      "left" : "if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros)))",
      "right" : "if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros)))",
      "info" : "IfStatement[21224-21345]:IfStatement[21224-21345]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21288-21345]:Block[21288-21345]"
    }, {
      "left" : "return f;",
      "right" : "return f;",
      "info" : "ReturnStatement[21314-21323]:ReturnStatement[21314-21323]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21398-21462]:Block[21398-21462]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[21479-21794]:TryStatement[21479-21794]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21483-21695]:Block[21483-21695]"
    }, {
      "left" : "Double d = createDouble(str);",
      "right" : "Double d = createDouble(str);",
      "info" : "VariableDeclarationStatement[21505-21534]:VariableDeclarationStatement[21505-21534]"
    }, {
      "left" : "if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros)))",
      "right" : "if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros)))",
      "info" : "IfStatement[21555-21677]:IfStatement[21555-21677]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21620-21677]:Block[21620-21677]"
    }, {
      "left" : "return d;",
      "right" : "return d;",
      "info" : "ReturnStatement[21646-21655]:ReturnStatement[21646-21655]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21730-21794]:Block[21730-21794]"
    }, {
      "left" : "return createBigDecimal(str);",
      "right" : "return createBigDecimal(str);",
      "info" : "ReturnStatement[21812-21841]:ReturnStatement[21812-21841]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22190-22440]:Block[22190-22440]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[22200-22253]:IfStatement[22200-22253]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22217-22253]:Block[22217-22253]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[22231-22243]:ReturnStatement[22231-22243]"
    }, {
      "left" : "for (int i = str.length() - 1; i >= 0; i--)",
      "right" : "for (int i = str.length() - 1; i >= 0; i--)",
      "info" : "ForStatement[22262-22401]:ForStatement[22262-22401]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22306-22401]:Block[22306-22401]"
    }, {
      "left" : "if (str.charAt(i) != '0')",
      "right" : "if (str.charAt(i) != '0')",
      "info" : "IfStatement[22320-22391]:IfStatement[22320-22391]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22346-22391]:Block[22346-22391]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[22364-22377]:ReturnStatement[22364-22377]"
    }, {
      "left" : "return str.length() > 0;",
      "right" : "return str.length() > 0;",
      "info" : "ReturnStatement[22410-22434]:ReturnStatement[22410-22434]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22923-23027]:Block[22923-23027]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[22933-22986]:IfStatement[22933-22986]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22950-22986]:Block[22950-22986]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[22964-22976]:ReturnStatement[22964-22976]"
    }, {
      "left" : "return Float.valueOf(str);",
      "right" : "return Float.valueOf(str);",
      "info" : "ReturnStatement[22995-23021]:ReturnStatement[22995-23021]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23436-23541]:Block[23436-23541]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[23446-23499]:IfStatement[23446-23499]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23463-23499]:Block[23463-23499]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[23477-23489]:ReturnStatement[23477-23489]"
    }, {
      "left" : "return Double.valueOf(str);",
      "right" : "return Double.valueOf(str);",
      "info" : "ReturnStatement[23508-23535]:ReturnStatement[23508-23535]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23995-24169]:Block[23995-24169]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[24005-24058]:IfStatement[24005-24058]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24022-24058]:Block[24022-24058]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[24036-24048]:ReturnStatement[24036-24048]"
    }, {
      "left" : "return Integer.decode(str);",
      "right" : "return Integer.decode(str);",
      "info" : "ReturnStatement[24136-24163]:ReturnStatement[24136-24163]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24570-24673]:Block[24570-24673]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[24580-24633]:IfStatement[24580-24633]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24597-24633]:Block[24597-24633]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[24611-24623]:ReturnStatement[24611-24623]"
    }, {
      "left" : "return Long.valueOf(str);",
      "right" : "return Long.valueOf(str);",
      "info" : "ReturnStatement[24642-24667]:ReturnStatement[24642-24667]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25098-25203]:Block[25098-25203]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[25108-25161]:IfStatement[25108-25161]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25125-25161]:Block[25125-25161]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[25139-25151]:ReturnStatement[25139-25151]"
    }, {
      "left" : "return new BigInteger(str);",
      "right" : "return new BigInteger(str);",
      "info" : "ReturnStatement[25170-25197]:ReturnStatement[25170-25197]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25628-25943]:Block[25628-25943]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[25638-25691]:IfStatement[25638-25691]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25655-25691]:Block[25655-25691]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[25669-25681]:ReturnStatement[25669-25681]"
    }, {
      "left" : "if (StringUtils.isBlank(str))",
      "right" : "if (StringUtils.isBlank(str))",
      "info" : "IfStatement[25773-25899]:IfStatement[25773-25899]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25803-25899]:Block[25803-25899]"
    }, {
      "left" : "throw new NumberFormatException(\"A blank string is not a valid number\");",
      "right" : "throw new NumberFormatException(\"A blank string is not a valid number\");",
      "info" : "ThrowStatement[25817-25889]:ThrowStatement[25817-25889]"
    }, {
      "left" : "return new BigDecimal(str);",
      "right" : "return new BigDecimal(str);",
      "info" : "ReturnStatement[25910-25937]:ReturnStatement[25910-25937]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26415-26911]:Block[26415-26911]"
    }, {
      "left" : "if (array == null)",
      "right" : "if (array == null)",
      "info" : "IfStatement[26452-26674]:IfStatement[26452-26674]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26471-26560]:Block[26471-26560]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The Array must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The Array must not be null\");",
      "info" : "ThrowStatement[26485-26550]:ThrowStatement[26485-26550]"
    }, {
      "left" : "if (array.length == 0)",
      "right" : "if (array.length == 0)",
      "info" : "IfStatement[26566-26674]:IfStatement[26566-26674]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26589-26674]:Block[26589-26674]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Array cannot be empty.\");",
      "right" : "throw new IllegalArgumentException(\"Array cannot be empty.\");",
      "info" : "ThrowStatement[26603-26664]:ThrowStatement[26603-26664]"
    }, {
      "left" : "long min = array[0];",
      "right" : "long min = array[0];",
      "info" : "VariableDeclarationStatement[26721-26741]:VariableDeclarationStatement[26721-26741]"
    }, {
      "left" : "for (int i = 1; i < array.length; i++)",
      "right" : "for (int i = 1; i < array.length; i++)",
      "info" : "ForStatement[26750-26880]:ForStatement[26750-26880]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26789-26880]:Block[26789-26880]"
    }, {
      "left" : "if (array[i] < min)",
      "right" : "if (array[i] < min)",
      "info" : "IfStatement[26803-26870]:IfStatement[26803-26870]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26823-26870]:Block[26823-26870]"
    }, {
      "left" : "min = array[i];",
      "right" : "min = array[i];",
      "info" : "ExpressionStatement[26841-26856]:ExpressionStatement[26841-26856]"
    }, {
      "left" : "return min;",
      "right" : "return min;",
      "info" : "ReturnStatement[26894-26905]:ReturnStatement[26894-26905]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27286-27781]:Block[27286-27781]"
    }, {
      "left" : "if (array == null)",
      "right" : "if (array == null)",
      "info" : "IfStatement[27323-27545]:IfStatement[27323-27545]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27342-27431]:Block[27342-27431]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The Array must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The Array must not be null\");",
      "info" : "ThrowStatement[27356-27421]:ThrowStatement[27356-27421]"
    }, {
      "left" : "if (array.length == 0)",
      "right" : "if (array.length == 0)",
      "info" : "IfStatement[27437-27545]:IfStatement[27437-27545]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27460-27545]:Block[27460-27545]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Array cannot be empty.\");",
      "right" : "throw new IllegalArgumentException(\"Array cannot be empty.\");",
      "info" : "ThrowStatement[27474-27535]:ThrowStatement[27474-27535]"
    }, {
      "left" : "int min = array[0];",
      "right" : "int min = array[0];",
      "info" : "VariableDeclarationStatement[27592-27611]:VariableDeclarationStatement[27592-27611]"
    }, {
      "left" : "for (int j = 1; j < array.length; j++)",
      "right" : "for (int j = 1; j < array.length; j++)",
      "info" : "ForStatement[27620-27750]:ForStatement[27620-27750]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27659-27750]:Block[27659-27750]"
    }, {
      "left" : "if (array[j] < min)",
      "right" : "if (array[j] < min)",
      "info" : "IfStatement[27673-27740]:IfStatement[27673-27740]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27693-27740]:Block[27693-27740]"
    }, {
      "left" : "min = array[j];",
      "right" : "min = array[j];",
      "info" : "ExpressionStatement[27711-27726]:ExpressionStatement[27711-27726]"
    }, {
      "left" : "return min;",
      "right" : "return min;",
      "info" : "ReturnStatement[27764-27775]:ReturnStatement[27764-27775]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28160-28657]:Block[28160-28657]"
    }, {
      "left" : "if (array == null)",
      "right" : "if (array == null)",
      "info" : "IfStatement[28197-28419]:IfStatement[28197-28419]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28216-28305]:Block[28216-28305]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The Array must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The Array must not be null\");",
      "info" : "ThrowStatement[28230-28295]:ThrowStatement[28230-28295]"
    }, {
      "left" : "if (array.length == 0)",
      "right" : "if (array.length == 0)",
      "info" : "IfStatement[28311-28419]:IfStatement[28311-28419]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28334-28419]:Block[28334-28419]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Array cannot be empty.\");",
      "right" : "throw new IllegalArgumentException(\"Array cannot be empty.\");",
      "info" : "ThrowStatement[28348-28409]:ThrowStatement[28348-28409]"
    }, {
      "left" : "short min = array[0];",
      "right" : "short min = array[0];",
      "info" : "VariableDeclarationStatement[28466-28487]:VariableDeclarationStatement[28466-28487]"
    }, {
      "left" : "for (int i = 1; i < array.length; i++)",
      "right" : "for (int i = 1; i < array.length; i++)",
      "info" : "ForStatement[28496-28626]:ForStatement[28496-28626]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28535-28626]:Block[28535-28626]"
    }, {
      "left" : "if (array[i] < min)",
      "right" : "if (array[i] < min)",
      "info" : "IfStatement[28549-28616]:IfStatement[28549-28616]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28569-28616]:Block[28569-28616]"
    }, {
      "left" : "min = array[i];",
      "right" : "min = array[i];",
      "info" : "ExpressionStatement[28587-28602]:ExpressionStatement[28587-28602]"
    }, {
      "left" : "return min;",
      "right" : "return min;",
      "info" : "ReturnStatement[28640-28651]:ReturnStatement[28640-28651]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29034-29530]:Block[29034-29530]"
    }, {
      "left" : "if (array == null)",
      "right" : "if (array == null)",
      "info" : "IfStatement[29071-29293]:IfStatement[29071-29293]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29090-29179]:Block[29090-29179]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The Array must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The Array must not be null\");",
      "info" : "ThrowStatement[29104-29169]:ThrowStatement[29104-29169]"
    }, {
      "left" : "if (array.length == 0)",
      "right" : "if (array.length == 0)",
      "info" : "IfStatement[29185-29293]:IfStatement[29185-29293]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29208-29293]:Block[29208-29293]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Array cannot be empty.\");",
      "right" : "throw new IllegalArgumentException(\"Array cannot be empty.\");",
      "info" : "ThrowStatement[29222-29283]:ThrowStatement[29222-29283]"
    }, {
      "left" : "byte min = array[0];",
      "right" : "byte min = array[0];",
      "info" : "VariableDeclarationStatement[29340-29360]:VariableDeclarationStatement[29340-29360]"
    }, {
      "left" : "for (int i = 1; i < array.length; i++)",
      "right" : "for (int i = 1; i < array.length; i++)",
      "info" : "ForStatement[29369-29499]:ForStatement[29369-29499]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29408-29499]:Block[29408-29499]"
    }, {
      "left" : "if (array[i] < min)",
      "right" : "if (array[i] < min)",
      "info" : "IfStatement[29422-29489]:IfStatement[29422-29489]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29442-29489]:Block[29442-29489]"
    }, {
      "left" : "min = array[i];",
      "right" : "min = array[i];",
      "info" : "ExpressionStatement[29460-29475]:ExpressionStatement[29460-29475]"
    }, {
      "left" : "return min;",
      "right" : "return min;",
      "info" : "ReturnStatement[29513-29524]:ReturnStatement[29513-29524]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30024-30613]:Block[30024-30613]"
    }, {
      "left" : "if (array == null)",
      "right" : "if (array == null)",
      "info" : "IfStatement[30061-30283]:IfStatement[30061-30283]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30080-30169]:Block[30080-30169]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The Array must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The Array must not be null\");",
      "info" : "ThrowStatement[30094-30159]:ThrowStatement[30094-30159]"
    }, {
      "left" : "if (array.length == 0)",
      "right" : "if (array.length == 0)",
      "info" : "IfStatement[30175-30283]:IfStatement[30175-30283]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30198-30283]:Block[30198-30283]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Array cannot be empty.\");",
      "right" : "throw new IllegalArgumentException(\"Array cannot be empty.\");",
      "info" : "ThrowStatement[30212-30273]:ThrowStatement[30212-30273]"
    }, {
      "left" : "double min = array[0];",
      "right" : "double min = array[0];",
      "info" : "VariableDeclarationStatement[30330-30352]:VariableDeclarationStatement[30330-30352]"
    }, {
      "left" : "for (int i = 1; i < array.length; i++)",
      "right" : "for (int i = 1; i < array.length; i++)",
      "info" : "ForStatement[30361-30582]:ForStatement[30361-30582]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30400-30582]:Block[30400-30582]"
    }, {
      "left" : "if (Double.isNaN(array[i]))",
      "right" : "if (Double.isNaN(array[i]))",
      "info" : "IfStatement[30414-30492]:IfStatement[30414-30492]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30442-30492]:Block[30442-30492]"
    }, {
      "left" : "return Double.NaN;",
      "right" : "return Double.NaN;",
      "info" : "ReturnStatement[30460-30478]:ReturnStatement[30460-30478]"
    }, {
      "left" : "if (array[i] < min)",
      "right" : "if (array[i] < min)",
      "info" : "IfStatement[30505-30572]:IfStatement[30505-30572]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30525-30572]:Block[30525-30572]"
    }, {
      "left" : "min = array[i];",
      "right" : "min = array[i];",
      "info" : "ExpressionStatement[30543-30558]:ExpressionStatement[30543-30558]"
    }, {
      "left" : "return min;",
      "right" : "return min;",
      "info" : "ReturnStatement[30596-30607]:ReturnStatement[30596-30607]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31103-31689]:Block[31103-31689]"
    }, {
      "left" : "if (array == null)",
      "right" : "if (array == null)",
      "info" : "IfStatement[31140-31362]:IfStatement[31140-31362]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31159-31248]:Block[31159-31248]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The Array must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The Array must not be null\");",
      "info" : "ThrowStatement[31173-31238]:ThrowStatement[31173-31238]"
    }, {
      "left" : "if (array.length == 0)",
      "right" : "if (array.length == 0)",
      "info" : "IfStatement[31254-31362]:IfStatement[31254-31362]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31277-31362]:Block[31277-31362]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Array cannot be empty.\");",
      "right" : "throw new IllegalArgumentException(\"Array cannot be empty.\");",
      "info" : "ThrowStatement[31291-31352]:ThrowStatement[31291-31352]"
    }, {
      "left" : "float min = array[0];",
      "right" : "float min = array[0];",
      "info" : "VariableDeclarationStatement[31409-31430]:VariableDeclarationStatement[31409-31430]"
    }, {
      "left" : "for (int i = 1; i < array.length; i++)",
      "right" : "for (int i = 1; i < array.length; i++)",
      "info" : "ForStatement[31439-31658]:ForStatement[31439-31658]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31478-31658]:Block[31478-31658]"
    }, {
      "left" : "if (Float.isNaN(array[i]))",
      "right" : "if (Float.isNaN(array[i]))",
      "info" : "IfStatement[31492-31568]:IfStatement[31492-31568]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31519-31568]:Block[31519-31568]"
    }, {
      "left" : "return Float.NaN;",
      "right" : "return Float.NaN;",
      "info" : "ReturnStatement[31537-31554]:ReturnStatement[31537-31554]"
    }, {
      "left" : "if (array[i] < min)",
      "right" : "if (array[i] < min)",
      "info" : "IfStatement[31581-31648]:IfStatement[31581-31648]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31601-31648]:Block[31601-31648]"
    }, {
      "left" : "min = array[i];",
      "right" : "min = array[i];",
      "info" : "ExpressionStatement[31619-31634]:ExpressionStatement[31619-31634]"
    }, {
      "left" : "return min;",
      "right" : "return min;",
      "info" : "ReturnStatement[31672-31683]:ReturnStatement[31672-31683]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32161-32649]:Block[32161-32649]"
    }, {
      "left" : "if (array == null)",
      "right" : "if (array == null)",
      "info" : "IfStatement[32198-32420]:IfStatement[32198-32420]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32217-32306]:Block[32217-32306]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The Array must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The Array must not be null\");",
      "info" : "ThrowStatement[32231-32296]:ThrowStatement[32231-32296]"
    }, {
      "left" : "if (array.length == 0)",
      "right" : "if (array.length == 0)",
      "info" : "IfStatement[32312-32420]:IfStatement[32312-32420]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32335-32420]:Block[32335-32420]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Array cannot be empty.\");",
      "right" : "throw new IllegalArgumentException(\"Array cannot be empty.\");",
      "info" : "ThrowStatement[32349-32410]:ThrowStatement[32349-32410]"
    }, {
      "left" : "long max = array[0];",
      "right" : "long max = array[0];",
      "info" : "VariableDeclarationStatement[32463-32483]:VariableDeclarationStatement[32463-32483]"
    }, {
      "left" : "for (int j = 1; j < array.length; j++)",
      "right" : "for (int j = 1; j < array.length; j++)",
      "info" : "ForStatement[32492-32622]:ForStatement[32492-32622]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32531-32622]:Block[32531-32622]"
    }, {
      "left" : "if (array[j] > max)",
      "right" : "if (array[j] > max)",
      "info" : "IfStatement[32545-32612]:IfStatement[32545-32612]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32565-32612]:Block[32565-32612]"
    }, {
      "left" : "max = array[j];",
      "right" : "max = array[j];",
      "info" : "ExpressionStatement[32583-32598]:ExpressionStatement[32583-32598]"
    }, {
      "left" : "return max;",
      "right" : "return max;",
      "info" : "ReturnStatement[32632-32643]:ReturnStatement[32632-32643]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33024-33519]:Block[33024-33519]"
    }, {
      "left" : "if (array == null)",
      "right" : "if (array == null)",
      "info" : "IfStatement[33061-33283]:IfStatement[33061-33283]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33080-33169]:Block[33080-33169]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The Array must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The Array must not be null\");",
      "info" : "ThrowStatement[33094-33159]:ThrowStatement[33094-33159]"
    }, {
      "left" : "if (array.length == 0)",
      "right" : "if (array.length == 0)",
      "info" : "IfStatement[33175-33283]:IfStatement[33175-33283]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33198-33283]:Block[33198-33283]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Array cannot be empty.\");",
      "right" : "throw new IllegalArgumentException(\"Array cannot be empty.\");",
      "info" : "ThrowStatement[33212-33273]:ThrowStatement[33212-33273]"
    }, {
      "left" : "int max = array[0];",
      "right" : "int max = array[0];",
      "info" : "VariableDeclarationStatement[33330-33349]:VariableDeclarationStatement[33330-33349]"
    }, {
      "left" : "for (int j = 1; j < array.length; j++)",
      "right" : "for (int j = 1; j < array.length; j++)",
      "info" : "ForStatement[33358-33488]:ForStatement[33358-33488]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33397-33488]:Block[33397-33488]"
    }, {
      "left" : "if (array[j] > max)",
      "right" : "if (array[j] > max)",
      "info" : "IfStatement[33411-33478]:IfStatement[33411-33478]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33431-33478]:Block[33431-33478]"
    }, {
      "left" : "max = array[j];",
      "right" : "max = array[j];",
      "info" : "ExpressionStatement[33449-33464]:ExpressionStatement[33449-33464]"
    }, {
      "left" : "return max;",
      "right" : "return max;",
      "info" : "ReturnStatement[33502-33513]:ReturnStatement[33502-33513]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33898-34395]:Block[33898-34395]"
    }, {
      "left" : "if (array == null)",
      "right" : "if (array == null)",
      "info" : "IfStatement[33935-34157]:IfStatement[33935-34157]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33954-34043]:Block[33954-34043]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The Array must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The Array must not be null\");",
      "info" : "ThrowStatement[33968-34033]:ThrowStatement[33968-34033]"
    }, {
      "left" : "if (array.length == 0)",
      "right" : "if (array.length == 0)",
      "info" : "IfStatement[34049-34157]:IfStatement[34049-34157]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34072-34157]:Block[34072-34157]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Array cannot be empty.\");",
      "right" : "throw new IllegalArgumentException(\"Array cannot be empty.\");",
      "info" : "ThrowStatement[34086-34147]:ThrowStatement[34086-34147]"
    }, {
      "left" : "short max = array[0];",
      "right" : "short max = array[0];",
      "info" : "VariableDeclarationStatement[34204-34225]:VariableDeclarationStatement[34204-34225]"
    }, {
      "left" : "for (int i = 1; i < array.length; i++)",
      "right" : "for (int i = 1; i < array.length; i++)",
      "info" : "ForStatement[34234-34364]:ForStatement[34234-34364]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34273-34364]:Block[34273-34364]"
    }, {
      "left" : "if (array[i] > max)",
      "right" : "if (array[i] > max)",
      "info" : "IfStatement[34287-34354]:IfStatement[34287-34354]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34307-34354]:Block[34307-34354]"
    }, {
      "left" : "max = array[i];",
      "right" : "max = array[i];",
      "info" : "ExpressionStatement[34325-34340]:ExpressionStatement[34325-34340]"
    }, {
      "left" : "return max;",
      "right" : "return max;",
      "info" : "ReturnStatement[34378-34389]:ReturnStatement[34378-34389]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34772-35268]:Block[34772-35268]"
    }, {
      "left" : "if (array == null)",
      "right" : "if (array == null)",
      "info" : "IfStatement[34809-35031]:IfStatement[34809-35031]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34828-34917]:Block[34828-34917]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The Array must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The Array must not be null\");",
      "info" : "ThrowStatement[34842-34907]:ThrowStatement[34842-34907]"
    }, {
      "left" : "if (array.length == 0)",
      "right" : "if (array.length == 0)",
      "info" : "IfStatement[34923-35031]:IfStatement[34923-35031]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34946-35031]:Block[34946-35031]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Array cannot be empty.\");",
      "right" : "throw new IllegalArgumentException(\"Array cannot be empty.\");",
      "info" : "ThrowStatement[34960-35021]:ThrowStatement[34960-35021]"
    }, {
      "left" : "byte max = array[0];",
      "right" : "byte max = array[0];",
      "info" : "VariableDeclarationStatement[35078-35098]:VariableDeclarationStatement[35078-35098]"
    }, {
      "left" : "for (int i = 1; i < array.length; i++)",
      "right" : "for (int i = 1; i < array.length; i++)",
      "info" : "ForStatement[35107-35237]:ForStatement[35107-35237]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35146-35237]:Block[35146-35237]"
    }, {
      "left" : "if (array[i] > max)",
      "right" : "if (array[i] > max)",
      "info" : "IfStatement[35160-35227]:IfStatement[35160-35227]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35180-35227]:Block[35180-35227]"
    }, {
      "left" : "max = array[i];",
      "right" : "max = array[i];",
      "info" : "ExpressionStatement[35198-35213]:ExpressionStatement[35198-35213]"
    }, {
      "left" : "return max;",
      "right" : "return max;",
      "info" : "ReturnStatement[35251-35262]:ReturnStatement[35251-35262]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35761-36349]:Block[35761-36349]"
    }, {
      "left" : "if (array== null)",
      "right" : "if (array== null)",
      "info" : "IfStatement[35798-36019]:IfStatement[35798-36019]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35816-35905]:Block[35816-35905]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The Array must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The Array must not be null\");",
      "info" : "ThrowStatement[35830-35895]:ThrowStatement[35830-35895]"
    }, {
      "left" : "if (array.length == 0)",
      "right" : "if (array.length == 0)",
      "info" : "IfStatement[35911-36019]:IfStatement[35911-36019]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35934-36019]:Block[35934-36019]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Array cannot be empty.\");",
      "right" : "throw new IllegalArgumentException(\"Array cannot be empty.\");",
      "info" : "ThrowStatement[35948-36009]:ThrowStatement[35948-36009]"
    }, {
      "left" : "double max = array[0];",
      "right" : "double max = array[0];",
      "info" : "VariableDeclarationStatement[36066-36088]:VariableDeclarationStatement[36066-36088]"
    }, {
      "left" : "for (int j = 1; j < array.length; j++)",
      "right" : "for (int j = 1; j < array.length; j++)",
      "info" : "ForStatement[36097-36318]:ForStatement[36097-36318]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36136-36318]:Block[36136-36318]"
    }, {
      "left" : "if (Double.isNaN(array[j]))",
      "right" : "if (Double.isNaN(array[j]))",
      "info" : "IfStatement[36150-36228]:IfStatement[36150-36228]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36178-36228]:Block[36178-36228]"
    }, {
      "left" : "return Double.NaN;",
      "right" : "return Double.NaN;",
      "info" : "ReturnStatement[36196-36214]:ReturnStatement[36196-36214]"
    }, {
      "left" : "if (array[j] > max)",
      "right" : "if (array[j] > max)",
      "info" : "IfStatement[36241-36308]:IfStatement[36241-36308]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36261-36308]:Block[36261-36308]"
    }, {
      "left" : "max = array[j];",
      "right" : "max = array[j];",
      "info" : "ExpressionStatement[36279-36294]:ExpressionStatement[36279-36294]"
    }, {
      "left" : "return max;",
      "right" : "return max;",
      "info" : "ReturnStatement[36332-36343]:ReturnStatement[36332-36343]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36839-37417]:Block[36839-37417]"
    }, {
      "left" : "if (array == null)",
      "right" : "if (array == null)",
      "info" : "IfStatement[36876-37098]:IfStatement[36876-37098]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36895-36984]:Block[36895-36984]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The Array must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The Array must not be null\");",
      "info" : "ThrowStatement[36909-36974]:ThrowStatement[36909-36974]"
    }, {
      "left" : "if (array.length == 0)",
      "right" : "if (array.length == 0)",
      "info" : "IfStatement[36990-37098]:IfStatement[36990-37098]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37013-37098]:Block[37013-37098]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Array cannot be empty.\");",
      "right" : "throw new IllegalArgumentException(\"Array cannot be empty.\");",
      "info" : "ThrowStatement[37027-37088]:ThrowStatement[37027-37088]"
    }, {
      "left" : "float max = array[0];",
      "right" : "float max = array[0];",
      "info" : "VariableDeclarationStatement[37141-37162]:VariableDeclarationStatement[37141-37162]"
    }, {
      "left" : "for (int j = 1; j < array.length; j++)",
      "right" : "for (int j = 1; j < array.length; j++)",
      "info" : "ForStatement[37171-37390]:ForStatement[37171-37390]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37210-37390]:Block[37210-37390]"
    }, {
      "left" : "if (Float.isNaN(array[j]))",
      "right" : "if (Float.isNaN(array[j]))",
      "info" : "IfStatement[37224-37300]:IfStatement[37224-37300]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37251-37300]:Block[37251-37300]"
    }, {
      "left" : "return Float.NaN;",
      "right" : "return Float.NaN;",
      "info" : "ReturnStatement[37269-37286]:ReturnStatement[37269-37286]"
    }, {
      "left" : "if (array[j] > max)",
      "right" : "if (array[j] > max)",
      "info" : "IfStatement[37313-37380]:IfStatement[37313-37380]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37333-37380]:Block[37333-37380]"
    }, {
      "left" : "max = array[j];",
      "right" : "max = array[j];",
      "info" : "ExpressionStatement[37351-37366]:ExpressionStatement[37351-37366]"
    }, {
      "left" : "return max;",
      "right" : "return max;",
      "info" : "ReturnStatement[37400-37411]:ReturnStatement[37400-37411]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37780-37905]:Block[37780-37905]"
    }, {
      "left" : "if (b < a)",
      "right" : "if (b < a)",
      "info" : "IfStatement[37790-37831]:IfStatement[37790-37831]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37801-37831]:Block[37801-37831]"
    }, {
      "left" : "a = b;",
      "right" : "a = b;",
      "info" : "ExpressionStatement[37815-37821]:ExpressionStatement[37815-37821]"
    }, {
      "left" : "if (c < a)",
      "right" : "if (c < a)",
      "info" : "IfStatement[37840-37881]:IfStatement[37840-37881]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37851-37881]:Block[37851-37881]"
    }, {
      "left" : "a = c;",
      "right" : "a = c;",
      "info" : "ExpressionStatement[37865-37871]:ExpressionStatement[37865-37871]"
    }, {
      "left" : "return a;",
      "right" : "return a;",
      "info" : "ReturnStatement[37890-37899]:ReturnStatement[37890-37899]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38161-38286]:Block[38161-38286]"
    }, {
      "left" : "if (b < a)",
      "right" : "if (b < a)",
      "info" : "IfStatement[38171-38212]:IfStatement[38171-38212]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38182-38212]:Block[38182-38212]"
    }, {
      "left" : "a = b;",
      "right" : "a = b;",
      "info" : "ExpressionStatement[38196-38202]:ExpressionStatement[38196-38202]"
    }, {
      "left" : "if (c < a)",
      "right" : "if (c < a)",
      "info" : "IfStatement[38221-38262]:IfStatement[38221-38262]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38232-38262]:Block[38232-38262]"
    }, {
      "left" : "a = c;",
      "right" : "a = c;",
      "info" : "ExpressionStatement[38246-38252]:ExpressionStatement[38246-38252]"
    }, {
      "left" : "return a;",
      "right" : "return a;",
      "info" : "ReturnStatement[38271-38280]:ReturnStatement[38271-38280]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38552-38677]:Block[38552-38677]"
    }, {
      "left" : "if (b < a)",
      "right" : "if (b < a)",
      "info" : "IfStatement[38562-38603]:IfStatement[38562-38603]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38573-38603]:Block[38573-38603]"
    }, {
      "left" : "a = b;",
      "right" : "a = b;",
      "info" : "ExpressionStatement[38587-38593]:ExpressionStatement[38587-38593]"
    }, {
      "left" : "if (c < a)",
      "right" : "if (c < a)",
      "info" : "IfStatement[38612-38653]:IfStatement[38612-38653]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38623-38653]:Block[38623-38653]"
    }, {
      "left" : "a = c;",
      "right" : "a = c;",
      "info" : "ExpressionStatement[38637-38643]:ExpressionStatement[38637-38643]"
    }, {
      "left" : "return a;",
      "right" : "return a;",
      "info" : "ReturnStatement[38662-38671]:ReturnStatement[38662-38671]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38938-39063]:Block[38938-39063]"
    }, {
      "left" : "if (b < a)",
      "right" : "if (b < a)",
      "info" : "IfStatement[38948-38989]:IfStatement[38948-38989]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38959-38989]:Block[38959-38989]"
    }, {
      "left" : "a = b;",
      "right" : "a = b;",
      "info" : "ExpressionStatement[38973-38979]:ExpressionStatement[38973-38979]"
    }, {
      "left" : "if (c < a)",
      "right" : "if (c < a)",
      "info" : "IfStatement[38998-39039]:IfStatement[38998-39039]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39009-39039]:Block[39009-39039]"
    }, {
      "left" : "a = c;",
      "right" : "a = c;",
      "info" : "ExpressionStatement[39023-39029]:ExpressionStatement[39023-39029]"
    }, {
      "left" : "return a;",
      "right" : "return a;",
      "info" : "ReturnStatement[39048-39057]:ReturnStatement[39048-39057]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39560-39611]:Block[39560-39611]"
    }, {
      "left" : "return Math.min(Math.min(a, b), c);",
      "right" : "return Math.min(Math.min(a, b), c);",
      "info" : "ReturnStatement[39570-39605]:ReturnStatement[39570-39605]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40099-40150]:Block[40099-40150]"
    }, {
      "left" : "return Math.min(Math.min(a, b), c);",
      "right" : "return Math.min(Math.min(a, b), c);",
      "info" : "ReturnStatement[40109-40144]:ReturnStatement[40109-40144]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40507-40632]:Block[40507-40632]"
    }, {
      "left" : "if (b > a)",
      "right" : "if (b > a)",
      "info" : "IfStatement[40517-40558]:IfStatement[40517-40558]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40528-40558]:Block[40528-40558]"
    }, {
      "left" : "a = b;",
      "right" : "a = b;",
      "info" : "ExpressionStatement[40542-40548]:ExpressionStatement[40542-40548]"
    }, {
      "left" : "if (c > a)",
      "right" : "if (c > a)",
      "info" : "IfStatement[40567-40608]:IfStatement[40567-40608]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40578-40608]:Block[40578-40608]"
    }, {
      "left" : "a = c;",
      "right" : "a = c;",
      "info" : "ExpressionStatement[40592-40598]:ExpressionStatement[40592-40598]"
    }, {
      "left" : "return a;",
      "right" : "return a;",
      "info" : "ReturnStatement[40617-40626]:ReturnStatement[40617-40626]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40887-41012]:Block[40887-41012]"
    }, {
      "left" : "if (b > a)",
      "right" : "if (b > a)",
      "info" : "IfStatement[40897-40938]:IfStatement[40897-40938]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40908-40938]:Block[40908-40938]"
    }, {
      "left" : "a = b;",
      "right" : "a = b;",
      "info" : "ExpressionStatement[40922-40928]:ExpressionStatement[40922-40928]"
    }, {
      "left" : "if (c > a)",
      "right" : "if (c > a)",
      "info" : "IfStatement[40947-40988]:IfStatement[40947-40988]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40958-40988]:Block[40958-40988]"
    }, {
      "left" : "a = c;",
      "right" : "a = c;",
      "info" : "ExpressionStatement[40972-40978]:ExpressionStatement[40972-40978]"
    }, {
      "left" : "return a;",
      "right" : "return a;",
      "info" : "ReturnStatement[40997-41006]:ReturnStatement[40997-41006]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41277-41402]:Block[41277-41402]"
    }, {
      "left" : "if (b > a)",
      "right" : "if (b > a)",
      "info" : "IfStatement[41287-41328]:IfStatement[41287-41328]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41298-41328]:Block[41298-41328]"
    }, {
      "left" : "a = b;",
      "right" : "a = b;",
      "info" : "ExpressionStatement[41312-41318]:ExpressionStatement[41312-41318]"
    }, {
      "left" : "if (c > a)",
      "right" : "if (c > a)",
      "info" : "IfStatement[41337-41378]:IfStatement[41337-41378]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41348-41378]:Block[41348-41378]"
    }, {
      "left" : "a = c;",
      "right" : "a = c;",
      "info" : "ExpressionStatement[41362-41368]:ExpressionStatement[41362-41368]"
    }, {
      "left" : "return a;",
      "right" : "return a;",
      "info" : "ReturnStatement[41387-41396]:ReturnStatement[41387-41396]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41662-41787]:Block[41662-41787]"
    }, {
      "left" : "if (b > a)",
      "right" : "if (b > a)",
      "info" : "IfStatement[41672-41713]:IfStatement[41672-41713]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41683-41713]:Block[41683-41713]"
    }, {
      "left" : "a = b;",
      "right" : "a = b;",
      "info" : "ExpressionStatement[41697-41703]:ExpressionStatement[41697-41703]"
    }, {
      "left" : "if (c > a)",
      "right" : "if (c > a)",
      "info" : "IfStatement[41722-41763]:IfStatement[41722-41763]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41733-41763]:Block[41733-41763]"
    }, {
      "left" : "a = c;",
      "right" : "a = c;",
      "info" : "ExpressionStatement[41747-41753]:ExpressionStatement[41747-41753]"
    }, {
      "left" : "return a;",
      "right" : "return a;",
      "info" : "ReturnStatement[41772-41781]:ReturnStatement[41772-41781]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42282-42333]:Block[42282-42333]"
    }, {
      "left" : "return Math.max(Math.max(a, b), c);",
      "right" : "return Math.max(Math.max(a, b), c);",
      "info" : "ReturnStatement[42292-42327]:ReturnStatement[42292-42327]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42820-42871]:Block[42820-42871]"
    }, {
      "left" : "return Math.max(Math.max(a, b), c);",
      "right" : "return Math.max(Math.max(a, b), c);",
      "info" : "ReturnStatement[42830-42865]:ReturnStatement[42830-42865]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43330-43590]:Block[43330-43590]"
    }, {
      "left" : "if (StringUtils.isEmpty(str))",
      "right" : "if (StringUtils.isEmpty(str))",
      "info" : "IfStatement[43340-43407]:IfStatement[43340-43407]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43370-43407]:Block[43370-43407]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[43384-43397]:ReturnStatement[43384-43397]"
    }, {
      "left" : "for (int i = 0; i < str.length(); i++)",
      "right" : "for (int i = 0; i < str.length(); i++)",
      "info" : "ForStatement[43416-43563]:ForStatement[43416-43563]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43455-43563]:Block[43455-43563]"
    }, {
      "left" : "if (!Character.isDigit(str.charAt(i)))",
      "right" : "if (!Character.isDigit(str.charAt(i)))",
      "info" : "IfStatement[43469-43553]:IfStatement[43469-43553]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43508-43553]:Block[43508-43553]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[43526-43539]:ReturnStatement[43526-43539]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[43572-43584]:ReturnStatement[43572-43584]"
    } ]
  },
  "interFileMappings" : { }
}