{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "private static final long serialVersionUID = -1369660067587938365L;",
      "right" : "private static final long serialVersionUID = -1369660067587938365L;",
      "info" : "FieldDeclaration[2464-2575]:FieldDeclaration[2464-2575]"
    }, {
      "left" : "private final LinearObjectiveFunction f;",
      "right" : "private final LinearObjectiveFunction f;",
      "info" : "FieldDeclaration[2581-2659]:FieldDeclaration[2581-2659]"
    }, {
      "left" : "private final Collection<LinearConstraint> constraints;",
      "right" : "private final Collection<LinearConstraint> constraints;",
      "info" : "FieldDeclaration[2665-2751]:FieldDeclaration[2665-2751]"
    }, {
      "left" : "private final boolean restrictToNonNegative;",
      "right" : "private final boolean restrictToNonNegative;",
      "info" : "FieldDeclaration[2757-2870]:FieldDeclaration[2757-2870]"
    }, {
      "left" : "protected transient RealMatrix tableau;",
      "right" : "protected transient RealMatrix tableau;",
      "info" : "FieldDeclaration[2876-2942]:FieldDeclaration[2876-2942]"
    }, {
      "left" : "protected final int numDecisionVariables;",
      "right" : "protected final int numDecisionVariables;",
      "info" : "FieldDeclaration[2948-3030]:FieldDeclaration[2948-3030]"
    }, {
      "left" : "protected final int numSlackVariables;",
      "right" : "protected final int numSlackVariables;",
      "info" : "FieldDeclaration[3036-3112]:FieldDeclaration[3036-3112]"
    }, {
      "left" : "protected int numArtificialVariables;",
      "right" : "protected int numArtificialVariables;",
      "info" : "FieldDeclaration[3118-3198]:FieldDeclaration[3118-3198]"
    }, {
      "left" : "protected final double epsilon;",
      "right" : "protected final double epsilon;",
      "info" : "FieldDeclaration[3204-3304]:FieldDeclaration[3204-3304]"
    }, {
      "left" : "SimplexTableau(final LinearObjectiveFunction f,\n                   final Collection<LinearConstraint> constraints,\n                   final GoalType goalType, final boolean restrictToNonNegative,\n                   final double epsilon)",
      "right" : "SimplexTableau(final LinearObjectiveFunction f,\n                   final Collection<LinearConstraint> constraints,\n                   final GoalType goalType, final boolean restrictToNonNegative,\n                   final double epsilon)",
      "info" : "MethodDeclaration[3314-4729]:MethodDeclaration[3314-4729]"
    }, {
      "left" : "protected double[][] createTableau(final boolean maximize)",
      "right" : "protected double[][] createTableau(final boolean maximize)",
      "info" : "MethodDeclaration[4735-7816]:MethodDeclaration[4735-7816]"
    }, {
      "left" : "public int getNumVariables()",
      "right" : "public int getNumVariables()",
      "info" : "MethodDeclaration[7822-7989]:MethodDeclaration[7822-7989]"
    }, {
      "left" : "public List<LinearConstraint> getNormalizedConstraints()",
      "right" : "public List<LinearConstraint> getNormalizedConstraints()",
      "info" : "MethodDeclaration[7995-8428]:MethodDeclaration[7995-8428]"
    }, {
      "left" : "private LinearConstraint normalize(final LinearConstraint constraint)",
      "right" : "private LinearConstraint normalize(final LinearConstraint constraint)",
      "info" : "MethodDeclaration[8434-9139]:MethodDeclaration[8434-9139]"
    }, {
      "left" : "protected final int getNumObjectiveFunctions()",
      "right" : "protected final int getNumObjectiveFunctions()",
      "info" : "MethodDeclaration[9145-9379]:MethodDeclaration[9145-9379]"
    }, {
      "left" : "private int getConstraintTypeCounts(final Relationship relationship)",
      "right" : "private int getConstraintTypeCounts(final Relationship relationship)",
      "info" : "MethodDeclaration[9385-9893]:MethodDeclaration[9385-9893]"
    }, {
      "left" : "private void initialize()",
      "right" : "private void initialize()",
      "info" : "MethodDeclaration[9899-10316]:MethodDeclaration[9899-10316]"
    }, {
      "left" : "protected static double getInvertedCoeffiecientSum(final RealVector coefficients)",
      "right" : "protected static double getInvertedCoeffiecientSum(final RealVector coefficients)",
      "info" : "MethodDeclaration[10322-10768]:MethodDeclaration[10322-10768]"
    }, {
      "left" : "private Integer getBasicRow(final int col)",
      "right" : "private Integer getBasicRow(final int col)",
      "info" : "MethodDeclaration[10774-11062]:MethodDeclaration[10774-11062]"
    }, {
      "left" : "private Integer getBasicRowForSolution(final int col)",
      "right" : "private Integer getBasicRowForSolution(final int col)",
      "info" : "MethodDeclaration[11068-11368]:MethodDeclaration[11068-11368]"
    }, {
      "left" : "protected void discardArtificialVariables()",
      "right" : "protected void discardArtificialVariables()",
      "info" : "MethodDeclaration[12049-12771]:MethodDeclaration[12075-12797]"
    }, {
      "left" : "private void copyArray(final double[] src, final double[] dest,\n                           final int destPos)",
      "right" : "private void copyArray(final double[] src, final double[] dest,\n                           final int destPos)",
      "info" : "MethodDeclaration[12778-13115]:MethodDeclaration[12804-13141]"
    }, {
      "left" : "protected void divideRow(final int dividendRow, final double divisor)",
      "right" : "protected void divideRow(final int dividendRow, final double divisor)",
      "info" : "MethodDeclaration[14266-14797]:MethodDeclaration[14314-14845]"
    }, {
      "left" : "protected void subtractRow(final int minuendRow, final int subtrahendRow,\n                               final double multiple)",
      "right" : "protected void subtractRow(final int minuendRow, final int subtrahendRow,\n                               final double multiple)",
      "info" : "MethodDeclaration[14803-15489]:MethodDeclaration[14851-15537]"
    }, {
      "left" : "protected final int getWidth()",
      "right" : "protected final int getWidth()",
      "info" : "MethodDeclaration[15495-15667]:MethodDeclaration[15543-15715]"
    }, {
      "left" : "protected final int getHeight()",
      "right" : "protected final int getHeight()",
      "info" : "MethodDeclaration[15673-15845]:MethodDeclaration[15721-15893]"
    }, {
      "left" : "protected final double getEntry(final int row, final int column)",
      "right" : "protected final double getEntry(final int row, final int column)",
      "info" : "MethodDeclaration[15851-16114]:MethodDeclaration[15899-16162]"
    }, {
      "left" : "protected final void setEntry(final int row, final int column,\n                                  final double value)",
      "right" : "protected final void setEntry(final int row, final int column,\n                                  final double value)",
      "info" : "MethodDeclaration[16120-16431]:MethodDeclaration[16168-16479]"
    }, {
      "left" : "protected final int getSlackVariableOffset()",
      "right" : "protected final int getSlackVariableOffset()",
      "info" : "MethodDeclaration[16437-16672]:MethodDeclaration[16485-16720]"
    }, {
      "left" : "protected final int getArtificialVariableOffset()",
      "right" : "protected final int getArtificialVariableOffset()",
      "info" : "MethodDeclaration[16678-16948]:MethodDeclaration[16726-16996]"
    }, {
      "left" : "protected final int getRhsOffset()",
      "right" : "protected final int getRhsOffset()",
      "info" : "MethodDeclaration[16954-17134]:MethodDeclaration[17002-17182]"
    }, {
      "left" : "protected final int getNegativeDecisionVariableOffset()",
      "right" : "protected final int getNegativeDecisionVariableOffset()",
      "info" : "MethodDeclaration[17144-17470]:MethodDeclaration[17192-17518]"
    }, {
      "left" : "protected final int getNumDecisionVariables()",
      "right" : "protected final int getNumDecisionVariables()",
      "info" : "MethodDeclaration[17476-17921]:MethodDeclaration[17524-17969]"
    }, {
      "left" : "protected final int getOriginalNumDecisionVariables()",
      "right" : "protected final int getOriginalNumDecisionVariables()",
      "info" : "MethodDeclaration[17927-18238]:MethodDeclaration[17975-18286]"
    }, {
      "left" : "protected final int getNumSlackVariables()",
      "right" : "protected final int getNumSlackVariables()",
      "info" : "MethodDeclaration[18244-18427]:MethodDeclaration[18292-18475]"
    }, {
      "left" : "protected final int getNumArtificialVariables()",
      "right" : "protected final int getNumArtificialVariables()",
      "info" : "MethodDeclaration[18433-18636]:MethodDeclaration[18481-18684]"
    }, {
      "left" : "protected final double[][] getData()",
      "right" : "protected final double[][] getData()",
      "info" : "MethodDeclaration[18642-18793]:MethodDeclaration[18690-18841]"
    }, {
      "left" : "public boolean equals(Object other)",
      "right" : "public boolean equals(Object other)",
      "info" : "MethodDeclaration[18799-19660]:MethodDeclaration[18847-19708]"
    }, {
      "left" : "public int hashCode()",
      "right" : "public int hashCode()",
      "info" : "MethodDeclaration[19670-20075]:MethodDeclaration[19718-20123]"
    }, {
      "left" : "private void writeObject(ObjectOutputStream oos)\n        throws IOException",
      "right" : "private void writeObject(ObjectOutputStream oos)\n        throws IOException",
      "info" : "MethodDeclaration[20081-20414]:MethodDeclaration[20129-20462]"
    }, {
      "left" : "private void readObject(ObjectInputStream ois)\n      throws ClassNotFoundException, IOException",
      "right" : "private void readObject(ObjectInputStream ois)\n      throws ClassNotFoundException, IOException",
      "info" : "MethodDeclaration[20420-20872]:MethodDeclaration[20468-20920]"
    } ],
    "mappings" : [
 {
      "left" : "SimplexTableau",
      "right" : "SimplexTableau",
      "info" : "SimpleName[3752-3766]:SimpleName[3752-3766]"
    }, {
      "left" : "final LinearObjectiveFunction f",
      "right" : "final LinearObjectiveFunction f",
      "info" : "SingleVariableDeclaration[3767-3798]:SingleVariableDeclaration[3767-3798]"
    }, {
      "left" : "final Collection<LinearConstraint> constraints",
      "right" : "final Collection<LinearConstraint> constraints",
      "info" : "SingleVariableDeclaration[3819-3865]:SingleVariableDeclaration[3819-3865]"
    }, {
      "left" : "final GoalType goalType",
      "right" : "final GoalType goalType",
      "info" : "SingleVariableDeclaration[3886-3909]:SingleVariableDeclaration[3886-3909]"
    }, {
      "left" : "final boolean restrictToNonNegative",
      "right" : "final boolean restrictToNonNegative",
      "info" : "SingleVariableDeclaration[3911-3946]:SingleVariableDeclaration[3911-3946]"
    }, {
      "left" : "final double epsilon",
      "right" : "final double epsilon",
      "info" : "SingleVariableDeclaration[3967-3987]:SingleVariableDeclaration[3967-3987]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3989-4729]:Block[3989-4729]"
    }, {
      "left" : "this.f                      = f;",
      "right" : "this.f                      = f;",
      "info" : "ExpressionStatement[3999-4031]:ExpressionStatement[3999-4031]"
    }, {
      "left" : "this.constraints            = constraints;",
      "right" : "this.constraints            = constraints;",
      "info" : "ExpressionStatement[4040-4082]:ExpressionStatement[4040-4082]"
    }, {
      "left" : "this.restrictToNonNegative  = restrictToNonNegative;",
      "right" : "this.restrictToNonNegative  = restrictToNonNegative;",
      "info" : "ExpressionStatement[4091-4143]:ExpressionStatement[4091-4143]"
    }, {
      "left" : "this.epsilon                = epsilon;",
      "right" : "this.epsilon                = epsilon;",
      "info" : "ExpressionStatement[4152-4190]:ExpressionStatement[4152-4190]"
    }, {
      "left" : "this.numDecisionVariables   = getNumVariables() + (restrictToNonNegative ? 0 : 1);",
      "right" : "this.numDecisionVariables   = getNumVariables() + (restrictToNonNegative ? 0 : 1);",
      "info" : "ExpressionStatement[4199-4281]:ExpressionStatement[4199-4281]"
    }, {
      "left" : "this.numSlackVariables      = getConstraintTypeCounts(Relationship.LEQ) +\n                                      getConstraintTypeCounts(Relationship.GEQ);",
      "right" : "this.numSlackVariables      = getConstraintTypeCounts(Relationship.LEQ) +\n                                      getConstraintTypeCounts(Relationship.GEQ);",
      "info" : "ExpressionStatement[4290-4444]:ExpressionStatement[4290-4444]"
    }, {
      "left" : "this.numArtificialVariables = getConstraintTypeCounts(Relationship.EQ) +\n                                      getConstraintTypeCounts(Relationship.GEQ);",
      "right" : "this.numArtificialVariables = getConstraintTypeCounts(Relationship.EQ) +\n                                      getConstraintTypeCounts(Relationship.GEQ);",
      "info" : "ExpressionStatement[4453-4606]:ExpressionStatement[4453-4606]"
    }, {
      "left" : "this.tableau = new Array2DRowRealMatrix(createTableau(goalType == GoalType.MAXIMIZE));",
      "right" : "this.tableau = new Array2DRowRealMatrix(createTableau(goalType == GoalType.MAXIMIZE));",
      "info" : "ExpressionStatement[4615-4701]:ExpressionStatement[4615-4701]"
    }, {
      "left" : "initialize();",
      "right" : "initialize();",
      "info" : "ExpressionStatement[4710-4723]:ExpressionStatement[4710-4723]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[4894-4903]:Modifier[4894-4903]"
    }, {
      "left" : "double[][]",
      "right" : "double[][]",
      "info" : "ArrayType[4904-4914]:ArrayType[4904-4914]"
    }, {
      "left" : "createTableau",
      "right" : "createTableau",
      "info" : "SimpleName[4915-4928]:SimpleName[4915-4928]"
    }, {
      "left" : "final boolean maximize",
      "right" : "final boolean maximize",
      "info" : "SingleVariableDeclaration[4929-4951]:SingleVariableDeclaration[4929-4951]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4953-7816]:Block[4953-7816]"
    }, {
      "left" : "List<LinearConstraint> constraints = getNormalizedConstraints();",
      "right" : "List<LinearConstraint> constraints = getNormalizedConstraints();",
      "info" : "VariableDeclarationStatement[5011-5075]:VariableDeclarationStatement[5011-5075]"
    }, {
      "left" : "int width = numDecisionVariables + numSlackVariables +\n        numArtificialVariables + getNumObjectiveFunctions() + 1;",
      "right" : "int width = numDecisionVariables + numSlackVariables +\n        numArtificialVariables + getNumObjectiveFunctions() + 1;",
      "info" : "VariableDeclarationStatement[5084-5203]:VariableDeclarationStatement[5084-5203]"
    }, {
      "left" : "int height = constraints.size() + getNumObjectiveFunctions();",
      "right" : "int height = constraints.size() + getNumObjectiveFunctions();",
      "info" : "VariableDeclarationStatement[5230-5291]:VariableDeclarationStatement[5230-5291]"
    }, {
      "left" : "double[][] matrix = new double[height][width];",
      "right" : "double[][] matrix = new double[height][width];",
      "info" : "VariableDeclarationStatement[5300-5346]:VariableDeclarationStatement[5300-5346]"
    }, {
      "left" : "if (getNumObjectiveFunctions() == 2)",
      "right" : "if (getNumObjectiveFunctions() == 2)",
      "info" : "IfStatement[5406-5485]:IfStatement[5406-5485]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5443-5485]:Block[5443-5485]"
    }, {
      "left" : "matrix[0][0] = -1;",
      "right" : "matrix[0][0] = -1;",
      "info" : "ExpressionStatement[5457-5475]:ExpressionStatement[5457-5475]"
    }, {
      "left" : "int zIndex = (getNumObjectiveFunctions() == 1) ? 0 : 1;",
      "right" : "int zIndex = (getNumObjectiveFunctions() == 1) ? 0 : 1;",
      "info" : "VariableDeclarationStatement[5494-5549]:VariableDeclarationStatement[5494-5549]"
    }, {
      "left" : "matrix[zIndex][zIndex] = maximize ? 1 : -1;",
      "right" : "matrix[zIndex][zIndex] = maximize ? 1 : -1;",
      "info" : "ExpressionStatement[5558-5601]:ExpressionStatement[5558-5601]"
    }, {
      "left" : "RealVector objectiveCoefficients =\n            maximize ? f.getCoefficients().mapMultiply(-1) : f.getCoefficients();",
      "right" : "RealVector objectiveCoefficients =\n            maximize ? f.getCoefficients().mapMultiply(-1) : f.getCoefficients();",
      "info" : "VariableDeclarationStatement[5610-5726]:VariableDeclarationStatement[5610-5726]"
    }, {
      "left" : "copyArray(objectiveCoefficients.getData(), matrix[zIndex], getNumObjectiveFunctions());",
      "right" : "copyArray(objectiveCoefficients.getData(), matrix[zIndex], getNumObjectiveFunctions());",
      "info" : "ExpressionStatement[5739-5826]:ExpressionStatement[5739-5826]"
    }, {
      "left" : "matrix[zIndex][width - 1] =\n                maximize ? f.getConstantTerm() : -1 * f.getConstantTerm();",
      "right" : "matrix[zIndex][width - 1] =\n                maximize ? f.getConstantTerm() : -1 * f.getConstantTerm();",
      "info" : "ExpressionStatement[5839-5941]:ExpressionStatement[5839-5941]"
    }, {
      "left" : "if (!restrictToNonNegative)",
      "right" : "if (!restrictToNonNegative)",
      "info" : "IfStatement[5959-6148]:IfStatement[5959-6148]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5987-6148]:Block[5987-6148]"
    }, {
      "left" : "matrix[zIndex][getSlackVariableOffset() - 1] =\n                        getInvertedCoeffiecientSum(objectiveCoefficients);",
      "right" : "matrix[zIndex][getSlackVariableOffset() - 1] =\n                        getInvertedCoeffiecientSum(objectiveCoefficients);",
      "info" : "ExpressionStatement[6009-6130]:ExpressionStatement[6009-6130]"
    }, {
      "left" : "int slackVar = 0;",
      "right" : "int slackVar = 0;",
      "info" : "VariableDeclarationStatement[6216-6233]:VariableDeclarationStatement[6216-6233]"
    }, {
      "left" : "int artificialVar = 0;",
      "right" : "int artificialVar = 0;",
      "info" : "VariableDeclarationStatement[6250-6272]:VariableDeclarationStatement[6250-6272]"
    }, {
      "left" : "for (int i = 0; i < constraints.size(); i++)",
      "right" : "for (int i = 0; i < constraints.size(); i++)",
      "info" : "ForStatement[6289-7778]:ForStatement[6289-7778]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6334-7778]:Block[6334-7778]"
    }, {
      "left" : "LinearConstraint constraint = constraints.get(i);",
      "right" : "LinearConstraint constraint = constraints.get(i);",
      "info" : "VariableDeclarationStatement[6356-6405]:VariableDeclarationStatement[6356-6405]"
    }, {
      "left" : "int row = getNumObjectiveFunctions() + i;",
      "right" : "int row = getNumObjectiveFunctions() + i;",
      "info" : "VariableDeclarationStatement[6426-6467]:VariableDeclarationStatement[6426-6467]"
    }, {
      "left" : "copyArray(constraint.getCoefficients().getData(), matrix[row], 1);",
      "right" : "copyArray(constraint.getCoefficients().getData(), matrix[row], 1);",
      "info" : "ExpressionStatement[6543-6609]:ExpressionStatement[6543-6609]"
    }, {
      "left" : "if (!restrictToNonNegative)",
      "right" : "if (!restrictToNonNegative)",
      "info" : "IfStatement[6657-6862]:IfStatement[6657-6862]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6685-6862]:Block[6685-6862]"
    }, {
      "left" : "matrix[row][getSlackVariableOffset() - 1] =\n                            getInvertedCoeffiecientSum(constraint.getCoefficients());",
      "right" : "matrix[row][getSlackVariableOffset() - 1] =\n                            getInvertedCoeffiecientSum(constraint.getCoefficients());",
      "info" : "ExpressionStatement[6711-6840]:ExpressionStatement[6711-6840]"
    }, {
      "left" : "matrix[row][width - 1] = constraint.getValue();",
      "right" : "matrix[row][width - 1] = constraint.getValue();",
      "info" : "ExpressionStatement[6911-6958]:ExpressionStatement[6911-6958]"
    }, {
      "left" : "if (constraint.getRelationship() == Relationship.LEQ)",
      "right" : "if (constraint.getRelationship() == Relationship.LEQ)",
      "info" : "IfStatement[7019-7360]:IfStatement[7019-7360]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7073-7186]:Block[7073-7186]"
    }, {
      "left" : "matrix[row][getSlackVariableOffset() + slackVar++] = 1;",
      "right" : "matrix[row][getSlackVariableOffset() + slackVar++] = 1;",
      "info" : "ExpressionStatement[7099-7154]:ExpressionStatement[7099-7154]"
    }, {
      "left" : "if (constraint.getRelationship() == Relationship.GEQ)",
      "right" : "if (constraint.getRelationship() == Relationship.GEQ)",
      "info" : "IfStatement[7192-7360]:IfStatement[7192-7360]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7246-7360]:Block[7246-7360]"
    }, {
      "left" : "matrix[row][getSlackVariableOffset() + slackVar++] = -1;",
      "right" : "matrix[row][getSlackVariableOffset() + slackVar++] = -1;",
      "info" : "ExpressionStatement[7272-7328]:ExpressionStatement[7272-7328]"
    }, {
      "left" : "if ((constraint.getRelationship() == Relationship.EQ) ||\n                        (constraint.getRelationship() == Relationship.GEQ))",
      "right" : "if ((constraint.getRelationship() == Relationship.EQ) ||\n                        (constraint.getRelationship() == Relationship.GEQ))",
      "info" : "IfStatement[7426-7760]:IfStatement[7426-7760]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7559-7760]:Block[7559-7760]"
    }, {
      "left" : "matrix[0][getArtificialVariableOffset() + artificialVar] = 1;",
      "right" : "matrix[0][getArtificialVariableOffset() + artificialVar] = 1;",
      "info" : "ExpressionStatement[7585-7646]:ExpressionStatement[7585-7646]"
    }, {
      "left" : "matrix[row][getArtificialVariableOffset() + artificialVar++] = 1;",
      "right" : "matrix[row][getArtificialVariableOffset() + artificialVar++] = 1;",
      "info" : "ExpressionStatement[7672-7737]:ExpressionStatement[7672-7737]"
    }, {
      "left" : "return matrix;",
      "right" : "return matrix;",
      "info" : "ReturnStatement[7796-7810]:ReturnStatement[7796-7810]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7902-7908]:Modifier[7902-7908]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[7909-7912]:PrimitiveType[7909-7912]"
    }, {
      "left" : "getNumVariables",
      "right" : "getNumVariables",
      "info" : "SimpleName[7913-7928]:SimpleName[7913-7928]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7931-7989]:Block[7931-7989]"
    }, {
      "left" : "return f.getCoefficients().getDimension();",
      "right" : "return f.getCoefficients().getDimension();",
      "info" : "ReturnStatement[7941-7983]:ReturnStatement[7941-7983]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8139-8145]:Modifier[8139-8145]"
    }, {
      "left" : "List<LinearConstraint>",
      "right" : "List<LinearConstraint>",
      "info" : "ParameterizedType[8146-8168]:ParameterizedType[8146-8168]"
    }, {
      "left" : "getNormalizedConstraints",
      "right" : "getNormalizedConstraints",
      "info" : "SimpleName[8169-8193]:SimpleName[8169-8193]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8196-8428]:Block[8196-8428]"
    }, {
      "left" : "List<LinearConstraint> normalized = new ArrayList<LinearConstraint>();",
      "right" : "List<LinearConstraint> normalized = new ArrayList<LinearConstraint>();",
      "info" : "VariableDeclarationStatement[8206-8276]:VariableDeclarationStatement[8206-8276]"
    }, {
      "left" : "for (LinearConstraint constraint : constraints)",
      "right" : "for (LinearConstraint constraint : constraints)",
      "info" : "EnhancedForStatement[8285-8395]:EnhancedForStatement[8285-8395]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8333-8395]:Block[8333-8395]"
    }, {
      "left" : "normalized.add(normalize(constraint));",
      "right" : "normalized.add(normalize(constraint));",
      "info" : "ExpressionStatement[8347-8385]:ExpressionStatement[8347-8385]"
    }, {
      "left" : "return normalized;",
      "right" : "return normalized;",
      "info" : "ReturnStatement[8404-8422]:ReturnStatement[8404-8422]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[8606-8613]:Modifier[8606-8613]"
    }, {
      "left" : "LinearConstraint",
      "right" : "LinearConstraint",
      "info" : "SimpleType[8614-8630]:SimpleType[8614-8630]"
    }, {
      "left" : "normalize",
      "right" : "normalize",
      "info" : "SimpleName[8631-8640]:SimpleName[8631-8640]"
    }, {
      "left" : "final LinearConstraint constraint",
      "right" : "final LinearConstraint constraint",
      "info" : "SingleVariableDeclaration[8641-8674]:SingleVariableDeclaration[8641-8674]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8676-9139]:Block[8676-9139]"
    }, {
      "left" : "if (constraint.getValue() < 0)",
      "right" : "if (constraint.getValue() < 0)",
      "info" : "IfStatement[8686-8976]:IfStatement[8686-8976]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8717-8976]:Block[8717-8976]"
    }, {
      "left" : "return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),\n                                        constraint.getRelationship().oppositeRelationship(),\n                                        -1 * constraint.getValue());",
      "right" : "return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),\n                                        constraint.getRelationship().oppositeRelationship(),\n                                        -1 * constraint.getValue());",
      "info" : "ReturnStatement[8731-8966]:ReturnStatement[8731-8966]"
    }, {
      "left" : "return new LinearConstraint(constraint.getCoefficients(), \n                                    constraint.getRelationship(), constraint.getValue());",
      "right" : "return new LinearConstraint(constraint.getCoefficients(), \n                                    constraint.getRelationship(), constraint.getValue());",
      "info" : "ReturnStatement[8985-9133]:ReturnStatement[8985-9133]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[9269-9278]:Modifier[9269-9278]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[9279-9284]:Modifier[9279-9284]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[9285-9288]:PrimitiveType[9285-9288]"
    }, {
      "left" : "getNumObjectiveFunctions",
      "right" : "getNumObjectiveFunctions",
      "info" : "SimpleName[9289-9313]:SimpleName[9289-9313]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9316-9379]:Block[9316-9379]"
    }, {
      "left" : "return this.numArtificialVariables > 0 ? 2 : 1;",
      "right" : "return this.numArtificialVariables > 0 ? 2 : 1;",
      "info" : "ReturnStatement[9326-9373]:ReturnStatement[9326-9373]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[9595-9602]:Modifier[9595-9602]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[9603-9606]:PrimitiveType[9603-9606]"
    }, {
      "left" : "getConstraintTypeCounts",
      "right" : "getConstraintTypeCounts",
      "info" : "SimpleName[9607-9630]:SimpleName[9607-9630]"
    }, {
      "left" : "final Relationship relationship",
      "right" : "final Relationship relationship",
      "info" : "SingleVariableDeclaration[9631-9662]:SingleVariableDeclaration[9631-9662]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9664-9893]:Block[9664-9893]"
    }, {
      "left" : "int count = 0;",
      "right" : "int count = 0;",
      "info" : "VariableDeclarationStatement[9674-9688]:VariableDeclarationStatement[9674-9688]"
    }, {
      "left" : "for (final LinearConstraint constraint : constraints)",
      "right" : "for (final LinearConstraint constraint : constraints)",
      "info" : "EnhancedForStatement[9697-9865]:EnhancedForStatement[9697-9865]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9751-9865]:Block[9751-9865]"
    }, {
      "left" : "if (constraint.getRelationship() == relationship)",
      "right" : "if (constraint.getRelationship() == relationship)",
      "info" : "IfStatement[9765-9855]:IfStatement[9765-9855]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9815-9855]:Block[9815-9855]"
    }, {
      "left" : "++count;",
      "right" : "++count;",
      "info" : "ExpressionStatement[9833-9841]:ExpressionStatement[9833-9841]"
    }, {
      "left" : "return count;",
      "right" : "return count;",
      "info" : "ReturnStatement[9874-9887]:ReturnStatement[9874-9887]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[10058-10065]:Modifier[10058-10065]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[10066-10070]:PrimitiveType[10066-10070]"
    }, {
      "left" : "initialize",
      "right" : "initialize",
      "info" : "SimpleName[10071-10081]:SimpleName[10071-10081]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10084-10316]:Block[10084-10316]"
    }, {
      "left" : "for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++)",
      "right" : "for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++)",
      "info" : "ForStatement[10094-10310]:ForStatement[10094-10310]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10179-10310]:Block[10179-10310]"
    }, {
      "left" : "int row = getBasicRow(getArtificialVariableOffset() + artificialVar);",
      "right" : "int row = getBasicRow(getArtificialVariableOffset() + artificialVar);",
      "info" : "VariableDeclarationStatement[10193-10262]:VariableDeclarationStatement[10193-10262]"
    }, {
      "left" : "subtractRow(0, row, 1.0);",
      "right" : "subtractRow(0, row, 1.0);",
      "info" : "ExpressionStatement[10275-10300]:ExpressionStatement[10275-10300]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[10533-10542]:Modifier[10533-10542]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[10543-10549]:Modifier[10543-10549]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[10550-10556]:PrimitiveType[10550-10556]"
    }, {
      "left" : "getInvertedCoeffiecientSum",
      "right" : "getInvertedCoeffiecientSum",
      "info" : "SimpleName[10557-10583]:SimpleName[10557-10583]"
    }, {
      "left" : "final RealVector coefficients",
      "right" : "final RealVector coefficients",
      "info" : "SingleVariableDeclaration[10584-10613]:SingleVariableDeclaration[10584-10613]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10615-10768]:Block[10615-10768]"
    }, {
      "left" : "double sum = 0;",
      "right" : "double sum = 0;",
      "info" : "VariableDeclarationStatement[10625-10640]:VariableDeclarationStatement[10625-10640]"
    }, {
      "left" : "for (double coefficient : coefficients.getData())",
      "right" : "for (double coefficient : coefficients.getData())",
      "info" : "EnhancedForStatement[10649-10742]:EnhancedForStatement[10649-10742]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10699-10742]:Block[10699-10742]"
    }, {
      "left" : "sum -= coefficient;",
      "right" : "sum -= coefficient;",
      "info" : "ExpressionStatement[10713-10732]:ExpressionStatement[10713-10732]"
    }, {
      "left" : "return sum;",
      "right" : "return sum;",
      "info" : "ReturnStatement[10751-10762]:ReturnStatement[10751-10762]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[10973-10980]:Modifier[10973-10980]"
    }, {
      "left" : "Integer",
      "right" : "Integer",
      "info" : "SimpleType[10981-10988]:SimpleType[10981-10988]"
    }, {
      "left" : "getBasicRow",
      "right" : "getBasicRow",
      "info" : "SimpleName[10989-11000]:SimpleName[10989-11000]"
    }, {
      "left" : "final int col",
      "right" : "final int col",
      "info" : "SingleVariableDeclaration[11001-11014]:SingleVariableDeclaration[11001-11014]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11016-11062]:Block[11016-11062]"
    }, {
      "left" : "return getBasicRow(col, true);",
      "right" : "return getBasicRow(col, true);",
      "info" : "ReturnStatement[11026-11056]:ReturnStatement[11026-11056]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[11267-11274]:Modifier[11267-11274]"
    }, {
      "left" : "Integer",
      "right" : "Integer",
      "info" : "SimpleType[11275-11282]:SimpleType[11275-11282]"
    }, {
      "left" : "getBasicRowForSolution",
      "right" : "getBasicRowForSolution",
      "info" : "SimpleName[11283-11305]:SimpleName[11283-11305]"
    }, {
      "left" : "final int col",
      "right" : "final int col",
      "info" : "SingleVariableDeclaration[11306-11319]:SingleVariableDeclaration[11306-11319]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11321-11368]:Block[11321-11368]"
    }, {
      "left" : "return getBasicRow(col, false);",
      "right" : "return getBasicRow(col, false);",
      "info" : "ReturnStatement[11331-11362]:ReturnStatement[11331-11362]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[12155-12164]:Modifier[12181-12190]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[12165-12169]:PrimitiveType[12191-12195]"
    }, {
      "left" : "discardArtificialVariables",
      "right" : "discardArtificialVariables",
      "info" : "SimpleName[12170-12196]:SimpleName[12196-12222]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12199-12771]:Block[12225-12797]"
    }, {
      "left" : "if (numArtificialVariables == 0)",
      "right" : "if (numArtificialVariables == 0)",
      "info" : "IfStatement[12209-12273]:IfStatement[12235-12299]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12242-12273]:Block[12268-12299]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[12256-12263]:ReturnStatement[12282-12289]"
    }, {
      "left" : "int width = getWidth() - numArtificialVariables - 1;",
      "right" : "int width = getWidth() - numArtificialVariables - 1;",
      "info" : "VariableDeclarationStatement[12282-12334]:VariableDeclarationStatement[12308-12360]"
    }, {
      "left" : "int height = getHeight() - 1;",
      "right" : "int height = getHeight() - 1;",
      "info" : "VariableDeclarationStatement[12343-12372]:VariableDeclarationStatement[12369-12398]"
    }, {
      "left" : "double[][] matrix = new double[height][width];",
      "right" : "double[][] matrix = new double[height][width];",
      "info" : "VariableDeclarationStatement[12381-12427]:VariableDeclarationStatement[12407-12453]"
    }, {
      "left" : "for (int i = 0; i < height; i++)",
      "right" : "for (int i = 0; i < height; i++)",
      "info" : "ForStatement[12436-12667]:ForStatement[12462-12693]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12469-12667]:Block[12495-12693]"
    }, {
      "left" : "for (int j = 0; j < width - 1; j++)",
      "right" : "for (int j = 0; j < width - 1; j++)",
      "info" : "ForStatement[12483-12589]:ForStatement[12509-12615]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12519-12589]:Block[12545-12615]"
    }, {
      "left" : "matrix[i][j] = getEntry(i + 1, j + 1);",
      "right" : "matrix[i][j] = getEntry(i + 1, j + 1);",
      "info" : "ExpressionStatement[12537-12575]:ExpressionStatement[12563-12601]"
    }, {
      "left" : "matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());",
      "right" : "matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());",
      "info" : "ExpressionStatement[12602-12657]:ExpressionStatement[12628-12683]"
    }, {
      "left" : "this.tableau = new Array2DRowRealMatrix(matrix);",
      "right" : "this.tableau = new Array2DRowRealMatrix(matrix);",
      "info" : "ExpressionStatement[12676-12724]:ExpressionStatement[12702-12750]"
    }, {
      "left" : "this.numArtificialVariables = 0;",
      "right" : "this.numArtificialVariables = 0;",
      "info" : "ExpressionStatement[12733-12765]:ExpressionStatement[12759-12791]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[12917-12924]:Modifier[12943-12950]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[12925-12929]:PrimitiveType[12951-12955]"
    }, {
      "left" : "copyArray",
      "right" : "copyArray",
      "info" : "SimpleName[12930-12939]:SimpleName[12956-12965]"
    }, {
      "left" : "final double[] src",
      "right" : "final double[] src",
      "info" : "SingleVariableDeclaration[12940-12958]:SingleVariableDeclaration[12966-12984]"
    }, {
      "left" : "final double[] dest",
      "right" : "final double[] dest",
      "info" : "SingleVariableDeclaration[12960-12979]:SingleVariableDeclaration[12986-13005]"
    }, {
      "left" : "final int destPos",
      "right" : "final int destPos",
      "info" : "SingleVariableDeclaration[13008-13025]:SingleVariableDeclaration[13034-13051]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13027-13115]:Block[13053-13141]"
    }, {
      "left" : "System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);",
      "right" : "System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);",
      "info" : "ExpressionStatement[13037-13108]:ExpressionStatement[13063-13134]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[14573-14582]:Modifier[14621-14630]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[14583-14587]:PrimitiveType[14631-14635]"
    }, {
      "left" : "divideRow",
      "right" : "divideRow",
      "info" : "SimpleName[14588-14597]:SimpleName[14636-14645]"
    }, {
      "left" : "final int dividendRow",
      "right" : "final int dividendRow",
      "info" : "SingleVariableDeclaration[14598-14619]:SingleVariableDeclaration[14646-14667]"
    }, {
      "left" : "final double divisor",
      "right" : "final double divisor",
      "info" : "SingleVariableDeclaration[14621-14641]:SingleVariableDeclaration[14669-14689]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14643-14797]:Block[14691-14845]"
    }, {
      "left" : "for (int j = 0; j < getWidth(); j++)",
      "right" : "for (int j = 0; j < getWidth(); j++)",
      "info" : "ForStatement[14653-14791]:ForStatement[14701-14839]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14690-14791]:Block[14738-14839]"
    }, {
      "left" : "tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);",
      "right" : "tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);",
      "info" : "ExpressionStatement[14704-14781]:ExpressionStatement[14752-14829]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[15142-15151]:Modifier[15190-15199]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[15152-15156]:PrimitiveType[15200-15204]"
    }, {
      "left" : "subtractRow",
      "right" : "subtractRow",
      "info" : "SimpleName[15157-15168]:SimpleName[15205-15216]"
    }, {
      "left" : "final int minuendRow",
      "right" : "final int minuendRow",
      "info" : "SingleVariableDeclaration[15169-15189]:SingleVariableDeclaration[15217-15237]"
    }, {
      "left" : "final int subtrahendRow",
      "right" : "final int subtrahendRow",
      "info" : "SingleVariableDeclaration[15191-15214]:SingleVariableDeclaration[15239-15262]"
    }, {
      "left" : "final double multiple",
      "right" : "final double multiple",
      "info" : "SingleVariableDeclaration[15247-15268]:SingleVariableDeclaration[15295-15316]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15270-15489]:Block[15318-15537]"
    }, {
      "left" : "for (int j = 0; j < getWidth(); j++)",
      "right" : "for (int j = 0; j < getWidth(); j++)",
      "info" : "ForStatement[15280-15483]:ForStatement[15328-15531]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15317-15483]:Block[15365-15531]"
    }, {
      "left" : "tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) -\n                             multiple * tableau.getEntry(subtrahendRow, j));",
      "right" : "tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) -\n                             multiple * tableau.getEntry(subtrahendRow, j));",
      "info" : "ExpressionStatement[15331-15473]:ExpressionStatement[15379-15521]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[15584-15593]:Modifier[15632-15641]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[15594-15599]:Modifier[15642-15647]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[15600-15603]:PrimitiveType[15648-15651]"
    }, {
      "left" : "getWidth",
      "right" : "getWidth",
      "info" : "SimpleName[15604-15612]:SimpleName[15652-15660]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15615-15667]:Block[15663-15715]"
    }, {
      "left" : "return tableau.getColumnDimension();",
      "right" : "return tableau.getColumnDimension();",
      "info" : "ReturnStatement[15625-15661]:ReturnStatement[15673-15709]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[15764-15773]:Modifier[15812-15821]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[15774-15779]:Modifier[15822-15827]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[15780-15783]:PrimitiveType[15828-15831]"
    }, {
      "left" : "getHeight",
      "right" : "getHeight",
      "info" : "SimpleName[15784-15793]:SimpleName[15832-15841]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15796-15845]:Block[15844-15893]"
    }, {
      "left" : "return tableau.getRowDimension();",
      "right" : "return tableau.getRowDimension();",
      "info" : "ReturnStatement[15806-15839]:ReturnStatement[15854-15887]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[15996-16005]:Modifier[16044-16053]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[16006-16011]:Modifier[16054-16059]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[16012-16018]:PrimitiveType[16060-16066]"
    }, {
      "left" : "getEntry",
      "right" : "getEntry",
      "info" : "SimpleName[16019-16027]:SimpleName[16067-16075]"
    }, {
      "left" : "final int row",
      "right" : "final int row",
      "info" : "SingleVariableDeclaration[16028-16041]:SingleVariableDeclaration[16076-16089]"
    }, {
      "left" : "final int column",
      "right" : "final int column",
      "info" : "SingleVariableDeclaration[16043-16059]:SingleVariableDeclaration[16091-16107]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16061-16114]:Block[16109-16162]"
    }, {
      "left" : "return tableau.getEntry(row, column);",
      "right" : "return tableau.getEntry(row, column);",
      "info" : "ReturnStatement[16071-16108]:ReturnStatement[16119-16156]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[16261-16270]:Modifier[16309-16318]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[16271-16276]:Modifier[16319-16324]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[16277-16281]:PrimitiveType[16325-16329]"
    }, {
      "left" : "setEntry",
      "right" : "setEntry",
      "info" : "SimpleName[16282-16290]:SimpleName[16330-16338]"
    }, {
      "left" : "final int row",
      "right" : "final int row",
      "info" : "SingleVariableDeclaration[16291-16304]:SingleVariableDeclaration[16339-16352]"
    }, {
      "left" : "final int column",
      "right" : "final int column",
      "info" : "SingleVariableDeclaration[16306-16322]:SingleVariableDeclaration[16354-16370]"
    }, {
      "left" : "final double value",
      "right" : "final double value",
      "info" : "SingleVariableDeclaration[16358-16376]:SingleVariableDeclaration[16406-16424]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16378-16431]:Block[16426-16479]"
    }, {
      "left" : "tableau.setEntry(row, column, value);",
      "right" : "tableau.setEntry(row, column, value);",
      "info" : "ExpressionStatement[16388-16425]:ExpressionStatement[16436-16473]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[16554-16563]:Modifier[16602-16611]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[16564-16569]:Modifier[16612-16617]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[16570-16573]:PrimitiveType[16618-16621]"
    }, {
      "left" : "getSlackVariableOffset",
      "right" : "getSlackVariableOffset",
      "info" : "SimpleName[16574-16596]:SimpleName[16622-16644]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16599-16672]:Block[16647-16720]"
    }, {
      "left" : "return getNumObjectiveFunctions() + numDecisionVariables;",
      "right" : "return getNumObjectiveFunctions() + numDecisionVariables;",
      "info" : "ReturnStatement[16609-16666]:ReturnStatement[16657-16714]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[16805-16814]:Modifier[16853-16862]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[16815-16820]:Modifier[16863-16868]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[16821-16824]:PrimitiveType[16869-16872]"
    }, {
      "left" : "getArtificialVariableOffset",
      "right" : "getArtificialVariableOffset",
      "info" : "SimpleName[16825-16852]:SimpleName[16873-16900]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16855-16948]:Block[16903-16996]"
    }, {
      "left" : "return getNumObjectiveFunctions() + numDecisionVariables + numSlackVariables;",
      "right" : "return getNumObjectiveFunctions() + numDecisionVariables + numSlackVariables;",
      "info" : "ReturnStatement[16865-16942]:ReturnStatement[16913-16990]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[17061-17070]:Modifier[17109-17118]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[17071-17076]:Modifier[17119-17124]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[17077-17080]:PrimitiveType[17125-17128]"
    }, {
      "left" : "getRhsOffset",
      "right" : "getRhsOffset",
      "info" : "SimpleName[17081-17093]:SimpleName[17129-17141]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17096-17134]:Block[17144-17182]"
    }, {
      "left" : "return getWidth() - 1;",
      "right" : "return getWidth() - 1;",
      "info" : "ReturnStatement[17106-17128]:ReturnStatement[17154-17176]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[17330-17339]:Modifier[17378-17387]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[17340-17345]:Modifier[17388-17393]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[17346-17349]:PrimitiveType[17394-17397]"
    }, {
      "left" : "getNegativeDecisionVariableOffset",
      "right" : "getNegativeDecisionVariableOffset",
      "info" : "SimpleName[17350-17383]:SimpleName[17398-17431]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17386-17470]:Block[17434-17518]"
    }, {
      "left" : "return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();",
      "right" : "return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();",
      "info" : "ReturnStatement[17394-17464]:ReturnStatement[17442-17512]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[17831-17840]:Modifier[17879-17888]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[17841-17846]:Modifier[17889-17894]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[17847-17850]:PrimitiveType[17895-17898]"
    }, {
      "left" : "getNumDecisionVariables",
      "right" : "getNumDecisionVariables",
      "info" : "SimpleName[17851-17874]:SimpleName[17899-17922]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17877-17921]:Block[17925-17969]"
    }, {
      "left" : "return numDecisionVariables;",
      "right" : "return numDecisionVariables;",
      "info" : "ReturnStatement[17887-17915]:ReturnStatement[17935-17963]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[18089-18098]:Modifier[18137-18146]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[18099-18104]:Modifier[18147-18152]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[18105-18108]:PrimitiveType[18153-18156]"
    }, {
      "left" : "getOriginalNumDecisionVariables",
      "right" : "getOriginalNumDecisionVariables",
      "info" : "SimpleName[18109-18140]:SimpleName[18157-18188]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18143-18238]:Block[18191-18286]"
    }, {
      "left" : "return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;",
      "right" : "return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;",
      "info" : "ReturnStatement[18153-18232]:ReturnStatement[18201-18280]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[18343-18352]:Modifier[18391-18400]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[18353-18358]:Modifier[18401-18406]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[18359-18362]:PrimitiveType[18407-18410]"
    }, {
      "left" : "getNumSlackVariables",
      "right" : "getNumSlackVariables",
      "info" : "SimpleName[18363-18383]:SimpleName[18411-18431]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18386-18427]:Block[18434-18475]"
    }, {
      "left" : "return numSlackVariables;",
      "right" : "return numSlackVariables;",
      "info" : "ReturnStatement[18396-18421]:ReturnStatement[18444-18469]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[18542-18551]:Modifier[18590-18599]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[18552-18557]:Modifier[18600-18605]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[18558-18561]:PrimitiveType[18606-18609]"
    }, {
      "left" : "getNumArtificialVariables",
      "right" : "getNumArtificialVariables",
      "info" : "SimpleName[18562-18587]:SimpleName[18610-18635]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18590-18636]:Block[18638-18684]"
    }, {
      "left" : "return numArtificialVariables;",
      "right" : "return numArtificialVariables;",
      "info" : "ReturnStatement[18600-18630]:ReturnStatement[18648-18678]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[18715-18724]:Modifier[18763-18772]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[18725-18730]:Modifier[18773-18778]"
    }, {
      "left" : "double[][]",
      "right" : "double[][]",
      "info" : "ArrayType[18731-18741]:ArrayType[18779-18789]"
    }, {
      "left" : "getData",
      "right" : "getData",
      "info" : "SimpleName[18742-18749]:SimpleName[18790-18797]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18752-18793]:Block[18800-18841]"
    }, {
      "left" : "return tableau.getData();",
      "right" : "return tableau.getData();",
      "info" : "ReturnStatement[18762-18787]:ReturnStatement[18810-18835]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[18824-18833]:MarkerAnnotation[18872-18881]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[18838-18844]:Modifier[18886-18892]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[18845-18852]:PrimitiveType[18893-18900]"
    }, {
      "left" : "equals",
      "right" : "equals",
      "info" : "SimpleName[18853-18859]:SimpleName[18901-18907]"
    }, {
      "left" : "Object other",
      "right" : "Object other",
      "info" : "SingleVariableDeclaration[18860-18872]:SingleVariableDeclaration[18908-18920]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18874-19660]:Block[18922-19708]"
    }, {
      "left" : "if (this == other)",
      "right" : "if (this == other)",
      "info" : "IfStatement[18883-18933]:IfStatement[18931-18981]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18902-18933]:Block[18950-18981]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[18913-18925]:ReturnStatement[18961-18973]"
    }, {
      "left" : "if (other == null)",
      "right" : "if (other == null)",
      "info" : "IfStatement[18941-18991]:IfStatement[18989-19039]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18960-18991]:Block[19008-19039]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[18970-18983]:ReturnStatement[19018-19031]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[18999-19653]:TryStatement[19047-19701]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19003-19559]:Block[19051-19607]"
    }, {
      "left" : "SimplexTableau rhs = (SimplexTableau) other;",
      "right" : "SimplexTableau rhs = (SimplexTableau) other;",
      "info" : "VariableDeclarationStatement[19016-19060]:VariableDeclarationStatement[19064-19108]"
    }, {
      "left" : "return (restrictToNonNegative  == rhs.restrictToNonNegative) &&\n                 (numDecisionVariables   == rhs.numDecisionVariables) &&\n                 (numSlackVariables      == rhs.numSlackVariables) &&\n                 (numArtificialVariables == rhs.numArtificialVariables) &&\n                 (epsilon                == rhs.epsilon) &&\n                 f.equals(rhs.f) &&\n                 constraints.equals(rhs.constraints) &&\n                 tableau.equals(rhs.tableau);",
      "right" : "return (restrictToNonNegative  == rhs.restrictToNonNegative) &&\n                 (numDecisionVariables   == rhs.numDecisionVariables) &&\n                 (numSlackVariables      == rhs.numSlackVariables) &&\n                 (numArtificialVariables == rhs.numArtificialVariables) &&\n                 (epsilon                == rhs.epsilon) &&\n                 f.equals(rhs.f) &&\n                 constraints.equals(rhs.constraints) &&\n                 tableau.equals(rhs.tableau);",
      "info" : "ReturnStatement[19071-19550]:ReturnStatement[19119-19598]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19590-19653]:Block[19638-19701]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[19632-19645]:ReturnStatement[19680-19693]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[19695-19704]:MarkerAnnotation[19743-19752]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[19709-19715]:Modifier[19757-19763]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[19716-19719]:PrimitiveType[19764-19767]"
    }, {
      "left" : "hashCode",
      "right" : "hashCode",
      "info" : "SimpleName[19720-19728]:SimpleName[19768-19776]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19731-20075]:Block[19779-20123]"
    }, {
      "left" : "return Boolean.valueOf(restrictToNonNegative).hashCode() ^\n               numDecisionVariables ^\n               numSlackVariables ^\n               numArtificialVariables ^\n               Double.valueOf(epsilon).hashCode() ^\n               f.hashCode() ^\n               constraints.hashCode() ^\n               tableau.hashCode();",
      "right" : "return Boolean.valueOf(restrictToNonNegative).hashCode() ^\n               numDecisionVariables ^\n               numSlackVariables ^\n               numArtificialVariables ^\n               Double.valueOf(epsilon).hashCode() ^\n               f.hashCode() ^\n               constraints.hashCode() ^\n               tableau.hashCode();",
      "info" : "ReturnStatement[19741-20069]:ReturnStatement[19789-20117]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[20242-20249]:Modifier[20290-20297]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[20250-20254]:PrimitiveType[20298-20302]"
    }, {
      "left" : "writeObject",
      "right" : "writeObject",
      "info" : "SimpleName[20255-20266]:SimpleName[20303-20314]"
    }, {
      "left" : "ObjectOutputStream oos",
      "right" : "ObjectOutputStream oos",
      "info" : "SingleVariableDeclaration[20267-20289]:SingleVariableDeclaration[20315-20337]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[20306-20317]:SimpleType[20354-20365]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20318-20414]:Block[20366-20462]"
    }, {
      "left" : "oos.defaultWriteObject();",
      "right" : "oos.defaultWriteObject();",
      "info" : "ExpressionStatement[20328-20353]:ExpressionStatement[20376-20401]"
    }, {
      "left" : "MatrixUtils.serializeRealMatrix(tableau, oos);",
      "right" : "MatrixUtils.serializeRealMatrix(tableau, oos);",
      "info" : "ExpressionStatement[20362-20408]:ExpressionStatement[20410-20456]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[20671-20678]:Modifier[20719-20726]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[20679-20683]:PrimitiveType[20727-20731]"
    }, {
      "left" : "readObject",
      "right" : "readObject",
      "info" : "SimpleName[20684-20694]:SimpleName[20732-20742]"
    }, {
      "left" : "ObjectInputStream ois",
      "right" : "ObjectInputStream ois",
      "info" : "SingleVariableDeclaration[20695-20716]:SingleVariableDeclaration[20743-20764]"
    }, {
      "left" : "ClassNotFoundException",
      "right" : "ClassNotFoundException",
      "info" : "SimpleType[20731-20753]:SimpleType[20779-20801]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[20755-20766]:SimpleType[20803-20814]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20767-20872]:Block[20815-20920]"
    }, {
      "left" : "ois.defaultReadObject();",
      "right" : "ois.defaultReadObject();",
      "info" : "ExpressionStatement[20777-20801]:ExpressionStatement[20825-20849]"
    }, {
      "left" : "MatrixUtils.deserializeRealMatrix(this, \"tableau\", ois);",
      "right" : "MatrixUtils.deserializeRealMatrix(this, \"tableau\", ois);",
      "info" : "ExpressionStatement[20810-20866]:ExpressionStatement[20858-20914]"
    } ]
  },
  "interFileMappings" : { }
}