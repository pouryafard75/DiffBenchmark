{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "private static final String VOWELS = \"AEIOUY\";",
      "right" : "private static final String VOWELS = \"AEIOUY\";",
      "info" : "FieldDeclaration[1523-1613]:FieldDeclaration[1523-1613]"
    }, {
      "left" : "private static final String[] SILENT_START = \n    { \"GN\", \"KN\", \"PN\", \"WR\", \"PS\" };",
      "right" : "private static final String[] SILENT_START = \n    { \"GN\", \"KN\", \"PN\", \"WR\", \"PS\" };",
      "info" : "FieldDeclaration[1619-1772]:FieldDeclaration[1619-1772]"
    }, {
      "left" : "private static final String[] L_R_N_M_B_H_F_V_W_SPACE = \n    { \"L\", \"R\", \"N\", \"M\", \"B\", \"H\", \"F\", \"V\", \"W\", \" \" };",
      "right" : "private static final String[] L_R_N_M_B_H_F_V_W_SPACE = \n    { \"L\", \"R\", \"N\", \"M\", \"B\", \"H\", \"F\", \"V\", \"W\", \" \" };",
      "info" : "FieldDeclaration[1777-1891]:FieldDeclaration[1777-1891]"
    }, {
      "left" : "private static final String[] ES_EP_EB_EL_EY_IB_IL_IN_IE_EI_ER = \n    { \"ES\", \"EP\", \"EB\", \"EL\", \"EY\", \"IB\", \"IL\", \"IN\", \"IE\", \"EI\", \"ER\" };",
      "right" : "private static final String[] ES_EP_EB_EL_EY_IB_IL_IN_IE_EI_ER = \n    { \"ES\", \"EP\", \"EB\", \"EL\", \"EY\", \"IB\", \"IL\", \"IN\", \"IE\", \"EI\", \"ER\" };",
      "info" : "FieldDeclaration[1896-2035]:FieldDeclaration[1896-2035]"
    }, {
      "left" : "private static final String[] L_T_K_S_N_M_B_Z = \n    { \"L\", \"T\", \"K\", \"S\", \"N\", \"M\", \"B\", \"Z\" };",
      "right" : "private static final String[] L_T_K_S_N_M_B_Z = \n    { \"L\", \"T\", \"K\", \"S\", \"N\", \"M\", \"B\", \"Z\" };",
      "info" : "FieldDeclaration[2040-2136]:FieldDeclaration[2040-2136]"
    }, {
      "left" : "protected int maxCodeLen = 4;",
      "right" : "protected int maxCodeLen = 4;",
      "info" : "FieldDeclaration[2142-2238]:FieldDeclaration[2142-2238]"
    }, {
      "left" : "public DoubleMetaphone()",
      "right" : "public DoubleMetaphone()",
      "info" : "MethodDeclaration[2244-2368]:MethodDeclaration[2244-2368]"
    }, {
      "left" : "public String doubleMetaphone(String value)",
      "right" : "public String doubleMetaphone(String value)",
      "info" : "MethodDeclaration[2378-2612]:MethodDeclaration[2378-2612]"
    }, {
      "left" : "public String doubleMetaphone(String value, boolean alternate)",
      "right" : "public String doubleMetaphone(String value, boolean alternate)",
      "info" : "MethodDeclaration[2622-6549]:MethodDeclaration[2622-6549]"
    }, {
      "left" : "public Object encode(Object obj) throws EncoderException",
      "right" : "public Object encode(Object obj) throws EncoderException",
      "info" : "MethodDeclaration[6559-7183]:MethodDeclaration[6559-7183]"
    }, {
      "left" : "public String encode(String value)",
      "right" : "public String encode(String value)",
      "info" : "MethodDeclaration[7189-7413]:MethodDeclaration[7189-7413]"
    }, {
      "left" : "public boolean isDoubleMetaphoneEqual(String value1, String value2)",
      "right" : "public boolean isDoubleMetaphoneEqual(String value1, String value2)",
      "info" : "MethodDeclaration[7419-8034]:MethodDeclaration[7419-8034]"
    }, {
      "left" : "public boolean isDoubleMetaphoneEqual(String value1, \n                                          String value2, \n                                          boolean alternate)",
      "right" : "public boolean isDoubleMetaphoneEqual(String value1, \n                                          String value2, \n                                          boolean alternate)",
      "info" : "MethodDeclaration[8044-8903]:MethodDeclaration[8044-8903]"
    }, {
      "left" : "public int getMaxCodeLen()",
      "right" : "public int getMaxCodeLen()",
      "info" : "MethodDeclaration[8913-9045]:MethodDeclaration[8913-9045]"
    }, {
      "left" : "public void setMaxCodeLen(int maxCodeLen)",
      "right" : "public void setMaxCodeLen(int maxCodeLen)",
      "info" : "MethodDeclaration[9051-9229]:MethodDeclaration[9051-9229]"
    }, {
      "left" : "private int handleAEIOUY(String value, DoubleMetaphoneResult result, int \n                             index)",
      "right" : "private int handleAEIOUY(String value, DoubleMetaphoneResult result, int \n                             index)",
      "info" : "MethodDeclaration[9265-9546]:MethodDeclaration[9265-9546]"
    }, {
      "left" : "private int handleC(String value, \n                        DoubleMetaphoneResult result, \n                        int index)",
      "right" : "private int handleC(String value, \n                        DoubleMetaphoneResult result, \n                        int index)",
      "info" : "MethodDeclaration[9556-11567]:MethodDeclaration[9556-11567]"
    }, {
      "left" : "private int handleCC(String value, \n                         DoubleMetaphoneResult result, \n                         int index)",
      "right" : "private int handleCC(String value, \n                         DoubleMetaphoneResult result, \n                         int index)",
      "info" : "MethodDeclaration[11573-12436]:MethodDeclaration[11573-12436]"
    }, {
      "left" : "private int handleCH(String value, \n                         DoubleMetaphoneResult result, \n                         int index)",
      "right" : "private int handleCH(String value, \n                         DoubleMetaphoneResult result, \n                         int index)",
      "info" : "MethodDeclaration[12446-13459]:MethodDeclaration[12446-13459]"
    }, {
      "left" : "private int handleD(String value, \n                        DoubleMetaphoneResult result, \n                        int index)",
      "right" : "private int handleD(String value, \n                        DoubleMetaphoneResult result, \n                        int index)",
      "info" : "MethodDeclaration[13465-14194]:MethodDeclaration[13465-14194]"
    }, {
      "left" : "private int handleGH(String value, \n                         DoubleMetaphoneResult result, \n                         int index)",
      "right" : "private int handleGH(String value, \n                         DoubleMetaphoneResult result, \n                         int index)",
      "info" : "MethodDeclaration[16598-17894]:MethodDeclaration[16598-17894]"
    }, {
      "left" : "private int handleH(String value, \n                        DoubleMetaphoneResult result, \n                        int index)",
      "right" : "private int handleH(String value, \n                        DoubleMetaphoneResult result, \n                        int index)",
      "info" : "MethodDeclaration[17900-18431]:MethodDeclaration[17900-18431]"
    }, {
      "left" : "private int handleJ(String value, DoubleMetaphoneResult result, int index, \n                        boolean slavoGermanic)",
      "right" : "private int handleJ(String value, DoubleMetaphoneResult result, int index, \n                        boolean slavoGermanic)",
      "info" : "MethodDeclaration[18441-19915]:MethodDeclaration[18441-19915]"
    }, {
      "left" : "private int handleL(String value, \n                        DoubleMetaphoneResult result, \n                        int index)",
      "right" : "private int handleL(String value, \n                        DoubleMetaphoneResult result, \n                        int index)",
      "info" : "MethodDeclaration[19925-20430]:MethodDeclaration[19925-20430]"
    }, {
      "left" : "private int handleP(String value, \n                        DoubleMetaphoneResult result, \n                        int index)",
      "right" : "private int handleP(String value, \n                        DoubleMetaphoneResult result, \n                        int index)",
      "info" : "MethodDeclaration[20436-20878]:MethodDeclaration[20436-20878]"
    }, {
      "left" : "private int handleR(String value, \n                        DoubleMetaphoneResult result, \n                        int index, \n                        boolean slavoGermanic)",
      "right" : "private int handleR(String value, \n                        DoubleMetaphoneResult result, \n                        int index, \n                        boolean slavoGermanic)",
      "info" : "MethodDeclaration[20884-21449]:MethodDeclaration[20884-21449]"
    }, {
      "left" : "private int handleS(String value, \n                        DoubleMetaphoneResult result, \n                        int index, \n                        boolean slavoGermanic)",
      "right" : "private int handleS(String value, \n                        DoubleMetaphoneResult result, \n                        int index, \n                        boolean slavoGermanic)",
      "info" : "MethodDeclaration[21455-23682]:MethodDeclaration[21455-23682]"
    }, {
      "left" : "private int handleSC(String value, \n                         DoubleMetaphoneResult result, \n                         int index)",
      "right" : "private int handleSC(String value, \n                         DoubleMetaphoneResult result, \n                         int index)",
      "info" : "MethodDeclaration[23688-24821]:MethodDeclaration[23688-24821]"
    }, {
      "left" : "private int handleT(String value, \n                        DoubleMetaphoneResult result, \n                        int index)",
      "right" : "private int handleT(String value, \n                        DoubleMetaphoneResult result, \n                        int index)",
      "info" : "MethodDeclaration[24827-25917]:MethodDeclaration[24827-25917]"
    }, {
      "left" : "private int handleW(String value, \n                        DoubleMetaphoneResult result, \n                        int index)",
      "right" : "private int handleW(String value, \n                        DoubleMetaphoneResult result, \n                        int index)",
      "info" : "MethodDeclaration[25923-27408]:MethodDeclaration[25923-27408]"
    }, {
      "left" : "private int handleX(String value, \n                        DoubleMetaphoneResult result, \n                        int index)",
      "right" : "private int handleX(String value, \n                        DoubleMetaphoneResult result, \n                        int index)",
      "info" : "MethodDeclaration[27418-28085]:MethodDeclaration[27418-28085]"
    }, {
      "left" : "private int handleZ(String value, DoubleMetaphoneResult result, int index, \n                        boolean slavoGermanic)",
      "right" : "private int handleZ(String value, DoubleMetaphoneResult result, int index, \n                        boolean slavoGermanic)",
      "info" : "MethodDeclaration[28091-28809]:MethodDeclaration[28091-28809]"
    }, {
      "left" : "private boolean conditionC0(String value, int index)",
      "right" : "private boolean conditionC0(String value, int index)",
      "info" : "MethodDeclaration[28847-29449]:MethodDeclaration[28847-29449]"
    }, {
      "left" : "private boolean conditionCH0(String value, int index)",
      "right" : "private boolean conditionCH0(String value, int index)",
      "info" : "MethodDeclaration[29459-29934]:MethodDeclaration[29459-29934]"
    }, {
      "left" : "private boolean conditionCH1(String value, int index)",
      "right" : "private boolean conditionCH1(String value, int index)",
      "info" : "MethodDeclaration[29944-30552]:MethodDeclaration[29944-30552]"
    }, {
      "left" : "private boolean conditionL0(String value, int index)",
      "right" : "private boolean conditionL0(String value, int index)",
      "info" : "MethodDeclaration[30562-31097]:MethodDeclaration[30562-31097]"
    }, {
      "left" : "private boolean conditionM0(String value, int index)",
      "right" : "private boolean conditionM0(String value, int index)",
      "info" : "MethodDeclaration[31107-31471]:MethodDeclaration[31107-31471]"
    }, {
      "left" : "private boolean isSlavoGermanic(String value)",
      "right" : "private boolean isSlavoGermanic(String value)",
      "info" : "MethodDeclaration[31519-31887]:MethodDeclaration[31519-31887]"
    }, {
      "left" : "private boolean isVowel(char ch)",
      "right" : "private boolean isVowel(char ch)",
      "info" : "MethodDeclaration[31893-32053]:MethodDeclaration[31893-32053]"
    }, {
      "left" : "private boolean isSilentStart(String value)",
      "right" : "private boolean isSilentStart(String value)",
      "info" : "MethodDeclaration[32059-32556]:MethodDeclaration[32059-32556]"
    }, {
      "left" : "private String cleanInput(String input)",
      "right" : "private String cleanInput(String input)",
      "info" : "MethodDeclaration[32562-32877]:MethodDeclaration[32562-32877]"
    }, {
      "left" : "protected char charAt(String value, int index)",
      "right" : "protected char charAt(String value, int index)",
      "info" : "MethodDeclaration[32883-33272]:MethodDeclaration[32883-33272]"
    }, {
      "left" : "private static boolean contains(String value, int start, int length, \n                                    String criteria)",
      "right" : "private static boolean contains(String value, int start, int length, \n                                    String criteria)",
      "info" : "MethodDeclaration[33278-33566]:MethodDeclaration[33278-33566]"
    }, {
      "left" : "private static boolean contains(String value, int start, int length, \n                                    String criteria1, String criteria2)",
      "right" : "private static boolean contains(String value, int start, int length, \n                                    String criteria1, String criteria2)",
      "info" : "MethodDeclaration[33572-33891]:MethodDeclaration[33572-33891]"
    }, {
      "left" : "private static boolean contains(String value, int start, int length, \n                                    String criteria1, String criteria2, \n                                    String criteria3)",
      "right" : "private static boolean contains(String value, int start, int length, \n                                    String criteria1, String criteria2, \n                                    String criteria3)",
      "info" : "MethodDeclaration[33897-34282]:MethodDeclaration[33897-34282]"
    }, {
      "left" : "private static boolean contains(String value, int start, int length, \n                                    String criteria1, String criteria2, \n                                    String criteria3, String criteria4)",
      "right" : "private static boolean contains(String value, int start, int length, \n                                    String criteria1, String criteria2, \n                                    String criteria3, String criteria4)",
      "info" : "MethodDeclaration[34288-34742]:MethodDeclaration[34288-34742]"
    }, {
      "left" : "private static boolean contains(String value, int start, int length, \n                                    String criteria1, String criteria2, \n                                    String criteria3, String criteria4, \n                                    String criteria5)",
      "right" : "private static boolean contains(String value, int start, int length, \n                                    String criteria1, String criteria2, \n                                    String criteria3, String criteria4, \n                                    String criteria5)",
      "info" : "MethodDeclaration[34748-35268]:MethodDeclaration[34748-35268]"
    }, {
      "left" : "private static boolean contains(String value, int start, int length, \n                                    String criteria1, String criteria2, \n                                    String criteria3, String criteria4, \n                                    String criteria5, String criteria6)",
      "right" : "private static boolean contains(String value, int start, int length, \n                                    String criteria1, String criteria2, \n                                    String criteria3, String criteria4, \n                                    String criteria5, String criteria6)",
      "info" : "MethodDeclaration[35274-35823]:MethodDeclaration[35274-35823]"
    }, {
      "left" : "protected static boolean contains(String value, int start, int length, \n                                      String[] criteria)",
      "right" : "protected static boolean contains(String value, int start, int length, \n                                      String[] criteria)",
      "info" : "MethodDeclaration[35833-36545]:MethodDeclaration[35833-36545]"
    }, {
      "left" : "DoubleMetaphoneResult",
      "right" : "DoubleMetaphoneResult",
      "info" : "TypeDeclaration[36594-38939]:TypeDeclaration[36594-38939]"
    }, {
      "left" : "private StringBuffer primary = new StringBuffer(getMaxCodeLen());",
      "right" : "private StringBuffer primary = new StringBuffer(getMaxCodeLen());",
      "info" : "FieldDeclaration[36751-36816]:FieldDeclaration[36751-36816]"
    }, {
      "left" : "private StringBuffer alternate = new StringBuffer(getMaxCodeLen());",
      "right" : "private StringBuffer alternate = new StringBuffer(getMaxCodeLen());",
      "info" : "FieldDeclaration[36825-36892]:FieldDeclaration[36825-36892]"
    }, {
      "left" : "private int maxLength;",
      "right" : "private int maxLength;",
      "info" : "FieldDeclaration[36901-36923]:FieldDeclaration[36901-36923]"
    }, {
      "left" : "public DoubleMetaphoneResult(int maxLength)",
      "right" : "public DoubleMetaphoneResult(int maxLength)",
      "info" : "MethodDeclaration[36933-37028]:MethodDeclaration[36933-37028]"
    }, {
      "left" : "public void append(char value)",
      "right" : "public void append(char value)",
      "info" : "MethodDeclaration[37038-37150]:MethodDeclaration[37038-37150]"
    }, {
      "left" : "public void append(char primary, char alternate)",
      "right" : "public void append(char primary, char alternate)",
      "info" : "MethodDeclaration[37160-37296]:MethodDeclaration[37160-37296]"
    }, {
      "left" : "public void appendPrimary(char value)",
      "right" : "public void appendPrimary(char value)",
      "info" : "MethodDeclaration[37306-37471]:MethodDeclaration[37306-37471]"
    }, {
      "left" : "public void appendAlternate(char value)",
      "right" : "public void appendAlternate(char value)",
      "info" : "MethodDeclaration[37481-37652]:MethodDeclaration[37481-37652]"
    }, {
      "left" : "public void append(String value)",
      "right" : "public void append(String value)",
      "info" : "MethodDeclaration[37662-37776]:MethodDeclaration[37662-37776]"
    }, {
      "left" : "public void append(String primary, String alternate)",
      "right" : "public void append(String primary, String alternate)",
      "info" : "MethodDeclaration[37786-37926]:MethodDeclaration[37786-37926]"
    }, {
      "left" : "public void appendPrimary(String value)",
      "right" : "public void appendPrimary(String value)",
      "info" : "MethodDeclaration[37936-38246]:MethodDeclaration[37936-38246]"
    }, {
      "left" : "public void appendAlternate(String value)",
      "right" : "public void appendAlternate(String value)",
      "info" : "MethodDeclaration[38256-38574]:MethodDeclaration[38256-38574]"
    }, {
      "left" : "public String getPrimary()",
      "right" : "public String getPrimary()",
      "info" : "MethodDeclaration[38584-38666]:MethodDeclaration[38584-38666]"
    }, {
      "left" : "public String getAlternate()",
      "right" : "public String getAlternate()",
      "info" : "MethodDeclaration[38676-38762]:MethodDeclaration[38676-38762]"
    }, {
      "left" : "public boolean isComplete()",
      "right" : "public boolean isComplete()",
      "info" : "MethodDeclaration[38772-38933]:MethodDeclaration[38772-38933]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2344-2368]:Block[2344-2368]"
    }, {
      "left" : "super();",
      "right" : "super();",
      "info" : "SuperConstructorInvocation[2354-2362]:SuperConstructorInvocation[2354-2362]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2559-2612]:Block[2559-2612]"
    }, {
      "left" : "return doubleMetaphone(value, false);",
      "right" : "return doubleMetaphone(value, false);",
      "info" : "ReturnStatement[2569-2606]:ReturnStatement[2569-2606]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2916-6549]:Block[2916-6549]"
    }, {
      "left" : "value = cleanInput(value);",
      "right" : "value = cleanInput(value);",
      "info" : "ExpressionStatement[2926-2952]:ExpressionStatement[2926-2952]"
    }, {
      "left" : "if (value == null)",
      "right" : "if (value == null)",
      "info" : "IfStatement[2961-3016]:IfStatement[2961-3016]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2980-3016]:Block[2980-3016]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[2994-3006]:ReturnStatement[2994-3006]"
    }, {
      "left" : "boolean slavoGermanic = isSlavoGermanic(value);",
      "right" : "boolean slavoGermanic = isSlavoGermanic(value);",
      "info" : "VariableDeclarationStatement[3034-3081]:VariableDeclarationStatement[3034-3081]"
    }, {
      "left" : "int index = isSilentStart(value) ? 1 : 0;",
      "right" : "int index = isSilentStart(value) ? 1 : 0;",
      "info" : "VariableDeclarationStatement[3090-3131]:VariableDeclarationStatement[3090-3131]"
    }, {
      "left" : "DoubleMetaphoneResult result = new DoubleMetaphoneResult(this.getMaxCodeLen());",
      "right" : "DoubleMetaphoneResult result = new DoubleMetaphoneResult(this.getMaxCodeLen());",
      "info" : "VariableDeclarationStatement[3149-3228]:VariableDeclarationStatement[3149-3228]"
    }, {
      "left" : "while (!result.isComplete() && index <= value.length() - 1)",
      "right" : "while (!result.isComplete() && index <= value.length() - 1)",
      "info" : "WhileStatement[3246-6470]:WhileStatement[3246-6470]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3306-6470]:Block[3306-6470]"
    }, {
      "left" : "switch (value.charAt(index)) {\n            case 'A':\n            case 'E':\n            case 'I':\n            case 'O':\n            case 'U':\n            case 'Y':\n                index = handleAEIOUY(value, result, index);\n                break;\n            case 'B':\n                result.append('P');\n                index = charAt(value, index + 1) == 'B' ? index + 2 : index + 1;\n                break;\n            case '\\u00C7':\n                // A C with a Cedilla\n                result.append('S');\n                index++;\n                break; \n            case 'C':\n                index = handleC(value, result, index);\n                break;\n            case 'D':\n                index = handleD(value, result, index);\n                break;\n            case 'F':\n                result.append('F');\n                index = charAt(value, index + 1) == 'F' ? index + 2 : index + 1;\n                break;\n            case 'G':\n                index = handleG(value, result, index, slavoGermanic);\n                break;\n            case 'H':\n                index = handleH(value, result, index);\n                break;\n            case 'J':\n                index = handleJ(value, result, index, slavoGermanic);\n                break;\n            case 'K':\n                result.append('K');\n                index = charAt(value, index + 1) == 'K' ? index + 2 : index + 1;\n                break;\n            case 'L':\n                index = handleL(value, result, index);\n                break;\n            case 'M':\n                result.append('M');\n                index = conditionM0(value, index) ? index + 2 : index + 1;\n                break;\n            case 'N':\n                result.append('N');\n                index = charAt(value, index + 1) == 'N' ? index + 2 : index + 1;\n                break;\n            case '\\u00D1':\n                // N with a tilde (spanish ene)\n                result.append('N');\n                index++;\n                break;\n            case 'P':\n                index = handleP(value, result, index);\n                break;\n            case 'Q':\n                result.append('K');\n                index = charAt(value, index + 1) == 'Q' ? index + 2 : index + 1;\n                break;\n            case 'R':\n                index = handleR(value, result, index, slavoGermanic);\n                break;\n            case 'S':\n                index = handleS(value, result, index, slavoGermanic);\n                break;\n            case 'T':\n                index = handleT(value, result, index);\n                break;\n            case 'V':\n                result.append('F');\n                index = charAt(value, index + 1) == 'V' ? index + 2 : index + 1;\n                break;\n            case 'W':\n                index = handleW(value, result, index);\n                break;\n            case 'X':\n                index = handleX(value, result, index);\n                break;\n            case 'Z':\n                index = handleZ(value, result, index, slavoGermanic);\n                break;\n            default:\n                index++;\n                break;\n            }",
      "right" : "switch (value.charAt(index)) {\n            case 'A':\n            case 'E':\n            case 'I':\n            case 'O':\n            case 'U':\n            case 'Y':\n                index = handleAEIOUY(value, result, index);\n                break;\n            case 'B':\n                result.append('P');\n                index = charAt(value, index + 1) == 'B' ? index + 2 : index + 1;\n                break;\n            case '\\u00C7':\n                // A C with a Cedilla\n                result.append('S');\n                index++;\n                break; \n            case 'C':\n                index = handleC(value, result, index);\n                break;\n            case 'D':\n                index = handleD(value, result, index);\n                break;\n            case 'F':\n                result.append('F');\n                index = charAt(value, index + 1) == 'F' ? index + 2 : index + 1;\n                break;\n            case 'G':\n                index = handleG(value, result, index, slavoGermanic);\n                break;\n            case 'H':\n                index = handleH(value, result, index);\n                break;\n            case 'J':\n                index = handleJ(value, result, index, slavoGermanic);\n                break;\n            case 'K':\n                result.append('K');\n                index = charAt(value, index + 1) == 'K' ? index + 2 : index + 1;\n                break;\n            case 'L':\n                index = handleL(value, result, index);\n                break;\n            case 'M':\n                result.append('M');\n                index = conditionM0(value, index) ? index + 2 : index + 1;\n                break;\n            case 'N':\n                result.append('N');\n                index = charAt(value, index + 1) == 'N' ? index + 2 : index + 1;\n                break;\n            case '\\u00D1':\n                // N with a tilde (spanish ene)\n                result.append('N');\n                index++;\n                break;\n            case 'P':\n                index = handleP(value, result, index);\n                break;\n            case 'Q':\n                result.append('K');\n                index = charAt(value, index + 1) == 'Q' ? index + 2 : index + 1;\n                break;\n            case 'R':\n                index = handleR(value, result, index, slavoGermanic);\n                break;\n            case 'S':\n                index = handleS(value, result, index, slavoGermanic);\n                break;\n            case 'T':\n                index = handleT(value, result, index);\n                break;\n            case 'V':\n                result.append('F');\n                index = charAt(value, index + 1) == 'V' ? index + 2 : index + 1;\n                break;\n            case 'W':\n                index = handleW(value, result, index);\n                break;\n            case 'X':\n                index = handleX(value, result, index);\n                break;\n            case 'Z':\n                index = handleZ(value, result, index, slavoGermanic);\n                break;\n            default:\n                index++;\n                break;\n            }",
      "info" : "SwitchStatement[3320-6460]:SwitchStatement[3320-6460]"
    }, {
      "left" : "case 'A':",
      "right" : "case 'A':",
      "info" : "SwitchCase[3363-3372]:SwitchCase[3363-3372]"
    }, {
      "left" : "case 'E':",
      "right" : "case 'E':",
      "info" : "SwitchCase[3385-3394]:SwitchCase[3385-3394]"
    }, {
      "left" : "case 'I':",
      "right" : "case 'I':",
      "info" : "SwitchCase[3407-3416]:SwitchCase[3407-3416]"
    }, {
      "left" : "case 'O':",
      "right" : "case 'O':",
      "info" : "SwitchCase[3429-3438]:SwitchCase[3429-3438]"
    }, {
      "left" : "case 'U':",
      "right" : "case 'U':",
      "info" : "SwitchCase[3451-3460]:SwitchCase[3451-3460]"
    }, {
      "left" : "case 'Y':",
      "right" : "case 'Y':",
      "info" : "SwitchCase[3473-3482]:SwitchCase[3473-3482]"
    }, {
      "left" : "index = handleAEIOUY(value, result, index);",
      "right" : "index = handleAEIOUY(value, result, index);",
      "info" : "ExpressionStatement[3499-3542]:ExpressionStatement[3499-3542]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[3559-3565]:BreakStatement[3559-3565]"
    }, {
      "left" : "case 'B':",
      "right" : "case 'B':",
      "info" : "SwitchCase[3578-3587]:SwitchCase[3578-3587]"
    }, {
      "left" : "result.append('P');",
      "right" : "result.append('P');",
      "info" : "ExpressionStatement[3604-3623]:ExpressionStatement[3604-3623]"
    }, {
      "left" : "index = charAt(value, index + 1) == 'B' ? index + 2 : index + 1;",
      "right" : "index = charAt(value, index + 1) == 'B' ? index + 2 : index + 1;",
      "info" : "ExpressionStatement[3640-3704]:ExpressionStatement[3640-3704]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[3721-3727]:BreakStatement[3721-3727]"
    }, {
      "left" : "case '\\u00C7':",
      "right" : "case '\\u00C7':",
      "info" : "SwitchCase[3740-3754]:SwitchCase[3740-3754]"
    }, {
      "left" : "result.append('S');",
      "right" : "result.append('S');",
      "info" : "ExpressionStatement[3809-3828]:ExpressionStatement[3809-3828]"
    }, {
      "left" : "index++;",
      "right" : "index++;",
      "info" : "ExpressionStatement[3845-3853]:ExpressionStatement[3845-3853]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[3870-3876]:BreakStatement[3870-3876]"
    }, {
      "left" : "case 'C':",
      "right" : "case 'C':",
      "info" : "SwitchCase[3890-3899]:SwitchCase[3890-3899]"
    }, {
      "left" : "index = handleC(value, result, index);",
      "right" : "index = handleC(value, result, index);",
      "info" : "ExpressionStatement[3916-3954]:ExpressionStatement[3916-3954]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[3971-3977]:BreakStatement[3971-3977]"
    }, {
      "left" : "case 'D':",
      "right" : "case 'D':",
      "info" : "SwitchCase[3990-3999]:SwitchCase[3990-3999]"
    }, {
      "left" : "index = handleD(value, result, index);",
      "right" : "index = handleD(value, result, index);",
      "info" : "ExpressionStatement[4016-4054]:ExpressionStatement[4016-4054]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[4071-4077]:BreakStatement[4071-4077]"
    }, {
      "left" : "case 'F':",
      "right" : "case 'F':",
      "info" : "SwitchCase[4090-4099]:SwitchCase[4090-4099]"
    }, {
      "left" : "result.append('F');",
      "right" : "result.append('F');",
      "info" : "ExpressionStatement[4116-4135]:ExpressionStatement[4116-4135]"
    }, {
      "left" : "index = charAt(value, index + 1) == 'F' ? index + 2 : index + 1;",
      "right" : "index = charAt(value, index + 1) == 'F' ? index + 2 : index + 1;",
      "info" : "ExpressionStatement[4152-4216]:ExpressionStatement[4152-4216]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[4233-4239]:BreakStatement[4233-4239]"
    }, {
      "left" : "case 'G':",
      "right" : "case 'G':",
      "info" : "SwitchCase[4252-4261]:SwitchCase[4252-4261]"
    }, {
      "left" : "index = handleG(value, result, index, slavoGermanic);",
      "right" : "index = handleG(value, result, index, slavoGermanic);",
      "info" : "ExpressionStatement[4278-4331]:ExpressionStatement[4278-4331]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[4348-4354]:BreakStatement[4348-4354]"
    }, {
      "left" : "case 'H':",
      "right" : "case 'H':",
      "info" : "SwitchCase[4367-4376]:SwitchCase[4367-4376]"
    }, {
      "left" : "index = handleH(value, result, index);",
      "right" : "index = handleH(value, result, index);",
      "info" : "ExpressionStatement[4393-4431]:ExpressionStatement[4393-4431]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[4448-4454]:BreakStatement[4448-4454]"
    }, {
      "left" : "case 'J':",
      "right" : "case 'J':",
      "info" : "SwitchCase[4467-4476]:SwitchCase[4467-4476]"
    }, {
      "left" : "index = handleJ(value, result, index, slavoGermanic);",
      "right" : "index = handleJ(value, result, index, slavoGermanic);",
      "info" : "ExpressionStatement[4493-4546]:ExpressionStatement[4493-4546]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[4563-4569]:BreakStatement[4563-4569]"
    }, {
      "left" : "case 'K':",
      "right" : "case 'K':",
      "info" : "SwitchCase[4582-4591]:SwitchCase[4582-4591]"
    }, {
      "left" : "result.append('K');",
      "right" : "result.append('K');",
      "info" : "ExpressionStatement[4608-4627]:ExpressionStatement[4608-4627]"
    }, {
      "left" : "index = charAt(value, index + 1) == 'K' ? index + 2 : index + 1;",
      "right" : "index = charAt(value, index + 1) == 'K' ? index + 2 : index + 1;",
      "info" : "ExpressionStatement[4644-4708]:ExpressionStatement[4644-4708]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[4725-4731]:BreakStatement[4725-4731]"
    }, {
      "left" : "case 'L':",
      "right" : "case 'L':",
      "info" : "SwitchCase[4744-4753]:SwitchCase[4744-4753]"
    }, {
      "left" : "index = handleL(value, result, index);",
      "right" : "index = handleL(value, result, index);",
      "info" : "ExpressionStatement[4770-4808]:ExpressionStatement[4770-4808]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[4825-4831]:BreakStatement[4825-4831]"
    }, {
      "left" : "case 'M':",
      "right" : "case 'M':",
      "info" : "SwitchCase[4844-4853]:SwitchCase[4844-4853]"
    }, {
      "left" : "result.append('M');",
      "right" : "result.append('M');",
      "info" : "ExpressionStatement[4870-4889]:ExpressionStatement[4870-4889]"
    }, {
      "left" : "index = conditionM0(value, index) ? index + 2 : index + 1;",
      "right" : "index = conditionM0(value, index) ? index + 2 : index + 1;",
      "info" : "ExpressionStatement[4906-4964]:ExpressionStatement[4906-4964]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[4981-4987]:BreakStatement[4981-4987]"
    }, {
      "left" : "case 'N':",
      "right" : "case 'N':",
      "info" : "SwitchCase[5000-5009]:SwitchCase[5000-5009]"
    }, {
      "left" : "result.append('N');",
      "right" : "result.append('N');",
      "info" : "ExpressionStatement[5026-5045]:ExpressionStatement[5026-5045]"
    }, {
      "left" : "index = charAt(value, index + 1) == 'N' ? index + 2 : index + 1;",
      "right" : "index = charAt(value, index + 1) == 'N' ? index + 2 : index + 1;",
      "info" : "ExpressionStatement[5062-5126]:ExpressionStatement[5062-5126]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[5143-5149]:BreakStatement[5143-5149]"
    }, {
      "left" : "case '\\u00D1':",
      "right" : "case '\\u00D1':",
      "info" : "SwitchCase[5162-5176]:SwitchCase[5162-5176]"
    }, {
      "left" : "result.append('N');",
      "right" : "result.append('N');",
      "info" : "ExpressionStatement[5241-5260]:ExpressionStatement[5241-5260]"
    }, {
      "left" : "index++;",
      "right" : "index++;",
      "info" : "ExpressionStatement[5277-5285]:ExpressionStatement[5277-5285]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[5302-5308]:BreakStatement[5302-5308]"
    }, {
      "left" : "case 'P':",
      "right" : "case 'P':",
      "info" : "SwitchCase[5321-5330]:SwitchCase[5321-5330]"
    }, {
      "left" : "index = handleP(value, result, index);",
      "right" : "index = handleP(value, result, index);",
      "info" : "ExpressionStatement[5347-5385]:ExpressionStatement[5347-5385]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[5402-5408]:BreakStatement[5402-5408]"
    }, {
      "left" : "case 'Q':",
      "right" : "case 'Q':",
      "info" : "SwitchCase[5421-5430]:SwitchCase[5421-5430]"
    }, {
      "left" : "result.append('K');",
      "right" : "result.append('K');",
      "info" : "ExpressionStatement[5447-5466]:ExpressionStatement[5447-5466]"
    }, {
      "left" : "index = charAt(value, index + 1) == 'Q' ? index + 2 : index + 1;",
      "right" : "index = charAt(value, index + 1) == 'Q' ? index + 2 : index + 1;",
      "info" : "ExpressionStatement[5483-5547]:ExpressionStatement[5483-5547]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[5564-5570]:BreakStatement[5564-5570]"
    }, {
      "left" : "case 'R':",
      "right" : "case 'R':",
      "info" : "SwitchCase[5583-5592]:SwitchCase[5583-5592]"
    }, {
      "left" : "index = handleR(value, result, index, slavoGermanic);",
      "right" : "index = handleR(value, result, index, slavoGermanic);",
      "info" : "ExpressionStatement[5609-5662]:ExpressionStatement[5609-5662]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[5679-5685]:BreakStatement[5679-5685]"
    }, {
      "left" : "case 'S':",
      "right" : "case 'S':",
      "info" : "SwitchCase[5698-5707]:SwitchCase[5698-5707]"
    }, {
      "left" : "index = handleS(value, result, index, slavoGermanic);",
      "right" : "index = handleS(value, result, index, slavoGermanic);",
      "info" : "ExpressionStatement[5724-5777]:ExpressionStatement[5724-5777]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[5794-5800]:BreakStatement[5794-5800]"
    }, {
      "left" : "case 'T':",
      "right" : "case 'T':",
      "info" : "SwitchCase[5813-5822]:SwitchCase[5813-5822]"
    }, {
      "left" : "index = handleT(value, result, index);",
      "right" : "index = handleT(value, result, index);",
      "info" : "ExpressionStatement[5839-5877]:ExpressionStatement[5839-5877]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[5894-5900]:BreakStatement[5894-5900]"
    }, {
      "left" : "case 'V':",
      "right" : "case 'V':",
      "info" : "SwitchCase[5913-5922]:SwitchCase[5913-5922]"
    }, {
      "left" : "result.append('F');",
      "right" : "result.append('F');",
      "info" : "ExpressionStatement[5939-5958]:ExpressionStatement[5939-5958]"
    }, {
      "left" : "index = charAt(value, index + 1) == 'V' ? index + 2 : index + 1;",
      "right" : "index = charAt(value, index + 1) == 'V' ? index + 2 : index + 1;",
      "info" : "ExpressionStatement[5975-6039]:ExpressionStatement[5975-6039]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[6056-6062]:BreakStatement[6056-6062]"
    }, {
      "left" : "case 'W':",
      "right" : "case 'W':",
      "info" : "SwitchCase[6075-6084]:SwitchCase[6075-6084]"
    }, {
      "left" : "index = handleW(value, result, index);",
      "right" : "index = handleW(value, result, index);",
      "info" : "ExpressionStatement[6101-6139]:ExpressionStatement[6101-6139]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[6156-6162]:BreakStatement[6156-6162]"
    }, {
      "left" : "case 'X':",
      "right" : "case 'X':",
      "info" : "SwitchCase[6175-6184]:SwitchCase[6175-6184]"
    }, {
      "left" : "index = handleX(value, result, index);",
      "right" : "index = handleX(value, result, index);",
      "info" : "ExpressionStatement[6201-6239]:ExpressionStatement[6201-6239]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[6256-6262]:BreakStatement[6256-6262]"
    }, {
      "left" : "case 'Z':",
      "right" : "case 'Z':",
      "info" : "SwitchCase[6275-6284]:SwitchCase[6275-6284]"
    }, {
      "left" : "index = handleZ(value, result, index, slavoGermanic);",
      "right" : "index = handleZ(value, result, index, slavoGermanic);",
      "info" : "ExpressionStatement[6301-6354]:ExpressionStatement[6301-6354]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[6371-6377]:BreakStatement[6371-6377]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[6390-6398]:SwitchCase[6390-6398]"
    }, {
      "left" : "index++;",
      "right" : "index++;",
      "info" : "ExpressionStatement[6415-6423]:ExpressionStatement[6415-6423]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[6440-6446]:BreakStatement[6440-6446]"
    }, {
      "left" : "return alternate ? result.getAlternate() : result.getPrimary();",
      "right" : "return alternate ? result.getAlternate() : result.getPrimary();",
      "info" : "ReturnStatement[6480-6543]:ReturnStatement[6480-6543]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6980-7183]:Block[6980-7183]"
    }, {
      "left" : "if (!(obj instanceof String))",
      "right" : "if (!(obj instanceof String))",
      "info" : "IfStatement[6990-7130]:IfStatement[6990-7130]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7020-7130]:Block[7020-7130]"
    }, {
      "left" : "throw new EncoderException(\"DoubleMetaphone encode parameter is not of type String\");",
      "right" : "throw new EncoderException(\"DoubleMetaphone encode parameter is not of type String\");",
      "info" : "ThrowStatement[7034-7119]:ThrowStatement[7034-7119]"
    }, {
      "left" : "return doubleMetaphone((String) obj);",
      "right" : "return doubleMetaphone((String) obj);",
      "info" : "ReturnStatement[7140-7177]:ReturnStatement[7140-7177]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7364-7413]:Block[7364-7413]"
    }, {
      "left" : "return doubleMetaphone(value);",
      "right" : "return doubleMetaphone(value);",
      "info" : "ReturnStatement[7374-7404]:ReturnStatement[7374-7404]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7965-8034]:Block[7965-8034]"
    }, {
      "left" : "return isDoubleMetaphoneEqual(value1, value2, false);",
      "right" : "return isDoubleMetaphoneEqual(value1, value2, false);",
      "info" : "ReturnStatement[7975-8028]:ReturnStatement[7975-8028]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8744-8903]:Block[8744-8903]"
    }, {
      "left" : "return doubleMetaphone(value1, alternate).equals(doubleMetaphone\n                                                         (value2, alternate));",
      "right" : "return doubleMetaphone(value1, alternate).equals(doubleMetaphone\n                                                         (value2, alternate));",
      "info" : "ReturnStatement[8754-8897]:ReturnStatement[8754-8897]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9006-9045]:Block[9006-9045]"
    }, {
      "left" : "return this.maxCodeLen;",
      "right" : "return this.maxCodeLen;",
      "info" : "ReturnStatement[9016-9039]:ReturnStatement[9016-9039]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9184-9229]:Block[9184-9229]"
    }, {
      "left" : "this.maxCodeLen = maxCodeLen;",
      "right" : "this.maxCodeLen = maxCodeLen;",
      "info" : "ExpressionStatement[9194-9223]:ExpressionStatement[9194-9223]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9445-9546]:Block[9445-9546]"
    }, {
      "left" : "if (index == 0)",
      "right" : "if (index == 0)",
      "info" : "IfStatement[9455-9514]:IfStatement[9455-9514]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9471-9514]:Block[9471-9514]"
    }, {
      "left" : "result.append('A');",
      "right" : "result.append('A');",
      "info" : "ExpressionStatement[9485-9504]:ExpressionStatement[9485-9504]"
    }, {
      "left" : "return index + 1;",
      "right" : "return index + 1;",
      "info" : "ReturnStatement[9523-9540]:ReturnStatement[9523-9540]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9722-11567]:Block[9722-11567]"
    }, {
      "left" : "if (conditionC0(value, index))",
      "right" : "if (conditionC0(value, index))",
      "info" : "IfStatement[9732-11530]:IfStatement[9732-11530]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9763-9860]:Block[9763-9860]"
    }, {
      "left" : "result.append('K');",
      "right" : "result.append('K');",
      "info" : "ExpressionStatement[9807-9826]:ExpressionStatement[9807-9826]"
    }, {
      "left" : "index += 2;",
      "right" : "index += 2;",
      "info" : "ExpressionStatement[9839-9850]:ExpressionStatement[9839-9850]"
    }, {
      "left" : "if (index == 0 && contains(value, index, 6, \"CAESAR\"))",
      "right" : "if (index == 0 && contains(value, index, 6, \"CAESAR\"))",
      "info" : "IfStatement[9866-11530]:IfStatement[9866-11530]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9921-9988]:Block[9921-9988]"
    }, {
      "left" : "result.append('S');",
      "right" : "result.append('S');",
      "info" : "ExpressionStatement[9935-9954]:ExpressionStatement[9935-9954]"
    }, {
      "left" : "index += 2;",
      "right" : "index += 2;",
      "info" : "ExpressionStatement[9967-9978]:ExpressionStatement[9967-9978]"
    }, {
      "left" : "if (contains(value, index, 2, \"CH\"))",
      "right" : "if (contains(value, index, 2, \"CH\"))",
      "info" : "IfStatement[9994-11530]:IfStatement[9994-11530]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10031-10094]:Block[10031-10094]"
    }, {
      "left" : "index = handleCH(value, result, index);",
      "right" : "index = handleCH(value, result, index);",
      "info" : "ExpressionStatement[10045-10084]:ExpressionStatement[10045-10084]"
    }, {
      "left" : "if (contains(value, index, 2, \"CZ\") && \n                   !contains(value, index - 2, 4, \"WICZ\"))",
      "right" : "if (contains(value, index, 2, \"CZ\") && \n                   !contains(value, index - 2, 4, \"WICZ\"))",
      "info" : "IfStatement[10100-11530]:IfStatement[10100-11530]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10199-10302]:Block[10199-10302]"
    }, {
      "left" : "result.append('S', 'X');",
      "right" : "result.append('S', 'X');",
      "info" : "ExpressionStatement[10244-10268]:ExpressionStatement[10244-10268]"
    }, {
      "left" : "index += 2;",
      "right" : "index += 2;",
      "info" : "ExpressionStatement[10281-10292]:ExpressionStatement[10281-10292]"
    }, {
      "left" : "if (contains(value, index + 1, 3, \"CIA\"))",
      "right" : "if (contains(value, index + 1, 3, \"CIA\"))",
      "info" : "IfStatement[10308-11530]:IfStatement[10308-11530]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10350-10450]:Block[10350-10450]"
    }, {
      "left" : "result.append('X');",
      "right" : "result.append('X');",
      "info" : "ExpressionStatement[10397-10416]:ExpressionStatement[10397-10416]"
    }, {
      "left" : "index += 3;",
      "right" : "index += 3;",
      "info" : "ExpressionStatement[10429-10440]:ExpressionStatement[10429-10440]"
    }, {
      "left" : "if (contains(value, index, 2, \"CC\") && \n                   !(index == 1 && charAt(value, 0) == 'M'))",
      "right" : "if (contains(value, index, 2, \"CC\") && \n                   !(index == 1 && charAt(value, 0) == 'M'))",
      "info" : "IfStatement[10456-11530]:IfStatement[10456-11530]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10557-10674]:Block[10557-10674]"
    }, {
      "left" : "return handleCC(value, result, index);",
      "right" : "return handleCC(value, result, index);",
      "info" : "ReturnStatement[10626-10664]:ReturnStatement[10626-10664]"
    }, {
      "left" : "if (contains(value, index, 2, \"CK\", \"CG\", \"CQ\"))",
      "right" : "if (contains(value, index, 2, \"CK\", \"CG\", \"CQ\"))",
      "info" : "IfStatement[10680-11530]:IfStatement[10680-11530]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10729-10796]:Block[10729-10796]"
    }, {
      "left" : "result.append('K');",
      "right" : "result.append('K');",
      "info" : "ExpressionStatement[10743-10762]:ExpressionStatement[10743-10762]"
    }, {
      "left" : "index += 2;",
      "right" : "index += 2;",
      "info" : "ExpressionStatement[10775-10786]:ExpressionStatement[10775-10786]"
    }, {
      "left" : "if (contains(value, index, 2, \"CI\", \"CE\", \"CY\"))",
      "right" : "if (contains(value, index, 2, \"CI\", \"CE\", \"CY\"))",
      "info" : "IfStatement[10802-11530]:IfStatement[10802-11530]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10851-11106]:Block[10851-11106]"
    }, {
      "left" : "if (contains(value, index, 3, \"CIO\", \"CIE\", \"CIA\"))",
      "right" : "if (contains(value, index, 3, \"CIO\", \"CIE\", \"CIA\"))",
      "info" : "IfStatement[10907-11072]:IfStatement[10907-11072]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10959-11015]:Block[10959-11015]"
    }, {
      "left" : "result.append('S', 'X');",
      "right" : "result.append('S', 'X');",
      "info" : "ExpressionStatement[10977-11001]:ExpressionStatement[10977-11001]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11021-11072]:Block[11021-11072]"
    }, {
      "left" : "result.append('S');",
      "right" : "result.append('S');",
      "info" : "ExpressionStatement[11039-11058]:ExpressionStatement[11039-11058]"
    }, {
      "left" : "index += 2;",
      "right" : "index += 2;",
      "info" : "ExpressionStatement[11085-11096]:ExpressionStatement[11085-11096]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11112-11530]:Block[11112-11530]"
    }, {
      "left" : "result.append('K');",
      "right" : "result.append('K');",
      "info" : "ExpressionStatement[11126-11145]:ExpressionStatement[11126-11145]"
    }, {
      "left" : "if (contains(value, index + 1, 2, \" C\", \" Q\", \" G\"))",
      "right" : "if (contains(value, index + 1, 2, \" C\", \" Q\", \" G\"))",
      "info" : "IfStatement[11158-11520]:IfStatement[11158-11520]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11211-11305]:Block[11211-11305]"
    }, {
      "left" : "index += 3;",
      "right" : "index += 3;",
      "info" : "ExpressionStatement[11280-11291]:ExpressionStatement[11280-11291]"
    }, {
      "left" : "if (contains(value, index + 1, 1, \"C\", \"K\", \"Q\") && \n                       !contains(value, index + 1, 2, \"CE\", \"CI\"))",
      "right" : "if (contains(value, index + 1, 1, \"C\", \"K\", \"Q\") && \n                       !contains(value, index + 1, 2, \"CE\", \"CI\"))",
      "info" : "IfStatement[11311-11520]:IfStatement[11311-11520]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11431-11474]:Block[11431-11474]"
    }, {
      "left" : "index += 2;",
      "right" : "index += 2;",
      "info" : "ExpressionStatement[11449-11460]:ExpressionStatement[11449-11460]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11480-11520]:Block[11480-11520]"
    }, {
      "left" : "index++;",
      "right" : "index++;",
      "info" : "ExpressionStatement[11498-11506]:ExpressionStatement[11498-11506]"
    }, {
      "left" : "return index;",
      "right" : "return index;",
      "info" : "ReturnStatement[11548-11561]:ReturnStatement[11548-11561]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11743-12436]:Block[11743-12436]"
    }, {
      "left" : "if (contains(value, index + 2, 1, \"I\", \"E\", \"H\") && \n            !contains(value, index + 2, 2, \"HU\"))",
      "right" : "if (contains(value, index + 2, 1, \"I\", \"E\", \"H\") && \n            !contains(value, index + 2, 2, \"HU\"))",
      "info" : "IfStatement[11753-12399]:IfStatement[11753-12399]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11856-12306]:Block[11856-12306]"
    }, {
      "left" : "if ((index == 1 && charAt(value, index - 1) == 'A') || \n                contains(value, index - 1, 5, \"UCCEE\", \"UCCES\"))",
      "right" : "if ((index == 1 && charAt(value, index - 1) == 'A') || \n                contains(value, index - 1, 5, \"UCCEE\", \"UCCES\"))",
      "info" : "IfStatement[11923-12272]:IfStatement[11923-12272]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12044-12154]:Block[12044-12154]"
    }, {
      "left" : "result.append(\"KS\");",
      "right" : "result.append(\"KS\");",
      "info" : "ExpressionStatement[12120-12140]:ExpressionStatement[12120-12140]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12160-12272]:Block[12160-12272]"
    }, {
      "left" : "result.append('X');",
      "right" : "result.append('X');",
      "info" : "ExpressionStatement[12239-12258]:ExpressionStatement[12239-12258]"
    }, {
      "left" : "index += 3;",
      "right" : "index += 3;",
      "info" : "ExpressionStatement[12285-12296]:ExpressionStatement[12285-12296]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12312-12399]:Block[12312-12399]"
    }, {
      "left" : "result.append('K');",
      "right" : "result.append('K');",
      "info" : "ExpressionStatement[12346-12365]:ExpressionStatement[12346-12365]"
    }, {
      "left" : "index += 2;",
      "right" : "index += 2;",
      "info" : "ExpressionStatement[12378-12389]:ExpressionStatement[12378-12389]"
    }, {
      "left" : "return index;",
      "right" : "return index;",
      "info" : "ReturnStatement[12417-12430]:ReturnStatement[12417-12430]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12616-13459]:Block[12616-13459]"
    }, {
      "left" : "if (index > 0 && contains(value, index, 4, \"CHAE\"))",
      "right" : "if (index > 0 && contains(value, index, 4, \"CHAE\"))",
      "info" : "IfStatement[12626-13453]:IfStatement[12626-13453]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12678-12769]:Block[12678-12769]"
    }, {
      "left" : "result.append('K', 'X');",
      "right" : "result.append('K', 'X');",
      "info" : "ExpressionStatement[12705-12729]:ExpressionStatement[12705-12729]"
    }, {
      "left" : "return index + 2;",
      "right" : "return index + 2;",
      "info" : "ReturnStatement[12742-12759]:ReturnStatement[12742-12759]"
    }, {
      "left" : "if (conditionCH0(value, index))",
      "right" : "if (conditionCH0(value, index))",
      "info" : "IfStatement[12775-13453]:IfStatement[12775-13453]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12807-12944]:Block[12807-12944]"
    }, {
      "left" : "result.append('K');",
      "right" : "result.append('K');",
      "info" : "ExpressionStatement[12885-12904]:ExpressionStatement[12885-12904]"
    }, {
      "left" : "return index + 2;",
      "right" : "return index + 2;",
      "info" : "ReturnStatement[12917-12934]:ReturnStatement[12917-12934]"
    }, {
      "left" : "if (conditionCH1(value, index))",
      "right" : "if (conditionCH1(value, index))",
      "info" : "IfStatement[12950-13453]:IfStatement[12950-13453]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12982-13127]:Block[12982-13127]"
    }, {
      "left" : "result.append('K');",
      "right" : "result.append('K');",
      "info" : "ExpressionStatement[13068-13087]:ExpressionStatement[13068-13087]"
    }, {
      "left" : "return index + 2;",
      "right" : "return index + 2;",
      "info" : "ReturnStatement[13100-13117]:ReturnStatement[13100-13117]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13133-13453]:Block[13133-13453]"
    }, {
      "left" : "if (index > 0)",
      "right" : "if (index > 0)",
      "info" : "IfStatement[13147-13413]:IfStatement[13147-13413]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13162-13356]:Block[13162-13356]"
    }, {
      "left" : "if (contains(value, 0, 2, \"MC\"))",
      "right" : "if (contains(value, 0, 2, \"MC\"))",
      "info" : "IfStatement[13180-13342]:IfStatement[13180-13342]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13213-13272]:Block[13213-13272]"
    }, {
      "left" : "result.append('K');",
      "right" : "result.append('K');",
      "info" : "ExpressionStatement[13235-13254]:ExpressionStatement[13235-13254]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13278-13342]:Block[13278-13342]"
    }, {
      "left" : "result.append('X', 'K');",
      "right" : "result.append('X', 'K');",
      "info" : "ExpressionStatement[13300-13324]:ExpressionStatement[13300-13324]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13362-13413]:Block[13362-13413]"
    }, {
      "left" : "result.append('X');",
      "right" : "result.append('X');",
      "info" : "ExpressionStatement[13380-13399]:ExpressionStatement[13380-13399]"
    }, {
      "left" : "return index + 2;",
      "right" : "return index + 2;",
      "info" : "ReturnStatement[13426-13443]:ReturnStatement[13426-13443]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13631-14194]:Block[13631-14194]"
    }, {
      "left" : "if (contains(value, index, 2, \"DG\"))",
      "right" : "if (contains(value, index, 2, \"DG\"))",
      "info" : "IfStatement[13641-14166]:IfStatement[13641-14166]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13678-13980]:Block[13678-13980]"
    }, {
      "left" : "if (contains(value, index + 2, 1, \"I\", \"E\", \"Y\"))",
      "right" : "if (contains(value, index + 2, 1, \"I\", \"E\", \"Y\"))",
      "info" : "IfStatement[13721-13970]:IfStatement[13721-13970]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13771-13884]:Block[13771-13884]"
    }, {
      "left" : "result.append('J');",
      "right" : "result.append('J');",
      "info" : "ExpressionStatement[13789-13808]:ExpressionStatement[13789-13808]"
    }, {
      "left" : "index += 3;",
      "right" : "index += 3;",
      "info" : "ExpressionStatement[13825-13836]:ExpressionStatement[13825-13836]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13890-13970]:Block[13890-13970]"
    }, {
      "left" : "result.append(\"TK\");",
      "right" : "result.append(\"TK\");",
      "info" : "ExpressionStatement[13908-13928]:ExpressionStatement[13908-13928]"
    }, {
      "left" : "index += 2;",
      "right" : "index += 2;",
      "info" : "ExpressionStatement[13945-13956]:ExpressionStatement[13945-13956]"
    }, {
      "left" : "if (contains(value, index, 2, \"DT\", \"DD\"))",
      "right" : "if (contains(value, index, 2, \"DT\", \"DD\"))",
      "info" : "IfStatement[13986-14166]:IfStatement[13986-14166]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14029-14096]:Block[14029-14096]"
    }, {
      "left" : "result.append('T');",
      "right" : "result.append('T');",
      "info" : "ExpressionStatement[14043-14062]:ExpressionStatement[14043-14062]"
    }, {
      "left" : "index += 2;",
      "right" : "index += 2;",
      "info" : "ExpressionStatement[14075-14086]:ExpressionStatement[14075-14086]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14102-14166]:Block[14102-14166]"
    }, {
      "left" : "result.append('T');",
      "right" : "result.append('T');",
      "info" : "ExpressionStatement[14116-14135]:ExpressionStatement[14116-14135]"
    }, {
      "left" : "index++;",
      "right" : "index++;",
      "info" : "ExpressionStatement[14148-14156]:ExpressionStatement[14148-14156]"
    }, {
      "left" : "return index;",
      "right" : "return index;",
      "info" : "ReturnStatement[14175-14188]:ReturnStatement[14175-14188]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16768-17894]:Block[16768-17894]"
    }, {
      "left" : "if (index > 0 && !isVowel(charAt(value, index - 1)))",
      "right" : "if (index > 0 && !isVowel(charAt(value, index - 1)))",
      "info" : "IfStatement[16778-17866]:IfStatement[16778-17866]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16831-16898]:Block[16831-16898]"
    }, {
      "left" : "result.append('K');",
      "right" : "result.append('K');",
      "info" : "ExpressionStatement[16845-16864]:ExpressionStatement[16845-16864]"
    }, {
      "left" : "index += 2;",
      "right" : "index += 2;",
      "info" : "ExpressionStatement[16877-16888]:ExpressionStatement[16877-16888]"
    }, {
      "left" : "if (index == 0)",
      "right" : "if (index == 0)",
      "info" : "IfStatement[16904-17866]:IfStatement[16904-17866]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16920-17113]:Block[16920-17113]"
    }, {
      "left" : "if (charAt(value, index + 2) == 'I')",
      "right" : "if (charAt(value, index + 2) == 'I')",
      "info" : "IfStatement[16934-17079]:IfStatement[16934-17079]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16971-17022]:Block[16971-17022]"
    }, {
      "left" : "result.append('J');",
      "right" : "result.append('J');",
      "info" : "ExpressionStatement[16989-17008]:ExpressionStatement[16989-17008]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17028-17079]:Block[17028-17079]"
    }, {
      "left" : "result.append('K');",
      "right" : "result.append('K');",
      "info" : "ExpressionStatement[17046-17065]:ExpressionStatement[17046-17065]"
    }, {
      "left" : "index += 2;",
      "right" : "index += 2;",
      "info" : "ExpressionStatement[17092-17103]:ExpressionStatement[17092-17103]"
    }, {
      "left" : "if ((index > 1 && contains(value, index - 2, 1, \"B\", \"H\", \"D\")) ||\n                   (index > 2 && contains(value, index - 3, 1, \"B\", \"H\", \"D\")) ||\n                   (index > 3 && contains(value, index - 4, 1, \"B\", \"H\")))",
      "right" : "if ((index > 1 && contains(value, index - 2, 1, \"B\", \"H\", \"D\")) ||\n                   (index > 2 && contains(value, index - 3, 1, \"B\", \"H\", \"D\")) ||\n                   (index > 3 && contains(value, index - 4, 1, \"B\", \"H\")))",
      "info" : "IfStatement[17119-17866]:IfStatement[17119-17866]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17343-17450]:Block[17343-17450]"
    }, {
      "left" : "index += 2;",
      "right" : "index += 2;",
      "info" : "ExpressionStatement[17429-17440]:ExpressionStatement[17429-17440]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17456-17866]:Block[17456-17866]"
    }, {
      "left" : "if (index > 2 && charAt(value, index - 1) == 'U' && \n                contains(value, index - 3, 1, \"C\", \"G\", \"L\", \"R\", \"T\"))",
      "right" : "if (index > 2 && charAt(value, index - 1) == 'U' && \n                contains(value, index - 3, 1, \"C\", \"G\", \"L\", \"R\", \"T\"))",
      "info" : "IfStatement[17470-17832]:IfStatement[17470-17832]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17595-17725]:Block[17595-17725]"
    }, {
      "left" : "result.append('F');",
      "right" : "result.append('F');",
      "info" : "ExpressionStatement[17692-17711]:ExpressionStatement[17692-17711]"
    }, {
      "left" : "if (index > 0 && charAt(value, index - 1) != 'I')",
      "right" : "if (index > 0 && charAt(value, index - 1) != 'I')",
      "info" : "IfStatement[17731-17832]:IfStatement[17731-17832]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17781-17832]:Block[17781-17832]"
    }, {
      "left" : "result.append('K');",
      "right" : "result.append('K');",
      "info" : "ExpressionStatement[17799-17818]:ExpressionStatement[17799-17818]"
    }, {
      "left" : "index += 2;",
      "right" : "index += 2;",
      "info" : "ExpressionStatement[17845-17856]:ExpressionStatement[17845-17856]"
    }, {
      "left" : "return index;",
      "right" : "return index;",
      "info" : "ReturnStatement[17875-17888]:ReturnStatement[17875-17888]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18066-18431]:Block[18066-18431]"
    }, {
      "left" : "if ((index == 0 || isVowel(charAt(value, index - 1))) && \n            isVowel(charAt(value, index + 1)))",
      "right" : "if ((index == 0 || isVowel(charAt(value, index - 1))) && \n            isVowel(charAt(value, index + 1)))",
      "info" : "IfStatement[18148-18403]:IfStatement[18148-18403]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18253-18365]:Block[18253-18365]"
    }, {
      "left" : "result.append('H');",
      "right" : "result.append('H');",
      "info" : "ExpressionStatement[18267-18286]:ExpressionStatement[18267-18286]"
    }, {
      "left" : "index += 2;",
      "right" : "index += 2;",
      "info" : "ExpressionStatement[18299-18310]:ExpressionStatement[18299-18310]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18371-18403]:Block[18371-18403]"
    }, {
      "left" : "index++;",
      "right" : "index++;",
      "info" : "ExpressionStatement[18385-18393]:ExpressionStatement[18385-18393]"
    }, {
      "left" : "return index;",
      "right" : "return index;",
      "info" : "ReturnStatement[18412-18425]:ReturnStatement[18412-18425]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18605-19915]:Block[18605-19915]"
    }, {
      "left" : "if (contains(value, index, 4, \"JOSE\") || contains(value, 0, 4, \"SAN \"))",
      "right" : "if (contains(value, index, 4, \"JOSE\") || contains(value, 0, 4, \"SAN \"))",
      "info" : "IfStatement[18615-19887]:IfStatement[18615-19887]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18687-19071]:Block[18687-19071]"
    }, {
      "left" : "if ((index == 0 && (charAt(value, index + 4) == ' ') || \n                     value.length() == 4) || contains(value, 0, 4, \"SAN \"))",
      "right" : "if ((index == 0 && (charAt(value, index + 4) == ' ') || \n                     value.length() == 4) || contains(value, 0, 4, \"SAN \"))",
      "info" : "IfStatement[18770-19032]:IfStatement[18770-19032]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18903-18962]:Block[18903-18962]"
    }, {
      "left" : "result.append('H');",
      "right" : "result.append('H');",
      "info" : "ExpressionStatement[18925-18944]:ExpressionStatement[18925-18944]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18968-19032]:Block[18968-19032]"
    }, {
      "left" : "result.append('J', 'H');",
      "right" : "result.append('J', 'H');",
      "info" : "ExpressionStatement[18990-19014]:ExpressionStatement[18990-19014]"
    }, {
      "left" : "index++;",
      "right" : "index++;",
      "info" : "ExpressionStatement[19049-19057]:ExpressionStatement[19049-19057]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19077-19887]:Block[19077-19887]"
    }, {
      "left" : "if (index == 0 && !contains(value, index, 4, \"JOSE\"))",
      "right" : "if (index == 0 && !contains(value, index, 4, \"JOSE\"))",
      "info" : "IfStatement[19095-19713]:IfStatement[19095-19713]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19149-19213]:Block[19149-19213]"
    }, {
      "left" : "result.append('J', 'A');",
      "right" : "result.append('J', 'A');",
      "info" : "ExpressionStatement[19171-19195]:ExpressionStatement[19171-19195]"
    }, {
      "left" : "if (isVowel(charAt(value, index - 1)) && !slavoGermanic && \n                              (charAt(value, index + 1) == 'A' || charAt(value, index + 1) == 'O'))",
      "right" : "if (isVowel(charAt(value, index - 1)) && !slavoGermanic && \n                              (charAt(value, index + 1) == 'A' || charAt(value, index + 1) == 'O'))",
      "info" : "IfStatement[19219-19713]:IfStatement[19219-19713]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19379-19443]:Block[19379-19443]"
    }, {
      "left" : "result.append('J', 'H');",
      "right" : "result.append('J', 'H');",
      "info" : "ExpressionStatement[19401-19425]:ExpressionStatement[19401-19425]"
    }, {
      "left" : "if (index == value.length() - 1)",
      "right" : "if (index == value.length() - 1)",
      "info" : "IfStatement[19449-19713]:IfStatement[19449-19713]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19482-19546]:Block[19482-19546]"
    }, {
      "left" : "result.append('J', ' ');",
      "right" : "result.append('J', ' ');",
      "info" : "ExpressionStatement[19504-19528]:ExpressionStatement[19504-19528]"
    }, {
      "left" : "if (!contains(value, index + 1, 1, L_T_K_S_N_M_B_Z) && !contains(value, index - 1, 1, \"S\", \"K\", \"L\"))",
      "right" : "if (!contains(value, index + 1, 1, L_T_K_S_N_M_B_Z) && !contains(value, index - 1, 1, \"S\", \"K\", \"L\"))",
      "info" : "IfStatement[19552-19713]:IfStatement[19552-19713]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19654-19713]:Block[19654-19713]"
    }, {
      "left" : "result.append('J');",
      "right" : "result.append('J');",
      "info" : "ExpressionStatement[19676-19695]:ExpressionStatement[19676-19695]"
    }, {
      "left" : "if (charAt(value, index + 1) == 'J')",
      "right" : "if (charAt(value, index + 1) == 'J')",
      "info" : "IfStatement[19731-19873]:IfStatement[19731-19873]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19768-19819]:Block[19768-19819]"
    }, {
      "left" : "index += 2;",
      "right" : "index += 2;",
      "info" : "ExpressionStatement[19790-19801]:ExpressionStatement[19790-19801]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19825-19873]:Block[19825-19873]"
    }, {
      "left" : "index++;",
      "right" : "index++;",
      "info" : "ExpressionStatement[19847-19855]:ExpressionStatement[19847-19855]"
    }, {
      "left" : "return index;",
      "right" : "return index;",
      "info" : "ReturnStatement[19896-19909]:ReturnStatement[19896-19909]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20091-20430]:Block[20091-20430]"
    }, {
      "left" : "if (charAt(value, index + 1) == 'L')",
      "right" : "if (charAt(value, index + 1) == 'L')",
      "info" : "IfStatement[20101-20402]:IfStatement[20101-20402]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20138-20332]:Block[20138-20332]"
    }, {
      "left" : "if (conditionL0(value, index))",
      "right" : "if (conditionL0(value, index))",
      "info" : "IfStatement[20152-20298]:IfStatement[20152-20298]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20183-20241]:Block[20183-20241]"
    }, {
      "left" : "result.appendPrimary('L');",
      "right" : "result.appendPrimary('L');",
      "info" : "ExpressionStatement[20201-20227]:ExpressionStatement[20201-20227]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20247-20298]:Block[20247-20298]"
    }, {
      "left" : "result.append('L');",
      "right" : "result.append('L');",
      "info" : "ExpressionStatement[20265-20284]:ExpressionStatement[20265-20284]"
    }, {
      "left" : "index += 2;",
      "right" : "index += 2;",
      "info" : "ExpressionStatement[20311-20322]:ExpressionStatement[20311-20322]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20338-20402]:Block[20338-20402]"
    }, {
      "left" : "index++;",
      "right" : "index++;",
      "info" : "ExpressionStatement[20352-20360]:ExpressionStatement[20352-20360]"
    }, {
      "left" : "result.append('L');",
      "right" : "result.append('L');",
      "info" : "ExpressionStatement[20373-20392]:ExpressionStatement[20373-20392]"
    }, {
      "left" : "return index;",
      "right" : "return index;",
      "info" : "ReturnStatement[20411-20424]:ReturnStatement[20411-20424]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20602-20878]:Block[20602-20878]"
    }, {
      "left" : "if (charAt(value, index + 1) == 'H')",
      "right" : "if (charAt(value, index + 1) == 'H')",
      "info" : "IfStatement[20612-20850]:IfStatement[20612-20850]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20649-20716]:Block[20649-20716]"
    }, {
      "left" : "result.append('F');",
      "right" : "result.append('F');",
      "info" : "ExpressionStatement[20663-20682]:ExpressionStatement[20663-20682]"
    }, {
      "left" : "index += 2;",
      "right" : "index += 2;",
      "info" : "ExpressionStatement[20695-20706]:ExpressionStatement[20695-20706]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20722-20850]:Block[20722-20850]"
    }, {
      "left" : "result.append('P');",
      "right" : "result.append('P');",
      "info" : "ExpressionStatement[20736-20755]:ExpressionStatement[20736-20755]"
    }, {
      "left" : "index = contains(value, index + 1, 1, \"P\", \"B\") ? index + 2 : index + 1;",
      "right" : "index = contains(value, index + 1, 1, \"P\", \"B\") ? index + 2 : index + 1;",
      "info" : "ExpressionStatement[20768-20840]:ExpressionStatement[20768-20840]"
    }, {
      "left" : "return index;",
      "right" : "return index;",
      "info" : "ReturnStatement[20859-20872]:ReturnStatement[20859-20872]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21098-21449]:Block[21098-21449]"
    }, {
      "left" : "if (index == value.length() - 1 && !slavoGermanic && \n            contains(value, index - 2, 2, \"IE\") && \n            !contains(value, index - 4, 2, \"ME\", \"MA\"))",
      "right" : "if (index == value.length() - 1 && !slavoGermanic && \n            contains(value, index - 2, 2, \"IE\") && \n            !contains(value, index - 4, 2, \"ME\", \"MA\"))",
      "info" : "IfStatement[21108-21371]:IfStatement[21108-21371]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21270-21322]:Block[21270-21322]"
    }, {
      "left" : "result.appendAlternate('R');",
      "right" : "result.appendAlternate('R');",
      "info" : "ExpressionStatement[21284-21312]:ExpressionStatement[21284-21312]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21328-21371]:Block[21328-21371]"
    }, {
      "left" : "result.append('R');",
      "right" : "result.append('R');",
      "info" : "ExpressionStatement[21342-21361]:ExpressionStatement[21342-21361]"
    }, {
      "left" : "return charAt(value, index + 1) == 'R' ? index + 2 : index + 1;",
      "right" : "return charAt(value, index + 1) == 'R' ? index + 2 : index + 1;",
      "info" : "ReturnStatement[21380-21443]:ReturnStatement[21380-21443]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21669-23682]:Block[21669-23682]"
    }, {
      "left" : "if (contains(value, index - 1, 3, \"ISL\", \"YSL\"))",
      "right" : "if (contains(value, index - 1, 3, \"ISL\", \"YSL\"))",
      "info" : "IfStatement[21679-23654]:IfStatement[21679-23654]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21728-21837]:Block[21728-21837]"
    }, {
      "left" : "index++;",
      "right" : "index++;",
      "info" : "ExpressionStatement[21819-21827]:ExpressionStatement[21819-21827]"
    }, {
      "left" : "if (index == 0 && contains(value, index, 5, \"SUGAR\"))",
      "right" : "if (index == 0 && contains(value, index, 5, \"SUGAR\"))",
      "info" : "IfStatement[21843-23654]:IfStatement[21843-23654]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21897-22010]:Block[21897-22010]"
    }, {
      "left" : "result.append('X', 'S');",
      "right" : "result.append('X', 'S');",
      "info" : "ExpressionStatement[21955-21979]:ExpressionStatement[21955-21979]"
    }, {
      "left" : "index++;",
      "right" : "index++;",
      "info" : "ExpressionStatement[21992-22000]:ExpressionStatement[21992-22000]"
    }, {
      "left" : "if (contains(value, index, 2, \"SH\"))",
      "right" : "if (contains(value, index, 2, \"SH\"))",
      "info" : "IfStatement[22016-23654]:IfStatement[22016-23654]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22053-22337]:Block[22053-22337]"
    }, {
      "left" : "if (contains(value, index + 1, 4, \n                         \"HEIM\", \"HOEK\", \"HOLM\", \"HOLZ\"))",
      "right" : "if (contains(value, index + 1, 4, \n                         \"HEIM\", \"HOEK\", \"HOLM\", \"HOLZ\"))",
      "info" : "IfStatement[22067-22303]:IfStatement[22067-22303]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22160-22246]:Block[22160-22246]"
    }, {
      "left" : "result.append('S');",
      "right" : "result.append('S');",
      "info" : "ExpressionStatement[22213-22232]:ExpressionStatement[22213-22232]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22252-22303]:Block[22252-22303]"
    }, {
      "left" : "result.append('X');",
      "right" : "result.append('X');",
      "info" : "ExpressionStatement[22270-22289]:ExpressionStatement[22270-22289]"
    }, {
      "left" : "index += 2;",
      "right" : "index += 2;",
      "info" : "ExpressionStatement[22316-22327]:ExpressionStatement[22316-22327]"
    }, {
      "left" : "if (contains(value, index, 3, \"SIO\", \"SIA\") || contains(value, index, 4, \"SIAN\"))",
      "right" : "if (contains(value, index, 3, \"SIO\", \"SIA\") || contains(value, index, 4, \"SIAN\"))",
      "info" : "IfStatement[22343-23654]:IfStatement[22343-23654]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22425-22648]:Block[22425-22648]"
    }, {
      "left" : "if (slavoGermanic)",
      "right" : "if (slavoGermanic)",
      "info" : "IfStatement[22482-22614]:IfStatement[22482-22614]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22501-22552]:Block[22501-22552]"
    }, {
      "left" : "result.append('S');",
      "right" : "result.append('S');",
      "info" : "ExpressionStatement[22519-22538]:ExpressionStatement[22519-22538]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22558-22614]:Block[22558-22614]"
    }, {
      "left" : "result.append('S', 'X');",
      "right" : "result.append('S', 'X');",
      "info" : "ExpressionStatement[22576-22600]:ExpressionStatement[22576-22600]"
    }, {
      "left" : "index += 3;",
      "right" : "index += 3;",
      "info" : "ExpressionStatement[22627-22638]:ExpressionStatement[22627-22638]"
    }, {
      "left" : "if ((index == 0 && contains(value, index + 1, 1, \"M\", \"N\", \"L\", \"W\")) || contains(value, index + 1, 1, \"Z\"))",
      "right" : "if ((index == 0 && contains(value, index + 1, 1, \"M\", \"N\", \"L\", \"W\")) || contains(value, index + 1, 1, \"Z\"))",
      "info" : "IfStatement[22654-23654]:IfStatement[22654-23654]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22763-23124]:Block[22763-23124]"
    }, {
      "left" : "result.append('S', 'X');",
      "right" : "result.append('S', 'X');",
      "info" : "ExpressionStatement[23010-23034]:ExpressionStatement[23010-23034]"
    }, {
      "left" : "index = contains(value, index + 1, 1, \"Z\") ? index + 2 : index + 1;",
      "right" : "index = contains(value, index + 1, 1, \"Z\") ? index + 2 : index + 1;",
      "info" : "ExpressionStatement[23047-23114]:ExpressionStatement[23047-23114]"
    }, {
      "left" : "if (contains(value, index, 2, \"SC\"))",
      "right" : "if (contains(value, index, 2, \"SC\"))",
      "info" : "IfStatement[23130-23654]:IfStatement[23130-23654]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23167-23230]:Block[23167-23230]"
    }, {
      "left" : "index = handleSC(value, result, index);",
      "right" : "index = handleSC(value, result, index);",
      "info" : "ExpressionStatement[23181-23220]:ExpressionStatement[23181-23220]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23236-23654]:Block[23236-23654]"
    }, {
      "left" : "if (index == value.length() - 1 && contains(value, index - 2, \n                                                        2, \"AI\", \"OI\"))",
      "right" : "if (index == value.length() - 1 && contains(value, index - 2, \n                                                        2, \"AI\", \"OI\"))",
      "info" : "IfStatement[23250-23559]:IfStatement[23250-23559]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23384-23502]:Block[23384-23502]"
    }, {
      "left" : "result.appendAlternate('S');",
      "right" : "result.appendAlternate('S');",
      "info" : "ExpressionStatement[23460-23488]:ExpressionStatement[23460-23488]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23508-23559]:Block[23508-23559]"
    }, {
      "left" : "result.append('S');",
      "right" : "result.append('S');",
      "info" : "ExpressionStatement[23526-23545]:ExpressionStatement[23526-23545]"
    }, {
      "left" : "index = contains(value, index + 1, 1, \"S\", \"Z\") ? index + 2 : index + 1;",
      "right" : "index = contains(value, index + 1, 1, \"S\", \"Z\") ? index + 2 : index + 1;",
      "info" : "ExpressionStatement[23572-23644]:ExpressionStatement[23572-23644]"
    }, {
      "left" : "return index;",
      "right" : "return index;",
      "info" : "ReturnStatement[23663-23676]:ReturnStatement[23663-23676]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23858-24821]:Block[23858-24821]"
    }, {
      "left" : "if (charAt(value, index + 2) == 'H')",
      "right" : "if (charAt(value, index + 2) == 'H')",
      "info" : "IfStatement[23868-24789]:IfStatement[23868-24789]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23905-24640]:Block[23905-24640]"
    }, {
      "left" : "if (contains(value, index + 3, \n                         2, \"OO\", \"ER\", \"EN\", \"UY\", \"ED\", \"EM\"))",
      "right" : "if (contains(value, index + 3, \n                         2, \"OO\", \"ER\", \"EN\", \"UY\", \"ED\", \"EM\"))",
      "info" : "IfStatement[23960-24630]:IfStatement[23960-24630]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24057-24390]:Block[24057-24390]"
    }, {
      "left" : "if (contains(value, index + 3, 2, \"ER\", \"EN\"))",
      "right" : "if (contains(value, index + 3, 2, \"ER\", \"EN\"))",
      "info" : "IfStatement[24141-24376]:IfStatement[24141-24376]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24188-24310]:Block[24188-24310]"
    }, {
      "left" : "result.append(\"X\", \"SK\");",
      "right" : "result.append(\"X\", \"SK\");",
      "info" : "ExpressionStatement[24267-24292]:ExpressionStatement[24267-24292]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24316-24376]:Block[24316-24376]"
    }, {
      "left" : "result.append(\"SK\");",
      "right" : "result.append(\"SK\");",
      "info" : "ExpressionStatement[24338-24358]:ExpressionStatement[24338-24358]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24396-24630]:Block[24396-24630]"
    }, {
      "left" : "if (index == 0 && !isVowel(charAt(value, 3)) && charAt(value, 3) != 'W')",
      "right" : "if (index == 0 && !isVowel(charAt(value, 3)) && charAt(value, 3) != 'W')",
      "info" : "IfStatement[24414-24616]:IfStatement[24414-24616]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24487-24551]:Block[24487-24551]"
    }, {
      "left" : "result.append('X', 'S');",
      "right" : "result.append('X', 'S');",
      "info" : "ExpressionStatement[24509-24533]:ExpressionStatement[24509-24533]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24557-24616]:Block[24557-24616]"
    }, {
      "left" : "result.append('X');",
      "right" : "result.append('X');",
      "info" : "ExpressionStatement[24579-24598]:ExpressionStatement[24579-24598]"
    }, {
      "left" : "if (contains(value, index + 2, 1, \"I\", \"E\", \"Y\"))",
      "right" : "if (contains(value, index + 2, 1, \"I\", \"E\", \"Y\"))",
      "info" : "IfStatement[24646-24789]:IfStatement[24646-24789]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24696-24739]:Block[24696-24739]"
    }, {
      "left" : "result.append('S');",
      "right" : "result.append('S');",
      "info" : "ExpressionStatement[24710-24729]:ExpressionStatement[24710-24729]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24745-24789]:Block[24745-24789]"
    }, {
      "left" : "result.append(\"SK\");",
      "right" : "result.append(\"SK\");",
      "info" : "ExpressionStatement[24759-24779]:ExpressionStatement[24759-24779]"
    }, {
      "left" : "return index + 3;",
      "right" : "return index + 3;",
      "info" : "ReturnStatement[24798-24815]:ReturnStatement[24798-24815]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24993-25917]:Block[24993-25917]"
    }, {
      "left" : "if (contains(value, index, 4, \"TION\"))",
      "right" : "if (contains(value, index, 4, \"TION\"))",
      "info" : "IfStatement[25003-25889]:IfStatement[25003-25889]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25042-25109]:Block[25042-25109]"
    }, {
      "left" : "result.append('X');",
      "right" : "result.append('X');",
      "info" : "ExpressionStatement[25056-25075]:ExpressionStatement[25056-25075]"
    }, {
      "left" : "index += 3;",
      "right" : "index += 3;",
      "info" : "ExpressionStatement[25088-25099]:ExpressionStatement[25088-25099]"
    }, {
      "left" : "if (contains(value, index, 3, \"TIA\", \"TCH\"))",
      "right" : "if (contains(value, index, 3, \"TIA\", \"TCH\"))",
      "info" : "IfStatement[25115-25889]:IfStatement[25115-25889]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25160-25227]:Block[25160-25227]"
    }, {
      "left" : "result.append('X');",
      "right" : "result.append('X');",
      "info" : "ExpressionStatement[25174-25193]:ExpressionStatement[25174-25193]"
    }, {
      "left" : "index += 3;",
      "right" : "index += 3;",
      "info" : "ExpressionStatement[25206-25217]:ExpressionStatement[25206-25217]"
    }, {
      "left" : "if (contains(value, index, 2, \"TH\") || contains(value, index, \n                                                               3, \"TTH\"))",
      "right" : "if (contains(value, index, 2, \"TH\") || contains(value, index, \n                                                               3, \"TTH\"))",
      "info" : "IfStatement[25233-25889]:IfStatement[25233-25889]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25370-25755]:Block[25370-25755]"
    }, {
      "left" : "if (contains(value, index + 2, 2, \"OM\", \"AM\") || \n                //-- special case \"thomas\", \"thames\" or germanic --//\n                contains(value, 0, 4, \"VAN \", \"VON \") || \n                contains(value, 0, 3, \"SCH\"))",
      "right" : "if (contains(value, index + 2, 2, \"OM\", \"AM\") || \n                //-- special case \"thomas\", \"thames\" or germanic --//\n                contains(value, 0, 4, \"VAN \", \"VON \") || \n                contains(value, 0, 3, \"SCH\"))",
      "info" : "IfStatement[25384-25721]:IfStatement[25384-25721]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25608-25659]:Block[25608-25659]"
    }, {
      "left" : "result.append('T');",
      "right" : "result.append('T');",
      "info" : "ExpressionStatement[25626-25645]:ExpressionStatement[25626-25645]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25665-25721]:Block[25665-25721]"
    }, {
      "left" : "result.append('0', 'T');",
      "right" : "result.append('0', 'T');",
      "info" : "ExpressionStatement[25683-25707]:ExpressionStatement[25683-25707]"
    }, {
      "left" : "index += 2;",
      "right" : "index += 2;",
      "info" : "ExpressionStatement[25734-25745]:ExpressionStatement[25734-25745]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25761-25889]:Block[25761-25889]"
    }, {
      "left" : "result.append('T');",
      "right" : "result.append('T');",
      "info" : "ExpressionStatement[25775-25794]:ExpressionStatement[25775-25794]"
    }, {
      "left" : "index = contains(value, index + 1, 1, \"T\", \"D\") ? index + 2 : index + 1;",
      "right" : "index = contains(value, index + 1, 1, \"T\", \"D\") ? index + 2 : index + 1;",
      "info" : "ExpressionStatement[25807-25879]:ExpressionStatement[25807-25879]"
    }, {
      "left" : "return index;",
      "right" : "return index;",
      "info" : "ReturnStatement[25898-25911]:ReturnStatement[25898-25911]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26089-27408]:Block[26089-27408]"
    }, {
      "left" : "if (contains(value, index, 2, \"WR\"))",
      "right" : "if (contains(value, index, 2, \"WR\"))",
      "info" : "IfStatement[26099-27380]:IfStatement[26099-27380]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26136-26255]:Block[26136-26255]"
    }, {
      "left" : "result.append('R');",
      "right" : "result.append('R');",
      "info" : "ExpressionStatement[26202-26221]:ExpressionStatement[26202-26221]"
    }, {
      "left" : "index += 2;",
      "right" : "index += 2;",
      "info" : "ExpressionStatement[26234-26245]:ExpressionStatement[26234-26245]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26261-27380]:Block[26261-27380]"
    }, {
      "left" : "if (index == 0 && (isVowel(charAt(value, index + 1)) || \n                               contains(value, index, 2, \"WH\")))",
      "right" : "if (index == 0 && (isVowel(charAt(value, index + 1)) || \n                               contains(value, index, 2, \"WH\")))",
      "info" : "IfStatement[26275-27370]:IfStatement[26275-27370]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26397-26739]:Block[26397-26739]"
    }, {
      "left" : "if (isVowel(charAt(value, index + 1)))",
      "right" : "if (isVowel(charAt(value, index + 1)))",
      "info" : "IfStatement[26415-26700]:IfStatement[26415-26700]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26454-26581]:Block[26454-26581]"
    }, {
      "left" : "result.append('A', 'F');",
      "right" : "result.append('A', 'F');",
      "info" : "ExpressionStatement[26539-26563]:ExpressionStatement[26539-26563]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26587-26700]:Block[26587-26700]"
    }, {
      "left" : "result.append('A');",
      "right" : "result.append('A');",
      "info" : "ExpressionStatement[26663-26682]:ExpressionStatement[26663-26682]"
    }, {
      "left" : "index++;",
      "right" : "index++;",
      "info" : "ExpressionStatement[26717-26725]:ExpressionStatement[26717-26725]"
    }, {
      "left" : "if ((index == value.length() - 1 && isVowel(charAt(value, index - 1))) ||\n                       contains(value, index - 1, \n                                5, \"EWSKI\", \"EWSKY\", \"OWSKI\", \"OWSKY\") ||\n                       contains(value, 0, 3, \"SCH\"))",
      "right" : "if ((index == value.length() - 1 && isVowel(charAt(value, index - 1))) ||\n                       contains(value, index - 1, \n                                5, \"EWSKI\", \"EWSKY\", \"OWSKI\", \"OWSKY\") ||\n                       contains(value, 0, 3, \"SCH\"))",
      "info" : "IfStatement[26745-27370]:IfStatement[26745-27370]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26997-27134]:Block[26997-27134]"
    }, {
      "left" : "result.appendAlternate('F');",
      "right" : "result.appendAlternate('F');",
      "info" : "ExpressionStatement[27067-27095]:ExpressionStatement[27067-27095]"
    }, {
      "left" : "index++;",
      "right" : "index++;",
      "info" : "ExpressionStatement[27112-27120]:ExpressionStatement[27112-27120]"
    }, {
      "left" : "if (contains(value, index, 4, \"WICZ\", \"WITZ\"))",
      "right" : "if (contains(value, index, 4, \"WICZ\", \"WITZ\"))",
      "info" : "IfStatement[27140-27370]:IfStatement[27140-27370]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27187-27324]:Block[27187-27324]"
    }, {
      "left" : "result.append(\"TS\", \"FX\");",
      "right" : "result.append(\"TS\", \"FX\");",
      "info" : "ExpressionStatement[27256-27282]:ExpressionStatement[27256-27282]"
    }, {
      "left" : "index += 4;",
      "right" : "index += 4;",
      "info" : "ExpressionStatement[27299-27310]:ExpressionStatement[27299-27310]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27330-27370]:Block[27330-27370]"
    }, {
      "left" : "index++;",
      "right" : "index++;",
      "info" : "ExpressionStatement[27348-27356]:ExpressionStatement[27348-27356]"
    }, {
      "left" : "return index;",
      "right" : "return index;",
      "info" : "ReturnStatement[27389-27402]:ReturnStatement[27389-27402]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27584-28085]:Block[27584-28085]"
    }, {
      "left" : "if (index == 0)",
      "right" : "if (index == 0)",
      "info" : "IfStatement[27594-28057]:IfStatement[27594-28057]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27610-27674]:Block[27610-27674]"
    }, {
      "left" : "result.append('S');",
      "right" : "result.append('S');",
      "info" : "ExpressionStatement[27624-27643]:ExpressionStatement[27624-27643]"
    }, {
      "left" : "index++;",
      "right" : "index++;",
      "info" : "ExpressionStatement[27656-27664]:ExpressionStatement[27656-27664]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27680-28057]:Block[27680-28057]"
    }, {
      "left" : "if (!((index == value.length() - 1) && \n                  (contains(value, index - 3, 3, \"IAU\", \"EAU\") || \n                   contains(value, index - 2, 2, \"AU\", \"OU\"))))",
      "right" : "if (!((index == value.length() - 1) && \n                  (contains(value, index - 3, 3, \"IAU\", \"EAU\") || \n                   contains(value, index - 2, 2, \"AU\", \"OU\"))))",
      "info" : "IfStatement[27694-27962]:IfStatement[27694-27962]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27865-27962]:Block[27865-27962]"
    }, {
      "left" : "result.append(\"KS\");",
      "right" : "result.append(\"KS\");",
      "info" : "ExpressionStatement[27928-27948]:ExpressionStatement[27928-27948]"
    }, {
      "left" : "index = contains(value, index + 1, 1, \"C\", \"X\") ? index + 2 : index + 1;",
      "right" : "index = contains(value, index + 1, 1, \"C\", \"X\") ? index + 2 : index + 1;",
      "info" : "ExpressionStatement[27975-28047]:ExpressionStatement[27975-28047]"
    }, {
      "left" : "return index;",
      "right" : "return index;",
      "info" : "ReturnStatement[28066-28079]:ReturnStatement[28066-28079]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28255-28809]:Block[28255-28809]"
    }, {
      "left" : "if (charAt(value, index + 1) == 'H')",
      "right" : "if (charAt(value, index + 1) == 'H')",
      "info" : "IfStatement[28265-28781]:IfStatement[28265-28781]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28302-28438]:Block[28302-28438]"
    }, {
      "left" : "result.append('J');",
      "right" : "result.append('J');",
      "info" : "ExpressionStatement[28385-28404]:ExpressionStatement[28385-28404]"
    }, {
      "left" : "index += 2;",
      "right" : "index += 2;",
      "info" : "ExpressionStatement[28417-28428]:ExpressionStatement[28417-28428]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28444-28781]:Block[28444-28781]"
    }, {
      "left" : "if (contains(value, index + 1, 2, \"ZO\", \"ZI\", \"ZA\") || (slavoGermanic && (index > 0 && charAt(value, index - 1) != 'T')))",
      "right" : "if (contains(value, index + 1, 2, \"ZO\", \"ZI\", \"ZA\") || (slavoGermanic && (index > 0 && charAt(value, index - 1) != 'T')))",
      "info" : "IfStatement[28458-28694]:IfStatement[28458-28694]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28580-28637]:Block[28580-28637]"
    }, {
      "left" : "result.append(\"S\", \"TS\");",
      "right" : "result.append(\"S\", \"TS\");",
      "info" : "ExpressionStatement[28598-28623]:ExpressionStatement[28598-28623]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28643-28694]:Block[28643-28694]"
    }, {
      "left" : "result.append('S');",
      "right" : "result.append('S');",
      "info" : "ExpressionStatement[28661-28680]:ExpressionStatement[28661-28680]"
    }, {
      "left" : "index = charAt(value, index + 1) == 'Z' ? index + 2 : index + 1;",
      "right" : "index = charAt(value, index + 1) == 'Z' ? index + 2 : index + 1;",
      "info" : "ExpressionStatement[28707-28771]:ExpressionStatement[28707-28771]"
    }, {
      "left" : "return index;",
      "right" : "return index;",
      "info" : "ReturnStatement[28790-28803]:ReturnStatement[28790-28803]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28951-29449]:Block[28951-29449]"
    }, {
      "left" : "if (contains(value, index, 4, \"CHIA\"))",
      "right" : "if (contains(value, index, 4, \"CHIA\"))",
      "info" : "IfStatement[28961-29443]:IfStatement[28961-29443]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29000-29036]:Block[29000-29036]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[29014-29026]:ReturnStatement[29014-29026]"
    }, {
      "left" : "if (index <= 1)",
      "right" : "if (index <= 1)",
      "info" : "IfStatement[29042-29443]:IfStatement[29042-29443]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29058-29095]:Block[29058-29095]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[29072-29085]:ReturnStatement[29072-29085]"
    }, {
      "left" : "if (isVowel(charAt(value, index - 2)))",
      "right" : "if (isVowel(charAt(value, index - 2)))",
      "info" : "IfStatement[29101-29443]:IfStatement[29101-29443]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29140-29177]:Block[29140-29177]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[29154-29167]:ReturnStatement[29154-29167]"
    }, {
      "left" : "if (!contains(value, index - 1, 3, \"ACH\"))",
      "right" : "if (!contains(value, index - 1, 3, \"ACH\"))",
      "info" : "IfStatement[29183-29443]:IfStatement[29183-29443]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29226-29263]:Block[29226-29263]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[29240-29253]:ReturnStatement[29240-29253]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29269-29443]:Block[29269-29443]"
    }, {
      "left" : "char c = charAt(value, index + 2);",
      "right" : "char c = charAt(value, index + 2);",
      "info" : "VariableDeclarationStatement[29283-29317]:VariableDeclarationStatement[29283-29317]"
    }, {
      "left" : "return (c != 'I' && c != 'E') ||\n                    contains(value, index - 2, 6, \"BACHER\", \"MACHER\");",
      "right" : "return (c != 'I' && c != 'E') ||\n                    contains(value, index - 2, 6, \"BACHER\", \"MACHER\");",
      "info" : "ReturnStatement[29330-29433]:ReturnStatement[29330-29433]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29565-29934]:Block[29565-29934]"
    }, {
      "left" : "if (index != 0)",
      "right" : "if (index != 0)",
      "info" : "IfStatement[29575-29928]:IfStatement[29575-29928]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29591-29628]:Block[29591-29628]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[29605-29618]:ReturnStatement[29605-29618]"
    }, {
      "left" : "if (!contains(value, index + 1, 5, \"HARAC\", \"HARIS\") && \n                   !contains(value, index + 1, 3, \"HOR\", \"HYM\", \"HIA\", \"HEM\"))",
      "right" : "if (!contains(value, index + 1, 5, \"HARAC\", \"HARIS\") && \n                   !contains(value, index + 1, 3, \"HOR\", \"HYM\", \"HIA\", \"HEM\"))",
      "info" : "IfStatement[29634-29928]:IfStatement[29634-29928]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29770-29807]:Block[29770-29807]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[29784-29797]:ReturnStatement[29784-29797]"
    }, {
      "left" : "if (contains(value, 0, 5, \"CHORE\"))",
      "right" : "if (contains(value, 0, 5, \"CHORE\"))",
      "info" : "IfStatement[29813-29928]:IfStatement[29813-29928]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29849-29886]:Block[29849-29886]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[29863-29876]:ReturnStatement[29863-29876]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29892-29928]:Block[29892-29928]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[29906-29918]:ReturnStatement[29906-29918]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30050-30552]:Block[30050-30552]"
    }, {
      "left" : "return ((contains(value, 0, 4, \"VAN \", \"VON \") || contains(value, 0, \n                                                                   3, \"SCH\")) ||\n                contains(value, index - 2, 6, \"ORCHES\", \"ARCHIT\", \"ORCHID\") ||\n                contains(value, index + 2, 1, \"T\", \"S\") ||\n                ((contains(value, index - 1, 1, \"A\", \"O\", \"U\", \"E\") || index == 0) &&\n                 (contains(value, index + 2, 1, L_R_N_M_B_H_F_V_W_SPACE) || index + 1 == value.length() - 1)));",
      "right" : "return ((contains(value, 0, 4, \"VAN \", \"VON \") || contains(value, 0, \n                                                                   3, \"SCH\")) ||\n                contains(value, index - 2, 6, \"ORCHES\", \"ARCHIT\", \"ORCHID\") ||\n                contains(value, index + 2, 1, \"T\", \"S\") ||\n                ((contains(value, index - 1, 1, \"A\", \"O\", \"U\", \"E\") || index == 0) &&\n                 (contains(value, index + 2, 1, L_R_N_M_B_H_F_V_W_SPACE) || index + 1 == value.length() - 1)));",
      "info" : "ReturnStatement[30060-30546]:ReturnStatement[30060-30546]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30666-31097]:Block[30666-31097]"
    }, {
      "left" : "if (index == value.length() - 3 && \n            contains(value, index - 1, 4, \"ILLO\", \"ILLA\", \"ALLE\"))",
      "right" : "if (index == value.length() - 3 && \n            contains(value, index - 1, 4, \"ILLO\", \"ILLA\", \"ALLE\"))",
      "info" : "IfStatement[30676-31091]:IfStatement[30676-31091]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30779-30815]:Block[30779-30815]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[30793-30805]:ReturnStatement[30793-30805]"
    }, {
      "left" : "if ((contains(value, value.length() - 2, 2, \"AS\", \"OS\") || \n                    contains(value, value.length() - 1, 1, \"A\", \"O\")) &&\n                   contains(value, index - 1, 4, \"ALLE\"))",
      "right" : "if ((contains(value, value.length() - 2, 2, \"AS\", \"OS\") || \n                    contains(value, value.length() - 1, 1, \"A\", \"O\")) &&\n                   contains(value, index - 1, 4, \"ALLE\"))",
      "info" : "IfStatement[30821-31091]:IfStatement[30821-31091]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31012-31048]:Block[31012-31048]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[31026-31038]:ReturnStatement[31026-31038]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31054-31091]:Block[31054-31091]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[31068-31081]:ReturnStatement[31068-31081]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31211-31471]:Block[31211-31471]"
    }, {
      "left" : "if (charAt(value, index + 1) == 'M')",
      "right" : "if (charAt(value, index + 1) == 'M')",
      "info" : "IfStatement[31221-31294]:IfStatement[31221-31294]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31258-31294]:Block[31258-31294]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[31272-31284]:ReturnStatement[31272-31284]"
    }, {
      "left" : "return contains(value, index - 1, 3, \"UMB\") &&\n                ((index + 1) == value.length() - 1 || contains(value,\n                        index + 2, 2, \"ER\"));",
      "right" : "return contains(value, index - 1, 3, \"UMB\") &&\n                ((index + 1) == value.length() - 1 || contains(value,\n                        index + 2, 2, \"ER\"));",
      "info" : "ReturnStatement[31303-31465]:ReturnStatement[31303-31465]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31742-31887]:Block[31742-31887]"
    }, {
      "left" : "return value.indexOf('W') > -1 || value.indexOf('K') > -1 || \n            value.indexOf(\"CZ\") > -1 || value.indexOf(\"WITZ\") > -1;",
      "right" : "return value.indexOf('W') > -1 || value.indexOf('K') > -1 || \n            value.indexOf(\"CZ\") > -1 || value.indexOf(\"WITZ\") > -1;",
      "info" : "ReturnStatement[31752-31881]:ReturnStatement[31752-31881]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32005-32053]:Block[32005-32053]"
    }, {
      "left" : "return VOWELS.indexOf(ch) != -1;",
      "right" : "return VOWELS.indexOf(ch) != -1;",
      "info" : "ReturnStatement[32015-32047]:ReturnStatement[32015-32047]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32307-32556]:Block[32307-32556]"
    }, {
      "left" : "boolean result = false;",
      "right" : "boolean result = false;",
      "info" : "VariableDeclarationStatement[32317-32340]:VariableDeclarationStatement[32317-32340]"
    }, {
      "left" : "for (int i = 0; i < SILENT_START.length; i++)",
      "right" : "for (int i = 0; i < SILENT_START.length; i++)",
      "info" : "ForStatement[32349-32527]:ForStatement[32349-32527]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32395-32527]:Block[32395-32527]"
    }, {
      "left" : "if (value.startsWith(SILENT_START[i]))",
      "right" : "if (value.startsWith(SILENT_START[i]))",
      "info" : "IfStatement[32409-32517]:IfStatement[32409-32517]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32448-32517]:Block[32448-32517]"
    }, {
      "left" : "result = true;",
      "right" : "result = true;",
      "info" : "ExpressionStatement[32466-32480]:ExpressionStatement[32466-32480]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[32497-32503]:BreakStatement[32497-32503]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[32536-32550]:ReturnStatement[32536-32550]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32646-32877]:Block[32646-32877]"
    }, {
      "left" : "if (input == null)",
      "right" : "if (input == null)",
      "info" : "IfStatement[32656-32711]:IfStatement[32656-32711]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32675-32711]:Block[32675-32711]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[32689-32701]:ReturnStatement[32689-32701]"
    }, {
      "left" : "input = input.trim();",
      "right" : "input = input.trim();",
      "info" : "ExpressionStatement[32720-32741]:ExpressionStatement[32720-32741]"
    }, {
      "left" : "if (input.length() == 0)",
      "right" : "if (input.length() == 0)",
      "info" : "IfStatement[32750-32811]:IfStatement[32750-32811]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32775-32811]:Block[32775-32811]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[32789-32801]:ReturnStatement[32789-32801]"
    }, {
      "left" : "return input.toUpperCase(java.util.Locale.ENGLISH);",
      "right" : "return input.toUpperCase(java.util.Locale.ENGLISH);",
      "info" : "ReturnStatement[32820-32871]:ReturnStatement[32820-32871]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33126-33272]:Block[33126-33272]"
    }, {
      "left" : "if (index < 0 || index >= value.length())",
      "right" : "if (index < 0 || index >= value.length())",
      "info" : "IfStatement[33136-33229]:IfStatement[33136-33229]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33178-33229]:Block[33178-33229]"
    }, {
      "left" : "return Character.MIN_VALUE;",
      "right" : "return Character.MIN_VALUE;",
      "info" : "ReturnStatement[33192-33219]:ReturnStatement[33192-33219]"
    }, {
      "left" : "return value.charAt(index);",
      "right" : "return value.charAt(index);",
      "info" : "ReturnStatement[33239-33266]:ReturnStatement[33239-33266]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33460-33566]:Block[33460-33566]"
    }, {
      "left" : "return contains(value, start, length, \n                        new String[] { criteria });",
      "right" : "return contains(value, start, length, \n                        new String[] { criteria });",
      "info" : "ReturnStatement[33470-33560]:ReturnStatement[33470-33560]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33773-33891]:Block[33773-33891]"
    }, {
      "left" : "return contains(value, start, length, \n                        new String[] { criteria1, criteria2 });",
      "right" : "return contains(value, start, length, \n                        new String[] { criteria1, criteria2 });",
      "info" : "ReturnStatement[33783-33885]:ReturnStatement[33783-33885]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34153-34282]:Block[34153-34282]"
    }, {
      "left" : "return contains(value, start, length, \n                        new String[] { criteria1, criteria2, criteria3 });",
      "right" : "return contains(value, start, length, \n                        new String[] { criteria1, criteria2, criteria3 });",
      "info" : "ReturnStatement[34163-34276]:ReturnStatement[34163-34276]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34562-34742]:Block[34562-34742]"
    }, {
      "left" : "return contains(value, start, length, \n                        new String[] { criteria1, criteria2, criteria3, \n                                       criteria4 });",
      "right" : "return contains(value, start, length, \n                        new String[] { criteria1, criteria2, criteria3, \n                                       criteria4 });",
      "info" : "ReturnStatement[34572-34736]:ReturnStatement[34572-34736]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35077-35268]:Block[35077-35268]"
    }, {
      "left" : "return contains(value, start, length, \n                        new String[] { criteria1, criteria2, criteria3, \n                                       criteria4, criteria5 });",
      "right" : "return contains(value, start, length, \n                        new String[] { criteria1, criteria2, criteria3, \n                                       criteria4, criteria5 });",
      "info" : "ReturnStatement[35087-35262]:ReturnStatement[35087-35262]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35621-35823]:Block[35621-35823]"
    }, {
      "left" : "return contains(value, start, length, \n                        new String[] { criteria1, criteria2, criteria3, \n                                       criteria4, criteria5, criteria6 });",
      "right" : "return contains(value, start, length, \n                        new String[] { criteria1, criteria2, criteria3, \n                                       criteria4, criteria5, criteria6 });",
      "info" : "ReturnStatement[35631-35817]:ReturnStatement[35631-35817]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36142-36545]:Block[36142-36545]"
    }, {
      "left" : "boolean result = false;",
      "right" : "boolean result = false;",
      "info" : "VariableDeclarationStatement[36152-36175]:VariableDeclarationStatement[36152-36175]"
    }, {
      "left" : "if (start >= 0 && start + length <= value.length())",
      "right" : "if (start >= 0 && start + length <= value.length())",
      "info" : "IfStatement[36184-36516]:IfStatement[36184-36516]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36236-36516]:Block[36236-36516]"
    }, {
      "left" : "String target = value.substring(start, start + length);",
      "right" : "String target = value.substring(start, start + length);",
      "info" : "VariableDeclarationStatement[36250-36305]:VariableDeclarationStatement[36250-36305]"
    }, {
      "left" : "for (int i = 0; i < criteria.length; i++)",
      "right" : "for (int i = 0; i < criteria.length; i++)",
      "info" : "ForStatement[36319-36506]:ForStatement[36319-36506]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36361-36506]:Block[36361-36506]"
    }, {
      "left" : "if (target.equals(criteria[i]))",
      "right" : "if (target.equals(criteria[i]))",
      "info" : "IfStatement[36379-36492]:IfStatement[36379-36492]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36411-36492]:Block[36411-36492]"
    }, {
      "left" : "result = true;",
      "right" : "result = true;",
      "info" : "ExpressionStatement[36433-36447]:ExpressionStatement[36433-36447]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[36468-36474]:BreakStatement[36468-36474]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[36525-36539]:ReturnStatement[36525-36539]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36977-37028]:Block[36977-37028]"
    }, {
      "left" : "this.maxLength = maxLength;",
      "right" : "this.maxLength = maxLength;",
      "info" : "ExpressionStatement[36991-37018]:ExpressionStatement[36991-37018]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37069-37150]:Block[37069-37150]"
    }, {
      "left" : "appendPrimary(value);",
      "right" : "appendPrimary(value);",
      "info" : "ExpressionStatement[37083-37104]:ExpressionStatement[37083-37104]"
    }, {
      "left" : "appendAlternate(value);",
      "right" : "appendAlternate(value);",
      "info" : "ExpressionStatement[37117-37140]:ExpressionStatement[37117-37140]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37209-37296]:Block[37209-37296]"
    }, {
      "left" : "appendPrimary(primary);",
      "right" : "appendPrimary(primary);",
      "info" : "ExpressionStatement[37223-37246]:ExpressionStatement[37223-37246]"
    }, {
      "left" : "appendAlternate(alternate);",
      "right" : "appendAlternate(alternate);",
      "info" : "ExpressionStatement[37259-37286]:ExpressionStatement[37259-37286]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37344-37471]:Block[37344-37471]"
    }, {
      "left" : "if (this.primary.length() < this.maxLength)",
      "right" : "if (this.primary.length() < this.maxLength)",
      "info" : "IfStatement[37358-37461]:IfStatement[37358-37461]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37402-37461]:Block[37402-37461]"
    }, {
      "left" : "this.primary.append(value);",
      "right" : "this.primary.append(value);",
      "info" : "ExpressionStatement[37420-37447]:ExpressionStatement[37420-37447]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37521-37652]:Block[37521-37652]"
    }, {
      "left" : "if (this.alternate.length() < this.maxLength)",
      "right" : "if (this.alternate.length() < this.maxLength)",
      "info" : "IfStatement[37535-37642]:IfStatement[37535-37642]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37581-37642]:Block[37581-37642]"
    }, {
      "left" : "this.alternate.append(value);",
      "right" : "this.alternate.append(value);",
      "info" : "ExpressionStatement[37599-37628]:ExpressionStatement[37599-37628]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37695-37776]:Block[37695-37776]"
    }, {
      "left" : "appendPrimary(value);",
      "right" : "appendPrimary(value);",
      "info" : "ExpressionStatement[37709-37730]:ExpressionStatement[37709-37730]"
    }, {
      "left" : "appendAlternate(value);",
      "right" : "appendAlternate(value);",
      "info" : "ExpressionStatement[37743-37766]:ExpressionStatement[37743-37766]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37839-37926]:Block[37839-37926]"
    }, {
      "left" : "appendPrimary(primary);",
      "right" : "appendPrimary(primary);",
      "info" : "ExpressionStatement[37853-37876]:ExpressionStatement[37853-37876]"
    }, {
      "left" : "appendAlternate(alternate);",
      "right" : "appendAlternate(alternate);",
      "info" : "ExpressionStatement[37889-37916]:ExpressionStatement[37889-37916]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37976-38246]:Block[37976-38246]"
    }, {
      "left" : "int addChars = this.maxLength - this.primary.length();",
      "right" : "int addChars = this.maxLength - this.primary.length();",
      "info" : "VariableDeclarationStatement[37990-38044]:VariableDeclarationStatement[37990-38044]"
    }, {
      "left" : "if (value.length() <= addChars)",
      "right" : "if (value.length() <= addChars)",
      "info" : "IfStatement[38057-38236]:IfStatement[38057-38236]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38089-38148]:Block[38089-38148]"
    }, {
      "left" : "this.primary.append(value);",
      "right" : "this.primary.append(value);",
      "info" : "ExpressionStatement[38107-38134]:ExpressionStatement[38107-38134]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38154-38236]:Block[38154-38236]"
    }, {
      "left" : "this.primary.append(value.substring(0, addChars));",
      "right" : "this.primary.append(value.substring(0, addChars));",
      "info" : "ExpressionStatement[38172-38222]:ExpressionStatement[38172-38222]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38298-38574]:Block[38298-38574]"
    }, {
      "left" : "int addChars = this.maxLength - this.alternate.length();",
      "right" : "int addChars = this.maxLength - this.alternate.length();",
      "info" : "VariableDeclarationStatement[38312-38368]:VariableDeclarationStatement[38312-38368]"
    }, {
      "left" : "if (value.length() <= addChars)",
      "right" : "if (value.length() <= addChars)",
      "info" : "IfStatement[38381-38564]:IfStatement[38381-38564]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38413-38474]:Block[38413-38474]"
    }, {
      "left" : "this.alternate.append(value);",
      "right" : "this.alternate.append(value);",
      "info" : "ExpressionStatement[38431-38460]:ExpressionStatement[38431-38460]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38480-38564]:Block[38480-38564]"
    }, {
      "left" : "this.alternate.append(value.substring(0, addChars));",
      "right" : "this.alternate.append(value.substring(0, addChars));",
      "info" : "ExpressionStatement[38498-38550]:ExpressionStatement[38498-38550]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38611-38666]:Block[38611-38666]"
    }, {
      "left" : "return this.primary.toString();",
      "right" : "return this.primary.toString();",
      "info" : "ReturnStatement[38625-38656]:ReturnStatement[38625-38656]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38705-38762]:Block[38705-38762]"
    }, {
      "left" : "return this.alternate.toString();",
      "right" : "return this.alternate.toString();",
      "info" : "ReturnStatement[38719-38752]:ReturnStatement[38719-38752]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38800-38933]:Block[38800-38933]"
    }, {
      "left" : "return this.primary.length() >= this.maxLength && \n                this.alternate.length() >= this.maxLength;",
      "right" : "return this.primary.length() >= this.maxLength && \n                this.alternate.length() >= this.maxLength;",
      "info" : "ReturnStatement[38814-38923]:ReturnStatement[38814-38923]"
    } ]
  },
  "interFileMappings" : { }
}