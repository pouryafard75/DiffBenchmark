{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "CharacterReader",
      "right" : "CharacterReader",
      "info" : "TypeDeclaration[62-4877]:TypeDeclaration[62-5386]"
    }, {
      "left" : "static final char EOF = (char) -1;",
      "right" : "static final char EOF = (char) -1;",
      "info" : "FieldDeclaration[175-209]:FieldDeclaration[175-209]"
    }, {
      "left" : "private final String input;",
      "right" : "private final String input;",
      "info" : "FieldDeclaration[215-242]:FieldDeclaration[215-242]"
    }, {
      "left" : "private final int length;",
      "right" : "private final int length;",
      "info" : "FieldDeclaration[247-272]:FieldDeclaration[247-272]"
    }, {
      "left" : "private int pos = 0;",
      "right" : "private int pos = 0;",
      "info" : "FieldDeclaration[277-297]:FieldDeclaration[277-297]"
    }, {
      "left" : "private int mark = 0;",
      "right" : "private int mark = 0;",
      "info" : "FieldDeclaration[302-323]:FieldDeclaration[302-323]"
    }, {
      "left" : "CharacterReader(String input)",
      "right" : "CharacterReader(String input)",
      "info" : "MethodDeclaration[329-557]:MethodDeclaration[329-557]"
    }, {
      "left" : "int pos()",
      "right" : "int pos()",
      "info" : "MethodDeclaration[563-600]:MethodDeclaration[563-600]"
    }, {
      "left" : "boolean isEmpty()",
      "right" : "boolean isEmpty()",
      "info" : "MethodDeclaration[606-661]:MethodDeclaration[606-661]"
    }, {
      "left" : "char current()",
      "right" : "char current()",
      "info" : "MethodDeclaration[667-741]:MethodDeclaration[667-741]"
    }, {
      "left" : "char consume()",
      "right" : "char consume()",
      "info" : "MethodDeclaration[747-860]:MethodDeclaration[747-860]"
    }, {
      "left" : "void unconsume()",
      "right" : "void unconsume()",
      "info" : "MethodDeclaration[866-905]:MethodDeclaration[866-905]"
    }, {
      "left" : "void advance()",
      "right" : "void advance()",
      "info" : "MethodDeclaration[911-948]:MethodDeclaration[911-948]"
    }, {
      "left" : "void mark()",
      "right" : "void mark()",
      "info" : "MethodDeclaration[954-993]:MethodDeclaration[954-993]"
    }, {
      "left" : "void rewindToMark()",
      "right" : "void rewindToMark()",
      "info" : "MethodDeclaration[999-1046]:MethodDeclaration[999-1046]"
    }, {
      "left" : "String consumeAsString()",
      "right" : "String consumeAsString()",
      "info" : "MethodDeclaration[1052-1128]:MethodDeclaration[1052-1128]"
    }, {
      "left" : "String consumeTo(char c)",
      "right" : "String consumeTo(char c)",
      "info" : "MethodDeclaration[1134-1427]:MethodDeclaration[1134-1427]"
    }, {
      "left" : "String consumeTo(String seq)",
      "right" : "String consumeTo(String seq)",
      "info" : "MethodDeclaration[1433-1732]:MethodDeclaration[1433-1732]"
    }, {
      "left" : "String consumeToAny(char... seq)",
      "right" : "String consumeToAny(char... seq)",
      "info" : "MethodDeclaration[1738-2087]:MethodDeclaration[1738-2087]"
    }, {
      "left" : "String consumeToEnd()",
      "right" : "String consumeToEnd()",
      "info" : "MethodDeclaration[2093-2233]:MethodDeclaration[2093-2233]"
    }, {
      "left" : "String consumeLetterSequence()",
      "right" : "String consumeLetterSequence()",
      "info" : "MethodDeclaration[2239-2555]:MethodDeclaration[2239-2555]"
    }, {
      "left" : "String consumeHexSequence()",
      "right" : "String consumeHexSequence()",
      "info" : "MethodDeclaration[2563-2901]:MethodDeclaration[3072-3410]"
    }, {
      "left" : "String consumeDigitSequence()",
      "right" : "String consumeDigitSequence()",
      "info" : "MethodDeclaration[2907-3193]:MethodDeclaration[3416-3702]"
    }, {
      "left" : "boolean matches(char c)",
      "right" : "boolean matches(char c)",
      "info" : "MethodDeclaration[3199-3284]:MethodDeclaration[3708-3793]"
    }, {
      "left" : "boolean matches(String seq)",
      "right" : "boolean matches(String seq)",
      "info" : "MethodDeclaration[3290-3368]:MethodDeclaration[3799-3877]"
    }, {
      "left" : "boolean matchesIgnoreCase(String seq)",
      "right" : "boolean matchesIgnoreCase(String seq)",
      "info" : "MethodDeclaration[3374-3488]:MethodDeclaration[3883-3997]"
    }, {
      "left" : "boolean matchesAny(char... seq)",
      "right" : "boolean matchesAny(char... seq)",
      "info" : "MethodDeclaration[3494-3739]:MethodDeclaration[4003-4248]"
    }, {
      "left" : "boolean matchesLetter()",
      "right" : "boolean matchesLetter()",
      "info" : "MethodDeclaration[3745-3926]:MethodDeclaration[4254-4435]"
    }, {
      "left" : "boolean matchesDigit()",
      "right" : "boolean matchesDigit()",
      "info" : "MethodDeclaration[3932-4086]:MethodDeclaration[4441-4595]"
    }, {
      "left" : "boolean matchConsume(String seq)",
      "right" : "boolean matchConsume(String seq)",
      "info" : "MethodDeclaration[4092-4271]:MethodDeclaration[4601-4780]"
    }, {
      "left" : "boolean matchConsumeIgnoreCase(String seq)",
      "right" : "boolean matchConsumeIgnoreCase(String seq)",
      "info" : "MethodDeclaration[4277-4476]:MethodDeclaration[4786-4985]"
    }, {
      "left" : "boolean containsIgnoreCase(String seq)",
      "right" : "boolean containsIgnoreCase(String seq)",
      "info" : "MethodDeclaration[4482-4786]:MethodDeclaration[4991-5295]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[4792-4875]:MethodDeclaration[5301-5384]"
    } ],
    "mappings" : [
 {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[147-152]:TYPE_DECLARATION_KIND[147-152]"
    }, {
      "left" : "CharacterReader",
      "right" : "CharacterReader",
      "info" : "SimpleName[153-168]:SimpleName[153-168]"
    }, {
      "left" : "CharacterReader",
      "right" : "CharacterReader",
      "info" : "SimpleName[329-344]:SimpleName[329-344]"
    }, {
      "left" : "String input",
      "right" : "String input",
      "info" : "SingleVariableDeclaration[345-357]:SingleVariableDeclaration[345-357]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[359-557]:Block[359-557]"
    }, {
      "left" : "Validate.notNull(input);",
      "right" : "Validate.notNull(input);",
      "info" : "ExpressionStatement[369-393]:ExpressionStatement[369-393]"
    }, {
      "left" : "input = input.replaceAll(\"\\r\\n?\", \"\\n\");",
      "right" : "input = input.replaceAll(\"\\r\\n?\", \"\\n\");",
      "info" : "ExpressionStatement[402-442]:ExpressionStatement[402-442]"
    }, {
      "left" : "this.input = input;",
      "right" : "this.input = input;",
      "info" : "ExpressionStatement[494-513]:ExpressionStatement[494-513]"
    }, {
      "left" : "this.length = input.length();",
      "right" : "this.length = input.length();",
      "info" : "ExpressionStatement[522-551]:ExpressionStatement[522-551]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[563-566]:PrimitiveType[563-566]"
    }, {
      "left" : "pos",
      "right" : "pos",
      "info" : "SimpleName[567-570]:SimpleName[567-570]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[573-600]:Block[573-600]"
    }, {
      "left" : "return pos;",
      "right" : "return pos;",
      "info" : "ReturnStatement[583-594]:ReturnStatement[583-594]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[606-613]:PrimitiveType[606-613]"
    }, {
      "left" : "isEmpty",
      "right" : "isEmpty",
      "info" : "SimpleName[614-621]:SimpleName[614-621]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[624-661]:Block[624-661]"
    }, {
      "left" : "return pos >= length;",
      "right" : "return pos >= length;",
      "info" : "ReturnStatement[634-655]:ReturnStatement[634-655]"
    }, {
      "left" : "char",
      "right" : "char",
      "info" : "PrimitiveType[667-671]:PrimitiveType[667-671]"
    }, {
      "left" : "current",
      "right" : "current",
      "info" : "SimpleName[672-679]:SimpleName[672-679]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[682-741]:Block[682-741]"
    }, {
      "left" : "return isEmpty() ? EOF : input.charAt(pos);",
      "right" : "return isEmpty() ? EOF : input.charAt(pos);",
      "info" : "ReturnStatement[692-735]:ReturnStatement[692-735]"
    }, {
      "left" : "char",
      "right" : "char",
      "info" : "PrimitiveType[747-751]:PrimitiveType[747-751]"
    }, {
      "left" : "consume",
      "right" : "consume",
      "info" : "SimpleName[752-759]:SimpleName[752-759]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[762-860]:Block[762-860]"
    }, {
      "left" : "char val = isEmpty() ? EOF : input.charAt(pos);",
      "right" : "char val = isEmpty() ? EOF : input.charAt(pos);",
      "info" : "VariableDeclarationStatement[772-819]:VariableDeclarationStatement[772-819]"
    }, {
      "left" : "pos++;",
      "right" : "pos++;",
      "info" : "ExpressionStatement[828-834]:ExpressionStatement[828-834]"
    }, {
      "left" : "return val;",
      "right" : "return val;",
      "info" : "ReturnStatement[843-854]:ReturnStatement[843-854]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[866-870]:PrimitiveType[866-870]"
    }, {
      "left" : "unconsume",
      "right" : "unconsume",
      "info" : "SimpleName[871-880]:SimpleName[871-880]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[883-905]:Block[883-905]"
    }, {
      "left" : "pos--;",
      "right" : "pos--;",
      "info" : "ExpressionStatement[893-899]:ExpressionStatement[893-899]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[911-915]:PrimitiveType[911-915]"
    }, {
      "left" : "advance",
      "right" : "advance",
      "info" : "SimpleName[916-923]:SimpleName[916-923]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[926-948]:Block[926-948]"
    }, {
      "left" : "pos++;",
      "right" : "pos++;",
      "info" : "ExpressionStatement[936-942]:ExpressionStatement[936-942]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[954-958]:PrimitiveType[954-958]"
    }, {
      "left" : "mark",
      "right" : "mark",
      "info" : "SimpleName[959-963]:SimpleName[959-963]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[966-993]:Block[966-993]"
    }, {
      "left" : "mark = pos;",
      "right" : "mark = pos;",
      "info" : "ExpressionStatement[976-987]:ExpressionStatement[976-987]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[999-1003]:PrimitiveType[999-1003]"
    }, {
      "left" : "rewindToMark",
      "right" : "rewindToMark",
      "info" : "SimpleName[1004-1016]:SimpleName[1004-1016]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1019-1046]:Block[1019-1046]"
    }, {
      "left" : "pos = mark;",
      "right" : "pos = mark;",
      "info" : "ExpressionStatement[1029-1040]:ExpressionStatement[1029-1040]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[1052-1058]:SimpleType[1052-1058]"
    }, {
      "left" : "consumeAsString",
      "right" : "consumeAsString",
      "info" : "SimpleName[1059-1074]:SimpleName[1059-1074]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1077-1128]:Block[1077-1128]"
    }, {
      "left" : "return input.substring(pos, pos++);",
      "right" : "return input.substring(pos, pos++);",
      "info" : "ReturnStatement[1087-1122]:ReturnStatement[1087-1122]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[1134-1140]:SimpleType[1134-1140]"
    }, {
      "left" : "consumeTo",
      "right" : "consumeTo",
      "info" : "SimpleName[1141-1150]:SimpleName[1141-1150]"
    }, {
      "left" : "char c",
      "right" : "char c",
      "info" : "SingleVariableDeclaration[1151-1157]:SingleVariableDeclaration[1151-1157]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1159-1427]:Block[1159-1427]"
    }, {
      "left" : "int offset = input.indexOf(c, pos);",
      "right" : "int offset = input.indexOf(c, pos);",
      "info" : "VariableDeclarationStatement[1169-1204]:VariableDeclarationStatement[1169-1204]"
    }, {
      "left" : "if (offset != -1)",
      "right" : "if (offset != -1)",
      "info" : "IfStatement[1213-1421]:IfStatement[1213-1421]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1231-1369]:Block[1231-1369]"
    }, {
      "left" : "String consumed = input.substring(pos, offset);",
      "right" : "String consumed = input.substring(pos, offset);",
      "info" : "VariableDeclarationStatement[1245-1292]:VariableDeclarationStatement[1245-1292]"
    }, {
      "left" : "pos += consumed.length();",
      "right" : "pos += consumed.length();",
      "info" : "ExpressionStatement[1305-1330]:ExpressionStatement[1305-1330]"
    }, {
      "left" : "return consumed;",
      "right" : "return consumed;",
      "info" : "ReturnStatement[1343-1359]:ReturnStatement[1343-1359]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1375-1421]:Block[1375-1421]"
    }, {
      "left" : "return consumeToEnd();",
      "right" : "return consumeToEnd();",
      "info" : "ReturnStatement[1389-1411]:ReturnStatement[1389-1411]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[1433-1439]:SimpleType[1433-1439]"
    }, {
      "left" : "consumeTo",
      "right" : "consumeTo",
      "info" : "SimpleName[1440-1449]:SimpleName[1440-1449]"
    }, {
      "left" : "String seq",
      "right" : "String seq",
      "info" : "SingleVariableDeclaration[1450-1460]:SingleVariableDeclaration[1450-1460]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1462-1732]:Block[1462-1732]"
    }, {
      "left" : "int offset = input.indexOf(seq, pos);",
      "right" : "int offset = input.indexOf(seq, pos);",
      "info" : "VariableDeclarationStatement[1472-1509]:VariableDeclarationStatement[1472-1509]"
    }, {
      "left" : "if (offset != -1)",
      "right" : "if (offset != -1)",
      "info" : "IfStatement[1518-1726]:IfStatement[1518-1726]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1536-1674]:Block[1536-1674]"
    }, {
      "left" : "String consumed = input.substring(pos, offset);",
      "right" : "String consumed = input.substring(pos, offset);",
      "info" : "VariableDeclarationStatement[1550-1597]:VariableDeclarationStatement[1550-1597]"
    }, {
      "left" : "pos += consumed.length();",
      "right" : "pos += consumed.length();",
      "info" : "ExpressionStatement[1610-1635]:ExpressionStatement[1610-1635]"
    }, {
      "left" : "return consumed;",
      "right" : "return consumed;",
      "info" : "ReturnStatement[1648-1664]:ReturnStatement[1648-1664]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1680-1726]:Block[1680-1726]"
    }, {
      "left" : "return consumeToEnd();",
      "right" : "return consumeToEnd();",
      "info" : "ReturnStatement[1694-1716]:ReturnStatement[1694-1716]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[1738-1744]:SimpleType[1738-1744]"
    }, {
      "left" : "consumeToAny",
      "right" : "consumeToAny",
      "info" : "SimpleName[1745-1757]:SimpleName[1745-1757]"
    }, {
      "left" : "char... seq",
      "right" : "char... seq",
      "info" : "SingleVariableDeclaration[1758-1769]:SingleVariableDeclaration[1758-1769]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1771-2087]:Block[1771-2087]"
    }, {
      "left" : "int start = pos;",
      "right" : "int start = pos;",
      "info" : "VariableDeclarationStatement[1781-1797]:VariableDeclarationStatement[1781-1797]"
    }, {
      "left" : "OUTER: while (!isEmpty()) {\n            char c = input.charAt(pos);\n            for (char seek : seq) {\n                if (seek == c)\n                    break OUTER;\n            }\n            pos++;\n        }",
      "right" : "OUTER: while (!isEmpty()) {\n            char c = input.charAt(pos);\n            for (char seek : seq) {\n                if (seek == c)\n                    break OUTER;\n            }\n            pos++;\n        }",
      "info" : "LabeledStatement[1807-2017]:LabeledStatement[1807-2017]"
    }, {
      "left" : "while (!isEmpty())",
      "right" : "while (!isEmpty())",
      "info" : "WhileStatement[1814-2017]:WhileStatement[1814-2017]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1833-2017]:Block[1833-2017]"
    }, {
      "left" : "char c = input.charAt(pos);",
      "right" : "char c = input.charAt(pos);",
      "info" : "VariableDeclarationStatement[1847-1874]:VariableDeclarationStatement[1847-1874]"
    }, {
      "left" : "for (char seek : seq)",
      "right" : "for (char seek : seq)",
      "info" : "EnhancedForStatement[1887-1988]:EnhancedForStatement[1887-1988]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1909-1988]:Block[1909-1988]"
    }, {
      "left" : "if (seek == c)",
      "right" : "if (seek == c)",
      "info" : "IfStatement[1927-1974]:IfStatement[1927-1974]"
    }, {
      "left" : "break OUTER;",
      "right" : "break OUTER;",
      "info" : "BreakStatement[1962-1974]:BreakStatement[1962-1974]"
    }, {
      "left" : "pos++;",
      "right" : "pos++;",
      "info" : "ExpressionStatement[2001-2007]:ExpressionStatement[2001-2007]"
    }, {
      "left" : "return pos > start ? input.substring(start, pos) : \"\";",
      "right" : "return pos > start ? input.substring(start, pos) : \"\";",
      "info" : "ReturnStatement[2027-2081]:ReturnStatement[2027-2081]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[2093-2099]:SimpleType[2093-2099]"
    }, {
      "left" : "consumeToEnd",
      "right" : "consumeToEnd",
      "info" : "SimpleName[2100-2112]:SimpleName[2100-2112]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2115-2233]:Block[2115-2233]"
    }, {
      "left" : "String data = input.substring(pos, input.length());",
      "right" : "String data = input.substring(pos, input.length());",
      "info" : "VariableDeclarationStatement[2125-2176]:VariableDeclarationStatement[2125-2176]"
    }, {
      "left" : "pos = input.length();",
      "right" : "pos = input.length();",
      "info" : "ExpressionStatement[2185-2206]:ExpressionStatement[2185-2206]"
    }, {
      "left" : "return data;",
      "right" : "return data;",
      "info" : "ReturnStatement[2215-2227]:ReturnStatement[2215-2227]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[2239-2245]:SimpleType[2239-2245]"
    }, {
      "left" : "consumeLetterSequence",
      "right" : "consumeLetterSequence",
      "info" : "SimpleName[2246-2267]:SimpleName[2246-2267]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2270-2555]:Block[2270-2555]"
    }, {
      "left" : "int start = pos;",
      "right" : "int start = pos;",
      "info" : "VariableDeclarationStatement[2280-2296]:VariableDeclarationStatement[2280-2296]"
    }, {
      "left" : "while (!isEmpty())",
      "right" : "while (!isEmpty())",
      "info" : "WhileStatement[2305-2504]:WhileStatement[2305-2504]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2324-2504]:Block[2324-2504]"
    }, {
      "left" : "char c = input.charAt(pos);",
      "right" : "char c = input.charAt(pos);",
      "info" : "VariableDeclarationStatement[2338-2365]:VariableDeclarationStatement[2338-2365]"
    }, {
      "left" : "if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z'))",
      "right" : "if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z'))",
      "info" : "IfStatement[2378-2494]:IfStatement[2378-2494]"
    }, {
      "left" : "pos++;",
      "right" : "pos++;",
      "info" : "ExpressionStatement[2448-2454]:ExpressionStatement[2448-2454]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[2488-2494]:BreakStatement[2488-2494]"
    }, {
      "left" : "return input.substring(start, pos);",
      "right" : "return input.substring(start, pos);",
      "info" : "ReturnStatement[2514-2549]:ReturnStatement[2514-2549]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[2563-2569]:SimpleType[3072-3078]"
    }, {
      "left" : "consumeHexSequence",
      "right" : "consumeHexSequence",
      "info" : "SimpleName[2570-2588]:SimpleName[3079-3097]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2591-2901]:Block[3100-3410]"
    }, {
      "left" : "int start = pos;",
      "right" : "int start = pos;",
      "info" : "VariableDeclarationStatement[2601-2617]:VariableDeclarationStatement[3110-3126]"
    }, {
      "left" : "while (!isEmpty())",
      "right" : "while (!isEmpty())",
      "info" : "WhileStatement[2626-2851]:WhileStatement[3135-3360]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2645-2851]:Block[3154-3360]"
    }, {
      "left" : "char c = input.charAt(pos);",
      "right" : "char c = input.charAt(pos);",
      "info" : "VariableDeclarationStatement[2659-2686]:VariableDeclarationStatement[3168-3195]"
    }, {
      "left" : "if ((c >= '0' && c <= '9') || (c >= 'A' && c <= 'F') || (c >= 'a' && c <= 'f'))",
      "right" : "if ((c >= '0' && c <= '9') || (c >= 'A' && c <= 'F') || (c >= 'a' && c <= 'f'))",
      "info" : "IfStatement[2699-2841]:IfStatement[3208-3350]"
    }, {
      "left" : "pos++;",
      "right" : "pos++;",
      "info" : "ExpressionStatement[2795-2801]:ExpressionStatement[3304-3310]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[2835-2841]:BreakStatement[3344-3350]"
    }, {
      "left" : "return input.substring(start, pos);",
      "right" : "return input.substring(start, pos);",
      "info" : "ReturnStatement[2860-2895]:ReturnStatement[3369-3404]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[2907-2913]:SimpleType[3416-3422]"
    }, {
      "left" : "consumeDigitSequence",
      "right" : "consumeDigitSequence",
      "info" : "SimpleName[2914-2934]:SimpleName[3423-3443]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2937-3193]:Block[3446-3702]"
    }, {
      "left" : "int start = pos;",
      "right" : "int start = pos;",
      "info" : "VariableDeclarationStatement[2947-2963]:VariableDeclarationStatement[3456-3472]"
    }, {
      "left" : "while (!isEmpty())",
      "right" : "while (!isEmpty())",
      "info" : "WhileStatement[2972-3143]:WhileStatement[3481-3652]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2991-3143]:Block[3500-3652]"
    }, {
      "left" : "char c = input.charAt(pos);",
      "right" : "char c = input.charAt(pos);",
      "info" : "VariableDeclarationStatement[3005-3032]:VariableDeclarationStatement[3514-3541]"
    }, {
      "left" : "if (c >= '0' && c <= '9')",
      "right" : "if (c >= '0' && c <= '9')",
      "info" : "IfStatement[3045-3133]:IfStatement[3554-3642]"
    }, {
      "left" : "pos++;",
      "right" : "pos++;",
      "info" : "ExpressionStatement[3087-3093]:ExpressionStatement[3596-3602]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[3127-3133]:BreakStatement[3636-3642]"
    }, {
      "left" : "return input.substring(start, pos);",
      "right" : "return input.substring(start, pos);",
      "info" : "ReturnStatement[3152-3187]:ReturnStatement[3661-3696]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[3199-3206]:PrimitiveType[3708-3715]"
    }, {
      "left" : "matches",
      "right" : "matches",
      "info" : "SimpleName[3207-3214]:SimpleName[3716-3723]"
    }, {
      "left" : "char c",
      "right" : "char c",
      "info" : "SingleVariableDeclaration[3215-3221]:SingleVariableDeclaration[3724-3730]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3223-3284]:Block[3732-3793]"
    }, {
      "left" : "return !isEmpty() && input.charAt(pos) == c;",
      "right" : "return !isEmpty() && input.charAt(pos) == c;",
      "info" : "ReturnStatement[3233-3277]:ReturnStatement[3742-3786]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[3290-3297]:PrimitiveType[3799-3806]"
    }, {
      "left" : "matches",
      "right" : "matches",
      "info" : "SimpleName[3298-3305]:SimpleName[3807-3814]"
    }, {
      "left" : "String seq",
      "right" : "String seq",
      "info" : "SingleVariableDeclaration[3306-3316]:SingleVariableDeclaration[3815-3825]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3318-3368]:Block[3827-3877]"
    }, {
      "left" : "return input.startsWith(seq, pos);",
      "right" : "return input.startsWith(seq, pos);",
      "info" : "ReturnStatement[3328-3362]:ReturnStatement[3837-3871]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[3374-3381]:PrimitiveType[3883-3890]"
    }, {
      "left" : "matchesIgnoreCase",
      "right" : "matchesIgnoreCase",
      "info" : "SimpleName[3382-3399]:SimpleName[3891-3908]"
    }, {
      "left" : "String seq",
      "right" : "String seq",
      "info" : "SingleVariableDeclaration[3400-3410]:SingleVariableDeclaration[3909-3919]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3412-3488]:Block[3921-3997]"
    }, {
      "left" : "return input.regionMatches(true, pos, seq, 0, seq.length());",
      "right" : "return input.regionMatches(true, pos, seq, 0, seq.length());",
      "info" : "ReturnStatement[3422-3482]:ReturnStatement[3931-3991]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[3494-3501]:PrimitiveType[4003-4010]"
    }, {
      "left" : "matchesAny",
      "right" : "matchesAny",
      "info" : "SimpleName[3502-3512]:SimpleName[4011-4021]"
    }, {
      "left" : "char... seq",
      "right" : "char... seq",
      "info" : "SingleVariableDeclaration[3513-3524]:SingleVariableDeclaration[4022-4033]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3526-3739]:Block[4035-4248]"
    }, {
      "left" : "if (isEmpty())",
      "right" : "if (isEmpty())",
      "info" : "IfStatement[3536-3576]:IfStatement[4045-4085]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[3563-3576]:ReturnStatement[4072-4085]"
    }, {
      "left" : "char c = input.charAt(pos);",
      "right" : "char c = input.charAt(pos);",
      "info" : "VariableDeclarationStatement[3586-3613]:VariableDeclarationStatement[4095-4122]"
    }, {
      "left" : "for (char seek : seq)",
      "right" : "for (char seek : seq)",
      "info" : "EnhancedForStatement[3622-3711]:EnhancedForStatement[4131-4220]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3644-3711]:Block[4153-4220]"
    }, {
      "left" : "if (seek == c)",
      "right" : "if (seek == c)",
      "info" : "IfStatement[3658-3701]:IfStatement[4167-4210]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[3689-3701]:ReturnStatement[4198-4210]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[3720-3733]:ReturnStatement[4229-4242]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[3745-3752]:PrimitiveType[4254-4261]"
    }, {
      "left" : "matchesLetter",
      "right" : "matchesLetter",
      "info" : "SimpleName[3753-3766]:SimpleName[4262-4275]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3769-3926]:Block[4278-4435]"
    }, {
      "left" : "if (isEmpty())",
      "right" : "if (isEmpty())",
      "info" : "IfStatement[3779-3819]:IfStatement[4288-4328]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[3806-3819]:ReturnStatement[4315-4328]"
    }, {
      "left" : "char c = input.charAt(pos);",
      "right" : "char c = input.charAt(pos);",
      "info" : "VariableDeclarationStatement[3828-3855]:VariableDeclarationStatement[4337-4364]"
    }, {
      "left" : "return (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z');",
      "right" : "return (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z');",
      "info" : "ReturnStatement[3864-3920]:ReturnStatement[4373-4429]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[3932-3939]:PrimitiveType[4441-4448]"
    }, {
      "left" : "matchesDigit",
      "right" : "matchesDigit",
      "info" : "SimpleName[3940-3952]:SimpleName[4449-4461]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3955-4086]:Block[4464-4595]"
    }, {
      "left" : "if (isEmpty())",
      "right" : "if (isEmpty())",
      "info" : "IfStatement[3965-4005]:IfStatement[4474-4514]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[3992-4005]:ReturnStatement[4501-4514]"
    }, {
      "left" : "char c = input.charAt(pos);",
      "right" : "char c = input.charAt(pos);",
      "info" : "VariableDeclarationStatement[4014-4041]:VariableDeclarationStatement[4523-4550]"
    }, {
      "left" : "return (c >= '0' && c <= '9');",
      "right" : "return (c >= '0' && c <= '9');",
      "info" : "ReturnStatement[4050-4080]:ReturnStatement[4559-4589]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[4092-4099]:PrimitiveType[4601-4608]"
    }, {
      "left" : "matchConsume",
      "right" : "matchConsume",
      "info" : "SimpleName[4100-4112]:SimpleName[4609-4621]"
    }, {
      "left" : "String seq",
      "right" : "String seq",
      "info" : "SingleVariableDeclaration[4113-4123]:SingleVariableDeclaration[4622-4632]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4125-4271]:Block[4634-4780]"
    }, {
      "left" : "if (matches(seq))",
      "right" : "if (matches(seq))",
      "info" : "IfStatement[4135-4265]:IfStatement[4644-4774]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4153-4222]:Block[4662-4731]"
    }, {
      "left" : "pos += seq.length();",
      "right" : "pos += seq.length();",
      "info" : "ExpressionStatement[4167-4187]:ExpressionStatement[4676-4696]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[4200-4212]:ReturnStatement[4709-4721]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4228-4265]:Block[4737-4774]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[4242-4255]:ReturnStatement[4751-4764]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[4277-4284]:PrimitiveType[4786-4793]"
    }, {
      "left" : "matchConsumeIgnoreCase",
      "right" : "matchConsumeIgnoreCase",
      "info" : "SimpleName[4285-4307]:SimpleName[4794-4816]"
    }, {
      "left" : "String seq",
      "right" : "String seq",
      "info" : "SingleVariableDeclaration[4308-4318]:SingleVariableDeclaration[4817-4827]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4320-4476]:Block[4829-4985]"
    }, {
      "left" : "if (matchesIgnoreCase(seq))",
      "right" : "if (matchesIgnoreCase(seq))",
      "info" : "IfStatement[4330-4470]:IfStatement[4839-4979]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4358-4427]:Block[4867-4936]"
    }, {
      "left" : "pos += seq.length();",
      "right" : "pos += seq.length();",
      "info" : "ExpressionStatement[4372-4392]:ExpressionStatement[4881-4901]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[4405-4417]:ReturnStatement[4914-4926]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4433-4470]:Block[4942-4979]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[4447-4460]:ReturnStatement[4956-4969]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[4482-4489]:PrimitiveType[4991-4998]"
    }, {
      "left" : "containsIgnoreCase",
      "right" : "containsIgnoreCase",
      "info" : "SimpleName[4490-4508]:SimpleName[4999-5017]"
    }, {
      "left" : "String seq",
      "right" : "String seq",
      "info" : "SingleVariableDeclaration[4509-4519]:SingleVariableDeclaration[5018-5028]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4521-4786]:Block[5030-5295]"
    }, {
      "left" : "String loScan = seq.toLowerCase();",
      "right" : "String loScan = seq.toLowerCase();",
      "info" : "VariableDeclarationStatement[4616-4650]:VariableDeclarationStatement[5125-5159]"
    }, {
      "left" : "String hiScan = seq.toUpperCase();",
      "right" : "String hiScan = seq.toUpperCase();",
      "info" : "VariableDeclarationStatement[4659-4693]:VariableDeclarationStatement[5168-5202]"
    }, {
      "left" : "return (input.indexOf(loScan, pos) > -1) || (input.indexOf(hiScan, pos) > -1);",
      "right" : "return (input.indexOf(loScan, pos) > -1) || (input.indexOf(hiScan, pos) > -1);",
      "info" : "ReturnStatement[4702-4780]:ReturnStatement[5211-5289]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[4792-4801]:MarkerAnnotation[5301-5310]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4806-4812]:Modifier[5315-5321]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[4813-4819]:SimpleType[5322-5328]"
    }, {
      "left" : "toString",
      "right" : "toString",
      "info" : "SimpleName[4820-4828]:SimpleName[5329-5337]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4831-4875]:Block[5340-5384]"
    }, {
      "left" : "return input.substring(pos);",
      "right" : "return input.substring(pos);",
      "info" : "ReturnStatement[4841-4869]:ReturnStatement[5350-5378]"
    } ]
  },
  "interFileMappings" : { }
}