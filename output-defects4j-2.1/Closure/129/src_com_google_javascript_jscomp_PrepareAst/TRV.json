{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "private final AbstractCompiler compiler;",
      "right" : "private final AbstractCompiler compiler;",
      "info" : "FieldDeclaration[1246-1286]:FieldDeclaration[1246-1286]"
    }, {
      "left" : "private final boolean checkOnly;",
      "right" : "private final boolean checkOnly;",
      "info" : "FieldDeclaration[1289-1321]:FieldDeclaration[1289-1321]"
    }, {
      "left" : "PrepareAst(AbstractCompiler compiler)",
      "right" : "PrepareAst(AbstractCompiler compiler)",
      "info" : "MethodDeclaration[1325-1395]:MethodDeclaration[1325-1395]"
    }, {
      "left" : "PrepareAst(AbstractCompiler compiler, boolean checkOnly)",
      "right" : "PrepareAst(AbstractCompiler compiler, boolean checkOnly)",
      "info" : "MethodDeclaration[1399-1523]:MethodDeclaration[1399-1523]"
    }, {
      "left" : "private void reportChange()",
      "right" : "private void reportChange()",
      "info" : "MethodDeclaration[1527-1668]:MethodDeclaration[1527-1668]"
    }, {
      "left" : "public void process(Node externs, Node root)",
      "right" : "public void process(Node externs, Node root)",
      "info" : "MethodDeclaration[1672-2285]:MethodDeclaration[1672-2285]"
    }, {
      "left" : "private void normalizeNodeTypes(Node n)",
      "right" : "private void normalizeNodeTypes(Node n)",
      "info" : "MethodDeclaration[2289-2766]:MethodDeclaration[2289-2766]"
    }, {
      "left" : "private void normalizeBlocks(Node n)",
      "right" : "private void normalizeBlocks(Node n)",
      "info" : "MethodDeclaration[2770-3418]:MethodDeclaration[2770-3418]"
    }, {
      "left" : "PrepareAnnotations()",
      "right" : "PrepareAnnotations()",
      "info" : "MethodDeclaration[3644-3672]:MethodDeclaration[3644-3672]"
    }, {
      "left" : "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent)",
      "right" : "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[3678-3869]:MethodDeclaration[3678-3869]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[3875-4148]:MethodDeclaration[3875-4148]"
    }, {
      "left" : "private void normalizeObjectLiteralAnnotations(Node objlit)",
      "right" : "private void normalizeObjectLiteralAnnotations(Node objlit)",
      "info" : "MethodDeclaration[4154-4484]:MethodDeclaration[4154-4484]"
    }, {
      "left" : "private void annotateDispatchers(Node n, Node parent)",
      "right" : "private void annotateDispatchers(Node n, Node parent)",
      "info" : "MethodDeclaration[5306-5761]:MethodDeclaration[5384-5839]"
    }, {
      "left" : "private void normalizeObjectLiteralKeyAnnotations(\n        Node objlit, Node key, Node value)",
      "right" : "private void normalizeObjectLiteralKeyAnnotations(\n        Node objlit, Node key, Node value)",
      "info" : "MethodDeclaration[5767-6502]:MethodDeclaration[5845-6580]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1363-1395]:Block[1363-1395]"
    }, {
      "left" : "this(compiler, false);",
      "right" : "this(compiler, false);",
      "info" : "ConstructorInvocation[1369-1391]:ConstructorInvocation[1369-1391]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1456-1523]:Block[1456-1523]"
    }, {
      "left" : "this.compiler = compiler;",
      "right" : "this.compiler = compiler;",
      "info" : "ExpressionStatement[1462-1487]:ExpressionStatement[1462-1487]"
    }, {
      "left" : "this.checkOnly = checkOnly;",
      "right" : "this.checkOnly = checkOnly;",
      "info" : "ExpressionStatement[1492-1519]:ExpressionStatement[1492-1519]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1555-1668]:Block[1555-1668]"
    }, {
      "left" : "if (checkOnly)",
      "right" : "if (checkOnly)",
      "info" : "IfStatement[1561-1664]:IfStatement[1561-1664]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1576-1664]:Block[1576-1664]"
    }, {
      "left" : "Preconditions.checkState(false, \"normalizeNodeType constraints violated\");",
      "right" : "Preconditions.checkState(false, \"normalizeNodeType constraints violated\");",
      "info" : "ExpressionStatement[1584-1658]:ExpressionStatement[1584-1658]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1729-2285]:Block[1729-2285]"
    }, {
      "left" : "if (checkOnly)",
      "right" : "if (checkOnly)",
      "info" : "IfStatement[1735-2281]:IfStatement[1735-2281]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1750-1789]:Block[1750-1789]"
    }, {
      "left" : "normalizeNodeTypes(root);",
      "right" : "normalizeNodeTypes(root);",
      "info" : "ExpressionStatement[1758-1783]:ExpressionStatement[1758-1783]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1795-2281]:Block[1795-2281]"
    }, {
      "left" : "if (externs != null)",
      "right" : "if (externs != null)",
      "info" : "IfStatement[2034-2154]:IfStatement[2034-2154]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2055-2154]:Block[2055-2154]"
    }, {
      "left" : "NodeTraversal.traverse(\n            compiler, externs, new PrepareAnnotations());",
      "right" : "NodeTraversal.traverse(\n            compiler, externs, new PrepareAnnotations());",
      "info" : "ExpressionStatement[2065-2146]:ExpressionStatement[2065-2146]"
    }, {
      "left" : "if (root != null)",
      "right" : "if (root != null)",
      "info" : "IfStatement[2161-2275]:IfStatement[2161-2275]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2179-2275]:Block[2179-2275]"
    }, {
      "left" : "NodeTraversal.traverse(\n            compiler, root, new PrepareAnnotations());",
      "right" : "NodeTraversal.traverse(\n            compiler, root, new PrepareAnnotations());",
      "info" : "ExpressionStatement[2189-2267]:ExpressionStatement[2189-2267]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2412-2766]:Block[2412-2766]"
    }, {
      "left" : "normalizeBlocks(n);",
      "right" : "normalizeBlocks(n);",
      "info" : "ExpressionStatement[2418-2437]:ExpressionStatement[2418-2437]"
    }, {
      "left" : "for (Node child = n.getFirstChild();\n         child != null; child = child.getNext())",
      "right" : "for (Node child = n.getFirstChild();\n         child != null; child = child.getNext())",
      "info" : "ForStatement[2443-2762]:ForStatement[2443-2762]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2529-2762]:Block[2529-2762]"
    }, {
      "left" : "Preconditions.checkState(child.getParent() == n);",
      "right" : "Preconditions.checkState(child.getParent() == n);",
      "info" : "ExpressionStatement[2673-2722]:ExpressionStatement[2673-2722]"
    }, {
      "left" : "normalizeNodeTypes(child);",
      "right" : "normalizeNodeTypes(child);",
      "info" : "ExpressionStatement[2730-2756]:ExpressionStatement[2730-2756]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2858-3418]:Block[2858-3418]"
    }, {
      "left" : "if (NodeUtil.isControlStructure(n)\n        && !n.isLabel()\n        && !n.isSwitch())",
      "right" : "if (NodeUtil.isControlStructure(n)\n        && !n.isLabel()\n        && !n.isSwitch())",
      "info" : "IfStatement[2864-3414]:IfStatement[2864-3414]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2949-3414]:Block[2949-3414]"
    }, {
      "left" : "for (Node c = n.getFirstChild(); c != null; c = c.getNext())",
      "right" : "for (Node c = n.getFirstChild(); c != null; c = c.getNext())",
      "info" : "ForStatement[2957-3408]:ForStatement[2957-3408]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3018-3408]:Block[3018-3408]"
    }, {
      "left" : "if (NodeUtil.isControlStructureCodeBlock(n,c) &&\n            !c.isBlock())",
      "right" : "if (NodeUtil.isControlStructureCodeBlock(n,c) &&\n            !c.isBlock())",
      "info" : "IfStatement[3028-3400]:IfStatement[3028-3400]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3103-3400]:Block[3103-3400]"
    }, {
      "left" : "Node newBlock = IR.block().srcref(n);",
      "right" : "Node newBlock = IR.block().srcref(n);",
      "info" : "VariableDeclarationStatement[3115-3152]:VariableDeclarationStatement[3115-3152]"
    }, {
      "left" : "n.replaceChild(c, newBlock);",
      "right" : "n.replaceChild(c, newBlock);",
      "info" : "ExpressionStatement[3163-3191]:ExpressionStatement[3163-3191]"
    }, {
      "left" : "if (!c.isEmpty())",
      "right" : "if (!c.isEmpty())",
      "info" : "IfStatement[3202-3340]:IfStatement[3202-3340]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3220-3277]:Block[3220-3277]"
    }, {
      "left" : "newBlock.addChildrenToFront(c);",
      "right" : "newBlock.addChildrenToFront(c);",
      "info" : "ExpressionStatement[3234-3265]:ExpressionStatement[3234-3265]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3283-3340]:Block[3283-3340]"
    }, {
      "left" : "newBlock.setWasEmptyNode(true);",
      "right" : "newBlock.setWasEmptyNode(true);",
      "info" : "ExpressionStatement[3297-3328]:ExpressionStatement[3297-3328]"
    }, {
      "left" : "c = newBlock;",
      "right" : "c = newBlock;",
      "info" : "ExpressionStatement[3351-3364]:ExpressionStatement[3351-3364]"
    }, {
      "left" : "reportChange();",
      "right" : "reportChange();",
      "info" : "ExpressionStatement[3375-3390]:ExpressionStatement[3375-3390]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3665-3672]:Block[3665-3672]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3760-3869]:Block[3760-3869]"
    }, {
      "left" : "if (n.isObjectLit())",
      "right" : "if (n.isObjectLit())",
      "info" : "IfStatement[3768-3844]:IfStatement[3768-3844]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3789-3844]:Block[3789-3844]"
    }, {
      "left" : "normalizeObjectLiteralAnnotations(n);",
      "right" : "normalizeObjectLiteralAnnotations(n);",
      "info" : "ExpressionStatement[3799-3836]:ExpressionStatement[3799-3836]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[3851-3863]:ReturnStatement[3851-3863]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3945-4148]:Block[3945-4148]"
    }, {
      "left" : "switch (n.getType()) {\n        case Token.CALL:\n          annotateCalls(n);\n          break;\n\n        case Token.FUNCTION:\n          annotateDispatchers(n, parent);\n          break;\n      }",
      "right" : "switch (n.getType()) {\n        case Token.CALL:\n          annotateCalls(n);\n          break;\n\n        case Token.FUNCTION:\n          annotateDispatchers(n, parent);\n          break;\n      }",
      "info" : "SwitchStatement[3953-4142]:SwitchStatement[3953-4142]"
    }, {
      "left" : "case Token.CALL:",
      "right" : "case Token.CALL:",
      "info" : "SwitchCase[3984-4000]:SwitchCase[3984-4000]"
    }, {
      "left" : "annotateCalls(n);",
      "right" : "annotateCalls(n);",
      "info" : "ExpressionStatement[4011-4028]:ExpressionStatement[4011-4028]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[4039-4045]:BreakStatement[4039-4045]"
    }, {
      "left" : "case Token.FUNCTION:",
      "right" : "case Token.FUNCTION:",
      "info" : "SwitchCase[4055-4075]:SwitchCase[4055-4075]"
    }, {
      "left" : "annotateDispatchers(n, parent);",
      "right" : "annotateDispatchers(n, parent);",
      "info" : "ExpressionStatement[4086-4117]:ExpressionStatement[4086-4117]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[4128-4134]:BreakStatement[4128-4134]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4214-4484]:Block[4214-4484]"
    }, {
      "left" : "Preconditions.checkState(objlit.isObjectLit());",
      "right" : "Preconditions.checkState(objlit.isObjectLit());",
      "info" : "ExpressionStatement[4222-4269]:ExpressionStatement[4222-4269]"
    }, {
      "left" : "for (Node key = objlit.getFirstChild();\n           key != null; key = key.getNext())",
      "right" : "for (Node key = objlit.getFirstChild();\n           key != null; key = key.getNext())",
      "info" : "ForStatement[4276-4478]:ForStatement[4276-4478]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4361-4478]:Block[4361-4478]"
    }, {
      "left" : "Node value = key.getFirstChild();",
      "right" : "Node value = key.getFirstChild();",
      "info" : "VariableDeclarationStatement[4371-4404]:VariableDeclarationStatement[4371-4404]"
    }, {
      "left" : "normalizeObjectLiteralKeyAnnotations(objlit, key, value);",
      "right" : "normalizeObjectLiteralKeyAnnotations(objlit, key, value);",
      "info" : "ExpressionStatement[4413-4470]:ExpressionStatement[4413-4470]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5442-5761]:Block[5520-5839]"
    }, {
      "left" : "Preconditions.checkState(n.isFunction());",
      "right" : "Preconditions.checkState(n.isFunction());",
      "info" : "ExpressionStatement[5450-5491]:ExpressionStatement[5528-5569]"
    }, {
      "left" : "if (parent.getJSDocInfo() != null\n          && parent.getJSDocInfo().isJavaDispatch())",
      "right" : "if (parent.getJSDocInfo() != null\n          && parent.getJSDocInfo().isJavaDispatch())",
      "info" : "IfStatement[5498-5755]:IfStatement[5576-5833]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5585-5755]:Block[5663-5833]"
    }, {
      "left" : "if (parent.isAssign())",
      "right" : "if (parent.isAssign())",
      "info" : "IfStatement[5595-5747]:IfStatement[5673-5825]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5618-5747]:Block[5696-5825]"
    }, {
      "left" : "Preconditions.checkState(parent.getLastChild() == n);",
      "right" : "Preconditions.checkState(parent.getLastChild() == n);",
      "info" : "ExpressionStatement[5630-5683]:ExpressionStatement[5708-5761]"
    }, {
      "left" : "n.putBooleanProp(Node.IS_DISPATCHER, true);",
      "right" : "n.putBooleanProp(Node.IS_DISPATCHER, true);",
      "info" : "ExpressionStatement[5694-5737]:ExpressionStatement[5772-5815]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6313-6502]:Block[6391-6580]"
    }, {
      "left" : "Preconditions.checkState(objlit.isObjectLit());",
      "right" : "Preconditions.checkState(objlit.isObjectLit());",
      "info" : "ExpressionStatement[6321-6368]:ExpressionStatement[6399-6446]"
    }, {
      "left" : "if (key.getJSDocInfo() != null &&\n          value.isFunction())",
      "right" : "if (key.getJSDocInfo() != null &&\n          value.isFunction())",
      "info" : "IfStatement[6375-6496]:IfStatement[6453-6574]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6439-6496]:Block[6517-6574]"
    }, {
      "left" : "value.setJSDocInfo(key.getJSDocInfo());",
      "right" : "value.setJSDocInfo(key.getJSDocInfo());",
      "info" : "ExpressionStatement[6449-6488]:ExpressionStatement[6527-6566]"
    } ]
  },
  "interFileMappings" : { }
}