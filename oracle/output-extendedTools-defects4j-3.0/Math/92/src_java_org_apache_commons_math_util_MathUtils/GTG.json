{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "MathUtils",
      "right" : "MathUtils",
      "info" : "TypeDeclaration[898-39059]:TypeDeclaration[898-40364]"
    }, {
      "left" : "public static final double EPSILON = 0x1.0p-53;",
      "right" : "public static final double EPSILON = 0x1.0p-53;",
      "info" : "FieldDeclaration[1040-1176]:FieldDeclaration[1040-1176]"
    }, {
      "left" : "public static final double SAFE_MIN = 0x1.0p-1022;",
      "right" : "public static final double SAFE_MIN = 0x1.0p-1022;",
      "info" : "FieldDeclaration[1182-1412]:FieldDeclaration[1182-1412]"
    }, {
      "left" : "private static final byte  NB = (byte)-1;",
      "right" : "private static final byte  NB = (byte)-1;",
      "info" : "FieldDeclaration[1418-1491]:FieldDeclaration[1418-1491]"
    }, {
      "left" : "private static final short NS = (short)-1;",
      "right" : "private static final short NS = (short)-1;",
      "info" : "FieldDeclaration[1497-1572]:FieldDeclaration[1497-1572]"
    }, {
      "left" : "private static final byte  PB = (byte)1;",
      "right" : "private static final byte  PB = (byte)1;",
      "info" : "FieldDeclaration[1578-1649]:FieldDeclaration[1578-1649]"
    }, {
      "left" : "private static final short PS = (short)1;",
      "right" : "private static final short PS = (short)1;",
      "info" : "FieldDeclaration[1655-1728]:FieldDeclaration[1655-1728]"
    }, {
      "left" : "private static final byte  ZB = (byte)0;",
      "right" : "private static final byte  ZB = (byte)0;",
      "info" : "FieldDeclaration[1734-1805]:FieldDeclaration[1734-1805]"
    }, {
      "left" : "private static final short ZS = (short)0;",
      "right" : "private static final short ZS = (short)0;",
      "info" : "FieldDeclaration[1811-1884]:FieldDeclaration[1811-1884]"
    }, {
      "left" : "private static final double TWO_PI = 2 * Math.PI;",
      "right" : "private static final double TWO_PI = 2 * Math.PI;",
      "info" : "FieldDeclaration[1890-1958]:FieldDeclaration[1890-1958]"
    }, {
      "left" : "private MathUtils()",
      "right" : "private MathUtils()",
      "info" : "MethodDeclaration[1964-2051]:MethodDeclaration[1964-2051]"
    }, {
      "left" : "public static int addAndCheck(int x, int y)",
      "right" : "public static int addAndCheck(int x, int y)",
      "info" : "MethodDeclaration[2057-2578]:MethodDeclaration[2057-2578]"
    }, {
      "left" : "public static long addAndCheck(long a, long b)",
      "right" : "public static long addAndCheck(long a, long b)",
      "info" : "MethodDeclaration[2584-2974]:MethodDeclaration[2584-2974]"
    }, {
      "left" : "private static long addAndCheck(long a, long b, String msg)",
      "right" : "private static long addAndCheck(long a, long b, String msg)",
      "info" : "MethodDeclaration[2984-4391]:MethodDeclaration[2984-4391]"
    }, {
      "left" : "public static double binomialCoefficientLog(final int n, final int k)",
      "right" : "public static double binomialCoefficientLog(final int n, final int k)",
      "info" : "MethodDeclaration[8466-10390]:MethodDeclaration[9584-11695]"
    }, {
      "left" : "public static double cosh(double x)",
      "right" : "public static double cosh(double x)",
      "info" : "MethodDeclaration[10400-10741]:MethodDeclaration[11705-12046]"
    }, {
      "left" : "public static boolean equals(double x, double y)",
      "right" : "public static boolean equals(double x, double y)",
      "info" : "MethodDeclaration[10751-11104]:MethodDeclaration[12056-12409]"
    }, {
      "left" : "public static boolean equals(double[] x, double[] y)",
      "right" : "public static boolean equals(double[] x, double[] y)",
      "info" : "MethodDeclaration[11110-11842]:MethodDeclaration[12415-13147]"
    }, {
      "left" : "private static final long[] factorials = new long[] \n       {1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880, 3628800, 39916800,\n        479001600, 6227020800l, 87178291200l, 1307674368000l, 20922789888000l,\n        355687428096000l, 6402373705728000l, 121645100408832000l,\n        2432902008176640000l};",
      "right" : "private static final long[] factorials = new long[] \n       {1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880, 3628800, 39916800,\n        479001600, 6227020800l, 87178291200l, 1307674368000l, 20922789888000l,\n        355687428096000l, 6402373705728000l, 121645100408832000l,\n        2432902008176640000l};",
      "info" : "FieldDeclaration[11852-12199]:FieldDeclaration[13157-13504]"
    }, {
      "left" : "public static long factorial(final int n)",
      "right" : "public static long factorial(final int n)",
      "info" : "MethodDeclaration[12205-13447]:MethodDeclaration[13510-14752]"
    }, {
      "left" : "public static double factorialDouble(final int n)",
      "right" : "public static double factorialDouble(final int n)",
      "info" : "MethodDeclaration[13453-14548]:MethodDeclaration[14758-15853]"
    }, {
      "left" : "public static double factorialLog(final int n)",
      "right" : "public static double factorialLog(final int n)",
      "info" : "MethodDeclaration[14554-15307]:MethodDeclaration[15859-16612]"
    }, {
      "left" : "public static int gcd(int u, int v)",
      "right" : "public static int gcd(int u, int v)",
      "info" : "MethodDeclaration[15313-17571]:MethodDeclaration[16618-18876]"
    }, {
      "left" : "public static int hash(double value)",
      "right" : "public static int hash(double value)",
      "info" : "MethodDeclaration[17577-17835]:MethodDeclaration[18882-19140]"
    }, {
      "left" : "public static int hash(double[] value)",
      "right" : "public static int hash(double[] value)",
      "info" : "MethodDeclaration[17841-18127]:MethodDeclaration[19146-19432]"
    }, {
      "left" : "public static byte indicator(final byte x)",
      "right" : "public static byte indicator(final byte x)",
      "info" : "MethodDeclaration[18133-18445]:MethodDeclaration[19438-19750]"
    }, {
      "left" : "public static double indicator(final double x)",
      "right" : "public static double indicator(final double x)",
      "info" : "MethodDeclaration[18451-18904]:MethodDeclaration[19756-20209]"
    }, {
      "left" : "public static float indicator(final float x)",
      "right" : "public static float indicator(final float x)",
      "info" : "MethodDeclaration[18910-19347]:MethodDeclaration[20215-20652]"
    }, {
      "left" : "public static int indicator(final int x)",
      "right" : "public static int indicator(final int x)",
      "info" : "MethodDeclaration[19353-19622]:MethodDeclaration[20658-20927]"
    }, {
      "left" : "public static long indicator(final long x)",
      "right" : "public static long indicator(final long x)",
      "info" : "MethodDeclaration[19628-19906]:MethodDeclaration[20933-21211]"
    }, {
      "left" : "public static short indicator(final short x)",
      "right" : "public static short indicator(final short x)",
      "info" : "MethodDeclaration[19912-20232]:MethodDeclaration[21217-21537]"
    }, {
      "left" : "public static int lcm(int a, int b)",
      "right" : "public static int lcm(int a, int b)",
      "info" : "MethodDeclaration[20238-20667]:MethodDeclaration[21543-21972]"
    }, {
      "left" : "public static double log(double base, double x)",
      "right" : "public static double log(double base, double x)",
      "info" : "MethodDeclaration[20673-21513]:MethodDeclaration[21978-22818]"
    }, {
      "left" : "public static int mulAndCheck(int x, int y)",
      "right" : "public static int mulAndCheck(int x, int y)",
      "info" : "MethodDeclaration[21519-22051]:MethodDeclaration[22824-23356]"
    }, {
      "left" : "public static long mulAndCheck(long a, long b)",
      "right" : "public static long mulAndCheck(long a, long b)",
      "info" : "MethodDeclaration[22057-23871]:MethodDeclaration[23362-25176]"
    }, {
      "left" : "public static double nextAfter(double d, double direction)",
      "right" : "public static double nextAfter(double d, double direction)",
      "info" : "MethodDeclaration[23877-26262]:MethodDeclaration[25182-27567]"
    }, {
      "left" : "public static double scalb(final double d, final int scaleFactor)",
      "right" : "public static double scalb(final double d, final int scaleFactor)",
      "info" : "MethodDeclaration[26268-27196]:MethodDeclaration[27573-28501]"
    }, {
      "left" : "public static double normalizeAngle(double a, double center)",
      "right" : "public static double normalizeAngle(double a, double center)",
      "info" : "MethodDeclaration[27202-28378]:MethodDeclaration[28507-29683]"
    }, {
      "left" : "public static double round(double x, int scale)",
      "right" : "public static double round(double x, int scale)",
      "info" : "MethodDeclaration[28384-28836]:MethodDeclaration[29689-30141]"
    }, {
      "left" : "public static double round(double x, int scale, int roundingMethod)",
      "right" : "public static double round(double x, int scale, int roundingMethod)",
      "info" : "MethodDeclaration[28842-29761]:MethodDeclaration[30147-31066]"
    }, {
      "left" : "public static float round(float x, int scale)",
      "right" : "public static float round(float x, int scale)",
      "info" : "MethodDeclaration[29767-30218]:MethodDeclaration[31072-31523]"
    }, {
      "left" : "public static float round(float x, int scale, int roundingMethod)",
      "right" : "public static float round(float x, int scale, int roundingMethod)",
      "info" : "MethodDeclaration[30224-30939]:MethodDeclaration[31529-32244]"
    }, {
      "left" : "private static double roundUnscaled(double unscaled, double sign,\n        int roundingMethod)",
      "right" : "private static double roundUnscaled(double unscaled, double sign,\n        int roundingMethod)",
      "info" : "MethodDeclaration[30945-34202]:MethodDeclaration[32250-35507]"
    }, {
      "left" : "public static byte sign(final byte x)",
      "right" : "public static byte sign(final byte x)",
      "info" : "MethodDeclaration[34208-34694]:MethodDeclaration[35513-35999]"
    }, {
      "left" : "public static double sign(final double x)",
      "right" : "public static double sign(final double x)",
      "info" : "MethodDeclaration[34700-35413]:MethodDeclaration[36005-36718]"
    }, {
      "left" : "public static float sign(final float x)",
      "right" : "public static float sign(final float x)",
      "info" : "MethodDeclaration[35419-36035]:MethodDeclaration[36724-37340]"
    }, {
      "left" : "public static int sign(final int x)",
      "right" : "public static int sign(final int x)",
      "info" : "MethodDeclaration[36041-36472]:MethodDeclaration[37346-37777]"
    }, {
      "left" : "public static long sign(final long x)",
      "right" : "public static long sign(final long x)",
      "info" : "MethodDeclaration[36478-36923]:MethodDeclaration[37783-38228]"
    }, {
      "left" : "public static short sign(final short x)",
      "right" : "public static short sign(final short x)",
      "info" : "MethodDeclaration[36929-37441]:MethodDeclaration[38234-38746]"
    }, {
      "left" : "public static double sinh(double x)",
      "right" : "public static double sinh(double x)",
      "info" : "MethodDeclaration[37447-37780]:MethodDeclaration[38752-39085]"
    }, {
      "left" : "public static int subAndCheck(int x, int y)",
      "right" : "public static int subAndCheck(int x, int y)",
      "info" : "MethodDeclaration[37786-38331]:MethodDeclaration[39091-39636]"
    }, {
      "left" : "public static long subAndCheck(long a, long b)",
      "right" : "public static long subAndCheck(long a, long b)",
      "info" : "MethodDeclaration[38337-39056]:MethodDeclaration[39642-40361]"
    } ],
    "mappings" : [
 {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[2007-2014]:Modifier[2007-2014]"
    }, {
      "left" : "MathUtils",
      "right" : "MathUtils",
      "info" : "SimpleName[2015-2024]:SimpleName[2015-2024]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2027-2051]:Block[2027-2051]"
    }, {
      "left" : "super();",
      "right" : "super();",
      "info" : "SuperConstructorInvocation[2037-2045]:SuperConstructorInvocation[2037-2045]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2336-2342]:Modifier[2336-2342]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[2343-2349]:Modifier[2343-2349]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[2350-2353]:PrimitiveType[2350-2353]"
    }, {
      "left" : "addAndCheck",
      "right" : "addAndCheck",
      "info" : "SimpleName[2354-2365]:SimpleName[2354-2365]"
    }, {
      "left" : "int x",
      "right" : "int x",
      "info" : "SingleVariableDeclaration[2366-2371]:SingleVariableDeclaration[2366-2371]"
    }, {
      "left" : "int y",
      "right" : "int y",
      "info" : "SingleVariableDeclaration[2373-2378]:SingleVariableDeclaration[2373-2378]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2380-2578]:Block[2380-2578]"
    }, {
      "left" : "long s = (long)x + (long)y;",
      "right" : "long s = (long)x + (long)y;",
      "info" : "VariableDeclarationStatement[2390-2417]:VariableDeclarationStatement[2390-2417]"
    }, {
      "left" : "if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE)",
      "right" : "if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE)",
      "info" : "IfStatement[2426-2549]:IfStatement[2426-2549]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2478-2549]:Block[2478-2549]"
    }, {
      "left" : "throw new ArithmeticException(\"overflow: add\");",
      "right" : "throw new ArithmeticException(\"overflow: add\");",
      "info" : "ThrowStatement[2492-2539]:ThrowStatement[2492-2539]"
    }, {
      "left" : "return (int)s;",
      "right" : "return (int)s;",
      "info" : "ReturnStatement[2558-2572]:ReturnStatement[2558-2572]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2869-2875]:Modifier[2869-2875]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[2876-2882]:Modifier[2876-2882]"
    }, {
      "left" : "long",
      "right" : "long",
      "info" : "PrimitiveType[2883-2887]:PrimitiveType[2883-2887]"
    }, {
      "left" : "addAndCheck",
      "right" : "addAndCheck",
      "info" : "SimpleName[2888-2899]:SimpleName[2888-2899]"
    }, {
      "left" : "long a",
      "right" : "long a",
      "info" : "SingleVariableDeclaration[2900-2906]:SingleVariableDeclaration[2900-2906]"
    }, {
      "left" : "long b",
      "right" : "long b",
      "info" : "SingleVariableDeclaration[2908-2914]:SingleVariableDeclaration[2908-2914]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2916-2974]:Block[2916-2974]"
    }, {
      "left" : "return addAndCheck(a, b, \"overflow: add\");",
      "right" : "return addAndCheck(a, b, \"overflow: add\");",
      "info" : "ReturnStatement[2926-2968]:ReturnStatement[2926-2968]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[3332-3339]:Modifier[3332-3339]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[3340-3346]:Modifier[3340-3346]"
    }, {
      "left" : "long",
      "right" : "long",
      "info" : "PrimitiveType[3347-3351]:PrimitiveType[3347-3351]"
    }, {
      "left" : "addAndCheck",
      "right" : "addAndCheck",
      "info" : "SimpleName[3352-3363]:SimpleName[3352-3363]"
    }, {
      "left" : "long a",
      "right" : "long a",
      "info" : "SingleVariableDeclaration[3364-3370]:SingleVariableDeclaration[3364-3370]"
    }, {
      "left" : "long b",
      "right" : "long b",
      "info" : "SingleVariableDeclaration[3372-3378]:SingleVariableDeclaration[3372-3378]"
    }, {
      "left" : "String msg",
      "right" : "String msg",
      "info" : "SingleVariableDeclaration[3380-3390]:SingleVariableDeclaration[3380-3390]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3392-4391]:Block[3392-4391]"
    }, {
      "left" : "long ret;",
      "right" : "long ret;",
      "info" : "VariableDeclarationStatement[3402-3411]:VariableDeclarationStatement[3402-3411]"
    }, {
      "left" : "if (a > b)",
      "right" : "if (a > b)",
      "info" : "IfStatement[3420-4365]:IfStatement[3420-4365]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3431-3537]:Block[3431-3537]"
    }, {
      "left" : "ret = addAndCheck(b, a, msg);",
      "right" : "ret = addAndCheck(b, a, msg);",
      "info" : "ExpressionStatement[3498-3527]:ExpressionStatement[3498-3527]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3543-4365]:Block[3543-4365]"
    }, {
      "left" : "if (a < 0)",
      "right" : "if (a < 0)",
      "info" : "IfStatement[3599-4355]:IfStatement[3599-4355]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3610-4041]:Block[3610-4041]"
    }, {
      "left" : "if (b < 0)",
      "right" : "if (b < 0)",
      "info" : "IfStatement[3628-4027]:IfStatement[3628-4027]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3639-3908]:Block[3639-3908]"
    }, {
      "left" : "if (Long.MIN_VALUE - b <= a)",
      "right" : "if (Long.MIN_VALUE - b <= a)",
      "info" : "IfStatement[3712-3890]:IfStatement[3712-3890]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3741-3801]:Block[3741-3801]"
    }, {
      "left" : "ret = a + b;",
      "right" : "ret = a + b;",
      "info" : "ExpressionStatement[3767-3779]:ExpressionStatement[3767-3779]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3807-3890]:Block[3807-3890]"
    }, {
      "left" : "throw new ArithmeticException(msg);",
      "right" : "throw new ArithmeticException(msg);",
      "info" : "ThrowStatement[3833-3868]:ThrowStatement[3833-3868]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3914-4027]:Block[3914-4027]"
    }, {
      "left" : "ret = a + b;",
      "right" : "ret = a + b;",
      "info" : "ExpressionStatement[3997-4009]:ExpressionStatement[3997-4009]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4047-4355]:Block[4047-4355]"
    }, {
      "left" : "if (a <= Long.MAX_VALUE - b)",
      "right" : "if (a <= Long.MAX_VALUE - b)",
      "info" : "IfStatement[4179-4341]:IfStatement[4179-4341]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4208-4260]:Block[4208-4260]"
    }, {
      "left" : "ret = a + b;",
      "right" : "ret = a + b;",
      "info" : "ExpressionStatement[4230-4242]:ExpressionStatement[4230-4242]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4266-4341]:Block[4266-4341]"
    }, {
      "left" : "throw new ArithmeticException(msg);",
      "right" : "throw new ArithmeticException(msg);",
      "info" : "ThrowStatement[4288-4323]:ThrowStatement[4288-4323]"
    }, {
      "left" : "return ret;",
      "right" : "return ret;",
      "info" : "ReturnStatement[4374-4385]:ReturnStatement[4374-4385]"
    }, {
      "left" : "final int n",
      "right" : "final int n",
      "info" : "SingleVariableDeclaration[5575-5586]:SingleVariableDeclaration[5575-5586]"
    }, {
      "left" : "final int k",
      "right" : "final int k",
      "info" : "SingleVariableDeclaration[5588-5599]:SingleVariableDeclaration[5588-5599]"
    }, {
      "left" : "if (n < k)",
      "right" : "if (n < k)",
      "info" : "IfStatement[5611-5749]:IfStatement[5611-5749]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5622-5749]:Block[5622-5749]"
    }, {
      "left" : "throw new IllegalArgumentException(\n                \"must have n >= k for binomial coefficient (n,k)\");",
      "right" : "throw new IllegalArgumentException(\n                \"must have n >= k for binomial coefficient (n,k)\");",
      "info" : "ThrowStatement[5636-5739]:ThrowStatement[5636-5739]"
    }, {
      "left" : "if (n < 0)",
      "right" : "if (n < 0)",
      "info" : "IfStatement[5758-5896]:IfStatement[5758-5896]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5769-5896]:Block[5769-5896]"
    }, {
      "left" : "throw new IllegalArgumentException(\n                \"must have n >= 0 for binomial coefficient (n,k)\");",
      "right" : "throw new IllegalArgumentException(\n                \"must have n >= 0 for binomial coefficient (n,k)\");",
      "info" : "ThrowStatement[5783-5886]:ThrowStatement[5783-5886]"
    }, {
      "left" : "if ((n == k) || (k == 0))",
      "right" : "if ((n == k) || (k == 0))",
      "info" : "IfStatement[5905-5964]:IfStatement[5905-5964]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5931-5964]:Block[5931-5964]"
    }, {
      "left" : "return 1;",
      "right" : "return 1;",
      "info" : "ReturnStatement[5945-5954]:ReturnStatement[5945-5954]"
    }, {
      "left" : "if ((k == 1) || (k == n - 1))",
      "right" : "if ((k == 1) || (k == n - 1))",
      "info" : "IfStatement[5973-6036]:IfStatement[5973-6036]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6003-6036]:Block[6003-6036]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[6017-6026]:ReturnStatement[6017-6026]"
    }, {
      "left" : "Math.round(binomialCoefficientDouble(n, k))",
      "right" : "Math.log(binomialCoefficientDouble(n, k))",
      "info" : "MethodInvocation[6059-6102]:MethodInvocation[11257-11298]"
    }, {
      "left" : "round",
      "right" : "log",
      "info" : "SimpleName[6064-6069]:SimpleName[11262-11265]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[7266-7280]:ReturnStatement[7682-7696]"
    }, {
      "left" : "final int n",
      "right" : "final int n",
      "info" : "SingleVariableDeclaration[8338-8349]:SingleVariableDeclaration[8754-8765]"
    }, {
      "left" : "final int k",
      "right" : "final int k",
      "info" : "SingleVariableDeclaration[8351-8362]:SingleVariableDeclaration[8767-8778]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8364-8456]:Block[10986-11054]"
    }, {
      "left" : "return Math.floor(Math.exp(binomialCoefficientLog(n, k)) + 0.5);",
      "right" : "return Math.log(binomialCoefficient(n,k));",
      "info" : "ReturnStatement[8386-8450]:ReturnStatement[11002-11044]"
    }, {
      "left" : "Math",
      "right" : "Math",
      "info" : "METHOD_INVOCATION_RECEIVER[8393-8397]:METHOD_INVOCATION_RECEIVER[9543-9547]"
    }, {
      "left" : "Math.exp(binomialCoefficientLog(n, k))",
      "right" : "Math.log(binomialCoefficient(n,k))",
      "info" : "MethodInvocation[8404-8442]:MethodInvocation[11009-11043]"
    }, {
      "left" : "exp",
      "right" : "log",
      "info" : "SimpleName[8409-8412]:SimpleName[11014-11017]"
    }, {
      "left" : "binomialCoefficientLog",
      "right" : "binomialCoefficient",
      "info" : "SimpleName[8413-8435]:SimpleName[11018-11037]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9177-9183]:Modifier[10295-10301]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[9184-9190]:Modifier[10302-10308]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[9191-9197]:PrimitiveType[10309-10315]"
    }, {
      "left" : "binomialCoefficientLog",
      "right" : "binomialCoefficientLog",
      "info" : "SimpleName[9198-9220]:SimpleName[10316-10338]"
    }, {
      "left" : "final int n",
      "right" : "final int n",
      "info" : "SingleVariableDeclaration[9221-9232]:SingleVariableDeclaration[10339-10350]"
    }, {
      "left" : "final int k",
      "right" : "final int k",
      "info" : "SingleVariableDeclaration[9234-9245]:SingleVariableDeclaration[10352-10363]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9247-10390]:Block[10365-11695]"
    }, {
      "left" : "if (n < k)",
      "right" : "if (n < k)",
      "info" : "IfStatement[9257-9395]:IfStatement[10375-10513]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9268-9395]:Block[10386-10513]"
    }, {
      "left" : "throw new IllegalArgumentException(\n                \"must have n >= k for binomial coefficient (n,k)\");",
      "right" : "throw new IllegalArgumentException(\n                \"must have n >= k for binomial coefficient (n,k)\");",
      "info" : "ThrowStatement[9282-9385]:ThrowStatement[10400-10503]"
    }, {
      "left" : "if (n < 0)",
      "right" : "if (n < 0)",
      "info" : "IfStatement[9404-9542]:IfStatement[10522-10660]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9415-9542]:Block[10533-10660]"
    }, {
      "left" : "throw new IllegalArgumentException(\n                \"must have n >= 0 for binomial coefficient (n,k)\");",
      "right" : "throw new IllegalArgumentException(\n                \"must have n >= 0 for binomial coefficient (n,k)\");",
      "info" : "ThrowStatement[9429-9532]:ThrowStatement[10547-10650]"
    }, {
      "left" : "if ((n == k) || (k == 0))",
      "right" : "if ((n == k) || (k == 0))",
      "info" : "IfStatement[9551-9610]:IfStatement[10669-10728]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9577-9610]:Block[10695-10728]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[9591-9600]:ReturnStatement[10709-10718]"
    }, {
      "left" : "if ((k == 1) || (k == n - 1))",
      "right" : "if ((k == 1) || (k == n - 1))",
      "info" : "IfStatement[9619-9701]:IfStatement[10737-10819]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9649-9701]:Block[10767-10819]"
    }, {
      "left" : "return Math.log((double) n);",
      "right" : "return Math.log((double) n);",
      "info" : "ReturnStatement[9663-9691]:ReturnStatement[10781-10809]"
    }, {
      "left" : "double logSum = 0;",
      "right" : "double logSum = 0;",
      "info" : "VariableDeclarationStatement[10097-10115]:VariableDeclarationStatement[11402-11420]"
    }, {
      "left" : "for (int i = k + 1; i <= n; i++)",
      "right" : "for (int i = k + 1; i <= n; i++)",
      "info" : "ForStatement[10142-10229]:ForStatement[11447-11534]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10175-10229]:Block[11480-11534]"
    }, {
      "left" : "logSum += Math.log((double)i);",
      "right" : "logSum += Math.log((double)i);",
      "info" : "ExpressionStatement[10189-10219]:ExpressionStatement[11494-11524]"
    }, {
      "left" : "for (int i = 2; i <= n - k; i++)",
      "right" : "for (int i = 2; i <= n - k; i++)",
      "info" : "ForStatement[10267-10354]:ForStatement[11572-11659]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10300-10354]:Block[11605-11659]"
    }, {
      "left" : "logSum -= Math.log((double)i);",
      "right" : "logSum -= Math.log((double)i);",
      "info" : "ExpressionStatement[10314-10344]:ExpressionStatement[11619-11649]"
    }, {
      "left" : "return logSum;",
      "right" : "return logSum;",
      "info" : "ReturnStatement[10364-10378]:ReturnStatement[11669-11683]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10647-10653]:Modifier[11952-11958]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[10654-10660]:Modifier[11959-11965]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[10661-10667]:PrimitiveType[11966-11972]"
    }, {
      "left" : "cosh",
      "right" : "cosh",
      "info" : "SimpleName[10668-10672]:SimpleName[11973-11977]"
    }, {
      "left" : "double x",
      "right" : "double x",
      "info" : "SingleVariableDeclaration[10673-10681]:SingleVariableDeclaration[11978-11986]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10683-10741]:Block[11988-12046]"
    }, {
      "left" : "return (Math.exp(x) + Math.exp(-x)) / 2.0;",
      "right" : "return (Math.exp(x) + Math.exp(-x)) / 2.0;",
      "info" : "ReturnStatement[10693-10735]:ReturnStatement[11998-12040]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10983-10989]:Modifier[12288-12294]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[10990-10996]:Modifier[12295-12301]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[10997-11004]:PrimitiveType[12302-12309]"
    }, {
      "left" : "equals",
      "right" : "equals",
      "info" : "SimpleName[11005-11011]:SimpleName[12310-12316]"
    }, {
      "left" : "double x",
      "right" : "double x",
      "info" : "SingleVariableDeclaration[11012-11020]:SingleVariableDeclaration[12317-12325]"
    }, {
      "left" : "double y",
      "right" : "double y",
      "info" : "SingleVariableDeclaration[11022-11030]:SingleVariableDeclaration[12327-12335]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11032-11104]:Block[12337-12409]"
    }, {
      "left" : "return ((Double.isNaN(x) && Double.isNaN(y)) || x == y);",
      "right" : "return ((Double.isNaN(x) && Double.isNaN(y)) || x == y);",
      "info" : "ReturnStatement[11042-11098]:ReturnStatement[12347-12403]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11450-11456]:Modifier[12755-12761]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[11457-11463]:Modifier[12762-12768]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[11464-11471]:PrimitiveType[12769-12776]"
    }, {
      "left" : "equals",
      "right" : "equals",
      "info" : "SimpleName[11472-11478]:SimpleName[12777-12783]"
    }, {
      "left" : "double[] x",
      "right" : "double[] x",
      "info" : "SingleVariableDeclaration[11479-11489]:SingleVariableDeclaration[12784-12794]"
    }, {
      "left" : "double[] y",
      "right" : "double[] y",
      "info" : "SingleVariableDeclaration[11491-11501]:SingleVariableDeclaration[12796-12806]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11503-11842]:Block[12808-13147]"
    }, {
      "left" : "if ((x == null) || (y == null))",
      "right" : "if ((x == null) || (y == null))",
      "info" : "IfStatement[11513-11605]:IfStatement[12818-12910]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11545-11605]:Block[12850-12910]"
    }, {
      "left" : "return !((x == null) ^ (y == null));",
      "right" : "return !((x == null) ^ (y == null));",
      "info" : "ReturnStatement[11559-11595]:ReturnStatement[12864-12900]"
    }, {
      "left" : "if (x.length != y.length)",
      "right" : "if (x.length != y.length)",
      "info" : "IfStatement[11614-11677]:IfStatement[12919-12982]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11640-11677]:Block[12945-12982]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[11654-11667]:ReturnStatement[12959-12972]"
    }, {
      "left" : "for (int i = 0; i < x.length; ++i)",
      "right" : "for (int i = 0; i < x.length; ++i)",
      "info" : "ForStatement[11686-11815]:ForStatement[12991-13120]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11721-11815]:Block[13026-13120]"
    }, {
      "left" : "if (!equals(x[i], y[i]))",
      "right" : "if (!equals(x[i], y[i]))",
      "info" : "IfStatement[11735-11805]:IfStatement[13040-13110]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11760-11805]:Block[13065-13110]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[11778-11791]:ReturnStatement[13083-13096]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[11824-11836]:ReturnStatement[13129-13141]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[13117-13123]:Modifier[14422-14428]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[13124-13130]:Modifier[14429-14435]"
    }, {
      "left" : "long",
      "right" : "long",
      "info" : "PrimitiveType[13131-13135]:PrimitiveType[14436-14440]"
    }, {
      "left" : "factorial",
      "right" : "factorial",
      "info" : "SimpleName[13136-13145]:SimpleName[14441-14450]"
    }, {
      "left" : "final int n",
      "right" : "final int n",
      "info" : "SingleVariableDeclaration[13146-13157]:SingleVariableDeclaration[14451-14462]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13159-13447]:Block[14464-14752]"
    }, {
      "left" : "if (n < 0)",
      "right" : "if (n < 0)",
      "info" : "IfStatement[13169-13266]:IfStatement[14474-14571]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13180-13266]:Block[14485-14571]"
    }, {
      "left" : "throw new IllegalArgumentException(\"must have n >= 0 for n!\");",
      "right" : "throw new IllegalArgumentException(\"must have n >= 0 for n!\");",
      "info" : "ThrowStatement[13194-13256]:ThrowStatement[14499-14561]"
    }, {
      "left" : "if (n > 20)",
      "right" : "if (n > 20)",
      "info" : "IfStatement[13275-13411]:IfStatement[14580-14716]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13287-13411]:Block[14592-14716]"
    }, {
      "left" : "throw new ArithmeticException(\n                    \"factorial value is too large to fit in a long\");",
      "right" : "throw new ArithmeticException(\n                    \"factorial value is too large to fit in a long\");",
      "info" : "ThrowStatement[13301-13401]:ThrowStatement[14606-14706]"
    }, {
      "left" : "return factorials[n];",
      "right" : "return factorials[n];",
      "info" : "ReturnStatement[13420-13441]:ReturnStatement[14725-14746]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[14260-14266]:Modifier[15565-15571]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[14267-14273]:Modifier[15572-15578]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[14274-14280]:PrimitiveType[15579-15585]"
    }, {
      "left" : "factorialDouble",
      "right" : "factorialDouble",
      "info" : "SimpleName[14281-14296]:SimpleName[15586-15601]"
    }, {
      "left" : "final int n",
      "right" : "final int n",
      "info" : "SingleVariableDeclaration[14297-14308]:SingleVariableDeclaration[15602-15613]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14310-14548]:Block[15615-15853]"
    }, {
      "left" : "if (n < 0)",
      "right" : "if (n < 0)",
      "info" : "IfStatement[14320-14417]:IfStatement[15625-15722]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14331-14417]:Block[15636-15722]"
    }, {
      "left" : "throw new IllegalArgumentException(\"must have n >= 0 for n!\");",
      "right" : "throw new IllegalArgumentException(\"must have n >= 0 for n!\");",
      "info" : "ThrowStatement[14345-14407]:ThrowStatement[15650-15712]"
    }, {
      "left" : "if (n < 21)",
      "right" : "if (n < 21)",
      "info" : "IfStatement[14426-14482]:IfStatement[15731-15787]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14438-14482]:Block[15743-15787]"
    }, {
      "left" : "return factorial(n);",
      "right" : "return factorial(n);",
      "info" : "ReturnStatement[14452-14472]:ReturnStatement[15757-15777]"
    }, {
      "left" : "return Math.floor(Math.exp(factorialLog(n)) + 0.5);",
      "right" : "return Math.floor(Math.exp(factorialLog(n)) + 0.5);",
      "info" : "ReturnStatement[14491-14542]:ReturnStatement[15796-15847]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[14931-14937]:Modifier[16236-16242]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[14938-14944]:Modifier[16243-16249]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[14945-14951]:PrimitiveType[16250-16256]"
    }, {
      "left" : "factorialLog",
      "right" : "factorialLog",
      "info" : "SimpleName[14952-14964]:SimpleName[16257-16269]"
    }, {
      "left" : "final int n",
      "right" : "final int n",
      "info" : "SingleVariableDeclaration[14965-14976]:SingleVariableDeclaration[16270-16281]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14978-15307]:Block[16283-16612]"
    }, {
      "left" : "if (n < 0)",
      "right" : "if (n < 0)",
      "info" : "IfStatement[14988-15084]:IfStatement[16293-16389]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14999-15084]:Block[16304-16389]"
    }, {
      "left" : "throw new IllegalArgumentException(\"must have n > 0 for n!\");",
      "right" : "throw new IllegalArgumentException(\"must have n > 0 for n!\");",
      "info" : "ThrowStatement[15013-15074]:ThrowStatement[16318-16379]"
    }, {
      "left" : "if (n < 21)",
      "right" : "if (n < 21)",
      "info" : "IfStatement[15093-15159]:IfStatement[16398-16464]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15105-15159]:Block[16410-16464]"
    }, {
      "left" : "return Math.log(factorial(n));",
      "right" : "return Math.log(factorial(n));",
      "info" : "ReturnStatement[15119-15149]:ReturnStatement[16424-16454]"
    }, {
      "left" : "double logSum = 0;",
      "right" : "double logSum = 0;",
      "info" : "VariableDeclarationStatement[15168-15186]:VariableDeclarationStatement[16473-16491]"
    }, {
      "left" : "for (int i = 2; i <= n; i++)",
      "right" : "for (int i = 2; i <= n; i++)",
      "info" : "ForStatement[15195-15278]:ForStatement[16500-16583]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15224-15278]:Block[16529-16583]"
    }, {
      "left" : "logSum += Math.log((double)i);",
      "right" : "logSum += Math.log((double)i);",
      "info" : "ExpressionStatement[15238-15268]:ExpressionStatement[16543-16573]"
    }, {
      "left" : "return logSum;",
      "right" : "return logSum;",
      "info" : "ReturnStatement[15287-15301]:ReturnStatement[16592-16606]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[15749-15755]:Modifier[17054-17060]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[15756-15762]:Modifier[17061-17067]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[15763-15766]:PrimitiveType[17068-17071]"
    }, {
      "left" : "gcd",
      "right" : "gcd",
      "info" : "SimpleName[15767-15770]:SimpleName[17072-17075]"
    }, {
      "left" : "int u",
      "right" : "int u",
      "info" : "SingleVariableDeclaration[15771-15776]:SingleVariableDeclaration[17076-17081]"
    }, {
      "left" : "int v",
      "right" : "int v",
      "info" : "SingleVariableDeclaration[15778-15783]:SingleVariableDeclaration[17083-17088]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15785-17571]:Block[17090-18876]"
    }, {
      "left" : "if ((u == 0) || (v == 0))",
      "right" : "if ((u == 0) || (v == 0))",
      "info" : "IfStatement[15795-15880]:IfStatement[17100-17185]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15821-15880]:Block[17126-17185]"
    }, {
      "left" : "return (Math.abs(u) + Math.abs(v));",
      "right" : "return (Math.abs(u) + Math.abs(v));",
      "info" : "ReturnStatement[15835-15870]:ReturnStatement[17140-17175]"
    }, {
      "left" : "if (u > 0)",
      "right" : "if (u > 0)",
      "info" : "IfStatement[16157-16199]:IfStatement[17462-17504]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16168-16199]:Block[17473-17504]"
    }, {
      "left" : "u = -u;",
      "right" : "u = -u;",
      "info" : "ExpressionStatement[16182-16189]:ExpressionStatement[17487-17494]"
    }, {
      "left" : "if (v > 0)",
      "right" : "if (v > 0)",
      "info" : "IfStatement[16227-16269]:IfStatement[17532-17574]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16238-16269]:Block[17543-17574]"
    }, {
      "left" : "v = -v;",
      "right" : "v = -v;",
      "info" : "ExpressionStatement[16252-16259]:ExpressionStatement[17557-17564]"
    }, {
      "left" : "int k = 0;",
      "right" : "int k = 0;",
      "info" : "VariableDeclarationStatement[16330-16340]:VariableDeclarationStatement[17635-17645]"
    }, {
      "left" : "while ((u & 1) == 0 && (v & 1) == 0 && k < 31)",
      "right" : "while ((u & 1) == 0 && (v & 1) == 0 && k < 31)",
      "info" : "WhileStatement[16349-16579]:WhileStatement[17654-17884]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16396-16579]:Block[17701-17884]"
    }, {
      "left" : "u /= 2;",
      "right" : "u /= 2;",
      "info" : "ExpressionStatement[16507-16514]:ExpressionStatement[17812-17819]"
    }, {
      "left" : "v /= 2;",
      "right" : "v /= 2;",
      "info" : "ExpressionStatement[16527-16534]:ExpressionStatement[17832-17839]"
    }, {
      "left" : "k++;",
      "right" : "k++;",
      "info" : "ExpressionStatement[16547-16551]:ExpressionStatement[17852-17856]"
    }, {
      "left" : "if (k == 31)",
      "right" : "if (k == 31)",
      "info" : "IfStatement[16588-16680]:IfStatement[17893-17985]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16601-16680]:Block[17906-17985]"
    }, {
      "left" : "throw new ArithmeticException(\"overflow: gcd is 2^31\");",
      "right" : "throw new ArithmeticException(\"overflow: gcd is 2^31\");",
      "info" : "ThrowStatement[16615-16670]:ThrowStatement[17920-17975]"
    }, {
      "left" : "int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;",
      "right" : "int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;",
      "info" : "VariableDeclarationStatement[16785-16831]:VariableDeclarationStatement[18090-18136]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[16962-17519]:DoStatement[18267-18824]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16965-17503]:Block[18270-18808]"
    }, {
      "left" : "while ((t & 1) == 0)",
      "right" : "while ((t & 1) == 0)",
      "info" : "WhileStatement[17060-17158]:WhileStatement[18365-18463]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17081-17158]:Block[18386-18463]"
    }, {
      "left" : "t /= 2;",
      "right" : "t /= 2;",
      "info" : "ExpressionStatement[17120-17127]:ExpressionStatement[18425-18432]"
    }, {
      "left" : "if (t > 0)",
      "right" : "if (t > 0)",
      "info" : "IfStatement[17206-17300]:IfStatement[18511-18605]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17217-17256]:Block[18522-18561]"
    }, {
      "left" : "u = -t;",
      "right" : "u = -t;",
      "info" : "ExpressionStatement[17235-17242]:ExpressionStatement[18540-18547]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17262-17300]:Block[18567-18605]"
    }, {
      "left" : "v = t;",
      "right" : "v = t;",
      "info" : "ExpressionStatement[17280-17286]:ExpressionStatement[18585-18591]"
    }, {
      "left" : "t = (v - u) / 2;",
      "right" : "t = (v - u) / 2;",
      "info" : "ExpressionStatement[17377-17393]:ExpressionStatement[18682-18698]"
    }, {
      "left" : "return -u * (1 << k);",
      "right" : "return -u * (1 << k);",
      "info" : "ReturnStatement[17528-17549]:ReturnStatement[18833-18854]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[17746-17752]:Modifier[19051-19057]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[17753-17759]:Modifier[19058-19064]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[17760-17763]:PrimitiveType[19065-19068]"
    }, {
      "left" : "hash",
      "right" : "hash",
      "info" : "SimpleName[17764-17768]:SimpleName[19069-19073]"
    }, {
      "left" : "double value",
      "right" : "double value",
      "info" : "SingleVariableDeclaration[17769-17781]:SingleVariableDeclaration[19074-19086]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17783-17835]:Block[19088-19140]"
    }, {
      "left" : "return new Double(value).hashCode();",
      "right" : "return new Double(value).hashCode();",
      "info" : "ReturnStatement[17793-17829]:ReturnStatement[19098-19134]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[18042-18048]:Modifier[19347-19353]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[18049-18055]:Modifier[19354-19360]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[18056-18059]:PrimitiveType[19361-19364]"
    }, {
      "left" : "hash",
      "right" : "hash",
      "info" : "SimpleName[18060-18064]:SimpleName[19365-19369]"
    }, {
      "left" : "double[] value",
      "right" : "double[] value",
      "info" : "SingleVariableDeclaration[18065-18079]:SingleVariableDeclaration[19370-19384]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18081-18127]:Block[19386-19432]"
    }, {
      "left" : "return Arrays.hashCode(value);",
      "right" : "return Arrays.hashCode(value);",
      "info" : "ReturnStatement[18091-18121]:ReturnStatement[19396-19426]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[18359-18365]:Modifier[19664-19670]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[18366-18372]:Modifier[19671-19677]"
    }, {
      "left" : "byte",
      "right" : "byte",
      "info" : "PrimitiveType[18373-18377]:PrimitiveType[19678-19682]"
    }, {
      "left" : "indicator",
      "right" : "indicator",
      "info" : "SimpleName[18378-18387]:SimpleName[19683-19692]"
    }, {
      "left" : "final byte x",
      "right" : "final byte x",
      "info" : "SingleVariableDeclaration[18388-18400]:SingleVariableDeclaration[19693-19705]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18402-18445]:Block[19707-19750]"
    }, {
      "left" : "return (x >= ZB) ? PB : NB;",
      "right" : "return (x >= ZB) ? PB : NB;",
      "info" : "ReturnStatement[18412-18439]:ReturnStatement[19717-19744]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[18738-18744]:Modifier[20043-20049]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[18745-18751]:Modifier[20050-20056]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[18752-18758]:PrimitiveType[20057-20063]"
    }, {
      "left" : "indicator",
      "right" : "indicator",
      "info" : "SimpleName[18759-18768]:SimpleName[20064-20073]"
    }, {
      "left" : "final double x",
      "right" : "final double x",
      "info" : "SingleVariableDeclaration[18769-18783]:SingleVariableDeclaration[20074-20088]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18785-18904]:Block[20090-20209]"
    }, {
      "left" : "if (Double.isNaN(x))",
      "right" : "if (Double.isNaN(x))",
      "info" : "IfStatement[18795-18858]:IfStatement[20100-20163]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18816-18858]:Block[20121-20163]"
    }, {
      "left" : "return Double.NaN;",
      "right" : "return Double.NaN;",
      "info" : "ReturnStatement[18830-18848]:ReturnStatement[20135-20153]"
    }, {
      "left" : "return (x >= 0.0) ? 1.0 : -1.0;",
      "right" : "return (x >= 0.0) ? 1.0 : -1.0;",
      "info" : "ReturnStatement[18867-18898]:ReturnStatement[20172-20203]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[19182-19188]:Modifier[20487-20493]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[19189-19195]:Modifier[20494-20500]"
    }, {
      "left" : "float",
      "right" : "float",
      "info" : "PrimitiveType[19196-19201]:PrimitiveType[20501-20506]"
    }, {
      "left" : "indicator",
      "right" : "indicator",
      "info" : "SimpleName[19202-19211]:SimpleName[20507-20516]"
    }, {
      "left" : "final float x",
      "right" : "final float x",
      "info" : "SingleVariableDeclaration[19212-19225]:SingleVariableDeclaration[20517-20530]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19227-19347]:Block[20532-20652]"
    }, {
      "left" : "if (Float.isNaN(x))",
      "right" : "if (Float.isNaN(x))",
      "info" : "IfStatement[19237-19298]:IfStatement[20542-20603]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19257-19298]:Block[20562-20603]"
    }, {
      "left" : "return Float.NaN;",
      "right" : "return Float.NaN;",
      "info" : "ReturnStatement[19271-19288]:ReturnStatement[20576-20593]"
    }, {
      "left" : "return (x >= 0.0F) ? 1.0F : -1.0F;",
      "right" : "return (x >= 0.0F) ? 1.0F : -1.0F;",
      "info" : "ReturnStatement[19307-19341]:ReturnStatement[20612-20646]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[19540-19546]:Modifier[20845-20851]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[19547-19553]:Modifier[20852-20858]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[19554-19557]:PrimitiveType[20859-20862]"
    }, {
      "left" : "indicator",
      "right" : "indicator",
      "info" : "SimpleName[19558-19567]:SimpleName[20863-20872]"
    }, {
      "left" : "final int x",
      "right" : "final int x",
      "info" : "SingleVariableDeclaration[19568-19579]:SingleVariableDeclaration[20873-20884]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19581-19622]:Block[20886-20927]"
    }, {
      "left" : "return (x >= 0) ? 1 : -1;",
      "right" : "return (x >= 0) ? 1 : -1;",
      "info" : "ReturnStatement[19591-19616]:ReturnStatement[20896-20921]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[19819-19825]:Modifier[21124-21130]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[19826-19832]:Modifier[21131-21137]"
    }, {
      "left" : "long",
      "right" : "long",
      "info" : "PrimitiveType[19833-19837]:PrimitiveType[21138-21142]"
    }, {
      "left" : "indicator",
      "right" : "indicator",
      "info" : "SimpleName[19838-19847]:SimpleName[21143-21152]"
    }, {
      "left" : "final long x",
      "right" : "final long x",
      "info" : "SingleVariableDeclaration[19848-19860]:SingleVariableDeclaration[21153-21165]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19862-19906]:Block[21167-21211]"
    }, {
      "left" : "return (x >= 0L) ? 1L : -1L;",
      "right" : "return (x >= 0L) ? 1L : -1L;",
      "info" : "ReturnStatement[19872-19900]:ReturnStatement[21177-21205]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[20144-20150]:Modifier[21449-21455]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[20151-20157]:Modifier[21456-21462]"
    }, {
      "left" : "short",
      "right" : "short",
      "info" : "PrimitiveType[20158-20163]:PrimitiveType[21463-21468]"
    }, {
      "left" : "indicator",
      "right" : "indicator",
      "info" : "SimpleName[20164-20173]:SimpleName[21469-21478]"
    }, {
      "left" : "final short x",
      "right" : "final short x",
      "info" : "SingleVariableDeclaration[20174-20187]:SingleVariableDeclaration[21479-21492]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20189-20232]:Block[21494-21537]"
    }, {
      "left" : "return (x >= ZS) ? PS : NS;",
      "right" : "return (x >= ZS) ? PS : NS;",
      "info" : "ReturnStatement[20199-20226]:ReturnStatement[21504-21531]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[20568-20574]:Modifier[21873-21879]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[20575-20581]:Modifier[21880-21886]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[20582-20585]:PrimitiveType[21887-21890]"
    }, {
      "left" : "lcm",
      "right" : "lcm",
      "info" : "SimpleName[20586-20589]:SimpleName[21891-21894]"
    }, {
      "left" : "int a",
      "right" : "int a",
      "info" : "SingleVariableDeclaration[20590-20595]:SingleVariableDeclaration[21895-21900]"
    }, {
      "left" : "int b",
      "right" : "int b",
      "info" : "SingleVariableDeclaration[20597-20602]:SingleVariableDeclaration[21902-21907]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20604-20667]:Block[21909-21972]"
    }, {
      "left" : "return Math.abs(mulAndCheck(a / gcd(a, b), b));",
      "right" : "return Math.abs(mulAndCheck(a / gcd(a, b), b));",
      "info" : "ReturnStatement[20614-20661]:ReturnStatement[21919-21966]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[21415-21421]:Modifier[22720-22726]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[21422-21428]:Modifier[22727-22733]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[21429-21435]:PrimitiveType[22734-22740]"
    }, {
      "left" : "log",
      "right" : "log",
      "info" : "SimpleName[21436-21439]:SimpleName[22741-22744]"
    }, {
      "left" : "double base",
      "right" : "double base",
      "info" : "SingleVariableDeclaration[21440-21451]:SingleVariableDeclaration[22745-22756]"
    }, {
      "left" : "double x",
      "right" : "double x",
      "info" : "SingleVariableDeclaration[21453-21461]:SingleVariableDeclaration[22758-22766]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21463-21513]:Block[22768-22818]"
    }, {
      "left" : "return Math.log(x)/Math.log(base);",
      "right" : "return Math.log(x)/Math.log(base);",
      "info" : "ReturnStatement[21473-21507]:ReturnStatement[22778-22812]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[21805-21811]:Modifier[23110-23116]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[21812-21818]:Modifier[23117-23123]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[21819-21822]:PrimitiveType[23124-23127]"
    }, {
      "left" : "mulAndCheck",
      "right" : "mulAndCheck",
      "info" : "SimpleName[21823-21834]:SimpleName[23128-23139]"
    }, {
      "left" : "int x",
      "right" : "int x",
      "info" : "SingleVariableDeclaration[21835-21840]:SingleVariableDeclaration[23140-23145]"
    }, {
      "left" : "int y",
      "right" : "int y",
      "info" : "SingleVariableDeclaration[21842-21847]:SingleVariableDeclaration[23147-23152]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21849-22051]:Block[23154-23356]"
    }, {
      "left" : "long m = ((long)x) * ((long)y);",
      "right" : "long m = ((long)x) * ((long)y);",
      "info" : "VariableDeclarationStatement[21859-21890]:VariableDeclarationStatement[23164-23195]"
    }, {
      "left" : "if (m < Integer.MIN_VALUE || m > Integer.MAX_VALUE)",
      "right" : "if (m < Integer.MIN_VALUE || m > Integer.MAX_VALUE)",
      "info" : "IfStatement[21899-22022]:IfStatement[23204-23327]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21951-22022]:Block[23256-23327]"
    }, {
      "left" : "throw new ArithmeticException(\"overflow: mul\");",
      "right" : "throw new ArithmeticException(\"overflow: mul\");",
      "info" : "ThrowStatement[21965-22012]:ThrowStatement[23270-23317]"
    }, {
      "left" : "return (int)m;",
      "right" : "return (int)m;",
      "info" : "ReturnStatement[22031-22045]:ReturnStatement[23336-23350]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[22358-22364]:Modifier[23663-23669]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[22365-22371]:Modifier[23670-23676]"
    }, {
      "left" : "long",
      "right" : "long",
      "info" : "PrimitiveType[22372-22376]:PrimitiveType[23677-23681]"
    }, {
      "left" : "mulAndCheck",
      "right" : "mulAndCheck",
      "info" : "SimpleName[22377-22388]:SimpleName[23682-23693]"
    }, {
      "left" : "long a",
      "right" : "long a",
      "info" : "SingleVariableDeclaration[22389-22395]:SingleVariableDeclaration[23694-23700]"
    }, {
      "left" : "long b",
      "right" : "long b",
      "info" : "SingleVariableDeclaration[22397-22403]:SingleVariableDeclaration[23702-23708]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22405-23871]:Block[23710-25176]"
    }, {
      "left" : "long ret;",
      "right" : "long ret;",
      "info" : "VariableDeclarationStatement[22415-22424]:VariableDeclarationStatement[23720-23729]"
    }, {
      "left" : "String msg = \"overflow: multiply\";",
      "right" : "String msg = \"overflow: multiply\";",
      "info" : "VariableDeclarationStatement[22433-22467]:VariableDeclarationStatement[23738-23772]"
    }, {
      "left" : "if (a > b)",
      "right" : "if (a > b)",
      "info" : "IfStatement[22476-23845]:IfStatement[23781-25150]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22487-22588]:Block[23792-23893]"
    }, {
      "left" : "ret = mulAndCheck(b, a);",
      "right" : "ret = mulAndCheck(b, a);",
      "info" : "ExpressionStatement[22554-22578]:ExpressionStatement[23859-23883]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22594-23845]:Block[23899-25150]"
    }, {
      "left" : "if (a < 0)",
      "right" : "if (a < 0)",
      "info" : "IfStatement[22608-23835]:IfStatement[23913-25140]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22619-23389]:Block[23924-24694]"
    }, {
      "left" : "if (b < 0)",
      "right" : "if (b < 0)",
      "info" : "IfStatement[22637-23375]:IfStatement[23942-24680]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22648-22945]:Block[23953-24250]"
    }, {
      "left" : "if (a >= Long.MAX_VALUE / b)",
      "right" : "if (a >= Long.MAX_VALUE / b)",
      "info" : "IfStatement[22749-22927]:IfStatement[24054-24232]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22778-22838]:Block[24083-24143]"
    }, {
      "left" : "ret = a * b;",
      "right" : "ret = a * b;",
      "info" : "ExpressionStatement[22804-22816]:ExpressionStatement[24109-24121]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22844-22927]:Block[24149-24232]"
    }, {
      "left" : "throw new ArithmeticException(msg);",
      "right" : "throw new ArithmeticException(msg);",
      "info" : "ThrowStatement[22870-22905]:ThrowStatement[24175-24210]"
    }, {
      "left" : "if (b > 0)",
      "right" : "if (b > 0)",
      "info" : "IfStatement[22951-23375]:IfStatement[24256-24680]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22962-23284]:Block[24267-24589]"
    }, {
      "left" : "if (Long.MIN_VALUE / b <= a)",
      "right" : "if (Long.MIN_VALUE / b <= a)",
      "info" : "IfStatement[23063-23266]:IfStatement[24368-24571]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23092-23152]:Block[24397-24457]"
    }, {
      "left" : "ret = a * b;",
      "right" : "ret = a * b;",
      "info" : "ExpressionStatement[23118-23130]:ExpressionStatement[24423-24435]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23158-23266]:Block[24463-24571]"
    }, {
      "left" : "throw new ArithmeticException(msg);",
      "right" : "throw new ArithmeticException(msg);",
      "info" : "ThrowStatement[23184-23219]:ThrowStatement[24489-24524]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23290-23375]:Block[24595-24680]"
    }, {
      "left" : "ret = 0;",
      "right" : "ret = 0;",
      "info" : "ExpressionStatement[23349-23357]:ExpressionStatement[24654-24662]"
    }, {
      "left" : "if (a > 0)",
      "right" : "if (a > 0)",
      "info" : "IfStatement[23395-23835]:IfStatement[24700-25140]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23406-23756]:Block[24711-25061]"
    }, {
      "left" : "if (a <= Long.MAX_VALUE / b)",
      "right" : "if (a <= Long.MAX_VALUE / b)",
      "info" : "IfStatement[23580-23742]:IfStatement[24885-25047]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23609-23661]:Block[24914-24966]"
    }, {
      "left" : "ret = a * b;",
      "right" : "ret = a * b;",
      "info" : "ExpressionStatement[23631-23643]:ExpressionStatement[24936-24948]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23667-23742]:Block[24972-25047]"
    }, {
      "left" : "throw new ArithmeticException(msg);",
      "right" : "throw new ArithmeticException(msg);",
      "info" : "ThrowStatement[23689-23724]:ThrowStatement[24994-25029]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23762-23835]:Block[25067-25140]"
    }, {
      "left" : "ret = 0;",
      "right" : "ret = 0;",
      "info" : "ExpressionStatement[23813-23821]:ExpressionStatement[25118-25126]"
    }, {
      "left" : "return ret;",
      "right" : "return ret;",
      "info" : "ReturnStatement[23854-23865]:ReturnStatement[25159-25170]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[24630-24636]:Modifier[25935-25941]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[24637-24643]:Modifier[25942-25948]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[24644-24650]:PrimitiveType[25949-25955]"
    }, {
      "left" : "nextAfter",
      "right" : "nextAfter",
      "info" : "SimpleName[24651-24660]:SimpleName[25956-25965]"
    }, {
      "left" : "double d",
      "right" : "double d",
      "info" : "SingleVariableDeclaration[24661-24669]:SingleVariableDeclaration[25966-25974]"
    }, {
      "left" : "double direction",
      "right" : "double direction",
      "info" : "SingleVariableDeclaration[24671-24687]:SingleVariableDeclaration[25976-25992]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24689-26262]:Block[25994-27567]"
    }, {
      "left" : "if (Double.isNaN(d) || Double.isInfinite(d))",
      "right" : "if (Double.isNaN(d) || Double.isInfinite(d))",
      "info" : "IfStatement[24752-24942]:IfStatement[26057-26247]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24797-24834]:Block[26102-26139]"
    }, {
      "left" : "return d;",
      "right" : "return d;",
      "info" : "ReturnStatement[24815-24824]:ReturnStatement[26120-26129]"
    }, {
      "left" : "if (d == 0)",
      "right" : "if (d == 0)",
      "info" : "IfStatement[24840-24942]:IfStatement[26145-26247]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24852-24942]:Block[26157-26247]"
    }, {
      "left" : "return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;",
      "right" : "return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;",
      "info" : "ReturnStatement[24870-24932]:ReturnStatement[26175-26237]"
    }, {
      "left" : "long bits     = Double.doubleToLongBits(d);",
      "right" : "long bits     = Double.doubleToLongBits(d);",
      "info" : "VariableDeclarationStatement[25111-25154]:VariableDeclarationStatement[26416-26459]"
    }, {
      "left" : "long sign     = bits & 0x8000000000000000L;",
      "right" : "long sign     = bits & 0x8000000000000000L;",
      "info" : "VariableDeclarationStatement[25163-25206]:VariableDeclarationStatement[26468-26511]"
    }, {
      "left" : "long exponent = bits & 0x7ff0000000000000L;",
      "right" : "long exponent = bits & 0x7ff0000000000000L;",
      "info" : "VariableDeclarationStatement[25215-25258]:VariableDeclarationStatement[26520-26563]"
    }, {
      "left" : "long mantissa = bits & 0x000fffffffffffffL;",
      "right" : "long mantissa = bits & 0x000fffffffffffffL;",
      "info" : "VariableDeclarationStatement[25267-25310]:VariableDeclarationStatement[26572-26615]"
    }, {
      "left" : "if (d * (direction - d) >= 0)",
      "right" : "if (d * (direction - d) >= 0)",
      "info" : "IfStatement[25320-26255]:IfStatement[26625-27560]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25350-25777]:Block[26655-27082]"
    }, {
      "left" : "if (mantissa == 0x000fffffffffffffL)",
      "right" : "if (mantissa == 0x000fffffffffffffL)",
      "info" : "IfStatement[25419-25767]:IfStatement[26724-27072]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25456-25612]:Block[26761-26917]"
    }, {
      "left" : "return Double.longBitsToDouble(sign |\n                                        (exponent + 0x0010000000000000L));",
      "right" : "return Double.longBitsToDouble(sign |\n                                        (exponent + 0x0010000000000000L));",
      "info" : "ReturnStatement[25482-25594]:ReturnStatement[26787-26899]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25618-25767]:Block[26923-27072]"
    }, {
      "left" : "return Double.longBitsToDouble(sign |\n                                        exponent | (mantissa + 1));",
      "right" : "return Double.longBitsToDouble(sign |\n                                        exponent | (mantissa + 1));",
      "info" : "ReturnStatement[25644-25749]:ReturnStatement[26949-27054]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25783-26255]:Block[27088-27560]"
    }, {
      "left" : "if (mantissa == 0L)",
      "right" : "if (mantissa == 0L)",
      "info" : "IfStatement[25852-26245]:IfStatement[27157-27550]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25872-26090]:Block[27177-27395]"
    }, {
      "left" : "return Double.longBitsToDouble(sign |\n                                        (exponent - 0x0010000000000000L) |\n                                        0x000fffffffffffffL);",
      "right" : "return Double.longBitsToDouble(sign |\n                                        (exponent - 0x0010000000000000L) |\n                                        0x000fffffffffffffL);",
      "info" : "ReturnStatement[25898-26072]:ReturnStatement[27203-27377]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26096-26245]:Block[27401-27550]"
    }, {
      "left" : "return Double.longBitsToDouble(sign |\n                                        exponent | (mantissa - 1));",
      "right" : "return Double.longBitsToDouble(sign |\n                                        exponent | (mantissa - 1));",
      "info" : "ReturnStatement[26122-26227]:ReturnStatement[27427-27532]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[26590-26596]:Modifier[27895-27901]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[26597-26603]:Modifier[27902-27908]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[26604-26610]:PrimitiveType[27909-27915]"
    }, {
      "left" : "scalb",
      "right" : "scalb",
      "info" : "SimpleName[26611-26616]:SimpleName[27916-27921]"
    }, {
      "left" : "final double d",
      "right" : "final double d",
      "info" : "SingleVariableDeclaration[26617-26631]:SingleVariableDeclaration[27922-27936]"
    }, {
      "left" : "final int scaleFactor",
      "right" : "final int scaleFactor",
      "info" : "SingleVariableDeclaration[26633-26654]:SingleVariableDeclaration[27938-27959]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26656-27196]:Block[27961-28501]"
    }, {
      "left" : "if ((d == 0) || Double.isNaN(d) || Double.isInfinite(d))",
      "right" : "if ((d == 0) || Double.isNaN(d) || Double.isInfinite(d))",
      "info" : "IfStatement[26719-26809]:IfStatement[28024-28114]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26776-26809]:Block[28081-28114]"
    }, {
      "left" : "return d;",
      "right" : "return d;",
      "info" : "ReturnStatement[26790-26799]:ReturnStatement[28095-28104]"
    }, {
      "left" : "final long bits     = Double.doubleToLongBits(d);",
      "right" : "final long bits     = Double.doubleToLongBits(d);",
      "info" : "VariableDeclarationStatement[26865-26914]:VariableDeclarationStatement[28170-28219]"
    }, {
      "left" : "final long exponent = bits & 0x7ff0000000000000L;",
      "right" : "final long exponent = bits & 0x7ff0000000000000L;",
      "info" : "VariableDeclarationStatement[26923-26972]:VariableDeclarationStatement[28228-28277]"
    }, {
      "left" : "final long rest     = bits & 0x800fffffffffffffL;",
      "right" : "final long rest     = bits & 0x800fffffffffffffL;",
      "info" : "VariableDeclarationStatement[26981-27030]:VariableDeclarationStatement[28286-28335]"
    }, {
      "left" : "final long newBits = rest | (exponent + (((long) scaleFactor) << 52));",
      "right" : "final long newBits = rest | (exponent + (((long) scaleFactor) << 52));",
      "info" : "VariableDeclarationStatement[27070-27140]:VariableDeclarationStatement[28375-28445]"
    }, {
      "left" : "return Double.longBitsToDouble(newBits);",
      "right" : "return Double.longBitsToDouble(newBits);",
      "info" : "ReturnStatement[27149-27189]:ReturnStatement[28454-28494]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[28235-28241]:Modifier[29540-29546]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[28242-28248]:Modifier[29547-29553]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[28249-28255]:PrimitiveType[29554-29560]"
    }, {
      "left" : "normalizeAngle",
      "right" : "normalizeAngle",
      "info" : "SimpleName[28256-28270]:SimpleName[29561-29575]"
    }, {
      "left" : "double a",
      "right" : "double a",
      "info" : "SingleVariableDeclaration[28271-28279]:SingleVariableDeclaration[29576-29584]"
    }, {
      "left" : "double center",
      "right" : "double center",
      "info" : "SingleVariableDeclaration[28281-28294]:SingleVariableDeclaration[29586-29599]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28296-28378]:Block[29601-29683]"
    }, {
      "left" : "return a - TWO_PI * Math.floor((a + Math.PI - center) / TWO_PI);",
      "right" : "return a - TWO_PI * Math.floor((a + Math.PI - center) / TWO_PI);",
      "info" : "ReturnStatement[28307-28371]:ReturnStatement[29612-29676]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[28723-28729]:Modifier[30028-30034]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[28730-28736]:Modifier[30035-30041]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[28737-28743]:PrimitiveType[30042-30048]"
    }, {
      "left" : "round",
      "right" : "round",
      "info" : "SimpleName[28744-28749]:SimpleName[30049-30054]"
    }, {
      "left" : "double x",
      "right" : "double x",
      "info" : "SingleVariableDeclaration[28750-28758]:SingleVariableDeclaration[30055-30063]"
    }, {
      "left" : "int scale",
      "right" : "int scale",
      "info" : "SingleVariableDeclaration[28760-28769]:SingleVariableDeclaration[30065-30074]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28771-28836]:Block[30076-30141]"
    }, {
      "left" : "return round(x, scale, BigDecimal.ROUND_HALF_UP);",
      "right" : "return round(x, scale, BigDecimal.ROUND_HALF_UP);",
      "info" : "ReturnStatement[28781-28830]:ReturnStatement[30086-30135]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[29308-29314]:Modifier[30613-30619]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[29315-29321]:Modifier[30620-30626]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[29322-29328]:PrimitiveType[30627-30633]"
    }, {
      "left" : "round",
      "right" : "round",
      "info" : "SimpleName[29329-29334]:SimpleName[30634-30639]"
    }, {
      "left" : "double x",
      "right" : "double x",
      "info" : "SingleVariableDeclaration[29335-29343]:SingleVariableDeclaration[30640-30648]"
    }, {
      "left" : "int scale",
      "right" : "int scale",
      "info" : "SingleVariableDeclaration[29345-29354]:SingleVariableDeclaration[30650-30659]"
    }, {
      "left" : "int roundingMethod",
      "right" : "int roundingMethod",
      "info" : "SingleVariableDeclaration[29356-29374]:SingleVariableDeclaration[30661-30679]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29376-29761]:Block[30681-31066]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[29386-29755]:TryStatement[30691-31060]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29390-29564]:Block[30695-30869]"
    }, {
      "left" : "return (new BigDecimal\n                   (Double.toString(x))\n                   .setScale(scale, roundingMethod))\n                   .doubleValue();",
      "right" : "return (new BigDecimal\n                   (Double.toString(x))\n                   .setScale(scale, roundingMethod))\n                   .doubleValue();",
      "info" : "ReturnStatement[29404-29554]:ReturnStatement[30709-30859]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29598-29755]:Block[30903-31060]"
    }, {
      "left" : "if (Double.isInfinite(x))",
      "right" : "if (Double.isInfinite(x))",
      "info" : "IfStatement[29612-29745]:IfStatement[30917-31050]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29638-29689]:Block[30943-30994]"
    }, {
      "left" : "return x;",
      "right" : "return x;",
      "info" : "ReturnStatement[29656-29665]:ReturnStatement[30961-30970]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29695-29745]:Block[31000-31050]"
    }, {
      "left" : "return Double.NaN;",
      "right" : "return Double.NaN;",
      "info" : "ReturnStatement[29713-29731]:ReturnStatement[31018-31036]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[30107-30113]:Modifier[31412-31418]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[30114-30120]:Modifier[31419-31425]"
    }, {
      "left" : "float",
      "right" : "float",
      "info" : "PrimitiveType[30121-30126]:PrimitiveType[31426-31431]"
    }, {
      "left" : "round",
      "right" : "round",
      "info" : "SimpleName[30127-30132]:SimpleName[31432-31437]"
    }, {
      "left" : "float x",
      "right" : "float x",
      "info" : "SingleVariableDeclaration[30133-30140]:SingleVariableDeclaration[31438-31445]"
    }, {
      "left" : "int scale",
      "right" : "int scale",
      "info" : "SingleVariableDeclaration[30142-30151]:SingleVariableDeclaration[31447-31456]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30153-30218]:Block[31458-31523]"
    }, {
      "left" : "return round(x, scale, BigDecimal.ROUND_HALF_UP);",
      "right" : "return round(x, scale, BigDecimal.ROUND_HALF_UP);",
      "info" : "ReturnStatement[30163-30212]:ReturnStatement[31468-31517]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[30690-30696]:Modifier[31995-32001]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[30697-30703]:Modifier[32002-32008]"
    }, {
      "left" : "float",
      "right" : "float",
      "info" : "PrimitiveType[30704-30709]:PrimitiveType[32009-32014]"
    }, {
      "left" : "round",
      "right" : "round",
      "info" : "SimpleName[30710-30715]:SimpleName[32015-32020]"
    }, {
      "left" : "float x",
      "right" : "float x",
      "info" : "SingleVariableDeclaration[30716-30723]:SingleVariableDeclaration[32021-32028]"
    }, {
      "left" : "int scale",
      "right" : "int scale",
      "info" : "SingleVariableDeclaration[30725-30734]:SingleVariableDeclaration[32030-32039]"
    }, {
      "left" : "int roundingMethod",
      "right" : "int roundingMethod",
      "info" : "SingleVariableDeclaration[30736-30754]:SingleVariableDeclaration[32041-32059]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30756-30939]:Block[32061-32244]"
    }, {
      "left" : "float sign = indicator(x);",
      "right" : "float sign = indicator(x);",
      "info" : "VariableDeclarationStatement[30766-30792]:VariableDeclarationStatement[32071-32097]"
    }, {
      "left" : "float factor = (float)Math.pow(10.0f, scale) * sign;",
      "right" : "float factor = (float)Math.pow(10.0f, scale) * sign;",
      "info" : "VariableDeclarationStatement[30801-30853]:VariableDeclarationStatement[32106-32158]"
    }, {
      "left" : "return (float)roundUnscaled(x * factor, sign, roundingMethod) / factor;",
      "right" : "return (float)roundUnscaled(x * factor, sign, roundingMethod) / factor;",
      "info" : "ReturnStatement[30862-30933]:ReturnStatement[32167-32238]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[31411-31418]:Modifier[32716-32723]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[31419-31425]:Modifier[32724-32730]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[31426-31432]:PrimitiveType[32731-32737]"
    }, {
      "left" : "roundUnscaled",
      "right" : "roundUnscaled",
      "info" : "SimpleName[31433-31446]:SimpleName[32738-32751]"
    }, {
      "left" : "double unscaled",
      "right" : "double unscaled",
      "info" : "SingleVariableDeclaration[31447-31462]:SingleVariableDeclaration[32752-32767]"
    }, {
      "left" : "double sign",
      "right" : "double sign",
      "info" : "SingleVariableDeclaration[31464-31475]:SingleVariableDeclaration[32769-32780]"
    }, {
      "left" : "int roundingMethod",
      "right" : "int roundingMethod",
      "info" : "SingleVariableDeclaration[31485-31503]:SingleVariableDeclaration[32790-32808]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31505-34202]:Block[32810-35507]"
    }, {
      "left" : "switch (roundingMethod) {\n        case BigDecimal.ROUND_CEILING :\n            if (sign == -1) {\n                unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));\n            } else {\n                unscaled = Math.ceil(nextAfter(unscaled, Double.POSITIVE_INFINITY));\n            }\n            break;\n        case BigDecimal.ROUND_DOWN :\n            unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));\n            break;\n        case BigDecimal.ROUND_FLOOR :\n            if (sign == -1) {\n                unscaled = Math.ceil(nextAfter(unscaled, Double.POSITIVE_INFINITY));\n            } else {\n                unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));\n            }\n            break;\n        case BigDecimal.ROUND_HALF_DOWN : {\n            unscaled = nextAfter(unscaled, Double.NEGATIVE_INFINITY);\n            double fraction = unscaled - Math.floor(unscaled);\n            if (fraction > 0.5) {\n                unscaled = Math.ceil(unscaled);\n            } else {\n                unscaled = Math.floor(unscaled);\n            }\n            break;\n        }\n        case BigDecimal.ROUND_HALF_EVEN : {\n            double fraction = unscaled - Math.floor(unscaled);\n            if (fraction > 0.5) {\n                unscaled = Math.ceil(unscaled);\n            } else if (fraction < 0.5) {\n                unscaled = Math.floor(unscaled);\n            } else {\n                // The following equality test is intentional and needed for rounding purposes\n                if (Math.floor(unscaled) / 2.0 == Math.floor(Math\n                    .floor(unscaled) / 2.0)) { // even\n                    unscaled = Math.floor(unscaled);\n                } else { // odd\n                    unscaled = Math.ceil(unscaled);\n                }\n            }\n            break;\n        }\n        case BigDecimal.ROUND_HALF_UP : {\n            unscaled = nextAfter(unscaled, Double.POSITIVE_INFINITY);\n            double fraction = unscaled - Math.floor(unscaled);\n            if (fraction >= 0.5) {\n                unscaled = Math.ceil(unscaled);\n            } else {\n                unscaled = Math.floor(unscaled);\n            }\n            break;\n        }\n        case BigDecimal.ROUND_UNNECESSARY :\n            if (unscaled != Math.floor(unscaled)) {\n                throw new ArithmeticException(\"Inexact result from rounding\");\n            }\n            break;\n        case BigDecimal.ROUND_UP :\n            unscaled = Math.ceil(nextAfter(unscaled,  Double.POSITIVE_INFINITY));\n            break;\n        default :\n            throw new IllegalArgumentException(\"Invalid rounding method.\");\n        }",
      "right" : "switch (roundingMethod) {\n        case BigDecimal.ROUND_CEILING :\n            if (sign == -1) {\n                unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));\n            } else {\n                unscaled = Math.ceil(nextAfter(unscaled, Double.POSITIVE_INFINITY));\n            }\n            break;\n        case BigDecimal.ROUND_DOWN :\n            unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));\n            break;\n        case BigDecimal.ROUND_FLOOR :\n            if (sign == -1) {\n                unscaled = Math.ceil(nextAfter(unscaled, Double.POSITIVE_INFINITY));\n            } else {\n                unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));\n            }\n            break;\n        case BigDecimal.ROUND_HALF_DOWN : {\n            unscaled = nextAfter(unscaled, Double.NEGATIVE_INFINITY);\n            double fraction = unscaled - Math.floor(unscaled);\n            if (fraction > 0.5) {\n                unscaled = Math.ceil(unscaled);\n            } else {\n                unscaled = Math.floor(unscaled);\n            }\n            break;\n        }\n        case BigDecimal.ROUND_HALF_EVEN : {\n            double fraction = unscaled - Math.floor(unscaled);\n            if (fraction > 0.5) {\n                unscaled = Math.ceil(unscaled);\n            } else if (fraction < 0.5) {\n                unscaled = Math.floor(unscaled);\n            } else {\n                // The following equality test is intentional and needed for rounding purposes\n                if (Math.floor(unscaled) / 2.0 == Math.floor(Math\n                    .floor(unscaled) / 2.0)) { // even\n                    unscaled = Math.floor(unscaled);\n                } else { // odd\n                    unscaled = Math.ceil(unscaled);\n                }\n            }\n            break;\n        }\n        case BigDecimal.ROUND_HALF_UP : {\n            unscaled = nextAfter(unscaled, Double.POSITIVE_INFINITY);\n            double fraction = unscaled - Math.floor(unscaled);\n            if (fraction >= 0.5) {\n                unscaled = Math.ceil(unscaled);\n            } else {\n                unscaled = Math.floor(unscaled);\n            }\n            break;\n        }\n        case BigDecimal.ROUND_UNNECESSARY :\n            if (unscaled != Math.floor(unscaled)) {\n                throw new ArithmeticException(\"Inexact result from rounding\");\n            }\n            break;\n        case BigDecimal.ROUND_UP :\n            unscaled = Math.ceil(nextAfter(unscaled,  Double.POSITIVE_INFINITY));\n            break;\n        default :\n            throw new IllegalArgumentException(\"Invalid rounding method.\");\n        }",
      "info" : "SwitchStatement[31515-34171]:SwitchStatement[32820-35476]"
    }, {
      "left" : "case BigDecimal.ROUND_CEILING :",
      "right" : "case BigDecimal.ROUND_CEILING :",
      "info" : "SwitchCase[31549-31580]:SwitchCase[32854-32885]"
    }, {
      "left" : "if (sign == -1)",
      "right" : "if (sign == -1)",
      "info" : "IfStatement[31593-31816]:IfStatement[32898-33121]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31609-31710]:Block[32914-33015]"
    }, {
      "left" : "unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));",
      "right" : "unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));",
      "info" : "ExpressionStatement[31627-31696]:ExpressionStatement[32932-33001]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31716-31816]:Block[33021-33121]"
    }, {
      "left" : "unscaled = Math.ceil(nextAfter(unscaled, Double.POSITIVE_INFINITY));",
      "right" : "unscaled = Math.ceil(nextAfter(unscaled, Double.POSITIVE_INFINITY));",
      "info" : "ExpressionStatement[31734-31802]:ExpressionStatement[33039-33107]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[31829-31835]:BreakStatement[33134-33140]"
    }, {
      "left" : "case BigDecimal.ROUND_DOWN :",
      "right" : "case BigDecimal.ROUND_DOWN :",
      "info" : "SwitchCase[31844-31872]:SwitchCase[33149-33177]"
    }, {
      "left" : "unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));",
      "right" : "unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));",
      "info" : "ExpressionStatement[31885-31954]:ExpressionStatement[33190-33259]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[31967-31973]:BreakStatement[33272-33278]"
    }, {
      "left" : "case BigDecimal.ROUND_FLOOR :",
      "right" : "case BigDecimal.ROUND_FLOOR :",
      "info" : "SwitchCase[31982-32011]:SwitchCase[33287-33316]"
    }, {
      "left" : "if (sign == -1)",
      "right" : "if (sign == -1)",
      "info" : "IfStatement[32024-32247]:IfStatement[33329-33552]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32040-32140]:Block[33345-33445]"
    }, {
      "left" : "unscaled = Math.ceil(nextAfter(unscaled, Double.POSITIVE_INFINITY));",
      "right" : "unscaled = Math.ceil(nextAfter(unscaled, Double.POSITIVE_INFINITY));",
      "info" : "ExpressionStatement[32058-32126]:ExpressionStatement[33363-33431]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32146-32247]:Block[33451-33552]"
    }, {
      "left" : "unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));",
      "right" : "unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));",
      "info" : "ExpressionStatement[32164-32233]:ExpressionStatement[33469-33538]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[32260-32266]:BreakStatement[33565-33571]"
    }, {
      "left" : "case BigDecimal.ROUND_HALF_DOWN :",
      "right" : "case BigDecimal.ROUND_HALF_DOWN :",
      "info" : "SwitchCase[32275-32308]:SwitchCase[33580-33613]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32309-32638]:Block[33614-33943]"
    }, {
      "left" : "unscaled = nextAfter(unscaled, Double.NEGATIVE_INFINITY);",
      "right" : "unscaled = nextAfter(unscaled, Double.NEGATIVE_INFINITY);",
      "info" : "ExpressionStatement[32323-32380]:ExpressionStatement[33628-33685]"
    }, {
      "left" : "double fraction = unscaled - Math.floor(unscaled);",
      "right" : "double fraction = unscaled - Math.floor(unscaled);",
      "info" : "VariableDeclarationStatement[32393-32443]:VariableDeclarationStatement[33698-33748]"
    }, {
      "left" : "if (fraction > 0.5)",
      "right" : "if (fraction > 0.5)",
      "info" : "IfStatement[32456-32609]:IfStatement[33761-33914]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32476-32539]:Block[33781-33844]"
    }, {
      "left" : "unscaled = Math.ceil(unscaled);",
      "right" : "unscaled = Math.ceil(unscaled);",
      "info" : "ExpressionStatement[32494-32525]:ExpressionStatement[33799-33830]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32545-32609]:Block[33850-33914]"
    }, {
      "left" : "unscaled = Math.floor(unscaled);",
      "right" : "unscaled = Math.floor(unscaled);",
      "info" : "ExpressionStatement[32563-32595]:ExpressionStatement[33868-33900]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[32622-32628]:BreakStatement[33927-33933]"
    }, {
      "left" : "case BigDecimal.ROUND_HALF_EVEN :",
      "right" : "case BigDecimal.ROUND_HALF_EVEN :",
      "info" : "SwitchCase[32647-32680]:SwitchCase[33952-33985]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32681-33352]:Block[33986-34657]"
    }, {
      "left" : "double fraction = unscaled - Math.floor(unscaled);",
      "right" : "double fraction = unscaled - Math.floor(unscaled);",
      "info" : "VariableDeclarationStatement[32695-32745]:VariableDeclarationStatement[34000-34050]"
    }, {
      "left" : "if (fraction > 0.5)",
      "right" : "if (fraction > 0.5)",
      "info" : "IfStatement[32758-33323]:IfStatement[34063-34628]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32778-32841]:Block[34083-34146]"
    }, {
      "left" : "unscaled = Math.ceil(unscaled);",
      "right" : "unscaled = Math.ceil(unscaled);",
      "info" : "ExpressionStatement[32796-32827]:ExpressionStatement[34101-34132]"
    }, {
      "left" : "if (fraction < 0.5)",
      "right" : "if (fraction < 0.5)",
      "info" : "IfStatement[32847-33323]:IfStatement[34152-34628]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32867-32931]:Block[34172-34236]"
    }, {
      "left" : "unscaled = Math.floor(unscaled);",
      "right" : "unscaled = Math.floor(unscaled);",
      "info" : "ExpressionStatement[32885-32917]:ExpressionStatement[34190-34222]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32937-33323]:Block[34242-34628]"
    }, {
      "left" : "if (Math.floor(unscaled) / 2.0 == Math.floor(Math\n                    .floor(unscaled) / 2.0))",
      "right" : "if (Math.floor(unscaled) / 2.0 == Math.floor(Math\n                    .floor(unscaled) / 2.0))",
      "info" : "IfStatement[33050-33309]:IfStatement[34355-34614]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33145-33225]:Block[34450-34530]"
    }, {
      "left" : "unscaled = Math.floor(unscaled);",
      "right" : "unscaled = Math.floor(unscaled);",
      "info" : "ExpressionStatement[33175-33207]:ExpressionStatement[34480-34512]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33231-33309]:Block[34536-34614]"
    }, {
      "left" : "unscaled = Math.ceil(unscaled);",
      "right" : "unscaled = Math.ceil(unscaled);",
      "info" : "ExpressionStatement[33260-33291]:ExpressionStatement[34565-34596]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[33336-33342]:BreakStatement[34641-34647]"
    }, {
      "left" : "case BigDecimal.ROUND_HALF_UP :",
      "right" : "case BigDecimal.ROUND_HALF_UP :",
      "info" : "SwitchCase[33361-33392]:SwitchCase[34666-34697]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33393-33723]:Block[34698-35028]"
    }, {
      "left" : "unscaled = nextAfter(unscaled, Double.POSITIVE_INFINITY);",
      "right" : "unscaled = nextAfter(unscaled, Double.POSITIVE_INFINITY);",
      "info" : "ExpressionStatement[33407-33464]:ExpressionStatement[34712-34769]"
    }, {
      "left" : "double fraction = unscaled - Math.floor(unscaled);",
      "right" : "double fraction = unscaled - Math.floor(unscaled);",
      "info" : "VariableDeclarationStatement[33477-33527]:VariableDeclarationStatement[34782-34832]"
    }, {
      "left" : "if (fraction >= 0.5)",
      "right" : "if (fraction >= 0.5)",
      "info" : "IfStatement[33540-33694]:IfStatement[34845-34999]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33561-33624]:Block[34866-34929]"
    }, {
      "left" : "unscaled = Math.ceil(unscaled);",
      "right" : "unscaled = Math.ceil(unscaled);",
      "info" : "ExpressionStatement[33579-33610]:ExpressionStatement[34884-34915]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33630-33694]:Block[34935-34999]"
    }, {
      "left" : "unscaled = Math.floor(unscaled);",
      "right" : "unscaled = Math.floor(unscaled);",
      "info" : "ExpressionStatement[33648-33680]:ExpressionStatement[34953-34985]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[33707-33713]:BreakStatement[35012-35018]"
    }, {
      "left" : "case BigDecimal.ROUND_UNNECESSARY :",
      "right" : "case BigDecimal.ROUND_UNNECESSARY :",
      "info" : "SwitchCase[33732-33767]:SwitchCase[35037-35072]"
    }, {
      "left" : "if (unscaled != Math.floor(unscaled))",
      "right" : "if (unscaled != Math.floor(unscaled))",
      "info" : "IfStatement[33780-33912]:IfStatement[35085-35217]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33818-33912]:Block[35123-35217]"
    }, {
      "left" : "throw new ArithmeticException(\"Inexact result from rounding\");",
      "right" : "throw new ArithmeticException(\"Inexact result from rounding\");",
      "info" : "ThrowStatement[33836-33898]:ThrowStatement[35141-35203]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[33925-33931]:BreakStatement[35230-35236]"
    }, {
      "left" : "case BigDecimal.ROUND_UP :",
      "right" : "case BigDecimal.ROUND_UP :",
      "info" : "SwitchCase[33940-33966]:SwitchCase[35245-35271]"
    }, {
      "left" : "unscaled = Math.ceil(nextAfter(unscaled,  Double.POSITIVE_INFINITY));",
      "right" : "unscaled = Math.ceil(nextAfter(unscaled,  Double.POSITIVE_INFINITY));",
      "info" : "ExpressionStatement[33979-34048]:ExpressionStatement[35284-35353]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[34061-34067]:BreakStatement[35366-35372]"
    }, {
      "left" : "default :",
      "right" : "default :",
      "info" : "SwitchCase[34076-34085]:SwitchCase[35381-35390]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Invalid rounding method.\");",
      "right" : "throw new IllegalArgumentException(\"Invalid rounding method.\");",
      "info" : "ThrowStatement[34098-34161]:ThrowStatement[35403-35466]"
    }, {
      "left" : "return unscaled;",
      "right" : "return unscaled;",
      "info" : "ReturnStatement[34180-34196]:ReturnStatement[35485-35501]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[34597-34603]:Modifier[35902-35908]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[34604-34610]:Modifier[35909-35915]"
    }, {
      "left" : "byte",
      "right" : "byte",
      "info" : "PrimitiveType[34611-34615]:PrimitiveType[35916-35920]"
    }, {
      "left" : "sign",
      "right" : "sign",
      "info" : "SimpleName[34616-34620]:SimpleName[35921-35925]"
    }, {
      "left" : "final byte x",
      "right" : "final byte x",
      "info" : "SingleVariableDeclaration[34621-34633]:SingleVariableDeclaration[35926-35938]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34635-34694]:Block[35940-35999]"
    }, {
      "left" : "return (x == ZB) ? ZB : (x > ZB) ? PB : NB;",
      "right" : "return (x == ZB) ? ZB : (x > ZB) ? PB : NB;",
      "info" : "ReturnStatement[34645-34688]:ReturnStatement[35950-35993]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[35234-35240]:Modifier[36539-36545]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[35241-35247]:Modifier[36546-36552]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[35248-35254]:PrimitiveType[36553-36559]"
    }, {
      "left" : "sign",
      "right" : "sign",
      "info" : "SimpleName[35255-35259]:SimpleName[36560-36564]"
    }, {
      "left" : "final double x",
      "right" : "final double x",
      "info" : "SingleVariableDeclaration[35260-35274]:SingleVariableDeclaration[36565-36579]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35276-35413]:Block[36581-36718]"
    }, {
      "left" : "if (Double.isNaN(x))",
      "right" : "if (Double.isNaN(x))",
      "info" : "IfStatement[35286-35349]:IfStatement[36591-36654]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35307-35349]:Block[36612-36654]"
    }, {
      "left" : "return Double.NaN;",
      "right" : "return Double.NaN;",
      "info" : "ReturnStatement[35321-35339]:ReturnStatement[36626-36644]"
    }, {
      "left" : "return (x == 0.0) ? 0.0 : (x > 0.0) ? 1.0 : -1.0;",
      "right" : "return (x == 0.0) ? 0.0 : (x > 0.0) ? 1.0 : -1.0;",
      "info" : "ReturnStatement[35358-35407]:ReturnStatement[36663-36712]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[35855-35861]:Modifier[37160-37166]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[35862-35868]:Modifier[37167-37173]"
    }, {
      "left" : "float",
      "right" : "float",
      "info" : "PrimitiveType[35869-35874]:PrimitiveType[37174-37179]"
    }, {
      "left" : "sign",
      "right" : "sign",
      "info" : "SimpleName[35875-35879]:SimpleName[37180-37184]"
    }, {
      "left" : "final float x",
      "right" : "final float x",
      "info" : "SingleVariableDeclaration[35880-35893]:SingleVariableDeclaration[37185-37198]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35895-36035]:Block[37200-37340]"
    }, {
      "left" : "if (Float.isNaN(x))",
      "right" : "if (Float.isNaN(x))",
      "info" : "IfStatement[35905-35966]:IfStatement[37210-37271]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35925-35966]:Block[37230-37271]"
    }, {
      "left" : "return Float.NaN;",
      "right" : "return Float.NaN;",
      "info" : "ReturnStatement[35939-35956]:ReturnStatement[37244-37261]"
    }, {
      "left" : "return (x == 0.0F) ? 0.0F : (x > 0.0F) ? 1.0F : -1.0F;",
      "right" : "return (x == 0.0F) ? 0.0F : (x > 0.0F) ? 1.0F : -1.0F;",
      "info" : "ReturnStatement[35975-36029]:ReturnStatement[37280-37334]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[36381-36387]:Modifier[37686-37692]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[36388-36394]:Modifier[37693-37699]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[36395-36398]:PrimitiveType[37700-37703]"
    }, {
      "left" : "sign",
      "right" : "sign",
      "info" : "SimpleName[36399-36403]:SimpleName[37704-37708]"
    }, {
      "left" : "final int x",
      "right" : "final int x",
      "info" : "SingleVariableDeclaration[36404-36415]:SingleVariableDeclaration[37709-37720]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36417-36472]:Block[37722-37777]"
    }, {
      "left" : "return (x == 0) ? 0 : (x > 0) ? 1 : -1;",
      "right" : "return (x == 0) ? 0 : (x > 0) ? 1 : -1;",
      "info" : "ReturnStatement[36427-36466]:ReturnStatement[37732-37771]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[36825-36831]:Modifier[38130-38136]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[36832-36838]:Modifier[38137-38143]"
    }, {
      "left" : "long",
      "right" : "long",
      "info" : "PrimitiveType[36839-36843]:PrimitiveType[38144-38148]"
    }, {
      "left" : "sign",
      "right" : "sign",
      "info" : "SimpleName[36844-36848]:SimpleName[38149-38153]"
    }, {
      "left" : "final long x",
      "right" : "final long x",
      "info" : "SingleVariableDeclaration[36849-36861]:SingleVariableDeclaration[38154-38166]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36863-36923]:Block[38168-38228]"
    }, {
      "left" : "return (x == 0L) ? 0L : (x > 0L) ? 1L : -1L;",
      "right" : "return (x == 0L) ? 0L : (x > 0L) ? 1L : -1L;",
      "info" : "ReturnStatement[36873-36917]:ReturnStatement[38178-38222]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[37342-37348]:Modifier[38647-38653]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[37349-37355]:Modifier[38654-38660]"
    }, {
      "left" : "short",
      "right" : "short",
      "info" : "PrimitiveType[37356-37361]:PrimitiveType[38661-38666]"
    }, {
      "left" : "sign",
      "right" : "sign",
      "info" : "SimpleName[37362-37366]:SimpleName[38667-38671]"
    }, {
      "left" : "final short x",
      "right" : "final short x",
      "info" : "SingleVariableDeclaration[37367-37380]:SingleVariableDeclaration[38672-38685]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37382-37441]:Block[38687-38746]"
    }, {
      "left" : "return (x == ZS) ? ZS : (x > ZS) ? PS : NS;",
      "right" : "return (x == ZS) ? ZS : (x > ZS) ? PS : NS;",
      "info" : "ReturnStatement[37392-37435]:ReturnStatement[38697-38740]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[37686-37692]:Modifier[38991-38997]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[37693-37699]:Modifier[38998-39004]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[37700-37706]:PrimitiveType[39005-39011]"
    }, {
      "left" : "sinh",
      "right" : "sinh",
      "info" : "SimpleName[37707-37711]:SimpleName[39012-39016]"
    }, {
      "left" : "double x",
      "right" : "double x",
      "info" : "SingleVariableDeclaration[37712-37720]:SingleVariableDeclaration[39017-39025]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37722-37780]:Block[39027-39085]"
    }, {
      "left" : "return (Math.exp(x) - Math.exp(-x)) / 2.0;",
      "right" : "return (Math.exp(x) - Math.exp(-x)) / 2.0;",
      "info" : "ReturnStatement[37732-37774]:ReturnStatement[39037-39079]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[38084-38090]:Modifier[39389-39395]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[38091-38097]:Modifier[39396-39402]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[38098-38101]:PrimitiveType[39403-39406]"
    }, {
      "left" : "subAndCheck",
      "right" : "subAndCheck",
      "info" : "SimpleName[38102-38113]:SimpleName[39407-39418]"
    }, {
      "left" : "int x",
      "right" : "int x",
      "info" : "SingleVariableDeclaration[38114-38119]:SingleVariableDeclaration[39419-39424]"
    }, {
      "left" : "int y",
      "right" : "int y",
      "info" : "SingleVariableDeclaration[38121-38126]:SingleVariableDeclaration[39426-39431]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38128-38331]:Block[39433-39636]"
    }, {
      "left" : "long s = (long)x - (long)y;",
      "right" : "long s = (long)x - (long)y;",
      "info" : "VariableDeclarationStatement[38138-38165]:VariableDeclarationStatement[39443-39470]"
    }, {
      "left" : "if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE)",
      "right" : "if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE)",
      "info" : "IfStatement[38174-38302]:IfStatement[39479-39607]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38226-38302]:Block[39531-39607]"
    }, {
      "left" : "throw new ArithmeticException(\"overflow: subtract\");",
      "right" : "throw new ArithmeticException(\"overflow: subtract\");",
      "info" : "ThrowStatement[38240-38292]:ThrowStatement[39545-39597]"
    }, {
      "left" : "return (int)s;",
      "right" : "return (int)s;",
      "info" : "ReturnStatement[38311-38325]:ReturnStatement[39616-39630]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[38639-38645]:Modifier[39944-39950]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[38646-38652]:Modifier[39951-39957]"
    }, {
      "left" : "long",
      "right" : "long",
      "info" : "PrimitiveType[38653-38657]:PrimitiveType[39958-39962]"
    }, {
      "left" : "subAndCheck",
      "right" : "subAndCheck",
      "info" : "SimpleName[38658-38669]:SimpleName[39963-39974]"
    }, {
      "left" : "long a",
      "right" : "long a",
      "info" : "SingleVariableDeclaration[38670-38676]:SingleVariableDeclaration[39975-39981]"
    }, {
      "left" : "long b",
      "right" : "long b",
      "info" : "SingleVariableDeclaration[38678-38684]:SingleVariableDeclaration[39983-39989]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38686-39056]:Block[39991-40361]"
    }, {
      "left" : "long ret;",
      "right" : "long ret;",
      "info" : "VariableDeclarationStatement[38696-38705]:VariableDeclarationStatement[40001-40010]"
    }, {
      "left" : "String msg = \"overflow: subtract\";",
      "right" : "String msg = \"overflow: subtract\";",
      "info" : "VariableDeclarationStatement[38714-38748]:VariableDeclarationStatement[40019-40053]"
    }, {
      "left" : "if (b == Long.MIN_VALUE)",
      "right" : "if (b == Long.MIN_VALUE)",
      "info" : "IfStatement[38757-39030]:IfStatement[40062-40335]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38782-38934]:Block[40087-40239]"
    }, {
      "left" : "if (a < 0)",
      "right" : "if (a < 0)",
      "info" : "IfStatement[38796-38924]:IfStatement[40101-40229]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38807-38851]:Block[40112-40156]"
    }, {
      "left" : "ret = a - b;",
      "right" : "ret = a - b;",
      "info" : "ExpressionStatement[38825-38837]:ExpressionStatement[40130-40142]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38857-38924]:Block[40162-40229]"
    }, {
      "left" : "throw new ArithmeticException(msg);",
      "right" : "throw new ArithmeticException(msg);",
      "info" : "ThrowStatement[38875-38910]:ThrowStatement[40180-40215]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38940-39030]:Block[40245-40335]"
    }, {
      "left" : "ret = addAndCheck(a, -b, msg);",
      "right" : "ret = addAndCheck(a, -b, msg);",
      "info" : "ExpressionStatement[38990-39020]:ExpressionStatement[40295-40325]"
    }, {
      "left" : "return ret;",
      "right" : "return ret;",
      "info" : "ReturnStatement[39039-39050]:ReturnStatement[40344-40355]"
    } ]
  },
  "interFileMappings" : { }
}