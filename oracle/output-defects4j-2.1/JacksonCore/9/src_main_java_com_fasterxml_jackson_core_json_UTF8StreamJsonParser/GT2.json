{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "UTF8StreamJsonParser",
      "right" : "UTF8StreamJsonParser",
      "info" : "TypeDeclaration[432-125325]:TypeDeclaration[432-125519]"
    }, {
      "left" : "final static byte BYTE_LF = (byte) '\\n';",
      "right" : "final static byte BYTE_LF = (byte) '\\n';",
      "info" : "FieldDeclaration[679-719]:FieldDeclaration[679-719]"
    }, {
      "left" : "private final static int[] _icUTF8 = CharTypes.getInputCodeUtf8();",
      "right" : "private final static int[] _icUTF8 = CharTypes.getInputCodeUtf8();",
      "info" : "FieldDeclaration[790-856]:FieldDeclaration[790-856]"
    }, {
      "left" : "protected final static int[] _icLatin1 = CharTypes.getInputCodeLatin1();",
      "right" : "protected final static int[] _icLatin1 = CharTypes.getInputCodeLatin1();",
      "info" : "FieldDeclaration[1000-1072]:FieldDeclaration[1000-1072]"
    }, {
      "left" : "protected ObjectCodec _objectCodec;",
      "right" : "protected ObjectCodec _objectCodec;",
      "info" : "FieldDeclaration[1243-1453]:FieldDeclaration[1243-1453]"
    }, {
      "left" : "final protected ByteQuadsCanonicalizer _symbols;",
      "right" : "final protected ByteQuadsCanonicalizer _symbols;",
      "info" : "FieldDeclaration[1459-1588]:FieldDeclaration[1459-1588]"
    }, {
      "left" : "protected int[] _quadBuffer = new int[16];",
      "right" : "protected int[] _quadBuffer = new int[16];",
      "info" : "FieldDeclaration[1767-1872]:FieldDeclaration[1767-1872]"
    }, {
      "left" : "protected boolean _tokenIncomplete = false;",
      "right" : "protected boolean _tokenIncomplete = false;",
      "info" : "FieldDeclaration[1878-2114]:FieldDeclaration[1878-2114]"
    }, {
      "left" : "private int _quad1;",
      "right" : "private int _quad1;",
      "info" : "FieldDeclaration[2120-2213]:FieldDeclaration[2120-2213]"
    }, {
      "left" : "protected InputStream _inputStream;",
      "right" : "protected InputStream _inputStream;",
      "info" : "FieldDeclaration[2432-2467]:FieldDeclaration[2432-2467]"
    }, {
      "left" : "protected byte[] _inputBuffer;",
      "right" : "protected byte[] _inputBuffer;",
      "info" : "FieldDeclaration[2643-2865]:FieldDeclaration[2643-2865]"
    }, {
      "left" : "protected boolean _bufferRecyclable;",
      "right" : "protected boolean _bufferRecyclable;",
      "info" : "FieldDeclaration[2871-3157]:FieldDeclaration[2871-3157]"
    }, {
      "left" : "public UTF8StreamJsonParser(IOContext ctxt, int features, InputStream in,\n            ObjectCodec codec, ByteQuadsCanonicalizer sym,\n            byte[] inputBuffer, int start, int end,\n            boolean bufferRecyclable)",
      "right" : "public UTF8StreamJsonParser(IOContext ctxt, int features, InputStream in,\n            ObjectCodec codec, ByteQuadsCanonicalizer sym,\n            byte[] inputBuffer, int start, int end,\n            boolean bufferRecyclable)",
      "info" : "MethodDeclaration[3329-3953]:MethodDeclaration[3329-3953]"
    }, {
      "left" : "public ObjectCodec getCodec()",
      "right" : "public ObjectCodec getCodec()",
      "info" : "MethodDeclaration[3959-4039]:MethodDeclaration[3959-4039]"
    }, {
      "left" : "public void setCodec(ObjectCodec c)",
      "right" : "public void setCodec(ObjectCodec c)",
      "info" : "MethodDeclaration[4045-4128]:MethodDeclaration[4045-4128]"
    }, {
      "left" : "public int releaseBuffered(OutputStream out) throws IOException",
      "right" : "public int releaseBuffered(OutputStream out) throws IOException",
      "info" : "MethodDeclaration[4314-4648]:MethodDeclaration[4314-4648]"
    }, {
      "left" : "public Object getInputSource()",
      "right" : "public Object getInputSource()",
      "info" : "MethodDeclaration[4654-4735]:MethodDeclaration[4654-4735]"
    }, {
      "left" : "protected final boolean loadMore() throws IOException",
      "right" : "protected final boolean loadMore() throws IOException",
      "info" : "MethodDeclaration[4925-5823]:MethodDeclaration[4925-5823]"
    }, {
      "left" : "protected final boolean _loadToHaveAtLeast(int minAvailable) throws IOException",
      "right" : "protected final boolean _loadToHaveAtLeast(int minAvailable) throws IOException",
      "info" : "MethodDeclaration[5829-7243]:MethodDeclaration[5829-7243]"
    }, {
      "left" : "protected void _closeInput() throws IOException",
      "right" : "protected void _closeInput() throws IOException",
      "info" : "MethodDeclaration[7253-7750]:MethodDeclaration[7253-7750]"
    }, {
      "left" : "protected void _releaseBuffers() throws IOException",
      "right" : "protected void _releaseBuffers() throws IOException",
      "info" : "MethodDeclaration[7756-8671]:MethodDeclaration[7756-8671]"
    }, {
      "left" : "public String getText() throws IOException",
      "right" : "public String getText() throws IOException",
      "info" : "MethodDeclaration[8852-9246]:MethodDeclaration[8852-9246]"
    }, {
      "left" : "public String getValueAsString() throws IOException",
      "right" : "public String getValueAsString() throws IOException",
      "info" : "MethodDeclaration[9342-9752]:MethodDeclaration[9342-9849]"
    }, {
      "left" : "public String getValueAsString(String defValue) throws IOException",
      "right" : "public String getValueAsString(String defValue) throws IOException",
      "info" : "MethodDeclaration[9780-10209]:MethodDeclaration[9877-10403]"
    }, {
      "left" : "public int getValueAsInt() throws IOException",
      "right" : "public int getValueAsInt() throws IOException",
      "info" : "MethodDeclaration[10232-10837]:MethodDeclaration[10426-11031]"
    }, {
      "left" : "public int getValueAsInt(int defValue) throws IOException",
      "right" : "public int getValueAsInt(int defValue) throws IOException",
      "info" : "MethodDeclaration[10860-11484]:MethodDeclaration[11054-11678]"
    }, {
      "left" : "protected final String _getText2(JsonToken t)",
      "right" : "protected final String _getText2(JsonToken t)",
      "info" : "MethodDeclaration[11494-11937]:MethodDeclaration[11688-12131]"
    }, {
      "left" : "public char[] getTextCharacters() throws IOException",
      "right" : "public char[] getTextCharacters() throws IOException",
      "info" : "MethodDeclaration[11943-13270]:MethodDeclaration[12137-13464]"
    }, {
      "left" : "public int getTextLength() throws IOException",
      "right" : "public int getTextLength() throws IOException",
      "info" : "MethodDeclaration[13276-14050]:MethodDeclaration[13470-14244]"
    }, {
      "left" : "public int getTextOffset() throws IOException",
      "right" : "public int getTextOffset() throws IOException",
      "info" : "MethodDeclaration[14056-14741]:MethodDeclaration[14250-14935]"
    }, {
      "left" : "public byte[] getBinaryValue(Base64Variant b64variant) throws IOException",
      "right" : "public byte[] getBinaryValue(Base64Variant b64variant) throws IOException",
      "info" : "MethodDeclaration[14751-16083]:MethodDeclaration[14945-16277]"
    }, {
      "left" : "public int readBinaryValue(Base64Variant b64variant, OutputStream out) throws IOException",
      "right" : "public int readBinaryValue(Base64Variant b64variant, OutputStream out) throws IOException",
      "info" : "MethodDeclaration[16089-16723]:MethodDeclaration[16283-16917]"
    }, {
      "left" : "protected int _readBinary(Base64Variant b64variant, OutputStream out,\n                              byte[] buffer) throws IOException",
      "right" : "protected int _readBinary(Base64Variant b64variant, OutputStream out,\n                              byte[] buffer) throws IOException",
      "info" : "MethodDeclaration[16729-21941]:MethodDeclaration[16923-22135]"
    }, {
      "left" : "public JsonLocation getTokenLocation()",
      "right" : "public JsonLocation getTokenLocation()",
      "info" : "MethodDeclaration[22011-22275]:MethodDeclaration[22205-22469]"
    }, {
      "left" : "public JsonLocation getCurrentLocation()",
      "right" : "public JsonLocation getCurrentLocation()",
      "info" : "MethodDeclaration[22345-22648]:MethodDeclaration[22539-22842]"
    }, {
      "left" : "public JsonToken nextToken() throws IOException",
      "right" : "public JsonToken nextToken() throws IOException",
      "info" : "MethodDeclaration[22838-26835]:MethodDeclaration[23032-27029]"
    }, {
      "left" : "private final JsonToken _nextTokenNotInObject(int i) throws IOException",
      "right" : "private final JsonToken _nextTokenNotInObject(int i) throws IOException",
      "info" : "MethodDeclaration[26841-28366]:MethodDeclaration[27035-28560]"
    }, {
      "left" : "private final JsonToken _nextAfterName()",
      "right" : "private final JsonToken _nextAfterName()",
      "info" : "MethodDeclaration[28376-28947]:MethodDeclaration[28570-29141]"
    }, {
      "left" : "public boolean nextFieldName(SerializableString str) throws IOException",
      "right" : "public boolean nextFieldName(SerializableString str) throws IOException",
      "info" : "MethodDeclaration[29158-32294]:MethodDeclaration[29352-32488]"
    }, {
      "left" : "public String nextFieldName() throws IOException",
      "right" : "public String nextFieldName() throws IOException",
      "info" : "MethodDeclaration[32300-35483]:MethodDeclaration[32494-35677]"
    }, {
      "left" : "private final int _skipColonFast(int ptr) throws IOException",
      "right" : "private final int _skipColonFast(int ptr) throws IOException",
      "info" : "MethodDeclaration[35564-37129]:MethodDeclaration[35758-37323]"
    }, {
      "left" : "private final void _isNextTokenNameYes(int i) throws IOException",
      "right" : "private final void _isNextTokenNameYes(int i) throws IOException",
      "info" : "MethodDeclaration[37139-38327]:MethodDeclaration[37333-38521]"
    }, {
      "left" : "private final boolean _isNextTokenNameMaybe(int i, SerializableString str) throws IOException",
      "right" : "private final boolean _isNextTokenNameMaybe(int i, SerializableString str) throws IOException",
      "info" : "MethodDeclaration[38342-39905]:MethodDeclaration[38536-40099]"
    }, {
      "left" : "public String nextTextValue() throws IOException",
      "right" : "public String nextTextValue() throws IOException",
      "info" : "MethodDeclaration[39911-41045]:MethodDeclaration[40105-41239]"
    }, {
      "left" : "public int nextIntValue(int defaultValue) throws IOException",
      "right" : "public int nextIntValue(int defaultValue) throws IOException",
      "info" : "MethodDeclaration[41051-42051]:MethodDeclaration[41245-42245]"
    }, {
      "left" : "public long nextLongValue(long defaultValue) throws IOException",
      "right" : "public long nextLongValue(long defaultValue) throws IOException",
      "info" : "MethodDeclaration[42057-43062]:MethodDeclaration[42251-43256]"
    }, {
      "left" : "public Boolean nextBooleanValue() throws IOException",
      "right" : "public Boolean nextBooleanValue() throws IOException",
      "info" : "MethodDeclaration[43068-44205]:MethodDeclaration[43262-44399]"
    }, {
      "left" : "protected JsonToken _parsePosNumber(int c) throws IOException",
      "right" : "protected JsonToken _parsePosNumber(int c) throws IOException",
      "info" : "MethodDeclaration[44399-46760]:MethodDeclaration[44593-46954]"
    }, {
      "left" : "protected JsonToken _parseNegNumber() throws IOException",
      "right" : "protected JsonToken _parseNegNumber() throws IOException",
      "info" : "MethodDeclaration[46770-48791]:MethodDeclaration[46964-48985]"
    }, {
      "left" : "private final JsonToken _parseNumber2(char[] outBuf, int outPtr, boolean negative,\n            int intPartLength) throws IOException",
      "right" : "private final JsonToken _parseNumber2(char[] outBuf, int outPtr, boolean negative,\n            int intPartLength) throws IOException",
      "info" : "MethodDeclaration[48797-50262]:MethodDeclaration[48991-50456]"
    }, {
      "left" : "private final int _verifyNoLeadingZeroes() throws IOException",
      "right" : "private final int _verifyNoLeadingZeroes() throws IOException",
      "info" : "MethodDeclaration[50272-51658]:MethodDeclaration[50466-51852]"
    }, {
      "left" : "private final JsonToken _parseFloat(char[] outBuf, int outPtr, int c,\n            boolean negative, int integerPartLength) throws IOException",
      "right" : "private final JsonToken _parseFloat(char[] outBuf, int outPtr, int c,\n            boolean negative, int integerPartLength) throws IOException",
      "info" : "MethodDeclaration[51668-55017]:MethodDeclaration[51862-55211]"
    }, {
      "left" : "private final void _verifyRootSpace(int ch) throws IOException",
      "right" : "private final void _verifyRootSpace(int ch) throws IOException",
      "info" : "MethodDeclaration[55023-55784]:MethodDeclaration[55217-55978]"
    }, {
      "left" : "protected final String _parseName(int i) throws IOException",
      "right" : "protected final String _parseName(int i) throws IOException",
      "info" : "MethodDeclaration[55981-58343]:MethodDeclaration[56175-58537]"
    }, {
      "left" : "protected final String parseMediumName(int q2) throws IOException",
      "right" : "protected final String parseMediumName(int q2) throws IOException",
      "info" : "MethodDeclaration[58349-59635]:MethodDeclaration[58543-59829]"
    }, {
      "left" : "protected final String parseMediumName2(int q3, final int q2) throws IOException",
      "right" : "protected final String parseMediumName2(int q3, final int q2) throws IOException",
      "info" : "MethodDeclaration[59641-60981]:MethodDeclaration[59835-61175]"
    }, {
      "left" : "protected final String parseLongName(int q, final int q2, int q3) throws IOException",
      "right" : "protected final String parseLongName(int q, final int q2, int q3) throws IOException",
      "info" : "MethodDeclaration[60991-63114]:MethodDeclaration[61185-63308]"
    }, {
      "left" : "protected String slowParseName() throws IOException",
      "right" : "protected String slowParseName() throws IOException",
      "info" : "MethodDeclaration[63120-63746]:MethodDeclaration[63314-63940]"
    }, {
      "left" : "private final String parseName(int q1, int ch, int lastQuadBytes) throws IOException",
      "right" : "private final String parseName(int q1, int ch, int lastQuadBytes) throws IOException",
      "info" : "MethodDeclaration[63752-63916]:MethodDeclaration[63946-64110]"
    }, {
      "left" : "private final String parseName(int q1, int q2, int ch, int lastQuadBytes) throws IOException",
      "right" : "private final String parseName(int q1, int q2, int ch, int lastQuadBytes) throws IOException",
      "info" : "MethodDeclaration[63922-64123]:MethodDeclaration[64116-64317]"
    }, {
      "left" : "private final String parseName(int q1, int q2, int q3, int ch, int lastQuadBytes) throws IOException",
      "right" : "private final String parseName(int q1, int q2, int q3, int ch, int lastQuadBytes) throws IOException",
      "info" : "MethodDeclaration[64129-64367]:MethodDeclaration[64323-64561]"
    }, {
      "left" : "protected final String parseEscapedName(int[] quads, int qlen, int currQuad, int ch,\n            int currQuadBytes) throws IOException",
      "right" : "protected final String parseEscapedName(int[] quads, int qlen, int currQuad, int ch,\n            int currQuadBytes) throws IOException",
      "info" : "MethodDeclaration[64377-68625]:MethodDeclaration[64571-68819]"
    }, {
      "left" : "protected String _handleOddName(int ch) throws IOException",
      "right" : "protected String _handleOddName(int ch) throws IOException",
      "info" : "MethodDeclaration[68631-71419]:MethodDeclaration[68825-71613]"
    }, {
      "left" : "protected String _parseAposName() throws IOException",
      "right" : "protected String _parseAposName() throws IOException",
      "info" : "MethodDeclaration[71659-75758]:MethodDeclaration[71853-75952]"
    }, {
      "left" : "private final String findName(int q1, int lastQuadBytes) throws JsonParseException",
      "right" : "private final String findName(int q1, int lastQuadBytes) throws JsonParseException",
      "info" : "MethodDeclaration[75956-76413]:MethodDeclaration[76150-76607]"
    }, {
      "left" : "private final String findName(int q1, int q2, int lastQuadBytes) throws JsonParseException",
      "right" : "private final String findName(int q1, int q2, int lastQuadBytes) throws JsonParseException",
      "info" : "MethodDeclaration[76419-76917]:MethodDeclaration[76613-77111]"
    }, {
      "left" : "private final String findName(int q1, int q2, int q3, int lastQuadBytes) throws JsonParseException",
      "right" : "private final String findName(int q1, int q2, int q3, int lastQuadBytes) throws JsonParseException",
      "info" : "MethodDeclaration[76923-77359]:MethodDeclaration[77117-77553]"
    }, {
      "left" : "private final String findName(int[] quads, int qlen, int lastQuad, int lastQuadBytes) throws JsonParseException",
      "right" : "private final String findName(int[] quads, int qlen, int lastQuad, int lastQuadBytes) throws JsonParseException",
      "info" : "MethodDeclaration[77369-77829]:MethodDeclaration[77563-78023]"
    }, {
      "left" : "private final String addName(int[] quads, int qlen, int lastQuadBytes) throws JsonParseException",
      "right" : "private final String addName(int[] quads, int qlen, int lastQuadBytes) throws JsonParseException",
      "info" : "MethodDeclaration[77835-82512]:MethodDeclaration[78029-82706]"
    }, {
      "left" : "protected void _finishString() throws IOException",
      "right" : "protected void _finishString() throws IOException",
      "info" : "MethodDeclaration[82708-83729]:MethodDeclaration[82902-83923]"
    }, {
      "left" : "protected String _finishAndReturnString() throws IOException",
      "right" : "protected String _finishAndReturnString() throws IOException",
      "info" : "MethodDeclaration[83735-84816]:MethodDeclaration[83929-85010]"
    }, {
      "left" : "private final void _finishString2(char[] outBuf, int outPtr)\n        throws IOException",
      "right" : "private final void _finishString2(char[] outBuf, int outPtr)\n        throws IOException",
      "info" : "MethodDeclaration[84826-87741]:MethodDeclaration[85020-87935]"
    }, {
      "left" : "protected void _skipString() throws IOException",
      "right" : "protected void _skipString() throws IOException",
      "info" : "MethodDeclaration[87747-89718]:MethodDeclaration[87941-89912]"
    }, {
      "left" : "protected JsonToken _handleUnexpectedValue(int c)\n        throws IOException",
      "right" : "protected JsonToken _handleUnexpectedValue(int c)\n        throws IOException",
      "info" : "MethodDeclaration[89724-91770]:MethodDeclaration[89918-91964]"
    }, {
      "left" : "protected JsonToken _handleApos()\n        throws IOException",
      "right" : "protected JsonToken _handleApos()\n        throws IOException",
      "info" : "MethodDeclaration[91776-94877]:MethodDeclaration[91970-95071]"
    }, {
      "left" : "protected JsonToken _handleInvalidNumberStart(int ch, boolean neg)\n        throws IOException",
      "right" : "protected JsonToken _handleInvalidNumberStart(int ch, boolean neg)\n        throws IOException",
      "info" : "MethodDeclaration[94887-96069]:MethodDeclaration[95081-96263]"
    }, {
      "left" : "protected final void _matchToken(String matchStr, int i) throws IOException",
      "right" : "protected final void _matchToken(String matchStr, int i) throws IOException",
      "info" : "MethodDeclaration[96075-96715]:MethodDeclaration[96269-96909]"
    }, {
      "left" : "private final void _matchToken2(String matchStr, int i) throws IOException",
      "right" : "private final void _matchToken2(String matchStr, int i) throws IOException",
      "info" : "MethodDeclaration[96721-97468]:MethodDeclaration[96915-97662]"
    }, {
      "left" : "private final void _checkMatchEnd(String matchStr, int i, int ch) throws IOException",
      "right" : "private final void _checkMatchEnd(String matchStr, int i, int ch) throws IOException",
      "info" : "MethodDeclaration[97474-97788]:MethodDeclaration[97668-97982]"
    }, {
      "left" : "private final int _skipWS() throws IOException",
      "right" : "private final int _skipWS() throws IOException",
      "info" : "MethodDeclaration[97996-98752]:MethodDeclaration[98190-98946]"
    }, {
      "left" : "private final int _skipWS2() throws IOException",
      "right" : "private final int _skipWS2() throws IOException",
      "info" : "MethodDeclaration[98758-99759]:MethodDeclaration[98952-99953]"
    }, {
      "left" : "private final int _skipWSOrEnd() throws IOException",
      "right" : "private final int _skipWSOrEnd() throws IOException",
      "info" : "MethodDeclaration[99769-101385]:MethodDeclaration[99963-101579]"
    }, {
      "left" : "private final int _skipWSOrEnd2() throws IOException",
      "right" : "private final int _skipWSOrEnd2() throws IOException",
      "info" : "MethodDeclaration[101391-102336]:MethodDeclaration[101585-102530]"
    }, {
      "left" : "private final int _skipColon() throws IOException",
      "right" : "private final int _skipColon() throws IOException",
      "info" : "MethodDeclaration[102342-104261]:MethodDeclaration[102536-104455]"
    }, {
      "left" : "private final int _skipColon2(boolean gotColon) throws IOException",
      "right" : "private final int _skipColon2(boolean gotColon) throws IOException",
      "info" : "MethodDeclaration[104271-105634]:MethodDeclaration[104465-105828]"
    }, {
      "left" : "private final void _skipComment() throws IOException",
      "right" : "private final void _skipComment() throws IOException",
      "info" : "MethodDeclaration[105640-106358]:MethodDeclaration[105834-106552]"
    }, {
      "left" : "private final void _skipCComment() throws IOException",
      "right" : "private final void _skipCComment() throws IOException",
      "info" : "MethodDeclaration[106364-107924]:MethodDeclaration[106558-108118]"
    }, {
      "left" : "private final boolean _skipYAMLComment() throws IOException",
      "right" : "private final boolean _skipYAMLComment() throws IOException",
      "info" : "MethodDeclaration[107930-108134]:MethodDeclaration[108124-108328]"
    }, {
      "left" : "private final void _skipLine() throws IOException",
      "right" : "private final void _skipLine() throws IOException",
      "info" : "MethodDeclaration[108140-109495]:MethodDeclaration[108334-109689]"
    }, {
      "left" : "protected char _decodeEscaped() throws IOException",
      "right" : "protected char _decodeEscaped() throws IOException",
      "info" : "MethodDeclaration[109505-111005]:MethodDeclaration[109699-111199]"
    }, {
      "left" : "protected int _decodeCharForError(int firstByte) throws IOException",
      "right" : "protected int _decodeCharForError(int firstByte) throws IOException",
      "info" : "MethodDeclaration[111011-112615]:MethodDeclaration[111205-112809]"
    }, {
      "left" : "private final int _decodeUtf8_2(int c) throws IOException",
      "right" : "private final int _decodeUtf8_2(int c) throws IOException",
      "info" : "MethodDeclaration[112803-113149]:MethodDeclaration[112997-113343]"
    }, {
      "left" : "private final int _decodeUtf8_3(int c1) throws IOException",
      "right" : "private final int _decodeUtf8_3(int c1) throws IOException",
      "info" : "MethodDeclaration[113155-113794]:MethodDeclaration[113349-113988]"
    }, {
      "left" : "private final int _decodeUtf8_3fast(int c1) throws IOException",
      "right" : "private final int _decodeUtf8_3fast(int c1) throws IOException",
      "info" : "MethodDeclaration[113800-114279]:MethodDeclaration[113994-114473]"
    }, {
      "left" : "private final int _decodeUtf8_4(int c) throws IOException",
      "right" : "private final int _decodeUtf8_4(int c) throws IOException",
      "info" : "MethodDeclaration[114285-115433]:MethodDeclaration[114479-115627]"
    }, {
      "left" : "private final void _skipUtf8_2(int c) throws IOException",
      "right" : "private final void _skipUtf8_2(int c) throws IOException",
      "info" : "MethodDeclaration[115439-115733]:MethodDeclaration[115633-115927]"
    }, {
      "left" : "private final void _skipUtf8_3(int c) throws IOException",
      "right" : "private final void _skipUtf8_3(int c) throws IOException",
      "info" : "MethodDeclaration[115845-116386]:MethodDeclaration[116039-116580]"
    }, {
      "left" : "private final void _skipUtf8_4(int c) throws IOException",
      "right" : "private final void _skipUtf8_4(int c) throws IOException",
      "info" : "MethodDeclaration[116392-117142]:MethodDeclaration[116586-117336]"
    }, {
      "left" : "protected final void _skipCR() throws IOException",
      "right" : "protected final void _skipCR() throws IOException",
      "info" : "MethodDeclaration[117331-117733]:MethodDeclaration[117525-117927]"
    }, {
      "left" : "private int nextByte() throws IOException",
      "right" : "private int nextByte() throws IOException",
      "info" : "MethodDeclaration[117743-117927]:MethodDeclaration[117937-118121]"
    }, {
      "left" : "protected void _reportInvalidToken(String matchedPart) throws IOException",
      "right" : "protected void _reportInvalidToken(String matchedPart) throws IOException",
      "info" : "MethodDeclaration[118118-118282]:MethodDeclaration[118312-118476]"
    }, {
      "left" : "protected void _reportInvalidToken(String matchedPart, String msg) throws IOException",
      "right" : "protected void _reportInvalidToken(String matchedPart, String msg) throws IOException",
      "info" : "MethodDeclaration[118288-119096]:MethodDeclaration[118482-119290]"
    }, {
      "left" : "protected void _reportInvalidChar(int c)\n        throws JsonParseException",
      "right" : "protected void _reportInvalidChar(int c)\n        throws JsonParseException",
      "info" : "MethodDeclaration[119110-119361]:MethodDeclaration[119304-119555]"
    }, {
      "left" : "protected void _reportInvalidInitial(int mask)\n        throws JsonParseException",
      "right" : "protected void _reportInvalidInitial(int mask)\n        throws JsonParseException",
      "info" : "MethodDeclaration[119367-119538]:MethodDeclaration[119561-119732]"
    }, {
      "left" : "protected void _reportInvalidOther(int mask)\n        throws JsonParseException",
      "right" : "protected void _reportInvalidOther(int mask)\n        throws JsonParseException",
      "info" : "MethodDeclaration[119544-119714]:MethodDeclaration[119738-119908]"
    }, {
      "left" : "protected void _reportInvalidOther(int mask, int ptr)\n        throws JsonParseException",
      "right" : "protected void _reportInvalidOther(int mask, int ptr)\n        throws JsonParseException",
      "info" : "MethodDeclaration[119720-119879]:MethodDeclaration[119914-120073]"
    }, {
      "left" : "public static int[] growArrayBy(int[] arr, int more)",
      "right" : "public static int[] growArrayBy(int[] arr, int more)",
      "info" : "MethodDeclaration[119885-120074]:MethodDeclaration[120079-120268]"
    }, {
      "left" : "protected final byte[] _decodeBase64(Base64Variant b64variant) throws IOException",
      "right" : "protected final byte[] _decodeBase64(Base64Variant b64variant) throws IOException",
      "info" : "MethodDeclaration[120263-124936]:MethodDeclaration[120457-125130]"
    }, {
      "left" : "private final static int pad(int q, int bytes)",
      "right" : "private final static int pad(int q, int bytes)",
      "info" : "MethodDeclaration[125117-125323]:MethodDeclaration[125311-125517]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3556-3953]:Block[3556-3953]"
    }, {
      "left" : "super(ctxt, features);",
      "right" : "super(ctxt, features);",
      "info" : "SuperConstructorInvocation[3566-3588]:SuperConstructorInvocation[3566-3588]"
    }, {
      "left" : "_inputStream = in;",
      "right" : "_inputStream = in;",
      "info" : "ExpressionStatement[3597-3615]:ExpressionStatement[3597-3615]"
    }, {
      "left" : "_objectCodec = codec;",
      "right" : "_objectCodec = codec;",
      "info" : "ExpressionStatement[3624-3645]:ExpressionStatement[3624-3645]"
    }, {
      "left" : "_symbols = sym;",
      "right" : "_symbols = sym;",
      "info" : "ExpressionStatement[3654-3669]:ExpressionStatement[3654-3669]"
    }, {
      "left" : "_inputBuffer = inputBuffer;",
      "right" : "_inputBuffer = inputBuffer;",
      "info" : "ExpressionStatement[3678-3705]:ExpressionStatement[3678-3705]"
    }, {
      "left" : "_inputPtr = start;",
      "right" : "_inputPtr = start;",
      "info" : "ExpressionStatement[3714-3732]:ExpressionStatement[3714-3732]"
    }, {
      "left" : "_inputEnd = end;",
      "right" : "_inputEnd = end;",
      "info" : "ExpressionStatement[3741-3757]:ExpressionStatement[3741-3757]"
    }, {
      "left" : "_currInputRowStart = start;",
      "right" : "_currInputRowStart = start;",
      "info" : "ExpressionStatement[3766-3793]:ExpressionStatement[3766-3793]"
    }, {
      "left" : "_currInputProcessed = -start;",
      "right" : "_currInputProcessed = -start;",
      "info" : "ExpressionStatement[3872-3901]:ExpressionStatement[3872-3901]"
    }, {
      "left" : "_bufferRecyclable = bufferRecyclable;",
      "right" : "_bufferRecyclable = bufferRecyclable;",
      "info" : "ExpressionStatement[3910-3947]:ExpressionStatement[3910-3947]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4003-4039]:Block[4003-4039]"
    }, {
      "left" : "return _objectCodec;",
      "right" : "return _objectCodec;",
      "info" : "ReturnStatement[4013-4033]:ReturnStatement[4013-4033]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4095-4128]:Block[4095-4128]"
    }, {
      "left" : "_objectCodec = c;",
      "right" : "_objectCodec = c;",
      "info" : "ExpressionStatement[4105-4122]:ExpressionStatement[4105-4122]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4396-4648]:Block[4396-4648]"
    }, {
      "left" : "int count = _inputEnd - _inputPtr;",
      "right" : "int count = _inputEnd - _inputPtr;",
      "info" : "VariableDeclarationStatement[4406-4440]:VariableDeclarationStatement[4406-4440]"
    }, {
      "left" : "if (count < 1)",
      "right" : "if (count < 1)",
      "info" : "IfStatement[4449-4497]:IfStatement[4449-4497]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4464-4497]:Block[4464-4497]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[4478-4487]:ReturnStatement[4478-4487]"
    }, {
      "left" : "int origPtr = _inputPtr;",
      "right" : "int origPtr = _inputPtr;",
      "info" : "VariableDeclarationStatement[4547-4571]:VariableDeclarationStatement[4547-4571]"
    }, {
      "left" : "out.write(_inputBuffer, origPtr, count);",
      "right" : "out.write(_inputBuffer, origPtr, count);",
      "info" : "ExpressionStatement[4580-4620]:ExpressionStatement[4580-4620]"
    }, {
      "left" : "return count;",
      "right" : "return count;",
      "info" : "ReturnStatement[4629-4642]:ReturnStatement[4629-4642]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4699-4735]:Block[4699-4735]"
    }, {
      "left" : "return _inputStream;",
      "right" : "return _inputStream;",
      "info" : "ReturnStatement[4709-4729]:ReturnStatement[4709-4729]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4997-5823]:Block[4997-5823]"
    }, {
      "left" : "_currInputProcessed += _inputEnd;",
      "right" : "_currInputProcessed += _inputEnd;",
      "info" : "ExpressionStatement[5007-5040]:ExpressionStatement[5007-5040]"
    }, {
      "left" : "_currInputRowStart -= _inputEnd;",
      "right" : "_currInputRowStart -= _inputEnd;",
      "info" : "ExpressionStatement[5049-5081]:ExpressionStatement[5049-5081]"
    }, {
      "left" : "if (_inputStream != null)",
      "right" : "if (_inputStream != null)",
      "info" : "IfStatement[5099-5795]:IfStatement[5099-5795]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5125-5795]:Block[5125-5795]"
    }, {
      "left" : "int space = _inputBuffer.length;",
      "right" : "int space = _inputBuffer.length;",
      "info" : "VariableDeclarationStatement[5139-5171]:VariableDeclarationStatement[5139-5171]"
    }, {
      "left" : "if (space == 0)",
      "right" : "if (space == 0)",
      "info" : "IfStatement[5184-5283]:IfStatement[5184-5283]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5200-5283]:Block[5200-5283]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[5256-5269]:ReturnStatement[5256-5269]"
    }, {
      "left" : "int count = _inputStream.read(_inputBuffer, 0, space);",
      "right" : "int count = _inputStream.read(_inputBuffer, 0, space);",
      "info" : "VariableDeclarationStatement[5309-5363]:VariableDeclarationStatement[5309-5363]"
    }, {
      "left" : "if (count > 0)",
      "right" : "if (count > 0)",
      "info" : "IfStatement[5376-5501]:IfStatement[5376-5501]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5391-5501]:Block[5391-5501]"
    }, {
      "left" : "_inputPtr = 0;",
      "right" : "_inputPtr = 0;",
      "info" : "ExpressionStatement[5409-5423]:ExpressionStatement[5409-5423]"
    }, {
      "left" : "_inputEnd = count;",
      "right" : "_inputEnd = count;",
      "info" : "ExpressionStatement[5440-5458]:ExpressionStatement[5440-5458]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[5475-5487]:ReturnStatement[5475-5487]"
    }, {
      "left" : "_closeInput();",
      "right" : "_closeInput();",
      "info" : "ExpressionStatement[5542-5556]:ExpressionStatement[5542-5556]"
    }, {
      "left" : "if (count == 0)",
      "right" : "if (count == 0)",
      "info" : "IfStatement[5621-5785]:IfStatement[5621-5785]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5637-5785]:Block[5637-5785]"
    }, {
      "left" : "throw new IOException(\"InputStream.read() returned 0 characters when trying to read \"+_inputBuffer.length+\" bytes\");",
      "right" : "throw new IOException(\"InputStream.read() returned 0 characters when trying to read \"+_inputBuffer.length+\" bytes\");",
      "info" : "ThrowStatement[5655-5771]:ThrowStatement[5655-5771]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[5804-5817]:ReturnStatement[5804-5817]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6078-7243]:Block[6078-7243]"
    }, {
      "left" : "if (_inputStream == null)",
      "right" : "if (_inputStream == null)",
      "info" : "IfStatement[6183-6246]:IfStatement[6183-6246]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6209-6246]:Block[6209-6246]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[6223-6236]:ReturnStatement[6223-6236]"
    }, {
      "left" : "int amount = _inputEnd - _inputPtr;",
      "right" : "int amount = _inputEnd - _inputPtr;",
      "info" : "VariableDeclarationStatement[6304-6339]:VariableDeclarationStatement[6304-6339]"
    }, {
      "left" : "if (amount > 0 && _inputPtr > 0)",
      "right" : "if (amount > 0 && _inputPtr > 0)",
      "info" : "IfStatement[6348-6639]:IfStatement[6348-6639]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6381-6595]:Block[6381-6595]"
    }, {
      "left" : "_currInputProcessed += _inputPtr;",
      "right" : "_currInputProcessed += _inputPtr;",
      "info" : "ExpressionStatement[6395-6428]:ExpressionStatement[6395-6428]"
    }, {
      "left" : "_currInputRowStart -= _inputPtr;",
      "right" : "_currInputRowStart -= _inputPtr;",
      "info" : "ExpressionStatement[6441-6473]:ExpressionStatement[6441-6473]"
    }, {
      "left" : "System.arraycopy(_inputBuffer, _inputPtr, _inputBuffer, 0, amount);",
      "right" : "System.arraycopy(_inputBuffer, _inputPtr, _inputBuffer, 0, amount);",
      "info" : "ExpressionStatement[6486-6553]:ExpressionStatement[6486-6553]"
    }, {
      "left" : "_inputEnd = amount;",
      "right" : "_inputEnd = amount;",
      "info" : "ExpressionStatement[6566-6585]:ExpressionStatement[6566-6585]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6601-6639]:Block[6601-6639]"
    }, {
      "left" : "_inputEnd = 0;",
      "right" : "_inputEnd = 0;",
      "info" : "ExpressionStatement[6615-6629]:ExpressionStatement[6615-6629]"
    }, {
      "left" : "_inputPtr = 0;",
      "right" : "_inputPtr = 0;",
      "info" : "ExpressionStatement[6648-6662]:ExpressionStatement[6648-6662]"
    }, {
      "left" : "while (_inputEnd < minAvailable)",
      "right" : "while (_inputEnd < minAvailable)",
      "info" : "WhileStatement[6671-7216]:WhileStatement[6671-7216]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6704-7216]:Block[6704-7216]"
    }, {
      "left" : "int count = _inputStream.read(_inputBuffer, _inputEnd, _inputBuffer.length - _inputEnd);",
      "right" : "int count = _inputStream.read(_inputBuffer, _inputEnd, _inputBuffer.length - _inputEnd);",
      "info" : "VariableDeclarationStatement[6718-6806]:VariableDeclarationStatement[6718-6806]"
    }, {
      "left" : "if (count < 1)",
      "right" : "if (count < 1)",
      "info" : "IfStatement[6819-7174]:IfStatement[6819-7174]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6834-7174]:Block[6834-7174]"
    }, {
      "left" : "_closeInput();",
      "right" : "_closeInput();",
      "info" : "ExpressionStatement[6884-6898]:ExpressionStatement[6884-6898]"
    }, {
      "left" : "if (count == 0)",
      "right" : "if (count == 0)",
      "info" : "IfStatement[6971-7130]:IfStatement[6971-7130]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6987-7130]:Block[6987-7130]"
    }, {
      "left" : "throw new IOException(\"InputStream.read() returned 0 characters when trying to read \"+amount+\" bytes\");",
      "right" : "throw new IOException(\"InputStream.read() returned 0 characters when trying to read \"+amount+\" bytes\");",
      "info" : "ThrowStatement[7009-7112]:ThrowStatement[7009-7112]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[7147-7160]:ReturnStatement[7147-7160]"
    }, {
      "left" : "_inputEnd += count;",
      "right" : "_inputEnd += count;",
      "info" : "ExpressionStatement[7187-7206]:ExpressionStatement[7187-7206]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[7225-7237]:ReturnStatement[7225-7237]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7319-7750]:Block[7319-7750]"
    }, {
      "left" : "if (_inputStream != null)",
      "right" : "if (_inputStream != null)",
      "info" : "IfStatement[7532-7744]:IfStatement[7532-7744]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7558-7744]:Block[7558-7744]"
    }, {
      "left" : "if (_ioContext.isResourceManaged() || isEnabled(Feature.AUTO_CLOSE_SOURCE))",
      "right" : "if (_ioContext.isResourceManaged() || isEnabled(Feature.AUTO_CLOSE_SOURCE))",
      "info" : "IfStatement[7572-7701]:IfStatement[7572-7701]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7648-7701]:Block[7648-7701]"
    }, {
      "left" : "_inputStream.close();",
      "right" : "_inputStream.close();",
      "info" : "ExpressionStatement[7666-7687]:ExpressionStatement[7666-7687]"
    }, {
      "left" : "_inputStream = null;",
      "right" : "_inputStream = null;",
      "info" : "ExpressionStatement[7714-7734]:ExpressionStatement[7714-7734]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8078-8671]:Block[8078-8671]"
    }, {
      "left" : "super._releaseBuffers();",
      "right" : "super._releaseBuffers();",
      "info" : "ExpressionStatement[8088-8112]:ExpressionStatement[8088-8112]"
    }, {
      "left" : "_symbols.release();",
      "right" : "_symbols.release();",
      "info" : "ExpressionStatement[8161-8180]:ExpressionStatement[8161-8180]"
    }, {
      "left" : "if (_bufferRecyclable)",
      "right" : "if (_bufferRecyclable)",
      "info" : "IfStatement[8189-8665]:IfStatement[8189-8665]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8212-8665]:Block[8212-8665]"
    }, {
      "left" : "byte[] buf = _inputBuffer;",
      "right" : "byte[] buf = _inputBuffer;",
      "info" : "VariableDeclarationStatement[8226-8252]:VariableDeclarationStatement[8226-8252]"
    }, {
      "left" : "if (buf != null)",
      "right" : "if (buf != null)",
      "info" : "IfStatement[8265-8655]:IfStatement[8265-8655]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8282-8655]:Block[8282-8655]"
    }, {
      "left" : "_inputBuffer = ByteArrayBuilder.NO_BYTES;",
      "right" : "_inputBuffer = ByteArrayBuilder.NO_BYTES;",
      "info" : "ExpressionStatement[8547-8588]:ExpressionStatement[8547-8588]"
    }, {
      "left" : "_ioContext.releaseReadIOBuffer(buf);",
      "right" : "_ioContext.releaseReadIOBuffer(buf);",
      "info" : "ExpressionStatement[8605-8641]:ExpressionStatement[8605-8641]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8913-9246]:Block[8913-9246]"
    }, {
      "left" : "if (_currToken == JsonToken.VALUE_STRING)",
      "right" : "if (_currToken == JsonToken.VALUE_STRING)",
      "info" : "IfStatement[8923-9202]:IfStatement[8923-9202]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8965-9202]:Block[8965-9202]"
    }, {
      "left" : "if (_tokenIncomplete)",
      "right" : "if (_tokenIncomplete)",
      "info" : "IfStatement[8979-9141]:IfStatement[8979-9141]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9001-9141]:Block[9001-9141]"
    }, {
      "left" : "_tokenIncomplete = false;",
      "right" : "_tokenIncomplete = false;",
      "info" : "ExpressionStatement[9019-9044]:ExpressionStatement[9019-9044]"
    }, {
      "left" : "return _finishAndReturnString();",
      "right" : "return _finishAndReturnString();",
      "info" : "ReturnStatement[9061-9093]:ReturnStatement[9061-9093]"
    }, {
      "left" : "return _textBuffer.contentsAsString();",
      "right" : "return _textBuffer.contentsAsString();",
      "info" : "ReturnStatement[9154-9192]:ReturnStatement[9154-9192]"
    }, {
      "left" : "return _getText2(_currToken);",
      "right" : "return _getText2(_currToken);",
      "info" : "ReturnStatement[9211-9240]:ReturnStatement[9211-9240]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9412-9752]:Block[9412-9849]"
    }, {
      "left" : "if (_currToken == JsonToken.VALUE_STRING)",
      "right" : "if (_currToken == JsonToken.VALUE_STRING)",
      "info" : "IfStatement[9422-9701]:IfStatement[9422-9701]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9464-9701]:Block[9464-9701]"
    }, {
      "left" : "if (_tokenIncomplete)",
      "right" : "if (_tokenIncomplete)",
      "info" : "IfStatement[9478-9640]:IfStatement[9478-9640]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9500-9640]:Block[9500-9640]"
    }, {
      "left" : "_tokenIncomplete = false;",
      "right" : "_tokenIncomplete = false;",
      "info" : "ExpressionStatement[9518-9543]:ExpressionStatement[9518-9543]"
    }, {
      "left" : "return _finishAndReturnString();",
      "right" : "return _finishAndReturnString();",
      "info" : "ReturnStatement[9560-9592]:ReturnStatement[9560-9592]"
    }, {
      "left" : "return _textBuffer.contentsAsString();",
      "right" : "return _textBuffer.contentsAsString();",
      "info" : "ReturnStatement[9653-9691]:ReturnStatement[9653-9691]"
    }, {
      "left" : "return super.getValueAsString(null);",
      "right" : "return super.getValueAsString(null);",
      "info" : "ReturnStatement[9710-9746]:ReturnStatement[9807-9843]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9865-10209]:Block[9962-10403]"
    }, {
      "left" : "if (_currToken == JsonToken.VALUE_STRING)",
      "right" : "if (_currToken == JsonToken.VALUE_STRING)",
      "info" : "IfStatement[9875-10154]:IfStatement[9972-10251]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9917-10154]:Block[10014-10251]"
    }, {
      "left" : "if (_tokenIncomplete)",
      "right" : "if (_tokenIncomplete)",
      "info" : "IfStatement[9931-10093]:IfStatement[10028-10190]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9953-10093]:Block[10050-10190]"
    }, {
      "left" : "_tokenIncomplete = false;",
      "right" : "_tokenIncomplete = false;",
      "info" : "ExpressionStatement[9971-9996]:ExpressionStatement[10068-10093]"
    }, {
      "left" : "return _finishAndReturnString();",
      "right" : "return _finishAndReturnString();",
      "info" : "ReturnStatement[10013-10045]:ReturnStatement[10110-10142]"
    }, {
      "left" : "return _textBuffer.contentsAsString();",
      "right" : "return _textBuffer.contentsAsString();",
      "info" : "ReturnStatement[10106-10144]:ReturnStatement[10203-10241]"
    }, {
      "left" : "return super.getValueAsString(defValue);",
      "right" : "return super.getValueAsString(defValue);",
      "info" : "ReturnStatement[10163-10203]:ReturnStatement[10357-10397]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10296-10837]:Block[10490-11031]"
    }, {
      "left" : "JsonToken t = _currToken;",
      "right" : "JsonToken t = _currToken;",
      "info" : "VariableDeclarationStatement[10306-10331]:VariableDeclarationStatement[10500-10525]"
    }, {
      "left" : "if ((t == JsonToken.VALUE_NUMBER_INT) || (t == JsonToken.VALUE_NUMBER_FLOAT))",
      "right" : "if ((t == JsonToken.VALUE_NUMBER_INT) || (t == JsonToken.VALUE_NUMBER_FLOAT))",
      "info" : "IfStatement[10340-10792]:IfStatement[10534-10986]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10418-10792]:Block[10612-10986]"
    }, {
      "left" : "if ((_numTypesValid & NR_INT) == 0)",
      "right" : "if ((_numTypesValid & NR_INT) == 0)",
      "info" : "IfStatement[10471-10751]:IfStatement[10665-10945]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10507-10751]:Block[10701-10945]"
    }, {
      "left" : "if (_numTypesValid == NR_UNKNOWN)",
      "right" : "if (_numTypesValid == NR_UNKNOWN)",
      "info" : "IfStatement[10525-10623]:IfStatement[10719-10817]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10559-10623]:Block[10753-10817]"
    }, {
      "left" : "return _parseIntValue();",
      "right" : "return _parseIntValue();",
      "info" : "ReturnStatement[10581-10605]:ReturnStatement[10775-10799]"
    }, {
      "left" : "if ((_numTypesValid & NR_INT) == 0)",
      "right" : "if ((_numTypesValid & NR_INT) == 0)",
      "info" : "IfStatement[10640-10737]:IfStatement[10834-10931]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10676-10737]:Block[10870-10931]"
    }, {
      "left" : "convertNumberToInt();",
      "right" : "convertNumberToInt();",
      "info" : "ExpressionStatement[10698-10719]:ExpressionStatement[10892-10913]"
    }, {
      "left" : "return _numberInt;",
      "right" : "return _numberInt;",
      "info" : "ReturnStatement[10764-10782]:ReturnStatement[10958-10976]"
    }, {
      "left" : "return super.getValueAsInt(0);",
      "right" : "return super.getValueAsInt(0);",
      "info" : "ReturnStatement[10801-10831]:ReturnStatement[10995-11025]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10936-11484]:Block[11130-11678]"
    }, {
      "left" : "JsonToken t = _currToken;",
      "right" : "JsonToken t = _currToken;",
      "info" : "VariableDeclarationStatement[10946-10971]:VariableDeclarationStatement[11140-11165]"
    }, {
      "left" : "if ((t == JsonToken.VALUE_NUMBER_INT) || (t == JsonToken.VALUE_NUMBER_FLOAT))",
      "right" : "if ((t == JsonToken.VALUE_NUMBER_INT) || (t == JsonToken.VALUE_NUMBER_FLOAT))",
      "info" : "IfStatement[10980-11432]:IfStatement[11174-11626]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11058-11432]:Block[11252-11626]"
    }, {
      "left" : "if ((_numTypesValid & NR_INT) == 0)",
      "right" : "if ((_numTypesValid & NR_INT) == 0)",
      "info" : "IfStatement[11111-11391]:IfStatement[11305-11585]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11147-11391]:Block[11341-11585]"
    }, {
      "left" : "if (_numTypesValid == NR_UNKNOWN)",
      "right" : "if (_numTypesValid == NR_UNKNOWN)",
      "info" : "IfStatement[11165-11263]:IfStatement[11359-11457]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11199-11263]:Block[11393-11457]"
    }, {
      "left" : "return _parseIntValue();",
      "right" : "return _parseIntValue();",
      "info" : "ReturnStatement[11221-11245]:ReturnStatement[11415-11439]"
    }, {
      "left" : "if ((_numTypesValid & NR_INT) == 0)",
      "right" : "if ((_numTypesValid & NR_INT) == 0)",
      "info" : "IfStatement[11280-11377]:IfStatement[11474-11571]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11316-11377]:Block[11510-11571]"
    }, {
      "left" : "convertNumberToInt();",
      "right" : "convertNumberToInt();",
      "info" : "ExpressionStatement[11338-11359]:ExpressionStatement[11532-11553]"
    }, {
      "left" : "return _numberInt;",
      "right" : "return _numberInt;",
      "info" : "ReturnStatement[11404-11422]:ReturnStatement[11598-11616]"
    }, {
      "left" : "return super.getValueAsInt(defValue);",
      "right" : "return super.getValueAsInt(defValue);",
      "info" : "ReturnStatement[11441-11478]:ReturnStatement[11635-11672]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11544-11937]:Block[11738-12131]"
    }, {
      "left" : "if (t == null)",
      "right" : "if (t == null)",
      "info" : "IfStatement[11554-11605]:IfStatement[11748-11799]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11569-11605]:Block[11763-11799]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[11583-11595]:ReturnStatement[11777-11789]"
    }, {
      "left" : "switch (t.id()) {\n        case ID_FIELD_NAME:\n            return _parsingContext.getCurrentName();\n\n        case ID_STRING:\n            // fall through\n        case ID_NUMBER_INT:\n        case ID_NUMBER_FLOAT:\n            return _textBuffer.contentsAsString();\n        default:\n        \treturn t.asString();\n        }",
      "right" : "switch (t.id()) {\n        case ID_FIELD_NAME:\n            return _parsingContext.getCurrentName();\n\n        case ID_STRING:\n            // fall through\n        case ID_NUMBER_INT:\n        case ID_NUMBER_FLOAT:\n            return _textBuffer.contentsAsString();\n        default:\n        \treturn t.asString();\n        }",
      "info" : "SwitchStatement[11614-11931]:SwitchStatement[11808-12125]"
    }, {
      "left" : "case ID_FIELD_NAME:",
      "right" : "case ID_FIELD_NAME:",
      "info" : "SwitchCase[11640-11659]:SwitchCase[11834-11853]"
    }, {
      "left" : "return _parsingContext.getCurrentName();",
      "right" : "return _parsingContext.getCurrentName();",
      "info" : "ReturnStatement[11672-11712]:ReturnStatement[11866-11906]"
    }, {
      "left" : "case ID_STRING:",
      "right" : "case ID_STRING:",
      "info" : "SwitchCase[11722-11737]:SwitchCase[11916-11931]"
    }, {
      "left" : "case ID_NUMBER_INT:",
      "right" : "case ID_NUMBER_INT:",
      "info" : "SwitchCase[11774-11793]:SwitchCase[11968-11987]"
    }, {
      "left" : "case ID_NUMBER_FLOAT:",
      "right" : "case ID_NUMBER_FLOAT:",
      "info" : "SwitchCase[11802-11823]:SwitchCase[11996-12017]"
    }, {
      "left" : "return _textBuffer.contentsAsString();",
      "right" : "return _textBuffer.contentsAsString();",
      "info" : "ReturnStatement[11836-11874]:ReturnStatement[12030-12068]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[11883-11891]:SwitchCase[12077-12085]"
    }, {
      "left" : "return t.asString();",
      "right" : "return t.asString();",
      "info" : "ReturnStatement[11901-11921]:ReturnStatement[12095-12115]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12014-13270]:Block[12208-13464]"
    }, {
      "left" : "if (_currToken != null)",
      "right" : "if (_currToken != null)",
      "info" : "IfStatement[12024-13243]:IfStatement[12218-13437]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12048-13243]:Block[12242-13437]"
    }, {
      "left" : "switch (_currToken.id()) {\n                \n            case ID_FIELD_NAME:\n                if (!_nameCopied) {\n                    String name = _parsingContext.getCurrentName();\n                    int nameLen = name.length();\n                    if (_nameCopyBuffer == null) {\n                        _nameCopyBuffer = _ioContext.allocNameCopyBuffer(nameLen);\n                    } else if (_nameCopyBuffer.length < nameLen) {\n                        _nameCopyBuffer = new char[nameLen];\n                    }\n                    name.getChars(0, nameLen, _nameCopyBuffer, 0);\n                    _nameCopied = true;\n                }\n                return _nameCopyBuffer;\n    \n            case ID_STRING:\n                if (_tokenIncomplete) {\n                    _tokenIncomplete = false;\n                    _finishString(); // only strings can be incomplete\n                }\n                // fall through\n            case ID_NUMBER_INT:\n            case ID_NUMBER_FLOAT:\n                return _textBuffer.getTextBuffer();\n                \n            default:\n                return _currToken.asCharArray();\n            }",
      "right" : "switch (_currToken.id()) {\n                \n            case ID_FIELD_NAME:\n                if (!_nameCopied) {\n                    String name = _parsingContext.getCurrentName();\n                    int nameLen = name.length();\n                    if (_nameCopyBuffer == null) {\n                        _nameCopyBuffer = _ioContext.allocNameCopyBuffer(nameLen);\n                    } else if (_nameCopyBuffer.length < nameLen) {\n                        _nameCopyBuffer = new char[nameLen];\n                    }\n                    name.getChars(0, nameLen, _nameCopyBuffer, 0);\n                    _nameCopied = true;\n                }\n                return _nameCopyBuffer;\n    \n            case ID_STRING:\n                if (_tokenIncomplete) {\n                    _tokenIncomplete = false;\n                    _finishString(); // only strings can be incomplete\n                }\n                // fall through\n            case ID_NUMBER_INT:\n            case ID_NUMBER_FLOAT:\n                return _textBuffer.getTextBuffer();\n                \n            default:\n                return _currToken.asCharArray();\n            }",
      "info" : "SwitchStatement[12097-13233]:SwitchStatement[12291-13427]"
    }, {
      "left" : "case ID_FIELD_NAME:",
      "right" : "case ID_FIELD_NAME:",
      "info" : "SwitchCase[12153-12172]:SwitchCase[12347-12366]"
    }, {
      "left" : "if (!_nameCopied)",
      "right" : "if (!_nameCopied)",
      "info" : "IfStatement[12189-12734]:IfStatement[12383-12928]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12207-12734]:Block[12401-12928]"
    }, {
      "left" : "String name = _parsingContext.getCurrentName();",
      "right" : "String name = _parsingContext.getCurrentName();",
      "info" : "VariableDeclarationStatement[12229-12276]:VariableDeclarationStatement[12423-12470]"
    }, {
      "left" : "int nameLen = name.length();",
      "right" : "int nameLen = name.length();",
      "info" : "VariableDeclarationStatement[12297-12325]:VariableDeclarationStatement[12491-12519]"
    }, {
      "left" : "if (_nameCopyBuffer == null)",
      "right" : "if (_nameCopyBuffer == null)",
      "info" : "IfStatement[12346-12609]:IfStatement[12540-12803]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12375-12481]:Block[12569-12675]"
    }, {
      "left" : "_nameCopyBuffer = _ioContext.allocNameCopyBuffer(nameLen);",
      "right" : "_nameCopyBuffer = _ioContext.allocNameCopyBuffer(nameLen);",
      "info" : "ExpressionStatement[12401-12459]:ExpressionStatement[12595-12653]"
    }, {
      "left" : "if (_nameCopyBuffer.length < nameLen)",
      "right" : "if (_nameCopyBuffer.length < nameLen)",
      "info" : "IfStatement[12487-12609]:IfStatement[12681-12803]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12525-12609]:Block[12719-12803]"
    }, {
      "left" : "_nameCopyBuffer = new char[nameLen];",
      "right" : "_nameCopyBuffer = new char[nameLen];",
      "info" : "ExpressionStatement[12551-12587]:ExpressionStatement[12745-12781]"
    }, {
      "left" : "name.getChars(0, nameLen, _nameCopyBuffer, 0);",
      "right" : "name.getChars(0, nameLen, _nameCopyBuffer, 0);",
      "info" : "ExpressionStatement[12630-12676]:ExpressionStatement[12824-12870]"
    }, {
      "left" : "_nameCopied = true;",
      "right" : "_nameCopied = true;",
      "info" : "ExpressionStatement[12697-12716]:ExpressionStatement[12891-12910]"
    }, {
      "left" : "return _nameCopyBuffer;",
      "right" : "return _nameCopyBuffer;",
      "info" : "ReturnStatement[12751-12774]:ReturnStatement[12945-12968]"
    }, {
      "left" : "case ID_STRING:",
      "right" : "case ID_STRING:",
      "info" : "SwitchCase[12792-12807]:SwitchCase[12986-13001]"
    }, {
      "left" : "if (_tokenIncomplete)",
      "right" : "if (_tokenIncomplete)",
      "info" : "IfStatement[12824-12982]:IfStatement[13018-13176]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12846-12982]:Block[13040-13176]"
    }, {
      "left" : "_tokenIncomplete = false;",
      "right" : "_tokenIncomplete = false;",
      "info" : "ExpressionStatement[12868-12893]:ExpressionStatement[13062-13087]"
    }, {
      "left" : "_finishString();",
      "right" : "_finishString();",
      "info" : "ExpressionStatement[12914-12930]:ExpressionStatement[13108-13124]"
    }, {
      "left" : "case ID_NUMBER_INT:",
      "right" : "case ID_NUMBER_INT:",
      "info" : "SwitchCase[13027-13046]:SwitchCase[13221-13240]"
    }, {
      "left" : "case ID_NUMBER_FLOAT:",
      "right" : "case ID_NUMBER_FLOAT:",
      "info" : "SwitchCase[13059-13080]:SwitchCase[13253-13274]"
    }, {
      "left" : "return _textBuffer.getTextBuffer();",
      "right" : "return _textBuffer.getTextBuffer();",
      "info" : "ReturnStatement[13097-13132]:ReturnStatement[13291-13326]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[13162-13170]:SwitchCase[13356-13364]"
    }, {
      "left" : "return _currToken.asCharArray();",
      "right" : "return _currToken.asCharArray();",
      "info" : "ReturnStatement[13187-13219]:ReturnStatement[13381-13413]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[13252-13264]:ReturnStatement[13446-13458]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13340-14050]:Block[13534-14244]"
    }, {
      "left" : "if (_currToken != null)",
      "right" : "if (_currToken != null)",
      "info" : "IfStatement[13350-14026]:IfStatement[13544-14220]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13374-14026]:Block[13568-14220]"
    }, {
      "left" : "switch (_currToken.id()) {\n                \n            case ID_FIELD_NAME:\n                return _parsingContext.getCurrentName().length();\n            case ID_STRING:\n                if (_tokenIncomplete) {\n                    _tokenIncomplete = false;\n                    _finishString(); // only strings can be incomplete\n                }\n                // fall through\n            case ID_NUMBER_INT:\n            case ID_NUMBER_FLOAT:\n                return _textBuffer.size();\n                \n            default:\n                return _currToken.asCharArray().length;\n            }",
      "right" : "switch (_currToken.id()) {\n                \n            case ID_FIELD_NAME:\n                return _parsingContext.getCurrentName().length();\n            case ID_STRING:\n                if (_tokenIncomplete) {\n                    _tokenIncomplete = false;\n                    _finishString(); // only strings can be incomplete\n                }\n                // fall through\n            case ID_NUMBER_INT:\n            case ID_NUMBER_FLOAT:\n                return _textBuffer.size();\n                \n            default:\n                return _currToken.asCharArray().length;\n            }",
      "info" : "SwitchStatement[13423-14016]:SwitchStatement[13617-14210]"
    }, {
      "left" : "case ID_FIELD_NAME:",
      "right" : "case ID_FIELD_NAME:",
      "info" : "SwitchCase[13479-13498]:SwitchCase[13673-13692]"
    }, {
      "left" : "return _parsingContext.getCurrentName().length();",
      "right" : "return _parsingContext.getCurrentName().length();",
      "info" : "ReturnStatement[13515-13564]:ReturnStatement[13709-13758]"
    }, {
      "left" : "case ID_STRING:",
      "right" : "case ID_STRING:",
      "info" : "SwitchCase[13577-13592]:SwitchCase[13771-13786]"
    }, {
      "left" : "if (_tokenIncomplete)",
      "right" : "if (_tokenIncomplete)",
      "info" : "IfStatement[13609-13767]:IfStatement[13803-13961]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13631-13767]:Block[13825-13961]"
    }, {
      "left" : "_tokenIncomplete = false;",
      "right" : "_tokenIncomplete = false;",
      "info" : "ExpressionStatement[13653-13678]:ExpressionStatement[13847-13872]"
    }, {
      "left" : "_finishString();",
      "right" : "_finishString();",
      "info" : "ExpressionStatement[13699-13715]:ExpressionStatement[13893-13909]"
    }, {
      "left" : "case ID_NUMBER_INT:",
      "right" : "case ID_NUMBER_INT:",
      "info" : "SwitchCase[13812-13831]:SwitchCase[14006-14025]"
    }, {
      "left" : "case ID_NUMBER_FLOAT:",
      "right" : "case ID_NUMBER_FLOAT:",
      "info" : "SwitchCase[13844-13865]:SwitchCase[14038-14059]"
    }, {
      "left" : "return _textBuffer.size();",
      "right" : "return _textBuffer.size();",
      "info" : "ReturnStatement[13882-13908]:ReturnStatement[14076-14102]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[13938-13946]:SwitchCase[14132-14140]"
    }, {
      "left" : "return _currToken.asCharArray().length;",
      "right" : "return _currToken.asCharArray().length;",
      "info" : "ReturnStatement[13963-14002]:ReturnStatement[14157-14196]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[14035-14044]:ReturnStatement[14229-14238]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14120-14741]:Block[14314-14935]"
    }, {
      "left" : "if (_currToken != null)",
      "right" : "if (_currToken != null)",
      "info" : "IfStatement[14197-14717]:IfStatement[14391-14911]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14221-14717]:Block[14415-14911]"
    }, {
      "left" : "switch (_currToken.id()) {\n            case ID_FIELD_NAME:\n                return 0;\n            case ID_STRING:\n                if (_tokenIncomplete) {\n                    _tokenIncomplete = false;\n                    _finishString(); // only strings can be incomplete\n                }\n                // fall through\n            case ID_NUMBER_INT:\n            case ID_NUMBER_FLOAT:\n                return _textBuffer.getTextOffset();\n            default:\n            }",
      "right" : "switch (_currToken.id()) {\n            case ID_FIELD_NAME:\n                return 0;\n            case ID_STRING:\n                if (_tokenIncomplete) {\n                    _tokenIncomplete = false;\n                    _finishString(); // only strings can be incomplete\n                }\n                // fall through\n            case ID_NUMBER_INT:\n            case ID_NUMBER_FLOAT:\n                return _textBuffer.getTextOffset();\n            default:\n            }",
      "info" : "SwitchStatement[14235-14707]:SwitchStatement[14429-14901]"
    }, {
      "left" : "case ID_FIELD_NAME:",
      "right" : "case ID_FIELD_NAME:",
      "info" : "SwitchCase[14274-14293]:SwitchCase[14468-14487]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[14310-14319]:ReturnStatement[14504-14513]"
    }, {
      "left" : "case ID_STRING:",
      "right" : "case ID_STRING:",
      "info" : "SwitchCase[14332-14347]:SwitchCase[14526-14541]"
    }, {
      "left" : "if (_tokenIncomplete)",
      "right" : "if (_tokenIncomplete)",
      "info" : "IfStatement[14364-14522]:IfStatement[14558-14716]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14386-14522]:Block[14580-14716]"
    }, {
      "left" : "_tokenIncomplete = false;",
      "right" : "_tokenIncomplete = false;",
      "info" : "ExpressionStatement[14408-14433]:ExpressionStatement[14602-14627]"
    }, {
      "left" : "_finishString();",
      "right" : "_finishString();",
      "info" : "ExpressionStatement[14454-14470]:ExpressionStatement[14648-14664]"
    }, {
      "left" : "case ID_NUMBER_INT:",
      "right" : "case ID_NUMBER_INT:",
      "info" : "SwitchCase[14567-14586]:SwitchCase[14761-14780]"
    }, {
      "left" : "case ID_NUMBER_FLOAT:",
      "right" : "case ID_NUMBER_FLOAT:",
      "info" : "SwitchCase[14599-14620]:SwitchCase[14793-14814]"
    }, {
      "left" : "return _textBuffer.getTextOffset();",
      "right" : "return _textBuffer.getTextOffset();",
      "info" : "ReturnStatement[14637-14672]:ReturnStatement[14831-14866]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[14685-14693]:SwitchCase[14879-14887]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[14726-14735]:ReturnStatement[14920-14929]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14843-16083]:Block[15037-16277]"
    }, {
      "left" : "if (_currToken != JsonToken.VALUE_STRING &&\n                (_currToken != JsonToken.VALUE_EMBEDDED_OBJECT || _binaryValue == null))",
      "right" : "if (_currToken != JsonToken.VALUE_STRING &&\n                (_currToken != JsonToken.VALUE_EMBEDDED_OBJECT || _binaryValue == null))",
      "info" : "IfStatement[14853-15125]:IfStatement[15047-15319]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14986-15125]:Block[15180-15319]"
    }, {
      "left" : "_reportError(\"Current token (\"+_currToken+\") not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary\");",
      "right" : "_reportError(\"Current token (\"+_currToken+\") not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary\");",
      "info" : "ExpressionStatement[15000-15115]:ExpressionStatement[15194-15309]"
    }, {
      "left" : "if (_tokenIncomplete)",
      "right" : "if (_tokenIncomplete)",
      "info" : "IfStatement[15240-16048]:IfStatement[15434-16242]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15262-15709]:Block[15456-15903]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[15276-15524]:TryStatement[15470-15718]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15280-15353]:Block[15474-15547]"
    }, {
      "left" : "_binaryValue = _decodeBase64(b64variant);",
      "right" : "_binaryValue = _decodeBase64(b64variant);",
      "info" : "ExpressionStatement[15298-15339]:ExpressionStatement[15492-15533]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15391-15524]:Block[15585-15718]"
    }, {
      "left" : "throw _constructError(\"Failed to decode VALUE_STRING as base64 (\"+b64variant+\"): \"+iae.getMessage());",
      "right" : "throw _constructError(\"Failed to decode VALUE_STRING as base64 (\"+b64variant+\"): \"+iae.getMessage());",
      "info" : "ThrowStatement[15409-15510]:ThrowStatement[15603-15704]"
    }, {
      "left" : "_tokenIncomplete = false;",
      "right" : "_tokenIncomplete = false;",
      "info" : "ExpressionStatement[15674-15699]:ExpressionStatement[15868-15893]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15715-16048]:Block[15909-16242]"
    }, {
      "left" : "if (_binaryValue == null)",
      "right" : "if (_binaryValue == null)",
      "info" : "IfStatement[15767-16038]:IfStatement[15961-16232]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15793-16038]:Block[15987-16232]"
    }, {
      "left" : "@SuppressWarnings(\"resource\")\n                ByteArrayBuilder builder = _getByteArrayBuilder();",
      "right" : "@SuppressWarnings(\"resource\")\n                ByteArrayBuilder builder = _getByteArrayBuilder();",
      "info" : "VariableDeclarationStatement[15811-15907]:VariableDeclarationStatement[16005-16101]"
    }, {
      "left" : "_decodeBase64(getText(), builder, b64variant);",
      "right" : "_decodeBase64(getText(), builder, b64variant);",
      "info" : "ExpressionStatement[15924-15970]:ExpressionStatement[16118-16164]"
    }, {
      "left" : "_binaryValue = builder.toByteArray();",
      "right" : "_binaryValue = builder.toByteArray();",
      "info" : "ExpressionStatement[15987-16024]:ExpressionStatement[16181-16218]"
    }, {
      "left" : "return _binaryValue;",
      "right" : "return _binaryValue;",
      "info" : "ReturnStatement[16057-16077]:ReturnStatement[16251-16271]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16197-16723]:Block[16391-16917]"
    }, {
      "left" : "if (!_tokenIncomplete || _currToken != JsonToken.VALUE_STRING)",
      "right" : "if (!_tokenIncomplete || _currToken != JsonToken.VALUE_STRING)",
      "info" : "IfStatement[16283-16463]:IfStatement[16477-16657]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16346-16463]:Block[16540-16657]"
    }, {
      "left" : "byte[] b = getBinaryValue(b64variant);",
      "right" : "byte[] b = getBinaryValue(b64variant);",
      "info" : "VariableDeclarationStatement[16360-16398]:VariableDeclarationStatement[16554-16592]"
    }, {
      "left" : "out.write(b);",
      "right" : "out.write(b);",
      "info" : "ExpressionStatement[16411-16424]:ExpressionStatement[16605-16618]"
    }, {
      "left" : "return b.length;",
      "right" : "return b.length;",
      "info" : "ReturnStatement[16437-16453]:ReturnStatement[16631-16647]"
    }, {
      "left" : "byte[] buf = _ioContext.allocBase64Buffer();",
      "right" : "byte[] buf = _ioContext.allocBase64Buffer();",
      "info" : "VariableDeclarationStatement[16526-16570]:VariableDeclarationStatement[16720-16764]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[16579-16717]:TryStatement[16773-16911]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16583-16648]:Block[16777-16842]"
    }, {
      "left" : "return _readBinary(b64variant, out, buf);",
      "right" : "return _readBinary(b64variant, out, buf);",
      "info" : "ReturnStatement[16597-16638]:ReturnStatement[16791-16832]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16657-16717]:Block[16851-16911]"
    }, {
      "left" : "_ioContext.releaseBase64Buffer(buf);",
      "right" : "_ioContext.releaseBase64Buffer(buf);",
      "info" : "ExpressionStatement[16671-16707]:ExpressionStatement[16865-16901]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16867-21941]:Block[17061-22135]"
    }, {
      "left" : "int outputPtr = 0;",
      "right" : "int outputPtr = 0;",
      "info" : "VariableDeclarationStatement[16877-16895]:VariableDeclarationStatement[17071-17089]"
    }, {
      "left" : "final int outputEnd = buffer.length - 3;",
      "right" : "final int outputEnd = buffer.length - 3;",
      "info" : "VariableDeclarationStatement[16904-16944]:VariableDeclarationStatement[17098-17138]"
    }, {
      "left" : "int outputCount = 0;",
      "right" : "int outputCount = 0;",
      "info" : "VariableDeclarationStatement[16953-16973]:VariableDeclarationStatement[17147-17167]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[16983-21751]:WhileStatement[17177-21945]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16996-21751]:Block[17190-21945]"
    }, {
      "left" : "int ch;",
      "right" : "int ch;",
      "info" : "VariableDeclarationStatement[17073-17080]:VariableDeclarationStatement[17267-17274]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[17093-17303]:DoStatement[17287-17497]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17096-17278]:Block[17290-17472]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[17114-17203]:IfStatement[17308-17397]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17142-17203]:Block[17336-17397]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[17164-17185]:ExpressionStatement[17358-17379]"
    }, {
      "left" : "ch = (int) _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "ch = (int) _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[17220-17264]:ExpressionStatement[17414-17458]"
    }, {
      "left" : "int bits = b64variant.decodeBase64Char(ch);",
      "right" : "int bits = b64variant.decodeBase64Char(ch);",
      "info" : "VariableDeclarationStatement[17316-17359]:VariableDeclarationStatement[17510-17553]"
    }, {
      "left" : "if (bits < 0)",
      "right" : "if (bits < 0)",
      "info" : "IfStatement[17372-17688]:IfStatement[17566-17882]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17386-17688]:Block[17580-17882]"
    }, {
      "left" : "if (ch == INT_QUOTE)",
      "right" : "if (ch == INT_QUOTE)",
      "info" : "IfStatement[17441-17508]:IfStatement[17635-17702]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17462-17508]:Block[17656-17702]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[17484-17490]:BreakStatement[17678-17684]"
    }, {
      "left" : "bits = _decodeBase64Escape(b64variant, ch, 0);",
      "right" : "bits = _decodeBase64Escape(b64variant, ch, 0);",
      "info" : "ExpressionStatement[17525-17571]:ExpressionStatement[17719-17765]"
    }, {
      "left" : "if (bits < 0)",
      "right" : "if (bits < 0)",
      "info" : "IfStatement[17588-17674]:IfStatement[17782-17868]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17602-17674]:Block[17796-17868]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[17647-17656]:ContinueStatement[17841-17850]"
    }, {
      "left" : "if (outputPtr > outputEnd)",
      "right" : "if (outputPtr > outputEnd)",
      "info" : "IfStatement[17744-17908]:IfStatement[17938-18102]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17771-17908]:Block[17965-18102]"
    }, {
      "left" : "outputCount += outputPtr;",
      "right" : "outputCount += outputPtr;",
      "info" : "ExpressionStatement[17789-17814]:ExpressionStatement[17983-18008]"
    }, {
      "left" : "out.write(buffer, 0, outputPtr);",
      "right" : "out.write(buffer, 0, outputPtr);",
      "info" : "ExpressionStatement[17831-17863]:ExpressionStatement[18025-18057]"
    }, {
      "left" : "outputPtr = 0;",
      "right" : "outputPtr = 0;",
      "info" : "ExpressionStatement[17880-17894]:ExpressionStatement[18074-18088]"
    }, {
      "left" : "int decodedData = bits;",
      "right" : "int decodedData = bits;",
      "info" : "VariableDeclarationStatement[17922-17945]:VariableDeclarationStatement[18116-18139]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[18030-18111]:IfStatement[18224-18305]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18058-18111]:Block[18252-18305]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[18076-18097]:ExpressionStatement[18270-18291]"
    }, {
      "left" : "ch = _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "ch = _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[18124-18162]:ExpressionStatement[18318-18356]"
    }, {
      "left" : "bits = b64variant.decodeBase64Char(ch);",
      "right" : "bits = b64variant.decodeBase64Char(ch);",
      "info" : "ExpressionStatement[18175-18214]:ExpressionStatement[18369-18408]"
    }, {
      "left" : "if (bits < 0)",
      "right" : "if (bits < 0)",
      "info" : "IfStatement[18227-18319]:IfStatement[18421-18513]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18241-18319]:Block[18435-18513]"
    }, {
      "left" : "bits = _decodeBase64Escape(b64variant, ch, 1);",
      "right" : "bits = _decodeBase64Escape(b64variant, ch, 1);",
      "info" : "ExpressionStatement[18259-18305]:ExpressionStatement[18453-18499]"
    }, {
      "left" : "decodedData = (decodedData << 6) | bits;",
      "right" : "decodedData = (decodedData << 6) | bits;",
      "info" : "ExpressionStatement[18332-18372]:ExpressionStatement[18526-18566]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[18447-18528]:IfStatement[18641-18722]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18475-18528]:Block[18669-18722]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[18493-18514]:ExpressionStatement[18687-18708]"
    }, {
      "left" : "ch = _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "ch = _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[18541-18579]:ExpressionStatement[18735-18773]"
    }, {
      "left" : "bits = b64variant.decodeBase64Char(ch);",
      "right" : "bits = b64variant.decodeBase64Char(ch);",
      "info" : "ExpressionStatement[18592-18631]:ExpressionStatement[18786-18825]"
    }, {
      "left" : "if (bits < 0)",
      "right" : "if (bits < 0)",
      "info" : "IfStatement[18702-19911]:IfStatement[18896-20105]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18716-19911]:Block[18910-20105]"
    }, {
      "left" : "if (bits != Base64Variant.BASE64_VALUE_PADDING)",
      "right" : "if (bits != Base64Variant.BASE64_VALUE_PADDING)",
      "info" : "IfStatement[18734-19179]:IfStatement[18928-19373]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18782-19179]:Block[18976-19373]"
    }, {
      "left" : "if (ch == '\"' && !b64variant.usesPadding())",
      "right" : "if (ch == '\"' && !b64variant.usesPadding())",
      "info" : "IfStatement[18887-19094]:IfStatement[19081-19288]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18931-19094]:Block[19125-19288]"
    }, {
      "left" : "decodedData >>= 4;",
      "right" : "decodedData >>= 4;",
      "info" : "ExpressionStatement[18957-18975]:ExpressionStatement[19151-19169]"
    }, {
      "left" : "buffer[outputPtr++] = (byte) decodedData;",
      "right" : "buffer[outputPtr++] = (byte) decodedData;",
      "info" : "ExpressionStatement[19000-19041]:ExpressionStatement[19194-19235]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[19066-19072]:BreakStatement[19260-19266]"
    }, {
      "left" : "bits = _decodeBase64Escape(b64variant, ch, 2);",
      "right" : "bits = _decodeBase64Escape(b64variant, ch, 2);",
      "info" : "ExpressionStatement[19115-19161]:ExpressionStatement[19309-19355]"
    }, {
      "left" : "if (bits == Base64Variant.BASE64_VALUE_PADDING)",
      "right" : "if (bits == Base64Variant.BASE64_VALUE_PADDING)",
      "info" : "IfStatement[19196-19897]:IfStatement[19390-20091]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19244-19897]:Block[19438-20091]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[19310-19407]:IfStatement[19504-19601]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19338-19407]:Block[19532-19601]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[19364-19385]:ExpressionStatement[19558-19579]"
    }, {
      "left" : "ch = _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "ch = _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[19428-19466]:ExpressionStatement[19622-19660]"
    }, {
      "left" : "if (!b64variant.usesPaddingChar(ch))",
      "right" : "if (!b64variant.usesPaddingChar(ch))",
      "info" : "IfStatement[19487-19685]:IfStatement[19681-19879]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19524-19685]:Block[19718-19879]"
    }, {
      "left" : "throw reportInvalidBase64Char(b64variant, ch, 3, \"expected padding character '\"+b64variant.getPaddingChar()+\"'\");",
      "right" : "throw reportInvalidBase64Char(b64variant, ch, 3, \"expected padding character '\"+b64variant.getPaddingChar()+\"'\");",
      "info" : "ThrowStatement[19550-19663]:ThrowStatement[19744-19857]"
    }, {
      "left" : "decodedData >>= 4;",
      "right" : "decodedData >>= 4;",
      "info" : "ExpressionStatement[19769-19787]:ExpressionStatement[19963-19981]"
    }, {
      "left" : "buffer[outputPtr++] = (byte) decodedData;",
      "right" : "buffer[outputPtr++] = (byte) decodedData;",
      "info" : "ExpressionStatement[19808-19849]:ExpressionStatement[20002-20043]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[19870-19879]:ContinueStatement[20064-20073]"
    }, {
      "left" : "decodedData = (decodedData << 6) | bits;",
      "right" : "decodedData = (decodedData << 6) | bits;",
      "info" : "ExpressionStatement[19958-19998]:ExpressionStatement[20152-20192]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[20082-20163]:IfStatement[20276-20357]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20110-20163]:Block[20304-20357]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[20128-20149]:ExpressionStatement[20322-20343]"
    }, {
      "left" : "ch = _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "ch = _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[20176-20214]:ExpressionStatement[20370-20408]"
    }, {
      "left" : "bits = b64variant.decodeBase64Char(ch);",
      "right" : "bits = b64variant.decodeBase64Char(ch);",
      "info" : "ExpressionStatement[20227-20266]:ExpressionStatement[20421-20460]"
    }, {
      "left" : "if (bits < 0)",
      "right" : "if (bits < 0)",
      "info" : "IfStatement[20279-21457]:IfStatement[20473-21651]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20293-21457]:Block[20487-21651]"
    }, {
      "left" : "if (bits != Base64Variant.BASE64_VALUE_PADDING)",
      "right" : "if (bits != Base64Variant.BASE64_VALUE_PADDING)",
      "info" : "IfStatement[20311-20829]:IfStatement[20505-21023]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20359-20829]:Block[20553-21023]"
    }, {
      "left" : "if (ch == '\"' && !b64variant.usesPadding())",
      "right" : "if (ch == '\"' && !b64variant.usesPadding())",
      "info" : "IfStatement[20464-20744]:IfStatement[20658-20938]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20508-20744]:Block[20702-20938]"
    }, {
      "left" : "decodedData >>= 2;",
      "right" : "decodedData >>= 2;",
      "info" : "ExpressionStatement[20534-20552]:ExpressionStatement[20728-20746]"
    }, {
      "left" : "buffer[outputPtr++] = (byte) (decodedData >> 8);",
      "right" : "buffer[outputPtr++] = (byte) (decodedData >> 8);",
      "info" : "ExpressionStatement[20577-20625]:ExpressionStatement[20771-20819]"
    }, {
      "left" : "buffer[outputPtr++] = (byte) decodedData;",
      "right" : "buffer[outputPtr++] = (byte) decodedData;",
      "info" : "ExpressionStatement[20650-20691]:ExpressionStatement[20844-20885]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[20716-20722]:BreakStatement[20910-20916]"
    }, {
      "left" : "bits = _decodeBase64Escape(b64variant, ch, 3);",
      "right" : "bits = _decodeBase64Escape(b64variant, ch, 3);",
      "info" : "ExpressionStatement[20765-20811]:ExpressionStatement[20959-21005]"
    }, {
      "left" : "if (bits == Base64Variant.BASE64_VALUE_PADDING)",
      "right" : "if (bits == Base64Variant.BASE64_VALUE_PADDING)",
      "info" : "IfStatement[20846-21443]:IfStatement[21040-21637]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20894-21443]:Block[21088-21637]"
    }, {
      "left" : "decodedData >>= 2;",
      "right" : "decodedData >>= 2;",
      "info" : "ExpressionStatement[21246-21264]:ExpressionStatement[21440-21458]"
    }, {
      "left" : "buffer[outputPtr++] = (byte) (decodedData >> 8);",
      "right" : "buffer[outputPtr++] = (byte) (decodedData >> 8);",
      "info" : "ExpressionStatement[21285-21333]:ExpressionStatement[21479-21527]"
    }, {
      "left" : "buffer[outputPtr++] = (byte) decodedData;",
      "right" : "buffer[outputPtr++] = (byte) decodedData;",
      "info" : "ExpressionStatement[21354-21395]:ExpressionStatement[21548-21589]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[21416-21425]:ContinueStatement[21610-21619]"
    }, {
      "left" : "decodedData = (decodedData << 6) | bits;",
      "right" : "decodedData = (decodedData << 6) | bits;",
      "info" : "ExpressionStatement[21524-21564]:ExpressionStatement[21718-21758]"
    }, {
      "left" : "buffer[outputPtr++] = (byte) (decodedData >> 16);",
      "right" : "buffer[outputPtr++] = (byte) (decodedData >> 16);",
      "info" : "ExpressionStatement[21577-21626]:ExpressionStatement[21771-21820]"
    }, {
      "left" : "buffer[outputPtr++] = (byte) (decodedData >> 8);",
      "right" : "buffer[outputPtr++] = (byte) (decodedData >> 8);",
      "info" : "ExpressionStatement[21639-21687]:ExpressionStatement[21833-21881]"
    }, {
      "left" : "buffer[outputPtr++] = (byte) decodedData;",
      "right" : "buffer[outputPtr++] = (byte) decodedData;",
      "info" : "ExpressionStatement[21700-21741]:ExpressionStatement[21894-21935]"
    }, {
      "left" : "_tokenIncomplete = false;",
      "right" : "_tokenIncomplete = false;",
      "info" : "ExpressionStatement[21760-21785]:ExpressionStatement[21954-21979]"
    }, {
      "left" : "if (outputPtr > 0)",
      "right" : "if (outputPtr > 0)",
      "info" : "IfStatement[21794-21907]:IfStatement[21988-22101]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21813-21907]:Block[22007-22101]"
    }, {
      "left" : "outputCount += outputPtr;",
      "right" : "outputCount += outputPtr;",
      "info" : "ExpressionStatement[21827-21852]:ExpressionStatement[22021-22046]"
    }, {
      "left" : "out.write(buffer, 0, outputPtr);",
      "right" : "out.write(buffer, 0, outputPtr);",
      "info" : "ExpressionStatement[21865-21897]:ExpressionStatement[22059-22091]"
    }, {
      "left" : "return outputCount;",
      "right" : "return outputCount;",
      "info" : "ReturnStatement[21916-21935]:ReturnStatement[22110-22129]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22068-22275]:Block[22262-22469]"
    }, {
      "left" : "return new JsonLocation(_ioContext.getSourceReference(),\n                getTokenCharacterOffset(), -1L, // bytes, chars\n                getTokenLineNr(),\n                getTokenColumnNr());",
      "right" : "return new JsonLocation(_ioContext.getSourceReference(),\n                getTokenCharacterOffset(), -1L, // bytes, chars\n                getTokenLineNr(),\n                getTokenColumnNr());",
      "info" : "ReturnStatement[22078-22269]:ReturnStatement[22272-22463]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22404-22648]:Block[22598-22842]"
    }, {
      "left" : "int col = _inputPtr - _currInputRowStart + 1;",
      "right" : "int col = _inputPtr - _currInputRowStart + 1;",
      "info" : "VariableDeclarationStatement[22414-22459]:VariableDeclarationStatement[22608-22653]"
    }, {
      "left" : "return new JsonLocation(_ioContext.getSourceReference(),\n                _currInputProcessed + _inputPtr, -1L, // bytes, chars\n                _currInputRow, col);",
      "right" : "return new JsonLocation(_ioContext.getSourceReference(),\n                _currInputProcessed + _inputPtr, -1L, // bytes, chars\n                _currInputRow, col);",
      "info" : "ReturnStatement[22479-22642]:ReturnStatement[22673-22836]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23019-26835]:Block[23213-27029]"
    }, {
      "left" : "_numTypesValid = NR_UNKNOWN;",
      "right" : "_numTypesValid = NR_UNKNOWN;",
      "info" : "ExpressionStatement[23029-23057]:ExpressionStatement[23223-23251]"
    }, {
      "left" : "if (_currToken == JsonToken.FIELD_NAME)",
      "right" : "if (_currToken == JsonToken.FIELD_NAME)",
      "info" : "IfStatement[23279-23367]:IfStatement[23473-23561]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23319-23367]:Block[23513-23561]"
    }, {
      "left" : "return _nextAfterName();",
      "right" : "return _nextAfterName();",
      "info" : "ReturnStatement[23333-23357]:ReturnStatement[23527-23551]"
    }, {
      "left" : "if (_tokenIncomplete)",
      "right" : "if (_tokenIncomplete)",
      "info" : "IfStatement[23376-23467]:IfStatement[23570-23661]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23398-23467]:Block[23592-23661]"
    }, {
      "left" : "_skipString();",
      "right" : "_skipString();",
      "info" : "ExpressionStatement[23412-23426]:ExpressionStatement[23606-23620]"
    }, {
      "left" : "int i = _skipWSOrEnd();",
      "right" : "int i = _skipWSOrEnd();",
      "info" : "VariableDeclarationStatement[23476-23499]:VariableDeclarationStatement[23670-23693]"
    }, {
      "left" : "if (i < 0)",
      "right" : "if (i < 0)",
      "info" : "IfStatement[23508-23698]:IfStatement[23702-23892]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23519-23698]:Block[23713-23892]"
    }, {
      "left" : "close();",
      "right" : "close();",
      "info" : "ExpressionStatement[23640-23648]:ExpressionStatement[23834-23842]"
    }, {
      "left" : "return (_currToken = null);",
      "right" : "return (_currToken = null);",
      "info" : "ReturnStatement[23661-23688]:ReturnStatement[23855-23882]"
    }, {
      "left" : "_tokenInputTotal = _currInputProcessed + _inputPtr - 1;",
      "right" : "_tokenInputTotal = _currInputProcessed + _inputPtr - 1;",
      "info" : "ExpressionStatement[23826-23881]:ExpressionStatement[24020-24075]"
    }, {
      "left" : "_tokenInputRow = _currInputRow;",
      "right" : "_tokenInputRow = _currInputRow;",
      "info" : "ExpressionStatement[23890-23921]:ExpressionStatement[24084-24115]"
    }, {
      "left" : "_tokenInputCol = _inputPtr - _currInputRowStart - 1;",
      "right" : "_tokenInputCol = _inputPtr - _currInputRowStart - 1;",
      "info" : "ExpressionStatement[23930-23982]:ExpressionStatement[24124-24176]"
    }, {
      "left" : "_binaryValue = null;",
      "right" : "_binaryValue = null;",
      "info" : "ExpressionStatement[24043-24063]:ExpressionStatement[24237-24257]"
    }, {
      "left" : "if (i == INT_RBRACKET)",
      "right" : "if (i == INT_RBRACKET)",
      "info" : "IfStatement[24099-24359]:IfStatement[24293-24553]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24122-24359]:Block[24316-24553]"
    }, {
      "left" : "if (!_parsingContext.inArray())",
      "right" : "if (!_parsingContext.inArray())",
      "info" : "IfStatement[24136-24235]:IfStatement[24330-24429]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24168-24235]:Block[24362-24429]"
    }, {
      "left" : "_reportMismatchedEndMarker(i, '}');",
      "right" : "_reportMismatchedEndMarker(i, '}');",
      "info" : "ExpressionStatement[24186-24221]:ExpressionStatement[24380-24415]"
    }, {
      "left" : "_parsingContext = _parsingContext.getParent();",
      "right" : "_parsingContext = _parsingContext.getParent();",
      "info" : "ExpressionStatement[24248-24294]:ExpressionStatement[24442-24488]"
    }, {
      "left" : "return (_currToken = JsonToken.END_ARRAY);",
      "right" : "return (_currToken = JsonToken.END_ARRAY);",
      "info" : "ReturnStatement[24307-24349]:ReturnStatement[24501-24543]"
    }, {
      "left" : "if (i == INT_RCURLY)",
      "right" : "if (i == INT_RCURLY)",
      "info" : "IfStatement[24368-24628]:IfStatement[24562-24822]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24389-24628]:Block[24583-24822]"
    }, {
      "left" : "if (!_parsingContext.inObject())",
      "right" : "if (!_parsingContext.inObject())",
      "info" : "IfStatement[24403-24503]:IfStatement[24597-24697]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24436-24503]:Block[24630-24697]"
    }, {
      "left" : "_reportMismatchedEndMarker(i, ']');",
      "right" : "_reportMismatchedEndMarker(i, ']');",
      "info" : "ExpressionStatement[24454-24489]:ExpressionStatement[24648-24683]"
    }, {
      "left" : "_parsingContext = _parsingContext.getParent();",
      "right" : "_parsingContext = _parsingContext.getParent();",
      "info" : "ExpressionStatement[24516-24562]:ExpressionStatement[24710-24756]"
    }, {
      "left" : "return (_currToken = JsonToken.END_OBJECT);",
      "right" : "return (_currToken = JsonToken.END_OBJECT);",
      "info" : "ReturnStatement[24575-24618]:ReturnStatement[24769-24812]"
    }, {
      "left" : "if (_parsingContext.expectComma())",
      "right" : "if (_parsingContext.expectComma())",
      "info" : "IfStatement[24682-24922]:IfStatement[24876-25116]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24717-24922]:Block[24911-25116]"
    }, {
      "left" : "if (i != INT_COMMA)",
      "right" : "if (i != INT_COMMA)",
      "info" : "IfStatement[24731-24885]:IfStatement[24925-25079]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24751-24885]:Block[24945-25079]"
    }, {
      "left" : "_reportUnexpectedChar(i, \"was expecting comma to separate \"+_parsingContext.getTypeDesc()+\" entries\");",
      "right" : "_reportUnexpectedChar(i, \"was expecting comma to separate \"+_parsingContext.getTypeDesc()+\" entries\");",
      "info" : "ExpressionStatement[24769-24871]:ExpressionStatement[24963-25065]"
    }, {
      "left" : "i = _skipWS();",
      "right" : "i = _skipWS();",
      "info" : "ExpressionStatement[24898-24912]:ExpressionStatement[25092-25106]"
    }, {
      "left" : "if (!_parsingContext.inObject())",
      "right" : "if (!_parsingContext.inObject())",
      "info" : "IfStatement[25104-25193]:IfStatement[25298-25387]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25137-25193]:Block[25331-25387]"
    }, {
      "left" : "return _nextTokenNotInObject(i);",
      "right" : "return _nextTokenNotInObject(i);",
      "info" : "ReturnStatement[25151-25183]:ReturnStatement[25345-25377]"
    }, {
      "left" : "String n = _parseName(i);",
      "right" : "String n = _parseName(i);",
      "info" : "VariableDeclarationStatement[25251-25276]:VariableDeclarationStatement[25445-25470]"
    }, {
      "left" : "_parsingContext.setCurrentName(n);",
      "right" : "_parsingContext.setCurrentName(n);",
      "info" : "ExpressionStatement[25285-25319]:ExpressionStatement[25479-25513]"
    }, {
      "left" : "_currToken = JsonToken.FIELD_NAME;",
      "right" : "_currToken = JsonToken.FIELD_NAME;",
      "info" : "ExpressionStatement[25328-25362]:ExpressionStatement[25522-25556]"
    }, {
      "left" : "i = _skipColon();",
      "right" : "i = _skipColon();",
      "info" : "ExpressionStatement[25372-25389]:ExpressionStatement[25566-25583]"
    }, {
      "left" : "if (i == INT_QUOTE)",
      "right" : "if (i == INT_QUOTE)",
      "info" : "IfStatement[25488-25636]:IfStatement[25682-25830]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25508-25636]:Block[25702-25830]"
    }, {
      "left" : "_tokenIncomplete = true;",
      "right" : "_tokenIncomplete = true;",
      "info" : "ExpressionStatement[25522-25546]:ExpressionStatement[25716-25740]"
    }, {
      "left" : "_nextToken = JsonToken.VALUE_STRING;",
      "right" : "_nextToken = JsonToken.VALUE_STRING;",
      "info" : "ExpressionStatement[25559-25595]:ExpressionStatement[25753-25789]"
    }, {
      "left" : "return _currToken;",
      "right" : "return _currToken;",
      "info" : "ReturnStatement[25608-25626]:ReturnStatement[25802-25820]"
    }, {
      "left" : "JsonToken t;",
      "right" : "JsonToken t;",
      "info" : "VariableDeclarationStatement[25653-25665]:VariableDeclarationStatement[25847-25859]"
    }, {
      "left" : "switch (i) {\n        case '-':\n            t = _parseNegNumber();\n            break;\n\n            /* Should we have separate handling for plus? Although\n             * it is not allowed per se, it may be erroneously used,\n             * and could be indicate by a more specific error message.\n             */\n        case '0':\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n            t = _parsePosNumber(i);\n            break;\n        case 'f':\n            _matchToken(\"false\", 1);\n             t = JsonToken.VALUE_FALSE;\n            break;\n        case 'n':\n            _matchToken(\"null\", 1);\n            t = JsonToken.VALUE_NULL;\n            break;\n        case 't':\n            _matchToken(\"true\", 1);\n            t = JsonToken.VALUE_TRUE;\n            break;\n        case '[':\n            t = JsonToken.START_ARRAY;\n            break;\n        case '{':\n            t = JsonToken.START_OBJECT;\n            break;\n\n        default:\n            t = _handleUnexpectedValue(i);\n        }",
      "right" : "switch (i) {\n        case '-':\n            t = _parseNegNumber();\n            break;\n\n            /* Should we have separate handling for plus? Although\n             * it is not allowed per se, it may be erroneously used,\n             * and could be indicate by a more specific error message.\n             */\n        case '0':\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n            t = _parsePosNumber(i);\n            break;\n        case 'f':\n            _matchToken(\"false\", 1);\n             t = JsonToken.VALUE_FALSE;\n            break;\n        case 'n':\n            _matchToken(\"null\", 1);\n            t = JsonToken.VALUE_NULL;\n            break;\n        case 't':\n            _matchToken(\"true\", 1);\n            t = JsonToken.VALUE_TRUE;\n            break;\n        case '[':\n            t = JsonToken.START_ARRAY;\n            break;\n        case '{':\n            t = JsonToken.START_OBJECT;\n            break;\n\n        default:\n            t = _handleUnexpectedValue(i);\n        }",
      "info" : "SwitchStatement[25675-26778]:SwitchStatement[25869-26972]"
    }, {
      "left" : "case '-':",
      "right" : "case '-':",
      "info" : "SwitchCase[25696-25705]:SwitchCase[25890-25899]"
    }, {
      "left" : "t = _parseNegNumber();",
      "right" : "t = _parseNegNumber();",
      "info" : "ExpressionStatement[25718-25740]:ExpressionStatement[25912-25934]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[25753-25759]:BreakStatement[25947-25953]"
    }, {
      "left" : "case '0':",
      "right" : "case '0':",
      "info" : "SwitchCase[25992-26001]:SwitchCase[26186-26195]"
    }, {
      "left" : "case '1':",
      "right" : "case '1':",
      "info" : "SwitchCase[26010-26019]:SwitchCase[26204-26213]"
    }, {
      "left" : "case '2':",
      "right" : "case '2':",
      "info" : "SwitchCase[26028-26037]:SwitchCase[26222-26231]"
    }, {
      "left" : "case '3':",
      "right" : "case '3':",
      "info" : "SwitchCase[26046-26055]:SwitchCase[26240-26249]"
    }, {
      "left" : "case '4':",
      "right" : "case '4':",
      "info" : "SwitchCase[26064-26073]:SwitchCase[26258-26267]"
    }, {
      "left" : "case '5':",
      "right" : "case '5':",
      "info" : "SwitchCase[26082-26091]:SwitchCase[26276-26285]"
    }, {
      "left" : "case '6':",
      "right" : "case '6':",
      "info" : "SwitchCase[26100-26109]:SwitchCase[26294-26303]"
    }, {
      "left" : "case '7':",
      "right" : "case '7':",
      "info" : "SwitchCase[26118-26127]:SwitchCase[26312-26321]"
    }, {
      "left" : "case '8':",
      "right" : "case '8':",
      "info" : "SwitchCase[26136-26145]:SwitchCase[26330-26339]"
    }, {
      "left" : "case '9':",
      "right" : "case '9':",
      "info" : "SwitchCase[26154-26163]:SwitchCase[26348-26357]"
    }, {
      "left" : "t = _parsePosNumber(i);",
      "right" : "t = _parsePosNumber(i);",
      "info" : "ExpressionStatement[26176-26199]:ExpressionStatement[26370-26393]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[26212-26218]:BreakStatement[26406-26412]"
    }, {
      "left" : "case 'f':",
      "right" : "case 'f':",
      "info" : "SwitchCase[26227-26236]:SwitchCase[26421-26430]"
    }, {
      "left" : "_matchToken(\"false\", 1);",
      "right" : "_matchToken(\"false\", 1);",
      "info" : "ExpressionStatement[26249-26273]:ExpressionStatement[26443-26467]"
    }, {
      "left" : "t = JsonToken.VALUE_FALSE;",
      "right" : "t = JsonToken.VALUE_FALSE;",
      "info" : "ExpressionStatement[26287-26313]:ExpressionStatement[26481-26507]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[26326-26332]:BreakStatement[26520-26526]"
    }, {
      "left" : "case 'n':",
      "right" : "case 'n':",
      "info" : "SwitchCase[26341-26350]:SwitchCase[26535-26544]"
    }, {
      "left" : "_matchToken(\"null\", 1);",
      "right" : "_matchToken(\"null\", 1);",
      "info" : "ExpressionStatement[26363-26386]:ExpressionStatement[26557-26580]"
    }, {
      "left" : "t = JsonToken.VALUE_NULL;",
      "right" : "t = JsonToken.VALUE_NULL;",
      "info" : "ExpressionStatement[26399-26424]:ExpressionStatement[26593-26618]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[26437-26443]:BreakStatement[26631-26637]"
    }, {
      "left" : "case 't':",
      "right" : "case 't':",
      "info" : "SwitchCase[26452-26461]:SwitchCase[26646-26655]"
    }, {
      "left" : "_matchToken(\"true\", 1);",
      "right" : "_matchToken(\"true\", 1);",
      "info" : "ExpressionStatement[26474-26497]:ExpressionStatement[26668-26691]"
    }, {
      "left" : "t = JsonToken.VALUE_TRUE;",
      "right" : "t = JsonToken.VALUE_TRUE;",
      "info" : "ExpressionStatement[26510-26535]:ExpressionStatement[26704-26729]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[26548-26554]:BreakStatement[26742-26748]"
    }, {
      "left" : "case '[':",
      "right" : "case '[':",
      "info" : "SwitchCase[26563-26572]:SwitchCase[26757-26766]"
    }, {
      "left" : "t = JsonToken.START_ARRAY;",
      "right" : "t = JsonToken.START_ARRAY;",
      "info" : "ExpressionStatement[26585-26611]:ExpressionStatement[26779-26805]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[26624-26630]:BreakStatement[26818-26824]"
    }, {
      "left" : "case '{':",
      "right" : "case '{':",
      "info" : "SwitchCase[26639-26648]:SwitchCase[26833-26842]"
    }, {
      "left" : "t = JsonToken.START_OBJECT;",
      "right" : "t = JsonToken.START_OBJECT;",
      "info" : "ExpressionStatement[26661-26688]:ExpressionStatement[26855-26882]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[26701-26707]:BreakStatement[26895-26901]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[26717-26725]:SwitchCase[26911-26919]"
    }, {
      "left" : "t = _handleUnexpectedValue(i);",
      "right" : "t = _handleUnexpectedValue(i);",
      "info" : "ExpressionStatement[26738-26768]:ExpressionStatement[26932-26962]"
    }, {
      "left" : "_nextToken = t;",
      "right" : "_nextToken = t;",
      "info" : "ExpressionStatement[26787-26802]:ExpressionStatement[26981-26996]"
    }, {
      "left" : "return _currToken;",
      "right" : "return _currToken;",
      "info" : "ReturnStatement[26811-26829]:ReturnStatement[27005-27023]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26917-28366]:Block[27111-28560]"
    }, {
      "left" : "if (i == INT_QUOTE)",
      "right" : "if (i == INT_QUOTE)",
      "info" : "IfStatement[26927-27053]:IfStatement[27121-27247]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26947-27053]:Block[27141-27247]"
    }, {
      "left" : "_tokenIncomplete = true;",
      "right" : "_tokenIncomplete = true;",
      "info" : "ExpressionStatement[26961-26985]:ExpressionStatement[27155-27179]"
    }, {
      "left" : "return (_currToken = JsonToken.VALUE_STRING);",
      "right" : "return (_currToken = JsonToken.VALUE_STRING);",
      "info" : "ReturnStatement[26998-27043]:ReturnStatement[27192-27237]"
    }, {
      "left" : "switch (i) {\n        case '[':\n            _parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);\n            return (_currToken = JsonToken.START_ARRAY);\n        case '{':\n            _parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);\n            return (_currToken = JsonToken.START_OBJECT);\n        case 't':\n            _matchToken(\"true\", 1);\n            return (_currToken = JsonToken.VALUE_TRUE);\n        case 'f':\n            _matchToken(\"false\", 1);\n            return (_currToken = JsonToken.VALUE_FALSE);\n        case 'n':\n            _matchToken(\"null\", 1);\n            return (_currToken = JsonToken.VALUE_NULL);\n        case '-':\n            return (_currToken = _parseNegNumber());\n            /* Should we have separate handling for plus? Although\n             * it is not allowed per se, it may be erroneously used,\n             * and could be indicated by a more specific error message.\n             */\n        case '0':\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n            return (_currToken = _parsePosNumber(i));\n        }",
      "right" : "switch (i) {\n        case '[':\n            _parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);\n            return (_currToken = JsonToken.START_ARRAY);\n        case '{':\n            _parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);\n            return (_currToken = JsonToken.START_OBJECT);\n        case 't':\n            _matchToken(\"true\", 1);\n            return (_currToken = JsonToken.VALUE_TRUE);\n        case 'f':\n            _matchToken(\"false\", 1);\n            return (_currToken = JsonToken.VALUE_FALSE);\n        case 'n':\n            _matchToken(\"null\", 1);\n            return (_currToken = JsonToken.VALUE_NULL);\n        case '-':\n            return (_currToken = _parseNegNumber());\n            /* Should we have separate handling for plus? Although\n             * it is not allowed per se, it may be erroneously used,\n             * and could be indicated by a more specific error message.\n             */\n        case '0':\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n            return (_currToken = _parsePosNumber(i));\n        }",
      "info" : "SwitchStatement[27062-28303]:SwitchStatement[27256-28497]"
    }, {
      "left" : "case '[':",
      "right" : "case '[':",
      "info" : "SwitchCase[27083-27092]:SwitchCase[27277-27286]"
    }, {
      "left" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
      "right" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
      "info" : "ExpressionStatement[27105-27195]:ExpressionStatement[27299-27389]"
    }, {
      "left" : "return (_currToken = JsonToken.START_ARRAY);",
      "right" : "return (_currToken = JsonToken.START_ARRAY);",
      "info" : "ReturnStatement[27208-27252]:ReturnStatement[27402-27446]"
    }, {
      "left" : "case '{':",
      "right" : "case '{':",
      "info" : "SwitchCase[27261-27270]:SwitchCase[27455-27464]"
    }, {
      "left" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
      "right" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
      "info" : "ExpressionStatement[27283-27374]:ExpressionStatement[27477-27568]"
    }, {
      "left" : "return (_currToken = JsonToken.START_OBJECT);",
      "right" : "return (_currToken = JsonToken.START_OBJECT);",
      "info" : "ReturnStatement[27387-27432]:ReturnStatement[27581-27626]"
    }, {
      "left" : "case 't':",
      "right" : "case 't':",
      "info" : "SwitchCase[27441-27450]:SwitchCase[27635-27644]"
    }, {
      "left" : "_matchToken(\"true\", 1);",
      "right" : "_matchToken(\"true\", 1);",
      "info" : "ExpressionStatement[27463-27486]:ExpressionStatement[27657-27680]"
    }, {
      "left" : "return (_currToken = JsonToken.VALUE_TRUE);",
      "right" : "return (_currToken = JsonToken.VALUE_TRUE);",
      "info" : "ReturnStatement[27499-27542]:ReturnStatement[27693-27736]"
    }, {
      "left" : "case 'f':",
      "right" : "case 'f':",
      "info" : "SwitchCase[27551-27560]:SwitchCase[27745-27754]"
    }, {
      "left" : "_matchToken(\"false\", 1);",
      "right" : "_matchToken(\"false\", 1);",
      "info" : "ExpressionStatement[27573-27597]:ExpressionStatement[27767-27791]"
    }, {
      "left" : "return (_currToken = JsonToken.VALUE_FALSE);",
      "right" : "return (_currToken = JsonToken.VALUE_FALSE);",
      "info" : "ReturnStatement[27610-27654]:ReturnStatement[27804-27848]"
    }, {
      "left" : "case 'n':",
      "right" : "case 'n':",
      "info" : "SwitchCase[27663-27672]:SwitchCase[27857-27866]"
    }, {
      "left" : "_matchToken(\"null\", 1);",
      "right" : "_matchToken(\"null\", 1);",
      "info" : "ExpressionStatement[27685-27708]:ExpressionStatement[27879-27902]"
    }, {
      "left" : "return (_currToken = JsonToken.VALUE_NULL);",
      "right" : "return (_currToken = JsonToken.VALUE_NULL);",
      "info" : "ReturnStatement[27721-27764]:ReturnStatement[27915-27958]"
    }, {
      "left" : "case '-':",
      "right" : "case '-':",
      "info" : "SwitchCase[27773-27782]:SwitchCase[27967-27976]"
    }, {
      "left" : "return (_currToken = _parseNegNumber());",
      "right" : "return (_currToken = _parseNegNumber());",
      "info" : "ReturnStatement[27795-27835]:ReturnStatement[27989-28029]"
    }, {
      "left" : "case '0':",
      "right" : "case '0':",
      "info" : "SwitchCase[28068-28077]:SwitchCase[28262-28271]"
    }, {
      "left" : "case '1':",
      "right" : "case '1':",
      "info" : "SwitchCase[28086-28095]:SwitchCase[28280-28289]"
    }, {
      "left" : "case '2':",
      "right" : "case '2':",
      "info" : "SwitchCase[28104-28113]:SwitchCase[28298-28307]"
    }, {
      "left" : "case '3':",
      "right" : "case '3':",
      "info" : "SwitchCase[28122-28131]:SwitchCase[28316-28325]"
    }, {
      "left" : "case '4':",
      "right" : "case '4':",
      "info" : "SwitchCase[28140-28149]:SwitchCase[28334-28343]"
    }, {
      "left" : "case '5':",
      "right" : "case '5':",
      "info" : "SwitchCase[28158-28167]:SwitchCase[28352-28361]"
    }, {
      "left" : "case '6':",
      "right" : "case '6':",
      "info" : "SwitchCase[28176-28185]:SwitchCase[28370-28379]"
    }, {
      "left" : "case '7':",
      "right" : "case '7':",
      "info" : "SwitchCase[28194-28203]:SwitchCase[28388-28397]"
    }, {
      "left" : "case '8':",
      "right" : "case '8':",
      "info" : "SwitchCase[28212-28221]:SwitchCase[28406-28415]"
    }, {
      "left" : "case '9':",
      "right" : "case '9':",
      "info" : "SwitchCase[28230-28239]:SwitchCase[28424-28433]"
    }, {
      "left" : "return (_currToken = _parsePosNumber(i));",
      "right" : "return (_currToken = _parsePosNumber(i));",
      "info" : "ReturnStatement[28252-28293]:ReturnStatement[28446-28487]"
    }, {
      "left" : "return (_currToken = _handleUnexpectedValue(i));",
      "right" : "return (_currToken = _handleUnexpectedValue(i));",
      "info" : "ReturnStatement[28312-28360]:ReturnStatement[28506-28554]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28421-28947]:Block[28615-29141]"
    }, {
      "left" : "_nameCopied = false;",
      "right" : "_nameCopied = false;",
      "info" : "ExpressionStatement[28431-28451]:ExpressionStatement[28625-28645]"
    }, {
      "left" : "JsonToken t = _nextToken;",
      "right" : "JsonToken t = _nextToken;",
      "info" : "VariableDeclarationStatement[28499-28524]:VariableDeclarationStatement[28693-28718]"
    }, {
      "left" : "_nextToken = null;",
      "right" : "_nextToken = null;",
      "info" : "ExpressionStatement[28533-28551]:ExpressionStatement[28727-28745]"
    }, {
      "left" : "if (t == JsonToken.START_ARRAY)",
      "right" : "if (t == JsonToken.START_ARRAY)",
      "info" : "IfStatement[28608-28908]:IfStatement[28802-29102]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28640-28754]:Block[28834-28948]"
    }, {
      "left" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
      "right" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
      "info" : "ExpressionStatement[28654-28744]:ExpressionStatement[28848-28938]"
    }, {
      "left" : "if (t == JsonToken.START_OBJECT)",
      "right" : "if (t == JsonToken.START_OBJECT)",
      "info" : "IfStatement[28760-28908]:IfStatement[28954-29102]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28793-28908]:Block[28987-29102]"
    }, {
      "left" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
      "right" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
      "info" : "ExpressionStatement[28807-28898]:ExpressionStatement[29001-29092]"
    }, {
      "left" : "return (_currToken = t);",
      "right" : "return (_currToken = t);",
      "info" : "ReturnStatement[28917-28941]:ReturnStatement[29111-29135]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29248-32294]:Block[29442-32488]"
    }, {
      "left" : "_numTypesValid = NR_UNKNOWN;",
      "right" : "_numTypesValid = NR_UNKNOWN;",
      "info" : "ExpressionStatement[29336-29364]:ExpressionStatement[29530-29558]"
    }, {
      "left" : "if (_currToken == JsonToken.FIELD_NAME)",
      "right" : "if (_currToken == JsonToken.FIELD_NAME)",
      "info" : "IfStatement[29373-29516]:IfStatement[29567-29710]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29413-29516]:Block[29607-29710]"
    }, {
      "left" : "_nextAfterName();",
      "right" : "_nextAfterName();",
      "info" : "ExpressionStatement[29463-29480]:ExpressionStatement[29657-29674]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[29493-29506]:ReturnStatement[29687-29700]"
    }, {
      "left" : "if (_tokenIncomplete)",
      "right" : "if (_tokenIncomplete)",
      "info" : "IfStatement[29525-29585]:IfStatement[29719-29779]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29547-29585]:Block[29741-29779]"
    }, {
      "left" : "_skipString();",
      "right" : "_skipString();",
      "info" : "ExpressionStatement[29561-29575]:ExpressionStatement[29755-29769]"
    }, {
      "left" : "int i = _skipWSOrEnd();",
      "right" : "int i = _skipWSOrEnd();",
      "info" : "VariableDeclarationStatement[29594-29617]:VariableDeclarationStatement[29788-29811]"
    }, {
      "left" : "if (i < 0)",
      "right" : "if (i < 0)",
      "info" : "IfStatement[29626-29742]:IfStatement[29820-29936]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29637-29742]:Block[29831-29936]"
    }, {
      "left" : "close();",
      "right" : "close();",
      "info" : "ExpressionStatement[29667-29675]:ExpressionStatement[29861-29869]"
    }, {
      "left" : "_currToken = null;",
      "right" : "_currToken = null;",
      "info" : "ExpressionStatement[29688-29706]:ExpressionStatement[29882-29900]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[29719-29732]:ReturnStatement[29913-29926]"
    }, {
      "left" : "_tokenInputTotal = _currInputProcessed + _inputPtr - 1;",
      "right" : "_tokenInputTotal = _currInputProcessed + _inputPtr - 1;",
      "info" : "ExpressionStatement[29751-29806]:ExpressionStatement[29945-30000]"
    }, {
      "left" : "_tokenInputRow = _currInputRow;",
      "right" : "_tokenInputRow = _currInputRow;",
      "info" : "ExpressionStatement[29815-29846]:ExpressionStatement[30009-30040]"
    }, {
      "left" : "_tokenInputCol = _inputPtr - _currInputRowStart - 1;",
      "right" : "_tokenInputCol = _inputPtr - _currInputRowStart - 1;",
      "info" : "ExpressionStatement[29855-29907]:ExpressionStatement[30049-30101]"
    }, {
      "left" : "_binaryValue = null;",
      "right" : "_binaryValue = null;",
      "info" : "ExpressionStatement[29968-29988]:ExpressionStatement[30162-30182]"
    }, {
      "left" : "if (i == INT_RBRACKET)",
      "right" : "if (i == INT_RBRACKET)",
      "info" : "IfStatement[30024-30301]:IfStatement[30218-30495]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30047-30301]:Block[30241-30495]"
    }, {
      "left" : "if (!_parsingContext.inArray())",
      "right" : "if (!_parsingContext.inArray())",
      "info" : "IfStatement[30061-30160]:IfStatement[30255-30354]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30093-30160]:Block[30287-30354]"
    }, {
      "left" : "_reportMismatchedEndMarker(i, '}');",
      "right" : "_reportMismatchedEndMarker(i, '}');",
      "info" : "ExpressionStatement[30111-30146]:ExpressionStatement[30305-30340]"
    }, {
      "left" : "_parsingContext = _parsingContext.getParent();",
      "right" : "_parsingContext = _parsingContext.getParent();",
      "info" : "ExpressionStatement[30173-30219]:ExpressionStatement[30367-30413]"
    }, {
      "left" : "_currToken = JsonToken.END_ARRAY;",
      "right" : "_currToken = JsonToken.END_ARRAY;",
      "info" : "ExpressionStatement[30232-30265]:ExpressionStatement[30426-30459]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[30278-30291]:ReturnStatement[30472-30485]"
    }, {
      "left" : "if (i == INT_RCURLY)",
      "right" : "if (i == INT_RCURLY)",
      "info" : "IfStatement[30310-30587]:IfStatement[30504-30781]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30331-30587]:Block[30525-30781]"
    }, {
      "left" : "if (!_parsingContext.inObject())",
      "right" : "if (!_parsingContext.inObject())",
      "info" : "IfStatement[30345-30445]:IfStatement[30539-30639]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30378-30445]:Block[30572-30639]"
    }, {
      "left" : "_reportMismatchedEndMarker(i, ']');",
      "right" : "_reportMismatchedEndMarker(i, ']');",
      "info" : "ExpressionStatement[30396-30431]:ExpressionStatement[30590-30625]"
    }, {
      "left" : "_parsingContext = _parsingContext.getParent();",
      "right" : "_parsingContext = _parsingContext.getParent();",
      "info" : "ExpressionStatement[30458-30504]:ExpressionStatement[30652-30698]"
    }, {
      "left" : "_currToken = JsonToken.END_OBJECT;",
      "right" : "_currToken = JsonToken.END_OBJECT;",
      "info" : "ExpressionStatement[30517-30551]:ExpressionStatement[30711-30745]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[30564-30577]:ReturnStatement[30758-30771]"
    }, {
      "left" : "if (_parsingContext.expectComma())",
      "right" : "if (_parsingContext.expectComma())",
      "info" : "IfStatement[30641-30881]:IfStatement[30835-31075]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30676-30881]:Block[30870-31075]"
    }, {
      "left" : "if (i != INT_COMMA)",
      "right" : "if (i != INT_COMMA)",
      "info" : "IfStatement[30690-30844]:IfStatement[30884-31038]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30710-30844]:Block[30904-31038]"
    }, {
      "left" : "_reportUnexpectedChar(i, \"was expecting comma to separate \"+_parsingContext.getTypeDesc()+\" entries\");",
      "right" : "_reportUnexpectedChar(i, \"was expecting comma to separate \"+_parsingContext.getTypeDesc()+\" entries\");",
      "info" : "ExpressionStatement[30728-30830]:ExpressionStatement[30922-31024]"
    }, {
      "left" : "i = _skipWS();",
      "right" : "i = _skipWS();",
      "info" : "ExpressionStatement[30857-30871]:ExpressionStatement[31051-31065]"
    }, {
      "left" : "if (!_parsingContext.inObject())",
      "right" : "if (!_parsingContext.inObject())",
      "info" : "IfStatement[30891-30999]:IfStatement[31085-31193]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30924-30999]:Block[31118-31193]"
    }, {
      "left" : "_nextTokenNotInObject(i);",
      "right" : "_nextTokenNotInObject(i);",
      "info" : "ExpressionStatement[30938-30963]:ExpressionStatement[31132-31157]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[30976-30989]:ReturnStatement[31170-31183]"
    }, {
      "left" : "if (i == INT_QUOTE)",
      "right" : "if (i == INT_QUOTE)",
      "info" : "IfStatement[31066-32242]:IfStatement[31260-32436]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31086-32242]:Block[31280-32436]"
    }, {
      "left" : "byte[] nameBytes = str.asQuotedUTF8();",
      "right" : "byte[] nameBytes = str.asQuotedUTF8();",
      "info" : "VariableDeclarationStatement[31165-31203]:VariableDeclarationStatement[31359-31397]"
    }, {
      "left" : "final int len = nameBytes.length;",
      "right" : "final int len = nameBytes.length;",
      "info" : "VariableDeclarationStatement[31216-31249]:VariableDeclarationStatement[31410-31443]"
    }, {
      "left" : "if ((_inputPtr + len + 4) < _inputEnd)",
      "right" : "if ((_inputPtr + len + 4) < _inputEnd)",
      "info" : "IfStatement[31398-32232]:IfStatement[31592-32426]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31437-32232]:Block[31631-32426]"
    }, {
      "left" : "final int end = _inputPtr+len;",
      "right" : "final int end = _inputPtr+len;",
      "info" : "VariableDeclarationStatement[31514-31544]:VariableDeclarationStatement[31708-31738]"
    }, {
      "left" : "if (_inputBuffer[end] == INT_QUOTE)",
      "right" : "if (_inputBuffer[end] == INT_QUOTE)",
      "info" : "IfStatement[31561-32218]:IfStatement[31755-32412]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31597-32218]:Block[31791-32412]"
    }, {
      "left" : "int offset = 0;",
      "right" : "int offset = 0;",
      "info" : "VariableDeclarationStatement[31619-31634]:VariableDeclarationStatement[31813-31828]"
    }, {
      "left" : "int ptr = _inputPtr;",
      "right" : "int ptr = _inputPtr;",
      "info" : "VariableDeclarationStatement[31655-31675]:VariableDeclarationStatement[31849-31869]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[31696-32200]:WhileStatement[31890-32394]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31709-32200]:Block[31903-32394]"
    }, {
      "left" : "if (ptr == end)",
      "right" : "if (ptr == end)",
      "info" : "IfStatement[31735-31982]:IfStatement[31929-32176]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31751-31982]:Block[31945-32176]"
    }, {
      "left" : "_parsingContext.setCurrentName(str.getValue());",
      "right" : "_parsingContext.setCurrentName(str.getValue());",
      "info" : "ExpressionStatement[31796-31843]:ExpressionStatement[31990-32037]"
    }, {
      "left" : "_isNextTokenNameYes(_skipColonFast(ptr+1));",
      "right" : "_isNextTokenNameYes(_skipColonFast(ptr+1));",
      "info" : "ExpressionStatement[31872-31915]:ExpressionStatement[32066-32109]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[31944-31956]:ReturnStatement[32138-32150]"
    }, {
      "left" : "if (nameBytes[offset] != _inputBuffer[ptr])",
      "right" : "if (nameBytes[offset] != _inputBuffer[ptr])",
      "info" : "IfStatement[32007-32113]:IfStatement[32201-32307]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32051-32113]:Block[32245-32307]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[32081-32087]:BreakStatement[32275-32281]"
    }, {
      "left" : "++offset;",
      "right" : "++offset;",
      "info" : "ExpressionStatement[32138-32147]:ExpressionStatement[32332-32341]"
    }, {
      "left" : "++ptr;",
      "right" : "++ptr;",
      "info" : "ExpressionStatement[32172-32178]:ExpressionStatement[32366-32372]"
    }, {
      "left" : "return _isNextTokenNameMaybe(i, str);",
      "right" : "return _isNextTokenNameMaybe(i, str);",
      "info" : "ReturnStatement[32251-32288]:ReturnStatement[32445-32482]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32367-35483]:Block[32561-35677]"
    }, {
      "left" : "_numTypesValid = NR_UNKNOWN;",
      "right" : "_numTypesValid = NR_UNKNOWN;",
      "info" : "ExpressionStatement[32447-32475]:ExpressionStatement[32641-32669]"
    }, {
      "left" : "if (_currToken == JsonToken.FIELD_NAME)",
      "right" : "if (_currToken == JsonToken.FIELD_NAME)",
      "info" : "IfStatement[32484-32590]:IfStatement[32678-32784]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32524-32590]:Block[32718-32784]"
    }, {
      "left" : "_nextAfterName();",
      "right" : "_nextAfterName();",
      "info" : "ExpressionStatement[32538-32555]:ExpressionStatement[32732-32749]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[32568-32580]:ReturnStatement[32762-32774]"
    }, {
      "left" : "if (_tokenIncomplete)",
      "right" : "if (_tokenIncomplete)",
      "info" : "IfStatement[32599-32659]:IfStatement[32793-32853]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32621-32659]:Block[32815-32853]"
    }, {
      "left" : "_skipString();",
      "right" : "_skipString();",
      "info" : "ExpressionStatement[32635-32649]:ExpressionStatement[32829-32843]"
    }, {
      "left" : "int i = _skipWSOrEnd();",
      "right" : "int i = _skipWSOrEnd();",
      "info" : "VariableDeclarationStatement[32668-32691]:VariableDeclarationStatement[32862-32885]"
    }, {
      "left" : "if (i < 0)",
      "right" : "if (i < 0)",
      "info" : "IfStatement[32700-32799]:IfStatement[32894-32993]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32711-32799]:Block[32905-32993]"
    }, {
      "left" : "close();",
      "right" : "close();",
      "info" : "ExpressionStatement[32725-32733]:ExpressionStatement[32919-32927]"
    }, {
      "left" : "_currToken = null;",
      "right" : "_currToken = null;",
      "info" : "ExpressionStatement[32746-32764]:ExpressionStatement[32940-32958]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[32777-32789]:ReturnStatement[32971-32983]"
    }, {
      "left" : "_tokenInputTotal = _currInputProcessed + _inputPtr - 1;",
      "right" : "_tokenInputTotal = _currInputProcessed + _inputPtr - 1;",
      "info" : "ExpressionStatement[32808-32863]:ExpressionStatement[33002-33057]"
    }, {
      "left" : "_tokenInputRow = _currInputRow;",
      "right" : "_tokenInputRow = _currInputRow;",
      "info" : "ExpressionStatement[32872-32903]:ExpressionStatement[33066-33097]"
    }, {
      "left" : "_tokenInputCol = _inputPtr - _currInputRowStart - 1;",
      "right" : "_tokenInputCol = _inputPtr - _currInputRowStart - 1;",
      "info" : "ExpressionStatement[32912-32964]:ExpressionStatement[33106-33158]"
    }, {
      "left" : "_binaryValue = null;",
      "right" : "_binaryValue = null;",
      "info" : "ExpressionStatement[32974-32994]:ExpressionStatement[33168-33188]"
    }, {
      "left" : "if (i == INT_RBRACKET)",
      "right" : "if (i == INT_RBRACKET)",
      "info" : "IfStatement[33004-33280]:IfStatement[33198-33474]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33027-33280]:Block[33221-33474]"
    }, {
      "left" : "if (!_parsingContext.inArray())",
      "right" : "if (!_parsingContext.inArray())",
      "info" : "IfStatement[33041-33140]:IfStatement[33235-33334]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33073-33140]:Block[33267-33334]"
    }, {
      "left" : "_reportMismatchedEndMarker(i, '}');",
      "right" : "_reportMismatchedEndMarker(i, '}');",
      "info" : "ExpressionStatement[33091-33126]:ExpressionStatement[33285-33320]"
    }, {
      "left" : "_parsingContext = _parsingContext.getParent();",
      "right" : "_parsingContext = _parsingContext.getParent();",
      "info" : "ExpressionStatement[33153-33199]:ExpressionStatement[33347-33393]"
    }, {
      "left" : "_currToken = JsonToken.END_ARRAY;",
      "right" : "_currToken = JsonToken.END_ARRAY;",
      "info" : "ExpressionStatement[33212-33245]:ExpressionStatement[33406-33439]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[33258-33270]:ReturnStatement[33452-33464]"
    }, {
      "left" : "if (i == INT_RCURLY)",
      "right" : "if (i == INT_RCURLY)",
      "info" : "IfStatement[33289-33565]:IfStatement[33483-33759]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33310-33565]:Block[33504-33759]"
    }, {
      "left" : "if (!_parsingContext.inObject())",
      "right" : "if (!_parsingContext.inObject())",
      "info" : "IfStatement[33324-33424]:IfStatement[33518-33618]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33357-33424]:Block[33551-33618]"
    }, {
      "left" : "_reportMismatchedEndMarker(i, ']');",
      "right" : "_reportMismatchedEndMarker(i, ']');",
      "info" : "ExpressionStatement[33375-33410]:ExpressionStatement[33569-33604]"
    }, {
      "left" : "_parsingContext = _parsingContext.getParent();",
      "right" : "_parsingContext = _parsingContext.getParent();",
      "info" : "ExpressionStatement[33437-33483]:ExpressionStatement[33631-33677]"
    }, {
      "left" : "_currToken = JsonToken.END_OBJECT;",
      "right" : "_currToken = JsonToken.END_OBJECT;",
      "info" : "ExpressionStatement[33496-33530]:ExpressionStatement[33690-33724]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[33543-33555]:ReturnStatement[33737-33749]"
    }, {
      "left" : "if (_parsingContext.expectComma())",
      "right" : "if (_parsingContext.expectComma())",
      "info" : "IfStatement[33619-33859]:IfStatement[33813-34053]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33654-33859]:Block[33848-34053]"
    }, {
      "left" : "if (i != INT_COMMA)",
      "right" : "if (i != INT_COMMA)",
      "info" : "IfStatement[33668-33822]:IfStatement[33862-34016]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33688-33822]:Block[33882-34016]"
    }, {
      "left" : "_reportUnexpectedChar(i, \"was expecting comma to separate \"+_parsingContext.getTypeDesc()+\" entries\");",
      "right" : "_reportUnexpectedChar(i, \"was expecting comma to separate \"+_parsingContext.getTypeDesc()+\" entries\");",
      "info" : "ExpressionStatement[33706-33808]:ExpressionStatement[33900-34002]"
    }, {
      "left" : "i = _skipWS();",
      "right" : "i = _skipWS();",
      "info" : "ExpressionStatement[33835-33849]:ExpressionStatement[34029-34043]"
    }, {
      "left" : "if (!_parsingContext.inObject())",
      "right" : "if (!_parsingContext.inObject())",
      "info" : "IfStatement[33869-33976]:IfStatement[34063-34170]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33902-33976]:Block[34096-34170]"
    }, {
      "left" : "_nextTokenNotInObject(i);",
      "right" : "_nextTokenNotInObject(i);",
      "info" : "ExpressionStatement[33916-33941]:ExpressionStatement[34110-34135]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[33954-33966]:ReturnStatement[34148-34160]"
    }, {
      "left" : "final String nameStr = _parseName(i);",
      "right" : "final String nameStr = _parseName(i);",
      "info" : "VariableDeclarationStatement[33986-34023]:VariableDeclarationStatement[34180-34217]"
    }, {
      "left" : "_parsingContext.setCurrentName(nameStr);",
      "right" : "_parsingContext.setCurrentName(nameStr);",
      "info" : "ExpressionStatement[34032-34072]:ExpressionStatement[34226-34266]"
    }, {
      "left" : "_currToken = JsonToken.FIELD_NAME;",
      "right" : "_currToken = JsonToken.FIELD_NAME;",
      "info" : "ExpressionStatement[34081-34115]:ExpressionStatement[34275-34309]"
    }, {
      "left" : "i = _skipColon();",
      "right" : "i = _skipColon();",
      "info" : "ExpressionStatement[34125-34142]:ExpressionStatement[34319-34336]"
    }, {
      "left" : "if (i == INT_QUOTE)",
      "right" : "if (i == INT_QUOTE)",
      "info" : "IfStatement[34151-34296]:IfStatement[34345-34490]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34171-34296]:Block[34365-34490]"
    }, {
      "left" : "_tokenIncomplete = true;",
      "right" : "_tokenIncomplete = true;",
      "info" : "ExpressionStatement[34185-34209]:ExpressionStatement[34379-34403]"
    }, {
      "left" : "_nextToken = JsonToken.VALUE_STRING;",
      "right" : "_nextToken = JsonToken.VALUE_STRING;",
      "info" : "ExpressionStatement[34222-34258]:ExpressionStatement[34416-34452]"
    }, {
      "left" : "return nameStr;",
      "right" : "return nameStr;",
      "info" : "ReturnStatement[34271-34286]:ReturnStatement[34465-34480]"
    }, {
      "left" : "JsonToken t;",
      "right" : "JsonToken t;",
      "info" : "VariableDeclarationStatement[34305-34317]:VariableDeclarationStatement[34499-34511]"
    }, {
      "left" : "switch (i) {\n        case '-':\n            t = _parseNegNumber();\n            break;\n\n            /* Should we have separate handling for plus? Although\n             * it is not allowed per se, it may be erroneously used,\n             * and could be indicate by a more specific error message.\n             */\n        case '0':\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n            t = _parsePosNumber(i);\n            break;\n        case 'f':\n            _matchToken(\"false\", 1);\n             t = JsonToken.VALUE_FALSE;\n            break;\n        case 'n':\n            _matchToken(\"null\", 1);\n            t = JsonToken.VALUE_NULL;\n            break;\n        case 't':\n            _matchToken(\"true\", 1);\n            t = JsonToken.VALUE_TRUE;\n            break;\n        case '[':\n            t = JsonToken.START_ARRAY;\n            break;\n        case '{':\n            t = JsonToken.START_OBJECT;\n            break;\n\n        default:\n            t = _handleUnexpectedValue(i);\n        }",
      "right" : "switch (i) {\n        case '-':\n            t = _parseNegNumber();\n            break;\n\n            /* Should we have separate handling for plus? Although\n             * it is not allowed per se, it may be erroneously used,\n             * and could be indicate by a more specific error message.\n             */\n        case '0':\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n            t = _parsePosNumber(i);\n            break;\n        case 'f':\n            _matchToken(\"false\", 1);\n             t = JsonToken.VALUE_FALSE;\n            break;\n        case 'n':\n            _matchToken(\"null\", 1);\n            t = JsonToken.VALUE_NULL;\n            break;\n        case 't':\n            _matchToken(\"true\", 1);\n            t = JsonToken.VALUE_TRUE;\n            break;\n        case '[':\n            t = JsonToken.START_ARRAY;\n            break;\n        case '{':\n            t = JsonToken.START_OBJECT;\n            break;\n\n        default:\n            t = _handleUnexpectedValue(i);\n        }",
      "info" : "SwitchStatement[34326-35429]:SwitchStatement[34520-35623]"
    }, {
      "left" : "case '-':",
      "right" : "case '-':",
      "info" : "SwitchCase[34347-34356]:SwitchCase[34541-34550]"
    }, {
      "left" : "t = _parseNegNumber();",
      "right" : "t = _parseNegNumber();",
      "info" : "ExpressionStatement[34369-34391]:ExpressionStatement[34563-34585]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[34404-34410]:BreakStatement[34598-34604]"
    }, {
      "left" : "case '0':",
      "right" : "case '0':",
      "info" : "SwitchCase[34643-34652]:SwitchCase[34837-34846]"
    }, {
      "left" : "case '1':",
      "right" : "case '1':",
      "info" : "SwitchCase[34661-34670]:SwitchCase[34855-34864]"
    }, {
      "left" : "case '2':",
      "right" : "case '2':",
      "info" : "SwitchCase[34679-34688]:SwitchCase[34873-34882]"
    }, {
      "left" : "case '3':",
      "right" : "case '3':",
      "info" : "SwitchCase[34697-34706]:SwitchCase[34891-34900]"
    }, {
      "left" : "case '4':",
      "right" : "case '4':",
      "info" : "SwitchCase[34715-34724]:SwitchCase[34909-34918]"
    }, {
      "left" : "case '5':",
      "right" : "case '5':",
      "info" : "SwitchCase[34733-34742]:SwitchCase[34927-34936]"
    }, {
      "left" : "case '6':",
      "right" : "case '6':",
      "info" : "SwitchCase[34751-34760]:SwitchCase[34945-34954]"
    }, {
      "left" : "case '7':",
      "right" : "case '7':",
      "info" : "SwitchCase[34769-34778]:SwitchCase[34963-34972]"
    }, {
      "left" : "case '8':",
      "right" : "case '8':",
      "info" : "SwitchCase[34787-34796]:SwitchCase[34981-34990]"
    }, {
      "left" : "case '9':",
      "right" : "case '9':",
      "info" : "SwitchCase[34805-34814]:SwitchCase[34999-35008]"
    }, {
      "left" : "t = _parsePosNumber(i);",
      "right" : "t = _parsePosNumber(i);",
      "info" : "ExpressionStatement[34827-34850]:ExpressionStatement[35021-35044]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[34863-34869]:BreakStatement[35057-35063]"
    }, {
      "left" : "case 'f':",
      "right" : "case 'f':",
      "info" : "SwitchCase[34878-34887]:SwitchCase[35072-35081]"
    }, {
      "left" : "_matchToken(\"false\", 1);",
      "right" : "_matchToken(\"false\", 1);",
      "info" : "ExpressionStatement[34900-34924]:ExpressionStatement[35094-35118]"
    }, {
      "left" : "t = JsonToken.VALUE_FALSE;",
      "right" : "t = JsonToken.VALUE_FALSE;",
      "info" : "ExpressionStatement[34938-34964]:ExpressionStatement[35132-35158]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[34977-34983]:BreakStatement[35171-35177]"
    }, {
      "left" : "case 'n':",
      "right" : "case 'n':",
      "info" : "SwitchCase[34992-35001]:SwitchCase[35186-35195]"
    }, {
      "left" : "_matchToken(\"null\", 1);",
      "right" : "_matchToken(\"null\", 1);",
      "info" : "ExpressionStatement[35014-35037]:ExpressionStatement[35208-35231]"
    }, {
      "left" : "t = JsonToken.VALUE_NULL;",
      "right" : "t = JsonToken.VALUE_NULL;",
      "info" : "ExpressionStatement[35050-35075]:ExpressionStatement[35244-35269]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[35088-35094]:BreakStatement[35282-35288]"
    }, {
      "left" : "case 't':",
      "right" : "case 't':",
      "info" : "SwitchCase[35103-35112]:SwitchCase[35297-35306]"
    }, {
      "left" : "_matchToken(\"true\", 1);",
      "right" : "_matchToken(\"true\", 1);",
      "info" : "ExpressionStatement[35125-35148]:ExpressionStatement[35319-35342]"
    }, {
      "left" : "t = JsonToken.VALUE_TRUE;",
      "right" : "t = JsonToken.VALUE_TRUE;",
      "info" : "ExpressionStatement[35161-35186]:ExpressionStatement[35355-35380]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[35199-35205]:BreakStatement[35393-35399]"
    }, {
      "left" : "case '[':",
      "right" : "case '[':",
      "info" : "SwitchCase[35214-35223]:SwitchCase[35408-35417]"
    }, {
      "left" : "t = JsonToken.START_ARRAY;",
      "right" : "t = JsonToken.START_ARRAY;",
      "info" : "ExpressionStatement[35236-35262]:ExpressionStatement[35430-35456]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[35275-35281]:BreakStatement[35469-35475]"
    }, {
      "left" : "case '{':",
      "right" : "case '{':",
      "info" : "SwitchCase[35290-35299]:SwitchCase[35484-35493]"
    }, {
      "left" : "t = JsonToken.START_OBJECT;",
      "right" : "t = JsonToken.START_OBJECT;",
      "info" : "ExpressionStatement[35312-35339]:ExpressionStatement[35506-35533]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[35352-35358]:BreakStatement[35546-35552]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[35368-35376]:SwitchCase[35562-35570]"
    }, {
      "left" : "t = _handleUnexpectedValue(i);",
      "right" : "t = _handleUnexpectedValue(i);",
      "info" : "ExpressionStatement[35389-35419]:ExpressionStatement[35583-35613]"
    }, {
      "left" : "_nextToken = t;",
      "right" : "_nextToken = t;",
      "info" : "ExpressionStatement[35438-35453]:ExpressionStatement[35632-35647]"
    }, {
      "left" : "return nameStr;",
      "right" : "return nameStr;",
      "info" : "ReturnStatement[35462-35477]:ReturnStatement[35656-35671]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35629-37129]:Block[35823-37323]"
    }, {
      "left" : "int i = _inputBuffer[ptr++];",
      "right" : "int i = _inputBuffer[ptr++];",
      "info" : "VariableDeclarationStatement[35639-35667]:VariableDeclarationStatement[35833-35861]"
    }, {
      "left" : "if (i == INT_COLON)",
      "right" : "if (i == INT_COLON)",
      "info" : "IfStatement[35676-36389]:IfStatement[35870-36583]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35696-36389]:Block[35890-36583]"
    }, {
      "left" : "i = _inputBuffer[ptr++];",
      "right" : "i = _inputBuffer[ptr++];",
      "info" : "ExpressionStatement[35743-35767]:ExpressionStatement[35937-35961]"
    }, {
      "left" : "if (i > INT_SPACE)",
      "right" : "if (i > INT_SPACE)",
      "info" : "IfStatement[35780-36285]:IfStatement[35974-36479]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35799-35970]:Block[35993-36164]"
    }, {
      "left" : "if (i != INT_SLASH && i != INT_HASH)",
      "right" : "if (i != INT_SLASH && i != INT_HASH)",
      "info" : "IfStatement[35833-35956]:IfStatement[36027-36150]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35870-35956]:Block[36064-36150]"
    }, {
      "left" : "_inputPtr = ptr;",
      "right" : "_inputPtr = ptr;",
      "info" : "ExpressionStatement[35892-35908]:ExpressionStatement[36086-36102]"
    }, {
      "left" : "return i;",
      "right" : "return i;",
      "info" : "ReturnStatement[35929-35938]:ReturnStatement[36123-36132]"
    }, {
      "left" : "if (i == INT_SPACE || i == INT_TAB)",
      "right" : "if (i == INT_SPACE || i == INT_TAB)",
      "info" : "IfStatement[35976-36285]:IfStatement[36170-36479]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36012-36285]:Block[36206-36479]"
    }, {
      "left" : "i = (int) _inputBuffer[ptr++];",
      "right" : "i = (int) _inputBuffer[ptr++];",
      "info" : "ExpressionStatement[36030-36060]:ExpressionStatement[36224-36254]"
    }, {
      "left" : "if (i > INT_SPACE)",
      "right" : "if (i > INT_SPACE)",
      "info" : "IfStatement[36077-36271]:IfStatement[36271-36465]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36096-36271]:Block[36290-36465]"
    }, {
      "left" : "if (i != INT_SLASH && i != INT_HASH)",
      "right" : "if (i != INT_SLASH && i != INT_HASH)",
      "info" : "IfStatement[36118-36253]:IfStatement[36312-36447]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36155-36253]:Block[36349-36447]"
    }, {
      "left" : "_inputPtr = ptr;",
      "right" : "_inputPtr = ptr;",
      "info" : "ExpressionStatement[36181-36197]:ExpressionStatement[36375-36391]"
    }, {
      "left" : "return i;",
      "right" : "return i;",
      "info" : "ReturnStatement[36222-36231]:ReturnStatement[36416-36425]"
    }, {
      "left" : "_inputPtr = ptr-1;",
      "right" : "_inputPtr = ptr-1;",
      "info" : "ExpressionStatement[36298-36316]:ExpressionStatement[36492-36510]"
    }, {
      "left" : "return _skipColon2(true);",
      "right" : "return _skipColon2(true);",
      "info" : "ReturnStatement[36329-36354]:ReturnStatement[36523-36548]"
    }, {
      "left" : "if (i == INT_SPACE || i == INT_TAB)",
      "right" : "if (i == INT_SPACE || i == INT_TAB)",
      "info" : "IfStatement[36398-36482]:IfStatement[36592-36676]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36434-36482]:Block[36628-36676]"
    }, {
      "left" : "i = _inputBuffer[ptr++];",
      "right" : "i = _inputBuffer[ptr++];",
      "info" : "ExpressionStatement[36448-36472]:ExpressionStatement[36642-36666]"
    }, {
      "left" : "if (i == INT_COLON)",
      "right" : "if (i == INT_COLON)",
      "info" : "IfStatement[36491-37061]:IfStatement[36685-37255]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36511-37061]:Block[36705-37255]"
    }, {
      "left" : "i = _inputBuffer[ptr++];",
      "right" : "i = _inputBuffer[ptr++];",
      "info" : "ExpressionStatement[36525-36549]:ExpressionStatement[36719-36743]"
    }, {
      "left" : "if (i > INT_SPACE)",
      "right" : "if (i > INT_SPACE)",
      "info" : "IfStatement[36562-37051]:IfStatement[36756-37245]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36581-36736]:Block[36775-36930]"
    }, {
      "left" : "if (i != INT_SLASH && i != INT_HASH)",
      "right" : "if (i != INT_SLASH && i != INT_HASH)",
      "info" : "IfStatement[36599-36722]:IfStatement[36793-36916]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36636-36722]:Block[36830-36916]"
    }, {
      "left" : "_inputPtr = ptr;",
      "right" : "_inputPtr = ptr;",
      "info" : "ExpressionStatement[36658-36674]:ExpressionStatement[36852-36868]"
    }, {
      "left" : "return i;",
      "right" : "return i;",
      "info" : "ReturnStatement[36695-36704]:ReturnStatement[36889-36898]"
    }, {
      "left" : "if (i == INT_SPACE || i == INT_TAB)",
      "right" : "if (i == INT_SPACE || i == INT_TAB)",
      "info" : "IfStatement[36742-37051]:IfStatement[36936-37245]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36778-37051]:Block[36972-37245]"
    }, {
      "left" : "i = (int) _inputBuffer[ptr++];",
      "right" : "i = (int) _inputBuffer[ptr++];",
      "info" : "ExpressionStatement[36796-36826]:ExpressionStatement[36990-37020]"
    }, {
      "left" : "if (i > INT_SPACE)",
      "right" : "if (i > INT_SPACE)",
      "info" : "IfStatement[36843-37037]:IfStatement[37037-37231]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36862-37037]:Block[37056-37231]"
    }, {
      "left" : "if (i != INT_SLASH && i != INT_HASH)",
      "right" : "if (i != INT_SLASH && i != INT_HASH)",
      "info" : "IfStatement[36884-37019]:IfStatement[37078-37213]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36921-37019]:Block[37115-37213]"
    }, {
      "left" : "_inputPtr = ptr;",
      "right" : "_inputPtr = ptr;",
      "info" : "ExpressionStatement[36947-36963]:ExpressionStatement[37141-37157]"
    }, {
      "left" : "return i;",
      "right" : "return i;",
      "info" : "ReturnStatement[36988-36997]:ReturnStatement[37182-37191]"
    }, {
      "left" : "_inputPtr = ptr-1;",
      "right" : "_inputPtr = ptr-1;",
      "info" : "ExpressionStatement[37070-37088]:ExpressionStatement[37264-37282]"
    }, {
      "left" : "return _skipColon2(false);",
      "right" : "return _skipColon2(false);",
      "info" : "ReturnStatement[37097-37123]:ReturnStatement[37291-37317]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37208-38327]:Block[37402-38521]"
    }, {
      "left" : "_currToken = JsonToken.FIELD_NAME;",
      "right" : "_currToken = JsonToken.FIELD_NAME;",
      "info" : "ExpressionStatement[37218-37252]:ExpressionStatement[37412-37446]"
    }, {
      "left" : "switch (i) {\n        case '\"':\n            _tokenIncomplete = true;\n            _nextToken = JsonToken.VALUE_STRING;\n            return;\n        case '[':\n            _nextToken = JsonToken.START_ARRAY;\n            return;\n        case '{':\n            _nextToken = JsonToken.START_OBJECT;\n            return;\n        case 't':\n            _matchToken(\"true\", 1);\n            _nextToken = JsonToken.VALUE_TRUE;\n            return;\n        case 'f':\n            _matchToken(\"false\", 1);\n            _nextToken = JsonToken.VALUE_FALSE;\n            return;\n        case 'n':\n            _matchToken(\"null\", 1);\n            _nextToken = JsonToken.VALUE_NULL;\n            return;\n        case '-':\n            _nextToken = _parseNegNumber();\n            return;\n        case '0':\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n            _nextToken = _parsePosNumber(i);\n            return;\n        }",
      "right" : "switch (i) {\n        case '\"':\n            _tokenIncomplete = true;\n            _nextToken = JsonToken.VALUE_STRING;\n            return;\n        case '[':\n            _nextToken = JsonToken.START_ARRAY;\n            return;\n        case '{':\n            _nextToken = JsonToken.START_OBJECT;\n            return;\n        case 't':\n            _matchToken(\"true\", 1);\n            _nextToken = JsonToken.VALUE_TRUE;\n            return;\n        case 'f':\n            _matchToken(\"false\", 1);\n            _nextToken = JsonToken.VALUE_FALSE;\n            return;\n        case 'n':\n            _matchToken(\"null\", 1);\n            _nextToken = JsonToken.VALUE_NULL;\n            return;\n        case '-':\n            _nextToken = _parseNegNumber();\n            return;\n        case '0':\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n            _nextToken = _parsePosNumber(i);\n            return;\n        }",
      "info" : "SwitchStatement[37262-38273]:SwitchStatement[37456-38467]"
    }, {
      "left" : "case '\"':",
      "right" : "case '\"':",
      "info" : "SwitchCase[37283-37292]:SwitchCase[37477-37486]"
    }, {
      "left" : "_tokenIncomplete = true;",
      "right" : "_tokenIncomplete = true;",
      "info" : "ExpressionStatement[37305-37329]:ExpressionStatement[37499-37523]"
    }, {
      "left" : "_nextToken = JsonToken.VALUE_STRING;",
      "right" : "_nextToken = JsonToken.VALUE_STRING;",
      "info" : "ExpressionStatement[37342-37378]:ExpressionStatement[37536-37572]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[37391-37398]:ReturnStatement[37585-37592]"
    }, {
      "left" : "case '[':",
      "right" : "case '[':",
      "info" : "SwitchCase[37407-37416]:SwitchCase[37601-37610]"
    }, {
      "left" : "_nextToken = JsonToken.START_ARRAY;",
      "right" : "_nextToken = JsonToken.START_ARRAY;",
      "info" : "ExpressionStatement[37429-37464]:ExpressionStatement[37623-37658]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[37477-37484]:ReturnStatement[37671-37678]"
    }, {
      "left" : "case '{':",
      "right" : "case '{':",
      "info" : "SwitchCase[37493-37502]:SwitchCase[37687-37696]"
    }, {
      "left" : "_nextToken = JsonToken.START_OBJECT;",
      "right" : "_nextToken = JsonToken.START_OBJECT;",
      "info" : "ExpressionStatement[37515-37551]:ExpressionStatement[37709-37745]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[37564-37571]:ReturnStatement[37758-37765]"
    }, {
      "left" : "case 't':",
      "right" : "case 't':",
      "info" : "SwitchCase[37580-37589]:SwitchCase[37774-37783]"
    }, {
      "left" : "_matchToken(\"true\", 1);",
      "right" : "_matchToken(\"true\", 1);",
      "info" : "ExpressionStatement[37602-37625]:ExpressionStatement[37796-37819]"
    }, {
      "left" : "_nextToken = JsonToken.VALUE_TRUE;",
      "right" : "_nextToken = JsonToken.VALUE_TRUE;",
      "info" : "ExpressionStatement[37638-37672]:ExpressionStatement[37832-37866]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[37685-37692]:ReturnStatement[37879-37886]"
    }, {
      "left" : "case 'f':",
      "right" : "case 'f':",
      "info" : "SwitchCase[37701-37710]:SwitchCase[37895-37904]"
    }, {
      "left" : "_matchToken(\"false\", 1);",
      "right" : "_matchToken(\"false\", 1);",
      "info" : "ExpressionStatement[37723-37747]:ExpressionStatement[37917-37941]"
    }, {
      "left" : "_nextToken = JsonToken.VALUE_FALSE;",
      "right" : "_nextToken = JsonToken.VALUE_FALSE;",
      "info" : "ExpressionStatement[37760-37795]:ExpressionStatement[37954-37989]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[37808-37815]:ReturnStatement[38002-38009]"
    }, {
      "left" : "case 'n':",
      "right" : "case 'n':",
      "info" : "SwitchCase[37824-37833]:SwitchCase[38018-38027]"
    }, {
      "left" : "_matchToken(\"null\", 1);",
      "right" : "_matchToken(\"null\", 1);",
      "info" : "ExpressionStatement[37846-37869]:ExpressionStatement[38040-38063]"
    }, {
      "left" : "_nextToken = JsonToken.VALUE_NULL;",
      "right" : "_nextToken = JsonToken.VALUE_NULL;",
      "info" : "ExpressionStatement[37882-37916]:ExpressionStatement[38076-38110]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[37929-37936]:ReturnStatement[38123-38130]"
    }, {
      "left" : "case '-':",
      "right" : "case '-':",
      "info" : "SwitchCase[37945-37954]:SwitchCase[38139-38148]"
    }, {
      "left" : "_nextToken = _parseNegNumber();",
      "right" : "_nextToken = _parseNegNumber();",
      "info" : "ExpressionStatement[37967-37998]:ExpressionStatement[38161-38192]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[38011-38018]:ReturnStatement[38205-38212]"
    }, {
      "left" : "case '0':",
      "right" : "case '0':",
      "info" : "SwitchCase[38027-38036]:SwitchCase[38221-38230]"
    }, {
      "left" : "case '1':",
      "right" : "case '1':",
      "info" : "SwitchCase[38045-38054]:SwitchCase[38239-38248]"
    }, {
      "left" : "case '2':",
      "right" : "case '2':",
      "info" : "SwitchCase[38063-38072]:SwitchCase[38257-38266]"
    }, {
      "left" : "case '3':",
      "right" : "case '3':",
      "info" : "SwitchCase[38081-38090]:SwitchCase[38275-38284]"
    }, {
      "left" : "case '4':",
      "right" : "case '4':",
      "info" : "SwitchCase[38099-38108]:SwitchCase[38293-38302]"
    }, {
      "left" : "case '5':",
      "right" : "case '5':",
      "info" : "SwitchCase[38117-38126]:SwitchCase[38311-38320]"
    }, {
      "left" : "case '6':",
      "right" : "case '6':",
      "info" : "SwitchCase[38135-38144]:SwitchCase[38329-38338]"
    }, {
      "left" : "case '7':",
      "right" : "case '7':",
      "info" : "SwitchCase[38153-38162]:SwitchCase[38347-38356]"
    }, {
      "left" : "case '8':",
      "right" : "case '8':",
      "info" : "SwitchCase[38171-38180]:SwitchCase[38365-38374]"
    }, {
      "left" : "case '9':",
      "right" : "case '9':",
      "info" : "SwitchCase[38189-38198]:SwitchCase[38383-38392]"
    }, {
      "left" : "_nextToken = _parsePosNumber(i);",
      "right" : "_nextToken = _parsePosNumber(i);",
      "info" : "ExpressionStatement[38211-38243]:ExpressionStatement[38405-38437]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[38256-38263]:ReturnStatement[38450-38457]"
    }, {
      "left" : "_nextToken = _handleUnexpectedValue(i);",
      "right" : "_nextToken = _handleUnexpectedValue(i);",
      "info" : "ExpressionStatement[38282-38321]:ExpressionStatement[38476-38515]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38440-39905]:Block[38634-40099]"
    }, {
      "left" : "String n = _parseName(i);",
      "right" : "String n = _parseName(i);",
      "info" : "VariableDeclarationStatement[38509-38534]:VariableDeclarationStatement[38703-38728]"
    }, {
      "left" : "_parsingContext.setCurrentName(n);",
      "right" : "_parsingContext.setCurrentName(n);",
      "info" : "ExpressionStatement[38543-38577]:ExpressionStatement[38737-38771]"
    }, {
      "left" : "final boolean match = n.equals(str.getValue());",
      "right" : "final boolean match = n.equals(str.getValue());",
      "info" : "VariableDeclarationStatement[38586-38633]:VariableDeclarationStatement[38780-38827]"
    }, {
      "left" : "_currToken = JsonToken.FIELD_NAME;",
      "right" : "_currToken = JsonToken.FIELD_NAME;",
      "info" : "ExpressionStatement[38642-38676]:ExpressionStatement[38836-38870]"
    }, {
      "left" : "i = _skipColon();",
      "right" : "i = _skipColon();",
      "info" : "ExpressionStatement[38685-38702]:ExpressionStatement[38879-38896]"
    }, {
      "left" : "if (i == INT_QUOTE)",
      "right" : "if (i == INT_QUOTE)",
      "info" : "IfStatement[38801-38944]:IfStatement[38995-39138]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38821-38944]:Block[39015-39138]"
    }, {
      "left" : "_tokenIncomplete = true;",
      "right" : "_tokenIncomplete = true;",
      "info" : "ExpressionStatement[38835-38859]:ExpressionStatement[39029-39053]"
    }, {
      "left" : "_nextToken = JsonToken.VALUE_STRING;",
      "right" : "_nextToken = JsonToken.VALUE_STRING;",
      "info" : "ExpressionStatement[38872-38908]:ExpressionStatement[39066-39102]"
    }, {
      "left" : "return match;",
      "right" : "return match;",
      "info" : "ReturnStatement[38921-38934]:ReturnStatement[39115-39128]"
    }, {
      "left" : "JsonToken t;",
      "right" : "JsonToken t;",
      "info" : "VariableDeclarationStatement[38953-38965]:VariableDeclarationStatement[39147-39159]"
    }, {
      "left" : "switch (i) {\n        case '[':\n            t = JsonToken.START_ARRAY;\n            break;\n        case '{':\n            t = JsonToken.START_OBJECT;\n            break;\n        case 't':\n            _matchToken(\"true\", 1);\n            t = JsonToken.VALUE_TRUE;\n            break;\n        case 'f':\n            _matchToken(\"false\", 1);\n             t = JsonToken.VALUE_FALSE;\n            break;\n        case 'n':\n            _matchToken(\"null\", 1);\n            t = JsonToken.VALUE_NULL;\n            break;\n        case '-':\n            t = _parseNegNumber();\n            break;\n        case '0':\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n            t = _parsePosNumber(i);\n            break;\n        default:\n            t = _handleUnexpectedValue(i);\n        }",
      "right" : "switch (i) {\n        case '[':\n            t = JsonToken.START_ARRAY;\n            break;\n        case '{':\n            t = JsonToken.START_OBJECT;\n            break;\n        case 't':\n            _matchToken(\"true\", 1);\n            t = JsonToken.VALUE_TRUE;\n            break;\n        case 'f':\n            _matchToken(\"false\", 1);\n             t = JsonToken.VALUE_FALSE;\n            break;\n        case 'n':\n            _matchToken(\"null\", 1);\n            t = JsonToken.VALUE_NULL;\n            break;\n        case '-':\n            t = _parseNegNumber();\n            break;\n        case '0':\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n            t = _parsePosNumber(i);\n            break;\n        default:\n            t = _handleUnexpectedValue(i);\n        }",
      "info" : "SwitchStatement[38975-39853]:SwitchStatement[39169-40047]"
    }, {
      "left" : "case '[':",
      "right" : "case '[':",
      "info" : "SwitchCase[38996-39005]:SwitchCase[39190-39199]"
    }, {
      "left" : "t = JsonToken.START_ARRAY;",
      "right" : "t = JsonToken.START_ARRAY;",
      "info" : "ExpressionStatement[39018-39044]:ExpressionStatement[39212-39238]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[39057-39063]:BreakStatement[39251-39257]"
    }, {
      "left" : "case '{':",
      "right" : "case '{':",
      "info" : "SwitchCase[39072-39081]:SwitchCase[39266-39275]"
    }, {
      "left" : "t = JsonToken.START_OBJECT;",
      "right" : "t = JsonToken.START_OBJECT;",
      "info" : "ExpressionStatement[39094-39121]:ExpressionStatement[39288-39315]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[39134-39140]:BreakStatement[39328-39334]"
    }, {
      "left" : "case 't':",
      "right" : "case 't':",
      "info" : "SwitchCase[39149-39158]:SwitchCase[39343-39352]"
    }, {
      "left" : "_matchToken(\"true\", 1);",
      "right" : "_matchToken(\"true\", 1);",
      "info" : "ExpressionStatement[39171-39194]:ExpressionStatement[39365-39388]"
    }, {
      "left" : "t = JsonToken.VALUE_TRUE;",
      "right" : "t = JsonToken.VALUE_TRUE;",
      "info" : "ExpressionStatement[39207-39232]:ExpressionStatement[39401-39426]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[39245-39251]:BreakStatement[39439-39445]"
    }, {
      "left" : "case 'f':",
      "right" : "case 'f':",
      "info" : "SwitchCase[39260-39269]:SwitchCase[39454-39463]"
    }, {
      "left" : "_matchToken(\"false\", 1);",
      "right" : "_matchToken(\"false\", 1);",
      "info" : "ExpressionStatement[39282-39306]:ExpressionStatement[39476-39500]"
    }, {
      "left" : "t = JsonToken.VALUE_FALSE;",
      "right" : "t = JsonToken.VALUE_FALSE;",
      "info" : "ExpressionStatement[39320-39346]:ExpressionStatement[39514-39540]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[39359-39365]:BreakStatement[39553-39559]"
    }, {
      "left" : "case 'n':",
      "right" : "case 'n':",
      "info" : "SwitchCase[39374-39383]:SwitchCase[39568-39577]"
    }, {
      "left" : "_matchToken(\"null\", 1);",
      "right" : "_matchToken(\"null\", 1);",
      "info" : "ExpressionStatement[39396-39419]:ExpressionStatement[39590-39613]"
    }, {
      "left" : "t = JsonToken.VALUE_NULL;",
      "right" : "t = JsonToken.VALUE_NULL;",
      "info" : "ExpressionStatement[39432-39457]:ExpressionStatement[39626-39651]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[39470-39476]:BreakStatement[39664-39670]"
    }, {
      "left" : "case '-':",
      "right" : "case '-':",
      "info" : "SwitchCase[39485-39494]:SwitchCase[39679-39688]"
    }, {
      "left" : "t = _parseNegNumber();",
      "right" : "t = _parseNegNumber();",
      "info" : "ExpressionStatement[39507-39529]:ExpressionStatement[39701-39723]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[39542-39548]:BreakStatement[39736-39742]"
    }, {
      "left" : "case '0':",
      "right" : "case '0':",
      "info" : "SwitchCase[39557-39566]:SwitchCase[39751-39760]"
    }, {
      "left" : "case '1':",
      "right" : "case '1':",
      "info" : "SwitchCase[39575-39584]:SwitchCase[39769-39778]"
    }, {
      "left" : "case '2':",
      "right" : "case '2':",
      "info" : "SwitchCase[39593-39602]:SwitchCase[39787-39796]"
    }, {
      "left" : "case '3':",
      "right" : "case '3':",
      "info" : "SwitchCase[39611-39620]:SwitchCase[39805-39814]"
    }, {
      "left" : "case '4':",
      "right" : "case '4':",
      "info" : "SwitchCase[39629-39638]:SwitchCase[39823-39832]"
    }, {
      "left" : "case '5':",
      "right" : "case '5':",
      "info" : "SwitchCase[39647-39656]:SwitchCase[39841-39850]"
    }, {
      "left" : "case '6':",
      "right" : "case '6':",
      "info" : "SwitchCase[39665-39674]:SwitchCase[39859-39868]"
    }, {
      "left" : "case '7':",
      "right" : "case '7':",
      "info" : "SwitchCase[39683-39692]:SwitchCase[39877-39886]"
    }, {
      "left" : "case '8':",
      "right" : "case '8':",
      "info" : "SwitchCase[39701-39710]:SwitchCase[39895-39904]"
    }, {
      "left" : "case '9':",
      "right" : "case '9':",
      "info" : "SwitchCase[39719-39728]:SwitchCase[39913-39922]"
    }, {
      "left" : "t = _parsePosNumber(i);",
      "right" : "t = _parsePosNumber(i);",
      "info" : "ExpressionStatement[39741-39764]:ExpressionStatement[39935-39958]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[39777-39783]:BreakStatement[39971-39977]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[39792-39800]:SwitchCase[39986-39994]"
    }, {
      "left" : "t = _handleUnexpectedValue(i);",
      "right" : "t = _handleUnexpectedValue(i);",
      "info" : "ExpressionStatement[39813-39843]:ExpressionStatement[40007-40037]"
    }, {
      "left" : "_nextToken = t;",
      "right" : "_nextToken = t;",
      "info" : "ExpressionStatement[39862-39877]:ExpressionStatement[40056-40071]"
    }, {
      "left" : "return match;",
      "right" : "return match;",
      "info" : "ReturnStatement[39886-39899]:ReturnStatement[40080-40093]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39978-41045]:Block[40172-41239]"
    }, {
      "left" : "if (_currToken == JsonToken.FIELD_NAME)",
      "right" : "if (_currToken == JsonToken.FIELD_NAME)",
      "info" : "IfStatement[40069-40916]:IfStatement[40263-41110]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40109-40916]:Block[40303-41110]"
    }, {
      "left" : "_nameCopied = false;",
      "right" : "_nameCopied = false;",
      "info" : "ExpressionStatement[40162-40182]:ExpressionStatement[40356-40376]"
    }, {
      "left" : "JsonToken t = _nextToken;",
      "right" : "JsonToken t = _nextToken;",
      "info" : "VariableDeclarationStatement[40195-40220]:VariableDeclarationStatement[40389-40414]"
    }, {
      "left" : "_nextToken = null;",
      "right" : "_nextToken = null;",
      "info" : "ExpressionStatement[40233-40251]:ExpressionStatement[40427-40445]"
    }, {
      "left" : "_currToken = t;",
      "right" : "_currToken = t;",
      "info" : "ExpressionStatement[40264-40279]:ExpressionStatement[40458-40473]"
    }, {
      "left" : "if (t == JsonToken.VALUE_STRING)",
      "right" : "if (t == JsonToken.VALUE_STRING)",
      "info" : "IfStatement[40292-40552]:IfStatement[40486-40746]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40325-40552]:Block[40519-40746]"
    }, {
      "left" : "if (_tokenIncomplete)",
      "right" : "if (_tokenIncomplete)",
      "info" : "IfStatement[40343-40483]:IfStatement[40537-40677]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40365-40483]:Block[40559-40677]"
    }, {
      "left" : "_tokenIncomplete = false;",
      "right" : "_tokenIncomplete = false;",
      "info" : "ExpressionStatement[40387-40412]:ExpressionStatement[40581-40606]"
    }, {
      "left" : "return _finishAndReturnString();",
      "right" : "return _finishAndReturnString();",
      "info" : "ReturnStatement[40433-40465]:ReturnStatement[40627-40659]"
    }, {
      "left" : "return _textBuffer.contentsAsString();",
      "right" : "return _textBuffer.contentsAsString();",
      "info" : "ReturnStatement[40500-40538]:ReturnStatement[40694-40732]"
    }, {
      "left" : "if (t == JsonToken.START_ARRAY)",
      "right" : "if (t == JsonToken.START_ARRAY)",
      "info" : "IfStatement[40565-40881]:IfStatement[40759-41075]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40597-40719]:Block[40791-40913]"
    }, {
      "left" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
      "right" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
      "info" : "ExpressionStatement[40615-40705]:ExpressionStatement[40809-40899]"
    }, {
      "left" : "if (t == JsonToken.START_OBJECT)",
      "right" : "if (t == JsonToken.START_OBJECT)",
      "info" : "IfStatement[40725-40881]:IfStatement[40919-41075]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40758-40881]:Block[40952-41075]"
    }, {
      "left" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
      "right" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
      "info" : "ExpressionStatement[40776-40867]:ExpressionStatement[40970-41061]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[40894-40906]:ReturnStatement[41088-41100]"
    }, {
      "left" : "return (nextToken() == JsonToken.VALUE_STRING) ? getText() : null;",
      "right" : "return (nextToken() == JsonToken.VALUE_STRING) ? getText() : null;",
      "info" : "ReturnStatement[40973-41039]:ReturnStatement[41167-41233]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41130-42051]:Block[41324-42245]"
    }, {
      "left" : "if (_currToken == JsonToken.FIELD_NAME)",
      "right" : "if (_currToken == JsonToken.FIELD_NAME)",
      "info" : "IfStatement[41221-41906]:IfStatement[41415-42100]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41261-41906]:Block[41455-42100]"
    }, {
      "left" : "_nameCopied = false;",
      "right" : "_nameCopied = false;",
      "info" : "ExpressionStatement[41314-41334]:ExpressionStatement[41508-41528]"
    }, {
      "left" : "JsonToken t = _nextToken;",
      "right" : "JsonToken t = _nextToken;",
      "info" : "VariableDeclarationStatement[41347-41372]:VariableDeclarationStatement[41541-41566]"
    }, {
      "left" : "_nextToken = null;",
      "right" : "_nextToken = null;",
      "info" : "ExpressionStatement[41385-41403]:ExpressionStatement[41579-41597]"
    }, {
      "left" : "_currToken = t;",
      "right" : "_currToken = t;",
      "info" : "ExpressionStatement[41416-41431]:ExpressionStatement[41610-41625]"
    }, {
      "left" : "if (t == JsonToken.VALUE_NUMBER_INT)",
      "right" : "if (t == JsonToken.VALUE_NUMBER_INT)",
      "info" : "IfStatement[41444-41534]:IfStatement[41638-41728]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41481-41534]:Block[41675-41728]"
    }, {
      "left" : "return getIntValue();",
      "right" : "return getIntValue();",
      "info" : "ReturnStatement[41499-41520]:ReturnStatement[41693-41714]"
    }, {
      "left" : "if (t == JsonToken.START_ARRAY)",
      "right" : "if (t == JsonToken.START_ARRAY)",
      "info" : "IfStatement[41547-41863]:IfStatement[41741-42057]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41579-41701]:Block[41773-41895]"
    }, {
      "left" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
      "right" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
      "info" : "ExpressionStatement[41597-41687]:ExpressionStatement[41791-41881]"
    }, {
      "left" : "if (t == JsonToken.START_OBJECT)",
      "right" : "if (t == JsonToken.START_OBJECT)",
      "info" : "IfStatement[41707-41863]:IfStatement[41901-42057]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41740-41863]:Block[41934-42057]"
    }, {
      "left" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
      "right" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
      "info" : "ExpressionStatement[41758-41849]:ExpressionStatement[41952-42043]"
    }, {
      "left" : "return defaultValue;",
      "right" : "return defaultValue;",
      "info" : "ReturnStatement[41876-41896]:ReturnStatement[42070-42090]"
    }, {
      "left" : "return (nextToken() == JsonToken.VALUE_NUMBER_INT) ? getIntValue() : defaultValue;",
      "right" : "return (nextToken() == JsonToken.VALUE_NUMBER_INT) ? getIntValue() : defaultValue;",
      "info" : "ReturnStatement[41963-42045]:ReturnStatement[42157-42239]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42139-43062]:Block[42333-43256]"
    }, {
      "left" : "if (_currToken == JsonToken.FIELD_NAME)",
      "right" : "if (_currToken == JsonToken.FIELD_NAME)",
      "info" : "IfStatement[42230-42916]:IfStatement[42424-43110]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42270-42916]:Block[42464-43110]"
    }, {
      "left" : "_nameCopied = false;",
      "right" : "_nameCopied = false;",
      "info" : "ExpressionStatement[42323-42343]:ExpressionStatement[42517-42537]"
    }, {
      "left" : "JsonToken t = _nextToken;",
      "right" : "JsonToken t = _nextToken;",
      "info" : "VariableDeclarationStatement[42356-42381]:VariableDeclarationStatement[42550-42575]"
    }, {
      "left" : "_nextToken = null;",
      "right" : "_nextToken = null;",
      "info" : "ExpressionStatement[42394-42412]:ExpressionStatement[42588-42606]"
    }, {
      "left" : "_currToken = t;",
      "right" : "_currToken = t;",
      "info" : "ExpressionStatement[42425-42440]:ExpressionStatement[42619-42634]"
    }, {
      "left" : "if (t == JsonToken.VALUE_NUMBER_INT)",
      "right" : "if (t == JsonToken.VALUE_NUMBER_INT)",
      "info" : "IfStatement[42453-42544]:IfStatement[42647-42738]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42490-42544]:Block[42684-42738]"
    }, {
      "left" : "return getLongValue();",
      "right" : "return getLongValue();",
      "info" : "ReturnStatement[42508-42530]:ReturnStatement[42702-42724]"
    }, {
      "left" : "if (t == JsonToken.START_ARRAY)",
      "right" : "if (t == JsonToken.START_ARRAY)",
      "info" : "IfStatement[42557-42873]:IfStatement[42751-43067]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42589-42711]:Block[42783-42905]"
    }, {
      "left" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
      "right" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
      "info" : "ExpressionStatement[42607-42697]:ExpressionStatement[42801-42891]"
    }, {
      "left" : "if (t == JsonToken.START_OBJECT)",
      "right" : "if (t == JsonToken.START_OBJECT)",
      "info" : "IfStatement[42717-42873]:IfStatement[42911-43067]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42750-42873]:Block[42944-43067]"
    }, {
      "left" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
      "right" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
      "info" : "ExpressionStatement[42768-42859]:ExpressionStatement[42962-43053]"
    }, {
      "left" : "return defaultValue;",
      "right" : "return defaultValue;",
      "info" : "ReturnStatement[42886-42906]:ReturnStatement[43080-43100]"
    }, {
      "left" : "return (nextToken() == JsonToken.VALUE_NUMBER_INT) ? getLongValue() : defaultValue;",
      "right" : "return (nextToken() == JsonToken.VALUE_NUMBER_INT) ? getLongValue() : defaultValue;",
      "info" : "ReturnStatement[42973-43056]:ReturnStatement[43167-43250]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43139-44205]:Block[43333-44399]"
    }, {
      "left" : "if (_currToken == JsonToken.FIELD_NAME)",
      "right" : "if (_currToken == JsonToken.FIELD_NAME)",
      "info" : "IfStatement[43230-43998]:IfStatement[43424-44192]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43270-43998]:Block[43464-44192]"
    }, {
      "left" : "_nameCopied = false;",
      "right" : "_nameCopied = false;",
      "info" : "ExpressionStatement[43323-43343]:ExpressionStatement[43517-43537]"
    }, {
      "left" : "JsonToken t = _nextToken;",
      "right" : "JsonToken t = _nextToken;",
      "info" : "VariableDeclarationStatement[43356-43381]:VariableDeclarationStatement[43550-43575]"
    }, {
      "left" : "_nextToken = null;",
      "right" : "_nextToken = null;",
      "info" : "ExpressionStatement[43394-43412]:ExpressionStatement[43588-43606]"
    }, {
      "left" : "_currToken = t;",
      "right" : "_currToken = t;",
      "info" : "ExpressionStatement[43425-43440]:ExpressionStatement[43619-43634]"
    }, {
      "left" : "if (t == JsonToken.VALUE_TRUE)",
      "right" : "if (t == JsonToken.VALUE_TRUE)",
      "info" : "IfStatement[43453-43536]:IfStatement[43647-43730]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43484-43536]:Block[43678-43730]"
    }, {
      "left" : "return Boolean.TRUE;",
      "right" : "return Boolean.TRUE;",
      "info" : "ReturnStatement[43502-43522]:ReturnStatement[43696-43716]"
    }, {
      "left" : "if (t == JsonToken.VALUE_FALSE)",
      "right" : "if (t == JsonToken.VALUE_FALSE)",
      "info" : "IfStatement[43549-43634]:IfStatement[43743-43828]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43581-43634]:Block[43775-43828]"
    }, {
      "left" : "return Boolean.FALSE;",
      "right" : "return Boolean.FALSE;",
      "info" : "ReturnStatement[43599-43620]:ReturnStatement[43793-43814]"
    }, {
      "left" : "if (t == JsonToken.START_ARRAY)",
      "right" : "if (t == JsonToken.START_ARRAY)",
      "info" : "IfStatement[43647-43963]:IfStatement[43841-44157]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43679-43801]:Block[43873-43995]"
    }, {
      "left" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
      "right" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
      "info" : "ExpressionStatement[43697-43787]:ExpressionStatement[43891-43981]"
    }, {
      "left" : "if (t == JsonToken.START_OBJECT)",
      "right" : "if (t == JsonToken.START_OBJECT)",
      "info" : "IfStatement[43807-43963]:IfStatement[44001-44157]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43840-43963]:Block[44034-44157]"
    }, {
      "left" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
      "right" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
      "info" : "ExpressionStatement[43858-43949]:ExpressionStatement[44052-44143]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[43976-43988]:ReturnStatement[44170-44182]"
    }, {
      "left" : "switch (nextToken().id()) {\n        case ID_TRUE:\n            return Boolean.TRUE;\n        case ID_FALSE:\n            return Boolean.FALSE;\n        default:\n            return null;\n        }",
      "right" : "switch (nextToken().id()) {\n        case ID_TRUE:\n            return Boolean.TRUE;\n        case ID_FALSE:\n            return Boolean.FALSE;\n        default:\n            return null;\n        }",
      "info" : "SwitchStatement[44008-44199]:SwitchStatement[44202-44393]"
    }, {
      "left" : "case ID_TRUE:",
      "right" : "case ID_TRUE:",
      "info" : "SwitchCase[44044-44057]:SwitchCase[44238-44251]"
    }, {
      "left" : "return Boolean.TRUE;",
      "right" : "return Boolean.TRUE;",
      "info" : "ReturnStatement[44070-44090]:ReturnStatement[44264-44284]"
    }, {
      "left" : "case ID_FALSE:",
      "right" : "case ID_FALSE:",
      "info" : "SwitchCase[44099-44113]:SwitchCase[44293-44307]"
    }, {
      "left" : "return Boolean.FALSE;",
      "right" : "return Boolean.FALSE;",
      "info" : "ReturnStatement[44126-44147]:ReturnStatement[44320-44341]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[44156-44164]:SwitchCase[44350-44358]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[44177-44189]:ReturnStatement[44371-44383]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45244-46760]:Block[45438-46954]"
    }, {
      "left" : "char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();",
      "right" : "char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();",
      "info" : "VariableDeclarationStatement[45254-45310]:VariableDeclarationStatement[45448-45504]"
    }, {
      "left" : "if (c == INT_0)",
      "right" : "if (c == INT_0)",
      "info" : "IfStatement[45400-45469]:IfStatement[45594-45663]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45416-45469]:Block[45610-45663]"
    }, {
      "left" : "c = _verifyNoLeadingZeroes();",
      "right" : "c = _verifyNoLeadingZeroes();",
      "info" : "ExpressionStatement[45430-45459]:ExpressionStatement[45624-45653]"
    }, {
      "left" : "outBuf[0] = (char) c;",
      "right" : "outBuf[0] = (char) c;",
      "info" : "ExpressionStatement[45535-45556]:ExpressionStatement[45729-45750]"
    }, {
      "left" : "int intLen = 1;",
      "right" : "int intLen = 1;",
      "info" : "VariableDeclarationStatement[45565-45580]:VariableDeclarationStatement[45759-45774]"
    }, {
      "left" : "int outPtr = 1;",
      "right" : "int outPtr = 1;",
      "info" : "VariableDeclarationStatement[45589-45604]:VariableDeclarationStatement[45783-45798]"
    }, {
      "left" : "int end = _inputPtr + outBuf.length - 1;",
      "right" : "int end = _inputPtr + outBuf.length - 1;",
      "info" : "VariableDeclarationStatement[45725-45765]:VariableDeclarationStatement[45919-45959]"
    }, {
      "left" : "if (end > _inputEnd)",
      "right" : "if (end > _inputEnd)",
      "info" : "IfStatement[45789-45850]:IfStatement[45983-46044]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45810-45850]:Block[46004-46044]"
    }, {
      "left" : "end = _inputEnd;",
      "right" : "end = _inputEnd;",
      "info" : "ExpressionStatement[45824-45840]:ExpressionStatement[46018-46034]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[45912-46287]:WhileStatement[46106-46481]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45925-46287]:Block[46119-46481]"
    }, {
      "left" : "if (_inputPtr >= end)",
      "right" : "if (_inputPtr >= end)",
      "info" : "IfStatement[45939-46079]:IfStatement[46133-46273]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45961-46079]:Block[46155-46273]"
    }, {
      "left" : "return _parseNumber2(outBuf, outPtr, false, intLen);",
      "right" : "return _parseNumber2(outBuf, outPtr, false, intLen);",
      "info" : "ReturnStatement[46013-46065]:ReturnStatement[46207-46259]"
    }, {
      "left" : "c = (int) _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "c = (int) _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[46092-46135]:ExpressionStatement[46286-46329]"
    }, {
      "left" : "if (c < INT_0 || c > INT_9)",
      "right" : "if (c < INT_0 || c > INT_9)",
      "info" : "IfStatement[46148-46214]:IfStatement[46342-46408]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46176-46214]:Block[46370-46408]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[46194-46200]:BreakStatement[46388-46394]"
    }, {
      "left" : "++intLen;",
      "right" : "++intLen;",
      "info" : "ExpressionStatement[46227-46236]:ExpressionStatement[46421-46430]"
    }, {
      "left" : "outBuf[outPtr++] = (char) c;",
      "right" : "outBuf[outPtr++] = (char) c;",
      "info" : "ExpressionStatement[46249-46277]:ExpressionStatement[46443-46471]"
    }, {
      "left" : "if (c == '.' || c == 'e' || c == 'E')",
      "right" : "if (c == '.' || c == 'e' || c == 'E')",
      "info" : "IfStatement[46296-46411]:IfStatement[46490-46605]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46334-46411]:Block[46528-46605]"
    }, {
      "left" : "return _parseFloat(outBuf, outPtr, c, false, intLen);",
      "right" : "return _parseFloat(outBuf, outPtr, c, false, intLen);",
      "info" : "ReturnStatement[46348-46401]:ReturnStatement[46542-46595]"
    }, {
      "left" : "--_inputPtr;",
      "right" : "--_inputPtr;",
      "info" : "ExpressionStatement[46420-46432]:ExpressionStatement[46614-46626]"
    }, {
      "left" : "_textBuffer.setCurrentLength(outPtr);",
      "right" : "_textBuffer.setCurrentLength(outPtr);",
      "info" : "ExpressionStatement[46483-46520]:ExpressionStatement[46677-46714]"
    }, {
      "left" : "if (_parsingContext.inRoot())",
      "right" : "if (_parsingContext.inRoot())",
      "info" : "IfStatement[46607-46681]:IfStatement[46801-46875]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46637-46681]:Block[46831-46875]"
    }, {
      "left" : "_verifyRootSpace(c);",
      "right" : "_verifyRootSpace(c);",
      "info" : "ExpressionStatement[46651-46671]:ExpressionStatement[46845-46865]"
    }, {
      "left" : "return resetInt(false, intLen);",
      "right" : "return resetInt(false, intLen);",
      "info" : "ReturnStatement[46723-46754]:ReturnStatement[46917-46948]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46831-48791]:Block[47025-48985]"
    }, {
      "left" : "char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();",
      "right" : "char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();",
      "info" : "VariableDeclarationStatement[46841-46897]:VariableDeclarationStatement[47035-47091]"
    }, {
      "left" : "int outPtr = 0;",
      "right" : "int outPtr = 0;",
      "info" : "VariableDeclarationStatement[46906-46921]:VariableDeclarationStatement[47100-47115]"
    }, {
      "left" : "outBuf[outPtr++] = '-';",
      "right" : "outBuf[outPtr++] = '-';",
      "info" : "ExpressionStatement[46964-46987]:ExpressionStatement[47158-47181]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[47042-47115]:IfStatement[47236-47309]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47070-47115]:Block[47264-47309]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[47084-47105]:ExpressionStatement[47278-47299]"
    }, {
      "left" : "int c = (int) _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "int c = (int) _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "VariableDeclarationStatement[47124-47171]:VariableDeclarationStatement[47318-47365]"
    }, {
      "left" : "if (c < INT_0 || c > INT_9)",
      "right" : "if (c < INT_0 || c > INT_9)",
      "info" : "IfStatement[47225-47319]:IfStatement[47419-47513]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47253-47319]:Block[47447-47513]"
    }, {
      "left" : "return _handleInvalidNumberStart(c, true);",
      "right" : "return _handleInvalidNumberStart(c, true);",
      "info" : "ReturnStatement[47267-47309]:ReturnStatement[47461-47503]"
    }, {
      "left" : "if (c == INT_0)",
      "right" : "if (c == INT_0)",
      "info" : "IfStatement[47410-47479]:IfStatement[47604-47673]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47426-47479]:Block[47620-47673]"
    }, {
      "left" : "c = _verifyNoLeadingZeroes();",
      "right" : "c = _verifyNoLeadingZeroes();",
      "info" : "ExpressionStatement[47440-47469]:ExpressionStatement[47634-47663]"
    }, {
      "left" : "outBuf[outPtr++] = (char) c;",
      "right" : "outBuf[outPtr++] = (char) c;",
      "info" : "ExpressionStatement[47554-47582]:ExpressionStatement[47748-47776]"
    }, {
      "left" : "int intLen = 1;",
      "right" : "int intLen = 1;",
      "info" : "VariableDeclarationStatement[47591-47606]:VariableDeclarationStatement[47785-47800]"
    }, {
      "left" : "int end = _inputPtr + outBuf.length - outPtr;",
      "right" : "int end = _inputPtr + outBuf.length - outPtr;",
      "info" : "VariableDeclarationStatement[47728-47773]:VariableDeclarationStatement[47922-47967]"
    }, {
      "left" : "if (end > _inputEnd)",
      "right" : "if (end > _inputEnd)",
      "info" : "IfStatement[47782-47843]:IfStatement[47976-48037]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47803-47843]:Block[47997-48037]"
    }, {
      "left" : "end = _inputEnd;",
      "right" : "end = _inputEnd;",
      "info" : "ExpressionStatement[47817-47833]:ExpressionStatement[48011-48027]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[47906-48310]:WhileStatement[48100-48504]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47919-48310]:Block[48113-48504]"
    }, {
      "left" : "if (_inputPtr >= end)",
      "right" : "if (_inputPtr >= end)",
      "info" : "IfStatement[47933-48102]:IfStatement[48127-48296]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47955-48102]:Block[48149-48296]"
    }, {
      "left" : "return _parseNumber2(outBuf, outPtr, true, intLen);",
      "right" : "return _parseNumber2(outBuf, outPtr, true, intLen);",
      "info" : "ReturnStatement[48037-48088]:ReturnStatement[48231-48282]"
    }, {
      "left" : "c = (int) _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "c = (int) _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[48115-48158]:ExpressionStatement[48309-48352]"
    }, {
      "left" : "if (c < INT_0 || c > INT_9)",
      "right" : "if (c < INT_0 || c > INT_9)",
      "info" : "IfStatement[48171-48237]:IfStatement[48365-48431]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48199-48237]:Block[48393-48431]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[48217-48223]:BreakStatement[48411-48417]"
    }, {
      "left" : "++intLen;",
      "right" : "++intLen;",
      "info" : "ExpressionStatement[48250-48259]:ExpressionStatement[48444-48453]"
    }, {
      "left" : "outBuf[outPtr++] = (char) c;",
      "right" : "outBuf[outPtr++] = (char) c;",
      "info" : "ExpressionStatement[48272-48300]:ExpressionStatement[48466-48494]"
    }, {
      "left" : "if (c == '.' || c == 'e' || c == 'E')",
      "right" : "if (c == '.' || c == 'e' || c == 'E')",
      "info" : "IfStatement[48319-48433]:IfStatement[48513-48627]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48357-48433]:Block[48551-48627]"
    }, {
      "left" : "return _parseFloat(outBuf, outPtr, c, true, intLen);",
      "right" : "return _parseFloat(outBuf, outPtr, c, true, intLen);",
      "info" : "ReturnStatement[48371-48423]:ReturnStatement[48565-48617]"
    }, {
      "left" : "--_inputPtr;",
      "right" : "--_inputPtr;",
      "info" : "ExpressionStatement[48451-48463]:ExpressionStatement[48645-48657]"
    }, {
      "left" : "_textBuffer.setCurrentLength(outPtr);",
      "right" : "_textBuffer.setCurrentLength(outPtr);",
      "info" : "ExpressionStatement[48514-48551]:ExpressionStatement[48708-48745]"
    }, {
      "left" : "if (_parsingContext.inRoot())",
      "right" : "if (_parsingContext.inRoot())",
      "info" : "IfStatement[48638-48712]:IfStatement[48832-48906]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48668-48712]:Block[48862-48906]"
    }, {
      "left" : "_verifyRootSpace(c);",
      "right" : "_verifyRootSpace(c);",
      "info" : "ExpressionStatement[48682-48702]:ExpressionStatement[48876-48896]"
    }, {
      "left" : "return resetInt(true, intLen);",
      "right" : "return resetInt(true, intLen);",
      "info" : "ReturnStatement[48755-48785]:ReturnStatement[48949-48979]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49091-50262]:Block[49285-50456]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[49131-49862]:WhileStatement[49325-50056]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49144-49862]:Block[49338-50056]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd && !loadMore())",
      "right" : "if (_inputPtr >= _inputEnd && !loadMore())",
      "info" : "IfStatement[49158-49328]:IfStatement[49352-49522]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49201-49328]:Block[49395-49522]"
    }, {
      "left" : "_textBuffer.setCurrentLength(outPtr);",
      "right" : "_textBuffer.setCurrentLength(outPtr);",
      "info" : "ExpressionStatement[49219-49256]:ExpressionStatement[49413-49450]"
    }, {
      "left" : "return resetInt(negative, intPartLength);",
      "right" : "return resetInt(negative, intPartLength);",
      "info" : "ReturnStatement[49273-49314]:ReturnStatement[49467-49508]"
    }, {
      "left" : "int c = (int) _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "int c = (int) _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "VariableDeclarationStatement[49341-49388]:VariableDeclarationStatement[49535-49582]"
    }, {
      "left" : "if (c > INT_9 || c < INT_0)",
      "right" : "if (c > INT_9 || c < INT_0)",
      "info" : "IfStatement[49401-49636]:IfStatement[49595-49830]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49429-49636]:Block[49623-49830]"
    }, {
      "left" : "if (c == INT_PERIOD || c == INT_e || c == INT_E)",
      "right" : "if (c == INT_PERIOD || c == INT_e || c == INT_E)",
      "info" : "IfStatement[49447-49599]:IfStatement[49641-49793]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49496-49599]:Block[49690-49793]"
    }, {
      "left" : "return _parseFloat(outBuf, outPtr, c, negative, intPartLength);",
      "right" : "return _parseFloat(outBuf, outPtr, c, negative, intPartLength);",
      "info" : "ReturnStatement[49518-49581]:ReturnStatement[49712-49775]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[49616-49622]:BreakStatement[49810-49816]"
    }, {
      "left" : "if (outPtr >= outBuf.length)",
      "right" : "if (outPtr >= outBuf.length)",
      "info" : "IfStatement[49649-49782]:IfStatement[49843-49976]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49678-49782]:Block[49872-49976]"
    }, {
      "left" : "outBuf = _textBuffer.finishCurrentSegment();",
      "right" : "outBuf = _textBuffer.finishCurrentSegment();",
      "info" : "ExpressionStatement[49696-49740]:ExpressionStatement[49890-49934]"
    }, {
      "left" : "outPtr = 0;",
      "right" : "outPtr = 0;",
      "info" : "ExpressionStatement[49757-49768]:ExpressionStatement[49951-49962]"
    }, {
      "left" : "outBuf[outPtr++] = (char) c;",
      "right" : "outBuf[outPtr++] = (char) c;",
      "info" : "ExpressionStatement[49795-49823]:ExpressionStatement[49989-50017]"
    }, {
      "left" : "++intPartLength;",
      "right" : "++intPartLength;",
      "info" : "ExpressionStatement[49836-49852]:ExpressionStatement[50030-50046]"
    }, {
      "left" : "--_inputPtr;",
      "right" : "--_inputPtr;",
      "info" : "ExpressionStatement[49871-49883]:ExpressionStatement[50065-50077]"
    }, {
      "left" : "_textBuffer.setCurrentLength(outPtr);",
      "right" : "_textBuffer.setCurrentLength(outPtr);",
      "info" : "ExpressionStatement[49934-49971]:ExpressionStatement[50128-50165]"
    }, {
      "left" : "if (_parsingContext.inRoot())",
      "right" : "if (_parsingContext.inRoot())",
      "info" : "IfStatement[50058-50163]:IfStatement[50252-50357]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50088-50163]:Block[50282-50357]"
    }, {
      "left" : "_verifyRootSpace(_inputBuffer[_inputPtr++] & 0xFF);",
      "right" : "_verifyRootSpace(_inputBuffer[_inputPtr++] & 0xFF);",
      "info" : "ExpressionStatement[50102-50153]:ExpressionStatement[50296-50347]"
    }, {
      "left" : "return resetInt(negative, intPartLength);",
      "right" : "return resetInt(negative, intPartLength);",
      "info" : "ReturnStatement[50206-50247]:ReturnStatement[50400-50441]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50459-51658]:Block[50653-51852]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd && !loadMore())",
      "right" : "if (_inputPtr >= _inputEnd && !loadMore())",
      "info" : "IfStatement[50501-50581]:IfStatement[50695-50775]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50544-50581]:Block[50738-50775]"
    }, {
      "left" : "return INT_0;",
      "right" : "return INT_0;",
      "info" : "ReturnStatement[50558-50571]:ReturnStatement[50752-50765]"
    }, {
      "left" : "int ch = _inputBuffer[_inputPtr] & 0xFF;",
      "right" : "int ch = _inputBuffer[_inputPtr] & 0xFF;",
      "info" : "VariableDeclarationStatement[50590-50630]:VariableDeclarationStatement[50784-50824]"
    }, {
      "left" : "if (ch < INT_0 || ch > INT_9)",
      "right" : "if (ch < INT_0 || ch > INT_9)",
      "info" : "IfStatement[50728-50795]:IfStatement[50922-50989]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50758-50795]:Block[50952-50989]"
    }, {
      "left" : "return INT_0;",
      "right" : "return INT_0;",
      "info" : "ReturnStatement[50772-50785]:ReturnStatement[50966-50979]"
    }, {
      "left" : "if (!isEnabled(Feature.ALLOW_NUMERIC_LEADING_ZEROS))",
      "right" : "if (!isEnabled(Feature.ALLOW_NUMERIC_LEADING_ZEROS))",
      "info" : "IfStatement[50870-50997]:IfStatement[51064-51191]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50923-50997]:Block[51117-51191]"
    }, {
      "left" : "reportInvalidNumber(\"Leading zeroes not allowed\");",
      "right" : "reportInvalidNumber(\"Leading zeroes not allowed\");",
      "info" : "ExpressionStatement[50937-50987]:ExpressionStatement[51131-51181]"
    }, {
      "left" : "++_inputPtr;",
      "right" : "++_inputPtr;",
      "info" : "ExpressionStatement[51116-51128]:ExpressionStatement[51310-51322]"
    }, {
      "left" : "if (ch == INT_0)",
      "right" : "if (ch == INT_0)",
      "info" : "IfStatement[51167-51633]:IfStatement[51361-51827]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51184-51633]:Block[51378-51827]"
    }, {
      "left" : "while (_inputPtr < _inputEnd || loadMore())",
      "right" : "while (_inputPtr < _inputEnd || loadMore())",
      "info" : "WhileStatement[51198-51623]:WhileStatement[51392-51817]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51242-51623]:Block[51436-51817]"
    }, {
      "left" : "ch = _inputBuffer[_inputPtr] & 0xFF;",
      "right" : "ch = _inputBuffer[_inputPtr] & 0xFF;",
      "info" : "ExpressionStatement[51260-51296]:ExpressionStatement[51454-51490]"
    }, {
      "left" : "if (ch < INT_0 || ch > INT_9)",
      "right" : "if (ch < INT_0 || ch > INT_9)",
      "info" : "IfStatement[51313-51439]:IfStatement[51507-51633]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51343-51439]:Block[51537-51633]"
    }, {
      "left" : "return INT_0;",
      "right" : "return INT_0;",
      "info" : "ReturnStatement[51408-51421]:ReturnStatement[51602-51615]"
    }, {
      "left" : "++_inputPtr;",
      "right" : "++_inputPtr;",
      "info" : "ExpressionStatement[51456-51468]:ExpressionStatement[51650-51662]"
    }, {
      "left" : "if (ch != INT_0)",
      "right" : "if (ch != INT_0)",
      "info" : "IfStatement[51509-51609]:IfStatement[51703-51803]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51526-51609]:Block[51720-51803]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[51585-51591]:BreakStatement[51779-51785]"
    }, {
      "left" : "return ch;",
      "right" : "return ch;",
      "info" : "ReturnStatement[51642-51652]:ReturnStatement[51836-51846]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51814-55017]:Block[52008-55211]"
    }, {
      "left" : "int fractLen = 0;",
      "right" : "int fractLen = 0;",
      "info" : "VariableDeclarationStatement[51824-51841]:VariableDeclarationStatement[52018-52035]"
    }, {
      "left" : "boolean eof = false;",
      "right" : "boolean eof = false;",
      "info" : "VariableDeclarationStatement[51850-51870]:VariableDeclarationStatement[52044-52064]"
    }, {
      "left" : "if (c == INT_PERIOD)",
      "right" : "if (c == INT_PERIOD)",
      "info" : "IfStatement[51926-52828]:IfStatement[52120-53022]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51947-52828]:Block[52141-53022]"
    }, {
      "left" : "outBuf[outPtr++] = (char) c;",
      "right" : "outBuf[outPtr++] = (char) c;",
      "info" : "ExpressionStatement[51978-52006]:ExpressionStatement[52172-52200]"
    }, {
      "left" : "fract_loop:\n            while (true) {\n                if (_inputPtr >= _inputEnd && !loadMore()) {\n                    eof = true;\n                    break fract_loop;\n                }\n                c = (int) _inputBuffer[_inputPtr++] & 0xFF;\n                if (c < INT_0 || c > INT_9) {\n                    break fract_loop;\n                }\n                ++fractLen;\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                outBuf[outPtr++] = (char) c;\n            }",
      "right" : "fract_loop:\n            while (true) {\n                if (_inputPtr >= _inputEnd && !loadMore()) {\n                    eof = true;\n                    break fract_loop;\n                }\n                c = (int) _inputBuffer[_inputPtr++] & 0xFF;\n                if (c < INT_0 || c > INT_9) {\n                    break fract_loop;\n                }\n                ++fractLen;\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                outBuf[outPtr++] = (char) c;\n            }",
      "info" : "LabeledStatement[52020-52618]:LabeledStatement[52214-52812]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[52044-52618]:WhileStatement[52238-52812]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52057-52618]:Block[52251-52812]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd && !loadMore())",
      "right" : "if (_inputPtr >= _inputEnd && !loadMore())",
      "info" : "IfStatement[52075-52207]:IfStatement[52269-52401]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52118-52207]:Block[52312-52401]"
    }, {
      "left" : "eof = true;",
      "right" : "eof = true;",
      "info" : "ExpressionStatement[52140-52151]:ExpressionStatement[52334-52345]"
    }, {
      "left" : "break fract_loop;",
      "right" : "break fract_loop;",
      "info" : "BreakStatement[52172-52189]:BreakStatement[52366-52383]"
    }, {
      "left" : "c = (int) _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "c = (int) _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[52224-52267]:ExpressionStatement[52418-52461]"
    }, {
      "left" : "if (c < INT_0 || c > INT_9)",
      "right" : "if (c < INT_0 || c > INT_9)",
      "info" : "IfStatement[52284-52369]:IfStatement[52478-52563]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52312-52369]:Block[52506-52563]"
    }, {
      "left" : "break fract_loop;",
      "right" : "break fract_loop;",
      "info" : "BreakStatement[52334-52351]:BreakStatement[52528-52545]"
    }, {
      "left" : "++fractLen;",
      "right" : "++fractLen;",
      "info" : "ExpressionStatement[52386-52397]:ExpressionStatement[52580-52591]"
    }, {
      "left" : "if (outPtr >= outBuf.length)",
      "right" : "if (outPtr >= outBuf.length)",
      "info" : "IfStatement[52414-52559]:IfStatement[52608-52753]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52443-52559]:Block[52637-52753]"
    }, {
      "left" : "outBuf = _textBuffer.finishCurrentSegment();",
      "right" : "outBuf = _textBuffer.finishCurrentSegment();",
      "info" : "ExpressionStatement[52465-52509]:ExpressionStatement[52659-52703]"
    }, {
      "left" : "outPtr = 0;",
      "right" : "outPtr = 0;",
      "info" : "ExpressionStatement[52530-52541]:ExpressionStatement[52724-52735]"
    }, {
      "left" : "outBuf[outPtr++] = (char) c;",
      "right" : "outBuf[outPtr++] = (char) c;",
      "info" : "ExpressionStatement[52576-52604]:ExpressionStatement[52770-52798]"
    }, {
      "left" : "if (fractLen == 0)",
      "right" : "if (fractLen == 0)",
      "info" : "IfStatement[52696-52818]:IfStatement[52890-53012]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52715-52818]:Block[52909-53012]"
    }, {
      "left" : "reportUnexpectedNumberChar(c, \"Decimal point not followed by a digit\");",
      "right" : "reportUnexpectedNumberChar(c, \"Decimal point not followed by a digit\");",
      "info" : "ExpressionStatement[52733-52804]:ExpressionStatement[52927-52998]"
    }, {
      "left" : "int expLen = 0;",
      "right" : "int expLen = 0;",
      "info" : "VariableDeclarationStatement[52838-52853]:VariableDeclarationStatement[53032-53047]"
    }, {
      "left" : "if (c == INT_e || c == INT_E)",
      "right" : "if (c == INT_e || c == INT_E)",
      "info" : "IfStatement[52862-54548]:IfStatement[53056-54742]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52892-54548]:Block[53086-54742]"
    }, {
      "left" : "if (outPtr >= outBuf.length)",
      "right" : "if (outPtr >= outBuf.length)",
      "info" : "IfStatement[52919-53052]:IfStatement[53113-53246]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52948-53052]:Block[53142-53246]"
    }, {
      "left" : "outBuf = _textBuffer.finishCurrentSegment();",
      "right" : "outBuf = _textBuffer.finishCurrentSegment();",
      "info" : "ExpressionStatement[52966-53010]:ExpressionStatement[53160-53204]"
    }, {
      "left" : "outPtr = 0;",
      "right" : "outPtr = 0;",
      "info" : "ExpressionStatement[53027-53038]:ExpressionStatement[53221-53232]"
    }, {
      "left" : "outBuf[outPtr++] = (char) c;",
      "right" : "outBuf[outPtr++] = (char) c;",
      "info" : "ExpressionStatement[53065-53093]:ExpressionStatement[53259-53287]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[53173-53254]:IfStatement[53367-53448]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53201-53254]:Block[53395-53448]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[53219-53240]:ExpressionStatement[53413-53434]"
    }, {
      "left" : "c = (int) _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "c = (int) _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[53267-53310]:ExpressionStatement[53461-53504]"
    }, {
      "left" : "if (c == '-' || c == '+')",
      "right" : "if (c == '-' || c == '+')",
      "info" : "IfStatement[53354-53811]:IfStatement[53548-54005]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53380-53811]:Block[53574-54005]"
    }, {
      "left" : "if (outPtr >= outBuf.length)",
      "right" : "if (outPtr >= outBuf.length)",
      "info" : "IfStatement[53398-53543]:IfStatement[53592-53737]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53427-53543]:Block[53621-53737]"
    }, {
      "left" : "outBuf = _textBuffer.finishCurrentSegment();",
      "right" : "outBuf = _textBuffer.finishCurrentSegment();",
      "info" : "ExpressionStatement[53449-53493]:ExpressionStatement[53643-53687]"
    }, {
      "left" : "outPtr = 0;",
      "right" : "outPtr = 0;",
      "info" : "ExpressionStatement[53514-53525]:ExpressionStatement[53708-53719]"
    }, {
      "left" : "outBuf[outPtr++] = (char) c;",
      "right" : "outBuf[outPtr++] = (char) c;",
      "info" : "ExpressionStatement[53560-53588]:ExpressionStatement[53754-53782]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[53648-53737]:IfStatement[53842-53931]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53676-53737]:Block[53870-53931]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[53698-53719]:ExpressionStatement[53892-53913]"
    }, {
      "left" : "c = (int) _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "c = (int) _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[53754-53797]:ExpressionStatement[53948-53991]"
    }, {
      "left" : "exp_loop:\n            while (c <= INT_9 && c >= INT_0) {\n                ++expLen;\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                outBuf[outPtr++] = (char) c;\n                if (_inputPtr >= _inputEnd && !loadMore()) {\n                    eof = true;\n                    break exp_loop;\n                }\n                c = (int) _inputBuffer[_inputPtr++] & 0xFF;\n            }",
      "right" : "exp_loop:\n            while (c <= INT_9 && c >= INT_0) {\n                ++expLen;\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                outBuf[outPtr++] = (char) c;\n                if (_inputPtr >= _inputEnd && !loadMore()) {\n                    eof = true;\n                    break exp_loop;\n                }\n                c = (int) _inputBuffer[_inputPtr++] & 0xFF;\n            }",
      "info" : "LabeledStatement[53825-54335]:LabeledStatement[54019-54529]"
    }, {
      "left" : "while (c <= INT_9 && c >= INT_0)",
      "right" : "while (c <= INT_9 && c >= INT_0)",
      "info" : "WhileStatement[53847-54335]:WhileStatement[54041-54529]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53880-54335]:Block[54074-54529]"
    }, {
      "left" : "++expLen;",
      "right" : "++expLen;",
      "info" : "ExpressionStatement[53898-53907]:ExpressionStatement[54092-54101]"
    }, {
      "left" : "if (outPtr >= outBuf.length)",
      "right" : "if (outPtr >= outBuf.length)",
      "info" : "IfStatement[53924-54069]:IfStatement[54118-54263]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53953-54069]:Block[54147-54263]"
    }, {
      "left" : "outBuf = _textBuffer.finishCurrentSegment();",
      "right" : "outBuf = _textBuffer.finishCurrentSegment();",
      "info" : "ExpressionStatement[53975-54019]:ExpressionStatement[54169-54213]"
    }, {
      "left" : "outPtr = 0;",
      "right" : "outPtr = 0;",
      "info" : "ExpressionStatement[54040-54051]:ExpressionStatement[54234-54245]"
    }, {
      "left" : "outBuf[outPtr++] = (char) c;",
      "right" : "outBuf[outPtr++] = (char) c;",
      "info" : "ExpressionStatement[54086-54114]:ExpressionStatement[54280-54308]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd && !loadMore())",
      "right" : "if (_inputPtr >= _inputEnd && !loadMore())",
      "info" : "IfStatement[54131-54261]:IfStatement[54325-54455]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54174-54261]:Block[54368-54455]"
    }, {
      "left" : "eof = true;",
      "right" : "eof = true;",
      "info" : "ExpressionStatement[54196-54207]:ExpressionStatement[54390-54401]"
    }, {
      "left" : "break exp_loop;",
      "right" : "break exp_loop;",
      "info" : "BreakStatement[54228-54243]:BreakStatement[54422-54437]"
    }, {
      "left" : "c = (int) _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "c = (int) _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[54278-54321]:ExpressionStatement[54472-54515]"
    }, {
      "left" : "if (expLen == 0)",
      "right" : "if (expLen == 0)",
      "info" : "IfStatement[54413-54538]:IfStatement[54607-54732]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54430-54538]:Block[54624-54732]"
    }, {
      "left" : "reportUnexpectedNumberChar(c, \"Exponent indicator not followed by a digit\");",
      "right" : "reportUnexpectedNumberChar(c, \"Exponent indicator not followed by a digit\");",
      "info" : "ExpressionStatement[54448-54524]:ExpressionStatement[54642-54718]"
    }, {
      "left" : "if (!eof)",
      "right" : "if (!eof)",
      "info" : "IfStatement[54634-54857]:IfStatement[54828-55051]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54644-54857]:Block[54838-55051]"
    }, {
      "left" : "--_inputPtr;",
      "right" : "--_inputPtr;",
      "info" : "ExpressionStatement[54658-54670]:ExpressionStatement[54852-54864]"
    }, {
      "left" : "if (_parsingContext.inRoot())",
      "right" : "if (_parsingContext.inRoot())",
      "info" : "IfStatement[54765-54847]:IfStatement[54959-55041]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54795-54847]:Block[54989-55041]"
    }, {
      "left" : "_verifyRootSpace(c);",
      "right" : "_verifyRootSpace(c);",
      "info" : "ExpressionStatement[54813-54833]:ExpressionStatement[55007-55027]"
    }, {
      "left" : "_textBuffer.setCurrentLength(outPtr);",
      "right" : "_textBuffer.setCurrentLength(outPtr);",
      "info" : "ExpressionStatement[54866-54903]:ExpressionStatement[55060-55097]"
    }, {
      "left" : "return resetFloat(negative, integerPartLength, fractLen, expLen);",
      "right" : "return resetFloat(negative, integerPartLength, fractLen, expLen);",
      "info" : "ReturnStatement[54946-55011]:ReturnStatement[55140-55205]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55335-55784]:Block[55529-55978]"
    }, {
      "left" : "++_inputPtr;",
      "right" : "++_inputPtr;",
      "info" : "ExpressionStatement[55405-55417]:ExpressionStatement[55599-55611]"
    }, {
      "left" : "switch (ch) {\n        case ' ':\n        case '\\t':\n            return;\n        case '\\r':\n            _skipCR();\n            return;\n        case '\\n':\n            ++_currInputRow;\n            _currInputRowStart = _inputPtr;\n            return;\n        }",
      "right" : "switch (ch) {\n        case ' ':\n        case '\\t':\n            return;\n        case '\\r':\n            _skipCR();\n            return;\n        case '\\n':\n            ++_currInputRow;\n            _currInputRowStart = _inputPtr;\n            return;\n        }",
      "info" : "SwitchStatement[55490-55744]:SwitchStatement[55684-55938]"
    }, {
      "left" : "case ' ':",
      "right" : "case ' ':",
      "info" : "SwitchCase[55512-55521]:SwitchCase[55706-55715]"
    }, {
      "left" : "case '\\t':",
      "right" : "case '\\t':",
      "info" : "SwitchCase[55530-55540]:SwitchCase[55724-55734]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[55553-55560]:ReturnStatement[55747-55754]"
    }, {
      "left" : "case '\\r':",
      "right" : "case '\\r':",
      "info" : "SwitchCase[55569-55579]:SwitchCase[55763-55773]"
    }, {
      "left" : "_skipCR();",
      "right" : "_skipCR();",
      "info" : "ExpressionStatement[55592-55602]:ExpressionStatement[55786-55796]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[55615-55622]:ReturnStatement[55809-55816]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[55631-55641]:SwitchCase[55825-55835]"
    }, {
      "left" : "++_currInputRow;",
      "right" : "++_currInputRow;",
      "info" : "ExpressionStatement[55654-55670]:ExpressionStatement[55848-55864]"
    }, {
      "left" : "_currInputRowStart = _inputPtr;",
      "right" : "_currInputRowStart = _inputPtr;",
      "info" : "ExpressionStatement[55683-55714]:ExpressionStatement[55877-55908]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[55727-55734]:ReturnStatement[55921-55928]"
    }, {
      "left" : "_reportMissingRootWS(ch);",
      "right" : "_reportMissingRootWS(ch);",
      "info" : "ExpressionStatement[55753-55778]:ExpressionStatement[55947-55972]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56045-58343]:Block[56239-58537]"
    }, {
      "left" : "if (i != INT_QUOTE)",
      "right" : "if (i != INT_QUOTE)",
      "info" : "IfStatement[56055-56124]:IfStatement[56249-56318]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56075-56124]:Block[56269-56318]"
    }, {
      "left" : "return _handleOddName(i);",
      "right" : "return _handleOddName(i);",
      "info" : "ReturnStatement[56089-56114]:ReturnStatement[56283-56308]"
    }, {
      "left" : "if ((_inputPtr + 13) > _inputEnd)",
      "right" : "if ((_inputPtr + 13) > _inputEnd)",
      "info" : "IfStatement[56186-56317]:IfStatement[56380-56511]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56220-56317]:Block[56414-56511]"
    }, {
      "left" : "return slowParseName();",
      "right" : "return slowParseName();",
      "info" : "ReturnStatement[56284-56307]:ReturnStatement[56478-56501]"
    }, {
      "left" : "final byte[] input = _inputBuffer;",
      "right" : "final byte[] input = _inputBuffer;",
      "info" : "VariableDeclarationStatement[56651-56685]:VariableDeclarationStatement[56845-56879]"
    }, {
      "left" : "final int[] codes = _icLatin1;",
      "right" : "final int[] codes = _icLatin1;",
      "info" : "VariableDeclarationStatement[56694-56724]:VariableDeclarationStatement[56888-56918]"
    }, {
      "left" : "int q = input[_inputPtr++] & 0xFF;",
      "right" : "int q = input[_inputPtr++] & 0xFF;",
      "info" : "VariableDeclarationStatement[56734-56768]:VariableDeclarationStatement[56928-56962]"
    }, {
      "left" : "if (codes[q] == 0)",
      "right" : "if (codes[q] == 0)",
      "info" : "IfStatement[56778-58187]:IfStatement[56972-58381]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56797-58187]:Block[56991-58381]"
    }, {
      "left" : "i = input[_inputPtr++] & 0xFF;",
      "right" : "i = input[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[56811-56841]:ExpressionStatement[57005-57035]"
    }, {
      "left" : "if (codes[i] == 0)",
      "right" : "if (codes[i] == 0)",
      "info" : "IfStatement[56854-58019]:IfStatement[57048-58213]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56873-58019]:Block[57067-58213]"
    }, {
      "left" : "q = (q << 8) | i;",
      "right" : "q = (q << 8) | i;",
      "info" : "ExpressionStatement[56891-56908]:ExpressionStatement[57085-57102]"
    }, {
      "left" : "i = input[_inputPtr++] & 0xFF;",
      "right" : "i = input[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[56925-56955]:ExpressionStatement[57119-57149]"
    }, {
      "left" : "if (codes[i] == 0)",
      "right" : "if (codes[i] == 0)",
      "info" : "IfStatement[56972-57817]:IfStatement[57166-58011]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56991-57817]:Block[57185-58011]"
    }, {
      "left" : "q = (q << 8) | i;",
      "right" : "q = (q << 8) | i;",
      "info" : "ExpressionStatement[57013-57030]:ExpressionStatement[57207-57224]"
    }, {
      "left" : "i = input[_inputPtr++] & 0xFF;",
      "right" : "i = input[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[57051-57081]:ExpressionStatement[57245-57275]"
    }, {
      "left" : "if (codes[i] == 0)",
      "right" : "if (codes[i] == 0)",
      "info" : "IfStatement[57102-57611]:IfStatement[57296-57805]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57121-57611]:Block[57315-57805]"
    }, {
      "left" : "q = (q << 8) | i;",
      "right" : "q = (q << 8) | i;",
      "info" : "ExpressionStatement[57147-57164]:ExpressionStatement[57341-57358]"
    }, {
      "left" : "i = input[_inputPtr++] & 0xFF;",
      "right" : "i = input[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[57189-57219]:ExpressionStatement[57383-57413]"
    }, {
      "left" : "if (codes[i] == 0)",
      "right" : "if (codes[i] == 0)",
      "info" : "IfStatement[57244-57385]:IfStatement[57438-57579]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57263-57385]:Block[57457-57579]"
    }, {
      "left" : "_quad1 = q;",
      "right" : "_quad1 = q;",
      "info" : "ExpressionStatement[57293-57304]:ExpressionStatement[57487-57498]"
    }, {
      "left" : "return parseMediumName(i);",
      "right" : "return parseMediumName(i);",
      "info" : "ReturnStatement[57333-57359]:ReturnStatement[57527-57553]"
    }, {
      "left" : "if (i == INT_QUOTE)",
      "right" : "if (i == INT_QUOTE)",
      "info" : "IfStatement[57410-57538]:IfStatement[57604-57732]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57430-57538]:Block[57624-57732]"
    }, {
      "left" : "return findName(q, 4);",
      "right" : "return findName(q, 4);",
      "info" : "ReturnStatement[57490-57512]:ReturnStatement[57684-57706]"
    }, {
      "left" : "return parseName(q, i, 4);",
      "right" : "return parseName(q, i, 4);",
      "info" : "ReturnStatement[57563-57589]:ReturnStatement[57757-57783]"
    }, {
      "left" : "if (i == INT_QUOTE)",
      "right" : "if (i == INT_QUOTE)",
      "info" : "IfStatement[57632-57752]:IfStatement[57826-57946]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57652-57752]:Block[57846-57946]"
    }, {
      "left" : "return findName(q, 3);",
      "right" : "return findName(q, 3);",
      "info" : "ReturnStatement[57708-57730]:ReturnStatement[57902-57924]"
    }, {
      "left" : "return parseName(q, i, 3);",
      "right" : "return parseName(q, i, 3);",
      "info" : "ReturnStatement[57773-57799]:ReturnStatement[57967-57993]"
    }, {
      "left" : "if (i == INT_QUOTE)",
      "right" : "if (i == INT_QUOTE)",
      "info" : "IfStatement[57850-57962]:IfStatement[58044-58156]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57870-57962]:Block[58064-58156]"
    }, {
      "left" : "return findName(q, 2);",
      "right" : "return findName(q, 2);",
      "info" : "ReturnStatement[57922-57944]:ReturnStatement[58116-58138]"
    }, {
      "left" : "return parseName(q, i, 2);",
      "right" : "return parseName(q, i, 2);",
      "info" : "ReturnStatement[57979-58005]:ReturnStatement[58173-58199]"
    }, {
      "left" : "if (i == INT_QUOTE)",
      "right" : "if (i == INT_QUOTE)",
      "info" : "IfStatement[58032-58138]:IfStatement[58226-58332]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58052-58138]:Block[58246-58332]"
    }, {
      "left" : "return findName(q, 1);",
      "right" : "return findName(q, 1);",
      "info" : "ReturnStatement[58102-58124]:ReturnStatement[58296-58318]"
    }, {
      "left" : "return parseName(q, i, 1);",
      "right" : "return parseName(q, i, 1);",
      "info" : "ReturnStatement[58151-58177]:ReturnStatement[58345-58371]"
    }, {
      "left" : "if (q == INT_QUOTE)",
      "right" : "if (q == INT_QUOTE)",
      "info" : "IfStatement[58201-58275]:IfStatement[58395-58469]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58221-58275]:Block[58415-58469]"
    }, {
      "left" : "return \"\";",
      "right" : "return \"\";",
      "info" : "ReturnStatement[58255-58265]:ReturnStatement[58449-58459]"
    }, {
      "left" : "return parseName(0, q, 0);",
      "right" : "return parseName(0, q, 0);",
      "info" : "ReturnStatement[58284-58310]:ReturnStatement[58478-58504]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58419-59635]:Block[58613-59829]"
    }, {
      "left" : "final byte[] input = _inputBuffer;",
      "right" : "final byte[] input = _inputBuffer;",
      "info" : "VariableDeclarationStatement[58429-58463]:VariableDeclarationStatement[58623-58657]"
    }, {
      "left" : "final int[] codes = _icLatin1;",
      "right" : "final int[] codes = _icLatin1;",
      "info" : "VariableDeclarationStatement[58472-58502]:VariableDeclarationStatement[58666-58696]"
    }, {
      "left" : "int i = input[_inputPtr++] & 0xFF;",
      "right" : "int i = input[_inputPtr++] & 0xFF;",
      "info" : "VariableDeclarationStatement[58551-58585]:VariableDeclarationStatement[58745-58779]"
    }, {
      "left" : "if (codes[i] != 0)",
      "right" : "if (codes[i] != 0)",
      "info" : "IfStatement[58594-58806]:IfStatement[58788-59000]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58613-58806]:Block[58807-59000]"
    }, {
      "left" : "if (i == INT_QUOTE)",
      "right" : "if (i == INT_QUOTE)",
      "info" : "IfStatement[58627-58721]:IfStatement[58821-58915]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58647-58721]:Block[58841-58915]"
    }, {
      "left" : "return findName(_quad1, q2, 1);",
      "right" : "return findName(_quad1, q2, 1);",
      "info" : "ReturnStatement[58676-58707]:ReturnStatement[58870-58901]"
    }, {
      "left" : "return parseName(_quad1, q2, i, 1);",
      "right" : "return parseName(_quad1, q2, i, 1);",
      "info" : "ReturnStatement[58734-58769]:ReturnStatement[58928-58963]"
    }, {
      "left" : "q2 = (q2 << 8) | i;",
      "right" : "q2 = (q2 << 8) | i;",
      "info" : "ExpressionStatement[58815-58834]:ExpressionStatement[59009-59028]"
    }, {
      "left" : "i = input[_inputPtr++] & 0xFF;",
      "right" : "i = input[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[58843-58873]:ExpressionStatement[59037-59067]"
    }, {
      "left" : "if (codes[i] != 0)",
      "right" : "if (codes[i] != 0)",
      "info" : "IfStatement[58882-59067]:IfStatement[59076-59261]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58901-59067]:Block[59095-59261]"
    }, {
      "left" : "if (i == INT_QUOTE)",
      "right" : "if (i == INT_QUOTE)",
      "info" : "IfStatement[58915-59009]:IfStatement[59109-59203]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58935-59009]:Block[59129-59203]"
    }, {
      "left" : "return findName(_quad1, q2, 2);",
      "right" : "return findName(_quad1, q2, 2);",
      "info" : "ReturnStatement[58964-58995]:ReturnStatement[59158-59189]"
    }, {
      "left" : "return parseName(_quad1, q2, i, 2);",
      "right" : "return parseName(_quad1, q2, i, 2);",
      "info" : "ReturnStatement[59022-59057]:ReturnStatement[59216-59251]"
    }, {
      "left" : "q2 = (q2 << 8) | i;",
      "right" : "q2 = (q2 << 8) | i;",
      "info" : "ExpressionStatement[59076-59095]:ExpressionStatement[59270-59289]"
    }, {
      "left" : "i = input[_inputPtr++] & 0xFF;",
      "right" : "i = input[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[59104-59134]:ExpressionStatement[59298-59328]"
    }, {
      "left" : "if (codes[i] != 0)",
      "right" : "if (codes[i] != 0)",
      "info" : "IfStatement[59143-59328]:IfStatement[59337-59522]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59162-59328]:Block[59356-59522]"
    }, {
      "left" : "if (i == INT_QUOTE)",
      "right" : "if (i == INT_QUOTE)",
      "info" : "IfStatement[59176-59270]:IfStatement[59370-59464]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59196-59270]:Block[59390-59464]"
    }, {
      "left" : "return findName(_quad1, q2, 3);",
      "right" : "return findName(_quad1, q2, 3);",
      "info" : "ReturnStatement[59225-59256]:ReturnStatement[59419-59450]"
    }, {
      "left" : "return parseName(_quad1, q2, i, 3);",
      "right" : "return parseName(_quad1, q2, i, 3);",
      "info" : "ReturnStatement[59283-59318]:ReturnStatement[59477-59512]"
    }, {
      "left" : "q2 = (q2 << 8) | i;",
      "right" : "q2 = (q2 << 8) | i;",
      "info" : "ExpressionStatement[59337-59356]:ExpressionStatement[59531-59550]"
    }, {
      "left" : "i = input[_inputPtr++] & 0xFF;",
      "right" : "i = input[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[59365-59395]:ExpressionStatement[59559-59589]"
    }, {
      "left" : "if (codes[i] != 0)",
      "right" : "if (codes[i] != 0)",
      "info" : "IfStatement[59404-59589]:IfStatement[59598-59783]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59423-59589]:Block[59617-59783]"
    }, {
      "left" : "if (i == INT_QUOTE)",
      "right" : "if (i == INT_QUOTE)",
      "info" : "IfStatement[59437-59531]:IfStatement[59631-59725]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59457-59531]:Block[59651-59725]"
    }, {
      "left" : "return findName(_quad1, q2, 4);",
      "right" : "return findName(_quad1, q2, 4);",
      "info" : "ReturnStatement[59486-59517]:ReturnStatement[59680-59711]"
    }, {
      "left" : "return parseName(_quad1, q2, i, 4);",
      "right" : "return parseName(_quad1, q2, i, 4);",
      "info" : "ReturnStatement[59544-59579]:ReturnStatement[59738-59773]"
    }, {
      "left" : "return parseMediumName2(i, q2);",
      "right" : "return parseMediumName2(i, q2);",
      "info" : "ReturnStatement[59598-59629]:ReturnStatement[59792-59823]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59760-60981]:Block[59954-61175]"
    }, {
      "left" : "final byte[] input = _inputBuffer;",
      "right" : "final byte[] input = _inputBuffer;",
      "info" : "VariableDeclarationStatement[59770-59804]:VariableDeclarationStatement[59964-59998]"
    }, {
      "left" : "final int[] codes = _icLatin1;",
      "right" : "final int[] codes = _icLatin1;",
      "info" : "VariableDeclarationStatement[59813-59843]:VariableDeclarationStatement[60007-60037]"
    }, {
      "left" : "int i = input[_inputPtr++] & 0xFF;",
      "right" : "int i = input[_inputPtr++] & 0xFF;",
      "info" : "VariableDeclarationStatement[59888-59922]:VariableDeclarationStatement[60082-60116]"
    }, {
      "left" : "if (codes[i] != 0)",
      "right" : "if (codes[i] != 0)",
      "info" : "IfStatement[59931-60124]:IfStatement[60125-60318]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59950-60124]:Block[60144-60318]"
    }, {
      "left" : "if (i == INT_QUOTE)",
      "right" : "if (i == INT_QUOTE)",
      "info" : "IfStatement[59964-60062]:IfStatement[60158-60256]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59984-60062]:Block[60178-60256]"
    }, {
      "left" : "return findName(_quad1, q2, q3, 1);",
      "right" : "return findName(_quad1, q2, q3, 1);",
      "info" : "ReturnStatement[60013-60048]:ReturnStatement[60207-60242]"
    }, {
      "left" : "return parseName(_quad1, q2, q3, i, 1);",
      "right" : "return parseName(_quad1, q2, q3, i, 1);",
      "info" : "ReturnStatement[60075-60114]:ReturnStatement[60269-60308]"
    }, {
      "left" : "q3 = (q3 << 8) | i;",
      "right" : "q3 = (q3 << 8) | i;",
      "info" : "ExpressionStatement[60133-60152]:ExpressionStatement[60327-60346]"
    }, {
      "left" : "i = input[_inputPtr++] & 0xFF;",
      "right" : "i = input[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[60161-60191]:ExpressionStatement[60355-60385]"
    }, {
      "left" : "if (codes[i] != 0)",
      "right" : "if (codes[i] != 0)",
      "info" : "IfStatement[60200-60394]:IfStatement[60394-60588]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60219-60394]:Block[60413-60588]"
    }, {
      "left" : "if (i == INT_QUOTE)",
      "right" : "if (i == INT_QUOTE)",
      "info" : "IfStatement[60233-60332]:IfStatement[60427-60526]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60253-60332]:Block[60447-60526]"
    }, {
      "left" : "return findName(_quad1, q2, q3, 2);",
      "right" : "return findName(_quad1, q2, q3, 2);",
      "info" : "ReturnStatement[60283-60318]:ReturnStatement[60477-60512]"
    }, {
      "left" : "return parseName(_quad1, q2, q3, i, 2);",
      "right" : "return parseName(_quad1, q2, q3, i, 2);",
      "info" : "ReturnStatement[60345-60384]:ReturnStatement[60539-60578]"
    }, {
      "left" : "q3 = (q3 << 8) | i;",
      "right" : "q3 = (q3 << 8) | i;",
      "info" : "ExpressionStatement[60403-60422]:ExpressionStatement[60597-60616]"
    }, {
      "left" : "i = input[_inputPtr++] & 0xFF;",
      "right" : "i = input[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[60431-60461]:ExpressionStatement[60625-60655]"
    }, {
      "left" : "if (codes[i] != 0)",
      "right" : "if (codes[i] != 0)",
      "info" : "IfStatement[60470-60664]:IfStatement[60664-60858]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60489-60664]:Block[60683-60858]"
    }, {
      "left" : "if (i == INT_QUOTE)",
      "right" : "if (i == INT_QUOTE)",
      "info" : "IfStatement[60503-60602]:IfStatement[60697-60796]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60523-60602]:Block[60717-60796]"
    }, {
      "left" : "return findName(_quad1, q2, q3, 3);",
      "right" : "return findName(_quad1, q2, q3, 3);",
      "info" : "ReturnStatement[60553-60588]:ReturnStatement[60747-60782]"
    }, {
      "left" : "return parseName(_quad1, q2, q3, i, 3);",
      "right" : "return parseName(_quad1, q2, q3, i, 3);",
      "info" : "ReturnStatement[60615-60654]:ReturnStatement[60809-60848]"
    }, {
      "left" : "q3 = (q3 << 8) | i;",
      "right" : "q3 = (q3 << 8) | i;",
      "info" : "ExpressionStatement[60673-60692]:ExpressionStatement[60867-60886]"
    }, {
      "left" : "i = input[_inputPtr++] & 0xFF;",
      "right" : "i = input[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[60701-60731]:ExpressionStatement[60895-60925]"
    }, {
      "left" : "if (codes[i] != 0)",
      "right" : "if (codes[i] != 0)",
      "info" : "IfStatement[60740-60934]:IfStatement[60934-61128]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60759-60934]:Block[60953-61128]"
    }, {
      "left" : "if (i == INT_QUOTE)",
      "right" : "if (i == INT_QUOTE)",
      "info" : "IfStatement[60773-60872]:IfStatement[60967-61066]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60793-60872]:Block[60987-61066]"
    }, {
      "left" : "return findName(_quad1, q2, q3, 4);",
      "right" : "return findName(_quad1, q2, q3, 4);",
      "info" : "ReturnStatement[60823-60858]:ReturnStatement[61017-61052]"
    }, {
      "left" : "return parseName(_quad1, q2, q3, i, 4);",
      "right" : "return parseName(_quad1, q2, q3, i, 4);",
      "info" : "ReturnStatement[60885-60924]:ReturnStatement[61079-61118]"
    }, {
      "left" : "return parseLongName(i, q2, q3);",
      "right" : "return parseLongName(i, q2, q3);",
      "info" : "ReturnStatement[60943-60975]:ReturnStatement[61137-61169]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61080-63114]:Block[61274-63308]"
    }, {
      "left" : "_quadBuffer[0] = _quad1;",
      "right" : "_quadBuffer[0] = _quad1;",
      "info" : "ExpressionStatement[61090-61114]:ExpressionStatement[61284-61308]"
    }, {
      "left" : "_quadBuffer[1] = q2;",
      "right" : "_quadBuffer[1] = q2;",
      "info" : "ExpressionStatement[61123-61143]:ExpressionStatement[61317-61337]"
    }, {
      "left" : "_quadBuffer[2] = q3;",
      "right" : "_quadBuffer[2] = q3;",
      "info" : "ExpressionStatement[61152-61172]:ExpressionStatement[61346-61366]"
    }, {
      "left" : "final byte[] input = _inputBuffer;",
      "right" : "final byte[] input = _inputBuffer;",
      "info" : "VariableDeclarationStatement[61254-61288]:VariableDeclarationStatement[61448-61482]"
    }, {
      "left" : "final int[] codes = _icLatin1;",
      "right" : "final int[] codes = _icLatin1;",
      "info" : "VariableDeclarationStatement[61297-61327]:VariableDeclarationStatement[61491-61521]"
    }, {
      "left" : "int qlen = 3;",
      "right" : "int qlen = 3;",
      "info" : "VariableDeclarationStatement[61336-61349]:VariableDeclarationStatement[61530-61543]"
    }, {
      "left" : "while ((_inputPtr + 4) <= _inputEnd)",
      "right" : "while ((_inputPtr + 4) <= _inputEnd)",
      "info" : "WhileStatement[61359-62857]:WhileStatement[61553-63051]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61396-62857]:Block[61590-63051]"
    }, {
      "left" : "int i = input[_inputPtr++] & 0xFF;",
      "right" : "int i = input[_inputPtr++] & 0xFF;",
      "info" : "VariableDeclarationStatement[61410-61444]:VariableDeclarationStatement[61604-61638]"
    }, {
      "left" : "if (codes[i] != 0)",
      "right" : "if (codes[i] != 0)",
      "info" : "IfStatement[61457-61678]:IfStatement[61651-61872]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61476-61678]:Block[61670-61872]"
    }, {
      "left" : "if (i == INT_QUOTE)",
      "right" : "if (i == INT_QUOTE)",
      "info" : "IfStatement[61494-61595]:IfStatement[61688-61789]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61514-61595]:Block[61708-61789]"
    }, {
      "left" : "return findName(_quadBuffer, qlen, q, 1);",
      "right" : "return findName(_quadBuffer, qlen, q, 1);",
      "info" : "ReturnStatement[61536-61577]:ReturnStatement[61730-61771]"
    }, {
      "left" : "return parseEscapedName(_quadBuffer, qlen, q, i, 1);",
      "right" : "return parseEscapedName(_quadBuffer, qlen, q, i, 1);",
      "info" : "ReturnStatement[61612-61664]:ReturnStatement[61806-61858]"
    }, {
      "left" : "q = (q << 8) | i;",
      "right" : "q = (q << 8) | i;",
      "info" : "ExpressionStatement[61692-61709]:ExpressionStatement[61886-61903]"
    }, {
      "left" : "i = input[_inputPtr++] & 0xFF;",
      "right" : "i = input[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[61722-61752]:ExpressionStatement[61916-61946]"
    }, {
      "left" : "if (codes[i] != 0)",
      "right" : "if (codes[i] != 0)",
      "info" : "IfStatement[61765-61986]:IfStatement[61959-62180]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61784-61986]:Block[61978-62180]"
    }, {
      "left" : "if (i == INT_QUOTE)",
      "right" : "if (i == INT_QUOTE)",
      "info" : "IfStatement[61802-61903]:IfStatement[61996-62097]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61822-61903]:Block[62016-62097]"
    }, {
      "left" : "return findName(_quadBuffer, qlen, q, 2);",
      "right" : "return findName(_quadBuffer, qlen, q, 2);",
      "info" : "ReturnStatement[61844-61885]:ReturnStatement[62038-62079]"
    }, {
      "left" : "return parseEscapedName(_quadBuffer, qlen, q, i, 2);",
      "right" : "return parseEscapedName(_quadBuffer, qlen, q, i, 2);",
      "info" : "ReturnStatement[61920-61972]:ReturnStatement[62114-62166]"
    }, {
      "left" : "q = (q << 8) | i;",
      "right" : "q = (q << 8) | i;",
      "info" : "ExpressionStatement[62000-62017]:ExpressionStatement[62194-62211]"
    }, {
      "left" : "i = input[_inputPtr++] & 0xFF;",
      "right" : "i = input[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[62030-62060]:ExpressionStatement[62224-62254]"
    }, {
      "left" : "if (codes[i] != 0)",
      "right" : "if (codes[i] != 0)",
      "info" : "IfStatement[62073-62294]:IfStatement[62267-62488]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62092-62294]:Block[62286-62488]"
    }, {
      "left" : "if (i == INT_QUOTE)",
      "right" : "if (i == INT_QUOTE)",
      "info" : "IfStatement[62110-62211]:IfStatement[62304-62405]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62130-62211]:Block[62324-62405]"
    }, {
      "left" : "return findName(_quadBuffer, qlen, q, 3);",
      "right" : "return findName(_quadBuffer, qlen, q, 3);",
      "info" : "ReturnStatement[62152-62193]:ReturnStatement[62346-62387]"
    }, {
      "left" : "return parseEscapedName(_quadBuffer, qlen, q, i, 3);",
      "right" : "return parseEscapedName(_quadBuffer, qlen, q, i, 3);",
      "info" : "ReturnStatement[62228-62280]:ReturnStatement[62422-62474]"
    }, {
      "left" : "q = (q << 8) | i;",
      "right" : "q = (q << 8) | i;",
      "info" : "ExpressionStatement[62308-62325]:ExpressionStatement[62502-62519]"
    }, {
      "left" : "i = input[_inputPtr++] & 0xFF;",
      "right" : "i = input[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[62338-62368]:ExpressionStatement[62532-62562]"
    }, {
      "left" : "if (codes[i] != 0)",
      "right" : "if (codes[i] != 0)",
      "info" : "IfStatement[62381-62602]:IfStatement[62575-62796]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62400-62602]:Block[62594-62796]"
    }, {
      "left" : "if (i == INT_QUOTE)",
      "right" : "if (i == INT_QUOTE)",
      "info" : "IfStatement[62418-62519]:IfStatement[62612-62713]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62438-62519]:Block[62632-62713]"
    }, {
      "left" : "return findName(_quadBuffer, qlen, q, 4);",
      "right" : "return findName(_quadBuffer, qlen, q, 4);",
      "info" : "ReturnStatement[62460-62501]:ReturnStatement[62654-62695]"
    }, {
      "left" : "return parseEscapedName(_quadBuffer, qlen, q, i, 4);",
      "right" : "return parseEscapedName(_quadBuffer, qlen, q, i, 4);",
      "info" : "ReturnStatement[62536-62588]:ReturnStatement[62730-62782]"
    }, {
      "left" : "if (qlen >= _quadBuffer.length)",
      "right" : "if (qlen >= _quadBuffer.length)",
      "info" : "IfStatement[62682-62791]:IfStatement[62876-62985]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62714-62791]:Block[62908-62985]"
    }, {
      "left" : "_quadBuffer = growArrayBy(_quadBuffer, qlen);",
      "right" : "_quadBuffer = growArrayBy(_quadBuffer, qlen);",
      "info" : "ExpressionStatement[62732-62777]:ExpressionStatement[62926-62971]"
    }, {
      "left" : "_quadBuffer[qlen++] = q;",
      "right" : "_quadBuffer[qlen++] = q;",
      "info" : "ExpressionStatement[62804-62828]:ExpressionStatement[62998-63022]"
    }, {
      "left" : "q = i;",
      "right" : "q = i;",
      "info" : "ExpressionStatement[62841-62847]:ExpressionStatement[63035-63041]"
    }, {
      "left" : "return parseEscapedName(_quadBuffer, qlen, 0, q, 0);",
      "right" : "return parseEscapedName(_quadBuffer, qlen, 0, q, 0);",
      "info" : "ReturnStatement[63056-63108]:ReturnStatement[63250-63302]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63379-63746]:Block[63573-63940]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[63389-63549]:IfStatement[63583-63743]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63417-63549]:Block[63611-63743]"
    }, {
      "left" : "if (!loadMore())",
      "right" : "if (!loadMore())",
      "info" : "IfStatement[63431-63539]:IfStatement[63625-63733]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63448-63539]:Block[63642-63733]"
    }, {
      "left" : "_reportInvalidEOF(\": was expecting closing '\\\"' for name\");",
      "right" : "_reportInvalidEOF(\": was expecting closing '\\\"' for name\");",
      "info" : "ExpressionStatement[63466-63525]:ExpressionStatement[63660-63719]"
    }, {
      "left" : "int i = _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "int i = _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "VariableDeclarationStatement[63558-63599]:VariableDeclarationStatement[63752-63793]"
    }, {
      "left" : "if (i == INT_QUOTE)",
      "right" : "if (i == INT_QUOTE)",
      "info" : "IfStatement[63608-63682]:IfStatement[63802-63876]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63628-63682]:Block[63822-63876]"
    }, {
      "left" : "return \"\";",
      "right" : "return \"\";",
      "info" : "ReturnStatement[63662-63672]:ReturnStatement[63856-63866]"
    }, {
      "left" : "return parseEscapedName(_quadBuffer, 0, 0, i, 0);",
      "right" : "return parseEscapedName(_quadBuffer, 0, 0, i, 0);",
      "info" : "ReturnStatement[63691-63740]:ReturnStatement[63885-63934]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63837-63916]:Block[64031-64110]"
    }, {
      "left" : "return parseEscapedName(_quadBuffer, 0, q1, ch, lastQuadBytes);",
      "right" : "return parseEscapedName(_quadBuffer, 0, q1, ch, lastQuadBytes);",
      "info" : "ReturnStatement[63847-63910]:ReturnStatement[64041-64104]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64015-64123]:Block[64209-64317]"
    }, {
      "left" : "_quadBuffer[0] = q1;",
      "right" : "_quadBuffer[0] = q1;",
      "info" : "ExpressionStatement[64025-64045]:ExpressionStatement[64219-64239]"
    }, {
      "left" : "return parseEscapedName(_quadBuffer, 1, q2, ch, lastQuadBytes);",
      "right" : "return parseEscapedName(_quadBuffer, 1, q2, ch, lastQuadBytes);",
      "info" : "ReturnStatement[64054-64117]:ReturnStatement[64248-64311]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64230-64367]:Block[64424-64561]"
    }, {
      "left" : "_quadBuffer[0] = q1;",
      "right" : "_quadBuffer[0] = q1;",
      "info" : "ExpressionStatement[64240-64260]:ExpressionStatement[64434-64454]"
    }, {
      "left" : "_quadBuffer[1] = q2;",
      "right" : "_quadBuffer[1] = q2;",
      "info" : "ExpressionStatement[64269-64289]:ExpressionStatement[64463-64483]"
    }, {
      "left" : "return parseEscapedName(_quadBuffer, 2, q3, ch, lastQuadBytes);",
      "right" : "return parseEscapedName(_quadBuffer, 2, q3, ch, lastQuadBytes);",
      "info" : "ReturnStatement[64298-64361]:ReturnStatement[64492-64555]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64835-68625]:Block[65029-68819]"
    }, {
      "left" : "final int[] codes = _icLatin1;",
      "right" : "final int[] codes = _icLatin1;",
      "info" : "VariableDeclarationStatement[65113-65143]:VariableDeclarationStatement[65307-65337]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[65153-68222]:WhileStatement[65347-68416]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65166-68222]:Block[65360-68416]"
    }, {
      "left" : "if (codes[ch] != 0)",
      "right" : "if (codes[ch] != 0)",
      "info" : "IfStatement[65180-67534]:IfStatement[65374-67728]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65200-67534]:Block[65394-67728]"
    }, {
      "left" : "if (ch == INT_QUOTE)",
      "right" : "if (ch == INT_QUOTE)",
      "info" : "IfStatement[65218-65300]:IfStatement[65412-65494]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65239-65300]:Block[65433-65494]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[65276-65282]:BreakStatement[65470-65476]"
    }, {
      "left" : "if (ch != INT_BACKSLASH)",
      "right" : "if (ch != INT_BACKSLASH)",
      "info" : "IfStatement[65358-65634]:IfStatement[65552-65828]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65383-65521]:Block[65577-65715]"
    }, {
      "left" : "_throwUnquotedSpace(ch, \"name\");",
      "right" : "_throwUnquotedSpace(ch, \"name\");",
      "info" : "ExpressionStatement[65471-65503]:ExpressionStatement[65665-65697]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65527-65634]:Block[65721-65828]"
    }, {
      "left" : "ch = _decodeEscaped();",
      "right" : "ch = _decodeEscaped();",
      "info" : "ExpressionStatement[65594-65616]:ExpressionStatement[65788-65810]"
    }, {
      "left" : "if (ch > 127)",
      "right" : "if (ch > 127)",
      "info" : "IfStatement[65929-67520]:IfStatement[66123-67714]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65943-67520]:Block[66137-67714]"
    }, {
      "left" : "if (currQuadBytes >= 4)",
      "right" : "if (currQuadBytes >= 4)",
      "info" : "IfStatement[66034-66374]:IfStatement[66228-66568]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66058-66374]:Block[66252-66568]"
    }, {
      "left" : "if (qlen >= quads.length)",
      "right" : "if (qlen >= quads.length)",
      "info" : "IfStatement[66084-66221]:IfStatement[66278-66415]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66110-66221]:Block[66304-66415]"
    }, {
      "left" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
      "right" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
      "info" : "ExpressionStatement[66140-66195]:ExpressionStatement[66334-66389]"
    }, {
      "left" : "quads[qlen++] = currQuad;",
      "right" : "quads[qlen++] = currQuad;",
      "info" : "ExpressionStatement[66246-66271]:ExpressionStatement[66440-66465]"
    }, {
      "left" : "currQuad = 0;",
      "right" : "currQuad = 0;",
      "info" : "ExpressionStatement[66296-66309]:ExpressionStatement[66490-66503]"
    }, {
      "left" : "currQuadBytes = 0;",
      "right" : "currQuadBytes = 0;",
      "info" : "ExpressionStatement[66334-66352]:ExpressionStatement[66528-66546]"
    }, {
      "left" : "if (ch < 0x800)",
      "right" : "if (ch < 0x800)",
      "info" : "IfStatement[66395-67381]:IfStatement[66589-67575]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66411-66616]:Block[66605-66810]"
    }, {
      "left" : "currQuad = (currQuad << 8) | (0xc0 | (ch >> 6));",
      "right" : "currQuad = (currQuad << 8) | (0xc0 | (ch >> 6));",
      "info" : "ExpressionStatement[66447-66495]:ExpressionStatement[66641-66689]"
    }, {
      "left" : "++currQuadBytes;",
      "right" : "++currQuadBytes;",
      "info" : "ExpressionStatement[66520-66536]:ExpressionStatement[66714-66730]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66622-67381]:Block[66816-67575]"
    }, {
      "left" : "currQuad = (currQuad << 8) | (0xe0 | (ch >> 12));",
      "right" : "currQuad = (currQuad << 8) | (0xe0 | (ch >> 12));",
      "info" : "ExpressionStatement[66699-66748]:ExpressionStatement[66893-66942]"
    }, {
      "left" : "++currQuadBytes;",
      "right" : "++currQuadBytes;",
      "info" : "ExpressionStatement[66773-66789]:ExpressionStatement[66967-66983]"
    }, {
      "left" : "if (currQuadBytes >= 4)",
      "right" : "if (currQuadBytes >= 4)",
      "info" : "IfStatement[66868-67236]:IfStatement[67062-67430]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66892-67236]:Block[67086-67430]"
    }, {
      "left" : "if (qlen >= quads.length)",
      "right" : "if (qlen >= quads.length)",
      "info" : "IfStatement[66922-67067]:IfStatement[67116-67261]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66948-67067]:Block[67142-67261]"
    }, {
      "left" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
      "right" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
      "info" : "ExpressionStatement[66982-67037]:ExpressionStatement[67176-67231]"
    }, {
      "left" : "quads[qlen++] = currQuad;",
      "right" : "quads[qlen++] = currQuad;",
      "info" : "ExpressionStatement[67096-67121]:ExpressionStatement[67290-67315]"
    }, {
      "left" : "currQuad = 0;",
      "right" : "currQuad = 0;",
      "info" : "ExpressionStatement[67150-67163]:ExpressionStatement[67344-67357]"
    }, {
      "left" : "currQuadBytes = 0;",
      "right" : "currQuadBytes = 0;",
      "info" : "ExpressionStatement[67192-67210]:ExpressionStatement[67386-67404]"
    }, {
      "left" : "currQuad = (currQuad << 8) | (0x80 | ((ch >> 6) & 0x3f));",
      "right" : "currQuad = (currQuad << 8) | (0x80 | ((ch >> 6) & 0x3f));",
      "info" : "ExpressionStatement[67261-67318]:ExpressionStatement[67455-67512]"
    }, {
      "left" : "++currQuadBytes;",
      "right" : "++currQuadBytes;",
      "info" : "ExpressionStatement[67343-67359]:ExpressionStatement[67537-67553]"
    }, {
      "left" : "ch = 0x80 | (ch & 0x3f);",
      "right" : "ch = 0x80 | (ch & 0x3f);",
      "info" : "ExpressionStatement[67478-67502]:ExpressionStatement[67672-67696]"
    }, {
      "left" : "if (currQuadBytes < 4)",
      "right" : "if (currQuadBytes < 4)",
      "info" : "IfStatement[67608-67995]:IfStatement[67802-68189]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67631-67728]:Block[67825-67922]"
    }, {
      "left" : "++currQuadBytes;",
      "right" : "++currQuadBytes;",
      "info" : "ExpressionStatement[67649-67665]:ExpressionStatement[67843-67859]"
    }, {
      "left" : "currQuad = (currQuad << 8) | ch;",
      "right" : "currQuad = (currQuad << 8) | ch;",
      "info" : "ExpressionStatement[67682-67714]:ExpressionStatement[67876-67908]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67734-67995]:Block[67928-68189]"
    }, {
      "left" : "if (qlen >= quads.length)",
      "right" : "if (qlen >= quads.length)",
      "info" : "IfStatement[67752-67873]:IfStatement[67946-68067]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67778-67873]:Block[67972-68067]"
    }, {
      "left" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
      "right" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
      "info" : "ExpressionStatement[67800-67855]:ExpressionStatement[67994-68049]"
    }, {
      "left" : "quads[qlen++] = currQuad;",
      "right" : "quads[qlen++] = currQuad;",
      "info" : "ExpressionStatement[67890-67915]:ExpressionStatement[68084-68109]"
    }, {
      "left" : "currQuad = ch;",
      "right" : "currQuad = ch;",
      "info" : "ExpressionStatement[67932-67946]:ExpressionStatement[68126-68140]"
    }, {
      "left" : "currQuadBytes = 1;",
      "right" : "currQuadBytes = 1;",
      "info" : "ExpressionStatement[67963-67981]:ExpressionStatement[68157-68175]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[68008-68161]:IfStatement[68202-68355]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68036-68161]:Block[68230-68355]"
    }, {
      "left" : "if (!loadMore())",
      "right" : "if (!loadMore())",
      "info" : "IfStatement[68054-68147]:IfStatement[68248-68341]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68071-68147]:Block[68265-68341]"
    }, {
      "left" : "_reportInvalidEOF(\" in field name\");",
      "right" : "_reportInvalidEOF(\" in field name\");",
      "info" : "ExpressionStatement[68093-68129]:ExpressionStatement[68287-68323]"
    }, {
      "left" : "ch = _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "ch = _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[68174-68212]:ExpressionStatement[68368-68406]"
    }, {
      "left" : "if (currQuadBytes > 0)",
      "right" : "if (currQuadBytes > 0)",
      "info" : "IfStatement[68232-68450]:IfStatement[68426-68644]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68255-68450]:Block[68449-68644]"
    }, {
      "left" : "if (qlen >= quads.length)",
      "right" : "if (qlen >= quads.length)",
      "info" : "IfStatement[68269-68382]:IfStatement[68463-68576]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68295-68382]:Block[68489-68576]"
    }, {
      "left" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
      "right" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
      "info" : "ExpressionStatement[68313-68368]:ExpressionStatement[68507-68562]"
    }, {
      "left" : "quads[qlen++] = pad(currQuad, currQuadBytes);",
      "right" : "quads[qlen++] = pad(currQuad, currQuadBytes);",
      "info" : "ExpressionStatement[68395-68440]:ExpressionStatement[68589-68634]"
    }, {
      "left" : "String name = _symbols.findName(quads, qlen);",
      "right" : "String name = _symbols.findName(quads, qlen);",
      "info" : "VariableDeclarationStatement[68459-68504]:VariableDeclarationStatement[68653-68698]"
    }, {
      "left" : "if (name == null)",
      "right" : "if (name == null)",
      "info" : "IfStatement[68513-68598]:IfStatement[68707-68792]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68531-68598]:Block[68725-68792]"
    }, {
      "left" : "name = addName(quads, qlen, currQuadBytes);",
      "right" : "name = addName(quads, qlen, currQuadBytes);",
      "info" : "ExpressionStatement[68545-68588]:ExpressionStatement[68739-68782]"
    }, {
      "left" : "return name;",
      "right" : "return name;",
      "info" : "ReturnStatement[68607-68619]:ReturnStatement[68801-68813]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68944-71419]:Block[69138-71613]"
    }, {
      "left" : "if (ch == '\\'' && isEnabled(Feature.ALLOW_SINGLE_QUOTES))",
      "right" : "if (ch == '\\'' && isEnabled(Feature.ALLOW_SINGLE_QUOTES))",
      "info" : "IfStatement[69000-69106]:IfStatement[69194-69300]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69058-69106]:Block[69252-69300]"
    }, {
      "left" : "return _parseAposName();",
      "right" : "return _parseAposName();",
      "info" : "ReturnStatement[69072-69096]:ReturnStatement[69266-69290]"
    }, {
      "left" : "if (!isEnabled(Feature.ALLOW_UNQUOTED_FIELD_NAMES))",
      "right" : "if (!isEnabled(Feature.ALLOW_UNQUOTED_FIELD_NAMES))",
      "info" : "IfStatement[69181-69385]:IfStatement[69375-69579]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69233-69385]:Block[69427-69579]"
    }, {
      "left" : "char c = (char) _decodeCharForError(ch);",
      "right" : "char c = (char) _decodeCharForError(ch);",
      "info" : "VariableDeclarationStatement[69247-69287]:VariableDeclarationStatement[69441-69481]"
    }, {
      "left" : "_reportUnexpectedChar(c, \"was expecting double-quote to start field name\");",
      "right" : "_reportUnexpectedChar(c, \"was expecting double-quote to start field name\");",
      "info" : "ExpressionStatement[69300-69375]:ExpressionStatement[69494-69569]"
    }, {
      "left" : "final int[] codes = CharTypes.getInputCodeUtf8JsNames();",
      "right" : "final int[] codes = CharTypes.getInputCodeUtf8JsNames();",
      "info" : "VariableDeclarationStatement[69601-69657]:VariableDeclarationStatement[69795-69851]"
    }, {
      "left" : "if (codes[ch] != 0)",
      "right" : "if (codes[ch] != 0)",
      "info" : "IfStatement[69720-69904]:IfStatement[69914-70098]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69740-69904]:Block[69934-70098]"
    }, {
      "left" : "_reportUnexpectedChar(ch, \"was expecting either valid name character (for unquoted name) or double-quote (for quoted) to start field name\");",
      "right" : "_reportUnexpectedChar(ch, \"was expecting either valid name character (for unquoted name) or double-quote (for quoted) to start field name\");",
      "info" : "ExpressionStatement[69754-69894]:ExpressionStatement[69948-70088]"
    }, {
      "left" : "int[] quads = _quadBuffer;",
      "right" : "int[] quads = _quadBuffer;",
      "info" : "VariableDeclarationStatement[70125-70151]:VariableDeclarationStatement[70319-70345]"
    }, {
      "left" : "int qlen = 0;",
      "right" : "int qlen = 0;",
      "info" : "VariableDeclarationStatement[70160-70173]:VariableDeclarationStatement[70354-70367]"
    }, {
      "left" : "int currQuad = 0;",
      "right" : "int currQuad = 0;",
      "info" : "VariableDeclarationStatement[70182-70199]:VariableDeclarationStatement[70376-70393]"
    }, {
      "left" : "int currQuadBytes = 0;",
      "right" : "int currQuadBytes = 0;",
      "info" : "VariableDeclarationStatement[70208-70230]:VariableDeclarationStatement[70402-70424]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[70240-71036]:WhileStatement[70434-71230]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70253-71036]:Block[70447-71230]"
    }, {
      "left" : "if (currQuadBytes < 4)",
      "right" : "if (currQuadBytes < 4)",
      "info" : "IfStatement[70328-70715]:IfStatement[70522-70909]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70351-70448]:Block[70545-70642]"
    }, {
      "left" : "++currQuadBytes;",
      "right" : "++currQuadBytes;",
      "info" : "ExpressionStatement[70369-70385]:ExpressionStatement[70563-70579]"
    }, {
      "left" : "currQuad = (currQuad << 8) | ch;",
      "right" : "currQuad = (currQuad << 8) | ch;",
      "info" : "ExpressionStatement[70402-70434]:ExpressionStatement[70596-70628]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70454-70715]:Block[70648-70909]"
    }, {
      "left" : "if (qlen >= quads.length)",
      "right" : "if (qlen >= quads.length)",
      "info" : "IfStatement[70472-70593]:IfStatement[70666-70787]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70498-70593]:Block[70692-70787]"
    }, {
      "left" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
      "right" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
      "info" : "ExpressionStatement[70520-70575]:ExpressionStatement[70714-70769]"
    }, {
      "left" : "quads[qlen++] = currQuad;",
      "right" : "quads[qlen++] = currQuad;",
      "info" : "ExpressionStatement[70610-70635]:ExpressionStatement[70804-70829]"
    }, {
      "left" : "currQuad = ch;",
      "right" : "currQuad = ch;",
      "info" : "ExpressionStatement[70652-70666]:ExpressionStatement[70846-70860]"
    }, {
      "left" : "currQuadBytes = 1;",
      "right" : "currQuadBytes = 1;",
      "info" : "ExpressionStatement[70683-70701]:ExpressionStatement[70877-70895]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[70728-70881]:IfStatement[70922-71075]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70756-70881]:Block[70950-71075]"
    }, {
      "left" : "if (!loadMore())",
      "right" : "if (!loadMore())",
      "info" : "IfStatement[70774-70867]:IfStatement[70968-71061]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70791-70867]:Block[70985-71061]"
    }, {
      "left" : "_reportInvalidEOF(\" in field name\");",
      "right" : "_reportInvalidEOF(\" in field name\");",
      "info" : "ExpressionStatement[70813-70849]:ExpressionStatement[71007-71043]"
    }, {
      "left" : "ch = _inputBuffer[_inputPtr] & 0xFF;",
      "right" : "ch = _inputBuffer[_inputPtr] & 0xFF;",
      "info" : "ExpressionStatement[70894-70930]:ExpressionStatement[71088-71124]"
    }, {
      "left" : "if (codes[ch] != 0)",
      "right" : "if (codes[ch] != 0)",
      "info" : "IfStatement[70943-71001]:IfStatement[71137-71195]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70963-71001]:Block[71157-71195]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[70981-70987]:BreakStatement[71175-71181]"
    }, {
      "left" : "++_inputPtr;",
      "right" : "++_inputPtr;",
      "info" : "ExpressionStatement[71014-71026]:ExpressionStatement[71208-71220]"
    }, {
      "left" : "if (currQuadBytes > 0)",
      "right" : "if (currQuadBytes > 0)",
      "info" : "IfStatement[71046-71244]:IfStatement[71240-71438]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71069-71244]:Block[71263-71438]"
    }, {
      "left" : "if (qlen >= quads.length)",
      "right" : "if (qlen >= quads.length)",
      "info" : "IfStatement[71083-71196]:IfStatement[71277-71390]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71109-71196]:Block[71303-71390]"
    }, {
      "left" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
      "right" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
      "info" : "ExpressionStatement[71127-71182]:ExpressionStatement[71321-71376]"
    }, {
      "left" : "quads[qlen++] = currQuad;",
      "right" : "quads[qlen++] = currQuad;",
      "info" : "ExpressionStatement[71209-71234]:ExpressionStatement[71403-71428]"
    }, {
      "left" : "String name = _symbols.findName(quads, qlen);",
      "right" : "String name = _symbols.findName(quads, qlen);",
      "info" : "VariableDeclarationStatement[71253-71298]:VariableDeclarationStatement[71447-71492]"
    }, {
      "left" : "if (name == null)",
      "right" : "if (name == null)",
      "info" : "IfStatement[71307-71392]:IfStatement[71501-71586]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71325-71392]:Block[71519-71586]"
    }, {
      "left" : "name = addName(quads, qlen, currQuadBytes);",
      "right" : "name = addName(quads, qlen, currQuadBytes);",
      "info" : "ExpressionStatement[71339-71382]:ExpressionStatement[71533-71576]"
    }, {
      "left" : "return name;",
      "right" : "return name;",
      "info" : "ReturnStatement[71401-71413]:ReturnStatement[71595-71607]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71716-75758]:Block[71910-75952]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[71726-71886]:IfStatement[71920-72080]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71754-71886]:Block[71948-72080]"
    }, {
      "left" : "if (!loadMore())",
      "right" : "if (!loadMore())",
      "info" : "IfStatement[71768-71876]:IfStatement[71962-72070]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71785-71876]:Block[71979-72070]"
    }, {
      "left" : "_reportInvalidEOF(\": was expecting closing '\\'' for name\");",
      "right" : "_reportInvalidEOF(\": was expecting closing '\\'' for name\");",
      "info" : "ExpressionStatement[71803-71862]:ExpressionStatement[71997-72056]"
    }, {
      "left" : "int ch = _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "int ch = _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "VariableDeclarationStatement[71895-71937]:VariableDeclarationStatement[72089-72131]"
    }, {
      "left" : "if (ch == '\\'')",
      "right" : "if (ch == '\\'')",
      "info" : "IfStatement[71946-72016]:IfStatement[72140-72210]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71962-72016]:Block[72156-72210]"
    }, {
      "left" : "return \"\";",
      "right" : "return \"\";",
      "info" : "ReturnStatement[71996-72006]:ReturnStatement[72190-72200]"
    }, {
      "left" : "int[] quads = _quadBuffer;",
      "right" : "int[] quads = _quadBuffer;",
      "info" : "VariableDeclarationStatement[72025-72051]:VariableDeclarationStatement[72219-72245]"
    }, {
      "left" : "int qlen = 0;",
      "right" : "int qlen = 0;",
      "info" : "VariableDeclarationStatement[72060-72073]:VariableDeclarationStatement[72254-72267]"
    }, {
      "left" : "int currQuad = 0;",
      "right" : "int currQuad = 0;",
      "info" : "VariableDeclarationStatement[72082-72099]:VariableDeclarationStatement[72276-72293]"
    }, {
      "left" : "int currQuadBytes = 0;",
      "right" : "int currQuadBytes = 0;",
      "info" : "VariableDeclarationStatement[72108-72130]:VariableDeclarationStatement[72302-72324]"
    }, {
      "left" : "final int[] codes = _icLatin1;",
      "right" : "final int[] codes = _icLatin1;",
      "info" : "VariableDeclarationStatement[72204-72234]:VariableDeclarationStatement[72398-72428]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[72244-75355]:WhileStatement[72438-75549]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72257-75355]:Block[72451-75549]"
    }, {
      "left" : "if (ch == '\\'')",
      "right" : "if (ch == '\\'')",
      "info" : "IfStatement[72271-72325]:IfStatement[72465-72519]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72287-72325]:Block[72481-72519]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[72305-72311]:BreakStatement[72499-72505]"
    }, {
      "left" : "if (ch != '\"' && codes[ch] != 0)",
      "right" : "if (ch != '\"' && codes[ch] != 0)",
      "info" : "IfStatement[72404-74667]:IfStatement[72598-74861]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72437-74667]:Block[72631-74861]"
    }, {
      "left" : "if (ch != '\\\\')",
      "right" : "if (ch != '\\\\')",
      "info" : "IfStatement[72455-72767]:IfStatement[72649-72961]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72471-72654]:Block[72665-72848]"
    }, {
      "left" : "_throwUnquotedSpace(ch, \"name\");",
      "right" : "_throwUnquotedSpace(ch, \"name\");",
      "info" : "ExpressionStatement[72604-72636]:ExpressionStatement[72798-72830]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72660-72767]:Block[72854-72961]"
    }, {
      "left" : "ch = _decodeEscaped();",
      "right" : "ch = _decodeEscaped();",
      "info" : "ExpressionStatement[72727-72749]:ExpressionStatement[72921-72943]"
    }, {
      "left" : "if (ch > 127)",
      "right" : "if (ch > 127)",
      "info" : "IfStatement[73062-74653]:IfStatement[73256-74847]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73076-74653]:Block[73270-74847]"
    }, {
      "left" : "if (currQuadBytes >= 4)",
      "right" : "if (currQuadBytes >= 4)",
      "info" : "IfStatement[73167-73507]:IfStatement[73361-73701]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73191-73507]:Block[73385-73701]"
    }, {
      "left" : "if (qlen >= quads.length)",
      "right" : "if (qlen >= quads.length)",
      "info" : "IfStatement[73217-73354]:IfStatement[73411-73548]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73243-73354]:Block[73437-73548]"
    }, {
      "left" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
      "right" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
      "info" : "ExpressionStatement[73273-73328]:ExpressionStatement[73467-73522]"
    }, {
      "left" : "quads[qlen++] = currQuad;",
      "right" : "quads[qlen++] = currQuad;",
      "info" : "ExpressionStatement[73379-73404]:ExpressionStatement[73573-73598]"
    }, {
      "left" : "currQuad = 0;",
      "right" : "currQuad = 0;",
      "info" : "ExpressionStatement[73429-73442]:ExpressionStatement[73623-73636]"
    }, {
      "left" : "currQuadBytes = 0;",
      "right" : "currQuadBytes = 0;",
      "info" : "ExpressionStatement[73467-73485]:ExpressionStatement[73661-73679]"
    }, {
      "left" : "if (ch < 0x800)",
      "right" : "if (ch < 0x800)",
      "info" : "IfStatement[73528-74514]:IfStatement[73722-74708]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73544-73749]:Block[73738-73943]"
    }, {
      "left" : "currQuad = (currQuad << 8) | (0xc0 | (ch >> 6));",
      "right" : "currQuad = (currQuad << 8) | (0xc0 | (ch >> 6));",
      "info" : "ExpressionStatement[73580-73628]:ExpressionStatement[73774-73822]"
    }, {
      "left" : "++currQuadBytes;",
      "right" : "++currQuadBytes;",
      "info" : "ExpressionStatement[73653-73669]:ExpressionStatement[73847-73863]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73755-74514]:Block[73949-74708]"
    }, {
      "left" : "currQuad = (currQuad << 8) | (0xe0 | (ch >> 12));",
      "right" : "currQuad = (currQuad << 8) | (0xe0 | (ch >> 12));",
      "info" : "ExpressionStatement[73832-73881]:ExpressionStatement[74026-74075]"
    }, {
      "left" : "++currQuadBytes;",
      "right" : "++currQuadBytes;",
      "info" : "ExpressionStatement[73906-73922]:ExpressionStatement[74100-74116]"
    }, {
      "left" : "if (currQuadBytes >= 4)",
      "right" : "if (currQuadBytes >= 4)",
      "info" : "IfStatement[74001-74369]:IfStatement[74195-74563]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74025-74369]:Block[74219-74563]"
    }, {
      "left" : "if (qlen >= quads.length)",
      "right" : "if (qlen >= quads.length)",
      "info" : "IfStatement[74055-74200]:IfStatement[74249-74394]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74081-74200]:Block[74275-74394]"
    }, {
      "left" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
      "right" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
      "info" : "ExpressionStatement[74115-74170]:ExpressionStatement[74309-74364]"
    }, {
      "left" : "quads[qlen++] = currQuad;",
      "right" : "quads[qlen++] = currQuad;",
      "info" : "ExpressionStatement[74229-74254]:ExpressionStatement[74423-74448]"
    }, {
      "left" : "currQuad = 0;",
      "right" : "currQuad = 0;",
      "info" : "ExpressionStatement[74283-74296]:ExpressionStatement[74477-74490]"
    }, {
      "left" : "currQuadBytes = 0;",
      "right" : "currQuadBytes = 0;",
      "info" : "ExpressionStatement[74325-74343]:ExpressionStatement[74519-74537]"
    }, {
      "left" : "currQuad = (currQuad << 8) | (0x80 | ((ch >> 6) & 0x3f));",
      "right" : "currQuad = (currQuad << 8) | (0x80 | ((ch >> 6) & 0x3f));",
      "info" : "ExpressionStatement[74394-74451]:ExpressionStatement[74588-74645]"
    }, {
      "left" : "++currQuadBytes;",
      "right" : "++currQuadBytes;",
      "info" : "ExpressionStatement[74476-74492]:ExpressionStatement[74670-74686]"
    }, {
      "left" : "ch = 0x80 | (ch & 0x3f);",
      "right" : "ch = 0x80 | (ch & 0x3f);",
      "info" : "ExpressionStatement[74611-74635]:ExpressionStatement[74805-74829]"
    }, {
      "left" : "if (currQuadBytes < 4)",
      "right" : "if (currQuadBytes < 4)",
      "info" : "IfStatement[74741-75128]:IfStatement[74935-75322]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74764-74861]:Block[74958-75055]"
    }, {
      "left" : "++currQuadBytes;",
      "right" : "++currQuadBytes;",
      "info" : "ExpressionStatement[74782-74798]:ExpressionStatement[74976-74992]"
    }, {
      "left" : "currQuad = (currQuad << 8) | ch;",
      "right" : "currQuad = (currQuad << 8) | ch;",
      "info" : "ExpressionStatement[74815-74847]:ExpressionStatement[75009-75041]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74867-75128]:Block[75061-75322]"
    }, {
      "left" : "if (qlen >= quads.length)",
      "right" : "if (qlen >= quads.length)",
      "info" : "IfStatement[74885-75006]:IfStatement[75079-75200]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74911-75006]:Block[75105-75200]"
    }, {
      "left" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
      "right" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
      "info" : "ExpressionStatement[74933-74988]:ExpressionStatement[75127-75182]"
    }, {
      "left" : "quads[qlen++] = currQuad;",
      "right" : "quads[qlen++] = currQuad;",
      "info" : "ExpressionStatement[75023-75048]:ExpressionStatement[75217-75242]"
    }, {
      "left" : "currQuad = ch;",
      "right" : "currQuad = ch;",
      "info" : "ExpressionStatement[75065-75079]:ExpressionStatement[75259-75273]"
    }, {
      "left" : "currQuadBytes = 1;",
      "right" : "currQuadBytes = 1;",
      "info" : "ExpressionStatement[75096-75114]:ExpressionStatement[75290-75308]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[75141-75294]:IfStatement[75335-75488]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75169-75294]:Block[75363-75488]"
    }, {
      "left" : "if (!loadMore())",
      "right" : "if (!loadMore())",
      "info" : "IfStatement[75187-75280]:IfStatement[75381-75474]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75204-75280]:Block[75398-75474]"
    }, {
      "left" : "_reportInvalidEOF(\" in field name\");",
      "right" : "_reportInvalidEOF(\" in field name\");",
      "info" : "ExpressionStatement[75226-75262]:ExpressionStatement[75420-75456]"
    }, {
      "left" : "ch = _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "ch = _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[75307-75345]:ExpressionStatement[75501-75539]"
    }, {
      "left" : "if (currQuadBytes > 0)",
      "right" : "if (currQuadBytes > 0)",
      "info" : "IfStatement[75365-75583]:IfStatement[75559-75777]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75388-75583]:Block[75582-75777]"
    }, {
      "left" : "if (qlen >= quads.length)",
      "right" : "if (qlen >= quads.length)",
      "info" : "IfStatement[75402-75515]:IfStatement[75596-75709]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75428-75515]:Block[75622-75709]"
    }, {
      "left" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
      "right" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
      "info" : "ExpressionStatement[75446-75501]:ExpressionStatement[75640-75695]"
    }, {
      "left" : "quads[qlen++] = pad(currQuad, currQuadBytes);",
      "right" : "quads[qlen++] = pad(currQuad, currQuadBytes);",
      "info" : "ExpressionStatement[75528-75573]:ExpressionStatement[75722-75767]"
    }, {
      "left" : "String name = _symbols.findName(quads, qlen);",
      "right" : "String name = _symbols.findName(quads, qlen);",
      "info" : "VariableDeclarationStatement[75592-75637]:VariableDeclarationStatement[75786-75831]"
    }, {
      "left" : "if (name == null)",
      "right" : "if (name == null)",
      "info" : "IfStatement[75646-75731]:IfStatement[75840-75925]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75664-75731]:Block[75858-75925]"
    }, {
      "left" : "name = addName(quads, qlen, currQuadBytes);",
      "right" : "name = addName(quads, qlen, currQuadBytes);",
      "info" : "ExpressionStatement[75678-75721]:ExpressionStatement[75872-75915]"
    }, {
      "left" : "return name;",
      "right" : "return name;",
      "info" : "ReturnStatement[75740-75752]:ReturnStatement[75934-75946]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76043-76413]:Block[76237-76607]"
    }, {
      "left" : "q1 = pad(q1, lastQuadBytes);",
      "right" : "q1 = pad(q1, lastQuadBytes);",
      "info" : "ExpressionStatement[76053-76081]:ExpressionStatement[76247-76275]"
    }, {
      "left" : "String name = _symbols.findName(q1);",
      "right" : "String name = _symbols.findName(q1);",
      "info" : "VariableDeclarationStatement[76163-76199]:VariableDeclarationStatement[76357-76393]"
    }, {
      "left" : "if (name != null)",
      "right" : "if (name != null)",
      "info" : "IfStatement[76208-76262]:IfStatement[76402-76456]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76226-76262]:Block[76420-76456]"
    }, {
      "left" : "return name;",
      "right" : "return name;",
      "info" : "ReturnStatement[76240-76252]:ReturnStatement[76434-76446]"
    }, {
      "left" : "_quadBuffer[0] = q1;",
      "right" : "_quadBuffer[0] = q1;",
      "info" : "ExpressionStatement[76332-76352]:ExpressionStatement[76526-76546]"
    }, {
      "left" : "return addName(_quadBuffer, 1, lastQuadBytes);",
      "right" : "return addName(_quadBuffer, 1, lastQuadBytes);",
      "info" : "ReturnStatement[76361-76407]:ReturnStatement[76555-76601]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76514-76917]:Block[76708-77111]"
    }, {
      "left" : "q2 = pad(q2, lastQuadBytes);",
      "right" : "q2 = pad(q2, lastQuadBytes);",
      "info" : "ExpressionStatement[76524-76552]:ExpressionStatement[76718-76746]"
    }, {
      "left" : "String name = _symbols.findName(q1, q2);",
      "right" : "String name = _symbols.findName(q1, q2);",
      "info" : "VariableDeclarationStatement[76634-76674]:VariableDeclarationStatement[76828-76868]"
    }, {
      "left" : "if (name != null)",
      "right" : "if (name != null)",
      "info" : "IfStatement[76683-76737]:IfStatement[76877-76931]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76701-76737]:Block[76895-76931]"
    }, {
      "left" : "return name;",
      "right" : "return name;",
      "info" : "ReturnStatement[76715-76727]:ReturnStatement[76909-76921]"
    }, {
      "left" : "_quadBuffer[0] = q1;",
      "right" : "_quadBuffer[0] = q1;",
      "info" : "ExpressionStatement[76807-76827]:ExpressionStatement[77001-77021]"
    }, {
      "left" : "_quadBuffer[1] = q2;",
      "right" : "_quadBuffer[1] = q2;",
      "info" : "ExpressionStatement[76836-76856]:ExpressionStatement[77030-77050]"
    }, {
      "left" : "return addName(_quadBuffer, 2, lastQuadBytes);",
      "right" : "return addName(_quadBuffer, 2, lastQuadBytes);",
      "info" : "ReturnStatement[76865-76911]:ReturnStatement[77059-77105]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77026-77359]:Block[77220-77553]"
    }, {
      "left" : "q3 = pad(q3, lastQuadBytes);",
      "right" : "q3 = pad(q3, lastQuadBytes);",
      "info" : "ExpressionStatement[77036-77064]:ExpressionStatement[77230-77258]"
    }, {
      "left" : "String name = _symbols.findName(q1, q2, q3);",
      "right" : "String name = _symbols.findName(q1, q2, q3);",
      "info" : "VariableDeclarationStatement[77073-77117]:VariableDeclarationStatement[77267-77311]"
    }, {
      "left" : "if (name != null)",
      "right" : "if (name != null)",
      "info" : "IfStatement[77126-77180]:IfStatement[77320-77374]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77144-77180]:Block[77338-77374]"
    }, {
      "left" : "return name;",
      "right" : "return name;",
      "info" : "ReturnStatement[77158-77170]:ReturnStatement[77352-77364]"
    }, {
      "left" : "int[] quads = _quadBuffer;",
      "right" : "int[] quads = _quadBuffer;",
      "info" : "VariableDeclarationStatement[77189-77215]:VariableDeclarationStatement[77383-77409]"
    }, {
      "left" : "quads[0] = q1;",
      "right" : "quads[0] = q1;",
      "info" : "ExpressionStatement[77224-77238]:ExpressionStatement[77418-77432]"
    }, {
      "left" : "quads[1] = q2;",
      "right" : "quads[1] = q2;",
      "info" : "ExpressionStatement[77247-77261]:ExpressionStatement[77441-77455]"
    }, {
      "left" : "quads[2] = pad(q3, lastQuadBytes);",
      "right" : "quads[2] = pad(q3, lastQuadBytes);",
      "info" : "ExpressionStatement[77270-77304]:ExpressionStatement[77464-77498]"
    }, {
      "left" : "return addName(quads, 3, lastQuadBytes);",
      "right" : "return addName(quads, 3, lastQuadBytes);",
      "info" : "ReturnStatement[77313-77353]:ReturnStatement[77507-77547]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77485-77829]:Block[77679-78023]"
    }, {
      "left" : "if (qlen >= quads.length)",
      "right" : "if (qlen >= quads.length)",
      "info" : "IfStatement[77495-77600]:IfStatement[77689-77794]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77521-77600]:Block[77715-77794]"
    }, {
      "left" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
      "right" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
      "info" : "ExpressionStatement[77535-77590]:ExpressionStatement[77729-77784]"
    }, {
      "left" : "quads[qlen++] = pad(lastQuad, lastQuadBytes);",
      "right" : "quads[qlen++] = pad(lastQuad, lastQuadBytes);",
      "info" : "ExpressionStatement[77609-77654]:ExpressionStatement[77803-77848]"
    }, {
      "left" : "String name = _symbols.findName(quads, qlen);",
      "right" : "String name = _symbols.findName(quads, qlen);",
      "info" : "VariableDeclarationStatement[77663-77708]:VariableDeclarationStatement[77857-77902]"
    }, {
      "left" : "if (name == null)",
      "right" : "if (name == null)",
      "info" : "IfStatement[77717-77802]:IfStatement[77911-77996]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77735-77802]:Block[77929-77996]"
    }, {
      "left" : "return addName(quads, qlen, lastQuadBytes);",
      "right" : "return addName(quads, qlen, lastQuadBytes);",
      "info" : "ReturnStatement[77749-77792]:ReturnStatement[77943-77986]"
    }, {
      "left" : "return name;",
      "right" : "return name;",
      "info" : "ReturnStatement[77811-77823]:ReturnStatement[78005-78017]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78194-82512]:Block[78388-82706]"
    }, {
      "left" : "int byteLen = (qlen << 2) - 4 + lastQuadBytes;",
      "right" : "int byteLen = (qlen << 2) - 4 + lastQuadBytes;",
      "info" : "VariableDeclarationStatement[78474-78520]:VariableDeclarationStatement[78668-78714]"
    }, {
      "left" : "int lastQuad;",
      "right" : "int lastQuad;",
      "info" : "VariableDeclarationStatement[78819-78832]:VariableDeclarationStatement[79013-79026]"
    }, {
      "left" : "if (lastQuadBytes < 4)",
      "right" : "if (lastQuadBytes < 4)",
      "info" : "IfStatement[78842-79065]:IfStatement[79036-79259]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78865-79022]:Block[79059-79216]"
    }, {
      "left" : "lastQuad = quads[qlen-1];",
      "right" : "lastQuad = quads[qlen-1];",
      "info" : "ExpressionStatement[78879-78904]:ExpressionStatement[79073-79098]"
    }, {
      "left" : "quads[qlen-1] = (lastQuad << ((4 - lastQuadBytes) << 3));",
      "right" : "quads[qlen-1] = (lastQuad << ((4 - lastQuadBytes) << 3));",
      "info" : "ExpressionStatement[78955-79012]:ExpressionStatement[79149-79206]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79028-79065]:Block[79222-79259]"
    }, {
      "left" : "lastQuad = 0;",
      "right" : "lastQuad = 0;",
      "info" : "ExpressionStatement[79042-79055]:ExpressionStatement[79236-79249]"
    }, {
      "left" : "char[] cbuf = _textBuffer.emptyAndGetCurrentSegment();",
      "right" : "char[] cbuf = _textBuffer.emptyAndGetCurrentSegment();",
      "info" : "VariableDeclarationStatement[79134-79188]:VariableDeclarationStatement[79328-79382]"
    }, {
      "left" : "int cix = 0;",
      "right" : "int cix = 0;",
      "info" : "VariableDeclarationStatement[79197-79209]:VariableDeclarationStatement[79391-79403]"
    }, {
      "left" : "for (int ix = 0; ix < byteLen)",
      "right" : "for (int ix = 0; ix < byteLen)",
      "info" : "ForStatement[79219-82193]:ForStatement[79413-82387]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79252-82193]:Block[79446-82387]"
    }, {
      "left" : "int ch = quads[ix >> 2];",
      "right" : "int ch = quads[ix >> 2];",
      "info" : "VariableDeclarationStatement[79266-79290]:VariableDeclarationStatement[79460-79484]"
    }, {
      "left" : "int byteIx = (ix & 3);",
      "right" : "int byteIx = (ix & 3);",
      "info" : "VariableDeclarationStatement[79339-79361]:VariableDeclarationStatement[79533-79555]"
    }, {
      "left" : "ch = (ch >> ((3 - byteIx) << 3)) & 0xFF;",
      "right" : "ch = (ch >> ((3 - byteIx) << 3)) & 0xFF;",
      "info" : "ExpressionStatement[79374-79414]:ExpressionStatement[79568-79608]"
    }, {
      "left" : "++ix;",
      "right" : "++ix;",
      "info" : "ExpressionStatement[79427-79432]:ExpressionStatement[79621-79626]"
    }, {
      "left" : "if (ch > 127)",
      "right" : "if (ch > 127)",
      "info" : "IfStatement[79446-82035]:IfStatement[79640-82229]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79460-82035]:Block[79654-82229]"
    }, {
      "left" : "int needed;",
      "right" : "int needed;",
      "info" : "VariableDeclarationStatement[79492-79503]:VariableDeclarationStatement[79686-79697]"
    }, {
      "left" : "if ((ch & 0xE0) == 0xC0)",
      "right" : "if ((ch & 0xE0) == 0xC0)",
      "info" : "IfStatement[79520-80147]:IfStatement[79714-80341]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79545-79657]:Block[79739-79851]"
    }, {
      "left" : "ch &= 0x1F;",
      "right" : "ch &= 0x1F;",
      "info" : "ExpressionStatement[79596-79607]:ExpressionStatement[79790-79801]"
    }, {
      "left" : "needed = 1;",
      "right" : "needed = 1;",
      "info" : "ExpressionStatement[79628-79639]:ExpressionStatement[79822-79833]"
    }, {
      "left" : "if ((ch & 0xF0) == 0xE0)",
      "right" : "if ((ch & 0xF0) == 0xE0)",
      "info" : "IfStatement[79663-80147]:IfStatement[79857-80341]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79688-79800]:Block[79882-79994]"
    }, {
      "left" : "ch &= 0x0F;",
      "right" : "ch &= 0x0F;",
      "info" : "ExpressionStatement[79739-79750]:ExpressionStatement[79933-79944]"
    }, {
      "left" : "needed = 2;",
      "right" : "needed = 2;",
      "info" : "ExpressionStatement[79771-79782]:ExpressionStatement[79965-79976]"
    }, {
      "left" : "if ((ch & 0xF8) == 0xF0)",
      "right" : "if ((ch & 0xF8) == 0xF0)",
      "info" : "IfStatement[79806-80147]:IfStatement[80000-80341]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79831-79965]:Block[80025-80159]"
    }, {
      "left" : "ch &= 0x07;",
      "right" : "ch &= 0x07;",
      "info" : "ExpressionStatement[79904-79915]:ExpressionStatement[80098-80109]"
    }, {
      "left" : "needed = 3;",
      "right" : "needed = 3;",
      "info" : "ExpressionStatement[79936-79947]:ExpressionStatement[80130-80141]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79971-80147]:Block[80165-80341]"
    }, {
      "left" : "_reportInvalidInitial(ch);",
      "right" : "_reportInvalidInitial(ch);",
      "info" : "ExpressionStatement[80036-80062]:ExpressionStatement[80230-80256]"
    }, {
      "left" : "needed = ch = 1;",
      "right" : "needed = ch = 1;",
      "info" : "ExpressionStatement[80083-80099]:ExpressionStatement[80277-80293]"
    }, {
      "left" : "if ((ix + needed) > byteLen)",
      "right" : "if ((ix + needed) > byteLen)",
      "info" : "IfStatement[80164-80269]:IfStatement[80358-80463]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80193-80269]:Block[80387-80463]"
    }, {
      "left" : "_reportInvalidEOF(\" in field name\");",
      "right" : "_reportInvalidEOF(\" in field name\");",
      "info" : "ExpressionStatement[80215-80251]:ExpressionStatement[80409-80445]"
    }, {
      "left" : "int ch2 = quads[ix >> 2];",
      "right" : "int ch2 = quads[ix >> 2];",
      "info" : "VariableDeclarationStatement[80357-80382]:VariableDeclarationStatement[80551-80576]"
    }, {
      "left" : "byteIx = (ix & 3);",
      "right" : "byteIx = (ix & 3);",
      "info" : "ExpressionStatement[80435-80453]:ExpressionStatement[80629-80647]"
    }, {
      "left" : "ch2 = (ch2 >> ((3 - byteIx) << 3));",
      "right" : "ch2 = (ch2 >> ((3 - byteIx) << 3));",
      "info" : "ExpressionStatement[80470-80505]:ExpressionStatement[80664-80699]"
    }, {
      "left" : "++ix;",
      "right" : "++ix;",
      "info" : "ExpressionStatement[80522-80527]:ExpressionStatement[80716-80721]"
    }, {
      "left" : "if ((ch2 & 0xC0) != 0x080)",
      "right" : "if ((ch2 & 0xC0) != 0x080)",
      "info" : "IfStatement[80561-80653]:IfStatement[80755-80847]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80588-80653]:Block[80782-80847]"
    }, {
      "left" : "_reportInvalidOther(ch2);",
      "right" : "_reportInvalidOther(ch2);",
      "info" : "ExpressionStatement[80610-80635]:ExpressionStatement[80804-80829]"
    }, {
      "left" : "ch = (ch << 6) | (ch2 & 0x3F);",
      "right" : "ch = (ch << 6) | (ch2 & 0x3F);",
      "info" : "ExpressionStatement[80670-80700]:ExpressionStatement[80864-80894]"
    }, {
      "left" : "if (needed > 1)",
      "right" : "if (needed > 1)",
      "info" : "IfStatement[80717-81582]:IfStatement[80911-81776]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80733-81582]:Block[80927-81776]"
    }, {
      "left" : "ch2 = quads[ix >> 2];",
      "right" : "ch2 = quads[ix >> 2];",
      "info" : "ExpressionStatement[80755-80776]:ExpressionStatement[80949-80970]"
    }, {
      "left" : "byteIx = (ix & 3);",
      "right" : "byteIx = (ix & 3);",
      "info" : "ExpressionStatement[80797-80815]:ExpressionStatement[80991-81009]"
    }, {
      "left" : "ch2 = (ch2 >> ((3 - byteIx) << 3));",
      "right" : "ch2 = (ch2 >> ((3 - byteIx) << 3));",
      "info" : "ExpressionStatement[80836-80871]:ExpressionStatement[81030-81065]"
    }, {
      "left" : "++ix;",
      "right" : "++ix;",
      "info" : "ExpressionStatement[80892-80897]:ExpressionStatement[81086-81091]"
    }, {
      "left" : "if ((ch2 & 0xC0) != 0x080)",
      "right" : "if ((ch2 & 0xC0) != 0x080)",
      "info" : "IfStatement[80939-81039]:IfStatement[81133-81233]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80966-81039]:Block[81160-81233]"
    }, {
      "left" : "_reportInvalidOther(ch2);",
      "right" : "_reportInvalidOther(ch2);",
      "info" : "ExpressionStatement[80992-81017]:ExpressionStatement[81186-81211]"
    }, {
      "left" : "ch = (ch << 6) | (ch2 & 0x3F);",
      "right" : "ch = (ch << 6) | (ch2 & 0x3F);",
      "info" : "ExpressionStatement[81060-81090]:ExpressionStatement[81254-81284]"
    }, {
      "left" : "if (needed > 2)",
      "right" : "if (needed > 2)",
      "info" : "IfStatement[81111-81564]:IfStatement[81305-81758]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81127-81564]:Block[81321-81758]"
    }, {
      "left" : "ch2 = quads[ix >> 2];",
      "right" : "ch2 = quads[ix >> 2];",
      "info" : "ExpressionStatement[81193-81214]:ExpressionStatement[81387-81408]"
    }, {
      "left" : "byteIx = (ix & 3);",
      "right" : "byteIx = (ix & 3);",
      "info" : "ExpressionStatement[81239-81257]:ExpressionStatement[81433-81451]"
    }, {
      "left" : "ch2 = (ch2 >> ((3 - byteIx) << 3));",
      "right" : "ch2 = (ch2 >> ((3 - byteIx) << 3));",
      "info" : "ExpressionStatement[81282-81317]:ExpressionStatement[81476-81511]"
    }, {
      "left" : "++ix;",
      "right" : "++ix;",
      "info" : "ExpressionStatement[81342-81347]:ExpressionStatement[81536-81541]"
    }, {
      "left" : "if ((ch2 & 0xC0) != 0x080)",
      "right" : "if ((ch2 & 0xC0) != 0x080)",
      "info" : "IfStatement[81372-81487]:IfStatement[81566-81681]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81399-81487]:Block[81593-81681]"
    }, {
      "left" : "_reportInvalidOther(ch2 & 0xFF);",
      "right" : "_reportInvalidOther(ch2 & 0xFF);",
      "info" : "ExpressionStatement[81429-81461]:ExpressionStatement[81623-81655]"
    }, {
      "left" : "ch = (ch << 6) | (ch2 & 0x3F);",
      "right" : "ch = (ch << 6) | (ch2 & 0x3F);",
      "info" : "ExpressionStatement[81512-81542]:ExpressionStatement[81706-81736]"
    }, {
      "left" : "if (needed > 2)",
      "right" : "if (needed > 2)",
      "info" : "IfStatement[81599-82021]:IfStatement[81793-82215]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81615-82021]:Block[81809-82215]"
    }, {
      "left" : "ch -= 0x10000;",
      "right" : "ch -= 0x10000;",
      "info" : "ExpressionStatement[81704-81718]:ExpressionStatement[81898-81912]"
    }, {
      "left" : "if (cix >= cbuf.length)",
      "right" : "if (cix >= cbuf.length)",
      "info" : "IfStatement[81776-81890]:IfStatement[81970-82084]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81800-81890]:Block[81994-82084]"
    }, {
      "left" : "cbuf = _textBuffer.expandCurrentSegment();",
      "right" : "cbuf = _textBuffer.expandCurrentSegment();",
      "info" : "ExpressionStatement[81826-81868]:ExpressionStatement[82020-82062]"
    }, {
      "left" : "cbuf[cix++] = (char) (0xD800 + (ch >> 10));",
      "right" : "cbuf[cix++] = (char) (0xD800 + (ch >> 10));",
      "info" : "ExpressionStatement[81911-81954]:ExpressionStatement[82105-82148]"
    }, {
      "left" : "ch = 0xDC00 | (ch & 0x03FF);",
      "right" : "ch = 0xDC00 | (ch & 0x03FF);",
      "info" : "ExpressionStatement[81975-82003]:ExpressionStatement[82169-82197]"
    }, {
      "left" : "if (cix >= cbuf.length)",
      "right" : "if (cix >= cbuf.length)",
      "info" : "IfStatement[82048-82146]:IfStatement[82242-82340]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82072-82146]:Block[82266-82340]"
    }, {
      "left" : "cbuf = _textBuffer.expandCurrentSegment();",
      "right" : "cbuf = _textBuffer.expandCurrentSegment();",
      "info" : "ExpressionStatement[82090-82132]:ExpressionStatement[82284-82326]"
    }, {
      "left" : "cbuf[cix++] = (char) ch;",
      "right" : "cbuf[cix++] = (char) ch;",
      "info" : "ExpressionStatement[82159-82183]:ExpressionStatement[82353-82377]"
    }, {
      "left" : "String baseName = new String(cbuf, 0, cix);",
      "right" : "String baseName = new String(cbuf, 0, cix);",
      "info" : "VariableDeclarationStatement[82280-82323]:VariableDeclarationStatement[82474-82517]"
    }, {
      "left" : "if (lastQuadBytes < 4)",
      "right" : "if (lastQuadBytes < 4)",
      "info" : "IfStatement[82378-82450]:IfStatement[82572-82644]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82401-82450]:Block[82595-82644]"
    }, {
      "left" : "quads[qlen-1] = lastQuad;",
      "right" : "quads[qlen-1] = lastQuad;",
      "info" : "ExpressionStatement[82415-82440]:ExpressionStatement[82609-82634]"
    }, {
      "left" : "return _symbols.addName(baseName, quads, qlen);",
      "right" : "return _symbols.addName(baseName, quads, qlen);",
      "info" : "ReturnStatement[82459-82506]:ReturnStatement[82653-82700]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82776-83729]:Block[82970-83923]"
    }, {
      "left" : "int ptr = _inputPtr;",
      "right" : "int ptr = _inputPtr;",
      "info" : "VariableDeclarationStatement[82889-82909]:VariableDeclarationStatement[83083-83103]"
    }, {
      "left" : "if (ptr >= _inputEnd)",
      "right" : "if (ptr >= _inputEnd)",
      "info" : "IfStatement[82918-83014]:IfStatement[83112-83208]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82940-83014]:Block[83134-83208]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[82954-82975]:ExpressionStatement[83148-83169]"
    }, {
      "left" : "ptr = _inputPtr;",
      "right" : "ptr = _inputPtr;",
      "info" : "ExpressionStatement[82988-83004]:ExpressionStatement[83182-83198]"
    }, {
      "left" : "int outPtr = 0;",
      "right" : "int outPtr = 0;",
      "info" : "VariableDeclarationStatement[83023-83038]:VariableDeclarationStatement[83217-83232]"
    }, {
      "left" : "char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();",
      "right" : "char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();",
      "info" : "VariableDeclarationStatement[83047-83103]:VariableDeclarationStatement[83241-83297]"
    }, {
      "left" : "final int[] codes = _icUTF8;",
      "right" : "final int[] codes = _icUTF8;",
      "info" : "VariableDeclarationStatement[83112-83140]:VariableDeclarationStatement[83306-83334]"
    }, {
      "left" : "final int max = Math.min(_inputEnd, (ptr + outBuf.length));",
      "right" : "final int max = Math.min(_inputEnd, (ptr + outBuf.length));",
      "info" : "VariableDeclarationStatement[83150-83209]:VariableDeclarationStatement[83344-83403]"
    }, {
      "left" : "final byte[] inputBuffer = _inputBuffer;",
      "right" : "final byte[] inputBuffer = _inputBuffer;",
      "info" : "VariableDeclarationStatement[83218-83258]:VariableDeclarationStatement[83412-83452]"
    }, {
      "left" : "while (ptr < max)",
      "right" : "while (ptr < max)",
      "info" : "WhileStatement[83267-83658]:WhileStatement[83461-83852]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[83285-83658]:Block[83479-83852]"
    }, {
      "left" : "int c = (int) inputBuffer[ptr] & 0xFF;",
      "right" : "int c = (int) inputBuffer[ptr] & 0xFF;",
      "info" : "VariableDeclarationStatement[83299-83337]:VariableDeclarationStatement[83493-83531]"
    }, {
      "left" : "if (codes[c] != 0)",
      "right" : "if (codes[c] != 0)",
      "info" : "IfStatement[83350-83588]:IfStatement[83544-83782]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[83369-83588]:Block[83563-83782]"
    }, {
      "left" : "if (c == INT_QUOTE)",
      "right" : "if (c == INT_QUOTE)",
      "info" : "IfStatement[83387-83551]:IfStatement[83581-83745]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[83407-83551]:Block[83601-83745]"
    }, {
      "left" : "_inputPtr = ptr+1;",
      "right" : "_inputPtr = ptr+1;",
      "info" : "ExpressionStatement[83429-83447]:ExpressionStatement[83623-83641]"
    }, {
      "left" : "_textBuffer.setCurrentLength(outPtr);",
      "right" : "_textBuffer.setCurrentLength(outPtr);",
      "info" : "ExpressionStatement[83468-83505]:ExpressionStatement[83662-83699]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[83526-83533]:ReturnStatement[83720-83727]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[83568-83574]:BreakStatement[83762-83768]"
    }, {
      "left" : "++ptr;",
      "right" : "++ptr;",
      "info" : "ExpressionStatement[83601-83607]:ExpressionStatement[83795-83801]"
    }, {
      "left" : "outBuf[outPtr++] = (char) c;",
      "right" : "outBuf[outPtr++] = (char) c;",
      "info" : "ExpressionStatement[83620-83648]:ExpressionStatement[83814-83842]"
    }, {
      "left" : "_inputPtr = ptr;",
      "right" : "_inputPtr = ptr;",
      "info" : "ExpressionStatement[83667-83683]:ExpressionStatement[83861-83877]"
    }, {
      "left" : "_finishString2(outBuf, outPtr);",
      "right" : "_finishString2(outBuf, outPtr);",
      "info" : "ExpressionStatement[83692-83723]:ExpressionStatement[83886-83917]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[83834-84816]:Block[84028-85010]"
    }, {
      "left" : "int ptr = _inputPtr;",
      "right" : "int ptr = _inputPtr;",
      "info" : "VariableDeclarationStatement[83947-83967]:VariableDeclarationStatement[84141-84161]"
    }, {
      "left" : "if (ptr >= _inputEnd)",
      "right" : "if (ptr >= _inputEnd)",
      "info" : "IfStatement[83976-84072]:IfStatement[84170-84266]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[83998-84072]:Block[84192-84266]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[84012-84033]:ExpressionStatement[84206-84227]"
    }, {
      "left" : "ptr = _inputPtr;",
      "right" : "ptr = _inputPtr;",
      "info" : "ExpressionStatement[84046-84062]:ExpressionStatement[84240-84256]"
    }, {
      "left" : "int outPtr = 0;",
      "right" : "int outPtr = 0;",
      "info" : "VariableDeclarationStatement[84081-84096]:VariableDeclarationStatement[84275-84290]"
    }, {
      "left" : "char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();",
      "right" : "char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();",
      "info" : "VariableDeclarationStatement[84105-84161]:VariableDeclarationStatement[84299-84355]"
    }, {
      "left" : "final int[] codes = _icUTF8;",
      "right" : "final int[] codes = _icUTF8;",
      "info" : "VariableDeclarationStatement[84170-84198]:VariableDeclarationStatement[84364-84392]"
    }, {
      "left" : "final int max = Math.min(_inputEnd, (ptr + outBuf.length));",
      "right" : "final int max = Math.min(_inputEnd, (ptr + outBuf.length));",
      "info" : "VariableDeclarationStatement[84208-84267]:VariableDeclarationStatement[84402-84461]"
    }, {
      "left" : "final byte[] inputBuffer = _inputBuffer;",
      "right" : "final byte[] inputBuffer = _inputBuffer;",
      "info" : "VariableDeclarationStatement[84276-84316]:VariableDeclarationStatement[84470-84510]"
    }, {
      "left" : "while (ptr < max)",
      "right" : "while (ptr < max)",
      "info" : "WhileStatement[84325-84698]:WhileStatement[84519-84892]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[84343-84698]:Block[84537-84892]"
    }, {
      "left" : "int c = (int) inputBuffer[ptr] & 0xFF;",
      "right" : "int c = (int) inputBuffer[ptr] & 0xFF;",
      "info" : "VariableDeclarationStatement[84357-84395]:VariableDeclarationStatement[84551-84589]"
    }, {
      "left" : "if (codes[c] != 0)",
      "right" : "if (codes[c] != 0)",
      "info" : "IfStatement[84408-84628]:IfStatement[84602-84822]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[84427-84628]:Block[84621-84822]"
    }, {
      "left" : "if (c == INT_QUOTE)",
      "right" : "if (c == INT_QUOTE)",
      "info" : "IfStatement[84445-84591]:IfStatement[84639-84785]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[84465-84591]:Block[84659-84785]"
    }, {
      "left" : "_inputPtr = ptr+1;",
      "right" : "_inputPtr = ptr+1;",
      "info" : "ExpressionStatement[84487-84505]:ExpressionStatement[84681-84699]"
    }, {
      "left" : "return _textBuffer.setCurrentAndReturn(outPtr);",
      "right" : "return _textBuffer.setCurrentAndReturn(outPtr);",
      "info" : "ReturnStatement[84526-84573]:ReturnStatement[84720-84767]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[84608-84614]:BreakStatement[84802-84808]"
    }, {
      "left" : "++ptr;",
      "right" : "++ptr;",
      "info" : "ExpressionStatement[84641-84647]:ExpressionStatement[84835-84841]"
    }, {
      "left" : "outBuf[outPtr++] = (char) c;",
      "right" : "outBuf[outPtr++] = (char) c;",
      "info" : "ExpressionStatement[84660-84688]:ExpressionStatement[84854-84882]"
    }, {
      "left" : "_inputPtr = ptr;",
      "right" : "_inputPtr = ptr;",
      "info" : "ExpressionStatement[84707-84723]:ExpressionStatement[84901-84917]"
    }, {
      "left" : "_finishString2(outBuf, outPtr);",
      "right" : "_finishString2(outBuf, outPtr);",
      "info" : "ExpressionStatement[84732-84763]:ExpressionStatement[84926-84957]"
    }, {
      "left" : "return _textBuffer.contentsAsString();",
      "right" : "return _textBuffer.contentsAsString();",
      "info" : "ReturnStatement[84772-84810]:ReturnStatement[84966-85004]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[84918-87741]:Block[85112-87935]"
    }, {
      "left" : "int c;",
      "right" : "int c;",
      "info" : "VariableDeclarationStatement[84928-84934]:VariableDeclarationStatement[85122-85128]"
    }, {
      "left" : "final int[] codes = _icUTF8;",
      "right" : "final int[] codes = _icUTF8;",
      "info" : "VariableDeclarationStatement[84999-85027]:VariableDeclarationStatement[85193-85221]"
    }, {
      "left" : "final byte[] inputBuffer = _inputBuffer;",
      "right" : "final byte[] inputBuffer = _inputBuffer;",
      "info" : "VariableDeclarationStatement[85036-85076]:VariableDeclarationStatement[85230-85270]"
    }, {
      "left" : "main_loop:\n        while (true) {\n            // Then the tight ASCII non-funny-char loop:\n            ascii_loop:\n            while (true) {\n                int ptr = _inputPtr;\n                if (ptr >= _inputEnd) {\n                    loadMoreGuaranteed();\n                    ptr = _inputPtr;\n                }\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                final int max = Math.min(_inputEnd, (ptr + (outBuf.length - outPtr)));\n                while (ptr < max) {\n                    c = (int) inputBuffer[ptr++] & 0xFF;\n                    if (codes[c] != 0) {\n                        _inputPtr = ptr;\n                        break ascii_loop;\n                    }\n                    outBuf[outPtr++] = (char) c;\n                }\n                _inputPtr = ptr;\n            }\n            // Ok: end marker, escape or multi-byte?\n            if (c == INT_QUOTE) {\n                break main_loop;\n            }\n\n            switch (codes[c]) {\n            case 1: // backslash\n                c = _decodeEscaped();\n                break;\n            case 2: // 2-byte UTF\n                c = _decodeUtf8_2(c);\n                break;\n            case 3: // 3-byte UTF\n                if ((_inputEnd - _inputPtr) >= 2) {\n                    c = _decodeUtf8_3fast(c);\n                } else {\n                    c = _decodeUtf8_3(c);\n                }\n                break;\n            case 4: // 4-byte UTF\n                c = _decodeUtf8_4(c);\n                // Let's add first part right away:\n                outBuf[outPtr++] = (char) (0xD800 | (c >> 10));\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                c = 0xDC00 | (c & 0x3FF);\n                // And let the other char output down below\n                break;\n            default:\n                if (c < INT_SPACE) {\n                    // As per [JACKSON-208], call can now return:\n                    _throwUnquotedSpace(c, \"string value\");\n                } else {\n                    // Is this good enough error message?\n                    _reportInvalidChar(c);\n                }\n            }\n            // Need more room?\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            // Ok, let's add char to output:\n            outBuf[outPtr++] = (char) c;\n        }",
      "right" : "main_loop:\n        while (true) {\n            // Then the tight ASCII non-funny-char loop:\n            ascii_loop:\n            while (true) {\n                int ptr = _inputPtr;\n                if (ptr >= _inputEnd) {\n                    loadMoreGuaranteed();\n                    ptr = _inputPtr;\n                }\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                final int max = Math.min(_inputEnd, (ptr + (outBuf.length - outPtr)));\n                while (ptr < max) {\n                    c = (int) inputBuffer[ptr++] & 0xFF;\n                    if (codes[c] != 0) {\n                        _inputPtr = ptr;\n                        break ascii_loop;\n                    }\n                    outBuf[outPtr++] = (char) c;\n                }\n                _inputPtr = ptr;\n            }\n            // Ok: end marker, escape or multi-byte?\n            if (c == INT_QUOTE) {\n                break main_loop;\n            }\n\n            switch (codes[c]) {\n            case 1: // backslash\n                c = _decodeEscaped();\n                break;\n            case 2: // 2-byte UTF\n                c = _decodeUtf8_2(c);\n                break;\n            case 3: // 3-byte UTF\n                if ((_inputEnd - _inputPtr) >= 2) {\n                    c = _decodeUtf8_3fast(c);\n                } else {\n                    c = _decodeUtf8_3(c);\n                }\n                break;\n            case 4: // 4-byte UTF\n                c = _decodeUtf8_4(c);\n                // Let's add first part right away:\n                outBuf[outPtr++] = (char) (0xD800 | (c >> 10));\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                c = 0xDC00 | (c & 0x3FF);\n                // And let the other char output down below\n                break;\n            default:\n                if (c < INT_SPACE) {\n                    // As per [JACKSON-208], call can now return:\n                    _throwUnquotedSpace(c, \"string value\");\n                } else {\n                    // Is this good enough error message?\n                    _reportInvalidChar(c);\n                }\n            }\n            // Need more room?\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            // Ok, let's add char to output:\n            outBuf[outPtr++] = (char) c;\n        }",
      "info" : "LabeledStatement[85086-87689]:LabeledStatement[85280-87883]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[85105-87689]:WhileStatement[85299-87883]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[85118-87689]:Block[85312-87883]"
    }, {
      "left" : "ascii_loop:\n            while (true) {\n                int ptr = _inputPtr;\n                if (ptr >= _inputEnd) {\n                    loadMoreGuaranteed();\n                    ptr = _inputPtr;\n                }\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                final int max = Math.min(_inputEnd, (ptr + (outBuf.length - outPtr)));\n                while (ptr < max) {\n                    c = (int) inputBuffer[ptr++] & 0xFF;\n                    if (codes[c] != 0) {\n                        _inputPtr = ptr;\n                        break ascii_loop;\n                    }\n                    outBuf[outPtr++] = (char) c;\n                }\n                _inputPtr = ptr;\n            }",
      "right" : "ascii_loop:\n            while (true) {\n                int ptr = _inputPtr;\n                if (ptr >= _inputEnd) {\n                    loadMoreGuaranteed();\n                    ptr = _inputPtr;\n                }\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                final int max = Math.min(_inputEnd, (ptr + (outBuf.length - outPtr)));\n                while (ptr < max) {\n                    c = (int) inputBuffer[ptr++] & 0xFF;\n                    if (codes[c] != 0) {\n                        _inputPtr = ptr;\n                        break ascii_loop;\n                    }\n                    outBuf[outPtr++] = (char) c;\n                }\n                _inputPtr = ptr;\n            }",
      "info" : "LabeledStatement[85189-86003]:LabeledStatement[85383-86197]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[85213-86003]:WhileStatement[85407-86197]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[85226-86003]:Block[85420-86197]"
    }, {
      "left" : "int ptr = _inputPtr;",
      "right" : "int ptr = _inputPtr;",
      "info" : "VariableDeclarationStatement[85244-85264]:VariableDeclarationStatement[85438-85458]"
    }, {
      "left" : "if (ptr >= _inputEnd)",
      "right" : "if (ptr >= _inputEnd)",
      "info" : "IfStatement[85281-85401]:IfStatement[85475-85595]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[85303-85401]:Block[85497-85595]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[85325-85346]:ExpressionStatement[85519-85540]"
    }, {
      "left" : "ptr = _inputPtr;",
      "right" : "ptr = _inputPtr;",
      "info" : "ExpressionStatement[85367-85383]:ExpressionStatement[85561-85577]"
    }, {
      "left" : "if (outPtr >= outBuf.length)",
      "right" : "if (outPtr >= outBuf.length)",
      "info" : "IfStatement[85418-85563]:IfStatement[85612-85757]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[85447-85563]:Block[85641-85757]"
    }, {
      "left" : "outBuf = _textBuffer.finishCurrentSegment();",
      "right" : "outBuf = _textBuffer.finishCurrentSegment();",
      "info" : "ExpressionStatement[85469-85513]:ExpressionStatement[85663-85707]"
    }, {
      "left" : "outPtr = 0;",
      "right" : "outPtr = 0;",
      "info" : "ExpressionStatement[85534-85545]:ExpressionStatement[85728-85739]"
    }, {
      "left" : "final int max = Math.min(_inputEnd, (ptr + (outBuf.length - outPtr)));",
      "right" : "final int max = Math.min(_inputEnd, (ptr + (outBuf.length - outPtr)));",
      "info" : "VariableDeclarationStatement[85580-85650]:VariableDeclarationStatement[85774-85844]"
    }, {
      "left" : "while (ptr < max)",
      "right" : "while (ptr < max)",
      "info" : "WhileStatement[85667-85956]:WhileStatement[85861-86150]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[85685-85956]:Block[85879-86150]"
    }, {
      "left" : "c = (int) inputBuffer[ptr++] & 0xFF;",
      "right" : "c = (int) inputBuffer[ptr++] & 0xFF;",
      "info" : "ExpressionStatement[85707-85743]:ExpressionStatement[85901-85937]"
    }, {
      "left" : "if (codes[c] != 0)",
      "right" : "if (codes[c] != 0)",
      "info" : "IfStatement[85764-85889]:IfStatement[85958-86083]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[85783-85889]:Block[85977-86083]"
    }, {
      "left" : "_inputPtr = ptr;",
      "right" : "_inputPtr = ptr;",
      "info" : "ExpressionStatement[85809-85825]:ExpressionStatement[86003-86019]"
    }, {
      "left" : "break ascii_loop;",
      "right" : "break ascii_loop;",
      "info" : "BreakStatement[85850-85867]:BreakStatement[86044-86061]"
    }, {
      "left" : "outBuf[outPtr++] = (char) c;",
      "right" : "outBuf[outPtr++] = (char) c;",
      "info" : "ExpressionStatement[85910-85938]:ExpressionStatement[86104-86132]"
    }, {
      "left" : "_inputPtr = ptr;",
      "right" : "_inputPtr = ptr;",
      "info" : "ExpressionStatement[85973-85989]:ExpressionStatement[86167-86183]"
    }, {
      "left" : "if (c == INT_QUOTE)",
      "right" : "if (c == INT_QUOTE)",
      "info" : "IfStatement[86069-86137]:IfStatement[86263-86331]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[86089-86137]:Block[86283-86331]"
    }, {
      "left" : "break main_loop;",
      "right" : "break main_loop;",
      "info" : "BreakStatement[86107-86123]:BreakStatement[86301-86317]"
    }, {
      "left" : "switch (codes[c]) {\n            case 1: // backslash\n                c = _decodeEscaped();\n                break;\n            case 2: // 2-byte UTF\n                c = _decodeUtf8_2(c);\n                break;\n            case 3: // 3-byte UTF\n                if ((_inputEnd - _inputPtr) >= 2) {\n                    c = _decodeUtf8_3fast(c);\n                } else {\n                    c = _decodeUtf8_3(c);\n                }\n                break;\n            case 4: // 4-byte UTF\n                c = _decodeUtf8_4(c);\n                // Let's add first part right away:\n                outBuf[outPtr++] = (char) (0xD800 | (c >> 10));\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                c = 0xDC00 | (c & 0x3FF);\n                // And let the other char output down below\n                break;\n            default:\n                if (c < INT_SPACE) {\n                    // As per [JACKSON-208], call can now return:\n                    _throwUnquotedSpace(c, \"string value\");\n                } else {\n                    // Is this good enough error message?\n                    _reportInvalidChar(c);\n                }\n            }",
      "right" : "switch (codes[c]) {\n            case 1: // backslash\n                c = _decodeEscaped();\n                break;\n            case 2: // 2-byte UTF\n                c = _decodeUtf8_2(c);\n                break;\n            case 3: // 3-byte UTF\n                if ((_inputEnd - _inputPtr) >= 2) {\n                    c = _decodeUtf8_3fast(c);\n                } else {\n                    c = _decodeUtf8_3(c);\n                }\n                break;\n            case 4: // 4-byte UTF\n                c = _decodeUtf8_4(c);\n                // Let's add first part right away:\n                outBuf[outPtr++] = (char) (0xD800 | (c >> 10));\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                c = 0xDC00 | (c & 0x3FF);\n                // And let the other char output down below\n                break;\n            default:\n                if (c < INT_SPACE) {\n                    // As per [JACKSON-208], call can now return:\n                    _throwUnquotedSpace(c, \"string value\");\n                } else {\n                    // Is this good enough error message?\n                    _reportInvalidChar(c);\n                }\n            }",
      "info" : "SwitchStatement[86151-87416]:SwitchStatement[86345-87610]"
    }, {
      "left" : "case 1:",
      "right" : "case 1:",
      "info" : "SwitchCase[86183-86190]:SwitchCase[86377-86384]"
    }, {
      "left" : "c = _decodeEscaped();",
      "right" : "c = _decodeEscaped();",
      "info" : "ExpressionStatement[86220-86241]:ExpressionStatement[86414-86435]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[86258-86264]:BreakStatement[86452-86458]"
    }, {
      "left" : "case 2:",
      "right" : "case 2:",
      "info" : "SwitchCase[86277-86284]:SwitchCase[86471-86478]"
    }, {
      "left" : "c = _decodeUtf8_2(c);",
      "right" : "c = _decodeUtf8_2(c);",
      "info" : "ExpressionStatement[86315-86336]:ExpressionStatement[86509-86530]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[86353-86359]:BreakStatement[86547-86553]"
    }, {
      "left" : "case 3:",
      "right" : "case 3:",
      "info" : "SwitchCase[86372-86379]:SwitchCase[86566-86573]"
    }, {
      "left" : "if ((_inputEnd - _inputPtr) >= 2)",
      "right" : "if ((_inputEnd - _inputPtr) >= 2)",
      "info" : "IfStatement[86410-86576]:IfStatement[86604-86770]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[86444-86509]:Block[86638-86703]"
    }, {
      "left" : "c = _decodeUtf8_3fast(c);",
      "right" : "c = _decodeUtf8_3fast(c);",
      "info" : "ExpressionStatement[86466-86491]:ExpressionStatement[86660-86685]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[86515-86576]:Block[86709-86770]"
    }, {
      "left" : "c = _decodeUtf8_3(c);",
      "right" : "c = _decodeUtf8_3(c);",
      "info" : "ExpressionStatement[86537-86558]:ExpressionStatement[86731-86752]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[86593-86599]:BreakStatement[86787-86793]"
    }, {
      "left" : "case 4:",
      "right" : "case 4:",
      "info" : "SwitchCase[86612-86619]:SwitchCase[86806-86813]"
    }, {
      "left" : "c = _decodeUtf8_4(c);",
      "right" : "c = _decodeUtf8_4(c);",
      "info" : "ExpressionStatement[86650-86671]:ExpressionStatement[86844-86865]"
    }, {
      "left" : "outBuf[outPtr++] = (char) (0xD800 | (c >> 10));",
      "right" : "outBuf[outPtr++] = (char) (0xD800 | (c >> 10));",
      "info" : "ExpressionStatement[86740-86787]:ExpressionStatement[86934-86981]"
    }, {
      "left" : "if (outPtr >= outBuf.length)",
      "right" : "if (outPtr >= outBuf.length)",
      "info" : "IfStatement[86804-86949]:IfStatement[86998-87143]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[86833-86949]:Block[87027-87143]"
    }, {
      "left" : "outBuf = _textBuffer.finishCurrentSegment();",
      "right" : "outBuf = _textBuffer.finishCurrentSegment();",
      "info" : "ExpressionStatement[86855-86899]:ExpressionStatement[87049-87093]"
    }, {
      "left" : "outPtr = 0;",
      "right" : "outPtr = 0;",
      "info" : "ExpressionStatement[86920-86931]:ExpressionStatement[87114-87125]"
    }, {
      "left" : "c = 0xDC00 | (c & 0x3FF);",
      "right" : "c = 0xDC00 | (c & 0x3FF);",
      "info" : "ExpressionStatement[86966-86991]:ExpressionStatement[87160-87185]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[87068-87074]:BreakStatement[87262-87268]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[87087-87095]:SwitchCase[87281-87289]"
    }, {
      "left" : "if (c < INT_SPACE)",
      "right" : "if (c < INT_SPACE)",
      "info" : "IfStatement[87112-87402]:IfStatement[87306-87596]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[87131-87276]:Block[87325-87470]"
    }, {
      "left" : "_throwUnquotedSpace(c, \"string value\");",
      "right" : "_throwUnquotedSpace(c, \"string value\");",
      "info" : "ExpressionStatement[87219-87258]:ExpressionStatement[87413-87452]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[87282-87402]:Block[87476-87596]"
    }, {
      "left" : "_reportInvalidChar(c);",
      "right" : "_reportInvalidChar(c);",
      "info" : "ExpressionStatement[87362-87384]:ExpressionStatement[87556-87578]"
    }, {
      "left" : "if (outPtr >= outBuf.length)",
      "right" : "if (outPtr >= outBuf.length)",
      "info" : "IfStatement[87460-87593]:IfStatement[87654-87787]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[87489-87593]:Block[87683-87787]"
    }, {
      "left" : "outBuf = _textBuffer.finishCurrentSegment();",
      "right" : "outBuf = _textBuffer.finishCurrentSegment();",
      "info" : "ExpressionStatement[87507-87551]:ExpressionStatement[87701-87745]"
    }, {
      "left" : "outPtr = 0;",
      "right" : "outPtr = 0;",
      "info" : "ExpressionStatement[87568-87579]:ExpressionStatement[87762-87773]"
    }, {
      "left" : "outBuf[outPtr++] = (char) c;",
      "right" : "outBuf[outPtr++] = (char) c;",
      "info" : "ExpressionStatement[87651-87679]:ExpressionStatement[87845-87873]"
    }, {
      "left" : "_textBuffer.setCurrentLength(outPtr);",
      "right" : "_textBuffer.setCurrentLength(outPtr);",
      "info" : "ExpressionStatement[87698-87735]:ExpressionStatement[87892-87929]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[87996-89718]:Block[88190-89912]"
    }, {
      "left" : "_tokenIncomplete = false;",
      "right" : "_tokenIncomplete = false;",
      "info" : "ExpressionStatement[88006-88031]:ExpressionStatement[88200-88225]"
    }, {
      "left" : "final int[] codes = _icUTF8;",
      "right" : "final int[] codes = _icUTF8;",
      "info" : "VariableDeclarationStatement[88087-88115]:VariableDeclarationStatement[88281-88309]"
    }, {
      "left" : "final byte[] inputBuffer = _inputBuffer;",
      "right" : "final byte[] inputBuffer = _inputBuffer;",
      "info" : "VariableDeclarationStatement[88124-88164]:VariableDeclarationStatement[88318-88358]"
    }, {
      "left" : "main_loop:\n        while (true) {\n            int c;\n\n            ascii_loop:\n            while (true) {\n                int ptr = _inputPtr;\n                int max = _inputEnd;\n                if (ptr >= max) {\n                    loadMoreGuaranteed();\n                    ptr = _inputPtr;\n                    max = _inputEnd;\n                }\n                while (ptr < max) {\n                    c = (int) inputBuffer[ptr++] & 0xFF;\n                    if (codes[c] != 0) {\n                        _inputPtr = ptr;\n                        break ascii_loop;\n                    }\n                }\n                _inputPtr = ptr;\n            }\n            // Ok: end marker, escape or multi-byte?\n            if (c == INT_QUOTE) {\n                break main_loop;\n            }\n            \n            switch (codes[c]) {\n            case 1: // backslash\n                _decodeEscaped();\n                break;\n            case 2: // 2-byte UTF\n                _skipUtf8_2(c);\n                break;\n            case 3: // 3-byte UTF\n                _skipUtf8_3(c);\n                break;\n            case 4: // 4-byte UTF\n                _skipUtf8_4(c);\n                break;\n            default:\n                if (c < INT_SPACE) {\n                    // As per [JACKSON-208], call can now return:\n                    _throwUnquotedSpace(c, \"string value\");\n                } else {\n                    // Is this good enough error message?\n                    _reportInvalidChar(c);\n                }\n            }\n        }",
      "right" : "main_loop:\n        while (true) {\n            int c;\n\n            ascii_loop:\n            while (true) {\n                int ptr = _inputPtr;\n                int max = _inputEnd;\n                if (ptr >= max) {\n                    loadMoreGuaranteed();\n                    ptr = _inputPtr;\n                    max = _inputEnd;\n                }\n                while (ptr < max) {\n                    c = (int) inputBuffer[ptr++] & 0xFF;\n                    if (codes[c] != 0) {\n                        _inputPtr = ptr;\n                        break ascii_loop;\n                    }\n                }\n                _inputPtr = ptr;\n            }\n            // Ok: end marker, escape or multi-byte?\n            if (c == INT_QUOTE) {\n                break main_loop;\n            }\n            \n            switch (codes[c]) {\n            case 1: // backslash\n                _decodeEscaped();\n                break;\n            case 2: // 2-byte UTF\n                _skipUtf8_2(c);\n                break;\n            case 3: // 3-byte UTF\n                _skipUtf8_3(c);\n                break;\n            case 4: // 4-byte UTF\n                _skipUtf8_4(c);\n                break;\n            default:\n                if (c < INT_SPACE) {\n                    // As per [JACKSON-208], call can now return:\n                    _throwUnquotedSpace(c, \"string value\");\n                } else {\n                    // Is this good enough error message?\n                    _reportInvalidChar(c);\n                }\n            }\n        }",
      "info" : "LabeledStatement[88174-89712]:LabeledStatement[88368-89906]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[88193-89712]:WhileStatement[88387-89906]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[88206-89712]:Block[88400-89906]"
    }, {
      "left" : "int c;",
      "right" : "int c;",
      "info" : "VariableDeclarationStatement[88220-88226]:VariableDeclarationStatement[88414-88420]"
    }, {
      "left" : "ascii_loop:\n            while (true) {\n                int ptr = _inputPtr;\n                int max = _inputEnd;\n                if (ptr >= max) {\n                    loadMoreGuaranteed();\n                    ptr = _inputPtr;\n                    max = _inputEnd;\n                }\n                while (ptr < max) {\n                    c = (int) inputBuffer[ptr++] & 0xFF;\n                    if (codes[c] != 0) {\n                        _inputPtr = ptr;\n                        break ascii_loop;\n                    }\n                }\n                _inputPtr = ptr;\n            }",
      "right" : "ascii_loop:\n            while (true) {\n                int ptr = _inputPtr;\n                int max = _inputEnd;\n                if (ptr >= max) {\n                    loadMoreGuaranteed();\n                    ptr = _inputPtr;\n                    max = _inputEnd;\n                }\n                while (ptr < max) {\n                    c = (int) inputBuffer[ptr++] & 0xFF;\n                    if (codes[c] != 0) {\n                        _inputPtr = ptr;\n                        break ascii_loop;\n                    }\n                }\n                _inputPtr = ptr;\n            }",
      "info" : "LabeledStatement[88240-88824]:LabeledStatement[88434-89018]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[88264-88824]:WhileStatement[88458-89018]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[88277-88824]:Block[88471-89018]"
    }, {
      "left" : "int ptr = _inputPtr;",
      "right" : "int ptr = _inputPtr;",
      "info" : "VariableDeclarationStatement[88295-88315]:VariableDeclarationStatement[88489-88509]"
    }, {
      "left" : "int max = _inputEnd;",
      "right" : "int max = _inputEnd;",
      "info" : "VariableDeclarationStatement[88332-88352]:VariableDeclarationStatement[88526-88546]"
    }, {
      "left" : "if (ptr >= max)",
      "right" : "if (ptr >= max)",
      "info" : "IfStatement[88369-88520]:IfStatement[88563-88714]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[88385-88520]:Block[88579-88714]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[88407-88428]:ExpressionStatement[88601-88622]"
    }, {
      "left" : "ptr = _inputPtr;",
      "right" : "ptr = _inputPtr;",
      "info" : "ExpressionStatement[88449-88465]:ExpressionStatement[88643-88659]"
    }, {
      "left" : "max = _inputEnd;",
      "right" : "max = _inputEnd;",
      "info" : "ExpressionStatement[88486-88502]:ExpressionStatement[88680-88696]"
    }, {
      "left" : "while (ptr < max)",
      "right" : "while (ptr < max)",
      "info" : "WhileStatement[88537-88777]:WhileStatement[88731-88971]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[88555-88777]:Block[88749-88971]"
    }, {
      "left" : "c = (int) inputBuffer[ptr++] & 0xFF;",
      "right" : "c = (int) inputBuffer[ptr++] & 0xFF;",
      "info" : "ExpressionStatement[88577-88613]:ExpressionStatement[88771-88807]"
    }, {
      "left" : "if (codes[c] != 0)",
      "right" : "if (codes[c] != 0)",
      "info" : "IfStatement[88634-88759]:IfStatement[88828-88953]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[88653-88759]:Block[88847-88953]"
    }, {
      "left" : "_inputPtr = ptr;",
      "right" : "_inputPtr = ptr;",
      "info" : "ExpressionStatement[88679-88695]:ExpressionStatement[88873-88889]"
    }, {
      "left" : "break ascii_loop;",
      "right" : "break ascii_loop;",
      "info" : "BreakStatement[88720-88737]:BreakStatement[88914-88931]"
    }, {
      "left" : "_inputPtr = ptr;",
      "right" : "_inputPtr = ptr;",
      "info" : "ExpressionStatement[88794-88810]:ExpressionStatement[88988-89004]"
    }, {
      "left" : "if (c == INT_QUOTE)",
      "right" : "if (c == INT_QUOTE)",
      "info" : "IfStatement[88890-88958]:IfStatement[89084-89152]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[88910-88958]:Block[89104-89152]"
    }, {
      "left" : "break main_loop;",
      "right" : "break main_loop;",
      "info" : "BreakStatement[88928-88944]:BreakStatement[89122-89138]"
    }, {
      "left" : "switch (codes[c]) {\n            case 1: // backslash\n                _decodeEscaped();\n                break;\n            case 2: // 2-byte UTF\n                _skipUtf8_2(c);\n                break;\n            case 3: // 3-byte UTF\n                _skipUtf8_3(c);\n                break;\n            case 4: // 4-byte UTF\n                _skipUtf8_4(c);\n                break;\n            default:\n                if (c < INT_SPACE) {\n                    // As per [JACKSON-208], call can now return:\n                    _throwUnquotedSpace(c, \"string value\");\n                } else {\n                    // Is this good enough error message?\n                    _reportInvalidChar(c);\n                }\n            }",
      "right" : "switch (codes[c]) {\n            case 1: // backslash\n                _decodeEscaped();\n                break;\n            case 2: // 2-byte UTF\n                _skipUtf8_2(c);\n                break;\n            case 3: // 3-byte UTF\n                _skipUtf8_3(c);\n                break;\n            case 4: // 4-byte UTF\n                _skipUtf8_4(c);\n                break;\n            default:\n                if (c < INT_SPACE) {\n                    // As per [JACKSON-208], call can now return:\n                    _throwUnquotedSpace(c, \"string value\");\n                } else {\n                    // Is this good enough error message?\n                    _reportInvalidChar(c);\n                }\n            }",
      "info" : "SwitchStatement[88984-89702]:SwitchStatement[89178-89896]"
    }, {
      "left" : "case 1:",
      "right" : "case 1:",
      "info" : "SwitchCase[89016-89023]:SwitchCase[89210-89217]"
    }, {
      "left" : "_decodeEscaped();",
      "right" : "_decodeEscaped();",
      "info" : "ExpressionStatement[89053-89070]:ExpressionStatement[89247-89264]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[89087-89093]:BreakStatement[89281-89287]"
    }, {
      "left" : "case 2:",
      "right" : "case 2:",
      "info" : "SwitchCase[89106-89113]:SwitchCase[89300-89307]"
    }, {
      "left" : "_skipUtf8_2(c);",
      "right" : "_skipUtf8_2(c);",
      "info" : "ExpressionStatement[89144-89159]:ExpressionStatement[89338-89353]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[89176-89182]:BreakStatement[89370-89376]"
    }, {
      "left" : "case 3:",
      "right" : "case 3:",
      "info" : "SwitchCase[89195-89202]:SwitchCase[89389-89396]"
    }, {
      "left" : "_skipUtf8_3(c);",
      "right" : "_skipUtf8_3(c);",
      "info" : "ExpressionStatement[89233-89248]:ExpressionStatement[89427-89442]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[89265-89271]:BreakStatement[89459-89465]"
    }, {
      "left" : "case 4:",
      "right" : "case 4:",
      "info" : "SwitchCase[89284-89291]:SwitchCase[89478-89485]"
    }, {
      "left" : "_skipUtf8_4(c);",
      "right" : "_skipUtf8_4(c);",
      "info" : "ExpressionStatement[89322-89337]:ExpressionStatement[89516-89531]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[89354-89360]:BreakStatement[89548-89554]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[89373-89381]:SwitchCase[89567-89575]"
    }, {
      "left" : "if (c < INT_SPACE)",
      "right" : "if (c < INT_SPACE)",
      "info" : "IfStatement[89398-89688]:IfStatement[89592-89882]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[89417-89562]:Block[89611-89756]"
    }, {
      "left" : "_throwUnquotedSpace(c, \"string value\");",
      "right" : "_throwUnquotedSpace(c, \"string value\");",
      "info" : "ExpressionStatement[89505-89544]:ExpressionStatement[89699-89738]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[89568-89688]:Block[89762-89882]"
    }, {
      "left" : "_reportInvalidChar(c);",
      "right" : "_reportInvalidChar(c);",
      "info" : "ExpressionStatement[89648-89670]:ExpressionStatement[89842-89864]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[89960-91770]:Block[90154-91964]"
    }, {
      "left" : "switch (c) {\n        case ']':\n        case '}':\n            // Error: neither is valid at this point; valid closers have\n            // been handled earlier\n            _reportUnexpectedChar(c, \"expected a value\");\n        case '\\'':\n            if (isEnabled(Feature.ALLOW_SINGLE_QUOTES)) {\n                return _handleApos();\n            }\n            break;\n        case 'N':\n            _matchToken(\"NaN\", 1);\n            if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS)) {\n                return resetAsNaN(\"NaN\", Double.NaN);\n            }\n            _reportError(\"Non-standard token 'NaN': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");\n            break;\n        case 'I':\n            _matchToken(\"Infinity\", 1);\n            if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS)) {\n                return resetAsNaN(\"Infinity\", Double.POSITIVE_INFINITY);\n            }\n            _reportError(\"Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");\n            break;\n        case '+': // note: '-' is taken as number\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOFInValue();\n                }\n            }\n            return _handleInvalidNumberStart(_inputBuffer[_inputPtr++] & 0xFF, false);\n        }",
      "right" : "switch (c) {\n        case ']':\n        case '}':\n            // Error: neither is valid at this point; valid closers have\n            // been handled earlier\n            _reportUnexpectedChar(c, \"expected a value\");\n        case '\\'':\n            if (isEnabled(Feature.ALLOW_SINGLE_QUOTES)) {\n                return _handleApos();\n            }\n            break;\n        case 'N':\n            _matchToken(\"NaN\", 1);\n            if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS)) {\n                return resetAsNaN(\"NaN\", Double.NaN);\n            }\n            _reportError(\"Non-standard token 'NaN': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");\n            break;\n        case 'I':\n            _matchToken(\"Infinity\", 1);\n            if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS)) {\n                return resetAsNaN(\"Infinity\", Double.POSITIVE_INFINITY);\n            }\n            _reportError(\"Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");\n            break;\n        case '+': // note: '-' is taken as number\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOFInValue();\n                }\n            }\n            return _handleInvalidNumberStart(_inputBuffer[_inputPtr++] & 0xFF, false);\n        }",
      "info" : "SwitchStatement[90047-91383]:SwitchStatement[90241-91577]"
    }, {
      "left" : "case ']':",
      "right" : "case ']':",
      "info" : "SwitchCase[90068-90077]:SwitchCase[90262-90271]"
    }, {
      "left" : "case '}':",
      "right" : "case '}':",
      "info" : "SwitchCase[90086-90095]:SwitchCase[90280-90289]"
    }, {
      "left" : "_reportUnexpectedChar(c, \"expected a value\");",
      "right" : "_reportUnexpectedChar(c, \"expected a value\");",
      "info" : "ExpressionStatement[90217-90262]:ExpressionStatement[90411-90456]"
    }, {
      "left" : "case '\\'':",
      "right" : "case '\\'':",
      "info" : "SwitchCase[90271-90281]:SwitchCase[90465-90475]"
    }, {
      "left" : "if (isEnabled(Feature.ALLOW_SINGLE_QUOTES))",
      "right" : "if (isEnabled(Feature.ALLOW_SINGLE_QUOTES))",
      "info" : "IfStatement[90294-90391]:IfStatement[90488-90585]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[90338-90391]:Block[90532-90585]"
    }, {
      "left" : "return _handleApos();",
      "right" : "return _handleApos();",
      "info" : "ReturnStatement[90356-90377]:ReturnStatement[90550-90571]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[90404-90410]:BreakStatement[90598-90604]"
    }, {
      "left" : "case 'N':",
      "right" : "case 'N':",
      "info" : "SwitchCase[90419-90428]:SwitchCase[90613-90622]"
    }, {
      "left" : "_matchToken(\"NaN\", 1);",
      "right" : "_matchToken(\"NaN\", 1);",
      "info" : "ExpressionStatement[90441-90463]:ExpressionStatement[90635-90657]"
    }, {
      "left" : "if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS))",
      "right" : "if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS))",
      "info" : "IfStatement[90476-90595]:IfStatement[90670-90789]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[90526-90595]:Block[90720-90789]"
    }, {
      "left" : "return resetAsNaN(\"NaN\", Double.NaN);",
      "right" : "return resetAsNaN(\"NaN\", Double.NaN);",
      "info" : "ReturnStatement[90544-90581]:ReturnStatement[90738-90775]"
    }, {
      "left" : "_reportError(\"Non-standard token 'NaN': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");",
      "right" : "_reportError(\"Non-standard token 'NaN': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");",
      "info" : "ExpressionStatement[90608-90711]:ExpressionStatement[90802-90905]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[90724-90730]:BreakStatement[90918-90924]"
    }, {
      "left" : "case 'I':",
      "right" : "case 'I':",
      "info" : "SwitchCase[90739-90748]:SwitchCase[90933-90942]"
    }, {
      "left" : "_matchToken(\"Infinity\", 1);",
      "right" : "_matchToken(\"Infinity\", 1);",
      "info" : "ExpressionStatement[90761-90788]:ExpressionStatement[90955-90982]"
    }, {
      "left" : "if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS))",
      "right" : "if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS))",
      "info" : "IfStatement[90801-90939]:IfStatement[90995-91133]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[90851-90939]:Block[91045-91133]"
    }, {
      "left" : "return resetAsNaN(\"Infinity\", Double.POSITIVE_INFINITY);",
      "right" : "return resetAsNaN(\"Infinity\", Double.POSITIVE_INFINITY);",
      "info" : "ReturnStatement[90869-90925]:ReturnStatement[91063-91119]"
    }, {
      "left" : "_reportError(\"Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");",
      "right" : "_reportError(\"Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");",
      "info" : "ExpressionStatement[90952-91060]:ExpressionStatement[91146-91254]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[91073-91079]:BreakStatement[91267-91273]"
    }, {
      "left" : "case '+':",
      "right" : "case '+':",
      "info" : "SwitchCase[91088-91097]:SwitchCase[91282-91291]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[91142-91286]:IfStatement[91336-91480]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[91170-91286]:Block[91364-91480]"
    }, {
      "left" : "if (!loadMore())",
      "right" : "if (!loadMore())",
      "info" : "IfStatement[91188-91272]:IfStatement[91382-91466]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[91205-91272]:Block[91399-91466]"
    }, {
      "left" : "_reportInvalidEOFInValue();",
      "right" : "_reportInvalidEOFInValue();",
      "info" : "ExpressionStatement[91227-91254]:ExpressionStatement[91421-91448]"
    }, {
      "left" : "return _handleInvalidNumberStart(_inputBuffer[_inputPtr++] & 0xFF, false);",
      "right" : "return _handleInvalidNumberStart(_inputBuffer[_inputPtr++] & 0xFF, false);",
      "info" : "ReturnStatement[91299-91373]:ReturnStatement[91493-91567]"
    }, {
      "left" : "if (Character.isJavaIdentifierStart(c))",
      "right" : "if (Character.isJavaIdentifierStart(c))",
      "info" : "IfStatement[91446-91576]:IfStatement[91640-91770]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[91486-91576]:Block[91680-91770]"
    }, {
      "left" : "_reportInvalidToken(\"\"+((char) c), \"('true', 'false' or 'null')\");",
      "right" : "_reportInvalidToken(\"\"+((char) c), \"('true', 'false' or 'null')\");",
      "info" : "ExpressionStatement[91500-91566]:ExpressionStatement[91694-91760]"
    }, {
      "left" : "_reportUnexpectedChar(c, \"expected a valid value (number, String, array, object, 'true', 'false' or 'null')\");",
      "right" : "_reportUnexpectedChar(c, \"expected a valid value (number, String, array, object, 'true', 'false' or 'null')\");",
      "info" : "ExpressionStatement[91633-91743]:ExpressionStatement[91827-91937]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[91752-91764]:ReturnStatement[91946-91958]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[91841-94877]:Block[92035-95071]"
    }, {
      "left" : "int c = 0;",
      "right" : "int c = 0;",
      "info" : "VariableDeclarationStatement[91851-91861]:VariableDeclarationStatement[92045-92055]"
    }, {
      "left" : "int outPtr = 0;",
      "right" : "int outPtr = 0;",
      "info" : "VariableDeclarationStatement[91931-91946]:VariableDeclarationStatement[92125-92140]"
    }, {
      "left" : "char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();",
      "right" : "char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();",
      "info" : "VariableDeclarationStatement[91955-92011]:VariableDeclarationStatement[92149-92205]"
    }, {
      "left" : "final int[] codes = _icUTF8;",
      "right" : "final int[] codes = _icUTF8;",
      "info" : "VariableDeclarationStatement[92076-92104]:VariableDeclarationStatement[92270-92298]"
    }, {
      "left" : "final byte[] inputBuffer = _inputBuffer;",
      "right" : "final byte[] inputBuffer = _inputBuffer;",
      "info" : "VariableDeclarationStatement[92113-92153]:VariableDeclarationStatement[92307-92347]"
    }, {
      "left" : "main_loop:\n        while (true) {\n            // Then the tight ascii non-funny-char loop:\n            ascii_loop:\n            while (true) {\n                if (_inputPtr >= _inputEnd) {\n                    loadMoreGuaranteed();\n                }\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                int max = _inputEnd;\n                {\n                    int max2 = _inputPtr + (outBuf.length - outPtr);\n                    if (max2 < max) {\n                        max = max2;\n                    }\n                }\n                while (_inputPtr < max) {\n                    c = (int) inputBuffer[_inputPtr++] & 0xFF;\n                    if (c == '\\'' || codes[c] != 0) {\n                        break ascii_loop;\n                    }\n                    outBuf[outPtr++] = (char) c;\n                }\n            }\n\n            // Ok: end marker, escape or multi-byte?\n            if (c == '\\'') {\n                break main_loop;\n            }\n\n            switch (codes[c]) {\n            case 1: // backslash\n                if (c != '\\'') { // marked as special, isn't here\n                    c = _decodeEscaped();\n                }\n                break;\n            case 2: // 2-byte UTF\n                c = _decodeUtf8_2(c);\n                break;\n            case 3: // 3-byte UTF\n                if ((_inputEnd - _inputPtr) >= 2) {\n                    c = _decodeUtf8_3fast(c);\n                } else {\n                    c = _decodeUtf8_3(c);\n                }\n                break;\n            case 4: // 4-byte UTF\n                c = _decodeUtf8_4(c);\n                // Let's add first part right away:\n                outBuf[outPtr++] = (char) (0xD800 | (c >> 10));\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                c = 0xDC00 | (c & 0x3FF);\n                // And let the other char output down below\n                break;\n            default:\n                if (c < INT_SPACE) {\n                    _throwUnquotedSpace(c, \"string value\");\n                }\n                // Is this good enough error message?\n                _reportInvalidChar(c);\n            }\n            // Need more room?\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            // Ok, let's add char to output:\n            outBuf[outPtr++] = (char) c;\n        }",
      "right" : "main_loop:\n        while (true) {\n            // Then the tight ascii non-funny-char loop:\n            ascii_loop:\n            while (true) {\n                if (_inputPtr >= _inputEnd) {\n                    loadMoreGuaranteed();\n                }\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                int max = _inputEnd;\n                {\n                    int max2 = _inputPtr + (outBuf.length - outPtr);\n                    if (max2 < max) {\n                        max = max2;\n                    }\n                }\n                while (_inputPtr < max) {\n                    c = (int) inputBuffer[_inputPtr++] & 0xFF;\n                    if (c == '\\'' || codes[c] != 0) {\n                        break ascii_loop;\n                    }\n                    outBuf[outPtr++] = (char) c;\n                }\n            }\n\n            // Ok: end marker, escape or multi-byte?\n            if (c == '\\'') {\n                break main_loop;\n            }\n\n            switch (codes[c]) {\n            case 1: // backslash\n                if (c != '\\'') { // marked as special, isn't here\n                    c = _decodeEscaped();\n                }\n                break;\n            case 2: // 2-byte UTF\n                c = _decodeUtf8_2(c);\n                break;\n            case 3: // 3-byte UTF\n                if ((_inputEnd - _inputPtr) >= 2) {\n                    c = _decodeUtf8_3fast(c);\n                } else {\n                    c = _decodeUtf8_3(c);\n                }\n                break;\n            case 4: // 4-byte UTF\n                c = _decodeUtf8_4(c);\n                // Let's add first part right away:\n                outBuf[outPtr++] = (char) (0xD800 | (c >> 10));\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                c = 0xDC00 | (c & 0x3FF);\n                // And let the other char output down below\n                break;\n            default:\n                if (c < INT_SPACE) {\n                    _throwUnquotedSpace(c, \"string value\");\n                }\n                // Is this good enough error message?\n                _reportInvalidChar(c);\n            }\n            // Need more room?\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            // Ok, let's add char to output:\n            outBuf[outPtr++] = (char) c;\n        }",
      "info" : "LabeledStatement[92163-94785]:LabeledStatement[92357-94979]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[92182-94785]:WhileStatement[92376-94979]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[92195-94785]:Block[92389-94979]"
    }, {
      "left" : "ascii_loop:\n            while (true) {\n                if (_inputPtr >= _inputEnd) {\n                    loadMoreGuaranteed();\n                }\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                int max = _inputEnd;\n                {\n                    int max2 = _inputPtr + (outBuf.length - outPtr);\n                    if (max2 < max) {\n                        max = max2;\n                    }\n                }\n                while (_inputPtr < max) {\n                    c = (int) inputBuffer[_inputPtr++] & 0xFF;\n                    if (c == '\\'' || codes[c] != 0) {\n                        break ascii_loop;\n                    }\n                    outBuf[outPtr++] = (char) c;\n                }\n            }",
      "right" : "ascii_loop:\n            while (true) {\n                if (_inputPtr >= _inputEnd) {\n                    loadMoreGuaranteed();\n                }\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                int max = _inputEnd;\n                {\n                    int max2 = _inputPtr + (outBuf.length - outPtr);\n                    if (max2 < max) {\n                        max = max2;\n                    }\n                }\n                while (_inputPtr < max) {\n                    c = (int) inputBuffer[_inputPtr++] & 0xFF;\n                    if (c == '\\'' || codes[c] != 0) {\n                        break ascii_loop;\n                    }\n                    outBuf[outPtr++] = (char) c;\n                }\n            }",
      "info" : "LabeledStatement[92266-93114]:LabeledStatement[92460-93308]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[92290-93114]:WhileStatement[92484-93308]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[92303-93114]:Block[92497-93308]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[92321-92410]:IfStatement[92515-92604]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[92349-92410]:Block[92543-92604]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[92371-92392]:ExpressionStatement[92565-92586]"
    }, {
      "left" : "if (outPtr >= outBuf.length)",
      "right" : "if (outPtr >= outBuf.length)",
      "info" : "IfStatement[92427-92572]:IfStatement[92621-92766]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[92456-92572]:Block[92650-92766]"
    }, {
      "left" : "outBuf = _textBuffer.finishCurrentSegment();",
      "right" : "outBuf = _textBuffer.finishCurrentSegment();",
      "info" : "ExpressionStatement[92478-92522]:ExpressionStatement[92672-92716]"
    }, {
      "left" : "outPtr = 0;",
      "right" : "outPtr = 0;",
      "info" : "ExpressionStatement[92543-92554]:ExpressionStatement[92737-92748]"
    }, {
      "left" : "int max = _inputEnd;",
      "right" : "int max = _inputEnd;",
      "info" : "VariableDeclarationStatement[92589-92609]:VariableDeclarationStatement[92783-92803]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[92626-92810]:Block[92820-93004]"
    }, {
      "left" : "int max2 = _inputPtr + (outBuf.length - outPtr);",
      "right" : "int max2 = _inputPtr + (outBuf.length - outPtr);",
      "info" : "VariableDeclarationStatement[92648-92696]:VariableDeclarationStatement[92842-92890]"
    }, {
      "left" : "if (max2 < max)",
      "right" : "if (max2 < max)",
      "info" : "IfStatement[92717-92792]:IfStatement[92911-92986]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[92733-92792]:Block[92927-92986]"
    }, {
      "left" : "max = max2;",
      "right" : "max = max2;",
      "info" : "ExpressionStatement[92759-92770]:ExpressionStatement[92953-92964]"
    }, {
      "left" : "while (_inputPtr < max)",
      "right" : "while (_inputPtr < max)",
      "info" : "WhileStatement[92827-93100]:WhileStatement[93021-93294]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[92851-93100]:Block[93045-93294]"
    }, {
      "left" : "c = (int) inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "c = (int) inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[92873-92915]:ExpressionStatement[93067-93109]"
    }, {
      "left" : "if (c == '\\'' || codes[c] != 0)",
      "right" : "if (c == '\\'' || codes[c] != 0)",
      "info" : "IfStatement[92936-93033]:IfStatement[93130-93227]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[92968-93033]:Block[93162-93227]"
    }, {
      "left" : "break ascii_loop;",
      "right" : "break ascii_loop;",
      "info" : "BreakStatement[92994-93011]:BreakStatement[93188-93205]"
    }, {
      "left" : "outBuf[outPtr++] = (char) c;",
      "right" : "outBuf[outPtr++] = (char) c;",
      "info" : "ExpressionStatement[93054-93082]:ExpressionStatement[93248-93276]"
    }, {
      "left" : "if (c == '\\'')",
      "right" : "if (c == '\\'')",
      "info" : "IfStatement[93181-93244]:IfStatement[93375-93438]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[93196-93244]:Block[93390-93438]"
    }, {
      "left" : "break main_loop;",
      "right" : "break main_loop;",
      "info" : "BreakStatement[93214-93230]:BreakStatement[93408-93424]"
    }, {
      "left" : "switch (codes[c]) {\n            case 1: // backslash\n                if (c != '\\'') { // marked as special, isn't here\n                    c = _decodeEscaped();\n                }\n                break;\n            case 2: // 2-byte UTF\n                c = _decodeUtf8_2(c);\n                break;\n            case 3: // 3-byte UTF\n                if ((_inputEnd - _inputPtr) >= 2) {\n                    c = _decodeUtf8_3fast(c);\n                } else {\n                    c = _decodeUtf8_3(c);\n                }\n                break;\n            case 4: // 4-byte UTF\n                c = _decodeUtf8_4(c);\n                // Let's add first part right away:\n                outBuf[outPtr++] = (char) (0xD800 | (c >> 10));\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                c = 0xDC00 | (c & 0x3FF);\n                // And let the other char output down below\n                break;\n            default:\n                if (c < INT_SPACE) {\n                    _throwUnquotedSpace(c, \"string value\");\n                }\n                // Is this good enough error message?\n                _reportInvalidChar(c);\n            }",
      "right" : "switch (codes[c]) {\n            case 1: // backslash\n                if (c != '\\'') { // marked as special, isn't here\n                    c = _decodeEscaped();\n                }\n                break;\n            case 2: // 2-byte UTF\n                c = _decodeUtf8_2(c);\n                break;\n            case 3: // 3-byte UTF\n                if ((_inputEnd - _inputPtr) >= 2) {\n                    c = _decodeUtf8_3fast(c);\n                } else {\n                    c = _decodeUtf8_3(c);\n                }\n                break;\n            case 4: // 4-byte UTF\n                c = _decodeUtf8_4(c);\n                // Let's add first part right away:\n                outBuf[outPtr++] = (char) (0xD800 | (c >> 10));\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                c = 0xDC00 | (c & 0x3FF);\n                // And let the other char output down below\n                break;\n            default:\n                if (c < INT_SPACE) {\n                    _throwUnquotedSpace(c, \"string value\");\n                }\n                // Is this good enough error message?\n                _reportInvalidChar(c);\n            }",
      "info" : "SwitchStatement[93258-94512]:SwitchStatement[93452-94706]"
    }, {
      "left" : "case 1:",
      "right" : "case 1:",
      "info" : "SwitchCase[93290-93297]:SwitchCase[93484-93491]"
    }, {
      "left" : "if (c != '\\'')",
      "right" : "if (c != '\\'')",
      "info" : "IfStatement[93327-93436]:IfStatement[93521-93630]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[93342-93436]:Block[93536-93630]"
    }, {
      "left" : "c = _decodeEscaped();",
      "right" : "c = _decodeEscaped();",
      "info" : "ExpressionStatement[93397-93418]:ExpressionStatement[93591-93612]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[93453-93459]:BreakStatement[93647-93653]"
    }, {
      "left" : "case 2:",
      "right" : "case 2:",
      "info" : "SwitchCase[93472-93479]:SwitchCase[93666-93673]"
    }, {
      "left" : "c = _decodeUtf8_2(c);",
      "right" : "c = _decodeUtf8_2(c);",
      "info" : "ExpressionStatement[93510-93531]:ExpressionStatement[93704-93725]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[93548-93554]:BreakStatement[93742-93748]"
    }, {
      "left" : "case 3:",
      "right" : "case 3:",
      "info" : "SwitchCase[93567-93574]:SwitchCase[93761-93768]"
    }, {
      "left" : "if ((_inputEnd - _inputPtr) >= 2)",
      "right" : "if ((_inputEnd - _inputPtr) >= 2)",
      "info" : "IfStatement[93605-93771]:IfStatement[93799-93965]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[93639-93704]:Block[93833-93898]"
    }, {
      "left" : "c = _decodeUtf8_3fast(c);",
      "right" : "c = _decodeUtf8_3fast(c);",
      "info" : "ExpressionStatement[93661-93686]:ExpressionStatement[93855-93880]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[93710-93771]:Block[93904-93965]"
    }, {
      "left" : "c = _decodeUtf8_3(c);",
      "right" : "c = _decodeUtf8_3(c);",
      "info" : "ExpressionStatement[93732-93753]:ExpressionStatement[93926-93947]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[93788-93794]:BreakStatement[93982-93988]"
    }, {
      "left" : "case 4:",
      "right" : "case 4:",
      "info" : "SwitchCase[93807-93814]:SwitchCase[94001-94008]"
    }, {
      "left" : "c = _decodeUtf8_4(c);",
      "right" : "c = _decodeUtf8_4(c);",
      "info" : "ExpressionStatement[93845-93866]:ExpressionStatement[94039-94060]"
    }, {
      "left" : "outBuf[outPtr++] = (char) (0xD800 | (c >> 10));",
      "right" : "outBuf[outPtr++] = (char) (0xD800 | (c >> 10));",
      "info" : "ExpressionStatement[93935-93982]:ExpressionStatement[94129-94176]"
    }, {
      "left" : "if (outPtr >= outBuf.length)",
      "right" : "if (outPtr >= outBuf.length)",
      "info" : "IfStatement[93999-94144]:IfStatement[94193-94338]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[94028-94144]:Block[94222-94338]"
    }, {
      "left" : "outBuf = _textBuffer.finishCurrentSegment();",
      "right" : "outBuf = _textBuffer.finishCurrentSegment();",
      "info" : "ExpressionStatement[94050-94094]:ExpressionStatement[94244-94288]"
    }, {
      "left" : "outPtr = 0;",
      "right" : "outPtr = 0;",
      "info" : "ExpressionStatement[94115-94126]:ExpressionStatement[94309-94320]"
    }, {
      "left" : "c = 0xDC00 | (c & 0x3FF);",
      "right" : "c = 0xDC00 | (c & 0x3FF);",
      "info" : "ExpressionStatement[94161-94186]:ExpressionStatement[94355-94380]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[94263-94269]:BreakStatement[94457-94463]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[94282-94290]:SwitchCase[94476-94484]"
    }, {
      "left" : "if (c < INT_SPACE)",
      "right" : "if (c < INT_SPACE)",
      "info" : "IfStatement[94307-94405]:IfStatement[94501-94599]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[94326-94405]:Block[94520-94599]"
    }, {
      "left" : "_throwUnquotedSpace(c, \"string value\");",
      "right" : "_throwUnquotedSpace(c, \"string value\");",
      "info" : "ExpressionStatement[94348-94387]:ExpressionStatement[94542-94581]"
    }, {
      "left" : "_reportInvalidChar(c);",
      "right" : "_reportInvalidChar(c);",
      "info" : "ExpressionStatement[94476-94498]:ExpressionStatement[94670-94692]"
    }, {
      "left" : "if (outPtr >= outBuf.length)",
      "right" : "if (outPtr >= outBuf.length)",
      "info" : "IfStatement[94556-94689]:IfStatement[94750-94883]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[94585-94689]:Block[94779-94883]"
    }, {
      "left" : "outBuf = _textBuffer.finishCurrentSegment();",
      "right" : "outBuf = _textBuffer.finishCurrentSegment();",
      "info" : "ExpressionStatement[94603-94647]:ExpressionStatement[94797-94841]"
    }, {
      "left" : "outPtr = 0;",
      "right" : "outPtr = 0;",
      "info" : "ExpressionStatement[94664-94675]:ExpressionStatement[94858-94869]"
    }, {
      "left" : "outBuf[outPtr++] = (char) c;",
      "right" : "outBuf[outPtr++] = (char) c;",
      "info" : "ExpressionStatement[94747-94775]:ExpressionStatement[94941-94969]"
    }, {
      "left" : "_textBuffer.setCurrentLength(outPtr);",
      "right" : "_textBuffer.setCurrentLength(outPtr);",
      "info" : "ExpressionStatement[94794-94831]:ExpressionStatement[94988-95025]"
    }, {
      "left" : "return JsonToken.VALUE_STRING;",
      "right" : "return JsonToken.VALUE_STRING;",
      "info" : "ReturnStatement[94841-94871]:ReturnStatement[95035-95065]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[95105-96069]:Block[95299-96263]"
    }, {
      "left" : "while (ch == 'I')",
      "right" : "while (ch == 'I')",
      "info" : "WhileStatement[95115-95932]:WhileStatement[95309-96126]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[95133-95932]:Block[95327-96126]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[95147-95291]:IfStatement[95341-95485]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[95175-95291]:Block[95369-95485]"
    }, {
      "left" : "if (!loadMore())",
      "right" : "if (!loadMore())",
      "info" : "IfStatement[95193-95277]:IfStatement[95387-95471]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[95210-95277]:Block[95404-95471]"
    }, {
      "left" : "_reportInvalidEOFInValue();",
      "right" : "_reportInvalidEOFInValue();",
      "info" : "ExpressionStatement[95232-95259]:ExpressionStatement[95426-95453]"
    }, {
      "left" : "ch = _inputBuffer[_inputPtr++];",
      "right" : "ch = _inputBuffer[_inputPtr++];",
      "info" : "ExpressionStatement[95304-95335]:ExpressionStatement[95498-95529]"
    }, {
      "left" : "String match;",
      "right" : "String match;",
      "info" : "VariableDeclarationStatement[95348-95361]:VariableDeclarationStatement[95542-95555]"
    }, {
      "left" : "if (ch == 'N')",
      "right" : "if (ch == 'N')",
      "info" : "IfStatement[95374-95586]:IfStatement[95568-95780]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[95389-95450]:Block[95583-95644]"
    }, {
      "left" : "match = neg ? \"-INF\" :\"+INF\";",
      "right" : "match = neg ? \"-INF\" :\"+INF\";",
      "info" : "ExpressionStatement[95407-95436]:ExpressionStatement[95601-95630]"
    }, {
      "left" : "if (ch == 'n')",
      "right" : "if (ch == 'n')",
      "info" : "IfStatement[95456-95586]:IfStatement[95650-95780]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[95471-95542]:Block[95665-95736]"
    }, {
      "left" : "match = neg ? \"-Infinity\" :\"+Infinity\";",
      "right" : "match = neg ? \"-Infinity\" :\"+Infinity\";",
      "info" : "ExpressionStatement[95489-95528]:ExpressionStatement[95683-95722]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[95548-95586]:Block[95742-95780]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[95566-95572]:BreakStatement[95760-95766]"
    }, {
      "left" : "_matchToken(match, 3);",
      "right" : "_matchToken(match, 3);",
      "info" : "ExpressionStatement[95599-95621]:ExpressionStatement[95793-95815]"
    }, {
      "left" : "if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS))",
      "right" : "if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS))",
      "info" : "IfStatement[95634-95800]:IfStatement[95828-95994]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[95684-95800]:Block[95878-95994]"
    }, {
      "left" : "return resetAsNaN(match, neg ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY);",
      "right" : "return resetAsNaN(match, neg ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY);",
      "info" : "ReturnStatement[95702-95786]:ReturnStatement[95896-95980]"
    }, {
      "left" : "_reportError(\"Non-standard token '\"+match+\"': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");",
      "right" : "_reportError(\"Non-standard token '\"+match+\"': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");",
      "info" : "ExpressionStatement[95813-95922]:ExpressionStatement[96007-96116]"
    }, {
      "left" : "reportUnexpectedNumberChar(ch, \"expected digit (0-9) to follow minus sign, for valid numeric value\");",
      "right" : "reportUnexpectedNumberChar(ch, \"expected digit (0-9) to follow minus sign, for valid numeric value\");",
      "info" : "ExpressionStatement[95941-96042]:ExpressionStatement[96135-96236]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[96051-96063]:ReturnStatement[96245-96257]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[96155-96715]:Block[96349-96909]"
    }, {
      "left" : "final int len = matchStr.length();",
      "right" : "final int len = matchStr.length();",
      "info" : "VariableDeclarationStatement[96165-96199]:VariableDeclarationStatement[96359-96393]"
    }, {
      "left" : "if ((_inputPtr + len) >= _inputEnd)",
      "right" : "if ((_inputPtr + len) >= _inputEnd)",
      "info" : "IfStatement[96208-96314]:IfStatement[96402-96508]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[96244-96314]:Block[96438-96508]"
    }, {
      "left" : "_matchToken2(matchStr, i);",
      "right" : "_matchToken2(matchStr, i);",
      "info" : "ExpressionStatement[96258-96284]:ExpressionStatement[96452-96478]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[96297-96304]:ReturnStatement[96491-96498]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[96323-96523]:DoStatement[96517-96717]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[96326-96504]:Block[96520-96698]"
    }, {
      "left" : "if (_inputBuffer[_inputPtr] != matchStr.charAt(i))",
      "right" : "if (_inputBuffer[_inputPtr] != matchStr.charAt(i))",
      "info" : "IfStatement[96340-96469]:IfStatement[96534-96663]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[96391-96469]:Block[96585-96663]"
    }, {
      "left" : "_reportInvalidToken(matchStr.substring(0, i));",
      "right" : "_reportInvalidToken(matchStr.substring(0, i));",
      "info" : "ExpressionStatement[96409-96455]:ExpressionStatement[96603-96649]"
    }, {
      "left" : "++_inputPtr;",
      "right" : "++_inputPtr;",
      "info" : "ExpressionStatement[96482-96494]:ExpressionStatement[96676-96688]"
    }, {
      "left" : "int ch = _inputBuffer[_inputPtr] & 0xFF;",
      "right" : "int ch = _inputBuffer[_inputPtr] & 0xFF;",
      "info" : "VariableDeclarationStatement[96537-96577]:VariableDeclarationStatement[96731-96771]"
    }, {
      "left" : "if (ch >= '0' && ch != ']' && ch != '}')",
      "right" : "if (ch >= '0' && ch != ']' && ch != '}')",
      "info" : "IfStatement[96586-96709]:IfStatement[96780-96903]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[96627-96709]:Block[96821-96903]"
    }, {
      "left" : "_checkMatchEnd(matchStr, i, ch);",
      "right" : "_checkMatchEnd(matchStr, i, ch);",
      "info" : "ExpressionStatement[96667-96699]:ExpressionStatement[96861-96893]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[96800-97468]:Block[96994-97662]"
    }, {
      "left" : "final int len = matchStr.length();",
      "right" : "final int len = matchStr.length();",
      "info" : "VariableDeclarationStatement[96810-96844]:VariableDeclarationStatement[97004-97038]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[96853-97117]:DoStatement[97047-97311]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[96856-97098]:Block[97050-97292]"
    }, {
      "left" : "if (((_inputPtr >= _inputEnd) && !loadMore())\n                ||  (_inputBuffer[_inputPtr] != matchStr.charAt(i)))",
      "right" : "if (((_inputPtr >= _inputEnd) && !loadMore())\n                ||  (_inputBuffer[_inputPtr] != matchStr.charAt(i)))",
      "info" : "IfStatement[96870-97063]:IfStatement[97064-97257]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[96985-97063]:Block[97179-97257]"
    }, {
      "left" : "_reportInvalidToken(matchStr.substring(0, i));",
      "right" : "_reportInvalidToken(matchStr.substring(0, i));",
      "info" : "ExpressionStatement[97003-97049]:ExpressionStatement[97197-97243]"
    }, {
      "left" : "++_inputPtr;",
      "right" : "++_inputPtr;",
      "info" : "ExpressionStatement[97076-97088]:ExpressionStatement[97270-97282]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd && !loadMore())",
      "right" : "if (_inputPtr >= _inputEnd && !loadMore())",
      "info" : "IfStatement[97207-97281]:IfStatement[97401-97475]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[97250-97281]:Block[97444-97475]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[97264-97271]:ReturnStatement[97458-97465]"
    }, {
      "left" : "int ch = _inputBuffer[_inputPtr] & 0xFF;",
      "right" : "int ch = _inputBuffer[_inputPtr] & 0xFF;",
      "info" : "VariableDeclarationStatement[97290-97330]:VariableDeclarationStatement[97484-97524]"
    }, {
      "left" : "if (ch >= '0' && ch != ']' && ch != '}')",
      "right" : "if (ch >= '0' && ch != ']' && ch != '}')",
      "info" : "IfStatement[97339-97462]:IfStatement[97533-97656]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[97380-97462]:Block[97574-97656]"
    }, {
      "left" : "_checkMatchEnd(matchStr, i, ch);",
      "right" : "_checkMatchEnd(matchStr, i, ch);",
      "info" : "ExpressionStatement[97420-97452]:ExpressionStatement[97614-97646]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[97559-97788]:Block[97753-97982]"
    }, {
      "left" : "char c = (char) _decodeCharForError(ch);",
      "right" : "char c = (char) _decodeCharForError(ch);",
      "info" : "VariableDeclarationStatement[97624-97664]:VariableDeclarationStatement[97818-97858]"
    }, {
      "left" : "if (Character.isJavaIdentifierPart(c))",
      "right" : "if (Character.isJavaIdentifierPart(c))",
      "info" : "IfStatement[97673-97782]:IfStatement[97867-97976]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[97712-97782]:Block[97906-97976]"
    }, {
      "left" : "_reportInvalidToken(matchStr.substring(0, i));",
      "right" : "_reportInvalidToken(matchStr.substring(0, i));",
      "info" : "ExpressionStatement[97726-97772]:ExpressionStatement[97920-97966]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[98047-98752]:Block[98241-98946]"
    }, {
      "left" : "while (_inputPtr < _inputEnd)",
      "right" : "while (_inputPtr < _inputEnd)",
      "info" : "WhileStatement[98057-98719]:WhileStatement[98251-98913]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[98087-98719]:Block[98281-98913]"
    }, {
      "left" : "int i = _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "int i = _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "VariableDeclarationStatement[98101-98142]:VariableDeclarationStatement[98295-98336]"
    }, {
      "left" : "if (i > INT_SPACE)",
      "right" : "if (i > INT_SPACE)",
      "info" : "IfStatement[98155-98360]:IfStatement[98349-98554]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[98174-98360]:Block[98368-98554]"
    }, {
      "left" : "if (i == INT_SLASH || i == INT_HASH)",
      "right" : "if (i == INT_SLASH || i == INT_HASH)",
      "info" : "IfStatement[98192-98320]:IfStatement[98386-98514]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[98229-98320]:Block[98423-98514]"
    }, {
      "left" : "--_inputPtr;",
      "right" : "--_inputPtr;",
      "info" : "ExpressionStatement[98251-98263]:ExpressionStatement[98445-98457]"
    }, {
      "left" : "return _skipWS2();",
      "right" : "return _skipWS2();",
      "info" : "ReturnStatement[98284-98302]:ReturnStatement[98478-98496]"
    }, {
      "left" : "return i;",
      "right" : "return i;",
      "info" : "ReturnStatement[98337-98346]:ReturnStatement[98531-98540]"
    }, {
      "left" : "if (i != INT_SPACE)",
      "right" : "if (i != INT_SPACE)",
      "info" : "IfStatement[98373-98709]:IfStatement[98567-98903]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[98393-98709]:Block[98587-98903]"
    }, {
      "left" : "if (i == INT_LF)",
      "right" : "if (i == INT_LF)",
      "info" : "IfStatement[98411-98695]:IfStatement[98605-98889]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[98428-98536]:Block[98622-98730]"
    }, {
      "left" : "++_currInputRow;",
      "right" : "++_currInputRow;",
      "info" : "ExpressionStatement[98450-98466]:ExpressionStatement[98644-98660]"
    }, {
      "left" : "_currInputRowStart = _inputPtr;",
      "right" : "_currInputRowStart = _inputPtr;",
      "info" : "ExpressionStatement[98487-98518]:ExpressionStatement[98681-98712]"
    }, {
      "left" : "if (i == INT_CR)",
      "right" : "if (i == INT_CR)",
      "info" : "IfStatement[98542-98695]:IfStatement[98736-98889]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[98559-98609]:Block[98753-98803]"
    }, {
      "left" : "_skipCR();",
      "right" : "_skipCR();",
      "info" : "ExpressionStatement[98581-98591]:ExpressionStatement[98775-98785]"
    }, {
      "left" : "if (i != INT_TAB)",
      "right" : "if (i != INT_TAB)",
      "info" : "IfStatement[98615-98695]:IfStatement[98809-98889]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[98633-98695]:Block[98827-98889]"
    }, {
      "left" : "_throwInvalidSpace(i);",
      "right" : "_throwInvalidSpace(i);",
      "info" : "ExpressionStatement[98655-98677]:ExpressionStatement[98849-98871]"
    }, {
      "left" : "return _skipWS2();",
      "right" : "return _skipWS2();",
      "info" : "ReturnStatement[98728-98746]:ReturnStatement[98922-98940]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[98810-99759]:Block[99004-99953]"
    }, {
      "left" : "while (_inputPtr < _inputEnd || loadMore())",
      "right" : "while (_inputPtr < _inputEnd || loadMore())",
      "info" : "WhileStatement[98820-99630]:WhileStatement[99014-99824]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[98864-99630]:Block[99058-99824]"
    }, {
      "left" : "int i = _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "int i = _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "VariableDeclarationStatement[98878-98919]:VariableDeclarationStatement[99072-99113]"
    }, {
      "left" : "if (i > INT_SPACE)",
      "right" : "if (i > INT_SPACE)",
      "info" : "IfStatement[98932-99271]:IfStatement[99126-99465]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[98951-99271]:Block[99145-99465]"
    }, {
      "left" : "if (i == INT_SLASH)",
      "right" : "if (i == INT_SLASH)",
      "info" : "IfStatement[98969-99074]:IfStatement[99163-99268]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[98989-99074]:Block[99183-99268]"
    }, {
      "left" : "_skipComment();",
      "right" : "_skipComment();",
      "info" : "ExpressionStatement[99011-99026]:ExpressionStatement[99205-99220]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[99047-99056]:ContinueStatement[99241-99250]"
    }, {
      "left" : "if (i == INT_HASH)",
      "right" : "if (i == INT_HASH)",
      "info" : "IfStatement[99091-99231]:IfStatement[99285-99425]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[99110-99231]:Block[99304-99425]"
    }, {
      "left" : "if (_skipYAMLComment())",
      "right" : "if (_skipYAMLComment())",
      "info" : "IfStatement[99132-99213]:IfStatement[99326-99407]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[99156-99213]:Block[99350-99407]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[99182-99191]:ContinueStatement[99376-99385]"
    }, {
      "left" : "return i;",
      "right" : "return i;",
      "info" : "ReturnStatement[99248-99257]:ReturnStatement[99442-99451]"
    }, {
      "left" : "if (i != INT_SPACE)",
      "right" : "if (i != INT_SPACE)",
      "info" : "IfStatement[99284-99620]:IfStatement[99478-99814]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[99304-99620]:Block[99498-99814]"
    }, {
      "left" : "if (i == INT_LF)",
      "right" : "if (i == INT_LF)",
      "info" : "IfStatement[99322-99606]:IfStatement[99516-99800]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[99339-99447]:Block[99533-99641]"
    }, {
      "left" : "++_currInputRow;",
      "right" : "++_currInputRow;",
      "info" : "ExpressionStatement[99361-99377]:ExpressionStatement[99555-99571]"
    }, {
      "left" : "_currInputRowStart = _inputPtr;",
      "right" : "_currInputRowStart = _inputPtr;",
      "info" : "ExpressionStatement[99398-99429]:ExpressionStatement[99592-99623]"
    }, {
      "left" : "if (i == INT_CR)",
      "right" : "if (i == INT_CR)",
      "info" : "IfStatement[99453-99606]:IfStatement[99647-99800]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[99470-99520]:Block[99664-99714]"
    }, {
      "left" : "_skipCR();",
      "right" : "_skipCR();",
      "info" : "ExpressionStatement[99492-99502]:ExpressionStatement[99686-99696]"
    }, {
      "left" : "if (i != INT_TAB)",
      "right" : "if (i != INT_TAB)",
      "info" : "IfStatement[99526-99606]:IfStatement[99720-99800]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[99544-99606]:Block[99738-99800]"
    }, {
      "left" : "_throwInvalidSpace(i);",
      "right" : "_throwInvalidSpace(i);",
      "info" : "ExpressionStatement[99566-99588]:ExpressionStatement[99760-99782]"
    }, {
      "left" : "throw _constructError(\"Unexpected end-of-input within/between \"+_parsingContext.getTypeDesc()+\" entries\");",
      "right" : "throw _constructError(\"Unexpected end-of-input within/between \"+_parsingContext.getTypeDesc()+\" entries\");",
      "info" : "ThrowStatement[99647-99753]:ThrowStatement[99841-99947]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[99825-101385]:Block[100019-101579]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[99987-100112]:IfStatement[100181-100306]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[100015-100112]:Block[100209-100306]"
    }, {
      "left" : "if (!loadMore())",
      "right" : "if (!loadMore())",
      "info" : "IfStatement[100029-100102]:IfStatement[100223-100296]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[100046-100102]:Block[100240-100296]"
    }, {
      "left" : "return _eofAsNextChar();",
      "right" : "return _eofAsNextChar();",
      "info" : "ReturnStatement[100064-100088]:ReturnStatement[100258-100282]"
    }, {
      "left" : "int i = _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "int i = _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "VariableDeclarationStatement[100121-100162]:VariableDeclarationStatement[100315-100356]"
    }, {
      "left" : "if (i > INT_SPACE)",
      "right" : "if (i > INT_SPACE)",
      "info" : "IfStatement[100171-100357]:IfStatement[100365-100551]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[100190-100357]:Block[100384-100551]"
    }, {
      "left" : "if (i == INT_SLASH || i == INT_HASH)",
      "right" : "if (i == INT_SLASH || i == INT_HASH)",
      "info" : "IfStatement[100204-100325]:IfStatement[100398-100519]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[100241-100325]:Block[100435-100519]"
    }, {
      "left" : "--_inputPtr;",
      "right" : "--_inputPtr;",
      "info" : "ExpressionStatement[100259-100271]:ExpressionStatement[100453-100465]"
    }, {
      "left" : "return _skipWSOrEnd2();",
      "right" : "return _skipWSOrEnd2();",
      "info" : "ReturnStatement[100288-100311]:ReturnStatement[100482-100505]"
    }, {
      "left" : "return i;",
      "right" : "return i;",
      "info" : "ReturnStatement[100338-100347]:ReturnStatement[100532-100541]"
    }, {
      "left" : "if (i != INT_SPACE)",
      "right" : "if (i != INT_SPACE)",
      "info" : "IfStatement[100366-100666]:IfStatement[100560-100860]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[100386-100666]:Block[100580-100860]"
    }, {
      "left" : "if (i == INT_LF)",
      "right" : "if (i == INT_LF)",
      "info" : "IfStatement[100400-100656]:IfStatement[100594-100850]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[100417-100513]:Block[100611-100707]"
    }, {
      "left" : "++_currInputRow;",
      "right" : "++_currInputRow;",
      "info" : "ExpressionStatement[100435-100451]:ExpressionStatement[100629-100645]"
    }, {
      "left" : "_currInputRowStart = _inputPtr;",
      "right" : "_currInputRowStart = _inputPtr;",
      "info" : "ExpressionStatement[100468-100499]:ExpressionStatement[100662-100693]"
    }, {
      "left" : "if (i == INT_CR)",
      "right" : "if (i == INT_CR)",
      "info" : "IfStatement[100519-100656]:IfStatement[100713-100850]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[100536-100578]:Block[100730-100772]"
    }, {
      "left" : "_skipCR();",
      "right" : "_skipCR();",
      "info" : "ExpressionStatement[100554-100564]:ExpressionStatement[100748-100758]"
    }, {
      "left" : "if (i != INT_TAB)",
      "right" : "if (i != INT_TAB)",
      "info" : "IfStatement[100584-100656]:IfStatement[100778-100850]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[100602-100656]:Block[100796-100850]"
    }, {
      "left" : "_throwInvalidSpace(i);",
      "right" : "_throwInvalidSpace(i);",
      "info" : "ExpressionStatement[100620-100642]:ExpressionStatement[100814-100836]"
    }, {
      "left" : "while (_inputPtr < _inputEnd)",
      "right" : "while (_inputPtr < _inputEnd)",
      "info" : "WhileStatement[100684-101347]:WhileStatement[100878-101541]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[100714-101347]:Block[100908-101541]"
    }, {
      "left" : "i = _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "i = _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[100728-100765]:ExpressionStatement[100922-100959]"
    }, {
      "left" : "if (i > INT_SPACE)",
      "right" : "if (i > INT_SPACE)",
      "info" : "IfStatement[100778-100988]:IfStatement[100972-101182]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[100797-100988]:Block[100991-101182]"
    }, {
      "left" : "if (i == INT_SLASH || i == INT_HASH)",
      "right" : "if (i == INT_SLASH || i == INT_HASH)",
      "info" : "IfStatement[100815-100948]:IfStatement[101009-101142]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[100852-100948]:Block[101046-101142]"
    }, {
      "left" : "--_inputPtr;",
      "right" : "--_inputPtr;",
      "info" : "ExpressionStatement[100874-100886]:ExpressionStatement[101068-101080]"
    }, {
      "left" : "return _skipWSOrEnd2();",
      "right" : "return _skipWSOrEnd2();",
      "info" : "ReturnStatement[100907-100930]:ReturnStatement[101101-101124]"
    }, {
      "left" : "return i;",
      "right" : "return i;",
      "info" : "ReturnStatement[100965-100974]:ReturnStatement[101159-101168]"
    }, {
      "left" : "if (i != INT_SPACE)",
      "right" : "if (i != INT_SPACE)",
      "info" : "IfStatement[101001-101337]:IfStatement[101195-101531]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[101021-101337]:Block[101215-101531]"
    }, {
      "left" : "if (i == INT_LF)",
      "right" : "if (i == INT_LF)",
      "info" : "IfStatement[101039-101323]:IfStatement[101233-101517]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[101056-101164]:Block[101250-101358]"
    }, {
      "left" : "++_currInputRow;",
      "right" : "++_currInputRow;",
      "info" : "ExpressionStatement[101078-101094]:ExpressionStatement[101272-101288]"
    }, {
      "left" : "_currInputRowStart = _inputPtr;",
      "right" : "_currInputRowStart = _inputPtr;",
      "info" : "ExpressionStatement[101115-101146]:ExpressionStatement[101309-101340]"
    }, {
      "left" : "if (i == INT_CR)",
      "right" : "if (i == INT_CR)",
      "info" : "IfStatement[101170-101323]:IfStatement[101364-101517]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[101187-101237]:Block[101381-101431]"
    }, {
      "left" : "_skipCR();",
      "right" : "_skipCR();",
      "info" : "ExpressionStatement[101209-101219]:ExpressionStatement[101403-101413]"
    }, {
      "left" : "if (i != INT_TAB)",
      "right" : "if (i != INT_TAB)",
      "info" : "IfStatement[101243-101323]:IfStatement[101437-101517]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[101261-101323]:Block[101455-101517]"
    }, {
      "left" : "_throwInvalidSpace(i);",
      "right" : "_throwInvalidSpace(i);",
      "info" : "ExpressionStatement[101283-101305]:ExpressionStatement[101477-101499]"
    }, {
      "left" : "return _skipWSOrEnd2();",
      "right" : "return _skipWSOrEnd2();",
      "info" : "ReturnStatement[101356-101379]:ReturnStatement[101550-101573]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[101448-102336]:Block[101642-102530]"
    }, {
      "left" : "while ((_inputPtr < _inputEnd) || loadMore())",
      "right" : "while ((_inputPtr < _inputEnd) || loadMore())",
      "info" : "WhileStatement[101458-102263]:WhileStatement[101652-102457]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[101504-102263]:Block[101698-102457]"
    }, {
      "left" : "int i = _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "int i = _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "VariableDeclarationStatement[101518-101559]:VariableDeclarationStatement[101712-101753]"
    }, {
      "left" : "if (i > INT_SPACE)",
      "right" : "if (i > INT_SPACE)",
      "info" : "IfStatement[101572-102253]:IfStatement[101766-102447]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[101591-101911]:Block[101785-102105]"
    }, {
      "left" : "if (i == INT_SLASH)",
      "right" : "if (i == INT_SLASH)",
      "info" : "IfStatement[101609-101714]:IfStatement[101803-101908]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[101629-101714]:Block[101823-101908]"
    }, {
      "left" : "_skipComment();",
      "right" : "_skipComment();",
      "info" : "ExpressionStatement[101651-101666]:ExpressionStatement[101845-101860]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[101687-101696]:ContinueStatement[101881-101890]"
    }, {
      "left" : "if (i == INT_HASH)",
      "right" : "if (i == INT_HASH)",
      "info" : "IfStatement[101731-101871]:IfStatement[101925-102065]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[101750-101871]:Block[101944-102065]"
    }, {
      "left" : "if (_skipYAMLComment())",
      "right" : "if (_skipYAMLComment())",
      "info" : "IfStatement[101772-101853]:IfStatement[101966-102047]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[101796-101853]:Block[101990-102047]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[101822-101831]:ContinueStatement[102016-102025]"
    }, {
      "left" : "return i;",
      "right" : "return i;",
      "info" : "ReturnStatement[101888-101897]:ReturnStatement[102082-102091]"
    }, {
      "left" : "if (i != INT_SPACE)",
      "right" : "if (i != INT_SPACE)",
      "info" : "IfStatement[101917-102253]:IfStatement[102111-102447]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[101937-102253]:Block[102131-102447]"
    }, {
      "left" : "if (i == INT_LF)",
      "right" : "if (i == INT_LF)",
      "info" : "IfStatement[101955-102239]:IfStatement[102149-102433]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[101972-102080]:Block[102166-102274]"
    }, {
      "left" : "++_currInputRow;",
      "right" : "++_currInputRow;",
      "info" : "ExpressionStatement[101994-102010]:ExpressionStatement[102188-102204]"
    }, {
      "left" : "_currInputRowStart = _inputPtr;",
      "right" : "_currInputRowStart = _inputPtr;",
      "info" : "ExpressionStatement[102031-102062]:ExpressionStatement[102225-102256]"
    }, {
      "left" : "if (i == INT_CR)",
      "right" : "if (i == INT_CR)",
      "info" : "IfStatement[102086-102239]:IfStatement[102280-102433]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[102103-102153]:Block[102297-102347]"
    }, {
      "left" : "_skipCR();",
      "right" : "_skipCR();",
      "info" : "ExpressionStatement[102125-102135]:ExpressionStatement[102319-102329]"
    }, {
      "left" : "if (i != INT_TAB)",
      "right" : "if (i != INT_TAB)",
      "info" : "IfStatement[102159-102239]:IfStatement[102353-102433]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[102177-102239]:Block[102371-102433]"
    }, {
      "left" : "_throwInvalidSpace(i);",
      "right" : "_throwInvalidSpace(i);",
      "info" : "ExpressionStatement[102199-102221]:ExpressionStatement[102393-102415]"
    }, {
      "left" : "return _eofAsNextChar();",
      "right" : "return _eofAsNextChar();",
      "info" : "ReturnStatement[102306-102330]:ReturnStatement[102500-102524]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[102396-104261]:Block[102590-104455]"
    }, {
      "left" : "if ((_inputPtr + 4) >= _inputEnd)",
      "right" : "if ((_inputPtr + 4) >= _inputEnd)",
      "info" : "IfStatement[102406-102490]:IfStatement[102600-102684]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[102440-102490]:Block[102634-102684]"
    }, {
      "left" : "return _skipColon2(false);",
      "right" : "return _skipColon2(false);",
      "info" : "ReturnStatement[102454-102480]:ReturnStatement[102648-102674]"
    }, {
      "left" : "int i = _inputBuffer[_inputPtr];",
      "right" : "int i = _inputBuffer[_inputPtr];",
      "info" : "VariableDeclarationStatement[102579-102611]:VariableDeclarationStatement[102773-102805]"
    }, {
      "left" : "if (i == INT_COLON)",
      "right" : "if (i == INT_COLON)",
      "info" : "IfStatement[102620-103413]:IfStatement[102814-103607]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[102640-103413]:Block[102834-103607]"
    }, {
      "left" : "i = _inputBuffer[++_inputPtr];",
      "right" : "i = _inputBuffer[++_inputPtr];",
      "info" : "ExpressionStatement[102687-102717]:ExpressionStatement[102881-102911]"
    }, {
      "left" : "if (i > INT_SPACE)",
      "right" : "if (i > INT_SPACE)",
      "info" : "IfStatement[102730-102954]:IfStatement[102924-103148]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[102749-102954]:Block[102943-103148]"
    }, {
      "left" : "if (i == INT_SLASH || i == INT_HASH)",
      "right" : "if (i == INT_SLASH || i == INT_HASH)",
      "info" : "IfStatement[102783-102885]:IfStatement[102977-103079]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[102820-102885]:Block[103014-103079]"
    }, {
      "left" : "return _skipColon2(true);",
      "right" : "return _skipColon2(true);",
      "info" : "ReturnStatement[102842-102867]:ReturnStatement[103036-103061]"
    }, {
      "left" : "++_inputPtr;",
      "right" : "++_inputPtr;",
      "info" : "ExpressionStatement[102902-102914]:ExpressionStatement[103096-103108]"
    }, {
      "left" : "return i;",
      "right" : "return i;",
      "info" : "ReturnStatement[102931-102940]:ReturnStatement[103125-103134]"
    }, {
      "left" : "if (i == INT_SPACE || i == INT_TAB)",
      "right" : "if (i == INT_SPACE || i == INT_TAB)",
      "info" : "IfStatement[102967-103340]:IfStatement[103161-103534]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[103003-103340]:Block[103197-103534]"
    }, {
      "left" : "i = (int) _inputBuffer[++_inputPtr];",
      "right" : "i = (int) _inputBuffer[++_inputPtr];",
      "info" : "ExpressionStatement[103021-103057]:ExpressionStatement[103215-103251]"
    }, {
      "left" : "if (i > INT_SPACE)",
      "right" : "if (i > INT_SPACE)",
      "info" : "IfStatement[103074-103326]:IfStatement[103268-103520]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[103093-103326]:Block[103287-103520]"
    }, {
      "left" : "if (i == INT_SLASH || i == INT_HASH)",
      "right" : "if (i == INT_SLASH || i == INT_HASH)",
      "info" : "IfStatement[103115-103225]:IfStatement[103309-103419]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[103152-103225]:Block[103346-103419]"
    }, {
      "left" : "return _skipColon2(true);",
      "right" : "return _skipColon2(true);",
      "info" : "ReturnStatement[103178-103203]:ReturnStatement[103372-103397]"
    }, {
      "left" : "++_inputPtr;",
      "right" : "++_inputPtr;",
      "info" : "ExpressionStatement[103246-103258]:ExpressionStatement[103440-103452]"
    }, {
      "left" : "return i;",
      "right" : "return i;",
      "info" : "ReturnStatement[103299-103308]:ReturnStatement[103493-103502]"
    }, {
      "left" : "return _skipColon2(true);",
      "right" : "return _skipColon2(true);",
      "info" : "ReturnStatement[103353-103378]:ReturnStatement[103547-103572]"
    }, {
      "left" : "if (i == INT_SPACE || i == INT_TAB)",
      "right" : "if (i == INT_SPACE || i == INT_TAB)",
      "info" : "IfStatement[103422-103512]:IfStatement[103616-103706]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[103458-103512]:Block[103652-103706]"
    }, {
      "left" : "i = _inputBuffer[++_inputPtr];",
      "right" : "i = _inputBuffer[++_inputPtr];",
      "info" : "ExpressionStatement[103472-103502]:ExpressionStatement[103666-103696]"
    }, {
      "left" : "if (i == INT_COLON)",
      "right" : "if (i == INT_COLON)",
      "info" : "IfStatement[103521-104220]:IfStatement[103715-104414]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[103541-104220]:Block[103735-104414]"
    }, {
      "left" : "i = _inputBuffer[++_inputPtr];",
      "right" : "i = _inputBuffer[++_inputPtr];",
      "info" : "ExpressionStatement[103555-103585]:ExpressionStatement[103749-103779]"
    }, {
      "left" : "if (i > INT_SPACE)",
      "right" : "if (i > INT_SPACE)",
      "info" : "IfStatement[103598-103806]:IfStatement[103792-104000]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[103617-103806]:Block[103811-104000]"
    }, {
      "left" : "if (i == INT_SLASH || i == INT_HASH)",
      "right" : "if (i == INT_SLASH || i == INT_HASH)",
      "info" : "IfStatement[103635-103737]:IfStatement[103829-103931]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[103672-103737]:Block[103866-103931]"
    }, {
      "left" : "return _skipColon2(true);",
      "right" : "return _skipColon2(true);",
      "info" : "ReturnStatement[103694-103719]:ReturnStatement[103888-103913]"
    }, {
      "left" : "++_inputPtr;",
      "right" : "++_inputPtr;",
      "info" : "ExpressionStatement[103754-103766]:ExpressionStatement[103948-103960]"
    }, {
      "left" : "return i;",
      "right" : "return i;",
      "info" : "ReturnStatement[103783-103792]:ReturnStatement[103977-103986]"
    }, {
      "left" : "if (i == INT_SPACE || i == INT_TAB)",
      "right" : "if (i == INT_SPACE || i == INT_TAB)",
      "info" : "IfStatement[103819-104172]:IfStatement[104013-104366]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[103855-104172]:Block[104049-104366]"
    }, {
      "left" : "i = (int) _inputBuffer[++_inputPtr];",
      "right" : "i = (int) _inputBuffer[++_inputPtr];",
      "info" : "ExpressionStatement[103873-103909]:ExpressionStatement[104067-104103]"
    }, {
      "left" : "if (i > INT_SPACE)",
      "right" : "if (i > INT_SPACE)",
      "info" : "IfStatement[103926-104158]:IfStatement[104120-104352]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[103945-104158]:Block[104139-104352]"
    }, {
      "left" : "if (i == INT_SLASH || i == INT_HASH)",
      "right" : "if (i == INT_SLASH || i == INT_HASH)",
      "info" : "IfStatement[103967-104077]:IfStatement[104161-104271]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[104004-104077]:Block[104198-104271]"
    }, {
      "left" : "return _skipColon2(true);",
      "right" : "return _skipColon2(true);",
      "info" : "ReturnStatement[104030-104055]:ReturnStatement[104224-104249]"
    }, {
      "left" : "++_inputPtr;",
      "right" : "++_inputPtr;",
      "info" : "ExpressionStatement[104098-104110]:ExpressionStatement[104292-104304]"
    }, {
      "left" : "return i;",
      "right" : "return i;",
      "info" : "ReturnStatement[104131-104140]:ReturnStatement[104325-104334]"
    }, {
      "left" : "return _skipColon2(true);",
      "right" : "return _skipColon2(true);",
      "info" : "ReturnStatement[104185-104210]:ReturnStatement[104379-104404]"
    }, {
      "left" : "return _skipColon2(false);",
      "right" : "return _skipColon2(false);",
      "info" : "ReturnStatement[104229-104255]:ReturnStatement[104423-104449]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[104342-105634]:Block[104536-105828]"
    }, {
      "left" : "while (_inputPtr < _inputEnd || loadMore())",
      "right" : "while (_inputPtr < _inputEnd || loadMore())",
      "info" : "WhileStatement[104352-105513]:WhileStatement[104546-105707]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[104396-105513]:Block[104590-105707]"
    }, {
      "left" : "int i = _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "int i = _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "VariableDeclarationStatement[104410-104451]:VariableDeclarationStatement[104604-104645]"
    }, {
      "left" : "if (i > INT_SPACE)",
      "right" : "if (i > INT_SPACE)",
      "info" : "IfStatement[104465-105503]:IfStatement[104659-105697]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[104484-105161]:Block[104678-105355]"
    }, {
      "left" : "if (i == INT_SLASH)",
      "right" : "if (i == INT_SLASH)",
      "info" : "IfStatement[104502-104607]:IfStatement[104696-104801]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[104522-104607]:Block[104716-104801]"
    }, {
      "left" : "_skipComment();",
      "right" : "_skipComment();",
      "info" : "ExpressionStatement[104544-104559]:ExpressionStatement[104738-104753]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[104580-104589]:ContinueStatement[104774-104783]"
    }, {
      "left" : "if (i == INT_HASH)",
      "right" : "if (i == INT_HASH)",
      "info" : "IfStatement[104624-104764]:IfStatement[104818-104958]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[104643-104764]:Block[104837-104958]"
    }, {
      "left" : "if (_skipYAMLComment())",
      "right" : "if (_skipYAMLComment())",
      "info" : "IfStatement[104665-104746]:IfStatement[104859-104940]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[104689-104746]:Block[104883-104940]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[104715-104724]:ContinueStatement[104909-104918]"
    }, {
      "left" : "if (gotColon)",
      "right" : "if (gotColon)",
      "info" : "IfStatement[104781-104844]:IfStatement[104975-105038]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[104795-104844]:Block[104989-105038]"
    }, {
      "left" : "return i;",
      "right" : "return i;",
      "info" : "ReturnStatement[104817-104826]:ReturnStatement[105011-105020]"
    }, {
      "left" : "if (i != INT_COLON)",
      "right" : "if (i != INT_COLON)",
      "info" : "IfStatement[104861-105114]:IfStatement[105055-105308]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[104881-105114]:Block[105075-105308]"
    }, {
      "left" : "if (i < INT_SPACE)",
      "right" : "if (i < INT_SPACE)",
      "info" : "IfStatement[104903-104992]:IfStatement[105097-105186]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[104922-104992]:Block[105116-105186]"
    }, {
      "left" : "_throwInvalidSpace(i);",
      "right" : "_throwInvalidSpace(i);",
      "info" : "ExpressionStatement[104948-104970]:ExpressionStatement[105142-105164]"
    }, {
      "left" : "_reportUnexpectedChar(i, \"was expecting a colon to separate field name and value\");",
      "right" : "_reportUnexpectedChar(i, \"was expecting a colon to separate field name and value\");",
      "info" : "ExpressionStatement[105013-105096]:ExpressionStatement[105207-105290]"
    }, {
      "left" : "gotColon = true;",
      "right" : "gotColon = true;",
      "info" : "ExpressionStatement[105131-105147]:ExpressionStatement[105325-105341]"
    }, {
      "left" : "if (i != INT_SPACE)",
      "right" : "if (i != INT_SPACE)",
      "info" : "IfStatement[105167-105503]:IfStatement[105361-105697]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[105187-105503]:Block[105381-105697]"
    }, {
      "left" : "if (i == INT_LF)",
      "right" : "if (i == INT_LF)",
      "info" : "IfStatement[105205-105489]:IfStatement[105399-105683]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[105222-105330]:Block[105416-105524]"
    }, {
      "left" : "++_currInputRow;",
      "right" : "++_currInputRow;",
      "info" : "ExpressionStatement[105244-105260]:ExpressionStatement[105438-105454]"
    }, {
      "left" : "_currInputRowStart = _inputPtr;",
      "right" : "_currInputRowStart = _inputPtr;",
      "info" : "ExpressionStatement[105281-105312]:ExpressionStatement[105475-105506]"
    }, {
      "left" : "if (i == INT_CR)",
      "right" : "if (i == INT_CR)",
      "info" : "IfStatement[105336-105489]:IfStatement[105530-105683]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[105353-105403]:Block[105547-105597]"
    }, {
      "left" : "_skipCR();",
      "right" : "_skipCR();",
      "info" : "ExpressionStatement[105375-105385]:ExpressionStatement[105569-105579]"
    }, {
      "left" : "if (i != INT_TAB)",
      "right" : "if (i != INT_TAB)",
      "info" : "IfStatement[105409-105489]:IfStatement[105603-105683]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[105427-105489]:Block[105621-105683]"
    }, {
      "left" : "_throwInvalidSpace(i);",
      "right" : "_throwInvalidSpace(i);",
      "info" : "ExpressionStatement[105449-105471]:ExpressionStatement[105643-105665]"
    }, {
      "left" : "throw _constructError(\"Unexpected end-of-input within/between \"+_parsingContext.getTypeDesc()+\" entries\");",
      "right" : "throw _constructError(\"Unexpected end-of-input within/between \"+_parsingContext.getTypeDesc()+\" entries\");",
      "info" : "ThrowStatement[105522-105628]:ThrowStatement[105716-105822]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[105697-106358]:Block[105891-106552]"
    }, {
      "left" : "if (!isEnabled(Feature.ALLOW_COMMENTS))",
      "right" : "if (!isEnabled(Feature.ALLOW_COMMENTS))",
      "info" : "IfStatement[105707-105911]:IfStatement[105901-106105]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[105747-105911]:Block[105941-106105]"
    }, {
      "left" : "_reportUnexpectedChar('/', \"maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)\");",
      "right" : "_reportUnexpectedChar('/', \"maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)\");",
      "info" : "ExpressionStatement[105761-105901]:ExpressionStatement[105955-106095]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd && !loadMore())",
      "right" : "if (_inputPtr >= _inputEnd && !loadMore())",
      "info" : "IfStatement[105977-106079]:IfStatement[106171-106273]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[106020-106079]:Block[106214-106273]"
    }, {
      "left" : "_reportInvalidEOF(\" in a comment\");",
      "right" : "_reportInvalidEOF(\" in a comment\");",
      "info" : "ExpressionStatement[106034-106069]:ExpressionStatement[106228-106263]"
    }, {
      "left" : "int c = _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "int c = _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "VariableDeclarationStatement[106088-106129]:VariableDeclarationStatement[106282-106323]"
    }, {
      "left" : "if (c == '/')",
      "right" : "if (c == '/')",
      "info" : "IfStatement[106138-106352]:IfStatement[106332-106546]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[106152-106188]:Block[106346-106382]"
    }, {
      "left" : "_skipLine();",
      "right" : "_skipLine();",
      "info" : "ExpressionStatement[106166-106178]:ExpressionStatement[106360-106372]"
    }, {
      "left" : "if (c == '*')",
      "right" : "if (c == '*')",
      "info" : "IfStatement[106194-106352]:IfStatement[106388-106546]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[106208-106248]:Block[106402-106442]"
    }, {
      "left" : "_skipCComment();",
      "right" : "_skipCComment();",
      "info" : "ExpressionStatement[106222-106238]:ExpressionStatement[106416-106432]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[106254-106352]:Block[106448-106546]"
    }, {
      "left" : "_reportUnexpectedChar(c, \"was expecting either '*' or '/' for a comment\");",
      "right" : "_reportUnexpectedChar(c, \"was expecting either '*' or '/' for a comment\");",
      "info" : "ExpressionStatement[106268-106342]:ExpressionStatement[106462-106536]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[106422-107924]:Block[106616-108118]"
    }, {
      "left" : "final int[] codes = CharTypes.getInputCodeComment();",
      "right" : "final int[] codes = CharTypes.getInputCodeComment();",
      "info" : "VariableDeclarationStatement[106504-106556]:VariableDeclarationStatement[106698-106750]"
    }, {
      "left" : "main_loop:\n        while ((_inputPtr < _inputEnd) || loadMore()) {\n            int i = (int) _inputBuffer[_inputPtr++] & 0xFF;\n            int code = codes[i];\n            if (code != 0) {\n                switch (code) {\n                case '*':\n                    if (_inputPtr >= _inputEnd && !loadMore()) {\n                        break main_loop;\n                    }\n                    if (_inputBuffer[_inputPtr] == INT_SLASH) {\n                        ++_inputPtr;\n                        return;\n                    }\n                    break;\n                case INT_LF:\n                    ++_currInputRow;\n                    _currInputRowStart = _inputPtr;\n                    break;\n                case INT_CR:\n                    _skipCR();\n                    break;\n                case 2: // 2-byte UTF\n                    _skipUtf8_2(i);\n                    break;\n                case 3: // 3-byte UTF\n                    _skipUtf8_3(i);\n                    break;\n                case 4: // 4-byte UTF\n                    _skipUtf8_4(i);\n                    break;\n                default: // e.g. -1\n                    // Is this good enough error message?\n                    _reportInvalidChar(i);\n                }\n            }\n        }",
      "right" : "main_loop:\n        while ((_inputPtr < _inputEnd) || loadMore()) {\n            int i = (int) _inputBuffer[_inputPtr++] & 0xFF;\n            int code = codes[i];\n            if (code != 0) {\n                switch (code) {\n                case '*':\n                    if (_inputPtr >= _inputEnd && !loadMore()) {\n                        break main_loop;\n                    }\n                    if (_inputBuffer[_inputPtr] == INT_SLASH) {\n                        ++_inputPtr;\n                        return;\n                    }\n                    break;\n                case INT_LF:\n                    ++_currInputRow;\n                    _currInputRowStart = _inputPtr;\n                    break;\n                case INT_CR:\n                    _skipCR();\n                    break;\n                case 2: // 2-byte UTF\n                    _skipUtf8_2(i);\n                    break;\n                case 3: // 3-byte UTF\n                    _skipUtf8_3(i);\n                    break;\n                case 4: // 4-byte UTF\n                    _skipUtf8_4(i);\n                    break;\n                default: // e.g. -1\n                    // Is this good enough error message?\n                    _reportInvalidChar(i);\n                }\n            }\n        }",
      "info" : "LabeledStatement[106604-107874]:LabeledStatement[106798-108068]"
    }, {
      "left" : "while ((_inputPtr < _inputEnd) || loadMore())",
      "right" : "while ((_inputPtr < _inputEnd) || loadMore())",
      "info" : "WhileStatement[106623-107874]:WhileStatement[106817-108068]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[106669-107874]:Block[106863-108068]"
    }, {
      "left" : "int i = (int) _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "int i = (int) _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "VariableDeclarationStatement[106683-106730]:VariableDeclarationStatement[106877-106924]"
    }, {
      "left" : "int code = codes[i];",
      "right" : "int code = codes[i];",
      "info" : "VariableDeclarationStatement[106743-106763]:VariableDeclarationStatement[106937-106957]"
    }, {
      "left" : "if (code != 0)",
      "right" : "if (code != 0)",
      "info" : "IfStatement[106776-107864]:IfStatement[106970-108058]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[106791-107864]:Block[106985-108058]"
    }, {
      "left" : "switch (code) {\n                case '*':\n                    if (_inputPtr >= _inputEnd && !loadMore()) {\n                        break main_loop;\n                    }\n                    if (_inputBuffer[_inputPtr] == INT_SLASH) {\n                        ++_inputPtr;\n                        return;\n                    }\n                    break;\n                case INT_LF:\n                    ++_currInputRow;\n                    _currInputRowStart = _inputPtr;\n                    break;\n                case INT_CR:\n                    _skipCR();\n                    break;\n                case 2: // 2-byte UTF\n                    _skipUtf8_2(i);\n                    break;\n                case 3: // 3-byte UTF\n                    _skipUtf8_3(i);\n                    break;\n                case 4: // 4-byte UTF\n                    _skipUtf8_4(i);\n                    break;\n                default: // e.g. -1\n                    // Is this good enough error message?\n                    _reportInvalidChar(i);\n                }",
      "right" : "switch (code) {\n                case '*':\n                    if (_inputPtr >= _inputEnd && !loadMore()) {\n                        break main_loop;\n                    }\n                    if (_inputBuffer[_inputPtr] == INT_SLASH) {\n                        ++_inputPtr;\n                        return;\n                    }\n                    break;\n                case INT_LF:\n                    ++_currInputRow;\n                    _currInputRowStart = _inputPtr;\n                    break;\n                case INT_CR:\n                    _skipCR();\n                    break;\n                case 2: // 2-byte UTF\n                    _skipUtf8_2(i);\n                    break;\n                case 3: // 3-byte UTF\n                    _skipUtf8_3(i);\n                    break;\n                case 4: // 4-byte UTF\n                    _skipUtf8_4(i);\n                    break;\n                default: // e.g. -1\n                    // Is this good enough error message?\n                    _reportInvalidChar(i);\n                }",
      "info" : "SwitchStatement[106809-107850]:SwitchStatement[107003-108044]"
    }, {
      "left" : "case '*':",
      "right" : "case '*':",
      "info" : "SwitchCase[106841-106850]:SwitchCase[107035-107044]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd && !loadMore())",
      "right" : "if (_inputPtr >= _inputEnd && !loadMore())",
      "info" : "IfStatement[106871-106978]:IfStatement[107065-107172]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[106914-106978]:Block[107108-107172]"
    }, {
      "left" : "break main_loop;",
      "right" : "break main_loop;",
      "info" : "BreakStatement[106940-106956]:BreakStatement[107134-107150]"
    }, {
      "left" : "if (_inputBuffer[_inputPtr] == INT_SLASH)",
      "right" : "if (_inputBuffer[_inputPtr] == INT_SLASH)",
      "info" : "IfStatement[106999-107133]:IfStatement[107193-107327]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[107041-107133]:Block[107235-107327]"
    }, {
      "left" : "++_inputPtr;",
      "right" : "++_inputPtr;",
      "info" : "ExpressionStatement[107067-107079]:ExpressionStatement[107261-107273]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[107104-107111]:ReturnStatement[107298-107305]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[107154-107160]:BreakStatement[107348-107354]"
    }, {
      "left" : "case INT_LF:",
      "right" : "case INT_LF:",
      "info" : "SwitchCase[107177-107189]:SwitchCase[107371-107383]"
    }, {
      "left" : "++_currInputRow;",
      "right" : "++_currInputRow;",
      "info" : "ExpressionStatement[107210-107226]:ExpressionStatement[107404-107420]"
    }, {
      "left" : "_currInputRowStart = _inputPtr;",
      "right" : "_currInputRowStart = _inputPtr;",
      "info" : "ExpressionStatement[107247-107278]:ExpressionStatement[107441-107472]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[107299-107305]:BreakStatement[107493-107499]"
    }, {
      "left" : "case INT_CR:",
      "right" : "case INT_CR:",
      "info" : "SwitchCase[107322-107334]:SwitchCase[107516-107528]"
    }, {
      "left" : "_skipCR();",
      "right" : "_skipCR();",
      "info" : "ExpressionStatement[107355-107365]:ExpressionStatement[107549-107559]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[107386-107392]:BreakStatement[107580-107586]"
    }, {
      "left" : "case 2:",
      "right" : "case 2:",
      "info" : "SwitchCase[107409-107416]:SwitchCase[107603-107610]"
    }, {
      "left" : "_skipUtf8_2(i);",
      "right" : "_skipUtf8_2(i);",
      "info" : "ExpressionStatement[107451-107466]:ExpressionStatement[107645-107660]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[107487-107493]:BreakStatement[107681-107687]"
    }, {
      "left" : "case 3:",
      "right" : "case 3:",
      "info" : "SwitchCase[107510-107517]:SwitchCase[107704-107711]"
    }, {
      "left" : "_skipUtf8_3(i);",
      "right" : "_skipUtf8_3(i);",
      "info" : "ExpressionStatement[107552-107567]:ExpressionStatement[107746-107761]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[107588-107594]:BreakStatement[107782-107788]"
    }, {
      "left" : "case 4:",
      "right" : "case 4:",
      "info" : "SwitchCase[107611-107618]:SwitchCase[107805-107812]"
    }, {
      "left" : "_skipUtf8_4(i);",
      "right" : "_skipUtf8_4(i);",
      "info" : "ExpressionStatement[107653-107668]:ExpressionStatement[107847-107862]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[107689-107695]:BreakStatement[107883-107889]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[107712-107720]:SwitchCase[107906-107914]"
    }, {
      "left" : "_reportInvalidChar(i);",
      "right" : "_reportInvalidChar(i);",
      "info" : "ExpressionStatement[107810-107832]:ExpressionStatement[108004-108026]"
    }, {
      "left" : "_reportInvalidEOF(\" in a comment\");",
      "right" : "_reportInvalidEOF(\" in a comment\");",
      "info" : "ExpressionStatement[107883-107918]:ExpressionStatement[108077-108112]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[107994-108134]:Block[108188-108328]"
    }, {
      "left" : "if (!isEnabled(Feature.ALLOW_YAML_COMMENTS))",
      "right" : "if (!isEnabled(Feature.ALLOW_YAML_COMMENTS))",
      "info" : "IfStatement[108004-108086]:IfStatement[108198-108280]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[108049-108086]:Block[108243-108280]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[108063-108076]:ReturnStatement[108257-108270]"
    }, {
      "left" : "_skipLine();",
      "right" : "_skipLine();",
      "info" : "ExpressionStatement[108095-108107]:ExpressionStatement[108289-108301]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[108116-108128]:ReturnStatement[108310-108322]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[108312-109495]:Block[108506-109689]"
    }, {
      "left" : "final int[] codes = CharTypes.getInputCodeComment();",
      "right" : "final int[] codes = CharTypes.getInputCodeComment();",
      "info" : "VariableDeclarationStatement[108366-108418]:VariableDeclarationStatement[108560-108612]"
    }, {
      "left" : "while ((_inputPtr < _inputEnd) || loadMore())",
      "right" : "while ((_inputPtr < _inputEnd) || loadMore())",
      "info" : "WhileStatement[108427-109489]:WhileStatement[108621-109683]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[108473-109489]:Block[108667-109683]"
    }, {
      "left" : "int i = (int) _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "int i = (int) _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "VariableDeclarationStatement[108487-108534]:VariableDeclarationStatement[108681-108728]"
    }, {
      "left" : "int code = codes[i];",
      "right" : "int code = codes[i];",
      "info" : "VariableDeclarationStatement[108547-108567]:VariableDeclarationStatement[108741-108761]"
    }, {
      "left" : "if (code != 0)",
      "right" : "if (code != 0)",
      "info" : "IfStatement[108580-109479]:IfStatement[108774-109673]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[108595-109479]:Block[108789-109673]"
    }, {
      "left" : "switch (code) {\n                case INT_LF:\n                    ++_currInputRow;\n                    _currInputRowStart = _inputPtr;\n                    return;\n                case INT_CR:\n                    _skipCR();\n                    return;\n                case '*': // nop for these comments\n                    break;\n                case 2: // 2-byte UTF\n                    _skipUtf8_2(i);\n                    break;\n                case 3: // 3-byte UTF\n                    _skipUtf8_3(i);\n                    break;\n                case 4: // 4-byte UTF\n                    _skipUtf8_4(i);\n                    break;\n                default: // e.g. -1\n                    if (code < 0) {\n                        // Is this good enough error message?\n                        _reportInvalidChar(i);\n                    }\n                }",
      "right" : "switch (code) {\n                case INT_LF:\n                    ++_currInputRow;\n                    _currInputRowStart = _inputPtr;\n                    return;\n                case INT_CR:\n                    _skipCR();\n                    return;\n                case '*': // nop for these comments\n                    break;\n                case 2: // 2-byte UTF\n                    _skipUtf8_2(i);\n                    break;\n                case 3: // 3-byte UTF\n                    _skipUtf8_3(i);\n                    break;\n                case 4: // 4-byte UTF\n                    _skipUtf8_4(i);\n                    break;\n                default: // e.g. -1\n                    if (code < 0) {\n                        // Is this good enough error message?\n                        _reportInvalidChar(i);\n                    }\n                }",
      "info" : "SwitchStatement[108613-109465]:SwitchStatement[108807-109659]"
    }, {
      "left" : "case INT_LF:",
      "right" : "case INT_LF:",
      "info" : "SwitchCase[108645-108657]:SwitchCase[108839-108851]"
    }, {
      "left" : "++_currInputRow;",
      "right" : "++_currInputRow;",
      "info" : "ExpressionStatement[108678-108694]:ExpressionStatement[108872-108888]"
    }, {
      "left" : "_currInputRowStart = _inputPtr;",
      "right" : "_currInputRowStart = _inputPtr;",
      "info" : "ExpressionStatement[108715-108746]:ExpressionStatement[108909-108940]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[108767-108774]:ReturnStatement[108961-108968]"
    }, {
      "left" : "case INT_CR:",
      "right" : "case INT_CR:",
      "info" : "SwitchCase[108791-108803]:SwitchCase[108985-108997]"
    }, {
      "left" : "_skipCR();",
      "right" : "_skipCR();",
      "info" : "ExpressionStatement[108824-108834]:ExpressionStatement[109018-109028]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[108855-108862]:ReturnStatement[109049-109056]"
    }, {
      "left" : "case '*':",
      "right" : "case '*':",
      "info" : "SwitchCase[108879-108888]:SwitchCase[109073-109082]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[108935-108941]:BreakStatement[109129-109135]"
    }, {
      "left" : "case 2:",
      "right" : "case 2:",
      "info" : "SwitchCase[108958-108965]:SwitchCase[109152-109159]"
    }, {
      "left" : "_skipUtf8_2(i);",
      "right" : "_skipUtf8_2(i);",
      "info" : "ExpressionStatement[109000-109015]:ExpressionStatement[109194-109209]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[109036-109042]:BreakStatement[109230-109236]"
    }, {
      "left" : "case 3:",
      "right" : "case 3:",
      "info" : "SwitchCase[109059-109066]:SwitchCase[109253-109260]"
    }, {
      "left" : "_skipUtf8_3(i);",
      "right" : "_skipUtf8_3(i);",
      "info" : "ExpressionStatement[109101-109116]:ExpressionStatement[109295-109310]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[109137-109143]:BreakStatement[109331-109337]"
    }, {
      "left" : "case 4:",
      "right" : "case 4:",
      "info" : "SwitchCase[109160-109167]:SwitchCase[109354-109361]"
    }, {
      "left" : "_skipUtf8_4(i);",
      "right" : "_skipUtf8_4(i);",
      "info" : "ExpressionStatement[109202-109217]:ExpressionStatement[109396-109411]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[109238-109244]:BreakStatement[109432-109438]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[109261-109269]:SwitchCase[109455-109463]"
    }, {
      "left" : "if (code < 0)",
      "right" : "if (code < 0)",
      "info" : "IfStatement[109301-109447]:IfStatement[109495-109641]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[109315-109447]:Block[109509-109641]"
    }, {
      "left" : "_reportInvalidChar(i);",
      "right" : "_reportInvalidChar(i);",
      "info" : "ExpressionStatement[109403-109425]:ExpressionStatement[109597-109619]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[109574-111005]:Block[109768-111199]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[109584-109736]:IfStatement[109778-109930]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[109612-109736]:Block[109806-109930]"
    }, {
      "left" : "if (!loadMore())",
      "right" : "if (!loadMore())",
      "info" : "IfStatement[109626-109726]:IfStatement[109820-109920]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[109643-109726]:Block[109837-109920]"
    }, {
      "left" : "_reportInvalidEOF(\" in character escape sequence\");",
      "right" : "_reportInvalidEOF(\" in character escape sequence\");",
      "info" : "ExpressionStatement[109661-109712]:ExpressionStatement[109855-109906]"
    }, {
      "left" : "int c = (int) _inputBuffer[_inputPtr++];",
      "right" : "int c = (int) _inputBuffer[_inputPtr++];",
      "info" : "VariableDeclarationStatement[109745-109785]:VariableDeclarationStatement[109939-109979]"
    }, {
      "left" : "switch (c) {\n            // First, ones that are mapped\n        case 'b':\n            return '\\b';\n        case 't':\n            return '\\t';\n        case 'n':\n            return '\\n';\n        case 'f':\n            return '\\f';\n        case 'r':\n            return '\\r';\n\n            // And these are to be returned as they are\n        case '\"':\n        case '/':\n        case '\\\\':\n            return (char) c;\n\n        case 'u': // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }",
      "right" : "switch (c) {\n            // First, ones that are mapped\n        case 'b':\n            return '\\b';\n        case 't':\n            return '\\t';\n        case 'n':\n            return '\\n';\n        case 'f':\n            return '\\f';\n        case 'r':\n            return '\\r';\n\n            // And these are to be returned as they are\n        case '\"':\n        case '/':\n        case '\\\\':\n            return (char) c;\n\n        case 'u': // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }",
      "info" : "SwitchStatement[109795-110385]:SwitchStatement[109989-110579]"
    }, {
      "left" : "case 'b':",
      "right" : "case 'b':",
      "info" : "SwitchCase[109859-109868]:SwitchCase[110053-110062]"
    }, {
      "left" : "return '\\b';",
      "right" : "return '\\b';",
      "info" : "ReturnStatement[109881-109893]:ReturnStatement[110075-110087]"
    }, {
      "left" : "case 't':",
      "right" : "case 't':",
      "info" : "SwitchCase[109902-109911]:SwitchCase[110096-110105]"
    }, {
      "left" : "return '\\t';",
      "right" : "return '\\t';",
      "info" : "ReturnStatement[109924-109936]:ReturnStatement[110118-110130]"
    }, {
      "left" : "case 'n':",
      "right" : "case 'n':",
      "info" : "SwitchCase[109945-109954]:SwitchCase[110139-110148]"
    }, {
      "left" : "return '\\n';",
      "right" : "return '\\n';",
      "info" : "ReturnStatement[109967-109979]:ReturnStatement[110161-110173]"
    }, {
      "left" : "case 'f':",
      "right" : "case 'f':",
      "info" : "SwitchCase[109988-109997]:SwitchCase[110182-110191]"
    }, {
      "left" : "return '\\f';",
      "right" : "return '\\f';",
      "info" : "ReturnStatement[110010-110022]:ReturnStatement[110204-110216]"
    }, {
      "left" : "case 'r':",
      "right" : "case 'r':",
      "info" : "SwitchCase[110031-110040]:SwitchCase[110225-110234]"
    }, {
      "left" : "return '\\r';",
      "right" : "return '\\r';",
      "info" : "ReturnStatement[110053-110065]:ReturnStatement[110247-110259]"
    }, {
      "left" : "case '\"':",
      "right" : "case '\"':",
      "info" : "SwitchCase[110131-110140]:SwitchCase[110325-110334]"
    }, {
      "left" : "case '/':",
      "right" : "case '/':",
      "info" : "SwitchCase[110149-110158]:SwitchCase[110343-110352]"
    }, {
      "left" : "case '\\\\':",
      "right" : "case '\\\\':",
      "info" : "SwitchCase[110167-110177]:SwitchCase[110361-110371]"
    }, {
      "left" : "return (char) c;",
      "right" : "return (char) c;",
      "info" : "ReturnStatement[110190-110206]:ReturnStatement[110384-110400]"
    }, {
      "left" : "case 'u':",
      "right" : "case 'u':",
      "info" : "SwitchCase[110216-110225]:SwitchCase[110410-110419]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[110265-110271]:BreakStatement[110459-110465]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[110281-110289]:SwitchCase[110475-110483]"
    }, {
      "left" : "return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));",
      "right" : "return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));",
      "info" : "ReturnStatement[110302-110375]:ReturnStatement[110496-110569]"
    }, {
      "left" : "int value = 0;",
      "right" : "int value = 0;",
      "info" : "VariableDeclarationStatement[110442-110456]:VariableDeclarationStatement[110636-110650]"
    }, {
      "left" : "for (int i = 0; i < 4; ++i)",
      "right" : "for (int i = 0; i < 4; ++i)",
      "info" : "ForStatement[110465-110970]:ForStatement[110659-111164]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[110493-110970]:Block[110687-111164]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[110507-110675]:IfStatement[110701-110869]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[110535-110675]:Block[110729-110869]"
    }, {
      "left" : "if (!loadMore())",
      "right" : "if (!loadMore())",
      "info" : "IfStatement[110553-110661]:IfStatement[110747-110855]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[110570-110661]:Block[110764-110855]"
    }, {
      "left" : "_reportInvalidEOF(\" in character escape sequence\");",
      "right" : "_reportInvalidEOF(\" in character escape sequence\");",
      "info" : "ExpressionStatement[110592-110643]:ExpressionStatement[110786-110837]"
    }, {
      "left" : "int ch = (int) _inputBuffer[_inputPtr++];",
      "right" : "int ch = (int) _inputBuffer[_inputPtr++];",
      "info" : "VariableDeclarationStatement[110688-110729]:VariableDeclarationStatement[110882-110923]"
    }, {
      "left" : "int digit = CharTypes.charToHex(ch);",
      "right" : "int digit = CharTypes.charToHex(ch);",
      "info" : "VariableDeclarationStatement[110742-110778]:VariableDeclarationStatement[110936-110972]"
    }, {
      "left" : "if (digit < 0)",
      "right" : "if (digit < 0)",
      "info" : "IfStatement[110791-110918]:IfStatement[110985-111112]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[110806-110918]:Block[111000-111112]"
    }, {
      "left" : "_reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");",
      "right" : "_reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");",
      "info" : "ExpressionStatement[110824-110904]:ExpressionStatement[111018-111098]"
    }, {
      "left" : "value = (value << 4) | digit;",
      "right" : "value = (value << 4) | digit;",
      "info" : "ExpressionStatement[110931-110960]:ExpressionStatement[111125-111154]"
    }, {
      "left" : "return (char) value;",
      "right" : "return (char) value;",
      "info" : "ReturnStatement[110979-110999]:ReturnStatement[111173-111193]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[111083-112615]:Block[111277-112809]"
    }, {
      "left" : "int c = firstByte & 0xFF;",
      "right" : "int c = firstByte & 0xFF;",
      "info" : "VariableDeclarationStatement[111093-111118]:VariableDeclarationStatement[111287-111312]"
    }, {
      "left" : "if (c > 0x7F)",
      "right" : "if (c > 0x7F)",
      "info" : "IfStatement[111127-112591]:IfStatement[111321-112785]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[111141-112591]:Block[111335-112785]"
    }, {
      "left" : "int needed;",
      "right" : "int needed;",
      "info" : "VariableDeclarationStatement[111191-111202]:VariableDeclarationStatement[111385-111396]"
    }, {
      "left" : "if ((c & 0xE0) == 0xC0)",
      "right" : "if ((c & 0xE0) == 0xC0)",
      "info" : "IfStatement[111293-111829]:IfStatement[111487-112023]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[111317-111416]:Block[111511-111610]"
    }, {
      "left" : "c &= 0x1F;",
      "right" : "c &= 0x1F;",
      "info" : "ExpressionStatement[111364-111374]:ExpressionStatement[111558-111568]"
    }, {
      "left" : "needed = 1;",
      "right" : "needed = 1;",
      "info" : "ExpressionStatement[111391-111402]:ExpressionStatement[111585-111596]"
    }, {
      "left" : "if ((c & 0xF0) == 0xE0)",
      "right" : "if ((c & 0xF0) == 0xE0)",
      "info" : "IfStatement[111422-111829]:IfStatement[111616-112023]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[111446-111545]:Block[111640-111739]"
    }, {
      "left" : "c &= 0x0F;",
      "right" : "c &= 0x0F;",
      "info" : "ExpressionStatement[111493-111503]:ExpressionStatement[111687-111697]"
    }, {
      "left" : "needed = 2;",
      "right" : "needed = 2;",
      "info" : "ExpressionStatement[111520-111531]:ExpressionStatement[111714-111725]"
    }, {
      "left" : "if ((c & 0xF8) == 0xF0)",
      "right" : "if ((c & 0xF8) == 0xF0)",
      "info" : "IfStatement[111551-111829]:IfStatement[111745-112023]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[111575-111712]:Block[111769-111906]"
    }, {
      "left" : "c &= 0x07;",
      "right" : "c &= 0x07;",
      "info" : "ExpressionStatement[111660-111670]:ExpressionStatement[111854-111864]"
    }, {
      "left" : "needed = 3;",
      "right" : "needed = 3;",
      "info" : "ExpressionStatement[111687-111698]:ExpressionStatement[111881-111892]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[111718-111829]:Block[111912-112023]"
    }, {
      "left" : "_reportInvalidInitial(c & 0xFF);",
      "right" : "_reportInvalidInitial(c & 0xFF);",
      "info" : "ExpressionStatement[111736-111768]:ExpressionStatement[111930-111962]"
    }, {
      "left" : "needed = 1;",
      "right" : "needed = 1;",
      "info" : "ExpressionStatement[111785-111796]:ExpressionStatement[111979-111990]"
    }, {
      "left" : "int d = nextByte();",
      "right" : "int d = nextByte();",
      "info" : "VariableDeclarationStatement[111843-111862]:VariableDeclarationStatement[112037-112056]"
    }, {
      "left" : "if ((d & 0xC0) != 0x080)",
      "right" : "if ((d & 0xC0) != 0x080)",
      "info" : "IfStatement[111875-111962]:IfStatement[112069-112156]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[111900-111962]:Block[112094-112156]"
    }, {
      "left" : "_reportInvalidOther(d & 0xFF);",
      "right" : "_reportInvalidOther(d & 0xFF);",
      "info" : "ExpressionStatement[111918-111948]:ExpressionStatement[112112-112142]"
    }, {
      "left" : "c = (c << 6) | (d & 0x3F);",
      "right" : "c = (c << 6) | (d & 0x3F);",
      "info" : "ExpressionStatement[111975-112001]:ExpressionStatement[112169-112195]"
    }, {
      "left" : "if (needed > 1)",
      "right" : "if (needed > 1)",
      "info" : "IfStatement[112027-112581]:IfStatement[112221-112775]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[112043-112581]:Block[112237-112775]"
    }, {
      "left" : "d = nextByte();",
      "right" : "d = nextByte();",
      "info" : "ExpressionStatement[112096-112111]:ExpressionStatement[112290-112305]"
    }, {
      "left" : "if ((d & 0xC0) != 0x080)",
      "right" : "if ((d & 0xC0) != 0x080)",
      "info" : "IfStatement[112140-112235]:IfStatement[112334-112429]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[112165-112235]:Block[112359-112429]"
    }, {
      "left" : "_reportInvalidOther(d & 0xFF);",
      "right" : "_reportInvalidOther(d & 0xFF);",
      "info" : "ExpressionStatement[112187-112217]:ExpressionStatement[112381-112411]"
    }, {
      "left" : "c = (c << 6) | (d & 0x3F);",
      "right" : "c = (c << 6) | (d & 0x3F);",
      "info" : "ExpressionStatement[112252-112278]:ExpressionStatement[112446-112472]"
    }, {
      "left" : "if (needed > 2)",
      "right" : "if (needed > 2)",
      "info" : "IfStatement[112295-112567]:IfStatement[112489-112761]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[112311-112567]:Block[112505-112761]"
    }, {
      "left" : "d = nextByte();",
      "right" : "d = nextByte();",
      "info" : "ExpressionStatement[112363-112378]:ExpressionStatement[112557-112572]"
    }, {
      "left" : "if ((d & 0xC0) != 0x080)",
      "right" : "if ((d & 0xC0) != 0x080)",
      "info" : "IfStatement[112399-112502]:IfStatement[112593-112696]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[112424-112502]:Block[112618-112696]"
    }, {
      "left" : "_reportInvalidOther(d & 0xFF);",
      "right" : "_reportInvalidOther(d & 0xFF);",
      "info" : "ExpressionStatement[112450-112480]:ExpressionStatement[112644-112674]"
    }, {
      "left" : "c = (c << 6) | (d & 0x3F);",
      "right" : "c = (c << 6) | (d & 0x3F);",
      "info" : "ExpressionStatement[112523-112549]:ExpressionStatement[112717-112743]"
    }, {
      "left" : "return c;",
      "right" : "return c;",
      "info" : "ReturnStatement[112600-112609]:ReturnStatement[112794-112803]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[112865-113149]:Block[113059-113343]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[112875-112948]:IfStatement[113069-113142]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[112903-112948]:Block[113097-113142]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[112917-112938]:ExpressionStatement[113111-113132]"
    }, {
      "left" : "int d = (int) _inputBuffer[_inputPtr++];",
      "right" : "int d = (int) _inputBuffer[_inputPtr++];",
      "info" : "VariableDeclarationStatement[112957-112997]:VariableDeclarationStatement[113151-113191]"
    }, {
      "left" : "if ((d & 0xC0) != 0x080)",
      "right" : "if ((d & 0xC0) != 0x080)",
      "info" : "IfStatement[113006-113096]:IfStatement[113200-113290]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[113031-113096]:Block[113225-113290]"
    }, {
      "left" : "_reportInvalidOther(d & 0xFF, _inputPtr);",
      "right" : "_reportInvalidOther(d & 0xFF, _inputPtr);",
      "info" : "ExpressionStatement[113045-113086]:ExpressionStatement[113239-113280]"
    }, {
      "left" : "return ((c & 0x1F) << 6) | (d & 0x3F);",
      "right" : "return ((c & 0x1F) << 6) | (d & 0x3F);",
      "info" : "ReturnStatement[113105-113143]:ReturnStatement[113299-113337]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[113218-113794]:Block[113412-113988]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[113228-113301]:IfStatement[113422-113495]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[113256-113301]:Block[113450-113495]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[113270-113291]:ExpressionStatement[113464-113485]"
    }, {
      "left" : "c1 &= 0x0F;",
      "right" : "c1 &= 0x0F;",
      "info" : "ExpressionStatement[113310-113321]:ExpressionStatement[113504-113515]"
    }, {
      "left" : "int d = (int) _inputBuffer[_inputPtr++];",
      "right" : "int d = (int) _inputBuffer[_inputPtr++];",
      "info" : "VariableDeclarationStatement[113330-113370]:VariableDeclarationStatement[113524-113564]"
    }, {
      "left" : "if ((d & 0xC0) != 0x080)",
      "right" : "if ((d & 0xC0) != 0x080)",
      "info" : "IfStatement[113379-113469]:IfStatement[113573-113663]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[113404-113469]:Block[113598-113663]"
    }, {
      "left" : "_reportInvalidOther(d & 0xFF, _inputPtr);",
      "right" : "_reportInvalidOther(d & 0xFF, _inputPtr);",
      "info" : "ExpressionStatement[113418-113459]:ExpressionStatement[113612-113653]"
    }, {
      "left" : "int c = (c1 << 6) | (d & 0x3F);",
      "right" : "int c = (c1 << 6) | (d & 0x3F);",
      "info" : "VariableDeclarationStatement[113478-113509]:VariableDeclarationStatement[113672-113703]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[113518-113591]:IfStatement[113712-113785]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[113546-113591]:Block[113740-113785]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[113560-113581]:ExpressionStatement[113754-113775]"
    }, {
      "left" : "d = (int) _inputBuffer[_inputPtr++];",
      "right" : "d = (int) _inputBuffer[_inputPtr++];",
      "info" : "ExpressionStatement[113600-113636]:ExpressionStatement[113794-113830]"
    }, {
      "left" : "if ((d & 0xC0) != 0x080)",
      "right" : "if ((d & 0xC0) != 0x080)",
      "info" : "IfStatement[113645-113735]:IfStatement[113839-113929]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[113670-113735]:Block[113864-113929]"
    }, {
      "left" : "_reportInvalidOther(d & 0xFF, _inputPtr);",
      "right" : "_reportInvalidOther(d & 0xFF, _inputPtr);",
      "info" : "ExpressionStatement[113684-113725]:ExpressionStatement[113878-113919]"
    }, {
      "left" : "c = (c << 6) | (d & 0x3F);",
      "right" : "c = (c << 6) | (d & 0x3F);",
      "info" : "ExpressionStatement[113744-113770]:ExpressionStatement[113938-113964]"
    }, {
      "left" : "return c;",
      "right" : "return c;",
      "info" : "ReturnStatement[113779-113788]:ReturnStatement[113973-113982]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[113867-114279]:Block[114061-114473]"
    }, {
      "left" : "c1 &= 0x0F;",
      "right" : "c1 &= 0x0F;",
      "info" : "ExpressionStatement[113877-113888]:ExpressionStatement[114071-114082]"
    }, {
      "left" : "int d = (int) _inputBuffer[_inputPtr++];",
      "right" : "int d = (int) _inputBuffer[_inputPtr++];",
      "info" : "VariableDeclarationStatement[113897-113937]:VariableDeclarationStatement[114091-114131]"
    }, {
      "left" : "if ((d & 0xC0) != 0x080)",
      "right" : "if ((d & 0xC0) != 0x080)",
      "info" : "IfStatement[113946-114036]:IfStatement[114140-114230]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[113971-114036]:Block[114165-114230]"
    }, {
      "left" : "_reportInvalidOther(d & 0xFF, _inputPtr);",
      "right" : "_reportInvalidOther(d & 0xFF, _inputPtr);",
      "info" : "ExpressionStatement[113985-114026]:ExpressionStatement[114179-114220]"
    }, {
      "left" : "int c = (c1 << 6) | (d & 0x3F);",
      "right" : "int c = (c1 << 6) | (d & 0x3F);",
      "info" : "VariableDeclarationStatement[114045-114076]:VariableDeclarationStatement[114239-114270]"
    }, {
      "left" : "d = (int) _inputBuffer[_inputPtr++];",
      "right" : "d = (int) _inputBuffer[_inputPtr++];",
      "info" : "ExpressionStatement[114085-114121]:ExpressionStatement[114279-114315]"
    }, {
      "left" : "if ((d & 0xC0) != 0x080)",
      "right" : "if ((d & 0xC0) != 0x080)",
      "info" : "IfStatement[114130-114220]:IfStatement[114324-114414]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[114155-114220]:Block[114349-114414]"
    }, {
      "left" : "_reportInvalidOther(d & 0xFF, _inputPtr);",
      "right" : "_reportInvalidOther(d & 0xFF, _inputPtr);",
      "info" : "ExpressionStatement[114169-114210]:ExpressionStatement[114363-114404]"
    }, {
      "left" : "c = (c << 6) | (d & 0x3F);",
      "right" : "c = (c << 6) | (d & 0x3F);",
      "info" : "ExpressionStatement[114229-114255]:ExpressionStatement[114423-114449]"
    }, {
      "left" : "return c;",
      "right" : "return c;",
      "info" : "ReturnStatement[114264-114273]:ReturnStatement[114458-114467]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[114489-115433]:Block[114683-115627]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[114499-114572]:IfStatement[114693-114766]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[114527-114572]:Block[114721-114766]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[114541-114562]:ExpressionStatement[114735-114756]"
    }, {
      "left" : "int d = (int) _inputBuffer[_inputPtr++];",
      "right" : "int d = (int) _inputBuffer[_inputPtr++];",
      "info" : "VariableDeclarationStatement[114581-114621]:VariableDeclarationStatement[114775-114815]"
    }, {
      "left" : "if ((d & 0xC0) != 0x080)",
      "right" : "if ((d & 0xC0) != 0x080)",
      "info" : "IfStatement[114630-114720]:IfStatement[114824-114914]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[114655-114720]:Block[114849-114914]"
    }, {
      "left" : "_reportInvalidOther(d & 0xFF, _inputPtr);",
      "right" : "_reportInvalidOther(d & 0xFF, _inputPtr);",
      "info" : "ExpressionStatement[114669-114710]:ExpressionStatement[114863-114904]"
    }, {
      "left" : "c = ((c & 0x07) << 6) | (d & 0x3F);",
      "right" : "c = ((c & 0x07) << 6) | (d & 0x3F);",
      "info" : "ExpressionStatement[114729-114764]:ExpressionStatement[114923-114958]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[114774-114847]:IfStatement[114968-115041]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[114802-114847]:Block[114996-115041]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[114816-114837]:ExpressionStatement[115010-115031]"
    }, {
      "left" : "d = (int) _inputBuffer[_inputPtr++];",
      "right" : "d = (int) _inputBuffer[_inputPtr++];",
      "info" : "ExpressionStatement[114856-114892]:ExpressionStatement[115050-115086]"
    }, {
      "left" : "if ((d & 0xC0) != 0x080)",
      "right" : "if ((d & 0xC0) != 0x080)",
      "info" : "IfStatement[114901-114991]:IfStatement[115095-115185]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[114926-114991]:Block[115120-115185]"
    }, {
      "left" : "_reportInvalidOther(d & 0xFF, _inputPtr);",
      "right" : "_reportInvalidOther(d & 0xFF, _inputPtr);",
      "info" : "ExpressionStatement[114940-114981]:ExpressionStatement[115134-115175]"
    }, {
      "left" : "c = (c << 6) | (d & 0x3F);",
      "right" : "c = (c << 6) | (d & 0x3F);",
      "info" : "ExpressionStatement[115000-115026]:ExpressionStatement[115194-115220]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[115035-115108]:IfStatement[115229-115302]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[115063-115108]:Block[115257-115302]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[115077-115098]:ExpressionStatement[115271-115292]"
    }, {
      "left" : "d = (int) _inputBuffer[_inputPtr++];",
      "right" : "d = (int) _inputBuffer[_inputPtr++];",
      "info" : "ExpressionStatement[115117-115153]:ExpressionStatement[115311-115347]"
    }, {
      "left" : "if ((d & 0xC0) != 0x080)",
      "right" : "if ((d & 0xC0) != 0x080)",
      "info" : "IfStatement[115162-115252]:IfStatement[115356-115446]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[115187-115252]:Block[115381-115446]"
    }, {
      "left" : "_reportInvalidOther(d & 0xFF, _inputPtr);",
      "right" : "_reportInvalidOther(d & 0xFF, _inputPtr);",
      "info" : "ExpressionStatement[115201-115242]:ExpressionStatement[115395-115436]"
    }, {
      "left" : "return ((c << 6) | (d & 0x3F)) - 0x10000;",
      "right" : "return ((c << 6) | (d & 0x3F)) - 0x10000;",
      "info" : "ReturnStatement[115386-115427]:ReturnStatement[115580-115621]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[115500-115733]:Block[115694-115927]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[115510-115583]:IfStatement[115704-115777]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[115538-115583]:Block[115732-115777]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[115552-115573]:ExpressionStatement[115746-115767]"
    }, {
      "left" : "c = (int) _inputBuffer[_inputPtr++];",
      "right" : "c = (int) _inputBuffer[_inputPtr++];",
      "info" : "ExpressionStatement[115592-115628]:ExpressionStatement[115786-115822]"
    }, {
      "left" : "if ((c & 0xC0) != 0x080)",
      "right" : "if ((c & 0xC0) != 0x080)",
      "info" : "IfStatement[115637-115727]:IfStatement[115831-115921]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[115662-115727]:Block[115856-115921]"
    }, {
      "left" : "_reportInvalidOther(c & 0xFF, _inputPtr);",
      "right" : "_reportInvalidOther(c & 0xFF, _inputPtr);",
      "info" : "ExpressionStatement[115676-115717]:ExpressionStatement[115870-115911]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[115906-116386]:Block[116100-116580]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[115916-115989]:IfStatement[116110-116183]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[115944-115989]:Block[116138-116183]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[115958-115979]:ExpressionStatement[116152-116173]"
    }, {
      "left" : "c = (int) _inputBuffer[_inputPtr++];",
      "right" : "c = (int) _inputBuffer[_inputPtr++];",
      "info" : "ExpressionStatement[116019-116055]:ExpressionStatement[116213-116249]"
    }, {
      "left" : "if ((c & 0xC0) != 0x080)",
      "right" : "if ((c & 0xC0) != 0x080)",
      "info" : "IfStatement[116064-116154]:IfStatement[116258-116348]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[116089-116154]:Block[116283-116348]"
    }, {
      "left" : "_reportInvalidOther(c & 0xFF, _inputPtr);",
      "right" : "_reportInvalidOther(c & 0xFF, _inputPtr);",
      "info" : "ExpressionStatement[116103-116144]:ExpressionStatement[116297-116338]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[116163-116236]:IfStatement[116357-116430]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[116191-116236]:Block[116385-116430]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[116205-116226]:ExpressionStatement[116399-116420]"
    }, {
      "left" : "c = (int) _inputBuffer[_inputPtr++];",
      "right" : "c = (int) _inputBuffer[_inputPtr++];",
      "info" : "ExpressionStatement[116245-116281]:ExpressionStatement[116439-116475]"
    }, {
      "left" : "if ((c & 0xC0) != 0x080)",
      "right" : "if ((c & 0xC0) != 0x080)",
      "info" : "IfStatement[116290-116380]:IfStatement[116484-116574]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[116315-116380]:Block[116509-116574]"
    }, {
      "left" : "_reportInvalidOther(c & 0xFF, _inputPtr);",
      "right" : "_reportInvalidOther(c & 0xFF, _inputPtr);",
      "info" : "ExpressionStatement[116329-116370]:ExpressionStatement[116523-116564]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[116453-117142]:Block[116647-117336]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[116463-116536]:IfStatement[116657-116730]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[116491-116536]:Block[116685-116730]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[116505-116526]:ExpressionStatement[116699-116720]"
    }, {
      "left" : "int d = (int) _inputBuffer[_inputPtr++];",
      "right" : "int d = (int) _inputBuffer[_inputPtr++];",
      "info" : "VariableDeclarationStatement[116545-116585]:VariableDeclarationStatement[116739-116779]"
    }, {
      "left" : "if ((d & 0xC0) != 0x080)",
      "right" : "if ((d & 0xC0) != 0x080)",
      "info" : "IfStatement[116594-116684]:IfStatement[116788-116878]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[116619-116684]:Block[116813-116878]"
    }, {
      "left" : "_reportInvalidOther(d & 0xFF, _inputPtr);",
      "right" : "_reportInvalidOther(d & 0xFF, _inputPtr);",
      "info" : "ExpressionStatement[116633-116674]:ExpressionStatement[116827-116868]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[116693-116766]:IfStatement[116887-116960]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[116721-116766]:Block[116915-116960]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[116735-116756]:ExpressionStatement[116929-116950]"
    }, {
      "left" : "d = (int) _inputBuffer[_inputPtr++];",
      "right" : "d = (int) _inputBuffer[_inputPtr++];",
      "info" : "ExpressionStatement[116775-116811]:ExpressionStatement[116969-117005]"
    }, {
      "left" : "if ((d & 0xC0) != 0x080)",
      "right" : "if ((d & 0xC0) != 0x080)",
      "info" : "IfStatement[116820-116910]:IfStatement[117014-117104]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[116845-116910]:Block[117039-117104]"
    }, {
      "left" : "_reportInvalidOther(d & 0xFF, _inputPtr);",
      "right" : "_reportInvalidOther(d & 0xFF, _inputPtr);",
      "info" : "ExpressionStatement[116859-116900]:ExpressionStatement[117053-117094]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[116919-116992]:IfStatement[117113-117186]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[116947-116992]:Block[117141-117186]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[116961-116982]:ExpressionStatement[117155-117176]"
    }, {
      "left" : "d = (int) _inputBuffer[_inputPtr++];",
      "right" : "d = (int) _inputBuffer[_inputPtr++];",
      "info" : "ExpressionStatement[117001-117037]:ExpressionStatement[117195-117231]"
    }, {
      "left" : "if ((d & 0xC0) != 0x080)",
      "right" : "if ((d & 0xC0) != 0x080)",
      "info" : "IfStatement[117046-117136]:IfStatement[117240-117330]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[117071-117136]:Block[117265-117330]"
    }, {
      "left" : "_reportInvalidOther(d & 0xFF, _inputPtr);",
      "right" : "_reportInvalidOther(d & 0xFF, _inputPtr);",
      "info" : "ExpressionStatement[117085-117126]:ExpressionStatement[117279-117320]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[117503-117733]:Block[117697-117927]"
    }, {
      "left" : "if (_inputPtr < _inputEnd || loadMore())",
      "right" : "if (_inputPtr < _inputEnd || loadMore())",
      "info" : "IfStatement[117513-117662]:IfStatement[117707-117856]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[117554-117662]:Block[117748-117856]"
    }, {
      "left" : "if (_inputBuffer[_inputPtr] == BYTE_LF)",
      "right" : "if (_inputBuffer[_inputPtr] == BYTE_LF)",
      "info" : "IfStatement[117568-117652]:IfStatement[117762-117846]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[117608-117652]:Block[117802-117846]"
    }, {
      "left" : "++_inputPtr;",
      "right" : "++_inputPtr;",
      "info" : "ExpressionStatement[117626-117638]:ExpressionStatement[117820-117832]"
    }, {
      "left" : "++_currInputRow;",
      "right" : "++_currInputRow;",
      "info" : "ExpressionStatement[117671-117687]:ExpressionStatement[117865-117881]"
    }, {
      "left" : "_currInputRowStart = _inputPtr;",
      "right" : "_currInputRowStart = _inputPtr;",
      "info" : "ExpressionStatement[117696-117727]:ExpressionStatement[117890-117921]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[117789-117927]:Block[117983-118121]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[117799-117872]:IfStatement[117993-118066]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[117827-117872]:Block[118021-118066]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[117841-117862]:ExpressionStatement[118035-118056]"
    }, {
      "left" : "return _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "return _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "ReturnStatement[117881-117921]:ReturnStatement[118075-118115]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[118197-118282]:Block[118391-118476]"
    }, {
      "left" : "_reportInvalidToken(matchedPart, \"'null', 'true', 'false' or NaN\");",
      "right" : "_reportInvalidToken(matchedPart, \"'null', 'true', 'false' or NaN\");",
      "info" : "ExpressionStatement[118208-118275]:ExpressionStatement[118402-118469]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[118379-119096]:Block[118573-119290]"
    }, {
      "left" : "StringBuilder sb = new StringBuilder(matchedPart);",
      "right" : "StringBuilder sb = new StringBuilder(matchedPart);",
      "info" : "VariableDeclarationStatement[118390-118440]:VariableDeclarationStatement[118584-118634]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[118654-119004]:WhileStatement[118848-119198]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[118667-119004]:Block[118861-119198]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd && !loadMore())",
      "right" : "if (_inputPtr >= _inputEnd && !loadMore())",
      "info" : "IfStatement[118682-118765]:IfStatement[118876-118959]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[118725-118765]:Block[118919-118959]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[118744-118750]:BreakStatement[118938-118944]"
    }, {
      "left" : "int i = (int) _inputBuffer[_inputPtr++];",
      "right" : "int i = (int) _inputBuffer[_inputPtr++];",
      "info" : "VariableDeclarationStatement[118779-118819]:VariableDeclarationStatement[118973-119013]"
    }, {
      "left" : "char c = (char) _decodeCharForError(i);",
      "right" : "char c = (char) _decodeCharForError(i);",
      "info" : "VariableDeclarationStatement[118833-118872]:VariableDeclarationStatement[119027-119066]"
    }, {
      "left" : "if (!Character.isJavaIdentifierPart(c))",
      "right" : "if (!Character.isJavaIdentifierPart(c))",
      "info" : "IfStatement[118886-118966]:IfStatement[119080-119160]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[118926-118966]:Block[119120-119160]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[118945-118951]:BreakStatement[119139-119145]"
    }, {
      "left" : "sb.append(c);",
      "right" : "sb.append(c);",
      "info" : "ExpressionStatement[118980-118993]:ExpressionStatement[119174-119187]"
    }, {
      "left" : "_reportError(\"Unrecognized token '\"+sb.toString()+\"': was expecting \"+msg);",
      "right" : "_reportError(\"Unrecognized token '\"+sb.toString()+\"': was expecting \"+msg);",
      "info" : "ExpressionStatement[119014-119089]:ExpressionStatement[119208-119283]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[119189-119361]:Block[119383-119555]"
    }, {
      "left" : "if (c < INT_SPACE)",
      "right" : "if (c < INT_SPACE)",
      "info" : "IfStatement[119256-119321]:IfStatement[119450-119515]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[119275-119321]:Block[119469-119515]"
    }, {
      "left" : "_throwInvalidSpace(c);",
      "right" : "_throwInvalidSpace(c);",
      "info" : "ExpressionStatement[119289-119311]:ExpressionStatement[119483-119505]"
    }, {
      "left" : "_reportInvalidInitial(c);",
      "right" : "_reportInvalidInitial(c);",
      "info" : "ExpressionStatement[119330-119355]:ExpressionStatement[119524-119549]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[119452-119538]:Block[119646-119732]"
    }, {
      "left" : "_reportError(\"Invalid UTF-8 start byte 0x\"+Integer.toHexString(mask));",
      "right" : "_reportError(\"Invalid UTF-8 start byte 0x\"+Integer.toHexString(mask));",
      "info" : "ExpressionStatement[119462-119532]:ExpressionStatement[119656-119726]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[119627-119714]:Block[119821-119908]"
    }, {
      "left" : "_reportError(\"Invalid UTF-8 middle byte 0x\"+Integer.toHexString(mask));",
      "right" : "_reportError(\"Invalid UTF-8 middle byte 0x\"+Integer.toHexString(mask));",
      "info" : "ExpressionStatement[119637-119708]:ExpressionStatement[119831-119902]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[119812-119879]:Block[120006-120073]"
    }, {
      "left" : "_inputPtr = ptr;",
      "right" : "_inputPtr = ptr;",
      "info" : "ExpressionStatement[119822-119838]:ExpressionStatement[120016-120032]"
    }, {
      "left" : "_reportInvalidOther(mask);",
      "right" : "_reportInvalidOther(mask);",
      "info" : "ExpressionStatement[119847-119873]:ExpressionStatement[120041-120067]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[119942-120074]:Block[120136-120268]"
    }, {
      "left" : "if (arr == null)",
      "right" : "if (arr == null)",
      "info" : "IfStatement[119952-120014]:IfStatement[120146-120208]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[119969-120014]:Block[120163-120208]"
    }, {
      "left" : "return new int[more];",
      "right" : "return new int[more];",
      "info" : "ReturnStatement[119983-120004]:ReturnStatement[120177-120198]"
    }, {
      "left" : "return Arrays.copyOf(arr, arr.length + more);",
      "right" : "return Arrays.copyOf(arr, arr.length + more);",
      "info" : "ReturnStatement[120023-120068]:ReturnStatement[120217-120262]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[120491-124936]:Block[120685-125130]"
    }, {
      "left" : "ByteArrayBuilder builder = _getByteArrayBuilder();",
      "right" : "ByteArrayBuilder builder = _getByteArrayBuilder();",
      "info" : "VariableDeclarationStatement[120501-120551]:VariableDeclarationStatement[120695-120745]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[120582-124930]:WhileStatement[120776-125124]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[120595-124930]:Block[120789-125124]"
    }, {
      "left" : "int ch;",
      "right" : "int ch;",
      "info" : "VariableDeclarationStatement[120672-120679]:VariableDeclarationStatement[120866-120873]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[120692-120902]:DoStatement[120886-121096]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[120695-120877]:Block[120889-121071]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[120713-120802]:IfStatement[120907-120996]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[120741-120802]:Block[120935-120996]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[120763-120784]:ExpressionStatement[120957-120978]"
    }, {
      "left" : "ch = (int) _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "ch = (int) _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[120819-120863]:ExpressionStatement[121013-121057]"
    }, {
      "left" : "int bits = b64variant.decodeBase64Char(ch);",
      "right" : "int bits = b64variant.decodeBase64Char(ch);",
      "info" : "VariableDeclarationStatement[120915-120958]:VariableDeclarationStatement[121109-121152]"
    }, {
      "left" : "if (bits < 0)",
      "right" : "if (bits < 0)",
      "info" : "IfStatement[120971-121310]:IfStatement[121165-121504]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[120985-121310]:Block[121179-121504]"
    }, {
      "left" : "if (ch == INT_QUOTE)",
      "right" : "if (ch == INT_QUOTE)",
      "info" : "IfStatement[121040-121130]:IfStatement[121234-121324]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[121061-121130]:Block[121255-121324]"
    }, {
      "left" : "return builder.toByteArray();",
      "right" : "return builder.toByteArray();",
      "info" : "ReturnStatement[121083-121112]:ReturnStatement[121277-121306]"
    }, {
      "left" : "bits = _decodeBase64Escape(b64variant, ch, 0);",
      "right" : "bits = _decodeBase64Escape(b64variant, ch, 0);",
      "info" : "ExpressionStatement[121147-121193]:ExpressionStatement[121341-121387]"
    }, {
      "left" : "if (bits < 0)",
      "right" : "if (bits < 0)",
      "info" : "IfStatement[121210-121296]:IfStatement[121404-121490]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[121224-121296]:Block[121418-121490]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[121269-121278]:ContinueStatement[121463-121472]"
    }, {
      "left" : "int decodedData = bits;",
      "right" : "int decodedData = bits;",
      "info" : "VariableDeclarationStatement[121323-121346]:VariableDeclarationStatement[121517-121540]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[121455-121536]:IfStatement[121649-121730]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[121483-121536]:Block[121677-121730]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[121501-121522]:ExpressionStatement[121695-121716]"
    }, {
      "left" : "ch = _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "ch = _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[121549-121587]:ExpressionStatement[121743-121781]"
    }, {
      "left" : "bits = b64variant.decodeBase64Char(ch);",
      "right" : "bits = b64variant.decodeBase64Char(ch);",
      "info" : "ExpressionStatement[121600-121639]:ExpressionStatement[121794-121833]"
    }, {
      "left" : "if (bits < 0)",
      "right" : "if (bits < 0)",
      "info" : "IfStatement[121652-121744]:IfStatement[121846-121938]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[121666-121744]:Block[121860-121938]"
    }, {
      "left" : "bits = _decodeBase64Escape(b64variant, ch, 1);",
      "right" : "bits = _decodeBase64Escape(b64variant, ch, 1);",
      "info" : "ExpressionStatement[121684-121730]:ExpressionStatement[121878-121924]"
    }, {
      "left" : "decodedData = (decodedData << 6) | bits;",
      "right" : "decodedData = (decodedData << 6) | bits;",
      "info" : "ExpressionStatement[121757-121797]:ExpressionStatement[121951-121991]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[121884-121965]:IfStatement[122078-122159]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[121912-121965]:Block[122106-122159]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[121930-121951]:ExpressionStatement[122124-122145]"
    }, {
      "left" : "ch = _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "ch = _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[121978-122016]:ExpressionStatement[122172-122210]"
    }, {
      "left" : "bits = b64variant.decodeBase64Char(ch);",
      "right" : "bits = b64variant.decodeBase64Char(ch);",
      "info" : "ExpressionStatement[122029-122068]:ExpressionStatement[122223-122262]"
    }, {
      "left" : "if (bits < 0)",
      "right" : "if (bits < 0)",
      "info" : "IfStatement[122139-123345]:IfStatement[122333-123539]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[122153-123345]:Block[122347-123539]"
    }, {
      "left" : "if (bits != Base64Variant.BASE64_VALUE_PADDING)",
      "right" : "if (bits != Base64Variant.BASE64_VALUE_PADDING)",
      "info" : "IfStatement[122171-122626]:IfStatement[122365-122820]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[122219-122626]:Block[122413-122820]"
    }, {
      "left" : "if (ch == '\"' && !b64variant.usesPadding())",
      "right" : "if (ch == '\"' && !b64variant.usesPadding())",
      "info" : "IfStatement[122324-122541]:IfStatement[122518-122735]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[122368-122541]:Block[122562-122735]"
    }, {
      "left" : "decodedData >>= 4;",
      "right" : "decodedData >>= 4;",
      "info" : "ExpressionStatement[122394-122412]:ExpressionStatement[122588-122606]"
    }, {
      "left" : "builder.append(decodedData);",
      "right" : "builder.append(decodedData);",
      "info" : "ExpressionStatement[122437-122465]:ExpressionStatement[122631-122659]"
    }, {
      "left" : "return builder.toByteArray();",
      "right" : "return builder.toByteArray();",
      "info" : "ReturnStatement[122490-122519]:ReturnStatement[122684-122713]"
    }, {
      "left" : "bits = _decodeBase64Escape(b64variant, ch, 2);",
      "right" : "bits = _decodeBase64Escape(b64variant, ch, 2);",
      "info" : "ExpressionStatement[122562-122608]:ExpressionStatement[122756-122802]"
    }, {
      "left" : "if (bits == Base64Variant.BASE64_VALUE_PADDING)",
      "right" : "if (bits == Base64Variant.BASE64_VALUE_PADDING)",
      "info" : "IfStatement[122643-123331]:IfStatement[122837-123525]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[122691-123331]:Block[122885-123525]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[122757-122854]:IfStatement[122951-123048]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[122785-122854]:Block[122979-123048]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[122811-122832]:ExpressionStatement[123005-123026]"
    }, {
      "left" : "ch = _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "ch = _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[122875-122913]:ExpressionStatement[123069-123107]"
    }, {
      "left" : "if (!b64variant.usesPaddingChar(ch))",
      "right" : "if (!b64variant.usesPaddingChar(ch))",
      "info" : "IfStatement[122934-123132]:IfStatement[123128-123326]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[122971-123132]:Block[123165-123326]"
    }, {
      "left" : "throw reportInvalidBase64Char(b64variant, ch, 3, \"expected padding character '\"+b64variant.getPaddingChar()+\"'\");",
      "right" : "throw reportInvalidBase64Char(b64variant, ch, 3, \"expected padding character '\"+b64variant.getPaddingChar()+\"'\");",
      "info" : "ThrowStatement[122997-123110]:ThrowStatement[123191-123304]"
    }, {
      "left" : "decodedData >>= 4;",
      "right" : "decodedData >>= 4;",
      "info" : "ExpressionStatement[123216-123234]:ExpressionStatement[123410-123428]"
    }, {
      "left" : "builder.append(decodedData);",
      "right" : "builder.append(decodedData);",
      "info" : "ExpressionStatement[123255-123283]:ExpressionStatement[123449-123477]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[123304-123313]:ContinueStatement[123498-123507]"
    }, {
      "left" : "decodedData = (decodedData << 6) | bits;",
      "right" : "decodedData = (decodedData << 6) | bits;",
      "info" : "ExpressionStatement[123392-123432]:ExpressionStatement[123586-123626]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[123516-123597]:IfStatement[123710-123791]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[123544-123597]:Block[123738-123791]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[123562-123583]:ExpressionStatement[123756-123777]"
    }, {
      "left" : "ch = _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "ch = _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[123610-123648]:ExpressionStatement[123804-123842]"
    }, {
      "left" : "bits = b64variant.decodeBase64Char(ch);",
      "right" : "bits = b64variant.decodeBase64Char(ch);",
      "info" : "ExpressionStatement[123661-123700]:ExpressionStatement[123855-123894]"
    }, {
      "left" : "if (bits < 0)",
      "right" : "if (bits < 0)",
      "info" : "IfStatement[123713-124762]:IfStatement[123907-124956]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[123727-124762]:Block[123921-124956]"
    }, {
      "left" : "if (bits != Base64Variant.BASE64_VALUE_PADDING)",
      "right" : "if (bits != Base64Variant.BASE64_VALUE_PADDING)",
      "info" : "IfStatement[123745-124208]:IfStatement[123939-124402]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[123793-124208]:Block[123987-124402]"
    }, {
      "left" : "if (ch == '\"' && !b64variant.usesPadding())",
      "right" : "if (ch == '\"' && !b64variant.usesPadding())",
      "info" : "IfStatement[123898-124123]:IfStatement[124092-124317]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[123942-124123]:Block[124136-124317]"
    }, {
      "left" : "decodedData >>= 2;",
      "right" : "decodedData >>= 2;",
      "info" : "ExpressionStatement[123968-123986]:ExpressionStatement[124162-124180]"
    }, {
      "left" : "builder.appendTwoBytes(decodedData);",
      "right" : "builder.appendTwoBytes(decodedData);",
      "info" : "ExpressionStatement[124011-124047]:ExpressionStatement[124205-124241]"
    }, {
      "left" : "return builder.toByteArray();",
      "right" : "return builder.toByteArray();",
      "info" : "ReturnStatement[124072-124101]:ReturnStatement[124266-124295]"
    }, {
      "left" : "bits = _decodeBase64Escape(b64variant, ch, 3);",
      "right" : "bits = _decodeBase64Escape(b64variant, ch, 3);",
      "info" : "ExpressionStatement[124144-124190]:ExpressionStatement[124338-124384]"
    }, {
      "left" : "if (bits == Base64Variant.BASE64_VALUE_PADDING)",
      "right" : "if (bits == Base64Variant.BASE64_VALUE_PADDING)",
      "info" : "IfStatement[124225-124748]:IfStatement[124419-124942]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[124273-124748]:Block[124467-124942]"
    }, {
      "left" : "decodedData >>= 2;",
      "right" : "decodedData >>= 2;",
      "info" : "ExpressionStatement[124625-124643]:ExpressionStatement[124819-124837]"
    }, {
      "left" : "builder.appendTwoBytes(decodedData);",
      "right" : "builder.appendTwoBytes(decodedData);",
      "info" : "ExpressionStatement[124664-124700]:ExpressionStatement[124858-124894]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[124721-124730]:ContinueStatement[124915-124924]"
    }, {
      "left" : "decodedData = (decodedData << 6) | bits;",
      "right" : "decodedData = (decodedData << 6) | bits;",
      "info" : "ExpressionStatement[124829-124869]:ExpressionStatement[125023-125063]"
    }, {
      "left" : "builder.appendThreeBytes(decodedData);",
      "right" : "builder.appendThreeBytes(decodedData);",
      "info" : "ExpressionStatement[124882-124920]:ExpressionStatement[125076-125114]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[125254-125323]:Block[125448-125517]"
    }, {
      "left" : "return (bytes == 4) ? q : (q | (-1 << (bytes << 3)));",
      "right" : "return (bytes == 4) ? q : (q | (-1 << (bytes << 3)));",
      "info" : "ReturnStatement[125264-125317]:ReturnStatement[125458-125511]"
    } ]
  },
  "interFileMappings" : { }
}