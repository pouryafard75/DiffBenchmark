{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "JsDocInfoParser",
      "right" : "JsDocInfoParser",
      "info" : "TypeDeclaration[1587-79175]:TypeDeclaration[1587-79273]"
    }, {
      "left" : "private final JsDocTokenStream stream;",
      "right" : "private final JsDocTokenStream stream;",
      "info" : "FieldDeclaration[1792-1830]:FieldDeclaration[1792-1830]"
    }, {
      "left" : "private final JSDocInfoBuilder jsdocBuilder;",
      "right" : "private final JSDocInfoBuilder jsdocBuilder;",
      "info" : "FieldDeclaration[1833-1877]:FieldDeclaration[1833-1877]"
    }, {
      "left" : "private final StaticSourceFile sourceFile;",
      "right" : "private final StaticSourceFile sourceFile;",
      "info" : "FieldDeclaration[1880-1922]:FieldDeclaration[1880-1922]"
    }, {
      "left" : "private final Node associatedNode;",
      "right" : "private final Node associatedNode;",
      "info" : "FieldDeclaration[1925-1959]:FieldDeclaration[1925-1959]"
    }, {
      "left" : "private final ErrorReporter errorReporter;",
      "right" : "private final ErrorReporter errorReporter;",
      "info" : "FieldDeclaration[1962-2004]:FieldDeclaration[1962-2004]"
    }, {
      "left" : "private final ErrorReporterParser parser = new ErrorReporterParser();",
      "right" : "private final ErrorReporterParser parser = new ErrorReporterParser();",
      "info" : "FieldDeclaration[2007-2076]:FieldDeclaration[2007-2076]"
    }, {
      "left" : "private final Node templateNode;",
      "right" : "private final Node templateNode;",
      "info" : "FieldDeclaration[2221-2253]:FieldDeclaration[2221-2253]"
    }, {
      "left" : "ErrorReporterParser",
      "right" : "ErrorReporterParser",
      "info" : "TypeDeclaration[2257-3282]:TypeDeclaration[2257-3282]"
    }, {
      "left" : "void addParserWarning(String messageId, String messageArg, int lineno,\n        int charno)",
      "right" : "void addParserWarning(String messageId, String messageArg, int lineno,\n        int charno)",
      "info" : "MethodDeclaration[2297-2540]:MethodDeclaration[2297-2540]"
    }, {
      "left" : "void addParserWarning(String messageId, int lineno, int charno)",
      "right" : "void addParserWarning(String messageId, int lineno, int charno)",
      "info" : "MethodDeclaration[2546-2739]:MethodDeclaration[2546-2739]"
    }, {
      "left" : "void addTypeWarning(String messageId, String messageArg, int lineno,\n                    int charno)",
      "right" : "void addTypeWarning(String messageId, String messageArg, int lineno,\n                    int charno)",
      "info" : "MethodDeclaration[2745-3034]:MethodDeclaration[2745-3034]"
    }, {
      "left" : "void addTypeWarning(String messageId, int lineno, int charno)",
      "right" : "void addTypeWarning(String messageId, int lineno, int charno)",
      "info" : "MethodDeclaration[3040-3278]:MethodDeclaration[3040-3278]"
    }, {
      "left" : "private JSDocInfo fileOverviewJSDocInfo = null;",
      "right" : "private JSDocInfo fileOverviewJSDocInfo = null;",
      "info" : "FieldDeclaration[3349-3396]:FieldDeclaration[3349-3396]"
    }, {
      "left" : "private State state;",
      "right" : "private State state;",
      "info" : "FieldDeclaration[3399-3419]:FieldDeclaration[3399-3419]"
    }, {
      "left" : "private final Map<String, Annotation> annotationNames;",
      "right" : "private final Map<String, Annotation> annotationNames;",
      "info" : "FieldDeclaration[3423-3477]:FieldDeclaration[3423-3477]"
    }, {
      "left" : "private final Set<String> suppressionNames;",
      "right" : "private final Set<String> suppressionNames;",
      "info" : "FieldDeclaration[3480-3523]:FieldDeclaration[3480-3523]"
    }, {
      "left" : "private static final Set<String> modifiesAnnotationKeywords =\n      ImmutableSet.<String>of(\"this\", \"arguments\");",
      "right" : "private static final Set<String> modifiesAnnotationKeywords =\n      ImmutableSet.<String>of(\"this\", \"arguments\");",
      "info" : "FieldDeclaration[3526-3639]:FieldDeclaration[3526-3639]"
    }, {
      "left" : "private static final Set<String> idGeneratorAnnotationKeywords =\n      ImmutableSet.<String>of(\"unique\", \"consistent\", \"stable\", \"mapped\");",
      "right" : "private static final Set<String> idGeneratorAnnotationKeywords =\n      ImmutableSet.<String>of(\"unique\", \"consistent\", \"stable\", \"mapped\");",
      "info" : "FieldDeclaration[3642-3781]:FieldDeclaration[3642-3781]"
    }, {
      "left" : "private Node.FileLevelJsDocBuilder fileLevelJsDocBuilder;",
      "right" : "private Node.FileLevelJsDocBuilder fileLevelJsDocBuilder;",
      "info" : "FieldDeclaration[3785-3842]:FieldDeclaration[3785-3842]"
    }, {
      "left" : "void setFileLevelJsDocBuilder(\n      Node.FileLevelJsDocBuilder fileLevelJsDocBuilder)",
      "right" : "void setFileLevelJsDocBuilder(\n      Node.FileLevelJsDocBuilder fileLevelJsDocBuilder)",
      "info" : "MethodDeclaration[3846-4224]:MethodDeclaration[3846-4224]"
    }, {
      "left" : "void setFileOverviewJSDocInfo(JSDocInfo fileOverviewJSDocInfo)",
      "right" : "void setFileOverviewJSDocInfo(JSDocInfo fileOverviewJSDocInfo)",
      "info" : "MethodDeclaration[4228-4481]:MethodDeclaration[4228-4481]"
    }, {
      "left" : "enum : State",
      "right" : "enum : State",
      "info" : "EnumDeclaration[4485-4581]:EnumDeclaration[4485-4581]"
    }, {
      "left" : "JsDocInfoParser(JsDocTokenStream stream,\n                  Comment commentNode,\n                  Node associatedNode,\n                  Config config,\n                  ErrorReporter errorReporter)",
      "right" : "JsDocInfoParser(JsDocTokenStream stream,\n                  Comment commentNode,\n                  Node associatedNode,\n                  Config config,\n                  ErrorReporter errorReporter)",
      "info" : "MethodDeclaration[4585-5474]:MethodDeclaration[4585-5474]"
    }, {
      "left" : "private String getSourceName()",
      "right" : "private String getSourceName()",
      "info" : "MethodDeclaration[5478-5575]:MethodDeclaration[5478-5575]"
    }, {
      "left" : "public JSDocInfo parseInlineTypeDoc()",
      "right" : "public JSDocInfo parseInlineTypeDoc()",
      "info" : "MethodDeclaration[5579-6121]:MethodDeclaration[5579-6121]"
    }, {
      "left" : "private void recordTypeNode(int lineno, int startCharno, Node typeAst,\n      boolean matchingLC)",
      "right" : "private void recordTypeNode(int lineno, int startCharno, Node typeAst,\n      boolean matchingLC)",
      "info" : "MethodDeclaration[6125-6452]:MethodDeclaration[6125-6452]"
    }, {
      "left" : "public static Node parseTypeString(String typeString)",
      "right" : "public static Node parseTypeString(String typeString)",
      "info" : "MethodDeclaration[6456-7072]:MethodDeclaration[6456-7072]"
    }, {
      "left" : "boolean parse()",
      "right" : "boolean parse()",
      "info" : "MethodDeclaration[7076-8130]:MethodDeclaration[7076-8130]"
    }, {
      "left" : "private boolean parseHelperLoop(JsDocToken token,\n                                  List<ExtendedTypeInfo> extendedTypes)",
      "right" : "private boolean parseHelperLoop(JsDocToken token,\n                                  List<ExtendedTypeInfo> extendedTypes)",
      "info" : "MethodDeclaration[8134-9510]:MethodDeclaration[8134-9510]"
    }, {
      "left" : "private JsDocToken parseAnnotation(JsDocToken token,\n      List<ExtendedTypeInfo> extendedTypes)",
      "right" : "private JsDocToken parseAnnotation(JsDocToken token,\n      List<ExtendedTypeInfo> extendedTypes)",
      "info" : "MethodDeclaration[9514-36995]:MethodDeclaration[9514-36995]"
    }, {
      "left" : "private JsDocToken recordDescription(JsDocToken token)",
      "right" : "private JsDocToken recordDescription(JsDocToken token)",
      "info" : "MethodDeclaration[36999-37466]:MethodDeclaration[36999-37466]"
    }, {
      "left" : "private void checkExtendedTypes(List<ExtendedTypeInfo> extendedTypes)",
      "right" : "private void checkExtendedTypes(List<ExtendedTypeInfo> extendedTypes)",
      "info" : "MethodDeclaration[37470-38108]:MethodDeclaration[37470-38108]"
    }, {
      "left" : "private JsDocToken parseSuppressTag(JsDocToken token)",
      "right" : "private JsDocToken parseSuppressTag(JsDocToken token)",
      "info" : "MethodDeclaration[38112-39490]:MethodDeclaration[38112-39490]"
    }, {
      "left" : "private JsDocToken parseModifiesTag(JsDocToken token)",
      "right" : "private JsDocToken parseModifiesTag(JsDocToken token)",
      "info" : "MethodDeclaration[39494-40905]:MethodDeclaration[39494-40905]"
    }, {
      "left" : "private JsDocToken parseIdGeneratorTag(JsDocToken token)",
      "right" : "private JsDocToken parseIdGeneratorTag(JsDocToken token)",
      "info" : "MethodDeclaration[40909-42847]:MethodDeclaration[40909-42847]"
    }, {
      "left" : "Node parseAndRecordTypeNode(JsDocToken token)",
      "right" : "Node parseAndRecordTypeNode(JsDocToken token)",
      "info" : "MethodDeclaration[42851-43256]:MethodDeclaration[42851-43256]"
    }, {
      "left" : "private Node parseAndRecordTypeNameNode(JsDocToken token, int lineno,\n                                          int startCharno, boolean matchingLC)",
      "right" : "private Node parseAndRecordTypeNameNode(JsDocToken token, int lineno,\n                                          int startCharno, boolean matchingLC)",
      "info" : "MethodDeclaration[43260-43930]:MethodDeclaration[43260-43930]"
    }, {
      "left" : "private Node parseAndRecordParamTypeNode(JsDocToken token)",
      "right" : "private Node parseAndRecordParamTypeNode(JsDocToken token)",
      "info" : "MethodDeclaration[43934-44732]:MethodDeclaration[43934-44732]"
    }, {
      "left" : "private Node parseAndRecordTypeNode(JsDocToken token, int lineno,\n                                      int startCharno,\n                                      boolean matchingLC,\n                                      boolean onlyParseSimpleNames)",
      "right" : "private Node parseAndRecordTypeNode(JsDocToken token, int lineno,\n                                      int startCharno,\n                                      boolean matchingLC,\n                                      boolean onlyParseSimpleNames)",
      "info" : "MethodDeclaration[44736-45876]:MethodDeclaration[44736-45876]"
    }, {
      "left" : "private String toString(JsDocToken token)",
      "right" : "private String toString(JsDocToken token)",
      "info" : "MethodDeclaration[45880-46822]:MethodDeclaration[45880-46822]"
    }, {
      "left" : "JSTypeExpression createJSTypeExpression(Node n)",
      "right" : "JSTypeExpression createJSTypeExpression(Node n)",
      "info" : "MethodDeclaration[46826-47054]:MethodDeclaration[46826-47054]"
    }, {
      "left" : "ExtractionInfo",
      "right" : "ExtractionInfo",
      "info" : "TypeDeclaration[47058-47435]:TypeDeclaration[47058-47435]"
    }, {
      "left" : "private final String string;",
      "right" : "private final String string;",
      "info" : "FieldDeclaration[47245-47273]:FieldDeclaration[47245-47273]"
    }, {
      "left" : "private final JsDocToken token;",
      "right" : "private final JsDocToken token;",
      "info" : "FieldDeclaration[47278-47309]:FieldDeclaration[47278-47309]"
    }, {
      "left" : "public ExtractionInfo(String string, JsDocToken token)",
      "right" : "public ExtractionInfo(String string, JsDocToken token)",
      "info" : "MethodDeclaration[47315-47431]:MethodDeclaration[47315-47431]"
    }, {
      "left" : "ExtendedTypeInfo",
      "right" : "ExtendedTypeInfo",
      "info" : "TypeDeclaration[47439-47775]:TypeDeclaration[47439-47775]"
    }, {
      "left" : "final JSTypeExpression type;",
      "right" : "final JSTypeExpression type;",
      "info" : "FieldDeclaration[47535-47563]:FieldDeclaration[47535-47563]"
    }, {
      "left" : "final int lineno;",
      "right" : "final int lineno;",
      "info" : "FieldDeclaration[47568-47585]:FieldDeclaration[47568-47585]"
    }, {
      "left" : "final int charno;",
      "right" : "final int charno;",
      "info" : "FieldDeclaration[47590-47607]:FieldDeclaration[47590-47607]"
    }, {
      "left" : "public ExtendedTypeInfo(JSTypeExpression type, int lineno, int charno)",
      "right" : "public ExtendedTypeInfo(JSTypeExpression type, int lineno, int charno)",
      "info" : "MethodDeclaration[47613-47771]:MethodDeclaration[47613-47771]"
    }, {
      "left" : "private ExtractionInfo extractSingleLineBlock()",
      "right" : "private ExtractionInfo extractSingleLineBlock()",
      "info" : "MethodDeclaration[47779-48507]:MethodDeclaration[47779-48507]"
    }, {
      "left" : "private ExtractionInfo extractMultilineTextualBlock(JsDocToken token)",
      "right" : "private ExtractionInfo extractMultilineTextualBlock(JsDocToken token)",
      "info" : "MethodDeclaration[48511-48664]:MethodDeclaration[48511-48664]"
    }, {
      "left" : "enum : WhitespaceOption",
      "right" : "enum : WhitespaceOption",
      "info" : "EnumDeclaration[48668-48994]:EnumDeclaration[48668-48994]"
    }, {
      "left" : "private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,\n                                                      WhitespaceOption option)",
      "right" : "private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,\n                                                      WhitespaceOption option)",
      "info" : "MethodDeclaration[48998-52959]:MethodDeclaration[48998-52959]"
    }, {
      "left" : "private ExtractionInfo extractBlockComment(JsDocToken token)",
      "right" : "private ExtractionInfo extractBlockComment(JsDocToken token)",
      "info" : "MethodDeclaration[52964-54454]:MethodDeclaration[52964-54454]"
    }, {
      "left" : "private static String trimEnd(String s)",
      "right" : "private static String trimEnd(String s)",
      "info" : "MethodDeclaration[54458-55220]:MethodDeclaration[54458-55220]"
    }, {
      "left" : "private Node parseTypeExpressionAnnotation(JsDocToken token)",
      "right" : "private Node parseTypeExpressionAnnotation(JsDocToken token)",
      "info" : "MethodDeclaration[55640-56202]:MethodDeclaration[55640-56202]"
    }, {
      "left" : "private Node parseParamTypeExpressionAnnotation(JsDocToken token)",
      "right" : "private Node parseParamTypeExpressionAnnotation(JsDocToken token)",
      "info" : "MethodDeclaration[56206-57381]:MethodDeclaration[56206-57381]"
    }, {
      "left" : "private Node parseTypeNameAnnotation(JsDocToken token)",
      "right" : "private Node parseTypeNameAnnotation(JsDocToken token)",
      "info" : "MethodDeclaration[57385-57886]:MethodDeclaration[57385-57886]"
    }, {
      "left" : "private Node parseTopLevelTypeExpression(JsDocToken token)",
      "right" : "private Node parseTopLevelTypeExpression(JsDocToken token)",
      "info" : "MethodDeclaration[57890-58548]:MethodDeclaration[57890-58548]"
    }, {
      "left" : "private Node parseTypeExpressionList(JsDocToken token)",
      "right" : "private Node parseTypeExpressionList(JsDocToken token)",
      "info" : "MethodDeclaration[58552-59162]:MethodDeclaration[58552-59162]"
    }, {
      "left" : "private Node parseTypeExpression(JsDocToken token)",
      "right" : "private Node parseTypeExpression(JsDocToken token)",
      "info" : "MethodDeclaration[59166-61056]:MethodDeclaration[59166-61056]"
    }, {
      "left" : "private Node parseContextTypeExpression(JsDocToken token)",
      "right" : "private Node parseContextTypeExpression(JsDocToken token)",
      "info" : "MethodDeclaration[61060-61293]:MethodDeclaration[61060-61391]"
    }, {
      "left" : "private Node parseBasicTypeExpression(JsDocToken token)",
      "right" : "private Node parseBasicTypeExpression(JsDocToken token)",
      "info" : "MethodDeclaration[61297-62295]:MethodDeclaration[61395-62393]"
    }, {
      "left" : "private Node parseTypeName(JsDocToken token)",
      "right" : "private Node parseTypeName(JsDocToken token)",
      "info" : "MethodDeclaration[62299-63365]:MethodDeclaration[62397-63463]"
    }, {
      "left" : "private Node parseFunctionType(JsDocToken token)",
      "right" : "private Node parseFunctionType(JsDocToken token)",
      "info" : "MethodDeclaration[63369-65460]:MethodDeclaration[63467-65558]"
    }, {
      "left" : "// NOTE(nicksantos): The official ES4 grammar forces optional and rest\n  // arguments to come after the required arguments. Our parser does not\n  // enforce this. Instead we allow them anywhere in the function at parse-time,\n  // and then warn about them during type resolution.\n  //\n  // In theory, it might be mathematically nicer to do the order-checking here.\n  // But in practice, the order-checking for structural functions is exactly\n  // the same as the order-checking for @param annotations. And the latter\n  // has to happen during type resolution. Rather than duplicate the\n  // order-checking in two places, we just do all of it in type resolution.\n  private Node parseParametersType(JsDocToken token)",
      "right" : "// NOTE(nicksantos): The official ES4 grammar forces optional and rest\n  // arguments to come after the required arguments. Our parser does not\n  // enforce this. Instead we allow them anywhere in the function at parse-time,\n  // and then warn about them during type resolution.\n  //\n  // In theory, it might be mathematically nicer to do the order-checking here.\n  // But in practice, the order-checking for structural functions is exactly\n  // the same as the order-checking for @param annotations. And the latter\n  // has to happen during type resolution. Rather than duplicate the\n  // order-checking in two places, we just do all of it in type resolution.\n  private Node parseParametersType(JsDocToken token)",
      "info" : "MethodDeclaration[65464-68559]:MethodDeclaration[65562-68657]"
    }, {
      "left" : "private Node parseResultType(JsDocToken token)",
      "right" : "private Node parseResultType(JsDocToken token)",
      "info" : "MethodDeclaration[68563-68998]:MethodDeclaration[68661-69096]"
    }, {
      "left" : "private Node parseUnionType(JsDocToken token)",
      "right" : "private Node parseUnionType(JsDocToken token)",
      "info" : "MethodDeclaration[69002-69276]:MethodDeclaration[69100-69374]"
    }, {
      "left" : "private Node parseUnionTypeWithAlternate(JsDocToken token, Node alternate)",
      "right" : "private Node parseUnionTypeWithAlternate(JsDocToken token, Node alternate)",
      "info" : "MethodDeclaration[69280-70480]:MethodDeclaration[69378-70578]"
    }, {
      "left" : "private Node parseArrayType(JsDocToken token)",
      "right" : "private Node parseArrayType(JsDocToken token)",
      "info" : "MethodDeclaration[70484-71427]:MethodDeclaration[70582-71525]"
    }, {
      "left" : "private Node parseRecordType(JsDocToken token)",
      "right" : "private Node parseRecordType(JsDocToken token)",
      "info" : "MethodDeclaration[71431-71917]:MethodDeclaration[71529-72015]"
    }, {
      "left" : "private Node parseFieldTypeList(JsDocToken token)",
      "right" : "private Node parseFieldTypeList(JsDocToken token)",
      "info" : "MethodDeclaration[71921-72521]:MethodDeclaration[72019-72619]"
    }, {
      "left" : "private Node parseFieldType(JsDocToken token)",
      "right" : "private Node parseFieldType(JsDocToken token)",
      "info" : "MethodDeclaration[72525-73232]:MethodDeclaration[72623-73330]"
    }, {
      "left" : "private Node parseFieldName(JsDocToken token)",
      "right" : "private Node parseFieldName(JsDocToken token)",
      "info" : "MethodDeclaration[73236-73555]:MethodDeclaration[73334-73653]"
    }, {
      "left" : "private Node wrapNode(int type, Node n)",
      "right" : "private Node wrapNode(int type, Node n)",
      "info" : "MethodDeclaration[73559-73742]:MethodDeclaration[73657-73840]"
    }, {
      "left" : "private Node newNode(int type)",
      "right" : "private Node newNode(int type)",
      "info" : "MethodDeclaration[73746-73886]:MethodDeclaration[73844-73984]"
    }, {
      "left" : "private Node newStringNode(String s)",
      "right" : "private Node newStringNode(String s)",
      "info" : "MethodDeclaration[73890-74001]:MethodDeclaration[73988-74099]"
    }, {
      "left" : "private Node newStringNode(String s, int lineno, int charno)",
      "right" : "private Node newStringNode(String s, int lineno, int charno)",
      "info" : "MethodDeclaration[74005-74191]:MethodDeclaration[74103-74289]"
    }, {
      "left" : "private Node createTemplateNode()",
      "right" : "private Node createTemplateNode()",
      "info" : "MethodDeclaration[74313-74593]:MethodDeclaration[74411-74691]"
    }, {
      "left" : "private Node reportTypeSyntaxWarning(String warning)",
      "right" : "private Node reportTypeSyntaxWarning(String warning)",
      "info" : "MethodDeclaration[74597-74748]:MethodDeclaration[74695-74846]"
    }, {
      "left" : "private Node reportGenericTypeSyntaxWarning()",
      "right" : "private Node reportGenericTypeSyntaxWarning()",
      "info" : "MethodDeclaration[74752-74864]:MethodDeclaration[74850-74962]"
    }, {
      "left" : "private JsDocToken eatUntilEOLIfNotAnnotation()",
      "right" : "private JsDocToken eatUntilEOLIfNotAnnotation()",
      "info" : "MethodDeclaration[74868-74968]:MethodDeclaration[74966-75066]"
    }, {
      "left" : "private JsDocToken eatUntilEOLIfNotAnnotation(JsDocToken token)",
      "right" : "private JsDocToken eatUntilEOLIfNotAnnotation(JsDocToken token)",
      "info" : "MethodDeclaration[74972-75188]:MethodDeclaration[75070-75286]"
    }, {
      "left" : "private JsDocToken eatTokensUntilEOL()",
      "right" : "private JsDocToken eatTokensUntilEOL()",
      "info" : "MethodDeclaration[75192-75414]:MethodDeclaration[75290-75512]"
    }, {
      "left" : "private JsDocToken eatTokensUntilEOL(JsDocToken token)",
      "right" : "private JsDocToken eatTokensUntilEOL(JsDocToken token)",
      "info" : "MethodDeclaration[75418-75844]:MethodDeclaration[75516-75942]"
    }, {
      "left" : "private static final JsDocToken NO_UNREAD_TOKEN = null;",
      "right" : "private static final JsDocToken NO_UNREAD_TOKEN = null;",
      "info" : "FieldDeclaration[75848-75995]:FieldDeclaration[75946-76093]"
    }, {
      "left" : "private JsDocToken unreadToken = NO_UNREAD_TOKEN;",
      "right" : "private JsDocToken unreadToken = NO_UNREAD_TOKEN;",
      "info" : "FieldDeclaration[75999-76083]:FieldDeclaration[76097-76181]"
    }, {
      "left" : "private void restoreLookAhead(JsDocToken token)",
      "right" : "private void restoreLookAhead(JsDocToken token)",
      "info" : "MethodDeclaration[76087-76223]:MethodDeclaration[76185-76321]"
    }, {
      "left" : "private boolean match(JsDocToken token)",
      "right" : "private boolean match(JsDocToken token)",
      "info" : "MethodDeclaration[76227-76431]:MethodDeclaration[76325-76529]"
    }, {
      "left" : "private boolean match(JsDocToken token1, JsDocToken token2)",
      "right" : "private boolean match(JsDocToken token1, JsDocToken token2)",
      "info" : "MethodDeclaration[76435-76691]:MethodDeclaration[76533-76789]"
    }, {
      "left" : "private JsDocToken next()",
      "right" : "private JsDocToken next()",
      "info" : "MethodDeclaration[76695-76967]:MethodDeclaration[76793-77065]"
    }, {
      "left" : "private JsDocToken current()",
      "right" : "private JsDocToken current()",
      "info" : "MethodDeclaration[76971-77159]:MethodDeclaration[77069-77257]"
    }, {
      "left" : "private void skipEOLs()",
      "right" : "private void skipEOLs()",
      "info" : "MethodDeclaration[77163-77448]:MethodDeclaration[77261-77546]"
    }, {
      "left" : "private String getRemainingJSDocLine()",
      "right" : "private String getRemainingJSDocLine()",
      "info" : "MethodDeclaration[77452-77654]:MethodDeclaration[77550-77752]"
    }, {
      "left" : "private boolean hasParsedFileOverviewDocInfo()",
      "right" : "private boolean hasParsedFileOverviewDocInfo()",
      "info" : "MethodDeclaration[77658-77874]:MethodDeclaration[77756-77972]"
    }, {
      "left" : "boolean hasParsedJSDocInfo()",
      "right" : "boolean hasParsedJSDocInfo()",
      "info" : "MethodDeclaration[77878-77951]:MethodDeclaration[77976-78049]"
    }, {
      "left" : "JSDocInfo retrieveAndResetParsedJSDocInfo()",
      "right" : "JSDocInfo retrieveAndResetParsedJSDocInfo()",
      "info" : "MethodDeclaration[77955-78051]:MethodDeclaration[78053-78149]"
    }, {
      "left" : "JSDocInfo getFileOverviewJSDocInfo()",
      "right" : "JSDocInfo getFileOverviewJSDocInfo()",
      "info" : "MethodDeclaration[78055-78189]:MethodDeclaration[78153-78287]"
    }, {
      "left" : "private boolean lookAheadForType()",
      "right" : "private boolean lookAheadForType()",
      "info" : "MethodDeclaration[78193-78613]:MethodDeclaration[78291-78711]"
    }, {
      "left" : "private boolean lookAheadForAnnotation()",
      "right" : "private boolean lookAheadForAnnotation()",
      "info" : "MethodDeclaration[78617-78693]:MethodDeclaration[78715-78791]"
    }, {
      "left" : "private boolean lookAheadFor(char expect)",
      "right" : "private boolean lookAheadFor(char expect)",
      "info" : "MethodDeclaration[78697-79173]:MethodDeclaration[78795-79271]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2388-2540]:Block[2388-2540]"
    }, {
      "left" : "errorReporter.warning(\n          SimpleErrorReporter.getMessage1(messageId, messageArg),\n          getSourceName(), lineno, null, charno);",
      "right" : "errorReporter.warning(\n          SimpleErrorReporter.getMessage1(messageId, messageArg),\n          getSourceName(), lineno, null, charno);",
      "info" : "ExpressionStatement[2396-2534]:ExpressionStatement[2396-2534]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2610-2739]:Block[2610-2739]"
    }, {
      "left" : "errorReporter.warning(SimpleErrorReporter.getMessage0(messageId),\n          getSourceName(), lineno, null, charno);",
      "right" : "errorReporter.warning(SimpleErrorReporter.getMessage0(messageId),\n          getSourceName(), lineno, null, charno);",
      "info" : "ExpressionStatement[2618-2733]:ExpressionStatement[2618-2733]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2846-3034]:Block[2846-3034]"
    }, {
      "left" : "errorReporter.warning(\n          \"Bad type annotation. \" +\n          SimpleErrorReporter.getMessage1(messageId, messageArg),\n          getSourceName(), lineno, null, charno);",
      "right" : "errorReporter.warning(\n          \"Bad type annotation. \" +\n          SimpleErrorReporter.getMessage1(messageId, messageArg),\n          getSourceName(), lineno, null, charno);",
      "info" : "ExpressionStatement[2854-3028]:ExpressionStatement[2854-3028]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3102-3278]:Block[3102-3278]"
    }, {
      "left" : "errorReporter.warning(\n          \"Bad type annotation. \" +\n          SimpleErrorReporter.getMessage0(messageId),\n          getSourceName(), lineno, null, charno);",
      "right" : "errorReporter.warning(\n          \"Bad type annotation. \" +\n          SimpleErrorReporter.getMessage0(messageId),\n          getSourceName(), lineno, null, charno);",
      "info" : "ExpressionStatement[3110-3272]:ExpressionStatement[3110-3272]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4163-4224]:Block[4163-4224]"
    }, {
      "left" : "this.fileLevelJsDocBuilder = fileLevelJsDocBuilder;",
      "right" : "this.fileLevelJsDocBuilder = fileLevelJsDocBuilder;",
      "info" : "ExpressionStatement[4169-4220]:ExpressionStatement[4169-4220]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4420-4481]:Block[4420-4481]"
    }, {
      "left" : "this.fileOverviewJSDocInfo = fileOverviewJSDocInfo;",
      "right" : "this.fileOverviewJSDocInfo = fileOverviewJSDocInfo;",
      "info" : "ExpressionStatement[4426-4477]:ExpressionStatement[4426-4477]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4784-5474]:Block[4784-5474]"
    }, {
      "left" : "this.stream = stream;",
      "right" : "this.stream = stream;",
      "info" : "ExpressionStatement[4790-4811]:ExpressionStatement[4790-4811]"
    }, {
      "left" : "this.associatedNode = associatedNode;",
      "right" : "this.associatedNode = associatedNode;",
      "info" : "ExpressionStatement[4816-4853]:ExpressionStatement[4816-4853]"
    }, {
      "left" : "this.sourceFile = associatedNode == null\n        ? null : associatedNode.getStaticSourceFile();",
      "right" : "this.sourceFile = associatedNode == null\n        ? null : associatedNode.getStaticSourceFile();",
      "info" : "ExpressionStatement[4904-4999]:ExpressionStatement[4904-4999]"
    }, {
      "left" : "this.jsdocBuilder = new JSDocInfoBuilder(config.parseJsDocDocumentation);",
      "right" : "this.jsdocBuilder = new JSDocInfoBuilder(config.parseJsDocDocumentation);",
      "info" : "ExpressionStatement[5005-5078]:ExpressionStatement[5005-5078]"
    }, {
      "left" : "if (commentNode != null)",
      "right" : "if (commentNode != null)",
      "info" : "IfStatement[5083-5274]:IfStatement[5083-5274]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5108-5274]:Block[5108-5274]"
    }, {
      "left" : "this.jsdocBuilder.recordOriginalCommentString(commentNode.getValue());",
      "right" : "this.jsdocBuilder.recordOriginalCommentString(commentNode.getValue());",
      "info" : "ExpressionStatement[5116-5186]:ExpressionStatement[5116-5186]"
    }, {
      "left" : "this.jsdocBuilder.recordOriginalCommentPosition(commentNode.getPosition());",
      "right" : "this.jsdocBuilder.recordOriginalCommentPosition(commentNode.getPosition());",
      "info" : "ExpressionStatement[5193-5268]:ExpressionStatement[5193-5268]"
    }, {
      "left" : "this.annotationNames = config.annotationNames;",
      "right" : "this.annotationNames = config.annotationNames;",
      "info" : "ExpressionStatement[5279-5325]:ExpressionStatement[5279-5325]"
    }, {
      "left" : "this.suppressionNames = config.suppressionNames;",
      "right" : "this.suppressionNames = config.suppressionNames;",
      "info" : "ExpressionStatement[5330-5378]:ExpressionStatement[5330-5378]"
    }, {
      "left" : "this.errorReporter = errorReporter;",
      "right" : "this.errorReporter = errorReporter;",
      "info" : "ExpressionStatement[5384-5419]:ExpressionStatement[5384-5419]"
    }, {
      "left" : "this.templateNode = this.createTemplateNode();",
      "right" : "this.templateNode = this.createTemplateNode();",
      "info" : "ExpressionStatement[5424-5470]:ExpressionStatement[5424-5470]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5509-5575]:Block[5509-5575]"
    }, {
      "left" : "return sourceFile == null ? null : sourceFile.getName();",
      "right" : "return sourceFile == null ? null : sourceFile.getName();",
      "info" : "ReturnStatement[5515-5571]:ReturnStatement[5515-5571]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5674-6121]:Block[5674-6121]"
    }, {
      "left" : "skipEOLs();",
      "right" : "skipEOLs();",
      "info" : "ExpressionStatement[5680-5691]:ExpressionStatement[5680-5691]"
    }, {
      "left" : "JsDocToken token = next();",
      "right" : "JsDocToken token = next();",
      "info" : "VariableDeclarationStatement[5697-5723]:VariableDeclarationStatement[5697-5723]"
    }, {
      "left" : "int lineno = stream.getLineno();",
      "right" : "int lineno = stream.getLineno();",
      "info" : "VariableDeclarationStatement[5728-5760]:VariableDeclarationStatement[5728-5760]"
    }, {
      "left" : "int startCharno = stream.getCharno();",
      "right" : "int startCharno = stream.getCharno();",
      "info" : "VariableDeclarationStatement[5765-5802]:VariableDeclarationStatement[5765-5802]"
    }, {
      "left" : "Node typeAst = parseTypeExpression(token);",
      "right" : "Node typeAst = parseTypeExpression(token);",
      "info" : "VariableDeclarationStatement[5807-5849]:VariableDeclarationStatement[5807-5849]"
    }, {
      "left" : "recordTypeNode(lineno, startCharno, typeAst, token == JsDocToken.LC);",
      "right" : "recordTypeNode(lineno, startCharno, typeAst, token == JsDocToken.LC);",
      "info" : "ExpressionStatement[5854-5923]:ExpressionStatement[5854-5923]"
    }, {
      "left" : "JSTypeExpression expr = createJSTypeExpression(typeAst);",
      "right" : "JSTypeExpression expr = createJSTypeExpression(typeAst);",
      "info" : "VariableDeclarationStatement[5929-5985]:VariableDeclarationStatement[5929-5985]"
    }, {
      "left" : "if (expr != null)",
      "right" : "if (expr != null)",
      "info" : "IfStatement[5990-6100]:IfStatement[5990-6100]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6008-6100]:Block[6008-6100]"
    }, {
      "left" : "jsdocBuilder.recordType(expr);",
      "right" : "jsdocBuilder.recordType(expr);",
      "info" : "ExpressionStatement[6016-6046]:ExpressionStatement[6016-6046]"
    }, {
      "left" : "return retrieveAndResetParsedJSDocInfo();",
      "right" : "return retrieveAndResetParsedJSDocInfo();",
      "info" : "ReturnStatement[6053-6094]:ReturnStatement[6053-6094]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[6105-6117]:ReturnStatement[6105-6117]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6222-6452]:Block[6222-6452]"
    }, {
      "left" : "if (typeAst != null)",
      "right" : "if (typeAst != null)",
      "info" : "IfStatement[6228-6448]:IfStatement[6228-6448]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6249-6448]:Block[6249-6448]"
    }, {
      "left" : "int endLineno = stream.getLineno();",
      "right" : "int endLineno = stream.getLineno();",
      "info" : "VariableDeclarationStatement[6257-6292]:VariableDeclarationStatement[6257-6292]"
    }, {
      "left" : "int endCharno = stream.getCharno();",
      "right" : "int endCharno = stream.getCharno();",
      "info" : "VariableDeclarationStatement[6299-6334]:VariableDeclarationStatement[6299-6334]"
    }, {
      "left" : "jsdocBuilder.markTypeNode(\n          typeAst, lineno, startCharno, endLineno, endCharno, matchingLC);",
      "right" : "jsdocBuilder.markTypeNode(\n          typeAst, lineno, startCharno, endLineno, endCharno, matchingLC);",
      "info" : "ExpressionStatement[6341-6442]:ExpressionStatement[6341-6442]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6659-7072]:Block[6659-7072]"
    }, {
      "left" : "Config config = new Config(\n        Sets.<String>newHashSet(),\n        Sets.<String>newHashSet(),\n        false,\n        LanguageMode.ECMASCRIPT3,\n        false);",
      "right" : "Config config = new Config(\n        Sets.<String>newHashSet(),\n        Sets.<String>newHashSet(),\n        false,\n        LanguageMode.ECMASCRIPT3,\n        false);",
      "info" : "VariableDeclarationStatement[6665-6827]:VariableDeclarationStatement[6665-6827]"
    }, {
      "left" : "JsDocInfoParser parser = new JsDocInfoParser(\n        new JsDocTokenStream(typeString),\n        null,\n        null,\n        config,\n        NullErrorReporter.forNewRhino());",
      "right" : "JsDocInfoParser parser = new JsDocInfoParser(\n        new JsDocTokenStream(typeString),\n        null,\n        null,\n        config,\n        NullErrorReporter.forNewRhino());",
      "info" : "VariableDeclarationStatement[6832-7005]:VariableDeclarationStatement[6832-7005]"
    }, {
      "left" : "return parser.parseTopLevelTypeExpression(parser.next());",
      "right" : "return parser.parseTopLevelTypeExpression(parser.next());",
      "info" : "ReturnStatement[7011-7068]:ReturnStatement[7011-7068]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7408-8130]:Block[7408-8130]"
    }, {
      "left" : "state = State.SEARCHING_ANNOTATION;",
      "right" : "state = State.SEARCHING_ANNOTATION;",
      "info" : "ExpressionStatement[7414-7449]:ExpressionStatement[7414-7449]"
    }, {
      "left" : "skipEOLs();",
      "right" : "skipEOLs();",
      "info" : "ExpressionStatement[7454-7465]:ExpressionStatement[7454-7465]"
    }, {
      "left" : "JsDocToken token = next();",
      "right" : "JsDocToken token = next();",
      "info" : "VariableDeclarationStatement[7471-7497]:VariableDeclarationStatement[7471-7497]"
    }, {
      "left" : "if (jsdocBuilder.shouldParseDocumentation())",
      "right" : "if (jsdocBuilder.shouldParseDocumentation())",
      "info" : "IfStatement[7548-8050]:IfStatement[7548-8050]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7593-7804]:Block[7593-7804]"
    }, {
      "left" : "ExtractionInfo blockInfo = extractBlockComment(token);",
      "right" : "ExtractionInfo blockInfo = extractBlockComment(token);",
      "info" : "VariableDeclarationStatement[7601-7655]:VariableDeclarationStatement[7601-7655]"
    }, {
      "left" : "token = blockInfo.token;",
      "right" : "token = blockInfo.token;",
      "info" : "ExpressionStatement[7662-7686]:ExpressionStatement[7662-7686]"
    }, {
      "left" : "if (!blockInfo.string.isEmpty())",
      "right" : "if (!blockInfo.string.isEmpty())",
      "info" : "IfStatement[7693-7798]:IfStatement[7693-7798]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7726-7798]:Block[7726-7798]"
    }, {
      "left" : "jsdocBuilder.recordBlockDescription(blockInfo.string);",
      "right" : "jsdocBuilder.recordBlockDescription(blockInfo.string);",
      "info" : "ExpressionStatement[7736-7790]:ExpressionStatement[7736-7790]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7810-8050]:Block[7810-8050]"
    }, {
      "left" : "if (token != JsDocToken.ANNOTATION &&\n          token != JsDocToken.EOC)",
      "right" : "if (token != JsDocToken.ANNOTATION &&\n          token != JsDocToken.EOC)",
      "info" : "IfStatement[7818-8044]:IfStatement[7818-8044]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7891-8044]:Block[7891-8044]"
    }, {
      "left" : "jsdocBuilder.recordBlockDescription(\"\");",
      "right" : "jsdocBuilder.recordBlockDescription(\"\");",
      "info" : "ExpressionStatement[7996-8036]:ExpressionStatement[7996-8036]"
    }, {
      "left" : "return parseHelperLoop(token, Lists.<ExtendedTypeInfo>newArrayList());",
      "right" : "return parseHelperLoop(token, Lists.<ExtendedTypeInfo>newArrayList());",
      "info" : "ReturnStatement[8056-8126]:ReturnStatement[8056-8126]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8256-9510]:Block[8256-9510]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[8262-9506]:WhileStatement[8262-9506]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8275-9506]:Block[8275-9506]"
    }, {
      "left" : "switch (token) {\n        case ANNOTATION:\n          if (state == State.SEARCHING_ANNOTATION) {\n            state = State.SEARCHING_NEWLINE;\n            token = parseAnnotation(token, extendedTypes);\n          } else {\n            token = next();\n          }\n          break;\n\n        case EOC:\n          if (hasParsedFileOverviewDocInfo()) {\n            fileOverviewJSDocInfo = retrieveAndResetParsedJSDocInfo();\n          }\n          checkExtendedTypes(extendedTypes);\n          return true;\n\n        case EOF:\n          // discard any accumulated information\n          jsdocBuilder.build(null);\n          parser.addParserWarning(\"msg.unexpected.eof\",\n              stream.getLineno(), stream.getCharno());\n          checkExtendedTypes(extendedTypes);\n          return false;\n\n        case EOL:\n          if (state == State.SEARCHING_NEWLINE) {\n            state = State.SEARCHING_ANNOTATION;\n          }\n          token = next();\n          break;\n\n        default:\n          if (token == JsDocToken.STAR && state == State.SEARCHING_ANNOTATION) {\n            token = next();\n          } else {\n            state = State.SEARCHING_NEWLINE;\n            token = eatTokensUntilEOL();\n          }\n          break;\n      }",
      "right" : "switch (token) {\n        case ANNOTATION:\n          if (state == State.SEARCHING_ANNOTATION) {\n            state = State.SEARCHING_NEWLINE;\n            token = parseAnnotation(token, extendedTypes);\n          } else {\n            token = next();\n          }\n          break;\n\n        case EOC:\n          if (hasParsedFileOverviewDocInfo()) {\n            fileOverviewJSDocInfo = retrieveAndResetParsedJSDocInfo();\n          }\n          checkExtendedTypes(extendedTypes);\n          return true;\n\n        case EOF:\n          // discard any accumulated information\n          jsdocBuilder.build(null);\n          parser.addParserWarning(\"msg.unexpected.eof\",\n              stream.getLineno(), stream.getCharno());\n          checkExtendedTypes(extendedTypes);\n          return false;\n\n        case EOL:\n          if (state == State.SEARCHING_NEWLINE) {\n            state = State.SEARCHING_ANNOTATION;\n          }\n          token = next();\n          break;\n\n        default:\n          if (token == JsDocToken.STAR && state == State.SEARCHING_ANNOTATION) {\n            token = next();\n          } else {\n            state = State.SEARCHING_NEWLINE;\n            token = eatTokensUntilEOL();\n          }\n          break;\n      }",
      "info" : "SwitchStatement[8283-9500]:SwitchStatement[8283-9500]"
    }, {
      "left" : "case ANNOTATION:",
      "right" : "case ANNOTATION:",
      "info" : "SwitchCase[8308-8324]:SwitchCase[8308-8324]"
    }, {
      "left" : "if (state == State.SEARCHING_ANNOTATION)",
      "right" : "if (state == State.SEARCHING_ANNOTATION)",
      "info" : "IfStatement[8335-8540]:IfStatement[8335-8540]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8376-8493]:Block[8376-8493]"
    }, {
      "left" : "state = State.SEARCHING_NEWLINE;",
      "right" : "state = State.SEARCHING_NEWLINE;",
      "info" : "ExpressionStatement[8390-8422]:ExpressionStatement[8390-8422]"
    }, {
      "left" : "token = parseAnnotation(token, extendedTypes);",
      "right" : "token = parseAnnotation(token, extendedTypes);",
      "info" : "ExpressionStatement[8435-8481]:ExpressionStatement[8435-8481]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8499-8540]:Block[8499-8540]"
    }, {
      "left" : "token = next();",
      "right" : "token = next();",
      "info" : "ExpressionStatement[8513-8528]:ExpressionStatement[8513-8528]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[8551-8557]:BreakStatement[8551-8557]"
    }, {
      "left" : "case EOC:",
      "right" : "case EOC:",
      "info" : "SwitchCase[8567-8576]:SwitchCase[8567-8576]"
    }, {
      "left" : "if (hasParsedFileOverviewDocInfo())",
      "right" : "if (hasParsedFileOverviewDocInfo())",
      "info" : "IfStatement[8587-8707]:IfStatement[8587-8707]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8623-8707]:Block[8623-8707]"
    }, {
      "left" : "fileOverviewJSDocInfo = retrieveAndResetParsedJSDocInfo();",
      "right" : "fileOverviewJSDocInfo = retrieveAndResetParsedJSDocInfo();",
      "info" : "ExpressionStatement[8637-8695]:ExpressionStatement[8637-8695]"
    }, {
      "left" : "checkExtendedTypes(extendedTypes);",
      "right" : "checkExtendedTypes(extendedTypes);",
      "info" : "ExpressionStatement[8718-8752]:ExpressionStatement[8718-8752]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[8763-8775]:ReturnStatement[8763-8775]"
    }, {
      "left" : "case EOF:",
      "right" : "case EOF:",
      "info" : "SwitchCase[8785-8794]:SwitchCase[8785-8794]"
    }, {
      "left" : "jsdocBuilder.build(null);",
      "right" : "jsdocBuilder.build(null);",
      "info" : "ExpressionStatement[8854-8879]:ExpressionStatement[8854-8879]"
    }, {
      "left" : "parser.addParserWarning(\"msg.unexpected.eof\",\n              stream.getLineno(), stream.getCharno());",
      "right" : "parser.addParserWarning(\"msg.unexpected.eof\",\n              stream.getLineno(), stream.getCharno());",
      "info" : "ExpressionStatement[8890-8990]:ExpressionStatement[8890-8990]"
    }, {
      "left" : "checkExtendedTypes(extendedTypes);",
      "right" : "checkExtendedTypes(extendedTypes);",
      "info" : "ExpressionStatement[9001-9035]:ExpressionStatement[9001-9035]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[9046-9059]:ReturnStatement[9046-9059]"
    }, {
      "left" : "case EOL:",
      "right" : "case EOL:",
      "info" : "SwitchCase[9069-9078]:SwitchCase[9069-9078]"
    }, {
      "left" : "if (state == State.SEARCHING_NEWLINE)",
      "right" : "if (state == State.SEARCHING_NEWLINE)",
      "info" : "IfStatement[9089-9188]:IfStatement[9089-9188]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9127-9188]:Block[9127-9188]"
    }, {
      "left" : "state = State.SEARCHING_ANNOTATION;",
      "right" : "state = State.SEARCHING_ANNOTATION;",
      "info" : "ExpressionStatement[9141-9176]:ExpressionStatement[9141-9176]"
    }, {
      "left" : "token = next();",
      "right" : "token = next();",
      "info" : "ExpressionStatement[9199-9214]:ExpressionStatement[9199-9214]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[9225-9231]:BreakStatement[9225-9231]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[9241-9249]:SwitchCase[9241-9249]"
    }, {
      "left" : "if (token == JsDocToken.STAR && state == State.SEARCHING_ANNOTATION)",
      "right" : "if (token == JsDocToken.STAR && state == State.SEARCHING_ANNOTATION)",
      "info" : "IfStatement[9260-9475]:IfStatement[9260-9475]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9329-9370]:Block[9329-9370]"
    }, {
      "left" : "token = next();",
      "right" : "token = next();",
      "info" : "ExpressionStatement[9343-9358]:ExpressionStatement[9343-9358]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9376-9475]:Block[9376-9475]"
    }, {
      "left" : "state = State.SEARCHING_NEWLINE;",
      "right" : "state = State.SEARCHING_NEWLINE;",
      "info" : "ExpressionStatement[9390-9422]:ExpressionStatement[9390-9422]"
    }, {
      "left" : "token = eatTokensUntilEOL();",
      "right" : "token = eatTokensUntilEOL();",
      "info" : "ExpressionStatement[9435-9463]:ExpressionStatement[9435-9463]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[9486-9492]:BreakStatement[9486-9492]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9611-36995]:Block[9611-36995]"
    }, {
      "left" : "JSTypeExpression type;",
      "right" : "JSTypeExpression type;",
      "info" : "VariableDeclarationStatement[9693-9715]:VariableDeclarationStatement[9693-9715]"
    }, {
      "left" : "int lineno = stream.getLineno();",
      "right" : "int lineno = stream.getLineno();",
      "info" : "VariableDeclarationStatement[9720-9752]:VariableDeclarationStatement[9720-9752]"
    }, {
      "left" : "int charno = stream.getCharno();",
      "right" : "int charno = stream.getCharno();",
      "info" : "VariableDeclarationStatement[9757-9789]:VariableDeclarationStatement[9757-9789]"
    }, {
      "left" : "String annotationName = stream.getString();",
      "right" : "String annotationName = stream.getString();",
      "info" : "VariableDeclarationStatement[9795-9838]:VariableDeclarationStatement[9795-9838]"
    }, {
      "left" : "Annotation annotation = annotationNames.get(annotationName);",
      "right" : "Annotation annotation = annotationNames.get(annotationName);",
      "info" : "VariableDeclarationStatement[9843-9903]:VariableDeclarationStatement[9843-9903]"
    }, {
      "left" : "if (annotation == null)",
      "right" : "if (annotation == null)",
      "info" : "IfStatement[9908-36971]:IfStatement[9908-36971]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9932-10057]:Block[9932-10057]"
    }, {
      "left" : "parser.addParserWarning(\"msg.bad.jsdoc.tag\", annotationName,\n          stream.getLineno(), stream.getCharno());",
      "right" : "parser.addParserWarning(\"msg.bad.jsdoc.tag\", annotationName,\n          stream.getLineno(), stream.getCharno());",
      "info" : "ExpressionStatement[9940-10051]:ExpressionStatement[9940-10051]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10063-36971]:Block[10063-36971]"
    }, {
      "left" : "jsdocBuilder.markAnnotation(annotationName, lineno, charno);",
      "right" : "jsdocBuilder.markAnnotation(annotationName, lineno, charno);",
      "info" : "ExpressionStatement[10118-10178]:ExpressionStatement[10118-10178]"
    }, {
      "left" : "switch (annotation) {\n        case NG_INJECT:\n          if (jsdocBuilder.isNgInjectRecorded()) {\n            parser.addParserWarning(\"msg.jsdoc.nginject.extra\",\n              stream.getLineno(), stream.getCharno());\n          } else {\n            jsdocBuilder.recordNgInject(true);\n          }\n          return eatUntilEOLIfNotAnnotation();\n\n        case JAGGER_INJECT:\n          if (jsdocBuilder.isJaggerInjectRecorded()) {\n            parser.addParserWarning(\"msg.jsdoc.jaggerInject.extra\",\n              stream.getLineno(), stream.getCharno());\n          } else {\n            jsdocBuilder.recordJaggerInject(true);\n          }\n          return eatUntilEOLIfNotAnnotation();\n\n        case JAGGER_MODULE:\n          if (jsdocBuilder.isJaggerModuleRecorded()) {\n            parser.addParserWarning(\"msg.jsdoc.jaggerModule.extra\",\n              stream.getLineno(), stream.getCharno());\n          } else {\n            jsdocBuilder.recordJaggerModule(true);\n          }\n          return eatUntilEOLIfNotAnnotation();\n\n        case JAGGER_PROVIDE:\n          if (jsdocBuilder.isJaggerProvideRecorded()) {\n            parser.addParserWarning(\"msg.jsdoc.jaggerProvide.extra\",\n              stream.getLineno(), stream.getCharno());\n          } else {\n            jsdocBuilder.recordJaggerProvide(true);\n          }\n          return eatUntilEOLIfNotAnnotation();\n\n        case AUTHOR:\n          if (jsdocBuilder.shouldParseDocumentation()) {\n            ExtractionInfo authorInfo = extractSingleLineBlock();\n            String author = authorInfo.string;\n\n            if (author.length() == 0) {\n              parser.addParserWarning(\"msg.jsdoc.authormissing\",\n                  stream.getLineno(), stream.getCharno());\n            } else {\n              jsdocBuilder.addAuthor(author);\n            }\n            token = authorInfo.token;\n          } else {\n            token = eatUntilEOLIfNotAnnotation();\n          }\n          return token;\n\n        case CONSISTENTIDGENERATOR:\n          if (!jsdocBuilder.recordConsistentIdGenerator()) {\n            parser.addParserWarning(\"msg.jsdoc.consistidgen\",\n              stream.getLineno(), stream.getCharno());\n          }\n          return eatUntilEOLIfNotAnnotation();\n\n        case STRUCT:\n          if (!jsdocBuilder.recordStruct()) {\n            parser.addTypeWarning(\"msg.jsdoc.incompat.type\",\n                                  stream.getLineno(),\n                                  stream.getCharno());\n          }\n          return eatUntilEOLIfNotAnnotation();\n\n        case DICT:\n          if (!jsdocBuilder.recordDict()) {\n            parser.addTypeWarning(\"msg.jsdoc.incompat.type\",\n                                  stream.getLineno(),\n                                  stream.getCharno());\n          }\n          return eatUntilEOLIfNotAnnotation();\n\n        case CONSTRUCTOR:\n          if (!jsdocBuilder.recordConstructor()) {\n            if (jsdocBuilder.isInterfaceRecorded()) {\n              parser.addTypeWarning(\"msg.jsdoc.interface.constructor\",\n                  stream.getLineno(), stream.getCharno());\n            } else {\n              parser.addTypeWarning(\"msg.jsdoc.incompat.type\",\n                  stream.getLineno(), stream.getCharno());\n            }\n          }\n          return eatUntilEOLIfNotAnnotation();\n\n        case DEPRECATED:\n          if (!jsdocBuilder.recordDeprecated()) {\n            parser.addParserWarning(\"msg.jsdoc.deprecated\",\n                stream.getLineno(), stream.getCharno());\n          }\n\n          // Find the reason/description, if any.\n          ExtractionInfo reasonInfo =\n              extractMultilineTextualBlock(token);\n\n          String reason = reasonInfo.string;\n\n          if (reason.length() > 0) {\n            jsdocBuilder.recordDeprecationReason(reason);\n          }\n\n          token = reasonInfo.token;\n          return token;\n\n        case INTERFACE:\n          if (!jsdocBuilder.recordInterface()) {\n            if (jsdocBuilder.isConstructorRecorded()) {\n              parser.addTypeWarning(\"msg.jsdoc.interface.constructor\",\n                  stream.getLineno(), stream.getCharno());\n            } else {\n              parser.addTypeWarning(\"msg.jsdoc.incompat.type\",\n                  stream.getLineno(), stream.getCharno());\n            }\n          }\n          return eatUntilEOLIfNotAnnotation();\n\n        case DESC:\n          if (jsdocBuilder.isDescriptionRecorded()) {\n            parser.addParserWarning(\"msg.jsdoc.desc.extra\",\n                stream.getLineno(), stream.getCharno());\n            return eatUntilEOLIfNotAnnotation();\n          } else {\n            ExtractionInfo descriptionInfo =\n                extractMultilineTextualBlock(token);\n\n            String description = descriptionInfo.string;\n\n            jsdocBuilder.recordDescription(description);\n            token = descriptionInfo.token;\n            return token;\n          }\n\n        case FILE_OVERVIEW:\n          String fileOverview = \"\";\n          if (jsdocBuilder.shouldParseDocumentation()) {\n            ExtractionInfo fileOverviewInfo =\n                extractMultilineTextualBlock(token,\n                    WhitespaceOption.TRIM);\n\n            fileOverview = fileOverviewInfo.string;\n\n            token = fileOverviewInfo.token;\n          } else {\n            token = eatTokensUntilEOL(token);\n          }\n\n          if (!jsdocBuilder.recordFileOverview(fileOverview)) {\n            parser.addParserWarning(\"msg.jsdoc.fileoverview.extra\",\n                stream.getLineno(), stream.getCharno());\n          }\n          return token;\n\n        case LICENSE:\n        case PRESERVE:\n          ExtractionInfo preserveInfo =\n              extractMultilineTextualBlock(token,\n                                           WhitespaceOption.PRESERVE);\n\n          String preserve = preserveInfo.string;\n\n          if (preserve.length() > 0) {\n            if (fileLevelJsDocBuilder != null) {\n              fileLevelJsDocBuilder.append(preserve);\n            }\n          }\n\n          token = preserveInfo.token;\n          return token;\n\n        case ENUM:\n          token = next();\n          lineno = stream.getLineno();\n          charno = stream.getCharno();\n\n          type = null;\n          if (token != JsDocToken.EOL && token != JsDocToken.EOC) {\n            type = createJSTypeExpression(\n                parseAndRecordTypeNode(token));\n          }\n\n          if (type == null) {\n            type = createJSTypeExpression(newStringNode(\"number\"));\n          }\n          if (!jsdocBuilder.recordEnumParameterType(type)) {\n            parser.addTypeWarning(\n                \"msg.jsdoc.incompat.type\", lineno, charno);\n          }\n          token = eatUntilEOLIfNotAnnotation(token);\n          return token;\n\n        case EXPORT:\n          if (!jsdocBuilder.recordExport()) {\n            parser.addParserWarning(\"msg.jsdoc.export\",\n                stream.getLineno(), stream.getCharno());\n          }\n          return eatUntilEOLIfNotAnnotation();\n\n        case EXPOSE:\n          if (!jsdocBuilder.recordExpose()) {\n            parser.addParserWarning(\"msg.jsdoc.expose\",\n                stream.getLineno(), stream.getCharno());\n          }\n          return eatUntilEOLIfNotAnnotation();\n\n        case EXTERNS:\n          if (!jsdocBuilder.recordExterns()) {\n            parser.addParserWarning(\"msg.jsdoc.externs\",\n                stream.getLineno(), stream.getCharno());\n          }\n          return eatUntilEOLIfNotAnnotation();\n\n        case JAVA_DISPATCH:\n          if (!jsdocBuilder.recordJavaDispatch()) {\n            parser.addParserWarning(\"msg.jsdoc.javadispatch\",\n                stream.getLineno(), stream.getCharno());\n          }\n          return eatUntilEOLIfNotAnnotation();\n\n        case EXTENDS:\n        case IMPLEMENTS:\n          skipEOLs();\n          token = next();\n          lineno = stream.getLineno();\n          charno = stream.getCharno();\n          boolean matchingRc = false;\n\n          if (token == JsDocToken.LC) {\n            token = next();\n            matchingRc = true;\n          }\n\n          if (token == JsDocToken.STRING) {\n            Node typeNode = parseAndRecordTypeNameNode(\n                token, lineno, charno, matchingRc);\n\n            lineno = stream.getLineno();\n            charno = stream.getCharno();\n\n            typeNode = wrapNode(Token.BANG, typeNode);\n            type = createJSTypeExpression(typeNode);\n\n            if (annotation == Annotation.EXTENDS) {\n              // record the extended type, check later\n              extendedTypes.add(new ExtendedTypeInfo(\n                  type, stream.getLineno(), stream.getCharno()));\n            } else {\n              Preconditions.checkState(\n                  annotation == Annotation.IMPLEMENTS);\n              if (!jsdocBuilder.recordImplementedInterface(type)) {\n                parser.addTypeWarning(\"msg.jsdoc.implements.duplicate\",\n                    lineno, charno);\n              }\n            }\n            token = next();\n            if (matchingRc) {\n              if (token != JsDocToken.RC) {\n                parser.addTypeWarning(\"msg.jsdoc.missing.rc\",\n                    stream.getLineno(), stream.getCharno());\n              } else {\n                token = next();\n              }\n            } else if (token != JsDocToken.EOL &&\n                token != JsDocToken.EOF && token != JsDocToken.EOC) {\n              parser.addTypeWarning(\"msg.end.annotation.expected\",\n                  stream.getLineno(), stream.getCharno());\n            }\n          } else {\n            parser.addTypeWarning(\"msg.no.type.name\", lineno, charno);\n          }\n          token = eatUntilEOLIfNotAnnotation(token);\n          return token;\n\n        case HIDDEN:\n          if (!jsdocBuilder.recordHiddenness()) {\n            parser.addParserWarning(\"msg.jsdoc.hidden\",\n                stream.getLineno(), stream.getCharno());\n          }\n          return eatUntilEOLIfNotAnnotation();\n\n        case LENDS:\n          skipEOLs();\n\n          matchingRc = false;\n          if (match(JsDocToken.LC)) {\n            token = next();\n            matchingRc = true;\n          }\n\n          if (match(JsDocToken.STRING)) {\n            token = next();\n            if (!jsdocBuilder.recordLends(stream.getString())) {\n              parser.addTypeWarning(\"msg.jsdoc.lends.incompatible\",\n                  stream.getLineno(), stream.getCharno());\n            }\n          } else {\n            parser.addTypeWarning(\"msg.jsdoc.lends.missing\",\n                stream.getLineno(), stream.getCharno());\n          }\n\n          if (matchingRc && !match(JsDocToken.RC)) {\n            parser.addTypeWarning(\"msg.jsdoc.missing.rc\",\n                stream.getLineno(), stream.getCharno());\n          }\n          return eatUntilEOLIfNotAnnotation();\n\n        case MEANING:\n          ExtractionInfo meaningInfo =\n              extractMultilineTextualBlock(token);\n          String meaning = meaningInfo.string;\n          token = meaningInfo.token;\n          if (!jsdocBuilder.recordMeaning(meaning)) {\n            parser.addParserWarning(\"msg.jsdoc.meaning.extra\",\n                stream.getLineno(), stream.getCharno());\n          }\n          return token;\n\n        case NO_ALIAS:\n          if (!jsdocBuilder.recordNoAlias()) {\n            parser.addParserWarning(\"msg.jsdoc.noalias\",\n                stream.getLineno(), stream.getCharno());\n          }\n          return eatUntilEOLIfNotAnnotation();\n\n        case NO_COMPILE:\n          if (!jsdocBuilder.recordNoCompile()) {\n            parser.addParserWarning(\"msg.jsdoc.nocompile\",\n                stream.getLineno(), stream.getCharno());\n          }\n          return eatUntilEOLIfNotAnnotation();\n\n        case NO_TYPE_CHECK:\n          if (!jsdocBuilder.recordNoTypeCheck()) {\n            parser.addParserWarning(\"msg.jsdoc.nocheck\",\n                stream.getLineno(), stream.getCharno());\n          }\n          return eatUntilEOLIfNotAnnotation();\n\n        case NOT_IMPLEMENTED:\n          return eatUntilEOLIfNotAnnotation();\n\n        case INHERIT_DOC:\n        case OVERRIDE:\n          if (!jsdocBuilder.recordOverride()) {\n            parser.addTypeWarning(\"msg.jsdoc.override\",\n                stream.getLineno(), stream.getCharno());\n          }\n          return eatUntilEOLIfNotAnnotation();\n\n        case THROWS: {\n          skipEOLs();\n          token = next();\n          lineno = stream.getLineno();\n          charno = stream.getCharno();\n          type = null;\n\n          if (token == JsDocToken.LC) {\n            type = createJSTypeExpression(\n                parseAndRecordTypeNode(token));\n\n            if (type == null) {\n              // parsing error reported during recursive descent\n              // recovering parsing\n              return eatUntilEOLIfNotAnnotation();\n            }\n          }\n\n          // *Update* the token to that after the type annotation.\n          token = current();\n\n          // Save the throw type.\n          jsdocBuilder.recordThrowType(type);\n\n          boolean isAnnotationNext = lookAheadForAnnotation();\n\n          // Find the throw's description (if applicable).\n          if (jsdocBuilder.shouldParseDocumentation() && !isAnnotationNext) {\n            ExtractionInfo descriptionInfo =\n                extractMultilineTextualBlock(token);\n\n            String description = descriptionInfo.string;\n\n            if (description.length() > 0) {\n              jsdocBuilder.recordThrowDescription(type, description);\n            }\n\n            token = descriptionInfo.token;\n          } else {\n            token = eatUntilEOLIfNotAnnotation();\n          }\n          return token;\n        }\n\n        case PARAM:\n          skipEOLs();\n          token = next();\n          lineno = stream.getLineno();\n          charno = stream.getCharno();\n          type = null;\n\n          if (token == JsDocToken.LC) {\n            type = createJSTypeExpression(\n                parseAndRecordParamTypeNode(token));\n\n            if (type == null) {\n              // parsing error reported during recursive descent\n              // recovering parsing\n              return eatUntilEOLIfNotAnnotation();\n            }\n            skipEOLs();\n            token = next();\n            lineno = stream.getLineno();\n            charno = stream.getCharno();\n          }\n\n          String name = null;\n          boolean isBracketedParam = JsDocToken.LB == token;\n          if (isBracketedParam) {\n            token = next();\n          }\n\n          if (JsDocToken.STRING != token) {\n            parser.addTypeWarning(\"msg.missing.variable.name\",\n                lineno, charno);\n          } else {\n            name = stream.getString();\n\n            if (isBracketedParam) {\n              token = next();\n\n              // Throw out JsDocToolkit's \"default\" parameter\n              // annotation.  It makes no sense under our type\n              // system.\n              if (JsDocToken.EQUALS == token) {\n                token = next();\n                if (JsDocToken.STRING == token) {\n                  token = next();\n                }\n              }\n\n              if (JsDocToken.RB != token) {\n                reportTypeSyntaxWarning(\"msg.jsdoc.missing.rb\");\n              } else if (type != null) {\n                // Make the type expression optional, if it isn't\n                // already.\n                type = JSTypeExpression.makeOptionalArg(type);\n              }\n            }\n\n            // If the param name has a DOT in it, just throw it out\n            // quietly. We do not handle the JsDocToolkit method\n            // for handling properties of params.\n            if (name.indexOf('.') > -1) {\n              name = null;\n            } else if (!jsdocBuilder.recordParameter(name, type)) {\n              if (jsdocBuilder.hasParameter(name)) {\n                parser.addTypeWarning(\"msg.dup.variable.name\", name,\n                    lineno, charno);\n              } else {\n                parser.addTypeWarning(\"msg.jsdoc.incompat.type\", name,\n                    lineno, charno);\n              }\n            }\n          }\n\n          if (name == null) {\n            token = eatUntilEOLIfNotAnnotation(token);\n            return token;\n          }\n\n          jsdocBuilder.markName(name, sourceFile, lineno, charno);\n\n          // Find the parameter's description (if applicable).\n          if (jsdocBuilder.shouldParseDocumentation()\n              && token != JsDocToken.ANNOTATION) {\n            ExtractionInfo paramDescriptionInfo =\n                extractMultilineTextualBlock(token);\n\n            String paramDescription = paramDescriptionInfo.string;\n\n            if (paramDescription.length() > 0) {\n              jsdocBuilder.recordParameterDescription(name,\n                  paramDescription);\n            }\n\n            token = paramDescriptionInfo.token;\n          } else if (token != JsDocToken.EOC && token != JsDocToken.EOF) {\n            token = eatUntilEOLIfNotAnnotation();\n          }\n          return token;\n\n        case PRESERVE_TRY:\n          if (!jsdocBuilder.recordPreserveTry()) {\n            parser.addParserWarning(\"msg.jsdoc.preservertry\",\n                stream.getLineno(), stream.getCharno());\n          }\n          return eatUntilEOLIfNotAnnotation();\n\n        case NO_SHADOW:\n          if (!jsdocBuilder.recordNoShadow()) {\n            parser.addParserWarning(\"msg.jsdoc.noshadow\",\n                stream.getLineno(), stream.getCharno());\n          }\n          return eatUntilEOLIfNotAnnotation();\n\n        case NO_SIDE_EFFECTS:\n          if (!jsdocBuilder.recordNoSideEffects()) {\n            parser.addParserWarning(\"msg.jsdoc.nosideeffects\",\n                stream.getLineno(), stream.getCharno());\n          }\n          return eatUntilEOLIfNotAnnotation();\n\n        case MODIFIES:\n          token = parseModifiesTag(next());\n          return token;\n\n        case IMPLICIT_CAST:\n          if (!jsdocBuilder.recordImplicitCast()) {\n            parser.addTypeWarning(\"msg.jsdoc.implicitcast\",\n                stream.getLineno(), stream.getCharno());\n          }\n          return eatUntilEOLIfNotAnnotation();\n\n        case SEE:\n          if (jsdocBuilder.shouldParseDocumentation()) {\n            ExtractionInfo referenceInfo = extractSingleLineBlock();\n            String reference = referenceInfo.string;\n\n            if (reference.length() == 0) {\n              parser.addParserWarning(\"msg.jsdoc.seemissing\",\n                  stream.getLineno(), stream.getCharno());\n            } else {\n              jsdocBuilder.addReference(reference);\n            }\n\n            token = referenceInfo.token;\n          } else {\n            token = eatUntilEOLIfNotAnnotation();\n          }\n          return token;\n\n        case STABLEIDGENERATOR:\n          if (!jsdocBuilder.recordStableIdGenerator()) {\n            parser.addParserWarning(\"msg.jsdoc.stableidgen\",\n              stream.getLineno(), stream.getCharno());\n          }\n          return eatUntilEOLIfNotAnnotation();\n\n        case SUPPRESS:\n          token = parseSuppressTag(next());\n          return token;\n\n        case TEMPLATE: {\n          ExtractionInfo templateInfo = extractSingleLineBlock();\n          List<String> names = Lists.newArrayList(\n              Splitter.on(',')\n                  .trimResults()\n                  .split(templateInfo.string));\n\n          if (names.size() == 0 || names.get(0).length() == 0) {\n            parser.addTypeWarning(\"msg.jsdoc.templatemissing\",\n                  stream.getLineno(), stream.getCharno());\n          } else if (!jsdocBuilder.recordTemplateTypeNames(names)) {\n            parser.addTypeWarning(\"msg.jsdoc.template.at.most.once\",\n                stream.getLineno(), stream.getCharno());\n          }\n\n          token = templateInfo.token;\n          return token;\n        }\n\n        case IDGENERATOR:\n          token = parseIdGeneratorTag(next());\n          return token;\n\n        case WIZACTION:\n          if (!jsdocBuilder.recordWizaction()) {\n            parser.addParserWarning(\"msg.jsdoc.wizaction\",\n              stream.getLineno(), stream.getCharno());\n          }\n          return eatUntilEOLIfNotAnnotation();\n\n        case DISPOSES: {\n          ExtractionInfo templateInfo = extractSingleLineBlock();\n          List<String> names = Lists.newArrayList(\n              Splitter.on(',')\n                  .trimResults()\n                  .split(templateInfo.string));\n\n          if (names.size() == 0 || names.get(0).length() == 0) {\n            parser.addTypeWarning(\"msg.jsdoc.disposeparameter.missing\",\n                  stream.getLineno(), stream.getCharno());\n          } else if (!jsdocBuilder.recordDisposesParameter(names)) {\n            parser.addTypeWarning(\"msg.jsdoc.disposeparameter.error\",\n                stream.getLineno(), stream.getCharno());\n          }\n\n          token = templateInfo.token;\n          return token;\n        }\n\n        case VERSION:\n          ExtractionInfo versionInfo = extractSingleLineBlock();\n          String version = versionInfo.string;\n\n          if (version.length() == 0) {\n            parser.addParserWarning(\"msg.jsdoc.versionmissing\",\n                  stream.getLineno(), stream.getCharno());\n          } else {\n            if (!jsdocBuilder.recordVersion(version)) {\n               parser.addParserWarning(\"msg.jsdoc.extraversion\",\n                  stream.getLineno(), stream.getCharno());\n            }\n          }\n\n          token = versionInfo.token;\n          return token;\n\n        case CONSTANT:\n        case DEFINE:\n        case RETURN:\n        case PRIVATE:\n        case PROTECTED:\n        case PUBLIC:\n        case THIS:\n        case TYPE:\n        case TYPEDEF:\n          lineno = stream.getLineno();\n          charno = stream.getCharno();\n\n          Node typeNode = null;\n          boolean hasType = lookAheadForType();\n          boolean isAlternateTypeAnnotation =\n              (annotation == Annotation.PRIVATE ||\n               annotation == Annotation.PROTECTED ||\n               annotation == Annotation.PUBLIC ||\n               annotation == Annotation.CONSTANT);\n          boolean canSkipTypeAnnotation =\n              (isAlternateTypeAnnotation ||\n               annotation == Annotation.RETURN);\n          type = null;\n          if (hasType || !canSkipTypeAnnotation) {\n            skipEOLs();\n            token = next();\n            typeNode = parseAndRecordTypeNode(token);\n\n            if (annotation == Annotation.THIS) {\n              typeNode = wrapNode(Token.BANG, typeNode);\n            }\n            type = createJSTypeExpression(typeNode);\n          }\n\n          // The error was reported during recursive descent\n          // recovering parsing\n          boolean hasError = type == null && !canSkipTypeAnnotation;\n          if (!hasError) {\n            // Record types for @type.\n            // If the @private, @protected, or @public annotations\n            // have a type attached, pretend that they actually wrote:\n            // @type {type}\\n@private\n            // This will have some weird behavior in some cases\n            // (for example, @private can now be used as a type-cast),\n            // but should be mostly OK.\n            if ((type != null && isAlternateTypeAnnotation)\n                || annotation == Annotation.TYPE) {\n              if (!jsdocBuilder.recordType(type)) {\n                parser.addTypeWarning(\n                    \"msg.jsdoc.incompat.type\", lineno, charno);\n              }\n            }\n\n            switch (annotation) {\n              case CONSTANT:\n                if (!jsdocBuilder.recordConstancy()) {\n                  parser.addParserWarning(\"msg.jsdoc.const\",\n                      stream.getLineno(), stream.getCharno());\n                }\n                break;\n\n              case DEFINE:\n                if (!jsdocBuilder.recordDefineType(type)) {\n                  parser.addParserWarning(\"msg.jsdoc.define\",\n                      lineno, charno);\n                }\n                return recordDescription(token);\n\n              case PRIVATE:\n                if (!jsdocBuilder.recordVisibility(Visibility.PRIVATE)) {\n                  parser.addParserWarning(\n                      \"msg.jsdoc.visibility.private\",\n                      lineno, charno);\n                }\n                return recordDescription(token);\n\n              case PROTECTED:\n                if (!jsdocBuilder.recordVisibility(Visibility.PROTECTED)) {\n                  parser.addParserWarning(\n                      \"msg.jsdoc.visibility.protected\",\n                      lineno, charno);\n                }\n                return recordDescription(token);\n\n              case PUBLIC:\n                if (!jsdocBuilder.recordVisibility(Visibility.PUBLIC)) {\n                  parser.addParserWarning(\n                      \"msg.jsdoc.visibility.public\",\n                      lineno, charno);\n                }\n                return recordDescription(token);\n\n              case RETURN:\n                if (type == null) {\n                  type = createJSTypeExpression(newNode(Token.QMARK));\n                }\n\n                if (!jsdocBuilder.recordReturnType(type)) {\n                  parser.addTypeWarning(\n                      \"msg.jsdoc.incompat.type\", lineno, charno);\n                  break;\n                }\n\n                // TODO(johnlenz): The extractMultilineTextualBlock method\n                // and friends look directly at the stream, regardless of\n                // last token read, so we don't want to read the first\n                // \"STRING\" out of the stream.\n\n                boolean isAnnotationNext = lookAheadForAnnotation();\n\n                // Find the return's description (if applicable).\n                if (jsdocBuilder.shouldParseDocumentation()\n                    && !isAnnotationNext) {\n                  ExtractionInfo returnDescriptionInfo =\n                      extractMultilineTextualBlock(token);\n\n                  String returnDescription =\n                      returnDescriptionInfo.string;\n\n                  if (returnDescription.length() > 0) {\n                    jsdocBuilder.recordReturnDescription(\n                        returnDescription);\n                  }\n\n                  token = returnDescriptionInfo.token;\n                } else {\n                  token = eatUntilEOLIfNotAnnotation();\n                }\n                return token;\n\n              case THIS:\n                if (!jsdocBuilder.recordThisType(type)) {\n                  parser.addTypeWarning(\n                      \"msg.jsdoc.incompat.type\", lineno, charno);\n                }\n                break;\n\n              case TYPEDEF:\n                if (!jsdocBuilder.recordTypedef(type)) {\n                  parser.addTypeWarning(\n                      \"msg.jsdoc.incompat.type\", lineno, charno);\n                }\n                break;\n            }\n          }\n\n          return eatUntilEOLIfNotAnnotation();\n      }",
      "right" : "switch (annotation) {\n        case NG_INJECT:\n          if (jsdocBuilder.isNgInjectRecorded()) {\n            parser.addParserWarning(\"msg.jsdoc.nginject.extra\",\n              stream.getLineno(), stream.getCharno());\n          } else {\n            jsdocBuilder.recordNgInject(true);\n          }\n          return eatUntilEOLIfNotAnnotation();\n\n        case JAGGER_INJECT:\n          if (jsdocBuilder.isJaggerInjectRecorded()) {\n            parser.addParserWarning(\"msg.jsdoc.jaggerInject.extra\",\n              stream.getLineno(), stream.getCharno());\n          } else {\n            jsdocBuilder.recordJaggerInject(true);\n          }\n          return eatUntilEOLIfNotAnnotation();\n\n        case JAGGER_MODULE:\n          if (jsdocBuilder.isJaggerModuleRecorded()) {\n            parser.addParserWarning(\"msg.jsdoc.jaggerModule.extra\",\n              stream.getLineno(), stream.getCharno());\n          } else {\n            jsdocBuilder.recordJaggerModule(true);\n          }\n          return eatUntilEOLIfNotAnnotation();\n\n        case JAGGER_PROVIDE:\n          if (jsdocBuilder.isJaggerProvideRecorded()) {\n            parser.addParserWarning(\"msg.jsdoc.jaggerProvide.extra\",\n              stream.getLineno(), stream.getCharno());\n          } else {\n            jsdocBuilder.recordJaggerProvide(true);\n          }\n          return eatUntilEOLIfNotAnnotation();\n\n        case AUTHOR:\n          if (jsdocBuilder.shouldParseDocumentation()) {\n            ExtractionInfo authorInfo = extractSingleLineBlock();\n            String author = authorInfo.string;\n\n            if (author.length() == 0) {\n              parser.addParserWarning(\"msg.jsdoc.authormissing\",\n                  stream.getLineno(), stream.getCharno());\n            } else {\n              jsdocBuilder.addAuthor(author);\n            }\n            token = authorInfo.token;\n          } else {\n            token = eatUntilEOLIfNotAnnotation();\n          }\n          return token;\n\n        case CONSISTENTIDGENERATOR:\n          if (!jsdocBuilder.recordConsistentIdGenerator()) {\n            parser.addParserWarning(\"msg.jsdoc.consistidgen\",\n              stream.getLineno(), stream.getCharno());\n          }\n          return eatUntilEOLIfNotAnnotation();\n\n        case STRUCT:\n          if (!jsdocBuilder.recordStruct()) {\n            parser.addTypeWarning(\"msg.jsdoc.incompat.type\",\n                                  stream.getLineno(),\n                                  stream.getCharno());\n          }\n          return eatUntilEOLIfNotAnnotation();\n\n        case DICT:\n          if (!jsdocBuilder.recordDict()) {\n            parser.addTypeWarning(\"msg.jsdoc.incompat.type\",\n                                  stream.getLineno(),\n                                  stream.getCharno());\n          }\n          return eatUntilEOLIfNotAnnotation();\n\n        case CONSTRUCTOR:\n          if (!jsdocBuilder.recordConstructor()) {\n            if (jsdocBuilder.isInterfaceRecorded()) {\n              parser.addTypeWarning(\"msg.jsdoc.interface.constructor\",\n                  stream.getLineno(), stream.getCharno());\n            } else {\n              parser.addTypeWarning(\"msg.jsdoc.incompat.type\",\n                  stream.getLineno(), stream.getCharno());\n            }\n          }\n          return eatUntilEOLIfNotAnnotation();\n\n        case DEPRECATED:\n          if (!jsdocBuilder.recordDeprecated()) {\n            parser.addParserWarning(\"msg.jsdoc.deprecated\",\n                stream.getLineno(), stream.getCharno());\n          }\n\n          // Find the reason/description, if any.\n          ExtractionInfo reasonInfo =\n              extractMultilineTextualBlock(token);\n\n          String reason = reasonInfo.string;\n\n          if (reason.length() > 0) {\n            jsdocBuilder.recordDeprecationReason(reason);\n          }\n\n          token = reasonInfo.token;\n          return token;\n\n        case INTERFACE:\n          if (!jsdocBuilder.recordInterface()) {\n            if (jsdocBuilder.isConstructorRecorded()) {\n              parser.addTypeWarning(\"msg.jsdoc.interface.constructor\",\n                  stream.getLineno(), stream.getCharno());\n            } else {\n              parser.addTypeWarning(\"msg.jsdoc.incompat.type\",\n                  stream.getLineno(), stream.getCharno());\n            }\n          }\n          return eatUntilEOLIfNotAnnotation();\n\n        case DESC:\n          if (jsdocBuilder.isDescriptionRecorded()) {\n            parser.addParserWarning(\"msg.jsdoc.desc.extra\",\n                stream.getLineno(), stream.getCharno());\n            return eatUntilEOLIfNotAnnotation();\n          } else {\n            ExtractionInfo descriptionInfo =\n                extractMultilineTextualBlock(token);\n\n            String description = descriptionInfo.string;\n\n            jsdocBuilder.recordDescription(description);\n            token = descriptionInfo.token;\n            return token;\n          }\n\n        case FILE_OVERVIEW:\n          String fileOverview = \"\";\n          if (jsdocBuilder.shouldParseDocumentation()) {\n            ExtractionInfo fileOverviewInfo =\n                extractMultilineTextualBlock(token,\n                    WhitespaceOption.TRIM);\n\n            fileOverview = fileOverviewInfo.string;\n\n            token = fileOverviewInfo.token;\n          } else {\n            token = eatTokensUntilEOL(token);\n          }\n\n          if (!jsdocBuilder.recordFileOverview(fileOverview)) {\n            parser.addParserWarning(\"msg.jsdoc.fileoverview.extra\",\n                stream.getLineno(), stream.getCharno());\n          }\n          return token;\n\n        case LICENSE:\n        case PRESERVE:\n          ExtractionInfo preserveInfo =\n              extractMultilineTextualBlock(token,\n                                           WhitespaceOption.PRESERVE);\n\n          String preserve = preserveInfo.string;\n\n          if (preserve.length() > 0) {\n            if (fileLevelJsDocBuilder != null) {\n              fileLevelJsDocBuilder.append(preserve);\n            }\n          }\n\n          token = preserveInfo.token;\n          return token;\n\n        case ENUM:\n          token = next();\n          lineno = stream.getLineno();\n          charno = stream.getCharno();\n\n          type = null;\n          if (token != JsDocToken.EOL && token != JsDocToken.EOC) {\n            type = createJSTypeExpression(\n                parseAndRecordTypeNode(token));\n          }\n\n          if (type == null) {\n            type = createJSTypeExpression(newStringNode(\"number\"));\n          }\n          if (!jsdocBuilder.recordEnumParameterType(type)) {\n            parser.addTypeWarning(\n                \"msg.jsdoc.incompat.type\", lineno, charno);\n          }\n          token = eatUntilEOLIfNotAnnotation(token);\n          return token;\n\n        case EXPORT:\n          if (!jsdocBuilder.recordExport()) {\n            parser.addParserWarning(\"msg.jsdoc.export\",\n                stream.getLineno(), stream.getCharno());\n          }\n          return eatUntilEOLIfNotAnnotation();\n\n        case EXPOSE:\n          if (!jsdocBuilder.recordExpose()) {\n            parser.addParserWarning(\"msg.jsdoc.expose\",\n                stream.getLineno(), stream.getCharno());\n          }\n          return eatUntilEOLIfNotAnnotation();\n\n        case EXTERNS:\n          if (!jsdocBuilder.recordExterns()) {\n            parser.addParserWarning(\"msg.jsdoc.externs\",\n                stream.getLineno(), stream.getCharno());\n          }\n          return eatUntilEOLIfNotAnnotation();\n\n        case JAVA_DISPATCH:\n          if (!jsdocBuilder.recordJavaDispatch()) {\n            parser.addParserWarning(\"msg.jsdoc.javadispatch\",\n                stream.getLineno(), stream.getCharno());\n          }\n          return eatUntilEOLIfNotAnnotation();\n\n        case EXTENDS:\n        case IMPLEMENTS:\n          skipEOLs();\n          token = next();\n          lineno = stream.getLineno();\n          charno = stream.getCharno();\n          boolean matchingRc = false;\n\n          if (token == JsDocToken.LC) {\n            token = next();\n            matchingRc = true;\n          }\n\n          if (token == JsDocToken.STRING) {\n            Node typeNode = parseAndRecordTypeNameNode(\n                token, lineno, charno, matchingRc);\n\n            lineno = stream.getLineno();\n            charno = stream.getCharno();\n\n            typeNode = wrapNode(Token.BANG, typeNode);\n            type = createJSTypeExpression(typeNode);\n\n            if (annotation == Annotation.EXTENDS) {\n              // record the extended type, check later\n              extendedTypes.add(new ExtendedTypeInfo(\n                  type, stream.getLineno(), stream.getCharno()));\n            } else {\n              Preconditions.checkState(\n                  annotation == Annotation.IMPLEMENTS);\n              if (!jsdocBuilder.recordImplementedInterface(type)) {\n                parser.addTypeWarning(\"msg.jsdoc.implements.duplicate\",\n                    lineno, charno);\n              }\n            }\n            token = next();\n            if (matchingRc) {\n              if (token != JsDocToken.RC) {\n                parser.addTypeWarning(\"msg.jsdoc.missing.rc\",\n                    stream.getLineno(), stream.getCharno());\n              } else {\n                token = next();\n              }\n            } else if (token != JsDocToken.EOL &&\n                token != JsDocToken.EOF && token != JsDocToken.EOC) {\n              parser.addTypeWarning(\"msg.end.annotation.expected\",\n                  stream.getLineno(), stream.getCharno());\n            }\n          } else {\n            parser.addTypeWarning(\"msg.no.type.name\", lineno, charno);\n          }\n          token = eatUntilEOLIfNotAnnotation(token);\n          return token;\n\n        case HIDDEN:\n          if (!jsdocBuilder.recordHiddenness()) {\n            parser.addParserWarning(\"msg.jsdoc.hidden\",\n                stream.getLineno(), stream.getCharno());\n          }\n          return eatUntilEOLIfNotAnnotation();\n\n        case LENDS:\n          skipEOLs();\n\n          matchingRc = false;\n          if (match(JsDocToken.LC)) {\n            token = next();\n            matchingRc = true;\n          }\n\n          if (match(JsDocToken.STRING)) {\n            token = next();\n            if (!jsdocBuilder.recordLends(stream.getString())) {\n              parser.addTypeWarning(\"msg.jsdoc.lends.incompatible\",\n                  stream.getLineno(), stream.getCharno());\n            }\n          } else {\n            parser.addTypeWarning(\"msg.jsdoc.lends.missing\",\n                stream.getLineno(), stream.getCharno());\n          }\n\n          if (matchingRc && !match(JsDocToken.RC)) {\n            parser.addTypeWarning(\"msg.jsdoc.missing.rc\",\n                stream.getLineno(), stream.getCharno());\n          }\n          return eatUntilEOLIfNotAnnotation();\n\n        case MEANING:\n          ExtractionInfo meaningInfo =\n              extractMultilineTextualBlock(token);\n          String meaning = meaningInfo.string;\n          token = meaningInfo.token;\n          if (!jsdocBuilder.recordMeaning(meaning)) {\n            parser.addParserWarning(\"msg.jsdoc.meaning.extra\",\n                stream.getLineno(), stream.getCharno());\n          }\n          return token;\n\n        case NO_ALIAS:\n          if (!jsdocBuilder.recordNoAlias()) {\n            parser.addParserWarning(\"msg.jsdoc.noalias\",\n                stream.getLineno(), stream.getCharno());\n          }\n          return eatUntilEOLIfNotAnnotation();\n\n        case NO_COMPILE:\n          if (!jsdocBuilder.recordNoCompile()) {\n            parser.addParserWarning(\"msg.jsdoc.nocompile\",\n                stream.getLineno(), stream.getCharno());\n          }\n          return eatUntilEOLIfNotAnnotation();\n\n        case NO_TYPE_CHECK:\n          if (!jsdocBuilder.recordNoTypeCheck()) {\n            parser.addParserWarning(\"msg.jsdoc.nocheck\",\n                stream.getLineno(), stream.getCharno());\n          }\n          return eatUntilEOLIfNotAnnotation();\n\n        case NOT_IMPLEMENTED:\n          return eatUntilEOLIfNotAnnotation();\n\n        case INHERIT_DOC:\n        case OVERRIDE:\n          if (!jsdocBuilder.recordOverride()) {\n            parser.addTypeWarning(\"msg.jsdoc.override\",\n                stream.getLineno(), stream.getCharno());\n          }\n          return eatUntilEOLIfNotAnnotation();\n\n        case THROWS: {\n          skipEOLs();\n          token = next();\n          lineno = stream.getLineno();\n          charno = stream.getCharno();\n          type = null;\n\n          if (token == JsDocToken.LC) {\n            type = createJSTypeExpression(\n                parseAndRecordTypeNode(token));\n\n            if (type == null) {\n              // parsing error reported during recursive descent\n              // recovering parsing\n              return eatUntilEOLIfNotAnnotation();\n            }\n          }\n\n          // *Update* the token to that after the type annotation.\n          token = current();\n\n          // Save the throw type.\n          jsdocBuilder.recordThrowType(type);\n\n          boolean isAnnotationNext = lookAheadForAnnotation();\n\n          // Find the throw's description (if applicable).\n          if (jsdocBuilder.shouldParseDocumentation() && !isAnnotationNext) {\n            ExtractionInfo descriptionInfo =\n                extractMultilineTextualBlock(token);\n\n            String description = descriptionInfo.string;\n\n            if (description.length() > 0) {\n              jsdocBuilder.recordThrowDescription(type, description);\n            }\n\n            token = descriptionInfo.token;\n          } else {\n            token = eatUntilEOLIfNotAnnotation();\n          }\n          return token;\n        }\n\n        case PARAM:\n          skipEOLs();\n          token = next();\n          lineno = stream.getLineno();\n          charno = stream.getCharno();\n          type = null;\n\n          if (token == JsDocToken.LC) {\n            type = createJSTypeExpression(\n                parseAndRecordParamTypeNode(token));\n\n            if (type == null) {\n              // parsing error reported during recursive descent\n              // recovering parsing\n              return eatUntilEOLIfNotAnnotation();\n            }\n            skipEOLs();\n            token = next();\n            lineno = stream.getLineno();\n            charno = stream.getCharno();\n          }\n\n          String name = null;\n          boolean isBracketedParam = JsDocToken.LB == token;\n          if (isBracketedParam) {\n            token = next();\n          }\n\n          if (JsDocToken.STRING != token) {\n            parser.addTypeWarning(\"msg.missing.variable.name\",\n                lineno, charno);\n          } else {\n            name = stream.getString();\n\n            if (isBracketedParam) {\n              token = next();\n\n              // Throw out JsDocToolkit's \"default\" parameter\n              // annotation.  It makes no sense under our type\n              // system.\n              if (JsDocToken.EQUALS == token) {\n                token = next();\n                if (JsDocToken.STRING == token) {\n                  token = next();\n                }\n              }\n\n              if (JsDocToken.RB != token) {\n                reportTypeSyntaxWarning(\"msg.jsdoc.missing.rb\");\n              } else if (type != null) {\n                // Make the type expression optional, if it isn't\n                // already.\n                type = JSTypeExpression.makeOptionalArg(type);\n              }\n            }\n\n            // If the param name has a DOT in it, just throw it out\n            // quietly. We do not handle the JsDocToolkit method\n            // for handling properties of params.\n            if (name.indexOf('.') > -1) {\n              name = null;\n            } else if (!jsdocBuilder.recordParameter(name, type)) {\n              if (jsdocBuilder.hasParameter(name)) {\n                parser.addTypeWarning(\"msg.dup.variable.name\", name,\n                    lineno, charno);\n              } else {\n                parser.addTypeWarning(\"msg.jsdoc.incompat.type\", name,\n                    lineno, charno);\n              }\n            }\n          }\n\n          if (name == null) {\n            token = eatUntilEOLIfNotAnnotation(token);\n            return token;\n          }\n\n          jsdocBuilder.markName(name, sourceFile, lineno, charno);\n\n          // Find the parameter's description (if applicable).\n          if (jsdocBuilder.shouldParseDocumentation()\n              && token != JsDocToken.ANNOTATION) {\n            ExtractionInfo paramDescriptionInfo =\n                extractMultilineTextualBlock(token);\n\n            String paramDescription = paramDescriptionInfo.string;\n\n            if (paramDescription.length() > 0) {\n              jsdocBuilder.recordParameterDescription(name,\n                  paramDescription);\n            }\n\n            token = paramDescriptionInfo.token;\n          } else if (token != JsDocToken.EOC && token != JsDocToken.EOF) {\n            token = eatUntilEOLIfNotAnnotation();\n          }\n          return token;\n\n        case PRESERVE_TRY:\n          if (!jsdocBuilder.recordPreserveTry()) {\n            parser.addParserWarning(\"msg.jsdoc.preservertry\",\n                stream.getLineno(), stream.getCharno());\n          }\n          return eatUntilEOLIfNotAnnotation();\n\n        case NO_SHADOW:\n          if (!jsdocBuilder.recordNoShadow()) {\n            parser.addParserWarning(\"msg.jsdoc.noshadow\",\n                stream.getLineno(), stream.getCharno());\n          }\n          return eatUntilEOLIfNotAnnotation();\n\n        case NO_SIDE_EFFECTS:\n          if (!jsdocBuilder.recordNoSideEffects()) {\n            parser.addParserWarning(\"msg.jsdoc.nosideeffects\",\n                stream.getLineno(), stream.getCharno());\n          }\n          return eatUntilEOLIfNotAnnotation();\n\n        case MODIFIES:\n          token = parseModifiesTag(next());\n          return token;\n\n        case IMPLICIT_CAST:\n          if (!jsdocBuilder.recordImplicitCast()) {\n            parser.addTypeWarning(\"msg.jsdoc.implicitcast\",\n                stream.getLineno(), stream.getCharno());\n          }\n          return eatUntilEOLIfNotAnnotation();\n\n        case SEE:\n          if (jsdocBuilder.shouldParseDocumentation()) {\n            ExtractionInfo referenceInfo = extractSingleLineBlock();\n            String reference = referenceInfo.string;\n\n            if (reference.length() == 0) {\n              parser.addParserWarning(\"msg.jsdoc.seemissing\",\n                  stream.getLineno(), stream.getCharno());\n            } else {\n              jsdocBuilder.addReference(reference);\n            }\n\n            token = referenceInfo.token;\n          } else {\n            token = eatUntilEOLIfNotAnnotation();\n          }\n          return token;\n\n        case STABLEIDGENERATOR:\n          if (!jsdocBuilder.recordStableIdGenerator()) {\n            parser.addParserWarning(\"msg.jsdoc.stableidgen\",\n              stream.getLineno(), stream.getCharno());\n          }\n          return eatUntilEOLIfNotAnnotation();\n\n        case SUPPRESS:\n          token = parseSuppressTag(next());\n          return token;\n\n        case TEMPLATE: {\n          ExtractionInfo templateInfo = extractSingleLineBlock();\n          List<String> names = Lists.newArrayList(\n              Splitter.on(',')\n                  .trimResults()\n                  .split(templateInfo.string));\n\n          if (names.size() == 0 || names.get(0).length() == 0) {\n            parser.addTypeWarning(\"msg.jsdoc.templatemissing\",\n                  stream.getLineno(), stream.getCharno());\n          } else if (!jsdocBuilder.recordTemplateTypeNames(names)) {\n            parser.addTypeWarning(\"msg.jsdoc.template.at.most.once\",\n                stream.getLineno(), stream.getCharno());\n          }\n\n          token = templateInfo.token;\n          return token;\n        }\n\n        case IDGENERATOR:\n          token = parseIdGeneratorTag(next());\n          return token;\n\n        case WIZACTION:\n          if (!jsdocBuilder.recordWizaction()) {\n            parser.addParserWarning(\"msg.jsdoc.wizaction\",\n              stream.getLineno(), stream.getCharno());\n          }\n          return eatUntilEOLIfNotAnnotation();\n\n        case DISPOSES: {\n          ExtractionInfo templateInfo = extractSingleLineBlock();\n          List<String> names = Lists.newArrayList(\n              Splitter.on(',')\n                  .trimResults()\n                  .split(templateInfo.string));\n\n          if (names.size() == 0 || names.get(0).length() == 0) {\n            parser.addTypeWarning(\"msg.jsdoc.disposeparameter.missing\",\n                  stream.getLineno(), stream.getCharno());\n          } else if (!jsdocBuilder.recordDisposesParameter(names)) {\n            parser.addTypeWarning(\"msg.jsdoc.disposeparameter.error\",\n                stream.getLineno(), stream.getCharno());\n          }\n\n          token = templateInfo.token;\n          return token;\n        }\n\n        case VERSION:\n          ExtractionInfo versionInfo = extractSingleLineBlock();\n          String version = versionInfo.string;\n\n          if (version.length() == 0) {\n            parser.addParserWarning(\"msg.jsdoc.versionmissing\",\n                  stream.getLineno(), stream.getCharno());\n          } else {\n            if (!jsdocBuilder.recordVersion(version)) {\n               parser.addParserWarning(\"msg.jsdoc.extraversion\",\n                  stream.getLineno(), stream.getCharno());\n            }\n          }\n\n          token = versionInfo.token;\n          return token;\n\n        case CONSTANT:\n        case DEFINE:\n        case RETURN:\n        case PRIVATE:\n        case PROTECTED:\n        case PUBLIC:\n        case THIS:\n        case TYPE:\n        case TYPEDEF:\n          lineno = stream.getLineno();\n          charno = stream.getCharno();\n\n          Node typeNode = null;\n          boolean hasType = lookAheadForType();\n          boolean isAlternateTypeAnnotation =\n              (annotation == Annotation.PRIVATE ||\n               annotation == Annotation.PROTECTED ||\n               annotation == Annotation.PUBLIC ||\n               annotation == Annotation.CONSTANT);\n          boolean canSkipTypeAnnotation =\n              (isAlternateTypeAnnotation ||\n               annotation == Annotation.RETURN);\n          type = null;\n          if (hasType || !canSkipTypeAnnotation) {\n            skipEOLs();\n            token = next();\n            typeNode = parseAndRecordTypeNode(token);\n\n            if (annotation == Annotation.THIS) {\n              typeNode = wrapNode(Token.BANG, typeNode);\n            }\n            type = createJSTypeExpression(typeNode);\n          }\n\n          // The error was reported during recursive descent\n          // recovering parsing\n          boolean hasError = type == null && !canSkipTypeAnnotation;\n          if (!hasError) {\n            // Record types for @type.\n            // If the @private, @protected, or @public annotations\n            // have a type attached, pretend that they actually wrote:\n            // @type {type}\\n@private\n            // This will have some weird behavior in some cases\n            // (for example, @private can now be used as a type-cast),\n            // but should be mostly OK.\n            if ((type != null && isAlternateTypeAnnotation)\n                || annotation == Annotation.TYPE) {\n              if (!jsdocBuilder.recordType(type)) {\n                parser.addTypeWarning(\n                    \"msg.jsdoc.incompat.type\", lineno, charno);\n              }\n            }\n\n            switch (annotation) {\n              case CONSTANT:\n                if (!jsdocBuilder.recordConstancy()) {\n                  parser.addParserWarning(\"msg.jsdoc.const\",\n                      stream.getLineno(), stream.getCharno());\n                }\n                break;\n\n              case DEFINE:\n                if (!jsdocBuilder.recordDefineType(type)) {\n                  parser.addParserWarning(\"msg.jsdoc.define\",\n                      lineno, charno);\n                }\n                return recordDescription(token);\n\n              case PRIVATE:\n                if (!jsdocBuilder.recordVisibility(Visibility.PRIVATE)) {\n                  parser.addParserWarning(\n                      \"msg.jsdoc.visibility.private\",\n                      lineno, charno);\n                }\n                return recordDescription(token);\n\n              case PROTECTED:\n                if (!jsdocBuilder.recordVisibility(Visibility.PROTECTED)) {\n                  parser.addParserWarning(\n                      \"msg.jsdoc.visibility.protected\",\n                      lineno, charno);\n                }\n                return recordDescription(token);\n\n              case PUBLIC:\n                if (!jsdocBuilder.recordVisibility(Visibility.PUBLIC)) {\n                  parser.addParserWarning(\n                      \"msg.jsdoc.visibility.public\",\n                      lineno, charno);\n                }\n                return recordDescription(token);\n\n              case RETURN:\n                if (type == null) {\n                  type = createJSTypeExpression(newNode(Token.QMARK));\n                }\n\n                if (!jsdocBuilder.recordReturnType(type)) {\n                  parser.addTypeWarning(\n                      \"msg.jsdoc.incompat.type\", lineno, charno);\n                  break;\n                }\n\n                // TODO(johnlenz): The extractMultilineTextualBlock method\n                // and friends look directly at the stream, regardless of\n                // last token read, so we don't want to read the first\n                // \"STRING\" out of the stream.\n\n                boolean isAnnotationNext = lookAheadForAnnotation();\n\n                // Find the return's description (if applicable).\n                if (jsdocBuilder.shouldParseDocumentation()\n                    && !isAnnotationNext) {\n                  ExtractionInfo returnDescriptionInfo =\n                      extractMultilineTextualBlock(token);\n\n                  String returnDescription =\n                      returnDescriptionInfo.string;\n\n                  if (returnDescription.length() > 0) {\n                    jsdocBuilder.recordReturnDescription(\n                        returnDescription);\n                  }\n\n                  token = returnDescriptionInfo.token;\n                } else {\n                  token = eatUntilEOLIfNotAnnotation();\n                }\n                return token;\n\n              case THIS:\n                if (!jsdocBuilder.recordThisType(type)) {\n                  parser.addTypeWarning(\n                      \"msg.jsdoc.incompat.type\", lineno, charno);\n                }\n                break;\n\n              case TYPEDEF:\n                if (!jsdocBuilder.recordTypedef(type)) {\n                  parser.addTypeWarning(\n                      \"msg.jsdoc.incompat.type\", lineno, charno);\n                }\n                break;\n            }\n          }\n\n          return eatUntilEOLIfNotAnnotation();\n      }",
      "info" : "SwitchStatement[10186-36965]:SwitchStatement[10186-36965]"
    }, {
      "left" : "case NG_INJECT:",
      "right" : "case NG_INJECT:",
      "info" : "SwitchCase[10216-10231]:SwitchCase[10216-10231]"
    }, {
      "left" : "if (jsdocBuilder.isNgInjectRecorded())",
      "right" : "if (jsdocBuilder.isNgInjectRecorded())",
      "info" : "IfStatement[10242-10479]:IfStatement[10242-10479]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10281-10413]:Block[10281-10413]"
    }, {
      "left" : "parser.addParserWarning(\"msg.jsdoc.nginject.extra\",\n              stream.getLineno(), stream.getCharno());",
      "right" : "parser.addParserWarning(\"msg.jsdoc.nginject.extra\",\n              stream.getLineno(), stream.getCharno());",
      "info" : "ExpressionStatement[10295-10401]:ExpressionStatement[10295-10401]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10419-10479]:Block[10419-10479]"
    }, {
      "left" : "jsdocBuilder.recordNgInject(true);",
      "right" : "jsdocBuilder.recordNgInject(true);",
      "info" : "ExpressionStatement[10433-10467]:ExpressionStatement[10433-10467]"
    }, {
      "left" : "return eatUntilEOLIfNotAnnotation();",
      "right" : "return eatUntilEOLIfNotAnnotation();",
      "info" : "ReturnStatement[10490-10526]:ReturnStatement[10490-10526]"
    }, {
      "left" : "case JAGGER_INJECT:",
      "right" : "case JAGGER_INJECT:",
      "info" : "SwitchCase[10536-10555]:SwitchCase[10536-10555]"
    }, {
      "left" : "if (jsdocBuilder.isJaggerInjectRecorded())",
      "right" : "if (jsdocBuilder.isJaggerInjectRecorded())",
      "info" : "IfStatement[10566-10815]:IfStatement[10566-10815]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10609-10745]:Block[10609-10745]"
    }, {
      "left" : "parser.addParserWarning(\"msg.jsdoc.jaggerInject.extra\",\n              stream.getLineno(), stream.getCharno());",
      "right" : "parser.addParserWarning(\"msg.jsdoc.jaggerInject.extra\",\n              stream.getLineno(), stream.getCharno());",
      "info" : "ExpressionStatement[10623-10733]:ExpressionStatement[10623-10733]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10751-10815]:Block[10751-10815]"
    }, {
      "left" : "jsdocBuilder.recordJaggerInject(true);",
      "right" : "jsdocBuilder.recordJaggerInject(true);",
      "info" : "ExpressionStatement[10765-10803]:ExpressionStatement[10765-10803]"
    }, {
      "left" : "return eatUntilEOLIfNotAnnotation();",
      "right" : "return eatUntilEOLIfNotAnnotation();",
      "info" : "ReturnStatement[10826-10862]:ReturnStatement[10826-10862]"
    }, {
      "left" : "case JAGGER_MODULE:",
      "right" : "case JAGGER_MODULE:",
      "info" : "SwitchCase[10872-10891]:SwitchCase[10872-10891]"
    }, {
      "left" : "if (jsdocBuilder.isJaggerModuleRecorded())",
      "right" : "if (jsdocBuilder.isJaggerModuleRecorded())",
      "info" : "IfStatement[10902-11151]:IfStatement[10902-11151]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10945-11081]:Block[10945-11081]"
    }, {
      "left" : "parser.addParserWarning(\"msg.jsdoc.jaggerModule.extra\",\n              stream.getLineno(), stream.getCharno());",
      "right" : "parser.addParserWarning(\"msg.jsdoc.jaggerModule.extra\",\n              stream.getLineno(), stream.getCharno());",
      "info" : "ExpressionStatement[10959-11069]:ExpressionStatement[10959-11069]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11087-11151]:Block[11087-11151]"
    }, {
      "left" : "jsdocBuilder.recordJaggerModule(true);",
      "right" : "jsdocBuilder.recordJaggerModule(true);",
      "info" : "ExpressionStatement[11101-11139]:ExpressionStatement[11101-11139]"
    }, {
      "left" : "return eatUntilEOLIfNotAnnotation();",
      "right" : "return eatUntilEOLIfNotAnnotation();",
      "info" : "ReturnStatement[11162-11198]:ReturnStatement[11162-11198]"
    }, {
      "left" : "case JAGGER_PROVIDE:",
      "right" : "case JAGGER_PROVIDE:",
      "info" : "SwitchCase[11208-11228]:SwitchCase[11208-11228]"
    }, {
      "left" : "if (jsdocBuilder.isJaggerProvideRecorded())",
      "right" : "if (jsdocBuilder.isJaggerProvideRecorded())",
      "info" : "IfStatement[11239-11491]:IfStatement[11239-11491]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11283-11420]:Block[11283-11420]"
    }, {
      "left" : "parser.addParserWarning(\"msg.jsdoc.jaggerProvide.extra\",\n              stream.getLineno(), stream.getCharno());",
      "right" : "parser.addParserWarning(\"msg.jsdoc.jaggerProvide.extra\",\n              stream.getLineno(), stream.getCharno());",
      "info" : "ExpressionStatement[11297-11408]:ExpressionStatement[11297-11408]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11426-11491]:Block[11426-11491]"
    }, {
      "left" : "jsdocBuilder.recordJaggerProvide(true);",
      "right" : "jsdocBuilder.recordJaggerProvide(true);",
      "info" : "ExpressionStatement[11440-11479]:ExpressionStatement[11440-11479]"
    }, {
      "left" : "return eatUntilEOLIfNotAnnotation();",
      "right" : "return eatUntilEOLIfNotAnnotation();",
      "info" : "ReturnStatement[11502-11538]:ReturnStatement[11502-11538]"
    }, {
      "left" : "case AUTHOR:",
      "right" : "case AUTHOR:",
      "info" : "SwitchCase[11548-11560]:SwitchCase[11548-11560]"
    }, {
      "left" : "if (jsdocBuilder.shouldParseDocumentation())",
      "right" : "if (jsdocBuilder.shouldParseDocumentation())",
      "info" : "IfStatement[11571-12095]:IfStatement[11571-12095]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11616-12026]:Block[11616-12026]"
    }, {
      "left" : "ExtractionInfo authorInfo = extractSingleLineBlock();",
      "right" : "ExtractionInfo authorInfo = extractSingleLineBlock();",
      "info" : "VariableDeclarationStatement[11630-11683]:VariableDeclarationStatement[11630-11683]"
    }, {
      "left" : "String author = authorInfo.string;",
      "right" : "String author = authorInfo.string;",
      "info" : "VariableDeclarationStatement[11696-11730]:VariableDeclarationStatement[11696-11730]"
    }, {
      "left" : "if (author.length() == 0)",
      "right" : "if (author.length() == 0)",
      "info" : "IfStatement[11744-11976]:IfStatement[11744-11976]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11770-11909]:Block[11770-11909]"
    }, {
      "left" : "parser.addParserWarning(\"msg.jsdoc.authormissing\",\n                  stream.getLineno(), stream.getCharno());",
      "right" : "parser.addParserWarning(\"msg.jsdoc.authormissing\",\n                  stream.getLineno(), stream.getCharno());",
      "info" : "ExpressionStatement[11786-11895]:ExpressionStatement[11786-11895]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11915-11976]:Block[11915-11976]"
    }, {
      "left" : "jsdocBuilder.addAuthor(author);",
      "right" : "jsdocBuilder.addAuthor(author);",
      "info" : "ExpressionStatement[11931-11962]:ExpressionStatement[11931-11962]"
    }, {
      "left" : "token = authorInfo.token;",
      "right" : "token = authorInfo.token;",
      "info" : "ExpressionStatement[11989-12014]:ExpressionStatement[11989-12014]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12032-12095]:Block[12032-12095]"
    }, {
      "left" : "token = eatUntilEOLIfNotAnnotation();",
      "right" : "token = eatUntilEOLIfNotAnnotation();",
      "info" : "ExpressionStatement[12046-12083]:ExpressionStatement[12046-12083]"
    }, {
      "left" : "return token;",
      "right" : "return token;",
      "info" : "ReturnStatement[12106-12119]:ReturnStatement[12106-12119]"
    }, {
      "left" : "case CONSISTENTIDGENERATOR:",
      "right" : "case CONSISTENTIDGENERATOR:",
      "info" : "SwitchCase[12129-12156]:SwitchCase[12129-12156]"
    }, {
      "left" : "if (!jsdocBuilder.recordConsistentIdGenerator())",
      "right" : "if (!jsdocBuilder.recordConsistentIdGenerator())",
      "info" : "IfStatement[12167-12346]:IfStatement[12167-12346]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12216-12346]:Block[12216-12346]"
    }, {
      "left" : "parser.addParserWarning(\"msg.jsdoc.consistidgen\",\n              stream.getLineno(), stream.getCharno());",
      "right" : "parser.addParserWarning(\"msg.jsdoc.consistidgen\",\n              stream.getLineno(), stream.getCharno());",
      "info" : "ExpressionStatement[12230-12334]:ExpressionStatement[12230-12334]"
    }, {
      "left" : "return eatUntilEOLIfNotAnnotation();",
      "right" : "return eatUntilEOLIfNotAnnotation();",
      "info" : "ReturnStatement[12357-12393]:ReturnStatement[12357-12393]"
    }, {
      "left" : "case STRUCT:",
      "right" : "case STRUCT:",
      "info" : "SwitchCase[12403-12415]:SwitchCase[12403-12415]"
    }, {
      "left" : "if (!jsdocBuilder.recordStruct())",
      "right" : "if (!jsdocBuilder.recordStruct())",
      "info" : "IfStatement[12426-12643]:IfStatement[12426-12643]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12460-12643]:Block[12460-12643]"
    }, {
      "left" : "parser.addTypeWarning(\"msg.jsdoc.incompat.type\",\n                                  stream.getLineno(),\n                                  stream.getCharno());",
      "right" : "parser.addTypeWarning(\"msg.jsdoc.incompat.type\",\n                                  stream.getLineno(),\n                                  stream.getCharno());",
      "info" : "ExpressionStatement[12474-12631]:ExpressionStatement[12474-12631]"
    }, {
      "left" : "return eatUntilEOLIfNotAnnotation();",
      "right" : "return eatUntilEOLIfNotAnnotation();",
      "info" : "ReturnStatement[12654-12690]:ReturnStatement[12654-12690]"
    }, {
      "left" : "case DICT:",
      "right" : "case DICT:",
      "info" : "SwitchCase[12700-12710]:SwitchCase[12700-12710]"
    }, {
      "left" : "if (!jsdocBuilder.recordDict())",
      "right" : "if (!jsdocBuilder.recordDict())",
      "info" : "IfStatement[12721-12936]:IfStatement[12721-12936]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12753-12936]:Block[12753-12936]"
    }, {
      "left" : "parser.addTypeWarning(\"msg.jsdoc.incompat.type\",\n                                  stream.getLineno(),\n                                  stream.getCharno());",
      "right" : "parser.addTypeWarning(\"msg.jsdoc.incompat.type\",\n                                  stream.getLineno(),\n                                  stream.getCharno());",
      "info" : "ExpressionStatement[12767-12924]:ExpressionStatement[12767-12924]"
    }, {
      "left" : "return eatUntilEOLIfNotAnnotation();",
      "right" : "return eatUntilEOLIfNotAnnotation();",
      "info" : "ReturnStatement[12947-12983]:ReturnStatement[12947-12983]"
    }, {
      "left" : "case CONSTRUCTOR:",
      "right" : "case CONSTRUCTOR:",
      "info" : "SwitchCase[12993-13010]:SwitchCase[12993-13010]"
    }, {
      "left" : "if (!jsdocBuilder.recordConstructor())",
      "right" : "if (!jsdocBuilder.recordConstructor())",
      "info" : "IfStatement[13021-13414]:IfStatement[13021-13414]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13060-13414]:Block[13060-13414]"
    }, {
      "left" : "if (jsdocBuilder.isInterfaceRecorded())",
      "right" : "if (jsdocBuilder.isInterfaceRecorded())",
      "info" : "IfStatement[13074-13402]:IfStatement[13074-13402]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13114-13259]:Block[13114-13259]"
    }, {
      "left" : "parser.addTypeWarning(\"msg.jsdoc.interface.constructor\",\n                  stream.getLineno(), stream.getCharno());",
      "right" : "parser.addTypeWarning(\"msg.jsdoc.interface.constructor\",\n                  stream.getLineno(), stream.getCharno());",
      "info" : "ExpressionStatement[13130-13245]:ExpressionStatement[13130-13245]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13265-13402]:Block[13265-13402]"
    }, {
      "left" : "parser.addTypeWarning(\"msg.jsdoc.incompat.type\",\n                  stream.getLineno(), stream.getCharno());",
      "right" : "parser.addTypeWarning(\"msg.jsdoc.incompat.type\",\n                  stream.getLineno(), stream.getCharno());",
      "info" : "ExpressionStatement[13281-13388]:ExpressionStatement[13281-13388]"
    }, {
      "left" : "return eatUntilEOLIfNotAnnotation();",
      "right" : "return eatUntilEOLIfNotAnnotation();",
      "info" : "ReturnStatement[13425-13461]:ReturnStatement[13425-13461]"
    }, {
      "left" : "case DEPRECATED:",
      "right" : "case DEPRECATED:",
      "info" : "SwitchCase[13471-13487]:SwitchCase[13471-13487]"
    }, {
      "left" : "if (!jsdocBuilder.recordDeprecated())",
      "right" : "if (!jsdocBuilder.recordDeprecated())",
      "info" : "IfStatement[13498-13666]:IfStatement[13498-13666]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13536-13666]:Block[13536-13666]"
    }, {
      "left" : "parser.addParserWarning(\"msg.jsdoc.deprecated\",\n                stream.getLineno(), stream.getCharno());",
      "right" : "parser.addParserWarning(\"msg.jsdoc.deprecated\",\n                stream.getLineno(), stream.getCharno());",
      "info" : "ExpressionStatement[13550-13654]:ExpressionStatement[13550-13654]"
    }, {
      "left" : "ExtractionInfo reasonInfo =\n              extractMultilineTextualBlock(token);",
      "right" : "ExtractionInfo reasonInfo =\n              extractMultilineTextualBlock(token);",
      "info" : "VariableDeclarationStatement[13728-13806]:VariableDeclarationStatement[13728-13806]"
    }, {
      "left" : "String reason = reasonInfo.string;",
      "right" : "String reason = reasonInfo.string;",
      "info" : "VariableDeclarationStatement[13818-13852]:VariableDeclarationStatement[13818-13852]"
    }, {
      "left" : "if (reason.length() > 0)",
      "right" : "if (reason.length() > 0)",
      "info" : "IfStatement[13864-13960]:IfStatement[13864-13960]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13889-13960]:Block[13889-13960]"
    }, {
      "left" : "jsdocBuilder.recordDeprecationReason(reason);",
      "right" : "jsdocBuilder.recordDeprecationReason(reason);",
      "info" : "ExpressionStatement[13903-13948]:ExpressionStatement[13903-13948]"
    }, {
      "left" : "token = reasonInfo.token;",
      "right" : "token = reasonInfo.token;",
      "info" : "ExpressionStatement[13972-13997]:ExpressionStatement[13972-13997]"
    }, {
      "left" : "return token;",
      "right" : "return token;",
      "info" : "ReturnStatement[14008-14021]:ReturnStatement[14008-14021]"
    }, {
      "left" : "case INTERFACE:",
      "right" : "case INTERFACE:",
      "info" : "SwitchCase[14031-14046]:SwitchCase[14031-14046]"
    }, {
      "left" : "if (!jsdocBuilder.recordInterface())",
      "right" : "if (!jsdocBuilder.recordInterface())",
      "info" : "IfStatement[14057-14450]:IfStatement[14057-14450]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14094-14450]:Block[14094-14450]"
    }, {
      "left" : "if (jsdocBuilder.isConstructorRecorded())",
      "right" : "if (jsdocBuilder.isConstructorRecorded())",
      "info" : "IfStatement[14108-14438]:IfStatement[14108-14438]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14150-14295]:Block[14150-14295]"
    }, {
      "left" : "parser.addTypeWarning(\"msg.jsdoc.interface.constructor\",\n                  stream.getLineno(), stream.getCharno());",
      "right" : "parser.addTypeWarning(\"msg.jsdoc.interface.constructor\",\n                  stream.getLineno(), stream.getCharno());",
      "info" : "ExpressionStatement[14166-14281]:ExpressionStatement[14166-14281]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14301-14438]:Block[14301-14438]"
    }, {
      "left" : "parser.addTypeWarning(\"msg.jsdoc.incompat.type\",\n                  stream.getLineno(), stream.getCharno());",
      "right" : "parser.addTypeWarning(\"msg.jsdoc.incompat.type\",\n                  stream.getLineno(), stream.getCharno());",
      "info" : "ExpressionStatement[14317-14424]:ExpressionStatement[14317-14424]"
    }, {
      "left" : "return eatUntilEOLIfNotAnnotation();",
      "right" : "return eatUntilEOLIfNotAnnotation();",
      "info" : "ReturnStatement[14461-14497]:ReturnStatement[14461-14497]"
    }, {
      "left" : "case DESC:",
      "right" : "case DESC:",
      "info" : "SwitchCase[14507-14517]:SwitchCase[14507-14517]"
    }, {
      "left" : "if (jsdocBuilder.isDescriptionRecorded())",
      "right" : "if (jsdocBuilder.isDescriptionRecorded())",
      "info" : "IfStatement[14528-15051]:IfStatement[14528-15051]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14570-14749]:Block[14570-14749]"
    }, {
      "left" : "parser.addParserWarning(\"msg.jsdoc.desc.extra\",\n                stream.getLineno(), stream.getCharno());",
      "right" : "parser.addParserWarning(\"msg.jsdoc.desc.extra\",\n                stream.getLineno(), stream.getCharno());",
      "info" : "ExpressionStatement[14584-14688]:ExpressionStatement[14584-14688]"
    }, {
      "left" : "return eatUntilEOLIfNotAnnotation();",
      "right" : "return eatUntilEOLIfNotAnnotation();",
      "info" : "ReturnStatement[14701-14737]:ReturnStatement[14701-14737]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14755-15051]:Block[14755-15051]"
    }, {
      "left" : "ExtractionInfo descriptionInfo =\n                extractMultilineTextualBlock(token);",
      "right" : "ExtractionInfo descriptionInfo =\n                extractMultilineTextualBlock(token);",
      "info" : "VariableDeclarationStatement[14769-14854]:VariableDeclarationStatement[14769-14854]"
    }, {
      "left" : "String description = descriptionInfo.string;",
      "right" : "String description = descriptionInfo.string;",
      "info" : "VariableDeclarationStatement[14868-14912]:VariableDeclarationStatement[14868-14912]"
    }, {
      "left" : "jsdocBuilder.recordDescription(description);",
      "right" : "jsdocBuilder.recordDescription(description);",
      "info" : "ExpressionStatement[14926-14970]:ExpressionStatement[14926-14970]"
    }, {
      "left" : "token = descriptionInfo.token;",
      "right" : "token = descriptionInfo.token;",
      "info" : "ExpressionStatement[14983-15013]:ExpressionStatement[14983-15013]"
    }, {
      "left" : "return token;",
      "right" : "return token;",
      "info" : "ReturnStatement[15026-15039]:ReturnStatement[15026-15039]"
    }, {
      "left" : "case FILE_OVERVIEW:",
      "right" : "case FILE_OVERVIEW:",
      "info" : "SwitchCase[15061-15080]:SwitchCase[15061-15080]"
    }, {
      "left" : "String fileOverview = \"\";",
      "right" : "String fileOverview = \"\";",
      "info" : "VariableDeclarationStatement[15091-15116]:VariableDeclarationStatement[15091-15116]"
    }, {
      "left" : "if (jsdocBuilder.shouldParseDocumentation())",
      "right" : "if (jsdocBuilder.shouldParseDocumentation())",
      "info" : "IfStatement[15127-15490]:IfStatement[15127-15490]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15172-15425]:Block[15172-15425]"
    }, {
      "left" : "ExtractionInfo fileOverviewInfo =\n                extractMultilineTextualBlock(token,\n                    WhitespaceOption.TRIM);",
      "right" : "ExtractionInfo fileOverviewInfo =\n                extractMultilineTextualBlock(token,\n                    WhitespaceOption.TRIM);",
      "info" : "VariableDeclarationStatement[15186-15315]:VariableDeclarationStatement[15186-15315]"
    }, {
      "left" : "fileOverview = fileOverviewInfo.string;",
      "right" : "fileOverview = fileOverviewInfo.string;",
      "info" : "ExpressionStatement[15329-15368]:ExpressionStatement[15329-15368]"
    }, {
      "left" : "token = fileOverviewInfo.token;",
      "right" : "token = fileOverviewInfo.token;",
      "info" : "ExpressionStatement[15382-15413]:ExpressionStatement[15382-15413]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15431-15490]:Block[15431-15490]"
    }, {
      "left" : "token = eatTokensUntilEOL(token);",
      "right" : "token = eatTokensUntilEOL(token);",
      "info" : "ExpressionStatement[15445-15478]:ExpressionStatement[15445-15478]"
    }, {
      "left" : "if (!jsdocBuilder.recordFileOverview(fileOverview))",
      "right" : "if (!jsdocBuilder.recordFileOverview(fileOverview))",
      "info" : "IfStatement[15502-15692]:IfStatement[15502-15692]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15554-15692]:Block[15554-15692]"
    }, {
      "left" : "parser.addParserWarning(\"msg.jsdoc.fileoverview.extra\",\n                stream.getLineno(), stream.getCharno());",
      "right" : "parser.addParserWarning(\"msg.jsdoc.fileoverview.extra\",\n                stream.getLineno(), stream.getCharno());",
      "info" : "ExpressionStatement[15568-15680]:ExpressionStatement[15568-15680]"
    }, {
      "left" : "return token;",
      "right" : "return token;",
      "info" : "ReturnStatement[15703-15716]:ReturnStatement[15703-15716]"
    }, {
      "left" : "case LICENSE:",
      "right" : "case LICENSE:",
      "info" : "SwitchCase[15726-15739]:SwitchCase[15726-15739]"
    }, {
      "left" : "case PRESERVE:",
      "right" : "case PRESERVE:",
      "info" : "SwitchCase[15748-15762]:SwitchCase[15748-15762]"
    }, {
      "left" : "ExtractionInfo preserveInfo =\n              extractMultilineTextualBlock(token,\n                                           WhitespaceOption.PRESERVE);",
      "right" : "ExtractionInfo preserveInfo =\n              extractMultilineTextualBlock(token,\n                                           WhitespaceOption.PRESERVE);",
      "info" : "VariableDeclarationStatement[15773-15923]:VariableDeclarationStatement[15773-15923]"
    }, {
      "left" : "String preserve = preserveInfo.string;",
      "right" : "String preserve = preserveInfo.string;",
      "info" : "VariableDeclarationStatement[15935-15973]:VariableDeclarationStatement[15935-15973]"
    }, {
      "left" : "if (preserve.length() > 0)",
      "right" : "if (preserve.length() > 0)",
      "info" : "IfStatement[15985-16142]:IfStatement[15985-16142]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16012-16142]:Block[16012-16142]"
    }, {
      "left" : "if (fileLevelJsDocBuilder != null)",
      "right" : "if (fileLevelJsDocBuilder != null)",
      "info" : "IfStatement[16026-16130]:IfStatement[16026-16130]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16061-16130]:Block[16061-16130]"
    }, {
      "left" : "fileLevelJsDocBuilder.append(preserve);",
      "right" : "fileLevelJsDocBuilder.append(preserve);",
      "info" : "ExpressionStatement[16077-16116]:ExpressionStatement[16077-16116]"
    }, {
      "left" : "token = preserveInfo.token;",
      "right" : "token = preserveInfo.token;",
      "info" : "ExpressionStatement[16154-16181]:ExpressionStatement[16154-16181]"
    }, {
      "left" : "return token;",
      "right" : "return token;",
      "info" : "ReturnStatement[16192-16205]:ReturnStatement[16192-16205]"
    }, {
      "left" : "case ENUM:",
      "right" : "case ENUM:",
      "info" : "SwitchCase[16215-16225]:SwitchCase[16215-16225]"
    }, {
      "left" : "token = next();",
      "right" : "token = next();",
      "info" : "ExpressionStatement[16236-16251]:ExpressionStatement[16236-16251]"
    }, {
      "left" : "lineno = stream.getLineno();",
      "right" : "lineno = stream.getLineno();",
      "info" : "ExpressionStatement[16262-16290]:ExpressionStatement[16262-16290]"
    }, {
      "left" : "charno = stream.getCharno();",
      "right" : "charno = stream.getCharno();",
      "info" : "ExpressionStatement[16301-16329]:ExpressionStatement[16301-16329]"
    }, {
      "left" : "type = null;",
      "right" : "type = null;",
      "info" : "ExpressionStatement[16341-16353]:ExpressionStatement[16341-16353]"
    }, {
      "left" : "if (token != JsDocToken.EOL && token != JsDocToken.EOC)",
      "right" : "if (token != JsDocToken.EOL && token != JsDocToken.EOC)",
      "info" : "IfStatement[16364-16524]:IfStatement[16364-16524]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16420-16524]:Block[16420-16524]"
    }, {
      "left" : "type = createJSTypeExpression(\n                parseAndRecordTypeNode(token));",
      "right" : "type = createJSTypeExpression(\n                parseAndRecordTypeNode(token));",
      "info" : "ExpressionStatement[16434-16512]:ExpressionStatement[16434-16512]"
    }, {
      "left" : "if (type == null)",
      "right" : "if (type == null)",
      "info" : "IfStatement[16536-16635]:IfStatement[16536-16635]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16554-16635]:Block[16554-16635]"
    }, {
      "left" : "type = createJSTypeExpression(newStringNode(\"number\"));",
      "right" : "type = createJSTypeExpression(newStringNode(\"number\"));",
      "info" : "ExpressionStatement[16568-16623]:ExpressionStatement[16568-16623]"
    }, {
      "left" : "if (!jsdocBuilder.recordEnumParameterType(type))",
      "right" : "if (!jsdocBuilder.recordEnumParameterType(type))",
      "info" : "IfStatement[16646-16803]:IfStatement[16646-16803]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16695-16803]:Block[16695-16803]"
    }, {
      "left" : "parser.addTypeWarning(\n                \"msg.jsdoc.incompat.type\", lineno, charno);",
      "right" : "parser.addTypeWarning(\n                \"msg.jsdoc.incompat.type\", lineno, charno);",
      "info" : "ExpressionStatement[16709-16791]:ExpressionStatement[16709-16791]"
    }, {
      "left" : "token = eatUntilEOLIfNotAnnotation(token);",
      "right" : "token = eatUntilEOLIfNotAnnotation(token);",
      "info" : "ExpressionStatement[16814-16856]:ExpressionStatement[16814-16856]"
    }, {
      "left" : "return token;",
      "right" : "return token;",
      "info" : "ReturnStatement[16867-16880]:ReturnStatement[16867-16880]"
    }, {
      "left" : "case EXPORT:",
      "right" : "case EXPORT:",
      "info" : "SwitchCase[16890-16902]:SwitchCase[16890-16902]"
    }, {
      "left" : "if (!jsdocBuilder.recordExport())",
      "right" : "if (!jsdocBuilder.recordExport())",
      "info" : "IfStatement[16913-17073]:IfStatement[16913-17073]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16947-17073]:Block[16947-17073]"
    }, {
      "left" : "parser.addParserWarning(\"msg.jsdoc.export\",\n                stream.getLineno(), stream.getCharno());",
      "right" : "parser.addParserWarning(\"msg.jsdoc.export\",\n                stream.getLineno(), stream.getCharno());",
      "info" : "ExpressionStatement[16961-17061]:ExpressionStatement[16961-17061]"
    }, {
      "left" : "return eatUntilEOLIfNotAnnotation();",
      "right" : "return eatUntilEOLIfNotAnnotation();",
      "info" : "ReturnStatement[17084-17120]:ReturnStatement[17084-17120]"
    }, {
      "left" : "case EXPOSE:",
      "right" : "case EXPOSE:",
      "info" : "SwitchCase[17130-17142]:SwitchCase[17130-17142]"
    }, {
      "left" : "if (!jsdocBuilder.recordExpose())",
      "right" : "if (!jsdocBuilder.recordExpose())",
      "info" : "IfStatement[17153-17313]:IfStatement[17153-17313]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17187-17313]:Block[17187-17313]"
    }, {
      "left" : "parser.addParserWarning(\"msg.jsdoc.expose\",\n                stream.getLineno(), stream.getCharno());",
      "right" : "parser.addParserWarning(\"msg.jsdoc.expose\",\n                stream.getLineno(), stream.getCharno());",
      "info" : "ExpressionStatement[17201-17301]:ExpressionStatement[17201-17301]"
    }, {
      "left" : "return eatUntilEOLIfNotAnnotation();",
      "right" : "return eatUntilEOLIfNotAnnotation();",
      "info" : "ReturnStatement[17324-17360]:ReturnStatement[17324-17360]"
    }, {
      "left" : "case EXTERNS:",
      "right" : "case EXTERNS:",
      "info" : "SwitchCase[17370-17383]:SwitchCase[17370-17383]"
    }, {
      "left" : "if (!jsdocBuilder.recordExterns())",
      "right" : "if (!jsdocBuilder.recordExterns())",
      "info" : "IfStatement[17394-17556]:IfStatement[17394-17556]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17429-17556]:Block[17429-17556]"
    }, {
      "left" : "parser.addParserWarning(\"msg.jsdoc.externs\",\n                stream.getLineno(), stream.getCharno());",
      "right" : "parser.addParserWarning(\"msg.jsdoc.externs\",\n                stream.getLineno(), stream.getCharno());",
      "info" : "ExpressionStatement[17443-17544]:ExpressionStatement[17443-17544]"
    }, {
      "left" : "return eatUntilEOLIfNotAnnotation();",
      "right" : "return eatUntilEOLIfNotAnnotation();",
      "info" : "ReturnStatement[17567-17603]:ReturnStatement[17567-17603]"
    }, {
      "left" : "case JAVA_DISPATCH:",
      "right" : "case JAVA_DISPATCH:",
      "info" : "SwitchCase[17613-17632]:SwitchCase[17613-17632]"
    }, {
      "left" : "if (!jsdocBuilder.recordJavaDispatch())",
      "right" : "if (!jsdocBuilder.recordJavaDispatch())",
      "info" : "IfStatement[17643-17815]:IfStatement[17643-17815]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17683-17815]:Block[17683-17815]"
    }, {
      "left" : "parser.addParserWarning(\"msg.jsdoc.javadispatch\",\n                stream.getLineno(), stream.getCharno());",
      "right" : "parser.addParserWarning(\"msg.jsdoc.javadispatch\",\n                stream.getLineno(), stream.getCharno());",
      "info" : "ExpressionStatement[17697-17803]:ExpressionStatement[17697-17803]"
    }, {
      "left" : "return eatUntilEOLIfNotAnnotation();",
      "right" : "return eatUntilEOLIfNotAnnotation();",
      "info" : "ReturnStatement[17826-17862]:ReturnStatement[17826-17862]"
    }, {
      "left" : "case EXTENDS:",
      "right" : "case EXTENDS:",
      "info" : "SwitchCase[17872-17885]:SwitchCase[17872-17885]"
    }, {
      "left" : "case IMPLEMENTS:",
      "right" : "case IMPLEMENTS:",
      "info" : "SwitchCase[17894-17910]:SwitchCase[17894-17910]"
    }, {
      "left" : "skipEOLs();",
      "right" : "skipEOLs();",
      "info" : "ExpressionStatement[17921-17932]:ExpressionStatement[17921-17932]"
    }, {
      "left" : "token = next();",
      "right" : "token = next();",
      "info" : "ExpressionStatement[17943-17958]:ExpressionStatement[17943-17958]"
    }, {
      "left" : "lineno = stream.getLineno();",
      "right" : "lineno = stream.getLineno();",
      "info" : "ExpressionStatement[17969-17997]:ExpressionStatement[17969-17997]"
    }, {
      "left" : "charno = stream.getCharno();",
      "right" : "charno = stream.getCharno();",
      "info" : "ExpressionStatement[18008-18036]:ExpressionStatement[18008-18036]"
    }, {
      "left" : "boolean matchingRc = false;",
      "right" : "boolean matchingRc = false;",
      "info" : "VariableDeclarationStatement[18047-18074]:VariableDeclarationStatement[18047-18074]"
    }, {
      "left" : "if (token == JsDocToken.LC)",
      "right" : "if (token == JsDocToken.LC)",
      "info" : "IfStatement[18086-18186]:IfStatement[18086-18186]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18114-18186]:Block[18114-18186]"
    }, {
      "left" : "token = next();",
      "right" : "token = next();",
      "info" : "ExpressionStatement[18128-18143]:ExpressionStatement[18128-18143]"
    }, {
      "left" : "matchingRc = true;",
      "right" : "matchingRc = true;",
      "info" : "ExpressionStatement[18156-18174]:ExpressionStatement[18156-18174]"
    }, {
      "left" : "if (token == JsDocToken.STRING)",
      "right" : "if (token == JsDocToken.STRING)",
      "info" : "IfStatement[18198-19741]:IfStatement[18198-19741]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18230-19651]:Block[18230-19651]"
    }, {
      "left" : "Node typeNode = parseAndRecordTypeNameNode(\n                token, lineno, charno, matchingRc);",
      "right" : "Node typeNode = parseAndRecordTypeNameNode(\n                token, lineno, charno, matchingRc);",
      "info" : "VariableDeclarationStatement[18244-18339]:VariableDeclarationStatement[18244-18339]"
    }, {
      "left" : "lineno = stream.getLineno();",
      "right" : "lineno = stream.getLineno();",
      "info" : "ExpressionStatement[18353-18381]:ExpressionStatement[18353-18381]"
    }, {
      "left" : "charno = stream.getCharno();",
      "right" : "charno = stream.getCharno();",
      "info" : "ExpressionStatement[18394-18422]:ExpressionStatement[18394-18422]"
    }, {
      "left" : "typeNode = wrapNode(Token.BANG, typeNode);",
      "right" : "typeNode = wrapNode(Token.BANG, typeNode);",
      "info" : "ExpressionStatement[18436-18478]:ExpressionStatement[18436-18478]"
    }, {
      "left" : "type = createJSTypeExpression(typeNode);",
      "right" : "type = createJSTypeExpression(typeNode);",
      "info" : "ExpressionStatement[18491-18531]:ExpressionStatement[18491-18531]"
    }, {
      "left" : "if (annotation == Annotation.EXTENDS)",
      "right" : "if (annotation == Annotation.EXTENDS)",
      "info" : "IfStatement[18545-19083]:IfStatement[18545-19083]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18583-18773]:Block[18583-18773]"
    }, {
      "left" : "extendedTypes.add(new ExtendedTypeInfo(\n                  type, stream.getLineno(), stream.getCharno()));",
      "right" : "extendedTypes.add(new ExtendedTypeInfo(\n                  type, stream.getLineno(), stream.getCharno()));",
      "info" : "ExpressionStatement[18654-18759]:ExpressionStatement[18654-18759]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18779-19083]:Block[18779-19083]"
    }, {
      "left" : "Preconditions.checkState(\n                  annotation == Annotation.IMPLEMENTS);",
      "right" : "Preconditions.checkState(\n                  annotation == Annotation.IMPLEMENTS);",
      "info" : "ExpressionStatement[18795-18876]:ExpressionStatement[18795-18876]"
    }, {
      "left" : "if (!jsdocBuilder.recordImplementedInterface(type))",
      "right" : "if (!jsdocBuilder.recordImplementedInterface(type))",
      "info" : "IfStatement[18891-19069]:IfStatement[18891-19069]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18943-19069]:Block[18943-19069]"
    }, {
      "left" : "parser.addTypeWarning(\"msg.jsdoc.implements.duplicate\",\n                    lineno, charno);",
      "right" : "parser.addTypeWarning(\"msg.jsdoc.implements.duplicate\",\n                    lineno, charno);",
      "info" : "ExpressionStatement[18961-19053]:ExpressionStatement[18961-19053]"
    }, {
      "left" : "token = next();",
      "right" : "token = next();",
      "info" : "ExpressionStatement[19096-19111]:ExpressionStatement[19096-19111]"
    }, {
      "left" : "if (matchingRc)",
      "right" : "if (matchingRc)",
      "info" : "IfStatement[19124-19639]:IfStatement[19124-19639]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19140-19393]:Block[19140-19393]"
    }, {
      "left" : "if (token != JsDocToken.RC)",
      "right" : "if (token != JsDocToken.RC)",
      "info" : "IfStatement[19156-19379]:IfStatement[19156-19379]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19184-19324]:Block[19184-19324]"
    }, {
      "left" : "parser.addTypeWarning(\"msg.jsdoc.missing.rc\",\n                    stream.getLineno(), stream.getCharno());",
      "right" : "parser.addTypeWarning(\"msg.jsdoc.missing.rc\",\n                    stream.getLineno(), stream.getCharno());",
      "info" : "ExpressionStatement[19202-19308]:ExpressionStatement[19202-19308]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19330-19379]:Block[19330-19379]"
    }, {
      "left" : "token = next();",
      "right" : "token = next();",
      "info" : "ExpressionStatement[19348-19363]:ExpressionStatement[19348-19363]"
    }, {
      "left" : "if (token != JsDocToken.EOL &&\n                token != JsDocToken.EOF && token != JsDocToken.EOC)",
      "right" : "if (token != JsDocToken.EOL &&\n                token != JsDocToken.EOF && token != JsDocToken.EOC)",
      "info" : "IfStatement[19399-19639]:IfStatement[19399-19639]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19498-19639]:Block[19498-19639]"
    }, {
      "left" : "parser.addTypeWarning(\"msg.end.annotation.expected\",\n                  stream.getLineno(), stream.getCharno());",
      "right" : "parser.addTypeWarning(\"msg.end.annotation.expected\",\n                  stream.getLineno(), stream.getCharno());",
      "info" : "ExpressionStatement[19514-19625]:ExpressionStatement[19514-19625]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19657-19741]:Block[19657-19741]"
    }, {
      "left" : "parser.addTypeWarning(\"msg.no.type.name\", lineno, charno);",
      "right" : "parser.addTypeWarning(\"msg.no.type.name\", lineno, charno);",
      "info" : "ExpressionStatement[19671-19729]:ExpressionStatement[19671-19729]"
    }, {
      "left" : "token = eatUntilEOLIfNotAnnotation(token);",
      "right" : "token = eatUntilEOLIfNotAnnotation(token);",
      "info" : "ExpressionStatement[19752-19794]:ExpressionStatement[19752-19794]"
    }, {
      "left" : "return token;",
      "right" : "return token;",
      "info" : "ReturnStatement[19805-19818]:ReturnStatement[19805-19818]"
    }, {
      "left" : "case HIDDEN:",
      "right" : "case HIDDEN:",
      "info" : "SwitchCase[19828-19840]:SwitchCase[19828-19840]"
    }, {
      "left" : "if (!jsdocBuilder.recordHiddenness())",
      "right" : "if (!jsdocBuilder.recordHiddenness())",
      "info" : "IfStatement[19851-20015]:IfStatement[19851-20015]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19889-20015]:Block[19889-20015]"
    }, {
      "left" : "parser.addParserWarning(\"msg.jsdoc.hidden\",\n                stream.getLineno(), stream.getCharno());",
      "right" : "parser.addParserWarning(\"msg.jsdoc.hidden\",\n                stream.getLineno(), stream.getCharno());",
      "info" : "ExpressionStatement[19903-20003]:ExpressionStatement[19903-20003]"
    }, {
      "left" : "return eatUntilEOLIfNotAnnotation();",
      "right" : "return eatUntilEOLIfNotAnnotation();",
      "info" : "ReturnStatement[20026-20062]:ReturnStatement[20026-20062]"
    }, {
      "left" : "case LENDS:",
      "right" : "case LENDS:",
      "info" : "SwitchCase[20072-20083]:SwitchCase[20072-20083]"
    }, {
      "left" : "skipEOLs();",
      "right" : "skipEOLs();",
      "info" : "ExpressionStatement[20094-20105]:ExpressionStatement[20094-20105]"
    }, {
      "left" : "matchingRc = false;",
      "right" : "matchingRc = false;",
      "info" : "ExpressionStatement[20117-20136]:ExpressionStatement[20117-20136]"
    }, {
      "left" : "if (match(JsDocToken.LC))",
      "right" : "if (match(JsDocToken.LC))",
      "info" : "IfStatement[20147-20245]:IfStatement[20147-20245]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20173-20245]:Block[20173-20245]"
    }, {
      "left" : "token = next();",
      "right" : "token = next();",
      "info" : "ExpressionStatement[20187-20202]:ExpressionStatement[20187-20202]"
    }, {
      "left" : "matchingRc = true;",
      "right" : "matchingRc = true;",
      "info" : "ExpressionStatement[20215-20233]:ExpressionStatement[20215-20233]"
    }, {
      "left" : "if (match(JsDocToken.STRING))",
      "right" : "if (match(JsDocToken.STRING))",
      "info" : "IfStatement[20257-20671]:IfStatement[20257-20671]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20287-20534]:Block[20287-20534]"
    }, {
      "left" : "token = next();",
      "right" : "token = next();",
      "info" : "ExpressionStatement[20301-20316]:ExpressionStatement[20301-20316]"
    }, {
      "left" : "if (!jsdocBuilder.recordLends(stream.getString()))",
      "right" : "if (!jsdocBuilder.recordLends(stream.getString()))",
      "info" : "IfStatement[20329-20522]:IfStatement[20329-20522]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20380-20522]:Block[20380-20522]"
    }, {
      "left" : "parser.addTypeWarning(\"msg.jsdoc.lends.incompatible\",\n                  stream.getLineno(), stream.getCharno());",
      "right" : "parser.addTypeWarning(\"msg.jsdoc.lends.incompatible\",\n                  stream.getLineno(), stream.getCharno());",
      "info" : "ExpressionStatement[20396-20508]:ExpressionStatement[20396-20508]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20540-20671]:Block[20540-20671]"
    }, {
      "left" : "parser.addTypeWarning(\"msg.jsdoc.lends.missing\",\n                stream.getLineno(), stream.getCharno());",
      "right" : "parser.addTypeWarning(\"msg.jsdoc.lends.missing\",\n                stream.getLineno(), stream.getCharno());",
      "info" : "ExpressionStatement[20554-20659]:ExpressionStatement[20554-20659]"
    }, {
      "left" : "if (matchingRc && !match(JsDocToken.RC))",
      "right" : "if (matchingRc && !match(JsDocToken.RC))",
      "info" : "IfStatement[20683-20852]:IfStatement[20683-20852]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20724-20852]:Block[20724-20852]"
    }, {
      "left" : "parser.addTypeWarning(\"msg.jsdoc.missing.rc\",\n                stream.getLineno(), stream.getCharno());",
      "right" : "parser.addTypeWarning(\"msg.jsdoc.missing.rc\",\n                stream.getLineno(), stream.getCharno());",
      "info" : "ExpressionStatement[20738-20840]:ExpressionStatement[20738-20840]"
    }, {
      "left" : "return eatUntilEOLIfNotAnnotation();",
      "right" : "return eatUntilEOLIfNotAnnotation();",
      "info" : "ReturnStatement[20863-20899]:ReturnStatement[20863-20899]"
    }, {
      "left" : "case MEANING:",
      "right" : "case MEANING:",
      "info" : "SwitchCase[20909-20922]:SwitchCase[20909-20922]"
    }, {
      "left" : "ExtractionInfo meaningInfo =\n              extractMultilineTextualBlock(token);",
      "right" : "ExtractionInfo meaningInfo =\n              extractMultilineTextualBlock(token);",
      "info" : "VariableDeclarationStatement[20933-21012]:VariableDeclarationStatement[20933-21012]"
    }, {
      "left" : "String meaning = meaningInfo.string;",
      "right" : "String meaning = meaningInfo.string;",
      "info" : "VariableDeclarationStatement[21023-21059]:VariableDeclarationStatement[21023-21059]"
    }, {
      "left" : "token = meaningInfo.token;",
      "right" : "token = meaningInfo.token;",
      "info" : "ExpressionStatement[21070-21096]:ExpressionStatement[21070-21096]"
    }, {
      "left" : "if (!jsdocBuilder.recordMeaning(meaning))",
      "right" : "if (!jsdocBuilder.recordMeaning(meaning))",
      "info" : "IfStatement[21107-21282]:IfStatement[21107-21282]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21149-21282]:Block[21149-21282]"
    }, {
      "left" : "parser.addParserWarning(\"msg.jsdoc.meaning.extra\",\n                stream.getLineno(), stream.getCharno());",
      "right" : "parser.addParserWarning(\"msg.jsdoc.meaning.extra\",\n                stream.getLineno(), stream.getCharno());",
      "info" : "ExpressionStatement[21163-21270]:ExpressionStatement[21163-21270]"
    }, {
      "left" : "return token;",
      "right" : "return token;",
      "info" : "ReturnStatement[21293-21306]:ReturnStatement[21293-21306]"
    }, {
      "left" : "case NO_ALIAS:",
      "right" : "case NO_ALIAS:",
      "info" : "SwitchCase[21316-21330]:SwitchCase[21316-21330]"
    }, {
      "left" : "if (!jsdocBuilder.recordNoAlias())",
      "right" : "if (!jsdocBuilder.recordNoAlias())",
      "info" : "IfStatement[21341-21503]:IfStatement[21341-21503]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21376-21503]:Block[21376-21503]"
    }, {
      "left" : "parser.addParserWarning(\"msg.jsdoc.noalias\",\n                stream.getLineno(), stream.getCharno());",
      "right" : "parser.addParserWarning(\"msg.jsdoc.noalias\",\n                stream.getLineno(), stream.getCharno());",
      "info" : "ExpressionStatement[21390-21491]:ExpressionStatement[21390-21491]"
    }, {
      "left" : "return eatUntilEOLIfNotAnnotation();",
      "right" : "return eatUntilEOLIfNotAnnotation();",
      "info" : "ReturnStatement[21514-21550]:ReturnStatement[21514-21550]"
    }, {
      "left" : "case NO_COMPILE:",
      "right" : "case NO_COMPILE:",
      "info" : "SwitchCase[21560-21576]:SwitchCase[21560-21576]"
    }, {
      "left" : "if (!jsdocBuilder.recordNoCompile())",
      "right" : "if (!jsdocBuilder.recordNoCompile())",
      "info" : "IfStatement[21587-21753]:IfStatement[21587-21753]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21624-21753]:Block[21624-21753]"
    }, {
      "left" : "parser.addParserWarning(\"msg.jsdoc.nocompile\",\n                stream.getLineno(), stream.getCharno());",
      "right" : "parser.addParserWarning(\"msg.jsdoc.nocompile\",\n                stream.getLineno(), stream.getCharno());",
      "info" : "ExpressionStatement[21638-21741]:ExpressionStatement[21638-21741]"
    }, {
      "left" : "return eatUntilEOLIfNotAnnotation();",
      "right" : "return eatUntilEOLIfNotAnnotation();",
      "info" : "ReturnStatement[21764-21800]:ReturnStatement[21764-21800]"
    }, {
      "left" : "case NO_TYPE_CHECK:",
      "right" : "case NO_TYPE_CHECK:",
      "info" : "SwitchCase[21810-21829]:SwitchCase[21810-21829]"
    }, {
      "left" : "if (!jsdocBuilder.recordNoTypeCheck())",
      "right" : "if (!jsdocBuilder.recordNoTypeCheck())",
      "info" : "IfStatement[21840-22006]:IfStatement[21840-22006]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21879-22006]:Block[21879-22006]"
    }, {
      "left" : "parser.addParserWarning(\"msg.jsdoc.nocheck\",\n                stream.getLineno(), stream.getCharno());",
      "right" : "parser.addParserWarning(\"msg.jsdoc.nocheck\",\n                stream.getLineno(), stream.getCharno());",
      "info" : "ExpressionStatement[21893-21994]:ExpressionStatement[21893-21994]"
    }, {
      "left" : "return eatUntilEOLIfNotAnnotation();",
      "right" : "return eatUntilEOLIfNotAnnotation();",
      "info" : "ReturnStatement[22017-22053]:ReturnStatement[22017-22053]"
    }, {
      "left" : "case NOT_IMPLEMENTED:",
      "right" : "case NOT_IMPLEMENTED:",
      "info" : "SwitchCase[22063-22084]:SwitchCase[22063-22084]"
    }, {
      "left" : "return eatUntilEOLIfNotAnnotation();",
      "right" : "return eatUntilEOLIfNotAnnotation();",
      "info" : "ReturnStatement[22095-22131]:ReturnStatement[22095-22131]"
    }, {
      "left" : "case INHERIT_DOC:",
      "right" : "case INHERIT_DOC:",
      "info" : "SwitchCase[22141-22158]:SwitchCase[22141-22158]"
    }, {
      "left" : "case OVERRIDE:",
      "right" : "case OVERRIDE:",
      "info" : "SwitchCase[22167-22181]:SwitchCase[22167-22181]"
    }, {
      "left" : "if (!jsdocBuilder.recordOverride())",
      "right" : "if (!jsdocBuilder.recordOverride())",
      "info" : "IfStatement[22192-22354]:IfStatement[22192-22354]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22228-22354]:Block[22228-22354]"
    }, {
      "left" : "parser.addTypeWarning(\"msg.jsdoc.override\",\n                stream.getLineno(), stream.getCharno());",
      "right" : "parser.addTypeWarning(\"msg.jsdoc.override\",\n                stream.getLineno(), stream.getCharno());",
      "info" : "ExpressionStatement[22242-22342]:ExpressionStatement[22242-22342]"
    }, {
      "left" : "return eatUntilEOLIfNotAnnotation();",
      "right" : "return eatUntilEOLIfNotAnnotation();",
      "info" : "ReturnStatement[22365-22401]:ReturnStatement[22365-22401]"
    }, {
      "left" : "case THROWS:",
      "right" : "case THROWS:",
      "info" : "SwitchCase[22411-22423]:SwitchCase[22411-22423]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22424-23741]:Block[22424-23741]"
    }, {
      "left" : "skipEOLs();",
      "right" : "skipEOLs();",
      "info" : "ExpressionStatement[22436-22447]:ExpressionStatement[22436-22447]"
    }, {
      "left" : "token = next();",
      "right" : "token = next();",
      "info" : "ExpressionStatement[22458-22473]:ExpressionStatement[22458-22473]"
    }, {
      "left" : "lineno = stream.getLineno();",
      "right" : "lineno = stream.getLineno();",
      "info" : "ExpressionStatement[22484-22512]:ExpressionStatement[22484-22512]"
    }, {
      "left" : "charno = stream.getCharno();",
      "right" : "charno = stream.getCharno();",
      "info" : "ExpressionStatement[22523-22551]:ExpressionStatement[22523-22551]"
    }, {
      "left" : "type = null;",
      "right" : "type = null;",
      "info" : "ExpressionStatement[22562-22574]:ExpressionStatement[22562-22574]"
    }, {
      "left" : "if (token == JsDocToken.LC)",
      "right" : "if (token == JsDocToken.LC)",
      "info" : "IfStatement[22586-22917]:IfStatement[22586-22917]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22614-22917]:Block[22614-22917]"
    }, {
      "left" : "type = createJSTypeExpression(\n                parseAndRecordTypeNode(token));",
      "right" : "type = createJSTypeExpression(\n                parseAndRecordTypeNode(token));",
      "info" : "ExpressionStatement[22628-22706]:ExpressionStatement[22628-22706]"
    }, {
      "left" : "if (type == null)",
      "right" : "if (type == null)",
      "info" : "IfStatement[22720-22905]:IfStatement[22720-22905]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22738-22905]:Block[22738-22905]"
    }, {
      "left" : "return eatUntilEOLIfNotAnnotation();",
      "right" : "return eatUntilEOLIfNotAnnotation();",
      "info" : "ReturnStatement[22855-22891]:ReturnStatement[22855-22891]"
    }, {
      "left" : "token = current();",
      "right" : "token = current();",
      "info" : "ExpressionStatement[22996-23014]:ExpressionStatement[22996-23014]"
    }, {
      "left" : "jsdocBuilder.recordThrowType(type);",
      "right" : "jsdocBuilder.recordThrowType(type);",
      "info" : "ExpressionStatement[23060-23095]:ExpressionStatement[23060-23095]"
    }, {
      "left" : "boolean isAnnotationNext = lookAheadForAnnotation();",
      "right" : "boolean isAnnotationNext = lookAheadForAnnotation();",
      "info" : "VariableDeclarationStatement[23107-23159]:VariableDeclarationStatement[23107-23159]"
    }, {
      "left" : "if (jsdocBuilder.shouldParseDocumentation() && !isAnnotationNext)",
      "right" : "if (jsdocBuilder.shouldParseDocumentation() && !isAnnotationNext)",
      "info" : "IfStatement[23230-23707]:IfStatement[23230-23707]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23296-23638]:Block[23296-23638]"
    }, {
      "left" : "ExtractionInfo descriptionInfo =\n                extractMultilineTextualBlock(token);",
      "right" : "ExtractionInfo descriptionInfo =\n                extractMultilineTextualBlock(token);",
      "info" : "VariableDeclarationStatement[23310-23395]:VariableDeclarationStatement[23310-23395]"
    }, {
      "left" : "String description = descriptionInfo.string;",
      "right" : "String description = descriptionInfo.string;",
      "info" : "VariableDeclarationStatement[23409-23453]:VariableDeclarationStatement[23409-23453]"
    }, {
      "left" : "if (description.length() > 0)",
      "right" : "if (description.length() > 0)",
      "info" : "IfStatement[23467-23582]:IfStatement[23467-23582]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23497-23582]:Block[23497-23582]"
    }, {
      "left" : "jsdocBuilder.recordThrowDescription(type, description);",
      "right" : "jsdocBuilder.recordThrowDescription(type, description);",
      "info" : "ExpressionStatement[23513-23568]:ExpressionStatement[23513-23568]"
    }, {
      "left" : "token = descriptionInfo.token;",
      "right" : "token = descriptionInfo.token;",
      "info" : "ExpressionStatement[23596-23626]:ExpressionStatement[23596-23626]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23644-23707]:Block[23644-23707]"
    }, {
      "left" : "token = eatUntilEOLIfNotAnnotation();",
      "right" : "token = eatUntilEOLIfNotAnnotation();",
      "info" : "ExpressionStatement[23658-23695]:ExpressionStatement[23658-23695]"
    }, {
      "left" : "return token;",
      "right" : "return token;",
      "info" : "ReturnStatement[23718-23731]:ReturnStatement[23718-23731]"
    }, {
      "left" : "case PARAM:",
      "right" : "case PARAM:",
      "info" : "SwitchCase[23751-23762]:SwitchCase[23751-23762]"
    }, {
      "left" : "skipEOLs();",
      "right" : "skipEOLs();",
      "info" : "ExpressionStatement[23773-23784]:ExpressionStatement[23773-23784]"
    }, {
      "left" : "token = next();",
      "right" : "token = next();",
      "info" : "ExpressionStatement[23795-23810]:ExpressionStatement[23795-23810]"
    }, {
      "left" : "lineno = stream.getLineno();",
      "right" : "lineno = stream.getLineno();",
      "info" : "ExpressionStatement[23821-23849]:ExpressionStatement[23821-23849]"
    }, {
      "left" : "charno = stream.getCharno();",
      "right" : "charno = stream.getCharno();",
      "info" : "ExpressionStatement[23860-23888]:ExpressionStatement[23860-23888]"
    }, {
      "left" : "type = null;",
      "right" : "type = null;",
      "info" : "ExpressionStatement[23899-23911]:ExpressionStatement[23899-23911]"
    }, {
      "left" : "if (token == JsDocToken.LC)",
      "right" : "if (token == JsDocToken.LC)",
      "info" : "IfStatement[23923-24393]:IfStatement[23923-24393]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23951-24393]:Block[23951-24393]"
    }, {
      "left" : "type = createJSTypeExpression(\n                parseAndRecordParamTypeNode(token));",
      "right" : "type = createJSTypeExpression(\n                parseAndRecordParamTypeNode(token));",
      "info" : "ExpressionStatement[23965-24048]:ExpressionStatement[23965-24048]"
    }, {
      "left" : "if (type == null)",
      "right" : "if (type == null)",
      "info" : "IfStatement[24062-24247]:IfStatement[24062-24247]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24080-24247]:Block[24080-24247]"
    }, {
      "left" : "return eatUntilEOLIfNotAnnotation();",
      "right" : "return eatUntilEOLIfNotAnnotation();",
      "info" : "ReturnStatement[24197-24233]:ReturnStatement[24197-24233]"
    }, {
      "left" : "skipEOLs();",
      "right" : "skipEOLs();",
      "info" : "ExpressionStatement[24260-24271]:ExpressionStatement[24260-24271]"
    }, {
      "left" : "token = next();",
      "right" : "token = next();",
      "info" : "ExpressionStatement[24284-24299]:ExpressionStatement[24284-24299]"
    }, {
      "left" : "lineno = stream.getLineno();",
      "right" : "lineno = stream.getLineno();",
      "info" : "ExpressionStatement[24312-24340]:ExpressionStatement[24312-24340]"
    }, {
      "left" : "charno = stream.getCharno();",
      "right" : "charno = stream.getCharno();",
      "info" : "ExpressionStatement[24353-24381]:ExpressionStatement[24353-24381]"
    }, {
      "left" : "String name = null;",
      "right" : "String name = null;",
      "info" : "VariableDeclarationStatement[24405-24424]:VariableDeclarationStatement[24405-24424]"
    }, {
      "left" : "boolean isBracketedParam = JsDocToken.LB == token;",
      "right" : "boolean isBracketedParam = JsDocToken.LB == token;",
      "info" : "VariableDeclarationStatement[24435-24485]:VariableDeclarationStatement[24435-24485]"
    }, {
      "left" : "if (isBracketedParam)",
      "right" : "if (isBracketedParam)",
      "info" : "IfStatement[24496-24559]:IfStatement[24496-24559]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24518-24559]:Block[24518-24559]"
    }, {
      "left" : "token = next();",
      "right" : "token = next();",
      "info" : "ExpressionStatement[24532-24547]:ExpressionStatement[24532-24547]"
    }, {
      "left" : "if (JsDocToken.STRING != token)",
      "right" : "if (JsDocToken.STRING != token)",
      "info" : "IfStatement[24571-26165]:IfStatement[24571-26165]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24603-24712]:Block[24603-24712]"
    }, {
      "left" : "parser.addTypeWarning(\"msg.missing.variable.name\",\n                lineno, charno);",
      "right" : "parser.addTypeWarning(\"msg.missing.variable.name\",\n                lineno, charno);",
      "info" : "ExpressionStatement[24617-24700]:ExpressionStatement[24617-24700]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24718-26165]:Block[24718-26165]"
    }, {
      "left" : "name = stream.getString();",
      "right" : "name = stream.getString();",
      "info" : "ExpressionStatement[24732-24758]:ExpressionStatement[24732-24758]"
    }, {
      "left" : "if (isBracketedParam)",
      "right" : "if (isBracketedParam)",
      "info" : "IfStatement[24772-25512]:IfStatement[24772-25512]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24794-25512]:Block[24794-25512]"
    }, {
      "left" : "token = next();",
      "right" : "token = next();",
      "info" : "ExpressionStatement[24810-24825]:ExpressionStatement[24810-24825]"
    }, {
      "left" : "if (JsDocToken.EQUALS == token)",
      "right" : "if (JsDocToken.EQUALS == token)",
      "info" : "IfStatement[24991-25174]:IfStatement[24991-25174]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25023-25174]:Block[25023-25174]"
    }, {
      "left" : "token = next();",
      "right" : "token = next();",
      "info" : "ExpressionStatement[25041-25056]:ExpressionStatement[25041-25056]"
    }, {
      "left" : "if (JsDocToken.STRING == token)",
      "right" : "if (JsDocToken.STRING == token)",
      "info" : "IfStatement[25073-25158]:IfStatement[25073-25158]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25105-25158]:Block[25105-25158]"
    }, {
      "left" : "token = next();",
      "right" : "token = next();",
      "info" : "ExpressionStatement[25125-25140]:ExpressionStatement[25125-25140]"
    }, {
      "left" : "if (JsDocToken.RB != token)",
      "right" : "if (JsDocToken.RB != token)",
      "info" : "IfStatement[25190-25498]:IfStatement[25190-25498]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25218-25300]:Block[25218-25300]"
    }, {
      "left" : "reportTypeSyntaxWarning(\"msg.jsdoc.missing.rb\");",
      "right" : "reportTypeSyntaxWarning(\"msg.jsdoc.missing.rb\");",
      "info" : "ExpressionStatement[25236-25284]:ExpressionStatement[25236-25284]"
    }, {
      "left" : "if (type != null)",
      "right" : "if (type != null)",
      "info" : "IfStatement[25306-25498]:IfStatement[25306-25498]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25324-25498]:Block[25324-25498]"
    }, {
      "left" : "type = JSTypeExpression.makeOptionalArg(type);",
      "right" : "type = JSTypeExpression.makeOptionalArg(type);",
      "info" : "ExpressionStatement[25436-25482]:ExpressionStatement[25436-25482]"
    }, {
      "left" : "if (name.indexOf('.') > -1)",
      "right" : "if (name.indexOf('.') > -1)",
      "info" : "IfStatement[25709-26153]:IfStatement[25709-26153]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25737-25779]:Block[25737-25779]"
    }, {
      "left" : "name = null;",
      "right" : "name = null;",
      "info" : "ExpressionStatement[25753-25765]:ExpressionStatement[25753-25765]"
    }, {
      "left" : "if (!jsdocBuilder.recordParameter(name, type))",
      "right" : "if (!jsdocBuilder.recordParameter(name, type))",
      "info" : "IfStatement[25785-26153]:IfStatement[25785-26153]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25832-26153]:Block[25832-26153]"
    }, {
      "left" : "if (jsdocBuilder.hasParameter(name))",
      "right" : "if (jsdocBuilder.hasParameter(name))",
      "info" : "IfStatement[25848-26139]:IfStatement[25848-26139]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25885-26008]:Block[25885-26008]"
    }, {
      "left" : "parser.addTypeWarning(\"msg.dup.variable.name\", name,\n                    lineno, charno);",
      "right" : "parser.addTypeWarning(\"msg.dup.variable.name\", name,\n                    lineno, charno);",
      "info" : "ExpressionStatement[25903-25992]:ExpressionStatement[25903-25992]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26014-26139]:Block[26014-26139]"
    }, {
      "left" : "parser.addTypeWarning(\"msg.jsdoc.incompat.type\", name,\n                    lineno, charno);",
      "right" : "parser.addTypeWarning(\"msg.jsdoc.incompat.type\", name,\n                    lineno, charno);",
      "info" : "ExpressionStatement[26032-26123]:ExpressionStatement[26032-26123]"
    }, {
      "left" : "if (name == null)",
      "right" : "if (name == null)",
      "info" : "IfStatement[26177-26289]:IfStatement[26177-26289]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26195-26289]:Block[26195-26289]"
    }, {
      "left" : "token = eatUntilEOLIfNotAnnotation(token);",
      "right" : "token = eatUntilEOLIfNotAnnotation(token);",
      "info" : "ExpressionStatement[26209-26251]:ExpressionStatement[26209-26251]"
    }, {
      "left" : "return token;",
      "right" : "return token;",
      "info" : "ReturnStatement[26264-26277]:ReturnStatement[26264-26277]"
    }, {
      "left" : "jsdocBuilder.markName(name, sourceFile, lineno, charno);",
      "right" : "jsdocBuilder.markName(name, sourceFile, lineno, charno);",
      "info" : "ExpressionStatement[26301-26357]:ExpressionStatement[26301-26357]"
    }, {
      "left" : "if (jsdocBuilder.shouldParseDocumentation()\n              && token != JsDocToken.ANNOTATION)",
      "right" : "if (jsdocBuilder.shouldParseDocumentation()\n              && token != JsDocToken.ANNOTATION)",
      "info" : "IfStatement[26432-27044]:IfStatement[26432-27044]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26525-26919]:Block[26525-26919]"
    }, {
      "left" : "ExtractionInfo paramDescriptionInfo =\n                extractMultilineTextualBlock(token);",
      "right" : "ExtractionInfo paramDescriptionInfo =\n                extractMultilineTextualBlock(token);",
      "info" : "VariableDeclarationStatement[26539-26629]:VariableDeclarationStatement[26539-26629]"
    }, {
      "left" : "String paramDescription = paramDescriptionInfo.string;",
      "right" : "String paramDescription = paramDescriptionInfo.string;",
      "info" : "VariableDeclarationStatement[26643-26697]:VariableDeclarationStatement[26643-26697]"
    }, {
      "left" : "if (paramDescription.length() > 0)",
      "right" : "if (paramDescription.length() > 0)",
      "info" : "IfStatement[26711-26858]:IfStatement[26711-26858]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26746-26858]:Block[26746-26858]"
    }, {
      "left" : "jsdocBuilder.recordParameterDescription(name,\n                  paramDescription);",
      "right" : "jsdocBuilder.recordParameterDescription(name,\n                  paramDescription);",
      "info" : "ExpressionStatement[26762-26844]:ExpressionStatement[26762-26844]"
    }, {
      "left" : "token = paramDescriptionInfo.token;",
      "right" : "token = paramDescriptionInfo.token;",
      "info" : "ExpressionStatement[26872-26907]:ExpressionStatement[26872-26907]"
    }, {
      "left" : "if (token != JsDocToken.EOC && token != JsDocToken.EOF)",
      "right" : "if (token != JsDocToken.EOC && token != JsDocToken.EOF)",
      "info" : "IfStatement[26925-27044]:IfStatement[26925-27044]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26981-27044]:Block[26981-27044]"
    }, {
      "left" : "token = eatUntilEOLIfNotAnnotation();",
      "right" : "token = eatUntilEOLIfNotAnnotation();",
      "info" : "ExpressionStatement[26995-27032]:ExpressionStatement[26995-27032]"
    }, {
      "left" : "return token;",
      "right" : "return token;",
      "info" : "ReturnStatement[27055-27068]:ReturnStatement[27055-27068]"
    }, {
      "left" : "case PRESERVE_TRY:",
      "right" : "case PRESERVE_TRY:",
      "info" : "SwitchCase[27078-27096]:SwitchCase[27078-27096]"
    }, {
      "left" : "if (!jsdocBuilder.recordPreserveTry())",
      "right" : "if (!jsdocBuilder.recordPreserveTry())",
      "info" : "IfStatement[27107-27278]:IfStatement[27107-27278]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27146-27278]:Block[27146-27278]"
    }, {
      "left" : "parser.addParserWarning(\"msg.jsdoc.preservertry\",\n                stream.getLineno(), stream.getCharno());",
      "right" : "parser.addParserWarning(\"msg.jsdoc.preservertry\",\n                stream.getLineno(), stream.getCharno());",
      "info" : "ExpressionStatement[27160-27266]:ExpressionStatement[27160-27266]"
    }, {
      "left" : "return eatUntilEOLIfNotAnnotation();",
      "right" : "return eatUntilEOLIfNotAnnotation();",
      "info" : "ReturnStatement[27289-27325]:ReturnStatement[27289-27325]"
    }, {
      "left" : "case NO_SHADOW:",
      "right" : "case NO_SHADOW:",
      "info" : "SwitchCase[27335-27350]:SwitchCase[27335-27350]"
    }, {
      "left" : "if (!jsdocBuilder.recordNoShadow())",
      "right" : "if (!jsdocBuilder.recordNoShadow())",
      "info" : "IfStatement[27361-27525]:IfStatement[27361-27525]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27397-27525]:Block[27397-27525]"
    }, {
      "left" : "parser.addParserWarning(\"msg.jsdoc.noshadow\",\n                stream.getLineno(), stream.getCharno());",
      "right" : "parser.addParserWarning(\"msg.jsdoc.noshadow\",\n                stream.getLineno(), stream.getCharno());",
      "info" : "ExpressionStatement[27411-27513]:ExpressionStatement[27411-27513]"
    }, {
      "left" : "return eatUntilEOLIfNotAnnotation();",
      "right" : "return eatUntilEOLIfNotAnnotation();",
      "info" : "ReturnStatement[27536-27572]:ReturnStatement[27536-27572]"
    }, {
      "left" : "case NO_SIDE_EFFECTS:",
      "right" : "case NO_SIDE_EFFECTS:",
      "info" : "SwitchCase[27582-27603]:SwitchCase[27582-27603]"
    }, {
      "left" : "if (!jsdocBuilder.recordNoSideEffects())",
      "right" : "if (!jsdocBuilder.recordNoSideEffects())",
      "info" : "IfStatement[27614-27788]:IfStatement[27614-27788]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27655-27788]:Block[27655-27788]"
    }, {
      "left" : "parser.addParserWarning(\"msg.jsdoc.nosideeffects\",\n                stream.getLineno(), stream.getCharno());",
      "right" : "parser.addParserWarning(\"msg.jsdoc.nosideeffects\",\n                stream.getLineno(), stream.getCharno());",
      "info" : "ExpressionStatement[27669-27776]:ExpressionStatement[27669-27776]"
    }, {
      "left" : "return eatUntilEOLIfNotAnnotation();",
      "right" : "return eatUntilEOLIfNotAnnotation();",
      "info" : "ReturnStatement[27799-27835]:ReturnStatement[27799-27835]"
    }, {
      "left" : "case MODIFIES:",
      "right" : "case MODIFIES:",
      "info" : "SwitchCase[27845-27859]:SwitchCase[27845-27859]"
    }, {
      "left" : "token = parseModifiesTag(next());",
      "right" : "token = parseModifiesTag(next());",
      "info" : "ExpressionStatement[27870-27903]:ExpressionStatement[27870-27903]"
    }, {
      "left" : "return token;",
      "right" : "return token;",
      "info" : "ReturnStatement[27914-27927]:ReturnStatement[27914-27927]"
    }, {
      "left" : "case IMPLICIT_CAST:",
      "right" : "case IMPLICIT_CAST:",
      "info" : "SwitchCase[27937-27956]:SwitchCase[27937-27956]"
    }, {
      "left" : "if (!jsdocBuilder.recordImplicitCast())",
      "right" : "if (!jsdocBuilder.recordImplicitCast())",
      "info" : "IfStatement[27967-28137]:IfStatement[27967-28137]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28007-28137]:Block[28007-28137]"
    }, {
      "left" : "parser.addTypeWarning(\"msg.jsdoc.implicitcast\",\n                stream.getLineno(), stream.getCharno());",
      "right" : "parser.addTypeWarning(\"msg.jsdoc.implicitcast\",\n                stream.getLineno(), stream.getCharno());",
      "info" : "ExpressionStatement[28021-28125]:ExpressionStatement[28021-28125]"
    }, {
      "left" : "return eatUntilEOLIfNotAnnotation();",
      "right" : "return eatUntilEOLIfNotAnnotation();",
      "info" : "ReturnStatement[28148-28184]:ReturnStatement[28148-28184]"
    }, {
      "left" : "case SEE:",
      "right" : "case SEE:",
      "info" : "SwitchCase[28194-28203]:SwitchCase[28194-28203]"
    }, {
      "left" : "if (jsdocBuilder.shouldParseDocumentation())",
      "right" : "if (jsdocBuilder.shouldParseDocumentation())",
      "info" : "IfStatement[28214-28757]:IfStatement[28214-28757]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28259-28688]:Block[28259-28688]"
    }, {
      "left" : "ExtractionInfo referenceInfo = extractSingleLineBlock();",
      "right" : "ExtractionInfo referenceInfo = extractSingleLineBlock();",
      "info" : "VariableDeclarationStatement[28273-28329]:VariableDeclarationStatement[28273-28329]"
    }, {
      "left" : "String reference = referenceInfo.string;",
      "right" : "String reference = referenceInfo.string;",
      "info" : "VariableDeclarationStatement[28342-28382]:VariableDeclarationStatement[28342-28382]"
    }, {
      "left" : "if (reference.length() == 0)",
      "right" : "if (reference.length() == 0)",
      "info" : "IfStatement[28396-28634]:IfStatement[28396-28634]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28425-28561]:Block[28425-28561]"
    }, {
      "left" : "parser.addParserWarning(\"msg.jsdoc.seemissing\",\n                  stream.getLineno(), stream.getCharno());",
      "right" : "parser.addParserWarning(\"msg.jsdoc.seemissing\",\n                  stream.getLineno(), stream.getCharno());",
      "info" : "ExpressionStatement[28441-28547]:ExpressionStatement[28441-28547]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28567-28634]:Block[28567-28634]"
    }, {
      "left" : "jsdocBuilder.addReference(reference);",
      "right" : "jsdocBuilder.addReference(reference);",
      "info" : "ExpressionStatement[28583-28620]:ExpressionStatement[28583-28620]"
    }, {
      "left" : "token = referenceInfo.token;",
      "right" : "token = referenceInfo.token;",
      "info" : "ExpressionStatement[28648-28676]:ExpressionStatement[28648-28676]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28694-28757]:Block[28694-28757]"
    }, {
      "left" : "token = eatUntilEOLIfNotAnnotation();",
      "right" : "token = eatUntilEOLIfNotAnnotation();",
      "info" : "ExpressionStatement[28708-28745]:ExpressionStatement[28708-28745]"
    }, {
      "left" : "return token;",
      "right" : "return token;",
      "info" : "ReturnStatement[28768-28781]:ReturnStatement[28768-28781]"
    }, {
      "left" : "case STABLEIDGENERATOR:",
      "right" : "case STABLEIDGENERATOR:",
      "info" : "SwitchCase[28791-28814]:SwitchCase[28791-28814]"
    }, {
      "left" : "if (!jsdocBuilder.recordStableIdGenerator())",
      "right" : "if (!jsdocBuilder.recordStableIdGenerator())",
      "info" : "IfStatement[28825-28999]:IfStatement[28825-28999]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28870-28999]:Block[28870-28999]"
    }, {
      "left" : "parser.addParserWarning(\"msg.jsdoc.stableidgen\",\n              stream.getLineno(), stream.getCharno());",
      "right" : "parser.addParserWarning(\"msg.jsdoc.stableidgen\",\n              stream.getLineno(), stream.getCharno());",
      "info" : "ExpressionStatement[28884-28987]:ExpressionStatement[28884-28987]"
    }, {
      "left" : "return eatUntilEOLIfNotAnnotation();",
      "right" : "return eatUntilEOLIfNotAnnotation();",
      "info" : "ReturnStatement[29010-29046]:ReturnStatement[29010-29046]"
    }, {
      "left" : "case SUPPRESS:",
      "right" : "case SUPPRESS:",
      "info" : "SwitchCase[29056-29070]:SwitchCase[29056-29070]"
    }, {
      "left" : "token = parseSuppressTag(next());",
      "right" : "token = parseSuppressTag(next());",
      "info" : "ExpressionStatement[29081-29114]:ExpressionStatement[29081-29114]"
    }, {
      "left" : "return token;",
      "right" : "return token;",
      "info" : "ReturnStatement[29125-29138]:ReturnStatement[29125-29138]"
    }, {
      "left" : "case TEMPLATE:",
      "right" : "case TEMPLATE:",
      "info" : "SwitchCase[29148-29162]:SwitchCase[29148-29162]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29163-29861]:Block[29163-29861]"
    }, {
      "left" : "ExtractionInfo templateInfo = extractSingleLineBlock();",
      "right" : "ExtractionInfo templateInfo = extractSingleLineBlock();",
      "info" : "VariableDeclarationStatement[29175-29230]:VariableDeclarationStatement[29175-29230]"
    }, {
      "left" : "List<String> names = Lists.newArrayList(\n              Splitter.on(',')\n                  .trimResults()\n                  .split(templateInfo.string));",
      "right" : "List<String> names = Lists.newArrayList(\n              Splitter.on(',')\n                  .trimResults()\n                  .split(templateInfo.string));",
      "info" : "VariableDeclarationStatement[29241-29393]:VariableDeclarationStatement[29241-29393]"
    }, {
      "left" : "if (names.size() == 0 || names.get(0).length() == 0)",
      "right" : "if (names.size() == 0 || names.get(0).length() == 0)",
      "info" : "IfStatement[29405-29788]:IfStatement[29405-29788]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29458-29593]:Block[29458-29593]"
    }, {
      "left" : "parser.addTypeWarning(\"msg.jsdoc.templatemissing\",\n                  stream.getLineno(), stream.getCharno());",
      "right" : "parser.addTypeWarning(\"msg.jsdoc.templatemissing\",\n                  stream.getLineno(), stream.getCharno());",
      "info" : "ExpressionStatement[29472-29581]:ExpressionStatement[29472-29581]"
    }, {
      "left" : "if (!jsdocBuilder.recordTemplateTypeNames(names))",
      "right" : "if (!jsdocBuilder.recordTemplateTypeNames(names))",
      "info" : "IfStatement[29599-29788]:IfStatement[29599-29788]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29649-29788]:Block[29649-29788]"
    }, {
      "left" : "parser.addTypeWarning(\"msg.jsdoc.template.at.most.once\",\n                stream.getLineno(), stream.getCharno());",
      "right" : "parser.addTypeWarning(\"msg.jsdoc.template.at.most.once\",\n                stream.getLineno(), stream.getCharno());",
      "info" : "ExpressionStatement[29663-29776]:ExpressionStatement[29663-29776]"
    }, {
      "left" : "token = templateInfo.token;",
      "right" : "token = templateInfo.token;",
      "info" : "ExpressionStatement[29800-29827]:ExpressionStatement[29800-29827]"
    }, {
      "left" : "return token;",
      "right" : "return token;",
      "info" : "ReturnStatement[29838-29851]:ReturnStatement[29838-29851]"
    }, {
      "left" : "case IDGENERATOR:",
      "right" : "case IDGENERATOR:",
      "info" : "SwitchCase[29871-29888]:SwitchCase[29871-29888]"
    }, {
      "left" : "token = parseIdGeneratorTag(next());",
      "right" : "token = parseIdGeneratorTag(next());",
      "info" : "ExpressionStatement[29899-29935]:ExpressionStatement[29899-29935]"
    }, {
      "left" : "return token;",
      "right" : "return token;",
      "info" : "ReturnStatement[29946-29959]:ReturnStatement[29946-29959]"
    }, {
      "left" : "case WIZACTION:",
      "right" : "case WIZACTION:",
      "info" : "SwitchCase[29969-29984]:SwitchCase[29969-29984]"
    }, {
      "left" : "if (!jsdocBuilder.recordWizaction())",
      "right" : "if (!jsdocBuilder.recordWizaction())",
      "info" : "IfStatement[29995-30159]:IfStatement[29995-30159]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30032-30159]:Block[30032-30159]"
    }, {
      "left" : "parser.addParserWarning(\"msg.jsdoc.wizaction\",\n              stream.getLineno(), stream.getCharno());",
      "right" : "parser.addParserWarning(\"msg.jsdoc.wizaction\",\n              stream.getLineno(), stream.getCharno());",
      "info" : "ExpressionStatement[30046-30147]:ExpressionStatement[30046-30147]"
    }, {
      "left" : "return eatUntilEOLIfNotAnnotation();",
      "right" : "return eatUntilEOLIfNotAnnotation();",
      "info" : "ReturnStatement[30170-30206]:ReturnStatement[30170-30206]"
    }, {
      "left" : "case DISPOSES:",
      "right" : "case DISPOSES:",
      "info" : "SwitchCase[30216-30230]:SwitchCase[30216-30230]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30231-30939]:Block[30231-30939]"
    }, {
      "left" : "ExtractionInfo templateInfo = extractSingleLineBlock();",
      "right" : "ExtractionInfo templateInfo = extractSingleLineBlock();",
      "info" : "VariableDeclarationStatement[30243-30298]:VariableDeclarationStatement[30243-30298]"
    }, {
      "left" : "List<String> names = Lists.newArrayList(\n              Splitter.on(',')\n                  .trimResults()\n                  .split(templateInfo.string));",
      "right" : "List<String> names = Lists.newArrayList(\n              Splitter.on(',')\n                  .trimResults()\n                  .split(templateInfo.string));",
      "info" : "VariableDeclarationStatement[30309-30461]:VariableDeclarationStatement[30309-30461]"
    }, {
      "left" : "if (names.size() == 0 || names.get(0).length() == 0)",
      "right" : "if (names.size() == 0 || names.get(0).length() == 0)",
      "info" : "IfStatement[30473-30866]:IfStatement[30473-30866]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30526-30670]:Block[30526-30670]"
    }, {
      "left" : "parser.addTypeWarning(\"msg.jsdoc.disposeparameter.missing\",\n                  stream.getLineno(), stream.getCharno());",
      "right" : "parser.addTypeWarning(\"msg.jsdoc.disposeparameter.missing\",\n                  stream.getLineno(), stream.getCharno());",
      "info" : "ExpressionStatement[30540-30658]:ExpressionStatement[30540-30658]"
    }, {
      "left" : "if (!jsdocBuilder.recordDisposesParameter(names))",
      "right" : "if (!jsdocBuilder.recordDisposesParameter(names))",
      "info" : "IfStatement[30676-30866]:IfStatement[30676-30866]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30726-30866]:Block[30726-30866]"
    }, {
      "left" : "parser.addTypeWarning(\"msg.jsdoc.disposeparameter.error\",\n                stream.getLineno(), stream.getCharno());",
      "right" : "parser.addTypeWarning(\"msg.jsdoc.disposeparameter.error\",\n                stream.getLineno(), stream.getCharno());",
      "info" : "ExpressionStatement[30740-30854]:ExpressionStatement[30740-30854]"
    }, {
      "left" : "token = templateInfo.token;",
      "right" : "token = templateInfo.token;",
      "info" : "ExpressionStatement[30878-30905]:ExpressionStatement[30878-30905]"
    }, {
      "left" : "return token;",
      "right" : "return token;",
      "info" : "ReturnStatement[30916-30929]:ReturnStatement[30916-30929]"
    }, {
      "left" : "case VERSION:",
      "right" : "case VERSION:",
      "info" : "SwitchCase[30949-30962]:SwitchCase[30949-30962]"
    }, {
      "left" : "ExtractionInfo versionInfo = extractSingleLineBlock();",
      "right" : "ExtractionInfo versionInfo = extractSingleLineBlock();",
      "info" : "VariableDeclarationStatement[30973-31027]:VariableDeclarationStatement[30973-31027]"
    }, {
      "left" : "String version = versionInfo.string;",
      "right" : "String version = versionInfo.string;",
      "info" : "VariableDeclarationStatement[31038-31074]:VariableDeclarationStatement[31038-31074]"
    }, {
      "left" : "if (version.length() == 0)",
      "right" : "if (version.length() == 0)",
      "info" : "IfStatement[31086-31462]:IfStatement[31086-31462]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31113-31249]:Block[31113-31249]"
    }, {
      "left" : "parser.addParserWarning(\"msg.jsdoc.versionmissing\",\n                  stream.getLineno(), stream.getCharno());",
      "right" : "parser.addParserWarning(\"msg.jsdoc.versionmissing\",\n                  stream.getLineno(), stream.getCharno());",
      "info" : "ExpressionStatement[31127-31237]:ExpressionStatement[31127-31237]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31255-31462]:Block[31255-31462]"
    }, {
      "left" : "if (!jsdocBuilder.recordVersion(version))",
      "right" : "if (!jsdocBuilder.recordVersion(version))",
      "info" : "IfStatement[31269-31450]:IfStatement[31269-31450]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31311-31450]:Block[31311-31450]"
    }, {
      "left" : "parser.addParserWarning(\"msg.jsdoc.extraversion\",\n                  stream.getLineno(), stream.getCharno());",
      "right" : "parser.addParserWarning(\"msg.jsdoc.extraversion\",\n                  stream.getLineno(), stream.getCharno());",
      "info" : "ExpressionStatement[31328-31436]:ExpressionStatement[31328-31436]"
    }, {
      "left" : "token = versionInfo.token;",
      "right" : "token = versionInfo.token;",
      "info" : "ExpressionStatement[31474-31500]:ExpressionStatement[31474-31500]"
    }, {
      "left" : "return token;",
      "right" : "return token;",
      "info" : "ReturnStatement[31511-31524]:ReturnStatement[31511-31524]"
    }, {
      "left" : "case CONSTANT:",
      "right" : "case CONSTANT:",
      "info" : "SwitchCase[31534-31548]:SwitchCase[31534-31548]"
    }, {
      "left" : "case DEFINE:",
      "right" : "case DEFINE:",
      "info" : "SwitchCase[31557-31569]:SwitchCase[31557-31569]"
    }, {
      "left" : "case RETURN:",
      "right" : "case RETURN:",
      "info" : "SwitchCase[31578-31590]:SwitchCase[31578-31590]"
    }, {
      "left" : "case PRIVATE:",
      "right" : "case PRIVATE:",
      "info" : "SwitchCase[31599-31612]:SwitchCase[31599-31612]"
    }, {
      "left" : "case PROTECTED:",
      "right" : "case PROTECTED:",
      "info" : "SwitchCase[31621-31636]:SwitchCase[31621-31636]"
    }, {
      "left" : "case PUBLIC:",
      "right" : "case PUBLIC:",
      "info" : "SwitchCase[31645-31657]:SwitchCase[31645-31657]"
    }, {
      "left" : "case THIS:",
      "right" : "case THIS:",
      "info" : "SwitchCase[31666-31676]:SwitchCase[31666-31676]"
    }, {
      "left" : "case TYPE:",
      "right" : "case TYPE:",
      "info" : "SwitchCase[31685-31695]:SwitchCase[31685-31695]"
    }, {
      "left" : "case TYPEDEF:",
      "right" : "case TYPEDEF:",
      "info" : "SwitchCase[31704-31717]:SwitchCase[31704-31717]"
    }, {
      "left" : "lineno = stream.getLineno();",
      "right" : "lineno = stream.getLineno();",
      "info" : "ExpressionStatement[31728-31756]:ExpressionStatement[31728-31756]"
    }, {
      "left" : "charno = stream.getCharno();",
      "right" : "charno = stream.getCharno();",
      "info" : "ExpressionStatement[31767-31795]:ExpressionStatement[31767-31795]"
    }, {
      "left" : "Node typeNode = null;",
      "right" : "Node typeNode = null;",
      "info" : "VariableDeclarationStatement[31807-31828]:VariableDeclarationStatement[31807-31828]"
    }, {
      "left" : "boolean hasType = lookAheadForType();",
      "right" : "boolean hasType = lookAheadForType();",
      "info" : "VariableDeclarationStatement[31839-31876]:VariableDeclarationStatement[31839-31876]"
    }, {
      "left" : "boolean isAlternateTypeAnnotation =\n              (annotation == Annotation.PRIVATE ||\n               annotation == Annotation.PROTECTED ||\n               annotation == Annotation.PUBLIC ||\n               annotation == Annotation.CONSTANT);",
      "right" : "boolean isAlternateTypeAnnotation =\n              (annotation == Annotation.PRIVATE ||\n               annotation == Annotation.PROTECTED ||\n               annotation == Annotation.PUBLIC ||\n               annotation == Annotation.CONSTANT);",
      "info" : "VariableDeclarationStatement[31887-32127]:VariableDeclarationStatement[31887-32127]"
    }, {
      "left" : "boolean canSkipTypeAnnotation =\n              (isAlternateTypeAnnotation ||\n               annotation == Annotation.RETURN);",
      "right" : "boolean canSkipTypeAnnotation =\n              (isAlternateTypeAnnotation ||\n               annotation == Annotation.RETURN);",
      "info" : "VariableDeclarationStatement[32138-32262]:VariableDeclarationStatement[32138-32262]"
    }, {
      "left" : "type = null;",
      "right" : "type = null;",
      "info" : "ExpressionStatement[32273-32285]:ExpressionStatement[32273-32285]"
    }, {
      "left" : "if (hasType || !canSkipTypeAnnotation)",
      "right" : "if (hasType || !canSkipTypeAnnotation)",
      "info" : "IfStatement[32296-32628]:IfStatement[32296-32628]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32335-32628]:Block[32335-32628]"
    }, {
      "left" : "skipEOLs();",
      "right" : "skipEOLs();",
      "info" : "ExpressionStatement[32349-32360]:ExpressionStatement[32349-32360]"
    }, {
      "left" : "token = next();",
      "right" : "token = next();",
      "info" : "ExpressionStatement[32373-32388]:ExpressionStatement[32373-32388]"
    }, {
      "left" : "typeNode = parseAndRecordTypeNode(token);",
      "right" : "typeNode = parseAndRecordTypeNode(token);",
      "info" : "ExpressionStatement[32401-32442]:ExpressionStatement[32401-32442]"
    }, {
      "left" : "if (annotation == Annotation.THIS)",
      "right" : "if (annotation == Annotation.THIS)",
      "info" : "IfStatement[32456-32563]:IfStatement[32456-32563]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32491-32563]:Block[32491-32563]"
    }, {
      "left" : "typeNode = wrapNode(Token.BANG, typeNode);",
      "right" : "typeNode = wrapNode(Token.BANG, typeNode);",
      "info" : "ExpressionStatement[32507-32549]:ExpressionStatement[32507-32549]"
    }, {
      "left" : "type = createJSTypeExpression(typeNode);",
      "right" : "type = createJSTypeExpression(typeNode);",
      "info" : "ExpressionStatement[32576-32616]:ExpressionStatement[32576-32616]"
    }, {
      "left" : "boolean hasError = type == null && !canSkipTypeAnnotation;",
      "right" : "boolean hasError = type == null && !canSkipTypeAnnotation;",
      "info" : "VariableDeclarationStatement[32733-32791]:VariableDeclarationStatement[32733-32791]"
    }, {
      "left" : "if (!hasError)",
      "right" : "if (!hasError)",
      "info" : "IfStatement[32802-36909]:IfStatement[32802-36909]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32817-36909]:Block[32817-36909]"
    }, {
      "left" : "if ((type != null && isAlternateTypeAnnotation)\n                || annotation == Annotation.TYPE)",
      "right" : "if ((type != null && isAlternateTypeAnnotation)\n                || annotation == Annotation.TYPE)",
      "info" : "IfStatement[33221-33505]:IfStatement[33221-33505]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33319-33505]:Block[33319-33505]"
    }, {
      "left" : "if (!jsdocBuilder.recordType(type))",
      "right" : "if (!jsdocBuilder.recordType(type))",
      "info" : "IfStatement[33335-33491]:IfStatement[33335-33491]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33371-33491]:Block[33371-33491]"
    }, {
      "left" : "parser.addTypeWarning(\n                    \"msg.jsdoc.incompat.type\", lineno, charno);",
      "right" : "parser.addTypeWarning(\n                    \"msg.jsdoc.incompat.type\", lineno, charno);",
      "info" : "ExpressionStatement[33389-33475]:ExpressionStatement[33389-33475]"
    }, {
      "left" : "switch (annotation) {\n              case CONSTANT:\n                if (!jsdocBuilder.recordConstancy()) {\n                  parser.addParserWarning(\"msg.jsdoc.const\",\n                      stream.getLineno(), stream.getCharno());\n                }\n                break;\n\n              case DEFINE:\n                if (!jsdocBuilder.recordDefineType(type)) {\n                  parser.addParserWarning(\"msg.jsdoc.define\",\n                      lineno, charno);\n                }\n                return recordDescription(token);\n\n              case PRIVATE:\n                if (!jsdocBuilder.recordVisibility(Visibility.PRIVATE)) {\n                  parser.addParserWarning(\n                      \"msg.jsdoc.visibility.private\",\n                      lineno, charno);\n                }\n                return recordDescription(token);\n\n              case PROTECTED:\n                if (!jsdocBuilder.recordVisibility(Visibility.PROTECTED)) {\n                  parser.addParserWarning(\n                      \"msg.jsdoc.visibility.protected\",\n                      lineno, charno);\n                }\n                return recordDescription(token);\n\n              case PUBLIC:\n                if (!jsdocBuilder.recordVisibility(Visibility.PUBLIC)) {\n                  parser.addParserWarning(\n                      \"msg.jsdoc.visibility.public\",\n                      lineno, charno);\n                }\n                return recordDescription(token);\n\n              case RETURN:\n                if (type == null) {\n                  type = createJSTypeExpression(newNode(Token.QMARK));\n                }\n\n                if (!jsdocBuilder.recordReturnType(type)) {\n                  parser.addTypeWarning(\n                      \"msg.jsdoc.incompat.type\", lineno, charno);\n                  break;\n                }\n\n                // TODO(johnlenz): The extractMultilineTextualBlock method\n                // and friends look directly at the stream, regardless of\n                // last token read, so we don't want to read the first\n                // \"STRING\" out of the stream.\n\n                boolean isAnnotationNext = lookAheadForAnnotation();\n\n                // Find the return's description (if applicable).\n                if (jsdocBuilder.shouldParseDocumentation()\n                    && !isAnnotationNext) {\n                  ExtractionInfo returnDescriptionInfo =\n                      extractMultilineTextualBlock(token);\n\n                  String returnDescription =\n                      returnDescriptionInfo.string;\n\n                  if (returnDescription.length() > 0) {\n                    jsdocBuilder.recordReturnDescription(\n                        returnDescription);\n                  }\n\n                  token = returnDescriptionInfo.token;\n                } else {\n                  token = eatUntilEOLIfNotAnnotation();\n                }\n                return token;\n\n              case THIS:\n                if (!jsdocBuilder.recordThisType(type)) {\n                  parser.addTypeWarning(\n                      \"msg.jsdoc.incompat.type\", lineno, charno);\n                }\n                break;\n\n              case TYPEDEF:\n                if (!jsdocBuilder.recordTypedef(type)) {\n                  parser.addTypeWarning(\n                      \"msg.jsdoc.incompat.type\", lineno, charno);\n                }\n                break;\n            }",
      "right" : "switch (annotation) {\n              case CONSTANT:\n                if (!jsdocBuilder.recordConstancy()) {\n                  parser.addParserWarning(\"msg.jsdoc.const\",\n                      stream.getLineno(), stream.getCharno());\n                }\n                break;\n\n              case DEFINE:\n                if (!jsdocBuilder.recordDefineType(type)) {\n                  parser.addParserWarning(\"msg.jsdoc.define\",\n                      lineno, charno);\n                }\n                return recordDescription(token);\n\n              case PRIVATE:\n                if (!jsdocBuilder.recordVisibility(Visibility.PRIVATE)) {\n                  parser.addParserWarning(\n                      \"msg.jsdoc.visibility.private\",\n                      lineno, charno);\n                }\n                return recordDescription(token);\n\n              case PROTECTED:\n                if (!jsdocBuilder.recordVisibility(Visibility.PROTECTED)) {\n                  parser.addParserWarning(\n                      \"msg.jsdoc.visibility.protected\",\n                      lineno, charno);\n                }\n                return recordDescription(token);\n\n              case PUBLIC:\n                if (!jsdocBuilder.recordVisibility(Visibility.PUBLIC)) {\n                  parser.addParserWarning(\n                      \"msg.jsdoc.visibility.public\",\n                      lineno, charno);\n                }\n                return recordDescription(token);\n\n              case RETURN:\n                if (type == null) {\n                  type = createJSTypeExpression(newNode(Token.QMARK));\n                }\n\n                if (!jsdocBuilder.recordReturnType(type)) {\n                  parser.addTypeWarning(\n                      \"msg.jsdoc.incompat.type\", lineno, charno);\n                  break;\n                }\n\n                // TODO(johnlenz): The extractMultilineTextualBlock method\n                // and friends look directly at the stream, regardless of\n                // last token read, so we don't want to read the first\n                // \"STRING\" out of the stream.\n\n                boolean isAnnotationNext = lookAheadForAnnotation();\n\n                // Find the return's description (if applicable).\n                if (jsdocBuilder.shouldParseDocumentation()\n                    && !isAnnotationNext) {\n                  ExtractionInfo returnDescriptionInfo =\n                      extractMultilineTextualBlock(token);\n\n                  String returnDescription =\n                      returnDescriptionInfo.string;\n\n                  if (returnDescription.length() > 0) {\n                    jsdocBuilder.recordReturnDescription(\n                        returnDescription);\n                  }\n\n                  token = returnDescriptionInfo.token;\n                } else {\n                  token = eatUntilEOLIfNotAnnotation();\n                }\n                return token;\n\n              case THIS:\n                if (!jsdocBuilder.recordThisType(type)) {\n                  parser.addTypeWarning(\n                      \"msg.jsdoc.incompat.type\", lineno, charno);\n                }\n                break;\n\n              case TYPEDEF:\n                if (!jsdocBuilder.recordTypedef(type)) {\n                  parser.addTypeWarning(\n                      \"msg.jsdoc.incompat.type\", lineno, charno);\n                }\n                break;\n            }",
      "info" : "SwitchStatement[33519-36897]:SwitchStatement[33519-36897]"
    }, {
      "left" : "case CONSTANT:",
      "right" : "case CONSTANT:",
      "info" : "SwitchCase[33555-33569]:SwitchCase[33555-33569]"
    }, {
      "left" : "if (!jsdocBuilder.recordConstancy())",
      "right" : "if (!jsdocBuilder.recordConstancy())",
      "info" : "IfStatement[33586-33766]:IfStatement[33586-33766]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33623-33766]:Block[33623-33766]"
    }, {
      "left" : "parser.addParserWarning(\"msg.jsdoc.const\",\n                      stream.getLineno(), stream.getCharno());",
      "right" : "parser.addParserWarning(\"msg.jsdoc.const\",\n                      stream.getLineno(), stream.getCharno());",
      "info" : "ExpressionStatement[33643-33748]:ExpressionStatement[33643-33748]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[33783-33789]:BreakStatement[33783-33789]"
    }, {
      "left" : "case DEFINE:",
      "right" : "case DEFINE:",
      "info" : "SwitchCase[33805-33817]:SwitchCase[33805-33817]"
    }, {
      "left" : "if (!jsdocBuilder.recordDefineType(type))",
      "right" : "if (!jsdocBuilder.recordDefineType(type))",
      "info" : "IfStatement[33834-33996]:IfStatement[33834-33996]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33876-33996]:Block[33876-33996]"
    }, {
      "left" : "parser.addParserWarning(\"msg.jsdoc.define\",\n                      lineno, charno);",
      "right" : "parser.addParserWarning(\"msg.jsdoc.define\",\n                      lineno, charno);",
      "info" : "ExpressionStatement[33896-33978]:ExpressionStatement[33896-33978]"
    }, {
      "left" : "return recordDescription(token);",
      "right" : "return recordDescription(token);",
      "info" : "ReturnStatement[34013-34045]:ReturnStatement[34013-34045]"
    }, {
      "left" : "case PRIVATE:",
      "right" : "case PRIVATE:",
      "info" : "SwitchCase[34061-34074]:SwitchCase[34061-34074]"
    }, {
      "left" : "if (!jsdocBuilder.recordVisibility(Visibility.PRIVATE))",
      "right" : "if (!jsdocBuilder.recordVisibility(Visibility.PRIVATE))",
      "info" : "IfStatement[34091-34302]:IfStatement[34091-34302]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34147-34302]:Block[34147-34302]"
    }, {
      "left" : "parser.addParserWarning(\n                      \"msg.jsdoc.visibility.private\",\n                      lineno, charno);",
      "right" : "parser.addParserWarning(\n                      \"msg.jsdoc.visibility.private\",\n                      lineno, charno);",
      "info" : "ExpressionStatement[34167-34284]:ExpressionStatement[34167-34284]"
    }, {
      "left" : "return recordDescription(token);",
      "right" : "return recordDescription(token);",
      "info" : "ReturnStatement[34319-34351]:ReturnStatement[34319-34351]"
    }, {
      "left" : "case PROTECTED:",
      "right" : "case PROTECTED:",
      "info" : "SwitchCase[34367-34382]:SwitchCase[34367-34382]"
    }, {
      "left" : "if (!jsdocBuilder.recordVisibility(Visibility.PROTECTED))",
      "right" : "if (!jsdocBuilder.recordVisibility(Visibility.PROTECTED))",
      "info" : "IfStatement[34399-34614]:IfStatement[34399-34614]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34457-34614]:Block[34457-34614]"
    }, {
      "left" : "parser.addParserWarning(\n                      \"msg.jsdoc.visibility.protected\",\n                      lineno, charno);",
      "right" : "parser.addParserWarning(\n                      \"msg.jsdoc.visibility.protected\",\n                      lineno, charno);",
      "info" : "ExpressionStatement[34477-34596]:ExpressionStatement[34477-34596]"
    }, {
      "left" : "return recordDescription(token);",
      "right" : "return recordDescription(token);",
      "info" : "ReturnStatement[34631-34663]:ReturnStatement[34631-34663]"
    }, {
      "left" : "case PUBLIC:",
      "right" : "case PUBLIC:",
      "info" : "SwitchCase[34679-34691]:SwitchCase[34679-34691]"
    }, {
      "left" : "if (!jsdocBuilder.recordVisibility(Visibility.PUBLIC))",
      "right" : "if (!jsdocBuilder.recordVisibility(Visibility.PUBLIC))",
      "info" : "IfStatement[34708-34917]:IfStatement[34708-34917]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34763-34917]:Block[34763-34917]"
    }, {
      "left" : "parser.addParserWarning(\n                      \"msg.jsdoc.visibility.public\",\n                      lineno, charno);",
      "right" : "parser.addParserWarning(\n                      \"msg.jsdoc.visibility.public\",\n                      lineno, charno);",
      "info" : "ExpressionStatement[34783-34899]:ExpressionStatement[34783-34899]"
    }, {
      "left" : "return recordDescription(token);",
      "right" : "return recordDescription(token);",
      "info" : "ReturnStatement[34934-34966]:ReturnStatement[34934-34966]"
    }, {
      "left" : "case RETURN:",
      "right" : "case RETURN:",
      "info" : "SwitchCase[34982-34994]:SwitchCase[34982-34994]"
    }, {
      "left" : "if (type == null)",
      "right" : "if (type == null)",
      "info" : "IfStatement[35011-35119]:IfStatement[35011-35119]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35029-35119]:Block[35029-35119]"
    }, {
      "left" : "type = createJSTypeExpression(newNode(Token.QMARK));",
      "right" : "type = createJSTypeExpression(newNode(Token.QMARK));",
      "info" : "ExpressionStatement[35049-35101]:ExpressionStatement[35049-35101]"
    }, {
      "left" : "if (!jsdocBuilder.recordReturnType(type))",
      "right" : "if (!jsdocBuilder.recordReturnType(type))",
      "info" : "IfStatement[35137-35330]:IfStatement[35137-35330]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35179-35330]:Block[35179-35330]"
    }, {
      "left" : "parser.addTypeWarning(\n                      \"msg.jsdoc.incompat.type\", lineno, charno);",
      "right" : "parser.addTypeWarning(\n                      \"msg.jsdoc.incompat.type\", lineno, charno);",
      "info" : "ExpressionStatement[35199-35287]:ExpressionStatement[35199-35287]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[35306-35312]:BreakStatement[35306-35312]"
    }, {
      "left" : "boolean isAnnotationNext = lookAheadForAnnotation();",
      "right" : "boolean isAnnotationNext = lookAheadForAnnotation();",
      "info" : "VariableDeclarationStatement[35616-35668]:VariableDeclarationStatement[35616-35668]"
    }, {
      "left" : "if (jsdocBuilder.shouldParseDocumentation()\n                    && !isAnnotationNext)",
      "right" : "if (jsdocBuilder.shouldParseDocumentation()\n                    && !isAnnotationNext)",
      "info" : "IfStatement[35752-36387]:IfStatement[35752-36387]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35838-36306]:Block[35838-36306]"
    }, {
      "left" : "ExtractionInfo returnDescriptionInfo =\n                      extractMultilineTextualBlock(token);",
      "right" : "ExtractionInfo returnDescriptionInfo =\n                      extractMultilineTextualBlock(token);",
      "info" : "VariableDeclarationStatement[35858-35955]:VariableDeclarationStatement[35858-35955]"
    }, {
      "left" : "String returnDescription =\n                      returnDescriptionInfo.string;",
      "right" : "String returnDescription =\n                      returnDescriptionInfo.string;",
      "info" : "VariableDeclarationStatement[35975-36053]:VariableDeclarationStatement[35975-36053]"
    }, {
      "left" : "if (returnDescription.length() > 0)",
      "right" : "if (returnDescription.length() > 0)",
      "info" : "IfStatement[36073-36232]:IfStatement[36073-36232]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36109-36232]:Block[36109-36232]"
    }, {
      "left" : "jsdocBuilder.recordReturnDescription(\n                        returnDescription);",
      "right" : "jsdocBuilder.recordReturnDescription(\n                        returnDescription);",
      "info" : "ExpressionStatement[36131-36212]:ExpressionStatement[36131-36212]"
    }, {
      "left" : "token = returnDescriptionInfo.token;",
      "right" : "token = returnDescriptionInfo.token;",
      "info" : "ExpressionStatement[36252-36288]:ExpressionStatement[36252-36288]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36312-36387]:Block[36312-36387]"
    }, {
      "left" : "token = eatUntilEOLIfNotAnnotation();",
      "right" : "token = eatUntilEOLIfNotAnnotation();",
      "info" : "ExpressionStatement[36332-36369]:ExpressionStatement[36332-36369]"
    }, {
      "left" : "return token;",
      "right" : "return token;",
      "info" : "ReturnStatement[36404-36417]:ReturnStatement[36404-36417]"
    }, {
      "left" : "case THIS:",
      "right" : "case THIS:",
      "info" : "SwitchCase[36433-36443]:SwitchCase[36433-36443]"
    }, {
      "left" : "if (!jsdocBuilder.recordThisType(type))",
      "right" : "if (!jsdocBuilder.recordThisType(type))",
      "info" : "IfStatement[36460-36626]:IfStatement[36460-36626]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36500-36626]:Block[36500-36626]"
    }, {
      "left" : "parser.addTypeWarning(\n                      \"msg.jsdoc.incompat.type\", lineno, charno);",
      "right" : "parser.addTypeWarning(\n                      \"msg.jsdoc.incompat.type\", lineno, charno);",
      "info" : "ExpressionStatement[36520-36608]:ExpressionStatement[36520-36608]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[36643-36649]:BreakStatement[36643-36649]"
    }, {
      "left" : "case TYPEDEF:",
      "right" : "case TYPEDEF:",
      "info" : "SwitchCase[36665-36678]:SwitchCase[36665-36678]"
    }, {
      "left" : "if (!jsdocBuilder.recordTypedef(type))",
      "right" : "if (!jsdocBuilder.recordTypedef(type))",
      "info" : "IfStatement[36695-36860]:IfStatement[36695-36860]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36734-36860]:Block[36734-36860]"
    }, {
      "left" : "parser.addTypeWarning(\n                      \"msg.jsdoc.incompat.type\", lineno, charno);",
      "right" : "parser.addTypeWarning(\n                      \"msg.jsdoc.incompat.type\", lineno, charno);",
      "info" : "ExpressionStatement[36754-36842]:ExpressionStatement[36754-36842]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[36877-36883]:BreakStatement[36877-36883]"
    }, {
      "left" : "return eatUntilEOLIfNotAnnotation();",
      "right" : "return eatUntilEOLIfNotAnnotation();",
      "info" : "ReturnStatement[36921-36957]:ReturnStatement[36921-36957]"
    }, {
      "left" : "return next();",
      "right" : "return next();",
      "info" : "ReturnStatement[36977-36991]:ReturnStatement[36977-36991]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37170-37466]:Block[37170-37466]"
    }, {
      "left" : "if (jsdocBuilder.shouldParseDocumentation())",
      "right" : "if (jsdocBuilder.shouldParseDocumentation())",
      "info" : "IfStatement[37226-37444]:IfStatement[37226-37444]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37271-37391]:Block[37271-37391]"
    }, {
      "left" : "ExtractionInfo descriptionInfo = extractMultilineTextualBlock(token);",
      "right" : "ExtractionInfo descriptionInfo = extractMultilineTextualBlock(token);",
      "info" : "VariableDeclarationStatement[37279-37348]:VariableDeclarationStatement[37279-37348]"
    }, {
      "left" : "token = descriptionInfo.token;",
      "right" : "token = descriptionInfo.token;",
      "info" : "ExpressionStatement[37355-37385]:ExpressionStatement[37355-37385]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37397-37444]:Block[37397-37444]"
    }, {
      "left" : "token = eatTokensUntilEOL(token);",
      "right" : "token = eatTokensUntilEOL(token);",
      "info" : "ExpressionStatement[37405-37438]:ExpressionStatement[37405-37438]"
    }, {
      "left" : "return token;",
      "right" : "return token;",
      "info" : "ReturnStatement[37449-37462]:ReturnStatement[37449-37462]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37540-38108]:Block[37540-38108]"
    }, {
      "left" : "for (ExtendedTypeInfo typeInfo : extendedTypes)",
      "right" : "for (ExtendedTypeInfo typeInfo : extendedTypes)",
      "info" : "EnhancedForStatement[37546-38104]:EnhancedForStatement[37546-38104]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37594-38104]:Block[37594-38104]"
    }, {
      "left" : "if (jsdocBuilder.isInterfaceRecorded())",
      "right" : "if (jsdocBuilder.isInterfaceRecorded())",
      "info" : "IfStatement[37665-38098]:IfStatement[37665-38098]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37705-37906]:Block[37705-37906]"
    }, {
      "left" : "if (!jsdocBuilder.recordExtendedInterface(typeInfo.type))",
      "right" : "if (!jsdocBuilder.recordExtendedInterface(typeInfo.type))",
      "info" : "IfStatement[37715-37898]:IfStatement[37715-37898]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37773-37898]:Block[37773-37898]"
    }, {
      "left" : "parser.addParserWarning(\"msg.jsdoc.extends.duplicate\",\n              typeInfo.lineno, typeInfo.charno);",
      "right" : "parser.addParserWarning(\"msg.jsdoc.extends.duplicate\",\n              typeInfo.lineno, typeInfo.charno);",
      "info" : "ExpressionStatement[37785-37888]:ExpressionStatement[37785-37888]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37912-38098]:Block[37912-38098]"
    }, {
      "left" : "if (!jsdocBuilder.recordBaseType(typeInfo.type))",
      "right" : "if (!jsdocBuilder.recordBaseType(typeInfo.type))",
      "info" : "IfStatement[37922-38090]:IfStatement[37922-38090]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37971-38090]:Block[37971-38090]"
    }, {
      "left" : "parser.addTypeWarning(\"msg.jsdoc.incompat.type\",\n              typeInfo.lineno, typeInfo.charno);",
      "right" : "parser.addTypeWarning(\"msg.jsdoc.incompat.type\",\n              typeInfo.lineno, typeInfo.charno);",
      "info" : "ExpressionStatement[37983-38080]:ExpressionStatement[37983-38080]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38320-39490]:Block[38320-39490]"
    }, {
      "left" : "if (token == JsDocToken.LC)",
      "right" : "if (token == JsDocToken.LC)",
      "info" : "IfStatement[38326-39468]:IfStatement[38326-39468]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38354-39468]:Block[38354-39468]"
    }, {
      "left" : "Set<String> suppressions = new HashSet<String>();",
      "right" : "Set<String> suppressions = new HashSet<String>();",
      "info" : "VariableDeclarationStatement[38362-38411]:VariableDeclarationStatement[38362-38411]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[38418-39079]:WhileStatement[38418-39079]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38431-39079]:Block[38431-39079]"
    }, {
      "left" : "if (match(JsDocToken.STRING))",
      "right" : "if (match(JsDocToken.STRING))",
      "info" : "IfStatement[38441-38944]:IfStatement[38441-38944]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38471-38792]:Block[38471-38792]"
    }, {
      "left" : "String name = stream.getString();",
      "right" : "String name = stream.getString();",
      "info" : "VariableDeclarationStatement[38483-38516]:VariableDeclarationStatement[38483-38516]"
    }, {
      "left" : "if (!suppressionNames.contains(name))",
      "right" : "if (!suppressionNames.contains(name))",
      "info" : "IfStatement[38527-38707]:IfStatement[38527-38707]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38565-38707]:Block[38565-38707]"
    }, {
      "left" : "parser.addParserWarning(\"msg.jsdoc.suppress.unknown\", name,\n                stream.getLineno(), stream.getCharno());",
      "right" : "parser.addParserWarning(\"msg.jsdoc.suppress.unknown\", name,\n                stream.getLineno(), stream.getCharno());",
      "info" : "ExpressionStatement[38579-38695]:ExpressionStatement[38579-38695]"
    }, {
      "left" : "suppressions.add(stream.getString());",
      "right" : "suppressions.add(stream.getString());",
      "info" : "ExpressionStatement[38719-38756]:ExpressionStatement[38719-38756]"
    }, {
      "left" : "token = next();",
      "right" : "token = next();",
      "info" : "ExpressionStatement[38767-38782]:ExpressionStatement[38767-38782]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38798-38944]:Block[38798-38944]"
    }, {
      "left" : "parser.addParserWarning(\"msg.jsdoc.suppress\",\n              stream.getLineno(), stream.getCharno());",
      "right" : "parser.addParserWarning(\"msg.jsdoc.suppress\",\n              stream.getLineno(), stream.getCharno());",
      "info" : "ExpressionStatement[38810-38910]:ExpressionStatement[38810-38910]"
    }, {
      "left" : "return token;",
      "right" : "return token;",
      "info" : "ReturnStatement[38921-38934]:ReturnStatement[38921-38934]"
    }, {
      "left" : "if (match(JsDocToken.PIPE, JsDocToken.COMMA))",
      "right" : "if (match(JsDocToken.PIPE, JsDocToken.COMMA))",
      "info" : "IfStatement[38954-39071]:IfStatement[38954-39071]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39000-39037]:Block[39000-39037]"
    }, {
      "left" : "token = next();",
      "right" : "token = next();",
      "info" : "ExpressionStatement[39012-39027]:ExpressionStatement[39012-39027]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39043-39071]:Block[39043-39071]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[39055-39061]:BreakStatement[39055-39061]"
    }, {
      "left" : "if (!match(JsDocToken.RC))",
      "right" : "if (!match(JsDocToken.RC))",
      "info" : "IfStatement[39087-39462]:IfStatement[39087-39462]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39114-39230]:Block[39114-39230]"
    }, {
      "left" : "parser.addParserWarning(\"msg.jsdoc.suppress\",\n            stream.getLineno(), stream.getCharno());",
      "right" : "parser.addParserWarning(\"msg.jsdoc.suppress\",\n            stream.getLineno(), stream.getCharno());",
      "info" : "ExpressionStatement[39124-39222]:ExpressionStatement[39124-39222]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39236-39462]:Block[39236-39462]"
    }, {
      "left" : "token = next();",
      "right" : "token = next();",
      "info" : "ExpressionStatement[39246-39261]:ExpressionStatement[39246-39261]"
    }, {
      "left" : "if (!jsdocBuilder.recordSuppressions(suppressions))",
      "right" : "if (!jsdocBuilder.recordSuppressions(suppressions))",
      "info" : "IfStatement[39270-39454]:IfStatement[39270-39454]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39322-39454]:Block[39322-39454]"
    }, {
      "left" : "parser.addParserWarning(\"msg.jsdoc.suppress.duplicate\",\n              stream.getLineno(), stream.getCharno());",
      "right" : "parser.addParserWarning(\"msg.jsdoc.suppress.duplicate\",\n              stream.getLineno(), stream.getCharno());",
      "info" : "ExpressionStatement[39334-39444]:ExpressionStatement[39334-39444]"
    }, {
      "left" : "return token;",
      "right" : "return token;",
      "info" : "ReturnStatement[39473-39486]:ReturnStatement[39473-39486]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39705-40905]:Block[39705-40905]"
    }, {
      "left" : "if (token == JsDocToken.LC)",
      "right" : "if (token == JsDocToken.LC)",
      "info" : "IfStatement[39711-40883]:IfStatement[39711-40883]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39739-40883]:Block[39739-40883]"
    }, {
      "left" : "Set<String> modifies = new HashSet<String>();",
      "right" : "Set<String> modifies = new HashSet<String>();",
      "info" : "VariableDeclarationStatement[39747-39792]:VariableDeclarationStatement[39747-39792]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[39799-40502]:WhileStatement[39799-40502]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39812-40502]:Block[39812-40502]"
    }, {
      "left" : "if (match(JsDocToken.STRING))",
      "right" : "if (match(JsDocToken.STRING))",
      "info" : "IfStatement[39822-40385]:IfStatement[39822-40385]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39852-40233]:Block[39852-40233]"
    }, {
      "left" : "String name = stream.getString();",
      "right" : "String name = stream.getString();",
      "info" : "VariableDeclarationStatement[39864-39897]:VariableDeclarationStatement[39864-39897]"
    }, {
      "left" : "if (!modifiesAnnotationKeywords.contains(name)\n              && !jsdocBuilder.hasParameter(name))",
      "right" : "if (!modifiesAnnotationKeywords.contains(name)\n              && !jsdocBuilder.hasParameter(name))",
      "info" : "IfStatement[39908-40152]:IfStatement[39908-40152]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40006-40152]:Block[40006-40152]"
    }, {
      "left" : "parser.addParserWarning(\"msg.jsdoc.modifies.unknown\", name,\n                  stream.getLineno(), stream.getCharno());",
      "right" : "parser.addParserWarning(\"msg.jsdoc.modifies.unknown\", name,\n                  stream.getLineno(), stream.getCharno());",
      "info" : "ExpressionStatement[40022-40140]:ExpressionStatement[40022-40140]"
    }, {
      "left" : "modifies.add(stream.getString());",
      "right" : "modifies.add(stream.getString());",
      "info" : "ExpressionStatement[40164-40197]:ExpressionStatement[40164-40197]"
    }, {
      "left" : "token = next();",
      "right" : "token = next();",
      "info" : "ExpressionStatement[40208-40223]:ExpressionStatement[40208-40223]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40239-40385]:Block[40239-40385]"
    }, {
      "left" : "parser.addParserWarning(\"msg.jsdoc.modifies\",\n              stream.getLineno(), stream.getCharno());",
      "right" : "parser.addParserWarning(\"msg.jsdoc.modifies\",\n              stream.getLineno(), stream.getCharno());",
      "info" : "ExpressionStatement[40251-40351]:ExpressionStatement[40251-40351]"
    }, {
      "left" : "return token;",
      "right" : "return token;",
      "info" : "ReturnStatement[40362-40375]:ReturnStatement[40362-40375]"
    }, {
      "left" : "if (match(JsDocToken.PIPE))",
      "right" : "if (match(JsDocToken.PIPE))",
      "info" : "IfStatement[40395-40494]:IfStatement[40395-40494]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40423-40460]:Block[40423-40460]"
    }, {
      "left" : "token = next();",
      "right" : "token = next();",
      "info" : "ExpressionStatement[40435-40450]:ExpressionStatement[40435-40450]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40466-40494]:Block[40466-40494]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[40478-40484]:BreakStatement[40478-40484]"
    }, {
      "left" : "if (!match(JsDocToken.RC))",
      "right" : "if (!match(JsDocToken.RC))",
      "info" : "IfStatement[40510-40877]:IfStatement[40510-40877]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40537-40653]:Block[40537-40653]"
    }, {
      "left" : "parser.addParserWarning(\"msg.jsdoc.modifies\",\n            stream.getLineno(), stream.getCharno());",
      "right" : "parser.addParserWarning(\"msg.jsdoc.modifies\",\n            stream.getLineno(), stream.getCharno());",
      "info" : "ExpressionStatement[40547-40645]:ExpressionStatement[40547-40645]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40659-40877]:Block[40659-40877]"
    }, {
      "left" : "token = next();",
      "right" : "token = next();",
      "info" : "ExpressionStatement[40669-40684]:ExpressionStatement[40669-40684]"
    }, {
      "left" : "if (!jsdocBuilder.recordModifies(modifies))",
      "right" : "if (!jsdocBuilder.recordModifies(modifies))",
      "info" : "IfStatement[40693-40869]:IfStatement[40693-40869]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40737-40869]:Block[40737-40869]"
    }, {
      "left" : "parser.addParserWarning(\"msg.jsdoc.modifies.duplicate\",\n              stream.getLineno(), stream.getCharno());",
      "right" : "parser.addParserWarning(\"msg.jsdoc.modifies.duplicate\",\n              stream.getLineno(), stream.getCharno());",
      "info" : "ExpressionStatement[40749-40859]:ExpressionStatement[40749-40859]"
    }, {
      "left" : "return token;",
      "right" : "return token;",
      "info" : "ReturnStatement[40888-40901]:ReturnStatement[40888-40901]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41148-42847]:Block[41148-42847]"
    }, {
      "left" : "String idgenKind = \"unique\";",
      "right" : "String idgenKind = \"unique\";",
      "info" : "VariableDeclarationStatement[41154-41182]:VariableDeclarationStatement[41154-41182]"
    }, {
      "left" : "if (token == JsDocToken.LC)",
      "right" : "if (token == JsDocToken.LC)",
      "info" : "IfStatement[41187-41942]:IfStatement[41187-41942]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41215-41942]:Block[41215-41942]"
    }, {
      "left" : "if (match(JsDocToken.STRING))",
      "right" : "if (match(JsDocToken.STRING))",
      "info" : "IfStatement[41223-41745]:IfStatement[41223-41745]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41253-41600]:Block[41253-41600]"
    }, {
      "left" : "String name = stream.getString();",
      "right" : "String name = stream.getString();",
      "info" : "VariableDeclarationStatement[41263-41296]:VariableDeclarationStatement[41263-41296]"
    }, {
      "left" : "if (!idGeneratorAnnotationKeywords.contains(name)\n            && !jsdocBuilder.hasParameter(name))",
      "right" : "if (!idGeneratorAnnotationKeywords.contains(name)\n            && !jsdocBuilder.hasParameter(name))",
      "info" : "IfStatement[41305-41541]:IfStatement[41305-41541]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41404-41541]:Block[41404-41541]"
    }, {
      "left" : "parser.addParserWarning(\"msg.jsdoc.idgen.unknown\", name,\n                stream.getLineno(), stream.getCharno());",
      "right" : "parser.addParserWarning(\"msg.jsdoc.idgen.unknown\", name,\n                stream.getLineno(), stream.getCharno());",
      "info" : "ExpressionStatement[41418-41531]:ExpressionStatement[41418-41531]"
    }, {
      "left" : "idgenKind = name;",
      "right" : "idgenKind = name;",
      "info" : "ExpressionStatement[41551-41568]:ExpressionStatement[41551-41568]"
    }, {
      "left" : "token = next();",
      "right" : "token = next();",
      "info" : "ExpressionStatement[41577-41592]:ExpressionStatement[41577-41592]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41606-41745]:Block[41606-41745]"
    }, {
      "left" : "parser.addParserWarning(\"msg.jsdoc.idgen.bad\",\n            stream.getLineno(), stream.getCharno());",
      "right" : "parser.addParserWarning(\"msg.jsdoc.idgen.bad\",\n            stream.getLineno(), stream.getCharno());",
      "info" : "ExpressionStatement[41616-41715]:ExpressionStatement[41616-41715]"
    }, {
      "left" : "return token;",
      "right" : "return token;",
      "info" : "ReturnStatement[41724-41737]:ReturnStatement[41724-41737]"
    }, {
      "left" : "if (!match(JsDocToken.RC))",
      "right" : "if (!match(JsDocToken.RC))",
      "info" : "IfStatement[41753-41936]:IfStatement[41753-41936]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41780-41897]:Block[41780-41897]"
    }, {
      "left" : "parser.addParserWarning(\"msg.jsdoc.idgen.bad\",\n            stream.getLineno(), stream.getCharno());",
      "right" : "parser.addParserWarning(\"msg.jsdoc.idgen.bad\",\n            stream.getLineno(), stream.getCharno());",
      "info" : "ExpressionStatement[41790-41889]:ExpressionStatement[41790-41889]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41903-41936]:Block[41903-41936]"
    }, {
      "left" : "token = next();",
      "right" : "token = next();",
      "info" : "ExpressionStatement[41913-41928]:ExpressionStatement[41913-41928]"
    }, {
      "left" : "if (idgenKind.equals(\"unique\"))",
      "right" : "if (idgenKind.equals(\"unique\"))",
      "info" : "IfStatement[41948-42824]:IfStatement[41948-42824]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41980-42156]:Block[41980-42156]"
    }, {
      "left" : "if (!jsdocBuilder.recordIdGenerator())",
      "right" : "if (!jsdocBuilder.recordIdGenerator())",
      "info" : "IfStatement[41988-42150]:IfStatement[41988-42150]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42027-42150]:Block[42027-42150]"
    }, {
      "left" : "parser.addParserWarning(\"msg.jsdoc.idgen.duplicate\",\n            stream.getLineno(), stream.getCharno());",
      "right" : "parser.addParserWarning(\"msg.jsdoc.idgen.duplicate\",\n            stream.getLineno(), stream.getCharno());",
      "info" : "ExpressionStatement[42037-42142]:ExpressionStatement[42037-42142]"
    }, {
      "left" : "if (idgenKind.equals(\"consistent\"))",
      "right" : "if (idgenKind.equals(\"consistent\"))",
      "info" : "IfStatement[42162-42824]:IfStatement[42162-42824]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42198-42384]:Block[42198-42384]"
    }, {
      "left" : "if (!jsdocBuilder.recordConsistentIdGenerator())",
      "right" : "if (!jsdocBuilder.recordConsistentIdGenerator())",
      "info" : "IfStatement[42206-42378]:IfStatement[42206-42378]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42255-42378]:Block[42255-42378]"
    }, {
      "left" : "parser.addParserWarning(\"msg.jsdoc.idgen.duplicate\",\n            stream.getLineno(), stream.getCharno());",
      "right" : "parser.addParserWarning(\"msg.jsdoc.idgen.duplicate\",\n            stream.getLineno(), stream.getCharno());",
      "info" : "ExpressionStatement[42265-42370]:ExpressionStatement[42265-42370]"
    }, {
      "left" : "if (idgenKind.equals(\"stable\"))",
      "right" : "if (idgenKind.equals(\"stable\"))",
      "info" : "IfStatement[42390-42824]:IfStatement[42390-42824]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42422-42604]:Block[42422-42604]"
    }, {
      "left" : "if (!jsdocBuilder.recordStableIdGenerator())",
      "right" : "if (!jsdocBuilder.recordStableIdGenerator())",
      "info" : "IfStatement[42430-42598]:IfStatement[42430-42598]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42475-42598]:Block[42475-42598]"
    }, {
      "left" : "parser.addParserWarning(\"msg.jsdoc.idgen.duplicate\",\n            stream.getLineno(), stream.getCharno());",
      "right" : "parser.addParserWarning(\"msg.jsdoc.idgen.duplicate\",\n            stream.getLineno(), stream.getCharno());",
      "info" : "ExpressionStatement[42485-42590]:ExpressionStatement[42485-42590]"
    }, {
      "left" : "if (idgenKind.equals(\"mapped\"))",
      "right" : "if (idgenKind.equals(\"mapped\"))",
      "info" : "IfStatement[42610-42824]:IfStatement[42610-42824]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42642-42824]:Block[42642-42824]"
    }, {
      "left" : "if (!jsdocBuilder.recordMappedIdGenerator())",
      "right" : "if (!jsdocBuilder.recordMappedIdGenerator())",
      "info" : "IfStatement[42650-42818]:IfStatement[42650-42818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42695-42818]:Block[42695-42818]"
    }, {
      "left" : "parser.addParserWarning(\"msg.jsdoc.idgen.duplicate\",\n            stream.getLineno(), stream.getCharno());",
      "right" : "parser.addParserWarning(\"msg.jsdoc.idgen.duplicate\",\n            stream.getLineno(), stream.getCharno());",
      "info" : "ExpressionStatement[42705-42810]:ExpressionStatement[42705-42810]"
    }, {
      "left" : "return token;",
      "right" : "return token;",
      "info" : "ReturnStatement[42830-42843]:ReturnStatement[42830-42843]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43130-43256]:Block[43130-43256]"
    }, {
      "left" : "return parseAndRecordTypeNode(token, stream.getLineno(), stream.getCharno(),\n        token == JsDocToken.LC, false);",
      "right" : "return parseAndRecordTypeNode(token, stream.getLineno(), stream.getCharno(),\n        token == JsDocToken.LC, false);",
      "info" : "ReturnStatement[43136-43252]:ReturnStatement[43136-43252]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43844-43930]:Block[43844-43930]"
    }, {
      "left" : "return parseAndRecordTypeNode(token, lineno, startCharno, matchingLC, true);",
      "right" : "return parseAndRecordTypeNode(token, lineno, startCharno, matchingLC, true);",
      "info" : "ReturnStatement[43850-43926]:ReturnStatement[43850-43926]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44449-44732]:Block[44449-44732]"
    }, {
      "left" : "Preconditions.checkArgument(token == JsDocToken.LC);",
      "right" : "Preconditions.checkArgument(token == JsDocToken.LC);",
      "info" : "ExpressionStatement[44455-44507]:ExpressionStatement[44455-44507]"
    }, {
      "left" : "int lineno = stream.getLineno();",
      "right" : "int lineno = stream.getLineno();",
      "info" : "VariableDeclarationStatement[44512-44544]:VariableDeclarationStatement[44512-44544]"
    }, {
      "left" : "int startCharno = stream.getCharno();",
      "right" : "int startCharno = stream.getCharno();",
      "info" : "VariableDeclarationStatement[44549-44586]:VariableDeclarationStatement[44549-44586]"
    }, {
      "left" : "Node typeNode = parseParamTypeExpressionAnnotation(token);",
      "right" : "Node typeNode = parseParamTypeExpressionAnnotation(token);",
      "info" : "VariableDeclarationStatement[44592-44650]:VariableDeclarationStatement[44592-44650]"
    }, {
      "left" : "recordTypeNode(lineno, startCharno, typeNode, true);",
      "right" : "recordTypeNode(lineno, startCharno, typeNode, true);",
      "info" : "ExpressionStatement[44655-44707]:ExpressionStatement[44655-44707]"
    }, {
      "left" : "return typeNode;",
      "right" : "return typeNode;",
      "info" : "ReturnStatement[44712-44728]:ReturnStatement[44712-44728]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45604-45876]:Block[45604-45876]"
    }, {
      "left" : "Node typeNode = null;",
      "right" : "Node typeNode = null;",
      "info" : "VariableDeclarationStatement[45610-45631]:VariableDeclarationStatement[45610-45631]"
    }, {
      "left" : "if (onlyParseSimpleNames)",
      "right" : "if (onlyParseSimpleNames)",
      "info" : "IfStatement[45637-45787]:IfStatement[45637-45787]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45663-45719]:Block[45663-45719]"
    }, {
      "left" : "typeNode = parseTypeNameAnnotation(token);",
      "right" : "typeNode = parseTypeNameAnnotation(token);",
      "info" : "ExpressionStatement[45671-45713]:ExpressionStatement[45671-45713]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45725-45787]:Block[45725-45787]"
    }, {
      "left" : "typeNode = parseTypeExpressionAnnotation(token);",
      "right" : "typeNode = parseTypeExpressionAnnotation(token);",
      "info" : "ExpressionStatement[45733-45781]:ExpressionStatement[45733-45781]"
    }, {
      "left" : "recordTypeNode(lineno, startCharno, typeNode, matchingLC);",
      "right" : "recordTypeNode(lineno, startCharno, typeNode, matchingLC);",
      "info" : "ExpressionStatement[45793-45851]:ExpressionStatement[45793-45851]"
    }, {
      "left" : "return typeNode;",
      "right" : "return typeNode;",
      "info" : "ReturnStatement[45856-45872]:ReturnStatement[45856-45872]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45992-46822]:Block[45992-46822]"
    }, {
      "left" : "switch (token) {\n      case ANNOTATION:\n        return \"@\" + stream.getString();\n\n      case BANG:\n        return \"!\";\n\n      case COMMA:\n        return \",\";\n\n      case COLON:\n        return \":\";\n\n      case GT:\n        return \">\";\n\n      case LB:\n        return \"[\";\n\n      case LC:\n        return \"{\";\n\n      case LP:\n        return \"(\";\n\n      case LT:\n        return \".<\";\n\n      case QMARK:\n        return \"?\";\n\n      case PIPE:\n        return \"|\";\n\n      case RB:\n        return \"]\";\n\n      case RC:\n        return \"}\";\n\n      case RP:\n        return \")\";\n\n      case STAR:\n        return \"*\";\n\n      case ELLIPSIS:\n        return \"...\";\n\n      case EQUALS:\n        return \"=\";\n\n      case STRING:\n        return stream.getString();\n\n      default:\n        throw new IllegalStateException(token.toString());\n    }",
      "right" : "switch (token) {\n      case ANNOTATION:\n        return \"@\" + stream.getString();\n\n      case BANG:\n        return \"!\";\n\n      case COMMA:\n        return \",\";\n\n      case COLON:\n        return \":\";\n\n      case GT:\n        return \">\";\n\n      case LB:\n        return \"[\";\n\n      case LC:\n        return \"{\";\n\n      case LP:\n        return \"(\";\n\n      case LT:\n        return \".<\";\n\n      case QMARK:\n        return \"?\";\n\n      case PIPE:\n        return \"|\";\n\n      case RB:\n        return \"]\";\n\n      case RC:\n        return \"}\";\n\n      case RP:\n        return \")\";\n\n      case STAR:\n        return \"*\";\n\n      case ELLIPSIS:\n        return \"...\";\n\n      case EQUALS:\n        return \"=\";\n\n      case STRING:\n        return stream.getString();\n\n      default:\n        throw new IllegalStateException(token.toString());\n    }",
      "info" : "SwitchStatement[45998-46818]:SwitchStatement[45998-46818]"
    }, {
      "left" : "case ANNOTATION:",
      "right" : "case ANNOTATION:",
      "info" : "SwitchCase[46021-46037]:SwitchCase[46021-46037]"
    }, {
      "left" : "return \"@\" + stream.getString();",
      "right" : "return \"@\" + stream.getString();",
      "info" : "ReturnStatement[46046-46078]:ReturnStatement[46046-46078]"
    }, {
      "left" : "case BANG:",
      "right" : "case BANG:",
      "info" : "SwitchCase[46086-46096]:SwitchCase[46086-46096]"
    }, {
      "left" : "return \"!\";",
      "right" : "return \"!\";",
      "info" : "ReturnStatement[46105-46116]:ReturnStatement[46105-46116]"
    }, {
      "left" : "case COMMA:",
      "right" : "case COMMA:",
      "info" : "SwitchCase[46124-46135]:SwitchCase[46124-46135]"
    }, {
      "left" : "return \",\";",
      "right" : "return \",\";",
      "info" : "ReturnStatement[46144-46155]:ReturnStatement[46144-46155]"
    }, {
      "left" : "case COLON:",
      "right" : "case COLON:",
      "info" : "SwitchCase[46163-46174]:SwitchCase[46163-46174]"
    }, {
      "left" : "return \":\";",
      "right" : "return \":\";",
      "info" : "ReturnStatement[46183-46194]:ReturnStatement[46183-46194]"
    }, {
      "left" : "case GT:",
      "right" : "case GT:",
      "info" : "SwitchCase[46202-46210]:SwitchCase[46202-46210]"
    }, {
      "left" : "return \">\";",
      "right" : "return \">\";",
      "info" : "ReturnStatement[46219-46230]:ReturnStatement[46219-46230]"
    }, {
      "left" : "case LB:",
      "right" : "case LB:",
      "info" : "SwitchCase[46238-46246]:SwitchCase[46238-46246]"
    }, {
      "left" : "return \"[\";",
      "right" : "return \"[\";",
      "info" : "ReturnStatement[46255-46266]:ReturnStatement[46255-46266]"
    }, {
      "left" : "case LC:",
      "right" : "case LC:",
      "info" : "SwitchCase[46274-46282]:SwitchCase[46274-46282]"
    }, {
      "left" : "return \"{\";",
      "right" : "return \"{\";",
      "info" : "ReturnStatement[46291-46302]:ReturnStatement[46291-46302]"
    }, {
      "left" : "case LP:",
      "right" : "case LP:",
      "info" : "SwitchCase[46310-46318]:SwitchCase[46310-46318]"
    }, {
      "left" : "return \"(\";",
      "right" : "return \"(\";",
      "info" : "ReturnStatement[46327-46338]:ReturnStatement[46327-46338]"
    }, {
      "left" : "case LT:",
      "right" : "case LT:",
      "info" : "SwitchCase[46346-46354]:SwitchCase[46346-46354]"
    }, {
      "left" : "return \".<\";",
      "right" : "return \".<\";",
      "info" : "ReturnStatement[46363-46375]:ReturnStatement[46363-46375]"
    }, {
      "left" : "case QMARK:",
      "right" : "case QMARK:",
      "info" : "SwitchCase[46383-46394]:SwitchCase[46383-46394]"
    }, {
      "left" : "return \"?\";",
      "right" : "return \"?\";",
      "info" : "ReturnStatement[46403-46414]:ReturnStatement[46403-46414]"
    }, {
      "left" : "case PIPE:",
      "right" : "case PIPE:",
      "info" : "SwitchCase[46422-46432]:SwitchCase[46422-46432]"
    }, {
      "left" : "return \"|\";",
      "right" : "return \"|\";",
      "info" : "ReturnStatement[46441-46452]:ReturnStatement[46441-46452]"
    }, {
      "left" : "case RB:",
      "right" : "case RB:",
      "info" : "SwitchCase[46460-46468]:SwitchCase[46460-46468]"
    }, {
      "left" : "return \"]\";",
      "right" : "return \"]\";",
      "info" : "ReturnStatement[46477-46488]:ReturnStatement[46477-46488]"
    }, {
      "left" : "case RC:",
      "right" : "case RC:",
      "info" : "SwitchCase[46496-46504]:SwitchCase[46496-46504]"
    }, {
      "left" : "return \"}\";",
      "right" : "return \"}\";",
      "info" : "ReturnStatement[46513-46524]:ReturnStatement[46513-46524]"
    }, {
      "left" : "case RP:",
      "right" : "case RP:",
      "info" : "SwitchCase[46532-46540]:SwitchCase[46532-46540]"
    }, {
      "left" : "return \")\";",
      "right" : "return \")\";",
      "info" : "ReturnStatement[46549-46560]:ReturnStatement[46549-46560]"
    }, {
      "left" : "case STAR:",
      "right" : "case STAR:",
      "info" : "SwitchCase[46568-46578]:SwitchCase[46568-46578]"
    }, {
      "left" : "return \"*\";",
      "right" : "return \"*\";",
      "info" : "ReturnStatement[46587-46598]:ReturnStatement[46587-46598]"
    }, {
      "left" : "case ELLIPSIS:",
      "right" : "case ELLIPSIS:",
      "info" : "SwitchCase[46606-46620]:SwitchCase[46606-46620]"
    }, {
      "left" : "return \"...\";",
      "right" : "return \"...\";",
      "info" : "ReturnStatement[46629-46642]:ReturnStatement[46629-46642]"
    }, {
      "left" : "case EQUALS:",
      "right" : "case EQUALS:",
      "info" : "SwitchCase[46650-46662]:SwitchCase[46650-46662]"
    }, {
      "left" : "return \"=\";",
      "right" : "return \"=\";",
      "info" : "ReturnStatement[46671-46682]:ReturnStatement[46671-46682]"
    }, {
      "left" : "case STRING:",
      "right" : "case STRING:",
      "info" : "SwitchCase[46690-46702]:SwitchCase[46690-46702]"
    }, {
      "left" : "return stream.getString();",
      "right" : "return stream.getString();",
      "info" : "ReturnStatement[46711-46737]:ReturnStatement[46711-46737]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[46745-46753]:SwitchCase[46745-46753]"
    }, {
      "left" : "throw new IllegalStateException(token.toString());",
      "right" : "throw new IllegalStateException(token.toString());",
      "info" : "ThrowStatement[46762-46812]:ThrowStatement[46762-46812]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46969-47054]:Block[46969-47054]"
    }, {
      "left" : "return n == null ? null :\n        new JSTypeExpression(n, getSourceName());",
      "right" : "return n == null ? null :\n        new JSTypeExpression(n, getSourceName());",
      "info" : "ReturnStatement[46975-47050]:ReturnStatement[46975-47050]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47370-47431]:Block[47370-47431]"
    }, {
      "left" : "this.string = string;",
      "right" : "this.string = string;",
      "info" : "ExpressionStatement[47378-47399]:ExpressionStatement[47378-47399]"
    }, {
      "left" : "this.token = token;",
      "right" : "this.token = token;",
      "info" : "ExpressionStatement[47406-47425]:ExpressionStatement[47406-47425]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47684-47771]:Block[47684-47771]"
    }, {
      "left" : "this.type = type;",
      "right" : "this.type = type;",
      "info" : "ExpressionStatement[47692-47709]:ExpressionStatement[47692-47709]"
    }, {
      "left" : "this.lineno = lineno;",
      "right" : "this.lineno = lineno;",
      "info" : "ExpressionStatement[47716-47737]:ExpressionStatement[47716-47737]"
    }, {
      "left" : "this.charno = charno;",
      "right" : "this.charno = charno;",
      "info" : "ExpressionStatement[47744-47765]:ExpressionStatement[47744-47765]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48080-48507]:Block[48080-48507]"
    }, {
      "left" : "stream.update();",
      "right" : "stream.update();",
      "info" : "ExpressionStatement[48126-48142]:ExpressionStatement[48126-48142]"
    }, {
      "left" : "int lineno = stream.getLineno();",
      "right" : "int lineno = stream.getLineno();",
      "info" : "VariableDeclarationStatement[48147-48179]:VariableDeclarationStatement[48147-48179]"
    }, {
      "left" : "int charno = stream.getCharno() + 1;",
      "right" : "int charno = stream.getCharno() + 1;",
      "info" : "VariableDeclarationStatement[48184-48220]:VariableDeclarationStatement[48184-48220]"
    }, {
      "left" : "String line = getRemainingJSDocLine().trim();",
      "right" : "String line = getRemainingJSDocLine().trim();",
      "info" : "VariableDeclarationStatement[48226-48271]:VariableDeclarationStatement[48226-48271]"
    }, {
      "left" : "if (line.length() > 0)",
      "right" : "if (line.length() > 0)",
      "info" : "IfStatement[48316-48457]:IfStatement[48316-48457]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48339-48457]:Block[48339-48457]"
    }, {
      "left" : "jsdocBuilder.markText(line, lineno, charno, lineno,\n                            charno + line.length());",
      "right" : "jsdocBuilder.markText(line, lineno, charno, lineno,\n                            charno + line.length());",
      "info" : "ExpressionStatement[48347-48451]:ExpressionStatement[48347-48451]"
    }, {
      "left" : "return new ExtractionInfo(line, next());",
      "right" : "return new ExtractionInfo(line, next());",
      "info" : "ReturnStatement[48463-48503]:ReturnStatement[48463-48503]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48581-48664]:Block[48581-48664]"
    }, {
      "left" : "return extractMultilineTextualBlock(token, WhitespaceOption.SINGLE_LINE);",
      "right" : "return extractMultilineTextualBlock(token, WhitespaceOption.SINGLE_LINE);",
      "info" : "ReturnStatement[48587-48660]:ReturnStatement[48587-48660]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49757-52959]:Block[49757-52959]"
    }, {
      "left" : "if (token == JsDocToken.EOC || token == JsDocToken.EOL ||\n        token == JsDocToken.EOF)",
      "right" : "if (token == JsDocToken.EOC || token == JsDocToken.EOL ||\n        token == JsDocToken.EOF)",
      "info" : "IfStatement[49764-49906]:IfStatement[49764-49906]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49855-49906]:Block[49855-49906]"
    }, {
      "left" : "return new ExtractionInfo(\"\", token);",
      "right" : "return new ExtractionInfo(\"\", token);",
      "info" : "ReturnStatement[49863-49900]:ReturnStatement[49863-49900]"
    }, {
      "left" : "stream.update();",
      "right" : "stream.update();",
      "info" : "ExpressionStatement[49912-49928]:ExpressionStatement[49912-49928]"
    }, {
      "left" : "int startLineno = stream.getLineno();",
      "right" : "int startLineno = stream.getLineno();",
      "info" : "VariableDeclarationStatement[49933-49970]:VariableDeclarationStatement[49933-49970]"
    }, {
      "left" : "int startCharno = stream.getCharno() + 1;",
      "right" : "int startCharno = stream.getCharno() + 1;",
      "info" : "VariableDeclarationStatement[49975-50016]:VariableDeclarationStatement[49975-50016]"
    }, {
      "left" : "String line = getRemainingJSDocLine();",
      "right" : "String line = getRemainingJSDocLine();",
      "info" : "VariableDeclarationStatement[50067-50105]:VariableDeclarationStatement[50067-50105]"
    }, {
      "left" : "if (option != WhitespaceOption.PRESERVE)",
      "right" : "if (option != WhitespaceOption.PRESERVE)",
      "info" : "IfStatement[50110-50184]:IfStatement[50110-50184]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50151-50184]:Block[50151-50184]"
    }, {
      "left" : "line = line.trim();",
      "right" : "line = line.trim();",
      "info" : "ExpressionStatement[50159-50178]:ExpressionStatement[50159-50178]"
    }, {
      "left" : "StringBuilder builder = new StringBuilder();",
      "right" : "StringBuilder builder = new StringBuilder();",
      "info" : "VariableDeclarationStatement[50190-50234]:VariableDeclarationStatement[50190-50234]"
    }, {
      "left" : "builder.append(line);",
      "right" : "builder.append(line);",
      "info" : "ExpressionStatement[50239-50260]:ExpressionStatement[50239-50260]"
    }, {
      "left" : "state = State.SEARCHING_ANNOTATION;",
      "right" : "state = State.SEARCHING_ANNOTATION;",
      "info" : "ExpressionStatement[50266-50301]:ExpressionStatement[50266-50301]"
    }, {
      "left" : "token = next();",
      "right" : "token = next();",
      "info" : "ExpressionStatement[50306-50321]:ExpressionStatement[50306-50321]"
    }, {
      "left" : "boolean ignoreStar = false;",
      "right" : "boolean ignoreStar = false;",
      "info" : "VariableDeclarationStatement[50327-50354]:VariableDeclarationStatement[50327-50354]"
    }, {
      "left" : "int lineStartChar = -1;",
      "right" : "int lineStartChar = -1;",
      "info" : "VariableDeclarationStatement[50535-50558]:VariableDeclarationStatement[50535-50558]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[50564-52955]:DoStatement[50564-52955]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50567-52941]:Block[50567-52941]"
    }, {
      "left" : "switch (token) {\n        case STAR:\n          if (ignoreStar) {\n            // Mark the position after the star as the new start of the line.\n            lineStartChar = stream.getCharno() + 1;\n          } else {\n            // The star is part of the comment.\n            if (builder.length() > 0) {\n              builder.append(' ');\n            }\n\n            builder.append('*');\n          }\n\n          token = next();\n          continue;\n\n        case EOL:\n          if (option != WhitespaceOption.SINGLE_LINE) {\n            builder.append(\"\\n\");\n          }\n\n          ignoreStar = true;\n          lineStartChar = 0;\n          token = next();\n          continue;\n\n        default:\n          ignoreStar = false;\n          state = State.SEARCHING_ANNOTATION;\n\n          boolean isEOC = token == JsDocToken.EOC;\n          if (!isEOC) {\n            if (lineStartChar != -1 && option == WhitespaceOption.PRESERVE) {\n              int numSpaces = stream.getCharno() - lineStartChar;\n              for (int i = 0; i < numSpaces; i++) {\n                builder.append(' ');\n              }\n              lineStartChar = -1;\n            } else if (builder.length() > 0) {\n              // All tokens must be separated by a space.\n              builder.append(' ');\n            }\n          }\n\n          if (token == JsDocToken.EOC ||\n              token == JsDocToken.EOF ||\n              // When we're capturing a license block, annotations\n              // in the block are OK.\n              (token == JsDocToken.ANNOTATION &&\n               option != WhitespaceOption.PRESERVE)) {\n            String multilineText = builder.toString();\n\n            if (option != WhitespaceOption.PRESERVE) {\n              multilineText = multilineText.trim();\n            }\n\n            int endLineno = stream.getLineno();\n            int endCharno = stream.getCharno();\n\n            if (multilineText.length() > 0) {\n              jsdocBuilder.markText(multilineText, startLineno, startCharno,\n                  endLineno, endCharno);\n            }\n\n            return new ExtractionInfo(multilineText, token);\n          }\n\n          builder.append(toString(token));\n\n          line = getRemainingJSDocLine();\n\n          if (option != WhitespaceOption.PRESERVE) {\n            line = trimEnd(line);\n          }\n\n          builder.append(line);\n          token = next();\n      }",
      "right" : "switch (token) {\n        case STAR:\n          if (ignoreStar) {\n            // Mark the position after the star as the new start of the line.\n            lineStartChar = stream.getCharno() + 1;\n          } else {\n            // The star is part of the comment.\n            if (builder.length() > 0) {\n              builder.append(' ');\n            }\n\n            builder.append('*');\n          }\n\n          token = next();\n          continue;\n\n        case EOL:\n          if (option != WhitespaceOption.SINGLE_LINE) {\n            builder.append(\"\\n\");\n          }\n\n          ignoreStar = true;\n          lineStartChar = 0;\n          token = next();\n          continue;\n\n        default:\n          ignoreStar = false;\n          state = State.SEARCHING_ANNOTATION;\n\n          boolean isEOC = token == JsDocToken.EOC;\n          if (!isEOC) {\n            if (lineStartChar != -1 && option == WhitespaceOption.PRESERVE) {\n              int numSpaces = stream.getCharno() - lineStartChar;\n              for (int i = 0; i < numSpaces; i++) {\n                builder.append(' ');\n              }\n              lineStartChar = -1;\n            } else if (builder.length() > 0) {\n              // All tokens must be separated by a space.\n              builder.append(' ');\n            }\n          }\n\n          if (token == JsDocToken.EOC ||\n              token == JsDocToken.EOF ||\n              // When we're capturing a license block, annotations\n              // in the block are OK.\n              (token == JsDocToken.ANNOTATION &&\n               option != WhitespaceOption.PRESERVE)) {\n            String multilineText = builder.toString();\n\n            if (option != WhitespaceOption.PRESERVE) {\n              multilineText = multilineText.trim();\n            }\n\n            int endLineno = stream.getLineno();\n            int endCharno = stream.getCharno();\n\n            if (multilineText.length() > 0) {\n              jsdocBuilder.markText(multilineText, startLineno, startCharno,\n                  endLineno, endCharno);\n            }\n\n            return new ExtractionInfo(multilineText, token);\n          }\n\n          builder.append(toString(token));\n\n          line = getRemainingJSDocLine();\n\n          if (option != WhitespaceOption.PRESERVE) {\n            line = trimEnd(line);\n          }\n\n          builder.append(line);\n          token = next();\n      }",
      "info" : "SwitchStatement[50575-52935]:SwitchStatement[50575-52935]"
    }, {
      "left" : "case STAR:",
      "right" : "case STAR:",
      "info" : "SwitchCase[50600-50610]:SwitchCase[50600-50610]"
    }, {
      "left" : "if (ignoreStar)",
      "right" : "if (ignoreStar)",
      "info" : "IfStatement[50621-50970]:IfStatement[50621-50970]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50637-50780]:Block[50637-50780]"
    }, {
      "left" : "lineStartChar = stream.getCharno() + 1;",
      "right" : "lineStartChar = stream.getCharno() + 1;",
      "info" : "ExpressionStatement[50729-50768]:ExpressionStatement[50729-50768]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50786-50970]:Block[50786-50970]"
    }, {
      "left" : "if (builder.length() > 0)",
      "right" : "if (builder.length() > 0)",
      "info" : "IfStatement[50848-50924]:IfStatement[50848-50924]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50874-50924]:Block[50874-50924]"
    }, {
      "left" : "builder.append(' ');",
      "right" : "builder.append(' ');",
      "info" : "ExpressionStatement[50890-50910]:ExpressionStatement[50890-50910]"
    }, {
      "left" : "builder.append('*');",
      "right" : "builder.append('*');",
      "info" : "ExpressionStatement[50938-50958]:ExpressionStatement[50938-50958]"
    }, {
      "left" : "token = next();",
      "right" : "token = next();",
      "info" : "ExpressionStatement[50982-50997]:ExpressionStatement[50982-50997]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[51008-51017]:ContinueStatement[51008-51017]"
    }, {
      "left" : "case EOL:",
      "right" : "case EOL:",
      "info" : "SwitchCase[51027-51036]:SwitchCase[51027-51036]"
    }, {
      "left" : "if (option != WhitespaceOption.SINGLE_LINE)",
      "right" : "if (option != WhitespaceOption.SINGLE_LINE)",
      "info" : "IfStatement[51047-51138]:IfStatement[51047-51138]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51091-51138]:Block[51091-51138]"
    }, {
      "left" : "builder.append(\"\\n\");",
      "right" : "builder.append(\"\\n\");",
      "info" : "ExpressionStatement[51105-51126]:ExpressionStatement[51105-51126]"
    }, {
      "left" : "ignoreStar = true;",
      "right" : "ignoreStar = true;",
      "info" : "ExpressionStatement[51150-51168]:ExpressionStatement[51150-51168]"
    }, {
      "left" : "lineStartChar = 0;",
      "right" : "lineStartChar = 0;",
      "info" : "ExpressionStatement[51179-51197]:ExpressionStatement[51179-51197]"
    }, {
      "left" : "token = next();",
      "right" : "token = next();",
      "info" : "ExpressionStatement[51208-51223]:ExpressionStatement[51208-51223]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[51234-51243]:ContinueStatement[51234-51243]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[51253-51261]:SwitchCase[51253-51261]"
    }, {
      "left" : "ignoreStar = false;",
      "right" : "ignoreStar = false;",
      "info" : "ExpressionStatement[51272-51291]:ExpressionStatement[51272-51291]"
    }, {
      "left" : "state = State.SEARCHING_ANNOTATION;",
      "right" : "state = State.SEARCHING_ANNOTATION;",
      "info" : "ExpressionStatement[51302-51337]:ExpressionStatement[51302-51337]"
    }, {
      "left" : "boolean isEOC = token == JsDocToken.EOC;",
      "right" : "boolean isEOC = token == JsDocToken.EOC;",
      "info" : "VariableDeclarationStatement[51349-51389]:VariableDeclarationStatement[51349-51389]"
    }, {
      "left" : "if (!isEOC)",
      "right" : "if (!isEOC)",
      "info" : "IfStatement[51400-51862]:IfStatement[51400-51862]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51412-51862]:Block[51412-51862]"
    }, {
      "left" : "if (lineStartChar != -1 && option == WhitespaceOption.PRESERVE)",
      "right" : "if (lineStartChar != -1 && option == WhitespaceOption.PRESERVE)",
      "info" : "IfStatement[51426-51850]:IfStatement[51426-51850]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51490-51710]:Block[51490-51710]"
    }, {
      "left" : "int numSpaces = stream.getCharno() - lineStartChar;",
      "right" : "int numSpaces = stream.getCharno() - lineStartChar;",
      "info" : "VariableDeclarationStatement[51506-51557]:VariableDeclarationStatement[51506-51557]"
    }, {
      "left" : "for (int i = 0; i < numSpaces; i++)",
      "right" : "for (int i = 0; i < numSpaces; i++)",
      "info" : "ForStatement[51572-51662]:ForStatement[51572-51662]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51608-51662]:Block[51608-51662]"
    }, {
      "left" : "builder.append(' ');",
      "right" : "builder.append(' ');",
      "info" : "ExpressionStatement[51626-51646]:ExpressionStatement[51626-51646]"
    }, {
      "left" : "lineStartChar = -1;",
      "right" : "lineStartChar = -1;",
      "info" : "ExpressionStatement[51677-51696]:ExpressionStatement[51677-51696]"
    }, {
      "left" : "if (builder.length() > 0)",
      "right" : "if (builder.length() > 0)",
      "info" : "IfStatement[51716-51850]:IfStatement[51716-51850]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51742-51850]:Block[51742-51850]"
    }, {
      "left" : "builder.append(' ');",
      "right" : "builder.append(' ');",
      "info" : "ExpressionStatement[51816-51836]:ExpressionStatement[51816-51836]"
    }, {
      "left" : "if (token == JsDocToken.EOC ||\n              token == JsDocToken.EOF ||\n              // When we're capturing a license block, annotations\n              // in the block are OK.\n              (token == JsDocToken.ANNOTATION &&\n               option != WhitespaceOption.PRESERVE))",
      "right" : "if (token == JsDocToken.EOC ||\n              token == JsDocToken.EOF ||\n              // When we're capturing a license block, annotations\n              // in the block are OK.\n              (token == JsDocToken.ANNOTATION &&\n               option != WhitespaceOption.PRESERVE))",
      "info" : "IfStatement[51874-52681]:IfStatement[51874-52681]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52153-52681]:Block[52153-52681]"
    }, {
      "left" : "String multilineText = builder.toString();",
      "right" : "String multilineText = builder.toString();",
      "info" : "VariableDeclarationStatement[52167-52209]:VariableDeclarationStatement[52167-52209]"
    }, {
      "left" : "if (option != WhitespaceOption.PRESERVE)",
      "right" : "if (option != WhitespaceOption.PRESERVE)",
      "info" : "IfStatement[52223-52331]:IfStatement[52223-52331]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52264-52331]:Block[52264-52331]"
    }, {
      "left" : "multilineText = multilineText.trim();",
      "right" : "multilineText = multilineText.trim();",
      "info" : "ExpressionStatement[52280-52317]:ExpressionStatement[52280-52317]"
    }, {
      "left" : "int endLineno = stream.getLineno();",
      "right" : "int endLineno = stream.getLineno();",
      "info" : "VariableDeclarationStatement[52345-52380]:VariableDeclarationStatement[52345-52380]"
    }, {
      "left" : "int endCharno = stream.getCharno();",
      "right" : "int endCharno = stream.getCharno();",
      "info" : "VariableDeclarationStatement[52393-52428]:VariableDeclarationStatement[52393-52428]"
    }, {
      "left" : "if (multilineText.length() > 0)",
      "right" : "if (multilineText.length() > 0)",
      "info" : "IfStatement[52442-52607]:IfStatement[52442-52607]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52474-52607]:Block[52474-52607]"
    }, {
      "left" : "jsdocBuilder.markText(multilineText, startLineno, startCharno,\n                  endLineno, endCharno);",
      "right" : "jsdocBuilder.markText(multilineText, startLineno, startCharno,\n                  endLineno, endCharno);",
      "info" : "ExpressionStatement[52490-52593]:ExpressionStatement[52490-52593]"
    }, {
      "left" : "return new ExtractionInfo(multilineText, token);",
      "right" : "return new ExtractionInfo(multilineText, token);",
      "info" : "ReturnStatement[52621-52669]:ReturnStatement[52621-52669]"
    }, {
      "left" : "builder.append(toString(token));",
      "right" : "builder.append(toString(token));",
      "info" : "ExpressionStatement[52693-52725]:ExpressionStatement[52693-52725]"
    }, {
      "left" : "line = getRemainingJSDocLine();",
      "right" : "line = getRemainingJSDocLine();",
      "info" : "ExpressionStatement[52737-52768]:ExpressionStatement[52737-52768]"
    }, {
      "left" : "if (option != WhitespaceOption.PRESERVE)",
      "right" : "if (option != WhitespaceOption.PRESERVE)",
      "info" : "IfStatement[52780-52868]:IfStatement[52780-52868]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52821-52868]:Block[52821-52868]"
    }, {
      "left" : "line = trimEnd(line);",
      "right" : "line = trimEnd(line);",
      "info" : "ExpressionStatement[52835-52856]:ExpressionStatement[52835-52856]"
    }, {
      "left" : "builder.append(line);",
      "right" : "builder.append(line);",
      "info" : "ExpressionStatement[52880-52901]:ExpressionStatement[52880-52901]"
    }, {
      "left" : "token = next();",
      "right" : "token = next();",
      "info" : "ExpressionStatement[52912-52927]:ExpressionStatement[52912-52927]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53487-54454]:Block[53487-54454]"
    }, {
      "left" : "StringBuilder builder = new StringBuilder();",
      "right" : "StringBuilder builder = new StringBuilder();",
      "info" : "VariableDeclarationStatement[53493-53537]:VariableDeclarationStatement[53493-53537]"
    }, {
      "left" : "boolean ignoreStar = true;",
      "right" : "boolean ignoreStar = true;",
      "info" : "VariableDeclarationStatement[53543-53569]:VariableDeclarationStatement[53543-53569]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[53575-54450]:DoStatement[53575-54450]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53578-54436]:Block[53578-54436]"
    }, {
      "left" : "switch (token) {\n        case ANNOTATION:\n        case EOC:\n        case EOF:\n          return new ExtractionInfo(builder.toString().trim(), token);\n\n        case STAR:\n          if (!ignoreStar) {\n            if (builder.length() > 0) {\n              builder.append(' ');\n            }\n\n            builder.append('*');\n          }\n\n          token = next();\n          continue;\n\n        case EOL:\n          ignoreStar = true;\n          builder.append('\\n');\n          token = next();\n          continue;\n\n        default:\n          if (!ignoreStar && builder.length() > 0) {\n            builder.append(' ');\n          }\n\n          ignoreStar = false;\n\n          builder.append(toString(token));\n\n          String line = getRemainingJSDocLine();\n          line = trimEnd(line);\n          builder.append(line);\n          token = next();\n      }",
      "right" : "switch (token) {\n        case ANNOTATION:\n        case EOC:\n        case EOF:\n          return new ExtractionInfo(builder.toString().trim(), token);\n\n        case STAR:\n          if (!ignoreStar) {\n            if (builder.length() > 0) {\n              builder.append(' ');\n            }\n\n            builder.append('*');\n          }\n\n          token = next();\n          continue;\n\n        case EOL:\n          ignoreStar = true;\n          builder.append('\\n');\n          token = next();\n          continue;\n\n        default:\n          if (!ignoreStar && builder.length() > 0) {\n            builder.append(' ');\n          }\n\n          ignoreStar = false;\n\n          builder.append(toString(token));\n\n          String line = getRemainingJSDocLine();\n          line = trimEnd(line);\n          builder.append(line);\n          token = next();\n      }",
      "info" : "SwitchStatement[53586-54430]:SwitchStatement[53586-54430]"
    }, {
      "left" : "case ANNOTATION:",
      "right" : "case ANNOTATION:",
      "info" : "SwitchCase[53611-53627]:SwitchCase[53611-53627]"
    }, {
      "left" : "case EOC:",
      "right" : "case EOC:",
      "info" : "SwitchCase[53636-53645]:SwitchCase[53636-53645]"
    }, {
      "left" : "case EOF:",
      "right" : "case EOF:",
      "info" : "SwitchCase[53654-53663]:SwitchCase[53654-53663]"
    }, {
      "left" : "return new ExtractionInfo(builder.toString().trim(), token);",
      "right" : "return new ExtractionInfo(builder.toString().trim(), token);",
      "info" : "ReturnStatement[53674-53734]:ReturnStatement[53674-53734]"
    }, {
      "left" : "case STAR:",
      "right" : "case STAR:",
      "info" : "SwitchCase[53744-53754]:SwitchCase[53744-53754]"
    }, {
      "left" : "if (!ignoreStar)",
      "right" : "if (!ignoreStar)",
      "info" : "IfStatement[53765-53918]:IfStatement[53765-53918]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53782-53918]:Block[53782-53918]"
    }, {
      "left" : "if (builder.length() > 0)",
      "right" : "if (builder.length() > 0)",
      "info" : "IfStatement[53796-53872]:IfStatement[53796-53872]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53822-53872]:Block[53822-53872]"
    }, {
      "left" : "builder.append(' ');",
      "right" : "builder.append(' ');",
      "info" : "ExpressionStatement[53838-53858]:ExpressionStatement[53838-53858]"
    }, {
      "left" : "builder.append('*');",
      "right" : "builder.append('*');",
      "info" : "ExpressionStatement[53886-53906]:ExpressionStatement[53886-53906]"
    }, {
      "left" : "token = next();",
      "right" : "token = next();",
      "info" : "ExpressionStatement[53930-53945]:ExpressionStatement[53930-53945]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[53956-53965]:ContinueStatement[53956-53965]"
    }, {
      "left" : "case EOL:",
      "right" : "case EOL:",
      "info" : "SwitchCase[53975-53984]:SwitchCase[53975-53984]"
    }, {
      "left" : "ignoreStar = true;",
      "right" : "ignoreStar = true;",
      "info" : "ExpressionStatement[53995-54013]:ExpressionStatement[53995-54013]"
    }, {
      "left" : "builder.append('\\n');",
      "right" : "builder.append('\\n');",
      "info" : "ExpressionStatement[54024-54045]:ExpressionStatement[54024-54045]"
    }, {
      "left" : "token = next();",
      "right" : "token = next();",
      "info" : "ExpressionStatement[54056-54071]:ExpressionStatement[54056-54071]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[54082-54091]:ContinueStatement[54082-54091]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[54101-54109]:SwitchCase[54101-54109]"
    }, {
      "left" : "if (!ignoreStar && builder.length() > 0)",
      "right" : "if (!ignoreStar && builder.length() > 0)",
      "info" : "IfStatement[54120-54207]:IfStatement[54120-54207]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54161-54207]:Block[54161-54207]"
    }, {
      "left" : "builder.append(' ');",
      "right" : "builder.append(' ');",
      "info" : "ExpressionStatement[54175-54195]:ExpressionStatement[54175-54195]"
    }, {
      "left" : "ignoreStar = false;",
      "right" : "ignoreStar = false;",
      "info" : "ExpressionStatement[54219-54238]:ExpressionStatement[54219-54238]"
    }, {
      "left" : "builder.append(toString(token));",
      "right" : "builder.append(toString(token));",
      "info" : "ExpressionStatement[54250-54282]:ExpressionStatement[54250-54282]"
    }, {
      "left" : "String line = getRemainingJSDocLine();",
      "right" : "String line = getRemainingJSDocLine();",
      "info" : "VariableDeclarationStatement[54294-54332]:VariableDeclarationStatement[54294-54332]"
    }, {
      "left" : "line = trimEnd(line);",
      "right" : "line = trimEnd(line);",
      "info" : "ExpressionStatement[54343-54364]:ExpressionStatement[54343-54364]"
    }, {
      "left" : "builder.append(line);",
      "right" : "builder.append(line);",
      "info" : "ExpressionStatement[54375-54396]:ExpressionStatement[54375-54396]"
    }, {
      "left" : "token = next();",
      "right" : "token = next();",
      "info" : "ExpressionStatement[54407-54422]:ExpressionStatement[54407-54422]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54896-55220]:Block[54896-55220]"
    }, {
      "left" : "int trimCount = 0;",
      "right" : "int trimCount = 0;",
      "info" : "VariableDeclarationStatement[54902-54920]:VariableDeclarationStatement[54902-54920]"
    }, {
      "left" : "while (trimCount < s.length())",
      "right" : "while (trimCount < s.length())",
      "info" : "WhileStatement[54925-55116]:WhileStatement[54925-55116]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54956-55116]:Block[54956-55116]"
    }, {
      "left" : "char ch = s.charAt(s.length() - trimCount - 1);",
      "right" : "char ch = s.charAt(s.length() - trimCount - 1);",
      "info" : "VariableDeclarationStatement[54964-55011]:VariableDeclarationStatement[54964-55011]"
    }, {
      "left" : "if (Character.isWhitespace(ch))",
      "right" : "if (Character.isWhitespace(ch))",
      "info" : "IfStatement[55018-55110]:IfStatement[55018-55110]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55050-55080]:Block[55050-55080]"
    }, {
      "left" : "trimCount++;",
      "right" : "trimCount++;",
      "info" : "ExpressionStatement[55060-55072]:ExpressionStatement[55060-55072]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55086-55110]:Block[55086-55110]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[55096-55102]:BreakStatement[55096-55102]"
    }, {
      "left" : "if (trimCount == 0)",
      "right" : "if (trimCount == 0)",
      "info" : "IfStatement[55122-55165]:IfStatement[55122-55165]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55142-55165]:Block[55142-55165]"
    }, {
      "left" : "return s;",
      "right" : "return s;",
      "info" : "ReturnStatement[55150-55159]:ReturnStatement[55150-55159]"
    }, {
      "left" : "return s.substring(0, s.length() - trimCount);",
      "right" : "return s.substring(0, s.length() - trimCount);",
      "info" : "ReturnStatement[55170-55216]:ReturnStatement[55170-55216]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55803-56202]:Block[55803-56202]"
    }, {
      "left" : "if (token == JsDocToken.LC)",
      "right" : "if (token == JsDocToken.LC)",
      "info" : "IfStatement[55809-56198]:IfStatement[55809-56198]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55837-56144]:Block[55837-56144]"
    }, {
      "left" : "skipEOLs();",
      "right" : "skipEOLs();",
      "info" : "ExpressionStatement[55845-55856]:ExpressionStatement[55845-55856]"
    }, {
      "left" : "Node typeNode = parseTopLevelTypeExpression(next());",
      "right" : "Node typeNode = parseTopLevelTypeExpression(next());",
      "info" : "VariableDeclarationStatement[55863-55915]:VariableDeclarationStatement[55863-55915]"
    }, {
      "left" : "if (typeNode != null)",
      "right" : "if (typeNode != null)",
      "info" : "IfStatement[55922-56114]:IfStatement[55922-56114]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55944-56114]:Block[55944-56114]"
    }, {
      "left" : "skipEOLs();",
      "right" : "skipEOLs();",
      "info" : "ExpressionStatement[55954-55965]:ExpressionStatement[55954-55965]"
    }, {
      "left" : "if (!match(JsDocToken.RC))",
      "right" : "if (!match(JsDocToken.RC))",
      "info" : "IfStatement[55974-56106]:IfStatement[55974-56106]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56001-56071]:Block[56001-56071]"
    }, {
      "left" : "reportTypeSyntaxWarning(\"msg.jsdoc.missing.rc\");",
      "right" : "reportTypeSyntaxWarning(\"msg.jsdoc.missing.rc\");",
      "info" : "ExpressionStatement[56013-56061]:ExpressionStatement[56013-56061]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56077-56106]:Block[56077-56106]"
    }, {
      "left" : "next();",
      "right" : "next();",
      "info" : "ExpressionStatement[56089-56096]:ExpressionStatement[56089-56096]"
    }, {
      "left" : "return typeNode;",
      "right" : "return typeNode;",
      "info" : "ReturnStatement[56122-56138]:ReturnStatement[56122-56138]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56150-56198]:Block[56150-56198]"
    }, {
      "left" : "return parseTypeExpression(token);",
      "right" : "return parseTypeExpression(token);",
      "info" : "ReturnStatement[56158-56192]:ReturnStatement[56158-56192]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56522-57381]:Block[56522-57381]"
    }, {
      "left" : "Preconditions.checkArgument(token == JsDocToken.LC);",
      "right" : "Preconditions.checkArgument(token == JsDocToken.LC);",
      "info" : "ExpressionStatement[56528-56580]:ExpressionStatement[56528-56580]"
    }, {
      "left" : "skipEOLs();",
      "right" : "skipEOLs();",
      "info" : "ExpressionStatement[56586-56597]:ExpressionStatement[56586-56597]"
    }, {
      "left" : "boolean restArg = false;",
      "right" : "boolean restArg = false;",
      "info" : "VariableDeclarationStatement[56603-56627]:VariableDeclarationStatement[56603-56627]"
    }, {
      "left" : "token = next();",
      "right" : "token = next();",
      "info" : "ExpressionStatement[56632-56647]:ExpressionStatement[56632-56647]"
    }, {
      "left" : "if (token == JsDocToken.ELLIPSIS)",
      "right" : "if (token == JsDocToken.ELLIPSIS)",
      "info" : "IfStatement[56652-56896]:IfStatement[56652-56896]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56686-56896]:Block[56686-56896]"
    }, {
      "left" : "token = next();",
      "right" : "token = next();",
      "info" : "ExpressionStatement[56694-56709]:ExpressionStatement[56694-56709]"
    }, {
      "left" : "if (token == JsDocToken.RC)",
      "right" : "if (token == JsDocToken.RC)",
      "info" : "IfStatement[56716-56868]:IfStatement[56716-56868]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56744-56868]:Block[56744-56868]"
    }, {
      "left" : "return wrapNode(Token.ELLIPSIS, IR.empty());",
      "right" : "return wrapNode(Token.ELLIPSIS, IR.empty());",
      "info" : "ReturnStatement[56816-56860]:ReturnStatement[56816-56860]"
    }, {
      "left" : "restArg = true;",
      "right" : "restArg = true;",
      "info" : "ExpressionStatement[56875-56890]:ExpressionStatement[56875-56890]"
    }, {
      "left" : "Node typeNode = parseTopLevelTypeExpression(token);",
      "right" : "Node typeNode = parseTopLevelTypeExpression(token);",
      "info" : "VariableDeclarationStatement[56902-56953]:VariableDeclarationStatement[56902-56953]"
    }, {
      "left" : "if (typeNode != null)",
      "right" : "if (typeNode != null)",
      "info" : "IfStatement[56958-57355]:IfStatement[56958-57355]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56980-57355]:Block[56980-57355]"
    }, {
      "left" : "skipEOLs();",
      "right" : "skipEOLs();",
      "info" : "ExpressionStatement[56988-56999]:ExpressionStatement[56988-56999]"
    }, {
      "left" : "if (restArg)",
      "right" : "if (restArg)",
      "info" : "IfStatement[57006-57217]:IfStatement[57006-57217]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57019-57083]:Block[57019-57083]"
    }, {
      "left" : "typeNode = wrapNode(Token.ELLIPSIS, typeNode);",
      "right" : "typeNode = wrapNode(Token.ELLIPSIS, typeNode);",
      "info" : "ExpressionStatement[57029-57075]:ExpressionStatement[57029-57075]"
    }, {
      "left" : "if (match(JsDocToken.EQUALS))",
      "right" : "if (match(JsDocToken.EQUALS))",
      "info" : "IfStatement[57089-57217]:IfStatement[57089-57217]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57119-57217]:Block[57119-57217]"
    }, {
      "left" : "next();",
      "right" : "next();",
      "info" : "ExpressionStatement[57129-57136]:ExpressionStatement[57129-57136]"
    }, {
      "left" : "skipEOLs();",
      "right" : "skipEOLs();",
      "info" : "ExpressionStatement[57145-57156]:ExpressionStatement[57145-57156]"
    }, {
      "left" : "typeNode = wrapNode(Token.EQUALS, typeNode);",
      "right" : "typeNode = wrapNode(Token.EQUALS, typeNode);",
      "info" : "ExpressionStatement[57165-57209]:ExpressionStatement[57165-57209]"
    }, {
      "left" : "if (!match(JsDocToken.RC))",
      "right" : "if (!match(JsDocToken.RC))",
      "info" : "IfStatement[57225-57349]:IfStatement[57225-57349]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57252-57318]:Block[57252-57318]"
    }, {
      "left" : "reportTypeSyntaxWarning(\"msg.jsdoc.missing.rc\");",
      "right" : "reportTypeSyntaxWarning(\"msg.jsdoc.missing.rc\");",
      "info" : "ExpressionStatement[57262-57310]:ExpressionStatement[57262-57310]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57324-57349]:Block[57324-57349]"
    }, {
      "left" : "next();",
      "right" : "next();",
      "info" : "ExpressionStatement[57334-57341]:ExpressionStatement[57334-57341]"
    }, {
      "left" : "return typeNode;",
      "right" : "return typeNode;",
      "info" : "ReturnStatement[57361-57377]:ReturnStatement[57361-57377]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57507-57886]:Block[57507-57886]"
    }, {
      "left" : "if (token == JsDocToken.LC)",
      "right" : "if (token == JsDocToken.LC)",
      "info" : "IfStatement[57513-57882]:IfStatement[57513-57882]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57541-57834]:Block[57541-57834]"
    }, {
      "left" : "skipEOLs();",
      "right" : "skipEOLs();",
      "info" : "ExpressionStatement[57549-57560]:ExpressionStatement[57549-57560]"
    }, {
      "left" : "Node typeNode = parseTypeName(next());",
      "right" : "Node typeNode = parseTypeName(next());",
      "info" : "VariableDeclarationStatement[57567-57605]:VariableDeclarationStatement[57567-57605]"
    }, {
      "left" : "if (typeNode != null)",
      "right" : "if (typeNode != null)",
      "info" : "IfStatement[57612-57804]:IfStatement[57612-57804]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57634-57804]:Block[57634-57804]"
    }, {
      "left" : "skipEOLs();",
      "right" : "skipEOLs();",
      "info" : "ExpressionStatement[57644-57655]:ExpressionStatement[57644-57655]"
    }, {
      "left" : "if (!match(JsDocToken.RC))",
      "right" : "if (!match(JsDocToken.RC))",
      "info" : "IfStatement[57664-57796]:IfStatement[57664-57796]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57691-57761]:Block[57691-57761]"
    }, {
      "left" : "reportTypeSyntaxWarning(\"msg.jsdoc.missing.rc\");",
      "right" : "reportTypeSyntaxWarning(\"msg.jsdoc.missing.rc\");",
      "info" : "ExpressionStatement[57703-57751]:ExpressionStatement[57703-57751]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57767-57796]:Block[57767-57796]"
    }, {
      "left" : "next();",
      "right" : "next();",
      "info" : "ExpressionStatement[57779-57786]:ExpressionStatement[57779-57786]"
    }, {
      "left" : "return typeNode;",
      "right" : "return typeNode;",
      "info" : "ReturnStatement[57812-57828]:ReturnStatement[57812-57828]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57840-57882]:Block[57840-57882]"
    }, {
      "left" : "return parseTypeName(token);",
      "right" : "return parseTypeName(token);",
      "info" : "ReturnStatement[57848-57876]:ReturnStatement[57848-57876]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58105-58548]:Block[58105-58548]"
    }, {
      "left" : "Node typeExpr = parseTypeExpression(token);",
      "right" : "Node typeExpr = parseTypeExpression(token);",
      "info" : "VariableDeclarationStatement[58111-58154]:VariableDeclarationStatement[58111-58154]"
    }, {
      "left" : "if (typeExpr != null)",
      "right" : "if (typeExpr != null)",
      "info" : "IfStatement[58159-58523]:IfStatement[58159-58523]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58181-58523]:Block[58181-58523]"
    }, {
      "left" : "if (match(JsDocToken.PIPE))",
      "right" : "if (match(JsDocToken.PIPE))",
      "info" : "IfStatement[58227-58517]:IfStatement[58227-58517]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58255-58517]:Block[58255-58517]"
    }, {
      "left" : "next();",
      "right" : "next();",
      "info" : "ExpressionStatement[58265-58272]:ExpressionStatement[58265-58272]"
    }, {
      "left" : "if (match(JsDocToken.PIPE))",
      "right" : "if (match(JsDocToken.PIPE))",
      "info" : "IfStatement[58281-58404]:IfStatement[58281-58404]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58309-58404]:Block[58309-58404]"
    }, {
      "left" : "next();",
      "right" : "next();",
      "info" : "ExpressionStatement[58387-58394]:ExpressionStatement[58387-58394]"
    }, {
      "left" : "skipEOLs();",
      "right" : "skipEOLs();",
      "info" : "ExpressionStatement[58413-58424]:ExpressionStatement[58413-58424]"
    }, {
      "left" : "token = next();",
      "right" : "token = next();",
      "info" : "ExpressionStatement[58433-58448]:ExpressionStatement[58433-58448]"
    }, {
      "left" : "return parseUnionTypeWithAlternate(token, typeExpr);",
      "right" : "return parseUnionTypeWithAlternate(token, typeExpr);",
      "info" : "ReturnStatement[58457-58509]:ReturnStatement[58457-58509]"
    }, {
      "left" : "return typeExpr;",
      "right" : "return typeExpr;",
      "info" : "ReturnStatement[58528-58544]:ReturnStatement[58528-58544]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58726-59162]:Block[58726-59162]"
    }, {
      "left" : "Node typeExpr = parseTopLevelTypeExpression(token);",
      "right" : "Node typeExpr = parseTopLevelTypeExpression(token);",
      "info" : "VariableDeclarationStatement[58732-58783]:VariableDeclarationStatement[58732-58783]"
    }, {
      "left" : "if (typeExpr == null)",
      "right" : "if (typeExpr == null)",
      "info" : "IfStatement[58788-58836]:IfStatement[58788-58836]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58810-58836]:Block[58810-58836]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[58818-58830]:ReturnStatement[58818-58830]"
    }, {
      "left" : "Node typeList = IR.block();",
      "right" : "Node typeList = IR.block();",
      "info" : "VariableDeclarationStatement[58841-58868]:VariableDeclarationStatement[58841-58868]"
    }, {
      "left" : "typeList.addChildToBack(typeExpr);",
      "right" : "typeList.addChildToBack(typeExpr);",
      "info" : "ExpressionStatement[58873-58907]:ExpressionStatement[58873-58907]"
    }, {
      "left" : "while (match(JsDocToken.COMMA))",
      "right" : "while (match(JsDocToken.COMMA))",
      "info" : "WhileStatement[58912-59137]:WhileStatement[58912-59137]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58944-59137]:Block[58944-59137]"
    }, {
      "left" : "next();",
      "right" : "next();",
      "info" : "ExpressionStatement[58952-58959]:ExpressionStatement[58952-58959]"
    }, {
      "left" : "skipEOLs();",
      "right" : "skipEOLs();",
      "info" : "ExpressionStatement[58966-58977]:ExpressionStatement[58966-58977]"
    }, {
      "left" : "typeExpr = parseTopLevelTypeExpression(next());",
      "right" : "typeExpr = parseTopLevelTypeExpression(next());",
      "info" : "ExpressionStatement[58984-59031]:ExpressionStatement[58984-59031]"
    }, {
      "left" : "if (typeExpr == null)",
      "right" : "if (typeExpr == null)",
      "info" : "IfStatement[59038-59090]:IfStatement[59038-59090]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59060-59090]:Block[59060-59090]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[59070-59082]:ReturnStatement[59070-59082]"
    }, {
      "left" : "typeList.addChildToBack(typeExpr);",
      "right" : "typeList.addChildToBack(typeExpr);",
      "info" : "ExpressionStatement[59097-59131]:ExpressionStatement[59097-59131]"
    }, {
      "left" : "return typeList;",
      "right" : "return typeList;",
      "info" : "ReturnStatement[59142-59158]:ReturnStatement[59142-59158]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59427-61056]:Block[59427-61056]"
    }, {
      "left" : "if (token == JsDocToken.QMARK)",
      "right" : "if (token == JsDocToken.QMARK)",
      "info" : "IfStatement[59433-61052]:IfStatement[59433-61052]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59464-60556]:Block[59464-60556]"
    }, {
      "left" : "token = next();",
      "right" : "token = next();",
      "info" : "ExpressionStatement[60089-60104]:ExpressionStatement[60089-60104]"
    }, {
      "left" : "if (token == JsDocToken.COMMA ||\n          token == JsDocToken.EQUALS ||\n          token == JsDocToken.RB ||\n          token == JsDocToken.RC ||\n          token == JsDocToken.RP ||\n          token == JsDocToken.PIPE ||\n          token == JsDocToken.GT ||\n          token == JsDocToken.EOC)",
      "right" : "if (token == JsDocToken.COMMA ||\n          token == JsDocToken.EQUALS ||\n          token == JsDocToken.RB ||\n          token == JsDocToken.RC ||\n          token == JsDocToken.RP ||\n          token == JsDocToken.PIPE ||\n          token == JsDocToken.GT ||\n          token == JsDocToken.EOC)",
      "info" : "IfStatement[60111-60480]:IfStatement[60111-60480]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60401-60480]:Block[60401-60480]"
    }, {
      "left" : "restoreLookAhead(token);",
      "right" : "restoreLookAhead(token);",
      "info" : "ExpressionStatement[60411-60435]:ExpressionStatement[60411-60435]"
    }, {
      "left" : "return newNode(Token.QMARK);",
      "right" : "return newNode(Token.QMARK);",
      "info" : "ReturnStatement[60444-60472]:ReturnStatement[60444-60472]"
    }, {
      "left" : "return wrapNode(Token.QMARK, parseBasicTypeExpression(token));",
      "right" : "return wrapNode(Token.QMARK, parseBasicTypeExpression(token));",
      "info" : "ReturnStatement[60488-60550]:ReturnStatement[60488-60550]"
    }, {
      "left" : "if (token == JsDocToken.BANG)",
      "right" : "if (token == JsDocToken.BANG)",
      "info" : "IfStatement[60562-61052]:IfStatement[60562-61052]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60592-60668]:Block[60592-60668]"
    }, {
      "left" : "return wrapNode(Token.BANG, parseBasicTypeExpression(next()));",
      "right" : "return wrapNode(Token.BANG, parseBasicTypeExpression(next()));",
      "info" : "ReturnStatement[60600-60662]:ReturnStatement[60600-60662]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60674-61052]:Block[60674-61052]"
    }, {
      "left" : "Node basicTypeExpr = parseBasicTypeExpression(token);",
      "right" : "Node basicTypeExpr = parseBasicTypeExpression(token);",
      "info" : "VariableDeclarationStatement[60682-60735]:VariableDeclarationStatement[60682-60735]"
    }, {
      "left" : "if (basicTypeExpr != null)",
      "right" : "if (basicTypeExpr != null)",
      "info" : "IfStatement[60742-61017]:IfStatement[60742-61017]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60769-61017]:Block[60769-61017]"
    }, {
      "left" : "if (match(JsDocToken.QMARK))",
      "right" : "if (match(JsDocToken.QMARK))",
      "info" : "IfStatement[60779-61009]:IfStatement[60779-61009]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60808-60892]:Block[60808-60892]"
    }, {
      "left" : "next();",
      "right" : "next();",
      "info" : "ExpressionStatement[60820-60827]:ExpressionStatement[60820-60827]"
    }, {
      "left" : "return wrapNode(Token.QMARK, basicTypeExpr);",
      "right" : "return wrapNode(Token.QMARK, basicTypeExpr);",
      "info" : "ReturnStatement[60838-60882]:ReturnStatement[60838-60882]"
    }, {
      "left" : "if (match(JsDocToken.BANG))",
      "right" : "if (match(JsDocToken.BANG))",
      "info" : "IfStatement[60898-61009]:IfStatement[60898-61009]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60926-61009]:Block[60926-61009]"
    }, {
      "left" : "next();",
      "right" : "next();",
      "info" : "ExpressionStatement[60938-60945]:ExpressionStatement[60938-60945]"
    }, {
      "left" : "return wrapNode(Token.BANG, basicTypeExpr);",
      "right" : "return wrapNode(Token.BANG, basicTypeExpr);",
      "info" : "ReturnStatement[60956-60999]:ReturnStatement[60956-60999]"
    }, {
      "left" : "return basicTypeExpr;",
      "right" : "return basicTypeExpr;",
      "info" : "ReturnStatement[61025-61046]:ReturnStatement[61025-61046]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61249-61293]:Block[61249-61391]"
    }, {
      "left" : "return parseTypeName(token);",
      "right" : "return parseBasicTypeExpression(token);",
      "info" : "ReturnStatement[61261-61289]:ReturnStatement[61342-61381]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61492-62295]:Block[61590-62393]"
    }, {
      "left" : "if (token == JsDocToken.STAR)",
      "right" : "if (token == JsDocToken.STAR)",
      "info" : "IfStatement[61498-62216]:IfStatement[61596-62314]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61528-61569]:Block[61626-61667]"
    }, {
      "left" : "return newNode(Token.STAR);",
      "right" : "return newNode(Token.STAR);",
      "info" : "ReturnStatement[61536-61563]:ReturnStatement[61634-61661]"
    }, {
      "left" : "if (token == JsDocToken.LB)",
      "right" : "if (token == JsDocToken.LB)",
      "info" : "IfStatement[61575-62216]:IfStatement[61673-62314]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61603-61665]:Block[61701-61763]"
    }, {
      "left" : "skipEOLs();",
      "right" : "skipEOLs();",
      "info" : "ExpressionStatement[61611-61622]:ExpressionStatement[61709-61720]"
    }, {
      "left" : "return parseArrayType(next());",
      "right" : "return parseArrayType(next());",
      "info" : "ReturnStatement[61629-61659]:ReturnStatement[61727-61757]"
    }, {
      "left" : "if (token == JsDocToken.LC)",
      "right" : "if (token == JsDocToken.LC)",
      "info" : "IfStatement[61671-62216]:IfStatement[61769-62314]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61699-61762]:Block[61797-61860]"
    }, {
      "left" : "skipEOLs();",
      "right" : "skipEOLs();",
      "info" : "ExpressionStatement[61707-61718]:ExpressionStatement[61805-61816]"
    }, {
      "left" : "return parseRecordType(next());",
      "right" : "return parseRecordType(next());",
      "info" : "ReturnStatement[61725-61756]:ReturnStatement[61823-61854]"
    }, {
      "left" : "if (token == JsDocToken.LP)",
      "right" : "if (token == JsDocToken.LP)",
      "info" : "IfStatement[61768-62216]:IfStatement[61866-62314]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61796-61858]:Block[61894-61956]"
    }, {
      "left" : "skipEOLs();",
      "right" : "skipEOLs();",
      "info" : "ExpressionStatement[61804-61815]:ExpressionStatement[61902-61913]"
    }, {
      "left" : "return parseUnionType(next());",
      "right" : "return parseUnionType(next());",
      "info" : "ReturnStatement[61822-61852]:ReturnStatement[61920-61950]"
    }, {
      "left" : "if (token == JsDocToken.STRING)",
      "right" : "if (token == JsDocToken.STRING)",
      "info" : "IfStatement[61864-62216]:IfStatement[61962-62314]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61896-62216]:Block[61994-62314]"
    }, {
      "left" : "String string = stream.getString();",
      "right" : "String string = stream.getString();",
      "info" : "VariableDeclarationStatement[61904-61939]:VariableDeclarationStatement[62002-62037]"
    }, {
      "left" : "if (\"function\".equals(string))",
      "right" : "if (\"function\".equals(string))",
      "info" : "IfStatement[61946-62210]:IfStatement[62044-62308]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61977-62048]:Block[62075-62146]"
    }, {
      "left" : "skipEOLs();",
      "right" : "skipEOLs();",
      "info" : "ExpressionStatement[61987-61998]:ExpressionStatement[62085-62096]"
    }, {
      "left" : "return parseFunctionType(next());",
      "right" : "return parseFunctionType(next());",
      "info" : "ReturnStatement[62007-62040]:ReturnStatement[62105-62138]"
    }, {
      "left" : "if (\"null\".equals(string) || \"undefined\".equals(string))",
      "right" : "if (\"null\".equals(string) || \"undefined\".equals(string))",
      "info" : "IfStatement[62054-62210]:IfStatement[62152-62308]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62111-62158]:Block[62209-62256]"
    }, {
      "left" : "return newStringNode(string);",
      "right" : "return newStringNode(string);",
      "info" : "ReturnStatement[62121-62150]:ReturnStatement[62219-62248]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62164-62210]:Block[62262-62308]"
    }, {
      "left" : "return parseTypeName(token);",
      "right" : "return parseTypeName(token);",
      "info" : "ReturnStatement[62174-62202]:ReturnStatement[62272-62300]"
    }, {
      "left" : "restoreLookAhead(token);",
      "right" : "restoreLookAhead(token);",
      "info" : "ExpressionStatement[62222-62246]:ExpressionStatement[62320-62344]"
    }, {
      "left" : "return reportGenericTypeSyntaxWarning();",
      "right" : "return reportGenericTypeSyntaxWarning();",
      "info" : "ReturnStatement[62251-62291]:ReturnStatement[62349-62389]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62473-63365]:Block[62571-63463]"
    }, {
      "left" : "if (token != JsDocToken.STRING)",
      "right" : "if (token != JsDocToken.STRING)",
      "info" : "IfStatement[62479-62565]:IfStatement[62577-62663]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62511-62565]:Block[62609-62663]"
    }, {
      "left" : "return reportGenericTypeSyntaxWarning();",
      "right" : "return reportGenericTypeSyntaxWarning();",
      "info" : "ReturnStatement[62519-62559]:ReturnStatement[62617-62657]"
    }, {
      "left" : "String typeName = stream.getString();",
      "right" : "String typeName = stream.getString();",
      "info" : "VariableDeclarationStatement[62571-62608]:VariableDeclarationStatement[62669-62706]"
    }, {
      "left" : "int lineno = stream.getLineno();",
      "right" : "int lineno = stream.getLineno();",
      "info" : "VariableDeclarationStatement[62613-62645]:VariableDeclarationStatement[62711-62743]"
    }, {
      "left" : "int charno = stream.getCharno();",
      "right" : "int charno = stream.getCharno();",
      "info" : "VariableDeclarationStatement[62650-62682]:VariableDeclarationStatement[62748-62780]"
    }, {
      "left" : "while (match(JsDocToken.EOL) &&\n        typeName.charAt(typeName.length() - 1) == '.')",
      "right" : "while (match(JsDocToken.EOL) &&\n        typeName.charAt(typeName.length() - 1) == '.')",
      "info" : "WhileStatement[62687-62901]:WhileStatement[62785-62999]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62774-62901]:Block[62872-62999]"
    }, {
      "left" : "skipEOLs();",
      "right" : "skipEOLs();",
      "info" : "ExpressionStatement[62782-62793]:ExpressionStatement[62880-62891]"
    }, {
      "left" : "if (match(JsDocToken.STRING))",
      "right" : "if (match(JsDocToken.STRING))",
      "info" : "IfStatement[62800-62895]:IfStatement[62898-62993]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62830-62895]:Block[62928-62993]"
    }, {
      "left" : "next();",
      "right" : "next();",
      "info" : "ExpressionStatement[62840-62847]:ExpressionStatement[62938-62945]"
    }, {
      "left" : "typeName += stream.getString();",
      "right" : "typeName += stream.getString();",
      "info" : "ExpressionStatement[62856-62887]:ExpressionStatement[62954-62985]"
    }, {
      "left" : "Node typeNameNode = newStringNode(typeName, lineno, charno);",
      "right" : "Node typeNameNode = newStringNode(typeName, lineno, charno);",
      "info" : "VariableDeclarationStatement[62907-62967]:VariableDeclarationStatement[63005-63065]"
    }, {
      "left" : "if (match(JsDocToken.LT))",
      "right" : "if (match(JsDocToken.LT))",
      "info" : "IfStatement[62973-63336]:IfStatement[63071-63434]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62999-63336]:Block[63097-63434]"
    }, {
      "left" : "next();",
      "right" : "next();",
      "info" : "ExpressionStatement[63007-63014]:ExpressionStatement[63105-63112]"
    }, {
      "left" : "skipEOLs();",
      "right" : "skipEOLs();",
      "info" : "ExpressionStatement[63021-63032]:ExpressionStatement[63119-63130]"
    }, {
      "left" : "Node memberType = parseTypeExpressionList(next());",
      "right" : "Node memberType = parseTypeExpressionList(next());",
      "info" : "VariableDeclarationStatement[63039-63089]:VariableDeclarationStatement[63137-63187]"
    }, {
      "left" : "if (memberType != null)",
      "right" : "if (memberType != null)",
      "info" : "IfStatement[63096-63330]:IfStatement[63194-63428]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63120-63330]:Block[63218-63428]"
    }, {
      "left" : "typeNameNode.addChildToFront(memberType);",
      "right" : "typeNameNode.addChildToFront(memberType);",
      "info" : "ExpressionStatement[63130-63171]:ExpressionStatement[63228-63269]"
    }, {
      "left" : "skipEOLs();",
      "right" : "skipEOLs();",
      "info" : "ExpressionStatement[63181-63192]:ExpressionStatement[63279-63290]"
    }, {
      "left" : "if (!match(JsDocToken.GT))",
      "right" : "if (!match(JsDocToken.GT))",
      "info" : "IfStatement[63201-63305]:IfStatement[63299-63403]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63228-63305]:Block[63326-63403]"
    }, {
      "left" : "return reportTypeSyntaxWarning(\"msg.jsdoc.missing.gt\");",
      "right" : "return reportTypeSyntaxWarning(\"msg.jsdoc.missing.gt\");",
      "info" : "ReturnStatement[63240-63295]:ReturnStatement[63338-63393]"
    }, {
      "left" : "next();",
      "right" : "next();",
      "info" : "ExpressionStatement[63315-63322]:ExpressionStatement[63413-63420]"
    }, {
      "left" : "return typeNameNode;",
      "right" : "return typeNameNode;",
      "info" : "ReturnStatement[63341-63361]:ReturnStatement[63439-63459]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63592-65460]:Block[63690-65558]"
    }, {
      "left" : "if (token != JsDocToken.LP)",
      "right" : "if (token != JsDocToken.LP)",
      "info" : "IfStatement[63711-63839]:IfStatement[63809-63937]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63739-63839]:Block[63837-63937]"
    }, {
      "left" : "restoreLookAhead(token);",
      "right" : "restoreLookAhead(token);",
      "info" : "ExpressionStatement[63747-63771]:ExpressionStatement[63845-63869]"
    }, {
      "left" : "return reportTypeSyntaxWarning(\"msg.jsdoc.missing.lp\");",
      "right" : "return reportTypeSyntaxWarning(\"msg.jsdoc.missing.lp\");",
      "info" : "ReturnStatement[63778-63833]:ReturnStatement[63876-63931]"
    }, {
      "left" : "Node functionType = newNode(Token.FUNCTION);",
      "right" : "Node functionType = newNode(Token.FUNCTION);",
      "info" : "VariableDeclarationStatement[63845-63889]:VariableDeclarationStatement[63943-63987]"
    }, {
      "left" : "Node parameters = null;",
      "right" : "Node parameters = null;",
      "info" : "VariableDeclarationStatement[63894-63917]:VariableDeclarationStatement[63992-64015]"
    }, {
      "left" : "skipEOLs();",
      "right" : "skipEOLs();",
      "info" : "ExpressionStatement[63922-63933]:ExpressionStatement[64020-64031]"
    }, {
      "left" : "if (!match(JsDocToken.RP))",
      "right" : "if (!match(JsDocToken.RP))",
      "info" : "IfStatement[63938-65050]:IfStatement[64036-65148]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63965-65050]:Block[64063-65148]"
    }, {
      "left" : "token = next();",
      "right" : "token = next();",
      "info" : "ExpressionStatement[63973-63988]:ExpressionStatement[64071-64086]"
    }, {
      "left" : "boolean hasParams = true;",
      "right" : "boolean hasParams = true;",
      "info" : "VariableDeclarationStatement[63996-64021]:VariableDeclarationStatement[64094-64119]"
    }, {
      "left" : "if (token == JsDocToken.STRING)",
      "right" : "if (token == JsDocToken.STRING)",
      "info" : "IfStatement[64028-64896]:IfStatement[64126-64994]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64060-64896]:Block[64158-64994]"
    }, {
      "left" : "String tokenStr = stream.getString();",
      "right" : "String tokenStr = stream.getString();",
      "info" : "VariableDeclarationStatement[64070-64107]:VariableDeclarationStatement[64168-64205]"
    }, {
      "left" : "boolean isThis = \"this\".equals(tokenStr);",
      "right" : "boolean isThis = \"this\".equals(tokenStr);",
      "info" : "VariableDeclarationStatement[64116-64157]:VariableDeclarationStatement[64214-64255]"
    }, {
      "left" : "boolean isNew = \"new\".equals(tokenStr);",
      "right" : "boolean isNew = \"new\".equals(tokenStr);",
      "info" : "VariableDeclarationStatement[64166-64205]:VariableDeclarationStatement[64264-64303]"
    }, {
      "left" : "if (isThis || isNew)",
      "right" : "if (isThis || isNew)",
      "info" : "IfStatement[64214-64888]:IfStatement[64312-64986]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64235-64888]:Block[64333-64986]"
    }, {
      "left" : "if (match(JsDocToken.COLON))",
      "right" : "if (match(JsDocToken.COLON))",
      "info" : "IfStatement[64247-64702]:IfStatement[64345-64800]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64276-64612]:Block[64374-64710]"
    }, {
      "left" : "next();",
      "right" : "next();",
      "info" : "ExpressionStatement[64290-64297]:ExpressionStatement[64388-64395]"
    }, {
      "left" : "skipEOLs();",
      "right" : "skipEOLs();",
      "info" : "ExpressionStatement[64310-64321]:ExpressionStatement[64408-64419]"
    }, {
      "left" : "Node contextType = wrapNode(\n                isThis ? Token.THIS : Token.NEW,\n                parseContextTypeExpression(next()));",
      "right" : "Node contextType = wrapNode(\n                isThis ? Token.THIS : Token.NEW,\n                parseContextTypeExpression(next()));",
      "info" : "VariableDeclarationStatement[64334-64464]:VariableDeclarationStatement[64432-64562]"
    }, {
      "left" : "if (contextType == null)",
      "right" : "if (contextType == null)",
      "info" : "IfStatement[64477-64544]:IfStatement[64575-64642]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64502-64544]:Block[64600-64642]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[64518-64530]:ReturnStatement[64616-64628]"
    }, {
      "left" : "functionType.addChildToFront(contextType);",
      "right" : "functionType.addChildToFront(contextType);",
      "info" : "ExpressionStatement[64558-64600]:ExpressionStatement[64656-64698]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64618-64702]:Block[64716-64800]"
    }, {
      "left" : "return reportTypeSyntaxWarning(\"msg.jsdoc.missing.colon\");",
      "right" : "return reportTypeSyntaxWarning(\"msg.jsdoc.missing.colon\");",
      "info" : "ReturnStatement[64632-64690]:ReturnStatement[64730-64788]"
    }, {
      "left" : "if (match(JsDocToken.COMMA))",
      "right" : "if (match(JsDocToken.COMMA))",
      "info" : "IfStatement[64714-64878]:IfStatement[64812-64976]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64743-64828]:Block[64841-64926]"
    }, {
      "left" : "next();",
      "right" : "next();",
      "info" : "ExpressionStatement[64757-64764]:ExpressionStatement[64855-64862]"
    }, {
      "left" : "skipEOLs();",
      "right" : "skipEOLs();",
      "info" : "ExpressionStatement[64777-64788]:ExpressionStatement[64875-64886]"
    }, {
      "left" : "token = next();",
      "right" : "token = next();",
      "info" : "ExpressionStatement[64801-64816]:ExpressionStatement[64899-64914]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64834-64878]:Block[64932-64976]"
    }, {
      "left" : "hasParams = false;",
      "right" : "hasParams = false;",
      "info" : "ExpressionStatement[64848-64866]:ExpressionStatement[64946-64964]"
    }, {
      "left" : "if (hasParams)",
      "right" : "if (hasParams)",
      "info" : "IfStatement[64904-65044]:IfStatement[65002-65142]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64919-65044]:Block[65017-65142]"
    }, {
      "left" : "parameters = parseParametersType(token);",
      "right" : "parameters = parseParametersType(token);",
      "info" : "ExpressionStatement[64929-64969]:ExpressionStatement[65027-65067]"
    }, {
      "left" : "if (parameters == null)",
      "right" : "if (parameters == null)",
      "info" : "IfStatement[64978-65036]:IfStatement[65076-65134]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65002-65036]:Block[65100-65134]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[65014-65026]:ReturnStatement[65112-65124]"
    }, {
      "left" : "if (parameters != null)",
      "right" : "if (parameters != null)",
      "info" : "IfStatement[65056-65134]:IfStatement[65154-65232]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65080-65134]:Block[65178-65232]"
    }, {
      "left" : "functionType.addChildToBack(parameters);",
      "right" : "functionType.addChildToBack(parameters);",
      "info" : "ExpressionStatement[65088-65128]:ExpressionStatement[65186-65226]"
    }, {
      "left" : "skipEOLs();",
      "right" : "skipEOLs();",
      "info" : "ExpressionStatement[65140-65151]:ExpressionStatement[65238-65249]"
    }, {
      "left" : "if (!match(JsDocToken.RP))",
      "right" : "if (!match(JsDocToken.RP))",
      "info" : "IfStatement[65156-65252]:IfStatement[65254-65350]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65183-65252]:Block[65281-65350]"
    }, {
      "left" : "return reportTypeSyntaxWarning(\"msg.jsdoc.missing.rp\");",
      "right" : "return reportTypeSyntaxWarning(\"msg.jsdoc.missing.rp\");",
      "info" : "ReturnStatement[65191-65246]:ReturnStatement[65289-65344]"
    }, {
      "left" : "skipEOLs();",
      "right" : "skipEOLs();",
      "info" : "ExpressionStatement[65258-65269]:ExpressionStatement[65356-65367]"
    }, {
      "left" : "Node resultType = parseResultType(next());",
      "right" : "Node resultType = parseResultType(next());",
      "info" : "VariableDeclarationStatement[65274-65316]:VariableDeclarationStatement[65372-65414]"
    }, {
      "left" : "if (resultType == null)",
      "right" : "if (resultType == null)",
      "info" : "IfStatement[65321-65431]:IfStatement[65419-65529]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65345-65371]:Block[65443-65469]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[65353-65365]:ReturnStatement[65451-65463]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65377-65431]:Block[65475-65529]"
    }, {
      "left" : "functionType.addChildToBack(resultType);",
      "right" : "functionType.addChildToBack(resultType);",
      "info" : "ExpressionStatement[65385-65425]:ExpressionStatement[65483-65523]"
    }, {
      "left" : "return functionType;",
      "right" : "return functionType;",
      "info" : "ReturnStatement[65436-65456]:ReturnStatement[65534-65554]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66706-68559]:Block[66804-68657]"
    }, {
      "left" : "Node paramsType = newNode(Token.PARAM_LIST);",
      "right" : "Node paramsType = newNode(Token.PARAM_LIST);",
      "info" : "VariableDeclarationStatement[66712-66756]:VariableDeclarationStatement[66810-66854]"
    }, {
      "left" : "boolean isVarArgs = false;",
      "right" : "boolean isVarArgs = false;",
      "info" : "VariableDeclarationStatement[66761-66787]:VariableDeclarationStatement[66859-66885]"
    }, {
      "left" : "Node paramType = null;",
      "right" : "Node paramType = null;",
      "info" : "VariableDeclarationStatement[66792-66814]:VariableDeclarationStatement[66890-66912]"
    }, {
      "left" : "if (token != JsDocToken.RP)",
      "right" : "if (token != JsDocToken.RP)",
      "info" : "IfStatement[66819-68347]:IfStatement[66917-68445]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66847-68347]:Block[66945-68445]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[66855-68341]:DoStatement[66953-68439]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66858-68308]:Block[66956-68406]"
    }, {
      "left" : "if (paramType != null)",
      "right" : "if (paramType != null)",
      "info" : "IfStatement[66868-67001]:IfStatement[66966-67099]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66891-67001]:Block[66989-67099]"
    }, {
      "left" : "next();",
      "right" : "next();",
      "info" : "ExpressionStatement[66936-66943]:ExpressionStatement[67034-67041]"
    }, {
      "left" : "skipEOLs();",
      "right" : "skipEOLs();",
      "info" : "ExpressionStatement[66954-66965]:ExpressionStatement[67052-67063]"
    }, {
      "left" : "token = next();",
      "right" : "token = next();",
      "info" : "ExpressionStatement[66976-66991]:ExpressionStatement[67074-67089]"
    }, {
      "left" : "if (token == JsDocToken.ELLIPSIS)",
      "right" : "if (token == JsDocToken.ELLIPSIS)",
      "info" : "IfStatement[67011-68135]:IfStatement[67109-68233]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67045-67911]:Block[67143-68009]"
    }, {
      "left" : "skipEOLs();",
      "right" : "skipEOLs();",
      "info" : "ExpressionStatement[67277-67288]:ExpressionStatement[67375-67386]"
    }, {
      "left" : "if (match(JsDocToken.RP))",
      "right" : "if (match(JsDocToken.RP))",
      "info" : "IfStatement[67299-67872]:IfStatement[67397-67970]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67325-67387]:Block[67423-67485]"
    }, {
      "left" : "paramType = newNode(Token.ELLIPSIS);",
      "right" : "paramType = newNode(Token.ELLIPSIS);",
      "info" : "ExpressionStatement[67339-67375]:ExpressionStatement[67437-67473]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67393-67872]:Block[67491-67970]"
    }, {
      "left" : "skipEOLs();",
      "right" : "skipEOLs();",
      "info" : "ExpressionStatement[67407-67418]:ExpressionStatement[67505-67516]"
    }, {
      "left" : "if (!match(JsDocToken.LB))",
      "right" : "if (!match(JsDocToken.LB))",
      "info" : "IfStatement[67431-67543]:IfStatement[67529-67641]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67458-67543]:Block[67556-67641]"
    }, {
      "left" : "return reportTypeSyntaxWarning(\"msg.jsdoc.missing.lb\");",
      "right" : "return reportTypeSyntaxWarning(\"msg.jsdoc.missing.lb\");",
      "info" : "ReturnStatement[67474-67529]:ReturnStatement[67572-67627]"
    }, {
      "left" : "next();",
      "right" : "next();",
      "info" : "ExpressionStatement[67557-67564]:ExpressionStatement[67655-67662]"
    }, {
      "left" : "skipEOLs();",
      "right" : "skipEOLs();",
      "info" : "ExpressionStatement[67577-67588]:ExpressionStatement[67675-67686]"
    }, {
      "left" : "paramType = wrapNode(Token.ELLIPSIS, parseTypeExpression(next()));",
      "right" : "paramType = wrapNode(Token.ELLIPSIS, parseTypeExpression(next()));",
      "info" : "ExpressionStatement[67601-67667]:ExpressionStatement[67699-67765]"
    }, {
      "left" : "skipEOLs();",
      "right" : "skipEOLs();",
      "info" : "ExpressionStatement[67680-67691]:ExpressionStatement[67778-67789]"
    }, {
      "left" : "if (!match(JsDocToken.RB))",
      "right" : "if (!match(JsDocToken.RB))",
      "info" : "IfStatement[67704-67816]:IfStatement[67802-67914]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67731-67816]:Block[67829-67914]"
    }, {
      "left" : "return reportTypeSyntaxWarning(\"msg.jsdoc.missing.rb\");",
      "right" : "return reportTypeSyntaxWarning(\"msg.jsdoc.missing.rb\");",
      "info" : "ReturnStatement[67747-67802]:ReturnStatement[67845-67900]"
    }, {
      "left" : "skipEOLs();",
      "right" : "skipEOLs();",
      "info" : "ExpressionStatement[67829-67840]:ExpressionStatement[67927-67938]"
    }, {
      "left" : "next();",
      "right" : "next();",
      "info" : "ExpressionStatement[67853-67860]:ExpressionStatement[67951-67958]"
    }, {
      "left" : "isVarArgs = true;",
      "right" : "isVarArgs = true;",
      "info" : "ExpressionStatement[67884-67901]:ExpressionStatement[67982-67999]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67917-68135]:Block[68015-68233]"
    }, {
      "left" : "paramType = parseTypeExpression(token);",
      "right" : "paramType = parseTypeExpression(token);",
      "info" : "ExpressionStatement[67929-67968]:ExpressionStatement[68027-68066]"
    }, {
      "left" : "if (match(JsDocToken.EQUALS))",
      "right" : "if (match(JsDocToken.EQUALS))",
      "info" : "IfStatement[67979-68125]:IfStatement[68077-68223]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68009-68125]:Block[68107-68223]"
    }, {
      "left" : "skipEOLs();",
      "right" : "skipEOLs();",
      "info" : "ExpressionStatement[68023-68034]:ExpressionStatement[68121-68132]"
    }, {
      "left" : "next();",
      "right" : "next();",
      "info" : "ExpressionStatement[68047-68054]:ExpressionStatement[68145-68152]"
    }, {
      "left" : "paramType = wrapNode(Token.EQUALS, paramType);",
      "right" : "paramType = wrapNode(Token.EQUALS, paramType);",
      "info" : "ExpressionStatement[68067-68113]:ExpressionStatement[68165-68211]"
    }, {
      "left" : "if (paramType == null)",
      "right" : "if (paramType == null)",
      "info" : "IfStatement[68145-68202]:IfStatement[68243-68300]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68168-68202]:Block[68266-68300]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[68180-68192]:ReturnStatement[68278-68290]"
    }, {
      "left" : "paramsType.addChildToBack(paramType);",
      "right" : "paramsType.addChildToBack(paramType);",
      "info" : "ExpressionStatement[68211-68248]:ExpressionStatement[68309-68346]"
    }, {
      "left" : "if (isVarArgs)",
      "right" : "if (isVarArgs)",
      "info" : "IfStatement[68257-68300]:IfStatement[68355-68398]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68272-68300]:Block[68370-68398]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[68284-68290]:BreakStatement[68382-68388]"
    }, {
      "left" : "if (isVarArgs && match(JsDocToken.COMMA))",
      "right" : "if (isVarArgs && match(JsDocToken.COMMA))",
      "info" : "IfStatement[68353-68470]:IfStatement[68451-68568]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68395-68470]:Block[68493-68568]"
    }, {
      "left" : "return reportTypeSyntaxWarning(\"msg.jsdoc.function.varargs\");",
      "right" : "return reportTypeSyntaxWarning(\"msg.jsdoc.function.varargs\");",
      "info" : "ReturnStatement[68403-68464]:ReturnStatement[68501-68562]"
    }, {
      "left" : "return paramsType;",
      "right" : "return paramsType;",
      "info" : "ReturnStatement[68537-68555]:ReturnStatement[68635-68653]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68681-68998]:Block[68779-69096]"
    }, {
      "left" : "skipEOLs();",
      "right" : "skipEOLs();",
      "info" : "ExpressionStatement[68687-68698]:ExpressionStatement[68785-68796]"
    }, {
      "left" : "if (!match(JsDocToken.COLON))",
      "right" : "if (!match(JsDocToken.COLON))",
      "info" : "IfStatement[68703-68775]:IfStatement[68801-68873]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68733-68775]:Block[68831-68873]"
    }, {
      "left" : "return newNode(Token.EMPTY);",
      "right" : "return newNode(Token.EMPTY);",
      "info" : "ReturnStatement[68741-68769]:ReturnStatement[68839-68867]"
    }, {
      "left" : "token = next();",
      "right" : "token = next();",
      "info" : "ExpressionStatement[68781-68796]:ExpressionStatement[68879-68894]"
    }, {
      "left" : "skipEOLs();",
      "right" : "skipEOLs();",
      "info" : "ExpressionStatement[68801-68812]:ExpressionStatement[68899-68910]"
    }, {
      "left" : "if (match(JsDocToken.STRING) && \"void\".equals(stream.getString()))",
      "right" : "if (match(JsDocToken.STRING) && \"void\".equals(stream.getString()))",
      "info" : "IfStatement[68817-68994]:IfStatement[68915-69092]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68884-68939]:Block[68982-69037]"
    }, {
      "left" : "next();",
      "right" : "next();",
      "info" : "ExpressionStatement[68892-68899]:ExpressionStatement[68990-68997]"
    }, {
      "left" : "return newNode(Token.VOID);",
      "right" : "return newNode(Token.VOID);",
      "info" : "ReturnStatement[68906-68933]:ReturnStatement[69004-69031]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68945-68994]:Block[69043-69092]"
    }, {
      "left" : "return parseTypeExpression(next());",
      "right" : "return parseTypeExpression(next());",
      "info" : "ReturnStatement[68953-68988]:ReturnStatement[69051-69086]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69218-69276]:Block[69316-69374]"
    }, {
      "left" : "return parseUnionTypeWithAlternate(token, null);",
      "right" : "return parseUnionTypeWithAlternate(token, null);",
      "info" : "ReturnStatement[69224-69272]:ReturnStatement[69322-69370]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69477-70480]:Block[69575-70578]"
    }, {
      "left" : "Node union = newNode(Token.PIPE);",
      "right" : "Node union = newNode(Token.PIPE);",
      "info" : "VariableDeclarationStatement[69483-69516]:VariableDeclarationStatement[69581-69614]"
    }, {
      "left" : "if (alternate != null)",
      "right" : "if (alternate != null)",
      "info" : "IfStatement[69521-69590]:IfStatement[69619-69688]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69544-69590]:Block[69642-69688]"
    }, {
      "left" : "union.addChildToBack(alternate);",
      "right" : "union.addChildToBack(alternate);",
      "info" : "ExpressionStatement[69552-69584]:ExpressionStatement[69650-69682]"
    }, {
      "left" : "Node expr = null;",
      "right" : "Node expr = null;",
      "info" : "VariableDeclarationStatement[69596-69613]:VariableDeclarationStatement[69694-69711]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[69618-70283]:DoStatement[69716-70381]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69621-70233]:Block[69719-70331]"
    }, {
      "left" : "if (expr != null)",
      "right" : "if (expr != null)",
      "info" : "IfStatement[69629-70040]:IfStatement[69727-70138]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69647-70040]:Block[69745-70138]"
    }, {
      "left" : "skipEOLs();",
      "right" : "skipEOLs();",
      "info" : "ExpressionStatement[69657-69668]:ExpressionStatement[69755-69766]"
    }, {
      "left" : "token = next();",
      "right" : "token = next();",
      "info" : "ExpressionStatement[69677-69692]:ExpressionStatement[69775-69790]"
    }, {
      "left" : "Preconditions.checkState(\n            token == JsDocToken.PIPE || token == JsDocToken.COMMA);",
      "right" : "Preconditions.checkState(\n            token == JsDocToken.PIPE || token == JsDocToken.COMMA);",
      "info" : "ExpressionStatement[69701-69794]:ExpressionStatement[69799-69892]"
    }, {
      "left" : "boolean isPipe = token == JsDocToken.PIPE;",
      "right" : "boolean isPipe = token == JsDocToken.PIPE;",
      "info" : "VariableDeclarationStatement[69804-69846]:VariableDeclarationStatement[69902-69944]"
    }, {
      "left" : "if (isPipe && match(JsDocToken.PIPE))",
      "right" : "if (isPipe && match(JsDocToken.PIPE))",
      "info" : "IfStatement[69855-69988]:IfStatement[69953-70086]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69893-69988]:Block[69991-70086]"
    }, {
      "left" : "next();",
      "right" : "next();",
      "info" : "ExpressionStatement[69971-69978]:ExpressionStatement[70069-70076]"
    }, {
      "left" : "skipEOLs();",
      "right" : "skipEOLs();",
      "info" : "ExpressionStatement[69997-70008]:ExpressionStatement[70095-70106]"
    }, {
      "left" : "token = next();",
      "right" : "token = next();",
      "info" : "ExpressionStatement[70017-70032]:ExpressionStatement[70115-70130]"
    }, {
      "left" : "expr = parseTypeExpression(token);",
      "right" : "expr = parseTypeExpression(token);",
      "info" : "ExpressionStatement[70047-70081]:ExpressionStatement[70145-70179]"
    }, {
      "left" : "if (expr == null)",
      "right" : "if (expr == null)",
      "info" : "IfStatement[70088-70136]:IfStatement[70186-70234]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70106-70136]:Block[70204-70234]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[70116-70128]:ReturnStatement[70214-70226]"
    }, {
      "left" : "union.addChildToBack(expr);",
      "right" : "union.addChildToBack(expr);",
      "info" : "ExpressionStatement[70144-70171]:ExpressionStatement[70242-70269]"
    }, {
      "left" : "if (alternate == null)",
      "right" : "if (alternate == null)",
      "info" : "IfStatement[70289-70458]:IfStatement[70387-70556]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70312-70458]:Block[70410-70556]"
    }, {
      "left" : "skipEOLs();",
      "right" : "skipEOLs();",
      "info" : "ExpressionStatement[70320-70331]:ExpressionStatement[70418-70429]"
    }, {
      "left" : "if (!match(JsDocToken.RP))",
      "right" : "if (!match(JsDocToken.RP))",
      "info" : "IfStatement[70338-70438]:IfStatement[70436-70536]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70365-70438]:Block[70463-70536]"
    }, {
      "left" : "return reportTypeSyntaxWarning(\"msg.jsdoc.missing.rp\");",
      "right" : "return reportTypeSyntaxWarning(\"msg.jsdoc.missing.rp\");",
      "info" : "ReturnStatement[70375-70430]:ReturnStatement[70473-70528]"
    }, {
      "left" : "next();",
      "right" : "next();",
      "info" : "ExpressionStatement[70445-70452]:ExpressionStatement[70543-70550]"
    }, {
      "left" : "return union;",
      "right" : "return union;",
      "info" : "ReturnStatement[70463-70476]:ReturnStatement[70561-70574]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70702-71427]:Block[70800-71525]"
    }, {
      "left" : "Node array = newNode(Token.LB);",
      "right" : "Node array = newNode(Token.LB);",
      "info" : "VariableDeclarationStatement[70708-70739]:VariableDeclarationStatement[70806-70837]"
    }, {
      "left" : "Node arg = null;",
      "right" : "Node arg = null;",
      "info" : "VariableDeclarationStatement[70744-70760]:VariableDeclarationStatement[70842-70858]"
    }, {
      "left" : "boolean hasVarArgs = false;",
      "right" : "boolean hasVarArgs = false;",
      "info" : "VariableDeclarationStatement[70765-70792]:VariableDeclarationStatement[70863-70890]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[70798-71291]:DoStatement[70896-71389]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70801-71258]:Block[70899-71356]"
    }, {
      "left" : "if (arg != null)",
      "right" : "if (arg != null)",
      "info" : "IfStatement[70809-70895]:IfStatement[70907-70993]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70826-70895]:Block[70924-70993]"
    }, {
      "left" : "next();",
      "right" : "next();",
      "info" : "ExpressionStatement[70836-70843]:ExpressionStatement[70934-70941]"
    }, {
      "left" : "skipEOLs();",
      "right" : "skipEOLs();",
      "info" : "ExpressionStatement[70852-70863]:ExpressionStatement[70950-70961]"
    }, {
      "left" : "token = next();",
      "right" : "token = next();",
      "info" : "ExpressionStatement[70872-70887]:ExpressionStatement[70970-70985]"
    }, {
      "left" : "if (token == JsDocToken.ELLIPSIS)",
      "right" : "if (token == JsDocToken.ELLIPSIS)",
      "info" : "IfStatement[70902-71098]:IfStatement[71000-71196]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70936-71041]:Block[71034-71139]"
    }, {
      "left" : "arg = wrapNode(Token.ELLIPSIS, parseTypeExpression(next()));",
      "right" : "arg = wrapNode(Token.ELLIPSIS, parseTypeExpression(next()));",
      "info" : "ExpressionStatement[70946-71006]:ExpressionStatement[71044-71104]"
    }, {
      "left" : "hasVarArgs = true;",
      "right" : "hasVarArgs = true;",
      "info" : "ExpressionStatement[71015-71033]:ExpressionStatement[71113-71131]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71047-71098]:Block[71145-71196]"
    }, {
      "left" : "arg = parseTypeExpression(token);",
      "right" : "arg = parseTypeExpression(token);",
      "info" : "ExpressionStatement[71057-71090]:ExpressionStatement[71155-71188]"
    }, {
      "left" : "if (arg == null)",
      "right" : "if (arg == null)",
      "info" : "IfStatement[71106-71153]:IfStatement[71204-71251]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71123-71153]:Block[71221-71251]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[71133-71145]:ReturnStatement[71231-71243]"
    }, {
      "left" : "array.addChildToBack(arg);",
      "right" : "array.addChildToBack(arg);",
      "info" : "ExpressionStatement[71161-71187]:ExpressionStatement[71259-71285]"
    }, {
      "left" : "if (hasVarArgs)",
      "right" : "if (hasVarArgs)",
      "info" : "IfStatement[71194-71234]:IfStatement[71292-71332]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71210-71234]:Block[71308-71332]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[71220-71226]:BreakStatement[71318-71324]"
    }, {
      "left" : "skipEOLs();",
      "right" : "skipEOLs();",
      "info" : "ExpressionStatement[71241-71252]:ExpressionStatement[71339-71350]"
    }, {
      "left" : "if (!match(JsDocToken.RB))",
      "right" : "if (!match(JsDocToken.RB))",
      "info" : "IfStatement[71297-71393]:IfStatement[71395-71491]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71324-71393]:Block[71422-71491]"
    }, {
      "left" : "return reportTypeSyntaxWarning(\"msg.jsdoc.missing.rb\");",
      "right" : "return reportTypeSyntaxWarning(\"msg.jsdoc.missing.rb\");",
      "info" : "ReturnStatement[71332-71387]:ReturnStatement[71430-71485]"
    }, {
      "left" : "next();",
      "right" : "next();",
      "info" : "ExpressionStatement[71398-71405]:ExpressionStatement[71496-71503]"
    }, {
      "left" : "return array;",
      "right" : "return array;",
      "info" : "ReturnStatement[71410-71423]:ReturnStatement[71508-71521]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71531-71917]:Block[71629-72015]"
    }, {
      "left" : "Node recordType = newNode(Token.LC);",
      "right" : "Node recordType = newNode(Token.LC);",
      "info" : "VariableDeclarationStatement[71537-71573]:VariableDeclarationStatement[71635-71671]"
    }, {
      "left" : "Node fieldTypeList = parseFieldTypeList(token);",
      "right" : "Node fieldTypeList = parseFieldTypeList(token);",
      "info" : "VariableDeclarationStatement[71578-71625]:VariableDeclarationStatement[71676-71723]"
    }, {
      "left" : "if (fieldTypeList == null)",
      "right" : "if (fieldTypeList == null)",
      "info" : "IfStatement[71631-71712]:IfStatement[71729-71810]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71658-71712]:Block[71756-71810]"
    }, {
      "left" : "return reportGenericTypeSyntaxWarning();",
      "right" : "return reportGenericTypeSyntaxWarning();",
      "info" : "ReturnStatement[71666-71706]:ReturnStatement[71764-71804]"
    }, {
      "left" : "skipEOLs();",
      "right" : "skipEOLs();",
      "info" : "ExpressionStatement[71718-71729]:ExpressionStatement[71816-71827]"
    }, {
      "left" : "if (!match(JsDocToken.RC))",
      "right" : "if (!match(JsDocToken.RC))",
      "info" : "IfStatement[71734-71830]:IfStatement[71832-71928]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71761-71830]:Block[71859-71928]"
    }, {
      "left" : "return reportTypeSyntaxWarning(\"msg.jsdoc.missing.rc\");",
      "right" : "return reportTypeSyntaxWarning(\"msg.jsdoc.missing.rc\");",
      "info" : "ReturnStatement[71769-71824]:ReturnStatement[71867-71922]"
    }, {
      "left" : "next();",
      "right" : "next();",
      "info" : "ExpressionStatement[71836-71843]:ExpressionStatement[71934-71941]"
    }, {
      "left" : "recordType.addChildToBack(fieldTypeList);",
      "right" : "recordType.addChildToBack(fieldTypeList);",
      "info" : "ExpressionStatement[71849-71890]:ExpressionStatement[71947-71988]"
    }, {
      "left" : "return recordType;",
      "right" : "return recordType;",
      "info" : "ReturnStatement[71895-71913]:ReturnStatement[71993-72011]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72045-72521]:Block[72143-72619]"
    }, {
      "left" : "Node fieldTypeList = newNode(Token.LB);",
      "right" : "Node fieldTypeList = newNode(Token.LB);",
      "info" : "VariableDeclarationStatement[72051-72090]:VariableDeclarationStatement[72149-72188]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[72096-72490]:DoStatement[72194-72588]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72099-72476]:Block[72197-72574]"
    }, {
      "left" : "Node fieldType = parseFieldType(token);",
      "right" : "Node fieldType = parseFieldType(token);",
      "info" : "VariableDeclarationStatement[72107-72146]:VariableDeclarationStatement[72205-72244]"
    }, {
      "left" : "if (fieldType == null)",
      "right" : "if (fieldType == null)",
      "info" : "IfStatement[72154-72207]:IfStatement[72252-72305]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72177-72207]:Block[72275-72305]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[72187-72199]:ReturnStatement[72285-72297]"
    }, {
      "left" : "fieldTypeList.addChildToBack(fieldType);",
      "right" : "fieldTypeList.addChildToBack(fieldType);",
      "info" : "ExpressionStatement[72215-72255]:ExpressionStatement[72313-72353]"
    }, {
      "left" : "skipEOLs();",
      "right" : "skipEOLs();",
      "info" : "ExpressionStatement[72263-72274]:ExpressionStatement[72361-72372]"
    }, {
      "left" : "if (!match(JsDocToken.COMMA))",
      "right" : "if (!match(JsDocToken.COMMA))",
      "info" : "IfStatement[72281-72335]:IfStatement[72379-72433]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72311-72335]:Block[72409-72433]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[72321-72327]:BreakStatement[72419-72425]"
    }, {
      "left" : "next();",
      "right" : "next();",
      "info" : "ExpressionStatement[72377-72384]:ExpressionStatement[72475-72482]"
    }, {
      "left" : "skipEOLs();",
      "right" : "skipEOLs();",
      "info" : "ExpressionStatement[72437-72448]:ExpressionStatement[72535-72546]"
    }, {
      "left" : "token = next();",
      "right" : "token = next();",
      "info" : "ExpressionStatement[72455-72470]:ExpressionStatement[72553-72568]"
    }, {
      "left" : "return fieldTypeList;",
      "right" : "return fieldTypeList;",
      "info" : "ReturnStatement[72496-72517]:ReturnStatement[72594-72615]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72642-73232]:Block[72740-73330]"
    }, {
      "left" : "Node fieldName = parseFieldName(token);",
      "right" : "Node fieldName = parseFieldName(token);",
      "info" : "VariableDeclarationStatement[72648-72687]:VariableDeclarationStatement[72746-72785]"
    }, {
      "left" : "if (fieldName == null)",
      "right" : "if (fieldName == null)",
      "info" : "IfStatement[72693-72742]:IfStatement[72791-72840]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72716-72742]:Block[72814-72840]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[72724-72736]:ReturnStatement[72822-72834]"
    }, {
      "left" : "skipEOLs();",
      "right" : "skipEOLs();",
      "info" : "ExpressionStatement[72748-72759]:ExpressionStatement[72846-72857]"
    }, {
      "left" : "if (!match(JsDocToken.COLON))",
      "right" : "if (!match(JsDocToken.COLON))",
      "info" : "IfStatement[72764-72825]:IfStatement[72862-72923]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72794-72825]:Block[72892-72923]"
    }, {
      "left" : "return fieldName;",
      "right" : "return fieldName;",
      "info" : "ReturnStatement[72802-72819]:ReturnStatement[72900-72917]"
    }, {
      "left" : "next();",
      "right" : "next();",
      "info" : "ExpressionStatement[72857-72864]:ExpressionStatement[72955-72962]"
    }, {
      "left" : "skipEOLs();",
      "right" : "skipEOLs();",
      "info" : "ExpressionStatement[72949-72960]:ExpressionStatement[73047-73058]"
    }, {
      "left" : "Node typeExpression = parseTypeExpression(next());",
      "right" : "Node typeExpression = parseTypeExpression(next());",
      "info" : "VariableDeclarationStatement[72965-73015]:VariableDeclarationStatement[73063-73113]"
    }, {
      "left" : "if (typeExpression == null)",
      "right" : "if (typeExpression == null)",
      "info" : "IfStatement[73021-73075]:IfStatement[73119-73173]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73049-73075]:Block[73147-73173]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[73057-73069]:ReturnStatement[73155-73167]"
    }, {
      "left" : "Node fieldType = newNode(Token.COLON);",
      "right" : "Node fieldType = newNode(Token.COLON);",
      "info" : "VariableDeclarationStatement[73081-73119]:VariableDeclarationStatement[73179-73217]"
    }, {
      "left" : "fieldType.addChildToBack(fieldName);",
      "right" : "fieldType.addChildToBack(fieldName);",
      "info" : "ExpressionStatement[73124-73160]:ExpressionStatement[73222-73258]"
    }, {
      "left" : "fieldType.addChildToBack(typeExpression);",
      "right" : "fieldType.addChildToBack(typeExpression);",
      "info" : "ExpressionStatement[73165-73206]:ExpressionStatement[73263-73304]"
    }, {
      "left" : "return fieldType;",
      "right" : "return fieldType;",
      "info" : "ReturnStatement[73211-73228]:ReturnStatement[73309-73326]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73385-73555]:Block[73483-73653]"
    }, {
      "left" : "switch (token) {\n      case STRING:\n        String string = stream.getString();\n        return newStringNode(string);\n\n      default:\n        return null;\n    }",
      "right" : "switch (token) {\n      case STRING:\n        String string = stream.getString();\n        return newStringNode(string);\n\n      default:\n        return null;\n    }",
      "info" : "SwitchStatement[73391-73551]:SwitchStatement[73489-73649]"
    }, {
      "left" : "case STRING:",
      "right" : "case STRING:",
      "info" : "SwitchCase[73414-73426]:SwitchCase[73512-73524]"
    }, {
      "left" : "String string = stream.getString();",
      "right" : "String string = stream.getString();",
      "info" : "VariableDeclarationStatement[73435-73470]:VariableDeclarationStatement[73533-73568]"
    }, {
      "left" : "return newStringNode(string);",
      "right" : "return newStringNode(string);",
      "info" : "ReturnStatement[73479-73508]:ReturnStatement[73577-73606]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[73516-73524]:SwitchCase[73614-73622]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[73533-73545]:ReturnStatement[73631-73643]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73599-73742]:Block[73697-73840]"
    }, {
      "left" : "return n == null ? null :\n        new Node(type, n, stream.getLineno(),\n            stream.getCharno()).clonePropsFrom(templateNode);",
      "right" : "return n == null ? null :\n        new Node(type, n, stream.getLineno(),\n            stream.getCharno()).clonePropsFrom(templateNode);",
      "info" : "ReturnStatement[73605-73738]:ReturnStatement[73703-73836]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73777-73886]:Block[73875-73984]"
    }, {
      "left" : "return new Node(type, stream.getLineno(),\n        stream.getCharno()).clonePropsFrom(templateNode);",
      "right" : "return new Node(type, stream.getLineno(),\n        stream.getCharno()).clonePropsFrom(templateNode);",
      "info" : "ReturnStatement[73783-73882]:ReturnStatement[73881-73980]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73927-74001]:Block[74025-74099]"
    }, {
      "left" : "return newStringNode(s, stream.getLineno(), stream.getCharno());",
      "right" : "return newStringNode(s, stream.getLineno(), stream.getCharno());",
      "info" : "ReturnStatement[73933-73997]:ReturnStatement[74031-74095]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74066-74191]:Block[74164-74289]"
    }, {
      "left" : "Node n = Node.newString(s, lineno, charno).clonePropsFrom(templateNode);",
      "right" : "Node n = Node.newString(s, lineno, charno).clonePropsFrom(templateNode);",
      "info" : "VariableDeclarationStatement[74072-74144]:VariableDeclarationStatement[74170-74242]"
    }, {
      "left" : "n.setLength(s.length());",
      "right" : "n.setLength(s.length());",
      "info" : "ExpressionStatement[74149-74173]:ExpressionStatement[74247-74271]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[74178-74187]:ReturnStatement[74276-74285]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74347-74593]:Block[74445-74691]"
    }, {
      "left" : "Node templateNode = IR.script();",
      "right" : "Node templateNode = IR.script();",
      "info" : "VariableDeclarationStatement[74395-74427]:VariableDeclarationStatement[74493-74525]"
    }, {
      "left" : "templateNode.setStaticSourceFile(\n      this.associatedNode != null ?\n      this.associatedNode.getStaticSourceFile() :\n      null);",
      "right" : "templateNode.setStaticSourceFile(\n      this.associatedNode != null ?\n      this.associatedNode.getStaticSourceFile() :\n      null);",
      "info" : "ExpressionStatement[74432-74564]:ExpressionStatement[74530-74662]"
    }, {
      "left" : "return templateNode;",
      "right" : "return templateNode;",
      "info" : "ReturnStatement[74569-74589]:ReturnStatement[74667-74687]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74650-74748]:Block[74748-74846]"
    }, {
      "left" : "parser.addTypeWarning(warning, stream.getLineno(), stream.getCharno());",
      "right" : "parser.addTypeWarning(warning, stream.getLineno(), stream.getCharno());",
      "info" : "ExpressionStatement[74656-74727]:ExpressionStatement[74754-74825]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[74732-74744]:ReturnStatement[74830-74842]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74798-74864]:Block[74896-74962]"
    }, {
      "left" : "return reportTypeSyntaxWarning(\"msg.jsdoc.type.syntax\");",
      "right" : "return reportTypeSyntaxWarning(\"msg.jsdoc.type.syntax\");",
      "info" : "ReturnStatement[74804-74860]:ReturnStatement[74902-74958]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74916-74968]:Block[75014-75066]"
    }, {
      "left" : "return eatUntilEOLIfNotAnnotation(next());",
      "right" : "return eatUntilEOLIfNotAnnotation(next());",
      "info" : "ReturnStatement[74922-74964]:ReturnStatement[75020-75062]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75036-75188]:Block[75134-75286]"
    }, {
      "left" : "if (token == JsDocToken.ANNOTATION)",
      "right" : "if (token == JsDocToken.ANNOTATION)",
      "info" : "IfStatement[75042-75147]:IfStatement[75140-75245]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75078-75147]:Block[75176-75245]"
    }, {
      "left" : "state = State.SEARCHING_ANNOTATION;",
      "right" : "state = State.SEARCHING_ANNOTATION;",
      "info" : "ExpressionStatement[75086-75121]:ExpressionStatement[75184-75219]"
    }, {
      "left" : "return token;",
      "right" : "return token;",
      "info" : "ReturnStatement[75128-75141]:ReturnStatement[75226-75239]"
    }, {
      "left" : "return eatTokensUntilEOL(token);",
      "right" : "return eatTokensUntilEOL(token);",
      "info" : "ReturnStatement[75152-75184]:ReturnStatement[75250-75282]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75371-75414]:Block[75469-75512]"
    }, {
      "left" : "return eatTokensUntilEOL(next());",
      "right" : "return eatTokensUntilEOL(next());",
      "info" : "ReturnStatement[75377-75410]:ReturnStatement[75475-75508]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75613-75844]:Block[75711-75942]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[75619-75840]:DoStatement[75717-75938]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75622-75826]:Block[75720-75924]"
    }, {
      "left" : "if (token == JsDocToken.EOL || token == JsDocToken.EOC ||\n          token == JsDocToken.EOF)",
      "right" : "if (token == JsDocToken.EOL || token == JsDocToken.EOC ||\n          token == JsDocToken.EOF)",
      "info" : "IfStatement[75630-75798]:IfStatement[75728-75896]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75723-75798]:Block[75821-75896]"
    }, {
      "left" : "state = State.SEARCHING_ANNOTATION;",
      "right" : "state = State.SEARCHING_ANNOTATION;",
      "info" : "ExpressionStatement[75733-75768]:ExpressionStatement[75831-75866]"
    }, {
      "left" : "return token;",
      "right" : "return token;",
      "info" : "ReturnStatement[75777-75790]:ReturnStatement[75875-75888]"
    }, {
      "left" : "token = next();",
      "right" : "token = next();",
      "info" : "ExpressionStatement[75805-75820]:ExpressionStatement[75903-75918]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76193-76223]:Block[76291-76321]"
    }, {
      "left" : "unreadToken = token;",
      "right" : "unreadToken = token;",
      "info" : "ExpressionStatement[76199-76219]:ExpressionStatement[76297-76317]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76367-76431]:Block[76465-76529]"
    }, {
      "left" : "unreadToken = next();",
      "right" : "unreadToken = next();",
      "info" : "ExpressionStatement[76373-76394]:ExpressionStatement[76471-76492]"
    }, {
      "left" : "return unreadToken == token;",
      "right" : "return unreadToken == token;",
      "info" : "ReturnStatement[76399-76427]:ReturnStatement[76497-76525]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76601-76691]:Block[76699-76789]"
    }, {
      "left" : "unreadToken = next();",
      "right" : "unreadToken = next();",
      "info" : "ExpressionStatement[76607-76628]:ExpressionStatement[76705-76726]"
    }, {
      "left" : "return unreadToken == token1 || unreadToken == token2;",
      "right" : "return unreadToken == token1 || unreadToken == token2;",
      "info" : "ReturnStatement[76633-76687]:ReturnStatement[76731-76785]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76840-76967]:Block[76938-77065]"
    }, {
      "left" : "if (unreadToken == NO_UNREAD_TOKEN)",
      "right" : "if (unreadToken == NO_UNREAD_TOKEN)",
      "info" : "IfStatement[76846-76963]:IfStatement[76944-77061]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76882-76926]:Block[76980-77024]"
    }, {
      "left" : "return stream.getJsDocToken();",
      "right" : "return stream.getJsDocToken();",
      "info" : "ReturnStatement[76890-76920]:ReturnStatement[76988-77018]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76932-76963]:Block[77030-77061]"
    }, {
      "left" : "return current();",
      "right" : "return current();",
      "info" : "ReturnStatement[76940-76957]:ReturnStatement[77038-77055]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77073-77159]:Block[77171-77257]"
    }, {
      "left" : "JsDocToken t = unreadToken;",
      "right" : "JsDocToken t = unreadToken;",
      "info" : "VariableDeclarationStatement[77079-77106]:VariableDeclarationStatement[77177-77204]"
    }, {
      "left" : "unreadToken = NO_UNREAD_TOKEN;",
      "right" : "unreadToken = NO_UNREAD_TOKEN;",
      "info" : "ExpressionStatement[77111-77141]:ExpressionStatement[77209-77239]"
    }, {
      "left" : "return t;",
      "right" : "return t;",
      "info" : "ReturnStatement[77146-77155]:ReturnStatement[77244-77253]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77327-77448]:Block[77425-77546]"
    }, {
      "left" : "while (match(JsDocToken.EOL))",
      "right" : "while (match(JsDocToken.EOL))",
      "info" : "WhileStatement[77333-77444]:WhileStatement[77431-77542]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77363-77444]:Block[77461-77542]"
    }, {
      "left" : "next();",
      "right" : "next();",
      "info" : "ExpressionStatement[77371-77378]:ExpressionStatement[77469-77476]"
    }, {
      "left" : "if (match(JsDocToken.STAR))",
      "right" : "if (match(JsDocToken.STAR))",
      "info" : "IfStatement[77385-77438]:IfStatement[77483-77536]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77413-77438]:Block[77511-77536]"
    }, {
      "left" : "next();",
      "right" : "next();",
      "info" : "ExpressionStatement[77423-77430]:ExpressionStatement[77521-77528]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77543-77654]:Block[77641-77752]"
    }, {
      "left" : "String result = stream.getRemainingJSDocLine();",
      "right" : "String result = stream.getRemainingJSDocLine();",
      "info" : "VariableDeclarationStatement[77549-77596]:VariableDeclarationStatement[77647-77694]"
    }, {
      "left" : "unreadToken = NO_UNREAD_TOKEN;",
      "right" : "unreadToken = NO_UNREAD_TOKEN;",
      "info" : "ExpressionStatement[77601-77631]:ExpressionStatement[77699-77729]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[77636-77650]:ReturnStatement[77734-77748]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77814-77874]:Block[77912-77972]"
    }, {
      "left" : "return jsdocBuilder.isPopulatedWithFileOverview();",
      "right" : "return jsdocBuilder.isPopulatedWithFileOverview();",
      "info" : "ReturnStatement[77820-77870]:ReturnStatement[77918-77968]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77907-77951]:Block[78005-78049]"
    }, {
      "left" : "return jsdocBuilder.isPopulated();",
      "right" : "return jsdocBuilder.isPopulated();",
      "info" : "ReturnStatement[77913-77947]:ReturnStatement[78011-78045]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77999-78051]:Block[78097-78149]"
    }, {
      "left" : "return jsdocBuilder.build(associatedNode);",
      "right" : "return jsdocBuilder.build(associatedNode);",
      "info" : "ReturnStatement[78005-78047]:ReturnStatement[78103-78145]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78150-78189]:Block[78248-78287]"
    }, {
      "left" : "return fileOverviewJSDocInfo;",
      "right" : "return fileOverviewJSDocInfo;",
      "info" : "ReturnStatement[78156-78185]:ReturnStatement[78254-78283]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78578-78613]:Block[78676-78711]"
    }, {
      "left" : "return lookAheadFor('{');",
      "right" : "return lookAheadFor('{');",
      "info" : "ReturnStatement[78584-78609]:ReturnStatement[78682-78707]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78658-78693]:Block[78756-78791]"
    }, {
      "left" : "return lookAheadFor('@');",
      "right" : "return lookAheadFor('@');",
      "info" : "ReturnStatement[78664-78689]:ReturnStatement[78762-78787]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78881-79173]:Block[78979-79271]"
    }, {
      "left" : "boolean matched = false;",
      "right" : "boolean matched = false;",
      "info" : "VariableDeclarationStatement[78887-78911]:VariableDeclarationStatement[78985-79009]"
    }, {
      "left" : "int c;",
      "right" : "int c;",
      "info" : "VariableDeclarationStatement[78916-78922]:VariableDeclarationStatement[79014-79020]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[78927-79124]:WhileStatement[79025-79222]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78940-79124]:Block[79038-79222]"
    }, {
      "left" : "c = stream.getChar();",
      "right" : "c = stream.getChar();",
      "info" : "ExpressionStatement[78948-78969]:ExpressionStatement[79046-79067]"
    }, {
      "left" : "if (c == ' ')",
      "right" : "if (c == ' ')",
      "info" : "IfStatement[78976-79118]:IfStatement[79074-79216]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78990-79017]:Block[79088-79115]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[79000-79009]:ContinueStatement[79098-79107]"
    }, {
      "left" : "if (c == expect)",
      "right" : "if (c == expect)",
      "info" : "IfStatement[79023-79118]:IfStatement[79121-79216]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79040-79088]:Block[79138-79186]"
    }, {
      "left" : "matched = true;",
      "right" : "matched = true;",
      "info" : "ExpressionStatement[79050-79065]:ExpressionStatement[79148-79163]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[79074-79080]:BreakStatement[79172-79178]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79094-79118]:Block[79192-79216]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[79104-79110]:BreakStatement[79202-79208]"
    }, {
      "left" : "stream.ungetChar(c);",
      "right" : "stream.ungetChar(c);",
      "info" : "ExpressionStatement[79129-79149]:ExpressionStatement[79227-79247]"
    }, {
      "left" : "return matched;",
      "right" : "return matched;",
      "info" : "ReturnStatement[79154-79169]:ReturnStatement[79252-79267]"
    } ]
  },
  "interFileMappings" : { }
}