{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "JsonWriter",
      "right" : "JsonWriter",
      "info" : "TypeDeclaration[1178-18822]:TypeDeclaration[1178-18631]"
    }, {
      "left" : "private static final String[] REPLACEMENT_CHARS;",
      "right" : "private static final String[] REPLACEMENT_CHARS;",
      "info" : "FieldDeclaration[5359-5407]:FieldDeclaration[5359-5407]"
    }, {
      "left" : "private static final String[] HTML_SAFE_REPLACEMENT_CHARS;",
      "right" : "private static final String[] HTML_SAFE_REPLACEMENT_CHARS;",
      "info" : "FieldDeclaration[5410-5468]:FieldDeclaration[5410-5468]"
    }, {
      "left" : "private final Writer out;",
      "right" : "private final Writer out;",
      "info" : "FieldDeclaration[6208-6309]:FieldDeclaration[6208-6309]"
    }, {
      "left" : "private int[] stack = new int[32];",
      "right" : "private int[] stack = new int[32];",
      "info" : "FieldDeclaration[6313-6347]:FieldDeclaration[6313-6347]"
    }, {
      "left" : "private int stackSize = 0;",
      "right" : "private int stackSize = 0;",
      "info" : "FieldDeclaration[6350-6376]:FieldDeclaration[6350-6376]"
    }, {
      "left" : "private String indent;",
      "right" : "private String indent;",
      "info" : "FieldDeclaration[6414-6566]:FieldDeclaration[6414-6566]"
    }, {
      "left" : "private String separator = \":\";",
      "right" : "private String separator = \":\";",
      "info" : "FieldDeclaration[6570-6664]:FieldDeclaration[6570-6664]"
    }, {
      "left" : "private boolean lenient;",
      "right" : "private boolean lenient;",
      "info" : "FieldDeclaration[6668-6692]:FieldDeclaration[6668-6692]"
    }, {
      "left" : "private boolean htmlSafe;",
      "right" : "private boolean htmlSafe;",
      "info" : "FieldDeclaration[6696-6721]:FieldDeclaration[6696-6721]"
    }, {
      "left" : "private String deferredName;",
      "right" : "private String deferredName;",
      "info" : "FieldDeclaration[6725-6753]:FieldDeclaration[6725-6753]"
    }, {
      "left" : "private boolean serializeNulls = true;",
      "right" : "private boolean serializeNulls = true;",
      "info" : "FieldDeclaration[6757-6795]:FieldDeclaration[6757-6795]"
    }, {
      "left" : "public JsonWriter(Writer out)",
      "right" : "public JsonWriter(Writer out)",
      "info" : "MethodDeclaration[6799-7165]:MethodDeclaration[6799-7165]"
    }, {
      "left" : "public final void setIndent(String indent)",
      "right" : "public final void setIndent(String indent)",
      "info" : "MethodDeclaration[7169-7696]:MethodDeclaration[7169-7696]"
    }, {
      "left" : "public final void setLenient(boolean lenient)",
      "right" : "public final void setLenient(boolean lenient)",
      "info" : "MethodDeclaration[7700-8294]:MethodDeclaration[7700-8294]"
    }, {
      "left" : "public boolean isLenient()",
      "right" : "public boolean isLenient()",
      "info" : "MethodDeclaration[8298-8421]:MethodDeclaration[8298-8421]"
    }, {
      "left" : "public final void setHtmlSafe(boolean htmlSafe)",
      "right" : "public final void setHtmlSafe(boolean htmlSafe)",
      "info" : "MethodDeclaration[8425-8871]:MethodDeclaration[8425-8871]"
    }, {
      "left" : "public final boolean isHtmlSafe()",
      "right" : "public final boolean isHtmlSafe()",
      "info" : "MethodDeclaration[8875-9050]:MethodDeclaration[8875-9050]"
    }, {
      "left" : "public final void setSerializeNulls(boolean serializeNulls)",
      "right" : "public final void setSerializeNulls(boolean serializeNulls)",
      "info" : "MethodDeclaration[9054-9311]:MethodDeclaration[9054-9311]"
    }, {
      "left" : "public final boolean getSerializeNulls()",
      "right" : "public final boolean getSerializeNulls()",
      "info" : "MethodDeclaration[9315-9541]:MethodDeclaration[9315-9541]"
    }, {
      "left" : "public JsonWriter beginArray() throws IOException",
      "right" : "public JsonWriter beginArray() throws IOException",
      "info" : "MethodDeclaration[9545-9816]:MethodDeclaration[9545-9816]"
    }, {
      "left" : "public JsonWriter endArray() throws IOException",
      "right" : "public JsonWriter endArray() throws IOException",
      "info" : "MethodDeclaration[9820-10006]:MethodDeclaration[9820-10006]"
    }, {
      "left" : "public JsonWriter beginObject() throws IOException",
      "right" : "public JsonWriter beginObject() throws IOException",
      "info" : "MethodDeclaration[10010-10285]:MethodDeclaration[10010-10285]"
    }, {
      "left" : "public JsonWriter endObject() throws IOException",
      "right" : "public JsonWriter endObject() throws IOException",
      "info" : "MethodDeclaration[10289-10479]:MethodDeclaration[10289-10479]"
    }, {
      "left" : "private JsonWriter open(int empty, String openBracket) throws IOException",
      "right" : "private JsonWriter open(int empty, String openBracket) throws IOException",
      "info" : "MethodDeclaration[10483-10749]:MethodDeclaration[10483-10745]"
    }, {
      "left" : "private JsonWriter close(int empty, int nonempty, String closeBracket)\n      throws IOException",
      "right" : "private JsonWriter close(int empty, int nonempty, String closeBracket)\n      throws IOException",
      "info" : "MethodDeclaration[10753-11333]:MethodDeclaration[10749-11329]"
    }, {
      "left" : "private void push(int newTop)",
      "right" : "private void push(int newTop)",
      "info" : "MethodDeclaration[11337-11577]:MethodDeclaration[11333-11573]"
    }, {
      "left" : "private int peek()",
      "right" : "private int peek()",
      "info" : "MethodDeclaration[11581-11794]:MethodDeclaration[11577-11790]"
    }, {
      "left" : "private void replaceTop(int topOfStack)",
      "right" : "private void replaceTop(int topOfStack)",
      "info" : "MethodDeclaration[11798-11963]:MethodDeclaration[11794-11959]"
    }, {
      "left" : "public JsonWriter name(String name) throws IOException",
      "right" : "public JsonWriter name(String name) throws IOException",
      "info" : "MethodDeclaration[11967-12472]:MethodDeclaration[11963-12468]"
    }, {
      "left" : "private void writeDeferredName() throws IOException",
      "right" : "private void writeDeferredName() throws IOException",
      "info" : "MethodDeclaration[12476-12646]:MethodDeclaration[12472-12642]"
    }, {
      "left" : "public JsonWriter value(String value) throws IOException",
      "right" : "public JsonWriter value(String value) throws IOException",
      "info" : "MethodDeclaration[12650-13003]:MethodDeclaration[12646-12994]"
    }, {
      "left" : "public JsonWriter jsonValue(String value) throws IOException",
      "right" : "public JsonWriter jsonValue(String value) throws IOException",
      "info" : "MethodDeclaration[13007-13423]:MethodDeclaration[12998-13409]"
    }, {
      "left" : "public JsonWriter nullValue() throws IOException",
      "right" : "public JsonWriter nullValue() throws IOException",
      "info" : "MethodDeclaration[13427-13814]:MethodDeclaration[13413-13795]"
    }, {
      "left" : "public JsonWriter value(boolean value) throws IOException",
      "right" : "public JsonWriter value(boolean value) throws IOException",
      "info" : "MethodDeclaration[13818-14059]:MethodDeclaration[13799-14035]"
    }, {
      "left" : "public JsonWriter value(double value) throws IOException",
      "right" : "public JsonWriter value(double value) throws IOException",
      "info" : "MethodDeclaration[14063-14585]:MethodDeclaration[14039-14556]"
    }, {
      "left" : "public JsonWriter value(long value) throws IOException",
      "right" : "public JsonWriter value(long value) throws IOException",
      "info" : "MethodDeclaration[14589-14823]:MethodDeclaration[14560-14789]"
    }, {
      "left" : "public JsonWriter value(Number value) throws IOException",
      "right" : "public JsonWriter value(Number value) throws IOException",
      "info" : "MethodDeclaration[14827-15483]:MethodDeclaration[14793-15444]"
    }, {
      "left" : "public void flush() throws IOException",
      "right" : "public void flush() throws IOException",
      "info" : "MethodDeclaration[15487-15761]:MethodDeclaration[15448-15722]"
    }, {
      "left" : "public void close() throws IOException",
      "right" : "public void close() throws IOException",
      "info" : "MethodDeclaration[15765-16152]:MethodDeclaration[15726-16113]"
    }, {
      "left" : "private void string(String value) throws IOException",
      "right" : "private void string(String value) throws IOException",
      "info" : "MethodDeclaration[16156-16996]:MethodDeclaration[16117-16957]"
    }, {
      "left" : "private void newline() throws IOException",
      "right" : "private void newline() throws IOException",
      "info" : "MethodDeclaration[17000-17201]:MethodDeclaration[16961-17162]"
    }, {
      "left" : "private void beforeName() throws IOException",
      "right" : "private void beforeName() throws IOException",
      "info" : "MethodDeclaration[17205-17670]:MethodDeclaration[17166-17631]"
    }, {
      "left" : "private void beforeValue(boolean root) throws IOException",
      "right" : "private void beforeValue() throws IOException",
      "info" : "MethodDeclaration[17674-18820]:MethodDeclaration[17635-18629]"
    } ],
    "mappings" : [
 {
      "left" : "Closeable",
      "right" : "Closeable",
      "info" : "SimpleType[4866-4875]:SimpleType[4866-4875]"
    }, {
      "left" : "Flushable",
      "right" : "Flushable",
      "info" : "SimpleType[4877-4886]:SimpleType[4877-4886]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5478-6204]:Block[5478-6204]"
    }, {
      "left" : "REPLACEMENT_CHARS = new String[128];",
      "right" : "REPLACEMENT_CHARS = new String[128];",
      "info" : "ExpressionStatement[5484-5520]:ExpressionStatement[5484-5520]"
    }, {
      "left" : "for (int i = 0; i <= 0x1f; i++)",
      "right" : "for (int i = 0; i <= 0x1f; i++)",
      "info" : "ForStatement[5525-5628]:ForStatement[5525-5628]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5557-5628]:Block[5557-5628]"
    }, {
      "left" : "REPLACEMENT_CHARS[i] = String.format(\"\\\\u%04x\", (int) i);",
      "right" : "REPLACEMENT_CHARS[i] = String.format(\"\\\\u%04x\", (int) i);",
      "info" : "ExpressionStatement[5565-5622]:ExpressionStatement[5565-5622]"
    }, {
      "left" : "REPLACEMENT_CHARS['\"'] = \"\\\\\\\"\";",
      "right" : "REPLACEMENT_CHARS['\"'] = \"\\\\\\\"\";",
      "info" : "ExpressionStatement[5633-5665]:ExpressionStatement[5633-5665]"
    }, {
      "left" : "REPLACEMENT_CHARS['\\\\'] = \"\\\\\\\\\";",
      "right" : "REPLACEMENT_CHARS['\\\\'] = \"\\\\\\\\\";",
      "info" : "ExpressionStatement[5670-5703]:ExpressionStatement[5670-5703]"
    }, {
      "left" : "REPLACEMENT_CHARS['\\t'] = \"\\\\t\";",
      "right" : "REPLACEMENT_CHARS['\\t'] = \"\\\\t\";",
      "info" : "ExpressionStatement[5708-5740]:ExpressionStatement[5708-5740]"
    }, {
      "left" : "REPLACEMENT_CHARS['\\b'] = \"\\\\b\";",
      "right" : "REPLACEMENT_CHARS['\\b'] = \"\\\\b\";",
      "info" : "ExpressionStatement[5745-5777]:ExpressionStatement[5745-5777]"
    }, {
      "left" : "REPLACEMENT_CHARS['\\n'] = \"\\\\n\";",
      "right" : "REPLACEMENT_CHARS['\\n'] = \"\\\\n\";",
      "info" : "ExpressionStatement[5782-5814]:ExpressionStatement[5782-5814]"
    }, {
      "left" : "REPLACEMENT_CHARS['\\r'] = \"\\\\r\";",
      "right" : "REPLACEMENT_CHARS['\\r'] = \"\\\\r\";",
      "info" : "ExpressionStatement[5819-5851]:ExpressionStatement[5819-5851]"
    }, {
      "left" : "REPLACEMENT_CHARS['\\f'] = \"\\\\f\";",
      "right" : "REPLACEMENT_CHARS['\\f'] = \"\\\\f\";",
      "info" : "ExpressionStatement[5856-5888]:ExpressionStatement[5856-5888]"
    }, {
      "left" : "HTML_SAFE_REPLACEMENT_CHARS = REPLACEMENT_CHARS.clone();",
      "right" : "HTML_SAFE_REPLACEMENT_CHARS = REPLACEMENT_CHARS.clone();",
      "info" : "ExpressionStatement[5893-5949]:ExpressionStatement[5893-5949]"
    }, {
      "left" : "HTML_SAFE_REPLACEMENT_CHARS['<'] = \"\\\\u003c\";",
      "right" : "HTML_SAFE_REPLACEMENT_CHARS['<'] = \"\\\\u003c\";",
      "info" : "ExpressionStatement[5954-5999]:ExpressionStatement[5954-5999]"
    }, {
      "left" : "HTML_SAFE_REPLACEMENT_CHARS['>'] = \"\\\\u003e\";",
      "right" : "HTML_SAFE_REPLACEMENT_CHARS['>'] = \"\\\\u003e\";",
      "info" : "ExpressionStatement[6004-6049]:ExpressionStatement[6004-6049]"
    }, {
      "left" : "HTML_SAFE_REPLACEMENT_CHARS['&'] = \"\\\\u0026\";",
      "right" : "HTML_SAFE_REPLACEMENT_CHARS['&'] = \"\\\\u0026\";",
      "info" : "ExpressionStatement[6054-6099]:ExpressionStatement[6054-6099]"
    }, {
      "left" : "HTML_SAFE_REPLACEMENT_CHARS['='] = \"\\\\u003d\";",
      "right" : "HTML_SAFE_REPLACEMENT_CHARS['='] = \"\\\\u003d\";",
      "info" : "ExpressionStatement[6104-6149]:ExpressionStatement[6104-6149]"
    }, {
      "left" : "HTML_SAFE_REPLACEMENT_CHARS['\\''] = \"\\\\u0027\";",
      "right" : "HTML_SAFE_REPLACEMENT_CHARS['\\''] = \"\\\\u0027\";",
      "info" : "ExpressionStatement[6154-6200]:ExpressionStatement[6154-6200]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6379-6410]:Block[6379-6410]"
    }, {
      "left" : "push(EMPTY_DOCUMENT);",
      "right" : "push(EMPTY_DOCUMENT);",
      "info" : "ExpressionStatement[6385-6406]:ExpressionStatement[6385-6406]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7028-7034]:Modifier[7028-7034]"
    }, {
      "left" : "JsonWriter",
      "right" : "JsonWriter",
      "info" : "SimpleName[7035-7045]:SimpleName[7035-7045]"
    }, {
      "left" : "Writer out",
      "right" : "Writer out",
      "info" : "SingleVariableDeclaration[7046-7056]:SingleVariableDeclaration[7046-7056]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7058-7165]:Block[7058-7165]"
    }, {
      "left" : "if (out == null)",
      "right" : "if (out == null)",
      "info" : "IfStatement[7064-7141]:IfStatement[7064-7141]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7081-7141]:Block[7081-7141]"
    }, {
      "left" : "throw new NullPointerException(\"out == null\");",
      "right" : "throw new NullPointerException(\"out == null\");",
      "info" : "ThrowStatement[7089-7135]:ThrowStatement[7089-7135]"
    }, {
      "left" : "this.out = out;",
      "right" : "this.out = out;",
      "info" : "ExpressionStatement[7146-7161]:ExpressionStatement[7146-7161]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7486-7492]:Modifier[7486-7492]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[7493-7498]:Modifier[7493-7498]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7499-7503]:PrimitiveType[7499-7503]"
    }, {
      "left" : "setIndent",
      "right" : "setIndent",
      "info" : "SimpleName[7504-7513]:SimpleName[7504-7513]"
    }, {
      "left" : "String indent",
      "right" : "String indent",
      "info" : "SingleVariableDeclaration[7514-7527]:SingleVariableDeclaration[7514-7527]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7529-7696]:Block[7529-7696]"
    }, {
      "left" : "if (indent.length() == 0)",
      "right" : "if (indent.length() == 0)",
      "info" : "IfStatement[7535-7692]:IfStatement[7535-7692]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7561-7622]:Block[7561-7622]"
    }, {
      "left" : "this.indent = null;",
      "right" : "this.indent = null;",
      "info" : "ExpressionStatement[7569-7588]:ExpressionStatement[7569-7588]"
    }, {
      "left" : "this.separator = \":\";",
      "right" : "this.separator = \":\";",
      "info" : "ExpressionStatement[7595-7616]:ExpressionStatement[7595-7616]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7628-7692]:Block[7628-7692]"
    }, {
      "left" : "this.indent = indent;",
      "right" : "this.indent = indent;",
      "info" : "ExpressionStatement[7636-7657]:ExpressionStatement[7636-7657]"
    }, {
      "left" : "this.separator = \": \";",
      "right" : "this.separator = \": \";",
      "info" : "ExpressionStatement[7664-7686]:ExpressionStatement[7664-7686]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8215-8221]:Modifier[8215-8221]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[8222-8227]:Modifier[8222-8227]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[8228-8232]:PrimitiveType[8228-8232]"
    }, {
      "left" : "setLenient",
      "right" : "setLenient",
      "info" : "SimpleName[8233-8243]:SimpleName[8233-8243]"
    }, {
      "left" : "boolean lenient",
      "right" : "boolean lenient",
      "info" : "SingleVariableDeclaration[8244-8259]:SingleVariableDeclaration[8244-8259]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8261-8294]:Block[8261-8294]"
    }, {
      "left" : "this.lenient = lenient;",
      "right" : "this.lenient = lenient;",
      "info" : "ExpressionStatement[8267-8290]:ExpressionStatement[8267-8290]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8369-8375]:Modifier[8369-8375]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[8376-8383]:PrimitiveType[8376-8383]"
    }, {
      "left" : "isLenient",
      "right" : "isLenient",
      "info" : "SimpleName[8384-8393]:SimpleName[8384-8393]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8396-8421]:Block[8396-8421]"
    }, {
      "left" : "return lenient;",
      "right" : "return lenient;",
      "info" : "ReturnStatement[8402-8417]:ReturnStatement[8402-8417]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8788-8794]:Modifier[8788-8794]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[8795-8800]:Modifier[8795-8800]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[8801-8805]:PrimitiveType[8801-8805]"
    }, {
      "left" : "setHtmlSafe",
      "right" : "setHtmlSafe",
      "info" : "SimpleName[8806-8817]:SimpleName[8806-8817]"
    }, {
      "left" : "boolean htmlSafe",
      "right" : "boolean htmlSafe",
      "info" : "SingleVariableDeclaration[8818-8834]:SingleVariableDeclaration[8818-8834]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8836-8871]:Block[8836-8871]"
    }, {
      "left" : "this.htmlSafe = htmlSafe;",
      "right" : "this.htmlSafe = htmlSafe;",
      "info" : "ExpressionStatement[8842-8867]:ExpressionStatement[8842-8867]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8990-8996]:Modifier[8990-8996]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[8997-9002]:Modifier[8997-9002]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[9003-9010]:PrimitiveType[9003-9010]"
    }, {
      "left" : "isHtmlSafe",
      "right" : "isHtmlSafe",
      "info" : "SimpleName[9011-9021]:SimpleName[9011-9021]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9024-9050]:Block[9024-9050]"
    }, {
      "left" : "return htmlSafe;",
      "right" : "return htmlSafe;",
      "info" : "ReturnStatement[9030-9046]:ReturnStatement[9030-9046]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9204-9210]:Modifier[9204-9210]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[9211-9216]:Modifier[9211-9216]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[9217-9221]:PrimitiveType[9217-9221]"
    }, {
      "left" : "setSerializeNulls",
      "right" : "setSerializeNulls",
      "info" : "SimpleName[9222-9239]:SimpleName[9222-9239]"
    }, {
      "left" : "boolean serializeNulls",
      "right" : "boolean serializeNulls",
      "info" : "SingleVariableDeclaration[9240-9262]:SingleVariableDeclaration[9240-9262]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9264-9311]:Block[9264-9311]"
    }, {
      "left" : "this.serializeNulls = serializeNulls;",
      "right" : "this.serializeNulls = serializeNulls;",
      "info" : "ExpressionStatement[9270-9307]:ExpressionStatement[9270-9307]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9468-9474]:Modifier[9468-9474]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[9475-9480]:Modifier[9475-9480]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[9481-9488]:PrimitiveType[9481-9488]"
    }, {
      "left" : "getSerializeNulls",
      "right" : "getSerializeNulls",
      "info" : "SimpleName[9489-9506]:SimpleName[9489-9506]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9509-9541]:Block[9509-9541]"
    }, {
      "left" : "return serializeNulls;",
      "right" : "return serializeNulls;",
      "info" : "ReturnStatement[9515-9537]:ReturnStatement[9515-9537]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9701-9707]:Modifier[9701-9707]"
    }, {
      "left" : "JsonWriter",
      "right" : "JsonWriter",
      "info" : "SimpleType[9708-9718]:SimpleType[9708-9718]"
    }, {
      "left" : "beginArray",
      "right" : "beginArray",
      "info" : "SimpleName[9719-9729]:SimpleName[9719-9729]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[9739-9750]:SimpleType[9739-9750]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9751-9816]:Block[9751-9816]"
    }, {
      "left" : "writeDeferredName();",
      "right" : "writeDeferredName();",
      "info" : "ExpressionStatement[9757-9777]:ExpressionStatement[9757-9777]"
    }, {
      "left" : "return open(EMPTY_ARRAY, \"[\");",
      "right" : "return open(EMPTY_ARRAY, \"[\");",
      "info" : "ReturnStatement[9782-9812]:ReturnStatement[9782-9812]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9901-9907]:Modifier[9901-9907]"
    }, {
      "left" : "JsonWriter",
      "right" : "JsonWriter",
      "info" : "SimpleType[9908-9918]:SimpleType[9908-9918]"
    }, {
      "left" : "endArray",
      "right" : "endArray",
      "info" : "SimpleName[9919-9927]:SimpleName[9919-9927]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[9937-9948]:SimpleType[9937-9948]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9949-10006]:Block[9949-10006]"
    }, {
      "left" : "return close(EMPTY_ARRAY, NONEMPTY_ARRAY, \"]\");",
      "right" : "return close(EMPTY_ARRAY, NONEMPTY_ARRAY, \"]\");",
      "info" : "ReturnStatement[9955-10002]:ReturnStatement[9955-10002]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10168-10174]:Modifier[10168-10174]"
    }, {
      "left" : "JsonWriter",
      "right" : "JsonWriter",
      "info" : "SimpleType[10175-10185]:SimpleType[10175-10185]"
    }, {
      "left" : "beginObject",
      "right" : "beginObject",
      "info" : "SimpleName[10186-10197]:SimpleName[10186-10197]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[10207-10218]:SimpleType[10207-10218]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10219-10285]:Block[10219-10285]"
    }, {
      "left" : "writeDeferredName();",
      "right" : "writeDeferredName();",
      "info" : "ExpressionStatement[10225-10245]:ExpressionStatement[10225-10245]"
    }, {
      "left" : "return open(EMPTY_OBJECT, \"{\");",
      "right" : "return open(EMPTY_OBJECT, \"{\");",
      "info" : "ReturnStatement[10250-10281]:ReturnStatement[10250-10281]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10371-10377]:Modifier[10371-10377]"
    }, {
      "left" : "JsonWriter",
      "right" : "JsonWriter",
      "info" : "SimpleType[10378-10388]:SimpleType[10378-10388]"
    }, {
      "left" : "endObject",
      "right" : "endObject",
      "info" : "SimpleName[10389-10398]:SimpleName[10389-10398]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[10408-10419]:SimpleType[10408-10419]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10420-10479]:Block[10420-10479]"
    }, {
      "left" : "return close(EMPTY_OBJECT, NONEMPTY_OBJECT, \"}\");",
      "right" : "return close(EMPTY_OBJECT, NONEMPTY_OBJECT, \"}\");",
      "info" : "ReturnStatement[10426-10475]:ReturnStatement[10426-10475]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[10585-10592]:Modifier[10585-10592]"
    }, {
      "left" : "JsonWriter",
      "right" : "JsonWriter",
      "info" : "SimpleType[10593-10603]:SimpleType[10593-10603]"
    }, {
      "left" : "open",
      "right" : "open",
      "info" : "SimpleName[10604-10608]:SimpleName[10604-10608]"
    }, {
      "left" : "int empty",
      "right" : "int empty",
      "info" : "SingleVariableDeclaration[10609-10618]:SingleVariableDeclaration[10609-10618]"
    }, {
      "left" : "String openBracket",
      "right" : "String openBracket",
      "info" : "SingleVariableDeclaration[10620-10638]:SingleVariableDeclaration[10620-10638]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[10647-10658]:SimpleType[10647-10658]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10659-10749]:Block[10659-10745]"
    }, {
      "left" : "beforeValue(true);",
      "right" : "beforeValue();",
      "info" : "ExpressionStatement[10665-10683]:ExpressionStatement[10665-10679]"
    }, {
      "left" : "push(empty);",
      "right" : "push(empty);",
      "info" : "ExpressionStatement[10688-10700]:ExpressionStatement[10684-10696]"
    }, {
      "left" : "out.write(openBracket);",
      "right" : "out.write(openBracket);",
      "info" : "ExpressionStatement[10705-10728]:ExpressionStatement[10701-10724]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[10733-10745]:ReturnStatement[10729-10741]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[10861-10868]:Modifier[10857-10864]"
    }, {
      "left" : "JsonWriter",
      "right" : "JsonWriter",
      "info" : "SimpleType[10869-10879]:SimpleType[10865-10875]"
    }, {
      "left" : "close",
      "right" : "close",
      "info" : "SimpleName[10880-10885]:SimpleName[10876-10881]"
    }, {
      "left" : "int empty",
      "right" : "int empty",
      "info" : "SingleVariableDeclaration[10886-10895]:SingleVariableDeclaration[10882-10891]"
    }, {
      "left" : "int nonempty",
      "right" : "int nonempty",
      "info" : "SingleVariableDeclaration[10897-10909]:SingleVariableDeclaration[10893-10905]"
    }, {
      "left" : "String closeBracket",
      "right" : "String closeBracket",
      "info" : "SingleVariableDeclaration[10911-10930]:SingleVariableDeclaration[10907-10926]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[10945-10956]:SimpleType[10941-10952]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10957-11333]:Block[10953-11329]"
    }, {
      "left" : "int context = peek();",
      "right" : "int context = peek();",
      "info" : "VariableDeclarationStatement[10963-10984]:VariableDeclarationStatement[10959-10980]"
    }, {
      "left" : "if (context != nonempty && context != empty)",
      "right" : "if (context != nonempty && context != empty)",
      "info" : "IfStatement[10989-11100]:IfStatement[10985-11096]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11034-11100]:Block[11030-11096]"
    }, {
      "left" : "throw new IllegalStateException(\"Nesting problem.\");",
      "right" : "throw new IllegalStateException(\"Nesting problem.\");",
      "info" : "ThrowStatement[11042-11094]:ThrowStatement[11038-11090]"
    }, {
      "left" : "if (deferredName != null)",
      "right" : "if (deferredName != null)",
      "info" : "IfStatement[11105-11211]:IfStatement[11101-11207]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11131-11211]:Block[11127-11207]"
    }, {
      "left" : "throw new IllegalStateException(\"Dangling name: \" + deferredName);",
      "right" : "throw new IllegalStateException(\"Dangling name: \" + deferredName);",
      "info" : "ThrowStatement[11139-11205]:ThrowStatement[11135-11201]"
    }, {
      "left" : "stackSize--;",
      "right" : "stackSize--;",
      "info" : "ExpressionStatement[11217-11229]:ExpressionStatement[11213-11225]"
    }, {
      "left" : "if (context == nonempty)",
      "right" : "if (context == nonempty)",
      "info" : "IfStatement[11234-11283]:IfStatement[11230-11279]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11259-11283]:Block[11255-11279]"
    }, {
      "left" : "newline();",
      "right" : "newline();",
      "info" : "ExpressionStatement[11267-11277]:ExpressionStatement[11263-11273]"
    }, {
      "left" : "out.write(closeBracket);",
      "right" : "out.write(closeBracket);",
      "info" : "ExpressionStatement[11288-11312]:ExpressionStatement[11284-11308]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[11317-11329]:ReturnStatement[11313-11325]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[11337-11344]:Modifier[11333-11340]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[11345-11349]:PrimitiveType[11341-11345]"
    }, {
      "left" : "push",
      "right" : "push",
      "info" : "SimpleName[11350-11354]:SimpleName[11346-11350]"
    }, {
      "left" : "int newTop",
      "right" : "int newTop",
      "info" : "SingleVariableDeclaration[11355-11365]:SingleVariableDeclaration[11351-11361]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11367-11577]:Block[11363-11573]"
    }, {
      "left" : "if (stackSize == stack.length)",
      "right" : "if (stackSize == stack.length)",
      "info" : "IfStatement[11373-11540]:IfStatement[11369-11536]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11404-11540]:Block[11400-11536]"
    }, {
      "left" : "int[] newStack = new int[stackSize * 2];",
      "right" : "int[] newStack = new int[stackSize * 2];",
      "info" : "VariableDeclarationStatement[11412-11452]:VariableDeclarationStatement[11408-11448]"
    }, {
      "left" : "System.arraycopy(stack, 0, newStack, 0, stackSize);",
      "right" : "System.arraycopy(stack, 0, newStack, 0, stackSize);",
      "info" : "ExpressionStatement[11459-11510]:ExpressionStatement[11455-11506]"
    }, {
      "left" : "stack = newStack;",
      "right" : "stack = newStack;",
      "info" : "ExpressionStatement[11517-11534]:ExpressionStatement[11513-11530]"
    }, {
      "left" : "stack[stackSize++] = newTop;",
      "right" : "stack[stackSize++] = newTop;",
      "info" : "ExpressionStatement[11545-11573]:ExpressionStatement[11541-11569]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[11641-11648]:Modifier[11637-11644]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[11649-11652]:PrimitiveType[11645-11648]"
    }, {
      "left" : "peek",
      "right" : "peek",
      "info" : "SimpleName[11653-11657]:SimpleName[11649-11653]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11660-11794]:Block[11656-11790]"
    }, {
      "left" : "if (stackSize == 0)",
      "right" : "if (stackSize == 0)",
      "info" : "IfStatement[11666-11757]:IfStatement[11662-11753]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11686-11757]:Block[11682-11753]"
    }, {
      "left" : "throw new IllegalStateException(\"JsonWriter is closed.\");",
      "right" : "throw new IllegalStateException(\"JsonWriter is closed.\");",
      "info" : "ThrowStatement[11694-11751]:ThrowStatement[11690-11747]"
    }, {
      "left" : "return stack[stackSize - 1];",
      "right" : "return stack[stackSize - 1];",
      "info" : "ReturnStatement[11762-11790]:ReturnStatement[11758-11786]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[11879-11886]:Modifier[11875-11882]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[11887-11891]:PrimitiveType[11883-11887]"
    }, {
      "left" : "replaceTop",
      "right" : "replaceTop",
      "info" : "SimpleName[11892-11902]:SimpleName[11888-11898]"
    }, {
      "left" : "int topOfStack",
      "right" : "int topOfStack",
      "info" : "SingleVariableDeclaration[11903-11917]:SingleVariableDeclaration[11899-11913]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11919-11963]:Block[11915-11959]"
    }, {
      "left" : "stack[stackSize - 1] = topOfStack;",
      "right" : "stack[stackSize - 1] = topOfStack;",
      "info" : "ExpressionStatement[11925-11959]:ExpressionStatement[11921-11955]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12111-12117]:Modifier[12107-12113]"
    }, {
      "left" : "JsonWriter",
      "right" : "JsonWriter",
      "info" : "SimpleType[12118-12128]:SimpleType[12114-12124]"
    }, {
      "left" : "name",
      "right" : "name",
      "info" : "SimpleName[12129-12133]:SimpleName[12125-12129]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[12134-12145]:SingleVariableDeclaration[12130-12141]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[12154-12165]:SimpleType[12150-12161]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12166-12472]:Block[12162-12468]"
    }, {
      "left" : "if (name == null)",
      "right" : "if (name == null)",
      "info" : "IfStatement[12172-12251]:IfStatement[12168-12247]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12190-12251]:Block[12186-12247]"
    }, {
      "left" : "throw new NullPointerException(\"name == null\");",
      "right" : "throw new NullPointerException(\"name == null\");",
      "info" : "ThrowStatement[12198-12245]:ThrowStatement[12194-12241]"
    }, {
      "left" : "if (deferredName != null)",
      "right" : "if (deferredName != null)",
      "info" : "IfStatement[12256-12330]:IfStatement[12252-12326]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12282-12330]:Block[12278-12326]"
    }, {
      "left" : "throw new IllegalStateException();",
      "right" : "throw new IllegalStateException();",
      "info" : "ThrowStatement[12290-12324]:ThrowStatement[12286-12320]"
    }, {
      "left" : "if (stackSize == 0)",
      "right" : "if (stackSize == 0)",
      "info" : "IfStatement[12335-12426]:IfStatement[12331-12422]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12355-12426]:Block[12351-12422]"
    }, {
      "left" : "throw new IllegalStateException(\"JsonWriter is closed.\");",
      "right" : "throw new IllegalStateException(\"JsonWriter is closed.\");",
      "info" : "ThrowStatement[12363-12420]:ThrowStatement[12359-12416]"
    }, {
      "left" : "deferredName = name;",
      "right" : "deferredName = name;",
      "info" : "ExpressionStatement[12431-12451]:ExpressionStatement[12427-12447]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[12456-12468]:ReturnStatement[12452-12464]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[12476-12483]:Modifier[12472-12479]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[12484-12488]:PrimitiveType[12480-12484]"
    }, {
      "left" : "writeDeferredName",
      "right" : "writeDeferredName",
      "info" : "SimpleName[12489-12506]:SimpleName[12485-12502]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[12516-12527]:SimpleType[12512-12523]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12528-12646]:Block[12524-12642]"
    }, {
      "left" : "if (deferredName != null)",
      "right" : "if (deferredName != null)",
      "info" : "IfStatement[12534-12642]:IfStatement[12530-12638]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12560-12642]:Block[12556-12638]"
    }, {
      "left" : "beforeName();",
      "right" : "beforeName();",
      "info" : "ExpressionStatement[12568-12581]:ExpressionStatement[12564-12577]"
    }, {
      "left" : "string(deferredName);",
      "right" : "string(deferredName);",
      "info" : "ExpressionStatement[12588-12609]:ExpressionStatement[12584-12605]"
    }, {
      "left" : "deferredName = null;",
      "right" : "deferredName = null;",
      "info" : "ExpressionStatement[12616-12636]:ExpressionStatement[12612-12632]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12799-12805]:Modifier[12795-12801]"
    }, {
      "left" : "JsonWriter",
      "right" : "JsonWriter",
      "info" : "SimpleType[12806-12816]:SimpleType[12802-12812]"
    }, {
      "left" : "value",
      "right" : "value",
      "info" : "SimpleName[12817-12822]:SimpleName[12813-12818]"
    }, {
      "left" : "String value",
      "right" : "String value",
      "info" : "SingleVariableDeclaration[12823-12835]:SingleVariableDeclaration[12819-12831]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[12844-12855]:SimpleType[12840-12851]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12856-13003]:Block[12852-12994]"
    }, {
      "left" : "if (value == null)",
      "right" : "if (value == null)",
      "info" : "IfStatement[12862-12914]:IfStatement[12858-12910]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12881-12914]:Block[12877-12910]"
    }, {
      "left" : "return nullValue();",
      "right" : "return nullValue();",
      "info" : "ReturnStatement[12889-12908]:ReturnStatement[12885-12904]"
    }, {
      "left" : "writeDeferredName();",
      "right" : "writeDeferredName();",
      "info" : "ExpressionStatement[12919-12939]:ExpressionStatement[12915-12935]"
    }, {
      "left" : "beforeValue(false);",
      "right" : "beforeValue();",
      "info" : "ExpressionStatement[12944-12963]:ExpressionStatement[12940-12954]"
    }, {
      "left" : "string(value);",
      "right" : "string(value);",
      "info" : "ExpressionStatement[12968-12982]:ExpressionStatement[12959-12973]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[12987-12999]:ReturnStatement[12978-12990]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[13211-13217]:Modifier[13202-13208]"
    }, {
      "left" : "JsonWriter",
      "right" : "JsonWriter",
      "info" : "SimpleType[13218-13228]:SimpleType[13209-13219]"
    }, {
      "left" : "jsonValue",
      "right" : "jsonValue",
      "info" : "SimpleName[13229-13238]:SimpleName[13220-13229]"
    }, {
      "left" : "String value",
      "right" : "String value",
      "info" : "SingleVariableDeclaration[13239-13251]:SingleVariableDeclaration[13230-13242]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[13260-13271]:SimpleType[13251-13262]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13272-13423]:Block[13263-13409]"
    }, {
      "left" : "if (value == null)",
      "right" : "if (value == null)",
      "info" : "IfStatement[13278-13330]:IfStatement[13269-13321]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13297-13330]:Block[13288-13321]"
    }, {
      "left" : "return nullValue();",
      "right" : "return nullValue();",
      "info" : "ReturnStatement[13305-13324]:ReturnStatement[13296-13315]"
    }, {
      "left" : "writeDeferredName();",
      "right" : "writeDeferredName();",
      "info" : "ExpressionStatement[13335-13355]:ExpressionStatement[13326-13346]"
    }, {
      "left" : "beforeValue(false);",
      "right" : "beforeValue();",
      "info" : "ExpressionStatement[13360-13379]:ExpressionStatement[13351-13365]"
    }, {
      "left" : "out.append(value);",
      "right" : "out.append(value);",
      "info" : "ExpressionStatement[13384-13402]:ExpressionStatement[13370-13388]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[13407-13419]:ReturnStatement[13393-13405]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[13497-13503]:Modifier[13483-13489]"
    }, {
      "left" : "JsonWriter",
      "right" : "JsonWriter",
      "info" : "SimpleType[13504-13514]:SimpleType[13490-13500]"
    }, {
      "left" : "nullValue",
      "right" : "nullValue",
      "info" : "SimpleName[13515-13524]:SimpleName[13501-13510]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[13534-13545]:SimpleType[13520-13531]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13546-13814]:Block[13532-13795]"
    }, {
      "left" : "if (deferredName != null)",
      "right" : "if (deferredName != null)",
      "info" : "IfStatement[13552-13746]:IfStatement[13538-13732]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13578-13746]:Block[13564-13732]"
    }, {
      "left" : "if (serializeNulls)",
      "right" : "if (serializeNulls)",
      "info" : "IfStatement[13586-13740]:IfStatement[13572-13726]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13606-13644]:Block[13592-13630]"
    }, {
      "left" : "writeDeferredName();",
      "right" : "writeDeferredName();",
      "info" : "ExpressionStatement[13616-13636]:ExpressionStatement[13602-13622]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13650-13740]:Block[13636-13726]"
    }, {
      "left" : "deferredName = null;",
      "right" : "deferredName = null;",
      "info" : "ExpressionStatement[13660-13680]:ExpressionStatement[13646-13666]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[13689-13701]:ReturnStatement[13675-13687]"
    }, {
      "left" : "beforeValue(false);",
      "right" : "beforeValue();",
      "info" : "ExpressionStatement[13751-13770]:ExpressionStatement[13737-13751]"
    }, {
      "left" : "out.write(\"null\");",
      "right" : "out.write(\"null\");",
      "info" : "ExpressionStatement[13775-13793]:ExpressionStatement[13756-13774]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[13798-13810]:ReturnStatement[13779-13791]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[13889-13895]:Modifier[13870-13876]"
    }, {
      "left" : "JsonWriter",
      "right" : "JsonWriter",
      "info" : "SimpleType[13896-13906]:SimpleType[13877-13887]"
    }, {
      "left" : "value",
      "right" : "value",
      "info" : "SimpleName[13907-13912]:SimpleName[13888-13893]"
    }, {
      "left" : "boolean value",
      "right" : "boolean value",
      "info" : "SingleVariableDeclaration[13913-13926]:SingleVariableDeclaration[13894-13907]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[13935-13946]:SimpleType[13916-13927]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13947-14059]:Block[13928-14035]"
    }, {
      "left" : "writeDeferredName();",
      "right" : "writeDeferredName();",
      "info" : "ExpressionStatement[13953-13973]:ExpressionStatement[13934-13954]"
    }, {
      "left" : "beforeValue(false);",
      "right" : "beforeValue();",
      "info" : "ExpressionStatement[13978-13997]:ExpressionStatement[13959-13973]"
    }, {
      "left" : "out.write(value ? \"true\" : \"false\");",
      "right" : "out.write(value ? \"true\" : \"false\");",
      "info" : "ExpressionStatement[14002-14038]:ExpressionStatement[13978-14014]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[14043-14055]:ReturnStatement[14019-14031]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[14259-14265]:Modifier[14235-14241]"
    }, {
      "left" : "JsonWriter",
      "right" : "JsonWriter",
      "info" : "SimpleType[14266-14276]:SimpleType[14242-14252]"
    }, {
      "left" : "value",
      "right" : "value",
      "info" : "SimpleName[14277-14282]:SimpleName[14253-14258]"
    }, {
      "left" : "double value",
      "right" : "double value",
      "info" : "SingleVariableDeclaration[14283-14295]:SingleVariableDeclaration[14259-14271]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[14304-14315]:SimpleType[14280-14291]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14316-14585]:Block[14292-14556]"
    }, {
      "left" : "if (Double.isNaN(value) || Double.isInfinite(value))",
      "right" : "if (Double.isNaN(value) || Double.isInfinite(value))",
      "info" : "IfStatement[14322-14475]:IfStatement[14298-14451]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14375-14475]:Block[14351-14451]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);",
      "right" : "throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);",
      "info" : "ThrowStatement[14383-14469]:ThrowStatement[14359-14445]"
    }, {
      "left" : "writeDeferredName();",
      "right" : "writeDeferredName();",
      "info" : "ExpressionStatement[14480-14500]:ExpressionStatement[14456-14476]"
    }, {
      "left" : "beforeValue(false);",
      "right" : "beforeValue();",
      "info" : "ExpressionStatement[14505-14524]:ExpressionStatement[14481-14495]"
    }, {
      "left" : "out.append(Double.toString(value));",
      "right" : "out.append(Double.toString(value));",
      "info" : "ExpressionStatement[14529-14564]:ExpressionStatement[14500-14535]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[14569-14581]:ReturnStatement[14540-14552]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[14660-14666]:Modifier[14631-14637]"
    }, {
      "left" : "JsonWriter",
      "right" : "JsonWriter",
      "info" : "SimpleType[14667-14677]:SimpleType[14638-14648]"
    }, {
      "left" : "value",
      "right" : "value",
      "info" : "SimpleName[14678-14683]:SimpleName[14649-14654]"
    }, {
      "left" : "long value",
      "right" : "long value",
      "info" : "SingleVariableDeclaration[14684-14694]:SingleVariableDeclaration[14655-14665]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[14703-14714]:SimpleType[14674-14685]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14715-14823]:Block[14686-14789]"
    }, {
      "left" : "writeDeferredName();",
      "right" : "writeDeferredName();",
      "info" : "ExpressionStatement[14721-14741]:ExpressionStatement[14692-14712]"
    }, {
      "left" : "beforeValue(false);",
      "right" : "beforeValue();",
      "info" : "ExpressionStatement[14746-14765]:ExpressionStatement[14717-14731]"
    }, {
      "left" : "out.write(Long.toString(value));",
      "right" : "out.write(Long.toString(value));",
      "info" : "ExpressionStatement[14770-14802]:ExpressionStatement[14736-14768]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[14807-14819]:ReturnStatement[14773-14785]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[15023-15029]:Modifier[14989-14995]"
    }, {
      "left" : "JsonWriter",
      "right" : "JsonWriter",
      "info" : "SimpleType[15030-15040]:SimpleType[14996-15006]"
    }, {
      "left" : "value",
      "right" : "value",
      "info" : "SimpleName[15041-15046]:SimpleName[15007-15012]"
    }, {
      "left" : "Number value",
      "right" : "Number value",
      "info" : "SingleVariableDeclaration[15047-15059]:SingleVariableDeclaration[15013-15025]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[15068-15079]:SimpleType[15034-15045]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15080-15483]:Block[15046-15444]"
    }, {
      "left" : "if (value == null)",
      "right" : "if (value == null)",
      "info" : "IfStatement[15086-15138]:IfStatement[15052-15104]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15105-15138]:Block[15071-15104]"
    }, {
      "left" : "return nullValue();",
      "right" : "return nullValue();",
      "info" : "ReturnStatement[15113-15132]:ReturnStatement[15079-15098]"
    }, {
      "left" : "writeDeferredName();",
      "right" : "writeDeferredName();",
      "info" : "ExpressionStatement[15144-15164]:ExpressionStatement[15110-15130]"
    }, {
      "left" : "String string = value.toString();",
      "right" : "String string = value.toString();",
      "info" : "VariableDeclarationStatement[15169-15202]:VariableDeclarationStatement[15135-15168]"
    }, {
      "left" : "if (!lenient\n        && (string.equals(\"-Infinity\") || string.equals(\"Infinity\") || string.equals(\"NaN\")))",
      "right" : "if (!lenient\n        && (string.equals(\"-Infinity\") || string.equals(\"Infinity\") || string.equals(\"NaN\")))",
      "info" : "IfStatement[15207-15414]:IfStatement[15173-15380]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15314-15414]:Block[15280-15380]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);",
      "right" : "throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);",
      "info" : "ThrowStatement[15322-15408]:ThrowStatement[15288-15374]"
    }, {
      "left" : "beforeValue(false);",
      "right" : "beforeValue();",
      "info" : "ExpressionStatement[15419-15438]:ExpressionStatement[15385-15399]"
    }, {
      "left" : "out.append(string);",
      "right" : "out.append(string);",
      "info" : "ExpressionStatement[15443-15462]:ExpressionStatement[15404-15423]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[15467-15479]:ReturnStatement[15428-15440]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[15604-15610]:Modifier[15565-15571]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[15611-15615]:PrimitiveType[15572-15576]"
    }, {
      "left" : "flush",
      "right" : "flush",
      "info" : "SimpleName[15616-15621]:SimpleName[15577-15582]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[15631-15642]:SimpleType[15592-15603]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15643-15761]:Block[15604-15722]"
    }, {
      "left" : "if (stackSize == 0)",
      "right" : "if (stackSize == 0)",
      "info" : "IfStatement[15649-15740]:IfStatement[15610-15701]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15669-15740]:Block[15630-15701]"
    }, {
      "left" : "throw new IllegalStateException(\"JsonWriter is closed.\");",
      "right" : "throw new IllegalStateException(\"JsonWriter is closed.\");",
      "info" : "ThrowStatement[15677-15734]:ThrowStatement[15638-15695]"
    }, {
      "left" : "out.flush();",
      "right" : "out.flush();",
      "info" : "ExpressionStatement[15745-15757]:ExpressionStatement[15706-15718]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[15914-15920]:Modifier[15875-15881]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[15921-15925]:PrimitiveType[15882-15886]"
    }, {
      "left" : "close",
      "right" : "close",
      "info" : "SimpleName[15926-15931]:SimpleName[15887-15892]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[15941-15952]:SimpleType[15902-15913]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15953-16152]:Block[15914-16113]"
    }, {
      "left" : "out.close();",
      "right" : "out.close();",
      "info" : "ExpressionStatement[15959-15971]:ExpressionStatement[15920-15932]"
    }, {
      "left" : "int size = stackSize;",
      "right" : "int size = stackSize;",
      "info" : "VariableDeclarationStatement[15977-15998]:VariableDeclarationStatement[15938-15959]"
    }, {
      "left" : "if (size > 1 || size == 1 && stack[size - 1] != NONEMPTY_DOCUMENT)",
      "right" : "if (size > 1 || size == 1 && stack[size - 1] != NONEMPTY_DOCUMENT)",
      "info" : "IfStatement[16003-16129]:IfStatement[15964-16090]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16070-16129]:Block[16031-16090]"
    }, {
      "left" : "throw new IOException(\"Incomplete document\");",
      "right" : "throw new IOException(\"Incomplete document\");",
      "info" : "ThrowStatement[16078-16123]:ThrowStatement[16039-16084]"
    }, {
      "left" : "stackSize = 0;",
      "right" : "stackSize = 0;",
      "info" : "ExpressionStatement[16134-16148]:ExpressionStatement[16095-16109]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[16156-16163]:Modifier[16117-16124]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[16164-16168]:PrimitiveType[16125-16129]"
    }, {
      "left" : "string",
      "right" : "string",
      "info" : "SimpleName[16169-16175]:SimpleName[16130-16136]"
    }, {
      "left" : "String value",
      "right" : "String value",
      "info" : "SingleVariableDeclaration[16176-16188]:SingleVariableDeclaration[16137-16149]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[16197-16208]:SimpleType[16158-16169]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16209-16996]:Block[16170-16957]"
    }, {
      "left" : "String[] replacements = htmlSafe ? HTML_SAFE_REPLACEMENT_CHARS : REPLACEMENT_CHARS;",
      "right" : "String[] replacements = htmlSafe ? HTML_SAFE_REPLACEMENT_CHARS : REPLACEMENT_CHARS;",
      "info" : "VariableDeclarationStatement[16215-16298]:VariableDeclarationStatement[16176-16259]"
    }, {
      "left" : "out.write(\"\\\"\");",
      "right" : "out.write(\"\\\"\");",
      "info" : "ExpressionStatement[16303-16319]:ExpressionStatement[16264-16280]"
    }, {
      "left" : "int last = 0;",
      "right" : "int last = 0;",
      "info" : "VariableDeclarationStatement[16324-16337]:VariableDeclarationStatement[16285-16298]"
    }, {
      "left" : "int length = value.length();",
      "right" : "int length = value.length();",
      "info" : "VariableDeclarationStatement[16342-16370]:VariableDeclarationStatement[16303-16331]"
    }, {
      "left" : "for (int i = 0; i < length; i++)",
      "right" : "for (int i = 0; i < length; i++)",
      "info" : "ForStatement[16375-16895]:ForStatement[16336-16856]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16408-16895]:Block[16369-16856]"
    }, {
      "left" : "char c = value.charAt(i);",
      "right" : "char c = value.charAt(i);",
      "info" : "VariableDeclarationStatement[16416-16441]:VariableDeclarationStatement[16377-16402]"
    }, {
      "left" : "String replacement;",
      "right" : "String replacement;",
      "info" : "VariableDeclarationStatement[16448-16467]:VariableDeclarationStatement[16409-16428]"
    }, {
      "left" : "if (c < 128)",
      "right" : "if (c < 128)",
      "info" : "IfStatement[16474-16767]:IfStatement[16435-16728]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16487-16600]:Block[16448-16561]"
    }, {
      "left" : "replacement = replacements[c];",
      "right" : "replacement = replacements[c];",
      "info" : "ExpressionStatement[16497-16527]:ExpressionStatement[16458-16488]"
    }, {
      "left" : "if (replacement == null)",
      "right" : "if (replacement == null)",
      "info" : "IfStatement[16536-16592]:IfStatement[16497-16553]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16561-16592]:Block[16522-16553]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[16573-16582]:ContinueStatement[16534-16543]"
    }, {
      "left" : "if (c == '\\u2028')",
      "right" : "if (c == '\\u2028')",
      "info" : "IfStatement[16606-16767]:IfStatement[16567-16728]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16625-16667]:Block[16586-16628]"
    }, {
      "left" : "replacement = \"\\\\u2028\";",
      "right" : "replacement = \"\\\\u2028\";",
      "info" : "ExpressionStatement[16635-16659]:ExpressionStatement[16596-16620]"
    }, {
      "left" : "if (c == '\\u2029')",
      "right" : "if (c == '\\u2029')",
      "info" : "IfStatement[16673-16767]:IfStatement[16634-16728]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16692-16734]:Block[16653-16695]"
    }, {
      "left" : "replacement = \"\\\\u2029\";",
      "right" : "replacement = \"\\\\u2029\";",
      "info" : "ExpressionStatement[16702-16726]:ExpressionStatement[16663-16687]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16740-16767]:Block[16701-16728]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[16750-16759]:ContinueStatement[16711-16720]"
    }, {
      "left" : "if (last < i)",
      "right" : "if (last < i)",
      "info" : "IfStatement[16774-16839]:IfStatement[16735-16800]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16788-16839]:Block[16749-16800]"
    }, {
      "left" : "out.write(value, last, i - last);",
      "right" : "out.write(value, last, i - last);",
      "info" : "ExpressionStatement[16798-16831]:ExpressionStatement[16759-16792]"
    }, {
      "left" : "out.write(replacement);",
      "right" : "out.write(replacement);",
      "info" : "ExpressionStatement[16846-16869]:ExpressionStatement[16807-16830]"
    }, {
      "left" : "last = i + 1;",
      "right" : "last = i + 1;",
      "info" : "ExpressionStatement[16876-16889]:ExpressionStatement[16837-16850]"
    }, {
      "left" : "if (last < length)",
      "right" : "if (last < length)",
      "info" : "IfStatement[16900-16971]:IfStatement[16861-16932]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16919-16971]:Block[16880-16932]"
    }, {
      "left" : "out.write(value, last, length - last);",
      "right" : "out.write(value, last, length - last);",
      "info" : "ExpressionStatement[16927-16965]:ExpressionStatement[16888-16926]"
    }, {
      "left" : "out.write(\"\\\"\");",
      "right" : "out.write(\"\\\"\");",
      "info" : "ExpressionStatement[16976-16992]:ExpressionStatement[16937-16953]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[17000-17007]:Modifier[16961-16968]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[17008-17012]:PrimitiveType[16969-16973]"
    }, {
      "left" : "newline",
      "right" : "newline",
      "info" : "SimpleName[17013-17020]:SimpleName[16974-16981]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[17030-17041]:SimpleType[16991-17002]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17042-17201]:Block[17003-17162]"
    }, {
      "left" : "if (indent == null)",
      "right" : "if (indent == null)",
      "info" : "IfStatement[17048-17089]:IfStatement[17009-17050]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17068-17089]:Block[17029-17050]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[17076-17083]:ReturnStatement[17037-17044]"
    }, {
      "left" : "out.write(\"\\n\");",
      "right" : "out.write(\"\\n\");",
      "info" : "ExpressionStatement[17095-17111]:ExpressionStatement[17056-17072]"
    }, {
      "left" : "for (int i = 1, size = stackSize; i < size; i++)",
      "right" : "for (int i = 1, size = stackSize; i < size; i++)",
      "info" : "ForStatement[17116-17197]:ForStatement[17077-17158]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17165-17197]:Block[17126-17158]"
    }, {
      "left" : "out.write(indent);",
      "right" : "out.write(indent);",
      "info" : "ExpressionStatement[17173-17191]:ExpressionStatement[17134-17152]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[17341-17348]:Modifier[17302-17309]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[17349-17353]:PrimitiveType[17310-17314]"
    }, {
      "left" : "beforeName",
      "right" : "beforeName",
      "info" : "SimpleName[17354-17364]:SimpleName[17315-17325]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[17374-17385]:SimpleType[17335-17346]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17386-17670]:Block[17347-17631]"
    }, {
      "left" : "int context = peek();",
      "right" : "int context = peek();",
      "info" : "VariableDeclarationStatement[17392-17413]:VariableDeclarationStatement[17353-17374]"
    }, {
      "left" : "if (context == NONEMPTY_OBJECT)",
      "right" : "if (context == NONEMPTY_OBJECT)",
      "info" : "IfStatement[17418-17620]:IfStatement[17379-17581]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17450-17498]:Block[17411-17459]"
    }, {
      "left" : "out.write(',');",
      "right" : "out.write(',');",
      "info" : "ExpressionStatement[17477-17492]:ExpressionStatement[17438-17453]"
    }, {
      "left" : "if (context != EMPTY_OBJECT)",
      "right" : "if (context != EMPTY_OBJECT)",
      "info" : "IfStatement[17504-17620]:IfStatement[17465-17581]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17533-17620]:Block[17494-17581]"
    }, {
      "left" : "throw new IllegalStateException(\"Nesting problem.\");",
      "right" : "throw new IllegalStateException(\"Nesting problem.\");",
      "info" : "ThrowStatement[17562-17614]:ThrowStatement[17523-17575]"
    }, {
      "left" : "newline();",
      "right" : "newline();",
      "info" : "ExpressionStatement[17625-17635]:ExpressionStatement[17586-17596]"
    }, {
      "left" : "replaceTop(DANGLING_NAME);",
      "right" : "replaceTop(DANGLING_NAME);",
      "info" : "ExpressionStatement[17640-17666]:ExpressionStatement[17601-17627]"
    }, {
      "left" : "@SuppressWarnings(\"fallthrough\")",
      "right" : "@SuppressWarnings(\"fallthrough\")",
      "info" : "SingleMemberAnnotation[17883-17915]:SingleMemberAnnotation[17844-17876]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[17918-17925]:Modifier[17879-17886]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[17926-17930]:PrimitiveType[17887-17891]"
    }, {
      "left" : "beforeValue",
      "right" : "beforeValue",
      "info" : "SimpleName[17931-17942]:SimpleName[17892-17903]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[17964-17975]:SimpleType[17913-17924]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17976-18820]:Block[17925-18629]"
    }, {
      "left" : "switch (peek()) {\n    case NONEMPTY_DOCUMENT:\n      if (!lenient) {\n        throw new IllegalStateException(\n            \"JSON must have only one top-level value.\");\n      }\n      // fall-through\n    case EMPTY_DOCUMENT: // first in document\n      if (!lenient && !root) {\n        throw new IllegalStateException(\n            \"JSON must start with an array or an object.\");\n      }\n      replaceTop(NONEMPTY_DOCUMENT);\n      break;\n\n    case EMPTY_ARRAY: // first in array\n      replaceTop(NONEMPTY_ARRAY);\n      newline();\n      break;\n\n    case NONEMPTY_ARRAY: // another in array\n      out.append(',');\n      newline();\n      break;\n\n    case DANGLING_NAME: // value for name\n      out.append(separator);\n      replaceTop(NONEMPTY_OBJECT);\n      break;\n\n    default:\n      throw new IllegalStateException(\"Nesting problem.\");\n    }",
      "right" : "switch (peek()) {\n    case NONEMPTY_DOCUMENT:\n      if (!lenient) {\n        throw new IllegalStateException(\n            \"JSON must have only one top-level value.\");\n      }\n      // fall-through\n    case EMPTY_DOCUMENT: // first in document\n      replaceTop(NONEMPTY_DOCUMENT);\n      break;\n\n    case EMPTY_ARRAY: // first in array\n      replaceTop(NONEMPTY_ARRAY);\n      newline();\n      break;\n\n    case NONEMPTY_ARRAY: // another in array\n      out.append(',');\n      newline();\n      break;\n\n    case DANGLING_NAME: // value for name\n      out.append(separator);\n      replaceTop(NONEMPTY_OBJECT);\n      break;\n\n    default:\n      throw new IllegalStateException(\"Nesting problem.\");\n    }",
      "info" : "SwitchStatement[17982-18816]:SwitchStatement[17931-18625]"
    }, {
      "left" : "case NONEMPTY_DOCUMENT:",
      "right" : "case NONEMPTY_DOCUMENT:",
      "info" : "SwitchCase[18004-18027]:SwitchCase[17953-17976]"
    }, {
      "left" : "if (!lenient)",
      "right" : "if (!lenient)",
      "info" : "IfStatement[18034-18155]:IfStatement[17983-18104]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18048-18155]:Block[17997-18104]"
    }, {
      "left" : "throw new IllegalStateException(\n            \"JSON must have only one top-level value.\");",
      "right" : "throw new IllegalStateException(\n            \"JSON must have only one top-level value.\");",
      "info" : "ThrowStatement[18058-18147]:ThrowStatement[18007-18096]"
    }, {
      "left" : "case EMPTY_DOCUMENT:",
      "right" : "case EMPTY_DOCUMENT:",
      "info" : "SwitchCase[18182-18202]:SwitchCase[18131-18151]"
    }, {
      "left" : "replaceTop(NONEMPTY_DOCUMENT);",
      "right" : "replaceTop(NONEMPTY_DOCUMENT);",
      "info" : "ExpressionStatement[18370-18400]:ExpressionStatement[18179-18209]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[18407-18413]:BreakStatement[18216-18222]"
    }, {
      "left" : "case EMPTY_ARRAY:",
      "right" : "case EMPTY_ARRAY:",
      "info" : "SwitchCase[18419-18436]:SwitchCase[18228-18245]"
    }, {
      "left" : "replaceTop(NONEMPTY_ARRAY);",
      "right" : "replaceTop(NONEMPTY_ARRAY);",
      "info" : "ExpressionStatement[18461-18488]:ExpressionStatement[18270-18297]"
    }, {
      "left" : "newline();",
      "right" : "newline();",
      "info" : "ExpressionStatement[18495-18505]:ExpressionStatement[18304-18314]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[18512-18518]:BreakStatement[18321-18327]"
    }, {
      "left" : "case NONEMPTY_ARRAY:",
      "right" : "case NONEMPTY_ARRAY:",
      "info" : "SwitchCase[18524-18544]:SwitchCase[18333-18353]"
    }, {
      "left" : "out.append(',');",
      "right" : "out.append(',');",
      "info" : "ExpressionStatement[18571-18587]:ExpressionStatement[18380-18396]"
    }, {
      "left" : "newline();",
      "right" : "newline();",
      "info" : "ExpressionStatement[18594-18604]:ExpressionStatement[18403-18413]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[18611-18617]:BreakStatement[18420-18426]"
    }, {
      "left" : "case DANGLING_NAME:",
      "right" : "case DANGLING_NAME:",
      "info" : "SwitchCase[18623-18642]:SwitchCase[18432-18451]"
    }, {
      "left" : "out.append(separator);",
      "right" : "out.append(separator);",
      "info" : "ExpressionStatement[18667-18689]:ExpressionStatement[18476-18498]"
    }, {
      "left" : "replaceTop(NONEMPTY_OBJECT);",
      "right" : "replaceTop(NONEMPTY_OBJECT);",
      "info" : "ExpressionStatement[18696-18724]:ExpressionStatement[18505-18533]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[18731-18737]:BreakStatement[18540-18546]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[18743-18751]:SwitchCase[18552-18560]"
    }, {
      "left" : "throw new IllegalStateException(\"Nesting problem.\");",
      "right" : "throw new IllegalStateException(\"Nesting problem.\");",
      "info" : "ThrowStatement[18758-18810]:ThrowStatement[18567-18619]"
    } ]
  },
  "interFileMappings" : { }
}