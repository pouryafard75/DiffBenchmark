{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "TarArchiveInputStream",
      "right" : "TarArchiveInputStream",
      "info" : "TypeDeclaration[1394-18572]:TypeDeclaration[1394-18784]"
    }, {
      "left" : "private static final int SMALL_BUFFER_SIZE = 256;",
      "right" : "private static final int SMALL_BUFFER_SIZE = 256;",
      "info" : "FieldDeclaration[1700-1749]:FieldDeclaration[1700-1749]"
    }, {
      "left" : "private static final int BUFFER_SIZE = 8 * 1024;",
      "right" : "private static final int BUFFER_SIZE = 8 * 1024;",
      "info" : "FieldDeclaration[1754-1802]:FieldDeclaration[1754-1802]"
    }, {
      "left" : "private boolean hasHitEOF;",
      "right" : "private boolean hasHitEOF;",
      "info" : "FieldDeclaration[1808-1834]:FieldDeclaration[1808-1834]"
    }, {
      "left" : "private long entrySize;",
      "right" : "private long entrySize;",
      "info" : "FieldDeclaration[1839-1862]:FieldDeclaration[1839-1862]"
    }, {
      "left" : "private long entryOffset;",
      "right" : "private long entryOffset;",
      "info" : "FieldDeclaration[1867-1892]:FieldDeclaration[1867-1892]"
    }, {
      "left" : "private byte[] readBuf;",
      "right" : "private byte[] readBuf;",
      "info" : "FieldDeclaration[1897-1920]:FieldDeclaration[1897-1920]"
    }, {
      "left" : "protected final TarBuffer buffer;",
      "right" : "protected final TarBuffer buffer;",
      "info" : "FieldDeclaration[1925-1958]:FieldDeclaration[1925-1958]"
    }, {
      "left" : "private TarArchiveEntry currEntry;",
      "right" : "private TarArchiveEntry currEntry;",
      "info" : "FieldDeclaration[1963-1997]:FieldDeclaration[1963-1997]"
    }, {
      "left" : "public TarArchiveInputStream(InputStream is)",
      "right" : "public TarArchiveInputStream(InputStream is)",
      "info" : "MethodDeclaration[2003-2223]:MethodDeclaration[2003-2223]"
    }, {
      "left" : "public TarArchiveInputStream(InputStream is, int blockSize)",
      "right" : "public TarArchiveInputStream(InputStream is, int blockSize)",
      "info" : "MethodDeclaration[2229-2494]:MethodDeclaration[2229-2494]"
    }, {
      "left" : "public TarArchiveInputStream(InputStream is, int blockSize, int recordSize)",
      "right" : "public TarArchiveInputStream(InputStream is, int blockSize, int recordSize)",
      "info" : "MethodDeclaration[2500-2898]:MethodDeclaration[2500-2898]"
    }, {
      "left" : "public void close() throws IOException",
      "right" : "public void close() throws IOException",
      "info" : "MethodDeclaration[2904-3105]:MethodDeclaration[2904-3105]"
    }, {
      "left" : "public int getRecordSize()",
      "right" : "public int getRecordSize()",
      "info" : "MethodDeclaration[3111-3315]:MethodDeclaration[3111-3315]"
    }, {
      "left" : "public int available() throws IOException",
      "right" : "public int available() throws IOException",
      "info" : "MethodDeclaration[3321-4131]:MethodDeclaration[3321-4131]"
    }, {
      "left" : "public long skip(long numToSkip) throws IOException",
      "right" : "public long skip(long numToSkip) throws IOException",
      "info" : "MethodDeclaration[4137-5133]:MethodDeclaration[4137-5133]"
    }, {
      "left" : "public synchronized void reset()",
      "right" : "public synchronized void reset()",
      "info" : "MethodDeclaration[5139-5273]:MethodDeclaration[5139-5273]"
    }, {
      "left" : "public TarArchiveEntry getNextTarEntry() throws IOException",
      "right" : "public TarArchiveEntry getNextTarEntry() throws IOException",
      "info" : "MethodDeclaration[5279-7982]:MethodDeclaration[5279-8194]"
    }, {
      "left" : "private byte[] getRecord() throws IOException",
      "right" : "private byte[] getRecord() throws IOException",
      "info" : "MethodDeclaration[7988-8820]:MethodDeclaration[8200-9032]"
    }, {
      "left" : "private void paxHeaders() throws IOExceptio",
      "right" : "private void paxHeaders() throws IOExceptio",
      "info" : "MethodDeclaration[8826-9412]:MethodDeclaration[9038-9624]"
    }, {
      "left" : "public void close()",
      "right" : "public void close()",
      "info" : "MethodDeclaration[8947-9088]:MethodDeclaration[9159-9300]"
    }, {
      "left" : "Map<String, String> parsePaxHeaders(Reader br) throws IOException",
      "right" : "Map<String, String> parsePaxHeaders(Reader br) throws IOException",
      "info" : "MethodDeclaration[9418-11349]:MethodDeclaration[9630-11561]"
    }, {
      "left" : "private void applyPaxHeadersToCurrentEntry(Map<String, String> headers)",
      "right" : "private void applyPaxHeadersToCurrentEntry(Map<String, String> headers)",
      "info" : "MethodDeclaration[11355-12528]:MethodDeclaration[11567-12740]"
    }, {
      "left" : "private void readGNUSparse() throws IOException",
      "right" : "private void readGNUSparse() throws IOException",
      "info" : "MethodDeclaration[12534-13519]:MethodDeclaration[12746-13731]"
    }, {
      "left" : "public ArchiveEntry getNextEntry() throws IOException",
      "right" : "public ArchiveEntry getNextEntry() throws IOException",
      "info" : "MethodDeclaration[13525-13634]:MethodDeclaration[13737-13846]"
    }, {
      "left" : "public int read(byte[] buf, int offset, int numToRead) throws IOException",
      "right" : "public int read(byte[] buf, int offset, int numToRead) throws IOException",
      "info" : "MethodDeclaration[13640-15989]:MethodDeclaration[13852-16201]"
    }, {
      "left" : "public boolean canReadEntryData(ArchiveEntry ae)",
      "right" : "public boolean canReadEntryData(ArchiveEntry ae)",
      "info" : "MethodDeclaration[15995-16387]:MethodDeclaration[16207-16599]"
    }, {
      "left" : "protected final TarArchiveEntry getCurrentEntry()",
      "right" : "protected final TarArchiveEntry getCurrentEntry()",
      "info" : "MethodDeclaration[16393-16476]:MethodDeclaration[16605-16688]"
    }, {
      "left" : "protected final void setCurrentEntry(TarArchiveEntry e)",
      "right" : "protected final void setCurrentEntry(TarArchiveEntry e)",
      "info" : "MethodDeclaration[16482-16568]:MethodDeclaration[16694-16780]"
    }, {
      "left" : "protected final boolean isAtEOF()",
      "right" : "protected final boolean isAtEOF()",
      "info" : "MethodDeclaration[16574-16641]:MethodDeclaration[16786-16853]"
    }, {
      "left" : "protected final void setAtEOF(boolean b)",
      "right" : "protected final void setAtEOF(boolean b)",
      "info" : "MethodDeclaration[16647-16718]:MethodDeclaration[16859-16930]"
    }, {
      "left" : "public static boolean matches(byte[] signature, int length)",
      "right" : "public static boolean matches(byte[] signature, int length)",
      "info" : "MethodDeclaration[16724-18569]:MethodDeclaration[16936-18781]"
    } ],
    "mappings" : [
 {
      "left" : "ArchiveInputStream",
      "right" : "ArchiveInputStream",
      "info" : "SimpleType[1675-1693]:SimpleType[1675-1693]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2099-2105]:Modifier[2099-2105]"
    }, {
      "left" : "TarArchiveInputStream",
      "right" : "TarArchiveInputStream",
      "info" : "SimpleName[2106-2127]:SimpleName[2106-2127]"
    }, {
      "left" : "InputStream is",
      "right" : "InputStream is",
      "info" : "SingleVariableDeclaration[2128-2142]:SingleVariableDeclaration[2128-2142]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2144-2223]:Block[2144-2223]"
    }, {
      "left" : "this(is, TarBuffer.DEFAULT_BLKSIZE, TarBuffer.DEFAULT_RCDSIZE);",
      "right" : "this(is, TarBuffer.DEFAULT_BLKSIZE, TarBuffer.DEFAULT_RCDSIZE);",
      "info" : "ConstructorInvocation[2154-2217]:ConstructorInvocation[2154-2217]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2371-2377]:Modifier[2371-2377]"
    }, {
      "left" : "TarArchiveInputStream",
      "right" : "TarArchiveInputStream",
      "info" : "SimpleName[2378-2399]:SimpleName[2378-2399]"
    }, {
      "left" : "InputStream is",
      "right" : "InputStream is",
      "info" : "SingleVariableDeclaration[2400-2414]:SingleVariableDeclaration[2400-2414]"
    }, {
      "left" : "int blockSize",
      "right" : "int blockSize",
      "info" : "SingleVariableDeclaration[2416-2429]:SingleVariableDeclaration[2416-2429]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2431-2494]:Block[2431-2494]"
    }, {
      "left" : "this(is, blockSize, TarBuffer.DEFAULT_RCDSIZE);",
      "right" : "this(is, blockSize, TarBuffer.DEFAULT_RCDSIZE);",
      "info" : "ConstructorInvocation[2441-2488]:ConstructorInvocation[2441-2488]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2690-2696]:Modifier[2690-2696]"
    }, {
      "left" : "TarArchiveInputStream",
      "right" : "TarArchiveInputStream",
      "info" : "SimpleName[2697-2718]:SimpleName[2697-2718]"
    }, {
      "left" : "InputStream is",
      "right" : "InputStream is",
      "info" : "SingleVariableDeclaration[2719-2733]:SingleVariableDeclaration[2719-2733]"
    }, {
      "left" : "int blockSize",
      "right" : "int blockSize",
      "info" : "SingleVariableDeclaration[2735-2748]:SingleVariableDeclaration[2735-2748]"
    }, {
      "left" : "int recordSize",
      "right" : "int recordSize",
      "info" : "SingleVariableDeclaration[2750-2764]:SingleVariableDeclaration[2750-2764]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2766-2898]:Block[2766-2898]"
    }, {
      "left" : "this.buffer = new TarBuffer(is, blockSize, recordSize);",
      "right" : "this.buffer = new TarBuffer(is, blockSize, recordSize);",
      "info" : "ExpressionStatement[2776-2831]:ExpressionStatement[2776-2831]"
    }, {
      "left" : "this.readBuf = null;",
      "right" : "this.readBuf = null;",
      "info" : "ExpressionStatement[2840-2860]:ExpressionStatement[2840-2860]"
    }, {
      "left" : "this.hasHitEOF = false;",
      "right" : "this.hasHitEOF = false;",
      "info" : "ExpressionStatement[2869-2892]:ExpressionStatement[2869-2892]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[3021-3030]:MarkerAnnotation[3021-3030]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3035-3041]:Modifier[3035-3041]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[3042-3046]:PrimitiveType[3042-3046]"
    }, {
      "left" : "close",
      "right" : "close",
      "info" : "SimpleName[3047-3052]:SimpleName[3047-3052]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[3062-3073]:SimpleType[3062-3073]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3074-3105]:Block[3074-3105]"
    }, {
      "left" : "buffer.close();",
      "right" : "buffer.close();",
      "info" : "ExpressionStatement[3084-3099]:ExpressionStatement[3084-3099]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3242-3248]:Modifier[3242-3248]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[3249-3252]:PrimitiveType[3249-3252]"
    }, {
      "left" : "getRecordSize",
      "right" : "getRecordSize",
      "info" : "SimpleName[3253-3266]:SimpleName[3253-3266]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3269-3315]:Block[3269-3315]"
    }, {
      "left" : "return buffer.getRecordSize();",
      "right" : "return buffer.getRecordSize();",
      "info" : "ReturnStatement[3279-3309]:ReturnStatement[3279-3309]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[3913-3922]:MarkerAnnotation[3913-3922]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3927-3933]:Modifier[3927-3933]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[3934-3937]:PrimitiveType[3934-3937]"
    }, {
      "left" : "available",
      "right" : "available",
      "info" : "SimpleName[3938-3947]:SimpleName[3938-3947]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[3957-3968]:SimpleType[3957-3968]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3969-4131]:Block[3969-4131]"
    }, {
      "left" : "if (entrySize - entryOffset > Integer.MAX_VALUE)",
      "right" : "if (entrySize - entryOffset > Integer.MAX_VALUE)",
      "info" : "IfStatement[3979-4077]:IfStatement[3979-4077]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4028-4077]:Block[4028-4077]"
    }, {
      "left" : "return Integer.MAX_VALUE;",
      "right" : "return Integer.MAX_VALUE;",
      "info" : "ReturnStatement[4042-4067]:ReturnStatement[4042-4067]"
    }, {
      "left" : "return (int) (entrySize - entryOffset);",
      "right" : "return (int) (entrySize - entryOffset);",
      "info" : "ReturnStatement[4086-4125]:ReturnStatement[4086-4125]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[4524-4533]:MarkerAnnotation[4524-4533]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4538-4544]:Modifier[4538-4544]"
    }, {
      "left" : "long",
      "right" : "long",
      "info" : "PrimitiveType[4545-4549]:PrimitiveType[4545-4549]"
    }, {
      "left" : "skip",
      "right" : "skip",
      "info" : "SimpleName[4550-4554]:SimpleName[4550-4554]"
    }, {
      "left" : "long numToSkip",
      "right" : "long numToSkip",
      "info" : "SingleVariableDeclaration[4555-4569]:SingleVariableDeclaration[4555-4569]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[4578-4589]:SimpleType[4578-4589]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4590-5133]:Block[4590-5133]"
    }, {
      "left" : "byte[] skipBuf = new byte[BUFFER_SIZE];",
      "right" : "byte[] skipBuf = new byte[BUFFER_SIZE];",
      "info" : "VariableDeclarationStatement[4750-4789]:VariableDeclarationStatement[4750-4789]"
    }, {
      "left" : "long skip = numToSkip;",
      "right" : "long skip = numToSkip;",
      "info" : "VariableDeclarationStatement[4798-4820]:VariableDeclarationStatement[4798-4820]"
    }, {
      "left" : "while (skip > 0)",
      "right" : "while (skip > 0)",
      "info" : "WhileStatement[4829-5092]:WhileStatement[4829-5092]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4846-5092]:Block[4846-5092]"
    }, {
      "left" : "int realSkip = (int) (skip > skipBuf.length ? skipBuf.length : skip);",
      "right" : "int realSkip = (int) (skip > skipBuf.length ? skipBuf.length : skip);",
      "info" : "VariableDeclarationStatement[4860-4929]:VariableDeclarationStatement[4860-4929]"
    }, {
      "left" : "int numRead = read(skipBuf, 0, realSkip);",
      "right" : "int numRead = read(skipBuf, 0, realSkip);",
      "info" : "VariableDeclarationStatement[4942-4983]:VariableDeclarationStatement[4942-4983]"
    }, {
      "left" : "if (numRead == -1)",
      "right" : "if (numRead == -1)",
      "info" : "IfStatement[4996-5053]:IfStatement[4996-5053]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5015-5053]:Block[5015-5053]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[5033-5039]:BreakStatement[5033-5039]"
    }, {
      "left" : "skip -= numRead;",
      "right" : "skip -= numRead;",
      "info" : "ExpressionStatement[5066-5082]:ExpressionStatement[5066-5082]"
    }, {
      "left" : "return (numToSkip - skip);",
      "right" : "return (numToSkip - skip);",
      "info" : "ReturnStatement[5101-5127]:ReturnStatement[5101-5127]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[5219-5228]:MarkerAnnotation[5219-5228]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5233-5239]:Modifier[5233-5239]"
    }, {
      "left" : "synchronized",
      "right" : "synchronized",
      "info" : "Modifier[5240-5252]:Modifier[5240-5252]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[5253-5257]:PrimitiveType[5253-5257]"
    }, {
      "left" : "reset",
      "right" : "reset",
      "info" : "SimpleName[5258-5263]:SimpleName[5258-5263]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5266-5273]:Block[5266-5273]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5851-5857]:Modifier[5851-5857]"
    }, {
      "left" : "TarArchiveEntry",
      "right" : "TarArchiveEntry",
      "info" : "SimpleType[5858-5873]:SimpleType[5858-5873]"
    }, {
      "left" : "getNextTarEntry",
      "right" : "getNextTarEntry",
      "info" : "SimpleName[5874-5889]:SimpleName[5874-5889]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[5899-5910]:SimpleType[5899-5910]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5911-7982]:Block[5911-8194]"
    }, {
      "left" : "if (hasHitEOF)",
      "right" : "if (hasHitEOF)",
      "info" : "IfStatement[5921-5972]:IfStatement[5921-5972]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5936-5972]:Block[5936-5972]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[5950-5962]:ReturnStatement[5950-5962]"
    }, {
      "left" : "if (currEntry != null)",
      "right" : "if (currEntry != null)",
      "info" : "IfStatement[5982-6374]:IfStatement[5982-6374]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6005-6374]:Block[6005-6374]"
    }, {
      "left" : "long numToSkip = entrySize - entryOffset;",
      "right" : "long numToSkip = entrySize - entryOffset;",
      "info" : "VariableDeclarationStatement[6019-6060]:VariableDeclarationStatement[6019-6060]"
    }, {
      "left" : "while (numToSkip > 0)",
      "right" : "while (numToSkip > 0)",
      "info" : "WhileStatement[6074-6335]:WhileStatement[6074-6335]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6096-6335]:Block[6096-6335]"
    }, {
      "left" : "long skipped = skip(numToSkip);",
      "right" : "long skipped = skip(numToSkip);",
      "info" : "VariableDeclarationStatement[6114-6145]:VariableDeclarationStatement[6114-6145]"
    }, {
      "left" : "if (skipped <= 0)",
      "right" : "if (skipped <= 0)",
      "info" : "IfStatement[6162-6283]:IfStatement[6162-6283]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6180-6283]:Block[6180-6283]"
    }, {
      "left" : "throw new RuntimeException(\"failed to skip current tar entry\");",
      "right" : "throw new RuntimeException(\"failed to skip current tar entry\");",
      "info" : "ThrowStatement[6202-6265]:ThrowStatement[6202-6265]"
    }, {
      "left" : "numToSkip -= skipped;",
      "right" : "numToSkip -= skipped;",
      "info" : "ExpressionStatement[6300-6321]:ExpressionStatement[6300-6321]"
    }, {
      "left" : "readBuf = null;",
      "right" : "readBuf = null;",
      "info" : "ExpressionStatement[6349-6364]:ExpressionStatement[6349-6364]"
    }, {
      "left" : "byte[] headerBuf = getRecord();",
      "right" : "byte[] headerBuf = getRecord();",
      "info" : "VariableDeclarationStatement[6384-6415]:VariableDeclarationStatement[6384-6415]"
    }, {
      "left" : "if (hasHitEOF)",
      "right" : "if (hasHitEOF)",
      "info" : "IfStatement[6425-6506]:IfStatement[6425-6506]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6440-6506]:Block[6440-6506]"
    }, {
      "left" : "currEntry = null;",
      "right" : "currEntry = null;",
      "info" : "ExpressionStatement[6454-6471]:ExpressionStatement[6454-6471]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[6484-6496]:ReturnStatement[6484-6496]"
    }, {
      "left" : "currEntry = new TarArchiveEntry(headerBuf);",
      "right" : "currEntry = new TarArchiveEntry(headerBuf);",
      "info" : "ExpressionStatement[6516-6559]:ExpressionStatement[6534-6577]"
    }, {
      "left" : "entryOffset = 0;",
      "right" : "entryOffset = 0;",
      "info" : "ExpressionStatement[6568-6584]:ExpressionStatement[6780-6796]"
    }, {
      "left" : "entrySize = currEntry.getSize();",
      "right" : "entrySize = currEntry.getSize();",
      "info" : "ExpressionStatement[6593-6625]:ExpressionStatement[6805-6837]"
    }, {
      "left" : "if (currEntry.isGNULongNameEntry())",
      "right" : "if (currEntry.isGNULongNameEntry())",
      "info" : "IfStatement[6635-7475]:IfStatement[6847-7687]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6671-7475]:Block[6883-7687]"
    }, {
      "left" : "StringBuffer longName = new StringBuffer();",
      "right" : "StringBuffer longName = new StringBuffer();",
      "info" : "VariableDeclarationStatement[6717-6760]:VariableDeclarationStatement[6929-6972]"
    }, {
      "left" : "byte[] buf = new byte[SMALL_BUFFER_SIZE];",
      "right" : "byte[] buf = new byte[SMALL_BUFFER_SIZE];",
      "info" : "VariableDeclarationStatement[6773-6814]:VariableDeclarationStatement[6985-7026]"
    }, {
      "left" : "int length = 0;",
      "right" : "int length = 0;",
      "info" : "VariableDeclarationStatement[6827-6842]:VariableDeclarationStatement[7039-7054]"
    }, {
      "left" : "while ((length = read(buf)) >= 0)",
      "right" : "while ((length = read(buf)) >= 0)",
      "info" : "WhileStatement[6855-6965]:WhileStatement[7067-7177]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6889-6965]:Block[7101-7177]"
    }, {
      "left" : "longName.append(new String(buf, 0, length));",
      "right" : "longName.append(new String(buf, 0, length));",
      "info" : "ExpressionStatement[6907-6951]:ExpressionStatement[7119-7163]"
    }, {
      "left" : "getNextEntry();",
      "right" : "getNextEntry();",
      "info" : "ExpressionStatement[6978-6993]:ExpressionStatement[7190-7205]"
    }, {
      "left" : "if (currEntry == null)",
      "right" : "if (currEntry == null)",
      "info" : "IfStatement[7006-7186]:IfStatement[7218-7398]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7029-7186]:Block[7241-7398]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[7160-7172]:ReturnStatement[7372-7384]"
    }, {
      "left" : "if (longName.length() > 0\n                && longName.charAt(longName.length() - 1) == 0)",
      "right" : "if (longName.length() > 0\n                && longName.charAt(longName.length() - 1) == 0)",
      "info" : "IfStatement[7246-7413]:IfStatement[7458-7625]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7336-7413]:Block[7548-7625]"
    }, {
      "left" : "longName.deleteCharAt(longName.length() - 1);",
      "right" : "longName.deleteCharAt(longName.length() - 1);",
      "info" : "ExpressionStatement[7354-7399]:ExpressionStatement[7566-7611]"
    }, {
      "left" : "currEntry.setName(longName.toString());",
      "right" : "currEntry.setName(longName.toString());",
      "info" : "ExpressionStatement[7426-7465]:ExpressionStatement[7638-7677]"
    }, {
      "left" : "if (currEntry.isPaxHeader())",
      "right" : "if (currEntry.isPaxHeader())",
      "info" : "IfStatement[7485-7573]:IfStatement[7697-7785]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7513-7573]:Block[7725-7785]"
    }, {
      "left" : "paxHeaders();",
      "right" : "paxHeaders();",
      "info" : "ExpressionStatement[7550-7563]:ExpressionStatement[7762-7775]"
    }, {
      "left" : "if (currEntry.isGNUSparse())",
      "right" : "if (currEntry.isGNUSparse())",
      "info" : "IfStatement[7583-7675]:IfStatement[7795-7887]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7611-7675]:Block[7823-7887]"
    }, {
      "left" : "readGNUSparse();",
      "right" : "readGNUSparse();",
      "info" : "ExpressionStatement[7649-7665]:ExpressionStatement[7861-7877]"
    }, {
      "left" : "entrySize = currEntry.getSize();",
      "right" : "entrySize = currEntry.getSize();",
      "info" : "ExpressionStatement[7918-7950]:ExpressionStatement[8130-8162]"
    }, {
      "left" : "return currEntry;",
      "right" : "return currEntry;",
      "info" : "ReturnStatement[7959-7976]:ReturnStatement[8171-8188]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[8456-8463]:Modifier[8668-8675]"
    }, {
      "left" : "byte[]",
      "right" : "byte[]",
      "info" : "ArrayType[8464-8470]:ArrayType[8676-8682]"
    }, {
      "left" : "getRecord",
      "right" : "getRecord",
      "info" : "SimpleName[8471-8480]:SimpleName[8683-8692]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[8490-8501]:SimpleType[8702-8713]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8502-8820]:Block[8714-9032]"
    }, {
      "left" : "if (hasHitEOF)",
      "right" : "if (hasHitEOF)",
      "info" : "IfStatement[8512-8563]:IfStatement[8724-8775]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8527-8563]:Block[8739-8775]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[8541-8553]:ReturnStatement[8753-8765]"
    }, {
      "left" : "byte[] headerBuf = buffer.readRecord();",
      "right" : "byte[] headerBuf = buffer.readRecord();",
      "info" : "VariableDeclarationStatement[8573-8612]:VariableDeclarationStatement[8785-8824]"
    }, {
      "left" : "if (headerBuf == null)",
      "right" : "if (headerBuf == null)",
      "info" : "IfStatement[8622-8768]:IfStatement[8834-8980]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8645-8686]:Block[8857-8898]"
    }, {
      "left" : "hasHitEOF = true;",
      "right" : "hasHitEOF = true;",
      "info" : "ExpressionStatement[8659-8676]:ExpressionStatement[8871-8888]"
    }, {
      "left" : "if (buffer.isEOFRecord(headerBuf))",
      "right" : "if (buffer.isEOFRecord(headerBuf))",
      "info" : "IfStatement[8692-8768]:IfStatement[8904-8980]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8727-8768]:Block[8939-8980]"
    }, {
      "left" : "hasHitEOF = true;",
      "right" : "hasHitEOF = true;",
      "info" : "ExpressionStatement[8741-8758]:ExpressionStatement[8953-8970]"
    }, {
      "left" : "return hasHitEOF ? null : headerBuf;",
      "right" : "return hasHitEOF ? null : headerBuf;",
      "info" : "ReturnStatement[8778-8814]:ReturnStatement[8990-9026]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[8826-8833]:Modifier[9038-9045]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[8834-8838]:PrimitiveType[9046-9050]"
    }, {
      "left" : "paxHeaders",
      "right" : "paxHeaders",
      "info" : "SimpleName[8839-8849]:SimpleName[9051-9061]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[8859-8870]:SimpleType[9071-9082]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8870-9412]:Block[9082-9624]"
    }, {
      "left" : "Reader br = new InputStreamReader(this, \"UTF-8\") {\n                @Override\n                public void close() {\n                    // make sure GC doesn't close \"this\" before we are done\n                }\n            };",
      "right" : "Reader br = new InputStreamReader(this, \"UTF-8\") {\n                @Override\n                public void close() {\n                    // make sure GC doesn't close \"this\" before we are done\n                }\n            };",
      "info" : "VariableDeclarationStatement[8880-9103]:VariableDeclarationStatement[9092-9315]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[8947-8956]:MarkerAnnotation[9159-9168]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8973-8979]:Modifier[9185-9191]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[8980-8984]:PrimitiveType[9192-9196]"
    }, {
      "left" : "close",
      "right" : "close",
      "info" : "SimpleName[8985-8990]:SimpleName[9197-9202]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8993-9088]:Block[9205-9300]"
    }, {
      "left" : "Map<String, String> headers = null;",
      "right" : "Map<String, String> headers = null;",
      "info" : "VariableDeclarationStatement[9112-9147]:VariableDeclarationStatement[9324-9359]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[9156-9304]:TryStatement[9368-9516]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9160-9214]:Block[9372-9426]"
    }, {
      "left" : "headers = parsePaxHeaders(br);",
      "right" : "headers = parsePaxHeaders(br);",
      "info" : "ExpressionStatement[9174-9204]:ExpressionStatement[9386-9416]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9223-9304]:Block[9435-9516]"
    }, {
      "left" : "br.close();",
      "right" : "br.close();",
      "info" : "ExpressionStatement[9283-9294]:ExpressionStatement[9495-9506]"
    }, {
      "left" : "getNextEntry();",
      "right" : "getNextEntry();",
      "info" : "ExpressionStatement[9314-9329]:ExpressionStatement[9526-9541]"
    }, {
      "left" : "applyPaxHeadersToCurrentEntry(headers);",
      "right" : "applyPaxHeadersToCurrentEntry(headers);",
      "info" : "ExpressionStatement[9367-9406]:ExpressionStatement[9579-9618]"
    }, {
      "left" : "Map<String, String>",
      "right" : "Map<String, String>",
      "info" : "ParameterizedType[9418-9437]:ParameterizedType[9630-9649]"
    }, {
      "left" : "parsePaxHeaders",
      "right" : "parsePaxHeaders",
      "info" : "SimpleName[9438-9453]:SimpleName[9650-9665]"
    }, {
      "left" : "Reader br",
      "right" : "Reader br",
      "info" : "SingleVariableDeclaration[9454-9463]:SingleVariableDeclaration[9666-9675]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[9472-9483]:SimpleType[9684-9695]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9484-11349]:Block[9696-11561]"
    }, {
      "left" : "Map<String, String> headers = new HashMap<String, String>();",
      "right" : "Map<String, String> headers = new HashMap<String, String>();",
      "info" : "VariableDeclarationStatement[9494-9554]:VariableDeclarationStatement[9706-9766]"
    }, {
      "left" : "while(true)",
      "right" : "while(true)",
      "info" : "WhileStatement[9610-11319]:WhileStatement[9822-11531]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9621-11319]:Block[9833-11531]"
    }, {
      "left" : "int ch;",
      "right" : "int ch;",
      "info" : "VariableDeclarationStatement[9649-9656]:VariableDeclarationStatement[9861-9868]"
    }, {
      "left" : "int len = 0;",
      "right" : "int len = 0;",
      "info" : "VariableDeclarationStatement[9669-9681]:VariableDeclarationStatement[9881-9893]"
    }, {
      "left" : "int read = 0;",
      "right" : "int read = 0;",
      "info" : "VariableDeclarationStatement[9694-9707]:VariableDeclarationStatement[9906-9919]"
    }, {
      "left" : "while((ch = br.read()) != -1)",
      "right" : "while((ch = br.read()) != -1)",
      "info" : "WhileStatement[9720-11238]:WhileStatement[9932-11450]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9749-11238]:Block[9961-11450]"
    }, {
      "left" : "read++;",
      "right" : "read++;",
      "info" : "ExpressionStatement[9767-9774]:ExpressionStatement[9979-9986]"
    }, {
      "left" : "if (ch == ' ')",
      "right" : "if (ch == ' ')",
      "info" : "IfStatement[9791-11164]:IfStatement[10003-11376]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9805-11164]:Block[10017-11376]"
    }, {
      "left" : "StringBuffer sb = new StringBuffer();",
      "right" : "StringBuffer sb = new StringBuffer();",
      "info" : "VariableDeclarationStatement[9886-9923]:VariableDeclarationStatement[10098-10135]"
    }, {
      "left" : "while((ch = br.read()) != -1)",
      "right" : "while((ch = br.read()) != -1)",
      "info" : "WhileStatement[9944-11092]:WhileStatement[10156-11304]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9973-11092]:Block[10185-11304]"
    }, {
      "left" : "read++;",
      "right" : "read++;",
      "info" : "ExpressionStatement[9999-10006]:ExpressionStatement[10211-10218]"
    }, {
      "left" : "if (ch == '=')",
      "right" : "if (ch == '=')",
      "info" : "IfStatement[10031-11024]:IfStatement[10243-11236]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10045-11024]:Block[10257-11236]"
    }, {
      "left" : "String keyword = sb.toString();",
      "right" : "String keyword = sb.toString();",
      "info" : "VariableDeclarationStatement[10093-10124]:VariableDeclarationStatement[10305-10336]"
    }, {
      "left" : "char[] cbuf = new char[len-read];",
      "right" : "char[] cbuf = new char[len-read];",
      "info" : "VariableDeclarationStatement[10202-10235]:VariableDeclarationStatement[10414-10447]"
    }, {
      "left" : "int got = br.read(cbuf);",
      "right" : "int got = br.read(cbuf);",
      "info" : "VariableDeclarationStatement[10264-10288]:VariableDeclarationStatement[10476-10500]"
    }, {
      "left" : "if (got != len - read)",
      "right" : "if (got != len - read)",
      "info" : "IfStatement[10317-10724]:IfStatement[10529-10936]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10339-10724]:Block[10551-10936]"
    }, {
      "left" : "throw new IOException(\"Failed to read \"\n                                                      + \"Paxheader. Expected \"\n                                                      + (len - read)\n                                                      + \" chars, read \"\n                                                      + got);",
      "right" : "throw new IOException(\"Failed to read \"\n                                                      + \"Paxheader. Expected \"\n                                                      + (len - read)\n                                                      + \" chars, read \"\n                                                      + got);",
      "info" : "ThrowStatement[10373-10694]:ThrowStatement[10585-10906]"
    }, {
      "left" : "String value = new String(cbuf, 0,\n                                                      len - read - 1);",
      "right" : "String value = new String(cbuf, 0,\n                                                      len - read - 1);",
      "info" : "VariableDeclarationStatement[10801-10906]:VariableDeclarationStatement[11013-11118]"
    }, {
      "left" : "headers.put(keyword, value);",
      "right" : "headers.put(keyword, value);",
      "info" : "ExpressionStatement[10935-10963]:ExpressionStatement[11147-11175]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[10992-10998]:BreakStatement[11204-11210]"
    }, {
      "left" : "sb.append((char) ch);",
      "right" : "sb.append((char) ch);",
      "info" : "ExpressionStatement[11049-11070]:ExpressionStatement[11261-11282]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[11113-11119]:BreakStatement[11325-11331]"
    }, {
      "left" : "len *= 10;",
      "right" : "len *= 10;",
      "info" : "ExpressionStatement[11181-11191]:ExpressionStatement[11393-11403]"
    }, {
      "left" : "len += ch - '0';",
      "right" : "len += ch - '0';",
      "info" : "ExpressionStatement[11208-11224]:ExpressionStatement[11420-11436]"
    }, {
      "left" : "if (ch == -1)",
      "right" : "if (ch == -1)",
      "info" : "IfStatement[11251-11309]:IfStatement[11463-11521]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11264-11309]:Block[11476-11521]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[11289-11295]:BreakStatement[11501-11507]"
    }, {
      "left" : "return headers;",
      "right" : "return headers;",
      "info" : "ReturnStatement[11328-11343]:ReturnStatement[11540-11555]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[11355-11362]:Modifier[11567-11574]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[11363-11367]:PrimitiveType[11575-11579]"
    }, {
      "left" : "applyPaxHeadersToCurrentEntry",
      "right" : "applyPaxHeadersToCurrentEntry",
      "info" : "SimpleName[11368-11397]:SimpleName[11580-11609]"
    }, {
      "left" : "Map<String, String> headers",
      "right" : "Map<String, String> headers",
      "info" : "SingleVariableDeclaration[11398-11425]:SingleVariableDeclaration[11610-11637]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11427-12528]:Block[11639-12740]"
    }, {
      "left" : "for (Entry<String, String> ent : headers.entrySet())",
      "right" : "for (Entry<String, String> ent : headers.entrySet())",
      "info" : "EnhancedForStatement[11710-12522]:EnhancedForStatement[11922-12734]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11762-12522]:Block[11974-12734]"
    }, {
      "left" : "String key = ent.getKey();",
      "right" : "String key = ent.getKey();",
      "info" : "VariableDeclarationStatement[11776-11802]:VariableDeclarationStatement[11988-12014]"
    }, {
      "left" : "String val = ent.getValue();",
      "right" : "String val = ent.getValue();",
      "info" : "VariableDeclarationStatement[11815-11843]:VariableDeclarationStatement[12027-12055]"
    }, {
      "left" : "if (\"path\".equals(key))",
      "right" : "if (\"path\".equals(key))",
      "info" : "IfStatement[11856-12512]:IfStatement[12068-12724]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11879-11934]:Block[12091-12146]"
    }, {
      "left" : "currEntry.setName(val);",
      "right" : "currEntry.setName(val);",
      "info" : "ExpressionStatement[11897-11920]:ExpressionStatement[12109-12132]"
    }, {
      "left" : "if (\"linkpath\".equals(key))",
      "right" : "if (\"linkpath\".equals(key))",
      "info" : "IfStatement[11940-12512]:IfStatement[12152-12724]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11967-12026]:Block[12179-12238]"
    }, {
      "left" : "currEntry.setLinkName(val);",
      "right" : "currEntry.setLinkName(val);",
      "info" : "ExpressionStatement[11985-12012]:ExpressionStatement[12197-12224]"
    }, {
      "left" : "if (\"gid\".equals(key))",
      "right" : "if (\"gid\".equals(key))",
      "info" : "IfStatement[12032-12512]:IfStatement[12244-12724]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12054-12130]:Block[12266-12342]"
    }, {
      "left" : "currEntry.setGroupId(Integer.parseInt(val));",
      "right" : "currEntry.setGroupId(Integer.parseInt(val));",
      "info" : "ExpressionStatement[12072-12116]:ExpressionStatement[12284-12328]"
    }, {
      "left" : "if (\"gname\".equals(key))",
      "right" : "if (\"gname\".equals(key))",
      "info" : "IfStatement[12136-12512]:IfStatement[12348-12724]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12160-12220]:Block[12372-12432]"
    }, {
      "left" : "currEntry.setGroupName(val);",
      "right" : "currEntry.setGroupName(val);",
      "info" : "ExpressionStatement[12178-12206]:ExpressionStatement[12390-12418]"
    }, {
      "left" : "if (\"uid\".equals(key))",
      "right" : "if (\"uid\".equals(key))",
      "info" : "IfStatement[12226-12512]:IfStatement[12438-12724]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12248-12323]:Block[12460-12535]"
    }, {
      "left" : "currEntry.setUserId(Integer.parseInt(val));",
      "right" : "currEntry.setUserId(Integer.parseInt(val));",
      "info" : "ExpressionStatement[12266-12309]:ExpressionStatement[12478-12521]"
    }, {
      "left" : "if (\"uname\".equals(key))",
      "right" : "if (\"uname\".equals(key))",
      "info" : "IfStatement[12329-12512]:IfStatement[12541-12724]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12353-12412]:Block[12565-12624]"
    }, {
      "left" : "currEntry.setUserName(val);",
      "right" : "currEntry.setUserName(val);",
      "info" : "ExpressionStatement[12371-12398]:ExpressionStatement[12583-12610]"
    }, {
      "left" : "if (\"size\".equals(key))",
      "right" : "if (\"size\".equals(key))",
      "info" : "IfStatement[12418-12512]:IfStatement[12630-12724]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12441-12512]:Block[12653-12724]"
    }, {
      "left" : "currEntry.setSize(Long.parseLong(val));",
      "right" : "currEntry.setSize(Long.parseLong(val));",
      "info" : "ExpressionStatement[12459-12498]:ExpressionStatement[12671-12710]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[12811-12818]:Modifier[13023-13030]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[12819-12823]:PrimitiveType[13031-13035]"
    }, {
      "left" : "readGNUSparse",
      "right" : "readGNUSparse",
      "info" : "SimpleName[12824-12837]:SimpleName[13036-13049]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[12847-12858]:SimpleType[13059-13070]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12859-13519]:Block[13071-13731]"
    }, {
      "left" : "if (currEntry.isExtended())",
      "right" : "if (currEntry.isExtended())",
      "info" : "IfStatement[13016-13513]:IfStatement[13228-13725]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13044-13513]:Block[13256-13725]"
    }, {
      "left" : "TarArchiveSparseEntry entry;",
      "right" : "TarArchiveSparseEntry entry;",
      "info" : "VariableDeclarationStatement[13058-13086]:VariableDeclarationStatement[13270-13298]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[13099-13503]:DoStatement[13311-13715]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13102-13475]:Block[13314-13687]"
    }, {
      "left" : "byte[] headerBuf = getRecord();",
      "right" : "byte[] headerBuf = getRecord();",
      "info" : "VariableDeclarationStatement[13120-13151]:VariableDeclarationStatement[13332-13363]"
    }, {
      "left" : "if (hasHitEOF)",
      "right" : "if (hasHitEOF)",
      "info" : "IfStatement[13168-13267]:IfStatement[13380-13479]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13183-13267]:Block[13395-13479]"
    }, {
      "left" : "currEntry = null;",
      "right" : "currEntry = null;",
      "info" : "ExpressionStatement[13205-13222]:ExpressionStatement[13417-13434]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13243-13249]:BreakStatement[13455-13461]"
    }, {
      "left" : "entry = new TarArchiveSparseEntry(headerBuf);",
      "right" : "entry = new TarArchiveSparseEntry(headerBuf);",
      "info" : "ExpressionStatement[13284-13329]:ExpressionStatement[13496-13541]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[13525-13534]:MarkerAnnotation[13737-13746]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[13539-13545]:Modifier[13751-13757]"
    }, {
      "left" : "ArchiveEntry",
      "right" : "ArchiveEntry",
      "info" : "SimpleType[13546-13558]:SimpleType[13758-13770]"
    }, {
      "left" : "getNextEntry",
      "right" : "getNextEntry",
      "info" : "SimpleName[13559-13571]:SimpleName[13771-13783]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[13581-13592]:SimpleType[13793-13804]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13593-13634]:Block[13805-13846]"
    }, {
      "left" : "return getNextTarEntry();",
      "right" : "return getNextTarEntry();",
      "info" : "ReturnStatement[13603-13628]:ReturnStatement[13815-13840]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[14157-14166]:MarkerAnnotation[14369-14378]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[14171-14177]:Modifier[14383-14389]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[14178-14181]:PrimitiveType[14390-14393]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[14182-14186]:SimpleName[14394-14398]"
    }, {
      "left" : "byte[] buf",
      "right" : "byte[] buf",
      "info" : "SingleVariableDeclaration[14187-14197]:SingleVariableDeclaration[14399-14409]"
    }, {
      "left" : "int offset",
      "right" : "int offset",
      "info" : "SingleVariableDeclaration[14199-14209]:SingleVariableDeclaration[14411-14421]"
    }, {
      "left" : "int numToRead",
      "right" : "int numToRead",
      "info" : "SingleVariableDeclaration[14211-14224]:SingleVariableDeclaration[14423-14436]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[14233-14244]:SimpleType[14445-14456]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14245-15989]:Block[14457-16201]"
    }, {
      "left" : "int totalRead = 0;",
      "right" : "int totalRead = 0;",
      "info" : "VariableDeclarationStatement[14255-14273]:VariableDeclarationStatement[14467-14485]"
    }, {
      "left" : "if (entryOffset >= entrySize)",
      "right" : "if (entryOffset >= entrySize)",
      "info" : "IfStatement[14283-14347]:IfStatement[14495-14559]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14313-14347]:Block[14525-14559]"
    }, {
      "left" : "return -1;",
      "right" : "return -1;",
      "info" : "ReturnStatement[14327-14337]:ReturnStatement[14539-14549]"
    }, {
      "left" : "if ((numToRead + entryOffset) > entrySize)",
      "right" : "if ((numToRead + entryOffset) > entrySize)",
      "info" : "IfStatement[14357-14468]:IfStatement[14569-14680]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14400-14468]:Block[14612-14680]"
    }, {
      "left" : "numToRead = (int) (entrySize - entryOffset);",
      "right" : "numToRead = (int) (entrySize - entryOffset);",
      "info" : "ExpressionStatement[14414-14458]:ExpressionStatement[14626-14670]"
    }, {
      "left" : "if (readBuf != null)",
      "right" : "if (readBuf != null)",
      "info" : "IfStatement[14478-15061]:IfStatement[14690-15273]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14499-15061]:Block[14711-15273]"
    }, {
      "left" : "int sz = (numToRead > readBuf.length) ? readBuf.length\n                : numToRead;",
      "right" : "int sz = (numToRead > readBuf.length) ? readBuf.length\n                : numToRead;",
      "info" : "VariableDeclarationStatement[14513-14596]:VariableDeclarationStatement[14725-14808]"
    }, {
      "left" : "System.arraycopy(readBuf, 0, buf, offset, sz);",
      "right" : "System.arraycopy(readBuf, 0, buf, offset, sz);",
      "info" : "ExpressionStatement[14610-14656]:ExpressionStatement[14822-14868]"
    }, {
      "left" : "if (sz >= readBuf.length)",
      "right" : "if (sz >= readBuf.length)",
      "info" : "IfStatement[14670-14966]:IfStatement[14882-15178]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14696-14743]:Block[14908-14955]"
    }, {
      "left" : "readBuf = null;",
      "right" : "readBuf = null;",
      "info" : "ExpressionStatement[14714-14729]:ExpressionStatement[14926-14941]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14749-14966]:Block[14961-15178]"
    }, {
      "left" : "int newLen = readBuf.length - sz;",
      "right" : "int newLen = readBuf.length - sz;",
      "info" : "VariableDeclarationStatement[14767-14800]:VariableDeclarationStatement[14979-15012]"
    }, {
      "left" : "byte[] newBuf = new byte[newLen];",
      "right" : "byte[] newBuf = new byte[newLen];",
      "info" : "VariableDeclarationStatement[14817-14850]:VariableDeclarationStatement[15029-15062]"
    }, {
      "left" : "System.arraycopy(readBuf, sz, newBuf, 0, newLen);",
      "right" : "System.arraycopy(readBuf, sz, newBuf, 0, newLen);",
      "info" : "ExpressionStatement[14868-14917]:ExpressionStatement[15080-15129]"
    }, {
      "left" : "readBuf = newBuf;",
      "right" : "readBuf = newBuf;",
      "info" : "ExpressionStatement[14935-14952]:ExpressionStatement[15147-15164]"
    }, {
      "left" : "totalRead += sz;",
      "right" : "totalRead += sz;",
      "info" : "ExpressionStatement[14980-14996]:ExpressionStatement[15192-15208]"
    }, {
      "left" : "numToRead -= sz;",
      "right" : "numToRead -= sz;",
      "info" : "ExpressionStatement[15009-15025]:ExpressionStatement[15221-15237]"
    }, {
      "left" : "offset += sz;",
      "right" : "offset += sz;",
      "info" : "ExpressionStatement[15038-15051]:ExpressionStatement[15250-15263]"
    }, {
      "left" : "while (numToRead > 0)",
      "right" : "while (numToRead > 0)",
      "info" : "WhileStatement[15071-15921]:WhileStatement[15283-16133]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15093-15921]:Block[15305-16133]"
    }, {
      "left" : "byte[] rec = buffer.readRecord();",
      "right" : "byte[] rec = buffer.readRecord();",
      "info" : "VariableDeclarationStatement[15107-15140]:VariableDeclarationStatement[15319-15352]"
    }, {
      "left" : "if (rec == null)",
      "right" : "if (rec == null)",
      "info" : "IfStatement[15154-15388]:IfStatement[15366-15600]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15171-15388]:Block[15383-15600]"
    }, {
      "left" : "throw new IOException(\"unexpected EOF with \" + numToRead\n                                      + \" bytes unread. Occured at byte: \" + getBytesRead());",
      "right" : "throw new IOException(\"unexpected EOF with \" + numToRead\n                                      + \" bytes unread. Occured at byte: \" + getBytesRead());",
      "info" : "ThrowStatement[15224-15374]:ThrowStatement[15436-15586]"
    }, {
      "left" : "count(rec.length);",
      "right" : "count(rec.length);",
      "info" : "ExpressionStatement[15401-15419]:ExpressionStatement[15613-15631]"
    }, {
      "left" : "int sz = numToRead;",
      "right" : "int sz = numToRead;",
      "info" : "VariableDeclarationStatement[15432-15451]:VariableDeclarationStatement[15644-15663]"
    }, {
      "left" : "int recLen = rec.length;",
      "right" : "int recLen = rec.length;",
      "info" : "VariableDeclarationStatement[15464-15488]:VariableDeclarationStatement[15676-15700]"
    }, {
      "left" : "if (recLen > sz)",
      "right" : "if (recLen > sz)",
      "info" : "IfStatement[15502-15826]:IfStatement[15714-16038]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15519-15712]:Block[15731-15924]"
    }, {
      "left" : "System.arraycopy(rec, 0, buf, offset, sz);",
      "right" : "System.arraycopy(rec, 0, buf, offset, sz);",
      "info" : "ExpressionStatement[15537-15579]:ExpressionStatement[15749-15791]"
    }, {
      "left" : "readBuf = new byte[recLen - sz];",
      "right" : "readBuf = new byte[recLen - sz];",
      "info" : "ExpressionStatement[15597-15629]:ExpressionStatement[15809-15841]"
    }, {
      "left" : "System.arraycopy(rec, sz, readBuf, 0, recLen - sz);",
      "right" : "System.arraycopy(rec, sz, readBuf, 0, recLen - sz);",
      "info" : "ExpressionStatement[15647-15698]:ExpressionStatement[15859-15910]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15718-15826]:Block[15930-16038]"
    }, {
      "left" : "sz = recLen;",
      "right" : "sz = recLen;",
      "info" : "ExpressionStatement[15736-15748]:ExpressionStatement[15948-15960]"
    }, {
      "left" : "System.arraycopy(rec, 0, buf, offset, recLen);",
      "right" : "System.arraycopy(rec, 0, buf, offset, recLen);",
      "info" : "ExpressionStatement[15766-15812]:ExpressionStatement[15978-16024]"
    }, {
      "left" : "totalRead += sz;",
      "right" : "totalRead += sz;",
      "info" : "ExpressionStatement[15840-15856]:ExpressionStatement[16052-16068]"
    }, {
      "left" : "numToRead -= sz;",
      "right" : "numToRead -= sz;",
      "info" : "ExpressionStatement[15869-15885]:ExpressionStatement[16081-16097]"
    }, {
      "left" : "offset += sz;",
      "right" : "offset += sz;",
      "info" : "ExpressionStatement[15898-15911]:ExpressionStatement[16110-16123]"
    }, {
      "left" : "entryOffset += totalRead;",
      "right" : "entryOffset += totalRead;",
      "info" : "ExpressionStatement[15931-15956]:ExpressionStatement[16143-16168]"
    }, {
      "left" : "return totalRead;",
      "right" : "return totalRead;",
      "info" : "ReturnStatement[15966-15983]:ReturnStatement[16178-16195]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[16147-16156]:MarkerAnnotation[16359-16368]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[16161-16167]:Modifier[16373-16379]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[16168-16175]:PrimitiveType[16380-16387]"
    }, {
      "left" : "canReadEntryData",
      "right" : "canReadEntryData",
      "info" : "SimpleName[16176-16192]:SimpleName[16388-16404]"
    }, {
      "left" : "ArchiveEntry ae",
      "right" : "ArchiveEntry ae",
      "info" : "SingleVariableDeclaration[16193-16208]:SingleVariableDeclaration[16405-16420]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16210-16387]:Block[16422-16599]"
    }, {
      "left" : "if (ae instanceof TarArchiveEntry)",
      "right" : "if (ae instanceof TarArchiveEntry)",
      "info" : "IfStatement[16220-16359]:IfStatement[16432-16571]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16255-16359]:Block[16467-16571]"
    }, {
      "left" : "TarArchiveEntry te = (TarArchiveEntry) ae;",
      "right" : "TarArchiveEntry te = (TarArchiveEntry) ae;",
      "info" : "VariableDeclarationStatement[16269-16311]:VariableDeclarationStatement[16481-16523]"
    }, {
      "left" : "return !te.isGNUSparse();",
      "right" : "return !te.isGNUSparse();",
      "info" : "ReturnStatement[16324-16349]:ReturnStatement[16536-16561]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[16368-16381]:ReturnStatement[16580-16593]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[16393-16402]:Modifier[16605-16614]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[16403-16408]:Modifier[16615-16620]"
    }, {
      "left" : "TarArchiveEntry",
      "right" : "TarArchiveEntry",
      "info" : "SimpleType[16409-16424]:SimpleType[16621-16636]"
    }, {
      "left" : "getCurrentEntry",
      "right" : "getCurrentEntry",
      "info" : "SimpleName[16425-16440]:SimpleName[16637-16652]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16443-16476]:Block[16655-16688]"
    }, {
      "left" : "return currEntry;",
      "right" : "return currEntry;",
      "info" : "ReturnStatement[16453-16470]:ReturnStatement[16665-16682]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[16482-16491]:Modifier[16694-16703]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[16492-16497]:Modifier[16704-16709]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[16498-16502]:PrimitiveType[16710-16714]"
    }, {
      "left" : "setCurrentEntry",
      "right" : "setCurrentEntry",
      "info" : "SimpleName[16503-16518]:SimpleName[16715-16730]"
    }, {
      "left" : "TarArchiveEntry e",
      "right" : "TarArchiveEntry e",
      "info" : "SingleVariableDeclaration[16519-16536]:SingleVariableDeclaration[16731-16748]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16538-16568]:Block[16750-16780]"
    }, {
      "left" : "currEntry = e;",
      "right" : "currEntry = e;",
      "info" : "ExpressionStatement[16548-16562]:ExpressionStatement[16760-16774]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[16574-16583]:Modifier[16786-16795]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[16584-16589]:Modifier[16796-16801]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[16590-16597]:PrimitiveType[16802-16809]"
    }, {
      "left" : "isAtEOF",
      "right" : "isAtEOF",
      "info" : "SimpleName[16598-16605]:SimpleName[16810-16817]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16608-16641]:Block[16820-16853]"
    }, {
      "left" : "return hasHitEOF;",
      "right" : "return hasHitEOF;",
      "info" : "ReturnStatement[16618-16635]:ReturnStatement[16830-16847]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[16647-16656]:Modifier[16859-16868]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[16657-16662]:Modifier[16869-16874]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[16663-16667]:PrimitiveType[16875-16879]"
    }, {
      "left" : "setAtEOF",
      "right" : "setAtEOF",
      "info" : "SimpleName[16668-16676]:SimpleName[16880-16888]"
    }, {
      "left" : "boolean b",
      "right" : "boolean b",
      "info" : "SingleVariableDeclaration[16677-16686]:SingleVariableDeclaration[16889-16898]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16688-16718]:Block[16900-16930]"
    }, {
      "left" : "hasHitEOF = b;",
      "right" : "hasHitEOF = b;",
      "info" : "ExpressionStatement[16698-16712]:ExpressionStatement[16910-16924]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[17026-17032]:Modifier[17238-17244]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[17033-17039]:Modifier[17245-17251]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[17040-17047]:PrimitiveType[17252-17259]"
    }, {
      "left" : "matches",
      "right" : "matches",
      "info" : "SimpleName[17048-17055]:SimpleName[17260-17267]"
    }, {
      "left" : "byte[] signature",
      "right" : "byte[] signature",
      "info" : "SingleVariableDeclaration[17056-17072]:SingleVariableDeclaration[17268-17284]"
    }, {
      "left" : "int length",
      "right" : "int length",
      "info" : "SingleVariableDeclaration[17074-17084]:SingleVariableDeclaration[17286-17296]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17086-18569]:Block[17298-18781]"
    }, {
      "left" : "if (length < TarConstants.VERSION_OFFSET+TarConstants.VERSIONLEN)",
      "right" : "if (length < TarConstants.VERSION_OFFSET+TarConstants.VERSIONLEN)",
      "info" : "IfStatement[17096-17199]:IfStatement[17308-17411]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17162-17199]:Block[17374-17411]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[17176-17189]:ReturnStatement[17388-17401]"
    }, {
      "left" : "if (ArchiveUtils.matchAsciiBuffer(TarConstants.MAGIC_POSIX,\n                signature, TarConstants.MAGIC_OFFSET, TarConstants.MAGICLEN)\n            &&\n            ArchiveUtils.matchAsciiBuffer(TarConstants.VERSION_POSIX,\n                signature, TarConstants.VERSION_OFFSET, TarConstants.VERSIONLEN))",
      "right" : "if (ArchiveUtils.matchAsciiBuffer(TarConstants.MAGIC_POSIX,\n                signature, TarConstants.MAGIC_OFFSET, TarConstants.MAGICLEN)\n            &&\n            ArchiveUtils.matchAsciiBuffer(TarConstants.VERSION_POSIX,\n                signature, TarConstants.VERSION_OFFSET, TarConstants.VERSIONLEN))",
      "info" : "IfStatement[17209-17565]:IfStatement[17421-17777]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17529-17565]:Block[17741-17777]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[17543-17555]:ReturnStatement[17755-17767]"
    }, {
      "left" : "if (ArchiveUtils.matchAsciiBuffer(TarConstants.MAGIC_GNU,\n                signature, TarConstants.MAGIC_OFFSET, TarConstants.MAGICLEN)\n            &&\n            (\n             ArchiveUtils.matchAsciiBuffer(TarConstants.VERSION_GNU_SPACE,\n                signature, TarConstants.VERSION_OFFSET, TarConstants.VERSIONLEN)\n            ||\n            ArchiveUtils.matchAsciiBuffer(TarConstants.VERSION_GNU_ZERO,\n                signature, TarConstants.VERSION_OFFSET, TarConstants.VERSIONLEN)\n            ))",
      "right" : "if (ArchiveUtils.matchAsciiBuffer(TarConstants.MAGIC_GNU,\n                signature, TarConstants.MAGIC_OFFSET, TarConstants.MAGICLEN)\n            &&\n            (\n             ArchiveUtils.matchAsciiBuffer(TarConstants.VERSION_GNU_SPACE,\n                signature, TarConstants.VERSION_OFFSET, TarConstants.VERSIONLEN)\n            ||\n            ArchiveUtils.matchAsciiBuffer(TarConstants.VERSION_GNU_ZERO,\n                signature, TarConstants.VERSION_OFFSET, TarConstants.VERSIONLEN)\n            ))",
      "info" : "IfStatement[17574-18130]:IfStatement[17786-18342]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18094-18130]:Block[18306-18342]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[18108-18120]:ReturnStatement[18320-18332]"
    }, {
      "left" : "if (ArchiveUtils.matchAsciiBuffer(TarConstants.MAGIC_ANT,\n                signature, TarConstants.MAGIC_OFFSET, TarConstants.MAGICLEN)\n            &&\n            ArchiveUtils.matchAsciiBuffer(TarConstants.VERSION_ANT,\n                signature, TarConstants.VERSION_OFFSET, TarConstants.VERSIONLEN))",
      "right" : "if (ArchiveUtils.matchAsciiBuffer(TarConstants.MAGIC_ANT,\n                signature, TarConstants.MAGIC_OFFSET, TarConstants.MAGICLEN)\n            &&\n            ArchiveUtils.matchAsciiBuffer(TarConstants.VERSION_ANT,\n                signature, TarConstants.VERSION_OFFSET, TarConstants.VERSIONLEN))",
      "info" : "IfStatement[18189-18541]:IfStatement[18401-18753]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18505-18541]:Block[18717-18753]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[18519-18531]:ReturnStatement[18731-18743]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[18550-18563]:ReturnStatement[18762-18775]"
    } ]
  },
  "interFileMappings" : { }
}