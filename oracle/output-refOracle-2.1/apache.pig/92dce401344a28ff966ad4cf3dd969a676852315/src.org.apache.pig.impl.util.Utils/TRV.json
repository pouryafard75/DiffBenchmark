{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "private static final Log log = LogFactory.getLog(Utils.class);",
      "right" : "private static final Log log = LogFactory.getLog(Utils.class);",
      "info" : "FieldDeclaration[3164-3226]:FieldDeclaration[3164-3226]"
    }, {
      "left" : "private static final Pattern JAVA_MAXHEAPSIZE_PATTERN = Pattern.compile(\"-Xmx(([0-9]+)[mMgG])\");",
      "right" : "private static final Pattern JAVA_MAXHEAPSIZE_PATTERN = Pattern.compile(\"-Xmx(([0-9]+)[mMgG])\");",
      "info" : "FieldDeclaration[3231-3327]:FieldDeclaration[3231-3327]"
    }, {
      "left" : "public static boolean isVendorIBM()",
      "right" : "public static boolean isVendorIBM()",
      "info" : "MethodDeclaration[3334-3578]:MethodDeclaration[3334-3578]"
    }, {
      "left" : "public static boolean isHadoop23()",
      "right" : "public static boolean isHadoop23()",
      "info" : "MethodDeclaration[3584-3797]:MethodDeclaration[3584-3797]"
    }, {
      "left" : "public static boolean isHadoop2()",
      "right" : "public static boolean isHadoop2()",
      "info" : "MethodDeclaration[3803-4014]:MethodDeclaration[3803-4014]"
    }, {
      "left" : "public static boolean checkNullEquals(Object obj1, Object obj2, boolean checkEquality)",
      "right" : "public static boolean checkNullEquals(Object obj1, Object obj2, boolean checkEquality)",
      "info" : "MethodDeclaration[4020-5003]:MethodDeclaration[4020-5003]"
    }, {
      "left" : "public static boolean checkNullAndClass(Object obj1, Object obj2)",
      "right" : "public static boolean checkNullAndClass(Object obj1, Object obj2)",
      "info" : "MethodDeclaration[5010-5855]:MethodDeclaration[5010-5855]"
    }, {
      "left" : "public static Schema getScriptSchema(\n            String loadFuncSignature,\n            Configuration conf) throws IOException",
      "right" : "public static Schema getScriptSchema(\n            String loadFuncSignature,\n            Configuration conf) throws IOException",
      "info" : "MethodDeclaration[5861-6480]:MethodDeclaration[5861-6480]"
    }, {
      "left" : "public static String getScriptSchemaKey(String loadFuncSignature)",
      "right" : "public static String getScriptSchemaKey(String loadFuncSignature)",
      "info" : "MethodDeclaration[6486-6611]:MethodDeclaration[6486-6611]"
    }, {
      "left" : "public static ResourceSchema getSchema(LoadFunc wrappedLoadFunc, String location, boolean checkExistence, Job job)\n            throws IOException",
      "right" : "public static ResourceSchema getSchema(LoadFunc wrappedLoadFunc, String location, boolean checkExistence, Job job)\n            throws IOException",
      "info" : "MethodDeclaration[6617-8111]:MethodDeclaration[6617-8111]"
    }, {
      "left" : "public static Schema getSchemaFromString(String schemaString) throws ParserException",
      "right" : "public static Schema getSchemaFromString(String schemaString) throws ParserException",
      "info" : "MethodDeclaration[8117-8732]:MethodDeclaration[8117-8732]"
    }, {
      "left" : "public static Schema getSchemaFromBagSchemaString(String schemaString) throws ParserException",
      "right" : "public static Schema getSchemaFromBagSchemaString(String schemaString) throws ParserException",
      "info" : "MethodDeclaration[8738-9640]:MethodDeclaration[8738-9640]"
    }, {
      "left" : "public static LogicalSchema parseSchema(String schemaString) throws ParserException",
      "right" : "public static LogicalSchema parseSchema(String schemaString) throws ParserException",
      "info" : "MethodDeclaration[9646-9969]:MethodDeclaration[9646-9969]"
    }, {
      "left" : "public static Object parseConstant(String constantString) throws ParserException",
      "right" : "public static Object parseConstant(String constantString) throws ParserException",
      "info" : "MethodDeclaration[9975-10296]:MethodDeclaration[9975-10296]"
    }, {
      "left" : "public static ResourceSchema getSchemaWithInputSourceTag(ResourceSchema schema, String fieldName)",
      "right" : "public static ResourceSchema getSchemaWithInputSourceTag(ResourceSchema schema, String fieldName)",
      "info" : "MethodDeclaration[10302-11280]:MethodDeclaration[10302-11280]"
    }, {
      "left" : "enum : TEMPFILE_CODEC",
      "right" : "enum : TEMPFILE_CODEC",
      "info" : "EnumDeclaration[11286-11918]:EnumDeclaration[11286-11918]"
    }, {
      "left" : "private String hadoopCodecClassName;",
      "right" : "private String hadoopCodecClassName;",
      "info" : "FieldDeclaration[11561-11597]:FieldDeclaration[11561-11597]"
    }, {
      "left" : "TEMPFILE_CODEC(String codecClassName)",
      "right" : "TEMPFILE_CODEC(String codecClassName)",
      "info" : "MethodDeclaration[11607-11712]:MethodDeclaration[11607-11712]"
    }, {
      "left" : "public String lowerName()",
      "right" : "public String lowerName()",
      "info" : "MethodDeclaration[11722-11805]:MethodDeclaration[11722-11805]"
    }, {
      "left" : "public String getHadoopCodecClassName()",
      "right" : "public String getHadoopCodecClassName()",
      "info" : "MethodDeclaration[11815-11912]:MethodDeclaration[11815-11912]"
    }, {
      "left" : "enum : TEMPFILE_STORAGE",
      "right" : "enum : TEMPFILE_STORAGE",
      "info" : "EnumDeclaration[11924-13781]:EnumDeclaration[11924-13781]"
    }, {
      "left" : "private Class<? extends FileInputLoadFunc> storageClass;",
      "right" : "private Class<? extends FileInputLoadFunc> storageClass;",
      "info" : "FieldDeclaration[12484-12540]:FieldDeclaration[12484-12540]"
    }, {
      "left" : "private List<TEMPFILE_CODEC> supportedCodecs;",
      "right" : "private List<TEMPFILE_CODEC> supportedCodecs;",
      "info" : "FieldDeclaration[12549-12594]:FieldDeclaration[12549-12594]"
    }, {
      "left" : "TEMPFILE_STORAGE(\n                Class<? extends FileInputLoadFunc> storageClass,\n                List<TEMPFILE_CODEC> supportedCodecs)",
      "right" : "TEMPFILE_STORAGE(\n                Class<? extends FileInputLoadFunc> storageClass,\n                List<TEMPFILE_CODEC> supportedCodecs)",
      "info" : "MethodDeclaration[12604-12850]:MethodDeclaration[12604-12850]"
    }, {
      "left" : "public String lowerName()",
      "right" : "public String lowerName()",
      "info" : "MethodDeclaration[12860-12943]:MethodDeclaration[12860-12943]"
    }, {
      "left" : "public Class<? extends FileInputLoadFunc> getStorageClass()",
      "right" : "public Class<? extends FileInputLoadFunc> getStorageClass()",
      "info" : "MethodDeclaration[12953-13057]:MethodDeclaration[12953-13057]"
    }, {
      "left" : "public boolean ensureCodecSupported(String codec)",
      "right" : "public boolean ensureCodecSupported(String codec)",
      "info" : "MethodDeclaration[13067-13340]:MethodDeclaration[13067-13340]"
    }, {
      "left" : "public String supportedCodecsToString()",
      "right" : "public String supportedCodecsToString()",
      "info" : "MethodDeclaration[13350-13775]:MethodDeclaration[13350-13775]"
    }, {
      "left" : "public static String getTmpFileCompressorName(PigContext pigContext)",
      "right" : "public static String getTmpFileCompressorName(PigContext pigContext)",
      "info" : "MethodDeclaration[13787-14348]:MethodDeclaration[13787-14348]"
    }, {
      "left" : "public static FileInputLoadFunc getTmpFileStorageObject(Configuration conf) throws IOException",
      "right" : "public static FileInputLoadFunc getTmpFileStorageObject(Configuration conf) throws IOException",
      "info" : "MethodDeclaration[14354-14813]:MethodDeclaration[14354-14813]"
    }, {
      "left" : "public static Class<? extends FileInputLoadFunc> getTmpFileStorageClass(Properties properties)",
      "right" : "public static Class<? extends FileInputLoadFunc> getTmpFileStorageClass(Properties properties)",
      "info" : "MethodDeclaration[14819-14984]:MethodDeclaration[14819-14984]"
    }, {
      "left" : "private static TEMPFILE_STORAGE getTmpFileStorage(Properties properties)",
      "right" : "private static TEMPFILE_STORAGE getTmpFileStorage(Properties properties)",
      "info" : "MethodDeclaration[14990-15992]:MethodDeclaration[14990-15992]"
    }, {
      "left" : "public static void setMapredCompressionCodecProps(Configuration conf)",
      "right" : "public static void setMapredCompressionCodecProps(Configuration conf)",
      "info" : "MethodDeclaration[15998-16679]:MethodDeclaration[15998-16679]"
    }, {
      "left" : "public static void setTmpFileCompressionOnConf(PigContext pigContext, Configuration conf) throws IOExceptio",
      "right" : "public static void setTmpFileCompressionOnConf(PigContext pigContext, Configuration conf) throws IOExceptio",
      "info" : "MethodDeclaration[16685-18754]:MethodDeclaration[16685-18754]"
    }, {
      "left" : "public static String getStringFromArray(String[] arr)",
      "right" : "public static String getStringFromArray(String[] arr)",
      "info" : "MethodDeclaration[18760-18996]:MethodDeclaration[18760-18996]"
    }, {
      "left" : "public static FuncSpec buildSimpleFuncSpec(String className, byte...types)",
      "right" : "public static FuncSpec buildSimpleFuncSpec(String className, byte...types)",
      "info" : "MethodDeclaration[19002-19358]:MethodDeclaration[19002-19358]"
    }, {
      "left" : "public static String slashisize(String str)",
      "right" : "public static String slashisize(String str)",
      "info" : "MethodDeclaration[19364-19747]:MethodDeclaration[19364-19747]"
    }, {
      "left" : "public static <O> Collection<O> mergeCollection(Collection<O> a, Collection<O> b)",
      "right" : "public static <O> Collection<O> mergeCollection(Collection<O> a, Collection<O> b)",
      "info" : "MethodDeclaration[19753-20555]:MethodDeclaration[19753-20555]"
    }, {
      "left" : "public static InputStream getCompositeStream(InputStream in, Properties properties)",
      "right" : "public static InputStream getCompositeStream(InputStream in, Properties properties)",
      "info" : "MethodDeclaration[20561-21160]:MethodDeclaration[20561-21160]"
    }, {
      "left" : "public static void recomputeProperties(JobConf jobConf, Properties properties)",
      "right" : "public static void recomputeProperties(JobConf jobConf, Properties properties)",
      "info" : "MethodDeclaration[21166-22677]:MethodDeclaration[21166-22677]"
    }, {
      "left" : "public static String getStackStraceStr(Throwable e)",
      "right" : "public static String getStackStraceStr(Throwable e)",
      "info" : "MethodDeclaration[22683-22919]:MethodDeclaration[22683-22919]"
    }, {
      "left" : "public static boolean isLocal(PigContext pigContext, Configuration conf)",
      "right" : "public static boolean isLocal(PigContext pigContext, Configuration conf)",
      "info" : "MethodDeclaration[22925-23119]:MethodDeclaration[22925-23119]"
    }, {
      "left" : "private static Pattern varPat = Pattern.compile(\"\\\\$\\\\{[^\\\\}\\\\$\\u0020]+\\\\}\");",
      "right" : "private static Pattern varPat = Pattern.compile(\"\\\\$\\\\{[^\\\\}\\\\$\\u0020]+\\\\}\");",
      "info" : "FieldDeclaration[23302-23379]:FieldDeclaration[23302-23379]"
    }, {
      "left" : "private static int MAX_SUBST = 20;",
      "right" : "private static int MAX_SUBST = 20;",
      "info" : "FieldDeclaration[23384-23418]:FieldDeclaration[23384-23418]"
    }, {
      "left" : "public static String substituteVars(String expr)",
      "right" : "public static String substituteVars(String expr)",
      "info" : "MethodDeclaration[23424-24308]:MethodDeclaration[23424-24308]"
    }, {
      "left" : "public static final PathFilter VISIBLE_FILES = new PathFilter() {\n      @Override\n      public boolean accept(final Path p) {\n        return (!(p.getName().startsWith(\"_\") || p.getName().startsWith(\".\")));\n      }\n    };",
      "right" : "public static final PathFilter VISIBLE_FILES = new PathFilter() {\n      @Override\n      public boolean accept(final Path p) {\n        return (!(p.getName().startsWith(\"_\") || p.getName().startsWith(\".\")));\n      }\n    };",
      "info" : "FieldDeclaration[24314-24604]:FieldDeclaration[24314-24604]"
    }, {
      "left" : "public boolean accept(final Path p)",
      "right" : "public boolean accept(final Path p)",
      "info" : "MethodDeclaration[24456-24597]:MethodDeclaration[24456-24597]"
    }, {
      "left" : "public static int extractHeapSizeInMB(String input)",
      "right" : "public static int extractHeapSizeInMB(String input)",
      "info" : "MethodDeclaration[26290-27077]:MethodDeclaration[26432-27219]"
    }, {
      "left" : "public static void setDefaultTimeZone(Configuration conf)",
      "right" : "public static void setDefaultTimeZone(Configuration conf)",
      "info" : "MethodDeclaration[27083-27434]:MethodDeclaration[27225-27576]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3506-3578]:Block[3506-3578]"
    }, {
      "left" : "return System.getProperty(\"java.vendor\").contains(\"IBM\");",
      "right" : "return System.getProperty(\"java.vendor\").contains(\"IBM\");",
      "info" : "ReturnStatement[3515-3572]:ReturnStatement[3515-3572]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3619-3797]:Block[3619-3797]"
    }, {
      "left" : "String version = org.apache.hadoop.util.VersionInfo.getVersion();",
      "right" : "String version = org.apache.hadoop.util.VersionInfo.getVersion();",
      "info" : "VariableDeclarationStatement[3629-3694]:VariableDeclarationStatement[3629-3694]"
    }, {
      "left" : "if (version.matches(\"\\\\b0\\\\.23\\\\..+\\\\b\"))",
      "right" : "if (version.matches(\"\\\\b0\\\\.23\\\\..+\\\\b\"))",
      "info" : "IfStatement[3703-3769]:IfStatement[3703-3769]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[3757-3769]:ReturnStatement[3757-3769]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[3778-3791]:ReturnStatement[3778-3791]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3837-4014]:Block[3837-4014]"
    }, {
      "left" : "String version = org.apache.hadoop.util.VersionInfo.getVersion();",
      "right" : "String version = org.apache.hadoop.util.VersionInfo.getVersion();",
      "info" : "VariableDeclarationStatement[3847-3912]:VariableDeclarationStatement[3847-3912]"
    }, {
      "left" : "if (version.matches(\"\\\\b2\\\\.\\\\d+\\\\..+\"))",
      "right" : "if (version.matches(\"\\\\b2\\\\.\\\\d+\\\\..+\"))",
      "info" : "IfStatement[3921-3986]:IfStatement[3921-3986]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[3974-3986]:ReturnStatement[3974-3986]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[3995-4008]:ReturnStatement[3995-4008]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4770-5003]:Block[4770-5003]"
    }, {
      "left" : "if(obj1 == null || obj2 == null)",
      "right" : "if(obj1 == null || obj2 == null)",
      "info" : "IfStatement[4780-4857]:IfStatement[4780-4857]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4813-4857]:Block[4813-4857]"
    }, {
      "left" : "return obj1 == obj2;",
      "right" : "return obj1 == obj2;",
      "info" : "ReturnStatement[4827-4847]:ReturnStatement[4827-4847]"
    }, {
      "left" : "if(checkEquality)",
      "right" : "if(checkEquality)",
      "info" : "IfStatement[4866-4976]:IfStatement[4866-4976]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4884-4976]:Block[4884-4976]"
    }, {
      "left" : "if(!obj1.equals(obj2))",
      "right" : "if(!obj1.equals(obj2))",
      "info" : "IfStatement[4898-4966]:IfStatement[4898-4966]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4921-4966]:Block[4921-4966]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[4939-4952]:ReturnStatement[4939-4952]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[4985-4997]:ReturnStatement[4985-4997]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5555-5855]:Block[5555-5855]"
    }, {
      "left" : "if(checkNullEquals(obj1, obj2, false))",
      "right" : "if(checkNullEquals(obj1, obj2, false))",
      "info" : "IfStatement[5565-5849]:IfStatement[5565-5849]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5604-5806]:Block[5604-5806]"
    }, {
      "left" : "if(obj1 != null)",
      "right" : "if(obj1 != null)",
      "info" : "IfStatement[5618-5796]:IfStatement[5618-5796]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5635-5709]:Block[5635-5709]"
    }, {
      "left" : "return obj1.getClass() == obj2.getClass();",
      "right" : "return obj1.getClass() == obj2.getClass();",
      "info" : "ReturnStatement[5653-5695]:ReturnStatement[5653-5695]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5715-5796]:Block[5715-5796]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[5733-5745]:ReturnStatement[5733-5745]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5812-5849]:Block[5812-5849]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[5826-5839]:ReturnStatement[5826-5839]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6204-6480]:Block[6204-6480]"
    }, {
      "left" : "Schema scriptSchema = null;",
      "right" : "Schema scriptSchema = null;",
      "info" : "VariableDeclarationStatement[6214-6241]:VariableDeclarationStatement[6214-6241]"
    }, {
      "left" : "String scriptField = conf.get(getScriptSchemaKey(loadFuncSignature));",
      "right" : "String scriptField = conf.get(getScriptSchemaKey(loadFuncSignature));",
      "info" : "VariableDeclarationStatement[6250-6319]:VariableDeclarationStatement[6250-6319]"
    }, {
      "left" : "if (scriptField != null)",
      "right" : "if (scriptField != null)",
      "info" : "IfStatement[6329-6444]:IfStatement[6329-6444]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6354-6444]:Block[6354-6444]"
    }, {
      "left" : "scriptSchema = (Schema) ObjectSerializer.deserialize(scriptField);",
      "right" : "scriptSchema = (Schema) ObjectSerializer.deserialize(scriptField);",
      "info" : "ExpressionStatement[6368-6434]:ExpressionStatement[6368-6434]"
    }, {
      "left" : "return scriptSchema;",
      "right" : "return scriptSchema;",
      "info" : "ReturnStatement[6454-6474]:ReturnStatement[6454-6474]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6552-6611]:Block[6552-6611]"
    }, {
      "left" : "return loadFuncSignature + \".scriptSchema\";",
      "right" : "return loadFuncSignature + \".scriptSchema\";",
      "info" : "ReturnStatement[6562-6605]:ReturnStatement[6562-6605]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6763-8111]:Block[6763-8111]"
    }, {
      "left" : "Configuration conf = job.getConfiguration();",
      "right" : "Configuration conf = job.getConfiguration();",
      "info" : "VariableDeclarationStatement[6773-6817]:VariableDeclarationStatement[6773-6817]"
    }, {
      "left" : "if (checkExistence)",
      "right" : "if (checkExistence)",
      "info" : "IfStatement[6826-7215]:IfStatement[6826-7215]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6846-7215]:Block[6846-7215]"
    }, {
      "left" : "Path path = new Path(location);",
      "right" : "Path path = new Path(location);",
      "info" : "VariableDeclarationStatement[6860-6891]:VariableDeclarationStatement[6860-6891]"
    }, {
      "left" : "if (!FileSystem.get(conf).exists(path))",
      "right" : "if (!FileSystem.get(conf).exists(path))",
      "info" : "IfStatement[6904-7205]:IfStatement[6904-7205]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6944-7205]:Block[6944-7205]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[7179-7191]:ReturnStatement[7179-7191]"
    }, {
      "left" : "ReadToEndLoader loader = new ReadToEndLoader(wrappedLoadFunc, conf, location, 0);",
      "right" : "ReadToEndLoader loader = new ReadToEndLoader(wrappedLoadFunc, conf, location, 0);",
      "info" : "VariableDeclarationStatement[7224-7305]:VariableDeclarationStatement[7224-7305]"
    }, {
      "left" : "Tuple t = loader.getNext();",
      "right" : "Tuple t = loader.getNext();",
      "info" : "VariableDeclarationStatement[7448-7475]:VariableDeclarationStatement[7448-7475]"
    }, {
      "left" : "if (t == null)",
      "right" : "if (t == null)",
      "info" : "IfStatement[7484-7596]:IfStatement[7484-7596]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7499-7596]:Block[7499-7596]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[7574-7586]:ReturnStatement[7574-7586]"
    }, {
      "left" : "int numFields = t.size();",
      "right" : "int numFields = t.size();",
      "info" : "VariableDeclarationStatement[7605-7630]:VariableDeclarationStatement[7605-7630]"
    }, {
      "left" : "Schema s = new Schema();",
      "right" : "Schema s = new Schema();",
      "info" : "VariableDeclarationStatement[7639-7663]:VariableDeclarationStatement[7639-7663]"
    }, {
      "left" : "for (int i = 0; i < numFields; i++)",
      "right" : "for (int i = 0; i < numFields; i++)",
      "info" : "ForStatement[7672-8067]:ForStatement[7672-8067]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7708-8067]:Block[7708-8067]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[7722-8057]:TryStatement[7722-8057]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7726-7805]:Block[7726-7805]"
    }, {
      "left" : "s.add(DataType.determineFieldSchema(t.get(i)));",
      "right" : "s.add(DataType.determineFieldSchema(t.get(i)));",
      "info" : "ExpressionStatement[7744-7791]:ExpressionStatement[7744-7791]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7838-8057]:Block[7838-8057]"
    }, {
      "left" : "int errCode = 2104;",
      "right" : "int errCode = 2104;",
      "info" : "VariableDeclarationStatement[7856-7875]:VariableDeclarationStatement[7856-7875]"
    }, {
      "left" : "String msg = \"Error while determining schema of SequenceFileStorage data.\";",
      "right" : "String msg = \"Error while determining schema of SequenceFileStorage data.\";",
      "info" : "VariableDeclarationStatement[7892-7967]:VariableDeclarationStatement[7892-7967]"
    }, {
      "left" : "throw new ExecException(msg, errCode, PigException.BUG, e);",
      "right" : "throw new ExecException(msg, errCode, PigException.BUG, e);",
      "info" : "ThrowStatement[7984-8043]:ThrowStatement[7984-8043]"
    }, {
      "left" : "return new ResourceSchema(s);",
      "right" : "return new ResourceSchema(s);",
      "info" : "ReturnStatement[8076-8105]:ReturnStatement[8076-8105]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8494-8732]:Block[8494-8732]"
    }, {
      "left" : "LogicalSchema schema = parseSchema(schemaString);",
      "right" : "LogicalSchema schema = parseSchema(schemaString);",
      "info" : "VariableDeclarationStatement[8504-8553]:VariableDeclarationStatement[8504-8553]"
    }, {
      "left" : "Schema result = org.apache.pig.newplan.logical.Util.translateSchema(schema);",
      "right" : "Schema result = org.apache.pig.newplan.logical.Util.translateSchema(schema);",
      "info" : "VariableDeclarationStatement[8562-8638]:VariableDeclarationStatement[8562-8638]"
    }, {
      "left" : "Schema.setSchemaDefaultType(result, DataType.BYTEARRAY);",
      "right" : "Schema.setSchemaDefaultType(result, DataType.BYTEARRAY);",
      "info" : "ExpressionStatement[8647-8703]:ExpressionStatement[8647-8703]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[8712-8726]:ReturnStatement[8712-8726]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9481-9640]:Block[9481-9640]"
    }, {
      "left" : "String unwrappedSchemaString = schemaString.substring(1, schemaString.length() - 1);",
      "right" : "String unwrappedSchemaString = schemaString.substring(1, schemaString.length() - 1);",
      "info" : "VariableDeclarationStatement[9491-9575]:VariableDeclarationStatement[9491-9575]"
    }, {
      "left" : "return getSchemaFromString(unwrappedSchemaString);",
      "right" : "return getSchemaFromString(unwrappedSchemaString);",
      "info" : "ReturnStatement[9584-9634]:ReturnStatement[9584-9634]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9730-9969]:Block[9730-9969]"
    }, {
      "left" : "QueryParserDriver queryParser = new QueryParserDriver( new PigContext(),\n                \"util\", new HashMap<String, String>() ) ;",
      "right" : "QueryParserDriver queryParser = new QueryParserDriver( new PigContext(),\n                \"util\", new HashMap<String, String>() ) ;",
      "info" : "VariableDeclarationStatement[9740-9870]:VariableDeclarationStatement[9740-9870]"
    }, {
      "left" : "LogicalSchema schema = queryParser.parseSchema(schemaString);",
      "right" : "LogicalSchema schema = queryParser.parseSchema(schemaString);",
      "info" : "VariableDeclarationStatement[9879-9940]:VariableDeclarationStatement[9879-9940]"
    }, {
      "left" : "return schema;",
      "right" : "return schema;",
      "info" : "ReturnStatement[9949-9963]:ReturnStatement[9949-9963]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10056-10296]:Block[10056-10296]"
    }, {
      "left" : "QueryParserDriver queryParser = new QueryParserDriver( new PigContext(),\n                \"util\", new HashMap<String, String>() ) ;",
      "right" : "QueryParserDriver queryParser = new QueryParserDriver( new PigContext(),\n                \"util\", new HashMap<String, String>() ) ;",
      "info" : "VariableDeclarationStatement[10066-10196]:VariableDeclarationStatement[10066-10196]"
    }, {
      "left" : "Object constant = queryParser.parseConstant(constantString);",
      "right" : "Object constant = queryParser.parseConstant(constantString);",
      "info" : "VariableDeclarationStatement[10205-10265]:VariableDeclarationStatement[10205-10265]"
    }, {
      "left" : "return constant;",
      "right" : "return constant;",
      "info" : "ReturnStatement[10274-10290]:ReturnStatement[10274-10290]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10736-11280]:Block[10736-11280]"
    }, {
      "left" : "ResourceFieldSchema[] fieldSchemas = schema.getFields();",
      "right" : "ResourceFieldSchema[] fieldSchemas = schema.getFields();",
      "info" : "VariableDeclarationStatement[10746-10802]:VariableDeclarationStatement[10746-10802]"
    }, {
      "left" : "ResourceFieldSchema sourceTagSchema = new ResourceFieldSchema(new FieldSchema(fieldName, DataType.CHARARRAY));",
      "right" : "ResourceFieldSchema sourceTagSchema = new ResourceFieldSchema(new FieldSchema(fieldName, DataType.CHARARRAY));",
      "info" : "VariableDeclarationStatement[10811-10921]:VariableDeclarationStatement[10811-10921]"
    }, {
      "left" : "ResourceFieldSchema[] fieldSchemasWithSourceTag = new ResourceFieldSchema[fieldSchemas.length + 1];",
      "right" : "ResourceFieldSchema[] fieldSchemasWithSourceTag = new ResourceFieldSchema[fieldSchemas.length + 1];",
      "info" : "VariableDeclarationStatement[10930-11029]:VariableDeclarationStatement[10930-11029]"
    }, {
      "left" : "fieldSchemasWithSourceTag[0] = sourceTagSchema;",
      "right" : "fieldSchemasWithSourceTag[0] = sourceTagSchema;",
      "info" : "ExpressionStatement[11038-11085]:ExpressionStatement[11038-11085]"
    }, {
      "left" : "for(int j = 0; j < fieldSchemas.length; j++)",
      "right" : "for(int j = 0; j < fieldSchemas.length; j++)",
      "info" : "ForStatement[11094-11214]:ForStatement[11094-11214]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11139-11214]:Block[11139-11214]"
    }, {
      "left" : "fieldSchemasWithSourceTag[j + 1] = fieldSchemas[j];",
      "right" : "fieldSchemasWithSourceTag[j + 1] = fieldSchemas[j];",
      "info" : "ExpressionStatement[11153-11204]:ExpressionStatement[11153-11204]"
    }, {
      "left" : "return schema.setFields(fieldSchemasWithSourceTag);",
      "right" : "return schema.setFields(fieldSchemasWithSourceTag);",
      "info" : "ReturnStatement[11223-11274]:ReturnStatement[11223-11274]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11645-11712]:Block[11645-11712]"
    }, {
      "left" : "this.hadoopCodecClassName = codecClassName;",
      "right" : "this.hadoopCodecClassName = codecClassName;",
      "info" : "ExpressionStatement[11659-11702]:ExpressionStatement[11659-11702]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11748-11805]:Block[11748-11805]"
    }, {
      "left" : "return this.name().toLowerCase();",
      "right" : "return this.name().toLowerCase();",
      "info" : "ReturnStatement[11762-11795]:ReturnStatement[11762-11795]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11855-11912]:Block[11855-11912]"
    }, {
      "left" : "return this.hadoopCodecClassName;",
      "right" : "return this.hadoopCodecClassName;",
      "info" : "ReturnStatement[11869-11902]:ReturnStatement[11869-11902]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12741-12850]:Block[12741-12850]"
    }, {
      "left" : "this.storageClass = storageClass;",
      "right" : "this.storageClass = storageClass;",
      "info" : "ExpressionStatement[12755-12788]:ExpressionStatement[12755-12788]"
    }, {
      "left" : "this.supportedCodecs = supportedCodecs;",
      "right" : "this.supportedCodecs = supportedCodecs;",
      "info" : "ExpressionStatement[12801-12840]:ExpressionStatement[12801-12840]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12886-12943]:Block[12886-12943]"
    }, {
      "left" : "return this.name().toLowerCase();",
      "right" : "return this.name().toLowerCase();",
      "info" : "ReturnStatement[12900-12933]:ReturnStatement[12900-12933]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13013-13057]:Block[13013-13057]"
    }, {
      "left" : "return storageClass;",
      "right" : "return storageClass;",
      "info" : "ReturnStatement[13027-13047]:ReturnStatement[13027-13047]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13117-13340]:Block[13117-13340]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[13131-13330]:TryStatement[13131-13330]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13135-13249]:Block[13135-13249]"
    }, {
      "left" : "return this.supportedCodecs.contains(TEMPFILE_CODEC.valueOf(codec.toUpperCase()));",
      "right" : "return this.supportedCodecs.contains(TEMPFILE_CODEC.valueOf(codec.toUpperCase()));",
      "info" : "ReturnStatement[13153-13235]:ReturnStatement[13153-13235]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13285-13330]:Block[13285-13330]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[13303-13316]:ReturnStatement[13303-13316]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13390-13775]:Block[13390-13775]"
    }, {
      "left" : "StringBuffer sb = new StringBuffer();",
      "right" : "StringBuffer sb = new StringBuffer();",
      "info" : "VariableDeclarationStatement[13404-13441]:VariableDeclarationStatement[13404-13441]"
    }, {
      "left" : "boolean first = true;",
      "right" : "boolean first = true;",
      "info" : "VariableDeclarationStatement[13454-13475]:VariableDeclarationStatement[13454-13475]"
    }, {
      "left" : "for (TEMPFILE_CODEC codec : supportedCodecs)",
      "right" : "for (TEMPFILE_CODEC codec : supportedCodecs)",
      "info" : "EnhancedForStatement[13488-13731]:EnhancedForStatement[13488-13731]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13533-13731]:Block[13533-13731]"
    }, {
      "left" : "if(first)",
      "right" : "if(first)",
      "info" : "IfStatement[13551-13676]:IfStatement[13551-13676]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13561-13615]:Block[13561-13615]"
    }, {
      "left" : "first = false;",
      "right" : "first = false;",
      "info" : "ExpressionStatement[13583-13597]:ExpressionStatement[13583-13597]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13621-13676]:Block[13621-13676]"
    }, {
      "left" : "sb.append(\",\");",
      "right" : "sb.append(\",\");",
      "info" : "ExpressionStatement[13643-13658]:ExpressionStatement[13643-13658]"
    }, {
      "left" : "sb.append(codec.name());",
      "right" : "sb.append(codec.name());",
      "info" : "ExpressionStatement[13693-13717]:ExpressionStatement[13693-13717]"
    }, {
      "left" : "return sb.toString();",
      "right" : "return sb.toString();",
      "info" : "ReturnStatement[13744-13765]:ReturnStatement[13744-13765]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13856-14348]:Block[13856-14348]"
    }, {
      "left" : "if (pigContext == null)",
      "right" : "if (pigContext == null)",
      "info" : "IfStatement[13866-13938]:IfStatement[13866-13938]"
    }, {
      "left" : "return InterStorage.class.getName();",
      "right" : "return InterStorage.class.getName();",
      "info" : "ReturnStatement[13902-13938]:ReturnStatement[13902-13938]"
    }, {
      "left" : "String codec = pigContext.getProperties().getProperty(PigConfiguration.PIG_TEMP_FILE_COMPRESSION_CODEC, \"\");",
      "right" : "String codec = pigContext.getProperties().getProperty(PigConfiguration.PIG_TEMP_FILE_COMPRESSION_CODEC, \"\");",
      "info" : "VariableDeclarationStatement[13948-14056]:VariableDeclarationStatement[13948-14056]"
    }, {
      "left" : "if (codec.equals(TEMPFILE_CODEC.LZO.lowerName()))",
      "right" : "if (codec.equals(TEMPFILE_CODEC.LZO.lowerName()))",
      "info" : "IfStatement[14065-14251]:IfStatement[14065-14251]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14115-14251]:Block[14115-14251]"
    }, {
      "left" : "pigContext.getProperties().setProperty(\"io.compression.codec.lzo.class\", \"com.hadoop.compression.lzo.LzoCodec\");",
      "right" : "pigContext.getProperties().setProperty(\"io.compression.codec.lzo.class\", \"com.hadoop.compression.lzo.LzoCodec\");",
      "info" : "ExpressionStatement[14129-14241]:ExpressionStatement[14129-14241]"
    }, {
      "left" : "return getTmpFileStorage(pigContext.getProperties()).getStorageClass().getName();",
      "right" : "return getTmpFileStorage(pigContext.getProperties()).getStorageClass().getName();",
      "info" : "ReturnStatement[14261-14342]:ReturnStatement[14261-14342]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14449-14813]:Block[14449-14813]"
    }, {
      "left" : "Class<? extends FileInputLoadFunc> storageClass = getTmpFileStorageClass(ConfigurationUtil.toProperties(conf));",
      "right" : "Class<? extends FileInputLoadFunc> storageClass = getTmpFileStorageClass(ConfigurationUtil.toProperties(conf));",
      "info" : "VariableDeclarationStatement[14459-14570]:VariableDeclarationStatement[14459-14570]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[14579-14807]:TryStatement[14579-14807]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14583-14641]:Block[14583-14641]"
    }, {
      "left" : "return storageClass.newInstance();",
      "right" : "return storageClass.newInstance();",
      "info" : "ReturnStatement[14597-14631]:ReturnStatement[14597-14631]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14675-14724]:Block[14675-14724]"
    }, {
      "left" : "throw new IOException(e);",
      "right" : "throw new IOException(e);",
      "info" : "ThrowStatement[14689-14714]:ThrowStatement[14689-14714]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14758-14807]:Block[14758-14807]"
    }, {
      "left" : "throw new IOException(e);",
      "right" : "throw new IOException(e);",
      "info" : "ThrowStatement[14772-14797]:ThrowStatement[14772-14797]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14914-14984]:Block[14914-14984]"
    }, {
      "left" : "return getTmpFileStorage(properties).getStorageClass();",
      "right" : "return getTmpFileStorage(properties).getStorageClass();",
      "info" : "ReturnStatement[14923-14978]:ReturnStatement[14923-14978]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15063-15992]:Block[15063-15992]"
    }, {
      "left" : "boolean tmpFileCompression = properties.getProperty(\n                PigConfiguration.PIG_ENABLE_TEMP_FILE_COMPRESSION, \"false\").equals(\"true\");",
      "right" : "boolean tmpFileCompression = properties.getProperty(\n                PigConfiguration.PIG_ENABLE_TEMP_FILE_COMPRESSION, \"false\").equals(\"true\");",
      "info" : "VariableDeclarationStatement[15073-15217]:VariableDeclarationStatement[15073-15217]"
    }, {
      "left" : "String tmpFileCompressionStorage =\n                properties.getProperty(PigConfiguration.PIG_TEMP_FILE_COMPRESSION_STORAGE,\n                        TEMPFILE_STORAGE.TFILE.lowerName());",
      "right" : "String tmpFileCompressionStorage =\n                properties.getProperty(PigConfiguration.PIG_TEMP_FILE_COMPRESSION_STORAGE,\n                        TEMPFILE_STORAGE.TFILE.lowerName());",
      "info" : "VariableDeclarationStatement[15226-15412]:VariableDeclarationStatement[15226-15412]"
    }, {
      "left" : "if (!tmpFileCompression)",
      "right" : "if (!tmpFileCompression)",
      "info" : "IfStatement[15422-15986]:IfStatement[15422-15986]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15447-15501]:Block[15447-15501]"
    }, {
      "left" : "return TEMPFILE_STORAGE.INTER;",
      "right" : "return TEMPFILE_STORAGE.INTER;",
      "info" : "ReturnStatement[15461-15491]:ReturnStatement[15461-15491]"
    }, {
      "left" : "if (TEMPFILE_STORAGE.SEQFILE.lowerName().equals(tmpFileCompressionStorage))",
      "right" : "if (TEMPFILE_STORAGE.SEQFILE.lowerName().equals(tmpFileCompressionStorage))",
      "info" : "IfStatement[15507-15986]:IfStatement[15507-15986]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15583-15639]:Block[15583-15639]"
    }, {
      "left" : "return TEMPFILE_STORAGE.SEQFILE;",
      "right" : "return TEMPFILE_STORAGE.SEQFILE;",
      "info" : "ReturnStatement[15597-15629]:ReturnStatement[15597-15629]"
    }, {
      "left" : "if (TEMPFILE_STORAGE.TFILE.lowerName().equals(tmpFileCompressionStorage))",
      "right" : "if (TEMPFILE_STORAGE.TFILE.lowerName().equals(tmpFileCompressionStorage))",
      "info" : "IfStatement[15645-15986]:IfStatement[15645-15986]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15719-15773]:Block[15719-15773]"
    }, {
      "left" : "return TEMPFILE_STORAGE.TFILE;",
      "right" : "return TEMPFILE_STORAGE.TFILE;",
      "info" : "ReturnStatement[15733-15763]:ReturnStatement[15733-15763]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15779-15986]:Block[15779-15986]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Unsupported storage format \" + tmpFileCompressionStorage +\n                    \". Should be one of \" + Arrays.toString(TEMPFILE_STORAGE.values()));",
      "right" : "throw new IllegalArgumentException(\"Unsupported storage format \" + tmpFileCompressionStorage +\n                    \". Should be one of \" + Arrays.toString(TEMPFILE_STORAGE.values()));",
      "info" : "ThrowStatement[15793-15976]:ThrowStatement[15793-15976]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16068-16679]:Block[16068-16679]"
    }, {
      "left" : "String codec = conf.get(\n                PigConfiguration.PIG_TEMP_FILE_COMPRESSION_CODEC, \"\");",
      "right" : "String codec = conf.get(\n                PigConfiguration.PIG_TEMP_FILE_COMPRESSION_CODEC, \"\");",
      "info" : "VariableDeclarationStatement[16078-16173]:VariableDeclarationStatement[16078-16173]"
    }, {
      "left" : "if (\"\".equals(codec) && conf.get(MRConfiguration.OUTPUT_COMPRESSION_CODEC) != null)",
      "right" : "if (\"\".equals(codec) && conf.get(MRConfiguration.OUTPUT_COMPRESSION_CODEC) != null)",
      "info" : "IfStatement[16182-16643]:IfStatement[16182-16643]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16266-16345]:Block[16266-16345]"
    }, {
      "left" : "conf.setBoolean(MRConfiguration.OUTPUT_COMPRESS, true);",
      "right" : "conf.setBoolean(MRConfiguration.OUTPUT_COMPRESS, true);",
      "info" : "ExpressionStatement[16280-16335]:ExpressionStatement[16280-16335]"
    }, {
      "left" : "if (TEMPFILE_STORAGE.SEQFILE.ensureCodecSupported(codec))",
      "right" : "if (TEMPFILE_STORAGE.SEQFILE.ensureCodecSupported(codec))",
      "info" : "IfStatement[16351-16643]:IfStatement[16351-16643]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16409-16643]:Block[16409-16643]"
    }, {
      "left" : "conf.setBoolean(MRConfiguration.OUTPUT_COMPRESS, true);",
      "right" : "conf.setBoolean(MRConfiguration.OUTPUT_COMPRESS, true);",
      "info" : "ExpressionStatement[16423-16478]:ExpressionStatement[16423-16478]"
    }, {
      "left" : "conf.set(MRConfiguration.OUTPUT_COMPRESSION_CODEC,\n                    TEMPFILE_CODEC.valueOf(codec.toUpperCase()).getHadoopCodecClassName());",
      "right" : "conf.set(MRConfiguration.OUTPUT_COMPRESSION_CODEC,\n                    TEMPFILE_CODEC.valueOf(codec.toUpperCase()).getHadoopCodecClassName());",
      "info" : "ExpressionStatement[16491-16633]:ExpressionStatement[16491-16633]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16793-18754]:Block[16793-18754]"
    }, {
      "left" : "if (pigContext == null)",
      "right" : "if (pigContext == null)",
      "info" : "IfStatement[16908-16963]:IfStatement[16908-16963]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16932-16963]:Block[16932-16963]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[16946-16953]:ReturnStatement[16946-16953]"
    }, {
      "left" : "TEMPFILE_STORAGE storage = getTmpFileStorage(pigContext.getProperties());",
      "right" : "TEMPFILE_STORAGE storage = getTmpFileStorage(pigContext.getProperties());",
      "info" : "VariableDeclarationStatement[16972-17045]:VariableDeclarationStatement[16972-17045]"
    }, {
      "left" : "String codec = pigContext.getProperties().getProperty(\n                PigConfiguration.PIG_TEMP_FILE_COMPRESSION_CODEC, \"\");",
      "right" : "String codec = pigContext.getProperties().getProperty(\n                PigConfiguration.PIG_TEMP_FILE_COMPRESSION_CODEC, \"\");",
      "info" : "VariableDeclarationStatement[17054-17179]:VariableDeclarationStatement[17054-17179]"
    }, {
      "left" : "switch (storage) {\n        case INTER:\n            break;\n        case SEQFILE:\n            conf.set(PigConfiguration.PIG_TEMP_FILE_COMPRESSION_STORAGE, \"seqfile\");\n            if (\"\".equals(codec)) {\n                // codec is not specified, ensure  is set\n                log.warn(\"Temporary file compression codec is not specified. Using \" +\n                         MRConfiguration.OUTPUT_COMPRESSION_CODEC + \" property.\");\n                if(conf.get(MRConfiguration.OUTPUT_COMPRESSION_CODEC) == null) {\n                    throw new IOException(MRConfiguration.OUTPUT_COMPRESSION_CODEC + \" is not set\");\n                }\n            } else if(storage.ensureCodecSupported(codec)) {\n                // do nothing\n            } else {\n                throw new IOException(\"Invalid temporary file compression codec [\" + codec + \"]. \" +\n                        \"Expected compression codecs for \" + storage.getStorageClass().getName() +\n                        \" are \" + storage.supportedCodecsToString() + \".\");\n            }\n            break;\n        case TFILE:\n            if(storage.ensureCodecSupported(codec)) {\n                conf.set(PigConfiguration.PIG_TEMP_FILE_COMPRESSION_CODEC, codec.toLowerCase());\n            } else {\n                throw new IOException(\"Invalid temporary file compression codec [\" + codec + \"]. \" +\n                        \"Expected compression codecs for \" + storage.getStorageClass().getName() +\n                        \" are \" + storage.supportedCodecsToString() + \".\");\n            }\n            break;\n        }",
      "right" : "switch (storage) {\n        case INTER:\n            break;\n        case SEQFILE:\n            conf.set(PigConfiguration.PIG_TEMP_FILE_COMPRESSION_STORAGE, \"seqfile\");\n            if (\"\".equals(codec)) {\n                // codec is not specified, ensure  is set\n                log.warn(\"Temporary file compression codec is not specified. Using \" +\n                         MRConfiguration.OUTPUT_COMPRESSION_CODEC + \" property.\");\n                if(conf.get(MRConfiguration.OUTPUT_COMPRESSION_CODEC) == null) {\n                    throw new IOException(MRConfiguration.OUTPUT_COMPRESSION_CODEC + \" is not set\");\n                }\n            } else if(storage.ensureCodecSupported(codec)) {\n                // do nothing\n            } else {\n                throw new IOException(\"Invalid temporary file compression codec [\" + codec + \"]. \" +\n                        \"Expected compression codecs for \" + storage.getStorageClass().getName() +\n                        \" are \" + storage.supportedCodecsToString() + \".\");\n            }\n            break;\n        case TFILE:\n            if(storage.ensureCodecSupported(codec)) {\n                conf.set(PigConfiguration.PIG_TEMP_FILE_COMPRESSION_CODEC, codec.toLowerCase());\n            } else {\n                throw new IOException(\"Invalid temporary file compression codec [\" + codec + \"]. \" +\n                        \"Expected compression codecs for \" + storage.getStorageClass().getName() +\n                        \" are \" + storage.supportedCodecsToString() + \".\");\n            }\n            break;\n        }",
      "info" : "SwitchStatement[17188-18748]:SwitchStatement[17188-18748]"
    }, {
      "left" : "case INTER:",
      "right" : "case INTER:",
      "info" : "SwitchCase[17215-17226]:SwitchCase[17215-17226]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[17239-17245]:BreakStatement[17239-17245]"
    }, {
      "left" : "case SEQFILE:",
      "right" : "case SEQFILE:",
      "info" : "SwitchCase[17254-17267]:SwitchCase[17254-17267]"
    }, {
      "left" : "conf.set(PigConfiguration.PIG_TEMP_FILE_COMPRESSION_STORAGE, \"seqfile\");",
      "right" : "conf.set(PigConfiguration.PIG_TEMP_FILE_COMPRESSION_STORAGE, \"seqfile\");",
      "info" : "ExpressionStatement[17280-17352]:ExpressionStatement[17280-17352]"
    }, {
      "left" : "if (\"\".equals(codec))",
      "right" : "if (\"\".equals(codec))",
      "info" : "IfStatement[17365-18218]:IfStatement[17365-18218]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17387-17830]:Block[17387-17830]"
    }, {
      "left" : "log.warn(\"Temporary file compression codec is not specified. Using \" +\n                         MRConfiguration.OUTPUT_COMPRESSION_CODEC + \" property.\");",
      "right" : "log.warn(\"Temporary file compression codec is not specified. Using \" +\n                         MRConfiguration.OUTPUT_COMPRESSION_CODEC + \" property.\");",
      "info" : "ExpressionStatement[17463-17616]:ExpressionStatement[17463-17616]"
    }, {
      "left" : "if(conf.get(MRConfiguration.OUTPUT_COMPRESSION_CODEC) == null)",
      "right" : "if(conf.get(MRConfiguration.OUTPUT_COMPRESSION_CODEC) == null)",
      "info" : "IfStatement[17633-17816]:IfStatement[17633-17816]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17696-17816]:Block[17696-17816]"
    }, {
      "left" : "throw new IOException(MRConfiguration.OUTPUT_COMPRESSION_CODEC + \" is not set\");",
      "right" : "throw new IOException(MRConfiguration.OUTPUT_COMPRESSION_CODEC + \" is not set\");",
      "info" : "ThrowStatement[17718-17798]:ThrowStatement[17718-17798]"
    }, {
      "left" : "if(storage.ensureCodecSupported(codec))",
      "right" : "if(storage.ensureCodecSupported(codec))",
      "info" : "IfStatement[17836-18218]:IfStatement[17836-18218]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17876-17921]:Block[17876-17921]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17927-18218]:Block[17927-18218]"
    }, {
      "left" : "throw new IOException(\"Invalid temporary file compression codec [\" + codec + \"]. \" +\n                        \"Expected compression codecs for \" + storage.getStorageClass().getName() +\n                        \" are \" + storage.supportedCodecsToString() + \".\");",
      "right" : "throw new IOException(\"Invalid temporary file compression codec [\" + codec + \"]. \" +\n                        \"Expected compression codecs for \" + storage.getStorageClass().getName() +\n                        \" are \" + storage.supportedCodecsToString() + \".\");",
      "info" : "ThrowStatement[17945-18204]:ThrowStatement[17945-18204]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[18231-18237]:BreakStatement[18231-18237]"
    }, {
      "left" : "case TFILE:",
      "right" : "case TFILE:",
      "info" : "SwitchCase[18246-18257]:SwitchCase[18246-18257]"
    }, {
      "left" : "if(storage.ensureCodecSupported(codec))",
      "right" : "if(storage.ensureCodecSupported(codec))",
      "info" : "IfStatement[18270-18719]:IfStatement[18270-18719]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18310-18422]:Block[18310-18422]"
    }, {
      "left" : "conf.set(PigConfiguration.PIG_TEMP_FILE_COMPRESSION_CODEC, codec.toLowerCase());",
      "right" : "conf.set(PigConfiguration.PIG_TEMP_FILE_COMPRESSION_CODEC, codec.toLowerCase());",
      "info" : "ExpressionStatement[18328-18408]:ExpressionStatement[18328-18408]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18428-18719]:Block[18428-18719]"
    }, {
      "left" : "throw new IOException(\"Invalid temporary file compression codec [\" + codec + \"]. \" +\n                        \"Expected compression codecs for \" + storage.getStorageClass().getName() +\n                        \" are \" + storage.supportedCodecsToString() + \".\");",
      "right" : "throw new IOException(\"Invalid temporary file compression codec [\" + codec + \"]. \" +\n                        \"Expected compression codecs for \" + storage.getStorageClass().getName() +\n                        \" are \" + storage.supportedCodecsToString() + \".\");",
      "info" : "ThrowStatement[18446-18705]:ThrowStatement[18446-18705]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[18732-18738]:BreakStatement[18732-18738]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18814-18996]:Block[18814-18996]"
    }, {
      "left" : "StringBuilder str = new StringBuilder();",
      "right" : "StringBuilder str = new StringBuilder();",
      "info" : "VariableDeclarationStatement[18824-18864]:VariableDeclarationStatement[18824-18864]"
    }, {
      "left" : "for(String s: arr)",
      "right" : "for(String s: arr)",
      "info" : "EnhancedForStatement[18873-18959]:EnhancedForStatement[18873-18959]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18892-18959]:Block[18892-18959]"
    }, {
      "left" : "str.append(s);",
      "right" : "str.append(s);",
      "info" : "ExpressionStatement[18906-18920]:ExpressionStatement[18906-18920]"
    }, {
      "left" : "str.append(\" \");",
      "right" : "str.append(\" \");",
      "info" : "ExpressionStatement[18933-18949]:ExpressionStatement[18933-18949]"
    }, {
      "left" : "return str.toString();",
      "right" : "return str.toString();",
      "info" : "ReturnStatement[18968-18990]:ReturnStatement[18968-18990]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19077-19358]:Block[19077-19358]"
    }, {
      "left" : "List<Schema.FieldSchema> fieldSchemas = Lists.newArrayListWithExpectedSize(types.length);",
      "right" : "List<Schema.FieldSchema> fieldSchemas = Lists.newArrayListWithExpectedSize(types.length);",
      "info" : "VariableDeclarationStatement[19087-19176]:VariableDeclarationStatement[19087-19176]"
    }, {
      "left" : "for (byte type : types)",
      "right" : "for (byte type : types)",
      "info" : "EnhancedForStatement[19185-19286]:EnhancedForStatement[19185-19286]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19209-19286]:Block[19209-19286]"
    }, {
      "left" : "fieldSchemas.add(new Schema.FieldSchema(null, type));",
      "right" : "fieldSchemas.add(new Schema.FieldSchema(null, type));",
      "info" : "ExpressionStatement[19223-19276]:ExpressionStatement[19223-19276]"
    }, {
      "left" : "return new FuncSpec(className, new Schema(fieldSchemas));",
      "right" : "return new FuncSpec(className, new Schema(fieldSchemas));",
      "info" : "ReturnStatement[19295-19352]:ReturnStatement[19295-19352]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19698-19747]:Block[19698-19747]"
    }, {
      "left" : "return str.replace(\"\\\\\\\\\", \"\\\\\");",
      "right" : "return str.replace(\"\\\\\\\\\", \"\\\\\");",
      "info" : "ReturnStatement[19708-19741]:ReturnStatement[19708-19741]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19870-20555]:Block[19870-20555]"
    }, {
      "left" : "if (a==null && b==null)",
      "right" : "if (a==null && b==null)",
      "info" : "IfStatement[19880-19928]:IfStatement[19880-19928]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[19916-19928]:ReturnStatement[19916-19928]"
    }, {
      "left" : "Collection<O> result = null;",
      "right" : "Collection<O> result = null;",
      "info" : "VariableDeclarationStatement[19937-19965]:VariableDeclarationStatement[19937-19965]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[19974-20201]:TryStatement[19974-20201]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19978-20137]:Block[19978-20137]"
    }, {
      "left" : "if (a!=null)",
      "right" : "if (a!=null)",
      "info" : "IfStatement[19992-20127]:IfStatement[19992-20127]"
    }, {
      "left" : "result = a.getClass().newInstance();",
      "right" : "result = a.getClass().newInstance();",
      "info" : "ExpressionStatement[20021-20057]:ExpressionStatement[20021-20057]"
    }, {
      "left" : "result = b.getClass().newInstance();",
      "right" : "result = b.getClass().newInstance();",
      "info" : "ExpressionStatement[20091-20127]:ExpressionStatement[20091-20127]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20158-20201]:Block[20158-20201]"
    }, {
      "left" : "if (a==null)",
      "right" : "if (a==null)",
      "info" : "IfStatement[20210-20525]:IfStatement[20210-20525]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20223-20264]:Block[20223-20264]"
    }, {
      "left" : "result.addAll(b);",
      "right" : "result.addAll(b);",
      "info" : "ExpressionStatement[20237-20254]:ExpressionStatement[20237-20254]"
    }, {
      "left" : "if (b==null)",
      "right" : "if (b==null)",
      "info" : "IfStatement[20278-20525]:IfStatement[20278-20525]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20291-20332]:Block[20291-20332]"
    }, {
      "left" : "result.addAll(a);",
      "right" : "result.addAll(a);",
      "info" : "ExpressionStatement[20305-20322]:ExpressionStatement[20305-20322]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20346-20525]:Block[20346-20525]"
    }, {
      "left" : "result.addAll(a);",
      "right" : "result.addAll(a);",
      "info" : "ExpressionStatement[20360-20377]:ExpressionStatement[20360-20377]"
    }, {
      "left" : "for (O o : b)",
      "right" : "for (O o : b)",
      "info" : "EnhancedForStatement[20390-20515]:EnhancedForStatement[20390-20515]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20404-20515]:Block[20404-20515]"
    }, {
      "left" : "if (!result.contains(o))",
      "right" : "if (!result.contains(o))",
      "info" : "IfStatement[20422-20501]:IfStatement[20422-20501]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20447-20501]:Block[20447-20501]"
    }, {
      "left" : "result.add(o);",
      "right" : "result.add(o);",
      "info" : "ExpressionStatement[20469-20483]:ExpressionStatement[20469-20483]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[20535-20549]:ReturnStatement[20535-20549]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20645-21160]:Block[20645-21160]"
    }, {
      "left" : "final String bootupFile = properties.getProperty(\"pig.load.default.statements\", System.getProperty(\"user.home\") + \"/.pigbootup\");",
      "right" : "final String bootupFile = properties.getProperty(\"pig.load.default.statements\", System.getProperty(\"user.home\") + \"/.pigbootup\");",
      "info" : "VariableDeclarationStatement[20716-20845]:VariableDeclarationStatement[20716-20845]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[20854-21154]:TryStatement[20854-21154]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20858-21015]:Block[20858-21015]"
    }, {
      "left" : "final InputStream inputSteam = new FileInputStream(new File(bootupFile));",
      "right" : "final InputStream inputSteam = new FileInputStream(new File(bootupFile));",
      "info" : "VariableDeclarationStatement[20872-20945]:VariableDeclarationStatement[20872-20945]"
    }, {
      "left" : "return new SequenceInputStream(inputSteam, in);",
      "right" : "return new SequenceInputStream(inputSteam, in);",
      "info" : "ReturnStatement[20958-21005]:ReturnStatement[20958-21005]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21048-21154]:Block[21048-21154]"
    }, {
      "left" : "log.info(\"Default bootup file \" +bootupFile+ \" not found\");",
      "right" : "log.info(\"Default bootup file \" +bootupFile+ \" not found\");",
      "info" : "ExpressionStatement[21062-21121]:ExpressionStatement[21062-21121]"
    }, {
      "left" : "return in;",
      "right" : "return in;",
      "info" : "ReturnStatement[21134-21144]:ReturnStatement[21134-21144]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21557-22677]:Block[21557-22677]"
    }, {
      "left" : "if (jobConf != null && properties != null)",
      "right" : "if (jobConf != null && properties != null)",
      "info" : "IfStatement[21714-22671]:IfStatement[21714-22671]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21757-22671]:Block[21757-22671]"
    }, {
      "left" : "Enumeration<Object> propertiesIter = properties.keys();",
      "right" : "Enumeration<Object> propertiesIter = properties.keys();",
      "info" : "VariableDeclarationStatement[21897-21952]:VariableDeclarationStatement[21897-21952]"
    }, {
      "left" : "while (propertiesIter.hasMoreElements())",
      "right" : "while (propertiesIter.hasMoreElements())",
      "info" : "WhileStatement[21965-22313]:WhileStatement[21965-22313]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22006-22313]:Block[22006-22313]"
    }, {
      "left" : "String key = (String) propertiesIter.nextElement();",
      "right" : "String key = (String) propertiesIter.nextElement();",
      "info" : "VariableDeclarationStatement[22024-22075]:VariableDeclarationStatement[22024-22075]"
    }, {
      "left" : "String val = properties.getProperty(key);",
      "right" : "String val = properties.getProperty(key);",
      "info" : "VariableDeclarationStatement[22092-22133]:VariableDeclarationStatement[22092-22133]"
    }, {
      "left" : "if (!key.equals(\"user.name\"))",
      "right" : "if (!key.equals(\"user.name\"))",
      "info" : "IfStatement[22207-22299]:IfStatement[22207-22299]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22237-22299]:Block[22237-22299]"
    }, {
      "left" : "jobConf.set(key, val);",
      "right" : "jobConf.set(key, val);",
      "info" : "ExpressionStatement[22259-22281]:ExpressionStatement[22259-22281]"
    }, {
      "left" : "properties.clear();",
      "right" : "properties.clear();",
      "info" : "ExpressionStatement[22387-22406]:ExpressionStatement[22387-22406]"
    }, {
      "left" : "Iterator<Map.Entry<String, String>> iter = jobConf.iterator();",
      "right" : "Iterator<Map.Entry<String, String>> iter = jobConf.iterator();",
      "info" : "VariableDeclarationStatement[22419-22481]:VariableDeclarationStatement[22419-22481]"
    }, {
      "left" : "while (iter.hasNext())",
      "right" : "while (iter.hasNext())",
      "info" : "WhileStatement[22494-22661]:WhileStatement[22494-22661]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22517-22661]:Block[22517-22661]"
    }, {
      "left" : "Map.Entry<String, String> entry = iter.next();",
      "right" : "Map.Entry<String, String> entry = iter.next();",
      "info" : "VariableDeclarationStatement[22535-22581]:VariableDeclarationStatement[22535-22581]"
    }, {
      "left" : "properties.put(entry.getKey(), entry.getValue());",
      "right" : "properties.put(entry.getKey(), entry.getValue());",
      "info" : "ExpressionStatement[22598-22647]:ExpressionStatement[22598-22647]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22735-22919]:Block[22735-22919]"
    }, {
      "left" : "ByteArrayOutputStream baos = new ByteArrayOutputStream();",
      "right" : "ByteArrayOutputStream baos = new ByteArrayOutputStream();",
      "info" : "VariableDeclarationStatement[22745-22802]:VariableDeclarationStatement[22745-22802]"
    }, {
      "left" : "PrintStream ps = new PrintStream(baos);",
      "right" : "PrintStream ps = new PrintStream(baos);",
      "info" : "VariableDeclarationStatement[22811-22850]:VariableDeclarationStatement[22811-22850]"
    }, {
      "left" : "e.printStackTrace(ps);",
      "right" : "e.printStackTrace(ps);",
      "info" : "ExpressionStatement[22859-22881]:ExpressionStatement[22859-22881]"
    }, {
      "left" : "return baos.toString();",
      "right" : "return baos.toString();",
      "info" : "ReturnStatement[22890-22913]:ReturnStatement[22890-22913]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22998-23119]:Block[22998-23119]"
    }, {
      "left" : "return pigContext.getExecType().isLocal() || conf.getBoolean(PigImplConstants.CONVERTED_TO_LOCAL, false);",
      "right" : "return pigContext.getExecType().isLocal() || conf.getBoolean(PigImplConstants.CONVERTED_TO_LOCAL, false);",
      "info" : "ReturnStatement[23008-23113]:ReturnStatement[23008-23113]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23473-24308]:Block[23473-24308]"
    }, {
      "left" : "if (expr == null)",
      "right" : "if (expr == null)",
      "info" : "IfStatement[23483-23537]:IfStatement[23483-23537]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23501-23537]:Block[23501-23537]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[23515-23527]:ReturnStatement[23515-23527]"
    }, {
      "left" : "Matcher match = varPat.matcher(\"\");",
      "right" : "Matcher match = varPat.matcher(\"\");",
      "info" : "VariableDeclarationStatement[23546-23581]:VariableDeclarationStatement[23546-23581]"
    }, {
      "left" : "String eval = expr;",
      "right" : "String eval = expr;",
      "info" : "VariableDeclarationStatement[23590-23609]:VariableDeclarationStatement[23590-23609]"
    }, {
      "left" : "for(int s=0; s<MAX_SUBST; s++)",
      "right" : "for(int s=0; s<MAX_SUBST; s++)",
      "info" : "ForStatement[23618-24177]:ForStatement[23618-24177]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23649-24177]:Block[23649-24177]"
    }, {
      "left" : "match.reset(eval);",
      "right" : "match.reset(eval);",
      "info" : "ExpressionStatement[23663-23681]:ExpressionStatement[23663-23681]"
    }, {
      "left" : "if (!match.find())",
      "right" : "if (!match.find())",
      "info" : "IfStatement[23694-23757]:IfStatement[23694-23757]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23713-23757]:Block[23713-23757]"
    }, {
      "left" : "return eval;",
      "right" : "return eval;",
      "info" : "ReturnStatement[23731-23743]:ReturnStatement[23731-23743]"
    }, {
      "left" : "String var = match.group();",
      "right" : "String var = match.group();",
      "info" : "VariableDeclarationStatement[23770-23797]:VariableDeclarationStatement[23770-23797]"
    }, {
      "left" : "var = var.substring(2, var.length()-1);",
      "right" : "var = var.substring(2, var.length()-1);",
      "info" : "ExpressionStatement[23810-23849]:ExpressionStatement[23810-23849]"
    }, {
      "left" : "String val = null;",
      "right" : "String val = null;",
      "info" : "VariableDeclarationStatement[23880-23898]:VariableDeclarationStatement[23880-23898]"
    }, {
      "left" : "val = System.getProperty(var);",
      "right" : "val = System.getProperty(var);",
      "info" : "ExpressionStatement[23911-23941]:ExpressionStatement[23911-23941]"
    }, {
      "left" : "if (val == null)",
      "right" : "if (val == null)",
      "info" : "IfStatement[23954-24056]:IfStatement[23954-24056]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23971-24056]:Block[23971-24056]"
    }, {
      "left" : "return eval;",
      "right" : "return eval;",
      "info" : "ReturnStatement[23989-24001]:ReturnStatement[23989-24001]"
    }, {
      "left" : "eval = eval.substring(0, match.start())+val+eval.substring(match.end());",
      "right" : "eval = eval.substring(0, match.start())+val+eval.substring(match.end());",
      "info" : "ExpressionStatement[24095-24167]:ExpressionStatement[24095-24167]"
    }, {
      "left" : "throw new IllegalStateException(\"Variable substitution depth too large: \"\n                + MAX_SUBST + \" \" + expr);",
      "right" : "throw new IllegalStateException(\"Variable substitution depth too large: \"\n                + MAX_SUBST + \" \" + expr);",
      "info" : "ThrowStatement[24186-24302]:ThrowStatement[24186-24302]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24508-24597]:Block[24508-24597]"
    }, {
      "left" : "return (!(p.getName().startsWith(\"_\") || p.getName().startsWith(\".\")));",
      "right" : "return (!(p.getName().startsWith(\"_\") || p.getName().startsWith(\".\")));",
      "info" : "ReturnStatement[24518-24589]:ReturnStatement[24518-24589]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26342-27077]:Block[26484-27219]"
    }, {
      "left" : "int ret = 0;",
      "right" : "int ret = 0;",
      "info" : "VariableDeclarationStatement[26352-26364]:VariableDeclarationStatement[26494-26506]"
    }, {
      "left" : "if(input == null || input.equals(\"\"))",
      "right" : "if(input == null || input.equals(\"\"))",
      "info" : "IfStatement[26373-26434]:IfStatement[26515-26576]"
    }, {
      "left" : "return ret;",
      "right" : "return ret;",
      "info" : "ReturnStatement[26423-26434]:ReturnStatement[26565-26576]"
    }, {
      "left" : "Matcher m = JAVA_MAXHEAPSIZE_PATTERN.matcher(input);",
      "right" : "Matcher m = JAVA_MAXHEAPSIZE_PATTERN.matcher(input);",
      "info" : "VariableDeclarationStatement[26443-26495]:VariableDeclarationStatement[26585-26637]"
    }, {
      "left" : "String heapStr = null;",
      "right" : "String heapStr = null;",
      "info" : "VariableDeclarationStatement[26504-26526]:VariableDeclarationStatement[26646-26668]"
    }, {
      "left" : "String heapNum = null;",
      "right" : "String heapNum = null;",
      "info" : "VariableDeclarationStatement[26535-26557]:VariableDeclarationStatement[26677-26699]"
    }, {
      "left" : "while (m.find())",
      "right" : "while (m.find())",
      "info" : "WhileStatement[26663-26759]:WhileStatement[26805-26901]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26680-26759]:Block[26822-26901]"
    }, {
      "left" : "heapStr = m.group(1);",
      "right" : "heapStr = m.group(1);",
      "info" : "ExpressionStatement[26694-26715]:ExpressionStatement[26836-26857]"
    }, {
      "left" : "heapNum = m.group(2);",
      "right" : "heapNum = m.group(2);",
      "info" : "ExpressionStatement[26728-26749]:ExpressionStatement[26870-26891]"
    }, {
      "left" : "if (heapStr != null)",
      "right" : "if (heapStr != null)",
      "info" : "IfStatement[26768-27051]:IfStatement[26910-27193]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26789-27051]:Block[26931-27193]"
    }, {
      "left" : "if(heapStr.endsWith(\"g\") || heapStr.endsWith(\"G\"))",
      "right" : "if(heapStr.endsWith(\"g\") || heapStr.endsWith(\"G\"))",
      "info" : "IfStatement[26849-27041]:IfStatement[26991-27183]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26900-26971]:Block[27042-27113]"
    }, {
      "left" : "ret = Integer.parseInt(heapNum) * 1024;",
      "right" : "ret = Integer.parseInt(heapNum) * 1024;",
      "info" : "ExpressionStatement[26918-26957]:ExpressionStatement[27060-27099]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26977-27041]:Block[27119-27183]"
    }, {
      "left" : "ret = Integer.parseInt(heapNum);",
      "right" : "ret = Integer.parseInt(heapNum);",
      "info" : "ExpressionStatement[26995-27027]:ExpressionStatement[27137-27169]"
    }, {
      "left" : "return ret;",
      "right" : "return ret;",
      "info" : "ReturnStatement[27060-27071]:ReturnStatement[27202-27213]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27141-27434]:Block[27283-27576]"
    }, {
      "left" : "String dtzStr = conf.get(PigConfiguration.PIG_DATETIME_DEFAULT_TIMEZONE);",
      "right" : "String dtzStr = conf.get(PigConfiguration.PIG_DATETIME_DEFAULT_TIMEZONE);",
      "info" : "VariableDeclarationStatement[27151-27224]:VariableDeclarationStatement[27293-27366]"
    }, {
      "left" : "if (dtzStr != null && dtzStr.length() > 0)",
      "right" : "if (dtzStr != null && dtzStr.length() > 0)",
      "info" : "IfStatement[27233-27428]:IfStatement[27375-27570]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27276-27428]:Block[27418-27570]"
    }, {
      "left" : "DateTimeZone.setDefault(DateTimeZone.forID(dtzStr));",
      "right" : "DateTimeZone.setDefault(DateTimeZone.forID(dtzStr));",
      "info" : "ExpressionStatement[27366-27418]:ExpressionStatement[27508-27560]"
    } ]
  },
  "interFileMappings" : { }
}