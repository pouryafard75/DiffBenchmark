{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "ZipArchiveInputStream",
      "right" : "ZipArchiveInputStream",
      "info" : "TypeDeclaration[1735-38768]:TypeDeclaration[1735-38790]"
    }, {
      "left" : "private final ZipEncoding zipEncoding;",
      "right" : "private final ZipEncoding zipEncoding;",
      "info" : "FieldDeclaration[2336-2445]:FieldDeclaration[2336-2445]"
    }, {
      "left" : "private final boolean useUnicodeExtraFields;",
      "right" : "private final boolean useUnicodeExtraFields;",
      "info" : "FieldDeclaration[2451-2556]:FieldDeclaration[2451-2556]"
    }, {
      "left" : "private final InputStream in;",
      "right" : "private final InputStream in;",
      "info" : "FieldDeclaration[2562-2656]:FieldDeclaration[2562-2656]"
    }, {
      "left" : "private final Inflater inf = new Inflater(true);",
      "right" : "private final Inflater inf = new Inflater(true);",
      "info" : "FieldDeclaration[2662-2761]:FieldDeclaration[2662-2761]"
    }, {
      "left" : "private final ByteBuffer buf = ByteBuffer.allocate(ZipArchiveOutputStream.BUFFER_SIZE);",
      "right" : "private final ByteBuffer buf = ByteBuffer.allocate(ZipArchiveOutputStream.BUFFER_SIZE);",
      "info" : "FieldDeclaration[2767-2910]:FieldDeclaration[2767-2910]"
    }, {
      "left" : "private CurrentEntry current = null;",
      "right" : "private CurrentEntry current = null;",
      "info" : "FieldDeclaration[2916-3003]:FieldDeclaration[2916-3003]"
    }, {
      "left" : "private boolean closed = false;",
      "right" : "private boolean closed = false;",
      "info" : "FieldDeclaration[3009-3087]:FieldDeclaration[3009-3087]"
    }, {
      "left" : "private boolean hitCentralDirectory = false;",
      "right" : "private boolean hitCentralDirectory = false;",
      "info" : "FieldDeclaration[3093-3231]:FieldDeclaration[3093-3231]"
    }, {
      "left" : "private ByteArrayInputStream lastStoredEntry = null;",
      "right" : "private ByteArrayInputStream lastStoredEntry = null;",
      "info" : "FieldDeclaration[3237-3458]:FieldDeclaration[3237-3458]"
    }, {
      "left" : "private boolean allowStoredEntriesWithDataDescriptor = false;",
      "right" : "private boolean allowStoredEntriesWithDataDescriptor = false;",
      "info" : "FieldDeclaration[3464-3615]:FieldDeclaration[3464-3615]"
    }, {
      "left" : "private static final int LFH_LEN = 30;",
      "right" : "private static final int LFH_LEN = 30;",
      "info" : "FieldDeclaration[3621-3659]:FieldDeclaration[3621-3659]"
    }, {
      "left" : "private static final int CFH_LEN = 46;",
      "right" : "private static final int CFH_LEN = 46;",
      "info" : "FieldDeclaration[4159-4197]:FieldDeclaration[4159-4197]"
    }, {
      "left" : "private static final long TWO_EXP_32 = ZIP64_MAGIC + 1;",
      "right" : "private static final long TWO_EXP_32 = ZIP64_MAGIC + 1;",
      "info" : "FieldDeclaration[4993-5048]:FieldDeclaration[4993-5048]"
    }, {
      "left" : "private final byte[] LFH_BUF = new byte[LFH_LEN];",
      "right" : "private final byte[] LFH_BUF = new byte[LFH_LEN];",
      "info" : "FieldDeclaration[5160-5209]:FieldDeclaration[5160-5209]"
    }, {
      "left" : "private final byte[] SKIP_BUF = new byte[1024];",
      "right" : "private final byte[] SKIP_BUF = new byte[1024];",
      "info" : "FieldDeclaration[5214-5261]:FieldDeclaration[5214-5261]"
    }, {
      "left" : "private final byte[] SHORT_BUF = new byte[SHORT];",
      "right" : "private final byte[] SHORT_BUF = new byte[SHORT];",
      "info" : "FieldDeclaration[5266-5315]:FieldDeclaration[5266-5315]"
    }, {
      "left" : "private final byte[] WORD_BUF = new byte[WORD];",
      "right" : "private final byte[] WORD_BUF = new byte[WORD];",
      "info" : "FieldDeclaration[5320-5367]:FieldDeclaration[5320-5367]"
    }, {
      "left" : "private final byte[] TWO_DWORD_BUF = new byte[2 * DWORD];",
      "right" : "private final byte[] TWO_DWORD_BUF = new byte[2 * DWORD];",
      "info" : "FieldDeclaration[5372-5429]:FieldDeclaration[5372-5429]"
    }, {
      "left" : "private int entriesRead = 0;",
      "right" : "private int entriesRead = 0;",
      "info" : "FieldDeclaration[5435-5463]:FieldDeclaration[5435-5463]"
    }, {
      "left" : "public ZipArchiveInputStream(InputStream inputStream)",
      "right" : "public ZipArchiveInputStream(InputStream inputStream)",
      "info" : "MethodDeclaration[5469-5581]:MethodDeclaration[5469-5581]"
    }, {
      "left" : "public ZipArchiveInputStream(InputStream inputStream, String encoding)",
      "right" : "public ZipArchiveInputStream(InputStream inputStream, String encoding)",
      "info" : "MethodDeclaration[5587-5853]:MethodDeclaration[5587-5853]"
    }, {
      "left" : "public ZipArchiveInputStream(InputStream inputStream, String encoding, boolean useUnicodeExtraFields)",
      "right" : "public ZipArchiveInputStream(InputStream inputStream, String encoding, boolean useUnicodeExtraFields)",
      "info" : "MethodDeclaration[5859-6285]:MethodDeclaration[5859-6285]"
    }, {
      "left" : "public ZipArchiveInputStream(InputStream inputStream,\n                                 String encoding,\n                                 boolean useUnicodeExtraFields,\n                                 boolean allowStoredEntriesWithDataDescriptor)",
      "right" : "public ZipArchiveInputStream(InputStream inputStream,\n                                 String encoding,\n                                 boolean useUnicodeExtraFields,\n                                 boolean allowStoredEntriesWithDataDescriptor)",
      "info" : "MethodDeclaration[6291-7284]:MethodDeclaration[6291-7306]"
    }, {
      "left" : "public ZipArchiveEntry getNextZipEntry() throws IOException",
      "right" : "public ZipArchiveEntry getNextZipEntry() throws IOException",
      "info" : "MethodDeclaration[7290-10942]:MethodDeclaration[7312-10964]"
    }, {
      "left" : "private void readFirstLocalFileHeader(byte[] lfh) throws IOException",
      "right" : "private void readFirstLocalFileHeader(byte[] lfh) throws IOException",
      "info" : "MethodDeclaration[10948-11833]:MethodDeclaration[10970-11855]"
    }, {
      "left" : "private void processZip64Extra(ZipLong size, ZipLong cSize)",
      "right" : "private void processZip64Extra(ZipLong size, ZipLong cSize)",
      "info" : "MethodDeclaration[11839-12865]:MethodDeclaration[11861-12887]"
    }, {
      "left" : "public ArchiveEntry getNextEntry() throws IOException",
      "right" : "public ArchiveEntry getNextEntry() throws IOException",
      "info" : "MethodDeclaration[12871-12980]:MethodDeclaration[12893-13002]"
    }, {
      "left" : "public boolean canReadEntryData(ArchiveEntry ae)",
      "right" : "public boolean canReadEntryData(ArchiveEntry ae)",
      "info" : "MethodDeclaration[12986-13519]:MethodDeclaration[13008-13541]"
    }, {
      "left" : "public int read(byte[] buffer, int offset, int length) throws IOException",
      "right" : "public int read(byte[] buffer, int offset, int length) throws IOException",
      "info" : "MethodDeclaration[13525-15076]:MethodDeclaration[13547-15098]"
    }, {
      "left" : "private int readStored(byte[] buffer, int offset, int length) throws IOException",
      "right" : "private int readStored(byte[] buffer, int offset, int length) throws IOException",
      "info" : "MethodDeclaration[15082-16222]:MethodDeclaration[15104-16244]"
    }, {
      "left" : "private int readDeflated(byte[] buffer, int offset, int length) throws IOException",
      "right" : "private int readDeflated(byte[] buffer, int offset, int length) throws IOException",
      "info" : "MethodDeclaration[16228-16938]:MethodDeclaration[16250-16960]"
    }, {
      "left" : "private int readFromInflater(byte[] buffer, int offset, int length) throws IOException",
      "right" : "private int readFromInflater(byte[] buffer, int offset, int length) throws IOException",
      "info" : "MethodDeclaration[16944-17786]:MethodDeclaration[16966-17808]"
    }, {
      "left" : "public void close() throws IOException",
      "right" : "public void close() throws IOException",
      "info" : "MethodDeclaration[17792-17959]:MethodDeclaration[17814-17981]"
    }, {
      "left" : "public long skip(long value) throws IOException",
      "right" : "public long skip(long value) throws IOException",
      "info" : "MethodDeclaration[17965-19062]:MethodDeclaration[17987-19084]"
    }, {
      "left" : "public static boolean matches(byte[] signature, int length)",
      "right" : "public static boolean matches(byte[] signature, int length)",
      "info" : "MethodDeclaration[19068-19931]:MethodDeclaration[19090-19953]"
    }, {
      "left" : "private static boolean checksig(byte[] signature, byte[] expected)",
      "right" : "private static boolean checksig(byte[] signature, byte[] expected)",
      "info" : "MethodDeclaration[19937-20185]:MethodDeclaration[19959-20207]"
    }, {
      "left" : "private void closeEntry() throws IOException",
      "right" : "private void closeEntry() throws IOException",
      "info" : "MethodDeclaration[20191-22232]:MethodDeclaration[20213-22254]"
    }, {
      "left" : "private void drainCurrentEntryData() throws IOException",
      "right" : "private void drainCurrentEntryData() throws IOException",
      "info" : "MethodDeclaration[22238-22851]:MethodDeclaration[22260-22873]"
    }, {
      "left" : "private long getBytesInflated()",
      "right" : "private long getBytesInflated()",
      "info" : "MethodDeclaration[22857-23883]:MethodDeclaration[22879-23905]"
    }, {
      "left" : "private int fill() throws IOException",
      "right" : "private int fill() throws IOException",
      "info" : "MethodDeclaration[23889-24245]:MethodDeclaration[23911-24267]"
    }, {
      "left" : "private void readFully(byte[] b) throws IOException",
      "right" : "private void readFully(byte[] b) throws IOException",
      "info" : "MethodDeclaration[24251-24458]:MethodDeclaration[24273-24480]"
    }, {
      "left" : "private void readDataDescriptor() throws IOException",
      "right" : "private void readDataDescriptor() throws IOException",
      "info" : "MethodDeclaration[24464-26073]:MethodDeclaration[24486-26095]"
    }, {
      "left" : "private boolean supportsDataDescriptorFor(ZipArchiveEntry entry)",
      "right" : "private boolean supportsDataDescriptorFor(ZipArchiveEntry entry)",
      "info" : "MethodDeclaration[26079-26635]:MethodDeclaration[26101-26657]"
    }, {
      "left" : "private void readStoredEntry() throws IOException",
      "right" : "private void readStoredEntry() throws IOException",
      "info" : "MethodDeclaration[26641-28334]:MethodDeclaration[26663-28356]"
    }, {
      "left" : "private static final byte[] LFH = ZipLong.LFH_SIG.getBytes();",
      "right" : "private static final byte[] LFH = ZipLong.LFH_SIG.getBytes();",
      "info" : "FieldDeclaration[28340-28401]:FieldDeclaration[28362-28423]"
    }, {
      "left" : "private static final byte[] CFH = ZipLong.CFH_SIG.getBytes();",
      "right" : "private static final byte[] CFH = ZipLong.CFH_SIG.getBytes();",
      "info" : "FieldDeclaration[28406-28467]:FieldDeclaration[28428-28489]"
    }, {
      "left" : "private static final byte[] DD = ZipLong.DD_SIG.getBytes();",
      "right" : "private static final byte[] DD = ZipLong.DD_SIG.getBytes();",
      "info" : "FieldDeclaration[28472-28531]:FieldDeclaration[28494-28553]"
    }, {
      "left" : "private boolean bufferContainsSignature(ByteArrayOutputStream bos, int offset, int lastRead, int expectedDDLen)\n            throws IOException",
      "right" : "private boolean bufferContainsSignature(ByteArrayOutputStream bos, int offset, int lastRead, int expectedDDLen)\n            throws IOException",
      "info" : "MethodDeclaration[28537-30276]:MethodDeclaration[28559-30298]"
    }, {
      "left" : "private int cacheBytesRead(ByteArrayOutputStream bos, int offset, int lastRead, int expecteDDLen)",
      "right" : "private int cacheBytesRead(ByteArrayOutputStream bos, int offset, int lastRead, int expecteDDLen)",
      "info" : "MethodDeclaration[30282-31139]:MethodDeclaration[30304-31161]"
    }, {
      "left" : "private void pushback(byte[] buf, int offset, int length) throws IOException",
      "right" : "private void pushback(byte[] buf, int offset, int length) throws IOException",
      "info" : "MethodDeclaration[31145-31326]:MethodDeclaration[31167-31348]"
    }, {
      "left" : "private void skipRemainderOfArchive() throws IOException",
      "right" : "private void skipRemainderOfArchive() throws IOException",
      "info" : "MethodDeclaration[31988-32625]:MethodDeclaration[32010-32647]"
    }, {
      "left" : "private void findEocdRecord() throws IOException",
      "right" : "private void findEocdRecord() throws IOException",
      "info" : "MethodDeclaration[32631-33937]:MethodDeclaration[32653-33959]"
    }, {
      "left" : "private void realSkip(long value) throws IOException",
      "right" : "private void realSkip(long value) throws IOException",
      "info" : "MethodDeclaration[33943-34686]:MethodDeclaration[33965-34708]"
    }, {
      "left" : "private int readOneByte() throws IOException",
      "right" : "private int readOneByte() throws IOException",
      "info" : "MethodDeclaration[34692-35058]:MethodDeclaration[34714-35080]"
    }, {
      "left" : "private boolean isFirstByteOfEocdSig(int b)",
      "right" : "private boolean isFirstByteOfEocdSig(int b)",
      "info" : "MethodDeclaration[35064-35171]:MethodDeclaration[35086-35193]"
    }, {
      "left" : "CurrentEntry",
      "right" : "CurrentEntry",
      "info" : "TypeDeclaration[35177-36476]:TypeDeclaration[35199-36498]"
    }, {
      "left" : "private final ZipArchiveEntry entry = new ZipArchiveEntry();",
      "right" : "private final ZipArchiveEntry entry = new ZipArchiveEntry();",
      "info" : "FieldDeclaration[35335-35449]:FieldDeclaration[35357-35471]"
    }, {
      "left" : "private boolean hasDataDescriptor;",
      "right" : "private boolean hasDataDescriptor;",
      "info" : "FieldDeclaration[35459-35566]:FieldDeclaration[35481-35588]"
    }, {
      "left" : "private boolean usesZip64;",
      "right" : "private boolean usesZip64;",
      "info" : "FieldDeclaration[35576-35699]:FieldDeclaration[35598-35721]"
    }, {
      "left" : "private long bytesRead;",
      "right" : "private long bytesRead;",
      "info" : "FieldDeclaration[35709-35854]:FieldDeclaration[35731-35876]"
    }, {
      "left" : "private long bytesReadFromStream;",
      "right" : "private long bytesReadFromStream;",
      "info" : "FieldDeclaration[35864-36192]:FieldDeclaration[35886-36214]"
    }, {
      "left" : "private final CRC32 crc = new CRC32();",
      "right" : "private final CRC32 crc = new CRC32();",
      "info" : "FieldDeclaration[36202-36329]:FieldDeclaration[36224-36351]"
    }, {
      "left" : "private InputStream in;",
      "right" : "private InputStream in;",
      "info" : "FieldDeclaration[36339-36470]:FieldDeclaration[36361-36492]"
    }, {
      "left" : "BoundedInputStream",
      "right" : "BoundedInputStream",
      "info" : "TypeDeclaration[36482-38766]:TypeDeclaration[36504-38788]"
    }, {
      "left" : "private final InputStream in;",
      "right" : "private final InputStream in;",
      "info" : "FieldDeclaration[36614-36683]:FieldDeclaration[36636-36705]"
    }, {
      "left" : "private final long max;",
      "right" : "private final long max;",
      "info" : "FieldDeclaration[36693-36757]:FieldDeclaration[36715-36779]"
    }, {
      "left" : "private long pos = 0;",
      "right" : "private long pos = 0;",
      "info" : "FieldDeclaration[36767-36840]:FieldDeclaration[36789-36862]"
    }, {
      "left" : "public BoundedInputStream(final InputStream in, final long size)",
      "right" : "public BoundedInputStream(final InputStream in, final long size)",
      "info" : "MethodDeclaration[36854-37262]:MethodDeclaration[36876-37284]"
    }, {
      "left" : "public int read() throws IOException",
      "right" : "public int read() throws IOException",
      "info" : "MethodDeclaration[37272-37574]:MethodDeclaration[37294-37596]"
    }, {
      "left" : "public int read(final byte[] b) throws IOException",
      "right" : "public int read(final byte[] b) throws IOException",
      "info" : "MethodDeclaration[37584-37710]:MethodDeclaration[37606-37732]"
    }, {
      "left" : "public int read(final byte[] b, final int off, final int len) throws IOException",
      "right" : "public int read(final byte[] b, final int off, final int len) throws IOException",
      "info" : "MethodDeclaration[37720-38277]:MethodDeclaration[37742-38299]"
    }, {
      "left" : "public long skip(final long n) throws IOException",
      "right" : "public long skip(final long n) throws IOException",
      "info" : "MethodDeclaration[38287-38558]:MethodDeclaration[38309-38580]"
    }, {
      "left" : "public int available() throws IOException",
      "right" : "public int available() throws IOException",
      "info" : "MethodDeclaration[38572-38760]:MethodDeclaration[38594-38782]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5523-5581]:Block[5523-5581]"
    }, {
      "left" : "this(inputStream, ZipEncodingHelper.UTF8);",
      "right" : "this(inputStream, ZipEncodingHelper.UTF8);",
      "info" : "ConstructorInvocation[5533-5575]:ConstructorInvocation[5533-5575]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5803-5853]:Block[5803-5853]"
    }, {
      "left" : "this(inputStream, encoding, true);",
      "right" : "this(inputStream, encoding, true);",
      "info" : "ConstructorInvocation[5813-5847]:ConstructorInvocation[5813-5847]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6211-6285]:Block[6211-6285]"
    }, {
      "left" : "this(inputStream, encoding, useUnicodeExtraFields, false);",
      "right" : "this(inputStream, encoding, useUnicodeExtraFields, false);",
      "info" : "ConstructorInvocation[6221-6279]:ConstructorInvocation[6221-6279]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6942-7284]:Block[6942-7306]"
    }, {
      "left" : "zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);",
      "right" : "zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);",
      "info" : "ExpressionStatement[6952-7009]:ExpressionStatement[6952-7009]"
    }, {
      "left" : "this.useUnicodeExtraFields = useUnicodeExtraFields;",
      "right" : "this.useUnicodeExtraFields = useUnicodeExtraFields;",
      "info" : "ExpressionStatement[7018-7069]:ExpressionStatement[7018-7069]"
    }, {
      "left" : "in = new PushbackInputStream(inputStream, buf.capacity());",
      "right" : "in = new PushbackInputStream(inputStream, buf.capacity());",
      "info" : "ExpressionStatement[7078-7136]:ExpressionStatement[7078-7136]"
    }, {
      "left" : "this.allowStoredEntriesWithDataDescriptor =\n            allowStoredEntriesWithDataDescriptor;",
      "right" : "this.allowStoredEntriesWithDataDescriptor =\n            allowStoredEntriesWithDataDescriptor;",
      "info" : "ExpressionStatement[7145-7238]:ExpressionStatement[7145-7238]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7350-10942]:Block[7372-10964]"
    }, {
      "left" : "boolean firstEntry = true;",
      "right" : "boolean firstEntry = true;",
      "info" : "VariableDeclarationStatement[7360-7386]:VariableDeclarationStatement[7382-7408]"
    }, {
      "left" : "if (closed || hitCentralDirectory)",
      "right" : "if (closed || hitCentralDirectory)",
      "info" : "IfStatement[7395-7466]:IfStatement[7417-7488]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7430-7466]:Block[7452-7488]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[7444-7456]:ReturnStatement[7466-7478]"
    }, {
      "left" : "if (current != null)",
      "right" : "if (current != null)",
      "info" : "IfStatement[7475-7565]:IfStatement[7497-7587]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7496-7565]:Block[7518-7587]"
    }, {
      "left" : "closeEntry();",
      "right" : "closeEntry();",
      "info" : "ExpressionStatement[7510-7523]:ExpressionStatement[7532-7545]"
    }, {
      "left" : "firstEntry = false;",
      "right" : "firstEntry = false;",
      "info" : "ExpressionStatement[7536-7555]:ExpressionStatement[7558-7577]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[7575-8039]:TryStatement[7597-8061]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7579-7979]:Block[7601-8001]"
    }, {
      "left" : "if (firstEntry)",
      "right" : "if (firstEntry)",
      "info" : "IfStatement[7593-7969]:IfStatement[7615-7991]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7609-7912]:Block[7631-7934]"
    }, {
      "left" : "readFirstLocalFileHeader(LFH_BUF);",
      "right" : "readFirstLocalFileHeader(LFH_BUF);",
      "info" : "ExpressionStatement[7864-7898]:ExpressionStatement[7886-7920]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7918-7969]:Block[7940-7991]"
    }, {
      "left" : "readFully(LFH_BUF);",
      "right" : "readFully(LFH_BUF);",
      "info" : "ExpressionStatement[7936-7955]:ExpressionStatement[7958-7977]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8003-8039]:Block[8025-8061]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[8017-8029]:ReturnStatement[8039-8051]"
    }, {
      "left" : "ZipLong sig = new ZipLong(LFH_BUF);",
      "right" : "ZipLong sig = new ZipLong(LFH_BUF);",
      "info" : "VariableDeclarationStatement[8049-8084]:VariableDeclarationStatement[8071-8106]"
    }, {
      "left" : "if (sig.equals(ZipLong.CFH_SIG) || sig.equals(ZipLong.AED_SIG))",
      "right" : "if (sig.equals(ZipLong.CFH_SIG) || sig.equals(ZipLong.AED_SIG))",
      "info" : "IfStatement[8093-8246]:IfStatement[8115-8268]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8157-8246]:Block[8179-8268]"
    }, {
      "left" : "hitCentralDirectory = true;",
      "right" : "hitCentralDirectory = true;",
      "info" : "ExpressionStatement[8171-8198]:ExpressionStatement[8193-8220]"
    }, {
      "left" : "skipRemainderOfArchive();",
      "right" : "skipRemainderOfArchive();",
      "info" : "ExpressionStatement[8211-8236]:ExpressionStatement[8233-8258]"
    }, {
      "left" : "if (!sig.equals(ZipLong.LFH_SIG))",
      "right" : "if (!sig.equals(ZipLong.LFH_SIG))",
      "info" : "IfStatement[8255-8325]:IfStatement[8277-8347]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8289-8325]:Block[8311-8347]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[8303-8315]:ReturnStatement[8325-8337]"
    }, {
      "left" : "int off = WORD;",
      "right" : "int off = WORD;",
      "info" : "VariableDeclarationStatement[8335-8350]:VariableDeclarationStatement[8357-8372]"
    }, {
      "left" : "current = new CurrentEntry();",
      "right" : "current = new CurrentEntry();",
      "info" : "ExpressionStatement[8359-8388]:ExpressionStatement[8381-8410]"
    }, {
      "left" : "int versionMadeBy = ZipShort.getValue(LFH_BUF, off);",
      "right" : "int versionMadeBy = ZipShort.getValue(LFH_BUF, off);",
      "info" : "VariableDeclarationStatement[8398-8450]:VariableDeclarationStatement[8420-8472]"
    }, {
      "left" : "off += SHORT;",
      "right" : "off += SHORT;",
      "info" : "ExpressionStatement[8459-8472]:ExpressionStatement[8481-8494]"
    }, {
      "left" : "current.entry.setPlatform((versionMadeBy >> ZipFile.BYTE_SHIFT) & ZipFile.NIBLET_MASK);",
      "right" : "current.entry.setPlatform((versionMadeBy >> ZipFile.BYTE_SHIFT) & ZipFile.NIBLET_MASK);",
      "info" : "ExpressionStatement[8481-8568]:ExpressionStatement[8503-8590]"
    }, {
      "left" : "final GeneralPurposeBit gpFlag = GeneralPurposeBit.parse(LFH_BUF, off);",
      "right" : "final GeneralPurposeBit gpFlag = GeneralPurposeBit.parse(LFH_BUF, off);",
      "info" : "VariableDeclarationStatement[8578-8649]:VariableDeclarationStatement[8600-8671]"
    }, {
      "left" : "final boolean hasUTF8Flag = gpFlag.usesUTF8ForNames();",
      "right" : "final boolean hasUTF8Flag = gpFlag.usesUTF8ForNames();",
      "info" : "VariableDeclarationStatement[8658-8712]:VariableDeclarationStatement[8680-8734]"
    }, {
      "left" : "final ZipEncoding entryEncoding = hasUTF8Flag ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding;",
      "right" : "final ZipEncoding entryEncoding = hasUTF8Flag ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding;",
      "info" : "VariableDeclarationStatement[8721-8819]:VariableDeclarationStatement[8743-8841]"
    }, {
      "left" : "current.hasDataDescriptor = gpFlag.usesDataDescriptor();",
      "right" : "current.hasDataDescriptor = gpFlag.usesDataDescriptor();",
      "info" : "ExpressionStatement[8828-8884]:ExpressionStatement[8850-8906]"
    }, {
      "left" : "current.entry.setGeneralPurposeBit(gpFlag);",
      "right" : "current.entry.setGeneralPurposeBit(gpFlag);",
      "info" : "ExpressionStatement[8893-8936]:ExpressionStatement[8915-8958]"
    }, {
      "left" : "off += SHORT;",
      "right" : "off += SHORT;",
      "info" : "ExpressionStatement[8946-8959]:ExpressionStatement[8968-8981]"
    }, {
      "left" : "current.entry.setMethod(ZipShort.getValue(LFH_BUF, off));",
      "right" : "current.entry.setMethod(ZipShort.getValue(LFH_BUF, off));",
      "info" : "ExpressionStatement[8969-9026]:ExpressionStatement[8991-9048]"
    }, {
      "left" : "off += SHORT;",
      "right" : "off += SHORT;",
      "info" : "ExpressionStatement[9035-9048]:ExpressionStatement[9057-9070]"
    }, {
      "left" : "long time = ZipUtil.dosToJavaTime(ZipLong.getValue(LFH_BUF, off));",
      "right" : "long time = ZipUtil.dosToJavaTime(ZipLong.getValue(LFH_BUF, off));",
      "info" : "VariableDeclarationStatement[9058-9124]:VariableDeclarationStatement[9080-9146]"
    }, {
      "left" : "current.entry.setTime(time);",
      "right" : "current.entry.setTime(time);",
      "info" : "ExpressionStatement[9133-9161]:ExpressionStatement[9155-9183]"
    }, {
      "left" : "off += WORD;",
      "right" : "off += WORD;",
      "info" : "ExpressionStatement[9170-9182]:ExpressionStatement[9192-9204]"
    }, {
      "left" : "ZipLong size = null, cSize = null;",
      "right" : "ZipLong size = null, cSize = null;",
      "info" : "VariableDeclarationStatement[9192-9226]:VariableDeclarationStatement[9214-9248]"
    }, {
      "left" : "if (!current.hasDataDescriptor)",
      "right" : "if (!current.hasDataDescriptor)",
      "info" : "IfStatement[9235-9560]:IfStatement[9257-9582]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9267-9514]:Block[9289-9536]"
    }, {
      "left" : "current.entry.setCrc(ZipLong.getValue(LFH_BUF, off));",
      "right" : "current.entry.setCrc(ZipLong.getValue(LFH_BUF, off));",
      "info" : "ExpressionStatement[9281-9334]:ExpressionStatement[9303-9356]"
    }, {
      "left" : "off += WORD;",
      "right" : "off += WORD;",
      "info" : "ExpressionStatement[9347-9359]:ExpressionStatement[9369-9381]"
    }, {
      "left" : "cSize = new ZipLong(LFH_BUF, off);",
      "right" : "cSize = new ZipLong(LFH_BUF, off);",
      "info" : "ExpressionStatement[9373-9407]:ExpressionStatement[9395-9429]"
    }, {
      "left" : "off += WORD;",
      "right" : "off += WORD;",
      "info" : "ExpressionStatement[9420-9432]:ExpressionStatement[9442-9454]"
    }, {
      "left" : "size = new ZipLong(LFH_BUF, off);",
      "right" : "size = new ZipLong(LFH_BUF, off);",
      "info" : "ExpressionStatement[9446-9479]:ExpressionStatement[9468-9501]"
    }, {
      "left" : "off += WORD;",
      "right" : "off += WORD;",
      "info" : "ExpressionStatement[9492-9504]:ExpressionStatement[9514-9526]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9520-9560]:Block[9542-9582]"
    }, {
      "left" : "off += 3 * WORD;",
      "right" : "off += 3 * WORD;",
      "info" : "ExpressionStatement[9534-9550]:ExpressionStatement[9556-9572]"
    }, {
      "left" : "int fileNameLen = ZipShort.getValue(LFH_BUF, off);",
      "right" : "int fileNameLen = ZipShort.getValue(LFH_BUF, off);",
      "info" : "VariableDeclarationStatement[9570-9620]:VariableDeclarationStatement[9592-9642]"
    }, {
      "left" : "off += SHORT;",
      "right" : "off += SHORT;",
      "info" : "ExpressionStatement[9630-9643]:ExpressionStatement[9652-9665]"
    }, {
      "left" : "int extraLen = ZipShort.getValue(LFH_BUF, off);",
      "right" : "int extraLen = ZipShort.getValue(LFH_BUF, off);",
      "info" : "VariableDeclarationStatement[9653-9700]:VariableDeclarationStatement[9675-9722]"
    }, {
      "left" : "off += SHORT;",
      "right" : "off += SHORT;",
      "info" : "ExpressionStatement[9709-9722]:ExpressionStatement[9731-9744]"
    }, {
      "left" : "byte[] fileName = new byte[fileNameLen];",
      "right" : "byte[] fileName = new byte[fileNameLen];",
      "info" : "VariableDeclarationStatement[9732-9772]:VariableDeclarationStatement[9754-9794]"
    }, {
      "left" : "readFully(fileName);",
      "right" : "readFully(fileName);",
      "info" : "ExpressionStatement[9781-9801]:ExpressionStatement[9803-9823]"
    }, {
      "left" : "current.entry.setName(entryEncoding.decode(fileName), fileName);",
      "right" : "current.entry.setName(entryEncoding.decode(fileName), fileName);",
      "info" : "ExpressionStatement[9810-9874]:ExpressionStatement[9832-9896]"
    }, {
      "left" : "byte[] extraData = new byte[extraLen];",
      "right" : "byte[] extraData = new byte[extraLen];",
      "info" : "VariableDeclarationStatement[9884-9922]:VariableDeclarationStatement[9906-9944]"
    }, {
      "left" : "readFully(extraData);",
      "right" : "readFully(extraData);",
      "info" : "ExpressionStatement[9931-9952]:ExpressionStatement[9953-9974]"
    }, {
      "left" : "current.entry.setExtra(extraData);",
      "right" : "current.entry.setExtra(extraData);",
      "info" : "ExpressionStatement[9961-9995]:ExpressionStatement[9983-10017]"
    }, {
      "left" : "if (!hasUTF8Flag && useUnicodeExtraFields)",
      "right" : "if (!hasUTF8Flag && useUnicodeExtraFields)",
      "info" : "IfStatement[10005-10144]:IfStatement[10027-10166]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10048-10144]:Block[10070-10166]"
    }, {
      "left" : "ZipUtil.setNameAndCommentFromExtraFields(current.entry, fileName, null);",
      "right" : "ZipUtil.setNameAndCommentFromExtraFields(current.entry, fileName, null);",
      "info" : "ExpressionStatement[10062-10134]:ExpressionStatement[10084-10156]"
    }, {
      "left" : "processZip64Extra(size, cSize);",
      "right" : "processZip64Extra(size, cSize);",
      "info" : "ExpressionStatement[10154-10185]:ExpressionStatement[10176-10207]"
    }, {
      "left" : "if (current.entry.getCompressedSize() != -1)",
      "right" : "if (current.entry.getCompressedSize() != -1)",
      "info" : "IfStatement[10195-10874]:IfStatement[10217-10896]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10240-10874]:Block[10262-10896]"
    }, {
      "left" : "if (current.entry.getMethod() == ZipMethod.UNSHRINKING.getCode())",
      "right" : "if (current.entry.getMethod() == ZipMethod.UNSHRINKING.getCode())",
      "info" : "IfStatement[10254-10864]:IfStatement[10276-10886]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10320-10455]:Block[10342-10477]"
    }, {
      "left" : "current.in = new UnshrinkingInputStream(new BoundedInputStream(in, current.entry.getCompressedSize()));",
      "right" : "current.in = new UnshrinkingInputStream(new BoundedInputStream(in, current.entry.getCompressedSize()));",
      "info" : "ExpressionStatement[10338-10441]:ExpressionStatement[10360-10463]"
    }, {
      "left" : "if (current.entry.getMethod() == ZipMethod.IMPLODING.getCode())",
      "right" : "if (current.entry.getMethod() == ZipMethod.IMPLODING.getCode())",
      "info" : "IfStatement[10461-10864]:IfStatement[10483-10886]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10525-10864]:Block[10547-10886]"
    }, {
      "left" : "current.in = new ExplodingInputStream(\n                        current.entry.getGeneralPurposeBit().getSlidingDictionarySize(),\n                        current.entry.getGeneralPurposeBit().getNumberOfShannonFanoTrees(),\n                        new BoundedInputStream(in, current.entry.getCompressedSize()));",
      "right" : "current.in = new ExplodingInputStream(\n                        current.entry.getGeneralPurposeBit().getSlidingDictionarySize(),\n                        current.entry.getGeneralPurposeBit().getNumberOfShannonFanoTrees(),\n                        new BoundedInputStream(in, current.entry.getCompressedSize()));",
      "info" : "ExpressionStatement[10543-10850]:ExpressionStatement[10565-10872]"
    }, {
      "left" : "entriesRead++;",
      "right" : "entriesRead++;",
      "info" : "ExpressionStatement[10892-10906]:ExpressionStatement[10914-10928]"
    }, {
      "left" : "return current.entry;",
      "right" : "return current.entry;",
      "info" : "ReturnStatement[10915-10936]:ReturnStatement[10937-10958]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11182-11833]:Block[11204-11855]"
    }, {
      "left" : "readFully(lfh);",
      "right" : "readFully(lfh);",
      "info" : "ExpressionStatement[11192-11207]:ExpressionStatement[11214-11229]"
    }, {
      "left" : "ZipLong sig = new ZipLong(lfh);",
      "right" : "ZipLong sig = new ZipLong(lfh);",
      "info" : "VariableDeclarationStatement[11216-11247]:VariableDeclarationStatement[11238-11269]"
    }, {
      "left" : "if (sig.equals(ZipLong.DD_SIG))",
      "right" : "if (sig.equals(ZipLong.DD_SIG))",
      "info" : "IfStatement[11256-11403]:IfStatement[11278-11425]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11288-11403]:Block[11310-11425]"
    }, {
      "left" : "throw new UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.SPLITTING);",
      "right" : "throw new UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.SPLITTING);",
      "info" : "ThrowStatement[11302-11393]:ThrowStatement[11324-11415]"
    }, {
      "left" : "if (sig.equals(ZipLong.SINGLE_SEGMENT_SPLIT_MARKER))",
      "right" : "if (sig.equals(ZipLong.SINGLE_SEGMENT_SPLIT_MARKER))",
      "info" : "IfStatement[11413-11827]:IfStatement[11435-11849]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11466-11827]:Block[11488-11849]"
    }, {
      "left" : "byte[] missedLfhBytes = new byte[4];",
      "right" : "byte[] missedLfhBytes = new byte[4];",
      "info" : "VariableDeclarationStatement[11613-11649]:VariableDeclarationStatement[11635-11671]"
    }, {
      "left" : "readFully(missedLfhBytes);",
      "right" : "readFully(missedLfhBytes);",
      "info" : "ExpressionStatement[11662-11688]:ExpressionStatement[11684-11710]"
    }, {
      "left" : "System.arraycopy(lfh, 4, lfh, 0, LFH_LEN - 4);",
      "right" : "System.arraycopy(lfh, 4, lfh, 0, LFH_LEN - 4);",
      "info" : "ExpressionStatement[11701-11747]:ExpressionStatement[11723-11769]"
    }, {
      "left" : "System.arraycopy(missedLfhBytes, 0, lfh, LFH_LEN - 4, 4);",
      "right" : "System.arraycopy(missedLfhBytes, 0, lfh, LFH_LEN - 4, 4);",
      "info" : "ExpressionStatement[11760-11817]:ExpressionStatement[11782-11839]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12084-12865]:Block[12106-12887]"
    }, {
      "left" : "Zip64ExtendedInformationExtraField z64 =\n            (Zip64ExtendedInformationExtraField) \n            current.entry.getExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);",
      "right" : "Zip64ExtendedInformationExtraField z64 =\n            (Zip64ExtendedInformationExtraField) \n            current.entry.getExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);",
      "info" : "VariableDeclarationStatement[12094-12271]:VariableDeclarationStatement[12116-12293]"
    }, {
      "left" : "current.usesZip64 = z64 != null;",
      "right" : "current.usesZip64 = z64 != null;",
      "info" : "ExpressionStatement[12280-12312]:ExpressionStatement[12302-12334]"
    }, {
      "left" : "if (!current.hasDataDescriptor)",
      "right" : "if (!current.hasDataDescriptor)",
      "info" : "IfStatement[12321-12859]:IfStatement[12343-12881]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12353-12859]:Block[12375-12881]"
    }, {
      "left" : "if (z64 != null // same as current.usesZip64 but avoids NPE warning\n                    && (cSize.equals(ZipLong.ZIP64_MAGIC) || size.equals(ZipLong.ZIP64_MAGIC)))",
      "right" : "if (z64 != null // same as current.usesZip64 but avoids NPE warning\n                    && (cSize.equals(ZipLong.ZIP64_MAGIC) || size.equals(ZipLong.ZIP64_MAGIC)))",
      "info" : "IfStatement[12367-12849]:IfStatement[12389-12871]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12532-12705]:Block[12554-12727]"
    }, {
      "left" : "current.entry.setCompressedSize(z64.getCompressedSize().getLongValue());",
      "right" : "current.entry.setCompressedSize(z64.getCompressedSize().getLongValue());",
      "info" : "ExpressionStatement[12550-12622]:ExpressionStatement[12572-12644]"
    }, {
      "left" : "current.entry.setSize(z64.getSize().getLongValue());",
      "right" : "current.entry.setSize(z64.getSize().getLongValue());",
      "info" : "ExpressionStatement[12639-12691]:ExpressionStatement[12661-12713]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12711-12849]:Block[12733-12871]"
    }, {
      "left" : "current.entry.setCompressedSize(cSize.getValue());",
      "right" : "current.entry.setCompressedSize(cSize.getValue());",
      "info" : "ExpressionStatement[12729-12779]:ExpressionStatement[12751-12801]"
    }, {
      "left" : "current.entry.setSize(size.getValue());",
      "right" : "current.entry.setSize(size.getValue());",
      "info" : "ExpressionStatement[12796-12835]:ExpressionStatement[12818-12857]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12939-12980]:Block[12961-13002]"
    }, {
      "left" : "return getNextZipEntry();",
      "right" : "return getNextZipEntry();",
      "info" : "ReturnStatement[12949-12974]:ReturnStatement[12971-12996]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13279-13519]:Block[13301-13541]"
    }, {
      "left" : "if (ae instanceof ZipArchiveEntry)",
      "right" : "if (ae instanceof ZipArchiveEntry)",
      "info" : "IfStatement[13289-13491]:IfStatement[13311-13513]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13324-13491]:Block[13346-13513]"
    }, {
      "left" : "ZipArchiveEntry ze = (ZipArchiveEntry) ae;",
      "right" : "ZipArchiveEntry ze = (ZipArchiveEntry) ae;",
      "info" : "VariableDeclarationStatement[13338-13380]:VariableDeclarationStatement[13360-13402]"
    }, {
      "left" : "return ZipUtil.canHandleEntryData(ze)\n                && supportsDataDescriptorFor(ze);",
      "right" : "return ZipUtil.canHandleEntryData(ze)\n                && supportsDataDescriptorFor(ze);",
      "info" : "ReturnStatement[13393-13480]:ReturnStatement[13415-13502]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[13500-13513]:ReturnStatement[13522-13535]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13613-15076]:Block[13635-15098]"
    }, {
      "left" : "if (closed)",
      "right" : "if (closed)",
      "info" : "IfStatement[13623-13705]:IfStatement[13645-13727]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13635-13705]:Block[13657-13727]"
    }, {
      "left" : "throw new IOException(\"The stream is closed\");",
      "right" : "throw new IOException(\"The stream is closed\");",
      "info" : "ThrowStatement[13649-13695]:ThrowStatement[13671-13717]"
    }, {
      "left" : "if (current == null)",
      "right" : "if (current == null)",
      "info" : "IfStatement[13715-13770]:IfStatement[13737-13792]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13736-13770]:Block[13758-13792]"
    }, {
      "left" : "return -1;",
      "right" : "return -1;",
      "info" : "ReturnStatement[13750-13760]:ReturnStatement[13772-13782]"
    }, {
      "left" : "if (offset > buffer.length || length < 0 || offset < 0 || buffer.length - offset < length)",
      "right" : "if (offset > buffer.length || length < 0 || offset < 0 || buffer.length - offset < length)",
      "info" : "IfStatement[13829-13987]:IfStatement[13851-14009]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13920-13987]:Block[13942-14009]"
    }, {
      "left" : "throw new ArrayIndexOutOfBoundsException();",
      "right" : "throw new ArrayIndexOutOfBoundsException();",
      "info" : "ThrowStatement[13934-13977]:ThrowStatement[13956-13999]"
    }, {
      "left" : "ZipUtil.checkRequestedFeatures(current.entry);",
      "right" : "ZipUtil.checkRequestedFeatures(current.entry);",
      "info" : "ExpressionStatement[14005-14051]:ExpressionStatement[14027-14073]"
    }, {
      "left" : "if (!supportsDataDescriptorFor(current.entry))",
      "right" : "if (!supportsDataDescriptorFor(current.entry))",
      "info" : "IfStatement[14060-14263]:IfStatement[14082-14285]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14107-14263]:Block[14129-14285]"
    }, {
      "left" : "throw new UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,\n                    current.entry);",
      "right" : "throw new UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,\n                    current.entry);",
      "info" : "ThrowStatement[14121-14253]:ThrowStatement[14143-14275]"
    }, {
      "left" : "int read;",
      "right" : "int read;",
      "info" : "VariableDeclarationStatement[14273-14282]:VariableDeclarationStatement[14295-14304]"
    }, {
      "left" : "if (current.entry.getMethod() == ZipArchiveOutputStream.STORED)",
      "right" : "if (current.entry.getMethod() == ZipArchiveOutputStream.STORED)",
      "info" : "IfStatement[14291-14942]:IfStatement[14313-14964]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14355-14421]:Block[14377-14443]"
    }, {
      "left" : "read = readStored(buffer, offset, length);",
      "right" : "read = readStored(buffer, offset, length);",
      "info" : "ExpressionStatement[14369-14411]:ExpressionStatement[14391-14433]"
    }, {
      "left" : "if (current.entry.getMethod() == ZipArchiveOutputStream.DEFLATED)",
      "right" : "if (current.entry.getMethod() == ZipArchiveOutputStream.DEFLATED)",
      "info" : "IfStatement[14427-14942]:IfStatement[14449-14964]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14493-14561]:Block[14515-14583]"
    }, {
      "left" : "read = readDeflated(buffer, offset, length);",
      "right" : "read = readDeflated(buffer, offset, length);",
      "info" : "ExpressionStatement[14507-14551]:ExpressionStatement[14529-14573]"
    }, {
      "left" : "if (current.entry.getMethod() == ZipMethod.UNSHRINKING.getCode()\n                || current.entry.getMethod() == ZipMethod.IMPLODING.getCode())",
      "right" : "if (current.entry.getMethod() == ZipMethod.UNSHRINKING.getCode()\n                || current.entry.getMethod() == ZipMethod.IMPLODING.getCode())",
      "info" : "IfStatement[14567-14942]:IfStatement[14589-14964]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14711-14782]:Block[14733-14804]"
    }, {
      "left" : "read = current.in.read(buffer, offset, length);",
      "right" : "read = current.in.read(buffer, offset, length);",
      "info" : "ExpressionStatement[14725-14772]:ExpressionStatement[14747-14794]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14788-14942]:Block[14810-14964]"
    }, {
      "left" : "throw new UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),\n                    current.entry);",
      "right" : "throw new UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),\n                    current.entry);",
      "info" : "ThrowStatement[14802-14932]:ThrowStatement[14824-14954]"
    }, {
      "left" : "if (read >= 0)",
      "right" : "if (read >= 0)",
      "info" : "IfStatement[14960-15040]:IfStatement[14982-15062]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14975-15040]:Block[14997-15062]"
    }, {
      "left" : "current.crc.update(buffer, offset, read);",
      "right" : "current.crc.update(buffer, offset, read);",
      "info" : "ExpressionStatement[14989-15030]:ExpressionStatement[15011-15052]"
    }, {
      "left" : "return read;",
      "right" : "return read;",
      "info" : "ReturnStatement[15058-15070]:ReturnStatement[15080-15092]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15229-16222]:Block[15251-16244]"
    }, {
      "left" : "if (current.hasDataDescriptor)",
      "right" : "if (current.hasDataDescriptor)",
      "info" : "IfStatement[15240-15439]:IfStatement[15262-15461]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15271-15439]:Block[15293-15461]"
    }, {
      "left" : "if (lastStoredEntry == null)",
      "right" : "if (lastStoredEntry == null)",
      "info" : "IfStatement[15285-15364]:IfStatement[15307-15386]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15314-15364]:Block[15336-15386]"
    }, {
      "left" : "readStoredEntry();",
      "right" : "readStoredEntry();",
      "info" : "ExpressionStatement[15332-15350]:ExpressionStatement[15354-15372]"
    }, {
      "left" : "return lastStoredEntry.read(buffer, offset, length);",
      "right" : "return lastStoredEntry.read(buffer, offset, length);",
      "info" : "ReturnStatement[15377-15429]:ReturnStatement[15399-15451]"
    }, {
      "left" : "long csize = current.entry.getSize();",
      "right" : "long csize = current.entry.getSize();",
      "info" : "VariableDeclarationStatement[15449-15486]:VariableDeclarationStatement[15471-15508]"
    }, {
      "left" : "if (current.bytesRead >= csize)",
      "right" : "if (current.bytesRead >= csize)",
      "info" : "IfStatement[15495-15561]:IfStatement[15517-15583]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15527-15561]:Block[15549-15583]"
    }, {
      "left" : "return -1;",
      "right" : "return -1;",
      "info" : "ReturnStatement[15541-15551]:ReturnStatement[15563-15573]"
    }, {
      "left" : "if (buf.position() >= buf.limit())",
      "right" : "if (buf.position() >= buf.limit())",
      "info" : "IfStatement[15571-15871]:IfStatement[15593-15893]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15606-15871]:Block[15628-15893]"
    }, {
      "left" : "buf.position(0);",
      "right" : "buf.position(0);",
      "info" : "ExpressionStatement[15620-15636]:ExpressionStatement[15642-15658]"
    }, {
      "left" : "int l = in.read(buf.array());",
      "right" : "int l = in.read(buf.array());",
      "info" : "VariableDeclarationStatement[15649-15678]:VariableDeclarationStatement[15671-15700]"
    }, {
      "left" : "if (l == -1)",
      "right" : "if (l == -1)",
      "info" : "IfStatement[15691-15746]:IfStatement[15713-15768]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15704-15746]:Block[15726-15768]"
    }, {
      "left" : "return -1;",
      "right" : "return -1;",
      "info" : "ReturnStatement[15722-15732]:ReturnStatement[15744-15754]"
    }, {
      "left" : "buf.limit(l);",
      "right" : "buf.limit(l);",
      "info" : "ExpressionStatement[15759-15772]:ExpressionStatement[15781-15794]"
    }, {
      "left" : "count(buf.limit());",
      "right" : "count(buf.limit());",
      "info" : "ExpressionStatement[15786-15805]:ExpressionStatement[15808-15827]"
    }, {
      "left" : "current.bytesReadFromStream += buf.limit();",
      "right" : "current.bytesReadFromStream += buf.limit();",
      "info" : "ExpressionStatement[15818-15861]:ExpressionStatement[15840-15883]"
    }, {
      "left" : "int toRead = Math.min(buf.remaining(), length);",
      "right" : "int toRead = Math.min(buf.remaining(), length);",
      "info" : "VariableDeclarationStatement[15881-15928]:VariableDeclarationStatement[15903-15950]"
    }, {
      "left" : "if ((csize - current.bytesRead) < toRead)",
      "right" : "if ((csize - current.bytesRead) < toRead)",
      "info" : "IfStatement[15937-16115]:IfStatement[15959-16137]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15979-16115]:Block[16001-16137]"
    }, {
      "left" : "toRead = (int) (csize - current.bytesRead);",
      "right" : "toRead = (int) (csize - current.bytesRead);",
      "info" : "ExpressionStatement[16062-16105]:ExpressionStatement[16084-16127]"
    }, {
      "left" : "buf.get(buffer, offset, toRead);",
      "right" : "buf.get(buffer, offset, toRead);",
      "info" : "ExpressionStatement[16124-16156]:ExpressionStatement[16146-16178]"
    }, {
      "left" : "current.bytesRead += toRead;",
      "right" : "current.bytesRead += toRead;",
      "info" : "ExpressionStatement[16165-16193]:ExpressionStatement[16187-16215]"
    }, {
      "left" : "return toRead;",
      "right" : "return toRead;",
      "info" : "ReturnStatement[16202-16216]:ReturnStatement[16224-16238]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16379-16938]:Block[16401-16960]"
    }, {
      "left" : "int read = readFromInflater(buffer, offset, length);",
      "right" : "int read = readFromInflater(buffer, offset, length);",
      "info" : "VariableDeclarationStatement[16389-16441]:VariableDeclarationStatement[16411-16463]"
    }, {
      "left" : "if (read <= 0)",
      "right" : "if (read <= 0)",
      "info" : "IfStatement[16450-16911]:IfStatement[16472-16933]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16465-16911]:Block[16487-16933]"
    }, {
      "left" : "if (inf.finished())",
      "right" : "if (inf.finished())",
      "info" : "IfStatement[16479-16901]:IfStatement[16501-16923]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16499-16541]:Block[16521-16563]"
    }, {
      "left" : "return -1;",
      "right" : "return -1;",
      "info" : "ReturnStatement[16517-16527]:ReturnStatement[16539-16549]"
    }, {
      "left" : "if (inf.needsDictionary())",
      "right" : "if (inf.needsDictionary())",
      "info" : "IfStatement[16547-16901]:IfStatement[16569-16923]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16574-16803]:Block[16596-16825]"
    }, {
      "left" : "throw new ZipException(\"This archive needs a preset dictionary\"\n                                       + \" which is not supported by Commons\"\n                                       + \" Compress.\");",
      "right" : "throw new ZipException(\"This archive needs a preset dictionary\"\n                                       + \" which is not supported by Commons\"\n                                       + \" Compress.\");",
      "info" : "ThrowStatement[16592-16789]:ThrowStatement[16614-16811]"
    }, {
      "left" : "if (read == -1)",
      "right" : "if (read == -1)",
      "info" : "IfStatement[16809-16901]:IfStatement[16831-16923]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16825-16901]:Block[16847-16923]"
    }, {
      "left" : "throw new IOException(\"Truncated ZIP file\");",
      "right" : "throw new IOException(\"Truncated ZIP file\");",
      "info" : "ThrowStatement[16843-16887]:ThrowStatement[16865-16909]"
    }, {
      "left" : "return read;",
      "right" : "return read;",
      "info" : "ReturnStatement[16920-16932]:ReturnStatement[16942-16954]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17139-17786]:Block[17161-17808]"
    }, {
      "left" : "int read = 0;",
      "right" : "int read = 0;",
      "info" : "VariableDeclarationStatement[17149-17162]:VariableDeclarationStatement[17171-17184]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[17171-17759]:DoStatement[17193-17781]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17174-17720]:Block[17196-17742]"
    }, {
      "left" : "if (inf.needsInput())",
      "right" : "if (inf.needsInput())",
      "info" : "IfStatement[17188-17489]:IfStatement[17210-17511]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17210-17489]:Block[17232-17511]"
    }, {
      "left" : "int l = fill();",
      "right" : "int l = fill();",
      "info" : "VariableDeclarationStatement[17228-17243]:VariableDeclarationStatement[17250-17265]"
    }, {
      "left" : "if (l > 0)",
      "right" : "if (l > 0)",
      "info" : "IfStatement[17260-17475]:IfStatement[17282-17497]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17271-17354]:Block[17293-17376]"
    }, {
      "left" : "current.bytesReadFromStream += buf.limit();",
      "right" : "current.bytesReadFromStream += buf.limit();",
      "info" : "ExpressionStatement[17293-17336]:ExpressionStatement[17315-17358]"
    }, {
      "left" : "if (l == -1)",
      "right" : "if (l == -1)",
      "info" : "IfStatement[17360-17475]:IfStatement[17382-17497]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17373-17423]:Block[17395-17445]"
    }, {
      "left" : "return -1;",
      "right" : "return -1;",
      "info" : "ReturnStatement[17395-17405]:ReturnStatement[17417-17427]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17429-17475]:Block[17451-17497]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[17451-17457]:BreakStatement[17473-17479]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[17502-17710]:TryStatement[17524-17732]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17506-17581]:Block[17528-17603]"
    }, {
      "left" : "read = inf.inflate(buffer, offset, length);",
      "right" : "read = inf.inflate(buffer, offset, length);",
      "info" : "ExpressionStatement[17524-17567]:ExpressionStatement[17546-17589]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17612-17710]:Block[17634-17732]"
    }, {
      "left" : "throw (IOException) new ZipException(e.getMessage()).initCause(e);",
      "right" : "throw (IOException) new ZipException(e.getMessage()).initCause(e);",
      "info" : "ThrowStatement[17630-17696]:ThrowStatement[17652-17718]"
    }, {
      "left" : "return read;",
      "right" : "return read;",
      "info" : "ReturnStatement[17768-17780]:ReturnStatement[17790-17802]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17845-17959]:Block[17867-17981]"
    }, {
      "left" : "if (!closed)",
      "right" : "if (!closed)",
      "info" : "IfStatement[17855-17953]:IfStatement[17877-17975]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17868-17953]:Block[17890-17975]"
    }, {
      "left" : "closed = true;",
      "right" : "closed = true;",
      "info" : "ExpressionStatement[17882-17896]:ExpressionStatement[17904-17918]"
    }, {
      "left" : "in.close();",
      "right" : "in.close();",
      "info" : "ExpressionStatement[17909-17920]:ExpressionStatement[17931-17942]"
    }, {
      "left" : "inf.end();",
      "right" : "inf.end();",
      "info" : "ExpressionStatement[17933-17943]:ExpressionStatement[17955-17965]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18606-19062]:Block[18628-19084]"
    }, {
      "left" : "if (value >= 0)",
      "right" : "if (value >= 0)",
      "info" : "IfStatement[18616-19010]:IfStatement[18638-19032]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18632-19010]:Block[18654-19032]"
    }, {
      "left" : "long skipped = 0;",
      "right" : "long skipped = 0;",
      "info" : "VariableDeclarationStatement[18646-18663]:VariableDeclarationStatement[18668-18685]"
    }, {
      "left" : "while (skipped < value)",
      "right" : "while (skipped < value)",
      "info" : "WhileStatement[18676-18972]:WhileStatement[18698-18994]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18700-18972]:Block[18722-18994]"
    }, {
      "left" : "long rem = value - skipped;",
      "right" : "long rem = value - skipped;",
      "info" : "VariableDeclarationStatement[18718-18745]:VariableDeclarationStatement[18740-18767]"
    }, {
      "left" : "int x = read(SKIP_BUF, 0, (int) (SKIP_BUF.length > rem ? rem : SKIP_BUF.length));",
      "right" : "int x = read(SKIP_BUF, 0, (int) (SKIP_BUF.length > rem ? rem : SKIP_BUF.length));",
      "info" : "VariableDeclarationStatement[18762-18843]:VariableDeclarationStatement[18784-18865]"
    }, {
      "left" : "if (x == -1)",
      "right" : "if (x == -1)",
      "info" : "IfStatement[18860-18928]:IfStatement[18882-18950]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18873-18928]:Block[18895-18950]"
    }, {
      "left" : "return skipped;",
      "right" : "return skipped;",
      "info" : "ReturnStatement[18895-18910]:ReturnStatement[18917-18932]"
    }, {
      "left" : "skipped += x;",
      "right" : "skipped += x;",
      "info" : "ExpressionStatement[18945-18958]:ExpressionStatement[18967-18980]"
    }, {
      "left" : "return skipped;",
      "right" : "return skipped;",
      "info" : "ReturnStatement[18985-19000]:ReturnStatement[19007-19022]"
    }, {
      "left" : "throw new IllegalArgumentException();",
      "right" : "throw new IllegalArgumentException();",
      "info" : "ThrowStatement[19019-19056]:ThrowStatement[19041-19078]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19499-19931]:Block[19521-19953]"
    }, {
      "left" : "if (length < ZipArchiveOutputStream.LFH_SIG.length)",
      "right" : "if (length < ZipArchiveOutputStream.LFH_SIG.length)",
      "info" : "IfStatement[19509-19598]:IfStatement[19531-19620]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19561-19598]:Block[19583-19620]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[19575-19588]:ReturnStatement[19597-19610]"
    }, {
      "left" : "return checksig(signature, ZipArchiveOutputStream.LFH_SIG) // normal file\n            || checksig(signature, ZipArchiveOutputStream.EOCD_SIG) // empty zip\n            || checksig(signature, ZipArchiveOutputStream.DD_SIG) // split zip\n            || checksig(signature, ZipLong.SINGLE_SEGMENT_SPLIT_MARKER.getBytes());",
      "right" : "return checksig(signature, ZipArchiveOutputStream.LFH_SIG) // normal file\n            || checksig(signature, ZipArchiveOutputStream.EOCD_SIG) // empty zip\n            || checksig(signature, ZipArchiveOutputStream.DD_SIG) // split zip\n            || checksig(signature, ZipLong.SINGLE_SEGMENT_SPLIT_MARKER.getBytes());",
      "info" : "ReturnStatement[19608-19925]:ReturnStatement[19630-19947]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20004-20185]:Block[20026-20207]"
    }, {
      "left" : "for (int i = 0; i < expected.length; i++)",
      "right" : "for (int i = 0; i < expected.length; i++)",
      "info" : "ForStatement[20014-20158]:ForStatement[20036-20180]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20056-20158]:Block[20078-20180]"
    }, {
      "left" : "if (signature[i] != expected[i])",
      "right" : "if (signature[i] != expected[i])",
      "info" : "IfStatement[20070-20148]:IfStatement[20092-20170]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20103-20148]:Block[20125-20170]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[20121-20134]:ReturnStatement[20143-20156]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[20167-20179]:ReturnStatement[20189-20201]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21112-22232]:Block[21134-22254]"
    }, {
      "left" : "if (closed)",
      "right" : "if (closed)",
      "info" : "IfStatement[21122-21204]:IfStatement[21144-21226]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21134-21204]:Block[21156-21226]"
    }, {
      "left" : "throw new IOException(\"The stream is closed\");",
      "right" : "throw new IOException(\"The stream is closed\");",
      "info" : "ThrowStatement[21148-21194]:ThrowStatement[21170-21216]"
    }, {
      "left" : "if (current == null)",
      "right" : "if (current == null)",
      "info" : "IfStatement[21213-21265]:IfStatement[21235-21287]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21234-21265]:Block[21256-21287]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[21248-21255]:ReturnStatement[21270-21277]"
    }, {
      "left" : "if (current.bytesReadFromStream <= current.entry.getCompressedSize()\n                && !current.hasDataDescriptor)",
      "right" : "if (current.bytesReadFromStream <= current.entry.getCompressedSize()\n                && !current.hasDataDescriptor)",
      "info" : "IfStatement[21318-22007]:IfStatement[21340-22029]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21434-21482]:Block[21456-21504]"
    }, {
      "left" : "drainCurrentEntryData();",
      "right" : "drainCurrentEntryData();",
      "info" : "ExpressionStatement[21448-21472]:ExpressionStatement[21470-21494]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21488-22007]:Block[21510-22029]"
    }, {
      "left" : "skip(Long.MAX_VALUE);",
      "right" : "skip(Long.MAX_VALUE);",
      "info" : "ExpressionStatement[21502-21523]:ExpressionStatement[21524-21545]"
    }, {
      "left" : "long inB = current.entry.getMethod() == ZipArchiveOutputStream.DEFLATED\n                       ? getBytesInflated() : current.bytesRead;",
      "right" : "long inB = current.entry.getMethod() == ZipArchiveOutputStream.DEFLATED\n                       ? getBytesInflated() : current.bytesRead;",
      "info" : "VariableDeclarationStatement[21537-21673]:VariableDeclarationStatement[21559-21695]"
    }, {
      "left" : "int diff = (int) (current.bytesReadFromStream - inB);",
      "right" : "int diff = (int) (current.bytesReadFromStream - inB);",
      "info" : "VariableDeclarationStatement[21793-21846]:VariableDeclarationStatement[21815-21868]"
    }, {
      "left" : "if (diff > 0)",
      "right" : "if (diff > 0)",
      "info" : "IfStatement[21903-21997]:IfStatement[21925-22019]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21917-21997]:Block[21939-22019]"
    }, {
      "left" : "pushback(buf.array(), buf.limit() - diff, diff);",
      "right" : "pushback(buf.array(), buf.limit() - diff, diff);",
      "info" : "ExpressionStatement[21935-21983]:ExpressionStatement[21957-22005]"
    }, {
      "left" : "if (lastStoredEntry == null && current.hasDataDescriptor)",
      "right" : "if (lastStoredEntry == null && current.hasDataDescriptor)",
      "info" : "IfStatement[22017-22120]:IfStatement[22039-22142]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22075-22120]:Block[22097-22142]"
    }, {
      "left" : "readDataDescriptor();",
      "right" : "readDataDescriptor();",
      "info" : "ExpressionStatement[22089-22110]:ExpressionStatement[22111-22132]"
    }, {
      "left" : "inf.reset();",
      "right" : "inf.reset();",
      "info" : "ExpressionStatement[22130-22142]:ExpressionStatement[22152-22164]"
    }, {
      "left" : "buf.clear().flip();",
      "right" : "buf.clear().flip();",
      "info" : "ExpressionStatement[22151-22170]:ExpressionStatement[22173-22192]"
    }, {
      "left" : "current = null;",
      "right" : "current = null;",
      "info" : "ExpressionStatement[22179-22194]:ExpressionStatement[22201-22216]"
    }, {
      "left" : "lastStoredEntry = null;",
      "right" : "lastStoredEntry = null;",
      "info" : "ExpressionStatement[22203-22226]:ExpressionStatement[22225-22248]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22414-22851]:Block[22436-22873]"
    }, {
      "left" : "long remaining = current.entry.getCompressedSize() - current.bytesReadFromStream;",
      "right" : "long remaining = current.entry.getCompressedSize() - current.bytesReadFromStream;",
      "info" : "VariableDeclarationStatement[22424-22505]:VariableDeclarationStatement[22446-22527]"
    }, {
      "left" : "while (remaining > 0)",
      "right" : "while (remaining > 0)",
      "info" : "WhileStatement[22514-22845]:WhileStatement[22536-22867]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22536-22845]:Block[22558-22867]"
    }, {
      "left" : "long n = in.read(buf.array(), 0, (int) Math.min(buf.capacity(), remaining));",
      "right" : "long n = in.read(buf.array(), 0, (int) Math.min(buf.capacity(), remaining));",
      "info" : "VariableDeclarationStatement[22550-22626]:VariableDeclarationStatement[22572-22648]"
    }, {
      "left" : "if (n < 0)",
      "right" : "if (n < 0)",
      "info" : "IfStatement[22639-22835]:IfStatement[22661-22857]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22650-22756]:Block[22672-22778]"
    }, {
      "left" : "throw new EOFException(\"Truncated ZIP entry: \" + current.entry.getName());",
      "right" : "throw new EOFException(\"Truncated ZIP entry: \" + current.entry.getName());",
      "info" : "ThrowStatement[22668-22742]:ThrowStatement[22690-22764]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22762-22835]:Block[22784-22857]"
    }, {
      "left" : "count(n);",
      "right" : "count(n);",
      "info" : "ExpressionStatement[22780-22789]:ExpressionStatement[22802-22811]"
    }, {
      "left" : "remaining -= n;",
      "right" : "remaining -= n;",
      "info" : "ExpressionStatement[22806-22821]:ExpressionStatement[22828-22843]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23631-23883]:Block[23653-23905]"
    }, {
      "left" : "long inB = inf.getBytesRead();",
      "right" : "long inB = inf.getBytesRead();",
      "info" : "VariableDeclarationStatement[23641-23671]:VariableDeclarationStatement[23663-23693]"
    }, {
      "left" : "if (current.bytesReadFromStream >= TWO_EXP_32)",
      "right" : "if (current.bytesReadFromStream >= TWO_EXP_32)",
      "info" : "IfStatement[23680-23857]:IfStatement[23702-23879]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23727-23857]:Block[23749-23879]"
    }, {
      "left" : "while (inB + TWO_EXP_32 <= current.bytesReadFromStream)",
      "right" : "while (inB + TWO_EXP_32 <= current.bytesReadFromStream)",
      "info" : "WhileStatement[23741-23847]:WhileStatement[23763-23869]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23797-23847]:Block[23819-23869]"
    }, {
      "left" : "inB += TWO_EXP_32;",
      "right" : "inB += TWO_EXP_32;",
      "info" : "ExpressionStatement[23815-23833]:ExpressionStatement[23837-23855]"
    }, {
      "left" : "return inB;",
      "right" : "return inB;",
      "info" : "ReturnStatement[23866-23877]:ReturnStatement[23888-23899]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23927-24245]:Block[23949-24267]"
    }, {
      "left" : "if (closed)",
      "right" : "if (closed)",
      "info" : "IfStatement[23937-24019]:IfStatement[23959-24041]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23949-24019]:Block[23971-24041]"
    }, {
      "left" : "throw new IOException(\"The stream is closed\");",
      "right" : "throw new IOException(\"The stream is closed\");",
      "info" : "ThrowStatement[23963-24009]:ThrowStatement[23985-24031]"
    }, {
      "left" : "int length = in.read(buf.array());",
      "right" : "int length = in.read(buf.array());",
      "info" : "VariableDeclarationStatement[24028-24062]:VariableDeclarationStatement[24050-24084]"
    }, {
      "left" : "if (length > 0)",
      "right" : "if (length > 0)",
      "info" : "IfStatement[24071-24216]:IfStatement[24093-24238]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24087-24216]:Block[24109-24238]"
    }, {
      "left" : "buf.limit(length);",
      "right" : "buf.limit(length);",
      "info" : "ExpressionStatement[24101-24119]:ExpressionStatement[24123-24141]"
    }, {
      "left" : "count(buf.limit());",
      "right" : "count(buf.limit());",
      "info" : "ExpressionStatement[24132-24151]:ExpressionStatement[24154-24173]"
    }, {
      "left" : "inf.setInput(buf.array(), 0, buf.limit());",
      "right" : "inf.setInput(buf.array(), 0, buf.limit());",
      "info" : "ExpressionStatement[24164-24206]:ExpressionStatement[24186-24228]"
    }, {
      "left" : "return length;",
      "right" : "return length;",
      "info" : "ReturnStatement[24225-24239]:ReturnStatement[24247-24261]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24303-24458]:Block[24325-24480]"
    }, {
      "left" : "int count = IOUtils.readFully(in, b);",
      "right" : "int count = IOUtils.readFully(in, b);",
      "info" : "VariableDeclarationStatement[24313-24350]:VariableDeclarationStatement[24335-24372]"
    }, {
      "left" : "count(count);",
      "right" : "count(count);",
      "info" : "ExpressionStatement[24359-24372]:ExpressionStatement[24381-24394]"
    }, {
      "left" : "if (count < b.length)",
      "right" : "if (count < b.length)",
      "info" : "IfStatement[24381-24452]:IfStatement[24403-24474]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24403-24452]:Block[24425-24474]"
    }, {
      "left" : "throw new EOFException();",
      "right" : "throw new EOFException();",
      "info" : "ThrowStatement[24417-24442]:ThrowStatement[24439-24464]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24517-26073]:Block[24539-26095]"
    }, {
      "left" : "readFully(WORD_BUF);",
      "right" : "readFully(WORD_BUF);",
      "info" : "ExpressionStatement[24527-24547]:ExpressionStatement[24549-24569]"
    }, {
      "left" : "ZipLong val = new ZipLong(WORD_BUF);",
      "right" : "ZipLong val = new ZipLong(WORD_BUF);",
      "info" : "VariableDeclarationStatement[24556-24592]:VariableDeclarationStatement[24578-24614]"
    }, {
      "left" : "if (ZipLong.DD_SIG.equals(val))",
      "right" : "if (ZipLong.DD_SIG.equals(val))",
      "info" : "IfStatement[24601-24774]:IfStatement[24623-24796]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24633-24774]:Block[24655-24796]"
    }, {
      "left" : "readFully(WORD_BUF);",
      "right" : "readFully(WORD_BUF);",
      "info" : "ExpressionStatement[24703-24723]:ExpressionStatement[24725-24745]"
    }, {
      "left" : "val = new ZipLong(WORD_BUF);",
      "right" : "val = new ZipLong(WORD_BUF);",
      "info" : "ExpressionStatement[24736-24764]:ExpressionStatement[24758-24786]"
    }, {
      "left" : "current.entry.setCrc(val.getValue());",
      "right" : "current.entry.setCrc(val.getValue());",
      "info" : "ExpressionStatement[24783-24820]:ExpressionStatement[24805-24842]"
    }, {
      "left" : "readFully(TWO_DWORD_BUF);",
      "right" : "readFully(TWO_DWORD_BUF);",
      "info" : "ExpressionStatement[25469-25494]:ExpressionStatement[25491-25516]"
    }, {
      "left" : "ZipLong potentialSig = new ZipLong(TWO_DWORD_BUF, DWORD);",
      "right" : "ZipLong potentialSig = new ZipLong(TWO_DWORD_BUF, DWORD);",
      "info" : "VariableDeclarationStatement[25503-25560]:VariableDeclarationStatement[25525-25582]"
    }, {
      "left" : "if (potentialSig.equals(ZipLong.CFH_SIG) || potentialSig.equals(ZipLong.LFH_SIG))",
      "right" : "if (potentialSig.equals(ZipLong.CFH_SIG) || potentialSig.equals(ZipLong.LFH_SIG))",
      "info" : "IfStatement[25569-26067]:IfStatement[25591-26089]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25651-25865]:Block[25673-25887]"
    }, {
      "left" : "pushback(TWO_DWORD_BUF, DWORD, DWORD);",
      "right" : "pushback(TWO_DWORD_BUF, DWORD, DWORD);",
      "info" : "ExpressionStatement[25665-25703]:ExpressionStatement[25687-25725]"
    }, {
      "left" : "current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));",
      "right" : "current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));",
      "info" : "ExpressionStatement[25716-25781]:ExpressionStatement[25738-25803]"
    }, {
      "left" : "current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF, WORD));",
      "right" : "current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF, WORD));",
      "info" : "ExpressionStatement[25794-25855]:ExpressionStatement[25816-25877]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25871-26067]:Block[25893-26089]"
    }, {
      "left" : "current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));",
      "right" : "current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));",
      "info" : "ExpressionStatement[25885-25966]:ExpressionStatement[25907-25988]"
    }, {
      "left" : "current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF, DWORD));",
      "right" : "current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF, DWORD));",
      "info" : "ExpressionStatement[25979-26057]:ExpressionStatement[26001-26079]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26404-26635]:Block[26426-26657]"
    }, {
      "left" : "return !entry.getGeneralPurposeBit().usesDataDescriptor()\n\n                || (allowStoredEntriesWithDataDescriptor && entry.getMethod() == ZipEntry.STORED)\n                || entry.getMethod() == ZipEntry.DEFLATED;",
      "right" : "return !entry.getGeneralPurposeBit().usesDataDescriptor()\n\n                || (allowStoredEntriesWithDataDescriptor && entry.getMethod() == ZipEntry.STORED)\n                || entry.getMethod() == ZipEntry.DEFLATED;",
      "info" : "ReturnStatement[26414-26629]:ReturnStatement[26436-26651]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27352-28334]:Block[27374-28356]"
    }, {
      "left" : "ByteArrayOutputStream bos = new ByteArrayOutputStream();",
      "right" : "ByteArrayOutputStream bos = new ByteArrayOutputStream();",
      "info" : "VariableDeclarationStatement[27362-27418]:VariableDeclarationStatement[27384-27440]"
    }, {
      "left" : "int off = 0;",
      "right" : "int off = 0;",
      "info" : "VariableDeclarationStatement[27427-27439]:VariableDeclarationStatement[27449-27461]"
    }, {
      "left" : "boolean done = false;",
      "right" : "boolean done = false;",
      "info" : "VariableDeclarationStatement[27448-27469]:VariableDeclarationStatement[27470-27491]"
    }, {
      "left" : "int ddLen = current.usesZip64 ? WORD + 2 * DWORD : 3 * WORD;",
      "right" : "int ddLen = current.usesZip64 ? WORD + 2 * DWORD : 3 * WORD;",
      "info" : "VariableDeclarationStatement[27521-27581]:VariableDeclarationStatement[27543-27603]"
    }, {
      "left" : "while (!done)",
      "right" : "while (!done)",
      "info" : "WhileStatement[27591-28234]:WhileStatement[27613-28256]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27605-28234]:Block[27627-28256]"
    }, {
      "left" : "int r = in.read(buf.array(), off, ZipArchiveOutputStream.BUFFER_SIZE - off);",
      "right" : "int r = in.read(buf.array(), off, ZipArchiveOutputStream.BUFFER_SIZE - off);",
      "info" : "VariableDeclarationStatement[27619-27695]:VariableDeclarationStatement[27641-27717]"
    }, {
      "left" : "if (r <= 0)",
      "right" : "if (r <= 0)",
      "info" : "IfStatement[27708-27898]:IfStatement[27730-27920]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27720-27898]:Block[27742-27920]"
    }, {
      "left" : "throw new IOException(\"Truncated ZIP file\");",
      "right" : "throw new IOException(\"Truncated ZIP file\");",
      "info" : "ThrowStatement[27840-27884]:ThrowStatement[27862-27906]"
    }, {
      "left" : "if (r + off < 4)",
      "right" : "if (r + off < 4)",
      "info" : "IfStatement[27911-28062]:IfStatement[27933-28084]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27928-28062]:Block[27950-28084]"
    }, {
      "left" : "off += r;",
      "right" : "off += r;",
      "info" : "ExpressionStatement[28013-28022]:ExpressionStatement[28035-28044]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[28039-28048]:ContinueStatement[28061-28070]"
    }, {
      "left" : "done = bufferContainsSignature(bos, off, r, ddLen);",
      "right" : "done = bufferContainsSignature(bos, off, r, ddLen);",
      "info" : "ExpressionStatement[28076-28127]:ExpressionStatement[28098-28149]"
    }, {
      "left" : "if (!done)",
      "right" : "if (!done)",
      "info" : "IfStatement[28140-28224]:IfStatement[28162-28246]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28151-28224]:Block[28173-28246]"
    }, {
      "left" : "off = cacheBytesRead(bos, off, r, ddLen);",
      "right" : "off = cacheBytesRead(bos, off, r, ddLen);",
      "info" : "ExpressionStatement[28169-28210]:ExpressionStatement[28191-28232]"
    }, {
      "left" : "byte[] b = bos.toByteArray();",
      "right" : "byte[] b = bos.toByteArray();",
      "info" : "VariableDeclarationStatement[28244-28273]:VariableDeclarationStatement[28266-28295]"
    }, {
      "left" : "lastStoredEntry = new ByteArrayInputStream(b);",
      "right" : "lastStoredEntry = new ByteArrayInputStream(b);",
      "info" : "ExpressionStatement[28282-28328]:ExpressionStatement[28304-28350]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29023-30276]:Block[29045-30298]"
    }, {
      "left" : "boolean done = false;",
      "right" : "boolean done = false;",
      "info" : "VariableDeclarationStatement[29034-29055]:VariableDeclarationStatement[29056-29077]"
    }, {
      "left" : "int readTooMuch = 0;",
      "right" : "int readTooMuch = 0;",
      "info" : "VariableDeclarationStatement[29064-29084]:VariableDeclarationStatement[29086-29106]"
    }, {
      "left" : "for (int i = 0; !done && i < lastRead - 4; i++)",
      "right" : "for (int i = 0; !done && i < lastRead - 4; i++)",
      "info" : "ForStatement[29093-30249]:ForStatement[29115-30271]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29141-30249]:Block[29163-30271]"
    }, {
      "left" : "if (buf.array()[i] == LFH[0] && buf.array()[i + 1] == LFH[1])",
      "right" : "if (buf.array()[i] == LFH[0] && buf.array()[i + 1] == LFH[1])",
      "info" : "IfStatement[29155-30239]:IfStatement[29177-30261]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29217-30239]:Block[29239-30261]"
    }, {
      "left" : "if ((buf.array()[i + 2] == LFH[2] && buf.array()[i + 3] == LFH[3])\n                    || (buf.array()[i] == CFH[2] && buf.array()[i + 3] == CFH[3]))",
      "right" : "if ((buf.array()[i + 2] == LFH[2] && buf.array()[i + 3] == LFH[3])\n                    || (buf.array()[i] == CFH[2] && buf.array()[i + 3] == CFH[3]))",
      "info" : "IfStatement[29235-29781]:IfStatement[29257-29803]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29385-29553]:Block[29407-29575]"
    }, {
      "left" : "readTooMuch = offset + lastRead - i - expectedDDLen;",
      "right" : "readTooMuch = offset + lastRead - i - expectedDDLen;",
      "info" : "ExpressionStatement[29450-29502]:ExpressionStatement[29472-29524]"
    }, {
      "left" : "done = true;",
      "right" : "done = true;",
      "info" : "ExpressionStatement[29523-29535]:ExpressionStatement[29545-29557]"
    }, {
      "left" : "if (buf.array()[i + 2] == DD[2] && buf.array()[i + 3] == DD[3])",
      "right" : "if (buf.array()[i + 2] == DD[2] && buf.array()[i + 3] == DD[3])",
      "info" : "IfStatement[29575-29781]:IfStatement[29597-29803]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29639-29781]:Block[29661-29803]"
    }, {
      "left" : "readTooMuch = offset + lastRead - i;",
      "right" : "readTooMuch = offset + lastRead - i;",
      "info" : "ExpressionStatement[29694-29730]:ExpressionStatement[29716-29752]"
    }, {
      "left" : "done = true;",
      "right" : "done = true;",
      "info" : "ExpressionStatement[29751-29763]:ExpressionStatement[29773-29785]"
    }, {
      "left" : "if (done)",
      "right" : "if (done)",
      "info" : "IfStatement[29798-30225]:IfStatement[29820-30247]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29808-30225]:Block[29830-30247]"
    }, {
      "left" : "pushback(buf.array(), offset + lastRead - readTooMuch, readTooMuch);",
      "right" : "pushback(buf.array(), offset + lastRead - readTooMuch, readTooMuch);",
      "info" : "ExpressionStatement[30047-30115]:ExpressionStatement[30069-30137]"
    }, {
      "left" : "bos.write(buf.array(), 0, i);",
      "right" : "bos.write(buf.array(), 0, i);",
      "info" : "ExpressionStatement[30136-30165]:ExpressionStatement[30158-30187]"
    }, {
      "left" : "readDataDescriptor();",
      "right" : "readDataDescriptor();",
      "info" : "ExpressionStatement[30186-30207]:ExpressionStatement[30208-30229]"
    }, {
      "left" : "return done;",
      "right" : "return done;",
      "info" : "ReturnStatement[30258-30270]:ReturnStatement[30280-30292]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30776-31139]:Block[30798-31161]"
    }, {
      "left" : "final int cacheable = offset + lastRead - expecteDDLen - 3;",
      "right" : "final int cacheable = offset + lastRead - expecteDDLen - 3;",
      "info" : "VariableDeclarationStatement[30786-30845]:VariableDeclarationStatement[30808-30867]"
    }, {
      "left" : "if (cacheable > 0)",
      "right" : "if (cacheable > 0)",
      "info" : "IfStatement[30854-31110]:IfStatement[30876-31132]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30873-31061]:Block[30895-31083]"
    }, {
      "left" : "bos.write(buf.array(), 0, cacheable);",
      "right" : "bos.write(buf.array(), 0, cacheable);",
      "info" : "ExpressionStatement[30887-30924]:ExpressionStatement[30909-30946]"
    }, {
      "left" : "System.arraycopy(buf.array(), cacheable, buf.array(), 0, expecteDDLen + 3);",
      "right" : "System.arraycopy(buf.array(), cacheable, buf.array(), 0, expecteDDLen + 3);",
      "info" : "ExpressionStatement[30937-31012]:ExpressionStatement[30959-31034]"
    }, {
      "left" : "offset = expecteDDLen + 3;",
      "right" : "offset = expecteDDLen + 3;",
      "info" : "ExpressionStatement[31025-31051]:ExpressionStatement[31047-31073]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31067-31110]:Block[31089-31132]"
    }, {
      "left" : "offset += lastRead;",
      "right" : "offset += lastRead;",
      "info" : "ExpressionStatement[31081-31100]:ExpressionStatement[31103-31122]"
    }, {
      "left" : "return offset;",
      "right" : "return offset;",
      "info" : "ReturnStatement[31119-31133]:ReturnStatement[31141-31155]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31222-31326]:Block[31244-31348]"
    }, {
      "left" : "((PushbackInputStream) in).unread(buf, offset, length);",
      "right" : "((PushbackInputStream) in).unread(buf, offset, length);",
      "info" : "ExpressionStatement[31232-31287]:ExpressionStatement[31254-31309]"
    }, {
      "left" : "pushedBackBytes(length);",
      "right" : "pushedBackBytes(length);",
      "info" : "ExpressionStatement[31296-31320]:ExpressionStatement[31318-31342]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32169-32625]:Block[32191-32647]"
    }, {
      "left" : "realSkip(entriesRead * CFH_LEN - LFH_LEN);",
      "right" : "realSkip(entriesRead * CFH_LEN - LFH_LEN);",
      "info" : "ExpressionStatement[32359-32401]:ExpressionStatement[32381-32423]"
    }, {
      "left" : "findEocdRecord();",
      "right" : "findEocdRecord();",
      "info" : "ExpressionStatement[32410-32427]:ExpressionStatement[32432-32449]"
    }, {
      "left" : "realSkip(ZipFile.MIN_EOCD_SIZE - WORD /* signature */ - SHORT /* comment len */);",
      "right" : "realSkip(ZipFile.MIN_EOCD_SIZE - WORD /* signature */ - SHORT /* comment len */);",
      "info" : "ExpressionStatement[32436-32517]:ExpressionStatement[32458-32539]"
    }, {
      "left" : "readFully(SHORT_BUF);",
      "right" : "readFully(SHORT_BUF);",
      "info" : "ExpressionStatement[32526-32547]:ExpressionStatement[32548-32569]"
    }, {
      "left" : "realSkip(ZipShort.getValue(SHORT_BUF));",
      "right" : "realSkip(ZipShort.getValue(SHORT_BUF));",
      "info" : "ExpressionStatement[32580-32619]:ExpressionStatement[32602-32641]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32805-33937]:Block[32827-33959]"
    }, {
      "left" : "int currentByte = -1;",
      "right" : "int currentByte = -1;",
      "info" : "VariableDeclarationStatement[32815-32836]:VariableDeclarationStatement[32837-32858]"
    }, {
      "left" : "boolean skipReadCall = false;",
      "right" : "boolean skipReadCall = false;",
      "info" : "VariableDeclarationStatement[32845-32874]:VariableDeclarationStatement[32867-32896]"
    }, {
      "left" : "while (skipReadCall || (currentByte = readOneByte()) > -1)",
      "right" : "while (skipReadCall || (currentByte = readOneByte()) > -1)",
      "info" : "WhileStatement[32883-33931]:WhileStatement[32905-33953]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32942-33931]:Block[32964-33953]"
    }, {
      "left" : "skipReadCall = false;",
      "right" : "skipReadCall = false;",
      "info" : "ExpressionStatement[32956-32977]:ExpressionStatement[32978-32999]"
    }, {
      "left" : "if (!isFirstByteOfEocdSig(currentByte))",
      "right" : "if (!isFirstByteOfEocdSig(currentByte))",
      "info" : "IfStatement[32990-33071]:IfStatement[33012-33093]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33030-33071]:Block[33052-33093]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[33048-33057]:ContinueStatement[33070-33079]"
    }, {
      "left" : "currentByte = readOneByte();",
      "right" : "currentByte = readOneByte();",
      "info" : "ExpressionStatement[33084-33112]:ExpressionStatement[33106-33134]"
    }, {
      "left" : "if (currentByte != ZipArchiveOutputStream.EOCD_SIG[1])",
      "right" : "if (currentByte != ZipArchiveOutputStream.EOCD_SIG[1])",
      "info" : "IfStatement[33125-33373]:IfStatement[33147-33395]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33180-33373]:Block[33202-33395]"
    }, {
      "left" : "if (currentByte == -1)",
      "right" : "if (currentByte == -1)",
      "info" : "IfStatement[33198-33267]:IfStatement[33220-33289]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33221-33267]:Block[33243-33289]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[33243-33249]:BreakStatement[33265-33271]"
    }, {
      "left" : "skipReadCall = isFirstByteOfEocdSig(currentByte);",
      "right" : "skipReadCall = isFirstByteOfEocdSig(currentByte);",
      "info" : "ExpressionStatement[33284-33333]:ExpressionStatement[33306-33355]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[33350-33359]:ContinueStatement[33372-33381]"
    }, {
      "left" : "currentByte = readOneByte();",
      "right" : "currentByte = readOneByte();",
      "info" : "ExpressionStatement[33386-33414]:ExpressionStatement[33408-33436]"
    }, {
      "left" : "if (currentByte != ZipArchiveOutputStream.EOCD_SIG[2])",
      "right" : "if (currentByte != ZipArchiveOutputStream.EOCD_SIG[2])",
      "info" : "IfStatement[33427-33675]:IfStatement[33449-33697]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33482-33675]:Block[33504-33697]"
    }, {
      "left" : "if (currentByte == -1)",
      "right" : "if (currentByte == -1)",
      "info" : "IfStatement[33500-33569]:IfStatement[33522-33591]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33523-33569]:Block[33545-33591]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[33545-33551]:BreakStatement[33567-33573]"
    }, {
      "left" : "skipReadCall = isFirstByteOfEocdSig(currentByte);",
      "right" : "skipReadCall = isFirstByteOfEocdSig(currentByte);",
      "info" : "ExpressionStatement[33586-33635]:ExpressionStatement[33608-33657]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[33652-33661]:ContinueStatement[33674-33683]"
    }, {
      "left" : "currentByte = readOneByte();",
      "right" : "currentByte = readOneByte();",
      "info" : "ExpressionStatement[33688-33716]:ExpressionStatement[33710-33738]"
    }, {
      "left" : "if (currentByte == -1\n                || currentByte == ZipArchiveOutputStream.EOCD_SIG[3])",
      "right" : "if (currentByte == -1\n                || currentByte == ZipArchiveOutputStream.EOCD_SIG[3])",
      "info" : "IfStatement[33729-33859]:IfStatement[33751-33881]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33821-33859]:Block[33843-33881]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[33839-33845]:BreakStatement[33861-33867]"
    }, {
      "left" : "skipReadCall = isFirstByteOfEocdSig(currentByte);",
      "right" : "skipReadCall = isFirstByteOfEocdSig(currentByte);",
      "info" : "ExpressionStatement[33872-33921]:ExpressionStatement[33894-33943]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34217-34686]:Block[34239-34708]"
    }, {
      "left" : "if (value >= 0)",
      "right" : "if (value >= 0)",
      "info" : "IfStatement[34227-34634]:IfStatement[34249-34656]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34243-34634]:Block[34265-34656]"
    }, {
      "left" : "long skipped = 0;",
      "right" : "long skipped = 0;",
      "info" : "VariableDeclarationStatement[34257-34274]:VariableDeclarationStatement[34279-34296]"
    }, {
      "left" : "while (skipped < value)",
      "right" : "while (skipped < value)",
      "info" : "WhileStatement[34287-34604]:WhileStatement[34309-34626]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34311-34604]:Block[34333-34626]"
    }, {
      "left" : "long rem = value - skipped;",
      "right" : "long rem = value - skipped;",
      "info" : "VariableDeclarationStatement[34329-34356]:VariableDeclarationStatement[34351-34378]"
    }, {
      "left" : "int x = in.read(SKIP_BUF, 0, (int) (SKIP_BUF.length > rem ? rem : SKIP_BUF.length));",
      "right" : "int x = in.read(SKIP_BUF, 0, (int) (SKIP_BUF.length > rem ? rem : SKIP_BUF.length));",
      "info" : "VariableDeclarationStatement[34373-34457]:VariableDeclarationStatement[34395-34479]"
    }, {
      "left" : "if (x == -1)",
      "right" : "if (x == -1)",
      "info" : "IfStatement[34474-34534]:IfStatement[34496-34556]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34487-34534]:Block[34509-34556]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[34509-34516]:ReturnStatement[34531-34538]"
    }, {
      "left" : "count(x);",
      "right" : "count(x);",
      "info" : "ExpressionStatement[34551-34560]:ExpressionStatement[34573-34582]"
    }, {
      "left" : "skipped += x;",
      "right" : "skipped += x;",
      "info" : "ExpressionStatement[34577-34590]:ExpressionStatement[34599-34612]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[34617-34624]:ReturnStatement[34639-34646]"
    }, {
      "left" : "throw new IllegalArgumentException();",
      "right" : "throw new IllegalArgumentException();",
      "info" : "ThrowStatement[34643-34680]:ThrowStatement[34665-34702]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34951-35058]:Block[34973-35080]"
    }, {
      "left" : "int b = in.read();",
      "right" : "int b = in.read();",
      "info" : "VariableDeclarationStatement[34961-34979]:VariableDeclarationStatement[34983-35001]"
    }, {
      "left" : "if (b != -1)",
      "right" : "if (b != -1)",
      "info" : "IfStatement[34988-35034]:IfStatement[35010-35056]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35001-35034]:Block[35023-35056]"
    }, {
      "left" : "count(1);",
      "right" : "count(1);",
      "info" : "ExpressionStatement[35015-35024]:ExpressionStatement[35037-35046]"
    }, {
      "left" : "return b;",
      "right" : "return b;",
      "info" : "ReturnStatement[35043-35052]:ReturnStatement[35065-35074]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35108-35171]:Block[35130-35193]"
    }, {
      "left" : "return b == ZipArchiveOutputStream.EOCD_SIG[0];",
      "right" : "return b == ZipArchiveOutputStream.EOCD_SIG[0];",
      "info" : "ReturnStatement[35118-35165]:ReturnStatement[35140-35187]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37196-37262]:Block[37218-37284]"
    }, {
      "left" : "this.max = size;",
      "right" : "this.max = size;",
      "info" : "ExpressionStatement[37210-37226]:ExpressionStatement[37232-37248]"
    }, {
      "left" : "this.in = in;",
      "right" : "this.in = in;",
      "info" : "ExpressionStatement[37239-37252]:ExpressionStatement[37261-37274]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37327-37574]:Block[37349-37596]"
    }, {
      "left" : "if (max >= 0 && pos >= max)",
      "right" : "if (max >= 0 && pos >= max)",
      "info" : "IfStatement[37341-37411]:IfStatement[37363-37433]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37369-37411]:Block[37391-37433]"
    }, {
      "left" : "return -1;",
      "right" : "return -1;",
      "info" : "ReturnStatement[37387-37397]:ReturnStatement[37409-37419]"
    }, {
      "left" : "final int result = in.read();",
      "right" : "final int result = in.read();",
      "info" : "VariableDeclarationStatement[37424-37453]:VariableDeclarationStatement[37446-37475]"
    }, {
      "left" : "pos++;",
      "right" : "pos++;",
      "info" : "ExpressionStatement[37466-37472]:ExpressionStatement[37488-37494]"
    }, {
      "left" : "count(1);",
      "right" : "count(1);",
      "info" : "ExpressionStatement[37485-37494]:ExpressionStatement[37507-37516]"
    }, {
      "left" : "current.bytesReadFromStream++;",
      "right" : "current.bytesReadFromStream++;",
      "info" : "ExpressionStatement[37507-37537]:ExpressionStatement[37529-37559]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[37550-37564]:ReturnStatement[37572-37586]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37653-37710]:Block[37675-37732]"
    }, {
      "left" : "return this.read(b, 0, b.length);",
      "right" : "return this.read(b, 0, b.length);",
      "info" : "ReturnStatement[37667-37700]:ReturnStatement[37689-37722]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37819-38277]:Block[37841-38299]"
    }, {
      "left" : "if (max >= 0 && pos >= max)",
      "right" : "if (max >= 0 && pos >= max)",
      "info" : "IfStatement[37833-37903]:IfStatement[37855-37925]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37861-37903]:Block[37883-37925]"
    }, {
      "left" : "return -1;",
      "right" : "return -1;",
      "info" : "ReturnStatement[37879-37889]:ReturnStatement[37901-37911]"
    }, {
      "left" : "final long maxRead = max >= 0 ? Math.min(len, max - pos) : len;",
      "right" : "final long maxRead = max >= 0 ? Math.min(len, max - pos) : len;",
      "info" : "VariableDeclarationStatement[37916-37979]:VariableDeclarationStatement[37938-38001]"
    }, {
      "left" : "final int bytesRead = in.read(b, off, (int) maxRead);",
      "right" : "final int bytesRead = in.read(b, off, (int) maxRead);",
      "info" : "VariableDeclarationStatement[37992-38045]:VariableDeclarationStatement[38014-38067]"
    }, {
      "left" : "if (bytesRead == -1)",
      "right" : "if (bytesRead == -1)",
      "info" : "IfStatement[38059-38122]:IfStatement[38081-38144]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38080-38122]:Block[38102-38144]"
    }, {
      "left" : "return -1;",
      "right" : "return -1;",
      "info" : "ReturnStatement[38098-38108]:ReturnStatement[38120-38130]"
    }, {
      "left" : "pos += bytesRead;",
      "right" : "pos += bytesRead;",
      "info" : "ExpressionStatement[38136-38153]:ExpressionStatement[38158-38175]"
    }, {
      "left" : "count(bytesRead);",
      "right" : "count(bytesRead);",
      "info" : "ExpressionStatement[38166-38183]:ExpressionStatement[38188-38205]"
    }, {
      "left" : "current.bytesReadFromStream += bytesRead;",
      "right" : "current.bytesReadFromStream += bytesRead;",
      "info" : "ExpressionStatement[38196-38237]:ExpressionStatement[38218-38259]"
    }, {
      "left" : "return bytesRead;",
      "right" : "return bytesRead;",
      "info" : "ReturnStatement[38250-38267]:ReturnStatement[38272-38289]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38355-38558]:Block[38377-38580]"
    }, {
      "left" : "final long toSkip = max >= 0 ? Math.min(n, max - pos) : n;",
      "right" : "final long toSkip = max >= 0 ? Math.min(n, max - pos) : n;",
      "info" : "VariableDeclarationStatement[38369-38427]:VariableDeclarationStatement[38391-38449]"
    }, {
      "left" : "final long skippedBytes = in.skip(toSkip);",
      "right" : "final long skippedBytes = in.skip(toSkip);",
      "info" : "VariableDeclarationStatement[38440-38482]:VariableDeclarationStatement[38462-38504]"
    }, {
      "left" : "pos += skippedBytes;",
      "right" : "pos += skippedBytes;",
      "info" : "ExpressionStatement[38495-38515]:ExpressionStatement[38517-38537]"
    }, {
      "left" : "return skippedBytes;",
      "right" : "return skippedBytes;",
      "info" : "ReturnStatement[38528-38548]:ReturnStatement[38550-38570]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38632-38760]:Block[38654-38782]"
    }, {
      "left" : "if (max >= 0 && pos >= max)",
      "right" : "if (max >= 0 && pos >= max)",
      "info" : "IfStatement[38646-38715]:IfStatement[38668-38737]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38674-38715]:Block[38696-38737]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[38692-38701]:ReturnStatement[38714-38723]"
    }, {
      "left" : "return in.available();",
      "right" : "return in.available();",
      "info" : "ReturnStatement[38728-38750]:ReturnStatement[38750-38772]"
    } ]
  },
  "interFileMappings" : { }
}