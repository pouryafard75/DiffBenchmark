{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "SmtpTransport",
      "right" : "SmtpTransport",
      "info" : "TypeDeclaration[1042-31138]:TypeDeclaration[1042-30792]"
    }, {
      "left" : "private TrustedSocketFactory mTrustedSocketFactory;",
      "right" : "private TrustedSocketFactory mTrustedSocketFactory;",
      "info" : "FieldDeclaration[1093-1144]:FieldDeclaration[1093-1144]"
    }, {
      "left" : "public static ServerSettings decodeUri(String uri)",
      "right" : "public static ServerSettings decodeUri(String uri)",
      "info" : "MethodDeclaration[1150-4441]:MethodDeclaration[1150-4441]"
    }, {
      "left" : "public static String createUri(ServerSettings server)",
      "right" : "public static String createUri(ServerSettings server)",
      "info" : "MethodDeclaration[4447-6461]:MethodDeclaration[4447-6461]"
    }, {
      "left" : "private String mHost;",
      "right" : "private String mHost;",
      "info" : "FieldDeclaration[6468-6489]:FieldDeclaration[6468-6489]"
    }, {
      "left" : "private int mPort;",
      "right" : "private int mPort;",
      "info" : "FieldDeclaration[6494-6512]:FieldDeclaration[6494-6512]"
    }, {
      "left" : "private String mUsername;",
      "right" : "private String mUsername;",
      "info" : "FieldDeclaration[6517-6542]:FieldDeclaration[6517-6542]"
    }, {
      "left" : "private String mPassword;",
      "right" : "private String mPassword;",
      "info" : "FieldDeclaration[6547-6572]:FieldDeclaration[6547-6572]"
    }, {
      "left" : "private String mClientCertificateAlias;",
      "right" : "private String mClientCertificateAlias;",
      "info" : "FieldDeclaration[6577-6616]:FieldDeclaration[6577-6616]"
    }, {
      "left" : "private AuthType mAuthType;",
      "right" : "private AuthType mAuthType;",
      "info" : "FieldDeclaration[6621-6648]:FieldDeclaration[6621-6648]"
    }, {
      "left" : "private ConnectionSecurity mConnectionSecurity;",
      "right" : "private ConnectionSecurity mConnectionSecurity;",
      "info" : "FieldDeclaration[6653-6700]:FieldDeclaration[6653-6700]"
    }, {
      "left" : "private Socket mSocket;",
      "right" : "private Socket mSocket;",
      "info" : "FieldDeclaration[6705-6728]:FieldDeclaration[6705-6728]"
    }, {
      "left" : "private PeekableInputStream mIn;",
      "right" : "private PeekableInputStream mIn;",
      "info" : "FieldDeclaration[6733-6765]:FieldDeclaration[6733-6765]"
    }, {
      "left" : "private OutputStream mOut;",
      "right" : "private OutputStream mOut;",
      "info" : "FieldDeclaration[6770-6796]:FieldDeclaration[6770-6796]"
    }, {
      "left" : "private boolean m8bitEncodingAllowed;",
      "right" : "private boolean m8bitEncodingAllowed;",
      "info" : "FieldDeclaration[6801-6838]:FieldDeclaration[6801-6838]"
    }, {
      "left" : "private int mLargestAcceptableMessage;",
      "right" : "private int mLargestAcceptableMessage;",
      "info" : "FieldDeclaration[6843-6881]:FieldDeclaration[6843-6881]"
    }, {
      "left" : "public SmtpTransport(StoreConfig storeConfig, TrustedSocketFactory trustedSocketFactory)\n            throws MessagingException",
      "right" : "public SmtpTransport(StoreConfig storeConfig, TrustedSocketFactory trustedSocketFactory)\n            throws MessagingException",
      "info" : "MethodDeclaration[6887-7645]:MethodDeclaration[6887-7645]"
    }, {
      "left" : "public void open() throws MessagingException",
      "right" : "public void open() throws MessagingException",
      "info" : "MethodDeclaration[7651-17467]:MethodDeclaration[7651-17467]"
    }, {
      "left" : "private Map<String,String> sendHello(String host) throws IOException, MessagingException",
      "right" : "private Map<String,String> sendHello(String host) throws IOException, MessagingException",
      "info" : "MethodDeclaration[17473-19305]:MethodDeclaration[17473-19305]"
    }, {
      "left" : "public void sendMessage(Message message) throws MessagingException",
      "right" : "public void sendMessage(Message message) throws MessagingException",
      "info" : "MethodDeclaration[19311-20793]:MethodDeclaration[19311-20793]"
    }, {
      "left" : "private void sendMessageTo(List<String> addresses, Message message)\n    throws MessagingException",
      "right" : "private void sendMessageTo(List<String> addresses, Message message)\n    throws MessagingException",
      "info" : "MethodDeclaration[20799-23159]:MethodDeclaration[20799-22643]"
    }, {
      "left" : "public void close()",
      "right" : "public void close()",
      "info" : "MethodDeclaration[23165-23621]:MethodDeclaration[22649-23105]"
    }, {
      "left" : "private String readLine() throws IOException",
      "right" : "private String readLine() throws IOException",
      "info" : "MethodDeclaration[23627-24154]:MethodDeclaration[23111-23638]"
    }, {
      "left" : "private void writeLine(String s, boolean sensitive) throws IOException",
      "right" : "private void writeLine(String s, boolean sensitive) throws IOException",
      "info" : "MethodDeclaration[24160-24966]:MethodDeclaration[23644-24450]"
    }, {
      "left" : "private void checkLine(String line) throws MessagingException",
      "right" : "private void checkLine(String line) throws MessagingException",
      "info" : "MethodDeclaration[24972-25773]:MethodDeclaration[24456-25257]"
    }, {
      "left" : "private List<String> executeSimpleCommand(String command) throws IOException, MessagingException",
      "right" : "private List<String> executeSimpleCommand(String command) throws IOException, MessagingException",
      "info" : "MethodDeclaration[25779-25936]:MethodDeclaration[25263-25420]"
    }, {
      "left" : "private List<String> executeSimpleCommand(String command, boolean sensitive)\n    throws IOException, MessagingException",
      "right" : "private List<String> executeSimpleCommand(String command, boolean sensitive)\n    throws IOException, MessagingException",
      "info" : "MethodDeclaration[25942-27454]:MethodDeclaration[25426-26938]"
    }, {
      "left" : "private void saslAuthLogin(String username, String password) throws MessagingException,\n        AuthenticationFailedException, IOException",
      "right" : "private void saslAuthLogin(String username, String password) throws MessagingException,\n        AuthenticationFailedException, IOException",
      "info" : "MethodDeclaration[27880-28593]:MethodDeclaration[27364-28077]"
    }, {
      "left" : "private void saslAuthPlain(String username, String password) throws MessagingException,\n        AuthenticationFailedException, IOException",
      "right" : "private void saslAuthPlain(String username, String password) throws MessagingException,\n        AuthenticationFailedException, IOException",
      "info" : "MethodDeclaration[28599-29272]:MethodDeclaration[28083-28756]"
    }, {
      "left" : "private void saslAuthCramMD5(String username, String password) throws MessagingException,\n        AuthenticationFailedException, IOException",
      "right" : "private void saslAuthCramMD5(String username, String password) throws MessagingException,\n        AuthenticationFailedException, IOException",
      "info" : "MethodDeclaration[29278-30158]:MethodDeclaration[28762-29642]"
    }, {
      "left" : "private void saslAuthExternal(String username) throws MessagingException, IOException",
      "right" : "private void saslAuthExternal(String username) throws MessagingException, IOException",
      "info" : "MethodDeclaration[30164-30395]:MethodDeclaration[29648-29879]"
    }, {
      "left" : "NegativeSmtpReplyException",
      "right" : "NegativeSmtpReplyException",
      "info" : "TypeDeclaration[30401-31136]:TypeDeclaration[29885-30790]"
    }, {
      "left" : "private static final long serialVersionUID = 8696043577357897135L;",
      "right" : "private static final long serialVersionUID = 8696043577357897135L;",
      "info" : "FieldDeclaration[30591-30657]:FieldDeclaration[30075-30141]"
    }, {
      "left" : "private final int mReplyCode;",
      "right" : "private final int mReplyCode;",
      "info" : "FieldDeclaration[30667-30696]:FieldDeclaration[30151-30180]"
    }, {
      "left" : "private final String mReplyText;",
      "right" : "private final String mReplyText;",
      "info" : "FieldDeclaration[30705-30737]:FieldDeclaration[30189-30221]"
    }, {
      "left" : "public NegativeSmtpReplyException(int replyCode, String replyText)",
      "right" : "public NegativeSmtpReplyException(int replyCode, String replyText)",
      "info" : "MethodDeclaration[30747-30971]:MethodDeclaration[30231-30488]"
    }, {
      "left" : "public int getReplyCode()",
      "right" : "public int getReplyCode()",
      "info" : "MethodDeclaration[30981-31049]:MethodDeclaration[30635-30703]"
    }, {
      "left" : "public String getReplyText()",
      "right" : "public String getReplyText()",
      "info" : "MethodDeclaration[31059-31130]:MethodDeclaration[30713-30784]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1042-1048]:Modifier[1042-1048]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[1049-1054]:TYPE_DECLARATION_KIND[1049-1054]"
    }, {
      "left" : "SmtpTransport",
      "right" : "SmtpTransport",
      "info" : "SimpleName[1055-1068]:SimpleName[1055-1068]"
    }, {
      "left" : "Transport",
      "right" : "Transport",
      "info" : "SimpleType[1077-1086]:SimpleType[1077-1086]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1605-1611]:Modifier[1605-1611]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[1612-1618]:Modifier[1612-1618]"
    }, {
      "left" : "ServerSettings",
      "right" : "ServerSettings",
      "info" : "SimpleType[1619-1633]:SimpleType[1619-1633]"
    }, {
      "left" : "decodeUri",
      "right" : "decodeUri",
      "info" : "SimpleName[1634-1643]:SimpleName[1634-1643]"
    }, {
      "left" : "String uri",
      "right" : "String uri",
      "info" : "SingleVariableDeclaration[1644-1654]:SingleVariableDeclaration[1644-1654]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1656-4441]:Block[1656-4441]"
    }, {
      "left" : "String host;",
      "right" : "String host;",
      "info" : "VariableDeclarationStatement[1666-1678]:VariableDeclarationStatement[1666-1678]"
    }, {
      "left" : "int port;",
      "right" : "int port;",
      "info" : "VariableDeclarationStatement[1687-1696]:VariableDeclarationStatement[1687-1696]"
    }, {
      "left" : "ConnectionSecurity connectionSecurity;",
      "right" : "ConnectionSecurity connectionSecurity;",
      "info" : "VariableDeclarationStatement[1705-1743]:VariableDeclarationStatement[1705-1743]"
    }, {
      "left" : "AuthType authType = null;",
      "right" : "AuthType authType = null;",
      "info" : "VariableDeclarationStatement[1752-1777]:VariableDeclarationStatement[1752-1777]"
    }, {
      "left" : "String username = null;",
      "right" : "String username = null;",
      "info" : "VariableDeclarationStatement[1786-1809]:VariableDeclarationStatement[1786-1809]"
    }, {
      "left" : "String password = null;",
      "right" : "String password = null;",
      "info" : "VariableDeclarationStatement[1818-1841]:VariableDeclarationStatement[1818-1841]"
    }, {
      "left" : "String clientCertificateAlias = null;",
      "right" : "String clientCertificateAlias = null;",
      "info" : "VariableDeclarationStatement[1850-1887]:VariableDeclarationStatement[1850-1887]"
    }, {
      "left" : "URI smtpUri;",
      "right" : "URI smtpUri;",
      "info" : "VariableDeclarationStatement[1897-1909]:VariableDeclarationStatement[1897-1909]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[1918-2094]:TryStatement[1918-2094]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1922-1969]:Block[1922-1969]"
    }, {
      "left" : "smtpUri = new URI(uri);",
      "right" : "smtpUri = new URI(uri);",
      "info" : "ExpressionStatement[1936-1959]:ExpressionStatement[1936-1959]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2001-2094]:Block[2001-2094]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Invalid SmtpTransport URI\", use);",
      "right" : "throw new IllegalArgumentException(\"Invalid SmtpTransport URI\", use);",
      "info" : "ThrowStatement[2015-2084]:ThrowStatement[2015-2084]"
    }, {
      "left" : "String scheme = smtpUri.getScheme();",
      "right" : "String scheme = smtpUri.getScheme();",
      "info" : "VariableDeclarationStatement[2104-2140]:VariableDeclarationStatement[2104-2140]"
    }, {
      "left" : "if (scheme.equals(\"smtp\"))",
      "right" : "if (scheme.equals(\"smtp\"))",
      "info" : "IfStatement[2555-3176]:IfStatement[2555-3176]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2582-2708]:Block[2582-2708]"
    }, {
      "left" : "connectionSecurity = ConnectionSecurity.NONE;",
      "right" : "connectionSecurity = ConnectionSecurity.NONE;",
      "info" : "ExpressionStatement[2596-2641]:ExpressionStatement[2596-2641]"
    }, {
      "left" : "port = ServerSettings.Type.SMTP.defaultPort;",
      "right" : "port = ServerSettings.Type.SMTP.defaultPort;",
      "info" : "ExpressionStatement[2654-2698]:ExpressionStatement[2654-2698]"
    }, {
      "left" : "if (scheme.startsWith(\"smtp+tls\"))",
      "right" : "if (scheme.startsWith(\"smtp+tls\"))",
      "info" : "IfStatement[2714-3176]:IfStatement[2714-3176]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2749-2888]:Block[2749-2888]"
    }, {
      "left" : "connectionSecurity = ConnectionSecurity.STARTTLS_REQUIRED;",
      "right" : "connectionSecurity = ConnectionSecurity.STARTTLS_REQUIRED;",
      "info" : "ExpressionStatement[2763-2821]:ExpressionStatement[2763-2821]"
    }, {
      "left" : "port = ServerSettings.Type.SMTP.defaultPort;",
      "right" : "port = ServerSettings.Type.SMTP.defaultPort;",
      "info" : "ExpressionStatement[2834-2878]:ExpressionStatement[2834-2878]"
    }, {
      "left" : "if (scheme.startsWith(\"smtp+ssl\"))",
      "right" : "if (scheme.startsWith(\"smtp+ssl\"))",
      "info" : "IfStatement[2894-3176]:IfStatement[2894-3176]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2929-3070]:Block[2929-3070]"
    }, {
      "left" : "connectionSecurity = ConnectionSecurity.SSL_TLS_REQUIRED;",
      "right" : "connectionSecurity = ConnectionSecurity.SSL_TLS_REQUIRED;",
      "info" : "ExpressionStatement[2943-3000]:ExpressionStatement[2943-3000]"
    }, {
      "left" : "port = ServerSettings.Type.SMTP.defaultTlsPort;",
      "right" : "port = ServerSettings.Type.SMTP.defaultTlsPort;",
      "info" : "ExpressionStatement[3013-3060]:ExpressionStatement[3013-3060]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3076-3176]:Block[3076-3176]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Unsupported protocol (\" + scheme + \")\");",
      "right" : "throw new IllegalArgumentException(\"Unsupported protocol (\" + scheme + \")\");",
      "info" : "ThrowStatement[3090-3166]:ThrowStatement[3090-3166]"
    }, {
      "left" : "host = smtpUri.getHost();",
      "right" : "host = smtpUri.getHost();",
      "info" : "ExpressionStatement[3186-3211]:ExpressionStatement[3186-3211]"
    }, {
      "left" : "if (smtpUri.getPort() != -1)",
      "right" : "if (smtpUri.getPort() != -1)",
      "info" : "IfStatement[3221-3299]:IfStatement[3221-3299]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3250-3299]:Block[3250-3299]"
    }, {
      "left" : "port = smtpUri.getPort();",
      "right" : "port = smtpUri.getPort();",
      "info" : "ExpressionStatement[3264-3289]:ExpressionStatement[3264-3289]"
    }, {
      "left" : "if (smtpUri.getUserInfo() != null)",
      "right" : "if (smtpUri.getUserInfo() != null)",
      "info" : "IfStatement[3309-4271]:IfStatement[3309-4271]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3344-4271]:Block[3344-4271]"
    }, {
      "left" : "String[] userInfoParts = smtpUri.getUserInfo().split(\":\");",
      "right" : "String[] userInfoParts = smtpUri.getUserInfo().split(\":\");",
      "info" : "VariableDeclarationStatement[3358-3416]:VariableDeclarationStatement[3358-3416]"
    }, {
      "left" : "if (userInfoParts.length == 1)",
      "right" : "if (userInfoParts.length == 1)",
      "info" : "IfStatement[3429-4261]:IfStatement[3429-4261]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3460-3575]:Block[3460-3575]"
    }, {
      "left" : "authType = AuthType.PLAIN;",
      "right" : "authType = AuthType.PLAIN;",
      "info" : "ExpressionStatement[3478-3504]:ExpressionStatement[3478-3504]"
    }, {
      "left" : "username = decodeUtf8(userInfoParts[0]);",
      "right" : "username = decodeUtf8(userInfoParts[0]);",
      "info" : "ExpressionStatement[3521-3561]:ExpressionStatement[3521-3561]"
    }, {
      "left" : "if (userInfoParts.length == 2)",
      "right" : "if (userInfoParts.length == 2)",
      "info" : "IfStatement[3581-4261]:IfStatement[3581-4261]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3612-3784]:Block[3612-3784]"
    }, {
      "left" : "authType = AuthType.PLAIN;",
      "right" : "authType = AuthType.PLAIN;",
      "info" : "ExpressionStatement[3630-3656]:ExpressionStatement[3630-3656]"
    }, {
      "left" : "username = decodeUtf8(userInfoParts[0]);",
      "right" : "username = decodeUtf8(userInfoParts[0]);",
      "info" : "ExpressionStatement[3673-3713]:ExpressionStatement[3673-3713]"
    }, {
      "left" : "password = decodeUtf8(userInfoParts[1]);",
      "right" : "password = decodeUtf8(userInfoParts[1]);",
      "info" : "ExpressionStatement[3730-3770]:ExpressionStatement[3730-3770]"
    }, {
      "left" : "if (userInfoParts.length == 3)",
      "right" : "if (userInfoParts.length == 3)",
      "info" : "IfStatement[3790-4261]:IfStatement[3790-4261]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3821-4261]:Block[3821-4261]"
    }, {
      "left" : "authType = AuthType.valueOf(userInfoParts[2]);",
      "right" : "authType = AuthType.valueOf(userInfoParts[2]);",
      "info" : "ExpressionStatement[3912-3958]:ExpressionStatement[3912-3958]"
    }, {
      "left" : "username = decodeUtf8(userInfoParts[0]);",
      "right" : "username = decodeUtf8(userInfoParts[0]);",
      "info" : "ExpressionStatement[3975-4015]:ExpressionStatement[3975-4015]"
    }, {
      "left" : "if (authType == AuthType.EXTERNAL)",
      "right" : "if (authType == AuthType.EXTERNAL)",
      "info" : "IfStatement[4032-4247]:IfStatement[4032-4247]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4067-4161]:Block[4067-4161]"
    }, {
      "left" : "clientCertificateAlias = decodeUtf8(userInfoParts[1]);",
      "right" : "clientCertificateAlias = decodeUtf8(userInfoParts[1]);",
      "info" : "ExpressionStatement[4089-4143]:ExpressionStatement[4089-4143]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4167-4247]:Block[4167-4247]"
    }, {
      "left" : "password = decodeUtf8(userInfoParts[1]);",
      "right" : "password = decodeUtf8(userInfoParts[1]);",
      "info" : "ExpressionStatement[4189-4229]:ExpressionStatement[4189-4229]"
    }, {
      "left" : "return new ServerSettings(ServerSettings.Type.SMTP, host, port, connectionSecurity,\n                authType, username, password, clientCertificateAlias);",
      "right" : "return new ServerSettings(ServerSettings.Type.SMTP, host, port, connectionSecurity,\n                authType, username, password, clientCertificateAlias);",
      "info" : "ReturnStatement[4281-4435]:ReturnStatement[4281-4435]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4858-4864]:Modifier[4858-4864]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[4865-4871]:Modifier[4865-4871]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[4872-4878]:SimpleType[4872-4878]"
    }, {
      "left" : "createUri",
      "right" : "createUri",
      "info" : "SimpleName[4879-4888]:SimpleName[4879-4888]"
    }, {
      "left" : "ServerSettings server",
      "right" : "ServerSettings server",
      "info" : "SingleVariableDeclaration[4889-4910]:SingleVariableDeclaration[4889-4910]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4912-6461]:Block[4912-6461]"
    }, {
      "left" : "String userEnc = (server.username != null) ?\n                encodeUtf8(server.username) : \"\";",
      "right" : "String userEnc = (server.username != null) ?\n                encodeUtf8(server.username) : \"\";",
      "info" : "VariableDeclarationStatement[4922-5016]:VariableDeclarationStatement[4922-5016]"
    }, {
      "left" : "String passwordEnc = (server.password != null) ?\n                encodeUtf8(server.password) : \"\";",
      "right" : "String passwordEnc = (server.password != null) ?\n                encodeUtf8(server.password) : \"\";",
      "info" : "VariableDeclarationStatement[5025-5123]:VariableDeclarationStatement[5025-5123]"
    }, {
      "left" : "String clientCertificateAliasEnc = (server.clientCertificateAlias != null) ?\n                encodeUtf8(server.clientCertificateAlias) : \"\";",
      "right" : "String clientCertificateAliasEnc = (server.clientCertificateAlias != null) ?\n                encodeUtf8(server.clientCertificateAlias) : \"\";",
      "info" : "VariableDeclarationStatement[5132-5272]:VariableDeclarationStatement[5132-5272]"
    }, {
      "left" : "String scheme;",
      "right" : "String scheme;",
      "info" : "VariableDeclarationStatement[5282-5296]:VariableDeclarationStatement[5282-5296]"
    }, {
      "left" : "switch (server.connectionSecurity) {\n            case SSL_TLS_REQUIRED:\n                scheme = \"smtp+ssl+\";\n                break;\n            case STARTTLS_REQUIRED:\n                scheme = \"smtp+tls+\";\n                break;\n            default:\n            case NONE:\n                scheme = \"smtp\";\n                break;\n        }",
      "right" : "switch (server.connectionSecurity) {\n            case SSL_TLS_REQUIRED:\n                scheme = \"smtp+ssl+\";\n                break;\n            case STARTTLS_REQUIRED:\n                scheme = \"smtp+tls+\";\n                break;\n            default:\n            case NONE:\n                scheme = \"smtp\";\n                break;\n        }",
      "info" : "SwitchStatement[5305-5644]:SwitchStatement[5305-5644]"
    }, {
      "left" : "case SSL_TLS_REQUIRED:",
      "right" : "case SSL_TLS_REQUIRED:",
      "info" : "SwitchCase[5354-5376]:SwitchCase[5354-5376]"
    }, {
      "left" : "scheme = \"smtp+ssl+\";",
      "right" : "scheme = \"smtp+ssl+\";",
      "info" : "ExpressionStatement[5393-5414]:ExpressionStatement[5393-5414]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[5431-5437]:BreakStatement[5431-5437]"
    }, {
      "left" : "case STARTTLS_REQUIRED:",
      "right" : "case STARTTLS_REQUIRED:",
      "info" : "SwitchCase[5450-5473]:SwitchCase[5450-5473]"
    }, {
      "left" : "scheme = \"smtp+tls+\";",
      "right" : "scheme = \"smtp+tls+\";",
      "info" : "ExpressionStatement[5490-5511]:ExpressionStatement[5490-5511]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[5528-5534]:BreakStatement[5528-5534]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[5547-5555]:SwitchCase[5547-5555]"
    }, {
      "left" : "case NONE:",
      "right" : "case NONE:",
      "info" : "SwitchCase[5568-5578]:SwitchCase[5568-5578]"
    }, {
      "left" : "scheme = \"smtp\";",
      "right" : "scheme = \"smtp\";",
      "info" : "ExpressionStatement[5595-5611]:ExpressionStatement[5595-5611]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[5628-5634]:BreakStatement[5628-5634]"
    }, {
      "left" : "String userInfo;",
      "right" : "String userInfo;",
      "info" : "VariableDeclarationStatement[5654-5670]:VariableDeclarationStatement[5654-5670]"
    }, {
      "left" : "AuthType authType = server.authenticationType;",
      "right" : "AuthType authType = server.authenticationType;",
      "info" : "VariableDeclarationStatement[5679-5725]:VariableDeclarationStatement[5679-5725]"
    }, {
      "left" : "if (authType != null)",
      "right" : "if (authType != null)",
      "info" : "IfStatement[5824-6184]:IfStatement[5824-6184]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5846-6115]:Block[5846-6115]"
    }, {
      "left" : "if (AuthType.EXTERNAL == authType)",
      "right" : "if (AuthType.EXTERNAL == authType)",
      "info" : "IfStatement[5860-6105]:IfStatement[5860-6105]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5895-6004]:Block[5895-6004]"
    }, {
      "left" : "userInfo = userEnc + \":\" + clientCertificateAliasEnc + \":\" + authType.name();",
      "right" : "userInfo = userEnc + \":\" + clientCertificateAliasEnc + \":\" + authType.name();",
      "info" : "ExpressionStatement[5913-5990]:ExpressionStatement[5913-5990]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6010-6105]:Block[6010-6105]"
    }, {
      "left" : "userInfo = userEnc + \":\" + passwordEnc + \":\" + authType.name();",
      "right" : "userInfo = userEnc + \":\" + passwordEnc + \":\" + authType.name();",
      "info" : "ExpressionStatement[6028-6091]:ExpressionStatement[6028-6091]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6121-6184]:Block[6121-6184]"
    }, {
      "left" : "userInfo = userEnc + \":\" + passwordEnc;",
      "right" : "userInfo = userEnc + \":\" + passwordEnc;",
      "info" : "ExpressionStatement[6135-6174]:ExpressionStatement[6135-6174]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[6193-6455]:TryStatement[6193-6455]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6197-6329]:Block[6197-6329]"
    }, {
      "left" : "return new URI(scheme, userInfo, server.host, server.port, null, null,\n                    null).toString();",
      "right" : "return new URI(scheme, userInfo, server.host, server.port, null, null,\n                    null).toString();",
      "info" : "ReturnStatement[6211-6319]:ReturnStatement[6211-6319]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6359-6455]:Block[6359-6455]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Can't create SmtpTransport URI\", e);",
      "right" : "throw new IllegalArgumentException(\"Can't create SmtpTransport URI\", e);",
      "info" : "ThrowStatement[6373-6445]:ThrowStatement[6373-6445]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6887-6893]:Modifier[6887-6893]"
    }, {
      "left" : "SmtpTransport",
      "right" : "SmtpTransport",
      "info" : "SimpleName[6894-6907]:SimpleName[6894-6907]"
    }, {
      "left" : "StoreConfig storeConfig",
      "right" : "StoreConfig storeConfig",
      "info" : "SingleVariableDeclaration[6908-6931]:SingleVariableDeclaration[6908-6931]"
    }, {
      "left" : "TrustedSocketFactory trustedSocketFactory",
      "right" : "TrustedSocketFactory trustedSocketFactory",
      "info" : "SingleVariableDeclaration[6933-6974]:SingleVariableDeclaration[6933-6974]"
    }, {
      "left" : "MessagingException",
      "right" : "MessagingException",
      "info" : "SimpleType[6995-7013]:SimpleType[6995-7013]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7014-7645]:Block[7014-7645]"
    }, {
      "left" : "ServerSettings settings;",
      "right" : "ServerSettings settings;",
      "info" : "VariableDeclarationStatement[7024-7048]:VariableDeclarationStatement[7024-7048]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[7057-7267]:TryStatement[7057-7267]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7061-7137]:Block[7061-7137]"
    }, {
      "left" : "settings = decodeUri(storeConfig.getTransportUri());",
      "right" : "settings = decodeUri(storeConfig.getTransportUri());",
      "info" : "ExpressionStatement[7075-7127]:ExpressionStatement[7075-7127]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7173-7267]:Block[7173-7267]"
    }, {
      "left" : "throw new MessagingException(\"Error while decoding transport URI\", e);",
      "right" : "throw new MessagingException(\"Error while decoding transport URI\", e);",
      "info" : "ThrowStatement[7187-7257]:ThrowStatement[7187-7257]"
    }, {
      "left" : "mHost = settings.host;",
      "right" : "mHost = settings.host;",
      "info" : "ExpressionStatement[7277-7299]:ExpressionStatement[7277-7299]"
    }, {
      "left" : "mPort = settings.port;",
      "right" : "mPort = settings.port;",
      "info" : "ExpressionStatement[7308-7330]:ExpressionStatement[7308-7330]"
    }, {
      "left" : "mConnectionSecurity = settings.connectionSecurity;",
      "right" : "mConnectionSecurity = settings.connectionSecurity;",
      "info" : "ExpressionStatement[7340-7390]:ExpressionStatement[7340-7390]"
    }, {
      "left" : "mAuthType = settings.authenticationType;",
      "right" : "mAuthType = settings.authenticationType;",
      "info" : "ExpressionStatement[7400-7440]:ExpressionStatement[7400-7440]"
    }, {
      "left" : "mUsername = settings.username;",
      "right" : "mUsername = settings.username;",
      "info" : "ExpressionStatement[7449-7479]:ExpressionStatement[7449-7479]"
    }, {
      "left" : "mPassword = settings.password;",
      "right" : "mPassword = settings.password;",
      "info" : "ExpressionStatement[7488-7518]:ExpressionStatement[7488-7518]"
    }, {
      "left" : "mClientCertificateAlias = settings.clientCertificateAlias;",
      "right" : "mClientCertificateAlias = settings.clientCertificateAlias;",
      "info" : "ExpressionStatement[7527-7585]:ExpressionStatement[7527-7585]"
    }, {
      "left" : "mTrustedSocketFactory = trustedSocketFactory;",
      "right" : "mTrustedSocketFactory = trustedSocketFactory;",
      "info" : "ExpressionStatement[7594-7639]:ExpressionStatement[7594-7639]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[7651-7660]:MarkerAnnotation[7651-7660]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7665-7671]:Modifier[7665-7671]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7672-7676]:PrimitiveType[7672-7676]"
    }, {
      "left" : "open",
      "right" : "open",
      "info" : "SimpleName[7677-7681]:SimpleName[7677-7681]"
    }, {
      "left" : "MessagingException",
      "right" : "MessagingException",
      "info" : "SimpleType[7691-7709]:SimpleType[7691-7709]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7710-17467]:Block[7710-17467]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[7720-17461]:TryStatement[7720-17461]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7724-17045]:Block[7724-17045]"
    }, {
      "left" : "boolean secureConnection = false;",
      "right" : "boolean secureConnection = false;",
      "info" : "VariableDeclarationStatement[7738-7771]:VariableDeclarationStatement[7738-7771]"
    }, {
      "left" : "InetAddress[] addresses = InetAddress.getAllByName(mHost);",
      "right" : "InetAddress[] addresses = InetAddress.getAllByName(mHost);",
      "info" : "VariableDeclarationStatement[7784-7842]:VariableDeclarationStatement[7784-7842]"
    }, {
      "left" : "for (int i = 0; i < addresses.length; i++)",
      "right" : "for (int i = 0; i < addresses.length; i++)",
      "info" : "ForStatement[7855-8916]:ForStatement[7855-8916]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7898-8916]:Block[7898-8916]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[7916-8857]:TryStatement[7916-8857]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7920-8542]:Block[7920-8542]"
    }, {
      "left" : "SocketAddress socketAddress = new InetSocketAddress(addresses[i], mPort);",
      "right" : "SocketAddress socketAddress = new InetSocketAddress(addresses[i], mPort);",
      "info" : "VariableDeclarationStatement[7942-8015]:VariableDeclarationStatement[7942-8015]"
    }, {
      "left" : "if (mConnectionSecurity == ConnectionSecurity.SSL_TLS_REQUIRED)",
      "right" : "if (mConnectionSecurity == ConnectionSecurity.SSL_TLS_REQUIRED)",
      "info" : "IfStatement[8036-8524]:IfStatement[8036-8524]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8100-8367]:Block[8100-8367]"
    }, {
      "left" : "mSocket = mTrustedSocketFactory.createSocket(null, mHost, mPort, mClientCertificateAlias);",
      "right" : "mSocket = mTrustedSocketFactory.createSocket(null, mHost, mPort, mClientCertificateAlias);",
      "info" : "ExpressionStatement[8126-8216]:ExpressionStatement[8126-8216]"
    }, {
      "left" : "mSocket.connect(socketAddress, SOCKET_CONNECT_TIMEOUT);",
      "right" : "mSocket.connect(socketAddress, SOCKET_CONNECT_TIMEOUT);",
      "info" : "ExpressionStatement[8241-8296]:ExpressionStatement[8241-8296]"
    }, {
      "left" : "secureConnection = true;",
      "right" : "secureConnection = true;",
      "info" : "ExpressionStatement[8321-8345]:ExpressionStatement[8321-8345]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8373-8524]:Block[8373-8524]"
    }, {
      "left" : "mSocket = new Socket();",
      "right" : "mSocket = new Socket();",
      "info" : "ExpressionStatement[8399-8422]:ExpressionStatement[8399-8422]"
    }, {
      "left" : "mSocket.connect(socketAddress, SOCKET_CONNECT_TIMEOUT);",
      "right" : "mSocket.connect(socketAddress, SOCKET_CONNECT_TIMEOUT);",
      "info" : "ExpressionStatement[8447-8502]:ExpressionStatement[8447-8502]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8569-8857]:Block[8569-8857]"
    }, {
      "left" : "if (i < (addresses.length - 1))",
      "right" : "if (i < (addresses.length - 1))",
      "info" : "IfStatement[8591-8760]:IfStatement[8591-8760]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8623-8760]:Block[8623-8760]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[8729-8738]:ContinueStatement[8729-8738]"
    }, {
      "left" : "throw new MessagingException(\"Cannot connect to host\", e);",
      "right" : "throw new MessagingException(\"Cannot connect to host\", e);",
      "info" : "ThrowStatement[8781-8839]:ThrowStatement[8781-8839]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[8874-8880]:BreakStatement[8874-8880]"
    }, {
      "left" : "mSocket.setSoTimeout(SOCKET_READ_TIMEOUT);",
      "right" : "mSocket.setSoTimeout(SOCKET_READ_TIMEOUT);",
      "info" : "ExpressionStatement[8954-8996]:ExpressionStatement[8954-8996]"
    }, {
      "left" : "mIn = new PeekableInputStream(new BufferedInputStream(mSocket.getInputStream(), 1024));",
      "right" : "mIn = new PeekableInputStream(new BufferedInputStream(mSocket.getInputStream(), 1024));",
      "info" : "ExpressionStatement[9010-9097]:ExpressionStatement[9010-9097]"
    }, {
      "left" : "mOut = new BufferedOutputStream(mSocket.getOutputStream(), 1024);",
      "right" : "mOut = new BufferedOutputStream(mSocket.getOutputStream(), 1024);",
      "info" : "ExpressionStatement[9110-9175]:ExpressionStatement[9110-9175]"
    }, {
      "left" : "executeSimpleCommand(null);",
      "right" : "executeSimpleCommand(null);",
      "info" : "ExpressionStatement[9219-9246]:ExpressionStatement[9219-9246]"
    }, {
      "left" : "InetAddress localAddress = mSocket.getLocalAddress();",
      "right" : "InetAddress localAddress = mSocket.getLocalAddress();",
      "info" : "VariableDeclarationStatement[9260-9313]:VariableDeclarationStatement[9260-9313]"
    }, {
      "left" : "String localHost = localAddress.getCanonicalHostName();",
      "right" : "String localHost = localAddress.getCanonicalHostName();",
      "info" : "VariableDeclarationStatement[9326-9381]:VariableDeclarationStatement[9326-9381]"
    }, {
      "left" : "String ipAddr = localAddress.getHostAddress();",
      "right" : "String ipAddr = localAddress.getHostAddress();",
      "info" : "VariableDeclarationStatement[9394-9440]:VariableDeclarationStatement[9394-9440]"
    }, {
      "left" : "if (localHost.equals(\"\") || localHost.equals(ipAddr) || localHost.contains(\"_\"))",
      "right" : "if (localHost.equals(\"\") || localHost.equals(ipAddr) || localHost.contains(\"_\"))",
      "info" : "IfStatement[9454-10140]:IfStatement[9454-10140]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9535-10140]:Block[9535-10140]"
    }, {
      "left" : "if (!ipAddr.equals(\"\"))",
      "right" : "if (!ipAddr.equals(\"\"))",
      "info" : "IfStatement[9693-10126]:IfStatement[9693-10126]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9717-9968]:Block[9717-9968]"
    }, {
      "left" : "if (localAddress instanceof Inet6Address)",
      "right" : "if (localAddress instanceof Inet6Address)",
      "info" : "IfStatement[9739-9950]:IfStatement[9739-9950]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9781-9865]:Block[9781-9865]"
    }, {
      "left" : "localHost = \"[IPv6:\" + ipAddr + \"]\";",
      "right" : "localHost = \"[IPv6:\" + ipAddr + \"]\";",
      "info" : "ExpressionStatement[9807-9843]:ExpressionStatement[9807-9843]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9871-9950]:Block[9871-9950]"
    }, {
      "left" : "localHost = \"[\" + ipAddr + \"]\";",
      "right" : "localHost = \"[\" + ipAddr + \"]\";",
      "info" : "ExpressionStatement[9897-9928]:ExpressionStatement[9897-9928]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9974-10126]:Block[9974-10126]"
    }, {
      "left" : "localHost = \"android\";",
      "right" : "localHost = \"android\";",
      "info" : "ExpressionStatement[10086-10108]:ExpressionStatement[10086-10108]"
    }, {
      "left" : "Map<String,String> extensions = sendHello(localHost);",
      "right" : "Map<String,String> extensions = sendHello(localHost);",
      "info" : "VariableDeclarationStatement[10154-10207]:VariableDeclarationStatement[10154-10207]"
    }, {
      "left" : "m8bitEncodingAllowed = extensions.containsKey(\"8BITMIME\");",
      "right" : "m8bitEncodingAllowed = extensions.containsKey(\"8BITMIME\");",
      "info" : "ExpressionStatement[10221-10279]:ExpressionStatement[10221-10279]"
    }, {
      "left" : "if (mConnectionSecurity == ConnectionSecurity.STARTTLS_REQUIRED)",
      "right" : "if (mConnectionSecurity == ConnectionSecurity.STARTTLS_REQUIRED)",
      "info" : "IfStatement[10294-11800]:IfStatement[10294-11800]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10359-11800]:Block[10359-11800]"
    }, {
      "left" : "if (extensions.containsKey(\"STARTTLS\"))",
      "right" : "if (extensions.containsKey(\"STARTTLS\"))",
      "info" : "IfStatement[10377-11786]:IfStatement[10377-11786]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10417-11236]:Block[10417-11236]"
    }, {
      "left" : "executeSimpleCommand(\"STARTTLS\");",
      "right" : "executeSimpleCommand(\"STARTTLS\");",
      "info" : "ExpressionStatement[10439-10472]:ExpressionStatement[10439-10472]"
    }, {
      "left" : "mSocket = mTrustedSocketFactory.createSocket(\n                            mSocket,\n                            mHost,\n                            mPort,\n                            mClientCertificateAlias);",
      "right" : "mSocket = mTrustedSocketFactory.createSocket(\n                            mSocket,\n                            mHost,\n                            mPort,\n                            mClientCertificateAlias);",
      "info" : "ExpressionStatement[10494-10700]:ExpressionStatement[10494-10700]"
    }, {
      "left" : "mIn = new PeekableInputStream(new BufferedInputStream(mSocket.getInputStream(),\n                                                  1024));",
      "right" : "mIn = new PeekableInputStream(new BufferedInputStream(mSocket.getInputStream(),\n                                                  1024));",
      "info" : "ExpressionStatement[10722-10859]:ExpressionStatement[10722-10859]"
    }, {
      "left" : "mOut = new BufferedOutputStream(mSocket.getOutputStream(), 1024);",
      "right" : "mOut = new BufferedOutputStream(mSocket.getOutputStream(), 1024);",
      "info" : "ExpressionStatement[10880-10945]:ExpressionStatement[10880-10945]"
    }, {
      "left" : "extensions = sendHello(localHost);",
      "right" : "extensions = sendHello(localHost);",
      "info" : "ExpressionStatement[11139-11173]:ExpressionStatement[11139-11173]"
    }, {
      "left" : "secureConnection = true;",
      "right" : "secureConnection = true;",
      "info" : "ExpressionStatement[11194-11218]:ExpressionStatement[11194-11218]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11242-11786]:Block[11242-11786]"
    }, {
      "left" : "throw new CertificateValidationException(\n                            \"STARTTLS connection security not available\");",
      "right" : "throw new CertificateValidationException(\n                            \"STARTTLS connection security not available\");",
      "info" : "ThrowStatement[11652-11768]:ThrowStatement[11652-11768]"
    }, {
      "left" : "boolean authLoginSupported = false;",
      "right" : "boolean authLoginSupported = false;",
      "info" : "VariableDeclarationStatement[11814-11849]:VariableDeclarationStatement[11814-11849]"
    }, {
      "left" : "boolean authPlainSupported = false;",
      "right" : "boolean authPlainSupported = false;",
      "info" : "VariableDeclarationStatement[11862-11897]:VariableDeclarationStatement[11862-11897]"
    }, {
      "left" : "boolean authCramMD5Supported = false;",
      "right" : "boolean authCramMD5Supported = false;",
      "info" : "VariableDeclarationStatement[11910-11947]:VariableDeclarationStatement[11910-11947]"
    }, {
      "left" : "boolean authExternalSupported = false;",
      "right" : "boolean authExternalSupported = false;",
      "info" : "VariableDeclarationStatement[11960-11998]:VariableDeclarationStatement[11960-11998]"
    }, {
      "left" : "if (extensions.containsKey(\"AUTH\"))",
      "right" : "if (extensions.containsKey(\"AUTH\"))",
      "info" : "IfStatement[12011-12423]:IfStatement[12011-12423]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12047-12423]:Block[12047-12423]"
    }, {
      "left" : "List<String> saslMech = Arrays.asList(extensions.get(\"AUTH\").split(\" \"));",
      "right" : "List<String> saslMech = Arrays.asList(extensions.get(\"AUTH\").split(\" \"));",
      "info" : "VariableDeclarationStatement[12065-12138]:VariableDeclarationStatement[12065-12138]"
    }, {
      "left" : "authLoginSupported = saslMech.contains(\"LOGIN\");",
      "right" : "authLoginSupported = saslMech.contains(\"LOGIN\");",
      "info" : "ExpressionStatement[12155-12203]:ExpressionStatement[12155-12203]"
    }, {
      "left" : "authPlainSupported = saslMech.contains(\"PLAIN\");",
      "right" : "authPlainSupported = saslMech.contains(\"PLAIN\");",
      "info" : "ExpressionStatement[12220-12268]:ExpressionStatement[12220-12268]"
    }, {
      "left" : "authCramMD5Supported = saslMech.contains(\"CRAM-MD5\");",
      "right" : "authCramMD5Supported = saslMech.contains(\"CRAM-MD5\");",
      "info" : "ExpressionStatement[12285-12338]:ExpressionStatement[12285-12338]"
    }, {
      "left" : "authExternalSupported = saslMech.contains(\"EXTERNAL\");",
      "right" : "authExternalSupported = saslMech.contains(\"EXTERNAL\");",
      "info" : "ExpressionStatement[12355-12409]:ExpressionStatement[12355-12409]"
    }, {
      "left" : "if (extensions.containsKey(\"SIZE\"))",
      "right" : "if (extensions.containsKey(\"SIZE\"))",
      "info" : "IfStatement[12436-12856]:IfStatement[12436-12856]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12472-12856]:Block[12472-12856]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[12490-12842]:TryStatement[12490-12842]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12494-12603]:Block[12494-12603]"
    }, {
      "left" : "mLargestAcceptableMessage = Integer.parseInt(extensions.get(\"SIZE\"));",
      "right" : "mLargestAcceptableMessage = Integer.parseInt(extensions.get(\"SIZE\"));",
      "info" : "ExpressionStatement[12516-12585]:ExpressionStatement[12516-12585]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12624-12842]:Block[12624-12842]"
    }, {
      "left" : "if (K9MailLib.isDebug() && DEBUG_PROTOCOL_SMTP)",
      "right" : "if (K9MailLib.isDebug() && DEBUG_PROTOCOL_SMTP)",
      "info" : "IfStatement[12646-12824]:IfStatement[12646-12824]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12694-12824]:Block[12694-12824]"
    }, {
      "left" : "Log.d(LOG_TAG, \"Tried to parse \" + extensions.get(\"SIZE\") + \" and get an int\", e);",
      "right" : "Log.d(LOG_TAG, \"Tried to parse \" + extensions.get(\"SIZE\") + \" and get an int\", e);",
      "info" : "ExpressionStatement[12720-12802]:ExpressionStatement[12720-12802]"
    }, {
      "left" : "if (mUsername != null\n                    && mUsername.length() > 0\n                    && (mPassword != null && mPassword.length() > 0 || AuthType.EXTERNAL == mAuthType))",
      "right" : "if (mUsername != null\n                    && mUsername.length() > 0\n                    && (mPassword != null && mPassword.length() > 0 || AuthType.EXTERNAL == mAuthType))",
      "info" : "IfStatement[12870-17035]:IfStatement[12870-17035]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13042-17035]:Block[13042-17035]"
    }, {
      "left" : "switch (mAuthType) {\n\n                /*\n                 * LOGIN is an obsolete option which is unavailable to users,\n                 * but it still may exist in a user's settings from a previous\n                 * version, or it may have been imported.\n                 */\n                case LOGIN:\n                case PLAIN:\n                    // try saslAuthPlain first, because it supports UTF-8 explicitly\n                    if (authPlainSupported) {\n                        saslAuthPlain(mUsername, mPassword);\n                    } else if (authLoginSupported) {\n                        saslAuthLogin(mUsername, mPassword);\n                    } else {\n                        throw new MessagingException(\"Authentication methods SASL PLAIN and LOGIN are unavailable.\");\n                    }\n                    break;\n\n                case CRAM_MD5:\n                    if (authCramMD5Supported) {\n                        saslAuthCramMD5(mUsername, mPassword);\n                    } else {\n                        throw new MessagingException(\"Authentication method CRAM-MD5 is unavailable.\");\n                    }\n                    break;\n\n                case EXTERNAL:\n                    if (authExternalSupported) {\n                        saslAuthExternal(mUsername);\n                    } else {\n                        /*\n                         * Some SMTP servers are known to provide no error\n                         * indication when a client certificate fails to\n                         * validate, other than to not offer the AUTH EXTERNAL\n                         * capability.\n                         *\n                         * So, we treat it is an error to not offer AUTH\n                         * EXTERNAL when using client certificates. That way, the\n                         * user can be notified of a problem during account setup.\n                         */\n                        throw new CertificateValidationException(MissingCapability);\n                    }\n                    break;\n\n                /*\n                 * AUTOMATIC is an obsolete option which is unavailable to users,\n                 * but it still may exist in a user's settings from a previous\n                 * version, or it may have been imported.\n                 */\n                case AUTOMATIC:\n                    if (secureConnection) {\n                        // try saslAuthPlain first, because it supports UTF-8 explicitly\n                        if (authPlainSupported) {\n                            saslAuthPlain(mUsername, mPassword);\n                        } else if (authLoginSupported) {\n                            saslAuthLogin(mUsername, mPassword);\n                        } else if (authCramMD5Supported) {\n                            saslAuthCramMD5(mUsername, mPassword);\n                        } else {\n                            throw new MessagingException(\"No supported authentication methods available.\");\n                        }\n                    } else {\n                        if (authCramMD5Supported) {\n                            saslAuthCramMD5(mUsername, mPassword);\n                        } else {\n                            /*\n                             * We refuse to insecurely transmit the password\n                             * using the obsolete AUTOMATIC setting because of\n                             * the potential for a MITM attack. Affected users\n                             * must choose a different setting.\n                             */\n                            throw new MessagingException(\n                                    \"Update your outgoing server authentication setting. AUTOMATIC auth. is unavailable.\");\n                        }\n                    }\n                    break;\n\n                default:\n                    throw new MessagingException(\"Unhandled authentication method found in the server settings (bug).\");\n                }",
      "right" : "switch (mAuthType) {\n\n                /*\n                 * LOGIN is an obsolete option which is unavailable to users,\n                 * but it still may exist in a user's settings from a previous\n                 * version, or it may have been imported.\n                 */\n                case LOGIN:\n                case PLAIN:\n                    // try saslAuthPlain first, because it supports UTF-8 explicitly\n                    if (authPlainSupported) {\n                        saslAuthPlain(mUsername, mPassword);\n                    } else if (authLoginSupported) {\n                        saslAuthLogin(mUsername, mPassword);\n                    } else {\n                        throw new MessagingException(\"Authentication methods SASL PLAIN and LOGIN are unavailable.\");\n                    }\n                    break;\n\n                case CRAM_MD5:\n                    if (authCramMD5Supported) {\n                        saslAuthCramMD5(mUsername, mPassword);\n                    } else {\n                        throw new MessagingException(\"Authentication method CRAM-MD5 is unavailable.\");\n                    }\n                    break;\n\n                case EXTERNAL:\n                    if (authExternalSupported) {\n                        saslAuthExternal(mUsername);\n                    } else {\n                        /*\n                         * Some SMTP servers are known to provide no error\n                         * indication when a client certificate fails to\n                         * validate, other than to not offer the AUTH EXTERNAL\n                         * capability.\n                         *\n                         * So, we treat it is an error to not offer AUTH\n                         * EXTERNAL when using client certificates. That way, the\n                         * user can be notified of a problem during account setup.\n                         */\n                        throw new CertificateValidationException(MissingCapability);\n                    }\n                    break;\n\n                /*\n                 * AUTOMATIC is an obsolete option which is unavailable to users,\n                 * but it still may exist in a user's settings from a previous\n                 * version, or it may have been imported.\n                 */\n                case AUTOMATIC:\n                    if (secureConnection) {\n                        // try saslAuthPlain first, because it supports UTF-8 explicitly\n                        if (authPlainSupported) {\n                            saslAuthPlain(mUsername, mPassword);\n                        } else if (authLoginSupported) {\n                            saslAuthLogin(mUsername, mPassword);\n                        } else if (authCramMD5Supported) {\n                            saslAuthCramMD5(mUsername, mPassword);\n                        } else {\n                            throw new MessagingException(\"No supported authentication methods available.\");\n                        }\n                    } else {\n                        if (authCramMD5Supported) {\n                            saslAuthCramMD5(mUsername, mPassword);\n                        } else {\n                            /*\n                             * We refuse to insecurely transmit the password\n                             * using the obsolete AUTOMATIC setting because of\n                             * the potential for a MITM attack. Affected users\n                             * must choose a different setting.\n                             */\n                            throw new MessagingException(\n                                    \"Update your outgoing server authentication setting. AUTOMATIC auth. is unavailable.\");\n                        }\n                    }\n                    break;\n\n                default:\n                    throw new MessagingException(\"Unhandled authentication method found in the server settings (bug).\");\n                }",
      "info" : "SwitchStatement[13061-17021]:SwitchStatement[13061-17021]"
    }, {
      "left" : "case LOGIN:",
      "right" : "case LOGIN:",
      "info" : "SwitchCase[13353-13364]:SwitchCase[13353-13364]"
    }, {
      "left" : "case PLAIN:",
      "right" : "case PLAIN:",
      "info" : "SwitchCase[13381-13392]:SwitchCase[13381-13392]"
    }, {
      "left" : "if (authPlainSupported)",
      "right" : "if (authPlainSupported)",
      "info" : "IfStatement[13498-13867]:IfStatement[13498-13867]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13522-13606]:Block[13522-13606]"
    }, {
      "left" : "saslAuthPlain(mUsername, mPassword);",
      "right" : "saslAuthPlain(mUsername, mPassword);",
      "info" : "ExpressionStatement[13548-13584]:ExpressionStatement[13548-13584]"
    }, {
      "left" : "if (authLoginSupported)",
      "right" : "if (authLoginSupported)",
      "info" : "IfStatement[13612-13867]:IfStatement[13612-13867]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13636-13720]:Block[13636-13720]"
    }, {
      "left" : "saslAuthLogin(mUsername, mPassword);",
      "right" : "saslAuthLogin(mUsername, mPassword);",
      "info" : "ExpressionStatement[13662-13698]:ExpressionStatement[13662-13698]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13726-13867]:Block[13726-13867]"
    }, {
      "left" : "throw new MessagingException(\"Authentication methods SASL PLAIN and LOGIN are unavailable.\");",
      "right" : "throw new MessagingException(\"Authentication methods SASL PLAIN and LOGIN are unavailable.\");",
      "info" : "ThrowStatement[13752-13845]:ThrowStatement[13752-13845]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13888-13894]:BreakStatement[13888-13894]"
    }, {
      "left" : "case CRAM_MD5:",
      "right" : "case CRAM_MD5:",
      "info" : "SwitchCase[13912-13926]:SwitchCase[13912-13926]"
    }, {
      "left" : "if (authCramMD5Supported)",
      "right" : "if (authCramMD5Supported)",
      "info" : "IfStatement[13947-14192]:IfStatement[13947-14192]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13973-14059]:Block[13973-14059]"
    }, {
      "left" : "saslAuthCramMD5(mUsername, mPassword);",
      "right" : "saslAuthCramMD5(mUsername, mPassword);",
      "info" : "ExpressionStatement[13999-14037]:ExpressionStatement[13999-14037]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14065-14192]:Block[14065-14192]"
    }, {
      "left" : "throw new MessagingException(\"Authentication method CRAM-MD5 is unavailable.\");",
      "right" : "throw new MessagingException(\"Authentication method CRAM-MD5 is unavailable.\");",
      "info" : "ThrowStatement[14091-14170]:ThrowStatement[14091-14170]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[14213-14219]:BreakStatement[14213-14219]"
    }, {
      "left" : "case EXTERNAL:",
      "right" : "case EXTERNAL:",
      "info" : "SwitchCase[14237-14251]:SwitchCase[14237-14251]"
    }, {
      "left" : "if (authExternalSupported)",
      "right" : "if (authExternalSupported)",
      "info" : "IfStatement[14272-15075]:IfStatement[14272-15075]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14299-14375]:Block[14299-14375]"
    }, {
      "left" : "saslAuthExternal(mUsername);",
      "right" : "saslAuthExternal(mUsername);",
      "info" : "ExpressionStatement[14325-14353]:ExpressionStatement[14325-14353]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14381-15075]:Block[14381-15075]"
    }, {
      "left" : "throw new CertificateValidationException(MissingCapability);",
      "right" : "throw new CertificateValidationException(MissingCapability);",
      "info" : "ThrowStatement[14993-15053]:ThrowStatement[14993-15053]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[15096-15102]:BreakStatement[15096-15102]"
    }, {
      "left" : "case AUTOMATIC:",
      "right" : "case AUTOMATIC:",
      "info" : "SwitchCase[15378-15393]:SwitchCase[15378-15393]"
    }, {
      "left" : "if (secureConnection)",
      "right" : "if (secureConnection)",
      "info" : "IfStatement[15414-16829]:IfStatement[15414-16829]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15436-16078]:Block[15436-16078]"
    }, {
      "left" : "if (authPlainSupported)",
      "right" : "if (authPlainSupported)",
      "info" : "IfStatement[15551-16056]:IfStatement[15551-16056]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15575-15667]:Block[15575-15667]"
    }, {
      "left" : "saslAuthPlain(mUsername, mPassword);",
      "right" : "saslAuthPlain(mUsername, mPassword);",
      "info" : "ExpressionStatement[15605-15641]:ExpressionStatement[15605-15641]"
    }, {
      "left" : "if (authLoginSupported)",
      "right" : "if (authLoginSupported)",
      "info" : "IfStatement[15673-16056]:IfStatement[15673-16056]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15697-15789]:Block[15697-15789]"
    }, {
      "left" : "saslAuthLogin(mUsername, mPassword);",
      "right" : "saslAuthLogin(mUsername, mPassword);",
      "info" : "ExpressionStatement[15727-15763]:ExpressionStatement[15727-15763]"
    }, {
      "left" : "if (authCramMD5Supported)",
      "right" : "if (authCramMD5Supported)",
      "info" : "IfStatement[15795-16056]:IfStatement[15795-16056]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15821-15915]:Block[15821-15915]"
    }, {
      "left" : "saslAuthCramMD5(mUsername, mPassword);",
      "right" : "saslAuthCramMD5(mUsername, mPassword);",
      "info" : "ExpressionStatement[15851-15889]:ExpressionStatement[15851-15889]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15921-16056]:Block[15921-16056]"
    }, {
      "left" : "throw new MessagingException(\"No supported authentication methods available.\");",
      "right" : "throw new MessagingException(\"No supported authentication methods available.\");",
      "info" : "ThrowStatement[15951-16030]:ThrowStatement[15951-16030]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16084-16829]:Block[16084-16829]"
    }, {
      "left" : "if (authCramMD5Supported)",
      "right" : "if (authCramMD5Supported)",
      "info" : "IfStatement[16110-16807]:IfStatement[16110-16807]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16136-16230]:Block[16136-16230]"
    }, {
      "left" : "saslAuthCramMD5(mUsername, mPassword);",
      "right" : "saslAuthCramMD5(mUsername, mPassword);",
      "info" : "ExpressionStatement[16166-16204]:ExpressionStatement[16166-16204]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16236-16807]:Block[16236-16807]"
    }, {
      "left" : "throw new MessagingException(\n                                    \"Update your outgoing server authentication setting. AUTOMATIC auth. is unavailable.\");",
      "right" : "throw new MessagingException(\n                                    \"Update your outgoing server authentication setting. AUTOMATIC auth. is unavailable.\");",
      "info" : "ThrowStatement[16628-16781]:ThrowStatement[16628-16781]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[16850-16856]:BreakStatement[16850-16856]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[16874-16882]:SwitchCase[16874-16882]"
    }, {
      "left" : "throw new MessagingException(\"Unhandled authentication method found in the server settings (bug).\");",
      "right" : "throw new MessagingException(\"Unhandled authentication method found in the server settings (bug).\");",
      "info" : "ThrowStatement[16903-17003]:ThrowStatement[16903-17003]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17069-17153]:Block[17069-17153]"
    }, {
      "left" : "throw new CertificateValidationException(e.getMessage(), e);",
      "right" : "throw new CertificateValidationException(e.getMessage(), e);",
      "info" : "ThrowStatement[17083-17143]:ThrowStatement[17083-17143]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17191-17333]:Block[17191-17333]"
    }, {
      "left" : "throw new MessagingException(\n                \"Unable to open connection to SMTP server due to security error.\", gse);",
      "right" : "throw new MessagingException(\n                \"Unable to open connection to SMTP server due to security error.\", gse);",
      "info" : "ThrowStatement[17205-17323]:ThrowStatement[17205-17323]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17358-17461]:Block[17358-17461]"
    }, {
      "left" : "throw new MessagingException(\"Unable to open connection to SMTP server.\", ioe);",
      "right" : "throw new MessagingException(\"Unable to open connection to SMTP server.\", ioe);",
      "info" : "ThrowStatement[17372-17451]:ThrowStatement[17372-17451]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[18295-18302]:Modifier[18295-18302]"
    }, {
      "left" : "Map<String,String>",
      "right" : "Map<String,String>",
      "info" : "ParameterizedType[18303-18321]:ParameterizedType[18303-18321]"
    }, {
      "left" : "sendHello",
      "right" : "sendHello",
      "info" : "SimpleName[18322-18331]:SimpleName[18322-18331]"
    }, {
      "left" : "String host",
      "right" : "String host",
      "info" : "SingleVariableDeclaration[18332-18343]:SingleVariableDeclaration[18332-18343]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[18352-18363]:SimpleType[18352-18363]"
    }, {
      "left" : "MessagingException",
      "right" : "MessagingException",
      "info" : "SimpleType[18365-18383]:SimpleType[18365-18383]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18384-19305]:Block[18384-19305]"
    }, {
      "left" : "Map<String, String> extensions = new HashMap<String, String>();",
      "right" : "Map<String, String> extensions = new HashMap<String, String>();",
      "info" : "VariableDeclarationStatement[18394-18457]:VariableDeclarationStatement[18394-18457]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[18466-19272]:TryStatement[18466-19272]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18470-18843]:Block[18470-18843]"
    }, {
      "left" : "List<String> results = executeSimpleCommand(\"EHLO \" + host);",
      "right" : "List<String> results = executeSimpleCommand(\"EHLO \" + host);",
      "info" : "VariableDeclarationStatement[18484-18544]:VariableDeclarationStatement[18484-18544]"
    }, {
      "left" : "results.remove(0);",
      "right" : "results.remove(0);",
      "info" : "ExpressionStatement[18606-18624]:ExpressionStatement[18606-18624]"
    }, {
      "left" : "for (String result : results)",
      "right" : "for (String result : results)",
      "info" : "EnhancedForStatement[18637-18833]:EnhancedForStatement[18637-18833]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18667-18833]:Block[18667-18833]"
    }, {
      "left" : "String[] pair = result.split(\" \", 2);",
      "right" : "String[] pair = result.split(\" \", 2);",
      "info" : "VariableDeclarationStatement[18685-18722]:VariableDeclarationStatement[18685-18722]"
    }, {
      "left" : "extensions.put(pair[0].toUpperCase(Locale.US), pair.length == 1 ? \"\" : pair[1]);",
      "right" : "extensions.put(pair[0].toUpperCase(Locale.US), pair.length == 1 ? \"\" : pair[1]);",
      "info" : "ExpressionStatement[18739-18819]:ExpressionStatement[18739-18819]"
    }, {
      "left" : "NegativeSmtpReplyException e",
      "right" : "NegativeSmtpReplyException e",
      "info" : "SingleVariableDeclaration[18851-18879]:SingleVariableDeclaration[22334-22362]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18881-19272]:Block[18881-19272]"
    }, {
      "left" : "if (K9MailLib.isDebug())",
      "right" : "if (K9MailLib.isDebug())",
      "info" : "IfStatement[18895-19026]:IfStatement[18895-19026]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18920-19026]:Block[18920-19026]"
    }, {
      "left" : "Log.v(LOG_TAG, \"Server doesn't support the EHLO command. Trying HELO...\");",
      "right" : "Log.v(LOG_TAG, \"Server doesn't support the EHLO command. Trying HELO...\");",
      "info" : "ExpressionStatement[18938-19012]:ExpressionStatement[18938-19012]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[19040-19262]:TryStatement[19040-19262]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19044-19113]:Block[19044-19113]"
    }, {
      "left" : "executeSimpleCommand(\"HELO \" + host);",
      "right" : "executeSimpleCommand(\"HELO \" + host);",
      "info" : "ExpressionStatement[19062-19099]:ExpressionStatement[19062-19099]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19152-19262]:Block[19152-19262]"
    }, {
      "left" : "Log.w(LOG_TAG, \"Server doesn't support the HELO command. Continuing anyway.\");",
      "right" : "Log.w(LOG_TAG, \"Server doesn't support the HELO command. Continuing anyway.\");",
      "info" : "ExpressionStatement[19170-19248]:ExpressionStatement[19170-19248]"
    }, {
      "left" : "return extensions;",
      "right" : "return extensions;",
      "info" : "ReturnStatement[19281-19299]:ReturnStatement[19281-19299]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[19311-19320]:MarkerAnnotation[19311-19320]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[19325-19331]:Modifier[19325-19331]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[19332-19336]:PrimitiveType[19332-19336]"
    }, {
      "left" : "sendMessage",
      "right" : "sendMessage",
      "info" : "SimpleName[19337-19348]:SimpleName[19337-19348]"
    }, {
      "left" : "Message message",
      "right" : "Message message",
      "info" : "SingleVariableDeclaration[19349-19364]:SingleVariableDeclaration[19349-19364]"
    }, {
      "left" : "MessagingException",
      "right" : "MessagingException",
      "info" : "SimpleType[19373-19391]:SimpleType[19373-19391]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19392-20793]:Block[19392-20793]"
    }, {
      "left" : "List<Address> addresses = new ArrayList<Address>();",
      "right" : "List<Address> addresses = new ArrayList<Address>();",
      "info" : "VariableDeclarationStatement[19402-19453]:VariableDeclarationStatement[19402-19453]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19462-19732]:Block[19462-19732]"
    }, {
      "left" : "addresses.addAll(Arrays.asList(message.getRecipients(RecipientType.TO)));",
      "right" : "addresses.addAll(Arrays.asList(message.getRecipients(RecipientType.TO)));",
      "info" : "ExpressionStatement[19476-19549]:ExpressionStatement[19476-19549]"
    }, {
      "left" : "addresses.addAll(Arrays.asList(message.getRecipients(RecipientType.CC)));",
      "right" : "addresses.addAll(Arrays.asList(message.getRecipients(RecipientType.CC)));",
      "info" : "ExpressionStatement[19562-19635]:ExpressionStatement[19562-19635]"
    }, {
      "left" : "addresses.addAll(Arrays.asList(message.getRecipients(RecipientType.BCC)));",
      "right" : "addresses.addAll(Arrays.asList(message.getRecipients(RecipientType.BCC)));",
      "info" : "ExpressionStatement[19648-19722]:ExpressionStatement[19648-19722]"
    }, {
      "left" : "message.setRecipients(RecipientType.BCC, null);",
      "right" : "message.setRecipients(RecipientType.BCC, null);",
      "info" : "ExpressionStatement[19741-19788]:ExpressionStatement[19741-19788]"
    }, {
      "left" : "Map<String, List<String>> charsetAddressesMap =\n            new HashMap<String, List<String>>();",
      "right" : "Map<String, List<String>> charsetAddressesMap =\n            new HashMap<String, List<String>>();",
      "info" : "VariableDeclarationStatement[19798-19894]:VariableDeclarationStatement[19798-19894]"
    }, {
      "left" : "for (Address address : addresses)",
      "right" : "for (Address address : addresses)",
      "info" : "EnhancedForStatement[19903-20410]:EnhancedForStatement[19903-20410]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19937-20410]:Block[19937-20410]"
    }, {
      "left" : "String addressString = address.getAddress();",
      "right" : "String addressString = address.getAddress();",
      "info" : "VariableDeclarationStatement[19951-19995]:VariableDeclarationStatement[19951-19995]"
    }, {
      "left" : "String charset = CharsetSupport.getCharsetFromAddress(addressString);",
      "right" : "String charset = CharsetSupport.getCharsetFromAddress(addressString);",
      "info" : "VariableDeclarationStatement[20008-20077]:VariableDeclarationStatement[20008-20077]"
    }, {
      "left" : "List<String> addressesOfCharset = charsetAddressesMap.get(charset);",
      "right" : "List<String> addressesOfCharset = charsetAddressesMap.get(charset);",
      "info" : "VariableDeclarationStatement[20090-20157]:VariableDeclarationStatement[20090-20157]"
    }, {
      "left" : "if (addressesOfCharset == null)",
      "right" : "if (addressesOfCharset == null)",
      "info" : "IfStatement[20170-20349]:IfStatement[20170-20349]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20202-20349]:Block[20202-20349]"
    }, {
      "left" : "addressesOfCharset = new ArrayList<String>();",
      "right" : "addressesOfCharset = new ArrayList<String>();",
      "info" : "ExpressionStatement[20220-20265]:ExpressionStatement[20220-20265]"
    }, {
      "left" : "charsetAddressesMap.put(charset, addressesOfCharset);",
      "right" : "charsetAddressesMap.put(charset, addressesOfCharset);",
      "info" : "ExpressionStatement[20282-20335]:ExpressionStatement[20282-20335]"
    }, {
      "left" : "addressesOfCharset.add(addressString);",
      "right" : "addressesOfCharset.add(addressString);",
      "info" : "ExpressionStatement[20362-20400]:ExpressionStatement[20362-20400]"
    }, {
      "left" : "for (Map.Entry<String, List<String>> charsetAddressesMapEntry :\n                charsetAddressesMap.entrySet())",
      "right" : "for (Map.Entry<String, List<String>> charsetAddressesMapEntry :\n                charsetAddressesMap.entrySet())",
      "info" : "EnhancedForStatement[20420-20787]:EnhancedForStatement[20420-20787]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20532-20787]:Block[20532-20787]"
    }, {
      "left" : "String charset = charsetAddressesMapEntry.getKey();",
      "right" : "String charset = charsetAddressesMapEntry.getKey();",
      "info" : "VariableDeclarationStatement[20546-20597]:VariableDeclarationStatement[20546-20597]"
    }, {
      "left" : "List<String> addressesOfCharset = charsetAddressesMapEntry.getValue();",
      "right" : "List<String> addressesOfCharset = charsetAddressesMapEntry.getValue();",
      "info" : "VariableDeclarationStatement[20610-20680]:VariableDeclarationStatement[20610-20680]"
    }, {
      "left" : "message.setCharset(charset);",
      "right" : "message.setCharset(charset);",
      "info" : "ExpressionStatement[20693-20721]:ExpressionStatement[20693-20721]"
    }, {
      "left" : "sendMessageTo(addressesOfCharset, message);",
      "right" : "sendMessageTo(addressesOfCharset, message);",
      "info" : "ExpressionStatement[20734-20777]:ExpressionStatement[20734-20777]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[20799-20806]:Modifier[20799-20806]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[20807-20811]:PrimitiveType[20807-20811]"
    }, {
      "left" : "sendMessageTo",
      "right" : "sendMessageTo",
      "info" : "SimpleName[20812-20825]:SimpleName[20812-20825]"
    }, {
      "left" : "List<String> addresses",
      "right" : "List<String> addresses",
      "info" : "SingleVariableDeclaration[20826-20848]:SingleVariableDeclaration[20826-20848]"
    }, {
      "left" : "Message message",
      "right" : "Message message",
      "info" : "SingleVariableDeclaration[20850-20865]:SingleVariableDeclaration[20850-20865]"
    }, {
      "left" : "MessagingException",
      "right" : "MessagingException",
      "info" : "SimpleType[20878-20896]:SimpleType[20878-20896]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20897-23159]:Block[20897-22643]"
    }, {
      "left" : "close();",
      "right" : "close();",
      "info" : "ExpressionStatement[20946-20954]:ExpressionStatement[20908-20916]"
    }, {
      "left" : "open();",
      "right" : "open();",
      "info" : "ExpressionStatement[20963-20970]:ExpressionStatement[20925-20932]"
    }, {
      "left" : "if (!m8bitEncodingAllowed)",
      "right" : "if (!m8bitEncodingAllowed)",
      "info" : "IfStatement[20980-21063]:IfStatement[20942-21025]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21007-21063]:Block[20969-21025]"
    }, {
      "left" : "message.setUsing7bitTransport();",
      "right" : "message.setUsing7bitTransport();",
      "info" : "ExpressionStatement[21021-21053]:ExpressionStatement[20983-21015]"
    }, {
      "left" : "if (mLargestAcceptableMessage > 0 && message.hasAttachments())",
      "right" : "if (mLargestAcceptableMessage > 0 && message.hasAttachments())",
      "info" : "IfStatement[21234-21646]:IfStatement[21196-21439]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21297-21646]:Block[21259-21439]"
    }, {
      "left" : "if (message.calculateSize() > mLargestAcceptableMessage)",
      "right" : "if (message.calculateSize() > mLargestAcceptableMessage)",
      "info" : "IfStatement[21311-21636]:IfStatement[21273-21429]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21368-21636]:Block[21330-21429]"
    }, {
      "left" : "new MessagingException(\"Message too large for server\")",
      "right" : "new MessagingException(\"Message too large for server\", true)",
      "info" : "ClassInstanceCreation[21410-21464]:ClassInstanceCreation[21354-21414]"
    }, {
      "left" : "me.setPermanentFailure(possibleSend);",
      "right" : "me.setPermanentFailure(entireMessageSent);",
      "info" : "ExpressionStatement[21559-21596]:ExpressionStatement[22520-22562]"
    }, {
      "left" : "possibleSend",
      "right" : "entireMessageSent",
      "info" : "SimpleName[21582-21594]:SimpleName[22543-22560]"
    }, {
      "left" : "throw me;",
      "right" : "throw new MessagingException(\"Message too large for server\", true);",
      "info" : "ThrowStatement[21613-21622]:ThrowStatement[21348-21415]"
    }, {
      "left" : "Address[] from = message.getFrom();",
      "right" : "Address[] from = message.getFrom();",
      "info" : "VariableDeclarationStatement[21656-21691]:VariableDeclarationStatement[21492-21527]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[21700-23152]:TryStatement[21536-22636]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21704-22485]:Block[21540-22326]"
    }, {
      "left" : "executeSimpleCommand(\"MAIL FROM:\" + \"<\" + from[0].getAddress() + \">\"\n                    + (m8bitEncodingAllowed ? \" BODY=8BITMIME\" : \"\"));",
      "right" : "executeSimpleCommand(\"MAIL FROM:\" + \"<\" + from[0].getAddress() + \">\"\n                    + (m8bitEncodingAllowed ? \" BODY=8BITMIME\" : \"\"));",
      "info" : "ExpressionStatement[21718-21857]:ExpressionStatement[21554-21693]"
    }, {
      "left" : "for (String address : addresses)",
      "right" : "for (String address : addresses)",
      "info" : "EnhancedForStatement[21870-21990]:EnhancedForStatement[21706-21826]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21903-21990]:Block[21739-21826]"
    }, {
      "left" : "executeSimpleCommand(\"RCPT TO:\" + \"<\" + address + \">\");",
      "right" : "executeSimpleCommand(\"RCPT TO:\" + \"<\" + address + \">\");",
      "info" : "ExpressionStatement[21921-21976]:ExpressionStatement[21757-21812]"
    }, {
      "left" : "executeSimpleCommand(\"DATA\");",
      "right" : "executeSimpleCommand(\"DATA\");",
      "info" : "ExpressionStatement[22003-22032]:ExpressionStatement[21839-21868]"
    }, {
      "left" : "EOLConvertingOutputStream msgOut = new EOLConvertingOutputStream(\n                    new LineWrapOutputStream(new SmtpDataStuffing(mOut), 1000));",
      "right" : "EOLConvertingOutputStream msgOut = new EOLConvertingOutputStream(\n                    new LineWrapOutputStream(new SmtpDataStuffing(mOut), 1000));",
      "info" : "VariableDeclarationStatement[22046-22192]:VariableDeclarationStatement[21882-22028]"
    }, {
      "left" : "message.writeTo(msgOut);",
      "right" : "message.writeTo(msgOut);",
      "info" : "ExpressionStatement[22206-22230]:ExpressionStatement[22042-22066]"
    }, {
      "left" : "msgOut.flush();",
      "right" : "msgOut.flush();",
      "info" : "ExpressionStatement[22319-22334]:ExpressionStatement[22155-22170]"
    }, {
      "left" : "possibleSend",
      "right" : "entireMessageSent",
      "info" : "SimpleName[22348-22360]:SimpleName[22184-22201]"
    }, {
      "left" : "possibleSend = true;",
      "right" : "entireMessageSent = true;",
      "info" : "ExpressionStatement[22348-22368]:ExpressionStatement[22184-22209]"
    }, {
      "left" : "executeSimpleCommand(\"\\r\\n.\");",
      "right" : "executeSimpleCommand(\"\\r\\n.\");",
      "info" : "ExpressionStatement[22445-22475]:ExpressionStatement[22286-22316]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22506-23111]:Block[22417-22595]"
    }, {
      "left" : "MessagingException me = new MessagingException(\"Unable to send message\", e);",
      "right" : "MessagingException me = new MessagingException(\"Unable to send message\", e);",
      "info" : "VariableDeclarationStatement[22520-22596]:VariableDeclarationStatement[22431-22507]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[22670-22676]:SimpleType[9326-9332]"
    }, {
      "left" : "e.getMessage()",
      "right" : "e.getMessage()",
      "info" : "MethodInvocation[22683-22697]:MethodInvocation[17124-17138]"
    }, {
      "left" : "if (msg != null && msg.startsWith(\"5\"))",
      "right" : "if (K9MailLib.isDebug())",
      "info" : "IfStatement[22711-22891]:IfStatement[18895-19026]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22751-22891]:Block[18920-19026]"
    }, {
      "left" : "Log.w(LOG_TAG, \"handling 5xx SMTP error code as a permanent failure\");",
      "right" : "Log.v(LOG_TAG, \"Server doesn't support the EHLO command. Trying HELO...\");",
      "info" : "ExpressionStatement[22769-22839]:ExpressionStatement[18938-19012]"
    }, {
      "left" : "w",
      "right" : "v",
      "info" : "SimpleName[22773-22774]:SimpleName[18942-18943]"
    }, {
      "left" : "\"handling 5xx SMTP error code as a permanent failure\"",
      "right" : "\"Server doesn't support the EHLO command. Trying HELO...\"",
      "info" : "StringLiteral[22784-22837]:StringLiteral[18953-19010]"
    }, {
      "left" : "me.setPermanentFailure(possibleSend);",
      "right" : "me.setPermanentFailure(entireMessageSent);",
      "info" : "ExpressionStatement[23042-23079]:ExpressionStatement[22520-22562]"
    }, {
      "left" : "possibleSend",
      "right" : "entireMessageSent",
      "info" : "SimpleName[23065-23077]:SimpleName[22543-22560]"
    }, {
      "left" : "throw me;",
      "right" : "throw me;",
      "info" : "ThrowStatement[23092-23101]:ThrowStatement[22576-22585]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23120-23152]:Block[22604-22636]"
    }, {
      "left" : "close();",
      "right" : "close();",
      "info" : "ExpressionStatement[23134-23142]:ExpressionStatement[22618-22626]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[23165-23174]:MarkerAnnotation[22649-22658]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[23179-23185]:Modifier[22663-22669]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[23186-23190]:PrimitiveType[22670-22674]"
    }, {
      "left" : "close",
      "right" : "close",
      "info" : "SimpleName[23191-23196]:SimpleName[22675-22680]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23199-23621]:Block[22683-23105]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[23209-23299]:TryStatement[22693-22783]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23213-23266]:Block[22697-22750]"
    }, {
      "left" : "executeSimpleCommand(\"QUIT\");",
      "right" : "executeSimpleCommand(\"QUIT\");",
      "info" : "ExpressionStatement[23227-23256]:ExpressionStatement[22711-22740]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23287-23299]:Block[22771-22783]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[23308-23381]:TryStatement[22792-22865]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23312-23348]:Block[22796-22832]"
    }, {
      "left" : "mIn.close();",
      "right" : "mIn.close();",
      "info" : "ExpressionStatement[23326-23338]:ExpressionStatement[22810-22822]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23369-23381]:Block[22853-22865]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[23390-23464]:TryStatement[22874-22948]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23394-23431]:Block[22878-22915]"
    }, {
      "left" : "mOut.close();",
      "right" : "mOut.close();",
      "info" : "ExpressionStatement[23408-23421]:ExpressionStatement[22892-22905]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23452-23464]:Block[22936-22948]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[23473-23550]:TryStatement[22957-23034]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23477-23517]:Block[22961-23001]"
    }, {
      "left" : "mSocket.close();",
      "right" : "mSocket.close();",
      "info" : "ExpressionStatement[23491-23507]:ExpressionStatement[22975-22991]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23538-23550]:Block[23022-23034]"
    }, {
      "left" : "mIn = null;",
      "right" : "mIn = null;",
      "info" : "ExpressionStatement[23559-23570]:ExpressionStatement[23043-23054]"
    }, {
      "left" : "mOut = null;",
      "right" : "mOut = null;",
      "info" : "ExpressionStatement[23579-23591]:ExpressionStatement[23063-23075]"
    }, {
      "left" : "mSocket = null;",
      "right" : "mSocket = null;",
      "info" : "ExpressionStatement[23600-23615]:ExpressionStatement[23084-23099]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[23627-23634]:Modifier[23111-23118]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[23635-23641]:SimpleType[23119-23125]"
    }, {
      "left" : "readLine",
      "right" : "readLine",
      "info" : "SimpleName[23642-23650]:SimpleName[23126-23134]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[23660-23671]:SimpleType[23144-23155]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23672-24154]:Block[23156-23638]"
    }, {
      "left" : "StringBuilder sb = new StringBuilder();",
      "right" : "StringBuilder sb = new StringBuilder();",
      "info" : "VariableDeclarationStatement[23682-23721]:VariableDeclarationStatement[23166-23205]"
    }, {
      "left" : "int d;",
      "right" : "int d;",
      "info" : "VariableDeclarationStatement[23730-23736]:VariableDeclarationStatement[23214-23220]"
    }, {
      "left" : "while ((d = mIn.read()) != -1)",
      "right" : "while ((d = mIn.read()) != -1)",
      "info" : "WhileStatement[23745-23988]:WhileStatement[23229-23472]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23776-23988]:Block[23260-23472]"
    }, {
      "left" : "if (((char)d) == '\\r')",
      "right" : "if (((char)d) == '\\r')",
      "info" : "IfStatement[23790-23978]:IfStatement[23274-23462]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23813-23854]:Block[23297-23338]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[23831-23840]:ContinueStatement[23315-23324]"
    }, {
      "left" : "if (((char)d) == '\\n')",
      "right" : "if (((char)d) == '\\n')",
      "info" : "IfStatement[23860-23978]:IfStatement[23344-23462]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23883-23921]:Block[23367-23405]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[23901-23907]:BreakStatement[23385-23391]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23927-23978]:Block[23411-23462]"
    }, {
      "left" : "sb.append((char)d);",
      "right" : "sb.append((char)d);",
      "info" : "ExpressionStatement[23945-23964]:ExpressionStatement[23429-23448]"
    }, {
      "left" : "String ret = sb.toString();",
      "right" : "String ret = sb.toString();",
      "info" : "VariableDeclarationStatement[23997-24024]:VariableDeclarationStatement[23481-23508]"
    }, {
      "left" : "if (K9MailLib.isDebug() && DEBUG_PROTOCOL_SMTP)",
      "right" : "if (K9MailLib.isDebug() && DEBUG_PROTOCOL_SMTP)",
      "info" : "IfStatement[24033-24127]:IfStatement[23517-23611]"
    }, {
      "left" : "Log.d(LOG_TAG, \"SMTP <<< \" + ret);",
      "right" : "Log.d(LOG_TAG, \"SMTP <<< \" + ret);",
      "info" : "ExpressionStatement[24093-24127]:ExpressionStatement[23577-23611]"
    }, {
      "left" : "return ret;",
      "right" : "return ret;",
      "info" : "ReturnStatement[24137-24148]:ReturnStatement[23621-23632]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[24160-24167]:Modifier[23644-23651]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[24168-24172]:PrimitiveType[23652-23656]"
    }, {
      "left" : "writeLine",
      "right" : "writeLine",
      "info" : "SimpleName[24173-24182]:SimpleName[23657-23666]"
    }, {
      "left" : "String s",
      "right" : "String s",
      "info" : "SingleVariableDeclaration[24183-24191]:SingleVariableDeclaration[23667-23675]"
    }, {
      "left" : "boolean sensitive",
      "right" : "boolean sensitive",
      "info" : "SingleVariableDeclaration[24193-24210]:SingleVariableDeclaration[23677-23694]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[24219-24230]:SimpleType[23703-23714]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24231-24966]:Block[23715-24450]"
    }, {
      "left" : "if (K9MailLib.isDebug() && DEBUG_PROTOCOL_SMTP)",
      "right" : "if (K9MailLib.isDebug() && DEBUG_PROTOCOL_SMTP)",
      "info" : "IfStatement[24241-24581]:IfStatement[23725-24065]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24289-24581]:Block[23773-24065]"
    }, {
      "left" : "final String commandToLog;",
      "right" : "final String commandToLog;",
      "info" : "VariableDeclarationStatement[24303-24329]:VariableDeclarationStatement[23787-23813]"
    }, {
      "left" : "if (sensitive && !K9MailLib.isDebugSensitive())",
      "right" : "if (sensitive && !K9MailLib.isDebugSensitive())",
      "info" : "IfStatement[24342-24529]:IfStatement[23826-24013]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24390-24460]:Block[23874-23944]"
    }, {
      "left" : "commandToLog = \"SMTP >>> *sensitive*\";",
      "right" : "commandToLog = \"SMTP >>> *sensitive*\";",
      "info" : "ExpressionStatement[24408-24446]:ExpressionStatement[23892-23930]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24466-24529]:Block[23950-24013]"
    }, {
      "left" : "commandToLog = \"SMTP >>> \" + s;",
      "right" : "commandToLog = \"SMTP >>> \" + s;",
      "info" : "ExpressionStatement[24484-24515]:ExpressionStatement[23968-23999]"
    }, {
      "left" : "Log.d(LOG_TAG, commandToLog);",
      "right" : "Log.d(LOG_TAG, commandToLog);",
      "info" : "ExpressionStatement[24542-24571]:ExpressionStatement[24026-24055]"
    }, {
      "left" : "byte[] data = s.concat(\"\\r\\n\").getBytes();",
      "right" : "byte[] data = s.concat(\"\\r\\n\").getBytes();",
      "info" : "VariableDeclarationStatement[24591-24633]:VariableDeclarationStatement[24075-24117]"
    }, {
      "left" : "mOut.write(data);",
      "right" : "mOut.write(data);",
      "info" : "ExpressionStatement[24921-24938]:ExpressionStatement[24405-24422]"
    }, {
      "left" : "mOut.flush();",
      "right" : "mOut.flush();",
      "info" : "ExpressionStatement[24947-24960]:ExpressionStatement[24431-24444]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[24972-24979]:Modifier[24456-24463]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[24980-24984]:PrimitiveType[24464-24468]"
    }, {
      "left" : "checkLine",
      "right" : "checkLine",
      "info" : "SimpleName[24985-24994]:SimpleName[24469-24478]"
    }, {
      "left" : "String line",
      "right" : "String line",
      "info" : "SingleVariableDeclaration[24995-25006]:SingleVariableDeclaration[24479-24490]"
    }, {
      "left" : "MessagingException",
      "right" : "MessagingException",
      "info" : "SimpleType[25015-25033]:SimpleType[24499-24517]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25034-25773]:Block[24518-25257]"
    }, {
      "left" : "int length = line.length();",
      "right" : "int length = line.length();",
      "info" : "VariableDeclarationStatement[25044-25071]:VariableDeclarationStatement[24528-24555]"
    }, {
      "left" : "if (length < 1)",
      "right" : "if (length < 1)",
      "info" : "IfStatement[25080-25178]:IfStatement[24564-24662]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25096-25178]:Block[24580-24662]"
    }, {
      "left" : "throw new MessagingException(\"SMTP response is 0 length\");",
      "right" : "throw new MessagingException(\"SMTP response is 0 length\");",
      "info" : "ThrowStatement[25110-25168]:ThrowStatement[24594-24652]"
    }, {
      "left" : "char c = line.charAt(0);",
      "right" : "char c = line.charAt(0);",
      "info" : "VariableDeclarationStatement[25188-25212]:VariableDeclarationStatement[24672-24696]"
    }, {
      "left" : "if ((c == '4') || (c == '5'))",
      "right" : "if ((c == '4') || (c == '5'))",
      "info" : "IfStatement[25221-25767]:IfStatement[24705-25251]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25251-25767]:Block[24735-25251]"
    }, {
      "left" : "int replyCode = -1;",
      "right" : "int replyCode = -1;",
      "info" : "VariableDeclarationStatement[25265-25284]:VariableDeclarationStatement[24749-24768]"
    }, {
      "left" : "String message = line;",
      "right" : "String message = line;",
      "info" : "VariableDeclarationStatement[25297-25319]:VariableDeclarationStatement[24781-24803]"
    }, {
      "left" : "if (length >= 3)",
      "right" : "if (length >= 3)",
      "info" : "IfStatement[25332-25686]:IfStatement[24816-25170]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25349-25686]:Block[24833-25170]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[25367-25511]:TryStatement[24851-24995]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25371-25462]:Block[24855-24946]"
    }, {
      "left" : "replyCode = Integer.parseInt(line.substring(0, 3));",
      "right" : "replyCode = Integer.parseInt(line.substring(0, 3));",
      "info" : "ExpressionStatement[25393-25444]:ExpressionStatement[24877-24928]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25495-25511]:Block[24979-24995]"
    }, {
      "left" : "if (length > 4)",
      "right" : "if (length > 4)",
      "info" : "IfStatement[25529-25672]:IfStatement[25013-25156]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25545-25613]:Block[25029-25097]"
    }, {
      "left" : "message = line.substring(4);",
      "right" : "message = line.substring(4);",
      "info" : "ExpressionStatement[25567-25595]:ExpressionStatement[25051-25079]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25619-25672]:Block[25103-25156]"
    }, {
      "left" : "message = \"\";",
      "right" : "message = \"\";",
      "info" : "ExpressionStatement[25641-25654]:ExpressionStatement[25125-25138]"
    }, {
      "left" : "throw new NegativeSmtpReplyException(replyCode, message);",
      "right" : "throw new NegativeSmtpReplyException(replyCode, message);",
      "info" : "ThrowStatement[25700-25757]:ThrowStatement[25184-25241]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[25779-25786]:Modifier[25263-25270]"
    }, {
      "left" : "List<String>",
      "right" : "List<String>",
      "info" : "ParameterizedType[25787-25799]:ParameterizedType[25271-25283]"
    }, {
      "left" : "executeSimpleCommand",
      "right" : "executeSimpleCommand",
      "info" : "SimpleName[25800-25820]:SimpleName[25284-25304]"
    }, {
      "left" : "String command",
      "right" : "String command",
      "info" : "SingleVariableDeclaration[25821-25835]:SingleVariableDeclaration[25305-25319]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[25844-25855]:SimpleType[25328-25339]"
    }, {
      "left" : "MessagingException",
      "right" : "MessagingException",
      "info" : "SimpleType[25857-25875]:SimpleType[25341-25359]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25876-25936]:Block[25360-25420]"
    }, {
      "left" : "return executeSimpleCommand(command, false);",
      "right" : "return executeSimpleCommand(command, false);",
      "info" : "ReturnStatement[25886-25930]:ReturnStatement[25370-25414]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[25942-25949]:Modifier[25426-25433]"
    }, {
      "left" : "List<String>",
      "right" : "List<String>",
      "info" : "ParameterizedType[25950-25962]:ParameterizedType[25434-25446]"
    }, {
      "left" : "executeSimpleCommand",
      "right" : "executeSimpleCommand",
      "info" : "SimpleName[25963-25983]:SimpleName[25447-25467]"
    }, {
      "left" : "String command",
      "right" : "String command",
      "info" : "SingleVariableDeclaration[25984-25998]:SingleVariableDeclaration[25468-25482]"
    }, {
      "left" : "boolean sensitive",
      "right" : "boolean sensitive",
      "info" : "SingleVariableDeclaration[26000-26017]:SingleVariableDeclaration[25484-25501]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[26030-26041]:SimpleType[25514-25525]"
    }, {
      "left" : "MessagingException",
      "right" : "MessagingException",
      "info" : "SimpleType[26043-26061]:SimpleType[25527-25545]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26062-27454]:Block[25546-26938]"
    }, {
      "left" : "List<String> results = new ArrayList<String>();",
      "right" : "List<String> results = new ArrayList<String>();",
      "info" : "VariableDeclarationStatement[26072-26119]:VariableDeclarationStatement[25556-25603]"
    }, {
      "left" : "if (command != null)",
      "right" : "if (command != null)",
      "info" : "IfStatement[26128-26203]:IfStatement[25612-25687]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26149-26203]:Block[25633-25687]"
    }, {
      "left" : "writeLine(command, sensitive);",
      "right" : "writeLine(command, sensitive);",
      "info" : "ExpressionStatement[26163-26193]:ExpressionStatement[25647-25677]"
    }, {
      "left" : "String line = readLine();",
      "right" : "String line = readLine();",
      "info" : "VariableDeclarationStatement[26878-26903]:VariableDeclarationStatement[26362-26387]"
    }, {
      "left" : "while (line.length() >= 4)",
      "right" : "while (line.length() >= 4)",
      "info" : "WhileStatement[26912-27342]:WhileStatement[26396-26826]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26939-27342]:Block[26423-26826]"
    }, {
      "left" : "if (line.length() > 4)",
      "right" : "if (line.length() > 4)",
      "info" : "IfStatement[26953-27130]:IfStatement[26437-26614]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26976-27130]:Block[26460-26614]"
    }, {
      "left" : "results.add(line.substring(4));",
      "right" : "results.add(line.substring(4));",
      "info" : "ExpressionStatement[27085-27116]:ExpressionStatement[26569-26600]"
    }, {
      "left" : "if (line.charAt(3) != '-')",
      "right" : "if (line.charAt(3) != '-')",
      "info" : "IfStatement[27144-27301]:IfStatement[26628-26785]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27171-27301]:Block[26655-26785]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[27281-27287]:BreakStatement[26765-26771]"
    }, {
      "left" : "line = readLine();",
      "right" : "line = readLine();",
      "info" : "ExpressionStatement[27314-27332]:ExpressionStatement[26798-26816]"
    }, {
      "left" : "checkLine(line);",
      "right" : "checkLine(line);",
      "info" : "ExpressionStatement[27407-27423]:ExpressionStatement[26891-26907]"
    }, {
      "left" : "return results;",
      "right" : "return results;",
      "info" : "ReturnStatement[27433-27448]:ReturnStatement[26917-26932]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[27880-27887]:Modifier[27364-27371]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[27888-27892]:PrimitiveType[27372-27376]"
    }, {
      "left" : "saslAuthLogin",
      "right" : "saslAuthLogin",
      "info" : "SimpleName[27893-27906]:SimpleName[27377-27390]"
    }, {
      "left" : "String username",
      "right" : "String username",
      "info" : "SingleVariableDeclaration[27907-27922]:SingleVariableDeclaration[27391-27406]"
    }, {
      "left" : "String password",
      "right" : "String password",
      "info" : "SingleVariableDeclaration[27924-27939]:SingleVariableDeclaration[27408-27423]"
    }, {
      "left" : "MessagingException",
      "right" : "MessagingException",
      "info" : "SimpleType[27948-27966]:SimpleType[27432-27450]"
    }, {
      "left" : "AuthenticationFailedException",
      "right" : "AuthenticationFailedException",
      "info" : "SimpleType[27976-28005]:SimpleType[27460-27489]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[28007-28018]:SimpleType[27491-27502]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28019-28593]:Block[27503-28077]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[28029-28587]:TryStatement[27513-28071]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28033-28222]:Block[27517-27706]"
    }, {
      "left" : "executeSimpleCommand(\"AUTH LOGIN\");",
      "right" : "executeSimpleCommand(\"AUTH LOGIN\");",
      "info" : "ExpressionStatement[28047-28082]:ExpressionStatement[27531-27566]"
    }, {
      "left" : "executeSimpleCommand(Base64.encode(username), true);",
      "right" : "executeSimpleCommand(Base64.encode(username), true);",
      "info" : "ExpressionStatement[28095-28147]:ExpressionStatement[27579-27631]"
    }, {
      "left" : "executeSimpleCommand(Base64.encode(password), true);",
      "right" : "executeSimpleCommand(Base64.encode(password), true);",
      "info" : "ExpressionStatement[28160-28212]:ExpressionStatement[27644-27696]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28268-28587]:Block[27752-28071]"
    }, {
      "left" : "if (exception.getReplyCode() == 535)",
      "right" : "if (exception.getReplyCode() == 535)",
      "info" : "IfStatement[28282-28577]:IfStatement[27766-28061]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28319-28523]:Block[27803-28007]"
    }, {
      "left" : "throw new AuthenticationFailedException(\"AUTH LOGIN failed (\"\n                        + exception.getMessage() + \")\");",
      "right" : "throw new AuthenticationFailedException(\"AUTH LOGIN failed (\"\n                        + exception.getMessage() + \")\");",
      "info" : "ThrowStatement[28391-28509]:ThrowStatement[27875-27993]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28529-28577]:Block[28013-28061]"
    }, {
      "left" : "throw exception;",
      "right" : "throw exception;",
      "info" : "ThrowStatement[28547-28563]:ThrowStatement[28031-28047]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[28599-28606]:Modifier[28083-28090]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[28607-28611]:PrimitiveType[28091-28095]"
    }, {
      "left" : "saslAuthPlain",
      "right" : "saslAuthPlain",
      "info" : "SimpleName[28612-28625]:SimpleName[28096-28109]"
    }, {
      "left" : "String username",
      "right" : "String username",
      "info" : "SingleVariableDeclaration[28626-28641]:SingleVariableDeclaration[28110-28125]"
    }, {
      "left" : "String password",
      "right" : "String password",
      "info" : "SingleVariableDeclaration[28643-28658]:SingleVariableDeclaration[28127-28142]"
    }, {
      "left" : "MessagingException",
      "right" : "MessagingException",
      "info" : "SimpleType[28667-28685]:SimpleType[28151-28169]"
    }, {
      "left" : "AuthenticationFailedException",
      "right" : "AuthenticationFailedException",
      "info" : "SimpleType[28695-28724]:SimpleType[28179-28208]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[28726-28737]:SimpleType[28210-28221]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28738-29272]:Block[28222-28756]"
    }, {
      "left" : "String data = Base64.encode(\"\\000\" + username + \"\\000\" + password);",
      "right" : "String data = Base64.encode(\"\\000\" + username + \"\\000\" + password);",
      "info" : "VariableDeclarationStatement[28748-28815]:VariableDeclarationStatement[28232-28299]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[28824-29266]:TryStatement[28308-28750]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28828-28901]:Block[28312-28385]"
    }, {
      "left" : "executeSimpleCommand(\"AUTH PLAIN \" + data, true);",
      "right" : "executeSimpleCommand(\"AUTH PLAIN \" + data, true);",
      "info" : "ExpressionStatement[28842-28891]:ExpressionStatement[28326-28375]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28947-29266]:Block[28431-28750]"
    }, {
      "left" : "if (exception.getReplyCode() == 535)",
      "right" : "if (exception.getReplyCode() == 535)",
      "info" : "IfStatement[28961-29256]:IfStatement[28445-28740]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28998-29202]:Block[28482-28686]"
    }, {
      "left" : "throw new AuthenticationFailedException(\"AUTH PLAIN failed (\"\n                        + exception.getMessage() + \")\");",
      "right" : "throw new AuthenticationFailedException(\"AUTH PLAIN failed (\"\n                        + exception.getMessage() + \")\");",
      "info" : "ThrowStatement[29070-29188]:ThrowStatement[28554-28672]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29208-29256]:Block[28692-28740]"
    }, {
      "left" : "throw exception;",
      "right" : "throw exception;",
      "info" : "ThrowStatement[29226-29242]:ThrowStatement[28710-28726]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[29278-29285]:Modifier[28762-28769]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[29286-29290]:PrimitiveType[28770-28774]"
    }, {
      "left" : "saslAuthCramMD5",
      "right" : "saslAuthCramMD5",
      "info" : "SimpleName[29291-29306]:SimpleName[28775-28790]"
    }, {
      "left" : "String username",
      "right" : "String username",
      "info" : "SingleVariableDeclaration[29307-29322]:SingleVariableDeclaration[28791-28806]"
    }, {
      "left" : "String password",
      "right" : "String password",
      "info" : "SingleVariableDeclaration[29324-29339]:SingleVariableDeclaration[28808-28823]"
    }, {
      "left" : "MessagingException",
      "right" : "MessagingException",
      "info" : "SimpleType[29348-29366]:SimpleType[28832-28850]"
    }, {
      "left" : "AuthenticationFailedException",
      "right" : "AuthenticationFailedException",
      "info" : "SimpleType[29376-29405]:SimpleType[28860-28889]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[29407-29418]:SimpleType[28891-28902]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29419-30158]:Block[28903-29642]"
    }, {
      "left" : "List<String> respList = executeSimpleCommand(\"AUTH CRAM-MD5\");",
      "right" : "List<String> respList = executeSimpleCommand(\"AUTH CRAM-MD5\");",
      "info" : "VariableDeclarationStatement[29430-29492]:VariableDeclarationStatement[28914-28976]"
    }, {
      "left" : "if (respList.size() != 1)",
      "right" : "if (respList.size() != 1)",
      "info" : "IfStatement[29501-29612]:IfStatement[28985-29096]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29527-29612]:Block[29011-29096]"
    }, {
      "left" : "throw new MessagingException(\"Unable to negotiate CRAM-MD5\");",
      "right" : "throw new MessagingException(\"Unable to negotiate CRAM-MD5\");",
      "info" : "ThrowStatement[29541-29602]:ThrowStatement[29025-29086]"
    }, {
      "left" : "String b64Nonce = respList.get(0);",
      "right" : "String b64Nonce = respList.get(0);",
      "info" : "VariableDeclarationStatement[29622-29656]:VariableDeclarationStatement[29106-29140]"
    }, {
      "left" : "String b64CRAMString = Authentication.computeCramMd5(mUsername, mPassword, b64Nonce);",
      "right" : "String b64CRAMString = Authentication.computeCramMd5(mUsername, mPassword, b64Nonce);",
      "info" : "VariableDeclarationStatement[29665-29750]:VariableDeclarationStatement[29149-29234]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[29760-30152]:TryStatement[29244-29636]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29764-29830]:Block[29248-29314]"
    }, {
      "left" : "executeSimpleCommand(b64CRAMString, true);",
      "right" : "executeSimpleCommand(b64CRAMString, true);",
      "info" : "ExpressionStatement[29778-29820]:ExpressionStatement[29262-29304]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29876-30152]:Block[29360-29636]"
    }, {
      "left" : "if (exception.getReplyCode() == 535)",
      "right" : "if (exception.getReplyCode() == 535)",
      "info" : "IfStatement[29890-30142]:IfStatement[29374-29626]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29927-30088]:Block[29411-29572]"
    }, {
      "left" : "throw new AuthenticationFailedException(exception.getMessage(), exception);",
      "right" : "throw new AuthenticationFailedException(exception.getMessage(), exception);",
      "info" : "ThrowStatement[29999-30074]:ThrowStatement[29483-29558]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30094-30142]:Block[29578-29626]"
    }, {
      "left" : "throw exception;",
      "right" : "throw exception;",
      "info" : "ThrowStatement[30112-30128]:ThrowStatement[29596-29612]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[30164-30171]:Modifier[29648-29655]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[30172-30176]:PrimitiveType[29656-29660]"
    }, {
      "left" : "saslAuthExternal",
      "right" : "saslAuthExternal",
      "info" : "SimpleName[30177-30193]:SimpleName[29661-29677]"
    }, {
      "left" : "String username",
      "right" : "String username",
      "info" : "SingleVariableDeclaration[30194-30209]:SingleVariableDeclaration[29678-29693]"
    }, {
      "left" : "MessagingException",
      "right" : "MessagingException",
      "info" : "SimpleType[30218-30236]:SimpleType[29702-29720]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[30238-30249]:SimpleType[29722-29733]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30250-30395]:Block[29734-29879]"
    }, {
      "left" : "executeSimpleCommand(\n                String.format(\"AUTH EXTERNAL %s\",\n                        Base64.encode(username)), false);",
      "right" : "executeSimpleCommand(\n                String.format(\"AUTH EXTERNAL %s\",\n                        Base64.encode(username)), false);",
      "info" : "ExpressionStatement[30260-30389]:ExpressionStatement[29744-29873]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[30514-30520]:Modifier[29998-30004]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[30521-30526]:TYPE_DECLARATION_KIND[30005-30010]"
    }, {
      "left" : "NegativeSmtpReplyException",
      "right" : "NegativeSmtpReplyException",
      "info" : "SimpleName[30527-30553]:SimpleName[30011-30037]"
    }, {
      "left" : "MessagingException",
      "right" : "MessagingException",
      "info" : "SimpleType[30562-30580]:SimpleType[30046-30064]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[30747-30753]:Modifier[30231-30237]"
    }, {
      "left" : "NegativeSmtpReplyException",
      "right" : "NegativeSmtpReplyException",
      "info" : "SimpleName[30754-30780]:SimpleName[30238-30264]"
    }, {
      "left" : "int replyCode",
      "right" : "int replyCode",
      "info" : "SingleVariableDeclaration[30781-30794]:SingleVariableDeclaration[30265-30278]"
    }, {
      "left" : "int replyCode",
      "right" : "int replyCode",
      "info" : "SingleVariableDeclaration[30781-30794]:SingleVariableDeclaration[30542-30555]"
    }, {
      "left" : "String replyText",
      "right" : "String replyText",
      "info" : "SingleVariableDeclaration[30796-30812]:SingleVariableDeclaration[30280-30296]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30814-30971]:Block[30298-30488]"
    }, {
      "left" : "super(\"Negative SMTP reply: \" + replyCode + \" \" + replyText);",
      "right" : "super(\"Negative SMTP reply: \" + replyCode + \" \" + replyText, isPermanentSmtpError(replyCode));",
      "info" : "SuperConstructorInvocation[30828-30889]:SuperConstructorInvocation[30312-30406]"
    }, {
      "left" : "mReplyCode = replyCode;",
      "right" : "mReplyCode = replyCode;",
      "info" : "ExpressionStatement[30902-30925]:ExpressionStatement[30419-30442]"
    }, {
      "left" : "mReplyText = replyText;",
      "right" : "mReplyText = replyText;",
      "info" : "ExpressionStatement[30938-30961]:ExpressionStatement[30455-30478]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[30981-30987]:Modifier[30635-30641]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[30988-30991]:PrimitiveType[30642-30645]"
    }, {
      "left" : "getReplyCode",
      "right" : "getReplyCode",
      "info" : "SimpleName[30992-31004]:SimpleName[30646-30658]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31007-31049]:Block[30661-30703]"
    }, {
      "left" : "return mReplyCode;",
      "right" : "return mReplyCode;",
      "info" : "ReturnStatement[31021-31039]:ReturnStatement[30675-30693]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[31059-31065]:Modifier[30713-30719]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[31066-31072]:SimpleType[30720-30726]"
    }, {
      "left" : "getReplyText",
      "right" : "getReplyText",
      "info" : "SimpleName[31073-31085]:SimpleName[30727-30739]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31088-31130]:Block[30742-30784]"
    }, {
      "left" : "return mReplyText;",
      "right" : "return mReplyText;",
      "info" : "ReturnStatement[31102-31120]:ReturnStatement[30756-30774]"
    } ]
  },
  "interFileMappings" : { }
}