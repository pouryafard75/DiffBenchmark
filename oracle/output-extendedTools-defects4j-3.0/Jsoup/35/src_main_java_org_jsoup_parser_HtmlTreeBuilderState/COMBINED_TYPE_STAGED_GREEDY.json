{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "enum : HtmlTreeBuilderState",
      "right" : "enum : HtmlTreeBuilderState",
      "info" : "EnumDeclaration[194-68482]:EnumDeclaration[194-68562]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[372-1367]:MethodDeclaration[372-1367]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[1400-2250]:MethodDeclaration[1400-2250]"
    }, {
      "left" : "private boolean anythingElse(Token t, HtmlTreeBuilder tb)",
      "right" : "private boolean anythingElse(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[2260-2433]:MethodDeclaration[2260-2433]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[2466-3597]:MethodDeclaration[2466-3597]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[3626-6572]:MethodDeclaration[3626-6572]"
    }, {
      "left" : "private boolean anythingElse(Token t, TreeBuilder tb)",
      "right" : "private boolean anythingElse(Token t, TreeBuilder tb)",
      "info" : "MethodDeclaration[6582-6731]:MethodDeclaration[6582-6731]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[6768-7811]:MethodDeclaration[6768-7811]"
    }, {
      "left" : "private boolean anythingElse(Token t, HtmlTreeBuilder tb)",
      "right" : "private boolean anythingElse(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[7821-8006]:MethodDeclaration[7821-8006]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[8038-9805]:MethodDeclaration[8038-9805]"
    }, {
      "left" : "private boolean anythingElse(Token t, HtmlTreeBuilder tb)",
      "right" : "private boolean anythingElse(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[9815-10003]:MethodDeclaration[9815-10003]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[10032-38745]:MethodDeclaration[10032-38825]"
    }, {
      "left" : "boolean anyOtherEndTag(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean anyOtherEndTag(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[38755-39587]:MethodDeclaration[38835-39667]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[39677-40323]:MethodDeclaration[39757-40403]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[40353-44266]:MethodDeclaration[40433-44346]"
    }, {
      "left" : "boolean anythingElse(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean anythingElse(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[44276-44764]:MethodDeclaration[44356-44844]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[44798-46401]:MethodDeclaration[44878-46481]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[46433-47977]:MethodDeclaration[46513-48057]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[48013-49822]:MethodDeclaration[48093-49902]"
    }, {
      "left" : "private boolean anythingElse(Token t, TreeBuilder tb)",
      "right" : "private boolean anythingElse(Token t, TreeBuilder tb)",
      "info" : "MethodDeclaration[49832-50090]:MethodDeclaration[49912-50170]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[50124-52115]:MethodDeclaration[50204-52195]"
    }, {
      "left" : "private boolean exitTableBody(Token t, HtmlTreeBuilder tb)",
      "right" : "private boolean exitTableBody(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[52125-52576]:MethodDeclaration[52205-52656]"
    }, {
      "left" : "private boolean anythingElse(Token t, HtmlTreeBuilder tb)",
      "right" : "private boolean anythingElse(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[52586-52698]:MethodDeclaration[52666-52778]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[52726-54703]:MethodDeclaration[52806-54783]"
    }, {
      "left" : "private boolean anythingElse(Token t, HtmlTreeBuilder tb)",
      "right" : "private boolean anythingElse(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[54713-54825]:MethodDeclaration[54793-54905]"
    }, {
      "left" : "private boolean handleMissingTr(Token t, TreeBuilder tb)",
      "right" : "private boolean handleMissingTr(Token t, TreeBuilder tb)",
      "info" : "MethodDeclaration[54835-55083]:MethodDeclaration[54915-55163]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[55112-57042]:MethodDeclaration[55192-57122]"
    }, {
      "left" : "private boolean anythingElse(Token t, HtmlTreeBuilder tb)",
      "right" : "private boolean anythingElse(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[57052-57163]:MethodDeclaration[57132-57243]"
    }, {
      "left" : "private void closeCell(HtmlTreeBuilder tb)",
      "right" : "private void closeCell(HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[57173-57421]:MethodDeclaration[57253-57501]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[57452-61250]:MethodDeclaration[57532-61330]"
    }, {
      "left" : "private boolean anythingElse(Token t, HtmlTreeBuilder tb)",
      "right" : "private boolean anythingElse(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[61260-61383]:MethodDeclaration[61340-61463]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[61421-62220]:MethodDeclaration[61501-62300]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[62252-63249]:MethodDeclaration[62332-63329]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[63282-65042]:MethodDeclaration[63362-65122]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[65078-65992]:MethodDeclaration[65158-66072]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[66029-66565]:MethodDeclaration[66109-66645]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[66606-67226]:MethodDeclaration[66686-67306]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[67263-67402]:MethodDeclaration[67343-67482]"
    }, {
      "left" : "private static String nullString = String.valueOf('\\u0000');",
      "right" : "private static String nullString = String.valueOf('\\u0000');",
      "info" : "FieldDeclaration[67415-67475]:FieldDeclaration[67495-67555]"
    }, {
      "left" : "abstract boolean process(Token t, HtmlTreeBuilder tb);",
      "right" : "abstract boolean process(Token t, HtmlTreeBuilder tb);",
      "info" : "MethodDeclaration[67481-67535]:MethodDeclaration[67561-67615]"
    }, {
      "left" : "private static boolean isWhitespace(Token t)",
      "right" : "private static boolean isWhitespace(Token t)",
      "info" : "MethodDeclaration[67541-68004]:MethodDeclaration[67621-68084]"
    }, {
      "left" : "private static void handleRcData(Token.StartTag startTag, HtmlTreeBuilder tb)",
      "right" : "private static void handleRcData(Token.StartTag startTag, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[68010-68241]:MethodDeclaration[68090-68321]"
    }, {
      "left" : "private static void handleRawtext(Token.StartTag startTag, HtmlTreeBuilder tb)",
      "right" : "private static void handleRawtext(Token.StartTag startTag, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[68247-68480]:MethodDeclaration[68327-68560]"
    } ],
    "mappings" : [
 {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[372-379]:PrimitiveType[372-379]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[380-387]:SimpleName[380-387]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[388-395]:SingleVariableDeclaration[388-395]"
    }, {
      "left" : "HtmlTreeBuilder tb",
      "right" : "HtmlTreeBuilder tb",
      "info" : "SingleVariableDeclaration[397-415]:SingleVariableDeclaration[397-415]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[417-1367]:Block[417-1367]"
    }, {
      "left" : "if (isWhitespace(t))",
      "right" : "if (isWhitespace(t))",
      "info" : "IfStatement[431-1332]:IfStatement[431-1332]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[452-517]:Block[452-517]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[470-482]:ReturnStatement[470-482]"
    }, {
      "left" : "if (t.isComment())",
      "right" : "if (t.isComment())",
      "info" : "IfStatement[523-1332]:IfStatement[523-1332]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[542-599]:Block[542-599]"
    }, {
      "left" : "tb.insert(t.asComment());",
      "right" : "tb.insert(t.asComment());",
      "info" : "ExpressionStatement[560-585]:ExpressionStatement[560-585]"
    }, {
      "left" : "if (t.isDoctype())",
      "right" : "if (t.isDoctype())",
      "info" : "IfStatement[605-1332]:IfStatement[605-1332]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[624-1161]:Block[624-1161]"
    }, {
      "left" : "Token.Doctype d = t.asDoctype();",
      "right" : "Token.Doctype d = t.asDoctype();",
      "info" : "VariableDeclarationStatement[764-796]:VariableDeclarationStatement[764-796]"
    }, {
      "left" : "DocumentType doctype = new DocumentType(d.getName(), d.getPublicIdentifier(), d.getSystemIdentifier(), tb.getBaseUri());",
      "right" : "DocumentType doctype = new DocumentType(d.getName(), d.getPublicIdentifier(), d.getSystemIdentifier(), tb.getBaseUri());",
      "info" : "VariableDeclarationStatement[813-933]:VariableDeclarationStatement[813-933]"
    }, {
      "left" : "tb.getDocument().appendChild(doctype);",
      "right" : "tb.getDocument().appendChild(doctype);",
      "info" : "ExpressionStatement[950-988]:ExpressionStatement[950-988]"
    }, {
      "left" : "if (d.isForceQuirks())",
      "right" : "if (d.isForceQuirks())",
      "info" : "IfStatement[1005-1104]:IfStatement[1005-1104]"
    }, {
      "left" : "tb.getDocument().quirksMode(Document.QuirksMode.quirks);",
      "right" : "tb.getDocument().quirksMode(Document.QuirksMode.quirks);",
      "info" : "ExpressionStatement[1048-1104]:ExpressionStatement[1048-1104]"
    }, {
      "left" : "tb.transition(BeforeHtml);",
      "right" : "tb.transition(BeforeHtml);",
      "info" : "ExpressionStatement[1121-1147]:ExpressionStatement[1121-1147]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1167-1332]:Block[1167-1332]"
    }, {
      "left" : "tb.transition(BeforeHtml);",
      "right" : "tb.transition(BeforeHtml);",
      "info" : "ExpressionStatement[1234-1260]:ExpressionStatement[1234-1260]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[1277-1298]:ReturnStatement[1277-1298]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[1345-1357]:ReturnStatement[1345-1357]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[1400-1407]:PrimitiveType[1400-1407]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[1408-1415]:SimpleName[1408-1415]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[1416-1423]:SingleVariableDeclaration[1416-1423]"
    }, {
      "left" : "HtmlTreeBuilder tb",
      "right" : "HtmlTreeBuilder tb",
      "info" : "SingleVariableDeclaration[1425-1443]:SingleVariableDeclaration[1425-1443]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1445-2250]:Block[1445-2250]"
    }, {
      "left" : "if (t.isDoctype())",
      "right" : "if (t.isDoctype())",
      "info" : "IfStatement[1459-2215]:IfStatement[1459-2215]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1478-1555]:Block[1478-1555]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[1496-1511]:ExpressionStatement[1496-1511]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[1528-1541]:ReturnStatement[1528-1541]"
    }, {
      "left" : "if (t.isComment())",
      "right" : "if (t.isComment())",
      "info" : "IfStatement[1561-2215]:IfStatement[1561-2215]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1580-1637]:Block[1580-1637]"
    }, {
      "left" : "tb.insert(t.asComment());",
      "right" : "tb.insert(t.asComment());",
      "info" : "ExpressionStatement[1598-1623]:ExpressionStatement[1598-1623]"
    }, {
      "left" : "if (isWhitespace(t))",
      "right" : "if (isWhitespace(t))",
      "info" : "IfStatement[1643-2215]:IfStatement[1643-2215]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1664-1729]:Block[1664-1729]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[1682-1694]:ReturnStatement[1682-1694]"
    }, {
      "left" : "if (t.isStartTag() && t.asStartTag().name().equals(\"html\"))",
      "right" : "if (t.isStartTag() && t.asStartTag().name().equals(\"html\"))",
      "info" : "IfStatement[1735-2215]:IfStatement[1735-2215]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1795-1896]:Block[1795-1896]"
    }, {
      "left" : "tb.insert(t.asStartTag());",
      "right" : "tb.insert(t.asStartTag());",
      "info" : "ExpressionStatement[1813-1839]:ExpressionStatement[1813-1839]"
    }, {
      "left" : "tb.transition(BeforeHead);",
      "right" : "tb.transition(BeforeHead);",
      "info" : "ExpressionStatement[1856-1882]:ExpressionStatement[1856-1882]"
    }, {
      "left" : "if (t.isEndTag() && (StringUtil.in(t.asEndTag().name(), \"head\", \"body\", \"html\", \"br\")))",
      "right" : "if (t.isEndTag() && (StringUtil.in(t.asEndTag().name(), \"head\", \"body\", \"html\", \"br\")))",
      "info" : "IfStatement[1902-2215]:IfStatement[1902-2215]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1990-2049]:Block[1990-2049]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[2008-2035]:ReturnStatement[2008-2035]"
    }, {
      "left" : "if (t.isEndTag())",
      "right" : "if (t.isEndTag())",
      "info" : "IfStatement[2055-2215]:IfStatement[2055-2215]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2073-2150]:Block[2073-2150]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[2091-2106]:ExpressionStatement[2091-2106]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[2123-2136]:ReturnStatement[2123-2136]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2156-2215]:Block[2156-2215]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[2174-2201]:ReturnStatement[2174-2201]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[2228-2240]:ReturnStatement[2228-2240]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[2260-2267]:Modifier[2260-2267]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[2268-2275]:PrimitiveType[2268-2275]"
    }, {
      "left" : "anythingElse",
      "right" : "anythingElse",
      "info" : "SimpleName[2276-2288]:SimpleName[2276-2288]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[2289-2296]:SingleVariableDeclaration[2289-2296]"
    }, {
      "left" : "HtmlTreeBuilder tb",
      "right" : "HtmlTreeBuilder tb",
      "info" : "SingleVariableDeclaration[2298-2316]:SingleVariableDeclaration[2298-2316]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2318-2433]:Block[2318-2433]"
    }, {
      "left" : "tb.insert(\"html\");",
      "right" : "tb.insert(\"html\");",
      "info" : "ExpressionStatement[2332-2350]:ExpressionStatement[2332-2350]"
    }, {
      "left" : "tb.transition(BeforeHead);",
      "right" : "tb.transition(BeforeHead);",
      "info" : "ExpressionStatement[2363-2389]:ExpressionStatement[2363-2389]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[2402-2423]:ReturnStatement[2402-2423]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[2466-2473]:PrimitiveType[2466-2473]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[2474-2481]:SimpleName[2474-2481]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[2482-2489]:SingleVariableDeclaration[2482-2489]"
    }, {
      "left" : "HtmlTreeBuilder tb",
      "right" : "HtmlTreeBuilder tb",
      "info" : "SingleVariableDeclaration[2491-2509]:SingleVariableDeclaration[2491-2509]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2511-3597]:Block[2511-3597]"
    }, {
      "left" : "if (isWhitespace(t))",
      "right" : "if (isWhitespace(t))",
      "info" : "IfStatement[2525-3562]:IfStatement[2525-3562]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2546-2590]:Block[2546-2590]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[2564-2576]:ReturnStatement[2564-2576]"
    }, {
      "left" : "if (t.isComment())",
      "right" : "if (t.isComment())",
      "info" : "IfStatement[2596-3562]:IfStatement[2596-3562]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2615-2672]:Block[2615-2672]"
    }, {
      "left" : "tb.insert(t.asComment());",
      "right" : "tb.insert(t.asComment());",
      "info" : "ExpressionStatement[2633-2658]:ExpressionStatement[2633-2658]"
    }, {
      "left" : "if (t.isDoctype())",
      "right" : "if (t.isDoctype())",
      "info" : "IfStatement[2678-3562]:IfStatement[2678-3562]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2697-2774]:Block[2697-2774]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[2715-2730]:ExpressionStatement[2715-2730]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[2747-2760]:ReturnStatement[2747-2760]"
    }, {
      "left" : "if (t.isStartTag() && t.asStartTag().name().equals(\"html\"))",
      "right" : "if (t.isStartTag() && t.asStartTag().name().equals(\"html\"))",
      "info" : "IfStatement[2780-3562]:IfStatement[2780-3562]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2840-2924]:Block[2840-2924]"
    }, {
      "left" : "return InBody.process(t, tb);",
      "right" : "return InBody.process(t, tb);",
      "info" : "ReturnStatement[2858-2887]:ReturnStatement[2858-2887]"
    }, {
      "left" : "if (t.isStartTag() && t.asStartTag().name().equals(\"head\"))",
      "right" : "if (t.isStartTag() && t.asStartTag().name().equals(\"head\"))",
      "info" : "IfStatement[2930-3562]:IfStatement[2930-3562]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2990-3143]:Block[2990-3143]"
    }, {
      "left" : "Element head = tb.insert(t.asStartTag());",
      "right" : "Element head = tb.insert(t.asStartTag());",
      "info" : "VariableDeclarationStatement[3008-3049]:VariableDeclarationStatement[3008-3049]"
    }, {
      "left" : "tb.setHeadElement(head);",
      "right" : "tb.setHeadElement(head);",
      "info" : "ExpressionStatement[3066-3090]:ExpressionStatement[3066-3090]"
    }, {
      "left" : "tb.transition(InHead);",
      "right" : "tb.transition(InHead);",
      "info" : "ExpressionStatement[3107-3129]:ExpressionStatement[3107-3129]"
    }, {
      "left" : "if (t.isEndTag() && (StringUtil.in(t.asEndTag().name(), \"head\", \"body\", \"html\", \"br\")))",
      "right" : "if (t.isEndTag() && (StringUtil.in(t.asEndTag().name(), \"head\", \"body\", \"html\", \"br\")))",
      "info" : "IfStatement[3149-3562]:IfStatement[3149-3562]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3237-3346]:Block[3237-3346]"
    }, {
      "left" : "tb.process(new Token.StartTag(\"head\"));",
      "right" : "tb.process(new Token.StartTag(\"head\"));",
      "info" : "ExpressionStatement[3255-3294]:ExpressionStatement[3255-3294]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[3311-3332]:ReturnStatement[3311-3332]"
    }, {
      "left" : "if (t.isEndTag())",
      "right" : "if (t.isEndTag())",
      "info" : "IfStatement[3352-3562]:IfStatement[3352-3562]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3370-3447]:Block[3370-3447]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[3388-3403]:ExpressionStatement[3388-3403]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[3420-3433]:ReturnStatement[3420-3433]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3453-3562]:Block[3453-3562]"
    }, {
      "left" : "tb.process(new Token.StartTag(\"head\"));",
      "right" : "tb.process(new Token.StartTag(\"head\"));",
      "info" : "ExpressionStatement[3471-3510]:ExpressionStatement[3471-3510]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[3527-3548]:ReturnStatement[3527-3548]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[3575-3587]:ReturnStatement[3575-3587]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[3626-3633]:PrimitiveType[3626-3633]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[3634-3641]:SimpleName[3634-3641]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[3642-3649]:SingleVariableDeclaration[3642-3649]"
    }, {
      "left" : "HtmlTreeBuilder tb",
      "right" : "HtmlTreeBuilder tb",
      "info" : "SingleVariableDeclaration[3651-3669]:SingleVariableDeclaration[3651-3669]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3671-6572]:Block[3671-6572]"
    }, {
      "left" : "if (isWhitespace(t))",
      "right" : "if (isWhitespace(t))",
      "info" : "IfStatement[3685-3794]:IfStatement[3685-3794]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3706-3794]:Block[3706-3794]"
    }, {
      "left" : "tb.insert(t.asCharacter());",
      "right" : "tb.insert(t.asCharacter());",
      "info" : "ExpressionStatement[3724-3751]:ExpressionStatement[3724-3751]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[3768-3780]:ReturnStatement[3768-3780]"
    }, {
      "left" : "switch (t.type) {\n                case Comment:\n                    tb.insert(t.asComment());\n                    break;\n                case Doctype:\n                    tb.error(this);\n                    return false;\n                case StartTag:\n                    Token.StartTag start = t.asStartTag();\n                    String name = start.name();\n                    if (name.equals(\"html\")) {\n                        return InBody.process(t, tb);\n                    } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\")) {\n                        Element el = tb.insertEmpty(start);\n                        // jsoup special: update base the frist time it is seen\n                        if (name.equals(\"base\") && el.hasAttr(\"href\"))\n                            tb.maybeSetBaseUri(el);\n                    } else if (name.equals(\"meta\")) {\n                        Element meta = tb.insertEmpty(start);\n                        // todo: charset switches\n                    } else if (name.equals(\"title\")) {\n                        handleRcData(start, tb);\n                    } else if (StringUtil.in(name, \"noframes\", \"style\")) {\n                        handleRawtext(start, tb);\n                    } else if (name.equals(\"noscript\")) {\n                        // else if noscript && scripting flag = true: rawtext (jsoup doesn't run script, to handle as noscript)\n                        tb.insert(start);\n                        tb.transition(InHeadNoscript);\n                    } else if (name.equals(\"script\")) {\n                        // skips some script rules as won't execute them\n\n                        tb.tokeniser.transition(TokeniserState.ScriptData);\n                        tb.markInsertionMode();\n                        tb.transition(Text);\n                        tb.insert(start);\n                    } else if (name.equals(\"head\")) {\n                        tb.error(this);\n                        return false;\n                    } else {\n                        return anythingElse(t, tb);\n                    }\n                    break;\n                case EndTag:\n                    Token.EndTag end = t.asEndTag();\n                    name = end.name();\n                    if (name.equals(\"head\")) {\n                        tb.pop();\n                        tb.transition(AfterHead);\n                    } else if (StringUtil.in(name, \"body\", \"html\", \"br\")) {\n                        return anythingElse(t, tb);\n                    } else {\n                        tb.error(this);\n                        return false;\n                    }\n                    break;\n                default:\n                    return anythingElse(t, tb);\n            }",
      "right" : "switch (t.type) {\n                case Comment:\n                    tb.insert(t.asComment());\n                    break;\n                case Doctype:\n                    tb.error(this);\n                    return false;\n                case StartTag:\n                    Token.StartTag start = t.asStartTag();\n                    String name = start.name();\n                    if (name.equals(\"html\")) {\n                        return InBody.process(t, tb);\n                    } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\")) {\n                        Element el = tb.insertEmpty(start);\n                        // jsoup special: update base the frist time it is seen\n                        if (name.equals(\"base\") && el.hasAttr(\"href\"))\n                            tb.maybeSetBaseUri(el);\n                    } else if (name.equals(\"meta\")) {\n                        Element meta = tb.insertEmpty(start);\n                        // todo: charset switches\n                    } else if (name.equals(\"title\")) {\n                        handleRcData(start, tb);\n                    } else if (StringUtil.in(name, \"noframes\", \"style\")) {\n                        handleRawtext(start, tb);\n                    } else if (name.equals(\"noscript\")) {\n                        // else if noscript && scripting flag = true: rawtext (jsoup doesn't run script, to handle as noscript)\n                        tb.insert(start);\n                        tb.transition(InHeadNoscript);\n                    } else if (name.equals(\"script\")) {\n                        // skips some script rules as won't execute them\n\n                        tb.tokeniser.transition(TokeniserState.ScriptData);\n                        tb.markInsertionMode();\n                        tb.transition(Text);\n                        tb.insert(start);\n                    } else if (name.equals(\"head\")) {\n                        tb.error(this);\n                        return false;\n                    } else {\n                        return anythingElse(t, tb);\n                    }\n                    break;\n                case EndTag:\n                    Token.EndTag end = t.asEndTag();\n                    name = end.name();\n                    if (name.equals(\"head\")) {\n                        tb.pop();\n                        tb.transition(AfterHead);\n                    } else if (StringUtil.in(name, \"body\", \"html\", \"br\")) {\n                        return anythingElse(t, tb);\n                    } else {\n                        tb.error(this);\n                        return false;\n                    }\n                    break;\n                default:\n                    return anythingElse(t, tb);\n            }",
      "info" : "SwitchStatement[3807-6537]:SwitchStatement[3807-6537]"
    }, {
      "left" : "case Comment:",
      "right" : "case Comment:",
      "info" : "SwitchCase[3841-3854]:SwitchCase[3841-3854]"
    }, {
      "left" : "tb.insert(t.asComment());",
      "right" : "tb.insert(t.asComment());",
      "info" : "ExpressionStatement[3875-3900]:ExpressionStatement[3875-3900]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[3921-3927]:BreakStatement[3921-3927]"
    }, {
      "left" : "case Doctype:",
      "right" : "case Doctype:",
      "info" : "SwitchCase[3944-3957]:SwitchCase[3944-3957]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[3978-3993]:ExpressionStatement[3978-3993]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[4014-4027]:ReturnStatement[4014-4027]"
    }, {
      "left" : "case StartTag:",
      "right" : "case StartTag:",
      "info" : "SwitchCase[4044-4058]:SwitchCase[4044-4058]"
    }, {
      "left" : "Token.StartTag start = t.asStartTag();",
      "right" : "Token.StartTag start = t.asStartTag();",
      "info" : "VariableDeclarationStatement[4079-4117]:VariableDeclarationStatement[4079-4117]"
    }, {
      "left" : "String name = start.name();",
      "right" : "String name = start.name();",
      "info" : "VariableDeclarationStatement[4138-4165]:VariableDeclarationStatement[4138-4165]"
    }, {
      "left" : "if (name.equals(\"html\"))",
      "right" : "if (name.equals(\"html\"))",
      "info" : "IfStatement[4186-5887]:IfStatement[4186-5887]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4211-4288]:Block[4211-4288]"
    }, {
      "left" : "return InBody.process(t, tb);",
      "right" : "return InBody.process(t, tb);",
      "info" : "ReturnStatement[4237-4266]:ReturnStatement[4237-4266]"
    }, {
      "left" : "if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\"))",
      "right" : "if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\"))",
      "info" : "IfStatement[4294-5887]:IfStatement[4294-5887]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4369-4655]:Block[4369-4655]"
    }, {
      "left" : "Element el = tb.insertEmpty(start);",
      "right" : "Element el = tb.insertEmpty(start);",
      "info" : "VariableDeclarationStatement[4395-4430]:VariableDeclarationStatement[4395-4430]"
    }, {
      "left" : "if (name.equals(\"base\") && el.hasAttr(\"href\"))",
      "right" : "if (name.equals(\"base\") && el.hasAttr(\"href\"))",
      "info" : "IfStatement[4535-4633]:IfStatement[4535-4633]"
    }, {
      "left" : "tb.maybeSetBaseUri(el);",
      "right" : "tb.maybeSetBaseUri(el);",
      "info" : "ExpressionStatement[4610-4633]:ExpressionStatement[4610-4633]"
    }, {
      "left" : "if (name.equals(\"meta\"))",
      "right" : "if (name.equals(\"meta\"))",
      "info" : "IfStatement[4661-5887]:IfStatement[4661-5887]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4686-4821]:Block[4686-4821]"
    }, {
      "left" : "Element meta = tb.insertEmpty(start);",
      "right" : "Element meta = tb.insertEmpty(start);",
      "info" : "VariableDeclarationStatement[4712-4749]:VariableDeclarationStatement[4712-4749]"
    }, {
      "left" : "if (name.equals(\"title\"))",
      "right" : "if (name.equals(\"title\"))",
      "info" : "IfStatement[4827-5887]:IfStatement[4827-5887]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4853-4925]:Block[4853-4925]"
    }, {
      "left" : "handleRcData(start, tb);",
      "right" : "handleRcData(start, tb);",
      "info" : "ExpressionStatement[4879-4903]:ExpressionStatement[4879-4903]"
    }, {
      "left" : "if (StringUtil.in(name, \"noframes\", \"style\"))",
      "right" : "if (StringUtil.in(name, \"noframes\", \"style\"))",
      "info" : "IfStatement[4931-5887]:IfStatement[4931-5887]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4977-5050]:Block[4977-5050]"
    }, {
      "left" : "handleRawtext(start, tb);",
      "right" : "handleRawtext(start, tb);",
      "info" : "ExpressionStatement[5003-5028]:ExpressionStatement[5003-5028]"
    }, {
      "left" : "if (name.equals(\"noscript\"))",
      "right" : "if (name.equals(\"noscript\"))",
      "info" : "IfStatement[5056-5887]:IfStatement[5056-5887]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5085-5333]:Block[5085-5333]"
    }, {
      "left" : "tb.insert(start);",
      "right" : "tb.insert(start);",
      "info" : "ExpressionStatement[5239-5256]:ExpressionStatement[5239-5256]"
    }, {
      "left" : "tb.transition(InHeadNoscript);",
      "right" : "tb.transition(InHeadNoscript);",
      "info" : "ExpressionStatement[5281-5311]:ExpressionStatement[5281-5311]"
    }, {
      "left" : "if (name.equals(\"script\"))",
      "right" : "if (name.equals(\"script\"))",
      "info" : "IfStatement[5339-5887]:IfStatement[5339-5887]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5366-5674]:Block[5366-5674]"
    }, {
      "left" : "tb.tokeniser.transition(TokeniserState.ScriptData);",
      "right" : "tb.tokeniser.transition(TokeniserState.ScriptData);",
      "info" : "ExpressionStatement[5466-5517]:ExpressionStatement[5466-5517]"
    }, {
      "left" : "tb.markInsertionMode();",
      "right" : "tb.markInsertionMode();",
      "info" : "ExpressionStatement[5542-5565]:ExpressionStatement[5542-5565]"
    }, {
      "left" : "tb.transition(Text);",
      "right" : "tb.transition(Text);",
      "info" : "ExpressionStatement[5590-5610]:ExpressionStatement[5590-5610]"
    }, {
      "left" : "tb.insert(start);",
      "right" : "tb.insert(start);",
      "info" : "ExpressionStatement[5635-5652]:ExpressionStatement[5635-5652]"
    }, {
      "left" : "if (name.equals(\"head\"))",
      "right" : "if (name.equals(\"head\"))",
      "info" : "IfStatement[5680-5887]:IfStatement[5680-5887]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5705-5806]:Block[5705-5806]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[5731-5746]:ExpressionStatement[5731-5746]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[5771-5784]:ReturnStatement[5771-5784]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5812-5887]:Block[5812-5887]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[5838-5865]:ReturnStatement[5838-5865]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[5908-5914]:BreakStatement[5908-5914]"
    }, {
      "left" : "case EndTag:",
      "right" : "case EndTag:",
      "info" : "SwitchCase[5931-5943]:SwitchCase[5931-5943]"
    }, {
      "left" : "Token.EndTag end = t.asEndTag();",
      "right" : "Token.EndTag end = t.asEndTag();",
      "info" : "VariableDeclarationStatement[5964-5996]:VariableDeclarationStatement[5964-5996]"
    }, {
      "left" : "name = end.name();",
      "right" : "name = end.name();",
      "info" : "ExpressionStatement[6017-6035]:ExpressionStatement[6017-6035]"
    }, {
      "left" : "if (name.equals(\"head\"))",
      "right" : "if (name.equals(\"head\"))",
      "info" : "IfStatement[6056-6423]:IfStatement[6056-6423]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6081-6188]:Block[6081-6188]"
    }, {
      "left" : "tb.pop();",
      "right" : "tb.pop();",
      "info" : "ExpressionStatement[6107-6116]:ExpressionStatement[6107-6116]"
    }, {
      "left" : "tb.transition(AfterHead);",
      "right" : "tb.transition(AfterHead);",
      "info" : "ExpressionStatement[6141-6166]:ExpressionStatement[6141-6166]"
    }, {
      "left" : "if (StringUtil.in(name, \"body\", \"html\", \"br\"))",
      "right" : "if (StringUtil.in(name, \"body\", \"html\", \"br\"))",
      "info" : "IfStatement[6194-6423]:IfStatement[6194-6423]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6241-6316]:Block[6241-6316]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[6267-6294]:ReturnStatement[6267-6294]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6322-6423]:Block[6322-6423]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[6348-6363]:ExpressionStatement[6348-6363]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[6388-6401]:ReturnStatement[6388-6401]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[6444-6450]:BreakStatement[6444-6450]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[6467-6475]:SwitchCase[6467-6475]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[6496-6523]:ReturnStatement[6496-6523]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[6550-6562]:ReturnStatement[6550-6562]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[6582-6589]:Modifier[6582-6589]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[6590-6597]:PrimitiveType[6590-6597]"
    }, {
      "left" : "anythingElse",
      "right" : "anythingElse",
      "info" : "SimpleName[6598-6610]:SimpleName[6598-6610]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[6611-6618]:SingleVariableDeclaration[6611-6618]"
    }, {
      "left" : "TreeBuilder tb",
      "right" : "TreeBuilder tb",
      "info" : "SingleVariableDeclaration[6620-6634]:SingleVariableDeclaration[6620-6634]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6636-6731]:Block[6636-6731]"
    }, {
      "left" : "tb.process(new Token.EndTag(\"head\"));",
      "right" : "tb.process(new Token.EndTag(\"head\"));",
      "info" : "ExpressionStatement[6650-6687]:ExpressionStatement[6650-6687]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[6700-6721]:ReturnStatement[6700-6721]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[6768-6775]:PrimitiveType[6768-6775]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[6776-6783]:SimpleName[6776-6783]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[6784-6791]:SingleVariableDeclaration[6784-6791]"
    }, {
      "left" : "HtmlTreeBuilder tb",
      "right" : "HtmlTreeBuilder tb",
      "info" : "SingleVariableDeclaration[6793-6811]:SingleVariableDeclaration[6793-6811]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6813-7811]:Block[6813-7811]"
    }, {
      "left" : "if (t.isDoctype())",
      "right" : "if (t.isDoctype())",
      "info" : "IfStatement[6827-7776]:IfStatement[6827-7776]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6846-6893]:Block[6846-6893]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[6864-6879]:ExpressionStatement[6864-6879]"
    }, {
      "left" : "if (t.isStartTag() && t.asStartTag().name().equals(\"html\"))",
      "right" : "if (t.isStartTag() && t.asStartTag().name().equals(\"html\"))",
      "info" : "IfStatement[6899-7776]:IfStatement[6899-7776]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6959-7020]:Block[6959-7020]"
    }, {
      "left" : "return tb.process(t, InBody);",
      "right" : "return tb.process(t, InBody);",
      "info" : "ReturnStatement[6977-7006]:ReturnStatement[6977-7006]"
    }, {
      "left" : "if (t.isEndTag() && t.asEndTag().name().equals(\"noscript\"))",
      "right" : "if (t.isEndTag() && t.asEndTag().name().equals(\"noscript\"))",
      "info" : "IfStatement[7026-7776]:IfStatement[7026-7776]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7086-7166]:Block[7086-7166]"
    }, {
      "left" : "tb.pop();",
      "right" : "tb.pop();",
      "info" : "ExpressionStatement[7104-7113]:ExpressionStatement[7104-7113]"
    }, {
      "left" : "tb.transition(InHead);",
      "right" : "tb.transition(InHead);",
      "info" : "ExpressionStatement[7130-7152]:ExpressionStatement[7130-7152]"
    }, {
      "left" : "if (isWhitespace(t) || t.isComment() || (t.isStartTag() && StringUtil.in(t.asStartTag().name(),\n                    \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"style\")))",
      "right" : "if (isWhitespace(t) || t.isComment() || (t.isStartTag() && StringUtil.in(t.asStartTag().name(),\n                    \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"style\")))",
      "info" : "IfStatement[7172-7776]:IfStatement[7172-7776]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7350-7411]:Block[7350-7411]"
    }, {
      "left" : "return tb.process(t, InHead);",
      "right" : "return tb.process(t, InHead);",
      "info" : "ReturnStatement[7368-7397]:ReturnStatement[7368-7397]"
    }, {
      "left" : "if (t.isEndTag() && t.asEndTag().name().equals(\"br\"))",
      "right" : "if (t.isEndTag() && t.asEndTag().name().equals(\"br\"))",
      "info" : "IfStatement[7417-7776]:IfStatement[7417-7776]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7471-7530]:Block[7471-7530]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[7489-7516]:ReturnStatement[7489-7516]"
    }, {
      "left" : "if ((t.isStartTag() && StringUtil.in(t.asStartTag().name(), \"head\", \"noscript\")) || t.isEndTag())",
      "right" : "if ((t.isStartTag() && StringUtil.in(t.asStartTag().name(), \"head\", \"noscript\")) || t.isEndTag())",
      "info" : "IfStatement[7536-7776]:IfStatement[7536-7776]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7634-7711]:Block[7634-7711]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[7652-7667]:ExpressionStatement[7652-7667]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[7684-7697]:ReturnStatement[7684-7697]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7717-7776]:Block[7717-7776]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[7735-7762]:ReturnStatement[7735-7762]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[7789-7801]:ReturnStatement[7789-7801]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[7821-7828]:Modifier[7821-7828]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[7829-7836]:PrimitiveType[7829-7836]"
    }, {
      "left" : "anythingElse",
      "right" : "anythingElse",
      "info" : "SimpleName[7837-7849]:SimpleName[7837-7849]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[7850-7857]:SingleVariableDeclaration[7850-7857]"
    }, {
      "left" : "HtmlTreeBuilder tb",
      "right" : "HtmlTreeBuilder tb",
      "info" : "SingleVariableDeclaration[7859-7877]:SingleVariableDeclaration[7859-7877]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7879-8006]:Block[7879-8006]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[7893-7908]:ExpressionStatement[7893-7908]"
    }, {
      "left" : "tb.process(new Token.EndTag(\"noscript\"));",
      "right" : "tb.process(new Token.EndTag(\"noscript\"));",
      "info" : "ExpressionStatement[7921-7962]:ExpressionStatement[7921-7962]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[7975-7996]:ReturnStatement[7975-7996]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[8038-8045]:PrimitiveType[8038-8045]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[8046-8053]:SimpleName[8046-8053]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[8054-8061]:SingleVariableDeclaration[8054-8061]"
    }, {
      "left" : "HtmlTreeBuilder tb",
      "right" : "HtmlTreeBuilder tb",
      "info" : "SingleVariableDeclaration[8063-8081]:SingleVariableDeclaration[8063-8081]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8083-9805]:Block[8083-9805]"
    }, {
      "left" : "if (isWhitespace(t))",
      "right" : "if (isWhitespace(t))",
      "info" : "IfStatement[8097-9770]:IfStatement[8097-9770]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8118-8177]:Block[8118-8177]"
    }, {
      "left" : "tb.insert(t.asCharacter());",
      "right" : "tb.insert(t.asCharacter());",
      "info" : "ExpressionStatement[8136-8163]:ExpressionStatement[8136-8163]"
    }, {
      "left" : "if (t.isComment())",
      "right" : "if (t.isComment())",
      "info" : "IfStatement[8183-9770]:IfStatement[8183-9770]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8202-8259]:Block[8202-8259]"
    }, {
      "left" : "tb.insert(t.asComment());",
      "right" : "tb.insert(t.asComment());",
      "info" : "ExpressionStatement[8220-8245]:ExpressionStatement[8220-8245]"
    }, {
      "left" : "if (t.isDoctype())",
      "right" : "if (t.isDoctype())",
      "info" : "IfStatement[8265-9770]:IfStatement[8265-9770]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8284-8331]:Block[8284-8331]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[8302-8317]:ExpressionStatement[8302-8317]"
    }, {
      "left" : "if (t.isStartTag())",
      "right" : "if (t.isStartTag())",
      "info" : "IfStatement[8337-9770]:IfStatement[8337-9770]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8357-9445]:Block[8357-9445]"
    }, {
      "left" : "Token.StartTag startTag = t.asStartTag();",
      "right" : "Token.StartTag startTag = t.asStartTag();",
      "info" : "VariableDeclarationStatement[8375-8416]:VariableDeclarationStatement[8375-8416]"
    }, {
      "left" : "String name = startTag.name();",
      "right" : "String name = startTag.name();",
      "info" : "VariableDeclarationStatement[8433-8463]:VariableDeclarationStatement[8433-8463]"
    }, {
      "left" : "if (name.equals(\"html\"))",
      "right" : "if (name.equals(\"html\"))",
      "info" : "IfStatement[8480-9431]:IfStatement[8480-9431]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8505-8574]:Block[8505-8574]"
    }, {
      "left" : "return tb.process(t, InBody);",
      "right" : "return tb.process(t, InBody);",
      "info" : "ReturnStatement[8527-8556]:ReturnStatement[8527-8556]"
    }, {
      "left" : "if (name.equals(\"body\"))",
      "right" : "if (name.equals(\"body\"))",
      "info" : "IfStatement[8580-9431]:IfStatement[8580-9431]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8605-8750]:Block[8605-8750]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[8627-8647]:ExpressionStatement[8627-8647]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[8668-8689]:ExpressionStatement[8668-8689]"
    }, {
      "left" : "tb.transition(InBody);",
      "right" : "tb.transition(InBody);",
      "info" : "ExpressionStatement[8710-8732]:ExpressionStatement[8710-8732]"
    }, {
      "left" : "if (name.equals(\"frameset\"))",
      "right" : "if (name.equals(\"frameset\"))",
      "info" : "IfStatement[8756-9431]:IfStatement[8756-9431]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8785-8892]:Block[8785-8892]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[8807-8827]:ExpressionStatement[8807-8827]"
    }, {
      "left" : "tb.transition(InFrameset);",
      "right" : "tb.transition(InFrameset);",
      "info" : "ExpressionStatement[8848-8874]:ExpressionStatement[8848-8874]"
    }, {
      "left" : "if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\"))",
      "right" : "if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\"))",
      "info" : "IfStatement[8898-9431]:IfStatement[8898-9431]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9010-9245]:Block[9010-9245]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[9032-9047]:ExpressionStatement[9032-9047]"
    }, {
      "left" : "Element head = tb.getHeadElement();",
      "right" : "Element head = tb.getHeadElement();",
      "info" : "VariableDeclarationStatement[9068-9103]:VariableDeclarationStatement[9068-9103]"
    }, {
      "left" : "tb.push(head);",
      "right" : "tb.push(head);",
      "info" : "ExpressionStatement[9124-9138]:ExpressionStatement[9124-9138]"
    }, {
      "left" : "tb.process(t, InHead);",
      "right" : "tb.process(t, InHead);",
      "info" : "ExpressionStatement[9159-9181]:ExpressionStatement[9159-9181]"
    }, {
      "left" : "tb.removeFromStack(head);",
      "right" : "tb.removeFromStack(head);",
      "info" : "ExpressionStatement[9202-9227]:ExpressionStatement[9202-9227]"
    }, {
      "left" : "if (name.equals(\"head\"))",
      "right" : "if (name.equals(\"head\"))",
      "info" : "IfStatement[9251-9431]:IfStatement[9251-9431]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9276-9365]:Block[9276-9365]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[9298-9313]:ExpressionStatement[9298-9313]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[9334-9347]:ReturnStatement[9334-9347]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9371-9431]:Block[9371-9431]"
    }, {
      "left" : "anythingElse(t, tb);",
      "right" : "anythingElse(t, tb);",
      "info" : "ExpressionStatement[9393-9413]:ExpressionStatement[9393-9413]"
    }, {
      "left" : "if (t.isEndTag())",
      "right" : "if (t.isEndTag())",
      "info" : "IfStatement[9451-9770]:IfStatement[9451-9770]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9469-9712]:Block[9469-9712]"
    }, {
      "left" : "if (StringUtil.in(t.asEndTag().name(), \"body\", \"html\"))",
      "right" : "if (StringUtil.in(t.asEndTag().name(), \"body\", \"html\"))",
      "info" : "IfStatement[9487-9698]:IfStatement[9487-9698]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9543-9603]:Block[9543-9603]"
    }, {
      "left" : "anythingElse(t, tb);",
      "right" : "anythingElse(t, tb);",
      "info" : "ExpressionStatement[9565-9585]:ExpressionStatement[9565-9585]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9609-9698]:Block[9609-9698]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[9631-9646]:ExpressionStatement[9631-9646]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[9667-9680]:ReturnStatement[9667-9680]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9718-9770]:Block[9718-9770]"
    }, {
      "left" : "anythingElse(t, tb);",
      "right" : "anythingElse(t, tb);",
      "info" : "ExpressionStatement[9736-9756]:ExpressionStatement[9736-9756]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[9783-9795]:ReturnStatement[9783-9795]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[9815-9822]:Modifier[9815-9822]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[9823-9830]:PrimitiveType[9823-9830]"
    }, {
      "left" : "anythingElse",
      "right" : "anythingElse",
      "info" : "SimpleName[9831-9843]:SimpleName[9831-9843]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[9844-9851]:SingleVariableDeclaration[9844-9851]"
    }, {
      "left" : "HtmlTreeBuilder tb",
      "right" : "HtmlTreeBuilder tb",
      "info" : "SingleVariableDeclaration[9853-9871]:SingleVariableDeclaration[9853-9871]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9873-10003]:Block[9873-10003]"
    }, {
      "left" : "tb.process(new Token.StartTag(\"body\"));",
      "right" : "tb.process(new Token.StartTag(\"body\"));",
      "info" : "ExpressionStatement[9887-9926]:ExpressionStatement[9887-9926]"
    }, {
      "left" : "tb.framesetOk(true);",
      "right" : "tb.framesetOk(true);",
      "info" : "ExpressionStatement[9939-9959]:ExpressionStatement[9939-9959]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[9972-9993]:ReturnStatement[9972-9993]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[10048-10055]:SingleVariableDeclaration[10048-10055]"
    }, {
      "left" : "HtmlTreeBuilder tb",
      "right" : "HtmlTreeBuilder tb",
      "info" : "SingleVariableDeclaration[10057-10075]:SingleVariableDeclaration[10057-10075]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10077-38745]:Block[10077-38825]"
    }, {
      "left" : "switch (t.type) {\n                case Character: {\n                    Token.Character c = t.asCharacter();\n                    if (c.getData().equals(nullString)) {\n                        // todo confirm that check\n                        tb.error(this);\n                        return false;\n                    } else if (isWhitespace(c)) {\n                        tb.reconstructFormattingElements();\n                        tb.insert(c);\n                    } else {\n                        tb.reconstructFormattingElements();\n                        tb.insert(c);\n                        tb.framesetOk(false);\n                    }\n                    break;\n                }\n                case Comment: {\n                    tb.insert(t.asComment());\n                    break;\n                }\n                case Doctype: {\n                    tb.error(this);\n                    return false;\n                }\n                case StartTag:\n                    Token.StartTag startTag = t.asStartTag();\n                    String name = startTag.name();\n                    if (name.equals(\"html\")) {\n                        tb.error(this);\n                        // merge attributes onto real html\n                        Element html = tb.getStack().getFirst();\n                        for (Attribute attribute : startTag.getAttributes()) {\n                            if (!html.hasAttr(attribute.getKey()))\n                                html.attributes().put(attribute);\n                        }\n                    } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\")) {\n                        return tb.process(t, InHead);\n                    } else if (name.equals(\"body\")) {\n                        tb.error(this);\n                        LinkedList<Element> stack = tb.getStack();\n                        if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) {\n                            // only in fragment case\n                            return false; // ignore\n                        } else {\n                            tb.framesetOk(false);\n                            Element body = stack.get(1);\n                            for (Attribute attribute : startTag.getAttributes()) {\n                                if (!body.hasAttr(attribute.getKey()))\n                                    body.attributes().put(attribute);\n                            }\n                        }\n                    } else if (name.equals(\"frameset\")) {\n                        tb.error(this);\n                        LinkedList<Element> stack = tb.getStack();\n                        if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) {\n                            // only in fragment case\n                            return false; // ignore\n                        } else if (!tb.framesetOk()) {\n                            return false; // ignore frameset\n                        } else {\n                            Element second = stack.get(1);\n                            if (second.parent() != null)\n                                second.remove();\n                            // pop up to html element\n                            while (stack.size() > 1)\n                                stack.removeLast();\n                            tb.insert(startTag);\n                            tb.transition(InFrameset);\n                        }\n                    } else if (StringUtil.in(name,\n                            \"address\", \"article\", \"aside\", \"blockquote\", \"center\", \"details\", \"dir\", \"div\", \"dl\",\n                            \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"menu\", \"nav\", \"ol\",\n                            \"p\", \"section\", \"summary\", \"ul\")) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.process(new Token.EndTag(\"p\"));\n                        }\n                        tb.insert(startTag);\n                    } else if (StringUtil.in(name, \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\")) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.process(new Token.EndTag(\"p\"));\n                        }\n                        if (StringUtil.in(tb.currentElement().nodeName(), \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\")) {\n                            tb.error(this);\n                            tb.pop();\n                        }\n                        tb.insert(startTag);\n                    } else if (StringUtil.in(name, \"pre\", \"listing\")) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.process(new Token.EndTag(\"p\"));\n                        }\n                        tb.insert(startTag);\n                        // todo: ignore LF if next token\n                        tb.framesetOk(false);\n                    } else if (name.equals(\"form\")) {\n                        if (tb.getFormElement() != null) {\n                            tb.error(this);\n                            return false;\n                        }\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.process(new Token.EndTag(\"p\"));\n                        }\n                        tb.insertForm(startTag, true);\n                    } else if (name.equals(\"li\")) {\n                        tb.framesetOk(false);\n                        LinkedList<Element> stack = tb.getStack();\n                        for (int i = stack.size() - 1; i > 0; i--) {\n                            Element el = stack.get(i);\n                            if (el.nodeName().equals(\"li\")) {\n                                tb.process(new Token.EndTag(\"li\"));\n                                break;\n                            }\n                            if (tb.isSpecial(el) && !StringUtil.in(el.nodeName(), \"address\", \"div\", \"p\"))\n                                break;\n                        }\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.process(new Token.EndTag(\"p\"));\n                        }\n                        tb.insert(startTag);\n                    } else if (StringUtil.in(name, \"dd\", \"dt\")) {\n                        tb.framesetOk(false);\n                        LinkedList<Element> stack = tb.getStack();\n                        for (int i = stack.size() - 1; i > 0; i--) {\n                            Element el = stack.get(i);\n                            if (StringUtil.in(el.nodeName(), \"dd\", \"dt\")) {\n                                tb.process(new Token.EndTag(el.nodeName()));\n                                break;\n                            }\n                            if (tb.isSpecial(el) && !StringUtil.in(el.nodeName(), \"address\", \"div\", \"p\"))\n                                break;\n                        }\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.process(new Token.EndTag(\"p\"));\n                        }\n                        tb.insert(startTag);\n                    } else if (name.equals(\"plaintext\")) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.process(new Token.EndTag(\"p\"));\n                        }\n                        tb.insert(startTag);\n                        tb.tokeniser.transition(TokeniserState.PLAINTEXT); // once in, never gets out\n                    } else if (name.equals(\"button\")) {\n                        if (tb.inButtonScope(\"button\")) {\n                            // close and reprocess\n                            tb.error(this);\n                            tb.process(new Token.EndTag(\"button\"));\n                            tb.process(startTag);\n                        } else {\n                            tb.reconstructFormattingElements();\n                            tb.insert(startTag);\n                            tb.framesetOk(false);\n                        }\n                    } else if (name.equals(\"a\")) {\n                        if (tb.getActiveFormattingElement(\"a\") != null) {\n                            tb.error(this);\n                            tb.process(new Token.EndTag(\"a\"));\n\n                            // still on stack?\n                            Element remainingA = tb.getFromStack(\"a\");\n                            if (remainingA != null) {\n                                tb.removeFromActiveFormattingElements(remainingA);\n                                tb.removeFromStack(remainingA);\n                            }\n                        }\n                        tb.reconstructFormattingElements();\n                        Element a = tb.insert(startTag);\n                        tb.pushActiveFormattingElements(a);\n                    } else if (StringUtil.in(name,\n                            \"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\")) {\n                        tb.reconstructFormattingElements();\n                        Element el = tb.insert(startTag);\n                        tb.pushActiveFormattingElements(el);\n                    } else if (name.equals(\"nobr\")) {\n                        tb.reconstructFormattingElements();\n                        if (tb.inScope(\"nobr\")) {\n                            tb.error(this);\n                            tb.process(new Token.EndTag(\"nobr\"));\n                            tb.reconstructFormattingElements();\n                        }\n                        Element el = tb.insert(startTag);\n                        tb.pushActiveFormattingElements(el);\n                    } else if (StringUtil.in(name, \"applet\", \"marquee\", \"object\")) {\n                        tb.reconstructFormattingElements();\n                        tb.insert(startTag);\n                        tb.insertMarkerToFormattingElements();\n                        tb.framesetOk(false);\n                    } else if (name.equals(\"table\")) {\n                        if (tb.getDocument().quirksMode() != Document.QuirksMode.quirks && tb.inButtonScope(\"p\")) {\n                            tb.process(new Token.EndTag(\"p\"));\n                        }\n                        tb.insert(startTag);\n                        tb.framesetOk(false);\n                        tb.transition(InTable);\n                    } else if (StringUtil.in(name, \"area\", \"br\", \"embed\", \"img\", \"keygen\", \"wbr\")) {\n                        tb.reconstructFormattingElements();\n                        tb.insertEmpty(startTag);\n                        tb.framesetOk(false);\n                    } else if (name.equals(\"input\")) {\n                        tb.reconstructFormattingElements();\n                        Element el = tb.insertEmpty(startTag);\n                        if (!el.attr(\"type\").equalsIgnoreCase(\"hidden\"))\n                            tb.framesetOk(false);\n                    } else if (StringUtil.in(name, \"param\", \"source\", \"track\")) {\n                        tb.insertEmpty(startTag);\n                    } else if (name.equals(\"hr\")) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.process(new Token.EndTag(\"p\"));\n                        }\n                        tb.insertEmpty(startTag);\n                        tb.framesetOk(false);\n                    } else if (name.equals(\"image\")) {\n                        // we're not supposed to ask.\n                        startTag.name(\"img\");\n                        return tb.process(startTag);\n                    } else if (name.equals(\"isindex\")) {\n                        // how much do we care about the early 90s?\n                        tb.error(this);\n                        if (tb.getFormElement() != null)\n                            return false;\n\n                        tb.tokeniser.acknowledgeSelfClosingFlag();\n                        tb.process(new Token.StartTag(\"form\"));\n                        if (startTag.attributes.hasKey(\"action\")) {\n                            Element form = tb.getFormElement();\n                            form.attr(\"action\", startTag.attributes.get(\"action\"));\n                        }\n                        tb.process(new Token.StartTag(\"hr\"));\n                        tb.process(new Token.StartTag(\"label\"));\n                        // hope you like english.\n                        String prompt = startTag.attributes.hasKey(\"prompt\") ?\n                                startTag.attributes.get(\"prompt\") :\n                                \"This is a searchable index. Enter search keywords: \";\n\n                        tb.process(new Token.Character(prompt));\n\n                        // input\n                        Attributes inputAttribs = new Attributes();\n                        for (Attribute attr : startTag.attributes) {\n                            if (!StringUtil.in(attr.getKey(), \"name\", \"action\", \"prompt\"))\n                                inputAttribs.put(attr);\n                        }\n                        inputAttribs.put(\"name\", \"isindex\");\n                        tb.process(new Token.StartTag(\"input\", inputAttribs));\n                        tb.process(new Token.EndTag(\"label\"));\n                        tb.process(new Token.StartTag(\"hr\"));\n                        tb.process(new Token.EndTag(\"form\"));\n                    } else if (name.equals(\"textarea\")) {\n                        tb.insert(startTag);\n                        // todo: If the next token is a U+000A LINE FEED (LF) character token, then ignore that token and move on to the next one. (Newlines at the start of textarea elements are ignored as an authoring convenience.)\n                        tb.tokeniser.transition(TokeniserState.Rcdata);\n                        tb.markInsertionMode();\n                        tb.framesetOk(false);\n                        tb.transition(Text);\n                    } else if (name.equals(\"xmp\")) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.process(new Token.EndTag(\"p\"));\n                        }\n                        tb.reconstructFormattingElements();\n                        tb.framesetOk(false);\n                        handleRawtext(startTag, tb);\n                    } else if (name.equals(\"iframe\")) {\n                        tb.framesetOk(false);\n                        handleRawtext(startTag, tb);\n                    } else if (name.equals(\"noembed\")) {\n                        // also handle noscript if script enabled\n                        handleRawtext(startTag, tb);\n                    } else if (name.equals(\"select\")) {\n                        tb.reconstructFormattingElements();\n                        tb.insert(startTag);\n                        tb.framesetOk(false);\n\n                        HtmlTreeBuilderState state = tb.state();\n                        if (state.equals(InTable) || state.equals(InCaption) || state.equals(InTableBody) || state.equals(InRow) || state.equals(InCell))\n                            tb.transition(InSelectInTable);\n                        else\n                            tb.transition(InSelect);\n                    } else if (StringUtil.in(\"optgroup\", \"option\")) {\n                        if (tb.currentElement().nodeName().equals(\"option\"))\n                            tb.process(new Token.EndTag(\"option\"));\n                        tb.reconstructFormattingElements();\n                        tb.insert(startTag);\n                    } else if (StringUtil.in(\"rp\", \"rt\")) {\n                        if (tb.inScope(\"ruby\")) {\n                            tb.generateImpliedEndTags();\n                            if (!tb.currentElement().nodeName().equals(\"ruby\")) {\n                                tb.error(this);\n                                tb.popStackToBefore(\"ruby\"); // i.e. close up to but not include name\n                            }\n                            tb.insert(startTag);\n                        }\n                    } else if (name.equals(\"math\")) {\n                        tb.reconstructFormattingElements();\n                        // todo: handle A start tag whose tag name is \"math\" (i.e. foreign, mathml)\n                        tb.insert(startTag);\n                        tb.tokeniser.acknowledgeSelfClosingFlag();\n                    } else if (name.equals(\"svg\")) {\n                        tb.reconstructFormattingElements();\n                        // todo: handle A start tag whose tag name is \"svg\" (xlink, svg)\n                        tb.insert(startTag);\n                        tb.tokeniser.acknowledgeSelfClosingFlag();\n                    } else if (StringUtil.in(name,\n                            \"caption\", \"col\", \"colgroup\", \"frame\", \"head\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\")) {\n                        tb.error(this);\n                        return false;\n                    } else {\n                        tb.reconstructFormattingElements();\n                        tb.insert(startTag);\n                    }\n                    break;\n\n                case EndTag:\n                    Token.EndTag endTag = t.asEndTag();\n                    name = endTag.name();\n                    if (name.equals(\"body\")) {\n                        if (!tb.inScope(\"body\")) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            // todo: error if stack contains something not dd, dt, li, optgroup, option, p, rp, rt, tbody, td, tfoot, th, thead, tr, body, html\n                            tb.transition(AfterBody);\n                        }\n                    } else if (name.equals(\"html\")) {\n                        boolean notIgnored = tb.process(new Token.EndTag(\"body\"));\n                        if (notIgnored)\n                            return tb.process(endTag);\n                    } else if (StringUtil.in(name,\n                            \"address\", \"article\", \"aside\", \"blockquote\", \"button\", \"center\", \"details\", \"dir\", \"div\",\n                            \"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"listing\", \"menu\",\n                            \"nav\", \"ol\", \"pre\", \"section\", \"summary\", \"ul\")) {\n                        // todo: refactor these lookups\n                        if (!tb.inScope(name)) {\n                            // nothing to close\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.generateImpliedEndTags();\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(name);\n                        }\n                    } else if (name.equals(\"form\")) {\n                        Element currentForm = tb.getFormElement();\n                        tb.setFormElement(null);\n                        if (currentForm == null || !tb.inScope(name)) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.generateImpliedEndTags();\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            // remove currentForm from stack. will shift anything under up.\n                            tb.removeFromStack(currentForm);\n                        }\n                    } else if (name.equals(\"p\")) {\n                        if (!tb.inButtonScope(name)) {\n                            tb.error(this);\n                            tb.process(new Token.StartTag(name)); // if no p to close, creates an empty <p></p>\n                            return tb.process(endTag);\n                        } else {\n                            tb.generateImpliedEndTags(name);\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(name);\n                        }\n                    } else if (name.equals(\"li\")) {\n                        if (!tb.inListItemScope(name)) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.generateImpliedEndTags(name);\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(name);\n                        }\n                    } else if (StringUtil.in(name, \"dd\", \"dt\")) {\n                        if (!tb.inScope(name)) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.generateImpliedEndTags(name);\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(name);\n                        }\n                    } else if (StringUtil.in(name, \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\")) {\n                        if (!tb.inScope(new String[]{\"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\"})) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.generateImpliedEndTags(name);\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(\"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\");\n                        }\n                    } else if (name.equals(\"sarcasm\")) {\n                        // *sigh*\n                        return anyOtherEndTag(t, tb);\n                    } else if (StringUtil.in(name,\n                            \"a\", \"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"nobr\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\")) {\n                        // Adoption Agency Algorithm.\n                        OUTER:\n                        for (int i = 0; i < 8; i++) {\n                            Element formatEl = tb.getActiveFormattingElement(name);\n                            if (formatEl == null)\n                                return anyOtherEndTag(t, tb);\n                            else if (!tb.onStack(formatEl)) {\n                                tb.error(this);\n                                tb.removeFromActiveFormattingElements(formatEl);\n                                return true;\n                            } else if (!tb.inScope(formatEl.nodeName())) {\n                                tb.error(this);\n                                return false;\n                            } else if (tb.currentElement() != formatEl)\n                                tb.error(this);\n\n                            Element furthestBlock = null;\n                            Element commonAncestor = null;\n                            boolean seenFormattingElement = false;\n                            LinkedList<Element> stack = tb.getStack();\n                            // the spec doesn't limit to < 64, but in degenerate cases (9000+ stack depth) this prevents\n                            // run-aways\n                            for (int si = 0; si < stack.size() && si < 64; si++) {\n                                Element el = stack.get(si);\n                                if (el == formatEl) {\n                                    commonAncestor = stack.get(si - 1);\n                                    seenFormattingElement = true;\n                                } else if (seenFormattingElement && tb.isSpecial(el)) {\n                                    furthestBlock = el;\n                                    break;\n                                }\n                            }\n                            if (furthestBlock == null) {\n                                tb.popStackToClose(formatEl.nodeName());\n                                tb.removeFromActiveFormattingElements(formatEl);\n                                return true;\n                            }\n\n                            // todo: Let a bookmark note the position of the formatting element in the list of active formatting elements relative to the elements on either side of it in the list.\n                            // does that mean: int pos of format el in list?\n                            Element node = furthestBlock;\n                            Element lastNode = furthestBlock;\n                            INNER:\n                            for (int j = 0; j < 3; j++) {\n                                if (tb.onStack(node))\n                                    node = tb.aboveOnStack(node);\n                                if (!tb.isInActiveFormattingElements(node)) { // note no bookmark check\n                                    tb.removeFromStack(node);\n                                    continue INNER;\n                                } else if (node == formatEl)\n                                    break INNER;\n\n                                Element replacement = new Element(Tag.valueOf(node.nodeName()), tb.getBaseUri());\n                                tb.replaceActiveFormattingElement(node, replacement);\n                                tb.replaceOnStack(node, replacement);\n                                node = replacement;\n\n                                if (lastNode == furthestBlock) {\n                                    // todo: move the aforementioned bookmark to be immediately after the new node in the list of active formatting elements.\n                                    // not getting how this bookmark both straddles the element above, but is inbetween here...\n                                }\n                                if (lastNode.parent() != null)\n                                    lastNode.remove();\n                                node.appendChild(lastNode);\n\n                                lastNode = node;\n                            }\n\n                            if (StringUtil.in(commonAncestor.nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) {\n                                if (lastNode.parent() != null)\n                                    lastNode.remove();\n                                tb.insertInFosterParent(lastNode);\n                            } else {\n                                if (lastNode.parent() != null)\n                                    lastNode.remove();\n                                commonAncestor.appendChild(lastNode);\n                            }\n\n                            Element adopter = new Element(formatEl.tag(), tb.getBaseUri());\n                            Node[] childNodes = furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()]);\n                            for (Node childNode : childNodes) {\n                                adopter.appendChild(childNode); // append will reparent. thus the clone to avoid concurrent mod.\n                            }\n                            furthestBlock.appendChild(adopter);\n                            tb.removeFromActiveFormattingElements(formatEl);\n                            // todo: insert the new element into the list of active formatting elements at the position of the aforementioned bookmark.\n                            tb.removeFromStack(formatEl);\n                            tb.insertOnStackAfter(furthestBlock, adopter);\n                        }\n                    } else if (StringUtil.in(name, \"applet\", \"marquee\", \"object\")) {\n                        if (!tb.inScope(\"name\")) {\n                            if (!tb.inScope(name)) {\n                                tb.error(this);\n                                return false;\n                            }\n                            tb.generateImpliedEndTags();\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(name);\n                            tb.clearFormattingElementsToLastMarker();\n                        }\n                    } else if (name.equals(\"br\")) {\n                        tb.error(this);\n                        tb.process(new Token.StartTag(\"br\"));\n                        return false;\n                    } else {\n                        return anyOtherEndTag(t, tb);\n                    }\n\n                    break;\n                case EOF:\n                    // todo: error if stack contains something not dd, dt, li, p, tbody, td, tfoot, th, thead, tr, body, html\n                    // stop parsing\n                    break;\n            }",
      "right" : "switch (t.type) {\n                case Character: {\n                    Token.Character c = t.asCharacter();\n                    if (c.getData().equals(nullString)) {\n                        // todo confirm that check\n                        tb.error(this);\n                        return false;\n                    } else if (isWhitespace(c)) {\n                        tb.reconstructFormattingElements();\n                        tb.insert(c);\n                    } else {\n                        tb.reconstructFormattingElements();\n                        tb.insert(c);\n                        tb.framesetOk(false);\n                    }\n                    break;\n                }\n                case Comment: {\n                    tb.insert(t.asComment());\n                    break;\n                }\n                case Doctype: {\n                    tb.error(this);\n                    return false;\n                }\n                case StartTag:\n                    Token.StartTag startTag = t.asStartTag();\n                    String name = startTag.name();\n                    if (name.equals(\"html\")) {\n                        tb.error(this);\n                        // merge attributes onto real html\n                        Element html = tb.getStack().getFirst();\n                        for (Attribute attribute : startTag.getAttributes()) {\n                            if (!html.hasAttr(attribute.getKey()))\n                                html.attributes().put(attribute);\n                        }\n                    } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\")) {\n                        return tb.process(t, InHead);\n                    } else if (name.equals(\"body\")) {\n                        tb.error(this);\n                        LinkedList<Element> stack = tb.getStack();\n                        if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) {\n                            // only in fragment case\n                            return false; // ignore\n                        } else {\n                            tb.framesetOk(false);\n                            Element body = stack.get(1);\n                            for (Attribute attribute : startTag.getAttributes()) {\n                                if (!body.hasAttr(attribute.getKey()))\n                                    body.attributes().put(attribute);\n                            }\n                        }\n                    } else if (name.equals(\"frameset\")) {\n                        tb.error(this);\n                        LinkedList<Element> stack = tb.getStack();\n                        if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) {\n                            // only in fragment case\n                            return false; // ignore\n                        } else if (!tb.framesetOk()) {\n                            return false; // ignore frameset\n                        } else {\n                            Element second = stack.get(1);\n                            if (second.parent() != null)\n                                second.remove();\n                            // pop up to html element\n                            while (stack.size() > 1)\n                                stack.removeLast();\n                            tb.insert(startTag);\n                            tb.transition(InFrameset);\n                        }\n                    } else if (StringUtil.in(name,\n                            \"address\", \"article\", \"aside\", \"blockquote\", \"center\", \"details\", \"dir\", \"div\", \"dl\",\n                            \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"menu\", \"nav\", \"ol\",\n                            \"p\", \"section\", \"summary\", \"ul\")) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.process(new Token.EndTag(\"p\"));\n                        }\n                        tb.insert(startTag);\n                    } else if (StringUtil.in(name, \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\")) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.process(new Token.EndTag(\"p\"));\n                        }\n                        if (StringUtil.in(tb.currentElement().nodeName(), \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\")) {\n                            tb.error(this);\n                            tb.pop();\n                        }\n                        tb.insert(startTag);\n                    } else if (StringUtil.in(name, \"pre\", \"listing\")) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.process(new Token.EndTag(\"p\"));\n                        }\n                        tb.insert(startTag);\n                        // todo: ignore LF if next token\n                        tb.framesetOk(false);\n                    } else if (name.equals(\"form\")) {\n                        if (tb.getFormElement() != null) {\n                            tb.error(this);\n                            return false;\n                        }\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.process(new Token.EndTag(\"p\"));\n                        }\n                        tb.insertForm(startTag, true);\n                    } else if (name.equals(\"li\")) {\n                        tb.framesetOk(false);\n                        LinkedList<Element> stack = tb.getStack();\n                        for (int i = stack.size() - 1; i > 0; i--) {\n                            Element el = stack.get(i);\n                            if (el.nodeName().equals(\"li\")) {\n                                tb.process(new Token.EndTag(\"li\"));\n                                break;\n                            }\n                            if (tb.isSpecial(el) && !StringUtil.in(el.nodeName(), \"address\", \"div\", \"p\"))\n                                break;\n                        }\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.process(new Token.EndTag(\"p\"));\n                        }\n                        tb.insert(startTag);\n                    } else if (StringUtil.in(name, \"dd\", \"dt\")) {\n                        tb.framesetOk(false);\n                        LinkedList<Element> stack = tb.getStack();\n                        for (int i = stack.size() - 1; i > 0; i--) {\n                            Element el = stack.get(i);\n                            if (StringUtil.in(el.nodeName(), \"dd\", \"dt\")) {\n                                tb.process(new Token.EndTag(el.nodeName()));\n                                break;\n                            }\n                            if (tb.isSpecial(el) && !StringUtil.in(el.nodeName(), \"address\", \"div\", \"p\"))\n                                break;\n                        }\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.process(new Token.EndTag(\"p\"));\n                        }\n                        tb.insert(startTag);\n                    } else if (name.equals(\"plaintext\")) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.process(new Token.EndTag(\"p\"));\n                        }\n                        tb.insert(startTag);\n                        tb.tokeniser.transition(TokeniserState.PLAINTEXT); // once in, never gets out\n                    } else if (name.equals(\"button\")) {\n                        if (tb.inButtonScope(\"button\")) {\n                            // close and reprocess\n                            tb.error(this);\n                            tb.process(new Token.EndTag(\"button\"));\n                            tb.process(startTag);\n                        } else {\n                            tb.reconstructFormattingElements();\n                            tb.insert(startTag);\n                            tb.framesetOk(false);\n                        }\n                    } else if (name.equals(\"a\")) {\n                        if (tb.getActiveFormattingElement(\"a\") != null) {\n                            tb.error(this);\n                            tb.process(new Token.EndTag(\"a\"));\n\n                            // still on stack?\n                            Element remainingA = tb.getFromStack(\"a\");\n                            if (remainingA != null) {\n                                tb.removeFromActiveFormattingElements(remainingA);\n                                tb.removeFromStack(remainingA);\n                            }\n                        }\n                        tb.reconstructFormattingElements();\n                        Element a = tb.insert(startTag);\n                        tb.pushActiveFormattingElements(a);\n                    } else if (StringUtil.in(name,\n                            \"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\")) {\n                        tb.reconstructFormattingElements();\n                        Element el = tb.insert(startTag);\n                        tb.pushActiveFormattingElements(el);\n                    } else if (name.equals(\"nobr\")) {\n                        tb.reconstructFormattingElements();\n                        if (tb.inScope(\"nobr\")) {\n                            tb.error(this);\n                            tb.process(new Token.EndTag(\"nobr\"));\n                            tb.reconstructFormattingElements();\n                        }\n                        Element el = tb.insert(startTag);\n                        tb.pushActiveFormattingElements(el);\n                    } else if (StringUtil.in(name, \"applet\", \"marquee\", \"object\")) {\n                        tb.reconstructFormattingElements();\n                        tb.insert(startTag);\n                        tb.insertMarkerToFormattingElements();\n                        tb.framesetOk(false);\n                    } else if (name.equals(\"table\")) {\n                        if (tb.getDocument().quirksMode() != Document.QuirksMode.quirks && tb.inButtonScope(\"p\")) {\n                            tb.process(new Token.EndTag(\"p\"));\n                        }\n                        tb.insert(startTag);\n                        tb.framesetOk(false);\n                        tb.transition(InTable);\n                    } else if (StringUtil.in(name, \"area\", \"br\", \"embed\", \"img\", \"keygen\", \"wbr\")) {\n                        tb.reconstructFormattingElements();\n                        tb.insertEmpty(startTag);\n                        tb.framesetOk(false);\n                    } else if (name.equals(\"input\")) {\n                        tb.reconstructFormattingElements();\n                        Element el = tb.insertEmpty(startTag);\n                        if (!el.attr(\"type\").equalsIgnoreCase(\"hidden\"))\n                            tb.framesetOk(false);\n                    } else if (StringUtil.in(name, \"param\", \"source\", \"track\")) {\n                        tb.insertEmpty(startTag);\n                    } else if (name.equals(\"hr\")) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.process(new Token.EndTag(\"p\"));\n                        }\n                        tb.insertEmpty(startTag);\n                        tb.framesetOk(false);\n                    } else if (name.equals(\"image\")) {\n                        // we're not supposed to ask.\n                        startTag.name(\"img\");\n                        return tb.process(startTag);\n                    } else if (name.equals(\"isindex\")) {\n                        // how much do we care about the early 90s?\n                        tb.error(this);\n                        if (tb.getFormElement() != null)\n                            return false;\n\n                        tb.tokeniser.acknowledgeSelfClosingFlag();\n                        tb.process(new Token.StartTag(\"form\"));\n                        if (startTag.attributes.hasKey(\"action\")) {\n                            Element form = tb.getFormElement();\n                            form.attr(\"action\", startTag.attributes.get(\"action\"));\n                        }\n                        tb.process(new Token.StartTag(\"hr\"));\n                        tb.process(new Token.StartTag(\"label\"));\n                        // hope you like english.\n                        String prompt = startTag.attributes.hasKey(\"prompt\") ?\n                                startTag.attributes.get(\"prompt\") :\n                                \"This is a searchable index. Enter search keywords: \";\n\n                        tb.process(new Token.Character(prompt));\n\n                        // input\n                        Attributes inputAttribs = new Attributes();\n                        for (Attribute attr : startTag.attributes) {\n                            if (!StringUtil.in(attr.getKey(), \"name\", \"action\", \"prompt\"))\n                                inputAttribs.put(attr);\n                        }\n                        inputAttribs.put(\"name\", \"isindex\");\n                        tb.process(new Token.StartTag(\"input\", inputAttribs));\n                        tb.process(new Token.EndTag(\"label\"));\n                        tb.process(new Token.StartTag(\"hr\"));\n                        tb.process(new Token.EndTag(\"form\"));\n                    } else if (name.equals(\"textarea\")) {\n                        tb.insert(startTag);\n                        // todo: If the next token is a U+000A LINE FEED (LF) character token, then ignore that token and move on to the next one. (Newlines at the start of textarea elements are ignored as an authoring convenience.)\n                        tb.tokeniser.transition(TokeniserState.Rcdata);\n                        tb.markInsertionMode();\n                        tb.framesetOk(false);\n                        tb.transition(Text);\n                    } else if (name.equals(\"xmp\")) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.process(new Token.EndTag(\"p\"));\n                        }\n                        tb.reconstructFormattingElements();\n                        tb.framesetOk(false);\n                        handleRawtext(startTag, tb);\n                    } else if (name.equals(\"iframe\")) {\n                        tb.framesetOk(false);\n                        handleRawtext(startTag, tb);\n                    } else if (name.equals(\"noembed\")) {\n                        // also handle noscript if script enabled\n                        handleRawtext(startTag, tb);\n                    } else if (name.equals(\"select\")) {\n                        tb.reconstructFormattingElements();\n                        tb.insert(startTag);\n                        tb.framesetOk(false);\n\n                        HtmlTreeBuilderState state = tb.state();\n                        if (state.equals(InTable) || state.equals(InCaption) || state.equals(InTableBody) || state.equals(InRow) || state.equals(InCell))\n                            tb.transition(InSelectInTable);\n                        else\n                            tb.transition(InSelect);\n                    } else if (StringUtil.in(\"optgroup\", \"option\")) {\n                        if (tb.currentElement().nodeName().equals(\"option\"))\n                            tb.process(new Token.EndTag(\"option\"));\n                        tb.reconstructFormattingElements();\n                        tb.insert(startTag);\n                    } else if (StringUtil.in(\"rp\", \"rt\")) {\n                        if (tb.inScope(\"ruby\")) {\n                            tb.generateImpliedEndTags();\n                            if (!tb.currentElement().nodeName().equals(\"ruby\")) {\n                                tb.error(this);\n                                tb.popStackToBefore(\"ruby\"); // i.e. close up to but not include name\n                            }\n                            tb.insert(startTag);\n                        }\n                    } else if (name.equals(\"math\")) {\n                        tb.reconstructFormattingElements();\n                        // todo: handle A start tag whose tag name is \"math\" (i.e. foreign, mathml)\n                        tb.insert(startTag);\n                        tb.tokeniser.acknowledgeSelfClosingFlag();\n                    } else if (name.equals(\"svg\")) {\n                        tb.reconstructFormattingElements();\n                        // todo: handle A start tag whose tag name is \"svg\" (xlink, svg)\n                        tb.insert(startTag);\n                        tb.tokeniser.acknowledgeSelfClosingFlag();\n                    } else if (StringUtil.in(name,\n                            \"caption\", \"col\", \"colgroup\", \"frame\", \"head\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\")) {\n                        tb.error(this);\n                        return false;\n                    } else {\n                        tb.reconstructFormattingElements();\n                        tb.insert(startTag);\n                    }\n                    break;\n\n                case EndTag:\n                    Token.EndTag endTag = t.asEndTag();\n                    name = endTag.name();\n                    if (name.equals(\"body\")) {\n                        if (!tb.inScope(\"body\")) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            // todo: error if stack contains something not dd, dt, li, optgroup, option, p, rp, rt, tbody, td, tfoot, th, thead, tr, body, html\n                            tb.transition(AfterBody);\n                        }\n                    } else if (name.equals(\"html\")) {\n                        boolean notIgnored = tb.process(new Token.EndTag(\"body\"));\n                        if (notIgnored)\n                            return tb.process(endTag);\n                    } else if (StringUtil.in(name,\n                            \"address\", \"article\", \"aside\", \"blockquote\", \"button\", \"center\", \"details\", \"dir\", \"div\",\n                            \"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"listing\", \"menu\",\n                            \"nav\", \"ol\", \"pre\", \"section\", \"summary\", \"ul\")) {\n                        // todo: refactor these lookups\n                        if (!tb.inScope(name)) {\n                            // nothing to close\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.generateImpliedEndTags();\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(name);\n                        }\n                    } else if (name.equals(\"form\")) {\n                        Element currentForm = tb.getFormElement();\n                        tb.setFormElement(null);\n                        if (currentForm == null || !tb.inScope(name)) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.generateImpliedEndTags();\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            // remove currentForm from stack. will shift anything under up.\n                            tb.removeFromStack(currentForm);\n                        }\n                    } else if (name.equals(\"p\")) {\n                        if (!tb.inButtonScope(name)) {\n                            tb.error(this);\n                            tb.process(new Token.StartTag(name)); // if no p to close, creates an empty <p></p>\n                            return tb.process(endTag);\n                        } else {\n                            tb.generateImpliedEndTags(name);\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(name);\n                        }\n                    } else if (name.equals(\"li\")) {\n                        if (!tb.inListItemScope(name)) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.generateImpliedEndTags(name);\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(name);\n                        }\n                    } else if (StringUtil.in(name, \"dd\", \"dt\")) {\n                        if (!tb.inScope(name)) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.generateImpliedEndTags(name);\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(name);\n                        }\n                    } else if (StringUtil.in(name, \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\")) {\n                        if (!tb.inScope(new String[]{\"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\"})) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.generateImpliedEndTags(name);\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(\"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\");\n                        }\n                    } else if (name.equals(\"sarcasm\")) {\n                        // *sigh*\n                        return anyOtherEndTag(t, tb);\n                    } else if (StringUtil.in(name,\n                            \"a\", \"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"nobr\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\")) {\n                        // Adoption Agency Algorithm.\n                        OUTER:\n                        for (int i = 0; i < 8; i++) {\n                            Element formatEl = tb.getActiveFormattingElement(name);\n                            if (formatEl == null)\n                                return anyOtherEndTag(t, tb);\n                            else if (!tb.onStack(formatEl)) {\n                                tb.error(this);\n                                tb.removeFromActiveFormattingElements(formatEl);\n                                return true;\n                            } else if (!tb.inScope(formatEl.nodeName())) {\n                                tb.error(this);\n                                return false;\n                            } else if (tb.currentElement() != formatEl)\n                                tb.error(this);\n\n                            Element furthestBlock = null;\n                            Element commonAncestor = null;\n                            boolean seenFormattingElement = false;\n                            LinkedList<Element> stack = tb.getStack();\n                            // the spec doesn't limit to < 64, but in degenerate cases (9000+ stack depth) this prevents\n                            // run-aways\n                            for (int si = 0; si < stack.size() && si < 64; si++) {\n                                Element el = stack.get(si);\n                                if (el == formatEl) {\n                                    commonAncestor = stack.get(si - 1);\n                                    seenFormattingElement = true;\n                                } else if (seenFormattingElement && tb.isSpecial(el)) {\n                                    furthestBlock = el;\n                                    break;\n                                }\n                            }\n                            if (furthestBlock == null) {\n                                tb.popStackToClose(formatEl.nodeName());\n                                tb.removeFromActiveFormattingElements(formatEl);\n                                return true;\n                            }\n\n                            // todo: Let a bookmark note the position of the formatting element in the list of active formatting elements relative to the elements on either side of it in the list.\n                            // does that mean: int pos of format el in list?\n                            Element node = furthestBlock;\n                            Element lastNode = furthestBlock;\n                            INNER:\n                            for (int j = 0; j < 3; j++) {\n                                if (tb.onStack(node))\n                                    node = tb.aboveOnStack(node);\n                                if (!tb.isInActiveFormattingElements(node)) { // note no bookmark check\n                                    tb.removeFromStack(node);\n                                    continue INNER;\n                                } else if (node == formatEl)\n                                    break INNER;\n\n                                Element replacement = new Element(Tag.valueOf(node.nodeName()), tb.getBaseUri());\n                                tb.replaceActiveFormattingElement(node, replacement);\n                                tb.replaceOnStack(node, replacement);\n                                node = replacement;\n\n                                if (lastNode == furthestBlock) {\n                                    // todo: move the aforementioned bookmark to be immediately after the new node in the list of active formatting elements.\n                                    // not getting how this bookmark both straddles the element above, but is inbetween here...\n                                }\n                                if (lastNode.parent() != null)\n                                    lastNode.remove();\n                                node.appendChild(lastNode);\n\n                                lastNode = node;\n                            }\n\n                            if (StringUtil.in(commonAncestor.nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) {\n                                if (lastNode.parent() != null)\n                                    lastNode.remove();\n                                tb.insertInFosterParent(lastNode);\n                            } else {\n                                if (lastNode.parent() != null)\n                                    lastNode.remove();\n                                commonAncestor.appendChild(lastNode);\n                            }\n\n                            Element adopter = new Element(formatEl.tag(), tb.getBaseUri());\n                            adopter.attributes().addAll(formatEl.attributes());\n                            Node[] childNodes = furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()]);\n                            for (Node childNode : childNodes) {\n                                adopter.appendChild(childNode); // append will reparent. thus the clone to avoid concurrent mod.\n                            }\n                            furthestBlock.appendChild(adopter);\n                            tb.removeFromActiveFormattingElements(formatEl);\n                            // todo: insert the new element into the list of active formatting elements at the position of the aforementioned bookmark.\n                            tb.removeFromStack(formatEl);\n                            tb.insertOnStackAfter(furthestBlock, adopter);\n                        }\n                    } else if (StringUtil.in(name, \"applet\", \"marquee\", \"object\")) {\n                        if (!tb.inScope(\"name\")) {\n                            if (!tb.inScope(name)) {\n                                tb.error(this);\n                                return false;\n                            }\n                            tb.generateImpliedEndTags();\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(name);\n                            tb.clearFormattingElementsToLastMarker();\n                        }\n                    } else if (name.equals(\"br\")) {\n                        tb.error(this);\n                        tb.process(new Token.StartTag(\"br\"));\n                        return false;\n                    } else {\n                        return anyOtherEndTag(t, tb);\n                    }\n\n                    break;\n                case EOF:\n                    // todo: error if stack contains something not dd, dt, li, p, tbody, td, tfoot, th, thead, tr, body, html\n                    // stop parsing\n                    break;\n            }",
      "info" : "SwitchStatement[10091-38710]:SwitchStatement[10091-38790]"
    }, {
      "left" : "case Character:",
      "right" : "case Character:",
      "info" : "SwitchCase[10125-10140]:SwitchCase[10125-10140]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10141-10774]:Block[10141-10774]"
    }, {
      "left" : "Token.Character c = t.asCharacter();",
      "right" : "Token.Character c = t.asCharacter();",
      "info" : "VariableDeclarationStatement[10163-10199]:VariableDeclarationStatement[10163-10199]"
    }, {
      "left" : "if (c.getData().equals(nullString))",
      "right" : "if (c.getData().equals(nullString))",
      "info" : "IfStatement[10220-10729]:IfStatement[10220-10729]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10256-10408]:Block[10256-10408]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[10333-10348]:ExpressionStatement[10333-10348]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[10373-10386]:ReturnStatement[10373-10386]"
    }, {
      "left" : "if (isWhitespace(c))",
      "right" : "if (isWhitespace(c))",
      "info" : "IfStatement[10414-10729]:IfStatement[10414-10729]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10435-10556]:Block[10435-10556]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[10461-10496]:ExpressionStatement[10461-10496]"
    }, {
      "left" : "tb.insert(c);",
      "right" : "tb.insert(c);",
      "info" : "ExpressionStatement[10521-10534]:ExpressionStatement[10521-10534]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10562-10729]:Block[10562-10729]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[10588-10623]:ExpressionStatement[10588-10623]"
    }, {
      "left" : "tb.insert(c);",
      "right" : "tb.insert(c);",
      "info" : "ExpressionStatement[10648-10661]:ExpressionStatement[10648-10661]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[10686-10707]:ExpressionStatement[10686-10707]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[10750-10756]:BreakStatement[10750-10756]"
    }, {
      "left" : "case Comment:",
      "right" : "case Comment:",
      "info" : "SwitchCase[10791-10804]:SwitchCase[10791-10804]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10805-10897]:Block[10805-10897]"
    }, {
      "left" : "tb.insert(t.asComment());",
      "right" : "tb.insert(t.asComment());",
      "info" : "ExpressionStatement[10827-10852]:ExpressionStatement[10827-10852]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[10873-10879]:BreakStatement[10873-10879]"
    }, {
      "left" : "case Doctype:",
      "right" : "case Doctype:",
      "info" : "SwitchCase[10914-10927]:SwitchCase[10914-10927]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10928-11017]:Block[10928-11017]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[10950-10965]:ExpressionStatement[10950-10965]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[10986-10999]:ReturnStatement[10986-10999]"
    }, {
      "left" : "case StartTag:",
      "right" : "case StartTag:",
      "info" : "SwitchCase[11034-11048]:SwitchCase[11034-11048]"
    }, {
      "left" : "Token.StartTag startTag = t.asStartTag();",
      "right" : "Token.StartTag startTag = t.asStartTag();",
      "info" : "VariableDeclarationStatement[11069-11110]:VariableDeclarationStatement[11069-11110]"
    }, {
      "left" : "String name = startTag.name();",
      "right" : "String name = startTag.name();",
      "info" : "VariableDeclarationStatement[11131-11161]:VariableDeclarationStatement[11131-11161]"
    }, {
      "left" : "if (name.equals(\"html\"))",
      "right" : "if (name.equals(\"html\"))",
      "info" : "IfStatement[11182-27000]:IfStatement[11182-27000]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11207-11632]:Block[11207-11632]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[11233-11248]:ExpressionStatement[11233-11248]"
    }, {
      "left" : "Element html = tb.getStack().getFirst();",
      "right" : "Element html = tb.getStack().getFirst();",
      "info" : "VariableDeclarationStatement[11332-11372]:VariableDeclarationStatement[11332-11372]"
    }, {
      "left" : "for (Attribute attribute : startTag.getAttributes())",
      "right" : "for (Attribute attribute : startTag.getAttributes())",
      "info" : "EnhancedForStatement[11397-11610]:EnhancedForStatement[11397-11610]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11450-11610]:Block[11450-11610]"
    }, {
      "left" : "if (!html.hasAttr(attribute.getKey()))",
      "right" : "if (!html.hasAttr(attribute.getKey()))",
      "info" : "IfStatement[11480-11584]:IfStatement[11480-11584]"
    }, {
      "left" : "html.attributes().put(attribute);",
      "right" : "html.attributes().put(attribute);",
      "info" : "ExpressionStatement[11551-11584]:ExpressionStatement[11551-11584]"
    }, {
      "left" : "if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\"))",
      "right" : "if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\"))",
      "info" : "IfStatement[11638-27000]:IfStatement[11638-27000]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11761-11838]:Block[11761-11838]"
    }, {
      "left" : "return tb.process(t, InHead);",
      "right" : "return tb.process(t, InHead);",
      "info" : "ReturnStatement[11787-11816]:ReturnStatement[11787-11816]"
    }, {
      "left" : "if (name.equals(\"body\"))",
      "right" : "if (name.equals(\"body\"))",
      "info" : "IfStatement[11844-27000]:IfStatement[11844-27000]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11869-12638]:Block[11869-12638]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[11895-11910]:ExpressionStatement[11895-11910]"
    }, {
      "left" : "LinkedList<Element> stack = tb.getStack();",
      "right" : "LinkedList<Element> stack = tb.getStack();",
      "info" : "VariableDeclarationStatement[11935-11977]:VariableDeclarationStatement[11935-11977]"
    }, {
      "left" : "if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\")))",
      "right" : "if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\")))",
      "info" : "IfStatement[12002-12616]:IfStatement[12002-12616]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12090-12222]:Block[12090-12222]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[12173-12186]:ReturnStatement[12173-12186]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12228-12616]:Block[12228-12616]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[12258-12279]:ExpressionStatement[12258-12279]"
    }, {
      "left" : "Element body = stack.get(1);",
      "right" : "Element body = stack.get(1);",
      "info" : "VariableDeclarationStatement[12308-12336]:VariableDeclarationStatement[12308-12336]"
    }, {
      "left" : "for (Attribute attribute : startTag.getAttributes())",
      "right" : "for (Attribute attribute : startTag.getAttributes())",
      "info" : "EnhancedForStatement[12365-12590]:EnhancedForStatement[12365-12590]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12418-12590]:Block[12418-12590]"
    }, {
      "left" : "if (!body.hasAttr(attribute.getKey()))",
      "right" : "if (!body.hasAttr(attribute.getKey()))",
      "info" : "IfStatement[12452-12560]:IfStatement[12452-12560]"
    }, {
      "left" : "body.attributes().put(attribute);",
      "right" : "body.attributes().put(attribute);",
      "info" : "ExpressionStatement[12527-12560]:ExpressionStatement[12527-12560]"
    }, {
      "left" : "if (name.equals(\"frameset\"))",
      "right" : "if (name.equals(\"frameset\"))",
      "info" : "IfStatement[12644-27000]:IfStatement[12644-27000]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12673-13625]:Block[12673-13625]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[12699-12714]:ExpressionStatement[12699-12714]"
    }, {
      "left" : "LinkedList<Element> stack = tb.getStack();",
      "right" : "LinkedList<Element> stack = tb.getStack();",
      "info" : "VariableDeclarationStatement[12739-12781]:VariableDeclarationStatement[12739-12781]"
    }, {
      "left" : "if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\")))",
      "right" : "if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\")))",
      "info" : "IfStatement[12806-13603]:IfStatement[12806-13603]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12894-13026]:Block[12894-13026]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[12977-12990]:ReturnStatement[12977-12990]"
    }, {
      "left" : "if (!tb.framesetOk())",
      "right" : "if (!tb.framesetOk())",
      "info" : "IfStatement[13032-13603]:IfStatement[13032-13603]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13054-13142]:Block[13054-13142]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[13084-13097]:ReturnStatement[13084-13097]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13148-13603]:Block[13148-13603]"
    }, {
      "left" : "Element second = stack.get(1);",
      "right" : "Element second = stack.get(1);",
      "info" : "VariableDeclarationStatement[13178-13208]:VariableDeclarationStatement[13178-13208]"
    }, {
      "left" : "if (second.parent() != null)",
      "right" : "if (second.parent() != null)",
      "info" : "IfStatement[13237-13314]:IfStatement[13237-13314]"
    }, {
      "left" : "second.remove();",
      "right" : "second.remove();",
      "info" : "ExpressionStatement[13298-13314]:ExpressionStatement[13298-13314]"
    }, {
      "left" : "while (stack.size() > 1)\n                                stack.removeLast();",
      "right" : "while (stack.size() > 1)\n                                stack.removeLast();",
      "info" : "WhileStatement[13397-13473]:WhileStatement[13397-13473]"
    }, {
      "left" : "stack.removeLast();",
      "right" : "stack.removeLast();",
      "info" : "ExpressionStatement[13454-13473]:ExpressionStatement[13454-13473]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[13502-13522]:ExpressionStatement[13502-13522]"
    }, {
      "left" : "tb.transition(InFrameset);",
      "right" : "tb.transition(InFrameset);",
      "info" : "ExpressionStatement[13551-13577]:ExpressionStatement[13551-13577]"
    }, {
      "left" : "if (StringUtil.in(name,\n                            \"address\", \"article\", \"aside\", \"blockquote\", \"center\", \"details\", \"dir\", \"div\", \"dl\",\n                            \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"menu\", \"nav\", \"ol\",\n                            \"p\", \"section\", \"summary\", \"ul\"))",
      "right" : "if (StringUtil.in(name,\n                            \"address\", \"article\", \"aside\", \"blockquote\", \"center\", \"details\", \"dir\", \"div\", \"dl\",\n                            \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"menu\", \"nav\", \"ol\",\n                            \"p\", \"section\", \"summary\", \"ul\"))",
      "info" : "IfStatement[13631-27000]:IfStatement[13631-27000]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13946-14156]:Block[13946-14156]"
    }, {
      "left" : "if (tb.inButtonScope(\"p\"))",
      "right" : "if (tb.inButtonScope(\"p\"))",
      "info" : "IfStatement[13972-14089]:IfStatement[13972-14089]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13999-14089]:Block[13999-14089]"
    }, {
      "left" : "tb.process(new Token.EndTag(\"p\"));",
      "right" : "tb.process(new Token.EndTag(\"p\"));",
      "info" : "ExpressionStatement[14029-14063]:ExpressionStatement[14029-14063]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[14114-14134]:ExpressionStatement[14114-14134]"
    }, {
      "left" : "if (StringUtil.in(name, \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\"))",
      "right" : "if (StringUtil.in(name, \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\"))",
      "info" : "IfStatement[14162-27000]:IfStatement[14162-27000]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14223-14654]:Block[14223-14654]"
    }, {
      "left" : "if (tb.inButtonScope(\"p\"))",
      "right" : "if (tb.inButtonScope(\"p\"))",
      "info" : "IfStatement[14249-14366]:IfStatement[14249-14366]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14276-14366]:Block[14276-14366]"
    }, {
      "left" : "tb.process(new Token.EndTag(\"p\"));",
      "right" : "tb.process(new Token.EndTag(\"p\"));",
      "info" : "ExpressionStatement[14306-14340]:ExpressionStatement[14306-14340]"
    }, {
      "left" : "if (StringUtil.in(tb.currentElement().nodeName(), \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\"))",
      "right" : "if (StringUtil.in(tb.currentElement().nodeName(), \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\"))",
      "info" : "IfStatement[14391-14587]:IfStatement[14391-14587]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14478-14587]:Block[14478-14587]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[14508-14523]:ExpressionStatement[14508-14523]"
    }, {
      "left" : "tb.pop();",
      "right" : "tb.pop();",
      "info" : "ExpressionStatement[14552-14561]:ExpressionStatement[14552-14561]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[14612-14632]:ExpressionStatement[14612-14632]"
    }, {
      "left" : "if (StringUtil.in(name, \"pre\", \"listing\"))",
      "right" : "if (StringUtil.in(name, \"pre\", \"listing\"))",
      "info" : "IfStatement[14660-27000]:IfStatement[14660-27000]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14703-15016]:Block[14703-15016]"
    }, {
      "left" : "if (tb.inButtonScope(\"p\"))",
      "right" : "if (tb.inButtonScope(\"p\"))",
      "info" : "IfStatement[14729-14846]:IfStatement[14729-14846]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14756-14846]:Block[14756-14846]"
    }, {
      "left" : "tb.process(new Token.EndTag(\"p\"));",
      "right" : "tb.process(new Token.EndTag(\"p\"));",
      "info" : "ExpressionStatement[14786-14820]:ExpressionStatement[14786-14820]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[14871-14891]:ExpressionStatement[14871-14891]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[14973-14994]:ExpressionStatement[14973-14994]"
    }, {
      "left" : "if (name.equals(\"form\"))",
      "right" : "if (name.equals(\"form\"))",
      "info" : "IfStatement[15022-27000]:IfStatement[15022-27000]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15047-15438]:Block[15047-15438]"
    }, {
      "left" : "if (tb.getFormElement() != null)",
      "right" : "if (tb.getFormElement() != null)",
      "info" : "IfStatement[15073-15219]:IfStatement[15073-15219]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15106-15219]:Block[15106-15219]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[15136-15151]:ExpressionStatement[15136-15151]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[15180-15193]:ReturnStatement[15180-15193]"
    }, {
      "left" : "if (tb.inButtonScope(\"p\"))",
      "right" : "if (tb.inButtonScope(\"p\"))",
      "info" : "IfStatement[15244-15361]:IfStatement[15244-15361]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15271-15361]:Block[15271-15361]"
    }, {
      "left" : "tb.process(new Token.EndTag(\"p\"));",
      "right" : "tb.process(new Token.EndTag(\"p\"));",
      "info" : "ExpressionStatement[15301-15335]:ExpressionStatement[15301-15335]"
    }, {
      "left" : "tb.insertForm(startTag, true);",
      "right" : "tb.insertForm(startTag, true);",
      "info" : "ExpressionStatement[15386-15416]:ExpressionStatement[15386-15416]"
    }, {
      "left" : "if (name.equals(\"li\"))",
      "right" : "if (name.equals(\"li\"))",
      "info" : "IfStatement[15444-27000]:IfStatement[15444-27000]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15467-16284]:Block[15467-16284]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[15493-15514]:ExpressionStatement[15493-15514]"
    }, {
      "left" : "LinkedList<Element> stack = tb.getStack();",
      "right" : "LinkedList<Element> stack = tb.getStack();",
      "info" : "VariableDeclarationStatement[15539-15581]:VariableDeclarationStatement[15539-15581]"
    }, {
      "left" : "for (int i = stack.size() - 1; i > 0; i--)",
      "right" : "for (int i = stack.size() - 1; i > 0; i--)",
      "info" : "ForStatement[15606-16075]:ForStatement[15606-16075]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15649-16075]:Block[15649-16075]"
    }, {
      "left" : "Element el = stack.get(i);",
      "right" : "Element el = stack.get(i);",
      "info" : "VariableDeclarationStatement[15679-15705]:VariableDeclarationStatement[15679-15705]"
    }, {
      "left" : "if (el.nodeName().equals(\"li\"))",
      "right" : "if (el.nodeName().equals(\"li\"))",
      "info" : "IfStatement[15734-15904]:IfStatement[15734-15904]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15766-15904]:Block[15766-15904]"
    }, {
      "left" : "tb.process(new Token.EndTag(\"li\"));",
      "right" : "tb.process(new Token.EndTag(\"li\"));",
      "info" : "ExpressionStatement[15800-15835]:ExpressionStatement[15800-15835]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[15868-15874]:BreakStatement[15868-15874]"
    }, {
      "left" : "if (tb.isSpecial(el) && !StringUtil.in(el.nodeName(), \"address\", \"div\", \"p\"))",
      "right" : "if (tb.isSpecial(el) && !StringUtil.in(el.nodeName(), \"address\", \"div\", \"p\"))",
      "info" : "IfStatement[15933-16049]:IfStatement[15933-16049]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[16043-16049]:BreakStatement[16043-16049]"
    }, {
      "left" : "if (tb.inButtonScope(\"p\"))",
      "right" : "if (tb.inButtonScope(\"p\"))",
      "info" : "IfStatement[16100-16217]:IfStatement[16100-16217]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16127-16217]:Block[16127-16217]"
    }, {
      "left" : "tb.process(new Token.EndTag(\"p\"));",
      "right" : "tb.process(new Token.EndTag(\"p\"));",
      "info" : "ExpressionStatement[16157-16191]:ExpressionStatement[16157-16191]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[16242-16262]:ExpressionStatement[16242-16262]"
    }, {
      "left" : "if (StringUtil.in(name, \"dd\", \"dt\"))",
      "right" : "if (StringUtil.in(name, \"dd\", \"dt\"))",
      "info" : "IfStatement[16290-27000]:IfStatement[16290-27000]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16327-17167]:Block[16327-17167]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[16353-16374]:ExpressionStatement[16353-16374]"
    }, {
      "left" : "LinkedList<Element> stack = tb.getStack();",
      "right" : "LinkedList<Element> stack = tb.getStack();",
      "info" : "VariableDeclarationStatement[16399-16441]:VariableDeclarationStatement[16399-16441]"
    }, {
      "left" : "for (int i = stack.size() - 1; i > 0; i--)",
      "right" : "for (int i = stack.size() - 1; i > 0; i--)",
      "info" : "ForStatement[16466-16958]:ForStatement[16466-16958]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16509-16958]:Block[16509-16958]"
    }, {
      "left" : "Element el = stack.get(i);",
      "right" : "Element el = stack.get(i);",
      "info" : "VariableDeclarationStatement[16539-16565]:VariableDeclarationStatement[16539-16565]"
    }, {
      "left" : "if (StringUtil.in(el.nodeName(), \"dd\", \"dt\"))",
      "right" : "if (StringUtil.in(el.nodeName(), \"dd\", \"dt\"))",
      "info" : "IfStatement[16594-16787]:IfStatement[16594-16787]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16640-16787]:Block[16640-16787]"
    }, {
      "left" : "tb.process(new Token.EndTag(el.nodeName()));",
      "right" : "tb.process(new Token.EndTag(el.nodeName()));",
      "info" : "ExpressionStatement[16674-16718]:ExpressionStatement[16674-16718]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[16751-16757]:BreakStatement[16751-16757]"
    }, {
      "left" : "if (tb.isSpecial(el) && !StringUtil.in(el.nodeName(), \"address\", \"div\", \"p\"))",
      "right" : "if (tb.isSpecial(el) && !StringUtil.in(el.nodeName(), \"address\", \"div\", \"p\"))",
      "info" : "IfStatement[16816-16932]:IfStatement[16816-16932]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[16926-16932]:BreakStatement[16926-16932]"
    }, {
      "left" : "if (tb.inButtonScope(\"p\"))",
      "right" : "if (tb.inButtonScope(\"p\"))",
      "info" : "IfStatement[16983-17100]:IfStatement[16983-17100]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17010-17100]:Block[17010-17100]"
    }, {
      "left" : "tb.process(new Token.EndTag(\"p\"));",
      "right" : "tb.process(new Token.EndTag(\"p\"));",
      "info" : "ExpressionStatement[17040-17074]:ExpressionStatement[17040-17074]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[17125-17145]:ExpressionStatement[17125-17145]"
    }, {
      "left" : "if (name.equals(\"plaintext\"))",
      "right" : "if (name.equals(\"plaintext\"))",
      "info" : "IfStatement[17173-27000]:IfStatement[17173-27000]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17203-17515]:Block[17203-17515]"
    }, {
      "left" : "if (tb.inButtonScope(\"p\"))",
      "right" : "if (tb.inButtonScope(\"p\"))",
      "info" : "IfStatement[17229-17346]:IfStatement[17229-17346]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17256-17346]:Block[17256-17346]"
    }, {
      "left" : "tb.process(new Token.EndTag(\"p\"));",
      "right" : "tb.process(new Token.EndTag(\"p\"));",
      "info" : "ExpressionStatement[17286-17320]:ExpressionStatement[17286-17320]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[17371-17391]:ExpressionStatement[17371-17391]"
    }, {
      "left" : "tb.tokeniser.transition(TokeniserState.PLAINTEXT);",
      "right" : "tb.tokeniser.transition(TokeniserState.PLAINTEXT);",
      "info" : "ExpressionStatement[17416-17466]:ExpressionStatement[17416-17466]"
    }, {
      "left" : "if (name.equals(\"button\"))",
      "right" : "if (name.equals(\"button\"))",
      "info" : "IfStatement[17521-27000]:IfStatement[17521-27000]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17548-18064]:Block[17548-18064]"
    }, {
      "left" : "if (tb.inButtonScope(\"button\"))",
      "right" : "if (tb.inButtonScope(\"button\"))",
      "info" : "IfStatement[17574-18042]:IfStatement[17574-18042]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17606-17846]:Block[17606-17846]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[17687-17702]:ExpressionStatement[17687-17702]"
    }, {
      "left" : "tb.process(new Token.EndTag(\"button\"));",
      "right" : "tb.process(new Token.EndTag(\"button\"));",
      "info" : "ExpressionStatement[17731-17770]:ExpressionStatement[17731-17770]"
    }, {
      "left" : "tb.process(startTag);",
      "right" : "tb.process(startTag);",
      "info" : "ExpressionStatement[17799-17820]:ExpressionStatement[17799-17820]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17852-18042]:Block[17852-18042]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[17882-17917]:ExpressionStatement[17882-17917]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[17946-17966]:ExpressionStatement[17946-17966]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[17995-18016]:ExpressionStatement[17995-18016]"
    }, {
      "left" : "if (name.equals(\"a\"))",
      "right" : "if (name.equals(\"a\"))",
      "info" : "IfStatement[18070-27000]:IfStatement[18070-27000]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18092-18849]:Block[18092-18849]"
    }, {
      "left" : "if (tb.getActiveFormattingElement(\"a\") != null)",
      "right" : "if (tb.getActiveFormattingElement(\"a\") != null)",
      "info" : "IfStatement[18118-18650]:IfStatement[18118-18650]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18166-18650]:Block[18166-18650]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[18196-18211]:ExpressionStatement[18196-18211]"
    }, {
      "left" : "tb.process(new Token.EndTag(\"a\"));",
      "right" : "tb.process(new Token.EndTag(\"a\"));",
      "info" : "ExpressionStatement[18240-18274]:ExpressionStatement[18240-18274]"
    }, {
      "left" : "Element remainingA = tb.getFromStack(\"a\");",
      "right" : "Element remainingA = tb.getFromStack(\"a\");",
      "info" : "VariableDeclarationStatement[18351-18393]:VariableDeclarationStatement[18351-18393]"
    }, {
      "left" : "if (remainingA != null)",
      "right" : "if (remainingA != null)",
      "info" : "IfStatement[18422-18624]:IfStatement[18422-18624]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18446-18624]:Block[18446-18624]"
    }, {
      "left" : "tb.removeFromActiveFormattingElements(remainingA);",
      "right" : "tb.removeFromActiveFormattingElements(remainingA);",
      "info" : "ExpressionStatement[18480-18530]:ExpressionStatement[18480-18530]"
    }, {
      "left" : "tb.removeFromStack(remainingA);",
      "right" : "tb.removeFromStack(remainingA);",
      "info" : "ExpressionStatement[18563-18594]:ExpressionStatement[18563-18594]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[18675-18710]:ExpressionStatement[18675-18710]"
    }, {
      "left" : "Element a = tb.insert(startTag);",
      "right" : "Element a = tb.insert(startTag);",
      "info" : "VariableDeclarationStatement[18735-18767]:VariableDeclarationStatement[18735-18767]"
    }, {
      "left" : "tb.pushActiveFormattingElements(a);",
      "right" : "tb.pushActiveFormattingElements(a);",
      "info" : "ExpressionStatement[18792-18827]:ExpressionStatement[18792-18827]"
    }, {
      "left" : "if (StringUtil.in(name,\n                            \"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"))",
      "right" : "if (StringUtil.in(name,\n                            \"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"))",
      "info" : "IfStatement[18855-27000]:IfStatement[18855-27000]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18992-19194]:Block[18992-19194]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[19018-19053]:ExpressionStatement[19018-19053]"
    }, {
      "left" : "Element el = tb.insert(startTag);",
      "right" : "Element el = tb.insert(startTag);",
      "info" : "VariableDeclarationStatement[19078-19111]:VariableDeclarationStatement[19078-19111]"
    }, {
      "left" : "tb.pushActiveFormattingElements(el);",
      "right" : "tb.pushActiveFormattingElements(el);",
      "info" : "ExpressionStatement[19136-19172]:ExpressionStatement[19136-19172]"
    }, {
      "left" : "if (name.equals(\"nobr\"))",
      "right" : "if (name.equals(\"nobr\"))",
      "info" : "IfStatement[19200-27000]:IfStatement[19200-27000]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19225-19677]:Block[19225-19677]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[19251-19286]:ExpressionStatement[19251-19286]"
    }, {
      "left" : "if (tb.inScope(\"nobr\"))",
      "right" : "if (tb.inScope(\"nobr\"))",
      "info" : "IfStatement[19311-19536]:IfStatement[19311-19536]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19335-19536]:Block[19335-19536]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[19365-19380]:ExpressionStatement[19365-19380]"
    }, {
      "left" : "tb.process(new Token.EndTag(\"nobr\"));",
      "right" : "tb.process(new Token.EndTag(\"nobr\"));",
      "info" : "ExpressionStatement[19409-19446]:ExpressionStatement[19409-19446]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[19475-19510]:ExpressionStatement[19475-19510]"
    }, {
      "left" : "Element el = tb.insert(startTag);",
      "right" : "Element el = tb.insert(startTag);",
      "info" : "VariableDeclarationStatement[19561-19594]:VariableDeclarationStatement[19561-19594]"
    }, {
      "left" : "tb.pushActiveFormattingElements(el);",
      "right" : "tb.pushActiveFormattingElements(el);",
      "info" : "ExpressionStatement[19619-19655]:ExpressionStatement[19619-19655]"
    }, {
      "left" : "if (StringUtil.in(name, \"applet\", \"marquee\", \"object\"))",
      "right" : "if (StringUtil.in(name, \"applet\", \"marquee\", \"object\"))",
      "info" : "IfStatement[19683-27000]:IfStatement[19683-27000]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19739-19976]:Block[19739-19976]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[19765-19800]:ExpressionStatement[19765-19800]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[19825-19845]:ExpressionStatement[19825-19845]"
    }, {
      "left" : "tb.insertMarkerToFormattingElements();",
      "right" : "tb.insertMarkerToFormattingElements();",
      "info" : "ExpressionStatement[19870-19908]:ExpressionStatement[19870-19908]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[19933-19954]:ExpressionStatement[19933-19954]"
    }, {
      "left" : "if (name.equals(\"table\"))",
      "right" : "if (name.equals(\"table\"))",
      "info" : "IfStatement[19982-27000]:IfStatement[19982-27000]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20008-20375]:Block[20008-20375]"
    }, {
      "left" : "if (tb.getDocument().quirksMode() != Document.QuirksMode.quirks && tb.inButtonScope(\"p\"))",
      "right" : "if (tb.getDocument().quirksMode() != Document.QuirksMode.quirks && tb.inButtonScope(\"p\"))",
      "info" : "IfStatement[20034-20214]:IfStatement[20034-20214]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20124-20214]:Block[20124-20214]"
    }, {
      "left" : "tb.process(new Token.EndTag(\"p\"));",
      "right" : "tb.process(new Token.EndTag(\"p\"));",
      "info" : "ExpressionStatement[20154-20188]:ExpressionStatement[20154-20188]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[20239-20259]:ExpressionStatement[20239-20259]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[20284-20305]:ExpressionStatement[20284-20305]"
    }, {
      "left" : "tb.transition(InTable);",
      "right" : "tb.transition(InTable);",
      "info" : "ExpressionStatement[20330-20353]:ExpressionStatement[20330-20353]"
    }, {
      "left" : "if (StringUtil.in(name, \"area\", \"br\", \"embed\", \"img\", \"keygen\", \"wbr\"))",
      "right" : "if (StringUtil.in(name, \"area\", \"br\", \"embed\", \"img\", \"keygen\", \"wbr\"))",
      "info" : "IfStatement[20381-27000]:IfStatement[20381-27000]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20453-20632]:Block[20453-20632]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[20479-20514]:ExpressionStatement[20479-20514]"
    }, {
      "left" : "tb.insertEmpty(startTag);",
      "right" : "tb.insertEmpty(startTag);",
      "info" : "ExpressionStatement[20539-20564]:ExpressionStatement[20539-20564]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[20589-20610]:ExpressionStatement[20589-20610]"
    }, {
      "left" : "if (name.equals(\"input\"))",
      "right" : "if (name.equals(\"input\"))",
      "info" : "IfStatement[20638-27000]:IfStatement[20638-27000]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20664-20933]:Block[20664-20933]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[20690-20725]:ExpressionStatement[20690-20725]"
    }, {
      "left" : "Element el = tb.insertEmpty(startTag);",
      "right" : "Element el = tb.insertEmpty(startTag);",
      "info" : "VariableDeclarationStatement[20750-20788]:VariableDeclarationStatement[20750-20788]"
    }, {
      "left" : "if (!el.attr(\"type\").equalsIgnoreCase(\"hidden\"))",
      "right" : "if (!el.attr(\"type\").equalsIgnoreCase(\"hidden\"))",
      "info" : "IfStatement[20813-20911]:IfStatement[20813-20911]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[20890-20911]:ExpressionStatement[20890-20911]"
    }, {
      "left" : "if (StringUtil.in(name, \"param\", \"source\", \"track\"))",
      "right" : "if (StringUtil.in(name, \"param\", \"source\", \"track\"))",
      "info" : "IfStatement[20939-27000]:IfStatement[20939-27000]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20992-21065]:Block[20992-21065]"
    }, {
      "left" : "tb.insertEmpty(startTag);",
      "right" : "tb.insertEmpty(startTag);",
      "info" : "ExpressionStatement[21018-21043]:ExpressionStatement[21018-21043]"
    }, {
      "left" : "if (name.equals(\"hr\"))",
      "right" : "if (name.equals(\"hr\"))",
      "info" : "IfStatement[21071-27000]:IfStatement[21071-27000]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21094-21355]:Block[21094-21355]"
    }, {
      "left" : "if (tb.inButtonScope(\"p\"))",
      "right" : "if (tb.inButtonScope(\"p\"))",
      "info" : "IfStatement[21120-21237]:IfStatement[21120-21237]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21147-21237]:Block[21147-21237]"
    }, {
      "left" : "tb.process(new Token.EndTag(\"p\"));",
      "right" : "tb.process(new Token.EndTag(\"p\"));",
      "info" : "ExpressionStatement[21177-21211]:ExpressionStatement[21177-21211]"
    }, {
      "left" : "tb.insertEmpty(startTag);",
      "right" : "tb.insertEmpty(startTag);",
      "info" : "ExpressionStatement[21262-21287]:ExpressionStatement[21262-21287]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[21312-21333]:ExpressionStatement[21312-21333]"
    }, {
      "left" : "if (name.equals(\"image\"))",
      "right" : "if (name.equals(\"image\"))",
      "info" : "IfStatement[21361-27000]:IfStatement[21361-27000]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21387-21563]:Block[21387-21563]"
    }, {
      "left" : "startTag.name(\"img\");",
      "right" : "startTag.name(\"img\");",
      "info" : "ExpressionStatement[21467-21488]:ExpressionStatement[21467-21488]"
    }, {
      "left" : "return tb.process(startTag);",
      "right" : "return tb.process(startTag);",
      "info" : "ReturnStatement[21513-21541]:ReturnStatement[21513-21541]"
    }, {
      "left" : "if (name.equals(\"isindex\"))",
      "right" : "if (name.equals(\"isindex\"))",
      "info" : "IfStatement[21569-27000]:IfStatement[21569-27000]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21597-23349]:Block[21597-23349]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[21691-21706]:ExpressionStatement[21691-21706]"
    }, {
      "left" : "if (tb.getFormElement() != null)",
      "right" : "if (tb.getFormElement() != null)",
      "info" : "IfStatement[21731-21805]:IfStatement[21731-21805]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[21792-21805]:ReturnStatement[21792-21805]"
    }, {
      "left" : "tb.tokeniser.acknowledgeSelfClosingFlag();",
      "right" : "tb.tokeniser.acknowledgeSelfClosingFlag();",
      "info" : "ExpressionStatement[21831-21873]:ExpressionStatement[21831-21873]"
    }, {
      "left" : "tb.process(new Token.StartTag(\"form\"));",
      "right" : "tb.process(new Token.StartTag(\"form\"));",
      "info" : "ExpressionStatement[21898-21937]:ExpressionStatement[21898-21937]"
    }, {
      "left" : "if (startTag.attributes.hasKey(\"action\"))",
      "right" : "if (startTag.attributes.hasKey(\"action\"))",
      "info" : "IfStatement[21962-22179]:IfStatement[21962-22179]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22004-22179]:Block[22004-22179]"
    }, {
      "left" : "Element form = tb.getFormElement();",
      "right" : "Element form = tb.getFormElement();",
      "info" : "VariableDeclarationStatement[22034-22069]:VariableDeclarationStatement[22034-22069]"
    }, {
      "left" : "form.attr(\"action\", startTag.attributes.get(\"action\"));",
      "right" : "form.attr(\"action\", startTag.attributes.get(\"action\"));",
      "info" : "ExpressionStatement[22098-22153]:ExpressionStatement[22098-22153]"
    }, {
      "left" : "tb.process(new Token.StartTag(\"hr\"));",
      "right" : "tb.process(new Token.StartTag(\"hr\"));",
      "info" : "ExpressionStatement[22204-22241]:ExpressionStatement[22204-22241]"
    }, {
      "left" : "tb.process(new Token.StartTag(\"label\"));",
      "right" : "tb.process(new Token.StartTag(\"label\"));",
      "info" : "ExpressionStatement[22266-22306]:ExpressionStatement[22266-22306]"
    }, {
      "left" : "String prompt = startTag.attributes.hasKey(\"prompt\") ?\n                                startTag.attributes.get(\"prompt\") :\n                                \"This is a searchable index. Enter search keywords: \";",
      "right" : "String prompt = startTag.attributes.hasKey(\"prompt\") ?\n                                startTag.attributes.get(\"prompt\") :\n                                \"This is a searchable index. Enter search keywords: \";",
      "info" : "VariableDeclarationStatement[22381-22590]:VariableDeclarationStatement[22381-22590]"
    }, {
      "left" : "tb.process(new Token.Character(prompt));",
      "right" : "tb.process(new Token.Character(prompt));",
      "info" : "ExpressionStatement[22616-22656]:ExpressionStatement[22616-22656]"
    }, {
      "left" : "Attributes inputAttribs = new Attributes();",
      "right" : "Attributes inputAttribs = new Attributes();",
      "info" : "VariableDeclarationStatement[22715-22758]:VariableDeclarationStatement[22715-22758]"
    }, {
      "left" : "for (Attribute attr : startTag.attributes)",
      "right" : "for (Attribute attr : startTag.attributes)",
      "info" : "EnhancedForStatement[22783-23000]:EnhancedForStatement[22783-23000]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22826-23000]:Block[22826-23000]"
    }, {
      "left" : "if (!StringUtil.in(attr.getKey(), \"name\", \"action\", \"prompt\"))",
      "right" : "if (!StringUtil.in(attr.getKey(), \"name\", \"action\", \"prompt\"))",
      "info" : "IfStatement[22856-22974]:IfStatement[22856-22974]"
    }, {
      "left" : "inputAttribs.put(attr);",
      "right" : "inputAttribs.put(attr);",
      "info" : "ExpressionStatement[22951-22974]:ExpressionStatement[22951-22974]"
    }, {
      "left" : "inputAttribs.put(\"name\", \"isindex\");",
      "right" : "inputAttribs.put(\"name\", \"isindex\");",
      "info" : "ExpressionStatement[23025-23061]:ExpressionStatement[23025-23061]"
    }, {
      "left" : "tb.process(new Token.StartTag(\"input\", inputAttribs));",
      "right" : "tb.process(new Token.StartTag(\"input\", inputAttribs));",
      "info" : "ExpressionStatement[23086-23140]:ExpressionStatement[23086-23140]"
    }, {
      "left" : "tb.process(new Token.EndTag(\"label\"));",
      "right" : "tb.process(new Token.EndTag(\"label\"));",
      "info" : "ExpressionStatement[23165-23203]:ExpressionStatement[23165-23203]"
    }, {
      "left" : "tb.process(new Token.StartTag(\"hr\"));",
      "right" : "tb.process(new Token.StartTag(\"hr\"));",
      "info" : "ExpressionStatement[23228-23265]:ExpressionStatement[23228-23265]"
    }, {
      "left" : "tb.process(new Token.EndTag(\"form\"));",
      "right" : "tb.process(new Token.EndTag(\"form\"));",
      "info" : "ExpressionStatement[23290-23327]:ExpressionStatement[23290-23327]"
    }, {
      "left" : "if (name.equals(\"textarea\"))",
      "right" : "if (name.equals(\"textarea\"))",
      "info" : "IfStatement[23355-27000]:IfStatement[23355-27000]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23384-23896]:Block[23384-23896]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[23410-23430]:ExpressionStatement[23410-23430]"
    }, {
      "left" : "tb.tokeniser.transition(TokeniserState.Rcdata);",
      "right" : "tb.tokeniser.transition(TokeniserState.Rcdata);",
      "info" : "ExpressionStatement[23688-23735]:ExpressionStatement[23688-23735]"
    }, {
      "left" : "tb.markInsertionMode();",
      "right" : "tb.markInsertionMode();",
      "info" : "ExpressionStatement[23760-23783]:ExpressionStatement[23760-23783]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[23808-23829]:ExpressionStatement[23808-23829]"
    }, {
      "left" : "tb.transition(Text);",
      "right" : "tb.transition(Text);",
      "info" : "ExpressionStatement[23854-23874]:ExpressionStatement[23854-23874]"
    }, {
      "left" : "if (name.equals(\"xmp\"))",
      "right" : "if (name.equals(\"xmp\"))",
      "info" : "IfStatement[23902-27000]:IfStatement[23902-27000]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23926-24250]:Block[23926-24250]"
    }, {
      "left" : "if (tb.inButtonScope(\"p\"))",
      "right" : "if (tb.inButtonScope(\"p\"))",
      "info" : "IfStatement[23952-24069]:IfStatement[23952-24069]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23979-24069]:Block[23979-24069]"
    }, {
      "left" : "tb.process(new Token.EndTag(\"p\"));",
      "right" : "tb.process(new Token.EndTag(\"p\"));",
      "info" : "ExpressionStatement[24009-24043]:ExpressionStatement[24009-24043]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[24094-24129]:ExpressionStatement[24094-24129]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[24154-24175]:ExpressionStatement[24154-24175]"
    }, {
      "left" : "handleRawtext(startTag, tb);",
      "right" : "handleRawtext(startTag, tb);",
      "info" : "ExpressionStatement[24200-24228]:ExpressionStatement[24200-24228]"
    }, {
      "left" : "if (name.equals(\"iframe\"))",
      "right" : "if (name.equals(\"iframe\"))",
      "info" : "IfStatement[24256-27000]:IfStatement[24256-27000]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24283-24405]:Block[24283-24405]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[24309-24330]:ExpressionStatement[24309-24330]"
    }, {
      "left" : "handleRawtext(startTag, tb);",
      "right" : "handleRawtext(startTag, tb);",
      "info" : "ExpressionStatement[24355-24383]:ExpressionStatement[24355-24383]"
    }, {
      "left" : "if (name.equals(\"noembed\"))",
      "right" : "if (name.equals(\"noembed\"))",
      "info" : "IfStatement[24411-27000]:IfStatement[24411-27000]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24439-24581]:Block[24439-24581]"
    }, {
      "left" : "handleRawtext(startTag, tb);",
      "right" : "handleRawtext(startTag, tb);",
      "info" : "ExpressionStatement[24531-24559]:ExpressionStatement[24531-24559]"
    }, {
      "left" : "if (name.equals(\"select\"))",
      "right" : "if (name.equals(\"select\"))",
      "info" : "IfStatement[24587-27000]:IfStatement[24587-27000]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24614-25150]:Block[24614-25150]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[24640-24675]:ExpressionStatement[24640-24675]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[24700-24720]:ExpressionStatement[24700-24720]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[24745-24766]:ExpressionStatement[24745-24766]"
    }, {
      "left" : "HtmlTreeBuilderState state = tb.state();",
      "right" : "HtmlTreeBuilderState state = tb.state();",
      "info" : "VariableDeclarationStatement[24792-24832]:VariableDeclarationStatement[24792-24832]"
    }, {
      "left" : "if (state.equals(InTable) || state.equals(InCaption) || state.equals(InTableBody) || state.equals(InRow) || state.equals(InCell))",
      "right" : "if (state.equals(InTable) || state.equals(InCaption) || state.equals(InTableBody) || state.equals(InRow) || state.equals(InCell))",
      "info" : "IfStatement[24857-25128]:IfStatement[24857-25128]"
    }, {
      "left" : "tb.transition(InSelectInTable);",
      "right" : "tb.transition(InSelectInTable);",
      "info" : "ExpressionStatement[25015-25046]:ExpressionStatement[25015-25046]"
    }, {
      "left" : "tb.transition(InSelect);",
      "right" : "tb.transition(InSelect);",
      "info" : "ExpressionStatement[25104-25128]:ExpressionStatement[25104-25128]"
    }, {
      "left" : "if (StringUtil.in(\"optgroup\", \"option\"))",
      "right" : "if (StringUtil.in(\"optgroup\", \"option\"))",
      "info" : "IfStatement[25156-27000]:IfStatement[25156-27000]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25197-25470]:Block[25197-25470]"
    }, {
      "left" : "if (tb.currentElement().nodeName().equals(\"option\"))",
      "right" : "if (tb.currentElement().nodeName().equals(\"option\"))",
      "info" : "IfStatement[25223-25343]:IfStatement[25223-25343]"
    }, {
      "left" : "tb.process(new Token.EndTag(\"option\"));",
      "right" : "tb.process(new Token.EndTag(\"option\"));",
      "info" : "ExpressionStatement[25304-25343]:ExpressionStatement[25304-25343]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[25368-25403]:ExpressionStatement[25368-25403]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[25428-25448]:ExpressionStatement[25428-25448]"
    }, {
      "left" : "if (StringUtil.in(\"rp\", \"rt\"))",
      "right" : "if (StringUtil.in(\"rp\", \"rt\"))",
      "info" : "IfStatement[25476-27000]:IfStatement[25476-27000]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25507-25974]:Block[25507-25974]"
    }, {
      "left" : "if (tb.inScope(\"ruby\"))",
      "right" : "if (tb.inScope(\"ruby\"))",
      "info" : "IfStatement[25533-25952]:IfStatement[25533-25952]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25557-25952]:Block[25557-25952]"
    }, {
      "left" : "tb.generateImpliedEndTags();",
      "right" : "tb.generateImpliedEndTags();",
      "info" : "ExpressionStatement[25587-25615]:ExpressionStatement[25587-25615]"
    }, {
      "left" : "if (!tb.currentElement().nodeName().equals(\"ruby\"))",
      "right" : "if (!tb.currentElement().nodeName().equals(\"ruby\"))",
      "info" : "IfStatement[25644-25877]:IfStatement[25644-25877]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25696-25877]:Block[25696-25877]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[25730-25745]:ExpressionStatement[25730-25745]"
    }, {
      "left" : "tb.popStackToBefore(\"ruby\");",
      "right" : "tb.popStackToBefore(\"ruby\");",
      "info" : "ExpressionStatement[25778-25806]:ExpressionStatement[25778-25806]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[25906-25926]:ExpressionStatement[25906-25926]"
    }, {
      "left" : "if (name.equals(\"math\"))",
      "right" : "if (name.equals(\"math\"))",
      "info" : "IfStatement[25980-27000]:IfStatement[25980-27000]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26005-26300]:Block[26005-26300]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[26031-26066]:ExpressionStatement[26031-26066]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[26191-26211]:ExpressionStatement[26191-26211]"
    }, {
      "left" : "tb.tokeniser.acknowledgeSelfClosingFlag();",
      "right" : "tb.tokeniser.acknowledgeSelfClosingFlag();",
      "info" : "ExpressionStatement[26236-26278]:ExpressionStatement[26236-26278]"
    }, {
      "left" : "if (name.equals(\"svg\"))",
      "right" : "if (name.equals(\"svg\"))",
      "info" : "IfStatement[26306-27000]:IfStatement[26306-27000]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26330-26614]:Block[26330-26614]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[26356-26391]:ExpressionStatement[26356-26391]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[26505-26525]:ExpressionStatement[26505-26525]"
    }, {
      "left" : "tb.tokeniser.acknowledgeSelfClosingFlag();",
      "right" : "tb.tokeniser.acknowledgeSelfClosingFlag();",
      "info" : "ExpressionStatement[26550-26592]:ExpressionStatement[26550-26592]"
    }, {
      "left" : "if (StringUtil.in(name,\n                            \"caption\", \"col\", \"colgroup\", \"frame\", \"head\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"))",
      "right" : "if (StringUtil.in(name,\n                            \"caption\", \"col\", \"colgroup\", \"frame\", \"head\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"))",
      "info" : "IfStatement[26620-27000]:IfStatement[26620-27000]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26765-26866]:Block[26765-26866]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[26791-26806]:ExpressionStatement[26791-26806]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[26831-26844]:ReturnStatement[26831-26844]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26872-27000]:Block[26872-27000]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[26898-26933]:ExpressionStatement[26898-26933]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[26958-26978]:ExpressionStatement[26958-26978]"
    }, {
      "left" : "case EndTag:",
      "right" : "case EndTag:",
      "info" : "SwitchCase[27045-27057]:SwitchCase[27045-27057]"
    }, {
      "left" : "Token.EndTag endTag = t.asEndTag();",
      "right" : "Token.EndTag endTag = t.asEndTag();",
      "info" : "VariableDeclarationStatement[27078-27113]:VariableDeclarationStatement[27078-27113]"
    }, {
      "left" : "name = endTag.name();",
      "right" : "name = endTag.name();",
      "info" : "ExpressionStatement[27134-27155]:ExpressionStatement[27134-27155]"
    }, {
      "left" : "if (name.equals(\"body\"))",
      "right" : "if (name.equals(\"body\"))",
      "info" : "IfStatement[27176-38453]:IfStatement[27176-38533]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27201-27634]:Block[27201-27634]"
    }, {
      "left" : "if (!tb.inScope(\"body\"))",
      "right" : "if (!tb.inScope(\"body\"))",
      "info" : "IfStatement[27227-27612]:IfStatement[27227-27612]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27252-27365]:Block[27252-27365]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[27282-27297]:ExpressionStatement[27282-27297]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[27326-27339]:ReturnStatement[27326-27339]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27371-27612]:Block[27371-27612]"
    }, {
      "left" : "tb.transition(AfterBody);",
      "right" : "tb.transition(AfterBody);",
      "info" : "ExpressionStatement[27561-27586]:ExpressionStatement[27561-27586]"
    }, {
      "left" : "if (name.equals(\"html\"))",
      "right" : "if (name.equals(\"html\"))",
      "info" : "IfStatement[27640-38453]:IfStatement[27640-38533]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27665-27866]:Block[27665-27866]"
    }, {
      "left" : "boolean notIgnored = tb.process(new Token.EndTag(\"body\"));",
      "right" : "boolean notIgnored = tb.process(new Token.EndTag(\"body\"));",
      "info" : "VariableDeclarationStatement[27691-27749]:VariableDeclarationStatement[27691-27749]"
    }, {
      "left" : "if (notIgnored)",
      "right" : "if (notIgnored)",
      "info" : "IfStatement[27774-27844]:IfStatement[27774-27844]"
    }, {
      "left" : "return tb.process(endTag);",
      "right" : "return tb.process(endTag);",
      "info" : "ReturnStatement[27818-27844]:ReturnStatement[27818-27844]"
    }, {
      "left" : "if (StringUtil.in(name,\n                            \"address\", \"article\", \"aside\", \"blockquote\", \"button\", \"center\", \"details\", \"dir\", \"div\",\n                            \"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"listing\", \"menu\",\n                            \"nav\", \"ol\", \"pre\", \"section\", \"summary\", \"ul\"))",
      "right" : "if (StringUtil.in(name,\n                            \"address\", \"article\", \"aside\", \"blockquote\", \"button\", \"center\", \"details\", \"dir\", \"div\",\n                            \"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"listing\", \"menu\",\n                            \"nav\", \"ol\", \"pre\", \"section\", \"summary\", \"ul\"))",
      "info" : "IfStatement[27872-38453]:IfStatement[27872-38533]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28210-28768]:Block[28210-28768]"
    }, {
      "left" : "if (!tb.inScope(name))",
      "right" : "if (!tb.inScope(name))",
      "info" : "IfStatement[28292-28746]:IfStatement[28292-28746]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28315-28476]:Block[28315-28476]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[28393-28408]:ExpressionStatement[28393-28408]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[28437-28450]:ReturnStatement[28437-28450]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28482-28746]:Block[28482-28746]"
    }, {
      "left" : "tb.generateImpliedEndTags();",
      "right" : "tb.generateImpliedEndTags();",
      "info" : "ExpressionStatement[28512-28540]:ExpressionStatement[28512-28540]"
    }, {
      "left" : "if (!tb.currentElement().nodeName().equals(name))",
      "right" : "if (!tb.currentElement().nodeName().equals(name))",
      "info" : "IfStatement[28569-28666]:IfStatement[28569-28666]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[28651-28666]:ExpressionStatement[28651-28666]"
    }, {
      "left" : "tb.popStackToClose(name);",
      "right" : "tb.popStackToClose(name);",
      "info" : "ExpressionStatement[28695-28720]:ExpressionStatement[28695-28720]"
    }, {
      "left" : "if (name.equals(\"form\"))",
      "right" : "if (name.equals(\"form\"))",
      "info" : "IfStatement[28774-38453]:IfStatement[28774-38533]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28799-29491]:Block[28799-29491]"
    }, {
      "left" : "Element currentForm = tb.getFormElement();",
      "right" : "Element currentForm = tb.getFormElement();",
      "info" : "VariableDeclarationStatement[28825-28867]:VariableDeclarationStatement[28825-28867]"
    }, {
      "left" : "tb.setFormElement(null);",
      "right" : "tb.setFormElement(null);",
      "info" : "ExpressionStatement[28892-28916]:ExpressionStatement[28892-28916]"
    }, {
      "left" : "if (currentForm == null || !tb.inScope(name))",
      "right" : "if (currentForm == null || !tb.inScope(name))",
      "info" : "IfStatement[28941-29469]:IfStatement[28941-29469]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28987-29100]:Block[28987-29100]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[29017-29032]:ExpressionStatement[29017-29032]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[29061-29074]:ReturnStatement[29061-29074]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29106-29469]:Block[29106-29469]"
    }, {
      "left" : "tb.generateImpliedEndTags();",
      "right" : "tb.generateImpliedEndTags();",
      "info" : "ExpressionStatement[29136-29164]:ExpressionStatement[29136-29164]"
    }, {
      "left" : "if (!tb.currentElement().nodeName().equals(name))",
      "right" : "if (!tb.currentElement().nodeName().equals(name))",
      "info" : "IfStatement[29193-29290]:IfStatement[29193-29290]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[29275-29290]:ExpressionStatement[29275-29290]"
    }, {
      "left" : "tb.removeFromStack(currentForm);",
      "right" : "tb.removeFromStack(currentForm);",
      "info" : "ExpressionStatement[29411-29443]:ExpressionStatement[29411-29443]"
    }, {
      "left" : "if (name.equals(\"p\"))",
      "right" : "if (name.equals(\"p\"))",
      "info" : "IfStatement[29497-38453]:IfStatement[29497-38533]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29519-30108]:Block[29519-30108]"
    }, {
      "left" : "if (!tb.inButtonScope(name))",
      "right" : "if (!tb.inButtonScope(name))",
      "info" : "IfStatement[29545-30086]:IfStatement[29545-30086]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29574-29812]:Block[29574-29812]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[29604-29619]:ExpressionStatement[29604-29619]"
    }, {
      "left" : "tb.process(new Token.StartTag(name));",
      "right" : "tb.process(new Token.StartTag(name));",
      "info" : "ExpressionStatement[29648-29685]:ExpressionStatement[29648-29685]"
    }, {
      "left" : "return tb.process(endTag);",
      "right" : "return tb.process(endTag);",
      "info" : "ReturnStatement[29760-29786]:ReturnStatement[29760-29786]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29818-30086]:Block[29818-30086]"
    }, {
      "left" : "tb.generateImpliedEndTags(name);",
      "right" : "tb.generateImpliedEndTags(name);",
      "info" : "ExpressionStatement[29848-29880]:ExpressionStatement[29848-29880]"
    }, {
      "left" : "if (!tb.currentElement().nodeName().equals(name))",
      "right" : "if (!tb.currentElement().nodeName().equals(name))",
      "info" : "IfStatement[29909-30006]:IfStatement[29909-30006]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[29991-30006]:ExpressionStatement[29991-30006]"
    }, {
      "left" : "tb.popStackToClose(name);",
      "right" : "tb.popStackToClose(name);",
      "info" : "ExpressionStatement[30035-30060]:ExpressionStatement[30035-30060]"
    }, {
      "left" : "if (name.equals(\"li\"))",
      "right" : "if (name.equals(\"li\"))",
      "info" : "IfStatement[30114-38453]:IfStatement[30114-38533]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30137-30603]:Block[30137-30603]"
    }, {
      "left" : "if (!tb.inListItemScope(name))",
      "right" : "if (!tb.inListItemScope(name))",
      "info" : "IfStatement[30163-30581]:IfStatement[30163-30581]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30194-30307]:Block[30194-30307]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[30224-30239]:ExpressionStatement[30224-30239]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[30268-30281]:ReturnStatement[30268-30281]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30313-30581]:Block[30313-30581]"
    }, {
      "left" : "tb.generateImpliedEndTags(name);",
      "right" : "tb.generateImpliedEndTags(name);",
      "info" : "ExpressionStatement[30343-30375]:ExpressionStatement[30343-30375]"
    }, {
      "left" : "if (!tb.currentElement().nodeName().equals(name))",
      "right" : "if (!tb.currentElement().nodeName().equals(name))",
      "info" : "IfStatement[30404-30501]:IfStatement[30404-30501]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[30486-30501]:ExpressionStatement[30486-30501]"
    }, {
      "left" : "tb.popStackToClose(name);",
      "right" : "tb.popStackToClose(name);",
      "info" : "ExpressionStatement[30530-30555]:ExpressionStatement[30530-30555]"
    }, {
      "left" : "if (StringUtil.in(name, \"dd\", \"dt\"))",
      "right" : "if (StringUtil.in(name, \"dd\", \"dt\"))",
      "info" : "IfStatement[30609-38453]:IfStatement[30609-38533]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30646-31104]:Block[30646-31104]"
    }, {
      "left" : "if (!tb.inScope(name))",
      "right" : "if (!tb.inScope(name))",
      "info" : "IfStatement[30672-31082]:IfStatement[30672-31082]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30695-30808]:Block[30695-30808]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[30725-30740]:ExpressionStatement[30725-30740]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[30769-30782]:ReturnStatement[30769-30782]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30814-31082]:Block[30814-31082]"
    }, {
      "left" : "tb.generateImpliedEndTags(name);",
      "right" : "tb.generateImpliedEndTags(name);",
      "info" : "ExpressionStatement[30844-30876]:ExpressionStatement[30844-30876]"
    }, {
      "left" : "if (!tb.currentElement().nodeName().equals(name))",
      "right" : "if (!tb.currentElement().nodeName().equals(name))",
      "info" : "IfStatement[30905-31002]:IfStatement[30905-31002]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[30987-31002]:ExpressionStatement[30987-31002]"
    }, {
      "left" : "tb.popStackToClose(name);",
      "right" : "tb.popStackToClose(name);",
      "info" : "ExpressionStatement[31031-31056]:ExpressionStatement[31031-31056]"
    }, {
      "left" : "if (StringUtil.in(name, \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\"))",
      "right" : "if (StringUtil.in(name, \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\"))",
      "info" : "IfStatement[31110-38453]:IfStatement[31110-38533]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31171-31703]:Block[31171-31703]"
    }, {
      "left" : "if (!tb.inScope(new String[]{\"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\"}))",
      "right" : "if (!tb.inScope(new String[]{\"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\"}))",
      "info" : "IfStatement[31197-31681]:IfStatement[31197-31681]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31264-31377]:Block[31264-31377]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[31294-31309]:ExpressionStatement[31294-31309]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[31338-31351]:ReturnStatement[31338-31351]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31383-31681]:Block[31383-31681]"
    }, {
      "left" : "tb.generateImpliedEndTags(name);",
      "right" : "tb.generateImpliedEndTags(name);",
      "info" : "ExpressionStatement[31413-31445]:ExpressionStatement[31413-31445]"
    }, {
      "left" : "if (!tb.currentElement().nodeName().equals(name))",
      "right" : "if (!tb.currentElement().nodeName().equals(name))",
      "info" : "IfStatement[31474-31571]:IfStatement[31474-31571]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[31556-31571]:ExpressionStatement[31556-31571]"
    }, {
      "left" : "tb.popStackToClose(\"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\");",
      "right" : "tb.popStackToClose(\"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\");",
      "info" : "ExpressionStatement[31600-31655]:ExpressionStatement[31600-31655]"
    }, {
      "left" : "if (name.equals(\"sarcasm\"))",
      "right" : "if (name.equals(\"sarcasm\"))",
      "info" : "IfStatement[31709-38453]:IfStatement[31709-38533]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31737-31848]:Block[31737-31848]"
    }, {
      "left" : "return anyOtherEndTag(t, tb);",
      "right" : "return anyOtherEndTag(t, tb);",
      "info" : "ReturnStatement[31797-31826]:ReturnStatement[31797-31826]"
    }, {
      "left" : "if (StringUtil.in(name,\n                            \"a\", \"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"nobr\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"))",
      "right" : "if (StringUtil.in(name,\n                            \"a\", \"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"nobr\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"))",
      "info" : "IfStatement[31854-38453]:IfStatement[31854-38533]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32004-37532]:Block[32004-37612]"
    }, {
      "left" : "OUTER:\n                        for (int i = 0; i < 8; i++) {\n                            Element formatEl = tb.getActiveFormattingElement(name);\n                            if (formatEl == null)\n                                return anyOtherEndTag(t, tb);\n                            else if (!tb.onStack(formatEl)) {\n                                tb.error(this);\n                                tb.removeFromActiveFormattingElements(formatEl);\n                                return true;\n                            } else if (!tb.inScope(formatEl.nodeName())) {\n                                tb.error(this);\n                                return false;\n                            } else if (tb.currentElement() != formatEl)\n                                tb.error(this);\n\n                            Element furthestBlock = null;\n                            Element commonAncestor = null;\n                            boolean seenFormattingElement = false;\n                            LinkedList<Element> stack = tb.getStack();\n                            // the spec doesn't limit to < 64, but in degenerate cases (9000+ stack depth) this prevents\n                            // run-aways\n                            for (int si = 0; si < stack.size() && si < 64; si++) {\n                                Element el = stack.get(si);\n                                if (el == formatEl) {\n                                    commonAncestor = stack.get(si - 1);\n                                    seenFormattingElement = true;\n                                } else if (seenFormattingElement && tb.isSpecial(el)) {\n                                    furthestBlock = el;\n                                    break;\n                                }\n                            }\n                            if (furthestBlock == null) {\n                                tb.popStackToClose(formatEl.nodeName());\n                                tb.removeFromActiveFormattingElements(formatEl);\n                                return true;\n                            }\n\n                            // todo: Let a bookmark note the position of the formatting element in the list of active formatting elements relative to the elements on either side of it in the list.\n                            // does that mean: int pos of format el in list?\n                            Element node = furthestBlock;\n                            Element lastNode = furthestBlock;\n                            INNER:\n                            for (int j = 0; j < 3; j++) {\n                                if (tb.onStack(node))\n                                    node = tb.aboveOnStack(node);\n                                if (!tb.isInActiveFormattingElements(node)) { // note no bookmark check\n                                    tb.removeFromStack(node);\n                                    continue INNER;\n                                } else if (node == formatEl)\n                                    break INNER;\n\n                                Element replacement = new Element(Tag.valueOf(node.nodeName()), tb.getBaseUri());\n                                tb.replaceActiveFormattingElement(node, replacement);\n                                tb.replaceOnStack(node, replacement);\n                                node = replacement;\n\n                                if (lastNode == furthestBlock) {\n                                    // todo: move the aforementioned bookmark to be immediately after the new node in the list of active formatting elements.\n                                    // not getting how this bookmark both straddles the element above, but is inbetween here...\n                                }\n                                if (lastNode.parent() != null)\n                                    lastNode.remove();\n                                node.appendChild(lastNode);\n\n                                lastNode = node;\n                            }\n\n                            if (StringUtil.in(commonAncestor.nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) {\n                                if (lastNode.parent() != null)\n                                    lastNode.remove();\n                                tb.insertInFosterParent(lastNode);\n                            } else {\n                                if (lastNode.parent() != null)\n                                    lastNode.remove();\n                                commonAncestor.appendChild(lastNode);\n                            }\n\n                            Element adopter = new Element(formatEl.tag(), tb.getBaseUri());\n                            Node[] childNodes = furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()]);\n                            for (Node childNode : childNodes) {\n                                adopter.appendChild(childNode); // append will reparent. thus the clone to avoid concurrent mod.\n                            }\n                            furthestBlock.appendChild(adopter);\n                            tb.removeFromActiveFormattingElements(formatEl);\n                            // todo: insert the new element into the list of active formatting elements at the position of the aforementioned bookmark.\n                            tb.removeFromStack(formatEl);\n                            tb.insertOnStackAfter(furthestBlock, adopter);\n                        }",
      "right" : "OUTER:\n                        for (int i = 0; i < 8; i++) {\n                            Element formatEl = tb.getActiveFormattingElement(name);\n                            if (formatEl == null)\n                                return anyOtherEndTag(t, tb);\n                            else if (!tb.onStack(formatEl)) {\n                                tb.error(this);\n                                tb.removeFromActiveFormattingElements(formatEl);\n                                return true;\n                            } else if (!tb.inScope(formatEl.nodeName())) {\n                                tb.error(this);\n                                return false;\n                            } else if (tb.currentElement() != formatEl)\n                                tb.error(this);\n\n                            Element furthestBlock = null;\n                            Element commonAncestor = null;\n                            boolean seenFormattingElement = false;\n                            LinkedList<Element> stack = tb.getStack();\n                            // the spec doesn't limit to < 64, but in degenerate cases (9000+ stack depth) this prevents\n                            // run-aways\n                            for (int si = 0; si < stack.size() && si < 64; si++) {\n                                Element el = stack.get(si);\n                                if (el == formatEl) {\n                                    commonAncestor = stack.get(si - 1);\n                                    seenFormattingElement = true;\n                                } else if (seenFormattingElement && tb.isSpecial(el)) {\n                                    furthestBlock = el;\n                                    break;\n                                }\n                            }\n                            if (furthestBlock == null) {\n                                tb.popStackToClose(formatEl.nodeName());\n                                tb.removeFromActiveFormattingElements(formatEl);\n                                return true;\n                            }\n\n                            // todo: Let a bookmark note the position of the formatting element in the list of active formatting elements relative to the elements on either side of it in the list.\n                            // does that mean: int pos of format el in list?\n                            Element node = furthestBlock;\n                            Element lastNode = furthestBlock;\n                            INNER:\n                            for (int j = 0; j < 3; j++) {\n                                if (tb.onStack(node))\n                                    node = tb.aboveOnStack(node);\n                                if (!tb.isInActiveFormattingElements(node)) { // note no bookmark check\n                                    tb.removeFromStack(node);\n                                    continue INNER;\n                                } else if (node == formatEl)\n                                    break INNER;\n\n                                Element replacement = new Element(Tag.valueOf(node.nodeName()), tb.getBaseUri());\n                                tb.replaceActiveFormattingElement(node, replacement);\n                                tb.replaceOnStack(node, replacement);\n                                node = replacement;\n\n                                if (lastNode == furthestBlock) {\n                                    // todo: move the aforementioned bookmark to be immediately after the new node in the list of active formatting elements.\n                                    // not getting how this bookmark both straddles the element above, but is inbetween here...\n                                }\n                                if (lastNode.parent() != null)\n                                    lastNode.remove();\n                                node.appendChild(lastNode);\n\n                                lastNode = node;\n                            }\n\n                            if (StringUtil.in(commonAncestor.nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) {\n                                if (lastNode.parent() != null)\n                                    lastNode.remove();\n                                tb.insertInFosterParent(lastNode);\n                            } else {\n                                if (lastNode.parent() != null)\n                                    lastNode.remove();\n                                commonAncestor.appendChild(lastNode);\n                            }\n\n                            Element adopter = new Element(formatEl.tag(), tb.getBaseUri());\n                            adopter.attributes().addAll(formatEl.attributes());\n                            Node[] childNodes = furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()]);\n                            for (Node childNode : childNodes) {\n                                adopter.appendChild(childNode); // append will reparent. thus the clone to avoid concurrent mod.\n                            }\n                            furthestBlock.appendChild(adopter);\n                            tb.removeFromActiveFormattingElements(formatEl);\n                            // todo: insert the new element into the list of active formatting elements at the position of the aforementioned bookmark.\n                            tb.removeFromStack(formatEl);\n                            tb.insertOnStackAfter(furthestBlock, adopter);\n                        }",
      "info" : "LabeledStatement[32084-37510]:LabeledStatement[32084-37590]"
    }, {
      "left" : "for (int i = 0; i < 8; i++)",
      "right" : "for (int i = 0; i < 8; i++)",
      "info" : "ForStatement[32115-37510]:ForStatement[32115-37590]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32143-37510]:Block[32143-37590]"
    }, {
      "left" : "Element formatEl = tb.getActiveFormattingElement(name);",
      "right" : "Element formatEl = tb.getActiveFormattingElement(name);",
      "info" : "VariableDeclarationStatement[32173-32228]:VariableDeclarationStatement[32173-32228]"
    }, {
      "left" : "if (formatEl == null)",
      "right" : "if (formatEl == null)",
      "info" : "IfStatement[32257-32865]:IfStatement[32257-32865]"
    }, {
      "left" : "return anyOtherEndTag(t, tb);",
      "right" : "return anyOtherEndTag(t, tb);",
      "info" : "ReturnStatement[32311-32340]:ReturnStatement[32311-32340]"
    }, {
      "left" : "if (!tb.onStack(formatEl))",
      "right" : "if (!tb.onStack(formatEl))",
      "info" : "IfStatement[32374-32865]:IfStatement[32374-32865]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32401-32606]:Block[32401-32606]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[32435-32450]:ExpressionStatement[32435-32450]"
    }, {
      "left" : "tb.removeFromActiveFormattingElements(formatEl);",
      "right" : "tb.removeFromActiveFormattingElements(formatEl);",
      "info" : "ExpressionStatement[32483-32531]:ExpressionStatement[32483-32531]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[32564-32576]:ReturnStatement[32564-32576]"
    }, {
      "left" : "if (!tb.inScope(formatEl.nodeName()))",
      "right" : "if (!tb.inScope(formatEl.nodeName()))",
      "info" : "IfStatement[32612-32865]:IfStatement[32612-32865]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32650-32775]:Block[32650-32775]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[32684-32699]:ExpressionStatement[32684-32699]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[32732-32745]:ReturnStatement[32732-32745]"
    }, {
      "left" : "if (tb.currentElement() != formatEl)",
      "right" : "if (tb.currentElement() != formatEl)",
      "info" : "IfStatement[32781-32865]:IfStatement[32781-32865]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[32850-32865]:ExpressionStatement[32850-32865]"
    }, {
      "left" : "Element furthestBlock = null;",
      "right" : "Element furthestBlock = null;",
      "info" : "VariableDeclarationStatement[32895-32924]:VariableDeclarationStatement[32895-32924]"
    }, {
      "left" : "Element commonAncestor = null;",
      "right" : "Element commonAncestor = null;",
      "info" : "VariableDeclarationStatement[32953-32983]:VariableDeclarationStatement[32953-32983]"
    }, {
      "left" : "boolean seenFormattingElement = false;",
      "right" : "boolean seenFormattingElement = false;",
      "info" : "VariableDeclarationStatement[33012-33050]:VariableDeclarationStatement[33012-33050]"
    }, {
      "left" : "LinkedList<Element> stack = tb.getStack();",
      "right" : "LinkedList<Element> stack = tb.getStack();",
      "info" : "VariableDeclarationStatement[33079-33121]:VariableDeclarationStatement[33079-33121]"
    }, {
      "left" : "for (int si = 0; si < stack.size() && si < 64; si++)",
      "right" : "for (int si = 0; si < stack.size() && si < 64; si++)",
      "info" : "ForStatement[33312-33869]:ForStatement[33312-33869]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33365-33869]:Block[33365-33869]"
    }, {
      "left" : "Element el = stack.get(si);",
      "right" : "Element el = stack.get(si);",
      "info" : "VariableDeclarationStatement[33399-33426]:VariableDeclarationStatement[33399-33426]"
    }, {
      "left" : "if (el == formatEl)",
      "right" : "if (el == formatEl)",
      "info" : "IfStatement[33459-33839]:IfStatement[33459-33839]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33479-33652]:Block[33479-33652]"
    }, {
      "left" : "commonAncestor = stack.get(si - 1);",
      "right" : "commonAncestor = stack.get(si - 1);",
      "info" : "ExpressionStatement[33517-33552]:ExpressionStatement[33517-33552]"
    }, {
      "left" : "seenFormattingElement = true;",
      "right" : "seenFormattingElement = true;",
      "info" : "ExpressionStatement[33589-33618]:ExpressionStatement[33589-33618]"
    }, {
      "left" : "if (seenFormattingElement && tb.isSpecial(el))",
      "right" : "if (seenFormattingElement && tb.isSpecial(el))",
      "info" : "IfStatement[33658-33839]:IfStatement[33658-33839]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33705-33839]:Block[33705-33839]"
    }, {
      "left" : "furthestBlock = el;",
      "right" : "furthestBlock = el;",
      "info" : "ExpressionStatement[33743-33762]:ExpressionStatement[33743-33762]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[33799-33805]:BreakStatement[33799-33805]"
    }, {
      "left" : "if (furthestBlock == null)",
      "right" : "if (furthestBlock == null)",
      "info" : "IfStatement[33898-34155]:IfStatement[33898-34155]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33925-34155]:Block[33925-34155]"
    }, {
      "left" : "tb.popStackToClose(formatEl.nodeName());",
      "right" : "tb.popStackToClose(formatEl.nodeName());",
      "info" : "ExpressionStatement[33959-33999]:ExpressionStatement[33959-33999]"
    }, {
      "left" : "tb.removeFromActiveFormattingElements(formatEl);",
      "right" : "tb.removeFromActiveFormattingElements(formatEl);",
      "info" : "ExpressionStatement[34032-34080]:ExpressionStatement[34032-34080]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[34113-34125]:ReturnStatement[34113-34125]"
    }, {
      "left" : "Element node = furthestBlock;",
      "right" : "Element node = furthestBlock;",
      "info" : "VariableDeclarationStatement[34459-34488]:VariableDeclarationStatement[34459-34488]"
    }, {
      "left" : "Element lastNode = furthestBlock;",
      "right" : "Element lastNode = furthestBlock;",
      "info" : "VariableDeclarationStatement[34517-34550]:VariableDeclarationStatement[34517-34550]"
    }, {
      "left" : "INNER:\n                            for (int j = 0; j < 3; j++) {\n                                if (tb.onStack(node))\n                                    node = tb.aboveOnStack(node);\n                                if (!tb.isInActiveFormattingElements(node)) { // note no bookmark check\n                                    tb.removeFromStack(node);\n                                    continue INNER;\n                                } else if (node == formatEl)\n                                    break INNER;\n\n                                Element replacement = new Element(Tag.valueOf(node.nodeName()), tb.getBaseUri());\n                                tb.replaceActiveFormattingElement(node, replacement);\n                                tb.replaceOnStack(node, replacement);\n                                node = replacement;\n\n                                if (lastNode == furthestBlock) {\n                                    // todo: move the aforementioned bookmark to be immediately after the new node in the list of active formatting elements.\n                                    // not getting how this bookmark both straddles the element above, but is inbetween here...\n                                }\n                                if (lastNode.parent() != null)\n                                    lastNode.remove();\n                                node.appendChild(lastNode);\n\n                                lastNode = node;\n                            }",
      "right" : "INNER:\n                            for (int j = 0; j < 3; j++) {\n                                if (tb.onStack(node))\n                                    node = tb.aboveOnStack(node);\n                                if (!tb.isInActiveFormattingElements(node)) { // note no bookmark check\n                                    tb.removeFromStack(node);\n                                    continue INNER;\n                                } else if (node == formatEl)\n                                    break INNER;\n\n                                Element replacement = new Element(Tag.valueOf(node.nodeName()), tb.getBaseUri());\n                                tb.replaceActiveFormattingElement(node, replacement);\n                                tb.replaceOnStack(node, replacement);\n                                node = replacement;\n\n                                if (lastNode == furthestBlock) {\n                                    // todo: move the aforementioned bookmark to be immediately after the new node in the list of active formatting elements.\n                                    // not getting how this bookmark both straddles the element above, but is inbetween here...\n                                }\n                                if (lastNode.parent() != null)\n                                    lastNode.remove();\n                                node.appendChild(lastNode);\n\n                                lastNode = node;\n                            }",
      "info" : "LabeledStatement[34579-36058]:LabeledStatement[34579-36058]"
    }, {
      "left" : "for (int j = 0; j < 3; j++)",
      "right" : "for (int j = 0; j < 3; j++)",
      "info" : "ForStatement[34614-36058]:ForStatement[34614-36058]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34642-36058]:Block[34642-36058]"
    }, {
      "left" : "if (tb.onStack(node))",
      "right" : "if (tb.onStack(node))",
      "info" : "IfStatement[34676-34763]:IfStatement[34676-34763]"
    }, {
      "left" : "node = tb.aboveOnStack(node);",
      "right" : "node = tb.aboveOnStack(node);",
      "info" : "ExpressionStatement[34734-34763]:ExpressionStatement[34734-34763]"
    }, {
      "left" : "if (!tb.isInActiveFormattingElements(node))",
      "right" : "if (!tb.isInActiveFormattingElements(node))",
      "info" : "IfStatement[34796-35091]:IfStatement[34796-35091]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34840-35015]:Block[34840-35015]"
    }, {
      "left" : "tb.removeFromStack(node);",
      "right" : "tb.removeFromStack(node);",
      "info" : "ExpressionStatement[34904-34929]:ExpressionStatement[34904-34929]"
    }, {
      "left" : "continue INNER;",
      "right" : "continue INNER;",
      "info" : "ContinueStatement[34966-34981]:ContinueStatement[34966-34981]"
    }, {
      "left" : "if (node == formatEl)",
      "right" : "if (node == formatEl)",
      "info" : "IfStatement[35021-35091]:IfStatement[35021-35091]"
    }, {
      "left" : "break INNER;",
      "right" : "break INNER;",
      "info" : "BreakStatement[35079-35091]:BreakStatement[35079-35091]"
    }, {
      "left" : "Element replacement = new Element(Tag.valueOf(node.nodeName()), tb.getBaseUri());",
      "right" : "Element replacement = new Element(Tag.valueOf(node.nodeName()), tb.getBaseUri());",
      "info" : "VariableDeclarationStatement[35125-35206]:VariableDeclarationStatement[35125-35206]"
    }, {
      "left" : "tb.replaceActiveFormattingElement(node, replacement);",
      "right" : "tb.replaceActiveFormattingElement(node, replacement);",
      "info" : "ExpressionStatement[35239-35292]:ExpressionStatement[35239-35292]"
    }, {
      "left" : "tb.replaceOnStack(node, replacement);",
      "right" : "tb.replaceOnStack(node, replacement);",
      "info" : "ExpressionStatement[35325-35362]:ExpressionStatement[35325-35362]"
    }, {
      "left" : "node = replacement;",
      "right" : "node = replacement;",
      "info" : "ExpressionStatement[35395-35414]:ExpressionStatement[35395-35414]"
    }, {
      "left" : "if (lastNode == furthestBlock)",
      "right" : "if (lastNode == furthestBlock)",
      "info" : "IfStatement[35448-35800]:IfStatement[35448-35800]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35479-35800]:Block[35479-35800]"
    }, {
      "left" : "if (lastNode.parent() != null)",
      "right" : "if (lastNode.parent() != null)",
      "info" : "IfStatement[35833-35918]:IfStatement[35833-35918]"
    }, {
      "left" : "lastNode.remove();",
      "right" : "lastNode.remove();",
      "info" : "ExpressionStatement[35900-35918]:ExpressionStatement[35900-35918]"
    }, {
      "left" : "node.appendChild(lastNode);",
      "right" : "node.appendChild(lastNode);",
      "info" : "ExpressionStatement[35951-35978]:ExpressionStatement[35951-35978]"
    }, {
      "left" : "lastNode = node;",
      "right" : "lastNode = node;",
      "info" : "ExpressionStatement[36012-36028]:ExpressionStatement[36012-36028]"
    }, {
      "left" : "if (StringUtil.in(commonAncestor.nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"))",
      "right" : "if (StringUtil.in(commonAncestor.nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"))",
      "info" : "IfStatement[36088-36617]:IfStatement[36088-36617]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36176-36392]:Block[36176-36392]"
    }, {
      "left" : "if (lastNode.parent() != null)",
      "right" : "if (lastNode.parent() != null)",
      "info" : "IfStatement[36210-36295]:IfStatement[36210-36295]"
    }, {
      "left" : "lastNode.remove();",
      "right" : "lastNode.remove();",
      "info" : "ExpressionStatement[36277-36295]:ExpressionStatement[36277-36295]"
    }, {
      "left" : "tb.insertInFosterParent(lastNode);",
      "right" : "tb.insertInFosterParent(lastNode);",
      "info" : "ExpressionStatement[36328-36362]:ExpressionStatement[36328-36362]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36398-36617]:Block[36398-36617]"
    }, {
      "left" : "if (lastNode.parent() != null)",
      "right" : "if (lastNode.parent() != null)",
      "info" : "IfStatement[36432-36517]:IfStatement[36432-36517]"
    }, {
      "left" : "lastNode.remove();",
      "right" : "lastNode.remove();",
      "info" : "ExpressionStatement[36499-36517]:ExpressionStatement[36499-36517]"
    }, {
      "left" : "commonAncestor.appendChild(lastNode);",
      "right" : "commonAncestor.appendChild(lastNode);",
      "info" : "ExpressionStatement[36550-36587]:ExpressionStatement[36550-36587]"
    }, {
      "left" : "Element adopter = new Element(formatEl.tag(), tb.getBaseUri());",
      "right" : "Element adopter = new Element(formatEl.tag(), tb.getBaseUri());",
      "info" : "VariableDeclarationStatement[36647-36710]:VariableDeclarationStatement[36647-36710]"
    }, {
      "left" : "Node[] childNodes = furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()]);",
      "right" : "Node[] childNodes = furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()]);",
      "info" : "VariableDeclarationStatement[36739-36835]:VariableDeclarationStatement[36819-36915]"
    }, {
      "left" : "for (Node childNode : childNodes)",
      "right" : "for (Node childNode : childNodes)",
      "info" : "EnhancedForStatement[36864-37058]:EnhancedForStatement[36944-37138]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36898-37058]:Block[36978-37138]"
    }, {
      "left" : "adopter.appendChild(childNode);",
      "right" : "adopter.appendChild(childNode);",
      "info" : "ExpressionStatement[36932-36963]:ExpressionStatement[37012-37043]"
    }, {
      "left" : "furthestBlock.appendChild(adopter);",
      "right" : "furthestBlock.appendChild(adopter);",
      "info" : "ExpressionStatement[37087-37122]:ExpressionStatement[37167-37202]"
    }, {
      "left" : "tb.removeFromActiveFormattingElements(formatEl);",
      "right" : "tb.removeFromActiveFormattingElements(formatEl);",
      "info" : "ExpressionStatement[37151-37199]:ExpressionStatement[37231-37279]"
    }, {
      "left" : "tb.removeFromStack(formatEl);",
      "right" : "tb.removeFromStack(formatEl);",
      "info" : "ExpressionStatement[37380-37409]:ExpressionStatement[37460-37489]"
    }, {
      "left" : "tb.insertOnStackAfter(furthestBlock, adopter);",
      "right" : "tb.insertOnStackAfter(furthestBlock, adopter);",
      "info" : "ExpressionStatement[37438-37484]:ExpressionStatement[37518-37564]"
    }, {
      "left" : "if (StringUtil.in(name, \"applet\", \"marquee\", \"object\"))",
      "right" : "if (StringUtil.in(name, \"applet\", \"marquee\", \"object\"))",
      "info" : "IfStatement[37538-38453]:IfStatement[37618-38533]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37594-38178]:Block[37674-38258]"
    }, {
      "left" : "if (!tb.inScope(\"name\"))",
      "right" : "if (!tb.inScope(\"name\"))",
      "info" : "IfStatement[37620-38156]:IfStatement[37700-38236]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37645-38156]:Block[37725-38236]"
    }, {
      "left" : "if (!tb.inScope(name))",
      "right" : "if (!tb.inScope(name))",
      "info" : "IfStatement[37675-37823]:IfStatement[37755-37903]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37698-37823]:Block[37778-37903]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[37732-37747]:ExpressionStatement[37812-37827]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[37780-37793]:ReturnStatement[37860-37873]"
    }, {
      "left" : "tb.generateImpliedEndTags();",
      "right" : "tb.generateImpliedEndTags();",
      "info" : "ExpressionStatement[37852-37880]:ExpressionStatement[37932-37960]"
    }, {
      "left" : "if (!tb.currentElement().nodeName().equals(name))",
      "right" : "if (!tb.currentElement().nodeName().equals(name))",
      "info" : "IfStatement[37909-38006]:IfStatement[37989-38086]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[37991-38006]:ExpressionStatement[38071-38086]"
    }, {
      "left" : "tb.popStackToClose(name);",
      "right" : "tb.popStackToClose(name);",
      "info" : "ExpressionStatement[38035-38060]:ExpressionStatement[38115-38140]"
    }, {
      "left" : "tb.clearFormattingElementsToLastMarker();",
      "right" : "tb.clearFormattingElementsToLastMarker();",
      "info" : "ExpressionStatement[38089-38130]:ExpressionStatement[38169-38210]"
    }, {
      "left" : "if (name.equals(\"br\"))",
      "right" : "if (name.equals(\"br\"))",
      "info" : "IfStatement[38184-38453]:IfStatement[38264-38533]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38207-38370]:Block[38287-38450]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[38233-38248]:ExpressionStatement[38313-38328]"
    }, {
      "left" : "tb.process(new Token.StartTag(\"br\"));",
      "right" : "tb.process(new Token.StartTag(\"br\"));",
      "info" : "ExpressionStatement[38273-38310]:ExpressionStatement[38353-38390]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[38335-38348]:ReturnStatement[38415-38428]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38376-38453]:Block[38456-38533]"
    }, {
      "left" : "return anyOtherEndTag(t, tb);",
      "right" : "return anyOtherEndTag(t, tb);",
      "info" : "ReturnStatement[38402-38431]:ReturnStatement[38482-38511]"
    }, {
      "left" : "case EOF:",
      "right" : "case EOF:",
      "info" : "SwitchCase[38498-38507]:SwitchCase[38578-38587]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[38723-38735]:ReturnStatement[38803-38815]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[38755-38762]:PrimitiveType[38835-38842]"
    }, {
      "left" : "anyOtherEndTag",
      "right" : "anyOtherEndTag",
      "info" : "SimpleName[38763-38777]:SimpleName[38843-38857]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[38778-38785]:SingleVariableDeclaration[38858-38865]"
    }, {
      "left" : "HtmlTreeBuilder tb",
      "right" : "HtmlTreeBuilder tb",
      "info" : "SingleVariableDeclaration[38787-38805]:SingleVariableDeclaration[38867-38885]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38807-39587]:Block[38887-39667]"
    }, {
      "left" : "String name = t.asEndTag().name();",
      "right" : "String name = t.asEndTag().name();",
      "info" : "VariableDeclarationStatement[38821-38855]:VariableDeclarationStatement[38901-38935]"
    }, {
      "left" : "DescendableLinkedList<Element> stack = tb.getStack();",
      "right" : "DescendableLinkedList<Element> stack = tb.getStack();",
      "info" : "VariableDeclarationStatement[38868-38921]:VariableDeclarationStatement[38948-39001]"
    }, {
      "left" : "Iterator<Element> it = stack.descendingIterator();",
      "right" : "Iterator<Element> it = stack.descendingIterator();",
      "info" : "VariableDeclarationStatement[38934-38984]:VariableDeclarationStatement[39014-39064]"
    }, {
      "left" : "while (it.hasNext())",
      "right" : "while (it.hasNext())",
      "info" : "WhileStatement[38997-39552]:WhileStatement[39077-39632]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39018-39552]:Block[39098-39632]"
    }, {
      "left" : "Element node = it.next();",
      "right" : "Element node = it.next();",
      "info" : "VariableDeclarationStatement[39036-39061]:VariableDeclarationStatement[39116-39141]"
    }, {
      "left" : "if (node.nodeName().equals(name))",
      "right" : "if (node.nodeName().equals(name))",
      "info" : "IfStatement[39078-39538]:IfStatement[39158-39618]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39112-39367]:Block[39192-39447]"
    }, {
      "left" : "tb.generateImpliedEndTags(name);",
      "right" : "tb.generateImpliedEndTags(name);",
      "info" : "ExpressionStatement[39134-39166]:ExpressionStatement[39214-39246]"
    }, {
      "left" : "if (!name.equals(tb.currentElement().nodeName()))",
      "right" : "if (!name.equals(tb.currentElement().nodeName()))",
      "info" : "IfStatement[39187-39276]:IfStatement[39267-39356]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[39261-39276]:ExpressionStatement[39341-39356]"
    }, {
      "left" : "tb.popStackToClose(name);",
      "right" : "tb.popStackToClose(name);",
      "info" : "ExpressionStatement[39297-39322]:ExpressionStatement[39377-39402]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[39343-39349]:BreakStatement[39423-39429]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39373-39538]:Block[39453-39618]"
    }, {
      "left" : "if (tb.isSpecial(node))",
      "right" : "if (tb.isSpecial(node))",
      "info" : "IfStatement[39395-39520]:IfStatement[39475-39600]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39419-39520]:Block[39499-39600]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[39445-39460]:ExpressionStatement[39525-39540]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[39485-39498]:ReturnStatement[39565-39578]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[39565-39577]:ReturnStatement[39645-39657]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[39677-39684]:PrimitiveType[39757-39764]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[39685-39692]:SimpleName[39765-39772]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[39693-39700]:SingleVariableDeclaration[39773-39780]"
    }, {
      "left" : "HtmlTreeBuilder tb",
      "right" : "HtmlTreeBuilder tb",
      "info" : "SingleVariableDeclaration[39702-39720]:SingleVariableDeclaration[39782-39800]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39722-40323]:Block[39802-40403]"
    }, {
      "left" : "if (t.isCharacter())",
      "right" : "if (t.isCharacter())",
      "info" : "IfStatement[39736-40288]:IfStatement[39816-40368]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39757-39816]:Block[39837-39896]"
    }, {
      "left" : "tb.insert(t.asCharacter());",
      "right" : "tb.insert(t.asCharacter());",
      "info" : "ExpressionStatement[39775-39802]:ExpressionStatement[39855-39882]"
    }, {
      "left" : "if (t.isEOF())",
      "right" : "if (t.isEOF())",
      "info" : "IfStatement[39822-40288]:IfStatement[39902-40368]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39837-40061]:Block[39917-40141]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[39855-39870]:ExpressionStatement[39935-39950]"
    }, {
      "left" : "tb.pop();",
      "right" : "tb.pop();",
      "info" : "ExpressionStatement[39949-39958]:ExpressionStatement[40029-40038]"
    }, {
      "left" : "tb.transition(tb.originalState());",
      "right" : "tb.transition(tb.originalState());",
      "info" : "ExpressionStatement[39975-40009]:ExpressionStatement[40055-40089]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[40026-40047]:ReturnStatement[40106-40127]"
    }, {
      "left" : "if (t.isEndTag())",
      "right" : "if (t.isEndTag())",
      "info" : "IfStatement[40067-40288]:IfStatement[40147-40368]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40085-40288]:Block[40165-40368]"
    }, {
      "left" : "tb.pop();",
      "right" : "tb.pop();",
      "info" : "ExpressionStatement[40214-40223]:ExpressionStatement[40294-40303]"
    }, {
      "left" : "tb.transition(tb.originalState());",
      "right" : "tb.transition(tb.originalState());",
      "info" : "ExpressionStatement[40240-40274]:ExpressionStatement[40320-40354]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[40301-40313]:ReturnStatement[40381-40393]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[40353-40360]:PrimitiveType[40433-40440]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[40361-40368]:SimpleName[40441-40448]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[40369-40376]:SingleVariableDeclaration[40449-40456]"
    }, {
      "left" : "HtmlTreeBuilder tb",
      "right" : "HtmlTreeBuilder tb",
      "info" : "SingleVariableDeclaration[40378-40396]:SingleVariableDeclaration[40458-40476]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40398-44266]:Block[40478-44346]"
    }, {
      "left" : "if (t.isCharacter())",
      "right" : "if (t.isCharacter())",
      "info" : "IfStatement[40412-44216]:IfStatement[40492-44296]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40433-40618]:Block[40513-40698]"
    }, {
      "left" : "tb.newPendingTableCharacters();",
      "right" : "tb.newPendingTableCharacters();",
      "info" : "ExpressionStatement[40451-40482]:ExpressionStatement[40531-40562]"
    }, {
      "left" : "tb.markInsertionMode();",
      "right" : "tb.markInsertionMode();",
      "info" : "ExpressionStatement[40499-40522]:ExpressionStatement[40579-40602]"
    }, {
      "left" : "tb.transition(InTableText);",
      "right" : "tb.transition(InTableText);",
      "info" : "ExpressionStatement[40539-40566]:ExpressionStatement[40619-40646]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[40583-40604]:ReturnStatement[40663-40684]"
    }, {
      "left" : "if (t.isComment())",
      "right" : "if (t.isComment())",
      "info" : "IfStatement[40624-44216]:IfStatement[40704-44296]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40643-40729]:Block[40723-40809]"
    }, {
      "left" : "tb.insert(t.asComment());",
      "right" : "tb.insert(t.asComment());",
      "info" : "ExpressionStatement[40661-40686]:ExpressionStatement[40741-40766]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[40703-40715]:ReturnStatement[40783-40795]"
    }, {
      "left" : "if (t.isDoctype())",
      "right" : "if (t.isDoctype())",
      "info" : "IfStatement[40735-44216]:IfStatement[40815-44296]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40754-40831]:Block[40834-40911]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[40772-40787]:ExpressionStatement[40852-40867]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[40804-40817]:ReturnStatement[40884-40897]"
    }, {
      "left" : "if (t.isStartTag())",
      "right" : "if (t.isStartTag())",
      "info" : "IfStatement[40837-44216]:IfStatement[40917-44296]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40857-43195]:Block[40937-43275]"
    }, {
      "left" : "Token.StartTag startTag = t.asStartTag();",
      "right" : "Token.StartTag startTag = t.asStartTag();",
      "info" : "VariableDeclarationStatement[40875-40916]:VariableDeclarationStatement[40955-40996]"
    }, {
      "left" : "String name = startTag.name();",
      "right" : "String name = startTag.name();",
      "info" : "VariableDeclarationStatement[40933-40963]:VariableDeclarationStatement[41013-41043]"
    }, {
      "left" : "if (name.equals(\"caption\"))",
      "right" : "if (name.equals(\"caption\"))",
      "info" : "IfStatement[40980-43006]:IfStatement[41060-43086]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41008-41224]:Block[41088-41304]"
    }, {
      "left" : "tb.clearStackToTableContext();",
      "right" : "tb.clearStackToTableContext();",
      "info" : "ExpressionStatement[41030-41060]:ExpressionStatement[41110-41140]"
    }, {
      "left" : "tb.insertMarkerToFormattingElements();",
      "right" : "tb.insertMarkerToFormattingElements();",
      "info" : "ExpressionStatement[41081-41119]:ExpressionStatement[41161-41199]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[41140-41160]:ExpressionStatement[41220-41240]"
    }, {
      "left" : "tb.transition(InCaption);",
      "right" : "tb.transition(InCaption);",
      "info" : "ExpressionStatement[41181-41206]:ExpressionStatement[41261-41286]"
    }, {
      "left" : "if (name.equals(\"colgroup\"))",
      "right" : "if (name.equals(\"colgroup\"))",
      "info" : "IfStatement[41230-43006]:IfStatement[41310-43086]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41259-41420]:Block[41339-41500]"
    }, {
      "left" : "tb.clearStackToTableContext();",
      "right" : "tb.clearStackToTableContext();",
      "info" : "ExpressionStatement[41281-41311]:ExpressionStatement[41361-41391]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[41332-41352]:ExpressionStatement[41412-41432]"
    }, {
      "left" : "tb.transition(InColumnGroup);",
      "right" : "tb.transition(InColumnGroup);",
      "info" : "ExpressionStatement[41373-41402]:ExpressionStatement[41453-41482]"
    }, {
      "left" : "if (name.equals(\"col\"))",
      "right" : "if (name.equals(\"col\"))",
      "info" : "IfStatement[41426-43006]:IfStatement[41506-43086]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41450-41575]:Block[41530-41655]"
    }, {
      "left" : "tb.process(new Token.StartTag(\"colgroup\"));",
      "right" : "tb.process(new Token.StartTag(\"colgroup\"));",
      "info" : "ExpressionStatement[41472-41515]:ExpressionStatement[41552-41595]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[41536-41557]:ReturnStatement[41616-41637]"
    }, {
      "left" : "if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\"))",
      "right" : "if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\"))",
      "info" : "IfStatement[41581-43006]:IfStatement[41661-43086]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41633-41792]:Block[41713-41872]"
    }, {
      "left" : "tb.clearStackToTableContext();",
      "right" : "tb.clearStackToTableContext();",
      "info" : "ExpressionStatement[41655-41685]:ExpressionStatement[41735-41765]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[41706-41726]:ExpressionStatement[41786-41806]"
    }, {
      "left" : "tb.transition(InTableBody);",
      "right" : "tb.transition(InTableBody);",
      "info" : "ExpressionStatement[41747-41774]:ExpressionStatement[41827-41854]"
    }, {
      "left" : "if (StringUtil.in(name, \"td\", \"th\", \"tr\"))",
      "right" : "if (StringUtil.in(name, \"td\", \"th\", \"tr\"))",
      "info" : "IfStatement[41798-43006]:IfStatement[41878-43086]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41841-41963]:Block[41921-42043]"
    }, {
      "left" : "tb.process(new Token.StartTag(\"tbody\"));",
      "right" : "tb.process(new Token.StartTag(\"tbody\"));",
      "info" : "ExpressionStatement[41863-41903]:ExpressionStatement[41943-41983]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[41924-41945]:ReturnStatement[42004-42025]"
    }, {
      "left" : "if (name.equals(\"table\"))",
      "right" : "if (name.equals(\"table\"))",
      "info" : "IfStatement[41969-43006]:IfStatement[42049-43086]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41995-42241]:Block[42075-42321]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[42017-42032]:ExpressionStatement[42097-42112]"
    }, {
      "left" : "boolean processed = tb.process(new Token.EndTag(\"table\"));",
      "right" : "boolean processed = tb.process(new Token.EndTag(\"table\"));",
      "info" : "VariableDeclarationStatement[42053-42111]:VariableDeclarationStatement[42133-42191]"
    }, {
      "left" : "if (processed)",
      "right" : "if (processed)",
      "info" : "IfStatement[42132-42223]:IfStatement[42212-42303]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[42202-42223]:ReturnStatement[42282-42303]"
    }, {
      "left" : "if (StringUtil.in(name, \"style\", \"script\"))",
      "right" : "if (StringUtil.in(name, \"style\", \"script\"))",
      "info" : "IfStatement[42247-43006]:IfStatement[42327-43086]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42291-42360]:Block[42371-42440]"
    }, {
      "left" : "return tb.process(t, InHead);",
      "right" : "return tb.process(t, InHead);",
      "info" : "ReturnStatement[42313-42342]:ReturnStatement[42393-42422]"
    }, {
      "left" : "if (name.equals(\"input\"))",
      "right" : "if (name.equals(\"input\"))",
      "info" : "IfStatement[42366-43006]:IfStatement[42446-43086]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42392-42651]:Block[42472-42731]"
    }, {
      "left" : "if (!startTag.attributes.get(\"type\").equalsIgnoreCase(\"hidden\"))",
      "right" : "if (!startTag.attributes.get(\"type\").equalsIgnoreCase(\"hidden\"))",
      "info" : "IfStatement[42414-42633]:IfStatement[42494-42713]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42479-42554]:Block[42559-42634]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[42505-42532]:ReturnStatement[42585-42612]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42560-42633]:Block[42640-42713]"
    }, {
      "left" : "tb.insertEmpty(startTag);",
      "right" : "tb.insertEmpty(startTag);",
      "info" : "ExpressionStatement[42586-42611]:ExpressionStatement[42666-42691]"
    }, {
      "left" : "if (name.equals(\"form\"))",
      "right" : "if (name.equals(\"form\"))",
      "info" : "IfStatement[42657-43006]:IfStatement[42737-43086]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42682-42933]:Block[42762-43013]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[42704-42719]:ExpressionStatement[42784-42799]"
    }, {
      "left" : "if (tb.getFormElement() != null)",
      "right" : "if (tb.getFormElement() != null)",
      "info" : "IfStatement[42740-42915]:IfStatement[42820-42995]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[42797-42810]:ReturnStatement[42877-42890]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42836-42915]:Block[42916-42995]"
    }, {
      "left" : "tb.insertForm(startTag, false);",
      "right" : "tb.insertForm(startTag, false);",
      "info" : "ExpressionStatement[42862-42893]:ExpressionStatement[42942-42973]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42939-43006]:Block[43019-43086]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[42961-42988]:ReturnStatement[43041-43068]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[43023-43035]:ReturnStatement[43103-43115]"
    }, {
      "left" : "if (t.isEndTag())",
      "right" : "if (t.isEndTag())",
      "info" : "IfStatement[43201-44216]:IfStatement[43281-44296]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43219-44031]:Block[43299-44111]"
    }, {
      "left" : "Token.EndTag endTag = t.asEndTag();",
      "right" : "Token.EndTag endTag = t.asEndTag();",
      "info" : "VariableDeclarationStatement[43237-43272]:VariableDeclarationStatement[43317-43352]"
    }, {
      "left" : "String name = endTag.name();",
      "right" : "String name = endTag.name();",
      "info" : "VariableDeclarationStatement[43289-43317]:VariableDeclarationStatement[43369-43397]"
    }, {
      "left" : "if (name.equals(\"table\"))",
      "right" : "if (name.equals(\"table\"))",
      "info" : "IfStatement[43335-43965]:IfStatement[43415-44045]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43361-43657]:Block[43441-43737]"
    }, {
      "left" : "if (!tb.inTableScope(name))",
      "right" : "if (!tb.inTableScope(name))",
      "info" : "IfStatement[43383-43594]:IfStatement[43463-43674]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43411-43512]:Block[43491-43592]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[43437-43452]:ExpressionStatement[43517-43532]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[43477-43490]:ReturnStatement[43557-43570]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43518-43594]:Block[43598-43674]"
    }, {
      "left" : "tb.popStackToClose(\"table\");",
      "right" : "tb.popStackToClose(\"table\");",
      "info" : "ExpressionStatement[43544-43572]:ExpressionStatement[43624-43652]"
    }, {
      "left" : "tb.resetInsertionMode();",
      "right" : "tb.resetInsertionMode();",
      "info" : "ExpressionStatement[43615-43639]:ExpressionStatement[43695-43719]"
    }, {
      "left" : "if (StringUtil.in(name,\n                        \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"))",
      "right" : "if (StringUtil.in(name,\n                        \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"))",
      "info" : "IfStatement[43663-43965]:IfStatement[43743-44045]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43803-43892]:Block[43883-43972]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[43825-43840]:ExpressionStatement[43905-43920]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[43861-43874]:ReturnStatement[43941-43954]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43898-43965]:Block[43978-44045]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[43920-43947]:ReturnStatement[44000-44027]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[43982-43994]:ReturnStatement[44062-44074]"
    }, {
      "left" : "if (t.isEOF())",
      "right" : "if (t.isEOF())",
      "info" : "IfStatement[44037-44216]:IfStatement[44117-44296]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44052-44216]:Block[44132-44296]"
    }, {
      "left" : "if (tb.currentElement().nodeName().equals(\"html\"))",
      "right" : "if (tb.currentElement().nodeName().equals(\"html\"))",
      "info" : "IfStatement[44070-44156]:IfStatement[44150-44236]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[44141-44156]:ExpressionStatement[44221-44236]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[44173-44185]:ReturnStatement[44253-44265]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[44229-44256]:ReturnStatement[44309-44336]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[44276-44283]:PrimitiveType[44356-44363]"
    }, {
      "left" : "anythingElse",
      "right" : "anythingElse",
      "info" : "SimpleName[44284-44296]:SimpleName[44364-44376]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[44297-44304]:SingleVariableDeclaration[44377-44384]"
    }, {
      "left" : "HtmlTreeBuilder tb",
      "right" : "HtmlTreeBuilder tb",
      "info" : "SingleVariableDeclaration[44306-44324]:SingleVariableDeclaration[44386-44404]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44326-44764]:Block[44406-44844]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[44340-44355]:ExpressionStatement[44420-44435]"
    }, {
      "left" : "boolean processed = true;",
      "right" : "boolean processed = true;",
      "info" : "VariableDeclarationStatement[44368-44393]:VariableDeclarationStatement[44448-44473]"
    }, {
      "left" : "if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"))",
      "right" : "if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"))",
      "info" : "IfStatement[44406-44724]:IfStatement[44486-44804]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44499-44652]:Block[44579-44732]"
    }, {
      "left" : "tb.setFosterInserts(true);",
      "right" : "tb.setFosterInserts(true);",
      "info" : "ExpressionStatement[44517-44543]:ExpressionStatement[44597-44623]"
    }, {
      "left" : "processed = tb.process(t, InBody);",
      "right" : "processed = tb.process(t, InBody);",
      "info" : "ExpressionStatement[44560-44594]:ExpressionStatement[44640-44674]"
    }, {
      "left" : "tb.setFosterInserts(false);",
      "right" : "tb.setFosterInserts(false);",
      "info" : "ExpressionStatement[44611-44638]:ExpressionStatement[44691-44718]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44658-44724]:Block[44738-44804]"
    }, {
      "left" : "processed = tb.process(t, InBody);",
      "right" : "processed = tb.process(t, InBody);",
      "info" : "ExpressionStatement[44676-44710]:ExpressionStatement[44756-44790]"
    }, {
      "left" : "return processed;",
      "right" : "return processed;",
      "info" : "ReturnStatement[44737-44754]:ReturnStatement[44817-44834]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[44798-44805]:PrimitiveType[44878-44885]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[44806-44813]:SimpleName[44886-44893]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[44814-44821]:SingleVariableDeclaration[44894-44901]"
    }, {
      "left" : "HtmlTreeBuilder tb",
      "right" : "HtmlTreeBuilder tb",
      "info" : "SingleVariableDeclaration[44823-44841]:SingleVariableDeclaration[44903-44921]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44843-46401]:Block[44923-46481]"
    }, {
      "left" : "switch (t.type) {\n                case Character:\n                    Token.Character c = t.asCharacter();\n                    if (c.getData().equals(nullString)) {\n                        tb.error(this);\n                        return false;\n                    } else {\n                        tb.getPendingTableCharacters().add(c);\n                    }\n                    break;\n                default:\n                    if (tb.getPendingTableCharacters().size() > 0) {\n                        for (Token.Character character : tb.getPendingTableCharacters()) {\n                            if (!isWhitespace(character)) {\n                                // InTable anything else section:\n                                tb.error(this);\n                                if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) {\n                                    tb.setFosterInserts(true);\n                                    tb.process(character, InBody);\n                                    tb.setFosterInserts(false);\n                                } else {\n                                    tb.process(character, InBody);\n                                }\n                            } else\n                                tb.insert(character);\n                        }\n                        tb.newPendingTableCharacters();\n                    }\n                    tb.transition(tb.originalState());\n                    return tb.process(t);\n            }",
      "right" : "switch (t.type) {\n                case Character:\n                    Token.Character c = t.asCharacter();\n                    if (c.getData().equals(nullString)) {\n                        tb.error(this);\n                        return false;\n                    } else {\n                        tb.getPendingTableCharacters().add(c);\n                    }\n                    break;\n                default:\n                    if (tb.getPendingTableCharacters().size() > 0) {\n                        for (Token.Character character : tb.getPendingTableCharacters()) {\n                            if (!isWhitespace(character)) {\n                                // InTable anything else section:\n                                tb.error(this);\n                                if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) {\n                                    tb.setFosterInserts(true);\n                                    tb.process(character, InBody);\n                                    tb.setFosterInserts(false);\n                                } else {\n                                    tb.process(character, InBody);\n                                }\n                            } else\n                                tb.insert(character);\n                        }\n                        tb.newPendingTableCharacters();\n                    }\n                    tb.transition(tb.originalState());\n                    return tb.process(t);\n            }",
      "info" : "SwitchStatement[44857-46366]:SwitchStatement[44937-46446]"
    }, {
      "left" : "case Character:",
      "right" : "case Character:",
      "info" : "SwitchCase[44891-44906]:SwitchCase[44971-44986]"
    }, {
      "left" : "Token.Character c = t.asCharacter();",
      "right" : "Token.Character c = t.asCharacter();",
      "info" : "VariableDeclarationStatement[44927-44963]:VariableDeclarationStatement[45007-45043]"
    }, {
      "left" : "if (c.getData().equals(nullString))",
      "right" : "if (c.getData().equals(nullString))",
      "info" : "IfStatement[44984-45213]:IfStatement[45064-45293]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45020-45121]:Block[45100-45201]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[45046-45061]:ExpressionStatement[45126-45141]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[45086-45099]:ReturnStatement[45166-45179]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45127-45213]:Block[45207-45293]"
    }, {
      "left" : "tb.getPendingTableCharacters().add(c);",
      "right" : "tb.getPendingTableCharacters().add(c);",
      "info" : "ExpressionStatement[45153-45191]:ExpressionStatement[45233-45271]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[45234-45240]:BreakStatement[45314-45320]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[45257-45265]:SwitchCase[45337-45345]"
    }, {
      "left" : "if (tb.getPendingTableCharacters().size() > 0)",
      "right" : "if (tb.getPendingTableCharacters().size() > 0)",
      "info" : "IfStatement[45286-46255]:IfStatement[45366-46335]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45333-46255]:Block[45413-46335]"
    }, {
      "left" : "for (Token.Character character : tb.getPendingTableCharacters())",
      "right" : "for (Token.Character character : tb.getPendingTableCharacters())",
      "info" : "EnhancedForStatement[45359-46177]:EnhancedForStatement[45439-46257]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45424-46177]:Block[45504-46257]"
    }, {
      "left" : "if (!isWhitespace(character))",
      "right" : "if (!isWhitespace(character))",
      "info" : "IfStatement[45454-46151]:IfStatement[45534-46231]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45484-46092]:Block[45564-46172]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[45584-45599]:ExpressionStatement[45664-45679]"
    }, {
      "left" : "if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"))",
      "right" : "if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"))",
      "info" : "IfStatement[45632-46062]:IfStatement[45712-46142]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45725-45954]:Block[45805-46034]"
    }, {
      "left" : "tb.setFosterInserts(true);",
      "right" : "tb.setFosterInserts(true);",
      "info" : "ExpressionStatement[45763-45789]:ExpressionStatement[45843-45869]"
    }, {
      "left" : "tb.process(character, InBody);",
      "right" : "tb.process(character, InBody);",
      "info" : "ExpressionStatement[45826-45856]:ExpressionStatement[45906-45936]"
    }, {
      "left" : "tb.setFosterInserts(false);",
      "right" : "tb.setFosterInserts(false);",
      "info" : "ExpressionStatement[45893-45920]:ExpressionStatement[45973-46000]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45960-46062]:Block[46040-46142]"
    }, {
      "left" : "tb.process(character, InBody);",
      "right" : "tb.process(character, InBody);",
      "info" : "ExpressionStatement[45998-46028]:ExpressionStatement[46078-46108]"
    }, {
      "left" : "tb.insert(character);",
      "right" : "tb.insert(character);",
      "info" : "ExpressionStatement[46130-46151]:ExpressionStatement[46210-46231]"
    }, {
      "left" : "tb.newPendingTableCharacters();",
      "right" : "tb.newPendingTableCharacters();",
      "info" : "ExpressionStatement[46202-46233]:ExpressionStatement[46282-46313]"
    }, {
      "left" : "tb.transition(tb.originalState());",
      "right" : "tb.transition(tb.originalState());",
      "info" : "ExpressionStatement[46276-46310]:ExpressionStatement[46356-46390]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[46331-46352]:ReturnStatement[46411-46432]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[46379-46391]:ReturnStatement[46459-46471]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[46433-46440]:PrimitiveType[46513-46520]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[46441-46448]:SimpleName[46521-46528]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[46449-46456]:SingleVariableDeclaration[46529-46536]"
    }, {
      "left" : "HtmlTreeBuilder tb",
      "right" : "HtmlTreeBuilder tb",
      "info" : "SingleVariableDeclaration[46458-46476]:SingleVariableDeclaration[46538-46556]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46478-47977]:Block[46558-48057]"
    }, {
      "left" : "if (t.isEndTag() && t.asEndTag().name().equals(\"caption\"))",
      "right" : "if (t.isEndTag() && t.asEndTag().name().equals(\"caption\"))",
      "info" : "IfStatement[46492-47942]:IfStatement[46572-48022]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46551-47143]:Block[46631-47223]"
    }, {
      "left" : "Token.EndTag endTag = t.asEndTag();",
      "right" : "Token.EndTag endTag = t.asEndTag();",
      "info" : "VariableDeclarationStatement[46569-46604]:VariableDeclarationStatement[46649-46684]"
    }, {
      "left" : "String name = endTag.name();",
      "right" : "String name = endTag.name();",
      "info" : "VariableDeclarationStatement[46621-46649]:VariableDeclarationStatement[46701-46729]"
    }, {
      "left" : "if (!tb.inTableScope(name))",
      "right" : "if (!tb.inTableScope(name))",
      "info" : "IfStatement[46666-47129]:IfStatement[46746-47209]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46694-46783]:Block[46774-46863]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[46716-46731]:ExpressionStatement[46796-46811]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[46752-46765]:ReturnStatement[46832-46845]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46789-47129]:Block[46869-47209]"
    }, {
      "left" : "tb.generateImpliedEndTags();",
      "right" : "tb.generateImpliedEndTags();",
      "info" : "ExpressionStatement[46811-46839]:ExpressionStatement[46891-46919]"
    }, {
      "left" : "if (!tb.currentElement().nodeName().equals(\"caption\"))",
      "right" : "if (!tb.currentElement().nodeName().equals(\"caption\"))",
      "info" : "IfStatement[46860-46954]:IfStatement[46940-47034]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[46939-46954]:ExpressionStatement[47019-47034]"
    }, {
      "left" : "tb.popStackToClose(\"caption\");",
      "right" : "tb.popStackToClose(\"caption\");",
      "info" : "ExpressionStatement[46975-47005]:ExpressionStatement[47055-47085]"
    }, {
      "left" : "tb.clearFormattingElementsToLastMarker();",
      "right" : "tb.clearFormattingElementsToLastMarker();",
      "info" : "ExpressionStatement[47026-47067]:ExpressionStatement[47106-47147]"
    }, {
      "left" : "tb.transition(InTable);",
      "right" : "tb.transition(InTable);",
      "info" : "ExpressionStatement[47088-47111]:ExpressionStatement[47168-47191]"
    }, {
      "left" : "if ((\n                    t.isStartTag() && StringUtil.in(t.asStartTag().name(),\n                            \"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\") ||\n                            t.isEndTag() && t.asEndTag().name().equals(\"table\")))",
      "right" : "if ((\n                    t.isStartTag() && StringUtil.in(t.asStartTag().name(),\n                            \"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\") ||\n                            t.isEndTag() && t.asEndTag().name().equals(\"table\")))",
      "info" : "IfStatement[47149-47942]:IfStatement[47229-48022]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47439-47636]:Block[47519-47716]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[47457-47472]:ExpressionStatement[47537-47552]"
    }, {
      "left" : "boolean processed = tb.process(new Token.EndTag(\"caption\"));",
      "right" : "boolean processed = tb.process(new Token.EndTag(\"caption\"));",
      "info" : "VariableDeclarationStatement[47489-47549]:VariableDeclarationStatement[47569-47629]"
    }, {
      "left" : "if (processed)",
      "right" : "if (processed)",
      "info" : "IfStatement[47566-47622]:IfStatement[47646-47702]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[47601-47622]:ReturnStatement[47681-47702]"
    }, {
      "left" : "if (t.isEndTag() && StringUtil.in(t.asEndTag().name(),\n                    \"body\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"))",
      "right" : "if (t.isEndTag() && StringUtil.in(t.asEndTag().name(),\n                    \"body\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"))",
      "info" : "IfStatement[47642-47942]:IfStatement[47722-48022]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47798-47875]:Block[47878-47955]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[47816-47831]:ExpressionStatement[47896-47911]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[47848-47861]:ReturnStatement[47928-47941]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47881-47942]:Block[47961-48022]"
    }, {
      "left" : "return tb.process(t, InBody);",
      "right" : "return tb.process(t, InBody);",
      "info" : "ReturnStatement[47899-47928]:ReturnStatement[47979-48008]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[47955-47967]:ReturnStatement[48035-48047]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[48013-48020]:PrimitiveType[48093-48100]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[48021-48028]:SimpleName[48101-48108]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[48029-48036]:SingleVariableDeclaration[48109-48116]"
    }, {
      "left" : "HtmlTreeBuilder tb",
      "right" : "HtmlTreeBuilder tb",
      "info" : "SingleVariableDeclaration[48038-48056]:SingleVariableDeclaration[48118-48136]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48058-49822]:Block[48138-49902]"
    }, {
      "left" : "if (isWhitespace(t))",
      "right" : "if (isWhitespace(t))",
      "info" : "IfStatement[48072-48181]:IfStatement[48152-48261]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48093-48181]:Block[48173-48261]"
    }, {
      "left" : "tb.insert(t.asCharacter());",
      "right" : "tb.insert(t.asCharacter());",
      "info" : "ExpressionStatement[48111-48138]:ExpressionStatement[48191-48218]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[48155-48167]:ReturnStatement[48235-48247]"
    }, {
      "left" : "switch (t.type) {\n                case Comment:\n                    tb.insert(t.asComment());\n                    break;\n                case Doctype:\n                    tb.error(this);\n                    break;\n                case StartTag:\n                    Token.StartTag startTag = t.asStartTag();\n                    String name = startTag.name();\n                    if (name.equals(\"html\"))\n                        return tb.process(t, InBody);\n                    else if (name.equals(\"col\"))\n                        tb.insertEmpty(startTag);\n                    else\n                        return anythingElse(t, tb);\n                    break;\n                case EndTag:\n                    Token.EndTag endTag = t.asEndTag();\n                    name = endTag.name();\n                    if (name.equals(\"colgroup\")) {\n                        if (tb.currentElement().nodeName().equals(\"html\")) { // frag case\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.pop();\n                            tb.transition(InTable);\n                        }\n                    } else\n                        return anythingElse(t, tb);\n                    break;\n                case EOF:\n                    if (tb.currentElement().nodeName().equals(\"html\"))\n                        return true; // stop parsing; frag case\n                    else\n                        return anythingElse(t, tb);\n                default:\n                    return anythingElse(t, tb);\n            }",
      "right" : "switch (t.type) {\n                case Comment:\n                    tb.insert(t.asComment());\n                    break;\n                case Doctype:\n                    tb.error(this);\n                    break;\n                case StartTag:\n                    Token.StartTag startTag = t.asStartTag();\n                    String name = startTag.name();\n                    if (name.equals(\"html\"))\n                        return tb.process(t, InBody);\n                    else if (name.equals(\"col\"))\n                        tb.insertEmpty(startTag);\n                    else\n                        return anythingElse(t, tb);\n                    break;\n                case EndTag:\n                    Token.EndTag endTag = t.asEndTag();\n                    name = endTag.name();\n                    if (name.equals(\"colgroup\")) {\n                        if (tb.currentElement().nodeName().equals(\"html\")) { // frag case\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.pop();\n                            tb.transition(InTable);\n                        }\n                    } else\n                        return anythingElse(t, tb);\n                    break;\n                case EOF:\n                    if (tb.currentElement().nodeName().equals(\"html\"))\n                        return true; // stop parsing; frag case\n                    else\n                        return anythingElse(t, tb);\n                default:\n                    return anythingElse(t, tb);\n            }",
      "info" : "SwitchStatement[48194-49787]:SwitchStatement[48274-49867]"
    }, {
      "left" : "case Comment:",
      "right" : "case Comment:",
      "info" : "SwitchCase[48228-48241]:SwitchCase[48308-48321]"
    }, {
      "left" : "tb.insert(t.asComment());",
      "right" : "tb.insert(t.asComment());",
      "info" : "ExpressionStatement[48262-48287]:ExpressionStatement[48342-48367]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[48308-48314]:BreakStatement[48388-48394]"
    }, {
      "left" : "case Doctype:",
      "right" : "case Doctype:",
      "info" : "SwitchCase[48331-48344]:SwitchCase[48411-48424]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[48365-48380]:ExpressionStatement[48445-48460]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[48401-48407]:BreakStatement[48481-48487]"
    }, {
      "left" : "case StartTag:",
      "right" : "case StartTag:",
      "info" : "SwitchCase[48424-48438]:SwitchCase[48504-48518]"
    }, {
      "left" : "Token.StartTag startTag = t.asStartTag();",
      "right" : "Token.StartTag startTag = t.asStartTag();",
      "info" : "VariableDeclarationStatement[48459-48500]:VariableDeclarationStatement[48539-48580]"
    }, {
      "left" : "String name = startTag.name();",
      "right" : "String name = startTag.name();",
      "info" : "VariableDeclarationStatement[48521-48551]:VariableDeclarationStatement[48601-48631]"
    }, {
      "left" : "if (name.equals(\"html\"))",
      "right" : "if (name.equals(\"html\"))",
      "info" : "IfStatement[48572-48826]:IfStatement[48652-48906]"
    }, {
      "left" : "return tb.process(t, InBody);",
      "right" : "return tb.process(t, InBody);",
      "info" : "ReturnStatement[48621-48650]:ReturnStatement[48701-48730]"
    }, {
      "left" : "if (name.equals(\"col\"))",
      "right" : "if (name.equals(\"col\"))",
      "info" : "IfStatement[48676-48826]:IfStatement[48756-48906]"
    }, {
      "left" : "tb.insertEmpty(startTag);",
      "right" : "tb.insertEmpty(startTag);",
      "info" : "ExpressionStatement[48724-48749]:ExpressionStatement[48804-48829]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[48799-48826]:ReturnStatement[48879-48906]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[48847-48853]:BreakStatement[48927-48933]"
    }, {
      "left" : "case EndTag:",
      "right" : "case EndTag:",
      "info" : "SwitchCase[48870-48882]:SwitchCase[48950-48962]"
    }, {
      "left" : "Token.EndTag endTag = t.asEndTag();",
      "right" : "Token.EndTag endTag = t.asEndTag();",
      "info" : "VariableDeclarationStatement[48903-48938]:VariableDeclarationStatement[48983-49018]"
    }, {
      "left" : "name = endTag.name();",
      "right" : "name = endTag.name();",
      "info" : "ExpressionStatement[48959-48980]:ExpressionStatement[49039-49060]"
    }, {
      "left" : "if (name.equals(\"colgroup\"))",
      "right" : "if (name.equals(\"colgroup\"))",
      "info" : "IfStatement[49001-49435]:IfStatement[49081-49515]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49030-49378]:Block[49110-49458]"
    }, {
      "left" : "if (tb.currentElement().nodeName().equals(\"html\"))",
      "right" : "if (tb.currentElement().nodeName().equals(\"html\"))",
      "info" : "IfStatement[49056-49356]:IfStatement[49136-49436]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49107-49233]:Block[49187-49313]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[49150-49165]:ExpressionStatement[49230-49245]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[49194-49207]:ReturnStatement[49274-49287]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49239-49356]:Block[49319-49436]"
    }, {
      "left" : "tb.pop();",
      "right" : "tb.pop();",
      "info" : "ExpressionStatement[49269-49278]:ExpressionStatement[49349-49358]"
    }, {
      "left" : "tb.transition(InTable);",
      "right" : "tb.transition(InTable);",
      "info" : "ExpressionStatement[49307-49330]:ExpressionStatement[49387-49410]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[49408-49435]:ReturnStatement[49488-49515]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[49456-49462]:BreakStatement[49536-49542]"
    }, {
      "left" : "case EOF:",
      "right" : "case EOF:",
      "info" : "SwitchCase[49479-49488]:SwitchCase[49559-49568]"
    }, {
      "left" : "if (tb.currentElement().nodeName().equals(\"html\"))",
      "right" : "if (tb.currentElement().nodeName().equals(\"html\"))",
      "info" : "IfStatement[49509-49700]:IfStatement[49589-49780]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[49584-49596]:ReturnStatement[49664-49676]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[49673-49700]:ReturnStatement[49753-49780]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[49717-49725]:SwitchCase[49797-49805]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[49746-49773]:ReturnStatement[49826-49853]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[49800-49812]:ReturnStatement[49880-49892]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[49832-49839]:Modifier[49912-49919]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[49840-49847]:PrimitiveType[49920-49927]"
    }, {
      "left" : "anythingElse",
      "right" : "anythingElse",
      "info" : "SimpleName[49848-49860]:SimpleName[49928-49940]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[49861-49868]:SingleVariableDeclaration[49941-49948]"
    }, {
      "left" : "TreeBuilder tb",
      "right" : "TreeBuilder tb",
      "info" : "SingleVariableDeclaration[49870-49884]:SingleVariableDeclaration[49950-49964]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49886-50090]:Block[49966-50170]"
    }, {
      "left" : "boolean processed = tb.process(new Token.EndTag(\"colgroup\"));",
      "right" : "boolean processed = tb.process(new Token.EndTag(\"colgroup\"));",
      "info" : "VariableDeclarationStatement[49900-49961]:VariableDeclarationStatement[49980-50041]"
    }, {
      "left" : "if (processed)",
      "right" : "if (processed)",
      "info" : "IfStatement[49974-50055]:IfStatement[50054-50135]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[50034-50055]:ReturnStatement[50114-50135]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[50068-50080]:ReturnStatement[50148-50160]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[50124-50131]:PrimitiveType[50204-50211]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[50132-50139]:SimpleName[50212-50219]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[50140-50147]:SingleVariableDeclaration[50220-50227]"
    }, {
      "left" : "HtmlTreeBuilder tb",
      "right" : "HtmlTreeBuilder tb",
      "info" : "SingleVariableDeclaration[50149-50167]:SingleVariableDeclaration[50229-50247]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50169-52115]:Block[50249-52195]"
    }, {
      "left" : "switch (t.type) {\n                case StartTag:\n                    Token.StartTag startTag = t.asStartTag();\n                    String name = startTag.name();\n                    if (name.equals(\"tr\")) {\n                        tb.clearStackToTableBodyContext();\n                        tb.insert(startTag);\n                        tb.transition(InRow);\n                    } else if (StringUtil.in(name, \"th\", \"td\")) {\n                        tb.error(this);\n                        tb.process(new Token.StartTag(\"tr\"));\n                        return tb.process(startTag);\n                    } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) {\n                        return exitTableBody(t, tb);\n                    } else\n                        return anythingElse(t, tb);\n                    break;\n                case EndTag:\n                    Token.EndTag endTag = t.asEndTag();\n                    name = endTag.name();\n                    if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n                        if (!tb.inTableScope(name)) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.clearStackToTableBodyContext();\n                            tb.pop();\n                            tb.transition(InTable);\n                        }\n                    } else if (name.equals(\"table\")) {\n                        return exitTableBody(t, tb);\n                    } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) {\n                        tb.error(this);\n                        return false;\n                    } else\n                        return anythingElse(t, tb);\n                    break;\n                default:\n                    return anythingElse(t, tb);\n            }",
      "right" : "switch (t.type) {\n                case StartTag:\n                    Token.StartTag startTag = t.asStartTag();\n                    String name = startTag.name();\n                    if (name.equals(\"tr\")) {\n                        tb.clearStackToTableBodyContext();\n                        tb.insert(startTag);\n                        tb.transition(InRow);\n                    } else if (StringUtil.in(name, \"th\", \"td\")) {\n                        tb.error(this);\n                        tb.process(new Token.StartTag(\"tr\"));\n                        return tb.process(startTag);\n                    } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) {\n                        return exitTableBody(t, tb);\n                    } else\n                        return anythingElse(t, tb);\n                    break;\n                case EndTag:\n                    Token.EndTag endTag = t.asEndTag();\n                    name = endTag.name();\n                    if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n                        if (!tb.inTableScope(name)) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.clearStackToTableBodyContext();\n                            tb.pop();\n                            tb.transition(InTable);\n                        }\n                    } else if (name.equals(\"table\")) {\n                        return exitTableBody(t, tb);\n                    } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) {\n                        tb.error(this);\n                        return false;\n                    } else\n                        return anythingElse(t, tb);\n                    break;\n                default:\n                    return anythingElse(t, tb);\n            }",
      "info" : "SwitchStatement[50183-52080]:SwitchStatement[50263-52160]"
    }, {
      "left" : "case StartTag:",
      "right" : "case StartTag:",
      "info" : "SwitchCase[50217-50231]:SwitchCase[50297-50311]"
    }, {
      "left" : "Token.StartTag startTag = t.asStartTag();",
      "right" : "Token.StartTag startTag = t.asStartTag();",
      "info" : "VariableDeclarationStatement[50252-50293]:VariableDeclarationStatement[50332-50373]"
    }, {
      "left" : "String name = startTag.name();",
      "right" : "String name = startTag.name();",
      "info" : "VariableDeclarationStatement[50314-50344]:VariableDeclarationStatement[50394-50424]"
    }, {
      "left" : "if (name.equals(\"tr\"))",
      "right" : "if (name.equals(\"tr\"))",
      "info" : "IfStatement[50365-51003]:IfStatement[50445-51083]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50388-50561]:Block[50468-50641]"
    }, {
      "left" : "tb.clearStackToTableBodyContext();",
      "right" : "tb.clearStackToTableBodyContext();",
      "info" : "ExpressionStatement[50414-50448]:ExpressionStatement[50494-50528]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[50473-50493]:ExpressionStatement[50553-50573]"
    }, {
      "left" : "tb.transition(InRow);",
      "right" : "tb.transition(InRow);",
      "info" : "ExpressionStatement[50518-50539]:ExpressionStatement[50598-50619]"
    }, {
      "left" : "if (StringUtil.in(name, \"th\", \"td\"))",
      "right" : "if (StringUtil.in(name, \"th\", \"td\"))",
      "info" : "IfStatement[50567-51003]:IfStatement[50647-51083]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50604-50782]:Block[50684-50862]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[50630-50645]:ExpressionStatement[50710-50725]"
    }, {
      "left" : "tb.process(new Token.StartTag(\"tr\"));",
      "right" : "tb.process(new Token.StartTag(\"tr\"));",
      "info" : "ExpressionStatement[50670-50707]:ExpressionStatement[50750-50787]"
    }, {
      "left" : "return tb.process(startTag);",
      "right" : "return tb.process(startTag);",
      "info" : "ReturnStatement[50732-50760]:ReturnStatement[50812-50840]"
    }, {
      "left" : "if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\"))",
      "right" : "if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\"))",
      "info" : "IfStatement[50788-51003]:IfStatement[50868-51083]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50870-50946]:Block[50950-51026]"
    }, {
      "left" : "return exitTableBody(t, tb);",
      "right" : "return exitTableBody(t, tb);",
      "info" : "ReturnStatement[50896-50924]:ReturnStatement[50976-51004]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[50976-51003]:ReturnStatement[51056-51083]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[51024-51030]:BreakStatement[51104-51110]"
    }, {
      "left" : "case EndTag:",
      "right" : "case EndTag:",
      "info" : "SwitchCase[51047-51059]:SwitchCase[51127-51139]"
    }, {
      "left" : "Token.EndTag endTag = t.asEndTag();",
      "right" : "Token.EndTag endTag = t.asEndTag();",
      "info" : "VariableDeclarationStatement[51080-51115]:VariableDeclarationStatement[51160-51195]"
    }, {
      "left" : "name = endTag.name();",
      "right" : "name = endTag.name();",
      "info" : "ExpressionStatement[51136-51157]:ExpressionStatement[51216-51237]"
    }, {
      "left" : "if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\"))",
      "right" : "if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\"))",
      "info" : "IfStatement[51178-51966]:IfStatement[51258-52046]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51230-51605]:Block[51310-51685]"
    }, {
      "left" : "if (!tb.inTableScope(name))",
      "right" : "if (!tb.inTableScope(name))",
      "info" : "IfStatement[51256-51583]:IfStatement[51336-51663]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51284-51397]:Block[51364-51477]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[51314-51329]:ExpressionStatement[51394-51409]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[51358-51371]:ReturnStatement[51438-51451]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51403-51583]:Block[51483-51663]"
    }, {
      "left" : "tb.clearStackToTableBodyContext();",
      "right" : "tb.clearStackToTableBodyContext();",
      "info" : "ExpressionStatement[51433-51467]:ExpressionStatement[51513-51547]"
    }, {
      "left" : "tb.pop();",
      "right" : "tb.pop();",
      "info" : "ExpressionStatement[51496-51505]:ExpressionStatement[51576-51585]"
    }, {
      "left" : "tb.transition(InTable);",
      "right" : "tb.transition(InTable);",
      "info" : "ExpressionStatement[51534-51557]:ExpressionStatement[51614-51637]"
    }, {
      "left" : "if (name.equals(\"table\"))",
      "right" : "if (name.equals(\"table\"))",
      "info" : "IfStatement[51611-51966]:IfStatement[51691-52046]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51637-51713]:Block[51717-51793]"
    }, {
      "left" : "return exitTableBody(t, tb);",
      "right" : "return exitTableBody(t, tb);",
      "info" : "ReturnStatement[51663-51691]:ReturnStatement[51743-51771]"
    }, {
      "left" : "if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\"))",
      "right" : "if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\"))",
      "info" : "IfStatement[51719-51966]:IfStatement[51799-52046]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51808-51909]:Block[51888-51989]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[51834-51849]:ExpressionStatement[51914-51929]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[51874-51887]:ReturnStatement[51954-51967]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[51939-51966]:ReturnStatement[52019-52046]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[51987-51993]:BreakStatement[52067-52073]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[52010-52018]:SwitchCase[52090-52098]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[52039-52066]:ReturnStatement[52119-52146]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[52093-52105]:ReturnStatement[52173-52185]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[52125-52132]:Modifier[52205-52212]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[52133-52140]:PrimitiveType[52213-52220]"
    }, {
      "left" : "exitTableBody",
      "right" : "exitTableBody",
      "info" : "SimpleName[52141-52154]:SimpleName[52221-52234]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[52155-52162]:SingleVariableDeclaration[52235-52242]"
    }, {
      "left" : "HtmlTreeBuilder tb",
      "right" : "HtmlTreeBuilder tb",
      "info" : "SingleVariableDeclaration[52164-52182]:SingleVariableDeclaration[52244-52262]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52184-52576]:Block[52264-52656]"
    }, {
      "left" : "if (!(tb.inTableScope(\"tbody\") || tb.inTableScope(\"thead\") || tb.inScope(\"tfoot\")))",
      "right" : "if (!(tb.inTableScope(\"tbody\") || tb.inTableScope(\"thead\") || tb.inScope(\"tfoot\")))",
      "info" : "IfStatement[52198-52388]:IfStatement[52278-52468]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52282-52388]:Block[52362-52468]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[52329-52344]:ExpressionStatement[52409-52424]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[52361-52374]:ReturnStatement[52441-52454]"
    }, {
      "left" : "tb.clearStackToTableBodyContext();",
      "right" : "tb.clearStackToTableBodyContext();",
      "info" : "ExpressionStatement[52401-52435]:ExpressionStatement[52481-52515]"
    }, {
      "left" : "tb.process(new Token.EndTag(tb.currentElement().nodeName()));",
      "right" : "tb.process(new Token.EndTag(tb.currentElement().nodeName()));",
      "info" : "ExpressionStatement[52448-52509]:ExpressionStatement[52528-52589]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[52545-52566]:ReturnStatement[52625-52646]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[52586-52593]:Modifier[52666-52673]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[52594-52601]:PrimitiveType[52674-52681]"
    }, {
      "left" : "anythingElse",
      "right" : "anythingElse",
      "info" : "SimpleName[52602-52614]:SimpleName[52682-52694]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[52615-52622]:SingleVariableDeclaration[52695-52702]"
    }, {
      "left" : "HtmlTreeBuilder tb",
      "right" : "HtmlTreeBuilder tb",
      "info" : "SingleVariableDeclaration[52624-52642]:SingleVariableDeclaration[52704-52722]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52644-52698]:Block[52724-52778]"
    }, {
      "left" : "return tb.process(t, InTable);",
      "right" : "return tb.process(t, InTable);",
      "info" : "ReturnStatement[52658-52688]:ReturnStatement[52738-52768]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[52726-52733]:PrimitiveType[52806-52813]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[52734-52741]:SimpleName[52814-52821]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[52742-52749]:SingleVariableDeclaration[52822-52829]"
    }, {
      "left" : "HtmlTreeBuilder tb",
      "right" : "HtmlTreeBuilder tb",
      "info" : "SingleVariableDeclaration[52751-52769]:SingleVariableDeclaration[52831-52849]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52771-54703]:Block[52851-54783]"
    }, {
      "left" : "if (t.isStartTag())",
      "right" : "if (t.isStartTag())",
      "info" : "IfStatement[52785-54668]:IfStatement[52865-54748]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52805-53433]:Block[52885-53513]"
    }, {
      "left" : "Token.StartTag startTag = t.asStartTag();",
      "right" : "Token.StartTag startTag = t.asStartTag();",
      "info" : "VariableDeclarationStatement[52823-52864]:VariableDeclarationStatement[52903-52944]"
    }, {
      "left" : "String name = startTag.name();",
      "right" : "String name = startTag.name();",
      "info" : "VariableDeclarationStatement[52881-52911]:VariableDeclarationStatement[52961-52991]"
    }, {
      "left" : "if (StringUtil.in(name, \"th\", \"td\"))",
      "right" : "if (StringUtil.in(name, \"th\", \"td\"))",
      "info" : "IfStatement[52929-53419]:IfStatement[53009-53499]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52966-53182]:Block[53046-53262]"
    }, {
      "left" : "tb.clearStackToTableRowContext();",
      "right" : "tb.clearStackToTableRowContext();",
      "info" : "ExpressionStatement[52988-53021]:ExpressionStatement[53068-53101]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[53042-53062]:ExpressionStatement[53122-53142]"
    }, {
      "left" : "tb.transition(InCell);",
      "right" : "tb.transition(InCell);",
      "info" : "ExpressionStatement[53083-53105]:ExpressionStatement[53163-53185]"
    }, {
      "left" : "tb.insertMarkerToFormattingElements();",
      "right" : "tb.insertMarkerToFormattingElements();",
      "info" : "ExpressionStatement[53126-53164]:ExpressionStatement[53206-53244]"
    }, {
      "left" : "if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\", \"tr\"))",
      "right" : "if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\", \"tr\"))",
      "info" : "IfStatement[53188-53419]:IfStatement[53268-53499]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53276-53346]:Block[53356-53426]"
    }, {
      "left" : "return handleMissingTr(t, tb);",
      "right" : "return handleMissingTr(t, tb);",
      "info" : "ReturnStatement[53298-53328]:ReturnStatement[53378-53408]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53352-53419]:Block[53432-53499]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[53374-53401]:ReturnStatement[53454-53481]"
    }, {
      "left" : "if (t.isEndTag())",
      "right" : "if (t.isEndTag())",
      "info" : "IfStatement[53439-54668]:IfStatement[53519-54748]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53457-54603]:Block[53537-54683]"
    }, {
      "left" : "Token.EndTag endTag = t.asEndTag();",
      "right" : "Token.EndTag endTag = t.asEndTag();",
      "info" : "VariableDeclarationStatement[53475-53510]:VariableDeclarationStatement[53555-53590]"
    }, {
      "left" : "String name = endTag.name();",
      "right" : "String name = endTag.name();",
      "info" : "VariableDeclarationStatement[53527-53555]:VariableDeclarationStatement[53607-53635]"
    }, {
      "left" : "if (name.equals(\"tr\"))",
      "right" : "if (name.equals(\"tr\"))",
      "info" : "IfStatement[53573-54589]:IfStatement[53653-54669]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53596-53911]:Block[53676-53991]"
    }, {
      "left" : "if (!tb.inTableScope(name))",
      "right" : "if (!tb.inTableScope(name))",
      "info" : "IfStatement[53618-53755]:IfStatement[53698-53835]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53646-53755]:Block[53726-53835]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[53672-53687]:ExpressionStatement[53752-53767]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[53720-53733]:ReturnStatement[53800-53813]"
    }, {
      "left" : "tb.clearStackToTableRowContext();",
      "right" : "tb.clearStackToTableRowContext();",
      "info" : "ExpressionStatement[53776-53809]:ExpressionStatement[53856-53889]"
    }, {
      "left" : "tb.pop();",
      "right" : "tb.pop();",
      "info" : "ExpressionStatement[53830-53839]:ExpressionStatement[53910-53919]"
    }, {
      "left" : "tb.transition(InTableBody);",
      "right" : "tb.transition(InTableBody);",
      "info" : "ExpressionStatement[53866-53893]:ExpressionStatement[53946-53973]"
    }, {
      "left" : "if (name.equals(\"table\"))",
      "right" : "if (name.equals(\"table\"))",
      "info" : "IfStatement[53917-54589]:IfStatement[53997-54669]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53943-54013]:Block[54023-54093]"
    }, {
      "left" : "return handleMissingTr(t, tb);",
      "right" : "return handleMissingTr(t, tb);",
      "info" : "ReturnStatement[53965-53995]:ReturnStatement[54045-54075]"
    }, {
      "left" : "if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\"))",
      "right" : "if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\"))",
      "info" : "IfStatement[54019-54589]:IfStatement[54099-54669]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54071-54338]:Block[54151-54418]"
    }, {
      "left" : "if (!tb.inTableScope(name))",
      "right" : "if (!tb.inTableScope(name))",
      "info" : "IfStatement[54093-54222]:IfStatement[54173-54302]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54121-54222]:Block[54201-54302]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[54147-54162]:ExpressionStatement[54227-54242]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[54187-54200]:ReturnStatement[54267-54280]"
    }, {
      "left" : "tb.process(new Token.EndTag(\"tr\"));",
      "right" : "tb.process(new Token.EndTag(\"tr\"));",
      "info" : "ExpressionStatement[54243-54278]:ExpressionStatement[54323-54358]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[54299-54320]:ReturnStatement[54379-54400]"
    }, {
      "left" : "if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\"))",
      "right" : "if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\"))",
      "info" : "IfStatement[54344-54589]:IfStatement[54424-54669]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54427-54516]:Block[54507-54596]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[54449-54464]:ExpressionStatement[54529-54544]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[54485-54498]:ReturnStatement[54565-54578]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54522-54589]:Block[54602-54669]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[54544-54571]:ReturnStatement[54624-54651]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54609-54668]:Block[54689-54748]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[54627-54654]:ReturnStatement[54707-54734]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[54681-54693]:ReturnStatement[54761-54773]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[54713-54720]:Modifier[54793-54800]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[54721-54728]:PrimitiveType[54801-54808]"
    }, {
      "left" : "anythingElse",
      "right" : "anythingElse",
      "info" : "SimpleName[54729-54741]:SimpleName[54809-54821]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[54742-54749]:SingleVariableDeclaration[54822-54829]"
    }, {
      "left" : "HtmlTreeBuilder tb",
      "right" : "HtmlTreeBuilder tb",
      "info" : "SingleVariableDeclaration[54751-54769]:SingleVariableDeclaration[54831-54849]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54771-54825]:Block[54851-54905]"
    }, {
      "left" : "return tb.process(t, InTable);",
      "right" : "return tb.process(t, InTable);",
      "info" : "ReturnStatement[54785-54815]:ReturnStatement[54865-54895]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[54835-54842]:Modifier[54915-54922]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[54843-54850]:PrimitiveType[54923-54930]"
    }, {
      "left" : "handleMissingTr",
      "right" : "handleMissingTr",
      "info" : "SimpleName[54851-54866]:SimpleName[54931-54946]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[54867-54874]:SingleVariableDeclaration[54947-54954]"
    }, {
      "left" : "TreeBuilder tb",
      "right" : "TreeBuilder tb",
      "info" : "SingleVariableDeclaration[54876-54890]:SingleVariableDeclaration[54956-54970]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54892-55083]:Block[54972-55163]"
    }, {
      "left" : "boolean processed = tb.process(new Token.EndTag(\"tr\"));",
      "right" : "boolean processed = tb.process(new Token.EndTag(\"tr\"));",
      "info" : "VariableDeclarationStatement[54906-54961]:VariableDeclarationStatement[54986-55041]"
    }, {
      "left" : "if (processed)",
      "right" : "if (processed)",
      "info" : "IfStatement[54974-55073]:IfStatement[55054-55153]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[55005-55026]:ReturnStatement[55085-55106]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[55060-55073]:ReturnStatement[55140-55153]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[55112-55119]:PrimitiveType[55192-55199]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[55120-55127]:SimpleName[55200-55207]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[55128-55135]:SingleVariableDeclaration[55208-55215]"
    }, {
      "left" : "HtmlTreeBuilder tb",
      "right" : "HtmlTreeBuilder tb",
      "info" : "SingleVariableDeclaration[55137-55155]:SingleVariableDeclaration[55217-55235]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55157-57042]:Block[55237-57122]"
    }, {
      "left" : "if (t.isEndTag())",
      "right" : "if (t.isEndTag())",
      "info" : "IfStatement[55171-57007]:IfStatement[55251-57087]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55189-56508]:Block[55269-56588]"
    }, {
      "left" : "Token.EndTag endTag = t.asEndTag();",
      "right" : "Token.EndTag endTag = t.asEndTag();",
      "info" : "VariableDeclarationStatement[55207-55242]:VariableDeclarationStatement[55287-55322]"
    }, {
      "left" : "String name = endTag.name();",
      "right" : "String name = endTag.name();",
      "info" : "VariableDeclarationStatement[55259-55287]:VariableDeclarationStatement[55339-55367]"
    }, {
      "left" : "if (StringUtil.in(name, \"td\", \"th\"))",
      "right" : "if (StringUtil.in(name, \"td\", \"th\"))",
      "info" : "IfStatement[55305-56494]:IfStatement[55385-56574]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55342-55936]:Block[55422-56016]"
    }, {
      "left" : "if (!tb.inTableScope(name))",
      "right" : "if (!tb.inTableScope(name))",
      "info" : "IfStatement[55364-55609]:IfStatement[55444-55689]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55392-55609]:Block[55472-55689]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[55418-55433]:ExpressionStatement[55498-55513]"
    }, {
      "left" : "tb.transition(InRow);",
      "right" : "tb.transition(InRow);",
      "info" : "ExpressionStatement[55458-55479]:ExpressionStatement[55538-55559]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[55574-55587]:ReturnStatement[55654-55667]"
    }, {
      "left" : "tb.generateImpliedEndTags();",
      "right" : "tb.generateImpliedEndTags();",
      "info" : "ExpressionStatement[55630-55658]:ExpressionStatement[55710-55738]"
    }, {
      "left" : "if (!tb.currentElement().nodeName().equals(name))",
      "right" : "if (!tb.currentElement().nodeName().equals(name))",
      "info" : "IfStatement[55679-55768]:IfStatement[55759-55848]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[55753-55768]:ExpressionStatement[55833-55848]"
    }, {
      "left" : "tb.popStackToClose(name);",
      "right" : "tb.popStackToClose(name);",
      "info" : "ExpressionStatement[55789-55814]:ExpressionStatement[55869-55894]"
    }, {
      "left" : "tb.clearFormattingElementsToLastMarker();",
      "right" : "tb.clearFormattingElementsToLastMarker();",
      "info" : "ExpressionStatement[55835-55876]:ExpressionStatement[55915-55956]"
    }, {
      "left" : "tb.transition(InRow);",
      "right" : "tb.transition(InRow);",
      "info" : "ExpressionStatement[55897-55918]:ExpressionStatement[55977-55998]"
    }, {
      "left" : "if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\"))",
      "right" : "if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\"))",
      "info" : "IfStatement[55942-56494]:IfStatement[56022-56574]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56013-56102]:Block[56093-56182]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[56035-56050]:ExpressionStatement[56115-56130]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[56071-56084]:ReturnStatement[56151-56164]"
    }, {
      "left" : "if (StringUtil.in(name, \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"))",
      "right" : "if (StringUtil.in(name, \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"))",
      "info" : "IfStatement[56108-56494]:IfStatement[56188-56574]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56175-56421]:Block[56255-56501]"
    }, {
      "left" : "if (!tb.inTableScope(name))",
      "right" : "if (!tb.inTableScope(name))",
      "info" : "IfStatement[56197-56326]:IfStatement[56277-56406]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56225-56326]:Block[56305-56406]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[56251-56266]:ExpressionStatement[56331-56346]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[56291-56304]:ReturnStatement[56371-56384]"
    }, {
      "left" : "closeCell(tb);",
      "right" : "closeCell(tb);",
      "info" : "ExpressionStatement[56347-56361]:ExpressionStatement[56427-56441]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[56382-56403]:ReturnStatement[56462-56483]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56427-56494]:Block[56507-56574]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[56449-56476]:ReturnStatement[56529-56556]"
    }, {
      "left" : "if (t.isStartTag() &&\n                    StringUtil.in(t.asStartTag().name(),\n                            \"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"))",
      "right" : "if (t.isStartTag() &&\n                    StringUtil.in(t.asStartTag().name(),\n                            \"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"))",
      "info" : "IfStatement[56514-57007]:IfStatement[56594-57087]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56697-56942]:Block[56777-57022]"
    }, {
      "left" : "if (!(tb.inTableScope(\"td\") || tb.inTableScope(\"th\")))",
      "right" : "if (!(tb.inTableScope(\"td\") || tb.inTableScope(\"th\")))",
      "info" : "IfStatement[56715-56859]:IfStatement[56795-56939]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56770-56859]:Block[56850-56939]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[56792-56807]:ExpressionStatement[56872-56887]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[56828-56841]:ReturnStatement[56908-56921]"
    }, {
      "left" : "closeCell(tb);",
      "right" : "closeCell(tb);",
      "info" : "ExpressionStatement[56876-56890]:ExpressionStatement[56956-56970]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[56907-56928]:ReturnStatement[56987-57008]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56948-57007]:Block[57028-57087]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[56966-56993]:ReturnStatement[57046-57073]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[57020-57032]:ReturnStatement[57100-57112]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[57052-57059]:Modifier[57132-57139]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[57060-57067]:PrimitiveType[57140-57147]"
    }, {
      "left" : "anythingElse",
      "right" : "anythingElse",
      "info" : "SimpleName[57068-57080]:SimpleName[57148-57160]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[57081-57088]:SingleVariableDeclaration[57161-57168]"
    }, {
      "left" : "HtmlTreeBuilder tb",
      "right" : "HtmlTreeBuilder tb",
      "info" : "SingleVariableDeclaration[57090-57108]:SingleVariableDeclaration[57170-57188]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57110-57163]:Block[57190-57243]"
    }, {
      "left" : "return tb.process(t, InBody);",
      "right" : "return tb.process(t, InBody);",
      "info" : "ReturnStatement[57124-57153]:ReturnStatement[57204-57233]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[57173-57180]:Modifier[57253-57260]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[57181-57185]:PrimitiveType[57261-57265]"
    }, {
      "left" : "closeCell",
      "right" : "closeCell",
      "info" : "SimpleName[57186-57195]:SimpleName[57266-57275]"
    }, {
      "left" : "HtmlTreeBuilder tb",
      "right" : "HtmlTreeBuilder tb",
      "info" : "SingleVariableDeclaration[57196-57214]:SingleVariableDeclaration[57276-57294]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57216-57421]:Block[57296-57501]"
    }, {
      "left" : "if (tb.inTableScope(\"td\"))",
      "right" : "if (tb.inTableScope(\"td\"))",
      "info" : "IfStatement[57230-57377]:IfStatement[57310-57457]"
    }, {
      "left" : "tb.process(new Token.EndTag(\"td\"));",
      "right" : "tb.process(new Token.EndTag(\"td\"));",
      "info" : "ExpressionStatement[57273-57308]:ExpressionStatement[57353-57388]"
    }, {
      "left" : "tb.process(new Token.EndTag(\"th\"));",
      "right" : "tb.process(new Token.EndTag(\"th\"));",
      "info" : "ExpressionStatement[57342-57377]:ExpressionStatement[57422-57457]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[57452-57459]:PrimitiveType[57532-57539]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[57460-57467]:SimpleName[57540-57547]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[57468-57475]:SingleVariableDeclaration[57548-57555]"
    }, {
      "left" : "HtmlTreeBuilder tb",
      "right" : "HtmlTreeBuilder tb",
      "info" : "SingleVariableDeclaration[57477-57495]:SingleVariableDeclaration[57557-57575]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57497-61250]:Block[57577-61330]"
    }, {
      "left" : "switch (t.type) {\n                case Character:\n                    Token.Character c = t.asCharacter();\n                    if (c.getData().equals(nullString)) {\n                        tb.error(this);\n                        return false;\n                    } else {\n                        tb.insert(c);\n                    }\n                    break;\n                case Comment:\n                    tb.insert(t.asComment());\n                    break;\n                case Doctype:\n                    tb.error(this);\n                    return false;\n                case StartTag:\n                    Token.StartTag start = t.asStartTag();\n                    String name = start.name();\n                    if (name.equals(\"html\"))\n                        return tb.process(start, InBody);\n                    else if (name.equals(\"option\")) {\n                        tb.process(new Token.EndTag(\"option\"));\n                        tb.insert(start);\n                    } else if (name.equals(\"optgroup\")) {\n                        if (tb.currentElement().nodeName().equals(\"option\"))\n                            tb.process(new Token.EndTag(\"option\"));\n                        else if (tb.currentElement().nodeName().equals(\"optgroup\"))\n                            tb.process(new Token.EndTag(\"optgroup\"));\n                        tb.insert(start);\n                    } else if (name.equals(\"select\")) {\n                        tb.error(this);\n                        return tb.process(new Token.EndTag(\"select\"));\n                    } else if (StringUtil.in(name, \"input\", \"keygen\", \"textarea\")) {\n                        tb.error(this);\n                        if (!tb.inSelectScope(\"select\"))\n                            return false; // frag\n                        tb.process(new Token.EndTag(\"select\"));\n                        return tb.process(start);\n                    } else if (name.equals(\"script\")) {\n                        return tb.process(t, InHead);\n                    } else {\n                        return anythingElse(t, tb);\n                    }\n                    break;\n                case EndTag:\n                    Token.EndTag end = t.asEndTag();\n                    name = end.name();\n                    if (name.equals(\"optgroup\")) {\n                        if (tb.currentElement().nodeName().equals(\"option\") && tb.aboveOnStack(tb.currentElement()) != null && tb.aboveOnStack(tb.currentElement()).nodeName().equals(\"optgroup\"))\n                            tb.process(new Token.EndTag(\"option\"));\n                        if (tb.currentElement().nodeName().equals(\"optgroup\"))\n                            tb.pop();\n                        else\n                            tb.error(this);\n                    } else if (name.equals(\"option\")) {\n                        if (tb.currentElement().nodeName().equals(\"option\"))\n                            tb.pop();\n                        else\n                            tb.error(this);\n                    } else if (name.equals(\"select\")) {\n                        if (!tb.inSelectScope(name)) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.popStackToClose(name);\n                            tb.resetInsertionMode();\n                        }\n                    } else\n                        return anythingElse(t, tb);\n                    break;\n                case EOF:\n                    if (!tb.currentElement().nodeName().equals(\"html\"))\n                        tb.error(this);\n                    break;\n                default:\n                    return anythingElse(t, tb);\n            }",
      "right" : "switch (t.type) {\n                case Character:\n                    Token.Character c = t.asCharacter();\n                    if (c.getData().equals(nullString)) {\n                        tb.error(this);\n                        return false;\n                    } else {\n                        tb.insert(c);\n                    }\n                    break;\n                case Comment:\n                    tb.insert(t.asComment());\n                    break;\n                case Doctype:\n                    tb.error(this);\n                    return false;\n                case StartTag:\n                    Token.StartTag start = t.asStartTag();\n                    String name = start.name();\n                    if (name.equals(\"html\"))\n                        return tb.process(start, InBody);\n                    else if (name.equals(\"option\")) {\n                        tb.process(new Token.EndTag(\"option\"));\n                        tb.insert(start);\n                    } else if (name.equals(\"optgroup\")) {\n                        if (tb.currentElement().nodeName().equals(\"option\"))\n                            tb.process(new Token.EndTag(\"option\"));\n                        else if (tb.currentElement().nodeName().equals(\"optgroup\"))\n                            tb.process(new Token.EndTag(\"optgroup\"));\n                        tb.insert(start);\n                    } else if (name.equals(\"select\")) {\n                        tb.error(this);\n                        return tb.process(new Token.EndTag(\"select\"));\n                    } else if (StringUtil.in(name, \"input\", \"keygen\", \"textarea\")) {\n                        tb.error(this);\n                        if (!tb.inSelectScope(\"select\"))\n                            return false; // frag\n                        tb.process(new Token.EndTag(\"select\"));\n                        return tb.process(start);\n                    } else if (name.equals(\"script\")) {\n                        return tb.process(t, InHead);\n                    } else {\n                        return anythingElse(t, tb);\n                    }\n                    break;\n                case EndTag:\n                    Token.EndTag end = t.asEndTag();\n                    name = end.name();\n                    if (name.equals(\"optgroup\")) {\n                        if (tb.currentElement().nodeName().equals(\"option\") && tb.aboveOnStack(tb.currentElement()) != null && tb.aboveOnStack(tb.currentElement()).nodeName().equals(\"optgroup\"))\n                            tb.process(new Token.EndTag(\"option\"));\n                        if (tb.currentElement().nodeName().equals(\"optgroup\"))\n                            tb.pop();\n                        else\n                            tb.error(this);\n                    } else if (name.equals(\"option\")) {\n                        if (tb.currentElement().nodeName().equals(\"option\"))\n                            tb.pop();\n                        else\n                            tb.error(this);\n                    } else if (name.equals(\"select\")) {\n                        if (!tb.inSelectScope(name)) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.popStackToClose(name);\n                            tb.resetInsertionMode();\n                        }\n                    } else\n                        return anythingElse(t, tb);\n                    break;\n                case EOF:\n                    if (!tb.currentElement().nodeName().equals(\"html\"))\n                        tb.error(this);\n                    break;\n                default:\n                    return anythingElse(t, tb);\n            }",
      "info" : "SwitchStatement[57511-61215]:SwitchStatement[57591-61295]"
    }, {
      "left" : "case Character:",
      "right" : "case Character:",
      "info" : "SwitchCase[57545-57560]:SwitchCase[57625-57640]"
    }, {
      "left" : "Token.Character c = t.asCharacter();",
      "right" : "Token.Character c = t.asCharacter();",
      "info" : "VariableDeclarationStatement[57581-57617]:VariableDeclarationStatement[57661-57697]"
    }, {
      "left" : "if (c.getData().equals(nullString))",
      "right" : "if (c.getData().equals(nullString))",
      "info" : "IfStatement[57638-57842]:IfStatement[57718-57922]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57674-57775]:Block[57754-57855]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[57700-57715]:ExpressionStatement[57780-57795]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[57740-57753]:ReturnStatement[57820-57833]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57781-57842]:Block[57861-57922]"
    }, {
      "left" : "tb.insert(c);",
      "right" : "tb.insert(c);",
      "info" : "ExpressionStatement[57807-57820]:ExpressionStatement[57887-57900]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[57863-57869]:BreakStatement[57943-57949]"
    }, {
      "left" : "case Comment:",
      "right" : "case Comment:",
      "info" : "SwitchCase[57886-57899]:SwitchCase[57966-57979]"
    }, {
      "left" : "tb.insert(t.asComment());",
      "right" : "tb.insert(t.asComment());",
      "info" : "ExpressionStatement[57920-57945]:ExpressionStatement[58000-58025]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[57966-57972]:BreakStatement[58046-58052]"
    }, {
      "left" : "case Doctype:",
      "right" : "case Doctype:",
      "info" : "SwitchCase[57989-58002]:SwitchCase[58069-58082]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[58023-58038]:ExpressionStatement[58103-58118]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[58059-58072]:ReturnStatement[58139-58152]"
    }, {
      "left" : "case StartTag:",
      "right" : "case StartTag:",
      "info" : "SwitchCase[58089-58103]:SwitchCase[58169-58183]"
    }, {
      "left" : "Token.StartTag start = t.asStartTag();",
      "right" : "Token.StartTag start = t.asStartTag();",
      "info" : "VariableDeclarationStatement[58124-58162]:VariableDeclarationStatement[58204-58242]"
    }, {
      "left" : "String name = start.name();",
      "right" : "String name = start.name();",
      "info" : "VariableDeclarationStatement[58183-58210]:VariableDeclarationStatement[58263-58290]"
    }, {
      "left" : "if (name.equals(\"html\"))",
      "right" : "if (name.equals(\"html\"))",
      "info" : "IfStatement[58231-59598]:IfStatement[58311-59678]"
    }, {
      "left" : "return tb.process(start, InBody);",
      "right" : "return tb.process(start, InBody);",
      "info" : "ReturnStatement[58280-58313]:ReturnStatement[58360-58393]"
    }, {
      "left" : "if (name.equals(\"option\"))",
      "right" : "if (name.equals(\"option\"))",
      "info" : "IfStatement[58339-59598]:IfStatement[58419-59678]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58366-58495]:Block[58446-58575]"
    }, {
      "left" : "tb.process(new Token.EndTag(\"option\"));",
      "right" : "tb.process(new Token.EndTag(\"option\"));",
      "info" : "ExpressionStatement[58392-58431]:ExpressionStatement[58472-58511]"
    }, {
      "left" : "tb.insert(start);",
      "right" : "tb.insert(start);",
      "info" : "ExpressionStatement[58456-58473]:ExpressionStatement[58536-58553]"
    }, {
      "left" : "if (name.equals(\"optgroup\"))",
      "right" : "if (name.equals(\"optgroup\"))",
      "info" : "IfStatement[58501-59598]:IfStatement[58581-59678]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58530-58894]:Block[58610-58974]"
    }, {
      "left" : "if (tb.currentElement().nodeName().equals(\"option\"))",
      "right" : "if (tb.currentElement().nodeName().equals(\"option\"))",
      "info" : "IfStatement[58556-58830]:IfStatement[58636-58910]"
    }, {
      "left" : "tb.process(new Token.EndTag(\"option\"));",
      "right" : "tb.process(new Token.EndTag(\"option\"));",
      "info" : "ExpressionStatement[58637-58676]:ExpressionStatement[58717-58756]"
    }, {
      "left" : "if (tb.currentElement().nodeName().equals(\"optgroup\"))",
      "right" : "if (tb.currentElement().nodeName().equals(\"optgroup\"))",
      "info" : "IfStatement[58706-58830]:IfStatement[58786-58910]"
    }, {
      "left" : "tb.process(new Token.EndTag(\"optgroup\"));",
      "right" : "tb.process(new Token.EndTag(\"optgroup\"));",
      "info" : "ExpressionStatement[58789-58830]:ExpressionStatement[58869-58910]"
    }, {
      "left" : "tb.insert(start);",
      "right" : "tb.insert(start);",
      "info" : "ExpressionStatement[58855-58872]:ExpressionStatement[58935-58952]"
    }, {
      "left" : "if (name.equals(\"select\"))",
      "right" : "if (name.equals(\"select\"))",
      "info" : "IfStatement[58900-59598]:IfStatement[58980-59678]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58927-59061]:Block[59007-59141]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[58953-58968]:ExpressionStatement[59033-59048]"
    }, {
      "left" : "return tb.process(new Token.EndTag(\"select\"));",
      "right" : "return tb.process(new Token.EndTag(\"select\"));",
      "info" : "ReturnStatement[58993-59039]:ReturnStatement[59073-59119]"
    }, {
      "left" : "if (StringUtil.in(name, \"input\", \"keygen\", \"textarea\"))",
      "right" : "if (StringUtil.in(name, \"input\", \"keygen\", \"textarea\"))",
      "info" : "IfStatement[59067-59598]:IfStatement[59147-59678]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59123-59407]:Block[59203-59487]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[59149-59164]:ExpressionStatement[59229-59244]"
    }, {
      "left" : "if (!tb.inSelectScope(\"select\"))",
      "right" : "if (!tb.inSelectScope(\"select\"))",
      "info" : "IfStatement[59189-59263]:IfStatement[59269-59343]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[59250-59263]:ReturnStatement[59330-59343]"
    }, {
      "left" : "tb.process(new Token.EndTag(\"select\"));",
      "right" : "tb.process(new Token.EndTag(\"select\"));",
      "info" : "ExpressionStatement[59296-59335]:ExpressionStatement[59376-59415]"
    }, {
      "left" : "return tb.process(start);",
      "right" : "return tb.process(start);",
      "info" : "ReturnStatement[59360-59385]:ReturnStatement[59440-59465]"
    }, {
      "left" : "if (name.equals(\"script\"))",
      "right" : "if (name.equals(\"script\"))",
      "info" : "IfStatement[59413-59598]:IfStatement[59493-59678]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59440-59517]:Block[59520-59597]"
    }, {
      "left" : "return tb.process(t, InHead);",
      "right" : "return tb.process(t, InHead);",
      "info" : "ReturnStatement[59466-59495]:ReturnStatement[59546-59575]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59523-59598]:Block[59603-59678]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[59549-59576]:ReturnStatement[59629-59656]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[59619-59625]:BreakStatement[59699-59705]"
    }, {
      "left" : "case EndTag:",
      "right" : "case EndTag:",
      "info" : "SwitchCase[59642-59654]:SwitchCase[59722-59734]"
    }, {
      "left" : "Token.EndTag end = t.asEndTag();",
      "right" : "Token.EndTag end = t.asEndTag();",
      "info" : "VariableDeclarationStatement[59675-59707]:VariableDeclarationStatement[59755-59787]"
    }, {
      "left" : "name = end.name();",
      "right" : "name = end.name();",
      "info" : "ExpressionStatement[59728-59746]:ExpressionStatement[59808-59826]"
    }, {
      "left" : "if (name.equals(\"optgroup\"))",
      "right" : "if (name.equals(\"optgroup\"))",
      "info" : "IfStatement[59767-60936]:IfStatement[59847-61016]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59796-60272]:Block[59876-60352]"
    }, {
      "left" : "if (tb.currentElement().nodeName().equals(\"option\") && tb.aboveOnStack(tb.currentElement()) != null && tb.aboveOnStack(tb.currentElement()).nodeName().equals(\"optgroup\"))",
      "right" : "if (tb.currentElement().nodeName().equals(\"option\") && tb.aboveOnStack(tb.currentElement()) != null && tb.aboveOnStack(tb.currentElement()).nodeName().equals(\"optgroup\"))",
      "info" : "IfStatement[59822-60060]:IfStatement[59902-60140]"
    }, {
      "left" : "tb.process(new Token.EndTag(\"option\"));",
      "right" : "tb.process(new Token.EndTag(\"option\"));",
      "info" : "ExpressionStatement[60021-60060]:ExpressionStatement[60101-60140]"
    }, {
      "left" : "if (tb.currentElement().nodeName().equals(\"optgroup\"))",
      "right" : "if (tb.currentElement().nodeName().equals(\"optgroup\"))",
      "info" : "IfStatement[60085-60250]:IfStatement[60165-60330]"
    }, {
      "left" : "tb.pop();",
      "right" : "tb.pop();",
      "info" : "ExpressionStatement[60168-60177]:ExpressionStatement[60248-60257]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[60235-60250]:ExpressionStatement[60315-60330]"
    }, {
      "left" : "if (name.equals(\"option\"))",
      "right" : "if (name.equals(\"option\"))",
      "info" : "IfStatement[60278-60936]:IfStatement[60358-61016]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60305-60516]:Block[60385-60596]"
    }, {
      "left" : "if (tb.currentElement().nodeName().equals(\"option\"))",
      "right" : "if (tb.currentElement().nodeName().equals(\"option\"))",
      "info" : "IfStatement[60331-60494]:IfStatement[60411-60574]"
    }, {
      "left" : "tb.pop();",
      "right" : "tb.pop();",
      "info" : "ExpressionStatement[60412-60421]:ExpressionStatement[60492-60501]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[60479-60494]:ExpressionStatement[60559-60574]"
    }, {
      "left" : "if (name.equals(\"select\"))",
      "right" : "if (name.equals(\"select\"))",
      "info" : "IfStatement[60522-60936]:IfStatement[60602-61016]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60549-60879]:Block[60629-60959]"
    }, {
      "left" : "if (!tb.inSelectScope(name))",
      "right" : "if (!tb.inSelectScope(name))",
      "info" : "IfStatement[60575-60857]:IfStatement[60655-60937]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60604-60717]:Block[60684-60797]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[60634-60649]:ExpressionStatement[60714-60729]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[60678-60691]:ReturnStatement[60758-60771]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60723-60857]:Block[60803-60937]"
    }, {
      "left" : "tb.popStackToClose(name);",
      "right" : "tb.popStackToClose(name);",
      "info" : "ExpressionStatement[60753-60778]:ExpressionStatement[60833-60858]"
    }, {
      "left" : "tb.resetInsertionMode();",
      "right" : "tb.resetInsertionMode();",
      "info" : "ExpressionStatement[60807-60831]:ExpressionStatement[60887-60911]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[60909-60936]:ReturnStatement[60989-61016]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[60957-60963]:BreakStatement[61037-61043]"
    }, {
      "left" : "case EOF:",
      "right" : "case EOF:",
      "info" : "SwitchCase[60980-60989]:SwitchCase[61060-61069]"
    }, {
      "left" : "if (!tb.currentElement().nodeName().equals(\"html\"))",
      "right" : "if (!tb.currentElement().nodeName().equals(\"html\"))",
      "info" : "IfStatement[61010-61101]:IfStatement[61090-61181]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[61086-61101]:ExpressionStatement[61166-61181]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[61122-61128]:BreakStatement[61202-61208]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[61145-61153]:SwitchCase[61225-61233]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[61174-61201]:ReturnStatement[61254-61281]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[61228-61240]:ReturnStatement[61308-61320]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[61260-61267]:Modifier[61340-61347]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[61268-61275]:PrimitiveType[61348-61355]"
    }, {
      "left" : "anythingElse",
      "right" : "anythingElse",
      "info" : "SimpleName[61276-61288]:SimpleName[61356-61368]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[61289-61296]:SingleVariableDeclaration[61369-61376]"
    }, {
      "left" : "HtmlTreeBuilder tb",
      "right" : "HtmlTreeBuilder tb",
      "info" : "SingleVariableDeclaration[61298-61316]:SingleVariableDeclaration[61378-61396]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61318-61383]:Block[61398-61463]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[61332-61347]:ExpressionStatement[61412-61427]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[61360-61373]:ReturnStatement[61440-61453]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[61421-61428]:PrimitiveType[61501-61508]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[61429-61436]:SimpleName[61509-61516]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[61437-61444]:SingleVariableDeclaration[61517-61524]"
    }, {
      "left" : "HtmlTreeBuilder tb",
      "right" : "HtmlTreeBuilder tb",
      "info" : "SingleVariableDeclaration[61446-61464]:SingleVariableDeclaration[61526-61544]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61466-62220]:Block[61546-62300]"
    }, {
      "left" : "if (t.isStartTag() && StringUtil.in(t.asStartTag().name(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\"))",
      "right" : "if (t.isStartTag() && StringUtil.in(t.asStartTag().name(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\"))",
      "info" : "IfStatement[61480-62210]:IfStatement[61560-62290]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61605-61746]:Block[61685-61826]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[61623-61638]:ExpressionStatement[61703-61718]"
    }, {
      "left" : "tb.process(new Token.EndTag(\"select\"));",
      "right" : "tb.process(new Token.EndTag(\"select\"));",
      "info" : "ExpressionStatement[61655-61694]:ExpressionStatement[61735-61774]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[61711-61732]:ReturnStatement[61791-61812]"
    }, {
      "left" : "if (t.isEndTag() && StringUtil.in(t.asEndTag().name(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\"))",
      "right" : "if (t.isEndTag() && StringUtil.in(t.asEndTag().name(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\"))",
      "info" : "IfStatement[61752-62210]:IfStatement[61832-62290]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61873-62141]:Block[61953-62221]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[61891-61906]:ExpressionStatement[61971-61986]"
    }, {
      "left" : "if (tb.inTableScope(t.asEndTag().name()))",
      "right" : "if (tb.inTableScope(t.asEndTag().name()))",
      "info" : "IfStatement[61923-62127]:IfStatement[62003-62207]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61965-62088]:Block[62045-62168]"
    }, {
      "left" : "tb.process(new Token.EndTag(\"select\"));",
      "right" : "tb.process(new Token.EndTag(\"select\"));",
      "info" : "ExpressionStatement[61987-62026]:ExpressionStatement[62067-62106]"
    }, {
      "left" : "return (tb.process(t));",
      "right" : "return (tb.process(t));",
      "info" : "ReturnStatement[62047-62070]:ReturnStatement[62127-62150]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[62114-62127]:ReturnStatement[62194-62207]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62147-62210]:Block[62227-62290]"
    }, {
      "left" : "return tb.process(t, InSelect);",
      "right" : "return tb.process(t, InSelect);",
      "info" : "ReturnStatement[62165-62196]:ReturnStatement[62245-62276]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[62252-62259]:PrimitiveType[62332-62339]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[62260-62267]:SimpleName[62340-62347]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[62268-62275]:SingleVariableDeclaration[62348-62355]"
    }, {
      "left" : "HtmlTreeBuilder tb",
      "right" : "HtmlTreeBuilder tb",
      "info" : "SingleVariableDeclaration[62277-62295]:SingleVariableDeclaration[62357-62375]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62297-63249]:Block[62377-63329]"
    }, {
      "left" : "if (isWhitespace(t))",
      "right" : "if (isWhitespace(t))",
      "info" : "IfStatement[62311-63214]:IfStatement[62391-63294]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62332-62393]:Block[62412-62473]"
    }, {
      "left" : "return tb.process(t, InBody);",
      "right" : "return tb.process(t, InBody);",
      "info" : "ReturnStatement[62350-62379]:ReturnStatement[62430-62459]"
    }, {
      "left" : "if (t.isComment())",
      "right" : "if (t.isComment())",
      "info" : "IfStatement[62399-63214]:IfStatement[62479-63294]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62418-62493]:Block[62498-62573]"
    }, {
      "left" : "tb.insert(t.asComment());",
      "right" : "tb.insert(t.asComment());",
      "info" : "ExpressionStatement[62436-62461]:ExpressionStatement[62516-62541]"
    }, {
      "left" : "if (t.isDoctype())",
      "right" : "if (t.isDoctype())",
      "info" : "IfStatement[62499-63214]:IfStatement[62579-63294]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62518-62595]:Block[62598-62675]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[62536-62551]:ExpressionStatement[62616-62631]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[62568-62581]:ReturnStatement[62648-62661]"
    }, {
      "left" : "if (t.isStartTag() && t.asStartTag().name().equals(\"html\"))",
      "right" : "if (t.isStartTag() && t.asStartTag().name().equals(\"html\"))",
      "info" : "IfStatement[62601-63214]:IfStatement[62681-63294]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62661-62722]:Block[62741-62802]"
    }, {
      "left" : "return tb.process(t, InBody);",
      "right" : "return tb.process(t, InBody);",
      "info" : "ReturnStatement[62679-62708]:ReturnStatement[62759-62788]"
    }, {
      "left" : "if (t.isEndTag() && t.asEndTag().name().equals(\"html\"))",
      "right" : "if (t.isEndTag() && t.asEndTag().name().equals(\"html\"))",
      "info" : "IfStatement[62728-63214]:IfStatement[62808-63294]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62784-63009]:Block[62864-63089]"
    }, {
      "left" : "if (tb.isFragmentParsing())",
      "right" : "if (tb.isFragmentParsing())",
      "info" : "IfStatement[62802-62995]:IfStatement[62882-63075]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62830-62919]:Block[62910-62999]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[62852-62867]:ExpressionStatement[62932-62947]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[62888-62901]:ReturnStatement[62968-62981]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62925-62995]:Block[63005-63075]"
    }, {
      "left" : "tb.transition(AfterAfterBody);",
      "right" : "tb.transition(AfterAfterBody);",
      "info" : "ExpressionStatement[62947-62977]:ExpressionStatement[63027-63057]"
    }, {
      "left" : "if (t.isEOF())",
      "right" : "if (t.isEOF())",
      "info" : "IfStatement[63015-63214]:IfStatement[63095-63294]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63030-63084]:Block[63110-63164]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63090-63214]:Block[63170-63294]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[63108-63123]:ExpressionStatement[63188-63203]"
    }, {
      "left" : "tb.transition(InBody);",
      "right" : "tb.transition(InBody);",
      "info" : "ExpressionStatement[63140-63162]:ExpressionStatement[63220-63242]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[63179-63200]:ReturnStatement[63259-63280]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[63227-63239]:ReturnStatement[63307-63319]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[63282-63289]:PrimitiveType[63362-63369]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[63290-63297]:SimpleName[63370-63377]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[63298-63305]:SingleVariableDeclaration[63378-63385]"
    }, {
      "left" : "HtmlTreeBuilder tb",
      "right" : "HtmlTreeBuilder tb",
      "info" : "SingleVariableDeclaration[63307-63325]:SingleVariableDeclaration[63387-63405]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63327-65042]:Block[63407-65122]"
    }, {
      "left" : "if (isWhitespace(t))",
      "right" : "if (isWhitespace(t))",
      "info" : "IfStatement[63341-65007]:IfStatement[63421-65087]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63362-63421]:Block[63442-63501]"
    }, {
      "left" : "tb.insert(t.asCharacter());",
      "right" : "tb.insert(t.asCharacter());",
      "info" : "ExpressionStatement[63380-63407]:ExpressionStatement[63460-63487]"
    }, {
      "left" : "if (t.isComment())",
      "right" : "if (t.isComment())",
      "info" : "IfStatement[63427-65007]:IfStatement[63507-65087]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63446-63503]:Block[63526-63583]"
    }, {
      "left" : "tb.insert(t.asComment());",
      "right" : "tb.insert(t.asComment());",
      "info" : "ExpressionStatement[63464-63489]:ExpressionStatement[63544-63569]"
    }, {
      "left" : "if (t.isDoctype())",
      "right" : "if (t.isDoctype())",
      "info" : "IfStatement[63509-65007]:IfStatement[63589-65087]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63528-63605]:Block[63608-63685]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[63546-63561]:ExpressionStatement[63626-63641]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[63578-63591]:ReturnStatement[63658-63671]"
    }, {
      "left" : "if (t.isStartTag())",
      "right" : "if (t.isStartTag())",
      "info" : "IfStatement[63611-65007]:IfStatement[63691-65087]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63631-64249]:Block[63711-64329]"
    }, {
      "left" : "Token.StartTag start = t.asStartTag();",
      "right" : "Token.StartTag start = t.asStartTag();",
      "info" : "VariableDeclarationStatement[63649-63687]:VariableDeclarationStatement[63729-63767]"
    }, {
      "left" : "String name = start.name();",
      "right" : "String name = start.name();",
      "info" : "VariableDeclarationStatement[63704-63731]:VariableDeclarationStatement[63784-63811]"
    }, {
      "left" : "if (name.equals(\"html\"))",
      "right" : "if (name.equals(\"html\"))",
      "info" : "IfStatement[63748-64235]:IfStatement[63828-64315]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63773-63846]:Block[63853-63926]"
    }, {
      "left" : "return tb.process(start, InBody);",
      "right" : "return tb.process(start, InBody);",
      "info" : "ReturnStatement[63795-63828]:ReturnStatement[63875-63908]"
    }, {
      "left" : "if (name.equals(\"frameset\"))",
      "right" : "if (name.equals(\"frameset\"))",
      "info" : "IfStatement[63852-64235]:IfStatement[63932-64315]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63881-63938]:Block[63961-64018]"
    }, {
      "left" : "tb.insert(start);",
      "right" : "tb.insert(start);",
      "info" : "ExpressionStatement[63903-63920]:ExpressionStatement[63983-64000]"
    }, {
      "left" : "if (name.equals(\"frame\"))",
      "right" : "if (name.equals(\"frame\"))",
      "info" : "IfStatement[63944-64235]:IfStatement[64024-64315]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63970-64032]:Block[64050-64112]"
    }, {
      "left" : "tb.insertEmpty(start);",
      "right" : "tb.insertEmpty(start);",
      "info" : "ExpressionStatement[63992-64014]:ExpressionStatement[64072-64094]"
    }, {
      "left" : "if (name.equals(\"noframes\"))",
      "right" : "if (name.equals(\"noframes\"))",
      "info" : "IfStatement[64038-64235]:IfStatement[64118-64315]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64067-64140]:Block[64147-64220]"
    }, {
      "left" : "return tb.process(start, InHead);",
      "right" : "return tb.process(start, InHead);",
      "info" : "ReturnStatement[64089-64122]:ReturnStatement[64169-64202]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64146-64235]:Block[64226-64315]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[64168-64183]:ExpressionStatement[64248-64263]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[64204-64217]:ReturnStatement[64284-64297]"
    }, {
      "left" : "if (t.isEndTag() && t.asEndTag().name().equals(\"frameset\"))",
      "right" : "if (t.isEndTag() && t.asEndTag().name().equals(\"frameset\"))",
      "info" : "IfStatement[64255-65007]:IfStatement[64335-65087]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64315-64731]:Block[64395-64811]"
    }, {
      "left" : "if (tb.currentElement().nodeName().equals(\"html\"))",
      "right" : "if (tb.currentElement().nodeName().equals(\"html\"))",
      "info" : "IfStatement[64333-64717]:IfStatement[64413-64797]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64384-64481]:Block[64464-64561]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[64414-64429]:ExpressionStatement[64494-64509]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[64450-64463]:ReturnStatement[64530-64543]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64487-64717]:Block[64567-64797]"
    }, {
      "left" : "tb.pop();",
      "right" : "tb.pop();",
      "info" : "ExpressionStatement[64509-64518]:ExpressionStatement[64589-64598]"
    }, {
      "left" : "if (!tb.isFragmentParsing() && !tb.currentElement().nodeName().equals(\"frameset\"))",
      "right" : "if (!tb.isFragmentParsing() && !tb.currentElement().nodeName().equals(\"frameset\"))",
      "info" : "IfStatement[64539-64699]:IfStatement[64619-64779]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64622-64699]:Block[64702-64779]"
    }, {
      "left" : "tb.transition(AfterFrameset);",
      "right" : "tb.transition(AfterFrameset);",
      "info" : "ExpressionStatement[64648-64677]:ExpressionStatement[64728-64757]"
    }, {
      "left" : "if (t.isEOF())",
      "right" : "if (t.isEOF())",
      "info" : "IfStatement[64737-65007]:IfStatement[64817-65087]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64752-64924]:Block[64832-65004]"
    }, {
      "left" : "if (!tb.currentElement().nodeName().equals(\"html\"))",
      "right" : "if (!tb.currentElement().nodeName().equals(\"html\"))",
      "info" : "IfStatement[64770-64910]:IfStatement[64850-64990]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64822-64910]:Block[64902-64990]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[64844-64859]:ExpressionStatement[64924-64939]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[64880-64892]:ReturnStatement[64960-64972]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64930-65007]:Block[65010-65087]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[64948-64963]:ExpressionStatement[65028-65043]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[64980-64993]:ReturnStatement[65060-65073]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[65020-65032]:ReturnStatement[65100-65112]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[65078-65085]:PrimitiveType[65158-65165]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[65086-65093]:SimpleName[65166-65173]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[65094-65101]:SingleVariableDeclaration[65174-65181]"
    }, {
      "left" : "HtmlTreeBuilder tb",
      "right" : "HtmlTreeBuilder tb",
      "info" : "SingleVariableDeclaration[65103-65121]:SingleVariableDeclaration[65183-65201]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65123-65992]:Block[65203-66072]"
    }, {
      "left" : "if (isWhitespace(t))",
      "right" : "if (isWhitespace(t))",
      "info" : "IfStatement[65137-65957]:IfStatement[65217-66037]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65158-65217]:Block[65238-65297]"
    }, {
      "left" : "tb.insert(t.asCharacter());",
      "right" : "tb.insert(t.asCharacter());",
      "info" : "ExpressionStatement[65176-65203]:ExpressionStatement[65256-65283]"
    }, {
      "left" : "if (t.isComment())",
      "right" : "if (t.isComment())",
      "info" : "IfStatement[65223-65957]:IfStatement[65303-66037]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65242-65299]:Block[65322-65379]"
    }, {
      "left" : "tb.insert(t.asComment());",
      "right" : "tb.insert(t.asComment());",
      "info" : "ExpressionStatement[65260-65285]:ExpressionStatement[65340-65365]"
    }, {
      "left" : "if (t.isDoctype())",
      "right" : "if (t.isDoctype())",
      "info" : "IfStatement[65305-65957]:IfStatement[65385-66037]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65324-65401]:Block[65404-65481]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[65342-65357]:ExpressionStatement[65422-65437]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[65374-65387]:ReturnStatement[65454-65467]"
    }, {
      "left" : "if (t.isStartTag() && t.asStartTag().name().equals(\"html\"))",
      "right" : "if (t.isStartTag() && t.asStartTag().name().equals(\"html\"))",
      "info" : "IfStatement[65407-65957]:IfStatement[65487-66037]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65467-65528]:Block[65547-65608]"
    }, {
      "left" : "return tb.process(t, InBody);",
      "right" : "return tb.process(t, InBody);",
      "info" : "ReturnStatement[65485-65514]:ReturnStatement[65565-65594]"
    }, {
      "left" : "if (t.isEndTag() && t.asEndTag().name().equals(\"html\"))",
      "right" : "if (t.isEndTag() && t.asEndTag().name().equals(\"html\"))",
      "info" : "IfStatement[65534-65957]:IfStatement[65614-66037]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65590-65656]:Block[65670-65736]"
    }, {
      "left" : "tb.transition(AfterAfterFrameset);",
      "right" : "tb.transition(AfterAfterFrameset);",
      "info" : "ExpressionStatement[65608-65642]:ExpressionStatement[65688-65722]"
    }, {
      "left" : "if (t.isStartTag() && t.asStartTag().name().equals(\"noframes\"))",
      "right" : "if (t.isStartTag() && t.asStartTag().name().equals(\"noframes\"))",
      "info" : "IfStatement[65662-65957]:IfStatement[65742-66037]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65726-65787]:Block[65806-65867]"
    }, {
      "left" : "return tb.process(t, InHead);",
      "right" : "return tb.process(t, InHead);",
      "info" : "ReturnStatement[65744-65773]:ReturnStatement[65824-65853]"
    }, {
      "left" : "if (t.isEOF())",
      "right" : "if (t.isEOF())",
      "info" : "IfStatement[65793-65957]:IfStatement[65873-66037]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65808-65874]:Block[65888-65954]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65880-65957]:Block[65960-66037]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[65898-65913]:ExpressionStatement[65978-65993]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[65930-65943]:ReturnStatement[66010-66023]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[65970-65982]:ReturnStatement[66050-66062]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[66029-66036]:PrimitiveType[66109-66116]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[66037-66044]:SimpleName[66117-66124]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[66045-66052]:SingleVariableDeclaration[66125-66132]"
    }, {
      "left" : "HtmlTreeBuilder tb",
      "right" : "HtmlTreeBuilder tb",
      "info" : "SingleVariableDeclaration[66054-66072]:SingleVariableDeclaration[66134-66152]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66074-66565]:Block[66154-66645]"
    }, {
      "left" : "if (t.isComment())",
      "right" : "if (t.isComment())",
      "info" : "IfStatement[66088-66530]:IfStatement[66168-66610]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66107-66164]:Block[66187-66244]"
    }, {
      "left" : "tb.insert(t.asComment());",
      "right" : "tb.insert(t.asComment());",
      "info" : "ExpressionStatement[66125-66150]:ExpressionStatement[66205-66230]"
    }, {
      "left" : "if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().name().equals(\"html\")))",
      "right" : "if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().name().equals(\"html\")))",
      "info" : "IfStatement[66170-66530]:IfStatement[66250-66610]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66268-66329]:Block[66348-66409]"
    }, {
      "left" : "return tb.process(t, InBody);",
      "right" : "return tb.process(t, InBody);",
      "info" : "ReturnStatement[66286-66315]:ReturnStatement[66366-66395]"
    }, {
      "left" : "if (t.isEOF())",
      "right" : "if (t.isEOF())",
      "info" : "IfStatement[66335-66530]:IfStatement[66415-66610]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66350-66400]:Block[66430-66480]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66406-66530]:Block[66486-66610]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[66424-66439]:ExpressionStatement[66504-66519]"
    }, {
      "left" : "tb.transition(InBody);",
      "right" : "tb.transition(InBody);",
      "info" : "ExpressionStatement[66456-66478]:ExpressionStatement[66536-66558]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[66495-66516]:ReturnStatement[66575-66596]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[66543-66555]:ReturnStatement[66623-66635]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[66606-66613]:PrimitiveType[66686-66693]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[66614-66621]:SimpleName[66694-66701]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[66622-66629]:SingleVariableDeclaration[66702-66709]"
    }, {
      "left" : "HtmlTreeBuilder tb",
      "right" : "HtmlTreeBuilder tb",
      "info" : "SingleVariableDeclaration[66631-66649]:SingleVariableDeclaration[66711-66729]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66651-67226]:Block[66731-67306]"
    }, {
      "left" : "if (t.isComment())",
      "right" : "if (t.isComment())",
      "info" : "IfStatement[66665-67191]:IfStatement[66745-67271]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66684-66741]:Block[66764-66821]"
    }, {
      "left" : "tb.insert(t.asComment());",
      "right" : "tb.insert(t.asComment());",
      "info" : "ExpressionStatement[66702-66727]:ExpressionStatement[66782-66807]"
    }, {
      "left" : "if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().name().equals(\"html\")))",
      "right" : "if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().name().equals(\"html\")))",
      "info" : "IfStatement[66747-67191]:IfStatement[66827-67271]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66845-66906]:Block[66925-66986]"
    }, {
      "left" : "return tb.process(t, InBody);",
      "right" : "return tb.process(t, InBody);",
      "info" : "ReturnStatement[66863-66892]:ReturnStatement[66943-66972]"
    }, {
      "left" : "if (t.isEOF())",
      "right" : "if (t.isEOF())",
      "info" : "IfStatement[66912-67191]:IfStatement[66992-67271]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66927-66977]:Block[67007-67057]"
    }, {
      "left" : "if (t.isStartTag() && t.asStartTag().name().equals(\"noframes\"))",
      "right" : "if (t.isStartTag() && t.asStartTag().name().equals(\"noframes\"))",
      "info" : "IfStatement[66983-67191]:IfStatement[67063-67271]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67047-67108]:Block[67127-67188]"
    }, {
      "left" : "return tb.process(t, InHead);",
      "right" : "return tb.process(t, InHead);",
      "info" : "ReturnStatement[67065-67094]:ReturnStatement[67145-67174]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67114-67191]:Block[67194-67271]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[67132-67147]:ExpressionStatement[67212-67227]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[67164-67177]:ReturnStatement[67244-67257]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[67204-67216]:ReturnStatement[67284-67296]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[67263-67270]:PrimitiveType[67343-67350]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[67271-67278]:SimpleName[67351-67358]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[67279-67286]:SingleVariableDeclaration[67359-67366]"
    }, {
      "left" : "HtmlTreeBuilder tb",
      "right" : "HtmlTreeBuilder tb",
      "info" : "SingleVariableDeclaration[67288-67306]:SingleVariableDeclaration[67368-67386]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67308-67402]:Block[67388-67482]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[67322-67334]:ReturnStatement[67402-67414]"
    }, {
      "left" : "abstract",
      "right" : "abstract",
      "info" : "Modifier[67481-67489]:Modifier[67561-67569]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[67490-67497]:PrimitiveType[67570-67577]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[67498-67505]:SimpleName[67578-67585]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[67506-67513]:SingleVariableDeclaration[67586-67593]"
    }, {
      "left" : "HtmlTreeBuilder tb",
      "right" : "HtmlTreeBuilder tb",
      "info" : "SingleVariableDeclaration[67515-67533]:SingleVariableDeclaration[67595-67613]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[67541-67548]:Modifier[67621-67628]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[67549-67555]:Modifier[67629-67635]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[67556-67563]:PrimitiveType[67636-67643]"
    }, {
      "left" : "isWhitespace",
      "right" : "isWhitespace",
      "info" : "SimpleName[67564-67576]:SimpleName[67644-67656]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[67577-67584]:SingleVariableDeclaration[67657-67664]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67586-68004]:Block[67666-68084]"
    }, {
      "left" : "if (t.isCharacter())",
      "right" : "if (t.isCharacter())",
      "info" : "IfStatement[67596-67976]:IfStatement[67676-68056]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67617-67976]:Block[67697-68056]"
    }, {
      "left" : "String data = t.asCharacter().getData();",
      "right" : "String data = t.asCharacter().getData();",
      "info" : "VariableDeclarationStatement[67631-67671]:VariableDeclarationStatement[67711-67751]"
    }, {
      "left" : "for (int i = 0; i < data.length(); i++)",
      "right" : "for (int i = 0; i < data.length(); i++)",
      "info" : "ForStatement[67762-67941]:ForStatement[67842-68021]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67802-67941]:Block[67882-68021]"
    }, {
      "left" : "char c = data.charAt(i);",
      "right" : "char c = data.charAt(i);",
      "info" : "VariableDeclarationStatement[67820-67844]:VariableDeclarationStatement[67900-67924]"
    }, {
      "left" : "if (!StringUtil.isWhitespace(c))",
      "right" : "if (!StringUtil.isWhitespace(c))",
      "info" : "IfStatement[67861-67927]:IfStatement[67941-68007]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[67914-67927]:ReturnStatement[67994-68007]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[67954-67966]:ReturnStatement[68034-68046]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[67985-67998]:ReturnStatement[68065-68078]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[68010-68017]:Modifier[68090-68097]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[68018-68024]:Modifier[68098-68104]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[68025-68029]:PrimitiveType[68105-68109]"
    }, {
      "left" : "handleRcData",
      "right" : "handleRcData",
      "info" : "SimpleName[68030-68042]:SimpleName[68110-68122]"
    }, {
      "left" : "Token.StartTag startTag",
      "right" : "Token.StartTag startTag",
      "info" : "SingleVariableDeclaration[68043-68066]:SingleVariableDeclaration[68123-68146]"
    }, {
      "left" : "HtmlTreeBuilder tb",
      "right" : "HtmlTreeBuilder tb",
      "info" : "SingleVariableDeclaration[68068-68086]:SingleVariableDeclaration[68148-68166]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68088-68241]:Block[68168-68321]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[68098-68118]:ExpressionStatement[68178-68198]"
    }, {
      "left" : "tb.tokeniser.transition(TokeniserState.Rcdata);",
      "right" : "tb.tokeniser.transition(TokeniserState.Rcdata);",
      "info" : "ExpressionStatement[68127-68174]:ExpressionStatement[68207-68254]"
    }, {
      "left" : "tb.markInsertionMode();",
      "right" : "tb.markInsertionMode();",
      "info" : "ExpressionStatement[68183-68206]:ExpressionStatement[68263-68286]"
    }, {
      "left" : "tb.transition(Text);",
      "right" : "tb.transition(Text);",
      "info" : "ExpressionStatement[68215-68235]:ExpressionStatement[68295-68315]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[68247-68254]:Modifier[68327-68334]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[68255-68261]:Modifier[68335-68341]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[68262-68266]:PrimitiveType[68342-68346]"
    }, {
      "left" : "handleRawtext",
      "right" : "handleRawtext",
      "info" : "SimpleName[68267-68280]:SimpleName[68347-68360]"
    }, {
      "left" : "Token.StartTag startTag",
      "right" : "Token.StartTag startTag",
      "info" : "SingleVariableDeclaration[68281-68304]:SingleVariableDeclaration[68361-68384]"
    }, {
      "left" : "HtmlTreeBuilder tb",
      "right" : "HtmlTreeBuilder tb",
      "info" : "SingleVariableDeclaration[68306-68324]:SingleVariableDeclaration[68386-68404]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68326-68480]:Block[68406-68560]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[68336-68356]:ExpressionStatement[68416-68436]"
    }, {
      "left" : "tb.tokeniser.transition(TokeniserState.Rawtext);",
      "right" : "tb.tokeniser.transition(TokeniserState.Rawtext);",
      "info" : "ExpressionStatement[68365-68413]:ExpressionStatement[68445-68493]"
    }, {
      "left" : "tb.markInsertionMode();",
      "right" : "tb.markInsertionMode();",
      "info" : "ExpressionStatement[68422-68445]:ExpressionStatement[68502-68525]"
    }, {
      "left" : "tb.transition(Text);",
      "right" : "tb.transition(Text);",
      "info" : "ExpressionStatement[68454-68474]:ExpressionStatement[68534-68554]"
    } ]
  },
  "interFileMappings" : { }
}