{
  "matchedElements" : [
 {
    "left" : "class : MethodCompilerPass",
    "right" : "class : MethodCompilerPass",
    "info" : "TypeDeclaration[1071-9273]:TypeDeclaration[1071-8597]"
  }, {
    "left" : "externMethods",
    "right" : "externMethods",
    "info" : "FieldDeclaration[1278-1374]:FieldDeclaration[1278-1374]"
  }, {
    "left" : "externMethodsWithoutSignatures",
    "right" : "externMethodsWithoutSignatures",
    "info" : "FieldDeclaration[1378-1523]:FieldDeclaration[1378-1523]"
  }, {
    "left" : "nonMethodProperties",
    "right" : "nonMethodProperties",
    "info" : "FieldDeclaration[1527-1641]:FieldDeclaration[1527-1641]"
  }, {
    "left" : "methodDefinitions",
    "right" : "methodDefinitions",
    "info" : "FieldDeclaration[1645-1722]:FieldDeclaration[1645-1722]"
  }, {
    "left" : "compiler",
    "right" : "compiler",
    "info" : "FieldDeclaration[1726-1758]:FieldDeclaration[1726-1758]"
  }, {
    "left" : "interface : SignatureStore",
    "right" : "interface : SignatureStore",
    "info" : "TypeDeclaration[1762-2047]:TypeDeclaration[1762-2047]"
  }, {
    "left" : "public reset() : void",
    "right" : "public reset() : void",
    "info" : "MethodDeclaration[1871-1891]:MethodDeclaration[1871-1891]"
  }, {
    "left" : "public addSignature(functionName , functionNode , sourceFile ) : void",
    "right" : "public addSignature(functionName , functionNode , sourceFile ) : void",
    "info" : "MethodDeclaration[1896-1989]:MethodDeclaration[1896-1989]"
  }, {
    "left" : "public removeSignature(functionName ) : void",
    "right" : "public removeSignature(functionName ) : void",
    "info" : "MethodDeclaration[1994-2043]:MethodDeclaration[1994-2043]"
  }, {
    "left" : "package MethodCompilerPass(compiler )",
    "right" : "package MethodCompilerPass(compiler )",
    "info" : "MethodDeclaration[2051-2132]:MethodDeclaration[2051-2132]"
  }, {
    "left" : "public process(externs , root ) : void",
    "right" : "public process(externs , root ) : void",
    "info" : "MethodDeclaration[2136-2693]:MethodDeclaration[2136-2693]"
  }, {
    "left" : "public abstract getActingCallback() : ",
    "right" : "public abstract getActingCallback() : ",
    "info" : "MethodDeclaration[2697-2885]:MethodDeclaration[2697-2885]"
  }, {
    "left" : "public abstract getSignatureStore() : ",
    "right" : "public abstract getSignatureStore() : ",
    "info" : "MethodDeclaration[2889-3032]:MethodDeclaration[2889-3032]"
  }, {
    "left" : "private addPossibleSignature(name , node , t ) : void",
    "right" : "private addPossibleSignature(name , node , t ) : void",
    "info" : "MethodDeclaration[3036-4148]:MethodDeclaration[3036-3472]"
  }, {
    "left" : "private addSignature(name , function , fnSourceName ) : void",
    "right" : "private addSignature(name , function , fnSourceName ) : void",
    "info" : "MethodDeclaration[4152-4421]:MethodDeclaration[3476-3745]"
  }, {
    "left" : "class : GetExternMethods",
    "right" : "class : GetExternMethods",
    "info" : "TypeDeclaration[4425-6461]:TypeDeclaration[3749-5785]"
  }, {
    "left" : "public visit(t , n , parent ) : void",
    "right" : "public visit(t , n , parent ) : void",
    "info" : "MethodDeclaration[4724-6457]:MethodDeclaration[4048-5781]"
  }, {
    "left" : "class : GatherSignatures",
    "right" : "class : GatherSignatures",
    "info" : "TypeDeclaration[6465-9271]:TypeDeclaration[5789-8595]"
  }, {
    "left" : "public visit(t , n , parent ) : void",
    "right" : "public visit(t , n , parent ) : void",
    "info" : "MethodDeclaration[6604-8078]:MethodDeclaration[5928-7402]"
  }, {
    "left" : "private processPrototypeParent(t , n ) : void",
    "right" : "private processPrototypeParent(t , n ) : void",
    "info" : "MethodDeclaration[8084-9267]:MethodDeclaration[7408-8591]"
  } ],
  "mappings" : [
 {
    "left" : "abstract",
    "right" : "abstract",
    "info" : "Modifier[1216-1224]:Modifier[1216-1224]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[1225-1230]:TYPE_DECLARATION_KIND[1225-1230]"
  }, {
    "left" : "interface",
    "right" : "interface",
    "info" : "TYPE_DECLARATION_KIND[1840-1849]:TYPE_DECLARATION_KIND[1840-1849]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[1871-1877]:Modifier[1871-1877]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[1878-1882]:PrimitiveType[1878-1882]"
  }, {
    "left" : "reset",
    "right" : "reset",
    "info" : "SimpleName[1883-1888]:SimpleName[1883-1888]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[1896-1902]:Modifier[1896-1902]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[1903-1907]:PrimitiveType[1903-1907]"
  }, {
    "left" : "addSignature",
    "right" : "addSignature",
    "info" : "SimpleName[1908-1920]:SimpleName[1908-1920]"
  }, {
    "left" : "String functionName",
    "right" : "String functionName",
    "info" : "SingleVariableDeclaration[1930-1949]:SingleVariableDeclaration[1930-1949]"
  }, {
    "left" : "Node functionNode",
    "right" : "Node functionNode",
    "info" : "SingleVariableDeclaration[1951-1968]:SingleVariableDeclaration[1951-1968]"
  }, {
    "left" : "String sourceFile",
    "right" : "String sourceFile",
    "info" : "SingleVariableDeclaration[1970-1987]:SingleVariableDeclaration[1970-1987]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[1994-2000]:Modifier[1994-2000]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[2001-2005]:PrimitiveType[2001-2005]"
  }, {
    "left" : "removeSignature",
    "right" : "removeSignature",
    "info" : "SimpleName[2006-2021]:SimpleName[2006-2021]"
  }, {
    "left" : "String functionName",
    "right" : "String functionName",
    "info" : "SingleVariableDeclaration[2022-2041]:SingleVariableDeclaration[2022-2041]"
  }, {
    "left" : "MethodCompilerPass",
    "right" : "MethodCompilerPass",
    "info" : "SimpleName[2051-2069]:SimpleName[2051-2069]"
  }, {
    "left" : "AbstractCompiler compiler",
    "right" : "AbstractCompiler compiler",
    "info" : "SingleVariableDeclaration[2070-2095]:SingleVariableDeclaration[2070-2095]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2097-2132]:Block[2097-2132]"
  }, {
    "left" : "this.compiler = compiler;",
    "right" : "this.compiler = compiler;",
    "info" : "ExpressionStatement[2103-2128]:ExpressionStatement[2103-2128]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[2136-2142]:Modifier[2136-2142]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[2143-2147]:PrimitiveType[2143-2147]"
  }, {
    "left" : "process",
    "right" : "process",
    "info" : "SimpleName[2148-2155]:SimpleName[2148-2155]"
  }, {
    "left" : "Node externs",
    "right" : "Node externs",
    "info" : "SingleVariableDeclaration[2156-2168]:SingleVariableDeclaration[2156-2168]"
  }, {
    "left" : "Node root",
    "right" : "Node root",
    "info" : "SingleVariableDeclaration[2170-2179]:SingleVariableDeclaration[2170-2179]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2181-2693]:Block[2181-2693]"
  }, {
    "left" : "externMethods.clear();",
    "right" : "externMethods.clear();",
    "info" : "ExpressionStatement[2187-2209]:ExpressionStatement[2187-2209]"
  }, {
    "left" : "externMethodsWithoutSignatures.clear();",
    "right" : "externMethodsWithoutSignatures.clear();",
    "info" : "ExpressionStatement[2214-2253]:ExpressionStatement[2214-2253]"
  }, {
    "left" : "getSignatureStore().reset();",
    "right" : "getSignatureStore().reset();",
    "info" : "ExpressionStatement[2258-2286]:ExpressionStatement[2258-2286]"
  }, {
    "left" : "methodDefinitions.clear();",
    "right" : "methodDefinitions.clear();",
    "info" : "ExpressionStatement[2291-2317]:ExpressionStatement[2291-2317]"
  }, {
    "left" : "if (externs != null)",
    "right" : "if (externs != null)",
    "info" : "IfStatement[2323-2424]:IfStatement[2323-2424]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2344-2424]:Block[2344-2424]"
  }, {
    "left" : "NodeTraversal.traverse(compiler, externs, new GetExternMethods());",
    "right" : "NodeTraversal.traverse(compiler, externs, new GetExternMethods());",
    "info" : "ExpressionStatement[2352-2418]:ExpressionStatement[2352-2418]"
  }, {
    "left" : "List<Node> externsAndJs = Lists.newArrayList(externs, root);",
    "right" : "List<Node> externsAndJs = Lists.newArrayList(externs, root);",
    "info" : "VariableDeclarationStatement[2431-2491]:VariableDeclarationStatement[2431-2491]"
  }, {
    "left" : "NodeTraversal.traverseRoots(\n        compiler, Lists.newArrayList(externs, root), new GatherSignatures());",
    "right" : "NodeTraversal.traverseRoots(\n        compiler, Lists.newArrayList(externs, root), new GatherSignatures());",
    "info" : "ExpressionStatement[2496-2602]:ExpressionStatement[2496-2602]"
  }, {
    "left" : "NodeTraversal.traverseRoots(\n        compiler, externsAndJs, getActingCallback());",
    "right" : "NodeTraversal.traverseRoots(\n        compiler, externsAndJs, getActingCallback());",
    "info" : "ExpressionStatement[2607-2689]:ExpressionStatement[2607-2689]"
  }, {
    "left" : "abstract",
    "right" : "abstract",
    "info" : "Modifier[2847-2855]:Modifier[2847-2855]"
  }, {
    "left" : "Callback",
    "right" : "Callback",
    "info" : "SimpleType[2856-2864]:SimpleType[2856-2864]"
  }, {
    "left" : "getActingCallback",
    "right" : "getActingCallback",
    "info" : "SimpleName[2865-2882]:SimpleName[2865-2882]"
  }, {
    "left" : "abstract",
    "right" : "abstract",
    "info" : "Modifier[2988-2996]:Modifier[2988-2996]"
  }, {
    "left" : "SignatureStore",
    "right" : "SignatureStore",
    "info" : "SimpleType[2997-3011]:SimpleType[2997-3011]"
  }, {
    "left" : "getSignatureStore",
    "right" : "getSignatureStore",
    "info" : "SimpleName[3012-3029]:SimpleName[3012-3029]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[3165-3172]:Modifier[3165-3172]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[3173-3177]:PrimitiveType[3173-3177]"
  }, {
    "left" : "addPossibleSignature",
    "right" : "addPossibleSignature",
    "info" : "SimpleName[3178-3198]:SimpleName[3178-3198]"
  }, {
    "left" : "String name",
    "right" : "String name",
    "info" : "SingleVariableDeclaration[3199-3210]:SingleVariableDeclaration[3199-3210]"
  }, {
    "left" : "Node node",
    "right" : "Node node",
    "info" : "SingleVariableDeclaration[3212-3221]:SingleVariableDeclaration[3212-3221]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[3223-3238]:SingleVariableDeclaration[3223-3238]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3240-4148]:Block[3240-3472]"
  }, {
    "left" : "node.getType() == Token.FUNCTION",
    "right" : "node.getType() == Token.FUNCTION",
    "info" : "InfixExpression[3286-3318]:InfixExpression[3250-3282]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3320-3483]:Block[3284-3418]"
  }, {
    "left" : "addSignature(name, node, t.getSourceName());",
    "right" : "addSignature(name, node, t.getSourceName());",
    "info" : "ExpressionStatement[3404-3448]:ExpressionStatement[3368-3412]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4100-4144]:Block[3424-3468]"
  }, {
    "left" : "nonMethodProperties.add(name);",
    "right" : "nonMethodProperties.add(name);",
    "info" : "ExpressionStatement[4108-4138]:ExpressionStatement[3432-3462]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[4152-4159]:Modifier[3476-3483]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[4160-4164]:PrimitiveType[3484-3488]"
  }, {
    "left" : "addSignature",
    "right" : "addSignature",
    "info" : "SimpleName[4165-4177]:SimpleName[3489-3501]"
  }, {
    "left" : "String name",
    "right" : "String name",
    "info" : "SingleVariableDeclaration[4178-4189]:SingleVariableDeclaration[3502-3513]"
  }, {
    "left" : "Node function",
    "right" : "Node function",
    "info" : "SingleVariableDeclaration[4191-4204]:SingleVariableDeclaration[3515-3528]"
  }, {
    "left" : "String fnSourceName",
    "right" : "String fnSourceName",
    "info" : "SingleVariableDeclaration[4206-4225]:SingleVariableDeclaration[3530-3549]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4227-4421]:Block[3551-3745]"
  }, {
    "left" : "if (externMethodsWithoutSignatures.contains(name))",
    "right" : "if (externMethodsWithoutSignatures.contains(name))",
    "info" : "IfStatement[4233-4305]:IfStatement[3557-3629]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4284-4305]:Block[3608-3629]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[4292-4299]:ReturnStatement[3616-3623]"
  }, {
    "left" : "getSignatureStore().addSignature(name, function, fnSourceName);",
    "right" : "getSignatureStore().addSignature(name, function, fnSourceName);",
    "info" : "ExpressionStatement[4311-4374]:ExpressionStatement[3635-3698]"
  }, {
    "left" : "methodDefinitions.put(name, function);",
    "right" : "methodDefinitions.put(name, function);",
    "info" : "ExpressionStatement[4379-4417]:ExpressionStatement[3703-3741]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[4652-4659]:Modifier[3976-3983]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[4660-4665]:TYPE_DECLARATION_KIND[3984-3989]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[4724-4730]:Modifier[4048-4054]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[4731-4735]:PrimitiveType[4055-4059]"
  }, {
    "left" : "visit",
    "right" : "visit",
    "info" : "SimpleName[4736-4741]:SimpleName[4060-4065]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[4742-4757]:SingleVariableDeclaration[4066-4081]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[4759-4765]:SingleVariableDeclaration[4083-4089]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[4767-4778]:SingleVariableDeclaration[4091-4102]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4780-6457]:Block[4104-5781]"
  }, {
    "left" : "switch (n.getType()) {\n        case Token.GETPROP:\n        case Token.GETELEM: {\n          Node dest = n.getFirstChild().getNext();\n\n          if (dest.getType() != Token.STRING) {\n            return;\n          }\n\n          String name = dest.getString();\n\n          // We have a signature. Parse tree of the form:\n          // assign                       <- parent\n          //      getprop                 <- n\n          //          name methods\n          //          string setTimeout\n          //      function\n          if (parent.getType() == Token.ASSIGN &&\n              parent.getFirstChild() == n &&\n              n.getNext().getType() == Token.FUNCTION) {\n            addSignature(name, n.getNext(), t.getSourceName());\n          } else {\n            getSignatureStore().removeSignature(name);\n            externMethodsWithoutSignatures.add(name);\n          }\n\n          externMethods.add(name);\n        } break;\n\n        case Token.OBJECTLIT: {\n          // assumes the object literal is well formed\n          // (has an even number of children)\n          for (Node key = n.getFirstChild();\n               key != null; key = key.getNext().getNext()) {\n            if (key.getType() == Token.STRING) {\n              Node value = key.getNext();\n              String name = key.getString();\n              if (value.getType() == Token.FUNCTION) {\n                addSignature(name, value, t.getSourceName());\n              } else {\n                getSignatureStore().removeSignature(name);\n                externMethodsWithoutSignatures.add(name);\n              }\n              externMethods.add(name);\n            }\n          }\n        } break;\n      }",
    "right" : "switch (n.getType()) {\n        case Token.GETPROP:\n        case Token.GETELEM: {\n          Node dest = n.getFirstChild().getNext();\n\n          if (dest.getType() != Token.STRING) {\n            return;\n          }\n\n          String name = dest.getString();\n\n          // We have a signature. Parse tree of the form:\n          // assign                       <- parent\n          //      getprop                 <- n\n          //          name methods\n          //          string setTimeout\n          //      function\n          if (parent.getType() == Token.ASSIGN &&\n              parent.getFirstChild() == n &&\n              n.getNext().getType() == Token.FUNCTION) {\n            addSignature(name, n.getNext(), t.getSourceName());\n          } else {\n            getSignatureStore().removeSignature(name);\n            externMethodsWithoutSignatures.add(name);\n          }\n\n          externMethods.add(name);\n        } break;\n\n        case Token.OBJECTLIT: {\n          // assumes the object literal is well formed\n          // (has an even number of children)\n          for (Node key = n.getFirstChild();\n               key != null; key = key.getNext().getNext()) {\n            if (key.getType() == Token.STRING) {\n              Node value = key.getNext();\n              String name = key.getString();\n              if (value.getType() == Token.FUNCTION) {\n                addSignature(name, value, t.getSourceName());\n              } else {\n                getSignatureStore().removeSignature(name);\n                externMethodsWithoutSignatures.add(name);\n              }\n              externMethods.add(name);\n            }\n          }\n        } break;\n      }",
    "info" : "SwitchStatement[4788-6451]:SwitchStatement[4112-5775]"
  }, {
    "left" : "case Token.GETPROP:",
    "right" : "case Token.GETPROP:",
    "info" : "SwitchCase[4819-4838]:SwitchCase[4143-4162]"
  }, {
    "left" : "case Token.GETELEM:",
    "right" : "case Token.GETELEM:",
    "info" : "SwitchCase[4847-4866]:SwitchCase[4171-4190]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4867-5705]:Block[4191-5029]"
  }, {
    "left" : "Node dest = n.getFirstChild().getNext();",
    "right" : "Node dest = n.getFirstChild().getNext();",
    "info" : "VariableDeclarationStatement[4879-4919]:VariableDeclarationStatement[4203-4243]"
  }, {
    "left" : "if (dest.getType() != Token.STRING)",
    "right" : "if (dest.getType() != Token.STRING)",
    "info" : "IfStatement[4931-5000]:IfStatement[4255-4324]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4967-5000]:Block[4291-4324]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[4981-4988]:ReturnStatement[4305-4312]"
  }, {
    "left" : "String name = dest.getString();",
    "right" : "String name = dest.getString();",
    "info" : "VariableDeclarationStatement[5012-5043]:VariableDeclarationStatement[4336-4367]"
  }, {
    "left" : "if (parent.getType() == Token.ASSIGN &&\n              parent.getFirstChild() == n &&\n              n.getNext().getType() == Token.FUNCTION)",
    "right" : "if (parent.getType() == Token.ASSIGN &&\n              parent.getFirstChild() == n &&\n              n.getNext().getType() == Token.FUNCTION)",
    "info" : "IfStatement[5314-5659]:IfStatement[4638-4983]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5454-5531]:Block[4778-4855]"
  }, {
    "left" : "addSignature(name, n.getNext(), t.getSourceName());",
    "right" : "addSignature(name, n.getNext(), t.getSourceName());",
    "info" : "ExpressionStatement[5468-5519]:ExpressionStatement[4792-4843]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5537-5659]:Block[4861-4983]"
  }, {
    "left" : "getSignatureStore().removeSignature(name);",
    "right" : "getSignatureStore().removeSignature(name);",
    "info" : "ExpressionStatement[5551-5593]:ExpressionStatement[4875-4917]"
  }, {
    "left" : "externMethodsWithoutSignatures.add(name);",
    "right" : "externMethodsWithoutSignatures.add(name);",
    "info" : "ExpressionStatement[5606-5647]:ExpressionStatement[4930-4971]"
  }, {
    "left" : "externMethods.add(name);",
    "right" : "externMethods.add(name);",
    "info" : "ExpressionStatement[5671-5695]:ExpressionStatement[4995-5019]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[5706-5712]:BreakStatement[5030-5036]"
  }, {
    "left" : "case Token.OBJECTLIT:",
    "right" : "case Token.OBJECTLIT:",
    "info" : "SwitchCase[5722-5743]:SwitchCase[5046-5067]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5744-6436]:Block[5068-5760]"
  }, {
    "left" : "for (Node key = n.getFirstChild();\n               key != null; key = key.getNext().getNext())",
    "right" : "for (Node key = n.getFirstChild();\n               key != null; key = key.getNext().getNext())",
    "info" : "ForStatement[5857-6426]:ForStatement[5181-5750]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5951-6426]:Block[5275-5750]"
  }, {
    "left" : "if (key.getType() == Token.STRING)",
    "right" : "if (key.getType() == Token.STRING)",
    "info" : "IfStatement[5965-6414]:IfStatement[5289-5738]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6000-6414]:Block[5324-5738]"
  }, {
    "left" : "Node value = key.getNext();",
    "right" : "Node value = key.getNext();",
    "info" : "VariableDeclarationStatement[6016-6043]:VariableDeclarationStatement[5340-5367]"
  }, {
    "left" : "String name = key.getString();",
    "right" : "String name = key.getString();",
    "info" : "VariableDeclarationStatement[6058-6088]:VariableDeclarationStatement[5382-5412]"
  }, {
    "left" : "if (value.getType() == Token.FUNCTION)",
    "right" : "if (value.getType() == Token.FUNCTION)",
    "info" : "IfStatement[6103-6361]:IfStatement[5427-5685]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6142-6221]:Block[5466-5545]"
  }, {
    "left" : "addSignature(name, value, t.getSourceName());",
    "right" : "addSignature(name, value, t.getSourceName());",
    "info" : "ExpressionStatement[6160-6205]:ExpressionStatement[5484-5529]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6227-6361]:Block[5551-5685]"
  }, {
    "left" : "getSignatureStore().removeSignature(name);",
    "right" : "getSignatureStore().removeSignature(name);",
    "info" : "ExpressionStatement[6245-6287]:ExpressionStatement[5569-5611]"
  }, {
    "left" : "externMethodsWithoutSignatures.add(name);",
    "right" : "externMethodsWithoutSignatures.add(name);",
    "info" : "ExpressionStatement[6304-6345]:ExpressionStatement[5628-5669]"
  }, {
    "left" : "externMethods.add(name);",
    "right" : "externMethods.add(name);",
    "info" : "ExpressionStatement[6376-6400]:ExpressionStatement[5700-5724]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[6437-6443]:BreakStatement[5761-5767]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[6532-6539]:Modifier[5856-5863]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[6540-6545]:TYPE_DECLARATION_KIND[5864-5869]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[6604-6610]:Modifier[5928-5934]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[6611-6615]:PrimitiveType[5935-5939]"
  }, {
    "left" : "visit",
    "right" : "visit",
    "info" : "SimpleName[6616-6621]:SimpleName[5940-5945]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[6622-6637]:SingleVariableDeclaration[5946-5961]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[6639-6645]:SingleVariableDeclaration[5963-5969]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[6647-6658]:SingleVariableDeclaration[5971-5982]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6660-8078]:Block[5984-7402]"
  }, {
    "left" : "switch (n.getType()) {\n        case Token.GETPROP:\n        case Token.GETELEM:\n          Node dest = n.getFirstChild().getNext();\n\n          if (dest.getType() == Token.STRING) {\n            if (dest.getString().equals(\"prototype\")) {\n              processPrototypeParent(t, parent);\n            } else {\n              // Static methods of the form Foo.bar = function() {} or\n              // Static methods of the form Foo.bar = baz (where baz is a\n              // function name). Parse tree looks like:\n              // assign                 <- parent\n              //      getprop           <- n\n              //          name Foo\n              //          string bar\n              //      function or name  <- n.getNext()\n              if (parent.getType() == Token.ASSIGN &&\n                  parent.getFirstChild() == n) {\n                addPossibleSignature(dest.getString(), n.getNext(), t);\n              }\n            }\n          }\n          break;\n\n        case Token.OBJECTLIT:\n          // assumes the object literal is well formed\n          // (has an even number of children)\n          for (Node key = n.getFirstChild();\n               key != null; key = key.getNext().getNext()) {\n            if (key.getType() == Token.STRING) {\n              Node value = key.getNext();\n              addPossibleSignature(key.getString(), value, t);\n            }\n          }\n          break;\n      }",
    "right" : "switch (n.getType()) {\n        case Token.GETPROP:\n        case Token.GETELEM:\n          Node dest = n.getFirstChild().getNext();\n\n          if (dest.getType() == Token.STRING) {\n            if (dest.getString().equals(\"prototype\")) {\n              processPrototypeParent(t, parent);\n            } else {\n              // Static methods of the form Foo.bar = function() {} or\n              // Static methods of the form Foo.bar = baz (where baz is a\n              // function name). Parse tree looks like:\n              // assign                 <- parent\n              //      getprop           <- n\n              //          name Foo\n              //          string bar\n              //      function or name  <- n.getNext()\n              if (parent.getType() == Token.ASSIGN &&\n                  parent.getFirstChild() == n) {\n                addPossibleSignature(dest.getString(), n.getNext(), t);\n              }\n            }\n          }\n          break;\n\n        case Token.OBJECTLIT:\n          // assumes the object literal is well formed\n          // (has an even number of children)\n          for (Node key = n.getFirstChild();\n               key != null; key = key.getNext().getNext()) {\n            if (key.getType() == Token.STRING) {\n              Node value = key.getNext();\n              addPossibleSignature(key.getString(), value, t);\n            }\n          }\n          break;\n      }",
    "info" : "SwitchStatement[6668-8072]:SwitchStatement[5992-7396]"
  }, {
    "left" : "case Token.GETPROP:",
    "right" : "case Token.GETPROP:",
    "info" : "SwitchCase[6699-6718]:SwitchCase[6023-6042]"
  }, {
    "left" : "case Token.GETELEM:",
    "right" : "case Token.GETELEM:",
    "info" : "SwitchCase[6727-6746]:SwitchCase[6051-6070]"
  }, {
    "left" : "Node dest = n.getFirstChild().getNext();",
    "right" : "Node dest = n.getFirstChild().getNext();",
    "info" : "VariableDeclarationStatement[6757-6797]:VariableDeclarationStatement[6081-6121]"
  }, {
    "left" : "if (dest.getType() == Token.STRING)",
    "right" : "if (dest.getType() == Token.STRING)",
    "info" : "IfStatement[6809-7612]:IfStatement[6133-6936]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6845-7612]:Block[6169-6936]"
  }, {
    "left" : "if (dest.getString().equals(\"prototype\"))",
    "right" : "if (dest.getString().equals(\"prototype\"))",
    "info" : "IfStatement[6859-7600]:IfStatement[6183-6924]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6901-6965]:Block[6225-6289]"
  }, {
    "left" : "processPrototypeParent(t, parent);",
    "right" : "processPrototypeParent(t, parent);",
    "info" : "ExpressionStatement[6917-6951]:ExpressionStatement[6241-6275]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6971-7600]:Block[6295-6924]"
  }, {
    "left" : "if (parent.getType() == Token.ASSIGN &&\n                  parent.getFirstChild() == n)",
    "right" : "if (parent.getType() == Token.ASSIGN &&\n                  parent.getFirstChild() == n)",
    "info" : "IfStatement[7410-7586]:IfStatement[6734-6910]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7497-7586]:Block[6821-6910]"
  }, {
    "left" : "addPossibleSignature(dest.getString(), n.getNext(), t);",
    "right" : "addPossibleSignature(dest.getString(), n.getNext(), t);",
    "info" : "ExpressionStatement[7515-7570]:ExpressionStatement[6839-6894]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[7623-7629]:BreakStatement[6947-6953]"
  }, {
    "left" : "case Token.OBJECTLIT:",
    "right" : "case Token.OBJECTLIT:",
    "info" : "SwitchCase[7639-7660]:SwitchCase[6963-6984]"
  }, {
    "left" : "for (Node key = n.getFirstChild();\n               key != null; key = key.getNext().getNext())",
    "right" : "for (Node key = n.getFirstChild();\n               key != null; key = key.getNext().getNext())",
    "info" : "ForStatement[7772-8047]:ForStatement[7096-7371]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7866-8047]:Block[7190-7371]"
  }, {
    "left" : "if (key.getType() == Token.STRING)",
    "right" : "if (key.getType() == Token.STRING)",
    "info" : "IfStatement[7880-8035]:IfStatement[7204-7359]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7915-8035]:Block[7239-7359]"
  }, {
    "left" : "Node value = key.getNext();",
    "right" : "Node value = key.getNext();",
    "info" : "VariableDeclarationStatement[7931-7958]:VariableDeclarationStatement[7255-7282]"
  }, {
    "left" : "addPossibleSignature(key.getString(), value, t);",
    "right" : "addPossibleSignature(key.getString(), value, t);",
    "info" : "ExpressionStatement[7973-8021]:ExpressionStatement[7297-7345]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[8058-8064]:BreakStatement[7382-7388]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[8300-8307]:Modifier[7624-7631]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[8308-8312]:PrimitiveType[7632-7636]"
  }, {
    "left" : "processPrototypeParent",
    "right" : "processPrototypeParent",
    "info" : "SimpleName[8313-8335]:SimpleName[7637-7659]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[8336-8351]:SingleVariableDeclaration[7660-7675]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[8353-8359]:SingleVariableDeclaration[7677-7683]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8361-9267]:Block[7685-8591]"
  }, {
    "left" : "switch (n.getType()) {\n        // Foo.prototype.getBar = function() { ... } or\n        // Foo.prototype.getBar = getBaz (where getBaz is a function)\n        // parse tree looks like:\n        // assign                          <- parent\n        //     getprop                     <- n\n        //         getprop\n        //             name Foo\n        //             string prototype\n        //         string getBar\n        //     function or name            <- assignee\n        case Token.GETPROP:\n        case Token.GETELEM:\n          Node dest = n.getFirstChild().getNext();\n          Node parent = n.getParent().getParent();\n\n          if (dest.getType() == Token.STRING &&\n              parent.getType() == Token.ASSIGN) {\n            Node assignee = parent.getFirstChild().getNext();\n\n            addPossibleSignature(dest.getString(), assignee, t);\n          }\n          break;\n      }",
    "right" : "switch (n.getType()) {\n        // Foo.prototype.getBar = function() { ... } or\n        // Foo.prototype.getBar = getBaz (where getBaz is a function)\n        // parse tree looks like:\n        // assign                          <- parent\n        //     getprop                     <- n\n        //         getprop\n        //             name Foo\n        //             string prototype\n        //         string getBar\n        //     function or name            <- assignee\n        case Token.GETPROP:\n        case Token.GETELEM:\n          Node dest = n.getFirstChild().getNext();\n          Node parent = n.getParent().getParent();\n\n          if (dest.getType() == Token.STRING &&\n              parent.getType() == Token.ASSIGN) {\n            Node assignee = parent.getFirstChild().getNext();\n\n            addPossibleSignature(dest.getString(), assignee, t);\n          }\n          break;\n      }",
    "info" : "SwitchStatement[8369-9261]:SwitchStatement[7693-8585]"
  }, {
    "left" : "case Token.GETPROP:",
    "right" : "case Token.GETPROP:",
    "info" : "SwitchCase[8848-8867]:SwitchCase[8172-8191]"
  }, {
    "left" : "case Token.GETELEM:",
    "right" : "case Token.GETELEM:",
    "info" : "SwitchCase[8876-8895]:SwitchCase[8200-8219]"
  }, {
    "left" : "Node dest = n.getFirstChild().getNext();",
    "right" : "Node dest = n.getFirstChild().getNext();",
    "info" : "VariableDeclarationStatement[8906-8946]:VariableDeclarationStatement[8230-8270]"
  }, {
    "left" : "Node parent = n.getParent().getParent();",
    "right" : "Node parent = n.getParent().getParent();",
    "info" : "VariableDeclarationStatement[8957-8997]:VariableDeclarationStatement[8281-8321]"
  }, {
    "left" : "if (dest.getType() == Token.STRING &&\n              parent.getType() == Token.ASSIGN)",
    "right" : "if (dest.getType() == Token.STRING &&\n              parent.getType() == Token.ASSIGN)",
    "info" : "IfStatement[9009-9236]:IfStatement[8333-8560]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9095-9236]:Block[8419-8560]"
  }, {
    "left" : "Node assignee = parent.getFirstChild().getNext();",
    "right" : "Node assignee = parent.getFirstChild().getNext();",
    "info" : "VariableDeclarationStatement[9109-9158]:VariableDeclarationStatement[8433-8482]"
  }, {
    "left" : "addPossibleSignature(dest.getString(), assignee, t);",
    "right" : "addPossibleSignature(dest.getString(), assignee, t);",
    "info" : "ExpressionStatement[9172-9224]:ExpressionStatement[8496-8548]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[9247-9253]:BreakStatement[8571-8577]"
  } ]
}