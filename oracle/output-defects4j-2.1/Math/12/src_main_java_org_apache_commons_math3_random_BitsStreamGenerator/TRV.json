{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "private double nextGaussian;",
      "right" : "private double nextGaussian;",
      "info" : "FieldDeclaration[1199-1253]:FieldDeclaration[1317-1371]"
    }, {
      "left" : "public BitsStreamGenerator()",
      "right" : "public BitsStreamGenerator()",
      "info" : "MethodDeclaration[1259-1392]:MethodDeclaration[1377-1510]"
    }, {
      "left" : "public abstract void setSeed(int seed);",
      "right" : "public abstract void setSeed(int seed);",
      "info" : "MethodDeclaration[1398-1462]:MethodDeclaration[1516-1580]"
    }, {
      "left" : "public abstract void setSeed(int[] seed);",
      "right" : "public abstract void setSeed(int[] seed);",
      "info" : "MethodDeclaration[1468-1534]:MethodDeclaration[1586-1652]"
    }, {
      "left" : "public abstract void setSeed(long seed);",
      "right" : "public abstract void setSeed(long seed);",
      "info" : "MethodDeclaration[1540-1605]:MethodDeclaration[1658-1723]"
    }, {
      "left" : "protected abstract int next(int bits);",
      "right" : "protected abstract int next(int bits);",
      "info" : "MethodDeclaration[1611-2143]:MethodDeclaration[1729-2261]"
    }, {
      "left" : "public boolean nextBoolean()",
      "right" : "public boolean nextBoolean()",
      "info" : "MethodDeclaration[2149-2239]:MethodDeclaration[2267-2357]"
    }, {
      "left" : "public void nextBytes(byte[] bytes)",
      "right" : "public void nextBytes(byte[] bytes)",
      "info" : "MethodDeclaration[2245-2864]:MethodDeclaration[2363-2982]"
    }, {
      "left" : "public double nextDouble()",
      "right" : "public double nextDouble()",
      "info" : "MethodDeclaration[2870-3058]:MethodDeclaration[2988-3176]"
    }, {
      "left" : "public float nextFloat()",
      "right" : "public float nextFloat()",
      "info" : "MethodDeclaration[3064-3159]:MethodDeclaration[3182-3277]"
    }, {
      "left" : "public double nextGaussian()",
      "right" : "public double nextGaussian()",
      "info" : "MethodDeclaration[3165-3862]:MethodDeclaration[3283-3980]"
    }, {
      "left" : "public int nextInt()",
      "right" : "public int nextInt()",
      "info" : "MethodDeclaration[3868-3946]:MethodDeclaration[3986-4064]"
    }, {
      "left" : "public int nextInt(int n) throws IllegalArgumentException",
      "right" : "public int nextInt(int n) throws IllegalArgumentException",
      "info" : "MethodDeclaration[3952-5061]:MethodDeclaration[4070-5179]"
    }, {
      "left" : "public long nextLong()",
      "right" : "public long nextLong()",
      "info" : "MethodDeclaration[5067-5261]:MethodDeclaration[5185-5379]"
    }, {
      "left" : "public void clear()",
      "right" : "public void clear()",
      "info" : "MethodDeclaration[5267-5437]:MethodDeclaration[5385-5555]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1350-1392]:Block[1468-1510]"
    }, {
      "left" : "nextGaussian = Double.NaN;",
      "right" : "nextGaussian = Double.NaN;",
      "info" : "ExpressionStatement[1360-1386]:ExpressionStatement[1478-1504]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2203-2239]:Block[2321-2357]"
    }, {
      "left" : "return next(1) != 0;",
      "right" : "return next(1) != 0;",
      "info" : "ReturnStatement[2213-2233]:ReturnStatement[2331-2351]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2306-2864]:Block[2424-2982]"
    }, {
      "left" : "int i = 0;",
      "right" : "int i = 0;",
      "info" : "VariableDeclarationStatement[2316-2326]:VariableDeclarationStatement[2434-2444]"
    }, {
      "left" : "final int iEnd = bytes.length - 3;",
      "right" : "final int iEnd = bytes.length - 3;",
      "info" : "VariableDeclarationStatement[2335-2369]:VariableDeclarationStatement[2453-2487]"
    }, {
      "left" : "while (i < iEnd)",
      "right" : "while (i < iEnd)",
      "info" : "WhileStatement[2378-2695]:WhileStatement[2496-2813]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2395-2695]:Block[2513-2813]"
    }, {
      "left" : "final int random = next(32);",
      "right" : "final int random = next(32);",
      "info" : "VariableDeclarationStatement[2409-2437]:VariableDeclarationStatement[2527-2555]"
    }, {
      "left" : "bytes[i]     = (byte) (random & 0xff);",
      "right" : "bytes[i]     = (byte) (random & 0xff);",
      "info" : "ExpressionStatement[2450-2488]:ExpressionStatement[2568-2606]"
    }, {
      "left" : "bytes[i + 1] = (byte) ((random >>  8) & 0xff);",
      "right" : "bytes[i + 1] = (byte) ((random >>  8) & 0xff);",
      "info" : "ExpressionStatement[2501-2547]:ExpressionStatement[2619-2665]"
    }, {
      "left" : "bytes[i + 2] = (byte) ((random >> 16) & 0xff);",
      "right" : "bytes[i + 2] = (byte) ((random >> 16) & 0xff);",
      "info" : "ExpressionStatement[2560-2606]:ExpressionStatement[2678-2724]"
    }, {
      "left" : "bytes[i + 3] = (byte) ((random >> 24) & 0xff);",
      "right" : "bytes[i + 3] = (byte) ((random >> 24) & 0xff);",
      "info" : "ExpressionStatement[2619-2665]:ExpressionStatement[2737-2783]"
    }, {
      "left" : "i += 4;",
      "right" : "i += 4;",
      "info" : "ExpressionStatement[2678-2685]:ExpressionStatement[2796-2803]"
    }, {
      "left" : "int random = next(32);",
      "right" : "int random = next(32);",
      "info" : "VariableDeclarationStatement[2704-2726]:VariableDeclarationStatement[2822-2844]"
    }, {
      "left" : "while (i < bytes.length)",
      "right" : "while (i < bytes.length)",
      "info" : "WhileStatement[2735-2858]:WhileStatement[2853-2976]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2760-2858]:Block[2878-2976]"
    }, {
      "left" : "bytes[i++] = (byte) (random & 0xff);",
      "right" : "bytes[i++] = (byte) (random & 0xff);",
      "info" : "ExpressionStatement[2774-2810]:ExpressionStatement[2892-2928]"
    }, {
      "left" : "random     = random >> 8;",
      "right" : "random     = random >> 8;",
      "info" : "ExpressionStatement[2823-2848]:ExpressionStatement[2941-2966]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2922-3058]:Block[3040-3176]"
    }, {
      "left" : "final long high = ((long) next(26)) << 26;",
      "right" : "final long high = ((long) next(26)) << 26;",
      "info" : "VariableDeclarationStatement[2932-2974]:VariableDeclarationStatement[3050-3092]"
    }, {
      "left" : "final int  low  = next(26);",
      "right" : "final int  low  = next(26);",
      "info" : "VariableDeclarationStatement[2983-3010]:VariableDeclarationStatement[3101-3128]"
    }, {
      "left" : "return (high | low) * 0x1.0p-52d;",
      "right" : "return (high | low) * 0x1.0p-52d;",
      "info" : "ReturnStatement[3019-3052]:ReturnStatement[3137-3170]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3114-3159]:Block[3232-3277]"
    }, {
      "left" : "return next(23) * 0x1.0p-23f;",
      "right" : "return next(23) * 0x1.0p-23f;",
      "info" : "ReturnStatement[3124-3153]:ReturnStatement[3242-3271]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3219-3862]:Block[3337-3980]"
    }, {
      "left" : "final double random;",
      "right" : "final double random;",
      "info" : "VariableDeclarationStatement[3230-3250]:VariableDeclarationStatement[3348-3368]"
    }, {
      "left" : "if (Double.isNaN(nextGaussian))",
      "right" : "if (Double.isNaN(nextGaussian))",
      "info" : "IfStatement[3259-3831]:IfStatement[3377-3949]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3291-3672]:Block[3409-3790]"
    }, {
      "left" : "final double x = nextDouble();",
      "right" : "final double x = nextDouble();",
      "info" : "VariableDeclarationStatement[3360-3390]:VariableDeclarationStatement[3478-3508]"
    }, {
      "left" : "final double y = nextDouble();",
      "right" : "final double y = nextDouble();",
      "info" : "VariableDeclarationStatement[3403-3433]:VariableDeclarationStatement[3521-3551]"
    }, {
      "left" : "final double alpha = 2 * FastMath.PI * x;",
      "right" : "final double alpha = 2 * FastMath.PI * x;",
      "info" : "VariableDeclarationStatement[3446-3487]:VariableDeclarationStatement[3564-3605]"
    }, {
      "left" : "final double r      = FastMath.sqrt(-2 * FastMath.log(y));",
      "right" : "final double r      = FastMath.sqrt(-2 * FastMath.log(y));",
      "info" : "VariableDeclarationStatement[3500-3558]:VariableDeclarationStatement[3618-3676]"
    }, {
      "left" : "random       = r * FastMath.cos(alpha);",
      "right" : "random       = r * FastMath.cos(alpha);",
      "info" : "ExpressionStatement[3571-3610]:ExpressionStatement[3689-3728]"
    }, {
      "left" : "nextGaussian = r * FastMath.sin(alpha);",
      "right" : "nextGaussian = r * FastMath.sin(alpha);",
      "info" : "ExpressionStatement[3623-3662]:ExpressionStatement[3741-3780]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3678-3831]:Block[3796-3949]"
    }, {
      "left" : "random = nextGaussian;",
      "right" : "random = nextGaussian;",
      "info" : "ExpressionStatement[3760-3782]:ExpressionStatement[3878-3900]"
    }, {
      "left" : "nextGaussian = Double.NaN;",
      "right" : "nextGaussian = Double.NaN;",
      "info" : "ExpressionStatement[3795-3821]:ExpressionStatement[3913-3939]"
    }, {
      "left" : "return random;",
      "right" : "return random;",
      "info" : "ReturnStatement[3841-3855]:ReturnStatement[3959-3973]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3914-3946]:Block[4032-4064]"
    }, {
      "left" : "return next(32);",
      "right" : "return next(32);",
      "info" : "ReturnStatement[3924-3940]:ReturnStatement[4042-4058]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4668-5061]:Block[4786-5179]"
    }, {
      "left" : "if (n > 0)",
      "right" : "if (n > 0)",
      "info" : "IfStatement[4678-5004]:IfStatement[4796-5122]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4689-5004]:Block[4807-5122]"
    }, {
      "left" : "if ((n & -n) == n)",
      "right" : "if ((n & -n) == n)",
      "info" : "IfStatement[4703-4797]:IfStatement[4821-4915]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4722-4797]:Block[4840-4915]"
    }, {
      "left" : "return (int) ((n * (long) next(31)) >> 31);",
      "right" : "return (int) ((n * (long) next(31)) >> 31);",
      "info" : "ReturnStatement[4740-4783]:ReturnStatement[4858-4901]"
    }, {
      "left" : "int bits;",
      "right" : "int bits;",
      "info" : "VariableDeclarationStatement[4810-4819]:VariableDeclarationStatement[4928-4937]"
    }, {
      "left" : "int val;",
      "right" : "int val;",
      "info" : "VariableDeclarationStatement[4832-4840]:VariableDeclarationStatement[4950-4958]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[4853-4970]:DoStatement[4971-5088]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4856-4936]:Block[4974-5054]"
    }, {
      "left" : "bits = next(31);",
      "right" : "bits = next(31);",
      "info" : "ExpressionStatement[4874-4890]:ExpressionStatement[4992-5008]"
    }, {
      "left" : "val = bits % n;",
      "right" : "val = bits % n;",
      "info" : "ExpressionStatement[4907-4922]:ExpressionStatement[5025-5040]"
    }, {
      "left" : "return val;",
      "right" : "return val;",
      "info" : "ReturnStatement[4983-4994]:ReturnStatement[5101-5112]"
    }, {
      "left" : "throw new NotStrictlyPositiveException(n);",
      "right" : "throw new NotStrictlyPositiveException(n);",
      "info" : "ThrowStatement[5013-5055]:ThrowStatement[5131-5173]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5115-5261]:Block[5233-5379]"
    }, {
      "left" : "final long high  = ((long) next(32)) << 32;",
      "right" : "final long high  = ((long) next(32)) << 32;",
      "info" : "VariableDeclarationStatement[5125-5168]:VariableDeclarationStatement[5243-5286]"
    }, {
      "left" : "final long  low  = ((long) next(32)) & 0xffffffffL;",
      "right" : "final long  low  = ((long) next(32)) & 0xffffffffL;",
      "info" : "VariableDeclarationStatement[5177-5228]:VariableDeclarationStatement[5295-5346]"
    }, {
      "left" : "return high | low;",
      "right" : "return high | low;",
      "info" : "ReturnStatement[5237-5255]:ReturnStatement[5355-5373]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5395-5437]:Block[5513-5555]"
    }, {
      "left" : "nextGaussian = Double.NaN;",
      "right" : "nextGaussian = Double.NaN;",
      "info" : "ExpressionStatement[5405-5431]:ExpressionStatement[5523-5549]"
    } ]
  },
  "interFileMappings" : { }
}