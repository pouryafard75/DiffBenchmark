{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "PosixParser",
      "right" : "PosixParser",
      "info" : "TypeDeclaration[941-10244]:TypeDeclaration[941-10210]"
    }, {
      "left" : "private List tokens = new ArrayList();",
      "right" : "private List tokens = new ArrayList();",
      "info" : "FieldDeclaration[1216-1293]:FieldDeclaration[1216-1293]"
    }, {
      "left" : "private boolean eatTheRest;",
      "right" : "private boolean eatTheRest;",
      "info" : "FieldDeclaration[1299-1375]:FieldDeclaration[1299-1375]"
    }, {
      "left" : "private Option currentOption;",
      "right" : "private Option currentOption;",
      "info" : "FieldDeclaration[1381-1451]:FieldDeclaration[1381-1451]"
    }, {
      "left" : "private Options options;",
      "right" : "private Options options;",
      "info" : "FieldDeclaration[1457-1517]:FieldDeclaration[1457-1517]"
    }, {
      "left" : "private void init()",
      "right" : "private void init()",
      "info" : "MethodDeclaration[1523-1845]:MethodDeclaration[1523-1845]"
    }, {
      "left" : "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",
      "right" : "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",
      "info" : "MethodDeclaration[1851-5771]:MethodDeclaration[1851-5771]"
    }, {
      "left" : "private void gobble(Iterator iter)",
      "right" : "private void gobble(Iterator iter)",
      "info" : "MethodDeclaration[5777-6114]:MethodDeclaration[5777-6114]"
    }, {
      "left" : "private void process(String value)",
      "right" : "private void process(String value)",
      "info" : "MethodDeclaration[6120-7257]:MethodDeclaration[6120-7257]"
    }, {
      "left" : "private void processOptionToken(String token, boolean stopAtNonOption)",
      "right" : "private void processOptionToken(String token, boolean stopAtNonOption)",
      "info" : "MethodDeclaration[7263-8133]:MethodDeclaration[7263-8099]"
    }, {
      "left" : "protected void burstToken(String token, boolean stopAtNonOption)",
      "right" : "protected void burstToken(String token, boolean stopAtNonOption)",
      "info" : "MethodDeclaration[8139-10242]:MethodDeclaration[8105-10208]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1756-1845]:Block[1756-1845]"
    }, {
      "left" : "eatTheRest = false;",
      "right" : "eatTheRest = false;",
      "info" : "ExpressionStatement[1766-1785]:ExpressionStatement[1766-1785]"
    }, {
      "left" : "tokens.clear();",
      "right" : "tokens.clear();",
      "info" : "ExpressionStatement[1794-1809]:ExpressionStatement[1794-1809]"
    }, {
      "left" : "currentOption = null;",
      "right" : "currentOption = null;",
      "info" : "ExpressionStatement[1818-1839]:ExpressionStatement[1818-1839]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4071-5771]:Block[4071-5771]"
    }, {
      "left" : "init();",
      "right" : "init();",
      "info" : "ExpressionStatement[4081-4088]:ExpressionStatement[4081-4088]"
    }, {
      "left" : "this.options = options;",
      "right" : "this.options = options;",
      "info" : "ExpressionStatement[4097-4120]:ExpressionStatement[4097-4120]"
    }, {
      "left" : "Iterator iter = Arrays.asList(arguments).iterator();",
      "right" : "Iterator iter = Arrays.asList(arguments).iterator();",
      "info" : "VariableDeclarationStatement[4181-4233]:VariableDeclarationStatement[4181-4233]"
    }, {
      "left" : "while (iter.hasNext())",
      "right" : "while (iter.hasNext())",
      "info" : "WhileStatement[4286-5695]:WhileStatement[4286-5695]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4317-5695]:Block[4317-5695]"
    }, {
      "left" : "String token = (String) iter.next();",
      "right" : "String token = (String) iter.next();",
      "info" : "VariableDeclarationStatement[4378-4414]:VariableDeclarationStatement[4378-4414]"
    }, {
      "left" : "if (token.startsWith(\"--\"))",
      "right" : "if (token.startsWith(\"--\"))",
      "info" : "IfStatement[4464-5658]:IfStatement[4464-5658]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4504-4858]:Block[4504-4858]"
    }, {
      "left" : "if (token.indexOf('=') != -1)",
      "right" : "if (token.indexOf('=') != -1)",
      "info" : "IfStatement[4522-4844]:IfStatement[4522-4844]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4568-4748]:Block[4568-4748]"
    }, {
      "left" : "tokens.add(token.substring(0, token.indexOf('=')));",
      "right" : "tokens.add(token.substring(0, token.indexOf('=')));",
      "info" : "ExpressionStatement[4590-4641]:ExpressionStatement[4590-4641]"
    }, {
      "left" : "tokens.add(token.substring(token.indexOf('=') + 1, token.length()));",
      "right" : "tokens.add(token.substring(token.indexOf('=') + 1, token.length()));",
      "info" : "ExpressionStatement[4662-4730]:ExpressionStatement[4662-4730]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4786-4844]:Block[4786-4844]"
    }, {
      "left" : "tokens.add(token);",
      "right" : "tokens.add(token);",
      "info" : "ExpressionStatement[4808-4826]:ExpressionStatement[4808-4826]"
    }, {
      "left" : "if (\"-\".equals(token))",
      "right" : "if (\"-\".equals(token))",
      "info" : "IfStatement[4906-5658]:IfStatement[4906-5658]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4941-4991]:Block[4941-4991]"
    }, {
      "left" : "tokens.add(token);",
      "right" : "tokens.add(token);",
      "info" : "ExpressionStatement[4959-4977]:ExpressionStatement[4959-4977]"
    }, {
      "left" : "if (token.startsWith(\"-\"))",
      "right" : "if (token.startsWith(\"-\"))",
      "info" : "IfStatement[5009-5658]:IfStatement[5009-5658]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5048-5480]:Block[5048-5480]"
    }, {
      "left" : "if (token.length() == 2)",
      "right" : "if (token.length() == 2)",
      "info" : "IfStatement[5066-5466]:IfStatement[5066-5466]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5107-5190]:Block[5107-5190]"
    }, {
      "left" : "processOptionToken(token, stopAtNonOption);",
      "right" : "processOptionToken(token, stopAtNonOption);",
      "info" : "ExpressionStatement[5129-5172]:ExpressionStatement[5129-5172]"
    }, {
      "left" : "if (options.hasOption(token))",
      "right" : "if (options.hasOption(token))",
      "info" : "IfStatement[5212-5466]:IfStatement[5212-5466]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5258-5316]:Block[5258-5316]"
    }, {
      "left" : "tokens.add(token);",
      "right" : "tokens.add(token);",
      "info" : "ExpressionStatement[5280-5298]:ExpressionStatement[5280-5298]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5391-5466]:Block[5391-5466]"
    }, {
      "left" : "burstToken(token, stopAtNonOption);",
      "right" : "burstToken(token, stopAtNonOption);",
      "info" : "ExpressionStatement[5413-5448]:ExpressionStatement[5413-5448]"
    }, {
      "left" : "if (stopAtNonOption)",
      "right" : "if (stopAtNonOption)",
      "info" : "IfStatement[5498-5658]:IfStatement[5498-5658]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5531-5578]:Block[5531-5578]"
    }, {
      "left" : "process(token);",
      "right" : "process(token);",
      "info" : "ExpressionStatement[5549-5564]:ExpressionStatement[5549-5564]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5608-5658]:Block[5608-5658]"
    }, {
      "left" : "tokens.add(token);",
      "right" : "tokens.add(token);",
      "info" : "ExpressionStatement[5626-5644]:ExpressionStatement[5626-5644]"
    }, {
      "left" : "gobble(iter);",
      "right" : "gobble(iter);",
      "info" : "ExpressionStatement[5672-5685]:ExpressionStatement[5672-5685]"
    }, {
      "left" : "return (String[]) tokens.toArray(new String[tokens.size()]);",
      "right" : "return (String[]) tokens.toArray(new String[tokens.size()]);",
      "info" : "ReturnStatement[5705-5765]:ReturnStatement[5705-5765]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5959-6114]:Block[5959-6114]"
    }, {
      "left" : "if (eatTheRest)",
      "right" : "if (eatTheRest)",
      "info" : "IfStatement[5969-6108]:IfStatement[5969-6108]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5993-6108]:Block[5993-6108]"
    }, {
      "left" : "while (iter.hasNext())",
      "right" : "while (iter.hasNext())",
      "info" : "WhileStatement[6007-6098]:WhileStatement[6007-6098]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6042-6098]:Block[6042-6098]"
    }, {
      "left" : "tokens.add(iter.next());",
      "right" : "tokens.add(iter.next());",
      "info" : "ExpressionStatement[6060-6084]:ExpressionStatement[6060-6084]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6794-7257]:Block[6794-7257]"
    }, {
      "left" : "if (currentOption != null && currentOption.hasArg())",
      "right" : "if (currentOption != null && currentOption.hasArg())",
      "info" : "IfStatement[6804-7251]:IfStatement[6804-7251]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6865-7126]:Block[6865-7126]"
    }, {
      "left" : "if (currentOption.hasArg())",
      "right" : "if (currentOption.hasArg())",
      "info" : "IfStatement[6879-7116]:IfStatement[6879-7116]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6919-7007]:Block[6919-7007]"
    }, {
      "left" : "tokens.add(value);",
      "right" : "tokens.add(value);",
      "info" : "ExpressionStatement[6937-6955]:ExpressionStatement[6937-6955]"
    }, {
      "left" : "currentOption = null;",
      "right" : "currentOption = null;",
      "info" : "ExpressionStatement[6972-6993]:ExpressionStatement[6972-6993]"
    }, {
      "left" : "if (currentOption.hasArgs())",
      "right" : "if (currentOption.hasArgs())",
      "info" : "IfStatement[7025-7116]:IfStatement[7025-7116]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7066-7116]:Block[7066-7116]"
    }, {
      "left" : "tokens.add(value);",
      "right" : "tokens.add(value);",
      "info" : "ExpressionStatement[7084-7102]:ExpressionStatement[7084-7102]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7148-7251]:Block[7148-7251]"
    }, {
      "left" : "eatTheRest = true;",
      "right" : "eatTheRest = true;",
      "info" : "ExpressionStatement[7162-7180]:ExpressionStatement[7162-7180]"
    }, {
      "left" : "tokens.add(\"--\");",
      "right" : "tokens.add(\"--\");",
      "info" : "ExpressionStatement[7193-7210]:ExpressionStatement[7193-7210]"
    }, {
      "left" : "tokens.add(value);",
      "right" : "tokens.add(value);",
      "info" : "ExpressionStatement[7223-7241]:ExpressionStatement[7223-7241]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7867-8133]:Block[7867-8099]"
    }, {
      "left" : "if (options.hasOption(token))",
      "right" : "if (options.hasOption(token))",
      "info" : "IfStatement[7877-8127]:IfStatement[7877-8065]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7915-8011]:Block[7915-7980]"
    }, {
      "left" : "currentOption = options.getOption(token);",
      "right" : "currentOption = options.getOption(token);",
      "info" : "ExpressionStatement[7929-7970]:ExpressionStatement[7929-7970]"
    }, {
      "left" : "tokens.add(token);",
      "right" : "tokens.add(token);",
      "info" : "ExpressionStatement[7983-8001]:ExpressionStatement[8075-8093]"
    }, {
      "left" : "if (stopAtNonOption)",
      "right" : "if (stopAtNonOption)",
      "info" : "IfStatement[8025-8127]:IfStatement[7994-8065]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8054-8127]:Block[8023-8065]"
    }, {
      "left" : "eatTheRest = true;",
      "right" : "eatTheRest = true;",
      "info" : "ExpressionStatement[8068-8086]:ExpressionStatement[8037-8055]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9515-10242]:Block[9481-10208]"
    }, {
      "left" : "for (int i = 1; i < token.length(); i++)",
      "right" : "for (int i = 1; i < token.length(); i++)",
      "info" : "ForStatement[9525-10236]:ForStatement[9491-10202]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9574-10236]:Block[9540-10202]"
    }, {
      "left" : "String ch = String.valueOf(token.charAt(i));",
      "right" : "String ch = String.valueOf(token.charAt(i));",
      "info" : "VariableDeclarationStatement[9588-9632]:VariableDeclarationStatement[9554-9598]"
    }, {
      "left" : "if (options.hasOption(ch))",
      "right" : "if (options.hasOption(ch))",
      "info" : "IfStatement[9646-10226]:IfStatement[9612-10192]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9685-9989]:Block[9651-9955]"
    }, {
      "left" : "tokens.add(\"-\" + ch);",
      "right" : "tokens.add(\"-\" + ch);",
      "info" : "ExpressionStatement[9703-9724]:ExpressionStatement[9669-9690]"
    }, {
      "left" : "currentOption = options.getOption(ch);",
      "right" : "currentOption = options.getOption(ch);",
      "info" : "ExpressionStatement[9741-9779]:ExpressionStatement[9707-9745]"
    }, {
      "left" : "if (currentOption.hasArg() && (token.length() != (i + 1)))",
      "right" : "if (currentOption.hasArg() && (token.length() != (i + 1)))",
      "info" : "IfStatement[9797-9975]:IfStatement[9763-9941]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9872-9975]:Block[9838-9941]"
    }, {
      "left" : "tokens.add(token.substring(i + 1));",
      "right" : "tokens.add(token.substring(i + 1));",
      "info" : "ExpressionStatement[9894-9929]:ExpressionStatement[9860-9895]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[9951-9957]:BreakStatement[9917-9923]"
    }, {
      "left" : "if (stopAtNonOption)",
      "right" : "if (stopAtNonOption)",
      "info" : "IfStatement[10007-10226]:IfStatement[9973-10192]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10040-10123]:Block[10006-10089]"
    }, {
      "left" : "process(token.substring(i));",
      "right" : "process(token.substring(i));",
      "info" : "ExpressionStatement[10058-10086]:ExpressionStatement[10024-10052]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[10103-10109]:BreakStatement[10069-10075]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10153-10226]:Block[10119-10192]"
    }, {
      "left" : "tokens.add(token);",
      "right" : "tokens.add(token);",
      "info" : "ExpressionStatement[10171-10189]:ExpressionStatement[10137-10155]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[10206-10212]:BreakStatement[10172-10178]"
    } ]
  },
  "interFileMappings" : { }
}