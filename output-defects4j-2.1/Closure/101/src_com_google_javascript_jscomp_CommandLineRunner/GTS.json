{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "CommandLineRunner",
      "right" : "CommandLineRunner",
      "info" : "TypeDeclaration[1337-18195]:TypeDeclaration[1337-18171]"
    }, {
      "left" : "Flags",
      "right" : "Flags",
      "info" : "TypeDeclaration[2477-12516]:TypeDeclaration[2477-12516]"
    }, {
      "left" : "@Option(name = \"--print_tree\",\n        handler = BooleanOptionHandler.class,\n        usage = \"Prints out the parse tree and exits\")\n    private boolean print_tree = false;",
      "right" : "@Option(name = \"--print_tree\",\n        handler = BooleanOptionHandler.class,\n        usage = \"Prints out the parse tree and exits\")\n    private boolean print_tree = false;",
      "info" : "FieldDeclaration[2510-2681]:FieldDeclaration[2510-2681]"
    }, {
      "left" : "@Option(name = \"--compute_phase_ordering\",\n        handler = BooleanOptionHandler.class,\n        usage = \"Runs the compile job many times, then prints out the \" +\n        \"best phase ordering from this run\")\n    private boolean compute_phase_ordering = false;",
      "right" : "@Option(name = \"--compute_phase_ordering\",\n        handler = BooleanOptionHandler.class,\n        usage = \"Runs the compile job many times, then prints out the \" +\n        \"best phase ordering from this run\")\n    private boolean compute_phase_ordering = false;",
      "info" : "FieldDeclaration[2687-2946]:FieldDeclaration[2687-2946]"
    }, {
      "left" : "@Option(name = \"--print_ast\",\n        handler = BooleanOptionHandler.class,\n        usage = \"Prints a dot file describing the internal abstract syntax\"\n        + \" tree and exits\")\n    private boolean print_ast = false;",
      "right" : "@Option(name = \"--print_ast\",\n        handler = BooleanOptionHandler.class,\n        usage = \"Prints a dot file describing the internal abstract syntax\"\n        + \" tree and exits\")\n    private boolean print_ast = false;",
      "info" : "FieldDeclaration[2952-3171]:FieldDeclaration[2952-3171]"
    }, {
      "left" : "@Option(name = \"--print_pass_graph\",\n        usage = \"Prints a dot file describing the passes that will get run\"\n        + \" and exits\")\n    private boolean print_pass_graph = false;",
      "right" : "@Option(name = \"--print_pass_graph\",\n        usage = \"Prints a dot file describing the passes that will get run\"\n        + \" and exits\")\n    private boolean print_pass_graph = false;",
      "info" : "FieldDeclaration[3177-3359]:FieldDeclaration[3177-3359]"
    }, {
      "left" : "@Option(name = \"--jscomp_dev_mode\",\n        usage = \"Turns on extra sanity checks\",\n        aliases = {\"--dev_mode\"})\n    private CompilerOptions.DevMode jscomp_dev_mode =\n        CompilerOptions.DevMode.OFF;",
      "right" : "@Option(name = \"--jscomp_dev_mode\",\n        usage = \"Turns on extra sanity checks\",\n        aliases = {\"--dev_mode\"})\n    private CompilerOptions.DevMode jscomp_dev_mode =\n        CompilerOptions.DevMode.OFF;",
      "info" : "FieldDeclaration[3365-3573]:FieldDeclaration[3365-3573]"
    }, {
      "left" : "@Option(name = \"--logging_level\",\n        usage = \"The logging level (standard java.util.logging.Level\"\n        + \" values) for Compiler progress. Does not control errors or\"\n        + \" warnings for the JavaScript code under compilation\")\n    private String logging_level = Level.WARNING.getName();",
      "right" : "@Option(name = \"--logging_level\",\n        usage = \"The logging level (standard java.util.logging.Level\"\n        + \" values) for Compiler progress. Does not control errors or\"\n        + \" warnings for the JavaScript code under compilation\")\n    private String logging_level = Level.WARNING.getName();",
      "info" : "FieldDeclaration[3643-3942]:FieldDeclaration[3643-3942]"
    }, {
      "left" : "@Option(name = \"--externs\",\n        usage = \"The file containing javascript externs. You may specify\"\n        + \" multiple\")\n    private List<String> externs = Lists.newArrayList();",
      "right" : "@Option(name = \"--externs\",\n        usage = \"The file containing javascript externs. You may specify\"\n        + \" multiple\")\n    private List<String> externs = Lists.newArrayList();",
      "info" : "FieldDeclaration[3948-4129]:FieldDeclaration[3948-4129]"
    }, {
      "left" : "@Option(name = \"--js\",\n        usage = \"The javascript filename. You may specify multiple\")\n    private List<String> js = Lists.newArrayList();",
      "right" : "@Option(name = \"--js\",\n        usage = \"The javascript filename. You may specify multiple\")\n    private List<String> js = Lists.newArrayList();",
      "info" : "FieldDeclaration[4135-4278]:FieldDeclaration[4135-4278]"
    }, {
      "left" : "@Option(name = \"--js_output_file\",\n        usage = \"Primary output filename. If not specified, output is \" +\n        \"written to stdout\")\n    private String js_output_file = \"\";",
      "right" : "@Option(name = \"--js_output_file\",\n        usage = \"Primary output filename. If not specified, output is \" +\n        \"written to stdout\")\n    private String js_output_file = \"\";",
      "info" : "FieldDeclaration[4284-4461]:FieldDeclaration[4284-4461]"
    }, {
      "left" : "@Option(name = \"--module\",\n        usage = \"A javascript module specification. The format is \"\n        + \"<name>:<num-js-files>[:[<dep>,...][:]]]. Module names must be \"\n        + \"unique. Each dep is the name of a module that this module \"\n        + \"depends on. Modules must be listed in dependency order, and js \"\n        + \"source files must be listed in the corresponding order. Where \"\n        + \"--module flags occur in relation to --js flags is unimportant\")\n    private List<String> module = Lists.newArrayList();",
      "right" : "@Option(name = \"--module\",\n        usage = \"A javascript module specification. The format is \"\n        + \"<name>:<num-js-files>[:[<dep>,...][:]]]. Module names must be \"\n        + \"unique. Each dep is the name of a module that this module \"\n        + \"depends on. Modules must be listed in dependency order, and js \"\n        + \"source files must be listed in the corresponding order. Where \"\n        + \"--module flags occur in relation to --js flags is unimportant\")\n    private List<String> module = Lists.newArrayList();",
      "info" : "FieldDeclaration[4467-4989]:FieldDeclaration[4467-4989]"
    }, {
      "left" : "@Option(name = \"--variable_map_input_file\",\n        usage = \"File containing the serialized version of the variable \"\n        + \"renaming map produced by a previous compilation\")\n    private String variable_map_input_file = \"\";",
      "right" : "@Option(name = \"--variable_map_input_file\",\n        usage = \"File containing the serialized version of the variable \"\n        + \"renaming map produced by a previous compilation\")\n    private String variable_map_input_file = \"\";",
      "info" : "FieldDeclaration[4995-5222]:FieldDeclaration[4995-5222]"
    }, {
      "left" : "@Option(name = \"--property_map_input_file\",\n        usage = \"File containing the serialized version of the property \"\n        + \"renaming map produced by a previous compilation\")\n    private String property_map_input_file = \"\";",
      "right" : "@Option(name = \"--property_map_input_file\",\n        usage = \"File containing the serialized version of the property \"\n        + \"renaming map produced by a previous compilation\")\n    private String property_map_input_file = \"\";",
      "info" : "FieldDeclaration[5228-5455]:FieldDeclaration[5228-5455]"
    }, {
      "left" : "@Option(name = \"--variable_map_output_file\",\n        usage = \"File where the serialized version of the variable \"\n        + \"renaming map produced should be saved\")\n    private String variable_map_output_file = \"\";",
      "right" : "@Option(name = \"--variable_map_output_file\",\n        usage = \"File where the serialized version of the variable \"\n        + \"renaming map produced should be saved\")\n    private String variable_map_output_file = \"\";",
      "info" : "FieldDeclaration[5461-5675]:FieldDeclaration[5461-5675]"
    }, {
      "left" : "@Option(name = \"--create_name_map_files\",\n        handler = BooleanOptionHandler.class,\n        usage = \"If true, variable renaming and property renaming map \"\n        + \"files will be produced as {binary name}_vars_map.out and \"\n        + \"{binary name}_props_map.out. Note that this flag cannot be used \"\n        + \"in conjunction with either variable_map_output_file or \"\n        + \"property_map_output_file\")\n    private boolean create_name_map_files = false;",
      "right" : "@Option(name = \"--create_name_map_files\",\n        handler = BooleanOptionHandler.class,\n        usage = \"If true, variable renaming and property renaming map \"\n        + \"files will be produced as {binary name}_vars_map.out and \"\n        + \"{binary name}_props_map.out. Note that this flag cannot be used \"\n        + \"in conjunction with either variable_map_output_file or \"\n        + \"property_map_output_file\")\n    private boolean create_name_map_files = false;",
      "info" : "FieldDeclaration[5681-6144]:FieldDeclaration[5681-6144]"
    }, {
      "left" : "@Option(name = \"--property_map_output_file\",\n        usage = \"File where the serialized version of the property \"\n        + \"renaming map produced should be saved\")\n    private String property_map_output_file = \"\";",
      "right" : "@Option(name = \"--property_map_output_file\",\n        usage = \"File where the serialized version of the property \"\n        + \"renaming map produced should be saved\")\n    private String property_map_output_file = \"\";",
      "info" : "FieldDeclaration[6150-6364]:FieldDeclaration[6150-6364]"
    }, {
      "left" : "@Option(name = \"--third_party\",\n        handler = BooleanOptionHandler.class,\n        usage = \"Check source validity but do not enforce Closure style \"\n        + \"rules and conventions\")\n    private boolean third_party = false;",
      "right" : "@Option(name = \"--third_party\",\n        handler = BooleanOptionHandler.class,\n        usage = \"Check source validity but do not enforce Closure style \"\n        + \"rules and conventions\")\n    private boolean third_party = false;",
      "info" : "FieldDeclaration[6370-6597]:FieldDeclaration[6370-6597]"
    }, {
      "left" : "@Option(name = \"--summary_detail_level\",\n        usage = \"Controls how detailed the compilation summary is. Values:\"\n        + \" 0 (never print summary), 1 (print summary only if there are \"\n        + \"errors or warnings), 2 (print summary if type checking is on, \"\n        + \"see --check_types), 3 (always print summary). The default level \"\n        + \"is 1\")\n    private int summary_detail_level = 1;",
      "right" : "@Option(name = \"--summary_detail_level\",\n        usage = \"Controls how detailed the compilation summary is. Values:\"\n        + \" 0 (never print summary), 1 (print summary only if there are \"\n        + \"errors or warnings), 2 (print summary if type checking is on, \"\n        + \"see --check_types), 3 (always print summary). The default level \"\n        + \"is 1\")\n    private int summary_detail_level = 1;",
      "info" : "FieldDeclaration[6604-7006]:FieldDeclaration[6604-7006]"
    }, {
      "left" : "@Option(name = \"--output_wrapper\",\n        usage = \"Interpolate output into this string at the place denoted\"\n        + \" by the marker token %output%. See --output_wrapper_marker\")\n    private String output_wrapper = \"\";",
      "right" : "@Option(name = \"--output_wrapper\",\n        usage = \"Interpolate output into this string at the place denoted\"\n        + \" by the marker token %output%. See --output_wrapper_marker\")\n    private String output_wrapper = \"\";",
      "info" : "FieldDeclaration[7012-7233]:FieldDeclaration[7012-7233]"
    }, {
      "left" : "@Option(name = \"--output_wrapper_marker\",\n        usage = \"Use this token as output marker in the value of\"\n        + \" --output_wrapper\")\n    private String output_wrapper_marker = \"%output%\";",
      "right" : "@Option(name = \"--output_wrapper_marker\",\n        usage = \"Use this token as output marker in the value of\"\n        + \" --output_wrapper\")\n    private String output_wrapper_marker = \"%output%\";",
      "info" : "FieldDeclaration[7239-7432]:FieldDeclaration[7239-7432]"
    }, {
      "left" : "@Option(name = \"--module_wrapper\",\n        usage = \"An output wrapper for a javascript module (optional). \"\n        + \"The format is <name>:<wrapper>. The module name must correspond \"\n        + \"with a module specified using --module. The wrapper must \"\n        + \"contain %s as the code placeholder\")\n    private List<String> module_wrapper = Lists.newArrayList();",
      "right" : "@Option(name = \"--module_wrapper\",\n        usage = \"An output wrapper for a javascript module (optional). \"\n        + \"The format is <name>:<wrapper>. The module name must correspond \"\n        + \"with a module specified using --module. The wrapper must \"\n        + \"contain %s as the code placeholder\")\n    private List<String> module_wrapper = Lists.newArrayList();",
      "info" : "FieldDeclaration[7438-7804]:FieldDeclaration[7438-7804]"
    }, {
      "left" : "@Option(name = \"--module_output_path_prefix\",\n        usage = \"Prefix for filenames of compiled js modules. \"\n        + \"<module-name>.js will be appended to this prefix. Directories \"\n        + \"will be created as needed. Use with --module\")\n    private String module_output_path_prefix = \"./\";",
      "right" : "@Option(name = \"--module_output_path_prefix\",\n        usage = \"Prefix for filenames of compiled js modules. \"\n        + \"<module-name>.js will be appended to this prefix. Directories \"\n        + \"will be created as needed. Use with --module\")\n    private String module_output_path_prefix = \"./\";",
      "info" : "FieldDeclaration[7810-8105]:FieldDeclaration[7810-8105]"
    }, {
      "left" : "@Option(name = \"--create_source_map\",\n        usage = \"If specified, a source map file mapping the generated \" +\n        \"source files back to the original source file will be \" +\n        \"output to the specified path. The %outname% placeholder will \" +\n        \"expand to the name of the output file that the source map \" +\n        \"corresponds to.\")\n    private String create_source_map = \"\";",
      "right" : "@Option(name = \"--create_source_map\",\n        usage = \"If specified, a source map file mapping the generated \" +\n        \"source files back to the original source file will be \" +\n        \"output to the specified path. The %outname% placeholder will \" +\n        \"expand to the name of the output file that the source map \" +\n        \"corresponds to.\")\n    private String create_source_map = \"\";",
      "info" : "FieldDeclaration[8111-8505]:FieldDeclaration[8111-8505]"
    }, {
      "left" : "@Option(name = \"--jscomp_error\",\n        usage = \"Make the named class of warnings an error. Options:\" +\n        DiagnosticGroups.DIAGNOSTIC_GROUP_NAMES)\n    private List<String> jscomp_error = Lists.newArrayList();",
      "right" : "@Option(name = \"--jscomp_error\",\n        usage = \"Make the named class of warnings an error. Options:\" +\n        DiagnosticGroups.DIAGNOSTIC_GROUP_NAMES)\n    private List<String> jscomp_error = Lists.newArrayList();",
      "info" : "FieldDeclaration[8511-8726]:FieldDeclaration[8511-8726]"
    }, {
      "left" : "@Option(name = \"--jscomp_warning\",\n        usage = \"Make the named class of warnings a normal warning. \" +\n        \"Options:\" + DiagnosticGroups.DIAGNOSTIC_GROUP_NAMES)\n    private List<String> jscomp_warning =  Lists.newArrayList();",
      "right" : "@Option(name = \"--jscomp_warning\",\n        usage = \"Make the named class of warnings a normal warning. \" +\n        \"Options:\" + DiagnosticGroups.DIAGNOSTIC_GROUP_NAMES)\n    private List<String> jscomp_warning =  Lists.newArrayList();",
      "info" : "FieldDeclaration[8732-8965]:FieldDeclaration[8732-8965]"
    }, {
      "left" : "@Option(name = \"--jscomp_off\",\n        usage = \"Turn off the named class of warnings. Options:\" +\n        DiagnosticGroups.DIAGNOSTIC_GROUP_NAMES)\n    private List<String> jscomp_off = Lists.newArrayList();",
      "right" : "@Option(name = \"--jscomp_off\",\n        usage = \"Turn off the named class of warnings. Options:\" +\n        DiagnosticGroups.DIAGNOSTIC_GROUP_NAMES)\n    private List<String> jscomp_off = Lists.newArrayList();",
      "info" : "FieldDeclaration[8971-9177]:FieldDeclaration[8971-9177]"
    }, {
      "left" : "@Option(name = \"--define\",\n        aliases = {\"--D\", \"-D\"},\n        usage = \"Override the value of a variable annotated @define. \" +\n        \"The format is <name>[=<val>], where <name> is the name of a @define \" +\n        \"variable and <val> is a boolean, number, or a single-quoted string \" +\n        \"that contains no single quotes. If [=<val>] is omitted, \" +\n        \"the variable is marked true\")\n    private List<String> define = Lists.newArrayList();",
      "right" : "@Option(name = \"--define\",\n        aliases = {\"--D\", \"-D\"},\n        usage = \"Override the value of a variable annotated @define. \" +\n        \"The format is <name>[=<val>], where <name> is the name of a @define \" +\n        \"variable and <val> is a boolean, number, or a single-quoted string \" +\n        \"that contains no single quotes. If [=<val>] is omitted, \" +\n        \"the variable is marked true\")\n    private List<String> define = Lists.newArrayList();",
      "info" : "FieldDeclaration[9183-9640]:FieldDeclaration[9183-9640]"
    }, {
      "left" : "@Option(name = \"--charset\",\n        usage = \"Input charset for all files.\")\n    private String charset = \"\";",
      "right" : "@Option(name = \"--charset\",\n        usage = \"Input charset for all files.\")\n    private String charset = \"\";",
      "info" : "FieldDeclaration[9646-9754]:FieldDeclaration[9646-9754]"
    }, {
      "left" : "@Option(name = \"--compilation_level\",\n        usage = \"Specifies the compilation level to use. Options: \" +\n        \"WHITESPACE_ONLY, SIMPLE_OPTIMIZATIONS, ADVANCED_OPTIMIZATIONS\")\n    private CompilationLevel compilation_level =\n        CompilationLevel.SIMPLE_OPTIMIZATIONS;",
      "right" : "@Option(name = \"--compilation_level\",\n        usage = \"Specifies the compilation level to use. Options: \" +\n        \"WHITESPACE_ONLY, SIMPLE_OPTIMIZATIONS, ADVANCED_OPTIMIZATIONS\")\n    private CompilationLevel compilation_level =\n        CompilationLevel.SIMPLE_OPTIMIZATIONS;",
      "info" : "FieldDeclaration[9760-10036]:FieldDeclaration[9760-10036]"
    }, {
      "left" : "@Option(name = \"--warning_level\",\n        usage = \"Specifies the warning level to use. Options: \" +\n        \"QUIET, DEFAULT, VERBOSE\")\n    private WarningLevel warning_level = WarningLevel.DEFAULT;",
      "right" : "@Option(name = \"--warning_level\",\n        usage = \"Specifies the warning level to use. Options: \" +\n        \"QUIET, DEFAULT, VERBOSE\")\n    private WarningLevel warning_level = WarningLevel.DEFAULT;",
      "info" : "FieldDeclaration[10042-10239]:FieldDeclaration[10042-10239]"
    }, {
      "left" : "@Option(name = \"--use_only_custom_externs\",\n        handler = BooleanOptionHandler.class,\n        usage = \"Specifies whether the default externs should be excluded\")\n    private boolean use_only_custom_externs = false;",
      "right" : "@Option(name = \"--use_only_custom_externs\",\n        handler = BooleanOptionHandler.class,\n        usage = \"Specifies whether the default externs should be excluded\")\n    private boolean use_only_custom_externs = false;",
      "info" : "FieldDeclaration[10245-10463]:FieldDeclaration[10245-10463]"
    }, {
      "left" : "@Option(name = \"--debug\",\n        handler = BooleanOptionHandler.class,\n        usage = \"Enable debugging options\")\n    private boolean debug = false;",
      "right" : "@Option(name = \"--debug\",\n        handler = BooleanOptionHandler.class,\n        usage = \"Enable debugging options\")\n    private boolean debug = false;",
      "info" : "FieldDeclaration[10469-10619]:FieldDeclaration[10469-10619]"
    }, {
      "left" : "@Option(name = \"--formatting\",\n        usage = \"Specifies which formatting options, if any, should be \"\n        + \"applied to the output JS. Options: \"\n        + \"PRETTY_PRINT, PRINT_INPUT_DELIMITER\")\n    private List<FormattingOption> formatting = Lists.newArrayList();",
      "right" : "@Option(name = \"--formatting\",\n        usage = \"Specifies which formatting options, if any, should be \"\n        + \"applied to the output JS. Options: \"\n        + \"PRETTY_PRINT, PRINT_INPUT_DELIMITER\")\n    private List<FormattingOption> formatting = Lists.newArrayList();",
      "info" : "FieldDeclaration[10625-10895]:FieldDeclaration[10625-10895]"
    }, {
      "left" : "@Option(name = \"--process_closure_primitives\",\n        handler = BooleanOptionHandler.class,\n        usage = \"Processes built-ins from the Closure library, such as \"\n        + \"goog.require(), goog.provide(), and goog.exportSymbol()\")\n    private boolean process_closure_primitives = true;",
      "right" : "@Option(name = \"--process_closure_primitives\",\n        handler = BooleanOptionHandler.class,\n        usage = \"Processes built-ins from the Closure library, such as \"\n        + \"goog.require(), goog.provide(), and goog.exportSymbol()\")\n    private boolean process_closure_primitives = true;",
      "info" : "FieldDeclaration[10901-11190]:FieldDeclaration[10901-11190]"
    }, {
      "left" : "BooleanOptionHandler",
      "right" : "BooleanOptionHandler",
      "info" : "TypeDeclaration[11332-12512]:TypeDeclaration[11332-12512]"
    }, {
      "left" : "private static final Set<String> TRUES =\n          Sets.newHashSet(\"true\", \"on\", \"yes\", \"1\");",
      "right" : "private static final Set<String> TRUES =\n          Sets.newHashSet(\"true\", \"on\", \"yes\", \"1\");",
      "info" : "FieldDeclaration[11412-11505]:FieldDeclaration[11412-11505]"
    }, {
      "left" : "private static final Set<String> FALSES =\n          Sets.newHashSet(\"false\", \"off\", \"no\", \"0\");",
      "right" : "private static final Set<String> FALSES =\n          Sets.newHashSet(\"false\", \"off\", \"no\", \"0\");",
      "info" : "FieldDeclaration[11512-11607]:FieldDeclaration[11512-11607]"
    }, {
      "left" : "public BooleanOptionHandler(\n          CmdLineParser parser, OptionDef option,\n          Setter<? super Boolean> setter)",
      "right" : "public BooleanOptionHandler(\n          CmdLineParser parser, OptionDef option,\n          Setter<? super Boolean> setter)",
      "info" : "MethodDeclaration[11615-11784]:MethodDeclaration[11615-11784]"
    }, {
      "left" : "public int parseArguments(Parameters params) throws CmdLineException",
      "right" : "public int parseArguments(Parameters params) throws CmdLineException",
      "info" : "MethodDeclaration[11792-12413]:MethodDeclaration[11792-12413]"
    }, {
      "left" : "public String getDefaultMetaVariable()",
      "right" : "public String getDefaultMetaVariable()",
      "info" : "MethodDeclaration[12421-12506]:MethodDeclaration[12421-12506]"
    }, {
      "left" : "enum : FormattingOption",
      "right" : "enum : FormattingOption",
      "info" : "EnumDeclaration[12520-13060]:EnumDeclaration[12520-13060]"
    }, {
      "left" : "private void applyToOptions(CompilerOptions options)",
      "right" : "private void applyToOptions(CompilerOptions options)",
      "info" : "MethodDeclaration[12692-13056]:MethodDeclaration[12692-13056]"
    }, {
      "left" : "private final Flags flags = new Flags();",
      "right" : "private final Flags flags = new Flags();",
      "info" : "FieldDeclaration[13064-13104]:FieldDeclaration[13064-13104]"
    }, {
      "left" : "protected CommandLineRunner(String[] args)\n      throws CmdLineException",
      "right" : "protected CommandLineRunner(String[] args)\n      throws CmdLineException",
      "info" : "MethodDeclaration[13108-13430]:MethodDeclaration[13108-13430]"
    }, {
      "left" : "protected CommandLineRunner(String[] args, PrintStream out, PrintStream err)\n      throws CmdLineException",
      "right" : "protected CommandLineRunner(String[] args, PrintStream out, PrintStream err)\n      throws CmdLineException",
      "info" : "MethodDeclaration[13434-13603]:MethodDeclaration[13434-13603]"
    }, {
      "left" : "private void initConfigFromFlags(\n      String[] args, PrintStream err)\n      throws CmdLineException",
      "right" : "private void initConfigFromFlags(\n      String[] args, PrintStream err)\n      throws CmdLineException",
      "info" : "MethodDeclaration[13607-16141]:MethodDeclaration[13607-16141]"
    }, {
      "left" : "protected CompilerOptions createOptions()",
      "right" : "protected CompilerOptions createOptions()",
      "info" : "MethodDeclaration[16145-16865]:MethodDeclaration[16145-16841]"
    }, {
      "left" : "protected Compiler createCompiler()",
      "right" : "protected Compiler createCompiler()",
      "info" : "MethodDeclaration[16869-16970]:MethodDeclaration[16845-16946]"
    }, {
      "left" : "protected List<JSSourceFile> createExterns() throws FlagUsageException,\n      IOException",
      "right" : "protected List<JSSourceFile> createExterns() throws FlagUsageException,\n      IOException",
      "info" : "MethodDeclaration[16974-17350]:MethodDeclaration[16950-17326]"
    }, {
      "left" : "private List<JSSourceFile> getDefaultExterns() throws IOException",
      "right" : "private List<JSSourceFile> getDefaultExterns() throws IOException",
      "info" : "MethodDeclaration[17354-17952]:MethodDeclaration[17330-17928]"
    }, {
      "left" : "public static void main(String[] args)",
      "right" : "public static void main(String[] args)",
      "info" : "MethodDeclaration[17956-18193]:MethodDeclaration[17932-18169]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11736-11784]:Block[11736-11784]"
    }, {
      "left" : "super(parser, option, setter);",
      "right" : "super(parser, option, setter);",
      "info" : "SuperConstructorInvocation[11746-11776]:SuperConstructorInvocation[11746-11776]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11877-12413]:Block[11877-12413]"
    }, {
      "left" : "String param = params.getParameter(0);",
      "right" : "String param = params.getParameter(0);",
      "info" : "VariableDeclarationStatement[11887-11925]:VariableDeclarationStatement[11887-11925]"
    }, {
      "left" : "if (param == null)",
      "right" : "if (param == null)",
      "info" : "IfStatement[11934-12405]:IfStatement[11934-12405]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11953-12017]:Block[11953-12017]"
    }, {
      "left" : "setter.addValue(true);",
      "right" : "setter.addValue(true);",
      "info" : "ExpressionStatement[11965-11987]:ExpressionStatement[11965-11987]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[11998-12007]:ReturnStatement[11998-12007]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12023-12405]:Block[12023-12405]"
    }, {
      "left" : "String lowerParam = param.toLowerCase();",
      "right" : "String lowerParam = param.toLowerCase();",
      "info" : "VariableDeclarationStatement[12035-12075]:VariableDeclarationStatement[12035-12075]"
    }, {
      "left" : "if (TRUES.contains(lowerParam))",
      "right" : "if (TRUES.contains(lowerParam))",
      "info" : "IfStatement[12086-12375]:IfStatement[12086-12375]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12118-12166]:Block[12118-12166]"
    }, {
      "left" : "setter.addValue(true);",
      "right" : "setter.addValue(true);",
      "info" : "ExpressionStatement[12132-12154]:ExpressionStatement[12132-12154]"
    }, {
      "left" : "if (FALSES.contains(lowerParam))",
      "right" : "if (FALSES.contains(lowerParam))",
      "info" : "IfStatement[12172-12375]:IfStatement[12172-12375]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12205-12254]:Block[12205-12254]"
    }, {
      "left" : "setter.addValue(false);",
      "right" : "setter.addValue(false);",
      "info" : "ExpressionStatement[12219-12242]:ExpressionStatement[12219-12242]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12260-12375]:Block[12260-12375]"
    }, {
      "left" : "throw new CmdLineException(owner,\n               \"Illegal boolean value: \" + lowerParam);",
      "right" : "throw new CmdLineException(owner,\n               \"Illegal boolean value: \" + lowerParam);",
      "info" : "ThrowStatement[12274-12363]:ThrowStatement[12274-12363]"
    }, {
      "left" : "return 1;",
      "right" : "return 1;",
      "info" : "ReturnStatement[12386-12395]:ReturnStatement[12386-12395]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12476-12506]:Block[12476-12506]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[12486-12498]:ReturnStatement[12486-12498]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12745-13056]:Block[12745-13056]"
    }, {
      "left" : "switch (this) {\n        case PRETTY_PRINT:\n          options.prettyPrint = true;\n          break;\n        case PRINT_INPUT_DELIMITER:\n          options.printInputDelimiter = true;\n          break;\n        default:\n          throw new RuntimeException(\"Unknown formatting option: \" + this);\n      }",
      "right" : "switch (this) {\n        case PRETTY_PRINT:\n          options.prettyPrint = true;\n          break;\n        case PRINT_INPUT_DELIMITER:\n          options.printInputDelimiter = true;\n          break;\n        default:\n          throw new RuntimeException(\"Unknown formatting option: \" + this);\n      }",
      "info" : "SwitchStatement[12753-13050]:SwitchStatement[12753-13050]"
    }, {
      "left" : "case PRETTY_PRINT:",
      "right" : "case PRETTY_PRINT:",
      "info" : "SwitchCase[12777-12795]:SwitchCase[12777-12795]"
    }, {
      "left" : "options.prettyPrint = true;",
      "right" : "options.prettyPrint = true;",
      "info" : "ExpressionStatement[12806-12833]:ExpressionStatement[12806-12833]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[12844-12850]:BreakStatement[12844-12850]"
    }, {
      "left" : "case PRINT_INPUT_DELIMITER:",
      "right" : "case PRINT_INPUT_DELIMITER:",
      "info" : "SwitchCase[12859-12886]:SwitchCase[12859-12886]"
    }, {
      "left" : "options.printInputDelimiter = true;",
      "right" : "options.printInputDelimiter = true;",
      "info" : "ExpressionStatement[12897-12932]:ExpressionStatement[12897-12932]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[12943-12949]:BreakStatement[12943-12949]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[12958-12966]:SwitchCase[12958-12966]"
    }, {
      "left" : "throw new RuntimeException(\"Unknown formatting option: \" + this);",
      "right" : "throw new RuntimeException(\"Unknown formatting option: \" + this);",
      "info" : "ThrowStatement[12977-13042]:ThrowStatement[12977-13042]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13369-13430]:Block[13369-13430]"
    }, {
      "left" : "super();",
      "right" : "super();",
      "info" : "SuperConstructorInvocation[13375-13383]:SuperConstructorInvocation[13375-13383]"
    }, {
      "left" : "initConfigFromFlags(args, System.err);",
      "right" : "initConfigFromFlags(args, System.err);",
      "info" : "ExpressionStatement[13388-13426]:ExpressionStatement[13388-13426]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13541-13603]:Block[13541-13603]"
    }, {
      "left" : "super(out, err);",
      "right" : "super(out, err);",
      "info" : "SuperConstructorInvocation[13547-13563]:SuperConstructorInvocation[13547-13563]"
    }, {
      "left" : "initConfigFromFlags(args, err);",
      "right" : "initConfigFromFlags(args, err);",
      "info" : "ExpressionStatement[13568-13599]:ExpressionStatement[13568-13599]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13709-16141]:Block[13709-16141]"
    }, {
      "left" : "Pattern argPattern = Pattern.compile(\"(--[a-zA-Z_]+)=(.*)\");",
      "right" : "Pattern argPattern = Pattern.compile(\"(--[a-zA-Z_]+)=(.*)\");",
      "info" : "VariableDeclarationStatement[13875-13935]:VariableDeclarationStatement[13875-13935]"
    }, {
      "left" : "Pattern quotesPattern = Pattern.compile(\"^['\\\"](.*)['\\\"]$\");",
      "right" : "Pattern quotesPattern = Pattern.compile(\"^['\\\"](.*)['\\\"]$\");",
      "info" : "VariableDeclarationStatement[13940-14000]:VariableDeclarationStatement[13940-14000]"
    }, {
      "left" : "List<String> processedArgs = Lists.newArrayList();",
      "right" : "List<String> processedArgs = Lists.newArrayList();",
      "info" : "VariableDeclarationStatement[14005-14055]:VariableDeclarationStatement[14005-14055]"
    }, {
      "left" : "for (String arg : args)",
      "right" : "for (String arg : args)",
      "info" : "EnhancedForStatement[14060-14530]:EnhancedForStatement[14060-14530]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14084-14530]:Block[14084-14530]"
    }, {
      "left" : "Matcher matcher = argPattern.matcher(arg);",
      "right" : "Matcher matcher = argPattern.matcher(arg);",
      "info" : "VariableDeclarationStatement[14092-14134]:VariableDeclarationStatement[14092-14134]"
    }, {
      "left" : "if (matcher.matches())",
      "right" : "if (matcher.matches())",
      "info" : "IfStatement[14141-14524]:IfStatement[14141-14524]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14164-14477]:Block[14164-14477]"
    }, {
      "left" : "processedArgs.add(matcher.group(1));",
      "right" : "processedArgs.add(matcher.group(1));",
      "info" : "ExpressionStatement[14174-14210]:ExpressionStatement[14174-14210]"
    }, {
      "left" : "String value = matcher.group(2);",
      "right" : "String value = matcher.group(2);",
      "info" : "VariableDeclarationStatement[14220-14252]:VariableDeclarationStatement[14220-14252]"
    }, {
      "left" : "Matcher quotesMatcher = quotesPattern.matcher(value);",
      "right" : "Matcher quotesMatcher = quotesPattern.matcher(value);",
      "info" : "VariableDeclarationStatement[14261-14314]:VariableDeclarationStatement[14261-14314]"
    }, {
      "left" : "if (quotesMatcher.matches())",
      "right" : "if (quotesMatcher.matches())",
      "info" : "IfStatement[14323-14469]:IfStatement[14323-14469]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14352-14416]:Block[14352-14416]"
    }, {
      "left" : "processedArgs.add(quotesMatcher.group(1));",
      "right" : "processedArgs.add(quotesMatcher.group(1));",
      "info" : "ExpressionStatement[14364-14406]:ExpressionStatement[14364-14406]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14422-14469]:Block[14422-14469]"
    }, {
      "left" : "processedArgs.add(value);",
      "right" : "processedArgs.add(value);",
      "info" : "ExpressionStatement[14434-14459]:ExpressionStatement[14434-14459]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14483-14524]:Block[14483-14524]"
    }, {
      "left" : "processedArgs.add(arg);",
      "right" : "processedArgs.add(arg);",
      "info" : "ExpressionStatement[14493-14516]:ExpressionStatement[14493-14516]"
    }, {
      "left" : "CmdLineParser parser = new CmdLineParser(flags);",
      "right" : "CmdLineParser parser = new CmdLineParser(flags);",
      "info" : "VariableDeclarationStatement[14536-14584]:VariableDeclarationStatement[14536-14584]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[14589-14783]:TryStatement[14589-14783]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14593-14668]:Block[14593-14668]"
    }, {
      "left" : "parser.parseArgument(processedArgs.toArray(new String[] {}));",
      "right" : "parser.parseArgument(processedArgs.toArray(new String[] {}));",
      "info" : "ExpressionStatement[14601-14662]:ExpressionStatement[14601-14662]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14696-14783]:Block[14696-14783]"
    }, {
      "left" : "err.println(e.getMessage());",
      "right" : "err.println(e.getMessage());",
      "info" : "ExpressionStatement[14704-14732]:ExpressionStatement[14704-14732]"
    }, {
      "left" : "parser.printUsage(err);",
      "right" : "parser.printUsage(err);",
      "info" : "ExpressionStatement[14739-14762]:ExpressionStatement[14739-14762]"
    }, {
      "left" : "throw e;",
      "right" : "throw e;",
      "info" : "ThrowStatement[14769-14777]:ThrowStatement[14769-14777]"
    }, {
      "left" : "getCommandLineConfig()\n        .setPrintTree(flags.print_tree)\n        .setComputePhaseOrdering(flags.compute_phase_ordering)\n        .setPrintAst(flags.print_ast)\n        .setPrintPassGraph(flags.print_pass_graph)\n        .setJscompDevMode(flags.jscomp_dev_mode)\n        .setLoggingLevel(flags.logging_level)\n        .setExterns(flags.externs)\n        .setJs(flags.js)\n        .setJsOutputFile(flags.js_output_file)\n        .setModule(flags.module)\n        .setVariableMapInputFile(flags.variable_map_input_file)\n        .setPropertyMapInputFile(flags.property_map_input_file)\n        .setVariableMapOutputFile(flags.variable_map_output_file)\n        .setCreateNameMapFiles(flags.create_name_map_files)\n        .setPropertyMapOutputFile(flags.property_map_output_file)\n        .setThirdParty(flags.third_party)\n        .setSummaryDetailLevel(flags.summary_detail_level)\n        .setOutputWrapper(flags.output_wrapper)\n        .setOutputWrapperMarker(flags.output_wrapper_marker)\n        .setModuleWrapper(flags.module_wrapper)\n        .setModuleOutputPathPrefix(flags.module_output_path_prefix)\n        .setCreateSourceMap(flags.create_source_map)\n        .setJscompError(flags.jscomp_error)\n        .setJscompWarning(flags.jscomp_warning)\n        .setJscompOff(flags.jscomp_off)\n        .setDefine(flags.define)\n        .setCharset(flags.charset);",
      "right" : "getCommandLineConfig()\n        .setPrintTree(flags.print_tree)\n        .setComputePhaseOrdering(flags.compute_phase_ordering)\n        .setPrintAst(flags.print_ast)\n        .setPrintPassGraph(flags.print_pass_graph)\n        .setJscompDevMode(flags.jscomp_dev_mode)\n        .setLoggingLevel(flags.logging_level)\n        .setExterns(flags.externs)\n        .setJs(flags.js)\n        .setJsOutputFile(flags.js_output_file)\n        .setModule(flags.module)\n        .setVariableMapInputFile(flags.variable_map_input_file)\n        .setPropertyMapInputFile(flags.property_map_input_file)\n        .setVariableMapOutputFile(flags.variable_map_output_file)\n        .setCreateNameMapFiles(flags.create_name_map_files)\n        .setPropertyMapOutputFile(flags.property_map_output_file)\n        .setThirdParty(flags.third_party)\n        .setSummaryDetailLevel(flags.summary_detail_level)\n        .setOutputWrapper(flags.output_wrapper)\n        .setOutputWrapperMarker(flags.output_wrapper_marker)\n        .setModuleWrapper(flags.module_wrapper)\n        .setModuleOutputPathPrefix(flags.module_output_path_prefix)\n        .setCreateSourceMap(flags.create_source_map)\n        .setJscompError(flags.jscomp_error)\n        .setJscompWarning(flags.jscomp_warning)\n        .setJscompOff(flags.jscomp_off)\n        .setDefine(flags.define)\n        .setCharset(flags.charset);",
      "info" : "ExpressionStatement[14788-16137]:ExpressionStatement[14788-16137]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16199-16865]:Block[16199-16841]"
    }, {
      "left" : "CompilerOptions options = new CompilerOptions();",
      "right" : "CompilerOptions options = new CompilerOptions();",
      "info" : "VariableDeclarationStatement[16205-16253]:VariableDeclarationStatement[16205-16253]"
    }, {
      "left" : "options.setCodingConvention(new ClosureCodingConvention());",
      "right" : "options.setCodingConvention(new ClosureCodingConvention());",
      "info" : "ExpressionStatement[16258-16317]:ExpressionStatement[16258-16317]"
    }, {
      "left" : "CompilationLevel level = flags.compilation_level;",
      "right" : "CompilationLevel level = flags.compilation_level;",
      "info" : "VariableDeclarationStatement[16322-16371]:VariableDeclarationStatement[16322-16371]"
    }, {
      "left" : "level.setOptionsForCompilationLevel(options);",
      "right" : "level.setOptionsForCompilationLevel(options);",
      "info" : "ExpressionStatement[16376-16421]:ExpressionStatement[16376-16421]"
    }, {
      "left" : "if (flags.debug)",
      "right" : "if (flags.debug)",
      "info" : "IfStatement[16426-16507]:IfStatement[16426-16507]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16443-16507]:Block[16443-16507]"
    }, {
      "left" : "level.setDebugOptionsForCompilationLevel(options);",
      "right" : "level.setDebugOptionsForCompilationLevel(options);",
      "info" : "ExpressionStatement[16451-16501]:ExpressionStatement[16451-16501]"
    }, {
      "left" : "WarningLevel wLevel = flags.warning_level;",
      "right" : "WarningLevel wLevel = flags.warning_level;",
      "info" : "VariableDeclarationStatement[16513-16555]:VariableDeclarationStatement[16513-16555]"
    }, {
      "left" : "wLevel.setOptionsForWarningLevel(options);",
      "right" : "wLevel.setOptionsForWarningLevel(options);",
      "info" : "ExpressionStatement[16560-16602]:ExpressionStatement[16560-16602]"
    }, {
      "left" : "for (FormattingOption formattingOption : flags.formatting)",
      "right" : "for (FormattingOption formattingOption : flags.formatting)",
      "info" : "EnhancedForStatement[16607-16721]:EnhancedForStatement[16607-16721]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16666-16721]:Block[16666-16721]"
    }, {
      "left" : "formattingOption.applyToOptions(options);",
      "right" : "formattingOption.applyToOptions(options);",
      "info" : "ExpressionStatement[16674-16715]:ExpressionStatement[16674-16715]"
    }, {
      "left" : "initOptionsFromFlags(options);",
      "right" : "initOptionsFromFlags(options);",
      "info" : "ExpressionStatement[16811-16841]:ExpressionStatement[16787-16817]"
    }, {
      "left" : "return options;",
      "right" : "return options;",
      "info" : "ReturnStatement[16846-16861]:ReturnStatement[16822-16837]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16917-16970]:Block[16893-16946]"
    }, {
      "left" : "return new Compiler(getErrorPrintStream());",
      "right" : "return new Compiler(getErrorPrintStream());",
      "info" : "ReturnStatement[16923-16966]:ReturnStatement[16899-16942]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17076-17350]:Block[17052-17326]"
    }, {
      "left" : "List<JSSourceFile> externs = super.createExterns();",
      "right" : "List<JSSourceFile> externs = super.createExterns();",
      "info" : "VariableDeclarationStatement[17082-17133]:VariableDeclarationStatement[17058-17109]"
    }, {
      "left" : "if (!flags.use_only_custom_externs)",
      "right" : "if (!flags.use_only_custom_externs)",
      "info" : "IfStatement[17138-17346]:IfStatement[17114-17322]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17174-17311]:Block[17150-17287]"
    }, {
      "left" : "List<JSSourceFile> defaultExterns = getDefaultExterns();",
      "right" : "List<JSSourceFile> defaultExterns = getDefaultExterns();",
      "info" : "VariableDeclarationStatement[17182-17238]:VariableDeclarationStatement[17158-17214]"
    }, {
      "left" : "defaultExterns.addAll(externs);",
      "right" : "defaultExterns.addAll(externs);",
      "info" : "ExpressionStatement[17245-17276]:ExpressionStatement[17221-17252]"
    }, {
      "left" : "return defaultExterns;",
      "right" : "return defaultExterns;",
      "info" : "ReturnStatement[17283-17305]:ReturnStatement[17259-17281]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17317-17346]:Block[17293-17322]"
    }, {
      "left" : "return externs;",
      "right" : "return externs;",
      "info" : "ReturnStatement[17325-17340]:ReturnStatement[17301-17316]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17485-17952]:Block[17461-17928]"
    }, {
      "left" : "InputStream input = CommandLineRunner.class.getResourceAsStream(\n        \"/externs.zip\");",
      "right" : "InputStream input = CommandLineRunner.class.getResourceAsStream(\n        \"/externs.zip\");",
      "info" : "VariableDeclarationStatement[17491-17580]:VariableDeclarationStatement[17467-17556]"
    }, {
      "left" : "ZipInputStream zip = new ZipInputStream(input);",
      "right" : "ZipInputStream zip = new ZipInputStream(input);",
      "info" : "VariableDeclarationStatement[17585-17632]:VariableDeclarationStatement[17561-17608]"
    }, {
      "left" : "List<JSSourceFile> externs = Lists.newLinkedList();",
      "right" : "List<JSSourceFile> externs = Lists.newLinkedList();",
      "info" : "VariableDeclarationStatement[17637-17688]:VariableDeclarationStatement[17613-17664]"
    }, {
      "left" : "for (ZipEntry entry = null; (entry = zip.getNextEntry()) != null)",
      "right" : "for (ZipEntry entry = null; (entry = zip.getNextEntry()) != null)",
      "info" : "ForStatement[17693-17928]:ForStatement[17669-17904]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17761-17928]:Block[17737-17904]"
    }, {
      "left" : "LimitInputStream entryStream = new LimitInputStream(zip, entry.getSize());",
      "right" : "LimitInputStream entryStream = new LimitInputStream(zip, entry.getSize());",
      "info" : "VariableDeclarationStatement[17769-17843]:VariableDeclarationStatement[17745-17819]"
    }, {
      "left" : "externs.add(JSSourceFile.fromInputStream(entry.getName(), entryStream));",
      "right" : "externs.add(JSSourceFile.fromInputStream(entry.getName(), entryStream));",
      "info" : "ExpressionStatement[17850-17922]:ExpressionStatement[17826-17898]"
    }, {
      "left" : "return externs;",
      "right" : "return externs;",
      "info" : "ReturnStatement[17933-17948]:ReturnStatement[17909-17924]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18071-18193]:Block[18047-18169]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[18077-18189]:TryStatement[18053-18165]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18081-18131]:Block[18057-18107]"
    }, {
      "left" : "(new CommandLineRunner(args)).run();",
      "right" : "(new CommandLineRunner(args)).run();",
      "info" : "ExpressionStatement[18089-18125]:ExpressionStatement[18065-18101]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18159-18189]:Block[18135-18165]"
    }, {
      "left" : "System.exit(-1);",
      "right" : "System.exit(-1);",
      "info" : "ExpressionStatement[18167-18183]:ExpressionStatement[18143-18159]"
    } ]
  },
  "interFileMappings" : { }
}