{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "HashBiMapTest",
      "right" : "HashBiMapTest",
      "info" : "TypeDeclaration[1284-4757]:TypeDeclaration[1341-7798]"
    }, {
      "left" : "HashBiMapGenerator",
      "right" : "HashBiMapGenerator",
      "info" : "TypeDeclaration[1432-1805]:TypeDeclaration[1489-1862]"
    }, {
      "left" : "protected BiMap<String, String> create(Entry<String, String>[] entries)",
      "right" : "protected BiMap<String, String> create(Entry<String, String>[] entries)",
      "info" : "MethodDeclaration[1516-1801]:MethodDeclaration[1573-1858]"
    }, {
      "left" : "public static Test suite()",
      "right" : "public static Test suite()",
      "info" : "MethodDeclaration[1809-2396]:MethodDeclaration[1866-2494]"
    }, {
      "left" : "public void testMapConstructor()",
      "right" : "public void testMapConstructor()",
      "info" : "MethodDeclaration[2400-2775]:MethodDeclaration[2498-2873]"
    }, {
      "left" : "private static final int N = 1000;",
      "right" : "private static final int N = 1000;",
      "info" : "FieldDeclaration[2779-2813]:FieldDeclaration[2877-2911]"
    }, {
      "left" : "public void testBashIt() throws Exception",
      "right" : "public void testBashIt() throws Exception",
      "info" : "MethodDeclaration[2817-3866]:MethodDeclaration[2915-3964]"
    }, {
      "left" : "public void testBiMapEntrySetIteratorRemove()",
      "right" : "public void testBiMapEntrySetIteratorRemove()",
      "info" : "MethodDeclaration[3870-4444]:MethodDeclaration[3968-4542]"
    }, {
      "left" : "public void testInverseEntrySetValue()",
      "right" : "public void testInverseEntrySetValue()",
      "info" : "MethodDeclaration[4448-4755]:MethodDeclaration[7489-7796]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1602-1801]:Block[1659-1858]"
    }, {
      "left" : "BiMap<String, String> result = HashBiMap.create();",
      "right" : "BiMap<String, String> result = HashBiMap.create();",
      "info" : "VariableDeclarationStatement[1610-1660]:VariableDeclarationStatement[1667-1717]"
    }, {
      "left" : "for (Entry<String, String> entry : entries)",
      "right" : "for (Entry<String, String> entry : entries)",
      "info" : "EnhancedForStatement[1667-1774]:EnhancedForStatement[1724-1831]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1711-1774]:Block[1768-1831]"
    }, {
      "left" : "result.put(entry.getKey(), entry.getValue());",
      "right" : "result.put(entry.getKey(), entry.getValue());",
      "info" : "ExpressionStatement[1721-1766]:ExpressionStatement[1778-1823]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[1781-1795]:ReturnStatement[1838-1852]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1864-2396]:Block[1921-2494]"
    }, {
      "left" : "TestSuite suite = new TestSuite();",
      "right" : "TestSuite suite = new TestSuite();",
      "info" : "VariableDeclarationStatement[1870-1904]:VariableDeclarationStatement[1927-1961]"
    }, {
      "left" : "suite.addTest(BiMapTestSuiteBuilder.using(new HashBiMapGenerator())\n      .named(\"HashBiMap\")\n      .withFeatures(CollectionSize.ANY,\n          CollectionFeature.SERIALIZABLE,\n          CollectionFeature.SUPPORTS_ITERATOR_REMOVE,\n          MapFeature.ALLOWS_NULL_KEYS,\n          MapFeature.ALLOWS_NULL_VALUES,\n          MapFeature.ALLOWS_ANY_NULL_QUERIES,\n          MapFeature.GENERAL_PURPOSE)\n      .createTestSuite());",
      "right" : "suite.addTest(BiMapTestSuiteBuilder.using(new HashBiMapGenerator())\n      .named(\"HashBiMap\")\n      .withFeatures(CollectionSize.ANY,\n          CollectionFeature.SERIALIZABLE,\n          CollectionFeature.SUPPORTS_ITERATOR_REMOVE,\n          CollectionFeature.KNOWN_ORDER,\n          MapFeature.ALLOWS_NULL_KEYS,\n          MapFeature.ALLOWS_NULL_VALUES,\n          MapFeature.ALLOWS_ANY_NULL_QUERIES,\n          MapFeature.GENERAL_PURPOSE)\n      .createTestSuite());",
      "info" : "ExpressionStatement[1909-2329]:ExpressionStatement[1966-2427]"
    }, {
      "left" : "suite.addTestSuite(HashBiMapTest.class);",
      "right" : "suite.addTestSuite(HashBiMapTest.class);",
      "info" : "ExpressionStatement[2334-2374]:ExpressionStatement[2432-2472]"
    }, {
      "left" : "return suite;",
      "right" : "return suite;",
      "info" : "ReturnStatement[2379-2392]:ReturnStatement[2477-2490]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2433-2775]:Block[2531-2873]"
    }, {
      "left" : "Map<String, String> map = ImmutableMap.of(\n        \"canada\", \"dollar\",\n        \"chile\", \"peso\",\n        \"switzerland\", \"franc\");",
      "right" : "Map<String, String> map = ImmutableMap.of(\n        \"canada\", \"dollar\",\n        \"chile\", \"peso\",\n        \"switzerland\", \"franc\");",
      "info" : "VariableDeclarationStatement[2474-2602]:VariableDeclarationStatement[2572-2700]"
    }, {
      "left" : "HashBiMap<String, String> bimap = HashBiMap.create(map);",
      "right" : "HashBiMap<String, String> bimap = HashBiMap.create(map);",
      "info" : "VariableDeclarationStatement[2607-2663]:VariableDeclarationStatement[2705-2761]"
    }, {
      "left" : "assertEquals(\"dollar\", bimap.get(\"canada\"));",
      "right" : "assertEquals(\"dollar\", bimap.get(\"canada\"));",
      "info" : "ExpressionStatement[2668-2712]:ExpressionStatement[2766-2810]"
    }, {
      "left" : "assertEquals(\"canada\", bimap.inverse().get(\"dollar\"));",
      "right" : "assertEquals(\"canada\", bimap.inverse().get(\"dollar\"));",
      "info" : "ExpressionStatement[2717-2771]:ExpressionStatement[2815-2869]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2859-3866]:Block[2957-3964]"
    }, {
      "left" : "BiMap<Integer, Integer> bimap = HashBiMap.create(N);",
      "right" : "BiMap<Integer, Integer> bimap = HashBiMap.create(N);",
      "info" : "VariableDeclarationStatement[2865-2917]:VariableDeclarationStatement[2963-3015]"
    }, {
      "left" : "BiMap<Integer, Integer> inverse = bimap.inverse();",
      "right" : "BiMap<Integer, Integer> inverse = bimap.inverse();",
      "info" : "VariableDeclarationStatement[2922-2972]:VariableDeclarationStatement[3020-3070]"
    }, {
      "left" : "for (int i = 0; i < N; i++)",
      "right" : "for (int i = 0; i < N; i++)",
      "info" : "ForStatement[2978-3060]:ForStatement[3076-3158]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3006-3060]:Block[3104-3158]"
    }, {
      "left" : "assertNull(bimap.put(2 * i, 2 * i + 1));",
      "right" : "assertNull(bimap.put(2 * i, 2 * i + 1));",
      "info" : "ExpressionStatement[3014-3054]:ExpressionStatement[3112-3152]"
    }, {
      "left" : "for (int i = 0; i < N; i++)",
      "right" : "for (int i = 0; i < N; i++)",
      "info" : "ForStatement[3065-3155]:ForStatement[3163-3253]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3093-3155]:Block[3191-3253]"
    }, {
      "left" : "assertEquals(2 * i + 1, (int) bimap.get(2 * i));",
      "right" : "assertEquals(2 * i + 1, (int) bimap.get(2 * i));",
      "info" : "ExpressionStatement[3101-3149]:ExpressionStatement[3199-3247]"
    }, {
      "left" : "for (int i = 0; i < N; i++)",
      "right" : "for (int i = 0; i < N; i++)",
      "info" : "ForStatement[3160-3252]:ForStatement[3258-3350]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3188-3252]:Block[3286-3350]"
    }, {
      "left" : "assertEquals(2 * i, (int) inverse.get(2 * i + 1));",
      "right" : "assertEquals(2 * i, (int) inverse.get(2 * i + 1));",
      "info" : "ExpressionStatement[3196-3246]:ExpressionStatement[3294-3344]"
    }, {
      "left" : "for (int i = 0; i < N; i++)",
      "right" : "for (int i = 0; i < N; i++)",
      "info" : "ForStatement[3257-3400]:ForStatement[3355-3498]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3285-3400]:Block[3383-3498]"
    }, {
      "left" : "int oldValue = bimap.get(2 * i);",
      "right" : "int oldValue = bimap.get(2 * i);",
      "info" : "VariableDeclarationStatement[3293-3325]:VariableDeclarationStatement[3391-3423]"
    }, {
      "left" : "assertEquals(2 * i + 1, (int) bimap.put(2 * i, oldValue - 2));",
      "right" : "assertEquals(2 * i + 1, (int) bimap.put(2 * i, oldValue - 2));",
      "info" : "ExpressionStatement[3332-3394]:ExpressionStatement[3430-3492]"
    }, {
      "left" : "for (int i = 0; i < N; i++)",
      "right" : "for (int i = 0; i < N; i++)",
      "info" : "ForStatement[3405-3495]:ForStatement[3503-3593]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3433-3495]:Block[3531-3593]"
    }, {
      "left" : "assertEquals(2 * i - 1, (int) bimap.get(2 * i));",
      "right" : "assertEquals(2 * i - 1, (int) bimap.get(2 * i));",
      "info" : "ExpressionStatement[3441-3489]:ExpressionStatement[3539-3587]"
    }, {
      "left" : "for (int i = 0; i < N; i++)",
      "right" : "for (int i = 0; i < N; i++)",
      "info" : "ForStatement[3500-3592]:ForStatement[3598-3690]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3528-3592]:Block[3626-3690]"
    }, {
      "left" : "assertEquals(2 * i, (int) inverse.get(2 * i - 1));",
      "right" : "assertEquals(2 * i, (int) inverse.get(2 * i - 1));",
      "info" : "ExpressionStatement[3536-3586]:ExpressionStatement[3634-3684]"
    }, {
      "left" : "Set<Entry<Integer, Integer>> entries = bimap.entrySet();",
      "right" : "Set<Entry<Integer, Integer>> entries = bimap.entrySet();",
      "info" : "VariableDeclarationStatement[3597-3653]:VariableDeclarationStatement[3695-3751]"
    }, {
      "left" : "for (Entry<Integer, Integer> entry : entries)",
      "right" : "for (Entry<Integer, Integer> entry : entries)",
      "info" : "EnhancedForStatement[3658-3759]:EnhancedForStatement[3756-3857]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3704-3759]:Block[3802-3857]"
    }, {
      "left" : "entry.setValue(entry.getValue() + 2 * N);",
      "right" : "entry.setValue(entry.getValue() + 2 * N);",
      "info" : "ExpressionStatement[3712-3753]:ExpressionStatement[3810-3851]"
    }, {
      "left" : "for (int i = 0; i < N; i++)",
      "right" : "for (int i = 0; i < N; i++)",
      "info" : "ForStatement[3764-3862]:ForStatement[3862-3960]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3792-3862]:Block[3890-3960]"
    }, {
      "left" : "assertEquals(2 * N + 2 * i - 1, (int) bimap.get(2 * i));",
      "right" : "assertEquals(2 * N + 2 * i - 1, (int) bimap.get(2 * i));",
      "info" : "ExpressionStatement[3800-3856]:ExpressionStatement[3898-3954]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3916-4444]:Block[4014-4542]"
    }, {
      "left" : "BiMap<Integer, String> map = HashBiMap.create();",
      "right" : "BiMap<Integer, String> map = HashBiMap.create();",
      "info" : "VariableDeclarationStatement[3922-3970]:VariableDeclarationStatement[4020-4068]"
    }, {
      "left" : "map.put(1, \"one\");",
      "right" : "map.put(1, \"one\");",
      "info" : "ExpressionStatement[3975-3993]:ExpressionStatement[4073-4091]"
    }, {
      "left" : "Set<Map.Entry<Integer, String>> entries = map.entrySet();",
      "right" : "Set<Map.Entry<Integer, String>> entries = map.entrySet();",
      "info" : "VariableDeclarationStatement[3998-4055]:VariableDeclarationStatement[4096-4153]"
    }, {
      "left" : "Iterator<Map.Entry<Integer, String>> iterator = entries.iterator();",
      "right" : "Iterator<Map.Entry<Integer, String>> iterator = entries.iterator();",
      "info" : "VariableDeclarationStatement[4060-4127]:VariableDeclarationStatement[4158-4225]"
    }, {
      "left" : "Map.Entry<Integer, String> entry = iterator.next();",
      "right" : "Map.Entry<Integer, String> entry = iterator.next();",
      "info" : "VariableDeclarationStatement[4132-4183]:VariableDeclarationStatement[4230-4281]"
    }, {
      "left" : "entry.setValue(\"two\");",
      "right" : "entry.setValue(\"two\");",
      "info" : "ExpressionStatement[4188-4210]:ExpressionStatement[4286-4308]"
    }, {
      "left" : "assertEquals(\"two\", map.get(1));",
      "right" : "assertEquals(\"two\", map.get(1));",
      "info" : "ExpressionStatement[4261-4293]:ExpressionStatement[4359-4391]"
    }, {
      "left" : "assertEquals(Integer.valueOf(1), map.inverse().get(\"two\"));",
      "right" : "assertEquals(Integer.valueOf(1), map.inverse().get(\"two\"));",
      "info" : "ExpressionStatement[4298-4357]:ExpressionStatement[4396-4455]"
    }, {
      "left" : "iterator.remove();",
      "right" : "iterator.remove();",
      "info" : "ExpressionStatement[4362-4380]:ExpressionStatement[4460-4478]"
    }, {
      "left" : "assertTrue(map.isEmpty());",
      "right" : "assertTrue(map.isEmpty());",
      "info" : "ExpressionStatement[4414-4440]:ExpressionStatement[4512-4538]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4487-4755]:Block[7528-7796]"
    }, {
      "left" : "BiMap<Integer, String> map = HashBiMap.create();",
      "right" : "BiMap<Integer, String> map = HashBiMap.create();",
      "info" : "VariableDeclarationStatement[4493-4541]:VariableDeclarationStatement[7534-7582]"
    }, {
      "left" : "map.put(1, \"one\");",
      "right" : "map.put(1, \"one\");",
      "info" : "ExpressionStatement[4546-4564]:ExpressionStatement[7587-7605]"
    }, {
      "left" : "Entry<String, Integer> inverseEntry = Iterables.getOnlyElement(map.inverse().entrySet());",
      "right" : "Entry<String, Integer> inverseEntry = Iterables.getOnlyElement(map.inverse().entrySet());",
      "info" : "VariableDeclarationStatement[4569-4658]:VariableDeclarationStatement[7610-7699]"
    }, {
      "left" : "inverseEntry.setValue(2);",
      "right" : "inverseEntry.setValue(2);",
      "info" : "ExpressionStatement[4663-4688]:ExpressionStatement[7704-7729]"
    }, {
      "left" : "assertEquals(Integer.valueOf(2), inverseEntry.getValue());",
      "right" : "assertEquals(Integer.valueOf(2), inverseEntry.getValue());",
      "info" : "ExpressionStatement[4693-4751]:ExpressionStatement[7734-7792]"
    } ]
  },
  "interFileMappings" : { }
}