{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "enum : TokeniserState",
      "right" : "enum : TokeniserState",
      "info" : "EnumDeclaration[27-61788]:EnumDeclaration[27-61822]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[220-971]:MethodDeclaration[220-971]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[1044-1297]:MethodDeclaration[1044-1297]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[1374-2137]:MethodDeclaration[1374-2137]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[2186-2441]:MethodDeclaration[2186-2441]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[2471-3108]:MethodDeclaration[2471-3108]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[3141-3781]:MethodDeclaration[3141-3781]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[3813-4327]:MethodDeclaration[3813-4327]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[4383-5206]:MethodDeclaration[4383-5206]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[5239-5781]:MethodDeclaration[5239-5781]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[5879-7021]:MethodDeclaration[5879-7021]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[7090-7835]:MethodDeclaration[7090-7835]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[7874-8318]:MethodDeclaration[7874-8318]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[8357-9654]:MethodDeclaration[8357-9654]"
    }, {
      "left" : "private void anythingElse(Tokeniser t, CharacterReader r)",
      "right" : "private void anythingElse(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[9664-9819]:MethodDeclaration[9664-9819]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[9861-10145]:MethodDeclaration[9861-10145]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[10185-10471]:MethodDeclaration[10185-10471]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[10511-11642]:MethodDeclaration[10511-11642]"
    }, {
      "left" : "private void anythingElse(Tokeniser t, CharacterReader r)",
      "right" : "private void anythingElse(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[11652-11808]:MethodDeclaration[11652-11808]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[11853-12389]:MethodDeclaration[11853-12389]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[12432-12725]:MethodDeclaration[12432-12725]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[12768-13915]:MethodDeclaration[12768-13915]"
    }, {
      "left" : "private void anythingElse(Tokeniser t, CharacterReader r)",
      "right" : "private void anythingElse(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[13925-14084]:MethodDeclaration[13925-14084]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[14128-14385]:MethodDeclaration[14128-14385]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[14433-14690]:MethodDeclaration[14433-14690]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[14730-15547]:MethodDeclaration[14730-15547]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[15591-16420]:MethodDeclaration[15591-16420]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[16468-17366]:MethodDeclaration[16468-17366]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[17418-17986]:MethodDeclaration[17418-17986]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[18036-18479]:MethodDeclaration[18036-18479]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[18529-19707]:MethodDeclaration[18529-19707]"
    }, {
      "left" : "private void anythingElse(Tokeniser t, CharacterReader r)",
      "right" : "private void anythingElse(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[19725-19891]:MethodDeclaration[19725-19891]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[19941-20855]:MethodDeclaration[19941-20855]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[20901-21774]:MethodDeclaration[20901-21774]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[21824-22699]:MethodDeclaration[21824-22699]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[22753-23691]:MethodDeclaration[22753-23691]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[23749-24057]:MethodDeclaration[23749-24057]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[24105-25025]:MethodDeclaration[24105-25025]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[25096-26504]:MethodDeclaration[25096-26504]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[26578-27972]:MethodDeclaration[26578-27972]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[28013-29500]:MethodDeclaration[28013-29500]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[29543-31139]:MethodDeclaration[29543-31139]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[31189-32266]:MethodDeclaration[31189-32266]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[32316-33396]:MethodDeclaration[32316-33396]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[33442-35060]:MethodDeclaration[33442-35060]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[35172-36037]:MethodDeclaration[35172-36037]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[36079-36637]:MethodDeclaration[36079-36637]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[36672-37129]:MethodDeclaration[36672-37163]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[37173-37999]:MethodDeclaration[37207-38033]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[38034-38936]:MethodDeclaration[38068-38970]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[38975-39877]:MethodDeclaration[39009-39911]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[39907-40617]:MethodDeclaration[39941-40651]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[40654-41402]:MethodDeclaration[40688-41436]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[41435-42539]:MethodDeclaration[41469-42573]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[42576-43526]:MethodDeclaration[42610-43560]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[43556-44287]:MethodDeclaration[43590-44321]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[44327-45451]:MethodDeclaration[44361-45485]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[45485-46629]:MethodDeclaration[45519-46663]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[46668-47591]:MethodDeclaration[46702-47625]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[47639-49044]:MethodDeclaration[47673-49078]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[49096-50366]:MethodDeclaration[49130-50400]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[50425-51391]:MethodDeclaration[50459-51425]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[51450-52417]:MethodDeclaration[51484-52451]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[52468-53764]:MethodDeclaration[52502-53798]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[53827-55047]:MethodDeclaration[53861-55081]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[55095-56468]:MethodDeclaration[55129-56502]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[56520-57790]:MethodDeclaration[56554-57824]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[57849-58815]:MethodDeclaration[57883-58849]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[58874-59841]:MethodDeclaration[58908-59875]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[59892-60696]:MethodDeclaration[59926-60730]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[60731-61218]:MethodDeclaration[60765-61252]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[61253-61445]:MethodDeclaration[61287-61479]"
    }, {
      "left" : "abstract void read(Tokeniser t, CharacterReader r);",
      "right" : "abstract void read(Tokeniser t, CharacterReader r);",
      "info" : "MethodDeclaration[61459-61510]:MethodDeclaration[61493-61544]"
    }, {
      "left" : "private static final char nullChar = '\\u0000';",
      "right" : "private static final char nullChar = '\\u0000';",
      "info" : "FieldDeclaration[61516-61562]:FieldDeclaration[61550-61596]"
    }, {
      "left" : "private static final char replacementChar = Tokeniser.replacementChar;",
      "right" : "private static final char replacementChar = Tokeniser.replacementChar;",
      "info" : "FieldDeclaration[61567-61637]:FieldDeclaration[61601-61671]"
    }, {
      "left" : "private static final String replacementStr = String.valueOf(Tokeniser.replacementChar);",
      "right" : "private static final String replacementStr = String.valueOf(Tokeniser.replacementChar);",
      "info" : "FieldDeclaration[61642-61729]:FieldDeclaration[61676-61763]"
    }, {
      "left" : "private static final char eof = CharacterReader.EOF;",
      "right" : "private static final char eof = CharacterReader.EOF;",
      "info" : "FieldDeclaration[61734-61786]:FieldDeclaration[61768-61820]"
    } ],
    "mappings" : [
 {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[220-224]:PrimitiveType[220-224]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[225-229]:SimpleName[225-229]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[230-241]:SingleVariableDeclaration[230-241]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[243-260]:SingleVariableDeclaration[243-260]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[262-971]:Block[262-971]"
    }, {
      "left" : "switch (r.current()) {\n                case '&':\n                    t.advanceTransition(CharacterReferenceInData);\n                    break;\n                case '<':\n                    t.advanceTransition(TagOpen);\n                    break;\n                case nullChar:\n                    t.error(this); // NOT replacement character (oddly?)\n                    t.emit(r.consume());\n                    break;\n                case eof:\n                    t.emit(new Token.EOF());\n                    break;\n                default:\n                    String data = r.consumeToAny('&', '<', nullChar);\n                    t.emit(data);\n                    break;\n            }",
      "right" : "switch (r.current()) {\n                case '&':\n                    t.advanceTransition(CharacterReferenceInData);\n                    break;\n                case '<':\n                    t.advanceTransition(TagOpen);\n                    break;\n                case nullChar:\n                    t.error(this); // NOT replacement character (oddly?)\n                    t.emit(r.consume());\n                    break;\n                case eof:\n                    t.emit(new Token.EOF());\n                    break;\n                default:\n                    String data = r.consumeToAny('&', '<', nullChar);\n                    t.emit(data);\n                    break;\n            }",
      "info" : "SwitchStatement[276-961]:SwitchStatement[276-961]"
    }, {
      "left" : "case '&':",
      "right" : "case '&':",
      "info" : "SwitchCase[315-324]:SwitchCase[315-324]"
    }, {
      "left" : "t.advanceTransition(CharacterReferenceInData);",
      "right" : "t.advanceTransition(CharacterReferenceInData);",
      "info" : "ExpressionStatement[345-391]:ExpressionStatement[345-391]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[412-418]:BreakStatement[412-418]"
    }, {
      "left" : "case '<':",
      "right" : "case '<':",
      "info" : "SwitchCase[435-444]:SwitchCase[435-444]"
    }, {
      "left" : "t.advanceTransition(TagOpen);",
      "right" : "t.advanceTransition(TagOpen);",
      "info" : "ExpressionStatement[465-494]:ExpressionStatement[465-494]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[515-521]:BreakStatement[515-521]"
    }, {
      "left" : "case nullChar:",
      "right" : "case nullChar:",
      "info" : "SwitchCase[538-552]:SwitchCase[538-552]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[573-587]:ExpressionStatement[573-587]"
    }, {
      "left" : "t.emit(r.consume());",
      "right" : "t.emit(r.consume());",
      "info" : "ExpressionStatement[646-666]:ExpressionStatement[646-666]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[687-693]:BreakStatement[687-693]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[710-719]:SwitchCase[710-719]"
    }, {
      "left" : "t.emit(new Token.EOF());",
      "right" : "t.emit(new Token.EOF());",
      "info" : "ExpressionStatement[740-764]:ExpressionStatement[740-764]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[785-791]:BreakStatement[785-791]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[808-816]:SwitchCase[808-816]"
    }, {
      "left" : "String data = r.consumeToAny('&', '<', nullChar);",
      "right" : "String data = r.consumeToAny('&', '<', nullChar);",
      "info" : "VariableDeclarationStatement[837-886]:VariableDeclarationStatement[837-886]"
    }, {
      "left" : "t.emit(data);",
      "right" : "t.emit(data);",
      "info" : "ExpressionStatement[907-920]:ExpressionStatement[907-920]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[941-947]:BreakStatement[941-947]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[1044-1048]:PrimitiveType[1044-1048]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[1049-1053]:SimpleName[1049-1053]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[1054-1065]:SingleVariableDeclaration[1054-1065]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[1067-1084]:SingleVariableDeclaration[1067-1084]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1086-1297]:Block[1086-1297]"
    }, {
      "left" : "Character c = t.consumeCharacterReference(null, false);",
      "right" : "Character c = t.consumeCharacterReference(null, false);",
      "info" : "VariableDeclarationStatement[1100-1155]:VariableDeclarationStatement[1100-1155]"
    }, {
      "left" : "if (c == null)",
      "right" : "if (c == null)",
      "info" : "IfStatement[1168-1255]:IfStatement[1168-1255]"
    }, {
      "left" : "t.emit('&');",
      "right" : "t.emit('&');",
      "info" : "ExpressionStatement[1199-1211]:ExpressionStatement[1199-1211]"
    }, {
      "left" : "t.emit(c);",
      "right" : "t.emit(c);",
      "info" : "ExpressionStatement[1245-1255]:ExpressionStatement[1245-1255]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[1268-1287]:ExpressionStatement[1268-1287]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[1374-1378]:PrimitiveType[1374-1378]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[1379-1383]:SimpleName[1379-1383]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[1384-1395]:SingleVariableDeclaration[1384-1395]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[1397-1414]:SingleVariableDeclaration[1397-1414]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1416-2137]:Block[1416-2137]"
    }, {
      "left" : "switch (r.current()) {\n                case '&':\n                    t.advanceTransition(CharacterReferenceInRcdata);\n                    break;\n                case '<':\n                    t.advanceTransition(RcdataLessthanSign);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    r.advance();\n                    t.emit(replacementChar);\n                    break;\n                case eof:\n                    t.emit(new Token.EOF());\n                    break;\n                default:\n                    String data = r.consumeToAny('&', '<', nullChar);\n                    t.emit(data);\n                    break;\n            }",
      "right" : "switch (r.current()) {\n                case '&':\n                    t.advanceTransition(CharacterReferenceInRcdata);\n                    break;\n                case '<':\n                    t.advanceTransition(RcdataLessthanSign);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    r.advance();\n                    t.emit(replacementChar);\n                    break;\n                case eof:\n                    t.emit(new Token.EOF());\n                    break;\n                default:\n                    String data = r.consumeToAny('&', '<', nullChar);\n                    t.emit(data);\n                    break;\n            }",
      "info" : "SwitchStatement[1430-2127]:SwitchStatement[1430-2127]"
    }, {
      "left" : "case '&':",
      "right" : "case '&':",
      "info" : "SwitchCase[1469-1478]:SwitchCase[1469-1478]"
    }, {
      "left" : "t.advanceTransition(CharacterReferenceInRcdata);",
      "right" : "t.advanceTransition(CharacterReferenceInRcdata);",
      "info" : "ExpressionStatement[1499-1547]:ExpressionStatement[1499-1547]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[1568-1574]:BreakStatement[1568-1574]"
    }, {
      "left" : "case '<':",
      "right" : "case '<':",
      "info" : "SwitchCase[1591-1600]:SwitchCase[1591-1600]"
    }, {
      "left" : "t.advanceTransition(RcdataLessthanSign);",
      "right" : "t.advanceTransition(RcdataLessthanSign);",
      "info" : "ExpressionStatement[1621-1661]:ExpressionStatement[1621-1661]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[1682-1688]:BreakStatement[1682-1688]"
    }, {
      "left" : "case nullChar:",
      "right" : "case nullChar:",
      "info" : "SwitchCase[1705-1719]:SwitchCase[1705-1719]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[1740-1754]:ExpressionStatement[1740-1754]"
    }, {
      "left" : "r.advance();",
      "right" : "r.advance();",
      "info" : "ExpressionStatement[1775-1787]:ExpressionStatement[1775-1787]"
    }, {
      "left" : "t.emit(replacementChar);",
      "right" : "t.emit(replacementChar);",
      "info" : "ExpressionStatement[1808-1832]:ExpressionStatement[1808-1832]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[1853-1859]:BreakStatement[1853-1859]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[1876-1885]:SwitchCase[1876-1885]"
    }, {
      "left" : "t.emit(new Token.EOF());",
      "right" : "t.emit(new Token.EOF());",
      "info" : "ExpressionStatement[1906-1930]:ExpressionStatement[1906-1930]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[1951-1957]:BreakStatement[1951-1957]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[1974-1982]:SwitchCase[1974-1982]"
    }, {
      "left" : "String data = r.consumeToAny('&', '<', nullChar);",
      "right" : "String data = r.consumeToAny('&', '<', nullChar);",
      "info" : "VariableDeclarationStatement[2003-2052]:VariableDeclarationStatement[2003-2052]"
    }, {
      "left" : "t.emit(data);",
      "right" : "t.emit(data);",
      "info" : "ExpressionStatement[2073-2086]:ExpressionStatement[2073-2086]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[2107-2113]:BreakStatement[2107-2113]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[2186-2190]:PrimitiveType[2186-2190]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[2191-2195]:SimpleName[2191-2195]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[2196-2207]:SingleVariableDeclaration[2196-2207]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[2209-2226]:SingleVariableDeclaration[2209-2226]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2228-2441]:Block[2228-2441]"
    }, {
      "left" : "Character c = t.consumeCharacterReference(null, false);",
      "right" : "Character c = t.consumeCharacterReference(null, false);",
      "info" : "VariableDeclarationStatement[2242-2297]:VariableDeclarationStatement[2242-2297]"
    }, {
      "left" : "if (c == null)",
      "right" : "if (c == null)",
      "info" : "IfStatement[2310-2397]:IfStatement[2310-2397]"
    }, {
      "left" : "t.emit('&');",
      "right" : "t.emit('&');",
      "info" : "ExpressionStatement[2341-2353]:ExpressionStatement[2341-2353]"
    }, {
      "left" : "t.emit(c);",
      "right" : "t.emit(c);",
      "info" : "ExpressionStatement[2387-2397]:ExpressionStatement[2387-2397]"
    }, {
      "left" : "t.transition(Rcdata);",
      "right" : "t.transition(Rcdata);",
      "info" : "ExpressionStatement[2410-2431]:ExpressionStatement[2410-2431]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[2471-2475]:PrimitiveType[2471-2475]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[2476-2480]:SimpleName[2476-2480]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[2481-2492]:SingleVariableDeclaration[2481-2492]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[2494-2511]:SingleVariableDeclaration[2494-2511]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2513-3108]:Block[2513-3108]"
    }, {
      "left" : "switch (r.current()) {\n                case '<':\n                    t.advanceTransition(RawtextLessthanSign);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    r.advance();\n                    t.emit(replacementChar);\n                    break;\n                case eof:\n                    t.emit(new Token.EOF());\n                    break;\n                default:\n                    String data = r.consumeToAny('<', nullChar);\n                    t.emit(data);\n                    break;\n            }",
      "right" : "switch (r.current()) {\n                case '<':\n                    t.advanceTransition(RawtextLessthanSign);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    r.advance();\n                    t.emit(replacementChar);\n                    break;\n                case eof:\n                    t.emit(new Token.EOF());\n                    break;\n                default:\n                    String data = r.consumeToAny('<', nullChar);\n                    t.emit(data);\n                    break;\n            }",
      "info" : "SwitchStatement[2527-3098]:SwitchStatement[2527-3098]"
    }, {
      "left" : "case '<':",
      "right" : "case '<':",
      "info" : "SwitchCase[2566-2575]:SwitchCase[2566-2575]"
    }, {
      "left" : "t.advanceTransition(RawtextLessthanSign);",
      "right" : "t.advanceTransition(RawtextLessthanSign);",
      "info" : "ExpressionStatement[2596-2637]:ExpressionStatement[2596-2637]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[2658-2664]:BreakStatement[2658-2664]"
    }, {
      "left" : "case nullChar:",
      "right" : "case nullChar:",
      "info" : "SwitchCase[2681-2695]:SwitchCase[2681-2695]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[2716-2730]:ExpressionStatement[2716-2730]"
    }, {
      "left" : "r.advance();",
      "right" : "r.advance();",
      "info" : "ExpressionStatement[2751-2763]:ExpressionStatement[2751-2763]"
    }, {
      "left" : "t.emit(replacementChar);",
      "right" : "t.emit(replacementChar);",
      "info" : "ExpressionStatement[2784-2808]:ExpressionStatement[2784-2808]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[2829-2835]:BreakStatement[2829-2835]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[2852-2861]:SwitchCase[2852-2861]"
    }, {
      "left" : "t.emit(new Token.EOF());",
      "right" : "t.emit(new Token.EOF());",
      "info" : "ExpressionStatement[2882-2906]:ExpressionStatement[2882-2906]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[2927-2933]:BreakStatement[2927-2933]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[2950-2958]:SwitchCase[2950-2958]"
    }, {
      "left" : "String data = r.consumeToAny('<', nullChar);",
      "right" : "String data = r.consumeToAny('<', nullChar);",
      "info" : "VariableDeclarationStatement[2979-3023]:VariableDeclarationStatement[2979-3023]"
    }, {
      "left" : "t.emit(data);",
      "right" : "t.emit(data);",
      "info" : "ExpressionStatement[3044-3057]:ExpressionStatement[3044-3057]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[3078-3084]:BreakStatement[3078-3084]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[3141-3145]:PrimitiveType[3141-3145]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[3146-3150]:SimpleName[3146-3150]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[3151-3162]:SingleVariableDeclaration[3151-3162]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[3164-3181]:SingleVariableDeclaration[3164-3181]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3183-3781]:Block[3183-3781]"
    }, {
      "left" : "switch (r.current()) {\n                case '<':\n                    t.advanceTransition(ScriptDataLessthanSign);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    r.advance();\n                    t.emit(replacementChar);\n                    break;\n                case eof:\n                    t.emit(new Token.EOF());\n                    break;\n                default:\n                    String data = r.consumeToAny('<', nullChar);\n                    t.emit(data);\n                    break;\n            }",
      "right" : "switch (r.current()) {\n                case '<':\n                    t.advanceTransition(ScriptDataLessthanSign);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    r.advance();\n                    t.emit(replacementChar);\n                    break;\n                case eof:\n                    t.emit(new Token.EOF());\n                    break;\n                default:\n                    String data = r.consumeToAny('<', nullChar);\n                    t.emit(data);\n                    break;\n            }",
      "info" : "SwitchStatement[3197-3771]:SwitchStatement[3197-3771]"
    }, {
      "left" : "case '<':",
      "right" : "case '<':",
      "info" : "SwitchCase[3236-3245]:SwitchCase[3236-3245]"
    }, {
      "left" : "t.advanceTransition(ScriptDataLessthanSign);",
      "right" : "t.advanceTransition(ScriptDataLessthanSign);",
      "info" : "ExpressionStatement[3266-3310]:ExpressionStatement[3266-3310]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[3331-3337]:BreakStatement[3331-3337]"
    }, {
      "left" : "case nullChar:",
      "right" : "case nullChar:",
      "info" : "SwitchCase[3354-3368]:SwitchCase[3354-3368]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[3389-3403]:ExpressionStatement[3389-3403]"
    }, {
      "left" : "r.advance();",
      "right" : "r.advance();",
      "info" : "ExpressionStatement[3424-3436]:ExpressionStatement[3424-3436]"
    }, {
      "left" : "t.emit(replacementChar);",
      "right" : "t.emit(replacementChar);",
      "info" : "ExpressionStatement[3457-3481]:ExpressionStatement[3457-3481]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[3502-3508]:BreakStatement[3502-3508]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[3525-3534]:SwitchCase[3525-3534]"
    }, {
      "left" : "t.emit(new Token.EOF());",
      "right" : "t.emit(new Token.EOF());",
      "info" : "ExpressionStatement[3555-3579]:ExpressionStatement[3555-3579]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[3600-3606]:BreakStatement[3600-3606]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[3623-3631]:SwitchCase[3623-3631]"
    }, {
      "left" : "String data = r.consumeToAny('<', nullChar);",
      "right" : "String data = r.consumeToAny('<', nullChar);",
      "info" : "VariableDeclarationStatement[3652-3696]:VariableDeclarationStatement[3652-3696]"
    }, {
      "left" : "t.emit(data);",
      "right" : "t.emit(data);",
      "info" : "ExpressionStatement[3717-3730]:ExpressionStatement[3717-3730]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[3751-3757]:BreakStatement[3751-3757]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[3813-3817]:PrimitiveType[3813-3817]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[3818-3822]:SimpleName[3818-3822]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[3823-3834]:SingleVariableDeclaration[3823-3834]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[3836-3853]:SingleVariableDeclaration[3836-3853]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3855-4327]:Block[3855-4327]"
    }, {
      "left" : "switch (r.current()) {\n                case nullChar:\n                    t.error(this);\n                    r.advance();\n                    t.emit(replacementChar);\n                    break;\n                case eof:\n                    t.emit(new Token.EOF());\n                    break;\n                default:\n                    String data = r.consumeTo(nullChar);\n                    t.emit(data);\n                    break;\n            }",
      "right" : "switch (r.current()) {\n                case nullChar:\n                    t.error(this);\n                    r.advance();\n                    t.emit(replacementChar);\n                    break;\n                case eof:\n                    t.emit(new Token.EOF());\n                    break;\n                default:\n                    String data = r.consumeTo(nullChar);\n                    t.emit(data);\n                    break;\n            }",
      "info" : "SwitchStatement[3869-4317]:SwitchStatement[3869-4317]"
    }, {
      "left" : "case nullChar:",
      "right" : "case nullChar:",
      "info" : "SwitchCase[3908-3922]:SwitchCase[3908-3922]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[3943-3957]:ExpressionStatement[3943-3957]"
    }, {
      "left" : "r.advance();",
      "right" : "r.advance();",
      "info" : "ExpressionStatement[3978-3990]:ExpressionStatement[3978-3990]"
    }, {
      "left" : "t.emit(replacementChar);",
      "right" : "t.emit(replacementChar);",
      "info" : "ExpressionStatement[4011-4035]:ExpressionStatement[4011-4035]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[4056-4062]:BreakStatement[4056-4062]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[4079-4088]:SwitchCase[4079-4088]"
    }, {
      "left" : "t.emit(new Token.EOF());",
      "right" : "t.emit(new Token.EOF());",
      "info" : "ExpressionStatement[4109-4133]:ExpressionStatement[4109-4133]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[4154-4160]:BreakStatement[4154-4160]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[4177-4185]:SwitchCase[4177-4185]"
    }, {
      "left" : "String data = r.consumeTo(nullChar);",
      "right" : "String data = r.consumeTo(nullChar);",
      "info" : "VariableDeclarationStatement[4206-4242]:VariableDeclarationStatement[4206-4242]"
    }, {
      "left" : "t.emit(data);",
      "right" : "t.emit(data);",
      "info" : "ExpressionStatement[4263-4276]:ExpressionStatement[4263-4276]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[4297-4303]:BreakStatement[4297-4303]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[4383-4387]:PrimitiveType[4383-4387]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[4388-4392]:SimpleName[4388-4392]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[4393-4404]:SingleVariableDeclaration[4393-4404]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[4406-4423]:SingleVariableDeclaration[4406-4423]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4425-5206]:Block[4425-5206]"
    }, {
      "left" : "switch (r.current()) {\n                case '!':\n                    t.advanceTransition(MarkupDeclarationOpen);\n                    break;\n                case '/':\n                    t.advanceTransition(EndTagOpen);\n                    break;\n                case '?':\n                    t.advanceTransition(BogusComment);\n                    break;\n                default:\n                    if (r.matchesLetter()) {\n                        t.createTagPending(true);\n                        t.transition(TagName);\n                    } else {\n                        t.error(this);\n                        t.emit('<'); // char that got us here\n                        t.transition(Data);\n                    }\n                    break;\n            }",
      "right" : "switch (r.current()) {\n                case '!':\n                    t.advanceTransition(MarkupDeclarationOpen);\n                    break;\n                case '/':\n                    t.advanceTransition(EndTagOpen);\n                    break;\n                case '?':\n                    t.advanceTransition(BogusComment);\n                    break;\n                default:\n                    if (r.matchesLetter()) {\n                        t.createTagPending(true);\n                        t.transition(TagName);\n                    } else {\n                        t.error(this);\n                        t.emit('<'); // char that got us here\n                        t.transition(Data);\n                    }\n                    break;\n            }",
      "info" : "SwitchStatement[4439-5196]:SwitchStatement[4439-5196]"
    }, {
      "left" : "case '!':",
      "right" : "case '!':",
      "info" : "SwitchCase[4478-4487]:SwitchCase[4478-4487]"
    }, {
      "left" : "t.advanceTransition(MarkupDeclarationOpen);",
      "right" : "t.advanceTransition(MarkupDeclarationOpen);",
      "info" : "ExpressionStatement[4508-4551]:ExpressionStatement[4508-4551]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[4572-4578]:BreakStatement[4572-4578]"
    }, {
      "left" : "case '/':",
      "right" : "case '/':",
      "info" : "SwitchCase[4595-4604]:SwitchCase[4595-4604]"
    }, {
      "left" : "t.advanceTransition(EndTagOpen);",
      "right" : "t.advanceTransition(EndTagOpen);",
      "info" : "ExpressionStatement[4625-4657]:ExpressionStatement[4625-4657]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[4678-4684]:BreakStatement[4678-4684]"
    }, {
      "left" : "case '?':",
      "right" : "case '?':",
      "info" : "SwitchCase[4701-4710]:SwitchCase[4701-4710]"
    }, {
      "left" : "t.advanceTransition(BogusComment);",
      "right" : "t.advanceTransition(BogusComment);",
      "info" : "ExpressionStatement[4731-4765]:ExpressionStatement[4731-4765]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[4786-4792]:BreakStatement[4786-4792]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[4809-4817]:SwitchCase[4809-4817]"
    }, {
      "left" : "if (r.matchesLetter())",
      "right" : "if (r.matchesLetter())",
      "info" : "IfStatement[4838-5155]:IfStatement[4838-5155]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4861-4981]:Block[4861-4981]"
    }, {
      "left" : "t.createTagPending(true);",
      "right" : "t.createTagPending(true);",
      "info" : "ExpressionStatement[4887-4912]:ExpressionStatement[4887-4912]"
    }, {
      "left" : "t.transition(TagName);",
      "right" : "t.transition(TagName);",
      "info" : "ExpressionStatement[4937-4959]:ExpressionStatement[4937-4959]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4987-5155]:Block[4987-5155]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[5013-5027]:ExpressionStatement[5013-5027]"
    }, {
      "left" : "t.emit('<');",
      "right" : "t.emit('<');",
      "info" : "ExpressionStatement[5052-5064]:ExpressionStatement[5052-5064]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[5114-5133]:ExpressionStatement[5114-5133]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[5176-5182]:BreakStatement[5176-5182]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[5239-5243]:PrimitiveType[5239-5243]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[5244-5248]:SimpleName[5244-5248]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[5249-5260]:SingleVariableDeclaration[5249-5260]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[5262-5279]:SingleVariableDeclaration[5262-5279]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5281-5781]:Block[5281-5781]"
    }, {
      "left" : "if (r.isEmpty())",
      "right" : "if (r.isEmpty())",
      "info" : "IfStatement[5295-5771]:IfStatement[5295-5771]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5312-5427]:Block[5312-5427]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[5330-5347]:ExpressionStatement[5330-5347]"
    }, {
      "left" : "t.emit(\"</\");",
      "right" : "t.emit(\"</\");",
      "info" : "ExpressionStatement[5364-5377]:ExpressionStatement[5364-5377]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[5394-5413]:ExpressionStatement[5394-5413]"
    }, {
      "left" : "if (r.matchesLetter())",
      "right" : "if (r.matchesLetter())",
      "info" : "IfStatement[5433-5771]:IfStatement[5433-5771]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5456-5553]:Block[5456-5553]"
    }, {
      "left" : "t.createTagPending(false);",
      "right" : "t.createTagPending(false);",
      "info" : "ExpressionStatement[5474-5500]:ExpressionStatement[5474-5500]"
    }, {
      "left" : "t.transition(TagName);",
      "right" : "t.transition(TagName);",
      "info" : "ExpressionStatement[5517-5539]:ExpressionStatement[5517-5539]"
    }, {
      "left" : "if (r.matches('>'))",
      "right" : "if (r.matches('>'))",
      "info" : "IfStatement[5559-5771]:IfStatement[5559-5771]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5579-5668]:Block[5579-5668]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[5597-5611]:ExpressionStatement[5597-5611]"
    }, {
      "left" : "t.advanceTransition(Data);",
      "right" : "t.advanceTransition(Data);",
      "info" : "ExpressionStatement[5628-5654]:ExpressionStatement[5628-5654]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5674-5771]:Block[5674-5771]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[5692-5706]:ExpressionStatement[5692-5706]"
    }, {
      "left" : "t.advanceTransition(BogusComment);",
      "right" : "t.advanceTransition(BogusComment);",
      "info" : "ExpressionStatement[5723-5757]:ExpressionStatement[5723-5757]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[5879-5883]:PrimitiveType[5879-5883]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[5884-5888]:SimpleName[5884-5888]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[5889-5900]:SingleVariableDeclaration[5889-5900]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[5902-5919]:SingleVariableDeclaration[5902-5919]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5921-7021]:Block[5921-7021]"
    }, {
      "left" : "String tagName = r.consumeToAny('\\t', '\\n', '\\r', '\\f', ' ', '/', '>', nullChar).toLowerCase();",
      "right" : "String tagName = r.consumeToAny('\\t', '\\n', '\\r', '\\f', ' ', '/', '>', nullChar).toLowerCase();",
      "info" : "VariableDeclarationStatement[6025-6120]:VariableDeclarationStatement[6025-6120]"
    }, {
      "left" : "t.tagPending.appendTagName(tagName);",
      "right" : "t.tagPending.appendTagName(tagName);",
      "info" : "ExpressionStatement[6133-6169]:ExpressionStatement[6133-6169]"
    }, {
      "left" : "switch (r.consume()) {\n                case '\\t':\n                case '\\n':\n                case '\\r':\n                case '\\f':\n                case ' ':\n                    t.transition(BeforeAttributeName);\n                    break;\n                case '/':\n                    t.transition(SelfClosingStartTag);\n                    break;\n                case '>':\n                    t.emitTagPending();\n                    t.transition(Data);\n                    break;\n                case nullChar: // replacement\n                    t.tagPending.appendTagName(replacementStr);\n                    break;\n                case eof: // should emit pending tag?\n                    t.eofError(this);\n                    t.transition(Data);\n                // no default, as covered with above consumeToAny\n            }",
      "right" : "switch (r.consume()) {\n                case '\\t':\n                case '\\n':\n                case '\\r':\n                case '\\f':\n                case ' ':\n                    t.transition(BeforeAttributeName);\n                    break;\n                case '/':\n                    t.transition(SelfClosingStartTag);\n                    break;\n                case '>':\n                    t.emitTagPending();\n                    t.transition(Data);\n                    break;\n                case nullChar: // replacement\n                    t.tagPending.appendTagName(replacementStr);\n                    break;\n                case eof: // should emit pending tag?\n                    t.eofError(this);\n                    t.transition(Data);\n                // no default, as covered with above consumeToAny\n            }",
      "info" : "SwitchStatement[6183-7011]:SwitchStatement[6183-7011]"
    }, {
      "left" : "case '\\t':",
      "right" : "case '\\t':",
      "info" : "SwitchCase[6222-6232]:SwitchCase[6222-6232]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[6249-6259]:SwitchCase[6249-6259]"
    }, {
      "left" : "case '\\r':",
      "right" : "case '\\r':",
      "info" : "SwitchCase[6276-6286]:SwitchCase[6276-6286]"
    }, {
      "left" : "case '\\f':",
      "right" : "case '\\f':",
      "info" : "SwitchCase[6303-6313]:SwitchCase[6303-6313]"
    }, {
      "left" : "case ' ':",
      "right" : "case ' ':",
      "info" : "SwitchCase[6330-6339]:SwitchCase[6330-6339]"
    }, {
      "left" : "t.transition(BeforeAttributeName);",
      "right" : "t.transition(BeforeAttributeName);",
      "info" : "ExpressionStatement[6360-6394]:ExpressionStatement[6360-6394]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[6415-6421]:BreakStatement[6415-6421]"
    }, {
      "left" : "case '/':",
      "right" : "case '/':",
      "info" : "SwitchCase[6438-6447]:SwitchCase[6438-6447]"
    }, {
      "left" : "t.transition(SelfClosingStartTag);",
      "right" : "t.transition(SelfClosingStartTag);",
      "info" : "ExpressionStatement[6468-6502]:ExpressionStatement[6468-6502]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[6523-6529]:BreakStatement[6523-6529]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[6546-6555]:SwitchCase[6546-6555]"
    }, {
      "left" : "t.emitTagPending();",
      "right" : "t.emitTagPending();",
      "info" : "ExpressionStatement[6576-6595]:ExpressionStatement[6576-6595]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[6616-6635]:ExpressionStatement[6616-6635]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[6656-6662]:BreakStatement[6656-6662]"
    }, {
      "left" : "case nullChar:",
      "right" : "case nullChar:",
      "info" : "SwitchCase[6679-6693]:SwitchCase[6679-6693]"
    }, {
      "left" : "t.tagPending.appendTagName(replacementStr);",
      "right" : "t.tagPending.appendTagName(replacementStr);",
      "info" : "ExpressionStatement[6729-6772]:ExpressionStatement[6729-6772]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[6793-6799]:BreakStatement[6793-6799]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[6816-6825]:SwitchCase[6816-6825]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[6874-6891]:ExpressionStatement[6874-6891]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[6912-6931]:ExpressionStatement[6912-6931]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7090-7094]:PrimitiveType[7090-7094]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[7095-7099]:SimpleName[7095-7099]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[7100-7111]:SingleVariableDeclaration[7100-7111]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[7113-7130]:SingleVariableDeclaration[7113-7130]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7132-7835]:Block[7132-7835]"
    }, {
      "left" : "if (r.matches('/'))",
      "right" : "if (r.matches('/'))",
      "info" : "IfStatement[7146-7825]:IfStatement[7146-7825]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7166-7274]:Block[7166-7274]"
    }, {
      "left" : "t.createTempBuffer();",
      "right" : "t.createTempBuffer();",
      "info" : "ExpressionStatement[7184-7205]:ExpressionStatement[7184-7205]"
    }, {
      "left" : "t.advanceTransition(RCDATAEndTagOpen);",
      "right" : "t.advanceTransition(RCDATAEndTagOpen);",
      "info" : "ExpressionStatement[7222-7260]:ExpressionStatement[7222-7260]"
    }, {
      "left" : "if (r.matchesLetter() && !r.containsIgnoreCase(\"</\" + t.appropriateEndTagName()))",
      "right" : "if (r.matchesLetter() && !r.containsIgnoreCase(\"</\" + t.appropriateEndTagName()))",
      "info" : "IfStatement[7280-7825]:IfStatement[7280-7825]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7362-7737]:Block[7362-7737]"
    }, {
      "left" : "t.tagPending = new Token.EndTag(t.appropriateEndTagName());",
      "right" : "t.tagPending = new Token.EndTag(t.appropriateEndTagName());",
      "info" : "ExpressionStatement[7549-7608]:ExpressionStatement[7549-7608]"
    }, {
      "left" : "t.emitTagPending();",
      "right" : "t.emitTagPending();",
      "info" : "ExpressionStatement[7625-7644]:ExpressionStatement[7625-7644]"
    }, {
      "left" : "r.unconsume();",
      "right" : "r.unconsume();",
      "info" : "ExpressionStatement[7661-7675]:ExpressionStatement[7661-7675]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[7704-7723]:ExpressionStatement[7704-7723]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7743-7825]:Block[7743-7825]"
    }, {
      "left" : "t.emit(\"<\");",
      "right" : "t.emit(\"<\");",
      "info" : "ExpressionStatement[7761-7773]:ExpressionStatement[7761-7773]"
    }, {
      "left" : "t.transition(Rcdata);",
      "right" : "t.transition(Rcdata);",
      "info" : "ExpressionStatement[7790-7811]:ExpressionStatement[7790-7811]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7874-7878]:PrimitiveType[7874-7878]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[7879-7883]:SimpleName[7879-7883]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[7884-7895]:SingleVariableDeclaration[7884-7895]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[7897-7914]:SingleVariableDeclaration[7897-7914]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7916-8318]:Block[7916-8318]"
    }, {
      "left" : "if (r.matchesLetter())",
      "right" : "if (r.matchesLetter())",
      "info" : "IfStatement[7930-8308]:IfStatement[7930-8308]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7953-8219]:Block[7953-8219]"
    }, {
      "left" : "t.createTagPending(false);",
      "right" : "t.createTagPending(false);",
      "info" : "ExpressionStatement[7971-7997]:ExpressionStatement[7971-7997]"
    }, {
      "left" : "t.tagPending.appendTagName(Character.toLowerCase(r.current()));",
      "right" : "t.tagPending.appendTagName(Character.toLowerCase(r.current()));",
      "info" : "ExpressionStatement[8014-8077]:ExpressionStatement[8014-8077]"
    }, {
      "left" : "t.dataBuffer.append(Character.toLowerCase(r.current()));",
      "right" : "t.dataBuffer.append(Character.toLowerCase(r.current()));",
      "info" : "ExpressionStatement[8094-8150]:ExpressionStatement[8094-8150]"
    }, {
      "left" : "t.advanceTransition(RCDATAEndTagName);",
      "right" : "t.advanceTransition(RCDATAEndTagName);",
      "info" : "ExpressionStatement[8167-8205]:ExpressionStatement[8167-8205]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8225-8308]:Block[8225-8308]"
    }, {
      "left" : "t.emit(\"</\");",
      "right" : "t.emit(\"</\");",
      "info" : "ExpressionStatement[8243-8256]:ExpressionStatement[8243-8256]"
    }, {
      "left" : "t.transition(Rcdata);",
      "right" : "t.transition(Rcdata);",
      "info" : "ExpressionStatement[8273-8294]:ExpressionStatement[8273-8294]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[8357-8361]:PrimitiveType[8357-8361]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[8362-8366]:SimpleName[8362-8366]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[8367-8378]:SingleVariableDeclaration[8367-8378]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[8380-8397]:SingleVariableDeclaration[8380-8397]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8399-9654]:Block[8399-9654]"
    }, {
      "left" : "if (r.matchesLetter())",
      "right" : "if (r.matchesLetter())",
      "info" : "IfStatement[8413-8639]:IfStatement[8413-8639]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8436-8639]:Block[8436-8639]"
    }, {
      "left" : "String name = r.consumeLetterSequence();",
      "right" : "String name = r.consumeLetterSequence();",
      "info" : "VariableDeclarationStatement[8454-8494]:VariableDeclarationStatement[8454-8494]"
    }, {
      "left" : "t.tagPending.appendTagName(name.toLowerCase());",
      "right" : "t.tagPending.appendTagName(name.toLowerCase());",
      "info" : "ExpressionStatement[8511-8558]:ExpressionStatement[8511-8558]"
    }, {
      "left" : "t.dataBuffer.append(name);",
      "right" : "t.dataBuffer.append(name);",
      "info" : "ExpressionStatement[8575-8601]:ExpressionStatement[8575-8601]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[8618-8625]:ReturnStatement[8618-8625]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[8653-8674]:VariableDeclarationStatement[8653-8674]"
    }, {
      "left" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\r':\n                case '\\f':\n                case ' ':\n                    if (t.isAppropriateEndTagToken())\n                        t.transition(BeforeAttributeName);\n                    else\n                        anythingElse(t, r);\n                    break;\n                case '/':\n                    if (t.isAppropriateEndTagToken())\n                        t.transition(SelfClosingStartTag);\n                    else\n                        anythingElse(t, r);\n                    break;\n                case '>':\n                    if (t.isAppropriateEndTagToken()) {\n                        t.emitTagPending();\n                        t.transition(Data);\n                    }\n                    else\n                        anythingElse(t, r);\n                    break;\n                default:\n                    anythingElse(t, r);\n            }",
      "right" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\r':\n                case '\\f':\n                case ' ':\n                    if (t.isAppropriateEndTagToken())\n                        t.transition(BeforeAttributeName);\n                    else\n                        anythingElse(t, r);\n                    break;\n                case '/':\n                    if (t.isAppropriateEndTagToken())\n                        t.transition(SelfClosingStartTag);\n                    else\n                        anythingElse(t, r);\n                    break;\n                case '>':\n                    if (t.isAppropriateEndTagToken()) {\n                        t.emitTagPending();\n                        t.transition(Data);\n                    }\n                    else\n                        anythingElse(t, r);\n                    break;\n                default:\n                    anythingElse(t, r);\n            }",
      "info" : "SwitchStatement[8687-9644]:SwitchStatement[8687-9644]"
    }, {
      "left" : "case '\\t':",
      "right" : "case '\\t':",
      "info" : "SwitchCase[8716-8726]:SwitchCase[8716-8726]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[8743-8753]:SwitchCase[8743-8753]"
    }, {
      "left" : "case '\\r':",
      "right" : "case '\\r':",
      "info" : "SwitchCase[8770-8780]:SwitchCase[8770-8780]"
    }, {
      "left" : "case '\\f':",
      "right" : "case '\\f':",
      "info" : "SwitchCase[8797-8807]:SwitchCase[8797-8807]"
    }, {
      "left" : "case ' ':",
      "right" : "case ' ':",
      "info" : "SwitchCase[8824-8833]:SwitchCase[8824-8833]"
    }, {
      "left" : "if (t.isAppropriateEndTagToken())",
      "right" : "if (t.isAppropriateEndTagToken())",
      "info" : "IfStatement[8854-9015]:IfStatement[8854-9015]"
    }, {
      "left" : "t.transition(BeforeAttributeName);",
      "right" : "t.transition(BeforeAttributeName);",
      "info" : "ExpressionStatement[8912-8946]:ExpressionStatement[8912-8946]"
    }, {
      "left" : "anythingElse(t, r);",
      "right" : "anythingElse(t, r);",
      "info" : "ExpressionStatement[8996-9015]:ExpressionStatement[8996-9015]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[9036-9042]:BreakStatement[9036-9042]"
    }, {
      "left" : "case '/':",
      "right" : "case '/':",
      "info" : "SwitchCase[9059-9068]:SwitchCase[9059-9068]"
    }, {
      "left" : "if (t.isAppropriateEndTagToken())",
      "right" : "if (t.isAppropriateEndTagToken())",
      "info" : "IfStatement[9089-9250]:IfStatement[9089-9250]"
    }, {
      "left" : "t.transition(SelfClosingStartTag);",
      "right" : "t.transition(SelfClosingStartTag);",
      "info" : "ExpressionStatement[9147-9181]:ExpressionStatement[9147-9181]"
    }, {
      "left" : "anythingElse(t, r);",
      "right" : "anythingElse(t, r);",
      "info" : "ExpressionStatement[9231-9250]:ExpressionStatement[9231-9250]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[9271-9277]:BreakStatement[9271-9277]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[9294-9303]:SwitchCase[9294-9303]"
    }, {
      "left" : "if (t.isAppropriateEndTagToken())",
      "right" : "if (t.isAppropriateEndTagToken())",
      "info" : "IfStatement[9324-9538]:IfStatement[9324-9538]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9358-9469]:Block[9358-9469]"
    }, {
      "left" : "t.emitTagPending();",
      "right" : "t.emitTagPending();",
      "info" : "ExpressionStatement[9384-9403]:ExpressionStatement[9384-9403]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[9428-9447]:ExpressionStatement[9428-9447]"
    }, {
      "left" : "anythingElse(t, r);",
      "right" : "anythingElse(t, r);",
      "info" : "ExpressionStatement[9519-9538]:ExpressionStatement[9519-9538]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[9559-9565]:BreakStatement[9559-9565]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[9582-9590]:SwitchCase[9582-9590]"
    }, {
      "left" : "anythingElse(t, r);",
      "right" : "anythingElse(t, r);",
      "info" : "ExpressionStatement[9611-9630]:ExpressionStatement[9611-9630]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[9664-9671]:Modifier[9664-9671]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[9672-9676]:PrimitiveType[9672-9676]"
    }, {
      "left" : "anythingElse",
      "right" : "anythingElse",
      "info" : "SimpleName[9677-9689]:SimpleName[9677-9689]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[9690-9701]:SingleVariableDeclaration[9690-9701]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[9703-9720]:SingleVariableDeclaration[9703-9720]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9722-9819]:Block[9722-9819]"
    }, {
      "left" : "t.emit(\"</\" + t.dataBuffer.toString());",
      "right" : "t.emit(\"</\" + t.dataBuffer.toString());",
      "info" : "ExpressionStatement[9736-9775]:ExpressionStatement[9736-9775]"
    }, {
      "left" : "t.transition(Rcdata);",
      "right" : "t.transition(Rcdata);",
      "info" : "ExpressionStatement[9788-9809]:ExpressionStatement[9788-9809]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[9861-9865]:PrimitiveType[9861-9865]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[9866-9870]:SimpleName[9866-9870]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[9871-9882]:SingleVariableDeclaration[9871-9882]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[9884-9901]:SingleVariableDeclaration[9884-9901]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9903-10145]:Block[9903-10145]"
    }, {
      "left" : "if (r.matches('/'))",
      "right" : "if (r.matches('/'))",
      "info" : "IfStatement[9917-10135]:IfStatement[9917-10135]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9937-10046]:Block[9937-10046]"
    }, {
      "left" : "t.createTempBuffer();",
      "right" : "t.createTempBuffer();",
      "info" : "ExpressionStatement[9955-9976]:ExpressionStatement[9955-9976]"
    }, {
      "left" : "t.advanceTransition(RawtextEndTagOpen);",
      "right" : "t.advanceTransition(RawtextEndTagOpen);",
      "info" : "ExpressionStatement[9993-10032]:ExpressionStatement[9993-10032]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10052-10135]:Block[10052-10135]"
    }, {
      "left" : "t.emit('<');",
      "right" : "t.emit('<');",
      "info" : "ExpressionStatement[10070-10082]:ExpressionStatement[10070-10082]"
    }, {
      "left" : "t.transition(Rawtext);",
      "right" : "t.transition(Rawtext);",
      "info" : "ExpressionStatement[10099-10121]:ExpressionStatement[10099-10121]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[10185-10189]:PrimitiveType[10185-10189]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[10190-10194]:SimpleName[10190-10194]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[10195-10206]:SingleVariableDeclaration[10195-10206]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[10208-10225]:SingleVariableDeclaration[10208-10225]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10227-10471]:Block[10227-10471]"
    }, {
      "left" : "if (r.matchesLetter())",
      "right" : "if (r.matchesLetter())",
      "info" : "IfStatement[10241-10461]:IfStatement[10241-10461]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10264-10371]:Block[10264-10371]"
    }, {
      "left" : "t.createTagPending(false);",
      "right" : "t.createTagPending(false);",
      "info" : "ExpressionStatement[10282-10308]:ExpressionStatement[10282-10308]"
    }, {
      "left" : "t.transition(RawtextEndTagName);",
      "right" : "t.transition(RawtextEndTagName);",
      "info" : "ExpressionStatement[10325-10357]:ExpressionStatement[10325-10357]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10377-10461]:Block[10377-10461]"
    }, {
      "left" : "t.emit(\"</\");",
      "right" : "t.emit(\"</\");",
      "info" : "ExpressionStatement[10395-10408]:ExpressionStatement[10395-10408]"
    }, {
      "left" : "t.transition(Rawtext);",
      "right" : "t.transition(Rawtext);",
      "info" : "ExpressionStatement[10425-10447]:ExpressionStatement[10425-10447]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[10511-10515]:PrimitiveType[10511-10515]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[10516-10520]:SimpleName[10516-10520]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[10521-10532]:SingleVariableDeclaration[10521-10532]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[10534-10551]:SingleVariableDeclaration[10534-10551]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10553-11642]:Block[10553-11642]"
    }, {
      "left" : "if (r.matchesLetter())",
      "right" : "if (r.matchesLetter())",
      "info" : "IfStatement[10567-10793]:IfStatement[10567-10793]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10590-10793]:Block[10590-10793]"
    }, {
      "left" : "String name = r.consumeLetterSequence();",
      "right" : "String name = r.consumeLetterSequence();",
      "info" : "VariableDeclarationStatement[10608-10648]:VariableDeclarationStatement[10608-10648]"
    }, {
      "left" : "t.tagPending.appendTagName(name.toLowerCase());",
      "right" : "t.tagPending.appendTagName(name.toLowerCase());",
      "info" : "ExpressionStatement[10665-10712]:ExpressionStatement[10665-10712]"
    }, {
      "left" : "t.dataBuffer.append(name);",
      "right" : "t.dataBuffer.append(name);",
      "info" : "ExpressionStatement[10729-10755]:ExpressionStatement[10729-10755]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[10772-10779]:ReturnStatement[10772-10779]"
    }, {
      "left" : "if (t.isAppropriateEndTagToken() && !r.isEmpty())",
      "right" : "if (t.isAppropriateEndTagToken() && !r.isEmpty())",
      "info" : "IfStatement[10807-11632]:IfStatement[10807-11632]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10857-11591]:Block[10857-11591]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[10875-10896]:VariableDeclarationStatement[10875-10896]"
    }, {
      "left" : "switch (c) {\n                    case '\\t':\n                    case '\\n':\n                    case '\\r':\n                    case '\\f':\n                    case ' ':\n                        t.transition(BeforeAttributeName);\n                        break;\n                    case '/':\n                        t.transition(SelfClosingStartTag);\n                        break;\n                    case '>':\n                        t.emitTagPending();\n                        t.transition(Data);\n                        break;\n                    default:\n                        t.dataBuffer.append(c);\n                        anythingElse(t, r);\n                }",
      "right" : "switch (c) {\n                    case '\\t':\n                    case '\\n':\n                    case '\\r':\n                    case '\\f':\n                    case ' ':\n                        t.transition(BeforeAttributeName);\n                        break;\n                    case '/':\n                        t.transition(SelfClosingStartTag);\n                        break;\n                    case '>':\n                        t.emitTagPending();\n                        t.transition(Data);\n                        break;\n                    default:\n                        t.dataBuffer.append(c);\n                        anythingElse(t, r);\n                }",
      "info" : "SwitchStatement[10913-11577]:SwitchStatement[10913-11577]"
    }, {
      "left" : "case '\\t':",
      "right" : "case '\\t':",
      "info" : "SwitchCase[10946-10956]:SwitchCase[10946-10956]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[10977-10987]:SwitchCase[10977-10987]"
    }, {
      "left" : "case '\\r':",
      "right" : "case '\\r':",
      "info" : "SwitchCase[11008-11018]:SwitchCase[11008-11018]"
    }, {
      "left" : "case '\\f':",
      "right" : "case '\\f':",
      "info" : "SwitchCase[11039-11049]:SwitchCase[11039-11049]"
    }, {
      "left" : "case ' ':",
      "right" : "case ' ':",
      "info" : "SwitchCase[11070-11079]:SwitchCase[11070-11079]"
    }, {
      "left" : "t.transition(BeforeAttributeName);",
      "right" : "t.transition(BeforeAttributeName);",
      "info" : "ExpressionStatement[11104-11138]:ExpressionStatement[11104-11138]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[11163-11169]:BreakStatement[11163-11169]"
    }, {
      "left" : "case '/':",
      "right" : "case '/':",
      "info" : "SwitchCase[11190-11199]:SwitchCase[11190-11199]"
    }, {
      "left" : "t.transition(SelfClosingStartTag);",
      "right" : "t.transition(SelfClosingStartTag);",
      "info" : "ExpressionStatement[11224-11258]:ExpressionStatement[11224-11258]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[11283-11289]:BreakStatement[11283-11289]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[11310-11319]:SwitchCase[11310-11319]"
    }, {
      "left" : "t.emitTagPending();",
      "right" : "t.emitTagPending();",
      "info" : "ExpressionStatement[11344-11363]:ExpressionStatement[11344-11363]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[11388-11407]:ExpressionStatement[11388-11407]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[11432-11438]:BreakStatement[11432-11438]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[11459-11467]:SwitchCase[11459-11467]"
    }, {
      "left" : "t.dataBuffer.append(c);",
      "right" : "t.dataBuffer.append(c);",
      "info" : "ExpressionStatement[11492-11515]:ExpressionStatement[11492-11515]"
    }, {
      "left" : "anythingElse(t, r);",
      "right" : "anythingElse(t, r);",
      "info" : "ExpressionStatement[11540-11559]:ExpressionStatement[11540-11559]"
    }, {
      "left" : "anythingElse(t, r);",
      "right" : "anythingElse(t, r);",
      "info" : "ExpressionStatement[11613-11632]:ExpressionStatement[11613-11632]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[11652-11659]:Modifier[11652-11659]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[11660-11664]:PrimitiveType[11660-11664]"
    }, {
      "left" : "anythingElse",
      "right" : "anythingElse",
      "info" : "SimpleName[11665-11677]:SimpleName[11665-11677]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[11678-11689]:SingleVariableDeclaration[11678-11689]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[11691-11708]:SingleVariableDeclaration[11691-11708]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11710-11808]:Block[11710-11808]"
    }, {
      "left" : "t.emit(\"</\" + t.dataBuffer.toString());",
      "right" : "t.emit(\"</\" + t.dataBuffer.toString());",
      "info" : "ExpressionStatement[11724-11763]:ExpressionStatement[11724-11763]"
    }, {
      "left" : "t.transition(Rawtext);",
      "right" : "t.transition(Rawtext);",
      "info" : "ExpressionStatement[11776-11798]:ExpressionStatement[11776-11798]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[11853-11857]:PrimitiveType[11853-11857]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[11858-11862]:SimpleName[11858-11862]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[11863-11874]:SingleVariableDeclaration[11863-11874]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[11876-11893]:SingleVariableDeclaration[11876-11893]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11895-12389]:Block[11895-12389]"
    }, {
      "left" : "switch (r.consume()) {\n                case '/':\n                    t.createTempBuffer();\n                    t.transition(ScriptDataEndTagOpen);\n                    break;\n                case '!':\n                    t.emit(\"<!\");\n                    t.transition(ScriptDataEscapeStart);\n                    break;\n                default:\n                    t.emit(\"<\");\n                    r.unconsume();\n                    t.transition(ScriptData);\n            }",
      "right" : "switch (r.consume()) {\n                case '/':\n                    t.createTempBuffer();\n                    t.transition(ScriptDataEndTagOpen);\n                    break;\n                case '!':\n                    t.emit(\"<!\");\n                    t.transition(ScriptDataEscapeStart);\n                    break;\n                default:\n                    t.emit(\"<\");\n                    r.unconsume();\n                    t.transition(ScriptData);\n            }",
      "info" : "SwitchStatement[11909-12379]:SwitchStatement[11909-12379]"
    }, {
      "left" : "case '/':",
      "right" : "case '/':",
      "info" : "SwitchCase[11948-11957]:SwitchCase[11948-11957]"
    }, {
      "left" : "t.createTempBuffer();",
      "right" : "t.createTempBuffer();",
      "info" : "ExpressionStatement[11978-11999]:ExpressionStatement[11978-11999]"
    }, {
      "left" : "t.transition(ScriptDataEndTagOpen);",
      "right" : "t.transition(ScriptDataEndTagOpen);",
      "info" : "ExpressionStatement[12020-12055]:ExpressionStatement[12020-12055]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[12076-12082]:BreakStatement[12076-12082]"
    }, {
      "left" : "case '!':",
      "right" : "case '!':",
      "info" : "SwitchCase[12099-12108]:SwitchCase[12099-12108]"
    }, {
      "left" : "t.emit(\"<!\");",
      "right" : "t.emit(\"<!\");",
      "info" : "ExpressionStatement[12129-12142]:ExpressionStatement[12129-12142]"
    }, {
      "left" : "t.transition(ScriptDataEscapeStart);",
      "right" : "t.transition(ScriptDataEscapeStart);",
      "info" : "ExpressionStatement[12163-12199]:ExpressionStatement[12163-12199]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[12220-12226]:BreakStatement[12220-12226]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[12243-12251]:SwitchCase[12243-12251]"
    }, {
      "left" : "t.emit(\"<\");",
      "right" : "t.emit(\"<\");",
      "info" : "ExpressionStatement[12272-12284]:ExpressionStatement[12272-12284]"
    }, {
      "left" : "r.unconsume();",
      "right" : "r.unconsume();",
      "info" : "ExpressionStatement[12305-12319]:ExpressionStatement[12305-12319]"
    }, {
      "left" : "t.transition(ScriptData);",
      "right" : "t.transition(ScriptData);",
      "info" : "ExpressionStatement[12340-12365]:ExpressionStatement[12340-12365]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[12432-12436]:PrimitiveType[12432-12436]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[12437-12441]:SimpleName[12437-12441]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[12442-12453]:SingleVariableDeclaration[12442-12453]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[12455-12472]:SingleVariableDeclaration[12455-12472]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12474-12725]:Block[12474-12725]"
    }, {
      "left" : "if (r.matchesLetter())",
      "right" : "if (r.matchesLetter())",
      "info" : "IfStatement[12488-12714]:IfStatement[12488-12714]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12511-12621]:Block[12511-12621]"
    }, {
      "left" : "t.createTagPending(false);",
      "right" : "t.createTagPending(false);",
      "info" : "ExpressionStatement[12529-12555]:ExpressionStatement[12529-12555]"
    }, {
      "left" : "t.transition(ScriptDataEndTagName);",
      "right" : "t.transition(ScriptDataEndTagName);",
      "info" : "ExpressionStatement[12572-12607]:ExpressionStatement[12572-12607]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12627-12714]:Block[12627-12714]"
    }, {
      "left" : "t.emit(\"</\");",
      "right" : "t.emit(\"</\");",
      "info" : "ExpressionStatement[12645-12658]:ExpressionStatement[12645-12658]"
    }, {
      "left" : "t.transition(ScriptData);",
      "right" : "t.transition(ScriptData);",
      "info" : "ExpressionStatement[12675-12700]:ExpressionStatement[12675-12700]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[12768-12772]:PrimitiveType[12768-12772]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[12773-12777]:SimpleName[12773-12777]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[12778-12789]:SingleVariableDeclaration[12778-12789]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[12791-12808]:SingleVariableDeclaration[12791-12808]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12810-13915]:Block[12810-13915]"
    }, {
      "left" : "if (r.matchesLetter())",
      "right" : "if (r.matchesLetter())",
      "info" : "IfStatement[12824-13050]:IfStatement[12824-13050]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12847-13050]:Block[12847-13050]"
    }, {
      "left" : "String name = r.consumeLetterSequence();",
      "right" : "String name = r.consumeLetterSequence();",
      "info" : "VariableDeclarationStatement[12865-12905]:VariableDeclarationStatement[12865-12905]"
    }, {
      "left" : "t.tagPending.appendTagName(name.toLowerCase());",
      "right" : "t.tagPending.appendTagName(name.toLowerCase());",
      "info" : "ExpressionStatement[12922-12969]:ExpressionStatement[12922-12969]"
    }, {
      "left" : "t.dataBuffer.append(name);",
      "right" : "t.dataBuffer.append(name);",
      "info" : "ExpressionStatement[12986-13012]:ExpressionStatement[12986-13012]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[13029-13036]:ReturnStatement[13029-13036]"
    }, {
      "left" : "if (t.isAppropriateEndTagToken() && !r.isEmpty())",
      "right" : "if (t.isAppropriateEndTagToken() && !r.isEmpty())",
      "info" : "IfStatement[13064-13905]:IfStatement[13064-13905]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13114-13848]:Block[13114-13848]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[13132-13153]:VariableDeclarationStatement[13132-13153]"
    }, {
      "left" : "switch (c) {\n                    case '\\t':\n                    case '\\n':\n                    case '\\r':\n                    case '\\f':\n                    case ' ':\n                        t.transition(BeforeAttributeName);\n                        break;\n                    case '/':\n                        t.transition(SelfClosingStartTag);\n                        break;\n                    case '>':\n                        t.emitTagPending();\n                        t.transition(Data);\n                        break;\n                    default:\n                        t.dataBuffer.append(c);\n                        anythingElse(t, r);\n                }",
      "right" : "switch (c) {\n                    case '\\t':\n                    case '\\n':\n                    case '\\r':\n                    case '\\f':\n                    case ' ':\n                        t.transition(BeforeAttributeName);\n                        break;\n                    case '/':\n                        t.transition(SelfClosingStartTag);\n                        break;\n                    case '>':\n                        t.emitTagPending();\n                        t.transition(Data);\n                        break;\n                    default:\n                        t.dataBuffer.append(c);\n                        anythingElse(t, r);\n                }",
      "info" : "SwitchStatement[13170-13834]:SwitchStatement[13170-13834]"
    }, {
      "left" : "case '\\t':",
      "right" : "case '\\t':",
      "info" : "SwitchCase[13203-13213]:SwitchCase[13203-13213]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[13234-13244]:SwitchCase[13234-13244]"
    }, {
      "left" : "case '\\r':",
      "right" : "case '\\r':",
      "info" : "SwitchCase[13265-13275]:SwitchCase[13265-13275]"
    }, {
      "left" : "case '\\f':",
      "right" : "case '\\f':",
      "info" : "SwitchCase[13296-13306]:SwitchCase[13296-13306]"
    }, {
      "left" : "case ' ':",
      "right" : "case ' ':",
      "info" : "SwitchCase[13327-13336]:SwitchCase[13327-13336]"
    }, {
      "left" : "t.transition(BeforeAttributeName);",
      "right" : "t.transition(BeforeAttributeName);",
      "info" : "ExpressionStatement[13361-13395]:ExpressionStatement[13361-13395]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13420-13426]:BreakStatement[13420-13426]"
    }, {
      "left" : "case '/':",
      "right" : "case '/':",
      "info" : "SwitchCase[13447-13456]:SwitchCase[13447-13456]"
    }, {
      "left" : "t.transition(SelfClosingStartTag);",
      "right" : "t.transition(SelfClosingStartTag);",
      "info" : "ExpressionStatement[13481-13515]:ExpressionStatement[13481-13515]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13540-13546]:BreakStatement[13540-13546]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[13567-13576]:SwitchCase[13567-13576]"
    }, {
      "left" : "t.emitTagPending();",
      "right" : "t.emitTagPending();",
      "info" : "ExpressionStatement[13601-13620]:ExpressionStatement[13601-13620]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[13645-13664]:ExpressionStatement[13645-13664]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13689-13695]:BreakStatement[13689-13695]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[13716-13724]:SwitchCase[13716-13724]"
    }, {
      "left" : "t.dataBuffer.append(c);",
      "right" : "t.dataBuffer.append(c);",
      "info" : "ExpressionStatement[13749-13772]:ExpressionStatement[13749-13772]"
    }, {
      "left" : "anythingElse(t, r);",
      "right" : "anythingElse(t, r);",
      "info" : "ExpressionStatement[13797-13816]:ExpressionStatement[13797-13816]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13854-13905]:Block[13854-13905]"
    }, {
      "left" : "anythingElse(t, r);",
      "right" : "anythingElse(t, r);",
      "info" : "ExpressionStatement[13872-13891]:ExpressionStatement[13872-13891]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[13925-13932]:Modifier[13925-13932]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[13933-13937]:PrimitiveType[13933-13937]"
    }, {
      "left" : "anythingElse",
      "right" : "anythingElse",
      "info" : "SimpleName[13938-13950]:SimpleName[13938-13950]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[13951-13962]:SingleVariableDeclaration[13951-13962]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[13964-13981]:SingleVariableDeclaration[13964-13981]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13983-14084]:Block[13983-14084]"
    }, {
      "left" : "t.emit(\"</\" + t.dataBuffer.toString());",
      "right" : "t.emit(\"</\" + t.dataBuffer.toString());",
      "info" : "ExpressionStatement[13997-14036]:ExpressionStatement[13997-14036]"
    }, {
      "left" : "t.transition(ScriptData);",
      "right" : "t.transition(ScriptData);",
      "info" : "ExpressionStatement[14049-14074]:ExpressionStatement[14049-14074]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[14128-14132]:PrimitiveType[14128-14132]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[14133-14137]:SimpleName[14133-14137]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[14138-14149]:SingleVariableDeclaration[14138-14149]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[14151-14168]:SingleVariableDeclaration[14151-14168]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14170-14385]:Block[14170-14385]"
    }, {
      "left" : "if (r.matches('-'))",
      "right" : "if (r.matches('-'))",
      "info" : "IfStatement[14184-14375]:IfStatement[14184-14375]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14204-14312]:Block[14204-14312]"
    }, {
      "left" : "t.emit('-');",
      "right" : "t.emit('-');",
      "info" : "ExpressionStatement[14222-14234]:ExpressionStatement[14222-14234]"
    }, {
      "left" : "t.advanceTransition(ScriptDataEscapeStartDash);",
      "right" : "t.advanceTransition(ScriptDataEscapeStartDash);",
      "info" : "ExpressionStatement[14251-14298]:ExpressionStatement[14251-14298]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14318-14375]:Block[14318-14375]"
    }, {
      "left" : "t.transition(ScriptData);",
      "right" : "t.transition(ScriptData);",
      "info" : "ExpressionStatement[14336-14361]:ExpressionStatement[14336-14361]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[14433-14437]:PrimitiveType[14433-14437]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[14438-14442]:SimpleName[14438-14442]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[14443-14454]:SingleVariableDeclaration[14443-14454]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[14456-14473]:SingleVariableDeclaration[14456-14473]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14475-14690]:Block[14475-14690]"
    }, {
      "left" : "if (r.matches('-'))",
      "right" : "if (r.matches('-'))",
      "info" : "IfStatement[14489-14680]:IfStatement[14489-14680]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14509-14617]:Block[14509-14617]"
    }, {
      "left" : "t.emit('-');",
      "right" : "t.emit('-');",
      "info" : "ExpressionStatement[14527-14539]:ExpressionStatement[14527-14539]"
    }, {
      "left" : "t.advanceTransition(ScriptDataEscapedDashDash);",
      "right" : "t.advanceTransition(ScriptDataEscapedDashDash);",
      "info" : "ExpressionStatement[14556-14603]:ExpressionStatement[14556-14603]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14623-14680]:Block[14623-14680]"
    }, {
      "left" : "t.transition(ScriptData);",
      "right" : "t.transition(ScriptData);",
      "info" : "ExpressionStatement[14641-14666]:ExpressionStatement[14641-14666]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[14730-14734]:PrimitiveType[14730-14734]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[14735-14739]:SimpleName[14735-14739]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[14740-14751]:SingleVariableDeclaration[14740-14751]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[14753-14770]:SingleVariableDeclaration[14753-14770]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14772-15547]:Block[14772-15547]"
    }, {
      "left" : "if (r.isEmpty())",
      "right" : "if (r.isEmpty())",
      "info" : "IfStatement[14786-14912]:IfStatement[14786-14912]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14803-14912]:Block[14803-14912]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[14821-14838]:ExpressionStatement[14821-14838]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[14855-14874]:ExpressionStatement[14855-14874]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[14891-14898]:ReturnStatement[14891-14898]"
    }, {
      "left" : "switch (r.current()) {\n                case '-':\n                    t.emit('-');\n                    t.advanceTransition(ScriptDataEscapedDash);\n                    break;\n                case '<':\n                    t.advanceTransition(ScriptDataEscapedLessthanSign);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    r.advance();\n                    t.emit(replacementChar);\n                    break;\n                default:\n                    String data = r.consumeToAny('-', '<', nullChar);\n                    t.emit(data);\n            }",
      "right" : "switch (r.current()) {\n                case '-':\n                    t.emit('-');\n                    t.advanceTransition(ScriptDataEscapedDash);\n                    break;\n                case '<':\n                    t.advanceTransition(ScriptDataEscapedLessthanSign);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    r.advance();\n                    t.emit(replacementChar);\n                    break;\n                default:\n                    String data = r.consumeToAny('-', '<', nullChar);\n                    t.emit(data);\n            }",
      "info" : "SwitchStatement[14926-15537]:SwitchStatement[14926-15537]"
    }, {
      "left" : "case '-':",
      "right" : "case '-':",
      "info" : "SwitchCase[14965-14974]:SwitchCase[14965-14974]"
    }, {
      "left" : "t.emit('-');",
      "right" : "t.emit('-');",
      "info" : "ExpressionStatement[14995-15007]:ExpressionStatement[14995-15007]"
    }, {
      "left" : "t.advanceTransition(ScriptDataEscapedDash);",
      "right" : "t.advanceTransition(ScriptDataEscapedDash);",
      "info" : "ExpressionStatement[15028-15071]:ExpressionStatement[15028-15071]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[15092-15098]:BreakStatement[15092-15098]"
    }, {
      "left" : "case '<':",
      "right" : "case '<':",
      "info" : "SwitchCase[15115-15124]:SwitchCase[15115-15124]"
    }, {
      "left" : "t.advanceTransition(ScriptDataEscapedLessthanSign);",
      "right" : "t.advanceTransition(ScriptDataEscapedLessthanSign);",
      "info" : "ExpressionStatement[15145-15196]:ExpressionStatement[15145-15196]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[15217-15223]:BreakStatement[15217-15223]"
    }, {
      "left" : "case nullChar:",
      "right" : "case nullChar:",
      "info" : "SwitchCase[15240-15254]:SwitchCase[15240-15254]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[15275-15289]:ExpressionStatement[15275-15289]"
    }, {
      "left" : "r.advance();",
      "right" : "r.advance();",
      "info" : "ExpressionStatement[15310-15322]:ExpressionStatement[15310-15322]"
    }, {
      "left" : "t.emit(replacementChar);",
      "right" : "t.emit(replacementChar);",
      "info" : "ExpressionStatement[15343-15367]:ExpressionStatement[15343-15367]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[15388-15394]:BreakStatement[15388-15394]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[15411-15419]:SwitchCase[15411-15419]"
    }, {
      "left" : "String data = r.consumeToAny('-', '<', nullChar);",
      "right" : "String data = r.consumeToAny('-', '<', nullChar);",
      "info" : "VariableDeclarationStatement[15440-15489]:VariableDeclarationStatement[15440-15489]"
    }, {
      "left" : "t.emit(data);",
      "right" : "t.emit(data);",
      "info" : "ExpressionStatement[15510-15523]:ExpressionStatement[15510-15523]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[15591-15595]:PrimitiveType[15591-15595]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[15596-15600]:SimpleName[15596-15600]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[15601-15612]:SingleVariableDeclaration[15601-15612]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[15614-15631]:SingleVariableDeclaration[15614-15631]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15633-16420]:Block[15633-16420]"
    }, {
      "left" : "if (r.isEmpty())",
      "right" : "if (r.isEmpty())",
      "info" : "IfStatement[15647-15773]:IfStatement[15647-15773]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15664-15773]:Block[15664-15773]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[15682-15699]:ExpressionStatement[15682-15699]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[15716-15735]:ExpressionStatement[15716-15735]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[15752-15759]:ReturnStatement[15752-15759]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[15787-15808]:VariableDeclarationStatement[15787-15808]"
    }, {
      "left" : "switch (c) {\n                case '-':\n                    t.emit(c);\n                    t.transition(ScriptDataEscapedDashDash);\n                    break;\n                case '<':\n                    t.transition(ScriptDataEscapedLessthanSign);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.emit(replacementChar);\n                    t.transition(ScriptDataEscaped);\n                    break;\n                default:\n                    t.emit(c);\n                    t.transition(ScriptDataEscaped);\n            }",
      "right" : "switch (c) {\n                case '-':\n                    t.emit(c);\n                    t.transition(ScriptDataEscapedDashDash);\n                    break;\n                case '<':\n                    t.transition(ScriptDataEscapedLessthanSign);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.emit(replacementChar);\n                    t.transition(ScriptDataEscaped);\n                    break;\n                default:\n                    t.emit(c);\n                    t.transition(ScriptDataEscaped);\n            }",
      "info" : "SwitchStatement[15821-16410]:SwitchStatement[15821-16410]"
    }, {
      "left" : "case '-':",
      "right" : "case '-':",
      "info" : "SwitchCase[15850-15859]:SwitchCase[15850-15859]"
    }, {
      "left" : "t.emit(c);",
      "right" : "t.emit(c);",
      "info" : "ExpressionStatement[15880-15890]:ExpressionStatement[15880-15890]"
    }, {
      "left" : "t.transition(ScriptDataEscapedDashDash);",
      "right" : "t.transition(ScriptDataEscapedDashDash);",
      "info" : "ExpressionStatement[15911-15951]:ExpressionStatement[15911-15951]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[15972-15978]:BreakStatement[15972-15978]"
    }, {
      "left" : "case '<':",
      "right" : "case '<':",
      "info" : "SwitchCase[15995-16004]:SwitchCase[15995-16004]"
    }, {
      "left" : "t.transition(ScriptDataEscapedLessthanSign);",
      "right" : "t.transition(ScriptDataEscapedLessthanSign);",
      "info" : "ExpressionStatement[16025-16069]:ExpressionStatement[16025-16069]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[16090-16096]:BreakStatement[16090-16096]"
    }, {
      "left" : "case nullChar:",
      "right" : "case nullChar:",
      "info" : "SwitchCase[16113-16127]:SwitchCase[16113-16127]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[16148-16162]:ExpressionStatement[16148-16162]"
    }, {
      "left" : "t.emit(replacementChar);",
      "right" : "t.emit(replacementChar);",
      "info" : "ExpressionStatement[16183-16207]:ExpressionStatement[16183-16207]"
    }, {
      "left" : "t.transition(ScriptDataEscaped);",
      "right" : "t.transition(ScriptDataEscaped);",
      "info" : "ExpressionStatement[16228-16260]:ExpressionStatement[16228-16260]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[16281-16287]:BreakStatement[16281-16287]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[16304-16312]:SwitchCase[16304-16312]"
    }, {
      "left" : "t.emit(c);",
      "right" : "t.emit(c);",
      "info" : "ExpressionStatement[16333-16343]:ExpressionStatement[16333-16343]"
    }, {
      "left" : "t.transition(ScriptDataEscaped);",
      "right" : "t.transition(ScriptDataEscaped);",
      "info" : "ExpressionStatement[16364-16396]:ExpressionStatement[16364-16396]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[16468-16472]:PrimitiveType[16468-16472]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[16473-16477]:SimpleName[16473-16477]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[16478-16489]:SingleVariableDeclaration[16478-16489]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[16491-16508]:SingleVariableDeclaration[16491-16508]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16510-17366]:Block[16510-17366]"
    }, {
      "left" : "if (r.isEmpty())",
      "right" : "if (r.isEmpty())",
      "info" : "IfStatement[16524-16650]:IfStatement[16524-16650]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16541-16650]:Block[16541-16650]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[16559-16576]:ExpressionStatement[16559-16576]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[16593-16612]:ExpressionStatement[16593-16612]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[16629-16636]:ReturnStatement[16629-16636]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[16664-16685]:VariableDeclarationStatement[16664-16685]"
    }, {
      "left" : "switch (c) {\n                case '-':\n                    t.emit(c);\n                    break;\n                case '<':\n                    t.transition(ScriptDataEscapedLessthanSign);\n                    break;\n                case '>':\n                    t.emit(c);\n                    t.transition(ScriptData);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.emit(replacementChar);\n                    t.transition(ScriptDataEscaped);\n                    break;\n                default:\n                    t.emit(c);\n                    t.transition(ScriptDataEscaped);\n            }",
      "right" : "switch (c) {\n                case '-':\n                    t.emit(c);\n                    break;\n                case '<':\n                    t.transition(ScriptDataEscapedLessthanSign);\n                    break;\n                case '>':\n                    t.emit(c);\n                    t.transition(ScriptData);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.emit(replacementChar);\n                    t.transition(ScriptDataEscaped);\n                    break;\n                default:\n                    t.emit(c);\n                    t.transition(ScriptDataEscaped);\n            }",
      "info" : "SwitchStatement[16698-17356]:SwitchStatement[16698-17356]"
    }, {
      "left" : "case '-':",
      "right" : "case '-':",
      "info" : "SwitchCase[16727-16736]:SwitchCase[16727-16736]"
    }, {
      "left" : "t.emit(c);",
      "right" : "t.emit(c);",
      "info" : "ExpressionStatement[16757-16767]:ExpressionStatement[16757-16767]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[16788-16794]:BreakStatement[16788-16794]"
    }, {
      "left" : "case '<':",
      "right" : "case '<':",
      "info" : "SwitchCase[16811-16820]:SwitchCase[16811-16820]"
    }, {
      "left" : "t.transition(ScriptDataEscapedLessthanSign);",
      "right" : "t.transition(ScriptDataEscapedLessthanSign);",
      "info" : "ExpressionStatement[16841-16885]:ExpressionStatement[16841-16885]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[16906-16912]:BreakStatement[16906-16912]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[16929-16938]:SwitchCase[16929-16938]"
    }, {
      "left" : "t.emit(c);",
      "right" : "t.emit(c);",
      "info" : "ExpressionStatement[16959-16969]:ExpressionStatement[16959-16969]"
    }, {
      "left" : "t.transition(ScriptData);",
      "right" : "t.transition(ScriptData);",
      "info" : "ExpressionStatement[16990-17015]:ExpressionStatement[16990-17015]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[17036-17042]:BreakStatement[17036-17042]"
    }, {
      "left" : "case nullChar:",
      "right" : "case nullChar:",
      "info" : "SwitchCase[17059-17073]:SwitchCase[17059-17073]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[17094-17108]:ExpressionStatement[17094-17108]"
    }, {
      "left" : "t.emit(replacementChar);",
      "right" : "t.emit(replacementChar);",
      "info" : "ExpressionStatement[17129-17153]:ExpressionStatement[17129-17153]"
    }, {
      "left" : "t.transition(ScriptDataEscaped);",
      "right" : "t.transition(ScriptDataEscaped);",
      "info" : "ExpressionStatement[17174-17206]:ExpressionStatement[17174-17206]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[17227-17233]:BreakStatement[17227-17233]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[17250-17258]:SwitchCase[17250-17258]"
    }, {
      "left" : "t.emit(c);",
      "right" : "t.emit(c);",
      "info" : "ExpressionStatement[17279-17289]:ExpressionStatement[17279-17289]"
    }, {
      "left" : "t.transition(ScriptDataEscaped);",
      "right" : "t.transition(ScriptDataEscaped);",
      "info" : "ExpressionStatement[17310-17342]:ExpressionStatement[17310-17342]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[17418-17422]:PrimitiveType[17418-17422]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[17423-17427]:SimpleName[17423-17427]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[17428-17439]:SingleVariableDeclaration[17428-17439]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[17441-17458]:SingleVariableDeclaration[17441-17458]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17460-17986]:Block[17460-17986]"
    }, {
      "left" : "if (r.matchesLetter())",
      "right" : "if (r.matchesLetter())",
      "info" : "IfStatement[17474-17976]:IfStatement[17474-17976]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17497-17732]:Block[17497-17732]"
    }, {
      "left" : "t.createTempBuffer();",
      "right" : "t.createTempBuffer();",
      "info" : "ExpressionStatement[17515-17536]:ExpressionStatement[17515-17536]"
    }, {
      "left" : "t.dataBuffer.append(Character.toLowerCase(r.current()));",
      "right" : "t.dataBuffer.append(Character.toLowerCase(r.current()));",
      "info" : "ExpressionStatement[17553-17609]:ExpressionStatement[17553-17609]"
    }, {
      "left" : "t.emit(\"<\" + r.current());",
      "right" : "t.emit(\"<\" + r.current());",
      "info" : "ExpressionStatement[17626-17652]:ExpressionStatement[17626-17652]"
    }, {
      "left" : "t.advanceTransition(ScriptDataDoubleEscapeStart);",
      "right" : "t.advanceTransition(ScriptDataDoubleEscapeStart);",
      "info" : "ExpressionStatement[17669-17718]:ExpressionStatement[17669-17718]"
    }, {
      "left" : "if (r.matches('/'))",
      "right" : "if (r.matches('/'))",
      "info" : "IfStatement[17738-17976]:IfStatement[17738-17976]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17758-17877]:Block[17758-17877]"
    }, {
      "left" : "t.createTempBuffer();",
      "right" : "t.createTempBuffer();",
      "info" : "ExpressionStatement[17776-17797]:ExpressionStatement[17776-17797]"
    }, {
      "left" : "t.advanceTransition(ScriptDataEscapedEndTagOpen);",
      "right" : "t.advanceTransition(ScriptDataEscapedEndTagOpen);",
      "info" : "ExpressionStatement[17814-17863]:ExpressionStatement[17814-17863]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17883-17976]:Block[17883-17976]"
    }, {
      "left" : "t.emit('<');",
      "right" : "t.emit('<');",
      "info" : "ExpressionStatement[17901-17913]:ExpressionStatement[17901-17913]"
    }, {
      "left" : "t.transition(ScriptDataEscaped);",
      "right" : "t.transition(ScriptDataEscaped);",
      "info" : "ExpressionStatement[17930-17962]:ExpressionStatement[17930-17962]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[18036-18040]:PrimitiveType[18036-18040]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[18041-18045]:SimpleName[18041-18045]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[18046-18057]:SingleVariableDeclaration[18046-18057]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[18059-18076]:SingleVariableDeclaration[18059-18076]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18078-18479]:Block[18078-18479]"
    }, {
      "left" : "if (r.matchesLetter())",
      "right" : "if (r.matchesLetter())",
      "info" : "IfStatement[18092-18469]:IfStatement[18092-18469]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18115-18369]:Block[18115-18369]"
    }, {
      "left" : "t.createTagPending(false);",
      "right" : "t.createTagPending(false);",
      "info" : "ExpressionStatement[18133-18159]:ExpressionStatement[18133-18159]"
    }, {
      "left" : "t.tagPending.appendTagName(Character.toLowerCase(r.current()));",
      "right" : "t.tagPending.appendTagName(Character.toLowerCase(r.current()));",
      "info" : "ExpressionStatement[18176-18239]:ExpressionStatement[18176-18239]"
    }, {
      "left" : "t.dataBuffer.append(r.current());",
      "right" : "t.dataBuffer.append(r.current());",
      "info" : "ExpressionStatement[18256-18289]:ExpressionStatement[18256-18289]"
    }, {
      "left" : "t.advanceTransition(ScriptDataEscapedEndTagName);",
      "right" : "t.advanceTransition(ScriptDataEscapedEndTagName);",
      "info" : "ExpressionStatement[18306-18355]:ExpressionStatement[18306-18355]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18375-18469]:Block[18375-18469]"
    }, {
      "left" : "t.emit(\"</\");",
      "right" : "t.emit(\"</\");",
      "info" : "ExpressionStatement[18393-18406]:ExpressionStatement[18393-18406]"
    }, {
      "left" : "t.transition(ScriptDataEscaped);",
      "right" : "t.transition(ScriptDataEscaped);",
      "info" : "ExpressionStatement[18423-18455]:ExpressionStatement[18423-18455]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[18529-18533]:PrimitiveType[18529-18533]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[18534-18538]:SimpleName[18534-18538]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[18539-18550]:SingleVariableDeclaration[18539-18550]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[18552-18569]:SingleVariableDeclaration[18552-18569]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18571-19707]:Block[18571-19707]"
    }, {
      "left" : "if (r.matchesLetter())",
      "right" : "if (r.matchesLetter())",
      "info" : "IfStatement[18585-18811]:IfStatement[18585-18811]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18608-18811]:Block[18608-18811]"
    }, {
      "left" : "String name = r.consumeLetterSequence();",
      "right" : "String name = r.consumeLetterSequence();",
      "info" : "VariableDeclarationStatement[18626-18666]:VariableDeclarationStatement[18626-18666]"
    }, {
      "left" : "t.tagPending.appendTagName(name.toLowerCase());",
      "right" : "t.tagPending.appendTagName(name.toLowerCase());",
      "info" : "ExpressionStatement[18683-18730]:ExpressionStatement[18683-18730]"
    }, {
      "left" : "t.dataBuffer.append(name);",
      "right" : "t.dataBuffer.append(name);",
      "info" : "ExpressionStatement[18747-18773]:ExpressionStatement[18747-18773]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[18790-18797]:ReturnStatement[18790-18797]"
    }, {
      "left" : "if (t.isAppropriateEndTagToken() && !r.isEmpty())",
      "right" : "if (t.isAppropriateEndTagToken() && !r.isEmpty())",
      "info" : "IfStatement[18825-19697]:IfStatement[18825-19697]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18875-19640]:Block[18875-19640]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[18893-18914]:VariableDeclarationStatement[18893-18914]"
    }, {
      "left" : "switch (c) {\n                    case '\\t':\n                    case '\\n':\n                    case '\\r':\n                    case '\\f':\n                    case ' ':\n                        t.transition(BeforeAttributeName);\n                        break;\n                    case '/':\n                        t.transition(SelfClosingStartTag);\n                        break;\n                    case '>':\n                        t.emitTagPending();\n                        t.transition(Data);\n                        break;\n                    default:\n                        t.dataBuffer.append(c);\n                        anythingElse(t, r);\n                        break;\n                }",
      "right" : "switch (c) {\n                    case '\\t':\n                    case '\\n':\n                    case '\\r':\n                    case '\\f':\n                    case ' ':\n                        t.transition(BeforeAttributeName);\n                        break;\n                    case '/':\n                        t.transition(SelfClosingStartTag);\n                        break;\n                    case '>':\n                        t.emitTagPending();\n                        t.transition(Data);\n                        break;\n                    default:\n                        t.dataBuffer.append(c);\n                        anythingElse(t, r);\n                        break;\n                }",
      "info" : "SwitchStatement[18931-19626]:SwitchStatement[18931-19626]"
    }, {
      "left" : "case '\\t':",
      "right" : "case '\\t':",
      "info" : "SwitchCase[18964-18974]:SwitchCase[18964-18974]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[18995-19005]:SwitchCase[18995-19005]"
    }, {
      "left" : "case '\\r':",
      "right" : "case '\\r':",
      "info" : "SwitchCase[19026-19036]:SwitchCase[19026-19036]"
    }, {
      "left" : "case '\\f':",
      "right" : "case '\\f':",
      "info" : "SwitchCase[19057-19067]:SwitchCase[19057-19067]"
    }, {
      "left" : "case ' ':",
      "right" : "case ' ':",
      "info" : "SwitchCase[19088-19097]:SwitchCase[19088-19097]"
    }, {
      "left" : "t.transition(BeforeAttributeName);",
      "right" : "t.transition(BeforeAttributeName);",
      "info" : "ExpressionStatement[19122-19156]:ExpressionStatement[19122-19156]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[19181-19187]:BreakStatement[19181-19187]"
    }, {
      "left" : "case '/':",
      "right" : "case '/':",
      "info" : "SwitchCase[19208-19217]:SwitchCase[19208-19217]"
    }, {
      "left" : "t.transition(SelfClosingStartTag);",
      "right" : "t.transition(SelfClosingStartTag);",
      "info" : "ExpressionStatement[19242-19276]:ExpressionStatement[19242-19276]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[19301-19307]:BreakStatement[19301-19307]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[19328-19337]:SwitchCase[19328-19337]"
    }, {
      "left" : "t.emitTagPending();",
      "right" : "t.emitTagPending();",
      "info" : "ExpressionStatement[19362-19381]:ExpressionStatement[19362-19381]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[19406-19425]:ExpressionStatement[19406-19425]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[19450-19456]:BreakStatement[19450-19456]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[19477-19485]:SwitchCase[19477-19485]"
    }, {
      "left" : "t.dataBuffer.append(c);",
      "right" : "t.dataBuffer.append(c);",
      "info" : "ExpressionStatement[19510-19533]:ExpressionStatement[19510-19533]"
    }, {
      "left" : "anythingElse(t, r);",
      "right" : "anythingElse(t, r);",
      "info" : "ExpressionStatement[19558-19577]:ExpressionStatement[19558-19577]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[19602-19608]:BreakStatement[19602-19608]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19646-19697]:Block[19646-19697]"
    }, {
      "left" : "anythingElse(t, r);",
      "right" : "anythingElse(t, r);",
      "info" : "ExpressionStatement[19664-19683]:ExpressionStatement[19664-19683]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[19725-19732]:Modifier[19725-19732]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[19733-19737]:PrimitiveType[19733-19737]"
    }, {
      "left" : "anythingElse",
      "right" : "anythingElse",
      "info" : "SimpleName[19738-19750]:SimpleName[19738-19750]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[19751-19762]:SingleVariableDeclaration[19751-19762]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[19764-19781]:SingleVariableDeclaration[19764-19781]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19783-19891]:Block[19783-19891]"
    }, {
      "left" : "t.emit(\"</\" + t.dataBuffer.toString());",
      "right" : "t.emit(\"</\" + t.dataBuffer.toString());",
      "info" : "ExpressionStatement[19797-19836]:ExpressionStatement[19797-19836]"
    }, {
      "left" : "t.transition(ScriptDataEscaped);",
      "right" : "t.transition(ScriptDataEscaped);",
      "info" : "ExpressionStatement[19849-19881]:ExpressionStatement[19849-19881]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[19941-19945]:PrimitiveType[19941-19945]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[19946-19950]:SimpleName[19946-19950]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[19951-19962]:SingleVariableDeclaration[19951-19962]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[19964-19981]:SingleVariableDeclaration[19964-19981]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19983-20855]:Block[19983-20855]"
    }, {
      "left" : "if (r.matchesLetter())",
      "right" : "if (r.matchesLetter())",
      "info" : "IfStatement[19997-20203]:IfStatement[19997-20203]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20020-20203]:Block[20020-20203]"
    }, {
      "left" : "String name = r.consumeLetterSequence();",
      "right" : "String name = r.consumeLetterSequence();",
      "info" : "VariableDeclarationStatement[20038-20078]:VariableDeclarationStatement[20038-20078]"
    }, {
      "left" : "t.dataBuffer.append(name.toLowerCase());",
      "right" : "t.dataBuffer.append(name.toLowerCase());",
      "info" : "ExpressionStatement[20095-20135]:ExpressionStatement[20095-20135]"
    }, {
      "left" : "t.emit(name);",
      "right" : "t.emit(name);",
      "info" : "ExpressionStatement[20152-20165]:ExpressionStatement[20152-20165]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[20182-20189]:ReturnStatement[20182-20189]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[20217-20238]:VariableDeclarationStatement[20217-20238]"
    }, {
      "left" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\r':\n                case '\\f':\n                case ' ':\n                case '/':\n                case '>':\n                    if (t.dataBuffer.toString().equals(\"script\"))\n                        t.transition(ScriptDataDoubleEscaped);\n                    else\n                        t.transition(ScriptDataEscaped);\n                    t.emit(c);\n                    break;\n                default:\n                    r.unconsume();\n                    t.transition(ScriptDataEscaped);\n            }",
      "right" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\r':\n                case '\\f':\n                case ' ':\n                case '/':\n                case '>':\n                    if (t.dataBuffer.toString().equals(\"script\"))\n                        t.transition(ScriptDataDoubleEscaped);\n                    else\n                        t.transition(ScriptDataEscaped);\n                    t.emit(c);\n                    break;\n                default:\n                    r.unconsume();\n                    t.transition(ScriptDataEscaped);\n            }",
      "info" : "SwitchStatement[20251-20845]:SwitchStatement[20251-20845]"
    }, {
      "left" : "case '\\t':",
      "right" : "case '\\t':",
      "info" : "SwitchCase[20280-20290]:SwitchCase[20280-20290]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[20307-20317]:SwitchCase[20307-20317]"
    }, {
      "left" : "case '\\r':",
      "right" : "case '\\r':",
      "info" : "SwitchCase[20334-20344]:SwitchCase[20334-20344]"
    }, {
      "left" : "case '\\f':",
      "right" : "case '\\f':",
      "info" : "SwitchCase[20361-20371]:SwitchCase[20361-20371]"
    }, {
      "left" : "case ' ':",
      "right" : "case ' ':",
      "info" : "SwitchCase[20388-20397]:SwitchCase[20388-20397]"
    }, {
      "left" : "case '/':",
      "right" : "case '/':",
      "info" : "SwitchCase[20414-20423]:SwitchCase[20414-20423]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[20440-20449]:SwitchCase[20440-20449]"
    }, {
      "left" : "if (t.dataBuffer.toString().equals(\"script\"))",
      "right" : "if (t.dataBuffer.toString().equals(\"script\"))",
      "info" : "IfStatement[20470-20660]:IfStatement[20470-20660]"
    }, {
      "left" : "t.transition(ScriptDataDoubleEscaped);",
      "right" : "t.transition(ScriptDataDoubleEscaped);",
      "info" : "ExpressionStatement[20540-20578]:ExpressionStatement[20540-20578]"
    }, {
      "left" : "t.transition(ScriptDataEscaped);",
      "right" : "t.transition(ScriptDataEscaped);",
      "info" : "ExpressionStatement[20628-20660]:ExpressionStatement[20628-20660]"
    }, {
      "left" : "t.emit(c);",
      "right" : "t.emit(c);",
      "info" : "ExpressionStatement[20681-20691]:ExpressionStatement[20681-20691]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[20712-20718]:BreakStatement[20712-20718]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[20735-20743]:SwitchCase[20735-20743]"
    }, {
      "left" : "r.unconsume();",
      "right" : "r.unconsume();",
      "info" : "ExpressionStatement[20764-20778]:ExpressionStatement[20764-20778]"
    }, {
      "left" : "t.transition(ScriptDataEscaped);",
      "right" : "t.transition(ScriptDataEscaped);",
      "info" : "ExpressionStatement[20799-20831]:ExpressionStatement[20799-20831]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[20901-20905]:PrimitiveType[20901-20905]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[20906-20910]:SimpleName[20906-20910]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[20911-20922]:SingleVariableDeclaration[20911-20922]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[20924-20941]:SingleVariableDeclaration[20924-20941]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20943-21774]:Block[20943-21774]"
    }, {
      "left" : "char c = r.current();",
      "right" : "char c = r.current();",
      "info" : "VariableDeclarationStatement[20957-20978]:VariableDeclarationStatement[20957-20978]"
    }, {
      "left" : "switch (c) {\n                case '-':\n                    t.emit(c);\n                    t.advanceTransition(ScriptDataDoubleEscapedDash);\n                    break;\n                case '<':\n                    t.emit(c);\n                    t.advanceTransition(ScriptDataDoubleEscapedLessthanSign);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    r.advance();\n                    t.emit(replacementChar);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.transition(Data);\n                    break;\n                default:\n                    String data = r.consumeToAny('-', '<', nullChar);\n                    t.emit(data);\n            }",
      "right" : "switch (c) {\n                case '-':\n                    t.emit(c);\n                    t.advanceTransition(ScriptDataDoubleEscapedDash);\n                    break;\n                case '<':\n                    t.emit(c);\n                    t.advanceTransition(ScriptDataDoubleEscapedLessthanSign);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    r.advance();\n                    t.emit(replacementChar);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.transition(Data);\n                    break;\n                default:\n                    String data = r.consumeToAny('-', '<', nullChar);\n                    t.emit(data);\n            }",
      "info" : "SwitchStatement[20991-21764]:SwitchStatement[20991-21764]"
    }, {
      "left" : "case '-':",
      "right" : "case '-':",
      "info" : "SwitchCase[21020-21029]:SwitchCase[21020-21029]"
    }, {
      "left" : "t.emit(c);",
      "right" : "t.emit(c);",
      "info" : "ExpressionStatement[21050-21060]:ExpressionStatement[21050-21060]"
    }, {
      "left" : "t.advanceTransition(ScriptDataDoubleEscapedDash);",
      "right" : "t.advanceTransition(ScriptDataDoubleEscapedDash);",
      "info" : "ExpressionStatement[21081-21130]:ExpressionStatement[21081-21130]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[21151-21157]:BreakStatement[21151-21157]"
    }, {
      "left" : "case '<':",
      "right" : "case '<':",
      "info" : "SwitchCase[21174-21183]:SwitchCase[21174-21183]"
    }, {
      "left" : "t.emit(c);",
      "right" : "t.emit(c);",
      "info" : "ExpressionStatement[21204-21214]:ExpressionStatement[21204-21214]"
    }, {
      "left" : "t.advanceTransition(ScriptDataDoubleEscapedLessthanSign);",
      "right" : "t.advanceTransition(ScriptDataDoubleEscapedLessthanSign);",
      "info" : "ExpressionStatement[21235-21292]:ExpressionStatement[21235-21292]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[21313-21319]:BreakStatement[21313-21319]"
    }, {
      "left" : "case nullChar:",
      "right" : "case nullChar:",
      "info" : "SwitchCase[21336-21350]:SwitchCase[21336-21350]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[21371-21385]:ExpressionStatement[21371-21385]"
    }, {
      "left" : "r.advance();",
      "right" : "r.advance();",
      "info" : "ExpressionStatement[21406-21418]:ExpressionStatement[21406-21418]"
    }, {
      "left" : "t.emit(replacementChar);",
      "right" : "t.emit(replacementChar);",
      "info" : "ExpressionStatement[21439-21463]:ExpressionStatement[21439-21463]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[21484-21490]:BreakStatement[21484-21490]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[21507-21516]:SwitchCase[21507-21516]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[21537-21554]:ExpressionStatement[21537-21554]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[21575-21594]:ExpressionStatement[21575-21594]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[21615-21621]:BreakStatement[21615-21621]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[21638-21646]:SwitchCase[21638-21646]"
    }, {
      "left" : "String data = r.consumeToAny('-', '<', nullChar);",
      "right" : "String data = r.consumeToAny('-', '<', nullChar);",
      "info" : "VariableDeclarationStatement[21667-21716]:VariableDeclarationStatement[21667-21716]"
    }, {
      "left" : "t.emit(data);",
      "right" : "t.emit(data);",
      "info" : "ExpressionStatement[21737-21750]:ExpressionStatement[21737-21750]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[21824-21828]:PrimitiveType[21824-21828]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[21829-21833]:SimpleName[21829-21833]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[21834-21845]:SingleVariableDeclaration[21834-21845]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[21847-21864]:SingleVariableDeclaration[21847-21864]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21866-22699]:Block[21866-22699]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[21880-21901]:VariableDeclarationStatement[21880-21901]"
    }, {
      "left" : "switch (c) {\n                case '-':\n                    t.emit(c);\n                    t.transition(ScriptDataDoubleEscapedDashDash);\n                    break;\n                case '<':\n                    t.emit(c);\n                    t.transition(ScriptDataDoubleEscapedLessthanSign);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.emit(replacementChar);\n                    t.transition(ScriptDataDoubleEscaped);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.transition(Data);\n                    break;\n                default:\n                    t.emit(c);\n                    t.transition(ScriptDataDoubleEscaped);\n            }",
      "right" : "switch (c) {\n                case '-':\n                    t.emit(c);\n                    t.transition(ScriptDataDoubleEscapedDashDash);\n                    break;\n                case '<':\n                    t.emit(c);\n                    t.transition(ScriptDataDoubleEscapedLessthanSign);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.emit(replacementChar);\n                    t.transition(ScriptDataDoubleEscaped);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.transition(Data);\n                    break;\n                default:\n                    t.emit(c);\n                    t.transition(ScriptDataDoubleEscaped);\n            }",
      "info" : "SwitchStatement[21914-22689]:SwitchStatement[21914-22689]"
    }, {
      "left" : "case '-':",
      "right" : "case '-':",
      "info" : "SwitchCase[21943-21952]:SwitchCase[21943-21952]"
    }, {
      "left" : "t.emit(c);",
      "right" : "t.emit(c);",
      "info" : "ExpressionStatement[21973-21983]:ExpressionStatement[21973-21983]"
    }, {
      "left" : "t.transition(ScriptDataDoubleEscapedDashDash);",
      "right" : "t.transition(ScriptDataDoubleEscapedDashDash);",
      "info" : "ExpressionStatement[22004-22050]:ExpressionStatement[22004-22050]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[22071-22077]:BreakStatement[22071-22077]"
    }, {
      "left" : "case '<':",
      "right" : "case '<':",
      "info" : "SwitchCase[22094-22103]:SwitchCase[22094-22103]"
    }, {
      "left" : "t.emit(c);",
      "right" : "t.emit(c);",
      "info" : "ExpressionStatement[22124-22134]:ExpressionStatement[22124-22134]"
    }, {
      "left" : "t.transition(ScriptDataDoubleEscapedLessthanSign);",
      "right" : "t.transition(ScriptDataDoubleEscapedLessthanSign);",
      "info" : "ExpressionStatement[22155-22205]:ExpressionStatement[22155-22205]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[22226-22232]:BreakStatement[22226-22232]"
    }, {
      "left" : "case nullChar:",
      "right" : "case nullChar:",
      "info" : "SwitchCase[22249-22263]:SwitchCase[22249-22263]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[22284-22298]:ExpressionStatement[22284-22298]"
    }, {
      "left" : "t.emit(replacementChar);",
      "right" : "t.emit(replacementChar);",
      "info" : "ExpressionStatement[22319-22343]:ExpressionStatement[22319-22343]"
    }, {
      "left" : "t.transition(ScriptDataDoubleEscaped);",
      "right" : "t.transition(ScriptDataDoubleEscaped);",
      "info" : "ExpressionStatement[22364-22402]:ExpressionStatement[22364-22402]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[22423-22429]:BreakStatement[22423-22429]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[22446-22455]:SwitchCase[22446-22455]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[22476-22493]:ExpressionStatement[22476-22493]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[22514-22533]:ExpressionStatement[22514-22533]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[22554-22560]:BreakStatement[22554-22560]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[22577-22585]:SwitchCase[22577-22585]"
    }, {
      "left" : "t.emit(c);",
      "right" : "t.emit(c);",
      "info" : "ExpressionStatement[22606-22616]:ExpressionStatement[22606-22616]"
    }, {
      "left" : "t.transition(ScriptDataDoubleEscaped);",
      "right" : "t.transition(ScriptDataDoubleEscaped);",
      "info" : "ExpressionStatement[22637-22675]:ExpressionStatement[22637-22675]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[22753-22757]:PrimitiveType[22753-22757]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[22758-22762]:SimpleName[22758-22762]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[22763-22774]:SingleVariableDeclaration[22763-22774]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[22776-22793]:SingleVariableDeclaration[22776-22793]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22795-23691]:Block[22795-23691]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[22809-22830]:VariableDeclarationStatement[22809-22830]"
    }, {
      "left" : "switch (c) {\n                case '-':\n                    t.emit(c);\n                    break;\n                case '<':\n                    t.emit(c);\n                    t.transition(ScriptDataDoubleEscapedLessthanSign);\n                    break;\n                case '>':\n                    t.emit(c);\n                    t.transition(ScriptData);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.emit(replacementChar);\n                    t.transition(ScriptDataDoubleEscaped);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.transition(Data);\n                    break;\n                default:\n                    t.emit(c);\n                    t.transition(ScriptDataDoubleEscaped);\n            }",
      "right" : "switch (c) {\n                case '-':\n                    t.emit(c);\n                    break;\n                case '<':\n                    t.emit(c);\n                    t.transition(ScriptDataDoubleEscapedLessthanSign);\n                    break;\n                case '>':\n                    t.emit(c);\n                    t.transition(ScriptData);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.emit(replacementChar);\n                    t.transition(ScriptDataDoubleEscaped);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.transition(Data);\n                    break;\n                default:\n                    t.emit(c);\n                    t.transition(ScriptDataDoubleEscaped);\n            }",
      "info" : "SwitchStatement[22843-23681]:SwitchStatement[22843-23681]"
    }, {
      "left" : "case '-':",
      "right" : "case '-':",
      "info" : "SwitchCase[22872-22881]:SwitchCase[22872-22881]"
    }, {
      "left" : "t.emit(c);",
      "right" : "t.emit(c);",
      "info" : "ExpressionStatement[22902-22912]:ExpressionStatement[22902-22912]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[22933-22939]:BreakStatement[22933-22939]"
    }, {
      "left" : "case '<':",
      "right" : "case '<':",
      "info" : "SwitchCase[22956-22965]:SwitchCase[22956-22965]"
    }, {
      "left" : "t.emit(c);",
      "right" : "t.emit(c);",
      "info" : "ExpressionStatement[22986-22996]:ExpressionStatement[22986-22996]"
    }, {
      "left" : "t.transition(ScriptDataDoubleEscapedLessthanSign);",
      "right" : "t.transition(ScriptDataDoubleEscapedLessthanSign);",
      "info" : "ExpressionStatement[23017-23067]:ExpressionStatement[23017-23067]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[23088-23094]:BreakStatement[23088-23094]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[23111-23120]:SwitchCase[23111-23120]"
    }, {
      "left" : "t.emit(c);",
      "right" : "t.emit(c);",
      "info" : "ExpressionStatement[23141-23151]:ExpressionStatement[23141-23151]"
    }, {
      "left" : "t.transition(ScriptData);",
      "right" : "t.transition(ScriptData);",
      "info" : "ExpressionStatement[23172-23197]:ExpressionStatement[23172-23197]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[23218-23224]:BreakStatement[23218-23224]"
    }, {
      "left" : "case nullChar:",
      "right" : "case nullChar:",
      "info" : "SwitchCase[23241-23255]:SwitchCase[23241-23255]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[23276-23290]:ExpressionStatement[23276-23290]"
    }, {
      "left" : "t.emit(replacementChar);",
      "right" : "t.emit(replacementChar);",
      "info" : "ExpressionStatement[23311-23335]:ExpressionStatement[23311-23335]"
    }, {
      "left" : "t.transition(ScriptDataDoubleEscaped);",
      "right" : "t.transition(ScriptDataDoubleEscaped);",
      "info" : "ExpressionStatement[23356-23394]:ExpressionStatement[23356-23394]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[23415-23421]:BreakStatement[23415-23421]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[23438-23447]:SwitchCase[23438-23447]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[23468-23485]:ExpressionStatement[23468-23485]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[23506-23525]:ExpressionStatement[23506-23525]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[23546-23552]:BreakStatement[23546-23552]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[23569-23577]:SwitchCase[23569-23577]"
    }, {
      "left" : "t.emit(c);",
      "right" : "t.emit(c);",
      "info" : "ExpressionStatement[23598-23608]:ExpressionStatement[23598-23608]"
    }, {
      "left" : "t.transition(ScriptDataDoubleEscaped);",
      "right" : "t.transition(ScriptDataDoubleEscaped);",
      "info" : "ExpressionStatement[23629-23667]:ExpressionStatement[23629-23667]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[23749-23753]:PrimitiveType[23749-23753]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[23754-23758]:SimpleName[23754-23758]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[23759-23770]:SingleVariableDeclaration[23759-23770]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[23772-23789]:SingleVariableDeclaration[23772-23789]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23791-24057]:Block[23791-24057]"
    }, {
      "left" : "if (r.matches('/'))",
      "right" : "if (r.matches('/'))",
      "info" : "IfStatement[23805-24047]:IfStatement[23805-24047]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23825-23971]:Block[23825-23971]"
    }, {
      "left" : "t.emit('/');",
      "right" : "t.emit('/');",
      "info" : "ExpressionStatement[23843-23855]:ExpressionStatement[23843-23855]"
    }, {
      "left" : "t.createTempBuffer();",
      "right" : "t.createTempBuffer();",
      "info" : "ExpressionStatement[23872-23893]:ExpressionStatement[23872-23893]"
    }, {
      "left" : "t.advanceTransition(ScriptDataDoubleEscapeEnd);",
      "right" : "t.advanceTransition(ScriptDataDoubleEscapeEnd);",
      "info" : "ExpressionStatement[23910-23957]:ExpressionStatement[23910-23957]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23977-24047]:Block[23977-24047]"
    }, {
      "left" : "t.transition(ScriptDataDoubleEscaped);",
      "right" : "t.transition(ScriptDataDoubleEscaped);",
      "info" : "ExpressionStatement[23995-24033]:ExpressionStatement[23995-24033]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[24105-24109]:PrimitiveType[24105-24109]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[24110-24114]:SimpleName[24110-24114]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[24115-24126]:SingleVariableDeclaration[24115-24126]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[24128-24145]:SingleVariableDeclaration[24128-24145]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24147-25025]:Block[24147-25025]"
    }, {
      "left" : "if (r.matchesLetter())",
      "right" : "if (r.matchesLetter())",
      "info" : "IfStatement[24161-24367]:IfStatement[24161-24367]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24184-24367]:Block[24184-24367]"
    }, {
      "left" : "String name = r.consumeLetterSequence();",
      "right" : "String name = r.consumeLetterSequence();",
      "info" : "VariableDeclarationStatement[24202-24242]:VariableDeclarationStatement[24202-24242]"
    }, {
      "left" : "t.dataBuffer.append(name.toLowerCase());",
      "right" : "t.dataBuffer.append(name.toLowerCase());",
      "info" : "ExpressionStatement[24259-24299]:ExpressionStatement[24259-24299]"
    }, {
      "left" : "t.emit(name);",
      "right" : "t.emit(name);",
      "info" : "ExpressionStatement[24316-24329]:ExpressionStatement[24316-24329]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[24346-24353]:ReturnStatement[24346-24353]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[24381-24402]:VariableDeclarationStatement[24381-24402]"
    }, {
      "left" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\r':\n                case '\\f':\n                case ' ':\n                case '/':\n                case '>':\n                    if (t.dataBuffer.toString().equals(\"script\"))\n                        t.transition(ScriptDataEscaped);\n                    else\n                        t.transition(ScriptDataDoubleEscaped);\n                    t.emit(c);\n                    break;\n                default:\n                    r.unconsume();\n                    t.transition(ScriptDataDoubleEscaped);\n            }",
      "right" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\r':\n                case '\\f':\n                case ' ':\n                case '/':\n                case '>':\n                    if (t.dataBuffer.toString().equals(\"script\"))\n                        t.transition(ScriptDataEscaped);\n                    else\n                        t.transition(ScriptDataDoubleEscaped);\n                    t.emit(c);\n                    break;\n                default:\n                    r.unconsume();\n                    t.transition(ScriptDataDoubleEscaped);\n            }",
      "info" : "SwitchStatement[24415-25015]:SwitchStatement[24415-25015]"
    }, {
      "left" : "case '\\t':",
      "right" : "case '\\t':",
      "info" : "SwitchCase[24444-24454]:SwitchCase[24444-24454]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[24471-24481]:SwitchCase[24471-24481]"
    }, {
      "left" : "case '\\r':",
      "right" : "case '\\r':",
      "info" : "SwitchCase[24498-24508]:SwitchCase[24498-24508]"
    }, {
      "left" : "case '\\f':",
      "right" : "case '\\f':",
      "info" : "SwitchCase[24525-24535]:SwitchCase[24525-24535]"
    }, {
      "left" : "case ' ':",
      "right" : "case ' ':",
      "info" : "SwitchCase[24552-24561]:SwitchCase[24552-24561]"
    }, {
      "left" : "case '/':",
      "right" : "case '/':",
      "info" : "SwitchCase[24578-24587]:SwitchCase[24578-24587]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[24604-24613]:SwitchCase[24604-24613]"
    }, {
      "left" : "if (t.dataBuffer.toString().equals(\"script\"))",
      "right" : "if (t.dataBuffer.toString().equals(\"script\"))",
      "info" : "IfStatement[24634-24824]:IfStatement[24634-24824]"
    }, {
      "left" : "t.transition(ScriptDataEscaped);",
      "right" : "t.transition(ScriptDataEscaped);",
      "info" : "ExpressionStatement[24704-24736]:ExpressionStatement[24704-24736]"
    }, {
      "left" : "t.transition(ScriptDataDoubleEscaped);",
      "right" : "t.transition(ScriptDataDoubleEscaped);",
      "info" : "ExpressionStatement[24786-24824]:ExpressionStatement[24786-24824]"
    }, {
      "left" : "t.emit(c);",
      "right" : "t.emit(c);",
      "info" : "ExpressionStatement[24845-24855]:ExpressionStatement[24845-24855]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[24876-24882]:BreakStatement[24876-24882]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[24899-24907]:SwitchCase[24899-24907]"
    }, {
      "left" : "r.unconsume();",
      "right" : "r.unconsume();",
      "info" : "ExpressionStatement[24928-24942]:ExpressionStatement[24928-24942]"
    }, {
      "left" : "t.transition(ScriptDataDoubleEscaped);",
      "right" : "t.transition(ScriptDataDoubleEscaped);",
      "info" : "ExpressionStatement[24963-25001]:ExpressionStatement[24963-25001]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[25096-25100]:PrimitiveType[25096-25100]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[25101-25105]:SimpleName[25101-25105]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[25106-25117]:SingleVariableDeclaration[25106-25117]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[25119-25136]:SingleVariableDeclaration[25119-25136]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25138-26504]:Block[25138-26504]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[25152-25173]:VariableDeclarationStatement[25152-25173]"
    }, {
      "left" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\r':\n                case '\\f':\n                case ' ':\n                    break; // ignore whitespace\n                case '/':\n                    t.transition(SelfClosingStartTag);\n                    break;\n                case '>':\n                    t.emitTagPending();\n                    t.transition(Data);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.tagPending.newAttribute();\n                    r.unconsume();\n                    t.transition(AttributeName);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.transition(Data);\n                    break;\n                case '\"':\n                case '\\'':\n                case '<':\n                case '=':\n                    t.error(this);\n                    t.tagPending.newAttribute();\n                    t.tagPending.appendAttributeName(c);\n                    t.transition(AttributeName);\n                    break;\n                default: // A-Z, anything else\n                    t.tagPending.newAttribute();\n                    r.unconsume();\n                    t.transition(AttributeName);\n            }",
      "right" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\r':\n                case '\\f':\n                case ' ':\n                    break; // ignore whitespace\n                case '/':\n                    t.transition(SelfClosingStartTag);\n                    break;\n                case '>':\n                    t.emitTagPending();\n                    t.transition(Data);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.tagPending.newAttribute();\n                    r.unconsume();\n                    t.transition(AttributeName);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.transition(Data);\n                    break;\n                case '\"':\n                case '\\'':\n                case '<':\n                case '=':\n                    t.error(this);\n                    t.tagPending.newAttribute();\n                    t.tagPending.appendAttributeName(c);\n                    t.transition(AttributeName);\n                    break;\n                default: // A-Z, anything else\n                    t.tagPending.newAttribute();\n                    r.unconsume();\n                    t.transition(AttributeName);\n            }",
      "info" : "SwitchStatement[25186-26494]:SwitchStatement[25186-26494]"
    }, {
      "left" : "case '\\t':",
      "right" : "case '\\t':",
      "info" : "SwitchCase[25215-25225]:SwitchCase[25215-25225]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[25242-25252]:SwitchCase[25242-25252]"
    }, {
      "left" : "case '\\r':",
      "right" : "case '\\r':",
      "info" : "SwitchCase[25269-25279]:SwitchCase[25269-25279]"
    }, {
      "left" : "case '\\f':",
      "right" : "case '\\f':",
      "info" : "SwitchCase[25296-25306]:SwitchCase[25296-25306]"
    }, {
      "left" : "case ' ':",
      "right" : "case ' ':",
      "info" : "SwitchCase[25323-25332]:SwitchCase[25323-25332]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[25353-25359]:BreakStatement[25353-25359]"
    }, {
      "left" : "case '/':",
      "right" : "case '/':",
      "info" : "SwitchCase[25397-25406]:SwitchCase[25397-25406]"
    }, {
      "left" : "t.transition(SelfClosingStartTag);",
      "right" : "t.transition(SelfClosingStartTag);",
      "info" : "ExpressionStatement[25427-25461]:ExpressionStatement[25427-25461]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[25482-25488]:BreakStatement[25482-25488]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[25505-25514]:SwitchCase[25505-25514]"
    }, {
      "left" : "t.emitTagPending();",
      "right" : "t.emitTagPending();",
      "info" : "ExpressionStatement[25535-25554]:ExpressionStatement[25535-25554]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[25575-25594]:ExpressionStatement[25575-25594]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[25615-25621]:BreakStatement[25615-25621]"
    }, {
      "left" : "case nullChar:",
      "right" : "case nullChar:",
      "info" : "SwitchCase[25638-25652]:SwitchCase[25638-25652]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[25673-25687]:ExpressionStatement[25673-25687]"
    }, {
      "left" : "t.tagPending.newAttribute();",
      "right" : "t.tagPending.newAttribute();",
      "info" : "ExpressionStatement[25708-25736]:ExpressionStatement[25708-25736]"
    }, {
      "left" : "r.unconsume();",
      "right" : "r.unconsume();",
      "info" : "ExpressionStatement[25757-25771]:ExpressionStatement[25757-25771]"
    }, {
      "left" : "t.transition(AttributeName);",
      "right" : "t.transition(AttributeName);",
      "info" : "ExpressionStatement[25792-25820]:ExpressionStatement[25792-25820]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[25841-25847]:BreakStatement[25841-25847]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[25864-25873]:SwitchCase[25864-25873]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[25894-25911]:ExpressionStatement[25894-25911]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[25932-25951]:ExpressionStatement[25932-25951]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[25972-25978]:BreakStatement[25972-25978]"
    }, {
      "left" : "case '\"':",
      "right" : "case '\"':",
      "info" : "SwitchCase[25995-26004]:SwitchCase[25995-26004]"
    }, {
      "left" : "case '\\'':",
      "right" : "case '\\'':",
      "info" : "SwitchCase[26021-26031]:SwitchCase[26021-26031]"
    }, {
      "left" : "case '<':",
      "right" : "case '<':",
      "info" : "SwitchCase[26048-26057]:SwitchCase[26048-26057]"
    }, {
      "left" : "case '=':",
      "right" : "case '=':",
      "info" : "SwitchCase[26074-26083]:SwitchCase[26074-26083]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[26104-26118]:ExpressionStatement[26104-26118]"
    }, {
      "left" : "t.tagPending.newAttribute();",
      "right" : "t.tagPending.newAttribute();",
      "info" : "ExpressionStatement[26139-26167]:ExpressionStatement[26139-26167]"
    }, {
      "left" : "t.tagPending.appendAttributeName(c);",
      "right" : "t.tagPending.appendAttributeName(c);",
      "info" : "ExpressionStatement[26188-26224]:ExpressionStatement[26188-26224]"
    }, {
      "left" : "t.transition(AttributeName);",
      "right" : "t.transition(AttributeName);",
      "info" : "ExpressionStatement[26245-26273]:ExpressionStatement[26245-26273]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[26294-26300]:BreakStatement[26294-26300]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[26317-26325]:SwitchCase[26317-26325]"
    }, {
      "left" : "t.tagPending.newAttribute();",
      "right" : "t.tagPending.newAttribute();",
      "info" : "ExpressionStatement[26368-26396]:ExpressionStatement[26368-26396]"
    }, {
      "left" : "r.unconsume();",
      "right" : "r.unconsume();",
      "info" : "ExpressionStatement[26417-26431]:ExpressionStatement[26417-26431]"
    }, {
      "left" : "t.transition(AttributeName);",
      "right" : "t.transition(AttributeName);",
      "info" : "ExpressionStatement[26452-26480]:ExpressionStatement[26452-26480]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[26578-26582]:PrimitiveType[26578-26582]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[26583-26587]:SimpleName[26583-26587]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[26588-26599]:SingleVariableDeclaration[26588-26599]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[26601-26618]:SingleVariableDeclaration[26601-26618]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26620-27972]:Block[26620-27972]"
    }, {
      "left" : "String name = r.consumeToAny('\\t', '\\n', '\\r', '\\f', ' ', '/', '=', '>', nullChar, '\"', '\\'', '<');",
      "right" : "String name = r.consumeToAny('\\t', '\\n', '\\r', '\\f', ' ', '/', '=', '>', nullChar, '\"', '\\'', '<');",
      "info" : "VariableDeclarationStatement[26634-26733]:VariableDeclarationStatement[26634-26733]"
    }, {
      "left" : "t.tagPending.appendAttributeName(name.toLowerCase());",
      "right" : "t.tagPending.appendAttributeName(name.toLowerCase());",
      "info" : "ExpressionStatement[26746-26799]:ExpressionStatement[26746-26799]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[26813-26834]:VariableDeclarationStatement[26813-26834]"
    }, {
      "left" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\r':\n                case '\\f':\n                case ' ':\n                    t.transition(AfterAttributeName);\n                    break;\n                case '/':\n                    t.transition(SelfClosingStartTag);\n                    break;\n                case '=':\n                    t.transition(BeforeAttributeValue);\n                    break;\n                case '>':\n                    t.emitTagPending();\n                    t.transition(Data);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.tagPending.appendAttributeName(replacementChar);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.transition(Data);\n                    break;\n                case '\"':\n                case '\\'':\n                case '<':\n                    t.error(this);\n                    t.tagPending.appendAttributeName(c);\n                // no default, as covered in consumeToAny\n            }",
      "right" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\r':\n                case '\\f':\n                case ' ':\n                    t.transition(AfterAttributeName);\n                    break;\n                case '/':\n                    t.transition(SelfClosingStartTag);\n                    break;\n                case '=':\n                    t.transition(BeforeAttributeValue);\n                    break;\n                case '>':\n                    t.emitTagPending();\n                    t.transition(Data);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.tagPending.appendAttributeName(replacementChar);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.transition(Data);\n                    break;\n                case '\"':\n                case '\\'':\n                case '<':\n                    t.error(this);\n                    t.tagPending.appendAttributeName(c);\n                // no default, as covered in consumeToAny\n            }",
      "info" : "SwitchStatement[26847-27962]:SwitchStatement[26847-27962]"
    }, {
      "left" : "case '\\t':",
      "right" : "case '\\t':",
      "info" : "SwitchCase[26876-26886]:SwitchCase[26876-26886]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[26903-26913]:SwitchCase[26903-26913]"
    }, {
      "left" : "case '\\r':",
      "right" : "case '\\r':",
      "info" : "SwitchCase[26930-26940]:SwitchCase[26930-26940]"
    }, {
      "left" : "case '\\f':",
      "right" : "case '\\f':",
      "info" : "SwitchCase[26957-26967]:SwitchCase[26957-26967]"
    }, {
      "left" : "case ' ':",
      "right" : "case ' ':",
      "info" : "SwitchCase[26984-26993]:SwitchCase[26984-26993]"
    }, {
      "left" : "t.transition(AfterAttributeName);",
      "right" : "t.transition(AfterAttributeName);",
      "info" : "ExpressionStatement[27014-27047]:ExpressionStatement[27014-27047]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[27068-27074]:BreakStatement[27068-27074]"
    }, {
      "left" : "case '/':",
      "right" : "case '/':",
      "info" : "SwitchCase[27091-27100]:SwitchCase[27091-27100]"
    }, {
      "left" : "t.transition(SelfClosingStartTag);",
      "right" : "t.transition(SelfClosingStartTag);",
      "info" : "ExpressionStatement[27121-27155]:ExpressionStatement[27121-27155]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[27176-27182]:BreakStatement[27176-27182]"
    }, {
      "left" : "case '=':",
      "right" : "case '=':",
      "info" : "SwitchCase[27199-27208]:SwitchCase[27199-27208]"
    }, {
      "left" : "t.transition(BeforeAttributeValue);",
      "right" : "t.transition(BeforeAttributeValue);",
      "info" : "ExpressionStatement[27229-27264]:ExpressionStatement[27229-27264]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[27285-27291]:BreakStatement[27285-27291]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[27308-27317]:SwitchCase[27308-27317]"
    }, {
      "left" : "t.emitTagPending();",
      "right" : "t.emitTagPending();",
      "info" : "ExpressionStatement[27338-27357]:ExpressionStatement[27338-27357]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[27378-27397]:ExpressionStatement[27378-27397]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[27418-27424]:BreakStatement[27418-27424]"
    }, {
      "left" : "case nullChar:",
      "right" : "case nullChar:",
      "info" : "SwitchCase[27441-27455]:SwitchCase[27441-27455]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[27476-27490]:ExpressionStatement[27476-27490]"
    }, {
      "left" : "t.tagPending.appendAttributeName(replacementChar);",
      "right" : "t.tagPending.appendAttributeName(replacementChar);",
      "info" : "ExpressionStatement[27511-27561]:ExpressionStatement[27511-27561]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[27582-27588]:BreakStatement[27582-27588]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[27605-27614]:SwitchCase[27605-27614]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[27635-27652]:ExpressionStatement[27635-27652]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[27673-27692]:ExpressionStatement[27673-27692]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[27713-27719]:BreakStatement[27713-27719]"
    }, {
      "left" : "case '\"':",
      "right" : "case '\"':",
      "info" : "SwitchCase[27736-27745]:SwitchCase[27736-27745]"
    }, {
      "left" : "case '\\'':",
      "right" : "case '\\'':",
      "info" : "SwitchCase[27762-27772]:SwitchCase[27762-27772]"
    }, {
      "left" : "case '<':",
      "right" : "case '<':",
      "info" : "SwitchCase[27789-27798]:SwitchCase[27789-27798]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[27819-27833]:ExpressionStatement[27819-27833]"
    }, {
      "left" : "t.tagPending.appendAttributeName(c);",
      "right" : "t.tagPending.appendAttributeName(c);",
      "info" : "ExpressionStatement[27854-27890]:ExpressionStatement[27854-27890]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[28013-28017]:PrimitiveType[28013-28017]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[28018-28022]:SimpleName[28018-28022]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[28023-28034]:SingleVariableDeclaration[28023-28034]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[28036-28053]:SingleVariableDeclaration[28036-28053]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28055-29500]:Block[28055-29500]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[28069-28090]:VariableDeclarationStatement[28069-28090]"
    }, {
      "left" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\r':\n                case '\\f':\n                case ' ':\n                    // ignore\n                    break;\n                case '/':\n                    t.transition(SelfClosingStartTag);\n                    break;\n                case '=':\n                    t.transition(BeforeAttributeValue);\n                    break;\n                case '>':\n                    t.emitTagPending();\n                    t.transition(Data);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.tagPending.appendAttributeName(replacementChar);\n                    t.transition(AttributeName);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.transition(Data);\n                    break;\n                case '\"':\n                case '\\'':\n                case '<':\n                    t.error(this);\n                    t.tagPending.newAttribute();\n                    t.tagPending.appendAttributeName(c);\n                    t.transition(AttributeName);\n                    break;\n                default: // A-Z, anything else\n                    t.tagPending.newAttribute();\n                    r.unconsume();\n                    t.transition(AttributeName);\n            }",
      "right" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\r':\n                case '\\f':\n                case ' ':\n                    // ignore\n                    break;\n                case '/':\n                    t.transition(SelfClosingStartTag);\n                    break;\n                case '=':\n                    t.transition(BeforeAttributeValue);\n                    break;\n                case '>':\n                    t.emitTagPending();\n                    t.transition(Data);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.tagPending.appendAttributeName(replacementChar);\n                    t.transition(AttributeName);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.transition(Data);\n                    break;\n                case '\"':\n                case '\\'':\n                case '<':\n                    t.error(this);\n                    t.tagPending.newAttribute();\n                    t.tagPending.appendAttributeName(c);\n                    t.transition(AttributeName);\n                    break;\n                default: // A-Z, anything else\n                    t.tagPending.newAttribute();\n                    r.unconsume();\n                    t.transition(AttributeName);\n            }",
      "info" : "SwitchStatement[28103-29490]:SwitchStatement[28103-29490]"
    }, {
      "left" : "case '\\t':",
      "right" : "case '\\t':",
      "info" : "SwitchCase[28132-28142]:SwitchCase[28132-28142]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[28159-28169]:SwitchCase[28159-28169]"
    }, {
      "left" : "case '\\r':",
      "right" : "case '\\r':",
      "info" : "SwitchCase[28186-28196]:SwitchCase[28186-28196]"
    }, {
      "left" : "case '\\f':",
      "right" : "case '\\f':",
      "info" : "SwitchCase[28213-28223]:SwitchCase[28213-28223]"
    }, {
      "left" : "case ' ':",
      "right" : "case ' ':",
      "info" : "SwitchCase[28240-28249]:SwitchCase[28240-28249]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[28300-28306]:BreakStatement[28300-28306]"
    }, {
      "left" : "case '/':",
      "right" : "case '/':",
      "info" : "SwitchCase[28323-28332]:SwitchCase[28323-28332]"
    }, {
      "left" : "t.transition(SelfClosingStartTag);",
      "right" : "t.transition(SelfClosingStartTag);",
      "info" : "ExpressionStatement[28353-28387]:ExpressionStatement[28353-28387]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[28408-28414]:BreakStatement[28408-28414]"
    }, {
      "left" : "case '=':",
      "right" : "case '=':",
      "info" : "SwitchCase[28431-28440]:SwitchCase[28431-28440]"
    }, {
      "left" : "t.transition(BeforeAttributeValue);",
      "right" : "t.transition(BeforeAttributeValue);",
      "info" : "ExpressionStatement[28461-28496]:ExpressionStatement[28461-28496]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[28517-28523]:BreakStatement[28517-28523]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[28540-28549]:SwitchCase[28540-28549]"
    }, {
      "left" : "t.emitTagPending();",
      "right" : "t.emitTagPending();",
      "info" : "ExpressionStatement[28570-28589]:ExpressionStatement[28570-28589]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[28610-28629]:ExpressionStatement[28610-28629]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[28650-28656]:BreakStatement[28650-28656]"
    }, {
      "left" : "case nullChar:",
      "right" : "case nullChar:",
      "info" : "SwitchCase[28673-28687]:SwitchCase[28673-28687]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[28708-28722]:ExpressionStatement[28708-28722]"
    }, {
      "left" : "t.tagPending.appendAttributeName(replacementChar);",
      "right" : "t.tagPending.appendAttributeName(replacementChar);",
      "info" : "ExpressionStatement[28743-28793]:ExpressionStatement[28743-28793]"
    }, {
      "left" : "t.transition(AttributeName);",
      "right" : "t.transition(AttributeName);",
      "info" : "ExpressionStatement[28814-28842]:ExpressionStatement[28814-28842]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[28863-28869]:BreakStatement[28863-28869]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[28886-28895]:SwitchCase[28886-28895]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[28916-28933]:ExpressionStatement[28916-28933]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[28954-28973]:ExpressionStatement[28954-28973]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[28994-29000]:BreakStatement[28994-29000]"
    }, {
      "left" : "case '\"':",
      "right" : "case '\"':",
      "info" : "SwitchCase[29017-29026]:SwitchCase[29017-29026]"
    }, {
      "left" : "case '\\'':",
      "right" : "case '\\'':",
      "info" : "SwitchCase[29043-29053]:SwitchCase[29043-29053]"
    }, {
      "left" : "case '<':",
      "right" : "case '<':",
      "info" : "SwitchCase[29070-29079]:SwitchCase[29070-29079]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[29100-29114]:ExpressionStatement[29100-29114]"
    }, {
      "left" : "t.tagPending.newAttribute();",
      "right" : "t.tagPending.newAttribute();",
      "info" : "ExpressionStatement[29135-29163]:ExpressionStatement[29135-29163]"
    }, {
      "left" : "t.tagPending.appendAttributeName(c);",
      "right" : "t.tagPending.appendAttributeName(c);",
      "info" : "ExpressionStatement[29184-29220]:ExpressionStatement[29184-29220]"
    }, {
      "left" : "t.transition(AttributeName);",
      "right" : "t.transition(AttributeName);",
      "info" : "ExpressionStatement[29241-29269]:ExpressionStatement[29241-29269]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[29290-29296]:BreakStatement[29290-29296]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[29313-29321]:SwitchCase[29313-29321]"
    }, {
      "left" : "t.tagPending.newAttribute();",
      "right" : "t.tagPending.newAttribute();",
      "info" : "ExpressionStatement[29364-29392]:ExpressionStatement[29364-29392]"
    }, {
      "left" : "r.unconsume();",
      "right" : "r.unconsume();",
      "info" : "ExpressionStatement[29413-29427]:ExpressionStatement[29413-29427]"
    }, {
      "left" : "t.transition(AttributeName);",
      "right" : "t.transition(AttributeName);",
      "info" : "ExpressionStatement[29448-29476]:ExpressionStatement[29448-29476]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[29543-29547]:PrimitiveType[29543-29547]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[29548-29552]:SimpleName[29548-29552]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[29553-29564]:SingleVariableDeclaration[29553-29564]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[29566-29583]:SingleVariableDeclaration[29566-29583]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29585-31139]:Block[29585-31139]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[29599-29620]:VariableDeclarationStatement[29599-29620]"
    }, {
      "left" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\r':\n                case '\\f':\n                case ' ':\n                    // ignore\n                    break;\n                case '\"':\n                    t.transition(AttributeValue_doubleQuoted);\n                    break;\n                case '&':\n                    r.unconsume();\n                    t.transition(AttributeValue_unquoted);\n                    break;\n                case '\\'':\n                    t.transition(AttributeValue_singleQuoted);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.tagPending.appendAttributeValue(replacementChar);\n                    t.transition(AttributeValue_unquoted);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.transition(Data);\n                    break;\n                case '>':\n                    t.error(this);\n                    t.emitTagPending();\n                    t.transition(Data);\n                    break;\n                case '<':\n                case '=':\n                case '`':\n                    t.error(this);\n                    t.tagPending.appendAttributeValue(c);\n                    t.transition(AttributeValue_unquoted);\n                    break;\n                default:\n                    r.unconsume();\n                    t.transition(AttributeValue_unquoted);\n            }",
      "right" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\r':\n                case '\\f':\n                case ' ':\n                    // ignore\n                    break;\n                case '\"':\n                    t.transition(AttributeValue_doubleQuoted);\n                    break;\n                case '&':\n                    r.unconsume();\n                    t.transition(AttributeValue_unquoted);\n                    break;\n                case '\\'':\n                    t.transition(AttributeValue_singleQuoted);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.tagPending.appendAttributeValue(replacementChar);\n                    t.transition(AttributeValue_unquoted);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.transition(Data);\n                    break;\n                case '>':\n                    t.error(this);\n                    t.emitTagPending();\n                    t.transition(Data);\n                    break;\n                case '<':\n                case '=':\n                case '`':\n                    t.error(this);\n                    t.tagPending.appendAttributeValue(c);\n                    t.transition(AttributeValue_unquoted);\n                    break;\n                default:\n                    r.unconsume();\n                    t.transition(AttributeValue_unquoted);\n            }",
      "info" : "SwitchStatement[29633-31129]:SwitchStatement[29633-31129]"
    }, {
      "left" : "case '\\t':",
      "right" : "case '\\t':",
      "info" : "SwitchCase[29662-29672]:SwitchCase[29662-29672]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[29689-29699]:SwitchCase[29689-29699]"
    }, {
      "left" : "case '\\r':",
      "right" : "case '\\r':",
      "info" : "SwitchCase[29716-29726]:SwitchCase[29716-29726]"
    }, {
      "left" : "case '\\f':",
      "right" : "case '\\f':",
      "info" : "SwitchCase[29743-29753]:SwitchCase[29743-29753]"
    }, {
      "left" : "case ' ':",
      "right" : "case ' ':",
      "info" : "SwitchCase[29770-29779]:SwitchCase[29770-29779]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[29830-29836]:BreakStatement[29830-29836]"
    }, {
      "left" : "case '\"':",
      "right" : "case '\"':",
      "info" : "SwitchCase[29853-29862]:SwitchCase[29853-29862]"
    }, {
      "left" : "t.transition(AttributeValue_doubleQuoted);",
      "right" : "t.transition(AttributeValue_doubleQuoted);",
      "info" : "ExpressionStatement[29883-29925]:ExpressionStatement[29883-29925]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[29946-29952]:BreakStatement[29946-29952]"
    }, {
      "left" : "case '&':",
      "right" : "case '&':",
      "info" : "SwitchCase[29969-29978]:SwitchCase[29969-29978]"
    }, {
      "left" : "r.unconsume();",
      "right" : "r.unconsume();",
      "info" : "ExpressionStatement[29999-30013]:ExpressionStatement[29999-30013]"
    }, {
      "left" : "t.transition(AttributeValue_unquoted);",
      "right" : "t.transition(AttributeValue_unquoted);",
      "info" : "ExpressionStatement[30034-30072]:ExpressionStatement[30034-30072]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[30093-30099]:BreakStatement[30093-30099]"
    }, {
      "left" : "case '\\'':",
      "right" : "case '\\'':",
      "info" : "SwitchCase[30116-30126]:SwitchCase[30116-30126]"
    }, {
      "left" : "t.transition(AttributeValue_singleQuoted);",
      "right" : "t.transition(AttributeValue_singleQuoted);",
      "info" : "ExpressionStatement[30147-30189]:ExpressionStatement[30147-30189]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[30210-30216]:BreakStatement[30210-30216]"
    }, {
      "left" : "case nullChar:",
      "right" : "case nullChar:",
      "info" : "SwitchCase[30233-30247]:SwitchCase[30233-30247]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[30268-30282]:ExpressionStatement[30268-30282]"
    }, {
      "left" : "t.tagPending.appendAttributeValue(replacementChar);",
      "right" : "t.tagPending.appendAttributeValue(replacementChar);",
      "info" : "ExpressionStatement[30303-30354]:ExpressionStatement[30303-30354]"
    }, {
      "left" : "t.transition(AttributeValue_unquoted);",
      "right" : "t.transition(AttributeValue_unquoted);",
      "info" : "ExpressionStatement[30375-30413]:ExpressionStatement[30375-30413]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[30434-30440]:BreakStatement[30434-30440]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[30457-30466]:SwitchCase[30457-30466]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[30487-30504]:ExpressionStatement[30487-30504]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[30525-30544]:ExpressionStatement[30525-30544]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[30565-30571]:BreakStatement[30565-30571]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[30588-30597]:SwitchCase[30588-30597]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[30618-30632]:ExpressionStatement[30618-30632]"
    }, {
      "left" : "t.emitTagPending();",
      "right" : "t.emitTagPending();",
      "info" : "ExpressionStatement[30653-30672]:ExpressionStatement[30653-30672]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[30693-30712]:ExpressionStatement[30693-30712]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[30733-30739]:BreakStatement[30733-30739]"
    }, {
      "left" : "case '<':",
      "right" : "case '<':",
      "info" : "SwitchCase[30756-30765]:SwitchCase[30756-30765]"
    }, {
      "left" : "case '=':",
      "right" : "case '=':",
      "info" : "SwitchCase[30782-30791]:SwitchCase[30782-30791]"
    }, {
      "left" : "case '`':",
      "right" : "case '`':",
      "info" : "SwitchCase[30808-30817]:SwitchCase[30808-30817]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[30838-30852]:ExpressionStatement[30838-30852]"
    }, {
      "left" : "t.tagPending.appendAttributeValue(c);",
      "right" : "t.tagPending.appendAttributeValue(c);",
      "info" : "ExpressionStatement[30873-30910]:ExpressionStatement[30873-30910]"
    }, {
      "left" : "t.transition(AttributeValue_unquoted);",
      "right" : "t.transition(AttributeValue_unquoted);",
      "info" : "ExpressionStatement[30931-30969]:ExpressionStatement[30931-30969]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[30990-30996]:BreakStatement[30990-30996]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[31013-31021]:SwitchCase[31013-31021]"
    }, {
      "left" : "r.unconsume();",
      "right" : "r.unconsume();",
      "info" : "ExpressionStatement[31042-31056]:ExpressionStatement[31042-31056]"
    }, {
      "left" : "t.transition(AttributeValue_unquoted);",
      "right" : "t.transition(AttributeValue_unquoted);",
      "info" : "ExpressionStatement[31077-31115]:ExpressionStatement[31077-31115]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[31189-31193]:PrimitiveType[31189-31193]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[31194-31198]:SimpleName[31194-31198]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[31199-31210]:SingleVariableDeclaration[31199-31210]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[31212-31229]:SingleVariableDeclaration[31212-31229]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31231-32266]:Block[31231-32266]"
    }, {
      "left" : "String value = r.consumeToAny('\"', '&', nullChar);",
      "right" : "String value = r.consumeToAny('\"', '&', nullChar);",
      "info" : "VariableDeclarationStatement[31245-31295]:VariableDeclarationStatement[31245-31295]"
    }, {
      "left" : "if (value.length() > 0)",
      "right" : "if (value.length() > 0)",
      "info" : "IfStatement[31308-31389]:IfStatement[31308-31389]"
    }, {
      "left" : "t.tagPending.appendAttributeValue(value);",
      "right" : "t.tagPending.appendAttributeValue(value);",
      "info" : "ExpressionStatement[31348-31389]:ExpressionStatement[31348-31389]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[31403-31424]:VariableDeclarationStatement[31403-31424]"
    }, {
      "left" : "switch (c) {\n                case '\"':\n                    t.transition(AfterAttributeValue_quoted);\n                    break;\n                case '&':\n                    Character ref = t.consumeCharacterReference('\"', true);\n                    if (ref != null)\n                        t.tagPending.appendAttributeValue(ref);\n                    else\n                        t.tagPending.appendAttributeValue('&');\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.tagPending.appendAttributeValue(replacementChar);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.transition(Data);\n                    break;\n                // no default, handled in consume to any above\n            }",
      "right" : "switch (c) {\n                case '\"':\n                    t.transition(AfterAttributeValue_quoted);\n                    break;\n                case '&':\n                    Character ref = t.consumeCharacterReference('\"', true);\n                    if (ref != null)\n                        t.tagPending.appendAttributeValue(ref);\n                    else\n                        t.tagPending.appendAttributeValue('&');\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.tagPending.appendAttributeValue(replacementChar);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.transition(Data);\n                    break;\n                // no default, handled in consume to any above\n            }",
      "info" : "SwitchStatement[31437-32256]:SwitchStatement[31437-32256]"
    }, {
      "left" : "case '\"':",
      "right" : "case '\"':",
      "info" : "SwitchCase[31466-31475]:SwitchCase[31466-31475]"
    }, {
      "left" : "t.transition(AfterAttributeValue_quoted);",
      "right" : "t.transition(AfterAttributeValue_quoted);",
      "info" : "ExpressionStatement[31496-31537]:ExpressionStatement[31496-31537]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[31558-31564]:BreakStatement[31558-31564]"
    }, {
      "left" : "case '&':",
      "right" : "case '&':",
      "info" : "SwitchCase[31581-31590]:SwitchCase[31581-31590]"
    }, {
      "left" : "Character ref = t.consumeCharacterReference('\"', true);",
      "right" : "Character ref = t.consumeCharacterReference('\"', true);",
      "info" : "VariableDeclarationStatement[31611-31666]:VariableDeclarationStatement[31611-31666]"
    }, {
      "left" : "if (ref != null)",
      "right" : "if (ref != null)",
      "info" : "IfStatement[31687-31856]:IfStatement[31687-31856]"
    }, {
      "left" : "t.tagPending.appendAttributeValue(ref);",
      "right" : "t.tagPending.appendAttributeValue(ref);",
      "info" : "ExpressionStatement[31728-31767]:ExpressionStatement[31728-31767]"
    }, {
      "left" : "t.tagPending.appendAttributeValue('&');",
      "right" : "t.tagPending.appendAttributeValue('&');",
      "info" : "ExpressionStatement[31817-31856]:ExpressionStatement[31817-31856]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[31877-31883]:BreakStatement[31877-31883]"
    }, {
      "left" : "case nullChar:",
      "right" : "case nullChar:",
      "info" : "SwitchCase[31900-31914]:SwitchCase[31900-31914]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[31935-31949]:ExpressionStatement[31935-31949]"
    }, {
      "left" : "t.tagPending.appendAttributeValue(replacementChar);",
      "right" : "t.tagPending.appendAttributeValue(replacementChar);",
      "info" : "ExpressionStatement[31970-32021]:ExpressionStatement[31970-32021]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[32042-32048]:BreakStatement[32042-32048]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[32065-32074]:SwitchCase[32065-32074]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[32095-32112]:ExpressionStatement[32095-32112]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[32133-32152]:ExpressionStatement[32133-32152]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[32173-32179]:BreakStatement[32173-32179]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[32316-32320]:PrimitiveType[32316-32320]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[32321-32325]:SimpleName[32321-32325]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[32326-32337]:SingleVariableDeclaration[32326-32337]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[32339-32356]:SingleVariableDeclaration[32339-32356]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32358-33396]:Block[32358-33396]"
    }, {
      "left" : "String value = r.consumeToAny('\\'', '&', nullChar);",
      "right" : "String value = r.consumeToAny('\\'', '&', nullChar);",
      "info" : "VariableDeclarationStatement[32372-32423]:VariableDeclarationStatement[32372-32423]"
    }, {
      "left" : "if (value.length() > 0)",
      "right" : "if (value.length() > 0)",
      "info" : "IfStatement[32436-32517]:IfStatement[32436-32517]"
    }, {
      "left" : "t.tagPending.appendAttributeValue(value);",
      "right" : "t.tagPending.appendAttributeValue(value);",
      "info" : "ExpressionStatement[32476-32517]:ExpressionStatement[32476-32517]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[32531-32552]:VariableDeclarationStatement[32531-32552]"
    }, {
      "left" : "switch (c) {\n                case '\\'':\n                    t.transition(AfterAttributeValue_quoted);\n                    break;\n                case '&':\n                    Character ref = t.consumeCharacterReference('\\'', true);\n                    if (ref != null)\n                        t.tagPending.appendAttributeValue(ref);\n                    else\n                        t.tagPending.appendAttributeValue('&');\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.tagPending.appendAttributeValue(replacementChar);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.transition(Data);\n                    break;\n                // no default, handled in consume to any above\n            }",
      "right" : "switch (c) {\n                case '\\'':\n                    t.transition(AfterAttributeValue_quoted);\n                    break;\n                case '&':\n                    Character ref = t.consumeCharacterReference('\\'', true);\n                    if (ref != null)\n                        t.tagPending.appendAttributeValue(ref);\n                    else\n                        t.tagPending.appendAttributeValue('&');\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.tagPending.appendAttributeValue(replacementChar);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.transition(Data);\n                    break;\n                // no default, handled in consume to any above\n            }",
      "info" : "SwitchStatement[32565-33386]:SwitchStatement[32565-33386]"
    }, {
      "left" : "case '\\'':",
      "right" : "case '\\'':",
      "info" : "SwitchCase[32594-32604]:SwitchCase[32594-32604]"
    }, {
      "left" : "t.transition(AfterAttributeValue_quoted);",
      "right" : "t.transition(AfterAttributeValue_quoted);",
      "info" : "ExpressionStatement[32625-32666]:ExpressionStatement[32625-32666]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[32687-32693]:BreakStatement[32687-32693]"
    }, {
      "left" : "case '&':",
      "right" : "case '&':",
      "info" : "SwitchCase[32710-32719]:SwitchCase[32710-32719]"
    }, {
      "left" : "Character ref = t.consumeCharacterReference('\\'', true);",
      "right" : "Character ref = t.consumeCharacterReference('\\'', true);",
      "info" : "VariableDeclarationStatement[32740-32796]:VariableDeclarationStatement[32740-32796]"
    }, {
      "left" : "if (ref != null)",
      "right" : "if (ref != null)",
      "info" : "IfStatement[32817-32986]:IfStatement[32817-32986]"
    }, {
      "left" : "t.tagPending.appendAttributeValue(ref);",
      "right" : "t.tagPending.appendAttributeValue(ref);",
      "info" : "ExpressionStatement[32858-32897]:ExpressionStatement[32858-32897]"
    }, {
      "left" : "t.tagPending.appendAttributeValue('&');",
      "right" : "t.tagPending.appendAttributeValue('&');",
      "info" : "ExpressionStatement[32947-32986]:ExpressionStatement[32947-32986]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[33007-33013]:BreakStatement[33007-33013]"
    }, {
      "left" : "case nullChar:",
      "right" : "case nullChar:",
      "info" : "SwitchCase[33030-33044]:SwitchCase[33030-33044]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[33065-33079]:ExpressionStatement[33065-33079]"
    }, {
      "left" : "t.tagPending.appendAttributeValue(replacementChar);",
      "right" : "t.tagPending.appendAttributeValue(replacementChar);",
      "info" : "ExpressionStatement[33100-33151]:ExpressionStatement[33100-33151]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[33172-33178]:BreakStatement[33172-33178]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[33195-33204]:SwitchCase[33195-33204]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[33225-33242]:ExpressionStatement[33225-33242]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[33263-33282]:ExpressionStatement[33263-33282]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[33303-33309]:BreakStatement[33303-33309]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[33442-33446]:PrimitiveType[33442-33446]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[33447-33451]:SimpleName[33447-33451]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[33452-33463]:SingleVariableDeclaration[33452-33463]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[33465-33482]:SingleVariableDeclaration[33465-33482]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33484-35060]:Block[33484-35060]"
    }, {
      "left" : "String value = r.consumeToAny('\\t', '\\n', '\\r', '\\f', ' ', '&', '>', nullChar, '\"', '\\'', '<', '=', '`');",
      "right" : "String value = r.consumeToAny('\\t', '\\n', '\\r', '\\f', ' ', '&', '>', nullChar, '\"', '\\'', '<', '=', '`');",
      "info" : "VariableDeclarationStatement[33498-33603]:VariableDeclarationStatement[33498-33603]"
    }, {
      "left" : "if (value.length() > 0)",
      "right" : "if (value.length() > 0)",
      "info" : "IfStatement[33616-33697]:IfStatement[33616-33697]"
    }, {
      "left" : "t.tagPending.appendAttributeValue(value);",
      "right" : "t.tagPending.appendAttributeValue(value);",
      "info" : "ExpressionStatement[33656-33697]:ExpressionStatement[33656-33697]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[33711-33732]:VariableDeclarationStatement[33711-33732]"
    }, {
      "left" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\r':\n                case '\\f':\n                case ' ':\n                    t.transition(BeforeAttributeName);\n                    break;\n                case '&':\n                    Character ref = t.consumeCharacterReference('>', true);\n                    if (ref != null)\n                        t.tagPending.appendAttributeValue(ref);\n                    else\n                        t.tagPending.appendAttributeValue('&');\n                    break;\n                case '>':\n                    t.emitTagPending();\n                    t.transition(Data);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.tagPending.appendAttributeValue(replacementChar);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.transition(Data);\n                    break;\n                case '\"':\n                case '\\'':\n                case '<':\n                case '=':\n                case '`':\n                    t.error(this);\n                    t.tagPending.appendAttributeValue(c);\n                    break;\n                // no default, handled in consume to any above\n            }",
      "right" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\r':\n                case '\\f':\n                case ' ':\n                    t.transition(BeforeAttributeName);\n                    break;\n                case '&':\n                    Character ref = t.consumeCharacterReference('>', true);\n                    if (ref != null)\n                        t.tagPending.appendAttributeValue(ref);\n                    else\n                        t.tagPending.appendAttributeValue('&');\n                    break;\n                case '>':\n                    t.emitTagPending();\n                    t.transition(Data);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.tagPending.appendAttributeValue(replacementChar);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.transition(Data);\n                    break;\n                case '\"':\n                case '\\'':\n                case '<':\n                case '=':\n                case '`':\n                    t.error(this);\n                    t.tagPending.appendAttributeValue(c);\n                    break;\n                // no default, handled in consume to any above\n            }",
      "info" : "SwitchStatement[33745-35049]:SwitchStatement[33745-35049]"
    }, {
      "left" : "case '\\t':",
      "right" : "case '\\t':",
      "info" : "SwitchCase[33774-33784]:SwitchCase[33774-33784]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[33801-33811]:SwitchCase[33801-33811]"
    }, {
      "left" : "case '\\r':",
      "right" : "case '\\r':",
      "info" : "SwitchCase[33828-33838]:SwitchCase[33828-33838]"
    }, {
      "left" : "case '\\f':",
      "right" : "case '\\f':",
      "info" : "SwitchCase[33855-33865]:SwitchCase[33855-33865]"
    }, {
      "left" : "case ' ':",
      "right" : "case ' ':",
      "info" : "SwitchCase[33882-33891]:SwitchCase[33882-33891]"
    }, {
      "left" : "t.transition(BeforeAttributeName);",
      "right" : "t.transition(BeforeAttributeName);",
      "info" : "ExpressionStatement[33912-33946]:ExpressionStatement[33912-33946]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[33967-33973]:BreakStatement[33967-33973]"
    }, {
      "left" : "case '&':",
      "right" : "case '&':",
      "info" : "SwitchCase[33990-33999]:SwitchCase[33990-33999]"
    }, {
      "left" : "Character ref = t.consumeCharacterReference('>', true);",
      "right" : "Character ref = t.consumeCharacterReference('>', true);",
      "info" : "VariableDeclarationStatement[34020-34075]:VariableDeclarationStatement[34020-34075]"
    }, {
      "left" : "if (ref != null)",
      "right" : "if (ref != null)",
      "info" : "IfStatement[34096-34265]:IfStatement[34096-34265]"
    }, {
      "left" : "t.tagPending.appendAttributeValue(ref);",
      "right" : "t.tagPending.appendAttributeValue(ref);",
      "info" : "ExpressionStatement[34137-34176]:ExpressionStatement[34137-34176]"
    }, {
      "left" : "t.tagPending.appendAttributeValue('&');",
      "right" : "t.tagPending.appendAttributeValue('&');",
      "info" : "ExpressionStatement[34226-34265]:ExpressionStatement[34226-34265]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[34286-34292]:BreakStatement[34286-34292]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[34309-34318]:SwitchCase[34309-34318]"
    }, {
      "left" : "t.emitTagPending();",
      "right" : "t.emitTagPending();",
      "info" : "ExpressionStatement[34339-34358]:ExpressionStatement[34339-34358]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[34379-34398]:ExpressionStatement[34379-34398]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[34419-34425]:BreakStatement[34419-34425]"
    }, {
      "left" : "case nullChar:",
      "right" : "case nullChar:",
      "info" : "SwitchCase[34442-34456]:SwitchCase[34442-34456]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[34477-34491]:ExpressionStatement[34477-34491]"
    }, {
      "left" : "t.tagPending.appendAttributeValue(replacementChar);",
      "right" : "t.tagPending.appendAttributeValue(replacementChar);",
      "info" : "ExpressionStatement[34512-34563]:ExpressionStatement[34512-34563]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[34584-34590]:BreakStatement[34584-34590]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[34607-34616]:SwitchCase[34607-34616]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[34637-34654]:ExpressionStatement[34637-34654]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[34675-34694]:ExpressionStatement[34675-34694]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[34715-34721]:BreakStatement[34715-34721]"
    }, {
      "left" : "case '\"':",
      "right" : "case '\"':",
      "info" : "SwitchCase[34738-34747]:SwitchCase[34738-34747]"
    }, {
      "left" : "case '\\'':",
      "right" : "case '\\'':",
      "info" : "SwitchCase[34764-34774]:SwitchCase[34764-34774]"
    }, {
      "left" : "case '<':",
      "right" : "case '<':",
      "info" : "SwitchCase[34791-34800]:SwitchCase[34791-34800]"
    }, {
      "left" : "case '=':",
      "right" : "case '=':",
      "info" : "SwitchCase[34817-34826]:SwitchCase[34817-34826]"
    }, {
      "left" : "case '`':",
      "right" : "case '`':",
      "info" : "SwitchCase[34843-34852]:SwitchCase[34843-34852]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[34873-34887]:ExpressionStatement[34873-34887]"
    }, {
      "left" : "t.tagPending.appendAttributeValue(c);",
      "right" : "t.tagPending.appendAttributeValue(c);",
      "info" : "ExpressionStatement[34908-34945]:ExpressionStatement[34908-34945]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[34966-34972]:BreakStatement[34966-34972]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[35172-35176]:PrimitiveType[35172-35176]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[35177-35181]:SimpleName[35177-35181]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[35182-35193]:SingleVariableDeclaration[35182-35193]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[35195-35212]:SingleVariableDeclaration[35195-35212]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35214-36037]:Block[35214-36037]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[35228-35249]:VariableDeclarationStatement[35228-35249]"
    }, {
      "left" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\r':\n                case '\\f':\n                case ' ':\n                    t.transition(BeforeAttributeName);\n                    break;\n                case '/':\n                    t.transition(SelfClosingStartTag);\n                    break;\n                case '>':\n                    t.emitTagPending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.transition(Data);\n                    break;\n                default:\n                    t.error(this);\n                    r.unconsume();\n                    t.transition(BeforeAttributeName);\n            }",
      "right" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\r':\n                case '\\f':\n                case ' ':\n                    t.transition(BeforeAttributeName);\n                    break;\n                case '/':\n                    t.transition(SelfClosingStartTag);\n                    break;\n                case '>':\n                    t.emitTagPending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.transition(Data);\n                    break;\n                default:\n                    t.error(this);\n                    r.unconsume();\n                    t.transition(BeforeAttributeName);\n            }",
      "info" : "SwitchStatement[35262-36026]:SwitchStatement[35262-36026]"
    }, {
      "left" : "case '\\t':",
      "right" : "case '\\t':",
      "info" : "SwitchCase[35291-35301]:SwitchCase[35291-35301]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[35318-35328]:SwitchCase[35318-35328]"
    }, {
      "left" : "case '\\r':",
      "right" : "case '\\r':",
      "info" : "SwitchCase[35345-35355]:SwitchCase[35345-35355]"
    }, {
      "left" : "case '\\f':",
      "right" : "case '\\f':",
      "info" : "SwitchCase[35372-35382]:SwitchCase[35372-35382]"
    }, {
      "left" : "case ' ':",
      "right" : "case ' ':",
      "info" : "SwitchCase[35399-35408]:SwitchCase[35399-35408]"
    }, {
      "left" : "t.transition(BeforeAttributeName);",
      "right" : "t.transition(BeforeAttributeName);",
      "info" : "ExpressionStatement[35429-35463]:ExpressionStatement[35429-35463]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[35484-35490]:BreakStatement[35484-35490]"
    }, {
      "left" : "case '/':",
      "right" : "case '/':",
      "info" : "SwitchCase[35507-35516]:SwitchCase[35507-35516]"
    }, {
      "left" : "t.transition(SelfClosingStartTag);",
      "right" : "t.transition(SelfClosingStartTag);",
      "info" : "ExpressionStatement[35537-35571]:ExpressionStatement[35537-35571]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[35592-35598]:BreakStatement[35592-35598]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[35615-35624]:SwitchCase[35615-35624]"
    }, {
      "left" : "t.emitTagPending();",
      "right" : "t.emitTagPending();",
      "info" : "ExpressionStatement[35645-35664]:ExpressionStatement[35645-35664]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[35685-35704]:ExpressionStatement[35685-35704]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[35725-35731]:BreakStatement[35725-35731]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[35748-35757]:SwitchCase[35748-35757]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[35778-35795]:ExpressionStatement[35778-35795]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[35816-35835]:ExpressionStatement[35816-35835]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[35856-35862]:BreakStatement[35856-35862]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[35879-35887]:SwitchCase[35879-35887]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[35908-35922]:ExpressionStatement[35908-35922]"
    }, {
      "left" : "r.unconsume();",
      "right" : "r.unconsume();",
      "info" : "ExpressionStatement[35943-35957]:ExpressionStatement[35943-35957]"
    }, {
      "left" : "t.transition(BeforeAttributeName);",
      "right" : "t.transition(BeforeAttributeName);",
      "info" : "ExpressionStatement[35978-36012]:ExpressionStatement[35978-36012]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[36079-36083]:PrimitiveType[36079-36083]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[36084-36088]:SimpleName[36084-36088]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[36089-36100]:SingleVariableDeclaration[36089-36100]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[36102-36119]:SingleVariableDeclaration[36102-36119]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36121-36637]:Block[36121-36637]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[36135-36156]:VariableDeclarationStatement[36135-36156]"
    }, {
      "left" : "switch (c) {\n                case '>':\n                    t.tagPending.selfClosing = true;\n                    t.emitTagPending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.transition(Data);\n                    break;\n                default:\n                    t.error(this);\n                    t.transition(BeforeAttributeName);\n            }",
      "right" : "switch (c) {\n                case '>':\n                    t.tagPending.selfClosing = true;\n                    t.emitTagPending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.transition(Data);\n                    break;\n                default:\n                    t.error(this);\n                    t.transition(BeforeAttributeName);\n            }",
      "info" : "SwitchStatement[36169-36627]:SwitchStatement[36169-36627]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[36198-36207]:SwitchCase[36198-36207]"
    }, {
      "left" : "t.tagPending.selfClosing = true;",
      "right" : "t.tagPending.selfClosing = true;",
      "info" : "ExpressionStatement[36228-36260]:ExpressionStatement[36228-36260]"
    }, {
      "left" : "t.emitTagPending();",
      "right" : "t.emitTagPending();",
      "info" : "ExpressionStatement[36281-36300]:ExpressionStatement[36281-36300]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[36321-36340]:ExpressionStatement[36321-36340]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[36361-36367]:BreakStatement[36361-36367]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[36384-36393]:SwitchCase[36384-36393]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[36414-36431]:ExpressionStatement[36414-36431]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[36452-36471]:ExpressionStatement[36452-36471]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[36492-36498]:BreakStatement[36492-36498]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[36515-36523]:SwitchCase[36515-36523]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[36544-36558]:ExpressionStatement[36544-36558]"
    }, {
      "left" : "t.transition(BeforeAttributeName);",
      "right" : "t.transition(BeforeAttributeName);",
      "info" : "ExpressionStatement[36579-36613]:ExpressionStatement[36579-36613]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[36672-36676]:PrimitiveType[36672-36676]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[36677-36681]:SimpleName[36677-36681]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[36682-36693]:SingleVariableDeclaration[36682-36693]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[36695-36712]:SingleVariableDeclaration[36695-36712]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36714-37129]:Block[36714-37163]"
    }, {
      "left" : "r.unconsume();",
      "right" : "r.unconsume();",
      "info" : "ExpressionStatement[36874-36888]:ExpressionStatement[36874-36888]"
    }, {
      "left" : "Token.Comment comment = new Token.Comment();",
      "right" : "Token.Comment comment = new Token.Comment();",
      "info" : "VariableDeclarationStatement[36901-36945]:VariableDeclarationStatement[36901-36945]"
    }, {
      "left" : "comment.data.append(r.consumeTo('>'));",
      "right" : "comment.data.append(r.consumeTo('>'));",
      "info" : "ExpressionStatement[36958-36996]:ExpressionStatement[36992-37030]"
    }, {
      "left" : "t.emit(comment);",
      "right" : "t.emit(comment);",
      "info" : "ExpressionStatement[37064-37080]:ExpressionStatement[37098-37114]"
    }, {
      "left" : "t.advanceTransition(Data);",
      "right" : "t.advanceTransition(Data);",
      "info" : "ExpressionStatement[37093-37119]:ExpressionStatement[37127-37153]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[37173-37177]:PrimitiveType[37207-37211]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[37178-37182]:SimpleName[37212-37216]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[37183-37194]:SingleVariableDeclaration[37217-37228]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[37196-37213]:SingleVariableDeclaration[37230-37247]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37215-37999]:Block[37249-38033]"
    }, {
      "left" : "if (r.matchConsume(\"--\"))",
      "right" : "if (r.matchConsume(\"--\"))",
      "info" : "IfStatement[37229-37989]:IfStatement[37263-38023]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37255-37356]:Block[37289-37390]"
    }, {
      "left" : "t.createCommentPending();",
      "right" : "t.createCommentPending();",
      "info" : "ExpressionStatement[37273-37298]:ExpressionStatement[37307-37332]"
    }, {
      "left" : "t.transition(CommentStart);",
      "right" : "t.transition(CommentStart);",
      "info" : "ExpressionStatement[37315-37342]:ExpressionStatement[37349-37376]"
    }, {
      "left" : "if (r.matchConsumeIgnoreCase(\"DOCTYPE\"))",
      "right" : "if (r.matchConsumeIgnoreCase(\"DOCTYPE\"))",
      "info" : "IfStatement[37362-37989]:IfStatement[37396-38023]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37403-37457]:Block[37437-37491]"
    }, {
      "left" : "t.transition(Doctype);",
      "right" : "t.transition(Doctype);",
      "info" : "ExpressionStatement[37421-37443]:ExpressionStatement[37455-37477]"
    }, {
      "left" : "if (r.matchConsume(\"[CDATA[\"))",
      "right" : "if (r.matchConsume(\"[CDATA[\"))",
      "info" : "IfStatement[37463-37989]:IfStatement[37497-38023]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37494-37821]:Block[37528-37855]"
    }, {
      "left" : "t.transition(CdataSection);",
      "right" : "t.transition(CdataSection);",
      "info" : "ExpressionStatement[37780-37807]:ExpressionStatement[37814-37841]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37827-37989]:Block[37861-38023]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[37845-37859]:ExpressionStatement[37879-37893]"
    }, {
      "left" : "t.advanceTransition(BogusComment);",
      "right" : "t.advanceTransition(BogusComment);",
      "info" : "ExpressionStatement[37876-37910]:ExpressionStatement[37910-37944]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[38034-38038]:PrimitiveType[38068-38072]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[38039-38043]:SimpleName[38073-38077]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[38044-38055]:SingleVariableDeclaration[38078-38089]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[38057-38074]:SingleVariableDeclaration[38091-38108]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38076-38936]:Block[38110-38970]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[38090-38111]:VariableDeclarationStatement[38124-38145]"
    }, {
      "left" : "switch (c) {\n                case '-':\n                    t.transition(CommentStartDash);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.commentPending.data.append(replacementChar);\n                    t.transition(Comment);\n                    break;\n                case '>':\n                    t.error(this);\n                    t.emitCommentPending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.emitCommentPending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.commentPending.data.append(c);\n                    t.transition(Comment);\n            }",
      "right" : "switch (c) {\n                case '-':\n                    t.transition(CommentStartDash);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.commentPending.data.append(replacementChar);\n                    t.transition(Comment);\n                    break;\n                case '>':\n                    t.error(this);\n                    t.emitCommentPending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.emitCommentPending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.commentPending.data.append(c);\n                    t.transition(Comment);\n            }",
      "info" : "SwitchStatement[38124-38926]:SwitchStatement[38158-38960]"
    }, {
      "left" : "case '-':",
      "right" : "case '-':",
      "info" : "SwitchCase[38153-38162]:SwitchCase[38187-38196]"
    }, {
      "left" : "t.transition(CommentStartDash);",
      "right" : "t.transition(CommentStartDash);",
      "info" : "ExpressionStatement[38183-38214]:ExpressionStatement[38217-38248]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[38235-38241]:BreakStatement[38269-38275]"
    }, {
      "left" : "case nullChar:",
      "right" : "case nullChar:",
      "info" : "SwitchCase[38258-38272]:SwitchCase[38292-38306]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[38293-38307]:ExpressionStatement[38327-38341]"
    }, {
      "left" : "t.commentPending.data.append(replacementChar);",
      "right" : "t.commentPending.data.append(replacementChar);",
      "info" : "ExpressionStatement[38328-38374]:ExpressionStatement[38362-38408]"
    }, {
      "left" : "t.transition(Comment);",
      "right" : "t.transition(Comment);",
      "info" : "ExpressionStatement[38395-38417]:ExpressionStatement[38429-38451]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[38438-38444]:BreakStatement[38472-38478]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[38461-38470]:SwitchCase[38495-38504]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[38491-38505]:ExpressionStatement[38525-38539]"
    }, {
      "left" : "t.emitCommentPending();",
      "right" : "t.emitCommentPending();",
      "info" : "ExpressionStatement[38526-38549]:ExpressionStatement[38560-38583]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[38570-38589]:ExpressionStatement[38604-38623]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[38610-38616]:BreakStatement[38644-38650]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[38633-38642]:SwitchCase[38667-38676]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[38663-38680]:ExpressionStatement[38697-38714]"
    }, {
      "left" : "t.emitCommentPending();",
      "right" : "t.emitCommentPending();",
      "info" : "ExpressionStatement[38701-38724]:ExpressionStatement[38735-38758]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[38745-38764]:ExpressionStatement[38779-38798]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[38785-38791]:BreakStatement[38819-38825]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[38808-38816]:SwitchCase[38842-38850]"
    }, {
      "left" : "t.commentPending.data.append(c);",
      "right" : "t.commentPending.data.append(c);",
      "info" : "ExpressionStatement[38837-38869]:ExpressionStatement[38871-38903]"
    }, {
      "left" : "t.transition(Comment);",
      "right" : "t.transition(Comment);",
      "info" : "ExpressionStatement[38890-38912]:ExpressionStatement[38924-38946]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[38975-38979]:PrimitiveType[39009-39013]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[38980-38984]:SimpleName[39014-39018]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[38985-38996]:SingleVariableDeclaration[39019-39030]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[38998-39015]:SingleVariableDeclaration[39032-39049]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39017-39877]:Block[39051-39911]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[39031-39052]:VariableDeclarationStatement[39065-39086]"
    }, {
      "left" : "switch (c) {\n                case '-':\n                    t.transition(CommentStartDash);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.commentPending.data.append(replacementChar);\n                    t.transition(Comment);\n                    break;\n                case '>':\n                    t.error(this);\n                    t.emitCommentPending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.emitCommentPending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.commentPending.data.append(c);\n                    t.transition(Comment);\n            }",
      "right" : "switch (c) {\n                case '-':\n                    t.transition(CommentStartDash);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.commentPending.data.append(replacementChar);\n                    t.transition(Comment);\n                    break;\n                case '>':\n                    t.error(this);\n                    t.emitCommentPending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.emitCommentPending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.commentPending.data.append(c);\n                    t.transition(Comment);\n            }",
      "info" : "SwitchStatement[39065-39867]:SwitchStatement[39099-39901]"
    }, {
      "left" : "case '-':",
      "right" : "case '-':",
      "info" : "SwitchCase[39094-39103]:SwitchCase[39128-39137]"
    }, {
      "left" : "t.transition(CommentStartDash);",
      "right" : "t.transition(CommentStartDash);",
      "info" : "ExpressionStatement[39124-39155]:ExpressionStatement[39158-39189]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[39176-39182]:BreakStatement[39210-39216]"
    }, {
      "left" : "case nullChar:",
      "right" : "case nullChar:",
      "info" : "SwitchCase[39199-39213]:SwitchCase[39233-39247]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[39234-39248]:ExpressionStatement[39268-39282]"
    }, {
      "left" : "t.commentPending.data.append(replacementChar);",
      "right" : "t.commentPending.data.append(replacementChar);",
      "info" : "ExpressionStatement[39269-39315]:ExpressionStatement[39303-39349]"
    }, {
      "left" : "t.transition(Comment);",
      "right" : "t.transition(Comment);",
      "info" : "ExpressionStatement[39336-39358]:ExpressionStatement[39370-39392]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[39379-39385]:BreakStatement[39413-39419]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[39402-39411]:SwitchCase[39436-39445]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[39432-39446]:ExpressionStatement[39466-39480]"
    }, {
      "left" : "t.emitCommentPending();",
      "right" : "t.emitCommentPending();",
      "info" : "ExpressionStatement[39467-39490]:ExpressionStatement[39501-39524]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[39511-39530]:ExpressionStatement[39545-39564]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[39551-39557]:BreakStatement[39585-39591]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[39574-39583]:SwitchCase[39608-39617]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[39604-39621]:ExpressionStatement[39638-39655]"
    }, {
      "left" : "t.emitCommentPending();",
      "right" : "t.emitCommentPending();",
      "info" : "ExpressionStatement[39642-39665]:ExpressionStatement[39676-39699]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[39686-39705]:ExpressionStatement[39720-39739]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[39726-39732]:BreakStatement[39760-39766]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[39749-39757]:SwitchCase[39783-39791]"
    }, {
      "left" : "t.commentPending.data.append(c);",
      "right" : "t.commentPending.data.append(c);",
      "info" : "ExpressionStatement[39778-39810]:ExpressionStatement[39812-39844]"
    }, {
      "left" : "t.transition(Comment);",
      "right" : "t.transition(Comment);",
      "info" : "ExpressionStatement[39831-39853]:ExpressionStatement[39865-39887]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[39907-39911]:PrimitiveType[39941-39945]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[39912-39916]:SimpleName[39946-39950]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[39917-39928]:SingleVariableDeclaration[39951-39962]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[39930-39947]:SingleVariableDeclaration[39964-39981]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39949-40617]:Block[39983-40651]"
    }, {
      "left" : "char c = r.current();",
      "right" : "char c = r.current();",
      "info" : "VariableDeclarationStatement[39963-39984]:VariableDeclarationStatement[39997-40018]"
    }, {
      "left" : "switch (c) {\n                case '-':\n                    t.advanceTransition(CommentEndDash);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    r.advance();\n                    t.commentPending.data.append(replacementChar);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.emitCommentPending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.commentPending.data.append(r.consumeToAny('-', nullChar));\n            }",
      "right" : "switch (c) {\n                case '-':\n                    t.advanceTransition(CommentEndDash);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    r.advance();\n                    t.commentPending.data.append(replacementChar);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.emitCommentPending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.commentPending.data.append(r.consumeToAny('-', nullChar));\n            }",
      "info" : "SwitchStatement[39997-40607]:SwitchStatement[40031-40641]"
    }, {
      "left" : "case '-':",
      "right" : "case '-':",
      "info" : "SwitchCase[40026-40035]:SwitchCase[40060-40069]"
    }, {
      "left" : "t.advanceTransition(CommentEndDash);",
      "right" : "t.advanceTransition(CommentEndDash);",
      "info" : "ExpressionStatement[40056-40092]:ExpressionStatement[40090-40126]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[40113-40119]:BreakStatement[40147-40153]"
    }, {
      "left" : "case nullChar:",
      "right" : "case nullChar:",
      "info" : "SwitchCase[40136-40150]:SwitchCase[40170-40184]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[40171-40185]:ExpressionStatement[40205-40219]"
    }, {
      "left" : "r.advance();",
      "right" : "r.advance();",
      "info" : "ExpressionStatement[40206-40218]:ExpressionStatement[40240-40252]"
    }, {
      "left" : "t.commentPending.data.append(replacementChar);",
      "right" : "t.commentPending.data.append(replacementChar);",
      "info" : "ExpressionStatement[40239-40285]:ExpressionStatement[40273-40319]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[40306-40312]:BreakStatement[40340-40346]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[40329-40338]:SwitchCase[40363-40372]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[40359-40376]:ExpressionStatement[40393-40410]"
    }, {
      "left" : "t.emitCommentPending();",
      "right" : "t.emitCommentPending();",
      "info" : "ExpressionStatement[40397-40420]:ExpressionStatement[40431-40454]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[40441-40460]:ExpressionStatement[40475-40494]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[40481-40487]:BreakStatement[40515-40521]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[40504-40512]:SwitchCase[40538-40546]"
    }, {
      "left" : "t.commentPending.data.append(r.consumeToAny('-', nullChar));",
      "right" : "t.commentPending.data.append(r.consumeToAny('-', nullChar));",
      "info" : "ExpressionStatement[40533-40593]:ExpressionStatement[40567-40627]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[40654-40658]:PrimitiveType[40688-40692]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[40659-40663]:SimpleName[40693-40697]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[40664-40675]:SingleVariableDeclaration[40698-40709]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[40677-40694]:SingleVariableDeclaration[40711-40728]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40696-41402]:Block[40730-41436]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[40710-40731]:VariableDeclarationStatement[40744-40765]"
    }, {
      "left" : "switch (c) {\n                case '-':\n                    t.transition(CommentEnd);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.commentPending.data.append('-').append(replacementChar);\n                    t.transition(Comment);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.emitCommentPending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.commentPending.data.append('-').append(c);\n                    t.transition(Comment);\n            }",
      "right" : "switch (c) {\n                case '-':\n                    t.transition(CommentEnd);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.commentPending.data.append('-').append(replacementChar);\n                    t.transition(Comment);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.emitCommentPending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.commentPending.data.append('-').append(c);\n                    t.transition(Comment);\n            }",
      "info" : "SwitchStatement[40744-41392]:SwitchStatement[40778-41426]"
    }, {
      "left" : "case '-':",
      "right" : "case '-':",
      "info" : "SwitchCase[40773-40782]:SwitchCase[40807-40816]"
    }, {
      "left" : "t.transition(CommentEnd);",
      "right" : "t.transition(CommentEnd);",
      "info" : "ExpressionStatement[40803-40828]:ExpressionStatement[40837-40862]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[40849-40855]:BreakStatement[40883-40889]"
    }, {
      "left" : "case nullChar:",
      "right" : "case nullChar:",
      "info" : "SwitchCase[40872-40886]:SwitchCase[40906-40920]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[40907-40921]:ExpressionStatement[40941-40955]"
    }, {
      "left" : "t.commentPending.data.append('-').append(replacementChar);",
      "right" : "t.commentPending.data.append('-').append(replacementChar);",
      "info" : "ExpressionStatement[40942-41000]:ExpressionStatement[40976-41034]"
    }, {
      "left" : "t.transition(Comment);",
      "right" : "t.transition(Comment);",
      "info" : "ExpressionStatement[41021-41043]:ExpressionStatement[41055-41077]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[41064-41070]:BreakStatement[41098-41104]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[41087-41096]:SwitchCase[41121-41130]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[41117-41134]:ExpressionStatement[41151-41168]"
    }, {
      "left" : "t.emitCommentPending();",
      "right" : "t.emitCommentPending();",
      "info" : "ExpressionStatement[41155-41178]:ExpressionStatement[41189-41212]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[41199-41218]:ExpressionStatement[41233-41252]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[41239-41245]:BreakStatement[41273-41279]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[41262-41270]:SwitchCase[41296-41304]"
    }, {
      "left" : "t.commentPending.data.append('-').append(c);",
      "right" : "t.commentPending.data.append('-').append(c);",
      "info" : "ExpressionStatement[41291-41335]:ExpressionStatement[41325-41369]"
    }, {
      "left" : "t.transition(Comment);",
      "right" : "t.transition(Comment);",
      "info" : "ExpressionStatement[41356-41378]:ExpressionStatement[41390-41412]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[41435-41439]:PrimitiveType[41469-41473]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[41440-41444]:SimpleName[41474-41478]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[41445-41456]:SingleVariableDeclaration[41479-41490]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[41458-41475]:SingleVariableDeclaration[41492-41509]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41477-42539]:Block[41511-42573]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[41491-41512]:VariableDeclarationStatement[41525-41546]"
    }, {
      "left" : "switch (c) {\n                case '>':\n                    t.emitCommentPending();\n                    t.transition(Data);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.commentPending.data.append(\"--\").append(replacementChar);\n                    t.transition(Comment);\n                    break;\n                case '!':\n                    t.error(this);\n                    t.transition(CommentEndBang);\n                    break;\n                case '-':\n                    t.error(this);\n                    t.commentPending.data.append('-');\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.emitCommentPending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.error(this);\n                    t.commentPending.data.append(\"--\").append(c);\n                    t.transition(Comment);\n            }",
      "right" : "switch (c) {\n                case '>':\n                    t.emitCommentPending();\n                    t.transition(Data);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.commentPending.data.append(\"--\").append(replacementChar);\n                    t.transition(Comment);\n                    break;\n                case '!':\n                    t.error(this);\n                    t.transition(CommentEndBang);\n                    break;\n                case '-':\n                    t.error(this);\n                    t.commentPending.data.append('-');\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.emitCommentPending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.error(this);\n                    t.commentPending.data.append(\"--\").append(c);\n                    t.transition(Comment);\n            }",
      "info" : "SwitchStatement[41525-42529]:SwitchStatement[41559-42563]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[41554-41563]:SwitchCase[41588-41597]"
    }, {
      "left" : "t.emitCommentPending();",
      "right" : "t.emitCommentPending();",
      "info" : "ExpressionStatement[41584-41607]:ExpressionStatement[41618-41641]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[41628-41647]:ExpressionStatement[41662-41681]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[41668-41674]:BreakStatement[41702-41708]"
    }, {
      "left" : "case nullChar:",
      "right" : "case nullChar:",
      "info" : "SwitchCase[41691-41705]:SwitchCase[41725-41739]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[41726-41740]:ExpressionStatement[41760-41774]"
    }, {
      "left" : "t.commentPending.data.append(\"--\").append(replacementChar);",
      "right" : "t.commentPending.data.append(\"--\").append(replacementChar);",
      "info" : "ExpressionStatement[41761-41820]:ExpressionStatement[41795-41854]"
    }, {
      "left" : "t.transition(Comment);",
      "right" : "t.transition(Comment);",
      "info" : "ExpressionStatement[41841-41863]:ExpressionStatement[41875-41897]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[41884-41890]:BreakStatement[41918-41924]"
    }, {
      "left" : "case '!':",
      "right" : "case '!':",
      "info" : "SwitchCase[41907-41916]:SwitchCase[41941-41950]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[41937-41951]:ExpressionStatement[41971-41985]"
    }, {
      "left" : "t.transition(CommentEndBang);",
      "right" : "t.transition(CommentEndBang);",
      "info" : "ExpressionStatement[41972-42001]:ExpressionStatement[42006-42035]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[42022-42028]:BreakStatement[42056-42062]"
    }, {
      "left" : "case '-':",
      "right" : "case '-':",
      "info" : "SwitchCase[42045-42054]:SwitchCase[42079-42088]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[42075-42089]:ExpressionStatement[42109-42123]"
    }, {
      "left" : "t.commentPending.data.append('-');",
      "right" : "t.commentPending.data.append('-');",
      "info" : "ExpressionStatement[42110-42144]:ExpressionStatement[42144-42178]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[42165-42171]:BreakStatement[42199-42205]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[42188-42197]:SwitchCase[42222-42231]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[42218-42235]:ExpressionStatement[42252-42269]"
    }, {
      "left" : "t.emitCommentPending();",
      "right" : "t.emitCommentPending();",
      "info" : "ExpressionStatement[42256-42279]:ExpressionStatement[42290-42313]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[42300-42319]:ExpressionStatement[42334-42353]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[42340-42346]:BreakStatement[42374-42380]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[42363-42371]:SwitchCase[42397-42405]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[42392-42406]:ExpressionStatement[42426-42440]"
    }, {
      "left" : "t.commentPending.data.append(\"--\").append(c);",
      "right" : "t.commentPending.data.append(\"--\").append(c);",
      "info" : "ExpressionStatement[42427-42472]:ExpressionStatement[42461-42506]"
    }, {
      "left" : "t.transition(Comment);",
      "right" : "t.transition(Comment);",
      "info" : "ExpressionStatement[42493-42515]:ExpressionStatement[42527-42549]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[42576-42580]:PrimitiveType[42610-42614]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[42581-42585]:SimpleName[42615-42619]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[42586-42597]:SingleVariableDeclaration[42620-42631]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[42599-42616]:SingleVariableDeclaration[42633-42650]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42618-43526]:Block[42652-43560]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[42632-42653]:VariableDeclarationStatement[42666-42687]"
    }, {
      "left" : "switch (c) {\n                case '-':\n                    t.commentPending.data.append(\"--!\");\n                    t.transition(CommentEndDash);\n                    break;\n                case '>':\n                    t.emitCommentPending();\n                    t.transition(Data);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.commentPending.data.append(\"--!\").append(replacementChar);\n                    t.transition(Comment);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.emitCommentPending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.commentPending.data.append(\"--!\").append(c);\n                    t.transition(Comment);\n            }",
      "right" : "switch (c) {\n                case '-':\n                    t.commentPending.data.append(\"--!\");\n                    t.transition(CommentEndDash);\n                    break;\n                case '>':\n                    t.emitCommentPending();\n                    t.transition(Data);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.commentPending.data.append(\"--!\").append(replacementChar);\n                    t.transition(Comment);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.emitCommentPending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.commentPending.data.append(\"--!\").append(c);\n                    t.transition(Comment);\n            }",
      "info" : "SwitchStatement[42666-43516]:SwitchStatement[42700-43550]"
    }, {
      "left" : "case '-':",
      "right" : "case '-':",
      "info" : "SwitchCase[42695-42704]:SwitchCase[42729-42738]"
    }, {
      "left" : "t.commentPending.data.append(\"--!\");",
      "right" : "t.commentPending.data.append(\"--!\");",
      "info" : "ExpressionStatement[42725-42761]:ExpressionStatement[42759-42795]"
    }, {
      "left" : "t.transition(CommentEndDash);",
      "right" : "t.transition(CommentEndDash);",
      "info" : "ExpressionStatement[42782-42811]:ExpressionStatement[42816-42845]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[42832-42838]:BreakStatement[42866-42872]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[42855-42864]:SwitchCase[42889-42898]"
    }, {
      "left" : "t.emitCommentPending();",
      "right" : "t.emitCommentPending();",
      "info" : "ExpressionStatement[42885-42908]:ExpressionStatement[42919-42942]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[42929-42948]:ExpressionStatement[42963-42982]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[42969-42975]:BreakStatement[43003-43009]"
    }, {
      "left" : "case nullChar:",
      "right" : "case nullChar:",
      "info" : "SwitchCase[42992-43006]:SwitchCase[43026-43040]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[43027-43041]:ExpressionStatement[43061-43075]"
    }, {
      "left" : "t.commentPending.data.append(\"--!\").append(replacementChar);",
      "right" : "t.commentPending.data.append(\"--!\").append(replacementChar);",
      "info" : "ExpressionStatement[43062-43122]:ExpressionStatement[43096-43156]"
    }, {
      "left" : "t.transition(Comment);",
      "right" : "t.transition(Comment);",
      "info" : "ExpressionStatement[43143-43165]:ExpressionStatement[43177-43199]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[43186-43192]:BreakStatement[43220-43226]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[43209-43218]:SwitchCase[43243-43252]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[43239-43256]:ExpressionStatement[43273-43290]"
    }, {
      "left" : "t.emitCommentPending();",
      "right" : "t.emitCommentPending();",
      "info" : "ExpressionStatement[43277-43300]:ExpressionStatement[43311-43334]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[43321-43340]:ExpressionStatement[43355-43374]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[43361-43367]:BreakStatement[43395-43401]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[43384-43392]:SwitchCase[43418-43426]"
    }, {
      "left" : "t.commentPending.data.append(\"--!\").append(c);",
      "right" : "t.commentPending.data.append(\"--!\").append(c);",
      "info" : "ExpressionStatement[43413-43459]:ExpressionStatement[43447-43493]"
    }, {
      "left" : "t.transition(Comment);",
      "right" : "t.transition(Comment);",
      "info" : "ExpressionStatement[43480-43502]:ExpressionStatement[43514-43536]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[43556-43560]:PrimitiveType[43590-43594]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[43561-43565]:SimpleName[43595-43599]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[43566-43577]:SingleVariableDeclaration[43600-43611]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[43579-43596]:SingleVariableDeclaration[43613-43630]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43598-44287]:Block[43632-44321]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[43612-43633]:VariableDeclarationStatement[43646-43667]"
    }, {
      "left" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\r':\n                case '\\f':\n                case ' ':\n                    t.transition(BeforeDoctypeName);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.createDoctypePending();\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.error(this);\n                    t.transition(BeforeDoctypeName);\n            }",
      "right" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\r':\n                case '\\f':\n                case ' ':\n                    t.transition(BeforeDoctypeName);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.createDoctypePending();\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.error(this);\n                    t.transition(BeforeDoctypeName);\n            }",
      "info" : "SwitchStatement[43646-44277]:SwitchStatement[43680-44311]"
    }, {
      "left" : "case '\\t':",
      "right" : "case '\\t':",
      "info" : "SwitchCase[43675-43685]:SwitchCase[43709-43719]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[43702-43712]:SwitchCase[43736-43746]"
    }, {
      "left" : "case '\\r':",
      "right" : "case '\\r':",
      "info" : "SwitchCase[43729-43739]:SwitchCase[43763-43773]"
    }, {
      "left" : "case '\\f':",
      "right" : "case '\\f':",
      "info" : "SwitchCase[43756-43766]:SwitchCase[43790-43800]"
    }, {
      "left" : "case ' ':",
      "right" : "case ' ':",
      "info" : "SwitchCase[43783-43792]:SwitchCase[43817-43826]"
    }, {
      "left" : "t.transition(BeforeDoctypeName);",
      "right" : "t.transition(BeforeDoctypeName);",
      "info" : "ExpressionStatement[43813-43845]:ExpressionStatement[43847-43879]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[43866-43872]:BreakStatement[43900-43906]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[43889-43898]:SwitchCase[43923-43932]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[43919-43936]:ExpressionStatement[43953-43970]"
    }, {
      "left" : "t.createDoctypePending();",
      "right" : "t.createDoctypePending();",
      "info" : "ExpressionStatement[43957-43982]:ExpressionStatement[43991-44016]"
    }, {
      "left" : "t.doctypePending.forceQuirks = true;",
      "right" : "t.doctypePending.forceQuirks = true;",
      "info" : "ExpressionStatement[44003-44039]:ExpressionStatement[44037-44073]"
    }, {
      "left" : "t.emitDoctypePending();",
      "right" : "t.emitDoctypePending();",
      "info" : "ExpressionStatement[44060-44083]:ExpressionStatement[44094-44117]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[44104-44123]:ExpressionStatement[44138-44157]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[44144-44150]:BreakStatement[44178-44184]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[44167-44175]:SwitchCase[44201-44209]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[44196-44210]:ExpressionStatement[44230-44244]"
    }, {
      "left" : "t.transition(BeforeDoctypeName);",
      "right" : "t.transition(BeforeDoctypeName);",
      "info" : "ExpressionStatement[44231-44263]:ExpressionStatement[44265-44297]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[44327-44331]:PrimitiveType[44361-44365]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[44332-44336]:SimpleName[44366-44370]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[44337-44348]:SingleVariableDeclaration[44371-44382]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[44350-44367]:SingleVariableDeclaration[44384-44401]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44369-45451]:Block[44403-45485]"
    }, {
      "left" : "if (r.matchesLetter())",
      "right" : "if (r.matchesLetter())",
      "info" : "IfStatement[44383-44530]:IfStatement[44417-44564]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44406-44530]:Block[44440-44564]"
    }, {
      "left" : "t.createDoctypePending();",
      "right" : "t.createDoctypePending();",
      "info" : "ExpressionStatement[44424-44449]:ExpressionStatement[44458-44483]"
    }, {
      "left" : "t.transition(DoctypeName);",
      "right" : "t.transition(DoctypeName);",
      "info" : "ExpressionStatement[44466-44492]:ExpressionStatement[44500-44526]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[44509-44516]:ReturnStatement[44543-44550]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[44543-44564]:VariableDeclarationStatement[44577-44598]"
    }, {
      "left" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\r':\n                case '\\f':\n                case ' ':\n                    break; // ignore whitespace\n                case nullChar:\n                    t.error(this);\n                    t.doctypePending.name.append(replacementChar);\n                    t.transition(DoctypeName);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.createDoctypePending();\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.createDoctypePending();\n                    t.doctypePending.name.append(c);\n                    t.transition(DoctypeName);\n            }",
      "right" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\r':\n                case '\\f':\n                case ' ':\n                    break; // ignore whitespace\n                case nullChar:\n                    t.error(this);\n                    t.doctypePending.name.append(replacementChar);\n                    t.transition(DoctypeName);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.createDoctypePending();\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.createDoctypePending();\n                    t.doctypePending.name.append(c);\n                    t.transition(DoctypeName);\n            }",
      "info" : "SwitchStatement[44577-45441]:SwitchStatement[44611-45475]"
    }, {
      "left" : "case '\\t':",
      "right" : "case '\\t':",
      "info" : "SwitchCase[44606-44616]:SwitchCase[44640-44650]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[44633-44643]:SwitchCase[44667-44677]"
    }, {
      "left" : "case '\\r':",
      "right" : "case '\\r':",
      "info" : "SwitchCase[44660-44670]:SwitchCase[44694-44704]"
    }, {
      "left" : "case '\\f':",
      "right" : "case '\\f':",
      "info" : "SwitchCase[44687-44697]:SwitchCase[44721-44731]"
    }, {
      "left" : "case ' ':",
      "right" : "case ' ':",
      "info" : "SwitchCase[44714-44723]:SwitchCase[44748-44757]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[44744-44750]:BreakStatement[44778-44784]"
    }, {
      "left" : "case nullChar:",
      "right" : "case nullChar:",
      "info" : "SwitchCase[44788-44802]:SwitchCase[44822-44836]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[44823-44837]:ExpressionStatement[44857-44871]"
    }, {
      "left" : "t.doctypePending.name.append(replacementChar);",
      "right" : "t.doctypePending.name.append(replacementChar);",
      "info" : "ExpressionStatement[44858-44904]:ExpressionStatement[44892-44938]"
    }, {
      "left" : "t.transition(DoctypeName);",
      "right" : "t.transition(DoctypeName);",
      "info" : "ExpressionStatement[44925-44951]:ExpressionStatement[44959-44985]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[44972-44978]:BreakStatement[45006-45012]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[44995-45004]:SwitchCase[45029-45038]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[45025-45042]:ExpressionStatement[45059-45076]"
    }, {
      "left" : "t.createDoctypePending();",
      "right" : "t.createDoctypePending();",
      "info" : "ExpressionStatement[45063-45088]:ExpressionStatement[45097-45122]"
    }, {
      "left" : "t.doctypePending.forceQuirks = true;",
      "right" : "t.doctypePending.forceQuirks = true;",
      "info" : "ExpressionStatement[45109-45145]:ExpressionStatement[45143-45179]"
    }, {
      "left" : "t.emitDoctypePending();",
      "right" : "t.emitDoctypePending();",
      "info" : "ExpressionStatement[45166-45189]:ExpressionStatement[45200-45223]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[45210-45229]:ExpressionStatement[45244-45263]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[45250-45256]:BreakStatement[45284-45290]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[45273-45281]:SwitchCase[45307-45315]"
    }, {
      "left" : "t.createDoctypePending();",
      "right" : "t.createDoctypePending();",
      "info" : "ExpressionStatement[45302-45327]:ExpressionStatement[45336-45361]"
    }, {
      "left" : "t.doctypePending.name.append(c);",
      "right" : "t.doctypePending.name.append(c);",
      "info" : "ExpressionStatement[45348-45380]:ExpressionStatement[45382-45414]"
    }, {
      "left" : "t.transition(DoctypeName);",
      "right" : "t.transition(DoctypeName);",
      "info" : "ExpressionStatement[45401-45427]:ExpressionStatement[45435-45461]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[45485-45489]:PrimitiveType[45519-45523]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[45490-45494]:SimpleName[45524-45528]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[45495-45506]:SingleVariableDeclaration[45529-45540]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[45508-45525]:SingleVariableDeclaration[45542-45559]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45527-46629]:Block[45561-46663]"
    }, {
      "left" : "if (r.matchesLetter())",
      "right" : "if (r.matchesLetter())",
      "info" : "IfStatement[45541-45726]:IfStatement[45575-45760]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45564-45726]:Block[45598-45760]"
    }, {
      "left" : "String name = r.consumeLetterSequence();",
      "right" : "String name = r.consumeLetterSequence();",
      "info" : "VariableDeclarationStatement[45582-45622]:VariableDeclarationStatement[45616-45656]"
    }, {
      "left" : "t.doctypePending.name.append(name.toLowerCase());",
      "right" : "t.doctypePending.name.append(name.toLowerCase());",
      "info" : "ExpressionStatement[45639-45688]:ExpressionStatement[45673-45722]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[45705-45712]:ReturnStatement[45739-45746]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[45739-45760]:VariableDeclarationStatement[45773-45794]"
    }, {
      "left" : "switch (c) {\n                case '>':\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case '\\t':\n                case '\\n':\n                case '\\r':\n                case '\\f':\n                case ' ':\n                    t.transition(AfterDoctypeName);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.doctypePending.name.append(replacementChar);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.doctypePending.name.append(c);\n            }",
      "right" : "switch (c) {\n                case '>':\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case '\\t':\n                case '\\n':\n                case '\\r':\n                case '\\f':\n                case ' ':\n                    t.transition(AfterDoctypeName);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.doctypePending.name.append(replacementChar);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.doctypePending.name.append(c);\n            }",
      "info" : "SwitchStatement[45773-46619]:SwitchStatement[45807-46653]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[45802-45811]:SwitchCase[45836-45845]"
    }, {
      "left" : "t.emitDoctypePending();",
      "right" : "t.emitDoctypePending();",
      "info" : "ExpressionStatement[45832-45855]:ExpressionStatement[45866-45889]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[45876-45895]:ExpressionStatement[45910-45929]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[45916-45922]:BreakStatement[45950-45956]"
    }, {
      "left" : "case '\\t':",
      "right" : "case '\\t':",
      "info" : "SwitchCase[45939-45949]:SwitchCase[45973-45983]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[45966-45976]:SwitchCase[46000-46010]"
    }, {
      "left" : "case '\\r':",
      "right" : "case '\\r':",
      "info" : "SwitchCase[45993-46003]:SwitchCase[46027-46037]"
    }, {
      "left" : "case '\\f':",
      "right" : "case '\\f':",
      "info" : "SwitchCase[46020-46030]:SwitchCase[46054-46064]"
    }, {
      "left" : "case ' ':",
      "right" : "case ' ':",
      "info" : "SwitchCase[46047-46056]:SwitchCase[46081-46090]"
    }, {
      "left" : "t.transition(AfterDoctypeName);",
      "right" : "t.transition(AfterDoctypeName);",
      "info" : "ExpressionStatement[46077-46108]:ExpressionStatement[46111-46142]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[46129-46135]:BreakStatement[46163-46169]"
    }, {
      "left" : "case nullChar:",
      "right" : "case nullChar:",
      "info" : "SwitchCase[46152-46166]:SwitchCase[46186-46200]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[46187-46201]:ExpressionStatement[46221-46235]"
    }, {
      "left" : "t.doctypePending.name.append(replacementChar);",
      "right" : "t.doctypePending.name.append(replacementChar);",
      "info" : "ExpressionStatement[46222-46268]:ExpressionStatement[46256-46302]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[46289-46295]:BreakStatement[46323-46329]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[46312-46321]:SwitchCase[46346-46355]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[46342-46359]:ExpressionStatement[46376-46393]"
    }, {
      "left" : "t.doctypePending.forceQuirks = true;",
      "right" : "t.doctypePending.forceQuirks = true;",
      "info" : "ExpressionStatement[46380-46416]:ExpressionStatement[46414-46450]"
    }, {
      "left" : "t.emitDoctypePending();",
      "right" : "t.emitDoctypePending();",
      "info" : "ExpressionStatement[46437-46460]:ExpressionStatement[46471-46494]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[46481-46500]:ExpressionStatement[46515-46534]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[46521-46527]:BreakStatement[46555-46561]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[46544-46552]:SwitchCase[46578-46586]"
    }, {
      "left" : "t.doctypePending.name.append(c);",
      "right" : "t.doctypePending.name.append(c);",
      "info" : "ExpressionStatement[46573-46605]:ExpressionStatement[46607-46639]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[46668-46672]:PrimitiveType[46702-46706]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[46673-46677]:SimpleName[46707-46711]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[46678-46689]:SingleVariableDeclaration[46712-46723]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[46691-46708]:SingleVariableDeclaration[46725-46742]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46710-47591]:Block[46744-47625]"
    }, {
      "left" : "if (r.isEmpty())",
      "right" : "if (r.isEmpty())",
      "info" : "IfStatement[46724-46943]:IfStatement[46758-46977]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46741-46943]:Block[46775-46977]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[46759-46776]:ExpressionStatement[46793-46810]"
    }, {
      "left" : "t.doctypePending.forceQuirks = true;",
      "right" : "t.doctypePending.forceQuirks = true;",
      "info" : "ExpressionStatement[46793-46829]:ExpressionStatement[46827-46863]"
    }, {
      "left" : "t.emitDoctypePending();",
      "right" : "t.emitDoctypePending();",
      "info" : "ExpressionStatement[46846-46869]:ExpressionStatement[46880-46903]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[46886-46905]:ExpressionStatement[46920-46939]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[46922-46929]:ReturnStatement[46956-46963]"
    }, {
      "left" : "if (r.matchesAny('\\t', '\\n', '\\r', '\\f', ' '))",
      "right" : "if (r.matchesAny('\\t', '\\n', '\\r', '\\f', ' '))",
      "info" : "IfStatement[46956-47580]:IfStatement[46990-47614]"
    }, {
      "left" : "r.advance();",
      "right" : "r.advance();",
      "info" : "ExpressionStatement[47019-47031]:ExpressionStatement[47053-47065]"
    }, {
      "left" : "if (r.matches('>'))",
      "right" : "if (r.matches('>'))",
      "info" : "IfStatement[47070-47580]:IfStatement[47104-47614]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47090-47188]:Block[47124-47222]"
    }, {
      "left" : "t.emitDoctypePending();",
      "right" : "t.emitDoctypePending();",
      "info" : "ExpressionStatement[47108-47131]:ExpressionStatement[47142-47165]"
    }, {
      "left" : "t.advanceTransition(Data);",
      "right" : "t.advanceTransition(Data);",
      "info" : "ExpressionStatement[47148-47174]:ExpressionStatement[47182-47208]"
    }, {
      "left" : "if (r.matchConsumeIgnoreCase(\"PUBLIC\"))",
      "right" : "if (r.matchConsumeIgnoreCase(\"PUBLIC\"))",
      "info" : "IfStatement[47194-47580]:IfStatement[47228-47614]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47234-47306]:Block[47268-47340]"
    }, {
      "left" : "t.transition(AfterDoctypePublicKeyword);",
      "right" : "t.transition(AfterDoctypePublicKeyword);",
      "info" : "ExpressionStatement[47252-47292]:ExpressionStatement[47286-47326]"
    }, {
      "left" : "if (r.matchConsumeIgnoreCase(\"SYSTEM\"))",
      "right" : "if (r.matchConsumeIgnoreCase(\"SYSTEM\"))",
      "info" : "IfStatement[47312-47580]:IfStatement[47346-47614]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47352-47424]:Block[47386-47458]"
    }, {
      "left" : "t.transition(AfterDoctypeSystemKeyword);",
      "right" : "t.transition(AfterDoctypeSystemKeyword);",
      "info" : "ExpressionStatement[47370-47410]:ExpressionStatement[47404-47444]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47430-47580]:Block[47464-47614]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[47448-47462]:ExpressionStatement[47482-47496]"
    }, {
      "left" : "t.doctypePending.forceQuirks = true;",
      "right" : "t.doctypePending.forceQuirks = true;",
      "info" : "ExpressionStatement[47479-47515]:ExpressionStatement[47513-47549]"
    }, {
      "left" : "t.advanceTransition(BogusDoctype);",
      "right" : "t.advanceTransition(BogusDoctype);",
      "info" : "ExpressionStatement[47532-47566]:ExpressionStatement[47566-47600]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[47639-47643]:PrimitiveType[47673-47677]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[47644-47648]:SimpleName[47678-47682]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[47649-47660]:SingleVariableDeclaration[47683-47694]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[47662-47679]:SingleVariableDeclaration[47696-47713]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47681-49044]:Block[47715-49078]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[47695-47716]:VariableDeclarationStatement[47729-47750]"
    }, {
      "left" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\r':\n                case '\\f':\n                case ' ':\n                    t.transition(BeforeDoctypePublicIdentifier);\n                    break;\n                case '\"':\n                    t.error(this);\n                    // set public id to empty string\n                    t.transition(DoctypePublicIdentifier_doubleQuoted);\n                    break;\n                case '\\'':\n                    t.error(this);\n                    // set public id to empty string\n                    t.transition(DoctypePublicIdentifier_singleQuoted);\n                    break;\n                case '>':\n                    t.error(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.error(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.transition(BogusDoctype);\n            }",
      "right" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\r':\n                case '\\f':\n                case ' ':\n                    t.transition(BeforeDoctypePublicIdentifier);\n                    break;\n                case '\"':\n                    t.error(this);\n                    // set public id to empty string\n                    t.transition(DoctypePublicIdentifier_doubleQuoted);\n                    break;\n                case '\\'':\n                    t.error(this);\n                    // set public id to empty string\n                    t.transition(DoctypePublicIdentifier_singleQuoted);\n                    break;\n                case '>':\n                    t.error(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.error(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.transition(BogusDoctype);\n            }",
      "info" : "SwitchStatement[47729-49034]:SwitchStatement[47763-49068]"
    }, {
      "left" : "case '\\t':",
      "right" : "case '\\t':",
      "info" : "SwitchCase[47758-47768]:SwitchCase[47792-47802]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[47785-47795]:SwitchCase[47819-47829]"
    }, {
      "left" : "case '\\r':",
      "right" : "case '\\r':",
      "info" : "SwitchCase[47812-47822]:SwitchCase[47846-47856]"
    }, {
      "left" : "case '\\f':",
      "right" : "case '\\f':",
      "info" : "SwitchCase[47839-47849]:SwitchCase[47873-47883]"
    }, {
      "left" : "case ' ':",
      "right" : "case ' ':",
      "info" : "SwitchCase[47866-47875]:SwitchCase[47900-47909]"
    }, {
      "left" : "t.transition(BeforeDoctypePublicIdentifier);",
      "right" : "t.transition(BeforeDoctypePublicIdentifier);",
      "info" : "ExpressionStatement[47896-47940]:ExpressionStatement[47930-47974]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[47961-47967]:BreakStatement[47995-48001]"
    }, {
      "left" : "case '\"':",
      "right" : "case '\"':",
      "info" : "SwitchCase[47984-47993]:SwitchCase[48018-48027]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[48014-48028]:ExpressionStatement[48048-48062]"
    }, {
      "left" : "t.transition(DoctypePublicIdentifier_doubleQuoted);",
      "right" : "t.transition(DoctypePublicIdentifier_doubleQuoted);",
      "info" : "ExpressionStatement[48102-48153]:ExpressionStatement[48136-48187]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[48174-48180]:BreakStatement[48208-48214]"
    }, {
      "left" : "case '\\'':",
      "right" : "case '\\'':",
      "info" : "SwitchCase[48197-48207]:SwitchCase[48231-48241]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[48228-48242]:ExpressionStatement[48262-48276]"
    }, {
      "left" : "t.transition(DoctypePublicIdentifier_singleQuoted);",
      "right" : "t.transition(DoctypePublicIdentifier_singleQuoted);",
      "info" : "ExpressionStatement[48316-48367]:ExpressionStatement[48350-48401]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[48388-48394]:BreakStatement[48422-48428]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[48411-48420]:SwitchCase[48445-48454]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[48441-48455]:ExpressionStatement[48475-48489]"
    }, {
      "left" : "t.doctypePending.forceQuirks = true;",
      "right" : "t.doctypePending.forceQuirks = true;",
      "info" : "ExpressionStatement[48476-48512]:ExpressionStatement[48510-48546]"
    }, {
      "left" : "t.emitDoctypePending();",
      "right" : "t.emitDoctypePending();",
      "info" : "ExpressionStatement[48533-48556]:ExpressionStatement[48567-48590]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[48577-48596]:ExpressionStatement[48611-48630]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[48617-48623]:BreakStatement[48651-48657]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[48640-48649]:SwitchCase[48674-48683]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[48670-48687]:ExpressionStatement[48704-48721]"
    }, {
      "left" : "t.doctypePending.forceQuirks = true;",
      "right" : "t.doctypePending.forceQuirks = true;",
      "info" : "ExpressionStatement[48708-48744]:ExpressionStatement[48742-48778]"
    }, {
      "left" : "t.emitDoctypePending();",
      "right" : "t.emitDoctypePending();",
      "info" : "ExpressionStatement[48765-48788]:ExpressionStatement[48799-48822]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[48809-48828]:ExpressionStatement[48843-48862]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[48849-48855]:BreakStatement[48883-48889]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[48872-48880]:SwitchCase[48906-48914]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[48901-48915]:ExpressionStatement[48935-48949]"
    }, {
      "left" : "t.doctypePending.forceQuirks = true;",
      "right" : "t.doctypePending.forceQuirks = true;",
      "info" : "ExpressionStatement[48936-48972]:ExpressionStatement[48970-49006]"
    }, {
      "left" : "t.transition(BogusDoctype);",
      "right" : "t.transition(BogusDoctype);",
      "info" : "ExpressionStatement[48993-49020]:ExpressionStatement[49027-49054]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[49096-49100]:PrimitiveType[49130-49134]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[49101-49105]:SimpleName[49135-49139]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[49106-49117]:SingleVariableDeclaration[49140-49151]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[49119-49136]:SingleVariableDeclaration[49153-49170]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49138-50366]:Block[49172-50400]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[49152-49173]:VariableDeclarationStatement[49186-49207]"
    }, {
      "left" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\r':\n                case '\\f':\n                case ' ':\n                    break;\n                case '\"':\n                    // set public id to empty string\n                    t.transition(DoctypePublicIdentifier_doubleQuoted);\n                    break;\n                case '\\'':\n                    // set public id to empty string\n                    t.transition(DoctypePublicIdentifier_singleQuoted);\n                    break;\n                case '>':\n                    t.error(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.error(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.transition(BogusDoctype);\n            }",
      "right" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\r':\n                case '\\f':\n                case ' ':\n                    break;\n                case '\"':\n                    // set public id to empty string\n                    t.transition(DoctypePublicIdentifier_doubleQuoted);\n                    break;\n                case '\\'':\n                    // set public id to empty string\n                    t.transition(DoctypePublicIdentifier_singleQuoted);\n                    break;\n                case '>':\n                    t.error(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.error(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.transition(BogusDoctype);\n            }",
      "info" : "SwitchStatement[49186-50356]:SwitchStatement[49220-50390]"
    }, {
      "left" : "case '\\t':",
      "right" : "case '\\t':",
      "info" : "SwitchCase[49215-49225]:SwitchCase[49249-49259]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[49242-49252]:SwitchCase[49276-49286]"
    }, {
      "left" : "case '\\r':",
      "right" : "case '\\r':",
      "info" : "SwitchCase[49269-49279]:SwitchCase[49303-49313]"
    }, {
      "left" : "case '\\f':",
      "right" : "case '\\f':",
      "info" : "SwitchCase[49296-49306]:SwitchCase[49330-49340]"
    }, {
      "left" : "case ' ':",
      "right" : "case ' ':",
      "info" : "SwitchCase[49323-49332]:SwitchCase[49357-49366]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[49353-49359]:BreakStatement[49387-49393]"
    }, {
      "left" : "case '\"':",
      "right" : "case '\"':",
      "info" : "SwitchCase[49376-49385]:SwitchCase[49410-49419]"
    }, {
      "left" : "t.transition(DoctypePublicIdentifier_doubleQuoted);",
      "right" : "t.transition(DoctypePublicIdentifier_doubleQuoted);",
      "info" : "ExpressionStatement[49459-49510]:ExpressionStatement[49493-49544]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[49531-49537]:BreakStatement[49565-49571]"
    }, {
      "left" : "case '\\'':",
      "right" : "case '\\'':",
      "info" : "SwitchCase[49554-49564]:SwitchCase[49588-49598]"
    }, {
      "left" : "t.transition(DoctypePublicIdentifier_singleQuoted);",
      "right" : "t.transition(DoctypePublicIdentifier_singleQuoted);",
      "info" : "ExpressionStatement[49638-49689]:ExpressionStatement[49672-49723]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[49710-49716]:BreakStatement[49744-49750]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[49733-49742]:SwitchCase[49767-49776]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[49763-49777]:ExpressionStatement[49797-49811]"
    }, {
      "left" : "t.doctypePending.forceQuirks = true;",
      "right" : "t.doctypePending.forceQuirks = true;",
      "info" : "ExpressionStatement[49798-49834]:ExpressionStatement[49832-49868]"
    }, {
      "left" : "t.emitDoctypePending();",
      "right" : "t.emitDoctypePending();",
      "info" : "ExpressionStatement[49855-49878]:ExpressionStatement[49889-49912]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[49899-49918]:ExpressionStatement[49933-49952]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[49939-49945]:BreakStatement[49973-49979]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[49962-49971]:SwitchCase[49996-50005]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[49992-50009]:ExpressionStatement[50026-50043]"
    }, {
      "left" : "t.doctypePending.forceQuirks = true;",
      "right" : "t.doctypePending.forceQuirks = true;",
      "info" : "ExpressionStatement[50030-50066]:ExpressionStatement[50064-50100]"
    }, {
      "left" : "t.emitDoctypePending();",
      "right" : "t.emitDoctypePending();",
      "info" : "ExpressionStatement[50087-50110]:ExpressionStatement[50121-50144]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[50131-50150]:ExpressionStatement[50165-50184]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[50171-50177]:BreakStatement[50205-50211]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[50194-50202]:SwitchCase[50228-50236]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[50223-50237]:ExpressionStatement[50257-50271]"
    }, {
      "left" : "t.doctypePending.forceQuirks = true;",
      "right" : "t.doctypePending.forceQuirks = true;",
      "info" : "ExpressionStatement[50258-50294]:ExpressionStatement[50292-50328]"
    }, {
      "left" : "t.transition(BogusDoctype);",
      "right" : "t.transition(BogusDoctype);",
      "info" : "ExpressionStatement[50315-50342]:ExpressionStatement[50349-50376]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[50425-50429]:PrimitiveType[50459-50463]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[50430-50434]:SimpleName[50464-50468]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[50435-50446]:SingleVariableDeclaration[50469-50480]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[50448-50465]:SingleVariableDeclaration[50482-50499]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50467-51391]:Block[50501-51425]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[50481-50502]:VariableDeclarationStatement[50515-50536]"
    }, {
      "left" : "switch (c) {\n                case '\"':\n                    t.transition(AfterDoctypePublicIdentifier);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.doctypePending.publicIdentifier.append(replacementChar);\n                    break;\n                case '>':\n                    t.error(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.doctypePending.publicIdentifier.append(c);\n            }",
      "right" : "switch (c) {\n                case '\"':\n                    t.transition(AfterDoctypePublicIdentifier);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.doctypePending.publicIdentifier.append(replacementChar);\n                    break;\n                case '>':\n                    t.error(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.doctypePending.publicIdentifier.append(c);\n            }",
      "info" : "SwitchStatement[50515-51381]:SwitchStatement[50549-51415]"
    }, {
      "left" : "case '\"':",
      "right" : "case '\"':",
      "info" : "SwitchCase[50544-50553]:SwitchCase[50578-50587]"
    }, {
      "left" : "t.transition(AfterDoctypePublicIdentifier);",
      "right" : "t.transition(AfterDoctypePublicIdentifier);",
      "info" : "ExpressionStatement[50574-50617]:ExpressionStatement[50608-50651]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[50638-50644]:BreakStatement[50672-50678]"
    }, {
      "left" : "case nullChar:",
      "right" : "case nullChar:",
      "info" : "SwitchCase[50661-50675]:SwitchCase[50695-50709]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[50696-50710]:ExpressionStatement[50730-50744]"
    }, {
      "left" : "t.doctypePending.publicIdentifier.append(replacementChar);",
      "right" : "t.doctypePending.publicIdentifier.append(replacementChar);",
      "info" : "ExpressionStatement[50731-50789]:ExpressionStatement[50765-50823]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[50810-50816]:BreakStatement[50844-50850]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[50833-50842]:SwitchCase[50867-50876]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[50863-50877]:ExpressionStatement[50897-50911]"
    }, {
      "left" : "t.doctypePending.forceQuirks = true;",
      "right" : "t.doctypePending.forceQuirks = true;",
      "info" : "ExpressionStatement[50898-50934]:ExpressionStatement[50932-50968]"
    }, {
      "left" : "t.emitDoctypePending();",
      "right" : "t.emitDoctypePending();",
      "info" : "ExpressionStatement[50955-50978]:ExpressionStatement[50989-51012]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[50999-51018]:ExpressionStatement[51033-51052]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[51039-51045]:BreakStatement[51073-51079]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[51062-51071]:SwitchCase[51096-51105]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[51092-51109]:ExpressionStatement[51126-51143]"
    }, {
      "left" : "t.doctypePending.forceQuirks = true;",
      "right" : "t.doctypePending.forceQuirks = true;",
      "info" : "ExpressionStatement[51130-51166]:ExpressionStatement[51164-51200]"
    }, {
      "left" : "t.emitDoctypePending();",
      "right" : "t.emitDoctypePending();",
      "info" : "ExpressionStatement[51187-51210]:ExpressionStatement[51221-51244]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[51231-51250]:ExpressionStatement[51265-51284]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[51271-51277]:BreakStatement[51305-51311]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[51294-51302]:SwitchCase[51328-51336]"
    }, {
      "left" : "t.doctypePending.publicIdentifier.append(c);",
      "right" : "t.doctypePending.publicIdentifier.append(c);",
      "info" : "ExpressionStatement[51323-51367]:ExpressionStatement[51357-51401]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[51450-51454]:PrimitiveType[51484-51488]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[51455-51459]:SimpleName[51489-51493]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[51460-51471]:SingleVariableDeclaration[51494-51505]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[51473-51490]:SingleVariableDeclaration[51507-51524]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51492-52417]:Block[51526-52451]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[51506-51527]:VariableDeclarationStatement[51540-51561]"
    }, {
      "left" : "switch (c) {\n                case '\\'':\n                    t.transition(AfterDoctypePublicIdentifier);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.doctypePending.publicIdentifier.append(replacementChar);\n                    break;\n                case '>':\n                    t.error(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.doctypePending.publicIdentifier.append(c);\n            }",
      "right" : "switch (c) {\n                case '\\'':\n                    t.transition(AfterDoctypePublicIdentifier);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.doctypePending.publicIdentifier.append(replacementChar);\n                    break;\n                case '>':\n                    t.error(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.doctypePending.publicIdentifier.append(c);\n            }",
      "info" : "SwitchStatement[51540-52407]:SwitchStatement[51574-52441]"
    }, {
      "left" : "case '\\'':",
      "right" : "case '\\'':",
      "info" : "SwitchCase[51569-51579]:SwitchCase[51603-51613]"
    }, {
      "left" : "t.transition(AfterDoctypePublicIdentifier);",
      "right" : "t.transition(AfterDoctypePublicIdentifier);",
      "info" : "ExpressionStatement[51600-51643]:ExpressionStatement[51634-51677]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[51664-51670]:BreakStatement[51698-51704]"
    }, {
      "left" : "case nullChar:",
      "right" : "case nullChar:",
      "info" : "SwitchCase[51687-51701]:SwitchCase[51721-51735]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[51722-51736]:ExpressionStatement[51756-51770]"
    }, {
      "left" : "t.doctypePending.publicIdentifier.append(replacementChar);",
      "right" : "t.doctypePending.publicIdentifier.append(replacementChar);",
      "info" : "ExpressionStatement[51757-51815]:ExpressionStatement[51791-51849]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[51836-51842]:BreakStatement[51870-51876]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[51859-51868]:SwitchCase[51893-51902]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[51889-51903]:ExpressionStatement[51923-51937]"
    }, {
      "left" : "t.doctypePending.forceQuirks = true;",
      "right" : "t.doctypePending.forceQuirks = true;",
      "info" : "ExpressionStatement[51924-51960]:ExpressionStatement[51958-51994]"
    }, {
      "left" : "t.emitDoctypePending();",
      "right" : "t.emitDoctypePending();",
      "info" : "ExpressionStatement[51981-52004]:ExpressionStatement[52015-52038]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[52025-52044]:ExpressionStatement[52059-52078]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[52065-52071]:BreakStatement[52099-52105]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[52088-52097]:SwitchCase[52122-52131]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[52118-52135]:ExpressionStatement[52152-52169]"
    }, {
      "left" : "t.doctypePending.forceQuirks = true;",
      "right" : "t.doctypePending.forceQuirks = true;",
      "info" : "ExpressionStatement[52156-52192]:ExpressionStatement[52190-52226]"
    }, {
      "left" : "t.emitDoctypePending();",
      "right" : "t.emitDoctypePending();",
      "info" : "ExpressionStatement[52213-52236]:ExpressionStatement[52247-52270]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[52257-52276]:ExpressionStatement[52291-52310]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[52297-52303]:BreakStatement[52331-52337]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[52320-52328]:SwitchCase[52354-52362]"
    }, {
      "left" : "t.doctypePending.publicIdentifier.append(c);",
      "right" : "t.doctypePending.publicIdentifier.append(c);",
      "info" : "ExpressionStatement[52349-52393]:ExpressionStatement[52383-52427]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[52468-52472]:PrimitiveType[52502-52506]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[52473-52477]:SimpleName[52507-52511]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[52478-52489]:SingleVariableDeclaration[52512-52523]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[52491-52508]:SingleVariableDeclaration[52525-52542]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52510-53764]:Block[52544-53798]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[52524-52545]:VariableDeclarationStatement[52558-52579]"
    }, {
      "left" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\r':\n                case '\\f':\n                case ' ':\n                    t.transition(BetweenDoctypePublicAndSystemIdentifiers);\n                    break;\n                case '>':\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case '\"':\n                    t.error(this);\n                    // system id empty\n                    t.transition(DoctypeSystemIdentifier_doubleQuoted);\n                    break;\n                case '\\'':\n                    t.error(this);\n                    // system id empty\n                    t.transition(DoctypeSystemIdentifier_singleQuoted);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.error(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.transition(BogusDoctype);\n            }",
      "right" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\r':\n                case '\\f':\n                case ' ':\n                    t.transition(BetweenDoctypePublicAndSystemIdentifiers);\n                    break;\n                case '>':\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case '\"':\n                    t.error(this);\n                    // system id empty\n                    t.transition(DoctypeSystemIdentifier_doubleQuoted);\n                    break;\n                case '\\'':\n                    t.error(this);\n                    // system id empty\n                    t.transition(DoctypeSystemIdentifier_singleQuoted);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.error(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.transition(BogusDoctype);\n            }",
      "info" : "SwitchStatement[52558-53754]:SwitchStatement[52592-53788]"
    }, {
      "left" : "case '\\t':",
      "right" : "case '\\t':",
      "info" : "SwitchCase[52587-52597]:SwitchCase[52621-52631]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[52614-52624]:SwitchCase[52648-52658]"
    }, {
      "left" : "case '\\r':",
      "right" : "case '\\r':",
      "info" : "SwitchCase[52641-52651]:SwitchCase[52675-52685]"
    }, {
      "left" : "case '\\f':",
      "right" : "case '\\f':",
      "info" : "SwitchCase[52668-52678]:SwitchCase[52702-52712]"
    }, {
      "left" : "case ' ':",
      "right" : "case ' ':",
      "info" : "SwitchCase[52695-52704]:SwitchCase[52729-52738]"
    }, {
      "left" : "t.transition(BetweenDoctypePublicAndSystemIdentifiers);",
      "right" : "t.transition(BetweenDoctypePublicAndSystemIdentifiers);",
      "info" : "ExpressionStatement[52725-52780]:ExpressionStatement[52759-52814]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[52801-52807]:BreakStatement[52835-52841]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[52824-52833]:SwitchCase[52858-52867]"
    }, {
      "left" : "t.emitDoctypePending();",
      "right" : "t.emitDoctypePending();",
      "info" : "ExpressionStatement[52854-52877]:ExpressionStatement[52888-52911]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[52898-52917]:ExpressionStatement[52932-52951]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[52938-52944]:BreakStatement[52972-52978]"
    }, {
      "left" : "case '\"':",
      "right" : "case '\"':",
      "info" : "SwitchCase[52961-52970]:SwitchCase[52995-53004]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[52991-53005]:ExpressionStatement[53025-53039]"
    }, {
      "left" : "t.transition(DoctypeSystemIdentifier_doubleQuoted);",
      "right" : "t.transition(DoctypeSystemIdentifier_doubleQuoted);",
      "info" : "ExpressionStatement[53065-53116]:ExpressionStatement[53099-53150]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[53137-53143]:BreakStatement[53171-53177]"
    }, {
      "left" : "case '\\'':",
      "right" : "case '\\'':",
      "info" : "SwitchCase[53160-53170]:SwitchCase[53194-53204]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[53191-53205]:ExpressionStatement[53225-53239]"
    }, {
      "left" : "t.transition(DoctypeSystemIdentifier_singleQuoted);",
      "right" : "t.transition(DoctypeSystemIdentifier_singleQuoted);",
      "info" : "ExpressionStatement[53265-53316]:ExpressionStatement[53299-53350]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[53337-53343]:BreakStatement[53371-53377]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[53360-53369]:SwitchCase[53394-53403]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[53390-53407]:ExpressionStatement[53424-53441]"
    }, {
      "left" : "t.doctypePending.forceQuirks = true;",
      "right" : "t.doctypePending.forceQuirks = true;",
      "info" : "ExpressionStatement[53428-53464]:ExpressionStatement[53462-53498]"
    }, {
      "left" : "t.emitDoctypePending();",
      "right" : "t.emitDoctypePending();",
      "info" : "ExpressionStatement[53485-53508]:ExpressionStatement[53519-53542]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[53529-53548]:ExpressionStatement[53563-53582]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[53569-53575]:BreakStatement[53603-53609]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[53592-53600]:SwitchCase[53626-53634]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[53621-53635]:ExpressionStatement[53655-53669]"
    }, {
      "left" : "t.doctypePending.forceQuirks = true;",
      "right" : "t.doctypePending.forceQuirks = true;",
      "info" : "ExpressionStatement[53656-53692]:ExpressionStatement[53690-53726]"
    }, {
      "left" : "t.transition(BogusDoctype);",
      "right" : "t.transition(BogusDoctype);",
      "info" : "ExpressionStatement[53713-53740]:ExpressionStatement[53747-53774]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[53827-53831]:PrimitiveType[53861-53865]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[53832-53836]:SimpleName[53866-53870]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[53837-53848]:SingleVariableDeclaration[53871-53882]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[53850-53867]:SingleVariableDeclaration[53884-53901]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53869-55047]:Block[53903-55081]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[53883-53904]:VariableDeclarationStatement[53917-53938]"
    }, {
      "left" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\r':\n                case '\\f':\n                case ' ':\n                    break;\n                case '>':\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case '\"':\n                    t.error(this);\n                    // system id empty\n                    t.transition(DoctypeSystemIdentifier_doubleQuoted);\n                    break;\n                case '\\'':\n                    t.error(this);\n                    // system id empty\n                    t.transition(DoctypeSystemIdentifier_singleQuoted);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.error(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.transition(BogusDoctype);\n            }",
      "right" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\r':\n                case '\\f':\n                case ' ':\n                    break;\n                case '>':\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case '\"':\n                    t.error(this);\n                    // system id empty\n                    t.transition(DoctypeSystemIdentifier_doubleQuoted);\n                    break;\n                case '\\'':\n                    t.error(this);\n                    // system id empty\n                    t.transition(DoctypeSystemIdentifier_singleQuoted);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.error(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.transition(BogusDoctype);\n            }",
      "info" : "SwitchStatement[53917-55037]:SwitchStatement[53951-55071]"
    }, {
      "left" : "case '\\t':",
      "right" : "case '\\t':",
      "info" : "SwitchCase[53946-53956]:SwitchCase[53980-53990]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[53973-53983]:SwitchCase[54007-54017]"
    }, {
      "left" : "case '\\r':",
      "right" : "case '\\r':",
      "info" : "SwitchCase[54000-54010]:SwitchCase[54034-54044]"
    }, {
      "left" : "case '\\f':",
      "right" : "case '\\f':",
      "info" : "SwitchCase[54027-54037]:SwitchCase[54061-54071]"
    }, {
      "left" : "case ' ':",
      "right" : "case ' ':",
      "info" : "SwitchCase[54054-54063]:SwitchCase[54088-54097]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[54084-54090]:BreakStatement[54118-54124]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[54107-54116]:SwitchCase[54141-54150]"
    }, {
      "left" : "t.emitDoctypePending();",
      "right" : "t.emitDoctypePending();",
      "info" : "ExpressionStatement[54137-54160]:ExpressionStatement[54171-54194]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[54181-54200]:ExpressionStatement[54215-54234]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[54221-54227]:BreakStatement[54255-54261]"
    }, {
      "left" : "case '\"':",
      "right" : "case '\"':",
      "info" : "SwitchCase[54244-54253]:SwitchCase[54278-54287]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[54274-54288]:ExpressionStatement[54308-54322]"
    }, {
      "left" : "t.transition(DoctypeSystemIdentifier_doubleQuoted);",
      "right" : "t.transition(DoctypeSystemIdentifier_doubleQuoted);",
      "info" : "ExpressionStatement[54348-54399]:ExpressionStatement[54382-54433]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[54420-54426]:BreakStatement[54454-54460]"
    }, {
      "left" : "case '\\'':",
      "right" : "case '\\'':",
      "info" : "SwitchCase[54443-54453]:SwitchCase[54477-54487]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[54474-54488]:ExpressionStatement[54508-54522]"
    }, {
      "left" : "t.transition(DoctypeSystemIdentifier_singleQuoted);",
      "right" : "t.transition(DoctypeSystemIdentifier_singleQuoted);",
      "info" : "ExpressionStatement[54548-54599]:ExpressionStatement[54582-54633]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[54620-54626]:BreakStatement[54654-54660]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[54643-54652]:SwitchCase[54677-54686]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[54673-54690]:ExpressionStatement[54707-54724]"
    }, {
      "left" : "t.doctypePending.forceQuirks = true;",
      "right" : "t.doctypePending.forceQuirks = true;",
      "info" : "ExpressionStatement[54711-54747]:ExpressionStatement[54745-54781]"
    }, {
      "left" : "t.emitDoctypePending();",
      "right" : "t.emitDoctypePending();",
      "info" : "ExpressionStatement[54768-54791]:ExpressionStatement[54802-54825]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[54812-54831]:ExpressionStatement[54846-54865]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[54852-54858]:BreakStatement[54886-54892]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[54875-54883]:SwitchCase[54909-54917]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[54904-54918]:ExpressionStatement[54938-54952]"
    }, {
      "left" : "t.doctypePending.forceQuirks = true;",
      "right" : "t.doctypePending.forceQuirks = true;",
      "info" : "ExpressionStatement[54939-54975]:ExpressionStatement[54973-55009]"
    }, {
      "left" : "t.transition(BogusDoctype);",
      "right" : "t.transition(BogusDoctype);",
      "info" : "ExpressionStatement[54996-55023]:ExpressionStatement[55030-55057]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[55095-55099]:PrimitiveType[55129-55133]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[55100-55104]:SimpleName[55134-55138]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[55105-55116]:SingleVariableDeclaration[55139-55150]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[55118-55135]:SingleVariableDeclaration[55152-55169]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55137-56468]:Block[55171-56502]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[55151-55172]:VariableDeclarationStatement[55185-55206]"
    }, {
      "left" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\r':\n                case '\\f':\n                case ' ':\n                    t.transition(BeforeDoctypeSystemIdentifier);\n                    break;\n                case '>':\n                    t.error(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case '\"':\n                    t.error(this);\n                    // system id empty\n                    t.transition(DoctypeSystemIdentifier_doubleQuoted);\n                    break;\n                case '\\'':\n                    t.error(this);\n                    // system id empty\n                    t.transition(DoctypeSystemIdentifier_singleQuoted);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.error(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n            }",
      "right" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\r':\n                case '\\f':\n                case ' ':\n                    t.transition(BeforeDoctypeSystemIdentifier);\n                    break;\n                case '>':\n                    t.error(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case '\"':\n                    t.error(this);\n                    // system id empty\n                    t.transition(DoctypeSystemIdentifier_doubleQuoted);\n                    break;\n                case '\\'':\n                    t.error(this);\n                    // system id empty\n                    t.transition(DoctypeSystemIdentifier_singleQuoted);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.error(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n            }",
      "info" : "SwitchStatement[55185-56458]:SwitchStatement[55219-56492]"
    }, {
      "left" : "case '\\t':",
      "right" : "case '\\t':",
      "info" : "SwitchCase[55214-55224]:SwitchCase[55248-55258]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[55241-55251]:SwitchCase[55275-55285]"
    }, {
      "left" : "case '\\r':",
      "right" : "case '\\r':",
      "info" : "SwitchCase[55268-55278]:SwitchCase[55302-55312]"
    }, {
      "left" : "case '\\f':",
      "right" : "case '\\f':",
      "info" : "SwitchCase[55295-55305]:SwitchCase[55329-55339]"
    }, {
      "left" : "case ' ':",
      "right" : "case ' ':",
      "info" : "SwitchCase[55322-55331]:SwitchCase[55356-55365]"
    }, {
      "left" : "t.transition(BeforeDoctypeSystemIdentifier);",
      "right" : "t.transition(BeforeDoctypeSystemIdentifier);",
      "info" : "ExpressionStatement[55352-55396]:ExpressionStatement[55386-55430]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[55417-55423]:BreakStatement[55451-55457]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[55440-55449]:SwitchCase[55474-55483]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[55470-55484]:ExpressionStatement[55504-55518]"
    }, {
      "left" : "t.doctypePending.forceQuirks = true;",
      "right" : "t.doctypePending.forceQuirks = true;",
      "info" : "ExpressionStatement[55505-55541]:ExpressionStatement[55539-55575]"
    }, {
      "left" : "t.emitDoctypePending();",
      "right" : "t.emitDoctypePending();",
      "info" : "ExpressionStatement[55562-55585]:ExpressionStatement[55596-55619]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[55606-55625]:ExpressionStatement[55640-55659]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[55646-55652]:BreakStatement[55680-55686]"
    }, {
      "left" : "case '\"':",
      "right" : "case '\"':",
      "info" : "SwitchCase[55669-55678]:SwitchCase[55703-55712]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[55699-55713]:ExpressionStatement[55733-55747]"
    }, {
      "left" : "t.transition(DoctypeSystemIdentifier_doubleQuoted);",
      "right" : "t.transition(DoctypeSystemIdentifier_doubleQuoted);",
      "info" : "ExpressionStatement[55773-55824]:ExpressionStatement[55807-55858]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[55845-55851]:BreakStatement[55879-55885]"
    }, {
      "left" : "case '\\'':",
      "right" : "case '\\'':",
      "info" : "SwitchCase[55868-55878]:SwitchCase[55902-55912]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[55899-55913]:ExpressionStatement[55933-55947]"
    }, {
      "left" : "t.transition(DoctypeSystemIdentifier_singleQuoted);",
      "right" : "t.transition(DoctypeSystemIdentifier_singleQuoted);",
      "info" : "ExpressionStatement[55973-56024]:ExpressionStatement[56007-56058]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[56045-56051]:BreakStatement[56079-56085]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[56068-56077]:SwitchCase[56102-56111]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[56098-56115]:ExpressionStatement[56132-56149]"
    }, {
      "left" : "t.doctypePending.forceQuirks = true;",
      "right" : "t.doctypePending.forceQuirks = true;",
      "info" : "ExpressionStatement[56136-56172]:ExpressionStatement[56170-56206]"
    }, {
      "left" : "t.emitDoctypePending();",
      "right" : "t.emitDoctypePending();",
      "info" : "ExpressionStatement[56193-56216]:ExpressionStatement[56227-56250]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[56237-56256]:ExpressionStatement[56271-56290]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[56277-56283]:BreakStatement[56311-56317]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[56300-56308]:SwitchCase[56334-56342]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[56329-56343]:ExpressionStatement[56363-56377]"
    }, {
      "left" : "t.doctypePending.forceQuirks = true;",
      "right" : "t.doctypePending.forceQuirks = true;",
      "info" : "ExpressionStatement[56364-56400]:ExpressionStatement[56398-56434]"
    }, {
      "left" : "t.emitDoctypePending();",
      "right" : "t.emitDoctypePending();",
      "info" : "ExpressionStatement[56421-56444]:ExpressionStatement[56455-56478]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[56520-56524]:PrimitiveType[56554-56558]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[56525-56529]:SimpleName[56559-56563]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[56530-56541]:SingleVariableDeclaration[56564-56575]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[56543-56560]:SingleVariableDeclaration[56577-56594]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56562-57790]:Block[56596-57824]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[56576-56597]:VariableDeclarationStatement[56610-56631]"
    }, {
      "left" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\r':\n                case '\\f':\n                case ' ':\n                    break;\n                case '\"':\n                    // set system id to empty string\n                    t.transition(DoctypeSystemIdentifier_doubleQuoted);\n                    break;\n                case '\\'':\n                    // set public id to empty string\n                    t.transition(DoctypeSystemIdentifier_singleQuoted);\n                    break;\n                case '>':\n                    t.error(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.error(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.transition(BogusDoctype);\n            }",
      "right" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\r':\n                case '\\f':\n                case ' ':\n                    break;\n                case '\"':\n                    // set system id to empty string\n                    t.transition(DoctypeSystemIdentifier_doubleQuoted);\n                    break;\n                case '\\'':\n                    // set public id to empty string\n                    t.transition(DoctypeSystemIdentifier_singleQuoted);\n                    break;\n                case '>':\n                    t.error(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.error(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.transition(BogusDoctype);\n            }",
      "info" : "SwitchStatement[56610-57780]:SwitchStatement[56644-57814]"
    }, {
      "left" : "case '\\t':",
      "right" : "case '\\t':",
      "info" : "SwitchCase[56639-56649]:SwitchCase[56673-56683]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[56666-56676]:SwitchCase[56700-56710]"
    }, {
      "left" : "case '\\r':",
      "right" : "case '\\r':",
      "info" : "SwitchCase[56693-56703]:SwitchCase[56727-56737]"
    }, {
      "left" : "case '\\f':",
      "right" : "case '\\f':",
      "info" : "SwitchCase[56720-56730]:SwitchCase[56754-56764]"
    }, {
      "left" : "case ' ':",
      "right" : "case ' ':",
      "info" : "SwitchCase[56747-56756]:SwitchCase[56781-56790]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[56777-56783]:BreakStatement[56811-56817]"
    }, {
      "left" : "case '\"':",
      "right" : "case '\"':",
      "info" : "SwitchCase[56800-56809]:SwitchCase[56834-56843]"
    }, {
      "left" : "t.transition(DoctypeSystemIdentifier_doubleQuoted);",
      "right" : "t.transition(DoctypeSystemIdentifier_doubleQuoted);",
      "info" : "ExpressionStatement[56883-56934]:ExpressionStatement[56917-56968]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[56955-56961]:BreakStatement[56989-56995]"
    }, {
      "left" : "case '\\'':",
      "right" : "case '\\'':",
      "info" : "SwitchCase[56978-56988]:SwitchCase[57012-57022]"
    }, {
      "left" : "t.transition(DoctypeSystemIdentifier_singleQuoted);",
      "right" : "t.transition(DoctypeSystemIdentifier_singleQuoted);",
      "info" : "ExpressionStatement[57062-57113]:ExpressionStatement[57096-57147]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[57134-57140]:BreakStatement[57168-57174]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[57157-57166]:SwitchCase[57191-57200]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[57187-57201]:ExpressionStatement[57221-57235]"
    }, {
      "left" : "t.doctypePending.forceQuirks = true;",
      "right" : "t.doctypePending.forceQuirks = true;",
      "info" : "ExpressionStatement[57222-57258]:ExpressionStatement[57256-57292]"
    }, {
      "left" : "t.emitDoctypePending();",
      "right" : "t.emitDoctypePending();",
      "info" : "ExpressionStatement[57279-57302]:ExpressionStatement[57313-57336]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[57323-57342]:ExpressionStatement[57357-57376]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[57363-57369]:BreakStatement[57397-57403]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[57386-57395]:SwitchCase[57420-57429]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[57416-57433]:ExpressionStatement[57450-57467]"
    }, {
      "left" : "t.doctypePending.forceQuirks = true;",
      "right" : "t.doctypePending.forceQuirks = true;",
      "info" : "ExpressionStatement[57454-57490]:ExpressionStatement[57488-57524]"
    }, {
      "left" : "t.emitDoctypePending();",
      "right" : "t.emitDoctypePending();",
      "info" : "ExpressionStatement[57511-57534]:ExpressionStatement[57545-57568]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[57555-57574]:ExpressionStatement[57589-57608]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[57595-57601]:BreakStatement[57629-57635]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[57618-57626]:SwitchCase[57652-57660]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[57647-57661]:ExpressionStatement[57681-57695]"
    }, {
      "left" : "t.doctypePending.forceQuirks = true;",
      "right" : "t.doctypePending.forceQuirks = true;",
      "info" : "ExpressionStatement[57682-57718]:ExpressionStatement[57716-57752]"
    }, {
      "left" : "t.transition(BogusDoctype);",
      "right" : "t.transition(BogusDoctype);",
      "info" : "ExpressionStatement[57739-57766]:ExpressionStatement[57773-57800]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[57849-57853]:PrimitiveType[57883-57887]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[57854-57858]:SimpleName[57888-57892]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[57859-57870]:SingleVariableDeclaration[57893-57904]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[57872-57889]:SingleVariableDeclaration[57906-57923]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57891-58815]:Block[57925-58849]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[57905-57926]:VariableDeclarationStatement[57939-57960]"
    }, {
      "left" : "switch (c) {\n                case '\"':\n                    t.transition(AfterDoctypeSystemIdentifier);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.doctypePending.systemIdentifier.append(replacementChar);\n                    break;\n                case '>':\n                    t.error(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.doctypePending.systemIdentifier.append(c);\n            }",
      "right" : "switch (c) {\n                case '\"':\n                    t.transition(AfterDoctypeSystemIdentifier);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.doctypePending.systemIdentifier.append(replacementChar);\n                    break;\n                case '>':\n                    t.error(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.doctypePending.systemIdentifier.append(c);\n            }",
      "info" : "SwitchStatement[57939-58805]:SwitchStatement[57973-58839]"
    }, {
      "left" : "case '\"':",
      "right" : "case '\"':",
      "info" : "SwitchCase[57968-57977]:SwitchCase[58002-58011]"
    }, {
      "left" : "t.transition(AfterDoctypeSystemIdentifier);",
      "right" : "t.transition(AfterDoctypeSystemIdentifier);",
      "info" : "ExpressionStatement[57998-58041]:ExpressionStatement[58032-58075]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[58062-58068]:BreakStatement[58096-58102]"
    }, {
      "left" : "case nullChar:",
      "right" : "case nullChar:",
      "info" : "SwitchCase[58085-58099]:SwitchCase[58119-58133]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[58120-58134]:ExpressionStatement[58154-58168]"
    }, {
      "left" : "t.doctypePending.systemIdentifier.append(replacementChar);",
      "right" : "t.doctypePending.systemIdentifier.append(replacementChar);",
      "info" : "ExpressionStatement[58155-58213]:ExpressionStatement[58189-58247]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[58234-58240]:BreakStatement[58268-58274]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[58257-58266]:SwitchCase[58291-58300]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[58287-58301]:ExpressionStatement[58321-58335]"
    }, {
      "left" : "t.doctypePending.forceQuirks = true;",
      "right" : "t.doctypePending.forceQuirks = true;",
      "info" : "ExpressionStatement[58322-58358]:ExpressionStatement[58356-58392]"
    }, {
      "left" : "t.emitDoctypePending();",
      "right" : "t.emitDoctypePending();",
      "info" : "ExpressionStatement[58379-58402]:ExpressionStatement[58413-58436]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[58423-58442]:ExpressionStatement[58457-58476]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[58463-58469]:BreakStatement[58497-58503]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[58486-58495]:SwitchCase[58520-58529]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[58516-58533]:ExpressionStatement[58550-58567]"
    }, {
      "left" : "t.doctypePending.forceQuirks = true;",
      "right" : "t.doctypePending.forceQuirks = true;",
      "info" : "ExpressionStatement[58554-58590]:ExpressionStatement[58588-58624]"
    }, {
      "left" : "t.emitDoctypePending();",
      "right" : "t.emitDoctypePending();",
      "info" : "ExpressionStatement[58611-58634]:ExpressionStatement[58645-58668]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[58655-58674]:ExpressionStatement[58689-58708]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[58695-58701]:BreakStatement[58729-58735]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[58718-58726]:SwitchCase[58752-58760]"
    }, {
      "left" : "t.doctypePending.systemIdentifier.append(c);",
      "right" : "t.doctypePending.systemIdentifier.append(c);",
      "info" : "ExpressionStatement[58747-58791]:ExpressionStatement[58781-58825]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[58874-58878]:PrimitiveType[58908-58912]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[58879-58883]:SimpleName[58913-58917]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[58884-58895]:SingleVariableDeclaration[58918-58929]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[58897-58914]:SingleVariableDeclaration[58931-58948]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58916-59841]:Block[58950-59875]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[58930-58951]:VariableDeclarationStatement[58964-58985]"
    }, {
      "left" : "switch (c) {\n                case '\\'':\n                    t.transition(AfterDoctypeSystemIdentifier);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.doctypePending.systemIdentifier.append(replacementChar);\n                    break;\n                case '>':\n                    t.error(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.doctypePending.systemIdentifier.append(c);\n            }",
      "right" : "switch (c) {\n                case '\\'':\n                    t.transition(AfterDoctypeSystemIdentifier);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.doctypePending.systemIdentifier.append(replacementChar);\n                    break;\n                case '>':\n                    t.error(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.doctypePending.systemIdentifier.append(c);\n            }",
      "info" : "SwitchStatement[58964-59831]:SwitchStatement[58998-59865]"
    }, {
      "left" : "case '\\'':",
      "right" : "case '\\'':",
      "info" : "SwitchCase[58993-59003]:SwitchCase[59027-59037]"
    }, {
      "left" : "t.transition(AfterDoctypeSystemIdentifier);",
      "right" : "t.transition(AfterDoctypeSystemIdentifier);",
      "info" : "ExpressionStatement[59024-59067]:ExpressionStatement[59058-59101]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[59088-59094]:BreakStatement[59122-59128]"
    }, {
      "left" : "case nullChar:",
      "right" : "case nullChar:",
      "info" : "SwitchCase[59111-59125]:SwitchCase[59145-59159]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[59146-59160]:ExpressionStatement[59180-59194]"
    }, {
      "left" : "t.doctypePending.systemIdentifier.append(replacementChar);",
      "right" : "t.doctypePending.systemIdentifier.append(replacementChar);",
      "info" : "ExpressionStatement[59181-59239]:ExpressionStatement[59215-59273]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[59260-59266]:BreakStatement[59294-59300]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[59283-59292]:SwitchCase[59317-59326]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[59313-59327]:ExpressionStatement[59347-59361]"
    }, {
      "left" : "t.doctypePending.forceQuirks = true;",
      "right" : "t.doctypePending.forceQuirks = true;",
      "info" : "ExpressionStatement[59348-59384]:ExpressionStatement[59382-59418]"
    }, {
      "left" : "t.emitDoctypePending();",
      "right" : "t.emitDoctypePending();",
      "info" : "ExpressionStatement[59405-59428]:ExpressionStatement[59439-59462]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[59449-59468]:ExpressionStatement[59483-59502]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[59489-59495]:BreakStatement[59523-59529]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[59512-59521]:SwitchCase[59546-59555]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[59542-59559]:ExpressionStatement[59576-59593]"
    }, {
      "left" : "t.doctypePending.forceQuirks = true;",
      "right" : "t.doctypePending.forceQuirks = true;",
      "info" : "ExpressionStatement[59580-59616]:ExpressionStatement[59614-59650]"
    }, {
      "left" : "t.emitDoctypePending();",
      "right" : "t.emitDoctypePending();",
      "info" : "ExpressionStatement[59637-59660]:ExpressionStatement[59671-59694]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[59681-59700]:ExpressionStatement[59715-59734]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[59721-59727]:BreakStatement[59755-59761]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[59744-59752]:SwitchCase[59778-59786]"
    }, {
      "left" : "t.doctypePending.systemIdentifier.append(c);",
      "right" : "t.doctypePending.systemIdentifier.append(c);",
      "info" : "ExpressionStatement[59773-59817]:ExpressionStatement[59807-59851]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[59892-59896]:PrimitiveType[59926-59930]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[59897-59901]:SimpleName[59931-59935]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[59902-59913]:SingleVariableDeclaration[59936-59947]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[59915-59932]:SingleVariableDeclaration[59949-59966]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59934-60696]:Block[59968-60730]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[59948-59969]:VariableDeclarationStatement[59982-60003]"
    }, {
      "left" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\r':\n                case '\\f':\n                case ' ':\n                    break;\n                case '>':\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.error(this);\n                    t.transition(BogusDoctype);\n                    // NOT force quirks\n            }",
      "right" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\r':\n                case '\\f':\n                case ' ':\n                    break;\n                case '>':\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.error(this);\n                    t.transition(BogusDoctype);\n                    // NOT force quirks\n            }",
      "info" : "SwitchStatement[59982-60686]:SwitchStatement[60016-60720]"
    }, {
      "left" : "case '\\t':",
      "right" : "case '\\t':",
      "info" : "SwitchCase[60011-60021]:SwitchCase[60045-60055]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[60038-60048]:SwitchCase[60072-60082]"
    }, {
      "left" : "case '\\r':",
      "right" : "case '\\r':",
      "info" : "SwitchCase[60065-60075]:SwitchCase[60099-60109]"
    }, {
      "left" : "case '\\f':",
      "right" : "case '\\f':",
      "info" : "SwitchCase[60092-60102]:SwitchCase[60126-60136]"
    }, {
      "left" : "case ' ':",
      "right" : "case ' ':",
      "info" : "SwitchCase[60119-60128]:SwitchCase[60153-60162]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[60149-60155]:BreakStatement[60183-60189]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[60172-60181]:SwitchCase[60206-60215]"
    }, {
      "left" : "t.emitDoctypePending();",
      "right" : "t.emitDoctypePending();",
      "info" : "ExpressionStatement[60202-60225]:ExpressionStatement[60236-60259]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[60246-60265]:ExpressionStatement[60280-60299]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[60286-60292]:BreakStatement[60320-60326]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[60309-60318]:SwitchCase[60343-60352]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[60339-60356]:ExpressionStatement[60373-60390]"
    }, {
      "left" : "t.doctypePending.forceQuirks = true;",
      "right" : "t.doctypePending.forceQuirks = true;",
      "info" : "ExpressionStatement[60377-60413]:ExpressionStatement[60411-60447]"
    }, {
      "left" : "t.emitDoctypePending();",
      "right" : "t.emitDoctypePending();",
      "info" : "ExpressionStatement[60434-60457]:ExpressionStatement[60468-60491]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[60478-60497]:ExpressionStatement[60512-60531]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[60518-60524]:BreakStatement[60552-60558]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[60541-60549]:SwitchCase[60575-60583]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[60570-60584]:ExpressionStatement[60604-60618]"
    }, {
      "left" : "t.transition(BogusDoctype);",
      "right" : "t.transition(BogusDoctype);",
      "info" : "ExpressionStatement[60605-60632]:ExpressionStatement[60639-60666]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[60731-60735]:PrimitiveType[60765-60769]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[60736-60740]:SimpleName[60770-60774]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[60741-60752]:SingleVariableDeclaration[60775-60786]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[60754-60771]:SingleVariableDeclaration[60788-60805]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60773-61218]:Block[60807-61252]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[60787-60808]:VariableDeclarationStatement[60821-60842]"
    }, {
      "left" : "switch (c) {\n                case '>':\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    // ignore char\n                    break;\n            }",
      "right" : "switch (c) {\n                case '>':\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    // ignore char\n                    break;\n            }",
      "info" : "SwitchStatement[60821-61208]:SwitchStatement[60855-61242]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[60850-60859]:SwitchCase[60884-60893]"
    }, {
      "left" : "t.emitDoctypePending();",
      "right" : "t.emitDoctypePending();",
      "info" : "ExpressionStatement[60880-60903]:ExpressionStatement[60914-60937]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[60924-60943]:ExpressionStatement[60958-60977]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[60964-60970]:BreakStatement[60998-61004]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[60987-60996]:SwitchCase[61021-61030]"
    }, {
      "left" : "t.emitDoctypePending();",
      "right" : "t.emitDoctypePending();",
      "info" : "ExpressionStatement[61017-61040]:ExpressionStatement[61051-61074]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[61061-61080]:ExpressionStatement[61095-61114]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[61101-61107]:BreakStatement[61135-61141]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[61124-61132]:SwitchCase[61158-61166]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[61188-61194]:BreakStatement[61222-61228]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[61253-61257]:PrimitiveType[61287-61291]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[61258-61262]:SimpleName[61292-61296]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[61263-61274]:SingleVariableDeclaration[61297-61308]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[61276-61293]:SingleVariableDeclaration[61310-61327]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61295-61445]:Block[61329-61479]"
    }, {
      "left" : "String data = r.consumeTo(\"]]>\");",
      "right" : "String data = r.consumeTo(\"]]>\");",
      "info" : "VariableDeclarationStatement[61309-61342]:VariableDeclarationStatement[61343-61376]"
    }, {
      "left" : "t.emit(data);",
      "right" : "t.emit(data);",
      "info" : "ExpressionStatement[61355-61368]:ExpressionStatement[61389-61402]"
    }, {
      "left" : "r.matchConsume(\"]]>\");",
      "right" : "r.matchConsume(\"]]>\");",
      "info" : "ExpressionStatement[61381-61403]:ExpressionStatement[61415-61437]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[61416-61435]:ExpressionStatement[61450-61469]"
    }, {
      "left" : "abstract",
      "right" : "abstract",
      "info" : "Modifier[61459-61467]:Modifier[61493-61501]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[61468-61472]:PrimitiveType[61502-61506]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[61473-61477]:SimpleName[61507-61511]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[61478-61489]:SingleVariableDeclaration[61512-61523]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[61491-61508]:SingleVariableDeclaration[61525-61542]"
    } ]
  },
  "interFileMappings" : { }
}