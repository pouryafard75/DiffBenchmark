{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "enum : SplitStrategyKind",
      "right" : "enum : SplitStrategyKind",
      "info" : "EnumDeclaration[4597-4659]:EnumDeclaration[4597-4659]"
    }, {
      "left" : "private static final Log LOG = LogFactory.getLog(OrcInputFormat.class);",
      "right" : "private static final Log LOG = LogFactory.getLog(OrcInputFormat.class);",
      "info" : "FieldDeclaration[4663-4734]:FieldDeclaration[4663-4734]"
    }, {
      "left" : "private static boolean isDebugEnabled = LOG.isDebugEnabled();",
      "right" : "private static boolean isDebugEnabled = LOG.isDebugEnabled();",
      "info" : "FieldDeclaration[4737-4798]:FieldDeclaration[4737-4798]"
    }, {
      "left" : "static final HadoopShims SHIMS = ShimLoader.getHadoopShims();",
      "right" : "static final HadoopShims SHIMS = ShimLoader.getHadoopShims();",
      "info" : "FieldDeclaration[4801-4862]:FieldDeclaration[4801-4862]"
    }, {
      "left" : "static final String MIN_SPLIT_SIZE =\n      SHIMS.getHadoopConfNames().get(\"MAPREDMINSPLITSIZE\");",
      "right" : "static final String MIN_SPLIT_SIZE =\n      SHIMS.getHadoopConfNames().get(\"MAPREDMINSPLITSIZE\");",
      "info" : "FieldDeclaration[4865-4961]:FieldDeclaration[4865-4961]"
    }, {
      "left" : "static final String MAX_SPLIT_SIZE =\n      SHIMS.getHadoopConfNames().get(\"MAPREDMAXSPLITSIZE\");",
      "right" : "static final String MAX_SPLIT_SIZE =\n      SHIMS.getHadoopConfNames().get(\"MAPREDMAXSPLITSIZE\");",
      "info" : "FieldDeclaration[4964-5060]:FieldDeclaration[4964-5060]"
    }, {
      "left" : "private static final long DEFAULT_MIN_SPLIT_SIZE = 16 * 1024 * 1024;",
      "right" : "private static final long DEFAULT_MIN_SPLIT_SIZE = 16 * 1024 * 1024;",
      "info" : "FieldDeclaration[5064-5132]:FieldDeclaration[5064-5132]"
    }, {
      "left" : "private static final long DEFAULT_MAX_SPLIT_SIZE = 256 * 1024 * 1024;",
      "right" : "private static final long DEFAULT_MAX_SPLIT_SIZE = 256 * 1024 * 1024;",
      "info" : "FieldDeclaration[5135-5204]:FieldDeclaration[5135-5204]"
    }, {
      "left" : "private static final PerfLogger perfLogger = PerfLogger.getPerfLogger();",
      "right" : "private static final PerfLogger perfLogger = PerfLogger.getPerfLogger();",
      "info" : "FieldDeclaration[5208-5280]:FieldDeclaration[5208-5280]"
    }, {
      "left" : "private static final String CLASS_NAME = ReaderImpl.class.getName();",
      "right" : "private static final String CLASS_NAME = ReaderImpl.class.getName();",
      "info" : "FieldDeclaration[5283-5351]:FieldDeclaration[5283-5351]"
    }, {
      "left" : "private static final double MIN_INCLUDED_LOCATION = 0.80;",
      "right" : "private static final double MIN_INCLUDED_LOCATION = 0.80;",
      "info" : "FieldDeclaration[5355-5810]:FieldDeclaration[5355-5810]"
    }, {
      "left" : "public boolean shouldSkipCombine(Path path,\n                                   Configuration conf) throws IOException",
      "right" : "public boolean shouldSkipCombine(Path path,\n                                   Configuration conf) throws IOException",
      "info" : "MethodDeclaration[5814-6037]:MethodDeclaration[5814-6037]"
    }, {
      "left" : "OrcRecordReader",
      "right" : "OrcRecordReader",
      "info" : "TypeDeclaration[6041-7823]:TypeDeclaration[6041-7823]"
    }, {
      "left" : "private final RecordReader reader;",
      "right" : "private final RecordReader reader;",
      "info" : "FieldDeclaration[6198-6232]:FieldDeclaration[6198-6232]"
    }, {
      "left" : "private final long offset;",
      "right" : "private final long offset;",
      "info" : "FieldDeclaration[6237-6263]:FieldDeclaration[6237-6263]"
    }, {
      "left" : "private final long length;",
      "right" : "private final long length;",
      "info" : "FieldDeclaration[6268-6294]:FieldDeclaration[6268-6294]"
    }, {
      "left" : "private final int numColumns;",
      "right" : "private final int numColumns;",
      "info" : "FieldDeclaration[6299-6328]:FieldDeclaration[6299-6328]"
    }, {
      "left" : "private float progress = 0.0f;",
      "right" : "private float progress = 0.0f;",
      "info" : "FieldDeclaration[6333-6363]:FieldDeclaration[6333-6363]"
    }, {
      "left" : "private final Reader file;",
      "right" : "private final Reader file;",
      "info" : "FieldDeclaration[6368-6394]:FieldDeclaration[6368-6394]"
    }, {
      "left" : "private final SerDeStats stats;",
      "right" : "private final SerDeStats stats;",
      "info" : "FieldDeclaration[6399-6430]:FieldDeclaration[6399-6430]"
    }, {
      "left" : "OrcRecordReader(Reader file, Configuration conf,\n                    FileSplit split) throws IOException",
      "right" : "OrcRecordReader(Reader file, Configuration conf,\n                    FileSplit split) throws IOException",
      "info" : "MethodDeclaration[6437-6886]:MethodDeclaration[6437-6886]"
    }, {
      "left" : "public boolean next(NullWritable key, OrcStruct value) throws IOException",
      "right" : "public boolean next(NullWritable key, OrcStruct value) throws IOException",
      "info" : "MethodDeclaration[6892-7152]:MethodDeclaration[6892-7152]"
    }, {
      "left" : "public NullWritable createKey()",
      "right" : "public NullWritable createKey()",
      "info" : "MethodDeclaration[7158-7244]:MethodDeclaration[7158-7244]"
    }, {
      "left" : "public OrcStruct createValue()",
      "right" : "public OrcStruct createValue()",
      "info" : "MethodDeclaration[7250-7342]:MethodDeclaration[7250-7342]"
    }, {
      "left" : "public long getPos() throws IOException",
      "right" : "public long getPos() throws IOException",
      "info" : "MethodDeclaration[7348-7459]:MethodDeclaration[7348-7459]"
    }, {
      "left" : "public void close() throws IOException",
      "right" : "public void close() throws IOException",
      "info" : "MethodDeclaration[7465-7547]:MethodDeclaration[7465-7547]"
    }, {
      "left" : "public float getProgress() throws IOException",
      "right" : "public float getProgress() throws IOException",
      "info" : "MethodDeclaration[7553-7643]:MethodDeclaration[7553-7643]"
    }, {
      "left" : "public SerDeStats getStats()",
      "right" : "public SerDeStats getStats()",
      "info" : "MethodDeclaration[7649-7819]:MethodDeclaration[7649-7819]"
    }, {
      "left" : "private static int getRootColumn(boolean isOriginal)",
      "right" : "private static int getRootColumn(boolean isOriginal)",
      "info" : "MethodDeclaration[7827-8173]:MethodDeclaration[7827-8173]"
    }, {
      "left" : "public static RecordReader createReaderFromFile(Reader file,\n                                                  Configuration conf,\n                                                  long offset, long length\n                                                  ) throws IOException",
      "right" : "public static RecordReader createReaderFromFile(Reader file,\n                                                  Configuration conf,\n                                                  long offset, long length\n                                                  ) throws IOException",
      "info" : "MethodDeclaration[8177-8785]:MethodDeclaration[8177-8785]"
    }, {
      "left" : "public static boolean isOriginal(Reader file)",
      "right" : "public static boolean isOriginal(Reader file)",
      "info" : "MethodDeclaration[8789-8913]:MethodDeclaration[8789-8913]"
    }, {
      "left" : "private static void includeColumnRecursive(List<OrcProto.Type> types,\n                                             boolean[] result,\n                                             int typeId,\n                                             int rootColumn)",
      "right" : "private static void includeColumnRecursive(List<OrcProto.Type> types,\n                                             boolean[] result,\n                                             int typeId,\n                                             int rootColumn)",
      "info" : "MethodDeclaration[8917-9702]:MethodDeclaration[8917-9702]"
    }, {
      "left" : "public static boolean[] genIncludedColumns(\n      List<OrcProto.Type> types, List<Integer> included, boolean isOriginal)",
      "right" : "public static boolean[] genIncludedColumns(\n      List<OrcProto.Type> types, List<Integer> included, boolean isOriginal)",
      "info" : "MethodDeclaration[9706-10258]:MethodDeclaration[9706-10258]"
    }, {
      "left" : "public static boolean[] genIncludedColumns(\n      List<OrcProto.Type> types, Configuration conf, boolean isOriginal)",
      "right" : "public static boolean[] genIncludedColumns(\n      List<OrcProto.Type> types, Configuration conf, boolean isOriginal)",
      "info" : "MethodDeclaration[10261-10842]:MethodDeclaration[10261-10842]"
    }, {
      "left" : "public static String[] getSargColumnNames(String[] originalColumnNames,\n      List<OrcProto.Type> types, boolean[] includedColumns, boolean isOriginal)",
      "right" : "public static String[] getSargColumnNames(String[] originalColumnNames,\n      List<OrcProto.Type> types, boolean[] includedColumns, boolean isOriginal)",
      "info" : "MethodDeclaration[10846-11505]:MethodDeclaration[10846-11505]"
    }, {
      "left" : "static void setSearchArgument(Reader.Options options,\n                                List<OrcProto.Type> types,\n                                Configuration conf,\n                                boolean isOriginal)",
      "right" : "static void setSearchArgument(Reader.Options options,\n                                List<OrcProto.Type> types,\n                                Configuration conf,\n                                boolean isOriginal)",
      "info" : "MethodDeclaration[11509-12371]:MethodDeclaration[11509-12371]"
    }, {
      "left" : "public boolean validateInput(FileSystem fs, HiveConf conf,\n                               ArrayList<FileStatus> files\n                              ) throws IOException",
      "right" : "public boolean validateInput(FileSystem fs, HiveConf conf,\n                               ArrayList<FileStatus> files\n                              ) throws IOException",
      "info" : "MethodDeclaration[12375-12975]:MethodDeclaration[12375-12975]"
    }, {
      "left" : "static Path[] getInputPaths(Configuration conf) throws IOException",
      "right" : "static Path[] getInputPaths(Configuration conf) throws IOException",
      "info" : "MethodDeclaration[12979-13628]:MethodDeclaration[12979-13628]"
    }, {
      "left" : "private final Configuration conf;",
      "right" : "private final Configuration conf;",
      "info" : "FieldDeclaration[13784-13817]:FieldDeclaration[13784-13817]"
    }, {
      "left" : "private static Cache<Path, FileInfo> footerCache;",
      "right" : "private static Cache<Path, FileInfo> footerCache;",
      "info" : "FieldDeclaration[13822-13871]:FieldDeclaration[13822-13871]"
    }, {
      "left" : "private static ExecutorService threadPool = null;",
      "right" : "private static ExecutorService threadPool = null;",
      "info" : "FieldDeclaration[13876-13925]:FieldDeclaration[13876-13925]"
    }, {
      "left" : "private final int numBuckets;",
      "right" : "private final int numBuckets;",
      "info" : "FieldDeclaration[13930-13959]:FieldDeclaration[13930-13959]"
    }, {
      "left" : "private final long maxSize;",
      "right" : "private final long maxSize;",
      "info" : "FieldDeclaration[13964-13991]:FieldDeclaration[13964-13991]"
    }, {
      "left" : "private final long minSize;",
      "right" : "private final long minSize;",
      "info" : "FieldDeclaration[13996-14023]:FieldDeclaration[13996-14023]"
    }, {
      "left" : "private final boolean footerInSplits;",
      "right" : "private final boolean footerInSplits;",
      "info" : "FieldDeclaration[14028-14065]:FieldDeclaration[14061-14098]"
    }, {
      "left" : "private final boolean cacheStripeDetails;",
      "right" : "private final boolean cacheStripeDetails;",
      "info" : "FieldDeclaration[14070-14111]:FieldDeclaration[14103-14144]"
    }, {
      "left" : "private final AtomicInteger cacheHitCounter = new AtomicInteger(0);",
      "right" : "private final AtomicInteger cacheHitCounter = new AtomicInteger(0);",
      "info" : "FieldDeclaration[14116-14183]:FieldDeclaration[14149-14216]"
    }, {
      "left" : "private final AtomicInteger numFilesCounter = new AtomicInteger(0);",
      "right" : "private final AtomicInteger numFilesCounter = new AtomicInteger(0);",
      "info" : "FieldDeclaration[14188-14255]:FieldDeclaration[14221-14288]"
    }, {
      "left" : "private ValidTxnList transactionList;",
      "right" : "private ValidTxnList transactionList;",
      "info" : "FieldDeclaration[14260-14297]:FieldDeclaration[14293-14330]"
    }, {
      "left" : "private SplitStrategyKind splitStrategyKind;",
      "right" : "private SplitStrategyKind splitStrategyKind;",
      "info" : "FieldDeclaration[14302-14346]:FieldDeclaration[14335-14379]"
    }, {
      "left" : "SplitStrategy",
      "right" : "SplitStrategy",
      "info" : "TypeDeclaration[16219-16295]:TypeDeclaration[16404-16480]"
    }, {
      "left" : "List<T> getSplits() throws IOException;",
      "right" : "List<T> getSplits() throws IOException;",
      "info" : "MethodDeclaration[16252-16291]:MethodDeclaration[16437-16476]"
    }, {
      "left" : "SplitInfo",
      "right" : "SplitInfo",
      "info" : "TypeDeclaration[16299-17091]:TypeDeclaration[16484-17276]"
    }, {
      "left" : "private final Context context;",
      "right" : "private final Context context;",
      "info" : "FieldDeclaration[16360-16390]:FieldDeclaration[16545-16575]"
    }, {
      "left" : "private final FileSystem fs;",
      "right" : "private final FileSystem fs;",
      "info" : "FieldDeclaration[16395-16423]:FieldDeclaration[16580-16608]"
    }, {
      "left" : "private final FileStatus file;",
      "right" : "private final FileStatus file;",
      "info" : "FieldDeclaration[16428-16458]:FieldDeclaration[16613-16643]"
    }, {
      "left" : "private final FileInfo fileInfo;",
      "right" : "private final FileInfo fileInfo;",
      "info" : "FieldDeclaration[16463-16495]:FieldDeclaration[16648-16680]"
    }, {
      "left" : "private final boolean isOriginal;",
      "right" : "private final boolean isOriginal;",
      "info" : "FieldDeclaration[16500-16533]:FieldDeclaration[16685-16718]"
    }, {
      "left" : "private final List<Long> deltas;",
      "right" : "private final List<Long> deltas;",
      "info" : "FieldDeclaration[16538-16570]:FieldDeclaration[16723-16755]"
    }, {
      "left" : "private final boolean hasBase;",
      "right" : "private final boolean hasBase;",
      "info" : "FieldDeclaration[16575-16605]:FieldDeclaration[16760-16790]"
    }, {
      "left" : "SplitInfo(Context context, FileSystem fs,\n        FileStatus file, FileInfo fileInfo,\n        boolean isOriginal,\n        List<Long> deltas,\n        boolean hasBase, Path dir, boolean[] covered) throws IOException",
      "right" : "SplitInfo(Context context, FileSystem fs,\n        FileStatus file, FileInfo fileInfo,\n        boolean isOriginal,\n        List<Long> deltas,\n        boolean hasBase, Path dir, boolean[] covered) throws IOException",
      "info" : "MethodDeclaration[16611-17087]:MethodDeclaration[16796-17272]"
    }, {
      "left" : "ETLSplitStrategy",
      "right" : "ETLSplitStrategy",
      "info" : "TypeDeclaration[17095-19710]:TypeDeclaration[17280-19895]"
    }, {
      "left" : "Context context;",
      "right" : "Context context;",
      "info" : "FieldDeclaration[17331-17347]:FieldDeclaration[17516-17532]"
    }, {
      "left" : "FileSystem fs;",
      "right" : "FileSystem fs;",
      "info" : "FieldDeclaration[17352-17366]:FieldDeclaration[17537-17551]"
    }, {
      "left" : "List<FileStatus> files;",
      "right" : "List<FileStatus> files;",
      "info" : "FieldDeclaration[17371-17394]:FieldDeclaration[17556-17579]"
    }, {
      "left" : "boolean isOriginal;",
      "right" : "boolean isOriginal;",
      "info" : "FieldDeclaration[17399-17418]:FieldDeclaration[17584-17603]"
    }, {
      "left" : "List<Long> deltas;",
      "right" : "List<Long> deltas;",
      "info" : "FieldDeclaration[17423-17441]:FieldDeclaration[17608-17626]"
    }, {
      "left" : "Path dir;",
      "right" : "Path dir;",
      "info" : "FieldDeclaration[17446-17455]:FieldDeclaration[17631-17640]"
    }, {
      "left" : "boolean[] covered;",
      "right" : "boolean[] covered;",
      "info" : "FieldDeclaration[17460-17478]:FieldDeclaration[17645-17663]"
    }, {
      "left" : "public ETLSplitStrategy(Context context, FileSystem fs, Path dir, List<FileStatus> children,\n        boolean isOriginal, List<Long> deltas, boolean[] covered)",
      "right" : "public ETLSplitStrategy(Context context, FileSystem fs, Path dir, List<FileStatus> children,\n        boolean isOriginal, List<Long> deltas, boolean[] covered)",
      "info" : "MethodDeclaration[17484-17845]:MethodDeclaration[17669-18030]"
    }, {
      "left" : "private FileInfo verifyCachedFileInfo(FileStatus file)",
      "right" : "private FileInfo verifyCachedFileInfo(FileStatus file)",
      "info" : "MethodDeclaration[17851-19067]:MethodDeclaration[18036-19252]"
    }, {
      "left" : "public List<SplitInfo> getSplits() throws IOException",
      "right" : "public List<SplitInfo> getSplits() throws IOException",
      "info" : "MethodDeclaration[19073-19576]:MethodDeclaration[19258-19761]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[19582-19706]:MethodDeclaration[19767-19891]"
    }, {
      "left" : "BISplitStrategy",
      "right" : "BISplitStrategy",
      "info" : "TypeDeclaration[19714-21236]:TypeDeclaration[19899-21421]"
    }, {
      "left" : "List<FileStatus> fileStatuses;",
      "right" : "List<FileStatus> fileStatuses;",
      "info" : "FieldDeclaration[19972-20002]:FieldDeclaration[20157-20187]"
    }, {
      "left" : "boolean isOriginal;",
      "right" : "boolean isOriginal;",
      "info" : "FieldDeclaration[20007-20026]:FieldDeclaration[20192-20211]"
    }, {
      "left" : "List<Long> deltas;",
      "right" : "List<Long> deltas;",
      "info" : "FieldDeclaration[20031-20049]:FieldDeclaration[20216-20234]"
    }, {
      "left" : "FileSystem fs;",
      "right" : "FileSystem fs;",
      "info" : "FieldDeclaration[20054-20068]:FieldDeclaration[20239-20253]"
    }, {
      "left" : "Context context;",
      "right" : "Context context;",
      "info" : "FieldDeclaration[20073-20089]:FieldDeclaration[20258-20274]"
    }, {
      "left" : "Path dir;",
      "right" : "Path dir;",
      "info" : "FieldDeclaration[20094-20103]:FieldDeclaration[20279-20288]"
    }, {
      "left" : "public BISplitStrategy(Context context, FileSystem fs,\n        Path dir, List<FileStatus> fileStatuses, boolean isOriginal,\n        List<Long> deltas, boolean[] covered)",
      "right" : "public BISplitStrategy(Context context, FileSystem fs,\n        Path dir, List<FileStatus> fileStatuses, boolean isOriginal,\n        List<Long> deltas, boolean[] covered)",
      "info" : "MethodDeclaration[20109-20517]:MethodDeclaration[20294-20702]"
    }, {
      "left" : "public List<OrcSplit> getSplits() throws IOException",
      "right" : "public List<OrcSplit> getSplits() throws IOException",
      "info" : "MethodDeclaration[20523-21103]:MethodDeclaration[20708-21288]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[21109-21232]:MethodDeclaration[21294-21417]"
    }, {
      "left" : "ACIDSplitStrategy",
      "right" : "ACIDSplitStrategy",
      "info" : "TypeDeclaration[21240-22387]:TypeDeclaration[21425-22572]"
    }, {
      "left" : "Path dir;",
      "right" : "Path dir;",
      "info" : "FieldDeclaration[21422-21431]:FieldDeclaration[21607-21616]"
    }, {
      "left" : "List<Long> deltas;",
      "right" : "List<Long> deltas;",
      "info" : "FieldDeclaration[21436-21454]:FieldDeclaration[21621-21639]"
    }, {
      "left" : "boolean[] covered;",
      "right" : "boolean[] covered;",
      "info" : "FieldDeclaration[21459-21477]:FieldDeclaration[21644-21662]"
    }, {
      "left" : "int numBuckets;",
      "right" : "int numBuckets;",
      "info" : "FieldDeclaration[21482-21497]:FieldDeclaration[21667-21682]"
    }, {
      "left" : "public ACIDSplitStrategy(Path dir, int numBuckets, List<Long> deltas, boolean[] covered)",
      "right" : "public ACIDSplitStrategy(Path dir, int numBuckets, List<Long> deltas, boolean[] covered)",
      "info" : "MethodDeclaration[21503-21715]:MethodDeclaration[21688-21900]"
    }, {
      "left" : "public List<OrcSplit> getSplits() throws IOException",
      "right" : "public List<OrcSplit> getSplits() throws IOException",
      "info" : "MethodDeclaration[21721-22252]:MethodDeclaration[21906-22437]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[22258-22383]:MethodDeclaration[22443-22568]"
    }, {
      "left" : "private final Context context;",
      "right" : "private final Context context;",
      "info" : "FieldDeclaration[22647-22677]:FieldDeclaration[22832-22862]"
    }, {
      "left" : "private final FileSystem fs;",
      "right" : "private final FileSystem fs;",
      "info" : "FieldDeclaration[22682-22710]:FieldDeclaration[22867-22895]"
    }, {
      "left" : "private final Path dir;",
      "right" : "private final Path dir;",
      "info" : "FieldDeclaration[22715-22738]:FieldDeclaration[22900-22923]"
    }, {
      "left" : "FileGenerator(Context context, FileSystem fs, Path dir)",
      "right" : "FileGenerator(Context context, FileSystem fs, Path dir)",
      "info" : "MethodDeclaration[22744-22879]:MethodDeclaration[22929-23064]"
    }, {
      "left" : "SplitGenerator",
      "right" : "SplitGenerator",
      "info" : "TypeDeclaration[25410-36962]:TypeDeclaration[25628-37180]"
    }, {
      "left" : "private final Context context;",
      "right" : "private final Context context;",
      "info" : "FieldDeclaration[25593-25623]:FieldDeclaration[25811-25841]"
    }, {
      "left" : "private final FileSystem fs;",
      "right" : "private final FileSystem fs;",
      "info" : "FieldDeclaration[25628-25656]:FieldDeclaration[25846-25874]"
    }, {
      "left" : "private final FileStatus file;",
      "right" : "private final FileStatus file;",
      "info" : "FieldDeclaration[25661-25691]:FieldDeclaration[25879-25909]"
    }, {
      "left" : "private final long blockSize;",
      "right" : "private final long blockSize;",
      "info" : "FieldDeclaration[25696-25725]:FieldDeclaration[25914-25943]"
    }, {
      "left" : "private final TreeMap<Long, BlockLocation> locations;",
      "right" : "private final TreeMap<Long, BlockLocation> locations;",
      "info" : "FieldDeclaration[25730-25783]:FieldDeclaration[25948-26001]"
    }, {
      "left" : "private final FileInfo fileInfo;",
      "right" : "private final FileInfo fileInfo;",
      "info" : "FieldDeclaration[25788-25820]:FieldDeclaration[26006-26038]"
    }, {
      "left" : "private List<StripeInformation> stripes;",
      "right" : "private List<StripeInformation> stripes;",
      "info" : "FieldDeclaration[25825-25865]:FieldDeclaration[26043-26083]"
    }, {
      "left" : "private ReaderImpl.FileMetaInfo fileMetaInfo;",
      "right" : "private ReaderImpl.FileMetaInfo fileMetaInfo;",
      "info" : "FieldDeclaration[25870-25915]:FieldDeclaration[26088-26133]"
    }, {
      "left" : "private Metadata metadata;",
      "right" : "private Metadata metadata;",
      "info" : "FieldDeclaration[25920-25946]:FieldDeclaration[26138-26164]"
    }, {
      "left" : "private List<OrcProto.Type> types;",
      "right" : "private List<OrcProto.Type> types;",
      "info" : "FieldDeclaration[25951-25985]:FieldDeclaration[26169-26203]"
    }, {
      "left" : "private final boolean isOriginal;",
      "right" : "private final boolean isOriginal;",
      "info" : "FieldDeclaration[25990-26023]:FieldDeclaration[26208-26241]"
    }, {
      "left" : "private final List<Long> deltas;",
      "right" : "private final List<Long> deltas;",
      "info" : "FieldDeclaration[26028-26060]:FieldDeclaration[26246-26278]"
    }, {
      "left" : "private final boolean hasBase;",
      "right" : "private final boolean hasBase;",
      "info" : "FieldDeclaration[26065-26095]:FieldDeclaration[26283-26313]"
    }, {
      "left" : "private OrcFile.WriterVersion writerVersion;",
      "right" : "private OrcFile.WriterVersion writerVersion;",
      "info" : "FieldDeclaration[26100-26144]:FieldDeclaration[26318-26362]"
    }, {
      "left" : "private long projColsUncompressedSize;",
      "right" : "private long projColsUncompressedSize;",
      "info" : "FieldDeclaration[26149-26187]:FieldDeclaration[26367-26405]"
    }, {
      "left" : "private List<OrcSplit> deltaSplits;",
      "right" : "private List<OrcSplit> deltaSplits;",
      "info" : "FieldDeclaration[26192-26227]:FieldDeclaration[26410-26445]"
    }, {
      "left" : "public SplitGenerator(SplitInfo splitInfo) throws IOException",
      "right" : "public SplitGenerator(SplitInfo splitInfo) throws IOException",
      "info" : "MethodDeclaration[26233-26764]:MethodDeclaration[26451-26982]"
    }, {
      "left" : "Path getPath()",
      "right" : "Path getPath()",
      "info" : "MethodDeclaration[26770-26821]:MethodDeclaration[26988-27039]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[26827-26922]:MethodDeclaration[27045-27140]"
    }, {
      "left" : "static long getOverlap(long offset1, long length1,\n                           long offset2, long length2)",
      "right" : "static long getOverlap(long offset1, long length1,\n                           long offset2, long length2)",
      "info" : "MethodDeclaration[26928-27568]:MethodDeclaration[27146-27786]"
    }, {
      "left" : "OrcSplit createSplit(long offset, long length,\n                     ReaderImpl.FileMetaInfo fileMetaInfo) throws IOException",
      "right" : "OrcSplit createSplit(long offset, long length,\n                     ReaderImpl.FileMetaInfo fileMetaInfo) throws IOException",
      "info" : "MethodDeclaration[27574-30592]:MethodDeclaration[27792-30810]"
    }, {
      "left" : "public List<OrcSplit> call() throws IOException",
      "right" : "public List<OrcSplit> call() throws IOException",
      "info" : "MethodDeclaration[30598-34354]:MethodDeclaration[30816-34572]"
    }, {
      "left" : "private void populateAndCacheStripeDetails() throws IOException",
      "right" : "private void populateAndCacheStripeDetails() throws IOException",
      "info" : "MethodDeclaration[34360-35931]:MethodDeclaration[34578-36149]"
    }, {
      "left" : "private boolean isStripeSatisfyPredicate(StripeStatistics stripeStatistics,\n                                             SearchArgument sarg,\n                                             int[] filterColumns)",
      "right" : "private boolean isStripeSatisfyPredicate(StripeStatistics stripeStatistics,\n                                             SearchArgument sarg,\n                                             int[] filterColumns)",
      "info" : "MethodDeclaration[35937-36958]:MethodDeclaration[36155-37176]"
    }, {
      "left" : "private static void cancelFutures(List<Future<?>> futures)",
      "right" : "private static void cancelFutures(List<Future<?>> futures)",
      "info" : "MethodDeclaration[38956-39089]:MethodDeclaration[39336-39469]"
    }, {
      "left" : "FileInfo",
      "right" : "FileInfo",
      "info" : "TypeDeclaration[39468-40355]:TypeDeclaration[39859-40746]"
    }, {
      "left" : "long modificationTime;",
      "right" : "long modificationTime;",
      "info" : "FieldDeclaration[39611-39633]:FieldDeclaration[40002-40024]"
    }, {
      "left" : "long size;",
      "right" : "long size;",
      "info" : "FieldDeclaration[39638-39648]:FieldDeclaration[40029-40039]"
    }, {
      "left" : "List<StripeInformation> stripeInfos;",
      "right" : "List<StripeInformation> stripeInfos;",
      "info" : "FieldDeclaration[39653-39689]:FieldDeclaration[40044-40080]"
    }, {
      "left" : "ReaderImpl.FileMetaInfo fileMetaInfo;",
      "right" : "ReaderImpl.FileMetaInfo fileMetaInfo;",
      "info" : "FieldDeclaration[39694-39731]:FieldDeclaration[40085-40122]"
    }, {
      "left" : "Metadata metadata;",
      "right" : "Metadata metadata;",
      "info" : "FieldDeclaration[39736-39754]:FieldDeclaration[40127-40145]"
    }, {
      "left" : "List<OrcProto.Type> types;",
      "right" : "List<OrcProto.Type> types;",
      "info" : "FieldDeclaration[39759-39785]:FieldDeclaration[40150-40176]"
    }, {
      "left" : "private OrcFile.WriterVersion writerVersion;",
      "right" : "private OrcFile.WriterVersion writerVersion;",
      "info" : "FieldDeclaration[39790-39834]:FieldDeclaration[40181-40225]"
    }, {
      "left" : "FileInfo(long modificationTime, long size,\n             List<StripeInformation> stripeInfos,\n             Metadata metadata, List<OrcProto.Type> types,\n             ReaderImpl.FileMetaInfo fileMetaInfo,\n             OrcFile.WriterVersion writerVersion)",
      "right" : "FileInfo(long modificationTime, long size,\n             List<StripeInformation> stripeInfos,\n             Metadata metadata, List<OrcProto.Type> types,\n             ReaderImpl.FileMetaInfo fileMetaInfo,\n             OrcFile.WriterVersion writerVersion)",
      "info" : "MethodDeclaration[39841-40351]:MethodDeclaration[40232-40742]"
    }, {
      "left" : "private org.apache.hadoop.mapred.RecordReader<NullWritable, OrcStruct>\n    createVectorizedReader(InputSplit split, JobConf conf, Reporter reporter\n                           ) throws IOException",
      "right" : "private org.apache.hadoop.mapred.RecordReader<NullWritable, OrcStruct>\n    createVectorizedReader(InputSplit split, JobConf conf, Reporter reporter\n                           ) throws IOException",
      "info" : "MethodDeclaration[40359-40721]:MethodDeclaration[40750-41112]"
    }, {
      "left" : "public org.apache.hadoop.mapred.RecordReader<NullWritable, OrcStruct>\n  getRecordReader(InputSplit inputSplit, JobConf conf,\n                  Reporter reporter) throws IOException",
      "right" : "public org.apache.hadoop.mapred.RecordReader<NullWritable, OrcStruct>\n  getRecordReader(InputSplit inputSplit, JobConf conf,\n                  Reporter reporter) throws IOException",
      "info" : "MethodDeclaration[40725-42338]:MethodDeclaration[41116-42729]"
    }, {
      "left" : "NullKeyRecordReader",
      "right" : "NullKeyRecordReader",
      "info" : "TypeDeclaration[42341-43549]:TypeDeclaration[42732-43940]"
    }, {
      "left" : "private final RecordIdentifier id;",
      "right" : "private final RecordIdentifier id;",
      "info" : "FieldDeclaration[42594-42628]:FieldDeclaration[42985-43019]"
    }, {
      "left" : "private final RowReader<OrcStruct> inner;",
      "right" : "private final RowReader<OrcStruct> inner;",
      "info" : "FieldDeclaration[42633-42674]:FieldDeclaration[43024-43065]"
    }, {
      "left" : "public RecordIdentifier getRecordIdentifier()",
      "right" : "public RecordIdentifier getRecordIdentifier()",
      "info" : "MethodDeclaration[42680-42750]:MethodDeclaration[43071-43141]"
    }, {
      "left" : "private NullKeyRecordReader(RowReader<OrcStruct> inner, Configuration conf)",
      "right" : "private NullKeyRecordReader(RowReader<OrcStruct> inner, Configuration conf)",
      "info" : "MethodDeclaration[42755-42894]:MethodDeclaration[43146-43285]"
    }, {
      "left" : "public boolean next(NullWritable nullWritable,\n                        OrcStruct orcStruct) throws IOException",
      "right" : "public boolean next(NullWritable nullWritable,\n                        OrcStruct orcStruct) throws IOException",
      "info" : "MethodDeclaration[42899-43071]:MethodDeclaration[43290-43462]"
    }, {
      "left" : "public NullWritable createKey()",
      "right" : "public NullWritable createKey()",
      "info" : "MethodDeclaration[43077-43163]:MethodDeclaration[43468-43554]"
    }, {
      "left" : "public OrcStruct createValue()",
      "right" : "public OrcStruct createValue()",
      "info" : "MethodDeclaration[43169-43255]:MethodDeclaration[43560-43646]"
    }, {
      "left" : "public long getPos() throws IOException",
      "right" : "public long getPos() throws IOException",
      "info" : "MethodDeclaration[43261-43351]:MethodDeclaration[43652-43742]"
    }, {
      "left" : "public void close() throws IOException",
      "right" : "public void close() throws IOException",
      "info" : "MethodDeclaration[43357-43438]:MethodDeclaration[43748-43829]"
    }, {
      "left" : "public float getProgress() throws IOException",
      "right" : "public float getProgress() throws IOException",
      "info" : "MethodDeclaration[43444-43545]:MethodDeclaration[43835-43936]"
    }, {
      "left" : "public RowReader<OrcStruct> getReader(InputSplit inputSplit,\n                                        Options options) throws IOException",
      "right" : "public RowReader<OrcStruct> getReader(InputSplit inputSplit,\n                                        Options options) throws IOException",
      "info" : "MethodDeclaration[43554-46650]:MethodDeclaration[43945-47041]"
    }, {
      "left" : "OrcStruct innerRecord = records.createValue();",
      "right" : "OrcStruct innerRecord = records.createValue();",
      "info" : "FieldDeclaration[45185-45231]:FieldDeclaration[45576-45622]"
    }, {
      "left" : "public ObjectInspector getObjectInspector()",
      "right" : "public ObjectInspector getObjectInspector()",
      "info" : "MethodDeclaration[45239-45481]:MethodDeclaration[45630-45872]"
    }, {
      "left" : "public boolean next(RecordIdentifier recordIdentifier,\n                          OrcStruct orcStruct) throws IOException",
      "right" : "public boolean next(RecordIdentifier recordIdentifier,\n                          OrcStruct orcStruct) throws IOException",
      "info" : "MethodDeclaration[45489-46098]:MethodDeclaration[45880-46489]"
    }, {
      "left" : "public RecordIdentifier createKey()",
      "right" : "public RecordIdentifier createKey()",
      "info" : "MethodDeclaration[46106-46203]:MethodDeclaration[46497-46594]"
    }, {
      "left" : "public OrcStruct createValue()",
      "right" : "public OrcStruct createValue()",
      "info" : "MethodDeclaration[46211-46319]:MethodDeclaration[46602-46710]"
    }, {
      "left" : "public long getPos() throws IOException",
      "right" : "public long getPos() throws IOException",
      "info" : "MethodDeclaration[46327-46425]:MethodDeclaration[46718-46816]"
    }, {
      "left" : "public void close() throws IOException",
      "right" : "public void close() throws IOException",
      "info" : "MethodDeclaration[46433-46522]:MethodDeclaration[46824-46913]"
    }, {
      "left" : "public float getProgress() throws IOException",
      "right" : "public float getProgress() throws IOException",
      "info" : "MethodDeclaration[46530-46639]:MethodDeclaration[46921-47030]"
    }, {
      "left" : "static Path findOriginalBucket(FileSystem fs,\n                                 Path directory,\n                                 int bucket) throws IOException",
      "right" : "static Path findOriginalBucket(FileSystem fs,\n                                 Path directory,\n                                 int bucket) throws IOException",
      "info" : "MethodDeclaration[46654-47250]:MethodDeclaration[47045-47641]"
    }, {
      "left" : "public RawReader<OrcStruct> getRawReader(Configuration conf,\n                                           boolean collapseEvents,\n                                           int bucket,\n                                           ValidTxnList validTxnList,\n                                           Path baseDirectory,\n                                           Path[] deltaDirectory\n                                           ) throws IOException",
      "right" : "public RawReader<OrcStruct> getRawReader(Configuration conf,\n                                           boolean collapseEvents,\n                                           int bucket,\n                                           ValidTxnList validTxnList,\n                                           Path baseDirectory,\n                                           Path[] deltaDirectory\n                                           ) throws IOException",
      "info" : "MethodDeclaration[47254-48363]:MethodDeclaration[47645-48754]"
    } ],
    "mappings" : [
 {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[5814-5823]:MarkerAnnotation[5814-5823]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5826-5832]:Modifier[5826-5832]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[5833-5840]:PrimitiveType[5833-5840]"
    }, {
      "left" : "shouldSkipCombine",
      "right" : "shouldSkipCombine",
      "info" : "SimpleName[5841-5858]:SimpleName[5841-5858]"
    }, {
      "left" : "Path path",
      "right" : "Path path",
      "info" : "SingleVariableDeclaration[5859-5868]:SingleVariableDeclaration[5859-5868]"
    }, {
      "left" : "Configuration conf",
      "right" : "Configuration conf",
      "info" : "SingleVariableDeclaration[5905-5923]:SingleVariableDeclaration[5905-5923]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[5932-5943]:SimpleType[5932-5943]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5944-6037]:Block[5944-6037]"
    }, {
      "left" : "return (conf.get(AcidUtils.CONF_ACID_KEY) != null) || AcidUtils.isAcid(path, conf);",
      "right" : "return (conf.get(AcidUtils.CONF_ACID_KEY) != null) || AcidUtils.isAcid(path, conf);",
      "info" : "ReturnStatement[5950-6033]:ReturnStatement[5950-6033]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[6041-6048]:Modifier[6041-6048]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[6049-6055]:Modifier[6049-6055]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[6056-6061]:TYPE_DECLARATION_KIND[6056-6061]"
    }, {
      "left" : "OrcRecordReader",
      "right" : "OrcRecordReader",
      "info" : "SimpleName[6062-6077]:SimpleName[6062-6077]"
    }, {
      "left" : "OrcRecordReader",
      "right" : "OrcRecordReader",
      "info" : "SimpleName[6437-6452]:SimpleName[6437-6452]"
    }, {
      "left" : "Reader file",
      "right" : "Reader file",
      "info" : "SingleVariableDeclaration[6453-6464]:SingleVariableDeclaration[6453-6464]"
    }, {
      "left" : "Configuration conf",
      "right" : "Configuration conf",
      "info" : "SingleVariableDeclaration[6466-6484]:SingleVariableDeclaration[6466-6484]"
    }, {
      "left" : "FileSplit split",
      "right" : "FileSplit split",
      "info" : "SingleVariableDeclaration[6506-6521]:SingleVariableDeclaration[6506-6521]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[6530-6541]:SimpleType[6530-6541]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6542-6886]:Block[6542-6886]"
    }, {
      "left" : "List<OrcProto.Type> types = file.getTypes();",
      "right" : "List<OrcProto.Type> types = file.getTypes();",
      "info" : "VariableDeclarationStatement[6550-6594]:VariableDeclarationStatement[6550-6594]"
    }, {
      "left" : "this.file = file;",
      "right" : "this.file = file;",
      "info" : "ExpressionStatement[6601-6618]:ExpressionStatement[6601-6618]"
    }, {
      "left" : "numColumns = (types.size() == 0) ? 0 : types.get(0).getSubtypesCount();",
      "right" : "numColumns = (types.size() == 0) ? 0 : types.get(0).getSubtypesCount();",
      "info" : "ExpressionStatement[6625-6696]:ExpressionStatement[6625-6696]"
    }, {
      "left" : "this.offset = split.getStart();",
      "right" : "this.offset = split.getStart();",
      "info" : "ExpressionStatement[6703-6734]:ExpressionStatement[6703-6734]"
    }, {
      "left" : "this.length = split.getLength();",
      "right" : "this.length = split.getLength();",
      "info" : "ExpressionStatement[6741-6773]:ExpressionStatement[6741-6773]"
    }, {
      "left" : "this.reader = createReaderFromFile(file, conf, offset, length);",
      "right" : "this.reader = createReaderFromFile(file, conf, offset, length);",
      "info" : "ExpressionStatement[6780-6843]:ExpressionStatement[6780-6843]"
    }, {
      "left" : "this.stats = new SerDeStats();",
      "right" : "this.stats = new SerDeStats();",
      "info" : "ExpressionStatement[6850-6880]:ExpressionStatement[6850-6880]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[6892-6901]:MarkerAnnotation[6892-6901]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6906-6912]:Modifier[6906-6912]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[6913-6920]:PrimitiveType[6913-6920]"
    }, {
      "left" : "next",
      "right" : "next",
      "info" : "SimpleName[6921-6925]:SimpleName[6921-6925]"
    }, {
      "left" : "NullWritable key",
      "right" : "NullWritable key",
      "info" : "SingleVariableDeclaration[6926-6942]:SingleVariableDeclaration[6926-6942]"
    }, {
      "left" : "OrcStruct value",
      "right" : "OrcStruct value",
      "info" : "SingleVariableDeclaration[6944-6959]:SingleVariableDeclaration[6944-6959]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[6968-6979]:SimpleType[6968-6979]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6980-7152]:Block[6980-7152]"
    }, {
      "left" : "if (reader.hasNext())",
      "right" : "if (reader.hasNext())",
      "info" : "IfStatement[6988-7146]:IfStatement[6988-7146]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7010-7109]:Block[7010-7109]"
    }, {
      "left" : "reader.next(value);",
      "right" : "reader.next(value);",
      "info" : "ExpressionStatement[7020-7039]:ExpressionStatement[7020-7039]"
    }, {
      "left" : "progress = reader.getProgress();",
      "right" : "progress = reader.getProgress();",
      "info" : "ExpressionStatement[7048-7080]:ExpressionStatement[7048-7080]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[7089-7101]:ReturnStatement[7089-7101]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7115-7146]:Block[7115-7146]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[7125-7138]:ReturnStatement[7125-7138]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[7158-7167]:MarkerAnnotation[7158-7167]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7172-7178]:Modifier[7172-7178]"
    }, {
      "left" : "NullWritable",
      "right" : "NullWritable",
      "info" : "SimpleType[7179-7191]:SimpleType[7179-7191]"
    }, {
      "left" : "createKey",
      "right" : "createKey",
      "info" : "SimpleName[7192-7201]:SimpleName[7192-7201]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7204-7244]:Block[7204-7244]"
    }, {
      "left" : "return NullWritable.get();",
      "right" : "return NullWritable.get();",
      "info" : "ReturnStatement[7212-7238]:ReturnStatement[7212-7238]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[7250-7259]:MarkerAnnotation[7250-7259]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7264-7270]:Modifier[7264-7270]"
    }, {
      "left" : "OrcStruct",
      "right" : "OrcStruct",
      "info" : "SimpleType[7271-7280]:SimpleType[7271-7280]"
    }, {
      "left" : "createValue",
      "right" : "createValue",
      "info" : "SimpleName[7281-7292]:SimpleName[7281-7292]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7295-7342]:Block[7295-7342]"
    }, {
      "left" : "return new OrcStruct(numColumns);",
      "right" : "return new OrcStruct(numColumns);",
      "info" : "ReturnStatement[7303-7336]:ReturnStatement[7303-7336]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[7348-7357]:MarkerAnnotation[7348-7357]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7362-7368]:Modifier[7362-7368]"
    }, {
      "left" : "long",
      "right" : "long",
      "info" : "PrimitiveType[7369-7373]:PrimitiveType[7369-7373]"
    }, {
      "left" : "getPos",
      "right" : "getPos",
      "info" : "SimpleName[7374-7380]:SimpleName[7374-7380]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[7390-7401]:SimpleType[7390-7401]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7402-7459]:Block[7402-7459]"
    }, {
      "left" : "return offset + (long) (progress * length);",
      "right" : "return offset + (long) (progress * length);",
      "info" : "ReturnStatement[7410-7453]:ReturnStatement[7410-7453]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[7465-7474]:MarkerAnnotation[7465-7474]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7479-7485]:Modifier[7479-7485]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7486-7490]:PrimitiveType[7486-7490]"
    }, {
      "left" : "close",
      "right" : "close",
      "info" : "SimpleName[7491-7496]:SimpleName[7491-7496]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[7506-7517]:SimpleType[7506-7517]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7518-7547]:Block[7518-7547]"
    }, {
      "left" : "reader.close();",
      "right" : "reader.close();",
      "info" : "ExpressionStatement[7526-7541]:ExpressionStatement[7526-7541]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[7553-7562]:MarkerAnnotation[7553-7562]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7567-7573]:Modifier[7567-7573]"
    }, {
      "left" : "float",
      "right" : "float",
      "info" : "PrimitiveType[7574-7579]:PrimitiveType[7574-7579]"
    }, {
      "left" : "getProgress",
      "right" : "getProgress",
      "info" : "SimpleName[7580-7591]:SimpleName[7580-7591]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[7601-7612]:SimpleType[7601-7612]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7613-7643]:Block[7613-7643]"
    }, {
      "left" : "return progress;",
      "right" : "return progress;",
      "info" : "ReturnStatement[7621-7637]:ReturnStatement[7621-7637]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[7649-7658]:MarkerAnnotation[7649-7658]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7663-7669]:Modifier[7663-7669]"
    }, {
      "left" : "SerDeStats",
      "right" : "SerDeStats",
      "info" : "SimpleType[7670-7680]:SimpleType[7670-7680]"
    }, {
      "left" : "getStats",
      "right" : "getStats",
      "info" : "SimpleName[7681-7689]:SimpleName[7681-7689]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7692-7819]:Block[7692-7819]"
    }, {
      "left" : "stats.setRawDataSize(file.getRawDataSize());",
      "right" : "stats.setRawDataSize(file.getRawDataSize());",
      "info" : "ExpressionStatement[7700-7744]:ExpressionStatement[7700-7744]"
    }, {
      "left" : "stats.setRowCount(file.getNumberOfRows());",
      "right" : "stats.setRowCount(file.getNumberOfRows());",
      "info" : "ExpressionStatement[7751-7793]:ExpressionStatement[7751-7793]"
    }, {
      "left" : "return stats;",
      "right" : "return stats;",
      "info" : "ReturnStatement[7800-7813]:ReturnStatement[7800-7813]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[8059-8066]:Modifier[8059-8066]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[8067-8073]:Modifier[8067-8073]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[8074-8077]:PrimitiveType[8074-8077]"
    }, {
      "left" : "getRootColumn",
      "right" : "getRootColumn",
      "info" : "SimpleName[8078-8091]:SimpleName[8078-8091]"
    }, {
      "left" : "boolean isOriginal",
      "right" : "boolean isOriginal",
      "info" : "SingleVariableDeclaration[8092-8110]:SingleVariableDeclaration[8092-8110]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8112-8173]:Block[8112-8173]"
    }, {
      "left" : "return isOriginal ? 0 : (OrcRecordUpdater.ROW + 1);",
      "right" : "return isOriginal ? 0 : (OrcRecordUpdater.ROW + 1);",
      "info" : "ReturnStatement[8118-8169]:ReturnStatement[8118-8169]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8177-8183]:Modifier[8177-8183]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[8184-8190]:Modifier[8184-8190]"
    }, {
      "left" : "RecordReader",
      "right" : "RecordReader",
      "info" : "SimpleType[8191-8203]:SimpleType[8191-8203]"
    }, {
      "left" : "createReaderFromFile",
      "right" : "createReaderFromFile",
      "info" : "SimpleName[8204-8224]:SimpleName[8204-8224]"
    }, {
      "left" : "Reader file",
      "right" : "Reader file",
      "info" : "SingleVariableDeclaration[8225-8236]:SingleVariableDeclaration[8225-8236]"
    }, {
      "left" : "Configuration conf",
      "right" : "Configuration conf",
      "info" : "SingleVariableDeclaration[8288-8306]:SingleVariableDeclaration[8288-8306]"
    }, {
      "left" : "long offset",
      "right" : "long offset",
      "info" : "SingleVariableDeclaration[8358-8369]:SingleVariableDeclaration[8358-8369]"
    }, {
      "left" : "long length",
      "right" : "long length",
      "info" : "SingleVariableDeclaration[8371-8382]:SingleVariableDeclaration[8371-8382]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[8442-8453]:SimpleType[8442-8453]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8454-8785]:Block[8454-8785]"
    }, {
      "left" : "Reader.Options options = new Reader.Options().range(offset, length);",
      "right" : "Reader.Options options = new Reader.Options().range(offset, length);",
      "info" : "VariableDeclarationStatement[8460-8528]:VariableDeclarationStatement[8460-8528]"
    }, {
      "left" : "boolean isOriginal = isOriginal(file);",
      "right" : "boolean isOriginal = isOriginal(file);",
      "info" : "VariableDeclarationStatement[8533-8571]:VariableDeclarationStatement[8533-8571]"
    }, {
      "left" : "List<OrcProto.Type> types = file.getTypes();",
      "right" : "List<OrcProto.Type> types = file.getTypes();",
      "info" : "VariableDeclarationStatement[8576-8620]:VariableDeclarationStatement[8576-8620]"
    }, {
      "left" : "options.include(genIncludedColumns(types, conf, isOriginal));",
      "right" : "options.include(genIncludedColumns(types, conf, isOriginal));",
      "info" : "ExpressionStatement[8625-8686]:ExpressionStatement[8625-8686]"
    }, {
      "left" : "setSearchArgument(options, types, conf, isOriginal);",
      "right" : "setSearchArgument(options, types, conf, isOriginal);",
      "info" : "ExpressionStatement[8691-8743]:ExpressionStatement[8691-8743]"
    }, {
      "left" : "return file.rowsOptions(options);",
      "right" : "return file.rowsOptions(options);",
      "info" : "ReturnStatement[8748-8781]:ReturnStatement[8748-8781]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8789-8795]:Modifier[8789-8795]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[8796-8802]:Modifier[8796-8802]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[8803-8810]:PrimitiveType[8803-8810]"
    }, {
      "left" : "isOriginal",
      "right" : "isOriginal",
      "info" : "SimpleName[8811-8821]:SimpleName[8811-8821]"
    }, {
      "left" : "Reader file",
      "right" : "Reader file",
      "info" : "SingleVariableDeclaration[8822-8833]:SingleVariableDeclaration[8822-8833]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8835-8913]:Block[8835-8913]"
    }, {
      "left" : "return !file.hasMetadataValue(OrcRecordUpdater.ACID_KEY_INDEX_NAME);",
      "right" : "return !file.hasMetadataValue(OrcRecordUpdater.ACID_KEY_INDEX_NAME);",
      "info" : "ReturnStatement[8841-8909]:ReturnStatement[8841-8909]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[9196-9203]:Modifier[9196-9203]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[9204-9210]:Modifier[9204-9210]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[9211-9215]:PrimitiveType[9211-9215]"
    }, {
      "left" : "includeColumnRecursive",
      "right" : "includeColumnRecursive",
      "info" : "SimpleName[9216-9238]:SimpleName[9216-9238]"
    }, {
      "left" : "List<OrcProto.Type> types",
      "right" : "List<OrcProto.Type> types",
      "info" : "SingleVariableDeclaration[9239-9264]:SingleVariableDeclaration[9239-9264]"
    }, {
      "left" : "boolean[] result",
      "right" : "boolean[] result",
      "info" : "SingleVariableDeclaration[9311-9327]:SingleVariableDeclaration[9311-9327]"
    }, {
      "left" : "int typeId",
      "right" : "int typeId",
      "info" : "SingleVariableDeclaration[9374-9384]:SingleVariableDeclaration[9374-9384]"
    }, {
      "left" : "int rootColumn",
      "right" : "int rootColumn",
      "info" : "SingleVariableDeclaration[9431-9445]:SingleVariableDeclaration[9431-9445]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9447-9702]:Block[9447-9702]"
    }, {
      "left" : "result[typeId - rootColumn] = true;",
      "right" : "result[typeId - rootColumn] = true;",
      "info" : "ExpressionStatement[9453-9488]:ExpressionStatement[9453-9488]"
    }, {
      "left" : "OrcProto.Type type = types.get(typeId);",
      "right" : "OrcProto.Type type = types.get(typeId);",
      "info" : "VariableDeclarationStatement[9493-9532]:VariableDeclarationStatement[9493-9532]"
    }, {
      "left" : "int children = type.getSubtypesCount();",
      "right" : "int children = type.getSubtypesCount();",
      "info" : "VariableDeclarationStatement[9537-9576]:VariableDeclarationStatement[9537-9576]"
    }, {
      "left" : "for(int i=0; i < children; ++i)",
      "right" : "for(int i=0; i < children; ++i)",
      "info" : "ForStatement[9581-9698]:ForStatement[9581-9698]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9613-9698]:Block[9613-9698]"
    }, {
      "left" : "includeColumnRecursive(types, result, type.getSubtypes(i), rootColumn);",
      "right" : "includeColumnRecursive(types, result, type.getSubtypes(i), rootColumn);",
      "info" : "ExpressionStatement[9621-9692]:ExpressionStatement[9621-9692]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9706-9712]:Modifier[9706-9712]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[9713-9719]:Modifier[9713-9719]"
    }, {
      "left" : "boolean[]",
      "right" : "boolean[]",
      "info" : "ArrayType[9720-9729]:ArrayType[9720-9729]"
    }, {
      "left" : "genIncludedColumns",
      "right" : "genIncludedColumns",
      "info" : "SimpleName[9730-9748]:SimpleName[9730-9748]"
    }, {
      "left" : "List<OrcProto.Type> types",
      "right" : "List<OrcProto.Type> types",
      "info" : "SingleVariableDeclaration[9756-9781]:SingleVariableDeclaration[9756-9781]"
    }, {
      "left" : "List<Integer> included",
      "right" : "List<Integer> included",
      "info" : "SingleVariableDeclaration[9783-9805]:SingleVariableDeclaration[9783-9805]"
    }, {
      "left" : "boolean isOriginal",
      "right" : "boolean isOriginal",
      "info" : "SingleVariableDeclaration[9807-9825]:SingleVariableDeclaration[9807-9825]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9827-10258]:Block[9827-10258]"
    }, {
      "left" : "int rootColumn = getRootColumn(isOriginal);",
      "right" : "int rootColumn = getRootColumn(isOriginal);",
      "info" : "VariableDeclarationStatement[9833-9876]:VariableDeclarationStatement[9833-9876]"
    }, {
      "left" : "int numColumns = types.size() - rootColumn;",
      "right" : "int numColumns = types.size() - rootColumn;",
      "info" : "VariableDeclarationStatement[9881-9924]:VariableDeclarationStatement[9881-9924]"
    }, {
      "left" : "boolean[] result = new boolean[numColumns];",
      "right" : "boolean[] result = new boolean[numColumns];",
      "info" : "VariableDeclarationStatement[9929-9972]:VariableDeclarationStatement[9929-9972]"
    }, {
      "left" : "result[0] = true;",
      "right" : "result[0] = true;",
      "info" : "ExpressionStatement[9977-9994]:ExpressionStatement[9977-9994]"
    }, {
      "left" : "OrcProto.Type root = types.get(rootColumn);",
      "right" : "OrcProto.Type root = types.get(rootColumn);",
      "info" : "VariableDeclarationStatement[9999-10042]:VariableDeclarationStatement[9999-10042]"
    }, {
      "left" : "for(int i=0; i < root.getSubtypesCount(); ++i)",
      "right" : "for(int i=0; i < root.getSubtypesCount(); ++i)",
      "info" : "ForStatement[10047-10235]:ForStatement[10047-10235]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10094-10235]:Block[10094-10235]"
    }, {
      "left" : "if (included.contains(i))",
      "right" : "if (included.contains(i))",
      "info" : "IfStatement[10102-10229]:IfStatement[10102-10229]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10128-10229]:Block[10128-10229]"
    }, {
      "left" : "includeColumnRecursive(types, result, root.getSubtypes(i),\n            rootColumn);",
      "right" : "includeColumnRecursive(types, result, root.getSubtypes(i),\n            rootColumn);",
      "info" : "ExpressionStatement[10138-10221]:ExpressionStatement[10138-10221]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[10240-10254]:ReturnStatement[10240-10254]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10485-10491]:Modifier[10485-10491]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[10492-10498]:Modifier[10492-10498]"
    }, {
      "left" : "boolean[]",
      "right" : "boolean[]",
      "info" : "ArrayType[10499-10508]:ArrayType[10499-10508]"
    }, {
      "left" : "genIncludedColumns",
      "right" : "genIncludedColumns",
      "info" : "SimpleName[10509-10527]:SimpleName[10509-10527]"
    }, {
      "left" : "List<OrcProto.Type> types",
      "right" : "List<OrcProto.Type> types",
      "info" : "SingleVariableDeclaration[10535-10560]:SingleVariableDeclaration[10535-10560]"
    }, {
      "left" : "Configuration conf",
      "right" : "Configuration conf",
      "info" : "SingleVariableDeclaration[10562-10580]:SingleVariableDeclaration[10562-10580]"
    }, {
      "left" : "boolean isOriginal",
      "right" : "boolean isOriginal",
      "info" : "SingleVariableDeclaration[10582-10600]:SingleVariableDeclaration[10582-10600]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10602-10842]:Block[10602-10842]"
    }, {
      "left" : "if (!ColumnProjectionUtils.isReadAllColumns(conf))",
      "right" : "if (!ColumnProjectionUtils.isReadAllColumns(conf))",
      "info" : "IfStatement[10609-10838]:IfStatement[10609-10838]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10660-10806]:Block[10660-10806]"
    }, {
      "left" : "List<Integer> included = ColumnProjectionUtils.getReadColumnIDs(conf);",
      "right" : "List<Integer> included = ColumnProjectionUtils.getReadColumnIDs(conf);",
      "info" : "VariableDeclarationStatement[10668-10738]:VariableDeclarationStatement[10668-10738]"
    }, {
      "left" : "return genIncludedColumns(types, included, isOriginal);",
      "right" : "return genIncludedColumns(types, included, isOriginal);",
      "info" : "ReturnStatement[10745-10800]:ReturnStatement[10745-10800]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10812-10838]:Block[10812-10838]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[10820-10832]:ReturnStatement[10820-10832]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10846-10852]:Modifier[10846-10852]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[10853-10859]:Modifier[10853-10859]"
    }, {
      "left" : "String[]",
      "right" : "String[]",
      "info" : "ArrayType[10860-10868]:ArrayType[10860-10868]"
    }, {
      "left" : "getSargColumnNames",
      "right" : "getSargColumnNames",
      "info" : "SimpleName[10869-10887]:SimpleName[10869-10887]"
    }, {
      "left" : "String[] originalColumnNames",
      "right" : "String[] originalColumnNames",
      "info" : "SingleVariableDeclaration[10888-10916]:SingleVariableDeclaration[10888-10916]"
    }, {
      "left" : "List<OrcProto.Type> types",
      "right" : "List<OrcProto.Type> types",
      "info" : "SingleVariableDeclaration[10924-10949]:SingleVariableDeclaration[10924-10949]"
    }, {
      "left" : "boolean[] includedColumns",
      "right" : "boolean[] includedColumns",
      "info" : "SingleVariableDeclaration[10951-10976]:SingleVariableDeclaration[10951-10976]"
    }, {
      "left" : "boolean isOriginal",
      "right" : "boolean isOriginal",
      "info" : "SingleVariableDeclaration[10978-10996]:SingleVariableDeclaration[10978-10996]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10998-11505]:Block[10998-11505]"
    }, {
      "left" : "int rootColumn = getRootColumn(isOriginal);",
      "right" : "int rootColumn = getRootColumn(isOriginal);",
      "info" : "VariableDeclarationStatement[11004-11047]:VariableDeclarationStatement[11004-11047]"
    }, {
      "left" : "String[] columnNames = new String[types.size() - rootColumn];",
      "right" : "String[] columnNames = new String[types.size() - rootColumn];",
      "info" : "VariableDeclarationStatement[11052-11113]:VariableDeclarationStatement[11052-11113]"
    }, {
      "left" : "int i = 0;",
      "right" : "int i = 0;",
      "info" : "VariableDeclarationStatement[11118-11128]:VariableDeclarationStatement[11118-11128]"
    }, {
      "left" : "for(int columnId: types.get(rootColumn).getSubtypesList())",
      "right" : "for(int columnId: types.get(rootColumn).getSubtypesList())",
      "info" : "EnhancedForStatement[11133-11477]:EnhancedForStatement[11133-11477]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11192-11477]:Block[11192-11477]"
    }, {
      "left" : "if (includedColumns == null || includedColumns[columnId - rootColumn])",
      "right" : "if (includedColumns == null || includedColumns[columnId - rootColumn])",
      "info" : "IfStatement[11200-11471]:IfStatement[11200-11471]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11271-11471]:Block[11271-11471]"
    }, {
      "left" : "columnNames[columnId - rootColumn] = originalColumnNames[i++];",
      "right" : "columnNames[columnId - rootColumn] = originalColumnNames[i++];",
      "info" : "ExpressionStatement[11401-11463]:ExpressionStatement[11401-11463]"
    }, {
      "left" : "return columnNames;",
      "right" : "return columnNames;",
      "info" : "ReturnStatement[11482-11501]:ReturnStatement[11482-11501]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[11509-11515]:Modifier[11509-11515]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[11516-11520]:PrimitiveType[11516-11520]"
    }, {
      "left" : "setSearchArgument",
      "right" : "setSearchArgument",
      "info" : "SimpleName[11521-11538]:SimpleName[11521-11538]"
    }, {
      "left" : "Reader.Options options",
      "right" : "Reader.Options options",
      "info" : "SingleVariableDeclaration[11539-11561]:SingleVariableDeclaration[11539-11561]"
    }, {
      "left" : "List<OrcProto.Type> types",
      "right" : "List<OrcProto.Type> types",
      "info" : "SingleVariableDeclaration[11595-11620]:SingleVariableDeclaration[11595-11620]"
    }, {
      "left" : "Configuration conf",
      "right" : "Configuration conf",
      "info" : "SingleVariableDeclaration[11654-11672]:SingleVariableDeclaration[11654-11672]"
    }, {
      "left" : "boolean isOriginal",
      "right" : "boolean isOriginal",
      "info" : "SingleVariableDeclaration[11706-11724]:SingleVariableDeclaration[11706-11724]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11726-12371]:Block[11726-12371]"
    }, {
      "left" : "String columnNamesString = conf.get(ColumnProjectionUtils.READ_COLUMN_NAMES_CONF_STR);",
      "right" : "String columnNamesString = conf.get(ColumnProjectionUtils.READ_COLUMN_NAMES_CONF_STR);",
      "info" : "VariableDeclarationStatement[11732-11818]:VariableDeclarationStatement[11732-11818]"
    }, {
      "left" : "if (columnNamesString == null)",
      "right" : "if (columnNamesString == null)",
      "info" : "IfStatement[11823-11981]:IfStatement[11823-11981]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11854-11981]:Block[11854-11981]"
    }, {
      "left" : "LOG.debug(\"No ORC pushdown predicate - no column names\");",
      "right" : "LOG.debug(\"No ORC pushdown predicate - no column names\");",
      "info" : "ExpressionStatement[11862-11919]:ExpressionStatement[11862-11919]"
    }, {
      "left" : "options.searchArgument(null, null);",
      "right" : "options.searchArgument(null, null);",
      "info" : "ExpressionStatement[11926-11961]:ExpressionStatement[11926-11961]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[11968-11975]:ReturnStatement[11968-11975]"
    }, {
      "left" : "SearchArgument sarg = SearchArgumentFactory.createFromConf(conf);",
      "right" : "SearchArgument sarg = SearchArgumentFactory.createFromConf(conf);",
      "info" : "VariableDeclarationStatement[11986-12051]:VariableDeclarationStatement[11986-12051]"
    }, {
      "left" : "if (sarg == null)",
      "right" : "if (sarg == null)",
      "info" : "IfStatement[12056-12183]:IfStatement[12056-12183]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12074-12183]:Block[12074-12183]"
    }, {
      "left" : "LOG.debug(\"No ORC pushdown predicate\");",
      "right" : "LOG.debug(\"No ORC pushdown predicate\");",
      "info" : "ExpressionStatement[12082-12121]:ExpressionStatement[12082-12121]"
    }, {
      "left" : "options.searchArgument(null, null);",
      "right" : "options.searchArgument(null, null);",
      "info" : "ExpressionStatement[12128-12163]:ExpressionStatement[12128-12163]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[12170-12177]:ReturnStatement[12170-12177]"
    }, {
      "left" : "LOG.info(\"ORC pushdown predicate: \" + sarg);",
      "right" : "LOG.info(\"ORC pushdown predicate: \" + sarg);",
      "info" : "ExpressionStatement[12189-12233]:ExpressionStatement[12189-12233]"
    }, {
      "left" : "options.searchArgument(sarg, getSargColumnNames(\n        columnNamesString.split(\",\"), types, options.getInclude(), isOriginal));",
      "right" : "options.searchArgument(sarg, getSargColumnNames(\n        columnNamesString.split(\",\"), types, options.getInclude(), isOriginal));",
      "info" : "ExpressionStatement[12238-12367]:ExpressionStatement[12238-12367]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[12375-12384]:MarkerAnnotation[12375-12384]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12387-12393]:Modifier[12387-12393]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[12394-12401]:PrimitiveType[12394-12401]"
    }, {
      "left" : "validateInput",
      "right" : "validateInput",
      "info" : "SimpleName[12402-12415]:SimpleName[12402-12415]"
    }, {
      "left" : "FileSystem fs",
      "right" : "FileSystem fs",
      "info" : "SingleVariableDeclaration[12416-12429]:SingleVariableDeclaration[12416-12429]"
    }, {
      "left" : "HiveConf conf",
      "right" : "HiveConf conf",
      "info" : "SingleVariableDeclaration[12431-12444]:SingleVariableDeclaration[12431-12444]"
    }, {
      "left" : "ArrayList<FileStatus> files",
      "right" : "ArrayList<FileStatus> files",
      "info" : "SingleVariableDeclaration[12477-12504]:SingleVariableDeclaration[12477-12504]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[12544-12555]:SimpleType[12544-12555]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12556-12975]:Block[12556-12975]"
    }, {
      "left" : "if (Utilities.isVectorMode(conf))",
      "right" : "if (Utilities.isVectorMode(conf))",
      "info" : "IfStatement[12563-12680]:IfStatement[12563-12680]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12597-12680]:Block[12597-12680]"
    }, {
      "left" : "return new VectorizedOrcInputFormat().validateInput(fs, conf, files);",
      "right" : "return new VectorizedOrcInputFormat().validateInput(fs, conf, files);",
      "info" : "ReturnStatement[12605-12674]:ReturnStatement[12605-12674]"
    }, {
      "left" : "if (files.size() <= 0)",
      "right" : "if (files.size() <= 0)",
      "info" : "IfStatement[12686-12736]:IfStatement[12686-12736]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12709-12736]:Block[12709-12736]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[12717-12730]:ReturnStatement[12717-12730]"
    }, {
      "left" : "for (FileStatus file : files)",
      "right" : "for (FileStatus file : files)",
      "info" : "EnhancedForStatement[12741-12954]:EnhancedForStatement[12741-12954]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12771-12954]:Block[12771-12954]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[12779-12948]:TryStatement[12779-12948]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12783-12894]:Block[12783-12894]"
    }, {
      "left" : "OrcFile.createReader(file.getPath(),\n            OrcFile.readerOptions(conf).filesystem(fs));",
      "right" : "OrcFile.createReader(file.getPath(),\n            OrcFile.readerOptions(conf).filesystem(fs));",
      "info" : "ExpressionStatement[12793-12886]:ExpressionStatement[12793-12886]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12917-12948]:Block[12917-12948]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[12927-12940]:ReturnStatement[12927-12940]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[12959-12971]:ReturnStatement[12959-12971]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[13176-13182]:Modifier[13176-13182]"
    }, {
      "left" : "Path[]",
      "right" : "Path[]",
      "info" : "ArrayType[13183-13189]:ArrayType[13183-13189]"
    }, {
      "left" : "getInputPaths",
      "right" : "getInputPaths",
      "info" : "SimpleName[13190-13203]:SimpleName[13190-13203]"
    }, {
      "left" : "Configuration conf",
      "right" : "Configuration conf",
      "info" : "SingleVariableDeclaration[13204-13222]:SingleVariableDeclaration[13204-13222]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[13231-13242]:SimpleType[13231-13242]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13243-13628]:Block[13243-13628]"
    }, {
      "left" : "String dirs = conf.get(\"mapred.input.dir\");",
      "right" : "String dirs = conf.get(\"mapred.input.dir\");",
      "info" : "VariableDeclarationStatement[13249-13292]:VariableDeclarationStatement[13249-13292]"
    }, {
      "left" : "if (dirs == null)",
      "right" : "if (dirs == null)",
      "info" : "IfStatement[13297-13401]:IfStatement[13297-13401]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13315-13401]:Block[13315-13401]"
    }, {
      "left" : "throw new IOException(\"Configuration mapred.input.dir is not defined.\");",
      "right" : "throw new IOException(\"Configuration mapred.input.dir is not defined.\");",
      "info" : "ThrowStatement[13323-13395]:ThrowStatement[13323-13395]"
    }, {
      "left" : "String [] list = StringUtils.split(dirs);",
      "right" : "String [] list = StringUtils.split(dirs);",
      "info" : "VariableDeclarationStatement[13406-13447]:VariableDeclarationStatement[13406-13447]"
    }, {
      "left" : "Path[] result = new Path[list.length];",
      "right" : "Path[] result = new Path[list.length];",
      "info" : "VariableDeclarationStatement[13452-13490]:VariableDeclarationStatement[13452-13490]"
    }, {
      "left" : "for (int i = 0; i < list.length; i++)",
      "right" : "for (int i = 0; i < list.length; i++)",
      "info" : "ForStatement[13495-13605]:ForStatement[13495-13605]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13533-13605]:Block[13533-13605]"
    }, {
      "left" : "result[i] = new Path(StringUtils.unEscapeString(list[i]));",
      "right" : "result[i] = new Path(StringUtils.unEscapeString(list[i]));",
      "info" : "ExpressionStatement[13541-13599]:ExpressionStatement[13541-13599]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[13610-13624]:ReturnStatement[13610-13624]"
    }, {
      "left" : "interface",
      "right" : "interface",
      "info" : "TYPE_DECLARATION_KIND[16219-16228]:TYPE_DECLARATION_KIND[16404-16413]"
    }, {
      "left" : "SplitStrategy",
      "right" : "SplitStrategy",
      "info" : "SimpleName[16229-16242]:SimpleName[16414-16427]"
    }, {
      "left" : "List<T>",
      "right" : "List<T>",
      "info" : "ParameterizedType[16252-16259]:ParameterizedType[16437-16444]"
    }, {
      "left" : "getSplits",
      "right" : "getSplits",
      "info" : "SimpleName[16260-16269]:SimpleName[16445-16454]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[16279-16290]:SimpleType[16464-16475]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[16299-16305]:Modifier[16484-16490]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[16306-16311]:Modifier[16491-16496]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[16312-16317]:TYPE_DECLARATION_KIND[16497-16502]"
    }, {
      "left" : "SplitInfo",
      "right" : "SplitInfo",
      "info" : "SimpleName[16318-16327]:SimpleName[16503-16512]"
    }, {
      "left" : "ACIDSplitStrategy",
      "right" : "ACIDSplitStrategy",
      "info" : "SimpleType[16336-16353]:SimpleType[16521-16538]"
    }, {
      "left" : "SplitInfo",
      "right" : "SplitInfo",
      "info" : "SimpleName[16611-16620]:SimpleName[16796-16805]"
    }, {
      "left" : "Context context",
      "right" : "Context context",
      "info" : "SingleVariableDeclaration[16621-16636]:SingleVariableDeclaration[16806-16821]"
    }, {
      "left" : "FileSystem fs",
      "right" : "FileSystem fs",
      "info" : "SingleVariableDeclaration[16638-16651]:SingleVariableDeclaration[16823-16836]"
    }, {
      "left" : "FileStatus file",
      "right" : "FileStatus file",
      "info" : "SingleVariableDeclaration[16661-16676]:SingleVariableDeclaration[16846-16861]"
    }, {
      "left" : "FileInfo fileInfo",
      "right" : "FileInfo fileInfo",
      "info" : "SingleVariableDeclaration[16678-16695]:SingleVariableDeclaration[16863-16880]"
    }, {
      "left" : "boolean isOriginal",
      "right" : "boolean isOriginal",
      "info" : "SingleVariableDeclaration[16705-16723]:SingleVariableDeclaration[16890-16908]"
    }, {
      "left" : "List<Long> deltas",
      "right" : "List<Long> deltas",
      "info" : "SingleVariableDeclaration[16733-16750]:SingleVariableDeclaration[16918-16935]"
    }, {
      "left" : "boolean hasBase",
      "right" : "boolean hasBase",
      "info" : "SingleVariableDeclaration[16760-16775]:SingleVariableDeclaration[16945-16960]"
    }, {
      "left" : "Path dir",
      "right" : "Path dir",
      "info" : "SingleVariableDeclaration[16777-16785]:SingleVariableDeclaration[16962-16970]"
    }, {
      "left" : "boolean[] covered",
      "right" : "boolean[] covered",
      "info" : "SingleVariableDeclaration[16787-16804]:SingleVariableDeclaration[16972-16989]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[16813-16824]:SimpleType[16998-17009]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16825-17087]:Block[17010-17272]"
    }, {
      "left" : "super(dir, context.numBuckets, deltas, covered);",
      "right" : "super(dir, context.numBuckets, deltas, covered);",
      "info" : "SuperConstructorInvocation[16833-16881]:SuperConstructorInvocation[17018-17066]"
    }, {
      "left" : "this.context = context;",
      "right" : "this.context = context;",
      "info" : "ExpressionStatement[16888-16911]:ExpressionStatement[17073-17096]"
    }, {
      "left" : "this.fs = fs;",
      "right" : "this.fs = fs;",
      "info" : "ExpressionStatement[16918-16931]:ExpressionStatement[17103-17116]"
    }, {
      "left" : "this.file = file;",
      "right" : "this.file = file;",
      "info" : "ExpressionStatement[16938-16955]:ExpressionStatement[17123-17140]"
    }, {
      "left" : "this.fileInfo = fileInfo;",
      "right" : "this.fileInfo = fileInfo;",
      "info" : "ExpressionStatement[16962-16987]:ExpressionStatement[17147-17172]"
    }, {
      "left" : "this.isOriginal = isOriginal;",
      "right" : "this.isOriginal = isOriginal;",
      "info" : "ExpressionStatement[16994-17023]:ExpressionStatement[17179-17208]"
    }, {
      "left" : "this.deltas = deltas;",
      "right" : "this.deltas = deltas;",
      "info" : "ExpressionStatement[17030-17051]:ExpressionStatement[17215-17236]"
    }, {
      "left" : "this.hasBase = hasBase;",
      "right" : "this.hasBase = hasBase;",
      "info" : "ExpressionStatement[17058-17081]:ExpressionStatement[17243-17266]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[17253-17259]:Modifier[17438-17444]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[17260-17265]:Modifier[17445-17450]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[17266-17271]:TYPE_DECLARATION_KIND[17451-17456]"
    }, {
      "left" : "ETLSplitStrategy",
      "right" : "ETLSplitStrategy",
      "info" : "SimpleName[17272-17288]:SimpleName[17457-17473]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[17484-17490]:Modifier[17669-17675]"
    }, {
      "left" : "ETLSplitStrategy",
      "right" : "ETLSplitStrategy",
      "info" : "SimpleName[17491-17507]:SimpleName[17676-17692]"
    }, {
      "left" : "Context context",
      "right" : "Context context",
      "info" : "SingleVariableDeclaration[17508-17523]:SingleVariableDeclaration[17693-17708]"
    }, {
      "left" : "FileSystem fs",
      "right" : "FileSystem fs",
      "info" : "SingleVariableDeclaration[17525-17538]:SingleVariableDeclaration[17710-17723]"
    }, {
      "left" : "Path dir",
      "right" : "Path dir",
      "info" : "SingleVariableDeclaration[17540-17548]:SingleVariableDeclaration[17725-17733]"
    }, {
      "left" : "List<FileStatus> children",
      "right" : "List<FileStatus> children",
      "info" : "SingleVariableDeclaration[17550-17575]:SingleVariableDeclaration[17735-17760]"
    }, {
      "left" : "boolean isOriginal",
      "right" : "boolean isOriginal",
      "info" : "SingleVariableDeclaration[17585-17603]:SingleVariableDeclaration[17770-17788]"
    }, {
      "left" : "List<Long> deltas",
      "right" : "List<Long> deltas",
      "info" : "SingleVariableDeclaration[17605-17622]:SingleVariableDeclaration[17790-17807]"
    }, {
      "left" : "boolean[] covered",
      "right" : "boolean[] covered",
      "info" : "SingleVariableDeclaration[17624-17641]:SingleVariableDeclaration[17809-17826]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17643-17845]:Block[17828-18030]"
    }, {
      "left" : "this.context = context;",
      "right" : "this.context = context;",
      "info" : "ExpressionStatement[17651-17674]:ExpressionStatement[17836-17859]"
    }, {
      "left" : "this.dir = dir;",
      "right" : "this.dir = dir;",
      "info" : "ExpressionStatement[17681-17696]:ExpressionStatement[17866-17881]"
    }, {
      "left" : "this.fs = fs;",
      "right" : "this.fs = fs;",
      "info" : "ExpressionStatement[17703-17716]:ExpressionStatement[17888-17901]"
    }, {
      "left" : "this.files = children;",
      "right" : "this.files = children;",
      "info" : "ExpressionStatement[17723-17745]:ExpressionStatement[17908-17930]"
    }, {
      "left" : "this.isOriginal = isOriginal;",
      "right" : "this.isOriginal = isOriginal;",
      "info" : "ExpressionStatement[17752-17781]:ExpressionStatement[17937-17966]"
    }, {
      "left" : "this.deltas = deltas;",
      "right" : "this.deltas = deltas;",
      "info" : "ExpressionStatement[17788-17809]:ExpressionStatement[17973-17994]"
    }, {
      "left" : "this.covered = covered;",
      "right" : "this.covered = covered;",
      "info" : "ExpressionStatement[17816-17839]:ExpressionStatement[18001-18024]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[17851-17858]:Modifier[18036-18043]"
    }, {
      "left" : "FileInfo",
      "right" : "FileInfo",
      "info" : "SimpleType[17859-17867]:SimpleType[18044-18052]"
    }, {
      "left" : "verifyCachedFileInfo",
      "right" : "verifyCachedFileInfo",
      "info" : "SimpleName[17868-17888]:SimpleName[18053-18073]"
    }, {
      "left" : "FileStatus file",
      "right" : "FileStatus file",
      "info" : "SingleVariableDeclaration[17889-17904]:SingleVariableDeclaration[18074-18089]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17906-19067]:Block[18091-19252]"
    }, {
      "left" : "context.numFilesCounter.incrementAndGet();",
      "right" : "context.numFilesCounter.incrementAndGet();",
      "info" : "ExpressionStatement[17914-17956]:ExpressionStatement[18099-18141]"
    }, {
      "left" : "FileInfo fileInfo = Context.footerCache.getIfPresent(file.getPath());",
      "right" : "FileInfo fileInfo = Context.footerCache.getIfPresent(file.getPath());",
      "info" : "VariableDeclarationStatement[17963-18032]:VariableDeclarationStatement[18148-18217]"
    }, {
      "left" : "if (fileInfo != null)",
      "right" : "if (fileInfo != null)",
      "info" : "IfStatement[18039-19042]:IfStatement[18224-19227]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18061-18913]:Block[18246-19098]"
    }, {
      "left" : "if (LOG.isDebugEnabled())",
      "right" : "if (LOG.isDebugEnabled())",
      "info" : "IfStatement[18071-18172]:IfStatement[18256-18357]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18097-18172]:Block[18282-18357]"
    }, {
      "left" : "LOG.debug(\"Info cached for path: \" + file.getPath());",
      "right" : "LOG.debug(\"Info cached for path: \" + file.getPath());",
      "info" : "ExpressionStatement[18109-18162]:ExpressionStatement[18294-18347]"
    }, {
      "left" : "if (fileInfo.modificationTime == file.getModificationTime() &&\n            fileInfo.size == file.getLen())",
      "right" : "if (fileInfo.modificationTime == file.getModificationTime() &&\n            fileInfo.size == file.getLen())",
      "info" : "IfStatement[18181-18905]:IfStatement[18366-19090]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18288-18413]:Block[18473-18598]"
    }, {
      "left" : "context.cacheHitCounter.incrementAndGet();",
      "right" : "context.cacheHitCounter.incrementAndGet();",
      "info" : "ExpressionStatement[18334-18376]:ExpressionStatement[18519-18561]"
    }, {
      "left" : "return fileInfo;",
      "right" : "return fileInfo;",
      "info" : "ReturnStatement[18387-18403]:ReturnStatement[18572-18588]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18419-18905]:Block[18604-19090]"
    }, {
      "left" : "Context.footerCache.invalidate(file.getPath());",
      "right" : "Context.footerCache.invalidate(file.getPath());",
      "info" : "ExpressionStatement[18455-18502]:ExpressionStatement[18640-18687]"
    }, {
      "left" : "if (LOG.isDebugEnabled())",
      "right" : "if (LOG.isDebugEnabled())",
      "info" : "IfStatement[18513-18895]:IfStatement[18698-19080]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18539-18895]:Block[18724-19080]"
    }, {
      "left" : "LOG.debug(\"Meta-Info for : \" + file.getPath() +\n                \" changed. CachedModificationTime: \"\n                + fileInfo.modificationTime + \", CurrentModificationTime: \"\n                + file.getModificationTime()\n                + \", CachedLength: \" + fileInfo.size + \", CurrentLength: \" +\n                file.getLen());",
      "right" : "LOG.debug(\"Meta-Info for : \" + file.getPath() +\n                \" changed. CachedModificationTime: \"\n                + fileInfo.modificationTime + \", CurrentModificationTime: \"\n                + file.getModificationTime()\n                + \", CachedLength: \" + fileInfo.size + \", CurrentLength: \" +\n                file.getLen());",
      "info" : "ExpressionStatement[18553-18883]:ExpressionStatement[18738-19068]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18919-19042]:Block[19104-19227]"
    }, {
      "left" : "if (LOG.isDebugEnabled())",
      "right" : "if (LOG.isDebugEnabled())",
      "info" : "IfStatement[18929-19034]:IfStatement[19114-19219]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18955-19034]:Block[19140-19219]"
    }, {
      "left" : "LOG.debug(\"Info not cached for path: \" + file.getPath());",
      "right" : "LOG.debug(\"Info not cached for path: \" + file.getPath());",
      "info" : "ExpressionStatement[18967-19024]:ExpressionStatement[19152-19209]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[19049-19061]:ReturnStatement[19234-19246]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[19073-19082]:MarkerAnnotation[19258-19267]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[19087-19093]:Modifier[19272-19278]"
    }, {
      "left" : "List<SplitInfo>",
      "right" : "List<SplitInfo>",
      "info" : "ParameterizedType[19094-19109]:ParameterizedType[19279-19294]"
    }, {
      "left" : "getSplits",
      "right" : "getSplits",
      "info" : "SimpleName[19110-19119]:SimpleName[19295-19304]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[19129-19140]:SimpleType[19314-19325]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19141-19576]:Block[19326-19761]"
    }, {
      "left" : "List<SplitInfo> result = Lists.newArrayList();",
      "right" : "List<SplitInfo> result = Lists.newArrayList();",
      "info" : "VariableDeclarationStatement[19149-19195]:VariableDeclarationStatement[19334-19380]"
    }, {
      "left" : "for (FileStatus file : files)",
      "right" : "for (FileStatus file : files)",
      "info" : "EnhancedForStatement[19202-19549]:EnhancedForStatement[19387-19734]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19232-19549]:Block[19417-19734]"
    }, {
      "left" : "FileInfo info = null;",
      "right" : "FileInfo info = null;",
      "info" : "VariableDeclarationStatement[19242-19263]:VariableDeclarationStatement[19427-19448]"
    }, {
      "left" : "if (context.cacheStripeDetails)",
      "right" : "if (context.cacheStripeDetails)",
      "info" : "IfStatement[19272-19360]:IfStatement[19457-19545]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19304-19360]:Block[19489-19545]"
    }, {
      "left" : "info = verifyCachedFileInfo(file);",
      "right" : "info = verifyCachedFileInfo(file);",
      "info" : "ExpressionStatement[19316-19350]:ExpressionStatement[19501-19535]"
    }, {
      "left" : "if (file.getLen() > 0)",
      "right" : "if (file.getLen() > 0)",
      "info" : "IfStatement[19405-19541]:IfStatement[19590-19726]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19428-19541]:Block[19613-19726]"
    }, {
      "left" : "result.add(new SplitInfo(context, fs, file, info, isOriginal, deltas, true, dir, covered));",
      "right" : "result.add(new SplitInfo(context, fs, file, info, isOriginal, deltas, true, dir, covered));",
      "info" : "ExpressionStatement[19440-19531]:ExpressionStatement[19625-19716]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[19556-19570]:ReturnStatement[19741-19755]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[19582-19591]:MarkerAnnotation[19767-19776]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[19596-19602]:Modifier[19781-19787]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[19603-19609]:SimpleType[19788-19794]"
    }, {
      "left" : "toString",
      "right" : "toString",
      "info" : "SimpleName[19610-19618]:SimpleName[19795-19803]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19621-19706]:Block[19806-19891]"
    }, {
      "left" : "return ETLSplitStrategy.class.getSimpleName() + \" strategy for \" + dir;",
      "right" : "return ETLSplitStrategy.class.getSimpleName() + \" strategy for \" + dir;",
      "info" : "ReturnStatement[19629-19700]:ReturnStatement[19814-19885]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[19905-19911]:Modifier[20090-20096]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[19912-19917]:Modifier[20097-20102]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[19918-19923]:TYPE_DECLARATION_KIND[20103-20108]"
    }, {
      "left" : "BISplitStrategy",
      "right" : "BISplitStrategy",
      "info" : "SimpleName[19924-19939]:SimpleName[20109-20124]"
    }, {
      "left" : "ACIDSplitStrategy",
      "right" : "ACIDSplitStrategy",
      "info" : "SimpleType[19948-19965]:SimpleType[20133-20150]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[20109-20115]:Modifier[20294-20300]"
    }, {
      "left" : "BISplitStrategy",
      "right" : "BISplitStrategy",
      "info" : "SimpleName[20116-20131]:SimpleName[20301-20316]"
    }, {
      "left" : "Context context",
      "right" : "Context context",
      "info" : "SingleVariableDeclaration[20132-20147]:SingleVariableDeclaration[20317-20332]"
    }, {
      "left" : "FileSystem fs",
      "right" : "FileSystem fs",
      "info" : "SingleVariableDeclaration[20149-20162]:SingleVariableDeclaration[20334-20347]"
    }, {
      "left" : "Path dir",
      "right" : "Path dir",
      "info" : "SingleVariableDeclaration[20172-20180]:SingleVariableDeclaration[20357-20365]"
    }, {
      "left" : "List<FileStatus> fileStatuses",
      "right" : "List<FileStatus> fileStatuses",
      "info" : "SingleVariableDeclaration[20182-20211]:SingleVariableDeclaration[20367-20396]"
    }, {
      "left" : "boolean isOriginal",
      "right" : "boolean isOriginal",
      "info" : "SingleVariableDeclaration[20213-20231]:SingleVariableDeclaration[20398-20416]"
    }, {
      "left" : "List<Long> deltas",
      "right" : "List<Long> deltas",
      "info" : "SingleVariableDeclaration[20241-20258]:SingleVariableDeclaration[20426-20443]"
    }, {
      "left" : "boolean[] covered",
      "right" : "boolean[] covered",
      "info" : "SingleVariableDeclaration[20260-20277]:SingleVariableDeclaration[20445-20462]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20279-20517]:Block[20464-20702]"
    }, {
      "left" : "super(dir, context.numBuckets, deltas, covered);",
      "right" : "super(dir, context.numBuckets, deltas, covered);",
      "info" : "SuperConstructorInvocation[20287-20335]:SuperConstructorInvocation[20472-20520]"
    }, {
      "left" : "this.context = context;",
      "right" : "this.context = context;",
      "info" : "ExpressionStatement[20342-20365]:ExpressionStatement[20527-20550]"
    }, {
      "left" : "this.fileStatuses = fileStatuses;",
      "right" : "this.fileStatuses = fileStatuses;",
      "info" : "ExpressionStatement[20372-20405]:ExpressionStatement[20557-20590]"
    }, {
      "left" : "this.isOriginal = isOriginal;",
      "right" : "this.isOriginal = isOriginal;",
      "info" : "ExpressionStatement[20412-20441]:ExpressionStatement[20597-20626]"
    }, {
      "left" : "this.deltas = deltas;",
      "right" : "this.deltas = deltas;",
      "info" : "ExpressionStatement[20448-20469]:ExpressionStatement[20633-20654]"
    }, {
      "left" : "this.fs = fs;",
      "right" : "this.fs = fs;",
      "info" : "ExpressionStatement[20476-20489]:ExpressionStatement[20661-20674]"
    }, {
      "left" : "this.dir = dir;",
      "right" : "this.dir = dir;",
      "info" : "ExpressionStatement[20496-20511]:ExpressionStatement[20681-20696]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[20523-20532]:MarkerAnnotation[20708-20717]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[20537-20543]:Modifier[20722-20728]"
    }, {
      "left" : "List<OrcSplit>",
      "right" : "List<OrcSplit>",
      "info" : "ParameterizedType[20544-20558]:ParameterizedType[20729-20743]"
    }, {
      "left" : "getSplits",
      "right" : "getSplits",
      "info" : "SimpleName[20559-20568]:SimpleName[20744-20753]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[20578-20589]:SimpleType[20763-20774]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20590-21103]:Block[20775-21288]"
    }, {
      "left" : "List<OrcSplit> splits = Lists.newArrayList();",
      "right" : "List<OrcSplit> splits = Lists.newArrayList();",
      "info" : "VariableDeclarationStatement[20598-20643]:VariableDeclarationStatement[20783-20828]"
    }, {
      "left" : "for (FileStatus fileStatus : fileStatuses)",
      "right" : "for (FileStatus fileStatus : fileStatuses)",
      "info" : "EnhancedForStatement[20650-20994]:EnhancedForStatement[20835-21179]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20693-20994]:Block[20878-21179]"
    }, {
      "left" : "String[] hosts = SHIMS.getLocationsWithOffset(fs, fileStatus).firstEntry().getValue()\n            .getHosts();",
      "right" : "String[] hosts = SHIMS.getLocationsWithOffset(fs, fileStatus).firstEntry().getValue()\n            .getHosts();",
      "info" : "VariableDeclarationStatement[20703-20813]:VariableDeclarationStatement[20888-20998]"
    }, {
      "left" : "OrcSplit orcSplit = new OrcSplit(fileStatus.getPath(), 0, fileStatus.getLen(), hosts,\n            null, isOriginal, true, deltas, -1);",
      "right" : "OrcSplit orcSplit = new OrcSplit(fileStatus.getPath(), 0, fileStatus.getLen(), hosts,\n            null, isOriginal, true, deltas, -1);",
      "info" : "VariableDeclarationStatement[20822-20956]:VariableDeclarationStatement[21007-21141]"
    }, {
      "left" : "splits.add(orcSplit);",
      "right" : "splits.add(orcSplit);",
      "info" : "ExpressionStatement[20965-20986]:ExpressionStatement[21150-21171]"
    }, {
      "left" : "splits.addAll(super.getSplits());",
      "right" : "splits.addAll(super.getSplits());",
      "info" : "ExpressionStatement[21043-21076]:ExpressionStatement[21228-21261]"
    }, {
      "left" : "return splits;",
      "right" : "return splits;",
      "info" : "ReturnStatement[21083-21097]:ReturnStatement[21268-21282]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[21109-21118]:MarkerAnnotation[21294-21303]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[21123-21129]:Modifier[21308-21314]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[21130-21136]:SimpleType[21315-21321]"
    }, {
      "left" : "toString",
      "right" : "toString",
      "info" : "SimpleName[21137-21145]:SimpleName[21322-21330]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21148-21232]:Block[21333-21417]"
    }, {
      "left" : "return BISplitStrategy.class.getSimpleName() + \" strategy for \" + dir;",
      "right" : "return BISplitStrategy.class.getSimpleName() + \" strategy for \" + dir;",
      "info" : "ReturnStatement[21156-21226]:ReturnStatement[21341-21411]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[21350-21356]:Modifier[21535-21541]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[21357-21362]:TYPE_DECLARATION_KIND[21542-21547]"
    }, {
      "left" : "ACIDSplitStrategy",
      "right" : "ACIDSplitStrategy",
      "info" : "SimpleName[21363-21380]:SimpleName[21548-21565]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[21503-21509]:Modifier[21688-21694]"
    }, {
      "left" : "ACIDSplitStrategy",
      "right" : "ACIDSplitStrategy",
      "info" : "SimpleName[21510-21527]:SimpleName[21695-21712]"
    }, {
      "left" : "Path dir",
      "right" : "Path dir",
      "info" : "SingleVariableDeclaration[21528-21536]:SingleVariableDeclaration[21713-21721]"
    }, {
      "left" : "int numBuckets",
      "right" : "int numBuckets",
      "info" : "SingleVariableDeclaration[21538-21552]:SingleVariableDeclaration[21723-21737]"
    }, {
      "left" : "List<Long> deltas",
      "right" : "List<Long> deltas",
      "info" : "SingleVariableDeclaration[21554-21571]:SingleVariableDeclaration[21739-21756]"
    }, {
      "left" : "boolean[] covered",
      "right" : "boolean[] covered",
      "info" : "SingleVariableDeclaration[21573-21590]:SingleVariableDeclaration[21758-21775]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21592-21715]:Block[21777-21900]"
    }, {
      "left" : "this.dir = dir;",
      "right" : "this.dir = dir;",
      "info" : "ExpressionStatement[21600-21615]:ExpressionStatement[21785-21800]"
    }, {
      "left" : "this.numBuckets = numBuckets;",
      "right" : "this.numBuckets = numBuckets;",
      "info" : "ExpressionStatement[21622-21651]:ExpressionStatement[21807-21836]"
    }, {
      "left" : "this.deltas = deltas;",
      "right" : "this.deltas = deltas;",
      "info" : "ExpressionStatement[21658-21679]:ExpressionStatement[21843-21864]"
    }, {
      "left" : "this.covered = covered;",
      "right" : "this.covered = covered;",
      "info" : "ExpressionStatement[21686-21709]:ExpressionStatement[21871-21894]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[21721-21730]:MarkerAnnotation[21906-21915]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[21735-21741]:Modifier[21920-21926]"
    }, {
      "left" : "List<OrcSplit>",
      "right" : "List<OrcSplit>",
      "info" : "ParameterizedType[21742-21756]:ParameterizedType[21927-21941]"
    }, {
      "left" : "getSplits",
      "right" : "getSplits",
      "info" : "SimpleName[21757-21766]:SimpleName[21942-21951]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[21776-21787]:SimpleType[21961-21972]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21788-22252]:Block[21973-22437]"
    }, {
      "left" : "List<OrcSplit> splits = Lists.newArrayList();",
      "right" : "List<OrcSplit> splits = Lists.newArrayList();",
      "info" : "VariableDeclarationStatement[21947-21992]:VariableDeclarationStatement[22132-22177]"
    }, {
      "left" : "if (!deltas.isEmpty())",
      "right" : "if (!deltas.isEmpty())",
      "info" : "IfStatement[21999-22225]:IfStatement[22184-22410]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22022-22225]:Block[22207-22410]"
    }, {
      "left" : "for (int b = 0; b < numBuckets; ++b)",
      "right" : "for (int b = 0; b < numBuckets; ++b)",
      "info" : "ForStatement[22032-22217]:ForStatement[22217-22402]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22069-22217]:Block[22254-22402]"
    }, {
      "left" : "if (!covered[b])",
      "right" : "if (!covered[b])",
      "info" : "IfStatement[22081-22207]:IfStatement[22266-22392]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22098-22207]:Block[22283-22392]"
    }, {
      "left" : "splits.add(new OrcSplit(dir, b, 0, new String[0], null, false, false, deltas, -1));",
      "right" : "splits.add(new OrcSplit(dir, b, 0, new String[0], null, false, false, deltas, -1));",
      "info" : "ExpressionStatement[22112-22195]:ExpressionStatement[22297-22380]"
    }, {
      "left" : "return splits;",
      "right" : "return splits;",
      "info" : "ReturnStatement[22232-22246]:ReturnStatement[22417-22431]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[22258-22267]:MarkerAnnotation[22443-22452]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[22272-22278]:Modifier[22457-22463]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[22279-22285]:SimpleType[22464-22470]"
    }, {
      "left" : "toString",
      "right" : "toString",
      "info" : "SimpleName[22286-22294]:SimpleName[22471-22479]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22297-22383]:Block[22482-22568]"
    }, {
      "left" : "return ACIDSplitStrategy.class.getSimpleName() + \" strategy for \" + dir;",
      "right" : "return ACIDSplitStrategy.class.getSimpleName() + \" strategy for \" + dir;",
      "info" : "ReturnStatement[22305-22377]:ReturnStatement[22490-22562]"
    }, {
      "left" : "FileGenerator",
      "right" : "FileGenerator",
      "info" : "SimpleName[22744-22757]:SimpleName[22929-22942]"
    }, {
      "left" : "Context context",
      "right" : "Context context",
      "info" : "SingleVariableDeclaration[22758-22773]:SingleVariableDeclaration[22943-22958]"
    }, {
      "left" : "FileSystem fs",
      "right" : "FileSystem fs",
      "info" : "SingleVariableDeclaration[22775-22788]:SingleVariableDeclaration[22960-22973]"
    }, {
      "left" : "Path dir",
      "right" : "Path dir",
      "info" : "SingleVariableDeclaration[22790-22798]:SingleVariableDeclaration[22975-22983]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22800-22879]:Block[22985-23064]"
    }, {
      "left" : "this.context = context;",
      "right" : "this.context = context;",
      "info" : "ExpressionStatement[22808-22831]:ExpressionStatement[22993-23016]"
    }, {
      "left" : "this.fs = fs;",
      "right" : "this.fs = fs;",
      "info" : "ExpressionStatement[22838-22851]:ExpressionStatement[23023-23036]"
    }, {
      "left" : "this.dir = dir;",
      "right" : "this.dir = dir;",
      "info" : "ExpressionStatement[22858-22873]:ExpressionStatement[23043-23058]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[25517-25523]:Modifier[25735-25741]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[25524-25529]:Modifier[25742-25747]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[25530-25535]:TYPE_DECLARATION_KIND[25748-25753]"
    }, {
      "left" : "SplitGenerator",
      "right" : "SplitGenerator",
      "info" : "SimpleName[25536-25550]:SimpleName[25754-25768]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[26233-26239]:Modifier[26451-26457]"
    }, {
      "left" : "SplitGenerator",
      "right" : "SplitGenerator",
      "info" : "SimpleName[26240-26254]:SimpleName[26458-26472]"
    }, {
      "left" : "SplitInfo splitInfo",
      "right" : "SplitInfo splitInfo",
      "info" : "SingleVariableDeclaration[26255-26274]:SingleVariableDeclaration[26473-26492]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[26283-26294]:SimpleType[26501-26512]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26295-26764]:Block[26513-26982]"
    }, {
      "left" : "this.context = splitInfo.context;",
      "right" : "this.context = splitInfo.context;",
      "info" : "ExpressionStatement[26303-26336]:ExpressionStatement[26521-26554]"
    }, {
      "left" : "this.fs = splitInfo.fs;",
      "right" : "this.fs = splitInfo.fs;",
      "info" : "ExpressionStatement[26343-26366]:ExpressionStatement[26561-26584]"
    }, {
      "left" : "this.file = splitInfo.file;",
      "right" : "this.file = splitInfo.file;",
      "info" : "ExpressionStatement[26373-26400]:ExpressionStatement[26591-26618]"
    }, {
      "left" : "this.blockSize = file.getBlockSize();",
      "right" : "this.blockSize = file.getBlockSize();",
      "info" : "ExpressionStatement[26407-26444]:ExpressionStatement[26625-26662]"
    }, {
      "left" : "this.fileInfo = splitInfo.fileInfo;",
      "right" : "this.fileInfo = splitInfo.fileInfo;",
      "info" : "ExpressionStatement[26451-26486]:ExpressionStatement[26669-26704]"
    }, {
      "left" : "locations = SHIMS.getLocationsWithOffset(fs, file);",
      "right" : "locations = SHIMS.getLocationsWithOffset(fs, file);",
      "info" : "ExpressionStatement[26493-26544]:ExpressionStatement[26711-26762]"
    }, {
      "left" : "this.isOriginal = splitInfo.isOriginal;",
      "right" : "this.isOriginal = splitInfo.isOriginal;",
      "info" : "ExpressionStatement[26551-26590]:ExpressionStatement[26769-26808]"
    }, {
      "left" : "this.deltas = splitInfo.deltas;",
      "right" : "this.deltas = splitInfo.deltas;",
      "info" : "ExpressionStatement[26597-26628]:ExpressionStatement[26815-26846]"
    }, {
      "left" : "this.hasBase = splitInfo.hasBase;",
      "right" : "this.hasBase = splitInfo.hasBase;",
      "info" : "ExpressionStatement[26635-26668]:ExpressionStatement[26853-26886]"
    }, {
      "left" : "this.projColsUncompressedSize = -1;",
      "right" : "this.projColsUncompressedSize = -1;",
      "info" : "ExpressionStatement[26675-26710]:ExpressionStatement[26893-26928]"
    }, {
      "left" : "this.deltaSplits = splitInfo.getSplits();",
      "right" : "this.deltaSplits = splitInfo.getSplits();",
      "info" : "ExpressionStatement[26717-26758]:ExpressionStatement[26935-26976]"
    }, {
      "left" : "Path",
      "right" : "Path",
      "info" : "SimpleType[26770-26774]:SimpleType[26988-26992]"
    }, {
      "left" : "getPath",
      "right" : "getPath",
      "info" : "SimpleName[26775-26782]:SimpleName[26993-27000]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26785-26821]:Block[27003-27039]"
    }, {
      "left" : "return file.getPath();",
      "right" : "return file.getPath();",
      "info" : "ReturnStatement[26793-26815]:ReturnStatement[27011-27033]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[26827-26836]:MarkerAnnotation[27045-27054]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[26841-26847]:Modifier[27059-27065]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[26848-26854]:SimpleType[27066-27072]"
    }, {
      "left" : "toString",
      "right" : "toString",
      "info" : "SimpleName[26855-26863]:SimpleName[27073-27081]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26866-26922]:Block[27084-27140]"
    }, {
      "left" : "return \"splitter(\" + file.getPath() + \")\";",
      "right" : "return \"splitter(\" + file.getPath() + \")\";",
      "info" : "ReturnStatement[26874-26916]:ReturnStatement[27092-27134]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[27226-27232]:Modifier[27444-27450]"
    }, {
      "left" : "long",
      "right" : "long",
      "info" : "PrimitiveType[27233-27237]:PrimitiveType[27451-27455]"
    }, {
      "left" : "getOverlap",
      "right" : "getOverlap",
      "info" : "SimpleName[27238-27248]:SimpleName[27456-27466]"
    }, {
      "left" : "long offset1",
      "right" : "long offset1",
      "info" : "SingleVariableDeclaration[27249-27261]:SingleVariableDeclaration[27467-27479]"
    }, {
      "left" : "long length1",
      "right" : "long length1",
      "info" : "SingleVariableDeclaration[27263-27275]:SingleVariableDeclaration[27481-27493]"
    }, {
      "left" : "long offset2",
      "right" : "long offset2",
      "info" : "SingleVariableDeclaration[27304-27316]:SingleVariableDeclaration[27522-27534]"
    }, {
      "left" : "long length2",
      "right" : "long length2",
      "info" : "SingleVariableDeclaration[27318-27330]:SingleVariableDeclaration[27536-27548]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27332-27568]:Block[27550-27786]"
    }, {
      "left" : "long end1 = offset1 + length1;",
      "right" : "long end1 = offset1 + length1;",
      "info" : "VariableDeclarationStatement[27340-27370]:VariableDeclarationStatement[27558-27588]"
    }, {
      "left" : "long end2 = offset2 + length2;",
      "right" : "long end2 = offset2 + length2;",
      "info" : "VariableDeclarationStatement[27377-27407]:VariableDeclarationStatement[27595-27625]"
    }, {
      "left" : "if (end2 <= offset1 || end1 <= offset2)",
      "right" : "if (end2 <= offset1 || end1 <= offset2)",
      "info" : "IfStatement[27414-27562]:IfStatement[27632-27780]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27454-27481]:Block[27672-27699]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[27464-27473]:ReturnStatement[27682-27691]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27487-27562]:Block[27705-27780]"
    }, {
      "left" : "return Math.min(end1, end2) - Math.max(offset1, offset2);",
      "right" : "return Math.min(end1, end2) - Math.max(offset1, offset2);",
      "info" : "ReturnStatement[27497-27554]:ReturnStatement[27715-27772]"
    }, {
      "left" : "OrcSplit",
      "right" : "OrcSplit",
      "info" : "SimpleType[28054-28062]:SimpleType[28272-28280]"
    }, {
      "left" : "createSplit",
      "right" : "createSplit",
      "info" : "SimpleName[28063-28074]:SimpleName[28281-28292]"
    }, {
      "left" : "long offset",
      "right" : "long offset",
      "info" : "SingleVariableDeclaration[28075-28086]:SingleVariableDeclaration[28293-28304]"
    }, {
      "left" : "long length",
      "right" : "long length",
      "info" : "SingleVariableDeclaration[28088-28099]:SingleVariableDeclaration[28306-28317]"
    }, {
      "left" : "ReaderImpl.FileMetaInfo fileMetaInfo",
      "right" : "ReaderImpl.FileMetaInfo fileMetaInfo",
      "info" : "SingleVariableDeclaration[28122-28158]:SingleVariableDeclaration[28340-28376]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[28167-28178]:SimpleType[28385-28396]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28179-30592]:Block[28397-30810]"
    }, {
      "left" : "String[] hosts;",
      "right" : "String[] hosts;",
      "info" : "VariableDeclarationStatement[28187-28202]:VariableDeclarationStatement[28405-28420]"
    }, {
      "left" : "Map.Entry<Long, BlockLocation> startEntry = locations.floorEntry(offset);",
      "right" : "Map.Entry<Long, BlockLocation> startEntry = locations.floorEntry(offset);",
      "info" : "VariableDeclarationStatement[28209-28282]:VariableDeclarationStatement[28427-28500]"
    }, {
      "left" : "BlockLocation start = startEntry.getValue();",
      "right" : "BlockLocation start = startEntry.getValue();",
      "info" : "VariableDeclarationStatement[28289-28333]:VariableDeclarationStatement[28507-28551]"
    }, {
      "left" : "if (offset + length <= start.getOffset() + start.getLength())",
      "right" : "if (offset + length <= start.getOffset() + start.getLength())",
      "info" : "IfStatement[28340-30441]:IfStatement[28558-30659]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28402-28485]:Block[28620-28703]"
    }, {
      "left" : "hosts = start.getHosts();",
      "right" : "hosts = start.getHosts();",
      "info" : "ExpressionStatement[28452-28477]:ExpressionStatement[28670-28695]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28491-30441]:Block[28709-30659]"
    }, {
      "left" : "Map.Entry<Long, BlockLocation> endEntry = locations.floorEntry(offset + length);",
      "right" : "Map.Entry<Long, BlockLocation> endEntry = locations.floorEntry(offset + length);",
      "info" : "VariableDeclarationStatement[28501-28581]:VariableDeclarationStatement[28719-28799]"
    }, {
      "left" : "BlockLocation end = endEntry.getValue();",
      "right" : "BlockLocation end = endEntry.getValue();",
      "info" : "VariableDeclarationStatement[28590-28630]:VariableDeclarationStatement[28808-28848]"
    }, {
      "left" : "NavigableMap<Long, BlockLocation> navigableMap = locations.subMap(startEntry.getKey(),\n                  true, endEntry.getKey(), true);",
      "right" : "NavigableMap<Long, BlockLocation> navigableMap = locations.subMap(startEntry.getKey(),\n                  true, endEntry.getKey(), true);",
      "info" : "VariableDeclarationStatement[28664-28800]:VariableDeclarationStatement[28882-29018]"
    }, {
      "left" : "Map<String, LongWritable> sizes = new HashMap<String, LongWritable>();",
      "right" : "Map<String, LongWritable> sizes = new HashMap<String, LongWritable>();",
      "info" : "VariableDeclarationStatement[28903-28973]:VariableDeclarationStatement[29121-29191]"
    }, {
      "left" : "long maxSize = 0;",
      "right" : "long maxSize = 0;",
      "info" : "VariableDeclarationStatement[28982-28999]:VariableDeclarationStatement[29200-29217]"
    }, {
      "left" : "for (BlockLocation block : navigableMap.values())",
      "right" : "for (BlockLocation block : navigableMap.values())",
      "info" : "EnhancedForStatement[29008-29737]:EnhancedForStatement[29226-29955]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29058-29737]:Block[29276-29955]"
    }, {
      "left" : "long overlap = getOverlap(offset, length, block.getOffset(),\n              block.getLength());",
      "right" : "long overlap = getOverlap(offset, length, block.getOffset(),\n              block.getLength());",
      "info" : "VariableDeclarationStatement[29070-29164]:VariableDeclarationStatement[29288-29382]"
    }, {
      "left" : "if (overlap > 0)",
      "right" : "if (overlap > 0)",
      "info" : "IfStatement[29175-29727]:IfStatement[29393-29945]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29192-29545]:Block[29410-29763]"
    }, {
      "left" : "for(String host: block.getHosts())",
      "right" : "for(String host: block.getHosts())",
      "info" : "EnhancedForStatement[29206-29533]:EnhancedForStatement[29424-29751]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29241-29533]:Block[29459-29751]"
    }, {
      "left" : "LongWritable val = sizes.get(host);",
      "right" : "LongWritable val = sizes.get(host);",
      "info" : "VariableDeclarationStatement[29257-29292]:VariableDeclarationStatement[29475-29510]"
    }, {
      "left" : "if (val == null)",
      "right" : "if (val == null)",
      "info" : "IfStatement[29307-29421]:IfStatement[29525-29639]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29324-29421]:Block[29542-29639]"
    }, {
      "left" : "val = new LongWritable();",
      "right" : "val = new LongWritable();",
      "info" : "ExpressionStatement[29342-29367]:ExpressionStatement[29560-29585]"
    }, {
      "left" : "sizes.put(host, val);",
      "right" : "sizes.put(host, val);",
      "info" : "ExpressionStatement[29384-29405]:ExpressionStatement[29602-29623]"
    }, {
      "left" : "val.set(val.get() + overlap);",
      "right" : "val.set(val.get() + overlap);",
      "info" : "ExpressionStatement[29436-29465]:ExpressionStatement[29654-29683]"
    }, {
      "left" : "maxSize = Math.max(maxSize, val.get());",
      "right" : "maxSize = Math.max(maxSize, val.get());",
      "info" : "ExpressionStatement[29480-29519]:ExpressionStatement[29698-29737]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29551-29727]:Block[29769-29945]"
    }, {
      "left" : "throw new IOException(\"File \" + file.getPath().toString() +\n                    \" should have had overlap on block starting at \" + block.getOffset());",
      "right" : "throw new IOException(\"File \" + file.getPath().toString() +\n                    \" should have had overlap on block starting at \" + block.getOffset());",
      "info" : "ThrowStatement[29565-29715]:ThrowStatement[29783-29933]"
    }, {
      "left" : "long threshold = (long) (maxSize * MIN_INCLUDED_LOCATION);",
      "right" : "long threshold = (long) (maxSize * MIN_INCLUDED_LOCATION);",
      "info" : "VariableDeclarationStatement[29840-29898]:VariableDeclarationStatement[30058-30116]"
    }, {
      "left" : "List<String> hostList = new ArrayList<String>();",
      "right" : "List<String> hostList = new ArrayList<String>();",
      "info" : "VariableDeclarationStatement[29907-29955]:VariableDeclarationStatement[30125-30173]"
    }, {
      "left" : "for(BlockLocation block: navigableMap.values())",
      "right" : "for(BlockLocation block: navigableMap.values())",
      "info" : "EnhancedForStatement[30038-30355]:EnhancedForStatement[30256-30573]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30086-30355]:Block[30304-30573]"
    }, {
      "left" : "for(String host: block.getHosts())",
      "right" : "for(String host: block.getHosts())",
      "info" : "EnhancedForStatement[30098-30345]:EnhancedForStatement[30316-30563]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30133-30345]:Block[30351-30563]"
    }, {
      "left" : "if (sizes.containsKey(host))",
      "right" : "if (sizes.containsKey(host))",
      "info" : "IfStatement[30147-30333]:IfStatement[30365-30551]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30176-30333]:Block[30394-30551]"
    }, {
      "left" : "if (sizes.get(host).get() >= threshold)",
      "right" : "if (sizes.get(host).get() >= threshold)",
      "info" : "IfStatement[30192-30285]:IfStatement[30410-30503]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30232-30285]:Block[30450-30503]"
    }, {
      "left" : "hostList.add(host);",
      "right" : "hostList.add(host);",
      "info" : "ExpressionStatement[30250-30269]:ExpressionStatement[30468-30487]"
    }, {
      "left" : "sizes.remove(host);",
      "right" : "sizes.remove(host);",
      "info" : "ExpressionStatement[30300-30319]:ExpressionStatement[30518-30537]"
    }, {
      "left" : "hosts = new String[hostList.size()];",
      "right" : "hosts = new String[hostList.size()];",
      "info" : "ExpressionStatement[30364-30400]:ExpressionStatement[30582-30618]"
    }, {
      "left" : "hostList.toArray(hosts);",
      "right" : "hostList.toArray(hosts);",
      "info" : "ExpressionStatement[30409-30433]:ExpressionStatement[30627-30651]"
    }, {
      "left" : "return new OrcSplit(file.getPath(), offset, length, hosts, fileMetaInfo,\n          isOriginal, hasBase, deltas, projColsUncompressedSize);",
      "right" : "return new OrcSplit(file.getPath(), offset, length, hosts, fileMetaInfo,\n          isOriginal, hasBase, deltas, projColsUncompressedSize);",
      "info" : "ReturnStatement[30448-30586]:ReturnStatement[30666-30804]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[30756-30765]:MarkerAnnotation[30974-30983]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[30770-30776]:Modifier[30988-30994]"
    }, {
      "left" : "List<OrcSplit>",
      "right" : "List<OrcSplit>",
      "info" : "ParameterizedType[30777-30791]:ParameterizedType[30995-31009]"
    }, {
      "left" : "call",
      "right" : "call",
      "info" : "SimpleName[30792-30796]:SimpleName[31010-31014]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[30806-30817]:SimpleType[31024-31035]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30818-34354]:Block[31036-34572]"
    }, {
      "left" : "populateAndCacheStripeDetails();",
      "right" : "populateAndCacheStripeDetails();",
      "info" : "ExpressionStatement[30826-30858]:ExpressionStatement[31044-31076]"
    }, {
      "left" : "List<OrcSplit> splits = Lists.newArrayList();",
      "right" : "List<OrcSplit> splits = Lists.newArrayList();",
      "info" : "VariableDeclarationStatement[30865-30910]:VariableDeclarationStatement[31083-31128]"
    }, {
      "left" : "boolean[] includeStripe = null;",
      "right" : "boolean[] includeStripe = null;",
      "info" : "VariableDeclarationStatement[30968-30999]:VariableDeclarationStatement[31186-31217]"
    }, {
      "left" : "if (deltas.isEmpty())",
      "right" : "if (deltas.isEmpty())",
      "info" : "IfStatement[31143-32607]:IfStatement[31361-32825]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31165-32607]:Block[31383-32825]"
    }, {
      "left" : "Reader.Options options = new Reader.Options();",
      "right" : "Reader.Options options = new Reader.Options();",
      "info" : "VariableDeclarationStatement[31175-31221]:VariableDeclarationStatement[31393-31439]"
    }, {
      "left" : "options.include(genIncludedColumns(types, context.conf, isOriginal));",
      "right" : "options.include(genIncludedColumns(types, context.conf, isOriginal));",
      "info" : "ExpressionStatement[31230-31299]:ExpressionStatement[31448-31517]"
    }, {
      "left" : "setSearchArgument(options, types, context.conf, isOriginal);",
      "right" : "setSearchArgument(options, types, context.conf, isOriginal);",
      "info" : "ExpressionStatement[31308-31368]:ExpressionStatement[31526-31586]"
    }, {
      "left" : "if (options.getSearchArgument() != null &&\n            writerVersion != OrcFile.WriterVersion.ORIGINAL)",
      "right" : "if (options.getSearchArgument() != null &&\n            writerVersion != OrcFile.WriterVersion.ORIGINAL)",
      "info" : "IfStatement[31452-32599]:IfStatement[31670-32817]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31556-32599]:Block[31774-32817]"
    }, {
      "left" : "SearchArgument sarg = options.getSearchArgument();",
      "right" : "SearchArgument sarg = options.getSearchArgument();",
      "info" : "VariableDeclarationStatement[31568-31618]:VariableDeclarationStatement[31786-31836]"
    }, {
      "left" : "List<PredicateLeaf> sargLeaves = sarg.getLeaves();",
      "right" : "List<PredicateLeaf> sargLeaves = sarg.getLeaves();",
      "info" : "VariableDeclarationStatement[31629-31679]:VariableDeclarationStatement[31847-31897]"
    }, {
      "left" : "List<StripeStatistics> stripeStats = metadata.getStripeStatistics();",
      "right" : "List<StripeStatistics> stripeStats = metadata.getStripeStatistics();",
      "info" : "VariableDeclarationStatement[31690-31758]:VariableDeclarationStatement[31908-31976]"
    }, {
      "left" : "int[] filterColumns = RecordReaderImpl.mapSargColumns(sargLeaves,\n              options.getColumnNames(), getRootColumn(isOriginal));",
      "right" : "int[] filterColumns = RecordReaderImpl.mapSargColumns(sargLeaves,\n              options.getColumnNames(), getRootColumn(isOriginal));",
      "info" : "VariableDeclarationStatement[31769-31902]:VariableDeclarationStatement[31987-32120]"
    }, {
      "left" : "if (stripeStats != null)",
      "right" : "if (stripeStats != null)",
      "info" : "IfStatement[31914-32589]:IfStatement[32132-32807]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31939-32589]:Block[32157-32807]"
    }, {
      "left" : "includeStripe = new boolean[stripes.size()];",
      "right" : "includeStripe = new boolean[stripes.size()];",
      "info" : "ExpressionStatement[32031-32075]:ExpressionStatement[32249-32293]"
    }, {
      "left" : "for (int i = 0; i < stripes.size(); ++i)",
      "right" : "for (int i = 0; i < stripes.size(); ++i)",
      "info" : "ForStatement[32088-32577]:ForStatement[32306-32795]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32129-32577]:Block[32347-32795]"
    }, {
      "left" : "includeStripe[i] = (i >= stripeStats.size()) ||\n                  isStripeSatisfyPredicate(stripeStats.get(i), sarg,\n                      filterColumns);",
      "right" : "includeStripe[i] = (i >= stripeStats.size()) ||\n                  isStripeSatisfyPredicate(stripeStats.get(i), sarg,\n                      filterColumns);",
      "info" : "ExpressionStatement[32145-32299]:ExpressionStatement[32363-32517]"
    }, {
      "left" : "if (LOG.isDebugEnabled() && !includeStripe[i])",
      "right" : "if (LOG.isDebugEnabled() && !includeStripe[i])",
      "info" : "IfStatement[32314-32563]:IfStatement[32532-32781]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32361-32563]:Block[32579-32781]"
    }, {
      "left" : "LOG.debug(\"Eliminating ORC stripe-\" + i + \" of file '\" +\n                    file.getPath() + \"'  as it did not satisfy \" +\n                    \"predicate condition.\");",
      "right" : "LOG.debug(\"Eliminating ORC stripe-\" + i + \" of file '\" +\n                    file.getPath() + \"'  as it did not satisfy \" +\n                    \"predicate condition.\");",
      "info" : "ExpressionStatement[32379-32547]:ExpressionStatement[32597-32765]"
    }, {
      "left" : "if (includeStripe == null)",
      "right" : "if (includeStripe == null)",
      "info" : "IfStatement[32678-32809]:IfStatement[32896-33027]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32705-32809]:Block[32923-33027]"
    }, {
      "left" : "includeStripe = new boolean[stripes.size()];",
      "right" : "includeStripe = new boolean[stripes.size()];",
      "info" : "ExpressionStatement[32715-32759]:ExpressionStatement[32933-32977]"
    }, {
      "left" : "Arrays.fill(includeStripe, true);",
      "right" : "Arrays.fill(includeStripe, true);",
      "info" : "ExpressionStatement[32768-32801]:ExpressionStatement[32986-33019]"
    }, {
      "left" : "long currentOffset = -1;",
      "right" : "long currentOffset = -1;",
      "info" : "VariableDeclarationStatement[32817-32841]:VariableDeclarationStatement[33035-33059]"
    }, {
      "left" : "long currentLength = 0;",
      "right" : "long currentLength = 0;",
      "info" : "VariableDeclarationStatement[32848-32871]:VariableDeclarationStatement[33066-33089]"
    }, {
      "left" : "int idx = -1;",
      "right" : "int idx = -1;",
      "info" : "VariableDeclarationStatement[32878-32891]:VariableDeclarationStatement[33096-33109]"
    }, {
      "left" : "for (StripeInformation stripe : stripes)",
      "right" : "for (StripeInformation stripe : stripes)",
      "info" : "EnhancedForStatement[32898-34133]:EnhancedForStatement[33116-34351]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32939-34133]:Block[33157-34351]"
    }, {
      "left" : "idx++;",
      "right" : "idx++;",
      "info" : "ExpressionStatement[32949-32955]:ExpressionStatement[33167-33173]"
    }, {
      "left" : "if (!includeStripe[idx])",
      "right" : "if (!includeStripe[idx])",
      "info" : "IfStatement[32965-33244]:IfStatement[33183-33462]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32990-33244]:Block[33208-33462]"
    }, {
      "left" : "if (currentOffset != -1)",
      "right" : "if (currentOffset != -1)",
      "info" : "IfStatement[33063-33214]:IfStatement[33281-33432]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33088-33214]:Block[33306-33432]"
    }, {
      "left" : "splits.add(createSplit(currentOffset, currentLength, fileMetaInfo));",
      "right" : "splits.add(createSplit(currentOffset, currentLength, fileMetaInfo));",
      "info" : "ExpressionStatement[33102-33170]:ExpressionStatement[33320-33388]"
    }, {
      "left" : "currentOffset = -1;",
      "right" : "currentOffset = -1;",
      "info" : "ExpressionStatement[33183-33202]:ExpressionStatement[33401-33420]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[33225-33234]:ContinueStatement[33443-33452]"
    }, {
      "left" : "if (currentOffset != -1 && currentLength > context.minSize &&\n            (currentOffset / blockSize != stripe.getOffset() / blockSize))",
      "right" : "if (currentOffset != -1 && currentLength > context.minSize &&\n            (currentOffset / blockSize != stripe.getOffset() / blockSize))",
      "info" : "IfStatement[33389-33646]:IfStatement[33607-33864]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33526-33646]:Block[33744-33864]"
    }, {
      "left" : "splits.add(createSplit(currentOffset, currentLength, fileMetaInfo));",
      "right" : "splits.add(createSplit(currentOffset, currentLength, fileMetaInfo));",
      "info" : "ExpressionStatement[33538-33606]:ExpressionStatement[33756-33824]"
    }, {
      "left" : "currentOffset = -1;",
      "right" : "currentOffset = -1;",
      "info" : "ExpressionStatement[33617-33636]:ExpressionStatement[33835-33854]"
    }, {
      "left" : "if (currentOffset == -1)",
      "right" : "if (currentOffset == -1)",
      "info" : "IfStatement[33714-33958]:IfStatement[33932-34176]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33739-33842]:Block[33957-34060]"
    }, {
      "left" : "currentOffset = stripe.getOffset();",
      "right" : "currentOffset = stripe.getOffset();",
      "info" : "ExpressionStatement[33751-33786]:ExpressionStatement[33969-34004]"
    }, {
      "left" : "currentLength = stripe.getLength();",
      "right" : "currentLength = stripe.getLength();",
      "info" : "ExpressionStatement[33797-33832]:ExpressionStatement[34015-34050]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33848-33958]:Block[34066-34176]"
    }, {
      "left" : "currentLength =\n              (stripe.getOffset() + stripe.getLength()) - currentOffset;",
      "right" : "currentLength =\n              (stripe.getOffset() + stripe.getLength()) - currentOffset;",
      "info" : "ExpressionStatement[33860-33948]:ExpressionStatement[34078-34166]"
    }, {
      "left" : "if (currentLength >= context.maxSize)",
      "right" : "if (currentLength >= context.maxSize)",
      "info" : "IfStatement[33967-34125]:IfStatement[34185-34343]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34005-34125]:Block[34223-34343]"
    }, {
      "left" : "splits.add(createSplit(currentOffset, currentLength, fileMetaInfo));",
      "right" : "splits.add(createSplit(currentOffset, currentLength, fileMetaInfo));",
      "info" : "ExpressionStatement[34017-34085]:ExpressionStatement[34235-34303]"
    }, {
      "left" : "currentOffset = -1;",
      "right" : "currentOffset = -1;",
      "info" : "ExpressionStatement[34096-34115]:ExpressionStatement[34314-34333]"
    }, {
      "left" : "if (currentOffset != -1)",
      "right" : "if (currentOffset != -1)",
      "info" : "IfStatement[34140-34251]:IfStatement[34358-34469]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34165-34251]:Block[34383-34469]"
    }, {
      "left" : "splits.add(createSplit(currentOffset, currentLength, fileMetaInfo));",
      "right" : "splits.add(createSplit(currentOffset, currentLength, fileMetaInfo));",
      "info" : "ExpressionStatement[34175-34243]:ExpressionStatement[34393-34461]"
    }, {
      "left" : "splits.addAll(deltaSplits);",
      "right" : "splits.addAll(deltaSplits);",
      "info" : "ExpressionStatement[34300-34327]:ExpressionStatement[34518-34545]"
    }, {
      "left" : "return splits;",
      "right" : "return splits;",
      "info" : "ReturnStatement[34334-34348]:ReturnStatement[34552-34566]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[34360-34367]:Modifier[34578-34585]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[34368-34372]:PrimitiveType[34586-34590]"
    }, {
      "left" : "populateAndCacheStripeDetails",
      "right" : "populateAndCacheStripeDetails",
      "info" : "SimpleName[34373-34402]:SimpleName[34591-34620]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[34412-34423]:SimpleType[34630-34641]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34424-35931]:Block[34642-36149]"
    }, {
      "left" : "Reader orcReader = OrcFile.createReader(file.getPath(),\n          OrcFile.readerOptions(context.conf).filesystem(fs));",
      "right" : "Reader orcReader = OrcFile.createReader(file.getPath(),\n          OrcFile.readerOptions(context.conf).filesystem(fs));",
      "info" : "VariableDeclarationStatement[34432-34550]:VariableDeclarationStatement[34650-34768]"
    }, {
      "left" : "List<String> projCols = ColumnProjectionUtils.getReadColumnNames(context.conf);",
      "right" : "List<String> projCols = ColumnProjectionUtils.getReadColumnNames(context.conf);",
      "info" : "VariableDeclarationStatement[34557-34636]:VariableDeclarationStatement[34775-34854]"
    }, {
      "left" : "projColsUncompressedSize = orcReader.getRawDataSizeOfColumns(projCols);",
      "right" : "projColsUncompressedSize = orcReader.getRawDataSizeOfColumns(projCols);",
      "info" : "ExpressionStatement[34643-34714]:ExpressionStatement[34861-34932]"
    }, {
      "left" : "if (fileInfo != null)",
      "right" : "if (fileInfo != null)",
      "info" : "IfStatement[34721-35925]:IfStatement[34939-36143]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34743-35340]:Block[34961-35558]"
    }, {
      "left" : "stripes = fileInfo.stripeInfos;",
      "right" : "stripes = fileInfo.stripeInfos;",
      "info" : "ExpressionStatement[34753-34784]:ExpressionStatement[34971-35002]"
    }, {
      "left" : "fileMetaInfo = fileInfo.fileMetaInfo;",
      "right" : "fileMetaInfo = fileInfo.fileMetaInfo;",
      "info" : "ExpressionStatement[34793-34830]:ExpressionStatement[35011-35048]"
    }, {
      "left" : "metadata = fileInfo.metadata;",
      "right" : "metadata = fileInfo.metadata;",
      "info" : "ExpressionStatement[34839-34868]:ExpressionStatement[35057-35086]"
    }, {
      "left" : "types = fileInfo.types;",
      "right" : "types = fileInfo.types;",
      "info" : "ExpressionStatement[34877-34900]:ExpressionStatement[35095-35118]"
    }, {
      "left" : "writerVersion = fileInfo.writerVersion;",
      "right" : "writerVersion = fileInfo.writerVersion;",
      "info" : "ExpressionStatement[34909-34948]:ExpressionStatement[35127-35166]"
    }, {
      "left" : "if (fileMetaInfo == null && context.footerInSplits)",
      "right" : "if (fileMetaInfo == null && context.footerInSplits)",
      "info" : "IfStatement[35022-35332]:IfStatement[35240-35550]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35074-35332]:Block[35292-35550]"
    }, {
      "left" : "fileInfo.fileMetaInfo = ((ReaderImpl) orcReader).getFileMetaInfo();",
      "right" : "fileInfo.fileMetaInfo = ((ReaderImpl) orcReader).getFileMetaInfo();",
      "info" : "ExpressionStatement[35086-35153]:ExpressionStatement[35304-35371]"
    }, {
      "left" : "fileInfo.metadata = orcReader.getMetadata();",
      "right" : "fileInfo.metadata = orcReader.getMetadata();",
      "info" : "ExpressionStatement[35164-35208]:ExpressionStatement[35382-35426]"
    }, {
      "left" : "fileInfo.types = orcReader.getTypes();",
      "right" : "fileInfo.types = orcReader.getTypes();",
      "info" : "ExpressionStatement[35219-35257]:ExpressionStatement[35437-35475]"
    }, {
      "left" : "fileInfo.writerVersion = orcReader.getWriterVersion();",
      "right" : "fileInfo.writerVersion = orcReader.getWriterVersion();",
      "info" : "ExpressionStatement[35268-35322]:ExpressionStatement[35486-35540]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35346-35925]:Block[35564-36143]"
    }, {
      "left" : "stripes = orcReader.getStripes();",
      "right" : "stripes = orcReader.getStripes();",
      "info" : "ExpressionStatement[35356-35389]:ExpressionStatement[35574-35607]"
    }, {
      "left" : "metadata = orcReader.getMetadata();",
      "right" : "metadata = orcReader.getMetadata();",
      "info" : "ExpressionStatement[35398-35433]:ExpressionStatement[35616-35651]"
    }, {
      "left" : "types = orcReader.getTypes();",
      "right" : "types = orcReader.getTypes();",
      "info" : "ExpressionStatement[35442-35471]:ExpressionStatement[35660-35689]"
    }, {
      "left" : "writerVersion = orcReader.getWriterVersion();",
      "right" : "writerVersion = orcReader.getWriterVersion();",
      "info" : "ExpressionStatement[35480-35525]:ExpressionStatement[35698-35743]"
    }, {
      "left" : "fileMetaInfo = context.footerInSplits ?\n            ((ReaderImpl) orcReader).getFileMetaInfo() : null;",
      "right" : "fileMetaInfo = context.footerInSplits ?\n            ((ReaderImpl) orcReader).getFileMetaInfo() : null;",
      "info" : "ExpressionStatement[35534-35636]:ExpressionStatement[35752-35854]"
    }, {
      "left" : "if (context.cacheStripeDetails)",
      "right" : "if (context.cacheStripeDetails)",
      "info" : "IfStatement[35645-35917]:IfStatement[35863-36135]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35677-35917]:Block[35895-36135]"
    }, {
      "left" : "Context.footerCache.put(file.getPath(),\n              new FileInfo(file.getModificationTime(), file.getLen(), stripes,\n                  metadata, types, fileMetaInfo, writerVersion));",
      "right" : "Context.footerCache.put(file.getPath(),\n              new FileInfo(file.getModificationTime(), file.getLen(), stripes,\n                  metadata, types, fileMetaInfo, writerVersion));",
      "info" : "ExpressionStatement[35723-35907]:ExpressionStatement[35941-36125]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[35937-35944]:Modifier[36155-36162]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[35945-35952]:PrimitiveType[36163-36170]"
    }, {
      "left" : "isStripeSatisfyPredicate",
      "right" : "isStripeSatisfyPredicate",
      "info" : "SimpleName[35953-35977]:SimpleName[36171-36195]"
    }, {
      "left" : "StripeStatistics stripeStatistics",
      "right" : "StripeStatistics stripeStatistics",
      "info" : "SingleVariableDeclaration[35978-36011]:SingleVariableDeclaration[36196-36229]"
    }, {
      "left" : "SearchArgument sarg",
      "right" : "SearchArgument sarg",
      "info" : "SingleVariableDeclaration[36058-36077]:SingleVariableDeclaration[36276-36295]"
    }, {
      "left" : "int[] filterColumns",
      "right" : "int[] filterColumns",
      "info" : "SingleVariableDeclaration[36124-36143]:SingleVariableDeclaration[36342-36361]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36145-36958]:Block[36363-37176]"
    }, {
      "left" : "List<PredicateLeaf> predLeaves = sarg.getLeaves();",
      "right" : "List<PredicateLeaf> predLeaves = sarg.getLeaves();",
      "info" : "VariableDeclarationStatement[36153-36203]:VariableDeclarationStatement[36371-36421]"
    }, {
      "left" : "TruthValue[] truthValues = new TruthValue[predLeaves.size()];",
      "right" : "TruthValue[] truthValues = new TruthValue[predLeaves.size()];",
      "info" : "VariableDeclarationStatement[36210-36271]:VariableDeclarationStatement[36428-36489]"
    }, {
      "left" : "for (int pred = 0; pred < truthValues.length; pred++)",
      "right" : "for (int pred = 0; pred < truthValues.length; pred++)",
      "info" : "ForStatement[36278-36900]:ForStatement[36496-37118]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36332-36900]:Block[36550-37118]"
    }, {
      "left" : "if (filterColumns[pred] != -1)",
      "right" : "if (filterColumns[pred] != -1)",
      "info" : "IfStatement[36342-36892]:IfStatement[36560-37110]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36373-36657]:Block[36591-36875]"
    }, {
      "left" : "ColumnStatistics stats = stripeStatistics.getColumnStatistics()[filterColumns[pred]];",
      "right" : "ColumnStatistics stats = stripeStatistics.getColumnStatistics()[filterColumns[pred]];",
      "info" : "VariableDeclarationStatement[36461-36546]:VariableDeclarationStatement[36679-36764]"
    }, {
      "left" : "truthValues[pred] = RecordReaderImpl.evaluatePredicate(stats, predLeaves.get(pred), null);",
      "right" : "truthValues[pred] = RecordReaderImpl.evaluatePredicate(stats, predLeaves.get(pred), null);",
      "info" : "ExpressionStatement[36557-36647]:ExpressionStatement[36775-36865]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36663-36892]:Block[36881-37110]"
    }, {
      "left" : "truthValues[pred] = TruthValue.YES_NO_NULL;",
      "right" : "truthValues[pred] = TruthValue.YES_NO_NULL;",
      "info" : "ExpressionStatement[36839-36882]:ExpressionStatement[37057-37100]"
    }, {
      "left" : "return sarg.evaluate(truthValues).isNeeded();",
      "right" : "return sarg.evaluate(truthValues).isNeeded();",
      "info" : "ReturnStatement[36907-36952]:ReturnStatement[37125-37170]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[38956-38963]:Modifier[39336-39343]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[38964-38970]:Modifier[39344-39350]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[38971-38975]:PrimitiveType[39351-39355]"
    }, {
      "left" : "cancelFutures",
      "right" : "cancelFutures",
      "info" : "SimpleName[38976-38989]:SimpleName[39356-39369]"
    }, {
      "left" : "List<Future<?>> futures",
      "right" : "List<Future<?>> futures",
      "info" : "SingleVariableDeclaration[38990-39013]:SingleVariableDeclaration[39370-39393]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39015-39089]:Block[39395-39469]"
    }, {
      "left" : "for (Future future : futures)",
      "right" : "for (Future future : futures)",
      "info" : "EnhancedForStatement[39021-39085]:EnhancedForStatement[39401-39465]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39051-39085]:Block[39431-39465]"
    }, {
      "left" : "future.cancel(true);",
      "right" : "future.cancel(true);",
      "info" : "ExpressionStatement[39059-39079]:ExpressionStatement[39439-39459]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[39575-39582]:Modifier[39966-39973]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[39583-39589]:Modifier[39974-39980]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[39590-39595]:TYPE_DECLARATION_KIND[39981-39986]"
    }, {
      "left" : "FileInfo",
      "right" : "FileInfo",
      "info" : "SimpleName[39596-39604]:SimpleName[39987-39995]"
    }, {
      "left" : "FileInfo",
      "right" : "FileInfo",
      "info" : "SimpleName[39841-39849]:SimpleName[40232-40240]"
    }, {
      "left" : "long modificationTime",
      "right" : "long modificationTime",
      "info" : "SingleVariableDeclaration[39850-39871]:SingleVariableDeclaration[40241-40262]"
    }, {
      "left" : "long size",
      "right" : "long size",
      "info" : "SingleVariableDeclaration[39873-39882]:SingleVariableDeclaration[40264-40273]"
    }, {
      "left" : "List<StripeInformation> stripeInfos",
      "right" : "List<StripeInformation> stripeInfos",
      "info" : "SingleVariableDeclaration[39897-39932]:SingleVariableDeclaration[40288-40323]"
    }, {
      "left" : "Metadata metadata",
      "right" : "Metadata metadata",
      "info" : "SingleVariableDeclaration[39947-39964]:SingleVariableDeclaration[40338-40355]"
    }, {
      "left" : "List<OrcProto.Type> types",
      "right" : "List<OrcProto.Type> types",
      "info" : "SingleVariableDeclaration[39966-39991]:SingleVariableDeclaration[40357-40382]"
    }, {
      "left" : "ReaderImpl.FileMetaInfo fileMetaInfo",
      "right" : "ReaderImpl.FileMetaInfo fileMetaInfo",
      "info" : "SingleVariableDeclaration[40006-40042]:SingleVariableDeclaration[40397-40433]"
    }, {
      "left" : "OrcFile.WriterVersion writerVersion",
      "right" : "OrcFile.WriterVersion writerVersion",
      "info" : "SingleVariableDeclaration[40057-40092]:SingleVariableDeclaration[40448-40483]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40094-40351]:Block[40485-40742]"
    }, {
      "left" : "this.modificationTime = modificationTime;",
      "right" : "this.modificationTime = modificationTime;",
      "info" : "ExpressionStatement[40102-40143]:ExpressionStatement[40493-40534]"
    }, {
      "left" : "this.size = size;",
      "right" : "this.size = size;",
      "info" : "ExpressionStatement[40150-40167]:ExpressionStatement[40541-40558]"
    }, {
      "left" : "this.stripeInfos = stripeInfos;",
      "right" : "this.stripeInfos = stripeInfos;",
      "info" : "ExpressionStatement[40174-40205]:ExpressionStatement[40565-40596]"
    }, {
      "left" : "this.fileMetaInfo = fileMetaInfo;",
      "right" : "this.fileMetaInfo = fileMetaInfo;",
      "info" : "ExpressionStatement[40212-40245]:ExpressionStatement[40603-40636]"
    }, {
      "left" : "this.metadata = metadata;",
      "right" : "this.metadata = metadata;",
      "info" : "ExpressionStatement[40252-40277]:ExpressionStatement[40643-40668]"
    }, {
      "left" : "this.types = types;",
      "right" : "this.types = types;",
      "info" : "ExpressionStatement[40284-40303]:ExpressionStatement[40675-40694]"
    }, {
      "left" : "this.writerVersion = writerVersion;",
      "right" : "this.writerVersion = writerVersion;",
      "info" : "ExpressionStatement[40310-40345]:ExpressionStatement[40701-40736]"
    }, {
      "left" : "@SuppressWarnings(\"unchecked\")",
      "right" : "@SuppressWarnings(\"unchecked\")",
      "info" : "SingleMemberAnnotation[40359-40389]:SingleMemberAnnotation[40750-40780]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[40392-40399]:Modifier[40783-40790]"
    }, {
      "left" : "org.apache.hadoop.mapred.RecordReader<NullWritable, OrcStruct>",
      "right" : "org.apache.hadoop.mapred.RecordReader<NullWritable, OrcStruct>",
      "info" : "ParameterizedType[40400-40462]:ParameterizedType[40791-40853]"
    }, {
      "left" : "createVectorizedReader",
      "right" : "createVectorizedReader",
      "info" : "SimpleName[40467-40489]:SimpleName[40858-40880]"
    }, {
      "left" : "InputSplit split",
      "right" : "InputSplit split",
      "info" : "SingleVariableDeclaration[40490-40506]:SingleVariableDeclaration[40881-40897]"
    }, {
      "left" : "JobConf conf",
      "right" : "JobConf conf",
      "info" : "SingleVariableDeclaration[40508-40520]:SingleVariableDeclaration[40899-40911]"
    }, {
      "left" : "Reporter reporter",
      "right" : "Reporter reporter",
      "info" : "SingleVariableDeclaration[40522-40539]:SingleVariableDeclaration[40913-40930]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[40576-40587]:SimpleType[40967-40978]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40588-40721]:Block[40979-41112]"
    }, {
      "left" : "return (org.apache.hadoop.mapred.RecordReader)\n      new VectorizedOrcInputFormat().getRecordReader(split, conf, reporter);",
      "right" : "return (org.apache.hadoop.mapred.RecordReader)\n      new VectorizedOrcInputFormat().getRecordReader(split, conf, reporter);",
      "info" : "ReturnStatement[40594-40717]:ReturnStatement[40985-41108]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[40725-40734]:MarkerAnnotation[41116-41125]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[40737-40743]:Modifier[41128-41134]"
    }, {
      "left" : "org.apache.hadoop.mapred.RecordReader<NullWritable, OrcStruct>",
      "right" : "org.apache.hadoop.mapred.RecordReader<NullWritable, OrcStruct>",
      "info" : "ParameterizedType[40744-40806]:ParameterizedType[41135-41197]"
    }, {
      "left" : "getRecordReader",
      "right" : "getRecordReader",
      "info" : "SimpleName[40809-40824]:SimpleName[41200-41215]"
    }, {
      "left" : "InputSplit inputSplit",
      "right" : "InputSplit inputSplit",
      "info" : "SingleVariableDeclaration[40825-40846]:SingleVariableDeclaration[41216-41237]"
    }, {
      "left" : "JobConf conf",
      "right" : "JobConf conf",
      "info" : "SingleVariableDeclaration[40848-40860]:SingleVariableDeclaration[41239-41251]"
    }, {
      "left" : "Reporter reporter",
      "right" : "Reporter reporter",
      "info" : "SingleVariableDeclaration[40880-40897]:SingleVariableDeclaration[41271-41288]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[40906-40917]:SimpleType[41297-41308]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40918-42338]:Block[41309-42729]"
    }, {
      "left" : "boolean vectorMode = Utilities.isVectorMode(conf);",
      "right" : "boolean vectorMode = Utilities.isVectorMode(conf);",
      "info" : "VariableDeclarationStatement[40924-40974]:VariableDeclarationStatement[41315-41365]"
    }, {
      "left" : "if (inputSplit.getClass() == FileSplit.class)",
      "right" : "if (inputSplit.getClass() == FileSplit.class)",
      "info" : "IfStatement[41156-41480]:IfStatement[41547-41871]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41202-41480]:Block[41593-41871]"
    }, {
      "left" : "if (vectorMode)",
      "right" : "if (vectorMode)",
      "info" : "IfStatement[41210-41302]:IfStatement[41601-41693]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41226-41302]:Block[41617-41693]"
    }, {
      "left" : "return createVectorizedReader(inputSplit, conf, reporter);",
      "right" : "return createVectorizedReader(inputSplit, conf, reporter);",
      "info" : "ReturnStatement[41236-41294]:ReturnStatement[41627-41685]"
    }, {
      "left" : "return new OrcRecordReader(OrcFile.createReader(\n          ((FileSplit) inputSplit).getPath(),\n          OrcFile.readerOptions(conf)), conf, (FileSplit) inputSplit);",
      "right" : "return new OrcRecordReader(OrcFile.createReader(\n          ((FileSplit) inputSplit).getPath(),\n          OrcFile.readerOptions(conf)), conf, (FileSplit) inputSplit);",
      "info" : "ReturnStatement[41309-41474]:ReturnStatement[41700-41865]"
    }, {
      "left" : "OrcSplit split = (OrcSplit) inputSplit;",
      "right" : "OrcSplit split = (OrcSplit) inputSplit;",
      "info" : "VariableDeclarationStatement[41486-41525]:VariableDeclarationStatement[41877-41916]"
    }, {
      "left" : "reporter.setStatus(inputSplit.toString());",
      "right" : "reporter.setStatus(inputSplit.toString());",
      "info" : "ExpressionStatement[41530-41572]:ExpressionStatement[41921-41963]"
    }, {
      "left" : "Options options = new Options(conf).reporter(reporter);",
      "right" : "Options options = new Options(conf).reporter(reporter);",
      "info" : "VariableDeclarationStatement[41578-41633]:VariableDeclarationStatement[41969-42024]"
    }, {
      "left" : "final RowReader<OrcStruct> inner = getReader(inputSplit, options);",
      "right" : "final RowReader<OrcStruct> inner = getReader(inputSplit, options);",
      "info" : "VariableDeclarationStatement[41638-41704]:VariableDeclarationStatement[42029-42095]"
    }, {
      "left" : "if (split.isOriginal() && split.getDeltas().isEmpty())",
      "right" : "if (split.isOriginal() && split.getDeltas().isEmpty())",
      "info" : "IfStatement[41895-42124]:IfStatement[42286-42515]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41950-42124]:Block[42341-42515]"
    }, {
      "left" : "if (vectorMode)",
      "right" : "if (vectorMode)",
      "info" : "IfStatement[41958-42118]:IfStatement[42349-42509]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41974-42050]:Block[42365-42441]"
    }, {
      "left" : "return createVectorizedReader(inputSplit, conf, reporter);",
      "right" : "return createVectorizedReader(inputSplit, conf, reporter);",
      "info" : "ReturnStatement[41984-42042]:ReturnStatement[42375-42433]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42056-42118]:Block[42447-42509]"
    }, {
      "left" : "return new NullKeyRecordReader(inner, conf);",
      "right" : "return new NullKeyRecordReader(inner, conf);",
      "info" : "ReturnStatement[42066-42110]:ReturnStatement[42457-42501]"
    }, {
      "left" : "if (vectorMode)",
      "right" : "if (vectorMode)",
      "info" : "IfStatement[42130-42285]:IfStatement[42521-42676]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42146-42285]:Block[42537-42676]"
    }, {
      "left" : "return (org.apache.hadoop.mapred.RecordReader)\n          new VectorizedOrcAcidRowReader(inner, conf, (FileSplit) inputSplit);",
      "right" : "return (org.apache.hadoop.mapred.RecordReader)\n          new VectorizedOrcAcidRowReader(inner, conf, (FileSplit) inputSplit);",
      "info" : "ReturnStatement[42154-42279]:ReturnStatement[42545-42670]"
    }, {
      "left" : "return new NullKeyRecordReader(inner, conf);",
      "right" : "return new NullKeyRecordReader(inner, conf);",
      "info" : "ReturnStatement[42290-42334]:ReturnStatement[42681-42725]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[42489-42495]:Modifier[42880-42886]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[42496-42502]:Modifier[42887-42893]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[42503-42508]:Modifier[42894-42899]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[42509-42514]:TYPE_DECLARATION_KIND[42900-42905]"
    }, {
      "left" : "NullKeyRecordReader",
      "right" : "NullKeyRecordReader",
      "info" : "SimpleName[42515-42534]:SimpleName[42906-42925]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[42680-42686]:Modifier[43071-43077]"
    }, {
      "left" : "RecordIdentifier",
      "right" : "RecordIdentifier",
      "info" : "SimpleType[42687-42703]:SimpleType[43078-43094]"
    }, {
      "left" : "getRecordIdentifier",
      "right" : "getRecordIdentifier",
      "info" : "SimpleName[42704-42723]:SimpleName[43095-43114]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42726-42750]:Block[43117-43141]"
    }, {
      "left" : "return id;",
      "right" : "return id;",
      "info" : "ReturnStatement[42734-42744]:ReturnStatement[43125-43135]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[42755-42762]:Modifier[43146-43153]"
    }, {
      "left" : "NullKeyRecordReader",
      "right" : "NullKeyRecordReader",
      "info" : "SimpleName[42763-42782]:SimpleName[43154-43173]"
    }, {
      "left" : "RowReader<OrcStruct> inner",
      "right" : "RowReader<OrcStruct> inner",
      "info" : "SingleVariableDeclaration[42783-42809]:SingleVariableDeclaration[43174-43200]"
    }, {
      "left" : "Configuration conf",
      "right" : "Configuration conf",
      "info" : "SingleVariableDeclaration[42811-42829]:SingleVariableDeclaration[43202-43220]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42831-42894]:Block[43222-43285]"
    }, {
      "left" : "this.inner = inner;",
      "right" : "this.inner = inner;",
      "info" : "ExpressionStatement[42839-42858]:ExpressionStatement[43230-43249]"
    }, {
      "left" : "id = inner.createKey();",
      "right" : "id = inner.createKey();",
      "info" : "ExpressionStatement[42865-42888]:ExpressionStatement[43256-43279]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[42899-42908]:MarkerAnnotation[43290-43299]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[42913-42919]:Modifier[43304-43310]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[42920-42927]:PrimitiveType[43311-43318]"
    }, {
      "left" : "next",
      "right" : "next",
      "info" : "SimpleName[42928-42932]:SimpleName[43319-43323]"
    }, {
      "left" : "NullWritable nullWritable",
      "right" : "NullWritable nullWritable",
      "info" : "SingleVariableDeclaration[42933-42958]:SingleVariableDeclaration[43324-43349]"
    }, {
      "left" : "OrcStruct orcStruct",
      "right" : "OrcStruct orcStruct",
      "info" : "SingleVariableDeclaration[42984-43003]:SingleVariableDeclaration[43375-43394]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[43012-43023]:SimpleType[43403-43414]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43024-43071]:Block[43415-43462]"
    }, {
      "left" : "return inner.next(id, orcStruct);",
      "right" : "return inner.next(id, orcStruct);",
      "info" : "ReturnStatement[43032-43065]:ReturnStatement[43423-43456]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[43077-43086]:MarkerAnnotation[43468-43477]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[43091-43097]:Modifier[43482-43488]"
    }, {
      "left" : "NullWritable",
      "right" : "NullWritable",
      "info" : "SimpleType[43098-43110]:SimpleType[43489-43501]"
    }, {
      "left" : "createKey",
      "right" : "createKey",
      "info" : "SimpleName[43111-43120]:SimpleName[43502-43511]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43123-43163]:Block[43514-43554]"
    }, {
      "left" : "return NullWritable.get();",
      "right" : "return NullWritable.get();",
      "info" : "ReturnStatement[43131-43157]:ReturnStatement[43522-43548]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[43169-43178]:MarkerAnnotation[43560-43569]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[43183-43189]:Modifier[43574-43580]"
    }, {
      "left" : "OrcStruct",
      "right" : "OrcStruct",
      "info" : "SimpleType[43190-43199]:SimpleType[43581-43590]"
    }, {
      "left" : "createValue",
      "right" : "createValue",
      "info" : "SimpleName[43200-43211]:SimpleName[43591-43602]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43214-43255]:Block[43605-43646]"
    }, {
      "left" : "return inner.createValue();",
      "right" : "return inner.createValue();",
      "info" : "ReturnStatement[43222-43249]:ReturnStatement[43613-43640]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[43261-43270]:MarkerAnnotation[43652-43661]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[43275-43281]:Modifier[43666-43672]"
    }, {
      "left" : "long",
      "right" : "long",
      "info" : "PrimitiveType[43282-43286]:PrimitiveType[43673-43677]"
    }, {
      "left" : "getPos",
      "right" : "getPos",
      "info" : "SimpleName[43287-43293]:SimpleName[43678-43684]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[43303-43314]:SimpleType[43694-43705]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43315-43351]:Block[43706-43742]"
    }, {
      "left" : "return inner.getPos();",
      "right" : "return inner.getPos();",
      "info" : "ReturnStatement[43323-43345]:ReturnStatement[43714-43736]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[43357-43366]:MarkerAnnotation[43748-43757]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[43371-43377]:Modifier[43762-43768]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[43378-43382]:PrimitiveType[43769-43773]"
    }, {
      "left" : "close",
      "right" : "close",
      "info" : "SimpleName[43383-43388]:SimpleName[43774-43779]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[43398-43409]:SimpleType[43789-43800]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43410-43438]:Block[43801-43829]"
    }, {
      "left" : "inner.close();",
      "right" : "inner.close();",
      "info" : "ExpressionStatement[43418-43432]:ExpressionStatement[43809-43823]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[43444-43453]:MarkerAnnotation[43835-43844]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[43458-43464]:Modifier[43849-43855]"
    }, {
      "left" : "float",
      "right" : "float",
      "info" : "PrimitiveType[43465-43470]:PrimitiveType[43856-43861]"
    }, {
      "left" : "getProgress",
      "right" : "getProgress",
      "info" : "SimpleName[43471-43482]:SimpleName[43862-43873]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[43492-43503]:SimpleType[43883-43894]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43504-43545]:Block[43895-43936]"
    }, {
      "left" : "return inner.getProgress();",
      "right" : "return inner.getProgress();",
      "info" : "ReturnStatement[43512-43539]:ReturnStatement[43903-43930]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[43554-43563]:MarkerAnnotation[43945-43954]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[43566-43572]:Modifier[43957-43963]"
    }, {
      "left" : "RowReader<OrcStruct>",
      "right" : "RowReader<OrcStruct>",
      "info" : "ParameterizedType[43573-43593]:ParameterizedType[43964-43984]"
    }, {
      "left" : "getReader",
      "right" : "getReader",
      "info" : "SimpleName[43594-43603]:SimpleName[43985-43994]"
    }, {
      "left" : "InputSplit inputSplit",
      "right" : "InputSplit inputSplit",
      "info" : "SingleVariableDeclaration[43604-43625]:SingleVariableDeclaration[43995-44016]"
    }, {
      "left" : "Options options",
      "right" : "Options options",
      "info" : "SingleVariableDeclaration[43667-43682]:SingleVariableDeclaration[44058-44073]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[43691-43702]:SimpleType[44082-44093]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43703-46650]:Block[44094-47041]"
    }, {
      "left" : "final OrcSplit split = (OrcSplit) inputSplit;",
      "right" : "final OrcSplit split = (OrcSplit) inputSplit;",
      "info" : "VariableDeclarationStatement[43709-43754]:VariableDeclarationStatement[44100-44145]"
    }, {
      "left" : "final Path path = split.getPath();",
      "right" : "final Path path = split.getPath();",
      "info" : "VariableDeclarationStatement[43759-43793]:VariableDeclarationStatement[44150-44184]"
    }, {
      "left" : "Path root;",
      "right" : "Path root;",
      "info" : "VariableDeclarationStatement[43798-43808]:VariableDeclarationStatement[44189-44199]"
    }, {
      "left" : "if (split.hasBase())",
      "right" : "if (split.hasBase())",
      "info" : "IfStatement[43813-44006]:IfStatement[44204-44397]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43834-43974]:Block[44225-44365]"
    }, {
      "left" : "if (split.isOriginal())",
      "right" : "if (split.isOriginal())",
      "info" : "IfStatement[43842-43968]:IfStatement[44233-44359]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43866-43908]:Block[44257-44299]"
    }, {
      "left" : "root = path.getParent();",
      "right" : "root = path.getParent();",
      "info" : "ExpressionStatement[43876-43900]:ExpressionStatement[44267-44291]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43914-43968]:Block[44305-44359]"
    }, {
      "left" : "root = path.getParent().getParent();",
      "right" : "root = path.getParent().getParent();",
      "info" : "ExpressionStatement[43924-43960]:ExpressionStatement[44315-44351]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43980-44006]:Block[44371-44397]"
    }, {
      "left" : "root = path;",
      "right" : "root = path;",
      "info" : "ExpressionStatement[43988-44000]:ExpressionStatement[44379-44391]"
    }, {
      "left" : "final Path[] deltas = AcidUtils.deserializeDeltas(root, split.getDeltas());",
      "right" : "final Path[] deltas = AcidUtils.deserializeDeltas(root, split.getDeltas());",
      "info" : "VariableDeclarationStatement[44011-44086]:VariableDeclarationStatement[44402-44477]"
    }, {
      "left" : "final Configuration conf = options.getConfiguration();",
      "right" : "final Configuration conf = options.getConfiguration();",
      "info" : "VariableDeclarationStatement[44091-44145]:VariableDeclarationStatement[44482-44536]"
    }, {
      "left" : "final Reader reader;",
      "right" : "final Reader reader;",
      "info" : "VariableDeclarationStatement[44150-44170]:VariableDeclarationStatement[44541-44561]"
    }, {
      "left" : "final int bucket;",
      "right" : "final int bucket;",
      "info" : "VariableDeclarationStatement[44175-44192]:VariableDeclarationStatement[44566-44583]"
    }, {
      "left" : "Reader.Options readOptions = new Reader.Options();",
      "right" : "Reader.Options readOptions = new Reader.Options();",
      "info" : "VariableDeclarationStatement[44197-44247]:VariableDeclarationStatement[44588-44638]"
    }, {
      "left" : "readOptions.range(split.getStart(), split.getLength());",
      "right" : "readOptions.range(split.getStart(), split.getLength());",
      "info" : "ExpressionStatement[44252-44307]:ExpressionStatement[44643-44698]"
    }, {
      "left" : "if (split.hasBase())",
      "right" : "if (split.hasBase())",
      "info" : "IfStatement[44312-44791]:IfStatement[44703-45182]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44333-44718]:Block[44724-45109]"
    }, {
      "left" : "bucket = AcidUtils.parseBaseBucketFilename(split.getPath(), conf)\n          .getBucket();",
      "right" : "bucket = AcidUtils.parseBaseBucketFilename(split.getPath(), conf)\n          .getBucket();",
      "info" : "ExpressionStatement[44341-44430]:ExpressionStatement[44732-44821]"
    }, {
      "left" : "reader = OrcFile.createReader(path, OrcFile.readerOptions(conf));",
      "right" : "reader = OrcFile.createReader(path, OrcFile.readerOptions(conf));",
      "info" : "ExpressionStatement[44437-44502]:ExpressionStatement[44828-44893]"
    }, {
      "left" : "final List<OrcProto.Type> types = reader.getTypes();",
      "right" : "final List<OrcProto.Type> types = reader.getTypes();",
      "info" : "VariableDeclarationStatement[44509-44561]:VariableDeclarationStatement[44900-44952]"
    }, {
      "left" : "readOptions.include(genIncludedColumns(types, conf, split.isOriginal()));",
      "right" : "readOptions.include(genIncludedColumns(types, conf, split.isOriginal()));",
      "info" : "ExpressionStatement[44568-44641]:ExpressionStatement[44959-45032]"
    }, {
      "left" : "setSearchArgument(readOptions, types, conf, split.isOriginal());",
      "right" : "setSearchArgument(readOptions, types, conf, split.isOriginal());",
      "info" : "ExpressionStatement[44648-44712]:ExpressionStatement[45039-45103]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44724-44791]:Block[45115-45182]"
    }, {
      "left" : "bucket = (int) split.getStart();",
      "right" : "bucket = (int) split.getStart();",
      "info" : "ExpressionStatement[44732-44764]:ExpressionStatement[45123-45155]"
    }, {
      "left" : "reader = null;",
      "right" : "reader = null;",
      "info" : "ExpressionStatement[44771-44785]:ExpressionStatement[45162-45176]"
    }, {
      "left" : "String txnString = conf.get(ValidTxnList.VALID_TXNS_KEY,\n                                Long.MAX_VALUE + \":\");",
      "right" : "String txnString = conf.get(ValidTxnList.VALID_TXNS_KEY,\n                                Long.MAX_VALUE + \":\");",
      "info" : "VariableDeclarationStatement[44796-44907]:VariableDeclarationStatement[45187-45298]"
    }, {
      "left" : "ValidTxnList validTxnList = new ValidReadTxnList(txnString);",
      "right" : "ValidTxnList validTxnList = new ValidReadTxnList(txnString);",
      "info" : "VariableDeclarationStatement[44912-44972]:VariableDeclarationStatement[45303-45363]"
    }, {
      "left" : "final OrcRawRecordMerger records =\n        new OrcRawRecordMerger(conf, true, reader, split.isOriginal(), bucket,\n            validTxnList, readOptions, deltas);",
      "right" : "final OrcRawRecordMerger records =\n        new OrcRawRecordMerger(conf, true, reader, split.isOriginal(), bucket,\n            validTxnList, readOptions, deltas);",
      "info" : "VariableDeclarationStatement[44977-45138]:VariableDeclarationStatement[45368-45529]"
    }, {
      "left" : "return new RowReader<OrcStruct>() {\n      OrcStruct innerRecord = records.createValue();\n\n      @Override\n      public ObjectInspector getObjectInspector() {\n        return ((StructObjectInspector) records.getObjectInspector())\n            .getAllStructFieldRefs().get(OrcRecordUpdater.ROW)\n            .getFieldObjectInspector();\n      }\n\n      @Override\n      public boolean next(RecordIdentifier recordIdentifier,\n                          OrcStruct orcStruct) throws IOException {\n        boolean result;\n        // filter out the deleted records\n        do {\n          result = records.next(recordIdentifier, innerRecord);\n        } while (result &&\n            OrcRecordUpdater.getOperation(innerRecord) ==\n                OrcRecordUpdater.DELETE_OPERATION);\n        if (result) {\n          // swap the fields with the passed in orcStruct\n          orcStruct.linkFields(OrcRecordUpdater.getRow(innerRecord));\n        }\n        return result;\n      }\n\n      @Override\n      public RecordIdentifier createKey() {\n        return records.createKey();\n      }\n\n      @Override\n      public OrcStruct createValue() {\n        return new OrcStruct(records.getColumns());\n      }\n\n      @Override\n      public long getPos() throws IOException {\n        return records.getPos();\n      }\n\n      @Override\n      public void close() throws IOException {\n        records.close();\n      }\n\n      @Override\n      public float getProgress() throws IOException {\n        return records.getProgress();\n      }\n    };",
      "right" : "return new RowReader<OrcStruct>() {\n      OrcStruct innerRecord = records.createValue();\n\n      @Override\n      public ObjectInspector getObjectInspector() {\n        return ((StructObjectInspector) records.getObjectInspector())\n            .getAllStructFieldRefs().get(OrcRecordUpdater.ROW)\n            .getFieldObjectInspector();\n      }\n\n      @Override\n      public boolean next(RecordIdentifier recordIdentifier,\n                          OrcStruct orcStruct) throws IOException {\n        boolean result;\n        // filter out the deleted records\n        do {\n          result = records.next(recordIdentifier, innerRecord);\n        } while (result &&\n            OrcRecordUpdater.getOperation(innerRecord) ==\n                OrcRecordUpdater.DELETE_OPERATION);\n        if (result) {\n          // swap the fields with the passed in orcStruct\n          orcStruct.linkFields(OrcRecordUpdater.getRow(innerRecord));\n        }\n        return result;\n      }\n\n      @Override\n      public RecordIdentifier createKey() {\n        return records.createKey();\n      }\n\n      @Override\n      public OrcStruct createValue() {\n        return new OrcStruct(records.getColumns());\n      }\n\n      @Override\n      public long getPos() throws IOException {\n        return records.getPos();\n      }\n\n      @Override\n      public void close() throws IOException {\n        records.close();\n      }\n\n      @Override\n      public float getProgress() throws IOException {\n        return records.getProgress();\n      }\n    };",
      "info" : "ReturnStatement[45143-46646]:ReturnStatement[45534-47037]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[45239-45248]:MarkerAnnotation[45630-45639]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[45255-45261]:Modifier[45646-45652]"
    }, {
      "left" : "ObjectInspector",
      "right" : "ObjectInspector",
      "info" : "SimpleType[45262-45277]:SimpleType[45653-45668]"
    }, {
      "left" : "getObjectInspector",
      "right" : "getObjectInspector",
      "info" : "SimpleName[45278-45296]:SimpleName[45669-45687]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45299-45481]:Block[45690-45872]"
    }, {
      "left" : "return ((StructObjectInspector) records.getObjectInspector())\n            .getAllStructFieldRefs().get(OrcRecordUpdater.ROW)\n            .getFieldObjectInspector();",
      "right" : "return ((StructObjectInspector) records.getObjectInspector())\n            .getAllStructFieldRefs().get(OrcRecordUpdater.ROW)\n            .getFieldObjectInspector();",
      "info" : "ReturnStatement[45309-45473]:ReturnStatement[45700-45864]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[45489-45498]:MarkerAnnotation[45880-45889]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[45505-45511]:Modifier[45896-45902]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[45512-45519]:PrimitiveType[45903-45910]"
    }, {
      "left" : "next",
      "right" : "next",
      "info" : "SimpleName[45520-45524]:SimpleName[45911-45915]"
    }, {
      "left" : "RecordIdentifier recordIdentifier",
      "right" : "RecordIdentifier recordIdentifier",
      "info" : "SingleVariableDeclaration[45525-45558]:SingleVariableDeclaration[45916-45949]"
    }, {
      "left" : "OrcStruct orcStruct",
      "right" : "OrcStruct orcStruct",
      "info" : "SingleVariableDeclaration[45586-45605]:SingleVariableDeclaration[45977-45996]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[45614-45625]:SimpleType[46005-46016]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45626-46098]:Block[46017-46489]"
    }, {
      "left" : "boolean result;",
      "right" : "boolean result;",
      "info" : "VariableDeclarationStatement[45636-45651]:VariableDeclarationStatement[46027-46042]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[45702-45907]:DoStatement[46093-46298]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45705-45780]:Block[46096-46171]"
    }, {
      "left" : "result = records.next(recordIdentifier, innerRecord);",
      "right" : "result = records.next(recordIdentifier, innerRecord);",
      "info" : "ExpressionStatement[45717-45770]:ExpressionStatement[46108-46161]"
    }, {
      "left" : "if (result)",
      "right" : "if (result)",
      "info" : "IfStatement[45916-46067]:IfStatement[46307-46458]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45928-46067]:Block[46319-46458]"
    }, {
      "left" : "orcStruct.linkFields(OrcRecordUpdater.getRow(innerRecord));",
      "right" : "orcStruct.linkFields(OrcRecordUpdater.getRow(innerRecord));",
      "info" : "ExpressionStatement[45998-46057]:ExpressionStatement[46389-46448]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[46076-46090]:ReturnStatement[46467-46481]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[46106-46115]:MarkerAnnotation[46497-46506]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[46122-46128]:Modifier[46513-46519]"
    }, {
      "left" : "RecordIdentifier",
      "right" : "RecordIdentifier",
      "info" : "SimpleType[46129-46145]:SimpleType[46520-46536]"
    }, {
      "left" : "createKey",
      "right" : "createKey",
      "info" : "SimpleName[46146-46155]:SimpleName[46537-46546]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46158-46203]:Block[46549-46594]"
    }, {
      "left" : "return records.createKey();",
      "right" : "return records.createKey();",
      "info" : "ReturnStatement[46168-46195]:ReturnStatement[46559-46586]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[46211-46220]:MarkerAnnotation[46602-46611]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[46227-46233]:Modifier[46618-46624]"
    }, {
      "left" : "OrcStruct",
      "right" : "OrcStruct",
      "info" : "SimpleType[46234-46243]:SimpleType[46625-46634]"
    }, {
      "left" : "createValue",
      "right" : "createValue",
      "info" : "SimpleName[46244-46255]:SimpleName[46635-46646]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46258-46319]:Block[46649-46710]"
    }, {
      "left" : "return new OrcStruct(records.getColumns());",
      "right" : "return new OrcStruct(records.getColumns());",
      "info" : "ReturnStatement[46268-46311]:ReturnStatement[46659-46702]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[46327-46336]:MarkerAnnotation[46718-46727]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[46343-46349]:Modifier[46734-46740]"
    }, {
      "left" : "long",
      "right" : "long",
      "info" : "PrimitiveType[46350-46354]:PrimitiveType[46741-46745]"
    }, {
      "left" : "getPos",
      "right" : "getPos",
      "info" : "SimpleName[46355-46361]:SimpleName[46746-46752]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[46371-46382]:SimpleType[46762-46773]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46383-46425]:Block[46774-46816]"
    }, {
      "left" : "return records.getPos();",
      "right" : "return records.getPos();",
      "info" : "ReturnStatement[46393-46417]:ReturnStatement[46784-46808]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[46433-46442]:MarkerAnnotation[46824-46833]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[46449-46455]:Modifier[46840-46846]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[46456-46460]:PrimitiveType[46847-46851]"
    }, {
      "left" : "close",
      "right" : "close",
      "info" : "SimpleName[46461-46466]:SimpleName[46852-46857]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[46476-46487]:SimpleType[46867-46878]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46488-46522]:Block[46879-46913]"
    }, {
      "left" : "records.close();",
      "right" : "records.close();",
      "info" : "ExpressionStatement[46498-46514]:ExpressionStatement[46889-46905]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[46530-46539]:MarkerAnnotation[46921-46930]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[46546-46552]:Modifier[46937-46943]"
    }, {
      "left" : "float",
      "right" : "float",
      "info" : "PrimitiveType[46553-46558]:PrimitiveType[46944-46949]"
    }, {
      "left" : "getProgress",
      "right" : "getProgress",
      "info" : "SimpleName[46559-46570]:SimpleName[46950-46961]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[46580-46591]:SimpleType[46971-46982]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46592-46639]:Block[46983-47030]"
    }, {
      "left" : "return records.getProgress();",
      "right" : "return records.getProgress();",
      "info" : "ReturnStatement[46602-46631]:ReturnStatement[46993-47022]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[46654-46660]:Modifier[47045-47051]"
    }, {
      "left" : "Path",
      "right" : "Path",
      "info" : "SimpleType[46661-46665]:SimpleType[47052-47056]"
    }, {
      "left" : "findOriginalBucket",
      "right" : "findOriginalBucket",
      "info" : "SimpleName[46666-46684]:SimpleName[47057-47075]"
    }, {
      "left" : "FileSystem fs",
      "right" : "FileSystem fs",
      "info" : "SingleVariableDeclaration[46685-46698]:SingleVariableDeclaration[47076-47089]"
    }, {
      "left" : "Path directory",
      "right" : "Path directory",
      "info" : "SingleVariableDeclaration[46733-46747]:SingleVariableDeclaration[47124-47138]"
    }, {
      "left" : "int bucket",
      "right" : "int bucket",
      "info" : "SingleVariableDeclaration[46782-46792]:SingleVariableDeclaration[47173-47183]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[46801-46812]:SimpleType[47192-47203]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46813-47250]:Block[47204-47641]"
    }, {
      "left" : "for(FileStatus stat: fs.listStatus(directory))",
      "right" : "for(FileStatus stat: fs.listStatus(directory))",
      "info" : "EnhancedForStatement[46819-47146]:EnhancedForStatement[47210-47537]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46866-47146]:Block[47257-47537]"
    }, {
      "left" : "String name = stat.getPath().getName();",
      "right" : "String name = stat.getPath().getName();",
      "info" : "VariableDeclarationStatement[46874-46913]:VariableDeclarationStatement[47265-47304]"
    }, {
      "left" : "String numberPart = name.substring(0, name.indexOf('_'));",
      "right" : "String numberPart = name.substring(0, name.indexOf('_'));",
      "info" : "VariableDeclarationStatement[46920-46977]:VariableDeclarationStatement[47311-47368]"
    }, {
      "left" : "if (org.apache.commons.lang3.StringUtils.isNumeric(numberPart) &&\n          Integer.parseInt(numberPart) == bucket)",
      "right" : "if (org.apache.commons.lang3.StringUtils.isNumeric(numberPart) &&\n          Integer.parseInt(numberPart) == bucket)",
      "info" : "IfStatement[46984-47140]:IfStatement[47375-47531]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47100-47140]:Block[47491-47531]"
    }, {
      "left" : "return stat.getPath();",
      "right" : "return stat.getPath();",
      "info" : "ReturnStatement[47110-47132]:ReturnStatement[47501-47523]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Can't find bucket \" + bucket + \" in \" +\n        directory);",
      "right" : "throw new IllegalArgumentException(\"Can't find bucket \" + bucket + \" in \" +\n        directory);",
      "info" : "ThrowStatement[47151-47246]:ThrowStatement[47542-47637]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[47254-47263]:MarkerAnnotation[47645-47654]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[47266-47272]:Modifier[47657-47663]"
    }, {
      "left" : "RawReader<OrcStruct>",
      "right" : "RawReader<OrcStruct>",
      "info" : "ParameterizedType[47273-47293]:ParameterizedType[47664-47684]"
    }, {
      "left" : "getRawReader",
      "right" : "getRawReader",
      "info" : "SimpleName[47294-47306]:SimpleName[47685-47697]"
    }, {
      "left" : "Configuration conf",
      "right" : "Configuration conf",
      "info" : "SingleVariableDeclaration[47307-47325]:SingleVariableDeclaration[47698-47716]"
    }, {
      "left" : "boolean collapseEvents",
      "right" : "boolean collapseEvents",
      "info" : "SingleVariableDeclaration[47370-47392]:SingleVariableDeclaration[47761-47783]"
    }, {
      "left" : "int bucket",
      "right" : "int bucket",
      "info" : "SingleVariableDeclaration[47437-47447]:SingleVariableDeclaration[47828-47838]"
    }, {
      "left" : "ValidTxnList validTxnList",
      "right" : "ValidTxnList validTxnList",
      "info" : "SingleVariableDeclaration[47492-47517]:SingleVariableDeclaration[47883-47908]"
    }, {
      "left" : "Path baseDirectory",
      "right" : "Path baseDirectory",
      "info" : "SingleVariableDeclaration[47562-47580]:SingleVariableDeclaration[47953-47971]"
    }, {
      "left" : "Path[] deltaDirectory",
      "right" : "Path[] deltaDirectory",
      "info" : "SingleVariableDeclaration[47625-47646]:SingleVariableDeclaration[48016-48037]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[47699-47710]:SimpleType[48090-48101]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47711-48363]:Block[48102-48754]"
    }, {
      "left" : "Reader reader = null;",
      "right" : "Reader reader = null;",
      "info" : "VariableDeclarationStatement[47717-47738]:VariableDeclarationStatement[48108-48129]"
    }, {
      "left" : "boolean isOriginal = false;",
      "right" : "boolean isOriginal = false;",
      "info" : "VariableDeclarationStatement[47743-47770]:VariableDeclarationStatement[48134-48161]"
    }, {
      "left" : "if (baseDirectory != null)",
      "right" : "if (baseDirectory != null)",
      "info" : "IfStatement[47775-48214]:IfStatement[48166-48605]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47802-48214]:Block[48193-48605]"
    }, {
      "left" : "Path bucketFile;",
      "right" : "Path bucketFile;",
      "info" : "VariableDeclarationStatement[47810-47826]:VariableDeclarationStatement[48201-48217]"
    }, {
      "left" : "if (baseDirectory.getName().startsWith(AcidUtils.BASE_PREFIX))",
      "right" : "if (baseDirectory.getName().startsWith(AcidUtils.BASE_PREFIX))",
      "info" : "IfStatement[47833-48130]:IfStatement[48224-48521]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47896-47977]:Block[48287-48368]"
    }, {
      "left" : "bucketFile = AcidUtils.createBucketFile(baseDirectory, bucket);",
      "right" : "bucketFile = AcidUtils.createBucketFile(baseDirectory, bucket);",
      "info" : "ExpressionStatement[47906-47969]:ExpressionStatement[48297-48360]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47983-48130]:Block[48374-48521]"
    }, {
      "left" : "isOriginal = true;",
      "right" : "isOriginal = true;",
      "info" : "ExpressionStatement[47993-48011]:ExpressionStatement[48384-48402]"
    }, {
      "left" : "bucketFile = findOriginalBucket(baseDirectory.getFileSystem(conf),\n            baseDirectory, bucket);",
      "right" : "bucketFile = findOriginalBucket(baseDirectory.getFileSystem(conf),\n            baseDirectory, bucket);",
      "info" : "ExpressionStatement[48020-48122]:ExpressionStatement[48411-48513]"
    }, {
      "left" : "reader = OrcFile.createReader(bucketFile, OrcFile.readerOptions(conf));",
      "right" : "reader = OrcFile.createReader(bucketFile, OrcFile.readerOptions(conf));",
      "info" : "ExpressionStatement[48137-48208]:ExpressionStatement[48528-48599]"
    }, {
      "left" : "return new OrcRawRecordMerger(conf, collapseEvents, reader, isOriginal,\n        bucket, validTxnList, new Reader.Options(), deltaDirectory);",
      "right" : "return new OrcRawRecordMerger(conf, collapseEvents, reader, isOriginal,\n        bucket, validTxnList, new Reader.Options(), deltaDirectory);",
      "info" : "ReturnStatement[48219-48359]:ReturnStatement[48610-48750]"
    } ]
  },
  "interFileMappings" : { }
}