{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "NameAnalyzer",
      "right" : "NameAnalyzer",
      "info" : "TypeDeclaration[1940-59196]:TypeDeclaration[1940-59153]"
    }, {
      "left" : "private final AbstractCompiler compiler;",
      "right" : "private final AbstractCompiler compiler;",
      "info" : "FieldDeclaration[3572-3650]:FieldDeclaration[3572-3650]"
    }, {
      "left" : "private final Map<String, JsName> allNames = Maps.newTreeMap();",
      "right" : "private final Map<String, JsName> allNames = Maps.newTreeMap();",
      "info" : "FieldDeclaration[3654-3752]:FieldDeclaration[3654-3752]"
    }, {
      "left" : "private DiGraph<JsName, RefType> referenceGraph =\n      LinkedDirectedGraph.createWithoutAnnotations();",
      "right" : "private DiGraph<JsName, RefType> referenceGraph =\n      LinkedDirectedGraph.createWithoutAnnotations();",
      "info" : "FieldDeclaration[3756-3895]:FieldDeclaration[3756-3895]"
    }, {
      "left" : "private final Map<Node, NameInformation> scopes = Maps.newHashMap();",
      "right" : "private final Map<Node, NameInformation> scopes = Maps.newHashMap();",
      "info" : "FieldDeclaration[3899-4232]:FieldDeclaration[3899-4232]"
    }, {
      "left" : "private static final String PROTOTYPE_SUBSTRING = \".prototype.\";",
      "right" : "private static final String PROTOTYPE_SUBSTRING = \".prototype.\";",
      "info" : "FieldDeclaration[4236-4339]:FieldDeclaration[4236-4339]"
    }, {
      "left" : "private static final int PROTOTYPE_SUBSTRING_LEN =\n      PROTOTYPE_SUBSTRING.length();",
      "right" : "private static final int PROTOTYPE_SUBSTRING_LEN =\n      PROTOTYPE_SUBSTRING.length();",
      "info" : "FieldDeclaration[4343-4429]:FieldDeclaration[4343-4429]"
    }, {
      "left" : "private static final int PROTOTYPE_SUFFIX_LEN = \".prototype\".length();",
      "right" : "private static final int PROTOTYPE_SUFFIX_LEN = \".prototype\".length();",
      "info" : "FieldDeclaration[4433-4503]:FieldDeclaration[4433-4503]"
    }, {
      "left" : "private static final String WINDOW = \"window\";",
      "right" : "private static final String WINDOW = \"window\";",
      "info" : "FieldDeclaration[4507-4574]:FieldDeclaration[4507-4574]"
    }, {
      "left" : "private static final String FUNCTION = \"Function\";",
      "right" : "private static final String FUNCTION = \"Function\";",
      "info" : "FieldDeclaration[4578-4657]:FieldDeclaration[4578-4657]"
    }, {
      "left" : "static final Set<String> DEFAULT_GLOBAL_NAMES = ImmutableSet.of(\n      \"window\", \"goog.global\");",
      "right" : "static final Set<String> DEFAULT_GLOBAL_NAMES = ImmutableSet.of(\n      \"window\", \"goog.global\");",
      "info" : "FieldDeclaration[4661-4831]:FieldDeclaration[4661-4831]"
    }, {
      "left" : "private final boolean removeUnreferenced;",
      "right" : "private final boolean removeUnreferenced;",
      "info" : "FieldDeclaration[4835-4939]:FieldDeclaration[4835-4939]"
    }, {
      "left" : "private final Set<String> globalNames;",
      "right" : "private final Set<String> globalNames;",
      "info" : "FieldDeclaration[4943-5027]:FieldDeclaration[4943-5027]"
    }, {
      "left" : "private final AstChangeProxy changeProxy;",
      "right" : "private final AstChangeProxy changeProxy;",
      "info" : "FieldDeclaration[5031-5099]:FieldDeclaration[5031-5099]"
    }, {
      "left" : "private final Set<String> externalNames = Sets.newHashSet();",
      "right" : "private final Set<String> externalNames = Sets.newHashSet();",
      "info" : "FieldDeclaration[5103-5206]:FieldDeclaration[5103-5206]"
    }, {
      "left" : "private final List<RefNode> refNodes = Lists.newArrayList();",
      "right" : "private final List<RefNode> refNodes = Lists.newArrayList();",
      "info" : "FieldDeclaration[5210-5343]:FieldDeclaration[5210-5343]"
    }, {
      "left" : "private final Map<String, AliasSet> aliases = Maps.newHashMap();",
      "right" : "private final Map<String, AliasSet> aliases = Maps.newHashMap();",
      "info" : "FieldDeclaration[5347-5572]:FieldDeclaration[5347-5572]"
    }, {
      "left" : "AliasSet",
      "right" : "AliasSet",
      "info" : "TypeDeclaration[5576-6145]:TypeDeclaration[5576-6145]"
    }, {
      "left" : "Set<String> names = Sets.newHashSet();",
      "right" : "Set<String> names = Sets.newHashSet();",
      "info" : "FieldDeclaration[5953-5991]:FieldDeclaration[5953-5991]"
    }, {
      "left" : "AliasSet(String name1, String name2)",
      "right" : "AliasSet(String name1, String name2)",
      "info" : "MethodDeclaration[6049-6141]:MethodDeclaration[6049-6141]"
    }, {
      "left" : "enum : RefType",
      "right" : "enum : RefType",
      "info" : "EnumDeclaration[6149-6384]:EnumDeclaration[6149-6384]"
    }, {
      "left" : "ReferencePropagationCallback",
      "right" : "ReferencePropagationCallback",
      "info" : "TypeDeclaration[6388-6858]:TypeDeclaration[6388-6858]"
    }, {
      "left" : "public boolean traverseEdge(JsName from,\n                                RefType callSite,\n                                JsName to)",
      "right" : "public boolean traverseEdge(JsName from,\n                                RefType callSite,\n                                JsName to)",
      "info" : "MethodDeclaration[6556-6854]:MethodDeclaration[6556-6854]"
    }, {
      "left" : "NameInformation",
      "right" : "NameInformation",
      "info" : "TypeDeclaration[6862-7686]:TypeDeclaration[6862-7686]"
    }, {
      "left" : "String name;",
      "right" : "String name;",
      "info" : "FieldDeclaration[7012-7056]:FieldDeclaration[7012-7056]"
    }, {
      "left" : "boolean isExternallyReferenceable = false;",
      "right" : "boolean isExternallyReferenceable = false;",
      "info" : "FieldDeclaration[7062-7177]:FieldDeclaration[7062-7177]"
    }, {
      "left" : "boolean isPrototype = false;",
      "right" : "boolean isPrototype = false;",
      "info" : "FieldDeclaration[7183-7264]:FieldDeclaration[7183-7264]"
    }, {
      "left" : "String prototypeClass = null;",
      "right" : "String prototypeClass = null;",
      "info" : "FieldDeclaration[7270-7375]:FieldDeclaration[7270-7375]"
    }, {
      "left" : "String prototypeProperty = null;",
      "right" : "String prototypeProperty = null;",
      "info" : "FieldDeclaration[7381-7493]:FieldDeclaration[7381-7493]"
    }, {
      "left" : "String superclass = null;",
      "right" : "String superclass = null;",
      "info" : "FieldDeclaration[7499-7567]:FieldDeclaration[7499-7567]"
    }, {
      "left" : "boolean onlyAffectsClassDef = false;",
      "right" : "boolean onlyAffectsClassDef = false;",
      "info" : "FieldDeclaration[7573-7682]:FieldDeclaration[7573-7682]"
    }, {
      "left" : "JsName",
      "right" : "JsName",
      "info" : "TypeDeclaration[7690-9060]:TypeDeclaration[7690-9060]"
    }, {
      "left" : "String name;",
      "right" : "String name;",
      "info" : "FieldDeclaration[7830-7874]:FieldDeclaration[7830-7874]"
    }, {
      "left" : "List<String> prototypeNames = Lists.newArrayList();",
      "right" : "List<String> prototypeNames = Lists.newArrayList();",
      "info" : "FieldDeclaration[7880-7992]:FieldDeclaration[7880-7992]"
    }, {
      "left" : "boolean externallyDefined = false;",
      "right" : "boolean externallyDefined = false;",
      "info" : "FieldDeclaration[7998-8086]:FieldDeclaration[7998-8086]"
    }, {
      "left" : "boolean referenced = false;",
      "right" : "boolean referenced = false;",
      "info" : "FieldDeclaration[8092-8162]:FieldDeclaration[8092-8162]"
    }, {
      "left" : "boolean hasWrittenDescendants = false;",
      "right" : "boolean hasWrittenDescendants = false;",
      "info" : "FieldDeclaration[8168-8271]:FieldDeclaration[8168-8271]"
    }, {
      "left" : "boolean hasInstanceOfReference = false;",
      "right" : "boolean hasInstanceOfReference = false;",
      "info" : "FieldDeclaration[8277-8374]:FieldDeclaration[8277-8374]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[8380-8952]:MethodDeclaration[8380-8952]"
    }, {
      "left" : "public int compareTo(JsName rhs)",
      "right" : "public int compareTo(JsName rhs)",
      "info" : "MethodDeclaration[8958-9056]:MethodDeclaration[8958-9056]"
    }, {
      "left" : "RefNode",
      "right" : "RefNode",
      "info" : "TypeDeclaration[9064-9208]:TypeDeclaration[9064-9208]"
    }, {
      "left" : "JsName name();",
      "right" : "JsName name();",
      "info" : "MethodDeclaration[9171-9185]:MethodDeclaration[9171-9185]"
    }, {
      "left" : "void remove();",
      "right" : "void remove();",
      "info" : "MethodDeclaration[9190-9204]:MethodDeclaration[9190-9204]"
    }, {
      "left" : "JsNameRefNode",
      "right" : "JsNameRefNode",
      "info" : "TypeDeclaration[9212-11189]:TypeDeclaration[9212-11189]"
    }, {
      "left" : "JsName name;",
      "right" : "JsName name;",
      "info" : "FieldDeclaration[9470-9524]:FieldDeclaration[9470-9524]"
    }, {
      "left" : "@SuppressWarnings(\"unused\")\n    Node node;",
      "right" : "@SuppressWarnings(\"unused\")\n    Node node;",
      "info" : "FieldDeclaration[9530-9681]:FieldDeclaration[9530-9681]"
    }, {
      "left" : "Node parent;",
      "right" : "Node parent;",
      "info" : "FieldDeclaration[9687-9804]:FieldDeclaration[9687-9804]"
    }, {
      "left" : "JsNameRefNode(JsName name, Node node)",
      "right" : "JsNameRefNode(JsName name, Node node)",
      "info" : "MethodDeclaration[9811-10114]:MethodDeclaration[9811-10114]"
    }, {
      "left" : "public JsName name()",
      "right" : "public JsName name()",
      "info" : "MethodDeclaration[10120-10181]:MethodDeclaration[10120-10181]"
    }, {
      "left" : "public void remove()",
      "right" : "public void remove()",
      "info" : "MethodDeclaration[10187-11185]:MethodDeclaration[10187-11185]"
    }, {
      "left" : "PrototypeSetNode",
      "right" : "PrototypeSetNode",
      "info" : "TypeDeclaration[11194-12084]:TypeDeclaration[11194-12084]"
    }, {
      "left" : "PrototypeSetNode(JsName name, Node parent)",
      "right" : "PrototypeSetNode(JsName name, Node parent)",
      "info" : "MethodDeclaration[11328-11650]:MethodDeclaration[11328-11650]"
    }, {
      "left" : "public void remove()",
      "right" : "public void remove()",
      "info" : "MethodDeclaration[11656-12080]:MethodDeclaration[11656-12080]"
    }, {
      "left" : "SpecialReferenceNode",
      "right" : "SpecialReferenceNode",
      "info" : "TypeDeclaration[12088-12910]:TypeDeclaration[12088-12910]"
    }, {
      "left" : "JsName name;",
      "right" : "JsName name;",
      "info" : "FieldDeclaration[12214-12266]:FieldDeclaration[12214-12266]"
    }, {
      "left" : "Node node;",
      "right" : "Node node;",
      "info" : "FieldDeclaration[12272-12307]:FieldDeclaration[12272-12307]"
    }, {
      "left" : "Node parent;",
      "right" : "Node parent;",
      "info" : "FieldDeclaration[12313-12363]:FieldDeclaration[12313-12363]"
    }, {
      "left" : "Node gramps;",
      "right" : "Node gramps;",
      "info" : "FieldDeclaration[12369-12421]:FieldDeclaration[12369-12421]"
    }, {
      "left" : "SpecialReferenceNode(JsName name, Node node, Node parent,\n        Node gramps)",
      "right" : "SpecialReferenceNode(JsName name, Node node, Node parent,\n        Node gramps)",
      "info" : "MethodDeclaration[12427-12839]:MethodDeclaration[12427-12839]"
    }, {
      "left" : "public JsName name()",
      "right" : "public JsName name()",
      "info" : "MethodDeclaration[12845-12906]:MethodDeclaration[12845-12906]"
    }, {
      "left" : "ClassDefiningFunctionNode",
      "right" : "ClassDefiningFunctionNode",
      "info" : "TypeDeclaration[12916-13806]:TypeDeclaration[12916-13806]"
    }, {
      "left" : "ClassDefiningFunctionNode(JsName name, Node node, Node parent,\n        Node gramps)",
      "right" : "ClassDefiningFunctionNode(JsName name, Node node, Node parent,\n        Node gramps)",
      "info" : "MethodDeclaration[13092-13526]:MethodDeclaration[13092-13526]"
    }, {
      "left" : "public void remove()",
      "right" : "public void remove()",
      "info" : "MethodDeclaration[13532-13802]:MethodDeclaration[13532-13802]"
    }, {
      "left" : "InstanceOfCheckNode",
      "right" : "InstanceOfCheckNode",
      "info" : "TypeDeclaration[13812-14583]:TypeDeclaration[13812-14583]"
    }, {
      "left" : "InstanceOfCheckNode(JsName name, Node node, Node parent, Node gramps)",
      "right" : "InstanceOfCheckNode(JsName name, Node node, Node parent, Node gramps)",
      "info" : "MethodDeclaration[13936-14468]:MethodDeclaration[13936-14468]"
    }, {
      "left" : "public void remove()",
      "right" : "public void remove()",
      "info" : "MethodDeclaration[14474-14579]:MethodDeclaration[14474-14579]"
    }, {
      "left" : "ProcessExternals",
      "right" : "ProcessExternals",
      "info" : "TypeDeclaration[14587-15232]:TypeDeclaration[14587-15232]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[14746-15228]:MethodDeclaration[14746-15228]"
    }, {
      "left" : "FindDependencyScopes",
      "right" : "FindDependencyScopes",
      "info" : "TypeDeclaration[15236-18209]:TypeDeclaration[15236-18209]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[16303-18050]:MethodDeclaration[16303-18050]"
    }, {
      "left" : "private void recordDepScope(Node node, NameInformation name)",
      "right" : "private void recordDepScope(Node node, NameInformation name)",
      "info" : "MethodDeclaration[18056-18205]:MethodDeclaration[18056-18205]"
    }, {
      "left" : "HoistVariableAndFunctionDeclarations",
      "right" : "HoistVariableAndFunctionDeclarations",
      "info" : "TypeDeclaration[18213-19135]:TypeDeclaration[18213-19135]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[18568-19131]:MethodDeclaration[18568-19131]"
    }, {
      "left" : "FindDeclarationsAndSetters",
      "right" : "FindDeclarationsAndSetters",
      "info" : "TypeDeclaration[19139-23229]:TypeDeclaration[19139-23186]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[19553-21260]:MethodDeclaration[19553-21217]"
    }, {
      "left" : "private void recordSet(String name, Node node)",
      "right" : "private void recordSet(String name, Node node)",
      "info" : "MethodDeclaration[21266-21980]:MethodDeclaration[21223-21937]"
    }, {
      "left" : "private void recordPrototypeSet(String className, String prototypeProperty,\n        Node node)",
      "right" : "private void recordPrototypeSet(String className, String prototypeProperty,\n        Node node)",
      "info" : "MethodDeclaration[21986-22574]:MethodDeclaration[21943-22531]"
    }, {
      "left" : "private void recordWriteOnProperties(String parentName)",
      "right" : "private void recordWriteOnProperties(String parentName)",
      "info" : "MethodDeclaration[22580-23225]:MethodDeclaration[22537-23182]"
    }, {
      "left" : "private static final Predicate<Node> NON_LOCAL_RESULT_PREDICATE =\n      new Predicate<Node>() {\n        @Override\n        public boolean apply(Node input) {\n          if (input.isCall()) {\n            return false;\n          }\n          // TODO(johnlenz): handle NEW calls that record their 'this'\n          // in global scope and effectly return an alias.\n          // Other non-local references are handled by this pass.\n          return true;\n        }\n      };",
      "right" : "private static final Predicate<Node> NON_LOCAL_RESULT_PREDICATE =\n      new Predicate<Node>() {\n        @Override\n        public boolean apply(Node input) {\n          if (input.isCall()) {\n            return false;\n          }\n          // TODO(johnlenz): handle NEW calls that record their 'this'\n          // in global scope and effectly return an alias.\n          // Other non-local references are handled by this pass.\n          return true;\n        }\n      };",
      "info" : "FieldDeclaration[23233-23697]:FieldDeclaration[23190-23654]"
    }, {
      "left" : "public boolean apply(Node input)",
      "right" : "public boolean apply(Node input)",
      "info" : "MethodDeclaration[23337-23688]:MethodDeclaration[23294-23645]"
    }, {
      "left" : "FindReferences",
      "right" : "FindReferences",
      "info" : "TypeDeclaration[23701-33189]:TypeDeclaration[23658-33146]"
    }, {
      "left" : "Set<Node> nodesToKeep;",
      "right" : "Set<Node> nodesToKeep;",
      "info" : "FieldDeclaration[24121-24143]:FieldDeclaration[24078-24100]"
    }, {
      "left" : "FindReferences()",
      "right" : "FindReferences()",
      "info" : "MethodDeclaration[24148-24211]:MethodDeclaration[24105-24168]"
    }, {
      "left" : "private void addAllChildren(Node n)",
      "right" : "private void addAllChildren(Node n)",
      "info" : "MethodDeclaration[24217-24432]:MethodDeclaration[24174-24389]"
    }, {
      "left" : "private void addSimplifiedChildren(Node n)",
      "right" : "private void addSimplifiedChildren(Node n)",
      "info" : "MethodDeclaration[24438-24644]:MethodDeclaration[24395-24601]"
    }, {
      "left" : "private void addSimplifiedExpression(Node n, Node parent)",
      "right" : "private void addSimplifiedExpression(Node n, Node parent)",
      "info" : "MethodDeclaration[24650-25242]:MethodDeclaration[24607-25199]"
    }, {
      "left" : "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent)",
      "right" : "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[25248-26687]:MethodDeclaration[25205-26644]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[26693-30807]:MethodDeclaration[26650-30764]"
    }, {
      "left" : "private boolean maybeHiddenAlias(String name, Node n)",
      "right" : "private boolean maybeHiddenAlias(String name, Node n)",
      "info" : "MethodDeclaration[30813-31474]:MethodDeclaration[30770-31431]"
    }, {
      "left" : "private boolean maybeRecordAlias(\n        String name, Node parent,\n        NameInformation referring, String referringName)",
      "right" : "private boolean maybeRecordAlias(\n        String name, Node parent,\n        NameInformation referring, String referringName)",
      "info" : "MethodDeclaration[31480-31904]:MethodDeclaration[31437-31861]"
    }, {
      "left" : "NodeAccumulator",
      "right" : "NodeAccumulator",
      "info" : "TypeDeclaration[31910-33185]:TypeDeclaration[31867-33142]"
    }, {
      "left" : "public boolean classDefiningCallsHaveSideEffects()",
      "right" : "public boolean classDefiningCallsHaveSideEffects()",
      "info" : "MethodDeclaration[32112-32210]:MethodDeclaration[32069-32167]"
    }, {
      "left" : "public void keepSubTree(Node original)",
      "right" : "public void keepSubTree(Node original)",
      "info" : "MethodDeclaration[32218-32316]:MethodDeclaration[32175-32273]"
    }, {
      "left" : "public void keepSimplifiedShortCircuitExpression(Node original)",
      "right" : "public void keepSimplifiedShortCircuitExpression(Node original)",
      "info" : "MethodDeclaration[32324-32589]:MethodDeclaration[32281-32546]"
    }, {
      "left" : "public void keepSimplifiedHookExpression(Node hook,\n                                               boolean thenHasSideEffects,\n                                               boolean elseHasSideEffects)",
      "right" : "public void keepSimplifiedHookExpression(Node hook,\n                                               boolean thenHasSideEffects,\n                                               boolean elseHasSideEffects)",
      "info" : "MethodDeclaration[32597-33179]:MethodDeclaration[32554-33136]"
    }, {
      "left" : "RemoveListener",
      "right" : "RemoveListener",
      "info" : "TypeDeclaration[33193-33361]:TypeDeclaration[33150-33318]"
    }, {
      "left" : "public void nodeRemoved(Node n)",
      "right" : "public void nodeRemoved(Node n)",
      "info" : "MethodDeclaration[33269-33357]:MethodDeclaration[33226-33314]"
    }, {
      "left" : "NameAnalyzer(AbstractCompiler compiler, boolean removeUnreferenced)",
      "right" : "NameAnalyzer(AbstractCompiler compiler, boolean removeUnreferenced)",
      "info" : "MethodDeclaration[33365-34049]:MethodDeclaration[33322-34006]"
    }, {
      "left" : "public void process(Node externs, Node root)",
      "right" : "public void process(Node externs, Node root)",
      "info" : "MethodDeclaration[34053-34884]:MethodDeclaration[34010-34841]"
    }, {
      "left" : "private void recordAlias(String fromName, String toName)",
      "right" : "private void recordAlias(String fromName, String toName)",
      "info" : "MethodDeclaration[34888-36337]:MethodDeclaration[34845-36294]"
    }, {
      "left" : "private void recordReference(String fromName, String toName,\n                               RefType depType)",
      "right" : "private void recordReference(String fromName, String toName,\n                               RefType depType)",
      "info" : "MethodDeclaration[36341-36906]:MethodDeclaration[36298-36863]"
    }, {
      "left" : "void removeUnreferenced()",
      "right" : "void removeUnreferenced()",
      "info" : "MethodDeclaration[36910-37310]:MethodDeclaration[36867-37267]"
    }, {
      "left" : "String getHtmlReport()",
      "right" : "String getHtmlReport()",
      "info" : "MethodDeclaration[37314-40022]:MethodDeclaration[37271-39979]"
    }, {
      "left" : "private void appendListItem(StringBuilder sb, String text)",
      "right" : "private void appendListItem(StringBuilder sb, String text)",
      "info" : "MethodDeclaration[40026-40132]:MethodDeclaration[39983-40089]"
    }, {
      "left" : "private String nameLink(String name)",
      "right" : "private String nameLink(String name)",
      "info" : "MethodDeclaration[40136-40235]:MethodDeclaration[40093-40192]"
    }, {
      "left" : "private String nameAnchor(String name)",
      "right" : "private String nameAnchor(String name)",
      "info" : "MethodDeclaration[40239-40339]:MethodDeclaration[40196-40296]"
    }, {
      "left" : "private JsName getName(String name, boolean canCreate)",
      "right" : "private JsName getName(String name, boolean canCreate)",
      "info" : "MethodDeclaration[40343-40803]:MethodDeclaration[40300-40760]"
    }, {
      "left" : "private void createName(String name)",
      "right" : "private void createName(String name)",
      "info" : "MethodDeclaration[40807-41135]:MethodDeclaration[40764-41092]"
    }, {
      "left" : "private void referenceAliases()",
      "right" : "private void referenceAliases()",
      "info" : "MethodDeclaration[41139-42535]:MethodDeclaration[41096-42492]"
    }, {
      "left" : "private void referenceParentNames()",
      "right" : "private void referenceParentNames()",
      "info" : "MethodDeclaration[42539-43489]:MethodDeclaration[42496-43446]"
    }, {
      "left" : "private NameInformation createNameInformation(NodeTraversal t, Node n,\n      Node parent)",
      "right" : "private NameInformation createNameInformation(NodeTraversal t, Node n,\n      Node parent)",
      "info" : "MethodDeclaration[43493-47496]:MethodDeclaration[43450-47453]"
    }, {
      "left" : "private NameInformation createNameInformation(\n      String name, Scope scope, Node rootNameNode)",
      "right" : "private NameInformation createNameInformation(\n      String name, Scope scope, Node rootNameNode)",
      "info" : "MethodDeclaration[47500-48924]:MethodDeclaration[47457-48881]"
    }, {
      "left" : "private boolean isExternallyReferenceable(Scope scope, String name)",
      "right" : "private boolean isExternallyReferenceable(Scope scope, String name)",
      "info" : "MethodDeclaration[48928-49523]:MethodDeclaration[48885-49480]"
    }, {
      "left" : "private NameInformation getDependencyScope(Node n)",
      "right" : "private NameInformation getDependencyScope(Node n)",
      "info" : "MethodDeclaration[49527-49837]:MethodDeclaration[49484-49794]"
    }, {
      "left" : "private NameInformation getEnclosingFunctionDependencyScope(NodeTraversal t)",
      "right" : "private NameInformation getEnclosingFunctionDependencyScope(NodeTraversal t)",
      "info" : "MethodDeclaration[49841-50889]:MethodDeclaration[49798-50846]"
    }, {
      "left" : "private void calculateReferences()",
      "right" : "private void calculateReferences()",
      "info" : "MethodDeclaration[50893-51330]:MethodDeclaration[50850-51287]"
    }, {
      "left" : "enum : TriState",
      "right" : "enum : TriState",
      "info" : "EnumDeclaration[51335-51607]:EnumDeclaration[51292-51564]"
    }, {
      "left" : "private int countOf(TriState isClass, TriState referenced)",
      "right" : "private int countOf(TriState isClass, TriState referenced)",
      "info" : "MethodDeclaration[51611-52472]:MethodDeclaration[51568-52429]"
    }, {
      "left" : "private List<Node> getSideEffectNodes(Node n)",
      "right" : "private List<Node> getSideEffectNodes(Node n)",
      "info" : "MethodDeclaration[52477-53074]:MethodDeclaration[52434-53031]"
    }, {
      "left" : "private void replaceWithRhs(Node parent, Node n)",
      "right" : "private void replaceWithRhs(Node parent, Node n)",
      "info" : "MethodDeclaration[53078-54581]:MethodDeclaration[53035-54538]"
    }, {
      "left" : "private void replaceTopLevelExpressionWithRhs(Node parent, Node n)",
      "right" : "private void replaceTopLevelExpressionWithRhs(Node parent, Node n)",
      "info" : "MethodDeclaration[54585-56115]:MethodDeclaration[54542-56072]"
    }, {
      "left" : "private boolean valueConsumedByParent(Node n, Node parent)",
      "right" : "private boolean valueConsumedByParent(Node n, Node parent)",
      "info" : "MethodDeclaration[56119-57409]:MethodDeclaration[56076-57366]"
    }, {
      "left" : "private Node collapseReplacements(List<Node> replacements)",
      "right" : "private Node collapseReplacements(List<Node> replacements)",
      "info" : "MethodDeclaration[57413-57925]:MethodDeclaration[57370-57882]"
    }, {
      "left" : "private List<Node> getRhsSubexpressions(Node n)",
      "right" : "private List<Node> getRhsSubexpressions(Node n)",
      "info" : "MethodDeclaration[57929-59194]:MethodDeclaration[57886-59151]"
    } ],
    "mappings" : [
 {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[3524-3529]:TYPE_DECLARATION_KIND[3524-3529]"
    }, {
      "left" : "NameAnalyzer",
      "right" : "NameAnalyzer",
      "info" : "SimpleName[3530-3542]:SimpleName[3530-3542]"
    }, {
      "left" : "CompilerPass",
      "right" : "CompilerPass",
      "info" : "SimpleType[3554-3566]:SimpleType[3554-3566]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[5917-5924]:Modifier[5917-5924]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[5925-5931]:Modifier[5925-5931]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[5932-5937]:TYPE_DECLARATION_KIND[5932-5937]"
    }, {
      "left" : "AliasSet",
      "right" : "AliasSet",
      "info" : "SimpleName[5938-5946]:SimpleName[5938-5946]"
    }, {
      "left" : "AliasSet",
      "right" : "AliasSet",
      "info" : "SimpleName[6049-6057]:SimpleName[6049-6057]"
    }, {
      "left" : "String name1",
      "right" : "String name1",
      "info" : "SingleVariableDeclaration[6058-6070]:SingleVariableDeclaration[6058-6070]"
    }, {
      "left" : "String name2",
      "right" : "String name2",
      "info" : "SingleVariableDeclaration[6072-6084]:SingleVariableDeclaration[6072-6084]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6086-6141]:Block[6086-6141]"
    }, {
      "left" : "names.add(name1);",
      "right" : "names.add(name1);",
      "info" : "ExpressionStatement[6094-6111]:ExpressionStatement[6094-6111]"
    }, {
      "left" : "names.add(name2);",
      "right" : "names.add(name2);",
      "info" : "ExpressionStatement[6118-6135]:ExpressionStatement[6118-6135]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[6453-6460]:Modifier[6453-6460]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[6461-6467]:Modifier[6461-6467]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[6468-6473]:TYPE_DECLARATION_KIND[6468-6473]"
    }, {
      "left" : "ReferencePropagationCallback",
      "right" : "ReferencePropagationCallback",
      "info" : "SimpleName[6474-6502]:SimpleName[6474-6502]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[6556-6565]:MarkerAnnotation[6556-6565]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6570-6576]:Modifier[6570-6576]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[6577-6584]:PrimitiveType[6577-6584]"
    }, {
      "left" : "traverseEdge",
      "right" : "traverseEdge",
      "info" : "SimpleName[6585-6597]:SimpleName[6585-6597]"
    }, {
      "left" : "JsName from",
      "right" : "JsName from",
      "info" : "SingleVariableDeclaration[6598-6609]:SingleVariableDeclaration[6598-6609]"
    }, {
      "left" : "RefType callSite",
      "right" : "RefType callSite",
      "info" : "SingleVariableDeclaration[6643-6659]:SingleVariableDeclaration[6643-6659]"
    }, {
      "left" : "JsName to",
      "right" : "JsName to",
      "info" : "SingleVariableDeclaration[6693-6702]:SingleVariableDeclaration[6693-6702]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6704-6854]:Block[6704-6854]"
    }, {
      "left" : "if (from.referenced && !to.referenced)",
      "right" : "if (from.referenced && !to.referenced)",
      "info" : "IfStatement[6712-6848]:IfStatement[6712-6848]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6751-6811]:Block[6751-6811]"
    }, {
      "left" : "to.referenced = true;",
      "right" : "to.referenced = true;",
      "info" : "ExpressionStatement[6761-6782]:ExpressionStatement[6761-6782]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[6791-6803]:ReturnStatement[6791-6803]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6817-6848]:Block[6817-6848]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[6827-6840]:ReturnStatement[6827-6840]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[6969-6976]:Modifier[6969-6976]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[6977-6983]:Modifier[6977-6983]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[6984-6989]:TYPE_DECLARATION_KIND[6984-6989]"
    }, {
      "left" : "NameInformation",
      "right" : "NameInformation",
      "info" : "SimpleName[6990-7005]:SimpleName[6990-7005]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[7766-7773]:Modifier[7766-7773]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[7774-7780]:Modifier[7774-7780]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[7781-7786]:TYPE_DECLARATION_KIND[7781-7786]"
    }, {
      "left" : "JsName",
      "right" : "JsName",
      "info" : "SimpleName[7787-7793]:SimpleName[7787-7793]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[8470-8479]:MarkerAnnotation[8470-8479]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8484-8490]:Modifier[8484-8490]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[8491-8497]:SimpleType[8491-8497]"
    }, {
      "left" : "toString",
      "right" : "toString",
      "info" : "SimpleName[8498-8506]:SimpleName[8498-8506]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8509-8952]:Block[8509-8952]"
    }, {
      "left" : "StringBuilder out = new StringBuilder();",
      "right" : "StringBuilder out = new StringBuilder();",
      "info" : "VariableDeclarationStatement[8517-8557]:VariableDeclarationStatement[8517-8557]"
    }, {
      "left" : "out.append(name);",
      "right" : "out.append(name);",
      "info" : "ExpressionStatement[8564-8581]:ExpressionStatement[8564-8581]"
    }, {
      "left" : "if (prototypeNames.size() > 0)",
      "right" : "if (prototypeNames.size() > 0)",
      "info" : "IfStatement[8589-8916]:IfStatement[8589-8916]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8620-8916]:Block[8620-8916]"
    }, {
      "left" : "out.append(\" (CLASS)\\n\");",
      "right" : "out.append(\" (CLASS)\\n\");",
      "info" : "ExpressionStatement[8630-8655]:ExpressionStatement[8630-8655]"
    }, {
      "left" : "out.append(\" - FUNCTIONS: \");",
      "right" : "out.append(\" - FUNCTIONS: \");",
      "info" : "ExpressionStatement[8664-8693]:ExpressionStatement[8664-8693]"
    }, {
      "left" : "Iterator<String> pIter = prototypeNames.iterator();",
      "right" : "Iterator<String> pIter = prototypeNames.iterator();",
      "info" : "VariableDeclarationStatement[8702-8753]:VariableDeclarationStatement[8702-8753]"
    }, {
      "left" : "while (pIter.hasNext())",
      "right" : "while (pIter.hasNext())",
      "info" : "WhileStatement[8762-8908]:WhileStatement[8762-8908]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8786-8908]:Block[8786-8908]"
    }, {
      "left" : "out.append(pIter.next());",
      "right" : "out.append(pIter.next());",
      "info" : "ExpressionStatement[8798-8823]:ExpressionStatement[8798-8823]"
    }, {
      "left" : "if (pIter.hasNext())",
      "right" : "if (pIter.hasNext())",
      "info" : "IfStatement[8834-8898]:IfStatement[8834-8898]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8855-8898]:Block[8855-8898]"
    }, {
      "left" : "out.append(\", \");",
      "right" : "out.append(\", \");",
      "info" : "ExpressionStatement[8869-8886]:ExpressionStatement[8869-8886]"
    }, {
      "left" : "return out.toString();",
      "right" : "return out.toString();",
      "info" : "ReturnStatement[8924-8946]:ReturnStatement[8924-8946]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[8958-8967]:MarkerAnnotation[8958-8967]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8972-8978]:Modifier[8972-8978]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[8979-8982]:PrimitiveType[8979-8982]"
    }, {
      "left" : "compareTo",
      "right" : "compareTo",
      "info" : "SimpleName[8983-8992]:SimpleName[8983-8992]"
    }, {
      "left" : "JsName rhs",
      "right" : "JsName rhs",
      "info" : "SingleVariableDeclaration[8993-9003]:SingleVariableDeclaration[8993-9003]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9005-9056]:Block[9005-9056]"
    }, {
      "left" : "return this.name.compareTo(rhs.name);",
      "right" : "return this.name.compareTo(rhs.name);",
      "info" : "ReturnStatement[9013-9050]:ReturnStatement[9013-9050]"
    }, {
      "left" : "interface",
      "right" : "interface",
      "info" : "TYPE_DECLARATION_KIND[9147-9156]:TYPE_DECLARATION_KIND[9147-9156]"
    }, {
      "left" : "RefNode",
      "right" : "RefNode",
      "info" : "SimpleName[9157-9164]:SimpleName[9157-9164]"
    }, {
      "left" : "JsName",
      "right" : "JsName",
      "info" : "SimpleType[9171-9177]:SimpleType[9171-9177]"
    }, {
      "left" : "name",
      "right" : "name",
      "info" : "SimpleName[9178-9182]:SimpleName[9178-9182]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[9190-9194]:PrimitiveType[9190-9194]"
    }, {
      "left" : "remove",
      "right" : "remove",
      "info" : "SimpleName[9195-9201]:SimpleName[9195-9201]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[9417-9424]:Modifier[9417-9424]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[9425-9430]:TYPE_DECLARATION_KIND[9425-9430]"
    }, {
      "left" : "JsNameRefNode",
      "right" : "JsNameRefNode",
      "info" : "SimpleName[9431-9444]:SimpleName[9431-9444]"
    }, {
      "left" : "RefNode",
      "right" : "RefNode",
      "info" : "SimpleType[9456-9463]:SimpleType[9456-9463]"
    }, {
      "left" : "JsNameRefNode",
      "right" : "JsNameRefNode",
      "info" : "SimpleName[9983-9996]:SimpleName[9983-9996]"
    }, {
      "left" : "JsName name",
      "right" : "JsName name",
      "info" : "SingleVariableDeclaration[9997-10008]:SingleVariableDeclaration[9997-10008]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[10010-10019]:SingleVariableDeclaration[10010-10019]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10021-10114]:Block[10021-10114]"
    }, {
      "left" : "this.name = name;",
      "right" : "this.name = name;",
      "info" : "ExpressionStatement[10029-10046]:ExpressionStatement[10029-10046]"
    }, {
      "left" : "this.node = node;",
      "right" : "this.node = node;",
      "info" : "ExpressionStatement[10053-10070]:ExpressionStatement[10053-10070]"
    }, {
      "left" : "this.parent = node.getParent();",
      "right" : "this.parent = node.getParent();",
      "info" : "ExpressionStatement[10077-10108]:ExpressionStatement[10077-10108]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[10120-10129]:MarkerAnnotation[10120-10129]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10134-10140]:Modifier[10134-10140]"
    }, {
      "left" : "JsName",
      "right" : "JsName",
      "info" : "SimpleType[10141-10147]:SimpleType[10141-10147]"
    }, {
      "left" : "name",
      "right" : "name",
      "info" : "SimpleName[10148-10152]:SimpleName[10148-10152]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10155-10181]:Block[10155-10181]"
    }, {
      "left" : "return name;",
      "right" : "return name;",
      "info" : "ReturnStatement[10163-10175]:ReturnStatement[10163-10175]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[10187-10196]:MarkerAnnotation[10187-10196]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10201-10207]:Modifier[10201-10207]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[10208-10212]:PrimitiveType[10208-10212]"
    }, {
      "left" : "remove",
      "right" : "remove",
      "info" : "SimpleName[10213-10219]:SimpleName[10213-10219]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10222-11185]:Block[10222-11185]"
    }, {
      "left" : "Node containingNode = parent.getParent();",
      "right" : "Node containingNode = parent.getParent();",
      "info" : "VariableDeclarationStatement[10375-10416]:VariableDeclarationStatement[10375-10416]"
    }, {
      "left" : "switch (parent.getType()) {\n        case Token.VAR:\n          Preconditions.checkState(parent.hasOneChild());\n          replaceWithRhs(containingNode, parent);\n          break;\n        case Token.FUNCTION:\n          replaceWithRhs(containingNode, parent);\n          break;\n        case Token.ASSIGN:\n          if (containingNode.isExprResult()) {\n            replaceWithRhs(containingNode.getParent(), containingNode);\n          } else {\n            replaceWithRhs(containingNode, parent);\n          }\n          break;\n        case Token.OBJECTLIT:\n          // TODO(nicksantos): Come up with a way to remove this.\n          // If we remove object lit keys, then we will need to also\n          // create dependency scopes for them.\n          break;\n      }",
      "right" : "switch (parent.getType()) {\n        case Token.VAR:\n          Preconditions.checkState(parent.hasOneChild());\n          replaceWithRhs(containingNode, parent);\n          break;\n        case Token.FUNCTION:\n          replaceWithRhs(containingNode, parent);\n          break;\n        case Token.ASSIGN:\n          if (containingNode.isExprResult()) {\n            replaceWithRhs(containingNode.getParent(), containingNode);\n          } else {\n            replaceWithRhs(containingNode, parent);\n          }\n          break;\n        case Token.OBJECTLIT:\n          // TODO(nicksantos): Come up with a way to remove this.\n          // If we remove object lit keys, then we will need to also\n          // create dependency scopes for them.\n          break;\n      }",
      "info" : "SwitchStatement[10423-11179]:SwitchStatement[10423-11179]"
    }, {
      "left" : "case Token.VAR:",
      "right" : "case Token.VAR:",
      "info" : "SwitchCase[10459-10474]:SwitchCase[10459-10474]"
    }, {
      "left" : "Preconditions.checkState(parent.hasOneChild());",
      "right" : "Preconditions.checkState(parent.hasOneChild());",
      "info" : "ExpressionStatement[10485-10532]:ExpressionStatement[10485-10532]"
    }, {
      "left" : "replaceWithRhs(containingNode, parent);",
      "right" : "replaceWithRhs(containingNode, parent);",
      "info" : "ExpressionStatement[10543-10582]:ExpressionStatement[10543-10582]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[10593-10599]:BreakStatement[10593-10599]"
    }, {
      "left" : "case Token.FUNCTION:",
      "right" : "case Token.FUNCTION:",
      "info" : "SwitchCase[10608-10628]:SwitchCase[10608-10628]"
    }, {
      "left" : "replaceWithRhs(containingNode, parent);",
      "right" : "replaceWithRhs(containingNode, parent);",
      "info" : "ExpressionStatement[10639-10678]:ExpressionStatement[10639-10678]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[10689-10695]:BreakStatement[10689-10695]"
    }, {
      "left" : "case Token.ASSIGN:",
      "right" : "case Token.ASSIGN:",
      "info" : "SwitchCase[10704-10722]:SwitchCase[10704-10722]"
    }, {
      "left" : "if (containingNode.isExprResult())",
      "right" : "if (containingNode.isExprResult())",
      "info" : "IfStatement[10733-10924]:IfStatement[10733-10924]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10768-10853]:Block[10768-10853]"
    }, {
      "left" : "replaceWithRhs(containingNode.getParent(), containingNode);",
      "right" : "replaceWithRhs(containingNode.getParent(), containingNode);",
      "info" : "ExpressionStatement[10782-10841]:ExpressionStatement[10782-10841]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10859-10924]:Block[10859-10924]"
    }, {
      "left" : "replaceWithRhs(containingNode, parent);",
      "right" : "replaceWithRhs(containingNode, parent);",
      "info" : "ExpressionStatement[10873-10912]:ExpressionStatement[10873-10912]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[10935-10941]:BreakStatement[10935-10941]"
    }, {
      "left" : "case Token.OBJECTLIT:",
      "right" : "case Token.OBJECTLIT:",
      "info" : "SwitchCase[10950-10971]:SwitchCase[10950-10971]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[11165-11171]:BreakStatement[11165-11171]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[11269-11276]:Modifier[11269-11276]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[11277-11282]:TYPE_DECLARATION_KIND[11277-11282]"
    }, {
      "left" : "PrototypeSetNode",
      "right" : "PrototypeSetNode",
      "info" : "SimpleName[11283-11299]:SimpleName[11283-11299]"
    }, {
      "left" : "JsNameRefNode",
      "right" : "JsNameRefNode",
      "info" : "SimpleType[11308-11321]:SimpleType[11308-11321]"
    }, {
      "left" : "PrototypeSetNode",
      "right" : "PrototypeSetNode",
      "info" : "SimpleName[11505-11521]:SimpleName[11505-11521]"
    }, {
      "left" : "JsName name",
      "right" : "JsName name",
      "info" : "SingleVariableDeclaration[11522-11533]:SingleVariableDeclaration[11522-11533]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[11535-11546]:SingleVariableDeclaration[11535-11546]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11548-11650]:Block[11548-11650]"
    }, {
      "left" : "super(name, parent.getFirstChild());",
      "right" : "super(name, parent.getFirstChild());",
      "info" : "SuperConstructorInvocation[11556-11592]:SuperConstructorInvocation[11556-11592]"
    }, {
      "left" : "Preconditions.checkState(parent.isAssign());",
      "right" : "Preconditions.checkState(parent.isAssign());",
      "info" : "ExpressionStatement[11600-11644]:ExpressionStatement[11600-11644]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[11656-11665]:MarkerAnnotation[11656-11665]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11666-11672]:Modifier[11666-11672]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[11673-11677]:PrimitiveType[11673-11677]"
    }, {
      "left" : "remove",
      "right" : "remove",
      "info" : "SimpleName[11678-11684]:SimpleName[11678-11684]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11687-12080]:Block[11687-12080]"
    }, {
      "left" : "Node gramps = parent.getParent();",
      "right" : "Node gramps = parent.getParent();",
      "info" : "VariableDeclarationStatement[11695-11728]:VariableDeclarationStatement[11695-11728]"
    }, {
      "left" : "if (gramps.isExprResult())",
      "right" : "if (gramps.isExprResult())",
      "info" : "IfStatement[11735-12074]:IfStatement[11735-12074]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11762-11884]:Block[11762-11884]"
    }, {
      "left" : "changeProxy.removeChild(gramps.getParent(), gramps);",
      "right" : "changeProxy.removeChild(gramps.getParent(), gramps);",
      "info" : "ExpressionStatement[11824-11876]:ExpressionStatement[11824-11876]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11890-12074]:Block[11890-12074]"
    }, {
      "left" : "changeProxy.replaceWith(gramps, parent,\n                                parent.getLastChild().cloneTree());",
      "right" : "changeProxy.replaceWith(gramps, parent,\n                                parent.getLastChild().cloneTree());",
      "info" : "ExpressionStatement[11959-12066]:ExpressionStatement[11959-12066]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[12145-12152]:Modifier[12145-12152]"
    }, {
      "left" : "abstract",
      "right" : "abstract",
      "info" : "Modifier[12153-12161]:Modifier[12153-12161]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[12162-12167]:TYPE_DECLARATION_KIND[12162-12167]"
    }, {
      "left" : "SpecialReferenceNode",
      "right" : "SpecialReferenceNode",
      "info" : "SimpleName[12168-12188]:SimpleName[12168-12188]"
    }, {
      "left" : "RefNode",
      "right" : "RefNode",
      "info" : "SimpleType[12200-12207]:SimpleType[12200-12207]"
    }, {
      "left" : "SpecialReferenceNode",
      "right" : "SpecialReferenceNode",
      "info" : "SimpleName[12649-12669]:SimpleName[12649-12669]"
    }, {
      "left" : "JsName name",
      "right" : "JsName name",
      "info" : "SingleVariableDeclaration[12670-12681]:SingleVariableDeclaration[12670-12681]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[12683-12692]:SingleVariableDeclaration[12683-12692]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[12694-12705]:SingleVariableDeclaration[12694-12705]"
    }, {
      "left" : "Node gramps",
      "right" : "Node gramps",
      "info" : "SingleVariableDeclaration[12715-12726]:SingleVariableDeclaration[12715-12726]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12728-12839]:Block[12728-12839]"
    }, {
      "left" : "this.name = name;",
      "right" : "this.name = name;",
      "info" : "ExpressionStatement[12736-12753]:ExpressionStatement[12736-12753]"
    }, {
      "left" : "this.node = node;",
      "right" : "this.node = node;",
      "info" : "ExpressionStatement[12760-12777]:ExpressionStatement[12760-12777]"
    }, {
      "left" : "this.parent = parent;",
      "right" : "this.parent = parent;",
      "info" : "ExpressionStatement[12784-12805]:ExpressionStatement[12784-12805]"
    }, {
      "left" : "this.gramps = gramps;",
      "right" : "this.gramps = gramps;",
      "info" : "ExpressionStatement[12812-12833]:ExpressionStatement[12812-12833]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[12845-12854]:MarkerAnnotation[12845-12854]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12859-12865]:Modifier[12859-12865]"
    }, {
      "left" : "JsName",
      "right" : "JsName",
      "info" : "SimpleType[12866-12872]:SimpleType[12866-12872]"
    }, {
      "left" : "name",
      "right" : "name",
      "info" : "SimpleName[12873-12877]:SimpleName[12873-12877]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12880-12906]:Block[12880-12906]"
    }, {
      "left" : "return name;",
      "right" : "return name;",
      "info" : "ReturnStatement[12888-12900]:ReturnStatement[12888-12900]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[13017-13024]:Modifier[13017-13024]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[13025-13030]:TYPE_DECLARATION_KIND[13025-13030]"
    }, {
      "left" : "ClassDefiningFunctionNode",
      "right" : "ClassDefiningFunctionNode",
      "info" : "SimpleName[13031-13056]:SimpleName[13031-13056]"
    }, {
      "left" : "SpecialReferenceNode",
      "right" : "SpecialReferenceNode",
      "info" : "SimpleType[13065-13085]:SimpleType[13065-13085]"
    }, {
      "left" : "ClassDefiningFunctionNode",
      "right" : "ClassDefiningFunctionNode",
      "info" : "SimpleName[13347-13372]:SimpleName[13347-13372]"
    }, {
      "left" : "JsName name",
      "right" : "JsName name",
      "info" : "SingleVariableDeclaration[13373-13384]:SingleVariableDeclaration[13373-13384]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[13386-13395]:SingleVariableDeclaration[13386-13395]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[13397-13408]:SingleVariableDeclaration[13397-13408]"
    }, {
      "left" : "Node gramps",
      "right" : "Node gramps",
      "info" : "SingleVariableDeclaration[13418-13429]:SingleVariableDeclaration[13418-13429]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13431-13526]:Block[13431-13526]"
    }, {
      "left" : "super(name, node, parent, gramps);",
      "right" : "super(name, node, parent, gramps);",
      "info" : "SuperConstructorInvocation[13439-13473]:SuperConstructorInvocation[13439-13473]"
    }, {
      "left" : "Preconditions.checkState(node.isCall());",
      "right" : "Preconditions.checkState(node.isCall());",
      "info" : "ExpressionStatement[13480-13520]:ExpressionStatement[13480-13520]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[13532-13541]:MarkerAnnotation[13532-13541]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[13546-13552]:Modifier[13546-13552]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[13553-13557]:PrimitiveType[13553-13557]"
    }, {
      "left" : "remove",
      "right" : "remove",
      "info" : "SimpleName[13558-13564]:SimpleName[13558-13564]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13567-13802]:Block[13567-13802]"
    }, {
      "left" : "Preconditions.checkState(node.isCall());",
      "right" : "Preconditions.checkState(node.isCall());",
      "info" : "ExpressionStatement[13575-13615]:ExpressionStatement[13575-13615]"
    }, {
      "left" : "if (parent.isExprResult())",
      "right" : "if (parent.isExprResult())",
      "info" : "IfStatement[13622-13796]:IfStatement[13622-13796]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13649-13707]:Block[13649-13707]"
    }, {
      "left" : "changeProxy.removeChild(gramps, parent);",
      "right" : "changeProxy.removeChild(gramps, parent);",
      "info" : "ExpressionStatement[13659-13699]:ExpressionStatement[13659-13699]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13713-13796]:Block[13713-13796]"
    }, {
      "left" : "changeProxy.replaceWith(parent, node, IR.voidNode(IR.number(0)));",
      "right" : "changeProxy.replaceWith(parent, node, IR.voidNode(IR.number(0)));",
      "info" : "ExpressionStatement[13723-13788]:ExpressionStatement[13723-13788]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[13867-13874]:Modifier[13867-13874]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[13875-13880]:TYPE_DECLARATION_KIND[13875-13880]"
    }, {
      "left" : "InstanceOfCheckNode",
      "right" : "InstanceOfCheckNode",
      "info" : "SimpleName[13881-13900]:SimpleName[13881-13900]"
    }, {
      "left" : "SpecialReferenceNode",
      "right" : "SpecialReferenceNode",
      "info" : "SimpleType[13909-13929]:SimpleType[13909-13929]"
    }, {
      "left" : "InstanceOfCheckNode",
      "right" : "InstanceOfCheckNode",
      "info" : "SimpleName[14239-14258]:SimpleName[14239-14258]"
    }, {
      "left" : "JsName name",
      "right" : "JsName name",
      "info" : "SingleVariableDeclaration[14259-14270]:SingleVariableDeclaration[14259-14270]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[14272-14281]:SingleVariableDeclaration[14272-14281]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[14283-14294]:SingleVariableDeclaration[14283-14294]"
    }, {
      "left" : "Node gramps",
      "right" : "Node gramps",
      "info" : "SingleVariableDeclaration[14296-14307]:SingleVariableDeclaration[14296-14307]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14309-14468]:Block[14309-14468]"
    }, {
      "left" : "super(name, node, parent, gramps);",
      "right" : "super(name, node, parent, gramps);",
      "info" : "SuperConstructorInvocation[14317-14351]:SuperConstructorInvocation[14317-14351]"
    }, {
      "left" : "Preconditions.checkState(node.isQualifiedName());",
      "right" : "Preconditions.checkState(node.isQualifiedName());",
      "info" : "ExpressionStatement[14358-14407]:ExpressionStatement[14358-14407]"
    }, {
      "left" : "Preconditions.checkState(parent.isInstanceOf());",
      "right" : "Preconditions.checkState(parent.isInstanceOf());",
      "info" : "ExpressionStatement[14414-14462]:ExpressionStatement[14414-14462]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[14474-14483]:MarkerAnnotation[14474-14483]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[14488-14494]:Modifier[14488-14494]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[14495-14499]:PrimitiveType[14495-14499]"
    }, {
      "left" : "remove",
      "right" : "remove",
      "info" : "SimpleName[14500-14506]:SimpleName[14500-14506]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14509-14579]:Block[14509-14579]"
    }, {
      "left" : "changeProxy.replaceWith(gramps, parent, IR.falseNode());",
      "right" : "changeProxy.replaceWith(gramps, parent, IR.falseNode());",
      "info" : "ExpressionStatement[14517-14573]:ExpressionStatement[14517-14573]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[14675-14682]:Modifier[14675-14682]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[14683-14688]:TYPE_DECLARATION_KIND[14683-14688]"
    }, {
      "left" : "ProcessExternals",
      "right" : "ProcessExternals",
      "info" : "SimpleName[14689-14705]:SimpleName[14689-14705]"
    }, {
      "left" : "AbstractPostOrderCallback",
      "right" : "AbstractPostOrderCallback",
      "info" : "SimpleType[14714-14739]:SimpleType[14714-14739]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[14746-14755]:MarkerAnnotation[14746-14755]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[14760-14766]:Modifier[14760-14766]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[14767-14771]:PrimitiveType[14767-14771]"
    }, {
      "left" : "visit",
      "right" : "visit",
      "info" : "SimpleName[14772-14777]:SimpleName[14772-14777]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[14778-14793]:SingleVariableDeclaration[14778-14793]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[14795-14801]:SingleVariableDeclaration[14795-14801]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[14803-14814]:SingleVariableDeclaration[14803-14814]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14816-15228]:Block[14816-15228]"
    }, {
      "left" : "NameInformation ns = null;",
      "right" : "NameInformation ns = null;",
      "info" : "VariableDeclarationStatement[14824-14850]:VariableDeclarationStatement[14824-14850]"
    }, {
      "left" : "if (NodeUtil.isVarDeclaration(n))",
      "right" : "if (NodeUtil.isVarDeclaration(n))",
      "info" : "IfStatement[14857-15065]:IfStatement[14857-15065]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14891-14950]:Block[14891-14950]"
    }, {
      "left" : "ns = createNameInformation(t, n, parent);",
      "right" : "ns = createNameInformation(t, n, parent);",
      "info" : "ExpressionStatement[14901-14942]:ExpressionStatement[14901-14942]"
    }, {
      "left" : "if (NodeUtil.isFunctionDeclaration(n))",
      "right" : "if (NodeUtil.isFunctionDeclaration(n))",
      "info" : "IfStatement[14956-15065]:IfStatement[14956-15065]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14995-15065]:Block[14995-15065]"
    }, {
      "left" : "ns = createNameInformation(t, n.getFirstChild(), n);",
      "right" : "ns = createNameInformation(t, n.getFirstChild(), n);",
      "info" : "ExpressionStatement[15005-15057]:ExpressionStatement[15005-15057]"
    }, {
      "left" : "if (ns != null)",
      "right" : "if (ns != null)",
      "info" : "IfStatement[15072-15222]:IfStatement[15072-15222]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15088-15222]:Block[15088-15222]"
    }, {
      "left" : "JsName jsName = getName(ns.name, true);",
      "right" : "JsName jsName = getName(ns.name, true);",
      "info" : "VariableDeclarationStatement[15098-15137]:VariableDeclarationStatement[15098-15137]"
    }, {
      "left" : "jsName.externallyDefined = true;",
      "right" : "jsName.externallyDefined = true;",
      "info" : "ExpressionStatement[15146-15178]:ExpressionStatement[15146-15178]"
    }, {
      "left" : "externalNames.add(ns.name);",
      "right" : "externalNames.add(ns.name);",
      "info" : "ExpressionStatement[15187-15214]:ExpressionStatement[15187-15214]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[16228-16235]:Modifier[16228-16235]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[16236-16241]:TYPE_DECLARATION_KIND[16236-16241]"
    }, {
      "left" : "FindDependencyScopes",
      "right" : "FindDependencyScopes",
      "info" : "SimpleName[16242-16262]:SimpleName[16242-16262]"
    }, {
      "left" : "AbstractPostOrderCallback",
      "right" : "AbstractPostOrderCallback",
      "info" : "SimpleType[16271-16296]:SimpleType[16271-16296]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[16303-16312]:MarkerAnnotation[16303-16312]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[16317-16323]:Modifier[16317-16323]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[16324-16328]:PrimitiveType[16324-16328]"
    }, {
      "left" : "visit",
      "right" : "visit",
      "info" : "SimpleName[16329-16334]:SimpleName[16329-16334]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[16335-16350]:SingleVariableDeclaration[16335-16350]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[16352-16358]:SingleVariableDeclaration[16352-16358]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[16360-16371]:SingleVariableDeclaration[16360-16371]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16373-18050]:Block[16373-18050]"
    }, {
      "left" : "if (!t.inGlobalScope())",
      "right" : "if (!t.inGlobalScope())",
      "info" : "IfStatement[16381-16430]:IfStatement[16381-16430]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16405-16430]:Block[16405-16430]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[16415-16422]:ReturnStatement[16415-16422]"
    }, {
      "left" : "if (n.isAssign())",
      "right" : "if (n.isAssign())",
      "info" : "IfStatement[16438-18044]:IfStatement[16438-18044]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16456-17430]:Block[16456-17430]"
    }, {
      "left" : "Node nameNode = n.getFirstChild();",
      "right" : "Node nameNode = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[16466-16500]:VariableDeclarationStatement[16466-16500]"
    }, {
      "left" : "NameInformation ns = createNameInformation(t, nameNode, n);",
      "right" : "NameInformation ns = createNameInformation(t, nameNode, n);",
      "info" : "VariableDeclarationStatement[16509-16568]:VariableDeclarationStatement[16509-16568]"
    }, {
      "left" : "if (ns != null)",
      "right" : "if (ns != null)",
      "info" : "IfStatement[16577-17422]:IfStatement[16577-17422]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16593-17422]:Block[16593-17422]"
    }, {
      "left" : "if (parent.isFor() && !NodeUtil.isForIn(parent))",
      "right" : "if (parent.isFor() && !NodeUtil.isForIn(parent))",
      "info" : "IfStatement[16605-17412]:IfStatement[16605-17412]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16654-17358]:Block[16654-17358]"
    }, {
      "left" : "if (parent.getFirstChild().getNext() != n)",
      "right" : "if (parent.getFirstChild().getNext() != n)",
      "info" : "IfStatement[17186-17346]:IfStatement[17186-17346]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17229-17281]:Block[17229-17281]"
    }, {
      "left" : "recordDepScope(n, ns);",
      "right" : "recordDepScope(n, ns);",
      "info" : "ExpressionStatement[17245-17267]:ExpressionStatement[17245-17267]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17287-17346]:Block[17287-17346]"
    }, {
      "left" : "recordDepScope(nameNode, ns);",
      "right" : "recordDepScope(nameNode, ns);",
      "info" : "ExpressionStatement[17303-17332]:ExpressionStatement[17303-17332]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17364-17412]:Block[17364-17412]"
    }, {
      "left" : "recordDepScope(n, ns);",
      "right" : "recordDepScope(n, ns);",
      "info" : "ExpressionStatement[17378-17400]:ExpressionStatement[17378-17400]"
    }, {
      "left" : "if (NodeUtil.isVarDeclaration(n))",
      "right" : "if (NodeUtil.isVarDeclaration(n))",
      "info" : "IfStatement[17436-18044]:IfStatement[17436-18044]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17470-17576]:Block[17470-17576]"
    }, {
      "left" : "NameInformation ns = createNameInformation(t, n, parent);",
      "right" : "NameInformation ns = createNameInformation(t, n, parent);",
      "info" : "VariableDeclarationStatement[17480-17537]:VariableDeclarationStatement[17480-17537]"
    }, {
      "left" : "recordDepScope(n, ns);",
      "right" : "recordDepScope(n, ns);",
      "info" : "ExpressionStatement[17546-17568]:ExpressionStatement[17546-17568]"
    }, {
      "left" : "if (NodeUtil.isFunctionDeclaration(n))",
      "right" : "if (NodeUtil.isFunctionDeclaration(n))",
      "info" : "IfStatement[17582-18044]:IfStatement[17582-18044]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17621-17738]:Block[17621-17738]"
    }, {
      "left" : "NameInformation ns = createNameInformation(t, n.getFirstChild(), n);",
      "right" : "NameInformation ns = createNameInformation(t, n.getFirstChild(), n);",
      "info" : "VariableDeclarationStatement[17631-17699]:VariableDeclarationStatement[17631-17699]"
    }, {
      "left" : "recordDepScope(n, ns);",
      "right" : "recordDepScope(n, ns);",
      "info" : "ExpressionStatement[17708-17730]:ExpressionStatement[17708-17730]"
    }, {
      "left" : "if (NodeUtil.isExprCall(n))",
      "right" : "if (NodeUtil.isExprCall(n))",
      "info" : "IfStatement[17744-18044]:IfStatement[17744-18044]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17772-18044]:Block[17772-18044]"
    }, {
      "left" : "Node callNode = n.getFirstChild();",
      "right" : "Node callNode = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[17782-17816]:VariableDeclarationStatement[17782-17816]"
    }, {
      "left" : "Node nameNode = callNode.getFirstChild();",
      "right" : "Node nameNode = callNode.getFirstChild();",
      "info" : "VariableDeclarationStatement[17825-17866]:VariableDeclarationStatement[17825-17866]"
    }, {
      "left" : "NameInformation ns = createNameInformation(t, nameNode, callNode);",
      "right" : "NameInformation ns = createNameInformation(t, nameNode, callNode);",
      "info" : "VariableDeclarationStatement[17875-17941]:VariableDeclarationStatement[17875-17941]"
    }, {
      "left" : "if (ns != null && ns.onlyAffectsClassDef)",
      "right" : "if (ns != null && ns.onlyAffectsClassDef)",
      "info" : "IfStatement[17950-18036]:IfStatement[17950-18036]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17992-18036]:Block[17992-18036]"
    }, {
      "left" : "recordDepScope(n, ns);",
      "right" : "recordDepScope(n, ns);",
      "info" : "ExpressionStatement[18004-18026]:ExpressionStatement[18004-18026]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[18107-18114]:Modifier[18107-18114]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[18115-18119]:PrimitiveType[18115-18119]"
    }, {
      "left" : "recordDepScope",
      "right" : "recordDepScope",
      "info" : "SimpleName[18120-18134]:SimpleName[18120-18134]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[18135-18144]:SingleVariableDeclaration[18135-18144]"
    }, {
      "left" : "NameInformation name",
      "right" : "NameInformation name",
      "info" : "SingleVariableDeclaration[18146-18166]:SingleVariableDeclaration[18146-18166]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18168-18205]:Block[18168-18205]"
    }, {
      "left" : "scopes.put(node, name);",
      "right" : "scopes.put(node, name);",
      "info" : "ExpressionStatement[18176-18199]:ExpressionStatement[18176-18199]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[18458-18465]:Modifier[18458-18465]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[18466-18471]:TYPE_DECLARATION_KIND[18466-18471]"
    }, {
      "left" : "HoistVariableAndFunctionDeclarations",
      "right" : "HoistVariableAndFunctionDeclarations",
      "info" : "SimpleName[18472-18508]:SimpleName[18472-18508]"
    }, {
      "left" : "NodeTraversal.AbstractShallowCallback",
      "right" : "NodeTraversal.AbstractShallowCallback",
      "info" : "SimpleType[18523-18560]:SimpleType[18523-18560]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[18568-18577]:MarkerAnnotation[18568-18577]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[18582-18588]:Modifier[18582-18588]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[18589-18593]:PrimitiveType[18589-18593]"
    }, {
      "left" : "visit",
      "right" : "visit",
      "info" : "SimpleName[18594-18599]:SimpleName[18594-18599]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[18600-18615]:SingleVariableDeclaration[18600-18615]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[18617-18623]:SingleVariableDeclaration[18617-18623]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[18625-18636]:SingleVariableDeclaration[18625-18636]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18638-19131]:Block[18638-19131]"
    }, {
      "left" : "if (NodeUtil.isVarDeclaration(n))",
      "right" : "if (NodeUtil.isVarDeclaration(n))",
      "info" : "IfStatement[18646-19125]:IfStatement[18646-19125]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18680-18851]:Block[18680-18851]"
    }, {
      "left" : "NameInformation ns = createNameInformation(t, n, parent);",
      "right" : "NameInformation ns = createNameInformation(t, n, parent);",
      "info" : "VariableDeclarationStatement[18690-18747]:VariableDeclarationStatement[18690-18747]"
    }, {
      "left" : "Preconditions.checkNotNull(ns, \"NameInformation is null\");",
      "right" : "Preconditions.checkNotNull(ns, \"NameInformation is null\");",
      "info" : "ExpressionStatement[18756-18814]:ExpressionStatement[18756-18814]"
    }, {
      "left" : "createName(ns.name);",
      "right" : "createName(ns.name);",
      "info" : "ExpressionStatement[18823-18843]:ExpressionStatement[18823-18843]"
    }, {
      "left" : "if (NodeUtil.isFunctionDeclaration(n))",
      "right" : "if (NodeUtil.isFunctionDeclaration(n))",
      "info" : "IfStatement[18857-19125]:IfStatement[18857-19125]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18896-19125]:Block[18896-19125]"
    }, {
      "left" : "Node nameNode = n.getFirstChild();",
      "right" : "Node nameNode = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[18906-18940]:VariableDeclarationStatement[18906-18940]"
    }, {
      "left" : "NameInformation ns = createNameInformation(t, nameNode, n);",
      "right" : "NameInformation ns = createNameInformation(t, nameNode, n);",
      "info" : "VariableDeclarationStatement[18949-19008]:VariableDeclarationStatement[18949-19008]"
    }, {
      "left" : "Preconditions.checkNotNull(ns, \"NameInformation is null\");",
      "right" : "Preconditions.checkNotNull(ns, \"NameInformation is null\");",
      "info" : "ExpressionStatement[19017-19075]:ExpressionStatement[19017-19075]"
    }, {
      "left" : "createName(nameNode.getString());",
      "right" : "createName(nameNode.getString());",
      "info" : "ExpressionStatement[19084-19117]:ExpressionStatement[19084-19117]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[19471-19478]:Modifier[19471-19478]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[19479-19484]:TYPE_DECLARATION_KIND[19479-19484]"
    }, {
      "left" : "FindDeclarationsAndSetters",
      "right" : "FindDeclarationsAndSetters",
      "info" : "SimpleName[19485-19511]:SimpleName[19485-19511]"
    }, {
      "left" : "AbstractPostOrderCallback",
      "right" : "AbstractPostOrderCallback",
      "info" : "SimpleType[19520-19545]:SimpleType[19520-19545]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[19567-19573]:Modifier[19567-19573]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[19574-19578]:PrimitiveType[19574-19578]"
    }, {
      "left" : "visit",
      "right" : "visit",
      "info" : "SimpleName[19579-19584]:SimpleName[19579-19584]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19623-21260]:Block[19623-21217]"
    }, {
      "left" : "if (t.inGlobalScope())",
      "right" : "if (t.inGlobalScope())",
      "info" : "IfStatement[19690-20445]:IfStatement[19690-20445]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19713-20445]:Block[19713-20445]"
    }, {
      "left" : "if (NodeUtil.isVarDeclaration(n))",
      "right" : "if (NodeUtil.isVarDeclaration(n))",
      "info" : "IfStatement[19723-20437]:IfStatement[19723-20437]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19757-19911]:Block[19757-19911]"
    }, {
      "left" : "NameInformation ns = createNameInformation(t, n, parent);",
      "right" : "NameInformation ns = createNameInformation(t, n, parent);",
      "info" : "VariableDeclarationStatement[19769-19826]:VariableDeclarationStatement[19769-19826]"
    }, {
      "left" : "Preconditions.checkNotNull(ns);",
      "right" : "Preconditions.checkNotNull(ns);",
      "info" : "ExpressionStatement[19837-19868]:ExpressionStatement[19837-19868]"
    }, {
      "left" : "recordSet(ns.name, n);",
      "right" : "recordSet(ns.name, n);",
      "info" : "ExpressionStatement[19879-19901]:ExpressionStatement[19879-19901]"
    }, {
      "left" : "if (NodeUtil.isFunctionDeclaration(n))",
      "right" : "if (NodeUtil.isFunctionDeclaration(n))",
      "info" : "IfStatement[19917-20437]:IfStatement[19917-20437]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19956-20237]:Block[19956-20237]"
    }, {
      "left" : "Node nameNode = n.getFirstChild();",
      "right" : "Node nameNode = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[19968-20002]:VariableDeclarationStatement[19968-20002]"
    }, {
      "left" : "NameInformation ns = createNameInformation(t, nameNode, n);",
      "right" : "NameInformation ns = createNameInformation(t, nameNode, n);",
      "info" : "VariableDeclarationStatement[20013-20072]:VariableDeclarationStatement[20013-20072]"
    }, {
      "left" : "if (ns != null)",
      "right" : "if (ns != null)",
      "info" : "IfStatement[20083-20227]:IfStatement[20083-20227]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20099-20227]:Block[20099-20227]"
    }, {
      "left" : "JsName nameInfo = getName(nameNode.getString(), true);",
      "right" : "JsName nameInfo = getName(nameNode.getString(), true);",
      "info" : "VariableDeclarationStatement[20113-20167]:VariableDeclarationStatement[20113-20167]"
    }, {
      "left" : "recordSet(nameInfo.name, nameNode);",
      "right" : "recordSet(nameInfo.name, nameNode);",
      "info" : "ExpressionStatement[20180-20215]:ExpressionStatement[20180-20215]"
    }, {
      "left" : "if (NodeUtil.isObjectLitKey(n, parent))",
      "right" : "if (NodeUtil.isObjectLitKey(n, parent))",
      "info" : "IfStatement[20243-20437]:IfStatement[20243-20437]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20283-20437]:Block[20283-20437]"
    }, {
      "left" : "NameInformation ns = createNameInformation(t, n, parent);",
      "right" : "NameInformation ns = createNameInformation(t, n, parent);",
      "info" : "VariableDeclarationStatement[20295-20352]:VariableDeclarationStatement[20295-20352]"
    }, {
      "left" : "if (ns != null)",
      "right" : "if (ns != null)",
      "info" : "IfStatement[20363-20427]:IfStatement[20363-20427]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20379-20427]:Block[20379-20427]"
    }, {
      "left" : "recordSet(ns.name, n);",
      "right" : "recordSet(ns.name, n);",
      "info" : "ExpressionStatement[20393-20415]:ExpressionStatement[20393-20415]"
    }, {
      "left" : "if (n.isAssign())",
      "right" : "if (n.isAssign())",
      "info" : "IfStatement[20496-21254]:IfStatement[20496-21211]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20514-20852]:Block[20514-20852]"
    }, {
      "left" : "Node nameNode = n.getFirstChild();",
      "right" : "Node nameNode = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[20524-20558]:VariableDeclarationStatement[20524-20558]"
    }, {
      "left" : "NameInformation ns = createNameInformation(t, nameNode, n);",
      "right" : "NameInformation ns = createNameInformation(t, nameNode, n);",
      "info" : "VariableDeclarationStatement[20568-20627]:VariableDeclarationStatement[20568-20627]"
    }, {
      "left" : "if (ns != null)",
      "right" : "if (ns != null)",
      "info" : "IfStatement[20636-20844]:IfStatement[20636-20844]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20652-20844]:Block[20652-20844]"
    }, {
      "left" : "if (ns.isPrototype)",
      "right" : "if (ns.isPrototype)",
      "info" : "IfStatement[20664-20834]:IfStatement[20664-20834]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20684-20773]:Block[20684-20773]"
    }, {
      "left" : "recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n);",
      "right" : "recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n);",
      "info" : "ExpressionStatement[20698-20761]:ExpressionStatement[20698-20761]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20779-20834]:Block[20779-20834]"
    }, {
      "left" : "recordSet(ns.name, nameNode);",
      "right" : "recordSet(ns.name, nameNode);",
      "info" : "ExpressionStatement[20793-20822]:ExpressionStatement[20793-20822]"
    }, {
      "left" : "if (n.isCall())",
      "right" : "if (n.isCall())",
      "info" : "IfStatement[20858-21254]:IfStatement[20858-21211]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20874-21254]:Block[20874-21211]"
    }, {
      "left" : "Node nameNode = n.getFirstChild();",
      "right" : "Node nameNode = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[20884-20918]:VariableDeclarationStatement[20884-20918]"
    }, {
      "left" : "NameInformation ns = createNameInformation(t, nameNode, n);",
      "right" : "NameInformation ns = createNameInformation(t, nameNode, n);",
      "info" : "VariableDeclarationStatement[20927-20986]:VariableDeclarationStatement[20927-20986]"
    }, {
      "left" : "if (ns != null && ns.onlyAffectsClassDef)",
      "right" : "if (ns != null && ns.onlyAffectsClassDef)",
      "info" : "IfStatement[20995-21246]:IfStatement[20995-21203]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21037-21246]:Block[21037-21203]"
    }, {
      "left" : "refNodes.add(new ClassDefiningFunctionNode(\n              name, n, parent, parent.getParent()));",
      "right" : "refNodes.add(new ClassDefiningFunctionNode(\n              name, n, parent, parent.getParent()));",
      "info" : "ExpressionStatement[21128-21224]:ExpressionStatement[21097-21193]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[21489-21496]:Modifier[21446-21453]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[21497-21501]:PrimitiveType[21454-21458]"
    }, {
      "left" : "recordSet",
      "right" : "recordSet",
      "info" : "SimpleName[21502-21511]:SimpleName[21459-21468]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[21512-21523]:SingleVariableDeclaration[21469-21480]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[21525-21534]:SingleVariableDeclaration[21482-21491]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21536-21980]:Block[21493-21937]"
    }, {
      "left" : "JsName jsn = getName(name, true);",
      "right" : "JsName jsn = getName(name, true);",
      "info" : "VariableDeclarationStatement[21544-21577]:VariableDeclarationStatement[21501-21534]"
    }, {
      "left" : "JsNameRefNode nameRefNode = new JsNameRefNode(jsn, node);",
      "right" : "JsNameRefNode nameRefNode = new JsNameRefNode(jsn, node);",
      "info" : "VariableDeclarationStatement[21584-21641]:VariableDeclarationStatement[21541-21598]"
    }, {
      "left" : "refNodes.add(nameRefNode);",
      "right" : "refNodes.add(nameRefNode);",
      "info" : "ExpressionStatement[21648-21674]:ExpressionStatement[21605-21631]"
    }, {
      "left" : "if (node.isGetElem())",
      "right" : "if (node.isGetElem())",
      "info" : "IfStatement[21785-21974]:IfStatement[21742-21931]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21807-21855]:Block[21764-21812]"
    }, {
      "left" : "recordWriteOnProperties(name);",
      "right" : "recordWriteOnProperties(name);",
      "info" : "ExpressionStatement[21817-21847]:ExpressionStatement[21774-21804]"
    }, {
      "left" : "if (name.indexOf('.') != -1)",
      "right" : "if (name.indexOf('.') != -1)",
      "info" : "IfStatement[21861-21974]:IfStatement[21818-21931]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21890-21974]:Block[21847-21931]"
    }, {
      "left" : "recordWriteOnProperties(name.substring(0, name.lastIndexOf('.')));",
      "right" : "recordWriteOnProperties(name.substring(0, name.lastIndexOf('.')));",
      "info" : "ExpressionStatement[21900-21966]:ExpressionStatement[21857-21923]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[22280-22287]:Modifier[22237-22244]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[22288-22292]:PrimitiveType[22245-22249]"
    }, {
      "left" : "recordPrototypeSet",
      "right" : "recordPrototypeSet",
      "info" : "SimpleName[22293-22311]:SimpleName[22250-22268]"
    }, {
      "left" : "String className",
      "right" : "String className",
      "info" : "SingleVariableDeclaration[22312-22328]:SingleVariableDeclaration[22269-22285]"
    }, {
      "left" : "String prototypeProperty",
      "right" : "String prototypeProperty",
      "info" : "SingleVariableDeclaration[22330-22354]:SingleVariableDeclaration[22287-22311]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[22364-22373]:SingleVariableDeclaration[22321-22330]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22375-22574]:Block[22332-22531]"
    }, {
      "left" : "JsName name = getName(className, true);",
      "right" : "JsName name = getName(className, true);",
      "info" : "VariableDeclarationStatement[22383-22422]:VariableDeclarationStatement[22340-22379]"
    }, {
      "left" : "name.prototypeNames.add(prototypeProperty);",
      "right" : "name.prototypeNames.add(prototypeProperty);",
      "info" : "ExpressionStatement[22429-22472]:ExpressionStatement[22386-22429]"
    }, {
      "left" : "refNodes.add(new PrototypeSetNode(name, node));",
      "right" : "refNodes.add(new PrototypeSetNode(name, node));",
      "info" : "ExpressionStatement[22479-22526]:ExpressionStatement[22436-22483]"
    }, {
      "left" : "recordWriteOnProperties(className);",
      "right" : "recordWriteOnProperties(className);",
      "info" : "ExpressionStatement[22533-22568]:ExpressionStatement[22490-22525]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[22665-22672]:Modifier[22622-22629]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[22673-22677]:PrimitiveType[22630-22634]"
    }, {
      "left" : "recordWriteOnProperties",
      "right" : "recordWriteOnProperties",
      "info" : "SimpleName[22678-22701]:SimpleName[22635-22658]"
    }, {
      "left" : "String parentName",
      "right" : "String parentName",
      "info" : "SingleVariableDeclaration[22702-22719]:SingleVariableDeclaration[22659-22676]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22721-23225]:Block[22678-23182]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[22729-23219]:DoStatement[22686-23176]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22732-23206]:Block[22689-23163]"
    }, {
      "left" : "JsName parent = getName(parentName, true);",
      "right" : "JsName parent = getName(parentName, true);",
      "info" : "VariableDeclarationStatement[22742-22784]:VariableDeclarationStatement[22699-22741]"
    }, {
      "left" : "if (parent.hasWrittenDescendants)",
      "right" : "if (parent.hasWrittenDescendants)",
      "info" : "IfStatement[22793-23049]:IfStatement[22750-23006]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22827-22985]:Block[22784-22942]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[22968-22975]:ReturnStatement[22925-22932]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22991-23049]:Block[22948-23006]"
    }, {
      "left" : "parent.hasWrittenDescendants = true;",
      "right" : "parent.hasWrittenDescendants = true;",
      "info" : "ExpressionStatement[23003-23039]:ExpressionStatement[22960-22996]"
    }, {
      "left" : "if (parentName.indexOf('.') == -1)",
      "right" : "if (parentName.indexOf('.') == -1)",
      "info" : "IfStatement[23059-23123]:IfStatement[23016-23080]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23094-23123]:Block[23051-23080]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[23106-23113]:ReturnStatement[23063-23070]"
    }, {
      "left" : "parentName = parentName.substring(0, parentName.lastIndexOf('.'));",
      "right" : "parentName = parentName.substring(0, parentName.lastIndexOf('.'));",
      "info" : "ExpressionStatement[23132-23198]:ExpressionStatement[23089-23155]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[23337-23346]:MarkerAnnotation[23294-23303]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[23355-23361]:Modifier[23312-23318]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[23362-23369]:PrimitiveType[23319-23326]"
    }, {
      "left" : "apply",
      "right" : "apply",
      "info" : "SimpleName[23370-23375]:SimpleName[23327-23332]"
    }, {
      "left" : "Node input",
      "right" : "Node input",
      "info" : "SingleVariableDeclaration[23376-23386]:SingleVariableDeclaration[23333-23343]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23388-23688]:Block[23345-23645]"
    }, {
      "left" : "if (input.isCall())",
      "right" : "if (input.isCall())",
      "info" : "IfStatement[23400-23459]:IfStatement[23357-23416]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23420-23459]:Block[23377-23416]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[23434-23447]:ReturnStatement[23391-23404]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[23666-23678]:ReturnStatement[23623-23635]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[24066-24073]:Modifier[24023-24030]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[24074-24079]:TYPE_DECLARATION_KIND[24031-24036]"
    }, {
      "left" : "FindReferences",
      "right" : "FindReferences",
      "info" : "SimpleName[24080-24094]:SimpleName[24037-24051]"
    }, {
      "left" : "Callback",
      "right" : "Callback",
      "info" : "SimpleType[24106-24114]:SimpleType[24063-24071]"
    }, {
      "left" : "FindReferences",
      "right" : "FindReferences",
      "info" : "SimpleName[24148-24162]:SimpleName[24105-24119]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24165-24211]:Block[24122-24168]"
    }, {
      "left" : "nodesToKeep = Sets.newHashSet();",
      "right" : "nodesToKeep = Sets.newHashSet();",
      "info" : "ExpressionStatement[24173-24205]:ExpressionStatement[24130-24162]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[24217-24224]:Modifier[24174-24181]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[24225-24229]:PrimitiveType[24182-24186]"
    }, {
      "left" : "addAllChildren",
      "right" : "addAllChildren",
      "info" : "SimpleName[24230-24244]:SimpleName[24187-24201]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[24245-24251]:SingleVariableDeclaration[24202-24208]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24253-24432]:Block[24210-24389]"
    }, {
      "left" : "nodesToKeep.add(n);",
      "right" : "nodesToKeep.add(n);",
      "info" : "ExpressionStatement[24261-24280]:ExpressionStatement[24218-24237]"
    }, {
      "left" : "for (Node child = n.getFirstChild();\n           child != null;\n           child = child.getNext())",
      "right" : "for (Node child = n.getFirstChild();\n           child != null;\n           child = child.getNext())",
      "info" : "ForStatement[24287-24426]:ForStatement[24244-24383]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24386-24426]:Block[24343-24383]"
    }, {
      "left" : "addAllChildren(child);",
      "right" : "addAllChildren(child);",
      "info" : "ExpressionStatement[24396-24418]:ExpressionStatement[24353-24375]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[24438-24445]:Modifier[24395-24402]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[24446-24450]:PrimitiveType[24403-24407]"
    }, {
      "left" : "addSimplifiedChildren",
      "right" : "addSimplifiedChildren",
      "info" : "SimpleName[24451-24472]:SimpleName[24408-24429]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[24473-24479]:SingleVariableDeclaration[24430-24436]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24481-24644]:Block[24438-24601]"
    }, {
      "left" : "NodeTraversal.traverse(\n          compiler, n,\n          new GatherSideEffectSubexpressionsCallback(\n              compiler, new NodeAccumulator()));",
      "right" : "NodeTraversal.traverse(\n          compiler, n,\n          new GatherSideEffectSubexpressionsCallback(\n              compiler, new NodeAccumulator()));",
      "info" : "ExpressionStatement[24489-24638]:ExpressionStatement[24446-24595]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[24650-24657]:Modifier[24607-24614]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[24658-24662]:PrimitiveType[24615-24619]"
    }, {
      "left" : "addSimplifiedExpression",
      "right" : "addSimplifiedExpression",
      "info" : "SimpleName[24663-24686]:SimpleName[24620-24643]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[24687-24693]:SingleVariableDeclaration[24644-24650]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[24695-24706]:SingleVariableDeclaration[24652-24663]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24708-25242]:Block[24665-25199]"
    }, {
      "left" : "if (parent.isVar())",
      "right" : "if (parent.isVar())",
      "info" : "IfStatement[24716-25236]:IfStatement[24673-25193]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24736-24864]:Block[24693-24821]"
    }, {
      "left" : "Node value = n.getFirstChild();",
      "right" : "Node value = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[24746-24777]:VariableDeclarationStatement[24703-24734]"
    }, {
      "left" : "if (value != null)",
      "right" : "if (value != null)",
      "info" : "IfStatement[24786-24856]:IfStatement[24743-24813]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24805-24856]:Block[24762-24813]"
    }, {
      "left" : "addSimplifiedChildren(value);",
      "right" : "addSimplifiedChildren(value);",
      "info" : "ExpressionStatement[24817-24846]:ExpressionStatement[24774-24803]"
    }, {
      "left" : "if (n.isAssign() &&\n          (parent.isExprResult() ||\n           parent.isFor() ||\n           parent.isReturn()))",
      "right" : "if (n.isAssign() &&\n          (parent.isExprResult() ||\n           parent.isFor() ||\n           parent.isReturn()))",
      "info" : "IfStatement[24870-25236]:IfStatement[24827-25193]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24986-25087]:Block[24943-25044]"
    }, {
      "left" : "for (Node child : n.children())",
      "right" : "for (Node child : n.children())",
      "info" : "EnhancedForStatement[24996-25079]:EnhancedForStatement[24953-25036]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25028-25079]:Block[24985-25036]"
    }, {
      "left" : "addSimplifiedChildren(child);",
      "right" : "addSimplifiedChildren(child);",
      "info" : "ExpressionStatement[25040-25069]:ExpressionStatement[24997-25026]"
    }, {
      "left" : "if (n.isCall() &&\n                 parent.isExprResult())",
      "right" : "if (n.isCall() &&\n                 parent.isExprResult())",
      "info" : "IfStatement[25093-25236]:IfStatement[25050-25193]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25151-25194]:Block[25108-25151]"
    }, {
      "left" : "addSimplifiedChildren(n);",
      "right" : "addSimplifiedChildren(n);",
      "info" : "ExpressionStatement[25161-25186]:ExpressionStatement[25118-25143]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25200-25236]:Block[25157-25193]"
    }, {
      "left" : "addAllChildren(n);",
      "right" : "addAllChildren(n);",
      "info" : "ExpressionStatement[25210-25228]:ExpressionStatement[25167-25185]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[25248-25257]:MarkerAnnotation[25205-25214]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[25262-25268]:Modifier[25219-25225]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[25269-25276]:PrimitiveType[25226-25233]"
    }, {
      "left" : "shouldTraverse",
      "right" : "shouldTraverse",
      "info" : "SimpleName[25277-25291]:SimpleName[25234-25248]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[25292-25307]:SingleVariableDeclaration[25249-25264]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[25309-25315]:SingleVariableDeclaration[25266-25272]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[25317-25328]:SingleVariableDeclaration[25274-25285]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25330-26687]:Block[25287-26644]"
    }, {
      "left" : "if (parent == null)",
      "right" : "if (parent == null)",
      "info" : "IfStatement[25338-25388]:IfStatement[25295-25345]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25358-25388]:Block[25315-25345]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[25368-25380]:ReturnStatement[25325-25337]"
    }, {
      "left" : "if (n.isFor())",
      "right" : "if (n.isFor())",
      "info" : "IfStatement[25657-26162]:IfStatement[25614-26119]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25672-26162]:Block[25629-26119]"
    }, {
      "left" : "if (!NodeUtil.isForIn(n))",
      "right" : "if (!NodeUtil.isForIn(n))",
      "info" : "IfStatement[25682-26154]:IfStatement[25639-26111]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25708-25968]:Block[25665-25925]"
    }, {
      "left" : "Node decl = n.getFirstChild();",
      "right" : "Node decl = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[25720-25750]:VariableDeclarationStatement[25677-25707]"
    }, {
      "left" : "Node pred = decl.getNext();",
      "right" : "Node pred = decl.getNext();",
      "info" : "VariableDeclarationStatement[25761-25788]:VariableDeclarationStatement[25718-25745]"
    }, {
      "left" : "Node step = pred.getNext();",
      "right" : "Node step = pred.getNext();",
      "info" : "VariableDeclarationStatement[25799-25826]:VariableDeclarationStatement[25756-25783]"
    }, {
      "left" : "addSimplifiedExpression(decl, n);",
      "right" : "addSimplifiedExpression(decl, n);",
      "info" : "ExpressionStatement[25837-25870]:ExpressionStatement[25794-25827]"
    }, {
      "left" : "addSimplifiedExpression(pred, n);",
      "right" : "addSimplifiedExpression(pred, n);",
      "info" : "ExpressionStatement[25881-25914]:ExpressionStatement[25838-25871]"
    }, {
      "left" : "addSimplifiedExpression(step, n);",
      "right" : "addSimplifiedExpression(step, n);",
      "info" : "ExpressionStatement[25925-25958]:ExpressionStatement[25882-25915]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25974-26154]:Block[25931-26111]"
    }, {
      "left" : "Node decl = n.getFirstChild();",
      "right" : "Node decl = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[26012-26042]:VariableDeclarationStatement[25969-25999]"
    }, {
      "left" : "Node iter = decl.getNext();",
      "right" : "Node iter = decl.getNext();",
      "info" : "VariableDeclarationStatement[26053-26080]:VariableDeclarationStatement[26010-26037]"
    }, {
      "left" : "addAllChildren(decl);",
      "right" : "addAllChildren(decl);",
      "info" : "ExpressionStatement[26091-26112]:ExpressionStatement[26048-26069]"
    }, {
      "left" : "addAllChildren(iter);",
      "right" : "addAllChildren(iter);",
      "info" : "ExpressionStatement[26123-26144]:ExpressionStatement[26080-26101]"
    }, {
      "left" : "if (parent.isVar() ||\n          parent.isExprResult() ||\n          parent.isReturn() ||\n          parent.isThrow())",
      "right" : "if (parent.isVar() ||\n          parent.isExprResult() ||\n          parent.isReturn() ||\n          parent.isThrow())",
      "info" : "IfStatement[26170-26339]:IfStatement[26127-26296]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26286-26339]:Block[26243-26296]"
    }, {
      "left" : "addSimplifiedExpression(n, parent);",
      "right" : "addSimplifiedExpression(n, parent);",
      "info" : "ExpressionStatement[26296-26331]:ExpressionStatement[26253-26288]"
    }, {
      "left" : "if ((parent.isIf() ||\n           parent.isWhile() ||\n           parent.isWith() ||\n           parent.isSwitch() ||\n           parent.isCase()) &&\n          parent.getFirstChild() == n)",
      "right" : "if ((parent.isIf() ||\n           parent.isWhile() ||\n           parent.isWith() ||\n           parent.isSwitch() ||\n           parent.isCase()) &&\n          parent.getFirstChild() == n)",
      "info" : "IfStatement[26347-26568]:IfStatement[26304-26525]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26532-26568]:Block[26489-26525]"
    }, {
      "left" : "addAllChildren(n);",
      "right" : "addAllChildren(n);",
      "info" : "ExpressionStatement[26542-26560]:ExpressionStatement[26499-26517]"
    }, {
      "left" : "if (parent.isDo() && parent.getLastChild() == n)",
      "right" : "if (parent.isDo() && parent.getLastChild() == n)",
      "info" : "IfStatement[26576-26661]:IfStatement[26533-26618]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26625-26661]:Block[26582-26618]"
    }, {
      "left" : "addAllChildren(n);",
      "right" : "addAllChildren(n);",
      "info" : "ExpressionStatement[26635-26653]:ExpressionStatement[26592-26610]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[26669-26681]:ReturnStatement[26626-26638]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[26693-26702]:MarkerAnnotation[26650-26659]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[26707-26713]:Modifier[26664-26670]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[26714-26718]:PrimitiveType[26671-26675]"
    }, {
      "left" : "visit",
      "right" : "visit",
      "info" : "SimpleName[26719-26724]:SimpleName[26676-26681]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[26725-26740]:SingleVariableDeclaration[26682-26697]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[26742-26748]:SingleVariableDeclaration[26699-26705]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[26750-26761]:SingleVariableDeclaration[26707-26718]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26763-30807]:Block[26720-30764]"
    }, {
      "left" : "if (!(n.isName() ||\n            NodeUtil.isGet(n) && !parent.isGetProp()))",
      "right" : "if (!(n.isName() ||\n            NodeUtil.isGet(n) && !parent.isGetProp()))",
      "info" : "IfStatement[26771-26922]:IfStatement[26728-26879]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26846-26922]:Block[26803-26879]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[26907-26914]:ReturnStatement[26864-26871]"
    }, {
      "left" : "NameInformation nameInfo = createNameInformation(t, n, parent);",
      "right" : "NameInformation nameInfo = createNameInformation(t, n, parent);",
      "info" : "VariableDeclarationStatement[26930-26993]:VariableDeclarationStatement[26887-26950]"
    }, {
      "left" : "if (nameInfo == null)",
      "right" : "if (nameInfo == null)",
      "info" : "IfStatement[27000-27088]:IfStatement[26957-27045]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27022-27088]:Block[26979-27045]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[27073-27080]:ReturnStatement[27030-27037]"
    }, {
      "left" : "if (nameInfo.onlyAffectsClassDef)",
      "right" : "if (nameInfo.onlyAffectsClassDef)",
      "info" : "IfStatement[27096-27658]:IfStatement[27053-27615]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27130-27658]:Block[27087-27615]"
    }, {
      "left" : "if (nameInfo.superclass != null)",
      "right" : "if (nameInfo.superclass != null)",
      "info" : "IfStatement[27140-27283]:IfStatement[27097-27240]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27173-27283]:Block[27130-27240]"
    }, {
      "left" : "recordReference(\n              nameInfo.name, nameInfo.superclass, RefType.INHERITANCE);",
      "right" : "recordReference(\n              nameInfo.name, nameInfo.superclass, RefType.INHERITANCE);",
      "info" : "ExpressionStatement[27185-27273]:ExpressionStatement[27142-27230]"
    }, {
      "left" : "String nodeName = n.getQualifiedName();",
      "right" : "String nodeName = n.getQualifiedName();",
      "info" : "VariableDeclarationStatement[27468-27507]:VariableDeclarationStatement[27425-27464]"
    }, {
      "left" : "if (nodeName != null)",
      "right" : "if (nodeName != null)",
      "info" : "IfStatement[27516-27633]:IfStatement[27473-27590]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27538-27633]:Block[27495-27590]"
    }, {
      "left" : "recordReference(\n              nameInfo.name, nodeName, RefType.REGULAR);",
      "right" : "recordReference(\n              nameInfo.name, nodeName, RefType.REGULAR);",
      "info" : "ExpressionStatement[27550-27623]:ExpressionStatement[27507-27580]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[27643-27650]:ReturnStatement[27600-27607]"
    }, {
      "left" : "if (parent.isInstanceOf() &&\n          parent.getLastChild() == n &&\n          // Don't cover GETELEMs with a global root node.\n          n.isQualifiedName())",
      "right" : "if (parent.isInstanceOf() &&\n          parent.getLastChild() == n &&\n          // Don't cover GETELEMs with a global root node.\n          n.isQualifiedName())",
      "info" : "IfStatement[27666-28084]:IfStatement[27623-28041]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27825-28084]:Block[27782-28041]"
    }, {
      "left" : "JsName checkedClass = getName(nameInfo.name, true);",
      "right" : "JsName checkedClass = getName(nameInfo.name, true);",
      "info" : "VariableDeclarationStatement[27835-27886]:VariableDeclarationStatement[27792-27843]"
    }, {
      "left" : "refNodes.add(\n            new InstanceOfCheckNode(\n                checkedClass, n, parent, parent.getParent()));",
      "right" : "refNodes.add(\n            new InstanceOfCheckNode(\n                checkedClass, n, parent, parent.getParent()));",
      "info" : "ExpressionStatement[27895-28008]:ExpressionStatement[27852-27965]"
    }, {
      "left" : "checkedClass.hasInstanceOfReference = true;",
      "right" : "checkedClass.hasInstanceOfReference = true;",
      "info" : "ExpressionStatement[28017-28060]:ExpressionStatement[27974-28017]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[28069-28076]:ReturnStatement[28026-28033]"
    }, {
      "left" : "NameInformation referring = getDependencyScope(n);",
      "right" : "NameInformation referring = getDependencyScope(n);",
      "info" : "VariableDeclarationStatement[28380-28430]:VariableDeclarationStatement[28337-28387]"
    }, {
      "left" : "String referringName = \"\";",
      "right" : "String referringName = \"\";",
      "info" : "VariableDeclarationStatement[28437-28463]:VariableDeclarationStatement[28394-28420]"
    }, {
      "left" : "if (referring != null)",
      "right" : "if (referring != null)",
      "info" : "IfStatement[28470-28637]:IfStatement[28427-28594]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28493-28637]:Block[28450-28594]"
    }, {
      "left" : "referringName = referring.isPrototype\n                      ? referring.prototypeClass\n                      : referring.name;",
      "right" : "referringName = referring.isPrototype\n                      ? referring.prototypeClass\n                      : referring.name;",
      "info" : "ExpressionStatement[28503-28629]:ExpressionStatement[28460-28586]"
    }, {
      "left" : "String name = nameInfo.name;",
      "right" : "String name = nameInfo.name;",
      "info" : "VariableDeclarationStatement[28645-28673]:VariableDeclarationStatement[28602-28630]"
    }, {
      "left" : "if (maybeHiddenAlias(name, n))",
      "right" : "if (maybeHiddenAlias(name, n))",
      "info" : "IfStatement[28918-28993]:IfStatement[28875-28950]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28949-28993]:Block[28906-28950]"
    }, {
      "left" : "recordAlias(name, WINDOW);",
      "right" : "recordAlias(name, WINDOW);",
      "info" : "ExpressionStatement[28959-28985]:ExpressionStatement[28916-28942]"
    }, {
      "left" : "if (nameInfo.isExternallyReferenceable)",
      "right" : "if (nameInfo.isExternallyReferenceable)",
      "info" : "IfStatement[29143-29330]:IfStatement[29100-29287]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29183-29330]:Block[29140-29287]"
    }, {
      "left" : "recordReference(WINDOW, name, RefType.REGULAR);",
      "right" : "recordReference(WINDOW, name, RefType.REGULAR);",
      "info" : "ExpressionStatement[29193-29240]:ExpressionStatement[29150-29197]"
    }, {
      "left" : "maybeRecordAlias(name, parent, referring, referringName);",
      "right" : "maybeRecordAlias(name, parent, referring, referringName);",
      "info" : "ExpressionStatement[29249-29306]:ExpressionStatement[29206-29263]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[29315-29322]:ReturnStatement[29272-29279]"
    }, {
      "left" : "if (NodeUtil.isVarOrSimpleAssignLhs(n, parent))",
      "right" : "if (NodeUtil.isVarOrSimpleAssignLhs(n, parent))",
      "info" : "IfStatement[29487-29668]:IfStatement[29444-29625]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29535-29668]:Block[29492-29625]"
    }, {
      "left" : "if (referring != null)",
      "right" : "if (referring != null)",
      "info" : "IfStatement[29545-29644]:IfStatement[29502-29601]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29568-29644]:Block[29525-29601]"
    }, {
      "left" : "recordReference(referringName, name, RefType.REGULAR);",
      "right" : "recordReference(referringName, name, RefType.REGULAR);",
      "info" : "ExpressionStatement[29580-29634]:ExpressionStatement[29537-29591]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[29653-29660]:ReturnStatement[29610-29617]"
    }, {
      "left" : "if (nodesToKeep.contains(n))",
      "right" : "if (nodesToKeep.contains(n))",
      "info" : "IfStatement[29676-30801]:IfStatement[29633-30758]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29705-29986]:Block[29662-29943]"
    }, {
      "left" : "NameInformation functionScope = getEnclosingFunctionDependencyScope(t);",
      "right" : "NameInformation functionScope = getEnclosingFunctionDependencyScope(t);",
      "info" : "VariableDeclarationStatement[29715-29786]:VariableDeclarationStatement[29672-29743]"
    }, {
      "left" : "if (functionScope != null)",
      "right" : "if (functionScope != null)",
      "info" : "IfStatement[29795-29978]:IfStatement[29752-29935]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29822-29903]:Block[29779-29860]"
    }, {
      "left" : "recordReference(functionScope.name, name, RefType.REGULAR);",
      "right" : "recordReference(functionScope.name, name, RefType.REGULAR);",
      "info" : "ExpressionStatement[29834-29893]:ExpressionStatement[29791-29850]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29909-29978]:Block[29866-29935]"
    }, {
      "left" : "recordReference(WINDOW, name, RefType.REGULAR);",
      "right" : "recordReference(WINDOW, name, RefType.REGULAR);",
      "info" : "ExpressionStatement[29921-29968]:ExpressionStatement[29878-29925]"
    }, {
      "left" : "if (referring != null)",
      "right" : "if (referring != null)",
      "info" : "IfStatement[29992-30801]:IfStatement[29949-30758]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30015-30277]:Block[29972-30234]"
    }, {
      "left" : "if (!maybeRecordAlias(name, parent, referring, referringName))",
      "right" : "if (!maybeRecordAlias(name, parent, referring, referringName))",
      "info" : "IfStatement[30025-30269]:IfStatement[29982-30226]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30088-30269]:Block[30045-30226]"
    }, {
      "left" : "RefType depType = referring.onlyAffectsClassDef ?\n              RefType.INHERITANCE : RefType.REGULAR;",
      "right" : "RefType depType = referring.onlyAffectsClassDef ?\n              RefType.INHERITANCE : RefType.REGULAR;",
      "info" : "VariableDeclarationStatement[30100-30202]:VariableDeclarationStatement[30057-30159]"
    }, {
      "left" : "recordReference(referringName, name, depType);",
      "right" : "recordReference(referringName, name, depType);",
      "info" : "ExpressionStatement[30213-30259]:ExpressionStatement[30170-30216]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30283-30801]:Block[30240-30758]"
    }, {
      "left" : "for (Node ancestor : n.getAncestors())",
      "right" : "for (Node ancestor : n.getAncestors())",
      "info" : "EnhancedForStatement[30562-30793]:EnhancedForStatement[30519-30750]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30601-30793]:Block[30558-30750]"
    }, {
      "left" : "if (NodeUtil.isAssignmentOp(ancestor) ||\n              ancestor.isFunction())",
      "right" : "if (NodeUtil.isAssignmentOp(ancestor) ||\n              ancestor.isFunction())",
      "info" : "IfStatement[30613-30783]:IfStatement[30570-30740]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30691-30783]:Block[30648-30740]"
    }, {
      "left" : "recordReference(WINDOW, name, RefType.REGULAR);",
      "right" : "recordReference(WINDOW, name, RefType.REGULAR);",
      "info" : "ExpressionStatement[30705-30752]:ExpressionStatement[30662-30709]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[30765-30771]:BreakStatement[30722-30728]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[31090-31097]:Modifier[31047-31054]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[31098-31105]:PrimitiveType[31055-31062]"
    }, {
      "left" : "maybeHiddenAlias",
      "right" : "maybeHiddenAlias",
      "info" : "SimpleName[31106-31122]:SimpleName[31063-31079]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[31123-31134]:SingleVariableDeclaration[31080-31091]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[31136-31142]:SingleVariableDeclaration[31093-31099]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31144-31474]:Block[31101-31431]"
    }, {
      "left" : "Node parent = n.getParent();",
      "right" : "Node parent = n.getParent();",
      "info" : "VariableDeclarationStatement[31152-31180]:VariableDeclarationStatement[31109-31137]"
    }, {
      "left" : "if (NodeUtil.isVarOrSimpleAssignLhs(n, parent))",
      "right" : "if (NodeUtil.isVarOrSimpleAssignLhs(n, parent))",
      "info" : "IfStatement[31187-31448]:IfStatement[31144-31405]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31235-31448]:Block[31192-31405]"
    }, {
      "left" : "Node rhs = (parent.isVar())\n            ? n.getFirstChild() : parent.getLastChild();",
      "right" : "Node rhs = (parent.isVar())\n            ? n.getFirstChild() : parent.getLastChild();",
      "info" : "VariableDeclarationStatement[31245-31329]:VariableDeclarationStatement[31202-31286]"
    }, {
      "left" : "return (rhs != null && !NodeUtil.evaluatesToLocalValue(\n            rhs, NON_LOCAL_RESULT_PREDICATE));",
      "right" : "return (rhs != null && !NodeUtil.evaluatesToLocalValue(\n            rhs, NON_LOCAL_RESULT_PREDICATE));",
      "info" : "ReturnStatement[31338-31440]:ReturnStatement[31295-31397]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[31455-31468]:ReturnStatement[31412-31425]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[31543-31550]:Modifier[31500-31507]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[31551-31558]:PrimitiveType[31508-31515]"
    }, {
      "left" : "maybeRecordAlias",
      "right" : "maybeRecordAlias",
      "info" : "SimpleName[31559-31575]:SimpleName[31516-31532]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[31585-31596]:SingleVariableDeclaration[31542-31553]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[31598-31609]:SingleVariableDeclaration[31555-31566]"
    }, {
      "left" : "NameInformation referring",
      "right" : "NameInformation referring",
      "info" : "SingleVariableDeclaration[31619-31644]:SingleVariableDeclaration[31576-31601]"
    }, {
      "left" : "String referringName",
      "right" : "String referringName",
      "info" : "SingleVariableDeclaration[31646-31666]:SingleVariableDeclaration[31603-31623]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31668-31904]:Block[31625-31861]"
    }, {
      "left" : "if ((parent.isName() ||\n          parent.isAssign()) &&\n          referring != null &&\n          scopes.get(parent) == referring)",
      "right" : "if ((parent.isName() ||\n          parent.isAssign()) &&\n          referring != null &&\n          scopes.get(parent) == referring)",
      "info" : "IfStatement[31676-31878]:IfStatement[31633-31835]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31806-31878]:Block[31763-31835]"
    }, {
      "left" : "recordAlias(referringName, name);",
      "right" : "recordAlias(referringName, name);",
      "info" : "ExpressionStatement[31816-31849]:ExpressionStatement[31773-31806]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[31858-31870]:ReturnStatement[31815-31827]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[31885-31898]:ReturnStatement[31842-31855]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[32032-32039]:Modifier[31989-31996]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[32040-32045]:TYPE_DECLARATION_KIND[31997-32002]"
    }, {
      "left" : "NodeAccumulator",
      "right" : "NodeAccumulator",
      "info" : "SimpleName[32046-32061]:SimpleName[32003-32018]"
    }, {
      "left" : "SideEffectAccumulator",
      "right" : "SideEffectAccumulator",
      "info" : "SimpleType[32081-32102]:SimpleType[32038-32059]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[32112-32121]:MarkerAnnotation[32069-32078]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[32128-32134]:Modifier[32085-32091]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[32135-32142]:PrimitiveType[32092-32099]"
    }, {
      "left" : "classDefiningCallsHaveSideEffects",
      "right" : "classDefiningCallsHaveSideEffects",
      "info" : "SimpleName[32143-32176]:SimpleName[32100-32133]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32179-32210]:Block[32136-32167]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[32189-32202]:ReturnStatement[32146-32159]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[32218-32227]:MarkerAnnotation[32175-32184]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[32234-32240]:Modifier[32191-32197]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[32241-32245]:PrimitiveType[32198-32202]"
    }, {
      "left" : "keepSubTree",
      "right" : "keepSubTree",
      "info" : "SimpleName[32246-32257]:SimpleName[32203-32214]"
    }, {
      "left" : "Node original",
      "right" : "Node original",
      "info" : "SingleVariableDeclaration[32258-32271]:SingleVariableDeclaration[32215-32228]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32273-32316]:Block[32230-32273]"
    }, {
      "left" : "addAllChildren(original);",
      "right" : "addAllChildren(original);",
      "info" : "ExpressionStatement[32283-32308]:ExpressionStatement[32240-32265]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[32324-32333]:MarkerAnnotation[32281-32290]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[32340-32346]:Modifier[32297-32303]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[32347-32351]:PrimitiveType[32304-32308]"
    }, {
      "left" : "keepSimplifiedShortCircuitExpression",
      "right" : "keepSimplifiedShortCircuitExpression",
      "info" : "SimpleName[32352-32388]:SimpleName[32309-32345]"
    }, {
      "left" : "Node original",
      "right" : "Node original",
      "info" : "SingleVariableDeclaration[32389-32402]:SingleVariableDeclaration[32346-32359]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32404-32589]:Block[32361-32546]"
    }, {
      "left" : "Node condition = original.getFirstChild();",
      "right" : "Node condition = original.getFirstChild();",
      "info" : "VariableDeclarationStatement[32414-32456]:VariableDeclarationStatement[32371-32413]"
    }, {
      "left" : "Node thenBranch = condition.getNext();",
      "right" : "Node thenBranch = condition.getNext();",
      "info" : "VariableDeclarationStatement[32465-32503]:VariableDeclarationStatement[32422-32460]"
    }, {
      "left" : "addAllChildren(condition);",
      "right" : "addAllChildren(condition);",
      "info" : "ExpressionStatement[32512-32538]:ExpressionStatement[32469-32495]"
    }, {
      "left" : "addSimplifiedChildren(thenBranch);",
      "right" : "addSimplifiedChildren(thenBranch);",
      "info" : "ExpressionStatement[32547-32581]:ExpressionStatement[32504-32538]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[32597-32606]:MarkerAnnotation[32554-32563]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[32613-32619]:Modifier[32570-32576]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[32620-32624]:PrimitiveType[32577-32581]"
    }, {
      "left" : "keepSimplifiedHookExpression",
      "right" : "keepSimplifiedHookExpression",
      "info" : "SimpleName[32625-32653]:SimpleName[32582-32610]"
    }, {
      "left" : "Node hook",
      "right" : "Node hook",
      "info" : "SingleVariableDeclaration[32654-32663]:SingleVariableDeclaration[32611-32620]"
    }, {
      "left" : "boolean thenHasSideEffects",
      "right" : "boolean thenHasSideEffects",
      "info" : "SingleVariableDeclaration[32712-32738]:SingleVariableDeclaration[32669-32695]"
    }, {
      "left" : "boolean elseHasSideEffects",
      "right" : "boolean elseHasSideEffects",
      "info" : "SingleVariableDeclaration[32787-32813]:SingleVariableDeclaration[32744-32770]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32815-33179]:Block[32772-33136]"
    }, {
      "left" : "Node condition = hook.getFirstChild();",
      "right" : "Node condition = hook.getFirstChild();",
      "info" : "VariableDeclarationStatement[32825-32863]:VariableDeclarationStatement[32782-32820]"
    }, {
      "left" : "Node thenBranch = condition.getNext();",
      "right" : "Node thenBranch = condition.getNext();",
      "info" : "VariableDeclarationStatement[32872-32910]:VariableDeclarationStatement[32829-32867]"
    }, {
      "left" : "Node elseBranch = thenBranch.getNext();",
      "right" : "Node elseBranch = thenBranch.getNext();",
      "info" : "VariableDeclarationStatement[32919-32958]:VariableDeclarationStatement[32876-32915]"
    }, {
      "left" : "addAllChildren(condition);",
      "right" : "addAllChildren(condition);",
      "info" : "ExpressionStatement[32967-32993]:ExpressionStatement[32924-32950]"
    }, {
      "left" : "if (thenHasSideEffects)",
      "right" : "if (thenHasSideEffects)",
      "info" : "IfStatement[33002-33082]:IfStatement[32959-33039]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33026-33082]:Block[32983-33039]"
    }, {
      "left" : "addSimplifiedChildren(thenBranch);",
      "right" : "addSimplifiedChildren(thenBranch);",
      "info" : "ExpressionStatement[33038-33072]:ExpressionStatement[32995-33029]"
    }, {
      "left" : "if (elseHasSideEffects)",
      "right" : "if (elseHasSideEffects)",
      "info" : "IfStatement[33091-33171]:IfStatement[33048-33128]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33115-33171]:Block[33072-33128]"
    }, {
      "left" : "addSimplifiedChildren(elseBranch);",
      "right" : "addSimplifiedChildren(elseBranch);",
      "info" : "ExpressionStatement[33127-33161]:ExpressionStatement[33084-33118]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[33193-33200]:Modifier[33150-33157]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[33201-33206]:TYPE_DECLARATION_KIND[33158-33163]"
    }, {
      "left" : "RemoveListener",
      "right" : "RemoveListener",
      "info" : "SimpleName[33207-33221]:SimpleName[33164-33178]"
    }, {
      "left" : "AstChangeProxy.ChangeListener",
      "right" : "AstChangeProxy.ChangeListener",
      "info" : "SimpleType[33233-33262]:SimpleType[33190-33219]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[33269-33278]:MarkerAnnotation[33226-33235]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[33283-33289]:Modifier[33240-33246]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[33290-33294]:PrimitiveType[33247-33251]"
    }, {
      "left" : "nodeRemoved",
      "right" : "nodeRemoved",
      "info" : "SimpleName[33295-33306]:SimpleName[33252-33263]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[33307-33313]:SingleVariableDeclaration[33264-33270]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33315-33357]:Block[33272-33314]"
    }, {
      "left" : "compiler.reportCodeChange();",
      "right" : "compiler.reportCodeChange();",
      "info" : "ExpressionStatement[33323-33351]:ExpressionStatement[33280-33308]"
    }, {
      "left" : "NameAnalyzer",
      "right" : "NameAnalyzer",
      "info" : "SimpleName[33806-33818]:SimpleName[33763-33775]"
    }, {
      "left" : "AbstractCompiler compiler",
      "right" : "AbstractCompiler compiler",
      "info" : "SingleVariableDeclaration[33819-33844]:SingleVariableDeclaration[33776-33801]"
    }, {
      "left" : "boolean removeUnreferenced",
      "right" : "boolean removeUnreferenced",
      "info" : "SingleVariableDeclaration[33846-33872]:SingleVariableDeclaration[33803-33829]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33874-34049]:Block[33831-34006]"
    }, {
      "left" : "this.compiler = compiler;",
      "right" : "this.compiler = compiler;",
      "info" : "ExpressionStatement[33880-33905]:ExpressionStatement[33837-33862]"
    }, {
      "left" : "this.removeUnreferenced = removeUnreferenced;",
      "right" : "this.removeUnreferenced = removeUnreferenced;",
      "info" : "ExpressionStatement[33910-33955]:ExpressionStatement[33867-33912]"
    }, {
      "left" : "this.globalNames = DEFAULT_GLOBAL_NAMES;",
      "right" : "this.globalNames = DEFAULT_GLOBAL_NAMES;",
      "info" : "ExpressionStatement[33960-34000]:ExpressionStatement[33917-33957]"
    }, {
      "left" : "this.changeProxy = new AstChangeProxy();",
      "right" : "this.changeProxy = new AstChangeProxy();",
      "info" : "ExpressionStatement[34005-34045]:ExpressionStatement[33962-34002]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[34053-34062]:MarkerAnnotation[34010-34019]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[34065-34071]:Modifier[34022-34028]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[34072-34076]:PrimitiveType[34029-34033]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[34077-34084]:SimpleName[34034-34041]"
    }, {
      "left" : "Node externs",
      "right" : "Node externs",
      "info" : "SingleVariableDeclaration[34085-34097]:SingleVariableDeclaration[34042-34054]"
    }, {
      "left" : "Node root",
      "right" : "Node root",
      "info" : "SingleVariableDeclaration[34099-34108]:SingleVariableDeclaration[34056-34065]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34110-34884]:Block[34067-34841]"
    }, {
      "left" : "NodeTraversal.traverse(compiler, externs, new ProcessExternals());",
      "right" : "NodeTraversal.traverse(compiler, externs, new ProcessExternals());",
      "info" : "ExpressionStatement[34116-34182]:ExpressionStatement[34073-34139]"
    }, {
      "left" : "NodeTraversal.traverse(compiler, root, new FindDependencyScopes());",
      "right" : "NodeTraversal.traverse(compiler, root, new FindDependencyScopes());",
      "info" : "ExpressionStatement[34187-34254]:ExpressionStatement[34144-34211]"
    }, {
      "left" : "NodeTraversal.traverse(\n        compiler, root, new HoistVariableAndFunctionDeclarations());",
      "right" : "NodeTraversal.traverse(\n        compiler, root, new HoistVariableAndFunctionDeclarations());",
      "info" : "ExpressionStatement[34259-34351]:ExpressionStatement[34216-34308]"
    }, {
      "left" : "NodeTraversal.traverse(compiler, root, new FindDeclarationsAndSetters());",
      "right" : "NodeTraversal.traverse(compiler, root, new FindDeclarationsAndSetters());",
      "info" : "ExpressionStatement[34356-34429]:ExpressionStatement[34313-34386]"
    }, {
      "left" : "NodeTraversal.traverse(compiler, root, new FindReferences());",
      "right" : "NodeTraversal.traverse(compiler, root, new FindReferences());",
      "info" : "ExpressionStatement[34434-34495]:ExpressionStatement[34391-34452]"
    }, {
      "left" : "referenceParentNames();",
      "right" : "referenceParentNames();",
      "info" : "ExpressionStatement[34619-34642]:ExpressionStatement[34576-34599]"
    }, {
      "left" : "referenceAliases();",
      "right" : "referenceAliases();",
      "info" : "ExpressionStatement[34768-34787]:ExpressionStatement[34725-34744]"
    }, {
      "left" : "calculateReferences();",
      "right" : "calculateReferences();",
      "info" : "ExpressionStatement[34793-34815]:ExpressionStatement[34750-34772]"
    }, {
      "left" : "if (removeUnreferenced)",
      "right" : "if (removeUnreferenced)",
      "info" : "IfStatement[34821-34880]:IfStatement[34778-34837]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34845-34880]:Block[34802-34837]"
    }, {
      "left" : "removeUnreferenced();",
      "right" : "removeUnreferenced();",
      "info" : "ExpressionStatement[34853-34874]:ExpressionStatement[34810-34831]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[34951-34958]:Modifier[34908-34915]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[34959-34963]:PrimitiveType[34916-34920]"
    }, {
      "left" : "recordAlias",
      "right" : "recordAlias",
      "info" : "SimpleName[34964-34975]:SimpleName[34921-34932]"
    }, {
      "left" : "String fromName",
      "right" : "String fromName",
      "info" : "SingleVariableDeclaration[34976-34991]:SingleVariableDeclaration[34933-34948]"
    }, {
      "left" : "String toName",
      "right" : "String toName",
      "info" : "SingleVariableDeclaration[34993-35006]:SingleVariableDeclaration[34950-34963]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35008-36337]:Block[34965-36294]"
    }, {
      "left" : "recordReference(fromName, toName, RefType.REGULAR);",
      "right" : "recordReference(fromName, toName, RefType.REGULAR);",
      "info" : "ExpressionStatement[35014-35065]:ExpressionStatement[34971-35022]"
    }, {
      "left" : "AliasSet toNameAliasSet = aliases.get(toName);",
      "right" : "AliasSet toNameAliasSet = aliases.get(toName);",
      "info" : "VariableDeclarationStatement[35559-35605]:VariableDeclarationStatement[35516-35562]"
    }, {
      "left" : "AliasSet fromNameAliasSet = aliases.get(fromName);",
      "right" : "AliasSet fromNameAliasSet = aliases.get(fromName);",
      "info" : "VariableDeclarationStatement[35610-35660]:VariableDeclarationStatement[35567-35617]"
    }, {
      "left" : "AliasSet resultSet = null;",
      "right" : "AliasSet resultSet = null;",
      "info" : "VariableDeclarationStatement[35665-35691]:VariableDeclarationStatement[35622-35648]"
    }, {
      "left" : "if (toNameAliasSet == null && fromNameAliasSet == null)",
      "right" : "if (toNameAliasSet == null && fromNameAliasSet == null)",
      "info" : "IfStatement[35696-36259]:IfStatement[35653-36216]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35752-35809]:Block[35709-35766]"
    }, {
      "left" : "resultSet = new AliasSet(toName, fromName);",
      "right" : "resultSet = new AliasSet(toName, fromName);",
      "info" : "ExpressionStatement[35760-35803]:ExpressionStatement[35717-35760]"
    }, {
      "left" : "if (toNameAliasSet != null && fromNameAliasSet != null)",
      "right" : "if (toNameAliasSet != null && fromNameAliasSet != null)",
      "info" : "IfStatement[35815-36259]:IfStatement[35772-36216]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35871-36063]:Block[35828-36020]"
    }, {
      "left" : "resultSet = toNameAliasSet;",
      "right" : "resultSet = toNameAliasSet;",
      "info" : "ExpressionStatement[35879-35906]:ExpressionStatement[35836-35863]"
    }, {
      "left" : "resultSet.names.addAll(fromNameAliasSet.names);",
      "right" : "resultSet.names.addAll(fromNameAliasSet.names);",
      "info" : "ExpressionStatement[35913-35960]:ExpressionStatement[35870-35917]"
    }, {
      "left" : "for (String name : fromNameAliasSet.names)",
      "right" : "for (String name : fromNameAliasSet.names)",
      "info" : "EnhancedForStatement[35967-36057]:EnhancedForStatement[35924-36014]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36010-36057]:Block[35967-36014]"
    }, {
      "left" : "aliases.put(name, resultSet);",
      "right" : "aliases.put(name, resultSet);",
      "info" : "ExpressionStatement[36020-36049]:ExpressionStatement[35977-36006]"
    }, {
      "left" : "if (toNameAliasSet != null)",
      "right" : "if (toNameAliasSet != null)",
      "info" : "IfStatement[36069-36259]:IfStatement[36026-36216]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36097-36175]:Block[36054-36132]"
    }, {
      "left" : "resultSet = toNameAliasSet;",
      "right" : "resultSet = toNameAliasSet;",
      "info" : "ExpressionStatement[36105-36132]:ExpressionStatement[36062-36089]"
    }, {
      "left" : "resultSet.names.add(fromName);",
      "right" : "resultSet.names.add(fromName);",
      "info" : "ExpressionStatement[36139-36169]:ExpressionStatement[36096-36126]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36181-36259]:Block[36138-36216]"
    }, {
      "left" : "resultSet = fromNameAliasSet;",
      "right" : "resultSet = fromNameAliasSet;",
      "info" : "ExpressionStatement[36189-36218]:ExpressionStatement[36146-36175]"
    }, {
      "left" : "resultSet.names.add(toName);",
      "right" : "resultSet.names.add(toName);",
      "info" : "ExpressionStatement[36225-36253]:ExpressionStatement[36182-36210]"
    }, {
      "left" : "aliases.put(fromName, resultSet);",
      "right" : "aliases.put(fromName, resultSet);",
      "info" : "ExpressionStatement[36264-36297]:ExpressionStatement[36221-36254]"
    }, {
      "left" : "aliases.put(toName, resultSet);",
      "right" : "aliases.put(toName, resultSet);",
      "info" : "ExpressionStatement[36302-36333]:ExpressionStatement[36259-36290]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[36409-36416]:Modifier[36366-36373]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[36417-36421]:PrimitiveType[36374-36378]"
    }, {
      "left" : "recordReference",
      "right" : "recordReference",
      "info" : "SimpleName[36422-36437]:SimpleName[36379-36394]"
    }, {
      "left" : "String fromName",
      "right" : "String fromName",
      "info" : "SingleVariableDeclaration[36438-36453]:SingleVariableDeclaration[36395-36410]"
    }, {
      "left" : "String toName",
      "right" : "String toName",
      "info" : "SingleVariableDeclaration[36455-36468]:SingleVariableDeclaration[36412-36425]"
    }, {
      "left" : "RefType depType",
      "right" : "RefType depType",
      "info" : "SingleVariableDeclaration[36501-36516]:SingleVariableDeclaration[36458-36473]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36518-36906]:Block[36475-36863]"
    }, {
      "left" : "if (fromName.equals(toName))",
      "right" : "if (fromName.equals(toName))",
      "info" : "IfStatement[36524-36623]:IfStatement[36481-36580]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36553-36623]:Block[36510-36580]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[36610-36617]:ReturnStatement[36567-36574]"
    }, {
      "left" : "JsName from = getName(fromName, true);",
      "right" : "JsName from = getName(fromName, true);",
      "info" : "VariableDeclarationStatement[36629-36667]:VariableDeclarationStatement[36586-36624]"
    }, {
      "left" : "JsName to = getName(toName, true);",
      "right" : "JsName to = getName(toName, true);",
      "info" : "VariableDeclarationStatement[36672-36706]:VariableDeclarationStatement[36629-36663]"
    }, {
      "left" : "referenceGraph.createNode(from);",
      "right" : "referenceGraph.createNode(from);",
      "info" : "ExpressionStatement[36711-36743]:ExpressionStatement[36668-36700]"
    }, {
      "left" : "referenceGraph.createNode(to);",
      "right" : "referenceGraph.createNode(to);",
      "info" : "ExpressionStatement[36748-36778]:ExpressionStatement[36705-36735]"
    }, {
      "left" : "if (!referenceGraph.isConnectedInDirection(from, depType, to))",
      "right" : "if (!referenceGraph.isConnectedInDirection(from, depType, to))",
      "info" : "IfStatement[36783-36902]:IfStatement[36740-36859]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36846-36902]:Block[36803-36859]"
    }, {
      "left" : "referenceGraph.connect(from, depType, to);",
      "right" : "referenceGraph.connect(from, depType, to);",
      "info" : "ExpressionStatement[36854-36896]:ExpressionStatement[36811-36853]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[36963-36967]:PrimitiveType[36920-36924]"
    }, {
      "left" : "removeUnreferenced",
      "right" : "removeUnreferenced",
      "info" : "SimpleName[36968-36986]:SimpleName[36925-36943]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36989-37310]:Block[36946-37267]"
    }, {
      "left" : "RemoveListener listener = new RemoveListener();",
      "right" : "RemoveListener listener = new RemoveListener();",
      "info" : "VariableDeclarationStatement[36995-37042]:VariableDeclarationStatement[36952-36999]"
    }, {
      "left" : "changeProxy.registerListener(listener);",
      "right" : "changeProxy.registerListener(listener);",
      "info" : "ExpressionStatement[37047-37086]:ExpressionStatement[37004-37043]"
    }, {
      "left" : "for (RefNode refNode : refNodes)",
      "right" : "for (RefNode refNode : refNodes)",
      "info" : "EnhancedForStatement[37092-37259]:EnhancedForStatement[37049-37216]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37125-37259]:Block[37082-37216]"
    }, {
      "left" : "JsName name = refNode.name();",
      "right" : "JsName name = refNode.name();",
      "info" : "VariableDeclarationStatement[37133-37162]:VariableDeclarationStatement[37090-37119]"
    }, {
      "left" : "if (!name.referenced && !name.externallyDefined)",
      "right" : "if (!name.referenced && !name.externallyDefined)",
      "info" : "IfStatement[37169-37253]:IfStatement[37126-37210]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37218-37253]:Block[37175-37210]"
    }, {
      "left" : "refNode.remove();",
      "right" : "refNode.remove();",
      "info" : "ExpressionStatement[37228-37245]:ExpressionStatement[37185-37202]"
    }, {
      "left" : "changeProxy.unregisterListener(listener);",
      "right" : "changeProxy.unregisterListener(listener);",
      "info" : "ExpressionStatement[37265-37306]:ExpressionStatement[37222-37263]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[37385-37391]:SimpleType[37342-37348]"
    }, {
      "left" : "getHtmlReport",
      "right" : "getHtmlReport",
      "info" : "SimpleName[37392-37405]:SimpleName[37349-37362]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37408-40022]:Block[37365-39979]"
    }, {
      "left" : "StringBuilder sb = new StringBuilder();",
      "right" : "StringBuilder sb = new StringBuilder();",
      "info" : "VariableDeclarationStatement[37414-37453]:VariableDeclarationStatement[37371-37410]"
    }, {
      "left" : "sb.append(\"<html><body><style type=\\\"text/css\\\">\"\n        + \"body, td, p {font-family: Arial; font-size: 83%} \"\n        + \"ul {margin-top:2px; margin-left:0px; padding-left:1em;} \"\n        + \"li {margin-top:3px; margin-left:24px; padding-left:0px;\"\n        + \"padding-bottom: 4px}</style>\");",
      "right" : "sb.append(\"<html><body><style type=\\\"text/css\\\">\"\n        + \"body, td, p {font-family: Arial; font-size: 83%} \"\n        + \"ul {margin-top:2px; margin-left:0px; padding-left:1em;} \"\n        + \"li {margin-top:3px; margin-left:24px; padding-left:0px;\"\n        + \"padding-bottom: 4px}</style>\");",
      "info" : "ExpressionStatement[37458-37749]:ExpressionStatement[37415-37706]"
    }, {
      "left" : "sb.append(\"OVERALL STATS<ul>\");",
      "right" : "sb.append(\"OVERALL STATS<ul>\");",
      "info" : "ExpressionStatement[37754-37785]:ExpressionStatement[37711-37742]"
    }, {
      "left" : "appendListItem(sb, \"Total Names: \" + countOf(TriState.BOTH, TriState.BOTH));",
      "right" : "appendListItem(sb, \"Total Names: \" + countOf(TriState.BOTH, TriState.BOTH));",
      "info" : "ExpressionStatement[37790-37866]:ExpressionStatement[37747-37823]"
    }, {
      "left" : "appendListItem(sb, \"Total Classes: \"\n        + countOf(TriState.TRUE, TriState.BOTH));",
      "right" : "appendListItem(sb, \"Total Classes: \"\n        + countOf(TriState.TRUE, TriState.BOTH));",
      "info" : "ExpressionStatement[37871-37957]:ExpressionStatement[37828-37914]"
    }, {
      "left" : "appendListItem(sb, \"Total Static Functions: \"\n        + countOf(TriState.FALSE, TriState.BOTH));",
      "right" : "appendListItem(sb, \"Total Static Functions: \"\n        + countOf(TriState.FALSE, TriState.BOTH));",
      "info" : "ExpressionStatement[37962-38058]:ExpressionStatement[37919-38015]"
    }, {
      "left" : "appendListItem(sb, \"Referenced Names: \"\n        + countOf(TriState.BOTH, TriState.TRUE));",
      "right" : "appendListItem(sb, \"Referenced Names: \"\n        + countOf(TriState.BOTH, TriState.TRUE));",
      "info" : "ExpressionStatement[38063-38152]:ExpressionStatement[38020-38109]"
    }, {
      "left" : "appendListItem(sb, \"Referenced Classes: \"\n        + countOf(TriState.TRUE, TriState.TRUE));",
      "right" : "appendListItem(sb, \"Referenced Classes: \"\n        + countOf(TriState.TRUE, TriState.TRUE));",
      "info" : "ExpressionStatement[38157-38248]:ExpressionStatement[38114-38205]"
    }, {
      "left" : "appendListItem(sb, \"Referenced Functions: \"\n        + countOf(TriState.FALSE, TriState.TRUE));",
      "right" : "appendListItem(sb, \"Referenced Functions: \"\n        + countOf(TriState.FALSE, TriState.TRUE));",
      "info" : "ExpressionStatement[38253-38347]:ExpressionStatement[38210-38304]"
    }, {
      "left" : "sb.append(\"</ul>\");",
      "right" : "sb.append(\"</ul>\");",
      "info" : "ExpressionStatement[38352-38371]:ExpressionStatement[38309-38328]"
    }, {
      "left" : "sb.append(\"ALL NAMES<ul>\\n\");",
      "right" : "sb.append(\"ALL NAMES<ul>\\n\");",
      "info" : "ExpressionStatement[38377-38406]:ExpressionStatement[38334-38363]"
    }, {
      "left" : "for (JsName node : allNames.values())",
      "right" : "for (JsName node : allNames.values())",
      "info" : "EnhancedForStatement[38411-39934]:EnhancedForStatement[38368-39891]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38449-39934]:Block[38406-39891]"
    }, {
      "left" : "sb.append(\"<li>\" + nameAnchor(node.name) + \"<ul>\");",
      "right" : "sb.append(\"<li>\" + nameAnchor(node.name) + \"<ul>\");",
      "info" : "ExpressionStatement[38457-38508]:ExpressionStatement[38414-38465]"
    }, {
      "left" : "if (node.prototypeNames.size() > 0)",
      "right" : "if (node.prototypeNames.size() > 0)",
      "info" : "IfStatement[38515-38833]:IfStatement[38472-38790]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38551-38833]:Block[38508-38790]"
    }, {
      "left" : "sb.append(\"<li>PROTOTYPES: \");",
      "right" : "sb.append(\"<li>PROTOTYPES: \");",
      "info" : "ExpressionStatement[38561-38591]:ExpressionStatement[38518-38548]"
    }, {
      "left" : "Iterator<String> protoIter = node.prototypeNames.iterator();",
      "right" : "Iterator<String> protoIter = node.prototypeNames.iterator();",
      "info" : "VariableDeclarationStatement[38600-38660]:VariableDeclarationStatement[38557-38617]"
    }, {
      "left" : "while (protoIter.hasNext())",
      "right" : "while (protoIter.hasNext())",
      "info" : "WhileStatement[38669-38825]:WhileStatement[38626-38782]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38697-38825]:Block[38654-38782]"
    }, {
      "left" : "sb.append(protoIter.next());",
      "right" : "sb.append(protoIter.next());",
      "info" : "ExpressionStatement[38709-38737]:ExpressionStatement[38666-38694]"
    }, {
      "left" : "if (protoIter.hasNext())",
      "right" : "if (protoIter.hasNext())",
      "info" : "IfStatement[38748-38815]:IfStatement[38705-38772]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38773-38815]:Block[38730-38772]"
    }, {
      "left" : "sb.append(\", \");",
      "right" : "sb.append(\", \");",
      "info" : "ExpressionStatement[38787-38803]:ExpressionStatement[38744-38760]"
    }, {
      "left" : "if (referenceGraph.hasNode(node))",
      "right" : "if (referenceGraph.hasNode(node))",
      "info" : "IfStatement[38841-39871]:IfStatement[38798-39828]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38875-39871]:Block[38832-39828]"
    }, {
      "left" : "List<DiGraphEdge<JsName, RefType>> refersTo =\n            referenceGraph.getOutEdges(node);",
      "right" : "List<DiGraphEdge<JsName, RefType>> refersTo =\n            referenceGraph.getOutEdges(node);",
      "info" : "VariableDeclarationStatement[38885-38976]:VariableDeclarationStatement[38842-38933]"
    }, {
      "left" : "if (refersTo.size() > 0)",
      "right" : "if (refersTo.size() > 0)",
      "info" : "IfStatement[38985-39351]:IfStatement[38942-39308]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39010-39351]:Block[38967-39308]"
    }, {
      "left" : "sb.append(\"<li>REFERS TO: \");",
      "right" : "sb.append(\"<li>REFERS TO: \");",
      "info" : "ExpressionStatement[39022-39051]:ExpressionStatement[38979-39008]"
    }, {
      "left" : "Iterator<DiGraphEdge<JsName, RefType>> toIter = refersTo.iterator();",
      "right" : "Iterator<DiGraphEdge<JsName, RefType>> toIter = refersTo.iterator();",
      "info" : "VariableDeclarationStatement[39062-39130]:VariableDeclarationStatement[39019-39087]"
    }, {
      "left" : "while (toIter.hasNext())",
      "right" : "while (toIter.hasNext())",
      "info" : "WhileStatement[39141-39341]:WhileStatement[39098-39298]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39166-39341]:Block[39123-39298]"
    }, {
      "left" : "sb.append(nameLink(toIter.next().getDestination().getValue().name));",
      "right" : "sb.append(nameLink(toIter.next().getDestination().getValue().name));",
      "info" : "ExpressionStatement[39180-39248]:ExpressionStatement[39137-39205]"
    }, {
      "left" : "if (toIter.hasNext())",
      "right" : "if (toIter.hasNext())",
      "info" : "IfStatement[39261-39329]:IfStatement[39218-39286]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39283-39329]:Block[39240-39286]"
    }, {
      "left" : "sb.append(\", \");",
      "right" : "sb.append(\", \");",
      "info" : "ExpressionStatement[39299-39315]:ExpressionStatement[39256-39272]"
    }, {
      "left" : "List<DiGraphEdge<JsName, RefType>> referencedBy =\n            referenceGraph.getInEdges(node);",
      "right" : "List<DiGraphEdge<JsName, RefType>> referencedBy =\n            referenceGraph.getInEdges(node);",
      "info" : "VariableDeclarationStatement[39361-39455]:VariableDeclarationStatement[39318-39412]"
    }, {
      "left" : "if (referencedBy.size() > 0)",
      "right" : "if (referencedBy.size() > 0)",
      "info" : "IfStatement[39464-39863]:IfStatement[39421-39820]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39493-39863]:Block[39450-39820]"
    }, {
      "left" : "sb.append(\"<li>REFERENCED BY: \");",
      "right" : "sb.append(\"<li>REFERENCED BY: \");",
      "info" : "ExpressionStatement[39505-39538]:ExpressionStatement[39462-39495]"
    }, {
      "left" : "Iterator<DiGraphEdge<JsName, RefType>> fromIter = refersTo.iterator();",
      "right" : "Iterator<DiGraphEdge<JsName, RefType>> fromIter = refersTo.iterator();",
      "info" : "VariableDeclarationStatement[39549-39619]:VariableDeclarationStatement[39506-39576]"
    }, {
      "left" : "while (fromIter.hasNext())",
      "right" : "while (fromIter.hasNext())",
      "info" : "WhileStatement[39630-39853]:WhileStatement[39587-39810]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39657-39853]:Block[39614-39810]"
    }, {
      "left" : "sb.append(\n                nameLink(fromIter.next().getDestination().getValue().name));",
      "right" : "sb.append(\n                nameLink(fromIter.next().getDestination().getValue().name));",
      "info" : "ExpressionStatement[39671-39758]:ExpressionStatement[39628-39715]"
    }, {
      "left" : "if (fromIter.hasNext())",
      "right" : "if (fromIter.hasNext())",
      "info" : "IfStatement[39771-39841]:IfStatement[39728-39798]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39795-39841]:Block[39752-39798]"
    }, {
      "left" : "sb.append(\", \");",
      "right" : "sb.append(\", \");",
      "info" : "ExpressionStatement[39811-39827]:ExpressionStatement[39768-39784]"
    }, {
      "left" : "sb.append(\"</li>\");",
      "right" : "sb.append(\"</li>\");",
      "info" : "ExpressionStatement[39878-39897]:ExpressionStatement[39835-39854]"
    }, {
      "left" : "sb.append(\"</ul></li>\");",
      "right" : "sb.append(\"</ul></li>\");",
      "info" : "ExpressionStatement[39904-39928]:ExpressionStatement[39861-39885]"
    }, {
      "left" : "sb.append(\"</ul>\");",
      "right" : "sb.append(\"</ul>\");",
      "info" : "ExpressionStatement[39939-39958]:ExpressionStatement[39896-39915]"
    }, {
      "left" : "sb.append(\"</body></html>\");",
      "right" : "sb.append(\"</body></html>\");",
      "info" : "ExpressionStatement[39963-39991]:ExpressionStatement[39920-39948]"
    }, {
      "left" : "return sb.toString();",
      "right" : "return sb.toString();",
      "info" : "ReturnStatement[39997-40018]:ReturnStatement[39954-39975]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[40026-40033]:Modifier[39983-39990]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[40034-40038]:PrimitiveType[39991-39995]"
    }, {
      "left" : "appendListItem",
      "right" : "appendListItem",
      "info" : "SimpleName[40039-40053]:SimpleName[39996-40010]"
    }, {
      "left" : "StringBuilder sb",
      "right" : "StringBuilder sb",
      "info" : "SingleVariableDeclaration[40054-40070]:SingleVariableDeclaration[40011-40027]"
    }, {
      "left" : "String text",
      "right" : "String text",
      "info" : "SingleVariableDeclaration[40072-40083]:SingleVariableDeclaration[40029-40040]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40085-40132]:Block[40042-40089]"
    }, {
      "left" : "sb.append(\"<li>\" + text + \"</li>\\n\");",
      "right" : "sb.append(\"<li>\" + text + \"</li>\\n\");",
      "info" : "ExpressionStatement[40091-40128]:ExpressionStatement[40048-40085]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[40136-40143]:Modifier[40093-40100]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[40144-40150]:SimpleType[40101-40107]"
    }, {
      "left" : "nameLink",
      "right" : "nameLink",
      "info" : "SimpleName[40151-40159]:SimpleName[40108-40116]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[40160-40171]:SingleVariableDeclaration[40117-40128]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40173-40235]:Block[40130-40192]"
    }, {
      "left" : "return \"<a href=\\\"#\" + name + \"\\\">\" + name + \"</a>\";",
      "right" : "return \"<a href=\\\"#\" + name + \"\\\">\" + name + \"</a>\";",
      "info" : "ReturnStatement[40179-40231]:ReturnStatement[40136-40188]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[40239-40246]:Modifier[40196-40203]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[40247-40253]:SimpleType[40204-40210]"
    }, {
      "left" : "nameAnchor",
      "right" : "nameAnchor",
      "info" : "SimpleName[40254-40264]:SimpleName[40211-40221]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[40265-40276]:SingleVariableDeclaration[40222-40233]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40278-40339]:Block[40235-40296]"
    }, {
      "left" : "return \"<a name=\\\"\" + name + \"\\\">\" + name + \"</a>\";",
      "right" : "return \"<a name=\\\"\" + name + \"\\\">\" + name + \"</a>\";",
      "info" : "ReturnStatement[40284-40335]:ReturnStatement[40241-40292]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[40661-40668]:Modifier[40618-40625]"
    }, {
      "left" : "JsName",
      "right" : "JsName",
      "info" : "SimpleType[40669-40675]:SimpleType[40626-40632]"
    }, {
      "left" : "getName",
      "right" : "getName",
      "info" : "SimpleName[40676-40683]:SimpleName[40633-40640]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[40684-40695]:SingleVariableDeclaration[40641-40652]"
    }, {
      "left" : "boolean canCreate",
      "right" : "boolean canCreate",
      "info" : "SingleVariableDeclaration[40697-40714]:SingleVariableDeclaration[40654-40671]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40716-40803]:Block[40673-40760]"
    }, {
      "left" : "if (canCreate)",
      "right" : "if (canCreate)",
      "info" : "IfStatement[40722-40768]:IfStatement[40679-40725]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40737-40768]:Block[40694-40725]"
    }, {
      "left" : "createName(name);",
      "right" : "createName(name);",
      "info" : "ExpressionStatement[40745-40762]:ExpressionStatement[40702-40719]"
    }, {
      "left" : "return allNames.get(name);",
      "right" : "return allNames.get(name);",
      "info" : "ReturnStatement[40773-40799]:ReturnStatement[40730-40756]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[40947-40954]:Modifier[40904-40911]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[40955-40959]:PrimitiveType[40912-40916]"
    }, {
      "left" : "createName",
      "right" : "createName",
      "info" : "SimpleName[40960-40970]:SimpleName[40917-40927]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[40971-40982]:SingleVariableDeclaration[40928-40939]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40984-41135]:Block[40941-41092]"
    }, {
      "left" : "JsName jsn = allNames.get(name);",
      "right" : "JsName jsn = allNames.get(name);",
      "info" : "VariableDeclarationStatement[40990-41022]:VariableDeclarationStatement[40947-40979]"
    }, {
      "left" : "if (jsn == null)",
      "right" : "if (jsn == null)",
      "info" : "IfStatement[41027-41131]:IfStatement[40984-41088]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41044-41131]:Block[41001-41088]"
    }, {
      "left" : "jsn = new JsName();",
      "right" : "jsn = new JsName();",
      "info" : "ExpressionStatement[41052-41071]:ExpressionStatement[41009-41028]"
    }, {
      "left" : "jsn.name = name;",
      "right" : "jsn.name = name;",
      "info" : "ExpressionStatement[41078-41094]:ExpressionStatement[41035-41051]"
    }, {
      "left" : "allNames.put(name, jsn);",
      "right" : "allNames.put(name, jsn);",
      "info" : "ExpressionStatement[41101-41125]:ExpressionStatement[41058-41082]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[42163-42170]:Modifier[42120-42127]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[42171-42175]:PrimitiveType[42128-42132]"
    }, {
      "left" : "referenceAliases",
      "right" : "referenceAliases",
      "info" : "SimpleName[42176-42192]:SimpleName[42133-42149]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42195-42535]:Block[42152-42492]"
    }, {
      "left" : "for (Map.Entry<String, AliasSet> entry : aliases.entrySet())",
      "right" : "for (Map.Entry<String, AliasSet> entry : aliases.entrySet())",
      "info" : "EnhancedForStatement[42201-42531]:EnhancedForStatement[42158-42488]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42262-42531]:Block[42219-42488]"
    }, {
      "left" : "JsName name = getName(entry.getKey(), false);",
      "right" : "JsName name = getName(entry.getKey(), false);",
      "info" : "VariableDeclarationStatement[42270-42315]:VariableDeclarationStatement[42227-42272]"
    }, {
      "left" : "if (name.hasWrittenDescendants || name.hasInstanceOfReference)",
      "right" : "if (name.hasWrittenDescendants || name.hasInstanceOfReference)",
      "info" : "IfStatement[42322-42525]:IfStatement[42279-42482]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42385-42525]:Block[42342-42482]"
    }, {
      "left" : "for (String alias : entry.getValue().names)",
      "right" : "for (String alias : entry.getValue().names)",
      "info" : "EnhancedForStatement[42395-42517]:EnhancedForStatement[42352-42474]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42439-42517]:Block[42396-42474]"
    }, {
      "left" : "recordReference(alias, entry.getKey(), RefType.REGULAR);",
      "right" : "recordReference(alias, entry.getKey(), RefType.REGULAR);",
      "info" : "ExpressionStatement[42451-42507]:ExpressionStatement[42408-42464]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[42695-42702]:Modifier[42652-42659]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[42703-42707]:PrimitiveType[42660-42664]"
    }, {
      "left" : "referenceParentNames",
      "right" : "referenceParentNames",
      "info" : "SimpleName[42708-42728]:SimpleName[42665-42685]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42731-43489]:Block[42688-43446]"
    }, {
      "left" : "Set<JsName> allNamesCopy = Sets.newHashSet(allNames.values());",
      "right" : "Set<JsName> allNamesCopy = Sets.newHashSet(allNames.values());",
      "info" : "VariableDeclarationStatement[42840-42902]:VariableDeclarationStatement[42797-42859]"
    }, {
      "left" : "for (JsName name : allNamesCopy)",
      "right" : "for (JsName name : allNamesCopy)",
      "info" : "EnhancedForStatement[42908-43485]:EnhancedForStatement[42865-43442]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42941-43485]:Block[42898-43442]"
    }, {
      "left" : "String curName = name.name;",
      "right" : "String curName = name.name;",
      "info" : "VariableDeclarationStatement[42949-42976]:VariableDeclarationStatement[42906-42933]"
    }, {
      "left" : "JsName curJsName = name;",
      "right" : "JsName curJsName = name;",
      "info" : "VariableDeclarationStatement[42983-43007]:VariableDeclarationStatement[42940-42964]"
    }, {
      "left" : "while (curName.indexOf('.') != -1)",
      "right" : "while (curName.indexOf('.') != -1)",
      "info" : "WhileStatement[43014-43479]:WhileStatement[42971-43436]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43049-43479]:Block[43006-43436]"
    }, {
      "left" : "String parentName = curName.substring(0, curName.lastIndexOf('.'));",
      "right" : "String parentName = curName.substring(0, curName.lastIndexOf('.'));",
      "info" : "VariableDeclarationStatement[43059-43126]:VariableDeclarationStatement[43016-43083]"
    }, {
      "left" : "if (!globalNames.contains(parentName))",
      "right" : "if (!globalNames.contains(parentName))",
      "info" : "IfStatement[43135-43441]:IfStatement[43092-43398]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43174-43441]:Block[43131-43398]"
    }, {
      "left" : "JsName parentJsName = getName(parentName, true);",
      "right" : "JsName parentJsName = getName(parentName, true);",
      "info" : "VariableDeclarationStatement[43187-43235]:VariableDeclarationStatement[43144-43192]"
    }, {
      "left" : "recordReference(curJsName.name, parentJsName.name, RefType.REGULAR);",
      "right" : "recordReference(curJsName.name, parentJsName.name, RefType.REGULAR);",
      "info" : "ExpressionStatement[43247-43315]:ExpressionStatement[43204-43272]"
    }, {
      "left" : "recordReference(parentJsName.name, curJsName.name, RefType.REGULAR);",
      "right" : "recordReference(parentJsName.name, curJsName.name, RefType.REGULAR);",
      "info" : "ExpressionStatement[43326-43394]:ExpressionStatement[43283-43351]"
    }, {
      "left" : "curJsName = parentJsName;",
      "right" : "curJsName = parentJsName;",
      "info" : "ExpressionStatement[43406-43431]:ExpressionStatement[43363-43388]"
    }, {
      "left" : "curName = parentName;",
      "right" : "curName = parentName;",
      "info" : "ExpressionStatement[43450-43471]:ExpressionStatement[43407-43428]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[43771-43778]:Modifier[43728-43735]"
    }, {
      "left" : "NameInformation",
      "right" : "NameInformation",
      "info" : "SimpleType[43779-43794]:SimpleType[43736-43751]"
    }, {
      "left" : "createNameInformation",
      "right" : "createNameInformation",
      "info" : "SimpleName[43795-43816]:SimpleName[43752-43773]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[43817-43832]:SingleVariableDeclaration[43774-43789]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[43834-43840]:SingleVariableDeclaration[43791-43797]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[43848-43859]:SingleVariableDeclaration[43805-43816]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43861-47496]:Block[43818-47453]"
    }, {
      "left" : "String name = \"\";",
      "right" : "String name = \"\";",
      "info" : "VariableDeclarationStatement[43977-43994]:VariableDeclarationStatement[43934-43951]"
    }, {
      "left" : "Node rootNameNode = n;",
      "right" : "Node rootNameNode = n;",
      "info" : "VariableDeclarationStatement[43999-44021]:VariableDeclarationStatement[43956-43978]"
    }, {
      "left" : "boolean bNameWasShortened = false;",
      "right" : "boolean bNameWasShortened = false;",
      "info" : "VariableDeclarationStatement[44026-44060]:VariableDeclarationStatement[43983-44017]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[44065-45304]:WhileStatement[44022-45261]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44078-45304]:Block[44035-45261]"
    }, {
      "left" : "if (NodeUtil.isGet(rootNameNode))",
      "right" : "if (NodeUtil.isGet(rootNameNode))",
      "info" : "IfStatement[44086-45298]:IfStatement[44043-45255]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44120-44474]:Block[44077-44431]"
    }, {
      "left" : "Node prop = rootNameNode.getLastChild();",
      "right" : "Node prop = rootNameNode.getLastChild();",
      "info" : "VariableDeclarationStatement[44130-44170]:VariableDeclarationStatement[44087-44127]"
    }, {
      "left" : "if (rootNameNode.isGetProp())",
      "right" : "if (rootNameNode.isGetProp())",
      "info" : "IfStatement[44179-44413]:IfStatement[44136-44370]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44209-44268]:Block[44166-44225]"
    }, {
      "left" : "name = \".\" + prop.getString() + name;",
      "right" : "name = \".\" + prop.getString() + name;",
      "info" : "ExpressionStatement[44221-44258]:ExpressionStatement[44178-44215]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44274-44413]:Block[44231-44370]"
    }, {
      "left" : "bNameWasShortened = true;",
      "right" : "bNameWasShortened = true;",
      "info" : "ExpressionStatement[44357-44382]:ExpressionStatement[44314-44339]"
    }, {
      "left" : "name = \"\";",
      "right" : "name = \"\";",
      "info" : "ExpressionStatement[44393-44403]:ExpressionStatement[44350-44360]"
    }, {
      "left" : "rootNameNode = rootNameNode.getFirstChild();",
      "right" : "rootNameNode = rootNameNode.getFirstChild();",
      "info" : "ExpressionStatement[44422-44466]:ExpressionStatement[44379-44423]"
    }, {
      "left" : "if (NodeUtil.isObjectLitKey(\n          rootNameNode, rootNameNode.getParent()))",
      "right" : "if (NodeUtil.isObjectLitKey(\n          rootNameNode, rootNameNode.getParent()))",
      "info" : "IfStatement[44480-45298]:IfStatement[44437-45255]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44560-45268]:Block[44517-45225]"
    }, {
      "left" : "name = \".\" + rootNameNode.getString() + name;",
      "right" : "name = \".\" + rootNameNode.getString() + name;",
      "info" : "ExpressionStatement[44570-44615]:ExpressionStatement[44527-44572]"
    }, {
      "left" : "Node objLit = rootNameNode.getParent();",
      "right" : "Node objLit = rootNameNode.getParent();",
      "info" : "VariableDeclarationStatement[44694-44733]:VariableDeclarationStatement[44651-44690]"
    }, {
      "left" : "Node objLitParent = objLit.getParent();",
      "right" : "Node objLitParent = objLit.getParent();",
      "info" : "VariableDeclarationStatement[44742-44781]:VariableDeclarationStatement[44699-44738]"
    }, {
      "left" : "if (objLitParent.isAssign())",
      "right" : "if (objLitParent.isAssign())",
      "info" : "IfStatement[44790-45260]:IfStatement[44747-45217]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44819-44941]:Block[44776-44898]"
    }, {
      "left" : "rootNameNode = objLitParent.getFirstChild();",
      "right" : "rootNameNode = objLitParent.getFirstChild();",
      "info" : "ExpressionStatement[44887-44931]:ExpressionStatement[44844-44888]"
    }, {
      "left" : "if (objLitParent.isName())",
      "right" : "if (objLitParent.isName())",
      "info" : "IfStatement[44947-45260]:IfStatement[44904-45217]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44974-45072]:Block[44931-45029]"
    }, {
      "left" : "rootNameNode = objLitParent;",
      "right" : "rootNameNode = objLitParent;",
      "info" : "ExpressionStatement[45034-45062]:ExpressionStatement[44991-45019]"
    }, {
      "left" : "if (objLitParent.isString())",
      "right" : "if (objLitParent.isString())",
      "info" : "IfStatement[45078-45260]:IfStatement[45035-45217]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45107-45220]:Block[45064-45177]"
    }, {
      "left" : "rootNameNode = objLitParent;",
      "right" : "rootNameNode = objLitParent;",
      "info" : "ExpressionStatement[45182-45210]:ExpressionStatement[45139-45167]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45226-45260]:Block[45183-45217]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[45238-45250]:ReturnStatement[45195-45207]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45274-45298]:Block[45231-45255]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[45284-45290]:BreakStatement[45241-45247]"
    }, {
      "left" : "if (parent.isCall() && t.inGlobalScope())",
      "right" : "if (parent.isCall() && t.inGlobalScope())",
      "info" : "IfStatement[45418-46200]:IfStatement[45375-46157]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45460-46200]:Block[45417-46157]"
    }, {
      "left" : "CodingConvention convention = compiler.getCodingConvention();",
      "right" : "CodingConvention convention = compiler.getCodingConvention();",
      "info" : "VariableDeclarationStatement[45468-45529]:VariableDeclarationStatement[45425-45486]"
    }, {
      "left" : "SubclassRelationship classes = convention.getClassesDefinedByCall(parent);",
      "right" : "SubclassRelationship classes = convention.getClassesDefinedByCall(parent);",
      "info" : "VariableDeclarationStatement[45536-45610]:VariableDeclarationStatement[45493-45567]"
    }, {
      "left" : "if (classes != null)",
      "right" : "if (classes != null)",
      "info" : "IfStatement[45617-45875]:IfStatement[45574-45832]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45638-45875]:Block[45595-45832]"
    }, {
      "left" : "NameInformation nameInfo = new NameInformation();",
      "right" : "NameInformation nameInfo = new NameInformation();",
      "info" : "VariableDeclarationStatement[45648-45697]:VariableDeclarationStatement[45605-45654]"
    }, {
      "left" : "nameInfo.name = classes.subclassName;",
      "right" : "nameInfo.name = classes.subclassName;",
      "info" : "ExpressionStatement[45706-45743]:ExpressionStatement[45663-45700]"
    }, {
      "left" : "nameInfo.onlyAffectsClassDef = true;",
      "right" : "nameInfo.onlyAffectsClassDef = true;",
      "info" : "ExpressionStatement[45752-45788]:ExpressionStatement[45709-45745]"
    }, {
      "left" : "nameInfo.superclass = classes.superclassName;",
      "right" : "nameInfo.superclass = classes.superclassName;",
      "info" : "ExpressionStatement[45797-45842]:ExpressionStatement[45754-45799]"
    }, {
      "left" : "return nameInfo;",
      "right" : "return nameInfo;",
      "info" : "ReturnStatement[45851-45867]:ReturnStatement[45808-45824]"
    }, {
      "left" : "String singletonGetterClass =\n          convention.getSingletonGetterClassName(parent);",
      "right" : "String singletonGetterClass =\n          convention.getSingletonGetterClassName(parent);",
      "info" : "VariableDeclarationStatement[45883-45970]:VariableDeclarationStatement[45840-45927]"
    }, {
      "left" : "if (singletonGetterClass != null)",
      "right" : "if (singletonGetterClass != null)",
      "info" : "IfStatement[45977-46194]:IfStatement[45934-46151]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46011-46194]:Block[45968-46151]"
    }, {
      "left" : "NameInformation nameInfo = new NameInformation();",
      "right" : "NameInformation nameInfo = new NameInformation();",
      "info" : "VariableDeclarationStatement[46021-46070]:VariableDeclarationStatement[45978-46027]"
    }, {
      "left" : "nameInfo.name = singletonGetterClass;",
      "right" : "nameInfo.name = singletonGetterClass;",
      "info" : "ExpressionStatement[46079-46116]:ExpressionStatement[46036-46073]"
    }, {
      "left" : "nameInfo.onlyAffectsClassDef = true;",
      "right" : "nameInfo.onlyAffectsClassDef = true;",
      "info" : "ExpressionStatement[46125-46161]:ExpressionStatement[46082-46118]"
    }, {
      "left" : "return nameInfo;",
      "right" : "return nameInfo;",
      "info" : "ReturnStatement[46170-46186]:ReturnStatement[46127-46143]"
    }, {
      "left" : "switch (rootNameNode.getType()) {\n      case Token.NAME:\n        // Check whether this is an assignment to a prototype property\n        // of an object defined in the global scope.\n        if (!bNameWasShortened &&\n            n.isGetProp() &&\n            parent.isAssign() &&\n            \"prototype\".equals(n.getLastChild().getString())) {\n          if (createNameInformation(t, n.getFirstChild(), n) != null) {\n            name = rootNameNode.getString() + name;\n            name = name.substring(0, name.length() - PROTOTYPE_SUFFIX_LEN);\n            NameInformation nameInfo = new NameInformation();\n            nameInfo.name = name;\n            return nameInfo;\n          } else {\n            return null;\n          }\n        }\n        return createNameInformation(\n            rootNameNode.getString() + name, t.getScope(), rootNameNode);\n      case Token.THIS:\n        if (t.inGlobalScope()) {\n          NameInformation nameInfo = new NameInformation();\n          if (name.indexOf('.') == 0) {\n            nameInfo.name = name.substring(1);  // strip leading \".\"\n          } else {\n            nameInfo.name = name;\n          }\n          nameInfo.isExternallyReferenceable = true;\n          return nameInfo;\n        }\n        return null;\n      default:\n        return null;\n    }",
      "right" : "switch (rootNameNode.getType()) {\n      case Token.NAME:\n        // Check whether this is an assignment to a prototype property\n        // of an object defined in the global scope.\n        if (!bNameWasShortened &&\n            n.isGetProp() &&\n            parent.isAssign() &&\n            \"prototype\".equals(n.getLastChild().getString())) {\n          if (createNameInformation(t, n.getFirstChild(), n) != null) {\n            name = rootNameNode.getString() + name;\n            name = name.substring(0, name.length() - PROTOTYPE_SUFFIX_LEN);\n            NameInformation nameInfo = new NameInformation();\n            nameInfo.name = name;\n            return nameInfo;\n          } else {\n            return null;\n          }\n        }\n        return createNameInformation(\n            rootNameNode.getString() + name, t.getScope(), rootNameNode);\n      case Token.THIS:\n        if (t.inGlobalScope()) {\n          NameInformation nameInfo = new NameInformation();\n          if (name.indexOf('.') == 0) {\n            nameInfo.name = name.substring(1);  // strip leading \".\"\n          } else {\n            nameInfo.name = name;\n          }\n          nameInfo.isExternallyReferenceable = true;\n          return nameInfo;\n        }\n        return null;\n      default:\n        return null;\n    }",
      "info" : "SwitchStatement[46206-47492]:SwitchStatement[46163-47449]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[46246-46262]:SwitchCase[46203-46219]"
    }, {
      "left" : "if (!bNameWasShortened &&\n            n.isGetProp() &&\n            parent.isAssign() &&\n            \"prototype\".equals(n.getLastChild().getString()))",
      "right" : "if (!bNameWasShortened &&\n            n.isGetProp() &&\n            parent.isAssign() &&\n            \"prototype\".equals(n.getLastChild().getString()))",
      "info" : "IfStatement[46395-46937]:IfStatement[46352-46894]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46545-46937]:Block[46502-46894]"
    }, {
      "left" : "if (createNameInformation(t, n.getFirstChild(), n) != null)",
      "right" : "if (createNameInformation(t, n.getFirstChild(), n) != null)",
      "info" : "IfStatement[46557-46927]:IfStatement[46514-46884]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46617-46883]:Block[46574-46840]"
    }, {
      "left" : "name = rootNameNode.getString() + name;",
      "right" : "name = rootNameNode.getString() + name;",
      "info" : "ExpressionStatement[46631-46670]:ExpressionStatement[46588-46627]"
    }, {
      "left" : "name = name.substring(0, name.length() - PROTOTYPE_SUFFIX_LEN);",
      "right" : "name = name.substring(0, name.length() - PROTOTYPE_SUFFIX_LEN);",
      "info" : "ExpressionStatement[46683-46746]:ExpressionStatement[46640-46703]"
    }, {
      "left" : "NameInformation nameInfo = new NameInformation();",
      "right" : "NameInformation nameInfo = new NameInformation();",
      "info" : "VariableDeclarationStatement[46759-46808]:VariableDeclarationStatement[46716-46765]"
    }, {
      "left" : "nameInfo.name = name;",
      "right" : "nameInfo.name = name;",
      "info" : "ExpressionStatement[46821-46842]:ExpressionStatement[46778-46799]"
    }, {
      "left" : "return nameInfo;",
      "right" : "return nameInfo;",
      "info" : "ReturnStatement[46855-46871]:ReturnStatement[46812-46828]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46889-46927]:Block[46846-46884]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[46903-46915]:ReturnStatement[46860-46872]"
    }, {
      "left" : "return createNameInformation(\n            rootNameNode.getString() + name, t.getScope(), rootNameNode);",
      "right" : "return createNameInformation(\n            rootNameNode.getString() + name, t.getScope(), rootNameNode);",
      "info" : "ReturnStatement[46946-47049]:ReturnStatement[46903-47006]"
    }, {
      "left" : "case Token.THIS:",
      "right" : "case Token.THIS:",
      "info" : "SwitchCase[47056-47072]:SwitchCase[47013-47029]"
    }, {
      "left" : "if (t.inGlobalScope())",
      "right" : "if (t.inGlobalScope())",
      "info" : "IfStatement[47081-47429]:IfStatement[47038-47386]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47104-47429]:Block[47061-47386]"
    }, {
      "left" : "NameInformation nameInfo = new NameInformation();",
      "right" : "NameInformation nameInfo = new NameInformation();",
      "info" : "VariableDeclarationStatement[47116-47165]:VariableDeclarationStatement[47073-47122]"
    }, {
      "left" : "if (name.indexOf('.') == 0)",
      "right" : "if (name.indexOf('.') == 0)",
      "info" : "IfStatement[47176-47339]:IfStatement[47133-47296]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47204-47286]:Block[47161-47243]"
    }, {
      "left" : "nameInfo.name = name.substring(1);",
      "right" : "nameInfo.name = name.substring(1);",
      "info" : "ExpressionStatement[47218-47252]:ExpressionStatement[47175-47209]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47292-47339]:Block[47249-47296]"
    }, {
      "left" : "nameInfo.name = name;",
      "right" : "nameInfo.name = name;",
      "info" : "ExpressionStatement[47306-47327]:ExpressionStatement[47263-47284]"
    }, {
      "left" : "nameInfo.isExternallyReferenceable = true;",
      "right" : "nameInfo.isExternallyReferenceable = true;",
      "info" : "ExpressionStatement[47350-47392]:ExpressionStatement[47307-47349]"
    }, {
      "left" : "return nameInfo;",
      "right" : "return nameInfo;",
      "info" : "ReturnStatement[47403-47419]:ReturnStatement[47360-47376]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[47438-47450]:ReturnStatement[47395-47407]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[47457-47465]:SwitchCase[47414-47422]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[47474-47486]:ReturnStatement[47431-47443]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[47898-47905]:Modifier[47855-47862]"
    }, {
      "left" : "NameInformation",
      "right" : "NameInformation",
      "info" : "SimpleType[47906-47921]:SimpleType[47863-47878]"
    }, {
      "left" : "createNameInformation",
      "right" : "createNameInformation",
      "info" : "SimpleName[47922-47943]:SimpleName[47879-47900]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[47951-47962]:SingleVariableDeclaration[47908-47919]"
    }, {
      "left" : "Scope scope",
      "right" : "Scope scope",
      "info" : "SingleVariableDeclaration[47964-47975]:SingleVariableDeclaration[47921-47932]"
    }, {
      "left" : "Node rootNameNode",
      "right" : "Node rootNameNode",
      "info" : "SingleVariableDeclaration[47977-47994]:SingleVariableDeclaration[47934-47951]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47996-48924]:Block[47953-48881]"
    }, {
      "left" : "String rootName = rootNameNode.getString();",
      "right" : "String rootName = rootNameNode.getString();",
      "info" : "VariableDeclarationStatement[48080-48123]:VariableDeclarationStatement[48037-48080]"
    }, {
      "left" : "Var v = scope.getVar(rootName);",
      "right" : "Var v = scope.getVar(rootName);",
      "info" : "VariableDeclarationStatement[48128-48159]:VariableDeclarationStatement[48085-48116]"
    }, {
      "left" : "boolean isExtern = (v == null && externalNames.contains(rootName));",
      "right" : "boolean isExtern = (v == null && externalNames.contains(rootName));",
      "info" : "VariableDeclarationStatement[48164-48231]:VariableDeclarationStatement[48121-48188]"
    }, {
      "left" : "boolean isGlobalRef = (v != null && v.isGlobal()) || isExtern ||\n        rootName.equals(WINDOW);",
      "right" : "boolean isGlobalRef = (v != null && v.isGlobal()) || isExtern ||\n        rootName.equals(WINDOW);",
      "info" : "VariableDeclarationStatement[48236-48333]:VariableDeclarationStatement[48193-48290]"
    }, {
      "left" : "if (!isGlobalRef)",
      "right" : "if (!isGlobalRef)",
      "info" : "IfStatement[48338-48382]:IfStatement[48295-48339]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48356-48382]:Block[48313-48339]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[48364-48376]:ReturnStatement[48321-48333]"
    }, {
      "left" : "NameInformation nameInfo = new NameInformation();",
      "right" : "NameInformation nameInfo = new NameInformation();",
      "info" : "VariableDeclarationStatement[48388-48437]:VariableDeclarationStatement[48345-48394]"
    }, {
      "left" : "int idx = name.indexOf(PROTOTYPE_SUBSTRING);",
      "right" : "int idx = name.indexOf(PROTOTYPE_SUBSTRING);",
      "info" : "VariableDeclarationStatement[48516-48560]:VariableDeclarationStatement[48473-48517]"
    }, {
      "left" : "if (idx != -1)",
      "right" : "if (idx != -1)",
      "info" : "IfStatement[48565-48771]:IfStatement[48522-48728]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48580-48771]:Block[48537-48728]"
    }, {
      "left" : "nameInfo.isPrototype = true;",
      "right" : "nameInfo.isPrototype = true;",
      "info" : "ExpressionStatement[48588-48616]:ExpressionStatement[48545-48573]"
    }, {
      "left" : "nameInfo.prototypeClass = name.substring(0, idx);",
      "right" : "nameInfo.prototypeClass = name.substring(0, idx);",
      "info" : "ExpressionStatement[48623-48672]:ExpressionStatement[48580-48629]"
    }, {
      "left" : "nameInfo.prototypeProperty = name.substring(\n          idx + PROTOTYPE_SUBSTRING_LEN);",
      "right" : "nameInfo.prototypeProperty = name.substring(\n          idx + PROTOTYPE_SUBSTRING_LEN);",
      "info" : "ExpressionStatement[48679-48765]:ExpressionStatement[48636-48722]"
    }, {
      "left" : "nameInfo.name = name;",
      "right" : "nameInfo.name = name;",
      "info" : "ExpressionStatement[48777-48798]:ExpressionStatement[48734-48755]"
    }, {
      "left" : "nameInfo.isExternallyReferenceable =\n        isExtern || isExternallyReferenceable(scope, name);",
      "right" : "nameInfo.isExternallyReferenceable =\n        isExtern || isExternallyReferenceable(scope, name);",
      "info" : "ExpressionStatement[48803-48899]:ExpressionStatement[48760-48856]"
    }, {
      "left" : "return nameInfo;",
      "right" : "return nameInfo;",
      "info" : "ReturnStatement[48904-48920]:ReturnStatement[48861-48877]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[49193-49200]:Modifier[49150-49157]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[49201-49208]:PrimitiveType[49158-49165]"
    }, {
      "left" : "isExternallyReferenceable",
      "right" : "isExternallyReferenceable",
      "info" : "SimpleName[49209-49234]:SimpleName[49166-49191]"
    }, {
      "left" : "Scope scope",
      "right" : "Scope scope",
      "info" : "SingleVariableDeclaration[49235-49246]:SingleVariableDeclaration[49192-49203]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[49248-49259]:SingleVariableDeclaration[49205-49216]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49261-49523]:Block[49218-49480]"
    }, {
      "left" : "if (compiler.getCodingConvention().isExported(name))",
      "right" : "if (compiler.getCodingConvention().isExported(name))",
      "info" : "IfStatement[49267-49346]:IfStatement[49224-49303]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49320-49346]:Block[49277-49303]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[49328-49340]:ReturnStatement[49285-49297]"
    }, {
      "left" : "if (scope.isLocal())",
      "right" : "if (scope.isLocal())",
      "info" : "IfStatement[49351-49399]:IfStatement[49308-49356]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49372-49399]:Block[49329-49356]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[49380-49393]:ReturnStatement[49337-49350]"
    }, {
      "left" : "for (String s : globalNames)",
      "right" : "for (String s : globalNames)",
      "info" : "EnhancedForStatement[49404-49501]:EnhancedForStatement[49361-49458]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49433-49501]:Block[49390-49458]"
    }, {
      "left" : "if (name.startsWith(s))",
      "right" : "if (name.startsWith(s))",
      "info" : "IfStatement[49441-49495]:IfStatement[49398-49452]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49465-49495]:Block[49422-49452]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[49475-49487]:ReturnStatement[49432-49444]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[49506-49519]:ReturnStatement[49463-49476]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[49617-49624]:Modifier[49574-49581]"
    }, {
      "left" : "NameInformation",
      "right" : "NameInformation",
      "info" : "SimpleType[49625-49640]:SimpleType[49582-49597]"
    }, {
      "left" : "getDependencyScope",
      "right" : "getDependencyScope",
      "info" : "SimpleName[49641-49659]:SimpleName[49598-49616]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[49660-49666]:SingleVariableDeclaration[49617-49623]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49668-49837]:Block[49625-49794]"
    }, {
      "left" : "for (Node node : n.getAncestors())",
      "right" : "for (Node node : n.getAncestors())",
      "info" : "EnhancedForStatement[49674-49815]:EnhancedForStatement[49631-49772]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49709-49815]:Block[49666-49772]"
    }, {
      "left" : "NameInformation ref = scopes.get(node);",
      "right" : "NameInformation ref = scopes.get(node);",
      "info" : "VariableDeclarationStatement[49717-49756]:VariableDeclarationStatement[49674-49713]"
    }, {
      "left" : "if (ref != null)",
      "right" : "if (ref != null)",
      "info" : "IfStatement[49763-49809]:IfStatement[49720-49766]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49780-49809]:Block[49737-49766]"
    }, {
      "left" : "return ref;",
      "right" : "return ref;",
      "info" : "ReturnStatement[49790-49801]:ReturnStatement[49747-49758]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[49821-49833]:ReturnStatement[49778-49790]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[50082-50089]:Modifier[50039-50046]"
    }, {
      "left" : "NameInformation",
      "right" : "NameInformation",
      "info" : "SimpleType[50090-50105]:SimpleType[50047-50062]"
    }, {
      "left" : "getEnclosingFunctionDependencyScope",
      "right" : "getEnclosingFunctionDependencyScope",
      "info" : "SimpleName[50106-50141]:SimpleName[50063-50098]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[50142-50157]:SingleVariableDeclaration[50099-50114]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50159-50889]:Block[50116-50846]"
    }, {
      "left" : "Node function = t.getEnclosingFunction();",
      "right" : "Node function = t.getEnclosingFunction();",
      "info" : "VariableDeclarationStatement[50165-50206]:VariableDeclarationStatement[50122-50163]"
    }, {
      "left" : "if (function == null)",
      "right" : "if (function == null)",
      "info" : "IfStatement[50211-50259]:IfStatement[50168-50216]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50233-50259]:Block[50190-50216]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[50241-50253]:ReturnStatement[50198-50210]"
    }, {
      "left" : "NameInformation ref = scopes.get(function);",
      "right" : "NameInformation ref = scopes.get(function);",
      "info" : "VariableDeclarationStatement[50265-50308]:VariableDeclarationStatement[50222-50265]"
    }, {
      "left" : "if (ref != null)",
      "right" : "if (ref != null)",
      "info" : "IfStatement[50313-50355]:IfStatement[50270-50312]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50330-50355]:Block[50287-50312]"
    }, {
      "left" : "return ref;",
      "right" : "return ref;",
      "info" : "ReturnStatement[50338-50349]:ReturnStatement[50295-50306]"
    }, {
      "left" : "Node parent = function.getParent();",
      "right" : "Node parent = function.getParent();",
      "info" : "VariableDeclarationStatement[50462-50497]:VariableDeclarationStatement[50419-50454]"
    }, {
      "left" : "if (parent != null)",
      "right" : "if (parent != null)",
      "info" : "IfStatement[50502-50867]:IfStatement[50459-50824]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50522-50867]:Block[50479-50824]"
    }, {
      "left" : "while (parent.isHook())",
      "right" : "while (parent.isHook())",
      "info" : "WhileStatement[50643-50713]:WhileStatement[50600-50670]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50667-50713]:Block[50624-50670]"
    }, {
      "left" : "parent = parent.getParent();",
      "right" : "parent = parent.getParent();",
      "info" : "ExpressionStatement[50677-50705]:ExpressionStatement[50634-50662]"
    }, {
      "left" : "if (parent.isName())",
      "right" : "if (parent.isName())",
      "info" : "IfStatement[50721-50786]:IfStatement[50678-50743]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50742-50786]:Block[50699-50743]"
    }, {
      "left" : "return scopes.get(parent);",
      "right" : "return scopes.get(parent);",
      "info" : "ReturnStatement[50752-50778]:ReturnStatement[50709-50735]"
    }, {
      "left" : "if (parent.isAssign())",
      "right" : "if (parent.isAssign())",
      "info" : "IfStatement[50794-50861]:IfStatement[50751-50818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50817-50861]:Block[50774-50818]"
    }, {
      "left" : "return scopes.get(parent);",
      "right" : "return scopes.get(parent);",
      "info" : "ReturnStatement[50827-50853]:ReturnStatement[50784-50810]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[50873-50885]:ReturnStatement[50830-50842]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[50958-50965]:Modifier[50915-50922]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[50966-50970]:PrimitiveType[50923-50927]"
    }, {
      "left" : "calculateReferences",
      "right" : "calculateReferences",
      "info" : "SimpleName[50971-50990]:SimpleName[50928-50947]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50993-51330]:Block[50950-51287]"
    }, {
      "left" : "JsName window = getName(WINDOW, true);",
      "right" : "JsName window = getName(WINDOW, true);",
      "info" : "VariableDeclarationStatement[50999-51037]:VariableDeclarationStatement[50956-50994]"
    }, {
      "left" : "window.referenced = true;",
      "right" : "window.referenced = true;",
      "info" : "ExpressionStatement[51042-51067]:ExpressionStatement[50999-51024]"
    }, {
      "left" : "JsName function = getName(FUNCTION, true);",
      "right" : "JsName function = getName(FUNCTION, true);",
      "info" : "VariableDeclarationStatement[51072-51114]:VariableDeclarationStatement[51029-51071]"
    }, {
      "left" : "function.referenced = true;",
      "right" : "function.referenced = true;",
      "info" : "ExpressionStatement[51119-51146]:ExpressionStatement[51076-51103]"
    }, {
      "left" : "FixedPointGraphTraversal.newTraversal(new ReferencePropagationCallback())\n        .computeFixedPoint(referenceGraph);",
      "right" : "FixedPointGraphTraversal.newTraversal(new ReferencePropagationCallback())\n        .computeFixedPoint(referenceGraph);",
      "info" : "ExpressionStatement[51209-51326]:ExpressionStatement[51166-51283]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[51812-51819]:Modifier[51769-51776]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[51820-51823]:PrimitiveType[51777-51780]"
    }, {
      "left" : "countOf",
      "right" : "countOf",
      "info" : "SimpleName[51824-51831]:SimpleName[51781-51788]"
    }, {
      "left" : "TriState isClass",
      "right" : "TriState isClass",
      "info" : "SingleVariableDeclaration[51832-51848]:SingleVariableDeclaration[51789-51805]"
    }, {
      "left" : "TriState referenced",
      "right" : "TriState referenced",
      "info" : "SingleVariableDeclaration[51850-51869]:SingleVariableDeclaration[51807-51826]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51871-52472]:Block[51828-52429]"
    }, {
      "left" : "int count = 0;",
      "right" : "int count = 0;",
      "info" : "VariableDeclarationStatement[51877-51891]:VariableDeclarationStatement[51834-51848]"
    }, {
      "left" : "for (JsName name : allNames.values())",
      "right" : "for (JsName name : allNames.values())",
      "info" : "EnhancedForStatement[51896-52450]:EnhancedForStatement[51853-52407]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51934-52450]:Block[51891-52407]"
    }, {
      "left" : "boolean nodeIsClass = name.prototypeNames.size() > 0;",
      "right" : "boolean nodeIsClass = name.prototypeNames.size() > 0;",
      "info" : "VariableDeclarationStatement[51943-51996]:VariableDeclarationStatement[51900-51953]"
    }, {
      "left" : "boolean classMatch = isClass == TriState.BOTH\n          || (nodeIsClass && isClass == TriState.TRUE)\n          || (!nodeIsClass && isClass == TriState.FALSE);",
      "right" : "boolean classMatch = isClass == TriState.BOTH\n          || (nodeIsClass && isClass == TriState.TRUE)\n          || (!nodeIsClass && isClass == TriState.FALSE);",
      "info" : "VariableDeclarationStatement[52004-52162]:VariableDeclarationStatement[51961-52119]"
    }, {
      "left" : "boolean referenceMatch = referenced == TriState.BOTH\n          || (name.referenced && referenced == TriState.TRUE)\n          || (!name.referenced && referenced == TriState.FALSE);",
      "right" : "boolean referenceMatch = referenced == TriState.BOTH\n          || (name.referenced && referenced == TriState.TRUE)\n          || (!name.referenced && referenced == TriState.FALSE);",
      "info" : "VariableDeclarationStatement[52170-52349]:VariableDeclarationStatement[52127-52306]"
    }, {
      "left" : "if (classMatch && referenceMatch && !name.externallyDefined)",
      "right" : "if (classMatch && referenceMatch && !name.externallyDefined)",
      "info" : "IfStatement[52357-52444]:IfStatement[52314-52401]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52418-52444]:Block[52375-52401]"
    }, {
      "left" : "count++;",
      "right" : "count++;",
      "info" : "ExpressionStatement[52428-52436]:ExpressionStatement[52385-52393]"
    }, {
      "left" : "return count;",
      "right" : "return count;",
      "info" : "ReturnStatement[52455-52468]:ReturnStatement[52412-52425]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[52538-52545]:Modifier[52495-52502]"
    }, {
      "left" : "List<Node>",
      "right" : "List<Node>",
      "info" : "ParameterizedType[52546-52556]:ParameterizedType[52503-52513]"
    }, {
      "left" : "getSideEffectNodes",
      "right" : "getSideEffectNodes",
      "info" : "SimpleName[52557-52575]:SimpleName[52514-52532]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[52576-52582]:SingleVariableDeclaration[52533-52539]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52584-53074]:Block[52541-53031]"
    }, {
      "left" : "List<Node> subexpressions = Lists.newArrayList();",
      "right" : "List<Node> subexpressions = Lists.newArrayList();",
      "info" : "VariableDeclarationStatement[52590-52639]:VariableDeclarationStatement[52547-52596]"
    }, {
      "left" : "NodeTraversal.traverse(\n        compiler, n,\n        new GatherSideEffectSubexpressionsCallback(\n            compiler,\n            new CopySideEffectSubexpressions(compiler, subexpressions)));",
      "right" : "NodeTraversal.traverse(\n        compiler, n,\n        new GatherSideEffectSubexpressionsCallback(\n            compiler,\n            new CopySideEffectSubexpressions(compiler, subexpressions)));",
      "info" : "ExpressionStatement[52644-52836]:ExpressionStatement[52601-52793]"
    }, {
      "left" : "List<Node> replacements =\n        Lists.newArrayListWithExpectedSize(subexpressions.size());",
      "right" : "List<Node> replacements =\n        Lists.newArrayListWithExpectedSize(subexpressions.size());",
      "info" : "VariableDeclarationStatement[52842-52934]:VariableDeclarationStatement[52799-52891]"
    }, {
      "left" : "for (Node subexpression : subexpressions)",
      "right" : "for (Node subexpression : subexpressions)",
      "info" : "EnhancedForStatement[52939-53045]:EnhancedForStatement[52896-53002]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52981-53045]:Block[52938-53002]"
    }, {
      "left" : "replacements.add(NodeUtil.newExpr(subexpression));",
      "right" : "replacements.add(NodeUtil.newExpr(subexpression));",
      "info" : "ExpressionStatement[52989-53039]:ExpressionStatement[52946-52996]"
    }, {
      "left" : "return replacements;",
      "right" : "return replacements;",
      "info" : "ReturnStatement[53050-53070]:ReturnStatement[53007-53027]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[53307-53314]:Modifier[53264-53271]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[53315-53319]:PrimitiveType[53272-53276]"
    }, {
      "left" : "replaceWithRhs",
      "right" : "replaceWithRhs",
      "info" : "SimpleName[53320-53334]:SimpleName[53277-53291]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[53335-53346]:SingleVariableDeclaration[53292-53303]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[53348-53354]:SingleVariableDeclaration[53305-53311]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53356-54581]:Block[53313-54538]"
    }, {
      "left" : "if (valueConsumedByParent(n, parent))",
      "right" : "if (valueConsumedByParent(n, parent))",
      "info" : "IfStatement[53362-54577]:IfStatement[53319-54534]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53400-54004]:Block[53357-53961]"
    }, {
      "left" : "List<Node> replacements = getRhsSubexpressions(n);",
      "right" : "List<Node> replacements = getRhsSubexpressions(n);",
      "info" : "VariableDeclarationStatement[53520-53570]:VariableDeclarationStatement[53477-53527]"
    }, {
      "left" : "List<Node> newReplacements = Lists.newArrayList();",
      "right" : "List<Node> newReplacements = Lists.newArrayList();",
      "info" : "VariableDeclarationStatement[53577-53627]:VariableDeclarationStatement[53534-53584]"
    }, {
      "left" : "for (int i = 0; i < replacements.size() - 1; i++)",
      "right" : "for (int i = 0; i < replacements.size() - 1; i++)",
      "info" : "ForStatement[53634-53766]:ForStatement[53591-53723]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53684-53766]:Block[53641-53723]"
    }, {
      "left" : "newReplacements.addAll(getSideEffectNodes(replacements.get(i)));",
      "right" : "newReplacements.addAll(getSideEffectNodes(replacements.get(i)));",
      "info" : "ExpressionStatement[53694-53758]:ExpressionStatement[53651-53715]"
    }, {
      "left" : "Node valueExpr = replacements.get(replacements.size() - 1);",
      "right" : "Node valueExpr = replacements.get(replacements.size() - 1);",
      "info" : "VariableDeclarationStatement[53773-53832]:VariableDeclarationStatement[53730-53789]"
    }, {
      "left" : "valueExpr.detachFromParent();",
      "right" : "valueExpr.detachFromParent();",
      "info" : "ExpressionStatement[53839-53868]:ExpressionStatement[53796-53825]"
    }, {
      "left" : "newReplacements.add(valueExpr);",
      "right" : "newReplacements.add(valueExpr);",
      "info" : "ExpressionStatement[53875-53906]:ExpressionStatement[53832-53863]"
    }, {
      "left" : "changeProxy.replaceWith(\n          parent, n, collapseReplacements(newReplacements));",
      "right" : "changeProxy.replaceWith(\n          parent, n, collapseReplacements(newReplacements));",
      "info" : "ExpressionStatement[53913-53998]:ExpressionStatement[53870-53955]"
    }, {
      "left" : "if (n.isAssign() && !parent.isFor())",
      "right" : "if (n.isAssign() && !parent.isFor())",
      "info" : "IfStatement[54010-54577]:IfStatement[53967-54534]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54047-54513]:Block[54004-54470]"
    }, {
      "left" : "Node replacement = n.getLastChild();",
      "right" : "Node replacement = n.getLastChild();",
      "info" : "VariableDeclarationStatement[54378-54414]:VariableDeclarationStatement[54335-54371]"
    }, {
      "left" : "replacement.detachFromParent();",
      "right" : "replacement.detachFromParent();",
      "info" : "ExpressionStatement[54421-54452]:ExpressionStatement[54378-54409]"
    }, {
      "left" : "changeProxy.replaceWith(parent, n, replacement);",
      "right" : "changeProxy.replaceWith(parent, n, replacement);",
      "info" : "ExpressionStatement[54459-54507]:ExpressionStatement[54416-54464]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54519-54577]:Block[54476-54534]"
    }, {
      "left" : "replaceTopLevelExpressionWithRhs(parent, n);",
      "right" : "replaceTopLevelExpressionWithRhs(parent, n);",
      "info" : "ExpressionStatement[54527-54571]:ExpressionStatement[54484-54528]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[54674-54681]:Modifier[54631-54638]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[54682-54686]:PrimitiveType[54639-54643]"
    }, {
      "left" : "replaceTopLevelExpressionWithRhs",
      "right" : "replaceTopLevelExpressionWithRhs",
      "info" : "SimpleName[54687-54719]:SimpleName[54644-54676]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[54720-54731]:SingleVariableDeclaration[54677-54688]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[54733-54739]:SingleVariableDeclaration[54690-54696]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54741-56115]:Block[54698-56072]"
    }, {
      "left" : "switch (parent.getType()) {\n      case Token.BLOCK:\n      case Token.SCRIPT:\n      case Token.FOR:\n      case Token.LABEL:\n        break;\n      default:\n        throw new IllegalArgumentException(\n            \"Unsupported parent node type in replaceWithRhs \" +\n            Token.name(parent.getType()));\n    }",
      "right" : "switch (parent.getType()) {\n      case Token.BLOCK:\n      case Token.SCRIPT:\n      case Token.FOR:\n      case Token.LABEL:\n        break;\n      default:\n        throw new IllegalArgumentException(\n            \"Unsupported parent node type in replaceWithRhs \" +\n            Token.name(parent.getType()));\n    }",
      "info" : "SwitchStatement[54770-55079]:SwitchStatement[54727-55036]"
    }, {
      "left" : "case Token.BLOCK:",
      "right" : "case Token.BLOCK:",
      "info" : "SwitchCase[54804-54821]:SwitchCase[54761-54778]"
    }, {
      "left" : "case Token.SCRIPT:",
      "right" : "case Token.SCRIPT:",
      "info" : "SwitchCase[54828-54846]:SwitchCase[54785-54803]"
    }, {
      "left" : "case Token.FOR:",
      "right" : "case Token.FOR:",
      "info" : "SwitchCase[54853-54868]:SwitchCase[54810-54825]"
    }, {
      "left" : "case Token.LABEL:",
      "right" : "case Token.LABEL:",
      "info" : "SwitchCase[54875-54892]:SwitchCase[54832-54849]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[54901-54907]:BreakStatement[54858-54864]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[54914-54922]:SwitchCase[54871-54879]"
    }, {
      "left" : "throw new IllegalArgumentException(\n            \"Unsupported parent node type in replaceWithRhs \" +\n            Token.name(parent.getType()));",
      "right" : "throw new IllegalArgumentException(\n            \"Unsupported parent node type in replaceWithRhs \" +\n            Token.name(parent.getType()));",
      "info" : "ThrowStatement[54931-55073]:ThrowStatement[54888-55030]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.EXPR_RESULT:\n      case Token.FUNCTION:\n      case Token.VAR:\n        break;\n      case Token.ASSIGN:\n        Preconditions.checkArgument(parent.isFor(),\n            \"Unsupported assignment in replaceWithRhs. parent: %s\", Token.name(parent.getType()));\n        break;\n      default:\n        throw new IllegalArgumentException(\n            \"Unsupported node type in replaceWithRhs \" +\n            Token.name(n.getType()));\n    }",
      "right" : "switch (n.getType()) {\n      case Token.EXPR_RESULT:\n      case Token.FUNCTION:\n      case Token.VAR:\n        break;\n      case Token.ASSIGN:\n        Preconditions.checkArgument(parent.isFor(),\n            \"Unsupported assignment in replaceWithRhs. parent: %s\", Token.name(parent.getType()));\n        break;\n      default:\n        throw new IllegalArgumentException(\n            \"Unsupported node type in replaceWithRhs \" +\n            Token.name(n.getType()));\n    }",
      "info" : "SwitchStatement[55085-55552]:SwitchStatement[55042-55509]"
    }, {
      "left" : "case Token.EXPR_RESULT:",
      "right" : "case Token.EXPR_RESULT:",
      "info" : "SwitchCase[55114-55137]:SwitchCase[55071-55094]"
    }, {
      "left" : "case Token.FUNCTION:",
      "right" : "case Token.FUNCTION:",
      "info" : "SwitchCase[55144-55164]:SwitchCase[55101-55121]"
    }, {
      "left" : "case Token.VAR:",
      "right" : "case Token.VAR:",
      "info" : "SwitchCase[55171-55186]:SwitchCase[55128-55143]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[55195-55201]:BreakStatement[55152-55158]"
    }, {
      "left" : "case Token.ASSIGN:",
      "right" : "case Token.ASSIGN:",
      "info" : "SwitchCase[55208-55226]:SwitchCase[55165-55183]"
    }, {
      "left" : "Preconditions.checkArgument(parent.isFor(),\n            \"Unsupported assignment in replaceWithRhs. parent: %s\", Token.name(parent.getType()));",
      "right" : "Preconditions.checkArgument(parent.isFor(),\n            \"Unsupported assignment in replaceWithRhs. parent: %s\", Token.name(parent.getType()));",
      "info" : "ExpressionStatement[55235-55377]:ExpressionStatement[55192-55334]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[55386-55392]:BreakStatement[55343-55349]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[55399-55407]:SwitchCase[55356-55364]"
    }, {
      "left" : "throw new IllegalArgumentException(\n            \"Unsupported node type in replaceWithRhs \" +\n            Token.name(n.getType()));",
      "right" : "throw new IllegalArgumentException(\n            \"Unsupported node type in replaceWithRhs \" +\n            Token.name(n.getType()));",
      "info" : "ThrowStatement[55416-55546]:ThrowStatement[55373-55503]"
    }, {
      "left" : "List<Node> replacements = Lists.newArrayList();",
      "right" : "List<Node> replacements = Lists.newArrayList();",
      "info" : "VariableDeclarationStatement[55585-55632]:VariableDeclarationStatement[55542-55589]"
    }, {
      "left" : "for (Node rhs : getRhsSubexpressions(n))",
      "right" : "for (Node rhs : getRhsSubexpressions(n))",
      "info" : "EnhancedForStatement[55637-55737]:EnhancedForStatement[55594-55694]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55678-55737]:Block[55635-55694]"
    }, {
      "left" : "replacements.addAll(getSideEffectNodes(rhs));",
      "right" : "replacements.addAll(getSideEffectNodes(rhs));",
      "info" : "ExpressionStatement[55686-55731]:ExpressionStatement[55643-55688]"
    }, {
      "left" : "if (parent.isFor())",
      "right" : "if (parent.isFor())",
      "info" : "IfStatement[55743-56056]:IfStatement[55700-56013]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55763-56056]:Block[55720-56013]"
    }, {
      "left" : "if (replacements.isEmpty())",
      "right" : "if (replacements.isEmpty())",
      "info" : "IfStatement[55842-56050]:IfStatement[55799-56007]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55870-55917]:Block[55827-55874]"
    }, {
      "left" : "replacements.add(IR.empty());",
      "right" : "replacements.add(IR.empty());",
      "info" : "ExpressionStatement[55880-55909]:ExpressionStatement[55837-55866]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55923-56050]:Block[55880-56007]"
    }, {
      "left" : "Node expr = collapseReplacements(replacements);",
      "right" : "Node expr = collapseReplacements(replacements);",
      "info" : "VariableDeclarationStatement[55933-55980]:VariableDeclarationStatement[55890-55937]"
    }, {
      "left" : "replacements.clear();",
      "right" : "replacements.clear();",
      "info" : "ExpressionStatement[55989-56010]:ExpressionStatement[55946-55967]"
    }, {
      "left" : "replacements.add(expr);",
      "right" : "replacements.add(expr);",
      "info" : "ExpressionStatement[56019-56042]:ExpressionStatement[55976-55999]"
    }, {
      "left" : "changeProxy.replaceWith(parent, n, replacements);",
      "right" : "changeProxy.replaceWith(parent, n, replacements);",
      "info" : "ExpressionStatement[56062-56111]:ExpressionStatement[56019-56068]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[56771-56778]:Modifier[56728-56735]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[56779-56786]:PrimitiveType[56736-56743]"
    }, {
      "left" : "valueConsumedByParent",
      "right" : "valueConsumedByParent",
      "info" : "SimpleName[56787-56808]:SimpleName[56744-56765]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[56809-56815]:SingleVariableDeclaration[56766-56772]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[56817-56828]:SingleVariableDeclaration[56774-56785]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56830-57409]:Block[56787-57366]"
    }, {
      "left" : "if (NodeUtil.isAssignmentOp(parent))",
      "right" : "if (NodeUtil.isAssignmentOp(parent))",
      "info" : "IfStatement[56836-56921]:IfStatement[56793-56878]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56873-56921]:Block[56830-56878]"
    }, {
      "left" : "return parent.getLastChild() == n;",
      "right" : "return parent.getLastChild() == n;",
      "info" : "ReturnStatement[56881-56915]:ReturnStatement[56838-56872]"
    }, {
      "left" : "switch (parent.getType()) {\n      case Token.NAME:\n      case Token.RETURN:\n        return true;\n      case Token.AND:\n      case Token.OR:\n      case Token.HOOK:\n        return parent.getFirstChild() == n;\n      case Token.FOR:\n        return parent.getFirstChild().getNext() == n;\n      case Token.IF:\n      case Token.WHILE:\n        return parent.getFirstChild() == n;\n      case Token.DO:\n        return parent.getLastChild() == n;\n      default:\n        return false;\n    }",
      "right" : "switch (parent.getType()) {\n      case Token.NAME:\n      case Token.RETURN:\n        return true;\n      case Token.AND:\n      case Token.OR:\n      case Token.HOOK:\n        return parent.getFirstChild() == n;\n      case Token.FOR:\n        return parent.getFirstChild().getNext() == n;\n      case Token.IF:\n      case Token.WHILE:\n        return parent.getFirstChild() == n;\n      case Token.DO:\n        return parent.getLastChild() == n;\n      default:\n        return false;\n    }",
      "info" : "SwitchStatement[56927-57405]:SwitchStatement[56884-57362]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[56961-56977]:SwitchCase[56918-56934]"
    }, {
      "left" : "case Token.RETURN:",
      "right" : "case Token.RETURN:",
      "info" : "SwitchCase[56984-57002]:SwitchCase[56941-56959]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[57011-57023]:ReturnStatement[56968-56980]"
    }, {
      "left" : "case Token.AND:",
      "right" : "case Token.AND:",
      "info" : "SwitchCase[57030-57045]:SwitchCase[56987-57002]"
    }, {
      "left" : "case Token.OR:",
      "right" : "case Token.OR:",
      "info" : "SwitchCase[57052-57066]:SwitchCase[57009-57023]"
    }, {
      "left" : "case Token.HOOK:",
      "right" : "case Token.HOOK:",
      "info" : "SwitchCase[57073-57089]:SwitchCase[57030-57046]"
    }, {
      "left" : "return parent.getFirstChild() == n;",
      "right" : "return parent.getFirstChild() == n;",
      "info" : "ReturnStatement[57098-57133]:ReturnStatement[57055-57090]"
    }, {
      "left" : "case Token.FOR:",
      "right" : "case Token.FOR:",
      "info" : "SwitchCase[57140-57155]:SwitchCase[57097-57112]"
    }, {
      "left" : "return parent.getFirstChild().getNext() == n;",
      "right" : "return parent.getFirstChild().getNext() == n;",
      "info" : "ReturnStatement[57164-57209]:ReturnStatement[57121-57166]"
    }, {
      "left" : "case Token.IF:",
      "right" : "case Token.IF:",
      "info" : "SwitchCase[57216-57230]:SwitchCase[57173-57187]"
    }, {
      "left" : "case Token.WHILE:",
      "right" : "case Token.WHILE:",
      "info" : "SwitchCase[57237-57254]:SwitchCase[57194-57211]"
    }, {
      "left" : "return parent.getFirstChild() == n;",
      "right" : "return parent.getFirstChild() == n;",
      "info" : "ReturnStatement[57263-57298]:ReturnStatement[57220-57255]"
    }, {
      "left" : "case Token.DO:",
      "right" : "case Token.DO:",
      "info" : "SwitchCase[57305-57319]:SwitchCase[57262-57276]"
    }, {
      "left" : "return parent.getLastChild() == n;",
      "right" : "return parent.getLastChild() == n;",
      "info" : "ReturnStatement[57328-57362]:ReturnStatement[57285-57319]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[57369-57377]:SwitchCase[57326-57334]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[57386-57399]:ReturnStatement[57343-57356]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[57566-57573]:Modifier[57523-57530]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[57574-57578]:SimpleType[57531-57535]"
    }, {
      "left" : "collapseReplacements",
      "right" : "collapseReplacements",
      "info" : "SimpleName[57579-57599]:SimpleName[57536-57556]"
    }, {
      "left" : "List<Node> replacements",
      "right" : "List<Node> replacements",
      "info" : "SingleVariableDeclaration[57600-57623]:SingleVariableDeclaration[57557-57580]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57625-57925]:Block[57582-57882]"
    }, {
      "left" : "Node expr = null;",
      "right" : "Node expr = null;",
      "info" : "VariableDeclarationStatement[57631-57648]:VariableDeclarationStatement[57588-57605]"
    }, {
      "left" : "for (Node rep : replacements)",
      "right" : "for (Node rep : replacements)",
      "info" : "EnhancedForStatement[57653-57903]:EnhancedForStatement[57610-57860]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57683-57903]:Block[57640-57860]"
    }, {
      "left" : "if (rep.isExprResult())",
      "right" : "if (rep.isExprResult())",
      "info" : "IfStatement[57691-57791]:IfStatement[57648-57748]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57715-57791]:Block[57672-57748]"
    }, {
      "left" : "rep = rep.getFirstChild();",
      "right" : "rep = rep.getFirstChild();",
      "info" : "ExpressionStatement[57725-57751]:ExpressionStatement[57682-57708]"
    }, {
      "left" : "rep.detachFromParent();",
      "right" : "rep.detachFromParent();",
      "info" : "ExpressionStatement[57760-57783]:ExpressionStatement[57717-57740]"
    }, {
      "left" : "if (expr == null)",
      "right" : "if (expr == null)",
      "info" : "IfStatement[57799-57897]:IfStatement[57756-57854]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57817-57846]:Block[57774-57803]"
    }, {
      "left" : "expr = rep;",
      "right" : "expr = rep;",
      "info" : "ExpressionStatement[57827-57838]:ExpressionStatement[57784-57795]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57852-57897]:Block[57809-57854]"
    }, {
      "left" : "expr = IR.comma(expr, rep);",
      "right" : "expr = IR.comma(expr, rep);",
      "info" : "ExpressionStatement[57862-57889]:ExpressionStatement[57819-57846]"
    }, {
      "left" : "return expr;",
      "right" : "return expr;",
      "info" : "ReturnStatement[57909-57921]:ReturnStatement[57866-57878]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[58009-58016]:Modifier[57966-57973]"
    }, {
      "left" : "List<Node>",
      "right" : "List<Node>",
      "info" : "ParameterizedType[58017-58027]:ParameterizedType[57974-57984]"
    }, {
      "left" : "getRhsSubexpressions",
      "right" : "getRhsSubexpressions",
      "info" : "SimpleName[58028-58048]:SimpleName[57985-58005]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[58049-58055]:SingleVariableDeclaration[58006-58012]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58057-59194]:Block[58014-59151]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.EXPR_RESULT:\n        // process body\n        return getRhsSubexpressions(n.getFirstChild());\n      case Token.FUNCTION:\n        // function nodes have no rhs\n        return Collections.emptyList();\n      case Token.NAME:\n        {\n          // parent is a var node.  rhs is first child\n          Node rhs = n.getFirstChild();\n          if (rhs != null) {\n            return Lists.newArrayList(rhs);\n          } else {\n            return Collections.emptyList();\n          }\n        }\n      case Token.ASSIGN:\n        {\n          // add lhs and rhs expressions - lhs may be a complex expression\n          Node lhs = n.getFirstChild();\n          Node rhs = lhs.getNext();\n          return Lists.newArrayList(lhs, rhs);\n        }\n      case Token.VAR:\n        {\n          // recurse on all children\n          List<Node> nodes = Lists.newArrayList();\n          for (Node child : n.children()) {\n            nodes.addAll(getRhsSubexpressions(child));\n          }\n          return nodes;\n        }\n      default:\n        throw new IllegalArgumentException(\"AstChangeProxy::getRhs \" + n);\n    }",
      "right" : "switch (n.getType()) {\n      case Token.EXPR_RESULT:\n        // process body\n        return getRhsSubexpressions(n.getFirstChild());\n      case Token.FUNCTION:\n        // function nodes have no rhs\n        return Collections.emptyList();\n      case Token.NAME:\n        {\n          // parent is a var node.  rhs is first child\n          Node rhs = n.getFirstChild();\n          if (rhs != null) {\n            return Lists.newArrayList(rhs);\n          } else {\n            return Collections.emptyList();\n          }\n        }\n      case Token.ASSIGN:\n        {\n          // add lhs and rhs expressions - lhs may be a complex expression\n          Node lhs = n.getFirstChild();\n          Node rhs = lhs.getNext();\n          return Lists.newArrayList(lhs, rhs);\n        }\n      case Token.VAR:\n        {\n          // recurse on all children\n          List<Node> nodes = Lists.newArrayList();\n          for (Node child : n.children()) {\n            nodes.addAll(getRhsSubexpressions(child));\n          }\n          return nodes;\n        }\n      default:\n        throw new IllegalArgumentException(\"AstChangeProxy::getRhs \" + n);\n    }",
      "info" : "SwitchStatement[58063-59190]:SwitchStatement[58020-59147]"
    }, {
      "left" : "case Token.EXPR_RESULT:",
      "right" : "case Token.EXPR_RESULT:",
      "info" : "SwitchCase[58092-58115]:SwitchCase[58049-58072]"
    }, {
      "left" : "return getRhsSubexpressions(n.getFirstChild());",
      "right" : "return getRhsSubexpressions(n.getFirstChild());",
      "info" : "ReturnStatement[58148-58195]:ReturnStatement[58105-58152]"
    }, {
      "left" : "case Token.FUNCTION:",
      "right" : "case Token.FUNCTION:",
      "info" : "SwitchCase[58202-58222]:SwitchCase[58159-58179]"
    }, {
      "left" : "return Collections.emptyList();",
      "right" : "return Collections.emptyList();",
      "info" : "ReturnStatement[58269-58300]:ReturnStatement[58226-58257]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[58307-58323]:SwitchCase[58264-58280]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58332-58586]:Block[58289-58543]"
    }, {
      "left" : "Node rhs = n.getFirstChild();",
      "right" : "Node rhs = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[58399-58428]:VariableDeclarationStatement[58356-58385]"
    }, {
      "left" : "if (rhs != null)",
      "right" : "if (rhs != null)",
      "info" : "IfStatement[58439-58576]:IfStatement[58396-58533]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58456-58513]:Block[58413-58470]"
    }, {
      "left" : "return Lists.newArrayList(rhs);",
      "right" : "return Lists.newArrayList(rhs);",
      "info" : "ReturnStatement[58470-58501]:ReturnStatement[58427-58458]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58519-58576]:Block[58476-58533]"
    }, {
      "left" : "return Collections.emptyList();",
      "right" : "return Collections.emptyList();",
      "info" : "ReturnStatement[58533-58564]:ReturnStatement[58490-58521]"
    }, {
      "left" : "case Token.ASSIGN:",
      "right" : "case Token.ASSIGN:",
      "info" : "SwitchCase[58593-58611]:SwitchCase[58550-58568]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58620-58829]:Block[58577-58786]"
    }, {
      "left" : "Node lhs = n.getFirstChild();",
      "right" : "Node lhs = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[58707-58736]:VariableDeclarationStatement[58664-58693]"
    }, {
      "left" : "Node rhs = lhs.getNext();",
      "right" : "Node rhs = lhs.getNext();",
      "info" : "VariableDeclarationStatement[58747-58772]:VariableDeclarationStatement[58704-58729]"
    }, {
      "left" : "return Lists.newArrayList(lhs, rhs);",
      "right" : "return Lists.newArrayList(lhs, rhs);",
      "info" : "ReturnStatement[58783-58819]:ReturnStatement[58740-58776]"
    }, {
      "left" : "case Token.VAR:",
      "right" : "case Token.VAR:",
      "info" : "SwitchCase[58836-58851]:SwitchCase[58793-58808]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58860-59094]:Block[58817-59051]"
    }, {
      "left" : "List<Node> nodes = Lists.newArrayList();",
      "right" : "List<Node> nodes = Lists.newArrayList();",
      "info" : "VariableDeclarationStatement[58909-58949]:VariableDeclarationStatement[58866-58906]"
    }, {
      "left" : "for (Node child : n.children())",
      "right" : "for (Node child : n.children())",
      "info" : "EnhancedForStatement[58960-59060]:EnhancedForStatement[58917-59017]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58992-59060]:Block[58949-59017]"
    }, {
      "left" : "nodes.addAll(getRhsSubexpressions(child));",
      "right" : "nodes.addAll(getRhsSubexpressions(child));",
      "info" : "ExpressionStatement[59006-59048]:ExpressionStatement[58963-59005]"
    }, {
      "left" : "return nodes;",
      "right" : "return nodes;",
      "info" : "ReturnStatement[59071-59084]:ReturnStatement[59028-59041]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[59101-59109]:SwitchCase[59058-59066]"
    }, {
      "left" : "throw new IllegalArgumentException(\"AstChangeProxy::getRhs \" + n);",
      "right" : "throw new IllegalArgumentException(\"AstChangeProxy::getRhs \" + n);",
      "info" : "ThrowStatement[59118-59184]:ThrowStatement[59075-59141]"
    } ]
  },
  "interFileMappings" : { }
}