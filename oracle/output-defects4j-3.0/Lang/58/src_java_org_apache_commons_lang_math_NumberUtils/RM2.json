{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "NumberUtils",
      "right" : "NumberUtils",
      "info" : "TypeDeclaration[948-53141]:TypeDeclaration[948-53098]"
    }, {
      "left" : "public static final Long LONG_ZERO = new Long(0L);",
      "right" : "public static final Long LONG_ZERO = new Long(0L);",
      "info" : "FieldDeclaration[1476-1570]:FieldDeclaration[1476-1570]"
    }, {
      "left" : "public static final Long LONG_ONE = new Long(1L);",
      "right" : "public static final Long LONG_ONE = new Long(1L);",
      "info" : "FieldDeclaration[1575-1667]:FieldDeclaration[1575-1667]"
    }, {
      "left" : "public static final Long LONG_MINUS_ONE = new Long(-1L);",
      "right" : "public static final Long LONG_MINUS_ONE = new Long(-1L);",
      "info" : "FieldDeclaration[1672-1777]:FieldDeclaration[1672-1777]"
    }, {
      "left" : "public static final Integer INTEGER_ZERO = new Integer(0);",
      "right" : "public static final Integer INTEGER_ZERO = new Integer(0);",
      "info" : "FieldDeclaration[1782-1887]:FieldDeclaration[1782-1887]"
    }, {
      "left" : "public static final Integer INTEGER_ONE = new Integer(1);",
      "right" : "public static final Integer INTEGER_ONE = new Integer(1);",
      "info" : "FieldDeclaration[1892-1995]:FieldDeclaration[1892-1995]"
    }, {
      "left" : "public static final Integer INTEGER_MINUS_ONE = new Integer(-1);",
      "right" : "public static final Integer INTEGER_MINUS_ONE = new Integer(-1);",
      "info" : "FieldDeclaration[2000-2116]:FieldDeclaration[2000-2116]"
    }, {
      "left" : "public static final Short SHORT_ZERO = new Short((short) 0);",
      "right" : "public static final Short SHORT_ZERO = new Short((short) 0);",
      "info" : "FieldDeclaration[2121-2226]:FieldDeclaration[2121-2226]"
    }, {
      "left" : "public static final Short SHORT_ONE = new Short((short) 1);",
      "right" : "public static final Short SHORT_ONE = new Short((short) 1);",
      "info" : "FieldDeclaration[2231-2334]:FieldDeclaration[2231-2334]"
    }, {
      "left" : "public static final Short SHORT_MINUS_ONE = new Short((short) -1);",
      "right" : "public static final Short SHORT_MINUS_ONE = new Short((short) -1);",
      "info" : "FieldDeclaration[2339-2455]:FieldDeclaration[2339-2455]"
    }, {
      "left" : "public static final Byte BYTE_ZERO = new Byte((byte) 0);",
      "right" : "public static final Byte BYTE_ZERO = new Byte((byte) 0);",
      "info" : "FieldDeclaration[2460-2560]:FieldDeclaration[2460-2560]"
    }, {
      "left" : "public static final Byte BYTE_ONE = new Byte((byte) 1);",
      "right" : "public static final Byte BYTE_ONE = new Byte((byte) 1);",
      "info" : "FieldDeclaration[2565-2663]:FieldDeclaration[2565-2663]"
    }, {
      "left" : "public static final Byte BYTE_MINUS_ONE = new Byte((byte) -1);",
      "right" : "public static final Byte BYTE_MINUS_ONE = new Byte((byte) -1);",
      "info" : "FieldDeclaration[2668-2779]:FieldDeclaration[2668-2779]"
    }, {
      "left" : "public static final Double DOUBLE_ZERO = new Double(0.0d);",
      "right" : "public static final Double DOUBLE_ZERO = new Double(0.0d);",
      "info" : "FieldDeclaration[2784-2888]:FieldDeclaration[2784-2888]"
    }, {
      "left" : "public static final Double DOUBLE_ONE = new Double(1.0d);",
      "right" : "public static final Double DOUBLE_ONE = new Double(1.0d);",
      "info" : "FieldDeclaration[2893-2995]:FieldDeclaration[2893-2995]"
    }, {
      "left" : "public static final Double DOUBLE_MINUS_ONE = new Double(-1.0d);",
      "right" : "public static final Double DOUBLE_MINUS_ONE = new Double(-1.0d);",
      "info" : "FieldDeclaration[3000-3115]:FieldDeclaration[3000-3115]"
    }, {
      "left" : "public static final Float FLOAT_ZERO = new Float(0.0f);",
      "right" : "public static final Float FLOAT_ZERO = new Float(0.0f);",
      "info" : "FieldDeclaration[3120-3220]:FieldDeclaration[3120-3220]"
    }, {
      "left" : "public static final Float FLOAT_ONE = new Float(1.0f);",
      "right" : "public static final Float FLOAT_ONE = new Float(1.0f);",
      "info" : "FieldDeclaration[3225-3323]:FieldDeclaration[3225-3323]"
    }, {
      "left" : "public static final Float FLOAT_MINUS_ONE = new Float(-1.0f);",
      "right" : "public static final Float FLOAT_MINUS_ONE = new Float(-1.0f);",
      "info" : "FieldDeclaration[3328-3439]:FieldDeclaration[3328-3439]"
    }, {
      "left" : "public NumberUtils()",
      "right" : "public NumberUtils()",
      "info" : "MethodDeclaration[3445-3810]:MethodDeclaration[3445-3810]"
    }, {
      "left" : "public static int stringToInt(String str)",
      "right" : "public static int stringToInt(String str)",
      "info" : "MethodDeclaration[3894-4628]:MethodDeclaration[3894-4628]"
    }, {
      "left" : "public static int toInt(String str)",
      "right" : "public static int toInt(String str)",
      "info" : "MethodDeclaration[4634-5262]:MethodDeclaration[4634-5262]"
    }, {
      "left" : "public static int stringToInt(String str, int defaultValue)",
      "right" : "public static int stringToInt(String str, int defaultValue)",
      "info" : "MethodDeclaration[5268-6078]:MethodDeclaration[5268-6078]"
    }, {
      "left" : "public static int toInt(String str, int defaultValue)",
      "right" : "public static int toInt(String str, int defaultValue)",
      "info" : "MethodDeclaration[6084-6953]:MethodDeclaration[6084-6953]"
    }, {
      "left" : "public static long toLong(String str)",
      "right" : "public static long toLong(String str)",
      "info" : "MethodDeclaration[6959-7595]:MethodDeclaration[6959-7595]"
    }, {
      "left" : "public static long toLong(String str, long defaultValue)",
      "right" : "public static long toLong(String str, long defaultValue)",
      "info" : "MethodDeclaration[7601-8482]:MethodDeclaration[7601-8482]"
    }, {
      "left" : "public static float toFloat(String str)",
      "right" : "public static float toFloat(String str)",
      "info" : "MethodDeclaration[8488-9185]:MethodDeclaration[8488-9185]"
    }, {
      "left" : "public static float toFloat(String str, float defaultValue)",
      "right" : "public static float toFloat(String str, float defaultValue)",
      "info" : "MethodDeclaration[9191-10133]:MethodDeclaration[9191-10133]"
    }, {
      "left" : "public static double toDouble(String str)",
      "right" : "public static double toDouble(String str)",
      "info" : "MethodDeclaration[10139-10844]:MethodDeclaration[10139-10844]"
    }, {
      "left" : "public static double toDouble(String str, double defaultValue)",
      "right" : "public static double toDouble(String str, double defaultValue)",
      "info" : "MethodDeclaration[10850-11797]:MethodDeclaration[10850-11797]"
    }, {
      "left" : "public static Number createNumber(String str) throws NumberFormatException",
      "right" : "public static Number createNumber(String str) throws NumberFormatException",
      "info" : "MethodDeclaration[13042-20102]:MethodDeclaration[13042-20059]"
    }, {
      "left" : "private static boolean isAllZeros(String str)",
      "right" : "private static boolean isAllZeros(String str)",
      "info" : "MethodDeclaration[20108-20670]:MethodDeclaration[20065-20627]"
    }, {
      "left" : "public static Float createFloat(String str)",
      "right" : "public static Float createFloat(String str)",
      "info" : "MethodDeclaration[20754-21257]:MethodDeclaration[20711-21214]"
    }, {
      "left" : "public static Double createDouble(String str)",
      "right" : "public static Double createDouble(String str)",
      "info" : "MethodDeclaration[21263-21771]:MethodDeclaration[21220-21728]"
    }, {
      "left" : "public static Integer createInteger(String str)",
      "right" : "public static Integer createInteger(String str)",
      "info" : "MethodDeclaration[21777-22399]:MethodDeclaration[21734-22356]"
    }, {
      "left" : "public static Long createLong(String str)",
      "right" : "public static Long createLong(String str)",
      "info" : "MethodDeclaration[22405-22903]:MethodDeclaration[22362-22860]"
    }, {
      "left" : "public static BigInteger createBigInteger(String str)",
      "right" : "public static BigInteger createBigInteger(String str)",
      "info" : "MethodDeclaration[22909-23433]:MethodDeclaration[22866-23390]"
    }, {
      "left" : "public static BigDecimal createBigDecimal(String str)",
      "right" : "public static BigDecimal createBigDecimal(String str)",
      "info" : "MethodDeclaration[23439-24173]:MethodDeclaration[23396-24130]"
    }, {
      "left" : "public static boolean equals(byte[] array1, byte[] array2)",
      "right" : "public static boolean equals(byte[] array1, byte[] array2)",
      "info" : "MethodDeclaration[24277-24971]:MethodDeclaration[24234-24928]"
    }, {
      "left" : "public static boolean equals(short[] array1, short[] array2)",
      "right" : "public static boolean equals(short[] array1, short[] array2)",
      "info" : "MethodDeclaration[24977-25674]:MethodDeclaration[24934-25631]"
    }, {
      "left" : "public static boolean equals(int[] array1, int[] array2)",
      "right" : "public static boolean equals(int[] array1, int[] array2)",
      "info" : "MethodDeclaration[25680-26371]:MethodDeclaration[25637-26328]"
    }, {
      "left" : "public static boolean equals(long[] array1, long[] array2)",
      "right" : "public static boolean equals(long[] array1, long[] array2)",
      "info" : "MethodDeclaration[26377-27071]:MethodDeclaration[26334-27028]"
    }, {
      "left" : "public static boolean equals(float[] array1, float[] array2)",
      "right" : "public static boolean equals(float[] array1, float[] array2)",
      "info" : "MethodDeclaration[27077-27786]:MethodDeclaration[27034-27743]"
    }, {
      "left" : "public static boolean equals(double[] array1, double[] array2)",
      "right" : "public static boolean equals(double[] array1, double[] array2)",
      "info" : "MethodDeclaration[27792-28504]:MethodDeclaration[27749-28461]"
    }, {
      "left" : "public static long min(long[] array)",
      "right" : "public static long min(long[] array)",
      "info" : "MethodDeclaration[28605-29472]:MethodDeclaration[28562-29429]"
    }, {
      "left" : "public static int min(int[] array)",
      "right" : "public static int min(int[] array)",
      "info" : "MethodDeclaration[29478-30342]:MethodDeclaration[29435-30299]"
    }, {
      "left" : "public static short min(short[] array)",
      "right" : "public static short min(short[] array)",
      "info" : "MethodDeclaration[30348-31218]:MethodDeclaration[30305-31175]"
    }, {
      "left" : "public static byte min(byte[] array)",
      "right" : "public static byte min(byte[] array)",
      "info" : "MethodDeclaration[31224-32091]:MethodDeclaration[31181-32048]"
    }, {
      "left" : "public static double min(double[] array)",
      "right" : "public static double min(double[] array)",
      "info" : "MethodDeclaration[32098-32971]:MethodDeclaration[32055-32928]"
    }, {
      "left" : "public static float min(float[] array)",
      "right" : "public static float min(float[] array)",
      "info" : "MethodDeclaration[32977-33847]:MethodDeclaration[32934-33804]"
    }, {
      "left" : "public static long max(long[] array)",
      "right" : "public static long max(long[] array)",
      "info" : "MethodDeclaration[33948-34807]:MethodDeclaration[33905-34764]"
    }, {
      "left" : "public static int max(int[] array)",
      "right" : "public static int max(int[] array)",
      "info" : "MethodDeclaration[34813-35677]:MethodDeclaration[34770-35634]"
    }, {
      "left" : "public static short max(short[] array)",
      "right" : "public static short max(short[] array)",
      "info" : "MethodDeclaration[35683-36553]:MethodDeclaration[35640-36510]"
    }, {
      "left" : "public static byte max(byte[] array)",
      "right" : "public static byte max(byte[] array)",
      "info" : "MethodDeclaration[36559-37426]:MethodDeclaration[36516-37383]"
    }, {
      "left" : "public static double max(double[] array)",
      "right" : "public static double max(double[] array)",
      "info" : "MethodDeclaration[37432-38304]:MethodDeclaration[37389-38261]"
    }, {
      "left" : "public static float max(float[] array)",
      "right" : "public static float max(float[] array)",
      "info" : "MethodDeclaration[38310-39172]:MethodDeclaration[38267-39129]"
    }, {
      "left" : "public static long min(long a, long b, long c)",
      "right" : "public static long min(long a, long b, long c)",
      "info" : "MethodDeclaration[39280-39660]:MethodDeclaration[39237-39617]"
    }, {
      "left" : "public static int min(int a, int b, int c)",
      "right" : "public static int min(int a, int b, int c)",
      "info" : "MethodDeclaration[39666-40041]:MethodDeclaration[39623-39998]"
    }, {
      "left" : "public static short min(short a, short b, short c)",
      "right" : "public static short min(short a, short b, short c)",
      "info" : "MethodDeclaration[40047-40432]:MethodDeclaration[40004-40389]"
    }, {
      "left" : "public static byte min(byte a, byte b, byte c)",
      "right" : "public static byte min(byte a, byte b, byte c)",
      "info" : "MethodDeclaration[40438-40818]:MethodDeclaration[40395-40775]"
    }, {
      "left" : "public static double min(double a, double b, double c)",
      "right" : "public static double min(double a, double b, double c)",
      "info" : "MethodDeclaration[40824-41254]:MethodDeclaration[40781-41211]"
    }, {
      "left" : "public static float min(float a, float b, float c)",
      "right" : "public static float min(float a, float b, float c)",
      "info" : "MethodDeclaration[41260-41684]:MethodDeclaration[41217-41641]"
    }, {
      "left" : "public static long max(long a, long b, long c)",
      "right" : "public static long max(long a, long b, long c)",
      "info" : "MethodDeclaration[41787-42166]:MethodDeclaration[41744-42123]"
    }, {
      "left" : "public static int max(int a, int b, int c)",
      "right" : "public static int max(int a, int b, int c)",
      "info" : "MethodDeclaration[42172-42546]:MethodDeclaration[42129-42503]"
    }, {
      "left" : "public static short max(short a, short b, short c)",
      "right" : "public static short max(short a, short b, short c)",
      "info" : "MethodDeclaration[42552-42936]:MethodDeclaration[42509-42893]"
    }, {
      "left" : "public static byte max(byte a, byte b, byte c)",
      "right" : "public static byte max(byte a, byte b, byte c)",
      "info" : "MethodDeclaration[42942-43321]:MethodDeclaration[42899-43278]"
    }, {
      "left" : "public static double max(double a, double b, double c)",
      "right" : "public static double max(double a, double b, double c)",
      "info" : "MethodDeclaration[43327-43755]:MethodDeclaration[43284-43712]"
    }, {
      "left" : "public static float max(float a, float b, float c)",
      "right" : "public static float max(float a, float b, float c)",
      "info" : "MethodDeclaration[43761-44184]:MethodDeclaration[43718-44141]"
    }, {
      "left" : "public static int compare(double lhs, double rhs)",
      "right" : "public static int compare(double lhs, double rhs)",
      "info" : "MethodDeclaration[44268-46377]:MethodDeclaration[44225-46334]"
    }, {
      "left" : "public static int compare(float lhs, float rhs)",
      "right" : "public static int compare(float lhs, float rhs)",
      "info" : "MethodDeclaration[46387-48389]:MethodDeclaration[46344-48346]"
    }, {
      "left" : "public static boolean isDigits(String str)",
      "right" : "public static boolean isDigits(String str)",
      "info" : "MethodDeclaration[48477-49112]:MethodDeclaration[48434-49069]"
    }, {
      "left" : "public static boolean isNumber(String str)",
      "right" : "public static boolean isNumber(String str)",
      "info" : "MethodDeclaration[49118-53134]:MethodDeclaration[49075-53091]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1440-1446]:Modifier[1440-1446]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[1447-1452]:TYPE_DECLARATION_KIND[1447-1452]"
    }, {
      "left" : "NumberUtils",
      "right" : "NumberUtils",
      "info" : "SimpleName[1453-1464]:SimpleName[1453-1464]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3765-3771]:Modifier[3765-3771]"
    }, {
      "left" : "NumberUtils",
      "right" : "NumberUtils",
      "info" : "SimpleName[3772-3783]:SimpleName[3772-3783]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3786-3810]:Block[3786-3810]"
    }, {
      "left" : "super();",
      "right" : "super();",
      "info" : "SuperConstructorInvocation[3796-3804]:SuperConstructorInvocation[3796-3804]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4552-4558]:Modifier[4552-4558]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[4559-4565]:Modifier[4559-4565]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[4566-4569]:PrimitiveType[4566-4569]"
    }, {
      "left" : "stringToInt",
      "right" : "stringToInt",
      "info" : "SimpleName[4570-4581]:SimpleName[4570-4581]"
    }, {
      "left" : "String str",
      "right" : "String str",
      "info" : "SingleVariableDeclaration[4582-4592]:SingleVariableDeclaration[4582-4592]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4594-4628]:Block[4594-4628]"
    }, {
      "left" : "return toInt(str);",
      "right" : "return toInt(str);",
      "info" : "ReturnStatement[4604-4622]:ReturnStatement[4604-4622]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5189-5195]:Modifier[5189-5195]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[5196-5202]:Modifier[5196-5202]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[5203-5206]:PrimitiveType[5203-5206]"
    }, {
      "left" : "toInt",
      "right" : "toInt",
      "info" : "SimpleName[5207-5212]:SimpleName[5207-5212]"
    }, {
      "left" : "String str",
      "right" : "String str",
      "info" : "SingleVariableDeclaration[5213-5223]:SingleVariableDeclaration[5213-5223]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5225-5262]:Block[5225-5262]"
    }, {
      "left" : "return toInt(str, 0);",
      "right" : "return toInt(str, 0);",
      "info" : "ReturnStatement[5235-5256]:ReturnStatement[5235-5256]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5970-5976]:Modifier[5970-5976]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[5977-5983]:Modifier[5977-5983]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[5984-5987]:PrimitiveType[5984-5987]"
    }, {
      "left" : "stringToInt",
      "right" : "stringToInt",
      "info" : "SimpleName[5988-5999]:SimpleName[5988-5999]"
    }, {
      "left" : "String str",
      "right" : "String str",
      "info" : "SingleVariableDeclaration[6000-6010]:SingleVariableDeclaration[6000-6010]"
    }, {
      "left" : "int defaultValue",
      "right" : "int defaultValue",
      "info" : "SingleVariableDeclaration[6012-6028]:SingleVariableDeclaration[6012-6028]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6030-6078]:Block[6030-6078]"
    }, {
      "left" : "return toInt(str, defaultValue);",
      "right" : "return toInt(str, defaultValue);",
      "info" : "ReturnStatement[6040-6072]:ReturnStatement[6040-6072]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6678-6684]:Modifier[6678-6684]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[6685-6691]:Modifier[6685-6691]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[6692-6695]:PrimitiveType[6692-6695]"
    }, {
      "left" : "toInt",
      "right" : "toInt",
      "info" : "SimpleName[6696-6701]:SimpleName[6696-6701]"
    }, {
      "left" : "String str",
      "right" : "String str",
      "info" : "SingleVariableDeclaration[6702-6712]:SingleVariableDeclaration[6702-6712]"
    }, {
      "left" : "int defaultValue",
      "right" : "int defaultValue",
      "info" : "SingleVariableDeclaration[6714-6730]:SingleVariableDeclaration[6714-6730]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6732-6953]:Block[6732-6953]"
    }, {
      "left" : "if(str == null)",
      "right" : "if(str == null)",
      "info" : "IfStatement[6742-6802]:IfStatement[6742-6802]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6758-6802]:Block[6758-6802]"
    }, {
      "left" : "return defaultValue;",
      "right" : "return defaultValue;",
      "info" : "ReturnStatement[6772-6792]:ReturnStatement[6772-6792]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[6811-6947]:TryStatement[6811-6947]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6815-6868]:Block[6815-6868]"
    }, {
      "left" : "return Integer.parseInt(str);",
      "right" : "return Integer.parseInt(str);",
      "info" : "ReturnStatement[6829-6858]:ReturnStatement[6829-6858]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6903-6947]:Block[6903-6947]"
    }, {
      "left" : "return defaultValue;",
      "right" : "return defaultValue;",
      "info" : "ReturnStatement[6917-6937]:ReturnStatement[6917-6937]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7518-7524]:Modifier[7518-7524]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[7525-7531]:Modifier[7525-7531]"
    }, {
      "left" : "long",
      "right" : "long",
      "info" : "PrimitiveType[7532-7536]:PrimitiveType[7532-7536]"
    }, {
      "left" : "toLong",
      "right" : "toLong",
      "info" : "SimpleName[7537-7543]:SimpleName[7537-7543]"
    }, {
      "left" : "String str",
      "right" : "String str",
      "info" : "SingleVariableDeclaration[7544-7554]:SingleVariableDeclaration[7544-7554]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7556-7595]:Block[7556-7595]"
    }, {
      "left" : "return toLong(str, 0L);",
      "right" : "return toLong(str, 0L);",
      "info" : "ReturnStatement[7566-7589]:ReturnStatement[7566-7589]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8205-8211]:Modifier[8205-8211]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[8212-8218]:Modifier[8212-8218]"
    }, {
      "left" : "long",
      "right" : "long",
      "info" : "PrimitiveType[8219-8223]:PrimitiveType[8219-8223]"
    }, {
      "left" : "toLong",
      "right" : "toLong",
      "info" : "SimpleName[8224-8230]:SimpleName[8224-8230]"
    }, {
      "left" : "String str",
      "right" : "String str",
      "info" : "SingleVariableDeclaration[8231-8241]:SingleVariableDeclaration[8231-8241]"
    }, {
      "left" : "long defaultValue",
      "right" : "long defaultValue",
      "info" : "SingleVariableDeclaration[8243-8260]:SingleVariableDeclaration[8243-8260]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8262-8482]:Block[8262-8482]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[8272-8333]:IfStatement[8272-8333]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8289-8333]:Block[8289-8333]"
    }, {
      "left" : "return defaultValue;",
      "right" : "return defaultValue;",
      "info" : "ReturnStatement[8303-8323]:ReturnStatement[8303-8323]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[8342-8476]:TryStatement[8342-8476]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8346-8397]:Block[8346-8397]"
    }, {
      "left" : "return Long.parseLong(str);",
      "right" : "return Long.parseLong(str);",
      "info" : "ReturnStatement[8360-8387]:ReturnStatement[8360-8387]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8432-8476]:Block[8432-8476]"
    }, {
      "left" : "return defaultValue;",
      "right" : "return defaultValue;",
      "info" : "ReturnStatement[8446-8466]:ReturnStatement[8446-8466]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9103-9109]:Modifier[9103-9109]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[9110-9116]:Modifier[9110-9116]"
    }, {
      "left" : "float",
      "right" : "float",
      "info" : "PrimitiveType[9117-9122]:PrimitiveType[9117-9122]"
    }, {
      "left" : "toFloat",
      "right" : "toFloat",
      "info" : "SimpleName[9123-9130]:SimpleName[9123-9130]"
    }, {
      "left" : "String str",
      "right" : "String str",
      "info" : "SingleVariableDeclaration[9131-9141]:SingleVariableDeclaration[9131-9141]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9143-9185]:Block[9143-9185]"
    }, {
      "left" : "return toFloat(str, 0.0f);",
      "right" : "return toFloat(str, 0.0f);",
      "info" : "ReturnStatement[9153-9179]:ReturnStatement[9153-9179]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9862-9868]:Modifier[9862-9868]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[9869-9875]:Modifier[9869-9875]"
    }, {
      "left" : "float",
      "right" : "float",
      "info" : "PrimitiveType[9876-9881]:PrimitiveType[9876-9881]"
    }, {
      "left" : "toFloat",
      "right" : "toFloat",
      "info" : "SimpleName[9882-9889]:SimpleName[9882-9889]"
    }, {
      "left" : "String str",
      "right" : "String str",
      "info" : "SingleVariableDeclaration[9890-9900]:SingleVariableDeclaration[9890-9900]"
    }, {
      "left" : "float defaultValue",
      "right" : "float defaultValue",
      "info" : "SingleVariableDeclaration[9902-9920]:SingleVariableDeclaration[9902-9920]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9922-10133]:Block[9922-10133]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[9930-9987]:IfStatement[9930-9987]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9947-9987]:Block[9947-9987]"
    }, {
      "left" : "return defaultValue;",
      "right" : "return defaultValue;",
      "info" : "ReturnStatement[9959-9979]:ReturnStatement[9959-9979]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[9999-10127]:TryStatement[9999-10127]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10003-10052]:Block[10003-10052]"
    }, {
      "left" : "return Float.parseFloat(str);",
      "right" : "return Float.parseFloat(str);",
      "info" : "ReturnStatement[10015-10044]:ReturnStatement[10015-10044]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10087-10127]:Block[10087-10127]"
    }, {
      "left" : "return defaultValue;",
      "right" : "return defaultValue;",
      "info" : "ReturnStatement[10099-10119]:ReturnStatement[10099-10119]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10759-10765]:Modifier[10759-10765]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[10766-10772]:Modifier[10766-10772]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[10773-10779]:PrimitiveType[10773-10779]"
    }, {
      "left" : "toDouble",
      "right" : "toDouble",
      "info" : "SimpleName[10780-10788]:SimpleName[10780-10788]"
    }, {
      "left" : "String str",
      "right" : "String str",
      "info" : "SingleVariableDeclaration[10789-10799]:SingleVariableDeclaration[10789-10799]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10801-10844]:Block[10801-10844]"
    }, {
      "left" : "return toDouble(str, 0.0d);",
      "right" : "return toDouble(str, 0.0d);",
      "info" : "ReturnStatement[10811-10838]:ReturnStatement[10811-10838]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11526-11532]:Modifier[11526-11532]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[11533-11539]:Modifier[11533-11539]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[11540-11546]:PrimitiveType[11540-11546]"
    }, {
      "left" : "toDouble",
      "right" : "toDouble",
      "info" : "SimpleName[11547-11555]:SimpleName[11547-11555]"
    }, {
      "left" : "String str",
      "right" : "String str",
      "info" : "SingleVariableDeclaration[11556-11566]:SingleVariableDeclaration[11556-11566]"
    }, {
      "left" : "double defaultValue",
      "right" : "double defaultValue",
      "info" : "SingleVariableDeclaration[11568-11587]:SingleVariableDeclaration[11568-11587]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11589-11797]:Block[11589-11797]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[11597-11654]:IfStatement[11597-11654]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11614-11654]:Block[11614-11654]"
    }, {
      "left" : "return defaultValue;",
      "right" : "return defaultValue;",
      "info" : "ReturnStatement[11626-11646]:ReturnStatement[11626-11646]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[11661-11791]:TryStatement[11661-11791]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11665-11716]:Block[11665-11716]"
    }, {
      "left" : "return Double.parseDouble(str);",
      "right" : "return Double.parseDouble(str);",
      "info" : "ReturnStatement[11677-11708]:ReturnStatement[11677-11708]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11751-11791]:Block[11751-11791]"
    }, {
      "left" : "return defaultValue;",
      "right" : "return defaultValue;",
      "info" : "ReturnStatement[11763-11783]:ReturnStatement[11763-11783]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[14303-14309]:Modifier[14303-14309]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[14310-14316]:Modifier[14310-14316]"
    }, {
      "left" : "createNumber",
      "right" : "createNumber",
      "info" : "SimpleName[14324-14336]:SimpleName[14324-14336]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14378-20102]:Block[14378-20059]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[14388-14441]:IfStatement[14388-14441]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14405-14441]:Block[14405-14441]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[14419-14431]:ReturnStatement[14419-14431]"
    }, {
      "left" : "if (StringUtils.isBlank(str))",
      "right" : "if (StringUtils.isBlank(str))",
      "info" : "IfStatement[14450-14576]:IfStatement[14450-14576]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14480-14576]:Block[14480-14576]"
    }, {
      "left" : "throw new NumberFormatException(\"A blank string is not a valid number\");",
      "right" : "throw new NumberFormatException(\"A blank string is not a valid number\");",
      "info" : "ThrowStatement[14494-14566]:ThrowStatement[14494-14566]"
    }, {
      "left" : "if (str.startsWith(\"--\"))",
      "right" : "if (str.startsWith(\"--\"))",
      "info" : "IfStatement[14587-14896]:IfStatement[14587-14896]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14613-14896]:Block[14613-14896]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[14874-14886]:ReturnStatement[14874-14886]"
    }, {
      "left" : "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\"))",
      "right" : "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\"))",
      "info" : "IfStatement[14905-15006]:IfStatement[14905-15006]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14956-15006]:Block[14956-15006]"
    }, {
      "left" : "return createInteger(str);",
      "right" : "return createInteger(str);",
      "info" : "ReturnStatement[14970-14996]:ReturnStatement[14970-14996]"
    }, {
      "left" : "char lastChar = str.charAt(str.length() - 1);",
      "right" : "char lastChar = str.charAt(str.length() - 1);",
      "info" : "VariableDeclarationStatement[15018-15063]:VariableDeclarationStatement[15018-15063]"
    }, {
      "left" : "String mant;",
      "right" : "String mant;",
      "info" : "VariableDeclarationStatement[15072-15084]:VariableDeclarationStatement[15072-15084]"
    }, {
      "left" : "String dec;",
      "right" : "String dec;",
      "info" : "VariableDeclarationStatement[15093-15104]:VariableDeclarationStatement[15093-15104]"
    }, {
      "left" : "String exp;",
      "right" : "String exp;",
      "info" : "VariableDeclarationStatement[15113-15124]:VariableDeclarationStatement[15113-15124]"
    }, {
      "left" : "int decPos = str.indexOf('.');",
      "right" : "int decPos = str.indexOf('.');",
      "info" : "VariableDeclarationStatement[15133-15163]:VariableDeclarationStatement[15133-15163]"
    }, {
      "left" : "int expPos = str.indexOf('e') + str.indexOf('E') + 1;",
      "right" : "int expPos = str.indexOf('e') + str.indexOf('E') + 1;",
      "info" : "VariableDeclarationStatement[15172-15225]:VariableDeclarationStatement[15172-15225]"
    }, {
      "left" : "if (decPos > -1)",
      "right" : "if (decPos > -1)",
      "info" : "IfStatement[15235-15808]:IfStatement[15235-15808]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15252-15624]:Block[15252-15624]"
    }, {
      "left" : "if (expPos > -1)",
      "right" : "if (expPos > -1)",
      "info" : "IfStatement[15267-15569]:IfStatement[15267-15569]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15284-15499]:Block[15284-15499]"
    }, {
      "left" : "if (expPos < decPos)",
      "right" : "if (expPos < decPos)",
      "info" : "IfStatement[15302-15428]:IfStatement[15302-15428]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15323-15428]:Block[15323-15428]"
    }, {
      "left" : "throw new NumberFormatException(str + \" is not a valid number.\");",
      "right" : "throw new NumberFormatException(str + \" is not a valid number.\");",
      "info" : "ThrowStatement[15345-15410]:ThrowStatement[15345-15410]"
    }, {
      "left" : "dec = str.substring(decPos + 1, expPos);",
      "right" : "dec = str.substring(decPos + 1, expPos);",
      "info" : "ExpressionStatement[15445-15485]:ExpressionStatement[15445-15485]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15505-15569]:Block[15505-15569]"
    }, {
      "left" : "dec = str.substring(decPos + 1);",
      "right" : "dec = str.substring(decPos + 1);",
      "info" : "ExpressionStatement[15523-15555]:ExpressionStatement[15523-15555]"
    }, {
      "left" : "mant = str.substring(0, decPos);",
      "right" : "mant = str.substring(0, decPos);",
      "info" : "ExpressionStatement[15582-15614]:ExpressionStatement[15582-15614]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15630-15808]:Block[15630-15808]"
    }, {
      "left" : "if (expPos > -1)",
      "right" : "if (expPos > -1)",
      "info" : "IfStatement[15644-15774]:IfStatement[15644-15774]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15661-15725]:Block[15661-15725]"
    }, {
      "left" : "mant = str.substring(0, expPos);",
      "right" : "mant = str.substring(0, expPos);",
      "info" : "ExpressionStatement[15679-15711]:ExpressionStatement[15679-15711]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15731-15774]:Block[15731-15774]"
    }, {
      "left" : "mant = str;",
      "right" : "mant = str;",
      "info" : "ExpressionStatement[15749-15760]:ExpressionStatement[15749-15760]"
    }, {
      "left" : "dec = null;",
      "right" : "dec = null;",
      "info" : "ExpressionStatement[15787-15798]:ExpressionStatement[15787-15798]"
    }, {
      "left" : "if (!Character.isDigit(lastChar))",
      "right" : "if (!Character.isDigit(lastChar))",
      "info" : "IfStatement[15817-20096]:IfStatement[15817-20053]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15851-18401]:Block[15851-18358]"
    }, {
      "left" : "if (expPos > -1 && expPos < str.length() - 1)",
      "right" : "if (expPos > -1 && expPos < str.length() - 1)",
      "info" : "IfStatement[15865-16042]:IfStatement[15865-16042]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15911-15993]:Block[15911-15993]"
    }, {
      "left" : "exp = str.substring(expPos + 1, str.length() - 1);",
      "right" : "exp = str.substring(expPos + 1, str.length() - 1);",
      "info" : "ExpressionStatement[15929-15979]:ExpressionStatement[15929-15979]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15999-16042]:Block[15999-16042]"
    }, {
      "left" : "exp = null;",
      "right" : "exp = null;",
      "info" : "ExpressionStatement[16017-16028]:ExpressionStatement[16017-16028]"
    }, {
      "left" : "String numeric = str.substring(0, str.length() - 1);",
      "right" : "String numeric = str.substring(0, str.length() - 1);",
      "info" : "VariableDeclarationStatement[16098-16150]:VariableDeclarationStatement[16098-16150]"
    }, {
      "left" : "boolean allZeros = isAllZeros(mant) && isAllZeros(exp);",
      "right" : "boolean allZeros = isAllZeros(mant) && isAllZeros(exp);",
      "info" : "VariableDeclarationStatement[16163-16218]:VariableDeclarationStatement[16163-16218]"
    }, {
      "left" : "switch (lastChar) {\n                case 'l' :\n                case 'L' :\n                    if (dec == null\n                        && exp == null\n                        && isDigits(numeric.substring(1))\n                        && (numeric.charAt(0) == '-' || Character.isDigit(numeric.charAt(0)))) {\n                        try {\n                            return createLong(numeric);\n                        } catch (NumberFormatException nfe) {\n                            //Too big for a long\n                        }\n                        return createBigInteger(numeric);\n\n                    }\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                case 'f' :\n                case 'F' :\n                    try {\n                        Float f = NumberUtils.createFloat(numeric);\n                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                            //If it's too big for a float or the float value = 0 and the string\n                            //has non-zeros in it, then float does not have the precision we want\n                            return f;\n                        }\n\n                    } catch (NumberFormatException nfe) {\n                        // ignore the bad number\n                    }\n                    //Fall through\n                case 'd' :\n                case 'D' :\n                    try {\n                        Double d = NumberUtils.createDouble(numeric);\n                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\n                            return d;\n                        }\n                    } catch (NumberFormatException nfe) {\n                        // ignore the bad number\n                    }\n                    try {\n                        return createBigDecimal(numeric);\n                    } catch (NumberFormatException e) {\n                        // ignore the bad number\n                    }\n                    //Fall through\n                default :\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n\n            }",
      "right" : "switch (lastChar) {\n                case 'l' :\n                case 'L' :\n                    if (dec == null\n                        && exp == null\n                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {\n                        try {\n                            return createLong(numeric);\n                        } catch (NumberFormatException nfe) {\n                            //Too big for a long\n                        }\n                        return createBigInteger(numeric);\n\n                    }\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                case 'f' :\n                case 'F' :\n                    try {\n                        Float f = NumberUtils.createFloat(numeric);\n                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                            //If it's too big for a float or the float value = 0 and the string\n                            //has non-zeros in it, then float does not have the precision we want\n                            return f;\n                        }\n\n                    } catch (NumberFormatException nfe) {\n                        // ignore the bad number\n                    }\n                    //Fall through\n                case 'd' :\n                case 'D' :\n                    try {\n                        Double d = NumberUtils.createDouble(numeric);\n                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\n                            return d;\n                        }\n                    } catch (NumberFormatException nfe) {\n                        // ignore the bad number\n                    }\n                    try {\n                        return createBigDecimal(numeric);\n                    } catch (NumberFormatException e) {\n                        // ignore the bad number\n                    }\n                    //Fall through\n                default :\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n\n            }",
      "info" : "SwitchStatement[16231-18391]:SwitchStatement[16231-18348]"
    }, {
      "left" : "case 'l' :",
      "right" : "case 'l' :",
      "info" : "SwitchCase[16267-16277]:SwitchCase[16267-16277]"
    }, {
      "left" : "case 'L' :",
      "right" : "case 'L' :",
      "info" : "SwitchCase[16294-16304]:SwitchCase[16294-16304]"
    }, {
      "left" : "if (dec == null\n                        && exp == null\n                        && isDigits(numeric.substring(1))\n                        && (numeric.charAt(0) == '-' || Character.isDigit(numeric.charAt(0))))",
      "right" : "if (dec == null\n                        && exp == null\n                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric)))",
      "info" : "IfStatement[16325-16838]:IfStatement[16325-16795]"
    }, {
      "left" : "dec == null\n                        && exp == null",
      "right" : "dec == null\n                        && exp == null",
      "info" : "InfixExpression[16329-16379]:InfixExpression[16329-16379]"
    }, {
      "left" : "&&",
      "right" : "&&",
      "info" : "INFIX_EXPRESSION_OPERATOR[16404-16406]:INFIX_EXPRESSION_OPERATOR[16433-16435]"
    }, {
      "left" : "isDigits(numeric.substring(1))",
      "right" : "isDigits(numeric.substring(1))",
      "info" : "MethodInvocation[16407-16437]:MethodInvocation[16436-16466]"
    }, {
      "left" : "numeric.charAt(0) == '-'",
      "right" : "numeric.charAt(0) == '-'",
      "info" : "InfixExpression[16466-16490]:InfixExpression[16408-16432]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16533-16838]:Block[16490-16795]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[16559-16757]:TryStatement[16516-16714]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16563-16646]:Block[16520-16603]"
    }, {
      "left" : "return createLong(numeric);",
      "right" : "return createLong(numeric);",
      "info" : "ReturnStatement[16593-16620]:ReturnStatement[16550-16577]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16681-16757]:Block[16638-16714]"
    }, {
      "left" : "return createBigInteger(numeric);",
      "right" : "return createBigInteger(numeric);",
      "info" : "ReturnStatement[16782-16815]:ReturnStatement[16739-16772]"
    }, {
      "left" : "throw new NumberFormatException(str + \" is not a valid number.\");",
      "right" : "throw new NumberFormatException(str + \" is not a valid number.\");",
      "info" : "ThrowStatement[16859-16924]:ThrowStatement[16816-16881]"
    }, {
      "left" : "case 'f' :",
      "right" : "case 'f' :",
      "info" : "SwitchCase[16941-16951]:SwitchCase[16898-16908]"
    }, {
      "left" : "case 'F' :",
      "right" : "case 'F' :",
      "info" : "SwitchCase[16968-16978]:SwitchCase[16925-16935]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[16999-17550]:TryStatement[16956-17507]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17003-17443]:Block[16960-17400]"
    }, {
      "left" : "Float f = NumberUtils.createFloat(numeric);",
      "right" : "Float f = NumberUtils.createFloat(numeric);",
      "info" : "VariableDeclarationStatement[17029-17072]:VariableDeclarationStatement[16986-17029]"
    }, {
      "left" : "if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros)))",
      "right" : "if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros)))",
      "info" : "IfStatement[17097-17420]:IfStatement[17054-17377]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17161-17420]:Block[17118-17377]"
    }, {
      "left" : "return f;",
      "right" : "return f;",
      "info" : "ReturnStatement[17385-17394]:ReturnStatement[17342-17351]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17478-17550]:Block[17435-17507]"
    }, {
      "left" : "case 'd' :",
      "right" : "case 'd' :",
      "info" : "SwitchCase[17602-17612]:SwitchCase[17559-17569]"
    }, {
      "left" : "case 'D' :",
      "right" : "case 'D' :",
      "info" : "SwitchCase[17629-17639]:SwitchCase[17586-17596]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[17660-18018]:TryStatement[17617-17975]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17664-17911]:Block[17621-17868]"
    }, {
      "left" : "Double d = NumberUtils.createDouble(numeric);",
      "right" : "Double d = NumberUtils.createDouble(numeric);",
      "info" : "VariableDeclarationStatement[17690-17735]:VariableDeclarationStatement[17647-17692]"
    }, {
      "left" : "if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros)))",
      "right" : "if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros)))",
      "info" : "IfStatement[17760-17889]:IfStatement[17717-17846]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17824-17889]:Block[17781-17846]"
    }, {
      "left" : "return d;",
      "right" : "return d;",
      "info" : "ReturnStatement[17854-17863]:ReturnStatement[17811-17820]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17946-18018]:Block[17903-17975]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[18039-18229]:TryStatement[17996-18186]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18043-18124]:Block[18000-18081]"
    }, {
      "left" : "return createBigDecimal(numeric);",
      "right" : "return createBigDecimal(numeric);",
      "info" : "ReturnStatement[18069-18102]:ReturnStatement[18026-18059]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18157-18229]:Block[18114-18186]"
    }, {
      "left" : "default :",
      "right" : "default :",
      "info" : "SwitchCase[18281-18290]:SwitchCase[18238-18247]"
    }, {
      "left" : "throw new NumberFormatException(str + \" is not a valid number.\");",
      "right" : "throw new NumberFormatException(str + \" is not a valid number.\");",
      "info" : "ThrowStatement[18311-18376]:ThrowStatement[18268-18333]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18407-20096]:Block[18364-20053]"
    }, {
      "left" : "if (expPos > -1 && expPos < str.length() - 1)",
      "right" : "if (expPos > -1 && expPos < str.length() - 1)",
      "info" : "IfStatement[18542-18715]:IfStatement[18499-18672]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18588-18666]:Block[18545-18623]"
    }, {
      "left" : "exp = str.substring(expPos + 1, str.length());",
      "right" : "exp = str.substring(expPos + 1, str.length());",
      "info" : "ExpressionStatement[18606-18652]:ExpressionStatement[18563-18609]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18672-18715]:Block[18629-18672]"
    }, {
      "left" : "exp = null;",
      "right" : "exp = null;",
      "info" : "ExpressionStatement[18690-18701]:ExpressionStatement[18647-18658]"
    }, {
      "left" : "if (dec == null && exp == null)",
      "right" : "if (dec == null && exp == null)",
      "info" : "IfStatement[18728-20086]:IfStatement[18685-20043]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18760-19236]:Block[18717-19193]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[18823-18992]:TryStatement[18780-18949]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18827-18893]:Block[18784-18850]"
    }, {
      "left" : "return createInteger(str);",
      "right" : "return createInteger(str);",
      "info" : "ReturnStatement[18849-18875]:ReturnStatement[18806-18832]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18928-18992]:Block[18885-18949]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[19009-19175]:TryStatement[18966-19132]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19013-19076]:Block[18970-19033]"
    }, {
      "left" : "return createLong(str);",
      "right" : "return createLong(str);",
      "info" : "ReturnStatement[19035-19058]:ReturnStatement[18992-19015]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19111-19175]:Block[19068-19132]"
    }, {
      "left" : "return createBigInteger(str);",
      "right" : "return createBigInteger(str);",
      "info" : "ReturnStatement[19192-19221]:ReturnStatement[19149-19178]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19242-20086]:Block[19199-20043]"
    }, {
      "left" : "boolean allZeros = isAllZeros(mant) && isAllZeros(exp);",
      "right" : "boolean allZeros = isAllZeros(mant) && isAllZeros(exp);",
      "info" : "VariableDeclarationStatement[19308-19363]:VariableDeclarationStatement[19265-19320]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[19380-19692]:TryStatement[19337-19649]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19384-19593]:Block[19341-19550]"
    }, {
      "left" : "Float f = createFloat(str);",
      "right" : "Float f = createFloat(str);",
      "info" : "VariableDeclarationStatement[19406-19433]:VariableDeclarationStatement[19363-19390]"
    }, {
      "left" : "if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros)))",
      "right" : "if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros)))",
      "info" : "IfStatement[19454-19575]:IfStatement[19411-19532]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19518-19575]:Block[19475-19532]"
    }, {
      "left" : "return f;",
      "right" : "return f;",
      "info" : "ReturnStatement[19544-19553]:ReturnStatement[19501-19510]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19628-19692]:Block[19585-19649]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[19709-20024]:TryStatement[19666-19981]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19713-19925]:Block[19670-19882]"
    }, {
      "left" : "Double d = createDouble(str);",
      "right" : "Double d = createDouble(str);",
      "info" : "VariableDeclarationStatement[19735-19764]:VariableDeclarationStatement[19692-19721]"
    }, {
      "left" : "if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros)))",
      "right" : "if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros)))",
      "info" : "IfStatement[19785-19907]:IfStatement[19742-19864]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19850-19907]:Block[19807-19864]"
    }, {
      "left" : "return d;",
      "right" : "return d;",
      "info" : "ReturnStatement[19876-19885]:ReturnStatement[19833-19842]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19960-20024]:Block[19917-19981]"
    }, {
      "left" : "return createBigDecimal(str);",
      "right" : "return createBigDecimal(str);",
      "info" : "ReturnStatement[20042-20071]:ReturnStatement[19999-20028]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[20374-20381]:Modifier[20331-20338]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[20382-20388]:Modifier[20339-20345]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[20389-20396]:PrimitiveType[20346-20353]"
    }, {
      "left" : "isAllZeros",
      "right" : "isAllZeros",
      "info" : "SimpleName[20397-20407]:SimpleName[20354-20364]"
    }, {
      "left" : "String str",
      "right" : "String str",
      "info" : "SingleVariableDeclaration[20408-20418]:SingleVariableDeclaration[20365-20375]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20420-20670]:Block[20377-20627]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[20430-20483]:IfStatement[20387-20440]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20447-20483]:Block[20404-20440]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[20461-20473]:ReturnStatement[20418-20430]"
    }, {
      "left" : "for (int i = str.length() - 1; i >= 0; i--)",
      "right" : "for (int i = str.length() - 1; i >= 0; i--)",
      "info" : "ForStatement[20492-20631]:ForStatement[20449-20588]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20536-20631]:Block[20493-20588]"
    }, {
      "left" : "if (str.charAt(i) != '0')",
      "right" : "if (str.charAt(i) != '0')",
      "info" : "IfStatement[20550-20621]:IfStatement[20507-20578]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20576-20621]:Block[20533-20578]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[20594-20607]:ReturnStatement[20551-20564]"
    }, {
      "left" : "return str.length() > 0;",
      "right" : "return str.length() > 0;",
      "info" : "ReturnStatement[20640-20664]:ReturnStatement[20597-20621]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[21109-21115]:Modifier[21066-21072]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[21116-21122]:Modifier[21073-21079]"
    }, {
      "left" : "Float",
      "right" : "Float",
      "info" : "SimpleType[21123-21128]:SimpleType[21080-21085]"
    }, {
      "left" : "createFloat",
      "right" : "createFloat",
      "info" : "SimpleName[21129-21140]:SimpleName[21086-21097]"
    }, {
      "left" : "String str",
      "right" : "String str",
      "info" : "SingleVariableDeclaration[21141-21151]:SingleVariableDeclaration[21098-21108]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21153-21257]:Block[21110-21214]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[21163-21216]:IfStatement[21120-21173]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21180-21216]:Block[21137-21173]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[21194-21206]:ReturnStatement[21151-21163]"
    }, {
      "left" : "return Float.valueOf(str);",
      "right" : "return Float.valueOf(str);",
      "info" : "ReturnStatement[21225-21251]:ReturnStatement[21182-21208]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[21620-21626]:Modifier[21577-21583]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[21627-21633]:Modifier[21584-21590]"
    }, {
      "left" : "Double",
      "right" : "Double",
      "info" : "SimpleType[21634-21640]:SimpleType[21591-21597]"
    }, {
      "left" : "createDouble",
      "right" : "createDouble",
      "info" : "SimpleName[21641-21653]:SimpleName[21598-21610]"
    }, {
      "left" : "String str",
      "right" : "String str",
      "info" : "SingleVariableDeclaration[21654-21664]:SingleVariableDeclaration[21611-21621]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21666-21771]:Block[21623-21728]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[21676-21729]:IfStatement[21633-21686]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21693-21729]:Block[21650-21686]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[21707-21719]:ReturnStatement[21664-21676]"
    }, {
      "left" : "return Double.valueOf(str);",
      "right" : "return Double.valueOf(str);",
      "info" : "ReturnStatement[21738-21765]:ReturnStatement[21695-21722]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[22177-22183]:Modifier[22134-22140]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[22184-22190]:Modifier[22141-22147]"
    }, {
      "left" : "Integer",
      "right" : "Integer",
      "info" : "SimpleType[22191-22198]:SimpleType[22148-22155]"
    }, {
      "left" : "createInteger",
      "right" : "createInteger",
      "info" : "SimpleName[22199-22212]:SimpleName[22156-22169]"
    }, {
      "left" : "String str",
      "right" : "String str",
      "info" : "SingleVariableDeclaration[22213-22223]:SingleVariableDeclaration[22170-22180]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22225-22399]:Block[22182-22356]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[22235-22288]:IfStatement[22192-22245]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22252-22288]:Block[22209-22245]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[22266-22278]:ReturnStatement[22223-22235]"
    }, {
      "left" : "return Integer.decode(str);",
      "right" : "return Integer.decode(str);",
      "info" : "ReturnStatement[22366-22393]:ReturnStatement[22323-22350]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[22758-22764]:Modifier[22715-22721]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[22765-22771]:Modifier[22722-22728]"
    }, {
      "left" : "Long",
      "right" : "Long",
      "info" : "SimpleType[22772-22776]:SimpleType[22729-22733]"
    }, {
      "left" : "createLong",
      "right" : "createLong",
      "info" : "SimpleName[22777-22787]:SimpleName[22734-22744]"
    }, {
      "left" : "String str",
      "right" : "String str",
      "info" : "SingleVariableDeclaration[22788-22798]:SingleVariableDeclaration[22745-22755]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22800-22903]:Block[22757-22860]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[22810-22863]:IfStatement[22767-22820]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22827-22863]:Block[22784-22820]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[22841-22853]:ReturnStatement[22798-22810]"
    }, {
      "left" : "return Long.valueOf(str);",
      "right" : "return Long.valueOf(str);",
      "info" : "ReturnStatement[22872-22897]:ReturnStatement[22829-22854]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[23274-23280]:Modifier[23231-23237]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[23281-23287]:Modifier[23238-23244]"
    }, {
      "left" : "BigInteger",
      "right" : "BigInteger",
      "info" : "SimpleType[23288-23298]:SimpleType[23245-23255]"
    }, {
      "left" : "createBigInteger",
      "right" : "createBigInteger",
      "info" : "SimpleName[23299-23315]:SimpleName[23256-23272]"
    }, {
      "left" : "String str",
      "right" : "String str",
      "info" : "SingleVariableDeclaration[23316-23326]:SingleVariableDeclaration[23273-23283]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23328-23433]:Block[23285-23390]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[23338-23391]:IfStatement[23295-23348]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23355-23391]:Block[23312-23348]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[23369-23381]:ReturnStatement[23326-23338]"
    }, {
      "left" : "return new BigInteger(str);",
      "right" : "return new BigInteger(str);",
      "info" : "ReturnStatement[23400-23427]:ReturnStatement[23357-23384]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[23804-23810]:Modifier[23761-23767]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[23811-23817]:Modifier[23768-23774]"
    }, {
      "left" : "BigDecimal",
      "right" : "BigDecimal",
      "info" : "SimpleType[23818-23828]:SimpleType[23775-23785]"
    }, {
      "left" : "createBigDecimal",
      "right" : "createBigDecimal",
      "info" : "SimpleName[23829-23845]:SimpleName[23786-23802]"
    }, {
      "left" : "String str",
      "right" : "String str",
      "info" : "SingleVariableDeclaration[23846-23856]:SingleVariableDeclaration[23803-23813]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23858-24173]:Block[23815-24130]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[23868-23921]:IfStatement[23825-23878]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23885-23921]:Block[23842-23878]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[23899-23911]:ReturnStatement[23856-23868]"
    }, {
      "left" : "if (StringUtils.isBlank(str))",
      "right" : "if (StringUtils.isBlank(str))",
      "info" : "IfStatement[24003-24129]:IfStatement[23960-24086]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24033-24129]:Block[23990-24086]"
    }, {
      "left" : "throw new NumberFormatException(\"A blank string is not a valid number\");",
      "right" : "throw new NumberFormatException(\"A blank string is not a valid number\");",
      "info" : "ThrowStatement[24047-24119]:ThrowStatement[24004-24076]"
    }, {
      "left" : "return new BigDecimal(str);",
      "right" : "return new BigDecimal(str);",
      "info" : "ReturnStatement[24140-24167]:ReturnStatement[24097-24124]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[24507-24513]:Modifier[24464-24470]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[24514-24520]:Modifier[24471-24477]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[24521-24528]:PrimitiveType[24478-24485]"
    }, {
      "left" : "equals",
      "right" : "equals",
      "info" : "SimpleName[24529-24535]:SimpleName[24486-24492]"
    }, {
      "left" : "byte[] array1",
      "right" : "byte[] array1",
      "info" : "SingleVariableDeclaration[24536-24549]:SingleVariableDeclaration[24493-24506]"
    }, {
      "left" : "byte[] array2",
      "right" : "byte[] array2",
      "info" : "SingleVariableDeclaration[24551-24564]:SingleVariableDeclaration[24508-24521]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24566-24971]:Block[24523-24928]"
    }, {
      "left" : "if (array1 == array2)",
      "right" : "if (array1 == array2)",
      "info" : "IfStatement[24576-24634]:IfStatement[24533-24591]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24598-24634]:Block[24555-24591]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[24612-24624]:ReturnStatement[24569-24581]"
    }, {
      "left" : "if (array1 == null || array2 == null)",
      "right" : "if (array1 == null || array2 == null)",
      "info" : "IfStatement[24643-24718]:IfStatement[24600-24675]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24681-24718]:Block[24638-24675]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[24695-24708]:ReturnStatement[24652-24665]"
    }, {
      "left" : "if (array1.length != array2.length)",
      "right" : "if (array1.length != array2.length)",
      "info" : "IfStatement[24727-24800]:IfStatement[24684-24757]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24763-24800]:Block[24720-24757]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[24777-24790]:ReturnStatement[24734-24747]"
    }, {
      "left" : "for (int i=0; i<array1.length; i++)",
      "right" : "for (int i=0; i<array1.length; i++)",
      "info" : "ForStatement[24810-24943]:ForStatement[24767-24900]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24846-24943]:Block[24803-24900]"
    }, {
      "left" : "if (array1[i] != array2[i])",
      "right" : "if (array1[i] != array2[i])",
      "info" : "IfStatement[24860-24933]:IfStatement[24817-24890]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24888-24933]:Block[24845-24890]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[24906-24919]:ReturnStatement[24863-24876]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[24953-24965]:ReturnStatement[24910-24922]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[25208-25214]:Modifier[25165-25171]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[25215-25221]:Modifier[25172-25178]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[25222-25229]:PrimitiveType[25179-25186]"
    }, {
      "left" : "equals",
      "right" : "equals",
      "info" : "SimpleName[25230-25236]:SimpleName[25187-25193]"
    }, {
      "left" : "short[] array1",
      "right" : "short[] array1",
      "info" : "SingleVariableDeclaration[25237-25251]:SingleVariableDeclaration[25194-25208]"
    }, {
      "left" : "short[] array2",
      "right" : "short[] array2",
      "info" : "SingleVariableDeclaration[25253-25267]:SingleVariableDeclaration[25210-25224]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25269-25674]:Block[25226-25631]"
    }, {
      "left" : "if (array1 == array2)",
      "right" : "if (array1 == array2)",
      "info" : "IfStatement[25279-25337]:IfStatement[25236-25294]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25301-25337]:Block[25258-25294]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[25315-25327]:ReturnStatement[25272-25284]"
    }, {
      "left" : "if (array1 == null || array2 == null)",
      "right" : "if (array1 == null || array2 == null)",
      "info" : "IfStatement[25346-25421]:IfStatement[25303-25378]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25384-25421]:Block[25341-25378]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[25398-25411]:ReturnStatement[25355-25368]"
    }, {
      "left" : "if (array1.length != array2.length)",
      "right" : "if (array1.length != array2.length)",
      "info" : "IfStatement[25430-25503]:IfStatement[25387-25460]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25466-25503]:Block[25423-25460]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[25480-25493]:ReturnStatement[25437-25450]"
    }, {
      "left" : "for (int i=0; i<array1.length; i++)",
      "right" : "for (int i=0; i<array1.length; i++)",
      "info" : "ForStatement[25513-25646]:ForStatement[25470-25603]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25549-25646]:Block[25506-25603]"
    }, {
      "left" : "if (array1[i] != array2[i])",
      "right" : "if (array1[i] != array2[i])",
      "info" : "IfStatement[25563-25636]:IfStatement[25520-25593]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25591-25636]:Block[25548-25593]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[25609-25622]:ReturnStatement[25566-25579]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[25656-25668]:ReturnStatement[25613-25625]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[25909-25915]:Modifier[25866-25872]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[25916-25922]:Modifier[25873-25879]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[25923-25930]:PrimitiveType[25880-25887]"
    }, {
      "left" : "equals",
      "right" : "equals",
      "info" : "SimpleName[25931-25937]:SimpleName[25888-25894]"
    }, {
      "left" : "int[] array1",
      "right" : "int[] array1",
      "info" : "SingleVariableDeclaration[25938-25950]:SingleVariableDeclaration[25895-25907]"
    }, {
      "left" : "int[] array2",
      "right" : "int[] array2",
      "info" : "SingleVariableDeclaration[25952-25964]:SingleVariableDeclaration[25909-25921]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25966-26371]:Block[25923-26328]"
    }, {
      "left" : "if (array1 == array2)",
      "right" : "if (array1 == array2)",
      "info" : "IfStatement[25976-26034]:IfStatement[25933-25991]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25998-26034]:Block[25955-25991]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[26012-26024]:ReturnStatement[25969-25981]"
    }, {
      "left" : "if (array1 == null || array2 == null)",
      "right" : "if (array1 == null || array2 == null)",
      "info" : "IfStatement[26043-26118]:IfStatement[26000-26075]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26081-26118]:Block[26038-26075]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[26095-26108]:ReturnStatement[26052-26065]"
    }, {
      "left" : "if (array1.length != array2.length)",
      "right" : "if (array1.length != array2.length)",
      "info" : "IfStatement[26127-26200]:IfStatement[26084-26157]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26163-26200]:Block[26120-26157]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[26177-26190]:ReturnStatement[26134-26147]"
    }, {
      "left" : "for (int i=0; i<array1.length; i++)",
      "right" : "for (int i=0; i<array1.length; i++)",
      "info" : "ForStatement[26210-26343]:ForStatement[26167-26300]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26246-26343]:Block[26203-26300]"
    }, {
      "left" : "if (array1[i] != array2[i])",
      "right" : "if (array1[i] != array2[i])",
      "info" : "IfStatement[26260-26333]:IfStatement[26217-26290]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26288-26333]:Block[26245-26290]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[26306-26319]:ReturnStatement[26263-26276]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[26353-26365]:ReturnStatement[26310-26322]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[26607-26613]:Modifier[26564-26570]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[26614-26620]:Modifier[26571-26577]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[26621-26628]:PrimitiveType[26578-26585]"
    }, {
      "left" : "equals",
      "right" : "equals",
      "info" : "SimpleName[26629-26635]:SimpleName[26586-26592]"
    }, {
      "left" : "long[] array1",
      "right" : "long[] array1",
      "info" : "SingleVariableDeclaration[26636-26649]:SingleVariableDeclaration[26593-26606]"
    }, {
      "left" : "long[] array2",
      "right" : "long[] array2",
      "info" : "SingleVariableDeclaration[26651-26664]:SingleVariableDeclaration[26608-26621]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26666-27071]:Block[26623-27028]"
    }, {
      "left" : "if (array1 == array2)",
      "right" : "if (array1 == array2)",
      "info" : "IfStatement[26676-26734]:IfStatement[26633-26691]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26698-26734]:Block[26655-26691]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[26712-26724]:ReturnStatement[26669-26681]"
    }, {
      "left" : "if (array1 == null || array2 == null)",
      "right" : "if (array1 == null || array2 == null)",
      "info" : "IfStatement[26743-26818]:IfStatement[26700-26775]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26781-26818]:Block[26738-26775]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[26795-26808]:ReturnStatement[26752-26765]"
    }, {
      "left" : "if (array1.length != array2.length)",
      "right" : "if (array1.length != array2.length)",
      "info" : "IfStatement[26827-26900]:IfStatement[26784-26857]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26863-26900]:Block[26820-26857]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[26877-26890]:ReturnStatement[26834-26847]"
    }, {
      "left" : "for (int i=0; i<array1.length; i++)",
      "right" : "for (int i=0; i<array1.length; i++)",
      "info" : "ForStatement[26910-27043]:ForStatement[26867-27000]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26946-27043]:Block[26903-27000]"
    }, {
      "left" : "if (array1[i] != array2[i])",
      "right" : "if (array1[i] != array2[i])",
      "info" : "IfStatement[26960-27033]:IfStatement[26917-26990]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26988-27033]:Block[26945-26990]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[27006-27019]:ReturnStatement[26963-26976]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[27053-27065]:ReturnStatement[27010-27022]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[27308-27314]:Modifier[27265-27271]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[27315-27321]:Modifier[27272-27278]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[27322-27329]:PrimitiveType[27279-27286]"
    }, {
      "left" : "equals",
      "right" : "equals",
      "info" : "SimpleName[27330-27336]:SimpleName[27287-27293]"
    }, {
      "left" : "float[] array1",
      "right" : "float[] array1",
      "info" : "SingleVariableDeclaration[27337-27351]:SingleVariableDeclaration[27294-27308]"
    }, {
      "left" : "float[] array2",
      "right" : "float[] array2",
      "info" : "SingleVariableDeclaration[27353-27367]:SingleVariableDeclaration[27310-27324]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27369-27786]:Block[27326-27743]"
    }, {
      "left" : "if (array1 == array2)",
      "right" : "if (array1 == array2)",
      "info" : "IfStatement[27379-27437]:IfStatement[27336-27394]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27401-27437]:Block[27358-27394]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[27415-27427]:ReturnStatement[27372-27384]"
    }, {
      "left" : "if (array1 == null || array2 == null)",
      "right" : "if (array1 == null || array2 == null)",
      "info" : "IfStatement[27446-27521]:IfStatement[27403-27478]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27484-27521]:Block[27441-27478]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[27498-27511]:ReturnStatement[27455-27468]"
    }, {
      "left" : "if (array1.length != array2.length)",
      "right" : "if (array1.length != array2.length)",
      "info" : "IfStatement[27530-27603]:IfStatement[27487-27560]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27566-27603]:Block[27523-27560]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[27580-27593]:ReturnStatement[27537-27550]"
    }, {
      "left" : "for (int i=0; i<array1.length; i++)",
      "right" : "for (int i=0; i<array1.length; i++)",
      "info" : "ForStatement[27613-27758]:ForStatement[27570-27715]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27649-27758]:Block[27606-27715]"
    }, {
      "left" : "if (compare(array1[i], array2[i]) != 0)",
      "right" : "if (compare(array1[i], array2[i]) != 0)",
      "info" : "IfStatement[27663-27748]:IfStatement[27620-27705]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27703-27748]:Block[27660-27705]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[27721-27734]:ReturnStatement[27678-27691]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[27768-27780]:ReturnStatement[27725-27737]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[28024-28030]:Modifier[27981-27987]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[28031-28037]:Modifier[27988-27994]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[28038-28045]:PrimitiveType[27995-28002]"
    }, {
      "left" : "equals",
      "right" : "equals",
      "info" : "SimpleName[28046-28052]:SimpleName[28003-28009]"
    }, {
      "left" : "double[] array1",
      "right" : "double[] array1",
      "info" : "SingleVariableDeclaration[28053-28068]:SingleVariableDeclaration[28010-28025]"
    }, {
      "left" : "double[] array2",
      "right" : "double[] array2",
      "info" : "SingleVariableDeclaration[28070-28085]:SingleVariableDeclaration[28027-28042]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28087-28504]:Block[28044-28461]"
    }, {
      "left" : "if (array1 == array2)",
      "right" : "if (array1 == array2)",
      "info" : "IfStatement[28097-28155]:IfStatement[28054-28112]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28119-28155]:Block[28076-28112]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[28133-28145]:ReturnStatement[28090-28102]"
    }, {
      "left" : "if (array1 == null || array2 == null)",
      "right" : "if (array1 == null || array2 == null)",
      "info" : "IfStatement[28164-28239]:IfStatement[28121-28196]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28202-28239]:Block[28159-28196]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[28216-28229]:ReturnStatement[28173-28186]"
    }, {
      "left" : "if (array1.length != array2.length)",
      "right" : "if (array1.length != array2.length)",
      "info" : "IfStatement[28248-28321]:IfStatement[28205-28278]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28284-28321]:Block[28241-28278]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[28298-28311]:ReturnStatement[28255-28268]"
    }, {
      "left" : "for (int i=0; i<array1.length; i++)",
      "right" : "for (int i=0; i<array1.length; i++)",
      "info" : "ForStatement[28331-28476]:ForStatement[28288-28433]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28367-28476]:Block[28324-28433]"
    }, {
      "left" : "if (compare(array1[i], array2[i]) != 0)",
      "right" : "if (compare(array1[i], array2[i]) != 0)",
      "info" : "IfStatement[28381-28466]:IfStatement[28338-28423]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28421-28466]:Block[28378-28423]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[28439-28452]:ReturnStatement[28396-28409]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[28486-28498]:ReturnStatement[28443-28455]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[28939-28945]:Modifier[28896-28902]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[28946-28952]:Modifier[28903-28909]"
    }, {
      "left" : "long",
      "right" : "long",
      "info" : "PrimitiveType[28953-28957]:PrimitiveType[28910-28914]"
    }, {
      "left" : "min",
      "right" : "min",
      "info" : "SimpleName[28958-28961]:SimpleName[28915-28918]"
    }, {
      "left" : "long[] array",
      "right" : "long[] array",
      "info" : "SingleVariableDeclaration[28962-28974]:SingleVariableDeclaration[28919-28931]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28976-29472]:Block[28933-29429]"
    }, {
      "left" : "if (array == null)",
      "right" : "if (array == null)",
      "info" : "IfStatement[29013-29235]:IfStatement[28970-29192]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29032-29121]:Block[28989-29078]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The Array must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The Array must not be null\");",
      "info" : "ThrowStatement[29046-29111]:ThrowStatement[29003-29068]"
    }, {
      "left" : "if (array.length == 0)",
      "right" : "if (array.length == 0)",
      "info" : "IfStatement[29127-29235]:IfStatement[29084-29192]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29150-29235]:Block[29107-29192]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Array cannot be empty.\");",
      "right" : "throw new IllegalArgumentException(\"Array cannot be empty.\");",
      "info" : "ThrowStatement[29164-29225]:ThrowStatement[29121-29182]"
    }, {
      "left" : "long min = array[0];",
      "right" : "long min = array[0];",
      "info" : "VariableDeclarationStatement[29282-29302]:VariableDeclarationStatement[29239-29259]"
    }, {
      "left" : "for (int i = 1; i < array.length; i++)",
      "right" : "for (int i = 1; i < array.length; i++)",
      "info" : "ForStatement[29311-29441]:ForStatement[29268-29398]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29350-29441]:Block[29307-29398]"
    }, {
      "left" : "if (array[i] < min)",
      "right" : "if (array[i] < min)",
      "info" : "IfStatement[29364-29431]:IfStatement[29321-29388]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29384-29431]:Block[29341-29388]"
    }, {
      "left" : "min = array[i];",
      "right" : "min = array[i];",
      "info" : "ExpressionStatement[29402-29417]:ExpressionStatement[29359-29374]"
    }, {
      "left" : "return min;",
      "right" : "return min;",
      "info" : "ReturnStatement[29455-29466]:ReturnStatement[29412-29423]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[29812-29818]:Modifier[29769-29775]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[29819-29825]:Modifier[29776-29782]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[29826-29829]:PrimitiveType[29783-29786]"
    }, {
      "left" : "min",
      "right" : "min",
      "info" : "SimpleName[29830-29833]:SimpleName[29787-29790]"
    }, {
      "left" : "int[] array",
      "right" : "int[] array",
      "info" : "SingleVariableDeclaration[29834-29845]:SingleVariableDeclaration[29791-29802]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29847-30342]:Block[29804-30299]"
    }, {
      "left" : "if (array == null)",
      "right" : "if (array == null)",
      "info" : "IfStatement[29884-30106]:IfStatement[29841-30063]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29903-29992]:Block[29860-29949]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The Array must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The Array must not be null\");",
      "info" : "ThrowStatement[29917-29982]:ThrowStatement[29874-29939]"
    }, {
      "left" : "if (array.length == 0)",
      "right" : "if (array.length == 0)",
      "info" : "IfStatement[29998-30106]:IfStatement[29955-30063]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30021-30106]:Block[29978-30063]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Array cannot be empty.\");",
      "right" : "throw new IllegalArgumentException(\"Array cannot be empty.\");",
      "info" : "ThrowStatement[30035-30096]:ThrowStatement[29992-30053]"
    }, {
      "left" : "int min = array[0];",
      "right" : "int min = array[0];",
      "info" : "VariableDeclarationStatement[30153-30172]:VariableDeclarationStatement[30110-30129]"
    }, {
      "left" : "for (int j = 1; j < array.length; j++)",
      "right" : "for (int j = 1; j < array.length; j++)",
      "info" : "ForStatement[30181-30311]:ForStatement[30138-30268]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30220-30311]:Block[30177-30268]"
    }, {
      "left" : "if (array[j] < min)",
      "right" : "if (array[j] < min)",
      "info" : "IfStatement[30234-30301]:IfStatement[30191-30258]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30254-30301]:Block[30211-30258]"
    }, {
      "left" : "min = array[j];",
      "right" : "min = array[j];",
      "info" : "ExpressionStatement[30272-30287]:ExpressionStatement[30229-30244]"
    }, {
      "left" : "return min;",
      "right" : "return min;",
      "info" : "ReturnStatement[30325-30336]:ReturnStatement[30282-30293]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[30682-30688]:Modifier[30639-30645]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[30689-30695]:Modifier[30646-30652]"
    }, {
      "left" : "short",
      "right" : "short",
      "info" : "PrimitiveType[30696-30701]:PrimitiveType[30653-30658]"
    }, {
      "left" : "min",
      "right" : "min",
      "info" : "SimpleName[30702-30705]:SimpleName[30659-30662]"
    }, {
      "left" : "short[] array",
      "right" : "short[] array",
      "info" : "SingleVariableDeclaration[30706-30719]:SingleVariableDeclaration[30663-30676]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30721-31218]:Block[30678-31175]"
    }, {
      "left" : "if (array == null)",
      "right" : "if (array == null)",
      "info" : "IfStatement[30758-30980]:IfStatement[30715-30937]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30777-30866]:Block[30734-30823]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The Array must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The Array must not be null\");",
      "info" : "ThrowStatement[30791-30856]:ThrowStatement[30748-30813]"
    }, {
      "left" : "if (array.length == 0)",
      "right" : "if (array.length == 0)",
      "info" : "IfStatement[30872-30980]:IfStatement[30829-30937]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30895-30980]:Block[30852-30937]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Array cannot be empty.\");",
      "right" : "throw new IllegalArgumentException(\"Array cannot be empty.\");",
      "info" : "ThrowStatement[30909-30970]:ThrowStatement[30866-30927]"
    }, {
      "left" : "short min = array[0];",
      "right" : "short min = array[0];",
      "info" : "VariableDeclarationStatement[31027-31048]:VariableDeclarationStatement[30984-31005]"
    }, {
      "left" : "for (int i = 1; i < array.length; i++)",
      "right" : "for (int i = 1; i < array.length; i++)",
      "info" : "ForStatement[31057-31187]:ForStatement[31014-31144]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31096-31187]:Block[31053-31144]"
    }, {
      "left" : "if (array[i] < min)",
      "right" : "if (array[i] < min)",
      "info" : "IfStatement[31110-31177]:IfStatement[31067-31134]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31130-31177]:Block[31087-31134]"
    }, {
      "left" : "min = array[i];",
      "right" : "min = array[i];",
      "info" : "ExpressionStatement[31148-31163]:ExpressionStatement[31105-31120]"
    }, {
      "left" : "return min;",
      "right" : "return min;",
      "info" : "ReturnStatement[31201-31212]:ReturnStatement[31158-31169]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[31558-31564]:Modifier[31515-31521]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[31565-31571]:Modifier[31522-31528]"
    }, {
      "left" : "byte",
      "right" : "byte",
      "info" : "PrimitiveType[31572-31576]:PrimitiveType[31529-31533]"
    }, {
      "left" : "min",
      "right" : "min",
      "info" : "SimpleName[31577-31580]:SimpleName[31534-31537]"
    }, {
      "left" : "byte[] array",
      "right" : "byte[] array",
      "info" : "SingleVariableDeclaration[31581-31593]:SingleVariableDeclaration[31538-31550]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31595-32091]:Block[31552-32048]"
    }, {
      "left" : "if (array == null)",
      "right" : "if (array == null)",
      "info" : "IfStatement[31632-31854]:IfStatement[31589-31811]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31651-31740]:Block[31608-31697]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The Array must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The Array must not be null\");",
      "info" : "ThrowStatement[31665-31730]:ThrowStatement[31622-31687]"
    }, {
      "left" : "if (array.length == 0)",
      "right" : "if (array.length == 0)",
      "info" : "IfStatement[31746-31854]:IfStatement[31703-31811]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31769-31854]:Block[31726-31811]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Array cannot be empty.\");",
      "right" : "throw new IllegalArgumentException(\"Array cannot be empty.\");",
      "info" : "ThrowStatement[31783-31844]:ThrowStatement[31740-31801]"
    }, {
      "left" : "byte min = array[0];",
      "right" : "byte min = array[0];",
      "info" : "VariableDeclarationStatement[31901-31921]:VariableDeclarationStatement[31858-31878]"
    }, {
      "left" : "for (int i = 1; i < array.length; i++)",
      "right" : "for (int i = 1; i < array.length; i++)",
      "info" : "ForStatement[31930-32060]:ForStatement[31887-32017]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31969-32060]:Block[31926-32017]"
    }, {
      "left" : "if (array[i] < min)",
      "right" : "if (array[i] < min)",
      "info" : "IfStatement[31983-32050]:IfStatement[31940-32007]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32003-32050]:Block[31960-32007]"
    }, {
      "left" : "min = array[i];",
      "right" : "min = array[i];",
      "info" : "ExpressionStatement[32021-32036]:ExpressionStatement[31978-31993]"
    }, {
      "left" : "return min;",
      "right" : "return min;",
      "info" : "ReturnStatement[32074-32085]:ReturnStatement[32031-32042]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[32432-32438]:Modifier[32389-32395]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[32439-32445]:Modifier[32396-32402]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[32446-32452]:PrimitiveType[32403-32409]"
    }, {
      "left" : "min",
      "right" : "min",
      "info" : "SimpleName[32453-32456]:SimpleName[32410-32413]"
    }, {
      "left" : "double[] array",
      "right" : "double[] array",
      "info" : "SingleVariableDeclaration[32457-32471]:SingleVariableDeclaration[32414-32428]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32473-32971]:Block[32430-32928]"
    }, {
      "left" : "if (array == null)",
      "right" : "if (array == null)",
      "info" : "IfStatement[32510-32732]:IfStatement[32467-32689]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32529-32618]:Block[32486-32575]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The Array must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The Array must not be null\");",
      "info" : "ThrowStatement[32543-32608]:ThrowStatement[32500-32565]"
    }, {
      "left" : "if (array.length == 0)",
      "right" : "if (array.length == 0)",
      "info" : "IfStatement[32624-32732]:IfStatement[32581-32689]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32647-32732]:Block[32604-32689]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Array cannot be empty.\");",
      "right" : "throw new IllegalArgumentException(\"Array cannot be empty.\");",
      "info" : "ThrowStatement[32661-32722]:ThrowStatement[32618-32679]"
    }, {
      "left" : "double min = array[0];",
      "right" : "double min = array[0];",
      "info" : "VariableDeclarationStatement[32779-32801]:VariableDeclarationStatement[32736-32758]"
    }, {
      "left" : "for (int i = 1; i < array.length; i++)",
      "right" : "for (int i = 1; i < array.length; i++)",
      "info" : "ForStatement[32810-32940]:ForStatement[32767-32897]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32849-32940]:Block[32806-32897]"
    }, {
      "left" : "if (array[i] < min)",
      "right" : "if (array[i] < min)",
      "info" : "IfStatement[32863-32930]:IfStatement[32820-32887]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32883-32930]:Block[32840-32887]"
    }, {
      "left" : "min = array[i];",
      "right" : "min = array[i];",
      "info" : "ExpressionStatement[32901-32916]:ExpressionStatement[32858-32873]"
    }, {
      "left" : "return min;",
      "right" : "return min;",
      "info" : "ReturnStatement[32954-32965]:ReturnStatement[32911-32922]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[33311-33317]:Modifier[33268-33274]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[33318-33324]:Modifier[33275-33281]"
    }, {
      "left" : "float",
      "right" : "float",
      "info" : "PrimitiveType[33325-33330]:PrimitiveType[33282-33287]"
    }, {
      "left" : "min",
      "right" : "min",
      "info" : "SimpleName[33331-33334]:SimpleName[33288-33291]"
    }, {
      "left" : "float[] array",
      "right" : "float[] array",
      "info" : "SingleVariableDeclaration[33335-33348]:SingleVariableDeclaration[33292-33305]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33350-33847]:Block[33307-33804]"
    }, {
      "left" : "if (array == null)",
      "right" : "if (array == null)",
      "info" : "IfStatement[33387-33609]:IfStatement[33344-33566]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33406-33495]:Block[33363-33452]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The Array must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The Array must not be null\");",
      "info" : "ThrowStatement[33420-33485]:ThrowStatement[33377-33442]"
    }, {
      "left" : "if (array.length == 0)",
      "right" : "if (array.length == 0)",
      "info" : "IfStatement[33501-33609]:IfStatement[33458-33566]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33524-33609]:Block[33481-33566]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Array cannot be empty.\");",
      "right" : "throw new IllegalArgumentException(\"Array cannot be empty.\");",
      "info" : "ThrowStatement[33538-33599]:ThrowStatement[33495-33556]"
    }, {
      "left" : "float min = array[0];",
      "right" : "float min = array[0];",
      "info" : "VariableDeclarationStatement[33656-33677]:VariableDeclarationStatement[33613-33634]"
    }, {
      "left" : "for (int i = 1; i < array.length; i++)",
      "right" : "for (int i = 1; i < array.length; i++)",
      "info" : "ForStatement[33686-33816]:ForStatement[33643-33773]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33725-33816]:Block[33682-33773]"
    }, {
      "left" : "if (array[i] < min)",
      "right" : "if (array[i] < min)",
      "info" : "IfStatement[33739-33806]:IfStatement[33696-33763]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33759-33806]:Block[33716-33763]"
    }, {
      "left" : "min = array[i];",
      "right" : "min = array[i];",
      "info" : "ExpressionStatement[33777-33792]:ExpressionStatement[33734-33749]"
    }, {
      "left" : "return min;",
      "right" : "return min;",
      "info" : "ReturnStatement[33830-33841]:ReturnStatement[33787-33798]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[34282-34288]:Modifier[34239-34245]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[34289-34295]:Modifier[34246-34252]"
    }, {
      "left" : "long",
      "right" : "long",
      "info" : "PrimitiveType[34296-34300]:PrimitiveType[34253-34257]"
    }, {
      "left" : "max",
      "right" : "max",
      "info" : "SimpleName[34301-34304]:SimpleName[34258-34261]"
    }, {
      "left" : "long[] array",
      "right" : "long[] array",
      "info" : "SingleVariableDeclaration[34305-34317]:SingleVariableDeclaration[34262-34274]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34319-34807]:Block[34276-34764]"
    }, {
      "left" : "if (array == null)",
      "right" : "if (array == null)",
      "info" : "IfStatement[34356-34578]:IfStatement[34313-34535]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34375-34464]:Block[34332-34421]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The Array must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The Array must not be null\");",
      "info" : "ThrowStatement[34389-34454]:ThrowStatement[34346-34411]"
    }, {
      "left" : "if (array.length == 0)",
      "right" : "if (array.length == 0)",
      "info" : "IfStatement[34470-34578]:IfStatement[34427-34535]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34493-34578]:Block[34450-34535]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Array cannot be empty.\");",
      "right" : "throw new IllegalArgumentException(\"Array cannot be empty.\");",
      "info" : "ThrowStatement[34507-34568]:ThrowStatement[34464-34525]"
    }, {
      "left" : "long max = array[0];",
      "right" : "long max = array[0];",
      "info" : "VariableDeclarationStatement[34621-34641]:VariableDeclarationStatement[34578-34598]"
    }, {
      "left" : "for (int j = 1; j < array.length; j++)",
      "right" : "for (int j = 1; j < array.length; j++)",
      "info" : "ForStatement[34650-34780]:ForStatement[34607-34737]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34689-34780]:Block[34646-34737]"
    }, {
      "left" : "if (array[j] > max)",
      "right" : "if (array[j] > max)",
      "info" : "IfStatement[34703-34770]:IfStatement[34660-34727]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34723-34770]:Block[34680-34727]"
    }, {
      "left" : "max = array[j];",
      "right" : "max = array[j];",
      "info" : "ExpressionStatement[34741-34756]:ExpressionStatement[34698-34713]"
    }, {
      "left" : "return max;",
      "right" : "return max;",
      "info" : "ReturnStatement[34790-34801]:ReturnStatement[34747-34758]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[35147-35153]:Modifier[35104-35110]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[35154-35160]:Modifier[35111-35117]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[35161-35164]:PrimitiveType[35118-35121]"
    }, {
      "left" : "max",
      "right" : "max",
      "info" : "SimpleName[35165-35168]:SimpleName[35122-35125]"
    }, {
      "left" : "int[] array",
      "right" : "int[] array",
      "info" : "SingleVariableDeclaration[35169-35180]:SingleVariableDeclaration[35126-35137]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35182-35677]:Block[35139-35634]"
    }, {
      "left" : "if (array == null)",
      "right" : "if (array == null)",
      "info" : "IfStatement[35219-35441]:IfStatement[35176-35398]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35238-35327]:Block[35195-35284]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The Array must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The Array must not be null\");",
      "info" : "ThrowStatement[35252-35317]:ThrowStatement[35209-35274]"
    }, {
      "left" : "if (array.length == 0)",
      "right" : "if (array.length == 0)",
      "info" : "IfStatement[35333-35441]:IfStatement[35290-35398]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35356-35441]:Block[35313-35398]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Array cannot be empty.\");",
      "right" : "throw new IllegalArgumentException(\"Array cannot be empty.\");",
      "info" : "ThrowStatement[35370-35431]:ThrowStatement[35327-35388]"
    }, {
      "left" : "int max = array[0];",
      "right" : "int max = array[0];",
      "info" : "VariableDeclarationStatement[35488-35507]:VariableDeclarationStatement[35445-35464]"
    }, {
      "left" : "for (int j = 1; j < array.length; j++)",
      "right" : "for (int j = 1; j < array.length; j++)",
      "info" : "ForStatement[35516-35646]:ForStatement[35473-35603]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35555-35646]:Block[35512-35603]"
    }, {
      "left" : "if (array[j] > max)",
      "right" : "if (array[j] > max)",
      "info" : "IfStatement[35569-35636]:IfStatement[35526-35593]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35589-35636]:Block[35546-35593]"
    }, {
      "left" : "max = array[j];",
      "right" : "max = array[j];",
      "info" : "ExpressionStatement[35607-35622]:ExpressionStatement[35564-35579]"
    }, {
      "left" : "return max;",
      "right" : "return max;",
      "info" : "ReturnStatement[35660-35671]:ReturnStatement[35617-35628]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[36017-36023]:Modifier[35974-35980]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[36024-36030]:Modifier[35981-35987]"
    }, {
      "left" : "short",
      "right" : "short",
      "info" : "PrimitiveType[36031-36036]:PrimitiveType[35988-35993]"
    }, {
      "left" : "max",
      "right" : "max",
      "info" : "SimpleName[36037-36040]:SimpleName[35994-35997]"
    }, {
      "left" : "short[] array",
      "right" : "short[] array",
      "info" : "SingleVariableDeclaration[36041-36054]:SingleVariableDeclaration[35998-36011]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36056-36553]:Block[36013-36510]"
    }, {
      "left" : "if (array == null)",
      "right" : "if (array == null)",
      "info" : "IfStatement[36093-36315]:IfStatement[36050-36272]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36112-36201]:Block[36069-36158]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The Array must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The Array must not be null\");",
      "info" : "ThrowStatement[36126-36191]:ThrowStatement[36083-36148]"
    }, {
      "left" : "if (array.length == 0)",
      "right" : "if (array.length == 0)",
      "info" : "IfStatement[36207-36315]:IfStatement[36164-36272]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36230-36315]:Block[36187-36272]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Array cannot be empty.\");",
      "right" : "throw new IllegalArgumentException(\"Array cannot be empty.\");",
      "info" : "ThrowStatement[36244-36305]:ThrowStatement[36201-36262]"
    }, {
      "left" : "short max = array[0];",
      "right" : "short max = array[0];",
      "info" : "VariableDeclarationStatement[36362-36383]:VariableDeclarationStatement[36319-36340]"
    }, {
      "left" : "for (int i = 1; i < array.length; i++)",
      "right" : "for (int i = 1; i < array.length; i++)",
      "info" : "ForStatement[36392-36522]:ForStatement[36349-36479]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36431-36522]:Block[36388-36479]"
    }, {
      "left" : "if (array[i] > max)",
      "right" : "if (array[i] > max)",
      "info" : "IfStatement[36445-36512]:IfStatement[36402-36469]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36465-36512]:Block[36422-36469]"
    }, {
      "left" : "max = array[i];",
      "right" : "max = array[i];",
      "info" : "ExpressionStatement[36483-36498]:ExpressionStatement[36440-36455]"
    }, {
      "left" : "return max;",
      "right" : "return max;",
      "info" : "ReturnStatement[36536-36547]:ReturnStatement[36493-36504]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[36893-36899]:Modifier[36850-36856]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[36900-36906]:Modifier[36857-36863]"
    }, {
      "left" : "byte",
      "right" : "byte",
      "info" : "PrimitiveType[36907-36911]:PrimitiveType[36864-36868]"
    }, {
      "left" : "max",
      "right" : "max",
      "info" : "SimpleName[36912-36915]:SimpleName[36869-36872]"
    }, {
      "left" : "byte[] array",
      "right" : "byte[] array",
      "info" : "SingleVariableDeclaration[36916-36928]:SingleVariableDeclaration[36873-36885]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36930-37426]:Block[36887-37383]"
    }, {
      "left" : "if (array == null)",
      "right" : "if (array == null)",
      "info" : "IfStatement[36967-37189]:IfStatement[36924-37146]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36986-37075]:Block[36943-37032]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The Array must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The Array must not be null\");",
      "info" : "ThrowStatement[37000-37065]:ThrowStatement[36957-37022]"
    }, {
      "left" : "if (array.length == 0)",
      "right" : "if (array.length == 0)",
      "info" : "IfStatement[37081-37189]:IfStatement[37038-37146]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37104-37189]:Block[37061-37146]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Array cannot be empty.\");",
      "right" : "throw new IllegalArgumentException(\"Array cannot be empty.\");",
      "info" : "ThrowStatement[37118-37179]:ThrowStatement[37075-37136]"
    }, {
      "left" : "byte max = array[0];",
      "right" : "byte max = array[0];",
      "info" : "VariableDeclarationStatement[37236-37256]:VariableDeclarationStatement[37193-37213]"
    }, {
      "left" : "for (int i = 1; i < array.length; i++)",
      "right" : "for (int i = 1; i < array.length; i++)",
      "info" : "ForStatement[37265-37395]:ForStatement[37222-37352]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37304-37395]:Block[37261-37352]"
    }, {
      "left" : "if (array[i] > max)",
      "right" : "if (array[i] > max)",
      "info" : "IfStatement[37318-37385]:IfStatement[37275-37342]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37338-37385]:Block[37295-37342]"
    }, {
      "left" : "max = array[i];",
      "right" : "max = array[i];",
      "info" : "ExpressionStatement[37356-37371]:ExpressionStatement[37313-37328]"
    }, {
      "left" : "return max;",
      "right" : "return max;",
      "info" : "ReturnStatement[37409-37420]:ReturnStatement[37366-37377]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[37766-37772]:Modifier[37723-37729]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[37773-37779]:Modifier[37730-37736]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[37780-37786]:PrimitiveType[37737-37743]"
    }, {
      "left" : "max",
      "right" : "max",
      "info" : "SimpleName[37787-37790]:SimpleName[37744-37747]"
    }, {
      "left" : "double[] array",
      "right" : "double[] array",
      "info" : "SingleVariableDeclaration[37791-37805]:SingleVariableDeclaration[37748-37762]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37807-38304]:Block[37764-38261]"
    }, {
      "left" : "if (array== null)",
      "right" : "if (array== null)",
      "info" : "IfStatement[37844-38065]:IfStatement[37801-38022]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37862-37951]:Block[37819-37908]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The Array must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The Array must not be null\");",
      "info" : "ThrowStatement[37876-37941]:ThrowStatement[37833-37898]"
    }, {
      "left" : "if (array.length == 0)",
      "right" : "if (array.length == 0)",
      "info" : "IfStatement[37957-38065]:IfStatement[37914-38022]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37980-38065]:Block[37937-38022]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Array cannot be empty.\");",
      "right" : "throw new IllegalArgumentException(\"Array cannot be empty.\");",
      "info" : "ThrowStatement[37994-38055]:ThrowStatement[37951-38012]"
    }, {
      "left" : "double max = array[0];",
      "right" : "double max = array[0];",
      "info" : "VariableDeclarationStatement[38112-38134]:VariableDeclarationStatement[38069-38091]"
    }, {
      "left" : "for (int j = 1; j < array.length; j++)",
      "right" : "for (int j = 1; j < array.length; j++)",
      "info" : "ForStatement[38143-38273]:ForStatement[38100-38230]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38182-38273]:Block[38139-38230]"
    }, {
      "left" : "if (array[j] > max)",
      "right" : "if (array[j] > max)",
      "info" : "IfStatement[38196-38263]:IfStatement[38153-38220]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38216-38263]:Block[38173-38220]"
    }, {
      "left" : "max = array[j];",
      "right" : "max = array[j];",
      "info" : "ExpressionStatement[38234-38249]:ExpressionStatement[38191-38206]"
    }, {
      "left" : "return max;",
      "right" : "return max;",
      "info" : "ReturnStatement[38287-38298]:ReturnStatement[38244-38255]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[38644-38650]:Modifier[38601-38607]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[38651-38657]:Modifier[38608-38614]"
    }, {
      "left" : "float",
      "right" : "float",
      "info" : "PrimitiveType[38658-38663]:PrimitiveType[38615-38620]"
    }, {
      "left" : "max",
      "right" : "max",
      "info" : "SimpleName[38664-38667]:SimpleName[38621-38624]"
    }, {
      "left" : "float[] array",
      "right" : "float[] array",
      "info" : "SingleVariableDeclaration[38668-38681]:SingleVariableDeclaration[38625-38638]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38683-39172]:Block[38640-39129]"
    }, {
      "left" : "if (array == null)",
      "right" : "if (array == null)",
      "info" : "IfStatement[38720-38942]:IfStatement[38677-38899]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38739-38828]:Block[38696-38785]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The Array must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The Array must not be null\");",
      "info" : "ThrowStatement[38753-38818]:ThrowStatement[38710-38775]"
    }, {
      "left" : "if (array.length == 0)",
      "right" : "if (array.length == 0)",
      "info" : "IfStatement[38834-38942]:IfStatement[38791-38899]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38857-38942]:Block[38814-38899]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Array cannot be empty.\");",
      "right" : "throw new IllegalArgumentException(\"Array cannot be empty.\");",
      "info" : "ThrowStatement[38871-38932]:ThrowStatement[38828-38889]"
    }, {
      "left" : "float max = array[0];",
      "right" : "float max = array[0];",
      "info" : "VariableDeclarationStatement[38985-39006]:VariableDeclarationStatement[38942-38963]"
    }, {
      "left" : "for (int j = 1; j < array.length; j++)",
      "right" : "for (int j = 1; j < array.length; j++)",
      "info" : "ForStatement[39015-39145]:ForStatement[38972-39102]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39054-39145]:Block[39011-39102]"
    }, {
      "left" : "if (array[j] > max)",
      "right" : "if (array[j] > max)",
      "info" : "IfStatement[39068-39135]:IfStatement[39025-39092]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39088-39135]:Block[39045-39092]"
    }, {
      "left" : "max = array[j];",
      "right" : "max = array[j];",
      "info" : "ExpressionStatement[39106-39121]:ExpressionStatement[39063-39078]"
    }, {
      "left" : "return max;",
      "right" : "return max;",
      "info" : "ReturnStatement[39155-39166]:ReturnStatement[39112-39123]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[39488-39494]:Modifier[39445-39451]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[39495-39501]:Modifier[39452-39458]"
    }, {
      "left" : "long",
      "right" : "long",
      "info" : "PrimitiveType[39502-39506]:PrimitiveType[39459-39463]"
    }, {
      "left" : "min",
      "right" : "min",
      "info" : "SimpleName[39507-39510]:SimpleName[39464-39467]"
    }, {
      "left" : "long a",
      "right" : "long a",
      "info" : "SingleVariableDeclaration[39511-39517]:SingleVariableDeclaration[39468-39474]"
    }, {
      "left" : "long b",
      "right" : "long b",
      "info" : "SingleVariableDeclaration[39519-39525]:SingleVariableDeclaration[39476-39482]"
    }, {
      "left" : "long c",
      "right" : "long c",
      "info" : "SingleVariableDeclaration[39527-39533]:SingleVariableDeclaration[39484-39490]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39535-39660]:Block[39492-39617]"
    }, {
      "left" : "if (b < a)",
      "right" : "if (b < a)",
      "info" : "IfStatement[39545-39586]:IfStatement[39502-39543]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39556-39586]:Block[39513-39543]"
    }, {
      "left" : "a = b;",
      "right" : "a = b;",
      "info" : "ExpressionStatement[39570-39576]:ExpressionStatement[39527-39533]"
    }, {
      "left" : "if (c < a)",
      "right" : "if (c < a)",
      "info" : "IfStatement[39595-39636]:IfStatement[39552-39593]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39606-39636]:Block[39563-39593]"
    }, {
      "left" : "a = c;",
      "right" : "a = c;",
      "info" : "ExpressionStatement[39620-39626]:ExpressionStatement[39577-39583]"
    }, {
      "left" : "return a;",
      "right" : "return a;",
      "info" : "ReturnStatement[39645-39654]:ReturnStatement[39602-39611]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[39873-39879]:Modifier[39830-39836]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[39880-39886]:Modifier[39837-39843]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[39887-39890]:PrimitiveType[39844-39847]"
    }, {
      "left" : "min",
      "right" : "min",
      "info" : "SimpleName[39891-39894]:SimpleName[39848-39851]"
    }, {
      "left" : "int a",
      "right" : "int a",
      "info" : "SingleVariableDeclaration[39895-39900]:SingleVariableDeclaration[39852-39857]"
    }, {
      "left" : "int b",
      "right" : "int b",
      "info" : "SingleVariableDeclaration[39902-39907]:SingleVariableDeclaration[39859-39864]"
    }, {
      "left" : "int c",
      "right" : "int c",
      "info" : "SingleVariableDeclaration[39909-39914]:SingleVariableDeclaration[39866-39871]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39916-40041]:Block[39873-39998]"
    }, {
      "left" : "if (b < a)",
      "right" : "if (b < a)",
      "info" : "IfStatement[39926-39967]:IfStatement[39883-39924]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39937-39967]:Block[39894-39924]"
    }, {
      "left" : "a = b;",
      "right" : "a = b;",
      "info" : "ExpressionStatement[39951-39957]:ExpressionStatement[39908-39914]"
    }, {
      "left" : "if (c < a)",
      "right" : "if (c < a)",
      "info" : "IfStatement[39976-40017]:IfStatement[39933-39974]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39987-40017]:Block[39944-39974]"
    }, {
      "left" : "a = c;",
      "right" : "a = c;",
      "info" : "ExpressionStatement[40001-40007]:ExpressionStatement[39958-39964]"
    }, {
      "left" : "return a;",
      "right" : "return a;",
      "info" : "ReturnStatement[40026-40035]:ReturnStatement[39983-39992]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[40256-40262]:Modifier[40213-40219]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[40263-40269]:Modifier[40220-40226]"
    }, {
      "left" : "short",
      "right" : "short",
      "info" : "PrimitiveType[40270-40275]:PrimitiveType[40227-40232]"
    }, {
      "left" : "min",
      "right" : "min",
      "info" : "SimpleName[40276-40279]:SimpleName[40233-40236]"
    }, {
      "left" : "short a",
      "right" : "short a",
      "info" : "SingleVariableDeclaration[40280-40287]:SingleVariableDeclaration[40237-40244]"
    }, {
      "left" : "short b",
      "right" : "short b",
      "info" : "SingleVariableDeclaration[40289-40296]:SingleVariableDeclaration[40246-40253]"
    }, {
      "left" : "short c",
      "right" : "short c",
      "info" : "SingleVariableDeclaration[40298-40305]:SingleVariableDeclaration[40255-40262]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40307-40432]:Block[40264-40389]"
    }, {
      "left" : "if (b < a)",
      "right" : "if (b < a)",
      "info" : "IfStatement[40317-40358]:IfStatement[40274-40315]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40328-40358]:Block[40285-40315]"
    }, {
      "left" : "a = b;",
      "right" : "a = b;",
      "info" : "ExpressionStatement[40342-40348]:ExpressionStatement[40299-40305]"
    }, {
      "left" : "if (c < a)",
      "right" : "if (c < a)",
      "info" : "IfStatement[40367-40408]:IfStatement[40324-40365]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40378-40408]:Block[40335-40365]"
    }, {
      "left" : "a = c;",
      "right" : "a = c;",
      "info" : "ExpressionStatement[40392-40398]:ExpressionStatement[40349-40355]"
    }, {
      "left" : "return a;",
      "right" : "return a;",
      "info" : "ReturnStatement[40417-40426]:ReturnStatement[40374-40383]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[40646-40652]:Modifier[40603-40609]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[40653-40659]:Modifier[40610-40616]"
    }, {
      "left" : "byte",
      "right" : "byte",
      "info" : "PrimitiveType[40660-40664]:PrimitiveType[40617-40621]"
    }, {
      "left" : "min",
      "right" : "min",
      "info" : "SimpleName[40665-40668]:SimpleName[40622-40625]"
    }, {
      "left" : "byte a",
      "right" : "byte a",
      "info" : "SingleVariableDeclaration[40669-40675]:SingleVariableDeclaration[40626-40632]"
    }, {
      "left" : "byte b",
      "right" : "byte b",
      "info" : "SingleVariableDeclaration[40677-40683]:SingleVariableDeclaration[40634-40640]"
    }, {
      "left" : "byte c",
      "right" : "byte c",
      "info" : "SingleVariableDeclaration[40685-40691]:SingleVariableDeclaration[40642-40648]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40693-40818]:Block[40650-40775]"
    }, {
      "left" : "if (b < a)",
      "right" : "if (b < a)",
      "info" : "IfStatement[40703-40744]:IfStatement[40660-40701]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40714-40744]:Block[40671-40701]"
    }, {
      "left" : "a = b;",
      "right" : "a = b;",
      "info" : "ExpressionStatement[40728-40734]:ExpressionStatement[40685-40691]"
    }, {
      "left" : "if (c < a)",
      "right" : "if (c < a)",
      "info" : "IfStatement[40753-40794]:IfStatement[40710-40751]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40764-40794]:Block[40721-40751]"
    }, {
      "left" : "a = c;",
      "right" : "a = c;",
      "info" : "ExpressionStatement[40778-40784]:ExpressionStatement[40735-40741]"
    }, {
      "left" : "return a;",
      "right" : "return a;",
      "info" : "ReturnStatement[40803-40812]:ReturnStatement[40760-40769]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[41148-41154]:Modifier[41105-41111]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[41155-41161]:Modifier[41112-41118]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[41162-41168]:PrimitiveType[41119-41125]"
    }, {
      "left" : "min",
      "right" : "min",
      "info" : "SimpleName[41169-41172]:SimpleName[41126-41129]"
    }, {
      "left" : "double a",
      "right" : "double a",
      "info" : "SingleVariableDeclaration[41173-41181]:SingleVariableDeclaration[41130-41138]"
    }, {
      "left" : "double b",
      "right" : "double b",
      "info" : "SingleVariableDeclaration[41183-41191]:SingleVariableDeclaration[41140-41148]"
    }, {
      "left" : "double c",
      "right" : "double c",
      "info" : "SingleVariableDeclaration[41193-41201]:SingleVariableDeclaration[41150-41158]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41203-41254]:Block[41160-41211]"
    }, {
      "left" : "return Math.min(Math.min(a, b), c);",
      "right" : "return Math.min(Math.min(a, b), c);",
      "info" : "ReturnStatement[41213-41248]:ReturnStatement[41170-41205]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[41582-41588]:Modifier[41539-41545]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[41589-41595]:Modifier[41546-41552]"
    }, {
      "left" : "float",
      "right" : "float",
      "info" : "PrimitiveType[41596-41601]:PrimitiveType[41553-41558]"
    }, {
      "left" : "min",
      "right" : "min",
      "info" : "SimpleName[41602-41605]:SimpleName[41559-41562]"
    }, {
      "left" : "float a",
      "right" : "float a",
      "info" : "SingleVariableDeclaration[41606-41613]:SingleVariableDeclaration[41563-41570]"
    }, {
      "left" : "float b",
      "right" : "float b",
      "info" : "SingleVariableDeclaration[41615-41622]:SingleVariableDeclaration[41572-41579]"
    }, {
      "left" : "float c",
      "right" : "float c",
      "info" : "SingleVariableDeclaration[41624-41631]:SingleVariableDeclaration[41581-41588]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41633-41684]:Block[41590-41641]"
    }, {
      "left" : "return Math.min(Math.min(a, b), c);",
      "right" : "return Math.min(Math.min(a, b), c);",
      "info" : "ReturnStatement[41643-41678]:ReturnStatement[41600-41635]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[41994-42000]:Modifier[41951-41957]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[42001-42007]:Modifier[41958-41964]"
    }, {
      "left" : "long",
      "right" : "long",
      "info" : "PrimitiveType[42008-42012]:PrimitiveType[41965-41969]"
    }, {
      "left" : "max",
      "right" : "max",
      "info" : "SimpleName[42013-42016]:SimpleName[41970-41973]"
    }, {
      "left" : "long a",
      "right" : "long a",
      "info" : "SingleVariableDeclaration[42017-42023]:SingleVariableDeclaration[41974-41980]"
    }, {
      "left" : "long b",
      "right" : "long b",
      "info" : "SingleVariableDeclaration[42025-42031]:SingleVariableDeclaration[41982-41988]"
    }, {
      "left" : "long c",
      "right" : "long c",
      "info" : "SingleVariableDeclaration[42033-42039]:SingleVariableDeclaration[41990-41996]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42041-42166]:Block[41998-42123]"
    }, {
      "left" : "if (b > a)",
      "right" : "if (b > a)",
      "info" : "IfStatement[42051-42092]:IfStatement[42008-42049]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42062-42092]:Block[42019-42049]"
    }, {
      "left" : "a = b;",
      "right" : "a = b;",
      "info" : "ExpressionStatement[42076-42082]:ExpressionStatement[42033-42039]"
    }, {
      "left" : "if (c > a)",
      "right" : "if (c > a)",
      "info" : "IfStatement[42101-42142]:IfStatement[42058-42099]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42112-42142]:Block[42069-42099]"
    }, {
      "left" : "a = c;",
      "right" : "a = c;",
      "info" : "ExpressionStatement[42126-42132]:ExpressionStatement[42083-42089]"
    }, {
      "left" : "return a;",
      "right" : "return a;",
      "info" : "ReturnStatement[42151-42160]:ReturnStatement[42108-42117]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[42378-42384]:Modifier[42335-42341]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[42385-42391]:Modifier[42342-42348]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[42392-42395]:PrimitiveType[42349-42352]"
    }, {
      "left" : "max",
      "right" : "max",
      "info" : "SimpleName[42396-42399]:SimpleName[42353-42356]"
    }, {
      "left" : "int a",
      "right" : "int a",
      "info" : "SingleVariableDeclaration[42400-42405]:SingleVariableDeclaration[42357-42362]"
    }, {
      "left" : "int b",
      "right" : "int b",
      "info" : "SingleVariableDeclaration[42407-42412]:SingleVariableDeclaration[42364-42369]"
    }, {
      "left" : "int c",
      "right" : "int c",
      "info" : "SingleVariableDeclaration[42414-42419]:SingleVariableDeclaration[42371-42376]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42421-42546]:Block[42378-42503]"
    }, {
      "left" : "if (b > a)",
      "right" : "if (b > a)",
      "info" : "IfStatement[42431-42472]:IfStatement[42388-42429]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42442-42472]:Block[42399-42429]"
    }, {
      "left" : "a = b;",
      "right" : "a = b;",
      "info" : "ExpressionStatement[42456-42462]:ExpressionStatement[42413-42419]"
    }, {
      "left" : "if (c > a)",
      "right" : "if (c > a)",
      "info" : "IfStatement[42481-42522]:IfStatement[42438-42479]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42492-42522]:Block[42449-42479]"
    }, {
      "left" : "a = c;",
      "right" : "a = c;",
      "info" : "ExpressionStatement[42506-42512]:ExpressionStatement[42463-42469]"
    }, {
      "left" : "return a;",
      "right" : "return a;",
      "info" : "ReturnStatement[42531-42540]:ReturnStatement[42488-42497]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[42760-42766]:Modifier[42717-42723]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[42767-42773]:Modifier[42724-42730]"
    }, {
      "left" : "short",
      "right" : "short",
      "info" : "PrimitiveType[42774-42779]:PrimitiveType[42731-42736]"
    }, {
      "left" : "max",
      "right" : "max",
      "info" : "SimpleName[42780-42783]:SimpleName[42737-42740]"
    }, {
      "left" : "short a",
      "right" : "short a",
      "info" : "SingleVariableDeclaration[42784-42791]:SingleVariableDeclaration[42741-42748]"
    }, {
      "left" : "short b",
      "right" : "short b",
      "info" : "SingleVariableDeclaration[42793-42800]:SingleVariableDeclaration[42750-42757]"
    }, {
      "left" : "short c",
      "right" : "short c",
      "info" : "SingleVariableDeclaration[42802-42809]:SingleVariableDeclaration[42759-42766]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42811-42936]:Block[42768-42893]"
    }, {
      "left" : "if (b > a)",
      "right" : "if (b > a)",
      "info" : "IfStatement[42821-42862]:IfStatement[42778-42819]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42832-42862]:Block[42789-42819]"
    }, {
      "left" : "a = b;",
      "right" : "a = b;",
      "info" : "ExpressionStatement[42846-42852]:ExpressionStatement[42803-42809]"
    }, {
      "left" : "if (c > a)",
      "right" : "if (c > a)",
      "info" : "IfStatement[42871-42912]:IfStatement[42828-42869]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42882-42912]:Block[42839-42869]"
    }, {
      "left" : "a = c;",
      "right" : "a = c;",
      "info" : "ExpressionStatement[42896-42902]:ExpressionStatement[42853-42859]"
    }, {
      "left" : "return a;",
      "right" : "return a;",
      "info" : "ReturnStatement[42921-42930]:ReturnStatement[42878-42887]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[43149-43155]:Modifier[43106-43112]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[43156-43162]:Modifier[43113-43119]"
    }, {
      "left" : "byte",
      "right" : "byte",
      "info" : "PrimitiveType[43163-43167]:PrimitiveType[43120-43124]"
    }, {
      "left" : "max",
      "right" : "max",
      "info" : "SimpleName[43168-43171]:SimpleName[43125-43128]"
    }, {
      "left" : "byte a",
      "right" : "byte a",
      "info" : "SingleVariableDeclaration[43172-43178]:SingleVariableDeclaration[43129-43135]"
    }, {
      "left" : "byte b",
      "right" : "byte b",
      "info" : "SingleVariableDeclaration[43180-43186]:SingleVariableDeclaration[43137-43143]"
    }, {
      "left" : "byte c",
      "right" : "byte c",
      "info" : "SingleVariableDeclaration[43188-43194]:SingleVariableDeclaration[43145-43151]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43196-43321]:Block[43153-43278]"
    }, {
      "left" : "if (b > a)",
      "right" : "if (b > a)",
      "info" : "IfStatement[43206-43247]:IfStatement[43163-43204]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43217-43247]:Block[43174-43204]"
    }, {
      "left" : "a = b;",
      "right" : "a = b;",
      "info" : "ExpressionStatement[43231-43237]:ExpressionStatement[43188-43194]"
    }, {
      "left" : "if (c > a)",
      "right" : "if (c > a)",
      "info" : "IfStatement[43256-43297]:IfStatement[43213-43254]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43267-43297]:Block[43224-43254]"
    }, {
      "left" : "a = c;",
      "right" : "a = c;",
      "info" : "ExpressionStatement[43281-43287]:ExpressionStatement[43238-43244]"
    }, {
      "left" : "return a;",
      "right" : "return a;",
      "info" : "ReturnStatement[43306-43315]:ReturnStatement[43263-43272]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[43649-43655]:Modifier[43606-43612]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[43656-43662]:Modifier[43613-43619]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[43663-43669]:PrimitiveType[43620-43626]"
    }, {
      "left" : "max",
      "right" : "max",
      "info" : "SimpleName[43670-43673]:SimpleName[43627-43630]"
    }, {
      "left" : "double a",
      "right" : "double a",
      "info" : "SingleVariableDeclaration[43674-43682]:SingleVariableDeclaration[43631-43639]"
    }, {
      "left" : "double b",
      "right" : "double b",
      "info" : "SingleVariableDeclaration[43684-43692]:SingleVariableDeclaration[43641-43649]"
    }, {
      "left" : "double c",
      "right" : "double c",
      "info" : "SingleVariableDeclaration[43694-43702]:SingleVariableDeclaration[43651-43659]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43704-43755]:Block[43661-43712]"
    }, {
      "left" : "return Math.max(Math.max(a, b), c);",
      "right" : "return Math.max(Math.max(a, b), c);",
      "info" : "ReturnStatement[43714-43749]:ReturnStatement[43671-43706]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[44082-44088]:Modifier[44039-44045]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[44089-44095]:Modifier[44046-44052]"
    }, {
      "left" : "float",
      "right" : "float",
      "info" : "PrimitiveType[44096-44101]:PrimitiveType[44053-44058]"
    }, {
      "left" : "max",
      "right" : "max",
      "info" : "SimpleName[44102-44105]:SimpleName[44059-44062]"
    }, {
      "left" : "float a",
      "right" : "float a",
      "info" : "SingleVariableDeclaration[44106-44113]:SingleVariableDeclaration[44063-44070]"
    }, {
      "left" : "float b",
      "right" : "float b",
      "info" : "SingleVariableDeclaration[44115-44122]:SingleVariableDeclaration[44072-44079]"
    }, {
      "left" : "float c",
      "right" : "float c",
      "info" : "SingleVariableDeclaration[44124-44131]:SingleVariableDeclaration[44081-44088]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44133-44184]:Block[44090-44141]"
    }, {
      "left" : "return Math.max(Math.max(a, b), c);",
      "right" : "return Math.max(Math.max(a, b), c);",
      "info" : "ReturnStatement[44143-44178]:ReturnStatement[44100-44135]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[45452-45458]:Modifier[45409-45415]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[45459-45465]:Modifier[45416-45422]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[45466-45469]:PrimitiveType[45423-45426]"
    }, {
      "left" : "compare",
      "right" : "compare",
      "info" : "SimpleName[45470-45477]:SimpleName[45427-45434]"
    }, {
      "left" : "double lhs",
      "right" : "double lhs",
      "info" : "SingleVariableDeclaration[45478-45488]:SingleVariableDeclaration[45435-45445]"
    }, {
      "left" : "double rhs",
      "right" : "double rhs",
      "info" : "SingleVariableDeclaration[45490-45500]:SingleVariableDeclaration[45447-45457]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45502-46377]:Block[45459-46334]"
    }, {
      "left" : "if (lhs < rhs)",
      "right" : "if (lhs < rhs)",
      "info" : "IfStatement[45512-45561]:IfStatement[45469-45518]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45527-45561]:Block[45484-45518]"
    }, {
      "left" : "return -1;",
      "right" : "return -1;",
      "info" : "ReturnStatement[45541-45551]:ReturnStatement[45498-45508]"
    }, {
      "left" : "if (lhs > rhs)",
      "right" : "if (lhs > rhs)",
      "info" : "IfStatement[45570-45619]:IfStatement[45527-45576]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45585-45619]:Block[45542-45576]"
    }, {
      "left" : "return +1;",
      "right" : "return +1;",
      "info" : "ReturnStatement[45599-45609]:ReturnStatement[45556-45566]"
    }, {
      "left" : "long lhsBits = Double.doubleToLongBits(lhs);",
      "right" : "long lhsBits = Double.doubleToLongBits(lhs);",
      "info" : "VariableDeclarationStatement[45825-45869]:VariableDeclarationStatement[45782-45826]"
    }, {
      "left" : "long rhsBits = Double.doubleToLongBits(rhs);",
      "right" : "long rhsBits = Double.doubleToLongBits(rhs);",
      "info" : "VariableDeclarationStatement[45878-45922]:VariableDeclarationStatement[45835-45879]"
    }, {
      "left" : "if (lhsBits == rhsBits)",
      "right" : "if (lhsBits == rhsBits)",
      "info" : "IfStatement[45931-45988]:IfStatement[45888-45945]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45955-45988]:Block[45912-45945]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[45969-45978]:ReturnStatement[45926-45935]"
    }, {
      "left" : "if (lhsBits < rhsBits)",
      "right" : "if (lhsBits < rhsBits)",
      "info" : "IfStatement[46274-46371]:IfStatement[46231-46328]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46297-46331]:Block[46254-46288]"
    }, {
      "left" : "return -1;",
      "right" : "return -1;",
      "info" : "ReturnStatement[46311-46321]:ReturnStatement[46268-46278]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46337-46371]:Block[46294-46328]"
    }, {
      "left" : "return +1;",
      "right" : "return +1;",
      "info" : "ReturnStatement[46351-46361]:ReturnStatement[46308-46318]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[47509-47515]:Modifier[47466-47472]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[47516-47522]:Modifier[47473-47479]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[47523-47526]:PrimitiveType[47480-47483]"
    }, {
      "left" : "compare",
      "right" : "compare",
      "info" : "SimpleName[47527-47534]:SimpleName[47484-47491]"
    }, {
      "left" : "float lhs",
      "right" : "float lhs",
      "info" : "SingleVariableDeclaration[47535-47544]:SingleVariableDeclaration[47492-47501]"
    }, {
      "left" : "float rhs",
      "right" : "float rhs",
      "info" : "SingleVariableDeclaration[47546-47555]:SingleVariableDeclaration[47503-47512]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47557-48389]:Block[47514-48346]"
    }, {
      "left" : "if (lhs < rhs)",
      "right" : "if (lhs < rhs)",
      "info" : "IfStatement[47567-47616]:IfStatement[47524-47573]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47582-47616]:Block[47539-47573]"
    }, {
      "left" : "return -1;",
      "right" : "return -1;",
      "info" : "ReturnStatement[47596-47606]:ReturnStatement[47553-47563]"
    }, {
      "left" : "if (lhs > rhs)",
      "right" : "if (lhs > rhs)",
      "info" : "IfStatement[47625-47674]:IfStatement[47582-47631]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47640-47674]:Block[47597-47631]"
    }, {
      "left" : "return +1;",
      "right" : "return +1;",
      "info" : "ReturnStatement[47654-47664]:ReturnStatement[47611-47621]"
    }, {
      "left" : "int lhsBits = Float.floatToIntBits(lhs);",
      "right" : "int lhsBits = Float.floatToIntBits(lhs);",
      "info" : "VariableDeclarationStatement[47879-47919]:VariableDeclarationStatement[47836-47876]"
    }, {
      "left" : "int rhsBits = Float.floatToIntBits(rhs);",
      "right" : "int rhsBits = Float.floatToIntBits(rhs);",
      "info" : "VariableDeclarationStatement[47928-47968]:VariableDeclarationStatement[47885-47925]"
    }, {
      "left" : "if (lhsBits == rhsBits)",
      "right" : "if (lhsBits == rhsBits)",
      "info" : "IfStatement[47977-48034]:IfStatement[47934-47991]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48001-48034]:Block[47958-47991]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[48015-48024]:ReturnStatement[47972-47981]"
    }, {
      "left" : "if (lhsBits < rhsBits)",
      "right" : "if (lhsBits < rhsBits)",
      "info" : "IfStatement[48286-48383]:IfStatement[48243-48340]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48309-48343]:Block[48266-48300]"
    }, {
      "left" : "return -1;",
      "right" : "return -1;",
      "info" : "ReturnStatement[48323-48333]:ReturnStatement[48280-48290]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48349-48383]:Block[48306-48340]"
    }, {
      "left" : "return +1;",
      "right" : "return +1;",
      "info" : "ReturnStatement[48363-48373]:ReturnStatement[48320-48330]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[48809-48815]:Modifier[48766-48772]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[48816-48822]:Modifier[48773-48779]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[48823-48830]:PrimitiveType[48780-48787]"
    }, {
      "left" : "isDigits",
      "right" : "isDigits",
      "info" : "SimpleName[48831-48839]:SimpleName[48788-48796]"
    }, {
      "left" : "String str",
      "right" : "String str",
      "info" : "SingleVariableDeclaration[48840-48850]:SingleVariableDeclaration[48797-48807]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48852-49112]:Block[48809-49069]"
    }, {
      "left" : "if (StringUtils.isEmpty(str))",
      "right" : "if (StringUtils.isEmpty(str))",
      "info" : "IfStatement[48862-48929]:IfStatement[48819-48886]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48892-48929]:Block[48849-48886]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[48906-48919]:ReturnStatement[48863-48876]"
    }, {
      "left" : "for (int i = 0; i < str.length(); i++)",
      "right" : "for (int i = 0; i < str.length(); i++)",
      "info" : "ForStatement[48938-49085]:ForStatement[48895-49042]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48977-49085]:Block[48934-49042]"
    }, {
      "left" : "if (!Character.isDigit(str.charAt(i)))",
      "right" : "if (!Character.isDigit(str.charAt(i)))",
      "info" : "IfStatement[48991-49075]:IfStatement[48948-49032]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49030-49075]:Block[48987-49032]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[49048-49061]:ReturnStatement[49005-49018]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[49094-49106]:ReturnStatement[49051-49063]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[49614-49620]:Modifier[49571-49577]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[49621-49627]:Modifier[49578-49584]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[49628-49635]:PrimitiveType[49585-49592]"
    }, {
      "left" : "isNumber",
      "right" : "isNumber",
      "info" : "SimpleName[49636-49644]:SimpleName[49593-49601]"
    }, {
      "left" : "String str",
      "right" : "String str",
      "info" : "SingleVariableDeclaration[49645-49655]:SingleVariableDeclaration[49602-49612]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49657-53134]:Block[49614-53091]"
    }, {
      "left" : "if (StringUtils.isEmpty(str))",
      "right" : "if (StringUtils.isEmpty(str))",
      "info" : "IfStatement[49667-49734]:IfStatement[49624-49691]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49697-49734]:Block[49654-49691]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[49711-49724]:ReturnStatement[49668-49681]"
    }, {
      "left" : "char[] chars = str.toCharArray();",
      "right" : "char[] chars = str.toCharArray();",
      "info" : "VariableDeclarationStatement[49743-49776]:VariableDeclarationStatement[49700-49733]"
    }, {
      "left" : "int sz = chars.length;",
      "right" : "int sz = chars.length;",
      "info" : "VariableDeclarationStatement[49785-49807]:VariableDeclarationStatement[49742-49764]"
    }, {
      "left" : "boolean hasExp = false;",
      "right" : "boolean hasExp = false;",
      "info" : "VariableDeclarationStatement[49816-49839]:VariableDeclarationStatement[49773-49796]"
    }, {
      "left" : "boolean hasDecPoint = false;",
      "right" : "boolean hasDecPoint = false;",
      "info" : "VariableDeclarationStatement[49848-49876]:VariableDeclarationStatement[49805-49833]"
    }, {
      "left" : "boolean allowSigns = false;",
      "right" : "boolean allowSigns = false;",
      "info" : "VariableDeclarationStatement[49885-49912]:VariableDeclarationStatement[49842-49869]"
    }, {
      "left" : "boolean foundDigit = false;",
      "right" : "boolean foundDigit = false;",
      "info" : "VariableDeclarationStatement[49921-49948]:VariableDeclarationStatement[49878-49905]"
    }, {
      "left" : "int start = (chars[0] == '-') ? 1 : 0;",
      "right" : "int start = (chars[0] == '-') ? 1 : 0;",
      "info" : "VariableDeclarationStatement[50005-50043]:VariableDeclarationStatement[49962-50000]"
    }, {
      "left" : "if (sz > start + 1)",
      "right" : "if (sz > start + 1)",
      "info" : "IfStatement[50052-50697]:IfStatement[50009-50654]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50072-50697]:Block[50029-50654]"
    }, {
      "left" : "if (chars[start] == '0' && chars[start + 1] == 'x')",
      "right" : "if (chars[start] == '0' && chars[start + 1] == 'x')",
      "info" : "IfStatement[50086-50687]:IfStatement[50043-50644]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50138-50687]:Block[50095-50644]"
    }, {
      "left" : "int i = start + 2;",
      "right" : "int i = start + 2;",
      "info" : "VariableDeclarationStatement[50156-50174]:VariableDeclarationStatement[50113-50131]"
    }, {
      "left" : "if (i == sz)",
      "right" : "if (i == sz)",
      "info" : "IfStatement[50191-50272]:IfStatement[50148-50229]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50204-50272]:Block[50161-50229]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[50226-50239]:ReturnStatement[50183-50196]"
    }, {
      "left" : "for (; i < chars.length; i++)",
      "right" : "for (; i < chars.length; i++)",
      "info" : "ForStatement[50349-50644]:ForStatement[50306-50601]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50379-50644]:Block[50336-50601]"
    }, {
      "left" : "if ((chars[i] < '0' || chars[i] > '9')\n                        && (chars[i] < 'a' || chars[i] > 'f')\n                        && (chars[i] < 'A' || chars[i] > 'F'))",
      "right" : "if ((chars[i] < '0' || chars[i] > '9')\n                        && (chars[i] < 'a' || chars[i] > 'f')\n                        && (chars[i] < 'A' || chars[i] > 'F'))",
      "info" : "IfStatement[50401-50626]:IfStatement[50358-50583]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50565-50626]:Block[50522-50583]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[50591-50604]:ReturnStatement[50548-50561]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[50661-50673]:ReturnStatement[50618-50630]"
    }, {
      "left" : "sz--;",
      "right" : "sz--;",
      "info" : "ExpressionStatement[50706-50711]:ExpressionStatement[50663-50668]"
    }, {
      "left" : "int i = start;",
      "right" : "int i = start;",
      "info" : "VariableDeclarationStatement[50817-50831]:VariableDeclarationStatement[50774-50788]"
    }, {
      "left" : "while (i < sz || (i < sz + 1 && allowSigns && !foundDigit))",
      "right" : "while (i < sz || (i < sz + 1 && allowSigns && !foundDigit))",
      "info" : "WhileStatement[50989-52137]:WhileStatement[50946-52094]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51049-52137]:Block[51006-52094]"
    }, {
      "left" : "if (chars[i] >= '0' && chars[i] <= '9')",
      "right" : "if (chars[i] >= '0' && chars[i] <= '9')",
      "info" : "IfStatement[51063-52110]:IfStatement[51020-52067]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51103-51190]:Block[51060-51147]"
    }, {
      "left" : "foundDigit = true;",
      "right" : "foundDigit = true;",
      "info" : "ExpressionStatement[51121-51139]:ExpressionStatement[51078-51096]"
    }, {
      "left" : "allowSigns = false;",
      "right" : "allowSigns = false;",
      "info" : "ExpressionStatement[51156-51175]:ExpressionStatement[51113-51132]"
    }, {
      "left" : "if (chars[i] == '.')",
      "right" : "if (chars[i] == '.')",
      "info" : "IfStatement[51196-52110]:IfStatement[51153-52067]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51217-51429]:Block[51174-51386]"
    }, {
      "left" : "if (hasDecPoint || hasExp)",
      "right" : "if (hasDecPoint || hasExp)",
      "info" : "IfStatement[51235-51379]:IfStatement[51192-51336]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51262-51379]:Block[51219-51336]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[51348-51361]:ReturnStatement[51305-51318]"
    }, {
      "left" : "hasDecPoint = true;",
      "right" : "hasDecPoint = true;",
      "info" : "ExpressionStatement[51396-51415]:ExpressionStatement[51353-51372]"
    }, {
      "left" : "if (chars[i] == 'e' || chars[i] == 'E')",
      "right" : "if (chars[i] == 'e' || chars[i] == 'E')",
      "info" : "IfStatement[51435-52110]:IfStatement[51392-52067]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51475-51808]:Block[51432-51765]"
    }, {
      "left" : "if (hasExp)",
      "right" : "if (hasExp)",
      "info" : "IfStatement[51545-51641]:IfStatement[51502-51598]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51557-51641]:Block[51514-51598]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[51610-51623]:ReturnStatement[51567-51580]"
    }, {
      "left" : "if (!foundDigit)",
      "right" : "if (!foundDigit)",
      "info" : "IfStatement[51658-51728]:IfStatement[51615-51685]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51675-51728]:Block[51632-51685]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[51697-51710]:ReturnStatement[51654-51667]"
    }, {
      "left" : "hasExp = true;",
      "right" : "hasExp = true;",
      "info" : "ExpressionStatement[51745-51759]:ExpressionStatement[51702-51716]"
    }, {
      "left" : "allowSigns = true;",
      "right" : "allowSigns = true;",
      "info" : "ExpressionStatement[51776-51794]:ExpressionStatement[51733-51751]"
    }, {
      "left" : "if (chars[i] == '+' || chars[i] == '-')",
      "right" : "if (chars[i] == '+' || chars[i] == '-')",
      "info" : "IfStatement[51814-52110]:IfStatement[51771-52067]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51854-52059]:Block[51811-52016]"
    }, {
      "left" : "if (!allowSigns)",
      "right" : "if (!allowSigns)",
      "info" : "IfStatement[51872-51942]:IfStatement[51829-51899]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51889-51942]:Block[51846-51899]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[51911-51924]:ReturnStatement[51868-51881]"
    }, {
      "left" : "allowSigns = false;",
      "right" : "allowSigns = false;",
      "info" : "ExpressionStatement[51959-51978]:ExpressionStatement[51916-51935]"
    }, {
      "left" : "foundDigit = false;",
      "right" : "foundDigit = false;",
      "info" : "ExpressionStatement[51995-52014]:ExpressionStatement[51952-51971]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52065-52110]:Block[52022-52067]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[52083-52096]:ReturnStatement[52040-52053]"
    }, {
      "left" : "i++;",
      "right" : "i++;",
      "info" : "ExpressionStatement[52123-52127]:ExpressionStatement[52080-52084]"
    }, {
      "left" : "if (i < chars.length)",
      "right" : "if (i < chars.length)",
      "info" : "IfStatement[52146-52949]:IfStatement[52103-52906]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52168-52949]:Block[52125-52906]"
    }, {
      "left" : "if (chars[i] >= '0' && chars[i] <= '9')",
      "right" : "if (chars[i] >= '0' && chars[i] <= '9')",
      "info" : "IfStatement[52182-52307]:IfStatement[52139-52264]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52222-52307]:Block[52179-52264]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[52281-52293]:ReturnStatement[52238-52250]"
    }, {
      "left" : "if (chars[i] == 'e' || chars[i] == 'E')",
      "right" : "if (chars[i] == 'e' || chars[i] == 'E')",
      "info" : "IfStatement[52320-52457]:IfStatement[52277-52414]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52360-52457]:Block[52317-52414]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[52430-52443]:ReturnStatement[52387-52400]"
    }, {
      "left" : "if (!allowSigns\n                && (chars[i] == 'd'\n                    || chars[i] == 'D'\n                    || chars[i] == 'f'\n                    || chars[i] == 'F'))",
      "right" : "if (!allowSigns\n                && (chars[i] == 'd'\n                    || chars[i] == 'D'\n                    || chars[i] == 'f'\n                    || chars[i] == 'F'))",
      "info" : "IfStatement[52470-52691]:IfStatement[52427-52648]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52641-52691]:Block[52598-52648]"
    }, {
      "left" : "return foundDigit;",
      "right" : "return foundDigit;",
      "info" : "ReturnStatement[52659-52677]:ReturnStatement[52616-52634]"
    }, {
      "left" : "if (chars[i] == 'l'\n                || chars[i] == 'L')",
      "right" : "if (chars[i] == 'l'\n                || chars[i] == 'L')",
      "info" : "IfStatement[52704-52872]:IfStatement[52661-52829]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52760-52872]:Block[52717-52829]"
    }, {
      "left" : "return foundDigit && !hasExp;",
      "right" : "return foundDigit && !hasExp;",
      "info" : "ReturnStatement[52829-52858]:ReturnStatement[52786-52815]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[52926-52939]:ReturnStatement[52883-52896]"
    }, {
      "left" : "return !allowSigns && foundDigit;",
      "right" : "return !allowSigns && foundDigit;",
      "info" : "ReturnStatement[53095-53128]:ReturnStatement[53052-53085]"
    } ]
  },
  "interFileMappings" : { }
}