{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "abstract void read(Tokeniser t, CharacterReader r);",
      "right" : "abstract void read(Tokeniser t, CharacterReader r);",
      "info" : "MethodDeclaration[54912-54963]:MethodDeclaration[55052-55103]"
    }, {
      "left" : "static final char nullChar = '\\u0000';",
      "right" : "static final char nullChar = '\\u0000';",
      "info" : "FieldDeclaration[54969-55007]:FieldDeclaration[55109-55147]"
    }, {
      "left" : "private static final char[] attributeSingleValueCharsSorted = new char[]{'\\'', '&', nullChar};",
      "right" : "private static final char[] attributeSingleValueCharsSorted = new char[]{'\\'', '&', nullChar};",
      "info" : "FieldDeclaration[55012-55106]:FieldDeclaration[55152-55246]"
    }, {
      "left" : "private static final char[] attributeDoubleValueCharsSorted = new char[]{'\"', '&', nullChar};",
      "right" : "private static final char[] attributeDoubleValueCharsSorted = new char[]{'\"', '&', nullChar};",
      "info" : "FieldDeclaration[55111-55204]:FieldDeclaration[55251-55344]"
    }, {
      "left" : "private static final char[] attributeNameCharsSorted = new char[]{'\\t', '\\n', '\\r', '\\f', ' ', '/', '=', '>', nullChar, '\"', '\\'', '<'};",
      "right" : "private static final char[] attributeNameCharsSorted = new char[]{'\\t', '\\n', '\\r', '\\f', ' ', '/', '=', '>', nullChar, '\"', '\\'', '<'};",
      "info" : "FieldDeclaration[55209-55345]:FieldDeclaration[55349-55485]"
    }, {
      "left" : "private static final char[] attributeValueUnquoted = new char[]{'\\t', '\\n', '\\r', '\\f', ' ', '&', '>', nullChar, '\"', '\\'', '<', '=', '`'};",
      "right" : "private static final char[] attributeValueUnquoted = new char[]{'\\t', '\\n', '\\r', '\\f', ' ', '&', '>', nullChar, '\"', '\\'', '<', '=', '`'};",
      "info" : "FieldDeclaration[55350-55489]:FieldDeclaration[55490-55629]"
    }, {
      "left" : "private static final char replacementChar = Tokeniser.replacementChar;",
      "right" : "private static final char replacementChar = Tokeniser.replacementChar;",
      "info" : "FieldDeclaration[55495-55565]:FieldDeclaration[55635-55705]"
    }, {
      "left" : "private static final String replacementStr = String.valueOf(Tokeniser.replacementChar);",
      "right" : "private static final String replacementStr = String.valueOf(Tokeniser.replacementChar);",
      "info" : "FieldDeclaration[55570-55657]:FieldDeclaration[55710-55797]"
    }, {
      "left" : "private static final char eof = CharacterReader.EOF;",
      "right" : "private static final char eof = CharacterReader.EOF;",
      "info" : "FieldDeclaration[55662-55714]:FieldDeclaration[55802-55854]"
    }, {
      "left" : "private static void handleDataEndTag(Tokeniser t, CharacterReader r, TokeniserState elseTransition)",
      "right" : "private static void handleDataEndTag(Tokeniser t, CharacterReader r, TokeniserState elseTransition)",
      "info" : "MethodDeclaration[55940-57374]:MethodDeclaration[56080-57514]"
    }, {
      "left" : "private static void readData(Tokeniser t, CharacterReader r, TokeniserState current, TokeniserState advance)",
      "right" : "private static void readData(Tokeniser t, CharacterReader r, TokeniserState current, TokeniserState advance)",
      "info" : "MethodDeclaration[57380-58003]:MethodDeclaration[57520-58143]"
    }, {
      "left" : "private static void readCharRef(Tokeniser t, TokeniserState advance)",
      "right" : "private static void readCharRef(Tokeniser t, TokeniserState advance)",
      "info" : "MethodDeclaration[58009-58260]:MethodDeclaration[58149-58400]"
    }, {
      "left" : "private static void readEndTag(Tokeniser t, CharacterReader r, TokeniserState a, TokeniserState b)",
      "right" : "private static void readEndTag(Tokeniser t, CharacterReader r, TokeniserState a, TokeniserState b)",
      "info" : "MethodDeclaration[58266-58555]:MethodDeclaration[58406-58695]"
    }, {
      "left" : "private static void handleDataDoubleEscapeTag(Tokeniser t, CharacterReader r, TokeniserState primary, TokeniserState fallback)",
      "right" : "private static void handleDataDoubleEscapeTag(Tokeniser t, CharacterReader r, TokeniserState primary, TokeniserState fallback)",
      "info" : "MethodDeclaration[58561-59408]:MethodDeclaration[58701-59548]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56206-57374]:Block[56346-57514]"
    }, {
      "left" : "if (r.matchesLetter())",
      "right" : "if (r.matchesLetter())",
      "info" : "IfStatement[56216-56408]:IfStatement[56356-56548]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56239-56408]:Block[56379-56548]"
    }, {
      "left" : "String name = r.consumeLetterSequence();",
      "right" : "String name = r.consumeLetterSequence();",
      "info" : "VariableDeclarationStatement[56253-56293]:VariableDeclarationStatement[56393-56433]"
    }, {
      "left" : "t.tagPending.appendTagName(name);",
      "right" : "t.tagPending.appendTagName(name);",
      "info" : "ExpressionStatement[56306-56339]:ExpressionStatement[56446-56479]"
    }, {
      "left" : "t.dataBuffer.append(name);",
      "right" : "t.dataBuffer.append(name);",
      "info" : "ExpressionStatement[56352-56378]:ExpressionStatement[56492-56518]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[56391-56398]:ReturnStatement[56531-56538]"
    }, {
      "left" : "boolean needsExitTransition = false;",
      "right" : "boolean needsExitTransition = false;",
      "info" : "VariableDeclarationStatement[56418-56454]:VariableDeclarationStatement[56558-56594]"
    }, {
      "left" : "if (t.isAppropriateEndTagToken() && !r.isEmpty())",
      "right" : "if (t.isAppropriateEndTagToken() && !r.isEmpty())",
      "info" : "IfStatement[56463-57228]:IfStatement[56603-57368]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56513-57171]:Block[56653-57311]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[56527-56548]:VariableDeclarationStatement[56667-56688]"
    }, {
      "left" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\r':\n                case '\\f':\n                case ' ':\n                    t.transition(BeforeAttributeName);\n                    break;\n                case '/':\n                    t.transition(SelfClosingStartTag);\n                    break;\n                case '>':\n                    t.emitTagPending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.dataBuffer.append(c);\n                    needsExitTransition = true;\n            }",
      "right" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\r':\n                case '\\f':\n                case ' ':\n                    t.transition(BeforeAttributeName);\n                    break;\n                case '/':\n                    t.transition(SelfClosingStartTag);\n                    break;\n                case '>':\n                    t.emitTagPending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.dataBuffer.append(c);\n                    needsExitTransition = true;\n            }",
      "info" : "SwitchStatement[56561-57161]:SwitchStatement[56701-57301]"
    }, {
      "left" : "case '\\t':",
      "right" : "case '\\t':",
      "info" : "SwitchCase[56590-56600]:SwitchCase[56730-56740]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[56617-56627]:SwitchCase[56757-56767]"
    }, {
      "left" : "case '\\r':",
      "right" : "case '\\r':",
      "info" : "SwitchCase[56644-56654]:SwitchCase[56784-56794]"
    }, {
      "left" : "case '\\f':",
      "right" : "case '\\f':",
      "info" : "SwitchCase[56671-56681]:SwitchCase[56811-56821]"
    }, {
      "left" : "case ' ':",
      "right" : "case ' ':",
      "info" : "SwitchCase[56698-56707]:SwitchCase[56838-56847]"
    }, {
      "left" : "t.transition(BeforeAttributeName);",
      "right" : "t.transition(BeforeAttributeName);",
      "info" : "ExpressionStatement[56728-56762]:ExpressionStatement[56868-56902]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[56783-56789]:BreakStatement[56923-56929]"
    }, {
      "left" : "case '/':",
      "right" : "case '/':",
      "info" : "SwitchCase[56806-56815]:SwitchCase[56946-56955]"
    }, {
      "left" : "t.transition(SelfClosingStartTag);",
      "right" : "t.transition(SelfClosingStartTag);",
      "info" : "ExpressionStatement[56836-56870]:ExpressionStatement[56976-57010]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[56891-56897]:BreakStatement[57031-57037]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[56914-56923]:SwitchCase[57054-57063]"
    }, {
      "left" : "t.emitTagPending();",
      "right" : "t.emitTagPending();",
      "info" : "ExpressionStatement[56944-56963]:ExpressionStatement[57084-57103]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[56984-57003]:ExpressionStatement[57124-57143]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[57024-57030]:BreakStatement[57164-57170]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[57047-57055]:SwitchCase[57187-57195]"
    }, {
      "left" : "t.dataBuffer.append(c);",
      "right" : "t.dataBuffer.append(c);",
      "info" : "ExpressionStatement[57076-57099]:ExpressionStatement[57216-57239]"
    }, {
      "left" : "needsExitTransition = true;",
      "right" : "needsExitTransition = true;",
      "info" : "ExpressionStatement[57120-57147]:ExpressionStatement[57260-57287]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57177-57228]:Block[57317-57368]"
    }, {
      "left" : "needsExitTransition = true;",
      "right" : "needsExitTransition = true;",
      "info" : "ExpressionStatement[57191-57218]:ExpressionStatement[57331-57358]"
    }, {
      "left" : "if (needsExitTransition)",
      "right" : "if (needsExitTransition)",
      "info" : "IfStatement[57238-57368]:IfStatement[57378-57508]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57263-57368]:Block[57403-57508]"
    }, {
      "left" : "t.emit(\"</\" + t.dataBuffer.toString());",
      "right" : "t.emit(\"</\" + t.dataBuffer.toString());",
      "info" : "ExpressionStatement[57277-57316]:ExpressionStatement[57417-57456]"
    }, {
      "left" : "t.transition(elseTransition);",
      "right" : "t.transition(elseTransition);",
      "info" : "ExpressionStatement[57329-57358]:ExpressionStatement[57469-57498]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57489-58003]:Block[57629-58143]"
    }, {
      "left" : "switch (r.current()) {\n            case '<':\n                t.advanceTransition(advance);\n                break;\n            case nullChar:\n                t.error(current);\n                r.advance();\n                t.emit(replacementChar);\n                break;\n            case eof:\n                t.emit(new Token.EOF());\n                break;\n            default:\n                String data = r.consumeToAny('<', nullChar);\n                t.emit(data);\n                break;\n        }",
      "right" : "switch (r.current()) {\n            case '<':\n                t.advanceTransition(advance);\n                break;\n            case nullChar:\n                t.error(current);\n                r.advance();\n                t.emit(replacementChar);\n                break;\n            case eof:\n                t.emit(new Token.EOF());\n                break;\n            default:\n                String data = r.consumeToAny('<', nullChar);\n                t.emit(data);\n                break;\n        }",
      "info" : "SwitchStatement[57499-57997]:SwitchStatement[57639-58137]"
    }, {
      "left" : "case '<':",
      "right" : "case '<':",
      "info" : "SwitchCase[57534-57543]:SwitchCase[57674-57683]"
    }, {
      "left" : "t.advanceTransition(advance);",
      "right" : "t.advanceTransition(advance);",
      "info" : "ExpressionStatement[57560-57589]:ExpressionStatement[57700-57729]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[57606-57612]:BreakStatement[57746-57752]"
    }, {
      "left" : "case nullChar:",
      "right" : "case nullChar:",
      "info" : "SwitchCase[57625-57639]:SwitchCase[57765-57779]"
    }, {
      "left" : "t.error(current);",
      "right" : "t.error(current);",
      "info" : "ExpressionStatement[57656-57673]:ExpressionStatement[57796-57813]"
    }, {
      "left" : "r.advance();",
      "right" : "r.advance();",
      "info" : "ExpressionStatement[57690-57702]:ExpressionStatement[57830-57842]"
    }, {
      "left" : "t.emit(replacementChar);",
      "right" : "t.emit(replacementChar);",
      "info" : "ExpressionStatement[57719-57743]:ExpressionStatement[57859-57883]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[57760-57766]:BreakStatement[57900-57906]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[57779-57788]:SwitchCase[57919-57928]"
    }, {
      "left" : "t.emit(new Token.EOF());",
      "right" : "t.emit(new Token.EOF());",
      "info" : "ExpressionStatement[57805-57829]:ExpressionStatement[57945-57969]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[57846-57852]:BreakStatement[57986-57992]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[57865-57873]:SwitchCase[58005-58013]"
    }, {
      "left" : "String data = r.consumeToAny('<', nullChar);",
      "right" : "String data = r.consumeToAny('<', nullChar);",
      "info" : "VariableDeclarationStatement[57890-57934]:VariableDeclarationStatement[58030-58074]"
    }, {
      "left" : "t.emit(data);",
      "right" : "t.emit(data);",
      "info" : "ExpressionStatement[57951-57964]:ExpressionStatement[58091-58104]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[57981-57987]:BreakStatement[58121-58127]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58078-58260]:Block[58218-58400]"
    }, {
      "left" : "int[] c = t.consumeCharacterReference(null, false);",
      "right" : "int[] c = t.consumeCharacterReference(null, false);",
      "info" : "VariableDeclarationStatement[58088-58139]:VariableDeclarationStatement[58228-58279]"
    }, {
      "left" : "if (c == null)",
      "right" : "if (c == null)",
      "info" : "IfStatement[58148-58223]:IfStatement[58288-58363]"
    }, {
      "left" : "t.emit('&');",
      "right" : "t.emit('&');",
      "info" : "ExpressionStatement[58175-58187]:ExpressionStatement[58315-58327]"
    }, {
      "left" : "t.emit(c);",
      "right" : "t.emit(c);",
      "info" : "ExpressionStatement[58213-58223]:ExpressionStatement[58353-58363]"
    }, {
      "left" : "t.transition(advance);",
      "right" : "t.transition(advance);",
      "info" : "ExpressionStatement[58232-58254]:ExpressionStatement[58372-58394]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58365-58555]:Block[58505-58695]"
    }, {
      "left" : "if (r.matchesLetter())",
      "right" : "if (r.matchesLetter())",
      "info" : "IfStatement[58375-58549]:IfStatement[58515-58689]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58398-58477]:Block[58538-58617]"
    }, {
      "left" : "t.createTagPending(false);",
      "right" : "t.createTagPending(false);",
      "info" : "ExpressionStatement[58412-58438]:ExpressionStatement[58552-58578]"
    }, {
      "left" : "t.transition(a);",
      "right" : "t.transition(a);",
      "info" : "ExpressionStatement[58451-58467]:ExpressionStatement[58591-58607]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58483-58549]:Block[58623-58689]"
    }, {
      "left" : "t.emit(\"</\");",
      "right" : "t.emit(\"</\");",
      "info" : "ExpressionStatement[58497-58510]:ExpressionStatement[58637-58650]"
    }, {
      "left" : "t.transition(b);",
      "right" : "t.transition(b);",
      "info" : "ExpressionStatement[58523-58539]:ExpressionStatement[58663-58679]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58688-59408]:Block[58828-59548]"
    }, {
      "left" : "if (r.matchesLetter())",
      "right" : "if (r.matchesLetter())",
      "info" : "IfStatement[58698-58870]:IfStatement[58838-59010]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58721-58870]:Block[58861-59010]"
    }, {
      "left" : "String name = r.consumeLetterSequence();",
      "right" : "String name = r.consumeLetterSequence();",
      "info" : "VariableDeclarationStatement[58735-58775]:VariableDeclarationStatement[58875-58915]"
    }, {
      "left" : "t.dataBuffer.append(name);",
      "right" : "t.dataBuffer.append(name);",
      "info" : "ExpressionStatement[58788-58814]:ExpressionStatement[58928-58954]"
    }, {
      "left" : "t.emit(name);",
      "right" : "t.emit(name);",
      "info" : "ExpressionStatement[58827-58840]:ExpressionStatement[58967-58980]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[58853-58860]:ReturnStatement[58993-59000]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[58880-58901]:VariableDeclarationStatement[59020-59041]"
    }, {
      "left" : "switch (c) {\n            case '\\t':\n            case '\\n':\n            case '\\r':\n            case '\\f':\n            case ' ':\n            case '/':\n            case '>':\n                if (t.dataBuffer.toString().equals(\"script\"))\n                    t.transition(primary);\n                else\n                    t.transition(fallback);\n                t.emit(c);\n                break;\n            default:\n                r.unconsume();\n                t.transition(fallback);\n        }",
      "right" : "switch (c) {\n            case '\\t':\n            case '\\n':\n            case '\\r':\n            case '\\f':\n            case ' ':\n            case '/':\n            case '>':\n                if (t.dataBuffer.toString().equals(\"script\"))\n                    t.transition(primary);\n                else\n                    t.transition(fallback);\n                t.emit(c);\n                break;\n            default:\n                r.unconsume();\n                t.transition(fallback);\n        }",
      "info" : "SwitchStatement[58910-59402]:SwitchStatement[59050-59542]"
    }, {
      "left" : "case '\\t':",
      "right" : "case '\\t':",
      "info" : "SwitchCase[58935-58945]:SwitchCase[59075-59085]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[58958-58968]:SwitchCase[59098-59108]"
    }, {
      "left" : "case '\\r':",
      "right" : "case '\\r':",
      "info" : "SwitchCase[58981-58991]:SwitchCase[59121-59131]"
    }, {
      "left" : "case '\\f':",
      "right" : "case '\\f':",
      "info" : "SwitchCase[59004-59014]:SwitchCase[59144-59154]"
    }, {
      "left" : "case ' ':",
      "right" : "case ' ':",
      "info" : "SwitchCase[59027-59036]:SwitchCase[59167-59176]"
    }, {
      "left" : "case '/':",
      "right" : "case '/':",
      "info" : "SwitchCase[59049-59058]:SwitchCase[59189-59198]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[59071-59080]:SwitchCase[59211-59220]"
    }, {
      "left" : "if (t.dataBuffer.toString().equals(\"script\"))",
      "right" : "if (t.dataBuffer.toString().equals(\"script\"))",
      "info" : "IfStatement[59097-59250]:IfStatement[59237-59390]"
    }, {
      "left" : "t.transition(primary);",
      "right" : "t.transition(primary);",
      "info" : "ExpressionStatement[59163-59185]:ExpressionStatement[59303-59325]"
    }, {
      "left" : "t.transition(fallback);",
      "right" : "t.transition(fallback);",
      "info" : "ExpressionStatement[59227-59250]:ExpressionStatement[59367-59390]"
    }, {
      "left" : "t.emit(c);",
      "right" : "t.emit(c);",
      "info" : "ExpressionStatement[59267-59277]:ExpressionStatement[59407-59417]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[59294-59300]:BreakStatement[59434-59440]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[59313-59321]:SwitchCase[59453-59461]"
    }, {
      "left" : "r.unconsume();",
      "right" : "r.unconsume();",
      "info" : "ExpressionStatement[59338-59352]:ExpressionStatement[59478-59492]"
    }, {
      "left" : "t.transition(fallback);",
      "right" : "t.transition(fallback);",
      "info" : "ExpressionStatement[59369-59392]:ExpressionStatement[59509-59532]"
    } ]
  },
  "interFileMappings" : { }
}