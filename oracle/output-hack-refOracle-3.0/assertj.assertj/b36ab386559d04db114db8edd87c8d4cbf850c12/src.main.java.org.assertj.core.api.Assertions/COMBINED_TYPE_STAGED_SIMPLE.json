{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "Assertions",
      "right" : "Assertions",
      "info" : "TypeDeclaration[2269-60053]:TypeDeclaration[739-7252]"
    }, {
      "left" : "public static <T extends Comparable<? super T>> AbstractComparableAssert<?, T> assertThat(T actual)",
      "right" : "public static <T extends Comparable<? super T>> AbstractComparableAssert<?, T> assertThat(T actual)",
      "info" : "MethodDeclaration[8074-8443]:MethodDeclaration[4825-5194]"
    }, {
      "left" : "public static <T> AbstractIterableAssert<?, ? extends Iterable<? extends T>, T> assertThat(Iterable<? extends T> actual)",
      "right" : "public static <T> AbstractIterableAssert<?, ? extends Iterable<? extends T>, T> assertThat(Iterable<? extends T> actual)",
      "info" : "MethodDeclaration[8447-8779]:MethodDeclaration[2857-3189]"
    }, {
      "left" : "public static <T> AbstractIterableAssert<?, ? extends Iterable<? extends T>, T> assertThat(Iterator<? extends T> actual)",
      "right" : "public static <T> AbstractIterableAssert<?, ? extends Iterable<? extends T>, T> assertThat(Iterator<? extends T> actual)",
      "info" : "MethodDeclaration[8783-9427]:MethodDeclaration[3193-3837]"
    }, {
      "left" : "public static AbstractPathAssert<?> assertThat(Path actual)",
      "right" : "public static AbstractPathAssert<?> assertThat(Path actual)",
      "info" : "MethodDeclaration[10532-10777]:MethodDeclaration[4157-4402]"
    }, {
      "left" : "public static <T> AbstractListAssert<?, ? extends List<? extends T>, T> assertThat(List<? extends T> actual)",
      "right" : "public static <T> AbstractListAssert<?, ? extends List<? extends T>, T> assertThat(List<? extends T> actual)",
      "info" : "MethodDeclaration[12749-13061]:MethodDeclaration[3841-4153]"
    }, {
      "left" : "public static <T extends AssertDelegateTarget> T assertThat(T assertion)",
      "right" : "public static <T extends AssertDelegateTarget> T assertThat(T assertion)",
      "info" : "MethodDeclaration[14154-16206]:MethodDeclaration[5198-7250]"
    }, {
      "left" : "public static <T> T assertThat(final AssertProvider<T> component)",
      "right" : "public static <T> T assertThat(final AssertProvider<T> component)",
      "info" : "MethodDeclaration[16210-16698]:MethodDeclaration[1950-2438]"
    }, {
      "left" : "public static <K, V> MapAssert<K, V> assertThat(Map<K, V> actual)",
      "right" : "public static <K, V> MapAssert<K, V> assertThat(Map<K, V> actual)",
      "info" : "MethodDeclaration[16996-17411]:MethodDeclaration[4406-4821]"
    }, {
      "left" : "public static AbstractCharSequenceAssert<?, ? extends CharSequence> assertThat(CharSequence actual)",
      "right" : "public static AbstractCharSequenceAssert<?, ? extends CharSequence> assertThat(CharSequence actual)",
      "info" : "MethodDeclaration[18239-18556]:MethodDeclaration[2536-2853]"
    }, {
      "left" : "protected Assertions()",
      "right" : "protected Assertions()",
      "info" : "MethodDeclaration[59961-60051]:MethodDeclaration[2442-2532]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3203-3209]:Modifier[1896-1902]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[3210-3215]:TYPE_DECLARATION_KIND[1903-1908]"
    }, {
      "left" : "Assertions",
      "right" : "Assertions",
      "info" : "SimpleName[3216-3226]:SimpleName[1909-1919]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8288-8294]:Modifier[5039-5045]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[8295-8301]:Modifier[5046-5052]"
    }, {
      "left" : "T extends Comparable<? super T>",
      "right" : "T extends Comparable<? super T>",
      "info" : "TypeParameter[8303-8334]:TypeParameter[5054-5085]"
    }, {
      "left" : "AbstractComparableAssert<?, T>",
      "right" : "AbstractComparableAssert<?, T>",
      "info" : "ParameterizedType[8336-8366]:ParameterizedType[5087-5117]"
    }, {
      "left" : "assertThat",
      "right" : "assertThat",
      "info" : "SimpleName[8367-8377]:SimpleName[5118-5128]"
    }, {
      "left" : "T actual",
      "right" : "T actual",
      "info" : "SingleVariableDeclaration[8378-8386]:SingleVariableDeclaration[5129-5137]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8388-8443]:Block[5139-5194]"
    }, {
      "left" : "return new GenericComparableAssert<>(actual);",
      "right" : "return new GenericComparableAssert<>(actual);",
      "info" : "ReturnStatement[8394-8439]:ReturnStatement[5145-5190]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8612-8618]:Modifier[3022-3028]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[8619-8625]:Modifier[3029-3035]"
    }, {
      "left" : "T",
      "right" : "T",
      "info" : "TypeParameter[8627-8628]:TypeParameter[3037-3038]"
    }, {
      "left" : "AbstractIterableAssert<?, ? extends Iterable<? extends T>, T>",
      "right" : "AbstractIterableAssert<?, ? extends Iterable<? extends T>, T>",
      "info" : "ParameterizedType[8630-8691]:ParameterizedType[3040-3101]"
    }, {
      "left" : "assertThat",
      "right" : "assertThat",
      "info" : "SimpleName[8692-8702]:SimpleName[3102-3112]"
    }, {
      "left" : "Iterable<? extends T> actual",
      "right" : "Iterable<? extends T> actual",
      "info" : "SingleVariableDeclaration[8703-8731]:SingleVariableDeclaration[3113-3141]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8733-8779]:Block[3143-3189]"
    }, {
      "left" : "return new IterableAssert<>(actual);",
      "right" : "return new IterableAssert<>(actual);",
      "info" : "ReturnStatement[8739-8775]:ReturnStatement[3149-3185]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9260-9266]:Modifier[3670-3676]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[9267-9273]:Modifier[3677-3683]"
    }, {
      "left" : "T",
      "right" : "T",
      "info" : "TypeParameter[9275-9276]:TypeParameter[3685-3686]"
    }, {
      "left" : "AbstractIterableAssert<?, ? extends Iterable<? extends T>, T>",
      "right" : "AbstractIterableAssert<?, ? extends Iterable<? extends T>, T>",
      "info" : "ParameterizedType[9278-9339]:ParameterizedType[3688-3749]"
    }, {
      "left" : "assertThat",
      "right" : "assertThat",
      "info" : "SimpleName[9340-9350]:SimpleName[3750-3760]"
    }, {
      "left" : "Iterator<? extends T> actual",
      "right" : "Iterator<? extends T> actual",
      "info" : "SingleVariableDeclaration[9351-9379]:SingleVariableDeclaration[3761-3789]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9381-9427]:Block[3791-3837]"
    }, {
      "left" : "return new IterableAssert<>(actual);",
      "right" : "return new IterableAssert<>(actual);",
      "info" : "ReturnStatement[9387-9423]:ReturnStatement[3797-3833]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10677-10683]:Modifier[4302-4308]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[10684-10690]:Modifier[4309-4315]"
    }, {
      "left" : "AbstractPathAssert<?>",
      "right" : "AbstractPathAssert<?>",
      "info" : "ParameterizedType[10691-10712]:ParameterizedType[4316-4337]"
    }, {
      "left" : "assertThat",
      "right" : "assertThat",
      "info" : "SimpleName[10713-10723]:SimpleName[4338-4348]"
    }, {
      "left" : "Path actual",
      "right" : "Path actual",
      "info" : "SingleVariableDeclaration[10724-10735]:SingleVariableDeclaration[4349-4360]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10737-10777]:Block[4362-4402]"
    }, {
      "left" : "return new PathAssert(actual);",
      "right" : "return new PathAssert(actual);",
      "info" : "ReturnStatement[10743-10773]:ReturnStatement[4368-4398]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12910-12916]:Modifier[4002-4008]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[12917-12923]:Modifier[4009-4015]"
    }, {
      "left" : "T",
      "right" : "T",
      "info" : "TypeParameter[12925-12926]:TypeParameter[4017-4018]"
    }, {
      "left" : "AbstractListAssert<?, ? extends List<? extends T>, T>",
      "right" : "AbstractListAssert<?, ? extends List<? extends T>, T>",
      "info" : "ParameterizedType[12928-12981]:ParameterizedType[4020-4073]"
    }, {
      "left" : "assertThat",
      "right" : "assertThat",
      "info" : "SimpleName[12982-12992]:SimpleName[4074-4084]"
    }, {
      "left" : "List<? extends T> actual",
      "right" : "List<? extends T> actual",
      "info" : "SingleVariableDeclaration[12993-13017]:SingleVariableDeclaration[4085-4109]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13019-13061]:Block[4111-4153]"
    }, {
      "left" : "return new ListAssert<>(actual);",
      "right" : "return new ListAssert<>(actual);",
      "info" : "ReturnStatement[13025-13057]:ReturnStatement[4117-4149]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[16106-16112]:Modifier[7150-7156]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[16113-16119]:Modifier[7157-7163]"
    }, {
      "left" : "T extends AssertDelegateTarget",
      "right" : "T extends AssertDelegateTarget",
      "info" : "TypeParameter[16121-16151]:TypeParameter[7165-7195]"
    }, {
      "left" : "T",
      "right" : "T",
      "info" : "SimpleType[16153-16154]:SimpleType[7197-7198]"
    }, {
      "left" : "assertThat",
      "right" : "assertThat",
      "info" : "SimpleName[16155-16165]:SimpleName[7199-7209]"
    }, {
      "left" : "T assertion",
      "right" : "T assertion",
      "info" : "SingleVariableDeclaration[16166-16177]:SingleVariableDeclaration[7210-7221]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16179-16206]:Block[7223-7250]"
    }, {
      "left" : "return assertion;",
      "right" : "return assertion;",
      "info" : "ReturnStatement[16185-16202]:ReturnStatement[7229-7246]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[16592-16598]:Modifier[2332-2338]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[16599-16605]:Modifier[2339-2345]"
    }, {
      "left" : "T",
      "right" : "T",
      "info" : "TypeParameter[16607-16608]:TypeParameter[2347-2348]"
    }, {
      "left" : "T",
      "right" : "T",
      "info" : "SimpleType[16610-16611]:SimpleType[2350-2351]"
    }, {
      "left" : "assertThat",
      "right" : "assertThat",
      "info" : "SimpleName[16612-16622]:SimpleName[2352-2362]"
    }, {
      "left" : "final AssertProvider<T> component",
      "right" : "final AssertProvider<T> component",
      "info" : "SingleVariableDeclaration[16623-16656]:SingleVariableDeclaration[2363-2396]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16658-16698]:Block[2398-2438]"
    }, {
      "left" : "return component.assertThat();",
      "right" : "return component.assertThat();",
      "info" : "ReturnStatement[16664-16694]:ReturnStatement[2404-2434]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[17304-17310]:Modifier[4714-4720]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[17311-17317]:Modifier[4721-4727]"
    }, {
      "left" : "K",
      "right" : "K",
      "info" : "TypeParameter[17319-17320]:TypeParameter[4729-4730]"
    }, {
      "left" : "V",
      "right" : "V",
      "info" : "TypeParameter[17322-17323]:TypeParameter[4732-4733]"
    }, {
      "left" : "MapAssert<K, V>",
      "right" : "MapAssert<K, V>",
      "info" : "ParameterizedType[17325-17340]:ParameterizedType[4735-4750]"
    }, {
      "left" : "assertThat",
      "right" : "assertThat",
      "info" : "SimpleName[17341-17351]:SimpleName[4751-4761]"
    }, {
      "left" : "Map<K, V> actual",
      "right" : "Map<K, V> actual",
      "info" : "SingleVariableDeclaration[17352-17368]:SingleVariableDeclaration[4762-4778]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17370-17411]:Block[4780-4821]"
    }, {
      "left" : "return new MapAssert<>(actual);",
      "right" : "return new MapAssert<>(actual);",
      "info" : "ReturnStatement[17376-17407]:ReturnStatement[4786-4817]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[18408-18414]:Modifier[2705-2711]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[18415-18421]:Modifier[2712-2718]"
    }, {
      "left" : "AbstractCharSequenceAssert<?, ? extends CharSequence>",
      "right" : "AbstractCharSequenceAssert<?, ? extends CharSequence>",
      "info" : "ParameterizedType[18422-18475]:ParameterizedType[2719-2772]"
    }, {
      "left" : "assertThat",
      "right" : "assertThat",
      "info" : "SimpleName[18476-18486]:SimpleName[2773-2783]"
    }, {
      "left" : "CharSequence actual",
      "right" : "CharSequence actual",
      "info" : "SingleVariableDeclaration[18487-18506]:SingleVariableDeclaration[2784-2803]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18508-18556]:Block[2805-2853]"
    }, {
      "left" : "return new CharSequenceAssert(actual);",
      "right" : "return new CharSequenceAssert(actual);",
      "info" : "ReturnStatement[18514-18552]:ReturnStatement[2811-2849]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[60026-60035]:Modifier[2507-2516]"
    }, {
      "left" : "Assertions",
      "right" : "Assertions",
      "info" : "SimpleName[60036-60046]:SimpleName[2517-2527]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60049-60051]:Block[2530-2532]"
    } ]
  },
  "interFileMappings" : {
    "Moved to File: src/main/java/org/assertj/core/api/StrictAssertions.java" : {
      "matchedElements" : [
 {
        "left" : "public static <T> OptionalAssert<T> assertThat(Optional<T> optional)",
        "right" : "public static <T> OptionalAssert<T> assertThat(Optional<T> optional)",
        "info" : "MethodDeclaration[3232-3590]:MethodDeclaration[3328-3686]"
      }, {
        "left" : "public static OptionalDoubleAssert assertThat(OptionalDouble optionalDouble)",
        "right" : "public static OptionalDoubleAssert assertThat(OptionalDouble optionalDouble)",
        "info" : "MethodDeclaration[3594-3899]:MethodDeclaration[3690-3995]"
      }, {
        "left" : "public static OptionalIntAssert assertThat(OptionalInt optionalInt)",
        "right" : "public static OptionalIntAssert assertThat(OptionalInt optionalInt)",
        "info" : "MethodDeclaration[3903-4187]:MethodDeclaration[3999-4283]"
      }, {
        "left" : "public static OptionalLongAssert assertThat(OptionalLong optionalLong)",
        "right" : "public static OptionalLongAssert assertThat(OptionalLong optionalLong)",
        "info" : "MethodDeclaration[4191-4481]:MethodDeclaration[4287-4577]"
      }, {
        "left" : "public static AbstractBigDecimalAssert<?> assertThat(BigDecimal actual)",
        "right" : "public static AbstractBigDecimalAssert<?> assertThat(BigDecimal actual)",
        "info" : "MethodDeclaration[4485-4770]:MethodDeclaration[4581-4866]"
      }, {
        "left" : "public static AbstractUriAssert<?> assertThat(URI actual)",
        "right" : "public static AbstractUriAssert<?> assertThat(URI actual)",
        "info" : "MethodDeclaration[4774-5031]:MethodDeclaration[4870-5127]"
      }, {
        "left" : "public static AbstractUrlAssert<?> assertThat(URL actual)",
        "right" : "public static AbstractUrlAssert<?> assertThat(URL actual)",
        "info" : "MethodDeclaration[5035-5292]:MethodDeclaration[5131-5388]"
      }, {
        "left" : "public static AbstractBooleanAssert<?> assertThat(boolean actual)",
        "right" : "public static AbstractBooleanAssert<?> assertThat(boolean actual)",
        "info" : "MethodDeclaration[5296-5569]:MethodDeclaration[5392-5665]"
      }, {
        "left" : "public static AbstractBooleanAssert<?> assertThat(Boolean actual)",
        "right" : "public static AbstractBooleanAssert<?> assertThat(Boolean actual)",
        "info" : "MethodDeclaration[5573-5846]:MethodDeclaration[5669-5942]"
      }, {
        "left" : "public static AbstractBooleanArrayAssert<?> assertThat(boolean[] actual)",
        "right" : "public static AbstractBooleanArrayAssert<?> assertThat(boolean[] actual)",
        "info" : "MethodDeclaration[5850-6140]:MethodDeclaration[5946-6236]"
      }, {
        "left" : "public static AbstractByteAssert<?> assertThat(byte actual)",
        "right" : "public static AbstractByteAssert<?> assertThat(byte actual)",
        "info" : "MethodDeclaration[6144-6405]:MethodDeclaration[6240-6501]"
      }, {
        "left" : "public static AbstractByteAssert<?> assertThat(Byte actual)",
        "right" : "public static AbstractByteAssert<?> assertThat(Byte actual)",
        "info" : "MethodDeclaration[6409-6670]:MethodDeclaration[6505-6766]"
      }, {
        "left" : "public static AbstractByteArrayAssert<?> assertThat(byte[] actual)",
        "right" : "public static AbstractByteArrayAssert<?> assertThat(byte[] actual)",
        "info" : "MethodDeclaration[6674-6952]:MethodDeclaration[6770-7048]"
      }, {
        "left" : "public static AbstractCharacterAssert<?> assertThat(char actual)",
        "right" : "public static AbstractCharacterAssert<?> assertThat(char actual)",
        "info" : "MethodDeclaration[6956-7232]:MethodDeclaration[7052-7328]"
      }, {
        "left" : "public static AbstractCharArrayAssert<?> assertThat(char[] actual)",
        "right" : "public static AbstractCharArrayAssert<?> assertThat(char[] actual)",
        "info" : "MethodDeclaration[7236-7514]:MethodDeclaration[7332-7610]"
      }, {
        "left" : "public static AbstractCharacterAssert<?> assertThat(Character actual)",
        "right" : "public static AbstractCharacterAssert<?> assertThat(Character actual)",
        "info" : "MethodDeclaration[7518-7799]:MethodDeclaration[7614-7895]"
      }, {
        "left" : "public static AbstractClassAssert<?> assertThat(Class<?> actual)",
        "right" : "public static AbstractClassAssert<?> assertThat(Class<?> actual)",
        "info" : "MethodDeclaration[7803-8070]:MethodDeclaration[7899-8166]"
      }, {
        "left" : "public static AbstractDoubleAssert<?> assertThat(double actual)",
        "right" : "public static AbstractDoubleAssert<?> assertThat(double actual)",
        "info" : "MethodDeclaration[9431-9700]:MethodDeclaration[8170-8439]"
      }, {
        "left" : "public static AbstractDoubleAssert<?> assertThat(Double actual)",
        "right" : "public static AbstractDoubleAssert<?> assertThat(Double actual)",
        "info" : "MethodDeclaration[9704-9973]:MethodDeclaration[8443-8712]"
      }, {
        "left" : "public static AbstractDoubleArrayAssert<?> assertThat(double[] actual)",
        "right" : "public static AbstractDoubleArrayAssert<?> assertThat(double[] actual)",
        "info" : "MethodDeclaration[9977-10263]:MethodDeclaration[8716-9002]"
      }, {
        "left" : "public static AbstractFileAssert<?> assertThat(File actual)",
        "right" : "public static AbstractFileAssert<?> assertThat(File actual)",
        "info" : "MethodDeclaration[10267-10528]:MethodDeclaration[9006-9267]"
      }, {
        "left" : "public static AbstractInputStreamAssert<?, ? extends InputStream> assertThat(InputStream actual)",
        "right" : "public static AbstractInputStreamAssert<?, ? extends InputStream> assertThat(InputStream actual)",
        "info" : "MethodDeclaration[10781-11093]:MethodDeclaration[9271-9583]"
      }, {
        "left" : "public static AbstractFloatAssert<?> assertThat(float actual)",
        "right" : "public static AbstractFloatAssert<?> assertThat(float actual)",
        "info" : "MethodDeclaration[11097-11362]:MethodDeclaration[9587-9852]"
      }, {
        "left" : "public static AbstractFloatAssert<?> assertThat(Float actual)",
        "right" : "public static AbstractFloatAssert<?> assertThat(Float actual)",
        "info" : "MethodDeclaration[11366-11631]:MethodDeclaration[9856-10121]"
      }, {
        "left" : "public static AbstractFloatArrayAssert<?> assertThat(float[] actual)",
        "right" : "public static AbstractFloatArrayAssert<?> assertThat(float[] actual)",
        "info" : "MethodDeclaration[11635-11917]:MethodDeclaration[10125-10407]"
      }, {
        "left" : "public static AbstractIntegerAssert<?> assertThat(int actual)",
        "right" : "public static AbstractIntegerAssert<?> assertThat(int actual)",
        "info" : "MethodDeclaration[11921-12190]:MethodDeclaration[10411-10680]"
      }, {
        "left" : "public static AbstractIntArrayAssert<?> assertThat(int[] actual)",
        "right" : "public static AbstractIntArrayAssert<?> assertThat(int[] actual)",
        "info" : "MethodDeclaration[12194-12468]:MethodDeclaration[10684-10958]"
      }, {
        "left" : "public static AbstractIntegerAssert<?> assertThat(Integer actual)",
        "right" : "public static AbstractIntegerAssert<?> assertThat(Integer actual)",
        "info" : "MethodDeclaration[12472-12745]:MethodDeclaration[10962-11235]"
      }, {
        "left" : "public static AbstractLongAssert<?> assertThat(long actual)",
        "right" : "public static AbstractLongAssert<?> assertThat(long actual)",
        "info" : "MethodDeclaration[13065-13326]:MethodDeclaration[11239-11500]"
      }, {
        "left" : "public static AbstractLongAssert<?> assertThat(Long actual)",
        "right" : "public static AbstractLongAssert<?> assertThat(Long actual)",
        "info" : "MethodDeclaration[13330-13591]:MethodDeclaration[11504-11765]"
      }, {
        "left" : "public static AbstractLongArrayAssert<?> assertThat(long[] actual)",
        "right" : "public static AbstractLongArrayAssert<?> assertThat(long[] actual)",
        "info" : "MethodDeclaration[13595-13873]:MethodDeclaration[11769-12047]"
      }, {
        "left" : "public static <T> AbstractObjectAssert<?, T> assertThat(T actual)",
        "right" : "public static <T> AbstractObjectAssert<?, T> assertThat(T actual)",
        "info" : "MethodDeclaration[13877-14150]:MethodDeclaration[12051-12324]"
      }, {
        "left" : "public static <T> AbstractObjectArrayAssert<?, T> assertThat(T[] actual)",
        "right" : "public static <T> AbstractObjectArrayAssert<?, T> assertThat(T[] actual)",
        "info" : "MethodDeclaration[16702-16992]:MethodDeclaration[12328-12618]"
      }, {
        "left" : "public static AbstractShortAssert<?> assertThat(short actual)",
        "right" : "public static AbstractShortAssert<?> assertThat(short actual)",
        "info" : "MethodDeclaration[17415-17680]:MethodDeclaration[12622-12887]"
      }, {
        "left" : "public static AbstractShortAssert<?> assertThat(Short actual)",
        "right" : "public static AbstractShortAssert<?> assertThat(Short actual)",
        "info" : "MethodDeclaration[17684-17949]:MethodDeclaration[12891-13156]"
      }, {
        "left" : "public static AbstractShortArrayAssert<?> assertThat(short[] actual)",
        "right" : "public static AbstractShortArrayAssert<?> assertThat(short[] actual)",
        "info" : "MethodDeclaration[17953-18235]:MethodDeclaration[13160-13442]"
      }, {
        "left" : "public static AbstractCharSequenceAssert<?, String> assertThat(String actual)",
        "right" : "public static AbstractCharSequenceAssert<?, String> assertThat(String actual)",
        "info" : "MethodDeclaration[18560-18843]:MethodDeclaration[13446-13729]"
      }, {
        "left" : "public static AbstractDateAssert<?> assertThat(Date actual)",
        "right" : "public static AbstractDateAssert<?> assertThat(Date actual)",
        "info" : "MethodDeclaration[18847-19108]:MethodDeclaration[13733-13994]"
      }, {
        "left" : "public static AbstractZonedDateTimeAssert<?> assertThat(ZonedDateTime date)",
        "right" : "public static AbstractZonedDateTimeAssert<?> assertThat(ZonedDateTime date)",
        "info" : "MethodDeclaration[19112-19405]:MethodDeclaration[13998-14291]"
      }, {
        "left" : "public static AbstractLocalDateTimeAssert<?> assertThat(LocalDateTime localDateTime)",
        "right" : "public static AbstractLocalDateTimeAssert<?> assertThat(LocalDateTime localDateTime)",
        "info" : "MethodDeclaration[19409-19720]:MethodDeclaration[14295-14606]"
      }, {
        "left" : "public static AbstractOffsetDateTimeAssert<?> assertThat(OffsetDateTime actual)",
        "right" : "public static AbstractOffsetDateTimeAssert<?> assertThat(OffsetDateTime actual)",
        "info" : "MethodDeclaration[19724-20029]:MethodDeclaration[14610-14915]"
      }, {
        "left" : "public static AbstractOffsetTimeAssert<?> assertThat(OffsetTime offsetTime)",
        "right" : "public static AbstractOffsetTimeAssert<?> assertThat(OffsetTime offsetTime)",
        "info" : "MethodDeclaration[20033-20312]:MethodDeclaration[14919-15198]"
      }, {
        "left" : "public static AbstractLocalTimeAssert<?> assertThat(LocalTime actual)",
        "right" : "public static AbstractLocalTimeAssert<?> assertThat(LocalTime actual)",
        "info" : "MethodDeclaration[20316-20597]:MethodDeclaration[15202-15483]"
      }, {
        "left" : "public static AbstractLocalDateAssert<?> assertThat(LocalDate localDate)",
        "right" : "public static AbstractLocalDateAssert<?> assertThat(LocalDate localDate)",
        "info" : "MethodDeclaration[20601-20891]:MethodDeclaration[15487-15777]"
      }, {
        "left" : "public static AbstractThrowableAssert<?, ? extends Throwable> assertThat(Throwable actual)",
        "right" : "public static AbstractThrowableAssert<?, ? extends Throwable> assertThat(Throwable actual)",
        "info" : "MethodDeclaration[20895-21204]:MethodDeclaration[15781-16090]"
      }, {
        "left" : "public static AbstractThrowableAssert<?, ? extends Throwable> assertThatThrownBy(ThrowingCallable shouldRaiseThrowable)",
        "right" : "public static AbstractThrowableAssert<?, ? extends Throwable> assertThatThrownBy(ThrowingCallable shouldRaiseThrowable)",
        "info" : "MethodDeclaration[21208-22110]:MethodDeclaration[16094-16996]"
      }, {
        "left" : "public static Throwable catchThrowable(ThrowingCallable shouldRaiseThrowable)",
        "right" : "public static Throwable catchThrowable(ThrowingCallable shouldRaiseThrowable)",
        "info" : "MethodDeclaration[22114-23024]:MethodDeclaration[17000-17910]"
      }, {
        "left" : "public static void setRemoveAssertJRelatedElementsFromStackTrace(boolean removeAssertJRelatedElementsFromStackTrace)",
        "right" : "public static void setRemoveAssertJRelatedElementsFromStackTrace(boolean removeAssertJRelatedElementsFromStackTrace)",
        "info" : "MethodDeclaration[23333-23792]:MethodDeclaration[18219-18678]"
      }, {
        "left" : "public static void fail(String failureMessage)",
        "right" : "public static void fail(String failureMessage)",
        "info" : "MethodDeclaration[23796-24066]:MethodDeclaration[18682-18952]"
      }, {
        "left" : "public static void fail(String failureMessage, Throwable realCause)",
        "right" : "public static void fail(String failureMessage, Throwable realCause)",
        "info" : "MethodDeclaration[24070-24376]:MethodDeclaration[18956-19262]"
      }, {
        "left" : "public static void failBecauseExceptionWasNotThrown(Class<? extends Throwable> exceptionClass)",
        "right" : "public static void failBecauseExceptionWasNotThrown(Class<? extends Throwable> exceptionClass)",
        "info" : "MethodDeclaration[24380-24813]:MethodDeclaration[19266-19699]"
      }, {
        "left" : "public static void shouldHaveThrown(Class<? extends Throwable> exceptionClass)",
        "right" : "public static void shouldHaveThrown(Class<? extends Throwable> exceptionClass)",
        "info" : "MethodDeclaration[24817-25135]:MethodDeclaration[19703-20021]"
      }, {
        "left" : "public static void setMaxLengthForSingleLineDescription(int maxLengthForSingleLineDescription)",
        "right" : "public static void setMaxLengthForSingleLineDescription(int maxLengthForSingleLineDescription)",
        "info" : "MethodDeclaration[25139-26453]:MethodDeclaration[20025-21339]"
      }, {
        "left" : "public static <T> Properties<T> extractProperty(String propertyName, Class<T> propertyType)",
        "right" : "public static <T> Properties<T> extractProperty(String propertyName, Class<T> propertyType)",
        "info" : "MethodDeclaration[26778-28128]:MethodDeclaration[21664-23014]"
      }, {
        "left" : "public static Properties<Object> extractProperty(String propertyName)",
        "right" : "public static Properties<Object> extractProperty(String propertyName)",
        "info" : "MethodDeclaration[28132-29702]:MethodDeclaration[23018-24588]"
      }, {
        "left" : "public static Tuple tuple(Object... values)",
        "right" : "public static Tuple tuple(Object... values)",
        "info" : "MethodDeclaration[29706-30070]:MethodDeclaration[24592-24956]"
      }, {
        "left" : "public static void setAllowExtractingPrivateFields(boolean allowExtractingPrivateFields)",
        "right" : "public static void setAllowExtractingPrivateFields(boolean allowExtractingPrivateFields)",
        "info" : "MethodDeclaration[30074-30752]:MethodDeclaration[24960-25638]"
      }, {
        "left" : "public static void setAllowComparingPrivateFields(boolean allowComparingPrivateFields)",
        "right" : "public static void setAllowComparingPrivateFields(boolean allowComparingPrivateFields)",
        "info" : "MethodDeclaration[30756-31616]:MethodDeclaration[25642-26502]"
      }, {
        "left" : "public static <K, V> MapEntry<K, V> entry(K key, V value)",
        "right" : "public static <K, V> MapEntry<K, V> entry(K key, V value)",
        "info" : "MethodDeclaration[31943-32606]:MethodDeclaration[26829-27492]"
      }, {
        "left" : "public static Index atIndex(int index)",
        "right" : "public static Index atIndex(int index)",
        "info" : "MethodDeclaration[32610-33145]:MethodDeclaration[27496-28031]"
      }, {
        "left" : "public static Offset<Double> offset(Double value)",
        "right" : "public static Offset<Double> offset(Double value)",
        "info" : "MethodDeclaration[33149-33439]:MethodDeclaration[28035-28325]"
      }, {
        "left" : "public static Offset<Float> offset(Float value)",
        "right" : "public static Offset<Float> offset(Float value)",
        "info" : "MethodDeclaration[33443-33733]:MethodDeclaration[28329-28619]"
      }, {
        "left" : "public static Offset<Double> within(Double value)",
        "right" : "public static Offset<Double> within(Double value)",
        "info" : "MethodDeclaration[33737-34045]:MethodDeclaration[28623-28931]"
      }, {
        "left" : "public static Offset<Float> within(Float value)",
        "right" : "public static Offset<Float> within(Float value)",
        "info" : "MethodDeclaration[34049-34357]:MethodDeclaration[28935-29243]"
      }, {
        "left" : "public static Offset<BigDecimal> within(BigDecimal value)",
        "right" : "public static Offset<BigDecimal> within(BigDecimal value)",
        "info" : "MethodDeclaration[34361-34737]:MethodDeclaration[29247-29623]"
      }, {
        "left" : "public static Offset<Byte> within(Byte value)",
        "right" : "public static Offset<Byte> within(Byte value)",
        "info" : "MethodDeclaration[34741-35072]:MethodDeclaration[29627-29958]"
      }, {
        "left" : "public static Offset<Integer> within(Integer value)",
        "right" : "public static Offset<Integer> within(Integer value)",
        "info" : "MethodDeclaration[35076-35398]:MethodDeclaration[29962-30284]"
      }, {
        "left" : "public static Offset<Short> within(Short value)",
        "right" : "public static Offset<Short> within(Short value)",
        "info" : "MethodDeclaration[35402-35718]:MethodDeclaration[30288-30604]"
      }, {
        "left" : "public static Offset<Long> within(Long value)",
        "right" : "public static Offset<Long> within(Long value)",
        "info" : "MethodDeclaration[35722-36036]:MethodDeclaration[30608-30922]"
      }, {
        "left" : "public static Percentage withinPercentage(Double value)",
        "right" : "public static Percentage withinPercentage(Double value)",
        "info" : "MethodDeclaration[36040-36430]:MethodDeclaration[30926-31316]"
      }, {
        "left" : "public static Percentage withinPercentage(Integer value)",
        "right" : "public static Percentage withinPercentage(Integer value)",
        "info" : "MethodDeclaration[36434-36820]:MethodDeclaration[31320-31706]"
      }, {
        "left" : "public static Percentage withinPercentage(Long value)",
        "right" : "public static Percentage withinPercentage(Long value)",
        "info" : "MethodDeclaration[36824-37211]:MethodDeclaration[31710-32097]"
      }, {
        "left" : "public static <T> Condition<T> allOf(Condition<? super T>... conditions)",
        "right" : "public static <T> Condition<T> allOf(Condition<? super T>... conditions)",
        "info" : "MethodDeclaration[37535-38044]:MethodDeclaration[32421-32930]"
      }, {
        "left" : "public static <T> Condition<T> allOf(Iterable<? extends Condition<? super T>> conditions)",
        "right" : "public static <T> Condition<T> allOf(Iterable<? extends Condition<? super T>> conditions)",
        "info" : "MethodDeclaration[38048-38565]:MethodDeclaration[32934-33451]"
      }, {
        "left" : "public static <T> Condition<T> anyOf(Condition<? super T>... conditions)",
        "right" : "public static <T> Condition<T> anyOf(Condition<? super T>... conditions)",
        "info" : "MethodDeclaration[38569-39113]:MethodDeclaration[33455-33999]"
      }, {
        "left" : "public static <T> Condition<T> anyOf(Iterable<? extends Condition<? super T>> conditions)",
        "right" : "public static <T> Condition<T> anyOf(Iterable<? extends Condition<? super T>> conditions)",
        "info" : "MethodDeclaration[39117-39634]:MethodDeclaration[34003-34520]"
      }, {
        "left" : "public static <T> DoesNotHave<T> doesNotHave(Condition<? super T> condition)",
        "right" : "public static <T> DoesNotHave<T> doesNotHave(Condition<? super T> condition)",
        "info" : "MethodDeclaration[39638-39926]:MethodDeclaration[34524-34812]"
      }, {
        "left" : "public static <T> Not<T> not(Condition<? super T> condition)",
        "right" : "public static <T> Not<T> not(Condition<? super T> condition)",
        "info" : "MethodDeclaration[39930-40178]:MethodDeclaration[34816-35064]"
      }, {
        "left" : "public static <E> Filters<E> filter(E[] array)",
        "right" : "public static <E> Filters<E> filter(E[] array)",
        "info" : "MethodDeclaration[40491-41418]:MethodDeclaration[35377-36304]"
      }, {
        "left" : "public static <E> Filters<E> filter(Iterable<E> iterableToFilter)",
        "right" : "public static <E> Filters<E> filter(Iterable<E> iterableToFilter)",
        "info" : "MethodDeclaration[41422-42359]:MethodDeclaration[36308-37245]"
      }, {
        "left" : "public static InFilter in(Object... values)",
        "right" : "public static InFilter in(Object... values)",
        "info" : "MethodDeclaration[42363-43395]:MethodDeclaration[37249-38281]"
      }, {
        "left" : "public static NotInFilter notIn(Object... valuesNotToMatch)",
        "right" : "public static NotInFilter notIn(Object... valuesNotToMatch)",
        "info" : "MethodDeclaration[43399-44491]:MethodDeclaration[38285-39377]"
      }, {
        "left" : "public static NotFilter not(Object valueNotToMatch)",
        "right" : "public static NotFilter not(Object valueNotToMatch)",
        "info" : "MethodDeclaration[44495-45534]:MethodDeclaration[39381-40420]"
      }, {
        "left" : "public static String contentOf(File file, Charset charset)",
        "right" : "public static String contentOf(File file, Charset charset)",
        "info" : "MethodDeclaration[45845-46483]:MethodDeclaration[40731-41369]"
      }, {
        "left" : "public static String contentOf(File file, String charsetName)",
        "right" : "public static String contentOf(File file, String charsetName)",
        "info" : "MethodDeclaration[46487-47176]:MethodDeclaration[41373-42062]"
      }, {
        "left" : "public static String contentOf(File file)",
        "right" : "public static String contentOf(File file)",
        "info" : "MethodDeclaration[47180-47736]:MethodDeclaration[42066-42622]"
      }, {
        "left" : "public static List<String> linesOf(File file)",
        "right" : "public static List<String> linesOf(File file)",
        "info" : "MethodDeclaration[47740-48241]:MethodDeclaration[42626-43127]"
      }, {
        "left" : "public static List<String> linesOf(File file, Charset charset)",
        "right" : "public static List<String> linesOf(File file, Charset charset)",
        "info" : "MethodDeclaration[48245-48762]:MethodDeclaration[43131-43648]"
      }, {
        "left" : "public static List<String> linesOf(File file, String charsetName)",
        "right" : "public static List<String> linesOf(File file, String charsetName)",
        "info" : "MethodDeclaration[48766-49306]:MethodDeclaration[43652-44192]"
      }, {
        "left" : "public static String contentOf(URL url, Charset charset)",
        "right" : "public static String contentOf(URL url, Charset charset)",
        "info" : "MethodDeclaration[49625-50160]:MethodDeclaration[44511-45046]"
      }, {
        "left" : "public static String contentOf(URL url, String charsetName)",
        "right" : "public static String contentOf(URL url, String charsetName)",
        "info" : "MethodDeclaration[50164-50750]:MethodDeclaration[45050-45636]"
      }, {
        "left" : "public static String contentOf(URL url)",
        "right" : "public static String contentOf(URL url)",
        "info" : "MethodDeclaration[50754-51222]:MethodDeclaration[45640-46108]"
      }, {
        "left" : "public static List<String> linesOf(URL url)",
        "right" : "public static List<String> linesOf(URL url)",
        "info" : "MethodDeclaration[51226-51720]:MethodDeclaration[46112-46606]"
      }, {
        "left" : "public static List<String> linesOf(URL url, Charset charset)",
        "right" : "public static List<String> linesOf(URL url, Charset charset)",
        "info" : "MethodDeclaration[51724-52234]:MethodDeclaration[46610-47120]"
      }, {
        "left" : "public static List<String> linesOf(URL url, String charsetName)",
        "right" : "public static List<String> linesOf(URL url, String charsetName)",
        "info" : "MethodDeclaration[52238-52771]:MethodDeclaration[47124-47657]"
      }, {
        "left" : "public static void setLenientDateParsing(boolean value)",
        "right" : "public static void setLenientDateParsing(boolean value)",
        "info" : "MethodDeclaration[53093-54628]:MethodDeclaration[47979-49514]"
      }, {
        "left" : "public static void registerCustomDateFormat(DateFormat userCustomDateFormat)",
        "right" : "public static void registerCustomDateFormat(DateFormat userCustomDateFormat)",
        "info" : "MethodDeclaration[54632-56870]:MethodDeclaration[49518-51756]"
      }, {
        "left" : "public static void registerCustomDateFormat(String userCustomDateFormatPattern)",
        "right" : "public static void registerCustomDateFormat(String userCustomDateFormatPattern)",
        "info" : "MethodDeclaration[56874-59059]:MethodDeclaration[51760-53945]"
      }, {
        "left" : "public static void useDefaultDateFormatsOnly()",
        "right" : "public static void useDefaultDateFormatsOnly()",
        "info" : "MethodDeclaration[59063-59957]:MethodDeclaration[53949-54843]"
      } ],
      "mappings" : [
 {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[3542-3590]:Block[3638-3686]"
      }, {
        "left" : "return new OptionalAssert<>(optional);",
        "right" : "return new OptionalAssert<>(optional);",
        "info" : "ReturnStatement[3548-3586]:ReturnStatement[3644-3682]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[3841-3899]:Block[3937-3995]"
      }, {
        "left" : "return new OptionalDoubleAssert(optionalDouble);",
        "right" : "return new OptionalDoubleAssert(optionalDouble);",
        "info" : "ReturnStatement[3847-3895]:ReturnStatement[3943-3991]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[4135-4187]:Block[4231-4283]"
      }, {
        "left" : "return new OptionalIntAssert(optionalInt);",
        "right" : "return new OptionalIntAssert(optionalInt);",
        "info" : "ReturnStatement[4141-4183]:ReturnStatement[4237-4279]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[4427-4481]:Block[4523-4577]"
      }, {
        "left" : "return new OptionalLongAssert(optionalLong);",
        "right" : "return new OptionalLongAssert(optionalLong);",
        "info" : "ReturnStatement[4433-4477]:ReturnStatement[4529-4573]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[4724-4770]:Block[4820-4866]"
      }, {
        "left" : "return new BigDecimalAssert(actual);",
        "right" : "return new BigDecimalAssert(actual);",
        "info" : "ReturnStatement[4730-4766]:ReturnStatement[4826-4862]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[4992-5031]:Block[5088-5127]"
      }, {
        "left" : "return new UriAssert(actual);",
        "right" : "return new UriAssert(actual);",
        "info" : "ReturnStatement[4998-5027]:ReturnStatement[5094-5123]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[5253-5292]:Block[5349-5388]"
      }, {
        "left" : "return new UrlAssert(actual);",
        "right" : "return new UrlAssert(actual);",
        "info" : "ReturnStatement[5259-5288]:ReturnStatement[5355-5384]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[5526-5569]:Block[5622-5665]"
      }, {
        "left" : "return new BooleanAssert(actual);",
        "right" : "return new BooleanAssert(actual);",
        "info" : "ReturnStatement[5532-5565]:ReturnStatement[5628-5661]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[5803-5846]:Block[5899-5942]"
      }, {
        "left" : "return new BooleanAssert(actual);",
        "right" : "return new BooleanAssert(actual);",
        "info" : "ReturnStatement[5809-5842]:ReturnStatement[5905-5938]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[6092-6140]:Block[6188-6236]"
      }, {
        "left" : "return new BooleanArrayAssert(actual);",
        "right" : "return new BooleanArrayAssert(actual);",
        "info" : "ReturnStatement[6098-6136]:ReturnStatement[6194-6232]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[6365-6405]:Block[6461-6501]"
      }, {
        "left" : "return new ByteAssert(actual);",
        "right" : "return new ByteAssert(actual);",
        "info" : "ReturnStatement[6371-6401]:ReturnStatement[6467-6497]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[6630-6670]:Block[6726-6766]"
      }, {
        "left" : "return new ByteAssert(actual);",
        "right" : "return new ByteAssert(actual);",
        "info" : "ReturnStatement[6636-6666]:ReturnStatement[6732-6762]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[6907-6952]:Block[7003-7048]"
      }, {
        "left" : "return new ByteArrayAssert(actual);",
        "right" : "return new ByteArrayAssert(actual);",
        "info" : "ReturnStatement[6913-6948]:ReturnStatement[7009-7044]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[7187-7232]:Block[7283-7328]"
      }, {
        "left" : "return new CharacterAssert(actual);",
        "right" : "return new CharacterAssert(actual);",
        "info" : "ReturnStatement[7193-7228]:ReturnStatement[7289-7324]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[7469-7514]:Block[7565-7610]"
      }, {
        "left" : "return new CharArrayAssert(actual);",
        "right" : "return new CharArrayAssert(actual);",
        "info" : "ReturnStatement[7475-7510]:ReturnStatement[7571-7606]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[7754-7799]:Block[7850-7895]"
      }, {
        "left" : "return new CharacterAssert(actual);",
        "right" : "return new CharacterAssert(actual);",
        "info" : "ReturnStatement[7760-7795]:ReturnStatement[7856-7891]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[8029-8070]:Block[8125-8166]"
      }, {
        "left" : "return new ClassAssert(actual);",
        "right" : "return new ClassAssert(actual);",
        "info" : "ReturnStatement[8035-8066]:ReturnStatement[8131-8162]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[9658-9700]:Block[8397-8439]"
      }, {
        "left" : "return new DoubleAssert(actual);",
        "right" : "return new DoubleAssert(actual);",
        "info" : "ReturnStatement[9664-9696]:ReturnStatement[8403-8435]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[9931-9973]:Block[8670-8712]"
      }, {
        "left" : "return new DoubleAssert(actual);",
        "right" : "return new DoubleAssert(actual);",
        "info" : "ReturnStatement[9937-9969]:ReturnStatement[8676-8708]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[10216-10263]:Block[8955-9002]"
      }, {
        "left" : "return new DoubleArrayAssert(actual);",
        "right" : "return new DoubleArrayAssert(actual);",
        "info" : "ReturnStatement[10222-10259]:ReturnStatement[8961-8998]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[10488-10528]:Block[9227-9267]"
      }, {
        "left" : "return new FileAssert(actual);",
        "right" : "return new FileAssert(actual);",
        "info" : "ReturnStatement[10494-10524]:ReturnStatement[9233-9263]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[11046-11093]:Block[9536-9583]"
      }, {
        "left" : "return new InputStreamAssert(actual);",
        "right" : "return new InputStreamAssert(actual);",
        "info" : "ReturnStatement[11052-11089]:ReturnStatement[9542-9579]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[11321-11362]:Block[9811-9852]"
      }, {
        "left" : "return new FloatAssert(actual);",
        "right" : "return new FloatAssert(actual);",
        "info" : "ReturnStatement[11327-11358]:ReturnStatement[9817-9848]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[11590-11631]:Block[10080-10121]"
      }, {
        "left" : "return new FloatAssert(actual);",
        "right" : "return new FloatAssert(actual);",
        "info" : "ReturnStatement[11596-11627]:ReturnStatement[10086-10117]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[11871-11917]:Block[10361-10407]"
      }, {
        "left" : "return new FloatArrayAssert(actual);",
        "right" : "return new FloatArrayAssert(actual);",
        "info" : "ReturnStatement[11877-11913]:ReturnStatement[10367-10403]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[12147-12190]:Block[10637-10680]"
      }, {
        "left" : "return new IntegerAssert(actual);",
        "right" : "return new IntegerAssert(actual);",
        "info" : "ReturnStatement[12153-12186]:ReturnStatement[10643-10676]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[12424-12468]:Block[10914-10958]"
      }, {
        "left" : "return new IntArrayAssert(actual);",
        "right" : "return new IntArrayAssert(actual);",
        "info" : "ReturnStatement[12430-12464]:ReturnStatement[10920-10954]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[12702-12745]:Block[11192-11235]"
      }, {
        "left" : "return new IntegerAssert(actual);",
        "right" : "return new IntegerAssert(actual);",
        "info" : "ReturnStatement[12708-12741]:ReturnStatement[11198-11231]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[13286-13326]:Block[11460-11500]"
      }, {
        "left" : "return new LongAssert(actual);",
        "right" : "return new LongAssert(actual);",
        "info" : "ReturnStatement[13292-13322]:ReturnStatement[11466-11496]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[13551-13591]:Block[11725-11765]"
      }, {
        "left" : "return new LongAssert(actual);",
        "right" : "return new LongAssert(actual);",
        "info" : "ReturnStatement[13557-13587]:ReturnStatement[11731-11761]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[13828-13873]:Block[12002-12047]"
      }, {
        "left" : "return new LongArrayAssert(actual);",
        "right" : "return new LongArrayAssert(actual);",
        "info" : "ReturnStatement[13834-13869]:ReturnStatement[12008-12043]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[14106-14150]:Block[12280-12324]"
      }, {
        "left" : "return new ObjectAssert<>(actual);",
        "right" : "return new ObjectAssert<>(actual);",
        "info" : "ReturnStatement[14112-14146]:ReturnStatement[12286-12320]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[16943-16992]:Block[12569-12618]"
      }, {
        "left" : "return new ObjectArrayAssert<>(actual);",
        "right" : "return new ObjectArrayAssert<>(actual);",
        "info" : "ReturnStatement[16949-16988]:ReturnStatement[12575-12614]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[17639-17680]:Block[12846-12887]"
      }, {
        "left" : "return new ShortAssert(actual);",
        "right" : "return new ShortAssert(actual);",
        "info" : "ReturnStatement[17645-17676]:ReturnStatement[12852-12883]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[17908-17949]:Block[13115-13156]"
      }, {
        "left" : "return new ShortAssert(actual);",
        "right" : "return new ShortAssert(actual);",
        "info" : "ReturnStatement[17914-17945]:ReturnStatement[13121-13152]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[18189-18235]:Block[13396-13442]"
      }, {
        "left" : "return new ShortArrayAssert(actual);",
        "right" : "return new ShortArrayAssert(actual);",
        "info" : "ReturnStatement[18195-18231]:ReturnStatement[13402-13438]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[18801-18843]:Block[13687-13729]"
      }, {
        "left" : "return new StringAssert(actual);",
        "right" : "return new StringAssert(actual);",
        "info" : "ReturnStatement[18807-18839]:ReturnStatement[13693-13725]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[19068-19108]:Block[13954-13994]"
      }, {
        "left" : "return new DateAssert(actual);",
        "right" : "return new DateAssert(actual);",
        "info" : "ReturnStatement[19074-19104]:ReturnStatement[13960-13990]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[19358-19405]:Block[14244-14291]"
      }, {
        "left" : "return new ZonedDateTimeAssert(date);",
        "right" : "return new ZonedDateTimeAssert(date);",
        "info" : "ReturnStatement[19364-19401]:ReturnStatement[14250-14287]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[19664-19720]:Block[14550-14606]"
      }, {
        "left" : "return new LocalDateTimeAssert(localDateTime);",
        "right" : "return new LocalDateTimeAssert(localDateTime);",
        "info" : "ReturnStatement[19670-19716]:ReturnStatement[14556-14602]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[19979-20029]:Block[14865-14915]"
      }, {
        "left" : "return new OffsetDateTimeAssert(actual);",
        "right" : "return new OffsetDateTimeAssert(actual);",
        "info" : "ReturnStatement[19985-20025]:ReturnStatement[14871-14911]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[20262-20312]:Block[15148-15198]"
      }, {
        "left" : "return new OffsetTimeAssert(offsetTime);",
        "right" : "return new OffsetTimeAssert(offsetTime);",
        "info" : "ReturnStatement[20268-20308]:ReturnStatement[15154-15194]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[20552-20597]:Block[15438-15483]"
      }, {
        "left" : "return new LocalTimeAssert(actual);",
        "right" : "return new LocalTimeAssert(actual);",
        "info" : "ReturnStatement[20558-20593]:ReturnStatement[15444-15479]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[20843-20891]:Block[15729-15777]"
      }, {
        "left" : "return new LocalDateAssert(localDate);",
        "right" : "return new LocalDateAssert(localDate);",
        "info" : "ReturnStatement[20849-20887]:ReturnStatement[15735-15773]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[21159-21204]:Block[16045-16090]"
      }, {
        "left" : "return new ThrowableAssert(actual);",
        "right" : "return new ThrowableAssert(actual);",
        "info" : "ReturnStatement[21165-21200]:ReturnStatement[16051-16086]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[22019-22110]:Block[16905-16996]"
      }, {
        "left" : "return new ThrowableAssert(catchThrowable(shouldRaiseThrowable)).hasBeenThrown();",
        "right" : "return new ThrowableAssert(catchThrowable(shouldRaiseThrowable)).hasBeenThrown();",
        "info" : "ReturnStatement[22025-22106]:ReturnStatement[16911-16992]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[22954-23024]:Block[17840-17910]"
      }, {
        "left" : "return ThrowableAssert.catchThrowable(shouldRaiseThrowable);",
        "right" : "return ThrowableAssert.catchThrowable(shouldRaiseThrowable);",
        "info" : "ReturnStatement[22960-23020]:ReturnStatement[17846-17906]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[23687-23792]:Block[18573-18678]"
      }, {
        "left" : "Fail.setRemoveAssertJRelatedElementsFromStackTrace(removeAssertJRelatedElementsFromStackTrace);",
        "right" : "Fail.setRemoveAssertJRelatedElementsFromStackTrace(removeAssertJRelatedElementsFromStackTrace);",
        "info" : "ExpressionStatement[23693-23788]:ExpressionStatement[18579-18674]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[24030-24066]:Block[18916-18952]"
      }, {
        "left" : "Fail.fail(failureMessage);",
        "right" : "Fail.fail(failureMessage);",
        "info" : "ExpressionStatement[24036-24062]:ExpressionStatement[18922-18948]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[24329-24376]:Block[19215-19262]"
      }, {
        "left" : "Fail.fail(failureMessage, realCause);",
        "right" : "Fail.fail(failureMessage, realCause);",
        "info" : "ExpressionStatement[24335-24372]:ExpressionStatement[19221-19258]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[24765-24813]:Block[19651-19699]"
      }, {
        "left" : "Fail.shouldHaveThrown(exceptionClass);",
        "right" : "Fail.shouldHaveThrown(exceptionClass);",
        "info" : "ExpressionStatement[24771-24809]:ExpressionStatement[19657-19695]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[25087-25135]:Block[19973-20021]"
      }, {
        "left" : "Fail.shouldHaveThrown(exceptionClass);",
        "right" : "Fail.shouldHaveThrown(exceptionClass);",
        "info" : "ExpressionStatement[25093-25131]:ExpressionStatement[19979-20017]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[26355-26453]:Block[21241-21339]"
      }, {
        "left" : "GroupFormatUtil.setMaxLengthForSingleLineDescription(maxLengthForSingleLineDescription);",
        "right" : "GroupFormatUtil.setMaxLengthForSingleLineDescription(maxLengthForSingleLineDescription);",
        "info" : "ExpressionStatement[26361-26449]:ExpressionStatement[21247-21335]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[28056-28128]:Block[22942-23014]"
      }, {
        "left" : "return Properties.extractProperty(propertyName, propertyType);",
        "right" : "return Properties.extractProperty(propertyName, propertyType);",
        "info" : "ReturnStatement[28062-28124]:ReturnStatement[22948-23010]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[29644-29702]:Block[24530-24588]"
      }, {
        "left" : "return Properties.extractProperty(propertyName);",
        "right" : "return Properties.extractProperty(propertyName);",
        "info" : "ReturnStatement[29650-29698]:ReturnStatement[24536-24584]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[30033-30070]:Block[24919-24956]"
      }, {
        "left" : "return Tuple.tuple(values);",
        "right" : "return Tuple.tuple(values);",
        "info" : "ReturnStatement[30039-30066]:ReturnStatement[24925-24952]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[30659-30752]:Block[25545-25638]"
      }, {
        "left" : "FieldSupport.extraction().setAllowUsingPrivateFields(allowExtractingPrivateFields);",
        "right" : "FieldSupport.extraction().setAllowUsingPrivateFields(allowExtractingPrivateFields);",
        "info" : "ExpressionStatement[30665-30748]:ExpressionStatement[25551-25634]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[31524-31616]:Block[26410-26502]"
      }, {
        "left" : "FieldSupport.comparison().setAllowUsingPrivateFields(allowComparingPrivateFields);",
        "right" : "FieldSupport.comparison().setAllowUsingPrivateFields(allowComparingPrivateFields);",
        "info" : "ExpressionStatement[31530-31612]:ExpressionStatement[26416-26498]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[32562-32606]:Block[27448-27492]"
      }, {
        "left" : "return MapEntry.entry(key, value);",
        "right" : "return MapEntry.entry(key, value);",
        "info" : "ReturnStatement[32568-32602]:ReturnStatement[27454-27488]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[33107-33145]:Block[27993-28031]"
      }, {
        "left" : "return Index.atIndex(index);",
        "right" : "return Index.atIndex(index);",
        "info" : "ReturnStatement[33113-33141]:ReturnStatement[27999-28027]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[33401-33439]:Block[28287-28325]"
      }, {
        "left" : "return Offset.offset(value);",
        "right" : "return Offset.offset(value);",
        "info" : "ReturnStatement[33407-33435]:ReturnStatement[28293-28321]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[33695-33733]:Block[28581-28619]"
      }, {
        "left" : "return Offset.offset(value);",
        "right" : "return Offset.offset(value);",
        "info" : "ReturnStatement[33701-33729]:ReturnStatement[28587-28615]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[34007-34045]:Block[28893-28931]"
      }, {
        "left" : "return Offset.offset(value);",
        "right" : "return Offset.offset(value);",
        "info" : "ReturnStatement[34013-34041]:ReturnStatement[28899-28927]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[34319-34357]:Block[29205-29243]"
      }, {
        "left" : "return Offset.offset(value);",
        "right" : "return Offset.offset(value);",
        "info" : "ReturnStatement[34325-34353]:ReturnStatement[29211-29239]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[34699-34737]:Block[29585-29623]"
      }, {
        "left" : "return Offset.offset(value);",
        "right" : "return Offset.offset(value);",
        "info" : "ReturnStatement[34705-34733]:ReturnStatement[29591-29619]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[35034-35072]:Block[29920-29958]"
      }, {
        "left" : "return Offset.offset(value);",
        "right" : "return Offset.offset(value);",
        "info" : "ReturnStatement[35040-35068]:ReturnStatement[29926-29954]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[35360-35398]:Block[30246-30284]"
      }, {
        "left" : "return Offset.offset(value);",
        "right" : "return Offset.offset(value);",
        "info" : "ReturnStatement[35366-35394]:ReturnStatement[30252-30280]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[35680-35718]:Block[30566-30604]"
      }, {
        "left" : "return Offset.offset(value);",
        "right" : "return Offset.offset(value);",
        "info" : "ReturnStatement[35686-35714]:ReturnStatement[30572-30600]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[35998-36036]:Block[30884-30922]"
      }, {
        "left" : "return Offset.offset(value);",
        "right" : "return Offset.offset(value);",
        "info" : "ReturnStatement[36004-36032]:ReturnStatement[30890-30918]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[36391-36430]:Block[31277-31316]"
      }, {
        "left" : "return withPercentage(value);",
        "right" : "return withPercentage(value);",
        "info" : "ReturnStatement[36397-36426]:ReturnStatement[31283-31312]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[36781-36820]:Block[31667-31706]"
      }, {
        "left" : "return withPercentage(value);",
        "right" : "return withPercentage(value);",
        "info" : "ReturnStatement[36787-36816]:ReturnStatement[31673-31702]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[37172-37211]:Block[32058-32097]"
      }, {
        "left" : "return withPercentage(value);",
        "right" : "return withPercentage(value);",
        "info" : "ReturnStatement[37178-37207]:ReturnStatement[32064-32093]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[38003-38044]:Block[32889-32930]"
      }, {
        "left" : "return AllOf.allOf(conditions);",
        "right" : "return AllOf.allOf(conditions);",
        "info" : "ReturnStatement[38009-38040]:ReturnStatement[32895-32926]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[38524-38565]:Block[33410-33451]"
      }, {
        "left" : "return AllOf.allOf(conditions);",
        "right" : "return AllOf.allOf(conditions);",
        "info" : "ReturnStatement[38530-38561]:ReturnStatement[33416-33447]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[39072-39113]:Block[33958-33999]"
      }, {
        "left" : "return AnyOf.anyOf(conditions);",
        "right" : "return AnyOf.anyOf(conditions);",
        "info" : "ReturnStatement[39078-39109]:ReturnStatement[33964-33995]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[39593-39634]:Block[34479-34520]"
      }, {
        "left" : "return AnyOf.anyOf(conditions);",
        "right" : "return AnyOf.anyOf(conditions);",
        "info" : "ReturnStatement[39599-39630]:ReturnStatement[34485-34516]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[39874-39926]:Block[34760-34812]"
      }, {
        "left" : "return DoesNotHave.doesNotHave(condition);",
        "right" : "return DoesNotHave.doesNotHave(condition);",
        "info" : "ReturnStatement[39880-39922]:ReturnStatement[34766-34808]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[40142-40178]:Block[35028-35064]"
      }, {
        "left" : "return Not.not(condition);",
        "right" : "return Not.not(condition);",
        "info" : "ReturnStatement[40148-40174]:ReturnStatement[35034-35060]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[41379-41418]:Block[36265-36304]"
      }, {
        "left" : "return Filters.filter(array);",
        "right" : "return Filters.filter(array);",
        "info" : "ReturnStatement[41385-41414]:ReturnStatement[36271-36300]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[42309-42359]:Block[37195-37245]"
      }, {
        "left" : "return Filters.filter(iterableToFilter);",
        "right" : "return Filters.filter(iterableToFilter);",
        "info" : "ReturnStatement[42315-42355]:ReturnStatement[37201-37241]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[43358-43395]:Block[38244-38281]"
      }, {
        "left" : "return InFilter.in(values);",
        "right" : "return InFilter.in(values);",
        "info" : "ReturnStatement[43364-43391]:ReturnStatement[38250-38277]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[44438-44491]:Block[39324-39377]"
      }, {
        "left" : "return NotInFilter.notIn(valuesNotToMatch);",
        "right" : "return NotInFilter.notIn(valuesNotToMatch);",
        "info" : "ReturnStatement[44444-44487]:ReturnStatement[39330-39373]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[45486-45534]:Block[40372-40420]"
      }, {
        "left" : "return NotFilter.not(valueNotToMatch);",
        "right" : "return NotFilter.not(valueNotToMatch);",
        "info" : "ReturnStatement[45492-45530]:ReturnStatement[40378-40416]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[46435-46483]:Block[41321-41369]"
      }, {
        "left" : "return Files.contentOf(file, charset);",
        "right" : "return Files.contentOf(file, charset);",
        "info" : "ReturnStatement[46441-46479]:ReturnStatement[41327-41365]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[47124-47176]:Block[42010-42062]"
      }, {
        "left" : "return Files.contentOf(file, charsetName);",
        "right" : "return Files.contentOf(file, charsetName);",
        "info" : "ReturnStatement[47130-47172]:ReturnStatement[42016-42058]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[47671-47736]:Block[42557-42622]"
      }, {
        "left" : "return Files.contentOf(file, Charset.defaultCharset());",
        "right" : "return Files.contentOf(file, Charset.defaultCharset());",
        "info" : "ReturnStatement[47677-47732]:ReturnStatement[42563-42618]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[48178-48241]:Block[43064-43127]"
      }, {
        "left" : "return Files.linesOf(file, Charset.defaultCharset());",
        "right" : "return Files.linesOf(file, Charset.defaultCharset());",
        "info" : "ReturnStatement[48184-48237]:ReturnStatement[43070-43123]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[48716-48762]:Block[43602-43648]"
      }, {
        "left" : "return Files.linesOf(file, charset);",
        "right" : "return Files.linesOf(file, charset);",
        "info" : "ReturnStatement[48722-48758]:ReturnStatement[43608-43644]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[49256-49306]:Block[44142-44192]"
      }, {
        "left" : "return Files.linesOf(file, charsetName);",
        "right" : "return Files.linesOf(file, charsetName);",
        "info" : "ReturnStatement[49262-49302]:ReturnStatement[44148-44188]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[50114-50160]:Block[45000-45046]"
      }, {
        "left" : "return URLs.contentOf(url, charset);",
        "right" : "return URLs.contentOf(url, charset);",
        "info" : "ReturnStatement[50120-50156]:ReturnStatement[45006-45042]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[50700-50750]:Block[45586-45636]"
      }, {
        "left" : "return URLs.contentOf(url, charsetName);",
        "right" : "return URLs.contentOf(url, charsetName);",
        "info" : "ReturnStatement[50706-50746]:ReturnStatement[45592-45632]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[51159-51222]:Block[46045-46108]"
      }, {
        "left" : "return URLs.contentOf(url, Charset.defaultCharset());",
        "right" : "return URLs.contentOf(url, Charset.defaultCharset());",
        "info" : "ReturnStatement[51165-51218]:ReturnStatement[46051-46104]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[51659-51720]:Block[46545-46606]"
      }, {
        "left" : "return URLs.linesOf(url, Charset.defaultCharset());",
        "right" : "return URLs.linesOf(url, Charset.defaultCharset());",
        "info" : "ReturnStatement[51665-51716]:ReturnStatement[46551-46602]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[52190-52234]:Block[47076-47120]"
      }, {
        "left" : "return URLs.linesOf(url, charset);",
        "right" : "return URLs.linesOf(url, charset);",
        "info" : "ReturnStatement[52196-52230]:ReturnStatement[47082-47116]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[52723-52771]:Block[47609-47657]"
      }, {
        "left" : "return URLs.linesOf(url, charsetName);",
        "right" : "return URLs.linesOf(url, charsetName);",
        "info" : "ReturnStatement[52729-52767]:ReturnStatement[47615-47653]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[54570-54628]:Block[49456-49514]"
      }, {
        "left" : "AbstractDateAssert.setLenientDateParsing(value);",
        "right" : "AbstractDateAssert.setLenientDateParsing(value);",
        "info" : "ExpressionStatement[54576-54624]:ExpressionStatement[49462-49510]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[56794-56870]:Block[51680-51756]"
      }, {
        "left" : "AbstractDateAssert.registerCustomDateFormat(userCustomDateFormat);",
        "right" : "AbstractDateAssert.registerCustomDateFormat(userCustomDateFormat);",
        "info" : "ExpressionStatement[56800-56866]:ExpressionStatement[51686-51752]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[58976-59059]:Block[53862-53945]"
      }, {
        "left" : "AbstractDateAssert.registerCustomDateFormat(userCustomDateFormatPattern);",
        "right" : "AbstractDateAssert.registerCustomDateFormat(userCustomDateFormatPattern);",
        "info" : "ExpressionStatement[58982-59055]:ExpressionStatement[53868-53941]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[59900-59957]:Block[54786-54843]"
      }, {
        "left" : "AbstractDateAssert.useDefaultDateFormatsOnly();",
        "right" : "AbstractDateAssert.useDefaultDateFormatsOnly();",
        "info" : "ExpressionStatement[59906-59953]:ExpressionStatement[54792-54839]"
      } ]
    }
  }
}