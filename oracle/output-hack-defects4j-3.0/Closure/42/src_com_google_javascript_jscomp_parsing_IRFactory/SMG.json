{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "IRFactory",
      "right" : "IRFactory",
      "info" : "TypeDeclaration[3726-46160]:TypeDeclaration[3726-46415]"
    }, {
      "left" : "static final String SUSPICIOUS_COMMENT_WARNING =\n      \"Non-JSDoc comment has annotations. \" +\n      \"Did you mean to start it with '/**'?\";",
      "right" : "static final String SUSPICIOUS_COMMENT_WARNING =\n      \"Non-JSDoc comment has annotations. \" +\n      \"Did you mean to start it with '/**'?\";",
      "info" : "FieldDeclaration[3810-3950]:FieldDeclaration[3810-3950]"
    }, {
      "left" : "private final String sourceString;",
      "right" : "private final String sourceString;",
      "info" : "FieldDeclaration[3954-3988]:FieldDeclaration[3954-3988]"
    }, {
      "left" : "private final StaticSourceFile sourceFile;",
      "right" : "private final StaticSourceFile sourceFile;",
      "info" : "FieldDeclaration[3991-4033]:FieldDeclaration[3991-4033]"
    }, {
      "left" : "private final String sourceName;",
      "right" : "private final String sourceName;",
      "info" : "FieldDeclaration[4036-4068]:FieldDeclaration[4036-4068]"
    }, {
      "left" : "private final Config config;",
      "right" : "private final Config config;",
      "info" : "FieldDeclaration[4071-4099]:FieldDeclaration[4071-4099]"
    }, {
      "left" : "private final ErrorReporter errorReporter;",
      "right" : "private final ErrorReporter errorReporter;",
      "info" : "FieldDeclaration[4102-4144]:FieldDeclaration[4102-4144]"
    }, {
      "left" : "private final TransformDispatcher transformDispatcher;",
      "right" : "private final TransformDispatcher transformDispatcher;",
      "info" : "FieldDeclaration[4147-4201]:FieldDeclaration[4147-4201]"
    }, {
      "left" : "private final Set<String> ALLOWED_DIRECTIVES = Sets.newHashSet(\"use strict\");",
      "right" : "private final Set<String> ALLOWED_DIRECTIVES = Sets.newHashSet(\"use strict\");",
      "info" : "FieldDeclaration[4239-4316]:FieldDeclaration[4239-4316]"
    }, {
      "left" : "private static final Set<String> ES5_RESERVED_KEYWORDS =\n      ImmutableSet.of(\n          // From Section 7.6.1.2\n          \"class\", \"const\", \"enum\", \"export\", \"extends\", \"import\", \"super\");",
      "right" : "private static final Set<String> ES5_RESERVED_KEYWORDS =\n      ImmutableSet.of(\n          // From Section 7.6.1.2\n          \"class\", \"const\", \"enum\", \"export\", \"extends\", \"import\", \"super\");",
      "info" : "FieldDeclaration[4320-4510]:FieldDeclaration[4320-4510]"
    }, {
      "left" : "private static final Set<String> ES5_STRICT_RESERVED_KEYWORDS =\n      ImmutableSet.of(\n          // From Section 7.6.1.2\n          \"class\", \"const\", \"enum\", \"export\", \"extends\", \"import\", \"super\",\n          \"implements\", \"interface\", \"let\", \"package\", \"private\", \"protected\",\n          \"public\", \"static\", \"yield\");",
      "right" : "private static final Set<String> ES5_STRICT_RESERVED_KEYWORDS =\n      ImmutableSet.of(\n          // From Section 7.6.1.2\n          \"class\", \"const\", \"enum\", \"export\", \"extends\", \"import\", \"super\",\n          \"implements\", \"interface\", \"let\", \"package\", \"private\", \"protected\",\n          \"public\", \"static\", \"yield\");",
      "info" : "FieldDeclaration[4513-4828]:FieldDeclaration[4513-4828]"
    }, {
      "left" : "private final Set<String> reservedKeywords;",
      "right" : "private final Set<String> reservedKeywords;",
      "info" : "FieldDeclaration[4832-4875]:FieldDeclaration[4832-4875]"
    }, {
      "left" : "private final Set<Comment> parsedComments = Sets.newHashSet();",
      "right" : "private final Set<Comment> parsedComments = Sets.newHashSet();",
      "info" : "FieldDeclaration[4878-4940]:FieldDeclaration[4878-4940]"
    }, {
      "left" : "Node rootNodeJsDocHolder = new Node(Token.SCRIPT);",
      "right" : "Node rootNodeJsDocHolder = new Node(Token.SCRIPT);",
      "info" : "FieldDeclaration[5069-5119]:FieldDeclaration[5069-5119]"
    }, {
      "left" : "Node.FileLevelJsDocBuilder fileLevelJsDocBuilder =\n      rootNodeJsDocHolder.getJsDocBuilderForNode();",
      "right" : "Node.FileLevelJsDocBuilder fileLevelJsDocBuilder =\n      rootNodeJsDocHolder.getJsDocBuilderForNode();",
      "info" : "FieldDeclaration[5122-5224]:FieldDeclaration[5122-5224]"
    }, {
      "left" : "JSDocInfo fileOverviewInfo = null;",
      "right" : "JSDocInfo fileOverviewInfo = null;",
      "info" : "FieldDeclaration[5227-5261]:FieldDeclaration[5227-5261]"
    }, {
      "left" : "private Node templateNode;",
      "right" : "private Node templateNode;",
      "info" : "FieldDeclaration[5383-5409]:FieldDeclaration[5383-5409]"
    }, {
      "left" : "private IRFactory(String sourceString,\n                    StaticSourceFile sourceFile,\n                    Config config,\n                    ErrorReporter errorReporter)",
      "right" : "private IRFactory(String sourceString,\n                    StaticSourceFile sourceFile,\n                    Config config,\n                    ErrorReporter errorReporter)",
      "info" : "MethodDeclaration[5492-6556]:MethodDeclaration[5492-6556]"
    }, {
      "left" : "private Node createTemplateNode()",
      "right" : "private Node createTemplateNode()",
      "info" : "MethodDeclaration[6792-6996]:MethodDeclaration[6792-6996]"
    }, {
      "left" : "public static Node transformTree(AstRoot node,\n                                   StaticSourceFile sourceFile,\n                                   String sourceString,\n                                   Config config,\n                                   ErrorReporter errorReporter)",
      "right" : "public static Node transformTree(AstRoot node,\n                                   StaticSourceFile sourceFile,\n                                   String sourceString,\n                                   Config config,\n                                   ErrorReporter errorReporter)",
      "info" : "MethodDeclaration[7000-7923]:MethodDeclaration[7000-7923]"
    }, {
      "left" : "private void setFileOverviewJsDoc(Node irNode)",
      "right" : "private void setFileOverviewJsDoc(Node irNode)",
      "info" : "MethodDeclaration[7927-8652]:MethodDeclaration[7927-8652]"
    }, {
      "left" : "private Node transformBlock(AstNode node)",
      "right" : "private Node transformBlock(AstNode node)",
      "info" : "MethodDeclaration[8656-9141]:MethodDeclaration[8656-9141]"
    }, {
      "left" : "private void handleBlockComment(Comment comment)",
      "right" : "private void handleBlockComment(Comment comment)",
      "info" : "MethodDeclaration[9145-9540]:MethodDeclaration[9145-9540]"
    }, {
      "left" : "private boolean handlePossibleFileOverviewJsDoc(\n      JsDocInfoParser jsDocParser)",
      "right" : "private boolean handlePossibleFileOverviewJsDoc(\n      JsDocInfoParser jsDocParser)",
      "info" : "MethodDeclaration[9544-9887]:MethodDeclaration[9544-9887]"
    }, {
      "left" : "private void handlePossibleFileOverviewJsDoc(Comment comment, Node irNode)",
      "right" : "private void handlePossibleFileOverviewJsDoc(Comment comment, Node irNode)",
      "info" : "MethodDeclaration[9891-10128]:MethodDeclaration[9891-10128]"
    }, {
      "left" : "private JSDocInfo handleJsDoc(AstNode node, Node irNode)",
      "right" : "private JSDocInfo handleJsDoc(AstNode node, Node irNode)",
      "info" : "MethodDeclaration[10132-10527]:MethodDeclaration[10132-10527]"
    }, {
      "left" : "private Node transform(AstNode node)",
      "right" : "private Node transform(AstNode node)",
      "info" : "MethodDeclaration[10531-10790]:MethodDeclaration[10531-10790]"
    }, {
      "left" : "private Node transformNameAsString(Name node)",
      "right" : "private Node transformNameAsString(Name node)",
      "info" : "MethodDeclaration[10794-11086]:MethodDeclaration[10794-11086]"
    }, {
      "left" : "private Node transformNumberAsString(NumberLiteral literalNode)",
      "right" : "private Node transformNumberAsString(NumberLiteral literalNode)",
      "info" : "MethodDeclaration[11090-11425]:MethodDeclaration[11090-11425]"
    }, {
      "left" : "private static String getStringValue(double value)",
      "right" : "private static String getStringValue(double value)",
      "info" : "MethodDeclaration[11429-11681]:MethodDeclaration[11429-11681]"
    }, {
      "left" : "private void setSourceInfo(Node irNode, AstNode node)",
      "right" : "private void setSourceInfo(Node irNode, AstNode node)",
      "info" : "MethodDeclaration[11685-12216]:MethodDeclaration[11685-12216]"
    }, {
      "left" : "private JsDocInfoParser createJsDocInfoParser(Comment node, Node irNode)",
      "right" : "private JsDocInfoParser createJsDocInfoParser(Comment node, Node irNode)",
      "info" : "MethodDeclaration[12220-13454]:MethodDeclaration[12220-13454]"
    }, {
      "left" : "private void maybeSetLengthFrom(Node node, AstNode source)",
      "right" : "private void maybeSetLengthFrom(Node node, AstNode source)",
      "info" : "MethodDeclaration[13512-13652]:MethodDeclaration[13512-13652]"
    }, {
      "left" : "private int position2charno(int position)",
      "right" : "private int position2charno(int position)",
      "info" : "MethodDeclaration[13656-13925]:MethodDeclaration[13656-13925]"
    }, {
      "left" : "private Node justTransform(AstNode node)",
      "right" : "private Node justTransform(AstNode node)",
      "info" : "MethodDeclaration[13929-14021]:MethodDeclaration[13929-14021]"
    }, {
      "left" : "TransformDispatcher",
      "right" : "TransformDispatcher",
      "info" : "TypeDeclaration[14025-37563]:TypeDeclaration[14025-37818]"
    }, {
      "left" : "private Node processGeneric(\n        com.google.javascript.rhino.head.Node n)",
      "right" : "private Node processGeneric(\n        com.google.javascript.rhino.head.Node n)",
      "info" : "MethodDeclaration[14098-14388]:MethodDeclaration[14098-14388]"
    }, {
      "left" : "private Node transformAsString(AstNode n)",
      "right" : "private Node transformAsString(AstNode n)",
      "info" : "MethodDeclaration[14394-15303]:MethodDeclaration[14394-15303]"
    }, {
      "left" : "Node processArrayLiteral(ArrayLiteral literalNode)",
      "right" : "Node processArrayLiteral(ArrayLiteral literalNode)",
      "info" : "MethodDeclaration[15309-15674]:MethodDeclaration[15309-15674]"
    }, {
      "left" : "Node processAssignment(Assignment assignmentNode)",
      "right" : "Node processAssignment(Assignment assignmentNode)",
      "info" : "MethodDeclaration[15680-16056]:MethodDeclaration[15680-16056]"
    }, {
      "left" : "Node processAstRoot(AstRoot rootNode)",
      "right" : "Node processAstRoot(AstRoot rootNode)",
      "info" : "MethodDeclaration[16062-16343]:MethodDeclaration[16062-16343]"
    }, {
      "left" : "private void parseDirectives(Node node)",
      "right" : "private void parseDirectives(Node node)",
      "info" : "MethodDeclaration[16349-17200]:MethodDeclaration[16349-17200]"
    }, {
      "left" : "private boolean isDirective(Node n)",
      "right" : "private boolean isDirective(Node n)",
      "info" : "MethodDeclaration[17206-17471]:MethodDeclaration[17206-17471]"
    }, {
      "left" : "Node processBlock(Block blockNode)",
      "right" : "Node processBlock(Block blockNode)",
      "info" : "MethodDeclaration[17477-17573]:MethodDeclaration[17477-17573]"
    }, {
      "left" : "Node processBreakStatement(BreakStatement statementNode)",
      "right" : "Node processBreakStatement(BreakStatement statementNode)",
      "info" : "MethodDeclaration[17579-17968]:MethodDeclaration[17579-17968]"
    }, {
      "left" : "Node processCatchClause(CatchClause clauseNode)",
      "right" : "Node processCatchClause(CatchClause clauseNode)",
      "info" : "MethodDeclaration[17974-18462]:MethodDeclaration[17974-18462]"
    }, {
      "left" : "Node processConditionalExpression(ConditionalExpression exprNode)",
      "right" : "Node processConditionalExpression(ConditionalExpression exprNode)",
      "info" : "MethodDeclaration[18468-18754]:MethodDeclaration[18468-18754]"
    }, {
      "left" : "Node processContinueStatement(ContinueStatement statementNode)",
      "right" : "Node processContinueStatement(ContinueStatement statementNode)",
      "info" : "MethodDeclaration[18760-19148]:MethodDeclaration[18760-19148]"
    }, {
      "left" : "Node processDoLoop(DoLoop loopNode)",
      "right" : "Node processDoLoop(DoLoop loopNode)",
      "info" : "MethodDeclaration[19154-19346]:MethodDeclaration[19154-19346]"
    }, {
      "left" : "Node processElementGet(ElementGet getNode)",
      "right" : "Node processElementGet(ElementGet getNode)",
      "info" : "MethodDeclaration[19352-19549]:MethodDeclaration[19352-19549]"
    }, {
      "left" : "Node processEmptyExpression(EmptyExpression exprNode)",
      "right" : "Node processEmptyExpression(EmptyExpression exprNode)",
      "info" : "MethodDeclaration[19555-19689]:MethodDeclaration[19555-19689]"
    }, {
      "left" : "Node processExpressionStatement(ExpressionStatement statementNode)",
      "right" : "Node processExpressionStatement(ExpressionStatement statementNode)",
      "info" : "MethodDeclaration[19695-19943]:MethodDeclaration[19695-19943]"
    }, {
      "left" : "Node processForInLoop(ForInLoop loopNode)",
      "right" : "Node processForInLoop(ForInLoop loopNode)",
      "info" : "MethodDeclaration[19949-20267]:MethodDeclaration[19949-20522]"
    }, {
      "left" : "Node processForLoop(ForLoop loopNode)",
      "right" : "Node processForLoop(ForLoop loopNode)",
      "info" : "MethodDeclaration[20273-20603]:MethodDeclaration[20528-20858]"
    }, {
      "left" : "Node processFunctionCall(FunctionCall callNode)",
      "right" : "Node processFunctionCall(FunctionCall callNode)",
      "info" : "MethodDeclaration[20609-21088]:MethodDeclaration[20864-21343]"
    }, {
      "left" : "Node processFunctionNode(FunctionNode functionNode)",
      "right" : "Node processFunctionNode(FunctionNode functionNode)",
      "info" : "MethodDeclaration[21094-23591]:MethodDeclaration[21349-23846]"
    }, {
      "left" : "Node processIfStatement(IfStatement statementNode)",
      "right" : "Node processIfStatement(IfStatement statementNode)",
      "info" : "MethodDeclaration[23597-23996]:MethodDeclaration[23852-24251]"
    }, {
      "left" : "Node processInfixExpression(InfixExpression exprNode)",
      "right" : "Node processInfixExpression(InfixExpression exprNode)",
      "info" : "MethodDeclaration[24002-24400]:MethodDeclaration[24257-24655]"
    }, {
      "left" : "Node processKeywordLiteral(KeywordLiteral literalNode)",
      "right" : "Node processKeywordLiteral(KeywordLiteral literalNode)",
      "info" : "MethodDeclaration[24406-24547]:MethodDeclaration[24661-24802]"
    }, {
      "left" : "Node processLabel(Label labelNode)",
      "right" : "Node processLabel(Label labelNode)",
      "info" : "MethodDeclaration[24553-24676]:MethodDeclaration[24808-24931]"
    }, {
      "left" : "Node processLabeledStatement(LabeledStatement statementNode)",
      "right" : "Node processLabeledStatement(LabeledStatement statementNode)",
      "info" : "MethodDeclaration[24682-25403]:MethodDeclaration[24937-25658]"
    }, {
      "left" : "Node processName(Name nameNode)",
      "right" : "Node processName(Name nameNode)",
      "info" : "MethodDeclaration[25409-25505]:MethodDeclaration[25664-25760]"
    }, {
      "left" : "Node processName(Name nameNode, boolean asString)",
      "right" : "Node processName(Name nameNode, boolean asString)",
      "info" : "MethodDeclaration[25511-25962]:MethodDeclaration[25766-26217]"
    }, {
      "left" : "private boolean isReservedKeyword(String identifier)",
      "right" : "private boolean isReservedKeyword(String identifier)",
      "info" : "MethodDeclaration[25968-26151]:MethodDeclaration[26223-26406]"
    }, {
      "left" : "Node processNewExpression(NewExpression exprNode)",
      "right" : "Node processNewExpression(NewExpression exprNode)",
      "info" : "MethodDeclaration[26157-26272]:MethodDeclaration[26412-26527]"
    }, {
      "left" : "Node processNumberLiteral(NumberLiteral literalNode)",
      "right" : "Node processNumberLiteral(NumberLiteral literalNode)",
      "info" : "MethodDeclaration[26278-26405]:MethodDeclaration[26533-26660]"
    }, {
      "left" : "Node processObjectLiteral(ObjectLiteral literalNode)",
      "right" : "Node processObjectLiteral(ObjectLiteral literalNode)",
      "info" : "MethodDeclaration[26411-27634]:MethodDeclaration[26666-27889]"
    }, {
      "left" : "Node getFnParamNode(Node fnNode)",
      "right" : "Node getFnParamNode(Node fnNode)",
      "info" : "MethodDeclaration[27640-27957]:MethodDeclaration[27895-28212]"
    }, {
      "left" : "Node processObjectProperty(ObjectProperty propertyNode)",
      "right" : "Node processObjectProperty(ObjectProperty propertyNode)",
      "info" : "MethodDeclaration[27963-28091]:MethodDeclaration[28218-28346]"
    }, {
      "left" : "Node processParenthesizedExpression(ParenthesizedExpression exprNode)",
      "right" : "Node processParenthesizedExpression(ParenthesizedExpression exprNode)",
      "info" : "MethodDeclaration[28097-28321]:MethodDeclaration[28352-28576]"
    }, {
      "left" : "Node processPropertyGet(PropertyGet getNode)",
      "right" : "Node processPropertyGet(PropertyGet getNode)",
      "info" : "MethodDeclaration[28327-28719]:MethodDeclaration[28582-28974]"
    }, {
      "left" : "Node processRegExpLiteral(RegExpLiteral literalNode)",
      "right" : "Node processRegExpLiteral(RegExpLiteral literalNode)",
      "info" : "MethodDeclaration[28725-29468]:MethodDeclaration[28980-29723]"
    }, {
      "left" : "Node processReturnStatement(ReturnStatement statementNode)",
      "right" : "Node processReturnStatement(ReturnStatement statementNode)",
      "info" : "MethodDeclaration[29474-29746]:MethodDeclaration[29729-30001]"
    }, {
      "left" : "Node processScope(Scope scopeNode)",
      "right" : "Node processScope(Scope scopeNode)",
      "info" : "MethodDeclaration[29752-29848]:MethodDeclaration[30007-30103]"
    }, {
      "left" : "Node processStringLiteral(StringLiteral literalNode)",
      "right" : "Node processStringLiteral(StringLiteral literalNode)",
      "info" : "MethodDeclaration[29854-31116]:MethodDeclaration[30109-31371]"
    }, {
      "left" : "Node processSwitchCase(SwitchCase caseNode)",
      "right" : "Node processSwitchCase(SwitchCase caseNode)",
      "info" : "MethodDeclaration[31122-31893]:MethodDeclaration[31377-32148]"
    }, {
      "left" : "Node processSwitchStatement(SwitchStatement statementNode)",
      "right" : "Node processSwitchStatement(SwitchStatement statementNode)",
      "info" : "MethodDeclaration[31899-32201]:MethodDeclaration[32154-32456]"
    }, {
      "left" : "Node processThrowStatement(ThrowStatement statementNode)",
      "right" : "Node processThrowStatement(ThrowStatement statementNode)",
      "info" : "MethodDeclaration[32207-32372]:MethodDeclaration[32462-32627]"
    }, {
      "left" : "Node processTryStatement(TryStatement statementNode)",
      "right" : "Node processTryStatement(TryStatement statementNode)",
      "info" : "MethodDeclaration[32378-33557]:MethodDeclaration[32633-33812]"
    }, {
      "left" : "Node processUnaryExpression(UnaryExpression exprNode)",
      "right" : "Node processUnaryExpression(UnaryExpression exprNode)",
      "info" : "MethodDeclaration[33563-34825]:MethodDeclaration[33818-35080]"
    }, {
      "left" : "private boolean validAssignmentTarget(Node target)",
      "right" : "private boolean validAssignmentTarget(Node target)",
      "info" : "MethodDeclaration[34831-35055]:MethodDeclaration[35086-35310]"
    }, {
      "left" : "Node processVariableDeclaration(VariableDeclaration declarationNode)",
      "right" : "Node processVariableDeclaration(VariableDeclaration declarationNode)",
      "info" : "MethodDeclaration[35061-35518]:MethodDeclaration[35316-35773]"
    }, {
      "left" : "Node processVariableInitializer(VariableInitializer initializerNode)",
      "right" : "Node processVariableInitializer(VariableInitializer initializerNode)",
      "info" : "MethodDeclaration[35524-35865]:MethodDeclaration[35779-36120]"
    }, {
      "left" : "Node processWhileLoop(WhileLoop loopNode)",
      "right" : "Node processWhileLoop(WhileLoop loopNode)",
      "info" : "MethodDeclaration[35871-36072]:MethodDeclaration[36126-36327]"
    }, {
      "left" : "Node processWithStatement(WithStatement statementNode)",
      "right" : "Node processWithStatement(WithStatement statementNode)",
      "info" : "MethodDeclaration[36078-36307]:MethodDeclaration[36333-36562]"
    }, {
      "left" : "Node processIllegalToken(AstNode node)",
      "right" : "Node processIllegalToken(AstNode node)",
      "info" : "MethodDeclaration[36313-36620]:MethodDeclaration[36568-36875]"
    }, {
      "left" : "void reportDestructuringAssign(AstNode node)",
      "right" : "void reportDestructuringAssign(AstNode node)",
      "info" : "MethodDeclaration[36626-36811]:MethodDeclaration[36881-37066]"
    }, {
      "left" : "void reportGetter(AstNode node)",
      "right" : "void reportGetter(AstNode node)",
      "info" : "MethodDeclaration[36817-37001]:MethodDeclaration[37072-37256]"
    }, {
      "left" : "void reportSetter(AstNode node)",
      "right" : "void reportSetter(AstNode node)",
      "info" : "MethodDeclaration[37007-37191]:MethodDeclaration[37262-37446]"
    }, {
      "left" : "void reportGetterParam(AstNode node)",
      "right" : "void reportGetterParam(AstNode node)",
      "info" : "MethodDeclaration[37197-37371]:MethodDeclaration[37452-37626]"
    }, {
      "left" : "void reportSetterParam(AstNode node)",
      "right" : "void reportSetterParam(AstNode node)",
      "info" : "MethodDeclaration[37377-37559]:MethodDeclaration[37632-37814]"
    }, {
      "left" : "private static int transformTokenType(int token)",
      "right" : "private static int transformTokenType(int token)",
      "info" : "MethodDeclaration[37567-45231]:MethodDeclaration[37822-45486]"
    }, {
      "left" : "private Node newNode(int type)",
      "right" : "private Node newNode(int type)",
      "info" : "MethodDeclaration[45307-45399]:MethodDeclaration[45562-45654]"
    }, {
      "left" : "private Node newNode(int type, Node child1)",
      "right" : "private Node newNode(int type, Node child1)",
      "info" : "MethodDeclaration[45403-45516]:MethodDeclaration[45658-45771]"
    }, {
      "left" : "private Node newNode(int type, Node child1, Node child2)",
      "right" : "private Node newNode(int type, Node child1, Node child2)",
      "info" : "MethodDeclaration[45520-45654]:MethodDeclaration[45775-45909]"
    }, {
      "left" : "private Node newNode(int type, Node child1, Node child2, Node child3)",
      "right" : "private Node newNode(int type, Node child1, Node child2, Node child3)",
      "info" : "MethodDeclaration[45658-45813]:MethodDeclaration[45913-46068]"
    }, {
      "left" : "private Node newStringNode(String value)",
      "right" : "private Node newStringNode(String value)",
      "info" : "MethodDeclaration[45817-45921]:MethodDeclaration[46072-46176]"
    }, {
      "left" : "private Node newStringNode(int type, String value)",
      "right" : "private Node newStringNode(int type, String value)",
      "info" : "MethodDeclaration[45925-46050]:MethodDeclaration[46180-46305]"
    }, {
      "left" : "private Node newNumberNode(Double value)",
      "right" : "private Node newNumberNode(Double value)",
      "info" : "MethodDeclaration[46054-46158]:MethodDeclaration[46309-46413]"
    } ],
    "mappings" : [
 {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[5492-5499]:Modifier[5492-5499]"
    }, {
      "left" : "IRFactory",
      "right" : "IRFactory",
      "info" : "SimpleName[5500-5509]:SimpleName[5500-5509]"
    }, {
      "left" : "String sourceString",
      "right" : "String sourceString",
      "info" : "SingleVariableDeclaration[5510-5529]:SingleVariableDeclaration[5510-5529]"
    }, {
      "left" : "StaticSourceFile sourceFile",
      "right" : "StaticSourceFile sourceFile",
      "info" : "SingleVariableDeclaration[5551-5578]:SingleVariableDeclaration[5551-5578]"
    }, {
      "left" : "Config config",
      "right" : "Config config",
      "info" : "SingleVariableDeclaration[5600-5613]:SingleVariableDeclaration[5600-5613]"
    }, {
      "left" : "ErrorReporter errorReporter",
      "right" : "ErrorReporter errorReporter",
      "info" : "SingleVariableDeclaration[5635-5662]:SingleVariableDeclaration[5635-5662]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5664-6556]:Block[5664-6556]"
    }, {
      "left" : "this.sourceString = sourceString;",
      "right" : "this.sourceString = sourceString;",
      "info" : "ExpressionStatement[5670-5703]:ExpressionStatement[5670-5703]"
    }, {
      "left" : "this.sourceFile = sourceFile;",
      "right" : "this.sourceFile = sourceFile;",
      "info" : "ExpressionStatement[5708-5737]:ExpressionStatement[5708-5737]"
    }, {
      "left" : "this.sourceName = sourceFile == null ? null : sourceFile.getName();",
      "right" : "this.sourceName = sourceFile == null ? null : sourceFile.getName();",
      "info" : "ExpressionStatement[5788-5855]:ExpressionStatement[5788-5855]"
    }, {
      "left" : "this.config = config;",
      "right" : "this.config = config;",
      "info" : "ExpressionStatement[5861-5882]:ExpressionStatement[5861-5882]"
    }, {
      "left" : "this.errorReporter = errorReporter;",
      "right" : "this.errorReporter = errorReporter;",
      "info" : "ExpressionStatement[5887-5922]:ExpressionStatement[5887-5922]"
    }, {
      "left" : "this.transformDispatcher = new TransformDispatcher();",
      "right" : "this.transformDispatcher = new TransformDispatcher();",
      "info" : "ExpressionStatement[5927-5980]:ExpressionStatement[5927-5980]"
    }, {
      "left" : "this.templateNode = createTemplateNode();",
      "right" : "this.templateNode = createTemplateNode();",
      "info" : "ExpressionStatement[6065-6106]:ExpressionStatement[6065-6106]"
    }, {
      "left" : "switch (config.languageMode) {\n      case ECMASCRIPT3:\n        // Reserved words are handled by the Rhino parser.\n        reservedKeywords = null;\n        break;\n      case ECMASCRIPT5:\n        reservedKeywords = ES5_RESERVED_KEYWORDS;\n        break;\n      case ECMASCRIPT5_STRICT:\n        reservedKeywords = ES5_STRICT_RESERVED_KEYWORDS;\n        break;\n      default:\n        throw new IllegalStateException(\"unknown language mode\");\n    }",
      "right" : "switch (config.languageMode) {\n      case ECMASCRIPT3:\n        // Reserved words are handled by the Rhino parser.\n        reservedKeywords = null;\n        break;\n      case ECMASCRIPT5:\n        reservedKeywords = ES5_RESERVED_KEYWORDS;\n        break;\n      case ECMASCRIPT5_STRICT:\n        reservedKeywords = ES5_STRICT_RESERVED_KEYWORDS;\n        break;\n      default:\n        throw new IllegalStateException(\"unknown language mode\");\n    }",
      "info" : "SwitchStatement[6112-6552]:SwitchStatement[6112-6552]"
    }, {
      "left" : "case ECMASCRIPT3:",
      "right" : "case ECMASCRIPT3:",
      "info" : "SwitchCase[6149-6166]:SwitchCase[6149-6166]"
    }, {
      "left" : "reservedKeywords = null;",
      "right" : "reservedKeywords = null;",
      "info" : "ExpressionStatement[6234-6258]:ExpressionStatement[6234-6258]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[6267-6273]:BreakStatement[6267-6273]"
    }, {
      "left" : "case ECMASCRIPT5:",
      "right" : "case ECMASCRIPT5:",
      "info" : "SwitchCase[6280-6297]:SwitchCase[6280-6297]"
    }, {
      "left" : "reservedKeywords = ES5_RESERVED_KEYWORDS;",
      "right" : "reservedKeywords = ES5_RESERVED_KEYWORDS;",
      "info" : "ExpressionStatement[6306-6347]:ExpressionStatement[6306-6347]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[6356-6362]:BreakStatement[6356-6362]"
    }, {
      "left" : "case ECMASCRIPT5_STRICT:",
      "right" : "case ECMASCRIPT5_STRICT:",
      "info" : "SwitchCase[6369-6393]:SwitchCase[6369-6393]"
    }, {
      "left" : "reservedKeywords = ES5_STRICT_RESERVED_KEYWORDS;",
      "right" : "reservedKeywords = ES5_STRICT_RESERVED_KEYWORDS;",
      "info" : "ExpressionStatement[6402-6450]:ExpressionStatement[6402-6450]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[6459-6465]:BreakStatement[6459-6465]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[6472-6480]:SwitchCase[6472-6480]"
    }, {
      "left" : "throw new IllegalStateException(\"unknown language mode\");",
      "right" : "throw new IllegalStateException(\"unknown language mode\");",
      "info" : "ThrowStatement[6489-6546]:ThrowStatement[6489-6546]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[6792-6799]:Modifier[6792-6799]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[6800-6804]:SimpleType[6800-6804]"
    }, {
      "left" : "createTemplateNode",
      "right" : "createTemplateNode",
      "info" : "SimpleName[6805-6823]:SimpleName[6805-6823]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6826-6996]:Block[6826-6996]"
    }, {
      "left" : "Node templateNode = new Node(Token.SCRIPT);",
      "right" : "Node templateNode = new Node(Token.SCRIPT);",
      "info" : "VariableDeclarationStatement[6874-6917]:VariableDeclarationStatement[6874-6917]"
    }, {
      "left" : "templateNode.setStaticSourceFile(sourceFile);",
      "right" : "templateNode.setStaticSourceFile(sourceFile);",
      "info" : "ExpressionStatement[6922-6967]:ExpressionStatement[6922-6967]"
    }, {
      "left" : "return templateNode;",
      "right" : "return templateNode;",
      "info" : "ReturnStatement[6972-6992]:ReturnStatement[6972-6992]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7000-7006]:Modifier[7000-7006]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[7007-7013]:Modifier[7007-7013]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[7014-7018]:SimpleType[7014-7018]"
    }, {
      "left" : "transformTree",
      "right" : "transformTree",
      "info" : "SimpleName[7019-7032]:SimpleName[7019-7032]"
    }, {
      "left" : "AstRoot node",
      "right" : "AstRoot node",
      "info" : "SingleVariableDeclaration[7033-7045]:SingleVariableDeclaration[7033-7045]"
    }, {
      "left" : "StaticSourceFile sourceFile",
      "right" : "StaticSourceFile sourceFile",
      "info" : "SingleVariableDeclaration[7082-7109]:SingleVariableDeclaration[7082-7109]"
    }, {
      "left" : "String sourceString",
      "right" : "String sourceString",
      "info" : "SingleVariableDeclaration[7146-7165]:SingleVariableDeclaration[7146-7165]"
    }, {
      "left" : "Config config",
      "right" : "Config config",
      "info" : "SingleVariableDeclaration[7202-7215]:SingleVariableDeclaration[7202-7215]"
    }, {
      "left" : "ErrorReporter errorReporter",
      "right" : "ErrorReporter errorReporter",
      "info" : "SingleVariableDeclaration[7252-7279]:SingleVariableDeclaration[7252-7279]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7281-7923]:Block[7281-7923]"
    }, {
      "left" : "IRFactory irFactory = new IRFactory(sourceString, sourceFile,\n        config, errorReporter);",
      "right" : "IRFactory irFactory = new IRFactory(sourceString, sourceFile,\n        config, errorReporter);",
      "info" : "VariableDeclarationStatement[7287-7380]:VariableDeclarationStatement[7287-7380]"
    }, {
      "left" : "Node irNode = irFactory.transform(node);",
      "right" : "Node irNode = irFactory.transform(node);",
      "info" : "VariableDeclarationStatement[7385-7425]:VariableDeclarationStatement[7385-7425]"
    }, {
      "left" : "if (node.getComments() != null)",
      "right" : "if (node.getComments() != null)",
      "info" : "IfStatement[7431-7854]:IfStatement[7431-7854]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7463-7854]:Block[7463-7854]"
    }, {
      "left" : "for (Comment comment : node.getComments())",
      "right" : "for (Comment comment : node.getComments())",
      "info" : "EnhancedForStatement[7471-7848]:EnhancedForStatement[7471-7848]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7514-7848]:Block[7514-7848]"
    }, {
      "left" : "if (comment.getCommentType() == CommentType.JSDOC &&\n            !irFactory.parsedComments.contains(comment))",
      "right" : "if (comment.getCommentType() == CommentType.JSDOC &&\n            !irFactory.parsedComments.contains(comment))",
      "info" : "IfStatement[7524-7840]:IfStatement[7524-7840]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7634-7715]:Block[7634-7715]"
    }, {
      "left" : "irFactory.handlePossibleFileOverviewJsDoc(comment, irNode);",
      "right" : "irFactory.handlePossibleFileOverviewJsDoc(comment, irNode);",
      "info" : "ExpressionStatement[7646-7705]:ExpressionStatement[7646-7705]"
    }, {
      "left" : "if (comment.getCommentType() == CommentType.BLOCK_COMMENT)",
      "right" : "if (comment.getCommentType() == CommentType.BLOCK_COMMENT)",
      "info" : "IfStatement[7721-7840]:IfStatement[7721-7840]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7780-7840]:Block[7780-7840]"
    }, {
      "left" : "irFactory.handleBlockComment(comment);",
      "right" : "irFactory.handleBlockComment(comment);",
      "info" : "ExpressionStatement[7792-7830]:ExpressionStatement[7792-7830]"
    }, {
      "left" : "irFactory.setFileOverviewJsDoc(irNode);",
      "right" : "irFactory.setFileOverviewJsDoc(irNode);",
      "info" : "ExpressionStatement[7860-7899]:ExpressionStatement[7860-7899]"
    }, {
      "left" : "return irNode;",
      "right" : "return irNode;",
      "info" : "ReturnStatement[7905-7919]:ReturnStatement[7905-7919]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[7927-7934]:Modifier[7927-7934]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7935-7939]:PrimitiveType[7935-7939]"
    }, {
      "left" : "setFileOverviewJsDoc",
      "right" : "setFileOverviewJsDoc",
      "info" : "SimpleName[7940-7960]:SimpleName[7940-7960]"
    }, {
      "left" : "Node irNode",
      "right" : "Node irNode",
      "info" : "SingleVariableDeclaration[7961-7972]:SingleVariableDeclaration[7961-7972]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7974-8652]:Block[7974-8652]"
    }, {
      "left" : "JSDocInfo rootNodeJsDoc = rootNodeJsDocHolder.getJSDocInfo();",
      "right" : "JSDocInfo rootNodeJsDoc = rootNodeJsDocHolder.getJSDocInfo();",
      "info" : "VariableDeclarationStatement[8137-8198]:VariableDeclarationStatement[8137-8198]"
    }, {
      "left" : "if (rootNodeJsDoc != null)",
      "right" : "if (rootNodeJsDoc != null)",
      "info" : "IfStatement[8203-8326]:IfStatement[8203-8326]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8230-8326]:Block[8230-8326]"
    }, {
      "left" : "irNode.setJSDocInfo(rootNodeJsDoc);",
      "right" : "irNode.setJSDocInfo(rootNodeJsDoc);",
      "info" : "ExpressionStatement[8238-8273]:ExpressionStatement[8238-8273]"
    }, {
      "left" : "rootNodeJsDoc.setAssociatedNode(irNode);",
      "right" : "rootNodeJsDoc.setAssociatedNode(irNode);",
      "info" : "ExpressionStatement[8280-8320]:ExpressionStatement[8280-8320]"
    }, {
      "left" : "if (fileOverviewInfo != null)",
      "right" : "if (fileOverviewInfo != null)",
      "info" : "IfStatement[8332-8648]:IfStatement[8332-8648]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8362-8648]:Block[8362-8648]"
    }, {
      "left" : "if ((irNode.getJSDocInfo() != null) &&\n          (irNode.getJSDocInfo().getLicense() != null))",
      "right" : "if ((irNode.getJSDocInfo() != null) &&\n          (irNode.getJSDocInfo().getLicense() != null))",
      "info" : "IfStatement[8370-8547]:IfStatement[8370-8547]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8465-8547]:Block[8465-8547]"
    }, {
      "left" : "fileOverviewInfo.setLicense(irNode.getJSDocInfo().getLicense());",
      "right" : "fileOverviewInfo.setLicense(irNode.getJSDocInfo().getLicense());",
      "info" : "ExpressionStatement[8475-8539]:ExpressionStatement[8475-8539]"
    }, {
      "left" : "irNode.setJSDocInfo(fileOverviewInfo);",
      "right" : "irNode.setJSDocInfo(fileOverviewInfo);",
      "info" : "ExpressionStatement[8554-8592]:ExpressionStatement[8554-8592]"
    }, {
      "left" : "fileOverviewInfo.setAssociatedNode(irNode);",
      "right" : "fileOverviewInfo.setAssociatedNode(irNode);",
      "info" : "ExpressionStatement[8599-8642]:ExpressionStatement[8599-8642]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[8656-8663]:Modifier[8656-8663]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[8664-8668]:SimpleType[8664-8668]"
    }, {
      "left" : "transformBlock",
      "right" : "transformBlock",
      "info" : "SimpleName[8669-8683]:SimpleName[8669-8683]"
    }, {
      "left" : "AstNode node",
      "right" : "AstNode node",
      "info" : "SingleVariableDeclaration[8684-8696]:SingleVariableDeclaration[8684-8696]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8698-9141]:Block[8698-9141]"
    }, {
      "left" : "Node irNode = transform(node);",
      "right" : "Node irNode = transform(node);",
      "info" : "VariableDeclarationStatement[8704-8734]:VariableDeclarationStatement[8704-8734]"
    }, {
      "left" : "if (!irNode.isBlock())",
      "right" : "if (!irNode.isBlock())",
      "info" : "IfStatement[8739-9118]:IfStatement[8739-9118]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8762-9118]:Block[8762-9118]"
    }, {
      "left" : "if (irNode.isEmpty())",
      "right" : "if (irNode.isEmpty())",
      "info" : "IfStatement[8770-9112]:IfStatement[8770-9112]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8792-8876]:Block[8792-8876]"
    }, {
      "left" : "irNode.setType(Token.BLOCK);",
      "right" : "irNode.setType(Token.BLOCK);",
      "info" : "ExpressionStatement[8802-8830]:ExpressionStatement[8802-8830]"
    }, {
      "left" : "irNode.setWasEmptyNode(true);",
      "right" : "irNode.setWasEmptyNode(true);",
      "info" : "ExpressionStatement[8839-8868]:ExpressionStatement[8839-8868]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8882-9112]:Block[8882-9112]"
    }, {
      "left" : "Node newBlock = newNode(Token.BLOCK, irNode);",
      "right" : "Node newBlock = newNode(Token.BLOCK, irNode);",
      "info" : "VariableDeclarationStatement[8892-8937]:VariableDeclarationStatement[8892-8937]"
    }, {
      "left" : "newBlock.setLineno(irNode.getLineno());",
      "right" : "newBlock.setLineno(irNode.getLineno());",
      "info" : "ExpressionStatement[8946-8985]:ExpressionStatement[8946-8985]"
    }, {
      "left" : "newBlock.setCharno(irNode.getCharno());",
      "right" : "newBlock.setCharno(irNode.getCharno());",
      "info" : "ExpressionStatement[8994-9033]:ExpressionStatement[8994-9033]"
    }, {
      "left" : "maybeSetLengthFrom(newBlock, node);",
      "right" : "maybeSetLengthFrom(newBlock, node);",
      "info" : "ExpressionStatement[9042-9077]:ExpressionStatement[9042-9077]"
    }, {
      "left" : "irNode = newBlock;",
      "right" : "irNode = newBlock;",
      "info" : "ExpressionStatement[9086-9104]:ExpressionStatement[9086-9104]"
    }, {
      "left" : "return irNode;",
      "right" : "return irNode;",
      "info" : "ReturnStatement[9123-9137]:ReturnStatement[9123-9137]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[9233-9240]:Modifier[9233-9240]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[9241-9245]:PrimitiveType[9241-9245]"
    }, {
      "left" : "handleBlockComment",
      "right" : "handleBlockComment",
      "info" : "SimpleName[9246-9264]:SimpleName[9246-9264]"
    }, {
      "left" : "Comment comment",
      "right" : "Comment comment",
      "info" : "SingleVariableDeclaration[9265-9280]:SingleVariableDeclaration[9265-9280]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9282-9540]:Block[9282-9540]"
    }, {
      "left" : "String value = comment.getValue();",
      "right" : "String value = comment.getValue();",
      "info" : "VariableDeclarationStatement[9288-9322]:VariableDeclarationStatement[9288-9322]"
    }, {
      "left" : "if (value.indexOf(\"/* @\") != -1 ||\n        value.indexOf(\"\\n * @\") != -1)",
      "right" : "if (value.indexOf(\"/* @\") != -1 ||\n        value.indexOf(\"\\n * @\") != -1)",
      "info" : "IfStatement[9327-9536]:IfStatement[9327-9536]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9401-9536]:Block[9401-9536]"
    }, {
      "left" : "errorReporter.warning(\n          SUSPICIOUS_COMMENT_WARNING,\n          sourceName,\n          comment.getLineno(), \"\", 0);",
      "right" : "errorReporter.warning(\n          SUSPICIOUS_COMMENT_WARNING,\n          sourceName,\n          comment.getLineno(), \"\", 0);",
      "info" : "ExpressionStatement[9409-9530]:ExpressionStatement[9409-9530]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[9620-9627]:Modifier[9620-9627]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[9628-9635]:PrimitiveType[9628-9635]"
    }, {
      "left" : "handlePossibleFileOverviewJsDoc",
      "right" : "handlePossibleFileOverviewJsDoc",
      "info" : "SimpleName[9636-9667]:SimpleName[9636-9667]"
    }, {
      "left" : "JsDocInfoParser jsDocParser",
      "right" : "JsDocInfoParser jsDocParser",
      "info" : "SingleVariableDeclaration[9675-9702]:SingleVariableDeclaration[9675-9702]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9704-9887]:Block[9704-9887]"
    }, {
      "left" : "if (jsDocParser.getFileOverviewJSDocInfo() != fileOverviewInfo)",
      "right" : "if (jsDocParser.getFileOverviewJSDocInfo() != fileOverviewInfo)",
      "info" : "IfStatement[9710-9865]:IfStatement[9710-9865]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9774-9865]:Block[9774-9865]"
    }, {
      "left" : "fileOverviewInfo = jsDocParser.getFileOverviewJSDocInfo();",
      "right" : "fileOverviewInfo = jsDocParser.getFileOverviewJSDocInfo();",
      "info" : "ExpressionStatement[9782-9840]:ExpressionStatement[9782-9840]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[9847-9859]:ReturnStatement[9847-9859]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[9870-9883]:ReturnStatement[9870-9883]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[9891-9898]:Modifier[9891-9898]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[9899-9903]:PrimitiveType[9899-9903]"
    }, {
      "left" : "handlePossibleFileOverviewJsDoc",
      "right" : "handlePossibleFileOverviewJsDoc",
      "info" : "SimpleName[9904-9935]:SimpleName[9904-9935]"
    }, {
      "left" : "Comment comment",
      "right" : "Comment comment",
      "info" : "SingleVariableDeclaration[9936-9951]:SingleVariableDeclaration[9936-9951]"
    }, {
      "left" : "Node irNode",
      "right" : "Node irNode",
      "info" : "SingleVariableDeclaration[9953-9964]:SingleVariableDeclaration[9953-9964]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9966-10128]:Block[9966-10128]"
    }, {
      "left" : "JsDocInfoParser jsDocParser = createJsDocInfoParser(comment, irNode);",
      "right" : "JsDocInfoParser jsDocParser = createJsDocInfoParser(comment, irNode);",
      "info" : "VariableDeclarationStatement[9972-10041]:VariableDeclarationStatement[9972-10041]"
    }, {
      "left" : "parsedComments.add(comment);",
      "right" : "parsedComments.add(comment);",
      "info" : "ExpressionStatement[10046-10074]:ExpressionStatement[10046-10074]"
    }, {
      "left" : "handlePossibleFileOverviewJsDoc(jsDocParser);",
      "right" : "handlePossibleFileOverviewJsDoc(jsDocParser);",
      "info" : "ExpressionStatement[10079-10124]:ExpressionStatement[10079-10124]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[10132-10139]:Modifier[10132-10139]"
    }, {
      "left" : "JSDocInfo",
      "right" : "JSDocInfo",
      "info" : "SimpleType[10140-10149]:SimpleType[10140-10149]"
    }, {
      "left" : "handleJsDoc",
      "right" : "handleJsDoc",
      "info" : "SimpleName[10150-10161]:SimpleName[10150-10161]"
    }, {
      "left" : "AstNode node",
      "right" : "AstNode node",
      "info" : "SingleVariableDeclaration[10162-10174]:SingleVariableDeclaration[10162-10174]"
    }, {
      "left" : "Node irNode",
      "right" : "Node irNode",
      "info" : "SingleVariableDeclaration[10176-10187]:SingleVariableDeclaration[10176-10187]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10189-10527]:Block[10189-10527]"
    }, {
      "left" : "Comment comment = node.getJsDocNode();",
      "right" : "Comment comment = node.getJsDocNode();",
      "info" : "VariableDeclarationStatement[10195-10233]:VariableDeclarationStatement[10195-10233]"
    }, {
      "left" : "if (comment != null)",
      "right" : "if (comment != null)",
      "info" : "IfStatement[10238-10506]:IfStatement[10238-10506]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10259-10506]:Block[10259-10506]"
    }, {
      "left" : "JsDocInfoParser jsDocParser = createJsDocInfoParser(comment, irNode);",
      "right" : "JsDocInfoParser jsDocParser = createJsDocInfoParser(comment, irNode);",
      "info" : "VariableDeclarationStatement[10267-10336]:VariableDeclarationStatement[10267-10336]"
    }, {
      "left" : "parsedComments.add(comment);",
      "right" : "parsedComments.add(comment);",
      "info" : "ExpressionStatement[10343-10371]:ExpressionStatement[10343-10371]"
    }, {
      "left" : "if (!handlePossibleFileOverviewJsDoc(jsDocParser))",
      "right" : "if (!handlePossibleFileOverviewJsDoc(jsDocParser))",
      "info" : "IfStatement[10378-10500]:IfStatement[10378-10500]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10429-10500]:Block[10429-10500]"
    }, {
      "left" : "return jsDocParser.retrieveAndResetParsedJSDocInfo();",
      "right" : "return jsDocParser.retrieveAndResetParsedJSDocInfo();",
      "info" : "ReturnStatement[10439-10492]:ReturnStatement[10439-10492]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[10511-10523]:ReturnStatement[10511-10523]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[10531-10538]:Modifier[10531-10538]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[10539-10543]:SimpleType[10539-10543]"
    }, {
      "left" : "transform",
      "right" : "transform",
      "info" : "SimpleName[10544-10553]:SimpleName[10544-10553]"
    }, {
      "left" : "AstNode node",
      "right" : "AstNode node",
      "info" : "SingleVariableDeclaration[10554-10566]:SingleVariableDeclaration[10554-10566]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10568-10790]:Block[10568-10790]"
    }, {
      "left" : "Node irNode = justTransform(node);",
      "right" : "Node irNode = justTransform(node);",
      "info" : "VariableDeclarationStatement[10574-10608]:VariableDeclarationStatement[10574-10608]"
    }, {
      "left" : "JSDocInfo jsDocInfo = handleJsDoc(node, irNode);",
      "right" : "JSDocInfo jsDocInfo = handleJsDoc(node, irNode);",
      "info" : "VariableDeclarationStatement[10613-10661]:VariableDeclarationStatement[10613-10661]"
    }, {
      "left" : "if (jsDocInfo != null)",
      "right" : "if (jsDocInfo != null)",
      "info" : "IfStatement[10666-10734]:IfStatement[10666-10734]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10689-10734]:Block[10689-10734]"
    }, {
      "left" : "irNode.setJSDocInfo(jsDocInfo);",
      "right" : "irNode.setJSDocInfo(jsDocInfo);",
      "info" : "ExpressionStatement[10697-10728]:ExpressionStatement[10697-10728]"
    }, {
      "left" : "setSourceInfo(irNode, node);",
      "right" : "setSourceInfo(irNode, node);",
      "info" : "ExpressionStatement[10739-10767]:ExpressionStatement[10739-10767]"
    }, {
      "left" : "return irNode;",
      "right" : "return irNode;",
      "info" : "ReturnStatement[10772-10786]:ReturnStatement[10772-10786]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[10794-10801]:Modifier[10794-10801]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[10802-10806]:SimpleType[10802-10806]"
    }, {
      "left" : "transformNameAsString",
      "right" : "transformNameAsString",
      "info" : "SimpleName[10807-10828]:SimpleName[10807-10828]"
    }, {
      "left" : "Name node",
      "right" : "Name node",
      "info" : "SingleVariableDeclaration[10829-10838]:SingleVariableDeclaration[10829-10838]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10840-11086]:Block[10840-11086]"
    }, {
      "left" : "Node irNode = transformDispatcher.processName(node, true);",
      "right" : "Node irNode = transformDispatcher.processName(node, true);",
      "info" : "VariableDeclarationStatement[10846-10904]:VariableDeclarationStatement[10846-10904]"
    }, {
      "left" : "JSDocInfo jsDocInfo = handleJsDoc(node, irNode);",
      "right" : "JSDocInfo jsDocInfo = handleJsDoc(node, irNode);",
      "info" : "VariableDeclarationStatement[10909-10957]:VariableDeclarationStatement[10909-10957]"
    }, {
      "left" : "if (jsDocInfo != null)",
      "right" : "if (jsDocInfo != null)",
      "info" : "IfStatement[10962-11030]:IfStatement[10962-11030]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10985-11030]:Block[10985-11030]"
    }, {
      "left" : "irNode.setJSDocInfo(jsDocInfo);",
      "right" : "irNode.setJSDocInfo(jsDocInfo);",
      "info" : "ExpressionStatement[10993-11024]:ExpressionStatement[10993-11024]"
    }, {
      "left" : "setSourceInfo(irNode, node);",
      "right" : "setSourceInfo(irNode, node);",
      "info" : "ExpressionStatement[11035-11063]:ExpressionStatement[11035-11063]"
    }, {
      "left" : "return irNode;",
      "right" : "return irNode;",
      "info" : "ReturnStatement[11068-11082]:ReturnStatement[11068-11082]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[11090-11097]:Modifier[11090-11097]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[11098-11102]:SimpleType[11098-11102]"
    }, {
      "left" : "transformNumberAsString",
      "right" : "transformNumberAsString",
      "info" : "SimpleName[11103-11126]:SimpleName[11103-11126]"
    }, {
      "left" : "NumberLiteral literalNode",
      "right" : "NumberLiteral literalNode",
      "info" : "SingleVariableDeclaration[11127-11152]:SingleVariableDeclaration[11127-11152]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11154-11425]:Block[11154-11425]"
    }, {
      "left" : "Node irNode = newStringNode(getStringValue(literalNode.getNumber()));",
      "right" : "Node irNode = newStringNode(getStringValue(literalNode.getNumber()));",
      "info" : "VariableDeclarationStatement[11160-11229]:VariableDeclarationStatement[11160-11229]"
    }, {
      "left" : "JSDocInfo jsDocInfo = handleJsDoc(literalNode, irNode);",
      "right" : "JSDocInfo jsDocInfo = handleJsDoc(literalNode, irNode);",
      "info" : "VariableDeclarationStatement[11234-11289]:VariableDeclarationStatement[11234-11289]"
    }, {
      "left" : "if (jsDocInfo != null)",
      "right" : "if (jsDocInfo != null)",
      "info" : "IfStatement[11294-11362]:IfStatement[11294-11362]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11317-11362]:Block[11317-11362]"
    }, {
      "left" : "irNode.setJSDocInfo(jsDocInfo);",
      "right" : "irNode.setJSDocInfo(jsDocInfo);",
      "info" : "ExpressionStatement[11325-11356]:ExpressionStatement[11325-11356]"
    }, {
      "left" : "setSourceInfo(irNode, literalNode);",
      "right" : "setSourceInfo(irNode, literalNode);",
      "info" : "ExpressionStatement[11367-11402]:ExpressionStatement[11367-11402]"
    }, {
      "left" : "return irNode;",
      "right" : "return irNode;",
      "info" : "ReturnStatement[11407-11421]:ReturnStatement[11407-11421]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[11429-11436]:Modifier[11429-11436]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[11437-11443]:Modifier[11437-11443]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[11444-11450]:SimpleType[11444-11450]"
    }, {
      "left" : "getStringValue",
      "right" : "getStringValue",
      "info" : "SimpleName[11451-11465]:SimpleName[11451-11465]"
    }, {
      "left" : "double value",
      "right" : "double value",
      "info" : "SingleVariableDeclaration[11466-11478]:SingleVariableDeclaration[11466-11478]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11480-11681]:Block[11480-11681]"
    }, {
      "left" : "long longValue = (long) value;",
      "right" : "long longValue = (long) value;",
      "info" : "VariableDeclarationStatement[11486-11516]:VariableDeclarationStatement[11486-11516]"
    }, {
      "left" : "if (longValue == value)",
      "right" : "if (longValue == value)",
      "info" : "IfStatement[11557-11677]:IfStatement[11557-11677]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11581-11627]:Block[11581-11627]"
    }, {
      "left" : "return Long.toString(longValue);",
      "right" : "return Long.toString(longValue);",
      "info" : "ReturnStatement[11589-11621]:ReturnStatement[11589-11621]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11633-11677]:Block[11633-11677]"
    }, {
      "left" : "return Double.toString(value);",
      "right" : "return Double.toString(value);",
      "info" : "ReturnStatement[11641-11671]:ReturnStatement[11641-11671]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[11685-11692]:Modifier[11685-11692]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[11693-11697]:PrimitiveType[11693-11697]"
    }, {
      "left" : "setSourceInfo",
      "right" : "setSourceInfo",
      "info" : "SimpleName[11698-11711]:SimpleName[11698-11711]"
    }, {
      "left" : "Node irNode",
      "right" : "Node irNode",
      "info" : "SingleVariableDeclaration[11712-11723]:SingleVariableDeclaration[11712-11723]"
    }, {
      "left" : "AstNode node",
      "right" : "AstNode node",
      "info" : "SingleVariableDeclaration[11725-11737]:SingleVariableDeclaration[11725-11737]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11739-12216]:Block[11739-12216]"
    }, {
      "left" : "if (irNode.getLineno() == -1)",
      "right" : "if (irNode.getLineno() == -1)",
      "info" : "IfStatement[11745-12212]:IfStatement[11745-12212]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11775-12212]:Block[11775-12212]"
    }, {
      "left" : "int lineno = node.getLineno();",
      "right" : "int lineno = node.getLineno();",
      "info" : "VariableDeclarationStatement[12008-12038]:VariableDeclarationStatement[12008-12038]"
    }, {
      "left" : "irNode.setLineno(lineno);",
      "right" : "irNode.setLineno(lineno);",
      "info" : "ExpressionStatement[12045-12070]:ExpressionStatement[12045-12070]"
    }, {
      "left" : "int charno = position2charno(node.getAbsolutePosition());",
      "right" : "int charno = position2charno(node.getAbsolutePosition());",
      "info" : "VariableDeclarationStatement[12077-12134]:VariableDeclarationStatement[12077-12134]"
    }, {
      "left" : "irNode.setCharno(charno);",
      "right" : "irNode.setCharno(charno);",
      "info" : "ExpressionStatement[12141-12166]:ExpressionStatement[12141-12166]"
    }, {
      "left" : "maybeSetLengthFrom(irNode, node);",
      "right" : "maybeSetLengthFrom(irNode, node);",
      "info" : "ExpressionStatement[12173-12206]:ExpressionStatement[12173-12206]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[12656-12663]:Modifier[12656-12663]"
    }, {
      "left" : "JsDocInfoParser",
      "right" : "JsDocInfoParser",
      "info" : "SimpleType[12664-12679]:SimpleType[12664-12679]"
    }, {
      "left" : "createJsDocInfoParser",
      "right" : "createJsDocInfoParser",
      "info" : "SimpleName[12680-12701]:SimpleName[12680-12701]"
    }, {
      "left" : "Comment node",
      "right" : "Comment node",
      "info" : "SingleVariableDeclaration[12702-12714]:SingleVariableDeclaration[12702-12714]"
    }, {
      "left" : "Node irNode",
      "right" : "Node irNode",
      "info" : "SingleVariableDeclaration[12716-12727]:SingleVariableDeclaration[12716-12727]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12729-13454]:Block[12729-13454]"
    }, {
      "left" : "String comment = node.getValue();",
      "right" : "String comment = node.getValue();",
      "info" : "VariableDeclarationStatement[12735-12768]:VariableDeclarationStatement[12735-12768]"
    }, {
      "left" : "int lineno = node.getLineno();",
      "right" : "int lineno = node.getLineno();",
      "info" : "VariableDeclarationStatement[12773-12803]:VariableDeclarationStatement[12773-12803]"
    }, {
      "left" : "int position = node.getAbsolutePosition();",
      "right" : "int position = node.getAbsolutePosition();",
      "info" : "VariableDeclarationStatement[12808-12850]:VariableDeclarationStatement[12808-12850]"
    }, {
      "left" : "int numOpeningChars = 3;",
      "right" : "int numOpeningChars = 3;",
      "info" : "VariableDeclarationStatement[12930-12954]:VariableDeclarationStatement[12930-12954]"
    }, {
      "left" : "JsDocInfoParser jsdocParser =\n      new JsDocInfoParser(\n          new JsDocTokenStream(comment.substring(numOpeningChars),\n                               lineno,\n                               position2charno(position) + numOpeningChars),\n          node,\n          irNode,\n          config,\n          errorReporter);",
      "right" : "JsDocInfoParser jsdocParser =\n      new JsDocInfoParser(\n          new JsDocTokenStream(comment.substring(numOpeningChars),\n                               lineno,\n                               position2charno(position) + numOpeningChars),\n          node,\n          irNode,\n          config,\n          errorReporter);",
      "info" : "VariableDeclarationStatement[12959-13276]:VariableDeclarationStatement[12959-13276]"
    }, {
      "left" : "jsdocParser.setFileLevelJsDocBuilder(fileLevelJsDocBuilder);",
      "right" : "jsdocParser.setFileLevelJsDocBuilder(fileLevelJsDocBuilder);",
      "info" : "ExpressionStatement[13281-13341]:ExpressionStatement[13281-13341]"
    }, {
      "left" : "jsdocParser.setFileOverviewJSDocInfo(fileOverviewInfo);",
      "right" : "jsdocParser.setFileOverviewJSDocInfo(fileOverviewInfo);",
      "info" : "ExpressionStatement[13346-13401]:ExpressionStatement[13346-13401]"
    }, {
      "left" : "jsdocParser.parse();",
      "right" : "jsdocParser.parse();",
      "info" : "ExpressionStatement[13406-13426]:ExpressionStatement[13406-13426]"
    }, {
      "left" : "return jsdocParser;",
      "right" : "return jsdocParser;",
      "info" : "ReturnStatement[13431-13450]:ReturnStatement[13431-13450]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[13512-13519]:Modifier[13512-13519]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[13520-13524]:PrimitiveType[13520-13524]"
    }, {
      "left" : "maybeSetLengthFrom",
      "right" : "maybeSetLengthFrom",
      "info" : "SimpleName[13525-13543]:SimpleName[13525-13543]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[13544-13553]:SingleVariableDeclaration[13544-13553]"
    }, {
      "left" : "AstNode source",
      "right" : "AstNode source",
      "info" : "SingleVariableDeclaration[13555-13569]:SingleVariableDeclaration[13555-13569]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13571-13652]:Block[13571-13652]"
    }, {
      "left" : "if (config.isIdeMode)",
      "right" : "if (config.isIdeMode)",
      "info" : "IfStatement[13577-13648]:IfStatement[13577-13648]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13599-13648]:Block[13599-13648]"
    }, {
      "left" : "node.setLength(source.getLength());",
      "right" : "node.setLength(source.getLength());",
      "info" : "ExpressionStatement[13607-13642]:ExpressionStatement[13607-13642]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[13656-13663]:Modifier[13656-13663]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[13664-13667]:PrimitiveType[13664-13667]"
    }, {
      "left" : "position2charno",
      "right" : "position2charno",
      "info" : "SimpleName[13668-13683]:SimpleName[13668-13683]"
    }, {
      "left" : "int position",
      "right" : "int position",
      "info" : "SingleVariableDeclaration[13684-13696]:SingleVariableDeclaration[13684-13696]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13698-13925]:Block[13698-13925]"
    }, {
      "left" : "int lineIndex = sourceString.lastIndexOf('\\n', position);",
      "right" : "int lineIndex = sourceString.lastIndexOf('\\n', position);",
      "info" : "VariableDeclarationStatement[13704-13761]:VariableDeclarationStatement[13704-13761]"
    }, {
      "left" : "if (lineIndex == -1)",
      "right" : "if (lineIndex == -1)",
      "info" : "IfStatement[13766-13921]:IfStatement[13766-13921]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13787-13817]:Block[13787-13817]"
    }, {
      "left" : "return position;",
      "right" : "return position;",
      "info" : "ReturnStatement[13795-13811]:ReturnStatement[13795-13811]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13823-13921]:Block[13823-13921]"
    }, {
      "left" : "return position - lineIndex - 1;",
      "right" : "return position - lineIndex - 1;",
      "info" : "ReturnStatement[13883-13915]:ReturnStatement[13883-13915]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[13929-13936]:Modifier[13929-13936]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[13937-13941]:SimpleType[13937-13941]"
    }, {
      "left" : "justTransform",
      "right" : "justTransform",
      "info" : "SimpleName[13942-13955]:SimpleName[13942-13955]"
    }, {
      "left" : "AstNode node",
      "right" : "AstNode node",
      "info" : "SingleVariableDeclaration[13956-13968]:SingleVariableDeclaration[13956-13968]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13970-14021]:Block[13970-14021]"
    }, {
      "left" : "return transformDispatcher.process(node);",
      "right" : "return transformDispatcher.process(node);",
      "info" : "ReturnStatement[13976-14017]:ReturnStatement[13976-14017]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[14098-14105]:Modifier[14098-14105]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[14106-14110]:SimpleType[14106-14110]"
    }, {
      "left" : "processGeneric",
      "right" : "processGeneric",
      "info" : "SimpleName[14111-14125]:SimpleName[14111-14125]"
    }, {
      "left" : "com.google.javascript.rhino.head.Node n",
      "right" : "com.google.javascript.rhino.head.Node n",
      "info" : "SingleVariableDeclaration[14135-14174]:SingleVariableDeclaration[14135-14174]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14176-14388]:Block[14176-14388]"
    }, {
      "left" : "Node node = newNode(transformTokenType(n.getType()));",
      "right" : "Node node = newNode(transformTokenType(n.getType()));",
      "info" : "VariableDeclarationStatement[14184-14237]:VariableDeclarationStatement[14184-14237]"
    }, {
      "left" : "for (com.google.javascript.rhino.head.Node child : n)",
      "right" : "for (com.google.javascript.rhino.head.Node child : n)",
      "info" : "EnhancedForStatement[14244-14363]:EnhancedForStatement[14244-14363]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14298-14363]:Block[14298-14363]"
    }, {
      "left" : "node.addChildToBack(transform((AstNode)child));",
      "right" : "node.addChildToBack(transform((AstNode)child));",
      "info" : "ExpressionStatement[14308-14355]:ExpressionStatement[14308-14355]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[14370-14382]:ReturnStatement[14370-14382]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[14836-14843]:Modifier[14836-14843]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[14844-14848]:SimpleType[14844-14848]"
    }, {
      "left" : "transformAsString",
      "right" : "transformAsString",
      "info" : "SimpleName[14849-14866]:SimpleName[14849-14866]"
    }, {
      "left" : "AstNode n",
      "right" : "AstNode n",
      "info" : "SingleVariableDeclaration[14867-14876]:SingleVariableDeclaration[14867-14876]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14878-15303]:Block[14878-15303]"
    }, {
      "left" : "Node ret;",
      "right" : "Node ret;",
      "info" : "VariableDeclarationStatement[14886-14895]:VariableDeclarationStatement[14886-14895]"
    }, {
      "left" : "if (n instanceof Name)",
      "right" : "if (n instanceof Name)",
      "info" : "IfStatement[14902-15231]:IfStatement[14902-15231]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14925-14980]:Block[14925-14980]"
    }, {
      "left" : "ret = transformNameAsString((Name)n);",
      "right" : "ret = transformNameAsString((Name)n);",
      "info" : "ExpressionStatement[14935-14972]:ExpressionStatement[14935-14972]"
    }, {
      "left" : "if (n instanceof NumberLiteral)",
      "right" : "if (n instanceof NumberLiteral)",
      "info" : "IfStatement[14986-15231]:IfStatement[14986-15231]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15018-15136]:Block[15018-15136]"
    }, {
      "left" : "ret = transformNumberAsString((NumberLiteral)n);",
      "right" : "ret = transformNumberAsString((NumberLiteral)n);",
      "info" : "ExpressionStatement[15028-15076]:ExpressionStatement[15028-15076]"
    }, {
      "left" : "ret.putBooleanProp(Node.QUOTED_PROP, true);",
      "right" : "ret.putBooleanProp(Node.QUOTED_PROP, true);",
      "info" : "ExpressionStatement[15085-15128]:ExpressionStatement[15085-15128]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15142-15231]:Block[15142-15231]"
    }, {
      "left" : "ret = transform(n);",
      "right" : "ret = transform(n);",
      "info" : "ExpressionStatement[15152-15171]:ExpressionStatement[15152-15171]"
    }, {
      "left" : "ret.putBooleanProp(Node.QUOTED_PROP, true);",
      "right" : "ret.putBooleanProp(Node.QUOTED_PROP, true);",
      "info" : "ExpressionStatement[15180-15223]:ExpressionStatement[15180-15223]"
    }, {
      "left" : "Preconditions.checkState(ret.isString());",
      "right" : "Preconditions.checkState(ret.isString());",
      "info" : "ExpressionStatement[15238-15279]:ExpressionStatement[15238-15279]"
    }, {
      "left" : "return ret;",
      "right" : "return ret;",
      "info" : "ReturnStatement[15286-15297]:ReturnStatement[15286-15297]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[15309-15318]:MarkerAnnotation[15309-15318]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[15323-15327]:SimpleType[15323-15327]"
    }, {
      "left" : "processArrayLiteral",
      "right" : "processArrayLiteral",
      "info" : "SimpleName[15328-15347]:SimpleName[15328-15347]"
    }, {
      "left" : "ArrayLiteral literalNode",
      "right" : "ArrayLiteral literalNode",
      "info" : "SingleVariableDeclaration[15348-15372]:SingleVariableDeclaration[15348-15372]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15374-15674]:Block[15374-15674]"
    }, {
      "left" : "if (literalNode.isDestructuring())",
      "right" : "if (literalNode.isDestructuring())",
      "info" : "IfStatement[15382-15474]:IfStatement[15382-15474]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15417-15474]:Block[15417-15474]"
    }, {
      "left" : "reportDestructuringAssign(literalNode);",
      "right" : "reportDestructuringAssign(literalNode);",
      "info" : "ExpressionStatement[15427-15466]:ExpressionStatement[15427-15466]"
    }, {
      "left" : "Node node = newNode(Token.ARRAYLIT);",
      "right" : "Node node = newNode(Token.ARRAYLIT);",
      "info" : "VariableDeclarationStatement[15482-15518]:VariableDeclarationStatement[15482-15518]"
    }, {
      "left" : "for (AstNode child : literalNode.getElements())",
      "right" : "for (AstNode child : literalNode.getElements())",
      "info" : "EnhancedForStatement[15525-15649]:EnhancedForStatement[15525-15649]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15573-15649]:Block[15573-15649]"
    }, {
      "left" : "Node c = transform(child);",
      "right" : "Node c = transform(child);",
      "info" : "VariableDeclarationStatement[15583-15609]:VariableDeclarationStatement[15583-15609]"
    }, {
      "left" : "node.addChildToBack(c);",
      "right" : "node.addChildToBack(c);",
      "info" : "ExpressionStatement[15618-15641]:ExpressionStatement[15618-15641]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[15656-15668]:ReturnStatement[15656-15668]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[15680-15689]:MarkerAnnotation[15680-15689]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[15694-15698]:SimpleType[15694-15698]"
    }, {
      "left" : "processAssignment",
      "right" : "processAssignment",
      "info" : "SimpleName[15699-15716]:SimpleName[15699-15716]"
    }, {
      "left" : "Assignment assignmentNode",
      "right" : "Assignment assignmentNode",
      "info" : "SingleVariableDeclaration[15717-15742]:SingleVariableDeclaration[15717-15742]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15744-16056]:Block[15744-16056]"
    }, {
      "left" : "Node assign = processInfixExpression(assignmentNode);",
      "right" : "Node assign = processInfixExpression(assignmentNode);",
      "info" : "VariableDeclarationStatement[15752-15805]:VariableDeclarationStatement[15752-15805]"
    }, {
      "left" : "Node target = assign.getFirstChild();",
      "right" : "Node target = assign.getFirstChild();",
      "info" : "VariableDeclarationStatement[15812-15849]:VariableDeclarationStatement[15812-15849]"
    }, {
      "left" : "if (!validAssignmentTarget(target))",
      "right" : "if (!validAssignmentTarget(target))",
      "info" : "IfStatement[15856-16029]:IfStatement[15856-16029]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15892-16029]:Block[15892-16029]"
    }, {
      "left" : "errorReporter.error(\n          \"invalid assignment target\",\n          sourceName,\n          target.getLineno(), \"\", 0);",
      "right" : "errorReporter.error(\n          \"invalid assignment target\",\n          sourceName,\n          target.getLineno(), \"\", 0);",
      "info" : "ExpressionStatement[15902-16021]:ExpressionStatement[15902-16021]"
    }, {
      "left" : "return assign;",
      "right" : "return assign;",
      "info" : "ReturnStatement[16036-16050]:ReturnStatement[16036-16050]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[16062-16071]:MarkerAnnotation[16062-16071]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[16076-16080]:SimpleType[16076-16080]"
    }, {
      "left" : "processAstRoot",
      "right" : "processAstRoot",
      "info" : "SimpleName[16081-16095]:SimpleName[16081-16095]"
    }, {
      "left" : "AstRoot rootNode",
      "right" : "AstRoot rootNode",
      "info" : "SingleVariableDeclaration[16096-16112]:SingleVariableDeclaration[16096-16112]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16114-16343]:Block[16114-16343]"
    }, {
      "left" : "Node node = newNode(Token.SCRIPT);",
      "right" : "Node node = newNode(Token.SCRIPT);",
      "info" : "VariableDeclarationStatement[16122-16156]:VariableDeclarationStatement[16122-16156]"
    }, {
      "left" : "for (com.google.javascript.rhino.head.Node child : rootNode)",
      "right" : "for (com.google.javascript.rhino.head.Node child : rootNode)",
      "info" : "EnhancedForStatement[16163-16289]:EnhancedForStatement[16163-16289]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16224-16289]:Block[16224-16289]"
    }, {
      "left" : "node.addChildToBack(transform((AstNode)child));",
      "right" : "node.addChildToBack(transform((AstNode)child));",
      "info" : "ExpressionStatement[16234-16281]:ExpressionStatement[16234-16281]"
    }, {
      "left" : "parseDirectives(node);",
      "right" : "parseDirectives(node);",
      "info" : "ExpressionStatement[16296-16318]:ExpressionStatement[16296-16318]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[16325-16337]:ReturnStatement[16325-16337]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[16684-16691]:Modifier[16684-16691]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[16692-16696]:PrimitiveType[16692-16696]"
    }, {
      "left" : "parseDirectives",
      "right" : "parseDirectives",
      "info" : "SimpleName[16697-16712]:SimpleName[16697-16712]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[16713-16722]:SingleVariableDeclaration[16713-16722]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16724-17200]:Block[16724-17200]"
    }, {
      "left" : "Set<String> directives = null;",
      "right" : "Set<String> directives = null;",
      "info" : "VariableDeclarationStatement[16796-16826]:VariableDeclarationStatement[16796-16826]"
    }, {
      "left" : "while (isDirective(node.getFirstChild()))",
      "right" : "while (isDirective(node.getFirstChild()))",
      "info" : "WhileStatement[16833-17113]:WhileStatement[16833-17113]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16875-17113]:Block[16875-17113]"
    }, {
      "left" : "String directive = node.removeFirstChild().getFirstChild().getString();",
      "right" : "String directive = node.removeFirstChild().getFirstChild().getString();",
      "info" : "VariableDeclarationStatement[16885-16956]:VariableDeclarationStatement[16885-16956]"
    }, {
      "left" : "if (directives == null)",
      "right" : "if (directives == null)",
      "info" : "IfStatement[16965-17105]:IfStatement[16965-17105]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16989-17051]:Block[16989-17051]"
    }, {
      "left" : "directives = Sets.newHashSet(directive);",
      "right" : "directives = Sets.newHashSet(directive);",
      "info" : "ExpressionStatement[17001-17041]:ExpressionStatement[17001-17041]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17057-17105]:Block[17057-17105]"
    }, {
      "left" : "directives.add(directive);",
      "right" : "directives.add(directive);",
      "info" : "ExpressionStatement[17069-17095]:ExpressionStatement[17069-17095]"
    }, {
      "left" : "if (directives != null)",
      "right" : "if (directives != null)",
      "info" : "IfStatement[17121-17194]:IfStatement[17121-17194]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17145-17194]:Block[17145-17194]"
    }, {
      "left" : "node.setDirectives(directives);",
      "right" : "node.setDirectives(directives);",
      "info" : "ExpressionStatement[17155-17186]:ExpressionStatement[17155-17186]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[17206-17213]:Modifier[17206-17213]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[17214-17221]:PrimitiveType[17214-17221]"
    }, {
      "left" : "isDirective",
      "right" : "isDirective",
      "info" : "SimpleName[17222-17233]:SimpleName[17222-17233]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[17234-17240]:SingleVariableDeclaration[17234-17240]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17242-17471]:Block[17242-17471]"
    }, {
      "left" : "if (n == null)",
      "right" : "if (n == null)",
      "info" : "IfStatement[17250-17278]:IfStatement[17250-17278]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[17265-17278]:ReturnStatement[17265-17278]"
    }, {
      "left" : "int nType = n.getType();",
      "right" : "int nType = n.getType();",
      "info" : "VariableDeclarationStatement[17286-17310]:VariableDeclarationStatement[17286-17310]"
    }, {
      "left" : "return nType == Token.EXPR_RESULT &&\n          n.getFirstChild().isString() &&\n          ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());",
      "right" : "return nType == Token.EXPR_RESULT &&\n          n.getFirstChild().isString() &&\n          ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());",
      "info" : "ReturnStatement[17317-17465]:ReturnStatement[17317-17465]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[17477-17486]:MarkerAnnotation[17477-17486]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[17491-17495]:SimpleType[17491-17495]"
    }, {
      "left" : "processBlock",
      "right" : "processBlock",
      "info" : "SimpleName[17496-17508]:SimpleName[17496-17508]"
    }, {
      "left" : "Block blockNode",
      "right" : "Block blockNode",
      "info" : "SingleVariableDeclaration[17509-17524]:SingleVariableDeclaration[17509-17524]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17526-17573]:Block[17526-17573]"
    }, {
      "left" : "return processGeneric(blockNode);",
      "right" : "return processGeneric(blockNode);",
      "info" : "ReturnStatement[17534-17567]:ReturnStatement[17534-17567]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[17579-17588]:MarkerAnnotation[17579-17588]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[17593-17597]:SimpleType[17593-17597]"
    }, {
      "left" : "processBreakStatement",
      "right" : "processBreakStatement",
      "info" : "SimpleName[17598-17619]:SimpleName[17598-17619]"
    }, {
      "left" : "BreakStatement statementNode",
      "right" : "BreakStatement statementNode",
      "info" : "SingleVariableDeclaration[17620-17648]:SingleVariableDeclaration[17620-17648]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17650-17968]:Block[17650-17968]"
    }, {
      "left" : "Node node = newNode(Token.BREAK);",
      "right" : "Node node = newNode(Token.BREAK);",
      "info" : "VariableDeclarationStatement[17658-17691]:VariableDeclarationStatement[17658-17691]"
    }, {
      "left" : "if (statementNode.getBreakLabel() != null)",
      "right" : "if (statementNode.getBreakLabel() != null)",
      "info" : "IfStatement[17698-17943]:IfStatement[17698-17943]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17741-17943]:Block[17741-17943]"
    }, {
      "left" : "Node labelName = transform(statementNode.getBreakLabel());",
      "right" : "Node labelName = transform(statementNode.getBreakLabel());",
      "info" : "VariableDeclarationStatement[17751-17809]:VariableDeclarationStatement[17751-17809]"
    }, {
      "left" : "labelName.setType(Token.LABEL_NAME);",
      "right" : "labelName.setType(Token.LABEL_NAME);",
      "info" : "ExpressionStatement[17859-17895]:ExpressionStatement[17859-17895]"
    }, {
      "left" : "node.addChildToBack(labelName);",
      "right" : "node.addChildToBack(labelName);",
      "info" : "ExpressionStatement[17904-17935]:ExpressionStatement[17904-17935]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[17950-17962]:ReturnStatement[17950-17962]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[17974-17983]:MarkerAnnotation[17974-17983]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[17988-17992]:SimpleType[17988-17992]"
    }, {
      "left" : "processCatchClause",
      "right" : "processCatchClause",
      "info" : "SimpleName[17993-18011]:SimpleName[17993-18011]"
    }, {
      "left" : "CatchClause clauseNode",
      "right" : "CatchClause clauseNode",
      "info" : "SingleVariableDeclaration[18012-18034]:SingleVariableDeclaration[18012-18034]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18036-18462]:Block[18036-18462]"
    }, {
      "left" : "AstNode catchVar = clauseNode.getVarName();",
      "right" : "AstNode catchVar = clauseNode.getVarName();",
      "info" : "VariableDeclarationStatement[18044-18087]:VariableDeclarationStatement[18044-18087]"
    }, {
      "left" : "Node node = newNode(Token.CATCH, transform(catchVar));",
      "right" : "Node node = newNode(Token.CATCH, transform(catchVar));",
      "info" : "VariableDeclarationStatement[18094-18148]:VariableDeclarationStatement[18094-18148]"
    }, {
      "left" : "if (clauseNode.getCatchCondition() != null)",
      "right" : "if (clauseNode.getCatchCondition() != null)",
      "info" : "IfStatement[18155-18372]:IfStatement[18155-18372]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18199-18372]:Block[18199-18372]"
    }, {
      "left" : "errorReporter.error(\n            \"Catch clauses are not supported\",\n            sourceName,\n            clauseNode.getCatchCondition().getLineno(), \"\", 0);",
      "right" : "errorReporter.error(\n            \"Catch clauses are not supported\",\n            sourceName,\n            clauseNode.getCatchCondition().getLineno(), \"\", 0);",
      "info" : "ExpressionStatement[18209-18364]:ExpressionStatement[18209-18364]"
    }, {
      "left" : "node.addChildToBack(transformBlock(clauseNode.getBody()));",
      "right" : "node.addChildToBack(transformBlock(clauseNode.getBody()));",
      "info" : "ExpressionStatement[18379-18437]:ExpressionStatement[18379-18437]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[18444-18456]:ReturnStatement[18444-18456]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[18468-18477]:MarkerAnnotation[18468-18477]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[18482-18486]:SimpleType[18482-18486]"
    }, {
      "left" : "processConditionalExpression",
      "right" : "processConditionalExpression",
      "info" : "SimpleName[18487-18515]:SimpleName[18487-18515]"
    }, {
      "left" : "ConditionalExpression exprNode",
      "right" : "ConditionalExpression exprNode",
      "info" : "SingleVariableDeclaration[18516-18546]:SingleVariableDeclaration[18516-18546]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18548-18754]:Block[18548-18754]"
    }, {
      "left" : "return newNode(\n          Token.HOOK,\n          transform(exprNode.getTestExpression()),\n          transform(exprNode.getTrueExpression()),\n          transform(exprNode.getFalseExpression()));",
      "right" : "return newNode(\n          Token.HOOK,\n          transform(exprNode.getTestExpression()),\n          transform(exprNode.getTrueExpression()),\n          transform(exprNode.getFalseExpression()));",
      "info" : "ReturnStatement[18556-18748]:ReturnStatement[18556-18748]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[18760-18769]:MarkerAnnotation[18760-18769]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[18774-18778]:SimpleType[18774-18778]"
    }, {
      "left" : "processContinueStatement",
      "right" : "processContinueStatement",
      "info" : "SimpleName[18779-18803]:SimpleName[18779-18803]"
    }, {
      "left" : "ContinueStatement statementNode",
      "right" : "ContinueStatement statementNode",
      "info" : "SingleVariableDeclaration[18804-18835]:SingleVariableDeclaration[18804-18835]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18837-19148]:Block[18837-19148]"
    }, {
      "left" : "Node node = newNode(Token.CONTINUE);",
      "right" : "Node node = newNode(Token.CONTINUE);",
      "info" : "VariableDeclarationStatement[18845-18881]:VariableDeclarationStatement[18845-18881]"
    }, {
      "left" : "if (statementNode.getLabel() != null)",
      "right" : "if (statementNode.getLabel() != null)",
      "info" : "IfStatement[18888-19123]:IfStatement[18888-19123]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18926-19123]:Block[18926-19123]"
    }, {
      "left" : "Node labelName = transform(statementNode.getLabel());",
      "right" : "Node labelName = transform(statementNode.getLabel());",
      "info" : "VariableDeclarationStatement[18936-18989]:VariableDeclarationStatement[18936-18989]"
    }, {
      "left" : "labelName.setType(Token.LABEL_NAME);",
      "right" : "labelName.setType(Token.LABEL_NAME);",
      "info" : "ExpressionStatement[19039-19075]:ExpressionStatement[19039-19075]"
    }, {
      "left" : "node.addChildToBack(labelName);",
      "right" : "node.addChildToBack(labelName);",
      "info" : "ExpressionStatement[19084-19115]:ExpressionStatement[19084-19115]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[19130-19142]:ReturnStatement[19130-19142]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[19154-19163]:MarkerAnnotation[19154-19163]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[19168-19172]:SimpleType[19168-19172]"
    }, {
      "left" : "processDoLoop",
      "right" : "processDoLoop",
      "info" : "SimpleName[19173-19186]:SimpleName[19173-19186]"
    }, {
      "left" : "DoLoop loopNode",
      "right" : "DoLoop loopNode",
      "info" : "SingleVariableDeclaration[19187-19202]:SingleVariableDeclaration[19187-19202]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19204-19346]:Block[19204-19346]"
    }, {
      "left" : "return newNode(\n          Token.DO,\n          transformBlock(loopNode.getBody()),\n          transform(loopNode.getCondition()));",
      "right" : "return newNode(\n          Token.DO,\n          transformBlock(loopNode.getBody()),\n          transform(loopNode.getCondition()));",
      "info" : "ReturnStatement[19212-19340]:ReturnStatement[19212-19340]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[19352-19361]:MarkerAnnotation[19352-19361]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[19366-19370]:SimpleType[19366-19370]"
    }, {
      "left" : "processElementGet",
      "right" : "processElementGet",
      "info" : "SimpleName[19371-19388]:SimpleName[19371-19388]"
    }, {
      "left" : "ElementGet getNode",
      "right" : "ElementGet getNode",
      "info" : "SingleVariableDeclaration[19389-19407]:SingleVariableDeclaration[19389-19407]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19409-19549]:Block[19409-19549]"
    }, {
      "left" : "return newNode(\n          Token.GETELEM,\n          transform(getNode.getTarget()),\n          transform(getNode.getElement()));",
      "right" : "return newNode(\n          Token.GETELEM,\n          transform(getNode.getTarget()),\n          transform(getNode.getElement()));",
      "info" : "ReturnStatement[19417-19543]:ReturnStatement[19417-19543]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[19555-19564]:MarkerAnnotation[19555-19564]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[19569-19573]:SimpleType[19569-19573]"
    }, {
      "left" : "processEmptyExpression",
      "right" : "processEmptyExpression",
      "info" : "SimpleName[19574-19596]:SimpleName[19574-19596]"
    }, {
      "left" : "EmptyExpression exprNode",
      "right" : "EmptyExpression exprNode",
      "info" : "SingleVariableDeclaration[19597-19621]:SingleVariableDeclaration[19597-19621]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19623-19689]:Block[19623-19689]"
    }, {
      "left" : "Node node = newNode(Token.EMPTY);",
      "right" : "Node node = newNode(Token.EMPTY);",
      "info" : "VariableDeclarationStatement[19631-19664]:VariableDeclarationStatement[19631-19664]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[19671-19683]:ReturnStatement[19671-19683]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[19695-19704]:MarkerAnnotation[19695-19704]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[19709-19713]:SimpleType[19709-19713]"
    }, {
      "left" : "processExpressionStatement",
      "right" : "processExpressionStatement",
      "info" : "SimpleName[19714-19740]:SimpleName[19714-19740]"
    }, {
      "left" : "ExpressionStatement statementNode",
      "right" : "ExpressionStatement statementNode",
      "info" : "SingleVariableDeclaration[19741-19774]:SingleVariableDeclaration[19741-19774]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19776-19943]:Block[19776-19943]"
    }, {
      "left" : "Node node = newNode(transformTokenType(statementNode.getType()));",
      "right" : "Node node = newNode(transformTokenType(statementNode.getType()));",
      "info" : "VariableDeclarationStatement[19784-19849]:VariableDeclarationStatement[19784-19849]"
    }, {
      "left" : "node.addChildToBack(transform(statementNode.getExpression()));",
      "right" : "node.addChildToBack(transform(statementNode.getExpression()));",
      "info" : "ExpressionStatement[19856-19918]:ExpressionStatement[19856-19918]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[19925-19937]:ReturnStatement[19925-19937]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[19949-19958]:MarkerAnnotation[19949-19958]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[19963-19967]:SimpleType[19963-19967]"
    }, {
      "left" : "processForInLoop",
      "right" : "processForInLoop",
      "info" : "SimpleName[19968-19984]:SimpleName[19968-19984]"
    }, {
      "left" : "ForInLoop loopNode",
      "right" : "ForInLoop loopNode",
      "info" : "SingleVariableDeclaration[19985-20003]:SingleVariableDeclaration[19985-20003]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20005-20267]:Block[20005-20522]"
    }, {
      "left" : "return newNode(\n          Token.FOR,\n          transform(loopNode.getIterator()),\n          transform(loopNode.getIteratedObject()),\n          transformBlock(loopNode.getBody()));",
      "right" : "return newNode(\n          Token.FOR,\n          transform(loopNode.getIterator()),\n          transform(loopNode.getIteratedObject()),\n          transformBlock(loopNode.getBody()));",
      "info" : "ReturnStatement[20082-20261]:ReturnStatement[20337-20516]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[20273-20282]:MarkerAnnotation[20528-20537]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[20287-20291]:SimpleType[20542-20546]"
    }, {
      "left" : "processForLoop",
      "right" : "processForLoop",
      "info" : "SimpleName[20292-20306]:SimpleName[20547-20561]"
    }, {
      "left" : "ForLoop loopNode",
      "right" : "ForLoop loopNode",
      "info" : "SingleVariableDeclaration[20307-20323]:SingleVariableDeclaration[20562-20578]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20325-20603]:Block[20580-20858]"
    }, {
      "left" : "Node node = newNode(\n          Token.FOR,\n          transform(loopNode.getInitializer()),\n          transform(loopNode.getCondition()),\n          transform(loopNode.getIncrement()));",
      "right" : "Node node = newNode(\n          Token.FOR,\n          transform(loopNode.getInitializer()),\n          transform(loopNode.getCondition()),\n          transform(loopNode.getIncrement()));",
      "info" : "VariableDeclarationStatement[20333-20515]:VariableDeclarationStatement[20588-20770]"
    }, {
      "left" : "node.addChildToBack(transformBlock(loopNode.getBody()));",
      "right" : "node.addChildToBack(transformBlock(loopNode.getBody()));",
      "info" : "ExpressionStatement[20522-20578]:ExpressionStatement[20777-20833]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[20585-20597]:ReturnStatement[20840-20852]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[20609-20618]:MarkerAnnotation[20864-20873]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[20623-20627]:SimpleType[20878-20882]"
    }, {
      "left" : "processFunctionCall",
      "right" : "processFunctionCall",
      "info" : "SimpleName[20628-20647]:SimpleName[20883-20902]"
    }, {
      "left" : "FunctionCall callNode",
      "right" : "FunctionCall callNode",
      "info" : "SingleVariableDeclaration[20648-20669]:SingleVariableDeclaration[20903-20924]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20671-21088]:Block[20926-21343]"
    }, {
      "left" : "Node node = newNode(transformTokenType(callNode.getType()),\n                           transform(callNode.getTarget()));",
      "right" : "Node node = newNode(transformTokenType(callNode.getType()),\n                           transform(callNode.getTarget()));",
      "info" : "VariableDeclarationStatement[20679-20799]:VariableDeclarationStatement[20934-21054]"
    }, {
      "left" : "for (AstNode child : callNode.getArguments())",
      "right" : "for (AstNode child : callNode.getArguments())",
      "info" : "EnhancedForStatement[20806-20908]:EnhancedForStatement[21061-21163]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20852-20908]:Block[21107-21163]"
    }, {
      "left" : "node.addChildToBack(transform(child));",
      "right" : "node.addChildToBack(transform(child));",
      "info" : "ExpressionStatement[20862-20900]:ExpressionStatement[21117-21155]"
    }, {
      "left" : "node.setLineno(node.getFirstChild().getLineno());",
      "right" : "node.setLineno(node.getFirstChild().getLineno());",
      "info" : "ExpressionStatement[20916-20965]:ExpressionStatement[21171-21220]"
    }, {
      "left" : "node.setCharno(node.getFirstChild().getCharno());",
      "right" : "node.setCharno(node.getFirstChild().getCharno());",
      "info" : "ExpressionStatement[20972-21021]:ExpressionStatement[21227-21276]"
    }, {
      "left" : "maybeSetLengthFrom(node, callNode);",
      "right" : "maybeSetLengthFrom(node, callNode);",
      "info" : "ExpressionStatement[21028-21063]:ExpressionStatement[21283-21318]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[21070-21082]:ReturnStatement[21325-21337]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[21094-21103]:MarkerAnnotation[21349-21358]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[21108-21112]:SimpleType[21363-21367]"
    }, {
      "left" : "processFunctionNode",
      "right" : "processFunctionNode",
      "info" : "SimpleName[21113-21132]:SimpleName[21368-21387]"
    }, {
      "left" : "FunctionNode functionNode",
      "right" : "FunctionNode functionNode",
      "info" : "SingleVariableDeclaration[21133-21158]:SingleVariableDeclaration[21388-21413]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21160-23591]:Block[21415-23846]"
    }, {
      "left" : "Name name = functionNode.getFunctionName();",
      "right" : "Name name = functionNode.getFunctionName();",
      "info" : "VariableDeclarationStatement[21168-21211]:VariableDeclarationStatement[21423-21466]"
    }, {
      "left" : "Boolean isUnnamedFunction = false;",
      "right" : "Boolean isUnnamedFunction = false;",
      "info" : "VariableDeclarationStatement[21218-21252]:VariableDeclarationStatement[21473-21507]"
    }, {
      "left" : "if (name == null)",
      "right" : "if (name == null)",
      "info" : "IfStatement[21259-21790]:IfStatement[21514-22045]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21277-21790]:Block[21532-22045]"
    }, {
      "left" : "int functionType = functionNode.getFunctionType();",
      "right" : "int functionType = functionNode.getFunctionType();",
      "info" : "VariableDeclarationStatement[21287-21337]:VariableDeclarationStatement[21542-21592]"
    }, {
      "left" : "if (functionType != FunctionNode.FUNCTION_EXPRESSION)",
      "right" : "if (functionType != FunctionNode.FUNCTION_EXPRESSION)",
      "info" : "IfStatement[21346-21689]:IfStatement[21601-21944]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21400-21689]:Block[21655-21944]"
    }, {
      "left" : "errorReporter.error(\n            \"unnamed function statement\",\n            sourceName,\n            functionNode.getLineno(), \"\", 0);",
      "right" : "errorReporter.error(\n            \"unnamed function statement\",\n            sourceName,\n            functionNode.getLineno(), \"\", 0);",
      "info" : "ExpressionStatement[21412-21544]:ExpressionStatement[21667-21799]"
    }, {
      "left" : "return newNode(Token.EXPR_RESULT, Node.newNumber(0));",
      "right" : "return newNode(Token.EXPR_RESULT, Node.newNumber(0));",
      "info" : "ReturnStatement[21626-21679]:ReturnStatement[21881-21934]"
    }, {
      "left" : "name = new Name();",
      "right" : "name = new Name();",
      "info" : "ExpressionStatement[21698-21716]:ExpressionStatement[21953-21971]"
    }, {
      "left" : "name.setIdentifier(\"\");",
      "right" : "name.setIdentifier(\"\");",
      "info" : "ExpressionStatement[21725-21748]:ExpressionStatement[21980-22003]"
    }, {
      "left" : "isUnnamedFunction = true;",
      "right" : "isUnnamedFunction = true;",
      "info" : "ExpressionStatement[21757-21782]:ExpressionStatement[22012-22037]"
    }, {
      "left" : "Node node = newNode(Token.FUNCTION);",
      "right" : "Node node = newNode(Token.FUNCTION);",
      "info" : "VariableDeclarationStatement[21797-21833]:VariableDeclarationStatement[22052-22088]"
    }, {
      "left" : "Node newName = transform(name);",
      "right" : "Node newName = transform(name);",
      "info" : "VariableDeclarationStatement[21840-21871]:VariableDeclarationStatement[22095-22126]"
    }, {
      "left" : "if (isUnnamedFunction)",
      "right" : "if (isUnnamedFunction)",
      "info" : "IfStatement[21878-22433]:IfStatement[22133-22688]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21901-22433]:Block[22156-22688]"
    }, {
      "left" : "newName.setLineno(functionNode.getLineno());",
      "right" : "newName.setLineno(functionNode.getLineno());",
      "info" : "ExpressionStatement[22011-22055]:ExpressionStatement[22266-22310]"
    }, {
      "left" : "int lpColumn = functionNode.getAbsolutePosition() +\n            functionNode.getLp();",
      "right" : "int lpColumn = functionNode.getAbsolutePosition() +\n            functionNode.getLp();",
      "info" : "VariableDeclarationStatement[22243-22328]:VariableDeclarationStatement[22498-22583]"
    }, {
      "left" : "newName.setCharno(position2charno(lpColumn));",
      "right" : "newName.setCharno(position2charno(lpColumn));",
      "info" : "ExpressionStatement[22337-22382]:ExpressionStatement[22592-22637]"
    }, {
      "left" : "maybeSetLengthFrom(newName, name);",
      "right" : "maybeSetLengthFrom(newName, name);",
      "info" : "ExpressionStatement[22391-22425]:ExpressionStatement[22646-22680]"
    }, {
      "left" : "node.addChildToBack(newName);",
      "right" : "node.addChildToBack(newName);",
      "info" : "ExpressionStatement[22441-22470]:ExpressionStatement[22696-22725]"
    }, {
      "left" : "Node lp = newNode(Token.PARAM_LIST);",
      "right" : "Node lp = newNode(Token.PARAM_LIST);",
      "info" : "VariableDeclarationStatement[22477-22513]:VariableDeclarationStatement[22732-22768]"
    }, {
      "left" : "Name fnName = functionNode.getFunctionName();",
      "right" : "Name fnName = functionNode.getFunctionName();",
      "info" : "VariableDeclarationStatement[22968-23013]:VariableDeclarationStatement[23223-23268]"
    }, {
      "left" : "if (fnName != null)",
      "right" : "if (fnName != null)",
      "info" : "IfStatement[23020-23154]:IfStatement[23275-23409]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23040-23091]:Block[23295-23346]"
    }, {
      "left" : "lp.setLineno(fnName.getLineno());",
      "right" : "lp.setLineno(fnName.getLineno());",
      "info" : "ExpressionStatement[23050-23083]:ExpressionStatement[23305-23338]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23097-23154]:Block[23352-23409]"
    }, {
      "left" : "lp.setLineno(functionNode.getLineno());",
      "right" : "lp.setLineno(functionNode.getLineno());",
      "info" : "ExpressionStatement[23107-23146]:ExpressionStatement[23362-23401]"
    }, {
      "left" : "int lparenCharno = functionNode.getLp() +\n          functionNode.getAbsolutePosition();",
      "right" : "int lparenCharno = functionNode.getLp() +\n          functionNode.getAbsolutePosition();",
      "info" : "VariableDeclarationStatement[23161-23248]:VariableDeclarationStatement[23416-23503]"
    }, {
      "left" : "lp.setCharno(position2charno(lparenCharno));",
      "right" : "lp.setCharno(position2charno(lparenCharno));",
      "info" : "ExpressionStatement[23256-23300]:ExpressionStatement[23511-23555]"
    }, {
      "left" : "for (AstNode param : functionNode.getParams())",
      "right" : "for (AstNode param : functionNode.getParams())",
      "info" : "EnhancedForStatement[23307-23408]:EnhancedForStatement[23562-23663]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23354-23408]:Block[23609-23663]"
    }, {
      "left" : "lp.addChildToBack(transform(param));",
      "right" : "lp.addChildToBack(transform(param));",
      "info" : "ExpressionStatement[23364-23400]:ExpressionStatement[23619-23655]"
    }, {
      "left" : "node.addChildToBack(lp);",
      "right" : "node.addChildToBack(lp);",
      "info" : "ExpressionStatement[23415-23439]:ExpressionStatement[23670-23694]"
    }, {
      "left" : "Node bodyNode = transform(functionNode.getBody());",
      "right" : "Node bodyNode = transform(functionNode.getBody());",
      "info" : "VariableDeclarationStatement[23447-23497]:VariableDeclarationStatement[23702-23752]"
    }, {
      "left" : "parseDirectives(bodyNode);",
      "right" : "parseDirectives(bodyNode);",
      "info" : "ExpressionStatement[23504-23530]:ExpressionStatement[23759-23785]"
    }, {
      "left" : "node.addChildToBack(bodyNode);",
      "right" : "node.addChildToBack(bodyNode);",
      "info" : "ExpressionStatement[23537-23567]:ExpressionStatement[23792-23822]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[23573-23585]:ReturnStatement[23828-23840]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[23597-23606]:MarkerAnnotation[23852-23861]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[23611-23615]:SimpleType[23866-23870]"
    }, {
      "left" : "processIfStatement",
      "right" : "processIfStatement",
      "info" : "SimpleName[23616-23634]:SimpleName[23871-23889]"
    }, {
      "left" : "IfStatement statementNode",
      "right" : "IfStatement statementNode",
      "info" : "SingleVariableDeclaration[23635-23660]:SingleVariableDeclaration[23890-23915]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23662-23996]:Block[23917-24251]"
    }, {
      "left" : "Node node = newNode(Token.IF);",
      "right" : "Node node = newNode(Token.IF);",
      "info" : "VariableDeclarationStatement[23670-23700]:VariableDeclarationStatement[23925-23955]"
    }, {
      "left" : "node.addChildToBack(transform(statementNode.getCondition()));",
      "right" : "node.addChildToBack(transform(statementNode.getCondition()));",
      "info" : "ExpressionStatement[23707-23768]:ExpressionStatement[23962-24023]"
    }, {
      "left" : "node.addChildToBack(transformBlock(statementNode.getThenPart()));",
      "right" : "node.addChildToBack(transformBlock(statementNode.getThenPart()));",
      "info" : "ExpressionStatement[23775-23840]:ExpressionStatement[24030-24095]"
    }, {
      "left" : "if (statementNode.getElsePart() != null)",
      "right" : "if (statementNode.getElsePart() != null)",
      "info" : "IfStatement[23847-23971]:IfStatement[24102-24226]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23888-23971]:Block[24143-24226]"
    }, {
      "left" : "node.addChildToBack(transformBlock(statementNode.getElsePart()));",
      "right" : "node.addChildToBack(transformBlock(statementNode.getElsePart()));",
      "info" : "ExpressionStatement[23898-23963]:ExpressionStatement[24153-24218]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[23978-23990]:ReturnStatement[24233-24245]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[24002-24011]:MarkerAnnotation[24257-24266]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[24016-24020]:SimpleType[24271-24275]"
    }, {
      "left" : "processInfixExpression",
      "right" : "processInfixExpression",
      "info" : "SimpleName[24021-24043]:SimpleName[24276-24298]"
    }, {
      "left" : "InfixExpression exprNode",
      "right" : "InfixExpression exprNode",
      "info" : "SingleVariableDeclaration[24044-24068]:SingleVariableDeclaration[24299-24323]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24070-24400]:Block[24325-24655]"
    }, {
      "left" : "Node n =  newNode(\n          transformTokenType(exprNode.getType()),\n          transform(exprNode.getLeft()),\n          transform(exprNode.getRight()));",
      "right" : "Node n =  newNode(\n          transformTokenType(exprNode.getType()),\n          transform(exprNode.getLeft()),\n          transform(exprNode.getRight()));",
      "info" : "VariableDeclarationStatement[24078-24230]:VariableDeclarationStatement[24333-24485]"
    }, {
      "left" : "n.setLineno(exprNode.getLineno());",
      "right" : "n.setLineno(exprNode.getLineno());",
      "info" : "ExpressionStatement[24237-24271]:ExpressionStatement[24492-24526]"
    }, {
      "left" : "n.setCharno(position2charno(exprNode.getAbsolutePosition()));",
      "right" : "n.setCharno(position2charno(exprNode.getAbsolutePosition()));",
      "info" : "ExpressionStatement[24278-24339]:ExpressionStatement[24533-24594]"
    }, {
      "left" : "maybeSetLengthFrom(n, exprNode);",
      "right" : "maybeSetLengthFrom(n, exprNode);",
      "info" : "ExpressionStatement[24346-24378]:ExpressionStatement[24601-24633]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[24385-24394]:ReturnStatement[24640-24649]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[24406-24415]:MarkerAnnotation[24661-24670]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[24420-24424]:SimpleType[24675-24679]"
    }, {
      "left" : "processKeywordLiteral",
      "right" : "processKeywordLiteral",
      "info" : "SimpleName[24425-24446]:SimpleName[24680-24701]"
    }, {
      "left" : "KeywordLiteral literalNode",
      "right" : "KeywordLiteral literalNode",
      "info" : "SingleVariableDeclaration[24447-24473]:SingleVariableDeclaration[24702-24728]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24475-24547]:Block[24730-24802]"
    }, {
      "left" : "return newNode(transformTokenType(literalNode.getType()));",
      "right" : "return newNode(transformTokenType(literalNode.getType()));",
      "info" : "ReturnStatement[24483-24541]:ReturnStatement[24738-24796]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[24553-24562]:MarkerAnnotation[24808-24817]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[24567-24571]:SimpleType[24822-24826]"
    }, {
      "left" : "processLabel",
      "right" : "processLabel",
      "info" : "SimpleName[24572-24584]:SimpleName[24827-24839]"
    }, {
      "left" : "Label labelNode",
      "right" : "Label labelNode",
      "info" : "SingleVariableDeclaration[24585-24600]:SingleVariableDeclaration[24840-24855]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24602-24676]:Block[24857-24931]"
    }, {
      "left" : "return newStringNode(Token.LABEL_NAME, labelNode.getName());",
      "right" : "return newStringNode(Token.LABEL_NAME, labelNode.getName());",
      "info" : "ReturnStatement[24610-24670]:ReturnStatement[24865-24925]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[24682-24691]:MarkerAnnotation[24937-24946]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[24696-24700]:SimpleType[24951-24955]"
    }, {
      "left" : "processLabeledStatement",
      "right" : "processLabeledStatement",
      "info" : "SimpleName[24701-24724]:SimpleName[24956-24979]"
    }, {
      "left" : "LabeledStatement statementNode",
      "right" : "LabeledStatement statementNode",
      "info" : "SingleVariableDeclaration[24725-24755]:SingleVariableDeclaration[24980-25010]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24757-25403]:Block[25012-25658]"
    }, {
      "left" : "Node node = newNode(Token.LABEL);",
      "right" : "Node node = newNode(Token.LABEL);",
      "info" : "VariableDeclarationStatement[24765-24798]:VariableDeclarationStatement[25020-25053]"
    }, {
      "left" : "Node prev = null;",
      "right" : "Node prev = null;",
      "info" : "VariableDeclarationStatement[24805-24822]:VariableDeclarationStatement[25060-25077]"
    }, {
      "left" : "Node cur = node;",
      "right" : "Node cur = node;",
      "info" : "VariableDeclarationStatement[24829-24845]:VariableDeclarationStatement[25084-25100]"
    }, {
      "left" : "for (Label label : statementNode.getLabels())",
      "right" : "for (Label label : statementNode.getLabels())",
      "info" : "EnhancedForStatement[24852-25310]:EnhancedForStatement[25107-25565]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24898-25310]:Block[25153-25565]"
    }, {
      "left" : "if (prev != null)",
      "right" : "if (prev != null)",
      "info" : "IfStatement[24908-24973]:IfStatement[25163-25228]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24926-24973]:Block[25181-25228]"
    }, {
      "left" : "prev.addChildToBack(cur);",
      "right" : "prev.addChildToBack(cur);",
      "info" : "ExpressionStatement[24938-24963]:ExpressionStatement[25193-25218]"
    }, {
      "left" : "cur.addChildToBack(transform(label));",
      "right" : "cur.addChildToBack(transform(label));",
      "info" : "ExpressionStatement[24982-25019]:ExpressionStatement[25237-25274]"
    }, {
      "left" : "cur.setLineno(label.getLineno());",
      "right" : "cur.setLineno(label.getLineno());",
      "info" : "ExpressionStatement[25029-25062]:ExpressionStatement[25284-25317]"
    }, {
      "left" : "maybeSetLengthFrom(cur, label);",
      "right" : "maybeSetLengthFrom(cur, label);",
      "info" : "ExpressionStatement[25071-25102]:ExpressionStatement[25326-25357]"
    }, {
      "left" : "int clauseAbsolutePosition =\n            position2charno(label.getAbsolutePosition());",
      "right" : "int clauseAbsolutePosition =\n            position2charno(label.getAbsolutePosition());",
      "info" : "VariableDeclarationStatement[25112-25198]:VariableDeclarationStatement[25367-25453]"
    }, {
      "left" : "cur.setCharno(clauseAbsolutePosition);",
      "right" : "cur.setCharno(clauseAbsolutePosition);",
      "info" : "ExpressionStatement[25207-25245]:ExpressionStatement[25462-25500]"
    }, {
      "left" : "prev = cur;",
      "right" : "prev = cur;",
      "info" : "ExpressionStatement[25255-25266]:ExpressionStatement[25510-25521]"
    }, {
      "left" : "cur = newNode(Token.LABEL);",
      "right" : "cur = newNode(Token.LABEL);",
      "info" : "ExpressionStatement[25275-25302]:ExpressionStatement[25530-25557]"
    }, {
      "left" : "prev.addChildToBack(transform(statementNode.getStatement()));",
      "right" : "prev.addChildToBack(transform(statementNode.getStatement()));",
      "info" : "ExpressionStatement[25317-25378]:ExpressionStatement[25572-25633]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[25385-25397]:ReturnStatement[25640-25652]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[25409-25418]:MarkerAnnotation[25664-25673]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[25423-25427]:SimpleType[25678-25682]"
    }, {
      "left" : "processName",
      "right" : "processName",
      "info" : "SimpleName[25428-25439]:SimpleName[25683-25694]"
    }, {
      "left" : "Name nameNode",
      "right" : "Name nameNode",
      "info" : "SingleVariableDeclaration[25440-25453]:SingleVariableDeclaration[25695-25708]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25455-25505]:Block[25710-25760]"
    }, {
      "left" : "return processName(nameNode, false);",
      "right" : "return processName(nameNode, false);",
      "info" : "ReturnStatement[25463-25499]:ReturnStatement[25718-25754]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[25511-25515]:SimpleType[25766-25770]"
    }, {
      "left" : "processName",
      "right" : "processName",
      "info" : "SimpleName[25516-25527]:SimpleName[25771-25782]"
    }, {
      "left" : "Name nameNode",
      "right" : "Name nameNode",
      "info" : "SingleVariableDeclaration[25528-25541]:SingleVariableDeclaration[25783-25796]"
    }, {
      "left" : "boolean asString",
      "right" : "boolean asString",
      "info" : "SingleVariableDeclaration[25543-25559]:SingleVariableDeclaration[25798-25814]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25561-25962]:Block[25816-26217]"
    }, {
      "left" : "if (asString)",
      "right" : "if (asString)",
      "info" : "IfStatement[25569-25956]:IfStatement[25824-26211]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25583-25662]:Block[25838-25917]"
    }, {
      "left" : "return newStringNode(Token.STRING, nameNode.getIdentifier());",
      "right" : "return newStringNode(Token.STRING, nameNode.getIdentifier());",
      "info" : "ReturnStatement[25593-25654]:ReturnStatement[25848-25909]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25668-25956]:Block[25923-26211]"
    }, {
      "left" : "if (isReservedKeyword(nameNode.getIdentifier()))",
      "right" : "if (isReservedKeyword(nameNode.getIdentifier()))",
      "info" : "IfStatement[25678-25880]:IfStatement[25933-26135]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25727-25880]:Block[25982-26135]"
    }, {
      "left" : "errorReporter.error(\n            \"identifier is a reserved word\",\n            sourceName,\n            nameNode.getLineno(), \"\", 0);",
      "right" : "errorReporter.error(\n            \"identifier is a reserved word\",\n            sourceName,\n            nameNode.getLineno(), \"\", 0);",
      "info" : "ExpressionStatement[25739-25870]:ExpressionStatement[25994-26125]"
    }, {
      "left" : "return newStringNode(Token.NAME, nameNode.getIdentifier());",
      "right" : "return newStringNode(Token.NAME, nameNode.getIdentifier());",
      "info" : "ReturnStatement[25889-25948]:ReturnStatement[26144-26203]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[26011-26018]:Modifier[26266-26273]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[26019-26026]:PrimitiveType[26274-26281]"
    }, {
      "left" : "isReservedKeyword",
      "right" : "isReservedKeyword",
      "info" : "SimpleName[26027-26044]:SimpleName[26282-26299]"
    }, {
      "left" : "String identifier",
      "right" : "String identifier",
      "info" : "SingleVariableDeclaration[26045-26062]:SingleVariableDeclaration[26300-26317]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26064-26151]:Block[26319-26406]"
    }, {
      "left" : "return reservedKeywords != null && reservedKeywords.contains(identifier);",
      "right" : "return reservedKeywords != null && reservedKeywords.contains(identifier);",
      "info" : "ReturnStatement[26072-26145]:ReturnStatement[26327-26400]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[26157-26166]:MarkerAnnotation[26412-26421]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[26171-26175]:SimpleType[26426-26430]"
    }, {
      "left" : "processNewExpression",
      "right" : "processNewExpression",
      "info" : "SimpleName[26176-26196]:SimpleName[26431-26451]"
    }, {
      "left" : "NewExpression exprNode",
      "right" : "NewExpression exprNode",
      "info" : "SingleVariableDeclaration[26197-26219]:SingleVariableDeclaration[26452-26474]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26221-26272]:Block[26476-26527]"
    }, {
      "left" : "return processFunctionCall(exprNode);",
      "right" : "return processFunctionCall(exprNode);",
      "info" : "ReturnStatement[26229-26266]:ReturnStatement[26484-26521]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[26278-26287]:MarkerAnnotation[26533-26542]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[26292-26296]:SimpleType[26547-26551]"
    }, {
      "left" : "processNumberLiteral",
      "right" : "processNumberLiteral",
      "info" : "SimpleName[26297-26317]:SimpleName[26552-26572]"
    }, {
      "left" : "NumberLiteral literalNode",
      "right" : "NumberLiteral literalNode",
      "info" : "SingleVariableDeclaration[26318-26343]:SingleVariableDeclaration[26573-26598]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26345-26405]:Block[26600-26660]"
    }, {
      "left" : "return newNumberNode(literalNode.getNumber());",
      "right" : "return newNumberNode(literalNode.getNumber());",
      "info" : "ReturnStatement[26353-26399]:ReturnStatement[26608-26654]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[26411-26420]:MarkerAnnotation[26666-26675]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[26425-26429]:SimpleType[26680-26684]"
    }, {
      "left" : "processObjectLiteral",
      "right" : "processObjectLiteral",
      "info" : "SimpleName[26430-26450]:SimpleName[26685-26705]"
    }, {
      "left" : "ObjectLiteral literalNode",
      "right" : "ObjectLiteral literalNode",
      "info" : "SingleVariableDeclaration[26451-26476]:SingleVariableDeclaration[26706-26731]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26478-27634]:Block[26733-27889]"
    }, {
      "left" : "if (literalNode.isDestructuring())",
      "right" : "if (literalNode.isDestructuring())",
      "info" : "IfStatement[26486-26578]:IfStatement[26741-26833]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26521-26578]:Block[26776-26833]"
    }, {
      "left" : "reportDestructuringAssign(literalNode);",
      "right" : "reportDestructuringAssign(literalNode);",
      "info" : "ExpressionStatement[26531-26570]:ExpressionStatement[26786-26825]"
    }, {
      "left" : "Node node = newNode(Token.OBJECTLIT);",
      "right" : "Node node = newNode(Token.OBJECTLIT);",
      "info" : "VariableDeclarationStatement[26586-26623]:VariableDeclarationStatement[26841-26878]"
    }, {
      "left" : "for (ObjectProperty el : literalNode.getElements())",
      "right" : "for (ObjectProperty el : literalNode.getElements())",
      "info" : "EnhancedForStatement[26630-27609]:EnhancedForStatement[26885-27864]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26682-27609]:Block[26937-27864]"
    }, {
      "left" : "if (config.languageMode == LanguageMode.ECMASCRIPT3)",
      "right" : "if (config.languageMode == LanguageMode.ECMASCRIPT3)",
      "info" : "IfStatement[26692-26941]:IfStatement[26947-27196]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26745-26941]:Block[27000-27196]"
    }, {
      "left" : "if (el.isGetter())",
      "right" : "if (el.isGetter())",
      "info" : "IfStatement[26757-26931]:IfStatement[27012-27186]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26776-26841]:Block[27031-27096]"
    }, {
      "left" : "reportGetter(el);",
      "right" : "reportGetter(el);",
      "info" : "ExpressionStatement[26790-26807]:ExpressionStatement[27045-27062]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[26820-26829]:ContinueStatement[27075-27084]"
    }, {
      "left" : "if (el.isSetter())",
      "right" : "if (el.isSetter())",
      "info" : "IfStatement[26847-26931]:IfStatement[27102-27186]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26866-26931]:Block[27121-27186]"
    }, {
      "left" : "reportSetter(el);",
      "right" : "reportSetter(el);",
      "info" : "ExpressionStatement[26880-26897]:ExpressionStatement[27135-27152]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[26910-26919]:ContinueStatement[27165-27174]"
    }, {
      "left" : "Node key = transformAsString(el.getLeft());",
      "right" : "Node key = transformAsString(el.getLeft());",
      "info" : "VariableDeclarationStatement[26951-26994]:VariableDeclarationStatement[27206-27249]"
    }, {
      "left" : "Node value = transform(el.getRight());",
      "right" : "Node value = transform(el.getRight());",
      "info" : "VariableDeclarationStatement[27003-27041]:VariableDeclarationStatement[27258-27296]"
    }, {
      "left" : "if (el.isGetter())",
      "right" : "if (el.isGetter())",
      "info" : "IfStatement[27050-27531]:IfStatement[27305-27786]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27069-27287]:Block[27324-27542]"
    }, {
      "left" : "key.setType(Token.GETTER_DEF);",
      "right" : "key.setType(Token.GETTER_DEF);",
      "info" : "ExpressionStatement[27081-27111]:ExpressionStatement[27336-27366]"
    }, {
      "left" : "Preconditions.checkState(value.isFunction());",
      "right" : "Preconditions.checkState(value.isFunction());",
      "info" : "ExpressionStatement[27122-27167]:ExpressionStatement[27377-27422]"
    }, {
      "left" : "if (getFnParamNode(value).hasChildren())",
      "right" : "if (getFnParamNode(value).hasChildren())",
      "info" : "IfStatement[27178-27277]:IfStatement[27433-27532]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27219-27277]:Block[27474-27532]"
    }, {
      "left" : "reportGetterParam(el.getLeft());",
      "right" : "reportGetterParam(el.getLeft());",
      "info" : "ExpressionStatement[27233-27265]:ExpressionStatement[27488-27520]"
    }, {
      "left" : "if (el.isSetter())",
      "right" : "if (el.isSetter())",
      "info" : "IfStatement[27293-27531]:IfStatement[27548-27786]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27312-27531]:Block[27567-27786]"
    }, {
      "left" : "key.setType(Token.SETTER_DEF);",
      "right" : "key.setType(Token.SETTER_DEF);",
      "info" : "ExpressionStatement[27324-27354]:ExpressionStatement[27579-27609]"
    }, {
      "left" : "Preconditions.checkState(value.isFunction());",
      "right" : "Preconditions.checkState(value.isFunction());",
      "info" : "ExpressionStatement[27365-27410]:ExpressionStatement[27620-27665]"
    }, {
      "left" : "if (!getFnParamNode(value).hasOneChild())",
      "right" : "if (!getFnParamNode(value).hasOneChild())",
      "info" : "IfStatement[27421-27521]:IfStatement[27676-27776]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27463-27521]:Block[27718-27776]"
    }, {
      "left" : "reportSetterParam(el.getLeft());",
      "right" : "reportSetterParam(el.getLeft());",
      "info" : "ExpressionStatement[27477-27509]:ExpressionStatement[27732-27764]"
    }, {
      "left" : "key.addChildToFront(value);",
      "right" : "key.addChildToFront(value);",
      "info" : "ExpressionStatement[27540-27567]:ExpressionStatement[27795-27822]"
    }, {
      "left" : "node.addChildToBack(key);",
      "right" : "node.addChildToBack(key);",
      "info" : "ExpressionStatement[27576-27601]:ExpressionStatement[27831-27856]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[27616-27628]:ReturnStatement[27871-27883]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[27750-27754]:SimpleType[28005-28009]"
    }, {
      "left" : "getFnParamNode",
      "right" : "getFnParamNode",
      "info" : "SimpleName[27755-27769]:SimpleName[28010-28024]"
    }, {
      "left" : "Node fnNode",
      "right" : "Node fnNode",
      "info" : "SingleVariableDeclaration[27770-27781]:SingleVariableDeclaration[28025-28036]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27783-27957]:Block[28038-28212]"
    }, {
      "left" : "Preconditions.checkArgument(fnNode.isFunction());",
      "right" : "Preconditions.checkArgument(fnNode.isFunction());",
      "info" : "ExpressionStatement[27857-27906]:ExpressionStatement[28112-28161]"
    }, {
      "left" : "return fnNode.getFirstChild().getNext();",
      "right" : "return fnNode.getFirstChild().getNext();",
      "info" : "ReturnStatement[27912-27952]:ReturnStatement[28167-28207]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[27963-27972]:MarkerAnnotation[28218-28227]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[27977-27981]:SimpleType[28232-28236]"
    }, {
      "left" : "processObjectProperty",
      "right" : "processObjectProperty",
      "info" : "SimpleName[27982-28003]:SimpleName[28237-28258]"
    }, {
      "left" : "ObjectProperty propertyNode",
      "right" : "ObjectProperty propertyNode",
      "info" : "SingleVariableDeclaration[28004-28031]:SingleVariableDeclaration[28259-28286]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28033-28091]:Block[28288-28346]"
    }, {
      "left" : "return processInfixExpression(propertyNode);",
      "right" : "return processInfixExpression(propertyNode);",
      "info" : "ReturnStatement[28041-28085]:ReturnStatement[28296-28340]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[28097-28106]:MarkerAnnotation[28352-28361]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[28111-28115]:SimpleType[28366-28370]"
    }, {
      "left" : "processParenthesizedExpression",
      "right" : "processParenthesizedExpression",
      "info" : "SimpleName[28116-28146]:SimpleName[28371-28401]"
    }, {
      "left" : "ParenthesizedExpression exprNode",
      "right" : "ParenthesizedExpression exprNode",
      "info" : "SingleVariableDeclaration[28147-28179]:SingleVariableDeclaration[28402-28434]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28181-28321]:Block[28436-28576]"
    }, {
      "left" : "Node node = transform(exprNode.getExpression());",
      "right" : "Node node = transform(exprNode.getExpression());",
      "info" : "VariableDeclarationStatement[28189-28237]:VariableDeclarationStatement[28444-28492]"
    }, {
      "left" : "node.putProp(Node.PARENTHESIZED_PROP, Boolean.TRUE);",
      "right" : "node.putProp(Node.PARENTHESIZED_PROP, Boolean.TRUE);",
      "info" : "ExpressionStatement[28244-28296]:ExpressionStatement[28499-28551]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[28303-28315]:ReturnStatement[28558-28570]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[28327-28336]:MarkerAnnotation[28582-28591]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[28341-28345]:SimpleType[28596-28600]"
    }, {
      "left" : "processPropertyGet",
      "right" : "processPropertyGet",
      "info" : "SimpleName[28346-28364]:SimpleName[28601-28619]"
    }, {
      "left" : "PropertyGet getNode",
      "right" : "PropertyGet getNode",
      "info" : "SingleVariableDeclaration[28365-28384]:SingleVariableDeclaration[28620-28639]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28386-28719]:Block[28641-28974]"
    }, {
      "left" : "Node leftChild = transform(getNode.getTarget());",
      "right" : "Node leftChild = transform(getNode.getTarget());",
      "info" : "VariableDeclarationStatement[28394-28442]:VariableDeclarationStatement[28649-28697]"
    }, {
      "left" : "Node newNode = newNode(\n          Token.GETPROP, leftChild, transformAsString(getNode.getProperty()));",
      "right" : "Node newNode = newNode(\n          Token.GETPROP, leftChild, transformAsString(getNode.getProperty()));",
      "info" : "VariableDeclarationStatement[28449-28551]:VariableDeclarationStatement[28704-28806]"
    }, {
      "left" : "newNode.setLineno(leftChild.getLineno());",
      "right" : "newNode.setLineno(leftChild.getLineno());",
      "info" : "ExpressionStatement[28558-28599]:ExpressionStatement[28813-28854]"
    }, {
      "left" : "newNode.setCharno(leftChild.getCharno());",
      "right" : "newNode.setCharno(leftChild.getCharno());",
      "info" : "ExpressionStatement[28606-28647]:ExpressionStatement[28861-28902]"
    }, {
      "left" : "maybeSetLengthFrom(newNode, getNode);",
      "right" : "maybeSetLengthFrom(newNode, getNode);",
      "info" : "ExpressionStatement[28654-28691]:ExpressionStatement[28909-28946]"
    }, {
      "left" : "return newNode;",
      "right" : "return newNode;",
      "info" : "ReturnStatement[28698-28713]:ReturnStatement[28953-28968]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[28725-28734]:MarkerAnnotation[28980-28989]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[28739-28743]:SimpleType[28994-28998]"
    }, {
      "left" : "processRegExpLiteral",
      "right" : "processRegExpLiteral",
      "info" : "SimpleName[28744-28764]:SimpleName[28999-29019]"
    }, {
      "left" : "RegExpLiteral literalNode",
      "right" : "RegExpLiteral literalNode",
      "info" : "SingleVariableDeclaration[28765-28790]:SingleVariableDeclaration[29020-29045]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28792-29468]:Block[29047-29723]"
    }, {
      "left" : "Node literalStringNode = newStringNode(literalNode.getValue());",
      "right" : "Node literalStringNode = newStringNode(literalNode.getValue());",
      "info" : "VariableDeclarationStatement[28800-28863]:VariableDeclarationStatement[29055-29118]"
    }, {
      "left" : "literalStringNode.setLineno(literalNode.getLineno());",
      "right" : "literalStringNode.setLineno(literalNode.getLineno());",
      "info" : "ExpressionStatement[28909-28962]:ExpressionStatement[29164-29217]"
    }, {
      "left" : "maybeSetLengthFrom(literalStringNode, literalNode);",
      "right" : "maybeSetLengthFrom(literalStringNode, literalNode);",
      "info" : "ExpressionStatement[28969-29020]:ExpressionStatement[29224-29275]"
    }, {
      "left" : "Node node = newNode(Token.REGEXP, literalStringNode);",
      "right" : "Node node = newNode(Token.REGEXP, literalStringNode);",
      "info" : "VariableDeclarationStatement[29027-29080]:VariableDeclarationStatement[29282-29335]"
    }, {
      "left" : "String flags = literalNode.getFlags();",
      "right" : "String flags = literalNode.getFlags();",
      "info" : "VariableDeclarationStatement[29087-29125]:VariableDeclarationStatement[29342-29380]"
    }, {
      "left" : "if (flags != null && !flags.isEmpty())",
      "right" : "if (flags != null && !flags.isEmpty())",
      "info" : "IfStatement[29132-29443]:IfStatement[29387-29698]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29171-29443]:Block[29426-29698]"
    }, {
      "left" : "Node flagsNode = newStringNode(flags);",
      "right" : "Node flagsNode = newStringNode(flags);",
      "info" : "VariableDeclarationStatement[29181-29219]:VariableDeclarationStatement[29436-29474]"
    }, {
      "left" : "flagsNode.setLineno(literalNode.getLineno());",
      "right" : "flagsNode.setLineno(literalNode.getLineno());",
      "info" : "ExpressionStatement[29298-29343]:ExpressionStatement[29553-29598]"
    }, {
      "left" : "maybeSetLengthFrom(flagsNode, literalNode);",
      "right" : "maybeSetLengthFrom(flagsNode, literalNode);",
      "info" : "ExpressionStatement[29352-29395]:ExpressionStatement[29607-29650]"
    }, {
      "left" : "node.addChildToBack(flagsNode);",
      "right" : "node.addChildToBack(flagsNode);",
      "info" : "ExpressionStatement[29404-29435]:ExpressionStatement[29659-29690]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[29450-29462]:ReturnStatement[29705-29717]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[29474-29483]:MarkerAnnotation[29729-29738]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[29488-29492]:SimpleType[29743-29747]"
    }, {
      "left" : "processReturnStatement",
      "right" : "processReturnStatement",
      "info" : "SimpleName[29493-29515]:SimpleName[29748-29770]"
    }, {
      "left" : "ReturnStatement statementNode",
      "right" : "ReturnStatement statementNode",
      "info" : "SingleVariableDeclaration[29516-29545]:SingleVariableDeclaration[29771-29800]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29547-29746]:Block[29802-30001]"
    }, {
      "left" : "Node node = newNode(Token.RETURN);",
      "right" : "Node node = newNode(Token.RETURN);",
      "info" : "VariableDeclarationStatement[29555-29589]:VariableDeclarationStatement[29810-29844]"
    }, {
      "left" : "if (statementNode.getReturnValue() != null)",
      "right" : "if (statementNode.getReturnValue() != null)",
      "info" : "IfStatement[29596-29721]:IfStatement[29851-29976]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29640-29721]:Block[29895-29976]"
    }, {
      "left" : "node.addChildToBack(transform(statementNode.getReturnValue()));",
      "right" : "node.addChildToBack(transform(statementNode.getReturnValue()));",
      "info" : "ExpressionStatement[29650-29713]:ExpressionStatement[29905-29968]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[29728-29740]:ReturnStatement[29983-29995]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[29752-29761]:MarkerAnnotation[30007-30016]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[29766-29770]:SimpleType[30021-30025]"
    }, {
      "left" : "processScope",
      "right" : "processScope",
      "info" : "SimpleName[29771-29783]:SimpleName[30026-30038]"
    }, {
      "left" : "Scope scopeNode",
      "right" : "Scope scopeNode",
      "info" : "SingleVariableDeclaration[29784-29799]:SingleVariableDeclaration[30039-30054]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29801-29848]:Block[30056-30103]"
    }, {
      "left" : "return processGeneric(scopeNode);",
      "right" : "return processGeneric(scopeNode);",
      "info" : "ReturnStatement[29809-29842]:ReturnStatement[30064-30097]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[29854-29863]:MarkerAnnotation[30109-30118]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[29868-29872]:SimpleType[30123-30127]"
    }, {
      "left" : "processStringLiteral",
      "right" : "processStringLiteral",
      "info" : "SimpleName[29873-29893]:SimpleName[30128-30148]"
    }, {
      "left" : "StringLiteral literalNode",
      "right" : "StringLiteral literalNode",
      "info" : "SingleVariableDeclaration[29894-29919]:SingleVariableDeclaration[30149-30174]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29921-31116]:Block[30176-31371]"
    }, {
      "left" : "String value = literalNode.getValue();",
      "right" : "String value = literalNode.getValue();",
      "info" : "VariableDeclarationStatement[29929-29967]:VariableDeclarationStatement[30184-30222]"
    }, {
      "left" : "Node n = newStringNode(value);",
      "right" : "Node n = newStringNode(value);",
      "info" : "VariableDeclarationStatement[29974-30004]:VariableDeclarationStatement[30229-30259]"
    }, {
      "left" : "if (value.indexOf('\\u000B') != -1)",
      "right" : "if (value.indexOf('\\u000B') != -1)",
      "info" : "IfStatement[30011-31094]:IfStatement[30266-31349]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30046-31094]:Block[30301-31349]"
    }, {
      "left" : "int start = literalNode.getAbsolutePosition();",
      "right" : "int start = literalNode.getAbsolutePosition();",
      "info" : "VariableDeclarationStatement[30748-30794]:VariableDeclarationStatement[31003-31049]"
    }, {
      "left" : "int end = start + literalNode.getLength();",
      "right" : "int end = start + literalNode.getLength();",
      "info" : "VariableDeclarationStatement[30803-30845]:VariableDeclarationStatement[31058-31100]"
    }, {
      "left" : "if (start < sourceString.length() &&\n            (sourceString.substring(\n                 start, Math.min(sourceString.length(), end))\n             .indexOf(\"\\\\v\") != -1))",
      "right" : "if (start < sourceString.length() &&\n            (sourceString.substring(\n                 start, Math.min(sourceString.length(), end))\n             .indexOf(\"\\\\v\") != -1))",
      "info" : "IfStatement[30854-31086]:IfStatement[31109-31341]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31027-31086]:Block[31282-31341]"
    }, {
      "left" : "n.putBooleanProp(Node.SLASH_V, true);",
      "right" : "n.putBooleanProp(Node.SLASH_V, true);",
      "info" : "ExpressionStatement[31039-31076]:ExpressionStatement[31294-31331]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[31101-31110]:ReturnStatement[31356-31365]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[31122-31131]:MarkerAnnotation[31377-31386]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[31136-31140]:SimpleType[31391-31395]"
    }, {
      "left" : "processSwitchCase",
      "right" : "processSwitchCase",
      "info" : "SimpleName[31141-31158]:SimpleName[31396-31413]"
    }, {
      "left" : "SwitchCase caseNode",
      "right" : "SwitchCase caseNode",
      "info" : "SingleVariableDeclaration[31159-31178]:SingleVariableDeclaration[31414-31433]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31180-31893]:Block[31435-32148]"
    }, {
      "left" : "Node node;",
      "right" : "Node node;",
      "info" : "VariableDeclarationStatement[31188-31198]:VariableDeclarationStatement[31443-31453]"
    }, {
      "left" : "if (caseNode.isDefault())",
      "right" : "if (caseNode.isDefault())",
      "info" : "IfStatement[31205-31401]:IfStatement[31460-31656]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31231-31284]:Block[31486-31539]"
    }, {
      "left" : "node = newNode(Token.DEFAULT_CASE);",
      "right" : "node = newNode(Token.DEFAULT_CASE);",
      "info" : "ExpressionStatement[31241-31276]:ExpressionStatement[31496-31531]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31290-31401]:Block[31545-31656]"
    }, {
      "left" : "AstNode expr = caseNode.getExpression();",
      "right" : "AstNode expr = caseNode.getExpression();",
      "info" : "VariableDeclarationStatement[31300-31340]:VariableDeclarationStatement[31555-31595]"
    }, {
      "left" : "node = newNode(Token.CASE, transform(expr));",
      "right" : "node = newNode(Token.CASE, transform(expr));",
      "info" : "ExpressionStatement[31349-31393]:ExpressionStatement[31604-31648]"
    }, {
      "left" : "Node block = newNode(Token.BLOCK);",
      "right" : "Node block = newNode(Token.BLOCK);",
      "info" : "VariableDeclarationStatement[31408-31442]:VariableDeclarationStatement[31663-31697]"
    }, {
      "left" : "block.putBooleanProp(Node.SYNTHETIC_BLOCK_PROP, true);",
      "right" : "block.putBooleanProp(Node.SYNTHETIC_BLOCK_PROP, true);",
      "info" : "ExpressionStatement[31449-31503]:ExpressionStatement[31704-31758]"
    }, {
      "left" : "block.setLineno(caseNode.getLineno());",
      "right" : "block.setLineno(caseNode.getLineno());",
      "info" : "ExpressionStatement[31510-31548]:ExpressionStatement[31765-31803]"
    }, {
      "left" : "block.setCharno(position2charno(caseNode.getAbsolutePosition()));",
      "right" : "block.setCharno(position2charno(caseNode.getAbsolutePosition()));",
      "info" : "ExpressionStatement[31555-31620]:ExpressionStatement[31810-31875]"
    }, {
      "left" : "maybeSetLengthFrom(block, caseNode);",
      "right" : "maybeSetLengthFrom(block, caseNode);",
      "info" : "ExpressionStatement[31627-31663]:ExpressionStatement[31882-31918]"
    }, {
      "left" : "if (caseNode.getStatements() != null)",
      "right" : "if (caseNode.getStatements() != null)",
      "info" : "IfStatement[31670-31834]:IfStatement[31925-32089]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31708-31834]:Block[31963-32089]"
    }, {
      "left" : "for (AstNode child : caseNode.getStatements())",
      "right" : "for (AstNode child : caseNode.getStatements())",
      "info" : "EnhancedForStatement[31718-31826]:EnhancedForStatement[31973-32081]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31765-31826]:Block[32020-32081]"
    }, {
      "left" : "block.addChildToBack(transform(child));",
      "right" : "block.addChildToBack(transform(child));",
      "info" : "ExpressionStatement[31777-31816]:ExpressionStatement[32032-32071]"
    }, {
      "left" : "node.addChildToBack(block);",
      "right" : "node.addChildToBack(block);",
      "info" : "ExpressionStatement[31841-31868]:ExpressionStatement[32096-32123]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[31875-31887]:ReturnStatement[32130-32142]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[31899-31908]:MarkerAnnotation[32154-32163]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[31913-31917]:SimpleType[32168-32172]"
    }, {
      "left" : "processSwitchStatement",
      "right" : "processSwitchStatement",
      "info" : "SimpleName[31918-31940]:SimpleName[32173-32195]"
    }, {
      "left" : "SwitchStatement statementNode",
      "right" : "SwitchStatement statementNode",
      "info" : "SingleVariableDeclaration[31941-31970]:SingleVariableDeclaration[32196-32225]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31972-32201]:Block[32227-32456]"
    }, {
      "left" : "Node node = newNode(Token.SWITCH,\n          transform(statementNode.getExpression()));",
      "right" : "Node node = newNode(Token.SWITCH,\n          transform(statementNode.getExpression()));",
      "info" : "VariableDeclarationStatement[31980-32066]:VariableDeclarationStatement[32235-32321]"
    }, {
      "left" : "for (AstNode child : statementNode.getCases())",
      "right" : "for (AstNode child : statementNode.getCases())",
      "info" : "EnhancedForStatement[32073-32176]:EnhancedForStatement[32328-32431]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32120-32176]:Block[32375-32431]"
    }, {
      "left" : "node.addChildToBack(transform(child));",
      "right" : "node.addChildToBack(transform(child));",
      "info" : "ExpressionStatement[32130-32168]:ExpressionStatement[32385-32423]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[32183-32195]:ReturnStatement[32438-32450]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[32207-32216]:MarkerAnnotation[32462-32471]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[32221-32225]:SimpleType[32476-32480]"
    }, {
      "left" : "processThrowStatement",
      "right" : "processThrowStatement",
      "info" : "SimpleName[32226-32247]:SimpleName[32481-32502]"
    }, {
      "left" : "ThrowStatement statementNode",
      "right" : "ThrowStatement statementNode",
      "info" : "SingleVariableDeclaration[32248-32276]:SingleVariableDeclaration[32503-32531]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32278-32372]:Block[32533-32627]"
    }, {
      "left" : "return newNode(Token.THROW,\n          transform(statementNode.getExpression()));",
      "right" : "return newNode(Token.THROW,\n          transform(statementNode.getExpression()));",
      "info" : "ReturnStatement[32286-32366]:ReturnStatement[32541-32621]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[32378-32387]:MarkerAnnotation[32633-32642]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[32392-32396]:SimpleType[32647-32651]"
    }, {
      "left" : "processTryStatement",
      "right" : "processTryStatement",
      "info" : "SimpleName[32397-32416]:SimpleName[32652-32671]"
    }, {
      "left" : "TryStatement statementNode",
      "right" : "TryStatement statementNode",
      "info" : "SingleVariableDeclaration[32417-32443]:SingleVariableDeclaration[32672-32698]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32445-33557]:Block[32700-33812]"
    }, {
      "left" : "Node node = newNode(Token.TRY,\n          transformBlock(statementNode.getTryBlock()));",
      "right" : "Node node = newNode(Token.TRY,\n          transformBlock(statementNode.getTryBlock()));",
      "info" : "VariableDeclarationStatement[32453-32539]:VariableDeclarationStatement[32708-32794]"
    }, {
      "left" : "Node block = newNode(Token.BLOCK);",
      "right" : "Node block = newNode(Token.BLOCK);",
      "info" : "VariableDeclarationStatement[32546-32580]:VariableDeclarationStatement[32801-32835]"
    }, {
      "left" : "boolean lineSet = false;",
      "right" : "boolean lineSet = false;",
      "info" : "VariableDeclarationStatement[32587-32611]:VariableDeclarationStatement[32842-32866]"
    }, {
      "left" : "for (CatchClause cc : statementNode.getCatchClauses())",
      "right" : "for (CatchClause cc : statementNode.getCatchClauses())",
      "info" : "EnhancedForStatement[32619-32971]:EnhancedForStatement[32874-33226]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32674-32971]:Block[32929-33226]"
    }, {
      "left" : "if (lineSet == false)",
      "right" : "if (lineSet == false)",
      "info" : "IfStatement[32775-32918]:IfStatement[33030-33173]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32797-32918]:Block[33052-33173]"
    }, {
      "left" : "block.setLineno(cc.getLineno());",
      "right" : "block.setLineno(cc.getLineno());",
      "info" : "ExpressionStatement[32809-32841]:ExpressionStatement[33064-33096]"
    }, {
      "left" : "maybeSetLengthFrom(block, cc);",
      "right" : "maybeSetLengthFrom(block, cc);",
      "info" : "ExpressionStatement[32852-32882]:ExpressionStatement[33107-33137]"
    }, {
      "left" : "lineSet = true;",
      "right" : "lineSet = true;",
      "info" : "ExpressionStatement[32893-32908]:ExpressionStatement[33148-33163]"
    }, {
      "left" : "block.addChildToBack(transform(cc));",
      "right" : "block.addChildToBack(transform(cc));",
      "info" : "ExpressionStatement[32927-32963]:ExpressionStatement[33182-33218]"
    }, {
      "left" : "node.addChildToBack(block);",
      "right" : "node.addChildToBack(block);",
      "info" : "ExpressionStatement[32978-33005]:ExpressionStatement[33233-33260]"
    }, {
      "left" : "AstNode finallyBlock = statementNode.getFinallyBlock();",
      "right" : "AstNode finallyBlock = statementNode.getFinallyBlock();",
      "info" : "VariableDeclarationStatement[33013-33068]:VariableDeclarationStatement[33268-33323]"
    }, {
      "left" : "if (finallyBlock != null)",
      "right" : "if (finallyBlock != null)",
      "info" : "IfStatement[33075-33169]:IfStatement[33330-33424]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33101-33169]:Block[33356-33424]"
    }, {
      "left" : "node.addChildToBack(transformBlock(finallyBlock));",
      "right" : "node.addChildToBack(transformBlock(finallyBlock));",
      "info" : "ExpressionStatement[33111-33161]:ExpressionStatement[33366-33416]"
    }, {
      "left" : "if ((lineSet == false) && (finallyBlock != null))",
      "right" : "if ((lineSet == false) && (finallyBlock != null))",
      "info" : "IfStatement[33372-33531]:IfStatement[33627-33786]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33422-33531]:Block[33677-33786]"
    }, {
      "left" : "block.setLineno(finallyBlock.getLineno());",
      "right" : "block.setLineno(finallyBlock.getLineno());",
      "info" : "ExpressionStatement[33432-33474]:ExpressionStatement[33687-33729]"
    }, {
      "left" : "maybeSetLengthFrom(block, finallyBlock);",
      "right" : "maybeSetLengthFrom(block, finallyBlock);",
      "info" : "ExpressionStatement[33483-33523]:ExpressionStatement[33738-33778]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[33539-33551]:ReturnStatement[33794-33806]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[33563-33572]:MarkerAnnotation[33818-33827]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[33577-33581]:SimpleType[33832-33836]"
    }, {
      "left" : "processUnaryExpression",
      "right" : "processUnaryExpression",
      "info" : "SimpleName[33582-33604]:SimpleName[33837-33859]"
    }, {
      "left" : "UnaryExpression exprNode",
      "right" : "UnaryExpression exprNode",
      "info" : "SingleVariableDeclaration[33605-33629]:SingleVariableDeclaration[33860-33884]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33631-34825]:Block[33886-35080]"
    }, {
      "left" : "int type = transformTokenType(exprNode.getType());",
      "right" : "int type = transformTokenType(exprNode.getType());",
      "info" : "VariableDeclarationStatement[33639-33689]:VariableDeclarationStatement[33894-33944]"
    }, {
      "left" : "Node operand = transform(exprNode.getOperand());",
      "right" : "Node operand = transform(exprNode.getOperand());",
      "info" : "VariableDeclarationStatement[33696-33744]:VariableDeclarationStatement[33951-33999]"
    }, {
      "left" : "if (type == Token.NEG && operand.isNumber())",
      "right" : "if (type == Token.NEG && operand.isNumber())",
      "info" : "IfStatement[33751-34819]:IfStatement[34006-35074]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33796-33878]:Block[34051-34133]"
    }, {
      "left" : "operand.setDouble(-operand.getDouble());",
      "right" : "operand.setDouble(-operand.getDouble());",
      "info" : "ExpressionStatement[33806-33846]:ExpressionStatement[34061-34101]"
    }, {
      "left" : "return operand;",
      "right" : "return operand;",
      "info" : "ReturnStatement[33855-33870]:ReturnStatement[34110-34125]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33884-34819]:Block[34139-35074]"
    }, {
      "left" : "if (type == Token.DELPROP &&\n            !(operand.isGetProp() ||\n              operand.isGetElem() ||\n              operand.isName()))",
      "right" : "if (type == Token.DELPROP &&\n            !(operand.isGetProp() ||\n              operand.isGetElem() ||\n              operand.isName()))",
      "info" : "IfStatement[33894-34642]:IfStatement[34149-34897]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34030-34256]:Block[34285-34511]"
    }, {
      "left" : "String msg =\n              \"Invalid delete operand. Only properties can be deleted.\";",
      "right" : "String msg =\n              \"Invalid delete operand. Only properties can be deleted.\";",
      "info" : "VariableDeclarationStatement[34042-34127]:VariableDeclarationStatement[34297-34382]"
    }, {
      "left" : "errorReporter.error(\n              msg,\n              sourceName,\n              operand.getLineno(), \"\", 0);",
      "right" : "errorReporter.error(\n              msg,\n              sourceName,\n              operand.getLineno(), \"\", 0);",
      "info" : "ExpressionStatement[34138-34246]:ExpressionStatement[34393-34501]"
    }, {
      "left" : "if (type == Token.INC || type == Token.DEC)",
      "right" : "if (type == Token.INC || type == Token.DEC)",
      "info" : "IfStatement[34263-34642]:IfStatement[34518-34897]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34307-34642]:Block[34562-34897]"
    }, {
      "left" : "if (!validAssignmentTarget(operand))",
      "right" : "if (!validAssignmentTarget(operand))",
      "info" : "IfStatement[34319-34632]:IfStatement[34574-34887]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34356-34632]:Block[34611-34887]"
    }, {
      "left" : "String msg = (type == Token.INC)\n                ? \"invalid increment target\"\n                : \"invalid decrement target\";",
      "right" : "String msg = (type == Token.INC)\n                ? \"invalid increment target\"\n                : \"invalid decrement target\";",
      "info" : "VariableDeclarationStatement[34370-34493]:VariableDeclarationStatement[34625-34748]"
    }, {
      "left" : "errorReporter.error(\n                msg,\n                sourceName,\n                operand.getLineno(), \"\", 0);",
      "right" : "errorReporter.error(\n                msg,\n                sourceName,\n                operand.getLineno(), \"\", 0);",
      "info" : "ExpressionStatement[34506-34620]:ExpressionStatement[34761-34875]"
    }, {
      "left" : "Node node = newNode(type, operand);",
      "right" : "Node node = newNode(type, operand);",
      "info" : "VariableDeclarationStatement[34652-34687]:VariableDeclarationStatement[34907-34942]"
    }, {
      "left" : "if (exprNode.isPostfix())",
      "right" : "if (exprNode.isPostfix())",
      "info" : "IfStatement[34696-34790]:IfStatement[34951-35045]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34722-34790]:Block[34977-35045]"
    }, {
      "left" : "node.putBooleanProp(Node.INCRDECR_PROP, true);",
      "right" : "node.putBooleanProp(Node.INCRDECR_PROP, true);",
      "info" : "ExpressionStatement[34734-34780]:ExpressionStatement[34989-35035]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[34799-34811]:ReturnStatement[35054-35066]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[34831-34838]:Modifier[35086-35093]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[34839-34846]:PrimitiveType[35094-35101]"
    }, {
      "left" : "validAssignmentTarget",
      "right" : "validAssignmentTarget",
      "info" : "SimpleName[34847-34868]:SimpleName[35102-35123]"
    }, {
      "left" : "Node target",
      "right" : "Node target",
      "info" : "SingleVariableDeclaration[34869-34880]:SingleVariableDeclaration[35124-35135]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34882-35055]:Block[35137-35310]"
    }, {
      "left" : "switch (target.getType()) {\n        case Token.NAME:\n        case Token.GETPROP:\n        case Token.GETELEM:\n          return true;\n      }",
      "right" : "switch (target.getType()) {\n        case Token.NAME:\n        case Token.GETPROP:\n        case Token.GETELEM:\n          return true;\n      }",
      "info" : "SwitchStatement[34890-35029]:SwitchStatement[35145-35284]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[34926-34942]:SwitchCase[35181-35197]"
    }, {
      "left" : "case Token.GETPROP:",
      "right" : "case Token.GETPROP:",
      "info" : "SwitchCase[34951-34970]:SwitchCase[35206-35225]"
    }, {
      "left" : "case Token.GETELEM:",
      "right" : "case Token.GETELEM:",
      "info" : "SwitchCase[34979-34998]:SwitchCase[35234-35253]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[35009-35021]:ReturnStatement[35264-35276]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[35036-35049]:ReturnStatement[35291-35304]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[35061-35070]:MarkerAnnotation[35316-35325]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[35075-35079]:SimpleType[35330-35334]"
    }, {
      "left" : "processVariableDeclaration",
      "right" : "processVariableDeclaration",
      "info" : "SimpleName[35080-35106]:SimpleName[35335-35361]"
    }, {
      "left" : "VariableDeclaration declarationNode",
      "right" : "VariableDeclaration declarationNode",
      "info" : "SingleVariableDeclaration[35107-35142]:SingleVariableDeclaration[35362-35397]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35144-35518]:Block[35399-35773]"
    }, {
      "left" : "if (!config.acceptConstKeyword && declarationNode.getType() ==\n          com.google.javascript.rhino.head.Token.CONST)",
      "right" : "if (!config.acceptConstKeyword && declarationNode.getType() ==\n          com.google.javascript.rhino.head.Token.CONST)",
      "info" : "IfStatement[35152-35326]:IfStatement[35407-35581]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35271-35326]:Block[35526-35581]"
    }, {
      "left" : "processIllegalToken(declarationNode);",
      "right" : "processIllegalToken(declarationNode);",
      "info" : "ExpressionStatement[35281-35318]:ExpressionStatement[35536-35573]"
    }, {
      "left" : "Node node = newNode(Token.VAR);",
      "right" : "Node node = newNode(Token.VAR);",
      "info" : "VariableDeclarationStatement[35334-35365]:VariableDeclarationStatement[35589-35620]"
    }, {
      "left" : "for (VariableInitializer child : declarationNode.getVariables())",
      "right" : "for (VariableInitializer child : declarationNode.getVariables())",
      "info" : "EnhancedForStatement[35372-35493]:EnhancedForStatement[35627-35748]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35437-35493]:Block[35692-35748]"
    }, {
      "left" : "node.addChildToBack(transform(child));",
      "right" : "node.addChildToBack(transform(child));",
      "info" : "ExpressionStatement[35447-35485]:ExpressionStatement[35702-35740]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[35500-35512]:ReturnStatement[35755-35767]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[35524-35533]:MarkerAnnotation[35779-35788]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[35538-35542]:SimpleType[35793-35797]"
    }, {
      "left" : "processVariableInitializer",
      "right" : "processVariableInitializer",
      "info" : "SimpleName[35543-35569]:SimpleName[35798-35824]"
    }, {
      "left" : "VariableInitializer initializerNode",
      "right" : "VariableInitializer initializerNode",
      "info" : "SingleVariableDeclaration[35570-35605]:SingleVariableDeclaration[35825-35860]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35607-35865]:Block[35862-36120]"
    }, {
      "left" : "Node node = transform(initializerNode.getTarget());",
      "right" : "Node node = transform(initializerNode.getTarget());",
      "info" : "VariableDeclarationStatement[35615-35666]:VariableDeclarationStatement[35870-35921]"
    }, {
      "left" : "if (initializerNode.getInitializer() != null)",
      "right" : "if (initializerNode.getInitializer() != null)",
      "info" : "IfStatement[35673-35840]:IfStatement[35928-36095]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35719-35840]:Block[35974-36095]"
    }, {
      "left" : "Node initalizer = transform(initializerNode.getInitializer());",
      "right" : "Node initalizer = transform(initializerNode.getInitializer());",
      "info" : "VariableDeclarationStatement[35729-35791]:VariableDeclarationStatement[35984-36046]"
    }, {
      "left" : "node.addChildToBack(initalizer);",
      "right" : "node.addChildToBack(initalizer);",
      "info" : "ExpressionStatement[35800-35832]:ExpressionStatement[36055-36087]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[35847-35859]:ReturnStatement[36102-36114]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[35871-35880]:MarkerAnnotation[36126-36135]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[35885-35889]:SimpleType[36140-36144]"
    }, {
      "left" : "processWhileLoop",
      "right" : "processWhileLoop",
      "info" : "SimpleName[35890-35906]:SimpleName[36145-36161]"
    }, {
      "left" : "WhileLoop loopNode",
      "right" : "WhileLoop loopNode",
      "info" : "SingleVariableDeclaration[35907-35925]:SingleVariableDeclaration[36162-36180]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35927-36072]:Block[36182-36327]"
    }, {
      "left" : "return newNode(\n          Token.WHILE,\n          transform(loopNode.getCondition()),\n          transformBlock(loopNode.getBody()));",
      "right" : "return newNode(\n          Token.WHILE,\n          transform(loopNode.getCondition()),\n          transformBlock(loopNode.getBody()));",
      "info" : "ReturnStatement[35935-36066]:ReturnStatement[36190-36321]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[36078-36087]:MarkerAnnotation[36333-36342]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[36092-36096]:SimpleType[36347-36351]"
    }, {
      "left" : "processWithStatement",
      "right" : "processWithStatement",
      "info" : "SimpleName[36097-36117]:SimpleName[36352-36372]"
    }, {
      "left" : "WithStatement statementNode",
      "right" : "WithStatement statementNode",
      "info" : "SingleVariableDeclaration[36118-36145]:SingleVariableDeclaration[36373-36400]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36147-36307]:Block[36402-36562]"
    }, {
      "left" : "return newNode(\n          Token.WITH,\n          transform(statementNode.getExpression()),\n          transformBlock(statementNode.getStatement()));",
      "right" : "return newNode(\n          Token.WITH,\n          transform(statementNode.getExpression()),\n          transformBlock(statementNode.getStatement()));",
      "info" : "ReturnStatement[36155-36301]:ReturnStatement[36410-36556]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[36313-36322]:MarkerAnnotation[36568-36577]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[36327-36331]:SimpleType[36582-36586]"
    }, {
      "left" : "processIllegalToken",
      "right" : "processIllegalToken",
      "info" : "SimpleName[36332-36351]:SimpleName[36587-36606]"
    }, {
      "left" : "AstNode node",
      "right" : "AstNode node",
      "info" : "SingleVariableDeclaration[36352-36364]:SingleVariableDeclaration[36607-36619]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36366-36620]:Block[36621-36875]"
    }, {
      "left" : "errorReporter.error(\n          \"Unsupported syntax: \" +\n          com.google.javascript.rhino.head.Token.typeToName(\n              node.getType()),\n          sourceName,\n          node.getLineno(), \"\", 0);",
      "right" : "errorReporter.error(\n          \"Unsupported syntax: \" +\n          com.google.javascript.rhino.head.Token.typeToName(\n              node.getType()),\n          sourceName,\n          node.getLineno(), \"\", 0);",
      "info" : "ExpressionStatement[36374-36579]:ExpressionStatement[36629-36834]"
    }, {
      "left" : "return newNode(Token.EMPTY);",
      "right" : "return newNode(Token.EMPTY);",
      "info" : "ReturnStatement[36586-36614]:ReturnStatement[36841-36869]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[36626-36630]:PrimitiveType[36881-36885]"
    }, {
      "left" : "reportDestructuringAssign",
      "right" : "reportDestructuringAssign",
      "info" : "SimpleName[36631-36656]:SimpleName[36886-36911]"
    }, {
      "left" : "AstNode node",
      "right" : "AstNode node",
      "info" : "SingleVariableDeclaration[36657-36669]:SingleVariableDeclaration[36912-36924]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36671-36811]:Block[36926-37066]"
    }, {
      "left" : "errorReporter.error(\n          \"destructuring assignment forbidden\",\n          sourceName,\n          node.getLineno(), \"\", 0);",
      "right" : "errorReporter.error(\n          \"destructuring assignment forbidden\",\n          sourceName,\n          node.getLineno(), \"\", 0);",
      "info" : "ExpressionStatement[36679-36805]:ExpressionStatement[36934-37060]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[36817-36821]:PrimitiveType[37072-37076]"
    }, {
      "left" : "reportGetter",
      "right" : "reportGetter",
      "info" : "SimpleName[36822-36834]:SimpleName[37077-37089]"
    }, {
      "left" : "AstNode node",
      "right" : "AstNode node",
      "info" : "SingleVariableDeclaration[36835-36847]:SingleVariableDeclaration[37090-37102]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36849-37001]:Block[37104-37256]"
    }, {
      "left" : "errorReporter.error(\n          \"getters are not supported in Internet Explorer\",\n          sourceName,\n          node.getLineno(), \"\", 0);",
      "right" : "errorReporter.error(\n          \"getters are not supported in Internet Explorer\",\n          sourceName,\n          node.getLineno(), \"\", 0);",
      "info" : "ExpressionStatement[36857-36995]:ExpressionStatement[37112-37250]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[37007-37011]:PrimitiveType[37262-37266]"
    }, {
      "left" : "reportSetter",
      "right" : "reportSetter",
      "info" : "SimpleName[37012-37024]:SimpleName[37267-37279]"
    }, {
      "left" : "AstNode node",
      "right" : "AstNode node",
      "info" : "SingleVariableDeclaration[37025-37037]:SingleVariableDeclaration[37280-37292]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37039-37191]:Block[37294-37446]"
    }, {
      "left" : "errorReporter.error(\n          \"setters are not supported in Internet Explorer\",\n          sourceName,\n          node.getLineno(), \"\", 0);",
      "right" : "errorReporter.error(\n          \"setters are not supported in Internet Explorer\",\n          sourceName,\n          node.getLineno(), \"\", 0);",
      "info" : "ExpressionStatement[37047-37185]:ExpressionStatement[37302-37440]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[37197-37201]:PrimitiveType[37452-37456]"
    }, {
      "left" : "reportGetterParam",
      "right" : "reportGetterParam",
      "info" : "SimpleName[37202-37219]:SimpleName[37457-37474]"
    }, {
      "left" : "AstNode node",
      "right" : "AstNode node",
      "info" : "SingleVariableDeclaration[37220-37232]:SingleVariableDeclaration[37475-37487]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37234-37371]:Block[37489-37626]"
    }, {
      "left" : "errorReporter.error(\n          \"getters may not have parameters\",\n          sourceName,\n          node.getLineno(), \"\", 0);",
      "right" : "errorReporter.error(\n          \"getters may not have parameters\",\n          sourceName,\n          node.getLineno(), \"\", 0);",
      "info" : "ExpressionStatement[37242-37365]:ExpressionStatement[37497-37620]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[37377-37381]:PrimitiveType[37632-37636]"
    }, {
      "left" : "reportSetterParam",
      "right" : "reportSetterParam",
      "info" : "SimpleName[37382-37399]:SimpleName[37637-37654]"
    }, {
      "left" : "AstNode node",
      "right" : "AstNode node",
      "info" : "SingleVariableDeclaration[37400-37412]:SingleVariableDeclaration[37655-37667]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37414-37559]:Block[37669-37814]"
    }, {
      "left" : "errorReporter.error(\n          \"setters must have exactly one parameter\",\n          sourceName,\n          node.getLineno(), \"\", 0);",
      "right" : "errorReporter.error(\n          \"setters must have exactly one parameter\",\n          sourceName,\n          node.getLineno(), \"\", 0);",
      "info" : "ExpressionStatement[37422-37553]:ExpressionStatement[37677-37808]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[37567-37574]:Modifier[37822-37829]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[37575-37581]:Modifier[37830-37836]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[37582-37585]:PrimitiveType[37837-37840]"
    }, {
      "left" : "transformTokenType",
      "right" : "transformTokenType",
      "info" : "SimpleName[37586-37604]:SimpleName[37841-37859]"
    }, {
      "left" : "int token",
      "right" : "int token",
      "info" : "SingleVariableDeclaration[37605-37614]:SingleVariableDeclaration[37860-37869]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37616-45231]:Block[37871-45486]"
    }, {
      "left" : "switch (token) {\n      case com.google.javascript.rhino.head.Token.RETURN:\n        return Token.RETURN;\n      case com.google.javascript.rhino.head.Token.BITOR:\n        return Token.BITOR;\n      case com.google.javascript.rhino.head.Token.BITXOR:\n        return Token.BITXOR;\n      case com.google.javascript.rhino.head.Token.BITAND:\n        return Token.BITAND;\n      case com.google.javascript.rhino.head.Token.EQ:\n        return Token.EQ;\n      case com.google.javascript.rhino.head.Token.NE:\n        return Token.NE;\n      case com.google.javascript.rhino.head.Token.LT:\n        return Token.LT;\n      case com.google.javascript.rhino.head.Token.LE:\n        return Token.LE;\n      case com.google.javascript.rhino.head.Token.GT:\n        return Token.GT;\n      case com.google.javascript.rhino.head.Token.GE:\n        return Token.GE;\n      case com.google.javascript.rhino.head.Token.LSH:\n        return Token.LSH;\n      case com.google.javascript.rhino.head.Token.RSH:\n        return Token.RSH;\n      case com.google.javascript.rhino.head.Token.URSH:\n        return Token.URSH;\n      case com.google.javascript.rhino.head.Token.ADD:\n        return Token.ADD;\n      case com.google.javascript.rhino.head.Token.SUB:\n        return Token.SUB;\n      case com.google.javascript.rhino.head.Token.MUL:\n        return Token.MUL;\n      case com.google.javascript.rhino.head.Token.DIV:\n        return Token.DIV;\n      case com.google.javascript.rhino.head.Token.MOD:\n        return Token.MOD;\n      case com.google.javascript.rhino.head.Token.NOT:\n        return Token.NOT;\n      case com.google.javascript.rhino.head.Token.BITNOT:\n        return Token.BITNOT;\n      case com.google.javascript.rhino.head.Token.POS:\n        return Token.POS;\n      case com.google.javascript.rhino.head.Token.NEG:\n        return Token.NEG;\n      case com.google.javascript.rhino.head.Token.NEW:\n        return Token.NEW;\n      case com.google.javascript.rhino.head.Token.DELPROP:\n        return Token.DELPROP;\n      case com.google.javascript.rhino.head.Token.TYPEOF:\n        return Token.TYPEOF;\n      case com.google.javascript.rhino.head.Token.GETPROP:\n        return Token.GETPROP;\n      case com.google.javascript.rhino.head.Token.GETELEM:\n        return Token.GETELEM;\n      case com.google.javascript.rhino.head.Token.CALL:\n        return Token.CALL;\n      case com.google.javascript.rhino.head.Token.NAME:\n        return Token.NAME;\n      case com.google.javascript.rhino.head.Token.NUMBER:\n        return Token.NUMBER;\n      case com.google.javascript.rhino.head.Token.STRING:\n        return Token.STRING;\n      case com.google.javascript.rhino.head.Token.NULL:\n        return Token.NULL;\n      case com.google.javascript.rhino.head.Token.THIS:\n        return Token.THIS;\n      case com.google.javascript.rhino.head.Token.FALSE:\n        return Token.FALSE;\n      case com.google.javascript.rhino.head.Token.TRUE:\n        return Token.TRUE;\n      case com.google.javascript.rhino.head.Token.SHEQ:\n        return Token.SHEQ;\n      case com.google.javascript.rhino.head.Token.SHNE:\n        return Token.SHNE;\n      case com.google.javascript.rhino.head.Token.REGEXP:\n        return Token.REGEXP;\n      case com.google.javascript.rhino.head.Token.THROW:\n        return Token.THROW;\n      case com.google.javascript.rhino.head.Token.IN:\n        return Token.IN;\n      case com.google.javascript.rhino.head.Token.INSTANCEOF:\n        return Token.INSTANCEOF;\n      case com.google.javascript.rhino.head.Token.ARRAYLIT:\n        return Token.ARRAYLIT;\n      case com.google.javascript.rhino.head.Token.OBJECTLIT:\n        return Token.OBJECTLIT;\n      case com.google.javascript.rhino.head.Token.TRY:\n        return Token.TRY;\n      // The LP represents a parameter list\n      case com.google.javascript.rhino.head.Token.LP:\n        return Token.PARAM_LIST;\n      case com.google.javascript.rhino.head.Token.COMMA:\n        return Token.COMMA;\n      case com.google.javascript.rhino.head.Token.ASSIGN:\n        return Token.ASSIGN;\n      case com.google.javascript.rhino.head.Token.ASSIGN_BITOR:\n        return Token.ASSIGN_BITOR;\n      case com.google.javascript.rhino.head.Token.ASSIGN_BITXOR:\n        return Token.ASSIGN_BITXOR;\n      case com.google.javascript.rhino.head.Token.ASSIGN_BITAND:\n        return Token.ASSIGN_BITAND;\n      case com.google.javascript.rhino.head.Token.ASSIGN_LSH:\n        return Token.ASSIGN_LSH;\n      case com.google.javascript.rhino.head.Token.ASSIGN_RSH:\n        return Token.ASSIGN_RSH;\n      case com.google.javascript.rhino.head.Token.ASSIGN_URSH:\n        return Token.ASSIGN_URSH;\n      case com.google.javascript.rhino.head.Token.ASSIGN_ADD:\n        return Token.ASSIGN_ADD;\n      case com.google.javascript.rhino.head.Token.ASSIGN_SUB:\n        return Token.ASSIGN_SUB;\n      case com.google.javascript.rhino.head.Token.ASSIGN_MUL:\n        return Token.ASSIGN_MUL;\n      case com.google.javascript.rhino.head.Token.ASSIGN_DIV:\n        return Token.ASSIGN_DIV;\n      case com.google.javascript.rhino.head.Token.ASSIGN_MOD:\n        return Token.ASSIGN_MOD;\n      case com.google.javascript.rhino.head.Token.HOOK:\n        return Token.HOOK;\n      case com.google.javascript.rhino.head.Token.OR:\n        return Token.OR;\n      case com.google.javascript.rhino.head.Token.AND:\n        return Token.AND;\n      case com.google.javascript.rhino.head.Token.INC:\n        return Token.INC;\n      case com.google.javascript.rhino.head.Token.DEC:\n        return Token.DEC;\n      case com.google.javascript.rhino.head.Token.FUNCTION:\n        return Token.FUNCTION;\n      case com.google.javascript.rhino.head.Token.IF:\n        return Token.IF;\n      case com.google.javascript.rhino.head.Token.SWITCH:\n        return Token.SWITCH;\n      case com.google.javascript.rhino.head.Token.CASE:\n        return Token.CASE;\n      case com.google.javascript.rhino.head.Token.DEFAULT:\n        return Token.DEFAULT_CASE;\n      case com.google.javascript.rhino.head.Token.WHILE:\n        return Token.WHILE;\n      case com.google.javascript.rhino.head.Token.DO:\n        return Token.DO;\n      case com.google.javascript.rhino.head.Token.FOR:\n        return Token.FOR;\n      case com.google.javascript.rhino.head.Token.BREAK:\n        return Token.BREAK;\n      case com.google.javascript.rhino.head.Token.CONTINUE:\n        return Token.CONTINUE;\n      case com.google.javascript.rhino.head.Token.VAR:\n        return Token.VAR;\n      case com.google.javascript.rhino.head.Token.WITH:\n        return Token.WITH;\n      case com.google.javascript.rhino.head.Token.CATCH:\n        return Token.CATCH;\n      case com.google.javascript.rhino.head.Token.VOID:\n        return Token.VOID;\n      case com.google.javascript.rhino.head.Token.EMPTY:\n        return Token.EMPTY;\n      case com.google.javascript.rhino.head.Token.BLOCK:\n        return Token.BLOCK;\n      case com.google.javascript.rhino.head.Token.LABEL:\n        return Token.LABEL;\n      case com.google.javascript.rhino.head.Token.EXPR_VOID:\n      case com.google.javascript.rhino.head.Token.EXPR_RESULT:\n        return Token.EXPR_RESULT;\n      case com.google.javascript.rhino.head.Token.SCRIPT:\n        return Token.SCRIPT;\n      case com.google.javascript.rhino.head.Token.GET:\n        return Token.GETTER_DEF;\n      case com.google.javascript.rhino.head.Token.SET:\n        return Token.SETTER_DEF;\n      case com.google.javascript.rhino.head.Token.CONST:\n        return Token.CONST;\n      case com.google.javascript.rhino.head.Token.DEBUGGER:\n        return Token.DEBUGGER;\n    }",
      "right" : "switch (token) {\n      case com.google.javascript.rhino.head.Token.RETURN:\n        return Token.RETURN;\n      case com.google.javascript.rhino.head.Token.BITOR:\n        return Token.BITOR;\n      case com.google.javascript.rhino.head.Token.BITXOR:\n        return Token.BITXOR;\n      case com.google.javascript.rhino.head.Token.BITAND:\n        return Token.BITAND;\n      case com.google.javascript.rhino.head.Token.EQ:\n        return Token.EQ;\n      case com.google.javascript.rhino.head.Token.NE:\n        return Token.NE;\n      case com.google.javascript.rhino.head.Token.LT:\n        return Token.LT;\n      case com.google.javascript.rhino.head.Token.LE:\n        return Token.LE;\n      case com.google.javascript.rhino.head.Token.GT:\n        return Token.GT;\n      case com.google.javascript.rhino.head.Token.GE:\n        return Token.GE;\n      case com.google.javascript.rhino.head.Token.LSH:\n        return Token.LSH;\n      case com.google.javascript.rhino.head.Token.RSH:\n        return Token.RSH;\n      case com.google.javascript.rhino.head.Token.URSH:\n        return Token.URSH;\n      case com.google.javascript.rhino.head.Token.ADD:\n        return Token.ADD;\n      case com.google.javascript.rhino.head.Token.SUB:\n        return Token.SUB;\n      case com.google.javascript.rhino.head.Token.MUL:\n        return Token.MUL;\n      case com.google.javascript.rhino.head.Token.DIV:\n        return Token.DIV;\n      case com.google.javascript.rhino.head.Token.MOD:\n        return Token.MOD;\n      case com.google.javascript.rhino.head.Token.NOT:\n        return Token.NOT;\n      case com.google.javascript.rhino.head.Token.BITNOT:\n        return Token.BITNOT;\n      case com.google.javascript.rhino.head.Token.POS:\n        return Token.POS;\n      case com.google.javascript.rhino.head.Token.NEG:\n        return Token.NEG;\n      case com.google.javascript.rhino.head.Token.NEW:\n        return Token.NEW;\n      case com.google.javascript.rhino.head.Token.DELPROP:\n        return Token.DELPROP;\n      case com.google.javascript.rhino.head.Token.TYPEOF:\n        return Token.TYPEOF;\n      case com.google.javascript.rhino.head.Token.GETPROP:\n        return Token.GETPROP;\n      case com.google.javascript.rhino.head.Token.GETELEM:\n        return Token.GETELEM;\n      case com.google.javascript.rhino.head.Token.CALL:\n        return Token.CALL;\n      case com.google.javascript.rhino.head.Token.NAME:\n        return Token.NAME;\n      case com.google.javascript.rhino.head.Token.NUMBER:\n        return Token.NUMBER;\n      case com.google.javascript.rhino.head.Token.STRING:\n        return Token.STRING;\n      case com.google.javascript.rhino.head.Token.NULL:\n        return Token.NULL;\n      case com.google.javascript.rhino.head.Token.THIS:\n        return Token.THIS;\n      case com.google.javascript.rhino.head.Token.FALSE:\n        return Token.FALSE;\n      case com.google.javascript.rhino.head.Token.TRUE:\n        return Token.TRUE;\n      case com.google.javascript.rhino.head.Token.SHEQ:\n        return Token.SHEQ;\n      case com.google.javascript.rhino.head.Token.SHNE:\n        return Token.SHNE;\n      case com.google.javascript.rhino.head.Token.REGEXP:\n        return Token.REGEXP;\n      case com.google.javascript.rhino.head.Token.THROW:\n        return Token.THROW;\n      case com.google.javascript.rhino.head.Token.IN:\n        return Token.IN;\n      case com.google.javascript.rhino.head.Token.INSTANCEOF:\n        return Token.INSTANCEOF;\n      case com.google.javascript.rhino.head.Token.ARRAYLIT:\n        return Token.ARRAYLIT;\n      case com.google.javascript.rhino.head.Token.OBJECTLIT:\n        return Token.OBJECTLIT;\n      case com.google.javascript.rhino.head.Token.TRY:\n        return Token.TRY;\n      // The LP represents a parameter list\n      case com.google.javascript.rhino.head.Token.LP:\n        return Token.PARAM_LIST;\n      case com.google.javascript.rhino.head.Token.COMMA:\n        return Token.COMMA;\n      case com.google.javascript.rhino.head.Token.ASSIGN:\n        return Token.ASSIGN;\n      case com.google.javascript.rhino.head.Token.ASSIGN_BITOR:\n        return Token.ASSIGN_BITOR;\n      case com.google.javascript.rhino.head.Token.ASSIGN_BITXOR:\n        return Token.ASSIGN_BITXOR;\n      case com.google.javascript.rhino.head.Token.ASSIGN_BITAND:\n        return Token.ASSIGN_BITAND;\n      case com.google.javascript.rhino.head.Token.ASSIGN_LSH:\n        return Token.ASSIGN_LSH;\n      case com.google.javascript.rhino.head.Token.ASSIGN_RSH:\n        return Token.ASSIGN_RSH;\n      case com.google.javascript.rhino.head.Token.ASSIGN_URSH:\n        return Token.ASSIGN_URSH;\n      case com.google.javascript.rhino.head.Token.ASSIGN_ADD:\n        return Token.ASSIGN_ADD;\n      case com.google.javascript.rhino.head.Token.ASSIGN_SUB:\n        return Token.ASSIGN_SUB;\n      case com.google.javascript.rhino.head.Token.ASSIGN_MUL:\n        return Token.ASSIGN_MUL;\n      case com.google.javascript.rhino.head.Token.ASSIGN_DIV:\n        return Token.ASSIGN_DIV;\n      case com.google.javascript.rhino.head.Token.ASSIGN_MOD:\n        return Token.ASSIGN_MOD;\n      case com.google.javascript.rhino.head.Token.HOOK:\n        return Token.HOOK;\n      case com.google.javascript.rhino.head.Token.OR:\n        return Token.OR;\n      case com.google.javascript.rhino.head.Token.AND:\n        return Token.AND;\n      case com.google.javascript.rhino.head.Token.INC:\n        return Token.INC;\n      case com.google.javascript.rhino.head.Token.DEC:\n        return Token.DEC;\n      case com.google.javascript.rhino.head.Token.FUNCTION:\n        return Token.FUNCTION;\n      case com.google.javascript.rhino.head.Token.IF:\n        return Token.IF;\n      case com.google.javascript.rhino.head.Token.SWITCH:\n        return Token.SWITCH;\n      case com.google.javascript.rhino.head.Token.CASE:\n        return Token.CASE;\n      case com.google.javascript.rhino.head.Token.DEFAULT:\n        return Token.DEFAULT_CASE;\n      case com.google.javascript.rhino.head.Token.WHILE:\n        return Token.WHILE;\n      case com.google.javascript.rhino.head.Token.DO:\n        return Token.DO;\n      case com.google.javascript.rhino.head.Token.FOR:\n        return Token.FOR;\n      case com.google.javascript.rhino.head.Token.BREAK:\n        return Token.BREAK;\n      case com.google.javascript.rhino.head.Token.CONTINUE:\n        return Token.CONTINUE;\n      case com.google.javascript.rhino.head.Token.VAR:\n        return Token.VAR;\n      case com.google.javascript.rhino.head.Token.WITH:\n        return Token.WITH;\n      case com.google.javascript.rhino.head.Token.CATCH:\n        return Token.CATCH;\n      case com.google.javascript.rhino.head.Token.VOID:\n        return Token.VOID;\n      case com.google.javascript.rhino.head.Token.EMPTY:\n        return Token.EMPTY;\n      case com.google.javascript.rhino.head.Token.BLOCK:\n        return Token.BLOCK;\n      case com.google.javascript.rhino.head.Token.LABEL:\n        return Token.LABEL;\n      case com.google.javascript.rhino.head.Token.EXPR_VOID:\n      case com.google.javascript.rhino.head.Token.EXPR_RESULT:\n        return Token.EXPR_RESULT;\n      case com.google.javascript.rhino.head.Token.SCRIPT:\n        return Token.SCRIPT;\n      case com.google.javascript.rhino.head.Token.GET:\n        return Token.GETTER_DEF;\n      case com.google.javascript.rhino.head.Token.SET:\n        return Token.SETTER_DEF;\n      case com.google.javascript.rhino.head.Token.CONST:\n        return Token.CONST;\n      case com.google.javascript.rhino.head.Token.DEBUGGER:\n        return Token.DEBUGGER;\n    }",
      "info" : "SwitchStatement[37622-45140]:SwitchStatement[37877-45395]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.RETURN:",
      "right" : "case com.google.javascript.rhino.head.Token.RETURN:",
      "info" : "SwitchCase[37645-37696]:SwitchCase[37900-37951]"
    }, {
      "left" : "return Token.RETURN;",
      "right" : "return Token.RETURN;",
      "info" : "ReturnStatement[37705-37725]:ReturnStatement[37960-37980]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.BITOR:",
      "right" : "case com.google.javascript.rhino.head.Token.BITOR:",
      "info" : "SwitchCase[37732-37782]:SwitchCase[37987-38037]"
    }, {
      "left" : "return Token.BITOR;",
      "right" : "return Token.BITOR;",
      "info" : "ReturnStatement[37791-37810]:ReturnStatement[38046-38065]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.BITXOR:",
      "right" : "case com.google.javascript.rhino.head.Token.BITXOR:",
      "info" : "SwitchCase[37817-37868]:SwitchCase[38072-38123]"
    }, {
      "left" : "return Token.BITXOR;",
      "right" : "return Token.BITXOR;",
      "info" : "ReturnStatement[37877-37897]:ReturnStatement[38132-38152]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.BITAND:",
      "right" : "case com.google.javascript.rhino.head.Token.BITAND:",
      "info" : "SwitchCase[37904-37955]:SwitchCase[38159-38210]"
    }, {
      "left" : "return Token.BITAND;",
      "right" : "return Token.BITAND;",
      "info" : "ReturnStatement[37964-37984]:ReturnStatement[38219-38239]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.EQ:",
      "right" : "case com.google.javascript.rhino.head.Token.EQ:",
      "info" : "SwitchCase[37991-38038]:SwitchCase[38246-38293]"
    }, {
      "left" : "return Token.EQ;",
      "right" : "return Token.EQ;",
      "info" : "ReturnStatement[38047-38063]:ReturnStatement[38302-38318]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.NE:",
      "right" : "case com.google.javascript.rhino.head.Token.NE:",
      "info" : "SwitchCase[38070-38117]:SwitchCase[38325-38372]"
    }, {
      "left" : "return Token.NE;",
      "right" : "return Token.NE;",
      "info" : "ReturnStatement[38126-38142]:ReturnStatement[38381-38397]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.LT:",
      "right" : "case com.google.javascript.rhino.head.Token.LT:",
      "info" : "SwitchCase[38149-38196]:SwitchCase[38404-38451]"
    }, {
      "left" : "return Token.LT;",
      "right" : "return Token.LT;",
      "info" : "ReturnStatement[38205-38221]:ReturnStatement[38460-38476]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.LE:",
      "right" : "case com.google.javascript.rhino.head.Token.LE:",
      "info" : "SwitchCase[38228-38275]:SwitchCase[38483-38530]"
    }, {
      "left" : "return Token.LE;",
      "right" : "return Token.LE;",
      "info" : "ReturnStatement[38284-38300]:ReturnStatement[38539-38555]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.GT:",
      "right" : "case com.google.javascript.rhino.head.Token.GT:",
      "info" : "SwitchCase[38307-38354]:SwitchCase[38562-38609]"
    }, {
      "left" : "return Token.GT;",
      "right" : "return Token.GT;",
      "info" : "ReturnStatement[38363-38379]:ReturnStatement[38618-38634]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.GE:",
      "right" : "case com.google.javascript.rhino.head.Token.GE:",
      "info" : "SwitchCase[38386-38433]:SwitchCase[38641-38688]"
    }, {
      "left" : "return Token.GE;",
      "right" : "return Token.GE;",
      "info" : "ReturnStatement[38442-38458]:ReturnStatement[38697-38713]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.LSH:",
      "right" : "case com.google.javascript.rhino.head.Token.LSH:",
      "info" : "SwitchCase[38465-38513]:SwitchCase[38720-38768]"
    }, {
      "left" : "return Token.LSH;",
      "right" : "return Token.LSH;",
      "info" : "ReturnStatement[38522-38539]:ReturnStatement[38777-38794]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.RSH:",
      "right" : "case com.google.javascript.rhino.head.Token.RSH:",
      "info" : "SwitchCase[38546-38594]:SwitchCase[38801-38849]"
    }, {
      "left" : "return Token.RSH;",
      "right" : "return Token.RSH;",
      "info" : "ReturnStatement[38603-38620]:ReturnStatement[38858-38875]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.URSH:",
      "right" : "case com.google.javascript.rhino.head.Token.URSH:",
      "info" : "SwitchCase[38627-38676]:SwitchCase[38882-38931]"
    }, {
      "left" : "return Token.URSH;",
      "right" : "return Token.URSH;",
      "info" : "ReturnStatement[38685-38703]:ReturnStatement[38940-38958]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.ADD:",
      "right" : "case com.google.javascript.rhino.head.Token.ADD:",
      "info" : "SwitchCase[38710-38758]:SwitchCase[38965-39013]"
    }, {
      "left" : "return Token.ADD;",
      "right" : "return Token.ADD;",
      "info" : "ReturnStatement[38767-38784]:ReturnStatement[39022-39039]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.SUB:",
      "right" : "case com.google.javascript.rhino.head.Token.SUB:",
      "info" : "SwitchCase[38791-38839]:SwitchCase[39046-39094]"
    }, {
      "left" : "return Token.SUB;",
      "right" : "return Token.SUB;",
      "info" : "ReturnStatement[38848-38865]:ReturnStatement[39103-39120]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.MUL:",
      "right" : "case com.google.javascript.rhino.head.Token.MUL:",
      "info" : "SwitchCase[38872-38920]:SwitchCase[39127-39175]"
    }, {
      "left" : "return Token.MUL;",
      "right" : "return Token.MUL;",
      "info" : "ReturnStatement[38929-38946]:ReturnStatement[39184-39201]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.DIV:",
      "right" : "case com.google.javascript.rhino.head.Token.DIV:",
      "info" : "SwitchCase[38953-39001]:SwitchCase[39208-39256]"
    }, {
      "left" : "return Token.DIV;",
      "right" : "return Token.DIV;",
      "info" : "ReturnStatement[39010-39027]:ReturnStatement[39265-39282]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.MOD:",
      "right" : "case com.google.javascript.rhino.head.Token.MOD:",
      "info" : "SwitchCase[39034-39082]:SwitchCase[39289-39337]"
    }, {
      "left" : "return Token.MOD;",
      "right" : "return Token.MOD;",
      "info" : "ReturnStatement[39091-39108]:ReturnStatement[39346-39363]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.NOT:",
      "right" : "case com.google.javascript.rhino.head.Token.NOT:",
      "info" : "SwitchCase[39115-39163]:SwitchCase[39370-39418]"
    }, {
      "left" : "return Token.NOT;",
      "right" : "return Token.NOT;",
      "info" : "ReturnStatement[39172-39189]:ReturnStatement[39427-39444]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.BITNOT:",
      "right" : "case com.google.javascript.rhino.head.Token.BITNOT:",
      "info" : "SwitchCase[39196-39247]:SwitchCase[39451-39502]"
    }, {
      "left" : "return Token.BITNOT;",
      "right" : "return Token.BITNOT;",
      "info" : "ReturnStatement[39256-39276]:ReturnStatement[39511-39531]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.POS:",
      "right" : "case com.google.javascript.rhino.head.Token.POS:",
      "info" : "SwitchCase[39283-39331]:SwitchCase[39538-39586]"
    }, {
      "left" : "return Token.POS;",
      "right" : "return Token.POS;",
      "info" : "ReturnStatement[39340-39357]:ReturnStatement[39595-39612]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.NEG:",
      "right" : "case com.google.javascript.rhino.head.Token.NEG:",
      "info" : "SwitchCase[39364-39412]:SwitchCase[39619-39667]"
    }, {
      "left" : "return Token.NEG;",
      "right" : "return Token.NEG;",
      "info" : "ReturnStatement[39421-39438]:ReturnStatement[39676-39693]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.NEW:",
      "right" : "case com.google.javascript.rhino.head.Token.NEW:",
      "info" : "SwitchCase[39445-39493]:SwitchCase[39700-39748]"
    }, {
      "left" : "return Token.NEW;",
      "right" : "return Token.NEW;",
      "info" : "ReturnStatement[39502-39519]:ReturnStatement[39757-39774]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.DELPROP:",
      "right" : "case com.google.javascript.rhino.head.Token.DELPROP:",
      "info" : "SwitchCase[39526-39578]:SwitchCase[39781-39833]"
    }, {
      "left" : "return Token.DELPROP;",
      "right" : "return Token.DELPROP;",
      "info" : "ReturnStatement[39587-39608]:ReturnStatement[39842-39863]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.TYPEOF:",
      "right" : "case com.google.javascript.rhino.head.Token.TYPEOF:",
      "info" : "SwitchCase[39615-39666]:SwitchCase[39870-39921]"
    }, {
      "left" : "return Token.TYPEOF;",
      "right" : "return Token.TYPEOF;",
      "info" : "ReturnStatement[39675-39695]:ReturnStatement[39930-39950]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.GETPROP:",
      "right" : "case com.google.javascript.rhino.head.Token.GETPROP:",
      "info" : "SwitchCase[39702-39754]:SwitchCase[39957-40009]"
    }, {
      "left" : "return Token.GETPROP;",
      "right" : "return Token.GETPROP;",
      "info" : "ReturnStatement[39763-39784]:ReturnStatement[40018-40039]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.GETELEM:",
      "right" : "case com.google.javascript.rhino.head.Token.GETELEM:",
      "info" : "SwitchCase[39791-39843]:SwitchCase[40046-40098]"
    }, {
      "left" : "return Token.GETELEM;",
      "right" : "return Token.GETELEM;",
      "info" : "ReturnStatement[39852-39873]:ReturnStatement[40107-40128]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.CALL:",
      "right" : "case com.google.javascript.rhino.head.Token.CALL:",
      "info" : "SwitchCase[39880-39929]:SwitchCase[40135-40184]"
    }, {
      "left" : "return Token.CALL;",
      "right" : "return Token.CALL;",
      "info" : "ReturnStatement[39938-39956]:ReturnStatement[40193-40211]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.NAME:",
      "right" : "case com.google.javascript.rhino.head.Token.NAME:",
      "info" : "SwitchCase[39963-40012]:SwitchCase[40218-40267]"
    }, {
      "left" : "return Token.NAME;",
      "right" : "return Token.NAME;",
      "info" : "ReturnStatement[40021-40039]:ReturnStatement[40276-40294]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.NUMBER:",
      "right" : "case com.google.javascript.rhino.head.Token.NUMBER:",
      "info" : "SwitchCase[40046-40097]:SwitchCase[40301-40352]"
    }, {
      "left" : "return Token.NUMBER;",
      "right" : "return Token.NUMBER;",
      "info" : "ReturnStatement[40106-40126]:ReturnStatement[40361-40381]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.STRING:",
      "right" : "case com.google.javascript.rhino.head.Token.STRING:",
      "info" : "SwitchCase[40133-40184]:SwitchCase[40388-40439]"
    }, {
      "left" : "return Token.STRING;",
      "right" : "return Token.STRING;",
      "info" : "ReturnStatement[40193-40213]:ReturnStatement[40448-40468]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.NULL:",
      "right" : "case com.google.javascript.rhino.head.Token.NULL:",
      "info" : "SwitchCase[40220-40269]:SwitchCase[40475-40524]"
    }, {
      "left" : "return Token.NULL;",
      "right" : "return Token.NULL;",
      "info" : "ReturnStatement[40278-40296]:ReturnStatement[40533-40551]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.THIS:",
      "right" : "case com.google.javascript.rhino.head.Token.THIS:",
      "info" : "SwitchCase[40303-40352]:SwitchCase[40558-40607]"
    }, {
      "left" : "return Token.THIS;",
      "right" : "return Token.THIS;",
      "info" : "ReturnStatement[40361-40379]:ReturnStatement[40616-40634]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.FALSE:",
      "right" : "case com.google.javascript.rhino.head.Token.FALSE:",
      "info" : "SwitchCase[40386-40436]:SwitchCase[40641-40691]"
    }, {
      "left" : "return Token.FALSE;",
      "right" : "return Token.FALSE;",
      "info" : "ReturnStatement[40445-40464]:ReturnStatement[40700-40719]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.TRUE:",
      "right" : "case com.google.javascript.rhino.head.Token.TRUE:",
      "info" : "SwitchCase[40471-40520]:SwitchCase[40726-40775]"
    }, {
      "left" : "return Token.TRUE;",
      "right" : "return Token.TRUE;",
      "info" : "ReturnStatement[40529-40547]:ReturnStatement[40784-40802]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.SHEQ:",
      "right" : "case com.google.javascript.rhino.head.Token.SHEQ:",
      "info" : "SwitchCase[40554-40603]:SwitchCase[40809-40858]"
    }, {
      "left" : "return Token.SHEQ;",
      "right" : "return Token.SHEQ;",
      "info" : "ReturnStatement[40612-40630]:ReturnStatement[40867-40885]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.SHNE:",
      "right" : "case com.google.javascript.rhino.head.Token.SHNE:",
      "info" : "SwitchCase[40637-40686]:SwitchCase[40892-40941]"
    }, {
      "left" : "return Token.SHNE;",
      "right" : "return Token.SHNE;",
      "info" : "ReturnStatement[40695-40713]:ReturnStatement[40950-40968]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.REGEXP:",
      "right" : "case com.google.javascript.rhino.head.Token.REGEXP:",
      "info" : "SwitchCase[40720-40771]:SwitchCase[40975-41026]"
    }, {
      "left" : "return Token.REGEXP;",
      "right" : "return Token.REGEXP;",
      "info" : "ReturnStatement[40780-40800]:ReturnStatement[41035-41055]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.THROW:",
      "right" : "case com.google.javascript.rhino.head.Token.THROW:",
      "info" : "SwitchCase[40807-40857]:SwitchCase[41062-41112]"
    }, {
      "left" : "return Token.THROW;",
      "right" : "return Token.THROW;",
      "info" : "ReturnStatement[40866-40885]:ReturnStatement[41121-41140]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.IN:",
      "right" : "case com.google.javascript.rhino.head.Token.IN:",
      "info" : "SwitchCase[40892-40939]:SwitchCase[41147-41194]"
    }, {
      "left" : "return Token.IN;",
      "right" : "return Token.IN;",
      "info" : "ReturnStatement[40948-40964]:ReturnStatement[41203-41219]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.INSTANCEOF:",
      "right" : "case com.google.javascript.rhino.head.Token.INSTANCEOF:",
      "info" : "SwitchCase[40971-41026]:SwitchCase[41226-41281]"
    }, {
      "left" : "return Token.INSTANCEOF;",
      "right" : "return Token.INSTANCEOF;",
      "info" : "ReturnStatement[41035-41059]:ReturnStatement[41290-41314]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.ARRAYLIT:",
      "right" : "case com.google.javascript.rhino.head.Token.ARRAYLIT:",
      "info" : "SwitchCase[41066-41119]:SwitchCase[41321-41374]"
    }, {
      "left" : "return Token.ARRAYLIT;",
      "right" : "return Token.ARRAYLIT;",
      "info" : "ReturnStatement[41128-41150]:ReturnStatement[41383-41405]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.OBJECTLIT:",
      "right" : "case com.google.javascript.rhino.head.Token.OBJECTLIT:",
      "info" : "SwitchCase[41157-41211]:SwitchCase[41412-41466]"
    }, {
      "left" : "return Token.OBJECTLIT;",
      "right" : "return Token.OBJECTLIT;",
      "info" : "ReturnStatement[41220-41243]:ReturnStatement[41475-41498]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.TRY:",
      "right" : "case com.google.javascript.rhino.head.Token.TRY:",
      "info" : "SwitchCase[41250-41298]:SwitchCase[41505-41553]"
    }, {
      "left" : "return Token.TRY;",
      "right" : "return Token.TRY;",
      "info" : "ReturnStatement[41307-41324]:ReturnStatement[41562-41579]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.LP:",
      "right" : "case com.google.javascript.rhino.head.Token.LP:",
      "info" : "SwitchCase[41375-41422]:SwitchCase[41630-41677]"
    }, {
      "left" : "return Token.PARAM_LIST;",
      "right" : "return Token.PARAM_LIST;",
      "info" : "ReturnStatement[41431-41455]:ReturnStatement[41686-41710]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.COMMA:",
      "right" : "case com.google.javascript.rhino.head.Token.COMMA:",
      "info" : "SwitchCase[41462-41512]:SwitchCase[41717-41767]"
    }, {
      "left" : "return Token.COMMA;",
      "right" : "return Token.COMMA;",
      "info" : "ReturnStatement[41521-41540]:ReturnStatement[41776-41795]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.ASSIGN:",
      "right" : "case com.google.javascript.rhino.head.Token.ASSIGN:",
      "info" : "SwitchCase[41547-41598]:SwitchCase[41802-41853]"
    }, {
      "left" : "return Token.ASSIGN;",
      "right" : "return Token.ASSIGN;",
      "info" : "ReturnStatement[41607-41627]:ReturnStatement[41862-41882]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.ASSIGN_BITOR:",
      "right" : "case com.google.javascript.rhino.head.Token.ASSIGN_BITOR:",
      "info" : "SwitchCase[41634-41691]:SwitchCase[41889-41946]"
    }, {
      "left" : "return Token.ASSIGN_BITOR;",
      "right" : "return Token.ASSIGN_BITOR;",
      "info" : "ReturnStatement[41700-41726]:ReturnStatement[41955-41981]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.ASSIGN_BITXOR:",
      "right" : "case com.google.javascript.rhino.head.Token.ASSIGN_BITXOR:",
      "info" : "SwitchCase[41733-41791]:SwitchCase[41988-42046]"
    }, {
      "left" : "return Token.ASSIGN_BITXOR;",
      "right" : "return Token.ASSIGN_BITXOR;",
      "info" : "ReturnStatement[41800-41827]:ReturnStatement[42055-42082]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.ASSIGN_BITAND:",
      "right" : "case com.google.javascript.rhino.head.Token.ASSIGN_BITAND:",
      "info" : "SwitchCase[41834-41892]:SwitchCase[42089-42147]"
    }, {
      "left" : "return Token.ASSIGN_BITAND;",
      "right" : "return Token.ASSIGN_BITAND;",
      "info" : "ReturnStatement[41901-41928]:ReturnStatement[42156-42183]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.ASSIGN_LSH:",
      "right" : "case com.google.javascript.rhino.head.Token.ASSIGN_LSH:",
      "info" : "SwitchCase[41935-41990]:SwitchCase[42190-42245]"
    }, {
      "left" : "return Token.ASSIGN_LSH;",
      "right" : "return Token.ASSIGN_LSH;",
      "info" : "ReturnStatement[41999-42023]:ReturnStatement[42254-42278]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.ASSIGN_RSH:",
      "right" : "case com.google.javascript.rhino.head.Token.ASSIGN_RSH:",
      "info" : "SwitchCase[42030-42085]:SwitchCase[42285-42340]"
    }, {
      "left" : "return Token.ASSIGN_RSH;",
      "right" : "return Token.ASSIGN_RSH;",
      "info" : "ReturnStatement[42094-42118]:ReturnStatement[42349-42373]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.ASSIGN_URSH:",
      "right" : "case com.google.javascript.rhino.head.Token.ASSIGN_URSH:",
      "info" : "SwitchCase[42125-42181]:SwitchCase[42380-42436]"
    }, {
      "left" : "return Token.ASSIGN_URSH;",
      "right" : "return Token.ASSIGN_URSH;",
      "info" : "ReturnStatement[42190-42215]:ReturnStatement[42445-42470]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.ASSIGN_ADD:",
      "right" : "case com.google.javascript.rhino.head.Token.ASSIGN_ADD:",
      "info" : "SwitchCase[42222-42277]:SwitchCase[42477-42532]"
    }, {
      "left" : "return Token.ASSIGN_ADD;",
      "right" : "return Token.ASSIGN_ADD;",
      "info" : "ReturnStatement[42286-42310]:ReturnStatement[42541-42565]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.ASSIGN_SUB:",
      "right" : "case com.google.javascript.rhino.head.Token.ASSIGN_SUB:",
      "info" : "SwitchCase[42317-42372]:SwitchCase[42572-42627]"
    }, {
      "left" : "return Token.ASSIGN_SUB;",
      "right" : "return Token.ASSIGN_SUB;",
      "info" : "ReturnStatement[42381-42405]:ReturnStatement[42636-42660]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.ASSIGN_MUL:",
      "right" : "case com.google.javascript.rhino.head.Token.ASSIGN_MUL:",
      "info" : "SwitchCase[42412-42467]:SwitchCase[42667-42722]"
    }, {
      "left" : "return Token.ASSIGN_MUL;",
      "right" : "return Token.ASSIGN_MUL;",
      "info" : "ReturnStatement[42476-42500]:ReturnStatement[42731-42755]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.ASSIGN_DIV:",
      "right" : "case com.google.javascript.rhino.head.Token.ASSIGN_DIV:",
      "info" : "SwitchCase[42507-42562]:SwitchCase[42762-42817]"
    }, {
      "left" : "return Token.ASSIGN_DIV;",
      "right" : "return Token.ASSIGN_DIV;",
      "info" : "ReturnStatement[42571-42595]:ReturnStatement[42826-42850]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.ASSIGN_MOD:",
      "right" : "case com.google.javascript.rhino.head.Token.ASSIGN_MOD:",
      "info" : "SwitchCase[42602-42657]:SwitchCase[42857-42912]"
    }, {
      "left" : "return Token.ASSIGN_MOD;",
      "right" : "return Token.ASSIGN_MOD;",
      "info" : "ReturnStatement[42666-42690]:ReturnStatement[42921-42945]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.HOOK:",
      "right" : "case com.google.javascript.rhino.head.Token.HOOK:",
      "info" : "SwitchCase[42697-42746]:SwitchCase[42952-43001]"
    }, {
      "left" : "return Token.HOOK;",
      "right" : "return Token.HOOK;",
      "info" : "ReturnStatement[42755-42773]:ReturnStatement[43010-43028]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.OR:",
      "right" : "case com.google.javascript.rhino.head.Token.OR:",
      "info" : "SwitchCase[42780-42827]:SwitchCase[43035-43082]"
    }, {
      "left" : "return Token.OR;",
      "right" : "return Token.OR;",
      "info" : "ReturnStatement[42836-42852]:ReturnStatement[43091-43107]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.AND:",
      "right" : "case com.google.javascript.rhino.head.Token.AND:",
      "info" : "SwitchCase[42859-42907]:SwitchCase[43114-43162]"
    }, {
      "left" : "return Token.AND;",
      "right" : "return Token.AND;",
      "info" : "ReturnStatement[42916-42933]:ReturnStatement[43171-43188]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.INC:",
      "right" : "case com.google.javascript.rhino.head.Token.INC:",
      "info" : "SwitchCase[42940-42988]:SwitchCase[43195-43243]"
    }, {
      "left" : "return Token.INC;",
      "right" : "return Token.INC;",
      "info" : "ReturnStatement[42997-43014]:ReturnStatement[43252-43269]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.DEC:",
      "right" : "case com.google.javascript.rhino.head.Token.DEC:",
      "info" : "SwitchCase[43021-43069]:SwitchCase[43276-43324]"
    }, {
      "left" : "return Token.DEC;",
      "right" : "return Token.DEC;",
      "info" : "ReturnStatement[43078-43095]:ReturnStatement[43333-43350]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.FUNCTION:",
      "right" : "case com.google.javascript.rhino.head.Token.FUNCTION:",
      "info" : "SwitchCase[43102-43155]:SwitchCase[43357-43410]"
    }, {
      "left" : "return Token.FUNCTION;",
      "right" : "return Token.FUNCTION;",
      "info" : "ReturnStatement[43164-43186]:ReturnStatement[43419-43441]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.IF:",
      "right" : "case com.google.javascript.rhino.head.Token.IF:",
      "info" : "SwitchCase[43193-43240]:SwitchCase[43448-43495]"
    }, {
      "left" : "return Token.IF;",
      "right" : "return Token.IF;",
      "info" : "ReturnStatement[43249-43265]:ReturnStatement[43504-43520]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.SWITCH:",
      "right" : "case com.google.javascript.rhino.head.Token.SWITCH:",
      "info" : "SwitchCase[43272-43323]:SwitchCase[43527-43578]"
    }, {
      "left" : "return Token.SWITCH;",
      "right" : "return Token.SWITCH;",
      "info" : "ReturnStatement[43332-43352]:ReturnStatement[43587-43607]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.CASE:",
      "right" : "case com.google.javascript.rhino.head.Token.CASE:",
      "info" : "SwitchCase[43359-43408]:SwitchCase[43614-43663]"
    }, {
      "left" : "return Token.CASE;",
      "right" : "return Token.CASE;",
      "info" : "ReturnStatement[43417-43435]:ReturnStatement[43672-43690]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.DEFAULT:",
      "right" : "case com.google.javascript.rhino.head.Token.DEFAULT:",
      "info" : "SwitchCase[43442-43494]:SwitchCase[43697-43749]"
    }, {
      "left" : "return Token.DEFAULT_CASE;",
      "right" : "return Token.DEFAULT_CASE;",
      "info" : "ReturnStatement[43503-43529]:ReturnStatement[43758-43784]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.WHILE:",
      "right" : "case com.google.javascript.rhino.head.Token.WHILE:",
      "info" : "SwitchCase[43536-43586]:SwitchCase[43791-43841]"
    }, {
      "left" : "return Token.WHILE;",
      "right" : "return Token.WHILE;",
      "info" : "ReturnStatement[43595-43614]:ReturnStatement[43850-43869]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.DO:",
      "right" : "case com.google.javascript.rhino.head.Token.DO:",
      "info" : "SwitchCase[43621-43668]:SwitchCase[43876-43923]"
    }, {
      "left" : "return Token.DO;",
      "right" : "return Token.DO;",
      "info" : "ReturnStatement[43677-43693]:ReturnStatement[43932-43948]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.FOR:",
      "right" : "case com.google.javascript.rhino.head.Token.FOR:",
      "info" : "SwitchCase[43700-43748]:SwitchCase[43955-44003]"
    }, {
      "left" : "return Token.FOR;",
      "right" : "return Token.FOR;",
      "info" : "ReturnStatement[43757-43774]:ReturnStatement[44012-44029]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.BREAK:",
      "right" : "case com.google.javascript.rhino.head.Token.BREAK:",
      "info" : "SwitchCase[43781-43831]:SwitchCase[44036-44086]"
    }, {
      "left" : "return Token.BREAK;",
      "right" : "return Token.BREAK;",
      "info" : "ReturnStatement[43840-43859]:ReturnStatement[44095-44114]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.CONTINUE:",
      "right" : "case com.google.javascript.rhino.head.Token.CONTINUE:",
      "info" : "SwitchCase[43866-43919]:SwitchCase[44121-44174]"
    }, {
      "left" : "return Token.CONTINUE;",
      "right" : "return Token.CONTINUE;",
      "info" : "ReturnStatement[43928-43950]:ReturnStatement[44183-44205]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.VAR:",
      "right" : "case com.google.javascript.rhino.head.Token.VAR:",
      "info" : "SwitchCase[43957-44005]:SwitchCase[44212-44260]"
    }, {
      "left" : "return Token.VAR;",
      "right" : "return Token.VAR;",
      "info" : "ReturnStatement[44014-44031]:ReturnStatement[44269-44286]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.WITH:",
      "right" : "case com.google.javascript.rhino.head.Token.WITH:",
      "info" : "SwitchCase[44038-44087]:SwitchCase[44293-44342]"
    }, {
      "left" : "return Token.WITH;",
      "right" : "return Token.WITH;",
      "info" : "ReturnStatement[44096-44114]:ReturnStatement[44351-44369]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.CATCH:",
      "right" : "case com.google.javascript.rhino.head.Token.CATCH:",
      "info" : "SwitchCase[44121-44171]:SwitchCase[44376-44426]"
    }, {
      "left" : "return Token.CATCH;",
      "right" : "return Token.CATCH;",
      "info" : "ReturnStatement[44180-44199]:ReturnStatement[44435-44454]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.VOID:",
      "right" : "case com.google.javascript.rhino.head.Token.VOID:",
      "info" : "SwitchCase[44206-44255]:SwitchCase[44461-44510]"
    }, {
      "left" : "return Token.VOID;",
      "right" : "return Token.VOID;",
      "info" : "ReturnStatement[44264-44282]:ReturnStatement[44519-44537]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.EMPTY:",
      "right" : "case com.google.javascript.rhino.head.Token.EMPTY:",
      "info" : "SwitchCase[44289-44339]:SwitchCase[44544-44594]"
    }, {
      "left" : "return Token.EMPTY;",
      "right" : "return Token.EMPTY;",
      "info" : "ReturnStatement[44348-44367]:ReturnStatement[44603-44622]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.BLOCK:",
      "right" : "case com.google.javascript.rhino.head.Token.BLOCK:",
      "info" : "SwitchCase[44374-44424]:SwitchCase[44629-44679]"
    }, {
      "left" : "return Token.BLOCK;",
      "right" : "return Token.BLOCK;",
      "info" : "ReturnStatement[44433-44452]:ReturnStatement[44688-44707]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.LABEL:",
      "right" : "case com.google.javascript.rhino.head.Token.LABEL:",
      "info" : "SwitchCase[44459-44509]:SwitchCase[44714-44764]"
    }, {
      "left" : "return Token.LABEL;",
      "right" : "return Token.LABEL;",
      "info" : "ReturnStatement[44518-44537]:ReturnStatement[44773-44792]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.EXPR_VOID:",
      "right" : "case com.google.javascript.rhino.head.Token.EXPR_VOID:",
      "info" : "SwitchCase[44544-44598]:SwitchCase[44799-44853]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.EXPR_RESULT:",
      "right" : "case com.google.javascript.rhino.head.Token.EXPR_RESULT:",
      "info" : "SwitchCase[44605-44661]:SwitchCase[44860-44916]"
    }, {
      "left" : "return Token.EXPR_RESULT;",
      "right" : "return Token.EXPR_RESULT;",
      "info" : "ReturnStatement[44670-44695]:ReturnStatement[44925-44950]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.SCRIPT:",
      "right" : "case com.google.javascript.rhino.head.Token.SCRIPT:",
      "info" : "SwitchCase[44702-44753]:SwitchCase[44957-45008]"
    }, {
      "left" : "return Token.SCRIPT;",
      "right" : "return Token.SCRIPT;",
      "info" : "ReturnStatement[44762-44782]:ReturnStatement[45017-45037]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.GET:",
      "right" : "case com.google.javascript.rhino.head.Token.GET:",
      "info" : "SwitchCase[44789-44837]:SwitchCase[45044-45092]"
    }, {
      "left" : "return Token.GETTER_DEF;",
      "right" : "return Token.GETTER_DEF;",
      "info" : "ReturnStatement[44846-44870]:ReturnStatement[45101-45125]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.SET:",
      "right" : "case com.google.javascript.rhino.head.Token.SET:",
      "info" : "SwitchCase[44877-44925]:SwitchCase[45132-45180]"
    }, {
      "left" : "return Token.SETTER_DEF;",
      "right" : "return Token.SETTER_DEF;",
      "info" : "ReturnStatement[44934-44958]:ReturnStatement[45189-45213]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.CONST:",
      "right" : "case com.google.javascript.rhino.head.Token.CONST:",
      "info" : "SwitchCase[44965-45015]:SwitchCase[45220-45270]"
    }, {
      "left" : "return Token.CONST;",
      "right" : "return Token.CONST;",
      "info" : "ReturnStatement[45024-45043]:ReturnStatement[45279-45298]"
    }, {
      "left" : "case com.google.javascript.rhino.head.Token.DEBUGGER:",
      "right" : "case com.google.javascript.rhino.head.Token.DEBUGGER:",
      "info" : "SwitchCase[45050-45103]:SwitchCase[45305-45358]"
    }, {
      "left" : "return Token.DEBUGGER;",
      "right" : "return Token.DEBUGGER;",
      "info" : "ReturnStatement[45112-45134]:ReturnStatement[45367-45389]"
    }, {
      "left" : "throw new IllegalStateException(String.valueOf(token));",
      "right" : "throw new IllegalStateException(String.valueOf(token));",
      "info" : "ThrowStatement[45172-45227]:ThrowStatement[45427-45482]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[45307-45314]:Modifier[45562-45569]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[45315-45319]:SimpleType[45570-45574]"
    }, {
      "left" : "newNode",
      "right" : "newNode",
      "info" : "SimpleName[45320-45327]:SimpleName[45575-45582]"
    }, {
      "left" : "int type",
      "right" : "int type",
      "info" : "SingleVariableDeclaration[45328-45336]:SingleVariableDeclaration[45583-45591]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45338-45399]:Block[45593-45654]"
    }, {
      "left" : "return new Node(type).clonePropsFrom(templateNode);",
      "right" : "return new Node(type).clonePropsFrom(templateNode);",
      "info" : "ReturnStatement[45344-45395]:ReturnStatement[45599-45650]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[45403-45410]:Modifier[45658-45665]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[45411-45415]:SimpleType[45666-45670]"
    }, {
      "left" : "newNode",
      "right" : "newNode",
      "info" : "SimpleName[45416-45423]:SimpleName[45671-45678]"
    }, {
      "left" : "int type",
      "right" : "int type",
      "info" : "SingleVariableDeclaration[45424-45432]:SingleVariableDeclaration[45679-45687]"
    }, {
      "left" : "Node child1",
      "right" : "Node child1",
      "info" : "SingleVariableDeclaration[45434-45445]:SingleVariableDeclaration[45689-45700]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45447-45516]:Block[45702-45771]"
    }, {
      "left" : "return new Node(type, child1).clonePropsFrom(templateNode);",
      "right" : "return new Node(type, child1).clonePropsFrom(templateNode);",
      "info" : "ReturnStatement[45453-45512]:ReturnStatement[45708-45767]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[45520-45527]:Modifier[45775-45782]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[45528-45532]:SimpleType[45783-45787]"
    }, {
      "left" : "newNode",
      "right" : "newNode",
      "info" : "SimpleName[45533-45540]:SimpleName[45788-45795]"
    }, {
      "left" : "int type",
      "right" : "int type",
      "info" : "SingleVariableDeclaration[45541-45549]:SingleVariableDeclaration[45796-45804]"
    }, {
      "left" : "Node child1",
      "right" : "Node child1",
      "info" : "SingleVariableDeclaration[45551-45562]:SingleVariableDeclaration[45806-45817]"
    }, {
      "left" : "Node child2",
      "right" : "Node child2",
      "info" : "SingleVariableDeclaration[45564-45575]:SingleVariableDeclaration[45819-45830]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45577-45654]:Block[45832-45909]"
    }, {
      "left" : "return new Node(type, child1, child2).clonePropsFrom(templateNode);",
      "right" : "return new Node(type, child1, child2).clonePropsFrom(templateNode);",
      "info" : "ReturnStatement[45583-45650]:ReturnStatement[45838-45905]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[45658-45665]:Modifier[45913-45920]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[45666-45670]:SimpleType[45921-45925]"
    }, {
      "left" : "newNode",
      "right" : "newNode",
      "info" : "SimpleName[45671-45678]:SimpleName[45926-45933]"
    }, {
      "left" : "int type",
      "right" : "int type",
      "info" : "SingleVariableDeclaration[45679-45687]:SingleVariableDeclaration[45934-45942]"
    }, {
      "left" : "Node child1",
      "right" : "Node child1",
      "info" : "SingleVariableDeclaration[45689-45700]:SingleVariableDeclaration[45944-45955]"
    }, {
      "left" : "Node child2",
      "right" : "Node child2",
      "info" : "SingleVariableDeclaration[45702-45713]:SingleVariableDeclaration[45957-45968]"
    }, {
      "left" : "Node child3",
      "right" : "Node child3",
      "info" : "SingleVariableDeclaration[45715-45726]:SingleVariableDeclaration[45970-45981]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45728-45813]:Block[45983-46068]"
    }, {
      "left" : "return new Node(type, child1, child2, child3).clonePropsFrom(templateNode);",
      "right" : "return new Node(type, child1, child2, child3).clonePropsFrom(templateNode);",
      "info" : "ReturnStatement[45734-45809]:ReturnStatement[45989-46064]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[45817-45824]:Modifier[46072-46079]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[45825-45829]:SimpleType[46080-46084]"
    }, {
      "left" : "newStringNode",
      "right" : "newStringNode",
      "info" : "SimpleName[45830-45843]:SimpleName[46085-46098]"
    }, {
      "left" : "String value",
      "right" : "String value",
      "info" : "SingleVariableDeclaration[45844-45856]:SingleVariableDeclaration[46099-46111]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45858-45921]:Block[46113-46176]"
    }, {
      "left" : "return IR.string(value).clonePropsFrom(templateNode);",
      "right" : "return IR.string(value).clonePropsFrom(templateNode);",
      "info" : "ReturnStatement[45864-45917]:ReturnStatement[46119-46172]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[45925-45932]:Modifier[46180-46187]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[45933-45937]:SimpleType[46188-46192]"
    }, {
      "left" : "newStringNode",
      "right" : "newStringNode",
      "info" : "SimpleName[45938-45951]:SimpleName[46193-46206]"
    }, {
      "left" : "int type",
      "right" : "int type",
      "info" : "SingleVariableDeclaration[45952-45960]:SingleVariableDeclaration[46207-46215]"
    }, {
      "left" : "String value",
      "right" : "String value",
      "info" : "SingleVariableDeclaration[45962-45974]:SingleVariableDeclaration[46217-46229]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45976-46050]:Block[46231-46305]"
    }, {
      "left" : "return Node.newString(type, value).clonePropsFrom(templateNode);",
      "right" : "return Node.newString(type, value).clonePropsFrom(templateNode);",
      "info" : "ReturnStatement[45982-46046]:ReturnStatement[46237-46301]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[46054-46061]:Modifier[46309-46316]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[46062-46066]:SimpleType[46317-46321]"
    }, {
      "left" : "newNumberNode",
      "right" : "newNumberNode",
      "info" : "SimpleName[46067-46080]:SimpleName[46322-46335]"
    }, {
      "left" : "Double value",
      "right" : "Double value",
      "info" : "SingleVariableDeclaration[46081-46093]:SingleVariableDeclaration[46336-46348]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46095-46158]:Block[46350-46413]"
    }, {
      "left" : "return IR.number(value).clonePropsFrom(templateNode);",
      "right" : "return IR.number(value).clonePropsFrom(templateNode);",
      "info" : "ReturnStatement[46101-46154]:ReturnStatement[46356-46409]"
    } ]
  },
  "interFileMappings" : { }
}