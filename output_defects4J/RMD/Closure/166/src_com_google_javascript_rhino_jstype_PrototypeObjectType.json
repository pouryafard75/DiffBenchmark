{
  "matchedElements" : [
 {
    "left" : "class : PrototypeObjectType",
    "right" : "class : PrototypeObjectType",
    "info" : "TypeDeclaration[2045-17836]:TypeDeclaration[2045-18061]"
  }, {
    "left" : "serialVersionUID",
    "right" : "serialVersionUID",
    "info" : "FieldDeclaration[2800-2848]:FieldDeclaration[2800-2848]"
  }, {
    "left" : "className",
    "right" : "className",
    "info" : "FieldDeclaration[2852-2883]:FieldDeclaration[2852-2883]"
  }, {
    "left" : "properties",
    "right" : "properties",
    "info" : "FieldDeclaration[2886-2933]:FieldDeclaration[2886-2933]"
  }, {
    "left" : "nativeType",
    "right" : "nativeType",
    "info" : "FieldDeclaration[2936-2969]:FieldDeclaration[2936-2969]"
  }, {
    "left" : "implicitPrototypeFallback",
    "right" : "implicitPrototypeFallback",
    "info" : "FieldDeclaration[3185-3230]:FieldDeclaration[3185-3230]"
  }, {
    "left" : "ownerFunction",
    "right" : "ownerFunction",
    "info" : "FieldDeclaration[3453-3495]:FieldDeclaration[3453-3495]"
  }, {
    "left" : "prettyPrint",
    "right" : "prettyPrint",
    "info" : "FieldDeclaration[3607-3643]:FieldDeclaration[3607-3643]"
  }, {
    "left" : "MAX_PRETTY_PRINTED_PROPERTIES",
    "right" : "MAX_PRETTY_PRINTED_PROPERTIES",
    "info" : "FieldDeclaration[3647-3706]:FieldDeclaration[3647-3706]"
  }, {
    "left" : "package PrototypeObjectType(registry , className , implicitPrototype )",
    "right" : "package PrototypeObjectType(registry , className , implicitPrototype )",
    "info" : "MethodDeclaration[3710-4292]:MethodDeclaration[3710-4292]"
  }, {
    "left" : "package PrototypeObjectType(registry , className , implicitPrototype , nativeType boolean)",
    "right" : "package PrototypeObjectType(registry , className , implicitPrototype , nativeType boolean)",
    "info" : "MethodDeclaration[4296-4885]:MethodDeclaration[4296-4885]"
  }, {
    "left" : "public getSlot(name ) : ",
    "right" : "public getSlot(name ) : ",
    "info" : "MethodDeclaration[4889-5432]:MethodDeclaration[4889-5432]"
  }, {
    "left" : "public getPropertiesCount() : int",
    "right" : "public getPropertiesCount() : int",
    "info" : "MethodDeclaration[5436-5915]:MethodDeclaration[5436-5915]"
  }, {
    "left" : "public hasProperty(propertyName ) : boolean",
    "right" : "public hasProperty(propertyName ) : boolean",
    "info" : "MethodDeclaration[5919-6087]:MethodDeclaration[5919-6087]"
  }, {
    "left" : "public hasOwnProperty(propertyName ) : boolean",
    "right" : "public hasOwnProperty(propertyName ) : boolean",
    "info" : "MethodDeclaration[6091-6208]:MethodDeclaration[6091-6208]"
  }, {
    "left" : "public getOwnPropertyNames() : ",
    "right" : "public getOwnPropertyNames() : ",
    "info" : "MethodDeclaration[6212-6302]:MethodDeclaration[6212-6302]"
  }, {
    "left" : "public isPropertyTypeDeclared(property ) : boolean",
    "right" : "public isPropertyTypeDeclared(property ) : boolean",
    "info" : "MethodDeclaration[6306-6512]:MethodDeclaration[6306-6512]"
  }, {
    "left" : "package collectPropertyNames(props ...) : void",
    "right" : "package collectPropertyNames(props ...) : void",
    "info" : "MethodDeclaration[6516-6808]:MethodDeclaration[6516-6808]"
  }, {
    "left" : "public isPropertyTypeInferred(property ) : boolean",
    "right" : "public isPropertyTypeInferred(property ) : boolean",
    "info" : "MethodDeclaration[6812-7017]:MethodDeclaration[6812-7017]"
  }, {
    "left" : "public getPropertyType(property ) : ",
    "right" : "public getPropertyType(property ) : ",
    "info" : "MethodDeclaration[7021-7246]:MethodDeclaration[7021-7246]"
  }, {
    "left" : "public isPropertyInExterns(propertyName ) : boolean",
    "right" : "public isPropertyInExterns(propertyName ) : boolean",
    "info" : "MethodDeclaration[7250-7615]:MethodDeclaration[7250-7615]"
  }, {
    "left" : "package defineProperty(name , type , inferred boolean, propertyNode ) : boolean",
    "right" : "package defineProperty(name , type , inferred boolean, propertyNode ) : boolean",
    "info" : "MethodDeclaration[7619-8159]:MethodDeclaration[7619-8159]"
  }, {
    "left" : "public removeProperty(name ) : boolean",
    "right" : "public removeProperty(name ) : boolean",
    "info" : "MethodDeclaration[8163-8267]:MethodDeclaration[8163-8267]"
  }, {
    "left" : "public getPropertyNode(propertyName ) : ",
    "right" : "public getPropertyNode(propertyName ) : ",
    "info" : "MethodDeclaration[8271-8618]:MethodDeclaration[8271-8618]"
  }, {
    "left" : "public getOwnPropertyJSDocInfo(propertyName ) : ",
    "right" : "public getOwnPropertyJSDocInfo(propertyName ) : ",
    "info" : "MethodDeclaration[8622-8823]:MethodDeclaration[8622-8823]"
  }, {
    "left" : "public setPropertyJSDocInfo(propertyName , info ) : void",
    "right" : "public setPropertyJSDocInfo(propertyName , info ) : void",
    "info" : "MethodDeclaration[8827-9545]:MethodDeclaration[8827-9545]"
  }, {
    "left" : "public matchesNumberContext() : boolean",
    "right" : "public matchesNumberContext() : boolean",
    "info" : "MethodDeclaration[9549-9751]:MethodDeclaration[9549-9751]"
  }, {
    "left" : "public matchesStringContext() : boolean",
    "right" : "public matchesStringContext() : boolean",
    "info" : "MethodDeclaration[9755-10022]:MethodDeclaration[9755-10022]"
  }, {
    "left" : "private hasOverridenNativeProperty(propertyName ) : boolean",
    "right" : "private hasOverridenNativeProperty(propertyName ) : boolean",
    "info" : "MethodDeclaration[10026-10687]:MethodDeclaration[10026-10687]"
  }, {
    "left" : "public unboxesTo() : ",
    "right" : "public unboxesTo() : ",
    "info" : "MethodDeclaration[10691-11059]:MethodDeclaration[10691-11059]"
  }, {
    "left" : "public matchesObjectContext() : boolean",
    "right" : "public matchesObjectContext() : boolean",
    "info" : "MethodDeclaration[11063-11135]:MethodDeclaration[11063-11135]"
  }, {
    "left" : "public canBeCalled() : boolean",
    "right" : "public canBeCalled() : boolean",
    "info" : "MethodDeclaration[11139-11212]:MethodDeclaration[11139-11212]"
  }, {
    "left" : "package toStringHelper(forAnnotations boolean) : ",
    "right" : "package toStringHelper(forAnnotations boolean) : ",
    "info" : "MethodDeclaration[11216-12461]:MethodDeclaration[11216-12461]"
  }, {
    "left" : "package setPrettyPrint(prettyPrint boolean) : void",
    "right" : "package setPrettyPrint(prettyPrint boolean) : void",
    "info" : "MethodDeclaration[12465-12547]:MethodDeclaration[12465-12547]"
  }, {
    "left" : "package isPrettyPrint() : boolean",
    "right" : "package isPrettyPrint() : boolean",
    "info" : "MethodDeclaration[12551-12604]:MethodDeclaration[12551-12604]"
  }, {
    "left" : "public getConstructor() : ",
    "right" : "public getConstructor() : ",
    "info" : "MethodDeclaration[12608-12679]:MethodDeclaration[12608-12679]"
  }, {
    "left" : "public getImplicitPrototype() : ",
    "right" : "public getImplicitPrototype() : ",
    "info" : "MethodDeclaration[12683-12779]:MethodDeclaration[12683-12779]"
  }, {
    "left" : "package setImplicitPrototype(implicitPrototype ) : void",
    "right" : "package setImplicitPrototype(implicitPrototype ) : void",
    "info" : "MethodDeclaration[12783-13202]:MethodDeclaration[12783-13202]"
  }, {
    "left" : "public getReferenceName() : ",
    "right" : "public getReferenceName() : ",
    "info" : "MethodDeclaration[13206-13449]:MethodDeclaration[13206-13449]"
  }, {
    "left" : "public hasReferenceName() : boolean",
    "right" : "public hasReferenceName() : boolean",
    "info" : "MethodDeclaration[13453-13559]:MethodDeclaration[13453-13559]"
  }, {
    "left" : "public isSubtype(that ) : boolean",
    "right" : "public isSubtype(that ) : boolean",
    "info" : "MethodDeclaration[13563-15119]:MethodDeclaration[13563-15119]"
  }, {
    "left" : "private implicitPrototypeChainIsUnknown() : boolean",
    "right" : "private implicitPrototypeChainIsUnknown() : boolean",
    "info" : "MethodDeclaration[15123-15365]:MethodDeclaration[15123-15365]"
  }, {
    "left" : "public hasCachedValues() : boolean",
    "right" : "public hasCachedValues() : boolean",
    "info" : "MethodDeclaration[15369-15455]:MethodDeclaration[15369-15455]"
  }, {
    "left" : "public isNativeObjectType() : boolean",
    "right" : "public isNativeObjectType() : boolean",
    "info" : "MethodDeclaration[15459-15579]:MethodDeclaration[15459-15579]"
  }, {
    "left" : "package setOwnerFunction(type ) : void",
    "right" : "package setOwnerFunction(type ) : void",
    "info" : "MethodDeclaration[15583-15736]:MethodDeclaration[15583-15736]"
  }, {
    "left" : "public getOwnerFunction() : ",
    "right" : "public getOwnerFunction() : ",
    "info" : "MethodDeclaration[15740-15822]:MethodDeclaration[15740-15822]"
  }, {
    "left" : "public getCtorImplementedInterfaces() : ",
    "right" : "public getCtorImplementedInterfaces() : ",
    "info" : "MethodDeclaration[15826-16037]:MethodDeclaration[15826-16037]"
  }, {
    "left" : "public getCtorExtendedInterfaces() : ",
    "right" : "public getCtorExtendedInterfaces() : ",
    "info" : "MethodDeclaration[16041-16246]:MethodDeclaration[16041-16246]"
  }, {
    "left" : "package resolveInternal(t , scope ) : ",
    "right" : "package resolveInternal(t , scope ) : ",
    "info" : "MethodDeclaration[16250-16696]:MethodDeclaration[16250-16696]"
  }, {
    "left" : "public matchConstraint(constraint ) : void",
    "right" : "public matchConstraint(constraint ) : void",
    "info" : "MethodDeclaration[16700-17334]:MethodDeclaration[16700-17559]"
  }, {
    "left" : "public matchRecordTypeConstraint(constraintObj ) : void",
    "right" : "public matchRecordTypeConstraint(constraintObj ) : void",
    "info" : "MethodDeclaration[17338-17833]:MethodDeclaration[17563-18058]"
  } ],
  "mappings" : [
 {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[2751-2756]:TYPE_DECLARATION_KIND[2751-2756]"
  }, {
    "left" : "PrototypeObjectType",
    "right" : "PrototypeObjectType",
    "info" : "SimpleName[4131-4150]:SimpleName[4131-4150]"
  }, {
    "left" : "JSTypeRegistry registry",
    "right" : "JSTypeRegistry registry",
    "info" : "SingleVariableDeclaration[4151-4174]:SingleVariableDeclaration[4151-4174]"
  }, {
    "left" : "String className",
    "right" : "String className",
    "info" : "SingleVariableDeclaration[4176-4192]:SingleVariableDeclaration[4176-4192]"
  }, {
    "left" : "ObjectType implicitPrototype",
    "right" : "ObjectType implicitPrototype",
    "info" : "SingleVariableDeclaration[4200-4228]:SingleVariableDeclaration[4200-4228]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4230-4292]:Block[4230-4292]"
  }, {
    "left" : "this(registry, className, implicitPrototype, false);",
    "right" : "this(registry, className, implicitPrototype, false);",
    "info" : "ConstructorInvocation[4236-4288]:ConstructorInvocation[4236-4288]"
  }, {
    "left" : "PrototypeObjectType",
    "right" : "PrototypeObjectType",
    "info" : "SimpleName[4421-4440]:SimpleName[4421-4440]"
  }, {
    "left" : "JSTypeRegistry registry",
    "right" : "JSTypeRegistry registry",
    "info" : "SingleVariableDeclaration[4441-4464]:SingleVariableDeclaration[4441-4464]"
  }, {
    "left" : "String className",
    "right" : "String className",
    "info" : "SingleVariableDeclaration[4466-4482]:SingleVariableDeclaration[4466-4482]"
  }, {
    "left" : "ObjectType implicitPrototype",
    "right" : "ObjectType implicitPrototype",
    "info" : "SingleVariableDeclaration[4490-4518]:SingleVariableDeclaration[4490-4518]"
  }, {
    "left" : "boolean nativeType",
    "right" : "boolean nativeType",
    "info" : "SingleVariableDeclaration[4520-4538]:SingleVariableDeclaration[4520-4538]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4540-4885]:Block[4540-4885]"
  }, {
    "left" : "super(registry);",
    "right" : "super(registry);",
    "info" : "SuperConstructorInvocation[4546-4562]:SuperConstructorInvocation[4546-4562]"
  }, {
    "left" : "this.properties = Maps.newTreeMap();",
    "right" : "this.properties = Maps.newTreeMap();",
    "info" : "ExpressionStatement[4567-4603]:ExpressionStatement[4567-4603]"
  }, {
    "left" : "this.className = className;",
    "right" : "this.className = className;",
    "info" : "ExpressionStatement[4608-4635]:ExpressionStatement[4608-4635]"
  }, {
    "left" : "this.nativeType = nativeType;",
    "right" : "this.nativeType = nativeType;",
    "info" : "ExpressionStatement[4640-4669]:ExpressionStatement[4640-4669]"
  }, {
    "left" : "if (nativeType || implicitPrototype != null)",
    "right" : "if (nativeType || implicitPrototype != null)",
    "info" : "IfStatement[4674-4881]:IfStatement[4674-4881]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4719-4773]:Block[4719-4773]"
  }, {
    "left" : "setImplicitPrototype(implicitPrototype);",
    "right" : "setImplicitPrototype(implicitPrototype);",
    "info" : "ExpressionStatement[4727-4767]:ExpressionStatement[4727-4767]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4779-4881]:Block[4779-4881]"
  }, {
    "left" : "setImplicitPrototype(\n          registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE));",
    "right" : "setImplicitPrototype(\n          registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE));",
    "info" : "ExpressionStatement[4787-4875]:ExpressionStatement[4787-4875]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[4889-4898]:MarkerAnnotation[4889-4898]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[4901-4907]:Modifier[4901-4907]"
  }, {
    "left" : "Property",
    "right" : "Property",
    "info" : "SimpleType[4908-4916]:SimpleType[4908-4916]"
  }, {
    "left" : "getSlot",
    "right" : "getSlot",
    "info" : "SimpleName[4917-4924]:SimpleName[4917-4924]"
  }, {
    "left" : "String name",
    "right" : "String name",
    "info" : "SingleVariableDeclaration[4925-4936]:SingleVariableDeclaration[4925-4936]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4938-5432]:Block[4938-5432]"
  }, {
    "left" : "if (properties.containsKey(name))",
    "right" : "if (properties.containsKey(name))",
    "info" : "IfStatement[4944-5020]:IfStatement[4944-5020]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4978-5020]:Block[4978-5020]"
  }, {
    "left" : "return properties.get(name);",
    "right" : "return properties.get(name);",
    "info" : "ReturnStatement[4986-5014]:ReturnStatement[4986-5014]"
  }, {
    "left" : "ObjectType implicitPrototype = getImplicitPrototype();",
    "right" : "ObjectType implicitPrototype = getImplicitPrototype();",
    "info" : "VariableDeclarationStatement[5025-5079]:VariableDeclarationStatement[5025-5079]"
  }, {
    "left" : "if (implicitPrototype != null)",
    "right" : "if (implicitPrototype != null)",
    "info" : "IfStatement[5084-5232]:IfStatement[5084-5232]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5115-5232]:Block[5115-5232]"
  }, {
    "left" : "Property prop = implicitPrototype.getSlot(name);",
    "right" : "Property prop = implicitPrototype.getSlot(name);",
    "info" : "VariableDeclarationStatement[5123-5171]:VariableDeclarationStatement[5123-5171]"
  }, {
    "left" : "if (prop != null)",
    "right" : "if (prop != null)",
    "info" : "IfStatement[5178-5226]:IfStatement[5178-5226]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5196-5226]:Block[5196-5226]"
  }, {
    "left" : "return prop;",
    "right" : "return prop;",
    "info" : "ReturnStatement[5206-5218]:ReturnStatement[5206-5218]"
  }, {
    "left" : "for (ObjectType interfaceType : getCtorExtendedInterfaces())",
    "right" : "for (ObjectType interfaceType : getCtorExtendedInterfaces())",
    "info" : "EnhancedForStatement[5237-5411]:EnhancedForStatement[5237-5411]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5298-5411]:Block[5298-5411]"
  }, {
    "left" : "Property prop = interfaceType.getSlot(name);",
    "right" : "Property prop = interfaceType.getSlot(name);",
    "info" : "VariableDeclarationStatement[5306-5350]:VariableDeclarationStatement[5306-5350]"
  }, {
    "left" : "if (prop != null)",
    "right" : "if (prop != null)",
    "info" : "IfStatement[5357-5405]:IfStatement[5357-5405]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5375-5405]:Block[5375-5405]"
  }, {
    "left" : "return prop;",
    "right" : "return prop;",
    "info" : "ReturnStatement[5385-5397]:ReturnStatement[5385-5397]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[5416-5428]:ReturnStatement[5416-5428]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[5499-5508]:MarkerAnnotation[5499-5508]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[5511-5517]:Modifier[5511-5517]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[5518-5521]:PrimitiveType[5518-5521]"
  }, {
    "left" : "getPropertiesCount",
    "right" : "getPropertiesCount",
    "info" : "SimpleName[5522-5540]:SimpleName[5522-5540]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5543-5915]:Block[5543-5915]"
  }, {
    "left" : "ObjectType implicitPrototype = getImplicitPrototype();",
    "right" : "ObjectType implicitPrototype = getImplicitPrototype();",
    "info" : "VariableDeclarationStatement[5549-5603]:VariableDeclarationStatement[5549-5603]"
  }, {
    "left" : "if (implicitPrototype == null)",
    "right" : "if (implicitPrototype == null)",
    "info" : "IfStatement[5608-5683]:IfStatement[5608-5683]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5639-5683]:Block[5639-5683]"
  }, {
    "left" : "return this.properties.size();",
    "right" : "return this.properties.size();",
    "info" : "ReturnStatement[5647-5677]:ReturnStatement[5647-5677]"
  }, {
    "left" : "int localCount = 0;",
    "right" : "int localCount = 0;",
    "info" : "VariableDeclarationStatement[5688-5707]:VariableDeclarationStatement[5688-5707]"
  }, {
    "left" : "for (String property : properties.keySet())",
    "right" : "for (String property : properties.keySet())",
    "info" : "EnhancedForStatement[5712-5847]:EnhancedForStatement[5712-5847]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5756-5847]:Block[5756-5847]"
  }, {
    "left" : "if (!implicitPrototype.hasProperty(property))",
    "right" : "if (!implicitPrototype.hasProperty(property))",
    "info" : "IfStatement[5764-5841]:IfStatement[5764-5841]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5810-5841]:Block[5810-5841]"
  }, {
    "left" : "localCount++;",
    "right" : "localCount++;",
    "info" : "ExpressionStatement[5820-5833]:ExpressionStatement[5820-5833]"
  }, {
    "left" : "return implicitPrototype.getPropertiesCount() + localCount;",
    "right" : "return implicitPrototype.getPropertiesCount() + localCount;",
    "info" : "ReturnStatement[5852-5911]:ReturnStatement[5852-5911]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[5919-5928]:MarkerAnnotation[5919-5928]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[5931-5937]:Modifier[5931-5937]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[5938-5945]:PrimitiveType[5938-5945]"
  }, {
    "left" : "hasProperty",
    "right" : "hasProperty",
    "info" : "SimpleName[5946-5957]:SimpleName[5946-5957]"
  }, {
    "left" : "String propertyName",
    "right" : "String propertyName",
    "info" : "SingleVariableDeclaration[5958-5977]:SingleVariableDeclaration[5958-5977]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5979-6087]:Block[5979-6087]"
  }, {
    "left" : "return isUnknownType() || getSlot(propertyName) != null;",
    "right" : "return isUnknownType() || getSlot(propertyName) != null;",
    "info" : "ReturnStatement[6027-6083]:ReturnStatement[6027-6083]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[6091-6100]:MarkerAnnotation[6091-6100]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[6103-6109]:Modifier[6103-6109]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[6110-6117]:PrimitiveType[6110-6117]"
  }, {
    "left" : "hasOwnProperty",
    "right" : "hasOwnProperty",
    "info" : "SimpleName[6118-6132]:SimpleName[6118-6132]"
  }, {
    "left" : "String propertyName",
    "right" : "String propertyName",
    "info" : "SingleVariableDeclaration[6133-6152]:SingleVariableDeclaration[6133-6152]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6154-6208]:Block[6154-6208]"
  }, {
    "left" : "return properties.get(propertyName) != null;",
    "right" : "return properties.get(propertyName) != null;",
    "info" : "ReturnStatement[6160-6204]:ReturnStatement[6160-6204]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[6212-6221]:MarkerAnnotation[6212-6221]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[6224-6230]:Modifier[6224-6230]"
  }, {
    "left" : "Set<String>",
    "right" : "Set<String>",
    "info" : "ParameterizedType[6231-6242]:ParameterizedType[6231-6242]"
  }, {
    "left" : "getOwnPropertyNames",
    "right" : "getOwnPropertyNames",
    "info" : "SimpleName[6243-6262]:SimpleName[6243-6262]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6265-6302]:Block[6265-6302]"
  }, {
    "left" : "return properties.keySet();",
    "right" : "return properties.keySet();",
    "info" : "ReturnStatement[6271-6298]:ReturnStatement[6271-6298]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[6306-6315]:MarkerAnnotation[6306-6315]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[6318-6324]:Modifier[6318-6324]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[6325-6332]:PrimitiveType[6325-6332]"
  }, {
    "left" : "isPropertyTypeDeclared",
    "right" : "isPropertyTypeDeclared",
    "info" : "SimpleName[6333-6355]:SimpleName[6333-6355]"
  }, {
    "left" : "String property",
    "right" : "String property",
    "info" : "SingleVariableDeclaration[6356-6371]:SingleVariableDeclaration[6356-6371]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6373-6512]:Block[6373-6512]"
  }, {
    "left" : "StaticSlot<JSType> slot = getSlot(property);",
    "right" : "StaticSlot<JSType> slot = getSlot(property);",
    "info" : "VariableDeclarationStatement[6379-6423]:VariableDeclarationStatement[6379-6423]"
  }, {
    "left" : "if (slot == null)",
    "right" : "if (slot == null)",
    "info" : "IfStatement[6428-6473]:IfStatement[6428-6473]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6446-6473]:Block[6446-6473]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[6454-6467]:ReturnStatement[6454-6467]"
  }, {
    "left" : "return !slot.isTypeInferred();",
    "right" : "return !slot.isTypeInferred();",
    "info" : "ReturnStatement[6478-6508]:ReturnStatement[6478-6508]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[6516-6525]:MarkerAnnotation[6516-6525]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[6528-6532]:PrimitiveType[6528-6532]"
  }, {
    "left" : "collectPropertyNames",
    "right" : "collectPropertyNames",
    "info" : "SimpleName[6533-6553]:SimpleName[6533-6553]"
  }, {
    "left" : "Set<String> props",
    "right" : "Set<String> props",
    "info" : "SingleVariableDeclaration[6554-6571]:SingleVariableDeclaration[6554-6571]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6573-6808]:Block[6573-6808]"
  }, {
    "left" : "for (String prop : properties.keySet())",
    "right" : "for (String prop : properties.keySet())",
    "info" : "EnhancedForStatement[6579-6649]:EnhancedForStatement[6579-6649]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6619-6649]:Block[6619-6649]"
  }, {
    "left" : "props.add(prop);",
    "right" : "props.add(prop);",
    "info" : "ExpressionStatement[6627-6643]:ExpressionStatement[6627-6643]"
  }, {
    "left" : "ObjectType implicitPrototype = getImplicitPrototype();",
    "right" : "ObjectType implicitPrototype = getImplicitPrototype();",
    "info" : "VariableDeclarationStatement[6654-6708]:VariableDeclarationStatement[6654-6708]"
  }, {
    "left" : "if (implicitPrototype != null)",
    "right" : "if (implicitPrototype != null)",
    "info" : "IfStatement[6713-6804]:IfStatement[6713-6804]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6744-6804]:Block[6744-6804]"
  }, {
    "left" : "implicitPrototype.collectPropertyNames(props);",
    "right" : "implicitPrototype.collectPropertyNames(props);",
    "info" : "ExpressionStatement[6752-6798]:ExpressionStatement[6752-6798]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[6812-6821]:MarkerAnnotation[6812-6821]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[6824-6830]:Modifier[6824-6830]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[6831-6838]:PrimitiveType[6831-6838]"
  }, {
    "left" : "isPropertyTypeInferred",
    "right" : "isPropertyTypeInferred",
    "info" : "SimpleName[6839-6861]:SimpleName[6839-6861]"
  }, {
    "left" : "String property",
    "right" : "String property",
    "info" : "SingleVariableDeclaration[6862-6877]:SingleVariableDeclaration[6862-6877]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6879-7017]:Block[6879-7017]"
  }, {
    "left" : "StaticSlot<JSType> slot = getSlot(property);",
    "right" : "StaticSlot<JSType> slot = getSlot(property);",
    "info" : "VariableDeclarationStatement[6885-6929]:VariableDeclarationStatement[6885-6929]"
  }, {
    "left" : "if (slot == null)",
    "right" : "if (slot == null)",
    "info" : "IfStatement[6934-6979]:IfStatement[6934-6979]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6952-6979]:Block[6952-6979]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[6960-6973]:ReturnStatement[6960-6973]"
  }, {
    "left" : "return slot.isTypeInferred();",
    "right" : "return slot.isTypeInferred();",
    "info" : "ReturnStatement[6984-7013]:ReturnStatement[6984-7013]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[7021-7030]:MarkerAnnotation[7021-7030]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[7033-7039]:Modifier[7033-7039]"
  }, {
    "left" : "JSType",
    "right" : "JSType",
    "info" : "SimpleType[7040-7046]:SimpleType[7040-7046]"
  }, {
    "left" : "getPropertyType",
    "right" : "getPropertyType",
    "info" : "SimpleName[7047-7062]:SimpleName[7047-7062]"
  }, {
    "left" : "String property",
    "right" : "String property",
    "info" : "SingleVariableDeclaration[7063-7078]:SingleVariableDeclaration[7063-7078]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7080-7246]:Block[7080-7246]"
  }, {
    "left" : "StaticSlot<JSType> slot = getSlot(property);",
    "right" : "StaticSlot<JSType> slot = getSlot(property);",
    "info" : "VariableDeclarationStatement[7086-7130]:VariableDeclarationStatement[7086-7130]"
  }, {
    "left" : "if (slot == null)",
    "right" : "if (slot == null)",
    "info" : "IfStatement[7135-7215]:IfStatement[7135-7215]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7153-7215]:Block[7153-7215]"
  }, {
    "left" : "return getNativeType(JSTypeNative.UNKNOWN_TYPE);",
    "right" : "return getNativeType(JSTypeNative.UNKNOWN_TYPE);",
    "info" : "ReturnStatement[7161-7209]:ReturnStatement[7161-7209]"
  }, {
    "left" : "return slot.getType();",
    "right" : "return slot.getType();",
    "info" : "ReturnStatement[7220-7242]:ReturnStatement[7220-7242]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[7250-7259]:MarkerAnnotation[7250-7259]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[7262-7268]:Modifier[7262-7268]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[7269-7276]:PrimitiveType[7269-7276]"
  }, {
    "left" : "isPropertyInExterns",
    "right" : "isPropertyInExterns",
    "info" : "SimpleName[7277-7296]:SimpleName[7277-7296]"
  }, {
    "left" : "String propertyName",
    "right" : "String propertyName",
    "info" : "SingleVariableDeclaration[7297-7316]:SingleVariableDeclaration[7297-7316]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7318-7615]:Block[7318-7615]"
  }, {
    "left" : "Property p = properties.get(propertyName);",
    "right" : "Property p = properties.get(propertyName);",
    "info" : "VariableDeclarationStatement[7324-7366]:VariableDeclarationStatement[7324-7366]"
  }, {
    "left" : "if (p != null)",
    "right" : "if (p != null)",
    "info" : "IfStatement[7371-7425]:IfStatement[7371-7425]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7386-7425]:Block[7386-7425]"
  }, {
    "left" : "return p.isFromExterns();",
    "right" : "return p.isFromExterns();",
    "info" : "ReturnStatement[7394-7419]:ReturnStatement[7394-7419]"
  }, {
    "left" : "ObjectType implicitPrototype = getImplicitPrototype();",
    "right" : "ObjectType implicitPrototype = getImplicitPrototype();",
    "info" : "VariableDeclarationStatement[7430-7484]:VariableDeclarationStatement[7430-7484]"
  }, {
    "left" : "if (implicitPrototype != null)",
    "right" : "if (implicitPrototype != null)",
    "info" : "IfStatement[7489-7593]:IfStatement[7489-7593]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7520-7593]:Block[7520-7593]"
  }, {
    "left" : "return implicitPrototype.isPropertyInExterns(propertyName);",
    "right" : "return implicitPrototype.isPropertyInExterns(propertyName);",
    "info" : "ReturnStatement[7528-7587]:ReturnStatement[7528-7587]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[7598-7611]:ReturnStatement[7598-7611]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[7619-7628]:MarkerAnnotation[7619-7628]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[7631-7638]:PrimitiveType[7631-7638]"
  }, {
    "left" : "defineProperty",
    "right" : "defineProperty",
    "info" : "SimpleName[7639-7653]:SimpleName[7639-7653]"
  }, {
    "left" : "String name",
    "right" : "String name",
    "info" : "SingleVariableDeclaration[7654-7665]:SingleVariableDeclaration[7654-7665]"
  }, {
    "left" : "JSType type",
    "right" : "JSType type",
    "info" : "SingleVariableDeclaration[7667-7678]:SingleVariableDeclaration[7667-7678]"
  }, {
    "left" : "boolean inferred",
    "right" : "boolean inferred",
    "info" : "SingleVariableDeclaration[7680-7696]:SingleVariableDeclaration[7680-7696]"
  }, {
    "left" : "Node propertyNode",
    "right" : "Node propertyNode",
    "info" : "SingleVariableDeclaration[7704-7721]:SingleVariableDeclaration[7704-7721]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7723-8159]:Block[7723-8159]"
  }, {
    "left" : "if (hasOwnDeclaredProperty(name))",
    "right" : "if (hasOwnDeclaredProperty(name))",
    "info" : "IfStatement[7729-7790]:IfStatement[7729-7790]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7763-7790]:Block[7763-7790]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[7771-7784]:ReturnStatement[7771-7784]"
  }, {
    "left" : "Property newProp = new Property(\n        name, type, inferred, propertyNode);",
    "right" : "Property newProp = new Property(\n        name, type, inferred, propertyNode);",
    "info" : "VariableDeclarationStatement[7795-7872]:VariableDeclarationStatement[7795-7872]"
  }, {
    "left" : "Property oldProp = properties.get(name);",
    "right" : "Property oldProp = properties.get(name);",
    "info" : "VariableDeclarationStatement[7877-7917]:VariableDeclarationStatement[7877-7917]"
  }, {
    "left" : "if (oldProp != null)",
    "right" : "if (oldProp != null)",
    "info" : "IfStatement[7922-8103]:IfStatement[7922-8103]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7943-8103]:Block[7943-8103]"
  }, {
    "left" : "newProp.setJSDocInfo(oldProp.getJSDocInfo());",
    "right" : "newProp.setJSDocInfo(oldProp.getJSDocInfo());",
    "info" : "ExpressionStatement[8052-8097]:ExpressionStatement[8052-8097]"
  }, {
    "left" : "properties.put(name, newProp);",
    "right" : "properties.put(name, newProp);",
    "info" : "ExpressionStatement[8108-8138]:ExpressionStatement[8108-8138]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[8143-8155]:ReturnStatement[8143-8155]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[8163-8172]:MarkerAnnotation[8163-8172]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[8175-8181]:Modifier[8175-8181]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[8182-8189]:PrimitiveType[8182-8189]"
  }, {
    "left" : "removeProperty",
    "right" : "removeProperty",
    "info" : "SimpleName[8190-8204]:SimpleName[8190-8204]"
  }, {
    "left" : "String name",
    "right" : "String name",
    "info" : "SingleVariableDeclaration[8205-8216]:SingleVariableDeclaration[8205-8216]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8218-8267]:Block[8218-8267]"
  }, {
    "left" : "return properties.remove(name) != null;",
    "right" : "return properties.remove(name) != null;",
    "info" : "ReturnStatement[8224-8263]:ReturnStatement[8224-8263]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[8271-8280]:MarkerAnnotation[8271-8280]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[8283-8289]:Modifier[8283-8289]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[8290-8294]:SimpleType[8290-8294]"
  }, {
    "left" : "getPropertyNode",
    "right" : "getPropertyNode",
    "info" : "SimpleName[8295-8310]:SimpleName[8295-8310]"
  }, {
    "left" : "String propertyName",
    "right" : "String propertyName",
    "info" : "SingleVariableDeclaration[8311-8330]:SingleVariableDeclaration[8311-8330]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8332-8618]:Block[8332-8618]"
  }, {
    "left" : "Property p = properties.get(propertyName);",
    "right" : "Property p = properties.get(propertyName);",
    "info" : "VariableDeclarationStatement[8338-8380]:VariableDeclarationStatement[8338-8380]"
  }, {
    "left" : "if (p != null)",
    "right" : "if (p != null)",
    "info" : "IfStatement[8385-8433]:IfStatement[8385-8433]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8400-8433]:Block[8400-8433]"
  }, {
    "left" : "return p.getNode();",
    "right" : "return p.getNode();",
    "info" : "ReturnStatement[8408-8427]:ReturnStatement[8408-8427]"
  }, {
    "left" : "ObjectType implicitPrototype = getImplicitPrototype();",
    "right" : "ObjectType implicitPrototype = getImplicitPrototype();",
    "info" : "VariableDeclarationStatement[8438-8492]:VariableDeclarationStatement[8438-8492]"
  }, {
    "left" : "if (implicitPrototype != null)",
    "right" : "if (implicitPrototype != null)",
    "info" : "IfStatement[8497-8597]:IfStatement[8497-8597]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8528-8597]:Block[8528-8597]"
  }, {
    "left" : "return implicitPrototype.getPropertyNode(propertyName);",
    "right" : "return implicitPrototype.getPropertyNode(propertyName);",
    "info" : "ReturnStatement[8536-8591]:ReturnStatement[8536-8591]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[8602-8614]:ReturnStatement[8602-8614]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[8622-8631]:MarkerAnnotation[8622-8631]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[8634-8640]:Modifier[8634-8640]"
  }, {
    "left" : "JSDocInfo",
    "right" : "JSDocInfo",
    "info" : "SimpleType[8641-8650]:SimpleType[8641-8650]"
  }, {
    "left" : "getOwnPropertyJSDocInfo",
    "right" : "getOwnPropertyJSDocInfo",
    "info" : "SimpleName[8651-8674]:SimpleName[8651-8674]"
  }, {
    "left" : "String propertyName",
    "right" : "String propertyName",
    "info" : "SingleVariableDeclaration[8675-8694]:SingleVariableDeclaration[8675-8694]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8696-8823]:Block[8696-8823]"
  }, {
    "left" : "Property p = properties.get(propertyName);",
    "right" : "Property p = properties.get(propertyName);",
    "info" : "VariableDeclarationStatement[8702-8744]:VariableDeclarationStatement[8702-8744]"
  }, {
    "left" : "if (p != null)",
    "right" : "if (p != null)",
    "info" : "IfStatement[8749-8802]:IfStatement[8749-8802]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8764-8802]:Block[8764-8802]"
  }, {
    "left" : "return p.getJSDocInfo();",
    "right" : "return p.getJSDocInfo();",
    "info" : "ReturnStatement[8772-8796]:ReturnStatement[8772-8796]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[8807-8819]:ReturnStatement[8807-8819]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[8827-8836]:MarkerAnnotation[8827-8836]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[8839-8845]:Modifier[8839-8845]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[8846-8850]:PrimitiveType[8846-8850]"
  }, {
    "left" : "setPropertyJSDocInfo",
    "right" : "setPropertyJSDocInfo",
    "info" : "SimpleName[8851-8871]:SimpleName[8851-8871]"
  }, {
    "left" : "String propertyName",
    "right" : "String propertyName",
    "info" : "SingleVariableDeclaration[8872-8891]:SingleVariableDeclaration[8872-8891]"
  }, {
    "left" : "JSDocInfo info",
    "right" : "JSDocInfo info",
    "info" : "SingleVariableDeclaration[8893-8907]:SingleVariableDeclaration[8893-8907]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8909-9545]:Block[8909-9545]"
  }, {
    "left" : "if (info != null)",
    "right" : "if (info != null)",
    "info" : "IfStatement[8915-9541]:IfStatement[8915-9541]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8933-9541]:Block[8933-9541]"
  }, {
    "left" : "if (!properties.containsKey(propertyName))",
    "right" : "if (!properties.containsKey(propertyName))",
    "info" : "IfStatement[8941-9264]:IfStatement[8941-9264]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8984-9264]:Block[8984-9264]"
  }, {
    "left" : "defineInferredProperty(propertyName, getPropertyType(propertyName),\n            null);",
    "right" : "defineInferredProperty(propertyName, getPropertyType(propertyName),\n            null);",
    "info" : "ExpressionStatement[9170-9256]:ExpressionStatement[9170-9256]"
  }, {
    "left" : "Property property = properties.get(propertyName);",
    "right" : "Property property = properties.get(propertyName);",
    "info" : "VariableDeclarationStatement[9411-9460]:VariableDeclarationStatement[9411-9460]"
  }, {
    "left" : "if (property != null)",
    "right" : "if (property != null)",
    "info" : "IfStatement[9467-9535]:IfStatement[9467-9535]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9489-9535]:Block[9489-9535]"
  }, {
    "left" : "property.setJSDocInfo(info);",
    "right" : "property.setJSDocInfo(info);",
    "info" : "ExpressionStatement[9499-9527]:ExpressionStatement[9499-9527]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[9549-9558]:MarkerAnnotation[9549-9558]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[9561-9567]:Modifier[9561-9567]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[9568-9575]:PrimitiveType[9568-9575]"
  }, {
    "left" : "matchesNumberContext",
    "right" : "matchesNumberContext",
    "info" : "SimpleName[9576-9596]:SimpleName[9576-9596]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9599-9751]:Block[9599-9751]"
  }, {
    "left" : "return isNumberObjectType() || isDateType() || isBooleanObjectType() ||\n        isStringObjectType() || hasOverridenNativeProperty(\"valueOf\");",
    "right" : "return isNumberObjectType() || isDateType() || isBooleanObjectType() ||\n        isStringObjectType() || hasOverridenNativeProperty(\"valueOf\");",
    "info" : "ReturnStatement[9605-9747]:ReturnStatement[9605-9747]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[9755-9764]:MarkerAnnotation[9755-9764]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[9767-9773]:Modifier[9767-9773]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[9774-9781]:PrimitiveType[9774-9781]"
  }, {
    "left" : "matchesStringContext",
    "right" : "matchesStringContext",
    "info" : "SimpleName[9782-9802]:SimpleName[9782-9802]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9805-10022]:Block[9805-10022]"
  }, {
    "left" : "return isTheObjectType() || isStringObjectType() || isDateType() ||\n        isRegexpType() || isArrayType() || isNumberObjectType() ||\n        isBooleanObjectType() || hasOverridenNativeProperty(\"toString\");",
    "right" : "return isTheObjectType() || isStringObjectType() || isDateType() ||\n        isRegexpType() || isArrayType() || isNumberObjectType() ||\n        isBooleanObjectType() || hasOverridenNativeProperty(\"toString\");",
    "info" : "ReturnStatement[9811-10018]:ReturnStatement[9811-10018]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[10180-10187]:Modifier[10180-10187]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[10188-10195]:PrimitiveType[10188-10195]"
  }, {
    "left" : "hasOverridenNativeProperty",
    "right" : "hasOverridenNativeProperty",
    "info" : "SimpleName[10196-10222]:SimpleName[10196-10222]"
  }, {
    "left" : "String propertyName",
    "right" : "String propertyName",
    "info" : "SingleVariableDeclaration[10223-10242]:SingleVariableDeclaration[10223-10242]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10244-10687]:Block[10244-10687]"
  }, {
    "left" : "if (isNativeObjectType())",
    "right" : "if (isNativeObjectType())",
    "info" : "IfStatement[10250-10303]:IfStatement[10250-10303]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10276-10303]:Block[10276-10303]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[10284-10297]:ReturnStatement[10284-10297]"
  }, {
    "left" : "JSType propertyType = getPropertyType(propertyName);",
    "right" : "JSType propertyType = getPropertyType(propertyName);",
    "info" : "VariableDeclarationStatement[10309-10361]:VariableDeclarationStatement[10309-10361]"
  }, {
    "left" : "ObjectType nativeType =\n        this.isFunctionType() ?\n        registry.getNativeObjectType(JSTypeNative.FUNCTION_PROTOTYPE) :\n        registry.getNativeObjectType(JSTypeNative.OBJECT_PROTOTYPE);",
    "right" : "ObjectType nativeType =\n        this.isFunctionType() ?\n        registry.getNativeObjectType(JSTypeNative.FUNCTION_PROTOTYPE) :\n        registry.getNativeObjectType(JSTypeNative.OBJECT_PROTOTYPE);",
    "info" : "VariableDeclarationStatement[10366-10562]:VariableDeclarationStatement[10366-10562]"
  }, {
    "left" : "JSType nativePropertyType = nativeType.getPropertyType(propertyName);",
    "right" : "JSType nativePropertyType = nativeType.getPropertyType(propertyName);",
    "info" : "VariableDeclarationStatement[10567-10636]:VariableDeclarationStatement[10567-10636]"
  }, {
    "left" : "return propertyType != nativePropertyType;",
    "right" : "return propertyType != nativePropertyType;",
    "info" : "ReturnStatement[10641-10683]:ReturnStatement[10641-10683]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[10691-10700]:MarkerAnnotation[10691-10700]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[10703-10709]:Modifier[10703-10709]"
  }, {
    "left" : "JSType",
    "right" : "JSType",
    "info" : "SimpleType[10710-10716]:SimpleType[10710-10716]"
  }, {
    "left" : "unboxesTo",
    "right" : "unboxesTo",
    "info" : "SimpleName[10717-10726]:SimpleName[10717-10726]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10729-11059]:Block[10729-11059]"
  }, {
    "left" : "if (isStringObjectType())",
    "right" : "if (isStringObjectType())",
    "info" : "IfStatement[10735-11055]:IfStatement[10735-11055]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10761-10822]:Block[10761-10822]"
  }, {
    "left" : "return getNativeType(JSTypeNative.STRING_TYPE);",
    "right" : "return getNativeType(JSTypeNative.STRING_TYPE);",
    "info" : "ReturnStatement[10769-10816]:ReturnStatement[10769-10816]"
  }, {
    "left" : "if (isBooleanObjectType())",
    "right" : "if (isBooleanObjectType())",
    "info" : "IfStatement[10828-11055]:IfStatement[10828-11055]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10855-10917]:Block[10855-10917]"
  }, {
    "left" : "return getNativeType(JSTypeNative.BOOLEAN_TYPE);",
    "right" : "return getNativeType(JSTypeNative.BOOLEAN_TYPE);",
    "info" : "ReturnStatement[10863-10911]:ReturnStatement[10863-10911]"
  }, {
    "left" : "if (isNumberObjectType())",
    "right" : "if (isNumberObjectType())",
    "info" : "IfStatement[10923-11055]:IfStatement[10923-11055]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10949-11010]:Block[10949-11010]"
  }, {
    "left" : "return getNativeType(JSTypeNative.NUMBER_TYPE);",
    "right" : "return getNativeType(JSTypeNative.NUMBER_TYPE);",
    "info" : "ReturnStatement[10957-11004]:ReturnStatement[10957-11004]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11016-11055]:Block[11016-11055]"
  }, {
    "left" : "return super.unboxesTo();",
    "right" : "return super.unboxesTo();",
    "info" : "ReturnStatement[11024-11049]:ReturnStatement[11024-11049]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[11063-11072]:MarkerAnnotation[11063-11072]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[11075-11081]:Modifier[11075-11081]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[11082-11089]:PrimitiveType[11082-11089]"
  }, {
    "left" : "matchesObjectContext",
    "right" : "matchesObjectContext",
    "info" : "SimpleName[11090-11110]:SimpleName[11090-11110]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11113-11135]:Block[11113-11135]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[11119-11131]:ReturnStatement[11119-11131]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[11139-11148]:MarkerAnnotation[11139-11148]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[11151-11157]:Modifier[11151-11157]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[11158-11165]:PrimitiveType[11158-11165]"
  }, {
    "left" : "canBeCalled",
    "right" : "canBeCalled",
    "info" : "SimpleName[11166-11177]:SimpleName[11166-11177]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11180-11212]:Block[11180-11212]"
  }, {
    "left" : "return isRegexpType();",
    "right" : "return isRegexpType();",
    "info" : "ReturnStatement[11186-11208]:ReturnStatement[11186-11208]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[11216-11225]:MarkerAnnotation[11216-11225]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[11228-11234]:SimpleType[11228-11234]"
  }, {
    "left" : "toStringHelper",
    "right" : "toStringHelper",
    "info" : "SimpleName[11235-11249]:SimpleName[11235-11249]"
  }, {
    "left" : "boolean forAnnotations",
    "right" : "boolean forAnnotations",
    "info" : "SingleVariableDeclaration[11250-11272]:SingleVariableDeclaration[11250-11272]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11274-12461]:Block[11274-12461]"
  }, {
    "left" : "if (hasReferenceName())",
    "right" : "if (hasReferenceName())",
    "info" : "IfStatement[11280-12457]:IfStatement[11280-12457]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11304-11344]:Block[11304-11344]"
  }, {
    "left" : "return getReferenceName();",
    "right" : "return getReferenceName();",
    "info" : "ReturnStatement[11312-11338]:ReturnStatement[11312-11338]"
  }, {
    "left" : "if (prettyPrint)",
    "right" : "if (prettyPrint)",
    "info" : "IfStatement[11350-12457]:IfStatement[11350-12457]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11367-12399]:Block[11367-12399]"
  }, {
    "left" : "prettyPrint = false;",
    "right" : "prettyPrint = false;",
    "info" : "ExpressionStatement[11416-11436]:ExpressionStatement[11416-11436]"
  }, {
    "left" : "Set<String> propertyNames = Sets.newTreeSet();",
    "right" : "Set<String> propertyNames = Sets.newTreeSet();",
    "info" : "VariableDeclarationStatement[11503-11549]:VariableDeclarationStatement[11503-11549]"
  }, {
    "left" : "for (ObjectType current = this;\n           current != null && !current.isNativeObjectType() &&\n               propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n           current = current.getImplicitPrototype())",
    "right" : "for (ObjectType current = this;\n           current != null && !current.isNativeObjectType() &&\n               propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n           current = current.getImplicitPrototype())",
    "info" : "ForStatement[11556-11844]:ForStatement[11556-11844]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11774-11844]:Block[11774-11844]"
  }, {
    "left" : "propertyNames.addAll(current.getOwnPropertyNames());",
    "right" : "propertyNames.addAll(current.getOwnPropertyNames());",
    "info" : "ExpressionStatement[11784-11836]:ExpressionStatement[11784-11836]"
  }, {
    "left" : "StringBuilder sb = new StringBuilder();",
    "right" : "StringBuilder sb = new StringBuilder();",
    "info" : "VariableDeclarationStatement[11852-11891]:VariableDeclarationStatement[11852-11891]"
  }, {
    "left" : "sb.append(\"{\");",
    "right" : "sb.append(\"{\");",
    "info" : "ExpressionStatement[11898-11913]:ExpressionStatement[11898-11913]"
  }, {
    "left" : "int i = 0;",
    "right" : "int i = 0;",
    "info" : "VariableDeclarationStatement[11921-11931]:VariableDeclarationStatement[11921-11931]"
  }, {
    "left" : "for (String property : propertyNames)",
    "right" : "for (String property : propertyNames)",
    "info" : "EnhancedForStatement[11938-12315]:EnhancedForStatement[11938-12315]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11976-12315]:Block[11976-12315]"
  }, {
    "left" : "if (i > 0)",
    "right" : "if (i > 0)",
    "info" : "IfStatement[11986-12035]:IfStatement[11986-12035]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11997-12035]:Block[11997-12035]"
  }, {
    "left" : "sb.append(\", \");",
    "right" : "sb.append(\", \");",
    "info" : "ExpressionStatement[12009-12025]:ExpressionStatement[12009-12025]"
  }, {
    "left" : "sb.append(property);",
    "right" : "sb.append(property);",
    "info" : "ExpressionStatement[12045-12065]:ExpressionStatement[12045-12065]"
  }, {
    "left" : "sb.append(\": \");",
    "right" : "sb.append(\": \");",
    "info" : "ExpressionStatement[12074-12090]:ExpressionStatement[12074-12090]"
  }, {
    "left" : "sb.append(getPropertyType(property).toStringHelper(forAnnotations));",
    "right" : "sb.append(getPropertyType(property).toStringHelper(forAnnotations));",
    "info" : "ExpressionStatement[12099-12167]:ExpressionStatement[12099-12167]"
  }, {
    "left" : "++i;",
    "right" : "++i;",
    "info" : "ExpressionStatement[12177-12181]:ExpressionStatement[12177-12181]"
  }, {
    "left" : "if (!forAnnotations && i == MAX_PRETTY_PRINTED_PROPERTIES)",
    "right" : "if (!forAnnotations && i == MAX_PRETTY_PRINTED_PROPERTIES)",
    "info" : "IfStatement[12190-12307]:IfStatement[12190-12307]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12249-12307]:Block[12249-12307]"
  }, {
    "left" : "sb.append(\", ...\");",
    "right" : "sb.append(\", ...\");",
    "info" : "ExpressionStatement[12261-12280]:ExpressionStatement[12261-12280]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[12291-12297]:BreakStatement[12291-12297]"
  }, {
    "left" : "sb.append(\"}\");",
    "right" : "sb.append(\"}\");",
    "info" : "ExpressionStatement[12323-12338]:ExpressionStatement[12323-12338]"
  }, {
    "left" : "prettyPrint = true;",
    "right" : "prettyPrint = true;",
    "info" : "ExpressionStatement[12346-12365]:ExpressionStatement[12346-12365]"
  }, {
    "left" : "return sb.toString();",
    "right" : "return sb.toString();",
    "info" : "ReturnStatement[12372-12393]:ReturnStatement[12372-12393]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12405-12457]:Block[12405-12457]"
  }, {
    "left" : "return forAnnotations ? \"?\" : \"{...}\";",
    "right" : "return forAnnotations ? \"?\" : \"{...}\";",
    "info" : "ReturnStatement[12413-12451]:ReturnStatement[12413-12451]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[12465-12469]:PrimitiveType[12465-12469]"
  }, {
    "left" : "setPrettyPrint",
    "right" : "setPrettyPrint",
    "info" : "SimpleName[12470-12484]:SimpleName[12470-12484]"
  }, {
    "left" : "boolean prettyPrint",
    "right" : "boolean prettyPrint",
    "info" : "SingleVariableDeclaration[12485-12504]:SingleVariableDeclaration[12485-12504]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12506-12547]:Block[12506-12547]"
  }, {
    "left" : "this.prettyPrint = prettyPrint;",
    "right" : "this.prettyPrint = prettyPrint;",
    "info" : "ExpressionStatement[12512-12543]:ExpressionStatement[12512-12543]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[12551-12558]:PrimitiveType[12551-12558]"
  }, {
    "left" : "isPrettyPrint",
    "right" : "isPrettyPrint",
    "info" : "SimpleName[12559-12572]:SimpleName[12559-12572]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12575-12604]:Block[12575-12604]"
  }, {
    "left" : "return prettyPrint;",
    "right" : "return prettyPrint;",
    "info" : "ReturnStatement[12581-12600]:ReturnStatement[12581-12600]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[12608-12617]:MarkerAnnotation[12608-12617]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[12620-12626]:Modifier[12620-12626]"
  }, {
    "left" : "FunctionType",
    "right" : "FunctionType",
    "info" : "SimpleType[12627-12639]:SimpleType[12627-12639]"
  }, {
    "left" : "getConstructor",
    "right" : "getConstructor",
    "info" : "SimpleName[12640-12654]:SimpleName[12640-12654]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12657-12679]:Block[12657-12679]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[12663-12675]:ReturnStatement[12663-12675]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[12683-12692]:MarkerAnnotation[12683-12692]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[12695-12701]:Modifier[12695-12701]"
  }, {
    "left" : "ObjectType",
    "right" : "ObjectType",
    "info" : "SimpleType[12702-12712]:SimpleType[12702-12712]"
  }, {
    "left" : "getImplicitPrototype",
    "right" : "getImplicitPrototype",
    "info" : "SimpleName[12713-12733]:SimpleName[12713-12733]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12736-12779]:Block[12736-12779]"
  }, {
    "left" : "return implicitPrototypeFallback;",
    "right" : "return implicitPrototypeFallback;",
    "info" : "ReturnStatement[12742-12775]:ReturnStatement[12742-12775]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[13043-13048]:Modifier[13043-13048]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[13049-13053]:PrimitiveType[13049-13053]"
  }, {
    "left" : "setImplicitPrototype",
    "right" : "setImplicitPrototype",
    "info" : "SimpleName[13054-13074]:SimpleName[13054-13074]"
  }, {
    "left" : "ObjectType implicitPrototype",
    "right" : "ObjectType implicitPrototype",
    "info" : "SingleVariableDeclaration[13075-13103]:SingleVariableDeclaration[13075-13103]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13105-13202]:Block[13105-13202]"
  }, {
    "left" : "checkState(!hasCachedValues());",
    "right" : "checkState(!hasCachedValues());",
    "info" : "ExpressionStatement[13111-13142]:ExpressionStatement[13111-13142]"
  }, {
    "left" : "this.implicitPrototypeFallback = implicitPrototype;",
    "right" : "this.implicitPrototypeFallback = implicitPrototype;",
    "info" : "ExpressionStatement[13147-13198]:ExpressionStatement[13147-13198]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[13206-13215]:MarkerAnnotation[13206-13215]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[13218-13224]:Modifier[13218-13224]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[13225-13231]:SimpleType[13225-13231]"
  }, {
    "left" : "getReferenceName",
    "right" : "getReferenceName",
    "info" : "SimpleName[13232-13248]:SimpleName[13232-13248]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13251-13449]:Block[13251-13449]"
  }, {
    "left" : "if (className != null)",
    "right" : "if (className != null)",
    "info" : "IfStatement[13257-13445]:IfStatement[13257-13445]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13280-13311]:Block[13280-13311]"
  }, {
    "left" : "return className;",
    "right" : "return className;",
    "info" : "ReturnStatement[13288-13305]:ReturnStatement[13288-13305]"
  }, {
    "left" : "if (ownerFunction != null)",
    "right" : "if (ownerFunction != null)",
    "info" : "IfStatement[13317-13445]:IfStatement[13317-13445]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13344-13413]:Block[13344-13413]"
  }, {
    "left" : "return ownerFunction.getReferenceName() + \".prototype\";",
    "right" : "return ownerFunction.getReferenceName() + \".prototype\";",
    "info" : "ReturnStatement[13352-13407]:ReturnStatement[13352-13407]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13419-13445]:Block[13419-13445]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[13427-13439]:ReturnStatement[13427-13439]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[13453-13462]:MarkerAnnotation[13453-13462]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[13465-13471]:Modifier[13465-13471]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[13472-13479]:PrimitiveType[13472-13479]"
  }, {
    "left" : "hasReferenceName",
    "right" : "hasReferenceName",
    "info" : "SimpleName[13480-13496]:SimpleName[13480-13496]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13499-13559]:Block[13499-13559]"
  }, {
    "left" : "return className != null || ownerFunction != null;",
    "right" : "return className != null || ownerFunction != null;",
    "info" : "ReturnStatement[13505-13555]:ReturnStatement[13505-13555]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[13563-13572]:MarkerAnnotation[13563-13572]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[13575-13581]:Modifier[13575-13581]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[13582-13589]:PrimitiveType[13582-13589]"
  }, {
    "left" : "isSubtype",
    "right" : "isSubtype",
    "info" : "SimpleName[13590-13599]:SimpleName[13590-13599]"
  }, {
    "left" : "JSType that",
    "right" : "JSType that",
    "info" : "SingleVariableDeclaration[13600-13611]:SingleVariableDeclaration[13600-13611]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13613-15119]:Block[13613-15119]"
  }, {
    "left" : "if (JSType.isSubtypeHelper(this, that))",
    "right" : "if (JSType.isSubtypeHelper(this, that))",
    "info" : "IfStatement[13619-13685]:IfStatement[13619-13685]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13659-13685]:Block[13659-13685]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[13667-13679]:ReturnStatement[13667-13679]"
  }, {
    "left" : "if (that.isUnionType())",
    "right" : "if (that.isUnionType())",
    "info" : "IfStatement[13710-13892]:IfStatement[13710-13892]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13734-13892]:Block[13734-13892]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[13873-13886]:ReturnStatement[13873-13886]"
  }, {
    "left" : "if (that.isRecordType())",
    "right" : "if (that.isRecordType())",
    "info" : "IfStatement[13918-14017]:IfStatement[13918-14017]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13943-14017]:Block[13943-14017]"
  }, {
    "left" : "return RecordType.isSubtype(this, that.toMaybeRecordType());",
    "right" : "return RecordType.isSubtype(this, that.toMaybeRecordType());",
    "info" : "ReturnStatement[13951-14011]:ReturnStatement[13951-14011]"
  }, {
    "left" : "ObjectType thatObj = that.toObjectType();",
    "right" : "ObjectType thatObj = that.toObjectType();",
    "info" : "VariableDeclarationStatement[14153-14194]:VariableDeclarationStatement[14153-14194]"
  }, {
    "left" : "ObjectType thatCtor = thatObj == null ? null : thatObj.getConstructor();",
    "right" : "ObjectType thatCtor = thatObj == null ? null : thatObj.getConstructor();",
    "info" : "VariableDeclarationStatement[14199-14271]:VariableDeclarationStatement[14199-14271]"
  }, {
    "left" : "if (thatCtor != null && thatCtor.isInterface())",
    "right" : "if (thatCtor != null && thatCtor.isInterface())",
    "info" : "IfStatement[14276-14549]:IfStatement[14276-14549]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14324-14549]:Block[14324-14549]"
  }, {
    "left" : "Iterable<ObjectType> thisInterfaces = getCtorImplementedInterfaces();",
    "right" : "Iterable<ObjectType> thisInterfaces = getCtorImplementedInterfaces();",
    "info" : "VariableDeclarationStatement[14332-14401]:VariableDeclarationStatement[14332-14401]"
  }, {
    "left" : "for (ObjectType thisInterface : thisInterfaces)",
    "right" : "for (ObjectType thisInterface : thisInterfaces)",
    "info" : "EnhancedForStatement[14408-14543]:EnhancedForStatement[14408-14543]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14456-14543]:Block[14456-14543]"
  }, {
    "left" : "if (thisInterface.isSubtype(that))",
    "right" : "if (thisInterface.isSubtype(that))",
    "info" : "IfStatement[14466-14535]:IfStatement[14466-14535]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14501-14535]:Block[14501-14535]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[14513-14525]:ReturnStatement[14513-14525]"
  }, {
    "left" : "if (getConstructor() != null && getConstructor().isInterface())",
    "right" : "if (getConstructor() != null && getConstructor().isInterface())",
    "info" : "IfStatement[14555-14781]:IfStatement[14555-14781]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14619-14781]:Block[14619-14781]"
  }, {
    "left" : "for (ObjectType thisInterface : getCtorExtendedInterfaces())",
    "right" : "for (ObjectType thisInterface : getCtorExtendedInterfaces())",
    "info" : "EnhancedForStatement[14627-14775]:EnhancedForStatement[14627-14775]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14688-14775]:Block[14688-14775]"
  }, {
    "left" : "if (thisInterface.isSubtype(that))",
    "right" : "if (thisInterface.isSubtype(that))",
    "info" : "IfStatement[14698-14767]:IfStatement[14698-14767]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14733-14767]:Block[14733-14767]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[14745-14757]:ReturnStatement[14745-14757]"
  }, {
    "left" : "if (isUnknownType() || implicitPrototypeChainIsUnknown())",
    "right" : "if (isUnknownType() || implicitPrototypeChainIsUnknown())",
    "info" : "IfStatement[14824-15069]:IfStatement[14824-15069]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14882-15069]:Block[14882-15069]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[15051-15063]:ReturnStatement[15051-15063]"
  }, {
    "left" : "return this.isImplicitPrototype(thatObj);",
    "right" : "return this.isImplicitPrototype(thatObj);",
    "info" : "ReturnStatement[15074-15115]:ReturnStatement[15074-15115]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[15123-15130]:Modifier[15123-15130]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[15131-15138]:PrimitiveType[15131-15138]"
  }, {
    "left" : "implicitPrototypeChainIsUnknown",
    "right" : "implicitPrototypeChainIsUnknown",
    "info" : "SimpleName[15139-15170]:SimpleName[15139-15170]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15173-15365]:Block[15173-15365]"
  }, {
    "left" : "ObjectType p = getImplicitPrototype();",
    "right" : "ObjectType p = getImplicitPrototype();",
    "info" : "VariableDeclarationStatement[15179-15217]:VariableDeclarationStatement[15179-15217]"
  }, {
    "left" : "while (p != null)",
    "right" : "while (p != null)",
    "info" : "WhileStatement[15222-15343]:WhileStatement[15222-15343]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15240-15343]:Block[15240-15343]"
  }, {
    "left" : "if (p.isUnknownType())",
    "right" : "if (p.isUnknownType())",
    "info" : "IfStatement[15248-15301]:IfStatement[15248-15301]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15271-15301]:Block[15271-15301]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[15281-15293]:ReturnStatement[15281-15293]"
  }, {
    "left" : "p = p.getImplicitPrototype();",
    "right" : "p = p.getImplicitPrototype();",
    "info" : "ExpressionStatement[15308-15337]:ExpressionStatement[15308-15337]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[15348-15361]:ReturnStatement[15348-15361]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[15369-15378]:MarkerAnnotation[15369-15378]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[15381-15387]:Modifier[15381-15387]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[15388-15395]:PrimitiveType[15388-15395]"
  }, {
    "left" : "hasCachedValues",
    "right" : "hasCachedValues",
    "info" : "SimpleName[15396-15411]:SimpleName[15396-15411]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15414-15455]:Block[15414-15455]"
  }, {
    "left" : "return super.hasCachedValues();",
    "right" : "return super.hasCachedValues();",
    "info" : "ReturnStatement[15420-15451]:ReturnStatement[15420-15451]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[15503-15512]:MarkerAnnotation[15503-15512]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[15515-15521]:Modifier[15515-15521]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[15522-15529]:PrimitiveType[15522-15529]"
  }, {
    "left" : "isNativeObjectType",
    "right" : "isNativeObjectType",
    "info" : "SimpleName[15530-15548]:SimpleName[15530-15548]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15551-15579]:Block[15551-15579]"
  }, {
    "left" : "return nativeType;",
    "right" : "return nativeType;",
    "info" : "ReturnStatement[15557-15575]:ReturnStatement[15557-15575]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[15583-15592]:MarkerAnnotation[15583-15592]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[15595-15599]:PrimitiveType[15595-15599]"
  }, {
    "left" : "setOwnerFunction",
    "right" : "setOwnerFunction",
    "info" : "SimpleName[15600-15616]:SimpleName[15600-15616]"
  }, {
    "left" : "FunctionType type",
    "right" : "FunctionType type",
    "info" : "SingleVariableDeclaration[15617-15634]:SingleVariableDeclaration[15617-15634]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15636-15736]:Block[15636-15736]"
  }, {
    "left" : "Preconditions.checkState(ownerFunction == null || type == null);",
    "right" : "Preconditions.checkState(ownerFunction == null || type == null);",
    "info" : "ExpressionStatement[15642-15706]:ExpressionStatement[15642-15706]"
  }, {
    "left" : "ownerFunction = type;",
    "right" : "ownerFunction = type;",
    "info" : "ExpressionStatement[15711-15732]:ExpressionStatement[15711-15732]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[15740-15749]:MarkerAnnotation[15740-15749]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[15752-15758]:Modifier[15752-15758]"
  }, {
    "left" : "FunctionType",
    "right" : "FunctionType",
    "info" : "SimpleType[15759-15771]:SimpleType[15759-15771]"
  }, {
    "left" : "getOwnerFunction",
    "right" : "getOwnerFunction",
    "info" : "SimpleName[15772-15788]:SimpleName[15772-15788]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15791-15822]:Block[15791-15822]"
  }, {
    "left" : "return ownerFunction;",
    "right" : "return ownerFunction;",
    "info" : "ReturnStatement[15797-15818]:ReturnStatement[15797-15818]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[15826-15835]:MarkerAnnotation[15826-15835]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[15838-15844]:Modifier[15838-15844]"
  }, {
    "left" : "Iterable<ObjectType>",
    "right" : "Iterable<ObjectType>",
    "info" : "ParameterizedType[15845-15865]:ParameterizedType[15845-15865]"
  }, {
    "left" : "getCtorImplementedInterfaces",
    "right" : "getCtorImplementedInterfaces",
    "info" : "SimpleName[15866-15894]:SimpleName[15866-15894]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15897-16037]:Block[15897-16037]"
  }, {
    "left" : "return isFunctionPrototypeType()\n        ? getOwnerFunction().getImplementedInterfaces()\n        : ImmutableList.<ObjectType>of();",
    "right" : "return isFunctionPrototypeType()\n        ? getOwnerFunction().getImplementedInterfaces()\n        : ImmutableList.<ObjectType>of();",
    "info" : "ReturnStatement[15903-16033]:ReturnStatement[15903-16033]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[16041-16050]:MarkerAnnotation[16041-16050]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[16053-16059]:Modifier[16053-16059]"
  }, {
    "left" : "Iterable<ObjectType>",
    "right" : "Iterable<ObjectType>",
    "info" : "ParameterizedType[16060-16080]:ParameterizedType[16060-16080]"
  }, {
    "left" : "getCtorExtendedInterfaces",
    "right" : "getCtorExtendedInterfaces",
    "info" : "SimpleName[16081-16106]:SimpleName[16081-16106]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16109-16246]:Block[16109-16246]"
  }, {
    "left" : "return isFunctionPrototypeType()\n        ? getOwnerFunction().getExtendedInterfaces()\n        : ImmutableList.<ObjectType>of();",
    "right" : "return isFunctionPrototypeType()\n        ? getOwnerFunction().getExtendedInterfaces()\n        : ImmutableList.<ObjectType>of();",
    "info" : "ReturnStatement[16115-16242]:ReturnStatement[16115-16242]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[16250-16259]:MarkerAnnotation[16250-16259]"
  }, {
    "left" : "JSType",
    "right" : "JSType",
    "info" : "SimpleType[16262-16268]:SimpleType[16262-16268]"
  }, {
    "left" : "resolveInternal",
    "right" : "resolveInternal",
    "info" : "SimpleName[16269-16284]:SimpleName[16269-16284]"
  }, {
    "left" : "ErrorReporter t",
    "right" : "ErrorReporter t",
    "info" : "SingleVariableDeclaration[16285-16300]:SingleVariableDeclaration[16285-16300]"
  }, {
    "left" : "StaticScope<JSType> scope",
    "right" : "StaticScope<JSType> scope",
    "info" : "SingleVariableDeclaration[16302-16327]:SingleVariableDeclaration[16302-16327]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16329-16696]:Block[16329-16696]"
  }, {
    "left" : "setResolvedTypeInternal(this);",
    "right" : "setResolvedTypeInternal(this);",
    "info" : "ExpressionStatement[16335-16365]:ExpressionStatement[16335-16365]"
  }, {
    "left" : "ObjectType implicitPrototype = getImplicitPrototype();",
    "right" : "ObjectType implicitPrototype = getImplicitPrototype();",
    "info" : "VariableDeclarationStatement[16371-16425]:VariableDeclarationStatement[16371-16425]"
  }, {
    "left" : "if (implicitPrototype != null)",
    "right" : "if (implicitPrototype != null)",
    "info" : "IfStatement[16430-16562]:IfStatement[16430-16562]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16461-16562]:Block[16461-16562]"
  }, {
    "left" : "implicitPrototypeFallback =\n          (ObjectType) implicitPrototype.resolve(t, scope);",
    "right" : "implicitPrototypeFallback =\n          (ObjectType) implicitPrototype.resolve(t, scope);",
    "info" : "ExpressionStatement[16469-16556]:ExpressionStatement[16469-16556]"
  }, {
    "left" : "for (Property prop : properties.values())",
    "right" : "for (Property prop : properties.values())",
    "info" : "EnhancedForStatement[16567-16675]:EnhancedForStatement[16567-16675]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16609-16675]:Block[16609-16675]"
  }, {
    "left" : "prop.setType(safeResolve(prop.getType(), t, scope));",
    "right" : "prop.setType(safeResolve(prop.getType(), t, scope));",
    "info" : "ExpressionStatement[16617-16669]:ExpressionStatement[16617-16669]"
  }, {
    "left" : "return this;",
    "right" : "return this;",
    "info" : "ReturnStatement[16680-16692]:ReturnStatement[16680-16692]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[16700-16709]:MarkerAnnotation[16700-16709]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[16712-16718]:Modifier[16712-16718]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[16719-16723]:PrimitiveType[16719-16723]"
  }, {
    "left" : "matchConstraint",
    "right" : "matchConstraint",
    "info" : "SimpleName[16724-16739]:SimpleName[16724-16739]"
  }, {
    "left" : "JSType constraint",
    "right" : "JSType constraint",
    "info" : "SingleVariableDeclaration[16740-16757]:SingleVariableDeclaration[16740-16757]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16759-17334]:Block[16759-17559]"
  }, {
    "left" : "if (hasReferenceName())",
    "right" : "if (hasReferenceName())",
    "info" : "IfStatement[16826-16871]:IfStatement[16826-16871]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16850-16871]:Block[16850-16871]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[16858-16865]:ReturnStatement[16858-16865]"
  }, {
    "left" : "if (constraint.isRecordType())",
    "right" : "if (constraint.isRecordType())",
    "info" : "IfStatement[17232-17330]:IfStatement[17232-17555]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17263-17330]:Block[17263-17330]"
  }, {
    "left" : "matchRecordTypeConstraint(constraint.toObjectType());",
    "right" : "matchRecordTypeConstraint(constraint.toObjectType());",
    "info" : "ExpressionStatement[17271-17324]:ExpressionStatement[17271-17324]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[17338-17344]:Modifier[17563-17569]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[17345-17349]:PrimitiveType[17570-17574]"
  }, {
    "left" : "matchRecordTypeConstraint",
    "right" : "matchRecordTypeConstraint",
    "info" : "SimpleName[17350-17375]:SimpleName[17575-17600]"
  }, {
    "left" : "ObjectType constraintObj",
    "right" : "ObjectType constraintObj",
    "info" : "SingleVariableDeclaration[17376-17400]:SingleVariableDeclaration[17601-17625]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17402-17833]:Block[17627-18058]"
  }, {
    "left" : "for (String prop : constraintObj.getOwnPropertyNames())",
    "right" : "for (String prop : constraintObj.getOwnPropertyNames())",
    "info" : "EnhancedForStatement[17408-17829]:EnhancedForStatement[17633-18054]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17464-17829]:Block[17689-18054]"
  }, {
    "left" : "JSType propType = constraintObj.getPropertyType(prop);",
    "right" : "JSType propType = constraintObj.getPropertyType(prop);",
    "info" : "VariableDeclarationStatement[17472-17526]:VariableDeclarationStatement[17697-17751]"
  }, {
    "left" : "if (!isPropertyTypeDeclared(prop))",
    "right" : "if (!isPropertyTypeDeclared(prop))",
    "info" : "IfStatement[17533-17823]:IfStatement[17758-18048]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17568-17823]:Block[17793-18048]"
  }, {
    "left" : "JSType typeToInfer = propType;",
    "right" : "JSType typeToInfer = propType;",
    "info" : "VariableDeclarationStatement[17578-17608]:VariableDeclarationStatement[17803-17833]"
  }, {
    "left" : "if (!hasProperty(prop))",
    "right" : "if (!hasProperty(prop))",
    "info" : "IfStatement[17617-17758]:IfStatement[17842-17983]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17641-17758]:Block[17866-17983]"
  }, {
    "left" : "typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n              .getLeastSupertype(propType);",
    "right" : "typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n              .getLeastSupertype(propType);",
    "info" : "ExpressionStatement[17653-17748]:ExpressionStatement[17878-17973]"
  }, {
    "left" : "defineInferredProperty(prop, typeToInfer, null);",
    "right" : "defineInferredProperty(prop, typeToInfer, null);",
    "info" : "ExpressionStatement[17767-17815]:ExpressionStatement[17992-18040]"
  } ]
}