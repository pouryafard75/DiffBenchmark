{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "Compiler",
      "right" : "Compiler",
      "info" : "TypeDeclaration[1607-48925]:TypeDeclaration[1607-49029]"
    }, {
      "left" : "CompilerOptions options = null;",
      "right" : "CompilerOptions options = null;",
      "info" : "FieldDeclaration[2156-2187]:FieldDeclaration[2156-2187]"
    }, {
      "left" : "private PassConfig passes = null;",
      "right" : "private PassConfig passes = null;",
      "info" : "FieldDeclaration[2191-2224]:FieldDeclaration[2191-2224]"
    }, {
      "left" : "private CompilerInput[] externs;",
      "right" : "private CompilerInput[] externs;",
      "info" : "FieldDeclaration[2252-2284]:FieldDeclaration[2252-2284]"
    }, {
      "left" : "private JSModule[] modules;",
      "right" : "private JSModule[] modules;",
      "info" : "FieldDeclaration[2315-2342]:FieldDeclaration[2315-2342]"
    }, {
      "left" : "private JSModuleGraph moduleGraph;",
      "right" : "private JSModuleGraph moduleGraph;",
      "info" : "FieldDeclaration[2386-2420]:FieldDeclaration[2386-2420]"
    }, {
      "left" : "private CompilerInput[] inputs;",
      "right" : "private CompilerInput[] inputs;",
      "info" : "FieldDeclaration[2450-2481]:FieldDeclaration[2450-2481]"
    }, {
      "left" : "private ErrorManager errorManager;",
      "right" : "private ErrorManager errorManager;",
      "info" : "FieldDeclaration[2543-2577]:FieldDeclaration[2543-2577]"
    }, {
      "left" : "private SymbolTable symbolTable = null;",
      "right" : "private SymbolTable symbolTable = null;",
      "info" : "FieldDeclaration[2610-2649]:FieldDeclaration[2610-2649]"
    }, {
      "left" : "Node externsRoot;",
      "right" : "Node externsRoot;",
      "info" : "FieldDeclaration[2680-2697]:FieldDeclaration[2680-2697]"
    }, {
      "left" : "Node jsRoot;",
      "right" : "Node jsRoot;",
      "info" : "FieldDeclaration[2700-2712]:FieldDeclaration[2700-2712]"
    }, {
      "left" : "Node externAndJsRoot;",
      "right" : "Node externAndJsRoot;",
      "info" : "FieldDeclaration[2715-2736]:FieldDeclaration[2715-2736]"
    }, {
      "left" : "private Map<String, CompilerInput> inputsByName;",
      "right" : "private Map<String, CompilerInput> inputsByName;",
      "info" : "FieldDeclaration[2740-2788]:FieldDeclaration[2740-2788]"
    }, {
      "left" : "private SourceMap sourceMap;",
      "right" : "private SourceMap sourceMap;",
      "info" : "FieldDeclaration[2792-2849]:FieldDeclaration[2792-2849]"
    }, {
      "left" : "private String externExports = null;",
      "right" : "private String externExports = null;",
      "info" : "FieldDeclaration[2853-2937]:FieldDeclaration[2853-2937]"
    }, {
      "left" : "private int uniqueNameId = 0;",
      "right" : "private int uniqueNameId = 0;",
      "info" : "FieldDeclaration[2941-3061]:FieldDeclaration[2941-3061]"
    }, {
      "left" : "private boolean normalized = false;",
      "right" : "private boolean normalized = false;",
      "info" : "FieldDeclaration[3065-3253]:FieldDeclaration[3065-3253]"
    }, {
      "left" : "private boolean useThreads = true;",
      "right" : "private boolean useThreads = true;",
      "info" : "FieldDeclaration[3257-3324]:FieldDeclaration[3257-3324]"
    }, {
      "left" : "private FunctionInformationMap functionInformationMap;",
      "right" : "private FunctionInformationMap functionInformationMap;",
      "info" : "FieldDeclaration[3328-3420]:FieldDeclaration[3328-3420]"
    }, {
      "left" : "private final StringBuilder debugLog = new StringBuilder();",
      "right" : "private final StringBuilder debugLog = new StringBuilder();",
      "info" : "FieldDeclaration[3424-3514]:FieldDeclaration[3424-3514]"
    }, {
      "left" : "CodingConvention defaultCodingConvention = new GoogleCodingConvention();",
      "right" : "CodingConvention defaultCodingConvention = new GoogleCodingConvention();",
      "info" : "FieldDeclaration[3518-3643]:FieldDeclaration[3518-3643]"
    }, {
      "left" : "private JSTypeRegistry typeRegistry;",
      "right" : "private JSTypeRegistry typeRegistry;",
      "info" : "FieldDeclaration[3647-3683]:FieldDeclaration[3647-3683]"
    }, {
      "left" : "private Config parserConfig = null;",
      "right" : "private Config parserConfig = null;",
      "info" : "FieldDeclaration[3686-3721]:FieldDeclaration[3686-3721]"
    }, {
      "left" : "private ReverseAbstractInterpreter abstractInterpreter;",
      "right" : "private ReverseAbstractInterpreter abstractInterpreter;",
      "info" : "FieldDeclaration[3725-3780]:FieldDeclaration[3725-3780]"
    }, {
      "left" : "private final TypeValidator typeValidator;",
      "right" : "private final TypeValidator typeValidator;",
      "info" : "FieldDeclaration[3783-3825]:FieldDeclaration[3783-3825]"
    }, {
      "left" : "public PerformanceTracker tracker;",
      "right" : "public PerformanceTracker tracker;",
      "info" : "FieldDeclaration[3829-3863]:FieldDeclaration[3829-3863]"
    }, {
      "left" : "private final com.google.javascript.rhino.ErrorReporter oldErrorReporter =\n      RhinoErrorReporter.forOldRhino(this);",
      "right" : "private final com.google.javascript.rhino.ErrorReporter oldErrorReporter =\n      RhinoErrorReporter.forOldRhino(this);",
      "info" : "FieldDeclaration[3946-4064]:FieldDeclaration[3946-4064]"
    }, {
      "left" : "private final ErrorReporter defaultErrorReporter =\n      RhinoErrorReporter.forNewRhino(this);",
      "right" : "private final ErrorReporter defaultErrorReporter =\n      RhinoErrorReporter.forNewRhino(this);",
      "info" : "FieldDeclaration[4142-4236]:FieldDeclaration[4142-4236]"
    }, {
      "left" : "public static final DiagnosticType OPTIMIZE_LOOP_ERROR = DiagnosticType.error(\n      \"JSC_OPTIMIZE_LOOP_ERROR\",\n      \"Exceeded max number of optimization iterations: {0}\");",
      "right" : "public static final DiagnosticType OPTIMIZE_LOOP_ERROR = DiagnosticType.error(\n      \"JSC_OPTIMIZE_LOOP_ERROR\",\n      \"Exceeded max number of optimization iterations: {0}\");",
      "info" : "FieldDeclaration[4240-4464]:FieldDeclaration[4240-4464]"
    }, {
      "left" : "public static final DiagnosticType MOTION_ITERATIONS_ERROR =\n      DiagnosticType.error(\"JSC_OPTIMIZE_LOOP_ERROR\",\n          \"Exceeded max number of code motion iterations: {0}\");",
      "right" : "public static final DiagnosticType MOTION_ITERATIONS_ERROR =\n      DiagnosticType.error(\"JSC_OPTIMIZE_LOOP_ERROR\",\n          \"Exceeded max number of code motion iterations: {0}\");",
      "info" : "FieldDeclaration[4467-4646]:FieldDeclaration[4467-4646]"
    }, {
      "left" : "private static final long COMPILER_STACK_SIZE = 1048576L;",
      "right" : "private static final long COMPILER_STACK_SIZE = 1048576L;",
      "info" : "FieldDeclaration[4650-4707]:FieldDeclaration[4650-4707]"
    }, {
      "left" : "private static final Logger logger =\n      Logger.getLogger(\"com.google.javascript.jscomp\");",
      "right" : "private static final Logger logger =\n      Logger.getLogger(\"com.google.javascript.jscomp\");",
      "info" : "FieldDeclaration[4712-4987]:FieldDeclaration[4712-4987]"
    }, {
      "left" : "private final PrintStream outStream;",
      "right" : "private final PrintStream outStream;",
      "info" : "FieldDeclaration[4991-5027]:FieldDeclaration[4991-5027]"
    }, {
      "left" : "public Compiler()",
      "right" : "public Compiler()",
      "info" : "MethodDeclaration[5031-5168]:MethodDeclaration[5031-5168]"
    }, {
      "left" : "public Compiler(PrintStream stream)",
      "right" : "public Compiler(PrintStream stream)",
      "info" : "MethodDeclaration[5172-5418]:MethodDeclaration[5172-5418]"
    }, {
      "left" : "public Compiler(ErrorManager errorManager)",
      "right" : "public Compiler(ErrorManager errorManager)",
      "info" : "MethodDeclaration[5422-5587]:MethodDeclaration[5422-5587]"
    }, {
      "left" : "SymbolTable acquireSymbolTable()",
      "right" : "SymbolTable acquireSymbolTable()",
      "info" : "MethodDeclaration[5591-5816]:MethodDeclaration[5591-5816]"
    }, {
      "left" : "public void setErrorManager(ErrorManager errorManager)",
      "right" : "public void setErrorManager(ErrorManager errorManager)",
      "info" : "MethodDeclaration[5820-6125]:MethodDeclaration[5820-6125]"
    }, {
      "left" : "private MessageFormatter createMessageFormatter()",
      "right" : "private MessageFormatter createMessageFormatter()",
      "info" : "MethodDeclaration[6129-6418]:MethodDeclaration[6129-6418]"
    }, {
      "left" : "public void initOptions(CompilerOptions options)",
      "right" : "public void initOptions(CompilerOptions options)",
      "info" : "MethodDeclaration[6422-7027]:MethodDeclaration[6422-7027]"
    }, {
      "left" : "public void init(JSSourceFile[] externs, JSSourceFile[] inputs,\n      CompilerOptions options)",
      "right" : "public void init(JSSourceFile[] externs, JSSourceFile[] inputs,\n      CompilerOptions options)",
      "info" : "MethodDeclaration[7031-7449]:MethodDeclaration[7031-7449]"
    }, {
      "left" : "static final DiagnosticType MODULE_DEPENDENCY_ERROR =\n      DiagnosticType.error(\"JSC_MODULE_DEPENDENCY_ERROR\",\n          \"Bad dependency: {0} -> {1}. \"\n              + \"Modules must be listed in dependency order.\");",
      "right" : "static final DiagnosticType MODULE_DEPENDENCY_ERROR =\n      DiagnosticType.error(\"JSC_MODULE_DEPENDENCY_ERROR\",\n          \"Bad dependency: {0} -> {1}. \"\n              + \"Modules must be listed in dependency order.\");",
      "info" : "FieldDeclaration[7453-7669]:FieldDeclaration[7453-7669]"
    }, {
      "left" : "public void init(JSSourceFile[] externs, JSModule[] modules,\n      CompilerOptions options)",
      "right" : "public void init(JSSourceFile[] externs, JSModule[] modules,\n      CompilerOptions options)",
      "info" : "MethodDeclaration[7673-8552]:MethodDeclaration[7673-8583]"
    }, {
      "left" : "private void initBasedOnOptions()",
      "right" : "private void initBasedOnOptions()",
      "info" : "MethodDeclaration[8556-8808]:MethodDeclaration[8587-8839]"
    }, {
      "left" : "private CompilerInput[] makeCompilerInput(\n      JSSourceFile[] files, boolean isExtern)",
      "right" : "private CompilerInput[] makeCompilerInput(\n      JSSourceFile[] files, boolean isExtern)",
      "info" : "MethodDeclaration[8812-9096]:MethodDeclaration[8843-9127]"
    }, {
      "left" : "private static final DiagnosticType EMPTY_MODULE_LIST_ERROR =\n      DiagnosticType.error(\"JSC_EMPTY_MODULE_LIST_ERROR\",\n          \"At least one module must be provided\");",
      "right" : "private static final DiagnosticType EMPTY_MODULE_LIST_ERROR =\n      DiagnosticType.error(\"JSC_EMPTY_MODULE_LIST_ERROR\",\n          \"At least one module must be provided\");",
      "info" : "FieldDeclaration[9100-9270]:FieldDeclaration[9131-9301]"
    }, {
      "left" : "private static final DiagnosticType EMPTY_ROOT_MODULE_ERROR =\n      DiagnosticType.error(\"JSC_EMPTY_ROOT_MODULE_ERROR\",\n          \"Root module '{0}' must contain at least one source code input\");",
      "right" : "private static final DiagnosticType EMPTY_ROOT_MODULE_ERROR =\n      DiagnosticType.error(\"JSC_EMPTY_ROOT_MODULE_ERROR\",\n          \"Root module '{0}' must contain at least one source code input\");",
      "info" : "FieldDeclaration[9274-9469]:FieldDeclaration[9305-9500]"
    }, {
      "left" : "private void checkFirstModule(JSModule[] modules)",
      "right" : "private void checkFirstModule(JSModule[] modules)",
      "info" : "MethodDeclaration[9473-9887]:MethodDeclaration[9504-9918]"
    }, {
      "left" : "static final DiagnosticType DUPLICATE_INPUT_IN_MODULES =\n      DiagnosticType.error(\"JSC_DUPLICATE_INPUT_IN_MODULES_ERROR\",\n          \"Two modules cannot contain the same input, but module {0} and {1} \"\n              + \"both include \\\"{2}\\\"\");",
      "right" : "static final DiagnosticType DUPLICATE_INPUT_IN_MODULES =\n      DiagnosticType.error(\"JSC_DUPLICATE_INPUT_IN_MODULES_ERROR\",\n          \"Two modules cannot contain the same input, but module {0} and {1} \"\n              + \"both include \\\"{2}\\\"\");",
      "info" : "FieldDeclaration[9893-10251]:FieldDeclaration[10314-10557]"
    }, {
      "left" : "public void rebuildInputsFromModules()",
      "right" : "public void rebuildInputsFromModules()",
      "info" : "MethodDeclaration[10255-10608]:MethodDeclaration[10561-10914]"
    }, {
      "left" : "private CompilerInput[] getAllInputsFromModules()",
      "right" : "private CompilerInput[] getAllInputsFromModules()",
      "info" : "MethodDeclaration[10612-11557]:MethodDeclaration[10918-11863]"
    }, {
      "left" : "static final DiagnosticType DUPLICATE_INPUT =\n      DiagnosticType.error(\"JSC_DUPLICATE_INPUT\", \"Duplicate input: {0}\");",
      "right" : "static final DiagnosticType DUPLICATE_INPUT =\n      DiagnosticType.error(\"JSC_DUPLICATE_INPUT\", \"Duplicate input: {0}\");",
      "info" : "FieldDeclaration[11561-11681]:FieldDeclaration[11867-11987]"
    }, {
      "left" : "static final DiagnosticType DUPLICATE_EXTERN_INPUT =\n      DiagnosticType.error(\"JSC_DUPLICATE_EXTERN_INPUT\",\n          \"Duplicate extern input: {0}\");",
      "right" : "static final DiagnosticType DUPLICATE_EXTERN_INPUT =\n      DiagnosticType.error(\"JSC_DUPLICATE_EXTERN_INPUT\",\n          \"Duplicate extern input: {0}\");",
      "info" : "FieldDeclaration[11684-11835]:FieldDeclaration[11990-12141]"
    }, {
      "left" : "void initInputsByNameMap()",
      "right" : "void initInputsByNameMap()",
      "info" : "MethodDeclaration[11839-12536]:MethodDeclaration[12145-12842]"
    }, {
      "left" : "public Result compile(\n      JSSourceFile extern, JSSourceFile input, CompilerOptions options)",
      "right" : "public Result compile(\n      JSSourceFile extern, JSSourceFile input, CompilerOptions options)",
      "info" : "MethodDeclaration[12540-12708]:MethodDeclaration[12846-13014]"
    }, {
      "left" : "public Result compile(\n      JSSourceFile extern, JSSourceFile[] input, CompilerOptions options)",
      "right" : "public Result compile(\n      JSSourceFile extern, JSSourceFile[] input, CompilerOptions options)",
      "info" : "MethodDeclaration[12712-12882]:MethodDeclaration[13018-13188]"
    }, {
      "left" : "public Result compile(\n      JSSourceFile extern, JSModule[] modules, CompilerOptions options)",
      "right" : "public Result compile(\n      JSSourceFile extern, JSModule[] modules, CompilerOptions options)",
      "info" : "MethodDeclaration[12886-13056]:MethodDeclaration[13192-13362]"
    }, {
      "left" : "public Result compile(JSSourceFile[] externs,\n                        JSSourceFile[] inputs,\n                        CompilerOptions options)",
      "right" : "public Result compile(JSSourceFile[] externs,\n                        JSSourceFile[] inputs,\n                        CompilerOptions options)",
      "info" : "MethodDeclaration[13060-13630]:MethodDeclaration[13366-13936]"
    }, {
      "left" : "public Result compile(JSSourceFile[] externs,\n                        JSModule[] modules,\n                        CompilerOptions options)",
      "right" : "public Result compile(JSSourceFile[] externs,\n                        JSModule[] modules,\n                        CompilerOptions options)",
      "info" : "MethodDeclaration[13634-14202]:MethodDeclaration[13940-14508]"
    }, {
      "left" : "private Result compile()",
      "right" : "private Result compile()",
      "info" : "MethodDeclaration[14206-14409]:MethodDeclaration[14512-14715]"
    }, {
      "left" : "public Result call() throws Exception",
      "right" : "public Result call() throws Exception",
      "info" : "MethodDeclaration[14295-14397]:MethodDeclaration[14601-14703]"
    }, {
      "left" : "public void disableThreads()",
      "right" : "public void disableThreads()",
      "info" : "MethodDeclaration[14413-14576]:MethodDeclaration[14719-14882]"
    }, {
      "left" : "private <T> T runInCompilerThread(final Callable<T> callable)",
      "right" : "private <T> T runInCompilerThread(final Callable<T> callable)",
      "info" : "MethodDeclaration[14580-16124]:MethodDeclaration[14886-16430]"
    }, {
      "left" : "public void run()",
      "right" : "public void run()",
      "info" : "MethodDeclaration[15260-15617]:MethodDeclaration[15566-15923]"
    }, {
      "left" : "private void compileInternal()",
      "right" : "private void compileInternal()",
      "info" : "MethodDeclaration[16128-16910]:MethodDeclaration[16434-17216]"
    }, {
      "left" : "public void parse()",
      "right" : "public void parse()",
      "info" : "MethodDeclaration[16914-16958]:MethodDeclaration[17220-17264]"
    }, {
      "left" : "PassConfig getPassConfig()",
      "right" : "PassConfig getPassConfig()",
      "info" : "MethodDeclaration[16962-17088]:MethodDeclaration[17268-17394]"
    }, {
      "left" : "PassConfig createPassConfigInternal()",
      "right" : "PassConfig createPassConfigInternal()",
      "info" : "MethodDeclaration[17092-17287]:MethodDeclaration[17398-17593]"
    }, {
      "left" : "public void setPassConfig(PassConfig passes)",
      "right" : "public void setPassConfig(PassConfig passes)",
      "info" : "MethodDeclaration[17291-18035]:MethodDeclaration[17597-18341]"
    }, {
      "left" : "boolean precheck()",
      "right" : "boolean precheck()",
      "info" : "MethodDeclaration[18039-18275]:MethodDeclaration[18345-18581]"
    }, {
      "left" : "public void check()",
      "right" : "public void check()",
      "info" : "MethodDeclaration[18279-19587]:MethodDeclaration[18585-19893]"
    }, {
      "left" : "private void externExports()",
      "right" : "private void externExports()",
      "info" : "MethodDeclaration[19591-19853]:MethodDeclaration[19897-20159]"
    }, {
      "left" : "void process(CompilerPass p)",
      "right" : "void process(CompilerPass p)",
      "info" : "MethodDeclaration[19857-19927]:MethodDeclaration[20163-20233]"
    }, {
      "left" : "private final PassFactory sanityCheck =\n      new PassFactory(\"sanityCheck\", false) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new SanityCheck(compiler);\n    }\n  };",
      "right" : "private final PassFactory sanityCheck =\n      new PassFactory(\"sanityCheck\", false) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new SanityCheck(compiler);\n    }\n  };",
      "info" : "FieldDeclaration[19931-20152]:FieldDeclaration[20237-20458]"
    }, {
      "left" : "protected CompilerPass createInternal(AbstractCompiler compiler)",
      "right" : "protected CompilerPass createInternal(AbstractCompiler compiler)",
      "info" : "MethodDeclaration[20021-20147]:MethodDeclaration[20327-20453]"
    }, {
      "left" : "private void maybeSanityCheck()",
      "right" : "private void maybeSanityCheck()",
      "info" : "MethodDeclaration[20156-20272]:MethodDeclaration[20462-20578]"
    }, {
      "left" : "private void runSanityCheck()",
      "right" : "private void runSanityCheck()",
      "info" : "MethodDeclaration[20276-20370]:MethodDeclaration[20582-20676]"
    }, {
      "left" : "void removeTryCatchFinally()",
      "right" : "void removeTryCatchFinally()",
      "info" : "MethodDeclaration[20374-20649]:MethodDeclaration[20680-20955]"
    }, {
      "left" : "void stripCode(Set<String> stripTypes, Set<String> stripNameSuffixes,\n      Set<String> stripTypePrefixes, Set<String> stripNamePrefixes)",
      "right" : "void stripCode(Set<String> stripTypes, Set<String> stripNameSuffixes,\n      Set<String> stripTypePrefixes, Set<String> stripNamePrefixes)",
      "info" : "MethodDeclaration[20653-21142]:MethodDeclaration[20959-21448]"
    }, {
      "left" : "private void runCustomPasses(CustomPassExecutionTime executionTime)",
      "right" : "private void runCustomPasses(CustomPassExecutionTime executionTime)",
      "info" : "MethodDeclaration[21146-21582]:MethodDeclaration[21452-21888]"
    }, {
      "left" : "private Tracer currentTracer = null;",
      "right" : "private Tracer currentTracer = null;",
      "info" : "FieldDeclaration[21586-21622]:FieldDeclaration[21892-21928]"
    }, {
      "left" : "private String currentPassName = null;",
      "right" : "private String currentPassName = null;",
      "info" : "FieldDeclaration[21625-21663]:FieldDeclaration[21931-21969]"
    }, {
      "left" : "void startPass(String passName)",
      "right" : "void startPass(String passName)",
      "info" : "MethodDeclaration[21667-21878]:MethodDeclaration[21973-22184]"
    }, {
      "left" : "void endPass()",
      "right" : "void endPass()",
      "info" : "MethodDeclaration[21882-22225]:MethodDeclaration[22188-22531]"
    }, {
      "left" : "Tracer newTracer(String passName)",
      "right" : "Tracer newTracer(String passName)",
      "info" : "MethodDeclaration[22229-22562]:MethodDeclaration[22535-22868]"
    }, {
      "left" : "void stopTracer(Tracer t, String passName)",
      "right" : "void stopTracer(Tracer t, String passName)",
      "info" : "MethodDeclaration[22566-22729]:MethodDeclaration[22872-23035]"
    }, {
      "left" : "public Result getResult()",
      "right" : "public Result getResult()",
      "info" : "MethodDeclaration[22733-23121]:MethodDeclaration[23039-23427]"
    }, {
      "left" : "public JSError[] getMessages()",
      "right" : "public JSError[] getMessages()",
      "info" : "MethodDeclaration[23125-23265]:MethodDeclaration[23431-23571]"
    }, {
      "left" : "public JSError[] getErrors()",
      "right" : "public JSError[] getErrors()",
      "info" : "MethodDeclaration[23269-23399]:MethodDeclaration[23575-23705]"
    }, {
      "left" : "public JSError[] getWarnings()",
      "right" : "public JSError[] getWarnings()",
      "info" : "MethodDeclaration[23403-23539]:MethodDeclaration[23709-23845]"
    }, {
      "left" : "public Node getRoot()",
      "right" : "public Node getRoot()",
      "info" : "MethodDeclaration[23543-23689]:MethodDeclaration[23849-23995]"
    }, {
      "left" : "private int nextUniqueNameId()",
      "right" : "private int nextUniqueNameId()",
      "info" : "MethodDeclaration[23693-23815]:MethodDeclaration[23999-24121]"
    }, {
      "left" : "void resetUniqueNameId()",
      "right" : "void resetUniqueNameId()",
      "info" : "MethodDeclaration[23819-23943]:MethodDeclaration[24125-24249]"
    }, {
      "left" : "Supplier<String> getUniqueNameIdSupplier()",
      "right" : "Supplier<String> getUniqueNameIdSupplier()",
      "info" : "MethodDeclaration[23947-24174]:MethodDeclaration[24253-24480]"
    }, {
      "left" : "public String get()",
      "right" : "public String get()",
      "info" : "MethodDeclaration[24078-24163]:MethodDeclaration[24384-24469]"
    }, {
      "left" : "void setNormalized()",
      "right" : "void setNormalized()",
      "info" : "MethodDeclaration[24178-24378]:MethodDeclaration[24484-24684]"
    }, {
      "left" : "void setUnnormalized()",
      "right" : "void setUnnormalized()",
      "info" : "MethodDeclaration[24382-24587]:MethodDeclaration[24688-24893]"
    }, {
      "left" : "boolean isNormalized()",
      "right" : "boolean isNormalized()",
      "info" : "MethodDeclaration[24591-24654]:MethodDeclaration[24897-24960]"
    }, {
      "left" : "boolean areNodesEqualForInlining(Node n1, Node n2)",
      "right" : "boolean areNodesEqualForInlining(Node n1, Node n2)",
      "info" : "MethodDeclaration[24658-25039]:MethodDeclaration[24964-25345]"
    }, {
      "left" : "public CompilerInput getInput(String name)",
      "right" : "public CompilerInput getInput(String name)",
      "info" : "MethodDeclaration[25350-25445]:MethodDeclaration[25656-25751]"
    }, {
      "left" : "public CompilerInput newExternInput(String name)",
      "right" : "public CompilerInput newExternInput(String name)",
      "info" : "MethodDeclaration[25449-25856]:MethodDeclaration[25755-26162]"
    }, {
      "left" : "void addIncrementalSourceAst(JsAst ast)",
      "right" : "void addIncrementalSourceAst(JsAst ast)",
      "info" : "MethodDeclaration[25860-26215]:MethodDeclaration[26166-26521]"
    }, {
      "left" : "JSModuleGraph getModuleGraph()",
      "right" : "JSModuleGraph getModuleGraph()",
      "info" : "MethodDeclaration[26219-26291]:MethodDeclaration[26525-26597]"
    }, {
      "left" : "public JSTypeRegistry getTypeRegistry()",
      "right" : "public JSTypeRegistry getTypeRegistry()",
      "info" : "MethodDeclaration[26295-26474]:MethodDeclaration[26601-26780]"
    }, {
      "left" : "ScopeCreator getScopeCreator()",
      "right" : "ScopeCreator getScopeCreator()",
      "info" : "MethodDeclaration[26478-26572]:MethodDeclaration[26784-26878]"
    }, {
      "left" : "public Scope getTopScope()",
      "right" : "public Scope getTopScope()",
      "info" : "MethodDeclaration[26576-26662]:MethodDeclaration[26882-26968]"
    }, {
      "left" : "public ReverseAbstractInterpreter getReverseAbstractInterpreter()",
      "right" : "public ReverseAbstractInterpreter getReverseAbstractInterpreter()",
      "info" : "MethodDeclaration[26666-27231]:MethodDeclaration[26972-27537]"
    }, {
      "left" : "TypeValidator getTypeValidator()",
      "right" : "TypeValidator getTypeValidator()",
      "info" : "MethodDeclaration[27235-27311]:MethodDeclaration[27541-27617]"
    }, {
      "left" : "Node parseInputs()",
      "right" : "Node parseInputs()",
      "info" : "MethodDeclaration[27483-29698]:MethodDeclaration[27789-30004]"
    }, {
      "left" : "public Node parse(JSSourceFile file)",
      "right" : "public Node parse(JSSourceFile file)",
      "info" : "MethodDeclaration[29702-29874]:MethodDeclaration[30008-30180]"
    }, {
      "left" : "Node parseSyntheticCode(String js)",
      "right" : "Node parseSyntheticCode(String js)",
      "info" : "MethodDeclaration[29878-30109]:MethodDeclaration[30184-30415]"
    }, {
      "left" : "void initCompilerOptionsIfTesting()",
      "right" : "void initCompilerOptionsIfTesting()",
      "info" : "MethodDeclaration[30113-30333]:MethodDeclaration[30419-30639]"
    }, {
      "left" : "Node parseSyntheticCode(String fileName, String js)",
      "right" : "Node parseSyntheticCode(String fileName, String js)",
      "info" : "MethodDeclaration[30337-30497]:MethodDeclaration[30643-30803]"
    }, {
      "left" : "Node parseTestCode(String js)",
      "right" : "Node parseTestCode(String js)",
      "info" : "MethodDeclaration[30501-30828]:MethodDeclaration[30807-31134]"
    }, {
      "left" : "ErrorReporter getDefaultErrorReporter()",
      "right" : "ErrorReporter getDefaultErrorReporter()",
      "info" : "MethodDeclaration[30832-30922]:MethodDeclaration[31138-31228]"
    }, {
      "left" : "public String toSource()",
      "right" : "public String toSource()",
      "info" : "MethodDeclaration[31114-31812]:MethodDeclaration[31420-32118]"
    }, {
      "left" : "public String call() throws Exception",
      "right" : "public String call() throws Exception",
      "info" : "MethodDeclaration[31266-31800]:MethodDeclaration[31572-32106]"
    }, {
      "left" : "public String[] toSourceArray()",
      "right" : "public String[] toSourceArray()",
      "info" : "MethodDeclaration[31816-32588]:MethodDeclaration[32122-32894]"
    }, {
      "left" : "public String[] call() throws Exception",
      "right" : "public String[] call() throws Exception",
      "info" : "MethodDeclaration[31987-32576]:MethodDeclaration[32293-32882]"
    }, {
      "left" : "public String toSource(final JSModule module)",
      "right" : "public String toSource(final JSModule module)",
      "info" : "MethodDeclaration[32592-33375]:MethodDeclaration[32898-33681]"
    }, {
      "left" : "public String call() throws Exception",
      "right" : "public String call() throws Exception",
      "info" : "MethodDeclaration[32773-33363]:MethodDeclaration[33079-33669]"
    }, {
      "left" : "public String[] toSourceArray(final JSModule module)",
      "right" : "public String[] toSourceArray(final JSModule module)",
      "info" : "MethodDeclaration[33380-34318]:MethodDeclaration[33686-34624]"
    }, {
      "left" : "public String[] call() throws Exception",
      "right" : "public String[] call() throws Exception",
      "info" : "MethodDeclaration[33584-34306]:MethodDeclaration[33890-34612]"
    }, {
      "left" : "public void toSource(final CodeBuilder cb,\n                       final int inputSeqNum,\n                       final Node root)",
      "right" : "public void toSource(final CodeBuilder cb,\n                       final int inputSeqNum,\n                       final Node root)",
      "info" : "MethodDeclaration[34322-36392]:MethodDeclaration[34628-36698]"
    }, {
      "left" : "public Void call() throws Exception",
      "right" : "public Void call() throws Exception",
      "info" : "MethodDeclaration[34859-36380]:MethodDeclaration[35165-36686]"
    }, {
      "left" : "String toSource(Node n)",
      "right" : "String toSource(Node n)",
      "info" : "MethodDeclaration[36396-36814]:MethodDeclaration[36702-37120]"
    }, {
      "left" : "CodeBuilder",
      "right" : "CodeBuilder",
      "info" : "TypeDeclaration[36818-38358]:TypeDeclaration[37124-38664]"
    }, {
      "left" : "private final StringBuilder sb = new StringBuilder();",
      "right" : "private final StringBuilder sb = new StringBuilder();",
      "info" : "FieldDeclaration[37015-37068]:FieldDeclaration[37321-37374]"
    }, {
      "left" : "private int lineCount = 0;",
      "right" : "private int lineCount = 0;",
      "info" : "FieldDeclaration[37073-37099]:FieldDeclaration[37379-37405]"
    }, {
      "left" : "void reset()",
      "right" : "void reset()",
      "info" : "MethodDeclaration[37105-37214]:MethodDeclaration[37411-37520]"
    }, {
      "left" : "CodeBuilder append(String str)",
      "right" : "CodeBuilder append(String str)",
      "info" : "MethodDeclaration[37220-37525]:MethodDeclaration[37526-37831]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[37531-37653]:MethodDeclaration[37837-37959]"
    }, {
      "left" : "public int getLength()",
      "right" : "public int getLength()",
      "info" : "MethodDeclaration[37659-37765]:MethodDeclaration[37965-38071]"
    }, {
      "left" : "int getLineIndex()",
      "right" : "int getLineIndex()",
      "info" : "MethodDeclaration[37771-37900]:MethodDeclaration[38077-38206]"
    }, {
      "left" : "int getColumnIndex()",
      "right" : "int getColumnIndex()",
      "info" : "MethodDeclaration[37906-38124]:MethodDeclaration[38212-38430]"
    }, {
      "left" : "boolean endsWith(String suffix)",
      "right" : "boolean endsWith(String suffix)",
      "info" : "MethodDeclaration[38130-38354]:MethodDeclaration[38436-38660]"
    }, {
      "left" : "public void optimize()",
      "right" : "public void optimize()",
      "info" : "MethodDeclaration[38536-38896]:MethodDeclaration[38842-39202]"
    }, {
      "left" : "void setCssRenamingMap(CssRenamingMap map)",
      "right" : "void setCssRenamingMap(CssRenamingMap map)",
      "info" : "MethodDeclaration[38900-38994]:MethodDeclaration[39206-39300]"
    }, {
      "left" : "CssRenamingMap getCssRenamingMap()",
      "right" : "CssRenamingMap getCssRenamingMap()",
      "info" : "MethodDeclaration[38998-39085]:MethodDeclaration[39304-39391]"
    }, {
      "left" : "public void processDefines()",
      "right" : "public void processDefines()",
      "info" : "MethodDeclaration[39089-39576]:MethodDeclaration[39395-39882]"
    }, {
      "left" : "boolean isInliningForbidden()",
      "right" : "boolean isInliningForbidden()",
      "info" : "MethodDeclaration[39580-39783]:MethodDeclaration[39886-40089]"
    }, {
      "left" : "ControlFlowGraph<Node> computeCFG()",
      "right" : "ControlFlowGraph<Node> computeCFG()",
      "info" : "MethodDeclaration[39787-40102]:MethodDeclaration[40093-40408]"
    }, {
      "left" : "public void normalize()",
      "right" : "public void normalize()",
      "info" : "MethodDeclaration[40106-40272]:MethodDeclaration[40412-40578]"
    }, {
      "left" : "void prepareAst(Node root)",
      "right" : "void prepareAst(Node root)",
      "info" : "MethodDeclaration[40276-40479]:MethodDeclaration[40582-40785]"
    }, {
      "left" : "void recordFunctionInformation()",
      "right" : "void recordFunctionInformation()",
      "info" : "MethodDeclaration[40483-40897]:MethodDeclaration[40789-41203]"
    }, {
      "left" : "protected final CodeChangeHandler.RecentChange recentChange =\n      new CodeChangeHandler.RecentChange();",
      "right" : "protected final CodeChangeHandler.RecentChange recentChange =\n      new CodeChangeHandler.RecentChange();",
      "info" : "FieldDeclaration[40901-41006]:FieldDeclaration[41207-41312]"
    }, {
      "left" : "private final List<CodeChangeHandler> codeChangeHandlers =\n      Lists.<CodeChangeHandler>newArrayList();",
      "right" : "private final List<CodeChangeHandler> codeChangeHandlers =\n      Lists.<CodeChangeHandler>newArrayList();",
      "info" : "FieldDeclaration[41009-41114]:FieldDeclaration[41315-41420]"
    }, {
      "left" : "void addChangeHandler(CodeChangeHandler handler)",
      "right" : "void addChangeHandler(CodeChangeHandler handler)",
      "info" : "MethodDeclaration[41118-41221]:MethodDeclaration[41424-41527]"
    }, {
      "left" : "void removeChangeHandler(CodeChangeHandler handler)",
      "right" : "void removeChangeHandler(CodeChangeHandler handler)",
      "info" : "MethodDeclaration[41225-41334]:MethodDeclaration[41531-41640]"
    }, {
      "left" : "public void reportCodeChange()",
      "right" : "public void reportCodeChange()",
      "info" : "MethodDeclaration[41338-41672]:MethodDeclaration[41644-41978]"
    }, {
      "left" : "public CodingConvention getCodingConvention()",
      "right" : "public CodingConvention getCodingConvention()",
      "info" : "MethodDeclaration[41676-41903]:MethodDeclaration[41982-42209]"
    }, {
      "left" : "public boolean isIdeMode()",
      "right" : "public boolean isIdeMode()",
      "info" : "MethodDeclaration[41907-41979]:MethodDeclaration[42213-42285]"
    }, {
      "left" : "Config getParserConfig()",
      "right" : "Config getParserConfig()",
      "info" : "MethodDeclaration[41983-42179]:MethodDeclaration[42289-42485]"
    }, {
      "left" : "public boolean isTypeCheckingEnabled()",
      "right" : "public boolean isTypeCheckingEnabled()",
      "info" : "MethodDeclaration[42183-42270]:MethodDeclaration[42489-42576]"
    }, {
      "left" : "public void report(JSError error)",
      "right" : "public void report(JSError error)",
      "info" : "MethodDeclaration[42451-42807]:MethodDeclaration[42757-43113]"
    }, {
      "left" : "void throwInternalError(String message, Exception cause)",
      "right" : "void throwInternalError(String message, Exception cause)",
      "info" : "MethodDeclaration[42811-43199]:MethodDeclaration[43117-43505]"
    }, {
      "left" : "public int getErrorCount()",
      "right" : "public int getErrorCount()",
      "info" : "MethodDeclaration[43204-43321]:MethodDeclaration[43510-43627]"
    }, {
      "left" : "public int getWarningCount()",
      "right" : "public int getWarningCount()",
      "info" : "MethodDeclaration[43325-43448]:MethodDeclaration[43631-43754]"
    }, {
      "left" : "boolean hasHaltingErrors()",
      "right" : "boolean hasHaltingErrors()",
      "info" : "MethodDeclaration[43452-43544]:MethodDeclaration[43758-43850]"
    }, {
      "left" : "public boolean hasErrors()",
      "right" : "public boolean hasErrors()",
      "info" : "MethodDeclaration[43548-44029]:MethodDeclaration[43854-44335]"
    }, {
      "left" : "void addToDebugLog(String str)",
      "right" : "void addToDebugLog(String str)",
      "info" : "MethodDeclaration[44033-44214]:MethodDeclaration[44339-44520]"
    }, {
      "left" : "private SourceFile getSourceFileByName(String sourceName)",
      "right" : "private SourceFile getSourceFileByName(String sourceName)",
      "info" : "MethodDeclaration[44218-44411]:MethodDeclaration[44524-44717]"
    }, {
      "left" : "public String getSourceLine(String sourceName, int lineNumber)",
      "right" : "public String getSourceLine(String sourceName, int lineNumber)",
      "info" : "MethodDeclaration[44415-44678]:MethodDeclaration[44721-44984]"
    }, {
      "left" : "public Region getSourceRegion(String sourceName, int lineNumber)",
      "right" : "public Region getSourceRegion(String sourceName, int lineNumber)",
      "info" : "MethodDeclaration[44682-44949]:MethodDeclaration[44988-45255]"
    }, {
      "left" : "Node getNodeForCodeInsertion(JSModule module)",
      "right" : "Node getNodeForCodeInsertion(JSModule module)",
      "info" : "MethodDeclaration[45137-45770]:MethodDeclaration[45443-45874]"
    }, {
      "left" : "public SourceMap getSourceMap()",
      "right" : "public SourceMap getSourceMap()",
      "info" : "MethodDeclaration[45774-45833]:MethodDeclaration[45878-45937]"
    }, {
      "left" : "VariableMap getVariableMap()",
      "right" : "VariableMap getVariableMap()",
      "info" : "MethodDeclaration[45837-45934]:MethodDeclaration[45941-46038]"
    }, {
      "left" : "VariableMap getPropertyMap()",
      "right" : "VariableMap getPropertyMap()",
      "info" : "MethodDeclaration[45938-46035]:MethodDeclaration[46042-46139]"
    }, {
      "left" : "CompilerOptions getOptions()",
      "right" : "CompilerOptions getOptions()",
      "info" : "MethodDeclaration[46039-46093]:MethodDeclaration[46143-46197]"
    }, {
      "left" : "FunctionInformationMap getFunctionalInformationMap()",
      "right" : "FunctionInformationMap getFunctionalInformationMap()",
      "info" : "MethodDeclaration[46097-46190]:MethodDeclaration[46201-46294]"
    }, {
      "left" : "public static void setLoggingLevel(Level level)",
      "right" : "public static void setLoggingLevel(Level level)",
      "info" : "MethodDeclaration[46194-46361]:MethodDeclaration[46298-46465]"
    }, {
      "left" : "public String getAstDotGraph() throws IOException",
      "right" : "public String getAstDotGraph() throws IOException",
      "info" : "MethodDeclaration[46365-46715]:MethodDeclaration[46469-46819]"
    }, {
      "left" : "public ErrorManager getErrorManager()",
      "right" : "public ErrorManager getErrorManager()",
      "info" : "MethodDeclaration[46719-46874]:MethodDeclaration[46823-46978]"
    }, {
      "left" : "IntermediateState",
      "right" : "IntermediateState",
      "info" : "TypeDeclaration[46878-47904]:TypeDeclaration[46982-48008]"
    }, {
      "left" : "private static final long serialVersionUID = 1L;",
      "right" : "private static final long serialVersionUID = 1L;",
      "info" : "FieldDeclaration[47544-47592]:FieldDeclaration[47648-47696]"
    }, {
      "left" : "Node externsRoot;",
      "right" : "Node externsRoot;",
      "info" : "FieldDeclaration[47598-47615]:FieldDeclaration[47702-47719]"
    }, {
      "left" : "private Node jsRoot;",
      "right" : "private Node jsRoot;",
      "info" : "FieldDeclaration[47620-47640]:FieldDeclaration[47724-47744]"
    }, {
      "left" : "private CompilerInput[] externs;",
      "right" : "private CompilerInput[] externs;",
      "info" : "FieldDeclaration[47645-47677]:FieldDeclaration[47749-47781]"
    }, {
      "left" : "private CompilerInput[] inputs;",
      "right" : "private CompilerInput[] inputs;",
      "info" : "FieldDeclaration[47682-47713]:FieldDeclaration[47786-47817]"
    }, {
      "left" : "private JSModule[] modules;",
      "right" : "private JSModule[] modules;",
      "info" : "FieldDeclaration[47718-47745]:FieldDeclaration[47822-47849]"
    }, {
      "left" : "private PassConfig.State passConfigState;",
      "right" : "private PassConfig.State passConfigState;",
      "info" : "FieldDeclaration[47750-47791]:FieldDeclaration[47854-47895]"
    }, {
      "left" : "private JSTypeRegistry typeRegistry;",
      "right" : "private JSTypeRegistry typeRegistry;",
      "info" : "FieldDeclaration[47796-47832]:FieldDeclaration[47900-47936]"
    }, {
      "left" : "private boolean normalized;",
      "right" : "private boolean normalized;",
      "info" : "FieldDeclaration[47837-47864]:FieldDeclaration[47941-47968]"
    }, {
      "left" : "private IntermediateState()",
      "right" : "private IntermediateState()",
      "info" : "MethodDeclaration[47870-47900]:MethodDeclaration[47974-48004]"
    }, {
      "left" : "public IntermediateState getState()",
      "right" : "public IntermediateState getState()",
      "info" : "MethodDeclaration[47908-48406]:MethodDeclaration[48012-48510]"
    }, {
      "left" : "public void setState(IntermediateState state)",
      "right" : "public void setState(IntermediateState state)",
      "info" : "MethodDeclaration[48410-48923]:MethodDeclaration[48514-49027]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2105-2111]:Modifier[2105-2111]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[2112-2117]:TYPE_DECLARATION_KIND[2112-2117]"
    }, {
      "left" : "Compiler",
      "right" : "Compiler",
      "info" : "SimpleName[2118-2126]:SimpleName[2118-2126]"
    }, {
      "left" : "AbstractCompiler",
      "right" : "AbstractCompiler",
      "info" : "SimpleType[2135-2151]:SimpleType[2135-2151]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5115-5121]:Modifier[5115-5121]"
    }, {
      "left" : "Compiler",
      "right" : "Compiler",
      "info" : "SimpleName[5122-5130]:SimpleName[5122-5130]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5133-5168]:Block[5133-5168]"
    }, {
      "left" : "this((PrintStream) null);",
      "right" : "this((PrintStream) null);",
      "info" : "ConstructorInvocation[5139-5164]:ConstructorInvocation[5139-5164]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5267-5273]:Modifier[5267-5273]"
    }, {
      "left" : "Compiler",
      "right" : "Compiler",
      "info" : "SimpleName[5274-5282]:SimpleName[5274-5282]"
    }, {
      "left" : "PrintStream stream",
      "right" : "PrintStream stream",
      "info" : "SingleVariableDeclaration[5283-5301]:SingleVariableDeclaration[5283-5301]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5303-5418]:Block[5303-5418]"
    }, {
      "left" : "addChangeHandler(recentChange);",
      "right" : "addChangeHandler(recentChange);",
      "info" : "ExpressionStatement[5309-5340]:ExpressionStatement[5309-5340]"
    }, {
      "left" : "this.typeValidator = new TypeValidator(this);",
      "right" : "this.typeValidator = new TypeValidator(this);",
      "info" : "ExpressionStatement[5345-5390]:ExpressionStatement[5345-5390]"
    }, {
      "left" : "outStream = stream;",
      "right" : "outStream = stream;",
      "info" : "ExpressionStatement[5395-5414]:ExpressionStatement[5395-5414]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5492-5498]:Modifier[5492-5498]"
    }, {
      "left" : "Compiler",
      "right" : "Compiler",
      "info" : "SimpleName[5499-5507]:SimpleName[5499-5507]"
    }, {
      "left" : "ErrorManager errorManager",
      "right" : "ErrorManager errorManager",
      "info" : "SingleVariableDeclaration[5508-5533]:SingleVariableDeclaration[5508-5533]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5535-5587]:Block[5535-5587]"
    }, {
      "left" : "this();",
      "right" : "this();",
      "info" : "ConstructorInvocation[5541-5548]:ConstructorInvocation[5541-5548]"
    }, {
      "left" : "setErrorManager(errorManager);",
      "right" : "setErrorManager(errorManager);",
      "info" : "ExpressionStatement[5553-5583]:ExpressionStatement[5553-5583]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[5635-5644]:MarkerAnnotation[5635-5644]"
    }, {
      "left" : "SymbolTable",
      "right" : "SymbolTable",
      "info" : "SimpleType[5647-5658]:SimpleType[5647-5658]"
    }, {
      "left" : "acquireSymbolTable",
      "right" : "acquireSymbolTable",
      "info" : "SimpleName[5659-5677]:SimpleName[5659-5677]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5680-5816]:Block[5680-5816]"
    }, {
      "left" : "if (symbolTable == null)",
      "right" : "if (symbolTable == null)",
      "info" : "IfStatement[5686-5761]:IfStatement[5686-5761]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5711-5761]:Block[5711-5761]"
    }, {
      "left" : "symbolTable = new SymbolTable(this);",
      "right" : "symbolTable = new SymbolTable(this);",
      "info" : "ExpressionStatement[5719-5755]:ExpressionStatement[5719-5755]"
    }, {
      "left" : "symbolTable.acquire();",
      "right" : "symbolTable.acquire();",
      "info" : "ExpressionStatement[5766-5788]:ExpressionStatement[5766-5788]"
    }, {
      "left" : "return symbolTable;",
      "right" : "return symbolTable;",
      "info" : "ReturnStatement[5793-5812]:ReturnStatement[5793-5812]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5936-5942]:Modifier[5936-5942]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[5943-5947]:PrimitiveType[5943-5947]"
    }, {
      "left" : "setErrorManager",
      "right" : "setErrorManager",
      "info" : "SimpleName[5948-5963]:SimpleName[5948-5963]"
    }, {
      "left" : "ErrorManager errorManager",
      "right" : "ErrorManager errorManager",
      "info" : "SingleVariableDeclaration[5964-5989]:SingleVariableDeclaration[5964-5989]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5991-6125]:Block[5991-6125]"
    }, {
      "left" : "Preconditions.checkNotNull(\n        errorManager, \"the error manager cannot be null\");",
      "right" : "Preconditions.checkNotNull(\n        errorManager, \"the error manager cannot be null\");",
      "info" : "ExpressionStatement[5997-6083]:ExpressionStatement[5997-6083]"
    }, {
      "left" : "this.errorManager = errorManager;",
      "right" : "this.errorManager = errorManager;",
      "info" : "ExpressionStatement[6088-6121]:ExpressionStatement[6088-6121]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[6243-6250]:Modifier[6243-6250]"
    }, {
      "left" : "MessageFormatter",
      "right" : "MessageFormatter",
      "info" : "SimpleType[6251-6267]:SimpleType[6251-6267]"
    }, {
      "left" : "createMessageFormatter",
      "right" : "createMessageFormatter",
      "info" : "SimpleName[6268-6290]:SimpleName[6268-6290]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6293-6418]:Block[6293-6418]"
    }, {
      "left" : "boolean colorize = options.shouldColorizeErrorOutput();",
      "right" : "boolean colorize = options.shouldColorizeErrorOutput();",
      "info" : "VariableDeclarationStatement[6299-6354]:VariableDeclarationStatement[6299-6354]"
    }, {
      "left" : "return options.errorFormat.toFormatter(this, colorize);",
      "right" : "return options.errorFormat.toFormatter(this, colorize);",
      "info" : "ReturnStatement[6359-6414]:ReturnStatement[6359-6414]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6536-6542]:Modifier[6536-6542]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6543-6547]:PrimitiveType[6543-6547]"
    }, {
      "left" : "initOptions",
      "right" : "initOptions",
      "info" : "SimpleName[6548-6559]:SimpleName[6548-6559]"
    }, {
      "left" : "CompilerOptions options",
      "right" : "CompilerOptions options",
      "info" : "SingleVariableDeclaration[6560-6583]:SingleVariableDeclaration[6560-6583]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6585-7027]:Block[6585-7027]"
    }, {
      "left" : "this.options = options;",
      "right" : "this.options = options;",
      "info" : "ExpressionStatement[6591-6614]:ExpressionStatement[6591-6614]"
    }, {
      "left" : "if (errorManager == null)",
      "right" : "if (errorManager == null)",
      "info" : "IfStatement[6619-7023]:IfStatement[6619-7023]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6645-7023]:Block[6645-7023]"
    }, {
      "left" : "if (outStream == null)",
      "right" : "if (outStream == null)",
      "info" : "IfStatement[6653-7017]:IfStatement[6653-7017]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6676-6781]:Block[6676-6781]"
    }, {
      "left" : "setErrorManager(\n            new LoggerErrorManager(createMessageFormatter(), logger));",
      "right" : "setErrorManager(\n            new LoggerErrorManager(createMessageFormatter(), logger));",
      "info" : "ExpressionStatement[6686-6773]:ExpressionStatement[6686-6773]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6787-7017]:Block[6787-7017]"
    }, {
      "left" : "PrintStreamErrorManager printer =\n            new PrintStreamErrorManager(createMessageFormatter(), outStream);",
      "right" : "PrintStreamErrorManager printer =\n            new PrintStreamErrorManager(createMessageFormatter(), outStream);",
      "info" : "VariableDeclarationStatement[6797-6908]:VariableDeclarationStatement[6797-6908]"
    }, {
      "left" : "printer.setSummaryDetailLevel(options.summaryDetailLevel);",
      "right" : "printer.setSummaryDetailLevel(options.summaryDetailLevel);",
      "info" : "ExpressionStatement[6917-6975]:ExpressionStatement[6917-6975]"
    }, {
      "left" : "setErrorManager(printer);",
      "right" : "setErrorManager(printer);",
      "info" : "ExpressionStatement[6984-7009]:ExpressionStatement[6984-7009]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7105-7111]:Modifier[7105-7111]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7112-7116]:PrimitiveType[7112-7116]"
    }, {
      "left" : "init",
      "right" : "init",
      "info" : "SimpleName[7117-7121]:SimpleName[7117-7121]"
    }, {
      "left" : "JSSourceFile[] externs",
      "right" : "JSSourceFile[] externs",
      "info" : "SingleVariableDeclaration[7122-7144]:SingleVariableDeclaration[7122-7144]"
    }, {
      "left" : "JSSourceFile[] inputs",
      "right" : "JSSourceFile[] inputs",
      "info" : "SingleVariableDeclaration[7146-7167]:SingleVariableDeclaration[7146-7167]"
    }, {
      "left" : "CompilerOptions options",
      "right" : "CompilerOptions options",
      "info" : "SingleVariableDeclaration[7175-7198]:SingleVariableDeclaration[7175-7198]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7200-7449]:Block[7200-7449]"
    }, {
      "left" : "initOptions(options);",
      "right" : "initOptions(options);",
      "info" : "ExpressionStatement[7206-7227]:ExpressionStatement[7206-7227]"
    }, {
      "left" : "this.externs = makeCompilerInput(externs, true);",
      "right" : "this.externs = makeCompilerInput(externs, true);",
      "info" : "ExpressionStatement[7237-7285]:ExpressionStatement[7237-7285]"
    }, {
      "left" : "this.modules = null;",
      "right" : "this.modules = null;",
      "info" : "ExpressionStatement[7290-7310]:ExpressionStatement[7290-7310]"
    }, {
      "left" : "this.moduleGraph = null;",
      "right" : "this.moduleGraph = null;",
      "info" : "ExpressionStatement[7315-7339]:ExpressionStatement[7315-7339]"
    }, {
      "left" : "this.inputs = makeCompilerInput(inputs, false);",
      "right" : "this.inputs = makeCompilerInput(inputs, false);",
      "info" : "ExpressionStatement[7344-7391]:ExpressionStatement[7344-7391]"
    }, {
      "left" : "initBasedOnOptions();",
      "right" : "initBasedOnOptions();",
      "info" : "ExpressionStatement[7396-7417]:ExpressionStatement[7396-7417]"
    }, {
      "left" : "initInputsByNameMap();",
      "right" : "initInputsByNameMap();",
      "info" : "ExpressionStatement[7423-7445]:ExpressionStatement[7423-7445]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7747-7753]:Modifier[7747-7753]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7754-7758]:PrimitiveType[7754-7758]"
    }, {
      "left" : "init",
      "right" : "init",
      "info" : "SimpleName[7759-7763]:SimpleName[7759-7763]"
    }, {
      "left" : "JSSourceFile[] externs",
      "right" : "JSSourceFile[] externs",
      "info" : "SingleVariableDeclaration[7764-7786]:SingleVariableDeclaration[7764-7786]"
    }, {
      "left" : "JSModule[] modules",
      "right" : "JSModule[] modules",
      "info" : "SingleVariableDeclaration[7788-7806]:SingleVariableDeclaration[7788-7806]"
    }, {
      "left" : "CompilerOptions options",
      "right" : "CompilerOptions options",
      "info" : "SingleVariableDeclaration[7814-7837]:SingleVariableDeclaration[7814-7837]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7839-8552]:Block[7839-8583]"
    }, {
      "left" : "initOptions(options);",
      "right" : "initOptions(options);",
      "info" : "ExpressionStatement[7845-7866]:ExpressionStatement[7845-7866]"
    }, {
      "left" : "checkFirstModule(modules);",
      "right" : "checkFirstModule(modules);",
      "info" : "ExpressionStatement[7872-7898]:ExpressionStatement[7872-7898]"
    }, {
      "left" : "this.externs = makeCompilerInput(externs, true);",
      "right" : "this.externs = makeCompilerInput(externs, true);",
      "info" : "ExpressionStatement[7904-7952]:ExpressionStatement[7935-7983]"
    }, {
      "left" : "this.modules = modules;",
      "right" : "this.modules = modules;",
      "info" : "ExpressionStatement[7957-7980]:ExpressionStatement[7988-8011]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[8087-8449]:TryStatement[8118-8480]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8091-8151]:Block[8122-8182]"
    }, {
      "left" : "this.moduleGraph = new JSModuleGraph(modules);",
      "right" : "this.moduleGraph = new JSModuleGraph(modules);",
      "info" : "ExpressionStatement[8099-8145]:ExpressionStatement[8130-8176]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8202-8449]:Block[8233-8480]"
    }, {
      "left" : "report(JSError.make(MODULE_DEPENDENCY_ERROR,\n          e.getModule().getName(), e.getDependentModule().getName()));",
      "right" : "report(JSError.make(MODULE_DEPENDENCY_ERROR,\n          e.getModule().getName(), e.getDependentModule().getName()));",
      "info" : "ExpressionStatement[8314-8429]:ExpressionStatement[8345-8460]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[8436-8443]:ReturnStatement[8467-8474]"
    }, {
      "left" : "this.inputs = getAllInputsFromModules();",
      "right" : "this.inputs = getAllInputsFromModules();",
      "info" : "ExpressionStatement[8454-8494]:ExpressionStatement[8485-8525]"
    }, {
      "left" : "initBasedOnOptions();",
      "right" : "initBasedOnOptions();",
      "info" : "ExpressionStatement[8499-8520]:ExpressionStatement[8530-8551]"
    }, {
      "left" : "initInputsByNameMap();",
      "right" : "initInputsByNameMap();",
      "info" : "ExpressionStatement[8526-8548]:ExpressionStatement[8557-8579]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[8638-8645]:Modifier[8669-8676]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[8646-8650]:PrimitiveType[8677-8681]"
    }, {
      "left" : "initBasedOnOptions",
      "right" : "initBasedOnOptions",
      "info" : "SimpleName[8651-8669]:SimpleName[8682-8700]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8672-8808]:Block[8703-8839]"
    }, {
      "left" : "if (options.sourceMapOutputPath != null)",
      "right" : "if (options.sourceMapOutputPath != null)",
      "info" : "IfStatement[8721-8804]:IfStatement[8752-8835]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8762-8804]:Block[8793-8835]"
    }, {
      "left" : "sourceMap = new SourceMap();",
      "right" : "sourceMap = new SourceMap();",
      "info" : "ExpressionStatement[8770-8798]:ExpressionStatement[8801-8829]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[8812-8819]:Modifier[8843-8850]"
    }, {
      "left" : "CompilerInput[]",
      "right" : "CompilerInput[]",
      "info" : "ArrayType[8820-8835]:ArrayType[8851-8866]"
    }, {
      "left" : "makeCompilerInput",
      "right" : "makeCompilerInput",
      "info" : "SimpleName[8836-8853]:SimpleName[8867-8884]"
    }, {
      "left" : "JSSourceFile[] files",
      "right" : "JSSourceFile[] files",
      "info" : "SingleVariableDeclaration[8861-8881]:SingleVariableDeclaration[8892-8912]"
    }, {
      "left" : "boolean isExtern",
      "right" : "boolean isExtern",
      "info" : "SingleVariableDeclaration[8883-8899]:SingleVariableDeclaration[8914-8930]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8901-9096]:Block[8932-9127]"
    }, {
      "left" : "CompilerInput [] inputs = new CompilerInput[files.length];",
      "right" : "CompilerInput [] inputs = new CompilerInput[files.length];",
      "info" : "VariableDeclarationStatement[8907-8965]:VariableDeclarationStatement[8938-8996]"
    }, {
      "left" : "for (int i = 0; i < files.length; ++i)",
      "right" : "for (int i = 0; i < files.length; ++i)",
      "info" : "ForStatement[8970-9073]:ForStatement[9001-9104]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9009-9073]:Block[9040-9104]"
    }, {
      "left" : "inputs[i] = new CompilerInput(files[i], isExtern);",
      "right" : "inputs[i] = new CompilerInput(files[i], isExtern);",
      "info" : "ExpressionStatement[9017-9067]:ExpressionStatement[9048-9098]"
    }, {
      "left" : "return inputs;",
      "right" : "return inputs;",
      "info" : "ReturnStatement[9078-9092]:ReturnStatement[9109-9123]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[9606-9613]:Modifier[9637-9644]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[9614-9618]:PrimitiveType[9645-9649]"
    }, {
      "left" : "checkFirstModule",
      "right" : "checkFirstModule",
      "info" : "SimpleName[9619-9635]:SimpleName[9650-9666]"
    }, {
      "left" : "JSModule[] modules",
      "right" : "JSModule[] modules",
      "info" : "SingleVariableDeclaration[9636-9654]:SingleVariableDeclaration[9667-9685]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9656-9887]:Block[9687-9918]"
    }, {
      "left" : "if (modules.length == 0)",
      "right" : "if (modules.length == 0)",
      "info" : "IfStatement[9662-9883]:IfStatement[9693-9914]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9687-9747]:Block[9718-9778]"
    }, {
      "left" : "report(JSError.make(EMPTY_MODULE_LIST_ERROR));",
      "right" : "report(JSError.make(EMPTY_MODULE_LIST_ERROR));",
      "info" : "ExpressionStatement[9695-9741]:ExpressionStatement[9726-9772]"
    }, {
      "left" : "if (modules[0].getInputs().isEmpty())",
      "right" : "if (modules[0].getInputs().isEmpty())",
      "info" : "IfStatement[9753-9883]:IfStatement[9784-9914]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9791-9883]:Block[9822-9914]"
    }, {
      "left" : "report(JSError.make(EMPTY_ROOT_MODULE_ERROR,\n          modules[0].getName()));",
      "right" : "report(JSError.make(EMPTY_ROOT_MODULE_ERROR,\n          modules[0].getName()));",
      "info" : "ExpressionStatement[9799-9877]:ExpressionStatement[9830-9908]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10497-10503]:Modifier[10803-10809]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[10504-10508]:PrimitiveType[10810-10814]"
    }, {
      "left" : "rebuildInputsFromModules",
      "right" : "rebuildInputsFromModules",
      "info" : "SimpleName[10509-10533]:SimpleName[10815-10839]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10536-10608]:Block[10842-10914]"
    }, {
      "left" : "inputs = getAllInputsFromModules();",
      "right" : "inputs = getAllInputsFromModules();",
      "info" : "ExpressionStatement[10542-10577]:ExpressionStatement[10848-10883]"
    }, {
      "left" : "initInputsByNameMap();",
      "right" : "initInputsByNameMap();",
      "info" : "ExpressionStatement[10582-10604]:ExpressionStatement[10888-10910]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[10718-10725]:Modifier[11024-11031]"
    }, {
      "left" : "CompilerInput[]",
      "right" : "CompilerInput[]",
      "info" : "ArrayType[10726-10741]:ArrayType[11032-11047]"
    }, {
      "left" : "getAllInputsFromModules",
      "right" : "getAllInputsFromModules",
      "info" : "SimpleName[10742-10765]:SimpleName[11048-11071]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10768-11557]:Block[11074-11863]"
    }, {
      "left" : "List<CompilerInput> inputs = new ArrayList<CompilerInput>();",
      "right" : "List<CompilerInput> inputs = new ArrayList<CompilerInput>();",
      "info" : "VariableDeclarationStatement[10774-10834]:VariableDeclarationStatement[11080-11140]"
    }, {
      "left" : "Map<String, JSModule> inputMap = new HashMap<String, JSModule>();",
      "right" : "Map<String, JSModule> inputMap = new HashMap<String, JSModule>();",
      "info" : "VariableDeclarationStatement[10839-10904]:VariableDeclarationStatement[11145-11210]"
    }, {
      "left" : "for (JSModule module : modules)",
      "right" : "for (JSModule module : modules)",
      "info" : "EnhancedForStatement[10909-11371]:EnhancedForStatement[11215-11677]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10941-11371]:Block[11247-11677]"
    }, {
      "left" : "for (CompilerInput input : module.getInputs())",
      "right" : "for (CompilerInput input : module.getInputs())",
      "info" : "EnhancedForStatement[10949-11365]:EnhancedForStatement[11255-11671]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10996-11365]:Block[11302-11671]"
    }, {
      "left" : "String inputName = input.getName();",
      "right" : "String inputName = input.getName();",
      "info" : "VariableDeclarationStatement[11006-11041]:VariableDeclarationStatement[11312-11347]"
    }, {
      "left" : "JSModule firstModule = inputMap.get(inputName);",
      "right" : "JSModule firstModule = inputMap.get(inputName);",
      "info" : "VariableDeclarationStatement[11050-11097]:VariableDeclarationStatement[11356-11403]"
    }, {
      "left" : "if (firstModule == null)",
      "right" : "if (firstModule == null)",
      "info" : "IfStatement[11106-11357]:IfStatement[11412-11663]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11131-11214]:Block[11437-11520]"
    }, {
      "left" : "inputs.add(input);",
      "right" : "inputs.add(input);",
      "info" : "ExpressionStatement[11143-11161]:ExpressionStatement[11449-11467]"
    }, {
      "left" : "inputMap.put(inputName, module);",
      "right" : "inputMap.put(inputName, module);",
      "info" : "ExpressionStatement[11172-11204]:ExpressionStatement[11478-11510]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11220-11357]:Block[11526-11663]"
    }, {
      "left" : "report(JSError.make(DUPLICATE_INPUT_IN_MODULES,\n              firstModule.getName(), module.getName(), inputName));",
      "right" : "report(JSError.make(DUPLICATE_INPUT_IN_MODULES,\n              firstModule.getName(), module.getName(), inputName));",
      "info" : "ExpressionStatement[11232-11347]:ExpressionStatement[11538-11653]"
    }, {
      "left" : "if (hasErrors())",
      "right" : "if (hasErrors())",
      "info" : "IfStatement[11376-11491]:IfStatement[11682-11797]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11393-11491]:Block[11699-11797]"
    }, {
      "left" : "return new CompilerInput[0];",
      "right" : "return new CompilerInput[0];",
      "info" : "ReturnStatement[11457-11485]:ReturnStatement[11763-11791]"
    }, {
      "left" : "return inputs.toArray(new CompilerInput[inputs.size()]);",
      "right" : "return inputs.toArray(new CompilerInput[inputs.size()]);",
      "info" : "ReturnStatement[11497-11553]:ReturnStatement[11803-11859]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[11951-11955]:PrimitiveType[12257-12261]"
    }, {
      "left" : "initInputsByNameMap",
      "right" : "initInputsByNameMap",
      "info" : "SimpleName[11956-11975]:SimpleName[12262-12281]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11978-12536]:Block[12284-12842]"
    }, {
      "left" : "inputsByName = new HashMap<String, CompilerInput>();",
      "right" : "inputsByName = new HashMap<String, CompilerInput>();",
      "info" : "ExpressionStatement[11984-12036]:ExpressionStatement[12290-12342]"
    }, {
      "left" : "for (CompilerInput input : externs)",
      "right" : "for (CompilerInput input : externs)",
      "info" : "EnhancedForStatement[12041-12288]:EnhancedForStatement[12347-12594]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12077-12288]:Block[12383-12594]"
    }, {
      "left" : "String name = input.getName();",
      "right" : "String name = input.getName();",
      "info" : "VariableDeclarationStatement[12085-12115]:VariableDeclarationStatement[12391-12421]"
    }, {
      "left" : "if (!inputsByName.containsKey(name))",
      "right" : "if (!inputsByName.containsKey(name))",
      "info" : "IfStatement[12122-12282]:IfStatement[12428-12588]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12159-12207]:Block[12465-12513]"
    }, {
      "left" : "inputsByName.put(name, input);",
      "right" : "inputsByName.put(name, input);",
      "info" : "ExpressionStatement[12169-12199]:ExpressionStatement[12475-12505]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12213-12282]:Block[12519-12588]"
    }, {
      "left" : "report(JSError.make(DUPLICATE_EXTERN_INPUT, name));",
      "right" : "report(JSError.make(DUPLICATE_EXTERN_INPUT, name));",
      "info" : "ExpressionStatement[12223-12274]:ExpressionStatement[12529-12580]"
    }, {
      "left" : "for (CompilerInput input : inputs)",
      "right" : "for (CompilerInput input : inputs)",
      "info" : "EnhancedForStatement[12293-12532]:EnhancedForStatement[12599-12838]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12328-12532]:Block[12634-12838]"
    }, {
      "left" : "String name = input.getName();",
      "right" : "String name = input.getName();",
      "info" : "VariableDeclarationStatement[12336-12366]:VariableDeclarationStatement[12642-12672]"
    }, {
      "left" : "if (!inputsByName.containsKey(name))",
      "right" : "if (!inputsByName.containsKey(name))",
      "info" : "IfStatement[12373-12526]:IfStatement[12679-12832]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12410-12458]:Block[12716-12764]"
    }, {
      "left" : "inputsByName.put(name, input);",
      "right" : "inputsByName.put(name, input);",
      "info" : "ExpressionStatement[12420-12450]:ExpressionStatement[12726-12756]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12464-12526]:Block[12770-12832]"
    }, {
      "left" : "report(JSError.make(DUPLICATE_INPUT, name));",
      "right" : "report(JSError.make(DUPLICATE_INPUT, name));",
      "info" : "ExpressionStatement[12474-12518]:ExpressionStatement[12780-12824]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12540-12546]:Modifier[12846-12852]"
    }, {
      "left" : "Result",
      "right" : "Result",
      "info" : "SimpleType[12547-12553]:SimpleType[12853-12859]"
    }, {
      "left" : "compile",
      "right" : "compile",
      "info" : "SimpleName[12554-12561]:SimpleName[12860-12867]"
    }, {
      "left" : "JSSourceFile extern",
      "right" : "JSSourceFile extern",
      "info" : "SingleVariableDeclaration[12569-12588]:SingleVariableDeclaration[12875-12894]"
    }, {
      "left" : "JSSourceFile input",
      "right" : "JSSourceFile input",
      "info" : "SingleVariableDeclaration[12590-12608]:SingleVariableDeclaration[12896-12914]"
    }, {
      "left" : "CompilerOptions options",
      "right" : "CompilerOptions options",
      "info" : "SingleVariableDeclaration[12610-12633]:SingleVariableDeclaration[12916-12939]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12635-12708]:Block[12941-13014]"
    }, {
      "left" : "return compile(extern, new JSSourceFile[] { input }, options);",
      "right" : "return compile(extern, new JSSourceFile[] { input }, options);",
      "info" : "ReturnStatement[12642-12704]:ReturnStatement[12948-13010]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12712-12718]:Modifier[13018-13024]"
    }, {
      "left" : "Result",
      "right" : "Result",
      "info" : "SimpleType[12719-12725]:SimpleType[13025-13031]"
    }, {
      "left" : "compile",
      "right" : "compile",
      "info" : "SimpleName[12726-12733]:SimpleName[13032-13039]"
    }, {
      "left" : "JSSourceFile extern",
      "right" : "JSSourceFile extern",
      "info" : "SingleVariableDeclaration[12741-12760]:SingleVariableDeclaration[13047-13066]"
    }, {
      "left" : "JSSourceFile[] input",
      "right" : "JSSourceFile[] input",
      "info" : "SingleVariableDeclaration[12762-12782]:SingleVariableDeclaration[13068-13088]"
    }, {
      "left" : "CompilerOptions options",
      "right" : "CompilerOptions options",
      "info" : "SingleVariableDeclaration[12784-12807]:SingleVariableDeclaration[13090-13113]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12809-12882]:Block[13115-13188]"
    }, {
      "left" : "return compile(new JSSourceFile[] { extern }, input, options);",
      "right" : "return compile(new JSSourceFile[] { extern }, input, options);",
      "info" : "ReturnStatement[12816-12878]:ReturnStatement[13122-13184]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12886-12892]:Modifier[13192-13198]"
    }, {
      "left" : "Result",
      "right" : "Result",
      "info" : "SimpleType[12893-12899]:SimpleType[13199-13205]"
    }, {
      "left" : "compile",
      "right" : "compile",
      "info" : "SimpleName[12900-12907]:SimpleName[13206-13213]"
    }, {
      "left" : "JSSourceFile extern",
      "right" : "JSSourceFile extern",
      "info" : "SingleVariableDeclaration[12915-12934]:SingleVariableDeclaration[13221-13240]"
    }, {
      "left" : "JSModule[] modules",
      "right" : "JSModule[] modules",
      "info" : "SingleVariableDeclaration[12936-12954]:SingleVariableDeclaration[13242-13260]"
    }, {
      "left" : "CompilerOptions options",
      "right" : "CompilerOptions options",
      "info" : "SingleVariableDeclaration[12956-12979]:SingleVariableDeclaration[13262-13285]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12981-13056]:Block[13287-13362]"
    }, {
      "left" : "return compile(new JSSourceFile[] { extern }, modules, options);",
      "right" : "return compile(new JSSourceFile[] { extern }, modules, options);",
      "info" : "ReturnStatement[12988-13052]:ReturnStatement[13294-13358]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[13104-13110]:Modifier[13410-13416]"
    }, {
      "left" : "Result",
      "right" : "Result",
      "info" : "SimpleType[13111-13117]:SimpleType[13417-13423]"
    }, {
      "left" : "compile",
      "right" : "compile",
      "info" : "SimpleName[13118-13125]:SimpleName[13424-13431]"
    }, {
      "left" : "JSSourceFile[] externs",
      "right" : "JSSourceFile[] externs",
      "info" : "SingleVariableDeclaration[13126-13148]:SingleVariableDeclaration[13432-13454]"
    }, {
      "left" : "JSSourceFile[] inputs",
      "right" : "JSSourceFile[] inputs",
      "info" : "SingleVariableDeclaration[13174-13195]:SingleVariableDeclaration[13480-13501]"
    }, {
      "left" : "CompilerOptions options",
      "right" : "CompilerOptions options",
      "info" : "SingleVariableDeclaration[13221-13244]:SingleVariableDeclaration[13527-13550]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13246-13630]:Block[13552-13936]"
    }, {
      "left" : "Preconditions.checkState(jsRoot == null);",
      "right" : "Preconditions.checkState(jsRoot == null);",
      "info" : "ExpressionStatement[13307-13348]:ExpressionStatement[13613-13654]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[13354-13626]:TryStatement[13660-13932]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13358-13488]:Block[13664-13794]"
    }, {
      "left" : "init(externs, inputs, options);",
      "right" : "init(externs, inputs, options);",
      "info" : "ExpressionStatement[13366-13397]:ExpressionStatement[13672-13703]"
    }, {
      "left" : "if (hasErrors())",
      "right" : "if (hasErrors())",
      "info" : "IfStatement[13404-13458]:IfStatement[13710-13764]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13421-13458]:Block[13727-13764]"
    }, {
      "left" : "return getResult();",
      "right" : "return getResult();",
      "info" : "ReturnStatement[13431-13450]:ReturnStatement[13737-13756]"
    }, {
      "left" : "return compile();",
      "right" : "return compile();",
      "info" : "ReturnStatement[13465-13482]:ReturnStatement[13771-13788]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13497-13626]:Block[13803-13932]"
    }, {
      "left" : "Tracer t = newTracer(\"generateReport\");",
      "right" : "Tracer t = newTracer(\"generateReport\");",
      "info" : "VariableDeclarationStatement[13505-13544]:VariableDeclarationStatement[13811-13850]"
    }, {
      "left" : "errorManager.generateReport();",
      "right" : "errorManager.generateReport();",
      "info" : "ExpressionStatement[13551-13581]:ExpressionStatement[13857-13887]"
    }, {
      "left" : "stopTracer(t, \"generateReport\");",
      "right" : "stopTracer(t, \"generateReport\");",
      "info" : "ExpressionStatement[13588-13620]:ExpressionStatement[13894-13926]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[13679-13685]:Modifier[13985-13991]"
    }, {
      "left" : "Result",
      "right" : "Result",
      "info" : "SimpleType[13686-13692]:SimpleType[13992-13998]"
    }, {
      "left" : "compile",
      "right" : "compile",
      "info" : "SimpleName[13693-13700]:SimpleName[13999-14006]"
    }, {
      "left" : "JSSourceFile[] externs",
      "right" : "JSSourceFile[] externs",
      "info" : "SingleVariableDeclaration[13701-13723]:SingleVariableDeclaration[14007-14029]"
    }, {
      "left" : "JSModule[] modules",
      "right" : "JSModule[] modules",
      "info" : "SingleVariableDeclaration[13749-13767]:SingleVariableDeclaration[14055-14073]"
    }, {
      "left" : "CompilerOptions options",
      "right" : "CompilerOptions options",
      "info" : "SingleVariableDeclaration[13793-13816]:SingleVariableDeclaration[14099-14122]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13818-14202]:Block[14124-14508]"
    }, {
      "left" : "Preconditions.checkState(jsRoot == null);",
      "right" : "Preconditions.checkState(jsRoot == null);",
      "info" : "ExpressionStatement[13878-13919]:ExpressionStatement[14184-14225]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[13925-14198]:TryStatement[14231-14504]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13929-14060]:Block[14235-14366]"
    }, {
      "left" : "init(externs, modules, options);",
      "right" : "init(externs, modules, options);",
      "info" : "ExpressionStatement[13937-13969]:ExpressionStatement[14243-14275]"
    }, {
      "left" : "if (hasErrors())",
      "right" : "if (hasErrors())",
      "info" : "IfStatement[13976-14030]:IfStatement[14282-14336]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13993-14030]:Block[14299-14336]"
    }, {
      "left" : "return getResult();",
      "right" : "return getResult();",
      "info" : "ReturnStatement[14003-14022]:ReturnStatement[14309-14328]"
    }, {
      "left" : "return compile();",
      "right" : "return compile();",
      "info" : "ReturnStatement[14037-14054]:ReturnStatement[14343-14360]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14069-14198]:Block[14375-14504]"
    }, {
      "left" : "Tracer t = newTracer(\"generateReport\");",
      "right" : "Tracer t = newTracer(\"generateReport\");",
      "info" : "VariableDeclarationStatement[14077-14116]:VariableDeclarationStatement[14383-14422]"
    }, {
      "left" : "errorManager.generateReport();",
      "right" : "errorManager.generateReport();",
      "info" : "ExpressionStatement[14123-14153]:ExpressionStatement[14429-14459]"
    }, {
      "left" : "stopTracer(t, \"generateReport\");",
      "right" : "stopTracer(t, \"generateReport\");",
      "info" : "ExpressionStatement[14160-14192]:ExpressionStatement[14466-14498]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[14206-14213]:Modifier[14512-14519]"
    }, {
      "left" : "Result",
      "right" : "Result",
      "info" : "SimpleType[14214-14220]:SimpleType[14520-14526]"
    }, {
      "left" : "compile",
      "right" : "compile",
      "info" : "SimpleName[14221-14228]:SimpleName[14527-14534]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14231-14409]:Block[14537-14715]"
    }, {
      "left" : "return runInCompilerThread(new Callable<Result>() {\n      public Result call() throws Exception {\n        compileInternal();\n        return getResult();\n      }\n    });",
      "right" : "return runInCompilerThread(new Callable<Result>() {\n      public Result call() throws Exception {\n        compileInternal();\n        return getResult();\n      }\n    });",
      "info" : "ReturnStatement[14237-14405]:ReturnStatement[14543-14711]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[14295-14301]:Modifier[14601-14607]"
    }, {
      "left" : "Result",
      "right" : "Result",
      "info" : "SimpleType[14302-14308]:SimpleType[14608-14614]"
    }, {
      "left" : "call",
      "right" : "call",
      "info" : "SimpleName[14309-14313]:SimpleName[14615-14619]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[14323-14332]:SimpleType[14629-14638]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14333-14397]:Block[14639-14703]"
    }, {
      "left" : "compileInternal();",
      "right" : "compileInternal();",
      "info" : "ExpressionStatement[14343-14361]:ExpressionStatement[14649-14667]"
    }, {
      "left" : "return getResult();",
      "right" : "return getResult();",
      "info" : "ReturnStatement[14370-14389]:ReturnStatement[14676-14695]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[14518-14524]:Modifier[14824-14830]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[14525-14529]:PrimitiveType[14831-14835]"
    }, {
      "left" : "disableThreads",
      "right" : "disableThreads",
      "info" : "SimpleName[14530-14544]:SimpleName[14836-14850]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14547-14576]:Block[14853-14882]"
    }, {
      "left" : "useThreads = false;",
      "right" : "useThreads = false;",
      "info" : "ExpressionStatement[14553-14572]:ExpressionStatement[14859-14878]"
    }, {
      "left" : "@SuppressWarnings(\"unchecked\")",
      "right" : "@SuppressWarnings(\"unchecked\")",
      "info" : "SingleMemberAnnotation[14580-14610]:SingleMemberAnnotation[14886-14916]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[14613-14620]:Modifier[14919-14926]"
    }, {
      "left" : "T",
      "right" : "T",
      "info" : "TypeParameter[14622-14623]:TypeParameter[14928-14929]"
    }, {
      "left" : "T",
      "right" : "T",
      "info" : "SimpleType[14625-14626]:SimpleType[14931-14932]"
    }, {
      "left" : "runInCompilerThread",
      "right" : "runInCompilerThread",
      "info" : "SimpleName[14627-14646]:SimpleName[14933-14952]"
    }, {
      "left" : "final Callable<T> callable",
      "right" : "final Callable<T> callable",
      "info" : "SingleVariableDeclaration[14647-14673]:SingleVariableDeclaration[14953-14979]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14675-16124]:Block[14981-16430]"
    }, {
      "left" : "final boolean dumpTraceReport = options.tracer.isOn();",
      "right" : "final boolean dumpTraceReport = options.tracer.isOn();",
      "info" : "VariableDeclarationStatement[15063-15117]:VariableDeclarationStatement[15369-15423]"
    }, {
      "left" : "final Object[] result = new Object[1];",
      "right" : "final Object[] result = new Object[1];",
      "info" : "VariableDeclarationStatement[15122-15160]:VariableDeclarationStatement[15428-15466]"
    }, {
      "left" : "final Throwable[] exception = new Throwable[1];",
      "right" : "final Throwable[] exception = new Throwable[1];",
      "info" : "VariableDeclarationStatement[15165-15212]:VariableDeclarationStatement[15471-15518]"
    }, {
      "left" : "Runnable runnable = new Runnable() {\n      public void run() {\n        try {\n          if (dumpTraceReport) {\n            Tracer.initCurrentThreadTrace();\n          }\n          result[0] = callable.call();\n        } catch (Throwable e) {\n          exception[0] = e;\n        } finally {\n          if (dumpTraceReport) {\n            Tracer.logAndClearCurrentThreadTrace();\n          }\n        }\n      }\n    };",
      "right" : "Runnable runnable = new Runnable() {\n      public void run() {\n        try {\n          if (dumpTraceReport) {\n            Tracer.initCurrentThreadTrace();\n          }\n          result[0] = callable.call();\n        } catch (Throwable e) {\n          exception[0] = e;\n        } finally {\n          if (dumpTraceReport) {\n            Tracer.logAndClearCurrentThreadTrace();\n          }\n        }\n      }\n    };",
      "info" : "VariableDeclarationStatement[15217-15624]:VariableDeclarationStatement[15523-15930]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[15260-15266]:Modifier[15566-15572]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[15267-15271]:PrimitiveType[15573-15577]"
    }, {
      "left" : "run",
      "right" : "run",
      "info" : "SimpleName[15272-15275]:SimpleName[15578-15581]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15278-15617]:Block[15584-15923]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[15288-15609]:TryStatement[15594-15915]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15292-15432]:Block[15598-15738]"
    }, {
      "left" : "if (dumpTraceReport)",
      "right" : "if (dumpTraceReport)",
      "info" : "IfStatement[15304-15383]:IfStatement[15610-15689]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15325-15383]:Block[15631-15689]"
    }, {
      "left" : "Tracer.initCurrentThreadTrace();",
      "right" : "Tracer.initCurrentThreadTrace();",
      "info" : "ExpressionStatement[15339-15371]:ExpressionStatement[15645-15677]"
    }, {
      "left" : "result[0] = callable.call();",
      "right" : "result[0] = callable.call();",
      "info" : "ExpressionStatement[15394-15422]:ExpressionStatement[15700-15728]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15453-15492]:Block[15759-15798]"
    }, {
      "left" : "exception[0] = e;",
      "right" : "exception[0] = e;",
      "info" : "ExpressionStatement[15465-15482]:ExpressionStatement[15771-15788]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15501-15609]:Block[15807-15915]"
    }, {
      "left" : "if (dumpTraceReport)",
      "right" : "if (dumpTraceReport)",
      "info" : "IfStatement[15513-15599]:IfStatement[15819-15905]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15534-15599]:Block[15840-15905]"
    }, {
      "left" : "Tracer.logAndClearCurrentThreadTrace();",
      "right" : "Tracer.logAndClearCurrentThreadTrace();",
      "info" : "ExpressionStatement[15548-15587]:ExpressionStatement[15854-15893]"
    }, {
      "left" : "if (useThreads)",
      "right" : "if (useThreads)",
      "info" : "IfStatement[15630-15946]:IfStatement[15936-16252]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15646-15911]:Block[15952-16217]"
    }, {
      "left" : "Thread th = new Thread(null, runnable, \"jscompiler\", COMPILER_STACK_SIZE);",
      "right" : "Thread th = new Thread(null, runnable, \"jscompiler\", COMPILER_STACK_SIZE);",
      "info" : "VariableDeclarationStatement[15654-15728]:VariableDeclarationStatement[15960-16034]"
    }, {
      "left" : "th.start();",
      "right" : "th.start();",
      "info" : "ExpressionStatement[15735-15746]:ExpressionStatement[16041-16052]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[15753-15905]:WhileStatement[16059-16211]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15766-15905]:Block[16072-16211]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[15776-15897]:TryStatement[16082-16203]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15780-15829]:Block[16086-16135]"
    }, {
      "left" : "th.join();",
      "right" : "th.join();",
      "info" : "ExpressionStatement[15792-15802]:ExpressionStatement[16098-16108]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[15813-15819]:BreakStatement[16119-16125]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15866-15897]:Block[16172-16203]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15917-15946]:Block[16223-16252]"
    }, {
      "left" : "runnable.run();",
      "right" : "runnable.run();",
      "info" : "ExpressionStatement[15925-15940]:ExpressionStatement[16231-16246]"
    }, {
      "left" : "if (exception[0] != null)",
      "right" : "if (exception[0] != null)",
      "info" : "IfStatement[16012-16093]:IfStatement[16318-16399]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16038-16093]:Block[16344-16399]"
    }, {
      "left" : "throw new RuntimeException(exception[0]);",
      "right" : "throw new RuntimeException(exception[0]);",
      "info" : "ThrowStatement[16046-16087]:ThrowStatement[16352-16393]"
    }, {
      "left" : "return (T) result[0];",
      "right" : "return (T) result[0];",
      "info" : "ReturnStatement[16099-16120]:ReturnStatement[16405-16426]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[16128-16135]:Modifier[16434-16441]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[16136-16140]:PrimitiveType[16442-16446]"
    }, {
      "left" : "compileInternal",
      "right" : "compileInternal",
      "info" : "SimpleName[16141-16156]:SimpleName[16447-16462]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16159-16910]:Block[16465-17216]"
    }, {
      "left" : "parse();",
      "right" : "parse();",
      "info" : "ExpressionStatement[16165-16173]:ExpressionStatement[16471-16479]"
    }, {
      "left" : "if (hasErrors())",
      "right" : "if (hasErrors())",
      "info" : "IfStatement[16178-16216]:IfStatement[16484-16522]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16195-16216]:Block[16501-16522]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[16203-16210]:ReturnStatement[16509-16516]"
    }, {
      "left" : "if (!precheck())",
      "right" : "if (!precheck())",
      "info" : "IfStatement[16222-16260]:IfStatement[16528-16566]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16239-16260]:Block[16545-16566]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[16247-16254]:ReturnStatement[16553-16560]"
    }, {
      "left" : "if (options.nameAnonymousFunctionsOnly)",
      "right" : "if (options.nameAnonymousFunctionsOnly)",
      "info" : "IfStatement[16266-16413]:IfStatement[16572-16719]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16306-16413]:Block[16612-16719]"
    }, {
      "left" : "check();",
      "right" : "check();",
      "info" : "ExpressionStatement[16385-16393]:ExpressionStatement[16691-16699]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[16400-16407]:ReturnStatement[16706-16713]"
    }, {
      "left" : "if (!options.skipAllPasses)",
      "right" : "if (!options.skipAllPasses)",
      "info" : "IfStatement[16419-16736]:IfStatement[16725-17042]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16447-16736]:Block[16753-17042]"
    }, {
      "left" : "check();",
      "right" : "check();",
      "info" : "ExpressionStatement[16455-16463]:ExpressionStatement[16761-16769]"
    }, {
      "left" : "if (hasErrors())",
      "right" : "if (hasErrors())",
      "info" : "IfStatement[16470-16512]:IfStatement[16776-16818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16487-16512]:Block[16793-16818]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[16497-16504]:ReturnStatement[16803-16810]"
    }, {
      "left" : "if (options.externExportsPath != null)",
      "right" : "if (options.externExportsPath != null)",
      "info" : "IfStatement[16520-16593]:IfStatement[16826-16899]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16559-16593]:Block[16865-16899]"
    }, {
      "left" : "externExports();",
      "right" : "externExports();",
      "info" : "ExpressionStatement[16569-16585]:ExpressionStatement[16875-16891]"
    }, {
      "left" : "if (!options.ideMode)",
      "right" : "if (!options.ideMode)",
      "info" : "IfStatement[16679-16730]:IfStatement[16985-17036]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16701-16730]:Block[17007-17036]"
    }, {
      "left" : "optimize();",
      "right" : "optimize();",
      "info" : "ExpressionStatement[16711-16722]:ExpressionStatement[17017-17028]"
    }, {
      "left" : "if (options.recordFunctionInformation)",
      "right" : "if (options.recordFunctionInformation)",
      "info" : "IfStatement[16742-16823]:IfStatement[17048-17129]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16781-16823]:Block[17087-17129]"
    }, {
      "left" : "recordFunctionInformation();",
      "right" : "recordFunctionInformation();",
      "info" : "ExpressionStatement[16789-16817]:ExpressionStatement[17095-17123]"
    }, {
      "left" : "if (options.devMode == DevMode.START_AND_END)",
      "right" : "if (options.devMode == DevMode.START_AND_END)",
      "info" : "IfStatement[16829-16906]:IfStatement[17135-17212]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16875-16906]:Block[17181-17212]"
    }, {
      "left" : "runSanityCheck();",
      "right" : "runSanityCheck();",
      "info" : "ExpressionStatement[16883-16900]:ExpressionStatement[17189-17206]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[16914-16920]:Modifier[17220-17226]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[16921-16925]:PrimitiveType[17227-17231]"
    }, {
      "left" : "parse",
      "right" : "parse",
      "info" : "SimpleName[16926-16931]:SimpleName[17232-17237]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16934-16958]:Block[17240-17264]"
    }, {
      "left" : "parseInputs();",
      "right" : "parseInputs();",
      "info" : "ExpressionStatement[16940-16954]:ExpressionStatement[17246-17260]"
    }, {
      "left" : "PassConfig",
      "right" : "PassConfig",
      "info" : "SimpleType[16962-16972]:SimpleType[17268-17278]"
    }, {
      "left" : "getPassConfig",
      "right" : "getPassConfig",
      "info" : "SimpleName[16973-16986]:SimpleName[17279-17292]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16989-17088]:Block[17295-17394]"
    }, {
      "left" : "if (passes == null)",
      "right" : "if (passes == null)",
      "info" : "IfStatement[16995-17065]:IfStatement[17301-17371]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17015-17065]:Block[17321-17371]"
    }, {
      "left" : "passes = createPassConfigInternal();",
      "right" : "passes = createPassConfigInternal();",
      "info" : "ExpressionStatement[17023-17059]:ExpressionStatement[17329-17365]"
    }, {
      "left" : "return passes;",
      "right" : "return passes;",
      "info" : "ReturnStatement[17070-17084]:ReturnStatement[17376-17390]"
    }, {
      "left" : "PassConfig",
      "right" : "PassConfig",
      "info" : "SimpleType[17201-17211]:SimpleType[17507-17517]"
    }, {
      "left" : "createPassConfigInternal",
      "right" : "createPassConfigInternal",
      "info" : "SimpleName[17212-17236]:SimpleName[17518-17542]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17239-17287]:Block[17545-17593]"
    }, {
      "left" : "return new DefaultPassConfig(options);",
      "right" : "return new DefaultPassConfig(options);",
      "info" : "ReturnStatement[17245-17283]:ReturnStatement[17551-17589]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[17492-17498]:Modifier[17798-17804]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[17499-17503]:PrimitiveType[17805-17809]"
    }, {
      "left" : "setPassConfig",
      "right" : "setPassConfig",
      "info" : "SimpleName[17504-17517]:SimpleName[17810-17823]"
    }, {
      "left" : "PassConfig passes",
      "right" : "PassConfig passes",
      "info" : "SingleVariableDeclaration[17518-17535]:SingleVariableDeclaration[17824-17841]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17537-18035]:Block[17843-18341]"
    }, {
      "left" : "Preconditions.checkNotNull(passes);",
      "right" : "Preconditions.checkNotNull(passes);",
      "info" : "ExpressionStatement[17852-17887]:ExpressionStatement[18158-18193]"
    }, {
      "left" : "if (this.passes != null)",
      "right" : "if (this.passes != null)",
      "info" : "IfStatement[17893-18005]:IfStatement[18199-18311]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17918-18005]:Block[18224-18311]"
    }, {
      "left" : "throw new IllegalStateException(\"this.passes has already been assigned\");",
      "right" : "throw new IllegalStateException(\"this.passes has already been assigned\");",
      "info" : "ThrowStatement[17926-17999]:ThrowStatement[18232-18305]"
    }, {
      "left" : "this.passes = passes;",
      "right" : "this.passes = passes;",
      "info" : "ExpressionStatement[18010-18031]:ExpressionStatement[18316-18337]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[18234-18241]:PrimitiveType[18540-18547]"
    }, {
      "left" : "precheck",
      "right" : "precheck",
      "info" : "SimpleName[18242-18250]:SimpleName[18548-18556]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18253-18275]:Block[18559-18581]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[18259-18271]:ReturnStatement[18565-18577]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[18279-18285]:Modifier[18585-18591]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[18286-18290]:PrimitiveType[18592-18596]"
    }, {
      "left" : "check",
      "right" : "check",
      "info" : "SimpleName[18291-18296]:SimpleName[18597-18602]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18299-19587]:Block[18605-19893]"
    }, {
      "left" : "runCustomPasses(CustomPassExecutionTime.BEFORE_CHECKS);",
      "right" : "runCustomPasses(CustomPassExecutionTime.BEFORE_CHECKS);",
      "info" : "ExpressionStatement[18305-18360]:ExpressionStatement[18611-18666]"
    }, {
      "left" : "PhaseOptimizer phaseOptimizer = new PhaseOptimizer(this, tracker);",
      "right" : "PhaseOptimizer phaseOptimizer = new PhaseOptimizer(this, tracker);",
      "info" : "VariableDeclarationStatement[18366-18432]:VariableDeclarationStatement[18672-18738]"
    }, {
      "left" : "if (options.devMode == DevMode.EVERY_PASS)",
      "right" : "if (options.devMode == DevMode.EVERY_PASS)",
      "info" : "IfStatement[18437-18537]:IfStatement[18743-18843]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18480-18537]:Block[18786-18843]"
    }, {
      "left" : "phaseOptimizer.setSanityCheck(sanityCheck);",
      "right" : "phaseOptimizer.setSanityCheck(sanityCheck);",
      "info" : "ExpressionStatement[18488-18531]:ExpressionStatement[18794-18837]"
    }, {
      "left" : "phaseOptimizer.consume(getPassConfig().getChecks());",
      "right" : "phaseOptimizer.consume(getPassConfig().getChecks());",
      "info" : "ExpressionStatement[18542-18594]:ExpressionStatement[18848-18900]"
    }, {
      "left" : "phaseOptimizer.process(externsRoot, jsRoot);",
      "right" : "phaseOptimizer.process(externsRoot, jsRoot);",
      "info" : "ExpressionStatement[18599-18643]:ExpressionStatement[18905-18949]"
    }, {
      "left" : "if (hasErrors())",
      "right" : "if (hasErrors())",
      "info" : "IfStatement[18648-18686]:IfStatement[18954-18992]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18665-18686]:Block[18971-18992]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[18673-18680]:ReturnStatement[18979-18986]"
    }, {
      "left" : "if (options.nameAnonymousFunctionsOnly)",
      "right" : "if (options.nameAnonymousFunctionsOnly)",
      "info" : "IfStatement[18769-18830]:IfStatement[19075-19136]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18809-18830]:Block[19115-19136]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[18817-18824]:ReturnStatement[19123-19130]"
    }, {
      "left" : "if (options.removeTryCatchFinally)",
      "right" : "if (options.removeTryCatchFinally)",
      "info" : "IfStatement[18836-18909]:IfStatement[19142-19215]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18871-18909]:Block[19177-19215]"
    }, {
      "left" : "removeTryCatchFinally();",
      "right" : "removeTryCatchFinally();",
      "info" : "ExpressionStatement[18879-18903]:ExpressionStatement[19185-19209]"
    }, {
      "left" : "if (!options.stripTypes.isEmpty() ||\n        !options.stripNameSuffixes.isEmpty() ||\n        !options.stripTypePrefixes.isEmpty() ||\n        !options.stripNamePrefixes.isEmpty())",
      "right" : "if (!options.stripTypes.isEmpty() ||\n        !options.stripNameSuffixes.isEmpty() ||\n        !options.stripTypePrefixes.isEmpty() ||\n        !options.stripNamePrefixes.isEmpty())",
      "info" : "IfStatement[18915-19229]:IfStatement[19221-19535]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19094-19229]:Block[19400-19535]"
    }, {
      "left" : "stripCode(options.stripTypes, options.stripNameSuffixes,\n          options.stripTypePrefixes, options.stripNamePrefixes);",
      "right" : "stripCode(options.stripTypes, options.stripNameSuffixes,\n          options.stripTypePrefixes, options.stripNamePrefixes);",
      "info" : "ExpressionStatement[19102-19223]:ExpressionStatement[19408-19529]"
    }, {
      "left" : "runCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATIONS);",
      "right" : "runCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATIONS);",
      "info" : "ExpressionStatement[19235-19297]:ExpressionStatement[19541-19603]"
    }, {
      "left" : "normalize();",
      "right" : "normalize();",
      "info" : "ExpressionStatement[19571-19583]:ExpressionStatement[19877-19889]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[19591-19598]:Modifier[19897-19904]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[19599-19603]:PrimitiveType[19905-19909]"
    }, {
      "left" : "externExports",
      "right" : "externExports",
      "info" : "SimpleName[19604-19617]:SimpleName[19910-19923]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19620-19853]:Block[19926-20159]"
    }, {
      "left" : "logger.info(\"Creating extern file for exports\");",
      "right" : "logger.info(\"Creating extern file for exports\");",
      "info" : "ExpressionStatement[19626-19674]:ExpressionStatement[19932-19980]"
    }, {
      "left" : "startPass(\"externExports\");",
      "right" : "startPass(\"externExports\");",
      "info" : "ExpressionStatement[19679-19706]:ExpressionStatement[19985-20012]"
    }, {
      "left" : "ExternExportsPass pass = new ExternExportsPass(this);",
      "right" : "ExternExportsPass pass = new ExternExportsPass(this);",
      "info" : "VariableDeclarationStatement[19712-19765]:VariableDeclarationStatement[20018-20071]"
    }, {
      "left" : "process(pass);",
      "right" : "process(pass);",
      "info" : "ExpressionStatement[19770-19784]:ExpressionStatement[20076-20090]"
    }, {
      "left" : "externExports = pass.getGeneratedExterns();",
      "right" : "externExports = pass.getGeneratedExterns();",
      "info" : "ExpressionStatement[19790-19833]:ExpressionStatement[20096-20139]"
    }, {
      "left" : "endPass();",
      "right" : "endPass();",
      "info" : "ExpressionStatement[19839-19849]:ExpressionStatement[20145-20155]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[19857-19861]:PrimitiveType[20163-20167]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[19862-19869]:SimpleName[20168-20175]"
    }, {
      "left" : "CompilerPass p",
      "right" : "CompilerPass p",
      "info" : "SingleVariableDeclaration[19870-19884]:SingleVariableDeclaration[20176-20190]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19886-19927]:Block[20192-20233]"
    }, {
      "left" : "p.process(externsRoot, jsRoot);",
      "right" : "p.process(externsRoot, jsRoot);",
      "info" : "ExpressionStatement[19892-19923]:ExpressionStatement[20198-20229]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[20021-20030]:MarkerAnnotation[20327-20336]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[20035-20044]:Modifier[20341-20350]"
    }, {
      "left" : "CompilerPass",
      "right" : "CompilerPass",
      "info" : "SimpleType[20045-20057]:SimpleType[20351-20363]"
    }, {
      "left" : "createInternal",
      "right" : "createInternal",
      "info" : "SimpleName[20058-20072]:SimpleName[20364-20378]"
    }, {
      "left" : "AbstractCompiler compiler",
      "right" : "AbstractCompiler compiler",
      "info" : "SingleVariableDeclaration[20073-20098]:SingleVariableDeclaration[20379-20404]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20100-20147]:Block[20406-20453]"
    }, {
      "left" : "return new SanityCheck(compiler);",
      "right" : "return new SanityCheck(compiler);",
      "info" : "ReturnStatement[20108-20141]:ReturnStatement[20414-20447]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[20156-20163]:Modifier[20462-20469]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[20164-20168]:PrimitiveType[20470-20474]"
    }, {
      "left" : "maybeSanityCheck",
      "right" : "maybeSanityCheck",
      "info" : "SimpleName[20169-20185]:SimpleName[20475-20491]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20188-20272]:Block[20494-20578]"
    }, {
      "left" : "if (options.devMode == DevMode.EVERY_PASS)",
      "right" : "if (options.devMode == DevMode.EVERY_PASS)",
      "info" : "IfStatement[20194-20268]:IfStatement[20500-20574]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20237-20268]:Block[20543-20574]"
    }, {
      "left" : "runSanityCheck();",
      "right" : "runSanityCheck();",
      "info" : "ExpressionStatement[20245-20262]:ExpressionStatement[20551-20568]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[20276-20283]:Modifier[20582-20589]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[20284-20288]:PrimitiveType[20590-20594]"
    }, {
      "left" : "runSanityCheck",
      "right" : "runSanityCheck",
      "info" : "SimpleName[20289-20303]:SimpleName[20595-20609]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20306-20370]:Block[20612-20676]"
    }, {
      "left" : "sanityCheck.create(this).process(externsRoot, jsRoot);",
      "right" : "sanityCheck.create(this).process(externsRoot, jsRoot);",
      "info" : "ExpressionStatement[20312-20366]:ExpressionStatement[20618-20672]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[20450-20454]:PrimitiveType[20756-20760]"
    }, {
      "left" : "removeTryCatchFinally",
      "right" : "removeTryCatchFinally",
      "info" : "SimpleName[20455-20476]:SimpleName[20761-20782]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20479-20649]:Block[20785-20955]"
    }, {
      "left" : "logger.info(\"Remove try/catch/finally\");",
      "right" : "logger.info(\"Remove try/catch/finally\");",
      "info" : "ExpressionStatement[20485-20525]:ExpressionStatement[20791-20831]"
    }, {
      "left" : "startPass(\"removeTryCatchFinally\");",
      "right" : "startPass(\"removeTryCatchFinally\");",
      "info" : "ExpressionStatement[20530-20565]:ExpressionStatement[20836-20871]"
    }, {
      "left" : "RemoveTryCatch r = new RemoveTryCatch(this);",
      "right" : "RemoveTryCatch r = new RemoveTryCatch(this);",
      "info" : "VariableDeclarationStatement[20570-20614]:VariableDeclarationStatement[20876-20920]"
    }, {
      "left" : "process(r);",
      "right" : "process(r);",
      "info" : "ExpressionStatement[20619-20630]:ExpressionStatement[20925-20936]"
    }, {
      "left" : "endPass();",
      "right" : "endPass();",
      "info" : "ExpressionStatement[20635-20645]:ExpressionStatement[20941-20951]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[20793-20797]:PrimitiveType[21099-21103]"
    }, {
      "left" : "stripCode",
      "right" : "stripCode",
      "info" : "SimpleName[20798-20807]:SimpleName[21104-21113]"
    }, {
      "left" : "Set<String> stripTypes",
      "right" : "Set<String> stripTypes",
      "info" : "SingleVariableDeclaration[20808-20830]:SingleVariableDeclaration[21114-21136]"
    }, {
      "left" : "Set<String> stripNameSuffixes",
      "right" : "Set<String> stripNameSuffixes",
      "info" : "SingleVariableDeclaration[20832-20861]:SingleVariableDeclaration[21138-21167]"
    }, {
      "left" : "Set<String> stripTypePrefixes",
      "right" : "Set<String> stripTypePrefixes",
      "info" : "SingleVariableDeclaration[20869-20898]:SingleVariableDeclaration[21175-21204]"
    }, {
      "left" : "Set<String> stripNamePrefixes",
      "right" : "Set<String> stripNamePrefixes",
      "info" : "SingleVariableDeclaration[20900-20929]:SingleVariableDeclaration[21206-21235]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20931-21142]:Block[21237-21448]"
    }, {
      "left" : "logger.info(\"Strip code\");",
      "right" : "logger.info(\"Strip code\");",
      "info" : "ExpressionStatement[20937-20963]:ExpressionStatement[21243-21269]"
    }, {
      "left" : "startPass(\"stripCode\");",
      "right" : "startPass(\"stripCode\");",
      "info" : "ExpressionStatement[20968-20991]:ExpressionStatement[21274-21297]"
    }, {
      "left" : "StripCode r = new StripCode(this, stripTypes, stripNameSuffixes,\n        stripTypePrefixes, stripNamePrefixes);",
      "right" : "StripCode r = new StripCode(this, stripTypes, stripNameSuffixes,\n        stripTypePrefixes, stripNamePrefixes);",
      "info" : "VariableDeclarationStatement[20996-21107]:VariableDeclarationStatement[21302-21413]"
    }, {
      "left" : "process(r);",
      "right" : "process(r);",
      "info" : "ExpressionStatement[21112-21123]:ExpressionStatement[21418-21429]"
    }, {
      "left" : "endPass();",
      "right" : "endPass();",
      "info" : "ExpressionStatement[21128-21138]:ExpressionStatement[21434-21444]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[21231-21238]:Modifier[21537-21544]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[21239-21243]:PrimitiveType[21545-21549]"
    }, {
      "left" : "runCustomPasses",
      "right" : "runCustomPasses",
      "info" : "SimpleName[21244-21259]:SimpleName[21550-21565]"
    }, {
      "left" : "CustomPassExecutionTime executionTime",
      "right" : "CustomPassExecutionTime executionTime",
      "info" : "SingleVariableDeclaration[21260-21297]:SingleVariableDeclaration[21566-21603]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21299-21582]:Block[21605-21888]"
    }, {
      "left" : "if (options.customPasses != null)",
      "right" : "if (options.customPasses != null)",
      "info" : "IfStatement[21305-21578]:IfStatement[21611-21884]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21339-21578]:Block[21645-21884]"
    }, {
      "left" : "Tracer t = newTracer(\"runCustomPasses\");",
      "right" : "Tracer t = newTracer(\"runCustomPasses\");",
      "info" : "VariableDeclarationStatement[21347-21387]:VariableDeclarationStatement[21653-21693]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[21394-21572]:TryStatement[21700-21878]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21398-21512]:Block[21704-21818]"
    }, {
      "left" : "for (CompilerPass p : options.customPasses.get(executionTime))",
      "right" : "for (CompilerPass p : options.customPasses.get(executionTime))",
      "info" : "EnhancedForStatement[21408-21504]:EnhancedForStatement[21714-21810]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21471-21504]:Block[21777-21810]"
    }, {
      "left" : "process(p);",
      "right" : "process(p);",
      "info" : "ExpressionStatement[21483-21494]:ExpressionStatement[21789-21800]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21521-21572]:Block[21827-21878]"
    }, {
      "left" : "stopTracer(t, \"runCustomPasses\");",
      "right" : "stopTracer(t, \"runCustomPasses\");",
      "info" : "ExpressionStatement[21531-21564]:ExpressionStatement[21837-21870]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[21715-21719]:PrimitiveType[22021-22025]"
    }, {
      "left" : "startPass",
      "right" : "startPass",
      "info" : "SimpleName[21720-21729]:SimpleName[22026-22035]"
    }, {
      "left" : "String passName",
      "right" : "String passName",
      "info" : "SingleVariableDeclaration[21730-21745]:SingleVariableDeclaration[22036-22051]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21747-21878]:Block[22053-22184]"
    }, {
      "left" : "Preconditions.checkState(currentTracer == null);",
      "right" : "Preconditions.checkState(currentTracer == null);",
      "info" : "ExpressionStatement[21753-21801]:ExpressionStatement[22059-22107]"
    }, {
      "left" : "currentPassName = passName;",
      "right" : "currentPassName = passName;",
      "info" : "ExpressionStatement[21806-21833]:ExpressionStatement[22112-22139]"
    }, {
      "left" : "currentTracer = newTracer(passName);",
      "right" : "currentTracer = newTracer(passName);",
      "info" : "ExpressionStatement[21838-21874]:ExpressionStatement[22144-22180]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[21924-21928]:PrimitiveType[22230-22234]"
    }, {
      "left" : "endPass",
      "right" : "endPass",
      "info" : "SimpleName[21929-21936]:SimpleName[22235-22242]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21939-22225]:Block[22245-22531]"
    }, {
      "left" : "Preconditions.checkState(currentTracer != null,\n        \"Tracer should not be null at the end of a pass.\");",
      "right" : "Preconditions.checkState(currentTracer != null,\n        \"Tracer should not be null at the end of a pass.\");",
      "info" : "ExpressionStatement[21945-22052]:ExpressionStatement[22251-22358]"
    }, {
      "left" : "stopTracer(currentTracer, currentPassName);",
      "right" : "stopTracer(currentTracer, currentPassName);",
      "info" : "ExpressionStatement[22057-22100]:ExpressionStatement[22363-22406]"
    }, {
      "left" : "String passToCheck = currentPassName;",
      "right" : "String passToCheck = currentPassName;",
      "info" : "VariableDeclarationStatement[22105-22142]:VariableDeclarationStatement[22411-22448]"
    }, {
      "left" : "currentPassName = null;",
      "right" : "currentPassName = null;",
      "info" : "ExpressionStatement[22147-22170]:ExpressionStatement[22453-22476]"
    }, {
      "left" : "currentTracer = null;",
      "right" : "currentTracer = null;",
      "info" : "ExpressionStatement[22175-22196]:ExpressionStatement[22481-22502]"
    }, {
      "left" : "maybeSanityCheck();",
      "right" : "maybeSanityCheck();",
      "info" : "ExpressionStatement[22202-22221]:ExpressionStatement[22508-22527]"
    }, {
      "left" : "Tracer",
      "right" : "Tracer",
      "info" : "SimpleType[22292-22298]:SimpleType[22598-22604]"
    }, {
      "left" : "newTracer",
      "right" : "newTracer",
      "info" : "SimpleName[22299-22308]:SimpleName[22605-22614]"
    }, {
      "left" : "String passName",
      "right" : "String passName",
      "info" : "SingleVariableDeclaration[22309-22324]:SingleVariableDeclaration[22615-22630]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22326-22562]:Block[22632-22868]"
    }, {
      "left" : "String comment = passName\n        + (recentChange.hasCodeChanged() ? \" on recently changed AST\" : \"\");",
      "right" : "String comment = passName\n        + (recentChange.hasCodeChanged() ? \" on recently changed AST\" : \"\");",
      "info" : "VariableDeclarationStatement[22332-22434]:VariableDeclarationStatement[22638-22740]"
    }, {
      "left" : "if (options.tracer.isOn())",
      "right" : "if (options.tracer.isOn())",
      "info" : "IfStatement[22439-22514]:IfStatement[22745-22820]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22466-22514]:Block[22772-22820]"
    }, {
      "left" : "tracker.recordPassStart(passName);",
      "right" : "tracker.recordPassStart(passName);",
      "info" : "ExpressionStatement[22474-22508]:ExpressionStatement[22780-22814]"
    }, {
      "left" : "return new Tracer(\"Compiler\", comment);",
      "right" : "return new Tracer(\"Compiler\", comment);",
      "info" : "ReturnStatement[22519-22558]:ReturnStatement[22825-22864]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[22566-22570]:PrimitiveType[22872-22876]"
    }, {
      "left" : "stopTracer",
      "right" : "stopTracer",
      "info" : "SimpleName[22571-22581]:SimpleName[22877-22887]"
    }, {
      "left" : "Tracer t",
      "right" : "Tracer t",
      "info" : "SingleVariableDeclaration[22582-22590]:SingleVariableDeclaration[22888-22896]"
    }, {
      "left" : "String passName",
      "right" : "String passName",
      "info" : "SingleVariableDeclaration[22592-22607]:SingleVariableDeclaration[22898-22913]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22609-22729]:Block[22915-23035]"
    }, {
      "left" : "long result = t.stop();",
      "right" : "long result = t.stop();",
      "info" : "VariableDeclarationStatement[22615-22638]:VariableDeclarationStatement[22921-22944]"
    }, {
      "left" : "if (options.tracer.isOn())",
      "right" : "if (options.tracer.isOn())",
      "info" : "IfStatement[22643-22725]:IfStatement[22949-23031]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22670-22725]:Block[22976-23031]"
    }, {
      "left" : "tracker.recordPassStop(passName, result);",
      "right" : "tracker.recordPassStop(passName, result);",
      "info" : "ExpressionStatement[22678-22719]:ExpressionStatement[22984-23025]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[22789-22795]:Modifier[23095-23101]"
    }, {
      "left" : "Result",
      "right" : "Result",
      "info" : "SimpleType[22796-22802]:SimpleType[23102-23108]"
    }, {
      "left" : "getResult",
      "right" : "getResult",
      "info" : "SimpleName[22803-22812]:SimpleName[23109-23118]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22815-23121]:Block[23121-23427]"
    }, {
      "left" : "PassConfig.State state = getPassConfig().getIntermediateState();",
      "right" : "PassConfig.State state = getPassConfig().getIntermediateState();",
      "info" : "VariableDeclarationStatement[22821-22885]:VariableDeclarationStatement[23127-23191]"
    }, {
      "left" : "return new Result(getErrors(), getWarnings(), debugLog.toString(),\n        state.variableMap, state.propertyMap,\n        state.anonymousFunctionNameMap, functionInformationMap,\n        sourceMap, externExports, state.cssNames);",
      "right" : "return new Result(getErrors(), getWarnings(), debugLog.toString(),\n        state.variableMap, state.propertyMap,\n        state.anonymousFunctionNameMap, functionInformationMap,\n        sourceMap, externExports, state.cssNames);",
      "info" : "ReturnStatement[22890-23117]:ReturnStatement[23196-23423]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[23205-23211]:Modifier[23511-23517]"
    }, {
      "left" : "JSError[]",
      "right" : "JSError[]",
      "info" : "ArrayType[23212-23221]:ArrayType[23518-23527]"
    }, {
      "left" : "getMessages",
      "right" : "getMessages",
      "info" : "SimpleName[23222-23233]:SimpleName[23528-23539]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23236-23265]:Block[23542-23571]"
    }, {
      "left" : "return getErrors();",
      "right" : "return getErrors();",
      "info" : "ReturnStatement[23242-23261]:ReturnStatement[23548-23567]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[23328-23334]:Modifier[23634-23640]"
    }, {
      "left" : "JSError[]",
      "right" : "JSError[]",
      "info" : "ArrayType[23335-23344]:ArrayType[23641-23650]"
    }, {
      "left" : "getErrors",
      "right" : "getErrors",
      "info" : "SimpleName[23345-23354]:SimpleName[23651-23660]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23357-23399]:Block[23663-23705]"
    }, {
      "left" : "return errorManager.getErrors();",
      "right" : "return errorManager.getErrors();",
      "info" : "ReturnStatement[23363-23395]:ReturnStatement[23669-23701]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[23464-23470]:Modifier[23770-23776]"
    }, {
      "left" : "JSError[]",
      "right" : "JSError[]",
      "info" : "ArrayType[23471-23480]:ArrayType[23777-23786]"
    }, {
      "left" : "getWarnings",
      "right" : "getWarnings",
      "info" : "SimpleName[23481-23492]:SimpleName[23787-23798]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23495-23539]:Block[23801-23845]"
    }, {
      "left" : "return errorManager.getWarnings();",
      "right" : "return errorManager.getWarnings();",
      "info" : "ReturnStatement[23501-23535]:ReturnStatement[23807-23841]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[23634-23640]:Modifier[23940-23946]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[23641-23645]:SimpleType[23947-23951]"
    }, {
      "left" : "getRoot",
      "right" : "getRoot",
      "info" : "SimpleName[23646-23653]:SimpleName[23952-23959]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23656-23689]:Block[23962-23995]"
    }, {
      "left" : "return externAndJsRoot;",
      "right" : "return externAndJsRoot;",
      "info" : "ReturnStatement[23662-23685]:ReturnStatement[23968-23991]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[23752-23759]:Modifier[24058-24065]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[23760-23763]:PrimitiveType[24066-24069]"
    }, {
      "left" : "nextUniqueNameId",
      "right" : "nextUniqueNameId",
      "info" : "SimpleName[23764-23780]:SimpleName[24070-24086]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23783-23815]:Block[24089-24121]"
    }, {
      "left" : "return uniqueNameId++;",
      "right" : "return uniqueNameId++;",
      "info" : "ReturnStatement[23789-23811]:ReturnStatement[24095-24117]"
    }, {
      "left" : "@VisibleForTesting",
      "right" : "@VisibleForTesting",
      "info" : "MarkerAnnotation[23870-23888]:MarkerAnnotation[24176-24194]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[23891-23895]:PrimitiveType[24197-24201]"
    }, {
      "left" : "resetUniqueNameId",
      "right" : "resetUniqueNameId",
      "info" : "SimpleName[23896-23913]:SimpleName[24202-24219]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23916-23943]:Block[24222-24249]"
    }, {
      "left" : "uniqueNameId = 0;",
      "right" : "uniqueNameId = 0;",
      "info" : "ExpressionStatement[23922-23939]:ExpressionStatement[24228-24245]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[23947-23956]:MarkerAnnotation[24253-24262]"
    }, {
      "left" : "Supplier<String>",
      "right" : "Supplier<String>",
      "info" : "ParameterizedType[23959-23975]:ParameterizedType[24265-24281]"
    }, {
      "left" : "getUniqueNameIdSupplier",
      "right" : "getUniqueNameIdSupplier",
      "info" : "SimpleName[23976-23999]:SimpleName[24282-24305]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24002-24174]:Block[24308-24480]"
    }, {
      "left" : "final Compiler self = this;",
      "right" : "final Compiler self = this;",
      "info" : "VariableDeclarationStatement[24008-24035]:VariableDeclarationStatement[24314-24341]"
    }, {
      "left" : "return new Supplier<String>() {\n      public String get() {\n        return String.valueOf(self.nextUniqueNameId());\n      }\n    };",
      "right" : "return new Supplier<String>() {\n      public String get() {\n        return String.valueOf(self.nextUniqueNameId());\n      }\n    };",
      "info" : "ReturnStatement[24040-24170]:ReturnStatement[24346-24476]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[24078-24084]:Modifier[24384-24390]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[24085-24091]:SimpleType[24391-24397]"
    }, {
      "left" : "get",
      "right" : "get",
      "info" : "SimpleName[24092-24095]:SimpleName[24398-24401]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24098-24163]:Block[24404-24469]"
    }, {
      "left" : "return String.valueOf(self.nextUniqueNameId());",
      "right" : "return String.valueOf(self.nextUniqueNameId());",
      "info" : "ReturnStatement[24108-24155]:ReturnStatement[24414-24461]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[24317-24326]:MarkerAnnotation[24623-24632]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[24329-24333]:PrimitiveType[24635-24639]"
    }, {
      "left" : "setNormalized",
      "right" : "setNormalized",
      "info" : "SimpleName[24334-24347]:SimpleName[24640-24653]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24350-24378]:Block[24656-24684]"
    }, {
      "left" : "normalized = true;",
      "right" : "normalized = true;",
      "info" : "ExpressionStatement[24356-24374]:ExpressionStatement[24662-24680]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[24523-24532]:MarkerAnnotation[24829-24838]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[24535-24539]:PrimitiveType[24841-24845]"
    }, {
      "left" : "setUnnormalized",
      "right" : "setUnnormalized",
      "info" : "SimpleName[24540-24555]:SimpleName[24846-24861]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24558-24587]:Block[24864-24893]"
    }, {
      "left" : "normalized = false;",
      "right" : "normalized = false;",
      "info" : "ExpressionStatement[24564-24583]:ExpressionStatement[24870-24889]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[24591-24600]:MarkerAnnotation[24897-24906]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[24603-24610]:PrimitiveType[24909-24916]"
    }, {
      "left" : "isNormalized",
      "right" : "isNormalized",
      "info" : "SimpleName[24611-24623]:SimpleName[24917-24929]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24626-24654]:Block[24932-24960]"
    }, {
      "left" : "return normalized;",
      "right" : "return normalized;",
      "info" : "ReturnStatement[24632-24650]:ReturnStatement[24938-24956]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[24658-24667]:MarkerAnnotation[24964-24973]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[24670-24677]:PrimitiveType[24976-24983]"
    }, {
      "left" : "areNodesEqualForInlining",
      "right" : "areNodesEqualForInlining",
      "info" : "SimpleName[24678-24702]:SimpleName[24984-25008]"
    }, {
      "left" : "Node n1",
      "right" : "Node n1",
      "info" : "SingleVariableDeclaration[24703-24710]:SingleVariableDeclaration[25009-25016]"
    }, {
      "left" : "Node n2",
      "right" : "Node n2",
      "info" : "SingleVariableDeclaration[24712-24719]:SingleVariableDeclaration[25018-25025]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24721-25039]:Block[25027-25345]"
    }, {
      "left" : "if (options.ambiguateProperties ||\n        options.disambiguateProperties)",
      "right" : "if (options.ambiguateProperties ||\n        options.disambiguateProperties)",
      "info" : "IfStatement[24727-25035]:IfStatement[25033-25341]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24802-24979]:Block[25108-25285]"
    }, {
      "left" : "return n1.checkTreeTypeAwareEqualsSilent(n2);",
      "right" : "return n1.checkTreeTypeAwareEqualsSilent(n2);",
      "info" : "ReturnStatement[24928-24973]:ReturnStatement[25234-25279]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24985-25035]:Block[25291-25341]"
    }, {
      "left" : "return n1.checkTreeEqualsSilent(n2);",
      "right" : "return n1.checkTreeEqualsSilent(n2);",
      "info" : "ReturnStatement[24993-25029]:ReturnStatement[25299-25335]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[25350-25359]:MarkerAnnotation[25656-25665]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[25362-25368]:Modifier[25668-25674]"
    }, {
      "left" : "CompilerInput",
      "right" : "CompilerInput",
      "info" : "SimpleType[25369-25382]:SimpleType[25675-25688]"
    }, {
      "left" : "getInput",
      "right" : "getInput",
      "info" : "SimpleName[25383-25391]:SimpleName[25689-25697]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[25392-25403]:SingleVariableDeclaration[25698-25709]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25405-25445]:Block[25711-25751]"
    }, {
      "left" : "return inputsByName.get(name);",
      "right" : "return inputsByName.get(name);",
      "info" : "ReturnStatement[25411-25441]:ReturnStatement[25717-25747]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[25449-25458]:MarkerAnnotation[25755-25764]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[25461-25467]:Modifier[25767-25773]"
    }, {
      "left" : "CompilerInput",
      "right" : "CompilerInput",
      "info" : "SimpleType[25468-25481]:SimpleType[25774-25787]"
    }, {
      "left" : "newExternInput",
      "right" : "newExternInput",
      "info" : "SimpleName[25482-25496]:SimpleName[25788-25802]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[25497-25508]:SingleVariableDeclaration[25803-25814]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25510-25856]:Block[25816-26162]"
    }, {
      "left" : "if (inputsByName.containsKey(name))",
      "right" : "if (inputsByName.containsKey(name))",
      "info" : "IfStatement[25516-25638]:IfStatement[25822-25944]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25552-25638]:Block[25858-25944]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Conflicting externs name: \" + name);",
      "right" : "throw new IllegalArgumentException(\"Conflicting externs name: \" + name);",
      "info" : "ThrowStatement[25560-25632]:ThrowStatement[25866-25938]"
    }, {
      "left" : "SourceAst ast = new SyntheticAst(name);",
      "right" : "SourceAst ast = new SyntheticAst(name);",
      "info" : "VariableDeclarationStatement[25643-25682]:VariableDeclarationStatement[25949-25988]"
    }, {
      "left" : "CompilerInput input = new CompilerInput(ast, name, true);",
      "right" : "CompilerInput input = new CompilerInput(ast, name, true);",
      "info" : "VariableDeclarationStatement[25687-25744]:VariableDeclarationStatement[25993-26050]"
    }, {
      "left" : "inputsByName.put(name, input);",
      "right" : "inputsByName.put(name, input);",
      "info" : "ExpressionStatement[25749-25779]:ExpressionStatement[26055-26085]"
    }, {
      "left" : "externsRoot.addChildToFront(ast.getAstRoot(this));",
      "right" : "externsRoot.addChildToFront(ast.getAstRoot(this));",
      "info" : "ExpressionStatement[25784-25834]:ExpressionStatement[26090-26140]"
    }, {
      "left" : "return input;",
      "right" : "return input;",
      "info" : "ReturnStatement[25839-25852]:ReturnStatement[26145-26158]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[25939-25943]:PrimitiveType[26245-26249]"
    }, {
      "left" : "addIncrementalSourceAst",
      "right" : "addIncrementalSourceAst",
      "info" : "SimpleName[25944-25967]:SimpleName[26250-26273]"
    }, {
      "left" : "JsAst ast",
      "right" : "JsAst ast",
      "info" : "SingleVariableDeclaration[25968-25977]:SingleVariableDeclaration[26274-26283]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25979-26215]:Block[26285-26521]"
    }, {
      "left" : "String sourceName = ast.getSourceFile().getName();",
      "right" : "String sourceName = ast.getSourceFile().getName();",
      "info" : "VariableDeclarationStatement[25985-26035]:VariableDeclarationStatement[26291-26341]"
    }, {
      "left" : "Preconditions.checkState(\n        getInput(sourceName) == null,\n        \"Duplicate input of name \" + sourceName);",
      "right" : "Preconditions.checkState(\n        getInput(sourceName) == null,\n        \"Duplicate input of name \" + sourceName);",
      "info" : "ExpressionStatement[26040-26153]:ExpressionStatement[26346-26459]"
    }, {
      "left" : "inputsByName.put(sourceName, new CompilerInput(ast));",
      "right" : "inputsByName.put(sourceName, new CompilerInput(ast));",
      "info" : "ExpressionStatement[26158-26211]:ExpressionStatement[26464-26517]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[26219-26228]:MarkerAnnotation[26525-26534]"
    }, {
      "left" : "JSModuleGraph",
      "right" : "JSModuleGraph",
      "info" : "SimpleType[26231-26244]:SimpleType[26537-26550]"
    }, {
      "left" : "getModuleGraph",
      "right" : "getModuleGraph",
      "info" : "SimpleName[26245-26259]:SimpleName[26551-26565]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26262-26291]:Block[26568-26597]"
    }, {
      "left" : "return moduleGraph;",
      "right" : "return moduleGraph;",
      "info" : "ReturnStatement[26268-26287]:ReturnStatement[26574-26593]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[26295-26304]:MarkerAnnotation[26601-26610]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[26307-26313]:Modifier[26613-26619]"
    }, {
      "left" : "JSTypeRegistry",
      "right" : "JSTypeRegistry",
      "info" : "SimpleType[26314-26328]:SimpleType[26620-26634]"
    }, {
      "left" : "getTypeRegistry",
      "right" : "getTypeRegistry",
      "info" : "SimpleName[26329-26344]:SimpleName[26635-26650]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26347-26474]:Block[26653-26780]"
    }, {
      "left" : "if (typeRegistry == null)",
      "right" : "if (typeRegistry == null)",
      "info" : "IfStatement[26353-26445]:IfStatement[26659-26751]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26379-26445]:Block[26685-26751]"
    }, {
      "left" : "typeRegistry = new JSTypeRegistry(oldErrorReporter);",
      "right" : "typeRegistry = new JSTypeRegistry(oldErrorReporter);",
      "info" : "ExpressionStatement[26387-26439]:ExpressionStatement[26693-26745]"
    }, {
      "left" : "return typeRegistry;",
      "right" : "return typeRegistry;",
      "info" : "ReturnStatement[26450-26470]:ReturnStatement[26756-26776]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[26478-26487]:MarkerAnnotation[26784-26793]"
    }, {
      "left" : "ScopeCreator",
      "right" : "ScopeCreator",
      "info" : "SimpleType[26490-26502]:SimpleType[26796-26808]"
    }, {
      "left" : "getScopeCreator",
      "right" : "getScopeCreator",
      "info" : "SimpleName[26503-26518]:SimpleName[26809-26824]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26521-26572]:Block[26827-26878]"
    }, {
      "left" : "return getPassConfig().getScopeCreator();",
      "right" : "return getPassConfig().getScopeCreator();",
      "info" : "ReturnStatement[26527-26568]:ReturnStatement[26833-26874]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[26576-26585]:MarkerAnnotation[26882-26891]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[26588-26594]:Modifier[26894-26900]"
    }, {
      "left" : "Scope",
      "right" : "Scope",
      "info" : "SimpleType[26595-26600]:SimpleType[26901-26906]"
    }, {
      "left" : "getTopScope",
      "right" : "getTopScope",
      "info" : "SimpleName[26601-26612]:SimpleName[26907-26918]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26615-26662]:Block[26921-26968]"
    }, {
      "left" : "return getPassConfig().getTopScope();",
      "right" : "return getPassConfig().getTopScope();",
      "info" : "ReturnStatement[26621-26658]:ReturnStatement[26927-26964]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[26666-26675]:MarkerAnnotation[26972-26981]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[26678-26684]:Modifier[26984-26990]"
    }, {
      "left" : "ReverseAbstractInterpreter",
      "right" : "ReverseAbstractInterpreter",
      "info" : "SimpleType[26685-26711]:SimpleType[26991-27017]"
    }, {
      "left" : "getReverseAbstractInterpreter",
      "right" : "getReverseAbstractInterpreter",
      "info" : "SimpleName[26712-26741]:SimpleName[27018-27047]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26744-27231]:Block[27050-27537]"
    }, {
      "left" : "if (abstractInterpreter == null)",
      "right" : "if (abstractInterpreter == null)",
      "info" : "IfStatement[26750-27195]:IfStatement[27056-27501]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26783-27195]:Block[27089-27501]"
    }, {
      "left" : "ChainableReverseAbstractInterpreter interpreter =\n          new SemanticReverseAbstractInterpreter(\n              getCodingConvention(), getTypeRegistry());",
      "right" : "ChainableReverseAbstractInterpreter interpreter =\n          new SemanticReverseAbstractInterpreter(\n              getCodingConvention(), getTypeRegistry());",
      "info" : "VariableDeclarationStatement[26791-26947]:VariableDeclarationStatement[27097-27253]"
    }, {
      "left" : "if (options.closurePass)",
      "right" : "if (options.closurePass)",
      "info" : "IfStatement[26954-27148]:IfStatement[27260-27454]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26979-27148]:Block[27285-27454]"
    }, {
      "left" : "interpreter = new ClosureReverseAbstractInterpreter(\n            getCodingConvention(), getTypeRegistry())\n            .append(interpreter).getFirst();",
      "right" : "interpreter = new ClosureReverseAbstractInterpreter(\n            getCodingConvention(), getTypeRegistry())\n            .append(interpreter).getFirst();",
      "info" : "ExpressionStatement[26989-27140]:ExpressionStatement[27295-27446]"
    }, {
      "left" : "abstractInterpreter = interpreter;",
      "right" : "abstractInterpreter = interpreter;",
      "info" : "ExpressionStatement[27155-27189]:ExpressionStatement[27461-27495]"
    }, {
      "left" : "return abstractInterpreter;",
      "right" : "return abstractInterpreter;",
      "info" : "ReturnStatement[27200-27227]:ReturnStatement[27506-27533]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[27235-27244]:MarkerAnnotation[27541-27550]"
    }, {
      "left" : "TypeValidator",
      "right" : "TypeValidator",
      "info" : "SimpleType[27247-27260]:SimpleType[27553-27566]"
    }, {
      "left" : "getTypeValidator",
      "right" : "getTypeValidator",
      "info" : "SimpleName[27261-27277]:SimpleName[27567-27583]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27280-27311]:Block[27586-27617]"
    }, {
      "left" : "return typeValidator;",
      "right" : "return typeValidator;",
      "info" : "ReturnStatement[27286-27307]:ReturnStatement[27592-27613]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[27643-27647]:SimpleType[27949-27953]"
    }, {
      "left" : "parseInputs",
      "right" : "parseInputs",
      "info" : "SimpleName[27648-27659]:SimpleName[27954-27965]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27662-29698]:Block[27968-30004]"
    }, {
      "left" : "boolean devMode = options.devMode != DevMode.OFF;",
      "right" : "boolean devMode = options.devMode != DevMode.OFF;",
      "info" : "VariableDeclarationStatement[27668-27717]:VariableDeclarationStatement[27974-28023]"
    }, {
      "left" : "if (externsRoot != null)",
      "right" : "if (externsRoot != null)",
      "info" : "IfStatement[27836-27904]:IfStatement[28142-28210]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27861-27904]:Block[28167-28210]"
    }, {
      "left" : "externsRoot.detachChildren();",
      "right" : "externsRoot.detachChildren();",
      "info" : "ExpressionStatement[27869-27898]:ExpressionStatement[28175-28204]"
    }, {
      "left" : "if (jsRoot != null)",
      "right" : "if (jsRoot != null)",
      "info" : "IfStatement[27909-27967]:IfStatement[28215-28273]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27929-27967]:Block[28235-28273]"
    }, {
      "left" : "jsRoot.detachChildren();",
      "right" : "jsRoot.detachChildren();",
      "info" : "ExpressionStatement[27937-27961]:ExpressionStatement[28243-28267]"
    }, {
      "left" : "jsRoot = new Node(Token.BLOCK);",
      "right" : "jsRoot = new Node(Token.BLOCK);",
      "info" : "ExpressionStatement[28003-28034]:ExpressionStatement[28309-28340]"
    }, {
      "left" : "jsRoot.setIsSyntheticBlock(true);",
      "right" : "jsRoot.setIsSyntheticBlock(true);",
      "info" : "ExpressionStatement[28039-28072]:ExpressionStatement[28345-28378]"
    }, {
      "left" : "if (options.tracer.isOn())",
      "right" : "if (options.tracer.isOn())",
      "info" : "IfStatement[28078-28260]:IfStatement[28384-28566]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28105-28260]:Block[28411-28566]"
    }, {
      "left" : "tracker = new PerformanceTracker(jsRoot,\n          options.tracer == TracerMode.ALL);",
      "right" : "tracker = new PerformanceTracker(jsRoot,\n          options.tracer == TracerMode.ALL);",
      "info" : "ExpressionStatement[28113-28198]:ExpressionStatement[28419-28504]"
    }, {
      "left" : "addChangeHandler(tracker.getCodeChangeHandler());",
      "right" : "addChangeHandler(tracker.getCodeChangeHandler());",
      "info" : "ExpressionStatement[28205-28254]:ExpressionStatement[28511-28560]"
    }, {
      "left" : "Tracer tracer = newTracer(\"parseInputs\");",
      "right" : "Tracer tracer = newTracer(\"parseInputs\");",
      "info" : "VariableDeclarationStatement[28266-28307]:VariableDeclarationStatement[28572-28613]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[28313-29694]:TryStatement[28619-30000]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28317-29637]:Block[28623-29943]"
    }, {
      "left" : "externsRoot = new Node(Token.BLOCK);",
      "right" : "externsRoot = new Node(Token.BLOCK);",
      "info" : "ExpressionStatement[28357-28393]:ExpressionStatement[28663-28699]"
    }, {
      "left" : "externsRoot.setIsSyntheticBlock(true);",
      "right" : "externsRoot.setIsSyntheticBlock(true);",
      "info" : "ExpressionStatement[28400-28438]:ExpressionStatement[28706-28744]"
    }, {
      "left" : "for (CompilerInput input : externs)",
      "right" : "for (CompilerInput input : externs)",
      "info" : "EnhancedForStatement[28445-28630]:EnhancedForStatement[28751-28936]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28481-28630]:Block[28787-28936]"
    }, {
      "left" : "Node n = input.getAstRoot(this);",
      "right" : "Node n = input.getAstRoot(this);",
      "info" : "VariableDeclarationStatement[28491-28523]:VariableDeclarationStatement[28797-28829]"
    }, {
      "left" : "if (hasErrors())",
      "right" : "if (hasErrors())",
      "info" : "IfStatement[28532-28583]:IfStatement[28838-28889]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28549-28583]:Block[28855-28889]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[28561-28573]:ReturnStatement[28867-28879]"
    }, {
      "left" : "externsRoot.addChildToBack(n);",
      "right" : "externsRoot.addChildToBack(n);",
      "info" : "ExpressionStatement[28592-28622]:ExpressionStatement[28898-28928]"
    }, {
      "left" : "for (CompilerInput input : inputs)",
      "right" : "for (CompilerInput input : inputs)",
      "info" : "EnhancedForStatement[28638-29482]:EnhancedForStatement[28944-29788]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28673-29482]:Block[28979-29788]"
    }, {
      "left" : "Node n = input.getAstRoot(this);",
      "right" : "Node n = input.getAstRoot(this);",
      "info" : "VariableDeclarationStatement[28683-28715]:VariableDeclarationStatement[28989-29021]"
    }, {
      "left" : "if (hasErrors())",
      "right" : "if (hasErrors())",
      "info" : "IfStatement[28724-28775]:IfStatement[29030-29081]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28741-28775]:Block[29047-29081]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[28753-28765]:ReturnStatement[29059-29071]"
    }, {
      "left" : "if (n == null)",
      "right" : "if (n == null)",
      "info" : "IfStatement[28845-28891]:IfStatement[29151-29197]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28860-28891]:Block[29166-29197]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[28872-28881]:ContinueStatement[29178-29187]"
    }, {
      "left" : "if (devMode)",
      "right" : "if (devMode)",
      "info" : "IfStatement[28901-29019]:IfStatement[29207-29325]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28914-29019]:Block[29220-29325]"
    }, {
      "left" : "runSanityCheck();",
      "right" : "runSanityCheck();",
      "info" : "ExpressionStatement[28926-28943]:ExpressionStatement[29232-29249]"
    }, {
      "left" : "if (hasErrors())",
      "right" : "if (hasErrors())",
      "info" : "IfStatement[28954-29009]:IfStatement[29260-29315]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28971-29009]:Block[29277-29315]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[28985-28997]:ReturnStatement[29291-29303]"
    }, {
      "left" : "if (options.sourceMapOutputPath != null ||\n            options.nameReferenceReportPath != null)",
      "right" : "if (options.sourceMapOutputPath != null ||\n            options.nameReferenceReportPath != null)",
      "info" : "IfStatement[29029-29439]:IfStatement[29335-29745]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29125-29439]:Block[29431-29745]"
    }, {
      "left" : "SourceInformationAnnotator sia =\n              new SourceInformationAnnotator(input.getName());",
      "right" : "SourceInformationAnnotator sia =\n              new SourceInformationAnnotator(input.getName());",
      "info" : "VariableDeclarationStatement[29286-29381]:VariableDeclarationStatement[29592-29687]"
    }, {
      "left" : "NodeTraversal.traverse(this, n, sia);",
      "right" : "NodeTraversal.traverse(this, n, sia);",
      "info" : "ExpressionStatement[29392-29429]:ExpressionStatement[29698-29735]"
    }, {
      "left" : "jsRoot.addChildToBack(n);",
      "right" : "jsRoot.addChildToBack(n);",
      "info" : "ExpressionStatement[29449-29474]:ExpressionStatement[29755-29780]"
    }, {
      "left" : "externAndJsRoot = new Node(Token.BLOCK, externsRoot, jsRoot);",
      "right" : "externAndJsRoot = new Node(Token.BLOCK, externsRoot, jsRoot);",
      "info" : "ExpressionStatement[29490-29551]:ExpressionStatement[29796-29857]"
    }, {
      "left" : "externAndJsRoot.setIsSyntheticBlock(true);",
      "right" : "externAndJsRoot.setIsSyntheticBlock(true);",
      "info" : "ExpressionStatement[29558-29600]:ExpressionStatement[29864-29906]"
    }, {
      "left" : "return externAndJsRoot;",
      "right" : "return externAndJsRoot;",
      "info" : "ReturnStatement[29608-29631]:ReturnStatement[29914-29937]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29646-29694]:Block[29952-30000]"
    }, {
      "left" : "stopTracer(tracer, \"parseInputs\");",
      "right" : "stopTracer(tracer, \"parseInputs\");",
      "info" : "ExpressionStatement[29654-29688]:ExpressionStatement[29960-29994]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[29702-29708]:Modifier[30008-30014]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[29709-29713]:SimpleType[30015-30019]"
    }, {
      "left" : "parse",
      "right" : "parse",
      "info" : "SimpleName[29714-29719]:SimpleName[30020-30025]"
    }, {
      "left" : "JSSourceFile file",
      "right" : "JSSourceFile file",
      "info" : "SingleVariableDeclaration[29720-29737]:SingleVariableDeclaration[30026-30043]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29739-29874]:Block[30045-30180]"
    }, {
      "left" : "initCompilerOptionsIfTesting();",
      "right" : "initCompilerOptionsIfTesting();",
      "info" : "ExpressionStatement[29745-29776]:ExpressionStatement[30051-30082]"
    }, {
      "left" : "addToDebugLog(\"Parsing: \" + file.getName());",
      "right" : "addToDebugLog(\"Parsing: \" + file.getName());",
      "info" : "ExpressionStatement[29781-29825]:ExpressionStatement[30087-30131]"
    }, {
      "left" : "return new JsAst(file).getAstRoot(this);",
      "right" : "return new JsAst(file).getAstRoot(this);",
      "info" : "ReturnStatement[29830-29870]:ReturnStatement[30136-30176]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[29878-29887]:MarkerAnnotation[30184-30193]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[29890-29894]:SimpleType[30196-30200]"
    }, {
      "left" : "parseSyntheticCode",
      "right" : "parseSyntheticCode",
      "info" : "SimpleName[29895-29913]:SimpleName[30201-30219]"
    }, {
      "left" : "String js",
      "right" : "String js",
      "info" : "SingleVariableDeclaration[29914-29923]:SingleVariableDeclaration[30220-30229]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29925-30109]:Block[30231-30415]"
    }, {
      "left" : "CompilerInput input = new CompilerInput(\n        JSSourceFile.fromCode(\" [synthetic] \", js));",
      "right" : "CompilerInput input = new CompilerInput(\n        JSSourceFile.fromCode(\" [synthetic] \", js));",
      "info" : "VariableDeclarationStatement[29931-30024]:VariableDeclarationStatement[30237-30330]"
    }, {
      "left" : "inputsByName.put(input.getName(), input);",
      "right" : "inputsByName.put(input.getName(), input);",
      "info" : "ExpressionStatement[30029-30070]:ExpressionStatement[30335-30376]"
    }, {
      "left" : "return input.getAstRoot(this);",
      "right" : "return input.getAstRoot(this);",
      "info" : "ReturnStatement[30075-30105]:ReturnStatement[30381-30411]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[30113-30117]:PrimitiveType[30419-30423]"
    }, {
      "left" : "initCompilerOptionsIfTesting",
      "right" : "initCompilerOptionsIfTesting",
      "info" : "SimpleName[30118-30146]:SimpleName[30424-30452]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30149-30333]:Block[30455-30639]"
    }, {
      "left" : "if (options == null)",
      "right" : "if (options == null)",
      "info" : "IfStatement[30155-30329]:IfStatement[30461-30635]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30176-30329]:Block[30482-30635]"
    }, {
      "left" : "initOptions(new CompilerOptions());",
      "right" : "initOptions(new CompilerOptions());",
      "info" : "ExpressionStatement[30288-30323]:ExpressionStatement[30594-30629]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[30337-30346]:MarkerAnnotation[30643-30652]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[30349-30353]:SimpleType[30655-30659]"
    }, {
      "left" : "parseSyntheticCode",
      "right" : "parseSyntheticCode",
      "info" : "SimpleName[30354-30372]:SimpleName[30660-30678]"
    }, {
      "left" : "String fileName",
      "right" : "String fileName",
      "info" : "SingleVariableDeclaration[30373-30388]:SingleVariableDeclaration[30679-30694]"
    }, {
      "left" : "String js",
      "right" : "String js",
      "info" : "SingleVariableDeclaration[30390-30399]:SingleVariableDeclaration[30696-30705]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30401-30497]:Block[30707-30803]"
    }, {
      "left" : "initCompilerOptionsIfTesting();",
      "right" : "initCompilerOptionsIfTesting();",
      "info" : "ExpressionStatement[30407-30438]:ExpressionStatement[30713-30744]"
    }, {
      "left" : "return parse(JSSourceFile.fromCode(fileName, js));",
      "right" : "return parse(JSSourceFile.fromCode(fileName, js));",
      "info" : "ReturnStatement[30443-30493]:ReturnStatement[30749-30799]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[30501-30505]:SimpleType[30807-30811]"
    }, {
      "left" : "parseTestCode",
      "right" : "parseTestCode",
      "info" : "SimpleName[30506-30519]:SimpleName[30812-30825]"
    }, {
      "left" : "String js",
      "right" : "String js",
      "info" : "SingleVariableDeclaration[30520-30529]:SingleVariableDeclaration[30826-30835]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30531-30828]:Block[30837-31134]"
    }, {
      "left" : "initCompilerOptionsIfTesting();",
      "right" : "initCompilerOptionsIfTesting();",
      "info" : "ExpressionStatement[30537-30568]:ExpressionStatement[30843-30874]"
    }, {
      "left" : "CompilerInput input = new CompilerInput(\n        JSSourceFile.fromCode(\" [testcode] \", js));",
      "right" : "CompilerInput input = new CompilerInput(\n        JSSourceFile.fromCode(\" [testcode] \", js));",
      "info" : "VariableDeclarationStatement[30573-30665]:VariableDeclarationStatement[30879-30971]"
    }, {
      "left" : "if (inputsByName == null)",
      "right" : "if (inputsByName == null)",
      "info" : "IfStatement[30670-30743]:IfStatement[30976-31049]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30696-30743]:Block[31002-31049]"
    }, {
      "left" : "inputsByName = Maps.newHashMap();",
      "right" : "inputsByName = Maps.newHashMap();",
      "info" : "ExpressionStatement[30704-30737]:ExpressionStatement[31010-31043]"
    }, {
      "left" : "inputsByName.put(input.getName(), input);",
      "right" : "inputsByName.put(input.getName(), input);",
      "info" : "ExpressionStatement[30748-30789]:ExpressionStatement[31054-31095]"
    }, {
      "left" : "return input.getAstRoot(this);",
      "right" : "return input.getAstRoot(this);",
      "info" : "ReturnStatement[30794-30824]:ReturnStatement[31100-31130]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[30832-30841]:MarkerAnnotation[31138-31147]"
    }, {
      "left" : "ErrorReporter",
      "right" : "ErrorReporter",
      "info" : "SimpleType[30844-30857]:SimpleType[31150-31163]"
    }, {
      "left" : "getDefaultErrorReporter",
      "right" : "getDefaultErrorReporter",
      "info" : "SimpleName[30858-30881]:SimpleName[31164-31187]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30884-30922]:Block[31190-31228]"
    }, {
      "left" : "return defaultErrorReporter;",
      "right" : "return defaultErrorReporter;",
      "info" : "ReturnStatement[30890-30918]:ReturnStatement[31196-31224]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[31177-31183]:Modifier[31483-31489]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[31184-31190]:SimpleType[31490-31496]"
    }, {
      "left" : "toSource",
      "right" : "toSource",
      "info" : "SimpleName[31191-31199]:SimpleName[31497-31505]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31202-31812]:Block[31508-32118]"
    }, {
      "left" : "return runInCompilerThread(new Callable<String>() {\n      public String call() throws Exception {\n        Tracer tracer = newTracer(\"toSource\");\n        try {\n          CodeBuilder cb = new CodeBuilder();\n          if (jsRoot != null) {\n            int i = 0;\n            for (Node scriptNode = jsRoot.getFirstChild();\n                 scriptNode != null;\n                 scriptNode = scriptNode.getNext()) {\n              toSource(cb, i++, scriptNode);\n            }\n          }\n          return cb.toString();\n        } finally {\n          stopTracer(tracer, \"toSource\");\n        }\n      }\n    });",
      "right" : "return runInCompilerThread(new Callable<String>() {\n      public String call() throws Exception {\n        Tracer tracer = newTracer(\"toSource\");\n        try {\n          CodeBuilder cb = new CodeBuilder();\n          if (jsRoot != null) {\n            int i = 0;\n            for (Node scriptNode = jsRoot.getFirstChild();\n                 scriptNode != null;\n                 scriptNode = scriptNode.getNext()) {\n              toSource(cb, i++, scriptNode);\n            }\n          }\n          return cb.toString();\n        } finally {\n          stopTracer(tracer, \"toSource\");\n        }\n      }\n    });",
      "info" : "ReturnStatement[31208-31808]:ReturnStatement[31514-32114]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[31266-31272]:Modifier[31572-31578]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[31273-31279]:SimpleType[31579-31585]"
    }, {
      "left" : "call",
      "right" : "call",
      "info" : "SimpleName[31280-31284]:SimpleName[31586-31590]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[31294-31303]:SimpleType[31600-31609]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31304-31800]:Block[31610-32106]"
    }, {
      "left" : "Tracer tracer = newTracer(\"toSource\");",
      "right" : "Tracer tracer = newTracer(\"toSource\");",
      "info" : "VariableDeclarationStatement[31314-31352]:VariableDeclarationStatement[31620-31658]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[31361-31792]:TryStatement[31667-32098]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31365-31730]:Block[31671-32036]"
    }, {
      "left" : "CodeBuilder cb = new CodeBuilder();",
      "right" : "CodeBuilder cb = new CodeBuilder();",
      "info" : "VariableDeclarationStatement[31377-31412]:VariableDeclarationStatement[31683-31718]"
    }, {
      "left" : "if (jsRoot != null)",
      "right" : "if (jsRoot != null)",
      "info" : "IfStatement[31423-31688]:IfStatement[31729-31994]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31443-31688]:Block[31749-31994]"
    }, {
      "left" : "int i = 0;",
      "right" : "int i = 0;",
      "info" : "VariableDeclarationStatement[31457-31467]:VariableDeclarationStatement[31763-31773]"
    }, {
      "left" : "for (Node scriptNode = jsRoot.getFirstChild();\n                 scriptNode != null;\n                 scriptNode = scriptNode.getNext())",
      "right" : "for (Node scriptNode = jsRoot.getFirstChild();\n                 scriptNode != null;\n                 scriptNode = scriptNode.getNext())",
      "info" : "ForStatement[31480-31676]:ForStatement[31786-31982]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31616-31676]:Block[31922-31982]"
    }, {
      "left" : "toSource(cb, i++, scriptNode);",
      "right" : "toSource(cb, i++, scriptNode);",
      "info" : "ExpressionStatement[31632-31662]:ExpressionStatement[31938-31968]"
    }, {
      "left" : "return cb.toString();",
      "right" : "return cb.toString();",
      "info" : "ReturnStatement[31699-31720]:ReturnStatement[32005-32026]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31739-31792]:Block[32045-32098]"
    }, {
      "left" : "stopTracer(tracer, \"toSource\");",
      "right" : "stopTracer(tracer, \"toSource\");",
      "info" : "ExpressionStatement[31751-31782]:ExpressionStatement[32057-32088]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[31889-31895]:Modifier[32195-32201]"
    }, {
      "left" : "String[]",
      "right" : "String[]",
      "info" : "ArrayType[31896-31904]:ArrayType[32202-32210]"
    }, {
      "left" : "toSourceArray",
      "right" : "toSourceArray",
      "info" : "SimpleName[31905-31918]:SimpleName[32211-32224]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31921-32588]:Block[32227-32894]"
    }, {
      "left" : "return runInCompilerThread(new Callable<String[]>() {\n      public String[] call() throws Exception {\n        Tracer tracer = newTracer(\"toSourceArray\");\n        try {\n          int numInputs = inputs.length;\n          String[] sources = new String[numInputs];\n          CodeBuilder cb = new CodeBuilder();\n          for (int i = 0; i < numInputs; i++) {\n            Node scriptNode = inputs[i].getAstRoot(Compiler.this);\n            cb.reset();\n            toSource(cb, i, scriptNode);\n            sources[i] = cb.toString();\n          }\n          return sources;\n        } finally {\n          stopTracer(tracer, \"toSourceArray\");\n        }\n      }\n    });",
      "right" : "return runInCompilerThread(new Callable<String[]>() {\n      public String[] call() throws Exception {\n        Tracer tracer = newTracer(\"toSourceArray\");\n        try {\n          int numInputs = inputs.length;\n          String[] sources = new String[numInputs];\n          CodeBuilder cb = new CodeBuilder();\n          for (int i = 0; i < numInputs; i++) {\n            Node scriptNode = inputs[i].getAstRoot(Compiler.this);\n            cb.reset();\n            toSource(cb, i, scriptNode);\n            sources[i] = cb.toString();\n          }\n          return sources;\n        } finally {\n          stopTracer(tracer, \"toSourceArray\");\n        }\n      }\n    });",
      "info" : "ReturnStatement[31927-32584]:ReturnStatement[32233-32890]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[31987-31993]:Modifier[32293-32299]"
    }, {
      "left" : "String[]",
      "right" : "String[]",
      "info" : "ArrayType[31994-32002]:ArrayType[32300-32308]"
    }, {
      "left" : "call",
      "right" : "call",
      "info" : "SimpleName[32003-32007]:SimpleName[32309-32313]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[32017-32026]:SimpleType[32323-32332]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32027-32576]:Block[32333-32882]"
    }, {
      "left" : "Tracer tracer = newTracer(\"toSourceArray\");",
      "right" : "Tracer tracer = newTracer(\"toSourceArray\");",
      "info" : "VariableDeclarationStatement[32037-32080]:VariableDeclarationStatement[32343-32386]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[32089-32568]:TryStatement[32395-32874]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32093-32501]:Block[32399-32807]"
    }, {
      "left" : "int numInputs = inputs.length;",
      "right" : "int numInputs = inputs.length;",
      "info" : "VariableDeclarationStatement[32105-32135]:VariableDeclarationStatement[32411-32441]"
    }, {
      "left" : "String[] sources = new String[numInputs];",
      "right" : "String[] sources = new String[numInputs];",
      "info" : "VariableDeclarationStatement[32146-32187]:VariableDeclarationStatement[32452-32493]"
    }, {
      "left" : "CodeBuilder cb = new CodeBuilder();",
      "right" : "CodeBuilder cb = new CodeBuilder();",
      "info" : "VariableDeclarationStatement[32198-32233]:VariableDeclarationStatement[32504-32539]"
    }, {
      "left" : "for (int i = 0; i < numInputs; i++)",
      "right" : "for (int i = 0; i < numInputs; i++)",
      "info" : "ForStatement[32244-32465]:ForStatement[32550-32771]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32280-32465]:Block[32586-32771]"
    }, {
      "left" : "Node scriptNode = inputs[i].getAstRoot(Compiler.this);",
      "right" : "Node scriptNode = inputs[i].getAstRoot(Compiler.this);",
      "info" : "VariableDeclarationStatement[32294-32348]:VariableDeclarationStatement[32600-32654]"
    }, {
      "left" : "cb.reset();",
      "right" : "cb.reset();",
      "info" : "ExpressionStatement[32361-32372]:ExpressionStatement[32667-32678]"
    }, {
      "left" : "toSource(cb, i, scriptNode);",
      "right" : "toSource(cb, i, scriptNode);",
      "info" : "ExpressionStatement[32385-32413]:ExpressionStatement[32691-32719]"
    }, {
      "left" : "sources[i] = cb.toString();",
      "right" : "sources[i] = cb.toString();",
      "info" : "ExpressionStatement[32426-32453]:ExpressionStatement[32732-32759]"
    }, {
      "left" : "return sources;",
      "right" : "return sources;",
      "info" : "ReturnStatement[32476-32491]:ReturnStatement[32782-32797]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32510-32568]:Block[32816-32874]"
    }, {
      "left" : "stopTracer(tracer, \"toSourceArray\");",
      "right" : "stopTracer(tracer, \"toSourceArray\");",
      "info" : "ExpressionStatement[32522-32558]:ExpressionStatement[32828-32864]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[32663-32669]:Modifier[32969-32975]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[32670-32676]:SimpleType[32976-32982]"
    }, {
      "left" : "toSource",
      "right" : "toSource",
      "info" : "SimpleName[32677-32685]:SimpleName[32983-32991]"
    }, {
      "left" : "final JSModule module",
      "right" : "final JSModule module",
      "info" : "SingleVariableDeclaration[32686-32707]:SingleVariableDeclaration[32992-33013]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32709-33375]:Block[33015-33681]"
    }, {
      "left" : "return runInCompilerThread(new Callable<String>() {\n      public String call() throws Exception {\n        List<CompilerInput> inputs = module.getInputs();\n        int numInputs = inputs.size();\n        if (numInputs == 0) {\n          return \"\";\n        }\n        CodeBuilder cb = new CodeBuilder();\n        for (int i = 0; i < numInputs; i++) {\n          Node scriptNode = inputs.get(i).getAstRoot(Compiler.this);\n          if (scriptNode == null) {\n            throw new IllegalArgumentException(\n                \"Bad module: \" + module.getName());\n          }\n          toSource(cb, i, scriptNode);\n        }\n        return cb.toString();\n      }\n    });",
      "right" : "return runInCompilerThread(new Callable<String>() {\n      public String call() throws Exception {\n        List<CompilerInput> inputs = module.getInputs();\n        int numInputs = inputs.size();\n        if (numInputs == 0) {\n          return \"\";\n        }\n        CodeBuilder cb = new CodeBuilder();\n        for (int i = 0; i < numInputs; i++) {\n          Node scriptNode = inputs.get(i).getAstRoot(Compiler.this);\n          if (scriptNode == null) {\n            throw new IllegalArgumentException(\n                \"Bad module: \" + module.getName());\n          }\n          toSource(cb, i, scriptNode);\n        }\n        return cb.toString();\n      }\n    });",
      "info" : "ReturnStatement[32715-33371]:ReturnStatement[33021-33677]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[32773-32779]:Modifier[33079-33085]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[32780-32786]:SimpleType[33086-33092]"
    }, {
      "left" : "call",
      "right" : "call",
      "info" : "SimpleName[32787-32791]:SimpleName[33093-33097]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[32801-32810]:SimpleType[33107-33116]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32811-33363]:Block[33117-33669]"
    }, {
      "left" : "List<CompilerInput> inputs = module.getInputs();",
      "right" : "List<CompilerInput> inputs = module.getInputs();",
      "info" : "VariableDeclarationStatement[32821-32869]:VariableDeclarationStatement[33127-33175]"
    }, {
      "left" : "int numInputs = inputs.size();",
      "right" : "int numInputs = inputs.size();",
      "info" : "VariableDeclarationStatement[32878-32908]:VariableDeclarationStatement[33184-33214]"
    }, {
      "left" : "if (numInputs == 0)",
      "right" : "if (numInputs == 0)",
      "info" : "IfStatement[32917-32969]:IfStatement[33223-33275]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32937-32969]:Block[33243-33275]"
    }, {
      "left" : "return \"\";",
      "right" : "return \"\";",
      "info" : "ReturnStatement[32949-32959]:ReturnStatement[33255-33265]"
    }, {
      "left" : "CodeBuilder cb = new CodeBuilder();",
      "right" : "CodeBuilder cb = new CodeBuilder();",
      "info" : "VariableDeclarationStatement[32978-33013]:VariableDeclarationStatement[33284-33319]"
    }, {
      "left" : "for (int i = 0; i < numInputs; i++)",
      "right" : "for (int i = 0; i < numInputs; i++)",
      "info" : "ForStatement[33022-33325]:ForStatement[33328-33631]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33058-33325]:Block[33364-33631]"
    }, {
      "left" : "Node scriptNode = inputs.get(i).getAstRoot(Compiler.this);",
      "right" : "Node scriptNode = inputs.get(i).getAstRoot(Compiler.this);",
      "info" : "VariableDeclarationStatement[33070-33128]:VariableDeclarationStatement[33376-33434]"
    }, {
      "left" : "if (scriptNode == null)",
      "right" : "if (scriptNode == null)",
      "info" : "IfStatement[33139-33276]:IfStatement[33445-33582]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33163-33276]:Block[33469-33582]"
    }, {
      "left" : "throw new IllegalArgumentException(\n                \"Bad module: \" + module.getName());",
      "right" : "throw new IllegalArgumentException(\n                \"Bad module: \" + module.getName());",
      "info" : "ThrowStatement[33177-33264]:ThrowStatement[33483-33570]"
    }, {
      "left" : "toSource(cb, i, scriptNode);",
      "right" : "toSource(cb, i, scriptNode);",
      "info" : "ExpressionStatement[33287-33315]:ExpressionStatement[33593-33621]"
    }, {
      "left" : "return cb.toString();",
      "right" : "return cb.toString();",
      "info" : "ReturnStatement[33334-33355]:ReturnStatement[33640-33661]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[33465-33471]:Modifier[33771-33777]"
    }, {
      "left" : "String[]",
      "right" : "String[]",
      "info" : "ArrayType[33472-33480]:ArrayType[33778-33786]"
    }, {
      "left" : "toSourceArray",
      "right" : "toSourceArray",
      "info" : "SimpleName[33481-33494]:SimpleName[33787-33800]"
    }, {
      "left" : "final JSModule module",
      "right" : "final JSModule module",
      "info" : "SingleVariableDeclaration[33495-33516]:SingleVariableDeclaration[33801-33822]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33518-34318]:Block[33824-34624]"
    }, {
      "left" : "return runInCompilerThread(new Callable<String[]>() {\n      public String[] call() throws Exception {\n        List<CompilerInput> inputs = module.getInputs();\n        int numInputs = inputs.size();\n        if (numInputs == 0) {\n          return new String[0];\n        }\n\n        String[] sources = new String[numInputs];\n        CodeBuilder cb = new CodeBuilder();\n        for (int i = 0; i < numInputs; i++) {\n          Node scriptNode = inputs.get(i).getAstRoot(Compiler.this);\n          if (scriptNode == null) {\n            throw new IllegalArgumentException(\n                \"Bad module input: \" + inputs.get(i).getName());\n          }\n\n          cb.reset();\n          toSource(cb, i, scriptNode);\n          sources[i] = cb.toString();\n        }\n        return sources;\n      }\n    });",
      "right" : "return runInCompilerThread(new Callable<String[]>() {\n      public String[] call() throws Exception {\n        List<CompilerInput> inputs = module.getInputs();\n        int numInputs = inputs.size();\n        if (numInputs == 0) {\n          return new String[0];\n        }\n\n        String[] sources = new String[numInputs];\n        CodeBuilder cb = new CodeBuilder();\n        for (int i = 0; i < numInputs; i++) {\n          Node scriptNode = inputs.get(i).getAstRoot(Compiler.this);\n          if (scriptNode == null) {\n            throw new IllegalArgumentException(\n                \"Bad module input: \" + inputs.get(i).getName());\n          }\n\n          cb.reset();\n          toSource(cb, i, scriptNode);\n          sources[i] = cb.toString();\n        }\n        return sources;\n      }\n    });",
      "info" : "ReturnStatement[33524-34314]:ReturnStatement[33830-34620]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[33584-33590]:Modifier[33890-33896]"
    }, {
      "left" : "String[]",
      "right" : "String[]",
      "info" : "ArrayType[33591-33599]:ArrayType[33897-33905]"
    }, {
      "left" : "call",
      "right" : "call",
      "info" : "SimpleName[33600-33604]:SimpleName[33906-33910]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[33614-33623]:SimpleType[33920-33929]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33624-34306]:Block[33930-34612]"
    }, {
      "left" : "List<CompilerInput> inputs = module.getInputs();",
      "right" : "List<CompilerInput> inputs = module.getInputs();",
      "info" : "VariableDeclarationStatement[33634-33682]:VariableDeclarationStatement[33940-33988]"
    }, {
      "left" : "int numInputs = inputs.size();",
      "right" : "int numInputs = inputs.size();",
      "info" : "VariableDeclarationStatement[33691-33721]:VariableDeclarationStatement[33997-34027]"
    }, {
      "left" : "if (numInputs == 0)",
      "right" : "if (numInputs == 0)",
      "info" : "IfStatement[33730-33793]:IfStatement[34036-34099]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33750-33793]:Block[34056-34099]"
    }, {
      "left" : "return new String[0];",
      "right" : "return new String[0];",
      "info" : "ReturnStatement[33762-33783]:ReturnStatement[34068-34089]"
    }, {
      "left" : "String[] sources = new String[numInputs];",
      "right" : "String[] sources = new String[numInputs];",
      "info" : "VariableDeclarationStatement[33803-33844]:VariableDeclarationStatement[34109-34150]"
    }, {
      "left" : "CodeBuilder cb = new CodeBuilder();",
      "right" : "CodeBuilder cb = new CodeBuilder();",
      "info" : "VariableDeclarationStatement[33853-33888]:VariableDeclarationStatement[34159-34194]"
    }, {
      "left" : "for (int i = 0; i < numInputs; i++)",
      "right" : "for (int i = 0; i < numInputs; i++)",
      "info" : "ForStatement[33897-34274]:ForStatement[34203-34580]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33933-34274]:Block[34239-34580]"
    }, {
      "left" : "Node scriptNode = inputs.get(i).getAstRoot(Compiler.this);",
      "right" : "Node scriptNode = inputs.get(i).getAstRoot(Compiler.this);",
      "info" : "VariableDeclarationStatement[33945-34003]:VariableDeclarationStatement[34251-34309]"
    }, {
      "left" : "if (scriptNode == null)",
      "right" : "if (scriptNode == null)",
      "info" : "IfStatement[34014-34164]:IfStatement[34320-34470]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34038-34164]:Block[34344-34470]"
    }, {
      "left" : "throw new IllegalArgumentException(\n                \"Bad module input: \" + inputs.get(i).getName());",
      "right" : "throw new IllegalArgumentException(\n                \"Bad module input: \" + inputs.get(i).getName());",
      "info" : "ThrowStatement[34052-34152]:ThrowStatement[34358-34458]"
    }, {
      "left" : "cb.reset();",
      "right" : "cb.reset();",
      "info" : "ExpressionStatement[34176-34187]:ExpressionStatement[34482-34493]"
    }, {
      "left" : "toSource(cb, i, scriptNode);",
      "right" : "toSource(cb, i, scriptNode);",
      "info" : "ExpressionStatement[34198-34226]:ExpressionStatement[34504-34532]"
    }, {
      "left" : "sources[i] = cb.toString();",
      "right" : "sources[i] = cb.toString();",
      "info" : "ExpressionStatement[34237-34264]:ExpressionStatement[34543-34570]"
    }, {
      "left" : "return sources;",
      "right" : "return sources;",
      "info" : "ReturnStatement[34283-34298]:ReturnStatement[34589-34604]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[34675-34681]:Modifier[34981-34987]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[34682-34686]:PrimitiveType[34988-34992]"
    }, {
      "left" : "toSource",
      "right" : "toSource",
      "info" : "SimpleName[34687-34695]:SimpleName[34993-35001]"
    }, {
      "left" : "final CodeBuilder cb",
      "right" : "final CodeBuilder cb",
      "info" : "SingleVariableDeclaration[34696-34716]:SingleVariableDeclaration[35002-35022]"
    }, {
      "left" : "final int inputSeqNum",
      "right" : "final int inputSeqNum",
      "info" : "SingleVariableDeclaration[34741-34762]:SingleVariableDeclaration[35047-35068]"
    }, {
      "left" : "final Node root",
      "right" : "final Node root",
      "info" : "SingleVariableDeclaration[34787-34802]:SingleVariableDeclaration[35093-35108]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34804-36392]:Block[35110-36698]"
    }, {
      "left" : "runInCompilerThread(new Callable<Void>() {\n      public Void call() throws Exception {\n        if (options.printInputDelimiter) {\n          if ((cb.getLength() > 0) && !cb.endsWith(\"\\n\")) {\n            cb.append(\"\\n\");  // Make sure that the label starts on a new line\n          }\n          Preconditions.checkState(root.getType() == Token.SCRIPT);\n          \n          String delimiter = options.inputDelimiter;\n          \n          String sourceName = (String)root.getProp(Node.SOURCENAME_PROP);\n          Preconditions.checkState(sourceName != null);\n          Preconditions.checkState(!sourceName.isEmpty());\n          \n          delimiter = delimiter.replaceAll(\"%name%\", sourceName)\n            .replaceAll(\"%num%\", String.valueOf(inputSeqNum));\n\n          cb.append(delimiter)\n            .append(\"\\n\");\n        }\n        if (root.getJSDocInfo() != null &&\n            root.getJSDocInfo().getLicense() != null) {\n          cb.append(\"/*\\n\")\n            .append(root.getJSDocInfo().getLicense())\n            .append(\"*/\\n\");\n        }\n\n        // If there is a valid source map, then indicate to it that the current\n        // root node's mappings are offset by the given string builder buffer.\n        if (options.sourceMapOutputPath != null) {\n          sourceMap.setStartingPosition(\n              cb.getLineIndex(), cb.getColumnIndex());\n        }\n\n        String code = toSource(root);\n        if (!code.isEmpty()) {\n          cb.append(code);\n          if (!code.endsWith(\";\")) {\n            cb.append(\";\");\n          }\n        }\n        return null;\n      }\n    });",
      "right" : "runInCompilerThread(new Callable<Void>() {\n      public Void call() throws Exception {\n        if (options.printInputDelimiter) {\n          if ((cb.getLength() > 0) && !cb.endsWith(\"\\n\")) {\n            cb.append(\"\\n\");  // Make sure that the label starts on a new line\n          }\n          Preconditions.checkState(root.getType() == Token.SCRIPT);\n          \n          String delimiter = options.inputDelimiter;\n          \n          String sourceName = (String)root.getProp(Node.SOURCENAME_PROP);\n          Preconditions.checkState(sourceName != null);\n          Preconditions.checkState(!sourceName.isEmpty());\n          \n          delimiter = delimiter.replaceAll(\"%name%\", sourceName)\n            .replaceAll(\"%num%\", String.valueOf(inputSeqNum));\n\n          cb.append(delimiter)\n            .append(\"\\n\");\n        }\n        if (root.getJSDocInfo() != null &&\n            root.getJSDocInfo().getLicense() != null) {\n          cb.append(\"/*\\n\")\n            .append(root.getJSDocInfo().getLicense())\n            .append(\"*/\\n\");\n        }\n\n        // If there is a valid source map, then indicate to it that the current\n        // root node's mappings are offset by the given string builder buffer.\n        if (options.sourceMapOutputPath != null) {\n          sourceMap.setStartingPosition(\n              cb.getLineIndex(), cb.getColumnIndex());\n        }\n\n        String code = toSource(root);\n        if (!code.isEmpty()) {\n          cb.append(code);\n          if (!code.endsWith(\";\")) {\n            cb.append(\";\");\n          }\n        }\n        return null;\n      }\n    });",
      "info" : "ExpressionStatement[34810-36388]:ExpressionStatement[35116-36694]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[34859-34865]:Modifier[35165-35171]"
    }, {
      "left" : "Void",
      "right" : "Void",
      "info" : "SimpleType[34866-34870]:SimpleType[35172-35176]"
    }, {
      "left" : "call",
      "right" : "call",
      "info" : "SimpleName[34871-34875]:SimpleName[35177-35181]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[34885-34894]:SimpleType[35191-35200]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34895-36380]:Block[35201-36686]"
    }, {
      "left" : "if (options.printInputDelimiter)",
      "right" : "if (options.printInputDelimiter)",
      "info" : "IfStatement[34905-35630]:IfStatement[35211-35936]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34938-35630]:Block[35244-35936]"
    }, {
      "left" : "if ((cb.getLength() > 0) && !cb.endsWith(\"\\n\"))",
      "right" : "if ((cb.getLength() > 0) && !cb.endsWith(\"\\n\"))",
      "info" : "IfStatement[34950-35090]:IfStatement[35256-35396]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34998-35090]:Block[35304-35396]"
    }, {
      "left" : "cb.append(\"\\n\");",
      "right" : "cb.append(\"\\n\");",
      "info" : "ExpressionStatement[35012-35028]:ExpressionStatement[35318-35334]"
    }, {
      "left" : "Preconditions.checkState(root.getType() == Token.SCRIPT);",
      "right" : "Preconditions.checkState(root.getType() == Token.SCRIPT);",
      "info" : "ExpressionStatement[35101-35158]:ExpressionStatement[35407-35464]"
    }, {
      "left" : "String delimiter = options.inputDelimiter;",
      "right" : "String delimiter = options.inputDelimiter;",
      "info" : "VariableDeclarationStatement[35180-35222]:VariableDeclarationStatement[35486-35528]"
    }, {
      "left" : "String sourceName = (String)root.getProp(Node.SOURCENAME_PROP);",
      "right" : "String sourceName = (String)root.getProp(Node.SOURCENAME_PROP);",
      "info" : "VariableDeclarationStatement[35244-35307]:VariableDeclarationStatement[35550-35613]"
    }, {
      "left" : "Preconditions.checkState(sourceName != null);",
      "right" : "Preconditions.checkState(sourceName != null);",
      "info" : "ExpressionStatement[35318-35363]:ExpressionStatement[35624-35669]"
    }, {
      "left" : "Preconditions.checkState(!sourceName.isEmpty());",
      "right" : "Preconditions.checkState(!sourceName.isEmpty());",
      "info" : "ExpressionStatement[35374-35422]:ExpressionStatement[35680-35728]"
    }, {
      "left" : "delimiter = delimiter.replaceAll(\"%name%\", sourceName)\n            .replaceAll(\"%num%\", String.valueOf(inputSeqNum));",
      "right" : "delimiter = delimiter.replaceAll(\"%name%\", sourceName)\n            .replaceAll(\"%num%\", String.valueOf(inputSeqNum));",
      "info" : "ExpressionStatement[35444-35561]:ExpressionStatement[35750-35867]"
    }, {
      "left" : "cb.append(delimiter)\n            .append(\"\\n\");",
      "right" : "cb.append(delimiter)\n            .append(\"\\n\");",
      "info" : "ExpressionStatement[35573-35620]:ExpressionStatement[35879-35926]"
    }, {
      "left" : "if (root.getJSDocInfo() != null &&\n            root.getJSDocInfo().getLicense() != null)",
      "right" : "if (root.getJSDocInfo() != null &&\n            root.getJSDocInfo().getLicense() != null)",
      "info" : "IfStatement[35639-35850]:IfStatement[35945-36156]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35728-35850]:Block[36034-36156]"
    }, {
      "left" : "cb.append(\"/*\\n\")\n            .append(root.getJSDocInfo().getLicense())\n            .append(\"*/\\n\");",
      "right" : "cb.append(\"/*\\n\")\n            .append(root.getJSDocInfo().getLicense())\n            .append(\"*/\\n\");",
      "info" : "ExpressionStatement[35740-35840]:ExpressionStatement[36046-36146]"
    }, {
      "left" : "if (options.sourceMapOutputPath != null)",
      "right" : "if (options.sourceMapOutputPath != null)",
      "info" : "IfStatement[36019-36167]:IfStatement[36325-36473]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36060-36167]:Block[36366-36473]"
    }, {
      "left" : "sourceMap.setStartingPosition(\n              cb.getLineIndex(), cb.getColumnIndex());",
      "right" : "sourceMap.setStartingPosition(\n              cb.getLineIndex(), cb.getColumnIndex());",
      "info" : "ExpressionStatement[36072-36157]:ExpressionStatement[36378-36463]"
    }, {
      "left" : "String code = toSource(root);",
      "right" : "String code = toSource(root);",
      "info" : "VariableDeclarationStatement[36177-36206]:VariableDeclarationStatement[36483-36512]"
    }, {
      "left" : "if (!code.isEmpty())",
      "right" : "if (!code.isEmpty())",
      "info" : "IfStatement[36215-36351]:IfStatement[36521-36657]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36236-36351]:Block[36542-36657]"
    }, {
      "left" : "cb.append(code);",
      "right" : "cb.append(code);",
      "info" : "ExpressionStatement[36248-36264]:ExpressionStatement[36554-36570]"
    }, {
      "left" : "if (!code.endsWith(\";\"))",
      "right" : "if (!code.endsWith(\";\"))",
      "info" : "IfStatement[36275-36341]:IfStatement[36581-36647]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36300-36341]:Block[36606-36647]"
    }, {
      "left" : "cb.append(\";\");",
      "right" : "cb.append(\";\");",
      "info" : "ExpressionStatement[36314-36329]:ExpressionStatement[36620-36635]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[36360-36372]:ReturnStatement[36666-36678]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[36458-36467]:MarkerAnnotation[36764-36773]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[36470-36476]:SimpleType[36776-36782]"
    }, {
      "left" : "toSource",
      "right" : "toSource",
      "info" : "SimpleName[36477-36485]:SimpleName[36783-36791]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[36486-36492]:SingleVariableDeclaration[36792-36798]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36494-36814]:Block[36800-37120]"
    }, {
      "left" : "initCompilerOptionsIfTesting();",
      "right" : "initCompilerOptionsIfTesting();",
      "info" : "ExpressionStatement[36500-36531]:ExpressionStatement[36806-36837]"
    }, {
      "left" : "CodePrinter.Builder builder = new CodePrinter.Builder(n);",
      "right" : "CodePrinter.Builder builder = new CodePrinter.Builder(n);",
      "info" : "VariableDeclarationStatement[36541-36598]:VariableDeclarationStatement[36847-36904]"
    }, {
      "left" : "builder.setPrettyPrint(options.prettyPrint);",
      "right" : "builder.setPrettyPrint(options.prettyPrint);",
      "info" : "ExpressionStatement[36603-36647]:ExpressionStatement[36909-36953]"
    }, {
      "left" : "builder.setLineBreak(options.lineBreak);",
      "right" : "builder.setLineBreak(options.lineBreak);",
      "info" : "ExpressionStatement[36652-36692]:ExpressionStatement[36958-36998]"
    }, {
      "left" : "builder.setSourceMap(sourceMap);",
      "right" : "builder.setSourceMap(sourceMap);",
      "info" : "ExpressionStatement[36697-36729]:ExpressionStatement[37003-37035]"
    }, {
      "left" : "builder.setOutputCharset(options.outputCharset);",
      "right" : "builder.setOutputCharset(options.outputCharset);",
      "info" : "ExpressionStatement[36734-36782]:ExpressionStatement[37040-37088]"
    }, {
      "left" : "return builder.build();",
      "right" : "return builder.build();",
      "info" : "ReturnStatement[36787-36810]:ReturnStatement[37093-37116]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[36977-36983]:Modifier[37283-37289]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[36984-36990]:Modifier[37290-37296]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[36991-36996]:TYPE_DECLARATION_KIND[37297-37302]"
    }, {
      "left" : "CodeBuilder",
      "right" : "CodeBuilder",
      "info" : "SimpleName[36997-37008]:SimpleName[37303-37314]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[37171-37175]:PrimitiveType[37477-37481]"
    }, {
      "left" : "reset",
      "right" : "reset",
      "info" : "SimpleName[37176-37181]:SimpleName[37482-37487]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37184-37214]:Block[37490-37520]"
    }, {
      "left" : "sb.setLength(0);",
      "right" : "sb.setLength(0);",
      "info" : "ExpressionStatement[37192-37208]:ExpressionStatement[37498-37514]"
    }, {
      "left" : "CodeBuilder",
      "right" : "CodeBuilder",
      "info" : "SimpleType[37276-37287]:SimpleType[37582-37593]"
    }, {
      "left" : "append",
      "right" : "append",
      "info" : "SimpleName[37288-37294]:SimpleName[37594-37600]"
    }, {
      "left" : "String str",
      "right" : "String str",
      "info" : "SingleVariableDeclaration[37295-37305]:SingleVariableDeclaration[37601-37611]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37307-37525]:Block[37613-37831]"
    }, {
      "left" : "sb.append(str);",
      "right" : "sb.append(str);",
      "info" : "ExpressionStatement[37315-37330]:ExpressionStatement[37621-37636]"
    }, {
      "left" : "int index = -1;",
      "right" : "int index = -1;",
      "info" : "VariableDeclarationStatement[37395-37410]:VariableDeclarationStatement[37701-37716]"
    }, {
      "left" : "while ((index = str.indexOf('\\n', index + 1)) >= 0)",
      "right" : "while ((index = str.indexOf('\\n', index + 1)) >= 0)",
      "info" : "WhileStatement[37417-37499]:WhileStatement[37723-37805]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37469-37499]:Block[37775-37805]"
    }, {
      "left" : "++lineCount;",
      "right" : "++lineCount;",
      "info" : "ExpressionStatement[37479-37491]:ExpressionStatement[37785-37797]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[37507-37519]:ReturnStatement[37813-37825]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[37579-37588]:MarkerAnnotation[37885-37894]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[37593-37599]:Modifier[37899-37905]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[37600-37606]:SimpleType[37906-37912]"
    }, {
      "left" : "toString",
      "right" : "toString",
      "info" : "SimpleName[37607-37615]:SimpleName[37913-37921]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37618-37653]:Block[37924-37959]"
    }, {
      "left" : "return sb.toString();",
      "right" : "return sb.toString();",
      "info" : "ReturnStatement[37626-37647]:ReturnStatement[37932-37953]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[37709-37715]:Modifier[38015-38021]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[37716-37719]:PrimitiveType[38022-38025]"
    }, {
      "left" : "getLength",
      "right" : "getLength",
      "info" : "SimpleName[37720-37729]:SimpleName[38026-38035]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37732-37765]:Block[38038-38071]"
    }, {
      "left" : "return sb.length();",
      "right" : "return sb.length();",
      "info" : "ReturnStatement[37740-37759]:ReturnStatement[38046-38065]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[37850-37853]:PrimitiveType[38156-38159]"
    }, {
      "left" : "getLineIndex",
      "right" : "getLineIndex",
      "info" : "SimpleName[37854-37866]:SimpleName[38160-38172]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37869-37900]:Block[38175-38206]"
    }, {
      "left" : "return lineCount;",
      "right" : "return lineCount;",
      "info" : "ReturnStatement[37877-37894]:ReturnStatement[38183-38200]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[37987-37990]:PrimitiveType[38293-38296]"
    }, {
      "left" : "getColumnIndex",
      "right" : "getColumnIndex",
      "info" : "SimpleName[37991-38005]:SimpleName[38297-38311]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38008-38124]:Block[38314-38430]"
    }, {
      "left" : "int index = sb.lastIndexOf(\"\\n\");",
      "right" : "int index = sb.lastIndexOf(\"\\n\");",
      "info" : "VariableDeclarationStatement[38016-38049]:VariableDeclarationStatement[38322-38355]"
    }, {
      "left" : "return (index >= 0) ? sb.length() - (index + 1) : sb.length();",
      "right" : "return (index >= 0) ? sb.length() - (index + 1) : sb.length();",
      "info" : "ReturnStatement[38056-38118]:ReturnStatement[38362-38424]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[38197-38204]:PrimitiveType[38503-38510]"
    }, {
      "left" : "endsWith",
      "right" : "endsWith",
      "info" : "SimpleName[38205-38213]:SimpleName[38511-38519]"
    }, {
      "left" : "String suffix",
      "right" : "String suffix",
      "info" : "SingleVariableDeclaration[38214-38227]:SingleVariableDeclaration[38520-38533]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38229-38354]:Block[38535-38660]"
    }, {
      "left" : "return (sb.length() > suffix.length())\n          && suffix.equals(sb.substring(sb.length() - suffix.length()));",
      "right" : "return (sb.length() > suffix.length())\n          && suffix.equals(sb.substring(sb.length() - suffix.length()));",
      "info" : "ReturnStatement[38237-38348]:ReturnStatement[38543-38654]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[38536-38542]:Modifier[38842-38848]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[38543-38547]:PrimitiveType[38849-38853]"
    }, {
      "left" : "optimize",
      "right" : "optimize",
      "info" : "SimpleName[38548-38556]:SimpleName[38854-38862]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38559-38896]:Block[38865-39202]"
    }, {
      "left" : "PhaseOptimizer phaseOptimizer = new PhaseOptimizer(this, tracker);",
      "right" : "PhaseOptimizer phaseOptimizer = new PhaseOptimizer(this, tracker);",
      "info" : "VariableDeclarationStatement[38565-38631]:VariableDeclarationStatement[38871-38937]"
    }, {
      "left" : "if (options.devMode == DevMode.EVERY_PASS)",
      "right" : "if (options.devMode == DevMode.EVERY_PASS)",
      "info" : "IfStatement[38636-38736]:IfStatement[38942-39042]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38679-38736]:Block[38985-39042]"
    }, {
      "left" : "phaseOptimizer.setSanityCheck(sanityCheck);",
      "right" : "phaseOptimizer.setSanityCheck(sanityCheck);",
      "info" : "ExpressionStatement[38687-38730]:ExpressionStatement[38993-39036]"
    }, {
      "left" : "phaseOptimizer.consume(getPassConfig().getOptimizations());",
      "right" : "phaseOptimizer.consume(getPassConfig().getOptimizations());",
      "info" : "ExpressionStatement[38741-38800]:ExpressionStatement[39047-39106]"
    }, {
      "left" : "phaseOptimizer.process(externsRoot, jsRoot);",
      "right" : "phaseOptimizer.process(externsRoot, jsRoot);",
      "info" : "ExpressionStatement[38805-38849]:ExpressionStatement[39111-39155]"
    }, {
      "left" : "if (hasErrors())",
      "right" : "if (hasErrors())",
      "info" : "IfStatement[38854-38892]:IfStatement[39160-39198]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38871-38892]:Block[39177-39198]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[38879-38886]:ReturnStatement[39185-39192]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[38900-38909]:MarkerAnnotation[39206-39215]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[38912-38916]:PrimitiveType[39218-39222]"
    }, {
      "left" : "setCssRenamingMap",
      "right" : "setCssRenamingMap",
      "info" : "SimpleName[38917-38934]:SimpleName[39223-39240]"
    }, {
      "left" : "CssRenamingMap map",
      "right" : "CssRenamingMap map",
      "info" : "SingleVariableDeclaration[38935-38953]:SingleVariableDeclaration[39241-39259]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38955-38994]:Block[39261-39300]"
    }, {
      "left" : "options.cssRenamingMap = map;",
      "right" : "options.cssRenamingMap = map;",
      "info" : "ExpressionStatement[38961-38990]:ExpressionStatement[39267-39296]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[38998-39007]:MarkerAnnotation[39304-39313]"
    }, {
      "left" : "CssRenamingMap",
      "right" : "CssRenamingMap",
      "info" : "SimpleType[39010-39024]:SimpleType[39316-39330]"
    }, {
      "left" : "getCssRenamingMap",
      "right" : "getCssRenamingMap",
      "info" : "SimpleName[39025-39042]:SimpleName[39331-39348]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39045-39085]:Block[39351-39391]"
    }, {
      "left" : "return options.cssRenamingMap;",
      "right" : "return options.cssRenamingMap;",
      "info" : "ReturnStatement[39051-39081]:ReturnStatement[39357-39387]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[39438-39444]:Modifier[39744-39750]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[39445-39449]:PrimitiveType[39751-39755]"
    }, {
      "left" : "processDefines",
      "right" : "processDefines",
      "info" : "SimpleName[39450-39464]:SimpleName[39756-39770]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39467-39576]:Block[39773-39882]"
    }, {
      "left" : "(new DefaultPassConfig(options)).processDefines.create(this)\n        .process(externsRoot, jsRoot);",
      "right" : "(new DefaultPassConfig(options)).processDefines.create(this)\n        .process(externsRoot, jsRoot);",
      "info" : "ExpressionStatement[39473-39572]:ExpressionStatement[39779-39878]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[39580-39587]:PrimitiveType[39886-39893]"
    }, {
      "left" : "isInliningForbidden",
      "right" : "isInliningForbidden",
      "info" : "SimpleName[39588-39607]:SimpleName[39894-39913]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39610-39783]:Block[39916-40089]"
    }, {
      "left" : "return options.propertyRenaming == PropertyRenamingPolicy.HEURISTIC ||\n        options.propertyRenaming ==\n            PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC;",
      "right" : "return options.propertyRenaming == PropertyRenamingPolicy.HEURISTIC ||\n        options.propertyRenaming ==\n            PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC;",
      "info" : "ReturnStatement[39616-39779]:ReturnStatement[39922-40085]"
    }, {
      "left" : "ControlFlowGraph<Node>",
      "right" : "ControlFlowGraph<Node>",
      "info" : "ParameterizedType[39819-39841]:ParameterizedType[40125-40147]"
    }, {
      "left" : "computeCFG",
      "right" : "computeCFG",
      "info" : "SimpleName[39842-39852]:SimpleName[40148-40158]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39855-40102]:Block[40161-40408]"
    }, {
      "left" : "logger.info(\"Computing Control Flow Graph\");",
      "right" : "logger.info(\"Computing Control Flow Graph\");",
      "info" : "ExpressionStatement[39861-39905]:ExpressionStatement[40167-40211]"
    }, {
      "left" : "Tracer tracer = newTracer(\"computeCFG\");",
      "right" : "Tracer tracer = newTracer(\"computeCFG\");",
      "info" : "VariableDeclarationStatement[39910-39950]:VariableDeclarationStatement[40216-40256]"
    }, {
      "left" : "ControlFlowAnalysis cfa = new ControlFlowAnalysis(this, true);",
      "right" : "ControlFlowAnalysis cfa = new ControlFlowAnalysis(this, true);",
      "info" : "VariableDeclarationStatement[39955-40017]:VariableDeclarationStatement[40261-40323]"
    }, {
      "left" : "process(cfa);",
      "right" : "process(cfa);",
      "info" : "ExpressionStatement[40022-40035]:ExpressionStatement[40328-40341]"
    }, {
      "left" : "stopTracer(tracer, \"computeCFG\");",
      "right" : "stopTracer(tracer, \"computeCFG\");",
      "info" : "ExpressionStatement[40040-40073]:ExpressionStatement[40346-40379]"
    }, {
      "left" : "return cfa.getCfg();",
      "right" : "return cfa.getCfg();",
      "info" : "ReturnStatement[40078-40098]:ReturnStatement[40384-40404]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[40106-40112]:Modifier[40412-40418]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[40113-40117]:PrimitiveType[40419-40423]"
    }, {
      "left" : "normalize",
      "right" : "normalize",
      "info" : "SimpleName[40118-40127]:SimpleName[40424-40433]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40130-40272]:Block[40436-40578]"
    }, {
      "left" : "logger.info(\"Normalizing\");",
      "right" : "logger.info(\"Normalizing\");",
      "info" : "ExpressionStatement[40136-40163]:ExpressionStatement[40442-40469]"
    }, {
      "left" : "startPass(\"normalize\");",
      "right" : "startPass(\"normalize\");",
      "info" : "ExpressionStatement[40168-40191]:ExpressionStatement[40474-40497]"
    }, {
      "left" : "process(new Normalize(this, false));",
      "right" : "process(new Normalize(this, false));",
      "info" : "ExpressionStatement[40196-40232]:ExpressionStatement[40502-40538]"
    }, {
      "left" : "setNormalized();",
      "right" : "setNormalized();",
      "info" : "ExpressionStatement[40237-40253]:ExpressionStatement[40543-40559]"
    }, {
      "left" : "endPass();",
      "right" : "endPass();",
      "info" : "ExpressionStatement[40258-40268]:ExpressionStatement[40564-40574]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[40276-40285]:MarkerAnnotation[40582-40591]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[40288-40292]:PrimitiveType[40594-40598]"
    }, {
      "left" : "prepareAst",
      "right" : "prepareAst",
      "info" : "SimpleName[40293-40303]:SimpleName[40599-40609]"
    }, {
      "left" : "Node root",
      "right" : "Node root",
      "info" : "SingleVariableDeclaration[40304-40313]:SingleVariableDeclaration[40610-40619]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40315-40479]:Block[40621-40785]"
    }, {
      "left" : "Tracer tracer = newTracer(\"prepareAst\");",
      "right" : "Tracer tracer = newTracer(\"prepareAst\");",
      "info" : "VariableDeclarationStatement[40321-40361]:VariableDeclarationStatement[40627-40667]"
    }, {
      "left" : "CompilerPass pass = new PrepareAst(this);",
      "right" : "CompilerPass pass = new PrepareAst(this);",
      "info" : "VariableDeclarationStatement[40366-40407]:VariableDeclarationStatement[40672-40713]"
    }, {
      "left" : "pass.process(null, root);",
      "right" : "pass.process(null, root);",
      "info" : "ExpressionStatement[40412-40437]:ExpressionStatement[40718-40743]"
    }, {
      "left" : "stopTracer(tracer, \"prepareAst\");",
      "right" : "stopTracer(tracer, \"prepareAst\");",
      "info" : "ExpressionStatement[40442-40475]:ExpressionStatement[40748-40781]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[40483-40487]:PrimitiveType[40789-40793]"
    }, {
      "left" : "recordFunctionInformation",
      "right" : "recordFunctionInformation",
      "info" : "SimpleName[40488-40513]:SimpleName[40794-40819]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40516-40897]:Block[40822-41203]"
    }, {
      "left" : "logger.info(\"Recording function information\");",
      "right" : "logger.info(\"Recording function information\");",
      "info" : "ExpressionStatement[40522-40568]:ExpressionStatement[40828-40874]"
    }, {
      "left" : "startPass(\"recordFunctionInformation\");",
      "right" : "startPass(\"recordFunctionInformation\");",
      "info" : "ExpressionStatement[40573-40612]:ExpressionStatement[40879-40918]"
    }, {
      "left" : "RecordFunctionInformation recordFunctionInfoPass =\n        new RecordFunctionInformation(\n            this, getPassConfig().getIntermediateState().functionNames);",
      "right" : "RecordFunctionInformation recordFunctionInfoPass =\n        new RecordFunctionInformation(\n            this, getPassConfig().getIntermediateState().functionNames);",
      "info" : "VariableDeclarationStatement[40617-40779]:VariableDeclarationStatement[40923-41085]"
    }, {
      "left" : "process(recordFunctionInfoPass);",
      "right" : "process(recordFunctionInfoPass);",
      "info" : "ExpressionStatement[40784-40816]:ExpressionStatement[41090-41122]"
    }, {
      "left" : "functionInformationMap = recordFunctionInfoPass.getMap();",
      "right" : "functionInformationMap = recordFunctionInfoPass.getMap();",
      "info" : "ExpressionStatement[40821-40878]:ExpressionStatement[41127-41184]"
    }, {
      "left" : "endPass();",
      "right" : "endPass();",
      "info" : "ExpressionStatement[40883-40893]:ExpressionStatement[41189-41199]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[41118-41127]:MarkerAnnotation[41424-41433]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[41130-41134]:PrimitiveType[41436-41440]"
    }, {
      "left" : "addChangeHandler",
      "right" : "addChangeHandler",
      "info" : "SimpleName[41135-41151]:SimpleName[41441-41457]"
    }, {
      "left" : "CodeChangeHandler handler",
      "right" : "CodeChangeHandler handler",
      "info" : "SingleVariableDeclaration[41152-41177]:SingleVariableDeclaration[41458-41483]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41179-41221]:Block[41485-41527]"
    }, {
      "left" : "codeChangeHandlers.add(handler);",
      "right" : "codeChangeHandlers.add(handler);",
      "info" : "ExpressionStatement[41185-41217]:ExpressionStatement[41491-41523]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[41225-41234]:MarkerAnnotation[41531-41540]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[41237-41241]:PrimitiveType[41543-41547]"
    }, {
      "left" : "removeChangeHandler",
      "right" : "removeChangeHandler",
      "info" : "SimpleName[41242-41261]:SimpleName[41548-41567]"
    }, {
      "left" : "CodeChangeHandler handler",
      "right" : "CodeChangeHandler handler",
      "info" : "SingleVariableDeclaration[41262-41287]:SingleVariableDeclaration[41568-41593]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41289-41334]:Block[41595-41640]"
    }, {
      "left" : "codeChangeHandlers.remove(handler);",
      "right" : "codeChangeHandlers.remove(handler);",
      "info" : "ExpressionStatement[41295-41330]:ExpressionStatement[41601-41636]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[41529-41538]:MarkerAnnotation[41835-41844]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[41541-41547]:Modifier[41847-41853]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[41548-41552]:PrimitiveType[41854-41858]"
    }, {
      "left" : "reportCodeChange",
      "right" : "reportCodeChange",
      "info" : "SimpleName[41553-41569]:SimpleName[41859-41875]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41572-41672]:Block[41878-41978]"
    }, {
      "left" : "for (CodeChangeHandler handler : codeChangeHandlers)",
      "right" : "for (CodeChangeHandler handler : codeChangeHandlers)",
      "info" : "EnhancedForStatement[41578-41668]:EnhancedForStatement[41884-41974]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41631-41668]:Block[41937-41974]"
    }, {
      "left" : "handler.reportChange();",
      "right" : "handler.reportChange();",
      "info" : "ExpressionStatement[41639-41662]:ExpressionStatement[41945-41968]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[41676-41685]:MarkerAnnotation[41982-41991]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[41688-41694]:Modifier[41994-42000]"
    }, {
      "left" : "CodingConvention",
      "right" : "CodingConvention",
      "info" : "SimpleType[41695-41711]:SimpleType[42001-42017]"
    }, {
      "left" : "getCodingConvention",
      "right" : "getCodingConvention",
      "info" : "SimpleName[41712-41731]:SimpleName[42018-42037]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41734-41903]:Block[42040-42209]"
    }, {
      "left" : "CodingConvention convention = options.getCodingConvention();",
      "right" : "CodingConvention convention = options.getCodingConvention();",
      "info" : "VariableDeclarationStatement[41740-41800]:VariableDeclarationStatement[42046-42106]"
    }, {
      "left" : "convention = convention != null ? convention : defaultCodingConvention;",
      "right" : "convention = convention != null ? convention : defaultCodingConvention;",
      "info" : "ExpressionStatement[41805-41876]:ExpressionStatement[42111-42182]"
    }, {
      "left" : "return convention;",
      "right" : "return convention;",
      "info" : "ReturnStatement[41881-41899]:ReturnStatement[42187-42205]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[41907-41916]:MarkerAnnotation[42213-42222]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[41919-41925]:Modifier[42225-42231]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[41926-41933]:PrimitiveType[42232-42239]"
    }, {
      "left" : "isIdeMode",
      "right" : "isIdeMode",
      "info" : "SimpleName[41934-41943]:SimpleName[42240-42249]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41946-41979]:Block[42252-42285]"
    }, {
      "left" : "return options.ideMode;",
      "right" : "return options.ideMode;",
      "info" : "ReturnStatement[41952-41975]:ReturnStatement[42258-42281]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[41983-41992]:MarkerAnnotation[42289-42298]"
    }, {
      "left" : "Config",
      "right" : "Config",
      "info" : "SimpleType[41995-42001]:SimpleType[42301-42307]"
    }, {
      "left" : "getParserConfig",
      "right" : "getParserConfig",
      "info" : "SimpleName[42002-42017]:SimpleName[42308-42323]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42020-42179]:Block[42326-42485]"
    }, {
      "left" : "if (parserConfig == null)",
      "right" : "if (parserConfig == null)",
      "info" : "IfStatement[42026-42150]:IfStatement[42332-42456]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42052-42150]:Block[42358-42456]"
    }, {
      "left" : "parserConfig = ParserRunner.createConfig(\n          getTypeRegistry(), isIdeMode());",
      "right" : "parserConfig = ParserRunner.createConfig(\n          getTypeRegistry(), isIdeMode());",
      "info" : "ExpressionStatement[42060-42144]:ExpressionStatement[42366-42450]"
    }, {
      "left" : "return parserConfig;",
      "right" : "return parserConfig;",
      "info" : "ReturnStatement[42155-42175]:ReturnStatement[42461-42481]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[42183-42192]:MarkerAnnotation[42489-42498]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[42195-42201]:Modifier[42501-42507]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[42202-42209]:PrimitiveType[42508-42515]"
    }, {
      "left" : "isTypeCheckingEnabled",
      "right" : "isTypeCheckingEnabled",
      "info" : "SimpleName[42210-42231]:SimpleName[42516-42537]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42234-42270]:Block[42540-42576]"
    }, {
      "left" : "return options.checkTypes;",
      "right" : "return options.checkTypes;",
      "info" : "ReturnStatement[42240-42266]:ReturnStatement[42546-42572]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[42451-42460]:MarkerAnnotation[42757-42766]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[42463-42469]:Modifier[42769-42775]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[42470-42474]:PrimitiveType[42776-42780]"
    }, {
      "left" : "report",
      "right" : "report",
      "info" : "SimpleName[42475-42481]:SimpleName[42781-42787]"
    }, {
      "left" : "JSError error",
      "right" : "JSError error",
      "info" : "SingleVariableDeclaration[42482-42495]:SingleVariableDeclaration[42788-42801]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42497-42807]:Block[42803-43113]"
    }, {
      "left" : "CheckLevel level = error.level;",
      "right" : "CheckLevel level = error.level;",
      "info" : "VariableDeclarationStatement[42503-42534]:VariableDeclarationStatement[42809-42840]"
    }, {
      "left" : "WarningsGuard guard = options.getWarningsGuard();",
      "right" : "WarningsGuard guard = options.getWarningsGuard();",
      "info" : "VariableDeclarationStatement[42539-42588]:VariableDeclarationStatement[42845-42894]"
    }, {
      "left" : "if (guard != null)",
      "right" : "if (guard != null)",
      "info" : "IfStatement[42593-42731]:IfStatement[42899-43037]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42612-42731]:Block[42918-43037]"
    }, {
      "left" : "CheckLevel newLevel = guard.level(error);",
      "right" : "CheckLevel newLevel = guard.level(error);",
      "info" : "VariableDeclarationStatement[42620-42661]:VariableDeclarationStatement[42926-42967]"
    }, {
      "left" : "if (newLevel != null)",
      "right" : "if (newLevel != null)",
      "info" : "IfStatement[42668-42725]:IfStatement[42974-43031]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42690-42725]:Block[42996-43031]"
    }, {
      "left" : "level = newLevel;",
      "right" : "level = newLevel;",
      "info" : "ExpressionStatement[42700-42717]:ExpressionStatement[43006-43023]"
    }, {
      "left" : "if (level.isOn())",
      "right" : "if (level.isOn())",
      "info" : "IfStatement[42737-42803]:IfStatement[43043-43109]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42755-42803]:Block[43061-43109]"
    }, {
      "left" : "errorManager.report(level, error);",
      "right" : "errorManager.report(level, error);",
      "info" : "ExpressionStatement[42763-42797]:ExpressionStatement[43069-43103]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[42854-42863]:MarkerAnnotation[43160-43169]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[42866-42870]:PrimitiveType[43172-43176]"
    }, {
      "left" : "throwInternalError",
      "right" : "throwInternalError",
      "info" : "SimpleName[42871-42889]:SimpleName[43177-43195]"
    }, {
      "left" : "String message",
      "right" : "String message",
      "info" : "SingleVariableDeclaration[42890-42904]:SingleVariableDeclaration[43196-43210]"
    }, {
      "left" : "Exception cause",
      "right" : "Exception cause",
      "info" : "SingleVariableDeclaration[42906-42921]:SingleVariableDeclaration[43212-43227]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42923-43199]:Block[43229-43505]"
    }, {
      "left" : "String finalMessage =\n      \"INTERNAL COMPILER ERROR.\\n\" +\n      \"Please report this problem.\\n\" + message;",
      "right" : "String finalMessage =\n      \"INTERNAL COMPILER ERROR.\\n\" +\n      \"Please report this problem.\\n\" + message;",
      "info" : "VariableDeclarationStatement[42929-43036]:VariableDeclarationStatement[43235-43342]"
    }, {
      "left" : "RuntimeException e = new RuntimeException(finalMessage, cause);",
      "right" : "RuntimeException e = new RuntimeException(finalMessage, cause);",
      "info" : "VariableDeclarationStatement[43042-43105]:VariableDeclarationStatement[43348-43411]"
    }, {
      "left" : "if (cause != null)",
      "right" : "if (cause != null)",
      "info" : "IfStatement[43110-43182]:IfStatement[43416-43488]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43129-43182]:Block[43435-43488]"
    }, {
      "left" : "e.setStackTrace(cause.getStackTrace());",
      "right" : "e.setStackTrace(cause.getStackTrace());",
      "info" : "ExpressionStatement[43137-43176]:ExpressionStatement[43443-43482]"
    }, {
      "left" : "throw e;",
      "right" : "throw e;",
      "info" : "ThrowStatement[43187-43195]:ThrowStatement[43493-43501]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[43248-43254]:Modifier[43554-43560]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[43255-43258]:PrimitiveType[43561-43564]"
    }, {
      "left" : "getErrorCount",
      "right" : "getErrorCount",
      "info" : "SimpleName[43259-43272]:SimpleName[43565-43578]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43275-43321]:Block[43581-43627]"
    }, {
      "left" : "return errorManager.getErrorCount();",
      "right" : "return errorManager.getErrorCount();",
      "info" : "ReturnStatement[43281-43317]:ReturnStatement[43587-43623]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[43371-43377]:Modifier[43677-43683]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[43378-43381]:PrimitiveType[43684-43687]"
    }, {
      "left" : "getWarningCount",
      "right" : "getWarningCount",
      "info" : "SimpleName[43382-43397]:SimpleName[43688-43703]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43400-43448]:Block[43706-43754]"
    }, {
      "left" : "return errorManager.getWarningCount();",
      "right" : "return errorManager.getWarningCount();",
      "info" : "ReturnStatement[43406-43444]:ReturnStatement[43712-43750]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[43452-43461]:MarkerAnnotation[43758-43767]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[43464-43471]:PrimitiveType[43770-43777]"
    }, {
      "left" : "hasHaltingErrors",
      "right" : "hasHaltingErrors",
      "info" : "SimpleName[43472-43488]:SimpleName[43778-43794]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43491-43544]:Block[43797-43850]"
    }, {
      "left" : "return !isIdeMode() && getErrorCount() > 0;",
      "right" : "return !isIdeMode() && getErrorCount() > 0;",
      "info" : "ReturnStatement[43497-43540]:ReturnStatement[43803-43846]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[43966-43972]:Modifier[44272-44278]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[43973-43980]:PrimitiveType[44279-44286]"
    }, {
      "left" : "hasErrors",
      "right" : "hasErrors",
      "info" : "SimpleName[43981-43990]:SimpleName[44287-44296]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43993-44029]:Block[44299-44335]"
    }, {
      "left" : "return hasHaltingErrors();",
      "right" : "return hasHaltingErrors();",
      "info" : "ReturnStatement[43999-44025]:ReturnStatement[44305-44331]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[44091-44100]:MarkerAnnotation[44397-44406]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[44103-44107]:PrimitiveType[44409-44413]"
    }, {
      "left" : "addToDebugLog",
      "right" : "addToDebugLog",
      "info" : "SimpleName[44108-44121]:SimpleName[44414-44427]"
    }, {
      "left" : "String str",
      "right" : "String str",
      "info" : "SingleVariableDeclaration[44122-44132]:SingleVariableDeclaration[44428-44438]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44134-44214]:Block[44440-44520]"
    }, {
      "left" : "debugLog.append(str);",
      "right" : "debugLog.append(str);",
      "info" : "ExpressionStatement[44140-44161]:ExpressionStatement[44446-44467]"
    }, {
      "left" : "debugLog.append('\\n');",
      "right" : "debugLog.append('\\n');",
      "info" : "ExpressionStatement[44166-44188]:ExpressionStatement[44472-44494]"
    }, {
      "left" : "logger.fine(str);",
      "right" : "logger.fine(str);",
      "info" : "ExpressionStatement[44193-44210]:ExpressionStatement[44499-44516]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[44218-44225]:Modifier[44524-44531]"
    }, {
      "left" : "SourceFile",
      "right" : "SourceFile",
      "info" : "SimpleType[44226-44236]:SimpleType[44532-44542]"
    }, {
      "left" : "getSourceFileByName",
      "right" : "getSourceFileByName",
      "info" : "SimpleName[44237-44256]:SimpleName[44543-44562]"
    }, {
      "left" : "String sourceName",
      "right" : "String sourceName",
      "info" : "SingleVariableDeclaration[44257-44274]:SingleVariableDeclaration[44563-44580]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44276-44411]:Block[44582-44717]"
    }, {
      "left" : "if (inputsByName.containsKey(sourceName))",
      "right" : "if (inputsByName.containsKey(sourceName))",
      "info" : "IfStatement[44282-44390]:IfStatement[44588-44696]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44324-44390]:Block[44630-44696]"
    }, {
      "left" : "return inputsByName.get(sourceName).getSourceFile();",
      "right" : "return inputsByName.get(sourceName).getSourceFile();",
      "info" : "ReturnStatement[44332-44384]:ReturnStatement[44638-44690]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[44395-44407]:ReturnStatement[44701-44713]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[44415-44421]:Modifier[44721-44727]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[44422-44428]:SimpleType[44728-44734]"
    }, {
      "left" : "getSourceLine",
      "right" : "getSourceLine",
      "info" : "SimpleName[44429-44442]:SimpleName[44735-44748]"
    }, {
      "left" : "String sourceName",
      "right" : "String sourceName",
      "info" : "SingleVariableDeclaration[44443-44460]:SingleVariableDeclaration[44749-44766]"
    }, {
      "left" : "int lineNumber",
      "right" : "int lineNumber",
      "info" : "SingleVariableDeclaration[44462-44476]:SingleVariableDeclaration[44768-44782]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44478-44678]:Block[44784-44984]"
    }, {
      "left" : "if (lineNumber < 1)",
      "right" : "if (lineNumber < 1)",
      "info" : "IfStatement[44484-44530]:IfStatement[44790-44836]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44504-44530]:Block[44810-44836]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[44512-44524]:ReturnStatement[44818-44830]"
    }, {
      "left" : "SourceFile input = getSourceFileByName(sourceName);",
      "right" : "SourceFile input = getSourceFileByName(sourceName);",
      "info" : "VariableDeclarationStatement[44535-44586]:VariableDeclarationStatement[44841-44892]"
    }, {
      "left" : "if (input != null)",
      "right" : "if (input != null)",
      "info" : "IfStatement[44591-44657]:IfStatement[44897-44963]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44610-44657]:Block[44916-44963]"
    }, {
      "left" : "return input.getLine(lineNumber);",
      "right" : "return input.getLine(lineNumber);",
      "info" : "ReturnStatement[44618-44651]:ReturnStatement[44924-44957]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[44662-44674]:ReturnStatement[44968-44980]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[44682-44688]:Modifier[44988-44994]"
    }, {
      "left" : "Region",
      "right" : "Region",
      "info" : "SimpleType[44689-44695]:SimpleType[44995-45001]"
    }, {
      "left" : "getSourceRegion",
      "right" : "getSourceRegion",
      "info" : "SimpleName[44696-44711]:SimpleName[45002-45017]"
    }, {
      "left" : "String sourceName",
      "right" : "String sourceName",
      "info" : "SingleVariableDeclaration[44712-44729]:SingleVariableDeclaration[45018-45035]"
    }, {
      "left" : "int lineNumber",
      "right" : "int lineNumber",
      "info" : "SingleVariableDeclaration[44731-44745]:SingleVariableDeclaration[45037-45051]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44747-44949]:Block[45053-45255]"
    }, {
      "left" : "if (lineNumber < 1)",
      "right" : "if (lineNumber < 1)",
      "info" : "IfStatement[44753-44799]:IfStatement[45059-45105]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44773-44799]:Block[45079-45105]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[44781-44793]:ReturnStatement[45087-45099]"
    }, {
      "left" : "SourceFile input = getSourceFileByName(sourceName);",
      "right" : "SourceFile input = getSourceFileByName(sourceName);",
      "info" : "VariableDeclarationStatement[44804-44855]:VariableDeclarationStatement[45110-45161]"
    }, {
      "left" : "if (input != null)",
      "right" : "if (input != null)",
      "info" : "IfStatement[44860-44928]:IfStatement[45166-45234]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44879-44928]:Block[45185-45234]"
    }, {
      "left" : "return input.getRegion(lineNumber);",
      "right" : "return input.getRegion(lineNumber);",
      "info" : "ReturnStatement[44887-44922]:ReturnStatement[45193-45228]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[44933-44945]:ReturnStatement[45239-45251]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[45137-45146]:MarkerAnnotation[45443-45452]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[45149-45153]:SimpleType[45455-45459]"
    }, {
      "left" : "getNodeForCodeInsertion",
      "right" : "getNodeForCodeInsertion",
      "info" : "SimpleName[45154-45177]:SimpleName[45460-45483]"
    }, {
      "left" : "JSModule module",
      "right" : "JSModule module",
      "info" : "SingleVariableDeclaration[45178-45193]:SingleVariableDeclaration[45484-45499]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45195-45770]:Block[45501-45874]"
    }, {
      "left" : "if (module == null)",
      "right" : "if (module == null)",
      "info" : "IfStatement[45201-45364]:IfStatement[45507-45670]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45221-45364]:Block[45527-45670]"
    }, {
      "left" : "if (inputs.length == 0)",
      "right" : "if (inputs.length == 0)",
      "info" : "IfStatement[45229-45316]:IfStatement[45535-45622]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45253-45316]:Block[45559-45622]"
    }, {
      "left" : "throw new IllegalStateException(\"No inputs\");",
      "right" : "throw new IllegalStateException(\"No inputs\");",
      "info" : "ThrowStatement[45263-45308]:ThrowStatement[45569-45614]"
    }, {
      "left" : "return inputs[0].getAstRoot(this);",
      "right" : "return inputs[0].getAstRoot(this);",
      "info" : "ReturnStatement[45324-45358]:ReturnStatement[45630-45664]"
    }, {
      "left" : "List<CompilerInput> inputs = module.getInputs();",
      "right" : "List<CompilerInput> inputs = module.getInputs();",
      "info" : "VariableDeclarationStatement[45370-45418]:VariableDeclarationStatement[45676-45724]"
    }, {
      "left" : "if (inputs.size() > 0)",
      "right" : "if (inputs.size() > 0)",
      "info" : "IfStatement[45423-45498]:IfStatement[45729-45804]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45446-45498]:Block[45752-45804]"
    }, {
      "left" : "return inputs.get(0).getAstRoot(this);",
      "right" : "return inputs.get(0).getAstRoot(this);",
      "info" : "ReturnStatement[45454-45492]:ReturnStatement[45760-45798]"
    }, {
      "left" : "JSModule",
      "right" : "JSModule",
      "info" : "SimpleType[45508-45516]:SimpleType[10142-10150]"
    }, {
      "left" : "throw new IllegalStateException(\"Root module has no inputs\");",
      "right" : "throw new IllegalStateException(\"Root module has no inputs\");",
      "info" : "ThrowStatement[45705-45766]:ThrowStatement[45809-45870]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[45774-45780]:Modifier[45878-45884]"
    }, {
      "left" : "SourceMap",
      "right" : "SourceMap",
      "info" : "SimpleType[45781-45790]:SimpleType[45885-45894]"
    }, {
      "left" : "getSourceMap",
      "right" : "getSourceMap",
      "info" : "SimpleName[45791-45803]:SimpleName[45895-45907]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45806-45833]:Block[45910-45937]"
    }, {
      "left" : "return sourceMap;",
      "right" : "return sourceMap;",
      "info" : "ReturnStatement[45812-45829]:ReturnStatement[45916-45933]"
    }, {
      "left" : "VariableMap",
      "right" : "VariableMap",
      "info" : "SimpleType[45837-45848]:SimpleType[45941-45952]"
    }, {
      "left" : "getVariableMap",
      "right" : "getVariableMap",
      "info" : "SimpleName[45849-45863]:SimpleName[45953-45967]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45866-45934]:Block[45970-46038]"
    }, {
      "left" : "return getPassConfig().getIntermediateState().variableMap;",
      "right" : "return getPassConfig().getIntermediateState().variableMap;",
      "info" : "ReturnStatement[45872-45930]:ReturnStatement[45976-46034]"
    }, {
      "left" : "VariableMap",
      "right" : "VariableMap",
      "info" : "SimpleType[45938-45949]:SimpleType[46042-46053]"
    }, {
      "left" : "getPropertyMap",
      "right" : "getPropertyMap",
      "info" : "SimpleName[45950-45964]:SimpleName[46054-46068]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45967-46035]:Block[46071-46139]"
    }, {
      "left" : "return getPassConfig().getIntermediateState().propertyMap;",
      "right" : "return getPassConfig().getIntermediateState().propertyMap;",
      "info" : "ReturnStatement[45973-46031]:ReturnStatement[46077-46135]"
    }, {
      "left" : "CompilerOptions",
      "right" : "CompilerOptions",
      "info" : "SimpleType[46039-46054]:SimpleType[46143-46158]"
    }, {
      "left" : "getOptions",
      "right" : "getOptions",
      "info" : "SimpleName[46055-46065]:SimpleName[46159-46169]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46068-46093]:Block[46172-46197]"
    }, {
      "left" : "return options;",
      "right" : "return options;",
      "info" : "ReturnStatement[46074-46089]:ReturnStatement[46178-46193]"
    }, {
      "left" : "FunctionInformationMap",
      "right" : "FunctionInformationMap",
      "info" : "SimpleType[46097-46119]:SimpleType[46201-46223]"
    }, {
      "left" : "getFunctionalInformationMap",
      "right" : "getFunctionalInformationMap",
      "info" : "SimpleName[46120-46147]:SimpleName[46224-46251]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46150-46190]:Block[46254-46294]"
    }, {
      "left" : "return functionInformationMap;",
      "right" : "return functionInformationMap;",
      "info" : "ReturnStatement[46156-46186]:ReturnStatement[46260-46290]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[46280-46286]:Modifier[46384-46390]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[46287-46293]:Modifier[46391-46397]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[46294-46298]:PrimitiveType[46398-46402]"
    }, {
      "left" : "setLoggingLevel",
      "right" : "setLoggingLevel",
      "info" : "SimpleName[46299-46314]:SimpleName[46403-46418]"
    }, {
      "left" : "Level level",
      "right" : "Level level",
      "info" : "SingleVariableDeclaration[46315-46326]:SingleVariableDeclaration[46419-46430]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46328-46361]:Block[46432-46465]"
    }, {
      "left" : "logger.setLevel(level);",
      "right" : "logger.setLevel(level);",
      "info" : "ExpressionStatement[46334-46357]:ExpressionStatement[46438-46461]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[46441-46447]:Modifier[46545-46551]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[46448-46454]:SimpleType[46552-46558]"
    }, {
      "left" : "getAstDotGraph",
      "right" : "getAstDotGraph",
      "info" : "SimpleName[46455-46469]:SimpleName[46559-46573]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[46479-46490]:SimpleType[46583-46594]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46491-46715]:Block[46595-46819]"
    }, {
      "left" : "if (jsRoot != null)",
      "right" : "if (jsRoot != null)",
      "info" : "IfStatement[46497-46711]:IfStatement[46601-46815]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46517-46681]:Block[46621-46785]"
    }, {
      "left" : "ControlFlowAnalysis cfa = new ControlFlowAnalysis(this, true);",
      "right" : "ControlFlowAnalysis cfa = new ControlFlowAnalysis(this, true);",
      "info" : "VariableDeclarationStatement[46525-46587]:VariableDeclarationStatement[46629-46691]"
    }, {
      "left" : "cfa.process(null, jsRoot);",
      "right" : "cfa.process(null, jsRoot);",
      "info" : "ExpressionStatement[46594-46620]:ExpressionStatement[46698-46724]"
    }, {
      "left" : "return DotFormatter.toDot(jsRoot, cfa.getCfg());",
      "right" : "return DotFormatter.toDot(jsRoot, cfa.getCfg());",
      "info" : "ReturnStatement[46627-46675]:ReturnStatement[46731-46779]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46687-46711]:Block[46791-46815]"
    }, {
      "left" : "return \"\";",
      "right" : "return \"\";",
      "info" : "ReturnStatement[46695-46705]:ReturnStatement[46799-46809]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[46719-46728]:MarkerAnnotation[46823-46832]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[46731-46737]:Modifier[46835-46841]"
    }, {
      "left" : "ErrorManager",
      "right" : "ErrorManager",
      "info" : "SimpleType[46738-46750]:SimpleType[46842-46854]"
    }, {
      "left" : "getErrorManager",
      "right" : "getErrorManager",
      "info" : "SimpleName[46751-46766]:SimpleName[46855-46870]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46769-46874]:Block[46873-46978]"
    }, {
      "left" : "if (options == null)",
      "right" : "if (options == null)",
      "info" : "IfStatement[46775-46845]:IfStatement[46879-46949]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46796-46845]:Block[46900-46949]"
    }, {
      "left" : "initOptions(new CompilerOptions());",
      "right" : "initOptions(new CompilerOptions());",
      "info" : "ExpressionStatement[46804-46839]:ExpressionStatement[46908-46943]"
    }, {
      "left" : "return errorManager;",
      "right" : "return errorManager;",
      "info" : "ReturnStatement[46850-46870]:ReturnStatement[46954-46974]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[47476-47482]:Modifier[47580-47586]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[47483-47489]:Modifier[47587-47593]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[47490-47495]:TYPE_DECLARATION_KIND[47594-47599]"
    }, {
      "left" : "IntermediateState",
      "right" : "IntermediateState",
      "info" : "SimpleName[47496-47513]:SimpleName[47600-47617]"
    }, {
      "left" : "Serializable",
      "right" : "Serializable",
      "info" : "SimpleType[47525-47537]:SimpleType[47629-47641]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[47870-47877]:Modifier[47974-47981]"
    }, {
      "left" : "IntermediateState",
      "right" : "IntermediateState",
      "info" : "SimpleName[47878-47895]:SimpleName[47982-47999]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47898-47900]:Block[48002-48004]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[48000-48006]:Modifier[48104-48110]"
    }, {
      "left" : "IntermediateState",
      "right" : "IntermediateState",
      "info" : "SimpleType[48007-48024]:SimpleType[48111-48128]"
    }, {
      "left" : "getState",
      "right" : "getState",
      "info" : "SimpleName[48025-48033]:SimpleName[48129-48137]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48036-48406]:Block[48140-48510]"
    }, {
      "left" : "IntermediateState state = new IntermediateState();",
      "right" : "IntermediateState state = new IntermediateState();",
      "info" : "VariableDeclarationStatement[48042-48092]:VariableDeclarationStatement[48146-48196]"
    }, {
      "left" : "state.externsRoot = externsRoot;",
      "right" : "state.externsRoot = externsRoot;",
      "info" : "ExpressionStatement[48097-48129]:ExpressionStatement[48201-48233]"
    }, {
      "left" : "state.jsRoot = jsRoot;",
      "right" : "state.jsRoot = jsRoot;",
      "info" : "ExpressionStatement[48134-48156]:ExpressionStatement[48238-48260]"
    }, {
      "left" : "state.externs = externs;",
      "right" : "state.externs = externs;",
      "info" : "ExpressionStatement[48161-48185]:ExpressionStatement[48265-48289]"
    }, {
      "left" : "state.inputs = inputs;",
      "right" : "state.inputs = inputs;",
      "info" : "ExpressionStatement[48190-48212]:ExpressionStatement[48294-48316]"
    }, {
      "left" : "state.modules = modules;",
      "right" : "state.modules = modules;",
      "info" : "ExpressionStatement[48217-48241]:ExpressionStatement[48321-48345]"
    }, {
      "left" : "state.passConfigState = getPassConfig().getIntermediateState();",
      "right" : "state.passConfigState = getPassConfig().getIntermediateState();",
      "info" : "ExpressionStatement[48246-48309]:ExpressionStatement[48350-48413]"
    }, {
      "left" : "state.typeRegistry = typeRegistry;",
      "right" : "state.typeRegistry = typeRegistry;",
      "info" : "ExpressionStatement[48314-48348]:ExpressionStatement[48418-48452]"
    }, {
      "left" : "state.normalized = normalized;",
      "right" : "state.normalized = normalized;",
      "info" : "ExpressionStatement[48353-48383]:ExpressionStatement[48457-48487]"
    }, {
      "left" : "return state;",
      "right" : "return state;",
      "info" : "ReturnStatement[48389-48402]:ReturnStatement[48493-48506]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[48543-48549]:Modifier[48647-48653]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[48550-48554]:PrimitiveType[48654-48658]"
    }, {
      "left" : "setState",
      "right" : "setState",
      "info" : "SimpleName[48555-48563]:SimpleName[48659-48667]"
    }, {
      "left" : "IntermediateState state",
      "right" : "IntermediateState state",
      "info" : "SingleVariableDeclaration[48564-48587]:SingleVariableDeclaration[48668-48691]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48589-48923]:Block[48693-49027]"
    }, {
      "left" : "externsRoot = state.externsRoot;",
      "right" : "externsRoot = state.externsRoot;",
      "info" : "ExpressionStatement[48595-48627]:ExpressionStatement[48699-48731]"
    }, {
      "left" : "jsRoot = state.jsRoot;",
      "right" : "jsRoot = state.jsRoot;",
      "info" : "ExpressionStatement[48632-48654]:ExpressionStatement[48736-48758]"
    }, {
      "left" : "externs = state.externs;",
      "right" : "externs = state.externs;",
      "info" : "ExpressionStatement[48659-48683]:ExpressionStatement[48763-48787]"
    }, {
      "left" : "inputs = state.inputs;",
      "right" : "inputs = state.inputs;",
      "info" : "ExpressionStatement[48688-48710]:ExpressionStatement[48792-48814]"
    }, {
      "left" : "modules = state.modules;",
      "right" : "modules = state.modules;",
      "info" : "ExpressionStatement[48715-48739]:ExpressionStatement[48819-48843]"
    }, {
      "left" : "passes = createPassConfigInternal();",
      "right" : "passes = createPassConfigInternal();",
      "info" : "ExpressionStatement[48744-48780]:ExpressionStatement[48848-48884]"
    }, {
      "left" : "getPassConfig().setIntermediateState(state.passConfigState);",
      "right" : "getPassConfig().setIntermediateState(state.passConfigState);",
      "info" : "ExpressionStatement[48785-48845]:ExpressionStatement[48889-48949]"
    }, {
      "left" : "typeRegistry = state.typeRegistry;",
      "right" : "typeRegistry = state.typeRegistry;",
      "info" : "ExpressionStatement[48850-48884]:ExpressionStatement[48954-48988]"
    }, {
      "left" : "normalized = state.normalized;",
      "right" : "normalized = state.normalized;",
      "info" : "ExpressionStatement[48889-48919]:ExpressionStatement[48993-49023]"
    } ]
  },
  "interFileMappings" : { }
}