{
  "matchedElements" : [
 {
    "left" : "class : VcapApplicationListener",
    "right" : "class : VcapApplicationListener",
    "info" : "TypeDeclaration[1621-8987]:TypeDeclaration[1621-9000]"
  }, {
    "left" : "logger",
    "right" : "logger",
    "info" : "FieldDeclaration[4437-4520]:FieldDeclaration[4437-4520]"
  }, {
    "left" : "VCAP_APPLICATION",
    "right" : "VCAP_APPLICATION",
    "info" : "FieldDeclaration[4523-4589]:FieldDeclaration[4523-4589]"
  }, {
    "left" : "VCAP_SERVICES",
    "right" : "VCAP_SERVICES",
    "info" : "FieldDeclaration[4592-4652]:FieldDeclaration[4592-4652]"
  }, {
    "left" : "order",
    "right" : "order",
    "info" : "FieldDeclaration[4731-4799]:FieldDeclaration[4731-4799]"
  }, {
    "left" : "parser",
    "right" : "parser",
    "info" : "FieldDeclaration[4802-4870]:FieldDeclaration[4802-4870]"
  }, {
    "left" : "public setOrder(order int) : void",
    "right" : "public setOrder(order int) : void",
    "info" : "MethodDeclaration[4873-4931]:MethodDeclaration[4873-4931]"
  }, {
    "left" : "public getOrder() : int",
    "right" : "public getOrder() : int",
    "info" : "MethodDeclaration[4934-4992]:MethodDeclaration[4934-4992]"
  }, {
    "left" : "public onApplicationEvent(event ) : void",
    "right" : "public onApplicationEvent(event ) : void",
    "info" : "MethodDeclaration[4995-5928]:MethodDeclaration[4995-5928]"
  }, {
    "left" : "private addWithPrefix(properties , other , prefix ) : void",
    "right" : "private addWithPrefix(properties , other , prefix ) : void",
    "info" : "MethodDeclaration[5931-6169]:MethodDeclaration[5931-6169]"
  }, {
    "left" : "private getPropertiesFromApplication(environment ) : ",
    "right" : "private getPropertiesFromApplication(environment ) : ",
    "info" : "MethodDeclaration[6172-6572]:MethodDeclaration[6172-6572]"
  }, {
    "left" : "private getPropertiesFromServices(environment ) : ",
    "right" : "private getPropertiesFromServices(environment ) : ",
    "info" : "MethodDeclaration[6575-6963]:MethodDeclaration[6575-6963]"
  }, {
    "left" : "private extractPropertiesFromApplication(properties , map ) : void",
    "right" : "private extractPropertiesFromApplication(properties , map ) : void",
    "info" : "MethodDeclaration[6966-7125]:MethodDeclaration[6966-7125]"
  }, {
    "left" : "private extractPropertiesFromServices(properties , map ) : void",
    "right" : "private extractPropertiesFromServices(properties , map ) : void",
    "info" : "MethodDeclaration[7128-7684]:MethodDeclaration[7128-7684]"
  }, {
    "left" : "private flatten(properties , input , path ) : void",
    "right" : "private flatten(properties , input , path ) : void",
    "info" : "MethodDeclaration[7687-8984]:MethodDeclaration[7687-8802]"
  } ],
  "mappings" : [
 {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[4317-4323]:Modifier[4317-4323]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[4324-4329]:TYPE_DECLARATION_KIND[4324-4329]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[4873-4879]:Modifier[4873-4879]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[4880-4884]:PrimitiveType[4880-4884]"
  }, {
    "left" : "setOrder",
    "right" : "setOrder",
    "info" : "SimpleName[4885-4893]:SimpleName[4885-4893]"
  }, {
    "left" : "int order",
    "right" : "int order",
    "info" : "SingleVariableDeclaration[4894-4903]:SingleVariableDeclaration[4894-4903]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4905-4931]:Block[4905-4931]"
  }, {
    "left" : "this.order = order;",
    "right" : "this.order = order;",
    "info" : "ExpressionStatement[4909-4928]:ExpressionStatement[4909-4928]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[4934-4943]:MarkerAnnotation[4934-4943]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[4945-4951]:Modifier[4945-4951]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[4952-4955]:PrimitiveType[4952-4955]"
  }, {
    "left" : "getOrder",
    "right" : "getOrder",
    "info" : "SimpleName[4956-4964]:SimpleName[4956-4964]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4967-4992]:Block[4967-4992]"
  }, {
    "left" : "return this.order;",
    "right" : "return this.order;",
    "info" : "ReturnStatement[4971-4989]:ReturnStatement[4971-4989]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[4995-5004]:MarkerAnnotation[4995-5004]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[5006-5012]:Modifier[5006-5012]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[5013-5017]:PrimitiveType[5013-5017]"
  }, {
    "left" : "onApplicationEvent",
    "right" : "onApplicationEvent",
    "info" : "SimpleName[5018-5036]:SimpleName[5018-5036]"
  }, {
    "left" : "ApplicationEnvironmentPreparedEvent event",
    "right" : "ApplicationEnvironmentPreparedEvent event",
    "info" : "SingleVariableDeclaration[5037-5078]:SingleVariableDeclaration[5037-5078]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5080-5928]:Block[5080-5928]"
  }, {
    "left" : "ConfigurableEnvironment environment = event.getEnvironment();",
    "right" : "ConfigurableEnvironment environment = event.getEnvironment();",
    "info" : "VariableDeclarationStatement[5084-5145]:VariableDeclarationStatement[5084-5145]"
  }, {
    "left" : "if (!environment.containsProperty(VCAP_APPLICATION)\n\t\t\t\t&& !environment.containsProperty(VCAP_SERVICES))",
    "right" : "if (!environment.containsProperty(VCAP_APPLICATION)\n\t\t\t\t&& !environment.containsProperty(VCAP_SERVICES))",
    "info" : "IfStatement[5148-5269]:IfStatement[5148-5269]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5253-5269]:Block[5253-5269]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[5258-5265]:ReturnStatement[5258-5265]"
  }, {
    "left" : "Properties properties = new Properties();",
    "right" : "Properties properties = new Properties();",
    "info" : "VariableDeclarationStatement[5272-5313]:VariableDeclarationStatement[5272-5313]"
  }, {
    "left" : "addWithPrefix(properties, getPropertiesFromApplication(environment),\n\t\t\t\t\"vcap.application.\");",
    "right" : "addWithPrefix(properties, getPropertiesFromApplication(environment),\n\t\t\t\t\"vcap.application.\");",
    "info" : "ExpressionStatement[5316-5410]:ExpressionStatement[5316-5410]"
  }, {
    "left" : "addWithPrefix(properties, getPropertiesFromServices(environment),\n\t\t\t\t\"vcap.services.\");",
    "right" : "addWithPrefix(properties, getPropertiesFromServices(environment),\n\t\t\t\t\"vcap.services.\");",
    "info" : "ExpressionStatement[5413-5501]:ExpressionStatement[5413-5501]"
  }, {
    "left" : "MutablePropertySources propertySources = environment.getPropertySources();",
    "right" : "MutablePropertySources propertySources = environment.getPropertySources();",
    "info" : "VariableDeclarationStatement[5504-5578]:VariableDeclarationStatement[5504-5578]"
  }, {
    "left" : "if (propertySources\n\t\t\t\t.contains(CommandLinePropertySource.COMMAND_LINE_PROPERTY_SOURCE_NAME))",
    "right" : "if (propertySources\n\t\t\t\t.contains(CommandLinePropertySource.COMMAND_LINE_PROPERTY_SOURCE_NAME))",
    "info" : "IfStatement[5581-5925]:IfStatement[5581-5925]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5677-5833]:Block[5677-5833]"
  }, {
    "left" : "propertySources.addAfter(\n\t\t\t\t\tCommandLinePropertySource.COMMAND_LINE_PROPERTY_SOURCE_NAME,\n\t\t\t\t\tnew PropertiesPropertySource(\"vcap\", properties));",
    "right" : "propertySources.addAfter(\n\t\t\t\t\tCommandLinePropertySource.COMMAND_LINE_PROPERTY_SOURCE_NAME,\n\t\t\t\t\tnew PropertiesPropertySource(\"vcap\", properties));",
    "info" : "ExpressionStatement[5682-5829]:ExpressionStatement[5682-5829]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5841-5925]:Block[5841-5925]"
  }, {
    "left" : "propertySources.addFirst(new PropertiesPropertySource(\"vcap\", properties));",
    "right" : "propertySources.addFirst(new PropertiesPropertySource(\"vcap\", properties));",
    "info" : "ExpressionStatement[5846-5921]:ExpressionStatement[5846-5921]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[5931-5938]:Modifier[5931-5938]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[5939-5943]:PrimitiveType[5939-5943]"
  }, {
    "left" : "addWithPrefix",
    "right" : "addWithPrefix",
    "info" : "SimpleName[5944-5957]:SimpleName[5944-5957]"
  }, {
    "left" : "Properties properties",
    "right" : "Properties properties",
    "info" : "SingleVariableDeclaration[5958-5979]:SingleVariableDeclaration[5958-5979]"
  }, {
    "left" : "Properties other",
    "right" : "Properties other",
    "info" : "SingleVariableDeclaration[5981-5997]:SingleVariableDeclaration[5981-5997]"
  }, {
    "left" : "String prefix",
    "right" : "String prefix",
    "info" : "SingleVariableDeclaration[5999-6012]:SingleVariableDeclaration[5999-6012]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6014-6169]:Block[6014-6169]"
  }, {
    "left" : "for (String key : other.stringPropertyNames())",
    "right" : "for (String key : other.stringPropertyNames())",
    "info" : "EnhancedForStatement[6018-6166]:EnhancedForStatement[6018-6166]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6065-6166]:Block[6065-6166]"
  }, {
    "left" : "String prefixed = prefix + key;",
    "right" : "String prefixed = prefix + key;",
    "info" : "VariableDeclarationStatement[6070-6101]:VariableDeclarationStatement[6070-6101]"
  }, {
    "left" : "properties.setProperty(prefixed, other.getProperty(key));",
    "right" : "properties.setProperty(prefixed, other.getProperty(key));",
    "info" : "ExpressionStatement[6105-6162]:ExpressionStatement[6105-6162]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[6172-6179]:Modifier[6172-6179]"
  }, {
    "left" : "Properties",
    "right" : "Properties",
    "info" : "SimpleType[6180-6190]:SimpleType[6180-6190]"
  }, {
    "left" : "getPropertiesFromApplication",
    "right" : "getPropertiesFromApplication",
    "info" : "SimpleName[6191-6219]:SimpleName[6191-6219]"
  }, {
    "left" : "Environment environment",
    "right" : "Environment environment",
    "info" : "SingleVariableDeclaration[6220-6243]:SingleVariableDeclaration[6220-6243]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6245-6572]:Block[6245-6572]"
  }, {
    "left" : "Properties properties = new Properties();",
    "right" : "Properties properties = new Properties();",
    "info" : "VariableDeclarationStatement[6249-6290]:VariableDeclarationStatement[6249-6290]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[6293-6548]:TryStatement[6293-6548]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6297-6462]:Block[6297-6462]"
  }, {
    "left" : "Map<String, Object> map = this.parser.parseMap(environment.getProperty(\n\t\t\t\t\tVCAP_APPLICATION, \"{}\"));",
    "right" : "Map<String, Object> map = this.parser.parseMap(environment.getProperty(\n\t\t\t\t\tVCAP_APPLICATION, \"{}\"));",
    "info" : "VariableDeclarationStatement[6302-6404]:VariableDeclarationStatement[6302-6404]"
  }, {
    "left" : "extractPropertiesFromApplication(properties, map);",
    "right" : "extractPropertiesFromApplication(properties, map);",
    "info" : "ExpressionStatement[6408-6458]:ExpressionStatement[6408-6458]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6486-6548]:Block[6486-6548]"
  }, {
    "left" : "logger.error(\"Could not parse VCAP_APPLICATION\", ex);",
    "right" : "logger.error(\"Could not parse VCAP_APPLICATION\", ex);",
    "info" : "ExpressionStatement[6491-6544]:ExpressionStatement[6491-6544]"
  }, {
    "left" : "return properties;",
    "right" : "return properties;",
    "info" : "ReturnStatement[6551-6569]:ReturnStatement[6551-6569]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[6575-6582]:Modifier[6575-6582]"
  }, {
    "left" : "Properties",
    "right" : "Properties",
    "info" : "SimpleType[6583-6593]:SimpleType[6583-6593]"
  }, {
    "left" : "getPropertiesFromServices",
    "right" : "getPropertiesFromServices",
    "info" : "SimpleName[6594-6619]:SimpleName[6594-6619]"
  }, {
    "left" : "Environment environment",
    "right" : "Environment environment",
    "info" : "SingleVariableDeclaration[6620-6643]:SingleVariableDeclaration[6620-6643]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6645-6963]:Block[6645-6963]"
  }, {
    "left" : "Properties properties = new Properties();",
    "right" : "Properties properties = new Properties();",
    "info" : "VariableDeclarationStatement[6649-6690]:VariableDeclarationStatement[6649-6690]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[6693-6939]:TryStatement[6693-6939]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6697-6856]:Block[6697-6856]"
  }, {
    "left" : "Map<String, Object> map = this.parser.parseMap(environment.getProperty(\n\t\t\t\t\tVCAP_SERVICES, \"{}\"));",
    "right" : "Map<String, Object> map = this.parser.parseMap(environment.getProperty(\n\t\t\t\t\tVCAP_SERVICES, \"{}\"));",
    "info" : "VariableDeclarationStatement[6702-6801]:VariableDeclarationStatement[6702-6801]"
  }, {
    "left" : "extractPropertiesFromServices(properties, map);",
    "right" : "extractPropertiesFromServices(properties, map);",
    "info" : "ExpressionStatement[6805-6852]:ExpressionStatement[6805-6852]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6880-6939]:Block[6880-6939]"
  }, {
    "left" : "logger.error(\"Could not parse VCAP_SERVICES\", ex);",
    "right" : "logger.error(\"Could not parse VCAP_SERVICES\", ex);",
    "info" : "ExpressionStatement[6885-6935]:ExpressionStatement[6885-6935]"
  }, {
    "left" : "return properties;",
    "right" : "return properties;",
    "info" : "ReturnStatement[6942-6960]:ReturnStatement[6942-6960]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[6966-6973]:Modifier[6966-6973]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[6974-6978]:PrimitiveType[6974-6978]"
  }, {
    "left" : "extractPropertiesFromApplication",
    "right" : "extractPropertiesFromApplication",
    "info" : "SimpleName[6979-7011]:SimpleName[6979-7011]"
  }, {
    "left" : "Properties properties",
    "right" : "Properties properties",
    "info" : "SingleVariableDeclaration[7012-7033]:SingleVariableDeclaration[7012-7033]"
  }, {
    "left" : "Map<String, Object> map",
    "right" : "Map<String, Object> map",
    "info" : "SingleVariableDeclaration[7038-7061]:SingleVariableDeclaration[7038-7061]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7063-7125]:Block[7063-7125]"
  }, {
    "left" : "if (map != null)",
    "right" : "if (map != null)",
    "info" : "IfStatement[7067-7122]:IfStatement[7067-7122]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7084-7122]:Block[7084-7122]"
  }, {
    "left" : "flatten(properties, map, \"\");",
    "right" : "flatten(properties, map, \"\");",
    "info" : "ExpressionStatement[7089-7118]:ExpressionStatement[7089-7118]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[7128-7135]:Modifier[7128-7135]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[7136-7140]:PrimitiveType[7136-7140]"
  }, {
    "left" : "extractPropertiesFromServices",
    "right" : "extractPropertiesFromServices",
    "info" : "SimpleName[7141-7170]:SimpleName[7141-7170]"
  }, {
    "left" : "Properties properties",
    "right" : "Properties properties",
    "info" : "SingleVariableDeclaration[7171-7192]:SingleVariableDeclaration[7171-7192]"
  }, {
    "left" : "Map<String, Object> map",
    "right" : "Map<String, Object> map",
    "info" : "SingleVariableDeclaration[7197-7220]:SingleVariableDeclaration[7197-7220]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7222-7684]:Block[7222-7684]"
  }, {
    "left" : "if (map != null)",
    "right" : "if (map != null)",
    "info" : "IfStatement[7226-7681]:IfStatement[7226-7681]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7243-7681]:Block[7243-7681]"
  }, {
    "left" : "for (Object services : map.values())",
    "right" : "for (Object services : map.values())",
    "info" : "EnhancedForStatement[7248-7677]:EnhancedForStatement[7248-7677]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7285-7677]:Block[7285-7677]"
  }, {
    "left" : "@SuppressWarnings(\"unchecked\")\n\t\t\t\tList<Object> list = (List<Object>) services;",
    "right" : "@SuppressWarnings(\"unchecked\")\n\t\t\t\tList<Object> list = (List<Object>) services;",
    "info" : "VariableDeclarationStatement[7291-7370]:VariableDeclarationStatement[7291-7370]"
  }, {
    "left" : "for (Object object : list)",
    "right" : "for (Object object : list)",
    "info" : "EnhancedForStatement[7375-7672]:EnhancedForStatement[7375-7672]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7402-7672]:Block[7402-7672]"
  }, {
    "left" : "@SuppressWarnings(\"unchecked\")\n\t\t\t\t\tMap<String, Object> service = (Map<String, Object>) object;",
    "right" : "@SuppressWarnings(\"unchecked\")\n\t\t\t\t\tMap<String, Object> service = (Map<String, Object>) object;",
    "info" : "VariableDeclarationStatement[7409-7504]:VariableDeclarationStatement[7409-7504]"
  }, {
    "left" : "String key = (String) service.get(\"name\");",
    "right" : "String key = (String) service.get(\"name\");",
    "info" : "VariableDeclarationStatement[7510-7552]:VariableDeclarationStatement[7510-7552]"
  }, {
    "left" : "if (key == null)",
    "right" : "if (key == null)",
    "info" : "IfStatement[7558-7626]:IfStatement[7558-7626]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7575-7626]:Block[7575-7626]"
  }, {
    "left" : "key = (String) service.get(\"label\");",
    "right" : "key = (String) service.get(\"label\");",
    "info" : "ExpressionStatement[7583-7619]:ExpressionStatement[7583-7619]"
  }, {
    "left" : "flatten(properties, service, key);",
    "right" : "flatten(properties, service, key);",
    "info" : "ExpressionStatement[7632-7666]:ExpressionStatement[7632-7666]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[7687-7694]:Modifier[7719-7726]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[7695-7699]:PrimitiveType[7727-7731]"
  }, {
    "left" : "flatten",
    "right" : "flatten",
    "info" : "SimpleName[7700-7707]:SimpleName[7732-7739]"
  }, {
    "left" : "Properties properties",
    "right" : "Properties properties",
    "info" : "SingleVariableDeclaration[7708-7729]:SingleVariableDeclaration[7740-7761]"
  }, {
    "left" : "Map<String, Object> input",
    "right" : "Map<String, Object> input",
    "info" : "SingleVariableDeclaration[7731-7756]:SingleVariableDeclaration[7763-7788]"
  }, {
    "left" : "String path",
    "right" : "String path",
    "info" : "SingleVariableDeclaration[7758-7769]:SingleVariableDeclaration[7790-7801]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7771-8984]:Block[7803-8802]"
  }, {
    "left" : "for (Entry<String, Object> entry : input.entrySet())",
    "right" : "for (Entry<String, Object> entry : input.entrySet())",
    "info" : "EnhancedForStatement[7775-8981]:EnhancedForStatement[7807-8799]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7828-8981]:Block[7860-8799]"
  }, {
    "left" : "String key = entry.getKey();",
    "right" : "String key = getFullKey(path, entry.getKey());",
    "info" : "VariableDeclarationStatement[7833-7861]:VariableDeclarationStatement[7865-7911]"
  }, {
    "left" : "entry.getKey()",
    "right" : "entry.getKey()",
    "info" : "MethodInvocation[7846-7860]:MethodInvocation[7895-7909]"
  }, {
    "left" : "StringUtils.hasText(path)",
    "right" : "StringUtils.hasText(path)",
    "info" : "MethodInvocation[7869-7894]:MethodInvocation[8865-8890]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7896-8008]:Block[8856-8997]"
  }, {
    "left" : "if (key.startsWith(\"[\"))",
    "right" : "if (key.startsWith(\"[\"))",
    "info" : "IfStatement[7902-8003]:IfStatement[8915-8967]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7927-7957]:Block[8940-8967]"
  }, {
    "left" : "path + key",
    "right" : "path + key",
    "info" : "InfixExpression[7940-7950]:InfixExpression[8952-8962]"
  }, {
    "left" : "path + \".\" + key",
    "right" : "path + \".\" + key",
    "info" : "InfixExpression[7980-7996]:InfixExpression[8977-8993]"
  }, {
    "left" : "Object value = entry.getValue();",
    "right" : "Object value = entry.getValue();",
    "info" : "VariableDeclarationStatement[8012-8044]:VariableDeclarationStatement[7915-7947]"
  }, {
    "left" : "if (value instanceof String)",
    "right" : "if (value instanceof String)",
    "info" : "IfStatement[8048-8977]:IfStatement[8485-8795]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8077-8115]:Block[8514-8552]"
  }, {
    "left" : "properties.put(key, value);",
    "right" : "properties.put(key, value);",
    "info" : "ExpressionStatement[8083-8110]:ExpressionStatement[8520-8547]"
  }, {
    "left" : "if (value instanceof Number)",
    "right" : "if (value instanceof Number)",
    "info" : "IfStatement[8124-8977]:IfStatement[8561-8795]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8153-8202]:Block[8590-8639]"
  }, {
    "left" : "properties.put(key, value.toString());",
    "right" : "properties.put(key, value.toString());",
    "info" : "ExpressionStatement[8159-8197]:ExpressionStatement[8596-8634]"
  }, {
    "left" : "if (value instanceof Boolean)",
    "right" : "if (value instanceof Boolean)",
    "info" : "IfStatement[8211-8977]:IfStatement[8648-8795]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8241-8290]:Block[8678-8727]"
  }, {
    "left" : "properties.put(key, value.toString());",
    "right" : "properties.put(key, value.toString());",
    "info" : "ExpressionStatement[8247-8285]:ExpressionStatement[8684-8722]"
  }, {
    "left" : "if (value instanceof Map)",
    "right" : "if (value instanceof Map)",
    "info" : "IfStatement[8299-8977]:IfStatement[7951-8795]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8325-8487]:Block[7977-8069]"
  }, {
    "left" : "SuppressWarnings",
    "right" : "flatten",
    "info" : "SimpleName[8359-8375]:SimpleName[8010-8017]"
  }, {
    "left" : "Map",
    "right" : "properties",
    "info" : "SimpleName[8393-8396]:SimpleName[8018-8028]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[8397-8403]:SimpleType[8354-8360]"
  }, {
    "left" : "(Map<String, Object>) value",
    "right" : "(Map<String, Object>) value",
    "info" : "CastExpression[8419-8446]:CastExpression[8030-8057]"
  }, {
    "left" : "key",
    "right" : "key",
    "info" : "SimpleName[8477-8480]:SimpleName[8059-8062]"
  }, {
    "left" : "if (value instanceof Collection)",
    "right" : "if (value instanceof Collection)",
    "info" : "IfStatement[8496-8977]:IfStatement[8078-8795]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8529-8909]:Block[8111-8476]"
  }, {
    "left" : "@SuppressWarnings(\"unchecked\")",
    "right" : "@SuppressWarnings(\"unchecked\")",
    "info" : "SingleMemberAnnotation[8562-8592]:SingleMemberAnnotation[7687-7717]"
  }, {
    "left" : "@SuppressWarnings(\"unchecked\")\n\t\t\t\tCollection<Object> collection = (Collection<Object>) value;",
    "right" : "Collection<Object> collection = (Collection<Object>) value;",
    "info" : "VariableDeclarationStatement[8562-8656]:VariableDeclarationStatement[8144-8203]"
  }, {
    "left" : "properties.put(key,\n\t\t\t\t\t\tStringUtils.collectionToCommaDelimitedString(collection));",
    "right" : "properties.put(key,\n\t\t\t\t\t\tStringUtils.collectionToCommaDelimitedString(collection));",
    "info" : "ExpressionStatement[8661-8745]:ExpressionStatement[8208-8292]"
  }, {
    "left" : "int count = 0;",
    "right" : "int count = 0;",
    "info" : "VariableDeclarationStatement[8750-8764]:VariableDeclarationStatement[8297-8311]"
  }, {
    "left" : "for (Object object : collection)",
    "right" : "for (Object item : collection)",
    "info" : "EnhancedForStatement[8769-8904]:EnhancedForStatement[8316-8471]"
  }, {
    "left" : "object",
    "right" : "item",
    "info" : "SimpleName[8781-8787]:SimpleName[8328-8332]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8802-8904]:Block[8347-8471]"
  }, {
    "left" : "properties",
    "right" : "itemKey",
    "info" : "SimpleName[8817-8827]:SimpleName[8361-8368]"
  }, {
    "left" : "Collections",
    "right" : "Collections",
    "info" : "METHOD_INVOCATION_RECEIVER[8836-8847]:METHOD_INVOCATION_RECEIVER[8419-8430]"
  }, {
    "left" : "\"[\" + (count++) + \"]\"",
    "right" : "\"[\" + (count++) + \"]\"",
    "info" : "InfixExpression[8861-8882]:InfixExpression[8371-8392]"
  }, {
    "left" : "key",
    "right" : "key",
    "info" : "SimpleName[8893-8896]:SimpleName[8460-8463]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8918-8977]:Block[8736-8795]"
  }, {
    "left" : "properties.put(key, value == null ? \"\" : value);",
    "right" : "properties.put(key, value == null ? \"\" : value);",
    "info" : "ExpressionStatement[8924-8972]:ExpressionStatement[8742-8790]"
  } ]
}