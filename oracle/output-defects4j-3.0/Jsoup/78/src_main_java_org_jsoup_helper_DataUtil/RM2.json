{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "DataUtil",
      "right" : "DataUtil",
      "info" : "TypeDeclaration[739-11452]:TypeDeclaration[778-11609]"
    }, {
      "left" : "private static final Pattern charsetPattern = Pattern.compile(\"(?i)\\\\bcharset=\\\\s*(?:[\\\"'])?([^\\\\s,;\\\"']*)\");",
      "right" : "private static final Pattern charsetPattern = Pattern.compile(\"(?i)\\\\bcharset=\\\\s*(?:[\\\"'])?([^\\\\s,;\\\"']*)\");",
      "info" : "FieldDeclaration[832-941]:FieldDeclaration[871-980]"
    }, {
      "left" : "static final String defaultCharset = \"UTF-8\";",
      "right" : "static final String defaultCharset = \"UTF-8\";",
      "info" : "FieldDeclaration[946-991]:FieldDeclaration[985-1030]"
    }, {
      "left" : "private static final int firstReadBufferSize = 1024 * 5;",
      "right" : "private static final int firstReadBufferSize = 1024 * 5;",
      "info" : "FieldDeclaration[1043-1099]:FieldDeclaration[1082-1138]"
    }, {
      "left" : "static final int bufferSize = 1024 * 32;",
      "right" : "static final int bufferSize = 1024 * 32;",
      "info" : "FieldDeclaration[1104-1144]:FieldDeclaration[1143-1183]"
    }, {
      "left" : "private static final char[] mimeBoundaryChars =\n            \"-_1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\".toCharArray();",
      "right" : "private static final char[] mimeBoundaryChars =\n            \"-_1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\".toCharArray();",
      "info" : "FieldDeclaration[1149-1290]:FieldDeclaration[1188-1329]"
    }, {
      "left" : "static final int boundaryLength = 32;",
      "right" : "static final int boundaryLength = 32;",
      "info" : "FieldDeclaration[1295-1332]:FieldDeclaration[1334-1371]"
    }, {
      "left" : "private DataUtil()",
      "right" : "private DataUtil()",
      "info" : "MethodDeclaration[1338-1359]:MethodDeclaration[1377-1398]"
    }, {
      "left" : "public static Document load(File in, String charsetName, String baseUri) throws IOException",
      "right" : "public static Document load(File in, String charsetName, String baseUri) throws IOException",
      "info" : "MethodDeclaration[1365-1836]:MethodDeclaration[1404-1875]"
    }, {
      "left" : "public static Document load(InputStream in, String charsetName, String baseUri) throws IOException",
      "right" : "public static Document load(InputStream in, String charsetName, String baseUri) throws IOException",
      "info" : "MethodDeclaration[1842-2347]:MethodDeclaration[1881-2386]"
    }, {
      "left" : "public static Document load(InputStream in, String charsetName, String baseUri, Parser parser) throws IOException",
      "right" : "public static Document load(InputStream in, String charsetName, String baseUri, Parser parser) throws IOException",
      "info" : "MethodDeclaration[2353-2960]:MethodDeclaration[2392-2999]"
    }, {
      "left" : "static void crossStreams(final InputStream in, final OutputStream out) throws IOException",
      "right" : "static void crossStreams(final InputStream in, final OutputStream out) throws IOException",
      "info" : "MethodDeclaration[2966-3444]:MethodDeclaration[3005-3483]"
    }, {
      "left" : "static Document parseInputStream(InputStream input, String charsetName, String baseUri, Parser parser) throws IOException",
      "right" : "static Document parseInputStream(InputStream input, String charsetName, String baseUri, Parser parser) throws IOException",
      "info" : "MethodDeclaration[3450-6889]:MethodDeclaration[3489-7046]"
    }, {
      "left" : "public static ByteBuffer readToByteBuffer(InputStream inStream, int maxSize) throws IOException",
      "right" : "public static ByteBuffer readToByteBuffer(InputStream inStream, int maxSize) throws IOException",
      "info" : "MethodDeclaration[6895-7735]:MethodDeclaration[7052-7892]"
    }, {
      "left" : "static ByteBuffer readToByteBuffer(InputStream inStream) throws IOException",
      "right" : "static ByteBuffer readToByteBuffer(InputStream inStream) throws IOException",
      "info" : "MethodDeclaration[7741-7870]:MethodDeclaration[7898-8027]"
    }, {
      "left" : "static ByteBuffer readFileToByteBuffer(File file) throws IOException",
      "right" : "static ByteBuffer readFileToByteBuffer(File file) throws IOException",
      "info" : "MethodDeclaration[7876-8354]:MethodDeclaration[8033-8511]"
    }, {
      "left" : "static ByteBuffer emptyByteBuffer()",
      "right" : "static ByteBuffer emptyByteBuffer()",
      "info" : "MethodDeclaration[8360-8442]:MethodDeclaration[8517-8599]"
    }, {
      "left" : "static String getCharsetFromContentType(String contentType)",
      "right" : "static String getCharsetFromContentType(String contentType)",
      "info" : "MethodDeclaration[8448-9117]:MethodDeclaration[8605-9274]"
    }, {
      "left" : "private static String validateCharset(String cs)",
      "right" : "private static String validateCharset(String cs)",
      "info" : "MethodDeclaration[9123-9611]:MethodDeclaration[9280-9768]"
    }, {
      "left" : "static String mimeBoundary()",
      "right" : "static String mimeBoundary()",
      "info" : "MethodDeclaration[9617-10026]:MethodDeclaration[9774-10183]"
    }, {
      "left" : "private static BomCharset detectCharsetFromBom(final ByteBuffer byteData)",
      "right" : "private static BomCharset detectCharsetFromBom(final ByteBuffer byteData)",
      "info" : "MethodDeclaration[10032-11196]:MethodDeclaration[10189-11353]"
    }, {
      "left" : "BomCharset",
      "right" : "BomCharset",
      "info" : "TypeDeclaration[11202-11450]:TypeDeclaration[11359-11607]"
    }, {
      "left" : "private final String charset;",
      "right" : "private final String charset;",
      "info" : "FieldDeclaration[11244-11273]:FieldDeclaration[11401-11430]"
    }, {
      "left" : "private final int offset;",
      "right" : "private final int offset;",
      "info" : "FieldDeclaration[11282-11307]:FieldDeclaration[11439-11464]"
    }, {
      "left" : "public BomCharset(String charset, int offset)",
      "right" : "public BomCharset(String charset, int offset)",
      "info" : "MethodDeclaration[11317-11444]:MethodDeclaration[11474-11601]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[798-804]:Modifier[837-843]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[811-816]:TYPE_DECLARATION_KIND[850-855]"
    }, {
      "left" : "DataUtil",
      "right" : "DataUtil",
      "info" : "SimpleName[817-825]:SimpleName[856-864]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[1338-1345]:Modifier[1377-1384]"
    }, {
      "left" : "DataUtil",
      "right" : "DataUtil",
      "info" : "SimpleName[1346-1354]:SimpleName[1385-1393]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1357-1359]:Block[1396-1398]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1636-1642]:Modifier[1675-1681]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[1643-1649]:Modifier[1682-1688]"
    }, {
      "left" : "Document",
      "right" : "Document",
      "info" : "SimpleType[1650-1658]:SimpleType[1689-1697]"
    }, {
      "left" : "load",
      "right" : "load",
      "info" : "SimpleName[1659-1663]:SimpleName[1698-1702]"
    }, {
      "left" : "File in",
      "right" : "File in",
      "info" : "SingleVariableDeclaration[1664-1671]:SingleVariableDeclaration[1703-1710]"
    }, {
      "left" : "String charsetName",
      "right" : "String charsetName",
      "info" : "SingleVariableDeclaration[1673-1691]:SingleVariableDeclaration[1712-1730]"
    }, {
      "left" : "String baseUri",
      "right" : "String baseUri",
      "info" : "SingleVariableDeclaration[1693-1707]:SingleVariableDeclaration[1732-1746]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[1716-1727]:SimpleType[1755-1766]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1728-1836]:Block[1767-1875]"
    }, {
      "left" : "return parseInputStream(new FileInputStream(in), charsetName, baseUri, Parser.htmlParser());",
      "right" : "return parseInputStream(new FileInputStream(in), charsetName, baseUri, Parser.htmlParser());",
      "info" : "ReturnStatement[1738-1830]:ReturnStatement[1777-1869]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2161-2167]:Modifier[2200-2206]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[2168-2174]:Modifier[2207-2213]"
    }, {
      "left" : "Document",
      "right" : "Document",
      "info" : "SimpleType[2175-2183]:SimpleType[2214-2222]"
    }, {
      "left" : "load",
      "right" : "load",
      "info" : "SimpleName[2184-2188]:SimpleName[2223-2227]"
    }, {
      "left" : "InputStream in",
      "right" : "InputStream in",
      "info" : "SingleVariableDeclaration[2189-2203]:SingleVariableDeclaration[2228-2242]"
    }, {
      "left" : "String charsetName",
      "right" : "String charsetName",
      "info" : "SingleVariableDeclaration[2205-2223]:SingleVariableDeclaration[2244-2262]"
    }, {
      "left" : "String baseUri",
      "right" : "String baseUri",
      "info" : "SingleVariableDeclaration[2225-2239]:SingleVariableDeclaration[2264-2278]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[2248-2259]:SimpleType[2287-2298]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2260-2347]:Block[2299-2386]"
    }, {
      "left" : "return parseInputStream(in, charsetName, baseUri, Parser.htmlParser());",
      "right" : "return parseInputStream(in, charsetName, baseUri, Parser.htmlParser());",
      "info" : "ReturnStatement[2270-2341]:ReturnStatement[2309-2380]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2772-2778]:Modifier[2811-2817]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[2779-2785]:Modifier[2818-2824]"
    }, {
      "left" : "Document",
      "right" : "Document",
      "info" : "SimpleType[2786-2794]:SimpleType[2825-2833]"
    }, {
      "left" : "load",
      "right" : "load",
      "info" : "SimpleName[2795-2799]:SimpleName[2834-2838]"
    }, {
      "left" : "InputStream in",
      "right" : "InputStream in",
      "info" : "SingleVariableDeclaration[2800-2814]:SingleVariableDeclaration[2839-2853]"
    }, {
      "left" : "String charsetName",
      "right" : "String charsetName",
      "info" : "SingleVariableDeclaration[2816-2834]:SingleVariableDeclaration[2855-2873]"
    }, {
      "left" : "String baseUri",
      "right" : "String baseUri",
      "info" : "SingleVariableDeclaration[2836-2850]:SingleVariableDeclaration[2875-2889]"
    }, {
      "left" : "Parser parser",
      "right" : "Parser parser",
      "info" : "SingleVariableDeclaration[2852-2865]:SingleVariableDeclaration[2891-2904]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[2874-2885]:SimpleType[2913-2924]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2886-2960]:Block[2925-2999]"
    }, {
      "left" : "return parseInputStream(in, charsetName, baseUri, parser);",
      "right" : "return parseInputStream(in, charsetName, baseUri, parser);",
      "info" : "ReturnStatement[2896-2954]:ReturnStatement[2935-2993]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[3181-3187]:Modifier[3220-3226]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[3188-3192]:PrimitiveType[3227-3231]"
    }, {
      "left" : "crossStreams",
      "right" : "crossStreams",
      "info" : "SimpleName[3193-3205]:SimpleName[3232-3244]"
    }, {
      "left" : "final InputStream in",
      "right" : "final InputStream in",
      "info" : "SingleVariableDeclaration[3206-3226]:SingleVariableDeclaration[3245-3265]"
    }, {
      "left" : "final OutputStream out",
      "right" : "final OutputStream out",
      "info" : "SingleVariableDeclaration[3228-3250]:SingleVariableDeclaration[3267-3289]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[3259-3270]:SimpleType[3298-3309]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3271-3444]:Block[3310-3483]"
    }, {
      "left" : "final byte[] buffer = new byte[bufferSize];",
      "right" : "final byte[] buffer = new byte[bufferSize];",
      "info" : "VariableDeclarationStatement[3281-3324]:VariableDeclarationStatement[3320-3363]"
    }, {
      "left" : "int len;",
      "right" : "int len;",
      "info" : "VariableDeclarationStatement[3333-3341]:VariableDeclarationStatement[3372-3380]"
    }, {
      "left" : "while ((len = in.read(buffer)) != -1)",
      "right" : "while ((len = in.read(buffer)) != -1)",
      "info" : "WhileStatement[3350-3438]:WhileStatement[3389-3477]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3388-3438]:Block[3427-3477]"
    }, {
      "left" : "out.write(buffer, 0, len);",
      "right" : "out.write(buffer, 0, len);",
      "info" : "ExpressionStatement[3402-3428]:ExpressionStatement[3441-3467]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[3450-3456]:Modifier[3489-3495]"
    }, {
      "left" : "parseInputStream",
      "right" : "parseInputStream",
      "info" : "SimpleName[3466-3482]:SimpleName[3505-3521]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3573-6889]:Block[3612-7046]"
    }, {
      "left" : "if (input == null)",
      "right" : "if (input == null)",
      "info" : "IfStatement[3583-3657]:IfStatement[3622-3696]"
    }, {
      "left" : "return new Document(baseUri);",
      "right" : "return new Document(baseUri);",
      "info" : "ReturnStatement[3628-3657]:ReturnStatement[3667-3696]"
    }, {
      "left" : "input = ConstrainableInputStream.wrap(input, bufferSize, 0);",
      "right" : "input = ConstrainableInputStream.wrap(input, bufferSize, 0);",
      "info" : "ExpressionStatement[3666-3726]:ExpressionStatement[3705-3765]"
    }, {
      "left" : "Document doc = null;",
      "right" : "Document doc = null;",
      "info" : "VariableDeclarationStatement[3736-3756]:VariableDeclarationStatement[3775-3795]"
    }, {
      "left" : "boolean fullyRead = false;",
      "right" : "boolean fullyRead = false;",
      "info" : "VariableDeclarationStatement[3765-3791]:VariableDeclarationStatement[3804-3830]"
    }, {
      "left" : "input.mark(bufferSize);",
      "right" : "input.mark(bufferSize);",
      "info" : "ExpressionStatement[3876-3899]:ExpressionStatement[3915-3938]"
    }, {
      "left" : "ByteBuffer firstBytes = readToByteBuffer(input, firstReadBufferSize - 1);",
      "right" : "ByteBuffer firstBytes = readToByteBuffer(input, firstReadBufferSize - 1);",
      "info" : "VariableDeclarationStatement[3908-3981]:VariableDeclarationStatement[3947-4020]"
    }, {
      "left" : "fullyRead = input.read() == -1;",
      "right" : "fullyRead = input.read() == -1;",
      "info" : "ExpressionStatement[4092-4123]:ExpressionStatement[4131-4162]"
    }, {
      "left" : "input.reset();",
      "right" : "input.reset();",
      "info" : "ExpressionStatement[4132-4146]:ExpressionStatement[4171-4185]"
    }, {
      "left" : "BomCharset bomCharset = detectCharsetFromBom(firstBytes);",
      "right" : "BomCharset bomCharset = detectCharsetFromBom(firstBytes);",
      "info" : "VariableDeclarationStatement[4218-4275]:VariableDeclarationStatement[4257-4314]"
    }, {
      "left" : "if (bomCharset != null)",
      "right" : "if (bomCharset != null)",
      "info" : "IfStatement[4284-4408]:IfStatement[4323-4447]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4308-4408]:Block[4347-4447]"
    }, {
      "left" : "charsetName = bomCharset.charset;",
      "right" : "charsetName = bomCharset.charset;",
      "info" : "ExpressionStatement[4322-4355]:ExpressionStatement[4361-4394]"
    }, {
      "left" : "input.skip(bomCharset.offset);",
      "right" : "input.skip(bomCharset.offset);",
      "info" : "ExpressionStatement[4368-4398]:ExpressionStatement[4407-4437]"
    }, {
      "left" : "if (charsetName == null)",
      "right" : "if (charsetName == null)",
      "info" : "IfStatement[4418-6397]:IfStatement[4457-6436]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4443-6172]:Block[4482-6211]"
    }, {
      "left" : "String docData = Charset.forName(defaultCharset).decode(firstBytes).toString();",
      "right" : "String docData = Charset.forName(defaultCharset).decode(firstBytes).toString();",
      "info" : "VariableDeclarationStatement[4507-4586]:VariableDeclarationStatement[4546-4625]"
    }, {
      "left" : "doc = parser.parseInput(docData, baseUri);",
      "right" : "doc = parser.parseInput(docData, baseUri);",
      "info" : "ExpressionStatement[4599-4641]:ExpressionStatement[4638-4680]"
    }, {
      "left" : "Elements metaElements = doc.select(\"meta[http-equiv=content-type], meta[charset]\");",
      "right" : "Elements metaElements = doc.select(\"meta[http-equiv=content-type], meta[charset]\");",
      "info" : "VariableDeclarationStatement[4780-4863]:VariableDeclarationStatement[4819-4902]"
    }, {
      "left" : "String foundCharset = null;",
      "right" : "String foundCharset = null;",
      "info" : "VariableDeclarationStatement[4876-4903]:VariableDeclarationStatement[4915-4942]"
    }, {
      "left" : "for (Element meta : metaElements)",
      "right" : "for (Element meta : metaElements)",
      "info" : "EnhancedForStatement[4965-5341]:EnhancedForStatement[5004-5380]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4999-5341]:Block[5038-5380]"
    }, {
      "left" : "if (meta.hasAttr(\"http-equiv\"))",
      "right" : "if (meta.hasAttr(\"http-equiv\"))",
      "info" : "IfStatement[5017-5132]:IfStatement[5056-5171]"
    }, {
      "left" : "foundCharset = getCharsetFromContentType(meta.attr(\"content\"));",
      "right" : "foundCharset = getCharsetFromContentType(meta.attr(\"content\"));",
      "info" : "ExpressionStatement[5069-5132]:ExpressionStatement[5108-5171]"
    }, {
      "left" : "if (foundCharset == null && meta.hasAttr(\"charset\"))",
      "right" : "if (foundCharset == null && meta.hasAttr(\"charset\"))",
      "info" : "IfStatement[5149-5258]:IfStatement[5188-5297]"
    }, {
      "left" : "foundCharset = meta.attr(\"charset\");",
      "right" : "foundCharset = meta.attr(\"charset\");",
      "info" : "ExpressionStatement[5222-5258]:ExpressionStatement[5261-5297]"
    }, {
      "left" : "if (foundCharset != null)",
      "right" : "if (foundCharset != null)",
      "info" : "IfStatement[5275-5327]:IfStatement[5314-5366]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[5321-5327]:BreakStatement[5360-5366]"
    }, {
      "left" : "if (foundCharset == null && doc.childNodeSize() > 0 && doc.childNode(0) instanceof XmlDeclaration)",
      "right" : "if (foundCharset == null && doc.childNodeSize() > 0 && doc.childNode(0) instanceof XmlDeclaration)",
      "info" : "IfStatement[5409-5707]:IfStatement[5448-5746]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5508-5707]:Block[5547-5746]"
    }, {
      "left" : "XmlDeclaration prolog = (XmlDeclaration) doc.childNode(0);",
      "right" : "XmlDeclaration prolog = (XmlDeclaration) doc.childNode(0);",
      "info" : "VariableDeclarationStatement[5526-5584]:VariableDeclarationStatement[5565-5623]"
    }, {
      "left" : "if (prolog.name().equals(\"xml\"))",
      "right" : "if (prolog.name().equals(\"xml\"))",
      "info" : "IfStatement[5601-5693]:IfStatement[5640-5732]"
    }, {
      "left" : "foundCharset = prolog.attr(\"encoding\");",
      "right" : "foundCharset = prolog.attr(\"encoding\");",
      "info" : "ExpressionStatement[5654-5693]:ExpressionStatement[5693-5732]"
    }, {
      "left" : "foundCharset = validateCharset(foundCharset);",
      "right" : "foundCharset = validateCharset(foundCharset);",
      "info" : "ExpressionStatement[5720-5765]:ExpressionStatement[5759-5804]"
    }, {
      "left" : "if (foundCharset != null && !foundCharset.equalsIgnoreCase(defaultCharset))",
      "right" : "if (foundCharset != null && !foundCharset.equalsIgnoreCase(defaultCharset))",
      "info" : "IfStatement[5778-6162]:IfStatement[5817-6201]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5854-6097]:Block[5893-6136]"
    }, {
      "left" : "foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");",
      "right" : "foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");",
      "info" : "ExpressionStatement[5952-6011]:ExpressionStatement[5991-6050]"
    }, {
      "left" : "charsetName = foundCharset;",
      "right" : "charsetName = foundCharset;",
      "info" : "ExpressionStatement[6028-6055]:ExpressionStatement[6067-6094]"
    }, {
      "left" : "doc = null;",
      "right" : "doc = null;",
      "info" : "ExpressionStatement[6072-6083]:ExpressionStatement[6111-6122]"
    }, {
      "left" : "if (!fullyRead)",
      "right" : "if (!fullyRead)",
      "info" : "IfStatement[6103-6162]:IfStatement[6142-6201]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6119-6162]:Block[6158-6201]"
    }, {
      "left" : "doc = null;",
      "right" : "doc = null;",
      "info" : "ExpressionStatement[6137-6148]:ExpressionStatement[6176-6187]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6178-6397]:Block[6217-6436]"
    }, {
      "left" : "Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");",
      "right" : "Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");",
      "info" : "ExpressionStatement[6254-6387]:ExpressionStatement[6293-6426]"
    }, {
      "left" : "if (doc == null)",
      "right" : "if (doc == null)",
      "info" : "IfStatement[6406-6840]:IfStatement[6445-6997]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6423-6840]:Block[6462-6997]"
    }, {
      "left" : "if (charsetName == null)",
      "right" : "if (charsetName == null)",
      "info" : "IfStatement[6437-6507]:IfStatement[6476-6546]"
    }, {
      "left" : "charsetName = defaultCharset;",
      "right" : "charsetName = defaultCharset;",
      "info" : "ExpressionStatement[6478-6507]:ExpressionStatement[6517-6546]"
    }, {
      "left" : "BufferedReader reader = new BufferedReader(new InputStreamReader(input, charsetName), bufferSize);",
      "right" : "BufferedReader reader = new BufferedReader(new InputStreamReader(input, charsetName), bufferSize);",
      "info" : "VariableDeclarationStatement[6520-6618]:VariableDeclarationStatement[6559-6657]"
    }, {
      "left" : "doc = parser.parseInput(reader, baseUri);",
      "right" : "doc = parser.parseInput(reader, baseUri);",
      "info" : "ExpressionStatement[6635-6676]:ExpressionStatement[6692-6733]"
    }, {
      "left" : "doc.outputSettings().charset(charsetName);",
      "right" : "doc.outputSettings().charset(charsetName);",
      "info" : "ExpressionStatement[6788-6830]:ExpressionStatement[6945-6987]"
    }, {
      "left" : "input.close();",
      "right" : "input.close();",
      "info" : "ExpressionStatement[6849-6863]:ExpressionStatement[7006-7020]"
    }, {
      "left" : "return doc;",
      "right" : "return doc;",
      "info" : "ReturnStatement[6872-6883]:ReturnStatement[7029-7040]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7393-7399]:Modifier[7550-7556]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[7400-7406]:Modifier[7557-7563]"
    }, {
      "left" : "ByteBuffer",
      "right" : "ByteBuffer",
      "info" : "SimpleType[7407-7417]:SimpleType[7564-7574]"
    }, {
      "left" : "readToByteBuffer",
      "right" : "readToByteBuffer",
      "info" : "SimpleName[7418-7434]:SimpleName[7575-7591]"
    }, {
      "left" : "InputStream inStream",
      "right" : "InputStream inStream",
      "info" : "SingleVariableDeclaration[7435-7455]:SingleVariableDeclaration[7592-7612]"
    }, {
      "left" : "int maxSize",
      "right" : "int maxSize",
      "info" : "SingleVariableDeclaration[7457-7468]:SingleVariableDeclaration[7614-7625]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[7477-7488]:SimpleType[7634-7645]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7489-7735]:Block[7646-7892]"
    }, {
      "left" : "Validate.isTrue(maxSize >= 0, \"maxSize must be 0 (unlimited) or larger\");",
      "right" : "Validate.isTrue(maxSize >= 0, \"maxSize must be 0 (unlimited) or larger\");",
      "info" : "ExpressionStatement[7499-7572]:ExpressionStatement[7656-7729]"
    }, {
      "left" : "final ConstrainableInputStream input = ConstrainableInputStream.wrap(inStream, bufferSize, maxSize);",
      "right" : "final ConstrainableInputStream input = ConstrainableInputStream.wrap(inStream, bufferSize, maxSize);",
      "info" : "VariableDeclarationStatement[7581-7681]:VariableDeclarationStatement[7738-7838]"
    }, {
      "left" : "return input.readToByteBuffer(maxSize);",
      "right" : "return input.readToByteBuffer(maxSize);",
      "info" : "ReturnStatement[7690-7729]:ReturnStatement[7847-7886]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[7741-7747]:Modifier[7898-7904]"
    }, {
      "left" : "ByteBuffer",
      "right" : "ByteBuffer",
      "info" : "SimpleType[7748-7758]:SimpleType[7905-7915]"
    }, {
      "left" : "readToByteBuffer",
      "right" : "readToByteBuffer",
      "info" : "SimpleName[7759-7775]:SimpleName[7916-7932]"
    }, {
      "left" : "InputStream inStream",
      "right" : "InputStream inStream",
      "info" : "SingleVariableDeclaration[7776-7796]:SingleVariableDeclaration[7933-7953]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[7805-7816]:SimpleType[7962-7973]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7817-7870]:Block[7974-8027]"
    }, {
      "left" : "return readToByteBuffer(inStream, 0);",
      "right" : "return readToByteBuffer(inStream, 0);",
      "info" : "ReturnStatement[7827-7864]:ReturnStatement[7984-8021]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[7876-7882]:Modifier[8033-8039]"
    }, {
      "left" : "ByteBuffer",
      "right" : "ByteBuffer",
      "info" : "SimpleType[7883-7893]:SimpleType[8040-8050]"
    }, {
      "left" : "readFileToByteBuffer",
      "right" : "readFileToByteBuffer",
      "info" : "SimpleName[7894-7914]:SimpleName[8051-8071]"
    }, {
      "left" : "File file",
      "right" : "File file",
      "info" : "SingleVariableDeclaration[7915-7924]:SingleVariableDeclaration[8072-8081]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[7933-7944]:SimpleType[8090-8101]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7945-8354]:Block[8102-8511]"
    }, {
      "left" : "RandomAccessFile randomAccessFile = null;",
      "right" : "RandomAccessFile randomAccessFile = null;",
      "info" : "VariableDeclarationStatement[7955-7996]:VariableDeclarationStatement[8112-8153]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[8005-8348]:TryStatement[8162-8505]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8009-8244]:Block[8166-8401]"
    }, {
      "left" : "randomAccessFile = new RandomAccessFile(file, \"r\");",
      "right" : "randomAccessFile = new RandomAccessFile(file, \"r\");",
      "info" : "ExpressionStatement[8023-8074]:ExpressionStatement[8180-8231]"
    }, {
      "left" : "byte[] bytes = new byte[(int) randomAccessFile.length()];",
      "right" : "byte[] bytes = new byte[(int) randomAccessFile.length()];",
      "info" : "VariableDeclarationStatement[8087-8144]:VariableDeclarationStatement[8244-8301]"
    }, {
      "left" : "randomAccessFile.readFully(bytes);",
      "right" : "randomAccessFile.readFully(bytes);",
      "info" : "ExpressionStatement[8157-8191]:ExpressionStatement[8314-8348]"
    }, {
      "left" : "return ByteBuffer.wrap(bytes);",
      "right" : "return ByteBuffer.wrap(bytes);",
      "info" : "ReturnStatement[8204-8234]:ReturnStatement[8361-8391]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8253-8348]:Block[8410-8505]"
    }, {
      "left" : "if (randomAccessFile != null)",
      "right" : "if (randomAccessFile != null)",
      "info" : "IfStatement[8267-8338]:IfStatement[8424-8495]"
    }, {
      "left" : "randomAccessFile.close();",
      "right" : "randomAccessFile.close();",
      "info" : "ExpressionStatement[8313-8338]:ExpressionStatement[8470-8495]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[8360-8366]:Modifier[8517-8523]"
    }, {
      "left" : "ByteBuffer",
      "right" : "ByteBuffer",
      "info" : "SimpleType[8367-8377]:SimpleType[8524-8534]"
    }, {
      "left" : "emptyByteBuffer",
      "right" : "emptyByteBuffer",
      "info" : "SimpleName[8378-8393]:SimpleName[8535-8550]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8396-8442]:Block[8553-8599]"
    }, {
      "left" : "return ByteBuffer.allocate(0);",
      "right" : "return ByteBuffer.allocate(0);",
      "info" : "ReturnStatement[8406-8436]:ReturnStatement[8563-8593]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[8744-8750]:Modifier[8901-8907]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[8751-8757]:SimpleType[8908-8914]"
    }, {
      "left" : "getCharsetFromContentType",
      "right" : "getCharsetFromContentType",
      "info" : "SimpleName[8758-8783]:SimpleName[8915-8940]"
    }, {
      "left" : "String contentType",
      "right" : "String contentType",
      "info" : "SingleVariableDeclaration[8784-8802]:SingleVariableDeclaration[8941-8959]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8804-9117]:Block[8961-9274]"
    }, {
      "left" : "if (contentType == null)",
      "right" : "if (contentType == null)",
      "info" : "IfStatement[8814-8851]:IfStatement[8971-9008]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[8839-8851]:ReturnStatement[8996-9008]"
    }, {
      "left" : "Matcher m = charsetPattern.matcher(contentType);",
      "right" : "Matcher m = charsetPattern.matcher(contentType);",
      "info" : "VariableDeclarationStatement[8860-8908]:VariableDeclarationStatement[9017-9065]"
    }, {
      "left" : "if (m.find())",
      "right" : "if (m.find())",
      "info" : "IfStatement[8917-9090]:IfStatement[9074-9247]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8931-9090]:Block[9088-9247]"
    }, {
      "left" : "String charset = m.group(1).trim();",
      "right" : "String charset = m.group(1).trim();",
      "info" : "VariableDeclarationStatement[8945-8980]:VariableDeclarationStatement[9102-9137]"
    }, {
      "left" : "charset = charset.replace(\"charset=\", \"\");",
      "right" : "charset = charset.replace(\"charset=\", \"\");",
      "info" : "ExpressionStatement[8993-9035]:ExpressionStatement[9150-9192]"
    }, {
      "left" : "return validateCharset(charset);",
      "right" : "return validateCharset(charset);",
      "info" : "ReturnStatement[9048-9080]:ReturnStatement[9205-9237]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[9099-9111]:ReturnStatement[9256-9268]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[9123-9130]:Modifier[9280-9287]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[9131-9137]:Modifier[9288-9294]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[9138-9144]:SimpleType[9295-9301]"
    }, {
      "left" : "validateCharset",
      "right" : "validateCharset",
      "info" : "SimpleName[9145-9160]:SimpleName[9302-9317]"
    }, {
      "left" : "String cs",
      "right" : "String cs",
      "info" : "SingleVariableDeclaration[9161-9170]:SingleVariableDeclaration[9318-9327]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9172-9611]:Block[9329-9768]"
    }, {
      "left" : "if (cs == null || cs.length() == 0)",
      "right" : "if (cs == null || cs.length() == 0)",
      "info" : "IfStatement[9182-9230]:IfStatement[9339-9387]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[9218-9230]:ReturnStatement[9375-9387]"
    }, {
      "left" : "cs = cs.trim().replaceAll(\"[\\\"']\", \"\");",
      "right" : "cs = cs.trim().replaceAll(\"[\\\"']\", \"\");",
      "info" : "ExpressionStatement[9239-9278]:ExpressionStatement[9396-9435]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[9287-9584]:TryStatement[9444-9741]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9291-9455]:Block[9448-9612]"
    }, {
      "left" : "if (Charset.isSupported(cs))",
      "right" : "if (Charset.isSupported(cs))",
      "info" : "IfStatement[9305-9344]:IfStatement[9462-9501]"
    }, {
      "left" : "return cs;",
      "right" : "return cs;",
      "info" : "ReturnStatement[9334-9344]:ReturnStatement[9491-9501]"
    }, {
      "left" : "cs = cs.toUpperCase(Locale.ENGLISH);",
      "right" : "cs = cs.toUpperCase(Locale.ENGLISH);",
      "info" : "ExpressionStatement[9357-9393]:ExpressionStatement[9514-9550]"
    }, {
      "left" : "if (Charset.isSupported(cs))",
      "right" : "if (Charset.isSupported(cs))",
      "info" : "IfStatement[9406-9445]:IfStatement[9563-9602]"
    }, {
      "left" : "return cs;",
      "right" : "return cs;",
      "info" : "ReturnStatement[9435-9445]:ReturnStatement[9592-9602]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9494-9584]:Block[9651-9741]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[9593-9605]:ReturnStatement[9750-9762]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[9701-9707]:Modifier[9858-9864]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[9708-9714]:SimpleType[9865-9871]"
    }, {
      "left" : "mimeBoundary",
      "right" : "mimeBoundary",
      "info" : "SimpleName[9715-9727]:SimpleName[9872-9884]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9730-10026]:Block[9887-10183]"
    }, {
      "left" : "final StringBuilder mime = new StringBuilder(boundaryLength);",
      "right" : "final StringBuilder mime = new StringBuilder(boundaryLength);",
      "info" : "VariableDeclarationStatement[9740-9801]:VariableDeclarationStatement[9897-9958]"
    }, {
      "left" : "final Random rand = new Random();",
      "right" : "final Random rand = new Random();",
      "info" : "VariableDeclarationStatement[9810-9843]:VariableDeclarationStatement[9967-10000]"
    }, {
      "left" : "for (int i = 0; i < boundaryLength; i++)",
      "right" : "for (int i = 0; i < boundaryLength; i++)",
      "info" : "ForStatement[9852-9988]:ForStatement[10009-10145]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9893-9988]:Block[10050-10145]"
    }, {
      "left" : "mime.append(mimeBoundaryChars[rand.nextInt(mimeBoundaryChars.length)]);",
      "right" : "mime.append(mimeBoundaryChars[rand.nextInt(mimeBoundaryChars.length)]);",
      "info" : "ExpressionStatement[9907-9978]:ExpressionStatement[10064-10135]"
    }, {
      "left" : "return mime.toString();",
      "right" : "return mime.toString();",
      "info" : "ReturnStatement[9997-10020]:ReturnStatement[10154-10177]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[10032-10039]:Modifier[10189-10196]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[10040-10046]:Modifier[10197-10203]"
    }, {
      "left" : "BomCharset",
      "right" : "BomCharset",
      "info" : "SimpleType[10047-10057]:SimpleType[10204-10214]"
    }, {
      "left" : "detectCharsetFromBom",
      "right" : "detectCharsetFromBom",
      "info" : "SimpleName[10058-10078]:SimpleName[10215-10235]"
    }, {
      "left" : "final ByteBuffer byteData",
      "right" : "final ByteBuffer byteData",
      "info" : "SingleVariableDeclaration[10079-10104]:SingleVariableDeclaration[10236-10261]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10106-11196]:Block[10263-11353]"
    }, {
      "left" : "final Buffer buffer = byteData;",
      "right" : "final Buffer buffer = byteData;",
      "info" : "VariableDeclarationStatement[10116-10147]:VariableDeclarationStatement[10273-10304]"
    }, {
      "left" : "buffer.mark();",
      "right" : "buffer.mark();",
      "info" : "ExpressionStatement[10243-10257]:ExpressionStatement[10400-10414]"
    }, {
      "left" : "byte[] bom = new byte[4];",
      "right" : "byte[] bom = new byte[4];",
      "info" : "VariableDeclarationStatement[10266-10291]:VariableDeclarationStatement[10423-10448]"
    }, {
      "left" : "if (byteData.remaining() >= bom.length)",
      "right" : "if (byteData.remaining() >= bom.length)",
      "info" : "IfStatement[10300-10411]:IfStatement[10457-10568]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10340-10411]:Block[10497-10568]"
    }, {
      "left" : "byteData.get(bom);",
      "right" : "byteData.get(bom);",
      "info" : "ExpressionStatement[10354-10372]:ExpressionStatement[10511-10529]"
    }, {
      "left" : "buffer.rewind();",
      "right" : "buffer.rewind();",
      "info" : "ExpressionStatement[10385-10401]:ExpressionStatement[10542-10558]"
    }, {
      "left" : "if (bom[0] == 0x00 && bom[1] == 0x00 && bom[2] == (byte) 0xFE && bom[3] == (byte) 0xFF || // BE\n            bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE && bom[2] == 0x00 && bom[3] == 0x00)",
      "right" : "if (bom[0] == 0x00 && bom[1] == 0x00 && bom[2] == (byte) 0xFE && bom[3] == (byte) 0xFF || // BE\n            bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE && bom[2] == 0x00 && bom[3] == 0x00)",
      "info" : "IfStatement[10420-11169]:IfStatement[10577-11326]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10612-10711]:Block[10769-10868]"
    }, {
      "left" : "return new BomCharset(\"UTF-32\", 0);",
      "right" : "return new BomCharset(\"UTF-32\", 0);",
      "info" : "ReturnStatement[10632-10667]:ReturnStatement[10789-10824]"
    }, {
      "left" : "if (bom[0] == (byte) 0xFE && bom[1] == (byte) 0xFF || // BE\n            bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE)",
      "right" : "if (bom[0] == (byte) 0xFE && bom[1] == (byte) 0xFF || // BE\n            bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE)",
      "info" : "IfStatement[10717-11169]:IfStatement[10874-11326]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10837-10912]:Block[10994-11069]"
    }, {
      "left" : "return new BomCharset(\"UTF-16\", 0);",
      "right" : "return new BomCharset(\"UTF-16\", 0);",
      "info" : "ReturnStatement[10851-10886]:ReturnStatement[11008-11043]"
    }, {
      "left" : "if (bom[0] == (byte) 0xEF && bom[1] == (byte) 0xBB && bom[2] == (byte) 0xBF)",
      "right" : "if (bom[0] == (byte) 0xEF && bom[1] == (byte) 0xBB && bom[2] == (byte) 0xBF)",
      "info" : "IfStatement[10918-11169]:IfStatement[11075-11326]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10995-11169]:Block[11152-11326]"
    }, {
      "left" : "return new BomCharset(\"UTF-8\", 3);",
      "right" : "return new BomCharset(\"UTF-8\", 3);",
      "info" : "ReturnStatement[11009-11043]:ReturnStatement[11166-11200]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[11178-11190]:ReturnStatement[11335-11347]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[11202-11209]:Modifier[11359-11366]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[11210-11216]:Modifier[11367-11373]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[11217-11222]:TYPE_DECLARATION_KIND[11374-11379]"
    }, {
      "left" : "BomCharset",
      "right" : "BomCharset",
      "info" : "SimpleName[11223-11233]:SimpleName[11380-11390]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11317-11323]:Modifier[11474-11480]"
    }, {
      "left" : "BomCharset",
      "right" : "BomCharset",
      "info" : "SimpleName[11324-11334]:SimpleName[11481-11491]"
    }, {
      "left" : "String charset",
      "right" : "String charset",
      "info" : "SingleVariableDeclaration[11335-11349]:SingleVariableDeclaration[11492-11506]"
    }, {
      "left" : "int offset",
      "right" : "int offset",
      "info" : "SingleVariableDeclaration[11351-11361]:SingleVariableDeclaration[11508-11518]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11363-11444]:Block[11520-11601]"
    }, {
      "left" : "this.charset = charset;",
      "right" : "this.charset = charset;",
      "info" : "ExpressionStatement[11377-11400]:ExpressionStatement[11534-11557]"
    }, {
      "left" : "this.offset = offset;",
      "right" : "this.offset = offset;",
      "info" : "ExpressionStatement[11413-11434]:ExpressionStatement[11570-11591]"
    } ]
  },
  "interFileMappings" : { }
}