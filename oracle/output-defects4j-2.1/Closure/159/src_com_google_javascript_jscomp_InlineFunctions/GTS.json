{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "InlineFunctions",
      "right" : "InlineFunctions",
      "info" : "TypeDeclaration[1334-34822]:TypeDeclaration[1334-34773]"
    }, {
      "left" : "private final Map<String, FunctionState> fns = Maps.newHashMap();",
      "right" : "private final Map<String, FunctionState> fns = Maps.newHashMap();",
      "info" : "FieldDeclaration[2522-2587]:FieldDeclaration[2522-2587]"
    }, {
      "left" : "private final Map<Node, String> anonFns = Maps.newHashMap();",
      "right" : "private final Map<Node, String> anonFns = Maps.newHashMap();",
      "info" : "FieldDeclaration[2590-2650]:FieldDeclaration[2590-2650]"
    }, {
      "left" : "private final AbstractCompiler compiler;",
      "right" : "private final AbstractCompiler compiler;",
      "info" : "FieldDeclaration[2654-2694]:FieldDeclaration[2654-2694]"
    }, {
      "left" : "private final FunctionInjector injector;",
      "right" : "private final FunctionInjector injector;",
      "info" : "FieldDeclaration[2698-2738]:FieldDeclaration[2698-2738]"
    }, {
      "left" : "private final boolean blockFunctionInliningEnabled;",
      "right" : "private final boolean blockFunctionInliningEnabled;",
      "info" : "FieldDeclaration[2742-2793]:FieldDeclaration[2742-2793]"
    }, {
      "left" : "private final boolean inlineGlobalFunctions;",
      "right" : "private final boolean inlineGlobalFunctions;",
      "info" : "FieldDeclaration[2796-2840]:FieldDeclaration[2796-2840]"
    }, {
      "left" : "private final boolean inlineLocalFunctions;",
      "right" : "private final boolean inlineLocalFunctions;",
      "info" : "FieldDeclaration[2843-2886]:FieldDeclaration[2843-2886]"
    }, {
      "left" : "private SpecializeModule.SpecializationState specializationState;",
      "right" : "private SpecializeModule.SpecializationState specializationState;",
      "info" : "FieldDeclaration[2890-2955]:FieldDeclaration[2890-2955]"
    }, {
      "left" : "InlineFunctions(AbstractCompiler compiler,\n      Supplier<String> safeNameIdSupplier,\n      boolean inlineGlobalFunctions,\n      boolean inlineLocalFunctions,\n      boolean blockFunctionInliningEnabled)",
      "right" : "InlineFunctions(AbstractCompiler compiler,\n      Supplier<String> safeNameIdSupplier,\n      boolean inlineGlobalFunctions,\n      boolean inlineLocalFunctions,\n      boolean blockFunctionInliningEnabled)",
      "info" : "MethodDeclaration[2959-3569]:MethodDeclaration[2959-3569]"
    }, {
      "left" : "FunctionState getOrCreateFunctionState(String fnName)",
      "right" : "FunctionState getOrCreateFunctionState(String fnName)",
      "info" : "MethodDeclaration[3573-3774]:MethodDeclaration[3573-3774]"
    }, {
      "left" : "public void enableSpecialization(SpecializeModule.SpecializationState\n      specializationState)",
      "right" : "public void enableSpecialization(SpecializeModule.SpecializationState\n      specializationState)",
      "info" : "MethodDeclaration[3778-3932]:MethodDeclaration[3778-3932]"
    }, {
      "left" : "public void process(Node externs, Node root)",
      "right" : "public void process(Node externs, Node root)",
      "info" : "MethodDeclaration[3936-5282]:MethodDeclaration[3936-5282]"
    }, {
      "left" : "FindCandidateFunctions",
      "right" : "FindCandidateFunctions",
      "info" : "TypeDeclaration[5286-8179]:TypeDeclaration[5286-8179]"
    }, {
      "left" : "private int callsSeen = 0;",
      "right" : "private int callsSeen = 0;",
      "info" : "FieldDeclaration[5404-5430]:FieldDeclaration[5404-5430]"
    }, {
      "left" : "public boolean shouldTraverse(\n        NodeTraversal nodeTraversal, Node n, Node parent)",
      "right" : "public boolean shouldTraverse(\n        NodeTraversal nodeTraversal, Node n, Node parent)",
      "info" : "MethodDeclaration[5436-5707]:MethodDeclaration[5436-5707]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[5713-5982]:MethodDeclaration[5713-5982]"
    }, {
      "left" : "public void findNamedFunctions(NodeTraversal t, Node n, Node parent)",
      "right" : "public void findNamedFunctions(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[5988-7079]:MethodDeclaration[5988-7079]"
    }, {
      "left" : "public void findFunctionExpressions(NodeTraversal t, Node n)",
      "right" : "public void findFunctionExpressions(NodeTraversal t, Node n)",
      "info" : "MethodDeclaration[7085-8175]:MethodDeclaration[7085-8175]"
    }, {
      "left" : "private void maybeAddFunction(Function fn, JSModule module)",
      "right" : "private void maybeAddFunction(Function fn, JSModule module)",
      "info" : "MethodDeclaration[8183-10678]:MethodDeclaration[8183-10678]"
    }, {
      "left" : "private boolean hasLocalNames(Node fnNode)",
      "right" : "private boolean hasLocalNames(Node fnNode)",
      "info" : "MethodDeclaration[10682-11119]:MethodDeclaration[10682-11119]"
    }, {
      "left" : "private static Node getContainingFunction(NodeTraversal t)",
      "right" : "private static Node getContainingFunction(NodeTraversal t)",
      "info" : "MethodDeclaration[11123-11359]:MethodDeclaration[11123-11359]"
    }, {
      "left" : "private boolean isCandidateFunction(Function fn)",
      "right" : "private boolean isCandidateFunction(Function fn)",
      "info" : "MethodDeclaration[11363-12527]:MethodDeclaration[11363-12527]"
    }, {
      "left" : "CallVisitorCallback",
      "right" : "CallVisitorCallback",
      "info" : "TypeDeclaration[12531-12711]:TypeDeclaration[12531-12711]"
    }, {
      "left" : "public void visitCallSite(\n        NodeTraversal t, Node callNode, Node parent, FunctionState fs);",
      "right" : "public void visitCallSite(\n        NodeTraversal t, Node callNode, Node parent, FunctionState fs);",
      "info" : "MethodDeclaration[12609-12707]:MethodDeclaration[12609-12707]"
    }, {
      "left" : "CallVisitor",
      "right" : "CallVisitor",
      "info" : "TypeDeclaration[12715-14505]:TypeDeclaration[12715-14505]"
    }, {
      "left" : "protected CallVisitorCallback callback;",
      "right" : "protected CallVisitorCallback callback;",
      "info" : "FieldDeclaration[12853-12892]:FieldDeclaration[12853-12892]"
    }, {
      "left" : "private Map<String, FunctionState> functionMap;",
      "right" : "private Map<String, FunctionState> functionMap;",
      "info" : "FieldDeclaration[12897-12944]:FieldDeclaration[12897-12944]"
    }, {
      "left" : "private Map<Node, String> anonFunctionMap;",
      "right" : "private Map<Node, String> anonFunctionMap;",
      "info" : "FieldDeclaration[12949-12991]:FieldDeclaration[12949-12991]"
    }, {
      "left" : "CallVisitor(Map<String, FunctionState> fns,\n                Map<Node, String> anonFns,\n                CallVisitorCallback callback)",
      "right" : "CallVisitor(Map<String, FunctionState> fns,\n                Map<Node, String> anonFns,\n                CallVisitorCallback callback)",
      "info" : "MethodDeclaration[12997-13237]:MethodDeclaration[12997-13237]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[13243-14501]:MethodDeclaration[13243-14501]"
    }, {
      "left" : "static boolean isCandidateUsage(Node name)",
      "right" : "static boolean isCandidateUsage(Node name)",
      "info" : "MethodDeclaration[14509-15735]:MethodDeclaration[14509-15735]"
    }, {
      "left" : "FindCandidatesReferences",
      "right" : "FindCandidatesReferences",
      "info" : "TypeDeclaration[15739-20007]:TypeDeclaration[15739-20007]"
    }, {
      "left" : "FindCandidatesReferences(\n        Map<String, FunctionState> fns,\n        Map<Node, String> anonFns)",
      "right" : "FindCandidatesReferences(\n        Map<String, FunctionState> fns,\n        Map<Node, String> anonFns)",
      "info" : "MethodDeclaration[15913-16082]:MethodDeclaration[15913-16082]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[16088-16283]:MethodDeclaration[16088-16283]"
    }, {
      "left" : "public void visitCallSite(\n        NodeTraversal t, Node callNode, Node parent, FunctionState fs)",
      "right" : "public void visitCallSite(\n        NodeTraversal t, Node callNode, Node parent, FunctionState fs)",
      "info" : "MethodDeclaration[16289-16451]:MethodDeclaration[16289-16451]"
    }, {
      "left" : "void maybeAddReference(NodeTraversal t, FunctionState fs,\n        Node callNode, JSModule module)",
      "right" : "void maybeAddReference(NodeTraversal t, FunctionState fs,\n        Node callNode, JSModule module)",
      "info" : "MethodDeclaration[16457-17365]:MethodDeclaration[16457-17365]"
    }, {
      "left" : "private boolean maybeAddReferenceUsingMode(\n        NodeTraversal t, FunctionState fs, Node callNode,\n        JSModule module, InliningMode mode)",
      "right" : "private boolean maybeAddReferenceUsingMode(\n        NodeTraversal t, FunctionState fs, Node callNode,\n        JSModule module, InliningMode mode)",
      "info" : "MethodDeclaration[17371-18386]:MethodDeclaration[17371-18386]"
    }, {
      "left" : "private void checkNameUsage(NodeTraversal t, Node n, Node parent)",
      "right" : "private void checkNameUsage(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[18392-20003]:MethodDeclaration[18392-20003]"
    }, {
      "left" : "Inline",
      "right" : "Inline",
      "info" : "TypeDeclaration[20011-22122]:TypeDeclaration[20011-22122]"
    }, {
      "left" : "private final FunctionInjector injector;",
      "right" : "private final FunctionInjector injector;",
      "info" : "FieldDeclaration[20129-20169]:FieldDeclaration[20129-20169]"
    }, {
      "left" : "private final SpecializeModule.SpecializationState specializationState;",
      "right" : "private final SpecializeModule.SpecializationState specializationState;",
      "info" : "FieldDeclaration[20174-20245]:FieldDeclaration[20174-20245]"
    }, {
      "left" : "Inline(FunctionInjector injector,\n        SpecializeModule.SpecializationState specializationState)",
      "right" : "Inline(FunctionInjector injector,\n        SpecializeModule.SpecializationState specializationState)",
      "info" : "MethodDeclaration[20251-20444]:MethodDeclaration[20251-20444]"
    }, {
      "left" : "public void visitCallSite(\n        NodeTraversal t, Node callNode, Node parent, FunctionState fs)",
      "right" : "public void visitCallSite(\n        NodeTraversal t, Node callNode, Node parent, FunctionState fs)",
      "info" : "MethodDeclaration[20450-21640]:MethodDeclaration[20450-21640]"
    }, {
      "left" : "private void inlineFunction(\n        NodeTraversal t, Node callNode, FunctionState fs, InliningMode mode)",
      "right" : "private void inlineFunction(\n        NodeTraversal t, Node callNode, FunctionState fs, InliningMode mode)",
      "info" : "MethodDeclaration[21646-22118]:MethodDeclaration[21646-22118]"
    }, {
      "left" : "private void trimCanidatesNotMeetingMinimumRequirements()",
      "right" : "private void trimCanidatesNotMeetingMinimumRequirements()",
      "info" : "MethodDeclaration[22126-22544]:MethodDeclaration[22126-22544]"
    }, {
      "left" : "void trimCanidatesUsingOnCost()",
      "right" : "void trimCanidatesUsingOnCost()",
      "info" : "MethodDeclaration[22548-23246]:MethodDeclaration[22548-23246]"
    }, {
      "left" : "private boolean mimimizeCost(FunctionState fs)",
      "right" : "private boolean mimimizeCost(FunctionState fs)",
      "info" : "MethodDeclaration[23250-23866]:MethodDeclaration[23250-23866]"
    }, {
      "left" : "private boolean inliningLowersCost(FunctionState fs)",
      "right" : "private boolean inliningLowersCost(FunctionState fs)",
      "info" : "MethodDeclaration[23870-24219]:MethodDeclaration[23870-24219]"
    }, {
      "left" : "private void resolveInlineConflicts()",
      "right" : "private void resolveInlineConflicts()",
      "info" : "MethodDeclaration[24224-25168]:MethodDeclaration[24224-25168]"
    }, {
      "left" : "private void resolveInlineConflictsForFunction(FunctionState fs)",
      "right" : "private void resolveInlineConflictsForFunction(FunctionState fs)",
      "info" : "MethodDeclaration[25172-26190]:MethodDeclaration[25172-26190]"
    }, {
      "left" : "private Set<String> findCalledFunctions(Node node)",
      "right" : "private Set<String> findCalledFunctions(Node node)",
      "info" : "MethodDeclaration[26194-26442]:MethodDeclaration[26194-26442]"
    }, {
      "left" : "private void findCalledFunctions(\n      Node node, Set<String> changed)",
      "right" : "private void findCalledFunctions(\n      Node node, Set<String> changed)",
      "info" : "MethodDeclaration[26446-26973]:MethodDeclaration[26446-26924]"
    }, {
      "left" : "private void decomposeExpressions(Set<String> fnNames)",
      "right" : "private void decomposeExpressions(Set<String> fnNames)",
      "info" : "MethodDeclaration[26977-27561]:MethodDeclaration[26928-27512]"
    }, {
      "left" : "void removeInlinedFunctions()",
      "right" : "void removeInlinedFunctions()",
      "info" : "MethodDeclaration[27565-28162]:MethodDeclaration[27516-28113]"
    }, {
      "left" : "void verifyAllReferencesInlined(FunctionState fs)",
      "right" : "void verifyAllReferencesInlined(FunctionState fs)",
      "info" : "MethodDeclaration[28166-28597]:MethodDeclaration[28117-28548]"
    }, {
      "left" : "FunctionState",
      "right" : "FunctionState",
      "info" : "TypeDeclaration[28601-32275]:TypeDeclaration[28552-32226]"
    }, {
      "left" : "private Function fn = null;",
      "right" : "private Function fn = null;",
      "info" : "FieldDeclaration[28724-28751]:FieldDeclaration[28675-28702]"
    }, {
      "left" : "private Node safeFnNode = null;",
      "right" : "private Node safeFnNode = null;",
      "info" : "FieldDeclaration[28756-28787]:FieldDeclaration[28707-28738]"
    }, {
      "left" : "private boolean inline = true;",
      "right" : "private boolean inline = true;",
      "info" : "FieldDeclaration[28792-28822]:FieldDeclaration[28743-28773]"
    }, {
      "left" : "private boolean remove = true;",
      "right" : "private boolean remove = true;",
      "info" : "FieldDeclaration[28827-28857]:FieldDeclaration[28778-28808]"
    }, {
      "left" : "private boolean inlineDirectly = false;",
      "right" : "private boolean inlineDirectly = false;",
      "info" : "FieldDeclaration[28862-28901]:FieldDeclaration[28813-28852]"
    }, {
      "left" : "private boolean referencesThis = false;",
      "right" : "private boolean referencesThis = false;",
      "info" : "FieldDeclaration[28906-28945]:FieldDeclaration[28857-28896]"
    }, {
      "left" : "private boolean hasInnerFunctions = false;",
      "right" : "private boolean hasInnerFunctions = false;",
      "info" : "FieldDeclaration[28950-28992]:FieldDeclaration[28901-28943]"
    }, {
      "left" : "private Map<Node, Reference> references = null;",
      "right" : "private Map<Node, Reference> references = null;",
      "info" : "FieldDeclaration[28997-29044]:FieldDeclaration[28948-28995]"
    }, {
      "left" : "private JSModule module = null;",
      "right" : "private JSModule module = null;",
      "info" : "FieldDeclaration[29049-29080]:FieldDeclaration[29000-29031]"
    }, {
      "left" : "private Set<String> namesToAlias = null;",
      "right" : "private Set<String> namesToAlias = null;",
      "info" : "FieldDeclaration[29085-29125]:FieldDeclaration[29036-29076]"
    }, {
      "left" : "boolean hasExistingFunctionDefinition()",
      "right" : "boolean hasExistingFunctionDefinition()",
      "info" : "MethodDeclaration[29131-29205]:MethodDeclaration[29082-29156]"
    }, {
      "left" : "public void setReferencesThis(boolean referencesThis)",
      "right" : "public void setReferencesThis(boolean referencesThis)",
      "info" : "MethodDeclaration[29211-29316]:MethodDeclaration[29162-29267]"
    }, {
      "left" : "public boolean getReferencesThis()",
      "right" : "public boolean getReferencesThis()",
      "info" : "MethodDeclaration[29322-29398]:MethodDeclaration[29273-29349]"
    }, {
      "left" : "public void setHasInnerFunctions(boolean hasInnerFunctions)",
      "right" : "public void setHasInnerFunctions(boolean hasInnerFunctions)",
      "info" : "MethodDeclaration[29404-29521]:MethodDeclaration[29355-29472]"
    }, {
      "left" : "public boolean hasInnerFunctions()",
      "right" : "public boolean hasInnerFunctions()",
      "info" : "MethodDeclaration[29528-29602]:MethodDeclaration[29479-29553]"
    }, {
      "left" : "void removeBlockInliningReferences()",
      "right" : "void removeBlockInliningReferences()",
      "info" : "MethodDeclaration[29608-29920]:MethodDeclaration[29559-29871]"
    }, {
      "left" : "public boolean hasBlockInliningReferences()",
      "right" : "public boolean hasBlockInliningReferences()",
      "info" : "MethodDeclaration[29926-30143]:MethodDeclaration[29877-30094]"
    }, {
      "left" : "public Function getFn()",
      "right" : "public Function getFn()",
      "info" : "MethodDeclaration[30149-30197]:MethodDeclaration[30100-30148]"
    }, {
      "left" : "public void setFn(Function fn)",
      "right" : "public void setFn(Function fn)",
      "info" : "MethodDeclaration[30203-30310]:MethodDeclaration[30154-30261]"
    }, {
      "left" : "public Node getSafeFnNode()",
      "right" : "public Node getSafeFnNode()",
      "info" : "MethodDeclaration[30316-30422]:MethodDeclaration[30267-30373]"
    }, {
      "left" : "public void setSafeFnNode(Node safeFnNode)",
      "right" : "public void setSafeFnNode(Node safeFnNode)",
      "info" : "MethodDeclaration[30428-30514]:MethodDeclaration[30379-30465]"
    }, {
      "left" : "public boolean canInline()",
      "right" : "public boolean canInline()",
      "info" : "MethodDeclaration[30520-30575]:MethodDeclaration[30471-30526]"
    }, {
      "left" : "public void setInline(boolean inline)",
      "right" : "public void setInline(boolean inline)",
      "info" : "MethodDeclaration[30581-30874]:MethodDeclaration[30532-30825]"
    }, {
      "left" : "public boolean canRemove()",
      "right" : "public boolean canRemove()",
      "info" : "MethodDeclaration[30880-30935]:MethodDeclaration[30831-30886]"
    }, {
      "left" : "public void setRemove(boolean remove)",
      "right" : "public void setRemove(boolean remove)",
      "info" : "MethodDeclaration[30941-31014]:MethodDeclaration[30892-30965]"
    }, {
      "left" : "public boolean canInlineDirectly()",
      "right" : "public boolean canInlineDirectly()",
      "info" : "MethodDeclaration[31020-31091]:MethodDeclaration[30971-31042]"
    }, {
      "left" : "public void inlineDirectly(boolean directReplacement)",
      "right" : "public void inlineDirectly(boolean directReplacement)",
      "info" : "MethodDeclaration[31097-31205]:MethodDeclaration[31048-31156]"
    }, {
      "left" : "public boolean hasReferences()",
      "right" : "public boolean hasReferences()",
      "info" : "MethodDeclaration[31211-31309]:MethodDeclaration[31162-31260]"
    }, {
      "left" : "private Map<Node, Reference> getReferencesInternal()",
      "right" : "private Map<Node, Reference> getReferencesInternal()",
      "info" : "MethodDeclaration[31315-31479]:MethodDeclaration[31266-31430]"
    }, {
      "left" : "public void addReference(Reference ref)",
      "right" : "public void addReference(Reference ref)",
      "info" : "MethodDeclaration[31485-31653]:MethodDeclaration[31436-31604]"
    }, {
      "left" : "public Collection<Reference> getReferences()",
      "right" : "public Collection<Reference> getReferences()",
      "info" : "MethodDeclaration[31659-31758]:MethodDeclaration[31610-31709]"
    }, {
      "left" : "public Reference getReference(Node n)",
      "right" : "public Reference getReference(Node n)",
      "info" : "MethodDeclaration[31764-31854]:MethodDeclaration[31715-31805]"
    }, {
      "left" : "public Set<String> getNamesToAlias()",
      "right" : "public Set<String> getNamesToAlias()",
      "info" : "MethodDeclaration[31860-32041]:MethodDeclaration[31811-31992]"
    }, {
      "left" : "public void setNamesToAlias(Set<String> names)",
      "right" : "public void setNamesToAlias(Set<String> names)",
      "info" : "MethodDeclaration[32047-32129]:MethodDeclaration[31998-32080]"
    }, {
      "left" : "public void setModule(JSModule module)",
      "right" : "public void setModule(JSModule module)",
      "info" : "MethodDeclaration[32135-32209]:MethodDeclaration[32086-32160]"
    }, {
      "left" : "public JSModule getModule()",
      "right" : "public JSModule getModule()",
      "info" : "MethodDeclaration[32215-32271]:MethodDeclaration[32166-32222]"
    }, {
      "left" : "Function",
      "right" : "Function",
      "info" : "TypeDeclaration[32279-32673]:TypeDeclaration[32230-32624]"
    }, {
      "left" : "public String getName();",
      "right" : "public String getName();",
      "info" : "MethodDeclaration[32423-32488]:MethodDeclaration[32374-32439]"
    }, {
      "left" : "public Node getFunctionNode();",
      "right" : "public Node getFunctionNode();",
      "info" : "MethodDeclaration[32494-32558]:MethodDeclaration[32445-32509]"
    }, {
      "left" : "public void remove();",
      "right" : "public void remove();",
      "info" : "MethodDeclaration[32564-32631]:MethodDeclaration[32515-32582]"
    }, {
      "left" : "public Node getDeclaringBlock();",
      "right" : "public Node getDeclaringBlock();",
      "info" : "MethodDeclaration[32637-32669]:MethodDeclaration[32588-32620]"
    }, {
      "left" : "NamedFunction",
      "right" : "NamedFunction",
      "info" : "TypeDeclaration[32677-33203]:TypeDeclaration[32628-33154]"
    }, {
      "left" : "private final Node fn;",
      "right" : "private final Node fn;",
      "info" : "FieldDeclaration[32802-32824]:FieldDeclaration[32753-32775]"
    }, {
      "left" : "public NamedFunction(Node fn)",
      "right" : "public NamedFunction(Node fn)",
      "info" : "MethodDeclaration[32830-32887]:MethodDeclaration[32781-32838]"
    }, {
      "left" : "public String getName()",
      "right" : "public String getName()",
      "info" : "MethodDeclaration[32893-32969]:MethodDeclaration[32844-32920]"
    }, {
      "left" : "public Node getFunctionNode()",
      "right" : "public Node getFunctionNode()",
      "info" : "MethodDeclaration[32975-33029]:MethodDeclaration[32926-32980]"
    }, {
      "left" : "public void remove()",
      "right" : "public void remove()",
      "info" : "MethodDeclaration[33035-33111]:MethodDeclaration[32986-33062]"
    }, {
      "left" : "public Node getDeclaringBlock()",
      "right" : "public Node getDeclaringBlock()",
      "info" : "MethodDeclaration[33117-33199]:MethodDeclaration[33068-33150]"
    }, {
      "left" : "FunctionVar",
      "right" : "FunctionVar",
      "info" : "TypeDeclaration[33207-33768]:TypeDeclaration[33158-33719]"
    }, {
      "left" : "private final Node var;",
      "right" : "private final Node var;",
      "info" : "FieldDeclaration[33328-33351]:FieldDeclaration[33279-33302]"
    }, {
      "left" : "public FunctionVar(Node var)",
      "right" : "public FunctionVar(Node var)",
      "info" : "MethodDeclaration[33357-33415]:MethodDeclaration[33308-33366]"
    }, {
      "left" : "public String getName()",
      "right" : "public String getName()",
      "info" : "MethodDeclaration[33421-33498]:MethodDeclaration[33372-33449]"
    }, {
      "left" : "public Node getFunctionNode()",
      "right" : "public Node getFunctionNode()",
      "info" : "MethodDeclaration[33504-33591]:MethodDeclaration[33455-33542]"
    }, {
      "left" : "public void remove()",
      "right" : "public void remove()",
      "info" : "MethodDeclaration[33597-33675]:MethodDeclaration[33548-33626]"
    }, {
      "left" : "public Node getDeclaringBlock()",
      "right" : "public Node getDeclaringBlock()",
      "info" : "MethodDeclaration[33681-33764]:MethodDeclaration[33632-33715]"
    }, {
      "left" : "FunctionExpression",
      "right" : "FunctionExpression",
      "info" : "TypeDeclaration[33772-34506]:TypeDeclaration[33723-34457]"
    }, {
      "left" : "private final Node fn;",
      "right" : "private final Node fn;",
      "info" : "FieldDeclaration[33907-33929]:FieldDeclaration[33858-33880]"
    }, {
      "left" : "private final String fakeName;",
      "right" : "private final String fakeName;",
      "info" : "FieldDeclaration[33934-33964]:FieldDeclaration[33885-33915]"
    }, {
      "left" : "public FunctionExpression(Node fn, int index)",
      "right" : "public FunctionExpression(Node fn, int index)",
      "info" : "MethodDeclaration[33970-34206]:MethodDeclaration[33921-34157]"
    }, {
      "left" : "public String getName()",
      "right" : "public String getName()",
      "info" : "MethodDeclaration[34212-34266]:MethodDeclaration[34163-34217]"
    }, {
      "left" : "public Node getFunctionNode()",
      "right" : "public Node getFunctionNode()",
      "info" : "MethodDeclaration[34272-34326]:MethodDeclaration[34223-34277]"
    }, {
      "left" : "public void remove()",
      "right" : "public void remove()",
      "info" : "MethodDeclaration[34332-34423]:MethodDeclaration[34283-34374]"
    }, {
      "left" : "public Node getDeclaringBlock()",
      "right" : "public Node getDeclaringBlock()",
      "info" : "MethodDeclaration[34429-34501]:MethodDeclaration[34380-34452]"
    }, {
      "left" : "Reference",
      "right" : "Reference",
      "info" : "TypeDeclaration[34510-34820]:TypeDeclaration[34461-34771]"
    }, {
      "left" : "final boolean requiresDecomposition;",
      "right" : "final boolean requiresDecomposition;",
      "info" : "FieldDeclaration[34567-34603]:FieldDeclaration[34518-34554]"
    }, {
      "left" : "boolean inlined = false;",
      "right" : "boolean inlined = false;",
      "info" : "FieldDeclaration[34608-34632]:FieldDeclaration[34559-34583]"
    }, {
      "left" : "Reference(\n        Node callNode, JSModule module, InliningMode mode, boolean decompose)",
      "right" : "Reference(\n        Node callNode, JSModule module, InliningMode mode, boolean decompose)",
      "info" : "MethodDeclaration[34637-34816]:MethodDeclaration[34588-34767]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3162-3569]:Block[3162-3569]"
    }, {
      "left" : "Preconditions.checkArgument(compiler != null);",
      "right" : "Preconditions.checkArgument(compiler != null);",
      "info" : "ExpressionStatement[3168-3214]:ExpressionStatement[3168-3214]"
    }, {
      "left" : "Preconditions.checkArgument(safeNameIdSupplier != null);",
      "right" : "Preconditions.checkArgument(safeNameIdSupplier != null);",
      "info" : "ExpressionStatement[3219-3275]:ExpressionStatement[3219-3275]"
    }, {
      "left" : "this.compiler = compiler;",
      "right" : "this.compiler = compiler;",
      "info" : "ExpressionStatement[3280-3305]:ExpressionStatement[3280-3305]"
    }, {
      "left" : "this.inlineGlobalFunctions = inlineGlobalFunctions;",
      "right" : "this.inlineGlobalFunctions = inlineGlobalFunctions;",
      "info" : "ExpressionStatement[3311-3362]:ExpressionStatement[3311-3362]"
    }, {
      "left" : "this.inlineLocalFunctions = inlineLocalFunctions;",
      "right" : "this.inlineLocalFunctions = inlineLocalFunctions;",
      "info" : "ExpressionStatement[3367-3416]:ExpressionStatement[3367-3416]"
    }, {
      "left" : "this.blockFunctionInliningEnabled = blockFunctionInliningEnabled;",
      "right" : "this.blockFunctionInliningEnabled = blockFunctionInliningEnabled;",
      "info" : "ExpressionStatement[3421-3486]:ExpressionStatement[3421-3486]"
    }, {
      "left" : "this.injector = new FunctionInjector(compiler, safeNameIdSupplier, true);",
      "right" : "this.injector = new FunctionInjector(compiler, safeNameIdSupplier, true);",
      "info" : "ExpressionStatement[3492-3565]:ExpressionStatement[3492-3565]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3627-3774]:Block[3627-3774]"
    }, {
      "left" : "FunctionState fs = fns.get(fnName);",
      "right" : "FunctionState fs = fns.get(fnName);",
      "info" : "VariableDeclarationStatement[3633-3668]:VariableDeclarationStatement[3633-3668]"
    }, {
      "left" : "if (fs == null)",
      "right" : "if (fs == null)",
      "info" : "IfStatement[3673-3755]:IfStatement[3673-3755]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3689-3755]:Block[3689-3755]"
    }, {
      "left" : "fs = new FunctionState();",
      "right" : "fs = new FunctionState();",
      "info" : "ExpressionStatement[3697-3722]:ExpressionStatement[3697-3722]"
    }, {
      "left" : "fns.put(fnName, fs);",
      "right" : "fns.put(fnName, fs);",
      "info" : "ExpressionStatement[3729-3749]:ExpressionStatement[3729-3749]"
    }, {
      "left" : "return fs;",
      "right" : "return fs;",
      "info" : "ReturnStatement[3760-3770]:ReturnStatement[3760-3770]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3875-3932]:Block[3875-3932]"
    }, {
      "left" : "this.specializationState = specializationState;",
      "right" : "this.specializationState = specializationState;",
      "info" : "ExpressionStatement[3881-3928]:ExpressionStatement[3881-3928]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3993-5282]:Block[3993-5282]"
    }, {
      "left" : "Preconditions.checkState(compiler.getLifeCycleStage().isNormalized());",
      "right" : "Preconditions.checkState(compiler.getLifeCycleStage().isNormalized());",
      "info" : "ExpressionStatement[3999-4069]:ExpressionStatement[3999-4069]"
    }, {
      "left" : "NodeTraversal.traverse(compiler, root, new FindCandidateFunctions());",
      "right" : "NodeTraversal.traverse(compiler, root, new FindCandidateFunctions());",
      "info" : "ExpressionStatement[4075-4144]:ExpressionStatement[4075-4144]"
    }, {
      "left" : "if (fns.isEmpty())",
      "right" : "if (fns.isEmpty())",
      "info" : "IfStatement[4149-4213]:IfStatement[4149-4213]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4168-4213]:Block[4168-4213]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[4176-4183]:ReturnStatement[4176-4183]"
    }, {
      "left" : "NodeTraversal.traverse(compiler, root,\n       new FindCandidatesReferences(fns, anonFns));",
      "right" : "NodeTraversal.traverse(compiler, root,\n       new FindCandidatesReferences(fns, anonFns));",
      "info" : "ExpressionStatement[4218-4308]:ExpressionStatement[4218-4308]"
    }, {
      "left" : "trimCanidatesNotMeetingMinimumRequirements();",
      "right" : "trimCanidatesNotMeetingMinimumRequirements();",
      "info" : "ExpressionStatement[4313-4358]:ExpressionStatement[4313-4358]"
    }, {
      "left" : "if (fns.isEmpty())",
      "right" : "if (fns.isEmpty())",
      "info" : "IfStatement[4363-4427]:IfStatement[4363-4427]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4382-4427]:Block[4382-4427]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[4390-4397]:ReturnStatement[4390-4397]"
    }, {
      "left" : "Set<String> fnNames = Sets.newHashSet(fns.keySet());",
      "right" : "Set<String> fnNames = Sets.newHashSet(fns.keySet());",
      "info" : "VariableDeclarationStatement[4848-4900]:VariableDeclarationStatement[4848-4900]"
    }, {
      "left" : "injector.setKnownConstants(fnNames);",
      "right" : "injector.setKnownConstants(fnNames);",
      "info" : "ExpressionStatement[4905-4941]:ExpressionStatement[4905-4941]"
    }, {
      "left" : "trimCanidatesUsingOnCost();",
      "right" : "trimCanidatesUsingOnCost();",
      "info" : "ExpressionStatement[4947-4974]:ExpressionStatement[4947-4974]"
    }, {
      "left" : "if (fns.isEmpty())",
      "right" : "if (fns.isEmpty())",
      "info" : "IfStatement[4979-5043]:IfStatement[4979-5043]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4998-5043]:Block[4998-5043]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[5006-5013]:ReturnStatement[5006-5013]"
    }, {
      "left" : "resolveInlineConflicts();",
      "right" : "resolveInlineConflicts();",
      "info" : "ExpressionStatement[5048-5073]:ExpressionStatement[5048-5073]"
    }, {
      "left" : "decomposeExpressions(fnNames);",
      "right" : "decomposeExpressions(fnNames);",
      "info" : "ExpressionStatement[5078-5108]:ExpressionStatement[5078-5108]"
    }, {
      "left" : "NodeTraversal.traverse(compiler, root,\n        new CallVisitor(\n            fns, anonFns, new Inline(injector, specializationState)));",
      "right" : "NodeTraversal.traverse(compiler, root,\n        new CallVisitor(\n            fns, anonFns, new Inline(injector, specializationState)));",
      "info" : "ExpressionStatement[5113-5247]:ExpressionStatement[5113-5247]"
    }, {
      "left" : "removeInlinedFunctions();",
      "right" : "removeInlinedFunctions();",
      "info" : "ExpressionStatement[5253-5278]:ExpressionStatement[5253-5278]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5539-5707]:Block[5539-5707]"
    }, {
      "left" : "return inlineLocalFunctions || nodeTraversal.inGlobalScope();",
      "right" : "return inlineLocalFunctions || nodeTraversal.inGlobalScope();",
      "info" : "ReturnStatement[5640-5701]:ReturnStatement[5640-5701]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5769-5982]:Block[5769-5982]"
    }, {
      "left" : "if ((t.inGlobalScope() && inlineGlobalFunctions)\n          || (!t.inGlobalScope() && inlineLocalFunctions))",
      "right" : "if ((t.inGlobalScope() && inlineGlobalFunctions)\n          || (!t.inGlobalScope() && inlineLocalFunctions))",
      "info" : "IfStatement[5777-5976]:IfStatement[5777-5976]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5885-5976]:Block[5885-5976]"
    }, {
      "left" : "findNamedFunctions(t, n, parent);",
      "right" : "findNamedFunctions(t, n, parent);",
      "info" : "ExpressionStatement[5895-5928]:ExpressionStatement[5895-5928]"
    }, {
      "left" : "findFunctionExpressions(t, n);",
      "right" : "findFunctionExpressions(t, n);",
      "info" : "ExpressionStatement[5938-5968]:ExpressionStatement[5938-5968]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6057-7079]:Block[6057-7079]"
    }, {
      "left" : "if (!NodeUtil.isStatement(n))",
      "right" : "if (!NodeUtil.isStatement(n))",
      "info" : "IfStatement[6065-6176]:IfStatement[6065-6176]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6095-6176]:Block[6095-6176]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[6161-6168]:ReturnStatement[6161-6168]"
    }, {
      "left" : "switch (n.getType()) {\n        // Functions expressions in the form of:\n        //   var fooFn = function(x) { return ... }\n        case Token.VAR:\n          Preconditions.checkState(n.hasOneChild());\n          Node nameNode = n.getFirstChild();\n          if (nameNode.getType() == Token.NAME && nameNode.hasChildren()\n              && nameNode.getFirstChild().getType() == Token.FUNCTION) {\n            maybeAddFunction(new FunctionVar(n), t.getModule());\n          }\n          break;\n\n        // Named functions\n        // function Foo(x) { return ... }\n        case Token.FUNCTION:\n          Preconditions.checkState(NodeUtil.isStatementBlock(parent)\n              || parent.getType() == Token.LABEL);\n          if (!NodeUtil.isFunctionExpression(n)) {\n            Function fn = new NamedFunction(n);\n            maybeAddFunction(fn, t.getModule());\n          }\n          break;\n      }",
      "right" : "switch (n.getType()) {\n        // Functions expressions in the form of:\n        //   var fooFn = function(x) { return ... }\n        case Token.VAR:\n          Preconditions.checkState(n.hasOneChild());\n          Node nameNode = n.getFirstChild();\n          if (nameNode.getType() == Token.NAME && nameNode.hasChildren()\n              && nameNode.getFirstChild().getType() == Token.FUNCTION) {\n            maybeAddFunction(new FunctionVar(n), t.getModule());\n          }\n          break;\n\n        // Named functions\n        // function Foo(x) { return ... }\n        case Token.FUNCTION:\n          Preconditions.checkState(NodeUtil.isStatementBlock(parent)\n              || parent.getType() == Token.LABEL);\n          if (!NodeUtil.isFunctionExpression(n)) {\n            Function fn = new NamedFunction(n);\n            maybeAddFunction(fn, t.getModule());\n          }\n          break;\n      }",
      "info" : "SwitchStatement[6184-7073]:SwitchStatement[6184-7073]"
    }, {
      "left" : "case Token.VAR:",
      "right" : "case Token.VAR:",
      "info" : "SwitchCase[6316-6331]:SwitchCase[6316-6331]"
    }, {
      "left" : "Preconditions.checkState(n.hasOneChild());",
      "right" : "Preconditions.checkState(n.hasOneChild());",
      "info" : "ExpressionStatement[6342-6384]:ExpressionStatement[6342-6384]"
    }, {
      "left" : "Node nameNode = n.getFirstChild();",
      "right" : "Node nameNode = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[6395-6429]:VariableDeclarationStatement[6395-6429]"
    }, {
      "left" : "if (nameNode.getType() == Token.NAME && nameNode.hasChildren()\n              && nameNode.getFirstChild().getType() == Token.FUNCTION)",
      "right" : "if (nameNode.getType() == Token.NAME && nameNode.hasChildren()\n              && nameNode.getFirstChild().getType() == Token.FUNCTION)",
      "info" : "IfStatement[6440-6652]:IfStatement[6440-6652]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6574-6652]:Block[6574-6652]"
    }, {
      "left" : "maybeAddFunction(new FunctionVar(n), t.getModule());",
      "right" : "maybeAddFunction(new FunctionVar(n), t.getModule());",
      "info" : "ExpressionStatement[6588-6640]:ExpressionStatement[6588-6640]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[6663-6669]:BreakStatement[6663-6669]"
    }, {
      "left" : "case Token.FUNCTION:",
      "right" : "case Token.FUNCTION:",
      "info" : "SwitchCase[6748-6768]:SwitchCase[6748-6768]"
    }, {
      "left" : "Preconditions.checkState(NodeUtil.isStatementBlock(parent)\n              || parent.getType() == Token.LABEL);",
      "right" : "Preconditions.checkState(NodeUtil.isStatementBlock(parent)\n              || parent.getType() == Token.LABEL);",
      "info" : "ExpressionStatement[6779-6888]:ExpressionStatement[6779-6888]"
    }, {
      "left" : "if (!NodeUtil.isFunctionExpression(n))",
      "right" : "if (!NodeUtil.isFunctionExpression(n))",
      "info" : "IfStatement[6899-7048]:IfStatement[6899-7048]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6938-7048]:Block[6938-7048]"
    }, {
      "left" : "Function fn = new NamedFunction(n);",
      "right" : "Function fn = new NamedFunction(n);",
      "info" : "VariableDeclarationStatement[6952-6987]:VariableDeclarationStatement[6952-6987]"
    }, {
      "left" : "maybeAddFunction(fn, t.getModule());",
      "right" : "maybeAddFunction(fn, t.getModule());",
      "info" : "ExpressionStatement[7000-7036]:ExpressionStatement[7000-7036]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[7059-7065]:BreakStatement[7059-7065]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7342-8175]:Block[7342-8175]"
    }, {
      "left" : "switch (n.getType()) {\n        // Functions expressions in the form of:\n        //   (function(){})();\n        case Token.CALL:\n          Node fnNode = null;\n          if (n.getFirstChild().getType() == Token.FUNCTION) {\n            fnNode = n.getFirstChild();\n          } else if (NodeUtil.isFunctionObjectCall(n)) {\n            Node fnIdentifingNode = n.getFirstChild().getFirstChild();\n            if (fnIdentifingNode.getType() == Token.FUNCTION) {\n              fnNode = fnIdentifingNode;\n            }\n          }\n\n          // If a interesting function was discovered, add it.\n          if (fnNode != null) {\n            Function fn = new FunctionExpression(fnNode, callsSeen++);\n            maybeAddFunction(fn, t.getModule());\n            anonFns.put(fnNode, fn.getName());\n          }\n          break;\n      }",
      "right" : "switch (n.getType()) {\n        // Functions expressions in the form of:\n        //   (function(){})();\n        case Token.CALL:\n          Node fnNode = null;\n          if (n.getFirstChild().getType() == Token.FUNCTION) {\n            fnNode = n.getFirstChild();\n          } else if (NodeUtil.isFunctionObjectCall(n)) {\n            Node fnIdentifingNode = n.getFirstChild().getFirstChild();\n            if (fnIdentifingNode.getType() == Token.FUNCTION) {\n              fnNode = fnIdentifingNode;\n            }\n          }\n\n          // If a interesting function was discovered, add it.\n          if (fnNode != null) {\n            Function fn = new FunctionExpression(fnNode, callsSeen++);\n            maybeAddFunction(fn, t.getModule());\n            anonFns.put(fnNode, fn.getName());\n          }\n          break;\n      }",
      "info" : "SwitchStatement[7350-8169]:SwitchStatement[7350-8169]"
    }, {
      "left" : "case Token.CALL:",
      "right" : "case Token.CALL:",
      "info" : "SwitchCase[7461-7477]:SwitchCase[7461-7477]"
    }, {
      "left" : "Node fnNode = null;",
      "right" : "Node fnNode = null;",
      "info" : "VariableDeclarationStatement[7488-7507]:VariableDeclarationStatement[7488-7507]"
    }, {
      "left" : "if (n.getFirstChild().getType() == Token.FUNCTION)",
      "right" : "if (n.getFirstChild().getType() == Token.FUNCTION)",
      "info" : "IfStatement[7518-7869]:IfStatement[7518-7869]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7569-7622]:Block[7569-7622]"
    }, {
      "left" : "fnNode = n.getFirstChild();",
      "right" : "fnNode = n.getFirstChild();",
      "info" : "ExpressionStatement[7583-7610]:ExpressionStatement[7583-7610]"
    }, {
      "left" : "if (NodeUtil.isFunctionObjectCall(n))",
      "right" : "if (NodeUtil.isFunctionObjectCall(n))",
      "info" : "IfStatement[7628-7869]:IfStatement[7628-7869]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7666-7869]:Block[7666-7869]"
    }, {
      "left" : "Node fnIdentifingNode = n.getFirstChild().getFirstChild();",
      "right" : "Node fnIdentifingNode = n.getFirstChild().getFirstChild();",
      "info" : "VariableDeclarationStatement[7680-7738]:VariableDeclarationStatement[7680-7738]"
    }, {
      "left" : "if (fnIdentifingNode.getType() == Token.FUNCTION)",
      "right" : "if (fnIdentifingNode.getType() == Token.FUNCTION)",
      "info" : "IfStatement[7751-7857]:IfStatement[7751-7857]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7801-7857]:Block[7801-7857]"
    }, {
      "left" : "fnNode = fnIdentifingNode;",
      "right" : "fnNode = fnIdentifingNode;",
      "info" : "ExpressionStatement[7817-7843]:ExpressionStatement[7817-7843]"
    }, {
      "left" : "if (fnNode != null)",
      "right" : "if (fnNode != null)",
      "info" : "IfStatement[7944-8144]:IfStatement[7944-8144]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7964-8144]:Block[7964-8144]"
    }, {
      "left" : "Function fn = new FunctionExpression(fnNode, callsSeen++);",
      "right" : "Function fn = new FunctionExpression(fnNode, callsSeen++);",
      "info" : "VariableDeclarationStatement[7978-8036]:VariableDeclarationStatement[7978-8036]"
    }, {
      "left" : "maybeAddFunction(fn, t.getModule());",
      "right" : "maybeAddFunction(fn, t.getModule());",
      "info" : "ExpressionStatement[8049-8085]:ExpressionStatement[8049-8085]"
    }, {
      "left" : "anonFns.put(fnNode, fn.getName());",
      "right" : "anonFns.put(fnNode, fn.getName());",
      "info" : "ExpressionStatement[8098-8132]:ExpressionStatement[8098-8132]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[8155-8161]:BreakStatement[8155-8161]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8399-10678]:Block[8399-10678]"
    }, {
      "left" : "String name = fn.getName();",
      "right" : "String name = fn.getName();",
      "info" : "VariableDeclarationStatement[8405-8432]:VariableDeclarationStatement[8405-8432]"
    }, {
      "left" : "FunctionState fs = getOrCreateFunctionState(name);",
      "right" : "FunctionState fs = getOrCreateFunctionState(name);",
      "info" : "VariableDeclarationStatement[8437-8487]:VariableDeclarationStatement[8437-8487]"
    }, {
      "left" : "if (fs.hasExistingFunctionDefinition())",
      "right" : "if (fs.hasExistingFunctionDefinition())",
      "info" : "IfStatement[8648-10674]:IfStatement[8648-10674]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8688-8722]:Block[8688-8722]"
    }, {
      "left" : "fs.setInline(false);",
      "right" : "fs.setInline(false);",
      "info" : "ExpressionStatement[8696-8716]:ExpressionStatement[8696-8716]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8728-10674]:Block[8728-10674]"
    }, {
      "left" : "if (fs.canInline())",
      "right" : "if (fs.canInline())",
      "info" : "IfStatement[8810-10668]:IfStatement[8810-10668]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8830-10668]:Block[8830-10668]"
    }, {
      "left" : "fs.setFn(fn);",
      "right" : "fs.setFn(fn);",
      "info" : "ExpressionStatement[8883-8896]:ExpressionStatement[8883-8896]"
    }, {
      "left" : "if (injector.isDirectCallNodeReplacementPossible(\n            fn.getFunctionNode()))",
      "right" : "if (injector.isDirectCallNodeReplacementPossible(\n            fn.getFunctionNode()))",
      "info" : "IfStatement[8905-9036]:IfStatement[8905-9036]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8990-9036]:Block[8990-9036]"
    }, {
      "left" : "fs.inlineDirectly(true);",
      "right" : "fs.inlineDirectly(true);",
      "info" : "ExpressionStatement[9002-9026]:ExpressionStatement[9002-9026]"
    }, {
      "left" : "if (!isCandidateFunction(fn))",
      "right" : "if (!isCandidateFunction(fn))",
      "info" : "IfStatement[9217-9336]:IfStatement[9217-9336]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9247-9336]:Block[9247-9336]"
    }, {
      "left" : "fs.setInline(false);",
      "right" : "fs.setInline(false);",
      "info" : "ExpressionStatement[9306-9326]:ExpressionStatement[9306-9326]"
    }, {
      "left" : "if (fs.canInline())",
      "right" : "if (fs.canInline())",
      "info" : "IfStatement[9412-10453]:IfStatement[9412-10453]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9432-10453]:Block[9432-10453]"
    }, {
      "left" : "fs.setModule(module);",
      "right" : "fs.setModule(module);",
      "info" : "ExpressionStatement[9444-9465]:ExpressionStatement[9444-9465]"
    }, {
      "left" : "Node fnNode = fn.getFunctionNode();",
      "right" : "Node fnNode = fn.getFunctionNode();",
      "info" : "VariableDeclarationStatement[9477-9512]:VariableDeclarationStatement[9477-9512]"
    }, {
      "left" : "Set<String> namesToAlias =\n              FunctionArgumentInjector.findModifiedParameters(fnNode);",
      "right" : "Set<String> namesToAlias =\n              FunctionArgumentInjector.findModifiedParameters(fnNode);",
      "info" : "VariableDeclarationStatement[9523-9620]:VariableDeclarationStatement[9523-9620]"
    }, {
      "left" : "if (!namesToAlias.isEmpty())",
      "right" : "if (!namesToAlias.isEmpty())",
      "info" : "IfStatement[9631-9757]:IfStatement[9631-9757]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9660-9757]:Block[9660-9757]"
    }, {
      "left" : "fs.inlineDirectly(false);",
      "right" : "fs.inlineDirectly(false);",
      "info" : "ExpressionStatement[9674-9699]:ExpressionStatement[9674-9699]"
    }, {
      "left" : "fs.setNamesToAlias(namesToAlias);",
      "right" : "fs.setNamesToAlias(namesToAlias);",
      "info" : "ExpressionStatement[9712-9745]:ExpressionStatement[9712-9745]"
    }, {
      "left" : "Node block = NodeUtil.getFunctionBody(fnNode);",
      "right" : "Node block = NodeUtil.getFunctionBody(fnNode);",
      "info" : "VariableDeclarationStatement[9769-9815]:VariableDeclarationStatement[9769-9815]"
    }, {
      "left" : "if (NodeUtil.referencesThis(block))",
      "right" : "if (NodeUtil.referencesThis(block))",
      "info" : "IfStatement[9826-9915]:IfStatement[9826-9915]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9862-9915]:Block[9862-9915]"
    }, {
      "left" : "fs.setReferencesThis(true);",
      "right" : "fs.setReferencesThis(true);",
      "info" : "ExpressionStatement[9876-9903]:ExpressionStatement[9876-9903]"
    }, {
      "left" : "if (NodeUtil.containsFunction(block))",
      "right" : "if (NodeUtil.containsFunction(block))",
      "info" : "IfStatement[9927-10443]:IfStatement[9927-10443]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9965-10443]:Block[9965-10443]"
    }, {
      "left" : "fs.setHasInnerFunctions(true);",
      "right" : "fs.setHasInnerFunctions(true);",
      "info" : "ExpressionStatement[9979-10009]:ExpressionStatement[9979-10009]"
    }, {
      "left" : "if (hasLocalNames(fnNode))",
      "right" : "if (hasLocalNames(fnNode))",
      "info" : "IfStatement[10354-10431]:IfStatement[10354-10431]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10381-10431]:Block[10381-10431]"
    }, {
      "left" : "fs.setInline(false);",
      "right" : "fs.setInline(false);",
      "info" : "ExpressionStatement[10397-10417]:ExpressionStatement[10397-10417]"
    }, {
      "left" : "if (fs.canInline() && !fs.canInlineDirectly())",
      "right" : "if (fs.canInline() && !fs.canInlineDirectly())",
      "info" : "IfStatement[10510-10660]:IfStatement[10510-10660]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10557-10660]:Block[10557-10660]"
    }, {
      "left" : "if (!blockFunctionInliningEnabled)",
      "right" : "if (!blockFunctionInliningEnabled)",
      "info" : "IfStatement[10569-10650]:IfStatement[10569-10650]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10604-10650]:Block[10604-10650]"
    }, {
      "left" : "fs.setInline(false);",
      "right" : "fs.setInline(false);",
      "info" : "ExpressionStatement[10618-10638]:ExpressionStatement[10618-10638]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10862-11119]:Block[10862-11119]"
    }, {
      "left" : "Node block = NodeUtil.getFunctionBody(fnNode);",
      "right" : "Node block = NodeUtil.getFunctionBody(fnNode);",
      "info" : "VariableDeclarationStatement[10868-10914]:VariableDeclarationStatement[10868-10914]"
    }, {
      "left" : "return NodeUtil.getFnParameters(fnNode).hasChildren()\n        || NodeUtil.has(\n             block,\n             new NodeUtil.MatchDeclaration(),\n             new NodeUtil.MatchShallowStatement());",
      "right" : "return NodeUtil.getFnParameters(fnNode).hasChildren()\n        || NodeUtil.has(\n             block,\n             new NodeUtil.MatchDeclaration(),\n             new NodeUtil.MatchShallowStatement());",
      "info" : "ReturnStatement[10919-11115]:ReturnStatement[10919-11115]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11296-11359]:Block[11296-11359]"
    }, {
      "left" : "return (t.inGlobalScope()) ? null : t.getScopeRoot();",
      "right" : "return (t.inGlobalScope()) ? null : t.getScopeRoot();",
      "info" : "ReturnStatement[11302-11355]:ReturnStatement[11302-11355]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11511-12527]:Block[11511-12527]"
    }, {
      "left" : "String fnName = fn.getName();",
      "right" : "String fnName = fn.getName();",
      "info" : "VariableDeclarationStatement[11557-11586]:VariableDeclarationStatement[11557-11586]"
    }, {
      "left" : "if (compiler.getCodingConvention().isExported(fnName))",
      "right" : "if (compiler.getCodingConvention().isExported(fnName))",
      "info" : "IfStatement[11591-12052]:IfStatement[11591-12052]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11646-12052]:Block[11646-12052]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[12033-12046]:ReturnStatement[12033-12046]"
    }, {
      "left" : "if (RenameProperties.RENAME_PROPERTY_FUNCTION_NAME.equals(fnName))",
      "right" : "if (RenameProperties.RENAME_PROPERTY_FUNCTION_NAME.equals(fnName))",
      "info" : "IfStatement[12100-12194]:IfStatement[12100-12194]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12167-12194]:Block[12167-12194]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[12175-12188]:ReturnStatement[12175-12188]"
    }, {
      "left" : "if (specializationState != null &&\n        !specializationState.canFixupFunction(fn.getFunctionNode()))",
      "right" : "if (specializationState != null &&\n        !specializationState.canFixupFunction(fn.getFunctionNode()))",
      "info" : "IfStatement[12278-12409]:IfStatement[12278-12409]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12382-12409]:Block[12382-12409]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[12390-12403]:ReturnStatement[12390-12403]"
    }, {
      "left" : "Node fnNode = fn.getFunctionNode();",
      "right" : "Node fnNode = fn.getFunctionNode();",
      "info" : "VariableDeclarationStatement[12415-12450]:VariableDeclarationStatement[12415-12450]"
    }, {
      "left" : "return injector.doesFunctionMeetMinimumRequirements(fnName, fnNode);",
      "right" : "return injector.doesFunctionMeetMinimumRequirements(fnName, fnNode);",
      "info" : "ReturnStatement[12455-12523]:ReturnStatement[12455-12523]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13130-13237]:Block[13130-13237]"
    }, {
      "left" : "this.functionMap = fns;",
      "right" : "this.functionMap = fns;",
      "info" : "ExpressionStatement[13138-13161]:ExpressionStatement[13138-13161]"
    }, {
      "left" : "this.anonFunctionMap = anonFns;",
      "right" : "this.anonFunctionMap = anonFns;",
      "info" : "ExpressionStatement[13168-13199]:ExpressionStatement[13168-13199]"
    }, {
      "left" : "this.callback = callback;",
      "right" : "this.callback = callback;",
      "info" : "ExpressionStatement[13206-13231]:ExpressionStatement[13206-13231]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13299-14501]:Block[13299-14501]"
    }, {
      "left" : "switch (n.getType()) {\n        // Function calls\n        case Token.CALL:\n          Node child = n.getFirstChild();\n          String name = null;\n          // NOTE: The normalization pass insures that local names do not\n          // collide with global names.\n          if (child.getType() == Token.NAME) {\n            name = child.getString();\n          } else if (child.getType() == Token.FUNCTION) {\n            name = anonFunctionMap.get(child);\n          } else if (NodeUtil.isFunctionObjectCall(n)) {\n            Preconditions.checkState(NodeUtil.isGet(child));\n            Node fnIdentifingNode = child.getFirstChild();\n            if (fnIdentifingNode.getType() == Token.NAME) {\n              name = fnIdentifingNode.getString();\n            } else if (fnIdentifingNode.getType() == Token.FUNCTION) {\n              name = anonFunctionMap.get(fnIdentifingNode);\n            }\n          }\n\n          if (name != null) {\n            FunctionState fs = functionMap.get(name);\n            // Only visit call-sites for functions that can be inlined.\n            if (fs != null) {\n              callback.visitCallSite(t, n, parent, fs);\n            }\n          }\n          break;\n      }",
      "right" : "switch (n.getType()) {\n        // Function calls\n        case Token.CALL:\n          Node child = n.getFirstChild();\n          String name = null;\n          // NOTE: The normalization pass insures that local names do not\n          // collide with global names.\n          if (child.getType() == Token.NAME) {\n            name = child.getString();\n          } else if (child.getType() == Token.FUNCTION) {\n            name = anonFunctionMap.get(child);\n          } else if (NodeUtil.isFunctionObjectCall(n)) {\n            Preconditions.checkState(NodeUtil.isGet(child));\n            Node fnIdentifingNode = child.getFirstChild();\n            if (fnIdentifingNode.getType() == Token.NAME) {\n              name = fnIdentifingNode.getString();\n            } else if (fnIdentifingNode.getType() == Token.FUNCTION) {\n              name = anonFunctionMap.get(fnIdentifingNode);\n            }\n          }\n\n          if (name != null) {\n            FunctionState fs = functionMap.get(name);\n            // Only visit call-sites for functions that can be inlined.\n            if (fs != null) {\n              callback.visitCallSite(t, n, parent, fs);\n            }\n          }\n          break;\n      }",
      "info" : "SwitchStatement[13307-14495]:SwitchStatement[13307-14495]"
    }, {
      "left" : "case Token.CALL:",
      "right" : "case Token.CALL:",
      "info" : "SwitchCase[13364-13380]:SwitchCase[13364-13380]"
    }, {
      "left" : "Node child = n.getFirstChild();",
      "right" : "Node child = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[13391-13422]:VariableDeclarationStatement[13391-13422]"
    }, {
      "left" : "String name = null;",
      "right" : "String name = null;",
      "info" : "VariableDeclarationStatement[13433-13452]:VariableDeclarationStatement[13433-13452]"
    }, {
      "left" : "if (child.getType() == Token.NAME)",
      "right" : "if (child.getType() == Token.NAME)",
      "info" : "IfStatement[13577-14201]:IfStatement[13577-14201]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13612-13663]:Block[13612-13663]"
    }, {
      "left" : "name = child.getString();",
      "right" : "name = child.getString();",
      "info" : "ExpressionStatement[13626-13651]:ExpressionStatement[13626-13651]"
    }, {
      "left" : "if (child.getType() == Token.FUNCTION)",
      "right" : "if (child.getType() == Token.FUNCTION)",
      "info" : "IfStatement[13669-14201]:IfStatement[13669-14201]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13708-13768]:Block[13708-13768]"
    }, {
      "left" : "name = anonFunctionMap.get(child);",
      "right" : "name = anonFunctionMap.get(child);",
      "info" : "ExpressionStatement[13722-13756]:ExpressionStatement[13722-13756]"
    }, {
      "left" : "if (NodeUtil.isFunctionObjectCall(n))",
      "right" : "if (NodeUtil.isFunctionObjectCall(n))",
      "info" : "IfStatement[13774-14201]:IfStatement[13774-14201]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13812-14201]:Block[13812-14201]"
    }, {
      "left" : "Preconditions.checkState(NodeUtil.isGet(child));",
      "right" : "Preconditions.checkState(NodeUtil.isGet(child));",
      "info" : "ExpressionStatement[13826-13874]:ExpressionStatement[13826-13874]"
    }, {
      "left" : "Node fnIdentifingNode = child.getFirstChild();",
      "right" : "Node fnIdentifingNode = child.getFirstChild();",
      "info" : "VariableDeclarationStatement[13887-13933]:VariableDeclarationStatement[13887-13933]"
    }, {
      "left" : "if (fnIdentifingNode.getType() == Token.NAME)",
      "right" : "if (fnIdentifingNode.getType() == Token.NAME)",
      "info" : "IfStatement[13946-14189]:IfStatement[13946-14189]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13992-14058]:Block[13992-14058]"
    }, {
      "left" : "name = fnIdentifingNode.getString();",
      "right" : "name = fnIdentifingNode.getString();",
      "info" : "ExpressionStatement[14008-14044]:ExpressionStatement[14008-14044]"
    }, {
      "left" : "if (fnIdentifingNode.getType() == Token.FUNCTION)",
      "right" : "if (fnIdentifingNode.getType() == Token.FUNCTION)",
      "info" : "IfStatement[14064-14189]:IfStatement[14064-14189]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14114-14189]:Block[14114-14189]"
    }, {
      "left" : "name = anonFunctionMap.get(fnIdentifingNode);",
      "right" : "name = anonFunctionMap.get(fnIdentifingNode);",
      "info" : "ExpressionStatement[14130-14175]:ExpressionStatement[14130-14175]"
    }, {
      "left" : "if (name != null)",
      "right" : "if (name != null)",
      "info" : "IfStatement[14213-14470]:IfStatement[14213-14470]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14231-14470]:Block[14231-14470]"
    }, {
      "left" : "FunctionState fs = functionMap.get(name);",
      "right" : "FunctionState fs = functionMap.get(name);",
      "info" : "VariableDeclarationStatement[14245-14286]:VariableDeclarationStatement[14245-14286]"
    }, {
      "left" : "if (fs != null)",
      "right" : "if (fs != null)",
      "info" : "IfStatement[14371-14458]:IfStatement[14371-14458]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14387-14458]:Block[14387-14458]"
    }, {
      "left" : "callback.visitCallSite(t, n, parent, fs);",
      "right" : "callback.visitCallSite(t, n, parent, fs);",
      "info" : "ExpressionStatement[14403-14444]:ExpressionStatement[14403-14444]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[14481-14487]:BreakStatement[14481-14487]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14658-15735]:Block[14658-15735]"
    }, {
      "left" : "Node parent = name.getParent();",
      "right" : "Node parent = name.getParent();",
      "info" : "VariableDeclarationStatement[14664-14695]:VariableDeclarationStatement[14664-14695]"
    }, {
      "left" : "Preconditions.checkState(name.getType() == Token.NAME);",
      "right" : "Preconditions.checkState(name.getType() == Token.NAME);",
      "info" : "ExpressionStatement[14700-14755]:ExpressionStatement[14700-14755]"
    }, {
      "left" : "if (parent.getType() == Token.VAR || parent.getType() == Token.FUNCTION)",
      "right" : "if (parent.getType() == Token.VAR || parent.getType() == Token.FUNCTION)",
      "info" : "IfStatement[14760-14972]:IfStatement[14760-14972]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14833-14972]:Block[14833-14972]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[14954-14966]:ReturnStatement[14954-14966]"
    }, {
      "left" : "if (parent.getType() == Token.CALL && parent.getFirstChild() == name)",
      "right" : "if (parent.getType() == Token.CALL && parent.getFirstChild() == name)",
      "info" : "IfStatement[14978-15127]:IfStatement[14978-15127]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15048-15127]:Block[15048-15127]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[15109-15121]:ReturnStatement[15109-15121]"
    }, {
      "left" : "if (NodeUtil.isGet(parent)\n         && name == parent.getFirstChild()\n         && name.getNext().getType() == Token.STRING\n         && name.getNext().getString().equals(\"call\"))",
      "right" : "if (NodeUtil.isGet(parent)\n         && name == parent.getFirstChild()\n         && name.getNext().getType() == Token.STRING\n         && name.getNext().getString().equals(\"call\"))",
      "info" : "IfStatement[15341-15713]:IfStatement[15341-15713]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15519-15713]:Block[15519-15713]"
    }, {
      "left" : "Node gramps = name.getAncestor(2);",
      "right" : "Node gramps = name.getAncestor(2);",
      "info" : "VariableDeclarationStatement[15527-15561]:VariableDeclarationStatement[15527-15561]"
    }, {
      "left" : "if (gramps.getType() == Token.CALL\n          && gramps.getFirstChild() == parent)",
      "right" : "if (gramps.getType() == Token.CALL\n          && gramps.getFirstChild() == parent)",
      "info" : "IfStatement[15568-15707]:IfStatement[15568-15707]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15650-15707]:Block[15650-15707]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[15687-15699]:ReturnStatement[15687-15699]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[15718-15731]:ReturnStatement[15718-15731]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16014-16082]:Block[16014-16082]"
    }, {
      "left" : "super(fns, anonFns, null);",
      "right" : "super(fns, anonFns, null);",
      "info" : "SuperConstructorInvocation[16022-16048]:SuperConstructorInvocation[16022-16048]"
    }, {
      "left" : "this.callback = this;",
      "right" : "this.callback = this;",
      "info" : "ExpressionStatement[16055-16076]:ExpressionStatement[16055-16076]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16158-16283]:Block[16158-16283]"
    }, {
      "left" : "super.visit(t, n, parent);",
      "right" : "super.visit(t, n, parent);",
      "info" : "ExpressionStatement[16166-16192]:ExpressionStatement[16166-16192]"
    }, {
      "left" : "if (n.getType() == Token.NAME)",
      "right" : "if (n.getType() == Token.NAME)",
      "info" : "IfStatement[16199-16277]:IfStatement[16199-16277]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16230-16277]:Block[16230-16277]"
    }, {
      "left" : "checkNameUsage(t, n, parent);",
      "right" : "checkNameUsage(t, n, parent);",
      "info" : "ExpressionStatement[16240-16269]:ExpressionStatement[16240-16269]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16387-16451]:Block[16387-16451]"
    }, {
      "left" : "maybeAddReference(t, fs, callNode, t.getModule());",
      "right" : "maybeAddReference(t, fs, callNode, t.getModule());",
      "info" : "ExpressionStatement[16395-16445]:ExpressionStatement[16395-16445]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16555-17365]:Block[16555-17365]"
    }, {
      "left" : "if (!fs.canInline())",
      "right" : "if (!fs.canInline())",
      "info" : "IfStatement[16563-16609]:IfStatement[16563-16609]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16584-16609]:Block[16584-16609]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[16594-16601]:ReturnStatement[16594-16601]"
    }, {
      "left" : "boolean referenceAdded = false;",
      "right" : "boolean referenceAdded = false;",
      "info" : "VariableDeclarationStatement[16617-16648]:VariableDeclarationStatement[16617-16648]"
    }, {
      "left" : "InliningMode mode = fs.canInlineDirectly()\n           ? InliningMode.DIRECT : InliningMode.BLOCK;",
      "right" : "InliningMode mode = fs.canInlineDirectly()\n           ? InliningMode.DIRECT : InliningMode.BLOCK;",
      "info" : "VariableDeclarationStatement[16655-16752]:VariableDeclarationStatement[16655-16752]"
    }, {
      "left" : "referenceAdded = maybeAddReferenceUsingMode(\n          t, fs, callNode, module, mode);",
      "right" : "referenceAdded = maybeAddReferenceUsingMode(\n          t, fs, callNode, module, mode);",
      "info" : "ExpressionStatement[16759-16845]:ExpressionStatement[16759-16845]"
    }, {
      "left" : "if (!referenceAdded &&\n          mode == InliningMode.DIRECT && blockFunctionInliningEnabled)",
      "right" : "if (!referenceAdded &&\n          mode == InliningMode.DIRECT && blockFunctionInliningEnabled)",
      "info" : "IfStatement[16852-17200]:IfStatement[16852-17200]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16946-17200]:Block[16946-17200]"
    }, {
      "left" : "mode = InliningMode.BLOCK;",
      "right" : "mode = InliningMode.BLOCK;",
      "info" : "ExpressionStatement[17069-17095]:ExpressionStatement[17069-17095]"
    }, {
      "left" : "referenceAdded = maybeAddReferenceUsingMode(\n            t, fs, callNode, module, mode);",
      "right" : "referenceAdded = maybeAddReferenceUsingMode(\n            t, fs, callNode, module, mode);",
      "info" : "ExpressionStatement[17104-17192]:ExpressionStatement[17104-17192]"
    }, {
      "left" : "if (!referenceAdded)",
      "right" : "if (!referenceAdded)",
      "info" : "IfStatement[17208-17359]:IfStatement[17208-17359]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17229-17359]:Block[17229-17359]"
    }, {
      "left" : "fs.setRemove(false);",
      "right" : "fs.setRemove(false);",
      "info" : "ExpressionStatement[17331-17351]:ExpressionStatement[17331-17351]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17517-18386]:Block[17517-18386]"
    }, {
      "left" : "if (specializationState != null)",
      "right" : "if (specializationState != null)",
      "info" : "IfStatement[17526-17888]:IfStatement[17526-17888]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17559-17888]:Block[17559-17888]"
    }, {
      "left" : "Node containingFunction = getContainingFunction(t);",
      "right" : "Node containingFunction = getContainingFunction(t);",
      "info" : "VariableDeclarationStatement[17677-17728]:VariableDeclarationStatement[17677-17728]"
    }, {
      "left" : "if (containingFunction != null && !specializationState.canFixupFunction(\n            containingFunction))",
      "right" : "if (containingFunction != null && !specializationState.canFixupFunction(\n            containingFunction))",
      "info" : "IfStatement[17737-17880]:IfStatement[17737-17880]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17843-17880]:Block[17843-17880]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[17857-17870]:ReturnStatement[17857-17870]"
    }, {
      "left" : "CanInlineResult result = injector.canInlineReferenceToFunction(\n          t, callNode, fs.getFn().getFunctionNode(),\n          fs.getNamesToAlias(), mode, fs.getReferencesThis(),\n          fs.hasInnerFunctions());",
      "right" : "CanInlineResult result = injector.canInlineReferenceToFunction(\n          t, callNode, fs.getFn().getFunctionNode(),\n          fs.getNamesToAlias(), mode, fs.getReferencesThis(),\n          fs.hasInnerFunctions());",
      "info" : "VariableDeclarationStatement[17896-18109]:VariableDeclarationStatement[17896-18109]"
    }, {
      "left" : "if (result != CanInlineResult.NO)",
      "right" : "if (result != CanInlineResult.NO)",
      "info" : "IfStatement[18116-18359]:IfStatement[18116-18359]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18150-18359]:Block[18150-18359]"
    }, {
      "left" : "boolean decompose =\n          (result == CanInlineResult.AFTER_DECOMPOSITION);",
      "right" : "boolean decompose =\n          (result == CanInlineResult.AFTER_DECOMPOSITION);",
      "info" : "VariableDeclarationStatement[18177-18255]:VariableDeclarationStatement[18177-18255]"
    }, {
      "left" : "fs.addReference(new Reference(callNode, module, mode, decompose));",
      "right" : "fs.addReference(new Reference(callNode, module, mode, decompose));",
      "info" : "ExpressionStatement[18264-18330]:ExpressionStatement[18264-18330]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[18339-18351]:ReturnStatement[18339-18351]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[18367-18380]:ReturnStatement[18367-18380]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18517-20003]:Block[18517-20003]"
    }, {
      "left" : "Preconditions.checkState(n.getType() == Token.NAME);",
      "right" : "Preconditions.checkState(n.getType() == Token.NAME);",
      "info" : "ExpressionStatement[18525-18577]:ExpressionStatement[18525-18577]"
    }, {
      "left" : "if (isCandidateUsage(n))",
      "right" : "if (isCandidateUsage(n))",
      "info" : "IfStatement[18585-18635]:IfStatement[18585-18635]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18610-18635]:Block[18610-18635]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[18620-18627]:ReturnStatement[18620-18627]"
    }, {
      "left" : "String name = n.getString();",
      "right" : "String name = n.getString();",
      "info" : "VariableDeclarationStatement[18716-18744]:VariableDeclarationStatement[18716-18744]"
    }, {
      "left" : "FunctionState fs = fns.get(name);",
      "right" : "FunctionState fs = fns.get(name);",
      "info" : "VariableDeclarationStatement[18751-18784]:VariableDeclarationStatement[18751-18784]"
    }, {
      "left" : "if (fs == null)",
      "right" : "if (fs == null)",
      "info" : "IfStatement[18791-18832]:IfStatement[18791-18832]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18807-18832]:Block[18807-18832]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[18817-18824]:ReturnStatement[18817-18824]"
    }, {
      "left" : "if (parent.getType() == Token.NEW)",
      "right" : "if (parent.getType() == Token.NEW)",
      "info" : "IfStatement[19093-19452]:IfStatement[19093-19452]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19128-19452]:Block[19128-19452]"
    }, {
      "left" : "Node target = parent.getFirstChild();",
      "right" : "Node target = parent.getFirstChild();",
      "info" : "VariableDeclarationStatement[19138-19175]:VariableDeclarationStatement[19138-19175]"
    }, {
      "left" : "if (target.getType() == Token.NAME && target.getString().equals(\n            ObjectPropertyStringPreprocess.EXTERN_OBJECT_PROPERTY_STRING))",
      "right" : "if (target.getType() == Token.NAME && target.getString().equals(\n            ObjectPropertyStringPreprocess.EXTERN_OBJECT_PROPERTY_STRING))",
      "info" : "IfStatement[19184-19444]:IfStatement[19184-19444]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19324-19444]:Block[19324-19444]"
    }, {
      "left" : "fs.setInline(false);",
      "right" : "fs.setInline(false);",
      "info" : "ExpressionStatement[19414-19434]:ExpressionStatement[19414-19434]"
    }, {
      "left" : "if (parent.getType() == Token.ASSIGN && parent.getFirstChild() == n)",
      "right" : "if (parent.getType() == Token.ASSIGN && parent.getFirstChild() == n)",
      "info" : "IfStatement[19525-19997]:IfStatement[19525-19997]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19594-19806]:Block[19594-19806]"
    }, {
      "left" : "fs.setInline(false);",
      "right" : "fs.setInline(false);",
      "info" : "ExpressionStatement[19778-19798]:ExpressionStatement[19778-19798]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19812-19997]:Block[19812-19997]"
    }, {
      "left" : "fs.setRemove(false);",
      "right" : "fs.setRemove(false);",
      "info" : "ExpressionStatement[19969-19989]:ExpressionStatement[19969-19989]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20351-20444]:Block[20351-20444]"
    }, {
      "left" : "this.injector = injector;",
      "right" : "this.injector = injector;",
      "info" : "ExpressionStatement[20359-20384]:ExpressionStatement[20359-20384]"
    }, {
      "left" : "this.specializationState = specializationState;",
      "right" : "this.specializationState = specializationState;",
      "info" : "ExpressionStatement[20391-20438]:ExpressionStatement[20391-20438]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20548-21640]:Block[20548-21640]"
    }, {
      "left" : "Preconditions.checkState(fs.hasExistingFunctionDefinition());",
      "right" : "Preconditions.checkState(fs.hasExistingFunctionDefinition());",
      "info" : "ExpressionStatement[20556-20617]:ExpressionStatement[20556-20617]"
    }, {
      "left" : "if (fs.canInline())",
      "right" : "if (fs.canInline())",
      "info" : "IfStatement[20624-21634]:IfStatement[20624-21634]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20644-21634]:Block[20644-21634]"
    }, {
      "left" : "Reference ref = fs.getReference(callNode);",
      "right" : "Reference ref = fs.getReference(callNode);",
      "info" : "VariableDeclarationStatement[20654-20696]:VariableDeclarationStatement[20654-20696]"
    }, {
      "left" : "if (ref != null)",
      "right" : "if (ref != null)",
      "info" : "IfStatement[21004-21626]:IfStatement[21004-21626]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21021-21626]:Block[21021-21626]"
    }, {
      "left" : "if (specializationState != null)",
      "right" : "if (specializationState != null)",
      "info" : "IfStatement[21033-21408]:IfStatement[21033-21408]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21066-21408]:Block[21066-21408]"
    }, {
      "left" : "Node containingFunction = getContainingFunction(t);",
      "right" : "Node containingFunction = getContainingFunction(t);",
      "info" : "VariableDeclarationStatement[21080-21131]:VariableDeclarationStatement[21080-21131]"
    }, {
      "left" : "if (containingFunction != null)",
      "right" : "if (containingFunction != null)",
      "info" : "IfStatement[21145-21396]:IfStatement[21145-21396]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21177-21396]:Block[21177-21396]"
    }, {
      "left" : "specializationState.reportSpecializedFunction(containingFunction);",
      "right" : "specializationState.reportSpecializedFunction(containingFunction);",
      "info" : "ExpressionStatement[21316-21382]:ExpressionStatement[21316-21382]"
    }, {
      "left" : "inlineFunction(t, callNode, fs, ref.mode);",
      "right" : "inlineFunction(t, callNode, fs, ref.mode);",
      "info" : "ExpressionStatement[21420-21462]:ExpressionStatement[21420-21462]"
    }, {
      "left" : "ref.inlined = true;",
      "right" : "ref.inlined = true;",
      "info" : "ExpressionStatement[21597-21616]:ExpressionStatement[21597-21616]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21813-22118]:Block[21813-22118]"
    }, {
      "left" : "Function fn = fs.getFn();",
      "right" : "Function fn = fs.getFn();",
      "info" : "VariableDeclarationStatement[21821-21846]:VariableDeclarationStatement[21821-21846]"
    }, {
      "left" : "String fnName = fn.getName();",
      "right" : "String fnName = fn.getName();",
      "info" : "VariableDeclarationStatement[21853-21882]:VariableDeclarationStatement[21853-21882]"
    }, {
      "left" : "Node fnNode = fs.getSafeFnNode();",
      "right" : "Node fnNode = fs.getSafeFnNode();",
      "info" : "VariableDeclarationStatement[21889-21922]:VariableDeclarationStatement[21889-21922]"
    }, {
      "left" : "Node newCode = injector.inline(t, callNode, fnName, fnNode, mode);",
      "right" : "Node newCode = injector.inline(t, callNode, fnName, fnNode, mode);",
      "info" : "VariableDeclarationStatement[21930-21996]:VariableDeclarationStatement[21930-21996]"
    }, {
      "left" : "t.getCompiler().reportCodeChange();",
      "right" : "t.getCompiler().reportCodeChange();",
      "info" : "ExpressionStatement[22003-22038]:ExpressionStatement[22003-22038]"
    }, {
      "left" : "t.getCompiler().addToDebugLog(\"Inlined function: \" + fn.getName());",
      "right" : "t.getCompiler().addToDebugLog(\"Inlined function: \" + fn.getName());",
      "info" : "ExpressionStatement[22045-22112]:ExpressionStatement[22045-22112]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22296-22544]:Block[22296-22544]"
    }, {
      "left" : "Iterator<Entry<String, FunctionState>> i;",
      "right" : "Iterator<Entry<String, FunctionState>> i;",
      "info" : "VariableDeclarationStatement[22301-22342]:VariableDeclarationStatement[22301-22342]"
    }, {
      "left" : "for (i = fns.entrySet().iterator(); i.hasNext())",
      "right" : "for (i = fns.entrySet().iterator(); i.hasNext())",
      "info" : "ForStatement[22346-22540]:ForStatement[22346-22540]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22396-22540]:Block[22396-22540]"
    }, {
      "left" : "FunctionState fs = i.next().getValue();",
      "right" : "FunctionState fs = i.next().getValue();",
      "info" : "VariableDeclarationStatement[22403-22442]:VariableDeclarationStatement[22403-22442]"
    }, {
      "left" : "if (!fs.hasExistingFunctionDefinition() || !fs.canInline())",
      "right" : "if (!fs.hasExistingFunctionDefinition() || !fs.canInline())",
      "info" : "IfStatement[22448-22535]:IfStatement[22448-22535]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22508-22535]:Block[22508-22535]"
    }, {
      "left" : "i.remove();",
      "right" : "i.remove();",
      "info" : "ExpressionStatement[22517-22528]:ExpressionStatement[22517-22528]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22663-23246]:Block[22663-23246]"
    }, {
      "left" : "Iterator<Entry<String, FunctionState>> i;",
      "right" : "Iterator<Entry<String, FunctionState>> i;",
      "info" : "VariableDeclarationStatement[22669-22710]:VariableDeclarationStatement[22669-22710]"
    }, {
      "left" : "for (i = fns.entrySet().iterator(); i.hasNext())",
      "right" : "for (i = fns.entrySet().iterator(); i.hasNext())",
      "info" : "ForStatement[22715-23242]:ForStatement[22715-23242]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22765-23242]:Block[22765-23242]"
    }, {
      "left" : "FunctionState fs = i.next().getValue();",
      "right" : "FunctionState fs = i.next().getValue();",
      "info" : "VariableDeclarationStatement[22773-22812]:VariableDeclarationStatement[22773-22812]"
    }, {
      "left" : "if (fs.hasReferences())",
      "right" : "if (fs.hasReferences())",
      "info" : "IfStatement[22819-23236]:IfStatement[22819-23236]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22843-23084]:Block[22843-23084]"
    }, {
      "left" : "boolean lowersCost = mimimizeCost(fs);",
      "right" : "boolean lowersCost = mimimizeCost(fs);",
      "info" : "VariableDeclarationStatement[22916-22954]:VariableDeclarationStatement[22916-22954]"
    }, {
      "left" : "if (!lowersCost)",
      "right" : "if (!lowersCost)",
      "info" : "IfStatement[22963-23076]:IfStatement[22963-23076]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22980-23076]:Block[22980-23076]"
    }, {
      "left" : "i.remove();",
      "right" : "i.remove();",
      "info" : "ExpressionStatement[23055-23066]:ExpressionStatement[23055-23066]"
    }, {
      "left" : "if (!fs.canRemove())",
      "right" : "if (!fs.canRemove())",
      "info" : "IfStatement[23090-23236]:IfStatement[23090-23236]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23111-23236]:Block[23111-23236]"
    }, {
      "left" : "i.remove();",
      "right" : "i.remove();",
      "info" : "ExpressionStatement[23217-23228]:ExpressionStatement[23217-23228]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23491-23866]:Block[23491-23866]"
    }, {
      "left" : "if (!inliningLowersCost(fs))",
      "right" : "if (!inliningLowersCost(fs))",
      "info" : "IfStatement[23497-23845]:IfStatement[23497-23845]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23526-23845]:Block[23526-23845]"
    }, {
      "left" : "if (fs.hasBlockInliningReferences())",
      "right" : "if (fs.hasBlockInliningReferences())",
      "info" : "IfStatement[23587-23839]:IfStatement[23587-23839]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23624-23802]:Block[23624-23802]"
    }, {
      "left" : "fs.setRemove(false);",
      "right" : "fs.setRemove(false);",
      "info" : "ExpressionStatement[23634-23654]:ExpressionStatement[23634-23654]"
    }, {
      "left" : "fs.removeBlockInliningReferences();",
      "right" : "fs.removeBlockInliningReferences();",
      "info" : "ExpressionStatement[23663-23698]:ExpressionStatement[23663-23698]"
    }, {
      "left" : "if (!fs.hasReferences() || !inliningLowersCost(fs))",
      "right" : "if (!fs.hasReferences() || !inliningLowersCost(fs))",
      "info" : "IfStatement[23707-23794]:IfStatement[23707-23794]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23759-23794]:Block[23759-23794]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[23771-23784]:ReturnStatement[23771-23784]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23808-23839]:Block[23808-23839]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[23818-23831]:ReturnStatement[23818-23831]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[23850-23862]:ReturnStatement[23850-23862]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23997-24219]:Block[23997-24219]"
    }, {
      "left" : "return injector.inliningLowersCost(\n        fs.getModule(),\n        fs.getFn().getFunctionNode(),\n        fs.getReferences(),\n        fs.getNamesToAlias(),\n        fs.canRemove(),\n        fs.getReferencesThis());",
      "right" : "return injector.inliningLowersCost(\n        fs.getModule(),\n        fs.getFn().getFunctionNode(),\n        fs.getReferences(),\n        fs.getNamesToAlias(),\n        fs.canRemove(),\n        fs.getReferencesThis());",
      "info" : "ReturnStatement[24003-24215]:ReturnStatement[24003-24215]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25068-25168]:Block[25068-25168]"
    }, {
      "left" : "for (FunctionState fs : fns.values())",
      "right" : "for (FunctionState fs : fns.values())",
      "info" : "EnhancedForStatement[25074-25164]:EnhancedForStatement[25074-25164]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25112-25164]:Block[25112-25164]"
    }, {
      "left" : "resolveInlineConflictsForFunction(fs);",
      "right" : "resolveInlineConflictsForFunction(fs);",
      "info" : "ExpressionStatement[25120-25158]:ExpressionStatement[25120-25158]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25283-26190]:Block[25283-26190]"
    }, {
      "left" : "if (!fs.hasReferences())",
      "right" : "if (!fs.hasReferences())",
      "info" : "IfStatement[25352-25398]:IfStatement[25352-25398]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25377-25398]:Block[25377-25398]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[25385-25392]:ReturnStatement[25385-25392]"
    }, {
      "left" : "Node fnNode = fs.getFn().getFunctionNode();",
      "right" : "Node fnNode = fs.getFn().getFunctionNode();",
      "info" : "VariableDeclarationStatement[25404-25447]:VariableDeclarationStatement[25404-25447]"
    }, {
      "left" : "Set<String> names = findCalledFunctions(fnNode);",
      "right" : "Set<String> names = findCalledFunctions(fnNode);",
      "info" : "VariableDeclarationStatement[25452-25500]:VariableDeclarationStatement[25452-25500]"
    }, {
      "left" : "if (!names.isEmpty())",
      "right" : "if (!names.isEmpty())",
      "info" : "IfStatement[25505-26186]:IfStatement[25505-26186]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25527-26186]:Block[25527-26186]"
    }, {
      "left" : "for (String name : names)",
      "right" : "for (String name : names)",
      "info" : "EnhancedForStatement[25593-26041]:EnhancedForStatement[25593-26041]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25619-26041]:Block[25619-26041]"
    }, {
      "left" : "FunctionState fsCalled = fns.get(name);",
      "right" : "FunctionState fsCalled = fns.get(name);",
      "info" : "VariableDeclarationStatement[25629-25668]:VariableDeclarationStatement[25629-25668]"
    }, {
      "left" : "if (fsCalled != null && fsCalled.canRemove())",
      "right" : "if (fsCalled != null && fsCalled.canRemove())",
      "info" : "IfStatement[25677-26033]:IfStatement[25677-26033]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25723-26033]:Block[25723-26033]"
    }, {
      "left" : "fsCalled.setRemove(false);",
      "right" : "fsCalled.setRemove(false);",
      "info" : "ExpressionStatement[25735-25761]:ExpressionStatement[25735-25761]"
    }, {
      "left" : "if (!mimimizeCost(fsCalled))",
      "right" : "if (!mimimizeCost(fsCalled))",
      "info" : "IfStatement[25882-26023]:IfStatement[25882-26023]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25911-26023]:Block[25911-26023]"
    }, {
      "left" : "fsCalled.setInline(false);",
      "right" : "fsCalled.setInline(false);",
      "info" : "ExpressionStatement[25985-26011]:ExpressionStatement[25985-26011]"
    }, {
      "left" : "fs.setSafeFnNode(fs.getFn().getFunctionNode().cloneTree());",
      "right" : "fs.setSafeFnNode(fs.getFn().getFunctionNode().cloneTree());",
      "info" : "ExpressionStatement[26121-26180]:ExpressionStatement[26121-26180]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26306-26442]:Block[26306-26442]"
    }, {
      "left" : "Set<String> changed = Sets.newHashSet();",
      "right" : "Set<String> changed = Sets.newHashSet();",
      "info" : "VariableDeclarationStatement[26312-26352]:VariableDeclarationStatement[26312-26352]"
    }, {
      "left" : "findCalledFunctions(NodeUtil.getFunctionBody(node), changed);",
      "right" : "findCalledFunctions(NodeUtil.getFunctionBody(node), changed);",
      "info" : "ExpressionStatement[26357-26418]:ExpressionStatement[26357-26418]"
    }, {
      "left" : "return changed;",
      "right" : "return changed;",
      "info" : "ReturnStatement[26423-26438]:ReturnStatement[26423-26438]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26567-26973]:Block[26567-26924]"
    }, {
      "left" : "Preconditions.checkArgument(changed != null);",
      "right" : "Preconditions.checkArgument(changed != null);",
      "info" : "ExpressionStatement[26573-26618]:ExpressionStatement[26573-26618]"
    }, {
      "left" : "if (node.getType() == Token.CALL)",
      "right" : "if (node.getType() == Token.NAME)",
      "info" : "IfStatement[26680-26853]:IfStatement[26680-26804]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26714-26853]:Block[26714-26804]"
    }, {
      "left" : "if (child.getType() == Token.NAME)",
      "right" : "if (isCandidateUsage(node))",
      "info" : "IfStatement[26763-26847]:IfStatement[26722-26798]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26798-26847]:Block[26750-26798]"
    }, {
      "left" : "changed.add(child.getString());",
      "right" : "changed.add(node.getString());",
      "info" : "ExpressionStatement[26808-26839]:ExpressionStatement[26760-26790]"
    }, {
      "left" : "for (Node c = node.getFirstChild(); c != null; c = c.getNext())",
      "right" : "for (Node c = node.getFirstChild(); c != null; c = c.getNext())",
      "info" : "ForStatement[26859-26969]:ForStatement[26810-26920]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26923-26969]:Block[26874-26920]"
    }, {
      "left" : "findCalledFunctions(c, changed);",
      "right" : "findCalledFunctions(c, changed);",
      "info" : "ExpressionStatement[26931-26963]:ExpressionStatement[26882-26914]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27162-27561]:Block[27113-27512]"
    }, {
      "left" : "ExpressionDecomposer decomposer = new ExpressionDecomposer(\n        compiler, compiler.getUniqueNameIdSupplier(), fnNames);",
      "right" : "ExpressionDecomposer decomposer = new ExpressionDecomposer(\n        compiler, compiler.getUniqueNameIdSupplier(), fnNames);",
      "info" : "VariableDeclarationStatement[27168-27291]:VariableDeclarationStatement[27119-27242]"
    }, {
      "left" : "for (FunctionState fs : fns.values())",
      "right" : "for (FunctionState fs : fns.values())",
      "info" : "EnhancedForStatement[27297-27557]:EnhancedForStatement[27248-27508]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27335-27557]:Block[27286-27508]"
    }, {
      "left" : "if (fs.canInline())",
      "right" : "if (fs.canInline())",
      "info" : "IfStatement[27343-27551]:IfStatement[27294-27502]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27363-27551]:Block[27314-27502]"
    }, {
      "left" : "for (Reference ref : fs.getReferences())",
      "right" : "for (Reference ref : fs.getReferences())",
      "info" : "EnhancedForStatement[27373-27543]:EnhancedForStatement[27324-27494]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27414-27543]:Block[27365-27494]"
    }, {
      "left" : "if (ref.requiresDecomposition)",
      "right" : "if (ref.requiresDecomposition)",
      "info" : "IfStatement[27426-27533]:IfStatement[27377-27484]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27457-27533]:Block[27408-27484]"
    }, {
      "left" : "decomposer.maybeDecomposeExpression(ref.callNode);",
      "right" : "decomposer.maybeDecomposeExpression(ref.callNode);",
      "info" : "ExpressionStatement[27471-27521]:ExpressionStatement[27422-27472]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27674-28162]:Block[27625-28113]"
    }, {
      "left" : "for (FunctionState fs : fns.values())",
      "right" : "for (FunctionState fs : fns.values())",
      "info" : "EnhancedForStatement[27680-28158]:EnhancedForStatement[27631-28109]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27718-28158]:Block[27669-28109]"
    }, {
      "left" : "if (fs.canRemove())",
      "right" : "if (fs.canRemove())",
      "info" : "IfStatement[27726-28152]:IfStatement[27677-28103]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27746-28152]:Block[27697-28103]"
    }, {
      "left" : "Function fn = fs.getFn();",
      "right" : "Function fn = fs.getFn();",
      "info" : "VariableDeclarationStatement[27756-27781]:VariableDeclarationStatement[27707-27732]"
    }, {
      "left" : "Preconditions.checkState(fs.canInline());",
      "right" : "Preconditions.checkState(fs.canInline());",
      "info" : "ExpressionStatement[27790-27831]:ExpressionStatement[27741-27782]"
    }, {
      "left" : "Preconditions.checkState(fn != null);",
      "right" : "Preconditions.checkState(fn != null);",
      "info" : "ExpressionStatement[27840-27877]:ExpressionStatement[27791-27828]"
    }, {
      "left" : "verifyAllReferencesInlined(fs);",
      "right" : "verifyAllReferencesInlined(fs);",
      "info" : "ExpressionStatement[27886-27917]:ExpressionStatement[27837-27868]"
    }, {
      "left" : "if (specializationState != null)",
      "right" : "if (specializationState != null)",
      "info" : "IfStatement[27927-28085]:IfStatement[27878-28036]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27960-28085]:Block[27911-28036]"
    }, {
      "left" : "specializationState.reportRemovedFunction(\n              fn.getFunctionNode(), fn.getDeclaringBlock());",
      "right" : "specializationState.reportRemovedFunction(\n              fn.getFunctionNode(), fn.getDeclaringBlock());",
      "info" : "ExpressionStatement[27972-28075]:ExpressionStatement[27923-28026]"
    }, {
      "left" : "fn.remove();",
      "right" : "fn.remove();",
      "info" : "ExpressionStatement[28095-28107]:ExpressionStatement[28046-28058]"
    }, {
      "left" : "compiler.reportCodeChange();",
      "right" : "compiler.reportCodeChange();",
      "info" : "ExpressionStatement[28116-28144]:ExpressionStatement[28067-28095]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28321-28597]:Block[28272-28548]"
    }, {
      "left" : "for (Reference ref : fs.getReferences())",
      "right" : "for (Reference ref : fs.getReferences())",
      "info" : "EnhancedForStatement[28327-28593]:EnhancedForStatement[28278-28544]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28368-28593]:Block[28319-28544]"
    }, {
      "left" : "if (!ref.inlined)",
      "right" : "if (!ref.inlined)",
      "info" : "IfStatement[28376-28587]:IfStatement[28327-28538]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28394-28587]:Block[28345-28538]"
    }, {
      "left" : "throw new IllegalStateException(\"Call site missed.\\n call: \"\n            + ref.callNode.toStringTree() + \"\\n parent:  \"\n            + ref.callNode.getParent().toStringTree());",
      "right" : "throw new IllegalStateException(\"Call site missed.\\n call: \"\n            + ref.callNode.toStringTree() + \"\\n parent:  \"\n            + ref.callNode.getParent().toStringTree());",
      "info" : "ThrowStatement[28404-28579]:ThrowStatement[28355-28530]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29171-29205]:Block[29122-29156]"
    }, {
      "left" : "return (fn != null);",
      "right" : "return (fn != null);",
      "info" : "ReturnStatement[29179-29199]:ReturnStatement[29130-29150]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29265-29316]:Block[29216-29267]"
    }, {
      "left" : "this.referencesThis = referencesThis;",
      "right" : "this.referencesThis = referencesThis;",
      "info" : "ExpressionStatement[29273-29310]:ExpressionStatement[29224-29261]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29357-29398]:Block[29308-29349]"
    }, {
      "left" : "return this.referencesThis;",
      "right" : "return this.referencesThis;",
      "info" : "ReturnStatement[29365-29392]:ReturnStatement[29316-29343]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29464-29521]:Block[29415-29472]"
    }, {
      "left" : "this.hasInnerFunctions = hasInnerFunctions;",
      "right" : "this.hasInnerFunctions = hasInnerFunctions;",
      "info" : "ExpressionStatement[29472-29515]:ExpressionStatement[29423-29466]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29563-29602]:Block[29514-29553]"
    }, {
      "left" : "return hasInnerFunctions;",
      "right" : "return hasInnerFunctions;",
      "info" : "ReturnStatement[29571-29596]:ReturnStatement[29522-29547]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29645-29920]:Block[29596-29871]"
    }, {
      "left" : "Iterator<Entry<Node, Reference>> i;",
      "right" : "Iterator<Entry<Node, Reference>> i;",
      "info" : "VariableDeclarationStatement[29653-29688]:VariableDeclarationStatement[29604-29639]"
    }, {
      "left" : "for (i = getReferencesInternal().entrySet().iterator(); i.hasNext())",
      "right" : "for (i = getReferencesInternal().entrySet().iterator(); i.hasNext())",
      "info" : "ForStatement[29695-29914]:ForStatement[29646-29865]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29765-29914]:Block[29716-29865]"
    }, {
      "left" : "Entry<Node, Reference> entry = i.next();",
      "right" : "Entry<Node, Reference> entry = i.next();",
      "info" : "VariableDeclarationStatement[29775-29815]:VariableDeclarationStatement[29726-29766]"
    }, {
      "left" : "if (entry.getValue().mode == InliningMode.BLOCK)",
      "right" : "if (entry.getValue().mode == InliningMode.BLOCK)",
      "info" : "IfStatement[29824-29906]:IfStatement[29775-29857]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29873-29906]:Block[29824-29857]"
    }, {
      "left" : "i.remove();",
      "right" : "i.remove();",
      "info" : "ExpressionStatement[29885-29896]:ExpressionStatement[29836-29847]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29970-30143]:Block[29921-30094]"
    }, {
      "left" : "for (Reference r : getReferencesInternal().values())",
      "right" : "for (Reference r : getReferencesInternal().values())",
      "info" : "EnhancedForStatement[29978-30117]:EnhancedForStatement[29929-30068]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30031-30117]:Block[29982-30068]"
    }, {
      "left" : "if (r.mode == InliningMode.BLOCK)",
      "right" : "if (r.mode == InliningMode.BLOCK)",
      "info" : "IfStatement[30041-30109]:IfStatement[29992-30060]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30075-30109]:Block[30026-30060]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[30087-30099]:ReturnStatement[30038-30050]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[30124-30137]:ReturnStatement[30075-30088]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30173-30197]:Block[30124-30148]"
    }, {
      "left" : "return fn;",
      "right" : "return fn;",
      "info" : "ReturnStatement[30181-30191]:ReturnStatement[30132-30142]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30234-30310]:Block[30185-30261]"
    }, {
      "left" : "Preconditions.checkState(this.fn == null);",
      "right" : "Preconditions.checkState(this.fn == null);",
      "info" : "ExpressionStatement[30242-30284]:ExpressionStatement[30193-30235]"
    }, {
      "left" : "this.fn = fn;",
      "right" : "this.fn = fn;",
      "info" : "ExpressionStatement[30291-30304]:ExpressionStatement[30242-30255]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30344-30422]:Block[30295-30373]"
    }, {
      "left" : "return (safeFnNode != null) ? safeFnNode : fn.getFunctionNode();",
      "right" : "return (safeFnNode != null) ? safeFnNode : fn.getFunctionNode();",
      "info" : "ReturnStatement[30352-30416]:ReturnStatement[30303-30367]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30471-30514]:Block[30422-30465]"
    }, {
      "left" : "this.safeFnNode = safeFnNode;",
      "right" : "this.safeFnNode = safeFnNode;",
      "info" : "ExpressionStatement[30479-30508]:ExpressionStatement[30430-30459]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30547-30575]:Block[30498-30526]"
    }, {
      "left" : "return inline;",
      "right" : "return inline;",
      "info" : "ReturnStatement[30555-30569]:ReturnStatement[30506-30520]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30619-30874]:Block[30570-30825]"
    }, {
      "left" : "this.inline = inline;",
      "right" : "this.inline = inline;",
      "info" : "ExpressionStatement[30627-30648]:ExpressionStatement[30578-30599]"
    }, {
      "left" : "if (inline == false)",
      "right" : "if (inline == false)",
      "info" : "IfStatement[30655-30868]:IfStatement[30606-30819]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30676-30868]:Block[30627-30819]"
    }, {
      "left" : "references = null;",
      "right" : "references = null;",
      "info" : "ExpressionStatement[30759-30777]:ExpressionStatement[30710-30728]"
    }, {
      "left" : "remove = false;",
      "right" : "remove = false;",
      "info" : "ExpressionStatement[30845-30860]:ExpressionStatement[30796-30811]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30907-30935]:Block[30858-30886]"
    }, {
      "left" : "return remove;",
      "right" : "return remove;",
      "info" : "ReturnStatement[30915-30929]:ReturnStatement[30866-30880]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30979-31014]:Block[30930-30965]"
    }, {
      "left" : "this.remove = remove;",
      "right" : "this.remove = remove;",
      "info" : "ExpressionStatement[30987-31008]:ExpressionStatement[30938-30959]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31055-31091]:Block[31006-31042]"
    }, {
      "left" : "return inlineDirectly;",
      "right" : "return inlineDirectly;",
      "info" : "ReturnStatement[31063-31085]:ReturnStatement[31014-31036]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31151-31205]:Block[31102-31156]"
    }, {
      "left" : "this.inlineDirectly = directReplacement;",
      "right" : "this.inlineDirectly = directReplacement;",
      "info" : "ExpressionStatement[31159-31199]:ExpressionStatement[31110-31150]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31242-31309]:Block[31193-31260]"
    }, {
      "left" : "return (references != null && !references.isEmpty());",
      "right" : "return (references != null && !references.isEmpty());",
      "info" : "ReturnStatement[31250-31303]:ReturnStatement[31201-31254]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31368-31479]:Block[31319-31430]"
    }, {
      "left" : "if (references == null)",
      "right" : "if (references == null)",
      "info" : "IfStatement[31376-31448]:IfStatement[31327-31399]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31400-31448]:Block[31351-31399]"
    }, {
      "left" : "return Collections.emptyMap();",
      "right" : "return Collections.emptyMap();",
      "info" : "ReturnStatement[31410-31440]:ReturnStatement[31361-31391]"
    }, {
      "left" : "return references;",
      "right" : "return references;",
      "info" : "ReturnStatement[31455-31473]:ReturnStatement[31406-31424]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31525-31653]:Block[31476-31604]"
    }, {
      "left" : "if (references == null)",
      "right" : "if (references == null)",
      "info" : "IfStatement[31533-31606]:IfStatement[31484-31557]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31557-31606]:Block[31508-31557]"
    }, {
      "left" : "references = Maps.newHashMap();",
      "right" : "references = Maps.newHashMap();",
      "info" : "ExpressionStatement[31567-31598]:ExpressionStatement[31518-31549]"
    }, {
      "left" : "references.put(ref.callNode, ref);",
      "right" : "references.put(ref.callNode, ref);",
      "info" : "ExpressionStatement[31613-31647]:ExpressionStatement[31564-31598]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31704-31758]:Block[31655-31709]"
    }, {
      "left" : "return getReferencesInternal().values();",
      "right" : "return getReferencesInternal().values();",
      "info" : "ReturnStatement[31712-31752]:ReturnStatement[31663-31703]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31802-31854]:Block[31753-31805]"
    }, {
      "left" : "return getReferencesInternal().get(n);",
      "right" : "return getReferencesInternal().get(n);",
      "info" : "ReturnStatement[31810-31848]:ReturnStatement[31761-31799]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31897-32041]:Block[31848-31992]"
    }, {
      "left" : "if (namesToAlias == null)",
      "right" : "if (namesToAlias == null)",
      "info" : "IfStatement[31905-31979]:IfStatement[31856-31930]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31931-31979]:Block[31882-31930]"
    }, {
      "left" : "return Collections.emptySet();",
      "right" : "return Collections.emptySet();",
      "info" : "ReturnStatement[31941-31971]:ReturnStatement[31892-31922]"
    }, {
      "left" : "return Collections.unmodifiableSet(namesToAlias);",
      "right" : "return Collections.unmodifiableSet(namesToAlias);",
      "info" : "ReturnStatement[31986-32035]:ReturnStatement[31937-31986]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32094-32129]:Block[32045-32080]"
    }, {
      "left" : "namesToAlias = names;",
      "right" : "namesToAlias = names;",
      "info" : "ExpressionStatement[32102-32123]:ExpressionStatement[32053-32074]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32174-32209]:Block[32125-32160]"
    }, {
      "left" : "this.module = module;",
      "right" : "this.module = module;",
      "info" : "ExpressionStatement[32182-32203]:ExpressionStatement[32133-32154]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32243-32271]:Block[32194-32222]"
    }, {
      "left" : "return module;",
      "right" : "return module;",
      "info" : "ReturnStatement[32251-32265]:ReturnStatement[32202-32216]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32860-32887]:Block[32811-32838]"
    }, {
      "left" : "this.fn = fn;",
      "right" : "this.fn = fn;",
      "info" : "ExpressionStatement[32868-32881]:ExpressionStatement[32819-32832]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32917-32969]:Block[32868-32920]"
    }, {
      "left" : "return fn.getFirstChild().getString();",
      "right" : "return fn.getFirstChild().getString();",
      "info" : "ReturnStatement[32925-32963]:ReturnStatement[32876-32914]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33005-33029]:Block[32956-32980]"
    }, {
      "left" : "return fn;",
      "right" : "return fn;",
      "info" : "ReturnStatement[33013-33023]:ReturnStatement[32964-32974]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33056-33111]:Block[33007-33062]"
    }, {
      "left" : "NodeUtil.removeChild(fn.getParent(), fn);",
      "right" : "NodeUtil.removeChild(fn.getParent(), fn);",
      "info" : "ExpressionStatement[33064-33105]:ExpressionStatement[33015-33056]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33163-33199]:Block[33114-33150]"
    }, {
      "left" : "return fn.getParent();",
      "right" : "return fn.getParent();",
      "info" : "ReturnStatement[33171-33193]:ReturnStatement[33122-33144]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33386-33415]:Block[33337-33366]"
    }, {
      "left" : "this.var = var;",
      "right" : "this.var = var;",
      "info" : "ExpressionStatement[33394-33409]:ExpressionStatement[33345-33360]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33445-33498]:Block[33396-33449]"
    }, {
      "left" : "return var.getFirstChild().getString();",
      "right" : "return var.getFirstChild().getString();",
      "info" : "ReturnStatement[33453-33492]:ReturnStatement[33404-33443]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33534-33591]:Block[33485-33542]"
    }, {
      "left" : "return var.getFirstChild().getFirstChild();",
      "right" : "return var.getFirstChild().getFirstChild();",
      "info" : "ReturnStatement[33542-33585]:ReturnStatement[33493-33536]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33618-33675]:Block[33569-33626]"
    }, {
      "left" : "NodeUtil.removeChild(var.getParent(), var);",
      "right" : "NodeUtil.removeChild(var.getParent(), var);",
      "info" : "ExpressionStatement[33626-33669]:ExpressionStatement[33577-33620]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33727-33764]:Block[33678-33715]"
    }, {
      "left" : "return var.getParent();",
      "right" : "return var.getParent();",
      "info" : "ReturnStatement[33735-33758]:ReturnStatement[33686-33709]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34016-34206]:Block[33967-34157]"
    }, {
      "left" : "this.fn = fn;",
      "right" : "this.fn = fn;",
      "info" : "ExpressionStatement[34024-34037]:ExpressionStatement[33975-33988]"
    }, {
      "left" : "this.fakeName = String.valueOf(index);",
      "right" : "this.fakeName = String.valueOf(index);",
      "info" : "ExpressionStatement[34162-34200]:ExpressionStatement[34113-34151]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34236-34266]:Block[34187-34217]"
    }, {
      "left" : "return fakeName;",
      "right" : "return fakeName;",
      "info" : "ReturnStatement[34244-34260]:ReturnStatement[34195-34211]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34302-34326]:Block[34253-34277]"
    }, {
      "left" : "return fn;",
      "right" : "return fn;",
      "info" : "ReturnStatement[34310-34320]:ReturnStatement[34261-34271]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34353-34423]:Block[34304-34374]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34475-34501]:Block[34426-34452]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[34483-34495]:ReturnStatement[34434-34446]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34726-34816]:Block[34677-34767]"
    }, {
      "left" : "super(callNode, module, mode);",
      "right" : "super(callNode, module, mode);",
      "info" : "SuperConstructorInvocation[34734-34764]:SuperConstructorInvocation[34685-34715]"
    }, {
      "left" : "this.requiresDecomposition = decompose;",
      "right" : "this.requiresDecomposition = decompose;",
      "info" : "ExpressionStatement[34771-34810]:ExpressionStatement[34722-34761]"
    } ]
  },
  "interFileMappings" : { }
}