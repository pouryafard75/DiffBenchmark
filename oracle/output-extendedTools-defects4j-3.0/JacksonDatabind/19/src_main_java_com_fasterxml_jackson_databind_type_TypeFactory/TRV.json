{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "private static final long serialVersionUID = 1L;",
      "right" : "private static final long serialVersionUID = 1L;",
      "info" : "FieldDeclaration[1284-1332]:FieldDeclaration[1284-1332]"
    }, {
      "left" : "private final static JavaType[] NO_TYPES = new JavaType[0];",
      "right" : "private final static JavaType[] NO_TYPES = new JavaType[0];",
      "info" : "FieldDeclaration[1338-1397]:FieldDeclaration[1338-1397]"
    }, {
      "left" : "protected final static TypeFactory instance = new TypeFactory();",
      "right" : "protected final static TypeFactory instance = new TypeFactory();",
      "info" : "FieldDeclaration[1403-1700]:FieldDeclaration[1403-1700]"
    }, {
      "left" : "protected final static SimpleType CORE_TYPE_STRING = new SimpleType(String.class);",
      "right" : "protected final static SimpleType CORE_TYPE_STRING = new SimpleType(String.class);",
      "info" : "FieldDeclaration[2054-2136]:FieldDeclaration[2054-2136]"
    }, {
      "left" : "protected final static SimpleType CORE_TYPE_BOOL = new SimpleType(Boolean.TYPE);",
      "right" : "protected final static SimpleType CORE_TYPE_BOOL = new SimpleType(Boolean.TYPE);",
      "info" : "FieldDeclaration[2141-2221]:FieldDeclaration[2141-2221]"
    }, {
      "left" : "protected final static SimpleType CORE_TYPE_INT = new SimpleType(Integer.TYPE);",
      "right" : "protected final static SimpleType CORE_TYPE_INT = new SimpleType(Integer.TYPE);",
      "info" : "FieldDeclaration[2226-2305]:FieldDeclaration[2226-2305]"
    }, {
      "left" : "protected final static SimpleType CORE_TYPE_LONG = new SimpleType(Long.TYPE);",
      "right" : "protected final static SimpleType CORE_TYPE_LONG = new SimpleType(Long.TYPE);",
      "info" : "FieldDeclaration[2310-2387]:FieldDeclaration[2310-2387]"
    }, {
      "left" : "protected final LRUMap<ClassKey, JavaType> _typeCache = new LRUMap<ClassKey, JavaType>(16, 100);",
      "right" : "protected final LRUMap<ClassKey, JavaType> _typeCache = new LRUMap<ClassKey, JavaType>(16, 100);",
      "info" : "FieldDeclaration[2393-2686]:FieldDeclaration[2393-2686]"
    }, {
      "left" : "protected transient HierarchicType _cachedHashMapType;",
      "right" : "protected transient HierarchicType _cachedHashMapType;",
      "info" : "FieldDeclaration[2893-3069]:FieldDeclaration[2893-3069]"
    }, {
      "left" : "protected transient HierarchicType _cachedArrayListType;",
      "right" : "protected transient HierarchicType _cachedArrayListType;",
      "info" : "FieldDeclaration[3075-3255]:FieldDeclaration[3075-3255]"
    }, {
      "left" : "protected final TypeModifier[] _modifiers;",
      "right" : "protected final TypeModifier[] _modifiers;",
      "info" : "FieldDeclaration[3434-3622]:FieldDeclaration[3434-3622]"
    }, {
      "left" : "protected final TypeParser _parser;",
      "right" : "protected final TypeParser _parser;",
      "info" : "FieldDeclaration[3632-3667]:FieldDeclaration[3632-3667]"
    }, {
      "left" : "private TypeFactory()",
      "right" : "private TypeFactory()",
      "info" : "MethodDeclaration[3835-3931]:MethodDeclaration[3835-3931]"
    }, {
      "left" : "protected TypeFactory(TypeParser p, TypeModifier[] mods)",
      "right" : "protected TypeFactory(TypeParser p, TypeModifier[] mods)",
      "info" : "MethodDeclaration[3937-4049]:MethodDeclaration[3937-4049]"
    }, {
      "left" : "public TypeFactory withModifier(TypeModifier mod)",
      "right" : "public TypeFactory withModifier(TypeModifier mod)",
      "info" : "MethodDeclaration[4055-4444]:MethodDeclaration[4055-4444]"
    }, {
      "left" : "public static TypeFactory defaultInstance()",
      "right" : "public static TypeFactory defaultInstance()",
      "info" : "MethodDeclaration[4450-4717]:MethodDeclaration[4450-4717]"
    }, {
      "left" : "public void clearCache()",
      "right" : "public void clearCache()",
      "info" : "MethodDeclaration[4723-5232]:MethodDeclaration[4723-5232]"
    }, {
      "left" : "public static JavaType unknownType()",
      "right" : "public static JavaType unknownType()",
      "info" : "MethodDeclaration[5452-5741]:MethodDeclaration[5452-5741]"
    }, {
      "left" : "public static Class<?> rawClass(Type t)",
      "right" : "public static Class<?> rawClass(Type t)",
      "info" : "MethodDeclaration[5747-6293]:MethodDeclaration[5747-6293]"
    }, {
      "left" : "public JavaType constructSpecializedType(JavaType baseType, Class<?> subclass)",
      "right" : "public JavaType constructSpecializedType(JavaType baseType, Class<?> subclass)",
      "info" : "MethodDeclaration[6507-8429]:MethodDeclaration[6507-8429]"
    }, {
      "left" : "public JavaType constructFromCanonical(String canonical) throws IllegalArgumentException",
      "right" : "public JavaType constructFromCanonical(String canonical) throws IllegalArgumentException",
      "info" : "MethodDeclaration[8435-8991]:MethodDeclaration[8435-8991]"
    }, {
      "left" : "public JavaType[] findTypeParameters(JavaType type, Class<?> expType)",
      "right" : "public JavaType[] findTypeParameters(JavaType type, Class<?> expType)",
      "info" : "MethodDeclaration[9001-10912]:MethodDeclaration[9001-10912]"
    }, {
      "left" : "public JavaType[] findTypeParameters(Class<?> clz, Class<?> expType)",
      "right" : "public JavaType[] findTypeParameters(Class<?> clz, Class<?> expType)",
      "info" : "MethodDeclaration[10918-11072]:MethodDeclaration[10918-11072]"
    }, {
      "left" : "public JavaType[] findTypeParameters(Class<?> clz, Class<?> expType, TypeBindings bindings)",
      "right" : "public JavaType[] findTypeParameters(Class<?> clz, Class<?> expType, TypeBindings bindings)",
      "info" : "MethodDeclaration[11078-12635]:MethodDeclaration[11078-12635]"
    }, {
      "left" : "public JavaType moreSpecificType(JavaType type1, JavaType type2)",
      "right" : "public JavaType moreSpecificType(JavaType type1, JavaType type2)",
      "info" : "MethodDeclaration[12641-13511]:MethodDeclaration[12641-13511]"
    }, {
      "left" : "public JavaType constructType(Type type)",
      "right" : "public JavaType constructType(Type type)",
      "info" : "MethodDeclaration[13695-13786]:MethodDeclaration[13695-13786]"
    }, {
      "left" : "public JavaType constructType(Type type, TypeBindings bindings)",
      "right" : "public JavaType constructType(Type type, TypeBindings bindings)",
      "info" : "MethodDeclaration[13792-13910]:MethodDeclaration[13792-13910]"
    }, {
      "left" : "public JavaType constructType(TypeReference<?> typeRef)",
      "right" : "public JavaType constructType(TypeReference<?> typeRef)",
      "info" : "MethodDeclaration[13920-14039]:MethodDeclaration[13920-14039]"
    }, {
      "left" : "public JavaType constructType(Type type, Class<?> context)",
      "right" : "public JavaType constructType(Type type, Class<?> context)",
      "info" : "MethodDeclaration[14049-14240]:MethodDeclaration[14049-14240]"
    }, {
      "left" : "public JavaType constructType(Type type, JavaType context)",
      "right" : "public JavaType constructType(Type type, JavaType context)",
      "info" : "MethodDeclaration[14246-14437]:MethodDeclaration[14246-14437]"
    }, {
      "left" : "protected JavaType _constructType(Type type, TypeBindings context)",
      "right" : "protected JavaType _constructType(Type type, TypeBindings context)",
      "info" : "MethodDeclaration[14447-16236]:MethodDeclaration[14447-16236]"
    }, {
      "left" : "public ArrayType constructArrayType(Class<?> elementType)",
      "right" : "public ArrayType constructArrayType(Class<?> elementType)",
      "info" : "MethodDeclaration[16416-16775]:MethodDeclaration[16416-16775]"
    }, {
      "left" : "public ArrayType constructArrayType(JavaType elementType)",
      "right" : "public ArrayType constructArrayType(JavaType elementType)",
      "info" : "MethodDeclaration[16785-17098]:MethodDeclaration[16785-17098]"
    }, {
      "left" : "public CollectionType constructCollectionType(Class<? extends Collection> collectionClass, Class<?> elementClass)",
      "right" : "public CollectionType constructCollectionType(Class<? extends Collection> collectionClass, Class<?> elementClass)",
      "info" : "MethodDeclaration[17104-17508]:MethodDeclaration[17104-17508]"
    }, {
      "left" : "public CollectionType constructCollectionType(Class<? extends Collection> collectionClass, JavaType elementType)",
      "right" : "public CollectionType constructCollectionType(Class<? extends Collection> collectionClass, JavaType elementType)",
      "info" : "MethodDeclaration[17518-17905]:MethodDeclaration[17518-17905]"
    }, {
      "left" : "public CollectionLikeType constructCollectionLikeType(Class<?> collectionClass, Class<?> elementClass)",
      "right" : "public CollectionLikeType constructCollectionLikeType(Class<?> collectionClass, Class<?> elementClass)",
      "info" : "MethodDeclaration[17911-18313]:MethodDeclaration[17911-18313]"
    }, {
      "left" : "public CollectionLikeType constructCollectionLikeType(Class<?> collectionClass, JavaType elementType)",
      "right" : "public CollectionLikeType constructCollectionLikeType(Class<?> collectionClass, JavaType elementType)",
      "info" : "MethodDeclaration[18323-18708]:MethodDeclaration[18323-18708]"
    }, {
      "left" : "public MapType constructMapType(Class<? extends Map> mapClass, JavaType keyType, JavaType valueType)",
      "right" : "public MapType constructMapType(Class<? extends Map> mapClass, JavaType keyType, JavaType valueType)",
      "info" : "MethodDeclaration[18718-19088]:MethodDeclaration[18718-19088]"
    }, {
      "left" : "public MapType constructMapType(Class<? extends Map> mapClass, Class<?> keyClass, Class<?> valueClass)",
      "right" : "public MapType constructMapType(Class<? extends Map> mapClass, Class<?> keyClass, Class<?> valueClass)",
      "info" : "MethodDeclaration[19094-19498]:MethodDeclaration[19094-19498]"
    }, {
      "left" : "public MapLikeType constructMapLikeType(Class<?> mapClass, JavaType keyType, JavaType valueType)",
      "right" : "public MapLikeType constructMapLikeType(Class<?> mapClass, JavaType keyType, JavaType valueType)",
      "info" : "MethodDeclaration[19504-19878]:MethodDeclaration[19504-19878]"
    }, {
      "left" : "public MapLikeType constructMapLikeType(Class<?> mapClass, Class<?> keyClass, Class<?> valueClass)",
      "right" : "public MapLikeType constructMapLikeType(Class<?> mapClass, Class<?> keyClass, Class<?> valueClass)",
      "info" : "MethodDeclaration[19888-20292]:MethodDeclaration[19888-20292]"
    }, {
      "left" : "public JavaType constructSimpleType(Class<?> rawType, JavaType[] parameterTypes)",
      "right" : "public JavaType constructSimpleType(Class<?> rawType, JavaType[] parameterTypes)",
      "info" : "MethodDeclaration[20302-20651]:MethodDeclaration[20302-20651]"
    }, {
      "left" : "public JavaType constructSimpleType(Class<?> rawType, Class<?> parameterTarget,\n            JavaType[] parameterTypes)",
      "right" : "public JavaType constructSimpleType(Class<?> rawType, Class<?> parameterTarget,\n            JavaType[] parameterTypes)",
      "info" : "MethodDeclaration[20657-21632]:MethodDeclaration[20657-21632]"
    }, {
      "left" : "public JavaType constructReferenceType(Class<?> rawType, JavaType refType)",
      "right" : "public JavaType constructReferenceType(Class<?> rawType, JavaType refType)",
      "info" : "MethodDeclaration[21639-21830]:MethodDeclaration[21639-21830]"
    }, {
      "left" : "public JavaType uncheckedSimpleType(Class<?> cls)",
      "right" : "public JavaType uncheckedSimpleType(Class<?> cls)",
      "info" : "MethodDeclaration[21836-22226]:MethodDeclaration[21836-22226]"
    }, {
      "left" : "public JavaType constructParametrizedType(Class<?> parametrized, Class<?> parametersFor,\n            Class<?>... parameterClasses)",
      "right" : "public JavaType constructParametrizedType(Class<?> parametrized, Class<?> parametersFor,\n            Class<?>... parameterClasses)",
      "info" : "MethodDeclaration[22236-24072]:MethodDeclaration[22236-24072]"
    }, {
      "left" : "public JavaType constructParametricType(Class<?> parametrized, Class<?>... parameterClasses)",
      "right" : "public JavaType constructParametricType(Class<?> parametrized, Class<?>... parameterClasses)",
      "info" : "MethodDeclaration[24078-24376]:MethodDeclaration[24078-24376]"
    }, {
      "left" : "public JavaType constructParametrizedType(Class<?> parametrized, Class<?> parametersFor,\n            JavaType... parameterTypes)",
      "right" : "public JavaType constructParametrizedType(Class<?> parametrized, Class<?> parametersFor,\n            JavaType... parameterTypes)",
      "info" : "MethodDeclaration[24382-27302]:MethodDeclaration[24382-27302]"
    }, {
      "left" : "public JavaType constructParametricType(Class<?> parametrized, JavaType... parameterTypes)",
      "right" : "public JavaType constructParametricType(Class<?> parametrized, JavaType... parameterTypes)",
      "info" : "MethodDeclaration[27308-27602]:MethodDeclaration[27308-27602]"
    }, {
      "left" : "public CollectionType constructRawCollectionType(Class<? extends Collection> collectionClass)",
      "right" : "public CollectionType constructRawCollectionType(Class<? extends Collection> collectionClass)",
      "info" : "MethodDeclaration[27851-28483]:MethodDeclaration[27851-28483]"
    }, {
      "left" : "public CollectionLikeType constructRawCollectionLikeType(Class<?> collectionClass)",
      "right" : "public CollectionLikeType constructRawCollectionLikeType(Class<?> collectionClass)",
      "info" : "MethodDeclaration[28489-29123]:MethodDeclaration[28489-29123]"
    }, {
      "left" : "public MapType constructRawMapType(Class<? extends Map> mapClass)",
      "right" : "public MapType constructRawMapType(Class<? extends Map> mapClass)",
      "info" : "MethodDeclaration[29129-29747]:MethodDeclaration[29129-29747]"
    }, {
      "left" : "public MapLikeType constructRawMapLikeType(Class<?> mapClass)",
      "right" : "public MapLikeType constructRawMapLikeType(Class<?> mapClass)",
      "info" : "MethodDeclaration[29753-30380]:MethodDeclaration[29753-30380]"
    }, {
      "left" : "protected JavaType _fromClass(Class<?> clz, TypeBindings context)",
      "right" : "protected JavaType _fromClass(Class<?> clz, TypeBindings context)",
      "info" : "MethodDeclaration[30560-33399]:MethodDeclaration[30560-33399]"
    }, {
      "left" : "protected JavaType _fromParameterizedClass(Class<?> clz, List<JavaType> paramTypes)",
      "right" : "protected JavaType _fromParameterizedClass(Class<?> clz, List<JavaType> paramTypes)",
      "info" : "MethodDeclaration[33409-34859]:MethodDeclaration[33409-34859]"
    }, {
      "left" : "protected JavaType _fromParamType(ParameterizedType type, TypeBindings context)",
      "right" : "protected JavaType _fromParamType(ParameterizedType type, TypeBindings context)",
      "info" : "MethodDeclaration[34869-38575]:MethodDeclaration[34869-38575]"
    }, {
      "left" : "protected JavaType _fromArrayType(GenericArrayType type, TypeBindings context)",
      "right" : "protected JavaType _fromArrayType(GenericArrayType type, TypeBindings context)",
      "info" : "MethodDeclaration[38581-38814]:MethodDeclaration[38581-38814]"
    }, {
      "left" : "protected JavaType _fromVariable(TypeVariable<?> type, TypeBindings context)",
      "right" : "protected JavaType _fromVariable(TypeVariable<?> type, TypeBindings context)",
      "info" : "MethodDeclaration[38820-40777]:MethodDeclaration[38820-40777]"
    }, {
      "left" : "protected JavaType _fromWildcard(WildcardType type, TypeBindings context)",
      "right" : "protected JavaType _fromWildcard(WildcardType type, TypeBindings context)",
      "info" : "MethodDeclaration[40783-41293]:MethodDeclaration[40783-41293]"
    }, {
      "left" : "private JavaType _collectionType(Class<?> rawClass)",
      "right" : "private JavaType _collectionType(Class<?> rawClass)",
      "info" : "MethodDeclaration[41965-42553]:MethodDeclaration[42103-42691]"
    }, {
      "left" : "protected JavaType _resolveVariableViaSubTypes(HierarchicType leafType, String variableName, TypeBindings bindings)",
      "right" : "protected JavaType _resolveVariableViaSubTypes(HierarchicType leafType, String variableName, TypeBindings bindings)",
      "info" : "MethodDeclaration[42563-43676]:MethodDeclaration[42701-43814]"
    }, {
      "left" : "protected JavaType _unknownType()",
      "right" : "protected JavaType _unknownType()",
      "info" : "MethodDeclaration[43686-43772]:MethodDeclaration[43824-43910]"
    }, {
      "left" : "protected HierarchicType  _findSuperTypeChain(Class<?> subtype, Class<?> supertype)",
      "right" : "protected HierarchicType  _findSuperTypeChain(Class<?> subtype, Class<?> supertype)",
      "info" : "MethodDeclaration[43944-44575]:MethodDeclaration[44082-44713]"
    }, {
      "left" : "protected HierarchicType _findSuperClassChain(Type currentType, Class<?> target)",
      "right" : "protected HierarchicType _findSuperClassChain(Type currentType, Class<?> target)",
      "info" : "MethodDeclaration[44581-45252]:MethodDeclaration[44719-45390]"
    }, {
      "left" : "protected HierarchicType _findSuperInterfaceChain(Type currentType, Class<?> target)",
      "right" : "protected HierarchicType _findSuperInterfaceChain(Type currentType, Class<?> target)",
      "info" : "MethodDeclaration[45258-46176]:MethodDeclaration[45396-46314]"
    }, {
      "left" : "protected HierarchicType _doFindSuperInterfaceChain(HierarchicType current, Class<?> target)",
      "right" : "protected HierarchicType _doFindSuperInterfaceChain(HierarchicType current, Class<?> target)",
      "info" : "MethodDeclaration[46186-47248]:MethodDeclaration[46324-47386]"
    }, {
      "left" : "protected synchronized HierarchicType _hashMapSuperInterfaceChain(HierarchicType current)",
      "right" : "protected synchronized HierarchicType _hashMapSuperInterfaceChain(HierarchicType current)",
      "info" : "MethodDeclaration[47254-47748]:MethodDeclaration[47392-47886]"
    }, {
      "left" : "protected synchronized HierarchicType _arrayListSuperInterfaceChain(HierarchicType current)",
      "right" : "protected synchronized HierarchicType _arrayListSuperInterfaceChain(HierarchicType current)",
      "info" : "MethodDeclaration[47754-48257]:MethodDeclaration[47892-48395]"
    } ],
    "mappings" : [
 {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[3835-3842]:Modifier[3835-3842]"
    }, {
      "left" : "TypeFactory",
      "right" : "TypeFactory",
      "info" : "SimpleName[3843-3854]:SimpleName[3843-3854]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3857-3931]:Block[3857-3931]"
    }, {
      "left" : "_parser = new TypeParser(this);",
      "right" : "_parser = new TypeParser(this);",
      "info" : "ExpressionStatement[3867-3898]:ExpressionStatement[3867-3898]"
    }, {
      "left" : "_modifiers = null;",
      "right" : "_modifiers = null;",
      "info" : "ExpressionStatement[3907-3925]:ExpressionStatement[3907-3925]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[3937-3946]:Modifier[3937-3946]"
    }, {
      "left" : "TypeFactory",
      "right" : "TypeFactory",
      "info" : "SimpleName[3947-3958]:SimpleName[3947-3958]"
    }, {
      "left" : "TypeParser p",
      "right" : "TypeParser p",
      "info" : "SingleVariableDeclaration[3959-3971]:SingleVariableDeclaration[3959-3971]"
    }, {
      "left" : "TypeModifier[] mods",
      "right" : "TypeModifier[] mods",
      "info" : "SingleVariableDeclaration[3973-3992]:SingleVariableDeclaration[3973-3992]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3994-4049]:Block[3994-4049]"
    }, {
      "left" : "_parser = p;",
      "right" : "_parser = p;",
      "info" : "ExpressionStatement[4004-4016]:ExpressionStatement[4004-4016]"
    }, {
      "left" : "_modifiers = mods;",
      "right" : "_modifiers = mods;",
      "info" : "ExpressionStatement[4025-4043]:ExpressionStatement[4025-4043]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4055-4061]:Modifier[4055-4061]"
    }, {
      "left" : "TypeFactory",
      "right" : "TypeFactory",
      "info" : "SimpleType[4062-4073]:SimpleType[4062-4073]"
    }, {
      "left" : "withModifier",
      "right" : "withModifier",
      "info" : "SimpleName[4074-4086]:SimpleName[4074-4086]"
    }, {
      "left" : "TypeModifier mod",
      "right" : "TypeModifier mod",
      "info" : "SingleVariableDeclaration[4087-4103]:SingleVariableDeclaration[4087-4103]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4110-4444]:Block[4110-4444]"
    }, {
      "left" : "if (mod == null)",
      "right" : "if (mod == null)",
      "info" : "IfStatement[4120-4230]:IfStatement[4120-4230]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4137-4230]:Block[4137-4230]"
    }, {
      "left" : "return new TypeFactory(_parser, _modifiers);",
      "right" : "return new TypeFactory(_parser, _modifiers);",
      "info" : "ReturnStatement[4176-4220]:ReturnStatement[4176-4220]"
    }, {
      "left" : "if (_modifiers == null)",
      "right" : "if (_modifiers == null)",
      "info" : "IfStatement[4239-4347]:IfStatement[4239-4347]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4263-4347]:Block[4263-4347]"
    }, {
      "left" : "return new TypeFactory(_parser, new TypeModifier[] { mod });",
      "right" : "return new TypeFactory(_parser, new TypeModifier[] { mod });",
      "info" : "ReturnStatement[4277-4337]:ReturnStatement[4277-4337]"
    }, {
      "left" : "return new TypeFactory(_parser, ArrayBuilders.insertInListNoDup(_modifiers, mod));",
      "right" : "return new TypeFactory(_parser, ArrayBuilders.insertInListNoDup(_modifiers, mod));",
      "info" : "ReturnStatement[4356-4438]:ReturnStatement[4356-4438]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4653-4659]:Modifier[4653-4659]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[4660-4666]:Modifier[4660-4666]"
    }, {
      "left" : "TypeFactory",
      "right" : "TypeFactory",
      "info" : "SimpleType[4667-4678]:SimpleType[4667-4678]"
    }, {
      "left" : "defaultInstance",
      "right" : "defaultInstance",
      "info" : "SimpleName[4679-4694]:SimpleName[4679-4694]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4697-4717]:Block[4697-4717]"
    }, {
      "left" : "return instance;",
      "right" : "return instance;",
      "info" : "ReturnStatement[4699-4715]:ReturnStatement[4699-4715]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5172-5178]:Modifier[5172-5178]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[5179-5183]:PrimitiveType[5179-5183]"
    }, {
      "left" : "clearCache",
      "right" : "clearCache",
      "info" : "SimpleName[5184-5194]:SimpleName[5184-5194]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5197-5232]:Block[5197-5232]"
    }, {
      "left" : "_typeCache.clear();",
      "right" : "_typeCache.clear();",
      "info" : "ExpressionStatement[5207-5226]:ExpressionStatement[5207-5226]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5648-5654]:Modifier[5648-5654]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[5655-5661]:Modifier[5655-5661]"
    }, {
      "left" : "JavaType",
      "right" : "JavaType",
      "info" : "SimpleType[5662-5670]:SimpleType[5662-5670]"
    }, {
      "left" : "unknownType",
      "right" : "unknownType",
      "info" : "SimpleName[5671-5682]:SimpleName[5671-5682]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5685-5741]:Block[5685-5741]"
    }, {
      "left" : "return defaultInstance()._unknownType();",
      "right" : "return defaultInstance()._unknownType();",
      "info" : "ReturnStatement[5695-5735]:ReturnStatement[5695-5735]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6042-6048]:Modifier[6042-6048]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[6049-6055]:Modifier[6049-6055]"
    }, {
      "left" : "Class<?>",
      "right" : "Class<?>",
      "info" : "ParameterizedType[6056-6064]:ParameterizedType[6056-6064]"
    }, {
      "left" : "rawClass",
      "right" : "rawClass",
      "info" : "SimpleName[6065-6073]:SimpleName[6065-6073]"
    }, {
      "left" : "Type t",
      "right" : "Type t",
      "info" : "SingleVariableDeclaration[6074-6080]:SingleVariableDeclaration[6074-6080]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6082-6293]:Block[6082-6293]"
    }, {
      "left" : "if (t instanceof Class<?>)",
      "right" : "if (t instanceof Class<?>)",
      "info" : "IfStatement[6092-6163]:IfStatement[6092-6163]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6119-6163]:Block[6119-6163]"
    }, {
      "left" : "return (Class<?>) t;",
      "right" : "return (Class<?>) t;",
      "info" : "ReturnStatement[6133-6153]:ReturnStatement[6133-6153]"
    }, {
      "left" : "return defaultInstance().constructType(t).getRawClass();",
      "right" : "return defaultInstance().constructType(t).getRawClass();",
      "info" : "ReturnStatement[6231-6287]:ReturnStatement[6231-6287]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6852-6858]:Modifier[6852-6858]"
    }, {
      "left" : "JavaType",
      "right" : "JavaType",
      "info" : "SimpleType[6859-6867]:SimpleType[6859-6867]"
    }, {
      "left" : "constructSpecializedType",
      "right" : "constructSpecializedType",
      "info" : "SimpleName[6868-6892]:SimpleName[6868-6892]"
    }, {
      "left" : "JavaType baseType",
      "right" : "JavaType baseType",
      "info" : "SingleVariableDeclaration[6893-6910]:SingleVariableDeclaration[6893-6910]"
    }, {
      "left" : "Class<?> subclass",
      "right" : "Class<?> subclass",
      "info" : "SingleVariableDeclaration[6912-6929]:SingleVariableDeclaration[6912-6929]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6935-8429]:Block[6935-8429]"
    }, {
      "left" : "if (baseType.getRawClass() == subclass)",
      "right" : "if (baseType.getRawClass() == subclass)",
      "info" : "IfStatement[7042-7122]:IfStatement[7042-7122]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7082-7122]:Block[7082-7122]"
    }, {
      "left" : "return baseType;",
      "right" : "return baseType;",
      "info" : "ReturnStatement[7096-7112]:ReturnStatement[7096-7112]"
    }, {
      "left" : "if (baseType instanceof SimpleType)",
      "right" : "if (baseType instanceof SimpleType)",
      "info" : "IfStatement[7204-8318]:IfStatement[7204-8318]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7240-8318]:Block[7240-8318]"
    }, {
      "left" : "if (subclass.isArray()\n                || Map.class.isAssignableFrom(subclass)\n                || Collection.class.isAssignableFrom(subclass))",
      "right" : "if (subclass.isArray()\n                || Map.class.isAssignableFrom(subclass)\n                || Collection.class.isAssignableFrom(subclass))",
      "info" : "IfStatement[7321-8308]:IfStatement[7321-8308]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7464-8308]:Block[7464-8308]"
    }, {
      "left" : "if (!baseType.getRawClass().isAssignableFrom(subclass))",
      "right" : "if (!baseType.getRawClass().isAssignableFrom(subclass))",
      "info" : "IfStatement[7538-7737]:IfStatement[7538-7737]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7594-7737]:Block[7594-7737]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Class \"+subclass.getClass().getName()+\" not subtype of \"+baseType);",
      "right" : "throw new IllegalArgumentException(\"Class \"+subclass.getClass().getName()+\" not subtype of \"+baseType);",
      "info" : "ThrowStatement[7616-7719]:ThrowStatement[7616-7719]"
    }, {
      "left" : "JavaType subtype = _fromClass(subclass, new TypeBindings(this, baseType.getRawClass()));",
      "right" : "JavaType subtype = _fromClass(subclass, new TypeBindings(this, baseType.getRawClass()));",
      "info" : "VariableDeclarationStatement[7800-7888]:VariableDeclarationStatement[7800-7888]"
    }, {
      "left" : "Object h = baseType.getValueHandler();",
      "right" : "Object h = baseType.getValueHandler();",
      "info" : "VariableDeclarationStatement[7958-7996]:VariableDeclarationStatement[7958-7996]"
    }, {
      "left" : "if (h != null)",
      "right" : "if (h != null)",
      "info" : "IfStatement[8013-8106]:IfStatement[8013-8106]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8028-8106]:Block[8028-8106]"
    }, {
      "left" : "subtype = subtype.withValueHandler(h);",
      "right" : "subtype = subtype.withValueHandler(h);",
      "info" : "ExpressionStatement[8050-8088]:ExpressionStatement[8050-8088]"
    }, {
      "left" : "h = baseType.getTypeHandler();",
      "right" : "h = baseType.getTypeHandler();",
      "info" : "ExpressionStatement[8123-8153]:ExpressionStatement[8123-8153]"
    }, {
      "left" : "if (h != null)",
      "right" : "if (h != null)",
      "info" : "IfStatement[8170-8262]:IfStatement[8170-8262]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8185-8262]:Block[8185-8262]"
    }, {
      "left" : "subtype = subtype.withTypeHandler(h);",
      "right" : "subtype = subtype.withTypeHandler(h);",
      "info" : "ExpressionStatement[8207-8244]:ExpressionStatement[8207-8244]"
    }, {
      "left" : "return subtype;",
      "right" : "return subtype;",
      "info" : "ReturnStatement[8279-8294]:ReturnStatement[8279-8294]"
    }, {
      "left" : "return baseType.narrowBy(subclass);",
      "right" : "return baseType.narrowBy(subclass);",
      "info" : "ReturnStatement[8388-8423]:ReturnStatement[8388-8423]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8850-8856]:Modifier[8850-8856]"
    }, {
      "left" : "JavaType",
      "right" : "JavaType",
      "info" : "SimpleType[8857-8865]:SimpleType[8857-8865]"
    }, {
      "left" : "constructFromCanonical",
      "right" : "constructFromCanonical",
      "info" : "SimpleName[8866-8888]:SimpleName[8866-8888]"
    }, {
      "left" : "String canonical",
      "right" : "String canonical",
      "info" : "SingleVariableDeclaration[8889-8905]:SingleVariableDeclaration[8889-8905]"
    }, {
      "left" : "IllegalArgumentException",
      "right" : "IllegalArgumentException",
      "info" : "SimpleType[8914-8938]:SimpleType[8914-8938]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8943-8991]:Block[8943-8991]"
    }, {
      "left" : "return _parser.parse(canonical);",
      "right" : "return _parser.parse(canonical);",
      "info" : "ReturnStatement[8953-8985]:ReturnStatement[8953-8985]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9372-9378]:Modifier[9372-9378]"
    }, {
      "left" : "JavaType[]",
      "right" : "JavaType[]",
      "info" : "ArrayType[9379-9389]:ArrayType[9379-9389]"
    }, {
      "left" : "findTypeParameters",
      "right" : "findTypeParameters",
      "info" : "SimpleName[9390-9408]:SimpleName[9390-9408]"
    }, {
      "left" : "JavaType type",
      "right" : "JavaType type",
      "info" : "SingleVariableDeclaration[9409-9422]:SingleVariableDeclaration[9409-9422]"
    }, {
      "left" : "Class<?> expType",
      "right" : "Class<?> expType",
      "info" : "SingleVariableDeclaration[9424-9440]:SingleVariableDeclaration[9424-9440]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9446-10912]:Block[9446-10912]"
    }, {
      "left" : "if (expType == type.getParameterSource())",
      "right" : "if (expType == type.getParameterSource())",
      "info" : "IfStatement[10014-10417]:IfStatement[10014-10417]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10056-10417]:Block[10056-10417]"
    }, {
      "left" : "int count = type.containedTypeCount();",
      "right" : "int count = type.containedTypeCount();",
      "info" : "VariableDeclarationStatement[10137-10175]:VariableDeclarationStatement[10137-10175]"
    }, {
      "left" : "if (count == 0)",
      "right" : "if (count == 0)",
      "info" : "IfStatement[10188-10216]:IfStatement[10188-10216]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[10204-10216]:ReturnStatement[10204-10216]"
    }, {
      "left" : "JavaType[] result = new JavaType[count];",
      "right" : "JavaType[] result = new JavaType[count];",
      "info" : "VariableDeclarationStatement[10229-10269]:VariableDeclarationStatement[10229-10269]"
    }, {
      "left" : "for (int i = 0; i < count; ++i)",
      "right" : "for (int i = 0; i < count; ++i)",
      "info" : "ForStatement[10282-10380]:ForStatement[10282-10380]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10314-10380]:Block[10314-10380]"
    }, {
      "left" : "result[i] = type.containedType(i);",
      "right" : "result[i] = type.containedType(i);",
      "info" : "ExpressionStatement[10332-10366]:ExpressionStatement[10332-10366]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[10393-10407]:ReturnStatement[10393-10407]"
    }, {
      "left" : "Class<?> raw = type.getRawClass();",
      "right" : "Class<?> raw = type.getRawClass();",
      "info" : "VariableDeclarationStatement[10793-10827]:VariableDeclarationStatement[10793-10827]"
    }, {
      "left" : "return findTypeParameters(raw, expType, new TypeBindings(this, type));",
      "right" : "return findTypeParameters(raw, expType, new TypeBindings(this, type));",
      "info" : "ReturnStatement[10836-10906]:ReturnStatement[10836-10906]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10918-10924]:Modifier[10918-10924]"
    }, {
      "left" : "JavaType[]",
      "right" : "JavaType[]",
      "info" : "ArrayType[10925-10935]:ArrayType[10925-10935]"
    }, {
      "left" : "findTypeParameters",
      "right" : "findTypeParameters",
      "info" : "SimpleName[10936-10954]:SimpleName[10936-10954]"
    }, {
      "left" : "Class<?> clz",
      "right" : "Class<?> clz",
      "info" : "SingleVariableDeclaration[10955-10967]:SingleVariableDeclaration[10955-10967]"
    }, {
      "left" : "Class<?> expType",
      "right" : "Class<?> expType",
      "info" : "SingleVariableDeclaration[10969-10985]:SingleVariableDeclaration[10969-10985]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10987-11072]:Block[10987-11072]"
    }, {
      "left" : "return findTypeParameters(clz, expType, new TypeBindings(this, clz));",
      "right" : "return findTypeParameters(clz, expType, new TypeBindings(this, clz));",
      "info" : "ReturnStatement[10997-11066]:ReturnStatement[10997-11066]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11078-11084]:Modifier[11078-11084]"
    }, {
      "left" : "JavaType[]",
      "right" : "JavaType[]",
      "info" : "ArrayType[11085-11095]:ArrayType[11085-11095]"
    }, {
      "left" : "findTypeParameters",
      "right" : "findTypeParameters",
      "info" : "SimpleName[11096-11114]:SimpleName[11096-11114]"
    }, {
      "left" : "Class<?> clz",
      "right" : "Class<?> clz",
      "info" : "SingleVariableDeclaration[11115-11127]:SingleVariableDeclaration[11115-11127]"
    }, {
      "left" : "Class<?> expType",
      "right" : "Class<?> expType",
      "info" : "SingleVariableDeclaration[11129-11145]:SingleVariableDeclaration[11129-11145]"
    }, {
      "left" : "TypeBindings bindings",
      "right" : "TypeBindings bindings",
      "info" : "SingleVariableDeclaration[11147-11168]:SingleVariableDeclaration[11147-11168]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11174-12635]:Block[11174-12635]"
    }, {
      "left" : "HierarchicType subType = _findSuperTypeChain(clz, expType);",
      "right" : "HierarchicType subType = _findSuperTypeChain(clz, expType);",
      "info" : "VariableDeclarationStatement[11230-11289]:VariableDeclarationStatement[11230-11289]"
    }, {
      "left" : "if (subType == null)",
      "right" : "if (subType == null)",
      "info" : "IfStatement[11362-11508]:IfStatement[11362-11508]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11383-11508]:Block[11383-11508]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Class \"+clz.getName()+\" is not a subtype of \"+expType.getName());",
      "right" : "throw new IllegalArgumentException(\"Class \"+clz.getName()+\" is not a subtype of \"+expType.getName());",
      "info" : "ThrowStatement[11397-11498]:ThrowStatement[11397-11498]"
    }, {
      "left" : "HierarchicType superType = subType;",
      "right" : "HierarchicType superType = subType;",
      "info" : "VariableDeclarationStatement[11571-11606]:VariableDeclarationStatement[11571-11606]"
    }, {
      "left" : "while (superType.getSuperType() != null)",
      "right" : "while (superType.getSuperType() != null)",
      "info" : "WhileStatement[11615-12454]:WhileStatement[11615-12454]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11656-12454]:Block[11656-12454]"
    }, {
      "left" : "superType = superType.getSuperType();",
      "right" : "superType = superType.getSuperType();",
      "info" : "ExpressionStatement[11670-11707]:ExpressionStatement[11670-11707]"
    }, {
      "left" : "Class<?> raw = superType.getRawClass();",
      "right" : "Class<?> raw = superType.getRawClass();",
      "info" : "VariableDeclarationStatement[11720-11759]:VariableDeclarationStatement[11720-11759]"
    }, {
      "left" : "TypeBindings newBindings = new TypeBindings(this, raw);",
      "right" : "TypeBindings newBindings = new TypeBindings(this, raw);",
      "info" : "VariableDeclarationStatement[11772-11827]:VariableDeclarationStatement[11772-11827]"
    }, {
      "left" : "if (superType.isGeneric())",
      "right" : "if (superType.isGeneric())",
      "info" : "IfStatement[11840-12408]:IfStatement[11840-12408]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11867-12408]:Block[11867-12408]"
    }, {
      "left" : "ParameterizedType pt = superType.asGeneric();",
      "right" : "ParameterizedType pt = superType.asGeneric();",
      "info" : "VariableDeclarationStatement[11918-11963]:VariableDeclarationStatement[11918-11963]"
    }, {
      "left" : "Type[] actualTypes = pt.getActualTypeArguments();",
      "right" : "Type[] actualTypes = pt.getActualTypeArguments();",
      "info" : "VariableDeclarationStatement[11980-12029]:VariableDeclarationStatement[11980-12029]"
    }, {
      "left" : "TypeVariable<?>[] vars = raw.getTypeParameters();",
      "right" : "TypeVariable<?>[] vars = raw.getTypeParameters();",
      "info" : "VariableDeclarationStatement[12046-12095]:VariableDeclarationStatement[12046-12095]"
    }, {
      "left" : "int len = actualTypes.length;",
      "right" : "int len = actualTypes.length;",
      "info" : "VariableDeclarationStatement[12112-12141]:VariableDeclarationStatement[12112-12141]"
    }, {
      "left" : "for (int i = 0; i < len; ++i)",
      "right" : "for (int i = 0; i < len; ++i)",
      "info" : "ForStatement[12158-12394]:ForStatement[12158-12394]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12188-12394]:Block[12188-12394]"
    }, {
      "left" : "String name = vars[i].getName();",
      "right" : "String name = vars[i].getName();",
      "info" : "VariableDeclarationStatement[12210-12242]:VariableDeclarationStatement[12210-12242]"
    }, {
      "left" : "JavaType type = _constructType(actualTypes[i], bindings);",
      "right" : "JavaType type = _constructType(actualTypes[i], bindings);",
      "info" : "VariableDeclarationStatement[12263-12320]:VariableDeclarationStatement[12263-12320]"
    }, {
      "left" : "newBindings.addBinding(name, type);",
      "right" : "newBindings.addBinding(name, type);",
      "info" : "ExpressionStatement[12341-12376]:ExpressionStatement[12341-12376]"
    }, {
      "left" : "bindings = newBindings;",
      "right" : "bindings = newBindings;",
      "info" : "ExpressionStatement[12421-12444]:ExpressionStatement[12421-12444]"
    }, {
      "left" : "if (!superType.isGeneric())",
      "right" : "if (!superType.isGeneric())",
      "info" : "IfStatement[12525-12589]:IfStatement[12525-12589]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12553-12589]:Block[12553-12589]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[12567-12579]:ReturnStatement[12567-12579]"
    }, {
      "left" : "return bindings.typesAsArray();",
      "right" : "return bindings.typesAsArray();",
      "info" : "ReturnStatement[12598-12629]:ReturnStatement[12598-12629]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12984-12990]:Modifier[12984-12990]"
    }, {
      "left" : "JavaType",
      "right" : "JavaType",
      "info" : "SimpleType[12991-12999]:SimpleType[12991-12999]"
    }, {
      "left" : "moreSpecificType",
      "right" : "moreSpecificType",
      "info" : "SimpleName[13000-13016]:SimpleName[13000-13016]"
    }, {
      "left" : "JavaType type1",
      "right" : "JavaType type1",
      "info" : "SingleVariableDeclaration[13017-13031]:SingleVariableDeclaration[13017-13031]"
    }, {
      "left" : "JavaType type2",
      "right" : "JavaType type2",
      "info" : "SingleVariableDeclaration[13033-13047]:SingleVariableDeclaration[13033-13047]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13053-13511]:Block[13053-13511]"
    }, {
      "left" : "if (type1 == null)",
      "right" : "if (type1 == null)",
      "info" : "IfStatement[13063-13119]:IfStatement[13063-13119]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13082-13119]:Block[13082-13119]"
    }, {
      "left" : "return type2;",
      "right" : "return type2;",
      "info" : "ReturnStatement[13096-13109]:ReturnStatement[13096-13109]"
    }, {
      "left" : "if (type2 == null)",
      "right" : "if (type2 == null)",
      "info" : "IfStatement[13128-13184]:IfStatement[13128-13184]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13147-13184]:Block[13147-13184]"
    }, {
      "left" : "return type1;",
      "right" : "return type1;",
      "info" : "ReturnStatement[13161-13174]:ReturnStatement[13161-13174]"
    }, {
      "left" : "Class<?> raw1 = type1.getRawClass();",
      "right" : "Class<?> raw1 = type1.getRawClass();",
      "info" : "VariableDeclarationStatement[13193-13229]:VariableDeclarationStatement[13193-13229]"
    }, {
      "left" : "Class<?> raw2 = type2.getRawClass();",
      "right" : "Class<?> raw2 = type2.getRawClass();",
      "info" : "VariableDeclarationStatement[13238-13274]:VariableDeclarationStatement[13238-13274]"
    }, {
      "left" : "if (raw1 == raw2)",
      "right" : "if (raw1 == raw2)",
      "info" : "IfStatement[13283-13338]:IfStatement[13283-13338]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13301-13338]:Block[13301-13338]"
    }, {
      "left" : "return type1;",
      "right" : "return type1;",
      "info" : "ReturnStatement[13315-13328]:ReturnStatement[13315-13328]"
    }, {
      "left" : "if (raw1.isAssignableFrom(raw2))",
      "right" : "if (raw1.isAssignableFrom(raw2))",
      "info" : "IfStatement[13413-13483]:IfStatement[13413-13483]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13446-13483]:Block[13446-13483]"
    }, {
      "left" : "return type2;",
      "right" : "return type2;",
      "info" : "ReturnStatement[13460-13473]:ReturnStatement[13460-13473]"
    }, {
      "left" : "return type1;",
      "right" : "return type1;",
      "info" : "ReturnStatement[13492-13505]:ReturnStatement[13492-13505]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[13695-13701]:Modifier[13695-13701]"
    }, {
      "left" : "JavaType",
      "right" : "JavaType",
      "info" : "SimpleType[13702-13710]:SimpleType[13702-13710]"
    }, {
      "left" : "constructType",
      "right" : "constructType",
      "info" : "SimpleName[13711-13724]:SimpleName[13711-13724]"
    }, {
      "left" : "Type type",
      "right" : "Type type",
      "info" : "SingleVariableDeclaration[13725-13734]:SingleVariableDeclaration[13725-13734]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13736-13786]:Block[13736-13786]"
    }, {
      "left" : "return _constructType(type, null);",
      "right" : "return _constructType(type, null);",
      "info" : "ReturnStatement[13746-13780]:ReturnStatement[13746-13780]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[13792-13798]:Modifier[13792-13798]"
    }, {
      "left" : "JavaType",
      "right" : "JavaType",
      "info" : "SimpleType[13799-13807]:SimpleType[13799-13807]"
    }, {
      "left" : "constructType",
      "right" : "constructType",
      "info" : "SimpleName[13808-13821]:SimpleName[13808-13821]"
    }, {
      "left" : "Type type",
      "right" : "Type type",
      "info" : "SingleVariableDeclaration[13822-13831]:SingleVariableDeclaration[13822-13831]"
    }, {
      "left" : "TypeBindings bindings",
      "right" : "TypeBindings bindings",
      "info" : "SingleVariableDeclaration[13833-13854]:SingleVariableDeclaration[13833-13854]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13856-13910]:Block[13856-13910]"
    }, {
      "left" : "return _constructType(type, bindings);",
      "right" : "return _constructType(type, bindings);",
      "info" : "ReturnStatement[13866-13904]:ReturnStatement[13866-13904]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[13920-13926]:Modifier[13920-13926]"
    }, {
      "left" : "JavaType",
      "right" : "JavaType",
      "info" : "SimpleType[13927-13935]:SimpleType[13927-13935]"
    }, {
      "left" : "constructType",
      "right" : "constructType",
      "info" : "SimpleName[13936-13949]:SimpleName[13936-13949]"
    }, {
      "left" : "TypeReference<?> typeRef",
      "right" : "TypeReference<?> typeRef",
      "info" : "SingleVariableDeclaration[13950-13974]:SingleVariableDeclaration[13950-13974]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13976-14039]:Block[13976-14039]"
    }, {
      "left" : "return _constructType(typeRef.getType(), null);",
      "right" : "return _constructType(typeRef.getType(), null);",
      "info" : "ReturnStatement[13986-14033]:ReturnStatement[13986-14033]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[14049-14055]:Modifier[14049-14055]"
    }, {
      "left" : "JavaType",
      "right" : "JavaType",
      "info" : "SimpleType[14056-14064]:SimpleType[14056-14064]"
    }, {
      "left" : "constructType",
      "right" : "constructType",
      "info" : "SimpleName[14065-14078]:SimpleName[14065-14078]"
    }, {
      "left" : "Type type",
      "right" : "Type type",
      "info" : "SingleVariableDeclaration[14079-14088]:SingleVariableDeclaration[14079-14088]"
    }, {
      "left" : "Class<?> context",
      "right" : "Class<?> context",
      "info" : "SingleVariableDeclaration[14090-14106]:SingleVariableDeclaration[14090-14106]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14108-14240]:Block[14108-14240]"
    }, {
      "left" : "TypeBindings b = (context == null) ? null : new TypeBindings(this, context);",
      "right" : "TypeBindings b = (context == null) ? null : new TypeBindings(this, context);",
      "info" : "VariableDeclarationStatement[14118-14194]:VariableDeclarationStatement[14118-14194]"
    }, {
      "left" : "return _constructType(type, b);",
      "right" : "return _constructType(type, b);",
      "info" : "ReturnStatement[14203-14234]:ReturnStatement[14203-14234]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[14246-14252]:Modifier[14246-14252]"
    }, {
      "left" : "JavaType",
      "right" : "JavaType",
      "info" : "SimpleType[14253-14261]:SimpleType[14253-14261]"
    }, {
      "left" : "constructType",
      "right" : "constructType",
      "info" : "SimpleName[14262-14275]:SimpleName[14262-14275]"
    }, {
      "left" : "Type type",
      "right" : "Type type",
      "info" : "SingleVariableDeclaration[14276-14285]:SingleVariableDeclaration[14276-14285]"
    }, {
      "left" : "JavaType context",
      "right" : "JavaType context",
      "info" : "SingleVariableDeclaration[14287-14303]:SingleVariableDeclaration[14287-14303]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14305-14437]:Block[14305-14437]"
    }, {
      "left" : "TypeBindings b = (context == null) ? null : new TypeBindings(this, context);",
      "right" : "TypeBindings b = (context == null) ? null : new TypeBindings(this, context);",
      "info" : "VariableDeclarationStatement[14315-14391]:VariableDeclarationStatement[14315-14391]"
    }, {
      "left" : "return _constructType(type, b);",
      "right" : "return _constructType(type, b);",
      "info" : "ReturnStatement[14400-14431]:ReturnStatement[14400-14431]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[14651-14660]:Modifier[14651-14660]"
    }, {
      "left" : "JavaType",
      "right" : "JavaType",
      "info" : "SimpleType[14661-14669]:SimpleType[14661-14669]"
    }, {
      "left" : "_constructType",
      "right" : "_constructType",
      "info" : "SimpleName[14670-14684]:SimpleName[14670-14684]"
    }, {
      "left" : "Type type",
      "right" : "Type type",
      "info" : "SingleVariableDeclaration[14685-14694]:SingleVariableDeclaration[14685-14694]"
    }, {
      "left" : "TypeBindings context",
      "right" : "TypeBindings context",
      "info" : "SingleVariableDeclaration[14696-14716]:SingleVariableDeclaration[14696-14716]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14722-16236]:Block[14722-16236]"
    }, {
      "left" : "JavaType resultType;",
      "right" : "JavaType resultType;",
      "info" : "VariableDeclarationStatement[14732-14752]:VariableDeclarationStatement[14732-14752]"
    }, {
      "left" : "if (type instanceof Class<?>)",
      "right" : "if (type instanceof Class<?>)",
      "info" : "IfStatement[14787-15749]:IfStatement[14787-15749]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14817-14891]:Block[14817-14891]"
    }, {
      "left" : "resultType = _fromClass((Class<?>) type, context);",
      "right" : "resultType = _fromClass((Class<?>) type, context);",
      "info" : "ExpressionStatement[14831-14881]:ExpressionStatement[14831-14881]"
    }, {
      "left" : "if (type instanceof ParameterizedType)",
      "right" : "if (type instanceof ParameterizedType)",
      "info" : "IfStatement[14953-15749]:IfStatement[14953-15749]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14992-15079]:Block[14992-15079]"
    }, {
      "left" : "resultType = _fromParamType((ParameterizedType) type, context);",
      "right" : "resultType = _fromParamType((ParameterizedType) type, context);",
      "info" : "ExpressionStatement[15006-15069]:ExpressionStatement[15006-15069]"
    }, {
      "left" : "if (type instanceof JavaType)",
      "right" : "if (type instanceof JavaType)",
      "info" : "IfStatement[15093-15749]:IfStatement[15093-15749]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15123-15185]:Block[15123-15185]"
    }, {
      "left" : "return (JavaType) type;",
      "right" : "return (JavaType) type;",
      "info" : "ReturnStatement[15152-15175]:ReturnStatement[15152-15175]"
    }, {
      "left" : "if (type instanceof GenericArrayType)",
      "right" : "if (type instanceof GenericArrayType)",
      "info" : "IfStatement[15199-15749]:IfStatement[15199-15749]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15237-15323]:Block[15237-15323]"
    }, {
      "left" : "resultType = _fromArrayType((GenericArrayType) type, context);",
      "right" : "resultType = _fromArrayType((GenericArrayType) type, context);",
      "info" : "ExpressionStatement[15251-15313]:ExpressionStatement[15251-15313]"
    }, {
      "left" : "if (type instanceof TypeVariable<?>)",
      "right" : "if (type instanceof TypeVariable<?>)",
      "info" : "IfStatement[15337-15749]:IfStatement[15337-15749]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15374-15458]:Block[15374-15458]"
    }, {
      "left" : "resultType = _fromVariable((TypeVariable<?>) type, context);",
      "right" : "resultType = _fromVariable((TypeVariable<?>) type, context);",
      "info" : "ExpressionStatement[15388-15448]:ExpressionStatement[15388-15448]"
    }, {
      "left" : "if (type instanceof WildcardType)",
      "right" : "if (type instanceof WildcardType)",
      "info" : "IfStatement[15472-15749]:IfStatement[15472-15749]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15506-15587]:Block[15506-15587]"
    }, {
      "left" : "resultType = _fromWildcard((WildcardType) type, context);",
      "right" : "resultType = _fromWildcard((WildcardType) type, context);",
      "info" : "ExpressionStatement[15520-15577]:ExpressionStatement[15520-15577]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15593-15749]:Block[15593-15749]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Unrecognized Type: \"+((type == null) ? \"[null]\" : type.toString()));",
      "right" : "throw new IllegalArgumentException(\"Unrecognized Type: \"+((type == null) ? \"[null]\" : type.toString()));",
      "info" : "ThrowStatement[15635-15739]:ThrowStatement[15635-15739]"
    }, {
      "left" : "if (_modifiers != null && !resultType.isContainerType())",
      "right" : "if (_modifiers != null && !resultType.isContainerType())",
      "info" : "IfStatement[15993-16203]:IfStatement[15993-16203]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16050-16203]:Block[16050-16203]"
    }, {
      "left" : "for (TypeModifier mod : _modifiers)",
      "right" : "for (TypeModifier mod : _modifiers)",
      "info" : "EnhancedForStatement[16064-16193]:EnhancedForStatement[16064-16193]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16100-16193]:Block[16100-16193]"
    }, {
      "left" : "resultType = mod.modifyType(resultType, type, context, this);",
      "right" : "resultType = mod.modifyType(resultType, type, context, this);",
      "info" : "ExpressionStatement[16118-16179]:ExpressionStatement[16118-16179]"
    }, {
      "left" : "return resultType;",
      "right" : "return resultType;",
      "info" : "ReturnStatement[16212-16230]:ReturnStatement[16212-16230]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[16627-16633]:Modifier[16627-16633]"
    }, {
      "left" : "ArrayType",
      "right" : "ArrayType",
      "info" : "SimpleType[16634-16643]:SimpleType[16634-16643]"
    }, {
      "left" : "constructArrayType",
      "right" : "constructArrayType",
      "info" : "SimpleName[16644-16662]:SimpleName[16644-16662]"
    }, {
      "left" : "Class<?> elementType",
      "right" : "Class<?> elementType",
      "info" : "SingleVariableDeclaration[16663-16683]:SingleVariableDeclaration[16663-16683]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16685-16775]:Block[16685-16775]"
    }, {
      "left" : "return ArrayType.construct(_constructType(elementType, null), null, null);",
      "right" : "return ArrayType.construct(_constructType(elementType, null), null, null);",
      "info" : "ReturnStatement[16695-16769]:ReturnStatement[16695-16769]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[16972-16978]:Modifier[16972-16978]"
    }, {
      "left" : "ArrayType",
      "right" : "ArrayType",
      "info" : "SimpleType[16979-16988]:SimpleType[16979-16988]"
    }, {
      "left" : "constructArrayType",
      "right" : "constructArrayType",
      "info" : "SimpleName[16989-17007]:SimpleName[16989-17007]"
    }, {
      "left" : "JavaType elementType",
      "right" : "JavaType elementType",
      "info" : "SingleVariableDeclaration[17008-17028]:SingleVariableDeclaration[17008-17028]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17030-17098]:Block[17030-17098]"
    }, {
      "left" : "return ArrayType.construct(elementType, null, null);",
      "right" : "return ArrayType.construct(elementType, null, null);",
      "info" : "ReturnStatement[17040-17092]:ReturnStatement[17040-17092]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[17300-17306]:Modifier[17300-17306]"
    }, {
      "left" : "CollectionType",
      "right" : "CollectionType",
      "info" : "SimpleType[17307-17321]:SimpleType[17307-17321]"
    }, {
      "left" : "constructCollectionType",
      "right" : "constructCollectionType",
      "info" : "SimpleName[17322-17345]:SimpleName[17322-17345]"
    }, {
      "left" : "Class<? extends Collection> collectionClass",
      "right" : "Class<? extends Collection> collectionClass",
      "info" : "SingleVariableDeclaration[17346-17389]:SingleVariableDeclaration[17346-17389]"
    }, {
      "left" : "Class<?> elementClass",
      "right" : "Class<?> elementClass",
      "info" : "SingleVariableDeclaration[17391-17412]:SingleVariableDeclaration[17391-17412]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17414-17508]:Block[17414-17508]"
    }, {
      "left" : "return CollectionType.construct(collectionClass, constructType(elementClass));",
      "right" : "return CollectionType.construct(collectionClass, constructType(elementClass));",
      "info" : "ReturnStatement[17424-17502]:ReturnStatement[17424-17502]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[17714-17720]:Modifier[17714-17720]"
    }, {
      "left" : "CollectionType",
      "right" : "CollectionType",
      "info" : "SimpleType[17721-17735]:SimpleType[17721-17735]"
    }, {
      "left" : "constructCollectionType",
      "right" : "constructCollectionType",
      "info" : "SimpleName[17736-17759]:SimpleName[17736-17759]"
    }, {
      "left" : "Class<? extends Collection> collectionClass",
      "right" : "Class<? extends Collection> collectionClass",
      "info" : "SingleVariableDeclaration[17760-17803]:SingleVariableDeclaration[17760-17803]"
    }, {
      "left" : "JavaType elementType",
      "right" : "JavaType elementType",
      "info" : "SingleVariableDeclaration[17805-17825]:SingleVariableDeclaration[17805-17825]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17827-17905]:Block[17827-17905]"
    }, {
      "left" : "return CollectionType.construct(collectionClass, elementType);",
      "right" : "return CollectionType.construct(collectionClass, elementType);",
      "info" : "ReturnStatement[17837-17899]:ReturnStatement[17837-17899]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[18112-18118]:Modifier[18112-18118]"
    }, {
      "left" : "CollectionLikeType",
      "right" : "CollectionLikeType",
      "info" : "SimpleType[18119-18137]:SimpleType[18119-18137]"
    }, {
      "left" : "constructCollectionLikeType",
      "right" : "constructCollectionLikeType",
      "info" : "SimpleName[18138-18165]:SimpleName[18138-18165]"
    }, {
      "left" : "Class<?> collectionClass",
      "right" : "Class<?> collectionClass",
      "info" : "SingleVariableDeclaration[18166-18190]:SingleVariableDeclaration[18166-18190]"
    }, {
      "left" : "Class<?> elementClass",
      "right" : "Class<?> elementClass",
      "info" : "SingleVariableDeclaration[18192-18213]:SingleVariableDeclaration[18192-18213]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18215-18313]:Block[18215-18313]"
    }, {
      "left" : "return CollectionLikeType.construct(collectionClass, constructType(elementClass));",
      "right" : "return CollectionLikeType.construct(collectionClass, constructType(elementClass));",
      "info" : "ReturnStatement[18225-18307]:ReturnStatement[18225-18307]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[18524-18530]:Modifier[18524-18530]"
    }, {
      "left" : "CollectionLikeType",
      "right" : "CollectionLikeType",
      "info" : "SimpleType[18531-18549]:SimpleType[18531-18549]"
    }, {
      "left" : "constructCollectionLikeType",
      "right" : "constructCollectionLikeType",
      "info" : "SimpleName[18550-18577]:SimpleName[18550-18577]"
    }, {
      "left" : "Class<?> collectionClass",
      "right" : "Class<?> collectionClass",
      "info" : "SingleVariableDeclaration[18578-18602]:SingleVariableDeclaration[18578-18602]"
    }, {
      "left" : "JavaType elementType",
      "right" : "JavaType elementType",
      "info" : "SingleVariableDeclaration[18604-18624]:SingleVariableDeclaration[18604-18624]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18626-18708]:Block[18626-18708]"
    }, {
      "left" : "return CollectionLikeType.construct(collectionClass, elementType);",
      "right" : "return CollectionLikeType.construct(collectionClass, elementType);",
      "info" : "ReturnStatement[18636-18702]:ReturnStatement[18636-18702]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[18916-18922]:Modifier[18916-18922]"
    }, {
      "left" : "MapType",
      "right" : "MapType",
      "info" : "SimpleType[18923-18930]:SimpleType[18923-18930]"
    }, {
      "left" : "constructMapType",
      "right" : "constructMapType",
      "info" : "SimpleName[18931-18947]:SimpleName[18931-18947]"
    }, {
      "left" : "Class<? extends Map> mapClass",
      "right" : "Class<? extends Map> mapClass",
      "info" : "SingleVariableDeclaration[18948-18977]:SingleVariableDeclaration[18948-18977]"
    }, {
      "left" : "JavaType keyType",
      "right" : "JavaType keyType",
      "info" : "SingleVariableDeclaration[18979-18995]:SingleVariableDeclaration[18979-18995]"
    }, {
      "left" : "JavaType valueType",
      "right" : "JavaType valueType",
      "info" : "SingleVariableDeclaration[18997-19015]:SingleVariableDeclaration[18997-19015]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19017-19088]:Block[19017-19088]"
    }, {
      "left" : "return MapType.construct(mapClass, keyType, valueType);",
      "right" : "return MapType.construct(mapClass, keyType, valueType);",
      "info" : "ReturnStatement[19027-19082]:ReturnStatement[19027-19082]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[19292-19298]:Modifier[19292-19298]"
    }, {
      "left" : "MapType",
      "right" : "MapType",
      "info" : "SimpleType[19299-19306]:SimpleType[19299-19306]"
    }, {
      "left" : "constructMapType",
      "right" : "constructMapType",
      "info" : "SimpleName[19307-19323]:SimpleName[19307-19323]"
    }, {
      "left" : "Class<? extends Map> mapClass",
      "right" : "Class<? extends Map> mapClass",
      "info" : "SingleVariableDeclaration[19324-19353]:SingleVariableDeclaration[19324-19353]"
    }, {
      "left" : "Class<?> keyClass",
      "right" : "Class<?> keyClass",
      "info" : "SingleVariableDeclaration[19355-19372]:SingleVariableDeclaration[19355-19372]"
    }, {
      "left" : "Class<?> valueClass",
      "right" : "Class<?> valueClass",
      "info" : "SingleVariableDeclaration[19374-19393]:SingleVariableDeclaration[19374-19393]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19395-19498]:Block[19395-19498]"
    }, {
      "left" : "return MapType.construct(mapClass, constructType(keyClass), constructType(valueClass));",
      "right" : "return MapType.construct(mapClass, constructType(keyClass), constructType(valueClass));",
      "info" : "ReturnStatement[19405-19492]:ReturnStatement[19405-19492]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[19706-19712]:Modifier[19706-19712]"
    }, {
      "left" : "MapLikeType",
      "right" : "MapLikeType",
      "info" : "SimpleType[19713-19724]:SimpleType[19713-19724]"
    }, {
      "left" : "constructMapLikeType",
      "right" : "constructMapLikeType",
      "info" : "SimpleName[19725-19745]:SimpleName[19725-19745]"
    }, {
      "left" : "Class<?> mapClass",
      "right" : "Class<?> mapClass",
      "info" : "SingleVariableDeclaration[19746-19763]:SingleVariableDeclaration[19746-19763]"
    }, {
      "left" : "JavaType keyType",
      "right" : "JavaType keyType",
      "info" : "SingleVariableDeclaration[19765-19781]:SingleVariableDeclaration[19765-19781]"
    }, {
      "left" : "JavaType valueType",
      "right" : "JavaType valueType",
      "info" : "SingleVariableDeclaration[19783-19801]:SingleVariableDeclaration[19783-19801]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19803-19878]:Block[19803-19878]"
    }, {
      "left" : "return MapLikeType.construct(mapClass, keyType, valueType);",
      "right" : "return MapLikeType.construct(mapClass, keyType, valueType);",
      "info" : "ReturnStatement[19813-19872]:ReturnStatement[19813-19872]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[20090-20096]:Modifier[20090-20096]"
    }, {
      "left" : "MapLikeType",
      "right" : "MapLikeType",
      "info" : "SimpleType[20097-20108]:SimpleType[20097-20108]"
    }, {
      "left" : "constructMapLikeType",
      "right" : "constructMapLikeType",
      "info" : "SimpleName[20109-20129]:SimpleName[20109-20129]"
    }, {
      "left" : "Class<?> mapClass",
      "right" : "Class<?> mapClass",
      "info" : "SingleVariableDeclaration[20130-20147]:SingleVariableDeclaration[20130-20147]"
    }, {
      "left" : "Class<?> keyClass",
      "right" : "Class<?> keyClass",
      "info" : "SingleVariableDeclaration[20149-20166]:SingleVariableDeclaration[20149-20166]"
    }, {
      "left" : "Class<?> valueClass",
      "right" : "Class<?> valueClass",
      "info" : "SingleVariableDeclaration[20168-20187]:SingleVariableDeclaration[20168-20187]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20189-20292]:Block[20189-20292]"
    }, {
      "left" : "return MapType.construct(mapClass, constructType(keyClass), constructType(valueClass));",
      "right" : "return MapType.construct(mapClass, constructType(keyClass), constructType(valueClass));",
      "info" : "ReturnStatement[20199-20286]:ReturnStatement[20199-20286]"
    }, {
      "left" : "@Deprecated",
      "right" : "@Deprecated",
      "info" : "MarkerAnnotation[20477-20488]:MarkerAnnotation[20477-20488]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[20493-20499]:Modifier[20493-20499]"
    }, {
      "left" : "JavaType",
      "right" : "JavaType",
      "info" : "SimpleType[20500-20508]:SimpleType[20500-20508]"
    }, {
      "left" : "constructSimpleType",
      "right" : "constructSimpleType",
      "info" : "SimpleName[20509-20528]:SimpleName[20509-20528]"
    }, {
      "left" : "Class<?> rawType",
      "right" : "Class<?> rawType",
      "info" : "SingleVariableDeclaration[20529-20545]:SingleVariableDeclaration[20529-20545]"
    }, {
      "left" : "JavaType[] parameterTypes",
      "right" : "JavaType[] parameterTypes",
      "info" : "SingleVariableDeclaration[20547-20572]:SingleVariableDeclaration[20547-20572]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20574-20651]:Block[20574-20651]"
    }, {
      "left" : "return constructSimpleType(rawType, rawType, parameterTypes);",
      "right" : "return constructSimpleType(rawType, rawType, parameterTypes);",
      "info" : "ReturnStatement[20584-20645]:ReturnStatement[20584-20645]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[20753-20759]:Modifier[20753-20759]"
    }, {
      "left" : "JavaType",
      "right" : "JavaType",
      "info" : "SimpleType[20760-20768]:SimpleType[20760-20768]"
    }, {
      "left" : "constructSimpleType",
      "right" : "constructSimpleType",
      "info" : "SimpleName[20769-20788]:SimpleName[20769-20788]"
    }, {
      "left" : "Class<?> rawType",
      "right" : "Class<?> rawType",
      "info" : "SingleVariableDeclaration[20789-20805]:SingleVariableDeclaration[20789-20805]"
    }, {
      "left" : "Class<?> parameterTarget",
      "right" : "Class<?> parameterTarget",
      "info" : "SingleVariableDeclaration[20807-20831]:SingleVariableDeclaration[20807-20831]"
    }, {
      "left" : "JavaType[] parameterTypes",
      "right" : "JavaType[] parameterTypes",
      "info" : "SingleVariableDeclaration[20845-20870]:SingleVariableDeclaration[20845-20870]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20876-21632]:Block[20876-21632]"
    }, {
      "left" : "TypeVariable<?>[] typeVars = parameterTarget.getTypeParameters();",
      "right" : "TypeVariable<?>[] typeVars = parameterTarget.getTypeParameters();",
      "info" : "VariableDeclarationStatement[20962-21027]:VariableDeclarationStatement[20962-21027]"
    }, {
      "left" : "if (typeVars.length != parameterTypes.length)",
      "right" : "if (typeVars.length != parameterTypes.length)",
      "info" : "IfStatement[21036-21354]:IfStatement[21036-21354]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21082-21354]:Block[21082-21354]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Parameter type mismatch for \"+rawType.getName()\n                    +\" (and target \"+parameterTarget.getName()+\"): expected \"+typeVars.length\n                    +\" parameters, was given \"+parameterTypes.length);",
      "right" : "throw new IllegalArgumentException(\"Parameter type mismatch for \"+rawType.getName()\n                    +\" (and target \"+parameterTarget.getName()+\"): expected \"+typeVars.length\n                    +\" parameters, was given \"+parameterTypes.length);",
      "info" : "ThrowStatement[21096-21344]:ThrowStatement[21096-21344]"
    }, {
      "left" : "String[] names = new String[typeVars.length];",
      "right" : "String[] names = new String[typeVars.length];",
      "info" : "VariableDeclarationStatement[21363-21408]:VariableDeclarationStatement[21363-21408]"
    }, {
      "left" : "for (int i = 0, len = typeVars.length; i < len; ++i)",
      "right" : "for (int i = 0, len = typeVars.length; i < len; ++i)",
      "info" : "ForStatement[21417-21527]:ForStatement[21417-21527]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21470-21527]:Block[21470-21527]"
    }, {
      "left" : "names[i] = typeVars[i].getName();",
      "right" : "names[i] = typeVars[i].getName();",
      "info" : "ExpressionStatement[21484-21517]:ExpressionStatement[21484-21517]"
    }, {
      "left" : "return new SimpleType(rawType, names, parameterTypes, null, null, false, parameterTarget);",
      "right" : "return new SimpleType(rawType, names, parameterTypes, null, null, false, parameterTarget);",
      "info" : "ReturnStatement[21536-21626]:ReturnStatement[21536-21626]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[21673-21679]:Modifier[21673-21679]"
    }, {
      "left" : "JavaType",
      "right" : "JavaType",
      "info" : "SimpleType[21680-21688]:SimpleType[21680-21688]"
    }, {
      "left" : "constructReferenceType",
      "right" : "constructReferenceType",
      "info" : "SimpleName[21689-21711]:SimpleName[21689-21711]"
    }, {
      "left" : "Class<?> rawType",
      "right" : "Class<?> rawType",
      "info" : "SingleVariableDeclaration[21712-21728]:SingleVariableDeclaration[21712-21728]"
    }, {
      "left" : "JavaType refType",
      "right" : "JavaType refType",
      "info" : "SingleVariableDeclaration[21730-21746]:SingleVariableDeclaration[21730-21746]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21752-21830]:Block[21752-21830]"
    }, {
      "left" : "return new ReferenceType(rawType, refType, null, null, false);",
      "right" : "return new ReferenceType(rawType, refType, null, null, false);",
      "info" : "ReturnStatement[21762-21824]:ReturnStatement[21762-21824]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[22133-22139]:Modifier[22133-22139]"
    }, {
      "left" : "JavaType",
      "right" : "JavaType",
      "info" : "SimpleType[22140-22148]:SimpleType[22140-22148]"
    }, {
      "left" : "uncheckedSimpleType",
      "right" : "uncheckedSimpleType",
      "info" : "SimpleName[22149-22168]:SimpleName[22149-22168]"
    }, {
      "left" : "Class<?> cls",
      "right" : "Class<?> cls",
      "info" : "SingleVariableDeclaration[22169-22181]:SingleVariableDeclaration[22169-22181]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22183-22226]:Block[22183-22226]"
    }, {
      "left" : "return new SimpleType(cls);",
      "right" : "return new SimpleType(cls);",
      "info" : "ReturnStatement[22193-22220]:ReturnStatement[22193-22220]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[23660-23666]:Modifier[23660-23666]"
    }, {
      "left" : "JavaType",
      "right" : "JavaType",
      "info" : "SimpleType[23667-23675]:SimpleType[23667-23675]"
    }, {
      "left" : "constructParametrizedType",
      "right" : "constructParametrizedType",
      "info" : "SimpleName[23676-23701]:SimpleName[23676-23701]"
    }, {
      "left" : "Class<?> parametrized",
      "right" : "Class<?> parametrized",
      "info" : "SingleVariableDeclaration[23702-23723]:SingleVariableDeclaration[23702-23723]"
    }, {
      "left" : "Class<?> parametersFor",
      "right" : "Class<?> parametersFor",
      "info" : "SingleVariableDeclaration[23725-23747]:SingleVariableDeclaration[23725-23747]"
    }, {
      "left" : "Class<?>... parameterClasses",
      "right" : "Class<?>... parameterClasses",
      "info" : "SingleVariableDeclaration[23761-23789]:SingleVariableDeclaration[23761-23789]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23795-24072]:Block[23795-24072]"
    }, {
      "left" : "int len = parameterClasses.length;",
      "right" : "int len = parameterClasses.length;",
      "info" : "VariableDeclarationStatement[23805-23839]:VariableDeclarationStatement[23805-23839]"
    }, {
      "left" : "JavaType[] pt = new JavaType[len];",
      "right" : "JavaType[] pt = new JavaType[len];",
      "info" : "VariableDeclarationStatement[23848-23882]:VariableDeclarationStatement[23848-23882]"
    }, {
      "left" : "for (int i = 0; i < len; ++i)",
      "right" : "for (int i = 0; i < len; ++i)",
      "info" : "ForStatement[23891-23991]:ForStatement[23891-23991]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23921-23991]:Block[23921-23991]"
    }, {
      "left" : "pt[i] = _fromClass(parameterClasses[i], null);",
      "right" : "pt[i] = _fromClass(parameterClasses[i], null);",
      "info" : "ExpressionStatement[23935-23981]:ExpressionStatement[23935-23981]"
    }, {
      "left" : "return constructParametrizedType(parametrized, parametersFor, pt);",
      "right" : "return constructParametrizedType(parametrized, parametersFor, pt);",
      "info" : "ReturnStatement[24000-24066]:ReturnStatement[24000-24066]"
    }, {
      "left" : "@Deprecated",
      "right" : "@Deprecated",
      "info" : "MarkerAnnotation[24172-24183]:MarkerAnnotation[24172-24183]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[24188-24194]:Modifier[24188-24194]"
    }, {
      "left" : "JavaType",
      "right" : "JavaType",
      "info" : "SimpleType[24195-24203]:SimpleType[24195-24203]"
    }, {
      "left" : "constructParametricType",
      "right" : "constructParametricType",
      "info" : "SimpleName[24204-24227]:SimpleName[24204-24227]"
    }, {
      "left" : "Class<?> parametrized",
      "right" : "Class<?> parametrized",
      "info" : "SingleVariableDeclaration[24228-24249]:SingleVariableDeclaration[24228-24249]"
    }, {
      "left" : "Class<?>... parameterClasses",
      "right" : "Class<?>... parameterClasses",
      "info" : "SingleVariableDeclaration[24251-24279]:SingleVariableDeclaration[24251-24279]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24281-24376]:Block[24281-24376]"
    }, {
      "left" : "return constructParametrizedType(parametrized, parametrized, parameterClasses);",
      "right" : "return constructParametrizedType(parametrized, parametrized, parameterClasses);",
      "info" : "ReturnStatement[24291-24370]:ReturnStatement[24291-24370]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[25792-25798]:Modifier[25792-25798]"
    }, {
      "left" : "JavaType",
      "right" : "JavaType",
      "info" : "SimpleType[25799-25807]:SimpleType[25799-25807]"
    }, {
      "left" : "constructParametrizedType",
      "right" : "constructParametrizedType",
      "info" : "SimpleName[25808-25833]:SimpleName[25808-25833]"
    }, {
      "left" : "Class<?> parametrized",
      "right" : "Class<?> parametrized",
      "info" : "SingleVariableDeclaration[25834-25855]:SingleVariableDeclaration[25834-25855]"
    }, {
      "left" : "Class<?> parametersFor",
      "right" : "Class<?> parametersFor",
      "info" : "SingleVariableDeclaration[25857-25879]:SingleVariableDeclaration[25857-25879]"
    }, {
      "left" : "JavaType... parameterTypes",
      "right" : "JavaType... parameterTypes",
      "info" : "SingleVariableDeclaration[25893-25919]:SingleVariableDeclaration[25893-25919]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25925-27302]:Block[25925-27302]"
    }, {
      "left" : "JavaType resultType;",
      "right" : "JavaType resultType;",
      "info" : "VariableDeclarationStatement[25935-25955]:VariableDeclarationStatement[25935-25955]"
    }, {
      "left" : "if (parametrized.isArray())",
      "right" : "if (parametrized.isArray())",
      "info" : "IfStatement[26035-27269]:IfStatement[26035-27269]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26063-26411]:Block[26063-26411]"
    }, {
      "left" : "if (parameterTypes.length != 1)",
      "right" : "if (parameterTypes.length != 1)",
      "info" : "IfStatement[26165-26337]:IfStatement[26165-26337]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26197-26337]:Block[26197-26337]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Need exactly 1 parameter type for arrays (\"+parametrized.getName()+\")\");",
      "right" : "throw new IllegalArgumentException(\"Need exactly 1 parameter type for arrays (\"+parametrized.getName()+\")\");",
      "info" : "ThrowStatement[26215-26323]:ThrowStatement[26215-26323]"
    }, {
      "left" : "resultType = constructArrayType(parameterTypes[0]);",
      "right" : "resultType = constructArrayType(parameterTypes[0]);",
      "info" : "ExpressionStatement[26350-26401]:ExpressionStatement[26350-26401]"
    }, {
      "left" : "if (Map.class.isAssignableFrom(parametrized))",
      "right" : "if (Map.class.isAssignableFrom(parametrized))",
      "info" : "IfStatement[26425-27269]:IfStatement[26425-27269]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26471-26783]:Block[26471-26783]"
    }, {
      "left" : "if (parameterTypes.length != 2)",
      "right" : "if (parameterTypes.length != 2)",
      "info" : "IfStatement[26485-26661]:IfStatement[26485-26661]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26517-26661]:Block[26517-26661]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Need exactly 2 parameter types for Map types (\"+parametrized.getName()+\")\");",
      "right" : "throw new IllegalArgumentException(\"Need exactly 2 parameter types for Map types (\"+parametrized.getName()+\")\");",
      "info" : "ThrowStatement[26535-26647]:ThrowStatement[26535-26647]"
    }, {
      "left" : "resultType = constructMapType((Class<Map<?,?>>)parametrized, parameterTypes[0], parameterTypes[1]);",
      "right" : "resultType = constructMapType((Class<Map<?,?>>)parametrized, parameterTypes[0], parameterTypes[1]);",
      "info" : "ExpressionStatement[26674-26773]:ExpressionStatement[26674-26773]"
    }, {
      "left" : "if (Collection.class.isAssignableFrom(parametrized))",
      "right" : "if (Collection.class.isAssignableFrom(parametrized))",
      "info" : "IfStatement[26797-27269]:IfStatement[26797-27269]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26850-27161]:Block[26850-27161]"
    }, {
      "left" : "if (parameterTypes.length != 1)",
      "right" : "if (parameterTypes.length != 1)",
      "info" : "IfStatement[26864-27046]:IfStatement[26864-27046]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26896-27046]:Block[26896-27046]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Need exactly 1 parameter type for Collection types (\"+parametrized.getName()+\")\");",
      "right" : "throw new IllegalArgumentException(\"Need exactly 1 parameter type for Collection types (\"+parametrized.getName()+\")\");",
      "info" : "ThrowStatement[26914-27032]:ThrowStatement[26914-27032]"
    }, {
      "left" : "resultType = constructCollectionType((Class<Collection<?>>)parametrized, parameterTypes[0]);",
      "right" : "resultType = constructCollectionType((Class<Collection<?>>)parametrized, parameterTypes[0]);",
      "info" : "ExpressionStatement[27059-27151]:ExpressionStatement[27059-27151]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27167-27269]:Block[27167-27269]"
    }, {
      "left" : "resultType = constructSimpleType(parametrized, parametersFor, parameterTypes);",
      "right" : "resultType = constructSimpleType(parametrized, parametersFor, parameterTypes);",
      "info" : "ExpressionStatement[27181-27259]:ExpressionStatement[27181-27259]"
    }, {
      "left" : "return resultType;",
      "right" : "return resultType;",
      "info" : "ReturnStatement[27278-27296]:ReturnStatement[27278-27296]"
    }, {
      "left" : "@Deprecated",
      "right" : "@Deprecated",
      "info" : "MarkerAnnotation[27402-27413]:MarkerAnnotation[27402-27413]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[27418-27424]:Modifier[27418-27424]"
    }, {
      "left" : "JavaType",
      "right" : "JavaType",
      "info" : "SimpleType[27425-27433]:SimpleType[27425-27433]"
    }, {
      "left" : "constructParametricType",
      "right" : "constructParametricType",
      "info" : "SimpleName[27434-27457]:SimpleName[27434-27457]"
    }, {
      "left" : "Class<?> parametrized",
      "right" : "Class<?> parametrized",
      "info" : "SingleVariableDeclaration[27458-27479]:SingleVariableDeclaration[27458-27479]"
    }, {
      "left" : "JavaType... parameterTypes",
      "right" : "JavaType... parameterTypes",
      "info" : "SingleVariableDeclaration[27481-27507]:SingleVariableDeclaration[27481-27507]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27509-27602]:Block[27509-27602]"
    }, {
      "left" : "return constructParametrizedType(parametrized, parametrized, parameterTypes);",
      "right" : "return constructParametrizedType(parametrized, parametrized, parameterTypes);",
      "info" : "ReturnStatement[27519-27596]:ReturnStatement[27519-27596]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[28309-28315]:Modifier[28309-28315]"
    }, {
      "left" : "CollectionType",
      "right" : "CollectionType",
      "info" : "SimpleType[28316-28330]:SimpleType[28316-28330]"
    }, {
      "left" : "constructRawCollectionType",
      "right" : "constructRawCollectionType",
      "info" : "SimpleName[28331-28357]:SimpleName[28331-28357]"
    }, {
      "left" : "Class<? extends Collection> collectionClass",
      "right" : "Class<? extends Collection> collectionClass",
      "info" : "SingleVariableDeclaration[28358-28401]:SingleVariableDeclaration[28358-28401]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28403-28483]:Block[28403-28483]"
    }, {
      "left" : "return CollectionType.construct(collectionClass, unknownType());",
      "right" : "return CollectionType.construct(collectionClass, unknownType());",
      "info" : "ReturnStatement[28413-28477]:ReturnStatement[28413-28477]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[28956-28962]:Modifier[28956-28962]"
    }, {
      "left" : "CollectionLikeType",
      "right" : "CollectionLikeType",
      "info" : "SimpleType[28963-28981]:SimpleType[28963-28981]"
    }, {
      "left" : "constructRawCollectionLikeType",
      "right" : "constructRawCollectionLikeType",
      "info" : "SimpleName[28982-29012]:SimpleName[28982-29012]"
    }, {
      "left" : "Class<?> collectionClass",
      "right" : "Class<?> collectionClass",
      "info" : "SingleVariableDeclaration[29013-29037]:SingleVariableDeclaration[29013-29037]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29039-29123]:Block[29039-29123]"
    }, {
      "left" : "return CollectionLikeType.construct(collectionClass, unknownType());",
      "right" : "return CollectionLikeType.construct(collectionClass, unknownType());",
      "info" : "ReturnStatement[29049-29117]:ReturnStatement[29049-29117]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[29600-29606]:Modifier[29600-29606]"
    }, {
      "left" : "MapType",
      "right" : "MapType",
      "info" : "SimpleType[29607-29614]:SimpleType[29607-29614]"
    }, {
      "left" : "constructRawMapType",
      "right" : "constructRawMapType",
      "info" : "SimpleName[29615-29634]:SimpleName[29615-29634]"
    }, {
      "left" : "Class<? extends Map> mapClass",
      "right" : "Class<? extends Map> mapClass",
      "info" : "SingleVariableDeclaration[29635-29664]:SingleVariableDeclaration[29635-29664]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29666-29747]:Block[29666-29747]"
    }, {
      "left" : "return MapType.construct(mapClass, unknownType(), unknownType());",
      "right" : "return MapType.construct(mapClass, unknownType(), unknownType());",
      "info" : "ReturnStatement[29676-29741]:ReturnStatement[29676-29741]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[30233-30239]:Modifier[30233-30239]"
    }, {
      "left" : "MapLikeType",
      "right" : "MapLikeType",
      "info" : "SimpleType[30240-30251]:SimpleType[30240-30251]"
    }, {
      "left" : "constructRawMapLikeType",
      "right" : "constructRawMapLikeType",
      "info" : "SimpleName[30252-30275]:SimpleName[30252-30275]"
    }, {
      "left" : "Class<?> mapClass",
      "right" : "Class<?> mapClass",
      "info" : "SingleVariableDeclaration[30276-30293]:SingleVariableDeclaration[30276-30293]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30295-30380]:Block[30295-30380]"
    }, {
      "left" : "return MapLikeType.construct(mapClass, unknownType(), unknownType());",
      "right" : "return MapLikeType.construct(mapClass, unknownType(), unknownType());",
      "info" : "ReturnStatement[30305-30374]:ReturnStatement[30305-30374]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[30686-30695]:Modifier[30686-30695]"
    }, {
      "left" : "JavaType",
      "right" : "JavaType",
      "info" : "SimpleType[30696-30704]:SimpleType[30696-30704]"
    }, {
      "left" : "_fromClass",
      "right" : "_fromClass",
      "info" : "SimpleName[30705-30715]:SimpleName[30705-30715]"
    }, {
      "left" : "Class<?> clz",
      "right" : "Class<?> clz",
      "info" : "SingleVariableDeclaration[30716-30728]:SingleVariableDeclaration[30716-30728]"
    }, {
      "left" : "TypeBindings context",
      "right" : "TypeBindings context",
      "info" : "SingleVariableDeclaration[30730-30750]:SingleVariableDeclaration[30730-30750]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30756-33399]:Block[30756-33399]"
    }, {
      "left" : "if (clz == String.class)",
      "right" : "if (clz == String.class)",
      "info" : "IfStatement[30833-30882]:IfStatement[30833-30882]"
    }, {
      "left" : "return CORE_TYPE_STRING;",
      "right" : "return CORE_TYPE_STRING;",
      "info" : "ReturnStatement[30858-30882]:ReturnStatement[30858-30882]"
    }, {
      "left" : "if (clz == Boolean.TYPE)",
      "right" : "if (clz == Boolean.TYPE)",
      "info" : "IfStatement[30891-30938]:IfStatement[30891-30938]"
    }, {
      "left" : "return CORE_TYPE_BOOL;",
      "right" : "return CORE_TYPE_BOOL;",
      "info" : "ReturnStatement[30916-30938]:ReturnStatement[30916-30938]"
    }, {
      "left" : "if (clz == Integer.TYPE)",
      "right" : "if (clz == Integer.TYPE)",
      "info" : "IfStatement[30947-30993]:IfStatement[30947-30993]"
    }, {
      "left" : "return CORE_TYPE_INT;",
      "right" : "return CORE_TYPE_INT;",
      "info" : "ReturnStatement[30972-30993]:ReturnStatement[30972-30993]"
    }, {
      "left" : "if (clz == Long.TYPE)",
      "right" : "if (clz == Long.TYPE)",
      "info" : "IfStatement[31002-31046]:IfStatement[31002-31046]"
    }, {
      "left" : "return CORE_TYPE_LONG;",
      "right" : "return CORE_TYPE_LONG;",
      "info" : "ReturnStatement[31024-31046]:ReturnStatement[31024-31046]"
    }, {
      "left" : "ClassKey key = new ClassKey(clz);",
      "right" : "ClassKey key = new ClassKey(clz);",
      "info" : "VariableDeclarationStatement[31135-31168]:VariableDeclarationStatement[31135-31168]"
    }, {
      "left" : "JavaType result = _typeCache.get(key);",
      "right" : "JavaType result = _typeCache.get(key);",
      "info" : "VariableDeclarationStatement[31177-31215]:VariableDeclarationStatement[31177-31215]"
    }, {
      "left" : "if (result != null)",
      "right" : "if (result != null)",
      "info" : "IfStatement[31254-31312]:IfStatement[31254-31312]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31274-31312]:Block[31274-31312]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[31288-31302]:ReturnStatement[31288-31302]"
    }, {
      "left" : "if (clz.isArray())",
      "right" : "if (clz.isArray())",
      "info" : "IfStatement[31524-33311]:IfStatement[31524-33311]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31543-31807]:Block[31543-31807]"
    }, {
      "left" : "result = ArrayType.construct(_constructType(clz.getComponentType(), null), null, null);",
      "right" : "result = ArrayType.construct(_constructType(clz.getComponentType(), null), null, null);",
      "info" : "ExpressionStatement[31557-31644]:ExpressionStatement[31557-31644]"
    }, {
      "left" : "if (clz.isEnum())",
      "right" : "if (clz.isEnum())",
      "info" : "IfStatement[31813-33311]:IfStatement[31813-33311]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31831-32080]:Block[31831-32080]"
    }, {
      "left" : "result = new SimpleType(clz);",
      "right" : "result = new SimpleType(clz);",
      "info" : "ExpressionStatement[31845-31874]:ExpressionStatement[31845-31874]"
    }, {
      "left" : "if (Map.class.isAssignableFrom(clz))",
      "right" : "if (Map.class.isAssignableFrom(clz))",
      "info" : "IfStatement[32086-33311]:IfStatement[32086-33311]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32123-32170]:Block[32123-32170]"
    }, {
      "left" : "result = _mapType(clz);",
      "right" : "result = _mapType(clz);",
      "info" : "ExpressionStatement[32137-32160]:ExpressionStatement[32137-32160]"
    }, {
      "left" : "if (Collection.class.isAssignableFrom(clz))",
      "right" : "if (Collection.class.isAssignableFrom(clz))",
      "info" : "IfStatement[32176-33311]:IfStatement[32176-33311]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32220-32275]:Block[32220-32275]"
    }, {
      "left" : "result =  _collectionType(clz);",
      "right" : "result =  _collectionType(clz);",
      "info" : "ExpressionStatement[32234-32265]:ExpressionStatement[32234-32265]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32281-33311]:Block[32281-33311]"
    }, {
      "left" : "if (AtomicReference.class.isAssignableFrom(clz))",
      "right" : "if (AtomicReference.class.isAssignableFrom(clz))",
      "info" : "IfStatement[32364-33301]:IfStatement[32364-33301]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32413-32759]:Block[32413-32759]"
    }, {
      "left" : "JavaType[] pts = findTypeParameters(clz, AtomicReference.class);",
      "right" : "JavaType[] pts = findTypeParameters(clz, AtomicReference.class);",
      "info" : "VariableDeclarationStatement[32448-32512]:VariableDeclarationStatement[32448-32512]"
    }, {
      "left" : "JavaType rt = (pts == null || pts.length != 1) ? unknownType() : pts[0];",
      "right" : "JavaType rt = (pts == null || pts.length != 1) ? unknownType() : pts[0];",
      "info" : "VariableDeclarationStatement[32529-32601]:VariableDeclarationStatement[32529-32601]"
    }, {
      "left" : "result = constructReferenceType(clz, rt);",
      "right" : "result = constructReferenceType(clz, rt);",
      "info" : "ExpressionStatement[32618-32659]:ExpressionStatement[32618-32659]"
    }, {
      "left" : "if (Map.Entry.class.isAssignableFrom(clz))",
      "right" : "if (Map.Entry.class.isAssignableFrom(clz))",
      "info" : "IfStatement[32765-33301]:IfStatement[32765-33301]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32808-33234]:Block[32808-33234]"
    }, {
      "left" : "JavaType[] pts = findTypeParameters(clz, Map.Entry.class);",
      "right" : "JavaType[] pts = findTypeParameters(clz, Map.Entry.class);",
      "info" : "VariableDeclarationStatement[32826-32884]:VariableDeclarationStatement[32826-32884]"
    }, {
      "left" : "JavaType kt, vt;",
      "right" : "JavaType kt, vt;",
      "info" : "VariableDeclarationStatement[32901-32917]:VariableDeclarationStatement[32901-32917]"
    }, {
      "left" : "if (pts == null || pts.length != 2)",
      "right" : "if (pts == null || pts.length != 2)",
      "info" : "IfStatement[32934-33125]:IfStatement[32934-33125]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32970-33034]:Block[32970-33034]"
    }, {
      "left" : "kt = vt = unknownType();",
      "right" : "kt = vt = unknownType();",
      "info" : "ExpressionStatement[32992-33016]:ExpressionStatement[32992-33016]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33040-33125]:Block[33040-33125]"
    }, {
      "left" : "kt = pts[0];",
      "right" : "kt = pts[0];",
      "info" : "ExpressionStatement[33062-33074]:ExpressionStatement[33062-33074]"
    }, {
      "left" : "vt = pts[1];",
      "right" : "vt = pts[1];",
      "info" : "ExpressionStatement[33095-33107]:ExpressionStatement[33095-33107]"
    }, {
      "left" : "result = constructSimpleType(clz, Map.Entry.class, new JavaType[] { kt, vt });",
      "right" : "result = constructSimpleType(clz, Map.Entry.class, new JavaType[] { kt, vt });",
      "info" : "ExpressionStatement[33142-33220]:ExpressionStatement[33142-33220]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33240-33301]:Block[33240-33301]"
    }, {
      "left" : "result = new SimpleType(clz);",
      "right" : "result = new SimpleType(clz);",
      "info" : "ExpressionStatement[33258-33287]:ExpressionStatement[33258-33287]"
    }, {
      "left" : "_typeCache.put(key, result);",
      "right" : "_typeCache.put(key, result);",
      "info" : "ExpressionStatement[33320-33348]:ExpressionStatement[33320-33348]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[33379-33393]:ReturnStatement[33379-33393]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[33517-33526]:Modifier[33517-33526]"
    }, {
      "left" : "JavaType",
      "right" : "JavaType",
      "info" : "SimpleType[33527-33535]:SimpleType[33527-33535]"
    }, {
      "left" : "_fromParameterizedClass",
      "right" : "_fromParameterizedClass",
      "info" : "SimpleName[33536-33559]:SimpleName[33536-33559]"
    }, {
      "left" : "Class<?> clz",
      "right" : "Class<?> clz",
      "info" : "SingleVariableDeclaration[33560-33572]:SingleVariableDeclaration[33560-33572]"
    }, {
      "left" : "List<JavaType> paramTypes",
      "right" : "List<JavaType> paramTypes",
      "info" : "SingleVariableDeclaration[33574-33599]:SingleVariableDeclaration[33574-33599]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33605-34859]:Block[33605-34859]"
    }, {
      "left" : "if (clz.isArray())",
      "right" : "if (clz.isArray())",
      "info" : "IfStatement[33615-33786]:IfStatement[33615-33786]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33634-33786]:Block[33634-33786]"
    }, {
      "left" : "return ArrayType.construct(_constructType(clz.getComponentType(), null), null, null);",
      "right" : "return ArrayType.construct(_constructType(clz.getComponentType(), null), null, null);",
      "info" : "ReturnStatement[33691-33776]:ReturnStatement[33691-33776]"
    }, {
      "left" : "if (clz.isEnum())",
      "right" : "if (clz.isEnum())",
      "info" : "IfStatement[33795-33883]:IfStatement[33795-33883]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33813-33883]:Block[33813-33883]"
    }, {
      "left" : "return new SimpleType(clz);",
      "right" : "return new SimpleType(clz);",
      "info" : "ReturnStatement[33846-33873]:ReturnStatement[33846-33873]"
    }, {
      "left" : "if (Map.class.isAssignableFrom(clz))",
      "right" : "if (Map.class.isAssignableFrom(clz))",
      "info" : "IfStatement[33892-34361]:IfStatement[33892-34361]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33929-34361]:Block[33929-34361]"
    }, {
      "left" : "JavaType keyType, contentType;",
      "right" : "JavaType keyType, contentType;",
      "info" : "VariableDeclarationStatement[34001-34031]:VariableDeclarationStatement[34001-34031]"
    }, {
      "left" : "if (paramTypes.size() > 0)",
      "right" : "if (paramTypes.size() > 0)",
      "info" : "IfStatement[34044-34317]:IfStatement[34044-34317]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34071-34317]:Block[34071-34317]"
    }, {
      "left" : "keyType = paramTypes.get(0);",
      "right" : "keyType = paramTypes.get(0);",
      "info" : "ExpressionStatement[34089-34117]:ExpressionStatement[34089-34117]"
    }, {
      "left" : "contentType = (paramTypes.size() >= 2) ?\n                        paramTypes.get(1) : _unknownType();",
      "right" : "contentType = (paramTypes.size() >= 2) ?\n                        paramTypes.get(1) : _unknownType();",
      "info" : "ExpressionStatement[34134-34234]:ExpressionStatement[34134-34234]"
    }, {
      "left" : "return MapType.construct(clz, keyType, contentType);",
      "right" : "return MapType.construct(clz, keyType, contentType);",
      "info" : "ReturnStatement[34251-34303]:ReturnStatement[34251-34303]"
    }, {
      "left" : "return _mapType(clz);",
      "right" : "return _mapType(clz);",
      "info" : "ReturnStatement[34330-34351]:ReturnStatement[34330-34351]"
    }, {
      "left" : "if (Collection.class.isAssignableFrom(clz))",
      "right" : "if (Collection.class.isAssignableFrom(clz))",
      "info" : "IfStatement[34370-34595]:IfStatement[34370-34595]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34414-34595]:Block[34414-34595]"
    }, {
      "left" : "if (paramTypes.size() >= 1)",
      "right" : "if (paramTypes.size() >= 1)",
      "info" : "IfStatement[34428-34544]:IfStatement[34428-34544]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34456-34544]:Block[34456-34544]"
    }, {
      "left" : "return CollectionType.construct(clz, paramTypes.get(0));",
      "right" : "return CollectionType.construct(clz, paramTypes.get(0));",
      "info" : "ReturnStatement[34474-34530]:ReturnStatement[34474-34530]"
    }, {
      "left" : "return _collectionType(clz);",
      "right" : "return _collectionType(clz);",
      "info" : "ReturnStatement[34557-34585]:ReturnStatement[34557-34585]"
    }, {
      "left" : "if (paramTypes.size() == 0)",
      "right" : "if (paramTypes.size() == 0)",
      "info" : "IfStatement[34604-34683]:IfStatement[34604-34683]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34632-34683]:Block[34632-34683]"
    }, {
      "left" : "return new SimpleType(clz);",
      "right" : "return new SimpleType(clz);",
      "info" : "ReturnStatement[34646-34673]:ReturnStatement[34646-34673]"
    }, {
      "left" : "JavaType[] pt = paramTypes.toArray(new JavaType[paramTypes.size()]);",
      "right" : "JavaType[] pt = paramTypes.toArray(new JavaType[paramTypes.size()]);",
      "info" : "VariableDeclarationStatement[34735-34803]:VariableDeclarationStatement[34735-34803]"
    }, {
      "left" : "return constructSimpleType(clz, clz, pt);",
      "right" : "return constructSimpleType(clz, clz, pt);",
      "info" : "ReturnStatement[34812-34853]:ReturnStatement[34812-34853]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[34981-34990]:Modifier[34981-34990]"
    }, {
      "left" : "JavaType",
      "right" : "JavaType",
      "info" : "SimpleType[34991-34999]:SimpleType[34991-34999]"
    }, {
      "left" : "_fromParamType",
      "right" : "_fromParamType",
      "info" : "SimpleName[35000-35014]:SimpleName[35000-35014]"
    }, {
      "left" : "ParameterizedType type",
      "right" : "ParameterizedType type",
      "info" : "SingleVariableDeclaration[35015-35037]:SingleVariableDeclaration[35015-35037]"
    }, {
      "left" : "TypeBindings context",
      "right" : "TypeBindings context",
      "info" : "SingleVariableDeclaration[35039-35059]:SingleVariableDeclaration[35039-35059]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35065-38575]:Block[35065-38575]"
    }, {
      "left" : "Class<?> rawType = (Class<?>) type.getRawType();",
      "right" : "Class<?> rawType = (Class<?>) type.getRawType();",
      "info" : "VariableDeclarationStatement[35361-35409]:VariableDeclarationStatement[35361-35409]"
    }, {
      "left" : "Type[] args = type.getActualTypeArguments();",
      "right" : "Type[] args = type.getActualTypeArguments();",
      "info" : "VariableDeclarationStatement[35418-35462]:VariableDeclarationStatement[35418-35462]"
    }, {
      "left" : "int paramCount = (args == null) ? 0 : args.length;",
      "right" : "int paramCount = (args == null) ? 0 : args.length;",
      "info" : "VariableDeclarationStatement[35471-35521]:VariableDeclarationStatement[35471-35521]"
    }, {
      "left" : "JavaType[] pt;",
      "right" : "JavaType[] pt;",
      "info" : "VariableDeclarationStatement[35531-35545]:VariableDeclarationStatement[35531-35545]"
    }, {
      "left" : "if (paramCount == 0)",
      "right" : "if (paramCount == 0)",
      "info" : "IfStatement[35563-35805]:IfStatement[35563-35805]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35584-35622]:Block[35584-35622]"
    }, {
      "left" : "pt = NO_TYPES;",
      "right" : "pt = NO_TYPES;",
      "info" : "ExpressionStatement[35598-35612]:ExpressionStatement[35598-35612]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35628-35805]:Block[35628-35805]"
    }, {
      "left" : "pt = new JavaType[paramCount];",
      "right" : "pt = new JavaType[paramCount];",
      "info" : "ExpressionStatement[35642-35672]:ExpressionStatement[35642-35672]"
    }, {
      "left" : "for (int i = 0; i < paramCount; ++i)",
      "right" : "for (int i = 0; i < paramCount; ++i)",
      "info" : "ForStatement[35685-35795]:ForStatement[35685-35795]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35722-35795]:Block[35722-35795]"
    }, {
      "left" : "pt[i] = _constructType(args[i], context);",
      "right" : "pt[i] = _constructType(args[i], context);",
      "info" : "ExpressionStatement[35740-35781]:ExpressionStatement[35740-35781]"
    }, {
      "left" : "if (Map.class.isAssignableFrom(rawType))",
      "right" : "if (Map.class.isAssignableFrom(rawType))",
      "info" : "IfStatement[35849-36431]:IfStatement[35849-36431]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35890-36431]:Block[35890-36431]"
    }, {
      "left" : "JavaType subtype = constructSimpleType(rawType, rawType, pt);",
      "right" : "JavaType subtype = constructSimpleType(rawType, rawType, pt);",
      "info" : "VariableDeclarationStatement[36002-36063]:VariableDeclarationStatement[36002-36063]"
    }, {
      "left" : "JavaType[] mapParams = findTypeParameters(subtype, Map.class);",
      "right" : "JavaType[] mapParams = findTypeParameters(subtype, Map.class);",
      "info" : "VariableDeclarationStatement[36076-36138]:VariableDeclarationStatement[36076-36138]"
    }, {
      "left" : "if (mapParams.length != 2)",
      "right" : "if (mapParams.length != 2)",
      "info" : "IfStatement[36151-36346]:IfStatement[36151-36346]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36178-36346]:Block[36178-36346]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Could not find 2 type parameters for Map class \"+rawType.getName()+\" (found \"+mapParams.length+\")\");",
      "right" : "throw new IllegalArgumentException(\"Could not find 2 type parameters for Map class \"+rawType.getName()+\" (found \"+mapParams.length+\")\");",
      "info" : "ThrowStatement[36196-36332]:ThrowStatement[36196-36332]"
    }, {
      "left" : "return MapType.construct(rawType, mapParams[0], mapParams[1]);",
      "right" : "return MapType.construct(rawType, mapParams[0], mapParams[1]);",
      "info" : "ReturnStatement[36359-36421]:ReturnStatement[36359-36421]"
    }, {
      "left" : "if (Collection.class.isAssignableFrom(rawType))",
      "right" : "if (Collection.class.isAssignableFrom(rawType))",
      "info" : "IfStatement[36440-37070]:IfStatement[36440-37070]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36488-37070]:Block[36488-37070]"
    }, {
      "left" : "JavaType subtype = constructSimpleType(rawType, rawType, pt);",
      "right" : "JavaType subtype = constructSimpleType(rawType, rawType, pt);",
      "info" : "VariableDeclarationStatement[36607-36668]:VariableDeclarationStatement[36607-36668]"
    }, {
      "left" : "JavaType[] collectionParams = findTypeParameters(subtype, Collection.class);",
      "right" : "JavaType[] collectionParams = findTypeParameters(subtype, Collection.class);",
      "info" : "VariableDeclarationStatement[36681-36757]:VariableDeclarationStatement[36681-36757]"
    }, {
      "left" : "if (collectionParams.length != 1)",
      "right" : "if (collectionParams.length != 1)",
      "info" : "IfStatement[36770-36985]:IfStatement[36770-36985]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36804-36985]:Block[36804-36985]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Could not find 1 type parameter for Collection class \"+rawType.getName()+\" (found \"+collectionParams.length+\")\");",
      "right" : "throw new IllegalArgumentException(\"Could not find 1 type parameter for Collection class \"+rawType.getName()+\" (found \"+collectionParams.length+\")\");",
      "info" : "ThrowStatement[36822-36971]:ThrowStatement[36822-36971]"
    }, {
      "left" : "return CollectionType.construct(rawType, collectionParams[0]);",
      "right" : "return CollectionType.construct(rawType, collectionParams[0]);",
      "info" : "ReturnStatement[36998-37060]:ReturnStatement[36998-37060]"
    }, {
      "left" : "if (AtomicReference.class.isAssignableFrom(rawType))",
      "right" : "if (AtomicReference.class.isAssignableFrom(rawType))",
      "info" : "IfStatement[37144-37694]:IfStatement[37144-37694]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37197-37694]:Block[37197-37694]"
    }, {
      "left" : "JavaType rt = null;",
      "right" : "JavaType rt = null;",
      "info" : "VariableDeclarationStatement[37211-37230]:VariableDeclarationStatement[37211-37230]"
    }, {
      "left" : "if (rawType == AtomicReference.class)",
      "right" : "if (rawType == AtomicReference.class)",
      "info" : "IfStatement[37244-37597]:IfStatement[37244-37597]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37282-37386]:Block[37282-37386]"
    }, {
      "left" : "if (paramCount == 1)",
      "right" : "if (paramCount == 1)",
      "info" : "IfStatement[37300-37372]:IfStatement[37300-37372]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37321-37372]:Block[37321-37372]"
    }, {
      "left" : "rt = pt[0];",
      "right" : "rt = pt[0];",
      "info" : "ExpressionStatement[37343-37354]:ExpressionStatement[37343-37354]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37392-37597]:Block[37392-37597]"
    }, {
      "left" : "JavaType[] pts = findTypeParameters(rawType, AtomicReference.class);",
      "right" : "JavaType[] pts = findTypeParameters(rawType, AtomicReference.class);",
      "info" : "VariableDeclarationStatement[37410-37478]:VariableDeclarationStatement[37410-37478]"
    }, {
      "left" : "if (pts != null && pts.length != 1)",
      "right" : "if (pts != null && pts.length != 1)",
      "info" : "IfStatement[37495-37583]:IfStatement[37495-37583]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37531-37583]:Block[37531-37583]"
    }, {
      "left" : "rt = pts[0];",
      "right" : "rt = pts[0];",
      "info" : "ExpressionStatement[37553-37565]:ExpressionStatement[37553-37565]"
    }, {
      "left" : "return constructReferenceType(rawType, (rt == null) ? unknownType() : rt);",
      "right" : "return constructReferenceType(rawType, (rt == null) ? unknownType() : rt);",
      "info" : "ReturnStatement[37610-37684]:ReturnStatement[37610-37684]"
    }, {
      "left" : "if (Map.Entry.class.isAssignableFrom(rawType))",
      "right" : "if (Map.Entry.class.isAssignableFrom(rawType))",
      "info" : "IfStatement[37703-38411]:IfStatement[37703-38411]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37750-38411]:Block[37750-38411]"
    }, {
      "left" : "JavaType kt = null, vt = null;",
      "right" : "JavaType kt = null, vt = null;",
      "info" : "VariableDeclarationStatement[37764-37794]:VariableDeclarationStatement[37764-37794]"
    }, {
      "left" : "if (rawType == Map.Entry.class)",
      "right" : "if (rawType == Map.Entry.class)",
      "info" : "IfStatement[37808-38214]:IfStatement[37808-38214]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37840-37976]:Block[37840-37976]"
    }, {
      "left" : "if (paramCount == 2)",
      "right" : "if (paramCount == 2)",
      "info" : "IfStatement[37858-37962]:IfStatement[37858-37962]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37879-37962]:Block[37879-37962]"
    }, {
      "left" : "kt = pt[0];",
      "right" : "kt = pt[0];",
      "info" : "ExpressionStatement[37901-37912]:ExpressionStatement[37901-37912]"
    }, {
      "left" : "vt = pt[1];",
      "right" : "vt = pt[1];",
      "info" : "ExpressionStatement[37933-37944]:ExpressionStatement[37933-37944]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37982-38214]:Block[37982-38214]"
    }, {
      "left" : "JavaType[] pts = findTypeParameters(rawType, Map.Entry.class);",
      "right" : "JavaType[] pts = findTypeParameters(rawType, Map.Entry.class);",
      "info" : "VariableDeclarationStatement[38000-38062]:VariableDeclarationStatement[38000-38062]"
    }, {
      "left" : "if (pts != null && pts.length != 2)",
      "right" : "if (pts != null && pts.length != 2)",
      "info" : "IfStatement[38079-38200]:IfStatement[38079-38200]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38115-38200]:Block[38115-38200]"
    }, {
      "left" : "kt = pts[0];",
      "right" : "kt = pts[0];",
      "info" : "ExpressionStatement[38137-38149]:ExpressionStatement[38137-38149]"
    }, {
      "left" : "vt = pts[1];",
      "right" : "vt = pts[1];",
      "info" : "ExpressionStatement[38170-38182]:ExpressionStatement[38170-38182]"
    }, {
      "left" : "return constructSimpleType(rawType, Map.Entry.class, new JavaType[] {\n                (kt == null) ? unknownType() : kt,\n                (vt == null) ? unknownType() : vt });",
      "right" : "return constructSimpleType(rawType, Map.Entry.class, new JavaType[] {\n                (kt == null) ? unknownType() : kt,\n                (vt == null) ? unknownType() : vt });",
      "info" : "ReturnStatement[38227-38401]:ReturnStatement[38227-38401]"
    }, {
      "left" : "if (paramCount == 0)",
      "right" : "if (paramCount == 0)",
      "info" : "IfStatement[38429-38520]:IfStatement[38429-38520]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38450-38520]:Block[38450-38520]"
    }, {
      "left" : "return new SimpleType(rawType);",
      "right" : "return new SimpleType(rawType);",
      "info" : "ReturnStatement[38479-38510]:ReturnStatement[38479-38510]"
    }, {
      "left" : "return constructSimpleType(rawType, pt);",
      "right" : "return constructSimpleType(rawType, pt);",
      "info" : "ReturnStatement[38529-38569]:ReturnStatement[38529-38569]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[38581-38590]:Modifier[38581-38590]"
    }, {
      "left" : "JavaType",
      "right" : "JavaType",
      "info" : "SimpleType[38591-38599]:SimpleType[38591-38599]"
    }, {
      "left" : "_fromArrayType",
      "right" : "_fromArrayType",
      "info" : "SimpleName[38600-38614]:SimpleName[38600-38614]"
    }, {
      "left" : "GenericArrayType type",
      "right" : "GenericArrayType type",
      "info" : "SingleVariableDeclaration[38615-38636]:SingleVariableDeclaration[38615-38636]"
    }, {
      "left" : "TypeBindings context",
      "right" : "TypeBindings context",
      "info" : "SingleVariableDeclaration[38638-38658]:SingleVariableDeclaration[38638-38658]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38664-38814]:Block[38664-38814]"
    }, {
      "left" : "JavaType compType = _constructType(type.getGenericComponentType(), context);",
      "right" : "JavaType compType = _constructType(type.getGenericComponentType(), context);",
      "info" : "VariableDeclarationStatement[38674-38750]:VariableDeclarationStatement[38674-38750]"
    }, {
      "left" : "return ArrayType.construct(compType, null, null);",
      "right" : "return ArrayType.construct(compType, null, null);",
      "info" : "ReturnStatement[38759-38808]:ReturnStatement[38759-38808]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[38820-38829]:Modifier[38820-38829]"
    }, {
      "left" : "JavaType",
      "right" : "JavaType",
      "info" : "SimpleType[38830-38838]:SimpleType[38830-38838]"
    }, {
      "left" : "_fromVariable",
      "right" : "_fromVariable",
      "info" : "SimpleName[38839-38852]:SimpleName[38839-38852]"
    }, {
      "left" : "TypeVariable<?> type",
      "right" : "TypeVariable<?> type",
      "info" : "SingleVariableDeclaration[38853-38873]:SingleVariableDeclaration[38853-38873]"
    }, {
      "left" : "TypeBindings context",
      "right" : "TypeBindings context",
      "info" : "SingleVariableDeclaration[38875-38895]:SingleVariableDeclaration[38875-38895]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38901-40777]:Block[38901-40777]"
    }, {
      "left" : "final String name = type.getName();",
      "right" : "final String name = type.getName();",
      "info" : "VariableDeclarationStatement[38911-38946]:VariableDeclarationStatement[38911-38946]"
    }, {
      "left" : "if (context == null)",
      "right" : "if (context == null)",
      "info" : "IfStatement[39025-39653]:IfStatement[39025-39653]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39046-39181]:Block[39046-39181]"
    }, {
      "left" : "context = new TypeBindings(this, (Class<?>) null);",
      "right" : "context = new TypeBindings(this, (Class<?>) null);",
      "info" : "ExpressionStatement[39121-39171]:ExpressionStatement[39121-39171]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39187-39653]:Block[39187-39653]"
    }, {
      "left" : "JavaType actualType = context.findType(name, false);",
      "right" : "JavaType actualType = context.findType(name, false);",
      "info" : "VariableDeclarationStatement[39504-39556]:VariableDeclarationStatement[39504-39556]"
    }, {
      "left" : "if (actualType != null)",
      "right" : "if (actualType != null)",
      "info" : "IfStatement[39569-39643]:IfStatement[39569-39643]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39593-39643]:Block[39593-39643]"
    }, {
      "left" : "return actualType;",
      "right" : "return actualType;",
      "info" : "ReturnStatement[39611-39629]:ReturnStatement[39611-39629]"
    }, {
      "left" : "Type[] bounds = type.getBounds();",
      "right" : "Type[] bounds = type.getBounds();",
      "info" : "VariableDeclarationStatement[39968-40001]:VariableDeclarationStatement[39968-40001]"
    }, {
      "left" : "context._addPlaceholder(name);",
      "right" : "context._addPlaceholder(name);",
      "info" : "ExpressionStatement[40690-40720]:ExpressionStatement[40690-40720]"
    }, {
      "left" : "return _constructType(bounds[0], context);",
      "right" : "return _constructType(bounds[0], context);",
      "info" : "ReturnStatement[40729-40771]:ReturnStatement[40729-40771]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[40783-40792]:Modifier[40783-40792]"
    }, {
      "left" : "JavaType",
      "right" : "JavaType",
      "info" : "SimpleType[40793-40801]:SimpleType[40793-40801]"
    }, {
      "left" : "_fromWildcard",
      "right" : "_fromWildcard",
      "info" : "SimpleName[40802-40815]:SimpleName[40802-40815]"
    }, {
      "left" : "WildcardType type",
      "right" : "WildcardType type",
      "info" : "SingleVariableDeclaration[40816-40833]:SingleVariableDeclaration[40816-40833]"
    }, {
      "left" : "TypeBindings context",
      "right" : "TypeBindings context",
      "info" : "SingleVariableDeclaration[40835-40855]:SingleVariableDeclaration[40835-40855]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40861-41293]:Block[40861-41293]"
    }, {
      "left" : "return _constructType(type.getUpperBounds()[0], context);",
      "right" : "return _constructType(type.getUpperBounds()[0], context);",
      "info" : "ReturnStatement[41230-41287]:ReturnStatement[41230-41287]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[41965-41972]:Modifier[42103-42110]"
    }, {
      "left" : "JavaType",
      "right" : "JavaType",
      "info" : "SimpleType[41973-41981]:SimpleType[42111-42119]"
    }, {
      "left" : "_collectionType",
      "right" : "_collectionType",
      "info" : "SimpleName[41982-41997]:SimpleName[42120-42135]"
    }, {
      "left" : "Class<?> rawClass",
      "right" : "Class<?> rawClass",
      "info" : "SingleVariableDeclaration[41998-42015]:SingleVariableDeclaration[42136-42153]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42021-42553]:Block[42159-42691]"
    }, {
      "left" : "JavaType[] typeParams = findTypeParameters(rawClass, Collection.class);",
      "right" : "JavaType[] typeParams = findTypeParameters(rawClass, Collection.class);",
      "info" : "VariableDeclarationStatement[42031-42102]:VariableDeclarationStatement[42169-42240]"
    }, {
      "left" : "if (typeParams == null)",
      "right" : "if (typeParams == null)",
      "info" : "IfStatement[42150-42256]:IfStatement[42288-42394]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42174-42256]:Block[42312-42394]"
    }, {
      "left" : "return CollectionType.construct(rawClass, _unknownType());",
      "right" : "return CollectionType.construct(rawClass, _unknownType());",
      "info" : "ReturnStatement[42188-42246]:ReturnStatement[42326-42384]"
    }, {
      "left" : "if (typeParams.length != 1)",
      "right" : "if (typeParams.length != 1)",
      "info" : "IfStatement[42309-42481]:IfStatement[42447-42619]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42337-42481]:Block[42475-42619]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Strange Collection type \"+rawClass.getName()+\": can not determine type parameters\");",
      "right" : "throw new IllegalArgumentException(\"Strange Collection type \"+rawClass.getName()+\": can not determine type parameters\");",
      "info" : "ThrowStatement[42351-42471]:ThrowStatement[42489-42609]"
    }, {
      "left" : "return CollectionType.construct(rawClass, typeParams[0]);",
      "right" : "return CollectionType.construct(rawClass, typeParams[0]);",
      "info" : "ReturnStatement[42490-42547]:ReturnStatement[42628-42685]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[42563-42572]:Modifier[42701-42710]"
    }, {
      "left" : "JavaType",
      "right" : "JavaType",
      "info" : "SimpleType[42573-42581]:SimpleType[42711-42719]"
    }, {
      "left" : "_resolveVariableViaSubTypes",
      "right" : "_resolveVariableViaSubTypes",
      "info" : "SimpleName[42582-42609]:SimpleName[42720-42747]"
    }, {
      "left" : "HierarchicType leafType",
      "right" : "HierarchicType leafType",
      "info" : "SingleVariableDeclaration[42610-42633]:SingleVariableDeclaration[42748-42771]"
    }, {
      "left" : "String variableName",
      "right" : "String variableName",
      "info" : "SingleVariableDeclaration[42635-42654]:SingleVariableDeclaration[42773-42792]"
    }, {
      "left" : "TypeBindings bindings",
      "right" : "TypeBindings bindings",
      "info" : "SingleVariableDeclaration[42656-42677]:SingleVariableDeclaration[42794-42815]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42683-43676]:Block[42821-43814]"
    }, {
      "left" : "if (leafType != null && leafType.isGeneric())",
      "right" : "if (leafType != null && leafType.isGeneric())",
      "info" : "IfStatement[42775-43639]:IfStatement[42913-43777]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42821-43639]:Block[42959-43777]"
    }, {
      "left" : "TypeVariable<?>[] typeVariables = leafType.getRawClass().getTypeParameters();",
      "right" : "TypeVariable<?>[] typeVariables = leafType.getRawClass().getTypeParameters();",
      "info" : "VariableDeclarationStatement[42835-42912]:VariableDeclarationStatement[42973-43050]"
    }, {
      "left" : "for (int i = 0, len = typeVariables.length; i < len; ++i)",
      "right" : "for (int i = 0, len = typeVariables.length; i < len; ++i)",
      "info" : "ForStatement[42925-43629]:ForStatement[43063-43767]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42983-43629]:Block[43121-43767]"
    }, {
      "left" : "TypeVariable<?> tv = typeVariables[i];",
      "right" : "TypeVariable<?> tv = typeVariables[i];",
      "info" : "VariableDeclarationStatement[43001-43039]:VariableDeclarationStatement[43139-43177]"
    }, {
      "left" : "if (variableName.equals(tv.getName()))",
      "right" : "if (variableName.equals(tv.getName()))",
      "info" : "IfStatement[43056-43615]:IfStatement[43194-43753]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43095-43615]:Block[43233-43753]"
    }, {
      "left" : "Type type = leafType.asGeneric().getActualTypeArguments()[i];",
      "right" : "Type type = leafType.asGeneric().getActualTypeArguments()[i];",
      "info" : "VariableDeclarationStatement[43167-43228]:VariableDeclarationStatement[43305-43366]"
    }, {
      "left" : "if (type instanceof TypeVariable<?>)",
      "right" : "if (type instanceof TypeVariable<?>)",
      "info" : "IfStatement[43249-43438]:IfStatement[43387-43576]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43286-43438]:Block[43424-43576]"
    }, {
      "left" : "return _resolveVariableViaSubTypes(leafType.getSubType(), ((TypeVariable<?>) type).getName(), bindings);",
      "right" : "return _resolveVariableViaSubTypes(leafType.getSubType(), ((TypeVariable<?>) type).getName(), bindings);",
      "info" : "ReturnStatement[43312-43416]:ReturnStatement[43450-43554]"
    }, {
      "left" : "return _constructType(type, bindings);",
      "right" : "return _constructType(type, bindings);",
      "info" : "ReturnStatement[43559-43597]:ReturnStatement[43697-43735]"
    }, {
      "left" : "return _unknownType();",
      "right" : "return _unknownType();",
      "info" : "ReturnStatement[43648-43670]:ReturnStatement[43786-43808]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[43686-43695]:Modifier[43824-43833]"
    }, {
      "left" : "JavaType",
      "right" : "JavaType",
      "info" : "SimpleType[43696-43704]:SimpleType[43834-43842]"
    }, {
      "left" : "_unknownType",
      "right" : "_unknownType",
      "info" : "SimpleName[43705-43717]:SimpleName[43843-43855]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43720-43772]:Block[43858-43910]"
    }, {
      "left" : "return new SimpleType(Object.class);",
      "right" : "return new SimpleType(Object.class);",
      "info" : "ReturnStatement[43730-43766]:ReturnStatement[43868-43904]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[44244-44253]:Modifier[44382-44391]"
    }, {
      "left" : "HierarchicType",
      "right" : "HierarchicType",
      "info" : "SimpleType[44254-44268]:SimpleType[44392-44406]"
    }, {
      "left" : "_findSuperTypeChain",
      "right" : "_findSuperTypeChain",
      "info" : "SimpleName[44270-44289]:SimpleName[44408-44427]"
    }, {
      "left" : "Class<?> subtype",
      "right" : "Class<?> subtype",
      "info" : "SingleVariableDeclaration[44290-44306]:SingleVariableDeclaration[44428-44444]"
    }, {
      "left" : "Class<?> supertype",
      "right" : "Class<?> supertype",
      "info" : "SingleVariableDeclaration[44308-44326]:SingleVariableDeclaration[44446-44464]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44332-44575]:Block[44470-44713]"
    }, {
      "left" : "if (supertype.isInterface())",
      "right" : "if (supertype.isInterface())",
      "info" : "IfStatement[44407-44512]:IfStatement[44545-44650]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44436-44512]:Block[44574-44650]"
    }, {
      "left" : "return _findSuperInterfaceChain(subtype, supertype);",
      "right" : "return _findSuperInterfaceChain(subtype, supertype);",
      "info" : "ReturnStatement[44450-44502]:ReturnStatement[44588-44640]"
    }, {
      "left" : "return _findSuperClassChain(subtype, supertype);",
      "right" : "return _findSuperClassChain(subtype, supertype);",
      "info" : "ReturnStatement[44521-44569]:ReturnStatement[44659-44707]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[44581-44590]:Modifier[44719-44728]"
    }, {
      "left" : "HierarchicType",
      "right" : "HierarchicType",
      "info" : "SimpleType[44591-44605]:SimpleType[44729-44743]"
    }, {
      "left" : "_findSuperClassChain",
      "right" : "_findSuperClassChain",
      "info" : "SimpleName[44606-44626]:SimpleName[44744-44764]"
    }, {
      "left" : "Type currentType",
      "right" : "Type currentType",
      "info" : "SingleVariableDeclaration[44627-44643]:SingleVariableDeclaration[44765-44781]"
    }, {
      "left" : "Class<?> target",
      "right" : "Class<?> target",
      "info" : "SingleVariableDeclaration[44645-44660]:SingleVariableDeclaration[44783-44798]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44666-45252]:Block[44804-45390]"
    }, {
      "left" : "HierarchicType current = new HierarchicType(currentType);",
      "right" : "HierarchicType current = new HierarchicType(currentType);",
      "info" : "VariableDeclarationStatement[44676-44733]:VariableDeclarationStatement[44814-44871]"
    }, {
      "left" : "Class<?> raw = current.getRawClass();",
      "right" : "Class<?> raw = current.getRawClass();",
      "info" : "VariableDeclarationStatement[44742-44779]:VariableDeclarationStatement[44880-44917]"
    }, {
      "left" : "if (raw == target)",
      "right" : "if (raw == target)",
      "info" : "IfStatement[44788-44846]:IfStatement[44926-44984]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44807-44846]:Block[44945-44984]"
    }, {
      "left" : "return current;",
      "right" : "return current;",
      "info" : "ReturnStatement[44821-44836]:ReturnStatement[44959-44974]"
    }, {
      "left" : "Type parent = raw.getGenericSuperclass();",
      "right" : "Type parent = raw.getGenericSuperclass();",
      "info" : "VariableDeclarationStatement[44912-44953]:VariableDeclarationStatement[45050-45091]"
    }, {
      "left" : "if (parent != null)",
      "right" : "if (parent != null)",
      "info" : "IfStatement[44962-45225]:IfStatement[45100-45363]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44982-45225]:Block[45120-45363]"
    }, {
      "left" : "HierarchicType sup = _findSuperClassChain(parent, target);",
      "right" : "HierarchicType sup = _findSuperClassChain(parent, target);",
      "info" : "VariableDeclarationStatement[44996-45054]:VariableDeclarationStatement[45134-45192]"
    }, {
      "left" : "if (sup != null)",
      "right" : "if (sup != null)",
      "info" : "IfStatement[45067-45215]:IfStatement[45205-45353]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45084-45215]:Block[45222-45353]"
    }, {
      "left" : "sup.setSubType(current);",
      "right" : "sup.setSubType(current);",
      "info" : "ExpressionStatement[45102-45126]:ExpressionStatement[45240-45264]"
    }, {
      "left" : "current.setSuperType(sup);",
      "right" : "current.setSuperType(sup);",
      "info" : "ExpressionStatement[45143-45169]:ExpressionStatement[45281-45307]"
    }, {
      "left" : "return current;",
      "right" : "return current;",
      "info" : "ReturnStatement[45186-45201]:ReturnStatement[45324-45339]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[45234-45246]:ReturnStatement[45372-45384]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[45258-45267]:Modifier[45396-45405]"
    }, {
      "left" : "HierarchicType",
      "right" : "HierarchicType",
      "info" : "SimpleType[45268-45282]:SimpleType[45406-45420]"
    }, {
      "left" : "_findSuperInterfaceChain",
      "right" : "_findSuperInterfaceChain",
      "info" : "SimpleName[45283-45307]:SimpleName[45421-45445]"
    }, {
      "left" : "Type currentType",
      "right" : "Type currentType",
      "info" : "SingleVariableDeclaration[45308-45324]:SingleVariableDeclaration[45446-45462]"
    }, {
      "left" : "Class<?> target",
      "right" : "Class<?> target",
      "info" : "SingleVariableDeclaration[45326-45341]:SingleVariableDeclaration[45464-45479]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45347-46176]:Block[45485-46314]"
    }, {
      "left" : "HierarchicType current = new HierarchicType(currentType);",
      "right" : "HierarchicType current = new HierarchicType(currentType);",
      "info" : "VariableDeclarationStatement[45357-45414]:VariableDeclarationStatement[45495-45552]"
    }, {
      "left" : "Class<?> raw = current.getRawClass();",
      "right" : "Class<?> raw = current.getRawClass();",
      "info" : "VariableDeclarationStatement[45423-45460]:VariableDeclarationStatement[45561-45598]"
    }, {
      "left" : "if (raw == target)",
      "right" : "if (raw == target)",
      "info" : "IfStatement[45469-45551]:IfStatement[45607-45689]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45488-45551]:Block[45626-45689]"
    }, {
      "left" : "return new HierarchicType(currentType);",
      "right" : "return new HierarchicType(currentType);",
      "info" : "ReturnStatement[45502-45541]:ReturnStatement[45640-45679]"
    }, {
      "left" : "if (raw == HashMap.class)",
      "right" : "if (raw == HashMap.class)",
      "info" : "IfStatement[45794-45945]:IfStatement[45932-46083]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45820-45945]:Block[45958-46083]"
    }, {
      "left" : "if (target == Map.class)",
      "right" : "if (target == Map.class)",
      "info" : "IfStatement[45834-45935]:IfStatement[45972-46073]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45859-45935]:Block[45997-46073]"
    }, {
      "left" : "return _hashMapSuperInterfaceChain(current);",
      "right" : "return _hashMapSuperInterfaceChain(current);",
      "info" : "ReturnStatement[45877-45921]:ReturnStatement[46015-46059]"
    }, {
      "left" : "if (raw == ArrayList.class)",
      "right" : "if (raw == ArrayList.class)",
      "info" : "IfStatement[45954-46110]:IfStatement[46092-46248]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45982-46110]:Block[46120-46248]"
    }, {
      "left" : "if (target == List.class)",
      "right" : "if (target == List.class)",
      "info" : "IfStatement[45996-46100]:IfStatement[46134-46238]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46022-46100]:Block[46160-46238]"
    }, {
      "left" : "return _arrayListSuperInterfaceChain(current);",
      "right" : "return _arrayListSuperInterfaceChain(current);",
      "info" : "ReturnStatement[46040-46086]:ReturnStatement[46178-46224]"
    }, {
      "left" : "return _doFindSuperInterfaceChain(current, target);",
      "right" : "return _doFindSuperInterfaceChain(current, target);",
      "info" : "ReturnStatement[46119-46170]:ReturnStatement[46257-46308]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[46186-46195]:Modifier[46324-46333]"
    }, {
      "left" : "HierarchicType",
      "right" : "HierarchicType",
      "info" : "SimpleType[46196-46210]:SimpleType[46334-46348]"
    }, {
      "left" : "_doFindSuperInterfaceChain",
      "right" : "_doFindSuperInterfaceChain",
      "info" : "SimpleName[46211-46237]:SimpleName[46349-46375]"
    }, {
      "left" : "HierarchicType current",
      "right" : "HierarchicType current",
      "info" : "SingleVariableDeclaration[46238-46260]:SingleVariableDeclaration[46376-46398]"
    }, {
      "left" : "Class<?> target",
      "right" : "Class<?> target",
      "info" : "SingleVariableDeclaration[46262-46277]:SingleVariableDeclaration[46400-46415]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46283-47248]:Block[46421-47386]"
    }, {
      "left" : "Class<?> raw = current.getRawClass();",
      "right" : "Class<?> raw = current.getRawClass();",
      "info" : "VariableDeclarationStatement[46293-46330]:VariableDeclarationStatement[46431-46468]"
    }, {
      "left" : "Type[] parents = raw.getGenericInterfaces();",
      "right" : "Type[] parents = raw.getGenericInterfaces();",
      "info" : "VariableDeclarationStatement[46339-46383]:VariableDeclarationStatement[46477-46521]"
    }, {
      "left" : "if (parents != null)",
      "right" : "if (parents != null)",
      "info" : "IfStatement[46508-46856]:IfStatement[46646-46994]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46529-46856]:Block[46667-46994]"
    }, {
      "left" : "for (Type parent : parents)",
      "right" : "for (Type parent : parents)",
      "info" : "EnhancedForStatement[46543-46846]:EnhancedForStatement[46681-46984]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46571-46846]:Block[46709-46984]"
    }, {
      "left" : "HierarchicType sup = _findSuperInterfaceChain(parent, target);",
      "right" : "HierarchicType sup = _findSuperInterfaceChain(parent, target);",
      "info" : "VariableDeclarationStatement[46589-46651]:VariableDeclarationStatement[46727-46789]"
    }, {
      "left" : "if (sup != null)",
      "right" : "if (sup != null)",
      "info" : "IfStatement[46668-46832]:IfStatement[46806-46970]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46685-46832]:Block[46823-46970]"
    }, {
      "left" : "sup.setSubType(current);",
      "right" : "sup.setSubType(current);",
      "info" : "ExpressionStatement[46707-46731]:ExpressionStatement[46845-46869]"
    }, {
      "left" : "current.setSuperType(sup);",
      "right" : "current.setSuperType(sup);",
      "info" : "ExpressionStatement[46752-46778]:ExpressionStatement[46890-46916]"
    }, {
      "left" : "return current;",
      "right" : "return current;",
      "info" : "ReturnStatement[46799-46814]:ReturnStatement[46937-46952]"
    }, {
      "left" : "Type parent = raw.getGenericSuperclass();",
      "right" : "Type parent = raw.getGenericSuperclass();",
      "info" : "VariableDeclarationStatement[46904-46945]:VariableDeclarationStatement[47042-47083]"
    }, {
      "left" : "if (parent != null)",
      "right" : "if (parent != null)",
      "info" : "IfStatement[46954-47221]:IfStatement[47092-47359]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46974-47221]:Block[47112-47359]"
    }, {
      "left" : "HierarchicType sup = _findSuperInterfaceChain(parent, target);",
      "right" : "HierarchicType sup = _findSuperInterfaceChain(parent, target);",
      "info" : "VariableDeclarationStatement[46988-47050]:VariableDeclarationStatement[47126-47188]"
    }, {
      "left" : "if (sup != null)",
      "right" : "if (sup != null)",
      "info" : "IfStatement[47063-47211]:IfStatement[47201-47349]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47080-47211]:Block[47218-47349]"
    }, {
      "left" : "sup.setSubType(current);",
      "right" : "sup.setSubType(current);",
      "info" : "ExpressionStatement[47098-47122]:ExpressionStatement[47236-47260]"
    }, {
      "left" : "current.setSuperType(sup);",
      "right" : "current.setSuperType(sup);",
      "info" : "ExpressionStatement[47139-47165]:ExpressionStatement[47277-47303]"
    }, {
      "left" : "return current;",
      "right" : "return current;",
      "info" : "ReturnStatement[47182-47197]:ReturnStatement[47320-47335]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[47230-47242]:ReturnStatement[47368-47380]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[47254-47263]:Modifier[47392-47401]"
    }, {
      "left" : "synchronized",
      "right" : "synchronized",
      "info" : "Modifier[47264-47276]:Modifier[47402-47414]"
    }, {
      "left" : "HierarchicType",
      "right" : "HierarchicType",
      "info" : "SimpleType[47277-47291]:SimpleType[47415-47429]"
    }, {
      "left" : "_hashMapSuperInterfaceChain",
      "right" : "_hashMapSuperInterfaceChain",
      "info" : "SimpleName[47292-47319]:SimpleName[47430-47457]"
    }, {
      "left" : "HierarchicType current",
      "right" : "HierarchicType current",
      "info" : "SingleVariableDeclaration[47320-47342]:SingleVariableDeclaration[47458-47480]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47348-47748]:Block[47486-47886]"
    }, {
      "left" : "if (_cachedHashMapType == null)",
      "right" : "if (_cachedHashMapType == null)",
      "info" : "IfStatement[47358-47581]:IfStatement[47496-47719]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47390-47581]:Block[47528-47719]"
    }, {
      "left" : "HierarchicType base = current.deepCloneWithoutSubtype();",
      "right" : "HierarchicType base = current.deepCloneWithoutSubtype();",
      "info" : "VariableDeclarationStatement[47404-47460]:VariableDeclarationStatement[47542-47598]"
    }, {
      "left" : "_doFindSuperInterfaceChain(base, Map.class);",
      "right" : "_doFindSuperInterfaceChain(base, Map.class);",
      "info" : "ExpressionStatement[47473-47517]:ExpressionStatement[47611-47655]"
    }, {
      "left" : "_cachedHashMapType = base.getSuperType();",
      "right" : "_cachedHashMapType = base.getSuperType();",
      "info" : "ExpressionStatement[47530-47571]:ExpressionStatement[47668-47709]"
    }, {
      "left" : "HierarchicType t = _cachedHashMapType.deepCloneWithoutSubtype();",
      "right" : "HierarchicType t = _cachedHashMapType.deepCloneWithoutSubtype();",
      "info" : "VariableDeclarationStatement[47590-47654]:VariableDeclarationStatement[47728-47792]"
    }, {
      "left" : "current.setSuperType(t);",
      "right" : "current.setSuperType(t);",
      "info" : "ExpressionStatement[47663-47687]:ExpressionStatement[47801-47825]"
    }, {
      "left" : "t.setSubType(current);",
      "right" : "t.setSubType(current);",
      "info" : "ExpressionStatement[47696-47718]:ExpressionStatement[47834-47856]"
    }, {
      "left" : "return current;",
      "right" : "return current;",
      "info" : "ReturnStatement[47727-47742]:ReturnStatement[47865-47880]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[47754-47763]:Modifier[47892-47901]"
    }, {
      "left" : "synchronized",
      "right" : "synchronized",
      "info" : "Modifier[47764-47776]:Modifier[47902-47914]"
    }, {
      "left" : "HierarchicType",
      "right" : "HierarchicType",
      "info" : "SimpleType[47777-47791]:SimpleType[47915-47929]"
    }, {
      "left" : "_arrayListSuperInterfaceChain",
      "right" : "_arrayListSuperInterfaceChain",
      "info" : "SimpleName[47792-47821]:SimpleName[47930-47959]"
    }, {
      "left" : "HierarchicType current",
      "right" : "HierarchicType current",
      "info" : "SingleVariableDeclaration[47822-47844]:SingleVariableDeclaration[47960-47982]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47850-48257]:Block[47988-48395]"
    }, {
      "left" : "if (_cachedArrayListType == null)",
      "right" : "if (_cachedArrayListType == null)",
      "info" : "IfStatement[47860-48088]:IfStatement[47998-48226]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47894-48088]:Block[48032-48226]"
    }, {
      "left" : "HierarchicType base = current.deepCloneWithoutSubtype();",
      "right" : "HierarchicType base = current.deepCloneWithoutSubtype();",
      "info" : "VariableDeclarationStatement[47908-47964]:VariableDeclarationStatement[48046-48102]"
    }, {
      "left" : "_doFindSuperInterfaceChain(base, List.class);",
      "right" : "_doFindSuperInterfaceChain(base, List.class);",
      "info" : "ExpressionStatement[47977-48022]:ExpressionStatement[48115-48160]"
    }, {
      "left" : "_cachedArrayListType = base.getSuperType();",
      "right" : "_cachedArrayListType = base.getSuperType();",
      "info" : "ExpressionStatement[48035-48078]:ExpressionStatement[48173-48216]"
    }, {
      "left" : "HierarchicType t = _cachedArrayListType.deepCloneWithoutSubtype();",
      "right" : "HierarchicType t = _cachedArrayListType.deepCloneWithoutSubtype();",
      "info" : "VariableDeclarationStatement[48097-48163]:VariableDeclarationStatement[48235-48301]"
    }, {
      "left" : "current.setSuperType(t);",
      "right" : "current.setSuperType(t);",
      "info" : "ExpressionStatement[48172-48196]:ExpressionStatement[48310-48334]"
    }, {
      "left" : "t.setSubType(current);",
      "right" : "t.setSubType(current);",
      "info" : "ExpressionStatement[48205-48227]:ExpressionStatement[48343-48365]"
    }, {
      "left" : "return current;",
      "right" : "return current;",
      "info" : "ReturnStatement[48236-48251]:ReturnStatement[48374-48389]"
    } ]
  },
  "interFileMappings" : { }
}