{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "Complex",
      "right" : "Complex",
      "info" : "TypeDeclaration[1257-39978]:TypeDeclaration[1257-40055]"
    }, {
      "left" : "public static final Complex I = new Complex(0.0, 1.0);",
      "right" : "public static final Complex I = new Complex(0.0, 1.0);",
      "info" : "FieldDeclaration[2328-2451]:FieldDeclaration[2328-2451]"
    }, {
      "left" : "public static final Complex NaN = new Complex(Double.NaN, Double.NaN);",
      "right" : "public static final Complex NaN = new Complex(Double.NaN, Double.NaN);",
      "info" : "FieldDeclaration[2493-2617]:FieldDeclaration[2493-2617]"
    }, {
      "left" : "public static final Complex INF = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);",
      "right" : "public static final Complex INF = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);",
      "info" : "FieldDeclaration[2661-2814]:FieldDeclaration[2661-2814]"
    }, {
      "left" : "public static final Complex ONE = new Complex(1.0, 0.0);",
      "right" : "public static final Complex ONE = new Complex(1.0, 0.0);",
      "info" : "FieldDeclaration[2819-2929]:FieldDeclaration[2819-2929]"
    }, {
      "left" : "public static final Complex ZERO = new Complex(0.0, 0.0);",
      "right" : "public static final Complex ZERO = new Complex(0.0, 0.0);",
      "info" : "FieldDeclaration[2934-3045]:FieldDeclaration[2934-3045]"
    }, {
      "left" : "private static final long serialVersionUID = -6195664516687396620L;",
      "right" : "private static final long serialVersionUID = -6195664516687396620L;",
      "info" : "FieldDeclaration[3051-3161]:FieldDeclaration[3051-3161]"
    }, {
      "left" : "private final double imaginary;",
      "right" : "private final double imaginary;",
      "info" : "FieldDeclaration[3167-3229]:FieldDeclaration[3167-3229]"
    }, {
      "left" : "private final double real;",
      "right" : "private final double real;",
      "info" : "FieldDeclaration[3234-3286]:FieldDeclaration[3234-3286]"
    }, {
      "left" : "private final transient boolean isNaN;",
      "right" : "private final transient boolean isNaN;",
      "info" : "FieldDeclaration[3291-3392]:FieldDeclaration[3291-3392]"
    }, {
      "left" : "private final transient boolean isInfinite;",
      "right" : "private final transient boolean isInfinite;",
      "info" : "FieldDeclaration[3397-3499]:FieldDeclaration[3397-3499]"
    }, {
      "left" : "public Complex(double real)",
      "right" : "public Complex(double real)",
      "info" : "MethodDeclaration[3560-3730]:MethodDeclaration[3604-3774]"
    }, {
      "left" : "public Complex(double real, double imaginary)",
      "right" : "public Complex(double real, double imaginary)",
      "info" : "MethodDeclaration[3736-4177]:MethodDeclaration[3780-4267]"
    }, {
      "left" : "public double abs()",
      "right" : "public double abs()",
      "info" : "MethodDeclaration[4183-5155]:MethodDeclaration[4273-5245]"
    }, {
      "left" : "public Complex add(Complex addend) throws NullArgumentException",
      "right" : "public Complex add(Complex addend) throws NullArgumentException",
      "info" : "MethodDeclaration[5161-6184]:MethodDeclaration[5251-6274]"
    }, {
      "left" : "public Complex add(double addend)",
      "right" : "public Complex add(double addend)",
      "info" : "MethodDeclaration[6190-6648]:MethodDeclaration[6280-6738]"
    }, {
      "left" : "public Complex conjugate()",
      "right" : "public Complex conjugate()",
      "info" : "MethodDeclaration[6655-7391]:MethodDeclaration[6745-7481]"
    }, {
      "left" : "public Complex divide(Complex divisor)\n        throws NullArgumentException",
      "right" : "public Complex divide(Complex divisor)\n        throws NullArgumentException",
      "info" : "MethodDeclaration[7397-10220]:MethodDeclaration[7487-10282]"
    }, {
      "left" : "public Complex divide(double divisor)",
      "right" : "public Complex divide(double divisor)",
      "info" : "MethodDeclaration[10226-10910]:MethodDeclaration[10288-10987]"
    }, {
      "left" : "public boolean equals(Object other)",
      "right" : "public boolean equals(Object other)",
      "info" : "MethodDeclaration[10916-12030]:MethodDeclaration[10993-12107]"
    }, {
      "left" : "public int hashCode()",
      "right" : "public int hashCode()",
      "info" : "MethodDeclaration[12036-12448]:MethodDeclaration[12113-12525]"
    }, {
      "left" : "public double getImaginary()",
      "right" : "public double getImaginary()",
      "info" : "MethodDeclaration[12454-12608]:MethodDeclaration[12531-12685]"
    }, {
      "left" : "public double getReal()",
      "right" : "public double getReal()",
      "info" : "MethodDeclaration[12614-12748]:MethodDeclaration[12691-12825]"
    }, {
      "left" : "public boolean isNaN()",
      "right" : "public boolean isNaN()",
      "info" : "MethodDeclaration[12754-13025]:MethodDeclaration[12831-13102]"
    }, {
      "left" : "public boolean isInfinite()",
      "right" : "public boolean isInfinite()",
      "info" : "MethodDeclaration[13031-13468]:MethodDeclaration[13108-13545]"
    }, {
      "left" : "public Complex multiply(Complex factor)\n        throws NullArgumentException",
      "right" : "public Complex multiply(Complex factor)\n        throws NullArgumentException",
      "info" : "MethodDeclaration[13474-15134]:MethodDeclaration[13551-15211]"
    }, {
      "left" : "public Complex multiply(double factor)",
      "right" : "public Complex multiply(double factor)",
      "info" : "MethodDeclaration[15140-15850]:MethodDeclaration[15217-15927]"
    }, {
      "left" : "public Complex negate()",
      "right" : "public Complex negate()",
      "info" : "MethodDeclaration[15856-16227]:MethodDeclaration[15933-16304]"
    }, {
      "left" : "public Complex subtract(Complex subtrahend)\n        throws NullArgumentException",
      "right" : "public Complex subtract(Complex subtrahend)\n        throws NullArgumentException",
      "info" : "MethodDeclaration[16233-17296]:MethodDeclaration[16310-17373]"
    }, {
      "left" : "public Complex subtract(double subtrahend)",
      "right" : "public Complex subtract(double subtrahend)",
      "info" : "MethodDeclaration[17302-17751]:MethodDeclaration[17379-17828]"
    }, {
      "left" : "public Complex acos()",
      "right" : "public Complex acos()",
      "info" : "MethodDeclaration[17757-18457]:MethodDeclaration[17834-18534]"
    }, {
      "left" : "public Complex asin()",
      "right" : "public Complex asin()",
      "info" : "MethodDeclaration[18463-19149]:MethodDeclaration[18540-19226]"
    }, {
      "left" : "public Complex atan()",
      "right" : "public Complex atan()",
      "info" : "MethodDeclaration[19155-19866]:MethodDeclaration[19232-19943]"
    }, {
      "left" : "public Complex cos()",
      "right" : "public Complex cos()",
      "info" : "MethodDeclaration[19872-21198]:MethodDeclaration[19949-21275]"
    }, {
      "left" : "public Complex cosh()",
      "right" : "public Complex cosh()",
      "info" : "MethodDeclaration[21204-22567]:MethodDeclaration[21281-22644]"
    }, {
      "left" : "public Complex exp()",
      "right" : "public Complex exp()",
      "info" : "MethodDeclaration[22573-23949]:MethodDeclaration[22650-24026]"
    }, {
      "left" : "public Complex log()",
      "right" : "public Complex log()",
      "info" : "MethodDeclaration[23955-25500]:MethodDeclaration[24032-25577]"
    }, {
      "left" : "public Complex pow(Complex x)\n        throws NullArgumentException",
      "right" : "public Complex pow(Complex x)\n        throws NullArgumentException",
      "info" : "MethodDeclaration[25506-26391]:MethodDeclaration[25583-26468]"
    }, {
      "left" : "public Complex pow(double x)",
      "right" : "public Complex pow(double x)",
      "info" : "MethodDeclaration[26397-26728]:MethodDeclaration[26474-26805]"
    }, {
      "left" : "public Complex sin()",
      "right" : "public Complex sin()",
      "info" : "MethodDeclaration[26734-28061]:MethodDeclaration[26811-28138]"
    }, {
      "left" : "public Complex sinh()",
      "right" : "public Complex sinh()",
      "info" : "MethodDeclaration[28067-29402]:MethodDeclaration[28144-29479]"
    }, {
      "left" : "public Complex sqrt()",
      "right" : "public Complex sqrt()",
      "info" : "MethodDeclaration[29408-31269]:MethodDeclaration[29485-31346]"
    }, {
      "left" : "public Complex sqrt1z()",
      "right" : "public Complex sqrt1z()",
      "info" : "MethodDeclaration[31275-32049]:MethodDeclaration[31352-32126]"
    }, {
      "left" : "public Complex tan()",
      "right" : "public Complex tan()",
      "info" : "MethodDeclaration[32055-33573]:MethodDeclaration[32132-33650]"
    }, {
      "left" : "public Complex tanh()",
      "right" : "public Complex tanh()",
      "info" : "MethodDeclaration[33579-35105]:MethodDeclaration[33656-35182]"
    }, {
      "left" : "public double getArgument()",
      "right" : "public double getArgument()",
      "info" : "MethodDeclaration[35113-36032]:MethodDeclaration[35190-36109]"
    }, {
      "left" : "public List<Complex> nthRoot(int n)",
      "right" : "public List<Complex> nthRoot(int n)",
      "info" : "MethodDeclaration[36038-38124]:MethodDeclaration[36115-38201]"
    }, {
      "left" : "protected Complex createComplex(double realPart,\n                                    double imaginaryPart)",
      "right" : "protected Complex createComplex(double realPart,\n                                    double imaginaryPart)",
      "info" : "MethodDeclaration[38130-38566]:MethodDeclaration[38207-38643]"
    }, {
      "left" : "public static Complex valueOf(double realPart,\n                                  double imaginaryPart)",
      "right" : "public static Complex valueOf(double realPart,\n                                  double imaginaryPart)",
      "info" : "MethodDeclaration[38572-39053]:MethodDeclaration[38649-39130]"
    }, {
      "left" : "public static Complex valueOf(double realPart)",
      "right" : "public static Complex valueOf(double realPart)",
      "info" : "MethodDeclaration[39059-39372]:MethodDeclaration[39136-39449]"
    }, {
      "left" : "protected final Object readResolve()",
      "right" : "protected final Object readResolve()",
      "info" : "MethodDeclaration[39378-39735]:MethodDeclaration[39455-39812]"
    }, {
      "left" : "public ComplexField getField()",
      "right" : "public ComplexField getField()",
      "info" : "MethodDeclaration[39741-39847]:MethodDeclaration[39818-39924]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[39853-39976]:MethodDeclaration[39930-40053]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3698-3730]:Block[3742-3774]"
    }, {
      "left" : "this(real, 0.0);",
      "right" : "this(real, 0.0);",
      "info" : "ConstructorInvocation[3708-3724]:ConstructorInvocation[3752-3768]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3942-4177]:Block[3986-4267]"
    }, {
      "left" : "this.real = real;",
      "right" : "this.real = real;",
      "info" : "ExpressionStatement[3952-3969]:ExpressionStatement[3996-4013]"
    }, {
      "left" : "this.imaginary = imaginary;",
      "right" : "this.imaginary = imaginary;",
      "info" : "ExpressionStatement[3978-4005]:ExpressionStatement[4022-4049]"
    }, {
      "left" : "isNaN = Double.isNaN(real) || Double.isNaN(imaginary);",
      "right" : "isNaN = Double.isNaN(real) || Double.isNaN(imaginary);",
      "info" : "ExpressionStatement[4015-4069]:ExpressionStatement[4059-4113]"
    }, {
      "left" : "isInfinite = !isNaN &&\n            (Double.isInfinite(real) || Double.isInfinite(imaginary));",
      "right" : "isInfinite = !isNaN &&\n            (Double.isInfinite(real) || Double.isInfinite(imaginary));",
      "info" : "ExpressionStatement[4078-4171]:ExpressionStatement[4122-4215]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4511-5155]:Block[4601-5245]"
    }, {
      "left" : "if (isNaN)",
      "right" : "if (isNaN)",
      "info" : "IfStatement[4521-4574]:IfStatement[4611-4664]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4532-4574]:Block[4622-4664]"
    }, {
      "left" : "return Double.NaN;",
      "right" : "return Double.NaN;",
      "info" : "ReturnStatement[4546-4564]:ReturnStatement[4636-4654]"
    }, {
      "left" : "if (isInfinite())",
      "right" : "if (isInfinite())",
      "info" : "IfStatement[4583-4657]:IfStatement[4673-4747]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4601-4657]:Block[4691-4747]"
    }, {
      "left" : "return Double.POSITIVE_INFINITY;",
      "right" : "return Double.POSITIVE_INFINITY;",
      "info" : "ReturnStatement[4615-4647]:ReturnStatement[4705-4737]"
    }, {
      "left" : "if (FastMath.abs(real) < FastMath.abs(imaginary))",
      "right" : "if (FastMath.abs(real) < FastMath.abs(imaginary))",
      "info" : "IfStatement[4666-5149]:IfStatement[4756-5239]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4716-4932]:Block[4806-5022]"
    }, {
      "left" : "if (imaginary == 0.0)",
      "right" : "if (imaginary == 0.0)",
      "info" : "IfStatement[4730-4810]:IfStatement[4820-4900]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4752-4810]:Block[4842-4900]"
    }, {
      "left" : "return FastMath.abs(real);",
      "right" : "return FastMath.abs(real);",
      "info" : "ReturnStatement[4770-4796]:ReturnStatement[4860-4886]"
    }, {
      "left" : "double q = real / imaginary;",
      "right" : "double q = real / imaginary;",
      "info" : "VariableDeclarationStatement[4823-4851]:VariableDeclarationStatement[4913-4941]"
    }, {
      "left" : "return FastMath.abs(imaginary) * FastMath.sqrt(1 + q * q);",
      "right" : "return FastMath.abs(imaginary) * FastMath.sqrt(1 + q * q);",
      "info" : "ReturnStatement[4864-4922]:ReturnStatement[4954-5012]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4938-5149]:Block[5028-5239]"
    }, {
      "left" : "if (real == 0.0)",
      "right" : "if (real == 0.0)",
      "info" : "IfStatement[4952-5032]:IfStatement[5042-5122]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4969-5032]:Block[5059-5122]"
    }, {
      "left" : "return FastMath.abs(imaginary);",
      "right" : "return FastMath.abs(imaginary);",
      "info" : "ReturnStatement[4987-5018]:ReturnStatement[5077-5108]"
    }, {
      "left" : "double q = imaginary / real;",
      "right" : "double q = imaginary / real;",
      "info" : "VariableDeclarationStatement[5045-5073]:VariableDeclarationStatement[5135-5163]"
    }, {
      "left" : "return FastMath.abs(real) * FastMath.sqrt(1 + q * q);",
      "right" : "return FastMath.abs(real) * FastMath.sqrt(1 + q * q);",
      "info" : "ReturnStatement[5086-5139]:ReturnStatement[5176-5229]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5946-6184]:Block[6036-6274]"
    }, {
      "left" : "MathUtils.checkNotNull(addend);",
      "right" : "MathUtils.checkNotNull(addend);",
      "info" : "ExpressionStatement[5956-5987]:ExpressionStatement[6046-6077]"
    }, {
      "left" : "if (isNaN || addend.isNaN)",
      "right" : "if (isNaN || addend.isNaN)",
      "info" : "IfStatement[5996-6058]:IfStatement[6086-6148]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6023-6058]:Block[6113-6148]"
    }, {
      "left" : "return NaN;",
      "right" : "return NaN;",
      "info" : "ReturnStatement[6037-6048]:ReturnStatement[6127-6138]"
    }, {
      "left" : "return createComplex(real + addend.getReal(),\n                             imaginary + addend.getImaginary());",
      "right" : "return createComplex(real + addend.getReal(),\n                             imaginary + addend.getImaginary());",
      "info" : "ReturnStatement[6068-6178]:ReturnStatement[6158-6268]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6505-6648]:Block[6595-6738]"
    }, {
      "left" : "if (isNaN || Double.isNaN(addend))",
      "right" : "if (isNaN || Double.isNaN(addend))",
      "info" : "IfStatement[6515-6585]:IfStatement[6605-6675]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6550-6585]:Block[6640-6675]"
    }, {
      "left" : "return NaN;",
      "right" : "return NaN;",
      "info" : "ReturnStatement[6564-6575]:ReturnStatement[6654-6665]"
    }, {
      "left" : "return createComplex(real + addend, imaginary);",
      "right" : "return createComplex(real + addend, imaginary);",
      "info" : "ReturnStatement[6595-6642]:ReturnStatement[6685-6732]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7280-7391]:Block[7370-7481]"
    }, {
      "left" : "if (isNaN)",
      "right" : "if (isNaN)",
      "info" : "IfStatement[7290-7336]:IfStatement[7380-7426]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7301-7336]:Block[7391-7426]"
    }, {
      "left" : "return NaN;",
      "right" : "return NaN;",
      "info" : "ReturnStatement[7315-7326]:ReturnStatement[7405-7416]"
    }, {
      "left" : "return createComplex(real, -imaginary);",
      "right" : "return createComplex(real, -imaginary);",
      "info" : "ReturnStatement[7346-7385]:ReturnStatement[7436-7475]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9332-10220]:Block[9422-10282]"
    }, {
      "left" : "MathUtils.checkNotNull(divisor);",
      "right" : "MathUtils.checkNotNull(divisor);",
      "info" : "ExpressionStatement[9342-9374]:ExpressionStatement[9432-9464]"
    }, {
      "left" : "if (isNaN || divisor.isNaN)",
      "right" : "if (isNaN || divisor.isNaN)",
      "info" : "IfStatement[9383-9446]:IfStatement[9473-9536]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9411-9446]:Block[9501-9536]"
    }, {
      "left" : "return NaN;",
      "right" : "return NaN;",
      "info" : "ReturnStatement[9425-9436]:ReturnStatement[9515-9526]"
    }, {
      "left" : "if (divisor.isInfinite() && !isInfinite())",
      "right" : "if (divisor.isInfinite() && !isInfinite())",
      "info" : "IfStatement[9564-9643]:IfStatement[9626-9705]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9607-9643]:Block[9669-9705]"
    }, {
      "left" : "return ZERO;",
      "right" : "return ZERO;",
      "info" : "ReturnStatement[9621-9633]:ReturnStatement[9683-9695]"
    }, {
      "left" : "final double c = divisor.getReal();",
      "right" : "final double c = divisor.getReal();",
      "info" : "VariableDeclarationStatement[9653-9688]:VariableDeclarationStatement[9715-9750]"
    }, {
      "left" : "final double d = divisor.getImaginary();",
      "right" : "final double d = divisor.getImaginary();",
      "info" : "VariableDeclarationStatement[9697-9737]:VariableDeclarationStatement[9759-9799]"
    }, {
      "left" : "if (FastMath.abs(c) < FastMath.abs(d))",
      "right" : "if (FastMath.abs(c) < FastMath.abs(d))",
      "info" : "IfStatement[9747-10214]:IfStatement[9809-10276]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9786-9997]:Block[9848-10059]"
    }, {
      "left" : "double q = c / d;",
      "right" : "double q = c / d;",
      "info" : "VariableDeclarationStatement[9800-9817]:VariableDeclarationStatement[9862-9879]"
    }, {
      "left" : "double denominator = c * q + d;",
      "right" : "double denominator = c * q + d;",
      "info" : "VariableDeclarationStatement[9830-9861]:VariableDeclarationStatement[9892-9923]"
    }, {
      "left" : "return createComplex((real * q + imaginary) / denominator,\n                (imaginary * q - real) / denominator);",
      "right" : "return createComplex((real * q + imaginary) / denominator,\n                (imaginary * q - real) / denominator);",
      "info" : "ReturnStatement[9874-9987]:ReturnStatement[9936-10049]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10003-10214]:Block[10065-10276]"
    }, {
      "left" : "double q = d / c;",
      "right" : "double q = d / c;",
      "info" : "VariableDeclarationStatement[10017-10034]:VariableDeclarationStatement[10079-10096]"
    }, {
      "left" : "double denominator = d * q + c;",
      "right" : "double denominator = d * q + c;",
      "info" : "VariableDeclarationStatement[10047-10078]:VariableDeclarationStatement[10109-10140]"
    }, {
      "left" : "return createComplex((imaginary * q + real) / denominator,\n                (imaginary - real * q) / denominator);",
      "right" : "return createComplex((imaginary * q + real) / denominator,\n                (imaginary - real * q) / denominator);",
      "info" : "ReturnStatement[10091-10204]:ReturnStatement[10153-10266]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10564-10910]:Block[10626-10987]"
    }, {
      "left" : "if (isNaN || Double.isNaN(divisor))",
      "right" : "if (isNaN || Double.isNaN(divisor))",
      "info" : "IfStatement[10574-10645]:IfStatement[10636-10707]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10610-10645]:Block[10672-10707]"
    }, {
      "left" : "return NaN;",
      "right" : "return NaN;",
      "info" : "ReturnStatement[10624-10635]:ReturnStatement[10686-10697]"
    }, {
      "left" : "if (divisor == 0d)",
      "right" : "if (divisor == 0d)",
      "info" : "IfStatement[10654-10708]:IfStatement[10716-10785]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10673-10708]:Block[10735-10785]"
    }, {
      "left" : "return NaN;",
      "right" : "return isZero ? NaN : INF;",
      "info" : "ReturnStatement[10687-10698]:ReturnStatement[10749-10775]"
    }, {
      "left" : "if (Double.isInfinite(divisor))",
      "right" : "if (Double.isInfinite(divisor))",
      "info" : "IfStatement[10717-10807]:IfStatement[10794-10884]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10749-10807]:Block[10826-10884]"
    }, {
      "left" : "return !isInfinite() ? ZERO : NaN;",
      "right" : "return !isInfinite() ? ZERO : NaN;",
      "info" : "ReturnStatement[10763-10797]:ReturnStatement[10840-10874]"
    }, {
      "left" : "return createComplex(real / divisor,\n                             imaginary  / divisor);",
      "right" : "return createComplex(real / divisor,\n                             imaginary  / divisor);",
      "info" : "ReturnStatement[10816-10904]:ReturnStatement[10893-10981]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11685-12030]:Block[11762-12107]"
    }, {
      "left" : "if (this == other)",
      "right" : "if (this == other)",
      "info" : "IfStatement[11695-11750]:IfStatement[11772-11827]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11714-11750]:Block[11791-11827]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[11728-11740]:ReturnStatement[11805-11817]"
    }, {
      "left" : "if (other instanceof Complex)",
      "right" : "if (other instanceof Complex)",
      "info" : "IfStatement[11759-12002]:IfStatement[11836-12079]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11788-12002]:Block[11865-12079]"
    }, {
      "left" : "Complex c = (Complex)other;",
      "right" : "Complex c = (Complex)other;",
      "info" : "VariableDeclarationStatement[11802-11829]:VariableDeclarationStatement[11879-11906]"
    }, {
      "left" : "if (c.isNaN)",
      "right" : "if (c.isNaN)",
      "info" : "IfStatement[11842-11992]:IfStatement[11919-12069]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11855-11900]:Block[11932-11977]"
    }, {
      "left" : "return isNaN;",
      "right" : "return isNaN;",
      "info" : "ReturnStatement[11873-11886]:ReturnStatement[11950-11963]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11906-11992]:Block[11983-12069]"
    }, {
      "left" : "return (real == c.real) && (imaginary == c.imaginary);",
      "right" : "return (real == c.real) && (imaginary == c.imaginary);",
      "info" : "ReturnStatement[11924-11978]:ReturnStatement[12001-12055]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[12011-12024]:ReturnStatement[12088-12101]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12299-12448]:Block[12376-12525]"
    }, {
      "left" : "if (isNaN)",
      "right" : "if (isNaN)",
      "info" : "IfStatement[12309-12353]:IfStatement[12386-12430]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12320-12353]:Block[12397-12430]"
    }, {
      "left" : "return 7;",
      "right" : "return 7;",
      "info" : "ReturnStatement[12334-12343]:ReturnStatement[12411-12420]"
    }, {
      "left" : "return 37 * (17 * MathUtils.hash(imaginary) +\n            MathUtils.hash(real));",
      "right" : "return 37 * (17 * MathUtils.hash(imaginary) +\n            MathUtils.hash(real));",
      "info" : "ReturnStatement[12362-12442]:ReturnStatement[12439-12519]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12575-12608]:Block[12652-12685]"
    }, {
      "left" : "return imaginary;",
      "right" : "return imaginary;",
      "info" : "ReturnStatement[12585-12602]:ReturnStatement[12662-12679]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12720-12748]:Block[12797-12825]"
    }, {
      "left" : "return real;",
      "right" : "return real;",
      "info" : "ReturnStatement[12730-12742]:ReturnStatement[12807-12819]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12996-13025]:Block[13073-13102]"
    }, {
      "left" : "return isNaN;",
      "right" : "return isNaN;",
      "info" : "ReturnStatement[13006-13019]:ReturnStatement[13083-13096]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13434-13468]:Block[13511-13545]"
    }, {
      "left" : "return isInfinite;",
      "right" : "return isInfinite;",
      "info" : "ReturnStatement[13444-13462]:ReturnStatement[13521-13539]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14569-15134]:Block[14646-15211]"
    }, {
      "left" : "MathUtils.checkNotNull(factor);",
      "right" : "MathUtils.checkNotNull(factor);",
      "info" : "ExpressionStatement[14579-14610]:ExpressionStatement[14656-14687]"
    }, {
      "left" : "if (isNaN || factor.isNaN)",
      "right" : "if (isNaN || factor.isNaN)",
      "info" : "IfStatement[14619-14681]:IfStatement[14696-14758]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14646-14681]:Block[14723-14758]"
    }, {
      "left" : "return NaN;",
      "right" : "return NaN;",
      "info" : "ReturnStatement[14660-14671]:ReturnStatement[14737-14748]"
    }, {
      "left" : "if (Double.isInfinite(real) ||\n            Double.isInfinite(imaginary) ||\n            Double.isInfinite(factor.real) ||\n            Double.isInfinite(factor.imaginary))",
      "right" : "if (Double.isInfinite(real) ||\n            Double.isInfinite(imaginary) ||\n            Double.isInfinite(factor.real) ||\n            Double.isInfinite(factor.imaginary))",
      "info" : "IfStatement[14690-14967]:IfStatement[14767-15044]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14860-14967]:Block[14937-15044]"
    }, {
      "left" : "return INF;",
      "right" : "return INF;",
      "info" : "ReturnStatement[14946-14957]:ReturnStatement[15023-15034]"
    }, {
      "left" : "return createComplex(real * factor.real - imaginary * factor.imaginary,\n                             real * factor.imaginary + imaginary * factor.real);",
      "right" : "return createComplex(real * factor.real - imaginary * factor.imaginary,\n                             real * factor.imaginary + imaginary * factor.real);",
      "info" : "ReturnStatement[14976-15128]:ReturnStatement[15053-15205]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15469-15850]:Block[15546-15927]"
    }, {
      "left" : "if (isNaN || Double.isNaN(factor))",
      "right" : "if (isNaN || Double.isNaN(factor))",
      "info" : "IfStatement[15479-15549]:IfStatement[15556-15626]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15514-15549]:Block[15591-15626]"
    }, {
      "left" : "return NaN;",
      "right" : "return NaN;",
      "info" : "ReturnStatement[15528-15539]:ReturnStatement[15605-15616]"
    }, {
      "left" : "if (Double.isInfinite(real) ||\n            Double.isInfinite(imaginary) ||\n            Double.isInfinite(factor))",
      "right" : "if (Double.isInfinite(real) ||\n            Double.isInfinite(imaginary) ||\n            Double.isInfinite(factor))",
      "info" : "IfStatement[15558-15779]:IfStatement[15635-15856]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15672-15779]:Block[15749-15856]"
    }, {
      "left" : "return INF;",
      "right" : "return INF;",
      "info" : "ReturnStatement[15758-15769]:ReturnStatement[15835-15846]"
    }, {
      "left" : "return createComplex(real * factor, imaginary * factor);",
      "right" : "return createComplex(real * factor, imaginary * factor);",
      "info" : "ReturnStatement[15788-15844]:ReturnStatement[15865-15921]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16115-16227]:Block[16192-16304]"
    }, {
      "left" : "if (isNaN)",
      "right" : "if (isNaN)",
      "info" : "IfStatement[16125-16171]:IfStatement[16202-16248]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16136-16171]:Block[16213-16248]"
    }, {
      "left" : "return NaN;",
      "right" : "return NaN;",
      "info" : "ReturnStatement[16150-16161]:ReturnStatement[16227-16238]"
    }, {
      "left" : "return createComplex(-real, -imaginary);",
      "right" : "return createComplex(-real, -imaginary);",
      "info" : "ReturnStatement[16181-16221]:ReturnStatement[16258-16298]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17042-17296]:Block[17119-17373]"
    }, {
      "left" : "MathUtils.checkNotNull(subtrahend);",
      "right" : "MathUtils.checkNotNull(subtrahend);",
      "info" : "ExpressionStatement[17052-17087]:ExpressionStatement[17129-17164]"
    }, {
      "left" : "if (isNaN || subtrahend.isNaN)",
      "right" : "if (isNaN || subtrahend.isNaN)",
      "info" : "IfStatement[17096-17162]:IfStatement[17173-17239]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17127-17162]:Block[17204-17239]"
    }, {
      "left" : "return NaN;",
      "right" : "return NaN;",
      "info" : "ReturnStatement[17141-17152]:ReturnStatement[17218-17229]"
    }, {
      "left" : "return createComplex(real - subtrahend.getReal(),\n                             imaginary - subtrahend.getImaginary());",
      "right" : "return createComplex(real - subtrahend.getReal(),\n                             imaginary - subtrahend.getImaginary());",
      "info" : "ReturnStatement[17172-17290]:ReturnStatement[17249-17367]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17601-17751]:Block[17678-17828]"
    }, {
      "left" : "if (isNaN || Double.isNaN(subtrahend))",
      "right" : "if (isNaN || Double.isNaN(subtrahend))",
      "info" : "IfStatement[17611-17685]:IfStatement[17688-17762]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17650-17685]:Block[17727-17762]"
    }, {
      "left" : "return NaN;",
      "right" : "return NaN;",
      "info" : "ReturnStatement[17664-17675]:ReturnStatement[17741-17752]"
    }, {
      "left" : "return createComplex(real - subtrahend, imaginary);",
      "right" : "return createComplex(real - subtrahend, imaginary);",
      "info" : "ReturnStatement[17694-17745]:ReturnStatement[17771-17822]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18302-18457]:Block[18379-18534]"
    }, {
      "left" : "if (isNaN)",
      "right" : "if (isNaN)",
      "info" : "IfStatement[18312-18358]:IfStatement[18389-18435]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18323-18358]:Block[18400-18435]"
    }, {
      "left" : "return NaN;",
      "right" : "return NaN;",
      "info" : "ReturnStatement[18337-18348]:ReturnStatement[18414-18425]"
    }, {
      "left" : "return this.add(this.sqrt1z().multiply(I)).log()\n            .multiply(I.negate());",
      "right" : "return this.add(this.sqrt1z().multiply(I)).log()\n            .multiply(I.negate());",
      "info" : "ReturnStatement[18368-18451]:ReturnStatement[18445-18528]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18999-19149]:Block[19076-19226]"
    }, {
      "left" : "if (isNaN)",
      "right" : "if (isNaN)",
      "info" : "IfStatement[19009-19055]:IfStatement[19086-19132]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19020-19055]:Block[19097-19132]"
    }, {
      "left" : "return NaN;",
      "right" : "return NaN;",
      "info" : "ReturnStatement[19034-19045]:ReturnStatement[19111-19122]"
    }, {
      "left" : "return sqrt1z().add(this.multiply(I)).log()\n            .multiply(I.negate());",
      "right" : "return sqrt1z().add(this.multiply(I)).log()\n            .multiply(I.negate());",
      "info" : "ReturnStatement[19065-19143]:ReturnStatement[19142-19220]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19687-19866]:Block[19764-19943]"
    }, {
      "left" : "if (isNaN)",
      "right" : "if (isNaN)",
      "info" : "IfStatement[19697-19743]:IfStatement[19774-19820]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19708-19743]:Block[19785-19820]"
    }, {
      "left" : "return NaN;",
      "right" : "return NaN;",
      "info" : "ReturnStatement[19722-19733]:ReturnStatement[19799-19810]"
    }, {
      "left" : "return this.add(I).divide(I.subtract(this)).log()\n            .multiply(I.divide(createComplex(2.0, 0.0)));",
      "right" : "return this.add(I).divide(I.subtract(this)).log()\n            .multiply(I.divide(createComplex(2.0, 0.0)));",
      "info" : "ReturnStatement[19753-19860]:ReturnStatement[19830-19937]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20979-21198]:Block[21056-21275]"
    }, {
      "left" : "if (isNaN)",
      "right" : "if (isNaN)",
      "info" : "IfStatement[20989-21035]:IfStatement[21066-21112]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21000-21035]:Block[21077-21112]"
    }, {
      "left" : "return NaN;",
      "right" : "return NaN;",
      "info" : "ReturnStatement[21014-21025]:ReturnStatement[21091-21102]"
    }, {
      "left" : "return createComplex(FastMath.cos(real) * MathUtils.cosh(imaginary),\n                             -FastMath.sin(real) * MathUtils.sinh(imaginary));",
      "right" : "return createComplex(FastMath.cos(real) * MathUtils.cosh(imaginary),\n                             -FastMath.sin(real) * MathUtils.sinh(imaginary));",
      "info" : "ReturnStatement[21045-21192]:ReturnStatement[21122-21269]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22349-22567]:Block[22426-22644]"
    }, {
      "left" : "if (isNaN)",
      "right" : "if (isNaN)",
      "info" : "IfStatement[22359-22405]:IfStatement[22436-22482]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22370-22405]:Block[22447-22482]"
    }, {
      "left" : "return NaN;",
      "right" : "return NaN;",
      "info" : "ReturnStatement[22384-22395]:ReturnStatement[22461-22472]"
    }, {
      "left" : "return createComplex(MathUtils.cosh(real) * FastMath.cos(imaginary),\n                             MathUtils.sinh(real) * FastMath.sin(imaginary));",
      "right" : "return createComplex(MathUtils.cosh(real) * FastMath.cos(imaginary),\n                             MathUtils.sinh(real) * FastMath.sin(imaginary));",
      "info" : "ReturnStatement[22415-22561]:ReturnStatement[22492-22638]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23711-23949]:Block[23788-24026]"
    }, {
      "left" : "if (isNaN)",
      "right" : "if (isNaN)",
      "info" : "IfStatement[23721-23767]:IfStatement[23798-23844]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23732-23767]:Block[23809-23844]"
    }, {
      "left" : "return NaN;",
      "right" : "return NaN;",
      "info" : "ReturnStatement[23746-23757]:ReturnStatement[23823-23834]"
    }, {
      "left" : "double expReal = FastMath.exp(real);",
      "right" : "double expReal = FastMath.exp(real);",
      "info" : "VariableDeclarationStatement[23777-23813]:VariableDeclarationStatement[23854-23890]"
    }, {
      "left" : "return createComplex(expReal *  FastMath.cos(imaginary),\n                             expReal * FastMath.sin(imaginary));",
      "right" : "return createComplex(expReal *  FastMath.cos(imaginary),\n                             expReal * FastMath.sin(imaginary));",
      "info" : "ReturnStatement[23822-23943]:ReturnStatement[23899-24020]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25324-25500]:Block[25401-25577]"
    }, {
      "left" : "if (isNaN)",
      "right" : "if (isNaN)",
      "info" : "IfStatement[25334-25380]:IfStatement[25411-25457]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25345-25380]:Block[25422-25457]"
    }, {
      "left" : "return NaN;",
      "right" : "return NaN;",
      "info" : "ReturnStatement[25359-25370]:ReturnStatement[25436-25447]"
    }, {
      "left" : "return createComplex(FastMath.log(abs()),\n                             FastMath.atan2(imaginary, real));",
      "right" : "return createComplex(FastMath.log(abs()),\n                             FastMath.atan2(imaginary, real));",
      "info" : "ReturnStatement[25390-25494]:ReturnStatement[25467-25571]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26304-26391]:Block[26381-26468]"
    }, {
      "left" : "MathUtils.checkNotNull(x);",
      "right" : "MathUtils.checkNotNull(x);",
      "info" : "ExpressionStatement[26314-26340]:ExpressionStatement[26391-26417]"
    }, {
      "left" : "return this.log().multiply(x).exp();",
      "right" : "return this.log().multiply(x).exp();",
      "info" : "ReturnStatement[26349-26385]:ReturnStatement[26426-26462]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26676-26728]:Block[26753-26805]"
    }, {
      "left" : "return this.log().multiply(x).exp();",
      "right" : "return this.log().multiply(x).exp();",
      "info" : "ReturnStatement[26686-26722]:ReturnStatement[26763-26799]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27843-28061]:Block[27920-28138]"
    }, {
      "left" : "if (isNaN)",
      "right" : "if (isNaN)",
      "info" : "IfStatement[27853-27899]:IfStatement[27930-27976]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27864-27899]:Block[27941-27976]"
    }, {
      "left" : "return NaN;",
      "right" : "return NaN;",
      "info" : "ReturnStatement[27878-27889]:ReturnStatement[27955-27966]"
    }, {
      "left" : "return createComplex(FastMath.sin(real) * MathUtils.cosh(imaginary),\n                             FastMath.cos(real) * MathUtils.sinh(imaginary));",
      "right" : "return createComplex(FastMath.sin(real) * MathUtils.cosh(imaginary),\n                             FastMath.cos(real) * MathUtils.sinh(imaginary));",
      "info" : "ReturnStatement[27909-28055]:ReturnStatement[27986-28132]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29201-29402]:Block[29278-29479]"
    }, {
      "left" : "if (isNaN)",
      "right" : "if (isNaN)",
      "info" : "IfStatement[29211-29257]:IfStatement[29288-29334]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29222-29257]:Block[29299-29334]"
    }, {
      "left" : "return NaN;",
      "right" : "return NaN;",
      "info" : "ReturnStatement[29236-29247]:ReturnStatement[29313-29324]"
    }, {
      "left" : "return createComplex(MathUtils.sinh(real) * FastMath.cos(imaginary),\n            MathUtils.cosh(real) * FastMath.sin(imaginary));",
      "right" : "return createComplex(MathUtils.sinh(real) * FastMath.cos(imaginary),\n            MathUtils.cosh(real) * FastMath.sin(imaginary));",
      "info" : "ReturnStatement[29267-29396]:ReturnStatement[29344-29473]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30780-31269]:Block[30857-31346]"
    }, {
      "left" : "if (isNaN)",
      "right" : "if (isNaN)",
      "info" : "IfStatement[30790-30836]:IfStatement[30867-30913]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30801-30836]:Block[30878-30913]"
    }, {
      "left" : "return NaN;",
      "right" : "return NaN;",
      "info" : "ReturnStatement[30815-30826]:ReturnStatement[30892-30903]"
    }, {
      "left" : "if (real == 0.0 && imaginary == 0.0)",
      "right" : "if (real == 0.0 && imaginary == 0.0)",
      "info" : "IfStatement[30846-30938]:IfStatement[30923-31015]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30883-30938]:Block[30960-31015]"
    }, {
      "left" : "return createComplex(0.0, 0.0);",
      "right" : "return createComplex(0.0, 0.0);",
      "info" : "ReturnStatement[30897-30928]:ReturnStatement[30974-31005]"
    }, {
      "left" : "double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);",
      "right" : "double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);",
      "info" : "VariableDeclarationStatement[30948-31009]:VariableDeclarationStatement[31025-31086]"
    }, {
      "left" : "if (real >= 0.0)",
      "right" : "if (real >= 0.0)",
      "info" : "IfStatement[31018-31263]:IfStatement[31095-31340]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31035-31106]:Block[31112-31183]"
    }, {
      "left" : "return createComplex(t, imaginary / (2.0 * t));",
      "right" : "return createComplex(t, imaginary / (2.0 * t));",
      "info" : "ReturnStatement[31049-31096]:ReturnStatement[31126-31173]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31112-31263]:Block[31189-31340]"
    }, {
      "left" : "return createComplex(FastMath.abs(imaginary) / (2.0 * t),\n                                 MathUtils.indicator(imaginary) * t);",
      "right" : "return createComplex(FastMath.abs(imaginary) / (2.0 * t),\n                                 MathUtils.indicator(imaginary) * t);",
      "info" : "ReturnStatement[31126-31253]:ReturnStatement[31203-31330]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31965-32049]:Block[32042-32126]"
    }, {
      "left" : "return createComplex(1.0, 0.0).subtract(this.multiply(this)).sqrt();",
      "right" : "return createComplex(1.0, 0.0).subtract(this.multiply(this)).sqrt();",
      "info" : "ReturnStatement[31975-32043]:ReturnStatement[32052-32120]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33244-33573]:Block[33321-33650]"
    }, {
      "left" : "if (isNaN)",
      "right" : "if (isNaN)",
      "info" : "IfStatement[33254-33300]:IfStatement[33331-33377]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33265-33300]:Block[33342-33377]"
    }, {
      "left" : "return NaN;",
      "right" : "return NaN;",
      "info" : "ReturnStatement[33279-33290]:ReturnStatement[33356-33367]"
    }, {
      "left" : "double real2 = 2.0 * real;",
      "right" : "double real2 = 2.0 * real;",
      "info" : "VariableDeclarationStatement[33310-33336]:VariableDeclarationStatement[33387-33413]"
    }, {
      "left" : "double imaginary2 = 2.0 * imaginary;",
      "right" : "double imaginary2 = 2.0 * imaginary;",
      "info" : "VariableDeclarationStatement[33345-33381]:VariableDeclarationStatement[33422-33458]"
    }, {
      "left" : "double d = FastMath.cos(real2) + MathUtils.cosh(imaginary2);",
      "right" : "double d = FastMath.cos(real2) + MathUtils.cosh(imaginary2);",
      "info" : "VariableDeclarationStatement[33390-33450]:VariableDeclarationStatement[33467-33527]"
    }, {
      "left" : "return createComplex(FastMath.sin(real2) / d,\n                             MathUtils.sinh(imaginary2) / d);",
      "right" : "return createComplex(FastMath.sin(real2) / d,\n                             MathUtils.sinh(imaginary2) / d);",
      "info" : "ReturnStatement[33460-33567]:ReturnStatement[33537-33644]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34776-35105]:Block[34853-35182]"
    }, {
      "left" : "if (isNaN)",
      "right" : "if (isNaN)",
      "info" : "IfStatement[34786-34832]:IfStatement[34863-34909]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34797-34832]:Block[34874-34909]"
    }, {
      "left" : "return NaN;",
      "right" : "return NaN;",
      "info" : "ReturnStatement[34811-34822]:ReturnStatement[34888-34899]"
    }, {
      "left" : "double real2 = 2.0 * real;",
      "right" : "double real2 = 2.0 * real;",
      "info" : "VariableDeclarationStatement[34842-34868]:VariableDeclarationStatement[34919-34945]"
    }, {
      "left" : "double imaginary2 = 2.0 * imaginary;",
      "right" : "double imaginary2 = 2.0 * imaginary;",
      "info" : "VariableDeclarationStatement[34877-34913]:VariableDeclarationStatement[34954-34990]"
    }, {
      "left" : "double d = MathUtils.cosh(real2) + FastMath.cos(imaginary2);",
      "right" : "double d = MathUtils.cosh(real2) + FastMath.cos(imaginary2);",
      "info" : "VariableDeclarationStatement[34922-34982]:VariableDeclarationStatement[34999-35059]"
    }, {
      "left" : "return createComplex(MathUtils.sinh(real2) / d,\n                             FastMath.sin(imaginary2) / d);",
      "right" : "return createComplex(MathUtils.sinh(real2) / d,\n                             FastMath.sin(imaginary2) / d);",
      "info" : "ReturnStatement[34992-35099]:ReturnStatement[35069-35176]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35967-36032]:Block[36044-36109]"
    }, {
      "left" : "return FastMath.atan2(getImaginary(), getReal());",
      "right" : "return FastMath.atan2(getImaginary(), getReal());",
      "info" : "ReturnStatement[35977-36026]:ReturnStatement[36054-36103]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36990-38124]:Block[37067-38201]"
    }, {
      "left" : "if (n <= 0)",
      "right" : "if (n <= 0)",
      "info" : "IfStatement[37001-37171]:IfStatement[37078-37248]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37013-37171]:Block[37090-37248]"
    }, {
      "left" : "throw new NotPositiveException(LocalizedFormats.CANNOT_COMPUTE_NTH_ROOT_FOR_NEGATIVE_N,\n                                           n);",
      "right" : "throw new NotPositiveException(LocalizedFormats.CANNOT_COMPUTE_NTH_ROOT_FOR_NEGATIVE_N,\n                                           n);",
      "info" : "ThrowStatement[37027-37161]:ThrowStatement[37104-37238]"
    }, {
      "left" : "final List<Complex> result = new ArrayList<Complex>();",
      "right" : "final List<Complex> result = new ArrayList<Complex>();",
      "info" : "VariableDeclarationStatement[37181-37235]:VariableDeclarationStatement[37258-37312]"
    }, {
      "left" : "if (isNaN)",
      "right" : "if (isNaN)",
      "info" : "IfStatement[37245-37323]:IfStatement[37322-37400]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37256-37323]:Block[37333-37400]"
    }, {
      "left" : "result.add(NaN);",
      "right" : "result.add(NaN);",
      "info" : "ExpressionStatement[37270-37286]:ExpressionStatement[37347-37363]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[37299-37313]:ReturnStatement[37376-37390]"
    }, {
      "left" : "if (isInfinite())",
      "right" : "if (isInfinite())",
      "info" : "IfStatement[37332-37417]:IfStatement[37409-37494]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37350-37417]:Block[37427-37494]"
    }, {
      "left" : "result.add(INF);",
      "right" : "result.add(INF);",
      "info" : "ExpressionStatement[37364-37380]:ExpressionStatement[37441-37457]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[37393-37407]:ReturnStatement[37470-37484]"
    }, {
      "left" : "final double nthRootOfAbs = FastMath.pow(abs(), 1.0 / n);",
      "right" : "final double nthRootOfAbs = FastMath.pow(abs(), 1.0 / n);",
      "info" : "VariableDeclarationStatement[37502-37559]:VariableDeclarationStatement[37579-37636]"
    }, {
      "left" : "final double nthPhi = getArgument() / n;",
      "right" : "final double nthPhi = getArgument() / n;",
      "info" : "VariableDeclarationStatement[37639-37679]:VariableDeclarationStatement[37716-37756]"
    }, {
      "left" : "final double slice = 2 * FastMath.PI / n;",
      "right" : "final double slice = 2 * FastMath.PI / n;",
      "info" : "VariableDeclarationStatement[37688-37729]:VariableDeclarationStatement[37765-37806]"
    }, {
      "left" : "double innerPart = nthPhi;",
      "right" : "double innerPart = nthPhi;",
      "info" : "VariableDeclarationStatement[37738-37764]:VariableDeclarationStatement[37815-37841]"
    }, {
      "left" : "for (int k = 0; k < n ; k++)",
      "right" : "for (int k = 0; k < n ; k++)",
      "info" : "ForStatement[37773-38094]:ForStatement[37850-38171]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37802-38094]:Block[37879-38171]"
    }, {
      "left" : "final double realPart = nthRootOfAbs *  FastMath.cos(innerPart);",
      "right" : "final double realPart = nthRootOfAbs *  FastMath.cos(innerPart);",
      "info" : "VariableDeclarationStatement[37842-37906]:VariableDeclarationStatement[37919-37983]"
    }, {
      "left" : "final double imaginaryPart = nthRootOfAbs *  FastMath.sin(innerPart);",
      "right" : "final double imaginaryPart = nthRootOfAbs *  FastMath.sin(innerPart);",
      "info" : "VariableDeclarationStatement[37919-37988]:VariableDeclarationStatement[37996-38065]"
    }, {
      "left" : "result.add(createComplex(realPart, imaginaryPart));",
      "right" : "result.add(createComplex(realPart, imaginaryPart));",
      "info" : "ExpressionStatement[38001-38052]:ExpressionStatement[38078-38129]"
    }, {
      "left" : "innerPart += slice;",
      "right" : "innerPart += slice;",
      "info" : "ExpressionStatement[38065-38084]:ExpressionStatement[38142-38161]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[38104-38118]:ReturnStatement[38181-38195]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38506-38566]:Block[38583-38643]"
    }, {
      "left" : "return new Complex(realPart, imaginaryPart);",
      "right" : "return new Complex(realPart, imaginaryPart);",
      "info" : "ReturnStatement[38516-38560]:ReturnStatement[38593-38637]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38878-39053]:Block[38955-39130]"
    }, {
      "left" : "if (Double.isNaN(realPart) ||\n            Double.isNaN(imaginaryPart))",
      "right" : "if (Double.isNaN(realPart) ||\n            Double.isNaN(imaginaryPart))",
      "info" : "IfStatement[38888-38994]:IfStatement[38965-39071]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38959-38994]:Block[39036-39071]"
    }, {
      "left" : "return NaN;",
      "right" : "return NaN;",
      "info" : "ReturnStatement[38973-38984]:ReturnStatement[39050-39061]"
    }, {
      "left" : "return new Complex(realPart, imaginaryPart);",
      "right" : "return new Complex(realPart, imaginaryPart);",
      "info" : "ReturnStatement[39003-39047]:ReturnStatement[39080-39124]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39255-39372]:Block[39332-39449]"
    }, {
      "left" : "if (Double.isNaN(realPart))",
      "right" : "if (Double.isNaN(realPart))",
      "info" : "IfStatement[39265-39328]:IfStatement[39342-39405]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39293-39328]:Block[39370-39405]"
    }, {
      "left" : "return NaN;",
      "right" : "return NaN;",
      "info" : "ReturnStatement[39307-39318]:ReturnStatement[39384-39395]"
    }, {
      "left" : "return new Complex(realPart);",
      "right" : "return new Complex(realPart);",
      "info" : "ReturnStatement[39337-39366]:ReturnStatement[39414-39443]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39681-39735]:Block[39758-39812]"
    }, {
      "left" : "return createComplex(real, imaginary);",
      "right" : "return createComplex(real, imaginary);",
      "info" : "ReturnStatement[39691-39729]:ReturnStatement[39768-39806]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39797-39847]:Block[39874-39924]"
    }, {
      "left" : "return ComplexField.getInstance();",
      "right" : "return ComplexField.getInstance();",
      "info" : "ReturnStatement[39807-39841]:ReturnStatement[39884-39918]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39917-39976]:Block[39994-40053]"
    }, {
      "left" : "return \"(\" + real + \", \" + imaginary + \")\";",
      "right" : "return \"(\" + real + \", \" + imaginary + \")\";",
      "info" : "ReturnStatement[39927-39970]:ReturnStatement[40004-40047]"
    } ]
  },
  "interFileMappings" : { }
}