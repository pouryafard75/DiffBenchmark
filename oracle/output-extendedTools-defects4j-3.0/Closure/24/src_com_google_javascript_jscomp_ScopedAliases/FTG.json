{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "ScopedAliases",
      "right" : "ScopedAliases",
      "info" : "TypeDeclaration[1223-13658]:TypeDeclaration[1223-13742]"
    }, {
      "left" : "static final String SCOPING_METHOD_NAME = \"goog.scope\";",
      "right" : "static final String SCOPING_METHOD_NAME = \"goog.scope\";",
      "info" : "FieldDeclaration[1572-1700]:FieldDeclaration[1572-1700]"
    }, {
      "left" : "private final AbstractCompiler compiler;",
      "right" : "private final AbstractCompiler compiler;",
      "info" : "FieldDeclaration[1704-1744]:FieldDeclaration[1704-1744]"
    }, {
      "left" : "private final PreprocessorSymbolTable preprocessorSymbolTable;",
      "right" : "private final PreprocessorSymbolTable preprocessorSymbolTable;",
      "info" : "FieldDeclaration[1747-1809]:FieldDeclaration[1747-1809]"
    }, {
      "left" : "private final AliasTransformationHandler transformationHandler;",
      "right" : "private final AliasTransformationHandler transformationHandler;",
      "info" : "FieldDeclaration[1812-1875]:FieldDeclaration[1812-1875]"
    }, {
      "left" : "static final DiagnosticType GOOG_SCOPE_USED_IMPROPERLY = DiagnosticType.error(\n      \"JSC_GOOG_SCOPE_USED_IMPROPERLY\",\n      \"The call to goog.scope must be alone in a single statement.\");",
      "right" : "static final DiagnosticType GOOG_SCOPE_USED_IMPROPERLY = DiagnosticType.error(\n      \"JSC_GOOG_SCOPE_USED_IMPROPERLY\",\n      \"The call to goog.scope must be alone in a single statement.\");",
      "info" : "FieldDeclaration[1891-2079]:FieldDeclaration[1891-2079]"
    }, {
      "left" : "static final DiagnosticType GOOG_SCOPE_HAS_BAD_PARAMETERS =\n      DiagnosticType.error(\n          \"JSC_GOOG_SCOPE_HAS_BAD_PARAMETERS\",\n          \"The call to goog.scope must take only a single parameter.  It must\" +\n              \" be an anonymous function that itself takes no parameters.\");",
      "right" : "static final DiagnosticType GOOG_SCOPE_HAS_BAD_PARAMETERS =\n      DiagnosticType.error(\n          \"JSC_GOOG_SCOPE_HAS_BAD_PARAMETERS\",\n          \"The call to goog.scope must take only a single parameter.  It must\" +\n              \" be an anonymous function that itself takes no parameters.\");",
      "info" : "FieldDeclaration[2083-2375]:FieldDeclaration[2083-2375]"
    }, {
      "left" : "static final DiagnosticType GOOG_SCOPE_REFERENCES_THIS = DiagnosticType.error(\n      \"JSC_GOOG_SCOPE_REFERENCES_THIS\",\n      \"The body of a goog.scope function cannot reference 'this'.\");",
      "right" : "static final DiagnosticType GOOG_SCOPE_REFERENCES_THIS = DiagnosticType.error(\n      \"JSC_GOOG_SCOPE_REFERENCES_THIS\",\n      \"The body of a goog.scope function cannot reference 'this'.\");",
      "info" : "FieldDeclaration[2379-2566]:FieldDeclaration[2379-2566]"
    }, {
      "left" : "static final DiagnosticType GOOG_SCOPE_USES_RETURN = DiagnosticType.error(\n      \"JSC_GOOG_SCOPE_USES_RETURN\",\n      \"The body of a goog.scope function cannot use 'return'.\");",
      "right" : "static final DiagnosticType GOOG_SCOPE_USES_RETURN = DiagnosticType.error(\n      \"JSC_GOOG_SCOPE_USES_RETURN\",\n      \"The body of a goog.scope function cannot use 'return'.\");",
      "info" : "FieldDeclaration[2570-2745]:FieldDeclaration[2570-2745]"
    }, {
      "left" : "static final DiagnosticType GOOG_SCOPE_USES_THROW = DiagnosticType.error(\n      \"JSC_GOOG_SCOPE_USES_THROW\",\n      \"The body of a goog.scope function cannot use 'throw'.\");",
      "right" : "static final DiagnosticType GOOG_SCOPE_USES_THROW = DiagnosticType.error(\n      \"JSC_GOOG_SCOPE_USES_THROW\",\n      \"The body of a goog.scope function cannot use 'throw'.\");",
      "info" : "FieldDeclaration[2749-2921]:FieldDeclaration[2749-2921]"
    }, {
      "left" : "static final DiagnosticType GOOG_SCOPE_ALIAS_REDEFINED = DiagnosticType.error(\n      \"JSC_GOOG_SCOPE_ALIAS_REDEFINED\",\n      \"The alias {0} is assigned a value more than once.\");",
      "right" : "static final DiagnosticType GOOG_SCOPE_ALIAS_REDEFINED = DiagnosticType.error(\n      \"JSC_GOOG_SCOPE_ALIAS_REDEFINED\",\n      \"The alias {0} is assigned a value more than once.\");",
      "info" : "FieldDeclaration[2925-3103]:FieldDeclaration[2925-3103]"
    }, {
      "left" : "static final DiagnosticType GOOG_SCOPE_NON_ALIAS_LOCAL = DiagnosticType.error(\n      \"JSC_GOOG_SCOPE_NON_ALIAS_LOCAL\",\n      \"The local variable {0} is in a goog.scope and is not an alias.\");",
      "right" : "static final DiagnosticType GOOG_SCOPE_NON_ALIAS_LOCAL = DiagnosticType.error(\n      \"JSC_GOOG_SCOPE_NON_ALIAS_LOCAL\",\n      \"The local variable {0} is in a goog.scope and is not an alias.\");",
      "info" : "FieldDeclaration[3107-3298]:FieldDeclaration[3107-3298]"
    }, {
      "left" : "ScopedAliases(AbstractCompiler compiler,\n      @Nullable PreprocessorSymbolTable preprocessorSymbolTable,\n      AliasTransformationHandler transformationHandler)",
      "right" : "ScopedAliases(AbstractCompiler compiler,\n      @Nullable PreprocessorSymbolTable preprocessorSymbolTable,\n      AliasTransformationHandler transformationHandler)",
      "info" : "MethodDeclaration[3302-3615]:MethodDeclaration[3302-3615]"
    }, {
      "left" : "public void process(Node externs, Node root)",
      "right" : "public void process(Node externs, Node root)",
      "info" : "MethodDeclaration[3619-3712]:MethodDeclaration[3619-3712]"
    }, {
      "left" : "public void hotSwapScript(Node root, Node originalRoot)",
      "right" : "public void hotSwapScript(Node root, Node originalRoot)",
      "info" : "MethodDeclaration[3716-5092]:MethodDeclaration[3716-5092]"
    }, {
      "left" : "AliasUsage",
      "right" : "AliasUsage",
      "info" : "TypeDeclaration[5096-5160]:TypeDeclaration[5096-5160]"
    }, {
      "left" : "public void applyAlias();",
      "right" : "public void applyAlias();",
      "info" : "MethodDeclaration[5131-5156]:MethodDeclaration[5131-5156]"
    }, {
      "left" : "AliasedNode",
      "right" : "AliasedNode",
      "info" : "TypeDeclaration[5164-5610]:TypeDeclaration[5164-5610]"
    }, {
      "left" : "private final Node aliasReference;",
      "right" : "private final Node aliasReference;",
      "info" : "FieldDeclaration[5218-5252]:FieldDeclaration[5218-5252]"
    }, {
      "left" : "private final Node aliasDefinition;",
      "right" : "private final Node aliasDefinition;",
      "info" : "FieldDeclaration[5258-5293]:FieldDeclaration[5258-5293]"
    }, {
      "left" : "AliasedNode(Node aliasReference, Node aliasDefinition)",
      "right" : "AliasedNode(Node aliasReference, Node aliasDefinition)",
      "info" : "MethodDeclaration[5299-5451]:MethodDeclaration[5299-5451]"
    }, {
      "left" : "public void applyAlias()",
      "right" : "public void applyAlias()",
      "info" : "MethodDeclaration[5457-5606]:MethodDeclaration[5457-5606]"
    }, {
      "left" : "AliasedTypeNode",
      "right" : "AliasedTypeNode",
      "info" : "TypeDeclaration[5614-6008]:TypeDeclaration[5614-6008]"
    }, {
      "left" : "private final Node aliasReference;",
      "right" : "private final Node aliasReference;",
      "info" : "FieldDeclaration[5672-5706]:FieldDeclaration[5672-5706]"
    }, {
      "left" : "private final String correctedType;",
      "right" : "private final String correctedType;",
      "info" : "FieldDeclaration[5712-5747]:FieldDeclaration[5712-5747]"
    }, {
      "left" : "AliasedTypeNode(Node aliasReference, String correctedType)",
      "right" : "AliasedTypeNode(Node aliasReference, String correctedType)",
      "info" : "MethodDeclaration[5753-5905]:MethodDeclaration[5753-5905]"
    }, {
      "left" : "public void applyAlias()",
      "right" : "public void applyAlias()",
      "info" : "MethodDeclaration[5911-6004]:MethodDeclaration[5911-6004]"
    }, {
      "left" : "Traversal",
      "right" : "Traversal",
      "info" : "TypeDeclaration[6013-13656]:TypeDeclaration[6013-13740]"
    }, {
      "left" : "private final List<Node> aliasDefinitionsInOrder = Lists.newArrayList();",
      "right" : "private final List<Node> aliasDefinitionsInOrder = Lists.newArrayList();",
      "info" : "FieldDeclaration[6227-6299]:FieldDeclaration[6227-6299]"
    }, {
      "left" : "private final List<Node> scopeCalls = Lists.newArrayList();",
      "right" : "private final List<Node> scopeCalls = Lists.newArrayList();",
      "info" : "FieldDeclaration[6305-6364]:FieldDeclaration[6305-6364]"
    }, {
      "left" : "private final List<AliasUsage> aliasUsages = Lists.newArrayList();",
      "right" : "private final List<AliasUsage> aliasUsages = Lists.newArrayList();",
      "info" : "FieldDeclaration[6370-6436]:FieldDeclaration[6370-6436]"
    }, {
      "left" : "private final Map<String, Var> aliases = Maps.newHashMap();",
      "right" : "private final Map<String, Var> aliases = Maps.newHashMap();",
      "info" : "FieldDeclaration[6499-6558]:FieldDeclaration[6499-6558]"
    }, {
      "left" : "private boolean hasErrors = false;",
      "right" : "private boolean hasErrors = false;",
      "info" : "FieldDeclaration[6564-6598]:FieldDeclaration[6564-6598]"
    }, {
      "left" : "private AliasTransformation transformation = null;",
      "right" : "private AliasTransformation transformation = null;",
      "info" : "FieldDeclaration[6604-6654]:FieldDeclaration[6604-6654]"
    }, {
      "left" : "Collection<Node> getAliasDefinitionsInOrder()",
      "right" : "Collection<Node> getAliasDefinitionsInOrder()",
      "info" : "MethodDeclaration[6660-6751]:MethodDeclaration[6660-6751]"
    }, {
      "left" : "private List<AliasUsage> getAliasUsages()",
      "right" : "private List<AliasUsage> getAliasUsages()",
      "info" : "MethodDeclaration[6757-6832]:MethodDeclaration[6757-6832]"
    }, {
      "left" : "List<Node> getScopeCalls()",
      "right" : "List<Node> getScopeCalls()",
      "info" : "MethodDeclaration[6838-6897]:MethodDeclaration[6838-6897]"
    }, {
      "left" : "boolean hasErrors()",
      "right" : "boolean hasErrors()",
      "info" : "MethodDeclaration[6903-6954]:MethodDeclaration[6903-6954]"
    }, {
      "left" : "private boolean isCallToScopeMethod(Node n)",
      "right" : "private boolean isCallToScopeMethod(Node n)",
      "info" : "MethodDeclaration[6960-7114]:MethodDeclaration[6960-7114]"
    }, {
      "left" : "public void enterScope(NodeTraversal t)",
      "right" : "public void enterScope(NodeTraversal t)",
      "info" : "MethodDeclaration[7120-7436]:MethodDeclaration[7120-7436]"
    }, {
      "left" : "public void exitScope(NodeTraversal t)",
      "right" : "public void exitScope(NodeTraversal t)",
      "info" : "MethodDeclaration[7442-7602]:MethodDeclaration[7442-7602]"
    }, {
      "left" : "public final boolean shouldTraverse(NodeTraversal t, Node n, Node parent)",
      "right" : "public final boolean shouldTraverse(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[7608-7951]:MethodDeclaration[7608-7951]"
    }, {
      "left" : "private SourcePosition<AliasTransformation> getSourceRegion(Node n)",
      "right" : "private SourcePosition<AliasTransformation> getSourceRegion(Node n)",
      "info" : "MethodDeclaration[7957-8580]:MethodDeclaration[7957-8580]"
    }, {
      "left" : "private void report(NodeTraversal t, Node n, DiagnosticType error,\n        String... arguments)",
      "right" : "private void report(NodeTraversal t, Node n, DiagnosticType error,\n        String... arguments)",
      "info" : "MethodDeclaration[8586-8770]:MethodDeclaration[8586-8770]"
    }, {
      "left" : "private void findAliases(NodeTraversal t)",
      "right" : "private void findAliases(NodeTraversal t)",
      "info" : "MethodDeclaration[8776-9755]:MethodDeclaration[8776-9839]"
    }, {
      "left" : "private void validateScopeCall(NodeTraversal t, Node n, Node parent)",
      "right" : "private void validateScopeCall(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[9761-10678]:MethodDeclaration[9845-10762]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[10684-12925]:MethodDeclaration[10768-13009]"
    }, {
      "left" : "private void fixTypeNode(Node typeNode)",
      "right" : "private void fixTypeNode(Node typeNode)",
      "info" : "MethodDeclaration[12931-13652]:MethodDeclaration[13015-13736]"
    } ],
    "mappings" : [
 {
      "left" : "HotSwapCompilerPass",
      "right" : "HotSwapCompilerPass",
      "info" : "SimpleType[1548-1567]:SimpleType[1548-1567]"
    }, {
      "left" : "ScopedAliases",
      "right" : "ScopedAliases",
      "info" : "SimpleName[3302-3315]:SimpleName[3302-3315]"
    }, {
      "left" : "AbstractCompiler compiler",
      "right" : "AbstractCompiler compiler",
      "info" : "SingleVariableDeclaration[3316-3341]:SingleVariableDeclaration[3316-3341]"
    }, {
      "left" : "@Nullable PreprocessorSymbolTable preprocessorSymbolTable",
      "right" : "@Nullable PreprocessorSymbolTable preprocessorSymbolTable",
      "info" : "SingleVariableDeclaration[3349-3406]:SingleVariableDeclaration[3349-3406]"
    }, {
      "left" : "AliasTransformationHandler transformationHandler",
      "right" : "AliasTransformationHandler transformationHandler",
      "info" : "SingleVariableDeclaration[3414-3462]:SingleVariableDeclaration[3414-3462]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3464-3615]:Block[3464-3615]"
    }, {
      "left" : "this.compiler = compiler;",
      "right" : "this.compiler = compiler;",
      "info" : "ExpressionStatement[3470-3495]:ExpressionStatement[3470-3495]"
    }, {
      "left" : "this.preprocessorSymbolTable = preprocessorSymbolTable;",
      "right" : "this.preprocessorSymbolTable = preprocessorSymbolTable;",
      "info" : "ExpressionStatement[3500-3555]:ExpressionStatement[3500-3555]"
    }, {
      "left" : "this.transformationHandler = transformationHandler;",
      "right" : "this.transformationHandler = transformationHandler;",
      "info" : "ExpressionStatement[3560-3611]:ExpressionStatement[3560-3611]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[3619-3628]:MarkerAnnotation[3619-3628]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3631-3637]:Modifier[3631-3637]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[3638-3642]:PrimitiveType[3638-3642]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[3643-3650]:SimpleName[3643-3650]"
    }, {
      "left" : "Node externs",
      "right" : "Node externs",
      "info" : "SingleVariableDeclaration[3651-3663]:SingleVariableDeclaration[3651-3663]"
    }, {
      "left" : "Node root",
      "right" : "Node root",
      "info" : "SingleVariableDeclaration[3665-3674]:SingleVariableDeclaration[3665-3674]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3676-3712]:Block[3676-3712]"
    }, {
      "left" : "hotSwapScript(root, null);",
      "right" : "hotSwapScript(root, null);",
      "info" : "ExpressionStatement[3682-3708]:ExpressionStatement[3682-3708]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[3716-3725]:MarkerAnnotation[3716-3725]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3728-3734]:Modifier[3728-3734]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[3735-3739]:PrimitiveType[3735-3739]"
    }, {
      "left" : "hotSwapScript",
      "right" : "hotSwapScript",
      "info" : "SimpleName[3740-3753]:SimpleName[3740-3753]"
    }, {
      "left" : "Node root",
      "right" : "Node root",
      "info" : "SingleVariableDeclaration[3754-3763]:SingleVariableDeclaration[3754-3763]"
    }, {
      "left" : "Node originalRoot",
      "right" : "Node originalRoot",
      "info" : "SingleVariableDeclaration[3765-3782]:SingleVariableDeclaration[3765-3782]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3784-5092]:Block[3784-5092]"
    }, {
      "left" : "Traversal traversal = new Traversal();",
      "right" : "Traversal traversal = new Traversal();",
      "info" : "VariableDeclarationStatement[3790-3828]:VariableDeclarationStatement[3790-3828]"
    }, {
      "left" : "NodeTraversal.traverse(compiler, root, traversal);",
      "right" : "NodeTraversal.traverse(compiler, root, traversal);",
      "info" : "ExpressionStatement[3833-3883]:ExpressionStatement[3833-3883]"
    }, {
      "left" : "if (!traversal.hasErrors())",
      "right" : "if (!traversal.hasErrors())",
      "info" : "IfStatement[3889-5088]:IfStatement[3889-5088]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3917-5088]:Block[3917-5088]"
    }, {
      "left" : "for (AliasUsage aliasUsage : traversal.getAliasUsages())",
      "right" : "for (AliasUsage aliasUsage : traversal.getAliasUsages())",
      "info" : "EnhancedForStatement[3954-4053]:EnhancedForStatement[3954-4053]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4011-4053]:Block[4011-4053]"
    }, {
      "left" : "aliasUsage.applyAlias();",
      "right" : "aliasUsage.applyAlias();",
      "info" : "ExpressionStatement[4021-4045]:ExpressionStatement[4021-4045]"
    }, {
      "left" : "for (Node aliasDefinition : traversal.getAliasDefinitionsInOrder())",
      "right" : "for (Node aliasDefinition : traversal.getAliasDefinitionsInOrder())",
      "info" : "EnhancedForStatement[4100-4416]:EnhancedForStatement[4100-4416]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4168-4416]:Block[4168-4416]"
    }, {
      "left" : "if (aliasDefinition.getParent().isVar() &&\n            aliasDefinition.getParent().hasOneChild())",
      "right" : "if (aliasDefinition.getParent().isVar() &&\n            aliasDefinition.getParent().hasOneChild())",
      "info" : "IfStatement[4178-4408]:IfStatement[4178-4408]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4276-4345]:Block[4276-4345]"
    }, {
      "left" : "aliasDefinition.getParent().detachFromParent();",
      "right" : "aliasDefinition.getParent().detachFromParent();",
      "info" : "ExpressionStatement[4288-4335]:ExpressionStatement[4288-4335]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4351-4408]:Block[4351-4408]"
    }, {
      "left" : "aliasDefinition.detachFromParent();",
      "right" : "aliasDefinition.detachFromParent();",
      "info" : "ExpressionStatement[4363-4398]:ExpressionStatement[4363-4398]"
    }, {
      "left" : "for (Node scopeCall : traversal.getScopeCalls())",
      "right" : "for (Node scopeCall : traversal.getScopeCalls())",
      "info" : "EnhancedForStatement[4454-4872]:EnhancedForStatement[4454-4872]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4503-4872]:Block[4503-4872]"
    }, {
      "left" : "Node expressionWithScopeCall = scopeCall.getParent();",
      "right" : "Node expressionWithScopeCall = scopeCall.getParent();",
      "info" : "VariableDeclarationStatement[4513-4566]:VariableDeclarationStatement[4513-4566]"
    }, {
      "left" : "Node scopeClosureBlock = scopeCall.getLastChild().getLastChild();",
      "right" : "Node scopeClosureBlock = scopeCall.getLastChild().getLastChild();",
      "info" : "VariableDeclarationStatement[4575-4640]:VariableDeclarationStatement[4575-4640]"
    }, {
      "left" : "scopeClosureBlock.detachFromParent();",
      "right" : "scopeClosureBlock.detachFromParent();",
      "info" : "ExpressionStatement[4649-4686]:ExpressionStatement[4649-4686]"
    }, {
      "left" : "expressionWithScopeCall.getParent().replaceChild(\n            expressionWithScopeCall,\n            scopeClosureBlock);",
      "right" : "expressionWithScopeCall.getParent().replaceChild(\n            expressionWithScopeCall,\n            scopeClosureBlock);",
      "info" : "ExpressionStatement[4695-4813]:ExpressionStatement[4695-4813]"
    }, {
      "left" : "NodeUtil.tryMergeBlock(scopeClosureBlock);",
      "right" : "NodeUtil.tryMergeBlock(scopeClosureBlock);",
      "info" : "ExpressionStatement[4822-4864]:ExpressionStatement[4822-4864]"
    }, {
      "left" : "if (traversal.getAliasUsages().size() > 0 ||\n          traversal.getAliasDefinitionsInOrder().size() > 0 ||\n          traversal.getScopeCalls().size() > 0)",
      "right" : "if (traversal.getAliasUsages().size() > 0 ||\n          traversal.getAliasDefinitionsInOrder().size() > 0 ||\n          traversal.getScopeCalls().size() > 0)",
      "info" : "IfStatement[4880-5082]:IfStatement[4880-5082]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5036-5082]:Block[5036-5082]"
    }, {
      "left" : "compiler.reportCodeChange();",
      "right" : "compiler.reportCodeChange();",
      "info" : "ExpressionStatement[5046-5074]:ExpressionStatement[5046-5074]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[5096-5103]:Modifier[5096-5103]"
    }, {
      "left" : "interface",
      "right" : "interface",
      "info" : "TYPE_DECLARATION_KIND[5104-5113]:TYPE_DECLARATION_KIND[5104-5113]"
    }, {
      "left" : "AliasUsage",
      "right" : "AliasUsage",
      "info" : "SimpleName[5114-5124]:SimpleName[5114-5124]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5131-5137]:Modifier[5131-5137]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[5138-5142]:PrimitiveType[5138-5142]"
    }, {
      "left" : "applyAlias",
      "right" : "applyAlias",
      "info" : "SimpleName[5143-5153]:SimpleName[5143-5153]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[5164-5171]:Modifier[5164-5171]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[5172-5177]:TYPE_DECLARATION_KIND[5172-5177]"
    }, {
      "left" : "AliasedNode",
      "right" : "AliasedNode",
      "info" : "SimpleName[5178-5189]:SimpleName[5178-5189]"
    }, {
      "left" : "AliasUsage",
      "right" : "AliasUsage",
      "info" : "SimpleType[5201-5211]:SimpleType[5201-5211]"
    }, {
      "left" : "AliasedNode",
      "right" : "AliasedNode",
      "info" : "SimpleName[5299-5310]:SimpleName[5299-5310]"
    }, {
      "left" : "Node aliasReference",
      "right" : "Node aliasReference",
      "info" : "SingleVariableDeclaration[5311-5330]:SingleVariableDeclaration[5311-5330]"
    }, {
      "left" : "Node aliasDefinition",
      "right" : "Node aliasDefinition",
      "info" : "SingleVariableDeclaration[5332-5352]:SingleVariableDeclaration[5332-5352]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5354-5451]:Block[5354-5451]"
    }, {
      "left" : "this.aliasReference = aliasReference;",
      "right" : "this.aliasReference = aliasReference;",
      "info" : "ExpressionStatement[5362-5399]:ExpressionStatement[5362-5399]"
    }, {
      "left" : "this.aliasDefinition = aliasDefinition;",
      "right" : "this.aliasDefinition = aliasDefinition;",
      "info" : "ExpressionStatement[5406-5445]:ExpressionStatement[5406-5445]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[5457-5466]:MarkerAnnotation[5457-5466]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5471-5477]:Modifier[5471-5477]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[5478-5482]:PrimitiveType[5478-5482]"
    }, {
      "left" : "applyAlias",
      "right" : "applyAlias",
      "info" : "SimpleName[5483-5493]:SimpleName[5483-5493]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5496-5606]:Block[5496-5606]"
    }, {
      "left" : "aliasReference.getParent().replaceChild(\n          aliasReference, aliasDefinition.cloneTree());",
      "right" : "aliasReference.getParent().replaceChild(\n          aliasReference, aliasDefinition.cloneTree());",
      "info" : "ExpressionStatement[5504-5600]:ExpressionStatement[5504-5600]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[5614-5621]:Modifier[5614-5621]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[5622-5627]:TYPE_DECLARATION_KIND[5622-5627]"
    }, {
      "left" : "AliasedTypeNode",
      "right" : "AliasedTypeNode",
      "info" : "SimpleName[5628-5643]:SimpleName[5628-5643]"
    }, {
      "left" : "AliasUsage",
      "right" : "AliasUsage",
      "info" : "SimpleType[5655-5665]:SimpleType[5655-5665]"
    }, {
      "left" : "AliasedTypeNode",
      "right" : "AliasedTypeNode",
      "info" : "SimpleName[5753-5768]:SimpleName[5753-5768]"
    }, {
      "left" : "Node aliasReference",
      "right" : "Node aliasReference",
      "info" : "SingleVariableDeclaration[5769-5788]:SingleVariableDeclaration[5769-5788]"
    }, {
      "left" : "String correctedType",
      "right" : "String correctedType",
      "info" : "SingleVariableDeclaration[5790-5810]:SingleVariableDeclaration[5790-5810]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5812-5905]:Block[5812-5905]"
    }, {
      "left" : "this.aliasReference = aliasReference;",
      "right" : "this.aliasReference = aliasReference;",
      "info" : "ExpressionStatement[5820-5857]:ExpressionStatement[5820-5857]"
    }, {
      "left" : "this.correctedType = correctedType;",
      "right" : "this.correctedType = correctedType;",
      "info" : "ExpressionStatement[5864-5899]:ExpressionStatement[5864-5899]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[5911-5920]:MarkerAnnotation[5911-5920]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5925-5931]:Modifier[5925-5931]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[5932-5936]:PrimitiveType[5932-5936]"
    }, {
      "left" : "applyAlias",
      "right" : "applyAlias",
      "info" : "SimpleName[5937-5947]:SimpleName[5937-5947]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5950-6004]:Block[5950-6004]"
    }, {
      "left" : "aliasReference.setString(correctedType);",
      "right" : "aliasReference.setString(correctedType);",
      "info" : "ExpressionStatement[5958-5998]:ExpressionStatement[5958-5998]"
    }, {
      "left" : "NodeTraversal.ScopedCallback",
      "right" : "NodeTraversal.ScopedCallback",
      "info" : "SimpleType[6048-6076]:SimpleType[6048-6076]"
    }, {
      "left" : "Collection<Node>",
      "right" : "Collection<Node>",
      "info" : "ParameterizedType[6660-6676]:ParameterizedType[6660-6676]"
    }, {
      "left" : "getAliasDefinitionsInOrder",
      "right" : "getAliasDefinitionsInOrder",
      "info" : "SimpleName[6677-6703]:SimpleName[6677-6703]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6706-6751]:Block[6706-6751]"
    }, {
      "left" : "return aliasDefinitionsInOrder;",
      "right" : "return aliasDefinitionsInOrder;",
      "info" : "ReturnStatement[6714-6745]:ReturnStatement[6714-6745]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[6757-6764]:Modifier[6757-6764]"
    }, {
      "left" : "List<AliasUsage>",
      "right" : "List<AliasUsage>",
      "info" : "ParameterizedType[6765-6781]:ParameterizedType[6765-6781]"
    }, {
      "left" : "getAliasUsages",
      "right" : "getAliasUsages",
      "info" : "SimpleName[6782-6796]:SimpleName[6782-6796]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6799-6832]:Block[6799-6832]"
    }, {
      "left" : "return aliasUsages;",
      "right" : "return aliasUsages;",
      "info" : "ReturnStatement[6807-6826]:ReturnStatement[6807-6826]"
    }, {
      "left" : "List<Node>",
      "right" : "List<Node>",
      "info" : "ParameterizedType[6838-6848]:ParameterizedType[6838-6848]"
    }, {
      "left" : "getScopeCalls",
      "right" : "getScopeCalls",
      "info" : "SimpleName[6849-6862]:SimpleName[6849-6862]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6865-6897]:Block[6865-6897]"
    }, {
      "left" : "return scopeCalls;",
      "right" : "return scopeCalls;",
      "info" : "ReturnStatement[6873-6891]:ReturnStatement[6873-6891]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[6903-6910]:PrimitiveType[6903-6910]"
    }, {
      "left" : "hasErrors",
      "right" : "hasErrors",
      "info" : "SimpleName[6911-6920]:SimpleName[6911-6920]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6923-6954]:Block[6923-6954]"
    }, {
      "left" : "return hasErrors;",
      "right" : "return hasErrors;",
      "info" : "ReturnStatement[6931-6948]:ReturnStatement[6931-6948]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[6960-6967]:Modifier[6960-6967]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[6968-6975]:PrimitiveType[6968-6975]"
    }, {
      "left" : "isCallToScopeMethod",
      "right" : "isCallToScopeMethod",
      "info" : "SimpleName[6976-6995]:SimpleName[6976-6995]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[6996-7002]:SingleVariableDeclaration[6996-7002]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7004-7114]:Block[7004-7114]"
    }, {
      "left" : "return n.isCall() &&\n          SCOPING_METHOD_NAME.equals(n.getFirstChild().getQualifiedName());",
      "right" : "return n.isCall() &&\n          SCOPING_METHOD_NAME.equals(n.getFirstChild().getQualifiedName());",
      "info" : "ReturnStatement[7012-7108]:ReturnStatement[7012-7108]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[7120-7129]:MarkerAnnotation[7120-7129]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7134-7140]:Modifier[7134-7140]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7141-7145]:PrimitiveType[7141-7145]"
    }, {
      "left" : "enterScope",
      "right" : "enterScope",
      "info" : "SimpleName[7146-7156]:SimpleName[7146-7156]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[7157-7172]:SingleVariableDeclaration[7157-7172]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7174-7436]:Block[7174-7436]"
    }, {
      "left" : "Node n = t.getCurrentNode().getParent();",
      "right" : "Node n = t.getCurrentNode().getParent();",
      "info" : "VariableDeclarationStatement[7182-7222]:VariableDeclarationStatement[7182-7222]"
    }, {
      "left" : "if (n != null && isCallToScopeMethod(n))",
      "right" : "if (n != null && isCallToScopeMethod(n))",
      "info" : "IfStatement[7229-7430]:IfStatement[7229-7430]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7270-7430]:Block[7270-7430]"
    }, {
      "left" : "transformation = transformationHandler.logAliasTransformation(\n            n.getSourceFileName(), getSourceRegion(n));",
      "right" : "transformation = transformationHandler.logAliasTransformation(\n            n.getSourceFileName(), getSourceRegion(n));",
      "info" : "ExpressionStatement[7280-7398]:ExpressionStatement[7280-7398]"
    }, {
      "left" : "findAliases(t);",
      "right" : "findAliases(t);",
      "info" : "ExpressionStatement[7407-7422]:ExpressionStatement[7407-7422]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[7442-7451]:MarkerAnnotation[7442-7451]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7456-7462]:Modifier[7456-7462]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7463-7467]:PrimitiveType[7463-7467]"
    }, {
      "left" : "exitScope",
      "right" : "exitScope",
      "info" : "SimpleName[7468-7477]:SimpleName[7468-7477]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[7478-7493]:SingleVariableDeclaration[7478-7493]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7495-7602]:Block[7495-7602]"
    }, {
      "left" : "if (t.getScopeDepth() == 2)",
      "right" : "if (t.getScopeDepth() == 2)",
      "info" : "IfStatement[7503-7596]:IfStatement[7503-7596]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7531-7596]:Block[7531-7596]"
    }, {
      "left" : "aliases.clear();",
      "right" : "aliases.clear();",
      "info" : "ExpressionStatement[7541-7557]:ExpressionStatement[7541-7557]"
    }, {
      "left" : "transformation = null;",
      "right" : "transformation = null;",
      "info" : "ExpressionStatement[7566-7588]:ExpressionStatement[7566-7588]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[7608-7617]:MarkerAnnotation[7608-7617]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7622-7628]:Modifier[7622-7628]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[7629-7634]:Modifier[7629-7634]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[7635-7642]:PrimitiveType[7635-7642]"
    }, {
      "left" : "shouldTraverse",
      "right" : "shouldTraverse",
      "info" : "SimpleName[7643-7657]:SimpleName[7643-7657]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[7658-7673]:SingleVariableDeclaration[7658-7673]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[7675-7681]:SingleVariableDeclaration[7675-7681]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[7683-7694]:SingleVariableDeclaration[7683-7694]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7696-7951]:Block[7696-7951]"
    }, {
      "left" : "if (n.isFunction() && t.inGlobalScope())",
      "right" : "if (n.isFunction() && t.inGlobalScope())",
      "info" : "IfStatement[7704-7926]:IfStatement[7704-7926]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7745-7926]:Block[7745-7926]"
    }, {
      "left" : "if (parent == null || !isCallToScopeMethod(parent))",
      "right" : "if (parent == null || !isCallToScopeMethod(parent))",
      "info" : "IfStatement[7831-7918]:IfStatement[7831-7918]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7883-7918]:Block[7883-7918]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[7895-7908]:ReturnStatement[7895-7908]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[7933-7945]:ReturnStatement[7933-7945]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[7957-7964]:Modifier[7957-7964]"
    }, {
      "left" : "SourcePosition<AliasTransformation>",
      "right" : "SourcePosition<AliasTransformation>",
      "info" : "ParameterizedType[7965-8000]:ParameterizedType[7965-8000]"
    }, {
      "left" : "getSourceRegion",
      "right" : "getSourceRegion",
      "info" : "SimpleName[8001-8016]:SimpleName[8001-8016]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[8017-8023]:SingleVariableDeclaration[8017-8023]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8025-8580]:Block[8025-8580]"
    }, {
      "left" : "Node testNode = n;",
      "right" : "Node testNode = n;",
      "info" : "VariableDeclarationStatement[8033-8051]:VariableDeclarationStatement[8033-8051]"
    }, {
      "left" : "Node next = null;",
      "right" : "Node next = null;",
      "info" : "VariableDeclarationStatement[8058-8075]:VariableDeclarationStatement[8058-8075]"
    }, {
      "left" : "for (; next != null || testNode.isScript())",
      "right" : "for (; next != null || testNode.isScript())",
      "info" : "ForStatement[8082-8212]:ForStatement[8082-8212]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8127-8212]:Block[8127-8212]"
    }, {
      "left" : "next = testNode.getNext();",
      "right" : "next = testNode.getNext();",
      "info" : "ExpressionStatement[8137-8163]:ExpressionStatement[8137-8163]"
    }, {
      "left" : "testNode = testNode.getParent();",
      "right" : "testNode = testNode.getParent();",
      "info" : "ExpressionStatement[8172-8204]:ExpressionStatement[8172-8204]"
    }, {
      "left" : "int endLine = next == null ? Integer.MAX_VALUE : next.getLineno();",
      "right" : "int endLine = next == null ? Integer.MAX_VALUE : next.getLineno();",
      "info" : "VariableDeclarationStatement[8220-8286]:VariableDeclarationStatement[8220-8286]"
    }, {
      "left" : "int endChar = next == null ? Integer.MAX_VALUE : next.getCharno();",
      "right" : "int endChar = next == null ? Integer.MAX_VALUE : next.getCharno();",
      "info" : "VariableDeclarationStatement[8293-8359]:VariableDeclarationStatement[8293-8359]"
    }, {
      "left" : "SourcePosition<AliasTransformation> pos =\n          new SourcePosition<AliasTransformation>() {};",
      "right" : "SourcePosition<AliasTransformation> pos =\n          new SourcePosition<AliasTransformation>() {};",
      "info" : "VariableDeclarationStatement[8366-8463]:VariableDeclarationStatement[8366-8463]"
    }, {
      "left" : "pos.setPositionInformation(\n          n.getLineno(), n.getCharno(), endLine, endChar);",
      "right" : "pos.setPositionInformation(\n          n.getLineno(), n.getCharno(), endLine, endChar);",
      "info" : "ExpressionStatement[8470-8556]:ExpressionStatement[8470-8556]"
    }, {
      "left" : "return pos;",
      "right" : "return pos;",
      "info" : "ReturnStatement[8563-8574]:ReturnStatement[8563-8574]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[8586-8593]:Modifier[8586-8593]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[8594-8598]:PrimitiveType[8594-8598]"
    }, {
      "left" : "report",
      "right" : "report",
      "info" : "SimpleName[8599-8605]:SimpleName[8599-8605]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[8606-8621]:SingleVariableDeclaration[8606-8621]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[8623-8629]:SingleVariableDeclaration[8623-8629]"
    }, {
      "left" : "DiagnosticType error",
      "right" : "DiagnosticType error",
      "info" : "SingleVariableDeclaration[8631-8651]:SingleVariableDeclaration[8631-8651]"
    }, {
      "left" : "String... arguments",
      "right" : "String... arguments",
      "info" : "SingleVariableDeclaration[8661-8680]:SingleVariableDeclaration[8661-8680]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8682-8770]:Block[8682-8770]"
    }, {
      "left" : "compiler.report(t.makeError(n, error, arguments));",
      "right" : "compiler.report(t.makeError(n, error, arguments));",
      "info" : "ExpressionStatement[8690-8740]:ExpressionStatement[8690-8740]"
    }, {
      "left" : "hasErrors = true;",
      "right" : "hasErrors = true;",
      "info" : "ExpressionStatement[8747-8764]:ExpressionStatement[8747-8764]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[8776-8783]:Modifier[8776-8783]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[8784-8788]:PrimitiveType[8784-8788]"
    }, {
      "left" : "findAliases",
      "right" : "findAliases",
      "info" : "SimpleName[8789-8800]:SimpleName[8789-8800]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[8801-8816]:SingleVariableDeclaration[8801-8816]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8818-9755]:Block[8818-9839]"
    }, {
      "left" : "Scope scope = t.getScope();",
      "right" : "Scope scope = t.getScope();",
      "info" : "VariableDeclarationStatement[8826-8853]:VariableDeclarationStatement[8826-8853]"
    }, {
      "left" : "for (Var v : scope.getVarIterable())",
      "right" : "for (Var v : scope.getVarIterable())",
      "info" : "EnhancedForStatement[8860-9749]:EnhancedForStatement[8860-9833]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8897-9749]:Block[8897-9833]"
    }, {
      "left" : "Node n = v.getNode();",
      "right" : "Node n = v.getNode();",
      "info" : "VariableDeclarationStatement[8907-8928]:VariableDeclarationStatement[8907-8928]"
    }, {
      "left" : "int type = n.getType();",
      "right" : "int type = n.getType();",
      "info" : "VariableDeclarationStatement[8937-8960]:VariableDeclarationStatement[8937-8960]"
    }, {
      "left" : "Node parent = n.getParent();",
      "right" : "Node parent = n.getParent();",
      "info" : "VariableDeclarationStatement[8969-8997]:VariableDeclarationStatement[8969-8997]"
    }, {
      "left" : "parent.isVar()",
      "right" : "parent.isVar()",
      "info" : "MethodInvocation[9010-9024]:MethodInvocation[9010-9024]"
    }, {
      "left" : "if (n.hasChildren() && n.getFirstChild().isQualifiedName())",
      "right" : "if (parent.isVar() &&\n            n.hasChildren() && n.getFirstChild().isQualifiedName())",
      "info" : "IfStatement[9038-9731]:IfStatement[9006-9825]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9098-9576]:Block[9096-9381]"
    }, {
      "left" : "String name = n.getString();",
      "right" : "String name = n.getString();",
      "info" : "VariableDeclarationStatement[9110-9138]:VariableDeclarationStatement[9108-9136]"
    }, {
      "left" : "Var aliasVar = scope.getVar(name);",
      "right" : "Var aliasVar = scope.getVar(name);",
      "info" : "VariableDeclarationStatement[9149-9183]:VariableDeclarationStatement[9147-9181]"
    }, {
      "left" : "aliases.put(name, aliasVar);",
      "right" : "aliases.put(name, aliasVar);",
      "info" : "ExpressionStatement[9194-9222]:ExpressionStatement[9192-9220]"
    }, {
      "left" : "String qualifiedName =\n              aliasVar.getInitialValue().getQualifiedName();",
      "right" : "String qualifiedName =\n              aliasVar.getInitialValue().getQualifiedName();",
      "info" : "VariableDeclarationStatement[9234-9317]:VariableDeclarationStatement[9232-9315]"
    }, {
      "left" : "transformation.addAlias(name, qualifiedName);",
      "right" : "transformation.addAlias(name, qualifiedName);",
      "info" : "ExpressionStatement[9328-9373]:ExpressionStatement[9326-9371]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9582-9731]:Block[9676-9825]"
    }, {
      "left" : "report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());",
      "right" : "report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());",
      "info" : "ExpressionStatement[9665-9721]:ExpressionStatement[9759-9815]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[9761-9768]:Modifier[9845-9852]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[9769-9773]:PrimitiveType[9853-9857]"
    }, {
      "left" : "validateScopeCall",
      "right" : "validateScopeCall",
      "info" : "SimpleName[9774-9791]:SimpleName[9858-9875]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[9792-9807]:SingleVariableDeclaration[9876-9891]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[9809-9815]:SingleVariableDeclaration[9893-9899]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[9817-9828]:SingleVariableDeclaration[9901-9912]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9830-10678]:Block[9914-10762]"
    }, {
      "left" : "if (preprocessorSymbolTable != null)",
      "right" : "if (preprocessorSymbolTable != null)",
      "info" : "IfStatement[9838-9949]:IfStatement[9922-10033]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9875-9949]:Block[9959-10033]"
    }, {
      "left" : "preprocessorSymbolTable.addReference(n.getFirstChild());",
      "right" : "preprocessorSymbolTable.addReference(n.getFirstChild());",
      "info" : "ExpressionStatement[9885-9941]:ExpressionStatement[9969-10025]"
    }, {
      "left" : "if (!parent.isExprResult())",
      "right" : "if (!parent.isExprResult())",
      "info" : "IfStatement[9956-10043]:IfStatement[10040-10127]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9984-10043]:Block[10068-10127]"
    }, {
      "left" : "report(t, n, GOOG_SCOPE_USED_IMPROPERLY);",
      "right" : "report(t, n, GOOG_SCOPE_USED_IMPROPERLY);",
      "info" : "ExpressionStatement[9994-10035]:ExpressionStatement[10078-10119]"
    }, {
      "left" : "if (n.getChildCount() != 2)",
      "right" : "if (n.getChildCount() != 2)",
      "info" : "IfStatement[10050-10672]:IfStatement[10134-10756]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10078-10292]:Block[10162-10376]"
    }, {
      "left" : "report(t, n, GOOG_SCOPE_HAS_BAD_PARAMETERS);",
      "right" : "report(t, n, GOOG_SCOPE_HAS_BAD_PARAMETERS);",
      "info" : "ExpressionStatement[10240-10284]:ExpressionStatement[10324-10368]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10298-10672]:Block[10382-10756]"
    }, {
      "left" : "Node anonymousFnNode = n.getChildAtIndex(1);",
      "right" : "Node anonymousFnNode = n.getChildAtIndex(1);",
      "info" : "VariableDeclarationStatement[10308-10352]:VariableDeclarationStatement[10392-10436]"
    }, {
      "left" : "if (!anonymousFnNode.isFunction() ||\n            NodeUtil.getFunctionName(anonymousFnNode) != null ||\n            NodeUtil.getFunctionParameters(anonymousFnNode).hasChildren())",
      "right" : "if (!anonymousFnNode.isFunction() ||\n            NodeUtil.getFunctionName(anonymousFnNode) != null ||\n            NodeUtil.getFunctionParameters(anonymousFnNode).hasChildren())",
      "info" : "IfStatement[10361-10664]:IfStatement[10445-10748]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10538-10618]:Block[10622-10702]"
    }, {
      "left" : "report(t, anonymousFnNode, GOOG_SCOPE_HAS_BAD_PARAMETERS);",
      "right" : "report(t, anonymousFnNode, GOOG_SCOPE_HAS_BAD_PARAMETERS);",
      "info" : "ExpressionStatement[10550-10608]:ExpressionStatement[10634-10692]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10624-10664]:Block[10708-10748]"
    }, {
      "left" : "scopeCalls.add(n);",
      "right" : "scopeCalls.add(n);",
      "info" : "ExpressionStatement[10636-10654]:ExpressionStatement[10720-10738]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[10684-10693]:MarkerAnnotation[10768-10777]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10698-10704]:Modifier[10782-10788]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[10705-10709]:PrimitiveType[10789-10793]"
    }, {
      "left" : "visit",
      "right" : "visit",
      "info" : "SimpleName[10710-10715]:SimpleName[10794-10799]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[10716-10731]:SingleVariableDeclaration[10800-10815]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[10733-10739]:SingleVariableDeclaration[10817-10823]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[10741-10752]:SingleVariableDeclaration[10825-10836]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10754-12925]:Block[10838-13009]"
    }, {
      "left" : "if (isCallToScopeMethod(n))",
      "right" : "if (isCallToScopeMethod(n))",
      "info" : "IfStatement[10762-10847]:IfStatement[10846-10931]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10790-10847]:Block[10874-10931]"
    }, {
      "left" : "validateScopeCall(t, n, n.getParent());",
      "right" : "validateScopeCall(t, n, n.getParent());",
      "info" : "ExpressionStatement[10800-10839]:ExpressionStatement[10884-10923]"
    }, {
      "left" : "if (t.getScopeDepth() < 2)",
      "right" : "if (t.getScopeDepth() < 2)",
      "info" : "IfStatement[10855-10907]:IfStatement[10939-10991]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10882-10907]:Block[10966-10991]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[10892-10899]:ReturnStatement[10976-10983]"
    }, {
      "left" : "int type = n.getType();",
      "right" : "int type = n.getType();",
      "info" : "VariableDeclarationStatement[10915-10938]:VariableDeclarationStatement[10999-11022]"
    }, {
      "left" : "Var aliasVar = null;",
      "right" : "Var aliasVar = null;",
      "info" : "VariableDeclarationStatement[10945-10965]:VariableDeclarationStatement[11029-11049]"
    }, {
      "left" : "if (type == Token.NAME)",
      "right" : "if (type == Token.NAME)",
      "info" : "IfStatement[10972-11215]:IfStatement[11056-11299]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10996-11215]:Block[11080-11299]"
    }, {
      "left" : "String name = n.getString();",
      "right" : "String name = n.getString();",
      "info" : "VariableDeclarationStatement[11006-11034]:VariableDeclarationStatement[11090-11118]"
    }, {
      "left" : "Var lexicalVar = t.getScope().getVar(n.getString());",
      "right" : "Var lexicalVar = t.getScope().getVar(n.getString());",
      "info" : "VariableDeclarationStatement[11043-11095]:VariableDeclarationStatement[11127-11179]"
    }, {
      "left" : "if (lexicalVar != null && lexicalVar == aliases.get(name))",
      "right" : "if (lexicalVar != null && lexicalVar == aliases.get(name))",
      "info" : "IfStatement[11104-11207]:IfStatement[11188-11291]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11163-11207]:Block[11247-11291]"
    }, {
      "left" : "aliasVar = lexicalVar;",
      "right" : "aliasVar = lexicalVar;",
      "info" : "ExpressionStatement[11175-11197]:ExpressionStatement[11259-11281]"
    }, {
      "left" : "if (t.getScopeDepth() == 2)",
      "right" : "if (t.getScopeDepth() == 2)",
      "info" : "IfStatement[11280-11961]:IfStatement[11364-12045]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11308-11961]:Block[11392-12045]"
    }, {
      "left" : "if (aliasVar != null && NodeUtil.isLValue(n))",
      "right" : "if (aliasVar != null && NodeUtil.isLValue(n))",
      "info" : "IfStatement[11318-11676]:IfStatement[11402-11760]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11364-11676]:Block[11448-11760]"
    }, {
      "left" : "if (aliasVar.getNode() == n)",
      "right" : "if (aliasVar.getNode() == n)",
      "info" : "IfStatement[11376-11666]:IfStatement[11460-11750]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11405-11578]:Block[11489-11662]"
    }, {
      "left" : "aliasDefinitionsInOrder.add(n);",
      "right" : "aliasDefinitionsInOrder.add(n);",
      "info" : "ExpressionStatement[11419-11450]:ExpressionStatement[11503-11534]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[11559-11566]:ReturnStatement[11643-11650]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11584-11666]:Block[11668-11750]"
    }, {
      "left" : "report(t, n, GOOG_SCOPE_ALIAS_REDEFINED, n.getString());",
      "right" : "report(t, n, GOOG_SCOPE_ALIAS_REDEFINED, n.getString());",
      "info" : "ExpressionStatement[11598-11654]:ExpressionStatement[11682-11738]"
    }, {
      "left" : "if (type == Token.RETURN)",
      "right" : "if (type == Token.RETURN)",
      "info" : "IfStatement[11686-11953]:IfStatement[11770-12037]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11712-11771]:Block[11796-11855]"
    }, {
      "left" : "report(t, n, GOOG_SCOPE_USES_RETURN);",
      "right" : "report(t, n, GOOG_SCOPE_USES_RETURN);",
      "info" : "ExpressionStatement[11724-11761]:ExpressionStatement[11808-11845]"
    }, {
      "left" : "if (type == Token.THIS)",
      "right" : "if (type == Token.THIS)",
      "info" : "IfStatement[11777-11953]:IfStatement[11861-12037]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11801-11864]:Block[11885-11948]"
    }, {
      "left" : "report(t, n, GOOG_SCOPE_REFERENCES_THIS);",
      "right" : "report(t, n, GOOG_SCOPE_REFERENCES_THIS);",
      "info" : "ExpressionStatement[11813-11854]:ExpressionStatement[11897-11938]"
    }, {
      "left" : "if (type == Token.THROW)",
      "right" : "if (type == Token.THROW)",
      "info" : "IfStatement[11870-11953]:IfStatement[11954-12037]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11895-11953]:Block[11979-12037]"
    }, {
      "left" : "report(t, n, GOOG_SCOPE_USES_THROW);",
      "right" : "report(t, n, GOOG_SCOPE_USES_THROW);",
      "info" : "ExpressionStatement[11907-11943]:ExpressionStatement[11991-12027]"
    }, {
      "left" : "if (t.getScopeDepth() >= 2)",
      "right" : "if (t.getScopeDepth() >= 2)",
      "info" : "IfStatement[12034-12919]:IfStatement[12118-13003]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12062-12919]:Block[12146-13003]"
    }, {
      "left" : "if (aliasVar != null)",
      "right" : "if (aliasVar != null)",
      "info" : "IfStatement[12122-12676]:IfStatement[12206-12760]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12144-12676]:Block[12228-12760]"
    }, {
      "left" : "Node aliasedNode = aliasVar.getInitialValue();",
      "right" : "Node aliasedNode = aliasVar.getInitialValue();",
      "info" : "VariableDeclarationStatement[12560-12606]:VariableDeclarationStatement[12644-12690]"
    }, {
      "left" : "aliasUsages.add(new AliasedNode(n, aliasedNode));",
      "right" : "aliasUsages.add(new AliasedNode(n, aliasedNode));",
      "info" : "ExpressionStatement[12617-12666]:ExpressionStatement[12701-12750]"
    }, {
      "left" : "JSDocInfo info = n.getJSDocInfo();",
      "right" : "JSDocInfo info = n.getJSDocInfo();",
      "info" : "VariableDeclarationStatement[12686-12720]:VariableDeclarationStatement[12770-12804]"
    }, {
      "left" : "if (info != null)",
      "right" : "if (info != null)",
      "info" : "IfStatement[12729-12851]:IfStatement[12813-12935]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12747-12851]:Block[12831-12935]"
    }, {
      "left" : "for (Node node : info.getTypeNodes())",
      "right" : "for (Node node : info.getTypeNodes())",
      "info" : "EnhancedForStatement[12759-12841]:EnhancedForStatement[12843-12925]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12797-12841]:Block[12881-12925]"
    }, {
      "left" : "fixTypeNode(node);",
      "right" : "fixTypeNode(node);",
      "info" : "ExpressionStatement[12811-12829]:ExpressionStatement[12895-12913]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[12931-12938]:Modifier[13015-13022]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[12939-12943]:PrimitiveType[13023-13027]"
    }, {
      "left" : "fixTypeNode",
      "right" : "fixTypeNode",
      "info" : "SimpleName[12944-12955]:SimpleName[13028-13039]"
    }, {
      "left" : "Node typeNode",
      "right" : "Node typeNode",
      "info" : "SingleVariableDeclaration[12956-12969]:SingleVariableDeclaration[13040-13053]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12971-13652]:Block[13055-13736]"
    }, {
      "left" : "if (typeNode.isString())",
      "right" : "if (typeNode.isString())",
      "info" : "IfStatement[12979-13506]:IfStatement[13063-13590]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13004-13506]:Block[13088-13590]"
    }, {
      "left" : "String name = typeNode.getString();",
      "right" : "String name = typeNode.getString();",
      "info" : "VariableDeclarationStatement[13014-13049]:VariableDeclarationStatement[13098-13133]"
    }, {
      "left" : "int endIndex = name.indexOf('.');",
      "right" : "int endIndex = name.indexOf('.');",
      "info" : "VariableDeclarationStatement[13058-13091]:VariableDeclarationStatement[13142-13175]"
    }, {
      "left" : "if (endIndex == -1)",
      "right" : "if (endIndex == -1)",
      "info" : "IfStatement[13100-13167]:IfStatement[13184-13251]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13120-13167]:Block[13204-13251]"
    }, {
      "left" : "endIndex = name.length();",
      "right" : "endIndex = name.length();",
      "info" : "ExpressionStatement[13132-13157]:ExpressionStatement[13216-13241]"
    }, {
      "left" : "String baseName = name.substring(0, endIndex);",
      "right" : "String baseName = name.substring(0, endIndex);",
      "info" : "VariableDeclarationStatement[13176-13222]:VariableDeclarationStatement[13260-13306]"
    }, {
      "left" : "Var aliasVar = aliases.get(baseName);",
      "right" : "Var aliasVar = aliases.get(baseName);",
      "info" : "VariableDeclarationStatement[13231-13268]:VariableDeclarationStatement[13315-13352]"
    }, {
      "left" : "if (aliasVar != null)",
      "right" : "if (aliasVar != null)",
      "info" : "IfStatement[13277-13498]:IfStatement[13361-13582]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13299-13498]:Block[13383-13582]"
    }, {
      "left" : "Node aliasedNode = aliasVar.getInitialValue();",
      "right" : "Node aliasedNode = aliasVar.getInitialValue();",
      "info" : "VariableDeclarationStatement[13311-13357]:VariableDeclarationStatement[13395-13441]"
    }, {
      "left" : "aliasUsages.add(new AliasedTypeNode(typeNode,\n              aliasedNode.getQualifiedName() + name.substring(endIndex)));",
      "right" : "aliasUsages.add(new AliasedTypeNode(typeNode,\n              aliasedNode.getQualifiedName() + name.substring(endIndex)));",
      "info" : "ExpressionStatement[13368-13488]:ExpressionStatement[13452-13572]"
    }, {
      "left" : "for (Node child = typeNode.getFirstChild(); child != null;\n           child = child.getNext())",
      "right" : "for (Node child = typeNode.getFirstChild(); child != null;\n           child = child.getNext())",
      "info" : "ForStatement[13514-13646]:ForStatement[13598-13730]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13609-13646]:Block[13693-13730]"
    }, {
      "left" : "fixTypeNode(child);",
      "right" : "fixTypeNode(child);",
      "info" : "ExpressionStatement[13619-13638]:ExpressionStatement[13703-13722]"
    } ]
  },
  "interFileMappings" : { }
}