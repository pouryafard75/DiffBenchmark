{
  "matchedElements" : [
 {
    "left" : "package process(t , tb ) : boolean",
    "right" : "package process(t , tb ) : boolean",
    "info" : "MethodDeclaration[297-1357]:MethodDeclaration[297-1357]"
  }, {
    "left" : "package process(t , tb ) : boolean",
    "right" : "package process(t , tb ) : boolean",
    "info" : "MethodDeclaration[1390-2252]:MethodDeclaration[1390-2252]"
  }, {
    "left" : "private anythingElse(t , tb ) : boolean",
    "right" : "private anythingElse(t , tb ) : boolean",
    "info" : "MethodDeclaration[2262-2443]:MethodDeclaration[2262-2443]"
  }, {
    "left" : "package process(t , tb ) : boolean",
    "right" : "package process(t , tb ) : boolean",
    "info" : "MethodDeclaration[2476-3601]:MethodDeclaration[2476-3601]"
  }, {
    "left" : "package process(t , tb ) : boolean",
    "right" : "package process(t , tb ) : boolean",
    "info" : "MethodDeclaration[3630-6588]:MethodDeclaration[3630-6588]"
  }, {
    "left" : "private anythingElse(t , tb ) : boolean",
    "right" : "private anythingElse(t , tb ) : boolean",
    "info" : "MethodDeclaration[6598-6735]:MethodDeclaration[6598-6735]"
  }, {
    "left" : "package process(t , tb ) : boolean",
    "right" : "package process(t , tb ) : boolean",
    "info" : "MethodDeclaration[6772-7845]:MethodDeclaration[6772-7845]"
  }, {
    "left" : "private anythingElse(t , tb ) : boolean",
    "right" : "private anythingElse(t , tb ) : boolean",
    "info" : "MethodDeclaration[7855-8042]:MethodDeclaration[7855-8042]"
  }, {
    "left" : "package process(t , tb ) : boolean",
    "right" : "package process(t , tb ) : boolean",
    "info" : "MethodDeclaration[8074-9853]:MethodDeclaration[8074-9853]"
  }, {
    "left" : "private anythingElse(t , tb ) : boolean",
    "right" : "private anythingElse(t , tb ) : boolean",
    "info" : "MethodDeclaration[9863-10039]:MethodDeclaration[9863-10039]"
  }, {
    "left" : "package process(t , tb ) : boolean",
    "right" : "package process(t , tb ) : boolean",
    "info" : "MethodDeclaration[10068-38448]:MethodDeclaration[10068-38448]"
  }, {
    "left" : "package anyOtherEndTag(t , tb ) : boolean",
    "right" : "package anyOtherEndTag(t , tb ) : boolean",
    "info" : "MethodDeclaration[38458-39254]:MethodDeclaration[38458-39292]"
  }, {
    "left" : "package process(t , tb ) : boolean",
    "right" : "package process(t , tb ) : boolean",
    "info" : "MethodDeclaration[39344-39990]:MethodDeclaration[39382-40028]"
  }, {
    "left" : "package process(t , tb ) : boolean",
    "right" : "package process(t , tb ) : boolean",
    "info" : "MethodDeclaration[40020-43909]:MethodDeclaration[40058-43947]"
  }, {
    "left" : "package anythingElse(t , tb ) : boolean",
    "right" : "package anythingElse(t , tb ) : boolean",
    "info" : "MethodDeclaration[43919-44400]:MethodDeclaration[43957-44438]"
  }, {
    "left" : "package process(t , tb ) : boolean",
    "right" : "package process(t , tb ) : boolean",
    "info" : "MethodDeclaration[44434-46221]:MethodDeclaration[44472-46259]"
  }, {
    "left" : "package process(t , tb ) : boolean",
    "right" : "package process(t , tb ) : boolean",
    "info" : "MethodDeclaration[46253-47815]:MethodDeclaration[46291-47853]"
  }, {
    "left" : "package process(t , tb ) : boolean",
    "right" : "package process(t , tb ) : boolean",
    "info" : "MethodDeclaration[47851-49672]:MethodDeclaration[47889-49710]"
  }, {
    "left" : "private anythingElse(t , tb ) : boolean",
    "right" : "private anythingElse(t , tb ) : boolean",
    "info" : "MethodDeclaration[49682-49928]:MethodDeclaration[49720-49966]"
  }, {
    "left" : "package process(t , tb ) : boolean",
    "right" : "package process(t , tb ) : boolean",
    "info" : "MethodDeclaration[49962-51953]:MethodDeclaration[50000-51991]"
  }, {
    "left" : "private exitTableBody(t , tb ) : boolean",
    "right" : "private exitTableBody(t , tb ) : boolean",
    "info" : "MethodDeclaration[51963-52402]:MethodDeclaration[52001-52440]"
  }, {
    "left" : "private anythingElse(t , tb ) : boolean",
    "right" : "private anythingElse(t , tb ) : boolean",
    "info" : "MethodDeclaration[52412-52524]:MethodDeclaration[52450-52562]"
  }, {
    "left" : "package process(t , tb ) : boolean",
    "right" : "package process(t , tb ) : boolean",
    "info" : "MethodDeclaration[52552-54529]:MethodDeclaration[52590-54567]"
  }, {
    "left" : "private anythingElse(t , tb ) : boolean",
    "right" : "private anythingElse(t , tb ) : boolean",
    "info" : "MethodDeclaration[54539-54651]:MethodDeclaration[54577-54689]"
  }, {
    "left" : "private handleMissingTr(t , tb ) : boolean",
    "right" : "private handleMissingTr(t , tb ) : boolean",
    "info" : "MethodDeclaration[54661-54897]:MethodDeclaration[54699-54935]"
  }, {
    "left" : "package process(t , tb ) : boolean",
    "right" : "package process(t , tb ) : boolean",
    "info" : "MethodDeclaration[54926-56868]:MethodDeclaration[54964-56906]"
  }, {
    "left" : "private anythingElse(t , tb ) : boolean",
    "right" : "private anythingElse(t , tb ) : boolean",
    "info" : "MethodDeclaration[56878-56989]:MethodDeclaration[56916-57027]"
  }, {
    "left" : "private closeCell(tb ) : void",
    "right" : "private closeCell(tb ) : void",
    "info" : "MethodDeclaration[56999-57223]:MethodDeclaration[57037-57261]"
  }, {
    "left" : "package process(t , tb ) : boolean",
    "right" : "package process(t , tb ) : boolean",
    "info" : "MethodDeclaration[57254-60992]:MethodDeclaration[57292-61030]"
  }, {
    "left" : "private anythingElse(t , tb ) : boolean",
    "right" : "private anythingElse(t , tb ) : boolean",
    "info" : "MethodDeclaration[61002-61125]:MethodDeclaration[61040-61163]"
  }, {
    "left" : "package process(t , tb ) : boolean",
    "right" : "package process(t , tb ) : boolean",
    "info" : "MethodDeclaration[61163-61956]:MethodDeclaration[61201-61994]"
  }, {
    "left" : "package process(t , tb ) : boolean",
    "right" : "package process(t , tb ) : boolean",
    "info" : "MethodDeclaration[61988-62997]:MethodDeclaration[62026-63035]"
  }, {
    "left" : "package process(t , tb ) : boolean",
    "right" : "package process(t , tb ) : boolean",
    "info" : "MethodDeclaration[63030-64802]:MethodDeclaration[63068-64840]"
  }, {
    "left" : "package process(t , tb ) : boolean",
    "right" : "package process(t , tb ) : boolean",
    "info" : "MethodDeclaration[64838-65770]:MethodDeclaration[64876-65808]"
  }, {
    "left" : "package process(t , tb ) : boolean",
    "right" : "package process(t , tb ) : boolean",
    "info" : "MethodDeclaration[65807-66349]:MethodDeclaration[65845-66387]"
  }, {
    "left" : "package process(t , tb ) : boolean",
    "right" : "package process(t , tb ) : boolean",
    "info" : "MethodDeclaration[66390-67022]:MethodDeclaration[66428-67060]"
  }, {
    "left" : "package process(t , tb ) : boolean",
    "right" : "package process(t , tb ) : boolean",
    "info" : "MethodDeclaration[67059-67198]:MethodDeclaration[67097-67236]"
  }, {
    "left" : "nullString",
    "right" : "nullString",
    "info" : "FieldDeclaration[67211-67271]:FieldDeclaration[67249-67309]"
  }, {
    "left" : "public abstract process(t , tb ) : boolean",
    "right" : "public abstract process(t , tb ) : boolean",
    "info" : "MethodDeclaration[67277-67331]:MethodDeclaration[67315-67369]"
  }, {
    "left" : "private isWhitespace(t ) : boolean",
    "right" : "private isWhitespace(t ) : boolean",
    "info" : "MethodDeclaration[67337-67544]:MethodDeclaration[67375-67582]"
  }, {
    "left" : "private isWhitespace(data ) : boolean",
    "right" : "private isWhitespace(data ) : boolean",
    "info" : "MethodDeclaration[67550-67873]:MethodDeclaration[67588-67911]"
  }, {
    "left" : "private handleRcData(startTag , tb ) : void",
    "right" : "private handleRcData(startTag , tb ) : void",
    "info" : "MethodDeclaration[67879-68110]:MethodDeclaration[67917-68148]"
  }, {
    "left" : "private handleRawtext(startTag , tb ) : void",
    "right" : "private handleRawtext(startTag , tb ) : void",
    "info" : "MethodDeclaration[68116-68349]:MethodDeclaration[68154-68387]"
  }, {
    "left" : "class : Constants",
    "right" : "class : Constants",
    "info" : "TypeDeclaration[68519-70962]:TypeDeclaration[68557-71000]"
  }, {
    "left" : "InBodyStartToHead",
    "right" : "InBodyStartToHead",
    "info" : "FieldDeclaration[68566-68727]:FieldDeclaration[68604-68765]"
  }, {
    "left" : "InBodyStartPClosers",
    "right" : "InBodyStartPClosers",
    "info" : "FieldDeclaration[68736-69039]:FieldDeclaration[68774-69077]"
  }, {
    "left" : "Headings",
    "right" : "Headings",
    "info" : "FieldDeclaration[69048-69138]:FieldDeclaration[69086-69176]"
  }, {
    "left" : "InBodyStartPreListing",
    "right" : "InBodyStartPreListing",
    "info" : "FieldDeclaration[69147-69232]:FieldDeclaration[69185-69270]"
  }, {
    "left" : "InBodyStartLiBreakers",
    "right" : "InBodyStartLiBreakers",
    "info" : "FieldDeclaration[69241-69331]:FieldDeclaration[69279-69369]"
  }, {
    "left" : "DdDt",
    "right" : "DdDt",
    "info" : "FieldDeclaration[69340-69402]:FieldDeclaration[69378-69440]"
  }, {
    "left" : "Formatters",
    "right" : "Formatters",
    "info" : "FieldDeclaration[69411-69551]:FieldDeclaration[69449-69589]"
  }, {
    "left" : "InBodyStartApplets",
    "right" : "InBodyStartApplets",
    "info" : "FieldDeclaration[69560-69655]:FieldDeclaration[69598-69693]"
  }, {
    "left" : "InBodyStartEmptyFormatters",
    "right" : "InBodyStartEmptyFormatters",
    "info" : "FieldDeclaration[69664-69783]:FieldDeclaration[69702-69821]"
  }, {
    "left" : "InBodyStartMedia",
    "right" : "InBodyStartMedia",
    "info" : "FieldDeclaration[69792-69882]:FieldDeclaration[69830-69920]"
  }, {
    "left" : "InBodyStartInputAttribs",
    "right" : "InBodyStartInputAttribs",
    "info" : "FieldDeclaration[69891-69988]:FieldDeclaration[69929-70026]"
  }, {
    "left" : "InBodyStartOptions",
    "right" : "InBodyStartOptions",
    "info" : "FieldDeclaration[69997-70083]:FieldDeclaration[70035-70121]"
  }, {
    "left" : "InBodyStartRuby",
    "right" : "InBodyStartRuby",
    "info" : "FieldDeclaration[70092-70165]:FieldDeclaration[70130-70203]"
  }, {
    "left" : "InBodyStartDrop",
    "right" : "InBodyStartDrop",
    "info" : "FieldDeclaration[70174-70327]:FieldDeclaration[70212-70365]"
  }, {
    "left" : "InBodyEndClosers",
    "right" : "InBodyEndClosers",
    "info" : "FieldDeclaration[70336-70659]:FieldDeclaration[70374-70697]"
  }, {
    "left" : "InBodyEndAdoptionFormatters",
    "right" : "InBodyEndAdoptionFormatters",
    "info" : "FieldDeclaration[70668-70838]:FieldDeclaration[70706-70876]"
  }, {
    "left" : "InBodyEndTableFosters",
    "right" : "InBodyEndTableFosters",
    "info" : "FieldDeclaration[70847-70956]:FieldDeclaration[70885-70994]"
  } ],
  "mappings" : [
 {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[297-304]:PrimitiveType[297-304]"
  }, {
    "left" : "process",
    "right" : "process",
    "info" : "SimpleName[305-312]:SimpleName[305-312]"
  }, {
    "left" : "Token t",
    "right" : "Token t",
    "info" : "SingleVariableDeclaration[313-320]:SingleVariableDeclaration[313-320]"
  }, {
    "left" : "HtmlTreeBuilder tb",
    "right" : "HtmlTreeBuilder tb",
    "info" : "SingleVariableDeclaration[322-340]:SingleVariableDeclaration[322-340]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[342-1357]:Block[342-1357]"
  }, {
    "left" : "if (isWhitespace(t))",
    "right" : "if (isWhitespace(t))",
    "info" : "IfStatement[356-1322]:IfStatement[356-1322]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[377-442]:Block[377-442]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[395-407]:ReturnStatement[395-407]"
  }, {
    "left" : "if (t.isComment())",
    "right" : "if (t.isComment())",
    "info" : "IfStatement[448-1322]:IfStatement[448-1322]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[467-524]:Block[467-524]"
  }, {
    "left" : "tb.insert(t.asComment());",
    "right" : "tb.insert(t.asComment());",
    "info" : "ExpressionStatement[485-510]:ExpressionStatement[485-510]"
  }, {
    "left" : "if (t.isDoctype())",
    "right" : "if (t.isDoctype())",
    "info" : "IfStatement[530-1322]:IfStatement[530-1322]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[549-1151]:Block[549-1151]"
  }, {
    "left" : "Token.Doctype d = t.asDoctype();",
    "right" : "Token.Doctype d = t.asDoctype();",
    "info" : "VariableDeclarationStatement[689-721]:VariableDeclarationStatement[689-721]"
  }, {
    "left" : "DocumentType doctype = new DocumentType(\n                    tb.settings.normalizeTag(d.getName()), d.getPubSysKey(), d.getPublicIdentifier(), d.getSystemIdentifier(), tb.getBaseUri());",
    "right" : "DocumentType doctype = new DocumentType(\n                    tb.settings.normalizeTag(d.getName()), d.getPubSysKey(), d.getPublicIdentifier(), d.getSystemIdentifier(), tb.getBaseUri());",
    "info" : "VariableDeclarationStatement[738-923]:VariableDeclarationStatement[738-923]"
  }, {
    "left" : "tb.getDocument().appendChild(doctype);",
    "right" : "tb.getDocument().appendChild(doctype);",
    "info" : "ExpressionStatement[940-978]:ExpressionStatement[940-978]"
  }, {
    "left" : "if (d.isForceQuirks())",
    "right" : "if (d.isForceQuirks())",
    "info" : "IfStatement[995-1094]:IfStatement[995-1094]"
  }, {
    "left" : "tb.getDocument().quirksMode(Document.QuirksMode.quirks);",
    "right" : "tb.getDocument().quirksMode(Document.QuirksMode.quirks);",
    "info" : "ExpressionStatement[1038-1094]:ExpressionStatement[1038-1094]"
  }, {
    "left" : "tb.transition(BeforeHtml);",
    "right" : "tb.transition(BeforeHtml);",
    "info" : "ExpressionStatement[1111-1137]:ExpressionStatement[1111-1137]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[1157-1322]:Block[1157-1322]"
  }, {
    "left" : "tb.transition(BeforeHtml);",
    "right" : "tb.transition(BeforeHtml);",
    "info" : "ExpressionStatement[1224-1250]:ExpressionStatement[1224-1250]"
  }, {
    "left" : "return tb.process(t);",
    "right" : "return tb.process(t);",
    "info" : "ReturnStatement[1267-1288]:ReturnStatement[1267-1288]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[1335-1347]:ReturnStatement[1335-1347]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[1390-1397]:PrimitiveType[1390-1397]"
  }, {
    "left" : "process",
    "right" : "process",
    "info" : "SimpleName[1398-1405]:SimpleName[1398-1405]"
  }, {
    "left" : "Token t",
    "right" : "Token t",
    "info" : "SingleVariableDeclaration[1406-1413]:SingleVariableDeclaration[1406-1413]"
  }, {
    "left" : "HtmlTreeBuilder tb",
    "right" : "HtmlTreeBuilder tb",
    "info" : "SingleVariableDeclaration[1415-1433]:SingleVariableDeclaration[1415-1433]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[1435-2252]:Block[1435-2252]"
  }, {
    "left" : "if (t.isDoctype())",
    "right" : "if (t.isDoctype())",
    "info" : "IfStatement[1449-2217]:IfStatement[1449-2217]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[1468-1545]:Block[1468-1545]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[1486-1501]:ExpressionStatement[1486-1501]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[1518-1531]:ReturnStatement[1518-1531]"
  }, {
    "left" : "if (t.isComment())",
    "right" : "if (t.isComment())",
    "info" : "IfStatement[1551-2217]:IfStatement[1551-2217]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[1570-1627]:Block[1570-1627]"
  }, {
    "left" : "tb.insert(t.asComment());",
    "right" : "tb.insert(t.asComment());",
    "info" : "ExpressionStatement[1588-1613]:ExpressionStatement[1588-1613]"
  }, {
    "left" : "if (isWhitespace(t))",
    "right" : "if (isWhitespace(t))",
    "info" : "IfStatement[1633-2217]:IfStatement[1633-2217]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[1654-1719]:Block[1654-1719]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[1672-1684]:ReturnStatement[1672-1684]"
  }, {
    "left" : "if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))",
    "right" : "if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))",
    "info" : "IfStatement[1725-2217]:IfStatement[1725-2217]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[1791-1892]:Block[1791-1892]"
  }, {
    "left" : "tb.insert(t.asStartTag());",
    "right" : "tb.insert(t.asStartTag());",
    "info" : "ExpressionStatement[1809-1835]:ExpressionStatement[1809-1835]"
  }, {
    "left" : "tb.transition(BeforeHead);",
    "right" : "tb.transition(BeforeHead);",
    "info" : "ExpressionStatement[1852-1878]:ExpressionStatement[1852-1878]"
  }, {
    "left" : "if (t.isEndTag() && (StringUtil.in(t.asEndTag().normalName(), \"head\", \"body\", \"html\", \"br\")))",
    "right" : "if (t.isEndTag() && (StringUtil.in(t.asEndTag().normalName(), \"head\", \"body\", \"html\", \"br\")))",
    "info" : "IfStatement[1898-2217]:IfStatement[1898-2217]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[1992-2051]:Block[1992-2051]"
  }, {
    "left" : "return anythingElse(t, tb);",
    "right" : "return anythingElse(t, tb);",
    "info" : "ReturnStatement[2010-2037]:ReturnStatement[2010-2037]"
  }, {
    "left" : "if (t.isEndTag())",
    "right" : "if (t.isEndTag())",
    "info" : "IfStatement[2057-2217]:IfStatement[2057-2217]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2075-2152]:Block[2075-2152]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[2093-2108]:ExpressionStatement[2093-2108]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[2125-2138]:ReturnStatement[2125-2138]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2158-2217]:Block[2158-2217]"
  }, {
    "left" : "return anythingElse(t, tb);",
    "right" : "return anythingElse(t, tb);",
    "info" : "ReturnStatement[2176-2203]:ReturnStatement[2176-2203]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[2230-2242]:ReturnStatement[2230-2242]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[2262-2269]:Modifier[2262-2269]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[2270-2277]:PrimitiveType[2270-2277]"
  }, {
    "left" : "anythingElse",
    "right" : "anythingElse",
    "info" : "SimpleName[2278-2290]:SimpleName[2278-2290]"
  }, {
    "left" : "Token t",
    "right" : "Token t",
    "info" : "SingleVariableDeclaration[2291-2298]:SingleVariableDeclaration[2291-2298]"
  }, {
    "left" : "HtmlTreeBuilder tb",
    "right" : "HtmlTreeBuilder tb",
    "info" : "SingleVariableDeclaration[2300-2318]:SingleVariableDeclaration[2300-2318]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2320-2443]:Block[2320-2443]"
  }, {
    "left" : "tb.insertStartTag(\"html\");",
    "right" : "tb.insertStartTag(\"html\");",
    "info" : "ExpressionStatement[2334-2360]:ExpressionStatement[2334-2360]"
  }, {
    "left" : "tb.transition(BeforeHead);",
    "right" : "tb.transition(BeforeHead);",
    "info" : "ExpressionStatement[2373-2399]:ExpressionStatement[2373-2399]"
  }, {
    "left" : "return tb.process(t);",
    "right" : "return tb.process(t);",
    "info" : "ReturnStatement[2412-2433]:ReturnStatement[2412-2433]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[2476-2483]:PrimitiveType[2476-2483]"
  }, {
    "left" : "process",
    "right" : "process",
    "info" : "SimpleName[2484-2491]:SimpleName[2484-2491]"
  }, {
    "left" : "Token t",
    "right" : "Token t",
    "info" : "SingleVariableDeclaration[2492-2499]:SingleVariableDeclaration[2492-2499]"
  }, {
    "left" : "HtmlTreeBuilder tb",
    "right" : "HtmlTreeBuilder tb",
    "info" : "SingleVariableDeclaration[2501-2519]:SingleVariableDeclaration[2501-2519]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2521-3601]:Block[2521-3601]"
  }, {
    "left" : "if (isWhitespace(t))",
    "right" : "if (isWhitespace(t))",
    "info" : "IfStatement[2535-3566]:IfStatement[2535-3566]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2556-2600]:Block[2556-2600]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[2574-2586]:ReturnStatement[2574-2586]"
  }, {
    "left" : "if (t.isComment())",
    "right" : "if (t.isComment())",
    "info" : "IfStatement[2606-3566]:IfStatement[2606-3566]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2625-2682]:Block[2625-2682]"
  }, {
    "left" : "tb.insert(t.asComment());",
    "right" : "tb.insert(t.asComment());",
    "info" : "ExpressionStatement[2643-2668]:ExpressionStatement[2643-2668]"
  }, {
    "left" : "if (t.isDoctype())",
    "right" : "if (t.isDoctype())",
    "info" : "IfStatement[2688-3566]:IfStatement[2688-3566]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2707-2784]:Block[2707-2784]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[2725-2740]:ExpressionStatement[2725-2740]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[2757-2770]:ReturnStatement[2757-2770]"
  }, {
    "left" : "if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))",
    "right" : "if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))",
    "info" : "IfStatement[2790-3566]:IfStatement[2790-3566]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2856-2940]:Block[2856-2940]"
  }, {
    "left" : "return InBody.process(t, tb);",
    "right" : "return InBody.process(t, tb);",
    "info" : "ReturnStatement[2874-2903]:ReturnStatement[2874-2903]"
  }, {
    "left" : "if (t.isStartTag() && t.asStartTag().normalName().equals(\"head\"))",
    "right" : "if (t.isStartTag() && t.asStartTag().normalName().equals(\"head\"))",
    "info" : "IfStatement[2946-3566]:IfStatement[2946-3566]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3012-3165]:Block[3012-3165]"
  }, {
    "left" : "Element head = tb.insert(t.asStartTag());",
    "right" : "Element head = tb.insert(t.asStartTag());",
    "info" : "VariableDeclarationStatement[3030-3071]:VariableDeclarationStatement[3030-3071]"
  }, {
    "left" : "tb.setHeadElement(head);",
    "right" : "tb.setHeadElement(head);",
    "info" : "ExpressionStatement[3088-3112]:ExpressionStatement[3088-3112]"
  }, {
    "left" : "tb.transition(InHead);",
    "right" : "tb.transition(InHead);",
    "info" : "ExpressionStatement[3129-3151]:ExpressionStatement[3129-3151]"
  }, {
    "left" : "if (t.isEndTag() && (StringUtil.in(t.asEndTag().normalName(), \"head\", \"body\", \"html\", \"br\")))",
    "right" : "if (t.isEndTag() && (StringUtil.in(t.asEndTag().normalName(), \"head\", \"body\", \"html\", \"br\")))",
    "info" : "IfStatement[3171-3566]:IfStatement[3171-3566]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3265-3362]:Block[3265-3362]"
  }, {
    "left" : "tb.processStartTag(\"head\");",
    "right" : "tb.processStartTag(\"head\");",
    "info" : "ExpressionStatement[3283-3310]:ExpressionStatement[3283-3310]"
  }, {
    "left" : "return tb.process(t);",
    "right" : "return tb.process(t);",
    "info" : "ReturnStatement[3327-3348]:ReturnStatement[3327-3348]"
  }, {
    "left" : "if (t.isEndTag())",
    "right" : "if (t.isEndTag())",
    "info" : "IfStatement[3368-3566]:IfStatement[3368-3566]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3386-3463]:Block[3386-3463]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[3404-3419]:ExpressionStatement[3404-3419]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[3436-3449]:ReturnStatement[3436-3449]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3469-3566]:Block[3469-3566]"
  }, {
    "left" : "tb.processStartTag(\"head\");",
    "right" : "tb.processStartTag(\"head\");",
    "info" : "ExpressionStatement[3487-3514]:ExpressionStatement[3487-3514]"
  }, {
    "left" : "return tb.process(t);",
    "right" : "return tb.process(t);",
    "info" : "ReturnStatement[3531-3552]:ReturnStatement[3531-3552]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[3579-3591]:ReturnStatement[3579-3591]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[3630-3637]:PrimitiveType[3630-3637]"
  }, {
    "left" : "process",
    "right" : "process",
    "info" : "SimpleName[3638-3645]:SimpleName[3638-3645]"
  }, {
    "left" : "Token t",
    "right" : "Token t",
    "info" : "SingleVariableDeclaration[3646-3653]:SingleVariableDeclaration[3646-3653]"
  }, {
    "left" : "HtmlTreeBuilder tb",
    "right" : "HtmlTreeBuilder tb",
    "info" : "SingleVariableDeclaration[3655-3673]:SingleVariableDeclaration[3655-3673]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3675-6588]:Block[3675-6588]"
  }, {
    "left" : "if (isWhitespace(t))",
    "right" : "if (isWhitespace(t))",
    "info" : "IfStatement[3689-3798]:IfStatement[3689-3798]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3710-3798]:Block[3710-3798]"
  }, {
    "left" : "tb.insert(t.asCharacter());",
    "right" : "tb.insert(t.asCharacter());",
    "info" : "ExpressionStatement[3728-3755]:ExpressionStatement[3728-3755]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[3772-3784]:ReturnStatement[3772-3784]"
  }, {
    "left" : "switch (t.type) {\n                case Comment:\n                    tb.insert(t.asComment());\n                    break;\n                case Doctype:\n                    tb.error(this);\n                    return false;\n                case StartTag:\n                    Token.StartTag start = t.asStartTag();\n                    String name = start.normalName();\n                    if (name.equals(\"html\")) {\n                        return InBody.process(t, tb);\n                    } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\")) {\n                        Element el = tb.insertEmpty(start);\n                        // jsoup special: update base the frist time it is seen\n                        if (name.equals(\"base\") && el.hasAttr(\"href\"))\n                            tb.maybeSetBaseUri(el);\n                    } else if (name.equals(\"meta\")) {\n                        Element meta = tb.insertEmpty(start);\n                        // todo: charset switches\n                    } else if (name.equals(\"title\")) {\n                        handleRcData(start, tb);\n                    } else if (StringUtil.in(name, \"noframes\", \"style\")) {\n                        handleRawtext(start, tb);\n                    } else if (name.equals(\"noscript\")) {\n                        // else if noscript && scripting flag = true: rawtext (jsoup doesn't run script, to handle as noscript)\n                        tb.insert(start);\n                        tb.transition(InHeadNoscript);\n                    } else if (name.equals(\"script\")) {\n                        // skips some script rules as won't execute them\n\n                        tb.tokeniser.transition(TokeniserState.ScriptData);\n                        tb.markInsertionMode();\n                        tb.transition(Text);\n                        tb.insert(start);\n                    } else if (name.equals(\"head\")) {\n                        tb.error(this);\n                        return false;\n                    } else {\n                        return anythingElse(t, tb);\n                    }\n                    break;\n                case EndTag:\n                    Token.EndTag end = t.asEndTag();\n                    name = end.normalName();\n                    if (name.equals(\"head\")) {\n                        tb.pop();\n                        tb.transition(AfterHead);\n                    } else if (StringUtil.in(name, \"body\", \"html\", \"br\")) {\n                        return anythingElse(t, tb);\n                    } else {\n                        tb.error(this);\n                        return false;\n                    }\n                    break;\n                default:\n                    return anythingElse(t, tb);\n            }",
    "right" : "switch (t.type) {\n                case Comment:\n                    tb.insert(t.asComment());\n                    break;\n                case Doctype:\n                    tb.error(this);\n                    return false;\n                case StartTag:\n                    Token.StartTag start = t.asStartTag();\n                    String name = start.normalName();\n                    if (name.equals(\"html\")) {\n                        return InBody.process(t, tb);\n                    } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\")) {\n                        Element el = tb.insertEmpty(start);\n                        // jsoup special: update base the frist time it is seen\n                        if (name.equals(\"base\") && el.hasAttr(\"href\"))\n                            tb.maybeSetBaseUri(el);\n                    } else if (name.equals(\"meta\")) {\n                        Element meta = tb.insertEmpty(start);\n                        // todo: charset switches\n                    } else if (name.equals(\"title\")) {\n                        handleRcData(start, tb);\n                    } else if (StringUtil.in(name, \"noframes\", \"style\")) {\n                        handleRawtext(start, tb);\n                    } else if (name.equals(\"noscript\")) {\n                        // else if noscript && scripting flag = true: rawtext (jsoup doesn't run script, to handle as noscript)\n                        tb.insert(start);\n                        tb.transition(InHeadNoscript);\n                    } else if (name.equals(\"script\")) {\n                        // skips some script rules as won't execute them\n\n                        tb.tokeniser.transition(TokeniserState.ScriptData);\n                        tb.markInsertionMode();\n                        tb.transition(Text);\n                        tb.insert(start);\n                    } else if (name.equals(\"head\")) {\n                        tb.error(this);\n                        return false;\n                    } else {\n                        return anythingElse(t, tb);\n                    }\n                    break;\n                case EndTag:\n                    Token.EndTag end = t.asEndTag();\n                    name = end.normalName();\n                    if (name.equals(\"head\")) {\n                        tb.pop();\n                        tb.transition(AfterHead);\n                    } else if (StringUtil.in(name, \"body\", \"html\", \"br\")) {\n                        return anythingElse(t, tb);\n                    } else {\n                        tb.error(this);\n                        return false;\n                    }\n                    break;\n                default:\n                    return anythingElse(t, tb);\n            }",
    "info" : "SwitchStatement[3811-6553]:SwitchStatement[3811-6553]"
  }, {
    "left" : "case Comment:",
    "right" : "case Comment:",
    "info" : "SwitchCase[3845-3858]:SwitchCase[3845-3858]"
  }, {
    "left" : "tb.insert(t.asComment());",
    "right" : "tb.insert(t.asComment());",
    "info" : "ExpressionStatement[3879-3904]:ExpressionStatement[3879-3904]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[3925-3931]:BreakStatement[3925-3931]"
  }, {
    "left" : "case Doctype:",
    "right" : "case Doctype:",
    "info" : "SwitchCase[3948-3961]:SwitchCase[3948-3961]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[3982-3997]:ExpressionStatement[3982-3997]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[4018-4031]:ReturnStatement[4018-4031]"
  }, {
    "left" : "case StartTag:",
    "right" : "case StartTag:",
    "info" : "SwitchCase[4048-4062]:SwitchCase[4048-4062]"
  }, {
    "left" : "Token.StartTag start = t.asStartTag();",
    "right" : "Token.StartTag start = t.asStartTag();",
    "info" : "VariableDeclarationStatement[4083-4121]:VariableDeclarationStatement[4083-4121]"
  }, {
    "left" : "String name = start.normalName();",
    "right" : "String name = start.normalName();",
    "info" : "VariableDeclarationStatement[4142-4175]:VariableDeclarationStatement[4142-4175]"
  }, {
    "left" : "if (name.equals(\"html\"))",
    "right" : "if (name.equals(\"html\"))",
    "info" : "IfStatement[4196-5897]:IfStatement[4196-5897]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4221-4298]:Block[4221-4298]"
  }, {
    "left" : "return InBody.process(t, tb);",
    "right" : "return InBody.process(t, tb);",
    "info" : "ReturnStatement[4247-4276]:ReturnStatement[4247-4276]"
  }, {
    "left" : "if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\"))",
    "right" : "if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\"))",
    "info" : "IfStatement[4304-5897]:IfStatement[4304-5897]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4379-4665]:Block[4379-4665]"
  }, {
    "left" : "Element el = tb.insertEmpty(start);",
    "right" : "Element el = tb.insertEmpty(start);",
    "info" : "VariableDeclarationStatement[4405-4440]:VariableDeclarationStatement[4405-4440]"
  }, {
    "left" : "if (name.equals(\"base\") && el.hasAttr(\"href\"))",
    "right" : "if (name.equals(\"base\") && el.hasAttr(\"href\"))",
    "info" : "IfStatement[4545-4643]:IfStatement[4545-4643]"
  }, {
    "left" : "tb.maybeSetBaseUri(el);",
    "right" : "tb.maybeSetBaseUri(el);",
    "info" : "ExpressionStatement[4620-4643]:ExpressionStatement[4620-4643]"
  }, {
    "left" : "if (name.equals(\"meta\"))",
    "right" : "if (name.equals(\"meta\"))",
    "info" : "IfStatement[4671-5897]:IfStatement[4671-5897]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4696-4831]:Block[4696-4831]"
  }, {
    "left" : "Element meta = tb.insertEmpty(start);",
    "right" : "Element meta = tb.insertEmpty(start);",
    "info" : "VariableDeclarationStatement[4722-4759]:VariableDeclarationStatement[4722-4759]"
  }, {
    "left" : "if (name.equals(\"title\"))",
    "right" : "if (name.equals(\"title\"))",
    "info" : "IfStatement[4837-5897]:IfStatement[4837-5897]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4863-4935]:Block[4863-4935]"
  }, {
    "left" : "handleRcData(start, tb);",
    "right" : "handleRcData(start, tb);",
    "info" : "ExpressionStatement[4889-4913]:ExpressionStatement[4889-4913]"
  }, {
    "left" : "if (StringUtil.in(name, \"noframes\", \"style\"))",
    "right" : "if (StringUtil.in(name, \"noframes\", \"style\"))",
    "info" : "IfStatement[4941-5897]:IfStatement[4941-5897]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4987-5060]:Block[4987-5060]"
  }, {
    "left" : "handleRawtext(start, tb);",
    "right" : "handleRawtext(start, tb);",
    "info" : "ExpressionStatement[5013-5038]:ExpressionStatement[5013-5038]"
  }, {
    "left" : "if (name.equals(\"noscript\"))",
    "right" : "if (name.equals(\"noscript\"))",
    "info" : "IfStatement[5066-5897]:IfStatement[5066-5897]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5095-5343]:Block[5095-5343]"
  }, {
    "left" : "tb.insert(start);",
    "right" : "tb.insert(start);",
    "info" : "ExpressionStatement[5249-5266]:ExpressionStatement[5249-5266]"
  }, {
    "left" : "tb.transition(InHeadNoscript);",
    "right" : "tb.transition(InHeadNoscript);",
    "info" : "ExpressionStatement[5291-5321]:ExpressionStatement[5291-5321]"
  }, {
    "left" : "if (name.equals(\"script\"))",
    "right" : "if (name.equals(\"script\"))",
    "info" : "IfStatement[5349-5897]:IfStatement[5349-5897]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5376-5684]:Block[5376-5684]"
  }, {
    "left" : "tb.tokeniser.transition(TokeniserState.ScriptData);",
    "right" : "tb.tokeniser.transition(TokeniserState.ScriptData);",
    "info" : "ExpressionStatement[5476-5527]:ExpressionStatement[5476-5527]"
  }, {
    "left" : "tb.markInsertionMode();",
    "right" : "tb.markInsertionMode();",
    "info" : "ExpressionStatement[5552-5575]:ExpressionStatement[5552-5575]"
  }, {
    "left" : "tb.transition(Text);",
    "right" : "tb.transition(Text);",
    "info" : "ExpressionStatement[5600-5620]:ExpressionStatement[5600-5620]"
  }, {
    "left" : "tb.insert(start);",
    "right" : "tb.insert(start);",
    "info" : "ExpressionStatement[5645-5662]:ExpressionStatement[5645-5662]"
  }, {
    "left" : "if (name.equals(\"head\"))",
    "right" : "if (name.equals(\"head\"))",
    "info" : "IfStatement[5690-5897]:IfStatement[5690-5897]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5715-5816]:Block[5715-5816]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[5741-5756]:ExpressionStatement[5741-5756]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[5781-5794]:ReturnStatement[5781-5794]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5822-5897]:Block[5822-5897]"
  }, {
    "left" : "return anythingElse(t, tb);",
    "right" : "return anythingElse(t, tb);",
    "info" : "ReturnStatement[5848-5875]:ReturnStatement[5848-5875]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[5918-5924]:BreakStatement[5918-5924]"
  }, {
    "left" : "case EndTag:",
    "right" : "case EndTag:",
    "info" : "SwitchCase[5941-5953]:SwitchCase[5941-5953]"
  }, {
    "left" : "Token.EndTag end = t.asEndTag();",
    "right" : "Token.EndTag end = t.asEndTag();",
    "info" : "VariableDeclarationStatement[5974-6006]:VariableDeclarationStatement[5974-6006]"
  }, {
    "left" : "name = end.normalName();",
    "right" : "name = end.normalName();",
    "info" : "ExpressionStatement[6027-6051]:ExpressionStatement[6027-6051]"
  }, {
    "left" : "if (name.equals(\"head\"))",
    "right" : "if (name.equals(\"head\"))",
    "info" : "IfStatement[6072-6439]:IfStatement[6072-6439]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6097-6204]:Block[6097-6204]"
  }, {
    "left" : "tb.pop();",
    "right" : "tb.pop();",
    "info" : "ExpressionStatement[6123-6132]:ExpressionStatement[6123-6132]"
  }, {
    "left" : "tb.transition(AfterHead);",
    "right" : "tb.transition(AfterHead);",
    "info" : "ExpressionStatement[6157-6182]:ExpressionStatement[6157-6182]"
  }, {
    "left" : "if (StringUtil.in(name, \"body\", \"html\", \"br\"))",
    "right" : "if (StringUtil.in(name, \"body\", \"html\", \"br\"))",
    "info" : "IfStatement[6210-6439]:IfStatement[6210-6439]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6257-6332]:Block[6257-6332]"
  }, {
    "left" : "return anythingElse(t, tb);",
    "right" : "return anythingElse(t, tb);",
    "info" : "ReturnStatement[6283-6310]:ReturnStatement[6283-6310]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6338-6439]:Block[6338-6439]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[6364-6379]:ExpressionStatement[6364-6379]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[6404-6417]:ReturnStatement[6404-6417]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[6460-6466]:BreakStatement[6460-6466]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[6483-6491]:SwitchCase[6483-6491]"
  }, {
    "left" : "return anythingElse(t, tb);",
    "right" : "return anythingElse(t, tb);",
    "info" : "ReturnStatement[6512-6539]:ReturnStatement[6512-6539]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[6566-6578]:ReturnStatement[6566-6578]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[6598-6605]:Modifier[6598-6605]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[6606-6613]:PrimitiveType[6606-6613]"
  }, {
    "left" : "anythingElse",
    "right" : "anythingElse",
    "info" : "SimpleName[6614-6626]:SimpleName[6614-6626]"
  }, {
    "left" : "Token t",
    "right" : "Token t",
    "info" : "SingleVariableDeclaration[6627-6634]:SingleVariableDeclaration[6627-6634]"
  }, {
    "left" : "TreeBuilder tb",
    "right" : "TreeBuilder tb",
    "info" : "SingleVariableDeclaration[6636-6650]:SingleVariableDeclaration[6636-6650]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6652-6735]:Block[6652-6735]"
  }, {
    "left" : "tb.processEndTag(\"head\");",
    "right" : "tb.processEndTag(\"head\");",
    "info" : "ExpressionStatement[6666-6691]:ExpressionStatement[6666-6691]"
  }, {
    "left" : "return tb.process(t);",
    "right" : "return tb.process(t);",
    "info" : "ReturnStatement[6704-6725]:ReturnStatement[6704-6725]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[6772-6779]:PrimitiveType[6772-6779]"
  }, {
    "left" : "process",
    "right" : "process",
    "info" : "SimpleName[6780-6787]:SimpleName[6780-6787]"
  }, {
    "left" : "Token t",
    "right" : "Token t",
    "info" : "SingleVariableDeclaration[6788-6795]:SingleVariableDeclaration[6788-6795]"
  }, {
    "left" : "HtmlTreeBuilder tb",
    "right" : "HtmlTreeBuilder tb",
    "info" : "SingleVariableDeclaration[6797-6815]:SingleVariableDeclaration[6797-6815]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6817-7845]:Block[6817-7845]"
  }, {
    "left" : "if (t.isDoctype())",
    "right" : "if (t.isDoctype())",
    "info" : "IfStatement[6831-7810]:IfStatement[6831-7810]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6850-6897]:Block[6850-6897]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[6868-6883]:ExpressionStatement[6868-6883]"
  }, {
    "left" : "if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))",
    "right" : "if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))",
    "info" : "IfStatement[6903-7810]:IfStatement[6903-7810]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6969-7030]:Block[6969-7030]"
  }, {
    "left" : "return tb.process(t, InBody);",
    "right" : "return tb.process(t, InBody);",
    "info" : "ReturnStatement[6987-7016]:ReturnStatement[6987-7016]"
  }, {
    "left" : "if (t.isEndTag() && t.asEndTag().normalName().equals(\"noscript\"))",
    "right" : "if (t.isEndTag() && t.asEndTag().normalName().equals(\"noscript\"))",
    "info" : "IfStatement[7036-7810]:IfStatement[7036-7810]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7102-7182]:Block[7102-7182]"
  }, {
    "left" : "tb.pop();",
    "right" : "tb.pop();",
    "info" : "ExpressionStatement[7120-7129]:ExpressionStatement[7120-7129]"
  }, {
    "left" : "tb.transition(InHead);",
    "right" : "tb.transition(InHead);",
    "info" : "ExpressionStatement[7146-7168]:ExpressionStatement[7146-7168]"
  }, {
    "left" : "if (isWhitespace(t) || t.isComment() || (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(),\n                    \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"style\")))",
    "right" : "if (isWhitespace(t) || t.isComment() || (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(),\n                    \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"style\")))",
    "info" : "IfStatement[7188-7810]:IfStatement[7188-7810]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7372-7433]:Block[7372-7433]"
  }, {
    "left" : "return tb.process(t, InHead);",
    "right" : "return tb.process(t, InHead);",
    "info" : "ReturnStatement[7390-7419]:ReturnStatement[7390-7419]"
  }, {
    "left" : "if (t.isEndTag() && t.asEndTag().normalName().equals(\"br\"))",
    "right" : "if (t.isEndTag() && t.asEndTag().normalName().equals(\"br\"))",
    "info" : "IfStatement[7439-7810]:IfStatement[7439-7810]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7499-7558]:Block[7499-7558]"
  }, {
    "left" : "return anythingElse(t, tb);",
    "right" : "return anythingElse(t, tb);",
    "info" : "ReturnStatement[7517-7544]:ReturnStatement[7517-7544]"
  }, {
    "left" : "if ((t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"head\", \"noscript\")) || t.isEndTag())",
    "right" : "if ((t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"head\", \"noscript\")) || t.isEndTag())",
    "info" : "IfStatement[7564-7810]:IfStatement[7564-7810]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7668-7745]:Block[7668-7745]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[7686-7701]:ExpressionStatement[7686-7701]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[7718-7731]:ReturnStatement[7718-7731]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7751-7810]:Block[7751-7810]"
  }, {
    "left" : "return anythingElse(t, tb);",
    "right" : "return anythingElse(t, tb);",
    "info" : "ReturnStatement[7769-7796]:ReturnStatement[7769-7796]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[7823-7835]:ReturnStatement[7823-7835]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[7855-7862]:Modifier[7855-7862]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[7863-7870]:PrimitiveType[7863-7870]"
  }, {
    "left" : "anythingElse",
    "right" : "anythingElse",
    "info" : "SimpleName[7871-7883]:SimpleName[7871-7883]"
  }, {
    "left" : "Token t",
    "right" : "Token t",
    "info" : "SingleVariableDeclaration[7884-7891]:SingleVariableDeclaration[7884-7891]"
  }, {
    "left" : "HtmlTreeBuilder tb",
    "right" : "HtmlTreeBuilder tb",
    "info" : "SingleVariableDeclaration[7893-7911]:SingleVariableDeclaration[7893-7911]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7913-8042]:Block[7913-8042]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[7927-7942]:ExpressionStatement[7927-7942]"
  }, {
    "left" : "tb.insert(new Token.Character().data(t.toString()));",
    "right" : "tb.insert(new Token.Character().data(t.toString()));",
    "info" : "ExpressionStatement[7955-8007]:ExpressionStatement[7955-8007]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[8020-8032]:ReturnStatement[8020-8032]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[8074-8081]:PrimitiveType[8074-8081]"
  }, {
    "left" : "process",
    "right" : "process",
    "info" : "SimpleName[8082-8089]:SimpleName[8082-8089]"
  }, {
    "left" : "Token t",
    "right" : "Token t",
    "info" : "SingleVariableDeclaration[8090-8097]:SingleVariableDeclaration[8090-8097]"
  }, {
    "left" : "HtmlTreeBuilder tb",
    "right" : "HtmlTreeBuilder tb",
    "info" : "SingleVariableDeclaration[8099-8117]:SingleVariableDeclaration[8099-8117]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8119-9853]:Block[8119-9853]"
  }, {
    "left" : "if (isWhitespace(t))",
    "right" : "if (isWhitespace(t))",
    "info" : "IfStatement[8133-9818]:IfStatement[8133-9818]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8154-8213]:Block[8154-8213]"
  }, {
    "left" : "tb.insert(t.asCharacter());",
    "right" : "tb.insert(t.asCharacter());",
    "info" : "ExpressionStatement[8172-8199]:ExpressionStatement[8172-8199]"
  }, {
    "left" : "if (t.isComment())",
    "right" : "if (t.isComment())",
    "info" : "IfStatement[8219-9818]:IfStatement[8219-9818]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8238-8295]:Block[8238-8295]"
  }, {
    "left" : "tb.insert(t.asComment());",
    "right" : "tb.insert(t.asComment());",
    "info" : "ExpressionStatement[8256-8281]:ExpressionStatement[8256-8281]"
  }, {
    "left" : "if (t.isDoctype())",
    "right" : "if (t.isDoctype())",
    "info" : "IfStatement[8301-9818]:IfStatement[8301-9818]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8320-8367]:Block[8320-8367]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[8338-8353]:ExpressionStatement[8338-8353]"
  }, {
    "left" : "if (t.isStartTag())",
    "right" : "if (t.isStartTag())",
    "info" : "IfStatement[8373-9818]:IfStatement[8373-9818]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8393-9487]:Block[8393-9487]"
  }, {
    "left" : "Token.StartTag startTag = t.asStartTag();",
    "right" : "Token.StartTag startTag = t.asStartTag();",
    "info" : "VariableDeclarationStatement[8411-8452]:VariableDeclarationStatement[8411-8452]"
  }, {
    "left" : "String name = startTag.normalName();",
    "right" : "String name = startTag.normalName();",
    "info" : "VariableDeclarationStatement[8469-8505]:VariableDeclarationStatement[8469-8505]"
  }, {
    "left" : "if (name.equals(\"html\"))",
    "right" : "if (name.equals(\"html\"))",
    "info" : "IfStatement[8522-9473]:IfStatement[8522-9473]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8547-8616]:Block[8547-8616]"
  }, {
    "left" : "return tb.process(t, InBody);",
    "right" : "return tb.process(t, InBody);",
    "info" : "ReturnStatement[8569-8598]:ReturnStatement[8569-8598]"
  }, {
    "left" : "if (name.equals(\"body\"))",
    "right" : "if (name.equals(\"body\"))",
    "info" : "IfStatement[8622-9473]:IfStatement[8622-9473]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8647-8792]:Block[8647-8792]"
  }, {
    "left" : "tb.insert(startTag);",
    "right" : "tb.insert(startTag);",
    "info" : "ExpressionStatement[8669-8689]:ExpressionStatement[8669-8689]"
  }, {
    "left" : "tb.framesetOk(false);",
    "right" : "tb.framesetOk(false);",
    "info" : "ExpressionStatement[8710-8731]:ExpressionStatement[8710-8731]"
  }, {
    "left" : "tb.transition(InBody);",
    "right" : "tb.transition(InBody);",
    "info" : "ExpressionStatement[8752-8774]:ExpressionStatement[8752-8774]"
  }, {
    "left" : "if (name.equals(\"frameset\"))",
    "right" : "if (name.equals(\"frameset\"))",
    "info" : "IfStatement[8798-9473]:IfStatement[8798-9473]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8827-8934]:Block[8827-8934]"
  }, {
    "left" : "tb.insert(startTag);",
    "right" : "tb.insert(startTag);",
    "info" : "ExpressionStatement[8849-8869]:ExpressionStatement[8849-8869]"
  }, {
    "left" : "tb.transition(InFrameset);",
    "right" : "tb.transition(InFrameset);",
    "info" : "ExpressionStatement[8890-8916]:ExpressionStatement[8890-8916]"
  }, {
    "left" : "if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\"))",
    "right" : "if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\"))",
    "info" : "IfStatement[8940-9473]:IfStatement[8940-9473]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9052-9287]:Block[9052-9287]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[9074-9089]:ExpressionStatement[9074-9089]"
  }, {
    "left" : "Element head = tb.getHeadElement();",
    "right" : "Element head = tb.getHeadElement();",
    "info" : "VariableDeclarationStatement[9110-9145]:VariableDeclarationStatement[9110-9145]"
  }, {
    "left" : "tb.push(head);",
    "right" : "tb.push(head);",
    "info" : "ExpressionStatement[9166-9180]:ExpressionStatement[9166-9180]"
  }, {
    "left" : "tb.process(t, InHead);",
    "right" : "tb.process(t, InHead);",
    "info" : "ExpressionStatement[9201-9223]:ExpressionStatement[9201-9223]"
  }, {
    "left" : "tb.removeFromStack(head);",
    "right" : "tb.removeFromStack(head);",
    "info" : "ExpressionStatement[9244-9269]:ExpressionStatement[9244-9269]"
  }, {
    "left" : "if (name.equals(\"head\"))",
    "right" : "if (name.equals(\"head\"))",
    "info" : "IfStatement[9293-9473]:IfStatement[9293-9473]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9318-9407]:Block[9318-9407]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[9340-9355]:ExpressionStatement[9340-9355]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[9376-9389]:ReturnStatement[9376-9389]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9413-9473]:Block[9413-9473]"
  }, {
    "left" : "anythingElse(t, tb);",
    "right" : "anythingElse(t, tb);",
    "info" : "ExpressionStatement[9435-9455]:ExpressionStatement[9435-9455]"
  }, {
    "left" : "if (t.isEndTag())",
    "right" : "if (t.isEndTag())",
    "info" : "IfStatement[9493-9818]:IfStatement[9493-9818]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9511-9760]:Block[9511-9760]"
  }, {
    "left" : "if (StringUtil.in(t.asEndTag().normalName(), \"body\", \"html\"))",
    "right" : "if (StringUtil.in(t.asEndTag().normalName(), \"body\", \"html\"))",
    "info" : "IfStatement[9529-9746]:IfStatement[9529-9746]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9591-9651]:Block[9591-9651]"
  }, {
    "left" : "anythingElse(t, tb);",
    "right" : "anythingElse(t, tb);",
    "info" : "ExpressionStatement[9613-9633]:ExpressionStatement[9613-9633]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9657-9746]:Block[9657-9746]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[9679-9694]:ExpressionStatement[9679-9694]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[9715-9728]:ReturnStatement[9715-9728]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9766-9818]:Block[9766-9818]"
  }, {
    "left" : "anythingElse(t, tb);",
    "right" : "anythingElse(t, tb);",
    "info" : "ExpressionStatement[9784-9804]:ExpressionStatement[9784-9804]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[9831-9843]:ReturnStatement[9831-9843]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[9863-9870]:Modifier[9863-9870]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[9871-9878]:PrimitiveType[9871-9878]"
  }, {
    "left" : "anythingElse",
    "right" : "anythingElse",
    "info" : "SimpleName[9879-9891]:SimpleName[9879-9891]"
  }, {
    "left" : "Token t",
    "right" : "Token t",
    "info" : "SingleVariableDeclaration[9892-9899]:SingleVariableDeclaration[9892-9899]"
  }, {
    "left" : "HtmlTreeBuilder tb",
    "right" : "HtmlTreeBuilder tb",
    "info" : "SingleVariableDeclaration[9901-9919]:SingleVariableDeclaration[9901-9919]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9921-10039]:Block[9921-10039]"
  }, {
    "left" : "tb.processStartTag(\"body\");",
    "right" : "tb.processStartTag(\"body\");",
    "info" : "ExpressionStatement[9935-9962]:ExpressionStatement[9935-9962]"
  }, {
    "left" : "tb.framesetOk(true);",
    "right" : "tb.framesetOk(true);",
    "info" : "ExpressionStatement[9975-9995]:ExpressionStatement[9975-9995]"
  }, {
    "left" : "return tb.process(t);",
    "right" : "return tb.process(t);",
    "info" : "ReturnStatement[10008-10029]:ReturnStatement[10008-10029]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[10068-10075]:PrimitiveType[10068-10075]"
  }, {
    "left" : "process",
    "right" : "process",
    "info" : "SimpleName[10076-10083]:SimpleName[10076-10083]"
  }, {
    "left" : "Token t",
    "right" : "Token t",
    "info" : "SingleVariableDeclaration[10084-10091]:SingleVariableDeclaration[10084-10091]"
  }, {
    "left" : "HtmlTreeBuilder tb",
    "right" : "HtmlTreeBuilder tb",
    "info" : "SingleVariableDeclaration[10093-10111]:SingleVariableDeclaration[10093-10111]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10113-38448]:Block[10113-38448]"
  }, {
    "left" : "switch (t.type) {\n                case Character: {\n                    Token.Character c = t.asCharacter();\n                    if (c.getData().equals(nullString)) {\n                        // todo confirm that check\n                        tb.error(this);\n                        return false;\n                    } else if (tb.framesetOk() && isWhitespace(c)) { // don't check if whitespace if frames already closed\n                        tb.reconstructFormattingElements();\n                        tb.insert(c);\n                    } else {\n                        tb.reconstructFormattingElements();\n                        tb.insert(c);\n                        tb.framesetOk(false);\n                    }\n                    break;\n                }\n                case Comment: {\n                    tb.insert(t.asComment());\n                    break;\n                }\n                case Doctype: {\n                    tb.error(this);\n                    return false;\n                }\n                case StartTag:\n                    Token.StartTag startTag = t.asStartTag();\n                    String name = startTag.normalName();\n                    if (name.equals(\"a\")) {\n                        if (tb.getActiveFormattingElement(\"a\") != null) {\n                            tb.error(this);\n                            tb.processEndTag(\"a\");\n\n                            // still on stack?\n                            Element remainingA = tb.getFromStack(\"a\");\n                            if (remainingA != null) {\n                                tb.removeFromActiveFormattingElements(remainingA);\n                                tb.removeFromStack(remainingA);\n                            }\n                        }\n                        tb.reconstructFormattingElements();\n                        Element a = tb.insert(startTag);\n                        tb.pushActiveFormattingElements(a);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartEmptyFormatters)) {\n                        tb.reconstructFormattingElements();\n                        tb.insertEmpty(startTag);\n                        tb.framesetOk(false);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartPClosers)) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insert(startTag);\n                    } else if (name.equals(\"span\")) {\n                        // same as final else, but short circuits lots of checks\n                        tb.reconstructFormattingElements();\n                        tb.insert(startTag);\n                    } else if (name.equals(\"li\")) {\n                        tb.framesetOk(false);\n                        ArrayList<Element> stack = tb.getStack();\n                        for (int i = stack.size() - 1; i > 0; i--) {\n                            Element el = stack.get(i);\n                            if (el.nodeName().equals(\"li\")) {\n                                tb.processEndTag(\"li\");\n                                break;\n                            }\n                            if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers))\n                                break;\n                        }\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insert(startTag);\n                    } else if (name.equals(\"html\")) {\n                        tb.error(this);\n                        // merge attributes onto real html\n                        Element html = tb.getStack().get(0);\n                        for (Attribute attribute : startTag.getAttributes()) {\n                            if (!html.hasAttr(attribute.getKey()))\n                                html.attributes().put(attribute);\n                        }\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartToHead)) {\n                        return tb.process(t, InHead);\n                    } else if (name.equals(\"body\")) {\n                        tb.error(this);\n                        ArrayList<Element> stack = tb.getStack();\n                        if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) {\n                            // only in fragment case\n                            return false; // ignore\n                        } else {\n                            tb.framesetOk(false);\n                            Element body = stack.get(1);\n                            for (Attribute attribute : startTag.getAttributes()) {\n                                if (!body.hasAttr(attribute.getKey()))\n                                    body.attributes().put(attribute);\n                            }\n                        }\n                    } else if (name.equals(\"frameset\")) {\n                        tb.error(this);\n                        ArrayList<Element> stack = tb.getStack();\n                        if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) {\n                            // only in fragment case\n                            return false; // ignore\n                        } else if (!tb.framesetOk()) {\n                            return false; // ignore frameset\n                        } else {\n                            Element second = stack.get(1);\n                            if (second.parent() != null)\n                                second.remove();\n                            // pop up to html element\n                            while (stack.size() > 1)\n                                stack.remove(stack.size()-1);\n                            tb.insert(startTag);\n                            tb.transition(InFrameset);\n                        }\n                    } else if (StringUtil.inSorted(name, Constants.Headings)) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        if (StringUtil.inSorted(tb.currentElement().nodeName(), Constants.Headings)) {\n                            tb.error(this);\n                            tb.pop();\n                        }\n                        tb.insert(startTag);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartPreListing)) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insert(startTag);\n                        // todo: ignore LF if next token\n                        tb.framesetOk(false);\n                    } else if (name.equals(\"form\")) {\n                        if (tb.getFormElement() != null) {\n                            tb.error(this);\n                            return false;\n                        }\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insertForm(startTag, true);\n                    } else if (StringUtil.inSorted(name, Constants.DdDt)) {\n                        tb.framesetOk(false);\n                        ArrayList<Element> stack = tb.getStack();\n                        for (int i = stack.size() - 1; i > 0; i--) {\n                            Element el = stack.get(i);\n                            if (StringUtil.inSorted(el.nodeName(), Constants.DdDt)) {\n                                tb.processEndTag(el.nodeName());\n                                break;\n                            }\n                            if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers))\n                                break;\n                        }\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insert(startTag);\n                    } else if (name.equals(\"plaintext\")) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insert(startTag);\n                        tb.tokeniser.transition(TokeniserState.PLAINTEXT); // once in, never gets out\n                    } else if (name.equals(\"button\")) {\n                        if (tb.inButtonScope(\"button\")) {\n                            // close and reprocess\n                            tb.error(this);\n                            tb.processEndTag(\"button\");\n                            tb.process(startTag);\n                        } else {\n                            tb.reconstructFormattingElements();\n                            tb.insert(startTag);\n                            tb.framesetOk(false);\n                        }\n                    } else if (StringUtil.inSorted(name, Constants.Formatters)) {\n                        tb.reconstructFormattingElements();\n                        Element el = tb.insert(startTag);\n                        tb.pushActiveFormattingElements(el);\n                    } else if (name.equals(\"nobr\")) {\n                        tb.reconstructFormattingElements();\n                        if (tb.inScope(\"nobr\")) {\n                            tb.error(this);\n                            tb.processEndTag(\"nobr\");\n                            tb.reconstructFormattingElements();\n                        }\n                        Element el = tb.insert(startTag);\n                        tb.pushActiveFormattingElements(el);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) {\n                        tb.reconstructFormattingElements();\n                        tb.insert(startTag);\n                        tb.insertMarkerToFormattingElements();\n                        tb.framesetOk(false);\n                    } else if (name.equals(\"table\")) {\n                        if (tb.getDocument().quirksMode() != Document.QuirksMode.quirks && tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insert(startTag);\n                        tb.framesetOk(false);\n                        tb.transition(InTable);\n                    } else if (name.equals(\"input\")) {\n                        tb.reconstructFormattingElements();\n                        Element el = tb.insertEmpty(startTag);\n                        if (!el.attr(\"type\").equalsIgnoreCase(\"hidden\"))\n                            tb.framesetOk(false);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartMedia)) {\n                        tb.insertEmpty(startTag);\n                    } else if (name.equals(\"hr\")) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insertEmpty(startTag);\n                        tb.framesetOk(false);\n                    } else if (name.equals(\"image\")) {\n                        if (tb.getFromStack(\"svg\") == null)\n                            return tb.process(startTag.name(\"img\")); // change <image> to <img>, unless in svg\n                        else\n                            tb.insert(startTag);\n                    } else if (name.equals(\"isindex\")) {\n                        // how much do we care about the early 90s?\n                        tb.error(this);\n                        if (tb.getFormElement() != null)\n                            return false;\n\n                        tb.tokeniser.acknowledgeSelfClosingFlag();\n                        tb.processStartTag(\"form\");\n                        if (startTag.attributes.hasKey(\"action\")) {\n                            Element form = tb.getFormElement();\n                            form.attr(\"action\", startTag.attributes.get(\"action\"));\n                        }\n                        tb.processStartTag(\"hr\");\n                        tb.processStartTag(\"label\");\n                        // hope you like english.\n                        String prompt = startTag.attributes.hasKey(\"prompt\") ?\n                                startTag.attributes.get(\"prompt\") :\n                                \"This is a searchable index. Enter search keywords: \";\n\n                        tb.process(new Token.Character().data(prompt));\n\n                        // input\n                        Attributes inputAttribs = new Attributes();\n                        for (Attribute attr : startTag.attributes) {\n                            if (!StringUtil.inSorted(attr.getKey(), Constants.InBodyStartInputAttribs))\n                                inputAttribs.put(attr);\n                        }\n                        inputAttribs.put(\"name\", \"isindex\");\n                        tb.processStartTag(\"input\", inputAttribs);\n                        tb.processEndTag(\"label\");\n                        tb.processStartTag(\"hr\");\n                        tb.processEndTag(\"form\");\n                    } else if (name.equals(\"textarea\")) {\n                        tb.insert(startTag);\n                        // todo: If the next token is a U+000A LINE FEED (LF) character token, then ignore that token and move on to the next one. (Newlines at the start of textarea elements are ignored as an authoring convenience.)\n                        tb.tokeniser.transition(TokeniserState.Rcdata);\n                        tb.markInsertionMode();\n                        tb.framesetOk(false);\n                        tb.transition(Text);\n                    } else if (name.equals(\"xmp\")) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.reconstructFormattingElements();\n                        tb.framesetOk(false);\n                        handleRawtext(startTag, tb);\n                    } else if (name.equals(\"iframe\")) {\n                        tb.framesetOk(false);\n                        handleRawtext(startTag, tb);\n                    } else if (name.equals(\"noembed\")) {\n                        // also handle noscript if script enabled\n                        handleRawtext(startTag, tb);\n                    } else if (name.equals(\"select\")) {\n                        tb.reconstructFormattingElements();\n                        tb.insert(startTag);\n                        tb.framesetOk(false);\n\n                        HtmlTreeBuilderState state = tb.state();\n                        if (state.equals(InTable) || state.equals(InCaption) || state.equals(InTableBody) || state.equals(InRow) || state.equals(InCell))\n                            tb.transition(InSelectInTable);\n                        else\n                            tb.transition(InSelect);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartOptions)) {\n                        if (tb.currentElement().nodeName().equals(\"option\"))\n                            tb.processEndTag(\"option\");\n                        tb.reconstructFormattingElements();\n                        tb.insert(startTag);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartRuby)) {\n                        if (tb.inScope(\"ruby\")) {\n                            tb.generateImpliedEndTags();\n                            if (!tb.currentElement().nodeName().equals(\"ruby\")) {\n                                tb.error(this);\n                                tb.popStackToBefore(\"ruby\"); // i.e. close up to but not include name\n                            }\n                            tb.insert(startTag);\n                        }\n                    } else if (name.equals(\"math\")) {\n                        tb.reconstructFormattingElements();\n                        // todo: handle A start tag whose tag name is \"math\" (i.e. foreign, mathml)\n                        tb.insert(startTag);\n                        tb.tokeniser.acknowledgeSelfClosingFlag();\n                    } else if (name.equals(\"svg\")) {\n                        tb.reconstructFormattingElements();\n                        // todo: handle A start tag whose tag name is \"svg\" (xlink, svg)\n                        tb.insert(startTag);\n                        tb.tokeniser.acknowledgeSelfClosingFlag();\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartDrop)) {\n                        tb.error(this);\n                        return false;\n                    } else {\n                        tb.reconstructFormattingElements();\n                        tb.insert(startTag);\n                    }\n                    break;\n\n                case EndTag:\n                    Token.EndTag endTag = t.asEndTag();\n                    name = endTag.normalName();\n                    if (StringUtil.inSorted(name, Constants.InBodyEndAdoptionFormatters)) {\n                        // Adoption Agency Algorithm.\n                        for (int i = 0; i < 8; i++) {\n                            Element formatEl = tb.getActiveFormattingElement(name);\n                            if (formatEl == null)\n                                return anyOtherEndTag(t, tb);\n                            else if (!tb.onStack(formatEl)) {\n                                tb.error(this);\n                                tb.removeFromActiveFormattingElements(formatEl);\n                                return true;\n                            } else if (!tb.inScope(formatEl.nodeName())) {\n                                tb.error(this);\n                                return false;\n                            } else if (tb.currentElement() != formatEl)\n                                tb.error(this);\n\n                            Element furthestBlock = null;\n                            Element commonAncestor = null;\n                            boolean seenFormattingElement = false;\n                            ArrayList<Element> stack = tb.getStack();\n                            // the spec doesn't limit to < 64, but in degenerate cases (9000+ stack depth) this prevents\n                            // run-aways\n                            final int stackSize = stack.size();\n                            for (int si = 0; si < stackSize && si < 64; si++) {\n                                Element el = stack.get(si);\n                                if (el == formatEl) {\n                                    commonAncestor = stack.get(si - 1);\n                                    seenFormattingElement = true;\n                                } else if (seenFormattingElement && tb.isSpecial(el)) {\n                                    furthestBlock = el;\n                                    break;\n                                }\n                            }\n                            if (furthestBlock == null) {\n                                tb.popStackToClose(formatEl.nodeName());\n                                tb.removeFromActiveFormattingElements(formatEl);\n                                return true;\n                            }\n\n                            // todo: Let a bookmark note the position of the formatting element in the list of active formatting elements relative to the elements on either side of it in the list.\n                            // does that mean: int pos of format el in list?\n                            Element node = furthestBlock;\n                            Element lastNode = furthestBlock;\n                            for (int j = 0; j < 3; j++) {\n                                if (tb.onStack(node))\n                                    node = tb.aboveOnStack(node);\n                                if (!tb.isInActiveFormattingElements(node)) { // note no bookmark check\n                                    tb.removeFromStack(node);\n                                    continue;\n                                } else if (node == formatEl)\n                                    break;\n\n                                Element replacement = new Element(Tag.valueOf(node.nodeName(), ParseSettings.preserveCase), tb.getBaseUri());\n                                // case will follow the original node (so honours ParseSettings)\n                                tb.replaceActiveFormattingElement(node, replacement);\n                                tb.replaceOnStack(node, replacement);\n                                node = replacement;\n\n                                if (lastNode == furthestBlock) {\n                                    // todo: move the aforementioned bookmark to be immediately after the new node in the list of active formatting elements.\n                                    // not getting how this bookmark both straddles the element above, but is inbetween here...\n                                }\n                                if (lastNode.parent() != null)\n                                    lastNode.remove();\n                                node.appendChild(lastNode);\n\n                                lastNode = node;\n                            }\n\n                            if (StringUtil.inSorted(commonAncestor.nodeName(), Constants.InBodyEndTableFosters)) {\n                                if (lastNode.parent() != null)\n                                    lastNode.remove();\n                                tb.insertInFosterParent(lastNode);\n                            } else {\n                                if (lastNode.parent() != null)\n                                    lastNode.remove();\n                                commonAncestor.appendChild(lastNode);\n                            }\n\n                            Element adopter = new Element(formatEl.tag(), tb.getBaseUri());\n                            adopter.attributes().addAll(formatEl.attributes());\n                            Node[] childNodes = furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()]);\n                            for (Node childNode : childNodes) {\n                                adopter.appendChild(childNode); // append will reparent. thus the clone to avoid concurrent mod.\n                            }\n                            furthestBlock.appendChild(adopter);\n                            tb.removeFromActiveFormattingElements(formatEl);\n                            // todo: insert the new element into the list of active formatting elements at the position of the aforementioned bookmark.\n                            tb.removeFromStack(formatEl);\n                            tb.insertOnStackAfter(furthestBlock, adopter);\n                        }\n                    } else if (StringUtil.inSorted(name, Constants.InBodyEndClosers)) {\n                        if (!tb.inScope(name)) {\n                            // nothing to close\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.generateImpliedEndTags();\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(name);\n                        }\n                    } else if (name.equals(\"span\")) {\n                        // same as final fall through, but saves short circuit\n                        return anyOtherEndTag(t, tb);\n                    } else if (name.equals(\"li\")) {\n                        if (!tb.inListItemScope(name)) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.generateImpliedEndTags(name);\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(name);\n                        }\n                    } else if (name.equals(\"body\")) {\n                        if (!tb.inScope(\"body\")) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            // todo: error if stack contains something not dd, dt, li, optgroup, option, p, rp, rt, tbody, td, tfoot, th, thead, tr, body, html\n                            tb.transition(AfterBody);\n                        }\n                    } else if (name.equals(\"html\")) {\n                        boolean notIgnored = tb.processEndTag(\"body\");\n                        if (notIgnored)\n                            return tb.process(endTag);\n                    } else if (name.equals(\"form\")) {\n                        Element currentForm = tb.getFormElement();\n                        tb.setFormElement(null);\n                        if (currentForm == null || !tb.inScope(name)) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.generateImpliedEndTags();\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            // remove currentForm from stack. will shift anything under up.\n                            tb.removeFromStack(currentForm);\n                        }\n                    } else if (name.equals(\"p\")) {\n                        if (!tb.inButtonScope(name)) {\n                            tb.error(this);\n                            tb.processStartTag(name); // if no p to close, creates an empty <p></p>\n                            return tb.process(endTag);\n                        } else {\n                            tb.generateImpliedEndTags(name);\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(name);\n                        }\n                    } else if (StringUtil.inSorted(name, Constants.DdDt)) {\n                        if (!tb.inScope(name)) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.generateImpliedEndTags(name);\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(name);\n                        }\n                    } else if (StringUtil.inSorted(name, Constants.Headings)) {\n                        if (!tb.inScope(Constants.Headings)) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.generateImpliedEndTags(name);\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(Constants.Headings);\n                        }\n                    } else if (name.equals(\"sarcasm\")) {\n                        // *sigh*\n                        return anyOtherEndTag(t, tb);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) {\n                        if (!tb.inScope(\"name\")) {\n                            if (!tb.inScope(name)) {\n                                tb.error(this);\n                                return false;\n                            }\n                            tb.generateImpliedEndTags();\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(name);\n                            tb.clearFormattingElementsToLastMarker();\n                        }\n                    } else if (name.equals(\"br\")) {\n                        tb.error(this);\n                        tb.processStartTag(\"br\");\n                        return false;\n                    } else {\n                        return anyOtherEndTag(t, tb);\n                    }\n\n                    break;\n                case EOF:\n                    // todo: error if stack contains something not dd, dt, li, p, tbody, td, tfoot, th, thead, tr, body, html\n                    // stop parsing\n                    break;\n            }",
    "right" : "switch (t.type) {\n                case Character: {\n                    Token.Character c = t.asCharacter();\n                    if (c.getData().equals(nullString)) {\n                        // todo confirm that check\n                        tb.error(this);\n                        return false;\n                    } else if (tb.framesetOk() && isWhitespace(c)) { // don't check if whitespace if frames already closed\n                        tb.reconstructFormattingElements();\n                        tb.insert(c);\n                    } else {\n                        tb.reconstructFormattingElements();\n                        tb.insert(c);\n                        tb.framesetOk(false);\n                    }\n                    break;\n                }\n                case Comment: {\n                    tb.insert(t.asComment());\n                    break;\n                }\n                case Doctype: {\n                    tb.error(this);\n                    return false;\n                }\n                case StartTag:\n                    Token.StartTag startTag = t.asStartTag();\n                    String name = startTag.normalName();\n                    if (name.equals(\"a\")) {\n                        if (tb.getActiveFormattingElement(\"a\") != null) {\n                            tb.error(this);\n                            tb.processEndTag(\"a\");\n\n                            // still on stack?\n                            Element remainingA = tb.getFromStack(\"a\");\n                            if (remainingA != null) {\n                                tb.removeFromActiveFormattingElements(remainingA);\n                                tb.removeFromStack(remainingA);\n                            }\n                        }\n                        tb.reconstructFormattingElements();\n                        Element a = tb.insert(startTag);\n                        tb.pushActiveFormattingElements(a);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartEmptyFormatters)) {\n                        tb.reconstructFormattingElements();\n                        tb.insertEmpty(startTag);\n                        tb.framesetOk(false);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartPClosers)) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insert(startTag);\n                    } else if (name.equals(\"span\")) {\n                        // same as final else, but short circuits lots of checks\n                        tb.reconstructFormattingElements();\n                        tb.insert(startTag);\n                    } else if (name.equals(\"li\")) {\n                        tb.framesetOk(false);\n                        ArrayList<Element> stack = tb.getStack();\n                        for (int i = stack.size() - 1; i > 0; i--) {\n                            Element el = stack.get(i);\n                            if (el.nodeName().equals(\"li\")) {\n                                tb.processEndTag(\"li\");\n                                break;\n                            }\n                            if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers))\n                                break;\n                        }\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insert(startTag);\n                    } else if (name.equals(\"html\")) {\n                        tb.error(this);\n                        // merge attributes onto real html\n                        Element html = tb.getStack().get(0);\n                        for (Attribute attribute : startTag.getAttributes()) {\n                            if (!html.hasAttr(attribute.getKey()))\n                                html.attributes().put(attribute);\n                        }\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartToHead)) {\n                        return tb.process(t, InHead);\n                    } else if (name.equals(\"body\")) {\n                        tb.error(this);\n                        ArrayList<Element> stack = tb.getStack();\n                        if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) {\n                            // only in fragment case\n                            return false; // ignore\n                        } else {\n                            tb.framesetOk(false);\n                            Element body = stack.get(1);\n                            for (Attribute attribute : startTag.getAttributes()) {\n                                if (!body.hasAttr(attribute.getKey()))\n                                    body.attributes().put(attribute);\n                            }\n                        }\n                    } else if (name.equals(\"frameset\")) {\n                        tb.error(this);\n                        ArrayList<Element> stack = tb.getStack();\n                        if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) {\n                            // only in fragment case\n                            return false; // ignore\n                        } else if (!tb.framesetOk()) {\n                            return false; // ignore frameset\n                        } else {\n                            Element second = stack.get(1);\n                            if (second.parent() != null)\n                                second.remove();\n                            // pop up to html element\n                            while (stack.size() > 1)\n                                stack.remove(stack.size()-1);\n                            tb.insert(startTag);\n                            tb.transition(InFrameset);\n                        }\n                    } else if (StringUtil.inSorted(name, Constants.Headings)) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        if (StringUtil.inSorted(tb.currentElement().nodeName(), Constants.Headings)) {\n                            tb.error(this);\n                            tb.pop();\n                        }\n                        tb.insert(startTag);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartPreListing)) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insert(startTag);\n                        // todo: ignore LF if next token\n                        tb.framesetOk(false);\n                    } else if (name.equals(\"form\")) {\n                        if (tb.getFormElement() != null) {\n                            tb.error(this);\n                            return false;\n                        }\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insertForm(startTag, true);\n                    } else if (StringUtil.inSorted(name, Constants.DdDt)) {\n                        tb.framesetOk(false);\n                        ArrayList<Element> stack = tb.getStack();\n                        for (int i = stack.size() - 1; i > 0; i--) {\n                            Element el = stack.get(i);\n                            if (StringUtil.inSorted(el.nodeName(), Constants.DdDt)) {\n                                tb.processEndTag(el.nodeName());\n                                break;\n                            }\n                            if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers))\n                                break;\n                        }\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insert(startTag);\n                    } else if (name.equals(\"plaintext\")) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insert(startTag);\n                        tb.tokeniser.transition(TokeniserState.PLAINTEXT); // once in, never gets out\n                    } else if (name.equals(\"button\")) {\n                        if (tb.inButtonScope(\"button\")) {\n                            // close and reprocess\n                            tb.error(this);\n                            tb.processEndTag(\"button\");\n                            tb.process(startTag);\n                        } else {\n                            tb.reconstructFormattingElements();\n                            tb.insert(startTag);\n                            tb.framesetOk(false);\n                        }\n                    } else if (StringUtil.inSorted(name, Constants.Formatters)) {\n                        tb.reconstructFormattingElements();\n                        Element el = tb.insert(startTag);\n                        tb.pushActiveFormattingElements(el);\n                    } else if (name.equals(\"nobr\")) {\n                        tb.reconstructFormattingElements();\n                        if (tb.inScope(\"nobr\")) {\n                            tb.error(this);\n                            tb.processEndTag(\"nobr\");\n                            tb.reconstructFormattingElements();\n                        }\n                        Element el = tb.insert(startTag);\n                        tb.pushActiveFormattingElements(el);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) {\n                        tb.reconstructFormattingElements();\n                        tb.insert(startTag);\n                        tb.insertMarkerToFormattingElements();\n                        tb.framesetOk(false);\n                    } else if (name.equals(\"table\")) {\n                        if (tb.getDocument().quirksMode() != Document.QuirksMode.quirks && tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insert(startTag);\n                        tb.framesetOk(false);\n                        tb.transition(InTable);\n                    } else if (name.equals(\"input\")) {\n                        tb.reconstructFormattingElements();\n                        Element el = tb.insertEmpty(startTag);\n                        if (!el.attr(\"type\").equalsIgnoreCase(\"hidden\"))\n                            tb.framesetOk(false);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartMedia)) {\n                        tb.insertEmpty(startTag);\n                    } else if (name.equals(\"hr\")) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insertEmpty(startTag);\n                        tb.framesetOk(false);\n                    } else if (name.equals(\"image\")) {\n                        if (tb.getFromStack(\"svg\") == null)\n                            return tb.process(startTag.name(\"img\")); // change <image> to <img>, unless in svg\n                        else\n                            tb.insert(startTag);\n                    } else if (name.equals(\"isindex\")) {\n                        // how much do we care about the early 90s?\n                        tb.error(this);\n                        if (tb.getFormElement() != null)\n                            return false;\n\n                        tb.tokeniser.acknowledgeSelfClosingFlag();\n                        tb.processStartTag(\"form\");\n                        if (startTag.attributes.hasKey(\"action\")) {\n                            Element form = tb.getFormElement();\n                            form.attr(\"action\", startTag.attributes.get(\"action\"));\n                        }\n                        tb.processStartTag(\"hr\");\n                        tb.processStartTag(\"label\");\n                        // hope you like english.\n                        String prompt = startTag.attributes.hasKey(\"prompt\") ?\n                                startTag.attributes.get(\"prompt\") :\n                                \"This is a searchable index. Enter search keywords: \";\n\n                        tb.process(new Token.Character().data(prompt));\n\n                        // input\n                        Attributes inputAttribs = new Attributes();\n                        for (Attribute attr : startTag.attributes) {\n                            if (!StringUtil.inSorted(attr.getKey(), Constants.InBodyStartInputAttribs))\n                                inputAttribs.put(attr);\n                        }\n                        inputAttribs.put(\"name\", \"isindex\");\n                        tb.processStartTag(\"input\", inputAttribs);\n                        tb.processEndTag(\"label\");\n                        tb.processStartTag(\"hr\");\n                        tb.processEndTag(\"form\");\n                    } else if (name.equals(\"textarea\")) {\n                        tb.insert(startTag);\n                        // todo: If the next token is a U+000A LINE FEED (LF) character token, then ignore that token and move on to the next one. (Newlines at the start of textarea elements are ignored as an authoring convenience.)\n                        tb.tokeniser.transition(TokeniserState.Rcdata);\n                        tb.markInsertionMode();\n                        tb.framesetOk(false);\n                        tb.transition(Text);\n                    } else if (name.equals(\"xmp\")) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.reconstructFormattingElements();\n                        tb.framesetOk(false);\n                        handleRawtext(startTag, tb);\n                    } else if (name.equals(\"iframe\")) {\n                        tb.framesetOk(false);\n                        handleRawtext(startTag, tb);\n                    } else if (name.equals(\"noembed\")) {\n                        // also handle noscript if script enabled\n                        handleRawtext(startTag, tb);\n                    } else if (name.equals(\"select\")) {\n                        tb.reconstructFormattingElements();\n                        tb.insert(startTag);\n                        tb.framesetOk(false);\n\n                        HtmlTreeBuilderState state = tb.state();\n                        if (state.equals(InTable) || state.equals(InCaption) || state.equals(InTableBody) || state.equals(InRow) || state.equals(InCell))\n                            tb.transition(InSelectInTable);\n                        else\n                            tb.transition(InSelect);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartOptions)) {\n                        if (tb.currentElement().nodeName().equals(\"option\"))\n                            tb.processEndTag(\"option\");\n                        tb.reconstructFormattingElements();\n                        tb.insert(startTag);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartRuby)) {\n                        if (tb.inScope(\"ruby\")) {\n                            tb.generateImpliedEndTags();\n                            if (!tb.currentElement().nodeName().equals(\"ruby\")) {\n                                tb.error(this);\n                                tb.popStackToBefore(\"ruby\"); // i.e. close up to but not include name\n                            }\n                            tb.insert(startTag);\n                        }\n                    } else if (name.equals(\"math\")) {\n                        tb.reconstructFormattingElements();\n                        // todo: handle A start tag whose tag name is \"math\" (i.e. foreign, mathml)\n                        tb.insert(startTag);\n                        tb.tokeniser.acknowledgeSelfClosingFlag();\n                    } else if (name.equals(\"svg\")) {\n                        tb.reconstructFormattingElements();\n                        // todo: handle A start tag whose tag name is \"svg\" (xlink, svg)\n                        tb.insert(startTag);\n                        tb.tokeniser.acknowledgeSelfClosingFlag();\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartDrop)) {\n                        tb.error(this);\n                        return false;\n                    } else {\n                        tb.reconstructFormattingElements();\n                        tb.insert(startTag);\n                    }\n                    break;\n\n                case EndTag:\n                    Token.EndTag endTag = t.asEndTag();\n                    name = endTag.normalName();\n                    if (StringUtil.inSorted(name, Constants.InBodyEndAdoptionFormatters)) {\n                        // Adoption Agency Algorithm.\n                        for (int i = 0; i < 8; i++) {\n                            Element formatEl = tb.getActiveFormattingElement(name);\n                            if (formatEl == null)\n                                return anyOtherEndTag(t, tb);\n                            else if (!tb.onStack(formatEl)) {\n                                tb.error(this);\n                                tb.removeFromActiveFormattingElements(formatEl);\n                                return true;\n                            } else if (!tb.inScope(formatEl.nodeName())) {\n                                tb.error(this);\n                                return false;\n                            } else if (tb.currentElement() != formatEl)\n                                tb.error(this);\n\n                            Element furthestBlock = null;\n                            Element commonAncestor = null;\n                            boolean seenFormattingElement = false;\n                            ArrayList<Element> stack = tb.getStack();\n                            // the spec doesn't limit to < 64, but in degenerate cases (9000+ stack depth) this prevents\n                            // run-aways\n                            final int stackSize = stack.size();\n                            for (int si = 0; si < stackSize && si < 64; si++) {\n                                Element el = stack.get(si);\n                                if (el == formatEl) {\n                                    commonAncestor = stack.get(si - 1);\n                                    seenFormattingElement = true;\n                                } else if (seenFormattingElement && tb.isSpecial(el)) {\n                                    furthestBlock = el;\n                                    break;\n                                }\n                            }\n                            if (furthestBlock == null) {\n                                tb.popStackToClose(formatEl.nodeName());\n                                tb.removeFromActiveFormattingElements(formatEl);\n                                return true;\n                            }\n\n                            // todo: Let a bookmark note the position of the formatting element in the list of active formatting elements relative to the elements on either side of it in the list.\n                            // does that mean: int pos of format el in list?\n                            Element node = furthestBlock;\n                            Element lastNode = furthestBlock;\n                            for (int j = 0; j < 3; j++) {\n                                if (tb.onStack(node))\n                                    node = tb.aboveOnStack(node);\n                                if (!tb.isInActiveFormattingElements(node)) { // note no bookmark check\n                                    tb.removeFromStack(node);\n                                    continue;\n                                } else if (node == formatEl)\n                                    break;\n\n                                Element replacement = new Element(Tag.valueOf(node.nodeName(), ParseSettings.preserveCase), tb.getBaseUri());\n                                // case will follow the original node (so honours ParseSettings)\n                                tb.replaceActiveFormattingElement(node, replacement);\n                                tb.replaceOnStack(node, replacement);\n                                node = replacement;\n\n                                if (lastNode == furthestBlock) {\n                                    // todo: move the aforementioned bookmark to be immediately after the new node in the list of active formatting elements.\n                                    // not getting how this bookmark both straddles the element above, but is inbetween here...\n                                }\n                                if (lastNode.parent() != null)\n                                    lastNode.remove();\n                                node.appendChild(lastNode);\n\n                                lastNode = node;\n                            }\n\n                            if (StringUtil.inSorted(commonAncestor.nodeName(), Constants.InBodyEndTableFosters)) {\n                                if (lastNode.parent() != null)\n                                    lastNode.remove();\n                                tb.insertInFosterParent(lastNode);\n                            } else {\n                                if (lastNode.parent() != null)\n                                    lastNode.remove();\n                                commonAncestor.appendChild(lastNode);\n                            }\n\n                            Element adopter = new Element(formatEl.tag(), tb.getBaseUri());\n                            adopter.attributes().addAll(formatEl.attributes());\n                            Node[] childNodes = furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()]);\n                            for (Node childNode : childNodes) {\n                                adopter.appendChild(childNode); // append will reparent. thus the clone to avoid concurrent mod.\n                            }\n                            furthestBlock.appendChild(adopter);\n                            tb.removeFromActiveFormattingElements(formatEl);\n                            // todo: insert the new element into the list of active formatting elements at the position of the aforementioned bookmark.\n                            tb.removeFromStack(formatEl);\n                            tb.insertOnStackAfter(furthestBlock, adopter);\n                        }\n                    } else if (StringUtil.inSorted(name, Constants.InBodyEndClosers)) {\n                        if (!tb.inScope(name)) {\n                            // nothing to close\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.generateImpliedEndTags();\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(name);\n                        }\n                    } else if (name.equals(\"span\")) {\n                        // same as final fall through, but saves short circuit\n                        return anyOtherEndTag(t, tb);\n                    } else if (name.equals(\"li\")) {\n                        if (!tb.inListItemScope(name)) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.generateImpliedEndTags(name);\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(name);\n                        }\n                    } else if (name.equals(\"body\")) {\n                        if (!tb.inScope(\"body\")) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            // todo: error if stack contains something not dd, dt, li, optgroup, option, p, rp, rt, tbody, td, tfoot, th, thead, tr, body, html\n                            tb.transition(AfterBody);\n                        }\n                    } else if (name.equals(\"html\")) {\n                        boolean notIgnored = tb.processEndTag(\"body\");\n                        if (notIgnored)\n                            return tb.process(endTag);\n                    } else if (name.equals(\"form\")) {\n                        Element currentForm = tb.getFormElement();\n                        tb.setFormElement(null);\n                        if (currentForm == null || !tb.inScope(name)) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.generateImpliedEndTags();\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            // remove currentForm from stack. will shift anything under up.\n                            tb.removeFromStack(currentForm);\n                        }\n                    } else if (name.equals(\"p\")) {\n                        if (!tb.inButtonScope(name)) {\n                            tb.error(this);\n                            tb.processStartTag(name); // if no p to close, creates an empty <p></p>\n                            return tb.process(endTag);\n                        } else {\n                            tb.generateImpliedEndTags(name);\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(name);\n                        }\n                    } else if (StringUtil.inSorted(name, Constants.DdDt)) {\n                        if (!tb.inScope(name)) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.generateImpliedEndTags(name);\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(name);\n                        }\n                    } else if (StringUtil.inSorted(name, Constants.Headings)) {\n                        if (!tb.inScope(Constants.Headings)) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.generateImpliedEndTags(name);\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(Constants.Headings);\n                        }\n                    } else if (name.equals(\"sarcasm\")) {\n                        // *sigh*\n                        return anyOtherEndTag(t, tb);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) {\n                        if (!tb.inScope(\"name\")) {\n                            if (!tb.inScope(name)) {\n                                tb.error(this);\n                                return false;\n                            }\n                            tb.generateImpliedEndTags();\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(name);\n                            tb.clearFormattingElementsToLastMarker();\n                        }\n                    } else if (name.equals(\"br\")) {\n                        tb.error(this);\n                        tb.processStartTag(\"br\");\n                        return false;\n                    } else {\n                        return anyOtherEndTag(t, tb);\n                    }\n\n                    break;\n                case EOF:\n                    // todo: error if stack contains something not dd, dt, li, p, tbody, td, tfoot, th, thead, tr, body, html\n                    // stop parsing\n                    break;\n            }",
    "info" : "SwitchStatement[10127-38413]:SwitchStatement[10127-38413]"
  }, {
    "left" : "case Character:",
    "right" : "case Character:",
    "info" : "SwitchCase[10161-10176]:SwitchCase[10161-10176]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10177-10883]:Block[10177-10883]"
  }, {
    "left" : "Token.Character c = t.asCharacter();",
    "right" : "Token.Character c = t.asCharacter();",
    "info" : "VariableDeclarationStatement[10199-10235]:VariableDeclarationStatement[10199-10235]"
  }, {
    "left" : "if (c.getData().equals(nullString))",
    "right" : "if (c.getData().equals(nullString))",
    "info" : "IfStatement[10256-10838]:IfStatement[10256-10838]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10292-10444]:Block[10292-10444]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[10369-10384]:ExpressionStatement[10369-10384]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[10409-10422]:ReturnStatement[10409-10422]"
  }, {
    "left" : "if (tb.framesetOk() && isWhitespace(c))",
    "right" : "if (tb.framesetOk() && isWhitespace(c))",
    "info" : "IfStatement[10450-10838]:IfStatement[10450-10838]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10490-10665]:Block[10490-10665]"
  }, {
    "left" : "tb.reconstructFormattingElements();",
    "right" : "tb.reconstructFormattingElements();",
    "info" : "ExpressionStatement[10570-10605]:ExpressionStatement[10570-10605]"
  }, {
    "left" : "tb.insert(c);",
    "right" : "tb.insert(c);",
    "info" : "ExpressionStatement[10630-10643]:ExpressionStatement[10630-10643]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10671-10838]:Block[10671-10838]"
  }, {
    "left" : "tb.reconstructFormattingElements();",
    "right" : "tb.reconstructFormattingElements();",
    "info" : "ExpressionStatement[10697-10732]:ExpressionStatement[10697-10732]"
  }, {
    "left" : "tb.insert(c);",
    "right" : "tb.insert(c);",
    "info" : "ExpressionStatement[10757-10770]:ExpressionStatement[10757-10770]"
  }, {
    "left" : "tb.framesetOk(false);",
    "right" : "tb.framesetOk(false);",
    "info" : "ExpressionStatement[10795-10816]:ExpressionStatement[10795-10816]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[10859-10865]:BreakStatement[10859-10865]"
  }, {
    "left" : "case Comment:",
    "right" : "case Comment:",
    "info" : "SwitchCase[10900-10913]:SwitchCase[10900-10913]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10914-11006]:Block[10914-11006]"
  }, {
    "left" : "tb.insert(t.asComment());",
    "right" : "tb.insert(t.asComment());",
    "info" : "ExpressionStatement[10936-10961]:ExpressionStatement[10936-10961]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[10982-10988]:BreakStatement[10982-10988]"
  }, {
    "left" : "case Doctype:",
    "right" : "case Doctype:",
    "info" : "SwitchCase[11023-11036]:SwitchCase[11023-11036]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11037-11126]:Block[11037-11126]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[11059-11074]:ExpressionStatement[11059-11074]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[11095-11108]:ReturnStatement[11095-11108]"
  }, {
    "left" : "case StartTag:",
    "right" : "case StartTag:",
    "info" : "SwitchCase[11143-11157]:SwitchCase[11143-11157]"
  }, {
    "left" : "Token.StartTag startTag = t.asStartTag();",
    "right" : "Token.StartTag startTag = t.asStartTag();",
    "info" : "VariableDeclarationStatement[11178-11219]:VariableDeclarationStatement[11178-11219]"
  }, {
    "left" : "String name = startTag.normalName();",
    "right" : "String name = startTag.normalName();",
    "info" : "VariableDeclarationStatement[11240-11276]:VariableDeclarationStatement[11240-11276]"
  }, {
    "left" : "if (name.equals(\"a\"))",
    "right" : "if (name.equals(\"a\"))",
    "info" : "IfStatement[11297-26818]:IfStatement[11297-26818]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11319-12064]:Block[11319-12064]"
  }, {
    "left" : "if (tb.getActiveFormattingElement(\"a\") != null)",
    "right" : "if (tb.getActiveFormattingElement(\"a\") != null)",
    "info" : "IfStatement[11345-11865]:IfStatement[11345-11865]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11393-11865]:Block[11393-11865]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[11423-11438]:ExpressionStatement[11423-11438]"
  }, {
    "left" : "tb.processEndTag(\"a\");",
    "right" : "tb.processEndTag(\"a\");",
    "info" : "ExpressionStatement[11467-11489]:ExpressionStatement[11467-11489]"
  }, {
    "left" : "Element remainingA = tb.getFromStack(\"a\");",
    "right" : "Element remainingA = tb.getFromStack(\"a\");",
    "info" : "VariableDeclarationStatement[11566-11608]:VariableDeclarationStatement[11566-11608]"
  }, {
    "left" : "if (remainingA != null)",
    "right" : "if (remainingA != null)",
    "info" : "IfStatement[11637-11839]:IfStatement[11637-11839]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11661-11839]:Block[11661-11839]"
  }, {
    "left" : "tb.removeFromActiveFormattingElements(remainingA);",
    "right" : "tb.removeFromActiveFormattingElements(remainingA);",
    "info" : "ExpressionStatement[11695-11745]:ExpressionStatement[11695-11745]"
  }, {
    "left" : "tb.removeFromStack(remainingA);",
    "right" : "tb.removeFromStack(remainingA);",
    "info" : "ExpressionStatement[11778-11809]:ExpressionStatement[11778-11809]"
  }, {
    "left" : "tb.reconstructFormattingElements();",
    "right" : "tb.reconstructFormattingElements();",
    "info" : "ExpressionStatement[11890-11925]:ExpressionStatement[11890-11925]"
  }, {
    "left" : "Element a = tb.insert(startTag);",
    "right" : "Element a = tb.insert(startTag);",
    "info" : "VariableDeclarationStatement[11950-11982]:VariableDeclarationStatement[11950-11982]"
  }, {
    "left" : "tb.pushActiveFormattingElements(a);",
    "right" : "tb.pushActiveFormattingElements(a);",
    "info" : "ExpressionStatement[12007-12042]:ExpressionStatement[12007-12042]"
  }, {
    "left" : "if (StringUtil.inSorted(name, Constants.InBodyStartEmptyFormatters))",
    "right" : "if (StringUtil.inSorted(name, Constants.InBodyStartEmptyFormatters))",
    "info" : "IfStatement[12070-26818]:IfStatement[12070-26818]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12139-12318]:Block[12139-12318]"
  }, {
    "left" : "tb.reconstructFormattingElements();",
    "right" : "tb.reconstructFormattingElements();",
    "info" : "ExpressionStatement[12165-12200]:ExpressionStatement[12165-12200]"
  }, {
    "left" : "tb.insertEmpty(startTag);",
    "right" : "tb.insertEmpty(startTag);",
    "info" : "ExpressionStatement[12225-12250]:ExpressionStatement[12225-12250]"
  }, {
    "left" : "tb.framesetOk(false);",
    "right" : "tb.framesetOk(false);",
    "info" : "ExpressionStatement[12275-12296]:ExpressionStatement[12275-12296]"
  }, {
    "left" : "if (StringUtil.inSorted(name, Constants.InBodyStartPClosers))",
    "right" : "if (StringUtil.inSorted(name, Constants.InBodyStartPClosers))",
    "info" : "IfStatement[12324-26818]:IfStatement[12324-26818]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12386-12584]:Block[12386-12584]"
  }, {
    "left" : "if (tb.inButtonScope(\"p\"))",
    "right" : "if (tb.inButtonScope(\"p\"))",
    "info" : "IfStatement[12412-12517]:IfStatement[12412-12517]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12439-12517]:Block[12439-12517]"
  }, {
    "left" : "tb.processEndTag(\"p\");",
    "right" : "tb.processEndTag(\"p\");",
    "info" : "ExpressionStatement[12469-12491]:ExpressionStatement[12469-12491]"
  }, {
    "left" : "tb.insert(startTag);",
    "right" : "tb.insert(startTag);",
    "info" : "ExpressionStatement[12542-12562]:ExpressionStatement[12542-12562]"
  }, {
    "left" : "if (name.equals(\"span\"))",
    "right" : "if (name.equals(\"span\"))",
    "info" : "IfStatement[12590-26818]:IfStatement[12590-26818]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12615-12824]:Block[12615-12824]"
  }, {
    "left" : "tb.reconstructFormattingElements();",
    "right" : "tb.reconstructFormattingElements();",
    "info" : "ExpressionStatement[12722-12757]:ExpressionStatement[12722-12757]"
  }, {
    "left" : "tb.insert(startTag);",
    "right" : "tb.insert(startTag);",
    "info" : "ExpressionStatement[12782-12802]:ExpressionStatement[12782-12802]"
  }, {
    "left" : "if (name.equals(\"li\"))",
    "right" : "if (name.equals(\"li\"))",
    "info" : "IfStatement[12830-26818]:IfStatement[12830-26818]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12853-13661]:Block[12853-13661]"
  }, {
    "left" : "tb.framesetOk(false);",
    "right" : "tb.framesetOk(false);",
    "info" : "ExpressionStatement[12879-12900]:ExpressionStatement[12879-12900]"
  }, {
    "left" : "ArrayList<Element> stack = tb.getStack();",
    "right" : "ArrayList<Element> stack = tb.getStack();",
    "info" : "VariableDeclarationStatement[12925-12966]:VariableDeclarationStatement[12925-12966]"
  }, {
    "left" : "for (int i = stack.size() - 1; i > 0; i--)",
    "right" : "for (int i = stack.size() - 1; i > 0; i--)",
    "info" : "ForStatement[12991-13464]:ForStatement[12991-13464]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13034-13464]:Block[13034-13464]"
  }, {
    "left" : "Element el = stack.get(i);",
    "right" : "Element el = stack.get(i);",
    "info" : "VariableDeclarationStatement[13064-13090]:VariableDeclarationStatement[13064-13090]"
  }, {
    "left" : "if (el.nodeName().equals(\"li\"))",
    "right" : "if (el.nodeName().equals(\"li\"))",
    "info" : "IfStatement[13119-13277]:IfStatement[13119-13277]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13151-13277]:Block[13151-13277]"
  }, {
    "left" : "tb.processEndTag(\"li\");",
    "right" : "tb.processEndTag(\"li\");",
    "info" : "ExpressionStatement[13185-13208]:ExpressionStatement[13185-13208]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[13241-13247]:BreakStatement[13241-13247]"
  }, {
    "left" : "if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers))",
    "right" : "if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers))",
    "info" : "IfStatement[13306-13438]:IfStatement[13306-13438]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[13432-13438]:BreakStatement[13432-13438]"
  }, {
    "left" : "if (tb.inButtonScope(\"p\"))",
    "right" : "if (tb.inButtonScope(\"p\"))",
    "info" : "IfStatement[13489-13594]:IfStatement[13489-13594]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13516-13594]:Block[13516-13594]"
  }, {
    "left" : "tb.processEndTag(\"p\");",
    "right" : "tb.processEndTag(\"p\");",
    "info" : "ExpressionStatement[13546-13568]:ExpressionStatement[13546-13568]"
  }, {
    "left" : "tb.insert(startTag);",
    "right" : "tb.insert(startTag);",
    "info" : "ExpressionStatement[13619-13639]:ExpressionStatement[13619-13639]"
  }, {
    "left" : "if (name.equals(\"html\"))",
    "right" : "if (name.equals(\"html\"))",
    "info" : "IfStatement[13667-26818]:IfStatement[13667-26818]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13692-14113]:Block[13692-14113]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[13718-13733]:ExpressionStatement[13718-13733]"
  }, {
    "left" : "Element html = tb.getStack().get(0);",
    "right" : "Element html = tb.getStack().get(0);",
    "info" : "VariableDeclarationStatement[13817-13853]:VariableDeclarationStatement[13817-13853]"
  }, {
    "left" : "for (Attribute attribute : startTag.getAttributes())",
    "right" : "for (Attribute attribute : startTag.getAttributes())",
    "info" : "EnhancedForStatement[13878-14091]:EnhancedForStatement[13878-14091]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13931-14091]:Block[13931-14091]"
  }, {
    "left" : "if (!html.hasAttr(attribute.getKey()))",
    "right" : "if (!html.hasAttr(attribute.getKey()))",
    "info" : "IfStatement[13961-14065]:IfStatement[13961-14065]"
  }, {
    "left" : "html.attributes().put(attribute);",
    "right" : "html.attributes().put(attribute);",
    "info" : "ExpressionStatement[14032-14065]:ExpressionStatement[14032-14065]"
  }, {
    "left" : "if (StringUtil.inSorted(name, Constants.InBodyStartToHead))",
    "right" : "if (StringUtil.inSorted(name, Constants.InBodyStartToHead))",
    "info" : "IfStatement[14119-26818]:IfStatement[14119-26818]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14179-14256]:Block[14179-14256]"
  }, {
    "left" : "return tb.process(t, InHead);",
    "right" : "return tb.process(t, InHead);",
    "info" : "ReturnStatement[14205-14234]:ReturnStatement[14205-14234]"
  }, {
    "left" : "if (name.equals(\"body\"))",
    "right" : "if (name.equals(\"body\"))",
    "info" : "IfStatement[14262-26818]:IfStatement[14262-26818]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14287-15055]:Block[14287-15055]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[14313-14328]:ExpressionStatement[14313-14328]"
  }, {
    "left" : "ArrayList<Element> stack = tb.getStack();",
    "right" : "ArrayList<Element> stack = tb.getStack();",
    "info" : "VariableDeclarationStatement[14353-14394]:VariableDeclarationStatement[14353-14394]"
  }, {
    "left" : "if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\")))",
    "right" : "if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\")))",
    "info" : "IfStatement[14419-15033]:IfStatement[14419-15033]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14507-14639]:Block[14507-14639]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[14590-14603]:ReturnStatement[14590-14603]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14645-15033]:Block[14645-15033]"
  }, {
    "left" : "tb.framesetOk(false);",
    "right" : "tb.framesetOk(false);",
    "info" : "ExpressionStatement[14675-14696]:ExpressionStatement[14675-14696]"
  }, {
    "left" : "Element body = stack.get(1);",
    "right" : "Element body = stack.get(1);",
    "info" : "VariableDeclarationStatement[14725-14753]:VariableDeclarationStatement[14725-14753]"
  }, {
    "left" : "for (Attribute attribute : startTag.getAttributes())",
    "right" : "for (Attribute attribute : startTag.getAttributes())",
    "info" : "EnhancedForStatement[14782-15007]:EnhancedForStatement[14782-15007]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14835-15007]:Block[14835-15007]"
  }, {
    "left" : "if (!body.hasAttr(attribute.getKey()))",
    "right" : "if (!body.hasAttr(attribute.getKey()))",
    "info" : "IfStatement[14869-14977]:IfStatement[14869-14977]"
  }, {
    "left" : "body.attributes().put(attribute);",
    "right" : "body.attributes().put(attribute);",
    "info" : "ExpressionStatement[14944-14977]:ExpressionStatement[14944-14977]"
  }, {
    "left" : "if (name.equals(\"frameset\"))",
    "right" : "if (name.equals(\"frameset\"))",
    "info" : "IfStatement[15061-26818]:IfStatement[15061-26818]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15090-16051]:Block[15090-16051]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[15116-15131]:ExpressionStatement[15116-15131]"
  }, {
    "left" : "ArrayList<Element> stack = tb.getStack();",
    "right" : "ArrayList<Element> stack = tb.getStack();",
    "info" : "VariableDeclarationStatement[15156-15197]:VariableDeclarationStatement[15156-15197]"
  }, {
    "left" : "if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\")))",
    "right" : "if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\")))",
    "info" : "IfStatement[15222-16029]:IfStatement[15222-16029]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15310-15442]:Block[15310-15442]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[15393-15406]:ReturnStatement[15393-15406]"
  }, {
    "left" : "if (!tb.framesetOk())",
    "right" : "if (!tb.framesetOk())",
    "info" : "IfStatement[15448-16029]:IfStatement[15448-16029]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15470-15558]:Block[15470-15558]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[15500-15513]:ReturnStatement[15500-15513]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15564-16029]:Block[15564-16029]"
  }, {
    "left" : "Element second = stack.get(1);",
    "right" : "Element second = stack.get(1);",
    "info" : "VariableDeclarationStatement[15594-15624]:VariableDeclarationStatement[15594-15624]"
  }, {
    "left" : "if (second.parent() != null)",
    "right" : "if (second.parent() != null)",
    "info" : "IfStatement[15653-15730]:IfStatement[15653-15730]"
  }, {
    "left" : "second.remove();",
    "right" : "second.remove();",
    "info" : "ExpressionStatement[15714-15730]:ExpressionStatement[15714-15730]"
  }, {
    "left" : "while (stack.size() > 1)\n                                stack.remove(stack.size()-1);",
    "right" : "while (stack.size() > 1)\n                                stack.remove(stack.size()-1);",
    "info" : "WhileStatement[15813-15899]:WhileStatement[15813-15899]"
  }, {
    "left" : "stack.remove(stack.size()-1);",
    "right" : "stack.remove(stack.size()-1);",
    "info" : "ExpressionStatement[15870-15899]:ExpressionStatement[15870-15899]"
  }, {
    "left" : "tb.insert(startTag);",
    "right" : "tb.insert(startTag);",
    "info" : "ExpressionStatement[15928-15948]:ExpressionStatement[15928-15948]"
  }, {
    "left" : "tb.transition(InFrameset);",
    "right" : "tb.transition(InFrameset);",
    "info" : "ExpressionStatement[15977-16003]:ExpressionStatement[15977-16003]"
  }, {
    "left" : "if (StringUtil.inSorted(name, Constants.Headings))",
    "right" : "if (StringUtil.inSorted(name, Constants.Headings))",
    "info" : "IfStatement[16057-26818]:IfStatement[16057-26818]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16108-16517]:Block[16108-16517]"
  }, {
    "left" : "if (tb.inButtonScope(\"p\"))",
    "right" : "if (tb.inButtonScope(\"p\"))",
    "info" : "IfStatement[16134-16239]:IfStatement[16134-16239]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16161-16239]:Block[16161-16239]"
  }, {
    "left" : "tb.processEndTag(\"p\");",
    "right" : "tb.processEndTag(\"p\");",
    "info" : "ExpressionStatement[16191-16213]:ExpressionStatement[16191-16213]"
  }, {
    "left" : "if (StringUtil.inSorted(tb.currentElement().nodeName(), Constants.Headings))",
    "right" : "if (StringUtil.inSorted(tb.currentElement().nodeName(), Constants.Headings))",
    "info" : "IfStatement[16264-16450]:IfStatement[16264-16450]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16341-16450]:Block[16341-16450]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[16371-16386]:ExpressionStatement[16371-16386]"
  }, {
    "left" : "tb.pop();",
    "right" : "tb.pop();",
    "info" : "ExpressionStatement[16415-16424]:ExpressionStatement[16415-16424]"
  }, {
    "left" : "tb.insert(startTag);",
    "right" : "tb.insert(startTag);",
    "info" : "ExpressionStatement[16475-16495]:ExpressionStatement[16475-16495]"
  }, {
    "left" : "if (StringUtil.inSorted(name, Constants.InBodyStartPreListing))",
    "right" : "if (StringUtil.inSorted(name, Constants.InBodyStartPreListing))",
    "info" : "IfStatement[16523-26818]:IfStatement[16523-26818]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16587-16888]:Block[16587-16888]"
  }, {
    "left" : "if (tb.inButtonScope(\"p\"))",
    "right" : "if (tb.inButtonScope(\"p\"))",
    "info" : "IfStatement[16613-16718]:IfStatement[16613-16718]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16640-16718]:Block[16640-16718]"
  }, {
    "left" : "tb.processEndTag(\"p\");",
    "right" : "tb.processEndTag(\"p\");",
    "info" : "ExpressionStatement[16670-16692]:ExpressionStatement[16670-16692]"
  }, {
    "left" : "tb.insert(startTag);",
    "right" : "tb.insert(startTag);",
    "info" : "ExpressionStatement[16743-16763]:ExpressionStatement[16743-16763]"
  }, {
    "left" : "tb.framesetOk(false);",
    "right" : "tb.framesetOk(false);",
    "info" : "ExpressionStatement[16845-16866]:ExpressionStatement[16845-16866]"
  }, {
    "left" : "if (name.equals(\"form\"))",
    "right" : "if (name.equals(\"form\"))",
    "info" : "IfStatement[16894-26818]:IfStatement[16894-26818]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16919-17298]:Block[16919-17298]"
  }, {
    "left" : "if (tb.getFormElement() != null)",
    "right" : "if (tb.getFormElement() != null)",
    "info" : "IfStatement[16945-17091]:IfStatement[16945-17091]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16978-17091]:Block[16978-17091]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[17008-17023]:ExpressionStatement[17008-17023]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[17052-17065]:ReturnStatement[17052-17065]"
  }, {
    "left" : "if (tb.inButtonScope(\"p\"))",
    "right" : "if (tb.inButtonScope(\"p\"))",
    "info" : "IfStatement[17116-17221]:IfStatement[17116-17221]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17143-17221]:Block[17143-17221]"
  }, {
    "left" : "tb.processEndTag(\"p\");",
    "right" : "tb.processEndTag(\"p\");",
    "info" : "ExpressionStatement[17173-17195]:ExpressionStatement[17173-17195]"
  }, {
    "left" : "tb.insertForm(startTag, true);",
    "right" : "tb.insertForm(startTag, true);",
    "info" : "ExpressionStatement[17246-17276]:ExpressionStatement[17246-17276]"
  }, {
    "left" : "if (StringUtil.inSorted(name, Constants.DdDt))",
    "right" : "if (StringUtil.inSorted(name, Constants.DdDt))",
    "info" : "IfStatement[17304-26818]:IfStatement[17304-26818]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17351-18192]:Block[17351-18192]"
  }, {
    "left" : "tb.framesetOk(false);",
    "right" : "tb.framesetOk(false);",
    "info" : "ExpressionStatement[17377-17398]:ExpressionStatement[17377-17398]"
  }, {
    "left" : "ArrayList<Element> stack = tb.getStack();",
    "right" : "ArrayList<Element> stack = tb.getStack();",
    "info" : "VariableDeclarationStatement[17423-17464]:VariableDeclarationStatement[17423-17464]"
  }, {
    "left" : "for (int i = stack.size() - 1; i > 0; i--)",
    "right" : "for (int i = stack.size() - 1; i > 0; i--)",
    "info" : "ForStatement[17489-17995]:ForStatement[17489-17995]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17532-17995]:Block[17532-17995]"
  }, {
    "left" : "Element el = stack.get(i);",
    "right" : "Element el = stack.get(i);",
    "info" : "VariableDeclarationStatement[17562-17588]:VariableDeclarationStatement[17562-17588]"
  }, {
    "left" : "if (StringUtil.inSorted(el.nodeName(), Constants.DdDt))",
    "right" : "if (StringUtil.inSorted(el.nodeName(), Constants.DdDt))",
    "info" : "IfStatement[17617-17808]:IfStatement[17617-17808]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17673-17808]:Block[17673-17808]"
  }, {
    "left" : "tb.processEndTag(el.nodeName());",
    "right" : "tb.processEndTag(el.nodeName());",
    "info" : "ExpressionStatement[17707-17739]:ExpressionStatement[17707-17739]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[17772-17778]:BreakStatement[17772-17778]"
  }, {
    "left" : "if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers))",
    "right" : "if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers))",
    "info" : "IfStatement[17837-17969]:IfStatement[17837-17969]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[17963-17969]:BreakStatement[17963-17969]"
  }, {
    "left" : "if (tb.inButtonScope(\"p\"))",
    "right" : "if (tb.inButtonScope(\"p\"))",
    "info" : "IfStatement[18020-18125]:IfStatement[18020-18125]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18047-18125]:Block[18047-18125]"
  }, {
    "left" : "tb.processEndTag(\"p\");",
    "right" : "tb.processEndTag(\"p\");",
    "info" : "ExpressionStatement[18077-18099]:ExpressionStatement[18077-18099]"
  }, {
    "left" : "tb.insert(startTag);",
    "right" : "tb.insert(startTag);",
    "info" : "ExpressionStatement[18150-18170]:ExpressionStatement[18150-18170]"
  }, {
    "left" : "if (name.equals(\"plaintext\"))",
    "right" : "if (name.equals(\"plaintext\"))",
    "info" : "IfStatement[18198-26818]:IfStatement[18198-26818]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18228-18528]:Block[18228-18528]"
  }, {
    "left" : "if (tb.inButtonScope(\"p\"))",
    "right" : "if (tb.inButtonScope(\"p\"))",
    "info" : "IfStatement[18254-18359]:IfStatement[18254-18359]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18281-18359]:Block[18281-18359]"
  }, {
    "left" : "tb.processEndTag(\"p\");",
    "right" : "tb.processEndTag(\"p\");",
    "info" : "ExpressionStatement[18311-18333]:ExpressionStatement[18311-18333]"
  }, {
    "left" : "tb.insert(startTag);",
    "right" : "tb.insert(startTag);",
    "info" : "ExpressionStatement[18384-18404]:ExpressionStatement[18384-18404]"
  }, {
    "left" : "tb.tokeniser.transition(TokeniserState.PLAINTEXT);",
    "right" : "tb.tokeniser.transition(TokeniserState.PLAINTEXT);",
    "info" : "ExpressionStatement[18429-18479]:ExpressionStatement[18429-18479]"
  }, {
    "left" : "if (name.equals(\"button\"))",
    "right" : "if (name.equals(\"button\"))",
    "info" : "IfStatement[18534-26818]:IfStatement[18534-26818]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18561-19065]:Block[18561-19065]"
  }, {
    "left" : "if (tb.inButtonScope(\"button\"))",
    "right" : "if (tb.inButtonScope(\"button\"))",
    "info" : "IfStatement[18587-19043]:IfStatement[18587-19043]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18619-18847]:Block[18619-18847]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[18700-18715]:ExpressionStatement[18700-18715]"
  }, {
    "left" : "tb.processEndTag(\"button\");",
    "right" : "tb.processEndTag(\"button\");",
    "info" : "ExpressionStatement[18744-18771]:ExpressionStatement[18744-18771]"
  }, {
    "left" : "tb.process(startTag);",
    "right" : "tb.process(startTag);",
    "info" : "ExpressionStatement[18800-18821]:ExpressionStatement[18800-18821]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18853-19043]:Block[18853-19043]"
  }, {
    "left" : "tb.reconstructFormattingElements();",
    "right" : "tb.reconstructFormattingElements();",
    "info" : "ExpressionStatement[18883-18918]:ExpressionStatement[18883-18918]"
  }, {
    "left" : "tb.insert(startTag);",
    "right" : "tb.insert(startTag);",
    "info" : "ExpressionStatement[18947-18967]:ExpressionStatement[18947-18967]"
  }, {
    "left" : "tb.framesetOk(false);",
    "right" : "tb.framesetOk(false);",
    "info" : "ExpressionStatement[18996-19017]:ExpressionStatement[18996-19017]"
  }, {
    "left" : "if (StringUtil.inSorted(name, Constants.Formatters))",
    "right" : "if (StringUtil.inSorted(name, Constants.Formatters))",
    "info" : "IfStatement[19071-26818]:IfStatement[19071-26818]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19124-19326]:Block[19124-19326]"
  }, {
    "left" : "tb.reconstructFormattingElements();",
    "right" : "tb.reconstructFormattingElements();",
    "info" : "ExpressionStatement[19150-19185]:ExpressionStatement[19150-19185]"
  }, {
    "left" : "Element el = tb.insert(startTag);",
    "right" : "Element el = tb.insert(startTag);",
    "info" : "VariableDeclarationStatement[19210-19243]:VariableDeclarationStatement[19210-19243]"
  }, {
    "left" : "tb.pushActiveFormattingElements(el);",
    "right" : "tb.pushActiveFormattingElements(el);",
    "info" : "ExpressionStatement[19268-19304]:ExpressionStatement[19268-19304]"
  }, {
    "left" : "if (name.equals(\"nobr\"))",
    "right" : "if (name.equals(\"nobr\"))",
    "info" : "IfStatement[19332-26818]:IfStatement[19332-26818]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19357-19797]:Block[19357-19797]"
  }, {
    "left" : "tb.reconstructFormattingElements();",
    "right" : "tb.reconstructFormattingElements();",
    "info" : "ExpressionStatement[19383-19418]:ExpressionStatement[19383-19418]"
  }, {
    "left" : "if (tb.inScope(\"nobr\"))",
    "right" : "if (tb.inScope(\"nobr\"))",
    "info" : "IfStatement[19443-19656]:IfStatement[19443-19656]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19467-19656]:Block[19467-19656]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[19497-19512]:ExpressionStatement[19497-19512]"
  }, {
    "left" : "tb.processEndTag(\"nobr\");",
    "right" : "tb.processEndTag(\"nobr\");",
    "info" : "ExpressionStatement[19541-19566]:ExpressionStatement[19541-19566]"
  }, {
    "left" : "tb.reconstructFormattingElements();",
    "right" : "tb.reconstructFormattingElements();",
    "info" : "ExpressionStatement[19595-19630]:ExpressionStatement[19595-19630]"
  }, {
    "left" : "Element el = tb.insert(startTag);",
    "right" : "Element el = tb.insert(startTag);",
    "info" : "VariableDeclarationStatement[19681-19714]:VariableDeclarationStatement[19681-19714]"
  }, {
    "left" : "tb.pushActiveFormattingElements(el);",
    "right" : "tb.pushActiveFormattingElements(el);",
    "info" : "ExpressionStatement[19739-19775]:ExpressionStatement[19739-19775]"
  }, {
    "left" : "if (StringUtil.inSorted(name, Constants.InBodyStartApplets))",
    "right" : "if (StringUtil.inSorted(name, Constants.InBodyStartApplets))",
    "info" : "IfStatement[19803-26818]:IfStatement[19803-26818]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19864-20101]:Block[19864-20101]"
  }, {
    "left" : "tb.reconstructFormattingElements();",
    "right" : "tb.reconstructFormattingElements();",
    "info" : "ExpressionStatement[19890-19925]:ExpressionStatement[19890-19925]"
  }, {
    "left" : "tb.insert(startTag);",
    "right" : "tb.insert(startTag);",
    "info" : "ExpressionStatement[19950-19970]:ExpressionStatement[19950-19970]"
  }, {
    "left" : "tb.insertMarkerToFormattingElements();",
    "right" : "tb.insertMarkerToFormattingElements();",
    "info" : "ExpressionStatement[19995-20033]:ExpressionStatement[19995-20033]"
  }, {
    "left" : "tb.framesetOk(false);",
    "right" : "tb.framesetOk(false);",
    "info" : "ExpressionStatement[20058-20079]:ExpressionStatement[20058-20079]"
  }, {
    "left" : "if (name.equals(\"table\"))",
    "right" : "if (name.equals(\"table\"))",
    "info" : "IfStatement[20107-26818]:IfStatement[20107-26818]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20133-20488]:Block[20133-20488]"
  }, {
    "left" : "if (tb.getDocument().quirksMode() != Document.QuirksMode.quirks && tb.inButtonScope(\"p\"))",
    "right" : "if (tb.getDocument().quirksMode() != Document.QuirksMode.quirks && tb.inButtonScope(\"p\"))",
    "info" : "IfStatement[20159-20327]:IfStatement[20159-20327]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20249-20327]:Block[20249-20327]"
  }, {
    "left" : "tb.processEndTag(\"p\");",
    "right" : "tb.processEndTag(\"p\");",
    "info" : "ExpressionStatement[20279-20301]:ExpressionStatement[20279-20301]"
  }, {
    "left" : "tb.insert(startTag);",
    "right" : "tb.insert(startTag);",
    "info" : "ExpressionStatement[20352-20372]:ExpressionStatement[20352-20372]"
  }, {
    "left" : "tb.framesetOk(false);",
    "right" : "tb.framesetOk(false);",
    "info" : "ExpressionStatement[20397-20418]:ExpressionStatement[20397-20418]"
  }, {
    "left" : "tb.transition(InTable);",
    "right" : "tb.transition(InTable);",
    "info" : "ExpressionStatement[20443-20466]:ExpressionStatement[20443-20466]"
  }, {
    "left" : "if (name.equals(\"input\"))",
    "right" : "if (name.equals(\"input\"))",
    "info" : "IfStatement[20494-26818]:IfStatement[20494-26818]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20520-20789]:Block[20520-20789]"
  }, {
    "left" : "tb.reconstructFormattingElements();",
    "right" : "tb.reconstructFormattingElements();",
    "info" : "ExpressionStatement[20546-20581]:ExpressionStatement[20546-20581]"
  }, {
    "left" : "Element el = tb.insertEmpty(startTag);",
    "right" : "Element el = tb.insertEmpty(startTag);",
    "info" : "VariableDeclarationStatement[20606-20644]:VariableDeclarationStatement[20606-20644]"
  }, {
    "left" : "if (!el.attr(\"type\").equalsIgnoreCase(\"hidden\"))",
    "right" : "if (!el.attr(\"type\").equalsIgnoreCase(\"hidden\"))",
    "info" : "IfStatement[20669-20767]:IfStatement[20669-20767]"
  }, {
    "left" : "tb.framesetOk(false);",
    "right" : "tb.framesetOk(false);",
    "info" : "ExpressionStatement[20746-20767]:ExpressionStatement[20746-20767]"
  }, {
    "left" : "if (StringUtil.inSorted(name, Constants.InBodyStartMedia))",
    "right" : "if (StringUtil.inSorted(name, Constants.InBodyStartMedia))",
    "info" : "IfStatement[20795-26818]:IfStatement[20795-26818]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20854-20927]:Block[20854-20927]"
  }, {
    "left" : "tb.insertEmpty(startTag);",
    "right" : "tb.insertEmpty(startTag);",
    "info" : "ExpressionStatement[20880-20905]:ExpressionStatement[20880-20905]"
  }, {
    "left" : "if (name.equals(\"hr\"))",
    "right" : "if (name.equals(\"hr\"))",
    "info" : "IfStatement[20933-26818]:IfStatement[20933-26818]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20956-21205]:Block[20956-21205]"
  }, {
    "left" : "if (tb.inButtonScope(\"p\"))",
    "right" : "if (tb.inButtonScope(\"p\"))",
    "info" : "IfStatement[20982-21087]:IfStatement[20982-21087]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21009-21087]:Block[21009-21087]"
  }, {
    "left" : "tb.processEndTag(\"p\");",
    "right" : "tb.processEndTag(\"p\");",
    "info" : "ExpressionStatement[21039-21061]:ExpressionStatement[21039-21061]"
  }, {
    "left" : "tb.insertEmpty(startTag);",
    "right" : "tb.insertEmpty(startTag);",
    "info" : "ExpressionStatement[21112-21137]:ExpressionStatement[21112-21137]"
  }, {
    "left" : "tb.framesetOk(false);",
    "right" : "tb.framesetOk(false);",
    "info" : "ExpressionStatement[21162-21183]:ExpressionStatement[21162-21183]"
  }, {
    "left" : "if (name.equals(\"image\"))",
    "right" : "if (name.equals(\"image\"))",
    "info" : "IfStatement[21211-26818]:IfStatement[21211-26818]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21237-21509]:Block[21237-21509]"
  }, {
    "left" : "if (tb.getFromStack(\"svg\") == null)",
    "right" : "if (tb.getFromStack(\"svg\") == null)",
    "info" : "IfStatement[21263-21487]:IfStatement[21263-21487]"
  }, {
    "left" : "return tb.process(startTag.name(\"img\"));",
    "right" : "return tb.process(startTag.name(\"img\"));",
    "info" : "ReturnStatement[21327-21367]:ReturnStatement[21327-21367]"
  }, {
    "left" : "tb.insert(startTag);",
    "right" : "tb.insert(startTag);",
    "info" : "ExpressionStatement[21467-21487]:ExpressionStatement[21467-21487]"
  }, {
    "left" : "if (name.equals(\"isindex\"))",
    "right" : "if (name.equals(\"isindex\"))",
    "info" : "IfStatement[21515-26818]:IfStatement[21515-26818]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21543-23231]:Block[21543-23231]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[21637-21652]:ExpressionStatement[21637-21652]"
  }, {
    "left" : "if (tb.getFormElement() != null)",
    "right" : "if (tb.getFormElement() != null)",
    "info" : "IfStatement[21677-21751]:IfStatement[21677-21751]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[21738-21751]:ReturnStatement[21738-21751]"
  }, {
    "left" : "tb.tokeniser.acknowledgeSelfClosingFlag();",
    "right" : "tb.tokeniser.acknowledgeSelfClosingFlag();",
    "info" : "ExpressionStatement[21777-21819]:ExpressionStatement[21777-21819]"
  }, {
    "left" : "tb.processStartTag(\"form\");",
    "right" : "tb.processStartTag(\"form\");",
    "info" : "ExpressionStatement[21844-21871]:ExpressionStatement[21844-21871]"
  }, {
    "left" : "if (startTag.attributes.hasKey(\"action\"))",
    "right" : "if (startTag.attributes.hasKey(\"action\"))",
    "info" : "IfStatement[21896-22113]:IfStatement[21896-22113]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21938-22113]:Block[21938-22113]"
  }, {
    "left" : "Element form = tb.getFormElement();",
    "right" : "Element form = tb.getFormElement();",
    "info" : "VariableDeclarationStatement[21968-22003]:VariableDeclarationStatement[21968-22003]"
  }, {
    "left" : "form.attr(\"action\", startTag.attributes.get(\"action\"));",
    "right" : "form.attr(\"action\", startTag.attributes.get(\"action\"));",
    "info" : "ExpressionStatement[22032-22087]:ExpressionStatement[22032-22087]"
  }, {
    "left" : "tb.processStartTag(\"hr\");",
    "right" : "tb.processStartTag(\"hr\");",
    "info" : "ExpressionStatement[22138-22163]:ExpressionStatement[22138-22163]"
  }, {
    "left" : "tb.processStartTag(\"label\");",
    "right" : "tb.processStartTag(\"label\");",
    "info" : "ExpressionStatement[22188-22216]:ExpressionStatement[22188-22216]"
  }, {
    "left" : "String prompt = startTag.attributes.hasKey(\"prompt\") ?\n                                startTag.attributes.get(\"prompt\") :\n                                \"This is a searchable index. Enter search keywords: \";",
    "right" : "String prompt = startTag.attributes.hasKey(\"prompt\") ?\n                                startTag.attributes.get(\"prompt\") :\n                                \"This is a searchable index. Enter search keywords: \";",
    "info" : "VariableDeclarationStatement[22291-22500]:VariableDeclarationStatement[22291-22500]"
  }, {
    "left" : "tb.process(new Token.Character().data(prompt));",
    "right" : "tb.process(new Token.Character().data(prompt));",
    "info" : "ExpressionStatement[22526-22573]:ExpressionStatement[22526-22573]"
  }, {
    "left" : "Attributes inputAttribs = new Attributes();",
    "right" : "Attributes inputAttribs = new Attributes();",
    "info" : "VariableDeclarationStatement[22632-22675]:VariableDeclarationStatement[22632-22675]"
  }, {
    "left" : "for (Attribute attr : startTag.attributes)",
    "right" : "for (Attribute attr : startTag.attributes)",
    "info" : "EnhancedForStatement[22700-22930]:EnhancedForStatement[22700-22930]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22743-22930]:Block[22743-22930]"
  }, {
    "left" : "if (!StringUtil.inSorted(attr.getKey(), Constants.InBodyStartInputAttribs))",
    "right" : "if (!StringUtil.inSorted(attr.getKey(), Constants.InBodyStartInputAttribs))",
    "info" : "IfStatement[22773-22904]:IfStatement[22773-22904]"
  }, {
    "left" : "inputAttribs.put(attr);",
    "right" : "inputAttribs.put(attr);",
    "info" : "ExpressionStatement[22881-22904]:ExpressionStatement[22881-22904]"
  }, {
    "left" : "inputAttribs.put(\"name\", \"isindex\");",
    "right" : "inputAttribs.put(\"name\", \"isindex\");",
    "info" : "ExpressionStatement[22955-22991]:ExpressionStatement[22955-22991]"
  }, {
    "left" : "tb.processStartTag(\"input\", inputAttribs);",
    "right" : "tb.processStartTag(\"input\", inputAttribs);",
    "info" : "ExpressionStatement[23016-23058]:ExpressionStatement[23016-23058]"
  }, {
    "left" : "tb.processEndTag(\"label\");",
    "right" : "tb.processEndTag(\"label\");",
    "info" : "ExpressionStatement[23083-23109]:ExpressionStatement[23083-23109]"
  }, {
    "left" : "tb.processStartTag(\"hr\");",
    "right" : "tb.processStartTag(\"hr\");",
    "info" : "ExpressionStatement[23134-23159]:ExpressionStatement[23134-23159]"
  }, {
    "left" : "tb.processEndTag(\"form\");",
    "right" : "tb.processEndTag(\"form\");",
    "info" : "ExpressionStatement[23184-23209]:ExpressionStatement[23184-23209]"
  }, {
    "left" : "if (name.equals(\"textarea\"))",
    "right" : "if (name.equals(\"textarea\"))",
    "info" : "IfStatement[23237-26818]:IfStatement[23237-26818]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23266-23778]:Block[23266-23778]"
  }, {
    "left" : "tb.insert(startTag);",
    "right" : "tb.insert(startTag);",
    "info" : "ExpressionStatement[23292-23312]:ExpressionStatement[23292-23312]"
  }, {
    "left" : "tb.tokeniser.transition(TokeniserState.Rcdata);",
    "right" : "tb.tokeniser.transition(TokeniserState.Rcdata);",
    "info" : "ExpressionStatement[23570-23617]:ExpressionStatement[23570-23617]"
  }, {
    "left" : "tb.markInsertionMode();",
    "right" : "tb.markInsertionMode();",
    "info" : "ExpressionStatement[23642-23665]:ExpressionStatement[23642-23665]"
  }, {
    "left" : "tb.framesetOk(false);",
    "right" : "tb.framesetOk(false);",
    "info" : "ExpressionStatement[23690-23711]:ExpressionStatement[23690-23711]"
  }, {
    "left" : "tb.transition(Text);",
    "right" : "tb.transition(Text);",
    "info" : "ExpressionStatement[23736-23756]:ExpressionStatement[23736-23756]"
  }, {
    "left" : "if (name.equals(\"xmp\"))",
    "right" : "if (name.equals(\"xmp\"))",
    "info" : "IfStatement[23784-26818]:IfStatement[23784-26818]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23808-24120]:Block[23808-24120]"
  }, {
    "left" : "if (tb.inButtonScope(\"p\"))",
    "right" : "if (tb.inButtonScope(\"p\"))",
    "info" : "IfStatement[23834-23939]:IfStatement[23834-23939]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23861-23939]:Block[23861-23939]"
  }, {
    "left" : "tb.processEndTag(\"p\");",
    "right" : "tb.processEndTag(\"p\");",
    "info" : "ExpressionStatement[23891-23913]:ExpressionStatement[23891-23913]"
  }, {
    "left" : "tb.reconstructFormattingElements();",
    "right" : "tb.reconstructFormattingElements();",
    "info" : "ExpressionStatement[23964-23999]:ExpressionStatement[23964-23999]"
  }, {
    "left" : "tb.framesetOk(false);",
    "right" : "tb.framesetOk(false);",
    "info" : "ExpressionStatement[24024-24045]:ExpressionStatement[24024-24045]"
  }, {
    "left" : "handleRawtext(startTag, tb);",
    "right" : "handleRawtext(startTag, tb);",
    "info" : "ExpressionStatement[24070-24098]:ExpressionStatement[24070-24098]"
  }, {
    "left" : "if (name.equals(\"iframe\"))",
    "right" : "if (name.equals(\"iframe\"))",
    "info" : "IfStatement[24126-26818]:IfStatement[24126-26818]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24153-24275]:Block[24153-24275]"
  }, {
    "left" : "tb.framesetOk(false);",
    "right" : "tb.framesetOk(false);",
    "info" : "ExpressionStatement[24179-24200]:ExpressionStatement[24179-24200]"
  }, {
    "left" : "handleRawtext(startTag, tb);",
    "right" : "handleRawtext(startTag, tb);",
    "info" : "ExpressionStatement[24225-24253]:ExpressionStatement[24225-24253]"
  }, {
    "left" : "if (name.equals(\"noembed\"))",
    "right" : "if (name.equals(\"noembed\"))",
    "info" : "IfStatement[24281-26818]:IfStatement[24281-26818]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24309-24451]:Block[24309-24451]"
  }, {
    "left" : "handleRawtext(startTag, tb);",
    "right" : "handleRawtext(startTag, tb);",
    "info" : "ExpressionStatement[24401-24429]:ExpressionStatement[24401-24429]"
  }, {
    "left" : "if (name.equals(\"select\"))",
    "right" : "if (name.equals(\"select\"))",
    "info" : "IfStatement[24457-26818]:IfStatement[24457-26818]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24484-25020]:Block[24484-25020]"
  }, {
    "left" : "tb.reconstructFormattingElements();",
    "right" : "tb.reconstructFormattingElements();",
    "info" : "ExpressionStatement[24510-24545]:ExpressionStatement[24510-24545]"
  }, {
    "left" : "tb.insert(startTag);",
    "right" : "tb.insert(startTag);",
    "info" : "ExpressionStatement[24570-24590]:ExpressionStatement[24570-24590]"
  }, {
    "left" : "tb.framesetOk(false);",
    "right" : "tb.framesetOk(false);",
    "info" : "ExpressionStatement[24615-24636]:ExpressionStatement[24615-24636]"
  }, {
    "left" : "HtmlTreeBuilderState state = tb.state();",
    "right" : "HtmlTreeBuilderState state = tb.state();",
    "info" : "VariableDeclarationStatement[24662-24702]:VariableDeclarationStatement[24662-24702]"
  }, {
    "left" : "if (state.equals(InTable) || state.equals(InCaption) || state.equals(InTableBody) || state.equals(InRow) || state.equals(InCell))",
    "right" : "if (state.equals(InTable) || state.equals(InCaption) || state.equals(InTableBody) || state.equals(InRow) || state.equals(InCell))",
    "info" : "IfStatement[24727-24998]:IfStatement[24727-24998]"
  }, {
    "left" : "tb.transition(InSelectInTable);",
    "right" : "tb.transition(InSelectInTable);",
    "info" : "ExpressionStatement[24885-24916]:ExpressionStatement[24885-24916]"
  }, {
    "left" : "tb.transition(InSelect);",
    "right" : "tb.transition(InSelect);",
    "info" : "ExpressionStatement[24974-24998]:ExpressionStatement[24974-24998]"
  }, {
    "left" : "if (StringUtil.inSorted(name, Constants.InBodyStartOptions))",
    "right" : "if (StringUtil.inSorted(name, Constants.InBodyStartOptions))",
    "info" : "IfStatement[25026-26818]:IfStatement[25026-26818]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25087-25348]:Block[25087-25348]"
  }, {
    "left" : "if (tb.currentElement().nodeName().equals(\"option\"))",
    "right" : "if (tb.currentElement().nodeName().equals(\"option\"))",
    "info" : "IfStatement[25113-25221]:IfStatement[25113-25221]"
  }, {
    "left" : "tb.processEndTag(\"option\");",
    "right" : "tb.processEndTag(\"option\");",
    "info" : "ExpressionStatement[25194-25221]:ExpressionStatement[25194-25221]"
  }, {
    "left" : "tb.reconstructFormattingElements();",
    "right" : "tb.reconstructFormattingElements();",
    "info" : "ExpressionStatement[25246-25281]:ExpressionStatement[25246-25281]"
  }, {
    "left" : "tb.insert(startTag);",
    "right" : "tb.insert(startTag);",
    "info" : "ExpressionStatement[25306-25326]:ExpressionStatement[25306-25326]"
  }, {
    "left" : "if (StringUtil.inSorted(name, Constants.InBodyStartRuby))",
    "right" : "if (StringUtil.inSorted(name, Constants.InBodyStartRuby))",
    "info" : "IfStatement[25354-26818]:IfStatement[25354-26818]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25412-25879]:Block[25412-25879]"
  }, {
    "left" : "if (tb.inScope(\"ruby\"))",
    "right" : "if (tb.inScope(\"ruby\"))",
    "info" : "IfStatement[25438-25857]:IfStatement[25438-25857]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25462-25857]:Block[25462-25857]"
  }, {
    "left" : "tb.generateImpliedEndTags();",
    "right" : "tb.generateImpliedEndTags();",
    "info" : "ExpressionStatement[25492-25520]:ExpressionStatement[25492-25520]"
  }, {
    "left" : "if (!tb.currentElement().nodeName().equals(\"ruby\"))",
    "right" : "if (!tb.currentElement().nodeName().equals(\"ruby\"))",
    "info" : "IfStatement[25549-25782]:IfStatement[25549-25782]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25601-25782]:Block[25601-25782]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[25635-25650]:ExpressionStatement[25635-25650]"
  }, {
    "left" : "tb.popStackToBefore(\"ruby\");",
    "right" : "tb.popStackToBefore(\"ruby\");",
    "info" : "ExpressionStatement[25683-25711]:ExpressionStatement[25683-25711]"
  }, {
    "left" : "tb.insert(startTag);",
    "right" : "tb.insert(startTag);",
    "info" : "ExpressionStatement[25811-25831]:ExpressionStatement[25811-25831]"
  }, {
    "left" : "if (name.equals(\"math\"))",
    "right" : "if (name.equals(\"math\"))",
    "info" : "IfStatement[25885-26818]:IfStatement[25885-26818]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25910-26205]:Block[25910-26205]"
  }, {
    "left" : "tb.reconstructFormattingElements();",
    "right" : "tb.reconstructFormattingElements();",
    "info" : "ExpressionStatement[25936-25971]:ExpressionStatement[25936-25971]"
  }, {
    "left" : "tb.insert(startTag);",
    "right" : "tb.insert(startTag);",
    "info" : "ExpressionStatement[26096-26116]:ExpressionStatement[26096-26116]"
  }, {
    "left" : "tb.tokeniser.acknowledgeSelfClosingFlag();",
    "right" : "tb.tokeniser.acknowledgeSelfClosingFlag();",
    "info" : "ExpressionStatement[26141-26183]:ExpressionStatement[26141-26183]"
  }, {
    "left" : "if (name.equals(\"svg\"))",
    "right" : "if (name.equals(\"svg\"))",
    "info" : "IfStatement[26211-26818]:IfStatement[26211-26818]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26235-26519]:Block[26235-26519]"
  }, {
    "left" : "tb.reconstructFormattingElements();",
    "right" : "tb.reconstructFormattingElements();",
    "info" : "ExpressionStatement[26261-26296]:ExpressionStatement[26261-26296]"
  }, {
    "left" : "tb.insert(startTag);",
    "right" : "tb.insert(startTag);",
    "info" : "ExpressionStatement[26410-26430]:ExpressionStatement[26410-26430]"
  }, {
    "left" : "tb.tokeniser.acknowledgeSelfClosingFlag();",
    "right" : "tb.tokeniser.acknowledgeSelfClosingFlag();",
    "info" : "ExpressionStatement[26455-26497]:ExpressionStatement[26455-26497]"
  }, {
    "left" : "if (StringUtil.inSorted(name, Constants.InBodyStartDrop))",
    "right" : "if (StringUtil.inSorted(name, Constants.InBodyStartDrop))",
    "info" : "IfStatement[26525-26818]:IfStatement[26525-26818]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26583-26684]:Block[26583-26684]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[26609-26624]:ExpressionStatement[26609-26624]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[26649-26662]:ReturnStatement[26649-26662]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26690-26818]:Block[26690-26818]"
  }, {
    "left" : "tb.reconstructFormattingElements();",
    "right" : "tb.reconstructFormattingElements();",
    "info" : "ExpressionStatement[26716-26751]:ExpressionStatement[26716-26751]"
  }, {
    "left" : "tb.insert(startTag);",
    "right" : "tb.insert(startTag);",
    "info" : "ExpressionStatement[26776-26796]:ExpressionStatement[26776-26796]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[26839-26845]:BreakStatement[26839-26845]"
  }, {
    "left" : "case EndTag:",
    "right" : "case EndTag:",
    "info" : "SwitchCase[26863-26875]:SwitchCase[26863-26875]"
  }, {
    "left" : "Token.EndTag endTag = t.asEndTag();",
    "right" : "Token.EndTag endTag = t.asEndTag();",
    "info" : "VariableDeclarationStatement[26896-26931]:VariableDeclarationStatement[26896-26931]"
  }, {
    "left" : "name = endTag.normalName();",
    "right" : "name = endTag.normalName();",
    "info" : "ExpressionStatement[26952-26979]:ExpressionStatement[26952-26979]"
  }, {
    "left" : "if (StringUtil.inSorted(name, Constants.InBodyEndAdoptionFormatters))",
    "right" : "if (StringUtil.inSorted(name, Constants.InBodyEndAdoptionFormatters))",
    "info" : "IfStatement[27000-38156]:IfStatement[27000-38156]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27070-32782]:Block[27070-32782]"
  }, {
    "left" : "for (int i = 0; i < 8; i++)",
    "right" : "for (int i = 0; i < 8; i++)",
    "info" : "ForStatement[27150-32760]:ForStatement[27150-32760]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27178-32760]:Block[27178-32760]"
  }, {
    "left" : "Element formatEl = tb.getActiveFormattingElement(name);",
    "right" : "Element formatEl = tb.getActiveFormattingElement(name);",
    "info" : "VariableDeclarationStatement[27208-27263]:VariableDeclarationStatement[27208-27263]"
  }, {
    "left" : "if (formatEl == null)",
    "right" : "if (formatEl == null)",
    "info" : "IfStatement[27292-27900]:IfStatement[27292-27900]"
  }, {
    "left" : "return anyOtherEndTag(t, tb);",
    "right" : "return anyOtherEndTag(t, tb);",
    "info" : "ReturnStatement[27346-27375]:ReturnStatement[27346-27375]"
  }, {
    "left" : "if (!tb.onStack(formatEl))",
    "right" : "if (!tb.onStack(formatEl))",
    "info" : "IfStatement[27409-27900]:IfStatement[27409-27900]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27436-27641]:Block[27436-27641]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[27470-27485]:ExpressionStatement[27470-27485]"
  }, {
    "left" : "tb.removeFromActiveFormattingElements(formatEl);",
    "right" : "tb.removeFromActiveFormattingElements(formatEl);",
    "info" : "ExpressionStatement[27518-27566]:ExpressionStatement[27518-27566]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[27599-27611]:ReturnStatement[27599-27611]"
  }, {
    "left" : "if (!tb.inScope(formatEl.nodeName()))",
    "right" : "if (!tb.inScope(formatEl.nodeName()))",
    "info" : "IfStatement[27647-27900]:IfStatement[27647-27900]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27685-27810]:Block[27685-27810]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[27719-27734]:ExpressionStatement[27719-27734]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[27767-27780]:ReturnStatement[27767-27780]"
  }, {
    "left" : "if (tb.currentElement() != formatEl)",
    "right" : "if (tb.currentElement() != formatEl)",
    "info" : "IfStatement[27816-27900]:IfStatement[27816-27900]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[27885-27900]:ExpressionStatement[27885-27900]"
  }, {
    "left" : "Element furthestBlock = null;",
    "right" : "Element furthestBlock = null;",
    "info" : "VariableDeclarationStatement[27930-27959]:VariableDeclarationStatement[27930-27959]"
  }, {
    "left" : "Element commonAncestor = null;",
    "right" : "Element commonAncestor = null;",
    "info" : "VariableDeclarationStatement[27988-28018]:VariableDeclarationStatement[27988-28018]"
  }, {
    "left" : "boolean seenFormattingElement = false;",
    "right" : "boolean seenFormattingElement = false;",
    "info" : "VariableDeclarationStatement[28047-28085]:VariableDeclarationStatement[28047-28085]"
  }, {
    "left" : "ArrayList<Element> stack = tb.getStack();",
    "right" : "ArrayList<Element> stack = tb.getStack();",
    "info" : "VariableDeclarationStatement[28114-28155]:VariableDeclarationStatement[28114-28155]"
  }, {
    "left" : "final int stackSize = stack.size();",
    "right" : "final int stackSize = stack.size();",
    "info" : "VariableDeclarationStatement[28346-28381]:VariableDeclarationStatement[28346-28381]"
  }, {
    "left" : "for (int si = 0; si < stackSize && si < 64; si++)",
    "right" : "for (int si = 0; si < stackSize && si < 64; si++)",
    "info" : "ForStatement[28410-28964]:ForStatement[28410-28964]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28460-28964]:Block[28460-28964]"
  }, {
    "left" : "Element el = stack.get(si);",
    "right" : "Element el = stack.get(si);",
    "info" : "VariableDeclarationStatement[28494-28521]:VariableDeclarationStatement[28494-28521]"
  }, {
    "left" : "if (el == formatEl)",
    "right" : "if (el == formatEl)",
    "info" : "IfStatement[28554-28934]:IfStatement[28554-28934]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28574-28747]:Block[28574-28747]"
  }, {
    "left" : "commonAncestor = stack.get(si - 1);",
    "right" : "commonAncestor = stack.get(si - 1);",
    "info" : "ExpressionStatement[28612-28647]:ExpressionStatement[28612-28647]"
  }, {
    "left" : "seenFormattingElement = true;",
    "right" : "seenFormattingElement = true;",
    "info" : "ExpressionStatement[28684-28713]:ExpressionStatement[28684-28713]"
  }, {
    "left" : "if (seenFormattingElement && tb.isSpecial(el))",
    "right" : "if (seenFormattingElement && tb.isSpecial(el))",
    "info" : "IfStatement[28753-28934]:IfStatement[28753-28934]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28800-28934]:Block[28800-28934]"
  }, {
    "left" : "furthestBlock = el;",
    "right" : "furthestBlock = el;",
    "info" : "ExpressionStatement[28838-28857]:ExpressionStatement[28838-28857]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[28894-28900]:BreakStatement[28894-28900]"
  }, {
    "left" : "if (furthestBlock == null)",
    "right" : "if (furthestBlock == null)",
    "info" : "IfStatement[28993-29250]:IfStatement[28993-29250]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29020-29250]:Block[29020-29250]"
  }, {
    "left" : "tb.popStackToClose(formatEl.nodeName());",
    "right" : "tb.popStackToClose(formatEl.nodeName());",
    "info" : "ExpressionStatement[29054-29094]:ExpressionStatement[29054-29094]"
  }, {
    "left" : "tb.removeFromActiveFormattingElements(formatEl);",
    "right" : "tb.removeFromActiveFormattingElements(formatEl);",
    "info" : "ExpressionStatement[29127-29175]:ExpressionStatement[29127-29175]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[29208-29220]:ReturnStatement[29208-29220]"
  }, {
    "left" : "Element node = furthestBlock;",
    "right" : "Element node = furthestBlock;",
    "info" : "VariableDeclarationStatement[29554-29583]:VariableDeclarationStatement[29554-29583]"
  }, {
    "left" : "Element lastNode = furthestBlock;",
    "right" : "Element lastNode = furthestBlock;",
    "info" : "VariableDeclarationStatement[29612-29645]:VariableDeclarationStatement[29612-29645]"
  }, {
    "left" : "for (int j = 0; j < 3; j++)",
    "right" : "for (int j = 0; j < 3; j++)",
    "info" : "ForStatement[29674-31231]:ForStatement[29674-31231]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29702-31231]:Block[29702-31231]"
  }, {
    "left" : "if (tb.onStack(node))",
    "right" : "if (tb.onStack(node))",
    "info" : "IfStatement[29736-29823]:IfStatement[29736-29823]"
  }, {
    "left" : "node = tb.aboveOnStack(node);",
    "right" : "node = tb.aboveOnStack(node);",
    "info" : "ExpressionStatement[29794-29823]:ExpressionStatement[29794-29823]"
  }, {
    "left" : "if (!tb.isInActiveFormattingElements(node))",
    "right" : "if (!tb.isInActiveFormattingElements(node))",
    "info" : "IfStatement[29856-30139]:IfStatement[29856-30139]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29900-30069]:Block[29900-30069]"
  }, {
    "left" : "tb.removeFromStack(node);",
    "right" : "tb.removeFromStack(node);",
    "info" : "ExpressionStatement[29964-29989]:ExpressionStatement[29964-29989]"
  }, {
    "left" : "continue;",
    "right" : "continue;",
    "info" : "ContinueStatement[30026-30035]:ContinueStatement[30026-30035]"
  }, {
    "left" : "if (node == formatEl)",
    "right" : "if (node == formatEl)",
    "info" : "IfStatement[30075-30139]:IfStatement[30075-30139]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[30133-30139]:BreakStatement[30133-30139]"
  }, {
    "left" : "Element replacement = new Element(Tag.valueOf(node.nodeName(), ParseSettings.preserveCase), tb.getBaseUri());",
    "right" : "Element replacement = new Element(Tag.valueOf(node.nodeName(), ParseSettings.preserveCase), tb.getBaseUri());",
    "info" : "VariableDeclarationStatement[30173-30282]:VariableDeclarationStatement[30173-30282]"
  }, {
    "left" : "tb.replaceActiveFormattingElement(node, replacement);",
    "right" : "tb.replaceActiveFormattingElement(node, replacement);",
    "info" : "ExpressionStatement[30412-30465]:ExpressionStatement[30412-30465]"
  }, {
    "left" : "tb.replaceOnStack(node, replacement);",
    "right" : "tb.replaceOnStack(node, replacement);",
    "info" : "ExpressionStatement[30498-30535]:ExpressionStatement[30498-30535]"
  }, {
    "left" : "node = replacement;",
    "right" : "node = replacement;",
    "info" : "ExpressionStatement[30568-30587]:ExpressionStatement[30568-30587]"
  }, {
    "left" : "if (lastNode == furthestBlock)",
    "right" : "if (lastNode == furthestBlock)",
    "info" : "IfStatement[30621-30973]:IfStatement[30621-30973]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30652-30973]:Block[30652-30973]"
  }, {
    "left" : "if (lastNode.parent() != null)",
    "right" : "if (lastNode.parent() != null)",
    "info" : "IfStatement[31006-31091]:IfStatement[31006-31091]"
  }, {
    "left" : "lastNode.remove();",
    "right" : "lastNode.remove();",
    "info" : "ExpressionStatement[31073-31091]:ExpressionStatement[31073-31091]"
  }, {
    "left" : "node.appendChild(lastNode);",
    "right" : "node.appendChild(lastNode);",
    "info" : "ExpressionStatement[31124-31151]:ExpressionStatement[31124-31151]"
  }, {
    "left" : "lastNode = node;",
    "right" : "lastNode = node;",
    "info" : "ExpressionStatement[31185-31201]:ExpressionStatement[31185-31201]"
  }, {
    "left" : "if (StringUtil.inSorted(commonAncestor.nodeName(), Constants.InBodyEndTableFosters))",
    "right" : "if (StringUtil.inSorted(commonAncestor.nodeName(), Constants.InBodyEndTableFosters))",
    "info" : "IfStatement[31261-31787]:IfStatement[31261-31787]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31346-31562]:Block[31346-31562]"
  }, {
    "left" : "if (lastNode.parent() != null)",
    "right" : "if (lastNode.parent() != null)",
    "info" : "IfStatement[31380-31465]:IfStatement[31380-31465]"
  }, {
    "left" : "lastNode.remove();",
    "right" : "lastNode.remove();",
    "info" : "ExpressionStatement[31447-31465]:ExpressionStatement[31447-31465]"
  }, {
    "left" : "tb.insertInFosterParent(lastNode);",
    "right" : "tb.insertInFosterParent(lastNode);",
    "info" : "ExpressionStatement[31498-31532]:ExpressionStatement[31498-31532]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31568-31787]:Block[31568-31787]"
  }, {
    "left" : "if (lastNode.parent() != null)",
    "right" : "if (lastNode.parent() != null)",
    "info" : "IfStatement[31602-31687]:IfStatement[31602-31687]"
  }, {
    "left" : "lastNode.remove();",
    "right" : "lastNode.remove();",
    "info" : "ExpressionStatement[31669-31687]:ExpressionStatement[31669-31687]"
  }, {
    "left" : "commonAncestor.appendChild(lastNode);",
    "right" : "commonAncestor.appendChild(lastNode);",
    "info" : "ExpressionStatement[31720-31757]:ExpressionStatement[31720-31757]"
  }, {
    "left" : "Element adopter = new Element(formatEl.tag(), tb.getBaseUri());",
    "right" : "Element adopter = new Element(formatEl.tag(), tb.getBaseUri());",
    "info" : "VariableDeclarationStatement[31817-31880]:VariableDeclarationStatement[31817-31880]"
  }, {
    "left" : "adopter.attributes().addAll(formatEl.attributes());",
    "right" : "adopter.attributes().addAll(formatEl.attributes());",
    "info" : "ExpressionStatement[31909-31960]:ExpressionStatement[31909-31960]"
  }, {
    "left" : "Node[] childNodes = furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()]);",
    "right" : "Node[] childNodes = furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()]);",
    "info" : "VariableDeclarationStatement[31989-32085]:VariableDeclarationStatement[31989-32085]"
  }, {
    "left" : "for (Node childNode : childNodes)",
    "right" : "for (Node childNode : childNodes)",
    "info" : "EnhancedForStatement[32114-32308]:EnhancedForStatement[32114-32308]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32148-32308]:Block[32148-32308]"
  }, {
    "left" : "adopter.appendChild(childNode);",
    "right" : "adopter.appendChild(childNode);",
    "info" : "ExpressionStatement[32182-32213]:ExpressionStatement[32182-32213]"
  }, {
    "left" : "furthestBlock.appendChild(adopter);",
    "right" : "furthestBlock.appendChild(adopter);",
    "info" : "ExpressionStatement[32337-32372]:ExpressionStatement[32337-32372]"
  }, {
    "left" : "tb.removeFromActiveFormattingElements(formatEl);",
    "right" : "tb.removeFromActiveFormattingElements(formatEl);",
    "info" : "ExpressionStatement[32401-32449]:ExpressionStatement[32401-32449]"
  }, {
    "left" : "tb.removeFromStack(formatEl);",
    "right" : "tb.removeFromStack(formatEl);",
    "info" : "ExpressionStatement[32630-32659]:ExpressionStatement[32630-32659]"
  }, {
    "left" : "tb.insertOnStackAfter(furthestBlock, adopter);",
    "right" : "tb.insertOnStackAfter(furthestBlock, adopter);",
    "info" : "ExpressionStatement[32688-32734]:ExpressionStatement[32688-32734]"
  }, {
    "left" : "if (StringUtil.inSorted(name, Constants.InBodyEndClosers))",
    "right" : "if (StringUtil.inSorted(name, Constants.InBodyEndClosers))",
    "info" : "IfStatement[32788-38156]:IfStatement[32788-38156]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32847-33349]:Block[32847-33349]"
  }, {
    "left" : "if (!tb.inScope(name))",
    "right" : "if (!tb.inScope(name))",
    "info" : "IfStatement[32873-33327]:IfStatement[32873-33327]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32896-33057]:Block[32896-33057]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[32974-32989]:ExpressionStatement[32974-32989]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[33018-33031]:ReturnStatement[33018-33031]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33063-33327]:Block[33063-33327]"
  }, {
    "left" : "tb.generateImpliedEndTags();",
    "right" : "tb.generateImpliedEndTags();",
    "info" : "ExpressionStatement[33093-33121]:ExpressionStatement[33093-33121]"
  }, {
    "left" : "if (!tb.currentElement().nodeName().equals(name))",
    "right" : "if (!tb.currentElement().nodeName().equals(name))",
    "info" : "IfStatement[33150-33247]:IfStatement[33150-33247]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[33232-33247]:ExpressionStatement[33232-33247]"
  }, {
    "left" : "tb.popStackToClose(name);",
    "right" : "tb.popStackToClose(name);",
    "info" : "ExpressionStatement[33276-33301]:ExpressionStatement[33276-33301]"
  }, {
    "left" : "if (name.equals(\"span\"))",
    "right" : "if (name.equals(\"span\"))",
    "info" : "IfStatement[33355-38156]:IfStatement[33355-38156]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33380-33536]:Block[33380-33536]"
  }, {
    "left" : "return anyOtherEndTag(t, tb);",
    "right" : "return anyOtherEndTag(t, tb);",
    "info" : "ReturnStatement[33485-33514]:ReturnStatement[33485-33514]"
  }, {
    "left" : "if (name.equals(\"li\"))",
    "right" : "if (name.equals(\"li\"))",
    "info" : "IfStatement[33542-38156]:IfStatement[33542-38156]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33565-34031]:Block[33565-34031]"
  }, {
    "left" : "if (!tb.inListItemScope(name))",
    "right" : "if (!tb.inListItemScope(name))",
    "info" : "IfStatement[33591-34009]:IfStatement[33591-34009]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33622-33735]:Block[33622-33735]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[33652-33667]:ExpressionStatement[33652-33667]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[33696-33709]:ReturnStatement[33696-33709]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33741-34009]:Block[33741-34009]"
  }, {
    "left" : "tb.generateImpliedEndTags(name);",
    "right" : "tb.generateImpliedEndTags(name);",
    "info" : "ExpressionStatement[33771-33803]:ExpressionStatement[33771-33803]"
  }, {
    "left" : "if (!tb.currentElement().nodeName().equals(name))",
    "right" : "if (!tb.currentElement().nodeName().equals(name))",
    "info" : "IfStatement[33832-33929]:IfStatement[33832-33929]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[33914-33929]:ExpressionStatement[33914-33929]"
  }, {
    "left" : "tb.popStackToClose(name);",
    "right" : "tb.popStackToClose(name);",
    "info" : "ExpressionStatement[33958-33983]:ExpressionStatement[33958-33983]"
  }, {
    "left" : "if (name.equals(\"body\"))",
    "right" : "if (name.equals(\"body\"))",
    "info" : "IfStatement[34037-38156]:IfStatement[34037-38156]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34062-34495]:Block[34062-34495]"
  }, {
    "left" : "if (!tb.inScope(\"body\"))",
    "right" : "if (!tb.inScope(\"body\"))",
    "info" : "IfStatement[34088-34473]:IfStatement[34088-34473]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34113-34226]:Block[34113-34226]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[34143-34158]:ExpressionStatement[34143-34158]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[34187-34200]:ReturnStatement[34187-34200]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34232-34473]:Block[34232-34473]"
  }, {
    "left" : "tb.transition(AfterBody);",
    "right" : "tb.transition(AfterBody);",
    "info" : "ExpressionStatement[34422-34447]:ExpressionStatement[34422-34447]"
  }, {
    "left" : "if (name.equals(\"html\"))",
    "right" : "if (name.equals(\"html\"))",
    "info" : "IfStatement[34501-38156]:IfStatement[34501-38156]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34526-34715]:Block[34526-34715]"
  }, {
    "left" : "boolean notIgnored = tb.processEndTag(\"body\");",
    "right" : "boolean notIgnored = tb.processEndTag(\"body\");",
    "info" : "VariableDeclarationStatement[34552-34598]:VariableDeclarationStatement[34552-34598]"
  }, {
    "left" : "if (notIgnored)",
    "right" : "if (notIgnored)",
    "info" : "IfStatement[34623-34693]:IfStatement[34623-34693]"
  }, {
    "left" : "return tb.process(endTag);",
    "right" : "return tb.process(endTag);",
    "info" : "ReturnStatement[34667-34693]:ReturnStatement[34667-34693]"
  }, {
    "left" : "if (name.equals(\"form\"))",
    "right" : "if (name.equals(\"form\"))",
    "info" : "IfStatement[34721-38156]:IfStatement[34721-38156]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34746-35438]:Block[34746-35438]"
  }, {
    "left" : "Element currentForm = tb.getFormElement();",
    "right" : "Element currentForm = tb.getFormElement();",
    "info" : "VariableDeclarationStatement[34772-34814]:VariableDeclarationStatement[34772-34814]"
  }, {
    "left" : "tb.setFormElement(null);",
    "right" : "tb.setFormElement(null);",
    "info" : "ExpressionStatement[34839-34863]:ExpressionStatement[34839-34863]"
  }, {
    "left" : "if (currentForm == null || !tb.inScope(name))",
    "right" : "if (currentForm == null || !tb.inScope(name))",
    "info" : "IfStatement[34888-35416]:IfStatement[34888-35416]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34934-35047]:Block[34934-35047]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[34964-34979]:ExpressionStatement[34964-34979]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[35008-35021]:ReturnStatement[35008-35021]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35053-35416]:Block[35053-35416]"
  }, {
    "left" : "tb.generateImpliedEndTags();",
    "right" : "tb.generateImpliedEndTags();",
    "info" : "ExpressionStatement[35083-35111]:ExpressionStatement[35083-35111]"
  }, {
    "left" : "if (!tb.currentElement().nodeName().equals(name))",
    "right" : "if (!tb.currentElement().nodeName().equals(name))",
    "info" : "IfStatement[35140-35237]:IfStatement[35140-35237]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[35222-35237]:ExpressionStatement[35222-35237]"
  }, {
    "left" : "tb.removeFromStack(currentForm);",
    "right" : "tb.removeFromStack(currentForm);",
    "info" : "ExpressionStatement[35358-35390]:ExpressionStatement[35358-35390]"
  }, {
    "left" : "if (name.equals(\"p\"))",
    "right" : "if (name.equals(\"p\"))",
    "info" : "IfStatement[35444-38156]:IfStatement[35444-38156]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35466-36043]:Block[35466-36043]"
  }, {
    "left" : "if (!tb.inButtonScope(name))",
    "right" : "if (!tb.inButtonScope(name))",
    "info" : "IfStatement[35492-36021]:IfStatement[35492-36021]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35521-35747]:Block[35521-35747]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[35551-35566]:ExpressionStatement[35551-35566]"
  }, {
    "left" : "tb.processStartTag(name);",
    "right" : "tb.processStartTag(name);",
    "info" : "ExpressionStatement[35595-35620]:ExpressionStatement[35595-35620]"
  }, {
    "left" : "return tb.process(endTag);",
    "right" : "return tb.process(endTag);",
    "info" : "ReturnStatement[35695-35721]:ReturnStatement[35695-35721]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35753-36021]:Block[35753-36021]"
  }, {
    "left" : "tb.generateImpliedEndTags(name);",
    "right" : "tb.generateImpliedEndTags(name);",
    "info" : "ExpressionStatement[35783-35815]:ExpressionStatement[35783-35815]"
  }, {
    "left" : "if (!tb.currentElement().nodeName().equals(name))",
    "right" : "if (!tb.currentElement().nodeName().equals(name))",
    "info" : "IfStatement[35844-35941]:IfStatement[35844-35941]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[35926-35941]:ExpressionStatement[35926-35941]"
  }, {
    "left" : "tb.popStackToClose(name);",
    "right" : "tb.popStackToClose(name);",
    "info" : "ExpressionStatement[35970-35995]:ExpressionStatement[35970-35995]"
  }, {
    "left" : "if (StringUtil.inSorted(name, Constants.DdDt))",
    "right" : "if (StringUtil.inSorted(name, Constants.DdDt))",
    "info" : "IfStatement[36049-38156]:IfStatement[36049-38156]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36096-36554]:Block[36096-36554]"
  }, {
    "left" : "if (!tb.inScope(name))",
    "right" : "if (!tb.inScope(name))",
    "info" : "IfStatement[36122-36532]:IfStatement[36122-36532]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36145-36258]:Block[36145-36258]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[36175-36190]:ExpressionStatement[36175-36190]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[36219-36232]:ReturnStatement[36219-36232]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36264-36532]:Block[36264-36532]"
  }, {
    "left" : "tb.generateImpliedEndTags(name);",
    "right" : "tb.generateImpliedEndTags(name);",
    "info" : "ExpressionStatement[36294-36326]:ExpressionStatement[36294-36326]"
  }, {
    "left" : "if (!tb.currentElement().nodeName().equals(name))",
    "right" : "if (!tb.currentElement().nodeName().equals(name))",
    "info" : "IfStatement[36355-36452]:IfStatement[36355-36452]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[36437-36452]:ExpressionStatement[36437-36452]"
  }, {
    "left" : "tb.popStackToClose(name);",
    "right" : "tb.popStackToClose(name);",
    "info" : "ExpressionStatement[36481-36506]:ExpressionStatement[36481-36506]"
  }, {
    "left" : "if (StringUtil.inSorted(name, Constants.Headings))",
    "right" : "if (StringUtil.inSorted(name, Constants.Headings))",
    "info" : "IfStatement[36560-38156]:IfStatement[36560-38156]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36611-37097]:Block[36611-37097]"
  }, {
    "left" : "if (!tb.inScope(Constants.Headings))",
    "right" : "if (!tb.inScope(Constants.Headings))",
    "info" : "IfStatement[36637-37075]:IfStatement[36637-37075]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36674-36787]:Block[36674-36787]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[36704-36719]:ExpressionStatement[36704-36719]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[36748-36761]:ReturnStatement[36748-36761]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36793-37075]:Block[36793-37075]"
  }, {
    "left" : "tb.generateImpliedEndTags(name);",
    "right" : "tb.generateImpliedEndTags(name);",
    "info" : "ExpressionStatement[36823-36855]:ExpressionStatement[36823-36855]"
  }, {
    "left" : "if (!tb.currentElement().nodeName().equals(name))",
    "right" : "if (!tb.currentElement().nodeName().equals(name))",
    "info" : "IfStatement[36884-36981]:IfStatement[36884-36981]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[36966-36981]:ExpressionStatement[36966-36981]"
  }, {
    "left" : "tb.popStackToClose(Constants.Headings);",
    "right" : "tb.popStackToClose(Constants.Headings);",
    "info" : "ExpressionStatement[37010-37049]:ExpressionStatement[37010-37049]"
  }, {
    "left" : "if (name.equals(\"sarcasm\"))",
    "right" : "if (name.equals(\"sarcasm\"))",
    "info" : "IfStatement[37103-38156]:IfStatement[37103-38156]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37131-37242]:Block[37131-37242]"
  }, {
    "left" : "return anyOtherEndTag(t, tb);",
    "right" : "return anyOtherEndTag(t, tb);",
    "info" : "ReturnStatement[37191-37220]:ReturnStatement[37191-37220]"
  }, {
    "left" : "if (StringUtil.inSorted(name, Constants.InBodyStartApplets))",
    "right" : "if (StringUtil.inSorted(name, Constants.InBodyStartApplets))",
    "info" : "IfStatement[37248-38156]:IfStatement[37248-38156]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37309-37893]:Block[37309-37893]"
  }, {
    "left" : "if (!tb.inScope(\"name\"))",
    "right" : "if (!tb.inScope(\"name\"))",
    "info" : "IfStatement[37335-37871]:IfStatement[37335-37871]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37360-37871]:Block[37360-37871]"
  }, {
    "left" : "if (!tb.inScope(name))",
    "right" : "if (!tb.inScope(name))",
    "info" : "IfStatement[37390-37538]:IfStatement[37390-37538]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37413-37538]:Block[37413-37538]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[37447-37462]:ExpressionStatement[37447-37462]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[37495-37508]:ReturnStatement[37495-37508]"
  }, {
    "left" : "tb.generateImpliedEndTags();",
    "right" : "tb.generateImpliedEndTags();",
    "info" : "ExpressionStatement[37567-37595]:ExpressionStatement[37567-37595]"
  }, {
    "left" : "if (!tb.currentElement().nodeName().equals(name))",
    "right" : "if (!tb.currentElement().nodeName().equals(name))",
    "info" : "IfStatement[37624-37721]:IfStatement[37624-37721]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[37706-37721]:ExpressionStatement[37706-37721]"
  }, {
    "left" : "tb.popStackToClose(name);",
    "right" : "tb.popStackToClose(name);",
    "info" : "ExpressionStatement[37750-37775]:ExpressionStatement[37750-37775]"
  }, {
    "left" : "tb.clearFormattingElementsToLastMarker();",
    "right" : "tb.clearFormattingElementsToLastMarker();",
    "info" : "ExpressionStatement[37804-37845]:ExpressionStatement[37804-37845]"
  }, {
    "left" : "if (name.equals(\"br\"))",
    "right" : "if (name.equals(\"br\"))",
    "info" : "IfStatement[37899-38156]:IfStatement[37899-38156]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37922-38073]:Block[37922-38073]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[37948-37963]:ExpressionStatement[37948-37963]"
  }, {
    "left" : "tb.processStartTag(\"br\");",
    "right" : "tb.processStartTag(\"br\");",
    "info" : "ExpressionStatement[37988-38013]:ExpressionStatement[37988-38013]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[38038-38051]:ReturnStatement[38038-38051]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38079-38156]:Block[38079-38156]"
  }, {
    "left" : "return anyOtherEndTag(t, tb);",
    "right" : "return anyOtherEndTag(t, tb);",
    "info" : "ReturnStatement[38105-38134]:ReturnStatement[38105-38134]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[38178-38184]:BreakStatement[38178-38184]"
  }, {
    "left" : "case EOF:",
    "right" : "case EOF:",
    "info" : "SwitchCase[38201-38210]:SwitchCase[38201-38210]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[38393-38399]:BreakStatement[38393-38399]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[38426-38438]:ReturnStatement[38426-38438]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[38458-38465]:PrimitiveType[38458-38465]"
  }, {
    "left" : "anyOtherEndTag",
    "right" : "anyOtherEndTag",
    "info" : "SimpleName[38466-38480]:SimpleName[38466-38480]"
  }, {
    "left" : "Token t",
    "right" : "Token t",
    "info" : "SingleVariableDeclaration[38481-38488]:SingleVariableDeclaration[38481-38488]"
  }, {
    "left" : "HtmlTreeBuilder tb",
    "right" : "HtmlTreeBuilder tb",
    "info" : "SingleVariableDeclaration[38490-38508]:SingleVariableDeclaration[38490-38508]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38510-39254]:Block[38510-39292]"
  }, {
    "left" : "String name = t.asEndTag().normalName();",
    "right" : "String name = t.asEndTag().name();",
    "info" : "VariableDeclarationStatement[38524-38564]:VariableDeclarationStatement[38524-38558]"
  }, {
    "left" : "normalName",
    "right" : "name",
    "info" : "SimpleName[38551-38561]:SimpleName[38551-38555]"
  }, {
    "left" : "ArrayList<Element> stack = tb.getStack();",
    "right" : "ArrayList<Element> stack = tb.getStack();",
    "info" : "VariableDeclarationStatement[38577-38618]:VariableDeclarationStatement[38615-38656]"
  }, {
    "left" : "for (int pos = stack.size() -1; pos >= 0; pos--)",
    "right" : "for (int pos = stack.size() -1; pos >= 0; pos--)",
    "info" : "ForStatement[38631-39219]:ForStatement[38669-39257]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38680-39219]:Block[38718-39257]"
  }, {
    "left" : "Element node = stack.get(pos);",
    "right" : "Element node = stack.get(pos);",
    "info" : "VariableDeclarationStatement[38698-38728]:VariableDeclarationStatement[38736-38766]"
  }, {
    "left" : "if (node.nodeName().equals(name))",
    "right" : "if (node.nodeName().equals(name))",
    "info" : "IfStatement[38745-39205]:IfStatement[38783-39243]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38779-39034]:Block[38817-39072]"
  }, {
    "left" : "tb.generateImpliedEndTags(name);",
    "right" : "tb.generateImpliedEndTags(name);",
    "info" : "ExpressionStatement[38801-38833]:ExpressionStatement[38839-38871]"
  }, {
    "left" : "if (!name.equals(tb.currentElement().nodeName()))",
    "right" : "if (!name.equals(tb.currentElement().nodeName()))",
    "info" : "IfStatement[38854-38943]:IfStatement[38892-38981]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[38928-38943]:ExpressionStatement[38966-38981]"
  }, {
    "left" : "tb.popStackToClose(name);",
    "right" : "tb.popStackToClose(name);",
    "info" : "ExpressionStatement[38964-38989]:ExpressionStatement[39002-39027]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[39010-39016]:BreakStatement[39048-39054]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39040-39205]:Block[39078-39243]"
  }, {
    "left" : "if (tb.isSpecial(node))",
    "right" : "if (tb.isSpecial(node))",
    "info" : "IfStatement[39062-39187]:IfStatement[39100-39225]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39086-39187]:Block[39124-39225]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[39112-39127]:ExpressionStatement[39150-39165]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[39152-39165]:ReturnStatement[39190-39203]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[39232-39244]:ReturnStatement[39270-39282]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[39344-39351]:PrimitiveType[39382-39389]"
  }, {
    "left" : "process",
    "right" : "process",
    "info" : "SimpleName[39352-39359]:SimpleName[39390-39397]"
  }, {
    "left" : "Token t",
    "right" : "Token t",
    "info" : "SingleVariableDeclaration[39360-39367]:SingleVariableDeclaration[39398-39405]"
  }, {
    "left" : "HtmlTreeBuilder tb",
    "right" : "HtmlTreeBuilder tb",
    "info" : "SingleVariableDeclaration[39369-39387]:SingleVariableDeclaration[39407-39425]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39389-39990]:Block[39427-40028]"
  }, {
    "left" : "if (t.isCharacter())",
    "right" : "if (t.isCharacter())",
    "info" : "IfStatement[39403-39955]:IfStatement[39441-39993]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39424-39483]:Block[39462-39521]"
  }, {
    "left" : "tb.insert(t.asCharacter());",
    "right" : "tb.insert(t.asCharacter());",
    "info" : "ExpressionStatement[39442-39469]:ExpressionStatement[39480-39507]"
  }, {
    "left" : "if (t.isEOF())",
    "right" : "if (t.isEOF())",
    "info" : "IfStatement[39489-39955]:IfStatement[39527-39993]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39504-39728]:Block[39542-39766]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[39522-39537]:ExpressionStatement[39560-39575]"
  }, {
    "left" : "tb.pop();",
    "right" : "tb.pop();",
    "info" : "ExpressionStatement[39616-39625]:ExpressionStatement[39654-39663]"
  }, {
    "left" : "tb.transition(tb.originalState());",
    "right" : "tb.transition(tb.originalState());",
    "info" : "ExpressionStatement[39642-39676]:ExpressionStatement[39680-39714]"
  }, {
    "left" : "return tb.process(t);",
    "right" : "return tb.process(t);",
    "info" : "ReturnStatement[39693-39714]:ReturnStatement[39731-39752]"
  }, {
    "left" : "if (t.isEndTag())",
    "right" : "if (t.isEndTag())",
    "info" : "IfStatement[39734-39955]:IfStatement[39772-39993]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39752-39955]:Block[39790-39993]"
  }, {
    "left" : "tb.pop();",
    "right" : "tb.pop();",
    "info" : "ExpressionStatement[39881-39890]:ExpressionStatement[39919-39928]"
  }, {
    "left" : "tb.transition(tb.originalState());",
    "right" : "tb.transition(tb.originalState());",
    "info" : "ExpressionStatement[39907-39941]:ExpressionStatement[39945-39979]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[39968-39980]:ReturnStatement[40006-40018]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[40020-40027]:PrimitiveType[40058-40065]"
  }, {
    "left" : "process",
    "right" : "process",
    "info" : "SimpleName[40028-40035]:SimpleName[40066-40073]"
  }, {
    "left" : "Token t",
    "right" : "Token t",
    "info" : "SingleVariableDeclaration[40036-40043]:SingleVariableDeclaration[40074-40081]"
  }, {
    "left" : "HtmlTreeBuilder tb",
    "right" : "HtmlTreeBuilder tb",
    "info" : "SingleVariableDeclaration[40045-40063]:SingleVariableDeclaration[40083-40101]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40065-43909]:Block[40103-43947]"
  }, {
    "left" : "if (t.isCharacter())",
    "right" : "if (t.isCharacter())",
    "info" : "IfStatement[40079-43859]:IfStatement[40117-43897]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40100-40285]:Block[40138-40323]"
  }, {
    "left" : "tb.newPendingTableCharacters();",
    "right" : "tb.newPendingTableCharacters();",
    "info" : "ExpressionStatement[40118-40149]:ExpressionStatement[40156-40187]"
  }, {
    "left" : "tb.markInsertionMode();",
    "right" : "tb.markInsertionMode();",
    "info" : "ExpressionStatement[40166-40189]:ExpressionStatement[40204-40227]"
  }, {
    "left" : "tb.transition(InTableText);",
    "right" : "tb.transition(InTableText);",
    "info" : "ExpressionStatement[40206-40233]:ExpressionStatement[40244-40271]"
  }, {
    "left" : "return tb.process(t);",
    "right" : "return tb.process(t);",
    "info" : "ReturnStatement[40250-40271]:ReturnStatement[40288-40309]"
  }, {
    "left" : "if (t.isComment())",
    "right" : "if (t.isComment())",
    "info" : "IfStatement[40291-43859]:IfStatement[40329-43897]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40310-40396]:Block[40348-40434]"
  }, {
    "left" : "tb.insert(t.asComment());",
    "right" : "tb.insert(t.asComment());",
    "info" : "ExpressionStatement[40328-40353]:ExpressionStatement[40366-40391]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[40370-40382]:ReturnStatement[40408-40420]"
  }, {
    "left" : "if (t.isDoctype())",
    "right" : "if (t.isDoctype())",
    "info" : "IfStatement[40402-43859]:IfStatement[40440-43897]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40421-40498]:Block[40459-40536]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[40439-40454]:ExpressionStatement[40477-40492]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[40471-40484]:ReturnStatement[40509-40522]"
  }, {
    "left" : "if (t.isStartTag())",
    "right" : "if (t.isStartTag())",
    "info" : "IfStatement[40504-43859]:IfStatement[40542-43897]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40524-42832]:Block[40562-42870]"
  }, {
    "left" : "Token.StartTag startTag = t.asStartTag();",
    "right" : "Token.StartTag startTag = t.asStartTag();",
    "info" : "VariableDeclarationStatement[40542-40583]:VariableDeclarationStatement[40580-40621]"
  }, {
    "left" : "String name = startTag.normalName();",
    "right" : "String name = startTag.normalName();",
    "info" : "VariableDeclarationStatement[40600-40636]:VariableDeclarationStatement[40638-40674]"
  }, {
    "left" : "if (name.equals(\"caption\"))",
    "right" : "if (name.equals(\"caption\"))",
    "info" : "IfStatement[40653-42643]:IfStatement[40691-42681]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40681-40897]:Block[40719-40935]"
  }, {
    "left" : "tb.clearStackToTableContext();",
    "right" : "tb.clearStackToTableContext();",
    "info" : "ExpressionStatement[40703-40733]:ExpressionStatement[40741-40771]"
  }, {
    "left" : "tb.insertMarkerToFormattingElements();",
    "right" : "tb.insertMarkerToFormattingElements();",
    "info" : "ExpressionStatement[40754-40792]:ExpressionStatement[40792-40830]"
  }, {
    "left" : "tb.insert(startTag);",
    "right" : "tb.insert(startTag);",
    "info" : "ExpressionStatement[40813-40833]:ExpressionStatement[40851-40871]"
  }, {
    "left" : "tb.transition(InCaption);",
    "right" : "tb.transition(InCaption);",
    "info" : "ExpressionStatement[40854-40879]:ExpressionStatement[40892-40917]"
  }, {
    "left" : "if (name.equals(\"colgroup\"))",
    "right" : "if (name.equals(\"colgroup\"))",
    "info" : "IfStatement[40903-42643]:IfStatement[40941-42681]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40932-41093]:Block[40970-41131]"
  }, {
    "left" : "tb.clearStackToTableContext();",
    "right" : "tb.clearStackToTableContext();",
    "info" : "ExpressionStatement[40954-40984]:ExpressionStatement[40992-41022]"
  }, {
    "left" : "tb.insert(startTag);",
    "right" : "tb.insert(startTag);",
    "info" : "ExpressionStatement[41005-41025]:ExpressionStatement[41043-41063]"
  }, {
    "left" : "tb.transition(InColumnGroup);",
    "right" : "tb.transition(InColumnGroup);",
    "info" : "ExpressionStatement[41046-41075]:ExpressionStatement[41084-41113]"
  }, {
    "left" : "if (name.equals(\"col\"))",
    "right" : "if (name.equals(\"col\"))",
    "info" : "IfStatement[41099-42643]:IfStatement[41137-42681]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41123-41236]:Block[41161-41274]"
  }, {
    "left" : "tb.processStartTag(\"colgroup\");",
    "right" : "tb.processStartTag(\"colgroup\");",
    "info" : "ExpressionStatement[41145-41176]:ExpressionStatement[41183-41214]"
  }, {
    "left" : "return tb.process(t);",
    "right" : "return tb.process(t);",
    "info" : "ReturnStatement[41197-41218]:ReturnStatement[41235-41256]"
  }, {
    "left" : "if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\"))",
    "right" : "if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\"))",
    "info" : "IfStatement[41242-42643]:IfStatement[41280-42681]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41294-41453]:Block[41332-41491]"
  }, {
    "left" : "tb.clearStackToTableContext();",
    "right" : "tb.clearStackToTableContext();",
    "info" : "ExpressionStatement[41316-41346]:ExpressionStatement[41354-41384]"
  }, {
    "left" : "tb.insert(startTag);",
    "right" : "tb.insert(startTag);",
    "info" : "ExpressionStatement[41367-41387]:ExpressionStatement[41405-41425]"
  }, {
    "left" : "tb.transition(InTableBody);",
    "right" : "tb.transition(InTableBody);",
    "info" : "ExpressionStatement[41408-41435]:ExpressionStatement[41446-41473]"
  }, {
    "left" : "if (StringUtil.in(name, \"td\", \"th\", \"tr\"))",
    "right" : "if (StringUtil.in(name, \"td\", \"th\", \"tr\"))",
    "info" : "IfStatement[41459-42643]:IfStatement[41497-42681]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41502-41612]:Block[41540-41650]"
  }, {
    "left" : "tb.processStartTag(\"tbody\");",
    "right" : "tb.processStartTag(\"tbody\");",
    "info" : "ExpressionStatement[41524-41552]:ExpressionStatement[41562-41590]"
  }, {
    "left" : "return tb.process(t);",
    "right" : "return tb.process(t);",
    "info" : "ReturnStatement[41573-41594]:ReturnStatement[41611-41632]"
  }, {
    "left" : "if (name.equals(\"table\"))",
    "right" : "if (name.equals(\"table\"))",
    "info" : "IfStatement[41618-42643]:IfStatement[41656-42681]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41644-41878]:Block[41682-41916]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[41666-41681]:ExpressionStatement[41704-41719]"
  }, {
    "left" : "boolean processed = tb.processEndTag(\"table\");",
    "right" : "boolean processed = tb.processEndTag(\"table\");",
    "info" : "VariableDeclarationStatement[41702-41748]:VariableDeclarationStatement[41740-41786]"
  }, {
    "left" : "if (processed)",
    "right" : "if (processed)",
    "info" : "IfStatement[41769-41860]:IfStatement[41807-41898]"
  }, {
    "left" : "return tb.process(t);",
    "right" : "return tb.process(t);",
    "info" : "ReturnStatement[41839-41860]:ReturnStatement[41877-41898]"
  }, {
    "left" : "if (StringUtil.in(name, \"style\", \"script\"))",
    "right" : "if (StringUtil.in(name, \"style\", \"script\"))",
    "info" : "IfStatement[41884-42643]:IfStatement[41922-42681]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41928-41997]:Block[41966-42035]"
  }, {
    "left" : "return tb.process(t, InHead);",
    "right" : "return tb.process(t, InHead);",
    "info" : "ReturnStatement[41950-41979]:ReturnStatement[41988-42017]"
  }, {
    "left" : "if (name.equals(\"input\"))",
    "right" : "if (name.equals(\"input\"))",
    "info" : "IfStatement[42003-42643]:IfStatement[42041-42681]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42029-42288]:Block[42067-42326]"
  }, {
    "left" : "if (!startTag.attributes.get(\"type\").equalsIgnoreCase(\"hidden\"))",
    "right" : "if (!startTag.attributes.get(\"type\").equalsIgnoreCase(\"hidden\"))",
    "info" : "IfStatement[42051-42270]:IfStatement[42089-42308]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42116-42191]:Block[42154-42229]"
  }, {
    "left" : "return anythingElse(t, tb);",
    "right" : "return anythingElse(t, tb);",
    "info" : "ReturnStatement[42142-42169]:ReturnStatement[42180-42207]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42197-42270]:Block[42235-42308]"
  }, {
    "left" : "tb.insertEmpty(startTag);",
    "right" : "tb.insertEmpty(startTag);",
    "info" : "ExpressionStatement[42223-42248]:ExpressionStatement[42261-42286]"
  }, {
    "left" : "if (name.equals(\"form\"))",
    "right" : "if (name.equals(\"form\"))",
    "info" : "IfStatement[42294-42643]:IfStatement[42332-42681]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42319-42570]:Block[42357-42608]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[42341-42356]:ExpressionStatement[42379-42394]"
  }, {
    "left" : "if (tb.getFormElement() != null)",
    "right" : "if (tb.getFormElement() != null)",
    "info" : "IfStatement[42377-42552]:IfStatement[42415-42590]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[42434-42447]:ReturnStatement[42472-42485]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42473-42552]:Block[42511-42590]"
  }, {
    "left" : "tb.insertForm(startTag, false);",
    "right" : "tb.insertForm(startTag, false);",
    "info" : "ExpressionStatement[42499-42530]:ExpressionStatement[42537-42568]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42576-42643]:Block[42614-42681]"
  }, {
    "left" : "return anythingElse(t, tb);",
    "right" : "return anythingElse(t, tb);",
    "info" : "ReturnStatement[42598-42625]:ReturnStatement[42636-42663]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[42660-42672]:ReturnStatement[42698-42710]"
  }, {
    "left" : "if (t.isEndTag())",
    "right" : "if (t.isEndTag())",
    "info" : "IfStatement[42838-43859]:IfStatement[42876-43897]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42856-43674]:Block[42894-43712]"
  }, {
    "left" : "Token.EndTag endTag = t.asEndTag();",
    "right" : "Token.EndTag endTag = t.asEndTag();",
    "info" : "VariableDeclarationStatement[42874-42909]:VariableDeclarationStatement[42912-42947]"
  }, {
    "left" : "String name = endTag.normalName();",
    "right" : "String name = endTag.normalName();",
    "info" : "VariableDeclarationStatement[42926-42960]:VariableDeclarationStatement[42964-42998]"
  }, {
    "left" : "if (name.equals(\"table\"))",
    "right" : "if (name.equals(\"table\"))",
    "info" : "IfStatement[42978-43608]:IfStatement[43016-43646]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43004-43300]:Block[43042-43338]"
  }, {
    "left" : "if (!tb.inTableScope(name))",
    "right" : "if (!tb.inTableScope(name))",
    "info" : "IfStatement[43026-43237]:IfStatement[43064-43275]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43054-43155]:Block[43092-43193]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[43080-43095]:ExpressionStatement[43118-43133]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[43120-43133]:ReturnStatement[43158-43171]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43161-43237]:Block[43199-43275]"
  }, {
    "left" : "tb.popStackToClose(\"table\");",
    "right" : "tb.popStackToClose(\"table\");",
    "info" : "ExpressionStatement[43187-43215]:ExpressionStatement[43225-43253]"
  }, {
    "left" : "tb.resetInsertionMode();",
    "right" : "tb.resetInsertionMode();",
    "info" : "ExpressionStatement[43258-43282]:ExpressionStatement[43296-43320]"
  }, {
    "left" : "if (StringUtil.in(name,\n                        \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"))",
    "right" : "if (StringUtil.in(name,\n                        \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"))",
    "info" : "IfStatement[43306-43608]:IfStatement[43344-43646]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43446-43535]:Block[43484-43573]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[43468-43483]:ExpressionStatement[43506-43521]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[43504-43517]:ReturnStatement[43542-43555]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43541-43608]:Block[43579-43646]"
  }, {
    "left" : "return anythingElse(t, tb);",
    "right" : "return anythingElse(t, tb);",
    "info" : "ReturnStatement[43563-43590]:ReturnStatement[43601-43628]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[43625-43637]:ReturnStatement[43663-43675]"
  }, {
    "left" : "if (t.isEOF())",
    "right" : "if (t.isEOF())",
    "info" : "IfStatement[43680-43859]:IfStatement[43718-43897]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43695-43859]:Block[43733-43897]"
  }, {
    "left" : "if (tb.currentElement().nodeName().equals(\"html\"))",
    "right" : "if (tb.currentElement().nodeName().equals(\"html\"))",
    "info" : "IfStatement[43713-43799]:IfStatement[43751-43837]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[43784-43799]:ExpressionStatement[43822-43837]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[43816-43828]:ReturnStatement[43854-43866]"
  }, {
    "left" : "return anythingElse(t, tb);",
    "right" : "return anythingElse(t, tb);",
    "info" : "ReturnStatement[43872-43899]:ReturnStatement[43910-43937]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[43919-43926]:PrimitiveType[43957-43964]"
  }, {
    "left" : "anythingElse",
    "right" : "anythingElse",
    "info" : "SimpleName[43927-43939]:SimpleName[43965-43977]"
  }, {
    "left" : "Token t",
    "right" : "Token t",
    "info" : "SingleVariableDeclaration[43940-43947]:SingleVariableDeclaration[43978-43985]"
  }, {
    "left" : "HtmlTreeBuilder tb",
    "right" : "HtmlTreeBuilder tb",
    "info" : "SingleVariableDeclaration[43949-43967]:SingleVariableDeclaration[43987-44005]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43969-44400]:Block[44007-44438]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[43983-43998]:ExpressionStatement[44021-44036]"
  }, {
    "left" : "boolean processed;",
    "right" : "boolean processed;",
    "info" : "VariableDeclarationStatement[44011-44029]:VariableDeclarationStatement[44049-44067]"
  }, {
    "left" : "if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"))",
    "right" : "if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"))",
    "info" : "IfStatement[44042-44360]:IfStatement[44080-44398]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44135-44288]:Block[44173-44326]"
  }, {
    "left" : "tb.setFosterInserts(true);",
    "right" : "tb.setFosterInserts(true);",
    "info" : "ExpressionStatement[44153-44179]:ExpressionStatement[44191-44217]"
  }, {
    "left" : "processed = tb.process(t, InBody);",
    "right" : "processed = tb.process(t, InBody);",
    "info" : "ExpressionStatement[44196-44230]:ExpressionStatement[44234-44268]"
  }, {
    "left" : "tb.setFosterInserts(false);",
    "right" : "tb.setFosterInserts(false);",
    "info" : "ExpressionStatement[44247-44274]:ExpressionStatement[44285-44312]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44294-44360]:Block[44332-44398]"
  }, {
    "left" : "processed = tb.process(t, InBody);",
    "right" : "processed = tb.process(t, InBody);",
    "info" : "ExpressionStatement[44312-44346]:ExpressionStatement[44350-44384]"
  }, {
    "left" : "return processed;",
    "right" : "return processed;",
    "info" : "ReturnStatement[44373-44390]:ReturnStatement[44411-44428]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[44434-44441]:PrimitiveType[44472-44479]"
  }, {
    "left" : "process",
    "right" : "process",
    "info" : "SimpleName[44442-44449]:SimpleName[44480-44487]"
  }, {
    "left" : "Token t",
    "right" : "Token t",
    "info" : "SingleVariableDeclaration[44450-44457]:SingleVariableDeclaration[44488-44495]"
  }, {
    "left" : "HtmlTreeBuilder tb",
    "right" : "HtmlTreeBuilder tb",
    "info" : "SingleVariableDeclaration[44459-44477]:SingleVariableDeclaration[44497-44515]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44479-46221]:Block[44517-46259]"
  }, {
    "left" : "switch (t.type) {\n                case Character:\n                    Token.Character c = t.asCharacter();\n                    if (c.getData().equals(nullString)) {\n                        tb.error(this);\n                        return false;\n                    } else {\n                        tb.getPendingTableCharacters().add(c.getData());\n                    }\n                    break;\n                default:\n                    // todo - don't really like the way these table character data lists are built\n                    if (tb.getPendingTableCharacters().size() > 0) {\n                        for (String character : tb.getPendingTableCharacters()) {\n                            if (!isWhitespace(character)) {\n                                // InTable anything else section:\n                                tb.error(this);\n                                if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) {\n                                    tb.setFosterInserts(true);\n                                    tb.process(new Token.Character().data(character), InBody);\n                                    tb.setFosterInserts(false);\n                                } else {\n                                    tb.process(new Token.Character().data(character), InBody);\n                                }\n                            } else\n                                tb.insert(new Token.Character().data(character));\n                        }\n                        tb.newPendingTableCharacters();\n                    }\n                    tb.transition(tb.originalState());\n                    return tb.process(t);\n            }",
    "right" : "switch (t.type) {\n                case Character:\n                    Token.Character c = t.asCharacter();\n                    if (c.getData().equals(nullString)) {\n                        tb.error(this);\n                        return false;\n                    } else {\n                        tb.getPendingTableCharacters().add(c.getData());\n                    }\n                    break;\n                default:\n                    // todo - don't really like the way these table character data lists are built\n                    if (tb.getPendingTableCharacters().size() > 0) {\n                        for (String character : tb.getPendingTableCharacters()) {\n                            if (!isWhitespace(character)) {\n                                // InTable anything else section:\n                                tb.error(this);\n                                if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) {\n                                    tb.setFosterInserts(true);\n                                    tb.process(new Token.Character().data(character), InBody);\n                                    tb.setFosterInserts(false);\n                                } else {\n                                    tb.process(new Token.Character().data(character), InBody);\n                                }\n                            } else\n                                tb.insert(new Token.Character().data(character));\n                        }\n                        tb.newPendingTableCharacters();\n                    }\n                    tb.transition(tb.originalState());\n                    return tb.process(t);\n            }",
    "info" : "SwitchStatement[44493-46186]:SwitchStatement[44531-46224]"
  }, {
    "left" : "case Character:",
    "right" : "case Character:",
    "info" : "SwitchCase[44527-44542]:SwitchCase[44565-44580]"
  }, {
    "left" : "Token.Character c = t.asCharacter();",
    "right" : "Token.Character c = t.asCharacter();",
    "info" : "VariableDeclarationStatement[44563-44599]:VariableDeclarationStatement[44601-44637]"
  }, {
    "left" : "if (c.getData().equals(nullString))",
    "right" : "if (c.getData().equals(nullString))",
    "info" : "IfStatement[44620-44859]:IfStatement[44658-44897]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44656-44757]:Block[44694-44795]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[44682-44697]:ExpressionStatement[44720-44735]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[44722-44735]:ReturnStatement[44760-44773]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44763-44859]:Block[44801-44897]"
  }, {
    "left" : "tb.getPendingTableCharacters().add(c.getData());",
    "right" : "tb.getPendingTableCharacters().add(c.getData());",
    "info" : "ExpressionStatement[44789-44837]:ExpressionStatement[44827-44875]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[44880-44886]:BreakStatement[44918-44924]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[44903-44911]:SwitchCase[44941-44949]"
  }, {
    "left" : "if (tb.getPendingTableCharacters().size() > 0)",
    "right" : "if (tb.getPendingTableCharacters().size() > 0)",
    "info" : "IfStatement[45031-46075]:IfStatement[45069-46113]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45078-46075]:Block[45116-46113]"
  }, {
    "left" : "for (String character : tb.getPendingTableCharacters())",
    "right" : "for (String character : tb.getPendingTableCharacters())",
    "info" : "EnhancedForStatement[45104-45997]:EnhancedForStatement[45142-46035]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45160-45997]:Block[45198-46035]"
  }, {
    "left" : "if (!isWhitespace(character))",
    "right" : "if (!isWhitespace(character))",
    "info" : "IfStatement[45190-45971]:IfStatement[45228-46009]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45220-45884]:Block[45258-45922]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[45320-45335]:ExpressionStatement[45358-45373]"
  }, {
    "left" : "if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"))",
    "right" : "if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"))",
    "info" : "IfStatement[45368-45854]:IfStatement[45406-45892]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45461-45718]:Block[45499-45756]"
  }, {
    "left" : "tb.setFosterInserts(true);",
    "right" : "tb.setFosterInserts(true);",
    "info" : "ExpressionStatement[45499-45525]:ExpressionStatement[45537-45563]"
  }, {
    "left" : "tb.process(new Token.Character().data(character), InBody);",
    "right" : "tb.process(new Token.Character().data(character), InBody);",
    "info" : "ExpressionStatement[45562-45620]:ExpressionStatement[45600-45658]"
  }, {
    "left" : "tb.setFosterInserts(false);",
    "right" : "tb.setFosterInserts(false);",
    "info" : "ExpressionStatement[45657-45684]:ExpressionStatement[45695-45722]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45724-45854]:Block[45762-45892]"
  }, {
    "left" : "tb.process(new Token.Character().data(character), InBody);",
    "right" : "tb.process(new Token.Character().data(character), InBody);",
    "info" : "ExpressionStatement[45762-45820]:ExpressionStatement[45800-45858]"
  }, {
    "left" : "tb.insert(new Token.Character().data(character));",
    "right" : "tb.insert(new Token.Character().data(character));",
    "info" : "ExpressionStatement[45922-45971]:ExpressionStatement[45960-46009]"
  }, {
    "left" : "tb.newPendingTableCharacters();",
    "right" : "tb.newPendingTableCharacters();",
    "info" : "ExpressionStatement[46022-46053]:ExpressionStatement[46060-46091]"
  }, {
    "left" : "tb.transition(tb.originalState());",
    "right" : "tb.transition(tb.originalState());",
    "info" : "ExpressionStatement[46096-46130]:ExpressionStatement[46134-46168]"
  }, {
    "left" : "return tb.process(t);",
    "right" : "return tb.process(t);",
    "info" : "ReturnStatement[46151-46172]:ReturnStatement[46189-46210]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[46199-46211]:ReturnStatement[46237-46249]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[46253-46260]:PrimitiveType[46291-46298]"
  }, {
    "left" : "process",
    "right" : "process",
    "info" : "SimpleName[46261-46268]:SimpleName[46299-46306]"
  }, {
    "left" : "Token t",
    "right" : "Token t",
    "info" : "SingleVariableDeclaration[46269-46276]:SingleVariableDeclaration[46307-46314]"
  }, {
    "left" : "HtmlTreeBuilder tb",
    "right" : "HtmlTreeBuilder tb",
    "info" : "SingleVariableDeclaration[46278-46296]:SingleVariableDeclaration[46316-46334]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46298-47815]:Block[46336-47853]"
  }, {
    "left" : "if (t.isEndTag() && t.asEndTag().normalName().equals(\"caption\"))",
    "right" : "if (t.isEndTag() && t.asEndTag().normalName().equals(\"caption\"))",
    "info" : "IfStatement[46312-47780]:IfStatement[46350-47818]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46377-46975]:Block[46415-47013]"
  }, {
    "left" : "Token.EndTag endTag = t.asEndTag();",
    "right" : "Token.EndTag endTag = t.asEndTag();",
    "info" : "VariableDeclarationStatement[46395-46430]:VariableDeclarationStatement[46433-46468]"
  }, {
    "left" : "String name = endTag.normalName();",
    "right" : "String name = endTag.normalName();",
    "info" : "VariableDeclarationStatement[46447-46481]:VariableDeclarationStatement[46485-46519]"
  }, {
    "left" : "if (!tb.inTableScope(name))",
    "right" : "if (!tb.inTableScope(name))",
    "info" : "IfStatement[46498-46961]:IfStatement[46536-46999]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46526-46615]:Block[46564-46653]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[46548-46563]:ExpressionStatement[46586-46601]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[46584-46597]:ReturnStatement[46622-46635]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46621-46961]:Block[46659-46999]"
  }, {
    "left" : "tb.generateImpliedEndTags();",
    "right" : "tb.generateImpliedEndTags();",
    "info" : "ExpressionStatement[46643-46671]:ExpressionStatement[46681-46709]"
  }, {
    "left" : "if (!tb.currentElement().nodeName().equals(\"caption\"))",
    "right" : "if (!tb.currentElement().nodeName().equals(\"caption\"))",
    "info" : "IfStatement[46692-46786]:IfStatement[46730-46824]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[46771-46786]:ExpressionStatement[46809-46824]"
  }, {
    "left" : "tb.popStackToClose(\"caption\");",
    "right" : "tb.popStackToClose(\"caption\");",
    "info" : "ExpressionStatement[46807-46837]:ExpressionStatement[46845-46875]"
  }, {
    "left" : "tb.clearFormattingElementsToLastMarker();",
    "right" : "tb.clearFormattingElementsToLastMarker();",
    "info" : "ExpressionStatement[46858-46899]:ExpressionStatement[46896-46937]"
  }, {
    "left" : "tb.transition(InTable);",
    "right" : "tb.transition(InTable);",
    "info" : "ExpressionStatement[46920-46943]:ExpressionStatement[46958-46981]"
  }, {
    "left" : "if ((\n                    t.isStartTag() && StringUtil.in(t.asStartTag().normalName(),\n                            \"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\") ||\n                            t.isEndTag() && t.asEndTag().normalName().equals(\"table\")))",
    "right" : "if ((\n                    t.isStartTag() && StringUtil.in(t.asStartTag().normalName(),\n                            \"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\") ||\n                            t.isEndTag() && t.asEndTag().normalName().equals(\"table\")))",
    "info" : "IfStatement[46981-47780]:IfStatement[47019-47818]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47283-47468]:Block[47321-47506]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[47301-47316]:ExpressionStatement[47339-47354]"
  }, {
    "left" : "boolean processed = tb.processEndTag(\"caption\");",
    "right" : "boolean processed = tb.processEndTag(\"caption\");",
    "info" : "VariableDeclarationStatement[47333-47381]:VariableDeclarationStatement[47371-47419]"
  }, {
    "left" : "if (processed)",
    "right" : "if (processed)",
    "info" : "IfStatement[47398-47454]:IfStatement[47436-47492]"
  }, {
    "left" : "return tb.process(t);",
    "right" : "return tb.process(t);",
    "info" : "ReturnStatement[47433-47454]:ReturnStatement[47471-47492]"
  }, {
    "left" : "if (t.isEndTag() && StringUtil.in(t.asEndTag().normalName(),\n                    \"body\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"))",
    "right" : "if (t.isEndTag() && StringUtil.in(t.asEndTag().normalName(),\n                    \"body\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"))",
    "info" : "IfStatement[47474-47780]:IfStatement[47512-47818]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47636-47713]:Block[47674-47751]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[47654-47669]:ExpressionStatement[47692-47707]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[47686-47699]:ReturnStatement[47724-47737]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47719-47780]:Block[47757-47818]"
  }, {
    "left" : "return tb.process(t, InBody);",
    "right" : "return tb.process(t, InBody);",
    "info" : "ReturnStatement[47737-47766]:ReturnStatement[47775-47804]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[47793-47805]:ReturnStatement[47831-47843]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[47851-47858]:PrimitiveType[47889-47896]"
  }, {
    "left" : "process",
    "right" : "process",
    "info" : "SimpleName[47859-47866]:SimpleName[47897-47904]"
  }, {
    "left" : "Token t",
    "right" : "Token t",
    "info" : "SingleVariableDeclaration[47867-47874]:SingleVariableDeclaration[47905-47912]"
  }, {
    "left" : "HtmlTreeBuilder tb",
    "right" : "HtmlTreeBuilder tb",
    "info" : "SingleVariableDeclaration[47876-47894]:SingleVariableDeclaration[47914-47932]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47896-49672]:Block[47934-49710]"
  }, {
    "left" : "if (isWhitespace(t))",
    "right" : "if (isWhitespace(t))",
    "info" : "IfStatement[47910-48019]:IfStatement[47948-48057]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47931-48019]:Block[47969-48057]"
  }, {
    "left" : "tb.insert(t.asCharacter());",
    "right" : "tb.insert(t.asCharacter());",
    "info" : "ExpressionStatement[47949-47976]:ExpressionStatement[47987-48014]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[47993-48005]:ReturnStatement[48031-48043]"
  }, {
    "left" : "switch (t.type) {\n                case Comment:\n                    tb.insert(t.asComment());\n                    break;\n                case Doctype:\n                    tb.error(this);\n                    break;\n                case StartTag:\n                    Token.StartTag startTag = t.asStartTag();\n                    String name = startTag.normalName();\n                    if (name.equals(\"html\"))\n                        return tb.process(t, InBody);\n                    else if (name.equals(\"col\"))\n                        tb.insertEmpty(startTag);\n                    else\n                        return anythingElse(t, tb);\n                    break;\n                case EndTag:\n                    Token.EndTag endTag = t.asEndTag();\n                    name = endTag.normalName();\n                    if (name.equals(\"colgroup\")) {\n                        if (tb.currentElement().nodeName().equals(\"html\")) { // frag case\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.pop();\n                            tb.transition(InTable);\n                        }\n                    } else\n                        return anythingElse(t, tb);\n                    break;\n                case EOF:\n                    if (tb.currentElement().nodeName().equals(\"html\"))\n                        return true; // stop parsing; frag case\n                    else\n                        return anythingElse(t, tb);\n                default:\n                    return anythingElse(t, tb);\n            }",
    "right" : "switch (t.type) {\n                case Comment:\n                    tb.insert(t.asComment());\n                    break;\n                case Doctype:\n                    tb.error(this);\n                    break;\n                case StartTag:\n                    Token.StartTag startTag = t.asStartTag();\n                    String name = startTag.normalName();\n                    if (name.equals(\"html\"))\n                        return tb.process(t, InBody);\n                    else if (name.equals(\"col\"))\n                        tb.insertEmpty(startTag);\n                    else\n                        return anythingElse(t, tb);\n                    break;\n                case EndTag:\n                    Token.EndTag endTag = t.asEndTag();\n                    name = endTag.normalName();\n                    if (name.equals(\"colgroup\")) {\n                        if (tb.currentElement().nodeName().equals(\"html\")) { // frag case\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.pop();\n                            tb.transition(InTable);\n                        }\n                    } else\n                        return anythingElse(t, tb);\n                    break;\n                case EOF:\n                    if (tb.currentElement().nodeName().equals(\"html\"))\n                        return true; // stop parsing; frag case\n                    else\n                        return anythingElse(t, tb);\n                default:\n                    return anythingElse(t, tb);\n            }",
    "info" : "SwitchStatement[48032-49637]:SwitchStatement[48070-49675]"
  }, {
    "left" : "case Comment:",
    "right" : "case Comment:",
    "info" : "SwitchCase[48066-48079]:SwitchCase[48104-48117]"
  }, {
    "left" : "tb.insert(t.asComment());",
    "right" : "tb.insert(t.asComment());",
    "info" : "ExpressionStatement[48100-48125]:ExpressionStatement[48138-48163]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[48146-48152]:BreakStatement[48184-48190]"
  }, {
    "left" : "case Doctype:",
    "right" : "case Doctype:",
    "info" : "SwitchCase[48169-48182]:SwitchCase[48207-48220]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[48203-48218]:ExpressionStatement[48241-48256]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[48239-48245]:BreakStatement[48277-48283]"
  }, {
    "left" : "case StartTag:",
    "right" : "case StartTag:",
    "info" : "SwitchCase[48262-48276]:SwitchCase[48300-48314]"
  }, {
    "left" : "Token.StartTag startTag = t.asStartTag();",
    "right" : "Token.StartTag startTag = t.asStartTag();",
    "info" : "VariableDeclarationStatement[48297-48338]:VariableDeclarationStatement[48335-48376]"
  }, {
    "left" : "String name = startTag.normalName();",
    "right" : "String name = startTag.normalName();",
    "info" : "VariableDeclarationStatement[48359-48395]:VariableDeclarationStatement[48397-48433]"
  }, {
    "left" : "if (name.equals(\"html\"))",
    "right" : "if (name.equals(\"html\"))",
    "info" : "IfStatement[48416-48670]:IfStatement[48454-48708]"
  }, {
    "left" : "return tb.process(t, InBody);",
    "right" : "return tb.process(t, InBody);",
    "info" : "ReturnStatement[48465-48494]:ReturnStatement[48503-48532]"
  }, {
    "left" : "if (name.equals(\"col\"))",
    "right" : "if (name.equals(\"col\"))",
    "info" : "IfStatement[48520-48670]:IfStatement[48558-48708]"
  }, {
    "left" : "tb.insertEmpty(startTag);",
    "right" : "tb.insertEmpty(startTag);",
    "info" : "ExpressionStatement[48568-48593]:ExpressionStatement[48606-48631]"
  }, {
    "left" : "return anythingElse(t, tb);",
    "right" : "return anythingElse(t, tb);",
    "info" : "ReturnStatement[48643-48670]:ReturnStatement[48681-48708]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[48691-48697]:BreakStatement[48729-48735]"
  }, {
    "left" : "case EndTag:",
    "right" : "case EndTag:",
    "info" : "SwitchCase[48714-48726]:SwitchCase[48752-48764]"
  }, {
    "left" : "Token.EndTag endTag = t.asEndTag();",
    "right" : "Token.EndTag endTag = t.asEndTag();",
    "info" : "VariableDeclarationStatement[48747-48782]:VariableDeclarationStatement[48785-48820]"
  }, {
    "left" : "name = endTag.normalName();",
    "right" : "name = endTag.normalName();",
    "info" : "ExpressionStatement[48803-48830]:ExpressionStatement[48841-48868]"
  }, {
    "left" : "if (name.equals(\"colgroup\"))",
    "right" : "if (name.equals(\"colgroup\"))",
    "info" : "IfStatement[48851-49285]:IfStatement[48889-49323]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48880-49228]:Block[48918-49266]"
  }, {
    "left" : "if (tb.currentElement().nodeName().equals(\"html\"))",
    "right" : "if (tb.currentElement().nodeName().equals(\"html\"))",
    "info" : "IfStatement[48906-49206]:IfStatement[48944-49244]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48957-49083]:Block[48995-49121]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[49000-49015]:ExpressionStatement[49038-49053]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[49044-49057]:ReturnStatement[49082-49095]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49089-49206]:Block[49127-49244]"
  }, {
    "left" : "tb.pop();",
    "right" : "tb.pop();",
    "info" : "ExpressionStatement[49119-49128]:ExpressionStatement[49157-49166]"
  }, {
    "left" : "tb.transition(InTable);",
    "right" : "tb.transition(InTable);",
    "info" : "ExpressionStatement[49157-49180]:ExpressionStatement[49195-49218]"
  }, {
    "left" : "return anythingElse(t, tb);",
    "right" : "return anythingElse(t, tb);",
    "info" : "ReturnStatement[49258-49285]:ReturnStatement[49296-49323]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[49306-49312]:BreakStatement[49344-49350]"
  }, {
    "left" : "case EOF:",
    "right" : "case EOF:",
    "info" : "SwitchCase[49329-49338]:SwitchCase[49367-49376]"
  }, {
    "left" : "if (tb.currentElement().nodeName().equals(\"html\"))",
    "right" : "if (tb.currentElement().nodeName().equals(\"html\"))",
    "info" : "IfStatement[49359-49550]:IfStatement[49397-49588]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[49434-49446]:ReturnStatement[49472-49484]"
  }, {
    "left" : "return anythingElse(t, tb);",
    "right" : "return anythingElse(t, tb);",
    "info" : "ReturnStatement[49523-49550]:ReturnStatement[49561-49588]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[49567-49575]:SwitchCase[49605-49613]"
  }, {
    "left" : "return anythingElse(t, tb);",
    "right" : "return anythingElse(t, tb);",
    "info" : "ReturnStatement[49596-49623]:ReturnStatement[49634-49661]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[49650-49662]:ReturnStatement[49688-49700]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[49682-49689]:Modifier[49720-49727]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[49690-49697]:PrimitiveType[49728-49735]"
  }, {
    "left" : "anythingElse",
    "right" : "anythingElse",
    "info" : "SimpleName[49698-49710]:SimpleName[49736-49748]"
  }, {
    "left" : "Token t",
    "right" : "Token t",
    "info" : "SingleVariableDeclaration[49711-49718]:SingleVariableDeclaration[49749-49756]"
  }, {
    "left" : "TreeBuilder tb",
    "right" : "TreeBuilder tb",
    "info" : "SingleVariableDeclaration[49720-49734]:SingleVariableDeclaration[49758-49772]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49736-49928]:Block[49774-49966]"
  }, {
    "left" : "boolean processed = tb.processEndTag(\"colgroup\");",
    "right" : "boolean processed = tb.processEndTag(\"colgroup\");",
    "info" : "VariableDeclarationStatement[49750-49799]:VariableDeclarationStatement[49788-49837]"
  }, {
    "left" : "if (processed)",
    "right" : "if (processed)",
    "info" : "IfStatement[49812-49893]:IfStatement[49850-49931]"
  }, {
    "left" : "return tb.process(t);",
    "right" : "return tb.process(t);",
    "info" : "ReturnStatement[49872-49893]:ReturnStatement[49910-49931]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[49906-49918]:ReturnStatement[49944-49956]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[49962-49969]:PrimitiveType[50000-50007]"
  }, {
    "left" : "process",
    "right" : "process",
    "info" : "SimpleName[49970-49977]:SimpleName[50008-50015]"
  }, {
    "left" : "Token t",
    "right" : "Token t",
    "info" : "SingleVariableDeclaration[49978-49985]:SingleVariableDeclaration[50016-50023]"
  }, {
    "left" : "HtmlTreeBuilder tb",
    "right" : "HtmlTreeBuilder tb",
    "info" : "SingleVariableDeclaration[49987-50005]:SingleVariableDeclaration[50025-50043]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50007-51953]:Block[50045-51991]"
  }, {
    "left" : "switch (t.type) {\n                case StartTag:\n                    Token.StartTag startTag = t.asStartTag();\n                    String name = startTag.normalName();\n                    if (name.equals(\"tr\")) {\n                        tb.clearStackToTableBodyContext();\n                        tb.insert(startTag);\n                        tb.transition(InRow);\n                    } else if (StringUtil.in(name, \"th\", \"td\")) {\n                        tb.error(this);\n                        tb.processStartTag(\"tr\");\n                        return tb.process(startTag);\n                    } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) {\n                        return exitTableBody(t, tb);\n                    } else\n                        return anythingElse(t, tb);\n                    break;\n                case EndTag:\n                    Token.EndTag endTag = t.asEndTag();\n                    name = endTag.normalName();\n                    if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n                        if (!tb.inTableScope(name)) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.clearStackToTableBodyContext();\n                            tb.pop();\n                            tb.transition(InTable);\n                        }\n                    } else if (name.equals(\"table\")) {\n                        return exitTableBody(t, tb);\n                    } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) {\n                        tb.error(this);\n                        return false;\n                    } else\n                        return anythingElse(t, tb);\n                    break;\n                default:\n                    return anythingElse(t, tb);\n            }",
    "right" : "switch (t.type) {\n                case StartTag:\n                    Token.StartTag startTag = t.asStartTag();\n                    String name = startTag.normalName();\n                    if (name.equals(\"tr\")) {\n                        tb.clearStackToTableBodyContext();\n                        tb.insert(startTag);\n                        tb.transition(InRow);\n                    } else if (StringUtil.in(name, \"th\", \"td\")) {\n                        tb.error(this);\n                        tb.processStartTag(\"tr\");\n                        return tb.process(startTag);\n                    } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) {\n                        return exitTableBody(t, tb);\n                    } else\n                        return anythingElse(t, tb);\n                    break;\n                case EndTag:\n                    Token.EndTag endTag = t.asEndTag();\n                    name = endTag.normalName();\n                    if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n                        if (!tb.inTableScope(name)) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.clearStackToTableBodyContext();\n                            tb.pop();\n                            tb.transition(InTable);\n                        }\n                    } else if (name.equals(\"table\")) {\n                        return exitTableBody(t, tb);\n                    } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) {\n                        tb.error(this);\n                        return false;\n                    } else\n                        return anythingElse(t, tb);\n                    break;\n                default:\n                    return anythingElse(t, tb);\n            }",
    "info" : "SwitchStatement[50021-51918]:SwitchStatement[50059-51956]"
  }, {
    "left" : "case StartTag:",
    "right" : "case StartTag:",
    "info" : "SwitchCase[50055-50069]:SwitchCase[50093-50107]"
  }, {
    "left" : "Token.StartTag startTag = t.asStartTag();",
    "right" : "Token.StartTag startTag = t.asStartTag();",
    "info" : "VariableDeclarationStatement[50090-50131]:VariableDeclarationStatement[50128-50169]"
  }, {
    "left" : "String name = startTag.normalName();",
    "right" : "String name = startTag.normalName();",
    "info" : "VariableDeclarationStatement[50152-50188]:VariableDeclarationStatement[50190-50226]"
  }, {
    "left" : "if (name.equals(\"tr\"))",
    "right" : "if (name.equals(\"tr\"))",
    "info" : "IfStatement[50209-50835]:IfStatement[50247-50873]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50232-50405]:Block[50270-50443]"
  }, {
    "left" : "tb.clearStackToTableBodyContext();",
    "right" : "tb.clearStackToTableBodyContext();",
    "info" : "ExpressionStatement[50258-50292]:ExpressionStatement[50296-50330]"
  }, {
    "left" : "tb.insert(startTag);",
    "right" : "tb.insert(startTag);",
    "info" : "ExpressionStatement[50317-50337]:ExpressionStatement[50355-50375]"
  }, {
    "left" : "tb.transition(InRow);",
    "right" : "tb.transition(InRow);",
    "info" : "ExpressionStatement[50362-50383]:ExpressionStatement[50400-50421]"
  }, {
    "left" : "if (StringUtil.in(name, \"th\", \"td\"))",
    "right" : "if (StringUtil.in(name, \"th\", \"td\"))",
    "info" : "IfStatement[50411-50835]:IfStatement[50449-50873]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50448-50614]:Block[50486-50652]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[50474-50489]:ExpressionStatement[50512-50527]"
  }, {
    "left" : "tb.processStartTag(\"tr\");",
    "right" : "tb.processStartTag(\"tr\");",
    "info" : "ExpressionStatement[50514-50539]:ExpressionStatement[50552-50577]"
  }, {
    "left" : "return tb.process(startTag);",
    "right" : "return tb.process(startTag);",
    "info" : "ReturnStatement[50564-50592]:ReturnStatement[50602-50630]"
  }, {
    "left" : "if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\"))",
    "right" : "if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\"))",
    "info" : "IfStatement[50620-50835]:IfStatement[50658-50873]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50702-50778]:Block[50740-50816]"
  }, {
    "left" : "return exitTableBody(t, tb);",
    "right" : "return exitTableBody(t, tb);",
    "info" : "ReturnStatement[50728-50756]:ReturnStatement[50766-50794]"
  }, {
    "left" : "return anythingElse(t, tb);",
    "right" : "return anythingElse(t, tb);",
    "info" : "ReturnStatement[50808-50835]:ReturnStatement[50846-50873]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[50856-50862]:BreakStatement[50894-50900]"
  }, {
    "left" : "case EndTag:",
    "right" : "case EndTag:",
    "info" : "SwitchCase[50879-50891]:SwitchCase[50917-50929]"
  }, {
    "left" : "Token.EndTag endTag = t.asEndTag();",
    "right" : "Token.EndTag endTag = t.asEndTag();",
    "info" : "VariableDeclarationStatement[50912-50947]:VariableDeclarationStatement[50950-50985]"
  }, {
    "left" : "name = endTag.normalName();",
    "right" : "name = endTag.normalName();",
    "info" : "ExpressionStatement[50968-50995]:ExpressionStatement[51006-51033]"
  }, {
    "left" : "if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\"))",
    "right" : "if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\"))",
    "info" : "IfStatement[51016-51804]:IfStatement[51054-51842]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[51068-51443]:Block[51106-51481]"
  }, {
    "left" : "if (!tb.inTableScope(name))",
    "right" : "if (!tb.inTableScope(name))",
    "info" : "IfStatement[51094-51421]:IfStatement[51132-51459]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[51122-51235]:Block[51160-51273]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[51152-51167]:ExpressionStatement[51190-51205]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[51196-51209]:ReturnStatement[51234-51247]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[51241-51421]:Block[51279-51459]"
  }, {
    "left" : "tb.clearStackToTableBodyContext();",
    "right" : "tb.clearStackToTableBodyContext();",
    "info" : "ExpressionStatement[51271-51305]:ExpressionStatement[51309-51343]"
  }, {
    "left" : "tb.pop();",
    "right" : "tb.pop();",
    "info" : "ExpressionStatement[51334-51343]:ExpressionStatement[51372-51381]"
  }, {
    "left" : "tb.transition(InTable);",
    "right" : "tb.transition(InTable);",
    "info" : "ExpressionStatement[51372-51395]:ExpressionStatement[51410-51433]"
  }, {
    "left" : "if (name.equals(\"table\"))",
    "right" : "if (name.equals(\"table\"))",
    "info" : "IfStatement[51449-51804]:IfStatement[51487-51842]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[51475-51551]:Block[51513-51589]"
  }, {
    "left" : "return exitTableBody(t, tb);",
    "right" : "return exitTableBody(t, tb);",
    "info" : "ReturnStatement[51501-51529]:ReturnStatement[51539-51567]"
  }, {
    "left" : "if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\"))",
    "right" : "if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\"))",
    "info" : "IfStatement[51557-51804]:IfStatement[51595-51842]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[51646-51747]:Block[51684-51785]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[51672-51687]:ExpressionStatement[51710-51725]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[51712-51725]:ReturnStatement[51750-51763]"
  }, {
    "left" : "return anythingElse(t, tb);",
    "right" : "return anythingElse(t, tb);",
    "info" : "ReturnStatement[51777-51804]:ReturnStatement[51815-51842]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[51825-51831]:BreakStatement[51863-51869]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[51848-51856]:SwitchCase[51886-51894]"
  }, {
    "left" : "return anythingElse(t, tb);",
    "right" : "return anythingElse(t, tb);",
    "info" : "ReturnStatement[51877-51904]:ReturnStatement[51915-51942]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[51931-51943]:ReturnStatement[51969-51981]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[51963-51970]:Modifier[52001-52008]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[51971-51978]:PrimitiveType[52009-52016]"
  }, {
    "left" : "exitTableBody",
    "right" : "exitTableBody",
    "info" : "SimpleName[51979-51992]:SimpleName[52017-52030]"
  }, {
    "left" : "Token t",
    "right" : "Token t",
    "info" : "SingleVariableDeclaration[51993-52000]:SingleVariableDeclaration[52031-52038]"
  }, {
    "left" : "HtmlTreeBuilder tb",
    "right" : "HtmlTreeBuilder tb",
    "info" : "SingleVariableDeclaration[52002-52020]:SingleVariableDeclaration[52040-52058]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52022-52402]:Block[52060-52440]"
  }, {
    "left" : "if (!(tb.inTableScope(\"tbody\") || tb.inTableScope(\"thead\") || tb.inScope(\"tfoot\")))",
    "right" : "if (!(tb.inTableScope(\"tbody\") || tb.inTableScope(\"thead\") || tb.inScope(\"tfoot\")))",
    "info" : "IfStatement[52036-52226]:IfStatement[52074-52264]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52120-52226]:Block[52158-52264]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[52167-52182]:ExpressionStatement[52205-52220]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[52199-52212]:ReturnStatement[52237-52250]"
  }, {
    "left" : "tb.clearStackToTableBodyContext();",
    "right" : "tb.clearStackToTableBodyContext();",
    "info" : "ExpressionStatement[52239-52273]:ExpressionStatement[52277-52311]"
  }, {
    "left" : "tb.processEndTag(tb.currentElement().nodeName());",
    "right" : "tb.processEndTag(tb.currentElement().nodeName());",
    "info" : "ExpressionStatement[52286-52335]:ExpressionStatement[52324-52373]"
  }, {
    "left" : "return tb.process(t);",
    "right" : "return tb.process(t);",
    "info" : "ReturnStatement[52371-52392]:ReturnStatement[52409-52430]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[52412-52419]:Modifier[52450-52457]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[52420-52427]:PrimitiveType[52458-52465]"
  }, {
    "left" : "anythingElse",
    "right" : "anythingElse",
    "info" : "SimpleName[52428-52440]:SimpleName[52466-52478]"
  }, {
    "left" : "Token t",
    "right" : "Token t",
    "info" : "SingleVariableDeclaration[52441-52448]:SingleVariableDeclaration[52479-52486]"
  }, {
    "left" : "HtmlTreeBuilder tb",
    "right" : "HtmlTreeBuilder tb",
    "info" : "SingleVariableDeclaration[52450-52468]:SingleVariableDeclaration[52488-52506]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52470-52524]:Block[52508-52562]"
  }, {
    "left" : "return tb.process(t, InTable);",
    "right" : "return tb.process(t, InTable);",
    "info" : "ReturnStatement[52484-52514]:ReturnStatement[52522-52552]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[52552-52559]:PrimitiveType[52590-52597]"
  }, {
    "left" : "process",
    "right" : "process",
    "info" : "SimpleName[52560-52567]:SimpleName[52598-52605]"
  }, {
    "left" : "Token t",
    "right" : "Token t",
    "info" : "SingleVariableDeclaration[52568-52575]:SingleVariableDeclaration[52606-52613]"
  }, {
    "left" : "HtmlTreeBuilder tb",
    "right" : "HtmlTreeBuilder tb",
    "info" : "SingleVariableDeclaration[52577-52595]:SingleVariableDeclaration[52615-52633]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52597-54529]:Block[52635-54567]"
  }, {
    "left" : "if (t.isStartTag())",
    "right" : "if (t.isStartTag())",
    "info" : "IfStatement[52611-54494]:IfStatement[52649-54532]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52631-53265]:Block[52669-53303]"
  }, {
    "left" : "Token.StartTag startTag = t.asStartTag();",
    "right" : "Token.StartTag startTag = t.asStartTag();",
    "info" : "VariableDeclarationStatement[52649-52690]:VariableDeclarationStatement[52687-52728]"
  }, {
    "left" : "String name = startTag.normalName();",
    "right" : "String name = startTag.normalName();",
    "info" : "VariableDeclarationStatement[52707-52743]:VariableDeclarationStatement[52745-52781]"
  }, {
    "left" : "if (StringUtil.in(name, \"th\", \"td\"))",
    "right" : "if (StringUtil.in(name, \"th\", \"td\"))",
    "info" : "IfStatement[52761-53251]:IfStatement[52799-53289]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52798-53014]:Block[52836-53052]"
  }, {
    "left" : "tb.clearStackToTableRowContext();",
    "right" : "tb.clearStackToTableRowContext();",
    "info" : "ExpressionStatement[52820-52853]:ExpressionStatement[52858-52891]"
  }, {
    "left" : "tb.insert(startTag);",
    "right" : "tb.insert(startTag);",
    "info" : "ExpressionStatement[52874-52894]:ExpressionStatement[52912-52932]"
  }, {
    "left" : "tb.transition(InCell);",
    "right" : "tb.transition(InCell);",
    "info" : "ExpressionStatement[52915-52937]:ExpressionStatement[52953-52975]"
  }, {
    "left" : "tb.insertMarkerToFormattingElements();",
    "right" : "tb.insertMarkerToFormattingElements();",
    "info" : "ExpressionStatement[52958-52996]:ExpressionStatement[52996-53034]"
  }, {
    "left" : "if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\", \"tr\"))",
    "right" : "if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\", \"tr\"))",
    "info" : "IfStatement[53020-53251]:IfStatement[53058-53289]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53108-53178]:Block[53146-53216]"
  }, {
    "left" : "return handleMissingTr(t, tb);",
    "right" : "return handleMissingTr(t, tb);",
    "info" : "ReturnStatement[53130-53160]:ReturnStatement[53168-53198]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53184-53251]:Block[53222-53289]"
  }, {
    "left" : "return anythingElse(t, tb);",
    "right" : "return anythingElse(t, tb);",
    "info" : "ReturnStatement[53206-53233]:ReturnStatement[53244-53271]"
  }, {
    "left" : "if (t.isEndTag())",
    "right" : "if (t.isEndTag())",
    "info" : "IfStatement[53271-54494]:IfStatement[53309-54532]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53289-54429]:Block[53327-54467]"
  }, {
    "left" : "Token.EndTag endTag = t.asEndTag();",
    "right" : "Token.EndTag endTag = t.asEndTag();",
    "info" : "VariableDeclarationStatement[53307-53342]:VariableDeclarationStatement[53345-53380]"
  }, {
    "left" : "String name = endTag.normalName();",
    "right" : "String name = endTag.normalName();",
    "info" : "VariableDeclarationStatement[53359-53393]:VariableDeclarationStatement[53397-53431]"
  }, {
    "left" : "if (name.equals(\"tr\"))",
    "right" : "if (name.equals(\"tr\"))",
    "info" : "IfStatement[53411-54415]:IfStatement[53449-54453]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53434-53749]:Block[53472-53787]"
  }, {
    "left" : "if (!tb.inTableScope(name))",
    "right" : "if (!tb.inTableScope(name))",
    "info" : "IfStatement[53456-53593]:IfStatement[53494-53631]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53484-53593]:Block[53522-53631]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[53510-53525]:ExpressionStatement[53548-53563]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[53558-53571]:ReturnStatement[53596-53609]"
  }, {
    "left" : "tb.clearStackToTableRowContext();",
    "right" : "tb.clearStackToTableRowContext();",
    "info" : "ExpressionStatement[53614-53647]:ExpressionStatement[53652-53685]"
  }, {
    "left" : "tb.pop();",
    "right" : "tb.pop();",
    "info" : "ExpressionStatement[53668-53677]:ExpressionStatement[53706-53715]"
  }, {
    "left" : "tb.transition(InTableBody);",
    "right" : "tb.transition(InTableBody);",
    "info" : "ExpressionStatement[53704-53731]:ExpressionStatement[53742-53769]"
  }, {
    "left" : "if (name.equals(\"table\"))",
    "right" : "if (name.equals(\"table\"))",
    "info" : "IfStatement[53755-54415]:IfStatement[53793-54453]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53781-53851]:Block[53819-53889]"
  }, {
    "left" : "return handleMissingTr(t, tb);",
    "right" : "return handleMissingTr(t, tb);",
    "info" : "ReturnStatement[53803-53833]:ReturnStatement[53841-53871]"
  }, {
    "left" : "if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\"))",
    "right" : "if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\"))",
    "info" : "IfStatement[53857-54415]:IfStatement[53895-54453]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53909-54164]:Block[53947-54202]"
  }, {
    "left" : "if (!tb.inTableScope(name))",
    "right" : "if (!tb.inTableScope(name))",
    "info" : "IfStatement[53931-54060]:IfStatement[53969-54098]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53959-54060]:Block[53997-54098]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[53985-54000]:ExpressionStatement[54023-54038]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[54025-54038]:ReturnStatement[54063-54076]"
  }, {
    "left" : "tb.processEndTag(\"tr\");",
    "right" : "tb.processEndTag(\"tr\");",
    "info" : "ExpressionStatement[54081-54104]:ExpressionStatement[54119-54142]"
  }, {
    "left" : "return tb.process(t);",
    "right" : "return tb.process(t);",
    "info" : "ReturnStatement[54125-54146]:ReturnStatement[54163-54184]"
  }, {
    "left" : "if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\"))",
    "right" : "if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\"))",
    "info" : "IfStatement[54170-54415]:IfStatement[54208-54453]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[54253-54342]:Block[54291-54380]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[54275-54290]:ExpressionStatement[54313-54328]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[54311-54324]:ReturnStatement[54349-54362]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[54348-54415]:Block[54386-54453]"
  }, {
    "left" : "return anythingElse(t, tb);",
    "right" : "return anythingElse(t, tb);",
    "info" : "ReturnStatement[54370-54397]:ReturnStatement[54408-54435]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[54435-54494]:Block[54473-54532]"
  }, {
    "left" : "return anythingElse(t, tb);",
    "right" : "return anythingElse(t, tb);",
    "info" : "ReturnStatement[54453-54480]:ReturnStatement[54491-54518]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[54507-54519]:ReturnStatement[54545-54557]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[54539-54546]:Modifier[54577-54584]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[54547-54554]:PrimitiveType[54585-54592]"
  }, {
    "left" : "anythingElse",
    "right" : "anythingElse",
    "info" : "SimpleName[54555-54567]:SimpleName[54593-54605]"
  }, {
    "left" : "Token t",
    "right" : "Token t",
    "info" : "SingleVariableDeclaration[54568-54575]:SingleVariableDeclaration[54606-54613]"
  }, {
    "left" : "HtmlTreeBuilder tb",
    "right" : "HtmlTreeBuilder tb",
    "info" : "SingleVariableDeclaration[54577-54595]:SingleVariableDeclaration[54615-54633]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[54597-54651]:Block[54635-54689]"
  }, {
    "left" : "return tb.process(t, InTable);",
    "right" : "return tb.process(t, InTable);",
    "info" : "ReturnStatement[54611-54641]:ReturnStatement[54649-54679]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[54661-54668]:Modifier[54699-54706]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[54669-54676]:PrimitiveType[54707-54714]"
  }, {
    "left" : "handleMissingTr",
    "right" : "handleMissingTr",
    "info" : "SimpleName[54677-54692]:SimpleName[54715-54730]"
  }, {
    "left" : "Token t",
    "right" : "Token t",
    "info" : "SingleVariableDeclaration[54693-54700]:SingleVariableDeclaration[54731-54738]"
  }, {
    "left" : "TreeBuilder tb",
    "right" : "TreeBuilder tb",
    "info" : "SingleVariableDeclaration[54702-54716]:SingleVariableDeclaration[54740-54754]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[54718-54897]:Block[54756-54935]"
  }, {
    "left" : "boolean processed = tb.processEndTag(\"tr\");",
    "right" : "boolean processed = tb.processEndTag(\"tr\");",
    "info" : "VariableDeclarationStatement[54732-54775]:VariableDeclarationStatement[54770-54813]"
  }, {
    "left" : "if (processed)",
    "right" : "if (processed)",
    "info" : "IfStatement[54788-54887]:IfStatement[54826-54925]"
  }, {
    "left" : "return tb.process(t);",
    "right" : "return tb.process(t);",
    "info" : "ReturnStatement[54819-54840]:ReturnStatement[54857-54878]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[54874-54887]:ReturnStatement[54912-54925]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[54926-54933]:PrimitiveType[54964-54971]"
  }, {
    "left" : "process",
    "right" : "process",
    "info" : "SimpleName[54934-54941]:SimpleName[54972-54979]"
  }, {
    "left" : "Token t",
    "right" : "Token t",
    "info" : "SingleVariableDeclaration[54942-54949]:SingleVariableDeclaration[54980-54987]"
  }, {
    "left" : "HtmlTreeBuilder tb",
    "right" : "HtmlTreeBuilder tb",
    "info" : "SingleVariableDeclaration[54951-54969]:SingleVariableDeclaration[54989-55007]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[54971-56868]:Block[55009-56906]"
  }, {
    "left" : "if (t.isEndTag())",
    "right" : "if (t.isEndTag())",
    "info" : "IfStatement[54985-56833]:IfStatement[55023-56871]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[55003-56328]:Block[55041-56366]"
  }, {
    "left" : "Token.EndTag endTag = t.asEndTag();",
    "right" : "Token.EndTag endTag = t.asEndTag();",
    "info" : "VariableDeclarationStatement[55021-55056]:VariableDeclarationStatement[55059-55094]"
  }, {
    "left" : "String name = endTag.normalName();",
    "right" : "String name = endTag.normalName();",
    "info" : "VariableDeclarationStatement[55073-55107]:VariableDeclarationStatement[55111-55145]"
  }, {
    "left" : "if (StringUtil.in(name, \"td\", \"th\"))",
    "right" : "if (StringUtil.in(name, \"td\", \"th\"))",
    "info" : "IfStatement[55125-56314]:IfStatement[55163-56352]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[55162-55756]:Block[55200-55794]"
  }, {
    "left" : "if (!tb.inTableScope(name))",
    "right" : "if (!tb.inTableScope(name))",
    "info" : "IfStatement[55184-55429]:IfStatement[55222-55467]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[55212-55429]:Block[55250-55467]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[55238-55253]:ExpressionStatement[55276-55291]"
  }, {
    "left" : "tb.transition(InRow);",
    "right" : "tb.transition(InRow);",
    "info" : "ExpressionStatement[55278-55299]:ExpressionStatement[55316-55337]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[55394-55407]:ReturnStatement[55432-55445]"
  }, {
    "left" : "tb.generateImpliedEndTags();",
    "right" : "tb.generateImpliedEndTags();",
    "info" : "ExpressionStatement[55450-55478]:ExpressionStatement[55488-55516]"
  }, {
    "left" : "if (!tb.currentElement().nodeName().equals(name))",
    "right" : "if (!tb.currentElement().nodeName().equals(name))",
    "info" : "IfStatement[55499-55588]:IfStatement[55537-55626]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[55573-55588]:ExpressionStatement[55611-55626]"
  }, {
    "left" : "tb.popStackToClose(name);",
    "right" : "tb.popStackToClose(name);",
    "info" : "ExpressionStatement[55609-55634]:ExpressionStatement[55647-55672]"
  }, {
    "left" : "tb.clearFormattingElementsToLastMarker();",
    "right" : "tb.clearFormattingElementsToLastMarker();",
    "info" : "ExpressionStatement[55655-55696]:ExpressionStatement[55693-55734]"
  }, {
    "left" : "tb.transition(InRow);",
    "right" : "tb.transition(InRow);",
    "info" : "ExpressionStatement[55717-55738]:ExpressionStatement[55755-55776]"
  }, {
    "left" : "if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\"))",
    "right" : "if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\"))",
    "info" : "IfStatement[55762-56314]:IfStatement[55800-56352]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[55833-55922]:Block[55871-55960]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[55855-55870]:ExpressionStatement[55893-55908]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[55891-55904]:ReturnStatement[55929-55942]"
  }, {
    "left" : "if (StringUtil.in(name, \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"))",
    "right" : "if (StringUtil.in(name, \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"))",
    "info" : "IfStatement[55928-56314]:IfStatement[55966-56352]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[55995-56241]:Block[56033-56279]"
  }, {
    "left" : "if (!tb.inTableScope(name))",
    "right" : "if (!tb.inTableScope(name))",
    "info" : "IfStatement[56017-56146]:IfStatement[56055-56184]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[56045-56146]:Block[56083-56184]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[56071-56086]:ExpressionStatement[56109-56124]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[56111-56124]:ReturnStatement[56149-56162]"
  }, {
    "left" : "closeCell(tb);",
    "right" : "closeCell(tb);",
    "info" : "ExpressionStatement[56167-56181]:ExpressionStatement[56205-56219]"
  }, {
    "left" : "return tb.process(t);",
    "right" : "return tb.process(t);",
    "info" : "ReturnStatement[56202-56223]:ReturnStatement[56240-56261]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[56247-56314]:Block[56285-56352]"
  }, {
    "left" : "return anythingElse(t, tb);",
    "right" : "return anythingElse(t, tb);",
    "info" : "ReturnStatement[56269-56296]:ReturnStatement[56307-56334]"
  }, {
    "left" : "if (t.isStartTag() &&\n                    StringUtil.in(t.asStartTag().normalName(),\n                            \"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"))",
    "right" : "if (t.isStartTag() &&\n                    StringUtil.in(t.asStartTag().normalName(),\n                            \"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"))",
    "info" : "IfStatement[56334-56833]:IfStatement[56372-56871]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[56523-56768]:Block[56561-56806]"
  }, {
    "left" : "if (!(tb.inTableScope(\"td\") || tb.inTableScope(\"th\")))",
    "right" : "if (!(tb.inTableScope(\"td\") || tb.inTableScope(\"th\")))",
    "info" : "IfStatement[56541-56685]:IfStatement[56579-56723]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[56596-56685]:Block[56634-56723]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[56618-56633]:ExpressionStatement[56656-56671]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[56654-56667]:ReturnStatement[56692-56705]"
  }, {
    "left" : "closeCell(tb);",
    "right" : "closeCell(tb);",
    "info" : "ExpressionStatement[56702-56716]:ExpressionStatement[56740-56754]"
  }, {
    "left" : "return tb.process(t);",
    "right" : "return tb.process(t);",
    "info" : "ReturnStatement[56733-56754]:ReturnStatement[56771-56792]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[56774-56833]:Block[56812-56871]"
  }, {
    "left" : "return anythingElse(t, tb);",
    "right" : "return anythingElse(t, tb);",
    "info" : "ReturnStatement[56792-56819]:ReturnStatement[56830-56857]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[56846-56858]:ReturnStatement[56884-56896]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[56878-56885]:Modifier[56916-56923]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[56886-56893]:PrimitiveType[56924-56931]"
  }, {
    "left" : "anythingElse",
    "right" : "anythingElse",
    "info" : "SimpleName[56894-56906]:SimpleName[56932-56944]"
  }, {
    "left" : "Token t",
    "right" : "Token t",
    "info" : "SingleVariableDeclaration[56907-56914]:SingleVariableDeclaration[56945-56952]"
  }, {
    "left" : "HtmlTreeBuilder tb",
    "right" : "HtmlTreeBuilder tb",
    "info" : "SingleVariableDeclaration[56916-56934]:SingleVariableDeclaration[56954-56972]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[56936-56989]:Block[56974-57027]"
  }, {
    "left" : "return tb.process(t, InBody);",
    "right" : "return tb.process(t, InBody);",
    "info" : "ReturnStatement[56950-56979]:ReturnStatement[56988-57017]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[56999-57006]:Modifier[57037-57044]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[57007-57011]:PrimitiveType[57045-57049]"
  }, {
    "left" : "closeCell",
    "right" : "closeCell",
    "info" : "SimpleName[57012-57021]:SimpleName[57050-57059]"
  }, {
    "left" : "HtmlTreeBuilder tb",
    "right" : "HtmlTreeBuilder tb",
    "info" : "SingleVariableDeclaration[57022-57040]:SingleVariableDeclaration[57060-57078]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[57042-57223]:Block[57080-57261]"
  }, {
    "left" : "if (tb.inTableScope(\"td\"))",
    "right" : "if (tb.inTableScope(\"td\"))",
    "info" : "IfStatement[57056-57179]:IfStatement[57094-57217]"
  }, {
    "left" : "tb.processEndTag(\"td\");",
    "right" : "tb.processEndTag(\"td\");",
    "info" : "ExpressionStatement[57099-57122]:ExpressionStatement[57137-57160]"
  }, {
    "left" : "tb.processEndTag(\"th\");",
    "right" : "tb.processEndTag(\"th\");",
    "info" : "ExpressionStatement[57156-57179]:ExpressionStatement[57194-57217]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[57254-57261]:PrimitiveType[57292-57299]"
  }, {
    "left" : "process",
    "right" : "process",
    "info" : "SimpleName[57262-57269]:SimpleName[57300-57307]"
  }, {
    "left" : "Token t",
    "right" : "Token t",
    "info" : "SingleVariableDeclaration[57270-57277]:SingleVariableDeclaration[57308-57315]"
  }, {
    "left" : "HtmlTreeBuilder tb",
    "right" : "HtmlTreeBuilder tb",
    "info" : "SingleVariableDeclaration[57279-57297]:SingleVariableDeclaration[57317-57335]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[57299-60992]:Block[57337-61030]"
  }, {
    "left" : "switch (t.type) {\n                case Character:\n                    Token.Character c = t.asCharacter();\n                    if (c.getData().equals(nullString)) {\n                        tb.error(this);\n                        return false;\n                    } else {\n                        tb.insert(c);\n                    }\n                    break;\n                case Comment:\n                    tb.insert(t.asComment());\n                    break;\n                case Doctype:\n                    tb.error(this);\n                    return false;\n                case StartTag:\n                    Token.StartTag start = t.asStartTag();\n                    String name = start.normalName();\n                    if (name.equals(\"html\"))\n                        return tb.process(start, InBody);\n                    else if (name.equals(\"option\")) {\n                        tb.processEndTag(\"option\");\n                        tb.insert(start);\n                    } else if (name.equals(\"optgroup\")) {\n                        if (tb.currentElement().nodeName().equals(\"option\"))\n                            tb.processEndTag(\"option\");\n                        else if (tb.currentElement().nodeName().equals(\"optgroup\"))\n                            tb.processEndTag(\"optgroup\");\n                        tb.insert(start);\n                    } else if (name.equals(\"select\")) {\n                        tb.error(this);\n                        return tb.processEndTag(\"select\");\n                    } else if (StringUtil.in(name, \"input\", \"keygen\", \"textarea\")) {\n                        tb.error(this);\n                        if (!tb.inSelectScope(\"select\"))\n                            return false; // frag\n                        tb.processEndTag(\"select\");\n                        return tb.process(start);\n                    } else if (name.equals(\"script\")) {\n                        return tb.process(t, InHead);\n                    } else {\n                        return anythingElse(t, tb);\n                    }\n                    break;\n                case EndTag:\n                    Token.EndTag end = t.asEndTag();\n                    name = end.normalName();\n                    if (name.equals(\"optgroup\")) {\n                        if (tb.currentElement().nodeName().equals(\"option\") && tb.aboveOnStack(tb.currentElement()) != null && tb.aboveOnStack(tb.currentElement()).nodeName().equals(\"optgroup\"))\n                            tb.processEndTag(\"option\");\n                        if (tb.currentElement().nodeName().equals(\"optgroup\"))\n                            tb.pop();\n                        else\n                            tb.error(this);\n                    } else if (name.equals(\"option\")) {\n                        if (tb.currentElement().nodeName().equals(\"option\"))\n                            tb.pop();\n                        else\n                            tb.error(this);\n                    } else if (name.equals(\"select\")) {\n                        if (!tb.inSelectScope(name)) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.popStackToClose(name);\n                            tb.resetInsertionMode();\n                        }\n                    } else\n                        return anythingElse(t, tb);\n                    break;\n                case EOF:\n                    if (!tb.currentElement().nodeName().equals(\"html\"))\n                        tb.error(this);\n                    break;\n                default:\n                    return anythingElse(t, tb);\n            }",
    "right" : "switch (t.type) {\n                case Character:\n                    Token.Character c = t.asCharacter();\n                    if (c.getData().equals(nullString)) {\n                        tb.error(this);\n                        return false;\n                    } else {\n                        tb.insert(c);\n                    }\n                    break;\n                case Comment:\n                    tb.insert(t.asComment());\n                    break;\n                case Doctype:\n                    tb.error(this);\n                    return false;\n                case StartTag:\n                    Token.StartTag start = t.asStartTag();\n                    String name = start.normalName();\n                    if (name.equals(\"html\"))\n                        return tb.process(start, InBody);\n                    else if (name.equals(\"option\")) {\n                        tb.processEndTag(\"option\");\n                        tb.insert(start);\n                    } else if (name.equals(\"optgroup\")) {\n                        if (tb.currentElement().nodeName().equals(\"option\"))\n                            tb.processEndTag(\"option\");\n                        else if (tb.currentElement().nodeName().equals(\"optgroup\"))\n                            tb.processEndTag(\"optgroup\");\n                        tb.insert(start);\n                    } else if (name.equals(\"select\")) {\n                        tb.error(this);\n                        return tb.processEndTag(\"select\");\n                    } else if (StringUtil.in(name, \"input\", \"keygen\", \"textarea\")) {\n                        tb.error(this);\n                        if (!tb.inSelectScope(\"select\"))\n                            return false; // frag\n                        tb.processEndTag(\"select\");\n                        return tb.process(start);\n                    } else if (name.equals(\"script\")) {\n                        return tb.process(t, InHead);\n                    } else {\n                        return anythingElse(t, tb);\n                    }\n                    break;\n                case EndTag:\n                    Token.EndTag end = t.asEndTag();\n                    name = end.normalName();\n                    if (name.equals(\"optgroup\")) {\n                        if (tb.currentElement().nodeName().equals(\"option\") && tb.aboveOnStack(tb.currentElement()) != null && tb.aboveOnStack(tb.currentElement()).nodeName().equals(\"optgroup\"))\n                            tb.processEndTag(\"option\");\n                        if (tb.currentElement().nodeName().equals(\"optgroup\"))\n                            tb.pop();\n                        else\n                            tb.error(this);\n                    } else if (name.equals(\"option\")) {\n                        if (tb.currentElement().nodeName().equals(\"option\"))\n                            tb.pop();\n                        else\n                            tb.error(this);\n                    } else if (name.equals(\"select\")) {\n                        if (!tb.inSelectScope(name)) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.popStackToClose(name);\n                            tb.resetInsertionMode();\n                        }\n                    } else\n                        return anythingElse(t, tb);\n                    break;\n                case EOF:\n                    if (!tb.currentElement().nodeName().equals(\"html\"))\n                        tb.error(this);\n                    break;\n                default:\n                    return anythingElse(t, tb);\n            }",
    "info" : "SwitchStatement[57313-60957]:SwitchStatement[57351-60995]"
  }, {
    "left" : "case Character:",
    "right" : "case Character:",
    "info" : "SwitchCase[57347-57362]:SwitchCase[57385-57400]"
  }, {
    "left" : "Token.Character c = t.asCharacter();",
    "right" : "Token.Character c = t.asCharacter();",
    "info" : "VariableDeclarationStatement[57383-57419]:VariableDeclarationStatement[57421-57457]"
  }, {
    "left" : "if (c.getData().equals(nullString))",
    "right" : "if (c.getData().equals(nullString))",
    "info" : "IfStatement[57440-57644]:IfStatement[57478-57682]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[57476-57577]:Block[57514-57615]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[57502-57517]:ExpressionStatement[57540-57555]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[57542-57555]:ReturnStatement[57580-57593]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[57583-57644]:Block[57621-57682]"
  }, {
    "left" : "tb.insert(c);",
    "right" : "tb.insert(c);",
    "info" : "ExpressionStatement[57609-57622]:ExpressionStatement[57647-57660]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[57665-57671]:BreakStatement[57703-57709]"
  }, {
    "left" : "case Comment:",
    "right" : "case Comment:",
    "info" : "SwitchCase[57688-57701]:SwitchCase[57726-57739]"
  }, {
    "left" : "tb.insert(t.asComment());",
    "right" : "tb.insert(t.asComment());",
    "info" : "ExpressionStatement[57722-57747]:ExpressionStatement[57760-57785]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[57768-57774]:BreakStatement[57806-57812]"
  }, {
    "left" : "case Doctype:",
    "right" : "case Doctype:",
    "info" : "SwitchCase[57791-57804]:SwitchCase[57829-57842]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[57825-57840]:ExpressionStatement[57863-57878]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[57861-57874]:ReturnStatement[57899-57912]"
  }, {
    "left" : "case StartTag:",
    "right" : "case StartTag:",
    "info" : "SwitchCase[57891-57905]:SwitchCase[57929-57943]"
  }, {
    "left" : "Token.StartTag start = t.asStartTag();",
    "right" : "Token.StartTag start = t.asStartTag();",
    "info" : "VariableDeclarationStatement[57926-57964]:VariableDeclarationStatement[57964-58002]"
  }, {
    "left" : "String name = start.normalName();",
    "right" : "String name = start.normalName();",
    "info" : "VariableDeclarationStatement[57985-58018]:VariableDeclarationStatement[58023-58056]"
  }, {
    "left" : "if (name.equals(\"html\"))",
    "right" : "if (name.equals(\"html\"))",
    "info" : "IfStatement[58039-59346]:IfStatement[58077-59384]"
  }, {
    "left" : "return tb.process(start, InBody);",
    "right" : "return tb.process(start, InBody);",
    "info" : "ReturnStatement[58088-58121]:ReturnStatement[58126-58159]"
  }, {
    "left" : "if (name.equals(\"option\"))",
    "right" : "if (name.equals(\"option\"))",
    "info" : "IfStatement[58147-59346]:IfStatement[58185-59384]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[58174-58291]:Block[58212-58329]"
  }, {
    "left" : "tb.processEndTag(\"option\");",
    "right" : "tb.processEndTag(\"option\");",
    "info" : "ExpressionStatement[58200-58227]:ExpressionStatement[58238-58265]"
  }, {
    "left" : "tb.insert(start);",
    "right" : "tb.insert(start);",
    "info" : "ExpressionStatement[58252-58269]:ExpressionStatement[58290-58307]"
  }, {
    "left" : "if (name.equals(\"optgroup\"))",
    "right" : "if (name.equals(\"optgroup\"))",
    "info" : "IfStatement[58297-59346]:IfStatement[58335-59384]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[58326-58666]:Block[58364-58704]"
  }, {
    "left" : "if (tb.currentElement().nodeName().equals(\"option\"))",
    "right" : "if (tb.currentElement().nodeName().equals(\"option\"))",
    "info" : "IfStatement[58352-58602]:IfStatement[58390-58640]"
  }, {
    "left" : "tb.processEndTag(\"option\");",
    "right" : "tb.processEndTag(\"option\");",
    "info" : "ExpressionStatement[58433-58460]:ExpressionStatement[58471-58498]"
  }, {
    "left" : "if (tb.currentElement().nodeName().equals(\"optgroup\"))",
    "right" : "if (tb.currentElement().nodeName().equals(\"optgroup\"))",
    "info" : "IfStatement[58490-58602]:IfStatement[58528-58640]"
  }, {
    "left" : "tb.processEndTag(\"optgroup\");",
    "right" : "tb.processEndTag(\"optgroup\");",
    "info" : "ExpressionStatement[58573-58602]:ExpressionStatement[58611-58640]"
  }, {
    "left" : "tb.insert(start);",
    "right" : "tb.insert(start);",
    "info" : "ExpressionStatement[58627-58644]:ExpressionStatement[58665-58682]"
  }, {
    "left" : "if (name.equals(\"select\"))",
    "right" : "if (name.equals(\"select\"))",
    "info" : "IfStatement[58672-59346]:IfStatement[58710-59384]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[58699-58821]:Block[58737-58859]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[58725-58740]:ExpressionStatement[58763-58778]"
  }, {
    "left" : "return tb.processEndTag(\"select\");",
    "right" : "return tb.processEndTag(\"select\");",
    "info" : "ReturnStatement[58765-58799]:ReturnStatement[58803-58837]"
  }, {
    "left" : "if (StringUtil.in(name, \"input\", \"keygen\", \"textarea\"))",
    "right" : "if (StringUtil.in(name, \"input\", \"keygen\", \"textarea\"))",
    "info" : "IfStatement[58827-59346]:IfStatement[58865-59384]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[58883-59155]:Block[58921-59193]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[58909-58924]:ExpressionStatement[58947-58962]"
  }, {
    "left" : "if (!tb.inSelectScope(\"select\"))",
    "right" : "if (!tb.inSelectScope(\"select\"))",
    "info" : "IfStatement[58949-59023]:IfStatement[58987-59061]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[59010-59023]:ReturnStatement[59048-59061]"
  }, {
    "left" : "tb.processEndTag(\"select\");",
    "right" : "tb.processEndTag(\"select\");",
    "info" : "ExpressionStatement[59056-59083]:ExpressionStatement[59094-59121]"
  }, {
    "left" : "return tb.process(start);",
    "right" : "return tb.process(start);",
    "info" : "ReturnStatement[59108-59133]:ReturnStatement[59146-59171]"
  }, {
    "left" : "if (name.equals(\"script\"))",
    "right" : "if (name.equals(\"script\"))",
    "info" : "IfStatement[59161-59346]:IfStatement[59199-59384]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[59188-59265]:Block[59226-59303]"
  }, {
    "left" : "return tb.process(t, InHead);",
    "right" : "return tb.process(t, InHead);",
    "info" : "ReturnStatement[59214-59243]:ReturnStatement[59252-59281]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[59271-59346]:Block[59309-59384]"
  }, {
    "left" : "return anythingElse(t, tb);",
    "right" : "return anythingElse(t, tb);",
    "info" : "ReturnStatement[59297-59324]:ReturnStatement[59335-59362]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[59367-59373]:BreakStatement[59405-59411]"
  }, {
    "left" : "case EndTag:",
    "right" : "case EndTag:",
    "info" : "SwitchCase[59390-59402]:SwitchCase[59428-59440]"
  }, {
    "left" : "Token.EndTag end = t.asEndTag();",
    "right" : "Token.EndTag end = t.asEndTag();",
    "info" : "VariableDeclarationStatement[59423-59455]:VariableDeclarationStatement[59461-59493]"
  }, {
    "left" : "name = end.normalName();",
    "right" : "name = end.normalName();",
    "info" : "ExpressionStatement[59476-59500]:ExpressionStatement[59514-59538]"
  }, {
    "left" : "if (name.equals(\"optgroup\"))",
    "right" : "if (name.equals(\"optgroup\"))",
    "info" : "IfStatement[59521-60678]:IfStatement[59559-60716]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[59550-60014]:Block[59588-60052]"
  }, {
    "left" : "if (tb.currentElement().nodeName().equals(\"option\") && tb.aboveOnStack(tb.currentElement()) != null && tb.aboveOnStack(tb.currentElement()).nodeName().equals(\"optgroup\"))",
    "right" : "if (tb.currentElement().nodeName().equals(\"option\") && tb.aboveOnStack(tb.currentElement()) != null && tb.aboveOnStack(tb.currentElement()).nodeName().equals(\"optgroup\"))",
    "info" : "IfStatement[59576-59802]:IfStatement[59614-59840]"
  }, {
    "left" : "tb.processEndTag(\"option\");",
    "right" : "tb.processEndTag(\"option\");",
    "info" : "ExpressionStatement[59775-59802]:ExpressionStatement[59813-59840]"
  }, {
    "left" : "if (tb.currentElement().nodeName().equals(\"optgroup\"))",
    "right" : "if (tb.currentElement().nodeName().equals(\"optgroup\"))",
    "info" : "IfStatement[59827-59992]:IfStatement[59865-60030]"
  }, {
    "left" : "tb.pop();",
    "right" : "tb.pop();",
    "info" : "ExpressionStatement[59910-59919]:ExpressionStatement[59948-59957]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[59977-59992]:ExpressionStatement[60015-60030]"
  }, {
    "left" : "if (name.equals(\"option\"))",
    "right" : "if (name.equals(\"option\"))",
    "info" : "IfStatement[60020-60678]:IfStatement[60058-60716]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[60047-60258]:Block[60085-60296]"
  }, {
    "left" : "if (tb.currentElement().nodeName().equals(\"option\"))",
    "right" : "if (tb.currentElement().nodeName().equals(\"option\"))",
    "info" : "IfStatement[60073-60236]:IfStatement[60111-60274]"
  }, {
    "left" : "tb.pop();",
    "right" : "tb.pop();",
    "info" : "ExpressionStatement[60154-60163]:ExpressionStatement[60192-60201]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[60221-60236]:ExpressionStatement[60259-60274]"
  }, {
    "left" : "if (name.equals(\"select\"))",
    "right" : "if (name.equals(\"select\"))",
    "info" : "IfStatement[60264-60678]:IfStatement[60302-60716]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[60291-60621]:Block[60329-60659]"
  }, {
    "left" : "if (!tb.inSelectScope(name))",
    "right" : "if (!tb.inSelectScope(name))",
    "info" : "IfStatement[60317-60599]:IfStatement[60355-60637]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[60346-60459]:Block[60384-60497]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[60376-60391]:ExpressionStatement[60414-60429]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[60420-60433]:ReturnStatement[60458-60471]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[60465-60599]:Block[60503-60637]"
  }, {
    "left" : "tb.popStackToClose(name);",
    "right" : "tb.popStackToClose(name);",
    "info" : "ExpressionStatement[60495-60520]:ExpressionStatement[60533-60558]"
  }, {
    "left" : "tb.resetInsertionMode();",
    "right" : "tb.resetInsertionMode();",
    "info" : "ExpressionStatement[60549-60573]:ExpressionStatement[60587-60611]"
  }, {
    "left" : "return anythingElse(t, tb);",
    "right" : "return anythingElse(t, tb);",
    "info" : "ReturnStatement[60651-60678]:ReturnStatement[60689-60716]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[60699-60705]:BreakStatement[60737-60743]"
  }, {
    "left" : "case EOF:",
    "right" : "case EOF:",
    "info" : "SwitchCase[60722-60731]:SwitchCase[60760-60769]"
  }, {
    "left" : "if (!tb.currentElement().nodeName().equals(\"html\"))",
    "right" : "if (!tb.currentElement().nodeName().equals(\"html\"))",
    "info" : "IfStatement[60752-60843]:IfStatement[60790-60881]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[60828-60843]:ExpressionStatement[60866-60881]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[60864-60870]:BreakStatement[60902-60908]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[60887-60895]:SwitchCase[60925-60933]"
  }, {
    "left" : "return anythingElse(t, tb);",
    "right" : "return anythingElse(t, tb);",
    "info" : "ReturnStatement[60916-60943]:ReturnStatement[60954-60981]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[60970-60982]:ReturnStatement[61008-61020]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[61002-61009]:Modifier[61040-61047]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[61010-61017]:PrimitiveType[61048-61055]"
  }, {
    "left" : "anythingElse",
    "right" : "anythingElse",
    "info" : "SimpleName[61018-61030]:SimpleName[61056-61068]"
  }, {
    "left" : "Token t",
    "right" : "Token t",
    "info" : "SingleVariableDeclaration[61031-61038]:SingleVariableDeclaration[61069-61076]"
  }, {
    "left" : "HtmlTreeBuilder tb",
    "right" : "HtmlTreeBuilder tb",
    "info" : "SingleVariableDeclaration[61040-61058]:SingleVariableDeclaration[61078-61096]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[61060-61125]:Block[61098-61163]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[61074-61089]:ExpressionStatement[61112-61127]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[61102-61115]:ReturnStatement[61140-61153]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[61163-61170]:PrimitiveType[61201-61208]"
  }, {
    "left" : "process",
    "right" : "process",
    "info" : "SimpleName[61171-61178]:SimpleName[61209-61216]"
  }, {
    "left" : "Token t",
    "right" : "Token t",
    "info" : "SingleVariableDeclaration[61179-61186]:SingleVariableDeclaration[61217-61224]"
  }, {
    "left" : "HtmlTreeBuilder tb",
    "right" : "HtmlTreeBuilder tb",
    "info" : "SingleVariableDeclaration[61188-61206]:SingleVariableDeclaration[61226-61244]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[61208-61956]:Block[61246-61994]"
  }, {
    "left" : "if (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\"))",
    "right" : "if (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\"))",
    "info" : "IfStatement[61222-61946]:IfStatement[61260-61984]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[61353-61482]:Block[61391-61520]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[61371-61386]:ExpressionStatement[61409-61424]"
  }, {
    "left" : "tb.processEndTag(\"select\");",
    "right" : "tb.processEndTag(\"select\");",
    "info" : "ExpressionStatement[61403-61430]:ExpressionStatement[61441-61468]"
  }, {
    "left" : "return tb.process(t);",
    "right" : "return tb.process(t);",
    "info" : "ReturnStatement[61447-61468]:ReturnStatement[61485-61506]"
  }, {
    "left" : "if (t.isEndTag() && StringUtil.in(t.asEndTag().normalName(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\"))",
    "right" : "if (t.isEndTag() && StringUtil.in(t.asEndTag().normalName(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\"))",
    "info" : "IfStatement[61488-61946]:IfStatement[61526-61984]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[61615-61877]:Block[61653-61915]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[61633-61648]:ExpressionStatement[61671-61686]"
  }, {
    "left" : "if (tb.inTableScope(t.asEndTag().normalName()))",
    "right" : "if (tb.inTableScope(t.asEndTag().normalName()))",
    "info" : "IfStatement[61665-61863]:IfStatement[61703-61901]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[61713-61824]:Block[61751-61862]"
  }, {
    "left" : "tb.processEndTag(\"select\");",
    "right" : "tb.processEndTag(\"select\");",
    "info" : "ExpressionStatement[61735-61762]:ExpressionStatement[61773-61800]"
  }, {
    "left" : "return (tb.process(t));",
    "right" : "return (tb.process(t));",
    "info" : "ReturnStatement[61783-61806]:ReturnStatement[61821-61844]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[61850-61863]:ReturnStatement[61888-61901]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[61883-61946]:Block[61921-61984]"
  }, {
    "left" : "return tb.process(t, InSelect);",
    "right" : "return tb.process(t, InSelect);",
    "info" : "ReturnStatement[61901-61932]:ReturnStatement[61939-61970]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[61988-61995]:PrimitiveType[62026-62033]"
  }, {
    "left" : "process",
    "right" : "process",
    "info" : "SimpleName[61996-62003]:SimpleName[62034-62041]"
  }, {
    "left" : "Token t",
    "right" : "Token t",
    "info" : "SingleVariableDeclaration[62004-62011]:SingleVariableDeclaration[62042-62049]"
  }, {
    "left" : "HtmlTreeBuilder tb",
    "right" : "HtmlTreeBuilder tb",
    "info" : "SingleVariableDeclaration[62013-62031]:SingleVariableDeclaration[62051-62069]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[62033-62997]:Block[62071-63035]"
  }, {
    "left" : "if (isWhitespace(t))",
    "right" : "if (isWhitespace(t))",
    "info" : "IfStatement[62047-62962]:IfStatement[62085-63000]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[62068-62129]:Block[62106-62167]"
  }, {
    "left" : "return tb.process(t, InBody);",
    "right" : "return tb.process(t, InBody);",
    "info" : "ReturnStatement[62086-62115]:ReturnStatement[62124-62153]"
  }, {
    "left" : "if (t.isComment())",
    "right" : "if (t.isComment())",
    "info" : "IfStatement[62135-62962]:IfStatement[62173-63000]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[62154-62229]:Block[62192-62267]"
  }, {
    "left" : "tb.insert(t.asComment());",
    "right" : "tb.insert(t.asComment());",
    "info" : "ExpressionStatement[62172-62197]:ExpressionStatement[62210-62235]"
  }, {
    "left" : "if (t.isDoctype())",
    "right" : "if (t.isDoctype())",
    "info" : "IfStatement[62235-62962]:IfStatement[62273-63000]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[62254-62331]:Block[62292-62369]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[62272-62287]:ExpressionStatement[62310-62325]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[62304-62317]:ReturnStatement[62342-62355]"
  }, {
    "left" : "if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))",
    "right" : "if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))",
    "info" : "IfStatement[62337-62962]:IfStatement[62375-63000]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[62403-62464]:Block[62441-62502]"
  }, {
    "left" : "return tb.process(t, InBody);",
    "right" : "return tb.process(t, InBody);",
    "info" : "ReturnStatement[62421-62450]:ReturnStatement[62459-62488]"
  }, {
    "left" : "if (t.isEndTag() && t.asEndTag().normalName().equals(\"html\"))",
    "right" : "if (t.isEndTag() && t.asEndTag().normalName().equals(\"html\"))",
    "info" : "IfStatement[62470-62962]:IfStatement[62508-63000]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[62532-62757]:Block[62570-62795]"
  }, {
    "left" : "if (tb.isFragmentParsing())",
    "right" : "if (tb.isFragmentParsing())",
    "info" : "IfStatement[62550-62743]:IfStatement[62588-62781]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[62578-62667]:Block[62616-62705]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[62600-62615]:ExpressionStatement[62638-62653]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[62636-62649]:ReturnStatement[62674-62687]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[62673-62743]:Block[62711-62781]"
  }, {
    "left" : "tb.transition(AfterAfterBody);",
    "right" : "tb.transition(AfterAfterBody);",
    "info" : "ExpressionStatement[62695-62725]:ExpressionStatement[62733-62763]"
  }, {
    "left" : "if (t.isEOF())",
    "right" : "if (t.isEOF())",
    "info" : "IfStatement[62763-62962]:IfStatement[62801-63000]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[62778-62832]:Block[62816-62870]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[62838-62962]:Block[62876-63000]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[62856-62871]:ExpressionStatement[62894-62909]"
  }, {
    "left" : "tb.transition(InBody);",
    "right" : "tb.transition(InBody);",
    "info" : "ExpressionStatement[62888-62910]:ExpressionStatement[62926-62948]"
  }, {
    "left" : "return tb.process(t);",
    "right" : "return tb.process(t);",
    "info" : "ReturnStatement[62927-62948]:ReturnStatement[62965-62986]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[62975-62987]:ReturnStatement[63013-63025]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[63030-63037]:PrimitiveType[63068-63075]"
  }, {
    "left" : "process",
    "right" : "process",
    "info" : "SimpleName[63038-63045]:SimpleName[63076-63083]"
  }, {
    "left" : "Token t",
    "right" : "Token t",
    "info" : "SingleVariableDeclaration[63046-63053]:SingleVariableDeclaration[63084-63091]"
  }, {
    "left" : "HtmlTreeBuilder tb",
    "right" : "HtmlTreeBuilder tb",
    "info" : "SingleVariableDeclaration[63055-63073]:SingleVariableDeclaration[63093-63111]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[63075-64802]:Block[63113-64840]"
  }, {
    "left" : "if (isWhitespace(t))",
    "right" : "if (isWhitespace(t))",
    "info" : "IfStatement[63089-64767]:IfStatement[63127-64805]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[63110-63169]:Block[63148-63207]"
  }, {
    "left" : "tb.insert(t.asCharacter());",
    "right" : "tb.insert(t.asCharacter());",
    "info" : "ExpressionStatement[63128-63155]:ExpressionStatement[63166-63193]"
  }, {
    "left" : "if (t.isComment())",
    "right" : "if (t.isComment())",
    "info" : "IfStatement[63175-64767]:IfStatement[63213-64805]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[63194-63251]:Block[63232-63289]"
  }, {
    "left" : "tb.insert(t.asComment());",
    "right" : "tb.insert(t.asComment());",
    "info" : "ExpressionStatement[63212-63237]:ExpressionStatement[63250-63275]"
  }, {
    "left" : "if (t.isDoctype())",
    "right" : "if (t.isDoctype())",
    "info" : "IfStatement[63257-64767]:IfStatement[63295-64805]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[63276-63353]:Block[63314-63391]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[63294-63309]:ExpressionStatement[63332-63347]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[63326-63339]:ReturnStatement[63364-63377]"
  }, {
    "left" : "if (t.isStartTag())",
    "right" : "if (t.isStartTag())",
    "info" : "IfStatement[63359-64767]:IfStatement[63397-64805]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[63379-64003]:Block[63417-64041]"
  }, {
    "left" : "Token.StartTag start = t.asStartTag();",
    "right" : "Token.StartTag start = t.asStartTag();",
    "info" : "VariableDeclarationStatement[63397-63435]:VariableDeclarationStatement[63435-63473]"
  }, {
    "left" : "String name = start.normalName();",
    "right" : "String name = start.normalName();",
    "info" : "VariableDeclarationStatement[63452-63485]:VariableDeclarationStatement[63490-63523]"
  }, {
    "left" : "if (name.equals(\"html\"))",
    "right" : "if (name.equals(\"html\"))",
    "info" : "IfStatement[63502-63989]:IfStatement[63540-64027]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[63527-63600]:Block[63565-63638]"
  }, {
    "left" : "return tb.process(start, InBody);",
    "right" : "return tb.process(start, InBody);",
    "info" : "ReturnStatement[63549-63582]:ReturnStatement[63587-63620]"
  }, {
    "left" : "if (name.equals(\"frameset\"))",
    "right" : "if (name.equals(\"frameset\"))",
    "info" : "IfStatement[63606-63989]:IfStatement[63644-64027]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[63635-63692]:Block[63673-63730]"
  }, {
    "left" : "tb.insert(start);",
    "right" : "tb.insert(start);",
    "info" : "ExpressionStatement[63657-63674]:ExpressionStatement[63695-63712]"
  }, {
    "left" : "if (name.equals(\"frame\"))",
    "right" : "if (name.equals(\"frame\"))",
    "info" : "IfStatement[63698-63989]:IfStatement[63736-64027]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[63724-63786]:Block[63762-63824]"
  }, {
    "left" : "tb.insertEmpty(start);",
    "right" : "tb.insertEmpty(start);",
    "info" : "ExpressionStatement[63746-63768]:ExpressionStatement[63784-63806]"
  }, {
    "left" : "if (name.equals(\"noframes\"))",
    "right" : "if (name.equals(\"noframes\"))",
    "info" : "IfStatement[63792-63989]:IfStatement[63830-64027]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[63821-63894]:Block[63859-63932]"
  }, {
    "left" : "return tb.process(start, InHead);",
    "right" : "return tb.process(start, InHead);",
    "info" : "ReturnStatement[63843-63876]:ReturnStatement[63881-63914]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[63900-63989]:Block[63938-64027]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[63922-63937]:ExpressionStatement[63960-63975]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[63958-63971]:ReturnStatement[63996-64009]"
  }, {
    "left" : "if (t.isEndTag() && t.asEndTag().normalName().equals(\"frameset\"))",
    "right" : "if (t.isEndTag() && t.asEndTag().normalName().equals(\"frameset\"))",
    "info" : "IfStatement[64009-64767]:IfStatement[64047-64805]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[64075-64491]:Block[64113-64529]"
  }, {
    "left" : "if (tb.currentElement().nodeName().equals(\"html\"))",
    "right" : "if (tb.currentElement().nodeName().equals(\"html\"))",
    "info" : "IfStatement[64093-64477]:IfStatement[64131-64515]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[64144-64241]:Block[64182-64279]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[64174-64189]:ExpressionStatement[64212-64227]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[64210-64223]:ReturnStatement[64248-64261]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[64247-64477]:Block[64285-64515]"
  }, {
    "left" : "tb.pop();",
    "right" : "tb.pop();",
    "info" : "ExpressionStatement[64269-64278]:ExpressionStatement[64307-64316]"
  }, {
    "left" : "if (!tb.isFragmentParsing() && !tb.currentElement().nodeName().equals(\"frameset\"))",
    "right" : "if (!tb.isFragmentParsing() && !tb.currentElement().nodeName().equals(\"frameset\"))",
    "info" : "IfStatement[64299-64459]:IfStatement[64337-64497]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[64382-64459]:Block[64420-64497]"
  }, {
    "left" : "tb.transition(AfterFrameset);",
    "right" : "tb.transition(AfterFrameset);",
    "info" : "ExpressionStatement[64408-64437]:ExpressionStatement[64446-64475]"
  }, {
    "left" : "if (t.isEOF())",
    "right" : "if (t.isEOF())",
    "info" : "IfStatement[64497-64767]:IfStatement[64535-64805]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[64512-64684]:Block[64550-64722]"
  }, {
    "left" : "if (!tb.currentElement().nodeName().equals(\"html\"))",
    "right" : "if (!tb.currentElement().nodeName().equals(\"html\"))",
    "info" : "IfStatement[64530-64670]:IfStatement[64568-64708]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[64582-64670]:Block[64620-64708]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[64604-64619]:ExpressionStatement[64642-64657]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[64640-64652]:ReturnStatement[64678-64690]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[64690-64767]:Block[64728-64805]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[64708-64723]:ExpressionStatement[64746-64761]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[64740-64753]:ReturnStatement[64778-64791]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[64780-64792]:ReturnStatement[64818-64830]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[64838-64845]:PrimitiveType[64876-64883]"
  }, {
    "left" : "process",
    "right" : "process",
    "info" : "SimpleName[64846-64853]:SimpleName[64884-64891]"
  }, {
    "left" : "Token t",
    "right" : "Token t",
    "info" : "SingleVariableDeclaration[64854-64861]:SingleVariableDeclaration[64892-64899]"
  }, {
    "left" : "HtmlTreeBuilder tb",
    "right" : "HtmlTreeBuilder tb",
    "info" : "SingleVariableDeclaration[64863-64881]:SingleVariableDeclaration[64901-64919]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[64883-65770]:Block[64921-65808]"
  }, {
    "left" : "if (isWhitespace(t))",
    "right" : "if (isWhitespace(t))",
    "info" : "IfStatement[64897-65735]:IfStatement[64935-65773]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[64918-64977]:Block[64956-65015]"
  }, {
    "left" : "tb.insert(t.asCharacter());",
    "right" : "tb.insert(t.asCharacter());",
    "info" : "ExpressionStatement[64936-64963]:ExpressionStatement[64974-65001]"
  }, {
    "left" : "if (t.isComment())",
    "right" : "if (t.isComment())",
    "info" : "IfStatement[64983-65735]:IfStatement[65021-65773]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[65002-65059]:Block[65040-65097]"
  }, {
    "left" : "tb.insert(t.asComment());",
    "right" : "tb.insert(t.asComment());",
    "info" : "ExpressionStatement[65020-65045]:ExpressionStatement[65058-65083]"
  }, {
    "left" : "if (t.isDoctype())",
    "right" : "if (t.isDoctype())",
    "info" : "IfStatement[65065-65735]:IfStatement[65103-65773]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[65084-65161]:Block[65122-65199]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[65102-65117]:ExpressionStatement[65140-65155]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[65134-65147]:ReturnStatement[65172-65185]"
  }, {
    "left" : "if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))",
    "right" : "if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))",
    "info" : "IfStatement[65167-65735]:IfStatement[65205-65773]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[65233-65294]:Block[65271-65332]"
  }, {
    "left" : "return tb.process(t, InBody);",
    "right" : "return tb.process(t, InBody);",
    "info" : "ReturnStatement[65251-65280]:ReturnStatement[65289-65318]"
  }, {
    "left" : "if (t.isEndTag() && t.asEndTag().normalName().equals(\"html\"))",
    "right" : "if (t.isEndTag() && t.asEndTag().normalName().equals(\"html\"))",
    "info" : "IfStatement[65300-65735]:IfStatement[65338-65773]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[65362-65428]:Block[65400-65466]"
  }, {
    "left" : "tb.transition(AfterAfterFrameset);",
    "right" : "tb.transition(AfterAfterFrameset);",
    "info" : "ExpressionStatement[65380-65414]:ExpressionStatement[65418-65452]"
  }, {
    "left" : "if (t.isStartTag() && t.asStartTag().normalName().equals(\"noframes\"))",
    "right" : "if (t.isStartTag() && t.asStartTag().normalName().equals(\"noframes\"))",
    "info" : "IfStatement[65434-65735]:IfStatement[65472-65773]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[65504-65565]:Block[65542-65603]"
  }, {
    "left" : "return tb.process(t, InHead);",
    "right" : "return tb.process(t, InHead);",
    "info" : "ReturnStatement[65522-65551]:ReturnStatement[65560-65589]"
  }, {
    "left" : "if (t.isEOF())",
    "right" : "if (t.isEOF())",
    "info" : "IfStatement[65571-65735]:IfStatement[65609-65773]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[65586-65652]:Block[65624-65690]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[65658-65735]:Block[65696-65773]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[65676-65691]:ExpressionStatement[65714-65729]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[65708-65721]:ReturnStatement[65746-65759]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[65748-65760]:ReturnStatement[65786-65798]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[65807-65814]:PrimitiveType[65845-65852]"
  }, {
    "left" : "process",
    "right" : "process",
    "info" : "SimpleName[65815-65822]:SimpleName[65853-65860]"
  }, {
    "left" : "Token t",
    "right" : "Token t",
    "info" : "SingleVariableDeclaration[65823-65830]:SingleVariableDeclaration[65861-65868]"
  }, {
    "left" : "HtmlTreeBuilder tb",
    "right" : "HtmlTreeBuilder tb",
    "info" : "SingleVariableDeclaration[65832-65850]:SingleVariableDeclaration[65870-65888]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[65852-66349]:Block[65890-66387]"
  }, {
    "left" : "if (t.isComment())",
    "right" : "if (t.isComment())",
    "info" : "IfStatement[65866-66314]:IfStatement[65904-66352]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[65885-65942]:Block[65923-65980]"
  }, {
    "left" : "tb.insert(t.asComment());",
    "right" : "tb.insert(t.asComment());",
    "info" : "ExpressionStatement[65903-65928]:ExpressionStatement[65941-65966]"
  }, {
    "left" : "if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")))",
    "right" : "if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")))",
    "info" : "IfStatement[65948-66314]:IfStatement[65986-66352]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[66052-66113]:Block[66090-66151]"
  }, {
    "left" : "return tb.process(t, InBody);",
    "right" : "return tb.process(t, InBody);",
    "info" : "ReturnStatement[66070-66099]:ReturnStatement[66108-66137]"
  }, {
    "left" : "if (t.isEOF())",
    "right" : "if (t.isEOF())",
    "info" : "IfStatement[66119-66314]:IfStatement[66157-66352]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[66134-66184]:Block[66172-66222]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[66190-66314]:Block[66228-66352]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[66208-66223]:ExpressionStatement[66246-66261]"
  }, {
    "left" : "tb.transition(InBody);",
    "right" : "tb.transition(InBody);",
    "info" : "ExpressionStatement[66240-66262]:ExpressionStatement[66278-66300]"
  }, {
    "left" : "return tb.process(t);",
    "right" : "return tb.process(t);",
    "info" : "ReturnStatement[66279-66300]:ReturnStatement[66317-66338]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[66327-66339]:ReturnStatement[66365-66377]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[66390-66397]:PrimitiveType[66428-66435]"
  }, {
    "left" : "process",
    "right" : "process",
    "info" : "SimpleName[66398-66405]:SimpleName[66436-66443]"
  }, {
    "left" : "Token t",
    "right" : "Token t",
    "info" : "SingleVariableDeclaration[66406-66413]:SingleVariableDeclaration[66444-66451]"
  }, {
    "left" : "HtmlTreeBuilder tb",
    "right" : "HtmlTreeBuilder tb",
    "info" : "SingleVariableDeclaration[66415-66433]:SingleVariableDeclaration[66453-66471]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[66435-67022]:Block[66473-67060]"
  }, {
    "left" : "if (t.isComment())",
    "right" : "if (t.isComment())",
    "info" : "IfStatement[66449-66987]:IfStatement[66487-67025]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[66468-66525]:Block[66506-66563]"
  }, {
    "left" : "tb.insert(t.asComment());",
    "right" : "tb.insert(t.asComment());",
    "info" : "ExpressionStatement[66486-66511]:ExpressionStatement[66524-66549]"
  }, {
    "left" : "if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")))",
    "right" : "if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")))",
    "info" : "IfStatement[66531-66987]:IfStatement[66569-67025]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[66635-66696]:Block[66673-66734]"
  }, {
    "left" : "return tb.process(t, InBody);",
    "right" : "return tb.process(t, InBody);",
    "info" : "ReturnStatement[66653-66682]:ReturnStatement[66691-66720]"
  }, {
    "left" : "if (t.isEOF())",
    "right" : "if (t.isEOF())",
    "info" : "IfStatement[66702-66987]:IfStatement[66740-67025]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[66717-66767]:Block[66755-66805]"
  }, {
    "left" : "if (t.isStartTag() && t.asStartTag().normalName().equals(\"noframes\"))",
    "right" : "if (t.isStartTag() && t.asStartTag().normalName().equals(\"noframes\"))",
    "info" : "IfStatement[66773-66987]:IfStatement[66811-67025]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[66843-66904]:Block[66881-66942]"
  }, {
    "left" : "return tb.process(t, InHead);",
    "right" : "return tb.process(t, InHead);",
    "info" : "ReturnStatement[66861-66890]:ReturnStatement[66899-66928]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[66910-66987]:Block[66948-67025]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[66928-66943]:ExpressionStatement[66966-66981]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[66960-66973]:ReturnStatement[66998-67011]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[67000-67012]:ReturnStatement[67038-67050]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[67059-67066]:PrimitiveType[67097-67104]"
  }, {
    "left" : "process",
    "right" : "process",
    "info" : "SimpleName[67067-67074]:SimpleName[67105-67112]"
  }, {
    "left" : "Token t",
    "right" : "Token t",
    "info" : "SingleVariableDeclaration[67075-67082]:SingleVariableDeclaration[67113-67120]"
  }, {
    "left" : "HtmlTreeBuilder tb",
    "right" : "HtmlTreeBuilder tb",
    "info" : "SingleVariableDeclaration[67084-67102]:SingleVariableDeclaration[67122-67140]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[67104-67198]:Block[67142-67236]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[67118-67130]:ReturnStatement[67156-67168]"
  }, {
    "left" : "abstract",
    "right" : "abstract",
    "info" : "Modifier[67277-67285]:Modifier[67315-67323]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[67286-67293]:PrimitiveType[67324-67331]"
  }, {
    "left" : "process",
    "right" : "process",
    "info" : "SimpleName[67294-67301]:SimpleName[67332-67339]"
  }, {
    "left" : "Token t",
    "right" : "Token t",
    "info" : "SingleVariableDeclaration[67302-67309]:SingleVariableDeclaration[67340-67347]"
  }, {
    "left" : "HtmlTreeBuilder tb",
    "right" : "HtmlTreeBuilder tb",
    "info" : "SingleVariableDeclaration[67311-67329]:SingleVariableDeclaration[67349-67367]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[67337-67344]:Modifier[67375-67382]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[67345-67351]:Modifier[67383-67389]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[67352-67359]:PrimitiveType[67390-67397]"
  }, {
    "left" : "isWhitespace",
    "right" : "isWhitespace",
    "info" : "SimpleName[67360-67372]:SimpleName[67398-67410]"
  }, {
    "left" : "Token t",
    "right" : "Token t",
    "info" : "SingleVariableDeclaration[67373-67380]:SingleVariableDeclaration[67411-67418]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[67382-67544]:Block[67420-67582]"
  }, {
    "left" : "if (t.isCharacter())",
    "right" : "if (t.isCharacter())",
    "info" : "IfStatement[67392-67516]:IfStatement[67430-67554]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[67413-67516]:Block[67451-67554]"
  }, {
    "left" : "String data = t.asCharacter().getData();",
    "right" : "String data = t.asCharacter().getData();",
    "info" : "VariableDeclarationStatement[67427-67467]:VariableDeclarationStatement[67465-67505]"
  }, {
    "left" : "return isWhitespace(data);",
    "right" : "return isWhitespace(data);",
    "info" : "ReturnStatement[67480-67506]:ReturnStatement[67518-67544]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[67525-67538]:ReturnStatement[67563-67576]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[67550-67557]:Modifier[67588-67595]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[67558-67564]:Modifier[67596-67602]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[67565-67572]:PrimitiveType[67603-67610]"
  }, {
    "left" : "isWhitespace",
    "right" : "isWhitespace",
    "info" : "SimpleName[67573-67585]:SimpleName[67611-67623]"
  }, {
    "left" : "String data",
    "right" : "String data",
    "info" : "SingleVariableDeclaration[67586-67597]:SingleVariableDeclaration[67624-67635]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[67599-67873]:Block[67637-67911]"
  }, {
    "left" : "for (int i = 0; i < data.length(); i++)",
    "right" : "for (int i = 0; i < data.length(); i++)",
    "info" : "ForStatement[67683-67846]:ForStatement[67721-67884]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[67723-67846]:Block[67761-67884]"
  }, {
    "left" : "char c = data.charAt(i);",
    "right" : "char c = data.charAt(i);",
    "info" : "VariableDeclarationStatement[67737-67761]:VariableDeclarationStatement[67775-67799]"
  }, {
    "left" : "if (!StringUtil.isWhitespace(c))",
    "right" : "if (!StringUtil.isWhitespace(c))",
    "info" : "IfStatement[67774-67836]:IfStatement[67812-67874]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[67823-67836]:ReturnStatement[67861-67874]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[67855-67867]:ReturnStatement[67893-67905]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[67879-67886]:Modifier[67917-67924]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[67887-67893]:Modifier[67925-67931]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[67894-67898]:PrimitiveType[67932-67936]"
  }, {
    "left" : "handleRcData",
    "right" : "handleRcData",
    "info" : "SimpleName[67899-67911]:SimpleName[67937-67949]"
  }, {
    "left" : "Token.StartTag startTag",
    "right" : "Token.StartTag startTag",
    "info" : "SingleVariableDeclaration[67912-67935]:SingleVariableDeclaration[67950-67973]"
  }, {
    "left" : "HtmlTreeBuilder tb",
    "right" : "HtmlTreeBuilder tb",
    "info" : "SingleVariableDeclaration[67937-67955]:SingleVariableDeclaration[67975-67993]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[67957-68110]:Block[67995-68148]"
  }, {
    "left" : "tb.insert(startTag);",
    "right" : "tb.insert(startTag);",
    "info" : "ExpressionStatement[67967-67987]:ExpressionStatement[68005-68025]"
  }, {
    "left" : "tb.tokeniser.transition(TokeniserState.Rcdata);",
    "right" : "tb.tokeniser.transition(TokeniserState.Rcdata);",
    "info" : "ExpressionStatement[67996-68043]:ExpressionStatement[68034-68081]"
  }, {
    "left" : "tb.markInsertionMode();",
    "right" : "tb.markInsertionMode();",
    "info" : "ExpressionStatement[68052-68075]:ExpressionStatement[68090-68113]"
  }, {
    "left" : "tb.transition(Text);",
    "right" : "tb.transition(Text);",
    "info" : "ExpressionStatement[68084-68104]:ExpressionStatement[68122-68142]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[68116-68123]:Modifier[68154-68161]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[68124-68130]:Modifier[68162-68168]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[68131-68135]:PrimitiveType[68169-68173]"
  }, {
    "left" : "handleRawtext",
    "right" : "handleRawtext",
    "info" : "SimpleName[68136-68149]:SimpleName[68174-68187]"
  }, {
    "left" : "Token.StartTag startTag",
    "right" : "Token.StartTag startTag",
    "info" : "SingleVariableDeclaration[68150-68173]:SingleVariableDeclaration[68188-68211]"
  }, {
    "left" : "HtmlTreeBuilder tb",
    "right" : "HtmlTreeBuilder tb",
    "info" : "SingleVariableDeclaration[68175-68193]:SingleVariableDeclaration[68213-68231]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[68195-68349]:Block[68233-68387]"
  }, {
    "left" : "tb.insert(startTag);",
    "right" : "tb.insert(startTag);",
    "info" : "ExpressionStatement[68205-68225]:ExpressionStatement[68243-68263]"
  }, {
    "left" : "tb.tokeniser.transition(TokeniserState.Rawtext);",
    "right" : "tb.tokeniser.transition(TokeniserState.Rawtext);",
    "info" : "ExpressionStatement[68234-68282]:ExpressionStatement[68272-68320]"
  }, {
    "left" : "tb.markInsertionMode();",
    "right" : "tb.markInsertionMode();",
    "info" : "ExpressionStatement[68291-68314]:ExpressionStatement[68329-68352]"
  }, {
    "left" : "tb.transition(Text);",
    "right" : "tb.transition(Text);",
    "info" : "ExpressionStatement[68323-68343]:ExpressionStatement[68361-68381]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[68519-68526]:Modifier[68557-68564]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[68527-68533]:Modifier[68565-68571]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[68534-68539]:Modifier[68572-68577]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[68540-68545]:TYPE_DECLARATION_KIND[68578-68583]"
  } ]
}