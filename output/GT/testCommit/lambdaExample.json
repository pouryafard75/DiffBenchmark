[ {
  "element" : "public read() : int",
  "className" : "lambdaExample",
  "fileName" : "testCommit/lambdaExample.java",
  "mappings" : [ {
    "rightProgramElement" : {
      "element" : "protected extracted(vector , matcher ) : int",
      "className" : "lambdaExample",
      "fileName" : "testCommit/lambdaExample.java",
      "match" : true
    },
    "abstractMappingList" : [ {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[70-1036]:Block[757-1657]"
    }, {
      "left" : "if (!getInitialized())",
      "right" : "if (!getInitialized())",
      "info" : "IfStatement[80-174]:IfStatement[767-861]"
    }, {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[103-174]:Block[790-861]"
    }, {
      "left" : "initialize();",
      "right" : "initialize();",
      "info" : "ExpressionStatement[117-130]:ExpressionStatement[804-817]"
    }, {
      "left" : "setInitialized(true);",
      "right" : "setInitialized(true);",
      "info" : "ExpressionStatement[143-164]:ExpressionStatement[830-851]"
    }, {
      "left" : "int ch = -1;",
      "right" : "int ch = -1;",
      "info" : "VariableDeclarationStatement[183-195]:VariableDeclarationStatement[870-882]"
    }, {
      "left" : "if (line != null)",
      "right" : "if (line != null)",
      "info" : "IfStatement[204-1011]:IfStatement[891-1632]"
    }, {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[222-410]:Block[909-1097]"
    }, {
      "left" : "ch = line.charAt(0);",
      "right" : "ch = line.charAt(0);",
      "info" : "ExpressionStatement[236-256]:ExpressionStatement[923-943]"
    }, {
      "left" : "if (line.length() == 1)",
      "right" : "if (line.length() == 1)",
      "info" : "IfStatement[269-400]:IfStatement[956-1087]"
    }, {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[293-337]:Block[980-1024]"
    }, {
      "left" : "line = null;",
      "right" : "line = null;",
      "info" : "ExpressionStatement[311-323]:ExpressionStatement[998-1010]"
    }, {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[343-400]:Block[1030-1087]"
    }, {
      "left" : "line = line.substring(1);",
      "right" : "line = line.substring(1);",
      "info" : "ExpressionStatement[361-386]:ExpressionStatement[1048-1073]"
    }, {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[416-1011]:Block[1103-1632]"
    }, {
      "left" : "final int containsSize = contains.size();",
      "right" : "final int containsSize = vector.size();",
      "info" : "VariableDeclarationStatement[430-471]:VariableDeclarationStatement[1117-1156]"
    }, {
      "left" : "for (line = readLine(); line != null; line = readLine())",
      "right" : "for (line = readLine(); line != null; line = readLine())",
      "info" : "ForStatement[484-924]:ForStatement[1169-1545]"
    }, {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[541-924]:Block[1239-1545]"
    }, {
      "left" : "boolean matches = true;",
      "right" : "boolean matches = true;",
      "info" : "VariableDeclarationStatement[559-582]:VariableDeclarationStatement[1257-1280]"
    }, {
      "left" : "for (int i = 0; matches && i < containsSize; i++)",
      "right" : "for (int i = 0; matches && i < containsSize; i++)",
      "info" : "ForStatement[599-820]:ForStatement[1297-1441]"
    }, {
      "left" : "matches = line.indexOf(containsStr) >= 0;",
      "right" : "matches = (boolean) matcher.apply(i);",
      "info" : "ExpressionStatement[761-802]:ExpressionStatement[1386-1423]"
    }, {
      "left" : "if (matches ^ isNegated())",
      "right" : "if (matches ^ isNegated())",
      "info" : "IfStatement[837-910]:IfStatement[1458-1531]"
    }, {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[864-910]:Block[1485-1531]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[886-892]:BreakStatement[1507-1513]"
    }, {
      "left" : "if (line != null)",
      "right" : "if (line != null)",
      "info" : "IfStatement[937-1001]:IfStatement[1558-1622]"
    }, {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[955-1001]:Block[1576-1622]"
    }, {
      "left" : "return read();",
      "right" : "return read();",
      "info" : "ReturnStatement[973-987]:ReturnStatement[1594-1608]"
    }, {
      "left" : "return ch;",
      "right" : "return ch;",
      "info" : "ReturnStatement[1020-1030]:ReturnStatement[1641-1651]"
    } ]
  }, {
    "rightProgramElement" : {
      "element" : "public read() : int",
      "className" : "lambdaExample",
      "fileName" : "testCommit/lambdaExample.java",
      "match" : false
    },
    "abstractMappingList" : [ {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[666-820]:Block[138-289]"
    }, {
      "left" : "String containsStr = (String) contains.elementAt(i);",
      "right" : "String containsStr = (String) contains.elementAt(i);",
      "info" : "VariableDeclarationStatement[688-740]:VariableDeclarationStatement[160-212]"
    } ]
  } ]
}, {
  "element" : "public read2() : int",
  "className" : "lambdaExample",
  "fileName" : "testCommit/lambdaExample.java",
  "mappings" : [ {
    "rightProgramElement" : {
      "element" : "public read2() : int",
      "className" : "lambdaExample",
      "fileName" : "testCommit/lambdaExample.java",
      "match" : false
    },
    "abstractMappingList" : [ {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[1561-2009]:Block[341-633]"
    }, {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[1685-1905]:Block[408-625]"
    }, {
      "left" : "RegularExpression regexp = (RegularExpression) regexps.elementAt(i);",
      "right" : "RegularExpression regexp = (RegularExpression) regexps.elementAt(i);",
      "info" : "VariableDeclarationStatement[1707-1775]:VariableDeclarationStatement[430-498]"
    }, {
      "left" : "Regexp re = regexp.getRegexp(getProject());",
      "right" : "Regexp re = regexp.getRegexp(getProject());",
      "info" : "VariableDeclarationStatement[1796-1839]:VariableDeclarationStatement[519-562]"
    } ]
  } ]
} ]