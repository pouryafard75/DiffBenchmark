{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "PeepholeFoldConstants",
      "right" : "PeepholeFoldConstants",
      "info" : "TypeDeclaration[992-48070]:TypeDeclaration[992-47898]"
    }, {
      "left" : "static final DiagnosticType INVALID_GETELEM_INDEX_ERROR =\n      DiagnosticType.error(\n          \"JSC_INVALID_GETELEM_INDEX_ERROR\",\n          \"Array index not integer: {0}\");",
      "right" : "static final DiagnosticType INVALID_GETELEM_INDEX_ERROR =\n      DiagnosticType.error(\n          \"JSC_INVALID_GETELEM_INDEX_ERROR\",\n          \"Array index not integer: {0}\");",
      "info" : "FieldDeclaration[1144-1317]:FieldDeclaration[1144-1317]"
    }, {
      "left" : "static final DiagnosticType INDEX_OUT_OF_BOUNDS_ERROR =\n      DiagnosticType.error(\n          \"JSC_INDEX_OUT_OF_BOUNDS_ERROR\",\n          \"Array index out of bounds: {0}\");",
      "right" : "static final DiagnosticType INDEX_OUT_OF_BOUNDS_ERROR =\n      DiagnosticType.error(\n          \"JSC_INDEX_OUT_OF_BOUNDS_ERROR\",\n          \"Array index out of bounds: {0}\");",
      "info" : "FieldDeclaration[1321-1492]:FieldDeclaration[1321-1492]"
    }, {
      "left" : "static final DiagnosticType NEGATING_A_NON_NUMBER_ERROR =\n      DiagnosticType.error(\n          \"JSC_NEGATING_A_NON_NUMBER_ERROR\",\n          \"Can't negate non-numeric value: {0}\");",
      "right" : "static final DiagnosticType NEGATING_A_NON_NUMBER_ERROR =\n      DiagnosticType.error(\n          \"JSC_NEGATING_A_NON_NUMBER_ERROR\",\n          \"Can't negate non-numeric value: {0}\");",
      "info" : "FieldDeclaration[1496-1676]:FieldDeclaration[1496-1676]"
    }, {
      "left" : "static final DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE =\n      DiagnosticType.error(\n          \"JSC_BITWISE_OPERAND_OUT_OF_RANGE\",\n          \"Operand out of range, bitwise operation will lose information: {0}\");",
      "right" : "static final DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE =\n      DiagnosticType.error(\n          \"JSC_BITWISE_OPERAND_OUT_OF_RANGE\",\n          \"Operand out of range, bitwise operation will lose information: {0}\");",
      "info" : "FieldDeclaration[1680-1893]:FieldDeclaration[1680-1893]"
    }, {
      "left" : "static final DiagnosticType SHIFT_AMOUNT_OUT_OF_BOUNDS = DiagnosticType.error(\n      \"JSC_SHIFT_AMOUNT_OUT_OF_BOUNDS\",\n      \"Shift amount out of bounds: {0}\");",
      "right" : "static final DiagnosticType SHIFT_AMOUNT_OUT_OF_BOUNDS = DiagnosticType.error(\n      \"JSC_SHIFT_AMOUNT_OUT_OF_BOUNDS\",\n      \"Shift amount out of bounds: {0}\");",
      "info" : "FieldDeclaration[1897-2057]:FieldDeclaration[1897-2057]"
    }, {
      "left" : "static final DiagnosticType FRACTIONAL_BITWISE_OPERAND = DiagnosticType.error(\n      \"JSC_FRACTIONAL_BITWISE_OPERAND\",\n      \"Fractional bitwise operand: {0}\");",
      "right" : "static final DiagnosticType FRACTIONAL_BITWISE_OPERAND = DiagnosticType.error(\n      \"JSC_FRACTIONAL_BITWISE_OPERAND\",\n      \"Fractional bitwise operand: {0}\");",
      "info" : "FieldDeclaration[2061-2221]:FieldDeclaration[2061-2221]"
    }, {
      "left" : "private static final double MAX_FOLD_NUMBER = Math.pow(2, 53);",
      "right" : "private static final double MAX_FOLD_NUMBER = Math.pow(2, 53);",
      "info" : "FieldDeclaration[2225-2287]:FieldDeclaration[2225-2287]"
    }, {
      "left" : "private static final Locale ROOT_LOCALE = new Locale(\"\");",
      "right" : "private static final Locale ROOT_LOCALE = new Locale(\"\");",
      "info" : "FieldDeclaration[2328-2385]:FieldDeclaration[2328-2385]"
    }, {
      "left" : "Node optimizeSubtree(Node subtree)",
      "right" : "Node optimizeSubtree(Node subtree)",
      "info" : "MethodDeclaration[2389-3022]:MethodDeclaration[2389-3022]"
    }, {
      "left" : "private Node tryFoldBinaryOperator(Node subtree)",
      "right" : "private Node tryFoldBinaryOperator(Node subtree)",
      "info" : "MethodDeclaration[3026-4654]:MethodDeclaration[3026-4654]"
    }, {
      "left" : "private Node tryReduceVoid(Node n)",
      "right" : "private Node tryReduceVoid(Node n)",
      "info" : "MethodDeclaration[4658-4947]:MethodDeclaration[4658-4947]"
    }, {
      "left" : "private void tryReduceOperandsForOp(Node n)",
      "right" : "private void tryReduceOperandsForOp(Node n)",
      "info" : "MethodDeclaration[4951-6040]:MethodDeclaration[4951-6040]"
    }, {
      "left" : "private void tryConvertOperandsToNumber(Node n)",
      "right" : "private void tryConvertOperandsToNumber(Node n)",
      "info" : "MethodDeclaration[6044-6233]:MethodDeclaration[6044-6233]"
    }, {
      "left" : "private void tryConvertToNumber(Node n)",
      "right" : "private void tryConvertToNumber(Node n)",
      "info" : "MethodDeclaration[6237-7412]:MethodDeclaration[6237-7412]"
    }, {
      "left" : "private Node tryFoldTypeof(Node originalTypeofNode)",
      "right" : "private Node tryFoldTypeof(Node originalTypeofNode)",
      "info" : "MethodDeclaration[7416-9013]:MethodDeclaration[7416-9013]"
    }, {
      "left" : "private Node tryFoldUnaryOperator(Node n)",
      "right" : "private Node tryFoldUnaryOperator(Node n)",
      "info" : "MethodDeclaration[9017-12014]:MethodDeclaration[9017-12014]"
    }, {
      "left" : "private Node tryFoldInstanceof(Node n, Node left, Node right)",
      "right" : "private Node tryFoldInstanceof(Node n, Node left, Node right)",
      "info" : "MethodDeclaration[12018-12937]:MethodDeclaration[12018-12937]"
    }, {
      "left" : "private Node tryFoldAssign(Node n, Node left, Node right)",
      "right" : "private Node tryFoldAssign(Node n, Node left, Node right)",
      "info" : "MethodDeclaration[12941-14757]:MethodDeclaration[12941-14757]"
    }, {
      "left" : "private Node tryFoldAndOr(Node n, Node left, Node right)",
      "right" : "private Node tryFoldAndOr(Node n, Node left, Node right)",
      "info" : "MethodDeclaration[14761-15708]:MethodDeclaration[14761-15708]"
    }, {
      "left" : "private Node tryFoldChildAddString(Node n, Node left, Node right)",
      "right" : "private Node tryFoldChildAddString(Node n, Node left, Node right)",
      "info" : "MethodDeclaration[15712-17938]:MethodDeclaration[15712-17938]"
    }, {
      "left" : "private Node tryFoldAddConstantString(Node n, Node left, Node right)",
      "right" : "private Node tryFoldAddConstantString(Node n, Node left, Node right)",
      "info" : "MethodDeclaration[17942-18572]:MethodDeclaration[17942-18572]"
    }, {
      "left" : "private Node tryFoldArithmeticOp(Node n, Node left, Node right)",
      "right" : "private Node tryFoldArithmeticOp(Node n, Node left, Node right)",
      "info" : "MethodDeclaration[18576-18949]:MethodDeclaration[18576-18949]"
    }, {
      "left" : "private Node performArithmeticOp(int opType, Node left, Node right)",
      "right" : "private Node performArithmeticOp(int opType, Node left, Node right)",
      "info" : "MethodDeclaration[18953-21678]:MethodDeclaration[18953-21506]"
    }, {
      "left" : "private Node tryFoldLeftChildOp(Node n, Node left, Node right)",
      "right" : "private Node tryFoldLeftChildOp(Node n, Node left, Node right)",
      "info" : "MethodDeclaration[21682-23578]:MethodDeclaration[21510-23406]"
    }, {
      "left" : "private Node tryFoldAdd(Node node, Node left, Node right)",
      "right" : "private Node tryFoldAdd(Node node, Node left, Node right)",
      "info" : "MethodDeclaration[23582-24256]:MethodDeclaration[23410-24084]"
    }, {
      "left" : "private Node tryFoldShift(Node n, Node left, Node right)",
      "right" : "private Node tryFoldShift(Node n, Node left, Node right)",
      "info" : "MethodDeclaration[24260-26233]:MethodDeclaration[24088-26061]"
    }, {
      "left" : "private Node tryFoldComparison(Node n, Node left, Node right)",
      "right" : "private Node tryFoldComparison(Node n, Node left, Node right)",
      "info" : "MethodDeclaration[26237-31384]:MethodDeclaration[26065-31212]"
    }, {
      "left" : "private Boolean compareAsNumbers(int op, Node left, Node right)",
      "right" : "private Boolean compareAsNumbers(int op, Node left, Node right)",
      "info" : "MethodDeclaration[31388-32556]:MethodDeclaration[31216-32384]"
    }, {
      "left" : "private boolean compareToUndefined(Node value, int op)",
      "right" : "private boolean compareToUndefined(Node value, int op)",
      "info" : "MethodDeclaration[32560-33593]:MethodDeclaration[32388-33421]"
    }, {
      "left" : "private Node tryFoldCtorCall(Node n)",
      "right" : "private Node tryFoldCtorCall(Node n)",
      "info" : "MethodDeclaration[33597-33978]:MethodDeclaration[33425-33806]"
    }, {
      "left" : "private boolean inForcedStringContext(Node n)",
      "right" : "private boolean inForcedStringContext(Node n)",
      "info" : "MethodDeclaration[33982-34195]:MethodDeclaration[33810-34023]"
    }, {
      "left" : "private Node tryFoldInForcedStringContext(Node n)",
      "right" : "private Node tryFoldInForcedStringContext(Node n)",
      "info" : "MethodDeclaration[34199-35113]:MethodDeclaration[34027-34941]"
    }, {
      "left" : "private Node tryFoldKnownMethods(Node subtree)",
      "right" : "private Node tryFoldKnownMethods(Node subtree)",
      "info" : "MethodDeclaration[35117-35420]:MethodDeclaration[34945-35248]"
    }, {
      "left" : "private Node tryFoldKnownStringMethods(Node subtree)",
      "right" : "private Node tryFoldKnownStringMethods(Node subtree)",
      "info" : "MethodDeclaration[35424-37108]:MethodDeclaration[35252-36936]"
    }, {
      "left" : "private Node tryFoldStringToLowerCase(Node subtree, Node stringNode)",
      "right" : "private Node tryFoldStringToLowerCase(Node subtree, Node stringNode)",
      "info" : "MethodDeclaration[37112-37519]:MethodDeclaration[36940-37347]"
    }, {
      "left" : "private Node tryFoldStringToUpperCase(Node subtree, Node stringNode)",
      "right" : "private Node tryFoldStringToUpperCase(Node subtree, Node stringNode)",
      "info" : "MethodDeclaration[37523-37930]:MethodDeclaration[37351-37758]"
    }, {
      "left" : "private Node tryFoldStringIndexOf(\n      Node n, String functionName, Node lstringNode, Node firstArg)",
      "right" : "private Node tryFoldStringIndexOf(\n      Node n, String functionName, Node lstringNode, Node firstArg)",
      "info" : "MethodDeclaration[37934-39259]:MethodDeclaration[37762-39087]"
    }, {
      "left" : "private Node tryFoldArrayJoin(Node n)",
      "right" : "private Node tryFoldArrayJoin(Node n)",
      "info" : "MethodDeclaration[39263-42747]:MethodDeclaration[39091-42575]"
    }, {
      "left" : "private Node tryFoldStringSubstr(Node n, Node stringNode, Node arg1)",
      "right" : "private Node tryFoldStringSubstr(Node n, Node stringNode, Node arg1)",
      "info" : "MethodDeclaration[42751-44294]:MethodDeclaration[42579-44122]"
    }, {
      "left" : "private Node tryFoldStringSubstring(Node n, Node stringNode, Node arg1)",
      "right" : "private Node tryFoldStringSubstring(Node n, Node stringNode, Node arg1)",
      "info" : "MethodDeclaration[44298-45767]:MethodDeclaration[44126-45595]"
    }, {
      "left" : "private Node tryFoldGetElem(Node n, Node left, Node right)",
      "right" : "private Node tryFoldGetElem(Node n, Node left, Node right)",
      "info" : "MethodDeclaration[45771-47043]:MethodDeclaration[45599-46871]"
    }, {
      "left" : "private Node tryFoldGetProp(Node n, Node left, Node right)",
      "right" : "private Node tryFoldGetProp(Node n, Node left, Node right)",
      "info" : "MethodDeclaration[47047-48068]:MethodDeclaration[46875-47896]"
    } ],
    "mappings" : [
 {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[1074-1079]:TYPE_DECLARATION_KIND[1074-1079]"
    }, {
      "left" : "PeepholeFoldConstants",
      "right" : "PeepholeFoldConstants",
      "info" : "SimpleName[1080-1101]:SimpleName[1080-1101]"
    }, {
      "left" : "AbstractPeepholeOptimization",
      "right" : "AbstractPeepholeOptimization",
      "info" : "SimpleType[1110-1138]:SimpleType[1110-1138]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[2389-2398]:MarkerAnnotation[2389-2398]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[2401-2405]:SimpleType[2401-2405]"
    }, {
      "left" : "optimizeSubtree",
      "right" : "optimizeSubtree",
      "info" : "SimpleName[2406-2421]:SimpleName[2406-2421]"
    }, {
      "left" : "Node subtree",
      "right" : "Node subtree",
      "info" : "SingleVariableDeclaration[2422-2434]:SingleVariableDeclaration[2422-2434]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2436-3022]:Block[2436-3022]"
    }, {
      "left" : "switch(subtree.getType()) {\n      case Token.CALL:\n        return tryFoldKnownMethods(subtree);\n\n      case Token.NEW:\n        return tryFoldCtorCall(subtree);\n\n      case Token.TYPEOF:\n        return tryFoldTypeof(subtree);\n\n      case Token.NOT:\n      case Token.POS:\n      case Token.NEG:\n      case Token.BITNOT:\n        tryReduceOperandsForOp(subtree);\n        return tryFoldUnaryOperator(subtree);\n\n      case Token.VOID:\n        return tryReduceVoid(subtree);\n\n      default:\n        tryReduceOperandsForOp(subtree);\n        return tryFoldBinaryOperator(subtree);\n    }",
      "right" : "switch(subtree.getType()) {\n      case Token.CALL:\n        return tryFoldKnownMethods(subtree);\n\n      case Token.NEW:\n        return tryFoldCtorCall(subtree);\n\n      case Token.TYPEOF:\n        return tryFoldTypeof(subtree);\n\n      case Token.NOT:\n      case Token.POS:\n      case Token.NEG:\n      case Token.BITNOT:\n        tryReduceOperandsForOp(subtree);\n        return tryFoldUnaryOperator(subtree);\n\n      case Token.VOID:\n        return tryReduceVoid(subtree);\n\n      default:\n        tryReduceOperandsForOp(subtree);\n        return tryFoldBinaryOperator(subtree);\n    }",
      "info" : "SwitchStatement[2442-3018]:SwitchStatement[2442-3018]"
    }, {
      "left" : "case Token.CALL:",
      "right" : "case Token.CALL:",
      "info" : "SwitchCase[2476-2492]:SwitchCase[2476-2492]"
    }, {
      "left" : "return tryFoldKnownMethods(subtree);",
      "right" : "return tryFoldKnownMethods(subtree);",
      "info" : "ReturnStatement[2501-2537]:ReturnStatement[2501-2537]"
    }, {
      "left" : "case Token.NEW:",
      "right" : "case Token.NEW:",
      "info" : "SwitchCase[2545-2560]:SwitchCase[2545-2560]"
    }, {
      "left" : "return tryFoldCtorCall(subtree);",
      "right" : "return tryFoldCtorCall(subtree);",
      "info" : "ReturnStatement[2569-2601]:ReturnStatement[2569-2601]"
    }, {
      "left" : "case Token.TYPEOF:",
      "right" : "case Token.TYPEOF:",
      "info" : "SwitchCase[2609-2627]:SwitchCase[2609-2627]"
    }, {
      "left" : "return tryFoldTypeof(subtree);",
      "right" : "return tryFoldTypeof(subtree);",
      "info" : "ReturnStatement[2636-2666]:ReturnStatement[2636-2666]"
    }, {
      "left" : "case Token.NOT:",
      "right" : "case Token.NOT:",
      "info" : "SwitchCase[2674-2689]:SwitchCase[2674-2689]"
    }, {
      "left" : "case Token.POS:",
      "right" : "case Token.POS:",
      "info" : "SwitchCase[2696-2711]:SwitchCase[2696-2711]"
    }, {
      "left" : "case Token.NEG:",
      "right" : "case Token.NEG:",
      "info" : "SwitchCase[2718-2733]:SwitchCase[2718-2733]"
    }, {
      "left" : "case Token.BITNOT:",
      "right" : "case Token.BITNOT:",
      "info" : "SwitchCase[2740-2758]:SwitchCase[2740-2758]"
    }, {
      "left" : "tryReduceOperandsForOp(subtree);",
      "right" : "tryReduceOperandsForOp(subtree);",
      "info" : "ExpressionStatement[2767-2799]:ExpressionStatement[2767-2799]"
    }, {
      "left" : "return tryFoldUnaryOperator(subtree);",
      "right" : "return tryFoldUnaryOperator(subtree);",
      "info" : "ReturnStatement[2808-2845]:ReturnStatement[2808-2845]"
    }, {
      "left" : "case Token.VOID:",
      "right" : "case Token.VOID:",
      "info" : "SwitchCase[2853-2869]:SwitchCase[2853-2869]"
    }, {
      "left" : "return tryReduceVoid(subtree);",
      "right" : "return tryReduceVoid(subtree);",
      "info" : "ReturnStatement[2878-2908]:ReturnStatement[2878-2908]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[2916-2924]:SwitchCase[2916-2924]"
    }, {
      "left" : "tryReduceOperandsForOp(subtree);",
      "right" : "tryReduceOperandsForOp(subtree);",
      "info" : "ExpressionStatement[2933-2965]:ExpressionStatement[2933-2965]"
    }, {
      "left" : "return tryFoldBinaryOperator(subtree);",
      "right" : "return tryFoldBinaryOperator(subtree);",
      "info" : "ReturnStatement[2974-3012]:ReturnStatement[2974-3012]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[3026-3033]:Modifier[3026-3033]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[3034-3038]:SimpleType[3034-3038]"
    }, {
      "left" : "tryFoldBinaryOperator",
      "right" : "tryFoldBinaryOperator",
      "info" : "SimpleName[3039-3060]:SimpleName[3039-3060]"
    }, {
      "left" : "Node subtree",
      "right" : "Node subtree",
      "info" : "SingleVariableDeclaration[3061-3073]:SingleVariableDeclaration[3061-3073]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3075-4654]:Block[3075-4654]"
    }, {
      "left" : "Node left = subtree.getFirstChild();",
      "right" : "Node left = subtree.getFirstChild();",
      "info" : "VariableDeclarationStatement[3081-3117]:VariableDeclarationStatement[3081-3117]"
    }, {
      "left" : "if (left == null)",
      "right" : "if (left == null)",
      "info" : "IfStatement[3123-3170]:IfStatement[3123-3170]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3141-3170]:Block[3141-3170]"
    }, {
      "left" : "return subtree;",
      "right" : "return subtree;",
      "info" : "ReturnStatement[3149-3164]:ReturnStatement[3149-3164]"
    }, {
      "left" : "Node right = left.getNext();",
      "right" : "Node right = left.getNext();",
      "info" : "VariableDeclarationStatement[3176-3204]:VariableDeclarationStatement[3176-3204]"
    }, {
      "left" : "if (right == null)",
      "right" : "if (right == null)",
      "info" : "IfStatement[3210-3258]:IfStatement[3210-3258]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3229-3258]:Block[3229-3258]"
    }, {
      "left" : "return subtree;",
      "right" : "return subtree;",
      "info" : "ReturnStatement[3237-3252]:ReturnStatement[3237-3252]"
    }, {
      "left" : "switch(subtree.getType()) {\n      case Token.GETPROP:\n        return tryFoldGetProp(subtree, left, right);\n\n      case Token.GETELEM:\n        return tryFoldGetElem(subtree, left, right);\n\n      case Token.INSTANCEOF:\n        return tryFoldInstanceof(subtree, left, right);\n\n      case Token.AND:\n      case Token.OR:\n        return tryFoldAndOr(subtree, left, right);\n\n      case Token.LSH:\n      case Token.RSH:\n      case Token.URSH:\n        return tryFoldShift(subtree, left, right);\n\n      case Token.ASSIGN:\n        return tryFoldAssign(subtree, left, right);\n\n      case Token.ADD:\n        return tryFoldAdd(subtree, left, right);\n\n      case Token.SUB:\n      case Token.DIV:\n      case Token.MOD:\n        return tryFoldArithmeticOp(subtree, left, right);\n\n      case Token.MUL:\n      case Token.BITAND:\n      case Token.BITOR:\n      case Token.BITXOR:\n        Node result = tryFoldArithmeticOp(subtree, left, right);\n        if (result != subtree) {\n          return result;\n        }\n        return tryFoldLeftChildOp(subtree, left, right);\n\n      case Token.LT:\n      case Token.GT:\n      case Token.LE:\n      case Token.GE:\n      case Token.EQ:\n      case Token.NE:\n      case Token.SHEQ:\n      case Token.SHNE:\n        return tryFoldComparison(subtree, left, right);\n\n      default:\n        return subtree;\n    }",
      "right" : "switch(subtree.getType()) {\n      case Token.GETPROP:\n        return tryFoldGetProp(subtree, left, right);\n\n      case Token.GETELEM:\n        return tryFoldGetElem(subtree, left, right);\n\n      case Token.INSTANCEOF:\n        return tryFoldInstanceof(subtree, left, right);\n\n      case Token.AND:\n      case Token.OR:\n        return tryFoldAndOr(subtree, left, right);\n\n      case Token.LSH:\n      case Token.RSH:\n      case Token.URSH:\n        return tryFoldShift(subtree, left, right);\n\n      case Token.ASSIGN:\n        return tryFoldAssign(subtree, left, right);\n\n      case Token.ADD:\n        return tryFoldAdd(subtree, left, right);\n\n      case Token.SUB:\n      case Token.DIV:\n      case Token.MOD:\n        return tryFoldArithmeticOp(subtree, left, right);\n\n      case Token.MUL:\n      case Token.BITAND:\n      case Token.BITOR:\n      case Token.BITXOR:\n        Node result = tryFoldArithmeticOp(subtree, left, right);\n        if (result != subtree) {\n          return result;\n        }\n        return tryFoldLeftChildOp(subtree, left, right);\n\n      case Token.LT:\n      case Token.GT:\n      case Token.LE:\n      case Token.GE:\n      case Token.EQ:\n      case Token.NE:\n      case Token.SHEQ:\n      case Token.SHNE:\n        return tryFoldComparison(subtree, left, right);\n\n      default:\n        return subtree;\n    }",
      "info" : "SwitchStatement[3327-4650]:SwitchStatement[3327-4650]"
    }, {
      "left" : "case Token.GETPROP:",
      "right" : "case Token.GETPROP:",
      "info" : "SwitchCase[3361-3380]:SwitchCase[3361-3380]"
    }, {
      "left" : "return tryFoldGetProp(subtree, left, right);",
      "right" : "return tryFoldGetProp(subtree, left, right);",
      "info" : "ReturnStatement[3389-3433]:ReturnStatement[3389-3433]"
    }, {
      "left" : "case Token.GETELEM:",
      "right" : "case Token.GETELEM:",
      "info" : "SwitchCase[3441-3460]:SwitchCase[3441-3460]"
    }, {
      "left" : "return tryFoldGetElem(subtree, left, right);",
      "right" : "return tryFoldGetElem(subtree, left, right);",
      "info" : "ReturnStatement[3469-3513]:ReturnStatement[3469-3513]"
    }, {
      "left" : "case Token.INSTANCEOF:",
      "right" : "case Token.INSTANCEOF:",
      "info" : "SwitchCase[3521-3543]:SwitchCase[3521-3543]"
    }, {
      "left" : "return tryFoldInstanceof(subtree, left, right);",
      "right" : "return tryFoldInstanceof(subtree, left, right);",
      "info" : "ReturnStatement[3552-3599]:ReturnStatement[3552-3599]"
    }, {
      "left" : "case Token.AND:",
      "right" : "case Token.AND:",
      "info" : "SwitchCase[3607-3622]:SwitchCase[3607-3622]"
    }, {
      "left" : "case Token.OR:",
      "right" : "case Token.OR:",
      "info" : "SwitchCase[3629-3643]:SwitchCase[3629-3643]"
    }, {
      "left" : "return tryFoldAndOr(subtree, left, right);",
      "right" : "return tryFoldAndOr(subtree, left, right);",
      "info" : "ReturnStatement[3652-3694]:ReturnStatement[3652-3694]"
    }, {
      "left" : "case Token.LSH:",
      "right" : "case Token.LSH:",
      "info" : "SwitchCase[3702-3717]:SwitchCase[3702-3717]"
    }, {
      "left" : "case Token.RSH:",
      "right" : "case Token.RSH:",
      "info" : "SwitchCase[3724-3739]:SwitchCase[3724-3739]"
    }, {
      "left" : "case Token.URSH:",
      "right" : "case Token.URSH:",
      "info" : "SwitchCase[3746-3762]:SwitchCase[3746-3762]"
    }, {
      "left" : "return tryFoldShift(subtree, left, right);",
      "right" : "return tryFoldShift(subtree, left, right);",
      "info" : "ReturnStatement[3771-3813]:ReturnStatement[3771-3813]"
    }, {
      "left" : "case Token.ASSIGN:",
      "right" : "case Token.ASSIGN:",
      "info" : "SwitchCase[3821-3839]:SwitchCase[3821-3839]"
    }, {
      "left" : "return tryFoldAssign(subtree, left, right);",
      "right" : "return tryFoldAssign(subtree, left, right);",
      "info" : "ReturnStatement[3848-3891]:ReturnStatement[3848-3891]"
    }, {
      "left" : "case Token.ADD:",
      "right" : "case Token.ADD:",
      "info" : "SwitchCase[3899-3914]:SwitchCase[3899-3914]"
    }, {
      "left" : "return tryFoldAdd(subtree, left, right);",
      "right" : "return tryFoldAdd(subtree, left, right);",
      "info" : "ReturnStatement[3923-3963]:ReturnStatement[3923-3963]"
    }, {
      "left" : "case Token.SUB:",
      "right" : "case Token.SUB:",
      "info" : "SwitchCase[3971-3986]:SwitchCase[3971-3986]"
    }, {
      "left" : "case Token.DIV:",
      "right" : "case Token.DIV:",
      "info" : "SwitchCase[3993-4008]:SwitchCase[3993-4008]"
    }, {
      "left" : "case Token.MOD:",
      "right" : "case Token.MOD:",
      "info" : "SwitchCase[4015-4030]:SwitchCase[4015-4030]"
    }, {
      "left" : "return tryFoldArithmeticOp(subtree, left, right);",
      "right" : "return tryFoldArithmeticOp(subtree, left, right);",
      "info" : "ReturnStatement[4039-4088]:ReturnStatement[4039-4088]"
    }, {
      "left" : "case Token.MUL:",
      "right" : "case Token.MUL:",
      "info" : "SwitchCase[4096-4111]:SwitchCase[4096-4111]"
    }, {
      "left" : "case Token.BITAND:",
      "right" : "case Token.BITAND:",
      "info" : "SwitchCase[4118-4136]:SwitchCase[4118-4136]"
    }, {
      "left" : "case Token.BITOR:",
      "right" : "case Token.BITOR:",
      "info" : "SwitchCase[4143-4160]:SwitchCase[4143-4160]"
    }, {
      "left" : "case Token.BITXOR:",
      "right" : "case Token.BITXOR:",
      "info" : "SwitchCase[4167-4185]:SwitchCase[4167-4185]"
    }, {
      "left" : "Node result = tryFoldArithmeticOp(subtree, left, right);",
      "right" : "Node result = tryFoldArithmeticOp(subtree, left, right);",
      "info" : "VariableDeclarationStatement[4194-4250]:VariableDeclarationStatement[4194-4250]"
    }, {
      "left" : "if (result != subtree)",
      "right" : "if (result != subtree)",
      "info" : "IfStatement[4259-4318]:IfStatement[4259-4318]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4282-4318]:Block[4282-4318]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[4294-4308]:ReturnStatement[4294-4308]"
    }, {
      "left" : "return tryFoldLeftChildOp(subtree, left, right);",
      "right" : "return tryFoldLeftChildOp(subtree, left, right);",
      "info" : "ReturnStatement[4327-4375]:ReturnStatement[4327-4375]"
    }, {
      "left" : "case Token.LT:",
      "right" : "case Token.LT:",
      "info" : "SwitchCase[4383-4397]:SwitchCase[4383-4397]"
    }, {
      "left" : "case Token.GT:",
      "right" : "case Token.GT:",
      "info" : "SwitchCase[4404-4418]:SwitchCase[4404-4418]"
    }, {
      "left" : "case Token.LE:",
      "right" : "case Token.LE:",
      "info" : "SwitchCase[4425-4439]:SwitchCase[4425-4439]"
    }, {
      "left" : "case Token.GE:",
      "right" : "case Token.GE:",
      "info" : "SwitchCase[4446-4460]:SwitchCase[4446-4460]"
    }, {
      "left" : "case Token.EQ:",
      "right" : "case Token.EQ:",
      "info" : "SwitchCase[4467-4481]:SwitchCase[4467-4481]"
    }, {
      "left" : "case Token.NE:",
      "right" : "case Token.NE:",
      "info" : "SwitchCase[4488-4502]:SwitchCase[4488-4502]"
    }, {
      "left" : "case Token.SHEQ:",
      "right" : "case Token.SHEQ:",
      "info" : "SwitchCase[4509-4525]:SwitchCase[4509-4525]"
    }, {
      "left" : "case Token.SHNE:",
      "right" : "case Token.SHNE:",
      "info" : "SwitchCase[4532-4548]:SwitchCase[4532-4548]"
    }, {
      "left" : "return tryFoldComparison(subtree, left, right);",
      "right" : "return tryFoldComparison(subtree, left, right);",
      "info" : "ReturnStatement[4557-4604]:ReturnStatement[4557-4604]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[4612-4620]:SwitchCase[4612-4620]"
    }, {
      "left" : "return subtree;",
      "right" : "return subtree;",
      "info" : "ReturnStatement[4629-4644]:ReturnStatement[4629-4644]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[4658-4665]:Modifier[4658-4665]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[4666-4670]:SimpleType[4666-4670]"
    }, {
      "left" : "tryReduceVoid",
      "right" : "tryReduceVoid",
      "info" : "SimpleName[4671-4684]:SimpleName[4671-4684]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[4685-4691]:SingleVariableDeclaration[4685-4691]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4693-4947]:Block[4693-4947]"
    }, {
      "left" : "Node child = n.getFirstChild();",
      "right" : "Node child = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[4699-4730]:VariableDeclarationStatement[4699-4730]"
    }, {
      "left" : "if (child.getType() != Token.NUMBER || child.getDouble() != 0.0)",
      "right" : "if (child.getType() != Token.NUMBER || child.getDouble() != 0.0)",
      "info" : "IfStatement[4735-4929]:IfStatement[4735-4929]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4800-4929]:Block[4800-4929]"
    }, {
      "left" : "if (!mayHaveSideEffects(n))",
      "right" : "if (!mayHaveSideEffects(n))",
      "info" : "IfStatement[4808-4923]:IfStatement[4808-4923]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4836-4923]:Block[4836-4923]"
    }, {
      "left" : "n.replaceChild(child, Node.newNumber(0));",
      "right" : "n.replaceChild(child, Node.newNumber(0));",
      "info" : "ExpressionStatement[4846-4887]:ExpressionStatement[4846-4887]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[4896-4915]:ExpressionStatement[4896-4915]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[4934-4943]:ReturnStatement[4934-4943]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[4951-4958]:Modifier[4951-4958]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[4959-4963]:PrimitiveType[4959-4963]"
    }, {
      "left" : "tryReduceOperandsForOp",
      "right" : "tryReduceOperandsForOp",
      "info" : "SimpleName[4964-4986]:SimpleName[4964-4986]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[4987-4993]:SingleVariableDeclaration[4987-4993]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4995-6040]:Block[4995-6040]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.ADD:\n        Node left = n.getFirstChild();\n        Node right = n.getLastChild();\n        if (!NodeUtil.mayBeString(left) && !NodeUtil.mayBeString(right)) {\n          tryConvertOperandsToNumber(n);\n        }\n        break;\n      case Token.ASSIGN_BITOR:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_BITAND:\n        // TODO(johnlenz): convert these to integers.\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_RSH:\n      case Token.ASSIGN_URSH:\n      case Token.ASSIGN_SUB:\n      case Token.ASSIGN_MUL:\n      case Token.ASSIGN_MOD:\n      case Token.ASSIGN_DIV:\n        tryConvertToNumber(n.getLastChild());\n        break;\n      case Token.BITNOT:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.BITAND:\n      case Token.LSH:\n      case Token.RSH:\n      case Token.URSH:\n      case Token.SUB:\n      case Token.MUL:\n      case Token.MOD:\n      case Token.DIV:\n      case Token.POS:\n      case Token.NEG:\n        tryConvertOperandsToNumber(n);\n        break;\n    }",
      "right" : "switch (n.getType()) {\n      case Token.ADD:\n        Node left = n.getFirstChild();\n        Node right = n.getLastChild();\n        if (!NodeUtil.mayBeString(left) && !NodeUtil.mayBeString(right)) {\n          tryConvertOperandsToNumber(n);\n        }\n        break;\n      case Token.ASSIGN_BITOR:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_BITAND:\n        // TODO(johnlenz): convert these to integers.\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_RSH:\n      case Token.ASSIGN_URSH:\n      case Token.ASSIGN_SUB:\n      case Token.ASSIGN_MUL:\n      case Token.ASSIGN_MOD:\n      case Token.ASSIGN_DIV:\n        tryConvertToNumber(n.getLastChild());\n        break;\n      case Token.BITNOT:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.BITAND:\n      case Token.LSH:\n      case Token.RSH:\n      case Token.URSH:\n      case Token.SUB:\n      case Token.MUL:\n      case Token.MOD:\n      case Token.DIV:\n      case Token.POS:\n      case Token.NEG:\n        tryConvertOperandsToNumber(n);\n        break;\n    }",
      "info" : "SwitchStatement[5001-6036]:SwitchStatement[5001-6036]"
    }, {
      "left" : "case Token.ADD:",
      "right" : "case Token.ADD:",
      "info" : "SwitchCase[5030-5045]:SwitchCase[5030-5045]"
    }, {
      "left" : "Node left = n.getFirstChild();",
      "right" : "Node left = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[5054-5084]:VariableDeclarationStatement[5054-5084]"
    }, {
      "left" : "Node right = n.getLastChild();",
      "right" : "Node right = n.getLastChild();",
      "info" : "VariableDeclarationStatement[5093-5123]:VariableDeclarationStatement[5093-5123]"
    }, {
      "left" : "if (!NodeUtil.mayBeString(left) && !NodeUtil.mayBeString(right))",
      "right" : "if (!NodeUtil.mayBeString(left) && !NodeUtil.mayBeString(right))",
      "info" : "IfStatement[5132-5249]:IfStatement[5132-5249]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5197-5249]:Block[5197-5249]"
    }, {
      "left" : "tryConvertOperandsToNumber(n);",
      "right" : "tryConvertOperandsToNumber(n);",
      "info" : "ExpressionStatement[5209-5239]:ExpressionStatement[5209-5239]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[5258-5264]:BreakStatement[5258-5264]"
    }, {
      "left" : "case Token.ASSIGN_BITOR:",
      "right" : "case Token.ASSIGN_BITOR:",
      "info" : "SwitchCase[5271-5295]:SwitchCase[5271-5295]"
    }, {
      "left" : "case Token.ASSIGN_BITXOR:",
      "right" : "case Token.ASSIGN_BITXOR:",
      "info" : "SwitchCase[5302-5327]:SwitchCase[5302-5327]"
    }, {
      "left" : "case Token.ASSIGN_BITAND:",
      "right" : "case Token.ASSIGN_BITAND:",
      "info" : "SwitchCase[5334-5359]:SwitchCase[5334-5359]"
    }, {
      "left" : "case Token.ASSIGN_LSH:",
      "right" : "case Token.ASSIGN_LSH:",
      "info" : "SwitchCase[5420-5442]:SwitchCase[5420-5442]"
    }, {
      "left" : "case Token.ASSIGN_RSH:",
      "right" : "case Token.ASSIGN_RSH:",
      "info" : "SwitchCase[5449-5471]:SwitchCase[5449-5471]"
    }, {
      "left" : "case Token.ASSIGN_URSH:",
      "right" : "case Token.ASSIGN_URSH:",
      "info" : "SwitchCase[5478-5501]:SwitchCase[5478-5501]"
    }, {
      "left" : "case Token.ASSIGN_SUB:",
      "right" : "case Token.ASSIGN_SUB:",
      "info" : "SwitchCase[5508-5530]:SwitchCase[5508-5530]"
    }, {
      "left" : "case Token.ASSIGN_MUL:",
      "right" : "case Token.ASSIGN_MUL:",
      "info" : "SwitchCase[5537-5559]:SwitchCase[5537-5559]"
    }, {
      "left" : "case Token.ASSIGN_MOD:",
      "right" : "case Token.ASSIGN_MOD:",
      "info" : "SwitchCase[5566-5588]:SwitchCase[5566-5588]"
    }, {
      "left" : "case Token.ASSIGN_DIV:",
      "right" : "case Token.ASSIGN_DIV:",
      "info" : "SwitchCase[5595-5617]:SwitchCase[5595-5617]"
    }, {
      "left" : "tryConvertToNumber(n.getLastChild());",
      "right" : "tryConvertToNumber(n.getLastChild());",
      "info" : "ExpressionStatement[5626-5663]:ExpressionStatement[5626-5663]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[5672-5678]:BreakStatement[5672-5678]"
    }, {
      "left" : "case Token.BITNOT:",
      "right" : "case Token.BITNOT:",
      "info" : "SwitchCase[5685-5703]:SwitchCase[5685-5703]"
    }, {
      "left" : "case Token.BITOR:",
      "right" : "case Token.BITOR:",
      "info" : "SwitchCase[5710-5727]:SwitchCase[5710-5727]"
    }, {
      "left" : "case Token.BITXOR:",
      "right" : "case Token.BITXOR:",
      "info" : "SwitchCase[5734-5752]:SwitchCase[5734-5752]"
    }, {
      "left" : "case Token.BITAND:",
      "right" : "case Token.BITAND:",
      "info" : "SwitchCase[5759-5777]:SwitchCase[5759-5777]"
    }, {
      "left" : "case Token.LSH:",
      "right" : "case Token.LSH:",
      "info" : "SwitchCase[5784-5799]:SwitchCase[5784-5799]"
    }, {
      "left" : "case Token.RSH:",
      "right" : "case Token.RSH:",
      "info" : "SwitchCase[5806-5821]:SwitchCase[5806-5821]"
    }, {
      "left" : "case Token.URSH:",
      "right" : "case Token.URSH:",
      "info" : "SwitchCase[5828-5844]:SwitchCase[5828-5844]"
    }, {
      "left" : "case Token.SUB:",
      "right" : "case Token.SUB:",
      "info" : "SwitchCase[5851-5866]:SwitchCase[5851-5866]"
    }, {
      "left" : "case Token.MUL:",
      "right" : "case Token.MUL:",
      "info" : "SwitchCase[5873-5888]:SwitchCase[5873-5888]"
    }, {
      "left" : "case Token.MOD:",
      "right" : "case Token.MOD:",
      "info" : "SwitchCase[5895-5910]:SwitchCase[5895-5910]"
    }, {
      "left" : "case Token.DIV:",
      "right" : "case Token.DIV:",
      "info" : "SwitchCase[5917-5932]:SwitchCase[5917-5932]"
    }, {
      "left" : "case Token.POS:",
      "right" : "case Token.POS:",
      "info" : "SwitchCase[5939-5954]:SwitchCase[5939-5954]"
    }, {
      "left" : "case Token.NEG:",
      "right" : "case Token.NEG:",
      "info" : "SwitchCase[5961-5976]:SwitchCase[5961-5976]"
    }, {
      "left" : "tryConvertOperandsToNumber(n);",
      "right" : "tryConvertOperandsToNumber(n);",
      "info" : "ExpressionStatement[5985-6015]:ExpressionStatement[5985-6015]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[6024-6030]:BreakStatement[6024-6030]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[6044-6051]:Modifier[6044-6051]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6052-6056]:PrimitiveType[6052-6056]"
    }, {
      "left" : "tryConvertOperandsToNumber",
      "right" : "tryConvertOperandsToNumber",
      "info" : "SimpleName[6057-6083]:SimpleName[6057-6083]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[6084-6090]:SingleVariableDeclaration[6084-6090]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6092-6233]:Block[6092-6233]"
    }, {
      "left" : "Node next;",
      "right" : "Node next;",
      "info" : "VariableDeclarationStatement[6098-6108]:VariableDeclarationStatement[6098-6108]"
    }, {
      "left" : "for (Node c = n.getFirstChild(); c != null; c = next)",
      "right" : "for (Node c = n.getFirstChild(); c != null; c = next)",
      "info" : "ForStatement[6113-6229]:ForStatement[6113-6229]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6167-6229]:Block[6167-6229]"
    }, {
      "left" : "next = c.getNext();",
      "right" : "next = c.getNext();",
      "info" : "ExpressionStatement[6175-6194]:ExpressionStatement[6175-6194]"
    }, {
      "left" : "tryConvertToNumber(c);",
      "right" : "tryConvertToNumber(c);",
      "info" : "ExpressionStatement[6201-6223]:ExpressionStatement[6201-6223]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[6237-6244]:Modifier[6237-6244]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6245-6249]:PrimitiveType[6245-6249]"
    }, {
      "left" : "tryConvertToNumber",
      "right" : "tryConvertToNumber",
      "info" : "SimpleName[6250-6268]:SimpleName[6250-6268]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[6269-6275]:SingleVariableDeclaration[6269-6275]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6277-7412]:Block[6277-7412]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.NUMBER:\n        // Nothing to do\n        return;\n      case Token.AND:\n      case Token.OR:\n      case Token.COMMA:\n        tryConvertToNumber(n.getLastChild());\n        return;\n      case Token.HOOK:\n        tryConvertToNumber(n.getChildAtIndex(1));\n        tryConvertToNumber(n.getLastChild());\n        return;\n      case Token.NAME:\n        if (!NodeUtil.isUndefined(n)) {\n          return;\n        }\n        break;\n    }",
      "right" : "switch (n.getType()) {\n      case Token.NUMBER:\n        // Nothing to do\n        return;\n      case Token.AND:\n      case Token.OR:\n      case Token.COMMA:\n        tryConvertToNumber(n.getLastChild());\n        return;\n      case Token.HOOK:\n        tryConvertToNumber(n.getChildAtIndex(1));\n        tryConvertToNumber(n.getLastChild());\n        return;\n      case Token.NAME:\n        if (!NodeUtil.isUndefined(n)) {\n          return;\n        }\n        break;\n    }",
      "info" : "SwitchStatement[6283-6747]:SwitchStatement[6283-6747]"
    }, {
      "left" : "case Token.NUMBER:",
      "right" : "case Token.NUMBER:",
      "info" : "SwitchCase[6312-6330]:SwitchCase[6312-6330]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[6364-6371]:ReturnStatement[6364-6371]"
    }, {
      "left" : "case Token.AND:",
      "right" : "case Token.AND:",
      "info" : "SwitchCase[6378-6393]:SwitchCase[6378-6393]"
    }, {
      "left" : "case Token.OR:",
      "right" : "case Token.OR:",
      "info" : "SwitchCase[6400-6414]:SwitchCase[6400-6414]"
    }, {
      "left" : "case Token.COMMA:",
      "right" : "case Token.COMMA:",
      "info" : "SwitchCase[6421-6438]:SwitchCase[6421-6438]"
    }, {
      "left" : "tryConvertToNumber(n.getLastChild());",
      "right" : "tryConvertToNumber(n.getLastChild());",
      "info" : "ExpressionStatement[6447-6484]:ExpressionStatement[6447-6484]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[6493-6500]:ReturnStatement[6493-6500]"
    }, {
      "left" : "case Token.HOOK:",
      "right" : "case Token.HOOK:",
      "info" : "SwitchCase[6507-6523]:SwitchCase[6507-6523]"
    }, {
      "left" : "tryConvertToNumber(n.getChildAtIndex(1));",
      "right" : "tryConvertToNumber(n.getChildAtIndex(1));",
      "info" : "ExpressionStatement[6532-6573]:ExpressionStatement[6532-6573]"
    }, {
      "left" : "tryConvertToNumber(n.getLastChild());",
      "right" : "tryConvertToNumber(n.getLastChild());",
      "info" : "ExpressionStatement[6582-6619]:ExpressionStatement[6582-6619]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[6628-6635]:ReturnStatement[6628-6635]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[6642-6658]:SwitchCase[6642-6658]"
    }, {
      "left" : "if (!NodeUtil.isUndefined(n))",
      "right" : "if (!NodeUtil.isUndefined(n))",
      "info" : "IfStatement[6667-6726]:IfStatement[6667-6726]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6697-6726]:Block[6697-6726]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[6709-6716]:ReturnStatement[6709-6716]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[6735-6741]:BreakStatement[6735-6741]"
    }, {
      "left" : "Double result = NodeUtil.getNumberValue(n);",
      "right" : "Double result = NodeUtil.getNumberValue(n);",
      "info" : "VariableDeclarationStatement[6753-6796]:VariableDeclarationStatement[6753-6796]"
    }, {
      "left" : "if (result == null)",
      "right" : "if (result == null)",
      "info" : "IfStatement[6801-6842]:IfStatement[6801-6842]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6821-6842]:Block[6821-6842]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[6829-6836]:ReturnStatement[6829-6836]"
    }, {
      "left" : "double value = result;",
      "right" : "double value = result;",
      "info" : "VariableDeclarationStatement[6848-6870]:VariableDeclarationStatement[6848-6870]"
    }, {
      "left" : "Node replacement;",
      "right" : "Node replacement;",
      "info" : "VariableDeclarationStatement[6876-6893]:VariableDeclarationStatement[6876-6893]"
    }, {
      "left" : "if (Double.isNaN(value))",
      "right" : "if (Double.isNaN(value))",
      "info" : "IfStatement[6898-7335]:IfStatement[6898-7335]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6923-6985]:Block[6923-6985]"
    }, {
      "left" : "replacement = Node.newString(Token.NAME, \"NaN\");",
      "right" : "replacement = Node.newString(Token.NAME, \"NaN\");",
      "info" : "ExpressionStatement[6931-6979]:ExpressionStatement[6931-6979]"
    }, {
      "left" : "if (value == Double.POSITIVE_INFINITY)",
      "right" : "if (value == Double.POSITIVE_INFINITY)",
      "info" : "IfStatement[6991-7335]:IfStatement[6991-7335]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7030-7097]:Block[7030-7097]"
    }, {
      "left" : "replacement = Node.newString(Token.NAME, \"Infinity\");",
      "right" : "replacement = Node.newString(Token.NAME, \"Infinity\");",
      "info" : "ExpressionStatement[7038-7091]:ExpressionStatement[7038-7091]"
    }, {
      "left" : "if (value == Double.NEGATIVE_INFINITY)",
      "right" : "if (value == Double.NEGATIVE_INFINITY)",
      "info" : "IfStatement[7103-7335]:IfStatement[7103-7335]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7142-7279]:Block[7142-7279]"
    }, {
      "left" : "replacement = new Node(Token.NEG, Node.newString(Token.NAME, \"Infinity\"));",
      "right" : "replacement = new Node(Token.NEG, Node.newString(Token.NAME, \"Infinity\"));",
      "info" : "ExpressionStatement[7150-7224]:ExpressionStatement[7150-7224]"
    }, {
      "left" : "replacement.copyInformationFromForTree(n);",
      "right" : "replacement.copyInformationFromForTree(n);",
      "info" : "ExpressionStatement[7231-7273]:ExpressionStatement[7231-7273]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7285-7335]:Block[7285-7335]"
    }, {
      "left" : "replacement = Node.newNumber(value);",
      "right" : "replacement = Node.newNumber(value);",
      "info" : "ExpressionStatement[7293-7329]:ExpressionStatement[7293-7329]"
    }, {
      "left" : "n.getParent().replaceChild(n, replacement);",
      "right" : "n.getParent().replaceChild(n, replacement);",
      "info" : "ExpressionStatement[7341-7384]:ExpressionStatement[7341-7384]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[7389-7408]:ExpressionStatement[7389-7408]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[7539-7546]:Modifier[7539-7546]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[7547-7551]:SimpleType[7547-7551]"
    }, {
      "left" : "tryFoldTypeof",
      "right" : "tryFoldTypeof",
      "info" : "SimpleName[7552-7565]:SimpleName[7552-7565]"
    }, {
      "left" : "Node originalTypeofNode",
      "right" : "Node originalTypeofNode",
      "info" : "SingleVariableDeclaration[7566-7589]:SingleVariableDeclaration[7566-7589]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7591-9013]:Block[7591-9013]"
    }, {
      "left" : "Preconditions.checkArgument(originalTypeofNode.getType() == Token.TYPEOF);",
      "right" : "Preconditions.checkArgument(originalTypeofNode.getType() == Token.TYPEOF);",
      "info" : "ExpressionStatement[7597-7671]:ExpressionStatement[7597-7671]"
    }, {
      "left" : "Node argumentNode = originalTypeofNode.getFirstChild();",
      "right" : "Node argumentNode = originalTypeofNode.getFirstChild();",
      "info" : "VariableDeclarationStatement[7677-7732]:VariableDeclarationStatement[7677-7732]"
    }, {
      "left" : "if (argumentNode == null || !NodeUtil.isLiteralValue(argumentNode, true))",
      "right" : "if (argumentNode == null || !NodeUtil.isLiteralValue(argumentNode, true))",
      "info" : "IfStatement[7737-7851]:IfStatement[7737-7851]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7811-7851]:Block[7811-7851]"
    }, {
      "left" : "return originalTypeofNode;",
      "right" : "return originalTypeofNode;",
      "info" : "ReturnStatement[7819-7845]:ReturnStatement[7819-7845]"
    }, {
      "left" : "String typeNameString = null;",
      "right" : "String typeNameString = null;",
      "info" : "VariableDeclarationStatement[7857-7886]:VariableDeclarationStatement[7857-7886]"
    }, {
      "left" : "switch (argumentNode.getType()) {\n      case Token.FUNCTION:\n        typeNameString = \"function\";\n        break;\n      case Token.STRING:\n        typeNameString = \"string\";\n        break;\n      case Token.NUMBER:\n        typeNameString = \"number\";\n        break;\n      case Token.TRUE:\n      case Token.FALSE:\n        typeNameString = \"boolean\";\n        break;\n      case Token.NULL:\n      case Token.OBJECTLIT:\n      case Token.ARRAYLIT:\n        typeNameString = \"object\";\n        break;\n      case Token.VOID:\n        typeNameString = \"undefined\";\n        break;\n      case Token.NAME:\n        // We assume here that programs don't change the value of the\n        // keyword undefined to something other than the value undefined.\n        if (\"undefined\".equals(argumentNode.getString())) {\n          typeNameString = \"undefined\";\n        }\n        break;\n    }",
      "right" : "switch (argumentNode.getType()) {\n      case Token.FUNCTION:\n        typeNameString = \"function\";\n        break;\n      case Token.STRING:\n        typeNameString = \"string\";\n        break;\n      case Token.NUMBER:\n        typeNameString = \"number\";\n        break;\n      case Token.TRUE:\n      case Token.FALSE:\n        typeNameString = \"boolean\";\n        break;\n      case Token.NULL:\n      case Token.OBJECTLIT:\n      case Token.ARRAYLIT:\n        typeNameString = \"object\";\n        break;\n      case Token.VOID:\n        typeNameString = \"undefined\";\n        break;\n      case Token.NAME:\n        // We assume here that programs don't change the value of the\n        // keyword undefined to something other than the value undefined.\n        if (\"undefined\".equals(argumentNode.getString())) {\n          typeNameString = \"undefined\";\n        }\n        break;\n    }",
      "info" : "SwitchStatement[7892-8754]:SwitchStatement[7892-8754]"
    }, {
      "left" : "case Token.FUNCTION:",
      "right" : "case Token.FUNCTION:",
      "info" : "SwitchCase[7932-7952]:SwitchCase[7932-7952]"
    }, {
      "left" : "typeNameString = \"function\";",
      "right" : "typeNameString = \"function\";",
      "info" : "ExpressionStatement[7961-7989]:ExpressionStatement[7961-7989]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[7998-8004]:BreakStatement[7998-8004]"
    }, {
      "left" : "case Token.STRING:",
      "right" : "case Token.STRING:",
      "info" : "SwitchCase[8011-8029]:SwitchCase[8011-8029]"
    }, {
      "left" : "typeNameString = \"string\";",
      "right" : "typeNameString = \"string\";",
      "info" : "ExpressionStatement[8038-8064]:ExpressionStatement[8038-8064]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[8073-8079]:BreakStatement[8073-8079]"
    }, {
      "left" : "case Token.NUMBER:",
      "right" : "case Token.NUMBER:",
      "info" : "SwitchCase[8086-8104]:SwitchCase[8086-8104]"
    }, {
      "left" : "typeNameString = \"number\";",
      "right" : "typeNameString = \"number\";",
      "info" : "ExpressionStatement[8113-8139]:ExpressionStatement[8113-8139]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[8148-8154]:BreakStatement[8148-8154]"
    }, {
      "left" : "case Token.TRUE:",
      "right" : "case Token.TRUE:",
      "info" : "SwitchCase[8161-8177]:SwitchCase[8161-8177]"
    }, {
      "left" : "case Token.FALSE:",
      "right" : "case Token.FALSE:",
      "info" : "SwitchCase[8184-8201]:SwitchCase[8184-8201]"
    }, {
      "left" : "typeNameString = \"boolean\";",
      "right" : "typeNameString = \"boolean\";",
      "info" : "ExpressionStatement[8210-8237]:ExpressionStatement[8210-8237]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[8246-8252]:BreakStatement[8246-8252]"
    }, {
      "left" : "case Token.NULL:",
      "right" : "case Token.NULL:",
      "info" : "SwitchCase[8259-8275]:SwitchCase[8259-8275]"
    }, {
      "left" : "case Token.OBJECTLIT:",
      "right" : "case Token.OBJECTLIT:",
      "info" : "SwitchCase[8282-8303]:SwitchCase[8282-8303]"
    }, {
      "left" : "case Token.ARRAYLIT:",
      "right" : "case Token.ARRAYLIT:",
      "info" : "SwitchCase[8310-8330]:SwitchCase[8310-8330]"
    }, {
      "left" : "typeNameString = \"object\";",
      "right" : "typeNameString = \"object\";",
      "info" : "ExpressionStatement[8339-8365]:ExpressionStatement[8339-8365]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[8374-8380]:BreakStatement[8374-8380]"
    }, {
      "left" : "case Token.VOID:",
      "right" : "case Token.VOID:",
      "info" : "SwitchCase[8387-8403]:SwitchCase[8387-8403]"
    }, {
      "left" : "typeNameString = \"undefined\";",
      "right" : "typeNameString = \"undefined\";",
      "info" : "ExpressionStatement[8412-8441]:ExpressionStatement[8412-8441]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[8450-8456]:BreakStatement[8450-8456]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[8463-8479]:SwitchCase[8463-8479]"
    }, {
      "left" : "if (\"undefined\".equals(argumentNode.getString()))",
      "right" : "if (\"undefined\".equals(argumentNode.getString()))",
      "info" : "IfStatement[8632-8733]:IfStatement[8632-8733]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8682-8733]:Block[8682-8733]"
    }, {
      "left" : "typeNameString = \"undefined\";",
      "right" : "typeNameString = \"undefined\";",
      "info" : "ExpressionStatement[8694-8723]:ExpressionStatement[8694-8723]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[8742-8748]:BreakStatement[8742-8748]"
    }, {
      "left" : "if (typeNameString != null)",
      "right" : "if (typeNameString != null)",
      "info" : "IfStatement[8760-8977]:IfStatement[8760-8977]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8788-8977]:Block[8788-8977]"
    }, {
      "left" : "Node newNode = Node.newString(typeNameString);",
      "right" : "Node newNode = Node.newString(typeNameString);",
      "info" : "VariableDeclarationStatement[8796-8842]:VariableDeclarationStatement[8796-8842]"
    }, {
      "left" : "originalTypeofNode.getParent().replaceChild(originalTypeofNode, newNode);",
      "right" : "originalTypeofNode.getParent().replaceChild(originalTypeofNode, newNode);",
      "info" : "ExpressionStatement[8849-8922]:ExpressionStatement[8849-8922]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[8929-8948]:ExpressionStatement[8929-8948]"
    }, {
      "left" : "return newNode;",
      "right" : "return newNode;",
      "info" : "ReturnStatement[8956-8971]:ReturnStatement[8956-8971]"
    }, {
      "left" : "return originalTypeofNode;",
      "right" : "return originalTypeofNode;",
      "info" : "ReturnStatement[8983-9009]:ReturnStatement[8983-9009]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[9017-9024]:Modifier[9017-9024]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[9025-9029]:SimpleType[9025-9029]"
    }, {
      "left" : "tryFoldUnaryOperator",
      "right" : "tryFoldUnaryOperator",
      "info" : "SimpleName[9030-9050]:SimpleName[9030-9050]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[9051-9057]:SingleVariableDeclaration[9051-9057]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9059-12014]:Block[9059-12014]"
    }, {
      "left" : "Preconditions.checkState(n.hasOneChild());",
      "right" : "Preconditions.checkState(n.hasOneChild());",
      "info" : "ExpressionStatement[9065-9107]:ExpressionStatement[9065-9107]"
    }, {
      "left" : "Node left = n.getFirstChild();",
      "right" : "Node left = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[9113-9143]:VariableDeclarationStatement[9113-9143]"
    }, {
      "left" : "Node parent = n.getParent();",
      "right" : "Node parent = n.getParent();",
      "info" : "VariableDeclarationStatement[9148-9176]:VariableDeclarationStatement[9148-9176]"
    }, {
      "left" : "if (left == null)",
      "right" : "if (left == null)",
      "info" : "IfStatement[9182-9223]:IfStatement[9182-9223]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9200-9223]:Block[9200-9223]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[9208-9217]:ReturnStatement[9208-9217]"
    }, {
      "left" : "TernaryValue leftVal = NodeUtil.getBooleanValue(left);",
      "right" : "TernaryValue leftVal = NodeUtil.getBooleanValue(left);",
      "info" : "VariableDeclarationStatement[9229-9283]:VariableDeclarationStatement[9229-9283]"
    }, {
      "left" : "if (leftVal == TernaryValue.UNKNOWN)",
      "right" : "if (leftVal == TernaryValue.UNKNOWN)",
      "info" : "IfStatement[9288-9348]:IfStatement[9288-9348]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9325-9348]:Block[9325-9348]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[9333-9342]:ReturnStatement[9333-9342]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.NOT:\n        // Don't fold !0 and !1 back to false.\n        if (left.getType() == Token.NUMBER) {\n          double numValue = left.getDouble();\n          if (numValue == 0 || numValue == 1) {\n            return n;\n          }\n        }\n        int result = leftVal.toBoolean(true) ? Token.FALSE : Token.TRUE;\n        Node replacementNode = new Node(result);\n        parent.replaceChild(n, replacementNode);\n        reportCodeChange();\n        return replacementNode;\n      case Token.POS:\n        if (NodeUtil.isNumericResult(left)) {\n          // POS does nothing to numeric values.\n          parent.replaceChild(n, left.detachFromParent());\n          reportCodeChange();\n          return left;\n        }\n        return n;\n      case Token.NEG:\n        try {\n          if (left.getType() == Token.NAME) {\n            if (left.getString().equals(\"Infinity\")) {\n              // \"-Infinity\" is valid and a literal, don't modify it.\n              return n;\n            } else if (left.getString().equals(\"NaN\")) {\n              // \"-NaN\" is \"NaN\".\n              n.removeChild(left);\n              parent.replaceChild(n, left);\n              reportCodeChange();\n              return left;\n            }\n          }\n\n          double negNum = -left.getDouble();\n\n          Node negNumNode = Node.newNumber(negNum);\n          parent.replaceChild(n, negNumNode);\n          reportCodeChange();\n          return negNumNode;\n        } catch (UnsupportedOperationException ex) {\n          // left is not a number node, so do not replace, but warn the\n          // user because they can't be doing anything good\n          error(NEGATING_A_NON_NUMBER_ERROR, left);\n          return n;\n        }\n      case Token.BITNOT:\n        try {\n          double val = left.getDouble();\n          if (val >= Integer.MIN_VALUE && val <= Integer.MAX_VALUE) {\n            int intVal = (int) val;\n            if (intVal == val) {\n              Node notIntValNode = Node.newNumber(~intVal);\n              parent.replaceChild(n, notIntValNode);\n              reportCodeChange();\n              return notIntValNode;\n            } else {\n              error(FRACTIONAL_BITWISE_OPERAND, left);\n              return n;\n            }\n          } else {\n            error(BITWISE_OPERAND_OUT_OF_RANGE, left);\n            return n;\n          }\n        } catch (UnsupportedOperationException ex) {\n          // left is not a number node, so do not replace, but warn the\n          // user because they can't be doing anything good\n          error(NEGATING_A_NON_NUMBER_ERROR, left);\n          return n;\n        }\n        default:\n          return n;\n    }",
      "right" : "switch (n.getType()) {\n      case Token.NOT:\n        // Don't fold !0 and !1 back to false.\n        if (left.getType() == Token.NUMBER) {\n          double numValue = left.getDouble();\n          if (numValue == 0 || numValue == 1) {\n            return n;\n          }\n        }\n        int result = leftVal.toBoolean(true) ? Token.FALSE : Token.TRUE;\n        Node replacementNode = new Node(result);\n        parent.replaceChild(n, replacementNode);\n        reportCodeChange();\n        return replacementNode;\n      case Token.POS:\n        if (NodeUtil.isNumericResult(left)) {\n          // POS does nothing to numeric values.\n          parent.replaceChild(n, left.detachFromParent());\n          reportCodeChange();\n          return left;\n        }\n        return n;\n      case Token.NEG:\n        try {\n          if (left.getType() == Token.NAME) {\n            if (left.getString().equals(\"Infinity\")) {\n              // \"-Infinity\" is valid and a literal, don't modify it.\n              return n;\n            } else if (left.getString().equals(\"NaN\")) {\n              // \"-NaN\" is \"NaN\".\n              n.removeChild(left);\n              parent.replaceChild(n, left);\n              reportCodeChange();\n              return left;\n            }\n          }\n\n          double negNum = -left.getDouble();\n\n          Node negNumNode = Node.newNumber(negNum);\n          parent.replaceChild(n, negNumNode);\n          reportCodeChange();\n          return negNumNode;\n        } catch (UnsupportedOperationException ex) {\n          // left is not a number node, so do not replace, but warn the\n          // user because they can't be doing anything good\n          error(NEGATING_A_NON_NUMBER_ERROR, left);\n          return n;\n        }\n      case Token.BITNOT:\n        try {\n          double val = left.getDouble();\n          if (val >= Integer.MIN_VALUE && val <= Integer.MAX_VALUE) {\n            int intVal = (int) val;\n            if (intVal == val) {\n              Node notIntValNode = Node.newNumber(~intVal);\n              parent.replaceChild(n, notIntValNode);\n              reportCodeChange();\n              return notIntValNode;\n            } else {\n              error(FRACTIONAL_BITWISE_OPERAND, left);\n              return n;\n            }\n          } else {\n            error(BITWISE_OPERAND_OUT_OF_RANGE, left);\n            return n;\n          }\n        } catch (UnsupportedOperationException ex) {\n          // left is not a number node, so do not replace, but warn the\n          // user because they can't be doing anything good\n          error(NEGATING_A_NON_NUMBER_ERROR, left);\n          return n;\n        }\n        default:\n          return n;\n    }",
      "info" : "SwitchStatement[9354-12010]:SwitchStatement[9354-12010]"
    }, {
      "left" : "case Token.NOT:",
      "right" : "case Token.NOT:",
      "info" : "SwitchCase[9383-9398]:SwitchCase[9383-9398]"
    }, {
      "left" : "if (left.getType() == Token.NUMBER)",
      "right" : "if (left.getType() == Token.NUMBER)",
      "info" : "IfStatement[9454-9629]:IfStatement[9454-9629]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9490-9629]:Block[9490-9629]"
    }, {
      "left" : "double numValue = left.getDouble();",
      "right" : "double numValue = left.getDouble();",
      "info" : "VariableDeclarationStatement[9502-9537]:VariableDeclarationStatement[9502-9537]"
    }, {
      "left" : "if (numValue == 0 || numValue == 1)",
      "right" : "if (numValue == 0 || numValue == 1)",
      "info" : "IfStatement[9548-9619]:IfStatement[9548-9619]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9584-9619]:Block[9584-9619]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[9598-9607]:ReturnStatement[9598-9607]"
    }, {
      "left" : "int result = leftVal.toBoolean(true) ? Token.FALSE : Token.TRUE;",
      "right" : "int result = leftVal.toBoolean(true) ? Token.FALSE : Token.TRUE;",
      "info" : "VariableDeclarationStatement[9638-9702]:VariableDeclarationStatement[9638-9702]"
    }, {
      "left" : "Node replacementNode = new Node(result);",
      "right" : "Node replacementNode = new Node(result);",
      "info" : "VariableDeclarationStatement[9711-9751]:VariableDeclarationStatement[9711-9751]"
    }, {
      "left" : "parent.replaceChild(n, replacementNode);",
      "right" : "parent.replaceChild(n, replacementNode);",
      "info" : "ExpressionStatement[9760-9800]:ExpressionStatement[9760-9800]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[9809-9828]:ExpressionStatement[9809-9828]"
    }, {
      "left" : "return replacementNode;",
      "right" : "return replacementNode;",
      "info" : "ReturnStatement[9837-9860]:ReturnStatement[9837-9860]"
    }, {
      "left" : "case Token.POS:",
      "right" : "case Token.POS:",
      "info" : "SwitchCase[9867-9882]:SwitchCase[9867-9882]"
    }, {
      "left" : "if (NodeUtil.isNumericResult(left))",
      "right" : "if (NodeUtil.isNumericResult(left))",
      "info" : "IfStatement[9891-10099]:IfStatement[9891-10099]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9927-10099]:Block[9927-10099]"
    }, {
      "left" : "parent.replaceChild(n, left.detachFromParent());",
      "right" : "parent.replaceChild(n, left.detachFromParent());",
      "info" : "ExpressionStatement[9988-10036]:ExpressionStatement[9988-10036]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[10047-10066]:ExpressionStatement[10047-10066]"
    }, {
      "left" : "return left;",
      "right" : "return left;",
      "info" : "ReturnStatement[10077-10089]:ReturnStatement[10077-10089]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[10108-10117]:ReturnStatement[10108-10117]"
    }, {
      "left" : "case Token.NEG:",
      "right" : "case Token.NEG:",
      "info" : "SwitchCase[10124-10139]:SwitchCase[10124-10139]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[10148-11076]:TryStatement[10148-11076]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10152-10819]:Block[10152-10819]"
    }, {
      "left" : "if (left.getType() == Token.NAME)",
      "right" : "if (left.getType() == Token.NAME)",
      "info" : "IfStatement[10164-10605]:IfStatement[10164-10605]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10198-10605]:Block[10198-10605]"
    }, {
      "left" : "if (left.getString().equals(\"Infinity\"))",
      "right" : "if (left.getString().equals(\"Infinity\"))",
      "info" : "IfStatement[10212-10593]:IfStatement[10212-10593]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10253-10362]:Block[10253-10362]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[10339-10348]:ReturnStatement[10339-10348]"
    }, {
      "left" : "if (left.getString().equals(\"NaN\"))",
      "right" : "if (left.getString().equals(\"NaN\"))",
      "info" : "IfStatement[10368-10593]:IfStatement[10368-10593]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10404-10593]:Block[10404-10593]"
    }, {
      "left" : "n.removeChild(left);",
      "right" : "n.removeChild(left);",
      "info" : "ExpressionStatement[10454-10474]:ExpressionStatement[10454-10474]"
    }, {
      "left" : "parent.replaceChild(n, left);",
      "right" : "parent.replaceChild(n, left);",
      "info" : "ExpressionStatement[10489-10518]:ExpressionStatement[10489-10518]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[10533-10552]:ExpressionStatement[10533-10552]"
    }, {
      "left" : "return left;",
      "right" : "return left;",
      "info" : "ReturnStatement[10567-10579]:ReturnStatement[10567-10579]"
    }, {
      "left" : "double negNum = -left.getDouble();",
      "right" : "double negNum = -left.getDouble();",
      "info" : "VariableDeclarationStatement[10617-10651]:VariableDeclarationStatement[10617-10651]"
    }, {
      "left" : "Node negNumNode = Node.newNumber(negNum);",
      "right" : "Node negNumNode = Node.newNumber(negNum);",
      "info" : "VariableDeclarationStatement[10663-10704]:VariableDeclarationStatement[10663-10704]"
    }, {
      "left" : "parent.replaceChild(n, negNumNode);",
      "right" : "parent.replaceChild(n, negNumNode);",
      "info" : "ExpressionStatement[10715-10750]:ExpressionStatement[10715-10750]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[10761-10780]:ExpressionStatement[10761-10780]"
    }, {
      "left" : "return negNumNode;",
      "right" : "return negNumNode;",
      "info" : "ReturnStatement[10791-10809]:ReturnStatement[10791-10809]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10861-11076]:Block[10861-11076]"
    }, {
      "left" : "error(NEGATING_A_NON_NUMBER_ERROR, left);",
      "right" : "error(NEGATING_A_NON_NUMBER_ERROR, left);",
      "info" : "ExpressionStatement[11005-11046]:ExpressionStatement[11005-11046]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[11057-11066]:ReturnStatement[11057-11066]"
    }, {
      "left" : "case Token.BITNOT:",
      "right" : "case Token.BITNOT:",
      "info" : "SwitchCase[11083-11101]:SwitchCase[11083-11101]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[11110-11967]:TryStatement[11110-11967]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11114-11710]:Block[11114-11710]"
    }, {
      "left" : "double val = left.getDouble();",
      "right" : "double val = left.getDouble();",
      "info" : "VariableDeclarationStatement[11126-11156]:VariableDeclarationStatement[11126-11156]"
    }, {
      "left" : "if (val >= Integer.MIN_VALUE && val <= Integer.MAX_VALUE)",
      "right" : "if (val >= Integer.MIN_VALUE && val <= Integer.MAX_VALUE)",
      "info" : "IfStatement[11167-11700]:IfStatement[11167-11700]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11225-11604]:Block[11225-11604]"
    }, {
      "left" : "int intVal = (int) val;",
      "right" : "int intVal = (int) val;",
      "info" : "VariableDeclarationStatement[11239-11262]:VariableDeclarationStatement[11239-11262]"
    }, {
      "left" : "if (intVal == val)",
      "right" : "if (intVal == val)",
      "info" : "IfStatement[11275-11592]:IfStatement[11275-11592]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11294-11492]:Block[11294-11492]"
    }, {
      "left" : "Node notIntValNode = Node.newNumber(~intVal);",
      "right" : "Node notIntValNode = Node.newNumber(~intVal);",
      "info" : "VariableDeclarationStatement[11310-11355]:VariableDeclarationStatement[11310-11355]"
    }, {
      "left" : "parent.replaceChild(n, notIntValNode);",
      "right" : "parent.replaceChild(n, notIntValNode);",
      "info" : "ExpressionStatement[11370-11408]:ExpressionStatement[11370-11408]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[11423-11442]:ExpressionStatement[11423-11442]"
    }, {
      "left" : "return notIntValNode;",
      "right" : "return notIntValNode;",
      "info" : "ReturnStatement[11457-11478]:ReturnStatement[11457-11478]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11498-11592]:Block[11498-11592]"
    }, {
      "left" : "error(FRACTIONAL_BITWISE_OPERAND, left);",
      "right" : "error(FRACTIONAL_BITWISE_OPERAND, left);",
      "info" : "ExpressionStatement[11514-11554]:ExpressionStatement[11514-11554]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[11569-11578]:ReturnStatement[11569-11578]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11610-11700]:Block[11610-11700]"
    }, {
      "left" : "error(BITWISE_OPERAND_OUT_OF_RANGE, left);",
      "right" : "error(BITWISE_OPERAND_OUT_OF_RANGE, left);",
      "info" : "ExpressionStatement[11624-11666]:ExpressionStatement[11624-11666]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[11679-11688]:ReturnStatement[11679-11688]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11752-11967]:Block[11752-11967]"
    }, {
      "left" : "error(NEGATING_A_NON_NUMBER_ERROR, left);",
      "right" : "error(NEGATING_A_NON_NUMBER_ERROR, left);",
      "info" : "ExpressionStatement[11896-11937]:ExpressionStatement[11896-11937]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[11948-11957]:ReturnStatement[11948-11957]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[11976-11984]:SwitchCase[11976-11984]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[11995-12004]:ReturnStatement[11995-12004]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[12118-12125]:Modifier[12118-12125]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[12126-12130]:SimpleType[12126-12130]"
    }, {
      "left" : "tryFoldInstanceof",
      "right" : "tryFoldInstanceof",
      "info" : "SimpleName[12131-12148]:SimpleName[12131-12148]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[12149-12155]:SingleVariableDeclaration[12149-12155]"
    }, {
      "left" : "Node left",
      "right" : "Node left",
      "info" : "SingleVariableDeclaration[12157-12166]:SingleVariableDeclaration[12157-12166]"
    }, {
      "left" : "Node right",
      "right" : "Node right",
      "info" : "SingleVariableDeclaration[12168-12178]:SingleVariableDeclaration[12168-12178]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12180-12937]:Block[12180-12937]"
    }, {
      "left" : "Preconditions.checkArgument(n.getType() == Token.INSTANCEOF);",
      "right" : "Preconditions.checkArgument(n.getType() == Token.INSTANCEOF);",
      "info" : "ExpressionStatement[12186-12247]:ExpressionStatement[12186-12247]"
    }, {
      "left" : "if (NodeUtil.isLiteralValue(left, true)\n        && !mayHaveSideEffects(right))",
      "right" : "if (NodeUtil.isLiteralValue(left, true)\n        && !mayHaveSideEffects(right))",
      "info" : "IfStatement[12336-12918]:IfStatement[12336-12918]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12415-12918]:Block[12415-12918]"
    }, {
      "left" : "Node replacementNode = null;",
      "right" : "Node replacementNode = null;",
      "info" : "VariableDeclarationStatement[12424-12452]:VariableDeclarationStatement[12424-12452]"
    }, {
      "left" : "if (NodeUtil.isImmutableValue(left))",
      "right" : "if (NodeUtil.isImmutableValue(left))",
      "info" : "IfStatement[12460-12750]:IfStatement[12460-12750]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12497-12604]:Block[12497-12604]"
    }, {
      "left" : "replacementNode = new Node(Token.FALSE);",
      "right" : "replacementNode = new Node(Token.FALSE);",
      "info" : "ExpressionStatement[12556-12596]:ExpressionStatement[12556-12596]"
    }, {
      "left" : "if (right.getType() == Token.NAME\n          && \"Object\".equals(right.getString()))",
      "right" : "if (right.getType() == Token.NAME\n          && \"Object\".equals(right.getString()))",
      "info" : "IfStatement[12610-12750]:IfStatement[12610-12750]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12693-12750]:Block[12693-12750]"
    }, {
      "left" : "replacementNode = new Node(Token.TRUE);",
      "right" : "replacementNode = new Node(Token.TRUE);",
      "info" : "ExpressionStatement[12703-12742]:ExpressionStatement[12703-12742]"
    }, {
      "left" : "if (replacementNode != null)",
      "right" : "if (replacementNode != null)",
      "info" : "IfStatement[12758-12912]:IfStatement[12758-12912]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12787-12912]:Block[12787-12912]"
    }, {
      "left" : "n.getParent().replaceChild(n, replacementNode);",
      "right" : "n.getParent().replaceChild(n, replacementNode);",
      "info" : "ExpressionStatement[12797-12844]:ExpressionStatement[12797-12844]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[12853-12872]:ExpressionStatement[12853-12872]"
    }, {
      "left" : "return replacementNode;",
      "right" : "return replacementNode;",
      "info" : "ReturnStatement[12881-12904]:ReturnStatement[12881-12904]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[12924-12933]:ReturnStatement[12924-12933]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[12941-12948]:Modifier[12941-12948]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[12949-12953]:SimpleType[12949-12953]"
    }, {
      "left" : "tryFoldAssign",
      "right" : "tryFoldAssign",
      "info" : "SimpleName[12954-12967]:SimpleName[12954-12967]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[12968-12974]:SingleVariableDeclaration[12968-12974]"
    }, {
      "left" : "Node left",
      "right" : "Node left",
      "info" : "SingleVariableDeclaration[12976-12985]:SingleVariableDeclaration[12976-12985]"
    }, {
      "left" : "Node right",
      "right" : "Node right",
      "info" : "SingleVariableDeclaration[12987-12997]:SingleVariableDeclaration[12987-12997]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12999-14757]:Block[12999-14757]"
    }, {
      "left" : "Preconditions.checkArgument(n.getType() == Token.ASSIGN);",
      "right" : "Preconditions.checkArgument(n.getType() == Token.ASSIGN);",
      "info" : "ExpressionStatement[13005-13062]:ExpressionStatement[13005-13062]"
    }, {
      "left" : "if (!right.hasChildren() ||\n        right.getFirstChild().getNext() != right.getLastChild())",
      "right" : "if (!right.hasChildren() ||\n        right.getFirstChild().getNext() != right.getLastChild())",
      "info" : "IfStatement[13113-13266]:IfStatement[13113-13266]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13206-13266]:Block[13206-13266]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[13251-13260]:ReturnStatement[13251-13260]"
    }, {
      "left" : "if (mayHaveSideEffects(left))",
      "right" : "if (mayHaveSideEffects(left))",
      "info" : "IfStatement[13272-13325]:IfStatement[13272-13325]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13302-13325]:Block[13302-13325]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[13310-13319]:ReturnStatement[13310-13319]"
    }, {
      "left" : "Node newRight;",
      "right" : "Node newRight;",
      "info" : "VariableDeclarationStatement[13331-13345]:VariableDeclarationStatement[13331-13345]"
    }, {
      "left" : "if (areNodesEqualForInlining(left, right.getFirstChild()))",
      "right" : "if (areNodesEqualForInlining(left, right.getFirstChild()))",
      "info" : "IfStatement[13350-13648]:IfStatement[13350-13648]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13409-13455]:Block[13409-13455]"
    }, {
      "left" : "newRight = right.getLastChild();",
      "right" : "newRight = right.getLastChild();",
      "info" : "ExpressionStatement[13417-13449]:ExpressionStatement[13417-13449]"
    }, {
      "left" : "if (NodeUtil.isCommutative(right.getType()) &&\n          areNodesEqualForInlining(left, right.getLastChild()))",
      "right" : "if (NodeUtil.isCommutative(right.getType()) &&\n          areNodesEqualForInlining(left, right.getLastChild()))",
      "info" : "IfStatement[13461-13648]:IfStatement[13461-13648]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13572-13619]:Block[13572-13619]"
    }, {
      "left" : "newRight = right.getFirstChild();",
      "right" : "newRight = right.getFirstChild();",
      "info" : "ExpressionStatement[13580-13613]:ExpressionStatement[13580-13613]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13625-13648]:Block[13625-13648]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[13633-13642]:ReturnStatement[13633-13642]"
    }, {
      "left" : "int newType = -1;",
      "right" : "int newType = -1;",
      "info" : "VariableDeclarationStatement[13654-13671]:VariableDeclarationStatement[13654-13671]"
    }, {
      "left" : "switch (right.getType()) {\n      case Token.ADD:\n        newType = Token.ASSIGN_ADD;\n        break;\n      case Token.BITAND:\n        newType = Token.ASSIGN_BITAND;\n        break;\n      case Token.BITOR:\n        newType = Token.ASSIGN_BITOR;\n        break;\n      case Token.BITXOR:\n        newType = Token.ASSIGN_BITXOR;\n        break;\n      case Token.DIV:\n        newType = Token.ASSIGN_DIV;\n        break;\n      case Token.LSH:\n        newType = Token.ASSIGN_LSH;\n        break;\n      case Token.MOD:\n        newType = Token.ASSIGN_MOD;\n        break;\n      case Token.MUL:\n        newType = Token.ASSIGN_MUL;\n        break;\n      case Token.RSH:\n        newType = Token.ASSIGN_RSH;\n        break;\n      case Token.SUB:\n        newType = Token.ASSIGN_SUB;\n        break;\n      case Token.URSH:\n        newType = Token.ASSIGN_URSH;\n        break;\n      default:\n        return n;\n    }",
      "right" : "switch (right.getType()) {\n      case Token.ADD:\n        newType = Token.ASSIGN_ADD;\n        break;\n      case Token.BITAND:\n        newType = Token.ASSIGN_BITAND;\n        break;\n      case Token.BITOR:\n        newType = Token.ASSIGN_BITOR;\n        break;\n      case Token.BITXOR:\n        newType = Token.ASSIGN_BITXOR;\n        break;\n      case Token.DIV:\n        newType = Token.ASSIGN_DIV;\n        break;\n      case Token.LSH:\n        newType = Token.ASSIGN_LSH;\n        break;\n      case Token.MOD:\n        newType = Token.ASSIGN_MOD;\n        break;\n      case Token.MUL:\n        newType = Token.ASSIGN_MUL;\n        break;\n      case Token.RSH:\n        newType = Token.ASSIGN_RSH;\n        break;\n      case Token.SUB:\n        newType = Token.ASSIGN_SUB;\n        break;\n      case Token.URSH:\n        newType = Token.ASSIGN_URSH;\n        break;\n      default:\n        return n;\n    }",
      "info" : "SwitchStatement[13676-14562]:SwitchStatement[13676-14562]"
    }, {
      "left" : "case Token.ADD:",
      "right" : "case Token.ADD:",
      "info" : "SwitchCase[13709-13724]:SwitchCase[13709-13724]"
    }, {
      "left" : "newType = Token.ASSIGN_ADD;",
      "right" : "newType = Token.ASSIGN_ADD;",
      "info" : "ExpressionStatement[13733-13760]:ExpressionStatement[13733-13760]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13769-13775]:BreakStatement[13769-13775]"
    }, {
      "left" : "case Token.BITAND:",
      "right" : "case Token.BITAND:",
      "info" : "SwitchCase[13782-13800]:SwitchCase[13782-13800]"
    }, {
      "left" : "newType = Token.ASSIGN_BITAND;",
      "right" : "newType = Token.ASSIGN_BITAND;",
      "info" : "ExpressionStatement[13809-13839]:ExpressionStatement[13809-13839]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13848-13854]:BreakStatement[13848-13854]"
    }, {
      "left" : "case Token.BITOR:",
      "right" : "case Token.BITOR:",
      "info" : "SwitchCase[13861-13878]:SwitchCase[13861-13878]"
    }, {
      "left" : "newType = Token.ASSIGN_BITOR;",
      "right" : "newType = Token.ASSIGN_BITOR;",
      "info" : "ExpressionStatement[13887-13916]:ExpressionStatement[13887-13916]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13925-13931]:BreakStatement[13925-13931]"
    }, {
      "left" : "case Token.BITXOR:",
      "right" : "case Token.BITXOR:",
      "info" : "SwitchCase[13938-13956]:SwitchCase[13938-13956]"
    }, {
      "left" : "newType = Token.ASSIGN_BITXOR;",
      "right" : "newType = Token.ASSIGN_BITXOR;",
      "info" : "ExpressionStatement[13965-13995]:ExpressionStatement[13965-13995]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[14004-14010]:BreakStatement[14004-14010]"
    }, {
      "left" : "case Token.DIV:",
      "right" : "case Token.DIV:",
      "info" : "SwitchCase[14017-14032]:SwitchCase[14017-14032]"
    }, {
      "left" : "newType = Token.ASSIGN_DIV;",
      "right" : "newType = Token.ASSIGN_DIV;",
      "info" : "ExpressionStatement[14041-14068]:ExpressionStatement[14041-14068]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[14077-14083]:BreakStatement[14077-14083]"
    }, {
      "left" : "case Token.LSH:",
      "right" : "case Token.LSH:",
      "info" : "SwitchCase[14090-14105]:SwitchCase[14090-14105]"
    }, {
      "left" : "newType = Token.ASSIGN_LSH;",
      "right" : "newType = Token.ASSIGN_LSH;",
      "info" : "ExpressionStatement[14114-14141]:ExpressionStatement[14114-14141]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[14150-14156]:BreakStatement[14150-14156]"
    }, {
      "left" : "case Token.MOD:",
      "right" : "case Token.MOD:",
      "info" : "SwitchCase[14163-14178]:SwitchCase[14163-14178]"
    }, {
      "left" : "newType = Token.ASSIGN_MOD;",
      "right" : "newType = Token.ASSIGN_MOD;",
      "info" : "ExpressionStatement[14187-14214]:ExpressionStatement[14187-14214]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[14223-14229]:BreakStatement[14223-14229]"
    }, {
      "left" : "case Token.MUL:",
      "right" : "case Token.MUL:",
      "info" : "SwitchCase[14236-14251]:SwitchCase[14236-14251]"
    }, {
      "left" : "newType = Token.ASSIGN_MUL;",
      "right" : "newType = Token.ASSIGN_MUL;",
      "info" : "ExpressionStatement[14260-14287]:ExpressionStatement[14260-14287]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[14296-14302]:BreakStatement[14296-14302]"
    }, {
      "left" : "case Token.RSH:",
      "right" : "case Token.RSH:",
      "info" : "SwitchCase[14309-14324]:SwitchCase[14309-14324]"
    }, {
      "left" : "newType = Token.ASSIGN_RSH;",
      "right" : "newType = Token.ASSIGN_RSH;",
      "info" : "ExpressionStatement[14333-14360]:ExpressionStatement[14333-14360]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[14369-14375]:BreakStatement[14369-14375]"
    }, {
      "left" : "case Token.SUB:",
      "right" : "case Token.SUB:",
      "info" : "SwitchCase[14382-14397]:SwitchCase[14382-14397]"
    }, {
      "left" : "newType = Token.ASSIGN_SUB;",
      "right" : "newType = Token.ASSIGN_SUB;",
      "info" : "ExpressionStatement[14406-14433]:ExpressionStatement[14406-14433]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[14442-14448]:BreakStatement[14442-14448]"
    }, {
      "left" : "case Token.URSH:",
      "right" : "case Token.URSH:",
      "info" : "SwitchCase[14455-14471]:SwitchCase[14455-14471]"
    }, {
      "left" : "newType = Token.ASSIGN_URSH;",
      "right" : "newType = Token.ASSIGN_URSH;",
      "info" : "ExpressionStatement[14480-14508]:ExpressionStatement[14480-14508]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[14517-14523]:BreakStatement[14517-14523]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[14530-14538]:SwitchCase[14530-14538]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[14547-14556]:ReturnStatement[14547-14556]"
    }, {
      "left" : "Node newNode = new Node(newType,\n        left.detachFromParent(), newRight.detachFromParent());",
      "right" : "Node newNode = new Node(newType,\n        left.detachFromParent(), newRight.detachFromParent());",
      "info" : "VariableDeclarationStatement[14568-14663]:VariableDeclarationStatement[14568-14663]"
    }, {
      "left" : "n.getParent().replaceChild(n, newNode);",
      "right" : "n.getParent().replaceChild(n, newNode);",
      "info" : "ExpressionStatement[14668-14707]:ExpressionStatement[14668-14707]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[14713-14732]:ExpressionStatement[14713-14732]"
    }, {
      "left" : "return newNode;",
      "right" : "return newNode;",
      "info" : "ReturnStatement[14738-14753]:ReturnStatement[14738-14753]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[14805-14812]:Modifier[14805-14812]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[14813-14817]:SimpleType[14813-14817]"
    }, {
      "left" : "tryFoldAndOr",
      "right" : "tryFoldAndOr",
      "info" : "SimpleName[14818-14830]:SimpleName[14818-14830]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[14831-14837]:SingleVariableDeclaration[14831-14837]"
    }, {
      "left" : "Node left",
      "right" : "Node left",
      "info" : "SingleVariableDeclaration[14839-14848]:SingleVariableDeclaration[14839-14848]"
    }, {
      "left" : "Node right",
      "right" : "Node right",
      "info" : "SingleVariableDeclaration[14850-14860]:SingleVariableDeclaration[14850-14860]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14862-15708]:Block[14862-15708]"
    }, {
      "left" : "Node parent = n.getParent();",
      "right" : "Node parent = n.getParent();",
      "info" : "VariableDeclarationStatement[14868-14896]:VariableDeclarationStatement[14868-14896]"
    }, {
      "left" : "Node result = null;",
      "right" : "Node result = null;",
      "info" : "VariableDeclarationStatement[14902-14921]:VariableDeclarationStatement[14902-14921]"
    }, {
      "left" : "int type = n.getType();",
      "right" : "int type = n.getType();",
      "info" : "VariableDeclarationStatement[14927-14950]:VariableDeclarationStatement[14927-14950]"
    }, {
      "left" : "TernaryValue leftVal = NodeUtil.getBooleanValue(left);",
      "right" : "TernaryValue leftVal = NodeUtil.getBooleanValue(left);",
      "info" : "VariableDeclarationStatement[14956-15010]:VariableDeclarationStatement[14956-15010]"
    }, {
      "left" : "if (leftVal != TernaryValue.UNKNOWN)",
      "right" : "if (leftVal != TernaryValue.UNKNOWN)",
      "info" : "IfStatement[15016-15395]:IfStatement[15016-15395]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15053-15395]:Block[15053-15395]"
    }, {
      "left" : "boolean lval = leftVal.toBoolean(true);",
      "right" : "boolean lval = leftVal.toBoolean(true);",
      "info" : "VariableDeclarationStatement[15061-15100]:VariableDeclarationStatement[15061-15100]"
    }, {
      "left" : "if (lval && type == Token.OR ||\n          !lval && type == Token.AND)",
      "right" : "if (lval && type == Token.OR ||\n          !lval && type == Token.AND)",
      "info" : "IfStatement[15190-15389]:IfStatement[15190-15389]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15260-15293]:Block[15260-15293]"
    }, {
      "left" : "result = left;",
      "right" : "result = left;",
      "info" : "ExpressionStatement[15270-15284]:ExpressionStatement[15270-15284]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15299-15389]:Block[15299-15389]"
    }, {
      "left" : "result = right;",
      "right" : "result = right;",
      "info" : "ExpressionStatement[15366-15381]:ExpressionStatement[15366-15381]"
    }, {
      "left" : "if (result != null)",
      "right" : "if (result != null)",
      "info" : "IfStatement[15515-15704]:IfStatement[15515-15704]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15535-15675]:Block[15535-15675]"
    }, {
      "left" : "n.removeChild(result);",
      "right" : "n.removeChild(result);",
      "info" : "ExpressionStatement[15561-15583]:ExpressionStatement[15561-15583]"
    }, {
      "left" : "parent.replaceChild(n, result);",
      "right" : "parent.replaceChild(n, result);",
      "info" : "ExpressionStatement[15590-15621]:ExpressionStatement[15590-15621]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[15628-15647]:ExpressionStatement[15628-15647]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[15655-15669]:ReturnStatement[15655-15669]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15681-15704]:Block[15681-15704]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[15689-15698]:ReturnStatement[15689-15698]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[16137-16144]:Modifier[16137-16144]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[16145-16149]:SimpleType[16145-16149]"
    }, {
      "left" : "tryFoldChildAddString",
      "right" : "tryFoldChildAddString",
      "info" : "SimpleName[16150-16171]:SimpleName[16150-16171]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[16172-16178]:SingleVariableDeclaration[16172-16178]"
    }, {
      "left" : "Node left",
      "right" : "Node left",
      "info" : "SingleVariableDeclaration[16180-16189]:SingleVariableDeclaration[16180-16189]"
    }, {
      "left" : "Node right",
      "right" : "Node right",
      "info" : "SingleVariableDeclaration[16191-16201]:SingleVariableDeclaration[16191-16201]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16203-17938]:Block[16203-17938]"
    }, {
      "left" : "if (NodeUtil.isLiteralValue(right, false) &&\n        left.getType() == Token.ADD)",
      "right" : "if (NodeUtil.isLiteralValue(right, false) &&\n        left.getType() == Token.ADD)",
      "info" : "IfStatement[16210-17057]:IfStatement[16210-17057]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16292-17057]:Block[16292-17057]"
    }, {
      "left" : "Node ll = left.getFirstChild();",
      "right" : "Node ll = left.getFirstChild();",
      "info" : "VariableDeclarationStatement[16301-16332]:VariableDeclarationStatement[16301-16332]"
    }, {
      "left" : "Node lr = ll.getNext();",
      "right" : "Node lr = ll.getNext();",
      "info" : "VariableDeclarationStatement[16339-16362]:VariableDeclarationStatement[16339-16362]"
    }, {
      "left" : "if (lr.getType() == Token.STRING)",
      "right" : "if (lr.getType() == Token.STRING)",
      "info" : "IfStatement[16596-17051]:IfStatement[16596-17051]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16630-17051]:Block[16630-17051]"
    }, {
      "left" : "String leftString = NodeUtil.getStringValue(lr);",
      "right" : "String leftString = NodeUtil.getStringValue(lr);",
      "info" : "VariableDeclarationStatement[16640-16688]:VariableDeclarationStatement[16640-16688]"
    }, {
      "left" : "String rightString = NodeUtil.getStringValue(right);",
      "right" : "String rightString = NodeUtil.getStringValue(right);",
      "info" : "VariableDeclarationStatement[16697-16749]:VariableDeclarationStatement[16697-16749]"
    }, {
      "left" : "if (leftString != null && rightString != null)",
      "right" : "if (leftString != null && rightString != null)",
      "info" : "IfStatement[16758-17043]:IfStatement[16758-17043]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16805-17043]:Block[16805-17043]"
    }, {
      "left" : "left.removeChild(ll);",
      "right" : "left.removeChild(ll);",
      "info" : "ExpressionStatement[16817-16838]:ExpressionStatement[16817-16838]"
    }, {
      "left" : "String result = leftString + rightString;",
      "right" : "String result = leftString + rightString;",
      "info" : "VariableDeclarationStatement[16849-16890]:VariableDeclarationStatement[16849-16890]"
    }, {
      "left" : "n.replaceChild(left, ll);",
      "right" : "n.replaceChild(left, ll);",
      "info" : "ExpressionStatement[16901-16926]:ExpressionStatement[16901-16926]"
    }, {
      "left" : "n.replaceChild(right, Node.newString(result));",
      "right" : "n.replaceChild(right, Node.newString(result));",
      "info" : "ExpressionStatement[16937-16983]:ExpressionStatement[16937-16983]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[16994-17013]:ExpressionStatement[16994-17013]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[17024-17033]:ReturnStatement[17024-17033]"
    }, {
      "left" : "if (NodeUtil.isLiteralValue(left, false) &&\n        right.getType() == Token.ADD)",
      "right" : "if (NodeUtil.isLiteralValue(left, false) &&\n        right.getType() == Token.ADD)",
      "info" : "IfStatement[17063-17919]:IfStatement[17063-17919]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17145-17919]:Block[17145-17919]"
    }, {
      "left" : "Node rl = right.getFirstChild();",
      "right" : "Node rl = right.getFirstChild();",
      "info" : "VariableDeclarationStatement[17154-17186]:VariableDeclarationStatement[17154-17186]"
    }, {
      "left" : "Node rr = right.getLastChild();",
      "right" : "Node rr = right.getLastChild();",
      "info" : "VariableDeclarationStatement[17193-17224]:VariableDeclarationStatement[17193-17224]"
    }, {
      "left" : "if (rl.getType() == Token.STRING)",
      "right" : "if (rl.getType() == Token.STRING)",
      "info" : "IfStatement[17458-17913]:IfStatement[17458-17913]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17492-17913]:Block[17492-17913]"
    }, {
      "left" : "String leftString = NodeUtil.getStringValue(left);",
      "right" : "String leftString = NodeUtil.getStringValue(left);",
      "info" : "VariableDeclarationStatement[17502-17552]:VariableDeclarationStatement[17502-17552]"
    }, {
      "left" : "String rightString = NodeUtil.getStringValue(rl);",
      "right" : "String rightString = NodeUtil.getStringValue(rl);",
      "info" : "VariableDeclarationStatement[17561-17610]:VariableDeclarationStatement[17561-17610]"
    }, {
      "left" : "if (leftString != null && rightString != null)",
      "right" : "if (leftString != null && rightString != null)",
      "info" : "IfStatement[17619-17905]:IfStatement[17619-17905]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17666-17905]:Block[17666-17905]"
    }, {
      "left" : "right.removeChild(rr);",
      "right" : "right.removeChild(rr);",
      "info" : "ExpressionStatement[17678-17700]:ExpressionStatement[17678-17700]"
    }, {
      "left" : "String result = leftString + rightString;",
      "right" : "String result = leftString + rightString;",
      "info" : "VariableDeclarationStatement[17711-17752]:VariableDeclarationStatement[17711-17752]"
    }, {
      "left" : "n.replaceChild(right, rr);",
      "right" : "n.replaceChild(right, rr);",
      "info" : "ExpressionStatement[17763-17789]:ExpressionStatement[17763-17789]"
    }, {
      "left" : "n.replaceChild(left, Node.newString(result));",
      "right" : "n.replaceChild(left, Node.newString(result));",
      "info" : "ExpressionStatement[17800-17845]:ExpressionStatement[17800-17845]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[17856-17875]:ExpressionStatement[17856-17875]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[17886-17895]:ReturnStatement[17886-17895]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[17925-17934]:ReturnStatement[17925-17934]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[18006-18013]:Modifier[18006-18013]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[18014-18018]:SimpleType[18014-18018]"
    }, {
      "left" : "tryFoldAddConstantString",
      "right" : "tryFoldAddConstantString",
      "info" : "SimpleName[18019-18043]:SimpleName[18019-18043]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[18044-18050]:SingleVariableDeclaration[18044-18050]"
    }, {
      "left" : "Node left",
      "right" : "Node left",
      "info" : "SingleVariableDeclaration[18052-18061]:SingleVariableDeclaration[18052-18061]"
    }, {
      "left" : "Node right",
      "right" : "Node right",
      "info" : "SingleVariableDeclaration[18063-18073]:SingleVariableDeclaration[18063-18073]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18075-18572]:Block[18075-18572]"
    }, {
      "left" : "if (left.getType() == Token.STRING ||\n        right.getType() == Token.STRING)",
      "right" : "if (left.getType() == Token.STRING ||\n        right.getType() == Token.STRING)",
      "info" : "IfStatement[18081-18551]:IfStatement[18081-18551]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18160-18551]:Block[18160-18551]"
    }, {
      "left" : "String leftString = NodeUtil.getStringValue(left);",
      "right" : "String leftString = NodeUtil.getStringValue(left);",
      "info" : "VariableDeclarationStatement[18190-18240]:VariableDeclarationStatement[18190-18240]"
    }, {
      "left" : "String rightString = NodeUtil.getStringValue(right);",
      "right" : "String rightString = NodeUtil.getStringValue(right);",
      "info" : "VariableDeclarationStatement[18247-18299]:VariableDeclarationStatement[18247-18299]"
    }, {
      "left" : "if (leftString != null && rightString != null)",
      "right" : "if (leftString != null && rightString != null)",
      "info" : "IfStatement[18306-18545]:IfStatement[18306-18545]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18353-18545]:Block[18353-18545]"
    }, {
      "left" : "Node newStringNode = Node.newString(leftString + rightString);",
      "right" : "Node newStringNode = Node.newString(leftString + rightString);",
      "info" : "VariableDeclarationStatement[18363-18425]:VariableDeclarationStatement[18363-18425]"
    }, {
      "left" : "n.getParent().replaceChild(n, newStringNode);",
      "right" : "n.getParent().replaceChild(n, newStringNode);",
      "info" : "ExpressionStatement[18434-18479]:ExpressionStatement[18434-18479]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[18488-18507]:ExpressionStatement[18488-18507]"
    }, {
      "left" : "return newStringNode;",
      "right" : "return newStringNode;",
      "info" : "ReturnStatement[18516-18537]:ReturnStatement[18516-18537]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[18559-18568]:ReturnStatement[18559-18568]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[18633-18640]:Modifier[18633-18640]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[18641-18645]:SimpleType[18641-18645]"
    }, {
      "left" : "tryFoldArithmeticOp",
      "right" : "tryFoldArithmeticOp",
      "info" : "SimpleName[18646-18665]:SimpleName[18646-18665]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[18666-18672]:SingleVariableDeclaration[18666-18672]"
    }, {
      "left" : "Node left",
      "right" : "Node left",
      "info" : "SingleVariableDeclaration[18674-18683]:SingleVariableDeclaration[18674-18683]"
    }, {
      "left" : "Node right",
      "right" : "Node right",
      "info" : "SingleVariableDeclaration[18685-18695]:SingleVariableDeclaration[18685-18695]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18697-18949]:Block[18697-18949]"
    }, {
      "left" : "Node result = performArithmeticOp(n.getType(), left, right);",
      "right" : "Node result = performArithmeticOp(n.getType(), left, right);",
      "info" : "VariableDeclarationStatement[18703-18763]:VariableDeclarationStatement[18703-18763]"
    }, {
      "left" : "if (result != null)",
      "right" : "if (result != null)",
      "info" : "IfStatement[18768-18931]:IfStatement[18768-18931]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18788-18931]:Block[18788-18931]"
    }, {
      "left" : "result.copyInformationFromForTree(n);",
      "right" : "result.copyInformationFromForTree(n);",
      "info" : "ExpressionStatement[18796-18833]:ExpressionStatement[18796-18833]"
    }, {
      "left" : "n.getParent().replaceChild(n, result);",
      "right" : "n.getParent().replaceChild(n, result);",
      "info" : "ExpressionStatement[18840-18878]:ExpressionStatement[18840-18878]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[18885-18904]:ExpressionStatement[18885-18904]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[18911-18925]:ReturnStatement[18911-18925]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[18936-18945]:ReturnStatement[18936-18945]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[19010-19017]:Modifier[19010-19017]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[19018-19022]:SimpleType[19018-19022]"
    }, {
      "left" : "performArithmeticOp",
      "right" : "performArithmeticOp",
      "info" : "SimpleName[19023-19042]:SimpleName[19023-19042]"
    }, {
      "left" : "int opType",
      "right" : "int opType",
      "info" : "SingleVariableDeclaration[19043-19053]:SingleVariableDeclaration[19043-19053]"
    }, {
      "left" : "Node left",
      "right" : "Node left",
      "info" : "SingleVariableDeclaration[19055-19064]:SingleVariableDeclaration[19055-19064]"
    }, {
      "left" : "Node right",
      "right" : "Node right",
      "info" : "SingleVariableDeclaration[19066-19076]:SingleVariableDeclaration[19066-19076]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19078-21678]:Block[19078-21506]"
    }, {
      "left" : "if (opType == Token.ADD\n        && (NodeUtil.mayBeString(left, false)\n            || NodeUtil.mayBeString(right, false)))",
      "right" : "if (opType == Token.ADD\n        && (NodeUtil.mayBeString(left, false)\n            || NodeUtil.mayBeString(right, false)))",
      "info" : "IfStatement[19172-19320]:IfStatement[19172-19320]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19294-19320]:Block[19294-19320]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[19302-19314]:ReturnStatement[19302-19314]"
    }, {
      "left" : "double result;",
      "right" : "double result;",
      "info" : "VariableDeclarationStatement[19326-19340]:VariableDeclarationStatement[19326-19340]"
    }, {
      "left" : "Double lValObj = NodeUtil.getNumberValue(left);",
      "right" : "Double lValObj = NodeUtil.getNumberValue(left);",
      "info" : "VariableDeclarationStatement[19469-19516]:VariableDeclarationStatement[19469-19516]"
    }, {
      "left" : "if (lValObj == null)",
      "right" : "if (lValObj == null)",
      "info" : "IfStatement[19521-19568]:IfStatement[19521-19568]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19542-19568]:Block[19542-19568]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[19550-19562]:ReturnStatement[19550-19562]"
    }, {
      "left" : "Double rValObj = NodeUtil.getNumberValue(right);",
      "right" : "Double rValObj = NodeUtil.getNumberValue(right);",
      "info" : "VariableDeclarationStatement[19573-19621]:VariableDeclarationStatement[19573-19621]"
    }, {
      "left" : "if (rValObj == null)",
      "right" : "if (rValObj == null)",
      "info" : "IfStatement[19626-19673]:IfStatement[19626-19673]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19647-19673]:Block[19647-19673]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[19655-19667]:ReturnStatement[19655-19667]"
    }, {
      "left" : "double lval = lValObj;",
      "right" : "double lval = lValObj;",
      "info" : "VariableDeclarationStatement[19679-19701]:VariableDeclarationStatement[19679-19701]"
    }, {
      "left" : "double rval = rValObj;",
      "right" : "double rval = rValObj;",
      "info" : "VariableDeclarationStatement[19706-19728]:VariableDeclarationStatement[19706-19728]"
    }, {
      "left" : "switch (opType) {\n      case Token.BITAND:\n        result = ScriptRuntime.toInt32(lval) & ScriptRuntime.toInt32(rval);\n        break;\n      case Token.BITOR:\n        result = ScriptRuntime.toInt32(lval) | ScriptRuntime.toInt32(rval);\n        break;\n      case Token.BITXOR:\n        result = ScriptRuntime.toInt32(lval) ^ ScriptRuntime.toInt32(rval);\n        break;\n      case Token.ADD:\n        result = lval + rval;\n        break;\n      case Token.SUB:\n        result = lval - rval;\n        break;\n      case Token.MUL:\n        result = lval * rval;\n        break;\n      case Token.MOD:\n        if (rval == 0) {\n          error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\", \"Divide by 0\"), right);\n          return null;\n        }\n        result = lval % rval;\n        break;\n      case Token.DIV:\n        if (rval == 0) {\n          error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\", \"Divide by 0\"), right);\n          return null;\n        }\n        result = lval / rval;\n        break;\n      default:\n        throw new Error(\"Unexpected arithmetic operator\");\n    }",
      "right" : "switch (opType) {\n      case Token.BITAND:\n        result = ScriptRuntime.toInt32(lval) & ScriptRuntime.toInt32(rval);\n        break;\n      case Token.BITOR:\n        result = ScriptRuntime.toInt32(lval) | ScriptRuntime.toInt32(rval);\n        break;\n      case Token.BITXOR:\n        result = ScriptRuntime.toInt32(lval) ^ ScriptRuntime.toInt32(rval);\n        break;\n      case Token.ADD:\n        result = lval + rval;\n        break;\n      case Token.SUB:\n        result = lval - rval;\n        break;\n      case Token.MUL:\n        result = lval * rval;\n        break;\n      case Token.MOD:\n        if (rval == 0) {\n          return null;\n        }\n        result = lval % rval;\n        break;\n      case Token.DIV:\n        if (rval == 0) {\n          return null;\n        }\n        result = lval / rval;\n        break;\n      default:\n        throw new Error(\"Unexpected arithmetic operator\");\n    }",
      "info" : "SwitchStatement[19734-20801]:SwitchStatement[19734-20629]"
    }, {
      "left" : "case Token.BITAND:",
      "right" : "case Token.BITAND:",
      "info" : "SwitchCase[19758-19776]:SwitchCase[19758-19776]"
    }, {
      "left" : "result = ScriptRuntime.toInt32(lval) & ScriptRuntime.toInt32(rval);",
      "right" : "result = ScriptRuntime.toInt32(lval) & ScriptRuntime.toInt32(rval);",
      "info" : "ExpressionStatement[19785-19852]:ExpressionStatement[19785-19852]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[19861-19867]:BreakStatement[19861-19867]"
    }, {
      "left" : "case Token.BITOR:",
      "right" : "case Token.BITOR:",
      "info" : "SwitchCase[19874-19891]:SwitchCase[19874-19891]"
    }, {
      "left" : "result = ScriptRuntime.toInt32(lval) | ScriptRuntime.toInt32(rval);",
      "right" : "result = ScriptRuntime.toInt32(lval) | ScriptRuntime.toInt32(rval);",
      "info" : "ExpressionStatement[19900-19967]:ExpressionStatement[19900-19967]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[19976-19982]:BreakStatement[19976-19982]"
    }, {
      "left" : "case Token.BITXOR:",
      "right" : "case Token.BITXOR:",
      "info" : "SwitchCase[19989-20007]:SwitchCase[19989-20007]"
    }, {
      "left" : "result = ScriptRuntime.toInt32(lval) ^ ScriptRuntime.toInt32(rval);",
      "right" : "result = ScriptRuntime.toInt32(lval) ^ ScriptRuntime.toInt32(rval);",
      "info" : "ExpressionStatement[20016-20083]:ExpressionStatement[20016-20083]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[20092-20098]:BreakStatement[20092-20098]"
    }, {
      "left" : "case Token.ADD:",
      "right" : "case Token.ADD:",
      "info" : "SwitchCase[20105-20120]:SwitchCase[20105-20120]"
    }, {
      "left" : "result = lval + rval;",
      "right" : "result = lval + rval;",
      "info" : "ExpressionStatement[20129-20150]:ExpressionStatement[20129-20150]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[20159-20165]:BreakStatement[20159-20165]"
    }, {
      "left" : "case Token.SUB:",
      "right" : "case Token.SUB:",
      "info" : "SwitchCase[20172-20187]:SwitchCase[20172-20187]"
    }, {
      "left" : "result = lval - rval;",
      "right" : "result = lval - rval;",
      "info" : "ExpressionStatement[20196-20217]:ExpressionStatement[20196-20217]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[20226-20232]:BreakStatement[20226-20232]"
    }, {
      "left" : "case Token.MUL:",
      "right" : "case Token.MUL:",
      "info" : "SwitchCase[20239-20254]:SwitchCase[20239-20254]"
    }, {
      "left" : "result = lval * rval;",
      "right" : "result = lval * rval;",
      "info" : "ExpressionStatement[20263-20284]:ExpressionStatement[20263-20284]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[20293-20299]:BreakStatement[20293-20299]"
    }, {
      "left" : "case Token.MOD:",
      "right" : "case Token.MOD:",
      "info" : "SwitchCase[20306-20321]:SwitchCase[20306-20321]"
    }, {
      "left" : "if (rval == 0)",
      "right" : "if (rval == 0)",
      "info" : "IfStatement[20330-20465]:IfStatement[20330-20379]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20345-20465]:Block[20345-20379]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[20443-20455]:ReturnStatement[20357-20369]"
    }, {
      "left" : "result = lval % rval;",
      "right" : "result = lval % rval;",
      "info" : "ExpressionStatement[20474-20495]:ExpressionStatement[20388-20409]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[20504-20510]:BreakStatement[20418-20424]"
    }, {
      "left" : "case Token.DIV:",
      "right" : "case Token.DIV:",
      "info" : "SwitchCase[20517-20532]:SwitchCase[20431-20446]"
    }, {
      "left" : "if (rval == 0)",
      "right" : "if (rval == 0)",
      "info" : "IfStatement[20541-20676]:IfStatement[20455-20504]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20556-20676]:Block[20470-20504]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[20654-20666]:ReturnStatement[20482-20494]"
    }, {
      "left" : "result = lval / rval;",
      "right" : "result = lval / rval;",
      "info" : "ExpressionStatement[20685-20706]:ExpressionStatement[20513-20534]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[20715-20721]:BreakStatement[20543-20549]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[20728-20736]:SwitchCase[20556-20564]"
    }, {
      "left" : "throw new Error(\"Unexpected arithmetic operator\");",
      "right" : "throw new Error(\"Unexpected arithmetic operator\");",
      "info" : "ThrowStatement[20745-20795]:ThrowStatement[20573-20623]"
    }, {
      "left" : "if (String.valueOf(result).length() <=\n        String.valueOf(lval).length() + String.valueOf(rval).length() + 1 &&\n\n        // Do not try to fold arithmetic for numbers > 2^53. After that\n        // point, fixed-point math starts to break down and become inaccurate.\n        Math.abs(result) <= MAX_FOLD_NUMBER)",
      "right" : "if (String.valueOf(result).length() <=\n        String.valueOf(lval).length() + String.valueOf(rval).length() + 1 &&\n\n        // Do not try to fold arithmetic for numbers > 2^53. After that\n        // point, fixed-point math starts to break down and become inaccurate.\n        Math.abs(result) <= MAX_FOLD_NUMBER)",
      "info" : "IfStatement[20945-21656]:IfStatement[20773-21484]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21258-21336]:Block[21086-21164]"
    }, {
      "left" : "Node newNumber = Node.newNumber(result);",
      "right" : "Node newNumber = Node.newNumber(result);",
      "info" : "VariableDeclarationStatement[21266-21306]:VariableDeclarationStatement[21094-21134]"
    }, {
      "left" : "return newNumber;",
      "right" : "return newNumber;",
      "info" : "ReturnStatement[21313-21330]:ReturnStatement[21141-21158]"
    }, {
      "left" : "if (Double.isNaN(result))",
      "right" : "if (Double.isNaN(result))",
      "info" : "IfStatement[21342-21656]:IfStatement[21170-21484]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21368-21423]:Block[21196-21251]"
    }, {
      "left" : "return Node.newString(Token.NAME, \"NaN\");",
      "right" : "return Node.newString(Token.NAME, \"NaN\");",
      "info" : "ReturnStatement[21376-21417]:ReturnStatement[21204-21245]"
    }, {
      "left" : "if (result == Double.POSITIVE_INFINITY)",
      "right" : "if (result == Double.POSITIVE_INFINITY)",
      "info" : "IfStatement[21429-21656]:IfStatement[21257-21484]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21469-21529]:Block[21297-21357]"
    }, {
      "left" : "return Node.newString(Token.NAME, \"Infinity\");",
      "right" : "return Node.newString(Token.NAME, \"Infinity\");",
      "info" : "ReturnStatement[21477-21523]:ReturnStatement[21305-21351]"
    }, {
      "left" : "if (result == Double.NEGATIVE_INFINITY)",
      "right" : "if (result == Double.NEGATIVE_INFINITY)",
      "info" : "IfStatement[21535-21656]:IfStatement[21363-21484]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21575-21656]:Block[21403-21484]"
    }, {
      "left" : "return new Node(Token.NEG, Node.newString(Token.NAME, \"Infinity\"));",
      "right" : "return new Node(Token.NEG, Node.newString(Token.NAME, \"Infinity\"));",
      "info" : "ReturnStatement[21583-21650]:ReturnStatement[21411-21478]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[21662-21674]:ReturnStatement[21490-21502]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[22142-22149]:Modifier[21970-21977]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[22150-22154]:SimpleType[21978-21982]"
    }, {
      "left" : "tryFoldLeftChildOp",
      "right" : "tryFoldLeftChildOp",
      "info" : "SimpleName[22155-22173]:SimpleName[21983-22001]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[22174-22180]:SingleVariableDeclaration[22002-22008]"
    }, {
      "left" : "Node left",
      "right" : "Node left",
      "info" : "SingleVariableDeclaration[22182-22191]:SingleVariableDeclaration[22010-22019]"
    }, {
      "left" : "Node right",
      "right" : "Node right",
      "info" : "SingleVariableDeclaration[22193-22203]:SingleVariableDeclaration[22021-22031]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22205-23578]:Block[22033-23406]"
    }, {
      "left" : "int opType = n.getType();",
      "right" : "int opType = n.getType();",
      "info" : "VariableDeclarationStatement[22211-22236]:VariableDeclarationStatement[22039-22064]"
    }, {
      "left" : "Preconditions.checkState(\n        (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n        || n.getType() == Token.ADD);",
      "right" : "Preconditions.checkState(\n        (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n        || n.getType() == Token.ADD);",
      "info" : "ExpressionStatement[22241-22379]:ExpressionStatement[22069-22207]"
    }, {
      "left" : "Preconditions.checkState(\n        n.getType() != Token.ADD || !NodeUtil.mayBeString(n));",
      "right" : "Preconditions.checkState(\n        n.getType() != Token.ADD || !NodeUtil.mayBeString(n));",
      "info" : "ExpressionStatement[22385-22473]:ExpressionStatement[22213-22301]"
    }, {
      "left" : "Double rightValObj = NodeUtil.getNumberValue(right);",
      "right" : "Double rightValObj = NodeUtil.getNumberValue(right);",
      "info" : "VariableDeclarationStatement[22607-22659]:VariableDeclarationStatement[22435-22487]"
    }, {
      "left" : "if (rightValObj != null && left.getType() == opType)",
      "right" : "if (rightValObj != null && left.getType() == opType)",
      "info" : "IfStatement[22664-23559]:IfStatement[22492-23387]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22717-23559]:Block[22545-23387]"
    }, {
      "left" : "Preconditions.checkState(left.getChildCount() == 2);",
      "right" : "Preconditions.checkState(left.getChildCount() == 2);",
      "info" : "ExpressionStatement[22725-22777]:ExpressionStatement[22553-22605]"
    }, {
      "left" : "Node ll = left.getFirstChild();",
      "right" : "Node ll = left.getFirstChild();",
      "info" : "VariableDeclarationStatement[22785-22816]:VariableDeclarationStatement[22613-22644]"
    }, {
      "left" : "Node lr = ll.getNext();",
      "right" : "Node lr = ll.getNext();",
      "info" : "VariableDeclarationStatement[22823-22846]:VariableDeclarationStatement[22651-22674]"
    }, {
      "left" : "Node valueToCombine = ll;",
      "right" : "Node valueToCombine = ll;",
      "info" : "VariableDeclarationStatement[22854-22879]:VariableDeclarationStatement[22682-22707]"
    }, {
      "left" : "Node replacement = performArithmeticOp(opType, valueToCombine, right);",
      "right" : "Node replacement = performArithmeticOp(opType, valueToCombine, right);",
      "info" : "VariableDeclarationStatement[22886-22956]:VariableDeclarationStatement[22714-22784]"
    }, {
      "left" : "if (replacement == null)",
      "right" : "if (replacement == null)",
      "info" : "IfStatement[22963-23100]:IfStatement[22791-22928]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22988-23100]:Block[22816-22928]"
    }, {
      "left" : "valueToCombine = lr;",
      "right" : "valueToCombine = lr;",
      "info" : "ExpressionStatement[22998-23018]:ExpressionStatement[22826-22846]"
    }, {
      "left" : "replacement = performArithmeticOp(opType, valueToCombine, right);",
      "right" : "replacement = performArithmeticOp(opType, valueToCombine, right);",
      "info" : "ExpressionStatement[23027-23092]:ExpressionStatement[22855-22920]"
    }, {
      "left" : "if (replacement != null)",
      "right" : "if (replacement != null)",
      "info" : "IfStatement[23107-23553]:IfStatement[22935-23381]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23132-23553]:Block[22960-23381]"
    }, {
      "left" : "left.removeChild(valueToCombine);",
      "right" : "left.removeChild(valueToCombine);",
      "info" : "ExpressionStatement[23193-23226]:ExpressionStatement[23021-23054]"
    }, {
      "left" : "n.replaceChild(left, left.removeFirstChild());",
      "right" : "n.replaceChild(left, left.removeFirstChild());",
      "info" : "ExpressionStatement[23292-23338]:ExpressionStatement[23120-23166]"
    }, {
      "left" : "replacement.copyInformationFromForTree(right);",
      "right" : "replacement.copyInformationFromForTree(right);",
      "info" : "ExpressionStatement[23427-23473]:ExpressionStatement[23255-23301]"
    }, {
      "left" : "n.replaceChild(right, replacement);",
      "right" : "n.replaceChild(right, replacement);",
      "info" : "ExpressionStatement[23482-23517]:ExpressionStatement[23310-23345]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[23526-23545]:ExpressionStatement[23354-23373]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[23565-23574]:ReturnStatement[23393-23402]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[23582-23589]:Modifier[23410-23417]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[23590-23594]:SimpleType[23418-23422]"
    }, {
      "left" : "tryFoldAdd",
      "right" : "tryFoldAdd",
      "info" : "SimpleName[23595-23605]:SimpleName[23423-23433]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[23606-23615]:SingleVariableDeclaration[23434-23443]"
    }, {
      "left" : "Node left",
      "right" : "Node left",
      "info" : "SingleVariableDeclaration[23617-23626]:SingleVariableDeclaration[23445-23454]"
    }, {
      "left" : "Node right",
      "right" : "Node right",
      "info" : "SingleVariableDeclaration[23628-23638]:SingleVariableDeclaration[23456-23466]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23640-24256]:Block[23468-24084]"
    }, {
      "left" : "Preconditions.checkArgument(node.getType() == Token.ADD);",
      "right" : "Preconditions.checkArgument(node.getType() == Token.ADD);",
      "info" : "ExpressionStatement[23646-23703]:ExpressionStatement[23474-23531]"
    }, {
      "left" : "if (NodeUtil.mayBeString(node, true))",
      "right" : "if (NodeUtil.mayBeString(node, true))",
      "info" : "IfStatement[23709-24252]:IfStatement[23537-24080]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23747-24040]:Block[23575-23868]"
    }, {
      "left" : "if (NodeUtil.isLiteralValue(left, false) &&\n          NodeUtil.isLiteralValue(right, false))",
      "right" : "if (NodeUtil.isLiteralValue(left, false) &&\n          NodeUtil.isLiteralValue(right, false))",
      "info" : "IfStatement[23755-24034]:IfStatement[23583-23862]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23848-23936]:Block[23676-23764]"
    }, {
      "left" : "return tryFoldAddConstantString(node, left, right);",
      "right" : "return tryFoldAddConstantString(node, left, right);",
      "info" : "ReturnStatement[23877-23928]:ReturnStatement[23705-23756]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23942-24034]:Block[23770-23862]"
    }, {
      "left" : "return tryFoldChildAddString(node, left, right);",
      "right" : "return tryFoldChildAddString(node, left, right);",
      "info" : "ReturnStatement[23978-24026]:ReturnStatement[23806-23854]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24046-24252]:Block[23874-24080]"
    }, {
      "left" : "Node result = tryFoldArithmeticOp(node, left, right);",
      "right" : "Node result = tryFoldArithmeticOp(node, left, right);",
      "info" : "VariableDeclarationStatement[24082-24135]:VariableDeclarationStatement[23910-23963]"
    }, {
      "left" : "if (result != node)",
      "right" : "if (result != node)",
      "info" : "IfStatement[24142-24194]:IfStatement[23970-24022]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24162-24194]:Block[23990-24022]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[24172-24186]:ReturnStatement[24000-24014]"
    }, {
      "left" : "return tryFoldLeftChildOp(node, left, right);",
      "right" : "return tryFoldLeftChildOp(node, left, right);",
      "info" : "ReturnStatement[24201-24246]:ReturnStatement[24029-24074]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[24306-24313]:Modifier[24134-24141]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[24314-24318]:SimpleType[24142-24146]"
    }, {
      "left" : "tryFoldShift",
      "right" : "tryFoldShift",
      "info" : "SimpleName[24319-24331]:SimpleName[24147-24159]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[24332-24338]:SingleVariableDeclaration[24160-24166]"
    }, {
      "left" : "Node left",
      "right" : "Node left",
      "info" : "SingleVariableDeclaration[24340-24349]:SingleVariableDeclaration[24168-24177]"
    }, {
      "left" : "Node right",
      "right" : "Node right",
      "info" : "SingleVariableDeclaration[24351-24361]:SingleVariableDeclaration[24179-24189]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24363-26233]:Block[24191-26061]"
    }, {
      "left" : "if (left.getType() == Token.NUMBER &&\n        right.getType() == Token.NUMBER)",
      "right" : "if (left.getType() == Token.NUMBER &&\n        right.getType() == Token.NUMBER)",
      "info" : "IfStatement[24369-26214]:IfStatement[24197-26042]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24448-26214]:Block[24276-26042]"
    }, {
      "left" : "double result;",
      "right" : "double result;",
      "info" : "VariableDeclarationStatement[24457-24471]:VariableDeclarationStatement[24285-24299]"
    }, {
      "left" : "double lval = left.getDouble();",
      "right" : "double lval = left.getDouble();",
      "info" : "VariableDeclarationStatement[24478-24509]:VariableDeclarationStatement[24306-24337]"
    }, {
      "left" : "double rval = right.getDouble();",
      "right" : "double rval = right.getDouble();",
      "info" : "VariableDeclarationStatement[24516-24548]:VariableDeclarationStatement[24344-24376]"
    }, {
      "left" : "if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE))",
      "right" : "if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE))",
      "info" : "IfStatement[24701-24842]:IfStatement[24529-24670]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24764-24842]:Block[24592-24670]"
    }, {
      "left" : "error(BITWISE_OPERAND_OUT_OF_RANGE, left);",
      "right" : "error(BITWISE_OPERAND_OUT_OF_RANGE, left);",
      "info" : "ExpressionStatement[24774-24816]:ExpressionStatement[24602-24644]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[24825-24834]:ReturnStatement[24653-24662]"
    }, {
      "left" : "if (!(rval >= 0 && rval < 32))",
      "right" : "if (!(rval >= 0 && rval < 32))",
      "info" : "IfStatement[24973-25081]:IfStatement[24801-24909]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25004-25081]:Block[24832-24909]"
    }, {
      "left" : "error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);",
      "right" : "error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);",
      "info" : "ExpressionStatement[25014-25055]:ExpressionStatement[24842-24883]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[25064-25073]:ReturnStatement[24892-24901]"
    }, {
      "left" : "int lvalInt = (int) lval;",
      "right" : "int lvalInt = (int) lval;",
      "info" : "VariableDeclarationStatement[25126-25151]:VariableDeclarationStatement[24954-24979]"
    }, {
      "left" : "if (lvalInt != lval)",
      "right" : "if (lvalInt != lval)",
      "info" : "IfStatement[25158-25255]:IfStatement[24986-25083]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25179-25255]:Block[25007-25083]"
    }, {
      "left" : "error(FRACTIONAL_BITWISE_OPERAND, left);",
      "right" : "error(FRACTIONAL_BITWISE_OPERAND, left);",
      "info" : "ExpressionStatement[25189-25229]:ExpressionStatement[25017-25057]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[25238-25247]:ReturnStatement[25066-25075]"
    }, {
      "left" : "int rvalInt = (int) rval;",
      "right" : "int rvalInt = (int) rval;",
      "info" : "VariableDeclarationStatement[25263-25288]:VariableDeclarationStatement[25091-25116]"
    }, {
      "left" : "if (rvalInt != rval)",
      "right" : "if (rvalInt != rval)",
      "info" : "IfStatement[25295-25393]:IfStatement[25123-25221]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25316-25393]:Block[25144-25221]"
    }, {
      "left" : "error(FRACTIONAL_BITWISE_OPERAND, right);",
      "right" : "error(FRACTIONAL_BITWISE_OPERAND, right);",
      "info" : "ExpressionStatement[25326-25367]:ExpressionStatement[25154-25195]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[25376-25385]:ReturnStatement[25204-25213]"
    }, {
      "left" : "switch (n.getType()) {\n        case Token.LSH:\n          result = lvalInt << rvalInt;\n          break;\n        case Token.RSH:\n          result = lvalInt >> rvalInt;\n          break;\n        case Token.URSH:\n          // JavaScript handles zero shifts on signed numbers differently than\n          // Java as an Java int can not represent the unsigned 32-bit number\n          // where JavaScript can so use a long here.\n          long lvalLong = lvalInt & 0xffffffffL;\n          result = lvalLong >>> rvalInt;\n          break;\n        default:\n          throw new AssertionError(\"Unknown shift operator: \" +\n              Node.tokenToName(n.getType()));\n      }",
      "right" : "switch (n.getType()) {\n        case Token.LSH:\n          result = lvalInt << rvalInt;\n          break;\n        case Token.RSH:\n          result = lvalInt >> rvalInt;\n          break;\n        case Token.URSH:\n          // JavaScript handles zero shifts on signed numbers differently than\n          // Java as an Java int can not represent the unsigned 32-bit number\n          // where JavaScript can so use a long here.\n          long lvalLong = lvalInt & 0xffffffffL;\n          result = lvalLong >>> rvalInt;\n          break;\n        default:\n          throw new AssertionError(\"Unknown shift operator: \" +\n              Node.tokenToName(n.getType()));\n      }",
      "info" : "SwitchStatement[25401-26061]:SwitchStatement[25229-25889]"
    }, {
      "left" : "case Token.LSH:",
      "right" : "case Token.LSH:",
      "info" : "SwitchCase[25432-25447]:SwitchCase[25260-25275]"
    }, {
      "left" : "result = lvalInt << rvalInt;",
      "right" : "result = lvalInt << rvalInt;",
      "info" : "ExpressionStatement[25458-25486]:ExpressionStatement[25286-25314]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[25497-25503]:BreakStatement[25325-25331]"
    }, {
      "left" : "case Token.RSH:",
      "right" : "case Token.RSH:",
      "info" : "SwitchCase[25512-25527]:SwitchCase[25340-25355]"
    }, {
      "left" : "result = lvalInt >> rvalInt;",
      "right" : "result = lvalInt >> rvalInt;",
      "info" : "ExpressionStatement[25538-25566]:ExpressionStatement[25366-25394]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[25577-25583]:BreakStatement[25405-25411]"
    }, {
      "left" : "case Token.URSH:",
      "right" : "case Token.URSH:",
      "info" : "SwitchCase[25592-25608]:SwitchCase[25420-25436]"
    }, {
      "left" : "long lvalLong = lvalInt & 0xffffffffL;",
      "right" : "long lvalLong = lvalInt & 0xffffffffL;",
      "info" : "VariableDeclarationStatement[25830-25868]:VariableDeclarationStatement[25658-25696]"
    }, {
      "left" : "result = lvalLong >>> rvalInt;",
      "right" : "result = lvalLong >>> rvalInt;",
      "info" : "ExpressionStatement[25879-25909]:ExpressionStatement[25707-25737]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[25920-25926]:BreakStatement[25748-25754]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[25935-25943]:SwitchCase[25763-25771]"
    }, {
      "left" : "throw new AssertionError(\"Unknown shift operator: \" +\n              Node.tokenToName(n.getType()));",
      "right" : "throw new AssertionError(\"Unknown shift operator: \" +\n              Node.tokenToName(n.getType()));",
      "info" : "ThrowStatement[25954-26053]:ThrowStatement[25782-25881]"
    }, {
      "left" : "Node newNumber = Node.newNumber(result);",
      "right" : "Node newNumber = Node.newNumber(result);",
      "info" : "VariableDeclarationStatement[26069-26109]:VariableDeclarationStatement[25897-25937]"
    }, {
      "left" : "n.getParent().replaceChild(n, newNumber);",
      "right" : "n.getParent().replaceChild(n, newNumber);",
      "info" : "ExpressionStatement[26116-26157]:ExpressionStatement[25944-25985]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[26164-26183]:ExpressionStatement[25992-26011]"
    }, {
      "left" : "return newNumber;",
      "right" : "return newNumber;",
      "info" : "ReturnStatement[26191-26208]:ReturnStatement[26019-26036]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[26220-26229]:ReturnStatement[26048-26057]"
    }, {
      "left" : "@SuppressWarnings(\"fallthrough\")",
      "right" : "@SuppressWarnings(\"fallthrough\")",
      "info" : "SingleMemberAnnotation[26291-26323]:SingleMemberAnnotation[26119-26151]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[26326-26333]:Modifier[26154-26161]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[26334-26338]:SimpleType[26162-26166]"
    }, {
      "left" : "tryFoldComparison",
      "right" : "tryFoldComparison",
      "info" : "SimpleName[26339-26356]:SimpleName[26167-26184]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[26357-26363]:SingleVariableDeclaration[26185-26191]"
    }, {
      "left" : "Node left",
      "right" : "Node left",
      "info" : "SingleVariableDeclaration[26365-26374]:SingleVariableDeclaration[26193-26202]"
    }, {
      "left" : "Node right",
      "right" : "Node right",
      "info" : "SingleVariableDeclaration[26376-26386]:SingleVariableDeclaration[26204-26214]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26388-31384]:Block[26216-31212]"
    }, {
      "left" : "if (!NodeUtil.isLiteralValue(left, false) ||\n        !NodeUtil.isLiteralValue(right, false))",
      "right" : "if (!NodeUtil.isLiteralValue(left, false) ||\n        !NodeUtil.isLiteralValue(right, false))",
      "info" : "IfStatement[26394-26644]:IfStatement[26222-26472]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26487-26644]:Block[26315-26472]"
    }, {
      "left" : "if (n.getType() != Token.GT && n.getType() != Token.LT)",
      "right" : "if (n.getType() != Token.GT && n.getType() != Token.LT)",
      "info" : "IfStatement[26555-26638]:IfStatement[26383-26466]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26611-26638]:Block[26439-26466]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[26621-26630]:ReturnStatement[26449-26458]"
    }, {
      "left" : "int op = n.getType();",
      "right" : "int op = n.getType();",
      "info" : "VariableDeclarationStatement[26650-26671]:VariableDeclarationStatement[26478-26499]"
    }, {
      "left" : "boolean result;",
      "right" : "boolean result;",
      "info" : "VariableDeclarationStatement[26676-26691]:VariableDeclarationStatement[26504-26519]"
    }, {
      "left" : "boolean rightLiteral = NodeUtil.isLiteralValue(right, false);",
      "right" : "boolean rightLiteral = NodeUtil.isLiteralValue(right, false);",
      "info" : "VariableDeclarationStatement[26773-26834]:VariableDeclarationStatement[26601-26662]"
    }, {
      "left" : "boolean undefinedRight = ((Token.NAME == right.getType()\n          && right.getString().equals(\"undefined\"))\n          || (Token.VOID == right.getType()\n              && NodeUtil.isLiteralValue(right.getFirstChild(), false)));",
      "right" : "boolean undefinedRight = ((Token.NAME == right.getType()\n          && right.getString().equals(\"undefined\"))\n          || (Token.VOID == right.getType()\n              && NodeUtil.isLiteralValue(right.getFirstChild(), false)));",
      "info" : "VariableDeclarationStatement[26839-27065]:VariableDeclarationStatement[26667-26893]"
    }, {
      "left" : "switch (left.getType()) {\n      case Token.VOID:\n        if (!NodeUtil.isLiteralValue(left.getFirstChild(), false)) {\n          return n;\n        } else if (!rightLiteral) {\n          return n;\n        } else {\n          result = compareToUndefined(right, op);\n        }\n        break;\n\n      case Token.NULL:\n      case Token.TRUE:\n      case Token.FALSE:\n        if (undefinedRight) {\n          result = compareToUndefined(left, op);\n          break;\n        }\n        int rhType = right.getType();\n        if (rhType != Token.TRUE &&\n            rhType != Token.FALSE &&\n            rhType != Token.NULL) {\n          return n;\n        }\n        switch (op) {\n          case Token.SHEQ:\n          case Token.EQ:\n            result = left.getType() == right.getType();\n            break;\n\n          case Token.SHNE:\n          case Token.NE:\n            result = left.getType() != right.getType();\n            break;\n\n          case Token.GE:\n          case Token.LE:\n          case Token.GT:\n          case Token.LT:\n            Boolean compareResult = compareAsNumbers(op, left, right);\n            if (compareResult != null) {\n              result = compareResult;\n            } else {\n              return n;\n            }\n            break;\n\n          default:\n            return n;  // we only handle == and != here\n        }\n        break;\n\n      case Token.THIS:\n        if (right.getType() != Token.THIS) {\n          return n;\n        }\n        switch (op) {\n          case Token.SHEQ:\n          case Token.EQ:\n            result = true;\n            break;\n\n          case Token.SHNE:\n          case Token.NE:\n            result = false;\n            break;\n\n          // We can only handle == and != here.\n          // GT, LT, GE, LE depend on the type of \"this\" and how it will\n          // be converted to number.  The results are different depending on\n          // whether it is a string, NaN or other number value.\n          default:\n            return n;\n        }\n        break;\n\n      case Token.STRING:\n        if (undefinedRight) {\n          result = compareToUndefined(left, op);\n          break;\n        }\n        if (Token.STRING != right.getType()) {\n          return n;  // Only eval if they are the same type\n        }\n        switch (op) {\n          case Token.SHEQ:\n          case Token.EQ:\n            result = left.getString().equals(right.getString());\n            break;\n\n          case Token.SHNE:\n          case Token.NE:\n            result = !left.getString().equals(right.getString());\n            break;\n\n          default:\n            return n;  // we only handle == and != here\n        }\n        break;\n\n      case Token.NUMBER:\n        if (undefinedRight) {\n          result = compareToUndefined(left, op);\n          break;\n        }\n        if (Token.NUMBER != right.getType()) {\n          return n;  // Only eval if they are the same type\n        }\n        Boolean compareResult = compareAsNumbers(op, left, right);\n        if (compareResult != null) {\n          result = compareResult;\n        } else {\n          return null;\n        }\n        break;\n\n      case Token.NAME:\n        if (undefinedRight) {\n          result = compareToUndefined(left, op);\n          break;\n        }\n\n        if (rightLiteral) {\n          boolean undefinedLeft = (left.getString().equals(\"undefined\"));\n          if (undefinedLeft) {\n            result = compareToUndefined(right, op);\n            break;\n          }\n        }\n\n        if (Token.NAME != right.getType()) {\n          return n;  // Only eval if they are the same type\n        }\n        String ln = left.getString();\n        String rn = right.getString();\n        if (!ln.equals(rn)) {\n          return n;  // Not the same value name.\n        }\n\n        switch (op) {\n          // If we knew the named value wouldn't be NaN, it would be nice\n          // to handle EQ,NE,LE,GE,SHEQ, and SHNE.\n          case Token.LT:\n          case Token.GT:\n            result = false;\n            break;\n          default:\n            return n;  // don't handle that op\n        }\n        break;\n\n      default:\n        // assert, this should cover all consts\n        return n;\n    }",
      "right" : "switch (left.getType()) {\n      case Token.VOID:\n        if (!NodeUtil.isLiteralValue(left.getFirstChild(), false)) {\n          return n;\n        } else if (!rightLiteral) {\n          return n;\n        } else {\n          result = compareToUndefined(right, op);\n        }\n        break;\n\n      case Token.NULL:\n      case Token.TRUE:\n      case Token.FALSE:\n        if (undefinedRight) {\n          result = compareToUndefined(left, op);\n          break;\n        }\n        int rhType = right.getType();\n        if (rhType != Token.TRUE &&\n            rhType != Token.FALSE &&\n            rhType != Token.NULL) {\n          return n;\n        }\n        switch (op) {\n          case Token.SHEQ:\n          case Token.EQ:\n            result = left.getType() == right.getType();\n            break;\n\n          case Token.SHNE:\n          case Token.NE:\n            result = left.getType() != right.getType();\n            break;\n\n          case Token.GE:\n          case Token.LE:\n          case Token.GT:\n          case Token.LT:\n            Boolean compareResult = compareAsNumbers(op, left, right);\n            if (compareResult != null) {\n              result = compareResult;\n            } else {\n              return n;\n            }\n            break;\n\n          default:\n            return n;  // we only handle == and != here\n        }\n        break;\n\n      case Token.THIS:\n        if (right.getType() != Token.THIS) {\n          return n;\n        }\n        switch (op) {\n          case Token.SHEQ:\n          case Token.EQ:\n            result = true;\n            break;\n\n          case Token.SHNE:\n          case Token.NE:\n            result = false;\n            break;\n\n          // We can only handle == and != here.\n          // GT, LT, GE, LE depend on the type of \"this\" and how it will\n          // be converted to number.  The results are different depending on\n          // whether it is a string, NaN or other number value.\n          default:\n            return n;\n        }\n        break;\n\n      case Token.STRING:\n        if (undefinedRight) {\n          result = compareToUndefined(left, op);\n          break;\n        }\n        if (Token.STRING != right.getType()) {\n          return n;  // Only eval if they are the same type\n        }\n        switch (op) {\n          case Token.SHEQ:\n          case Token.EQ:\n            result = left.getString().equals(right.getString());\n            break;\n\n          case Token.SHNE:\n          case Token.NE:\n            result = !left.getString().equals(right.getString());\n            break;\n\n          default:\n            return n;  // we only handle == and != here\n        }\n        break;\n\n      case Token.NUMBER:\n        if (undefinedRight) {\n          result = compareToUndefined(left, op);\n          break;\n        }\n        if (Token.NUMBER != right.getType()) {\n          return n;  // Only eval if they are the same type\n        }\n        Boolean compareResult = compareAsNumbers(op, left, right);\n        if (compareResult != null) {\n          result = compareResult;\n        } else {\n          return null;\n        }\n        break;\n\n      case Token.NAME:\n        if (undefinedRight) {\n          result = compareToUndefined(left, op);\n          break;\n        }\n\n        if (rightLiteral) {\n          boolean undefinedLeft = (left.getString().equals(\"undefined\"));\n          if (undefinedLeft) {\n            result = compareToUndefined(right, op);\n            break;\n          }\n        }\n\n        if (Token.NAME != right.getType()) {\n          return n;  // Only eval if they are the same type\n        }\n        String ln = left.getString();\n        String rn = right.getString();\n        if (!ln.equals(rn)) {\n          return n;  // Not the same value name.\n        }\n\n        switch (op) {\n          // If we knew the named value wouldn't be NaN, it would be nice\n          // to handle EQ,NE,LE,GE,SHEQ, and SHNE.\n          case Token.LT:\n          case Token.GT:\n            result = false;\n            break;\n          default:\n            return n;  // don't handle that op\n        }\n        break;\n\n      default:\n        // assert, this should cover all consts\n        return n;\n    }",
      "info" : "SwitchStatement[27071-31226]:SwitchStatement[26899-31054]"
    }, {
      "left" : "case Token.VOID:",
      "right" : "case Token.VOID:",
      "info" : "SwitchCase[27103-27119]:SwitchCase[26931-26947]"
    }, {
      "left" : "if (!NodeUtil.isLiteralValue(left.getFirstChild(), false))",
      "right" : "if (!NodeUtil.isLiteralValue(left.getFirstChild(), false))",
      "info" : "IfStatement[27128-27341]:IfStatement[26956-27169]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27187-27218]:Block[27015-27046]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[27199-27208]:ReturnStatement[27027-27036]"
    }, {
      "left" : "if (!rightLiteral)",
      "right" : "if (!rightLiteral)",
      "info" : "IfStatement[27224-27341]:IfStatement[27052-27169]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27243-27274]:Block[27071-27102]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[27255-27264]:ReturnStatement[27083-27092]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27280-27341]:Block[27108-27169]"
    }, {
      "left" : "result = compareToUndefined(right, op);",
      "right" : "result = compareToUndefined(right, op);",
      "info" : "ExpressionStatement[27292-27331]:ExpressionStatement[27120-27159]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[27350-27356]:BreakStatement[27178-27184]"
    }, {
      "left" : "case Token.NULL:",
      "right" : "case Token.NULL:",
      "info" : "SwitchCase[27364-27380]:SwitchCase[27192-27208]"
    }, {
      "left" : "case Token.TRUE:",
      "right" : "case Token.TRUE:",
      "info" : "SwitchCase[27387-27403]:SwitchCase[27215-27231]"
    }, {
      "left" : "case Token.FALSE:",
      "right" : "case Token.FALSE:",
      "info" : "SwitchCase[27410-27427]:SwitchCase[27238-27255]"
    }, {
      "left" : "if (undefinedRight)",
      "right" : "if (undefinedRight)",
      "info" : "IfStatement[27436-27533]:IfStatement[27264-27361]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27456-27533]:Block[27284-27361]"
    }, {
      "left" : "result = compareToUndefined(left, op);",
      "right" : "result = compareToUndefined(left, op);",
      "info" : "ExpressionStatement[27468-27506]:ExpressionStatement[27296-27334]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[27517-27523]:BreakStatement[27345-27351]"
    }, {
      "left" : "int rhType = right.getType();",
      "right" : "int rhType = right.getType();",
      "info" : "VariableDeclarationStatement[27542-27571]:VariableDeclarationStatement[27370-27399]"
    }, {
      "left" : "if (rhType != Token.TRUE &&\n            rhType != Token.FALSE &&\n            rhType != Token.NULL)",
      "right" : "if (rhType != Token.TRUE &&\n            rhType != Token.FALSE &&\n            rhType != Token.NULL)",
      "info" : "IfStatement[27580-27710]:IfStatement[27408-27538]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27679-27710]:Block[27507-27538]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[27691-27700]:ReturnStatement[27519-27528]"
    }, {
      "left" : "switch (op) {\n          case Token.SHEQ:\n          case Token.EQ:\n            result = left.getType() == right.getType();\n            break;\n\n          case Token.SHNE:\n          case Token.NE:\n            result = left.getType() != right.getType();\n            break;\n\n          case Token.GE:\n          case Token.LE:\n          case Token.GT:\n          case Token.LT:\n            Boolean compareResult = compareAsNumbers(op, left, right);\n            if (compareResult != null) {\n              result = compareResult;\n            } else {\n              return n;\n            }\n            break;\n\n          default:\n            return n;  // we only handle == and != here\n        }",
      "right" : "switch (op) {\n          case Token.SHEQ:\n          case Token.EQ:\n            result = left.getType() == right.getType();\n            break;\n\n          case Token.SHNE:\n          case Token.NE:\n            result = left.getType() != right.getType();\n            break;\n\n          case Token.GE:\n          case Token.LE:\n          case Token.GT:\n          case Token.LT:\n            Boolean compareResult = compareAsNumbers(op, left, right);\n            if (compareResult != null) {\n              result = compareResult;\n            } else {\n              return n;\n            }\n            break;\n\n          default:\n            return n;  // we only handle == and != here\n        }",
      "info" : "SwitchStatement[27719-28402]:SwitchStatement[27547-28230]"
    }, {
      "left" : "case Token.SHEQ:",
      "right" : "case Token.SHEQ:",
      "info" : "SwitchCase[27743-27759]:SwitchCase[27571-27587]"
    }, {
      "left" : "case Token.EQ:",
      "right" : "case Token.EQ:",
      "info" : "SwitchCase[27770-27784]:SwitchCase[27598-27612]"
    }, {
      "left" : "result = left.getType() == right.getType();",
      "right" : "result = left.getType() == right.getType();",
      "info" : "ExpressionStatement[27797-27840]:ExpressionStatement[27625-27668]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[27853-27859]:BreakStatement[27681-27687]"
    }, {
      "left" : "case Token.SHNE:",
      "right" : "case Token.SHNE:",
      "info" : "SwitchCase[27871-27887]:SwitchCase[27699-27715]"
    }, {
      "left" : "case Token.NE:",
      "right" : "case Token.NE:",
      "info" : "SwitchCase[27898-27912]:SwitchCase[27726-27740]"
    }, {
      "left" : "result = left.getType() != right.getType();",
      "right" : "result = left.getType() != right.getType();",
      "info" : "ExpressionStatement[27925-27968]:ExpressionStatement[27753-27796]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[27981-27987]:BreakStatement[27809-27815]"
    }, {
      "left" : "case Token.GE:",
      "right" : "case Token.GE:",
      "info" : "SwitchCase[27999-28013]:SwitchCase[27827-27841]"
    }, {
      "left" : "case Token.LE:",
      "right" : "case Token.LE:",
      "info" : "SwitchCase[28024-28038]:SwitchCase[27852-27866]"
    }, {
      "left" : "case Token.GT:",
      "right" : "case Token.GT:",
      "info" : "SwitchCase[28049-28063]:SwitchCase[27877-27891]"
    }, {
      "left" : "case Token.LT:",
      "right" : "case Token.LT:",
      "info" : "SwitchCase[28074-28088]:SwitchCase[27902-27916]"
    }, {
      "left" : "Boolean compareResult = compareAsNumbers(op, left, right);",
      "right" : "Boolean compareResult = compareAsNumbers(op, left, right);",
      "info" : "VariableDeclarationStatement[28101-28159]:VariableDeclarationStatement[27929-27987]"
    }, {
      "left" : "if (compareResult != null)",
      "right" : "if (compareResult != null)",
      "info" : "IfStatement[28172-28297]:IfStatement[28000-28125]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28199-28252]:Block[28027-28080]"
    }, {
      "left" : "result = compareResult;",
      "right" : "result = compareResult;",
      "info" : "ExpressionStatement[28215-28238]:ExpressionStatement[28043-28066]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28258-28297]:Block[28086-28125]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[28274-28283]:ReturnStatement[28102-28111]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[28310-28316]:BreakStatement[28138-28144]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[28328-28336]:SwitchCase[28156-28164]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[28349-28358]:ReturnStatement[28177-28186]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[28411-28417]:BreakStatement[28239-28245]"
    }, {
      "left" : "case Token.THIS:",
      "right" : "case Token.THIS:",
      "info" : "SwitchCase[28425-28441]:SwitchCase[28253-28269]"
    }, {
      "left" : "if (right.getType() != Token.THIS)",
      "right" : "if (right.getType() != Token.THIS)",
      "info" : "IfStatement[28450-28516]:IfStatement[28278-28344]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28485-28516]:Block[28313-28344]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[28497-28506]:ReturnStatement[28325-28334]"
    }, {
      "left" : "switch (op) {\n          case Token.SHEQ:\n          case Token.EQ:\n            result = true;\n            break;\n\n          case Token.SHNE:\n          case Token.NE:\n            result = false;\n            break;\n\n          // We can only handle == and != here.\n          // GT, LT, GE, LE depend on the type of \"this\" and how it will\n          // be converted to number.  The results are different depending on\n          // whether it is a string, NaN or other number value.\n          default:\n            return n;\n        }",
      "right" : "switch (op) {\n          case Token.SHEQ:\n          case Token.EQ:\n            result = true;\n            break;\n\n          case Token.SHNE:\n          case Token.NE:\n            result = false;\n            break;\n\n          // We can only handle == and != here.\n          // GT, LT, GE, LE depend on the type of \"this\" and how it will\n          // be converted to number.  The results are different depending on\n          // whether it is a string, NaN or other number value.\n          default:\n            return n;\n        }",
      "info" : "SwitchStatement[28525-29050]:SwitchStatement[28353-28878]"
    }, {
      "left" : "case Token.SHEQ:",
      "right" : "case Token.SHEQ:",
      "info" : "SwitchCase[28549-28565]:SwitchCase[28377-28393]"
    }, {
      "left" : "case Token.EQ:",
      "right" : "case Token.EQ:",
      "info" : "SwitchCase[28576-28590]:SwitchCase[28404-28418]"
    }, {
      "left" : "result = true;",
      "right" : "result = true;",
      "info" : "ExpressionStatement[28603-28617]:ExpressionStatement[28431-28445]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[28630-28636]:BreakStatement[28458-28464]"
    }, {
      "left" : "case Token.SHNE:",
      "right" : "case Token.SHNE:",
      "info" : "SwitchCase[28648-28664]:SwitchCase[28476-28492]"
    }, {
      "left" : "case Token.NE:",
      "right" : "case Token.NE:",
      "info" : "SwitchCase[28675-28689]:SwitchCase[28503-28517]"
    }, {
      "left" : "result = false;",
      "right" : "result = false;",
      "info" : "ExpressionStatement[28702-28717]:ExpressionStatement[28530-28545]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[28730-28736]:BreakStatement[28558-28564]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[29010-29018]:SwitchCase[28838-28846]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[29031-29040]:ReturnStatement[28859-28868]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[29059-29065]:BreakStatement[28887-28893]"
    }, {
      "left" : "case Token.STRING:",
      "right" : "case Token.STRING:",
      "info" : "SwitchCase[29073-29091]:SwitchCase[28901-28919]"
    }, {
      "left" : "if (undefinedRight)",
      "right" : "if (undefinedRight)",
      "info" : "IfStatement[29100-29197]:IfStatement[28928-29025]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29120-29197]:Block[28948-29025]"
    }, {
      "left" : "result = compareToUndefined(left, op);",
      "right" : "result = compareToUndefined(left, op);",
      "info" : "ExpressionStatement[29132-29170]:ExpressionStatement[28960-28998]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[29181-29187]:BreakStatement[29009-29015]"
    }, {
      "left" : "if (Token.STRING != right.getType())",
      "right" : "if (Token.STRING != right.getType())",
      "info" : "IfStatement[29206-29314]:IfStatement[29034-29142]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29243-29314]:Block[29071-29142]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[29255-29264]:ReturnStatement[29083-29092]"
    }, {
      "left" : "switch (op) {\n          case Token.SHEQ:\n          case Token.EQ:\n            result = left.getString().equals(right.getString());\n            break;\n\n          case Token.SHNE:\n          case Token.NE:\n            result = !left.getString().equals(right.getString());\n            break;\n\n          default:\n            return n;  // we only handle == and != here\n        }",
      "right" : "switch (op) {\n          case Token.SHEQ:\n          case Token.EQ:\n            result = left.getString().equals(right.getString());\n            break;\n\n          case Token.SHNE:\n          case Token.NE:\n            result = !left.getString().equals(right.getString());\n            break;\n\n          default:\n            return n;  // we only handle == and != here\n        }",
      "info" : "SwitchStatement[29323-29696]:SwitchStatement[29151-29524]"
    }, {
      "left" : "case Token.SHEQ:",
      "right" : "case Token.SHEQ:",
      "info" : "SwitchCase[29347-29363]:SwitchCase[29175-29191]"
    }, {
      "left" : "case Token.EQ:",
      "right" : "case Token.EQ:",
      "info" : "SwitchCase[29374-29388]:SwitchCase[29202-29216]"
    }, {
      "left" : "result = left.getString().equals(right.getString());",
      "right" : "result = left.getString().equals(right.getString());",
      "info" : "ExpressionStatement[29401-29453]:ExpressionStatement[29229-29281]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[29466-29472]:BreakStatement[29294-29300]"
    }, {
      "left" : "case Token.SHNE:",
      "right" : "case Token.SHNE:",
      "info" : "SwitchCase[29484-29500]:SwitchCase[29312-29328]"
    }, {
      "left" : "case Token.NE:",
      "right" : "case Token.NE:",
      "info" : "SwitchCase[29511-29525]:SwitchCase[29339-29353]"
    }, {
      "left" : "result = !left.getString().equals(right.getString());",
      "right" : "result = !left.getString().equals(right.getString());",
      "info" : "ExpressionStatement[29538-29591]:ExpressionStatement[29366-29419]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[29604-29610]:BreakStatement[29432-29438]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[29622-29630]:SwitchCase[29450-29458]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[29643-29652]:ReturnStatement[29471-29480]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[29705-29711]:BreakStatement[29533-29539]"
    }, {
      "left" : "case Token.NUMBER:",
      "right" : "case Token.NUMBER:",
      "info" : "SwitchCase[29719-29737]:SwitchCase[29547-29565]"
    }, {
      "left" : "if (undefinedRight)",
      "right" : "if (undefinedRight)",
      "info" : "IfStatement[29746-29843]:IfStatement[29574-29671]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29766-29843]:Block[29594-29671]"
    }, {
      "left" : "result = compareToUndefined(left, op);",
      "right" : "result = compareToUndefined(left, op);",
      "info" : "ExpressionStatement[29778-29816]:ExpressionStatement[29606-29644]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[29827-29833]:BreakStatement[29655-29661]"
    }, {
      "left" : "if (Token.NUMBER != right.getType())",
      "right" : "if (Token.NUMBER != right.getType())",
      "info" : "IfStatement[29852-29960]:IfStatement[29680-29788]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29889-29960]:Block[29717-29788]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[29901-29910]:ReturnStatement[29729-29738]"
    }, {
      "left" : "Boolean compareResult = compareAsNumbers(op, left, right);",
      "right" : "Boolean compareResult = compareAsNumbers(op, left, right);",
      "info" : "VariableDeclarationStatement[29969-30027]:VariableDeclarationStatement[29797-29855]"
    }, {
      "left" : "if (compareResult != null)",
      "right" : "if (compareResult != null)",
      "info" : "IfStatement[30036-30148]:IfStatement[29864-29976]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30063-30108]:Block[29891-29936]"
    }, {
      "left" : "result = compareResult;",
      "right" : "result = compareResult;",
      "info" : "ExpressionStatement[30075-30098]:ExpressionStatement[29903-29926]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30114-30148]:Block[29942-29976]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[30126-30138]:ReturnStatement[29954-29966]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[30157-30163]:BreakStatement[29985-29991]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[30171-30187]:SwitchCase[29999-30015]"
    }, {
      "left" : "if (undefinedRight)",
      "right" : "if (undefinedRight)",
      "info" : "IfStatement[30196-30293]:IfStatement[30024-30121]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30216-30293]:Block[30044-30121]"
    }, {
      "left" : "result = compareToUndefined(left, op);",
      "right" : "result = compareToUndefined(left, op);",
      "info" : "ExpressionStatement[30228-30266]:ExpressionStatement[30056-30094]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[30277-30283]:BreakStatement[30105-30111]"
    }, {
      "left" : "if (rightLiteral)",
      "right" : "if (rightLiteral)",
      "info" : "IfStatement[30303-30520]:IfStatement[30131-30348]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30321-30520]:Block[30149-30348]"
    }, {
      "left" : "boolean undefinedLeft = (left.getString().equals(\"undefined\"));",
      "right" : "boolean undefinedLeft = (left.getString().equals(\"undefined\"));",
      "info" : "VariableDeclarationStatement[30333-30396]:VariableDeclarationStatement[30161-30224]"
    }, {
      "left" : "if (undefinedLeft)",
      "right" : "if (undefinedLeft)",
      "info" : "IfStatement[30407-30510]:IfStatement[30235-30338]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30426-30510]:Block[30254-30338]"
    }, {
      "left" : "result = compareToUndefined(right, op);",
      "right" : "result = compareToUndefined(right, op);",
      "info" : "ExpressionStatement[30440-30479]:ExpressionStatement[30268-30307]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[30492-30498]:BreakStatement[30320-30326]"
    }, {
      "left" : "if (Token.NAME != right.getType())",
      "right" : "if (Token.NAME != right.getType())",
      "info" : "IfStatement[30530-30636]:IfStatement[30358-30464]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30565-30636]:Block[30393-30464]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[30577-30586]:ReturnStatement[30405-30414]"
    }, {
      "left" : "String ln = left.getString();",
      "right" : "String ln = left.getString();",
      "info" : "VariableDeclarationStatement[30645-30674]:VariableDeclarationStatement[30473-30502]"
    }, {
      "left" : "String rn = right.getString();",
      "right" : "String rn = right.getString();",
      "info" : "VariableDeclarationStatement[30683-30713]:VariableDeclarationStatement[30511-30541]"
    }, {
      "left" : "if (!ln.equals(rn))",
      "right" : "if (!ln.equals(rn))",
      "info" : "IfStatement[30722-30802]:IfStatement[30550-30630]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30742-30802]:Block[30570-30630]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[30754-30763]:ReturnStatement[30582-30591]"
    }, {
      "left" : "switch (op) {\n          // If we knew the named value wouldn't be NaN, it would be nice\n          // to handle EQ,NE,LE,GE,SHEQ, and SHNE.\n          case Token.LT:\n          case Token.GT:\n            result = false;\n            break;\n          default:\n            return n;  // don't handle that op\n        }",
      "right" : "switch (op) {\n          // If we knew the named value wouldn't be NaN, it would be nice\n          // to handle EQ,NE,LE,GE,SHEQ, and SHNE.\n          case Token.LT:\n          case Token.GT:\n            result = false;\n            break;\n          default:\n            return n;  // don't handle that op\n        }",
      "info" : "SwitchStatement[30812-31123]:SwitchStatement[30640-30951]"
    }, {
      "left" : "case Token.LT:",
      "right" : "case Token.LT:",
      "info" : "SwitchCase[30961-30975]:SwitchCase[30789-30803]"
    }, {
      "left" : "case Token.GT:",
      "right" : "case Token.GT:",
      "info" : "SwitchCase[30986-31000]:SwitchCase[30814-30828]"
    }, {
      "left" : "result = false;",
      "right" : "result = false;",
      "info" : "ExpressionStatement[31013-31028]:ExpressionStatement[30841-30856]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[31041-31047]:BreakStatement[30869-30875]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[31058-31066]:SwitchCase[30886-30894]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[31079-31088]:ReturnStatement[30907-30916]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[31132-31138]:BreakStatement[30960-30966]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[31146-31154]:SwitchCase[30974-30982]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[31211-31220]:ReturnStatement[31039-31048]"
    }, {
      "left" : "Node newNode = new Node(result ? Token.TRUE : Token.FALSE);",
      "right" : "Node newNode = new Node(result ? Token.TRUE : Token.FALSE);",
      "info" : "VariableDeclarationStatement[31232-31291]:VariableDeclarationStatement[31060-31119]"
    }, {
      "left" : "n.getParent().replaceChild(n, newNode);",
      "right" : "n.getParent().replaceChild(n, newNode);",
      "info" : "ExpressionStatement[31296-31335]:ExpressionStatement[31124-31163]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[31340-31359]:ExpressionStatement[31168-31187]"
    }, {
      "left" : "return newNode;",
      "right" : "return newNode;",
      "info" : "ReturnStatement[31365-31380]:ReturnStatement[31193-31208]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[31499-31506]:Modifier[31327-31334]"
    }, {
      "left" : "Boolean",
      "right" : "Boolean",
      "info" : "SimpleType[31507-31514]:SimpleType[31335-31342]"
    }, {
      "left" : "compareAsNumbers",
      "right" : "compareAsNumbers",
      "info" : "SimpleName[31515-31531]:SimpleName[31343-31359]"
    }, {
      "left" : "int op",
      "right" : "int op",
      "info" : "SingleVariableDeclaration[31532-31538]:SingleVariableDeclaration[31360-31366]"
    }, {
      "left" : "Node left",
      "right" : "Node left",
      "info" : "SingleVariableDeclaration[31540-31549]:SingleVariableDeclaration[31368-31377]"
    }, {
      "left" : "Node right",
      "right" : "Node right",
      "info" : "SingleVariableDeclaration[31551-31561]:SingleVariableDeclaration[31379-31389]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31563-32556]:Block[31391-32384]"
    }, {
      "left" : "Double leftValue = NodeUtil.getNumberValue(left);",
      "right" : "Double leftValue = NodeUtil.getNumberValue(left);",
      "info" : "VariableDeclarationStatement[31569-31618]:VariableDeclarationStatement[31397-31446]"
    }, {
      "left" : "if (leftValue == null)",
      "right" : "if (leftValue == null)",
      "info" : "IfStatement[31623-31672]:IfStatement[31451-31500]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31646-31672]:Block[31474-31500]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[31654-31666]:ReturnStatement[31482-31494]"
    }, {
      "left" : "Double rightValue = NodeUtil.getNumberValue(right);",
      "right" : "Double rightValue = NodeUtil.getNumberValue(right);",
      "info" : "VariableDeclarationStatement[31677-31728]:VariableDeclarationStatement[31505-31556]"
    }, {
      "left" : "if (rightValue == null)",
      "right" : "if (rightValue == null)",
      "info" : "IfStatement[31733-31783]:IfStatement[31561-31611]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31757-31783]:Block[31585-31611]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[31765-31777]:ReturnStatement[31593-31605]"
    }, {
      "left" : "double lv = leftValue;",
      "right" : "double lv = leftValue;",
      "info" : "VariableDeclarationStatement[31789-31811]:VariableDeclarationStatement[31617-31639]"
    }, {
      "left" : "double rv = rightValue;",
      "right" : "double rv = rightValue;",
      "info" : "VariableDeclarationStatement[31816-31839]:VariableDeclarationStatement[31644-31667]"
    }, {
      "left" : "Boolean result;",
      "right" : "Boolean result;",
      "info" : "VariableDeclarationStatement[31845-31860]:VariableDeclarationStatement[31673-31688]"
    }, {
      "left" : "switch (op) {\n      case Token.SHEQ:\n      case Token.EQ:\n        Preconditions.checkState(\n            left.getType() == Token.NUMBER && right.getType() == Token.NUMBER);\n        result = lv == rv;\n        break;\n      case Token.SHNE:\n      case Token.NE:\n        Preconditions.checkState(\n            left.getType() == Token.NUMBER && right.getType() == Token.NUMBER);\n        result = lv != rv;\n        break;\n      case Token.LE: result = lv <= rv; break;\n      case Token.LT: result = lv <  rv; break;\n      case Token.GE: result = lv >= rv; break;\n      case Token.GT: result = lv >  rv; break;\n      default:\n        return null;  // don't handle that op\n    }",
      "right" : "switch (op) {\n      case Token.SHEQ:\n      case Token.EQ:\n        Preconditions.checkState(\n            left.getType() == Token.NUMBER && right.getType() == Token.NUMBER);\n        result = lv == rv;\n        break;\n      case Token.SHNE:\n      case Token.NE:\n        Preconditions.checkState(\n            left.getType() == Token.NUMBER && right.getType() == Token.NUMBER);\n        result = lv != rv;\n        break;\n      case Token.LE: result = lv <= rv; break;\n      case Token.LT: result = lv <  rv; break;\n      case Token.GE: result = lv >= rv; break;\n      case Token.GT: result = lv >  rv; break;\n      default:\n        return null;  // don't handle that op\n    }",
      "info" : "SwitchStatement[31865-32533]:SwitchStatement[31693-32361]"
    }, {
      "left" : "case Token.SHEQ:",
      "right" : "case Token.SHEQ:",
      "info" : "SwitchCase[31885-31901]:SwitchCase[31713-31729]"
    }, {
      "left" : "case Token.EQ:",
      "right" : "case Token.EQ:",
      "info" : "SwitchCase[31908-31922]:SwitchCase[31736-31750]"
    }, {
      "left" : "Preconditions.checkState(\n            left.getType() == Token.NUMBER && right.getType() == Token.NUMBER);",
      "right" : "Preconditions.checkState(\n            left.getType() == Token.NUMBER && right.getType() == Token.NUMBER);",
      "info" : "ExpressionStatement[31931-32036]:ExpressionStatement[31759-31864]"
    }, {
      "left" : "result = lv == rv;",
      "right" : "result = lv == rv;",
      "info" : "ExpressionStatement[32045-32063]:ExpressionStatement[31873-31891]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[32072-32078]:BreakStatement[31900-31906]"
    }, {
      "left" : "case Token.SHNE:",
      "right" : "case Token.SHNE:",
      "info" : "SwitchCase[32085-32101]:SwitchCase[31913-31929]"
    }, {
      "left" : "case Token.NE:",
      "right" : "case Token.NE:",
      "info" : "SwitchCase[32108-32122]:SwitchCase[31936-31950]"
    }, {
      "left" : "Preconditions.checkState(\n            left.getType() == Token.NUMBER && right.getType() == Token.NUMBER);",
      "right" : "Preconditions.checkState(\n            left.getType() == Token.NUMBER && right.getType() == Token.NUMBER);",
      "info" : "ExpressionStatement[32131-32236]:ExpressionStatement[31959-32064]"
    }, {
      "left" : "result = lv != rv;",
      "right" : "result = lv != rv;",
      "info" : "ExpressionStatement[32245-32263]:ExpressionStatement[32073-32091]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[32272-32278]:BreakStatement[32100-32106]"
    }, {
      "left" : "case Token.LE:",
      "right" : "case Token.LE:",
      "info" : "SwitchCase[32285-32299]:SwitchCase[32113-32127]"
    }, {
      "left" : "result = lv <= rv;",
      "right" : "result = lv <= rv;",
      "info" : "ExpressionStatement[32300-32318]:ExpressionStatement[32128-32146]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[32319-32325]:BreakStatement[32147-32153]"
    }, {
      "left" : "case Token.LT:",
      "right" : "case Token.LT:",
      "info" : "SwitchCase[32332-32346]:SwitchCase[32160-32174]"
    }, {
      "left" : "result = lv <  rv;",
      "right" : "result = lv <  rv;",
      "info" : "ExpressionStatement[32347-32365]:ExpressionStatement[32175-32193]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[32366-32372]:BreakStatement[32194-32200]"
    }, {
      "left" : "case Token.GE:",
      "right" : "case Token.GE:",
      "info" : "SwitchCase[32379-32393]:SwitchCase[32207-32221]"
    }, {
      "left" : "result = lv >= rv;",
      "right" : "result = lv >= rv;",
      "info" : "ExpressionStatement[32394-32412]:ExpressionStatement[32222-32240]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[32413-32419]:BreakStatement[32241-32247]"
    }, {
      "left" : "case Token.GT:",
      "right" : "case Token.GT:",
      "info" : "SwitchCase[32426-32440]:SwitchCase[32254-32268]"
    }, {
      "left" : "result = lv >  rv;",
      "right" : "result = lv >  rv;",
      "info" : "ExpressionStatement[32441-32459]:ExpressionStatement[32269-32287]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[32460-32466]:BreakStatement[32288-32294]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[32473-32481]:SwitchCase[32301-32309]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[32490-32502]:ReturnStatement[32318-32330]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[32538-32552]:ReturnStatement[32366-32380]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[32725-32732]:Modifier[32553-32560]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[32733-32740]:PrimitiveType[32561-32568]"
    }, {
      "left" : "compareToUndefined",
      "right" : "compareToUndefined",
      "info" : "SimpleName[32741-32759]:SimpleName[32569-32587]"
    }, {
      "left" : "Node value",
      "right" : "Node value",
      "info" : "SingleVariableDeclaration[32760-32770]:SingleVariableDeclaration[32588-32598]"
    }, {
      "left" : "int op",
      "right" : "int op",
      "info" : "SingleVariableDeclaration[32772-32778]:SingleVariableDeclaration[32600-32606]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32780-33593]:Block[32608-33421]"
    }, {
      "left" : "boolean valueUndefined = ((Token.NAME == value.getType()\n        && value.getString().equals(\"undefined\"))\n        || (Token.VOID == value.getType()\n            && NodeUtil.isLiteralValue(value.getFirstChild(), false)));",
      "right" : "boolean valueUndefined = ((Token.NAME == value.getType()\n        && value.getString().equals(\"undefined\"))\n        || (Token.VOID == value.getType()\n            && NodeUtil.isLiteralValue(value.getFirstChild(), false)));",
      "info" : "VariableDeclarationStatement[32786-33006]:VariableDeclarationStatement[32614-32834]"
    }, {
      "left" : "boolean valueNull = (Token.NULL == value.getType());",
      "right" : "boolean valueNull = (Token.NULL == value.getType());",
      "info" : "VariableDeclarationStatement[33011-33063]:VariableDeclarationStatement[32839-32891]"
    }, {
      "left" : "boolean equivalent = valueUndefined || valueNull;",
      "right" : "boolean equivalent = valueUndefined || valueNull;",
      "info" : "VariableDeclarationStatement[33068-33117]:VariableDeclarationStatement[32896-32945]"
    }, {
      "left" : "switch (op) {\n      case Token.EQ:\n        // undefined is only equal to null or an undefined value\n        return equivalent;\n      case Token.NE:\n        return !equivalent;\n      case Token.SHEQ:\n        return valueUndefined;\n      case Token.SHNE:\n        return !valueUndefined;\n      case Token.LT:\n      case Token.GT:\n      case Token.LE:\n      case Token.GE:\n        return false;\n      default:\n        throw new IllegalStateException(\"unexpected.\");\n    }",
      "right" : "switch (op) {\n      case Token.EQ:\n        // undefined is only equal to null or an undefined value\n        return equivalent;\n      case Token.NE:\n        return !equivalent;\n      case Token.SHEQ:\n        return valueUndefined;\n      case Token.SHNE:\n        return !valueUndefined;\n      case Token.LT:\n      case Token.GT:\n      case Token.LE:\n      case Token.GE:\n        return false;\n      default:\n        throw new IllegalStateException(\"unexpected.\");\n    }",
      "info" : "SwitchStatement[33122-33589]:SwitchStatement[32950-33417]"
    }, {
      "left" : "case Token.EQ:",
      "right" : "case Token.EQ:",
      "info" : "SwitchCase[33142-33156]:SwitchCase[32970-32984]"
    }, {
      "left" : "return equivalent;",
      "right" : "return equivalent;",
      "info" : "ReturnStatement[33230-33248]:ReturnStatement[33058-33076]"
    }, {
      "left" : "case Token.NE:",
      "right" : "case Token.NE:",
      "info" : "SwitchCase[33255-33269]:SwitchCase[33083-33097]"
    }, {
      "left" : "return !equivalent;",
      "right" : "return !equivalent;",
      "info" : "ReturnStatement[33278-33297]:ReturnStatement[33106-33125]"
    }, {
      "left" : "case Token.SHEQ:",
      "right" : "case Token.SHEQ:",
      "info" : "SwitchCase[33304-33320]:SwitchCase[33132-33148]"
    }, {
      "left" : "return valueUndefined;",
      "right" : "return valueUndefined;",
      "info" : "ReturnStatement[33329-33351]:ReturnStatement[33157-33179]"
    }, {
      "left" : "case Token.SHNE:",
      "right" : "case Token.SHNE:",
      "info" : "SwitchCase[33358-33374]:SwitchCase[33186-33202]"
    }, {
      "left" : "return !valueUndefined;",
      "right" : "return !valueUndefined;",
      "info" : "ReturnStatement[33383-33406]:ReturnStatement[33211-33234]"
    }, {
      "left" : "case Token.LT:",
      "right" : "case Token.LT:",
      "info" : "SwitchCase[33413-33427]:SwitchCase[33241-33255]"
    }, {
      "left" : "case Token.GT:",
      "right" : "case Token.GT:",
      "info" : "SwitchCase[33434-33448]:SwitchCase[33262-33276]"
    }, {
      "left" : "case Token.LE:",
      "right" : "case Token.LE:",
      "info" : "SwitchCase[33455-33469]:SwitchCase[33283-33297]"
    }, {
      "left" : "case Token.GE:",
      "right" : "case Token.GE:",
      "info" : "SwitchCase[33476-33490]:SwitchCase[33304-33318]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[33499-33512]:ReturnStatement[33327-33340]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[33519-33527]:SwitchCase[33347-33355]"
    }, {
      "left" : "throw new IllegalStateException(\"unexpected.\");",
      "right" : "throw new IllegalStateException(\"unexpected.\");",
      "info" : "ThrowStatement[33536-33583]:ThrowStatement[33364-33411]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[33713-33720]:Modifier[33541-33548]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[33721-33725]:SimpleType[33549-33553]"
    }, {
      "left" : "tryFoldCtorCall",
      "right" : "tryFoldCtorCall",
      "info" : "SimpleName[33726-33741]:SimpleName[33554-33569]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[33742-33748]:SingleVariableDeclaration[33570-33576]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33750-33978]:Block[33578-33806]"
    }, {
      "left" : "Preconditions.checkArgument(n.getType() == Token.NEW);",
      "right" : "Preconditions.checkArgument(n.getType() == Token.NEW);",
      "info" : "ExpressionStatement[33756-33810]:ExpressionStatement[33584-33638]"
    }, {
      "left" : "if (inForcedStringContext(n))",
      "right" : "if (inForcedStringContext(n))",
      "info" : "IfStatement[33877-33960]:IfStatement[33705-33788]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33907-33960]:Block[33735-33788]"
    }, {
      "left" : "return tryFoldInForcedStringContext(n);",
      "right" : "return tryFoldInForcedStringContext(n);",
      "info" : "ReturnStatement[33915-33954]:ReturnStatement[33743-33782]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[33965-33974]:ReturnStatement[33793-33802]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[34046-34053]:Modifier[33874-33881]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[34054-34061]:PrimitiveType[33882-33889]"
    }, {
      "left" : "inForcedStringContext",
      "right" : "inForcedStringContext",
      "info" : "SimpleName[34062-34083]:SimpleName[33890-33911]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[34084-34090]:SingleVariableDeclaration[33912-33918]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34092-34195]:Block[33920-34023]"
    }, {
      "left" : "return n.getParent().getType() == Token.GETELEM &&\n        n.getParent().getLastChild() == n;",
      "right" : "return n.getParent().getType() == Token.GETELEM &&\n        n.getParent().getLastChild() == n;",
      "info" : "ReturnStatement[34098-34191]:ReturnStatement[33926-34019]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[34199-34206]:Modifier[34027-34034]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[34207-34211]:SimpleType[34035-34039]"
    }, {
      "left" : "tryFoldInForcedStringContext",
      "right" : "tryFoldInForcedStringContext",
      "info" : "SimpleName[34212-34240]:SimpleName[34040-34068]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[34241-34247]:SingleVariableDeclaration[34069-34075]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34249-35113]:Block[34077-34941]"
    }, {
      "left" : "Preconditions.checkArgument(n.getType() == Token.NEW);",
      "right" : "Preconditions.checkArgument(n.getType() == Token.NEW);",
      "info" : "ExpressionStatement[34303-34357]:ExpressionStatement[34131-34185]"
    }, {
      "left" : "Node objectType = n.getFirstChild();",
      "right" : "Node objectType = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[34363-34399]:VariableDeclarationStatement[34191-34227]"
    }, {
      "left" : "if (objectType.getType() != Token.NAME)",
      "right" : "if (objectType.getType() != Token.NAME)",
      "info" : "IfStatement[34404-34467]:IfStatement[34232-34295]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34444-34467]:Block[34272-34295]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[34452-34461]:ReturnStatement[34280-34289]"
    }, {
      "left" : "if (objectType.getString().equals(\"String\"))",
      "right" : "if (objectType.getString().equals(\"String\"))",
      "info" : "IfStatement[34473-35095]:IfStatement[34301-34923]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34518-35095]:Block[34346-34923]"
    }, {
      "left" : "Node value = objectType.getNext();",
      "right" : "Node value = objectType.getNext();",
      "info" : "VariableDeclarationStatement[34526-34560]:VariableDeclarationStatement[34354-34388]"
    }, {
      "left" : "String stringValue = null;",
      "right" : "String stringValue = null;",
      "info" : "VariableDeclarationStatement[34567-34593]:VariableDeclarationStatement[34395-34421]"
    }, {
      "left" : "if (value == null)",
      "right" : "if (value == null)",
      "info" : "IfStatement[34600-34803]:IfStatement[34428-34631]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34619-34654]:Block[34447-34482]"
    }, {
      "left" : "stringValue = \"\";",
      "right" : "stringValue = \"\";",
      "info" : "ExpressionStatement[34629-34646]:ExpressionStatement[34457-34474]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34660-34803]:Block[34488-34631]"
    }, {
      "left" : "if (!NodeUtil.isImmutableValue(value))",
      "right" : "if (!NodeUtil.isImmutableValue(value))",
      "info" : "IfStatement[34670-34740]:IfStatement[34498-34568]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34709-34740]:Block[34537-34568]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[34721-34730]:ReturnStatement[34549-34558]"
    }, {
      "left" : "stringValue = NodeUtil.getStringValue(value);",
      "right" : "stringValue = NodeUtil.getStringValue(value);",
      "info" : "ExpressionStatement[34750-34795]:ExpressionStatement[34578-34623]"
    }, {
      "left" : "if (stringValue == null)",
      "right" : "if (stringValue == null)",
      "info" : "IfStatement[34811-34863]:IfStatement[34639-34691]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34836-34863]:Block[34664-34691]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[34846-34855]:ReturnStatement[34674-34683]"
    }, {
      "left" : "Node parent = n.getParent();",
      "right" : "Node parent = n.getParent();",
      "info" : "VariableDeclarationStatement[34871-34899]:VariableDeclarationStatement[34699-34727]"
    }, {
      "left" : "Node newString = Node.newString(stringValue);",
      "right" : "Node newString = Node.newString(stringValue);",
      "info" : "VariableDeclarationStatement[34906-34951]:VariableDeclarationStatement[34734-34779]"
    }, {
      "left" : "parent.replaceChild(n, newString);",
      "right" : "parent.replaceChild(n, newString);",
      "info" : "ExpressionStatement[34959-34993]:ExpressionStatement[34787-34821]"
    }, {
      "left" : "newString.copyInformationFrom(parent);",
      "right" : "newString.copyInformationFrom(parent);",
      "info" : "ExpressionStatement[35000-35038]:ExpressionStatement[34828-34866]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[35045-35064]:ExpressionStatement[34873-34892]"
    }, {
      "left" : "return newString;",
      "right" : "return newString;",
      "info" : "ReturnStatement[35072-35089]:ReturnStatement[34900-34917]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[35100-35109]:ReturnStatement[34928-34937]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[35117-35124]:Modifier[34945-34952]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[35125-35129]:SimpleType[34953-34957]"
    }, {
      "left" : "tryFoldKnownMethods",
      "right" : "tryFoldKnownMethods",
      "info" : "SimpleName[35130-35149]:SimpleName[34958-34977]"
    }, {
      "left" : "Node subtree",
      "right" : "Node subtree",
      "info" : "SingleVariableDeclaration[35150-35162]:SingleVariableDeclaration[34978-34990]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35164-35420]:Block[34992-35248]"
    }, {
      "left" : "subtree = tryFoldArrayJoin(subtree);",
      "right" : "subtree = tryFoldArrayJoin(subtree);",
      "info" : "ExpressionStatement[35257-35293]:ExpressionStatement[35085-35121]"
    }, {
      "left" : "if (subtree.getType() == Token.CALL)",
      "right" : "if (subtree.getType() == Token.CALL)",
      "info" : "IfStatement[35299-35395]:IfStatement[35127-35223]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35336-35395]:Block[35164-35223]"
    }, {
      "left" : "subtree = tryFoldKnownStringMethods(subtree);",
      "right" : "subtree = tryFoldKnownStringMethods(subtree);",
      "info" : "ExpressionStatement[35344-35389]:ExpressionStatement[35172-35217]"
    }, {
      "left" : "return subtree;",
      "right" : "return subtree;",
      "info" : "ReturnStatement[35401-35416]:ReturnStatement[35229-35244]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[35522-35529]:Modifier[35350-35357]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[35530-35534]:SimpleType[35358-35362]"
    }, {
      "left" : "tryFoldKnownStringMethods",
      "right" : "tryFoldKnownStringMethods",
      "info" : "SimpleName[35535-35560]:SimpleName[35363-35388]"
    }, {
      "left" : "Node subtree",
      "right" : "Node subtree",
      "info" : "SingleVariableDeclaration[35561-35573]:SingleVariableDeclaration[35389-35401]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35575-37108]:Block[35403-36936]"
    }, {
      "left" : "Preconditions.checkArgument(subtree.getType() == Token.CALL);",
      "right" : "Preconditions.checkArgument(subtree.getType() == Token.CALL);",
      "info" : "ExpressionStatement[35581-35642]:ExpressionStatement[35409-35470]"
    }, {
      "left" : "Node callTarget = subtree.getFirstChild();",
      "right" : "Node callTarget = subtree.getFirstChild();",
      "info" : "VariableDeclarationStatement[35747-35789]:VariableDeclarationStatement[35575-35617]"
    }, {
      "left" : "if (callTarget == null)",
      "right" : "if (callTarget == null)",
      "info" : "IfStatement[35794-35847]:IfStatement[35622-35675]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35818-35847]:Block[35646-35675]"
    }, {
      "left" : "return subtree;",
      "right" : "return subtree;",
      "info" : "ReturnStatement[35826-35841]:ReturnStatement[35654-35669]"
    }, {
      "left" : "if (!NodeUtil.isGet(callTarget))",
      "right" : "if (!NodeUtil.isGet(callTarget))",
      "info" : "IfStatement[35853-35915]:IfStatement[35681-35743]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35886-35915]:Block[35714-35743]"
    }, {
      "left" : "return subtree;",
      "right" : "return subtree;",
      "info" : "ReturnStatement[35894-35909]:ReturnStatement[35722-35737]"
    }, {
      "left" : "Node stringNode = callTarget.getFirstChild();",
      "right" : "Node stringNode = callTarget.getFirstChild();",
      "info" : "VariableDeclarationStatement[35921-35966]:VariableDeclarationStatement[35749-35794]"
    }, {
      "left" : "Node functionName = stringNode.getNext();",
      "right" : "Node functionName = stringNode.getNext();",
      "info" : "VariableDeclarationStatement[35971-36012]:VariableDeclarationStatement[35799-35840]"
    }, {
      "left" : "if ((stringNode.getType() != Token.STRING) || (\n        (functionName.getType() != Token.STRING)))",
      "right" : "if ((stringNode.getType() != Token.STRING) || (\n        (functionName.getType() != Token.STRING)))",
      "info" : "IfStatement[36018-36146]:IfStatement[35846-35974]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36117-36146]:Block[35945-35974]"
    }, {
      "left" : "return subtree;",
      "right" : "return subtree;",
      "info" : "ReturnStatement[36125-36140]:ReturnStatement[35953-35968]"
    }, {
      "left" : "String functionNameString = functionName.getString();",
      "right" : "String functionNameString = functionName.getString();",
      "info" : "VariableDeclarationStatement[36152-36205]:VariableDeclarationStatement[35980-36033]"
    }, {
      "left" : "Node firstArg = callTarget.getNext();",
      "right" : "Node firstArg = callTarget.getNext();",
      "info" : "VariableDeclarationStatement[36210-36247]:VariableDeclarationStatement[36038-36075]"
    }, {
      "left" : "if (firstArg == null)",
      "right" : "if (firstArg == null)",
      "info" : "IfStatement[36252-37083]:IfStatement[36080-36911]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36274-36556]:Block[36102-36384]"
    }, {
      "left" : "if (functionNameString.equals(\"toLowerCase\"))",
      "right" : "if (functionNameString.equals(\"toLowerCase\"))",
      "info" : "IfStatement[36282-36528]:IfStatement[36110-36356]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36328-36402]:Block[36156-36230]"
    }, {
      "left" : "subtree = tryFoldStringToLowerCase(subtree, stringNode);",
      "right" : "subtree = tryFoldStringToLowerCase(subtree, stringNode);",
      "info" : "ExpressionStatement[36338-36394]:ExpressionStatement[36166-36222]"
    }, {
      "left" : "if (functionNameString.equals(\"toUpperCase\"))",
      "right" : "if (functionNameString.equals(\"toUpperCase\"))",
      "info" : "IfStatement[36408-36528]:IfStatement[36236-36356]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36454-36528]:Block[36282-36356]"
    }, {
      "left" : "subtree = tryFoldStringToUpperCase(subtree, stringNode);",
      "right" : "subtree = tryFoldStringToUpperCase(subtree, stringNode);",
      "info" : "ExpressionStatement[36464-36520]:ExpressionStatement[36292-36348]"
    }, {
      "left" : "return subtree;",
      "right" : "return subtree;",
      "info" : "ReturnStatement[36535-36550]:ReturnStatement[36363-36378]"
    }, {
      "left" : "if (NodeUtil.isImmutableValue(firstArg))",
      "right" : "if (NodeUtil.isImmutableValue(firstArg))",
      "info" : "IfStatement[36562-37083]:IfStatement[36390-36911]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36603-37083]:Block[36431-36911]"
    }, {
      "left" : "if (functionNameString.equals(\"indexOf\") ||\n          functionNameString.equals(\"lastIndexOf\"))",
      "right" : "if (functionNameString.equals(\"indexOf\") ||\n          functionNameString.equals(\"lastIndexOf\"))",
      "info" : "IfStatement[36611-37077]:IfStatement[36439-36905]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36707-36819]:Block[36535-36647]"
    }, {
      "left" : "subtree = tryFoldStringIndexOf(subtree, functionNameString,\n            stringNode, firstArg);",
      "right" : "subtree = tryFoldStringIndexOf(subtree, functionNameString,\n            stringNode, firstArg);",
      "info" : "ExpressionStatement[36717-36811]:ExpressionStatement[36545-36639]"
    }, {
      "left" : "if (functionNameString.equals(\"substr\"))",
      "right" : "if (functionNameString.equals(\"substr\"))",
      "info" : "IfStatement[36825-37077]:IfStatement[36653-36905]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36866-36945]:Block[36694-36773]"
    }, {
      "left" : "subtree = tryFoldStringSubstr(subtree, stringNode, firstArg);",
      "right" : "subtree = tryFoldStringSubstr(subtree, stringNode, firstArg);",
      "info" : "ExpressionStatement[36876-36937]:ExpressionStatement[36704-36765]"
    }, {
      "left" : "if (functionNameString.equals(\"substring\"))",
      "right" : "if (functionNameString.equals(\"substring\"))",
      "info" : "IfStatement[36951-37077]:IfStatement[36779-36905]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36995-37077]:Block[36823-36905]"
    }, {
      "left" : "subtree = tryFoldStringSubstring(subtree, stringNode, firstArg);",
      "right" : "subtree = tryFoldStringSubstring(subtree, stringNode, firstArg);",
      "info" : "ExpressionStatement[37005-37069]:ExpressionStatement[36833-36897]"
    }, {
      "left" : "return subtree;",
      "right" : "return subtree;",
      "info" : "ReturnStatement[37089-37104]:ReturnStatement[36917-36932]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[37162-37169]:Modifier[36990-36997]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[37170-37174]:SimpleType[36998-37002]"
    }, {
      "left" : "tryFoldStringToLowerCase",
      "right" : "tryFoldStringToLowerCase",
      "info" : "SimpleName[37175-37199]:SimpleName[37003-37027]"
    }, {
      "left" : "Node subtree",
      "right" : "Node subtree",
      "info" : "SingleVariableDeclaration[37200-37212]:SingleVariableDeclaration[37028-37040]"
    }, {
      "left" : "Node stringNode",
      "right" : "Node stringNode",
      "info" : "SingleVariableDeclaration[37214-37229]:SingleVariableDeclaration[37042-37057]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37231-37519]:Block[37059-37347]"
    }, {
      "left" : "String lowered = stringNode.getString().toLowerCase(ROOT_LOCALE);",
      "right" : "String lowered = stringNode.getString().toLowerCase(ROOT_LOCALE);",
      "info" : "VariableDeclarationStatement[37294-37359]:VariableDeclarationStatement[37122-37187]"
    }, {
      "left" : "Node replacement = Node.newString(lowered);",
      "right" : "Node replacement = Node.newString(lowered);",
      "info" : "VariableDeclarationStatement[37364-37407]:VariableDeclarationStatement[37192-37235]"
    }, {
      "left" : "subtree.getParent().replaceChild(subtree, replacement);",
      "right" : "subtree.getParent().replaceChild(subtree, replacement);",
      "info" : "ExpressionStatement[37412-37467]:ExpressionStatement[37240-37295]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[37472-37491]:ExpressionStatement[37300-37319]"
    }, {
      "left" : "return replacement;",
      "right" : "return replacement;",
      "info" : "ReturnStatement[37496-37515]:ReturnStatement[37324-37343]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[37573-37580]:Modifier[37401-37408]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[37581-37585]:SimpleType[37409-37413]"
    }, {
      "left" : "tryFoldStringToUpperCase",
      "right" : "tryFoldStringToUpperCase",
      "info" : "SimpleName[37586-37610]:SimpleName[37414-37438]"
    }, {
      "left" : "Node subtree",
      "right" : "Node subtree",
      "info" : "SingleVariableDeclaration[37611-37623]:SingleVariableDeclaration[37439-37451]"
    }, {
      "left" : "Node stringNode",
      "right" : "Node stringNode",
      "info" : "SingleVariableDeclaration[37625-37640]:SingleVariableDeclaration[37453-37468]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37642-37930]:Block[37470-37758]"
    }, {
      "left" : "String uppered = stringNode.getString().toUpperCase(ROOT_LOCALE);",
      "right" : "String uppered = stringNode.getString().toUpperCase(ROOT_LOCALE);",
      "info" : "VariableDeclarationStatement[37705-37770]:VariableDeclarationStatement[37533-37598]"
    }, {
      "left" : "Node replacement = Node.newString(uppered);",
      "right" : "Node replacement = Node.newString(uppered);",
      "info" : "VariableDeclarationStatement[37775-37818]:VariableDeclarationStatement[37603-37646]"
    }, {
      "left" : "subtree.getParent().replaceChild(subtree, replacement);",
      "right" : "subtree.getParent().replaceChild(subtree, replacement);",
      "info" : "ExpressionStatement[37823-37878]:ExpressionStatement[37651-37706]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[37883-37902]:ExpressionStatement[37711-37730]"
    }, {
      "left" : "return replacement;",
      "right" : "return replacement;",
      "info" : "ReturnStatement[37907-37926]:ReturnStatement[37735-37754]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[38074-38081]:Modifier[37902-37909]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[38082-38086]:SimpleType[37910-37914]"
    }, {
      "left" : "tryFoldStringIndexOf",
      "right" : "tryFoldStringIndexOf",
      "info" : "SimpleName[38087-38107]:SimpleName[37915-37935]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[38115-38121]:SingleVariableDeclaration[37943-37949]"
    }, {
      "left" : "String functionName",
      "right" : "String functionName",
      "info" : "SingleVariableDeclaration[38123-38142]:SingleVariableDeclaration[37951-37970]"
    }, {
      "left" : "Node lstringNode",
      "right" : "Node lstringNode",
      "info" : "SingleVariableDeclaration[38144-38160]:SingleVariableDeclaration[37972-37988]"
    }, {
      "left" : "Node firstArg",
      "right" : "Node firstArg",
      "info" : "SingleVariableDeclaration[38162-38175]:SingleVariableDeclaration[37990-38003]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38177-39259]:Block[38005-39087]"
    }, {
      "left" : "Preconditions.checkArgument(n.getType() == Token.CALL);",
      "right" : "Preconditions.checkArgument(n.getType() == Token.CALL);",
      "info" : "ExpressionStatement[38183-38238]:ExpressionStatement[38011-38066]"
    }, {
      "left" : "Preconditions.checkArgument(lstringNode.getType() == Token.STRING);",
      "right" : "Preconditions.checkArgument(lstringNode.getType() == Token.STRING);",
      "info" : "ExpressionStatement[38243-38310]:ExpressionStatement[38071-38138]"
    }, {
      "left" : "String lstring = NodeUtil.getStringValue(lstringNode);",
      "right" : "String lstring = NodeUtil.getStringValue(lstringNode);",
      "info" : "VariableDeclarationStatement[38316-38370]:VariableDeclarationStatement[38144-38198]"
    }, {
      "left" : "boolean isIndexOf = functionName.equals(\"indexOf\");",
      "right" : "boolean isIndexOf = functionName.equals(\"indexOf\");",
      "info" : "VariableDeclarationStatement[38375-38426]:VariableDeclarationStatement[38203-38254]"
    }, {
      "left" : "Node secondArg = firstArg.getNext();",
      "right" : "Node secondArg = firstArg.getNext();",
      "info" : "VariableDeclarationStatement[38431-38467]:VariableDeclarationStatement[38259-38295]"
    }, {
      "left" : "String searchValue = NodeUtil.getStringValue(firstArg);",
      "right" : "String searchValue = NodeUtil.getStringValue(firstArg);",
      "info" : "VariableDeclarationStatement[38472-38527]:VariableDeclarationStatement[38300-38355]"
    }, {
      "left" : "if (searchValue == null)",
      "right" : "if (searchValue == null)",
      "info" : "IfStatement[38575-38623]:IfStatement[38403-38451]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38600-38623]:Block[38428-38451]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[38608-38617]:ReturnStatement[38436-38445]"
    }, {
      "left" : "int fromIndex = isIndexOf ? 0 : lstring.length();",
      "right" : "int fromIndex = isIndexOf ? 0 : lstring.length();",
      "info" : "VariableDeclarationStatement[38628-38677]:VariableDeclarationStatement[38456-38505]"
    }, {
      "left" : "if (secondArg != null)",
      "right" : "if (secondArg != null)",
      "info" : "IfStatement[38682-38973]:IfStatement[38510-38801]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38705-38973]:Block[38533-38801]"
    }, {
      "left" : "if ((secondArg.getNext() != null) ||\n          (secondArg.getType() != Token.NUMBER))",
      "right" : "if ((secondArg.getNext() != null) ||\n          (secondArg.getType() != Token.NUMBER))",
      "info" : "IfStatement[38790-38967]:IfStatement[38618-38795]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38876-38903]:Block[38704-38731]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[38886-38895]:ReturnStatement[38714-38723]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38909-38967]:Block[38737-38795]"
    }, {
      "left" : "fromIndex = (int) secondArg.getDouble();",
      "right" : "fromIndex = (int) secondArg.getDouble();",
      "info" : "ExpressionStatement[38919-38959]:ExpressionStatement[38747-38787]"
    }, {
      "left" : "int indexVal = isIndexOf ? lstring.indexOf(searchValue, fromIndex)\n                             : lstring.lastIndexOf(searchValue, fromIndex);",
      "right" : "int indexVal = isIndexOf ? lstring.indexOf(searchValue, fromIndex)\n                             : lstring.lastIndexOf(searchValue, fromIndex);",
      "info" : "VariableDeclarationStatement[38978-39120]:VariableDeclarationStatement[38806-38948]"
    }, {
      "left" : "Node newNode = Node.newNumber(indexVal);",
      "right" : "Node newNode = Node.newNumber(indexVal);",
      "info" : "VariableDeclarationStatement[39125-39165]:VariableDeclarationStatement[38953-38993]"
    }, {
      "left" : "n.getParent().replaceChild(n, newNode);",
      "right" : "n.getParent().replaceChild(n, newNode);",
      "info" : "ExpressionStatement[39170-39209]:ExpressionStatement[38998-39037]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[39215-39234]:ExpressionStatement[39043-39062]"
    }, {
      "left" : "return newNode;",
      "right" : "return newNode;",
      "info" : "ReturnStatement[39240-39255]:ReturnStatement[39068-39083]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[39342-39349]:Modifier[39170-39177]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[39350-39354]:SimpleType[39178-39182]"
    }, {
      "left" : "tryFoldArrayJoin",
      "right" : "tryFoldArrayJoin",
      "info" : "SimpleName[39355-39371]:SimpleName[39183-39199]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[39372-39378]:SingleVariableDeclaration[39200-39206]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39380-42747]:Block[39208-42575]"
    }, {
      "left" : "Node callTarget = n.getFirstChild();",
      "right" : "Node callTarget = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[39386-39422]:VariableDeclarationStatement[39214-39250]"
    }, {
      "left" : "if (callTarget == null || !NodeUtil.isGetProp(callTarget))",
      "right" : "if (callTarget == null || !NodeUtil.isGetProp(callTarget))",
      "info" : "IfStatement[39428-39510]:IfStatement[39256-39338]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39487-39510]:Block[39315-39338]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[39495-39504]:ReturnStatement[39323-39332]"
    }, {
      "left" : "Node right = callTarget.getNext();",
      "right" : "Node right = callTarget.getNext();",
      "info" : "VariableDeclarationStatement[39516-39550]:VariableDeclarationStatement[39344-39378]"
    }, {
      "left" : "if (right != null && !NodeUtil.isImmutableValue(right))",
      "right" : "if (right != null && !NodeUtil.isImmutableValue(right))",
      "info" : "IfStatement[39555-39634]:IfStatement[39383-39462]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39611-39634]:Block[39439-39462]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[39619-39628]:ReturnStatement[39447-39456]"
    }, {
      "left" : "Node arrayNode = callTarget.getFirstChild();",
      "right" : "Node arrayNode = callTarget.getFirstChild();",
      "info" : "VariableDeclarationStatement[39640-39684]:VariableDeclarationStatement[39468-39512]"
    }, {
      "left" : "Node functionName = arrayNode.getNext();",
      "right" : "Node functionName = arrayNode.getNext();",
      "info" : "VariableDeclarationStatement[39689-39729]:VariableDeclarationStatement[39517-39557]"
    }, {
      "left" : "if ((arrayNode.getType() != Token.ARRAYLIT) ||\n        !functionName.getString().equals(\"join\"))",
      "right" : "if ((arrayNode.getType() != Token.ARRAYLIT) ||\n        !functionName.getString().equals(\"join\"))",
      "info" : "IfStatement[39735-39855]:IfStatement[39563-39683]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39832-39855]:Block[39660-39683]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[39840-39849]:ReturnStatement[39668-39677]"
    }, {
      "left" : "String joinString = (right == null) ? \",\" : NodeUtil.getStringValue(right);",
      "right" : "String joinString = (right == null) ? \",\" : NodeUtil.getStringValue(right);",
      "info" : "VariableDeclarationStatement[39861-39936]:VariableDeclarationStatement[39689-39764]"
    }, {
      "left" : "List<Node> arrayFoldedChildren = Lists.newLinkedList();",
      "right" : "List<Node> arrayFoldedChildren = Lists.newLinkedList();",
      "info" : "VariableDeclarationStatement[39941-39996]:VariableDeclarationStatement[39769-39824]"
    }, {
      "left" : "StringBuilder sb = null;",
      "right" : "StringBuilder sb = null;",
      "info" : "VariableDeclarationStatement[40001-40025]:VariableDeclarationStatement[39829-39853]"
    }, {
      "left" : "int foldedSize = 0;",
      "right" : "int foldedSize = 0;",
      "info" : "VariableDeclarationStatement[40030-40049]:VariableDeclarationStatement[39858-39877]"
    }, {
      "left" : "Node prev = null;",
      "right" : "Node prev = null;",
      "info" : "VariableDeclarationStatement[40054-40071]:VariableDeclarationStatement[39882-39899]"
    }, {
      "left" : "Node elem = arrayNode.getFirstChild();",
      "right" : "Node elem = arrayNode.getFirstChild();",
      "info" : "VariableDeclarationStatement[40076-40114]:VariableDeclarationStatement[39904-39942]"
    }, {
      "left" : "while (elem != null)",
      "right" : "while (elem != null)",
      "info" : "WhileStatement[40156-40895]:WhileStatement[39984-40723]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40177-40895]:Block[40005-40723]"
    }, {
      "left" : "if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY)",
      "right" : "if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY)",
      "info" : "IfStatement[40185-40841]:IfStatement[40013-40669]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40255-40448]:Block[40083-40276]"
    }, {
      "left" : "if (sb == null)",
      "right" : "if (sb == null)",
      "info" : "IfStatement[40265-40378]:IfStatement[40093-40206]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40281-40328]:Block[40109-40156]"
    }, {
      "left" : "sb = new StringBuilder();",
      "right" : "sb = new StringBuilder();",
      "info" : "ExpressionStatement[40293-40318]:ExpressionStatement[40121-40146]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40334-40378]:Block[40162-40206]"
    }, {
      "left" : "sb.append(joinString);",
      "right" : "sb.append(joinString);",
      "info" : "ExpressionStatement[40346-40368]:ExpressionStatement[40174-40196]"
    }, {
      "left" : "sb.append(NodeUtil.getArrayElementStringValue(elem));",
      "right" : "sb.append(NodeUtil.getArrayElementStringValue(elem));",
      "info" : "ExpressionStatement[40387-40440]:ExpressionStatement[40215-40268]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40454-40841]:Block[40282-40669]"
    }, {
      "left" : "if (sb != null)",
      "right" : "if (sb != null)",
      "info" : "IfStatement[40464-40737]:IfStatement[40292-40565]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40480-40737]:Block[40308-40565]"
    }, {
      "left" : "Preconditions.checkNotNull(prev);",
      "right" : "Preconditions.checkNotNull(prev);",
      "info" : "ExpressionStatement[40492-40525]:ExpressionStatement[40320-40353]"
    }, {
      "left" : "foldedSize += sb.length() + 2;",
      "right" : "foldedSize += sb.length() + 2;",
      "info" : "ExpressionStatement[40569-40599]:ExpressionStatement[40397-40427]"
    }, {
      "left" : "arrayFoldedChildren.add(\n              Node.newString(sb.toString()).copyInformationFrom(prev));",
      "right" : "arrayFoldedChildren.add(\n              Node.newString(sb.toString()).copyInformationFrom(prev));",
      "info" : "ExpressionStatement[40610-40706]:ExpressionStatement[40438-40534]"
    }, {
      "left" : "sb = null;",
      "right" : "sb = null;",
      "info" : "ExpressionStatement[40717-40727]:ExpressionStatement[40545-40555]"
    }, {
      "left" : "foldedSize += InlineCostEstimator.getCost(elem);",
      "right" : "foldedSize += InlineCostEstimator.getCost(elem);",
      "info" : "ExpressionStatement[40746-40794]:ExpressionStatement[40574-40622]"
    }, {
      "left" : "arrayFoldedChildren.add(elem);",
      "right" : "arrayFoldedChildren.add(elem);",
      "info" : "ExpressionStatement[40803-40833]:ExpressionStatement[40631-40661]"
    }, {
      "left" : "prev = elem;",
      "right" : "prev = elem;",
      "info" : "ExpressionStatement[40848-40860]:ExpressionStatement[40676-40688]"
    }, {
      "left" : "elem = elem.getNext();",
      "right" : "elem = elem.getNext();",
      "info" : "ExpressionStatement[40867-40889]:ExpressionStatement[40695-40717]"
    }, {
      "left" : "if (sb != null)",
      "right" : "if (sb != null)",
      "info" : "IfStatement[40901-41129]:IfStatement[40729-40957]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40917-41129]:Block[40745-40957]"
    }, {
      "left" : "Preconditions.checkNotNull(prev);",
      "right" : "Preconditions.checkNotNull(prev);",
      "info" : "ExpressionStatement[40925-40958]:ExpressionStatement[40753-40786]"
    }, {
      "left" : "foldedSize += sb.length() + 2;",
      "right" : "foldedSize += sb.length() + 2;",
      "info" : "ExpressionStatement[40994-41024]:ExpressionStatement[40822-40852]"
    }, {
      "left" : "arrayFoldedChildren.add(\n          Node.newString(sb.toString()).copyInformationFrom(prev));",
      "right" : "arrayFoldedChildren.add(\n          Node.newString(sb.toString()).copyInformationFrom(prev));",
      "info" : "ExpressionStatement[41031-41123]:ExpressionStatement[40859-40951]"
    }, {
      "left" : "foldedSize += arrayFoldedChildren.size() - 1;",
      "right" : "foldedSize += arrayFoldedChildren.size() - 1;",
      "info" : "ExpressionStatement[41161-41206]:ExpressionStatement[40989-41034]"
    }, {
      "left" : "int originalSize = InlineCostEstimator.getCost(n);",
      "right" : "int originalSize = InlineCostEstimator.getCost(n);",
      "info" : "VariableDeclarationStatement[41212-41262]:VariableDeclarationStatement[41040-41090]"
    }, {
      "left" : "switch (arrayFoldedChildren.size()) {\n      case 0:\n        Node emptyStringNode = Node.newString(\"\");\n        n.getParent().replaceChild(n, emptyStringNode);\n        reportCodeChange();\n        return emptyStringNode;\n      case 1:\n        Node foldedStringNode = arrayFoldedChildren.remove(0);\n        if (foldedSize > originalSize) {\n          return n;\n        }\n        arrayNode.detachChildren();\n        if (foldedStringNode.getType() != Token.STRING) {\n          // If the Node is not a string literal, ensure that\n          // it is coerced to a string.\n          Node replacement = new Node(Token.ADD,\n              Node.newString(\"\").copyInformationFrom(n),\n              foldedStringNode);\n          foldedStringNode = replacement;\n        }\n        n.getParent().replaceChild(n, foldedStringNode);\n        reportCodeChange();\n        return foldedStringNode;\n      default:\n        // No folding could actually be performed.\n        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n          return n;\n        }\n        int kJoinOverhead = \"[].join()\".length();\n        foldedSize += kJoinOverhead;\n        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;\n        if (foldedSize > originalSize) {\n          return n;\n        }\n        arrayNode.detachChildren();\n        for (Node node : arrayFoldedChildren) {\n          arrayNode.addChildToBack(node);\n        }\n        reportCodeChange();\n        break;\n    }",
      "right" : "switch (arrayFoldedChildren.size()) {\n      case 0:\n        Node emptyStringNode = Node.newString(\"\");\n        n.getParent().replaceChild(n, emptyStringNode);\n        reportCodeChange();\n        return emptyStringNode;\n      case 1:\n        Node foldedStringNode = arrayFoldedChildren.remove(0);\n        if (foldedSize > originalSize) {\n          return n;\n        }\n        arrayNode.detachChildren();\n        if (foldedStringNode.getType() != Token.STRING) {\n          // If the Node is not a string literal, ensure that\n          // it is coerced to a string.\n          Node replacement = new Node(Token.ADD,\n              Node.newString(\"\").copyInformationFrom(n),\n              foldedStringNode);\n          foldedStringNode = replacement;\n        }\n        n.getParent().replaceChild(n, foldedStringNode);\n        reportCodeChange();\n        return foldedStringNode;\n      default:\n        // No folding could actually be performed.\n        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n          return n;\n        }\n        int kJoinOverhead = \"[].join()\".length();\n        foldedSize += kJoinOverhead;\n        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;\n        if (foldedSize > originalSize) {\n          return n;\n        }\n        arrayNode.detachChildren();\n        for (Node node : arrayFoldedChildren) {\n          arrayNode.addChildToBack(node);\n        }\n        reportCodeChange();\n        break;\n    }",
      "info" : "SwitchStatement[41267-42728]:SwitchStatement[41095-42556]"
    }, {
      "left" : "case 0:",
      "right" : "case 0:",
      "info" : "SwitchCase[41311-41318]:SwitchCase[41139-41146]"
    }, {
      "left" : "Node emptyStringNode = Node.newString(\"\");",
      "right" : "Node emptyStringNode = Node.newString(\"\");",
      "info" : "VariableDeclarationStatement[41327-41369]:VariableDeclarationStatement[41155-41197]"
    }, {
      "left" : "n.getParent().replaceChild(n, emptyStringNode);",
      "right" : "n.getParent().replaceChild(n, emptyStringNode);",
      "info" : "ExpressionStatement[41378-41425]:ExpressionStatement[41206-41253]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[41434-41453]:ExpressionStatement[41262-41281]"
    }, {
      "left" : "return emptyStringNode;",
      "right" : "return emptyStringNode;",
      "info" : "ReturnStatement[41462-41485]:ReturnStatement[41290-41313]"
    }, {
      "left" : "case 1:",
      "right" : "case 1:",
      "info" : "SwitchCase[41492-41499]:SwitchCase[41320-41327]"
    }, {
      "left" : "Node foldedStringNode = arrayFoldedChildren.remove(0);",
      "right" : "Node foldedStringNode = arrayFoldedChildren.remove(0);",
      "info" : "VariableDeclarationStatement[41508-41562]:VariableDeclarationStatement[41336-41390]"
    }, {
      "left" : "if (foldedSize > originalSize)",
      "right" : "if (foldedSize > originalSize)",
      "info" : "IfStatement[41571-41633]:IfStatement[41399-41461]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41602-41633]:Block[41430-41461]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[41614-41623]:ReturnStatement[41442-41451]"
    }, {
      "left" : "arrayNode.detachChildren();",
      "right" : "arrayNode.detachChildren();",
      "info" : "ExpressionStatement[41642-41669]:ExpressionStatement[41470-41497]"
    }, {
      "left" : "if (foldedStringNode.getType() != Token.STRING)",
      "right" : "if (foldedStringNode.getType() != Token.STRING)",
      "info" : "IfStatement[41678-42020]:IfStatement[41506-41848]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41726-42020]:Block[41554-41848]"
    }, {
      "left" : "Node replacement = new Node(Token.ADD,\n              Node.newString(\"\").copyInformationFrom(n),\n              foldedStringNode);",
      "right" : "Node replacement = new Node(Token.ADD,\n              Node.newString(\"\").copyInformationFrom(n),\n              foldedStringNode);",
      "info" : "VariableDeclarationStatement[41840-41968]:VariableDeclarationStatement[41668-41796]"
    }, {
      "left" : "foldedStringNode = replacement;",
      "right" : "foldedStringNode = replacement;",
      "info" : "ExpressionStatement[41979-42010]:ExpressionStatement[41807-41838]"
    }, {
      "left" : "n.getParent().replaceChild(n, foldedStringNode);",
      "right" : "n.getParent().replaceChild(n, foldedStringNode);",
      "info" : "ExpressionStatement[42029-42077]:ExpressionStatement[41857-41905]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[42086-42105]:ExpressionStatement[41914-41933]"
    }, {
      "left" : "return foldedStringNode;",
      "right" : "return foldedStringNode;",
      "info" : "ReturnStatement[42114-42138]:ReturnStatement[41942-41966]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[42145-42153]:SwitchCase[41973-41981]"
    }, {
      "left" : "if (arrayFoldedChildren.size() == arrayNode.getChildCount())",
      "right" : "if (arrayFoldedChildren.size() == arrayNode.getChildCount())",
      "info" : "IfStatement[42213-42305]:IfStatement[42041-42133]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42274-42305]:Block[42102-42133]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[42286-42295]:ReturnStatement[42114-42123]"
    }, {
      "left" : "int kJoinOverhead = \"[].join()\".length();",
      "right" : "int kJoinOverhead = \"[].join()\".length();",
      "info" : "VariableDeclarationStatement[42314-42355]:VariableDeclarationStatement[42142-42183]"
    }, {
      "left" : "foldedSize += kJoinOverhead;",
      "right" : "foldedSize += kJoinOverhead;",
      "info" : "ExpressionStatement[42364-42392]:ExpressionStatement[42192-42220]"
    }, {
      "left" : "foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;",
      "right" : "foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;",
      "info" : "ExpressionStatement[42401-42472]:ExpressionStatement[42229-42300]"
    }, {
      "left" : "if (foldedSize > originalSize)",
      "right" : "if (foldedSize > originalSize)",
      "info" : "IfStatement[42481-42543]:IfStatement[42309-42371]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42512-42543]:Block[42340-42371]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[42524-42533]:ReturnStatement[42352-42361]"
    }, {
      "left" : "arrayNode.detachChildren();",
      "right" : "arrayNode.detachChildren();",
      "info" : "ExpressionStatement[42552-42579]:ExpressionStatement[42380-42407]"
    }, {
      "left" : "for (Node node : arrayFoldedChildren)",
      "right" : "for (Node node : arrayFoldedChildren)",
      "info" : "EnhancedForStatement[42588-42679]:EnhancedForStatement[42416-42507]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42626-42679]:Block[42454-42507]"
    }, {
      "left" : "arrayNode.addChildToBack(node);",
      "right" : "arrayNode.addChildToBack(node);",
      "info" : "ExpressionStatement[42638-42669]:ExpressionStatement[42466-42497]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[42688-42707]:ExpressionStatement[42516-42535]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[42716-42722]:BreakStatement[42544-42550]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[42734-42743]:ReturnStatement[42562-42571]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[42807-42814]:Modifier[42635-42642]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[42815-42819]:SimpleType[42643-42647]"
    }, {
      "left" : "tryFoldStringSubstr",
      "right" : "tryFoldStringSubstr",
      "info" : "SimpleName[42820-42839]:SimpleName[42648-42667]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[42840-42846]:SingleVariableDeclaration[42668-42674]"
    }, {
      "left" : "Node stringNode",
      "right" : "Node stringNode",
      "info" : "SingleVariableDeclaration[42848-42863]:SingleVariableDeclaration[42676-42691]"
    }, {
      "left" : "Node arg1",
      "right" : "Node arg1",
      "info" : "SingleVariableDeclaration[42865-42874]:SingleVariableDeclaration[42693-42702]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42876-44294]:Block[42704-44122]"
    }, {
      "left" : "Preconditions.checkArgument(n.getType() == Token.CALL);",
      "right" : "Preconditions.checkArgument(n.getType() == Token.CALL);",
      "info" : "ExpressionStatement[42882-42937]:ExpressionStatement[42710-42765]"
    }, {
      "left" : "Preconditions.checkArgument(stringNode.getType() == Token.STRING);",
      "right" : "Preconditions.checkArgument(stringNode.getType() == Token.STRING);",
      "info" : "ExpressionStatement[42942-43008]:ExpressionStatement[42770-42836]"
    }, {
      "left" : "int start, length;",
      "right" : "int start, length;",
      "info" : "VariableDeclarationStatement[43014-43032]:VariableDeclarationStatement[42842-42860]"
    }, {
      "left" : "String stringAsString = stringNode.getString();",
      "right" : "String stringAsString = stringNode.getString();",
      "info" : "VariableDeclarationStatement[43037-43084]:VariableDeclarationStatement[42865-42912]"
    }, {
      "left" : "if (arg1 != null && arg1.getType() == Token.NUMBER)",
      "right" : "if (arg1 != null && arg1.getType() == Token.NUMBER)",
      "info" : "IfStatement[43173-43299]:IfStatement[43001-43127]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43225-43270]:Block[43053-43098]"
    }, {
      "left" : "start = (int) arg1.getDouble();",
      "right" : "start = (int) arg1.getDouble();",
      "info" : "ExpressionStatement[43233-43264]:ExpressionStatement[43061-43092]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43276-43299]:Block[43104-43127]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[43284-43293]:ReturnStatement[43112-43121]"
    }, {
      "left" : "Node arg2 = arg1.getNext();",
      "right" : "Node arg2 = arg1.getNext();",
      "info" : "VariableDeclarationStatement[43305-43332]:VariableDeclarationStatement[43133-43160]"
    }, {
      "left" : "if (arg2 != null)",
      "right" : "if (arg2 != null)",
      "info" : "IfStatement[43337-43703]:IfStatement[43165-43531]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43355-43610]:Block[43183-43438]"
    }, {
      "left" : "if (arg2.getType() == Token.NUMBER)",
      "right" : "if (arg2.getType() == Token.NUMBER)",
      "info" : "IfStatement[43363-43482]:IfStatement[43191-43310]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43399-43449]:Block[43227-43277]"
    }, {
      "left" : "length = (int) arg2.getDouble();",
      "right" : "length = (int) arg2.getDouble();",
      "info" : "ExpressionStatement[43409-43441]:ExpressionStatement[43237-43269]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43455-43482]:Block[43283-43310]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[43465-43474]:ReturnStatement[43293-43302]"
    }, {
      "left" : "if (arg2.getNext() != null)",
      "right" : "if (arg2.getNext() != null)",
      "info" : "IfStatement[43490-43604]:IfStatement[43318-43432]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43518-43604]:Block[43346-43432]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[43587-43596]:ReturnStatement[43415-43424]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43616-43703]:Block[43444-43531]"
    }, {
      "left" : "length = stringAsString.length() - start;",
      "right" : "length = stringAsString.length() - start;",
      "info" : "ExpressionStatement[43656-43697]:ExpressionStatement[43484-43525]"
    }, {
      "left" : "if ((start + length) > stringAsString.length() ||\n        (length < 0) ||\n        (start < 0))",
      "right" : "if ((start + length) > stringAsString.length() ||\n        (length < 0) ||\n        (start < 0))",
      "info" : "IfStatement[43935-44053]:IfStatement[43763-43881]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44030-44053]:Block[43858-43881]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[44038-44047]:ReturnStatement[43866-43875]"
    }, {
      "left" : "String result = stringAsString.substring(start, start + length);",
      "right" : "String result = stringAsString.substring(start, start + length);",
      "info" : "VariableDeclarationStatement[44059-44123]:VariableDeclarationStatement[43887-43951]"
    }, {
      "left" : "Node resultNode = Node.newString(result);",
      "right" : "Node resultNode = Node.newString(result);",
      "info" : "VariableDeclarationStatement[44128-44169]:VariableDeclarationStatement[43956-43997]"
    }, {
      "left" : "Node parent = n.getParent();",
      "right" : "Node parent = n.getParent();",
      "info" : "VariableDeclarationStatement[44175-44203]:VariableDeclarationStatement[44003-44031]"
    }, {
      "left" : "parent.replaceChild(n, resultNode);",
      "right" : "parent.replaceChild(n, resultNode);",
      "info" : "ExpressionStatement[44208-44243]:ExpressionStatement[44036-44071]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[44248-44267]:ExpressionStatement[44076-44095]"
    }, {
      "left" : "return resultNode;",
      "right" : "return resultNode;",
      "info" : "ReturnStatement[44272-44290]:ReturnStatement[44100-44118]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[44357-44364]:Modifier[44185-44192]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[44365-44369]:SimpleType[44193-44197]"
    }, {
      "left" : "tryFoldStringSubstring",
      "right" : "tryFoldStringSubstring",
      "info" : "SimpleName[44370-44392]:SimpleName[44198-44220]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[44393-44399]:SingleVariableDeclaration[44221-44227]"
    }, {
      "left" : "Node stringNode",
      "right" : "Node stringNode",
      "info" : "SingleVariableDeclaration[44401-44416]:SingleVariableDeclaration[44229-44244]"
    }, {
      "left" : "Node arg1",
      "right" : "Node arg1",
      "info" : "SingleVariableDeclaration[44418-44427]:SingleVariableDeclaration[44246-44255]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44429-45767]:Block[44257-45595]"
    }, {
      "left" : "Preconditions.checkArgument(n.getType() == Token.CALL);",
      "right" : "Preconditions.checkArgument(n.getType() == Token.CALL);",
      "info" : "ExpressionStatement[44435-44490]:ExpressionStatement[44263-44318]"
    }, {
      "left" : "Preconditions.checkArgument(stringNode.getType() == Token.STRING);",
      "right" : "Preconditions.checkArgument(stringNode.getType() == Token.STRING);",
      "info" : "ExpressionStatement[44495-44561]:ExpressionStatement[44323-44389]"
    }, {
      "left" : "int start, end;",
      "right" : "int start, end;",
      "info" : "VariableDeclarationStatement[44567-44582]:VariableDeclarationStatement[44395-44410]"
    }, {
      "left" : "String stringAsString = stringNode.getString();",
      "right" : "String stringAsString = stringNode.getString();",
      "info" : "VariableDeclarationStatement[44587-44634]:VariableDeclarationStatement[44415-44462]"
    }, {
      "left" : "if (arg1 != null && arg1.getType() == Token.NUMBER)",
      "right" : "if (arg1 != null && arg1.getType() == Token.NUMBER)",
      "info" : "IfStatement[44640-44766]:IfStatement[44468-44594]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44692-44737]:Block[44520-44565]"
    }, {
      "left" : "start = (int) arg1.getDouble();",
      "right" : "start = (int) arg1.getDouble();",
      "info" : "ExpressionStatement[44700-44731]:ExpressionStatement[44528-44559]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44743-44766]:Block[44571-44594]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[44751-44760]:ReturnStatement[44579-44588]"
    }, {
      "left" : "Node arg2 = arg1.getNext();",
      "right" : "Node arg2 = arg1.getNext();",
      "info" : "VariableDeclarationStatement[44772-44799]:VariableDeclarationStatement[44600-44627]"
    }, {
      "left" : "if (arg2 != null)",
      "right" : "if (arg2 != null)",
      "info" : "IfStatement[44804-45156]:IfStatement[44632-44984]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44822-45074]:Block[44650-44902]"
    }, {
      "left" : "if (arg2.getType() == Token.NUMBER)",
      "right" : "if (arg2.getType() == Token.NUMBER)",
      "info" : "IfStatement[44830-44946]:IfStatement[44658-44774]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44866-44913]:Block[44694-44741]"
    }, {
      "left" : "end = (int) arg2.getDouble();",
      "right" : "end = (int) arg2.getDouble();",
      "info" : "ExpressionStatement[44876-44905]:ExpressionStatement[44704-44733]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44919-44946]:Block[44747-44774]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[44929-44938]:ReturnStatement[44757-44766]"
    }, {
      "left" : "if (arg2.getNext() != null)",
      "right" : "if (arg2.getNext() != null)",
      "info" : "IfStatement[44954-45068]:IfStatement[44782-44896]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44982-45068]:Block[44810-44896]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[45051-45060]:ReturnStatement[44879-44888]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45080-45156]:Block[44908-44984]"
    }, {
      "left" : "end = stringAsString.length();",
      "right" : "end = stringAsString.length();",
      "info" : "ExpressionStatement[45120-45150]:ExpressionStatement[44948-44978]"
    }, {
      "left" : "if ((end > stringAsString.length()) ||\n        (start > stringAsString.length()) ||\n        (end < 0) ||\n        (start < 0))",
      "right" : "if ((end > stringAsString.length()) ||\n        (start > stringAsString.length()) ||\n        (end < 0) ||\n        (start < 0))",
      "info" : "IfStatement[45388-45537]:IfStatement[45216-45365]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45514-45537]:Block[45342-45365]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[45522-45531]:ReturnStatement[45350-45359]"
    }, {
      "left" : "String result = stringAsString.substring(start, end);",
      "right" : "String result = stringAsString.substring(start, end);",
      "info" : "VariableDeclarationStatement[45543-45596]:VariableDeclarationStatement[45371-45424]"
    }, {
      "left" : "Node resultNode = Node.newString(result);",
      "right" : "Node resultNode = Node.newString(result);",
      "info" : "VariableDeclarationStatement[45601-45642]:VariableDeclarationStatement[45429-45470]"
    }, {
      "left" : "Node parent = n.getParent();",
      "right" : "Node parent = n.getParent();",
      "info" : "VariableDeclarationStatement[45648-45676]:VariableDeclarationStatement[45476-45504]"
    }, {
      "left" : "parent.replaceChild(n, resultNode);",
      "right" : "parent.replaceChild(n, resultNode);",
      "info" : "ExpressionStatement[45681-45716]:ExpressionStatement[45509-45544]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[45721-45740]:ExpressionStatement[45549-45568]"
    }, {
      "left" : "return resultNode;",
      "right" : "return resultNode;",
      "info" : "ReturnStatement[45745-45763]:ReturnStatement[45573-45591]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[45834-45841]:Modifier[45662-45669]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[45842-45846]:SimpleType[45670-45674]"
    }, {
      "left" : "tryFoldGetElem",
      "right" : "tryFoldGetElem",
      "info" : "SimpleName[45847-45861]:SimpleName[45675-45689]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[45862-45868]:SingleVariableDeclaration[45690-45696]"
    }, {
      "left" : "Node left",
      "right" : "Node left",
      "info" : "SingleVariableDeclaration[45870-45879]:SingleVariableDeclaration[45698-45707]"
    }, {
      "left" : "Node right",
      "right" : "Node right",
      "info" : "SingleVariableDeclaration[45881-45891]:SingleVariableDeclaration[45709-45719]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45893-47043]:Block[45721-46871]"
    }, {
      "left" : "Preconditions.checkArgument(n.getType() == Token.GETELEM);",
      "right" : "Preconditions.checkArgument(n.getType() == Token.GETELEM);",
      "info" : "ExpressionStatement[45899-45957]:ExpressionStatement[45727-45785]"
    }, {
      "left" : "if (left.getType() == Token.ARRAYLIT)",
      "right" : "if (left.getType() == Token.ARRAYLIT)",
      "info" : "IfStatement[45963-47025]:IfStatement[45791-46853]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46001-47025]:Block[45829-46853]"
    }, {
      "left" : "if (right.getType() != Token.NUMBER)",
      "right" : "if (right.getType() != Token.NUMBER)",
      "info" : "IfStatement[46009-46206]:IfStatement[45837-46034]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46046-46206]:Block[45874-46034]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[46189-46198]:ReturnStatement[46017-46026]"
    }, {
      "left" : "double index = right.getDouble();",
      "right" : "double index = right.getDouble();",
      "info" : "VariableDeclarationStatement[46214-46247]:VariableDeclarationStatement[46042-46075]"
    }, {
      "left" : "int intIndex = (int) index;",
      "right" : "int intIndex = (int) index;",
      "info" : "VariableDeclarationStatement[46254-46281]:VariableDeclarationStatement[46082-46109]"
    }, {
      "left" : "if (intIndex != index)",
      "right" : "if (intIndex != index)",
      "info" : "IfStatement[46288-46389]:IfStatement[46116-46217]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46311-46389]:Block[46139-46217]"
    }, {
      "left" : "error(INVALID_GETELEM_INDEX_ERROR, right);",
      "right" : "error(INVALID_GETELEM_INDEX_ERROR, right);",
      "info" : "ExpressionStatement[46321-46363]:ExpressionStatement[46149-46191]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[46372-46381]:ReturnStatement[46200-46209]"
    }, {
      "left" : "if (intIndex < 0)",
      "right" : "if (intIndex < 0)",
      "info" : "IfStatement[46397-46491]:IfStatement[46225-46319]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46415-46491]:Block[46243-46319]"
    }, {
      "left" : "error(INDEX_OUT_OF_BOUNDS_ERROR, right);",
      "right" : "error(INDEX_OUT_OF_BOUNDS_ERROR, right);",
      "info" : "ExpressionStatement[46425-46465]:ExpressionStatement[46253-46293]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[46474-46483]:ReturnStatement[46302-46311]"
    }, {
      "left" : "Node elem = left.getFirstChild();",
      "right" : "Node elem = left.getFirstChild();",
      "info" : "VariableDeclarationStatement[46499-46532]:VariableDeclarationStatement[46327-46360]"
    }, {
      "left" : "for (int i = 0; elem != null && i < intIndex; i++)",
      "right" : "for (int i = 0; elem != null && i < intIndex; i++)",
      "info" : "ForStatement[46539-46630]:ForStatement[46367-46458]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46590-46630]:Block[46418-46458]"
    }, {
      "left" : "elem = elem.getNext();",
      "right" : "elem = elem.getNext();",
      "info" : "ExpressionStatement[46600-46622]:ExpressionStatement[46428-46450]"
    }, {
      "left" : "if (elem == null)",
      "right" : "if (elem == null)",
      "info" : "IfStatement[46638-46732]:IfStatement[46466-46560]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46656-46732]:Block[46484-46560]"
    }, {
      "left" : "error(INDEX_OUT_OF_BOUNDS_ERROR, right);",
      "right" : "error(INDEX_OUT_OF_BOUNDS_ERROR, right);",
      "info" : "ExpressionStatement[46666-46706]:ExpressionStatement[46494-46534]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[46715-46724]:ReturnStatement[46543-46552]"
    }, {
      "left" : "if (elem.getType() == Token.EMPTY)",
      "right" : "if (elem.getType() == Token.EMPTY)",
      "info" : "IfStatement[46740-46879]:IfStatement[46568-46707]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46775-46832]:Block[46603-46660]"
    }, {
      "left" : "elem = NodeUtil.newUndefinedNode(elem);",
      "right" : "elem = NodeUtil.newUndefinedNode(elem);",
      "info" : "ExpressionStatement[46785-46824]:ExpressionStatement[46613-46652]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46838-46879]:Block[46666-46707]"
    }, {
      "left" : "left.removeChild(elem);",
      "right" : "left.removeChild(elem);",
      "info" : "ExpressionStatement[46848-46871]:ExpressionStatement[46676-46699]"
    }, {
      "left" : "n.getParent().replaceChild(n, elem);",
      "right" : "n.getParent().replaceChild(n, elem);",
      "info" : "ExpressionStatement[46938-46974]:ExpressionStatement[46766-46802]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[46981-47000]:ExpressionStatement[46809-46828]"
    }, {
      "left" : "return elem;",
      "right" : "return elem;",
      "info" : "ReturnStatement[47007-47019]:ReturnStatement[46835-46847]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[47030-47039]:ReturnStatement[46858-46867]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[47138-47145]:Modifier[46966-46973]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[47146-47150]:SimpleType[46974-46978]"
    }, {
      "left" : "tryFoldGetProp",
      "right" : "tryFoldGetProp",
      "info" : "SimpleName[47151-47165]:SimpleName[46979-46993]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[47166-47172]:SingleVariableDeclaration[46994-47000]"
    }, {
      "left" : "Node left",
      "right" : "Node left",
      "info" : "SingleVariableDeclaration[47174-47183]:SingleVariableDeclaration[47002-47011]"
    }, {
      "left" : "Node right",
      "right" : "Node right",
      "info" : "SingleVariableDeclaration[47185-47195]:SingleVariableDeclaration[47013-47023]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47197-48068]:Block[47025-47896]"
    }, {
      "left" : "Preconditions.checkArgument(n.getType() == Token.GETPROP);",
      "right" : "Preconditions.checkArgument(n.getType() == Token.GETPROP);",
      "info" : "ExpressionStatement[47203-47261]:ExpressionStatement[47031-47089]"
    }, {
      "left" : "if (right.getType() == Token.STRING &&\n        right.getString().equals(\"length\"))",
      "right" : "if (right.getType() == Token.STRING &&\n        right.getString().equals(\"length\"))",
      "info" : "IfStatement[47267-48049]:IfStatement[47095-47877]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47350-48049]:Block[47178-47877]"
    }, {
      "left" : "int knownLength = -1;",
      "right" : "int knownLength = -1;",
      "info" : "VariableDeclarationStatement[47358-47379]:VariableDeclarationStatement[47186-47207]"
    }, {
      "left" : "switch (left.getType()) {\n        case Token.ARRAYLIT:\n          if (mayHaveSideEffects(left)) {\n            // Nope, can't fold this, without handling the side-effects.\n            return n;\n          }\n          knownLength = left.getChildCount();\n          break;\n        case Token.STRING:\n          knownLength = left.getString().length();\n          break;\n        default:\n          // Not a foldable case, forget it.\n          return n;\n      }",
      "right" : "switch (left.getType()) {\n        case Token.ARRAYLIT:\n          if (mayHaveSideEffects(left)) {\n            // Nope, can't fold this, without handling the side-effects.\n            return n;\n          }\n          knownLength = left.getChildCount();\n          break;\n        case Token.STRING:\n          knownLength = left.getString().length();\n          break;\n        default:\n          // Not a foldable case, forget it.\n          return n;\n      }",
      "info" : "SwitchStatement[47386-47837]:SwitchStatement[47214-47665]"
    }, {
      "left" : "case Token.ARRAYLIT:",
      "right" : "case Token.ARRAYLIT:",
      "info" : "SwitchCase[47420-47440]:SwitchCase[47248-47268]"
    }, {
      "left" : "if (mayHaveSideEffects(left))",
      "right" : "if (mayHaveSideEffects(left))",
      "info" : "IfStatement[47451-47589]:IfStatement[47279-47417]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47481-47589]:Block[47309-47417]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[47568-47577]:ReturnStatement[47396-47405]"
    }, {
      "left" : "knownLength = left.getChildCount();",
      "right" : "knownLength = left.getChildCount();",
      "info" : "ExpressionStatement[47600-47635]:ExpressionStatement[47428-47463]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[47646-47652]:BreakStatement[47474-47480]"
    }, {
      "left" : "case Token.STRING:",
      "right" : "case Token.STRING:",
      "info" : "SwitchCase[47661-47679]:SwitchCase[47489-47507]"
    }, {
      "left" : "knownLength = left.getString().length();",
      "right" : "knownLength = left.getString().length();",
      "info" : "ExpressionStatement[47690-47730]:ExpressionStatement[47518-47558]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[47741-47747]:BreakStatement[47569-47575]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[47756-47764]:SwitchCase[47584-47592]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[47820-47829]:ReturnStatement[47648-47657]"
    }, {
      "left" : "Preconditions.checkState(knownLength != -1);",
      "right" : "Preconditions.checkState(knownLength != -1);",
      "info" : "ExpressionStatement[47845-47889]:ExpressionStatement[47673-47717]"
    }, {
      "left" : "Node lengthNode = Node.newNumber(knownLength);",
      "right" : "Node lengthNode = Node.newNumber(knownLength);",
      "info" : "VariableDeclarationStatement[47896-47942]:VariableDeclarationStatement[47724-47770]"
    }, {
      "left" : "n.getParent().replaceChild(n, lengthNode);",
      "right" : "n.getParent().replaceChild(n, lengthNode);",
      "info" : "ExpressionStatement[47949-47991]:ExpressionStatement[47777-47819]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[47998-48017]:ExpressionStatement[47826-47845]"
    }, {
      "left" : "return lengthNode;",
      "right" : "return lengthNode;",
      "info" : "ReturnStatement[48025-48043]:ReturnStatement[47853-47871]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[48055-48064]:ReturnStatement[47883-47892]"
    } ]
  },
  "interFileMappings" : { }
}