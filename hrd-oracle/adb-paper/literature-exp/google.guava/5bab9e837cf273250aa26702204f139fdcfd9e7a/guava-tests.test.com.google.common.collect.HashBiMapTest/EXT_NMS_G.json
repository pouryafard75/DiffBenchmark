{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "HashBiMapTest",
      "right" : "HashBiMapTest",
      "info" : "TypeDeclaration[1284-4757]:TypeDeclaration[1341-7798]"
    }, {
      "left" : "HashBiMapGenerator",
      "right" : "HashBiMapGenerator",
      "info" : "TypeDeclaration[1432-1805]:TypeDeclaration[1489-1862]"
    }, {
      "left" : "protected BiMap<String, String> create(Entry<String, String>[] entries)",
      "right" : "protected BiMap<String, String> create(Entry<String, String>[] entries)",
      "info" : "MethodDeclaration[1516-1801]:MethodDeclaration[1573-1858]"
    }, {
      "left" : "public static Test suite()",
      "right" : "public static Test suite()",
      "info" : "MethodDeclaration[1809-2396]:MethodDeclaration[1866-2494]"
    }, {
      "left" : "public void testMapConstructor()",
      "right" : "public void testMapConstructor()",
      "info" : "MethodDeclaration[2400-2775]:MethodDeclaration[2498-2873]"
    }, {
      "left" : "private static final int N = 1000;",
      "right" : "private static final int N = 1000;",
      "info" : "FieldDeclaration[2779-2813]:FieldDeclaration[2877-2911]"
    }, {
      "left" : "public void testBashIt() throws Exception",
      "right" : "public void testBashIt() throws Exception",
      "info" : "MethodDeclaration[2817-3866]:MethodDeclaration[2915-3964]"
    }, {
      "left" : "public void testBiMapEntrySetIteratorRemove()",
      "right" : "public void testBiMapEntrySetIteratorRemove()",
      "info" : "MethodDeclaration[3870-4444]:MethodDeclaration[3968-4542]"
    }, {
      "left" : "public void testInverseEntrySetValue()",
      "right" : "public void testInverseEntrySetValue()",
      "info" : "MethodDeclaration[4448-4755]:MethodDeclaration[7489-7796]"
    } ],
    "mappings" : [
 {
      "left" : "@GwtCompatible(emulated = true)",
      "right" : "@GwtCompatible(emulated = true)",
      "info" : "NormalAnnotation[1351-1382]:NormalAnnotation[1408-1439]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1383-1389]:Modifier[1440-1446]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[1390-1395]:TYPE_DECLARATION_KIND[1447-1452]"
    }, {
      "left" : "HashBiMapTest",
      "right" : "HashBiMapTest",
      "info" : "SimpleName[1396-1409]:SimpleName[1453-1466]"
    }, {
      "left" : "TestCase",
      "right" : "TestCase",
      "info" : "SimpleType[1418-1426]:SimpleType[1475-1483]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1432-1438]:Modifier[1489-1495]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[1439-1445]:Modifier[1496-1502]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[1446-1451]:Modifier[1503-1508]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[1452-1457]:TYPE_DECLARATION_KIND[1509-1514]"
    }, {
      "left" : "HashBiMapGenerator",
      "right" : "HashBiMapGenerator",
      "info" : "SimpleName[1458-1476]:SimpleName[1515-1533]"
    }, {
      "left" : "TestStringBiMapGenerator",
      "right" : "TestStringBiMapGenerator",
      "info" : "SimpleType[1485-1509]:SimpleType[1542-1566]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[1516-1525]:MarkerAnnotation[1573-1582]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[1530-1539]:Modifier[1587-1596]"
    }, {
      "left" : "BiMap<String, String>",
      "right" : "BiMap<String, String>",
      "info" : "ParameterizedType[1540-1561]:ParameterizedType[1597-1618]"
    }, {
      "left" : "create",
      "right" : "create",
      "info" : "SimpleName[1562-1568]:SimpleName[1619-1625]"
    }, {
      "left" : "Entry<String, String>[] entries",
      "right" : "Entry<String, String>[] entries",
      "info" : "SingleVariableDeclaration[1569-1600]:SingleVariableDeclaration[1626-1657]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1602-1801]:Block[1659-1858]"
    }, {
      "left" : "BiMap<String, String> result = HashBiMap.create();",
      "right" : "BiMap<String, String> result = HashBiMap.create();",
      "info" : "VariableDeclarationStatement[1610-1660]:VariableDeclarationStatement[1667-1717]"
    }, {
      "left" : "for (Entry<String, String> entry : entries)",
      "right" : "for (Entry<String, String> entry : entries)",
      "info" : "EnhancedForStatement[1667-1774]:EnhancedForStatement[1724-1831]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1711-1774]:Block[1768-1831]"
    }, {
      "left" : "result.put(entry.getKey(), entry.getValue());",
      "right" : "result.put(entry.getKey(), entry.getValue());",
      "info" : "ExpressionStatement[1721-1766]:ExpressionStatement[1778-1823]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[1781-1795]:ReturnStatement[1838-1852]"
    }, {
      "left" : "@GwtIncompatible(\"suite\")",
      "right" : "@GwtIncompatible(\"suite\")",
      "info" : "SingleMemberAnnotation[1809-1834]:SingleMemberAnnotation[1866-1891]"
    }, {
      "left" : "@GwtIncompatible(\"suite\")",
      "right" : "@GwtIncompatible(\"insertion order currently not preserved in GWT\")",
      "info" : "SingleMemberAnnotation[1809-1834]:SingleMemberAnnotation[4546-4612]"
    }, {
      "left" : "@GwtIncompatible(\"suite\")",
      "right" : "@GwtIncompatible(\"insertion order currently not preserved in GWT\")",
      "info" : "SingleMemberAnnotation[1809-1834]:SingleMemberAnnotation[4957-5023]"
    }, {
      "left" : "@GwtIncompatible(\"suite\")",
      "right" : "@GwtIncompatible(\"insertion order currently not preserved in GWT\")",
      "info" : "SingleMemberAnnotation[1809-1834]:SingleMemberAnnotation[5369-5435]"
    }, {
      "left" : "@GwtIncompatible(\"suite\")",
      "right" : "@GwtIncompatible(\"insertion order currently not preserved in GWT\")",
      "info" : "SingleMemberAnnotation[1809-1834]:SingleMemberAnnotation[5782-5848]"
    }, {
      "left" : "@GwtIncompatible(\"suite\")",
      "right" : "@GwtIncompatible(\"insertion order currently not preserved in GWT\")",
      "info" : "SingleMemberAnnotation[1809-1834]:SingleMemberAnnotation[6193-6259]"
    }, {
      "left" : "@GwtIncompatible(\"suite\")",
      "right" : "@GwtIncompatible(\"insertion order currently not preserved in GWT\")",
      "info" : "SingleMemberAnnotation[1809-1834]:SingleMemberAnnotation[6608-6674]"
    }, {
      "left" : "@GwtIncompatible(\"suite\")",
      "right" : "@GwtIncompatible(\"insertion order currently not preserved in GWT\")",
      "info" : "SingleMemberAnnotation[1809-1834]:SingleMemberAnnotation[7040-7106]"
    }, {
      "left" : "\"suite\"",
      "right" : "\"insertion order currently not preserved in GWT\"",
      "info" : "StringLiteral[1826-1833]:StringLiteral[4563-4611]"
    }, {
      "left" : "\"suite\"",
      "right" : "\"insertion order currently not preserved in GWT\"",
      "info" : "StringLiteral[1826-1833]:StringLiteral[4974-5022]"
    }, {
      "left" : "\"suite\"",
      "right" : "\"insertion order currently not preserved in GWT\"",
      "info" : "StringLiteral[1826-1833]:StringLiteral[5386-5434]"
    }, {
      "left" : "\"suite\"",
      "right" : "\"insertion order currently not preserved in GWT\"",
      "info" : "StringLiteral[1826-1833]:StringLiteral[5799-5847]"
    }, {
      "left" : "\"suite\"",
      "right" : "\"insertion order currently not preserved in GWT\"",
      "info" : "StringLiteral[1826-1833]:StringLiteral[6210-6258]"
    }, {
      "left" : "\"suite\"",
      "right" : "\"insertion order currently not preserved in GWT\"",
      "info" : "StringLiteral[1826-1833]:StringLiteral[6625-6673]"
    }, {
      "left" : "\"suite\"",
      "right" : "\"insertion order currently not preserved in GWT\"",
      "info" : "StringLiteral[1826-1833]:StringLiteral[7057-7105]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1837-1843]:Modifier[1894-1900]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1837-1843]:Modifier[4615-4621]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1837-1843]:Modifier[5026-5032]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1837-1843]:Modifier[5438-5444]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1837-1843]:Modifier[5851-5857]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1837-1843]:Modifier[6262-6268]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1837-1843]:Modifier[6677-6683]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1837-1843]:Modifier[7109-7115]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[1844-1850]:Modifier[1901-1907]"
    }, {
      "left" : "Test",
      "right" : "Test",
      "info" : "SimpleType[1851-1855]:SimpleType[1908-1912]"
    }, {
      "left" : "suite",
      "right" : "suite",
      "info" : "SimpleName[1856-1861]:SimpleName[1913-1918]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1864-2396]:Block[1921-2494]"
    }, {
      "left" : "TestSuite suite = new TestSuite();",
      "right" : "TestSuite suite = new TestSuite();",
      "info" : "VariableDeclarationStatement[1870-1904]:VariableDeclarationStatement[1927-1961]"
    }, {
      "left" : "suite.addTest(BiMapTestSuiteBuilder.using(new HashBiMapGenerator())\n      .named(\"HashBiMap\")\n      .withFeatures(CollectionSize.ANY,\n          CollectionFeature.SERIALIZABLE,\n          CollectionFeature.SUPPORTS_ITERATOR_REMOVE,\n          MapFeature.ALLOWS_NULL_KEYS,\n          MapFeature.ALLOWS_NULL_VALUES,\n          MapFeature.ALLOWS_ANY_NULL_QUERIES,\n          MapFeature.GENERAL_PURPOSE)\n      .createTestSuite());",
      "right" : "suite.addTest(BiMapTestSuiteBuilder.using(new HashBiMapGenerator())\n      .named(\"HashBiMap\")\n      .withFeatures(CollectionSize.ANY,\n          CollectionFeature.SERIALIZABLE,\n          CollectionFeature.SUPPORTS_ITERATOR_REMOVE,\n          CollectionFeature.KNOWN_ORDER,\n          MapFeature.ALLOWS_NULL_KEYS,\n          MapFeature.ALLOWS_NULL_VALUES,\n          MapFeature.ALLOWS_ANY_NULL_QUERIES,\n          MapFeature.GENERAL_PURPOSE)\n      .createTestSuite());",
      "info" : "ExpressionStatement[1909-2329]:ExpressionStatement[1966-2427]"
    }, {
      "left" : "suite.addTestSuite(HashBiMapTest.class);",
      "right" : "suite.addTestSuite(HashBiMapTest.class);",
      "info" : "ExpressionStatement[2334-2374]:ExpressionStatement[2432-2472]"
    }, {
      "left" : "return suite;",
      "right" : "return suite;",
      "info" : "ReturnStatement[2379-2392]:ReturnStatement[2477-2490]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2400-2406]:Modifier[2498-2504]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[2407-2411]:PrimitiveType[2505-2509]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[2407-2411]:PrimitiveType[4622-4626]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[2407-2411]:PrimitiveType[5033-5037]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[2407-2411]:PrimitiveType[5445-5449]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[2407-2411]:PrimitiveType[5858-5862]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[2407-2411]:PrimitiveType[6269-6273]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[2407-2411]:PrimitiveType[6684-6688]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[2407-2411]:PrimitiveType[7116-7120]"
    }, {
      "left" : "testMapConstructor",
      "right" : "testMapConstructor",
      "info" : "SimpleName[2412-2430]:SimpleName[2510-2528]"
    }, {
      "left" : "testMapConstructor",
      "right" : "testInsertionOrder",
      "info" : "SimpleName[2412-2430]:SimpleName[4627-4645]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2433-2775]:Block[2531-2873]"
    }, {
      "left" : "Map<String, String> map = ImmutableMap.of(\n        \"canada\", \"dollar\",\n        \"chile\", \"peso\",\n        \"switzerland\", \"franc\");",
      "right" : "Map<String, String> map = ImmutableMap.of(\n        \"canada\", \"dollar\",\n        \"chile\", \"peso\",\n        \"switzerland\", \"franc\");",
      "info" : "VariableDeclarationStatement[2474-2602]:VariableDeclarationStatement[2572-2700]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[2478-2484]:SimpleType[4660-4666]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[2478-2484]:SimpleType[5087-5093]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[2478-2484]:SimpleType[5500-5506]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[2478-2484]:SimpleType[5911-5917]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[2478-2484]:SimpleType[6320-6326]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[2478-2484]:SimpleType[6742-6748]"
    }, {
      "left" : "HashBiMap<String, String> bimap = HashBiMap.create(map);",
      "right" : "HashBiMap<String, String> bimap = HashBiMap.create(map);",
      "info" : "VariableDeclarationStatement[2607-2663]:VariableDeclarationStatement[2705-2761]"
    }, {
      "left" : "assertEquals(\"dollar\", bimap.get(\"canada\"));",
      "right" : "assertEquals(\"dollar\", bimap.get(\"canada\"));",
      "info" : "ExpressionStatement[2668-2712]:ExpressionStatement[2766-2810]"
    }, {
      "left" : "assertEquals(\"canada\", bimap.inverse().get(\"dollar\"));",
      "right" : "assertEquals(\"canada\", bimap.inverse().get(\"dollar\"));",
      "info" : "ExpressionStatement[2717-2771]:ExpressionStatement[2815-2869]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2817-2823]:Modifier[2915-2921]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[2824-2828]:PrimitiveType[2922-2926]"
    }, {
      "left" : "testBashIt",
      "right" : "testBashIt",
      "info" : "SimpleName[2829-2839]:SimpleName[2927-2937]"
    }, {
      "left" : "testBashIt",
      "right" : "testInsertionOrderAfterRemoveFirst",
      "info" : "SimpleName[2829-2839]:SimpleName[5038-5072]"
    }, {
      "left" : "testBashIt",
      "right" : "testInsertionOrderAfterRemoveMiddle",
      "info" : "SimpleName[2829-2839]:SimpleName[5450-5485]"
    }, {
      "left" : "testBashIt",
      "right" : "testInsertionOrderAfterRemoveLast",
      "info" : "SimpleName[2829-2839]:SimpleName[5863-5896]"
    }, {
      "left" : "testBashIt",
      "right" : "testInsertionOrderAfterForcePut",
      "info" : "SimpleName[2829-2839]:SimpleName[6274-6305]"
    }, {
      "left" : "testBashIt",
      "right" : "testInsertionOrderAfterInverseForcePut",
      "info" : "SimpleName[2829-2839]:SimpleName[6689-6727]"
    }, {
      "left" : "testBashIt",
      "right" : "testInverseInsertionOrderAfterInverseForcePut",
      "info" : "SimpleName[2829-2839]:SimpleName[7121-7166]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[2849-2858]:SimpleType[2947-2956]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2859-3866]:Block[2957-3964]"
    }, {
      "left" : "BiMap<Integer, Integer> bimap = HashBiMap.create(N);",
      "right" : "BiMap<Integer, Integer> bimap = HashBiMap.create(N);",
      "info" : "VariableDeclarationStatement[2865-2917]:VariableDeclarationStatement[2963-3015]"
    }, {
      "left" : "BiMap<Integer, Integer> bimap = HashBiMap.create(N);",
      "right" : "BiMap<String, Integer> map = HashBiMap.create();",
      "info" : "VariableDeclarationStatement[2865-2917]:VariableDeclarationStatement[4654-4702]"
    }, {
      "left" : "BiMap<Integer, Integer> bimap = HashBiMap.create(N);",
      "right" : "BiMap<String, Integer> map = HashBiMap.create();",
      "info" : "VariableDeclarationStatement[2865-2917]:VariableDeclarationStatement[5081-5129]"
    }, {
      "left" : "BiMap<Integer, Integer> bimap = HashBiMap.create(N);",
      "right" : "BiMap<String, Integer> map = HashBiMap.create();",
      "info" : "VariableDeclarationStatement[2865-2917]:VariableDeclarationStatement[5494-5542]"
    }, {
      "left" : "BiMap<Integer, Integer> bimap = HashBiMap.create(N);",
      "right" : "BiMap<String, Integer> map = HashBiMap.create();",
      "info" : "VariableDeclarationStatement[2865-2917]:VariableDeclarationStatement[5905-5953]"
    }, {
      "left" : "BiMap<Integer, Integer> bimap = HashBiMap.create(N);",
      "right" : "BiMap<String, Integer> map = HashBiMap.create();",
      "info" : "VariableDeclarationStatement[2865-2917]:VariableDeclarationStatement[6314-6362]"
    }, {
      "left" : "Integer",
      "right" : "Integer",
      "info" : "SimpleType[2880-2887]:SimpleType[6750-6757]"
    }, {
      "left" : "Integer",
      "right" : "Integer",
      "info" : "SimpleType[2880-2887]:SimpleType[7189-7196]"
    }, {
      "left" : "BiMap<Integer, Integer> inverse = bimap.inverse();",
      "right" : "BiMap<Integer, Integer> inverse = bimap.inverse();",
      "info" : "VariableDeclarationStatement[2922-2972]:VariableDeclarationStatement[3020-3070]"
    }, {
      "left" : "for (int i = 0; i < N; i++)",
      "right" : "for (int i = 0; i < N; i++)",
      "info" : "ForStatement[2978-3060]:ForStatement[3076-3158]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3006-3060]:Block[3104-3158]"
    }, {
      "left" : "assertNull(bimap.put(2 * i, 2 * i + 1));",
      "right" : "assertNull(bimap.put(2 * i, 2 * i + 1));",
      "info" : "ExpressionStatement[3014-3054]:ExpressionStatement[3112-3152]"
    }, {
      "left" : "assertNull(bimap.put(2 * i, 2 * i + 1));",
      "right" : "map.put(\"foo\", 1);",
      "info" : "ExpressionStatement[3014-3054]:ExpressionStatement[4707-4725]"
    }, {
      "left" : "assertNull(bimap.put(2 * i, 2 * i + 1));",
      "right" : "map.put(\"foo\", 1);",
      "info" : "ExpressionStatement[3014-3054]:ExpressionStatement[5134-5152]"
    }, {
      "left" : "assertNull(bimap.put(2 * i, 2 * i + 1));",
      "right" : "map.put(\"foo\", 1);",
      "info" : "ExpressionStatement[3014-3054]:ExpressionStatement[5547-5565]"
    }, {
      "left" : "assertNull(bimap.put(2 * i, 2 * i + 1));",
      "right" : "map.put(\"foo\", 1);",
      "info" : "ExpressionStatement[3014-3054]:ExpressionStatement[5958-5976]"
    }, {
      "left" : "assertNull(bimap.put(2 * i, 2 * i + 1));",
      "right" : "map.put(\"foo\", 1);",
      "info" : "ExpressionStatement[3014-3054]:ExpressionStatement[6367-6385]"
    }, {
      "left" : "assertNull(bimap.put(2 * i, 2 * i + 1));",
      "right" : "map.put(\"foo\", 1);",
      "info" : "ExpressionStatement[3014-3054]:ExpressionStatement[6789-6807]"
    }, {
      "left" : "assertNull(bimap.put(2 * i, 2 * i + 1));",
      "right" : "map.put(\"foo\", 1);",
      "info" : "ExpressionStatement[3014-3054]:ExpressionStatement[7228-7246]"
    }, {
      "left" : "bimap.put(2 * i, 2 * i + 1)",
      "right" : "map.put(\"foo\", 1)",
      "info" : "MethodInvocation[3025-3052]:MethodInvocation[4707-4724]"
    }, {
      "left" : "bimap.put(2 * i, 2 * i + 1)",
      "right" : "map.put(\"foo\", 1)",
      "info" : "MethodInvocation[3025-3052]:MethodInvocation[5134-5151]"
    }, {
      "left" : "bimap.put(2 * i, 2 * i + 1)",
      "right" : "map.put(\"foo\", 1)",
      "info" : "MethodInvocation[3025-3052]:MethodInvocation[5547-5564]"
    }, {
      "left" : "bimap.put(2 * i, 2 * i + 1)",
      "right" : "map.put(\"foo\", 1)",
      "info" : "MethodInvocation[3025-3052]:MethodInvocation[5958-5975]"
    }, {
      "left" : "bimap.put(2 * i, 2 * i + 1)",
      "right" : "map.put(\"foo\", 1)",
      "info" : "MethodInvocation[3025-3052]:MethodInvocation[6367-6384]"
    }, {
      "left" : "bimap.put(2 * i, 2 * i + 1)",
      "right" : "map.put(\"foo\", 1)",
      "info" : "MethodInvocation[3025-3052]:MethodInvocation[6789-6806]"
    }, {
      "left" : "bimap.put(2 * i, 2 * i + 1)",
      "right" : "map.put(\"foo\", 1)",
      "info" : "MethodInvocation[3025-3052]:MethodInvocation[7228-7245]"
    }, {
      "left" : "1",
      "right" : "1",
      "info" : "NumberLiteral[3050-3051]:NumberLiteral[4722-4723]"
    }, {
      "left" : "1",
      "right" : "1",
      "info" : "NumberLiteral[3050-3051]:NumberLiteral[5149-5150]"
    }, {
      "left" : "1",
      "right" : "1",
      "info" : "NumberLiteral[3050-3051]:NumberLiteral[5562-5563]"
    }, {
      "left" : "1",
      "right" : "1",
      "info" : "NumberLiteral[3050-3051]:NumberLiteral[5973-5974]"
    }, {
      "left" : "1",
      "right" : "1",
      "info" : "NumberLiteral[3050-3051]:NumberLiteral[6382-6383]"
    }, {
      "left" : "1",
      "right" : "1",
      "info" : "NumberLiteral[3050-3051]:NumberLiteral[6804-6805]"
    }, {
      "left" : "1",
      "right" : "1",
      "info" : "NumberLiteral[3050-3051]:NumberLiteral[7243-7244]"
    }, {
      "left" : "for (int i = 0; i < N; i++)",
      "right" : "for (int i = 0; i < N; i++)",
      "info" : "ForStatement[3065-3155]:ForStatement[3163-3253]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3093-3155]:Block[3191-3253]"
    }, {
      "left" : "assertEquals(2 * i + 1, (int) bimap.get(2 * i));",
      "right" : "assertEquals(2 * i + 1, (int) bimap.get(2 * i));",
      "info" : "ExpressionStatement[3101-3149]:ExpressionStatement[3199-3247]"
    }, {
      "left" : "for (int i = 0; i < N; i++)",
      "right" : "for (int i = 0; i < N; i++)",
      "info" : "ForStatement[3160-3252]:ForStatement[3258-3350]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3188-3252]:Block[3286-3350]"
    }, {
      "left" : "assertEquals(2 * i, (int) inverse.get(2 * i + 1));",
      "right" : "assertEquals(2 * i, (int) inverse.get(2 * i + 1));",
      "info" : "ExpressionStatement[3196-3246]:ExpressionStatement[3294-3344]"
    }, {
      "left" : "for (int i = 0; i < N; i++)",
      "right" : "for (int i = 0; i < N; i++)",
      "info" : "ForStatement[3257-3400]:ForStatement[3355-3498]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3285-3400]:Block[3383-3498]"
    }, {
      "left" : "int oldValue = bimap.get(2 * i);",
      "right" : "int oldValue = bimap.get(2 * i);",
      "info" : "VariableDeclarationStatement[3293-3325]:VariableDeclarationStatement[3391-3423]"
    }, {
      "left" : "assertEquals(2 * i + 1, (int) bimap.put(2 * i, oldValue - 2));",
      "right" : "assertEquals(2 * i + 1, (int) bimap.put(2 * i, oldValue - 2));",
      "info" : "ExpressionStatement[3332-3394]:ExpressionStatement[3430-3492]"
    }, {
      "left" : "assertEquals(2 * i + 1, (int) bimap.put(2 * i, oldValue - 2));",
      "right" : "map.put(\"bar\", 2);",
      "info" : "ExpressionStatement[3332-3394]:ExpressionStatement[4730-4748]"
    }, {
      "left" : "assertEquals(2 * i + 1, (int) bimap.put(2 * i, oldValue - 2));",
      "right" : "map.put(\"bar\", 2);",
      "info" : "ExpressionStatement[3332-3394]:ExpressionStatement[5157-5175]"
    }, {
      "left" : "assertEquals(2 * i + 1, (int) bimap.put(2 * i, oldValue - 2));",
      "right" : "map.put(\"bar\", 2);",
      "info" : "ExpressionStatement[3332-3394]:ExpressionStatement[5570-5588]"
    }, {
      "left" : "assertEquals(2 * i + 1, (int) bimap.put(2 * i, oldValue - 2));",
      "right" : "map.put(\"bar\", 2);",
      "info" : "ExpressionStatement[3332-3394]:ExpressionStatement[5981-5999]"
    }, {
      "left" : "assertEquals(2 * i + 1, (int) bimap.put(2 * i, oldValue - 2));",
      "right" : "map.put(\"bar\", 2);",
      "info" : "ExpressionStatement[3332-3394]:ExpressionStatement[6390-6408]"
    }, {
      "left" : "assertEquals(2 * i + 1, (int) bimap.put(2 * i, oldValue - 2));",
      "right" : "map.put(\"bar\", 2);",
      "info" : "ExpressionStatement[3332-3394]:ExpressionStatement[6812-6830]"
    }, {
      "left" : "assertEquals(2 * i + 1, (int) bimap.put(2 * i, oldValue - 2));",
      "right" : "map.put(\"bar\", 2);",
      "info" : "ExpressionStatement[3332-3394]:ExpressionStatement[7251-7269]"
    }, {
      "left" : "bimap.put(2 * i, oldValue - 2)",
      "right" : "map.put(\"bar\", 2)",
      "info" : "MethodInvocation[3362-3392]:MethodInvocation[4730-4747]"
    }, {
      "left" : "bimap.put(2 * i, oldValue - 2)",
      "right" : "map.put(\"bar\", 2)",
      "info" : "MethodInvocation[3362-3392]:MethodInvocation[5157-5174]"
    }, {
      "left" : "bimap.put(2 * i, oldValue - 2)",
      "right" : "map.put(\"bar\", 2)",
      "info" : "MethodInvocation[3362-3392]:MethodInvocation[5570-5587]"
    }, {
      "left" : "bimap.put(2 * i, oldValue - 2)",
      "right" : "map.put(\"bar\", 2)",
      "info" : "MethodInvocation[3362-3392]:MethodInvocation[5981-5998]"
    }, {
      "left" : "bimap.put(2 * i, oldValue - 2)",
      "right" : "map.put(\"bar\", 2)",
      "info" : "MethodInvocation[3362-3392]:MethodInvocation[6390-6407]"
    }, {
      "left" : "bimap.put(2 * i, oldValue - 2)",
      "right" : "map.put(\"bar\", 2)",
      "info" : "MethodInvocation[3362-3392]:MethodInvocation[6812-6829]"
    }, {
      "left" : "bimap.put(2 * i, oldValue - 2)",
      "right" : "map.put(\"bar\", 2)",
      "info" : "MethodInvocation[3362-3392]:MethodInvocation[7251-7268]"
    }, {
      "left" : "2",
      "right" : "2",
      "info" : "NumberLiteral[3372-3373]:NumberLiteral[4745-4746]"
    }, {
      "left" : "2",
      "right" : "2",
      "info" : "NumberLiteral[3372-3373]:NumberLiteral[5172-5173]"
    }, {
      "left" : "2",
      "right" : "2",
      "info" : "NumberLiteral[3372-3373]:NumberLiteral[5585-5586]"
    }, {
      "left" : "2",
      "right" : "2",
      "info" : "NumberLiteral[3372-3373]:NumberLiteral[5996-5997]"
    }, {
      "left" : "2",
      "right" : "2",
      "info" : "NumberLiteral[3372-3373]:NumberLiteral[6405-6406]"
    }, {
      "left" : "2",
      "right" : "2",
      "info" : "NumberLiteral[3372-3373]:NumberLiteral[6827-6828]"
    }, {
      "left" : "2",
      "right" : "2",
      "info" : "NumberLiteral[3372-3373]:NumberLiteral[7266-7267]"
    }, {
      "left" : "for (int i = 0; i < N; i++)",
      "right" : "for (int i = 0; i < N; i++)",
      "info" : "ForStatement[3405-3495]:ForStatement[3503-3593]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3433-3495]:Block[3531-3593]"
    }, {
      "left" : "assertEquals(2 * i - 1, (int) bimap.get(2 * i));",
      "right" : "assertEquals(2 * i - 1, (int) bimap.get(2 * i));",
      "info" : "ExpressionStatement[3441-3489]:ExpressionStatement[3539-3587]"
    }, {
      "left" : "for (int i = 0; i < N; i++)",
      "right" : "for (int i = 0; i < N; i++)",
      "info" : "ForStatement[3500-3592]:ForStatement[3598-3690]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3528-3592]:Block[3626-3690]"
    }, {
      "left" : "assertEquals(2 * i, (int) inverse.get(2 * i - 1));",
      "right" : "assertEquals(2 * i, (int) inverse.get(2 * i - 1));",
      "info" : "ExpressionStatement[3536-3586]:ExpressionStatement[3634-3684]"
    }, {
      "left" : "Set<Entry<Integer, Integer>> entries = bimap.entrySet();",
      "right" : "Set<Entry<Integer, Integer>> entries = bimap.entrySet();",
      "info" : "VariableDeclarationStatement[3597-3653]:VariableDeclarationStatement[3695-3751]"
    }, {
      "left" : "for (Entry<Integer, Integer> entry : entries)",
      "right" : "for (Entry<Integer, Integer> entry : entries)",
      "info" : "EnhancedForStatement[3658-3759]:EnhancedForStatement[3756-3857]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3704-3759]:Block[3802-3857]"
    }, {
      "left" : "entry.setValue(entry.getValue() + 2 * N);",
      "right" : "entry.setValue(entry.getValue() + 2 * N);",
      "info" : "ExpressionStatement[3712-3753]:ExpressionStatement[3810-3851]"
    }, {
      "left" : "for (int i = 0; i < N; i++)",
      "right" : "for (int i = 0; i < N; i++)",
      "info" : "ForStatement[3764-3862]:ForStatement[3862-3960]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3792-3862]:Block[3890-3960]"
    }, {
      "left" : "assertEquals(2 * N + 2 * i - 1, (int) bimap.get(2 * i));",
      "right" : "assertEquals(2 * N + 2 * i - 1, (int) bimap.get(2 * i));",
      "info" : "ExpressionStatement[3800-3856]:ExpressionStatement[3898-3954]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3870-3876]:Modifier[3968-3974]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[3877-3881]:PrimitiveType[3975-3979]"
    }, {
      "left" : "testBiMapEntrySetIteratorRemove",
      "right" : "testBiMapEntrySetIteratorRemove",
      "info" : "SimpleName[3882-3913]:SimpleName[3980-4011]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3916-4444]:Block[4014-4542]"
    }, {
      "left" : "BiMap<Integer, String> map = HashBiMap.create();",
      "right" : "BiMap<Integer, String> map = HashBiMap.create();",
      "info" : "VariableDeclarationStatement[3922-3970]:VariableDeclarationStatement[4020-4068]"
    }, {
      "left" : "BiMap<Integer, String> map = HashBiMap.create();",
      "right" : "BiMap<String, Integer> map = HashBiMap.create();",
      "info" : "VariableDeclarationStatement[3922-3970]:VariableDeclarationStatement[6736-6784]"
    }, {
      "left" : "map = HashBiMap.create()",
      "right" : "map = HashBiMap.create()",
      "info" : "VariableDeclarationFragment[3945-3969]:VariableDeclarationFragment[4677-4701]"
    }, {
      "left" : "map = HashBiMap.create()",
      "right" : "map = HashBiMap.create()",
      "info" : "VariableDeclarationFragment[3945-3969]:VariableDeclarationFragment[5104-5128]"
    }, {
      "left" : "map = HashBiMap.create()",
      "right" : "map = HashBiMap.create()",
      "info" : "VariableDeclarationFragment[3945-3969]:VariableDeclarationFragment[5517-5541]"
    }, {
      "left" : "map = HashBiMap.create()",
      "right" : "map = HashBiMap.create()",
      "info" : "VariableDeclarationFragment[3945-3969]:VariableDeclarationFragment[5928-5952]"
    }, {
      "left" : "map = HashBiMap.create()",
      "right" : "map = HashBiMap.create()",
      "info" : "VariableDeclarationFragment[3945-3969]:VariableDeclarationFragment[6337-6361]"
    }, {
      "left" : "map.put(1, \"one\");",
      "right" : "map.put(1, \"one\");",
      "info" : "ExpressionStatement[3975-3993]:ExpressionStatement[4073-4091]"
    }, {
      "left" : "map",
      "right" : "map",
      "info" : "METHOD_INVOCATION_RECEIVER[3975-3978]:METHOD_INVOCATION_RECEIVER[4707-4710]"
    }, {
      "left" : "map.put(1, \"one\");",
      "right" : "map.put(\"quux\", 3);",
      "info" : "ExpressionStatement[3975-3993]:ExpressionStatement[4753-4772]"
    }, {
      "left" : "map",
      "right" : "map",
      "info" : "METHOD_INVOCATION_RECEIVER[3975-3978]:METHOD_INVOCATION_RECEIVER[5134-5137]"
    }, {
      "left" : "map.put(1, \"one\");",
      "right" : "map.put(\"quux\", 3);",
      "info" : "ExpressionStatement[3975-3993]:ExpressionStatement[5180-5199]"
    }, {
      "left" : "map",
      "right" : "map",
      "info" : "METHOD_INVOCATION_RECEIVER[3975-3978]:METHOD_INVOCATION_RECEIVER[5547-5550]"
    }, {
      "left" : "map.put(1, \"one\");",
      "right" : "map.put(\"quux\", 3);",
      "info" : "ExpressionStatement[3975-3993]:ExpressionStatement[5593-5612]"
    }, {
      "left" : "map",
      "right" : "map",
      "info" : "METHOD_INVOCATION_RECEIVER[3975-3978]:METHOD_INVOCATION_RECEIVER[5958-5961]"
    }, {
      "left" : "map.put(1, \"one\");",
      "right" : "map.put(\"quux\", 3);",
      "info" : "ExpressionStatement[3975-3993]:ExpressionStatement[6004-6023]"
    }, {
      "left" : "map",
      "right" : "map",
      "info" : "METHOD_INVOCATION_RECEIVER[3975-3978]:METHOD_INVOCATION_RECEIVER[6367-6370]"
    }, {
      "left" : "map.put(1, \"one\");",
      "right" : "map.put(\"quux\", 3);",
      "info" : "ExpressionStatement[3975-3993]:ExpressionStatement[6413-6432]"
    }, {
      "left" : "map",
      "right" : "map",
      "info" : "METHOD_INVOCATION_RECEIVER[3975-3978]:METHOD_INVOCATION_RECEIVER[6812-6815]"
    }, {
      "left" : "map.put(1, \"one\");",
      "right" : "map.put(\"quux\", 3);",
      "info" : "ExpressionStatement[3975-3993]:ExpressionStatement[6835-6854]"
    }, {
      "left" : "map",
      "right" : "map",
      "info" : "METHOD_INVOCATION_RECEIVER[3975-3978]:METHOD_INVOCATION_RECEIVER[7251-7254]"
    }, {
      "left" : "map.put(1, \"one\");",
      "right" : "map.put(\"quux\", 3);",
      "info" : "ExpressionStatement[3975-3993]:ExpressionStatement[7274-7293]"
    }, {
      "left" : "\"one\"",
      "right" : "\"quux\"",
      "info" : "StringLiteral[3986-3991]:StringLiteral[4761-4767]"
    }, {
      "left" : "\"one\"",
      "right" : "\"quux\"",
      "info" : "StringLiteral[3986-3991]:StringLiteral[5188-5194]"
    }, {
      "left" : "\"one\"",
      "right" : "\"quux\"",
      "info" : "StringLiteral[3986-3991]:StringLiteral[5601-5607]"
    }, {
      "left" : "\"one\"",
      "right" : "\"quux\"",
      "info" : "StringLiteral[3986-3991]:StringLiteral[6012-6018]"
    }, {
      "left" : "\"one\"",
      "right" : "\"quux\"",
      "info" : "StringLiteral[3986-3991]:StringLiteral[6421-6427]"
    }, {
      "left" : "\"one\"",
      "right" : "\"quux\"",
      "info" : "StringLiteral[3986-3991]:StringLiteral[6843-6849]"
    }, {
      "left" : "\"one\"",
      "right" : "\"quux\"",
      "info" : "StringLiteral[3986-3991]:StringLiteral[7282-7288]"
    }, {
      "left" : "Set<Map.Entry<Integer, String>> entries = map.entrySet();",
      "right" : "Set<Map.Entry<Integer, String>> entries = map.entrySet();",
      "info" : "VariableDeclarationStatement[3998-4055]:VariableDeclarationStatement[4096-4153]"
    }, {
      "left" : "map.entrySet()",
      "right" : "map.entrySet()",
      "info" : "MethodInvocation[4040-4054]:MethodInvocation[4788-4802]"
    }, {
      "left" : "map.entrySet()",
      "right" : "map.entrySet()",
      "info" : "MethodInvocation[4040-4054]:MethodInvocation[5239-5253]"
    }, {
      "left" : "map.entrySet()",
      "right" : "map.entrySet()",
      "info" : "MethodInvocation[4040-4054]:MethodInvocation[5652-5666]"
    }, {
      "left" : "map.entrySet()",
      "right" : "map.entrySet()",
      "info" : "MethodInvocation[4040-4054]:MethodInvocation[6064-6078]"
    }, {
      "left" : "map.entrySet()",
      "right" : "map.entrySet()",
      "info" : "MethodInvocation[4040-4054]:MethodInvocation[6478-6492]"
    }, {
      "left" : "map.entrySet()",
      "right" : "map.entrySet()",
      "info" : "MethodInvocation[4040-4054]:MethodInvocation[6910-6924]"
    }, {
      "left" : "Iterator<Map.Entry<Integer, String>> iterator = entries.iterator();",
      "right" : "Iterator<Map.Entry<Integer, String>> iterator = entries.iterator();",
      "info" : "VariableDeclarationStatement[4060-4127]:VariableDeclarationStatement[4158-4225]"
    }, {
      "left" : "Map.Entry<Integer, String> entry = iterator.next();",
      "right" : "Map.Entry<Integer, String> entry = iterator.next();",
      "info" : "VariableDeclarationStatement[4132-4183]:VariableDeclarationStatement[4230-4281]"
    }, {
      "left" : "entry.setValue(\"two\");",
      "right" : "entry.setValue(\"two\");",
      "info" : "ExpressionStatement[4188-4210]:ExpressionStatement[4286-4308]"
    }, {
      "left" : "entry.setValue(\"two\");",
      "right" : "map.remove(\"bar\");",
      "info" : "ExpressionStatement[4188-4210]:ExpressionStatement[5618-5636]"
    }, {
      "left" : "setValue",
      "right" : "remove",
      "info" : "SimpleName[4194-4202]:SimpleName[5622-5628]"
    }, {
      "left" : "\"two\"",
      "right" : "\"bar\"",
      "info" : "StringLiteral[4203-4208]:StringLiteral[5629-5634]"
    }, {
      "left" : "assertEquals(\"two\", map.get(1));",
      "right" : "assertEquals(\"two\", map.get(1));",
      "info" : "ExpressionStatement[4261-4293]:ExpressionStatement[4359-4391]"
    }, {
      "left" : "assertEquals",
      "right" : "assertThat",
      "info" : "SimpleName[4261-4273]:SimpleName[4777-4787]"
    }, {
      "left" : "assertEquals(\"two\", map.get(1))",
      "right" : "assertThat(map.entrySet())",
      "info" : "MethodInvocation[4261-4292]:MethodInvocation[4777-4803]"
    }, {
      "left" : "assertEquals",
      "right" : "assertThat",
      "info" : "SimpleName[4261-4273]:SimpleName[5641-5651]"
    }, {
      "left" : "assertEquals(\"two\", map.get(1))",
      "right" : "assertThat(map.entrySet())",
      "info" : "MethodInvocation[4261-4292]:MethodInvocation[5641-5667]"
    }, {
      "left" : "assertEquals(\"two\", map.get(1));",
      "right" : "map.forcePut(\"quux\", 1);",
      "info" : "ExpressionStatement[4261-4293]:ExpressionStatement[6438-6462]"
    }, {
      "left" : "map",
      "right" : "map",
      "info" : "METHOD_INVOCATION_RECEIVER[4281-4284]:METHOD_INVOCATION_RECEIVER[5205-5208]"
    }, {
      "left" : "map",
      "right" : "map",
      "info" : "METHOD_INVOCATION_RECEIVER[4281-4284]:METHOD_INVOCATION_RECEIVER[5618-5621]"
    }, {
      "left" : "map",
      "right" : "map",
      "info" : "METHOD_INVOCATION_RECEIVER[4281-4284]:METHOD_INVOCATION_RECEIVER[6029-6032]"
    }, {
      "left" : "map.get(1)",
      "right" : "map.forcePut(\"quux\", 1)",
      "info" : "MethodInvocation[4281-4291]:MethodInvocation[6438-6461]"
    }, {
      "left" : "get",
      "right" : "forcePut",
      "info" : "SimpleName[4285-4288]:SimpleName[6442-6450]"
    }, {
      "left" : "assertEquals(Integer.valueOf(1), map.inverse().get(\"two\"));",
      "right" : "assertEquals(Integer.valueOf(1), map.inverse().get(\"two\"));",
      "info" : "ExpressionStatement[4298-4357]:ExpressionStatement[4396-4455]"
    }, {
      "left" : "assertEquals(Integer.valueOf(1), map.inverse().get(\"two\"));",
      "right" : "map.remove(\"foo\");",
      "info" : "ExpressionStatement[4298-4357]:ExpressionStatement[5205-5223]"
    }, {
      "left" : "assertEquals",
      "right" : "containsExactly",
      "info" : "SimpleName[4298-4310]:SimpleName[5668-5683]"
    }, {
      "left" : "assertEquals(Integer.valueOf(1), map.inverse().get(\"two\"));",
      "right" : "map.remove(\"quux\");",
      "info" : "ExpressionStatement[4298-4357]:ExpressionStatement[6029-6048]"
    }, {
      "left" : "assertEquals",
      "right" : "assertThat",
      "info" : "SimpleName[4298-4310]:SimpleName[6467-6477]"
    }, {
      "left" : "assertEquals(Integer.valueOf(1), map.inverse().get(\"two\"))",
      "right" : "assertThat(map.entrySet())",
      "info" : "MethodInvocation[4298-4356]:MethodInvocation[6467-6493]"
    }, {
      "left" : "assertEquals(Integer.valueOf(1), map.inverse().get(\"two\"));",
      "right" : "map.inverse().forcePut(1, \"quux\");",
      "info" : "ExpressionStatement[4298-4357]:ExpressionStatement[6860-6894]"
    }, {
      "left" : "assertEquals(Integer.valueOf(1), map.inverse().get(\"two\"));",
      "right" : "map.inverse().forcePut(1, \"quux\");",
      "info" : "ExpressionStatement[4298-4357]:ExpressionStatement[7299-7333]"
    }, {
      "left" : "Integer",
      "right" : "Maps",
      "info" : "SimpleName[4311-4318]:SimpleName[5693-5697]"
    }, {
      "left" : "Integer.valueOf(1), map.inverse().get(\"two\")",
      "right" : "Maps.immutableEntry(\"foo\", 1),\n        Maps.immutableEntry(\"quux\", 3)",
      "info" : "METHOD_INVOCATION_ARGUMENTS[4311-4355]:METHOD_INVOCATION_ARGUMENTS[5693-5762]"
    }, {
      "left" : "valueOf",
      "right" : "immutableEntry",
      "info" : "SimpleName[4319-4326]:SimpleName[5698-5712]"
    }, {
      "left" : "map.inverse().get(\"two\")",
      "right" : "map.remove(\"foo\")",
      "info" : "MethodInvocation[4331-4355]:MethodInvocation[5205-5222]"
    }, {
      "left" : "map",
      "right" : "Maps",
      "info" : "METHOD_INVOCATION_RECEIVER[4331-4334]:METHOD_INVOCATION_RECEIVER[5732-5736]"
    }, {
      "left" : "map.inverse().get(\"two\")",
      "right" : "map.remove(\"quux\")",
      "info" : "MethodInvocation[4331-4355]:MethodInvocation[6029-6047]"
    }, {
      "left" : "map.inverse().get(\"two\")",
      "right" : "map.inverse().forcePut(1, \"quux\")",
      "info" : "MethodInvocation[4331-4355]:MethodInvocation[6860-6893]"
    }, {
      "left" : "map.inverse().get(\"two\")",
      "right" : "map.inverse().forcePut(1, \"quux\")",
      "info" : "MethodInvocation[4331-4355]:MethodInvocation[7299-7332]"
    }, {
      "left" : "inverse",
      "right" : "remove",
      "info" : "SimpleName[4335-4342]:SimpleName[5209-5215]"
    }, {
      "left" : "inverse",
      "right" : "immutableEntry",
      "info" : "SimpleName[4335-4342]:SimpleName[5737-5751]"
    }, {
      "left" : "inverse",
      "right" : "remove",
      "info" : "SimpleName[4335-4342]:SimpleName[6033-6039]"
    }, {
      "left" : "get",
      "right" : "forcePut",
      "info" : "SimpleName[4345-4348]:SimpleName[6874-6882]"
    }, {
      "left" : "get",
      "right" : "forcePut",
      "info" : "SimpleName[4345-4348]:SimpleName[7313-7321]"
    }, {
      "left" : "\"two\"",
      "right" : "\"foo\"",
      "info" : "StringLiteral[4349-4354]:StringLiteral[5216-5221]"
    }, {
      "left" : "\"two\"",
      "right" : "\"quux\"",
      "info" : "StringLiteral[4349-4354]:StringLiteral[5752-5758]"
    }, {
      "left" : "\"two\"",
      "right" : "\"quux\"",
      "info" : "StringLiteral[4349-4354]:StringLiteral[6040-6046]"
    }, {
      "left" : "\"two\"",
      "right" : "\"quux\"",
      "info" : "StringLiteral[4349-4354]:StringLiteral[6886-6892]"
    }, {
      "left" : "\"two\"",
      "right" : "\"quux\"",
      "info" : "StringLiteral[4349-4354]:StringLiteral[7325-7331]"
    }, {
      "left" : "iterator.remove();",
      "right" : "iterator.remove();",
      "info" : "ExpressionStatement[4362-4380]:ExpressionStatement[4460-4478]"
    }, {
      "left" : "assertTrue(map.isEmpty());",
      "right" : "assertTrue(map.isEmpty());",
      "info" : "ExpressionStatement[4414-4440]:ExpressionStatement[4512-4538]"
    }, {
      "left" : "assertTrue",
      "right" : "assertThat",
      "info" : "SimpleName[4414-4424]:SimpleName[5228-5238]"
    }, {
      "left" : "assertTrue(map.isEmpty())",
      "right" : "assertThat(map.entrySet())",
      "info" : "MethodInvocation[4414-4439]:MethodInvocation[5228-5254]"
    }, {
      "left" : "assertTrue",
      "right" : "assertThat",
      "info" : "SimpleName[4414-4424]:SimpleName[6053-6063]"
    }, {
      "left" : "assertTrue(map.isEmpty())",
      "right" : "assertThat(map.entrySet())",
      "info" : "MethodInvocation[4414-4439]:MethodInvocation[6053-6079]"
    }, {
      "left" : "assertTrue",
      "right" : "assertThat",
      "info" : "SimpleName[4414-4424]:SimpleName[6899-6909]"
    }, {
      "left" : "assertTrue(map.isEmpty())",
      "right" : "assertThat(map.entrySet())",
      "info" : "MethodInvocation[4414-4439]:MethodInvocation[6899-6925]"
    }, {
      "left" : "map",
      "right" : "map",
      "info" : "METHOD_INVOCATION_RECEIVER[4425-4428]:METHOD_INVOCATION_RECEIVER[4753-4756]"
    }, {
      "left" : "map",
      "right" : "map",
      "info" : "METHOD_INVOCATION_RECEIVER[4425-4428]:METHOD_INVOCATION_RECEIVER[5180-5183]"
    }, {
      "left" : "map",
      "right" : "map",
      "info" : "METHOD_INVOCATION_RECEIVER[4425-4428]:METHOD_INVOCATION_RECEIVER[5593-5596]"
    }, {
      "left" : "map",
      "right" : "map",
      "info" : "METHOD_INVOCATION_RECEIVER[4425-4428]:METHOD_INVOCATION_RECEIVER[6004-6007]"
    }, {
      "left" : "map",
      "right" : "map",
      "info" : "METHOD_INVOCATION_RECEIVER[4425-4428]:METHOD_INVOCATION_RECEIVER[6413-6416]"
    }, {
      "left" : "map",
      "right" : "map",
      "info" : "METHOD_INVOCATION_RECEIVER[4425-4428]:METHOD_INVOCATION_RECEIVER[6835-6838]"
    }, {
      "left" : "map",
      "right" : "map",
      "info" : "METHOD_INVOCATION_RECEIVER[4425-4428]:METHOD_INVOCATION_RECEIVER[7274-7277]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4448-4454]:Modifier[7489-7495]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[4455-4459]:PrimitiveType[7496-7500]"
    }, {
      "left" : "testInverseEntrySetValue",
      "right" : "testInverseEntrySetValue",
      "info" : "SimpleName[4460-4484]:SimpleName[7501-7525]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4487-4755]:Block[7528-7796]"
    }, {
      "left" : "BiMap<Integer, String> map = HashBiMap.create();",
      "right" : "BiMap<String, Integer> map = HashBiMap.create();",
      "info" : "VariableDeclarationStatement[4493-4541]:VariableDeclarationStatement[7175-7223]"
    }, {
      "left" : "BiMap<Integer, String> map = HashBiMap.create();",
      "right" : "BiMap<Integer, String> map = HashBiMap.create();",
      "info" : "VariableDeclarationStatement[4493-4541]:VariableDeclarationStatement[7534-7582]"
    }, {
      "left" : "Integer",
      "right" : "inOrder",
      "info" : "SimpleName[4499-4506]:SimpleName[5764-5771]"
    }, {
      "left" : "create",
      "right" : "containsExactly",
      "info" : "SimpleName[4532-4538]:SimpleName[4804-4819]"
    }, {
      "left" : "create",
      "right" : "containsExactly",
      "info" : "SimpleName[4532-4538]:SimpleName[6080-6095]"
    }, {
      "left" : "map",
      "right" : "map",
      "info" : "METHOD_INVOCATION_RECEIVER[4546-4549]:METHOD_INVOCATION_RECEIVER[4730-4733]"
    }, {
      "left" : "map.put(1, \"one\")",
      "right" : "Maps.immutableEntry(\"foo\", 1)",
      "info" : "MethodInvocation[4546-4563]:MethodInvocation[4829-4858]"
    }, {
      "left" : "map",
      "right" : "map",
      "info" : "METHOD_INVOCATION_RECEIVER[4546-4549]:METHOD_INVOCATION_RECEIVER[5157-5160]"
    }, {
      "left" : "map",
      "right" : "map",
      "info" : "METHOD_INVOCATION_RECEIVER[4546-4549]:METHOD_INVOCATION_RECEIVER[5570-5573]"
    }, {
      "left" : "map",
      "right" : "map",
      "info" : "METHOD_INVOCATION_RECEIVER[4546-4549]:METHOD_INVOCATION_RECEIVER[5981-5984]"
    }, {
      "left" : "map.put(1, \"one\")",
      "right" : "Maps.immutableEntry(\"foo\", 1)",
      "info" : "MethodInvocation[4546-4563]:MethodInvocation[6105-6134]"
    }, {
      "left" : "map",
      "right" : "map",
      "info" : "METHOD_INVOCATION_RECEIVER[4546-4549]:METHOD_INVOCATION_RECEIVER[6390-6393]"
    }, {
      "left" : "map",
      "right" : "map",
      "info" : "METHOD_INVOCATION_RECEIVER[4546-4549]:METHOD_INVOCATION_RECEIVER[6789-6792]"
    }, {
      "left" : "map",
      "right" : "map",
      "info" : "METHOD_INVOCATION_RECEIVER[4546-4549]:METHOD_INVOCATION_RECEIVER[7228-7231]"
    }, {
      "left" : "map.put(1, \"one\");",
      "right" : "map.put(1, \"one\");",
      "info" : "ExpressionStatement[4546-4564]:ExpressionStatement[7587-7605]"
    }, {
      "left" : "put",
      "right" : "immutableEntry",
      "info" : "SimpleName[4550-4553]:SimpleName[4834-4848]"
    }, {
      "left" : "put",
      "right" : "immutableEntry",
      "info" : "SimpleName[4550-4553]:SimpleName[6110-6124]"
    }, {
      "left" : "1",
      "right" : "1",
      "info" : "NumberLiteral[4554-4555]:NumberLiteral[7322-7323]"
    }, {
      "left" : "Entry",
      "right" : "containsExactly",
      "info" : "SimpleName[4569-4574]:SimpleName[5255-5270]"
    }, {
      "left" : "Entry",
      "right" : "containsExactly",
      "info" : "SimpleName[4569-4574]:SimpleName[6494-6509]"
    }, {
      "left" : "Entry",
      "right" : "containsExactly",
      "info" : "SimpleName[4569-4574]:SimpleName[6926-6941]"
    }, {
      "left" : "Entry<String, Integer> inverseEntry = Iterables.getOnlyElement(map.inverse().entrySet());",
      "right" : "Entry<String, Integer> inverseEntry = Iterables.getOnlyElement(map.inverse().entrySet());",
      "info" : "VariableDeclarationStatement[4569-4658]:VariableDeclarationStatement[7610-7699]"
    }, {
      "left" : "Iterables.getOnlyElement(map.inverse().entrySet())",
      "right" : "assertThat(map.inverse().entrySet())",
      "info" : "MethodInvocation[4607-4657]:MethodInvocation[7338-7374]"
    }, {
      "left" : "getOnlyElement",
      "right" : "assertThat",
      "info" : "SimpleName[4617-4631]:SimpleName[7338-7348]"
    }, {
      "left" : "inverseEntry",
      "right" : "Maps",
      "info" : "SimpleName[4663-4675]:SimpleName[4868-4872]"
    }, {
      "left" : "inverseEntry.setValue(2)",
      "right" : "Maps.immutableEntry(\"bar\", 2)",
      "info" : "MethodInvocation[4663-4687]:MethodInvocation[4868-4897]"
    }, {
      "left" : "inverseEntry",
      "right" : "Maps",
      "info" : "SimpleName[4663-4675]:SimpleName[5280-5284]"
    }, {
      "left" : "inverseEntry.setValue(2)",
      "right" : "Maps.immutableEntry(\"bar\", 2)",
      "info" : "MethodInvocation[4663-4687]:MethodInvocation[5280-5309]"
    }, {
      "left" : "inverseEntry",
      "right" : "Maps",
      "info" : "SimpleName[4663-4675]:SimpleName[6144-6148]"
    }, {
      "left" : "inverseEntry.setValue(2)",
      "right" : "Maps.immutableEntry(\"bar\", 2)",
      "info" : "MethodInvocation[4663-4687]:MethodInvocation[6144-6173]"
    }, {
      "left" : "inverseEntry",
      "right" : "Maps",
      "info" : "SimpleName[4663-4675]:SimpleName[6519-6523]"
    }, {
      "left" : "inverseEntry.setValue(2)",
      "right" : "Maps.immutableEntry(\"bar\", 2)",
      "info" : "MethodInvocation[4663-4687]:MethodInvocation[6519-6548]"
    }, {
      "left" : "inverseEntry",
      "right" : "Maps",
      "info" : "SimpleName[4663-4675]:SimpleName[6951-6955]"
    }, {
      "left" : "inverseEntry.setValue(2)",
      "right" : "Maps.immutableEntry(\"bar\", 2)",
      "info" : "MethodInvocation[4663-4687]:MethodInvocation[6951-6980]"
    }, {
      "left" : "inverseEntry",
      "right" : "Maps",
      "info" : "SimpleName[4663-4675]:SimpleName[7400-7404]"
    }, {
      "left" : "inverseEntry.setValue(2)",
      "right" : "Maps.immutableEntry(2, \"bar\")",
      "info" : "MethodInvocation[4663-4687]:MethodInvocation[7400-7429]"
    }, {
      "left" : "inverseEntry.setValue(2);",
      "right" : "inverseEntry.setValue(2);",
      "info" : "ExpressionStatement[4663-4688]:ExpressionStatement[7704-7729]"
    }, {
      "left" : "setValue",
      "right" : "immutableEntry",
      "info" : "SimpleName[4676-4684]:SimpleName[4873-4887]"
    }, {
      "left" : "setValue",
      "right" : "immutableEntry",
      "info" : "SimpleName[4676-4684]:SimpleName[5285-5299]"
    }, {
      "left" : "setValue",
      "right" : "immutableEntry",
      "info" : "SimpleName[4676-4684]:SimpleName[6149-6163]"
    }, {
      "left" : "setValue",
      "right" : "immutableEntry",
      "info" : "SimpleName[4676-4684]:SimpleName[6524-6538]"
    }, {
      "left" : "setValue",
      "right" : "immutableEntry",
      "info" : "SimpleName[4676-4684]:SimpleName[6956-6970]"
    }, {
      "left" : "setValue",
      "right" : "immutableEntry",
      "info" : "SimpleName[4676-4684]:SimpleName[7405-7419]"
    }, {
      "left" : "assertEquals(Integer.valueOf(2), inverseEntry.getValue());",
      "right" : "assertEquals(Integer.valueOf(2), inverseEntry.getValue());",
      "info" : "ExpressionStatement[4693-4751]:ExpressionStatement[7734-7792]"
    }, {
      "left" : "Integer",
      "right" : "Maps",
      "info" : "SimpleName[4706-4713]:SimpleName[4907-4911]"
    }, {
      "left" : "Integer.valueOf(2)",
      "right" : "Maps.immutableEntry(\"quux\", 3)",
      "info" : "MethodInvocation[4706-4724]:MethodInvocation[4907-4937]"
    }, {
      "left" : "Integer",
      "right" : "Maps",
      "info" : "SimpleName[4706-4713]:SimpleName[5319-5323]"
    }, {
      "left" : "Integer.valueOf(2)",
      "right" : "Maps.immutableEntry(\"quux\", 3)",
      "info" : "MethodInvocation[4706-4724]:MethodInvocation[5319-5349]"
    }, {
      "left" : "Integer",
      "right" : "inOrder",
      "info" : "SimpleName[4706-4713]:SimpleName[6175-6182]"
    }, {
      "left" : "Integer",
      "right" : "Maps",
      "info" : "SimpleName[4706-4713]:SimpleName[6558-6562]"
    }, {
      "left" : "Integer.valueOf(2)",
      "right" : "Maps.immutableEntry(\"quux\", 1)",
      "info" : "MethodInvocation[4706-4724]:MethodInvocation[6558-6588]"
    }, {
      "left" : "Integer",
      "right" : "Maps",
      "info" : "SimpleName[4706-4713]:SimpleName[6990-6994]"
    }, {
      "left" : "Integer.valueOf(2)",
      "right" : "Maps.immutableEntry(\"quux\", 1)",
      "info" : "MethodInvocation[4706-4724]:MethodInvocation[6990-7020]"
    }, {
      "left" : "Integer",
      "right" : "Maps",
      "info" : "SimpleName[4706-4713]:SimpleName[7439-7443]"
    }, {
      "left" : "Integer.valueOf(2)",
      "right" : "Maps.immutableEntry(1, \"quux\")",
      "info" : "MethodInvocation[4706-4724]:MethodInvocation[7439-7469]"
    }, {
      "left" : "valueOf",
      "right" : "immutableEntry",
      "info" : "SimpleName[4714-4721]:SimpleName[4912-4926]"
    }, {
      "left" : "valueOf",
      "right" : "immutableEntry",
      "info" : "SimpleName[4714-4721]:SimpleName[5324-5338]"
    }, {
      "left" : "valueOf",
      "right" : "immutableEntry",
      "info" : "SimpleName[4714-4721]:SimpleName[6563-6577]"
    }, {
      "left" : "valueOf",
      "right" : "immutableEntry",
      "info" : "SimpleName[4714-4721]:SimpleName[6995-7009]"
    }, {
      "left" : "valueOf",
      "right" : "immutableEntry",
      "info" : "SimpleName[4714-4721]:SimpleName[7444-7458]"
    }, {
      "left" : "2",
      "right" : "3",
      "info" : "NumberLiteral[4722-4723]:NumberLiteral[4935-4936]"
    }, {
      "left" : "2",
      "right" : "3",
      "info" : "NumberLiteral[4722-4723]:NumberLiteral[5347-5348]"
    }, {
      "left" : "2",
      "right" : "1",
      "info" : "NumberLiteral[4722-4723]:NumberLiteral[6586-6587]"
    }, {
      "left" : "2",
      "right" : "1",
      "info" : "NumberLiteral[4722-4723]:NumberLiteral[7018-7019]"
    }, {
      "left" : "2",
      "right" : "1",
      "info" : "NumberLiteral[4722-4723]:NumberLiteral[7459-7460]"
    }, {
      "left" : "inverseEntry",
      "right" : "inOrder",
      "info" : "SimpleName[4726-4738]:SimpleName[4939-4946]"
    }, {
      "left" : "inverseEntry",
      "right" : "inOrder",
      "info" : "SimpleName[4726-4738]:SimpleName[5351-5358]"
    }, {
      "left" : "inverseEntry",
      "right" : "inOrder",
      "info" : "SimpleName[4726-4738]:SimpleName[6590-6597]"
    }, {
      "left" : "inverseEntry",
      "right" : "inOrder",
      "info" : "SimpleName[4726-4738]:SimpleName[7022-7029]"
    }, {
      "left" : "inverseEntry",
      "right" : "inOrder",
      "info" : "SimpleName[4726-4738]:SimpleName[7471-7478]"
    } ]
  },
  "interFileMappings" : { }
}