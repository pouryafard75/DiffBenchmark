{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "UserService",
      "right" : "UserService",
      "info" : "TypeDeclaration[2327-9059]:TypeDeclaration[2637-12891]"
    }, {
      "left" : "private static final ObjectPermission.Type[] IMPLICIT_USER_PERMISSIONS = {\n        ObjectPermission.Type.READ,\n        ObjectPermission.Type.UPDATE\n    };",
      "right" : "private static final ObjectPermission.Type[] IMPLICIT_USER_PERMISSIONS = {\n        ObjectPermission.Type.READ,\n        ObjectPermission.Type.UPDATE\n    };",
      "info" : "FieldDeclaration[2583-2848]:FieldDeclaration[3025-3290]"
    }, {
      "left" : "@Inject\n    private UserMapper userMapper;",
      "right" : "@Inject\n    private UserMapper userMapper;",
      "info" : "FieldDeclaration[2858-2951]:FieldDeclaration[4687-4780]"
    }, {
      "left" : "@Inject\n    private UserPermissionMapper userPermissionMapper;",
      "right" : "@Inject\n    private UserPermissionMapper userPermissionMapper;",
      "info" : "FieldDeclaration[2957-3084]:FieldDeclaration[4786-4913]"
    }, {
      "left" : "@Inject\n    private Provider<ModeledUser> userProvider;",
      "right" : "@Inject\n    private Provider<ModeledUser> userProvider;",
      "info" : "FieldDeclaration[3094-3201]:FieldDeclaration[4923-5030]"
    }, {
      "left" : "@Inject\n    private PasswordEncryptionService encryptionService;",
      "right" : "@Inject\n    private PasswordEncryptionService encryptionService;",
      "info" : "FieldDeclaration[3207-3325]:FieldDeclaration[5036-5154]"
    }, {
      "left" : "protected ModeledDirectoryObjectMapper<UserModel> getObjectMapper()",
      "right" : "protected ModeledDirectoryObjectMapper<UserModel> getObjectMapper()",
      "info" : "MethodDeclaration[3331-3447]:MethodDeclaration[5160-5276]"
    }, {
      "left" : "protected ObjectPermissionMapper getPermissionMapper()",
      "right" : "protected ObjectPermissionMapper getPermissionMapper()",
      "info" : "MethodDeclaration[3453-3566]:MethodDeclaration[5282-5395]"
    }, {
      "left" : "protected ModeledUser getObjectInstance(AuthenticatedUser currentUser,\n            UserModel model)",
      "right" : "protected ModeledUser getObjectInstance(AuthenticatedUser currentUser,\n            UserModel model)",
      "info" : "MethodDeclaration[3572-3800]:MethodDeclaration[5401-5629]"
    }, {
      "left" : "protected UserModel getModelInstance(AuthenticatedUser currentUser,\n            final User object)",
      "right" : "protected UserModel getModelInstance(AuthenticatedUser currentUser,\n            final User object)",
      "info" : "MethodDeclaration[3806-4302]:MethodDeclaration[5635-6131]"
    }, {
      "left" : "protected boolean hasCreatePermission(AuthenticatedUser user)\n            throws GuacamoleException",
      "right" : "protected boolean hasCreatePermission(AuthenticatedUser user)\n            throws GuacamoleException",
      "info" : "MethodDeclaration[4308-4662]:MethodDeclaration[6137-6491]"
    }, {
      "left" : "protected ObjectPermissionSet getPermissionSet(AuthenticatedUser user)\n            throws GuacamoleException",
      "right" : "protected ObjectPermissionSet getPermissionSet(AuthenticatedUser user)\n            throws GuacamoleException",
      "info" : "MethodDeclaration[4668-4899]:MethodDeclaration[6497-6728]"
    }, {
      "left" : "protected void beforeCreate(AuthenticatedUser user, UserModel model)\n            throws GuacamoleException",
      "right" : "protected void beforeCreate(AuthenticatedUser user, UserModel model)\n            throws GuacamoleException",
      "info" : "MethodDeclaration[4905-5586]:MethodDeclaration[6734-7415]"
    }, {
      "left" : "protected void beforeUpdate(AuthenticatedUser user,\n            UserModel model) throws GuacamoleException",
      "right" : "protected void beforeUpdate(AuthenticatedUser user,\n            UserModel model) throws GuacamoleException",
      "info" : "MethodDeclaration[5592-6406]:MethodDeclaration[7421-8235]"
    }, {
      "left" : "protected Collection<ObjectPermissionModel>\n        getImplicitPermissions(AuthenticatedUser user, UserModel model)",
      "right" : "protected Collection<ObjectPermissionModel>\n        getImplicitPermissions(AuthenticatedUser user, UserModel model)",
      "info" : "MethodDeclaration[6412-7393]:MethodDeclaration[8241-9222]"
    }, {
      "left" : "protected void beforeDelete(AuthenticatedUser user, String identifier) throws GuacamoleException",
      "right" : "protected void beforeDelete(AuthenticatedUser user, String identifier) throws GuacamoleException",
      "info" : "MethodDeclaration[7407-7783]:MethodDeclaration[9236-9612]"
    }, {
      "left" : "public ModeledUser retrieveUser(Credentials credentials)",
      "right" : "public ModeledUser retrieveUser(Credentials credentials)\n            throws GuacamoleException",
      "info" : "MethodDeclaration[7789-9056]:MethodDeclaration[9618-12888]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3413-3447]:Block[5242-5276]"
    }, {
      "left" : "return userMapper;",
      "right" : "return userMapper;",
      "info" : "ReturnStatement[3423-3441]:ReturnStatement[5252-5270]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3522-3566]:Block[5351-5395]"
    }, {
      "left" : "return userPermissionMapper;",
      "right" : "return userPermissionMapper;",
      "info" : "ReturnStatement[3532-3560]:ReturnStatement[5361-5389]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3686-3800]:Block[5515-5629]"
    }, {
      "left" : "ModeledUser user = userProvider.get();",
      "right" : "ModeledUser user = userProvider.get();",
      "info" : "VariableDeclarationStatement[3696-3734]:VariableDeclarationStatement[5525-5563]"
    }, {
      "left" : "user.init(currentUser, model);",
      "right" : "user.init(currentUser, model);",
      "info" : "ExpressionStatement[3743-3773]:ExpressionStatement[5572-5602]"
    }, {
      "left" : "return user;",
      "right" : "return user;",
      "info" : "ReturnStatement[3782-3794]:ReturnStatement[5611-5623]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3919-4302]:Block[5748-6131]"
    }, {
      "left" : "UserModel model = new UserModel();",
      "right" : "UserModel model = new UserModel();",
      "info" : "VariableDeclarationStatement[3986-4020]:VariableDeclarationStatement[5815-5849]"
    }, {
      "left" : "ModeledUser user = getObjectInstance(currentUser, model);",
      "right" : "ModeledUser user = getObjectInstance(currentUser, model);",
      "info" : "VariableDeclarationStatement[4029-4086]:VariableDeclarationStatement[5858-5915]"
    }, {
      "left" : "user.setIdentifier(object.getIdentifier());",
      "right" : "user.setIdentifier(object.getIdentifier());",
      "info" : "ExpressionStatement[4173-4216]:ExpressionStatement[6002-6045]"
    }, {
      "left" : "user.setPassword(object.getPassword());",
      "right" : "user.setPassword(object.getPassword());",
      "info" : "ExpressionStatement[4225-4264]:ExpressionStatement[6054-6093]"
    }, {
      "left" : "return model;",
      "right" : "return model;",
      "info" : "ReturnStatement[4274-4287]:ReturnStatement[6103-6116]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4422-4662]:Block[6251-6491]"
    }, {
      "left" : "SystemPermissionSet permissionSet = user.getUser().getSystemPermissions();",
      "right" : "SystemPermissionSet permissionSet = user.getUser().getSystemPermissions();",
      "info" : "VariableDeclarationStatement[4502-4576]:VariableDeclarationStatement[6331-6405]"
    }, {
      "left" : "return permissionSet.hasPermission(SystemPermission.Type.CREATE_USER);",
      "right" : "return permissionSet.hasPermission(SystemPermission.Type.CREATE_USER);",
      "info" : "ReturnStatement[4585-4655]:ReturnStatement[6414-6484]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4791-4899]:Block[6620-6728]"
    }, {
      "left" : "return user.getUser().getUserPermissions();",
      "right" : "return user.getUser().getUserPermissions();",
      "info" : "ReturnStatement[4849-4892]:ReturnStatement[6678-6721]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5026-5586]:Block[6855-7415]"
    }, {
      "left" : "super.beforeCreate(user, model);",
      "right" : "super.beforeCreate(user, model);",
      "info" : "ExpressionStatement[5037-5069]:ExpressionStatement[6866-6898]"
    }, {
      "left" : "if (model.getIdentifier() == null || model.getIdentifier().trim().isEmpty())",
      "right" : "if (model.getIdentifier() == null || model.getIdentifier().trim().isEmpty())",
      "info" : "IfStatement[5125-5284]:IfStatement[6954-7113]"
    }, {
      "left" : "throw new GuacamoleClientException(\"The username must not be blank.\");",
      "right" : "throw new GuacamoleClientException(\"The username must not be blank.\");",
      "info" : "ThrowStatement[5214-5284]:ThrowStatement[7043-7113]"
    }, {
      "left" : "Collection<UserModel> existing = userMapper.select(Collections.singleton(model.getIdentifier()));",
      "right" : "Collection<UserModel> existing = userMapper.select(Collections.singleton(model.getIdentifier()));",
      "info" : "VariableDeclarationStatement[5343-5440]:VariableDeclarationStatement[7172-7269]"
    }, {
      "left" : "if (!existing.isEmpty())",
      "right" : "if (!existing.isEmpty())",
      "info" : "IfStatement[5449-5579]:IfStatement[7278-7408]"
    }, {
      "left" : "throw new GuacamoleClientException(\"User \\\"\" + model.getIdentifier() + \"\\\" already exists.\");",
      "right" : "throw new GuacamoleClientException(\"User \\\"\" + model.getIdentifier() + \"\\\" already exists.\");",
      "info" : "ThrowStatement[5486-5579]:ThrowStatement[7315-7408]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5713-6406]:Block[7542-8235]"
    }, {
      "left" : "super.beforeUpdate(user, model);",
      "right" : "super.beforeUpdate(user, model);",
      "info" : "ExpressionStatement[5724-5756]:ExpressionStatement[7553-7585]"
    }, {
      "left" : "if (model.getIdentifier() == null || model.getIdentifier().trim().isEmpty())",
      "right" : "if (model.getIdentifier() == null || model.getIdentifier().trim().isEmpty())",
      "info" : "IfStatement[5812-5971]:IfStatement[7641-7800]"
    }, {
      "left" : "throw new GuacamoleClientException(\"The username must not be blank.\");",
      "right" : "throw new GuacamoleClientException(\"The username must not be blank.\");",
      "info" : "ThrowStatement[5901-5971]:ThrowStatement[7730-7800]"
    }, {
      "left" : "UserModel existing = userMapper.selectOne(model.getIdentifier());",
      "right" : "UserModel existing = userMapper.selectOne(model.getIdentifier());",
      "info" : "VariableDeclarationStatement[6045-6110]:VariableDeclarationStatement[7874-7939]"
    }, {
      "left" : "if (existing != null)",
      "right" : "if (existing != null)",
      "info" : "IfStatement[6119-6391]:IfStatement[7948-8220]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6141-6391]:Block[7970-8220]"
    }, {
      "left" : "if (!existing.getObjectID().equals(model.getObjectID()))",
      "right" : "if (!existing.getObjectID().equals(model.getObjectID()))",
      "info" : "IfStatement[6202-6368]:IfStatement[8031-8197]"
    }, {
      "left" : "throw new GuacamoleClientException(\"User \\\"\" + model.getIdentifier() + \"\\\" already exists.\");",
      "right" : "throw new GuacamoleClientException(\"User \\\"\" + model.getIdentifier() + \"\\\" already exists.\");",
      "info" : "ThrowStatement[6275-6368]:ThrowStatement[8104-8197]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6542-7393]:Block[8371-9222]"
    }, {
      "left" : "Collection<ObjectPermissionModel> implicitPermissions = super.getImplicitPermissions(user, model);",
      "right" : "Collection<ObjectPermissionModel> implicitPermissions = super.getImplicitPermissions(user, model);",
      "info" : "VariableDeclarationStatement[6617-6715]:VariableDeclarationStatement[8446-8544]"
    }, {
      "left" : "for (ObjectPermission.Type permissionType : IMPLICIT_USER_PERMISSIONS)",
      "right" : "for (ObjectPermission.Type permissionType : IMPLICIT_USER_PERMISSIONS)",
      "info" : "EnhancedForStatement[6787-7342]:EnhancedForStatement[8616-9171]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6858-7342]:Block[8687-9171]"
    }, {
      "left" : "ObjectPermissionModel permissionModel = new ObjectPermissionModel();",
      "right" : "ObjectPermissionModel permissionModel = new ObjectPermissionModel();",
      "info" : "VariableDeclarationStatement[6885-6953]:VariableDeclarationStatement[8714-8782]"
    }, {
      "left" : "permissionModel.setUserID(model.getObjectID());",
      "right" : "permissionModel.setUserID(model.getObjectID());",
      "info" : "ExpressionStatement[6966-7013]:ExpressionStatement[8795-8842]"
    }, {
      "left" : "permissionModel.setUsername(model.getIdentifier());",
      "right" : "permissionModel.setUsername(model.getIdentifier());",
      "info" : "ExpressionStatement[7026-7077]:ExpressionStatement[8855-8906]"
    }, {
      "left" : "permissionModel.setType(permissionType);",
      "right" : "permissionModel.setType(permissionType);",
      "info" : "ExpressionStatement[7090-7130]:ExpressionStatement[8919-8959]"
    }, {
      "left" : "permissionModel.setObjectIdentifier(model.getIdentifier());",
      "right" : "permissionModel.setObjectIdentifier(model.getIdentifier());",
      "info" : "ExpressionStatement[7143-7202]:ExpressionStatement[8972-9031]"
    }, {
      "left" : "implicitPermissions.add(permissionModel);",
      "right" : "implicitPermissions.add(permissionModel);",
      "info" : "ExpressionStatement[7278-7319]:ExpressionStatement[9107-9148]"
    }, {
      "left" : "return implicitPermissions;",
      "right" : "return implicitPermissions;",
      "info" : "ReturnStatement[7360-7387]:ReturnStatement[9189-9216]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7518-7783]:Block[9347-9612]"
    }, {
      "left" : "super.beforeDelete(user, identifier);",
      "right" : "super.beforeDelete(user, identifier);",
      "info" : "ExpressionStatement[7529-7566]:ExpressionStatement[9358-9395]"
    }, {
      "left" : "if (identifier.equals(user.getUser().getIdentifier()))",
      "right" : "if (identifier.equals(user.getUser().getIdentifier()))",
      "info" : "IfStatement[7627-7776]:IfStatement[9456-9605]"
    }, {
      "left" : "throw new GuacamoleUnsupportedException(\"Deleting your own user is not allowed.\");",
      "right" : "throw new GuacamoleUnsupportedException(\"Deleting your own user is not allowed.\");",
      "info" : "ThrowStatement[7694-7776]:ThrowStatement[9523-9605]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8172-9056]:Block[10314-12888]"
    }, {
      "left" : "String username = credentials.getUsername();",
      "right" : "String username = credentials.getUsername();",
      "info" : "VariableDeclarationStatement[8220-8264]:VariableDeclarationStatement[10362-10406]"
    }, {
      "left" : "String password = credentials.getPassword();",
      "right" : "String password = credentials.getPassword();",
      "info" : "VariableDeclarationStatement[8273-8317]:VariableDeclarationStatement[10415-10459]"
    }, {
      "left" : "UserModel userModel = userMapper.selectOne(username);",
      "right" : "UserModel userModel = userMapper.selectOne(username);",
      "info" : "VariableDeclarationStatement[8395-8448]:VariableDeclarationStatement[10537-10590]"
    }, {
      "left" : "if (userModel == null)",
      "right" : "if (userModel == null)",
      "info" : "IfStatement[8457-8504]:IfStatement[10599-10646]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[8492-8504]:ReturnStatement[10634-10646]"
    }, {
      "left" : "byte[] hash = encryptionService.createPasswordHash(password, userModel.getPasswordSalt());",
      "right" : "byte[] hash = encryptionService.createPasswordHash(password, userModel.getPasswordSalt());",
      "info" : "VariableDeclarationStatement[8577-8667]:VariableDeclarationStatement[10825-10915]"
    }, {
      "left" : "if (Arrays.equals(hash, userModel.getPasswordHash()))",
      "right" : "if (userModel.isDisabled())",
      "info" : "IfStatement[8676-8976]:IfStatement[10716-10768]"
    }, {
      "left" : "ModeledUser user = getObjectInstance(null, userModel);",
      "right" : "ModeledUser user = getObjectInstance(null, userModel);",
      "info" : "VariableDeclarationStatement[8811-8865]:VariableDeclarationStatement[11082-11136]"
    }, {
      "left" : "user.setCurrentUser(new AuthenticatedUser(user, credentials));",
      "right" : "user.setCurrentUser(new AuthenticatedUser(user, credentials));",
      "info" : "ExpressionStatement[8878-8940]:ExpressionStatement[11145-11207]"
    }, {
      "left" : "return user;",
      "right" : "return user;",
      "info" : "ReturnStatement[8953-8965]:ReturnStatement[12869-12881]"
    } ]
  },
  "interFileMappings" : { }
}